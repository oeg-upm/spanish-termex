{
    "original_text": "Distributed Norm Management in Regulated Multi-Agent Systems ∗ Dorian Gaertner Dept. of Computing, Imperial College London, London SW7 2AZ, United Kingdom dg00@doc.ic.ac.uk Andres Garcia-Camino, Pablo Noriega, J.-A. Rodriguez-Aguilar IIIA-CSIC, 08193 Bellaterra, Spain {andres,pablo,jar}@iiia.csic.es Wamberto Vasconcelos Dept. of Computing Science, University of Aberdeen, Aberdeen AB24 3UE, United Kingdom wvasconcelos@acm.org ABSTRACT Norms are widely recognised as a means of coordinating multi-agent systems. The distributed management of norms is a challenging issue and we observe a lack of truly distributed computational realisations of normative models. In order to regulate the behaviour of autonomous agents that take part in multiple, related activities, we propose a normative model, the Normative Structure (NS), an artifact that is based on the propagation of normative positions (obligations, prohibitions, permissions), as consequences of agents actions. Within a NS, conflicts may arise due to the dynamic nature of the MAS and the concurrency of agents actions. However, ensuring conflict-freedom of a NS at design time is computationally intractable. We show this by formalising the notion of conflict, providing a mapping of NSs into Coloured Petri Nets and borrowing well-known theoretical results from that field. Since online conflict resolution is required, we present a tractable algorithm to be employed distributedly. We then demonstrate that this algorithm is paramount for the distributed enactment of a NS. Categories and Subject Descriptors I.2.11 [Distributed Artificial Intelligence]: Languages and structures General Terms Algorithms, Design, Theory 1. INTRODUCTION A fundamental feature of open, regulated multi-agent systems in which autonomous agents interact, is that participating agents are meant to comply with the conventions of the system. Norms can be used to model such conventions and hence as a means to regulate the observable behaviour of agents [6, 29]. There are many contributions on the subject of norms from sociologists, philosophers and logicians (e.g., [15, 28]). However, there are very few proposals for computational realisations of normative models - the way norms can be integrated in the design and execution of MASs. The few that exist (e.g. [10, 13, 24]), operate in a centralised manner which creates bottlenecks and single points-of-failure. To our knowledge, no proposal truly supports the distributed enactment of normative environments. In our paper we approach that problem and propose means to handle conflicting commitments in open, regulated, multiagent systems in a distributed manner. The type of regulated MAS we envisage consists of multiple, concurrent, related activities where agents interact. Each agent may concurrently participate in several activities, and change from one activity to another. An agents actions within an activity may have consequences in the form of normative positions (i.e. obligations, permissions, and prohibitions) [26] that may constrain its future behaviour. For instance, a buyer agent who runs out of credit may be forbidden to make further offers, or a seller agent is obliged to deliver after closing a deal. We assume that agents may choose not to fulfill all their obligations and hence may be sanctioned by the MAS. Notice that, when activities are distributed, normative positions must flow from the activities in which they are generated to those in which they take effect. For instance, the sellers obligation above must flow (or be propagated) from a negotiation activity to a delivery activity. Since in an open, regulated MAS one cannot embed normative aspects into the agents design, we adopt the view that the MAS should be supplemented with a separate set of norms that further regulates the behaviour of participating agents. In order to model the separation of concerns between the coordination level (agents interactions) and the normative level (propagation of normative positions), we propose an artifact called the Normative Structure (NS). Within a NS conflicts may arise due to the dynamic nature of the MAS and the concurrency of agents actions. For instance, an agent may be obliged and prohibited to do the 636 978-81-904262-7-5 (RPS) c 2007 IFAAMAS very same action in an activity. Since the regulation of a MAS entails that participating agents need to be aware of the validity of those actions that take place within it, such conflicts ought to be identified and possibly resolved if a claim of validity is needed for an agent to engage in an action or be sanctioned. However, ensuring conflict-freedom of a NS at design time is computationally intractable. We show this by formalising the notion of conflict, providing a mapping of NSs into Coloured Petri Nets (CPNs) and borrowing well-known theoretical results from the field of CPNs. We believe that online conflict detection and resolution is required. Hence, we present a tractable algorithm for conflict resolution. This algorithm is paramount for the distributed enactment of a NS. The paper is organised as follows. In Section 2 we detail a scenario to serve as an example throughout the paper. Next, in Section 3 we formally define the normative structure artifact. Further on, in Section 4 we formalise the notion of conflict to subsequently analyse the complexity of conflict detection in terms of CPNs in Section 5. Section 6 describes the computational management of NSs by describing their enactment and presenting an algorithm for conflict resolution. Finally, we comment on related work, draw conclusions and report on future work in Section 7. 2. SCENARIO We use a supply-chain scenario in which companies and individuals come together at an online marketplace to conduct business. The overall transaction procedure may be organised as six distributed activities, represented as nodes in the diagram in Figure 1. They involve different participants whose behaviour is coordinated through protocols. In this scenario agents can play one of four roles: marExit Registration Payment Delivery Negotiation Coordination Model Contract Figure 1: Activity Structure of the Scenario ketplace accountant (acc), client, supplier (supp) and warehouse managers (wm). The arrows connecting the activities represent how agents can move from one activity to another. After registering at the marketplace, clients and suppliers get together in an activity where they negotiate the terms of their transaction, i.e. prices, amounts of goods to be delivered, deadlines and other details. In the contract activity, the order becomes established and an invoice is prepared. The client will then participate in a payment activity, verifying his credit-worthiness and instructing his bank to transfer the correct amount of money. The supplier in the meantime will arrange for the goods to be delivered (e.g. via a warehouse manager) in the delivery activity. Finally, agents can leave the marketplace conforming to a predetermined exit protocol. The marketplace accountant participates in most of the activities as a trusted provider of auditing tools. In the rest of the paper we shall build on this scenario to exemplify the notion of normative structure and to illustrate our approach to conflict detection and resolution in a distributed setting. 3. NORMATIVE STRUCTURE In MASs agents interact according to protocols which naturally are distributed. We advocate that actions in one such protocol may have an effect on the enactment of other protocols. Certain actions can become prohibited or obligatory, for example. We take normative positions to be obligations, prohibitions and permissions akin to work described in [26]. The intention of adding or removing a normative position we call normative command. Occurrences of normative positions in one protocol may also have consequences for other protocols1 . In order to define our norm language and specify how normative positions are propagated, we have been inspired by multi-context systems [14]. These systems allow the structuring of knowledge into distinct formal theories and the definition of relationships between them. The relationships are expressed as bridge rules - deducibility of formulae in some contexts leads to the deduction of other formulae in other contexts. Recently, these systems have been successfully used to define agent architectures [11, 23]. The metaphor translates to our current work as follows: the utterance of illocutions and/or the existence of normative positions in some normative scenes leads to the deduction of normative positions in other normative scenes. We are concerned with the propagation and distribution of normative positions within a network of distributed, normative scenes as a consequence of agents actions. We take normative scenes to be sets of normative positions and utterances that are associated with an underlying interaction protocol corresponding to an activity. In this section, we first present a simple language capturing these aspects and formally introduce the notions of normative scene, normative transition rule and normative structure. We give the intended semantics of these rules and show how to control a MAS via norms in an example. 3.1 Basic Concepts The building blocks of our language are terms and atomic formulae: Def. 1. A term, denoted as t, is (i) any constant expressed using lowercase (with or without subscripts), e.g. a, b0, c or (ii) any variable expressed using uppercase (with or without subscripts), e.g. X, Y, Zb or (iii) any function f(t1, . . . , tn), where f is an n-ary function symbol and t1, .., tn are terms. Some examples of terms and functions are Credit, price or offer(bible, 30) being respectively a variable, a constant and a function. We will be making use of identifiers throughout the paper, which are constant terms and also need the following definition: Def. 2. An atomic formula is any construct p(t1, . . . , tn), where p is an n-ary predicate symbol and t1, . . . , tn are terms. The set of all atomic formulae is denoted as Δ. We focus on an expressive class of MASs in which interaction is carried out by means of illocutionary speech acts exchanged among participating agents: Def. 3. Illocutions I are ground atomic formulae which have the form p(ag, r, ag , r , δ, t) where p is an element of 1 Here, we abstract from protocols and refer to them generically as activities. The Sixth Intl. Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 637 a set of illocutionary particles (e.g. inform, request, offer); ag, ag are agent identifiers; r, r are role identifiers; δ, an arbitrary ground term, is the content of the message, built from a shared content language; t ∈ N is a time stamp. The intuitive meaning of p(ag, r, ag , r , m, t) is that agent ag playing role r sent message m to agent ag playing role r at time t. An example of an illocution is inform(ag4, supp, ag3, client, offer(wire, 12), 10). Sometimes it is useful to refer to illocutions that are not fully grounded, that is, those that may contain uninstantiated (free) variables. In the description of a protocol, for instance, the precise values of the message exchanged can be left unspecified. During the enactment of the protocol agents will produce the actual values which will give rise to a ground illocution. We can thus define illocution schemata: Def. 4. An illocution schema ¯I is any atomic formula p(ag, r, ag , r , δ, t) in which some of the terms may either be variables or may contain variables. 3.2 Formal Definition of the Notion of NS We first define normative scenes as follows: Def. 5. A normative scene is a tuple s = ids, Δs where ids is a scene identifier and Δs is the set of atomic formulae δ (i.e. utterances and normative positions) that hold in s. We will also refer to Δs as the state of normative scene s. For instance, a snapshot of the state of the delivery normative scene of our scenario could be represented as: Δs = 8 < : utt(request(sean, client, kev, wm, receive(wire, 200), 20)), utt(accept(kev, wm, sean, client, receive(wire, 200), 30)), obl(inform(kev, wm, sean, client, delivered(wire, 200), 30)) 9 = ; That is, agent Sean taking up the client role has requested agent Kev (taking up the warehouse manager role wm) to receive 200kg of wire, and agent Kev is obliged to deliver 200kg of wire to Sean since he accepted the request. Note that the state of a normative scene Δs evolves over time. These normative scenes are connected to one another via normative transitions that specify how utterances and normative positions in one scene affect other normative scenes. As mentioned above, activities are not independent since illocutions uttered in some of them may have an effect on other ones. Normative transition rules define the conditions under which a normative command is generated. These conditions are either utterances or normative positions associated with a given protocol (denoted e.g. activity : utterance) which yield a normative command, i.e. the addition or removal of another normative position, possibly related to a different activity. Our transition rules are thus defined: Def. 6. A normative transition rule R is of the form: R ::= V C V ::= ids : D | V, V D ::= N | utt(¯I) N ::= per(¯I) | prh(¯I) | obl(¯I) C ::= add(ids : N) | remove(ids : N) where ¯I is an illocution schema, N is a normative position (i.e. permission, prohibition or obligation), ids is an identifier for activity s and C is a normative command. We endow our language with the usual semantics of rulebased languages [19]. Rules map an existing normative structure to a new normative structure where only the state of the normative scenes change. In the definitions below we rely on the standard concept of substitution [9]. Def. 7. A normative transition is a tuple b = idb, rb where idb is an identifier and rb is a normative transition rule. We are proposing to extend the notion of MAS, regulated by protocols, with an extra layer consisting of normative scenes and normative transitions. This layer is represented as a bi-partite graph that we term normative structure. A normative structure relates normative scenes and normative transitions specifying which normative positions are to be generated or removed in which normative scenes. Def. 8. A normative structure is a labelled bi-partite graph NS = Nodes, Edges, Lin , Lout . Nodes is a set S∪B where S is a set of normative scenes and B is a set of normative transitions. Edges is a set Ain ∪ Aout where Ain ⊆ S × B is a set of input arcs labelled with an atomic formula using the labelling function Lin : Ain → D; and Aout ⊆ B × S is a set of output arcs labelled with a normative position using the labelling function Lout : Aout → N. The following must hold: 1. Each atomic formula appearing in the LHS of a rule rb must be of the form (ids : D) where s ∈ S and D ∈ Δ and ∃ain ∈ Ain such that ain = (s, b) and Lin (ain ) = D. 2. The atomic formula appearing in the RHS of a rule rb must be of the form add(ids : N) or remove(ids : N) where s ∈ S and ∃aout ∈ Aout such that aout = (b, s) and Lout (aout ) = N. 3. ∀a ∈ Ain such that a = (s, b) and b = idb, rb and Lin (a) = D then (ids:D) must occur in the LHS of rb. 4. ∀a ∈ Aout such that a = (b, s) and b = idb, rb and Lout (a) = N then add(ids : N) or remove(ids : N) must occur in the RHS of rb. The first two points ensure that every atomic formulae on the LHS of a normative transition rule labels an arc entering the appropriate normative transition in the normative structure, and that the atomic formula on the RHS labels the corresponding outgoing arc. Points three and four ensure that labels from all incoming arcs are used in the LHS of the normative transition rule that these arcs enter into, and that the labels from all outgoing arcs are used in the RHS of the normative transition rule that these arcs leave. 3.3 Intended Semantics The formal semantics will be defined via a mapping to Coloured Petri Nets in Section 5.1. Here we start defining the intended semantics of normative transition rules by describing how a rule changes a normative scene of an existing normative structure yielding a new normative structure. Each rule is triggered once for each substitution that unifies the left-hand side V of the rule with the state of the corresponding normative scenes. An atomic formula (i.e. an utterance or a normative position) holds iff it is unifiable with an utterance or normative position that belongs to the state of the corresponding normative scene. Every time a rule is triggered, the normative command specified on the right-hand side of that rule is carried out, intending to add or remove a normative position from the state of the corresponding normative scene. However, addition is not unconditional as conflicts may arise. This topic will be treated in Sections 4 and 6.1. 638 The Sixth Intl. Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 3.4 Example In our running example we have the following exemplary normative transition rule: „ payment : obl(inform(X, client, Y, acc, pay(Z, P, Q), T )), payment : utt(inform(X, client, Y, acc, pay(Z, P, Q), T )) « delivery : add(obl(inform(Y, wm, X, client, delivered(Z, Q), T ))) That is, during the payment activity, an obligation on client X to inform accountant Y about the payment P of item Z at time T and the corresponding utterance which fulfills this obligation allows the flow of a norm to the delivery activity. The norm is an obligation on agent Y (this time taking up the role of the warehouse manager wm) to send a message to client X that item Z has been delivered. We show in Figure 2 a diagrammatic representation of how activities and a normative structure relate: Payment Delivery Contract Normative Level Exit Registration Payment Delivery Negotiation Coordination Level Contract nt Figure 2: Activities and Normative Structure As illocutions are uttered during activities, normative positions arise. Utterances and normative positions are combined in transition rules, causing the flow of normative positions between normative scenes. The connection between the two levels is described in Section 6.2. 4. CONFLICT DEFINITION The terms deontic conflict and deontic inconsistency have been used interchangeably in the literature. However, in this paper we adopt the view of [7] in which the authors suggest that a deontic inconsistency arises when an action is simultaneously permitted and prohibited - since a permission may not be acted upon, no real conflict occurs. The situations when an action is simultaneously obliged and prohibited are, however, deontic conflicts, as both obligations and prohibitions influence behaviours in a conflicting fashion. The content of normative positions in this paper are illocutions. Therefore, a normative conflict arises when an illocution is simultaneously obliged and prohibited. We propose to use the standard notion of unification [9] to detect when a prohibition and a permission overlap. For instance, an obligation obl(inform(A1, R1, A2, R2, p(c, X), T)) and a prohibition prh(inform(a1, r1, a2, r2, p(Y, d), T )) are in conflict as they unify under σ = {A1/a1, R1/r1, A2/a2, R2/r2, Y/c, X/d, T/T }). We formally capture this notion: Def. 9. A (deontic) conflict arises between two normative positions N and N under a substitution σ, denoted as conflict(N, N , σ), if and only if N = prh(¯I), N = obl(¯I ) and unify(¯I,¯I , σ). That is, a prohibition and an obligation are in conflict if, and only if, their illocutions unify under σ. The substitution σ, called here the conflict set, unifies the agents, roles and atomic formulae. We assume that unify is a suitable implementation of a unification algorithm which i) always terminates (possibly failing, if a unifier cannot be found); ii) is correct; and iii) has linear computational complexity. Inconsistencies caused by the same illocution being simultaneously permitted and prohibited can be formalised similarly. In this paper we focus on prohibition/obligation conflicts, but the computational machinery introduced in Section 6.1 can equally be used to detect prohibition/permission inconsistencies, if we substitute modality obl for per. 5. FORMALISING CONFLICT-FREEDOM In this section we introduce some background knowledge on CPNs assuming a basic understanding of ordinary Petri Nets. For technical details we refer the reader to [16]. We then map NSs to CPNs and analyse their properties. CPNs combine the strength of Petri nets with the strength of functional programming languages. On the one hand, Petri nets provide the primitives for the description of the synchronisation of concurrent processes. As noticed in [16], CPNs have a semantics which builds upon true concurrency, instead of interleaving. In our opinion, a true-concurrency semantics is easier to work with because it is the way we envisage the connection between the coordination level and the normative level of a multi-agent system to be. On the other hand, the functional programming languages used by CPNs provide the primitives for the definition of data types and the manipulation of their data values. Thus, we can readily translate expressions of a normative structure. Last but not least, CPNs have a well-defined semantics which unambiguously defines the behaviour of each CPN. Furthermore, CPNs have a large number of formal analysis methods and tools by which properties of CPNs can be proved. Summing up, CPNs provide us with all the necessary features to formally reason about normative structures given that an adequate mapping is provided. In accordance with Petri nets, the states of a CPN are represented by means of places. But unlike Petri Nets, each place has an associated data type determining the kind of data which the place may contain. A state of a CPN is called a marking. It consists of a number of tokens positioned on the individual places. Each token carries a data value which has the type of the corresponding place. In general, a place may contain two or more tokens with the same data value. Thus, a marking of a CPN is a function which maps each place into a multi-set2 of tokens of the correct type. One often refers to the token values as token colours and one also refers to the data types as colour sets. The types of a CPN can be arbitrarily complex. Actions in a CPN are represented by means of transitions. An incoming arc into a transition from a place indicates that the transition may remove tokens from the corresponding place while an outgoing arc indicates that the transition may add tokens. The exact number of tokens and their data values are determined by the arc expressions, which are encoded using the programming language chosen for the CPN. A transition is enabled in a CPN if and only if all the 2 A multi-set (or bag) is an extension to the notion of set, allowing the possibility of multiple appearances of the same element. The Sixth Intl. Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 639 variables in the expressions of its incoming arcs are bound to some value(s) (each one of these bindings is referred to as a binding element). If so, the transition may occur by removing tokens from its input places and adding tokens to its output places. In addition to the arc expressions, it is possible to attach a boolean guard expression (with variables) to each transition. Putting all the elements above together we obtain a formal definition of CPN that shall be employed further ahead for mapping purposes. Def. 10. A CPN is a tuple Σ, P, T, A, N, C, G, E, I where: (i) Σ is a finite set of non-empty types, also called colour sets; (ii) P is a finite set of places; (iii) T is a finite set of transitions; (iv) A is a finite set of arcs; (v) N is a node function defined from A into P × T ∪ T × P; (vi) C is a colour function from P into Σ; (vii) G is a guard function from T into expressions; (viii) E is an arc expression function from A into expressions; (ix) I is an initialisation function from P into closed expressions; Notice that the informal explanation of the enabling and occurrence rules given above provides the foundations to understand the behaviour of a CPN. In accordance with ordinary Petri nets, the concurrent behaviour of a CPN is based on the notion of step. Formally, a step is a non-empty and finite multi-set over the set of all binding elements. Let step S be enabled in a marking M. Then, S may occur, changing the marking M to M . Moreover, we say that marking M is directly reachable from marking M by the occurrence of step S, and we denote it by M[S > M . A finite occurrence sequence is a finite sequence of steps and markings: M1[S1 > M2 . . . Mn[Sn > Mn+1 such that n ∈ N and Mi[Si > Mi+1 ∀i ∈ {1, . . . , n}. The set of all possible markings reachable for a net Net from a marking M is called its reachability set, and is denoted as R(Net, M). 5.1 Mapping to Coloured Petri Nets Our normative structure is a labelled bi-partite graph. The same is true for a Coloured Petri Net. We are presenting a mapping f from one to the other, in order to provide semantics for the normative structure and prove properties about it by using well-known theoretical results from work on CPNs. The mapping f makes use of correspondences between normative scenes and CPN places, normative transitions and CPN transitions and finally, between arc labels and CPN arc expressions. S → P B → T Lin ∪ Lout → E The set of types is the singleton set containing the colour NP (i.e. Σ = {NP}). This complex type is structured as follows (we use CPN-ML [4] syntax): color NPT = with Obl | Per | Prh | NoMod color IP = with inform | declare | offer color UTT = record illp : IP ag1, role1, ag2, role2 : string content: string time : int color NP = record mode : NPT illoc : UTT Modelling illocutions as norms without modality (NoMod) is a formal trick we use to ensure that sub-nets can be combined as explained below. Arcs are mapped almost directly. A is a finite set of arcs and N is a node function, such that ∀a ∈ A ∃a ∈ Ain ∪Aout . N(a) = a . The initialisation function I is defined as I(p) = Δs (∀s ∈ S where p is obtained from s using the mapping; remember that s = ids, Δs ). Finally, the colour function C assigns the colour NP to every place: C(p) = NP (∀p ∈ P). We are not making use of the guard function G. In future work, this function can be used to model constraints when we extend the expressiveness of our norm language. 5.2 Properties of Normative Structures Having defined the mapping from normative structures to Coloured Petri Nets, we now look at properties of CPNs that help us understand the complexity of conflict detection. One question we would like to answer is, whether at a given point in time, a given normative structure is conflict-free. Such a snapshot of a normative structure corresponds to a marking in the mapped CPN. Def. 11. Given a marking Mi, this marking is conflictfree if ¬∃p ∈ P. ∃np1, np2 ∈ Mi(p) such that np1.mode = Obl and np2.mode = Prh and np1.illoc and np2.illoc unify under a valid substitution. Another interesting question would be, whether a conflict will occur from such a snapshot of the system by propagating the normative positions. In order to answer this question, we first translate the snapshot of the normative structure to the corresponding CPN and then execute the finite occurence sequence of markings and steps, verifying the conflict-freedom of each marking as we go along. Def. 12. Given a marking Mi, a finite occurrence sequence Si, Si+1, ..., Sn is called conflict-free, if and only if Mi[Si > Mi+1 . . . Mn[Sn > Mn+1 and Mk is conflict-free for all k such that i ≤ k ≤ n + 1. However, the main question we would like to investigate, is whether or not a given normative structure is conflictresistant, that is, whether or not the agents enacting the MAS are able to bring about conflicts through their actions. As soon as one includes the possibility of actions (or utterances) from autonomous agents, one looses determinism. Having mapped the normative structure to a CPN, we now add CPN models of the agents interactions. Each form of agent interaction (i.e. each activity) can be modelled using CPNs along the lines of Cost et al. [5]. These nondeterministic CPNs feed tokens into the CPN that models the normative structure. This leads to the introduction of non-determinism into the combined CPN. The lower half of figure 3 shows part of a CPN model of an agent protocol where the arc denoted with 1 represents some utterance of an illocution by an agent. The target transition of this arc, not only moves a token on to the next state of this CPN, but also places a token in the place corresponding to the appropriate normative scene in the CPN model of the normative structure (via arc 2). Transition 3 finally could propagate that token in form of an obligation, for example. Thus, from a given marking, many different occurrence sequences are possible depending on the agents actions. We make use of the reachability set R to define a situation in which agents cannot cause conflicts. 640 The Sixth Intl. Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Figure 3: Constructing the combined CPN Def. 13. Given a net N, a marking M is conflict-resistant if and only if all markings in R(N,M) are conflict-free. Checking conflict-freedom of a marking can be done in polynomial time by checking all places of the CPN for conflicting tokens. Conflict-freedom of an occurrence sequence in the CPN that represents the normative structure can also be done in polynomial time since this sequence is deterministic given a snapshot. Whether or not a normative structure is designed safely corresponds to checking the conflict-resistance of the initial marking M0. Now, verifying conflict-resistance of a marking becomes a very difficult task. It corresponds to the reachability problem in a CPN: can a state be reached or a marking achieved, that contains a conflict?. This reachability problem is known to be NP-complete for ordinary Petri Nets [22] and since CPNs are functionally identical, we cannot hope to verify conflict-resistance of a normative structure off-line in a reasonable amount of time. Therefore, distributed, run-time mechanisms are needed to ensure that a normative structure maintains consistency. We present one such mechanism in the following section. 6. MANAGING NORMATIVE STRUCTURES Once a conflict (as defined in Section 4) has been detected, we propose to employ the unifier to resolve the conflict. In our example, if the variables in prh(inform(a1, r1, a2, r2, p(Y, d), T )) do not get the values specified in substitution σ then there will not be a conflict. However, rather than computing the complement set of a substitution (which can be an infinite set) we propose to annotate the prohibition with the unifier itself and use it to determine what the variables of that prohibition cannot be in future unifications in order to avoid a conflict. We therefore denote annotated prohibitions as prh(¯I) Σ, where Σ = {σ1, . . . , σn}, is a set of unifiers. Annotated norms3 are interpreted as deontic constructs with curtailed influences, that is, their effect (on agents, roles and illocutions) has been limited by the set Σ of unifiers. A prohibition may be in conflict with various obligations in a given normative scene s = id, Δ and we need to record (and possibly avoid) all these conflicts. We define below an algorithm which ensures that a normative position will be added to a normative scene in such a way that it will not cause any conflicts. 3 Although we propose to curtail prohibitions, the same machinery can be used to define the curtailment of obligations instead. These different policies are dependent on the intended deontic semantics and requirements of the systems addressed. For instance, some MASs may require that their agents should not act in the presence of conflicts, that is, the obligation should be curtailed. 6.1 Conflict Resolution We propose a fine-grained way of resolving normative conflicts via unification. We detect the overlapping of the influences of norms , i.e. how they affect the behaviour of the concerned agents, and we curtail the influence of the normative position, by appropriately using the annotations when checking if the norm applies to illocutions. The algorithm shown in Figure 4 depicts how we maintain a conflict-free set of norms. It adds a given norm N to an existing, conflictfree normative state Δ, obtaining a resulting new normative state Δ which is conflict-free, that is, its prohibitions are annotated with a set of conflict sets indicating which bindings for variables have to be avoided for conflicts not to take place. algorithm addNorm(N, Δ) begin 1 timestamp(N) 2 case N of 3 per(¯I): Δ := Δ ∪ {N} 4 prh(I): if N ∈ Δ s.t. conflict(N, N , σ) then Δ := Δ 5 else Δ := Δ ∪ {N} 6 prh(¯I): 7 begin 8 Σ := ∅ 9 for each N ∈ Δ do 10 if conflict(N, N , σ) then Σ := Σ ∪ {σ} 11 Δ := Δ ∪ {N Σ} 12 end 13 obl(¯I): 14 begin 15 Δ1 := ∅; Δ2 := ∅ 16 for each (N Σ) ∈ Δ do 17 if N = prh(I) then 18 if conflict(N , N, σ) then Δ1 := Δ1 ∪ {N Σ} 19 else nil 20 else 21 if conflict(N , N, σ) then 22 begin 23 Δ1 := Δ1 ∪ {N Σ} 24 Δ2 := Δ2 ∪ {N (Σ ∪ {σ})} 25 end 26 Δ := (Δ − Δ1) ∪ Δ2 ∪ {N} 27 end 28 end case 29 return Δ end Figure 4: Algorithm to Preserve Conflict-Freedom The algorithm uses a case of structure to differentiate the different possibilities for a given norm N. Line 3 addresses the case when the given norm is a permission: N is simply added to Δ. Lines 4-5 address the case when we attempt to add a ground prohibition to a normative state: if it conflicts with any obligation, then it is discarded; otherwise it is added to the normative state. Lines 6-12 describe the situation when the normative position to be added is a nonground prohibition. In this case, the algorithm initialises Σ to an empty set and loops (line 9-10) through the norms N in the old normative state Δ. Upon finding one that conflicts with N, the algorithm updates Σ by adding the newly found conflict set σ to it (line 10). By looping through Δ, we are able to check any conflicts between the new prohibition and the existing obligations, adequately building the annotation Σ to be used when adding N to Δ in line 11. Lines 13-27 describe how a new obligation is accommodated to an existing normative state. We make use of two initially empty, temporary sets, Δ1, Δ2. The algorithm loops through Δ (lines 16-25) picking up those annotated prohibitions N Σ which conflict with the new obligation. There are, however, two cases to deal with: the one when a ground The Sixth Intl. Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 641 prohibition is found (line 17), and its exception, covering non-ground prohibitions (line 20). In both cases, the old prohibition is stored in Δ1 (lines 18 and 23) to be later removed from Δ (line 26). However, in the case of a nonground prohibition, the algorithm updates its annotation of conflict sets (line 24). The loop guarantees that an exhaustive (linear) search through a normative state takes place, checking if the new obligation is in conflict with any existing prohibitions, possibly updating the annotations of these conflicting prohibitions. In line 26 the algorithm builds the new updated Δ by removing the old prohibitions stored in Δ1 and adding the updated prohibitions stored in Δ2 (if any), as well as the new obligation N. Our proposed algorithm is correct in that, for a given normative position N and a normative state Δ, it provides a new normative state Δ in which all prohibitions have annotations recording how they unify with existing obligations. The annotations can be empty, though: this is the case when we have a ground prohibition or a prohibition which does not unify/conflict with any obligation. Permissions do not affect our algorithm and they are appropriately dealt with (line 3). Any attempt to insert a ground prohibition which conflicts, yields the same normative state (line 4). When a new obligation is being added then the algorithm guarantees that all prohibitions are considered (lines 14-27), leading to the removal of conflicting ground prohibitions or the update of annotations of non-ground prohibitions. The algorithm always terminates: the loops are over a finite set Δ and the conflict checks and set operations always terminate. The complexity of the algorithm is linear: the set Δ is only examined once for each possible case of norm to be added. When managing normative states we may also need to remove normative positions. This is straightforward: permissions can be removed without any problems; annotated prohibitions can also be removed without further considerations; obligations, however, require some housekeeping. When an obligation is to be removed, we must check it against all annotated prohibitions in order to update their annotations. We apply the conflict check and obtain a unifier, then remove this unifier from the prohibitions annotation. We invoke the removal algorithm as removeNorm(N, Δ): it returns a new normative state Δ in which N has been removed, with possible alterations to other normative positions as explained. 6.2 Enactment of a Normative Structure The enactment of a normative structure amounts to the parallel, distributed execution of normative scenes and normative transitions. For illustrative purposes, hereafter we shall describe the interplay between the payment and delivery normative scenes and the normative transition nt linking them in the upper half of figure 2. With this aim, consider for instance that obl(inform(jules, client, rod, acc, pay(copper, 400, 350), T) ∈ Δpayment and that Δdelivery holds prh(inform(rod,wm, jules, client, delivered(Z, Q), T)). Such states indicate that client Jules is obliged to pay £400 for 350kg of copper to accountant Rod according to the payment normative scene, whereas Rod, taking up the role of warehouse manager this time, is prohibited to deliver anything to client Jules according to the delivery normative scene. For each normative scene, the enactment process goes as follows. Firstly, it processes its incoming message queue that contains three types of messages: utterances from the activity it is linked to; and normative commands either to add or remove normative positions. For instance, in our example, the payment normative scene collects the illocution I = utt((inform(jules, client, rod, acc, pay(copper, 400, 350), 35)) standing for client Jules pending payment for copper (via arrow A in figure 2). Utterances are timestamped and subsequently added to the normative state. We would have Δpayment = Δpayment ∪ {I}, in our example. Upon receiving normative commands to either add or remove a normative position, the normative scene invokes the corresponding addition or removal algorithm described in Section 6.1. Secondly, the normative scene acknowledges its state change by sending a trigger message to every outgoing normative transition it is connected to. In our example, the payment normative scene would be signalling its state change to normative transition nt. For normative transitions, the process works differently. Because each normative transition controls the operation of a single rule, upon receiving a trigger message, it polls every incoming normative scene for substitutions for the relevant illocution schemata on the LHS of its rule. In our example, nt (being responsible for the rule described in Section 3.4), would poll the payment normative scene (via arrow B) for substitutions. Upon receiving replies from them (in the form of sets of substitutions together with time-stamps), it has to unify substitutions from each of these normative scenes. For each unification it finds, the rule is fired, and hence the corresponding normative command is sent along to the output normative scene. The normative transition then keeps track of the firing message it sent on and of the time-stamps of the normative positions that triggered the firing. This is done to ensure that the very same normative positions in the LHS of a rule only trigger its firing once. In our example, nt would be receiving σ = {X/jules, Y/rod, Z/copper, Q/350} from the payment normative scene. Since the substitions in σ unify with nts rule, the rule is fired, and the normative command add(delivery : obl(rod, wm, jules, client, delivered(copper, 350), T)) is sent along to the delivery normative scene to oblige Rod to deliver to client Jules 350kg of copper. After that, the delivery normative scene would invoke the addNorm algorithm from figure 4 with Δdelivery and N = obl(rod, wm, jules, client, delivered(copper, 350)) as arguments. 7. RELATED WORK AND CONCLUSIONS Our contributions in this paper are three-fold. Firstly, we introduce an approach for the management of and reasoning about norms in a distributed manner. To our knowledge, there is little work published in this direction. In [8, 21], two languages are presented for the distributed enforcement of norms in MAS. However, in both works, each agent has a local message interface that forwards legal messages according to a set of norms. Since these interfaces are local to each agent, norms can only be expressed in terms of actions of that agent. This is a serious disadvantage, e.g. when one needs to activate an obligation to one agent due to a certain message of another one. The second contribution is the proposal of a normative structure. The notion is fruitful because it allows the separation of normative and procedural concerns. The normative structure we propose makes evident the similarity between the propagation of normative positions and the propagation 642 The Sixth Intl. Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) of tokens in Coloured Petri Nets. That similarity readily suggests a mapping between the two, and gives grounds to a convenient analytical treatment of the normative structure, in general, and the complexity of conflict detection, in particular. The idea of modelling interactions (in the form of conversations) via Petri Nets has been investigated in [18], where the interaction medium and individual agents are modelled as CPN sub-nets that are subsequently combined for analysis. In [5], conversations are first designed and analysed at the level of CPNs and thereafter translated into protocols. Lin et al. [20] map conversation schemata to CPNs. To our knowledge, the use of this representation in the support of conflict detection in regulated MAS has not been reported elsewhere. Finally, we present a distributed mechanism to resolve normative conflicts. Sartor [25] treats normative conflicts from the point of view of legal theory and suggests a way to order the norms involved. His idea is implemented in [12] but requires a central resource for norm maintenance. The approach to conflict detection and resolution is an adaptation and extension of the work on instantiation graphs reported in [17] and a related algorithm in [27]. The algorithm presented in the current paper can be used to manage normative states distributedly: normative scenes that happen in parallel have an associated normative state Δ to which the algorithm is independently applied each time a new norm is to be introduced. These three contributions we present in this paper open many possibilities for future work. We should mention first, that as a broad strategy we are working on a generalisation of the notion of normative structure to make it operate with different coordination models, with richer deontic content and on top of different computational realisations of regulated MAS. As a first step in this direction we are taking advantage of the de-coupling between interaction protocols and declarative normative guidance that the normative structure makes available, to provide a normative layer for electronic institutions (as defined in [1]). We expect such coupling will endow electronic institutions with a more flexible -and more expressive- normative environment. Furthermore, we want to extend our model along several directions: (1) to handle negation and constraints as part of the norm language, and in particular the notion of time; (2) to accommodate multiple, hierarchical norm authorities based on roles, along the lines of Cholvy and Cuppens [3] and power relationships as suggested by Carabelea et al. [2]; (3) to capture in the conflict resolution algorithm different semantics relating the deontic notions by supporting different axiomations (e.g., relative strength of prohibition versus obligation, default deontic notions, deontic inconsistencies). On the theoretical side, we intend to use analysis techniques of CPNs in order to characterise classes of CPNs (e.g., acyclic, symmetric, etc.) corresponding to families of Normative Structures that are susceptible to tractable offline conflict detection. The combination of these techniques along with our online conflict resolution mechanisms is intended to endow MAS designers with the ability to incorporate norms into their systems in a principled way. 8. REFERENCES [1] J. L. Arcos, M. Esteva, P. Noriega, J. A. Rodr´ıguez, and C. Sierra. Engineering open environments with electronic institutions. Journal on Engineering Applications of Artificial Intelligence, 18(2):191-204, 2005. [2] C. Carabelea, O. Boissier, and C. Castelfranchi. Using social power to enable agents to reason about being part of a group. In 5th Internat. Workshop, ESAW 2004, pages 166-177, 2004. [3] L. Cholvy and F. Cuppens. Solving normative conflicts by merging roles. In Fifth International Conference on Artificial Intelligence and Law, Washington, USA, 1995. [4] S. Christensen and T. B. Haagh. Design CPN - overview of CPN ML syntax. Technical report, University of Aarhus, 1996. [5] R. S. Cost, Y. Chen, T. W. Finin, Y. Labrou, and Y. Peng. Using colored petri nets for conversation modeling. In Issues in Agent Communication, pages 178-192, London, UK, 2000. [6] F. Dignum. Autonomous Agents with Norms. Artificial Intelligence and Law, 7(1):69-79, 1999. [7] A. Elhag, J. Breuker, and P. Brouwer. On the Formal Analysis of Normative Conflicts. Information & Comms. Techn. Law, 9(3):207-217, Oct. 2000. [8] M. Esteva, W. Vasconcelos, C. Sierra, and J. A. Rodr´ıguez-Aguilar. Norm consistency in electronic institutions. volume 3171 (LNAI), pages 494-505. Springer-Verlag, 2004. [9] M. Fitting. First-Order Logic and Automated Theorem Proving. Springer-Verlag, New York, U.S.A., 1990. [10] N. Fornara, F. Vigan`o, and M. Colombetti. An Event Driven Approach to Norms in Artificial Institutions. In AAMAS05 Workshop: Agents, Norms and Institutions for Regulated Multiagent Systems (ANI@REM), Utrecht, 2005. [11] D. Gaertner, P. Noriega, and C. Sierra. Extending the BDI architecture with commitments. In Proceedings of the 9th International Conference of the Catalan Association of Artificial Intelligence, 2006. [12] A. Garc´ıa-Camino, P. Noriega, and J.-A. Rodr´ıguez-Aguilar. An Algorithm for Conflict Resolution in Regulated Compound Activities. In 7th Int.Workshop - ESAW 06, 2006. [13] A. Garc´ıa-Camino, J.-A. Rodr´ıguez-Aguilar, C. Sierra, and W. Vasconcelos. A Distributed Architecture for Norm-Aware Agent Societies. In DALT III, volume 3904 (LNAI), pages 89-105. Springer, 2006. [14] F. Giunchiglia and L. Serafini. Multi-language hierarchical logics or: How we can do without modal logics. Artificial Intelligence, 65(1):29-70, 1994. [15] J. Habermas. The Theory of Communication Action, Volume One, Reason and the Rationalization of Society. Beacon Press, 1984. [16] K. Jensen. Coloured Petri Nets: Basic Concepts, Analysis Methods and Practical Uses (Volume 1). Springer, 1997. [17] M. Kollingbaum and T. Norman. Strategies for resolving norm conflict in practical reasoning. In ECAI Workshop Coordination in Emergent Agent Societies 2004, 2004. [18] J.-L. Koning, G. Francois, and Y. Demazeau. Formalization and pre-validation for interaction protocols in a multi agent systems. In ECAI, pages 298-307, 1998. [19] B. Kramer and J. Mylopoulos. Knowledge Representation. In S. C. Shapiro, editor, Encyclopedia of Artificial Intelligence, volume 1, pages 743-759. John Wiley & Sons, 1992. [20] F. Lin, D. H. Norrie, W. Shen, and R. Kremer. A schema-based approach to specifying conversation policies. In Issues in Agent Communication, pages 193-204, 2000. [21] N. Minsky. Law Governed Interaction (LGI): A Distributed Coordination and Control Mechanism (An Introduction, and a Reference Manual). Technical report, Rutgers University, 2005. [22] T. Murata. Petri nets: Properties, analysis and applications. Proceedings of the IEEE, 77(4):541-580, 1989. [23] S. Parsons, C. Sierra, and N. Jennings. Agents that reason and negotiate by arguing. Journal of Logic and Computation, 8(3):261-292, 1998. [24] A. Ricci and M. Viroli. Coordination Artifacts: A Unifying Abstraction for Engineering Environment-Mediated Coordination in MAS. Informatica, 29:433-443, 2005. [25] G. Sartor. Normative conflicts in legal reasoning. Artificial Intelligence and Law, 1(2-3):209-235, June 1992. [26] M. Sergot. A Computational Theory of Normative Positions. ACM Trans. Comput. Logic, 2(4):581-622, 2001. [27] W. W. Vasconcelos, M. Kollingbaum, and T. Norman. Resolving Conflict and Inconsistency in Norm-Regulated Virtual Organisations. In Proceedings of AAMAS 07, Hawaii, USA, 2007. IFAAMAS. [28] G. H. von Wright. Norm and Action: A Logical Inquiry. Routledge and Kegan Paul, London, 1963. [29] M. Wooldridge. An Introduction to Multiagent Systems. John Wiley & Sons, Chichester, UK, Feb. 2002. The Sixth Intl. Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 643",
    "original_translation": "Gestión de Normas Distribuidas en Sistemas Regulados Multi-Agente ∗ Dorian Gaertner Dept. de Computación, Imperial College London, Londres SW7 2AZ, Reino Unido dg00@doc.ic.ac.uk Andrés García-Camino, Pablo Noriega, J.-A. Rodriguez-Aguilar IIIA-CSIC, 08193 Bellaterra, España {andres,pablo,jarážiya.csic.es Wamberto Vasconcelos Dept. de Ciencias de la Computación, Universidad de Aberdeen, Aberdeen AB24 3UE, Reino Unido wvasconcelos@acm.org RESUMEN Las normas son ampliamente reconocidas como un medio de coordinar sistemas multi-agentes. La gestión distribuida de las normas es una cuestión difícil y observamos una falta de realizaciones computacionales verdaderamente distribuidas de los modelos normativos. Con el fin de regular el comportamiento de los agentes autónomos que participan en múltiples actividades relacionadas, proponemos un modelo normativo, la Estructura Normativa (NS), un artefacto que se basa en la propagación de posiciones normativas (obligaciones, prohibiciones, permisos), como consecuencias de las acciones de los agentes. Dentro de un NS, los conflictos pueden surgir debido a la naturaleza dinámica del MAS y la concurrencia de acciones de los agentes. Sin embargo, garantizar la libertad de conflicto de un NS en el momento del diseño es computacionalmente intratable. Demostramos esto formalizando la noción de conflicto, proporcionando un mapeo de los NS en las Redes Petri Coloreadas y tomando prestado los resultados teóricos bien conocidos de ese campo. Dado que se requiere la resolución de conflictos en línea, presentamos un algoritmo tratable que se empleará de forma distribuida. Luego demostramos que este algoritmo es primordial para la promulgación distribuida de un NS. Categorías y sujetos Descriptores I.2.11 [Inteligencia Artificial Distribuida]: Idiomas y estructuras Términos generales Algoritmos, Diseño, Teoría 1. INTRODUCCIÓN Una característica fundamental de los sistemas multiagente abiertos y regulados en los que interactúan agentes autónomos, es que los agentes participantes están destinados a cumplir con las convenciones del sistema. Las normas pueden utilizarse para modelar tales convenciones y, por lo tanto, como medio para regular el comportamiento observable de los agentes [6, 29]. Hay muchas contribuciones sobre el tema de las normas de sociólogos, filósofos y lógicos (por ejemplo, [15, 28]). Sin embargo, hay muy pocas propuestas para la realización computacional de modelos normativos - la forma en que las normas pueden integrarse en el diseño y ejecución de MAS. Los pocos que existen (e.g. [10, 13, 24]), funcionan de manera centralizada, lo que crea cuellos de botella y puntos de fallo únicos. Hasta donde sabemos, ninguna propuesta apoya verdaderamente la promulgación distribuida de entornos normativos. En nuestro documento abordamos ese problema y proponemos medios para manejar los compromisos contradictorios en sistemas abiertos, regulados y multiagentes de manera distribuida. El tipo de MAS regulado que contemplamos consiste en actividades múltiples, simultáneas, relacionadas donde los agentes interactúan. Cada agente puede participar simultáneamente en varias actividades, y cambiar de una actividad a otra. Las acciones de un agente dentro de una actividad pueden tener consecuencias en forma de posiciones normativas (es decir. obligaciones, permisos y prohibiciones) [26] que puedan limitar su comportamiento futuro. Por ejemplo, un agente comprador que se queda sin crédito puede estar prohibido hacer más ofertas, o un agente vendedor está obligado a entregar después de cerrar un acuerdo. Asumimos que los agentes pueden optar por no cumplir todas sus obligaciones y, por lo tanto, pueden ser sancionados por el MAS. Obsérvese que, cuando se distribuyen las actividades, las posiciones normativas deben derivarse de las actividades en las que se generan a aquellas en las que surten efecto. Por ejemplo, la obligación de los vendedores de arriba debe fluir (o propagarse) de una actividad de negociación a una actividad de entrega. Dado que en un MAS abierto y regulado no se pueden incorporar aspectos normativos en el diseño de los agentes, adoptamos la opinión de que el MAS debe complementarse con un conjunto separado de normas que regulen aún más el comportamiento de los agentes participantes. Para modelar la separación de preocupaciones entre el nivel de coordinación (interacciones de agentes) y el nivel normativo (propagación de posiciones normativas), proponemos un artefacto llamado Estructura Normativa (NS). Dentro de un NS pueden surgir conflictos debido a la naturaleza dinámica del MAS y la concurrencia de acciones de los agentes. Por ejemplo, un agente puede estar obligado y prohibido a realizar el 636 978-81-904262-7-5 (RPS) c 2007 IFAAMAS muy mismo acción en una actividad. Dado que la regulación de un MAS implica que los agentes participantes deben ser conscientes de la validez de las acciones que tienen lugar dentro de él, dichos conflictos deben ser identificados y posiblemente resueltos si se necesita una reivindicación de validez para que un agente realice una acción o sea sancionado. Sin embargo, garantizar la libertad de conflicto de un NS en el momento del diseño es computacionalmente intratable. Demostramos esto formalizando la noción de conflicto, proporcionando un mapeo de los NS en las redes de Petri de colores (CPNs) y tomando prestado los resultados teóricos bien conocidos del campo de los CPNs. Creemos que se requiere la detección y resolución de conflictos en línea. Por lo tanto, presentamos un algoritmo tratable para la resolución de conflictos. Este algoritmo es primordial para la promulgación distribuida de un NS. El documento se organiza de la siguiente manera. En la Sección 2 detallamos un escenario para servir de ejemplo a lo largo del artículo. A continuación, en la Sección 3 definimos formalmente el artefacto de la estructura normativa. Además, en la sección 4 formalizamos la noción de conflicto para posteriormente analizar la complejidad de la detección de conflictos en términos de RCP en la sección 5. En la sección 6 se describe la gestión computacional de los NS describiendo su promulgación y presentando un algoritmo para la resolución de conflictos. Por último, comentamos sobre la labor conexa, sacamos conclusiones e informamos sobre la labor futura en la sección 7. 2. SCENARIO Utilizamos un escenario de cadena de suministro en el que empresas e individuos se reúnen en un mercado en línea para realizar negocios. El procedimiento de transacción global puede organizarse como seis actividades distribuidas, representadas como nodos en el diagrama de la Figura 1. En ellas participan diferentes participantes cuyo comportamiento se coordina a través de protocolos. En este escenario, los agentes pueden desempeñar uno de los cuatro papeles: marExit Inscripción Pago Entrega Negociación Coordinación Modelo Contrato Figura 1: Estructura de actividad del contador de ketplace (acc), cliente, proveedor (supp) y gerentes de almacén (wm). Las flechas que conectan las actividades representan cómo los agentes pueden moverse de una actividad a otra. Después de registrarse en el mercado, los clientes y proveedores se reúnen en una actividad en la que negocian los términos de su transacción, es decir. los precios, los importes de las mercancías que deban entregarse, los plazos y otros detalles. En la actividad contractual, se establece el pedido y se prepara una factura. El cliente participará entonces en una actividad de pago, verificando su solvencia e instruyendo a su banco a transferir la cantidad correcta de dinero. Mientras tanto, el proveedor se encargará de la entrega de las mercancías (por ejemplo: a través de un administrador de almacén) en la actividad de entrega. Finalmente, los agentes pueden salir del mercado conforme a un protocolo de salida predeterminado. El contable del mercado participa en la mayoría de las actividades como proveedor confiable de herramientas de auditoría. En el resto del documento nos basaremos en este escenario para ilustrar la noción de estructura normativa e ilustrar nuestro enfoque de la detección y resolución de conflictos en un entorno distribuido. 3. ESTRUCTURA NORMATIVA En los agentes MASs interactúan según protocolos que naturalmente se distribuyen. Abogamos por que las acciones en uno de esos protocolos puedan tener un efecto en la promulgación de otros protocolos. Algunas acciones pueden ser prohibidas u obligatorias, por ejemplo. Tomamos posiciones normativas para ser obligaciones, prohibiciones y permisos similares al trabajo descrito en [26]. La intención de agregar o eliminar una posición normativa que llamamos comando normativo. Los casos de posiciones normativas en un protocolo también pueden tener consecuencias para otros protocolos1. Para definir nuestro lenguaje de norma y especificar cómo se propagan las posiciones normativas, nos hemos inspirado en sistemas multicontexto [14]. Estos sistemas permiten estructurar el conocimiento en teorías formales distintas y definir las relaciones entre ellos. Las relaciones se expresan como reglas puente - la deducibilidad de las fórmulas en algunos contextos conduce a la deducción de otras fórmulas en otros contextos. Recientemente, estos sistemas se han utilizado con éxito para definir arquitecturas de agentes [11, 23]. La metáfora se traduce a nuestro trabajo actual de la siguiente manera: la expresión de las ilocuciones y/o la existencia de posiciones normativas en algunas escenas normativas conduce a la deducción de posiciones normativas en otras escenas normativas. Nos preocupa la propagación y distribución de posiciones normativas dentro de una red de escenas normativas distribuidas como consecuencia de las acciones de los agentes. Tomamos escenas normativas para ser conjuntos de posiciones normativas y expresiones que están asociadas con un protocolo de interacción subyacente correspondiente a una actividad. En esta sección, presentamos primero un lenguaje simple que capta estos aspectos e introduce formalmente las nociones de escena normativa, regla de transición normativa y estructura normativa. Damos la semántica prevista de estas reglas y mostramos cómo controlar un MAS a través de normas en un ejemplo. 3.1 Conceptos básicos Los componentes básicos de nuestro lenguaje son términos y fórmulas atómicas: Def. 1. Un término, denotado como t, es (i) cualquier constante expresada usando minúsculas (con o sin subíndices), por ejemplo. a, b0, c o ii) cualquier variable expresada utilizando mayúsculas (con o sin subíndices), por ejemplo. X, Y, Zb o iii) cualquier función f(t1,. . . , tn), donde f es un símbolo de función n-ary y t1,.., tn son términos. Algunos ejemplos de términos y funciones son Crédito, precio u oferta (biblia, 30), siendo respectivamente una variable, una constante y una función. Estaremos haciendo uso de identificadores en todo el papel, que son términos constantes y también necesitan la siguiente definición: Def. 2. Una fórmula atómica es cualquier construcción p(t1,. . . , tn), donde p es un símbolo predicado n-ary y t1,. . . , son términos. El conjunto de todas las fórmulas atómicas se denota como Δ. Nos centramos en una clase expresiva de MASs en la que la interacción se lleva a cabo por medio de actos de discurso ilocutionarios intercambiados entre los agentes participantes: Def. 3. I I I son las fórmulas atómicas terrestres que tienen la forma p(ag, r, ag, r, , t) donde p es un elemento de 1 Aquí, abstracto de protocolos y se refieren a ellos genéricamente como actividades. El Sexto Intl. Conjunto Conf. en Agentes Autónomos y Sistemas Multi-Agentes (AAMAS 07) 637 un conjunto de partículas ilocucionarias (por ejemplo: informar, petición, oferta); ag, ag son identificadores de agente; r, r son identificadores de rol; , un término de base arbitrario, es el contenido del mensaje, construido a partir de un lenguaje de contenido compartido; t  N es un sello de tiempo. El significado intuitivo de p(ag, r, ag, r, m, t) es que agente ag jugando rol r enviado mensaje m a agente ag jugando rol r en el momento t. Un ejemplo de una ilocución es informar(ag4, supp, ag3, cliente, offer(wire, 12), 10). A veces es útil referirse a las ilocuciones que no están totalmente fundamentadas, es decir, aquellas que pueden contener variables no instantiated (libres). En la descripción de un protocolo, por ejemplo, los valores precisos del mensaje intercambiado pueden quedar sin especificar. Durante la promulgación de los agentes del protocolo se producirán los valores reales que darán lugar a una ilocución del suelo. Así podemos definir esquemas de ilocución: Def. 4. Un esquema de ilocución ̄I es cualquier fórmula atómica p(ag, r, ag, r, ♥, t) en la que algunos de los términos pueden ser variables o pueden contener variables. 3.2 Definición formal de la noción de NS Primero definimos las escenas normativas de la siguiente manera: Def. 5. Una escena normativa es una tupla s = ids, Δs donde los ids son un identificador de escena y Δs es el conjunto de fórmulas atómicas Por ejemplo, una instantánea del estado de la escena normativa de entrega de nuestro escenario podría ser representada como: Δs = 8 < : utt(request(sean, client, kev, wm, receive(wire, 200), 20)), utt(accept(kev, wm, seen, customer, receive(wire, 200), 30)) 9 = ; Es decir, Tenga en cuenta que el estado de una escena normativa Δs evoluciona con el tiempo. Estas escenas normativas están conectadas entre sí a través de transiciones normativas que especifican cómo las expresiones y posiciones normativas en una escena afectan a otras escenas normativas. Como se mencionó anteriormente, las actividades no son independientes, ya que las ilocuciones pronunciadas en algunas de ellas pueden tener un efecto en otras. Las reglas normativas de transición definen las condiciones bajo las cuales se genera un comando normativo. Estas condiciones son declaraciones o posiciones normativas asociadas a un protocolo dado (denominadas por ejemplo. actividad : expresión ) que dan un comando normativo, es decir. la adición o supresión de otra posición normativa, posiblemente relacionada con una actividad diferente. Nuestras reglas de transición están así definidas: Def. 6. Una regla de transición normativa R es de la forma: R ::= V C V ::= ids : D  V, V D ::= N  utt( ̄I) N ::= per( ̄I)  prh( ̄I)  obli( ̄I) C ::= add(ids : N)  remove(ids : N) donde ̄I es un esquema permiso, prohibición u obligación), ids es un identificador de la actividad s y C es un comando normativo. Dotamos nuestro lenguaje con la semántica habitual de los lenguajes basados en reglas [19]. Las reglas trazan una estructura normativa existente a una nueva estructura normativa en la que sólo cambia el estado de las escenas normativas. En las definiciones siguientes nos basamos en el concepto estándar de sustitución [9]. Def. 7. Una transición normativa es un tupla b = idb, rb donde idb es un identificador y rb es una regla de transición normativa. Proponemos ampliar la noción de MAS, regulada por protocolos, con una capa adicional consistente en escenas normativas y transiciones normativas. Esta capa se representa como un gráfico bipartito que llamamos estructura normativa. Una estructura normativa relaciona escenas normativas y transiciones normativas especificando qué posiciones normativas deben generarse o eliminarse en qué escenas normativas. Def. 8. Una estructura normativa es un gráfico bipartito etiquetado NS = Nodos, bordes, Lin, Lout. Nodos es un conjunto de Sâ B donde S es un conjunto de escenas normativas y B es un conjunto de transiciones normativas. Edges es un conjunto Ain Aout donde Ain  S × B es un conjunto de arcos de entrada etiquetados con una fórmula atómica utilizando la función de etiquetado Lin : Ain → D; y Aout  B × S es un conjunto de arcos de salida etiquetados con una posición normativa utilizando la función de etiquetado Lout : Aout → N. Lo siguiente debe contener: 1. Cada fórmula atómica que aparece en el LHS de una regla rb debe ser de la forma (ids : D) donde s â € € € € TM € € € € € € € € € € € € € € € € € € € € € € € € € Ain tal que es = La fórmula atómica que aparece en el RHS de una regla rb debe ser de la forma add(ids : N) o remove(ids : N) donde s â € S y â € Aout tal que aout = (b, s) y Lout (aout ) = N. 3. Ain tal que a = (s, b) y b = idb, rb y Lin (a) = D entonces (ids:D) debe ocurrir en el LHS de rb. 4. Afuera de tal manera que a = (b, s) y b = idb, rb y Lout (a) = N luego add(ids : N) o remove(ids : N) deben ocurrir en el RHS de rb. Los dos primeros puntos aseguran que cada fórmula atómica en el LHS de una regla de transición normativa etiqueta un arco que entra en la transición normativa apropiada en la estructura normativa, y que la fórmula atómica en el RHS etiqueta el arco saliente correspondiente. Los puntos tres y cuatro aseguran que las etiquetas de todos los arcos entrantes se utilicen en el LHS de la regla de transición normativa en la que entran estos arcos, y que las etiquetas de todos los arcos salientes se utilicen en el RHS de la regla de transición normativa que estos arcos dejan. 3.3 Semántica Destinada La semántica formal se definirá mediante un mapeo a Redes Petri Coloradas en la Sección 5.1. Aquí comenzamos a definir la semántica prevista de las reglas normativas de transición describiendo cómo una regla cambia un escenario normativo de una estructura normativa existente que produce una nueva estructura normativa. Cada regla se activa una vez para cada sustitución que unifica el lado izquierdo V de la regla con el estado de las escenas normativas correspondientes. Una fórmula atómica (es decir, una declaración o una posición normativa) si es unificable con una declaración o posición normativa que pertenece al estado del escenario normativo correspondiente. Cada vez que se activa una regla, se lleva a cabo el comando normativo especificado a la derecha de esa regla, con la intención de añadir o eliminar una posición normativa del estado de la escena normativa correspondiente. Sin embargo, la adición no es incondicional, ya que pueden surgir conflictos. Este tema se tratará en las secciones 4 y 6.1. 638 La Sexta Intl. Conjunto Conf. en Agentes Autónomos y Sistemas Multi-Agentes (AAMAS 07) 3.4 Ejemplo En nuestro ejemplo de ejecución tenemos la siguiente regla de transición normativa ejemplar: „ pago : obli(inform(X, cliente, Y, acc, pay(Z, P, Q, T)), pago : utt(inform(X, cliente, Y, acc, pay(Z, P, Q), T)) « entrega : a La norma es una obligación del agente Y (esta vez asumiendo el papel de gerente de almacén wm) de enviar un mensaje al cliente X que el artículo Z ha sido entregado. En la Figura 2 se muestra una representación diagnóstica de cómo se relacionan las actividades y una estructura normativa: Pago Entrega Contrato Nivel Normativo Salida Registro Pago Entrega Negociación Nivel de Coordinación Contrato nt Figura 2: Actividades y Estructura Normativa A medida que se pronuncian las ilocuciones durante las actividades, surgen posiciones normativas. Las preferencias y las posiciones normativas se combinan en normas de transición, lo que provoca el flujo de posiciones normativas entre las distintas situaciones normativas. La conexión entre los dos niveles se describe en la sección 6.2. 4. DEFINICIÓN DE CONFLICTOS Los términos conflicto deontico e inconsistencia deontica se han utilizado indistintamente en la literatura. Sin embargo, en este trabajo adoptamos el punto de vista de [7] en el que los autores sugieren que surge una inconsistencia deontica cuando una acción es simultáneamente permitida y prohibida - ya que un permiso no puede ser actuado en consecuencia, no se produce un conflicto real. Sin embargo, las situaciones en que una acción está simultáneamente obligada y prohibida son conflictos deonticos, ya que tanto las obligaciones como las prohibiciones influyen en los comportamientos en conflicto. El contenido de las posiciones normativas en este trabajo son ilocuciones. Por lo tanto, surge un conflicto normativo cuando una ilocución está simultáneamente obligada y prohibida. Proponemos utilizar la noción estándar de unificación [9] para detectar cuándo se superponen una prohibición y un permiso. Por ejemplo, una obligación obli(informar(A1, R1, A2, R2, p(c, X, T)) y una prohibición prh(informar(a1, r1, a2, r2, p(Y, d), T)) están en conflicto ya que se unifican en el punto Capturamos formalmente esta noción: Def. 9. Un conflicto (deontico) surge entre dos posiciones normativas N y N bajo una sustitución Es decir, una prohibición y una obligación están en conflicto si, y sólo si, sus ilocuciones se unifican en virtud de La sustitución, llamada aquí el conjunto de conflictos, unifica los agentes, roles y fórmulas atómicas. Asumimos que unificar es una implementación adecuada de un algoritmo de unificación que i) termina siempre (posiblemente fallando, si no se puede encontrar un unificador); ii) es correcto; y iii) tiene complejidad computacional lineal. Las incoherencias causadas por la misma ilocución, que se permiten y prohíben simultáneamente, pueden formalizarse de manera similar. En este trabajo nos centramos en los conflictos de prohibición/obligación, pero la maquinaria computacional introducida en la Sección 6.1 también puede ser utilizada para detectar inconsistencias de prohibición/permiso, si sustituimos la modalidad obli por per. 5. FORMALIZACIÓN DEL CONFLICTO-FREEDOM En esta sección presentamos algunos conocimientos de fondo sobre CPN asumiendo una comprensión básica de las redes Petri ordinarias. Para detalles técnicos, remitimos al lector a [16]. A continuación, mapeamos los NS a los CPN y analizamos sus propiedades. Los CPN combinan la fuerza de las redes Petri con la fuerza de los lenguajes de programación funcionales. Por un lado, las redes Petri proporcionan los primitivos para la descripción de la sincronización de los procesos concurrentes. Como se observa en [16], los CPN tienen una semántica que se basa en la verdadera concurrencia, en lugar de entrelazarse. En nuestra opinión, es más fácil trabajar con una semántica de verdadera moneda porque es la forma en que prevemos la conexión entre el nivel de coordinación y el nivel normativo de un sistema multi-agente. Por otra parte, los lenguajes de programación funcionales utilizados por los CPN proporcionan los primitivos para la definición de los tipos de datos y la manipulación de sus valores de datos. Por lo tanto, podemos traducir fácilmente expresiones de una estructura normativa. Por último, pero no por ello menos importante, los CPN tienen una semántica bien definida que define inequívocamente el comportamiento de cada CPN. Además, los CPN tienen un gran número de métodos e instrumentos de análisis formales mediante los cuales se pueden demostrar las propiedades de los CPN. En resumen, los CPN nos proporcionan todas las características necesarias para razonar formalmente sobre las estructuras normativas, dado que se proporciona una cartografía adecuada. De acuerdo con las redes Petri, los estados de un CPN están representados por medio de lugares. Pero a diferencia de Petri Nets, cada lugar tiene un tipo de datos asociado determinando el tipo de datos que el lugar puede contener. Un estado de un CPN se llama marca. Consiste en un número de fichas colocadas en los lugares individuales. Cada token lleva un valor de datos que tiene el tipo del lugar correspondiente. En general, un lugar puede contener dos o más tokens con el mismo valor de datos. Por lo tanto, una marca de un CPN es una función que mapea cada lugar en un multi-set2 de tokens del tipo correcto. Uno a menudo se refiere a los valores token como colores token y uno también se refiere a los tipos de datos como conjuntos de colores. Los tipos de un CPN pueden ser arbitrariamente complejos. Las acciones en un PCN están representadas mediante transiciones. Un arco entrante en una transición desde un lugar indica que la transición puede eliminar tokens del lugar correspondiente mientras que un arco saliente indica que la transición puede añadir tokens. El número exacto de tokens y sus valores de datos son determinados por las expresiones de arco, que se codifican utilizando el lenguaje de programación elegido para el CPN. Una transición está habilitada en un CPN si y sólo si todos los 2 A multi-set (o bolsa) es una extensión a la noción de conjunto, permitiendo la posibilidad de múltiples apariencias del mismo elemento. El Sexto Intl. Conjunto Conf. en Agentes Autónomos y Sistemas Multi-Agentes (AAMAS 07) 639 variables en las expresiones de sus arcos entrantes se unen a algunos valores (cada una de estas fijaciones se refiere como un elemento vinculante). Si es así, la transición puede ocurrir eliminando tokens de sus lugares de entrada y añadiendo tokens a sus lugares de salida. Además de las expresiones de arco, es posible conectar una expresión booleana de guardia (con variables) a cada transición. Juntando todos los elementos de arriba obtenemos una definición formal de CPN que se empleará más adelante para propósitos de mapeo. Def. 10. Un CPN es un conjunto finito de tipos no vacíos, también llamados conjuntos de colores; ii) P es un conjunto finito de lugares; iii) T es un conjunto finito de transiciones; iv) A es un conjunto finito de arcos; v) N es una función de nodo definida de A a P × T • T × P; vi) C es una función de color de P a فارسى; vii) G es una De acuerdo con las redes Petri ordinarias, el comportamiento concurrente de un CPN se basa en la noción de paso. Formalmente, un paso es un no vacío y finito multi-set sobre el conjunto de todos los elementos de unión. Deje que el paso S se active en una marca M. Entonces, S puede ocurrir, cambiando la marca M a M. Además, decimos que el marcado M es directamente accesible desde el marcado M por la ocurrencia del paso S, y lo denotamos por M[S > M. Una secuencia de ocurrencia finita es una secuencia finita de pasos y marcas: M1[S1 > M2. . . Mn[Sn > Mn+1 de tal manera que n+N y Mi[Si > Mi+1 . . , n}. El conjunto de todas las marcas posibles alcanzables para una red neta de una marca M se llama su conjunto de alcance, y se denota como R(Net, M). 5.1 Mapeo a redes de Petri de colores Nuestra estructura normativa es un gráfico bipartito etiquetado. Lo mismo puede decirse de una red Petri coloreada. Estamos presentando un mapeo f de uno a otro, con el fin de proporcionar semántica para la estructura normativa y probar las propiedades al respecto mediante el uso de resultados teóricos bien conocidos de trabajo en CPNs. El mapeo f hace uso de correspondencias entre escenas normativas y lugares CPN, transiciones normativas y transiciones CPN y finalmente, entre etiquetas de arco y expresiones de arco CPN. S → P B → T Lin Lout → E El conjunto de tipos es el conjunto singleton que contiene el color NP (es decir. * = {NP}). Este tipo complejo está estructurado de la siguiente manera (utilizamos CPN-ML [4] sintaxis): color NPT = con Obl  Per  Prh  NoMod color IP = con infor  declaramos  offer color UTT = record illp : IP ag1, role1, ag2, role2 : string content : string time : int color NP = Los arcos son trazados casi directamente. A es un conjunto finito de arcos y N es una función de nodo, de tal manera que Aa Aa Ain Aout. N(a) = a. La función de inicialización I se define como I(p) = Δs ( Por último, la función de color C asigna el color NP a cada lugar: C(p) = NP (­p ­P). No estamos haciendo uso de la función de guardia G. En el trabajo futuro, esta función se puede utilizar para modelar restricciones cuando extendemos la expresividad de nuestro lenguaje de norma. 5.2 Propiedades de las estructuras normativas Después de haber definido el mapeo desde las estructuras normativas hasta las redes de Petri coloreadas, ahora analizamos las propiedades de los CPN que nos ayudan a entender la complejidad de la detección de conflictos. Una pregunta que nos gustaría responder es, si en un momento dado, una determinada estructura normativa está libre de conflictos. Tal instantánea de una estructura normativa corresponde a una marca en el CPN cartografiado. Def. 11. Dada una marca Mi, esta marca es libre de conflicto si p  P. np1, np2  Mi(p) tal que np1.mode = Obl y np2.mode = Prh y np1.illoc y np2.illoc unificar bajo una sustitución válida. Otra pregunta interesante sería si se producirá un conflicto a partir de una instantánea del sistema propagando las posiciones normativas. Para responder a esta pregunta, primero traducimos la instantánea de la estructura normativa al CPN correspondiente y luego ejecutamos la secuencia de ocurrencia finita de marcas y pasos, verificando la libertad de conflicto de cada marca a medida que avanzamos. Def. 12. Dada una marca Mi, una secuencia de ocurrencia finita Si, Si+1,..., Sn se llama libre de conflictos, si y sólo si Mi[Si > Mi+1. . . Mn[Sn > Mn+1 y Mk están libres de conflictos para todos los k, de modo que i ≤ k ≤ n + 1. Sin embargo, la cuestión principal que nos gustaría investigar, es si una estructura normativa dada es o no resistente a los conflictos, es decir, si los agentes que promulgan el MAS son capaces de provocar conflictos a través de sus acciones. Tan pronto como se incluye la posibilidad de acciones (o declaraciones) de agentes autónomos, se pierde el determinismo. Después de haber mapeado la estructura normativa a un CPN, ahora añadimos modelos de CPN de las interacciones de agentes. Cada forma de interacción con el agente (es decir, cada actividad) se puede modelar utilizando CPN en la línea de Cost et al. [5]. Estos CPN no determinantes alimentan tokens en el CPN que modela la estructura normativa. Esto lleva a la introducción de no-determinismo en el PCN combinado. La mitad inferior de la figura 3 muestra parte de un modelo CPN de un protocolo de agente donde el arco denotado con 1 representa alguna pronunciación de una ilocución por un agente. La transición de destino de este arco, no sólo mueve un token al siguiente estado de este CPN, sino que también coloca un token en el lugar correspondiente a la escena normativa apropiada en el modelo del CPN de la estructura normativa (a través del arco 2). La transición 3 finalmente podría propagar ese símbolo en forma de una obligación, por ejemplo. Así, a partir de una marca dada, muchas secuencias de ocurrencia diferentes son posibles dependiendo de las acciones de los agentes. Utilizamos el conjunto de alcance R para definir una situación en la que los agentes no pueden causar conflictos. 640 La Sexta Intl. Conjunto Conf. sobre Agentes Autónomos y Sistemas Multi-Agentes (AAMAS 07) Figura 3: Construcción del CPN combinado Def. 13. Dado un N neto, una marca M es resistente a los conflictos si y sólo si todas las marcas en R(N,M) están libres de conflictos. La verificación de la libertad de conflicto de una marca se puede hacer en tiempo polinomio mediante la verificación de todos los lugares del CPN en busca de fichas en conflicto. La libertad de conflicto de una secuencia de ocurrencia en el CPN que representa la estructura normativa también se puede hacer en tiempo polinomio ya que esta secuencia es determinista dada una instantánea. El hecho de que se diseñe o no una estructura normativa corresponde con seguridad a la comprobación de la resistencia a los conflictos de la marca M0 inicial. Ahora, verificar la resistencia al conflicto de una marca se convierte en una tarea muy difícil. Corresponde al problema de la accesibilidad en un CPN: ¿se puede alcanzar un estado o se puede lograr una marca que contenga un conflicto?. Este problema de alcanzabilidad es conocido por ser NP-completo para las redes Petri ordinarias [22] y como las RCP son funcionalmente idénticas, no podemos esperar verificar la resistencia a los conflictos de una estructura normativa fuera de línea en un tiempo razonable. Por lo tanto, se necesitan mecanismos de distribución y tiempo de ejecución para garantizar que una estructura normativa mantenga la coherencia. Presentamos uno de esos mecanismos en la sección siguiente. 6. GESTIÓN DE ESTRUCTURAS NORMATIVAS Una vez detectado un conflicto (según se define en la Sección 4), proponemos emplear al unificador para resolver el conflicto. En nuestro ejemplo, si las variables en prh(inform(a1, r1, a2, r2, p(Y, d), T)) no obtienen los valores especificados en la sustitución Sin embargo, en lugar de computar el conjunto de complementos de una sustitución (que puede ser un conjunto infinito) proponemos anotar la prohibición con el propio unificador y utilizarla para determinar cuáles son las variables de esa prohibición no pueden ser en futuras unificaciones para evitar un conflicto. Por lo tanto denotamos prohibiciones anotadas como prh( ̄I) . . Es un conjunto de unificadores. Las normas anotadas3 se interpretan como constructos deonticos con influencias restringidas, es decir, su efecto (sobre agentes, roles e ilocuciones) ha sido limitado por el conjunto de unificadores. Una prohibición puede estar en conflicto con varias obligaciones en una escena normativa dada s = id, Δ y tenemos que registrar (y posiblemente evitar) todos estos conflictos. Definimos a continuación un algoritmo que garantiza que una posición normativa se añada a una escena normativa de tal manera que no cause ningún conflicto. 3 Aunque proponemos limitar las prohibiciones, el mismo mecanismo puede utilizarse para definir la reducción de obligaciones en su lugar. Estas diferentes políticas dependen de la semántica deontica prevista y de los requisitos de los sistemas abordados. Por ejemplo, algunos MAS pueden exigir que sus agentes no actúen en presencia de conflictos, es decir, que se reduzca la obligación. 6.1 Resolución de conflictos Proponemos una forma de resolver los conflictos normativos mediante la unificación. Detectamos la superposición de las influencias de las normas, es decir. cómo afectan al comportamiento de los agentes afectados, y reducimos la influencia de la posición normativa, mediante el uso adecuado de las anotaciones al comprobar si la norma se aplica a las ilocuciones. El algoritmo mostrado en la Figura 4 muestra cómo mantenemos un conjunto de normas libres de conflictos. Añade una norma dada N a un estado normativo existente, libre de conflictos Δ, obteniendo un nuevo estado normativo resultante Δ que es libre de conflictos, es decir, sus prohibiciones están anotadas con un conjunto de conjuntos de conflictos que indican qué fijaciones para variables deben evitarse para que los conflictos no tengan lugar. algoritmo addNorm(N, Δ) comienza 1 marca de tiempo(N) 2 caso N de 3 per( ̄I): Δ := Δ  {N} 4 prh(I): si N  Δ s.t. Conflict(N, N, Las líneas 4-5 abordan el caso cuando intentamos agregar una prohibición de base a un estado normativo: si entra en conflicto con cualquier obligación, entonces se descarta; de lo contrario se añade al estado normativo. En las líneas 6 a 12 se describe la situación en que la posición normativa que debe añadirse es una prohibición no básica. En este caso, el algoritmo inicializa un conjunto vacío y bucles (línea 9-10) a través de las normas N en el antiguo estado normativo Δ. Después de encontrar uno que entra en conflicto con N, el algoritmo actualiza el valor de la nueva configuración de conflicto (línea 10). Mediante el bucle a través de Δ, somos capaces de comprobar cualquier conflicto entre la nueva prohibición y las obligaciones existentes, construyendo adecuadamente la anotación  que se utilizará al añadir N a Δ en la línea 11. En las líneas 13 a 27 se describe cómo se ajusta una nueva obligación a un estado normativo existente. Hacemos uso de dos conjuntos inicialmente vacíos, temporales, Δ1, Δ2. El algoritmo pasa a través de Δ (líneas 16-25) recogiendo las prohibiciones anotadas N Hay, sin embargo, dos casos a tratar: el de cuando un motivo La Sexta Intl. Conjunto Conf. sobre los agentes autónomos y los sistemas multiagentes (AAMAS 07) se encuentra la prohibición 641 (línea 17), y su excepción, que abarca las prohibiciones no terrestres (línea 20). En ambos casos, la antigua prohibición se almacena en Δ1 (líneas 18 y 23) para ser posteriormente retirada de Δ (línea 26). Sin embargo, en el caso de una prohibición no terrestre, el algoritmo actualiza su anotación de conjuntos de conflicto (línea 24). El bucle garantiza que se lleve a cabo una búsqueda exhaustiva (lineal) a través de un estado normativo, comprobando si la nueva obligación está en conflicto con cualquier prohibición existente, posiblemente actualizando las anotaciones de estas prohibiciones en conflicto. En la línea 26 el algoritmo construye la nueva actualización Δ eliminando las antiguas prohibiciones almacenadas en Δ1 y añadiendo las prohibiciones actualizadas almacenadas en Δ2 (si las hay), así como la nueva obligación N. Nuestro algoritmo propuesto es correcto en que, para una posición normativa dada N y un estado normativo Δ, proporciona un nuevo estado normativo Δ en el que todas las prohibiciones tienen anotaciones que registran cómo se unifican con las obligaciones existentes. Sin embargo, las anotaciones pueden estar vacías: este es el caso cuando tenemos una prohibición básica o una prohibición que no unifica/conflige con ninguna obligación. Los permisos no afectan a nuestro algoritmo y se tratan adecuadamente (línea 3). Cualquier intento de insertar una prohibición de base que entre en conflicto, produce el mismo estado normativo (línea 4). Cuando se añade una nueva obligación, el algoritmo garantiza que se tienen en cuenta todas las prohibiciones (líneas 14 a 27), lo que conduce a la eliminación de las prohibiciones sobre el terreno en conflicto o a la actualización de las anotaciones de las prohibiciones no sobre el terreno. El algoritmo siempre termina: los bucles están sobre un conjunto finito Δ y los conflictos comprueban y establecen operaciones siempre terminan. La complejidad del algoritmo es lineal: el conjunto Δ sólo se examina una vez para cada caso posible de norma que se añade. Al gestionar los estados normativos también es posible que necesitemos eliminar posiciones normativas. Esto es sencillo: los permisos se pueden retirar sin ningún problema; las prohibiciones anotadas también se pueden eliminar sin más consideraciones; sin embargo, las obligaciones requieren algunas tareas domésticas. Cuando se va a eliminar una obligación, debemos verificarla contra todas las prohibiciones anotadas a fin de actualizar sus anotaciones. Aplicamos la comprobación de conflicto y obtenemos un unificador, luego eliminamos este unificador de la anotación de prohibiciones. Invocamos el algoritmo de eliminación como removeNorm(N, Δ): devuelve un nuevo estado normativo Δ en el que N ha sido eliminado, con posibles alteraciones a otras posiciones normativas como se explicó. 6.2 Promulgación de una estructura normativa La promulgación de una estructura normativa equivale a la ejecución paralela y distribuida de escenas normativas y transiciones normativas. A título ilustrativo, describiremos a continuación la interacción entre las situaciones normativas de pago y entrega y la transición normativa que los vincula en la mitad superior de la figura 2. Con este objetivo, considere, por ejemplo, que obl(inform(jules, cliente, rod, acc, pay(copper, 400, 350), T) Δpago y que Δentrega tiene prh(inform(rod,wm, jules, cliente, entregado(Z, Q), T)). Tales estados indican que el cliente Jules está obligado a pagar £400 por 350kg de cobre al contador Rod de acuerdo con la escena normativa de pago, mientras que Rod, asumiendo el papel de gerente de almacén esta vez, está prohibido entregar cualquier cosa al cliente Jules de acuerdo con la escena normativa de entrega. Para cada escena normativa, el proceso de promulgación es el siguiente. En primer lugar, procesa su cola de mensajes entrantes que contiene tres tipos de mensajes: declaraciones de la actividad a la que está vinculada; y comandos normativos para agregar o eliminar posiciones normativas. Por ejemplo, en nuestro ejemplo, la escena normativa de pago recoge la ilocución I = utt((inform(jules, cliente, varilla, acc, pay(cobre, 400, 350), 35)) para el cliente Jules pendiente de pago por cobre (a través de la flecha A en la figura 2). Las Uterancias son timestamped y subsecuentemente agregadas al estado normativo. Tendríamos Δpayment = Δpayment {I}, en nuestro ejemplo. Al recibir órdenes normativas para agregar o eliminar una posición normativa, la escena normativa invoca el algoritmo de adición o eliminación correspondiente descrito en la Sección 6.1. En segundo lugar, la escena normativa reconoce su cambio de estado al enviar un mensaje desencadenante a cada transición normativa saliente a la que está conectado. En nuestro ejemplo, el escenario normativo de pagos estaría señalando su cambio de estado a la transición normativa nt. Para las transiciones normativas, el proceso funciona de manera diferente. Debido a que cada transición normativa controla el funcionamiento de una sola regla, al recibir un mensaje de activación, encuesta cada escena normativa entrante para sustituciones de los esquemas de ilocución pertinentes en el LHS de su regla. En nuestro ejemplo, nt (responsable de la regla descrita en la Sección 3.4), encuestaría el escenario normativo de pago (vía flecha B) para sustituciones. Al recibir respuestas de ellos (en forma de conjuntos de sustituciones junto con marcas de tiempo), tiene que unificar las sustituciones de cada una de estas escenas normativas. Para cada unificación que encuentra, la regla se activa, y por lo tanto el comando normativo correspondiente se envía a lo largo de la escena normativa de salida. La transición normativa entonces mantiene un seguimiento del mensaje de disparo que envió y de las marcas de tiempo de las posiciones normativas que desencadenó el disparo. Esto se hace para asegurar que las mismas posiciones normativas en el LHS de una regla sólo desencadenen su disparo una vez. En nuestro ejemplo, nt estaría recibiendo  = {X/jules, Y/rod, Z/copper, Q/350} de la escena normativa de pagos. Dado que las substiciones en unifican con la regla nts, la regla es disparada, y el comando normativo add(delivery : obli(rod, wm, jules, client, delivery(copper, 350), T)) es enviado a lo largo de la escena normativa de entrega para obligar a Rod a entregar al cliente Jules 350kg de cobre. Después de eso, la escena normativa de entrega invocaría el algoritmo addNorm de la figura 4 con Δdelivery y N = obli(rod, wm, jules, client, delivered(copper, 350)) como argumentos. 7. TRABAJOS Y CONCLUSIONES RELACIONADOS Nuestras contribuciones en este documento son triples. En primer lugar, introducimos un enfoque para la gestión y el razonamiento de las normas de manera distribuida. Hasta donde sabemos, hay poco trabajo publicado en esta dirección. En [8, 21] se presentan dos idiomas para la aplicación distribuida de las normas en el MAS. Sin embargo, en ambos trabajos, cada agente tiene una interfaz de mensaje local que envía mensajes legales de acuerdo con un conjunto de normas. Dado que estas interfaces son locales para cada agente, las normas sólo pueden expresarse en términos de acciones de ese agente. Se trata de una grave desventaja, por ejemplo. cuando uno necesita activar una obligación para con un agente debido a un cierto mensaje de otro. La segunda contribución es la propuesta de una estructura normativa. La noción es fructífera porque permite la separación de las cuestiones normativas y de procedimiento. La estructura normativa que proponemos evidencia la similitud entre la propagación de posiciones normativas y la propagación 642 La Sexta Intl. Conjunto Conf. sobre Agentes Autónomos y Sistemas Multi-Agentes (AAMAS 07) de tokens en Redes Petri Coloradas. Esa similitud sugiere fácilmente una cartografía entre los dos, y da lugar a un tratamiento analítico conveniente de la estructura normativa, en general, y la complejidad de la detección de conflictos, en particular. La idea de modelar interacciones (en forma de conversaciones) a través de Petri Nets se ha investigado en [18], donde el medio de interacción y los agentes individuales se modelan como subredes de CPN que posteriormente se combinan para su análisis. En [5], las conversaciones se diseñan y analizan por primera vez a nivel de los CPN y posteriormente se traducen en protocolos. Lin et al. [20] mapear esquemas de conversación a CPNs. Según nuestro conocimiento, el uso de esta representación en apoyo de la detección de conflictos en el MAS regulado no ha sido reportado en otros lugares. Por último, presentamos un mecanismo distribuido para resolver los conflictos normativos. Sartor [25] trata los conflictos normativos desde el punto de vista de la teoría jurídica y sugiere una forma de ordenar las normas involucradas. Su idea se implementa en [12], pero requiere un recurso central para el mantenimiento de normas. El enfoque para la detección y resolución de conflictos es una adaptación y extensión del trabajo sobre gráficos de instanciación reportados en [17] y un algoritmo relacionado en [27]. El algoritmo presentado en el presente trabajo puede ser utilizado para administrar estados normativos distribuidos: escenas normativas que suceden en paralelo tienen un estado normativo asociado Δ al que el algoritmo se aplica de forma independiente cada vez que se introduce una nueva norma. Estas tres contribuciones que presentamos en este documento abren muchas posibilidades para el trabajo futuro. Cabe mencionar en primer lugar, que como estrategia amplia estamos trabajando en una generalización de la noción de estructura normativa para hacerla funcionar con diferentes modelos de coordinación, con un contenido deontico más rico y además de diferentes realizaciones computacionales de MAS regulado. Como primer paso en esta dirección estamos aprovechando la disociación entre los protocolos de interacción y la orientación normativa declarativa que la estructura normativa pone a disposición, para proporcionar una capa normativa para las instituciones electrónicas (como se define en [1]). Esperamos que este acoplamiento dote a las instituciones electrónicas de un entorno normativo más flexible y más expresivo. Además, queremos extender nuestro modelo a través de varias direcciones: (1) manejar la negación y las limitaciones como parte del lenguaje de la norma, y en particular la noción de tiempo; (2) dar cabida a múltiples autoridades jerárquicas de normas basadas en roles, en la línea de Cholvy y Cuppens [3] y relaciones de poder como sugiere Carabelea et al. [2]; (3) para captar en el algoritmo de resolución de conflictos diferentes semánticas relacionadas con las nociones deonticas apoyando diferentes axiomaciones (por ejemplo, fuerza relativa de la prohibición frente a la obligación, nociones deonticas predeterminadas, inconsistencias deonticas). En el lado teórico, pretendemos utilizar técnicas de análisis de CPN para caracterizar clases de CPN (por ejemplo, acíclicas, simétricas, etc.) que corresponden a familias de Estructuras Normativas susceptibles a la detección de conflictos fuera de línea. La combinación de estas técnicas junto con nuestros mecanismos de resolución de conflictos en línea pretende dotar a los diseñadores del MAS de la capacidad de incorporar normas en sus sistemas de una manera basada en principios. 8. REFERENCIAS [1] J. L. Arcos, M. Esteva, P. Noriega, J. A. Rodr guez, y C. Sierra. Ingeniería de entornos abiertos con instituciones electrónicas. Journal on Engineering Applications of Artificial Intelligence, 18(2):191-204, 2005. [2] C. Carabelea, O. Boissier, y C. Castelfranchi. Usar el poder social para permitir a los agentes razonar sobre ser parte de un grupo. En el 5o Internat. Taller, EEAT 2004, págs. 166 a 177, 2004. [3] L. Cholvy y F. Cuppens. Solución de conflictos normativos mediante la fusión de funciones. En la Quinta Conferencia Internacional sobre Inteligencia Artificial y Derecho, Washington, Estados Unidos, 1995. [4] S. Christensen y T. B. Haagh. Diseño CPN - vista general de la sintaxis CPN ML. Informe técnico, Universidad de Aarhus, 1996. [5] R. S. Cost, Y. Chen, T. W. Finin, Y. Labrou e Y. Peng. Usando petri redes de colores para modelar la conversación. In Issues in Agent Communication, págs. 178 a 192, Londres, Reino Unido, 2000. [6] F. Dignum. Agentes autónomos con normas. Inteligencia Artificial y Ley, 7(1):69-79, 1999. [7] A. Elhag, J. Breuker y P. Brouwer. Sobre el análisis formal de los conflictos normativos. Información & Comunicaciones. Techn. Ley, 9(3):207-217, Oct. 2000. [8] M. Esteva, W. Vasconcelos, C. Sierra, y J. A. Rodr guez-Aguilar. Consistencia normativa en las instituciones electrónicas. volumen 3171 (LNAI), páginas 494-505. Springer-Verlag, 2004. [9] M. Fitting. Prueba de la lógica de primer orden y del teorema automatizado. Springer-Verlag, Nueva York, Estados Unidos, 1990. [10] N. Fornara, F. Vigan`o y M. Colombetti. Un enfoque impulsado por eventos a las normas en las instituciones artificiales. En el taller AAMAS05: Agentes, normas e instituciones para sistemas multiagente regulados (ANI@REM), Utrecht, 2005. [11] D. Gaertner, P. Noriega y C. Sierra. Ampliación de la arquitectura BDI con compromisos. En Actas del IX Congreso Internacional de la Asociación Catalana de Inteligencia Artificial, 2006. [12] A. Garc a-Camino, P. Noriega, y J.-A. Rodr guez-Aguilar. Un algoritmo para la resolución de conflictos en actividades reguladas compuestas. En el 7o taller Int.Workshop - ESAW 06, 2006. [13] A. Garc a-Camino, J.-A. Rodr guez-Aguilar, C. Sierra y W. Vasconcelos. Una arquitectura distribuida para las Sociedades de Agentes de Normas. En DALT III, volumen 3904 (LNAI), páginas 89 a 105. Springer, 2006. [14] F. Giunchiglia y L. Serafini. Lógicas jerárquicas multilenguaje o: Cómo podemos prescindir de lógicas modales. Inteligencia Artificial, 65(1):29-70, 1994. [15] J. Habermas. La Teoría de la Comunicación Acción, Volumen Uno, La Razón y la Racionalización de la Sociedad. Beacon Press, 1984. [16] K. Jensen. Redes Petri coloreadas: Conceptos básicos, métodos de análisis y usos prácticos (Volumen 1). Springer, 1997. [17] M. Kollingbaum y T. Norman. Estrategias para resolver conflictos de normas con razonamiento práctico. En el Taller de Coordinación de la CEPA en Sociedades de Agentes Emergentes 2004, 2004. [18] J.-L. Koning, G. Francois e Y. Demazeau. Formalización y prevalidación para protocolos de interacción en sistemas multiagente. En ECAI, págs. 298 a 307, 1998. [19] B. Kramer y J. Mylopoulos. Representación del conocimiento. En S. C. Shapiro, editor, Enciclopedia de Inteligencia Artificial, volumen 1, páginas 743-759. John Wiley & Sons, 1992. [20] F. Lin, D. H. Norrie, W. Shen y R. Kremer. Un enfoque basado en esquemas para especificar las políticas de conversación. En Temas de Comunicación de Agentes, págs. 193-204, 2000. [21] N. Minsky. Interacción gobernada por la ley (LGI): Un mecanismo de coordinación y control distribuido (Una introducción y un manual de referencia). Informe técnico, Universidad Rutgers, 2005. [22] T. Murata. Redes Petri: Propiedades, análisis y aplicaciones. Actas del IEEE, 77(4):541-580, 1989. [23] S. Parsons, C. Sierra y N. Jennings. Agentes que razonan y negocian discutiendo. Diario de Lógica y Computación, 8(3):261-292, 1998. [24] A. Ricci y M. Viroli. Artefactos de Coordinación: Una Abstracción Unificante para la Coordinación de Ingeniería Mediada por el Medio Ambiente en MAS. Informatica, 29:433-443, 2005. [25] G. Sartor. Conflictos normativos en el razonamiento jurídico. Inteligencia Artificial y Ley, 1(2-3):209-235, junio de 1992. [26] M. Sergot. Una teoría computacional de posiciones normativas. ACM Trans. Comput. Lógica, 2(4):581-622, 2001. [27] W. W. Vasconcelos, M. Kollingbaum, y T. Norman. Resolver conflictos e incoherencias en las organizaciones virtuales reguladas por normas. En Actas de AAMAS 07, Hawaii, EE.UU., 2007. IFAAMAS. [28] G. H. von Wright. Norma y acción: Una investigación lógica. Routledge y Kegan Paul, Londres, 1963. [29] M. Wooldridge. Una introducción a los sistemas multiagente. John Wiley & Sons, Chichester, Reino Unido, febrero de 2002. El Sexto Intl. Conjunto Conf. sobre agentes autónomos y sistemas de agentes múltiples (AAMAS 07) 643",
    "error_count": 8,
    "keys": {
        "algorithm": {
            "translated_key": "algoritmo",
            "translated_annotated_text": "Gestión de Normas Distribuidas en Sistemas Regulados Multi-Agente ∗ Dorian Gaertner Dept. de Computación, Imperial College London, Londres SW7 2AZ, Reino Unido dg00@doc.ic.ac.uk Andrés García-Camino, Pablo Noriega, J.-A. Rodriguez-Aguilar IIIA-CSIC, 08193 Bellaterra, España {andres,pablo,jarážiya.csic.es Wamberto Vasconcelos Dept. de Ciencias de la Computación, Universidad de Aberdeen, Aberdeen AB24 3UE, Reino Unido wvasconcelos@acm.org RESUMEN Las normas son ampliamente reconocidas como un medio de coordinar sistemas multi-agentes. La gestión distribuida de las normas es una cuestión difícil y observamos una falta de realizaciones computacionales verdaderamente distribuidas de los modelos normativos. Con el fin de regular el comportamiento de los agentes autónomos que participan en múltiples actividades relacionadas, proponemos un modelo normativo, la Estructura Normativa (NS), un artefacto que se basa en la propagación de posiciones normativas (obligaciones, prohibiciones, permisos), como consecuencias de las acciones de los agentes. Dentro de un NS, los conflictos pueden surgir debido a la naturaleza dinámica del MAS y la concurrencia de acciones de los agentes. Sin embargo, garantizar la libertad de conflicto de un NS en el momento del diseño es computacionalmente intratable. Demostramos esto formalizando la noción de conflicto, proporcionando un mapeo de los NS en las Redes Petri Coloreadas y tomando prestado los resultados teóricos bien conocidos de ese campo. Dado que se requiere la resolución de conflictos en línea, presentamos un \"algoritmo\" manejable para ser empleado de forma distribuida. Entonces demostramos que este \"algoritmo\" es primordial para la promulgación distribuida de un NS. Categorías y sujetos Descriptores I.2.11 [Inteligencia Artificial Distribuida]: Idiomas y estructuras Términos generales Algoritmos, Diseño, Teoría 1. INTRODUCCIÓN Una característica fundamental de los sistemas multiagente abiertos y regulados en los que interactúan agentes autónomos, es que los agentes participantes están destinados a cumplir con las convenciones del sistema. Las normas pueden utilizarse para modelar tales convenciones y, por lo tanto, como medio para regular el comportamiento observable de los agentes [6, 29]. Hay muchas contribuciones sobre el tema de las normas de sociólogos, filósofos y lógicos (por ejemplo, [15, 28]). Sin embargo, hay muy pocas propuestas para la realización computacional de modelos normativos - la forma en que las normas pueden integrarse en el diseño y ejecución de MAS. Los pocos que existen (e.g. [10, 13, 24]), funcionan de manera centralizada, lo que crea cuellos de botella y puntos de fallo únicos. Hasta donde sabemos, ninguna propuesta apoya verdaderamente la promulgación distribuida de entornos normativos. En nuestro documento abordamos ese problema y proponemos medios para manejar los compromisos contradictorios en sistemas abiertos, regulados y multiagentes de manera distribuida. El tipo de MAS regulado que contemplamos consiste en actividades múltiples, simultáneas, relacionadas donde los agentes interactúan. Cada agente puede participar simultáneamente en varias actividades, y cambiar de una actividad a otra. Las acciones de un agente dentro de una actividad pueden tener consecuencias en forma de posiciones normativas (es decir. obligaciones, permisos y prohibiciones) [26] que puedan limitar su comportamiento futuro. Por ejemplo, un agente comprador que se queda sin crédito puede estar prohibido hacer más ofertas, o un agente vendedor está obligado a entregar después de cerrar un acuerdo. Asumimos que los agentes pueden optar por no cumplir todas sus obligaciones y, por lo tanto, pueden ser sancionados por el MAS. Obsérvese que, cuando se distribuyen las actividades, las posiciones normativas deben derivarse de las actividades en las que se generan a aquellas en las que surten efecto. Por ejemplo, la obligación de los vendedores de arriba debe fluir (o propagarse) de una actividad de negociación a una actividad de entrega. Dado que en un MAS abierto y regulado no se pueden incorporar aspectos normativos en el diseño de los agentes, adoptamos la opinión de que el MAS debe complementarse con un conjunto separado de normas que regulen aún más el comportamiento de los agentes participantes. Para modelar la separación de preocupaciones entre el nivel de coordinación (interacciones de agentes) y el nivel normativo (propagación de posiciones normativas), proponemos un artefacto llamado Estructura Normativa (NS). Dentro de un NS pueden surgir conflictos debido a la naturaleza dinámica del MAS y la concurrencia de acciones de los agentes. Por ejemplo, un agente puede estar obligado y prohibido a realizar el 636 978-81-904262-7-5 (RPS) c 2007 IFAAMAS muy mismo acción en una actividad. Dado que la regulación de un MAS implica que los agentes participantes deben ser conscientes de la validez de las acciones que tienen lugar dentro de él, dichos conflictos deben ser identificados y posiblemente resueltos si se necesita una reivindicación de validez para que un agente realice una acción o sea sancionado. Sin embargo, garantizar la libertad de conflicto de un NS en el momento del diseño es computacionalmente intratable. Demostramos esto formalizando la noción de conflicto, proporcionando un mapeo de los NS en las redes de Petri de colores (CPNs) y tomando prestado los resultados teóricos bien conocidos del campo de los CPNs. Creemos que se requiere la detección y resolución de conflictos en línea. Por lo tanto, presentamos un \"algoritmo\" tratable para la resolución de conflictos. Este \"algoritmo\" es primordial para la promulgación distribuida de un NS. El documento se organiza de la siguiente manera. En la Sección 2 detallamos un escenario para servir de ejemplo a lo largo del artículo. A continuación, en la Sección 3 definimos formalmente el artefacto de la estructura normativa. Además, en la sección 4 formalizamos la noción de conflicto para posteriormente analizar la complejidad de la detección de conflictos en términos de RCP en la sección 5. La sección 6 describe la gestión computacional de los NS al describir su promulgación y presentar un \"algoritmo\" para la resolución de conflictos. Por último, comentamos sobre la labor conexa, sacamos conclusiones e informamos sobre la labor futura en la sección 7. 2. SCENARIO Utilizamos un escenario de cadena de suministro en el que empresas e individuos se reúnen en un mercado en línea para realizar negocios. El procedimiento de transacción global puede organizarse como seis actividades distribuidas, representadas como nodos en el diagrama de la Figura 1. En ellas participan diferentes participantes cuyo comportamiento se coordina a través de protocolos. En este escenario, los agentes pueden desempeñar uno de los cuatro papeles: marExit Inscripción Pago Entrega Negociación Coordinación Modelo Contrato Figura 1: Estructura de actividad del contador de ketplace (acc), cliente, proveedor (supp) y gerentes de almacén (wm). Las flechas que conectan las actividades representan cómo los agentes pueden moverse de una actividad a otra. Después de registrarse en el mercado, los clientes y proveedores se reúnen en una actividad en la que negocian los términos de su transacción, es decir. los precios, los importes de las mercancías que deban entregarse, los plazos y otros detalles. En la actividad contractual, se establece el pedido y se prepara una factura. El cliente participará entonces en una actividad de pago, verificando su solvencia e instruyendo a su banco a transferir la cantidad correcta de dinero. Mientras tanto, el proveedor se encargará de la entrega de las mercancías (por ejemplo: a través de un administrador de almacén) en la actividad de entrega. Finalmente, los agentes pueden salir del mercado conforme a un protocolo de salida predeterminado. El contable del mercado participa en la mayoría de las actividades como proveedor confiable de herramientas de auditoría. En el resto del documento nos basaremos en este escenario para ilustrar la noción de estructura normativa e ilustrar nuestro enfoque de la detección y resolución de conflictos en un entorno distribuido. 3. ESTRUCTURA NORMATIVA En los agentes MASs interactúan según protocolos que naturalmente se distribuyen. Abogamos por que las acciones en uno de esos protocolos puedan tener un efecto en la promulgación de otros protocolos. Algunas acciones pueden ser prohibidas u obligatorias, por ejemplo. Tomamos posiciones normativas para ser obligaciones, prohibiciones y permisos similares al trabajo descrito en [26]. La intención de agregar o eliminar una posición normativa que llamamos comando normativo. Los casos de posiciones normativas en un protocolo también pueden tener consecuencias para otros protocolos1. Para definir nuestro lenguaje de norma y especificar cómo se propagan las posiciones normativas, nos hemos inspirado en sistemas multicontexto [14]. Estos sistemas permiten estructurar el conocimiento en teorías formales distintas y definir las relaciones entre ellos. Las relaciones se expresan como reglas puente - la deducibilidad de las fórmulas en algunos contextos conduce a la deducción de otras fórmulas en otros contextos. Recientemente, estos sistemas se han utilizado con éxito para definir arquitecturas de agentes [11, 23]. La metáfora se traduce a nuestro trabajo actual de la siguiente manera: la expresión de las ilocuciones y/o la existencia de posiciones normativas en algunas escenas normativas conduce a la deducción de posiciones normativas en otras escenas normativas. Nos preocupa la propagación y distribución de posiciones normativas dentro de una red de escenas normativas distribuidas como consecuencia de las acciones de los agentes. Tomamos escenas normativas para ser conjuntos de posiciones normativas y expresiones que están asociadas con un protocolo de interacción subyacente correspondiente a una actividad. En esta sección, presentamos primero un lenguaje simple que capta estos aspectos e introduce formalmente las nociones de escena normativa, regla de transición normativa y estructura normativa. Damos la semántica prevista de estas reglas y mostramos cómo controlar un MAS a través de normas en un ejemplo. 3.1 Conceptos básicos Los componentes básicos de nuestro lenguaje son términos y fórmulas atómicas: Def. 1. Un término, denotado como t, es (i) cualquier constante expresada usando minúsculas (con o sin subíndices), por ejemplo. a, b0, c o ii) cualquier variable expresada utilizando mayúsculas (con o sin subíndices), por ejemplo. X, Y, Zb o iii) cualquier función f(t1,. . . , tn), donde f es un símbolo de función n-ary y t1,.., tn son términos. Algunos ejemplos de términos y funciones son Crédito, precio u oferta (biblia, 30), siendo respectivamente una variable, una constante y una función. Estaremos haciendo uso de identificadores en todo el papel, que son términos constantes y también necesitan la siguiente definición: Def. 2. Una fórmula atómica es cualquier construcción p(t1,. . . , tn), donde p es un símbolo predicado n-ary y t1,. . . , son términos. El conjunto de todas las fórmulas atómicas se denota como Δ. Nos centramos en una clase expresiva de MASs en la que la interacción se lleva a cabo por medio de actos de discurso ilocutionarios intercambiados entre los agentes participantes: Def. 3. I I I son las fórmulas atómicas terrestres que tienen la forma p(ag, r, ag, r, , t) donde p es un elemento de 1 Aquí, abstracto de protocolos y se refieren a ellos genéricamente como actividades. El Sexto Intl. Conjunto Conf. en Agentes Autónomos y Sistemas Multi-Agentes (AAMAS 07) 637 un conjunto de partículas ilocucionarias (por ejemplo: informar, petición, oferta); ag, ag son identificadores de agente; r, r son identificadores de rol; , un término de base arbitrario, es el contenido del mensaje, construido a partir de un lenguaje de contenido compartido; t  N es un sello de tiempo. El significado intuitivo de p(ag, r, ag, r, m, t) es que agente ag jugando rol r enviado mensaje m a agente ag jugando rol r en el momento t. Un ejemplo de una ilocución es informar(ag4, supp, ag3, cliente, offer(wire, 12), 10). A veces es útil referirse a las ilocuciones que no están totalmente fundamentadas, es decir, aquellas que pueden contener variables no instantiated (libres). En la descripción de un protocolo, por ejemplo, los valores precisos del mensaje intercambiado pueden quedar sin especificar. Durante la promulgación de los agentes del protocolo se producirán los valores reales que darán lugar a una ilocución del suelo. Así podemos definir esquemas de ilocución: Def. 4. Un esquema de ilocución ̄I es cualquier fórmula atómica p(ag, r, ag, r, ♥, t) en la que algunos de los términos pueden ser variables o pueden contener variables. 3.2 Definición formal de la noción de NS Primero definimos las escenas normativas de la siguiente manera: Def. 5. Una escena normativa es una tupla s = ids, Δs donde los ids son un identificador de escena y Δs es el conjunto de fórmulas atómicas Por ejemplo, una instantánea del estado de la escena normativa de entrega de nuestro escenario podría ser representada como: Δs = 8 < : utt(request(sean, client, kev, wm, receive(wire, 200), 20)), utt(accept(kev, wm, seen, customer, receive(wire, 200), 30)) 9 = ; Es decir, Tenga en cuenta que el estado de una escena normativa Δs evoluciona con el tiempo. Estas escenas normativas están conectadas entre sí a través de transiciones normativas que especifican cómo las expresiones y posiciones normativas en una escena afectan a otras escenas normativas. Como se mencionó anteriormente, las actividades no son independientes, ya que las ilocuciones pronunciadas en algunas de ellas pueden tener un efecto en otras. Las reglas normativas de transición definen las condiciones bajo las cuales se genera un comando normativo. Estas condiciones son declaraciones o posiciones normativas asociadas a un protocolo dado (denominadas por ejemplo. actividad : expresión ) que dan un comando normativo, es decir. la adición o supresión de otra posición normativa, posiblemente relacionada con una actividad diferente. Nuestras reglas de transición están así definidas: Def. 6. Una regla de transición normativa R es de la forma: R ::= V C V ::= ids : D  V, V D ::= N  utt( ̄I) N ::= per( ̄I)  prh( ̄I)  obli( ̄I) C ::= add(ids : N)  remove(ids : N) donde ̄I es un esquema permiso, prohibición u obligación), ids es un identificador de la actividad s y C es un comando normativo. Dotamos nuestro lenguaje con la semántica habitual de los lenguajes basados en reglas [19]. Las reglas trazan una estructura normativa existente a una nueva estructura normativa en la que sólo cambia el estado de las escenas normativas. En las definiciones siguientes nos basamos en el concepto estándar de sustitución [9]. Def. 7. Una transición normativa es un tupla b = idb, rb donde idb es un identificador y rb es una regla de transición normativa. Proponemos ampliar la noción de MAS, regulada por protocolos, con una capa adicional consistente en escenas normativas y transiciones normativas. Esta capa se representa como un gráfico bipartito que llamamos estructura normativa. Una estructura normativa relaciona escenas normativas y transiciones normativas especificando qué posiciones normativas deben generarse o eliminarse en qué escenas normativas. Def. 8. Una estructura normativa es un gráfico bipartito etiquetado NS = Nodos, bordes, Lin, Lout. Nodos es un conjunto de Sâ B donde S es un conjunto de escenas normativas y B es un conjunto de transiciones normativas. Edges es un conjunto Ain Aout donde Ain  S × B es un conjunto de arcos de entrada etiquetados con una fórmula atómica utilizando la función de etiquetado Lin : Ain → D; y Aout  B × S es un conjunto de arcos de salida etiquetados con una posición normativa utilizando la función de etiquetado Lout : Aout → N. Lo siguiente debe contener: 1. Cada fórmula atómica que aparece en el LHS de una regla rb debe ser de la forma (ids : D) donde s â € € € € TM € € € € € € € € € € € € € € € € € € € € € € € € € Ain tal que es = La fórmula atómica que aparece en el RHS de una regla rb debe ser de la forma add(ids : N) o remove(ids : N) donde s â € S y â € Aout tal que aout = (b, s) y Lout (aout ) = N. 3. Ain tal que a = (s, b) y b = idb, rb y Lin (a) = D entonces (ids:D) debe ocurrir en el LHS de rb. 4. Afuera de tal manera que a = (b, s) y b = idb, rb y Lout (a) = N luego add(ids : N) o remove(ids : N) deben ocurrir en el RHS de rb. Los dos primeros puntos aseguran que cada fórmula atómica en el LHS de una regla de transición normativa etiqueta un arco que entra en la transición normativa apropiada en la estructura normativa, y que la fórmula atómica en el RHS etiqueta el arco saliente correspondiente. Los puntos tres y cuatro aseguran que las etiquetas de todos los arcos entrantes se utilicen en el LHS de la regla de transición normativa en la que entran estos arcos, y que las etiquetas de todos los arcos salientes se utilicen en el RHS de la regla de transición normativa que estos arcos dejan. 3.3 Semántica Destinada La semántica formal se definirá mediante un mapeo a Redes Petri Coloradas en la Sección 5.1. Aquí comenzamos a definir la semántica prevista de las reglas normativas de transición describiendo cómo una regla cambia un escenario normativo de una estructura normativa existente que produce una nueva estructura normativa. Cada regla se activa una vez para cada sustitución que unifica el lado izquierdo V de la regla con el estado de las escenas normativas correspondientes. Una fórmula atómica (es decir, una declaración o una posición normativa) si es unificable con una declaración o posición normativa que pertenece al estado del escenario normativo correspondiente. Cada vez que se activa una regla, se lleva a cabo el comando normativo especificado a la derecha de esa regla, con la intención de añadir o eliminar una posición normativa del estado de la escena normativa correspondiente. Sin embargo, la adición no es incondicional, ya que pueden surgir conflictos. Este tema se tratará en las secciones 4 y 6.1. 638 La Sexta Intl. Conjunto Conf. en Agentes Autónomos y Sistemas Multi-Agentes (AAMAS 07) 3.4 Ejemplo En nuestro ejemplo de ejecución tenemos la siguiente regla de transición normativa ejemplar: „ pago : obli(inform(X, cliente, Y, acc, pay(Z, P, Q, T)), pago : utt(inform(X, cliente, Y, acc, pay(Z, P, Q), T)) « entrega : a La norma es una obligación del agente Y (esta vez asumiendo el papel de gerente de almacén wm) de enviar un mensaje al cliente X que el artículo Z ha sido entregado. En la Figura 2 se muestra una representación diagnóstica de cómo se relacionan las actividades y una estructura normativa: Pago Entrega Contrato Nivel Normativo Salida Registro Pago Entrega Negociación Nivel de Coordinación Contrato nt Figura 2: Actividades y Estructura Normativa A medida que se pronuncian las ilocuciones durante las actividades, surgen posiciones normativas. Las preferencias y las posiciones normativas se combinan en normas de transición, lo que provoca el flujo de posiciones normativas entre las distintas situaciones normativas. La conexión entre los dos niveles se describe en la sección 6.2. 4. DEFINICIÓN DE CONFLICTOS Los términos conflicto deontico e inconsistencia deontica se han utilizado indistintamente en la literatura. Sin embargo, en este trabajo adoptamos el punto de vista de [7] en el que los autores sugieren que surge una inconsistencia deontica cuando una acción es simultáneamente permitida y prohibida - ya que un permiso no puede ser actuado en consecuencia, no se produce un conflicto real. Sin embargo, las situaciones en que una acción está simultáneamente obligada y prohibida son conflictos deonticos, ya que tanto las obligaciones como las prohibiciones influyen en los comportamientos en conflicto. El contenido de las posiciones normativas en este trabajo son ilocuciones. Por lo tanto, surge un conflicto normativo cuando una ilocución está simultáneamente obligada y prohibida. Proponemos utilizar la noción estándar de unificación [9] para detectar cuándo se superponen una prohibición y un permiso. Por ejemplo, una obligación obli(informar(A1, R1, A2, R2, p(c, X, T)) y una prohibición prh(informar(a1, r1, a2, r2, p(Y, d), T)) están en conflicto ya que se unifican en el punto Capturamos formalmente esta noción: Def. 9. Un conflicto (deontico) surge entre dos posiciones normativas N y N bajo una sustitución Es decir, una prohibición y una obligación están en conflicto si, y sólo si, sus ilocuciones se unifican en virtud de La sustitución, llamada aquí el conjunto de conflictos, unifica los agentes, roles y fórmulas atómicas. Asumimos que unificar es una implementación adecuada de un \"algoritmo\" de unificación que i) termina siempre (posiblemente fallando, si no se puede encontrar un unificador); ii) es correcto; y iii) tiene complejidad computacional lineal. Las incoherencias causadas por la misma ilocución, que se permiten y prohíben simultáneamente, pueden formalizarse de manera similar. En este trabajo nos centramos en los conflictos de prohibición/obligación, pero la maquinaria computacional introducida en la Sección 6.1 también puede ser utilizada para detectar inconsistencias de prohibición/permiso, si sustituimos la modalidad obli por per. 5. FORMALIZACIÓN DEL CONFLICTO-FREEDOM En esta sección presentamos algunos conocimientos de fondo sobre CPN asumiendo una comprensión básica de las redes Petri ordinarias. Para detalles técnicos, remitimos al lector a [16]. A continuación, mapeamos los NS a los CPN y analizamos sus propiedades. Los CPN combinan la fuerza de las redes Petri con la fuerza de los lenguajes de programación funcionales. Por un lado, las redes Petri proporcionan los primitivos para la descripción de la sincronización de los procesos concurrentes. Como se observa en [16], los CPN tienen una semántica que se basa en la verdadera concurrencia, en lugar de entrelazarse. En nuestra opinión, es más fácil trabajar con una semántica de verdadera moneda porque es la forma en que prevemos la conexión entre el nivel de coordinación y el nivel normativo de un sistema multi-agente. Por otra parte, los lenguajes de programación funcionales utilizados por los CPN proporcionan los primitivos para la definición de los tipos de datos y la manipulación de sus valores de datos. Por lo tanto, podemos traducir fácilmente expresiones de una estructura normativa. Por último, pero no por ello menos importante, los CPN tienen una semántica bien definida que define inequívocamente el comportamiento de cada CPN. Además, los CPN tienen un gran número de métodos e instrumentos de análisis formales mediante los cuales se pueden demostrar las propiedades de los CPN. En resumen, los CPN nos proporcionan todas las características necesarias para razonar formalmente sobre las estructuras normativas, dado que se proporciona una cartografía adecuada. De acuerdo con las redes Petri, los estados de un CPN están representados por medio de lugares. Pero a diferencia de Petri Nets, cada lugar tiene un tipo de datos asociado determinando el tipo de datos que el lugar puede contener. Un estado de un CPN se llama marca. Consiste en un número de fichas colocadas en los lugares individuales. Cada token lleva un valor de datos que tiene el tipo del lugar correspondiente. En general, un lugar puede contener dos o más tokens con el mismo valor de datos. Por lo tanto, una marca de un CPN es una función que mapea cada lugar en un multi-set2 de tokens del tipo correcto. Uno a menudo se refiere a los valores token como colores token y uno también se refiere a los tipos de datos como conjuntos de colores. Los tipos de un CPN pueden ser arbitrariamente complejos. Las acciones en un PCN están representadas mediante transiciones. Un arco entrante en una transición desde un lugar indica que la transición puede eliminar tokens del lugar correspondiente mientras que un arco saliente indica que la transición puede añadir tokens. El número exacto de tokens y sus valores de datos son determinados por las expresiones de arco, que se codifican utilizando el lenguaje de programación elegido para el CPN. Una transición está habilitada en un CPN si y sólo si todos los 2 A multi-set (o bolsa) es una extensión a la noción de conjunto, permitiendo la posibilidad de múltiples apariencias del mismo elemento. El Sexto Intl. Conjunto Conf. en Agentes Autónomos y Sistemas Multi-Agentes (AAMAS 07) 639 variables en las expresiones de sus arcos entrantes se unen a algunos valores (cada una de estas fijaciones se refiere como un elemento vinculante). Si es así, la transición puede ocurrir eliminando tokens de sus lugares de entrada y añadiendo tokens a sus lugares de salida. Además de las expresiones de arco, es posible conectar una expresión booleana de guardia (con variables) a cada transición. Juntando todos los elementos de arriba obtenemos una definición formal de CPN que se empleará más adelante para propósitos de mapeo. Def. 10. Un CPN es un conjunto finito de tipos no vacíos, también llamados conjuntos de colores; ii) P es un conjunto finito de lugares; iii) T es un conjunto finito de transiciones; iv) A es un conjunto finito de arcos; v) N es una función de nodo definida de A a P × T • T × P; vi) C es una función de color de P a فارسى; vii) G es una De acuerdo con las redes Petri ordinarias, el comportamiento concurrente de un CPN se basa en la noción de paso. Formalmente, un paso es un no vacío y finito multi-set sobre el conjunto de todos los elementos de unión. Deje que el paso S se active en una marca M. Entonces, S puede ocurrir, cambiando la marca M a M. Además, decimos que el marcado M es directamente accesible desde el marcado M por la ocurrencia del paso S, y lo denotamos por M[S > M. Una secuencia de ocurrencia finita es una secuencia finita de pasos y marcas: M1[S1 > M2. . . Mn[Sn > Mn+1 de tal manera que n+N y Mi[Si > Mi+1 . . , n}. El conjunto de todas las marcas posibles alcanzables para una red neta de una marca M se llama su conjunto de alcance, y se denota como R(Net, M). 5.1 Mapeo a redes de Petri de colores Nuestra estructura normativa es un gráfico bipartito etiquetado. Lo mismo puede decirse de una red Petri coloreada. Estamos presentando un mapeo f de uno a otro, con el fin de proporcionar semántica para la estructura normativa y probar las propiedades al respecto mediante el uso de resultados teóricos bien conocidos de trabajo en CPNs. El mapeo f hace uso de correspondencias entre escenas normativas y lugares CPN, transiciones normativas y transiciones CPN y finalmente, entre etiquetas de arco y expresiones de arco CPN. S → P B → T Lin Lout → E El conjunto de tipos es el conjunto singleton que contiene el color NP (es decir. * = {NP}). Este tipo complejo está estructurado de la siguiente manera (utilizamos CPN-ML [4] sintaxis): color NPT = con Obl  Per  Prh  NoMod color IP = con infor  declaramos  offer color UTT = record illp : IP ag1, role1, ag2, role2 : string content : string time : int color NP = Los arcos son trazados casi directamente. A es un conjunto finito de arcos y N es una función de nodo, de tal manera que Aa Aa Ain Aout. N(a) = a. La función de inicialización I se define como I(p) = Δs ( Por último, la función de color C asigna el color NP a cada lugar: C(p) = NP (­p ­P). No estamos haciendo uso de la función de guardia G. En el trabajo futuro, esta función se puede utilizar para modelar restricciones cuando extendemos la expresividad de nuestro lenguaje de norma. 5.2 Propiedades de las estructuras normativas Después de haber definido el mapeo desde las estructuras normativas hasta las redes de Petri coloreadas, ahora analizamos las propiedades de los CPN que nos ayudan a entender la complejidad de la detección de conflictos. Una pregunta que nos gustaría responder es, si en un momento dado, una determinada estructura normativa está libre de conflictos. Tal instantánea de una estructura normativa corresponde a una marca en el CPN cartografiado. Def. 11. Dada una marca Mi, esta marca es libre de conflicto si p  P. np1, np2  Mi(p) tal que np1.mode = Obl y np2.mode = Prh y np1.illoc y np2.illoc unificar bajo una sustitución válida. Otra pregunta interesante sería si se producirá un conflicto a partir de una instantánea del sistema propagando las posiciones normativas. Para responder a esta pregunta, primero traducimos la instantánea de la estructura normativa al CPN correspondiente y luego ejecutamos la secuencia de ocurrencia finita de marcas y pasos, verificando la libertad de conflicto de cada marca a medida que avanzamos. Def. 12. Dada una marca Mi, una secuencia de ocurrencia finita Si, Si+1,..., Sn se llama libre de conflictos, si y sólo si Mi[Si > Mi+1. . . Mn[Sn > Mn+1 y Mk están libres de conflictos para todos los k, de modo que i ≤ k ≤ n + 1. Sin embargo, la cuestión principal que nos gustaría investigar, es si una estructura normativa dada es o no resistente a los conflictos, es decir, si los agentes que promulgan el MAS son capaces de provocar conflictos a través de sus acciones. Tan pronto como se incluye la posibilidad de acciones (o declaraciones) de agentes autónomos, se pierde el determinismo. Después de haber mapeado la estructura normativa a un CPN, ahora añadimos modelos de CPN de las interacciones de agentes. Cada forma de interacción con el agente (es decir, cada actividad) se puede modelar utilizando CPN en la línea de Cost et al. [5]. Estos CPN no determinantes alimentan tokens en el CPN que modela la estructura normativa. Esto lleva a la introducción de no-determinismo en el PCN combinado. La mitad inferior de la figura 3 muestra parte de un modelo CPN de un protocolo de agente donde el arco denotado con 1 representa alguna pronunciación de una ilocución por un agente. La transición de destino de este arco, no sólo mueve un token al siguiente estado de este CPN, sino que también coloca un token en el lugar correspondiente a la escena normativa apropiada en el modelo del CPN de la estructura normativa (a través del arco 2). La transición 3 finalmente podría propagar ese símbolo en forma de una obligación, por ejemplo. Así, a partir de una marca dada, muchas secuencias de ocurrencia diferentes son posibles dependiendo de las acciones de los agentes. Utilizamos el conjunto de alcance R para definir una situación en la que los agentes no pueden causar conflictos. 640 La Sexta Intl. Conjunto Conf. sobre Agentes Autónomos y Sistemas Multi-Agentes (AAMAS 07) Figura 3: Construcción del CPN combinado Def. 13. Dado un N neto, una marca M es resistente a los conflictos si y sólo si todas las marcas en R(N,M) están libres de conflictos. La verificación de la libertad de conflicto de una marca se puede hacer en tiempo polinomio mediante la verificación de todos los lugares del CPN en busca de fichas en conflicto. La libertad de conflicto de una secuencia de ocurrencia en el CPN que representa la estructura normativa también se puede hacer en tiempo polinomio ya que esta secuencia es determinista dada una instantánea. El hecho de que se diseñe o no una estructura normativa corresponde con seguridad a la comprobación de la resistencia a los conflictos de la marca M0 inicial. Ahora, verificar la resistencia al conflicto de una marca se convierte en una tarea muy difícil. Corresponde al problema de la accesibilidad en un CPN: ¿se puede alcanzar un estado o se puede lograr una marca que contenga un conflicto?. Este problema de alcanzabilidad es conocido por ser NP-completo para las redes Petri ordinarias [22] y como las RCP son funcionalmente idénticas, no podemos esperar verificar la resistencia a los conflictos de una estructura normativa fuera de línea en un tiempo razonable. Por lo tanto, se necesitan mecanismos de distribución y tiempo de ejecución para garantizar que una estructura normativa mantenga la coherencia. Presentamos uno de esos mecanismos en la sección siguiente. 6. GESTIÓN DE ESTRUCTURAS NORMATIVAS Una vez detectado un conflicto (según se define en la Sección 4), proponemos emplear al unificador para resolver el conflicto. En nuestro ejemplo, si las variables en prh(inform(a1, r1, a2, r2, p(Y, d), T)) no obtienen los valores especificados en la sustitución Sin embargo, en lugar de computar el conjunto de complementos de una sustitución (que puede ser un conjunto infinito) proponemos anotar la prohibición con el propio unificador y utilizarla para determinar cuáles son las variables de esa prohibición no pueden ser en futuras unificaciones para evitar un conflicto. Por lo tanto denotamos prohibiciones anotadas como prh( ̄I) . . Es un conjunto de unificadores. Las normas anotadas3 se interpretan como constructos deonticos con influencias restringidas, es decir, su efecto (sobre agentes, roles e ilocuciones) ha sido limitado por el conjunto de unificadores. Una prohibición puede estar en conflicto con varias obligaciones en una escena normativa dada s = id, Δ y tenemos que registrar (y posiblemente evitar) todos estos conflictos. Definimos a continuación un \"algoritmo\" que garantiza que una posición normativa se añada a una escena normativa de tal manera que no cause ningún conflicto. 3 Aunque proponemos limitar las prohibiciones, el mismo mecanismo puede utilizarse para definir la reducción de obligaciones en su lugar. Estas diferentes políticas dependen de la semántica deontica prevista y de los requisitos de los sistemas abordados. Por ejemplo, algunos MAS pueden exigir que sus agentes no actúen en presencia de conflictos, es decir, que se reduzca la obligación. 6.1 Resolución de conflictos Proponemos una forma de resolver los conflictos normativos mediante la unificación. Detectamos la superposición de las influencias de las normas, es decir. cómo afectan al comportamiento de los agentes afectados, y reducimos la influencia de la posición normativa, mediante el uso adecuado de las anotaciones al comprobar si la norma se aplica a las ilocuciones. El \"algoritmo\" mostrado en la Figura 4 muestra cómo mantenemos un conjunto de normas libres de conflictos. Añade una norma dada N a un estado normativo existente, libre de conflictos Δ, obteniendo un nuevo estado normativo resultante Δ que es libre de conflictos, es decir, sus prohibiciones están anotadas con un conjunto de conjuntos de conflictos que indican qué fijaciones para variables deben evitarse para que los conflictos no tengan lugar. \"algoritmo\" addNorm(N, Δ) comienza 1 timestamp(N) 2 caso N de 3 per( ̄I): Δ := Δ  {N} 4 prh(I): si N Δ Δ s.t. Conflict(N, N, Δ) entonces Δ := Δ 5 other Δ := Δ  {N} 6 prh( ̄I): 7 begin 8 Las líneas 4-5 abordan el caso cuando intentamos agregar una prohibición de base a un estado normativo: si entra en conflicto con cualquier obligación, entonces se descarta; de lo contrario se añade al estado normativo. En las líneas 6 a 12 se describe la situación en que la posición normativa que debe añadirse es una prohibición no básica. En este caso, el \"algoritmo\" inicializa un conjunto vacío y bucles (línea 9-10) a través de las normas N en el viejo estado normativo Δ. Al encontrar uno que entra en conflicto con N, el \"algoritmo\" actualiza Mediante el bucle a través de Δ, somos capaces de comprobar cualquier conflicto entre la nueva prohibición y las obligaciones existentes, construyendo adecuadamente la anotación  que se utilizará al añadir N a Δ en la línea 11. En las líneas 13 a 27 se describe cómo se ajusta una nueva obligación a un estado normativo existente. Hacemos uso de dos conjuntos inicialmente vacíos, temporales, Δ1, Δ2. El \"algoritmo\" pasa a través de Δ (líneas 16-25) recogiendo las prohibiciones anotadas N Ł que chocan con la nueva obligación. Hay, sin embargo, dos casos a tratar: el de cuando un motivo La Sexta Intl. Conjunto Conf. sobre los agentes autónomos y los sistemas multiagentes (AAMAS 07) se encuentra la prohibición 641 (línea 17), y su excepción, que abarca las prohibiciones no terrestres (línea 20). En ambos casos, la antigua prohibición se almacena en Δ1 (líneas 18 y 23) para ser posteriormente retirada de Δ (línea 26). Sin embargo, en el caso de una prohibición no básica, el \"algoritmo\" actualiza su anotación de conjuntos de conflictos (línea 24). El bucle garantiza que se lleve a cabo una búsqueda exhaustiva (lineal) a través de un estado normativo, comprobando si la nueva obligación está en conflicto con cualquier prohibición existente, posiblemente actualizando las anotaciones de estas prohibiciones en conflicto. En la línea 26 el \"algoritmo\" construye la nueva actualización Δ mediante la eliminación de las antiguas prohibiciones almacenadas en Δ1 y la adición de las prohibiciones actualizadas almacenadas en Δ2 (si es que hay), así como la nueva obligación N. Nuestro \"algoritmo\" propuesto es correcto en que, para una posición normativa dada N y un estado normativo Δ, proporciona un nuevo estado normativo Δ en el que todas las prohibiciones tienen anotaciones que registran Sin embargo, las anotaciones pueden estar vacías: este es el caso cuando tenemos una prohibición básica o una prohibición que no unifica/conflige con ninguna obligación. Los permisos no afectan nuestro \"algoritmo\" y son tratados apropiadamente (línea 3). Cualquier intento de insertar una prohibición de base que entre en conflicto, produce el mismo estado normativo (línea 4). Cuando se añade una nueva obligación, el \"algoritmo\" garantiza que se consideran todas las prohibiciones (líneas 14 a 27), lo que conduce a la eliminación de las prohibiciones de base contradictorias o a la actualización de las anotaciones de las prohibiciones no básicas. El \"algoritmo\" siempre termina: los bucles están sobre un conjunto finito Δ y los conflictos comprueban y establecen operaciones siempre terminan. La complejidad del \"algoritmo\" es lineal: el conjunto Δ sólo se examina una vez para cada caso posible de norma que se añade. Al gestionar los estados normativos también es posible que necesitemos eliminar posiciones normativas. Esto es sencillo: los permisos se pueden retirar sin ningún problema; las prohibiciones anotadas también se pueden eliminar sin más consideraciones; sin embargo, las obligaciones requieren algunas tareas domésticas. Cuando se va a eliminar una obligación, debemos verificarla contra todas las prohibiciones anotadas a fin de actualizar sus anotaciones. Aplicamos la comprobación de conflicto y obtenemos un unificador, luego eliminamos este unificador de la anotación de prohibiciones. Invocamos la eliminación \"algoritmo\" como removeNorm(N, Δ): devuelve un nuevo estado normativo Δ en el que N ha sido eliminado, con posibles modificaciones a otras posiciones normativas como se explicó. 6.2 Promulgación de una estructura normativa La promulgación de una estructura normativa equivale a la ejecución paralela y distribuida de escenas normativas y transiciones normativas. A título ilustrativo, describiremos a continuación la interacción entre las situaciones normativas de pago y entrega y la transición normativa que los vincula en la mitad superior de la figura 2. Con este objetivo, considere, por ejemplo, que obl(inform(jules, cliente, rod, acc, pay(copper, 400, 350), T) Δpago y que Δentrega tiene prh(inform(rod,wm, jules, cliente, entregado(Z, Q), T)). Tales estados indican que el cliente Jules está obligado a pagar £400 por 350kg de cobre al contador Rod de acuerdo con la escena normativa de pago, mientras que Rod, asumiendo el papel de gerente de almacén esta vez, está prohibido entregar cualquier cosa al cliente Jules de acuerdo con la escena normativa de entrega. Para cada escena normativa, el proceso de promulgación es el siguiente. En primer lugar, procesa su cola de mensajes entrantes que contiene tres tipos de mensajes: declaraciones de la actividad a la que está vinculada; y comandos normativos para agregar o eliminar posiciones normativas. Por ejemplo, en nuestro ejemplo, la escena normativa de pago recoge la ilocución I = utt((inform(jules, cliente, varilla, acc, pay(cobre, 400, 350), 35)) para el cliente Jules pendiente de pago por cobre (a través de la flecha A en la figura 2). Las Uterancias son timestamped y subsecuentemente agregadas al estado normativo. Tendríamos Δpayment = Δpayment {I}, en nuestro ejemplo. Al recibir órdenes normativas para agregar o eliminar una posición normativa, la escena normativa invoca la adición o eliminación correspondiente \"algoritmo\" descrito en la Sección 6.1. En segundo lugar, la escena normativa reconoce su cambio de estado al enviar un mensaje desencadenante a cada transición normativa saliente a la que está conectado. En nuestro ejemplo, el escenario normativo de pagos estaría señalando su cambio de estado a la transición normativa nt. Para las transiciones normativas, el proceso funciona de manera diferente. Debido a que cada transición normativa controla el funcionamiento de una sola regla, al recibir un mensaje de activación, encuesta cada escena normativa entrante para sustituciones de los esquemas de ilocución pertinentes en el LHS de su regla. En nuestro ejemplo, nt (responsable de la regla descrita en la Sección 3.4), encuestaría el escenario normativo de pago (vía flecha B) para sustituciones. Al recibir respuestas de ellos (en forma de conjuntos de sustituciones junto con marcas de tiempo), tiene que unificar las sustituciones de cada una de estas escenas normativas. Para cada unificación que encuentra, la regla se activa, y por lo tanto el comando normativo correspondiente se envía a lo largo de la escena normativa de salida. La transición normativa entonces mantiene un seguimiento del mensaje de disparo que envió y de las marcas de tiempo de las posiciones normativas que desencadenó el disparo. Esto se hace para asegurar que las mismas posiciones normativas en el LHS de una regla sólo desencadenen su disparo una vez. En nuestro ejemplo, nt estaría recibiendo  = {X/jules, Y/rod, Z/copper, Q/350} de la escena normativa de pagos. Dado que las substiciones en unifican con la regla nts, la regla es disparada, y el comando normativo add(delivery : obli(rod, wm, jules, client, delivery(copper, 350), T)) es enviado a lo largo de la escena normativa de entrega para obligar a Rod a entregar al cliente Jules 350kg de cobre. Después de eso, la escena normativa de entrega invocaría el addNorm \"algoritmo\" de la figura 4 con Δdelivery y N = obli(rod, wm, jules, cliente, entregado (cobre, 350)) como argumentos. 7. TRABAJOS Y CONCLUSIONES RELACIONADOS Nuestras contribuciones en este documento son triples. En primer lugar, introducimos un enfoque para la gestión y el razonamiento de las normas de manera distribuida. Hasta donde sabemos, hay poco trabajo publicado en esta dirección. En [8, 21] se presentan dos idiomas para la aplicación distribuida de las normas en el MAS. Sin embargo, en ambos trabajos, cada agente tiene una interfaz de mensaje local que envía mensajes legales de acuerdo con un conjunto de normas. Dado que estas interfaces son locales para cada agente, las normas sólo pueden expresarse en términos de acciones de ese agente. Se trata de una grave desventaja, por ejemplo. cuando uno necesita activar una obligación para con un agente debido a un cierto mensaje de otro. La segunda contribución es la propuesta de una estructura normativa. La noción es fructífera porque permite la separación de las cuestiones normativas y de procedimiento. La estructura normativa que proponemos evidencia la similitud entre la propagación de posiciones normativas y la propagación 642 La Sexta Intl. Conjunto Conf. sobre Agentes Autónomos y Sistemas Multi-Agentes (AAMAS 07) de tokens en Redes Petri Coloradas. Esa similitud sugiere fácilmente una cartografía entre los dos, y da lugar a un tratamiento analítico conveniente de la estructura normativa, en general, y la complejidad de la detección de conflictos, en particular. La idea de modelar interacciones (en forma de conversaciones) a través de Petri Nets se ha investigado en [18], donde el medio de interacción y los agentes individuales se modelan como subredes de CPN que posteriormente se combinan para su análisis. En [5], las conversaciones se diseñan y analizan por primera vez a nivel de los CPN y posteriormente se traducen en protocolos. Lin et al. [20] mapear esquemas de conversación a CPNs. Según nuestro conocimiento, el uso de esta representación en apoyo de la detección de conflictos en el MAS regulado no ha sido reportado en otros lugares. Por último, presentamos un mecanismo distribuido para resolver los conflictos normativos. Sartor [25] trata los conflictos normativos desde el punto de vista de la teoría jurídica y sugiere una forma de ordenar las normas involucradas. Su idea se implementa en [12], pero requiere un recurso central para el mantenimiento de normas. El enfoque para la detección y resolución de conflictos es una adaptación y extensión del trabajo sobre gráficos de instanciación reportados en [17] y un \"algoritmo\" relacionado en [27]. El \"algoritmo\" presentado en el presente trabajo puede ser utilizado para manejar estados normativos distribuidos: escenas normativas que suceden en paralelo tienen un estado normativo asociado Δ al que el \"algoritmo\" se aplica de forma independiente cada vez que se introduce una nueva norma. Estas tres contribuciones que presentamos en este documento abren muchas posibilidades para el trabajo futuro. Cabe mencionar en primer lugar, que como estrategia amplia estamos trabajando en una generalización de la noción de estructura normativa para hacerla funcionar con diferentes modelos de coordinación, con un contenido deontico más rico y además de diferentes realizaciones computacionales de MAS regulado. Como primer paso en esta dirección estamos aprovechando la disociación entre los protocolos de interacción y la orientación normativa declarativa que la estructura normativa pone a disposición, para proporcionar una capa normativa para las instituciones electrónicas (como se define en [1]). Esperamos que este acoplamiento dote a las instituciones electrónicas de un entorno normativo más flexible y más expresivo. Además, queremos extender nuestro modelo a través de varias direcciones: (1) manejar la negación y las limitaciones como parte del lenguaje de la norma, y en particular la noción de tiempo; (2) dar cabida a múltiples autoridades jerárquicas de normas basadas en roles, en la línea de Cholvy y Cuppens [3] y relaciones de poder como sugiere Carabelea et al. [2]; (3) para captar en la resolución de conflictos \"algoritmo\" diferentes semánticas relacionadas con las nociones deonticas apoyando diferentes axiomaciones (por ejemplo, fuerza relativa de la prohibición frente a la obligación, nociones deonticas por defecto, inconsistencias deonticas). En el lado teórico, pretendemos utilizar técnicas de análisis de CPN para caracterizar clases de CPN (por ejemplo, acíclicas, simétricas, etc.) que corresponden a familias de Estructuras Normativas susceptibles a la detección de conflictos fuera de línea. La combinación de estas técnicas junto con nuestros mecanismos de resolución de conflictos en línea pretende dotar a los diseñadores del MAS de la capacidad de incorporar normas en sus sistemas de una manera basada en principios. 8. REFERENCIAS [1] J. L. Arcos, M. Esteva, P. Noriega, J. A. Rodr guez, y C. Sierra. Ingeniería de entornos abiertos con instituciones electrónicas. Journal on Engineering Applications of Artificial Intelligence, 18(2):191-204, 2005. [2] C. Carabelea, O. Boissier, y C. Castelfranchi. Usar el poder social para permitir a los agentes razonar sobre ser parte de un grupo. En el 5o Internat. Taller, EEAT 2004, págs. 166 a 177, 2004. [3] L. Cholvy y F. Cuppens. Solución de conflictos normativos mediante la fusión de funciones. En la Quinta Conferencia Internacional sobre Inteligencia Artificial y Derecho, Washington, Estados Unidos, 1995. [4] S. Christensen y T. B. Haagh. Diseño CPN - vista general de la sintaxis CPN ML. Informe técnico, Universidad de Aarhus, 1996. [5] R. S. Cost, Y. Chen, T. W. Finin, Y. Labrou e Y. Peng. Usando petri redes de colores para modelar la conversación. In Issues in Agent Communication, págs. 178 a 192, Londres, Reino Unido, 2000. [6] F. Dignum. Agentes autónomos con normas. Inteligencia Artificial y Ley, 7(1):69-79, 1999. [7] A. Elhag, J. Breuker y P. Brouwer. Sobre el análisis formal de los conflictos normativos. Información & Comunicaciones. Techn. Ley, 9(3):207-217, Oct. 2000. [8] M. Esteva, W. Vasconcelos, C. Sierra, y J. A. Rodr guez-Aguilar. Consistencia normativa en las instituciones electrónicas. volumen 3171 (LNAI), páginas 494-505. Springer-Verlag, 2004. [9] M. Fitting. Prueba de la lógica de primer orden y del teorema automatizado. Springer-Verlag, Nueva York, Estados Unidos, 1990. [10] N. Fornara, F. Vigan`o y M. Colombetti. Un enfoque impulsado por eventos a las normas en las instituciones artificiales. En el taller AAMAS05: Agentes, normas e instituciones para sistemas multiagente regulados (ANI@REM), Utrecht, 2005. [11] D. Gaertner, P. Noriega y C. Sierra. Ampliación de la arquitectura BDI con compromisos. En Actas del IX Congreso Internacional de la Asociación Catalana de Inteligencia Artificial, 2006. [12] A. Garc a-Camino, P. Noriega, y J.-A. Rodr guez-Aguilar. Un algoritmo para la resolución de conflictos en actividades reguladas compuestas. En el 7o taller Int.Workshop - ESAW 06, 2006. [13] A. Garc a-Camino, J.-A. Rodr guez-Aguilar, C. Sierra y W. Vasconcelos. Una arquitectura distribuida para las Sociedades de Agentes de Normas. En DALT III, volumen 3904 (LNAI), páginas 89 a 105. Springer, 2006. [14] F. Giunchiglia y L. Serafini. Lógicas jerárquicas multilenguaje o: Cómo podemos prescindir de lógicas modales. Inteligencia Artificial, 65(1):29-70, 1994. [15] J. Habermas. La Teoría de la Comunicación Acción, Volumen Uno, La Razón y la Racionalización de la Sociedad. Beacon Press, 1984. [16] K. Jensen. Redes Petri coloreadas: Conceptos básicos, métodos de análisis y usos prácticos (Volumen 1). Springer, 1997. [17] M. Kollingbaum y T. Norman. Estrategias para resolver conflictos de normas con razonamiento práctico. En el Taller de Coordinación de la CEPA en Sociedades de Agentes Emergentes 2004, 2004. [18] J.-L. Koning, G. Francois e Y. Demazeau. Formalización y prevalidación para protocolos de interacción en sistemas multiagente. En ECAI, págs. 298 a 307, 1998. [19] B. Kramer y J. Mylopoulos. Representación del conocimiento. En S. C. Shapiro, editor, Enciclopedia de Inteligencia Artificial, volumen 1, páginas 743-759. John Wiley & Sons, 1992. [20] F. Lin, D. H. Norrie, W. Shen y R. Kremer. Un enfoque basado en esquemas para especificar las políticas de conversación. En Temas de Comunicación de Agentes, págs. 193-204, 2000. [21] N. Minsky. Interacción gobernada por la ley (LGI): Un mecanismo de coordinación y control distribuido (Una introducción y un manual de referencia). Informe técnico, Universidad Rutgers, 2005. [22] T. Murata. Redes Petri: Propiedades, análisis y aplicaciones. Actas del IEEE, 77(4):541-580, 1989. [23] S. Parsons, C. Sierra y N. Jennings. Agentes que razonan y negocian discutiendo. Diario de Lógica y Computación, 8(3):261-292, 1998. [24] A. Ricci y M. Viroli. Artefactos de Coordinación: Una Abstracción Unificante para la Coordinación de Ingeniería Mediada por el Medio Ambiente en MAS. Informatica, 29:433-443, 2005. [25] G. Sartor. Conflictos normativos en el razonamiento jurídico. Inteligencia Artificial y Ley, 1(2-3):209-235, junio de 1992. [26] M. Sergot. Una teoría computacional de posiciones normativas. ACM Trans. Comput. Lógica, 2(4):581-622, 2001. [27] W. W. Vasconcelos, M. Kollingbaum, y T. Norman. Resolver conflictos e incoherencias en las organizaciones virtuales reguladas por normas. En Actas de AAMAS 07, Hawaii, EE.UU., 2007. IFAAMAS. [28] G. H. von Wright. Norma y acción: Una investigación lógica. Routledge y Kegan Paul, Londres, 1963. [29] M. Wooldridge. Una introducción a los sistemas multiagente. John Wiley & Sons, Chichester, Reino Unido, febrero de 2002. El Sexto Intl. Conjunto Conf. sobre agentes autónomos y sistemas de agentes múltiples (AAMAS 07) 643 ",
            "error": [
                ""
            ]
        },
        "activity": {
            "translated_key": "actividad",
            "translated_annotated_text": "Gestión de Normas Distribuidas en Sistemas Regulados Multi-Agente ∗ Dorian Gaertner Dept. de Computación, Imperial College London, Londres SW7 2AZ, Reino Unido dg00@doc.ic.ac.uk Andrés García-Camino, Pablo Noriega, J.-A. Rodriguez-Aguilar IIIA-CSIC, 08193 Bellaterra, España {andres,pablo,jarážiya.csic.es Wamberto Vasconcelos Dept. de Ciencias de la Computación, Universidad de Aberdeen, Aberdeen AB24 3UE, Reino Unido wvasconcelos@acm.org RESUMEN Las normas son ampliamente reconocidas como un medio de coordinar sistemas multi-agentes. La gestión distribuida de las normas es una cuestión difícil y observamos una falta de realizaciones computacionales verdaderamente distribuidas de los modelos normativos. Con el fin de regular el comportamiento de los agentes autónomos que participan en múltiples actividades relacionadas, proponemos un modelo normativo, la Estructura Normativa (NS), un artefacto que se basa en la propagación de posiciones normativas (obligaciones, prohibiciones, permisos), como consecuencias de las acciones de los agentes. Dentro de un NS, los conflictos pueden surgir debido a la naturaleza dinámica del MAS y la concurrencia de acciones de los agentes. Sin embargo, garantizar la libertad de conflicto de un NS en el momento del diseño es computacionalmente intratable. Demostramos esto formalizando la noción de conflicto, proporcionando un mapeo de los NS en las Redes Petri Coloreadas y tomando prestado los resultados teóricos bien conocidos de ese campo. Dado que se requiere la resolución de conflictos en línea, presentamos un algoritmo tratable que se empleará de forma distribuida. Luego demostramos que este algoritmo es primordial para la promulgación distribuida de un NS. Categorías y sujetos Descriptores I.2.11 [Inteligencia Artificial Distribuida]: Idiomas y estructuras Términos generales Algoritmos, Diseño, Teoría 1. INTRODUCCIÓN Una característica fundamental de los sistemas multiagente abiertos y regulados en los que interactúan agentes autónomos, es que los agentes participantes están destinados a cumplir con las convenciones del sistema. Las normas pueden utilizarse para modelar tales convenciones y, por lo tanto, como medio para regular el comportamiento observable de los agentes [6, 29]. Hay muchas contribuciones sobre el tema de las normas de sociólogos, filósofos y lógicos (por ejemplo, [15, 28]). Sin embargo, hay muy pocas propuestas para la realización computacional de modelos normativos - la forma en que las normas pueden integrarse en el diseño y ejecución de MAS. Los pocos que existen (e.g. [10, 13, 24]), funcionan de manera centralizada, lo que crea cuellos de botella y puntos de fallo únicos. Hasta donde sabemos, ninguna propuesta apoya verdaderamente la promulgación distribuida de entornos normativos. En nuestro documento abordamos ese problema y proponemos medios para manejar los compromisos contradictorios en sistemas abiertos, regulados y multiagentes de manera distribuida. El tipo de MAS regulado que contemplamos consiste en actividades múltiples, simultáneas, relacionadas donde los agentes interactúan. Cada agente puede participar simultáneamente en varias actividades, y cambiar de una \"actividad\" a otra. Las acciones de un agente dentro de una \"actividad\" pueden tener consecuencias en forma de posiciones normativas (es decir. obligaciones, permisos y prohibiciones) [26] que puedan limitar su comportamiento futuro. Por ejemplo, un agente comprador que se queda sin crédito puede estar prohibido hacer más ofertas, o un agente vendedor está obligado a entregar después de cerrar un acuerdo. Asumimos que los agentes pueden optar por no cumplir todas sus obligaciones y, por lo tanto, pueden ser sancionados por el MAS. Obsérvese que, cuando se distribuyen las actividades, las posiciones normativas deben derivarse de las actividades en las que se generan a aquellas en las que surten efecto. Por ejemplo, la obligación de los vendedores de arriba debe fluir (o propagarse) de una \"actividad\" de negociación a una \"actividad\" de entrega. Dado que en un MAS abierto y regulado no se pueden incorporar aspectos normativos en el diseño de los agentes, adoptamos la opinión de que el MAS debe complementarse con un conjunto separado de normas que regulen aún más el comportamiento de los agentes participantes. Para modelar la separación de preocupaciones entre el nivel de coordinación (interacciones de agentes) y el nivel normativo (propagación de posiciones normativas), proponemos un artefacto llamado Estructura Normativa (NS). Dentro de un NS pueden surgir conflictos debido a la naturaleza dinámica del MAS y la concurrencia de acciones de los agentes. Por ejemplo, un agente puede estar obligado y prohibido a hacer el 636 978-81-904262-7-5 (RPS) c 2007 IFAAMAS muy misma acción en una \"actividad\". Dado que la regulación de un MAS implica que los agentes participantes deben ser conscientes de la validez de las acciones que tienen lugar dentro de él, dichos conflictos deben ser identificados y posiblemente resueltos si se necesita una reivindicación de validez para que un agente realice una acción o sea sancionado. Sin embargo, garantizar la libertad de conflicto de un NS en el momento del diseño es computacionalmente intratable. Demostramos esto formalizando la noción de conflicto, proporcionando un mapeo de los NS en las redes de Petri de colores (CPNs) y tomando prestado los resultados teóricos bien conocidos del campo de los CPNs. Creemos que se requiere la detección y resolución de conflictos en línea. Por lo tanto, presentamos un algoritmo tratable para la resolución de conflictos. Este algoritmo es primordial para la promulgación distribuida de un NS. El documento se organiza de la siguiente manera. En la Sección 2 detallamos un escenario para servir de ejemplo a lo largo del artículo. A continuación, en la Sección 3 definimos formalmente el artefacto de la estructura normativa. Además, en la sección 4 formalizamos la noción de conflicto para posteriormente analizar la complejidad de la detección de conflictos en términos de RCP en la sección 5. En la sección 6 se describe la gestión computacional de los NS describiendo su promulgación y presentando un algoritmo para la resolución de conflictos. Por último, comentamos sobre la labor conexa, sacamos conclusiones e informamos sobre la labor futura en la sección 7. 2. SCENARIO Utilizamos un escenario de cadena de suministro en el que empresas e individuos se reúnen en un mercado en línea para realizar negocios. El procedimiento de transacción global puede organizarse como seis actividades distribuidas, representadas como nodos en el diagrama de la Figura 1. En ellas participan diferentes participantes cuyo comportamiento se coordina a través de protocolos. En este escenario, los agentes pueden desempeñar uno de los cuatro papeles: marExit Inscripción Pago Entrega Negociación Coordinación Modelo Contrato Figura 1: Estructura de actividad del contador de ketplace (acc), cliente, proveedor (supp) y gerentes de almacén (wm). Las flechas que conectan las actividades representan cómo los agentes pueden moverse de una \"actividad\" a otra. Después de registrarse en el mercado, los clientes y proveedores se reúnen en una \"actividad\" donde negocian los términos de su transacción, es decir. los precios, los importes de las mercancías que deban entregarse, los plazos y otros detalles. En el contrato \"actividad\", el pedido se establece y se prepara una factura. El cliente participará entonces en una \"actividad\" de pago, verificando su solvencia e instruyendo a su banco a transferir la cantidad correcta de dinero. Mientras tanto, el proveedor se encargará de la entrega de las mercancías (por ejemplo: a través de un administrador de almacén) en la entrega \"actividad\". Finalmente, los agentes pueden salir del mercado conforme a un protocolo de salida predeterminado. El contable del mercado participa en la mayoría de las actividades como proveedor confiable de herramientas de auditoría. En el resto del documento nos basaremos en este escenario para ilustrar la noción de estructura normativa e ilustrar nuestro enfoque de la detección y resolución de conflictos en un entorno distribuido. 3. ESTRUCTURA NORMATIVA En los agentes MASs interactúan según protocolos que naturalmente se distribuyen. Abogamos por que las acciones en uno de esos protocolos puedan tener un efecto en la promulgación de otros protocolos. Algunas acciones pueden ser prohibidas u obligatorias, por ejemplo. Tomamos posiciones normativas para ser obligaciones, prohibiciones y permisos similares al trabajo descrito en [26]. La intención de agregar o eliminar una posición normativa que llamamos comando normativo. Los casos de posiciones normativas en un protocolo también pueden tener consecuencias para otros protocolos1. Para definir nuestro lenguaje de norma y especificar cómo se propagan las posiciones normativas, nos hemos inspirado en sistemas multicontexto [14]. Estos sistemas permiten estructurar el conocimiento en teorías formales distintas y definir las relaciones entre ellos. Las relaciones se expresan como reglas puente - la deducibilidad de las fórmulas en algunos contextos conduce a la deducción de otras fórmulas en otros contextos. Recientemente, estos sistemas se han utilizado con éxito para definir arquitecturas de agentes [11, 23]. La metáfora se traduce a nuestro trabajo actual de la siguiente manera: la expresión de las ilocuciones y/o la existencia de posiciones normativas en algunas escenas normativas conduce a la deducción de posiciones normativas en otras escenas normativas. Nos preocupa la propagación y distribución de posiciones normativas dentro de una red de escenas normativas distribuidas como consecuencia de las acciones de los agentes. Tomamos escenas normativas para ser conjuntos de posiciones normativas y expresiones que se asocian con un protocolo de interacción subyacente que corresponde a una \"actividad\". En esta sección, presentamos primero un lenguaje simple que capta estos aspectos e introduce formalmente las nociones de escena normativa, regla de transición normativa y estructura normativa. Damos la semántica prevista de estas reglas y mostramos cómo controlar un MAS a través de normas en un ejemplo. 3.1 Conceptos básicos Los componentes básicos de nuestro lenguaje son términos y fórmulas atómicas: Def. 1. Un término, denotado como t, es (i) cualquier constante expresada usando minúsculas (con o sin subíndices), por ejemplo. a, b0, c o ii) cualquier variable expresada utilizando mayúsculas (con o sin subíndices), por ejemplo. X, Y, Zb o iii) cualquier función f(t1,. . . , tn), donde f es un símbolo de función n-ary y t1,.., tn son términos. Algunos ejemplos de términos y funciones son Crédito, precio u oferta (biblia, 30), siendo respectivamente una variable, una constante y una función. Estaremos haciendo uso de identificadores en todo el papel, que son términos constantes y también necesitan la siguiente definición: Def. 2. Una fórmula atómica es cualquier construcción p(t1,. . . , tn), donde p es un símbolo predicado n-ary y t1,. . . , son términos. El conjunto de todas las fórmulas atómicas se denota como Δ. Nos centramos en una clase expresiva de MASs en la que la interacción se lleva a cabo por medio de actos de discurso ilocutionarios intercambiados entre los agentes participantes: Def. 3. I I I son las fórmulas atómicas terrestres que tienen la forma p(ag, r, ag, r, , t) donde p es un elemento de 1 Aquí, abstracto de protocolos y se refieren a ellos genéricamente como actividades. El Sexto Intl. Conjunto Conf. en Agentes Autónomos y Sistemas Multi-Agentes (AAMAS 07) 637 un conjunto de partículas ilocucionarias (por ejemplo: informar, petición, oferta); ag, ag son identificadores de agente; r, r son identificadores de rol; , un término de base arbitrario, es el contenido del mensaje, construido a partir de un lenguaje de contenido compartido; t  N es un sello de tiempo. El significado intuitivo de p(ag, r, ag, r, m, t) es que agente ag jugando rol r enviado mensaje m a agente ag jugando rol r en el momento t. Un ejemplo de una ilocución es informar(ag4, supp, ag3, cliente, offer(wire, 12), 10). A veces es útil referirse a las ilocuciones que no están totalmente fundamentadas, es decir, aquellas que pueden contener variables no instantiated (libres). En la descripción de un protocolo, por ejemplo, los valores precisos del mensaje intercambiado pueden quedar sin especificar. Durante la promulgación de los agentes del protocolo se producirán los valores reales que darán lugar a una ilocución del suelo. Así podemos definir esquemas de ilocución: Def. 4. Un esquema de ilocución ̄I es cualquier fórmula atómica p(ag, r, ag, r, ♥, t) en la que algunos de los términos pueden ser variables o pueden contener variables. 3.2 Definición formal de la noción de NS Primero definimos las escenas normativas de la siguiente manera: Def. 5. Una escena normativa es una tupla s = ids, Δs donde los ids son un identificador de escena y Δs es el conjunto de fórmulas atómicas Por ejemplo, una instantánea del estado de la escena normativa de entrega de nuestro escenario podría ser representada como: Δs = 8 < : utt(request(sean, client, kev, wm, receive(wire, 200), 20)), utt(accept(kev, wm, seen, customer, receive(wire, 200), 30)) 9 = ; Es decir, Tenga en cuenta que el estado de una escena normativa Δs evoluciona con el tiempo. Estas escenas normativas están conectadas entre sí a través de transiciones normativas que especifican cómo las expresiones y posiciones normativas en una escena afectan a otras escenas normativas. Como se mencionó anteriormente, las actividades no son independientes, ya que las ilocuciones pronunciadas en algunas de ellas pueden tener un efecto en otras. Las reglas normativas de transición definen las condiciones bajo las cuales se genera un comando normativo. Estas condiciones son declaraciones o posiciones normativas asociadas a un protocolo dado (denominadas por ejemplo. \"actividad\" : expresión) que dan un comando normativo, es decir, la adición o eliminación de otra posición normativa, posiblemente relacionada con una \"actividad\" diferente. Nuestras reglas de transición están así definidas: Def. 6. Una regla de transición normativa R es de la forma: R ::= V C V ::= ids : D  V, V D ::= N  utt( ̄I) N ::= per( ̄I)  prh( ̄I)  obli( ̄I) C ::= add(ids : N)  remove(ids : N) donde ̄I es un esquema permiso, prohibición u obligación), ids es un identificador para \"actividad\" s y C es un comando normativo. Dotamos nuestro lenguaje con la semántica habitual de los lenguajes basados en reglas [19]. Las reglas trazan una estructura normativa existente a una nueva estructura normativa en la que sólo cambia el estado de las escenas normativas. En las definiciones siguientes nos basamos en el concepto estándar de sustitución [9]. Def. 7. Una transición normativa es un tupla b = idb, rb donde idb es un identificador y rb es una regla de transición normativa. Proponemos ampliar la noción de MAS, regulada por protocolos, con una capa adicional consistente en escenas normativas y transiciones normativas. Esta capa se representa como un gráfico bipartito que llamamos estructura normativa. Una estructura normativa relaciona escenas normativas y transiciones normativas especificando qué posiciones normativas deben generarse o eliminarse en qué escenas normativas. Def. 8. Una estructura normativa es un gráfico bipartito etiquetado NS = Nodos, bordes, Lin, Lout. Nodos es un conjunto de Sâ B donde S es un conjunto de escenas normativas y B es un conjunto de transiciones normativas. Edges es un conjunto Ain Aout donde Ain  S × B es un conjunto de arcos de entrada etiquetados con una fórmula atómica utilizando la función de etiquetado Lin : Ain → D; y Aout  B × S es un conjunto de arcos de salida etiquetados con una posición normativa utilizando la función de etiquetado Lout : Aout → N. Lo siguiente debe contener: 1. Cada fórmula atómica que aparece en el LHS de una regla rb debe ser de la forma (ids : D) donde s â € € € € TM € € € € € € € € € € € € € € € € € € € € € € € € € Ain tal que es = La fórmula atómica que aparece en el RHS de una regla rb debe ser de la forma add(ids : N) o remove(ids : N) donde s â € S y â € Aout tal que aout = (b, s) y Lout (aout ) = N. 3. Ain tal que a = (s, b) y b = idb, rb y Lin (a) = D entonces (ids:D) debe ocurrir en el LHS de rb. 4. Afuera de tal manera que a = (b, s) y b = idb, rb y Lout (a) = N luego add(ids : N) o remove(ids : N) deben ocurrir en el RHS de rb. Los dos primeros puntos aseguran que cada fórmula atómica en el LHS de una regla de transición normativa etiqueta un arco que entra en la transición normativa apropiada en la estructura normativa, y que la fórmula atómica en el RHS etiqueta el arco saliente correspondiente. Los puntos tres y cuatro aseguran que las etiquetas de todos los arcos entrantes se utilicen en el LHS de la regla de transición normativa en la que entran estos arcos, y que las etiquetas de todos los arcos salientes se utilicen en el RHS de la regla de transición normativa que estos arcos dejan. 3.3 Semántica Destinada La semántica formal se definirá mediante un mapeo a Redes Petri Coloradas en la Sección 5.1. Aquí comenzamos a definir la semántica prevista de las reglas normativas de transición describiendo cómo una regla cambia un escenario normativo de una estructura normativa existente que produce una nueva estructura normativa. Cada regla se activa una vez para cada sustitución que unifica el lado izquierdo V de la regla con el estado de las escenas normativas correspondientes. Una fórmula atómica (es decir, una declaración o una posición normativa) si es unificable con una declaración o posición normativa que pertenece al estado del escenario normativo correspondiente. Cada vez que se activa una regla, se lleva a cabo el comando normativo especificado a la derecha de esa regla, con la intención de añadir o eliminar una posición normativa del estado de la escena normativa correspondiente. Sin embargo, la adición no es incondicional, ya que pueden surgir conflictos. Este tema se tratará en las secciones 4 y 6.1. 638 La Sexta Intl. Conjunto Conf. en Agentes Autónomos y Sistemas Multi-Agentes (AAMAS 07) 3.4 Ejemplo En nuestro ejemplo de ejecución tenemos la siguiente regla de transición normativa ejemplar: „ pago : obli(inform(X, cliente, Y, acc, pay(Z, P, Q, T)), pago : utt(inform(X, cliente, Y, acc, pay(Z, P, Q), T)) « entrega : a La norma es una obligación del agente Y (esta vez asumiendo el papel de gerente de almacén wm) de enviar un mensaje al cliente X que el artículo Z ha sido entregado. En la Figura 2 se muestra una representación diagnóstica de cómo se relacionan las actividades y una estructura normativa: Pago Entrega Contrato Nivel Normativo Salida Registro Pago Entrega Negociación Nivel de Coordinación Contrato nt Figura 2: Actividades y Estructura Normativa A medida que se pronuncian las ilocuciones durante las actividades, surgen posiciones normativas. Las preferencias y las posiciones normativas se combinan en normas de transición, lo que provoca el flujo de posiciones normativas entre las distintas situaciones normativas. La conexión entre los dos niveles se describe en la sección 6.2. 4. DEFINICIÓN DE CONFLICTOS Los términos conflicto deontico e inconsistencia deontica se han utilizado indistintamente en la literatura. Sin embargo, en este trabajo adoptamos el punto de vista de [7] en el que los autores sugieren que surge una inconsistencia deontica cuando una acción es simultáneamente permitida y prohibida - ya que un permiso no puede ser actuado en consecuencia, no se produce un conflicto real. Sin embargo, las situaciones en que una acción está simultáneamente obligada y prohibida son conflictos deonticos, ya que tanto las obligaciones como las prohibiciones influyen en los comportamientos en conflicto. El contenido de las posiciones normativas en este trabajo son ilocuciones. Por lo tanto, surge un conflicto normativo cuando una ilocución está simultáneamente obligada y prohibida. Proponemos utilizar la noción estándar de unificación [9] para detectar cuándo se superponen una prohibición y un permiso. Por ejemplo, una obligación obli(informar(A1, R1, A2, R2, p(c, X, T)) y una prohibición prh(informar(a1, r1, a2, r2, p(Y, d), T)) están en conflicto ya que se unifican en el punto Capturamos formalmente esta noción: Def. 9. Un conflicto (deontico) surge entre dos posiciones normativas N y N bajo una sustitución Es decir, una prohibición y una obligación están en conflicto si, y sólo si, sus ilocuciones se unifican en virtud de La sustitución, llamada aquí el conjunto de conflictos, unifica los agentes, roles y fórmulas atómicas. Asumimos que unificar es una implementación adecuada de un algoritmo de unificación que i) termina siempre (posiblemente fallando, si no se puede encontrar un unificador); ii) es correcto; y iii) tiene complejidad computacional lineal. Las incoherencias causadas por la misma ilocución, que se permiten y prohíben simultáneamente, pueden formalizarse de manera similar. En este trabajo nos centramos en los conflictos de prohibición/obligación, pero la maquinaria computacional introducida en la Sección 6.1 también puede ser utilizada para detectar inconsistencias de prohibición/permiso, si sustituimos la modalidad obli por per. 5. FORMALIZACIÓN DEL CONFLICTO-FREEDOM En esta sección presentamos algunos conocimientos de fondo sobre CPN asumiendo una comprensión básica de las redes Petri ordinarias. Para detalles técnicos, remitimos al lector a [16]. A continuación, mapeamos los NS a los CPN y analizamos sus propiedades. Los CPN combinan la fuerza de las redes Petri con la fuerza de los lenguajes de programación funcionales. Por un lado, las redes Petri proporcionan los primitivos para la descripción de la sincronización de los procesos concurrentes. Como se observa en [16], los CPN tienen una semántica que se basa en la verdadera concurrencia, en lugar de entrelazarse. En nuestra opinión, es más fácil trabajar con una semántica de verdadera moneda porque es la forma en que prevemos la conexión entre el nivel de coordinación y el nivel normativo de un sistema multi-agente. Por otra parte, los lenguajes de programación funcionales utilizados por los CPN proporcionan los primitivos para la definición de los tipos de datos y la manipulación de sus valores de datos. Por lo tanto, podemos traducir fácilmente expresiones de una estructura normativa. Por último, pero no por ello menos importante, los CPN tienen una semántica bien definida que define inequívocamente el comportamiento de cada CPN. Además, los CPN tienen un gran número de métodos e instrumentos de análisis formales mediante los cuales se pueden demostrar las propiedades de los CPN. En resumen, los CPN nos proporcionan todas las características necesarias para razonar formalmente sobre las estructuras normativas, dado que se proporciona una cartografía adecuada. De acuerdo con las redes Petri, los estados de un CPN están representados por medio de lugares. Pero a diferencia de Petri Nets, cada lugar tiene un tipo de datos asociado determinando el tipo de datos que el lugar puede contener. Un estado de un CPN se llama marca. Consiste en un número de fichas colocadas en los lugares individuales. Cada token lleva un valor de datos que tiene el tipo del lugar correspondiente. En general, un lugar puede contener dos o más tokens con el mismo valor de datos. Por lo tanto, una marca de un CPN es una función que mapea cada lugar en un multi-set2 de tokens del tipo correcto. Uno a menudo se refiere a los valores token como colores token y uno también se refiere a los tipos de datos como conjuntos de colores. Los tipos de un CPN pueden ser arbitrariamente complejos. Las acciones en un PCN están representadas mediante transiciones. Un arco entrante en una transición desde un lugar indica que la transición puede eliminar tokens del lugar correspondiente mientras que un arco saliente indica que la transición puede añadir tokens. El número exacto de tokens y sus valores de datos son determinados por las expresiones de arco, que se codifican utilizando el lenguaje de programación elegido para el CPN. Una transición está habilitada en un CPN si y sólo si todos los 2 A multi-set (o bolsa) es una extensión a la noción de conjunto, permitiendo la posibilidad de múltiples apariencias del mismo elemento. El Sexto Intl. Conjunto Conf. en Agentes Autónomos y Sistemas Multi-Agentes (AAMAS 07) 639 variables en las expresiones de sus arcos entrantes se unen a algunos valores (cada una de estas fijaciones se refiere como un elemento vinculante). Si es así, la transición puede ocurrir eliminando tokens de sus lugares de entrada y añadiendo tokens a sus lugares de salida. Además de las expresiones de arco, es posible conectar una expresión booleana de guardia (con variables) a cada transición. Juntando todos los elementos de arriba obtenemos una definición formal de CPN que se empleará más adelante para propósitos de mapeo. Def. 10. Un CPN es un conjunto finito de tipos no vacíos, también llamados conjuntos de colores; ii) P es un conjunto finito de lugares; iii) T es un conjunto finito de transiciones; iv) A es un conjunto finito de arcos; v) N es una función de nodo definida de A a P × T • T × P; vi) C es una función de color de P a فارسى; vii) G es una De acuerdo con las redes Petri ordinarias, el comportamiento concurrente de un CPN se basa en la noción de paso. Formalmente, un paso es un no vacío y finito multi-set sobre el conjunto de todos los elementos de unión. Deje que el paso S se active en una marca M. Entonces, S puede ocurrir, cambiando la marca M a M. Además, decimos que el marcado M es directamente accesible desde el marcado M por la ocurrencia del paso S, y lo denotamos por M[S > M. Una secuencia de ocurrencia finita es una secuencia finita de pasos y marcas: M1[S1 > M2. . . Mn[Sn > Mn+1 de tal manera que n+N y Mi[Si > Mi+1 . . , n}. El conjunto de todas las marcas posibles alcanzables para una red neta de una marca M se llama su conjunto de alcance, y se denota como R(Net, M). 5.1 Mapeo a redes de Petri de colores Nuestra estructura normativa es un gráfico bipartito etiquetado. Lo mismo puede decirse de una red Petri coloreada. Estamos presentando un mapeo f de uno a otro, con el fin de proporcionar semántica para la estructura normativa y probar las propiedades al respecto mediante el uso de resultados teóricos bien conocidos de trabajo en CPNs. El mapeo f hace uso de correspondencias entre escenas normativas y lugares CPN, transiciones normativas y transiciones CPN y finalmente, entre etiquetas de arco y expresiones de arco CPN. S → P B → T Lin Lout → E El conjunto de tipos es el conjunto singleton que contiene el color NP (es decir. * = {NP}). Este tipo complejo está estructurado de la siguiente manera (utilizamos CPN-ML [4] sintaxis): color NPT = con Obl  Per  Prh  NoMod color IP = con infor  declaramos  offer color UTT = record illp : IP ag1, role1, ag2, role2 : string content : string time : int color NP = Los arcos son trazados casi directamente. A es un conjunto finito de arcos y N es una función de nodo, de tal manera que Aa Aa Ain Aout. N(a) = a. La función de inicialización I se define como I(p) = Δs ( Por último, la función de color C asigna el color NP a cada lugar: C(p) = NP (­p ­P). No estamos haciendo uso de la función de guardia G. En el trabajo futuro, esta función se puede utilizar para modelar restricciones cuando extendemos la expresividad de nuestro lenguaje de norma. 5.2 Propiedades de las estructuras normativas Después de haber definido el mapeo desde las estructuras normativas hasta las redes de Petri coloreadas, ahora analizamos las propiedades de los CPN que nos ayudan a entender la complejidad de la detección de conflictos. Una pregunta que nos gustaría responder es, si en un momento dado, una determinada estructura normativa está libre de conflictos. Tal instantánea de una estructura normativa corresponde a una marca en el CPN cartografiado. Def. 11. Dada una marca Mi, esta marca es libre de conflicto si p  P. np1, np2  Mi(p) tal que np1.mode = Obl y np2.mode = Prh y np1.illoc y np2.illoc unificar bajo una sustitución válida. Otra pregunta interesante sería si se producirá un conflicto a partir de una instantánea del sistema propagando las posiciones normativas. Para responder a esta pregunta, primero traducimos la instantánea de la estructura normativa al CPN correspondiente y luego ejecutamos la secuencia de ocurrencia finita de marcas y pasos, verificando la libertad de conflicto de cada marca a medida que avanzamos. Def. 12. Dada una marca Mi, una secuencia de ocurrencia finita Si, Si+1,..., Sn se llama libre de conflictos, si y sólo si Mi[Si > Mi+1. . . Mn[Sn > Mn+1 y Mk están libres de conflictos para todos los k, de modo que i ≤ k ≤ n + 1. Sin embargo, la cuestión principal que nos gustaría investigar, es si una estructura normativa dada es o no resistente a los conflictos, es decir, si los agentes que promulgan el MAS son capaces de provocar conflictos a través de sus acciones. Tan pronto como se incluye la posibilidad de acciones (o declaraciones) de agentes autónomos, se pierde el determinismo. Después de haber mapeado la estructura normativa a un CPN, ahora añadimos modelos de CPN de las interacciones de agentes. Cada forma de interacción con el agente (es decir, cada \"actividad\") se puede modelar utilizando CPN en la línea de Cost et al. [5]. Estos CPN no determinantes alimentan tokens en el CPN que modela la estructura normativa. Esto lleva a la introducción de no-determinismo en el PCN combinado. La mitad inferior de la figura 3 muestra parte de un modelo CPN de un protocolo de agente donde el arco denotado con 1 representa alguna pronunciación de una ilocución por un agente. La transición de destino de este arco, no sólo mueve un token al siguiente estado de este CPN, sino que también coloca un token en el lugar correspondiente a la escena normativa apropiada en el modelo del CPN de la estructura normativa (a través del arco 2). La transición 3 finalmente podría propagar ese símbolo en forma de una obligación, por ejemplo. Así, a partir de una marca dada, muchas secuencias de ocurrencia diferentes son posibles dependiendo de las acciones de los agentes. Utilizamos el conjunto de alcance R para definir una situación en la que los agentes no pueden causar conflictos. 640 La Sexta Intl. Conjunto Conf. sobre Agentes Autónomos y Sistemas Multi-Agentes (AAMAS 07) Figura 3: Construcción del CPN combinado Def. 13. Dado un N neto, una marca M es resistente a los conflictos si y sólo si todas las marcas en R(N,M) están libres de conflictos. La verificación de la libertad de conflicto de una marca se puede hacer en tiempo polinomio mediante la verificación de todos los lugares del CPN en busca de fichas en conflicto. La libertad de conflicto de una secuencia de ocurrencia en el CPN que representa la estructura normativa también se puede hacer en tiempo polinomio ya que esta secuencia es determinista dada una instantánea. El hecho de que se diseñe o no una estructura normativa corresponde con seguridad a la comprobación de la resistencia a los conflictos de la marca M0 inicial. Ahora, verificar la resistencia al conflicto de una marca se convierte en una tarea muy difícil. Corresponde al problema de la accesibilidad en un CPN: ¿se puede alcanzar un estado o se puede lograr una marca que contenga un conflicto?. Este problema de alcanzabilidad es conocido por ser NP-completo para las redes Petri ordinarias [22] y como las RCP son funcionalmente idénticas, no podemos esperar verificar la resistencia a los conflictos de una estructura normativa fuera de línea en un tiempo razonable. Por lo tanto, se necesitan mecanismos de distribución y tiempo de ejecución para garantizar que una estructura normativa mantenga la coherencia. Presentamos uno de esos mecanismos en la sección siguiente. 6. GESTIÓN DE ESTRUCTURAS NORMATIVAS Una vez detectado un conflicto (según se define en la Sección 4), proponemos emplear al unificador para resolver el conflicto. En nuestro ejemplo, si las variables en prh(inform(a1, r1, a2, r2, p(Y, d), T)) no obtienen los valores especificados en la sustitución Sin embargo, en lugar de computar el conjunto de complementos de una sustitución (que puede ser un conjunto infinito) proponemos anotar la prohibición con el propio unificador y utilizarla para determinar cuáles son las variables de esa prohibición no pueden ser en futuras unificaciones para evitar un conflicto. Por lo tanto denotamos prohibiciones anotadas como prh( ̄I) . . Es un conjunto de unificadores. Las normas anotadas3 se interpretan como constructos deonticos con influencias restringidas, es decir, su efecto (sobre agentes, roles e ilocuciones) ha sido limitado por el conjunto de unificadores. Una prohibición puede estar en conflicto con varias obligaciones en una escena normativa dada s = id, Δ y tenemos que registrar (y posiblemente evitar) todos estos conflictos. Definimos a continuación un algoritmo que garantiza que una posición normativa se añada a una escena normativa de tal manera que no cause ningún conflicto. 3 Aunque proponemos limitar las prohibiciones, el mismo mecanismo puede utilizarse para definir la reducción de obligaciones en su lugar. Estas diferentes políticas dependen de la semántica deontica prevista y de los requisitos de los sistemas abordados. Por ejemplo, algunos MAS pueden exigir que sus agentes no actúen en presencia de conflictos, es decir, que se reduzca la obligación. 6.1 Resolución de conflictos Proponemos una forma de resolver los conflictos normativos mediante la unificación. Detectamos la superposición de las influencias de las normas, es decir. cómo afectan al comportamiento de los agentes afectados, y reducimos la influencia de la posición normativa, mediante el uso adecuado de las anotaciones al comprobar si la norma se aplica a las ilocuciones. El algoritmo mostrado en la Figura 4 muestra cómo mantenemos un conjunto de normas libres de conflictos. Añade una norma dada N a un estado normativo existente, libre de conflictos Δ, obteniendo un nuevo estado normativo resultante Δ que es libre de conflictos, es decir, sus prohibiciones están anotadas con un conjunto de conjuntos de conflictos que indican qué fijaciones para variables deben evitarse para que los conflictos no tengan lugar. algoritmo addNorm(N, Δ) comienza 1 marca de tiempo(N) 2 caso N de 3 per( ̄I): Δ := Δ  {N} 4 prh(I): si N  Δ s.t. Conflict(N, N, Las líneas 4-5 abordan el caso cuando intentamos agregar una prohibición de base a un estado normativo: si entra en conflicto con cualquier obligación, entonces se descarta; de lo contrario se añade al estado normativo. En las líneas 6 a 12 se describe la situación en que la posición normativa que debe añadirse es una prohibición no básica. En este caso, el algoritmo inicializa un conjunto vacío y bucles (línea 9-10) a través de las normas N en el antiguo estado normativo Δ. Después de encontrar uno que entra en conflicto con N, el algoritmo actualiza el valor de la nueva configuración de conflicto (línea 10). Mediante el bucle a través de Δ, somos capaces de comprobar cualquier conflicto entre la nueva prohibición y las obligaciones existentes, construyendo adecuadamente la anotación  que se utilizará al añadir N a Δ en la línea 11. En las líneas 13 a 27 se describe cómo se ajusta una nueva obligación a un estado normativo existente. Hacemos uso de dos conjuntos inicialmente vacíos, temporales, Δ1, Δ2. El algoritmo pasa a través de Δ (líneas 16-25) recogiendo las prohibiciones anotadas N Hay, sin embargo, dos casos a tratar: el de cuando un motivo La Sexta Intl. Conjunto Conf. sobre los agentes autónomos y los sistemas multiagentes (AAMAS 07) se encuentra la prohibición 641 (línea 17), y su excepción, que abarca las prohibiciones no terrestres (línea 20). En ambos casos, la antigua prohibición se almacena en Δ1 (líneas 18 y 23) para ser posteriormente retirada de Δ (línea 26). Sin embargo, en el caso de una prohibición no terrestre, el algoritmo actualiza su anotación de conjuntos de conflicto (línea 24). El bucle garantiza que se lleve a cabo una búsqueda exhaustiva (lineal) a través de un estado normativo, comprobando si la nueva obligación está en conflicto con cualquier prohibición existente, posiblemente actualizando las anotaciones de estas prohibiciones en conflicto. En la línea 26 el algoritmo construye la nueva actualización Δ eliminando las antiguas prohibiciones almacenadas en Δ1 y añadiendo las prohibiciones actualizadas almacenadas en Δ2 (si las hay), así como la nueva obligación N. Nuestro algoritmo propuesto es correcto en que, para una posición normativa dada N y un estado normativo Δ, proporciona un nuevo estado normativo Δ en el que todas las prohibiciones tienen anotaciones que registran cómo se unifican con las obligaciones existentes. Sin embargo, las anotaciones pueden estar vacías: este es el caso cuando tenemos una prohibición básica o una prohibición que no unifica/conflige con ninguna obligación. Los permisos no afectan a nuestro algoritmo y se tratan adecuadamente (línea 3). Cualquier intento de insertar una prohibición de base que entre en conflicto, produce el mismo estado normativo (línea 4). Cuando se añade una nueva obligación, el algoritmo garantiza que se tienen en cuenta todas las prohibiciones (líneas 14 a 27), lo que conduce a la eliminación de las prohibiciones sobre el terreno en conflicto o a la actualización de las anotaciones de las prohibiciones no sobre el terreno. El algoritmo siempre termina: los bucles están sobre un conjunto finito Δ y los conflictos comprueban y establecen operaciones siempre terminan. La complejidad del algoritmo es lineal: el conjunto Δ sólo se examina una vez para cada caso posible de norma que se añade. Al gestionar los estados normativos también es posible que necesitemos eliminar posiciones normativas. Esto es sencillo: los permisos se pueden retirar sin ningún problema; las prohibiciones anotadas también se pueden eliminar sin más consideraciones; sin embargo, las obligaciones requieren algunas tareas domésticas. Cuando se va a eliminar una obligación, debemos verificarla contra todas las prohibiciones anotadas a fin de actualizar sus anotaciones. Aplicamos la comprobación de conflicto y obtenemos un unificador, luego eliminamos este unificador de la anotación de prohibiciones. Invocamos el algoritmo de eliminación como removeNorm(N, Δ): devuelve un nuevo estado normativo Δ en el que N ha sido eliminado, con posibles alteraciones a otras posiciones normativas como se explicó. 6.2 Promulgación de una estructura normativa La promulgación de una estructura normativa equivale a la ejecución paralela y distribuida de escenas normativas y transiciones normativas. A título ilustrativo, describiremos a continuación la interacción entre las situaciones normativas de pago y entrega y la transición normativa que los vincula en la mitad superior de la figura 2. Con este objetivo, considere, por ejemplo, que obl(inform(jules, cliente, rod, acc, pay(copper, 400, 350), T) Δpago y que Δentrega tiene prh(inform(rod,wm, jules, cliente, entregado(Z, Q), T)). Tales estados indican que el cliente Jules está obligado a pagar £400 por 350kg de cobre al contador Rod de acuerdo con la escena normativa de pago, mientras que Rod, asumiendo el papel de gerente de almacén esta vez, está prohibido entregar cualquier cosa al cliente Jules de acuerdo con la escena normativa de entrega. Para cada escena normativa, el proceso de promulgación es el siguiente. En primer lugar, procesa su cola de mensajes entrantes que contiene tres tipos de mensajes: declaraciones de la \"actividad\" a la que está vinculada; y comandos normativos para agregar o eliminar posiciones normativas. Por ejemplo, en nuestro ejemplo, la escena normativa de pago recoge la ilocución I = utt((inform(jules, cliente, varilla, acc, pay(cobre, 400, 350), 35)) para el cliente Jules pendiente de pago por cobre (a través de la flecha A en la figura 2). Las Uterancias son timestamped y subsecuentemente agregadas al estado normativo. Tendríamos Δpayment = Δpayment {I}, en nuestro ejemplo. Al recibir órdenes normativas para agregar o eliminar una posición normativa, la escena normativa invoca el algoritmo de adición o eliminación correspondiente descrito en la Sección 6.1. En segundo lugar, la escena normativa reconoce su cambio de estado al enviar un mensaje desencadenante a cada transición normativa saliente a la que está conectado. En nuestro ejemplo, el escenario normativo de pagos estaría señalando su cambio de estado a la transición normativa nt. Para las transiciones normativas, el proceso funciona de manera diferente. Debido a que cada transición normativa controla el funcionamiento de una sola regla, al recibir un mensaje de activación, encuesta cada escena normativa entrante para sustituciones de los esquemas de ilocución pertinentes en el LHS de su regla. En nuestro ejemplo, nt (responsable de la regla descrita en la Sección 3.4), encuestaría el escenario normativo de pago (vía flecha B) para sustituciones. Al recibir respuestas de ellos (en forma de conjuntos de sustituciones junto con marcas de tiempo), tiene que unificar las sustituciones de cada una de estas escenas normativas. Para cada unificación que encuentra, la regla se activa, y por lo tanto el comando normativo correspondiente se envía a lo largo de la escena normativa de salida. La transición normativa entonces mantiene un seguimiento del mensaje de disparo que envió y de las marcas de tiempo de las posiciones normativas que desencadenó el disparo. Esto se hace para asegurar que las mismas posiciones normativas en el LHS de una regla sólo desencadenen su disparo una vez. En nuestro ejemplo, nt estaría recibiendo  = {X/jules, Y/rod, Z/copper, Q/350} de la escena normativa de pagos. Dado que las substiciones en unifican con la regla nts, la regla es disparada, y el comando normativo add(delivery : obli(rod, wm, jules, client, delivery(copper, 350), T)) es enviado a lo largo de la escena normativa de entrega para obligar a Rod a entregar al cliente Jules 350kg de cobre. Después de eso, la escena normativa de entrega invocaría el algoritmo addNorm de la figura 4 con Δdelivery y N = obli(rod, wm, jules, client, delivered(copper, 350)) como argumentos. 7. TRABAJOS Y CONCLUSIONES RELACIONADOS Nuestras contribuciones en este documento son triples. En primer lugar, introducimos un enfoque para la gestión y el razonamiento de las normas de manera distribuida. Hasta donde sabemos, hay poco trabajo publicado en esta dirección. En [8, 21] se presentan dos idiomas para la aplicación distribuida de las normas en el MAS. Sin embargo, en ambos trabajos, cada agente tiene una interfaz de mensaje local que envía mensajes legales de acuerdo con un conjunto de normas. Dado que estas interfaces son locales para cada agente, las normas sólo pueden expresarse en términos de acciones de ese agente. Se trata de una grave desventaja, por ejemplo. cuando uno necesita activar una obligación para con un agente debido a un cierto mensaje de otro. La segunda contribución es la propuesta de una estructura normativa. La noción es fructífera porque permite la separación de las cuestiones normativas y de procedimiento. La estructura normativa que proponemos evidencia la similitud entre la propagación de posiciones normativas y la propagación 642 La Sexta Intl. Conjunto Conf. sobre Agentes Autónomos y Sistemas Multi-Agentes (AAMAS 07) de tokens en Redes Petri Coloradas. Esa similitud sugiere fácilmente una cartografía entre los dos, y da lugar a un tratamiento analítico conveniente de la estructura normativa, en general, y la complejidad de la detección de conflictos, en particular. La idea de modelar interacciones (en forma de conversaciones) a través de Petri Nets se ha investigado en [18], donde el medio de interacción y los agentes individuales se modelan como subredes de CPN que posteriormente se combinan para su análisis. En [5], las conversaciones se diseñan y analizan por primera vez a nivel de los CPN y posteriormente se traducen en protocolos. Lin et al. [20] mapear esquemas de conversación a CPNs. Según nuestro conocimiento, el uso de esta representación en apoyo de la detección de conflictos en el MAS regulado no ha sido reportado en otros lugares. Por último, presentamos un mecanismo distribuido para resolver los conflictos normativos. Sartor [25] trata los conflictos normativos desde el punto de vista de la teoría jurídica y sugiere una forma de ordenar las normas involucradas. Su idea se implementa en [12], pero requiere un recurso central para el mantenimiento de normas. El enfoque para la detección y resolución de conflictos es una adaptación y extensión del trabajo sobre gráficos de instanciación reportados en [17] y un algoritmo relacionado en [27]. El algoritmo presentado en el presente trabajo puede ser utilizado para administrar estados normativos distribuidos: escenas normativas que suceden en paralelo tienen un estado normativo asociado Δ al que el algoritmo se aplica de forma independiente cada vez que se introduce una nueva norma. Estas tres contribuciones que presentamos en este documento abren muchas posibilidades para el trabajo futuro. Cabe mencionar en primer lugar, que como estrategia amplia estamos trabajando en una generalización de la noción de estructura normativa para hacerla funcionar con diferentes modelos de coordinación, con un contenido deontico más rico y además de diferentes realizaciones computacionales de MAS regulado. Como primer paso en esta dirección estamos aprovechando la disociación entre los protocolos de interacción y la orientación normativa declarativa que la estructura normativa pone a disposición, para proporcionar una capa normativa para las instituciones electrónicas (como se define en [1]). Esperamos que este acoplamiento dote a las instituciones electrónicas de un entorno normativo más flexible y más expresivo. Además, queremos extender nuestro modelo a través de varias direcciones: (1) manejar la negación y las limitaciones como parte del lenguaje de la norma, y en particular la noción de tiempo; (2) dar cabida a múltiples autoridades jerárquicas de normas basadas en roles, en la línea de Cholvy y Cuppens [3] y relaciones de poder como sugiere Carabelea et al. [2]; (3) para captar en el algoritmo de resolución de conflictos diferentes semánticas relacionadas con las nociones deonticas apoyando diferentes axiomaciones (por ejemplo, fuerza relativa de la prohibición frente a la obligación, nociones deonticas predeterminadas, inconsistencias deonticas). En el lado teórico, pretendemos utilizar técnicas de análisis de CPN para caracterizar clases de CPN (por ejemplo, acíclicas, simétricas, etc.) que corresponden a familias de Estructuras Normativas susceptibles a la detección de conflictos fuera de línea. La combinación de estas técnicas junto con nuestros mecanismos de resolución de conflictos en línea pretende dotar a los diseñadores del MAS de la capacidad de incorporar normas en sus sistemas de una manera basada en principios. 8. REFERENCIAS [1] J. L. Arcos, M. Esteva, P. Noriega, J. A. Rodr guez, y C. Sierra. Ingeniería de entornos abiertos con instituciones electrónicas. Journal on Engineering Applications of Artificial Intelligence, 18(2):191-204, 2005. [2] C. Carabelea, O. Boissier, y C. Castelfranchi. Usar el poder social para permitir a los agentes razonar sobre ser parte de un grupo. En el 5o Internat. Taller, EEAT 2004, págs. 166 a 177, 2004. [3] L. Cholvy y F. Cuppens. Solución de conflictos normativos mediante la fusión de funciones. En la Quinta Conferencia Internacional sobre Inteligencia Artificial y Derecho, Washington, Estados Unidos, 1995. [4] S. Christensen y T. B. Haagh. Diseño CPN - vista general de la sintaxis CPN ML. Informe técnico, Universidad de Aarhus, 1996. [5] R. S. Cost, Y. Chen, T. W. Finin, Y. Labrou e Y. Peng. Usando petri redes de colores para modelar la conversación. In Issues in Agent Communication, págs. 178 a 192, Londres, Reino Unido, 2000. [6] F. Dignum. Agentes autónomos con normas. Inteligencia Artificial y Ley, 7(1):69-79, 1999. [7] A. Elhag, J. Breuker y P. Brouwer. Sobre el análisis formal de los conflictos normativos. Información & Comunicaciones. Techn. Ley, 9(3):207-217, Oct. 2000. [8] M. Esteva, W. Vasconcelos, C. Sierra, y J. A. Rodr guez-Aguilar. Consistencia normativa en las instituciones electrónicas. volumen 3171 (LNAI), páginas 494-505. Springer-Verlag, 2004. [9] M. Fitting. Prueba de la lógica de primer orden y del teorema automatizado. Springer-Verlag, Nueva York, Estados Unidos, 1990. [10] N. Fornara, F. Vigan`o y M. Colombetti. Un enfoque impulsado por eventos a las normas en las instituciones artificiales. En el taller AAMAS05: Agentes, normas e instituciones para sistemas multiagente regulados (ANI@REM), Utrecht, 2005. [11] D. Gaertner, P. Noriega y C. Sierra. Ampliación de la arquitectura BDI con compromisos. En Actas del IX Congreso Internacional de la Asociación Catalana de Inteligencia Artificial, 2006. [12] A. Garc a-Camino, P. Noriega, y J.-A. Rodr guez-Aguilar. Un algoritmo para la resolución de conflictos en actividades reguladas compuestas. En el 7o taller Int.Workshop - ESAW 06, 2006. [13] A. Garc a-Camino, J.-A. Rodr guez-Aguilar, C. Sierra y W. Vasconcelos. Una arquitectura distribuida para las Sociedades de Agentes de Normas. En DALT III, volumen 3904 (LNAI), páginas 89 a 105. Springer, 2006. [14] F. Giunchiglia y L. Serafini. Lógicas jerárquicas multilenguaje o: Cómo podemos prescindir de lógicas modales. Inteligencia Artificial, 65(1):29-70, 1994. [15] J. Habermas. La Teoría de la Comunicación Acción, Volumen Uno, La Razón y la Racionalización de la Sociedad. Beacon Press, 1984. [16] K. Jensen. Redes Petri coloreadas: Conceptos básicos, métodos de análisis y usos prácticos (Volumen 1). Springer, 1997. [17] M. Kollingbaum y T. Norman. Estrategias para resolver conflictos de normas con razonamiento práctico. En el Taller de Coordinación de la CEPA en Sociedades de Agentes Emergentes 2004, 2004. [18] J.-L. Koning, G. Francois e Y. Demazeau. Formalización y prevalidación para protocolos de interacción en sistemas multiagente. En ECAI, págs. 298 a 307, 1998. [19] B. Kramer y J. Mylopoulos. Representación del conocimiento. En S. C. Shapiro, editor, Enciclopedia de Inteligencia Artificial, volumen 1, páginas 743-759. John Wiley & Sons, 1992. [20] F. Lin, D. H. Norrie, W. Shen y R. Kremer. Un enfoque basado en esquemas para especificar las políticas de conversación. En Temas de Comunicación de Agentes, págs. 193-204, 2000. [21] N. Minsky. Interacción gobernada por la ley (LGI): Un mecanismo de coordinación y control distribuido (Una introducción y un manual de referencia). Informe técnico, Universidad Rutgers, 2005. [22] T. Murata. Redes Petri: Propiedades, análisis y aplicaciones. Actas del IEEE, 77(4):541-580, 1989. [23] S. Parsons, C. Sierra y N. Jennings. Agentes que razonan y negocian discutiendo. Diario de Lógica y Computación, 8(3):261-292, 1998. [24] A. Ricci y M. Viroli. Artefactos de Coordinación: Una Abstracción Unificante para la Coordinación de Ingeniería Mediada por el Medio Ambiente en MAS. Informatica, 29:433-443, 2005. [25] G. Sartor. Conflictos normativos en el razonamiento jurídico. Inteligencia Artificial y Ley, 1(2-3):209-235, junio de 1992. [26] M. Sergot. Una teoría computacional de posiciones normativas. ACM Trans. Comput. Lógica, 2(4):581-622, 2001. [27] W. W. Vasconcelos, M. Kollingbaum, y T. Norman. Resolver conflictos e incoherencias en las organizaciones virtuales reguladas por normas. En Actas de AAMAS 07, Hawaii, EE.UU., 2007. IFAAMAS. [28] G. H. von Wright. Norma y acción: Una investigación lógica. Routledge y Kegan Paul, Londres, 1963. [29] M. Wooldridge. Una introducción a los sistemas multiagente. John Wiley & Sons, Chichester, Reino Unido, febrero de 2002. El Sexto Intl. Conjunto Conf. sobre agentes autónomos y sistemas de agentes múltiples (AAMAS 07) 643 ",
            "error": [
                ""
            ]
        },
        "scenario": {
            "translated_key": "escenario",
            "translated_annotated_text": "Gestión de Normas Distribuidas en Sistemas Regulados Multi-Agente ∗ Dorian Gaertner Dept. de Computación, Imperial College London, Londres SW7 2AZ, Reino Unido dg00@doc.ic.ac.uk Andrés García-Camino, Pablo Noriega, J.-A. Rodriguez-Aguilar IIIA-CSIC, 08193 Bellaterra, España {andres,pablo,jarážiya.csic.es Wamberto Vasconcelos Dept. de Ciencias de la Computación, Universidad de Aberdeen, Aberdeen AB24 3UE, Reino Unido wvasconcelos@acm.org RESUMEN Las normas son ampliamente reconocidas como un medio de coordinar sistemas multi-agentes. La gestión distribuida de las normas es una cuestión difícil y observamos una falta de realizaciones computacionales verdaderamente distribuidas de los modelos normativos. Con el fin de regular el comportamiento de los agentes autónomos que participan en múltiples actividades relacionadas, proponemos un modelo normativo, la Estructura Normativa (NS), un artefacto que se basa en la propagación de posiciones normativas (obligaciones, prohibiciones, permisos), como consecuencias de las acciones de los agentes. Dentro de un NS, los conflictos pueden surgir debido a la naturaleza dinámica del MAS y la concurrencia de acciones de los agentes. Sin embargo, garantizar la libertad de conflicto de un NS en el momento del diseño es computacionalmente intratable. Demostramos esto formalizando la noción de conflicto, proporcionando un mapeo de los NS en las Redes Petri Coloreadas y tomando prestado los resultados teóricos bien conocidos de ese campo. Dado que se requiere la resolución de conflictos en línea, presentamos un algoritmo tratable que se empleará de forma distribuida. Luego demostramos que este algoritmo es primordial para la promulgación distribuida de un NS. Categorías y sujetos Descriptores I.2.11 [Inteligencia Artificial Distribuida]: Idiomas y estructuras Términos generales Algoritmos, Diseño, Teoría 1. INTRODUCCIÓN Una característica fundamental de los sistemas multiagente abiertos y regulados en los que interactúan agentes autónomos, es que los agentes participantes están destinados a cumplir con las convenciones del sistema. Las normas pueden utilizarse para modelar tales convenciones y, por lo tanto, como medio para regular el comportamiento observable de los agentes [6, 29]. Hay muchas contribuciones sobre el tema de las normas de sociólogos, filósofos y lógicos (por ejemplo, [15, 28]). Sin embargo, hay muy pocas propuestas para la realización computacional de modelos normativos - la forma en que las normas pueden integrarse en el diseño y ejecución de MAS. Los pocos que existen (e.g. [10, 13, 24]), funcionan de manera centralizada, lo que crea cuellos de botella y puntos de fallo únicos. Hasta donde sabemos, ninguna propuesta apoya verdaderamente la promulgación distribuida de entornos normativos. En nuestro documento abordamos ese problema y proponemos medios para manejar los compromisos contradictorios en sistemas abiertos, regulados y multiagentes de manera distribuida. El tipo de MAS regulado que contemplamos consiste en actividades múltiples, simultáneas, relacionadas donde los agentes interactúan. Cada agente puede participar simultáneamente en varias actividades, y cambiar de una actividad a otra. Las acciones de un agente dentro de una actividad pueden tener consecuencias en forma de posiciones normativas (es decir. obligaciones, permisos y prohibiciones) [26] que puedan limitar su comportamiento futuro. Por ejemplo, un agente comprador que se queda sin crédito puede estar prohibido hacer más ofertas, o un agente vendedor está obligado a entregar después de cerrar un acuerdo. Asumimos que los agentes pueden optar por no cumplir todas sus obligaciones y, por lo tanto, pueden ser sancionados por el MAS. Obsérvese que, cuando se distribuyen las actividades, las posiciones normativas deben derivarse de las actividades en las que se generan a aquellas en las que surten efecto. Por ejemplo, la obligación de los vendedores de arriba debe fluir (o propagarse) de una actividad de negociación a una actividad de entrega. Dado que en un MAS abierto y regulado no se pueden incorporar aspectos normativos en el diseño de los agentes, adoptamos la opinión de que el MAS debe complementarse con un conjunto separado de normas que regulen aún más el comportamiento de los agentes participantes. Para modelar la separación de preocupaciones entre el nivel de coordinación (interacciones de agentes) y el nivel normativo (propagación de posiciones normativas), proponemos un artefacto llamado Estructura Normativa (NS). Dentro de un NS pueden surgir conflictos debido a la naturaleza dinámica del MAS y la concurrencia de acciones de los agentes. Por ejemplo, un agente puede estar obligado y prohibido a realizar el 636 978-81-904262-7-5 (RPS) c 2007 IFAAMAS muy mismo acción en una actividad. Dado que la regulación de un MAS implica que los agentes participantes deben ser conscientes de la validez de las acciones que tienen lugar dentro de él, dichos conflictos deben ser identificados y posiblemente resueltos si se necesita una reivindicación de validez para que un agente realice una acción o sea sancionado. Sin embargo, garantizar la libertad de conflicto de un NS en el momento del diseño es computacionalmente intratable. Demostramos esto formalizando la noción de conflicto, proporcionando un mapeo de los NS en las redes de Petri de colores (CPNs) y tomando prestado los resultados teóricos bien conocidos del campo de los CPNs. Creemos que se requiere la detección y resolución de conflictos en línea. Por lo tanto, presentamos un algoritmo tratable para la resolución de conflictos. Este algoritmo es primordial para la promulgación distribuida de un NS. El documento se organiza de la siguiente manera. En la Sección 2 detallamos un \"escenario\" para servir de ejemplo a lo largo del artículo. A continuación, en la Sección 3 definimos formalmente el artefacto de la estructura normativa. Además, en la sección 4 formalizamos la noción de conflicto para posteriormente analizar la complejidad de la detección de conflictos en términos de RCP en la sección 5. En la sección 6 se describe la gestión computacional de los NS describiendo su promulgación y presentando un algoritmo para la resolución de conflictos. Por último, comentamos sobre la labor conexa, sacamos conclusiones e informamos sobre la labor futura en la sección 7. 2. SCENARIO Utilizamos un \"escenario\" de cadena de suministro en el que empresas e individuos se reúnen en un mercado en línea para realizar negocios. El procedimiento de transacción global puede organizarse como seis actividades distribuidas, representadas como nodos en el diagrama de la Figura 1. En ellas participan diferentes participantes cuyo comportamiento se coordina a través de protocolos. En este \"escenario\" los agentes pueden desempeñar uno de los cuatro papeles: marExit Inscripción Pago Entrega Negociación Coordinación Modelo Contrato Figura 1: Estructura de actividad del contador de ketplace (acc), cliente, proveedor (supp) y gerentes de almacén (wm). Las flechas que conectan las actividades representan cómo los agentes pueden moverse de una actividad a otra. Después de registrarse en el mercado, los clientes y proveedores se reúnen en una actividad en la que negocian los términos de su transacción, es decir. los precios, los importes de las mercancías que deban entregarse, los plazos y otros detalles. En la actividad contractual, se establece el pedido y se prepara una factura. El cliente participará entonces en una actividad de pago, verificando su solvencia e instruyendo a su banco a transferir la cantidad correcta de dinero. Mientras tanto, el proveedor se encargará de la entrega de las mercancías (por ejemplo: a través de un administrador de almacén) en la actividad de entrega. Finalmente, los agentes pueden salir del mercado conforme a un protocolo de salida predeterminado. El contable del mercado participa en la mayoría de las actividades como proveedor confiable de herramientas de auditoría. En el resto del trabajo nos basaremos en este \"escenario\" para ilustrar la noción de estructura normativa e ilustrar nuestro enfoque de detección y resolución de conflictos en un entorno distribuido. 3. ESTRUCTURA NORMATIVA En los agentes MASs interactúan según protocolos que naturalmente se distribuyen. Abogamos por que las acciones en uno de esos protocolos puedan tener un efecto en la promulgación de otros protocolos. Algunas acciones pueden ser prohibidas u obligatorias, por ejemplo. Tomamos posiciones normativas para ser obligaciones, prohibiciones y permisos similares al trabajo descrito en [26]. La intención de agregar o eliminar una posición normativa que llamamos comando normativo. Los casos de posiciones normativas en un protocolo también pueden tener consecuencias para otros protocolos1. Para definir nuestro lenguaje de norma y especificar cómo se propagan las posiciones normativas, nos hemos inspirado en sistemas multicontexto [14]. Estos sistemas permiten estructurar el conocimiento en teorías formales distintas y definir las relaciones entre ellos. Las relaciones se expresan como reglas puente - la deducibilidad de las fórmulas en algunos contextos conduce a la deducción de otras fórmulas en otros contextos. Recientemente, estos sistemas se han utilizado con éxito para definir arquitecturas de agentes [11, 23]. La metáfora se traduce a nuestro trabajo actual de la siguiente manera: la expresión de las ilocuciones y/o la existencia de posiciones normativas en algunas escenas normativas conduce a la deducción de posiciones normativas en otras escenas normativas. Nos preocupa la propagación y distribución de posiciones normativas dentro de una red de escenas normativas distribuidas como consecuencia de las acciones de los agentes. Tomamos escenas normativas para ser conjuntos de posiciones normativas y expresiones que están asociadas con un protocolo de interacción subyacente correspondiente a una actividad. En esta sección, presentamos primero un lenguaje simple que capta estos aspectos e introduce formalmente las nociones de escena normativa, regla de transición normativa y estructura normativa. Damos la semántica prevista de estas reglas y mostramos cómo controlar un MAS a través de normas en un ejemplo. 3.1 Conceptos básicos Los componentes básicos de nuestro lenguaje son términos y fórmulas atómicas: Def. 1. Un término, denotado como t, es (i) cualquier constante expresada usando minúsculas (con o sin subíndices), por ejemplo. a, b0, c o ii) cualquier variable expresada utilizando mayúsculas (con o sin subíndices), por ejemplo. X, Y, Zb o iii) cualquier función f(t1,. . . , tn), donde f es un símbolo de función n-ary y t1,.., tn son términos. Algunos ejemplos de términos y funciones son Crédito, precio u oferta (biblia, 30), siendo respectivamente una variable, una constante y una función. Estaremos haciendo uso de identificadores en todo el papel, que son términos constantes y también necesitan la siguiente definición: Def. 2. Una fórmula atómica es cualquier construcción p(t1,. . . , tn), donde p es un símbolo predicado n-ary y t1,. . . , son términos. El conjunto de todas las fórmulas atómicas se denota como Δ. Nos centramos en una clase expresiva de MASs en la que la interacción se lleva a cabo por medio de actos de discurso ilocutionarios intercambiados entre los agentes participantes: Def. 3. I I I son las fórmulas atómicas terrestres que tienen la forma p(ag, r, ag, r, , t) donde p es un elemento de 1 Aquí, abstracto de protocolos y se refieren a ellos genéricamente como actividades. El Sexto Intl. Conjunto Conf. en Agentes Autónomos y Sistemas Multi-Agentes (AAMAS 07) 637 un conjunto de partículas ilocucionarias (por ejemplo: informar, petición, oferta); ag, ag son identificadores de agente; r, r son identificadores de rol; , un término de base arbitrario, es el contenido del mensaje, construido a partir de un lenguaje de contenido compartido; t  N es un sello de tiempo. El significado intuitivo de p(ag, r, ag, r, m, t) es que agente ag jugando rol r enviado mensaje m a agente ag jugando rol r en el momento t. Un ejemplo de una ilocución es informar(ag4, supp, ag3, cliente, offer(wire, 12), 10). A veces es útil referirse a las ilocuciones que no están totalmente fundamentadas, es decir, aquellas que pueden contener variables no instantiated (libres). En la descripción de un protocolo, por ejemplo, los valores precisos del mensaje intercambiado pueden quedar sin especificar. Durante la promulgación de los agentes del protocolo se producirán los valores reales que darán lugar a una ilocución del suelo. Así podemos definir esquemas de ilocución: Def. 4. Un esquema de ilocución ̄I es cualquier fórmula atómica p(ag, r, ag, r, ♥, t) en la que algunos de los términos pueden ser variables o pueden contener variables. 3.2 Definición formal de la noción de NS Primero definimos las escenas normativas de la siguiente manera: Def. 5. Una escena normativa es una tupla s = ids, Δs donde los ids son un identificador de escena y Δs es el conjunto de fórmulas atómicas Por ejemplo, una instantánea del estado de la escena normativa de entrega de nuestro \"escenario\" podría ser representado como: Δs = 8 < : utt(request(sean, client, kev, wm, receive(wire, 200), 20)), utt(accept(kev, wm, seen, client, receive(wire, 30)) 9 = ; Es decir Tenga en cuenta que el estado de una escena normativa Δs evoluciona con el tiempo. Estas escenas normativas están conectadas entre sí a través de transiciones normativas que especifican cómo las expresiones y posiciones normativas en una escena afectan a otras escenas normativas. Como se mencionó anteriormente, las actividades no son independientes, ya que las ilocuciones pronunciadas en algunas de ellas pueden tener un efecto en otras. Las reglas normativas de transición definen las condiciones bajo las cuales se genera un comando normativo. Estas condiciones son declaraciones o posiciones normativas asociadas a un protocolo dado (denominadas por ejemplo. actividad : expresión ) que dan un comando normativo, es decir. la adición o supresión de otra posición normativa, posiblemente relacionada con una actividad diferente. Nuestras reglas de transición están así definidas: Def. 6. Una regla de transición normativa R es de la forma: R ::= V C V ::= ids : D  V, V D ::= N  utt( ̄I) N ::= per( ̄I)  prh( ̄I)  obli( ̄I) C ::= add(ids : N)  remove(ids : N) donde ̄I es un esquema permiso, prohibición u obligación), ids es un identificador de la actividad s y C es un comando normativo. Dotamos nuestro lenguaje con la semántica habitual de los lenguajes basados en reglas [19]. Las reglas trazan una estructura normativa existente a una nueva estructura normativa en la que sólo cambia el estado de las escenas normativas. En las definiciones siguientes nos basamos en el concepto estándar de sustitución [9]. Def. 7. Una transición normativa es un tupla b = idb, rb donde idb es un identificador y rb es una regla de transición normativa. Proponemos ampliar la noción de MAS, regulada por protocolos, con una capa adicional consistente en escenas normativas y transiciones normativas. Esta capa se representa como un gráfico bipartito que llamamos estructura normativa. Una estructura normativa relaciona escenas normativas y transiciones normativas especificando qué posiciones normativas deben generarse o eliminarse en qué escenas normativas. Def. 8. Una estructura normativa es un gráfico bipartito etiquetado NS = Nodos, bordes, Lin, Lout. Nodos es un conjunto de Sâ B donde S es un conjunto de escenas normativas y B es un conjunto de transiciones normativas. Edges es un conjunto Ain Aout donde Ain  S × B es un conjunto de arcos de entrada etiquetados con una fórmula atómica utilizando la función de etiquetado Lin : Ain → D; y Aout  B × S es un conjunto de arcos de salida etiquetados con una posición normativa utilizando la función de etiquetado Lout : Aout → N. Lo siguiente debe contener: 1. Cada fórmula atómica que aparece en el LHS de una regla rb debe ser de la forma (ids : D) donde s â € € € € TM € € € € € € € € € € € € € € € € € € € € € € € € € Ain tal que es = La fórmula atómica que aparece en el RHS de una regla rb debe ser de la forma add(ids : N) o remove(ids : N) donde s â € S y â € Aout tal que aout = (b, s) y Lout (aout ) = N. 3. Ain tal que a = (s, b) y b = idb, rb y Lin (a) = D entonces (ids:D) debe ocurrir en el LHS de rb. 4. Afuera de tal manera que a = (b, s) y b = idb, rb y Lout (a) = N luego add(ids : N) o remove(ids : N) deben ocurrir en el RHS de rb. Los dos primeros puntos aseguran que cada fórmula atómica en el LHS de una regla de transición normativa etiqueta un arco que entra en la transición normativa apropiada en la estructura normativa, y que la fórmula atómica en el RHS etiqueta el arco saliente correspondiente. Los puntos tres y cuatro aseguran que las etiquetas de todos los arcos entrantes se utilicen en el LHS de la regla de transición normativa en la que entran estos arcos, y que las etiquetas de todos los arcos salientes se utilicen en el RHS de la regla de transición normativa que estos arcos dejan. 3.3 Semántica Destinada La semántica formal se definirá mediante un mapeo a Redes Petri Coloradas en la Sección 5.1. Aquí comenzamos a definir la semántica prevista de las reglas normativas de transición describiendo cómo una regla cambia un escenario normativo de una estructura normativa existente que produce una nueva estructura normativa. Cada regla se activa una vez para cada sustitución que unifica el lado izquierdo V de la regla con el estado de las escenas normativas correspondientes. Una fórmula atómica (es decir, una declaración o una posición normativa) si es unificable con una declaración o posición normativa que pertenece al estado del escenario normativo correspondiente. Cada vez que se activa una regla, se lleva a cabo el comando normativo especificado a la derecha de esa regla, con la intención de añadir o eliminar una posición normativa del estado de la escena normativa correspondiente. Sin embargo, la adición no es incondicional, ya que pueden surgir conflictos. Este tema se tratará en las secciones 4 y 6.1. 638 La Sexta Intl. Conjunto Conf. en Agentes Autónomos y Sistemas Multi-Agentes (AAMAS 07) 3.4 Ejemplo En nuestro ejemplo de ejecución tenemos la siguiente regla de transición normativa ejemplar: „ pago : obli(inform(X, cliente, Y, acc, pay(Z, P, Q, T)), pago : utt(inform(X, cliente, Y, acc, pay(Z, P, Q), T)) « entrega : a La norma es una obligación del agente Y (esta vez asumiendo el papel de gerente de almacén wm) de enviar un mensaje al cliente X que el artículo Z ha sido entregado. En la Figura 2 se muestra una representación diagnóstica de cómo se relacionan las actividades y una estructura normativa: Pago Entrega Contrato Nivel Normativo Salida Registro Pago Entrega Negociación Nivel de Coordinación Contrato nt Figura 2: Actividades y Estructura Normativa A medida que se pronuncian las ilocuciones durante las actividades, surgen posiciones normativas. Las preferencias y las posiciones normativas se combinan en normas de transición, lo que provoca el flujo de posiciones normativas entre las distintas situaciones normativas. La conexión entre los dos niveles se describe en la sección 6.2. 4. DEFINICIÓN DE CONFLICTOS Los términos conflicto deontico e inconsistencia deontica se han utilizado indistintamente en la literatura. Sin embargo, en este trabajo adoptamos el punto de vista de [7] en el que los autores sugieren que surge una inconsistencia deontica cuando una acción es simultáneamente permitida y prohibida - ya que un permiso no puede ser actuado en consecuencia, no se produce un conflicto real. Sin embargo, las situaciones en que una acción está simultáneamente obligada y prohibida son conflictos deonticos, ya que tanto las obligaciones como las prohibiciones influyen en los comportamientos en conflicto. El contenido de las posiciones normativas en este trabajo son ilocuciones. Por lo tanto, surge un conflicto normativo cuando una ilocución está simultáneamente obligada y prohibida. Proponemos utilizar la noción estándar de unificación [9] para detectar cuándo se superponen una prohibición y un permiso. Por ejemplo, una obligación obli(informar(A1, R1, A2, R2, p(c, X, T)) y una prohibición prh(informar(a1, r1, a2, r2, p(Y, d), T)) están en conflicto ya que se unifican en el punto Capturamos formalmente esta noción: Def. 9. Un conflicto (deontico) surge entre dos posiciones normativas N y N bajo una sustitución Es decir, una prohibición y una obligación están en conflicto si, y sólo si, sus ilocuciones se unifican en virtud de La sustitución, llamada aquí el conjunto de conflictos, unifica los agentes, roles y fórmulas atómicas. Asumimos que unificar es una implementación adecuada de un algoritmo de unificación que i) termina siempre (posiblemente fallando, si no se puede encontrar un unificador); ii) es correcto; y iii) tiene complejidad computacional lineal. Las incoherencias causadas por la misma ilocución, que se permiten y prohíben simultáneamente, pueden formalizarse de manera similar. En este trabajo nos centramos en los conflictos de prohibición/obligación, pero la maquinaria computacional introducida en la Sección 6.1 también puede ser utilizada para detectar inconsistencias de prohibición/permiso, si sustituimos la modalidad obli por per. 5. FORMALIZACIÓN DEL CONFLICTO-FREEDOM En esta sección presentamos algunos conocimientos de fondo sobre CPN asumiendo una comprensión básica de las redes Petri ordinarias. Para detalles técnicos, remitimos al lector a [16]. A continuación, mapeamos los NS a los CPN y analizamos sus propiedades. Los CPN combinan la fuerza de las redes Petri con la fuerza de los lenguajes de programación funcionales. Por un lado, las redes Petri proporcionan los primitivos para la descripción de la sincronización de los procesos concurrentes. Como se observa en [16], los CPN tienen una semántica que se basa en la verdadera concurrencia, en lugar de entrelazarse. En nuestra opinión, es más fácil trabajar con una semántica de verdadera moneda porque es la forma en que prevemos la conexión entre el nivel de coordinación y el nivel normativo de un sistema multi-agente. Por otra parte, los lenguajes de programación funcionales utilizados por los CPN proporcionan los primitivos para la definición de los tipos de datos y la manipulación de sus valores de datos. Por lo tanto, podemos traducir fácilmente expresiones de una estructura normativa. Por último, pero no por ello menos importante, los CPN tienen una semántica bien definida que define inequívocamente el comportamiento de cada CPN. Además, los CPN tienen un gran número de métodos e instrumentos de análisis formales mediante los cuales se pueden demostrar las propiedades de los CPN. En resumen, los CPN nos proporcionan todas las características necesarias para razonar formalmente sobre las estructuras normativas, dado que se proporciona una cartografía adecuada. De acuerdo con las redes Petri, los estados de un CPN están representados por medio de lugares. Pero a diferencia de Petri Nets, cada lugar tiene un tipo de datos asociado determinando el tipo de datos que el lugar puede contener. Un estado de un CPN se llama marca. Consiste en un número de fichas colocadas en los lugares individuales. Cada token lleva un valor de datos que tiene el tipo del lugar correspondiente. En general, un lugar puede contener dos o más tokens con el mismo valor de datos. Por lo tanto, una marca de un CPN es una función que mapea cada lugar en un multi-set2 de tokens del tipo correcto. Uno a menudo se refiere a los valores token como colores token y uno también se refiere a los tipos de datos como conjuntos de colores. Los tipos de un CPN pueden ser arbitrariamente complejos. Las acciones en un PCN están representadas mediante transiciones. Un arco entrante en una transición desde un lugar indica que la transición puede eliminar tokens del lugar correspondiente mientras que un arco saliente indica que la transición puede añadir tokens. El número exacto de tokens y sus valores de datos son determinados por las expresiones de arco, que se codifican utilizando el lenguaje de programación elegido para el CPN. Una transición está habilitada en un CPN si y sólo si todos los 2 A multi-set (o bolsa) es una extensión a la noción de conjunto, permitiendo la posibilidad de múltiples apariencias del mismo elemento. El Sexto Intl. Conjunto Conf. en Agentes Autónomos y Sistemas Multi-Agentes (AAMAS 07) 639 variables en las expresiones de sus arcos entrantes se unen a algunos valores (cada una de estas fijaciones se refiere como un elemento vinculante). Si es así, la transición puede ocurrir eliminando tokens de sus lugares de entrada y añadiendo tokens a sus lugares de salida. Además de las expresiones de arco, es posible conectar una expresión booleana de guardia (con variables) a cada transición. Juntando todos los elementos de arriba obtenemos una definición formal de CPN que se empleará más adelante para propósitos de mapeo. Def. 10. Un CPN es un conjunto finito de tipos no vacíos, también llamados conjuntos de colores; ii) P es un conjunto finito de lugares; iii) T es un conjunto finito de transiciones; iv) A es un conjunto finito de arcos; v) N es una función de nodo definida de A a P × T • T × P; vi) C es una función de color de P a فارسى; vii) G es una De acuerdo con las redes Petri ordinarias, el comportamiento concurrente de un CPN se basa en la noción de paso. Formalmente, un paso es un no vacío y finito multi-set sobre el conjunto de todos los elementos de unión. Deje que el paso S se active en una marca M. Entonces, S puede ocurrir, cambiando la marca M a M. Además, decimos que el marcado M es directamente accesible desde el marcado M por la ocurrencia del paso S, y lo denotamos por M[S > M. Una secuencia de ocurrencia finita es una secuencia finita de pasos y marcas: M1[S1 > M2. . . Mn[Sn > Mn+1 de tal manera que n+N y Mi[Si > Mi+1 . . , n}. El conjunto de todas las marcas posibles alcanzables para una red neta de una marca M se llama su conjunto de alcance, y se denota como R(Net, M). 5.1 Mapeo a redes de Petri de colores Nuestra estructura normativa es un gráfico bipartito etiquetado. Lo mismo puede decirse de una red Petri coloreada. Estamos presentando un mapeo f de uno a otro, con el fin de proporcionar semántica para la estructura normativa y probar las propiedades al respecto mediante el uso de resultados teóricos bien conocidos de trabajo en CPNs. El mapeo f hace uso de correspondencias entre escenas normativas y lugares CPN, transiciones normativas y transiciones CPN y finalmente, entre etiquetas de arco y expresiones de arco CPN. S → P B → T Lin Lout → E El conjunto de tipos es el conjunto singleton que contiene el color NP (es decir. * = {NP}). Este tipo complejo está estructurado de la siguiente manera (utilizamos CPN-ML [4] sintaxis): color NPT = con Obl  Per  Prh  NoMod color IP = con infor  declaramos  offer color UTT = record illp : IP ag1, role1, ag2, role2 : string content : string time : int color NP = Los arcos son trazados casi directamente. A es un conjunto finito de arcos y N es una función de nodo, de tal manera que Aa Aa Ain Aout. N(a) = a. La función de inicialización I se define como I(p) = Δs ( Por último, la función de color C asigna el color NP a cada lugar: C(p) = NP (­p ­P). No estamos haciendo uso de la función de guardia G. En el trabajo futuro, esta función se puede utilizar para modelar restricciones cuando extendemos la expresividad de nuestro lenguaje de norma. 5.2 Propiedades de las estructuras normativas Después de haber definido el mapeo desde las estructuras normativas hasta las redes de Petri coloreadas, ahora analizamos las propiedades de los CPN que nos ayudan a entender la complejidad de la detección de conflictos. Una pregunta que nos gustaría responder es, si en un momento dado, una determinada estructura normativa está libre de conflictos. Tal instantánea de una estructura normativa corresponde a una marca en el CPN cartografiado. Def. 11. Dada una marca Mi, esta marca es libre de conflicto si p  P. np1, np2  Mi(p) tal que np1.mode = Obl y np2.mode = Prh y np1.illoc y np2.illoc unificar bajo una sustitución válida. Otra pregunta interesante sería si se producirá un conflicto a partir de una instantánea del sistema propagando las posiciones normativas. Para responder a esta pregunta, primero traducimos la instantánea de la estructura normativa al CPN correspondiente y luego ejecutamos la secuencia de ocurrencia finita de marcas y pasos, verificando la libertad de conflicto de cada marca a medida que avanzamos. Def. 12. Dada una marca Mi, una secuencia de ocurrencia finita Si, Si+1,..., Sn se llama libre de conflictos, si y sólo si Mi[Si > Mi+1. . . Mn[Sn > Mn+1 y Mk están libres de conflictos para todos los k, de modo que i ≤ k ≤ n + 1. Sin embargo, la cuestión principal que nos gustaría investigar, es si una estructura normativa dada es o no resistente a los conflictos, es decir, si los agentes que promulgan el MAS son capaces de provocar conflictos a través de sus acciones. Tan pronto como se incluye la posibilidad de acciones (o declaraciones) de agentes autónomos, se pierde el determinismo. Después de haber mapeado la estructura normativa a un CPN, ahora añadimos modelos de CPN de las interacciones de agentes. Cada forma de interacción con el agente (es decir, cada actividad) se puede modelar utilizando CPN en la línea de Cost et al. [5]. Estos CPN no determinantes alimentan tokens en el CPN que modela la estructura normativa. Esto lleva a la introducción de no-determinismo en el PCN combinado. La mitad inferior de la figura 3 muestra parte de un modelo CPN de un protocolo de agente donde el arco denotado con 1 representa alguna pronunciación de una ilocución por un agente. La transición de destino de este arco, no sólo mueve un token al siguiente estado de este CPN, sino que también coloca un token en el lugar correspondiente a la escena normativa apropiada en el modelo del CPN de la estructura normativa (a través del arco 2). La transición 3 finalmente podría propagar ese símbolo en forma de una obligación, por ejemplo. Así, a partir de una marca dada, muchas secuencias de ocurrencia diferentes son posibles dependiendo de las acciones de los agentes. Utilizamos el conjunto de alcance R para definir una situación en la que los agentes no pueden causar conflictos. 640 La Sexta Intl. Conjunto Conf. sobre Agentes Autónomos y Sistemas Multi-Agentes (AAMAS 07) Figura 3: Construcción del CPN combinado Def. 13. Dado un N neto, una marca M es resistente a los conflictos si y sólo si todas las marcas en R(N,M) están libres de conflictos. La verificación de la libertad de conflicto de una marca se puede hacer en tiempo polinomio mediante la verificación de todos los lugares del CPN en busca de fichas en conflicto. La libertad de conflicto de una secuencia de ocurrencia en el CPN que representa la estructura normativa también se puede hacer en tiempo polinomio ya que esta secuencia es determinista dada una instantánea. El hecho de que se diseñe o no una estructura normativa corresponde con seguridad a la comprobación de la resistencia a los conflictos de la marca M0 inicial. Ahora, verificar la resistencia al conflicto de una marca se convierte en una tarea muy difícil. Corresponde al problema de la accesibilidad en un CPN: ¿se puede alcanzar un estado o se puede lograr una marca que contenga un conflicto?. Este problema de alcanzabilidad es conocido por ser NP-completo para las redes Petri ordinarias [22] y como las RCP son funcionalmente idénticas, no podemos esperar verificar la resistencia a los conflictos de una estructura normativa fuera de línea en un tiempo razonable. Por lo tanto, se necesitan mecanismos de distribución y tiempo de ejecución para garantizar que una estructura normativa mantenga la coherencia. Presentamos uno de esos mecanismos en la sección siguiente. 6. GESTIÓN DE ESTRUCTURAS NORMATIVAS Una vez detectado un conflicto (según se define en la Sección 4), proponemos emplear al unificador para resolver el conflicto. En nuestro ejemplo, si las variables en prh(inform(a1, r1, a2, r2, p(Y, d), T)) no obtienen los valores especificados en la sustitución Sin embargo, en lugar de computar el conjunto de complementos de una sustitución (que puede ser un conjunto infinito) proponemos anotar la prohibición con el propio unificador y utilizarla para determinar cuáles son las variables de esa prohibición no pueden ser en futuras unificaciones para evitar un conflicto. Por lo tanto denotamos prohibiciones anotadas como prh( ̄I) . . Es un conjunto de unificadores. Las normas anotadas3 se interpretan como constructos deonticos con influencias restringidas, es decir, su efecto (sobre agentes, roles e ilocuciones) ha sido limitado por el conjunto de unificadores. Una prohibición puede estar en conflicto con varias obligaciones en una escena normativa dada s = id, Δ y tenemos que registrar (y posiblemente evitar) todos estos conflictos. Definimos a continuación un algoritmo que garantiza que una posición normativa se añada a una escena normativa de tal manera que no cause ningún conflicto. 3 Aunque proponemos limitar las prohibiciones, el mismo mecanismo puede utilizarse para definir la reducción de obligaciones en su lugar. Estas diferentes políticas dependen de la semántica deontica prevista y de los requisitos de los sistemas abordados. Por ejemplo, algunos MAS pueden exigir que sus agentes no actúen en presencia de conflictos, es decir, que se reduzca la obligación. 6.1 Resolución de conflictos Proponemos una forma de resolver los conflictos normativos mediante la unificación. Detectamos la superposición de las influencias de las normas, es decir. cómo afectan al comportamiento de los agentes afectados, y reducimos la influencia de la posición normativa, mediante el uso adecuado de las anotaciones al comprobar si la norma se aplica a las ilocuciones. El algoritmo mostrado en la Figura 4 muestra cómo mantenemos un conjunto de normas libres de conflictos. Añade una norma dada N a un estado normativo existente, libre de conflictos Δ, obteniendo un nuevo estado normativo resultante Δ que es libre de conflictos, es decir, sus prohibiciones están anotadas con un conjunto de conjuntos de conflictos que indican qué fijaciones para variables deben evitarse para que los conflictos no tengan lugar. algoritmo addNorm(N, Δ) comienza 1 marca de tiempo(N) 2 caso N de 3 per( ̄I): Δ := Δ  {N} 4 prh(I): si N  Δ s.t. Conflict(N, N, Las líneas 4-5 abordan el caso cuando intentamos agregar una prohibición de base a un estado normativo: si entra en conflicto con cualquier obligación, entonces se descarta; de lo contrario se añade al estado normativo. En las líneas 6 a 12 se describe la situación en que la posición normativa que debe añadirse es una prohibición no básica. En este caso, el algoritmo inicializa un conjunto vacío y bucles (línea 9-10) a través de las normas N en el antiguo estado normativo Δ. Después de encontrar uno que entra en conflicto con N, el algoritmo actualiza el valor de la nueva configuración de conflicto (línea 10). Mediante el bucle a través de Δ, somos capaces de comprobar cualquier conflicto entre la nueva prohibición y las obligaciones existentes, construyendo adecuadamente la anotación  que se utilizará al añadir N a Δ en la línea 11. En las líneas 13 a 27 se describe cómo se ajusta una nueva obligación a un estado normativo existente. Hacemos uso de dos conjuntos inicialmente vacíos, temporales, Δ1, Δ2. El algoritmo pasa a través de Δ (líneas 16-25) recogiendo las prohibiciones anotadas N Hay, sin embargo, dos casos a tratar: el de cuando un motivo La Sexta Intl. Conjunto Conf. sobre los agentes autónomos y los sistemas multiagentes (AAMAS 07) se encuentra la prohibición 641 (línea 17), y su excepción, que abarca las prohibiciones no terrestres (línea 20). En ambos casos, la antigua prohibición se almacena en Δ1 (líneas 18 y 23) para ser posteriormente retirada de Δ (línea 26). Sin embargo, en el caso de una prohibición no terrestre, el algoritmo actualiza su anotación de conjuntos de conflicto (línea 24). El bucle garantiza que se lleve a cabo una búsqueda exhaustiva (lineal) a través de un estado normativo, comprobando si la nueva obligación está en conflicto con cualquier prohibición existente, posiblemente actualizando las anotaciones de estas prohibiciones en conflicto. En la línea 26 el algoritmo construye la nueva actualización Δ eliminando las antiguas prohibiciones almacenadas en Δ1 y añadiendo las prohibiciones actualizadas almacenadas en Δ2 (si las hay), así como la nueva obligación N. Nuestro algoritmo propuesto es correcto en que, para una posición normativa dada N y un estado normativo Δ, proporciona un nuevo estado normativo Δ en el que todas las prohibiciones tienen anotaciones que registran cómo se unifican con las obligaciones existentes. Sin embargo, las anotaciones pueden estar vacías: este es el caso cuando tenemos una prohibición básica o una prohibición que no unifica/conflige con ninguna obligación. Los permisos no afectan a nuestro algoritmo y se tratan adecuadamente (línea 3). Cualquier intento de insertar una prohibición de base que entre en conflicto, produce el mismo estado normativo (línea 4). Cuando se añade una nueva obligación, el algoritmo garantiza que se tienen en cuenta todas las prohibiciones (líneas 14 a 27), lo que conduce a la eliminación de las prohibiciones sobre el terreno en conflicto o a la actualización de las anotaciones de las prohibiciones no sobre el terreno. El algoritmo siempre termina: los bucles están sobre un conjunto finito Δ y los conflictos comprueban y establecen operaciones siempre terminan. La complejidad del algoritmo es lineal: el conjunto Δ sólo se examina una vez para cada caso posible de norma que se añade. Al gestionar los estados normativos también es posible que necesitemos eliminar posiciones normativas. Esto es sencillo: los permisos se pueden retirar sin ningún problema; las prohibiciones anotadas también se pueden eliminar sin más consideraciones; sin embargo, las obligaciones requieren algunas tareas domésticas. Cuando se va a eliminar una obligación, debemos verificarla contra todas las prohibiciones anotadas a fin de actualizar sus anotaciones. Aplicamos la comprobación de conflicto y obtenemos un unificador, luego eliminamos este unificador de la anotación de prohibiciones. Invocamos el algoritmo de eliminación como removeNorm(N, Δ): devuelve un nuevo estado normativo Δ en el que N ha sido eliminado, con posibles alteraciones a otras posiciones normativas como se explicó. 6.2 Promulgación de una estructura normativa La promulgación de una estructura normativa equivale a la ejecución paralela y distribuida de escenas normativas y transiciones normativas. A título ilustrativo, describiremos a continuación la interacción entre las situaciones normativas de pago y entrega y la transición normativa que los vincula en la mitad superior de la figura 2. Con este objetivo, considere, por ejemplo, que obl(inform(jules, cliente, rod, acc, pay(copper, 400, 350), T) Δpago y que Δentrega tiene prh(inform(rod,wm, jules, cliente, entregado(Z, Q), T)). Tales estados indican que el cliente Jules está obligado a pagar £400 por 350kg de cobre al contador Rod de acuerdo con la escena normativa de pago, mientras que Rod, asumiendo el papel de gerente de almacén esta vez, está prohibido entregar cualquier cosa al cliente Jules de acuerdo con la escena normativa de entrega. Para cada escena normativa, el proceso de promulgación es el siguiente. En primer lugar, procesa su cola de mensajes entrantes que contiene tres tipos de mensajes: declaraciones de la actividad a la que está vinculada; y comandos normativos para agregar o eliminar posiciones normativas. Por ejemplo, en nuestro ejemplo, la escena normativa de pago recoge la ilocución I = utt((inform(jules, cliente, varilla, acc, pay(cobre, 400, 350), 35)) para el cliente Jules pendiente de pago por cobre (a través de la flecha A en la figura 2). Las Uterancias son timestamped y subsecuentemente agregadas al estado normativo. Tendríamos Δpayment = Δpayment {I}, en nuestro ejemplo. Al recibir órdenes normativas para agregar o eliminar una posición normativa, la escena normativa invoca el algoritmo de adición o eliminación correspondiente descrito en la Sección 6.1. En segundo lugar, la escena normativa reconoce su cambio de estado al enviar un mensaje desencadenante a cada transición normativa saliente a la que está conectado. En nuestro ejemplo, el escenario normativo de pagos estaría señalando su cambio de estado a la transición normativa nt. Para las transiciones normativas, el proceso funciona de manera diferente. Debido a que cada transición normativa controla el funcionamiento de una sola regla, al recibir un mensaje de activación, encuesta cada escena normativa entrante para sustituciones de los esquemas de ilocución pertinentes en el LHS de su regla. En nuestro ejemplo, nt (responsable de la regla descrita en la Sección 3.4), encuestaría el escenario normativo de pago (vía flecha B) para sustituciones. Al recibir respuestas de ellos (en forma de conjuntos de sustituciones junto con marcas de tiempo), tiene que unificar las sustituciones de cada una de estas escenas normativas. Para cada unificación que encuentra, la regla se activa, y por lo tanto el comando normativo correspondiente se envía a lo largo de la escena normativa de salida. La transición normativa entonces mantiene un seguimiento del mensaje de disparo que envió y de las marcas de tiempo de las posiciones normativas que desencadenó el disparo. Esto se hace para asegurar que las mismas posiciones normativas en el LHS de una regla sólo desencadenen su disparo una vez. En nuestro ejemplo, nt estaría recibiendo  = {X/jules, Y/rod, Z/copper, Q/350} de la escena normativa de pagos. Dado que las substiciones en unifican con la regla nts, la regla es disparada, y el comando normativo add(delivery : obli(rod, wm, jules, client, delivery(copper, 350), T)) es enviado a lo largo de la escena normativa de entrega para obligar a Rod a entregar al cliente Jules 350kg de cobre. Después de eso, la escena normativa de entrega invocaría el algoritmo addNorm de la figura 4 con Δdelivery y N = obli(rod, wm, jules, client, delivered(copper, 350)) como argumentos. 7. TRABAJOS Y CONCLUSIONES RELACIONADOS Nuestras contribuciones en este documento son triples. En primer lugar, introducimos un enfoque para la gestión y el razonamiento de las normas de manera distribuida. Hasta donde sabemos, hay poco trabajo publicado en esta dirección. En [8, 21] se presentan dos idiomas para la aplicación distribuida de las normas en el MAS. Sin embargo, en ambos trabajos, cada agente tiene una interfaz de mensaje local que envía mensajes legales de acuerdo con un conjunto de normas. Dado que estas interfaces son locales para cada agente, las normas sólo pueden expresarse en términos de acciones de ese agente. Se trata de una grave desventaja, por ejemplo. cuando uno necesita activar una obligación para con un agente debido a un cierto mensaje de otro. La segunda contribución es la propuesta de una estructura normativa. La noción es fructífera porque permite la separación de las cuestiones normativas y de procedimiento. La estructura normativa que proponemos evidencia la similitud entre la propagación de posiciones normativas y la propagación 642 La Sexta Intl. Conjunto Conf. sobre Agentes Autónomos y Sistemas Multi-Agentes (AAMAS 07) de tokens en Redes Petri Coloradas. Esa similitud sugiere fácilmente una cartografía entre los dos, y da lugar a un tratamiento analítico conveniente de la estructura normativa, en general, y la complejidad de la detección de conflictos, en particular. La idea de modelar interacciones (en forma de conversaciones) a través de Petri Nets se ha investigado en [18], donde el medio de interacción y los agentes individuales se modelan como subredes de CPN que posteriormente se combinan para su análisis. En [5], las conversaciones se diseñan y analizan por primera vez a nivel de los CPN y posteriormente se traducen en protocolos. Lin et al. [20] mapear esquemas de conversación a CPNs. Según nuestro conocimiento, el uso de esta representación en apoyo de la detección de conflictos en el MAS regulado no ha sido reportado en otros lugares. Por último, presentamos un mecanismo distribuido para resolver los conflictos normativos. Sartor [25] trata los conflictos normativos desde el punto de vista de la teoría jurídica y sugiere una forma de ordenar las normas involucradas. Su idea se implementa en [12], pero requiere un recurso central para el mantenimiento de normas. El enfoque para la detección y resolución de conflictos es una adaptación y extensión del trabajo sobre gráficos de instanciación reportados en [17] y un algoritmo relacionado en [27]. El algoritmo presentado en el presente trabajo puede ser utilizado para administrar estados normativos distribuidos: escenas normativas que suceden en paralelo tienen un estado normativo asociado Δ al que el algoritmo se aplica de forma independiente cada vez que se introduce una nueva norma. Estas tres contribuciones que presentamos en este documento abren muchas posibilidades para el trabajo futuro. Cabe mencionar en primer lugar, que como estrategia amplia estamos trabajando en una generalización de la noción de estructura normativa para hacerla funcionar con diferentes modelos de coordinación, con un contenido deontico más rico y además de diferentes realizaciones computacionales de MAS regulado. Como primer paso en esta dirección estamos aprovechando la disociación entre los protocolos de interacción y la orientación normativa declarativa que la estructura normativa pone a disposición, para proporcionar una capa normativa para las instituciones electrónicas (como se define en [1]). Esperamos que este acoplamiento dote a las instituciones electrónicas de un entorno normativo más flexible y más expresivo. Además, queremos extender nuestro modelo a través de varias direcciones: (1) manejar la negación y las limitaciones como parte del lenguaje de la norma, y en particular la noción de tiempo; (2) dar cabida a múltiples autoridades jerárquicas de normas basadas en roles, en la línea de Cholvy y Cuppens [3] y relaciones de poder como sugiere Carabelea et al. [2]; (3) para captar en el algoritmo de resolución de conflictos diferentes semánticas relacionadas con las nociones deonticas apoyando diferentes axiomaciones (por ejemplo, fuerza relativa de la prohibición frente a la obligación, nociones deonticas predeterminadas, inconsistencias deonticas). En el lado teórico, pretendemos utilizar técnicas de análisis de CPN para caracterizar clases de CPN (por ejemplo, acíclicas, simétricas, etc.) que corresponden a familias de Estructuras Normativas susceptibles a la detección de conflictos fuera de línea. La combinación de estas técnicas junto con nuestros mecanismos de resolución de conflictos en línea pretende dotar a los diseñadores del MAS de la capacidad de incorporar normas en sus sistemas de una manera basada en principios. 8. REFERENCIAS [1] J. L. Arcos, M. Esteva, P. Noriega, J. A. Rodr guez, y C. Sierra. Ingeniería de entornos abiertos con instituciones electrónicas. Journal on Engineering Applications of Artificial Intelligence, 18(2):191-204, 2005. [2] C. Carabelea, O. Boissier, y C. Castelfranchi. Usar el poder social para permitir a los agentes razonar sobre ser parte de un grupo. En el 5o Internat. Taller, EEAT 2004, págs. 166 a 177, 2004. [3] L. Cholvy y F. Cuppens. Solución de conflictos normativos mediante la fusión de funciones. En la Quinta Conferencia Internacional sobre Inteligencia Artificial y Derecho, Washington, Estados Unidos, 1995. [4] S. Christensen y T. B. Haagh. Diseño CPN - vista general de la sintaxis CPN ML. Informe técnico, Universidad de Aarhus, 1996. [5] R. S. Cost, Y. Chen, T. W. Finin, Y. Labrou e Y. Peng. Usando petri redes de colores para modelar la conversación. In Issues in Agent Communication, págs. 178 a 192, Londres, Reino Unido, 2000. [6] F. Dignum. Agentes autónomos con normas. Inteligencia Artificial y Ley, 7(1):69-79, 1999. [7] A. Elhag, J. Breuker y P. Brouwer. Sobre el análisis formal de los conflictos normativos. Información & Comunicaciones. Techn. Ley, 9(3):207-217, Oct. 2000. [8] M. Esteva, W. Vasconcelos, C. Sierra, y J. A. Rodr guez-Aguilar. Consistencia normativa en las instituciones electrónicas. volumen 3171 (LNAI), páginas 494-505. Springer-Verlag, 2004. [9] M. Fitting. Prueba de la lógica de primer orden y del teorema automatizado. Springer-Verlag, Nueva York, Estados Unidos, 1990. [10] N. Fornara, F. Vigan`o y M. Colombetti. Un enfoque impulsado por eventos a las normas en las instituciones artificiales. En el taller AAMAS05: Agentes, normas e instituciones para sistemas multiagente regulados (ANI@REM), Utrecht, 2005. [11] D. Gaertner, P. Noriega y C. Sierra. Ampliación de la arquitectura BDI con compromisos. En Actas del IX Congreso Internacional de la Asociación Catalana de Inteligencia Artificial, 2006. [12] A. Garc a-Camino, P. Noriega, y J.-A. Rodr guez-Aguilar. Un algoritmo para la resolución de conflictos en actividades reguladas compuestas. En el 7o taller Int.Workshop - ESAW 06, 2006. [13] A. Garc a-Camino, J.-A. Rodr guez-Aguilar, C. Sierra y W. Vasconcelos. Una arquitectura distribuida para las Sociedades de Agentes de Normas. En DALT III, volumen 3904 (LNAI), páginas 89 a 105. Springer, 2006. [14] F. Giunchiglia y L. Serafini. Lógicas jerárquicas multilenguaje o: Cómo podemos prescindir de lógicas modales. Inteligencia Artificial, 65(1):29-70, 1994. [15] J. Habermas. La Teoría de la Comunicación Acción, Volumen Uno, La Razón y la Racionalización de la Sociedad. Beacon Press, 1984. [16] K. Jensen. Redes Petri coloreadas: Conceptos básicos, métodos de análisis y usos prácticos (Volumen 1). Springer, 1997. [17] M. Kollingbaum y T. Norman. Estrategias para resolver conflictos de normas con razonamiento práctico. En el Taller de Coordinación de la CEPA en Sociedades de Agentes Emergentes 2004, 2004. [18] J.-L. Koning, G. Francois e Y. Demazeau. Formalización y prevalidación para protocolos de interacción en sistemas multiagente. En ECAI, págs. 298 a 307, 1998. [19] B. Kramer y J. Mylopoulos. Representación del conocimiento. En S. C. Shapiro, editor, Enciclopedia de Inteligencia Artificial, volumen 1, páginas 743-759. John Wiley & Sons, 1992. [20] F. Lin, D. H. Norrie, W. Shen y R. Kremer. Un enfoque basado en esquemas para especificar las políticas de conversación. En Temas de Comunicación de Agentes, págs. 193-204, 2000. [21] N. Minsky. Interacción gobernada por la ley (LGI): Un mecanismo de coordinación y control distribuido (Una introducción y un manual de referencia). Informe técnico, Universidad Rutgers, 2005. [22] T. Murata. Redes Petri: Propiedades, análisis y aplicaciones. Actas del IEEE, 77(4):541-580, 1989. [23] S. Parsons, C. Sierra y N. Jennings. Agentes que razonan y negocian discutiendo. Diario de Lógica y Computación, 8(3):261-292, 1998. [24] A. Ricci y M. Viroli. Artefactos de Coordinación: Una Abstracción Unificante para la Coordinación de Ingeniería Mediada por el Medio Ambiente en MAS. Informatica, 29:433-443, 2005. [25] G. Sartor. Conflictos normativos en el razonamiento jurídico. Inteligencia Artificial y Ley, 1(2-3):209-235, junio de 1992. [26] M. Sergot. Una teoría computacional de posiciones normativas. ACM Trans. Comput. Lógica, 2(4):581-622, 2001. [27] W. W. Vasconcelos, M. Kollingbaum, y T. Norman. Resolver conflictos e incoherencias en las organizaciones virtuales reguladas por normas. En Actas de AAMAS 07, Hawaii, EE.UU., 2007. IFAAMAS. [28] G. H. von Wright. Norma y acción: Una investigación lógica. Routledge y Kegan Paul, Londres, 1963. [29] M. Wooldridge. Una introducción a los sistemas multiagente. John Wiley & Sons, Chichester, Reino Unido, febrero de 2002. El Sexto Intl. Conjunto Conf. sobre agentes autónomos y sistemas de agentes múltiples (AAMAS 07) 643 ",
            "error": [
                ""
            ]
        },
        "normative position": {
            "translated_key": "posición normativa",
            "translated_annotated_text": "Gestión de Normas Distribuidas en Sistemas Regulados Multi-Agente ∗ Dorian Gaertner Dept. de Computación, Imperial College London, Londres SW7 2AZ, Reino Unido dg00@doc.ic.ac.uk Andrés García-Camino, Pablo Noriega, J.-A. Rodriguez-Aguilar IIIA-CSIC, 08193 Bellaterra, España {andres,pablo,jarážiya.csic.es Wamberto Vasconcelos Dept. de Ciencias de la Computación, Universidad de Aberdeen, Aberdeen AB24 3UE, Reino Unido wvasconcelos@acm.org RESUMEN Las normas son ampliamente reconocidas como un medio de coordinar sistemas multi-agentes. La gestión distribuida de las normas es una cuestión difícil y observamos una falta de realizaciones computacionales verdaderamente distribuidas de los modelos normativos. Con el fin de regular el comportamiento de los agentes autónomos que participan en múltiples actividades relacionadas, proponemos un modelo normativo, la Estructura Normativa (NS), un artefacto que se basa en la propagación de posiciones normativas (obligaciones, prohibiciones, permisos), como consecuencias de las acciones de los agentes. Dentro de un NS, los conflictos pueden surgir debido a la naturaleza dinámica del MAS y la concurrencia de acciones de los agentes. Sin embargo, garantizar la libertad de conflicto de un NS en el momento del diseño es computacionalmente intratable. Demostramos esto formalizando la noción de conflicto, proporcionando un mapeo de los NS en las Redes Petri Coloreadas y tomando prestado los resultados teóricos bien conocidos de ese campo. Dado que se requiere la resolución de conflictos en línea, presentamos un algoritmo tratable que se empleará de forma distribuida. Luego demostramos que este algoritmo es primordial para la promulgación distribuida de un NS. Categorías y sujetos Descriptores I.2.11 [Inteligencia Artificial Distribuida]: Idiomas y estructuras Términos generales Algoritmos, Diseño, Teoría 1. INTRODUCCIÓN Una característica fundamental de los sistemas multiagente abiertos y regulados en los que interactúan agentes autónomos, es que los agentes participantes están destinados a cumplir con las convenciones del sistema. Las normas pueden utilizarse para modelar tales convenciones y, por lo tanto, como medio para regular el comportamiento observable de los agentes [6, 29]. Hay muchas contribuciones sobre el tema de las normas de sociólogos, filósofos y lógicos (por ejemplo, [15, 28]). Sin embargo, hay muy pocas propuestas para la realización computacional de modelos normativos - la forma en que las normas pueden integrarse en el diseño y ejecución de MAS. Los pocos que existen (e.g. [10, 13, 24]), funcionan de manera centralizada, lo que crea cuellos de botella y puntos de fallo únicos. Hasta donde sabemos, ninguna propuesta apoya verdaderamente la promulgación distribuida de entornos normativos. En nuestro documento abordamos ese problema y proponemos medios para manejar los compromisos contradictorios en sistemas abiertos, regulados y multiagentes de manera distribuida. El tipo de MAS regulado que contemplamos consiste en actividades múltiples, simultáneas, relacionadas donde los agentes interactúan. Cada agente puede participar simultáneamente en varias actividades, y cambiar de una actividad a otra. Las acciones de un agente dentro de una actividad pueden tener consecuencias en forma de posiciones normativas (es decir. obligaciones, permisos y prohibiciones) [26] que puedan limitar su comportamiento futuro. Por ejemplo, un agente comprador que se queda sin crédito puede estar prohibido hacer más ofertas, o un agente vendedor está obligado a entregar después de cerrar un acuerdo. Asumimos que los agentes pueden optar por no cumplir todas sus obligaciones y, por lo tanto, pueden ser sancionados por el MAS. Obsérvese que, cuando se distribuyen las actividades, las posiciones normativas deben derivarse de las actividades en las que se generan a aquellas en las que surten efecto. Por ejemplo, la obligación de los vendedores de arriba debe fluir (o propagarse) de una actividad de negociación a una actividad de entrega. Dado que en un MAS abierto y regulado no se pueden incorporar aspectos normativos en el diseño de los agentes, adoptamos la opinión de que el MAS debe complementarse con un conjunto separado de normas que regulen aún más el comportamiento de los agentes participantes. Para modelar la separación de preocupaciones entre el nivel de coordinación (interacciones de agentes) y el nivel normativo (propagación de posiciones normativas), proponemos un artefacto llamado Estructura Normativa (NS). Dentro de un NS pueden surgir conflictos debido a la naturaleza dinámica del MAS y la concurrencia de acciones de los agentes. Por ejemplo, un agente puede estar obligado y prohibido a realizar el 636 978-81-904262-7-5 (RPS) c 2007 IFAAMAS muy mismo acción en una actividad. Dado que la regulación de un MAS implica que los agentes participantes deben ser conscientes de la validez de las acciones que tienen lugar dentro de él, dichos conflictos deben ser identificados y posiblemente resueltos si se necesita una reivindicación de validez para que un agente realice una acción o sea sancionado. Sin embargo, garantizar la libertad de conflicto de un NS en el momento del diseño es computacionalmente intratable. Demostramos esto formalizando la noción de conflicto, proporcionando un mapeo de los NS en las redes de Petri de colores (CPNs) y tomando prestado los resultados teóricos bien conocidos del campo de los CPNs. Creemos que se requiere la detección y resolución de conflictos en línea. Por lo tanto, presentamos un algoritmo tratable para la resolución de conflictos. Este algoritmo es primordial para la promulgación distribuida de un NS. El documento se organiza de la siguiente manera. En la Sección 2 detallamos un escenario para servir de ejemplo a lo largo del artículo. A continuación, en la Sección 3 definimos formalmente el artefacto de la estructura normativa. Además, en la sección 4 formalizamos la noción de conflicto para posteriormente analizar la complejidad de la detección de conflictos en términos de RCP en la sección 5. En la sección 6 se describe la gestión computacional de los NS describiendo su promulgación y presentando un algoritmo para la resolución de conflictos. Por último, comentamos sobre la labor conexa, sacamos conclusiones e informamos sobre la labor futura en la sección 7. 2. SCENARIO Utilizamos un escenario de cadena de suministro en el que empresas e individuos se reúnen en un mercado en línea para realizar negocios. El procedimiento de transacción global puede organizarse como seis actividades distribuidas, representadas como nodos en el diagrama de la Figura 1. En ellas participan diferentes participantes cuyo comportamiento se coordina a través de protocolos. En este escenario, los agentes pueden desempeñar uno de los cuatro papeles: marExit Inscripción Pago Entrega Negociación Coordinación Modelo Contrato Figura 1: Estructura de actividad del contador de ketplace (acc), cliente, proveedor (supp) y gerentes de almacén (wm). Las flechas que conectan las actividades representan cómo los agentes pueden moverse de una actividad a otra. Después de registrarse en el mercado, los clientes y proveedores se reúnen en una actividad en la que negocian los términos de su transacción, es decir. los precios, los importes de las mercancías que deban entregarse, los plazos y otros detalles. En la actividad contractual, se establece el pedido y se prepara una factura. El cliente participará entonces en una actividad de pago, verificando su solvencia e instruyendo a su banco a transferir la cantidad correcta de dinero. Mientras tanto, el proveedor se encargará de la entrega de las mercancías (por ejemplo: a través de un administrador de almacén) en la actividad de entrega. Finalmente, los agentes pueden salir del mercado conforme a un protocolo de salida predeterminado. El contable del mercado participa en la mayoría de las actividades como proveedor confiable de herramientas de auditoría. En el resto del documento nos basaremos en este escenario para ilustrar la noción de estructura normativa e ilustrar nuestro enfoque de la detección y resolución de conflictos en un entorno distribuido. 3. ESTRUCTURA NORMATIVA En los agentes MASs interactúan según protocolos que naturalmente se distribuyen. Abogamos por que las acciones en uno de esos protocolos puedan tener un efecto en la promulgación de otros protocolos. Algunas acciones pueden ser prohibidas u obligatorias, por ejemplo. Tomamos posiciones normativas para ser obligaciones, prohibiciones y permisos similares al trabajo descrito en [26]. La intención de agregar o eliminar una \"posición normativa\" que llamamos comando normativo. Los casos de posiciones normativas en un protocolo también pueden tener consecuencias para otros protocolos1. Para definir nuestro lenguaje de norma y especificar cómo se propagan las posiciones normativas, nos hemos inspirado en sistemas multicontexto [14]. Estos sistemas permiten estructurar el conocimiento en teorías formales distintas y definir las relaciones entre ellos. Las relaciones se expresan como reglas puente - la deducibilidad de las fórmulas en algunos contextos conduce a la deducción de otras fórmulas en otros contextos. Recientemente, estos sistemas se han utilizado con éxito para definir arquitecturas de agentes [11, 23]. La metáfora se traduce a nuestro trabajo actual de la siguiente manera: la expresión de las ilocuciones y/o la existencia de posiciones normativas en algunas escenas normativas conduce a la deducción de posiciones normativas en otras escenas normativas. Nos preocupa la propagación y distribución de posiciones normativas dentro de una red de escenas normativas distribuidas como consecuencia de las acciones de los agentes. Tomamos escenas normativas para ser conjuntos de posiciones normativas y expresiones que están asociadas con un protocolo de interacción subyacente correspondiente a una actividad. En esta sección, presentamos primero un lenguaje simple que capta estos aspectos e introduce formalmente las nociones de escena normativa, regla de transición normativa y estructura normativa. Damos la semántica prevista de estas reglas y mostramos cómo controlar un MAS a través de normas en un ejemplo. 3.1 Conceptos básicos Los componentes básicos de nuestro lenguaje son términos y fórmulas atómicas: Def. 1. Un término, denotado como t, es (i) cualquier constante expresada usando minúsculas (con o sin subíndices), por ejemplo. a, b0, c o ii) cualquier variable expresada utilizando mayúsculas (con o sin subíndices), por ejemplo. X, Y, Zb o iii) cualquier función f(t1,. . . , tn), donde f es un símbolo de función n-ary y t1,.., tn son términos. Algunos ejemplos de términos y funciones son Crédito, precio u oferta (biblia, 30), siendo respectivamente una variable, una constante y una función. Estaremos haciendo uso de identificadores en todo el papel, que son términos constantes y también necesitan la siguiente definición: Def. 2. Una fórmula atómica es cualquier construcción p(t1,. . . , tn), donde p es un símbolo predicado n-ary y t1,. . . , son términos. El conjunto de todas las fórmulas atómicas se denota como Δ. Nos centramos en una clase expresiva de MASs en la que la interacción se lleva a cabo por medio de actos de discurso ilocutionarios intercambiados entre los agentes participantes: Def. 3. I I I son las fórmulas atómicas terrestres que tienen la forma p(ag, r, ag, r, , t) donde p es un elemento de 1 Aquí, abstracto de protocolos y se refieren a ellos genéricamente como actividades. El Sexto Intl. Conjunto Conf. en Agentes Autónomos y Sistemas Multi-Agentes (AAMAS 07) 637 un conjunto de partículas ilocucionarias (por ejemplo: informar, petición, oferta); ag, ag son identificadores de agente; r, r son identificadores de rol; , un término de base arbitrario, es el contenido del mensaje, construido a partir de un lenguaje de contenido compartido; t  N es un sello de tiempo. El significado intuitivo de p(ag, r, ag, r, m, t) es que agente ag jugando rol r enviado mensaje m a agente ag jugando rol r en el momento t. Un ejemplo de una ilocución es informar(ag4, supp, ag3, cliente, offer(wire, 12), 10). A veces es útil referirse a las ilocuciones que no están totalmente fundamentadas, es decir, aquellas que pueden contener variables no instantiated (libres). En la descripción de un protocolo, por ejemplo, los valores precisos del mensaje intercambiado pueden quedar sin especificar. Durante la promulgación de los agentes del protocolo se producirán los valores reales que darán lugar a una ilocución del suelo. Así podemos definir esquemas de ilocución: Def. 4. Un esquema de ilocución ̄I es cualquier fórmula atómica p(ag, r, ag, r, ♥, t) en la que algunos de los términos pueden ser variables o pueden contener variables. 3.2 Definición formal de la noción de NS Primero definimos las escenas normativas de la siguiente manera: Def. 5. Una escena normativa es una tupla s = ids, Δs donde los ids son un identificador de escena y Δs es el conjunto de fórmulas atómicas Por ejemplo, una instantánea del estado de la escena normativa de entrega de nuestro escenario podría ser representada como: Δs = 8 < : utt(request(sean, client, kev, wm, receive(wire, 200), 20)), utt(accept(kev, wm, seen, customer, receive(wire, 200), 30)) 9 = ; Es decir, Tenga en cuenta que el estado de una escena normativa Δs evoluciona con el tiempo. Estas escenas normativas están conectadas entre sí a través de transiciones normativas que especifican cómo las expresiones y posiciones normativas en una escena afectan a otras escenas normativas. Como se mencionó anteriormente, las actividades no son independientes, ya que las ilocuciones pronunciadas en algunas de ellas pueden tener un efecto en otras. Las reglas normativas de transición definen las condiciones bajo las cuales se genera un comando normativo. Estas condiciones son declaraciones o posiciones normativas asociadas a un protocolo dado (denominadas por ejemplo. actividad : expresión ) que dan un comando normativo, es decir. la adición o eliminación de otra \"posición normativa\", posiblemente relacionada con una actividad diferente. Nuestras reglas de transición están así definidas: Def. 6. Una regla de transición normativa R es de la forma: R ::= V C V ::= ids : D  V, V D ::= N  utt( ̄I) N ::= per( ̄I)  prh( ̄I)  obli( ̄I) C ::= add(ids : N)  remove(ids : N) donde ̄I es un esquema permiso, prohibición u obligación), ids es un identificador de la actividad s y C es un comando normativo. Dotamos nuestro lenguaje con la semántica habitual de los lenguajes basados en reglas [19]. Las reglas trazan una estructura normativa existente a una nueva estructura normativa en la que sólo cambia el estado de las escenas normativas. En las definiciones siguientes nos basamos en el concepto estándar de sustitución [9]. Def. 7. Una transición normativa es un tupla b = idb, rb donde idb es un identificador y rb es una regla de transición normativa. Proponemos ampliar la noción de MAS, regulada por protocolos, con una capa adicional consistente en escenas normativas y transiciones normativas. Esta capa se representa como un gráfico bipartito que llamamos estructura normativa. Una estructura normativa relaciona escenas normativas y transiciones normativas especificando qué posiciones normativas deben generarse o eliminarse en qué escenas normativas. Def. 8. Una estructura normativa es un gráfico bipartito etiquetado NS = Nodos, bordes, Lin, Lout. Nodos es un conjunto de Sâ B donde S es un conjunto de escenas normativas y B es un conjunto de transiciones normativas. Edges es un conjunto Ain Aout donde Ain  S × B es un conjunto de arcos de entrada etiquetados con una fórmula atómica utilizando la función de etiquetado Lin : Ain → D; y Aout  B × S es un conjunto de arcos de salida etiquetados con una \"posición normativa\" utilizando la función de etiquetado Lout : Aout → N. Lo siguiente debe contener: 1. Cada fórmula atómica que aparece en el LHS de una regla rb debe ser de la forma (ids : D) donde s â € € € € TM € € € € € € € € € € € € € € € € € € € € € € € € € Ain tal que es = La fórmula atómica que aparece en el RHS de una regla rb debe ser de la forma add(ids : N) o remove(ids : N) donde s â € S y â € Aout tal que aout = (b, s) y Lout (aout ) = N. 3. Ain tal que a = (s, b) y b = idb, rb y Lin (a) = D entonces (ids:D) debe ocurrir en el LHS de rb. 4. Afuera de tal manera que a = (b, s) y b = idb, rb y Lout (a) = N luego add(ids : N) o remove(ids : N) deben ocurrir en el RHS de rb. Los dos primeros puntos aseguran que cada fórmula atómica en el LHS de una regla de transición normativa etiqueta un arco que entra en la transición normativa apropiada en la estructura normativa, y que la fórmula atómica en el RHS etiqueta el arco saliente correspondiente. Los puntos tres y cuatro aseguran que las etiquetas de todos los arcos entrantes se utilicen en el LHS de la regla de transición normativa en la que entran estos arcos, y que las etiquetas de todos los arcos salientes se utilicen en el RHS de la regla de transición normativa que estos arcos dejan. 3.3 Semántica Destinada La semántica formal se definirá mediante un mapeo a Redes Petri Coloradas en la Sección 5.1. Aquí comenzamos a definir la semántica prevista de las reglas normativas de transición describiendo cómo una regla cambia un escenario normativo de una estructura normativa existente que produce una nueva estructura normativa. Cada regla se activa una vez para cada sustitución que unifica el lado izquierdo V de la regla con el estado de las escenas normativas correspondientes. Una fórmula atómica (es decir, una expresión o una \"posición normativa\") sostiene si es unificable con una expresión o \"posición normativa\" que pertenece al estado de la escena normativa correspondiente. Cada vez que se activa una regla, se lleva a cabo el comando normativo especificado en el lado derecho de esa regla, con la intención de añadir o eliminar una \"posición normativa\" del estado de la escena normativa correspondiente. Sin embargo, la adición no es incondicional, ya que pueden surgir conflictos. Este tema se tratará en las secciones 4 y 6.1. 638 La Sexta Intl. Conjunto Conf. en Agentes Autónomos y Sistemas Multi-Agentes (AAMAS 07) 3.4 Ejemplo En nuestro ejemplo de ejecución tenemos la siguiente regla de transición normativa ejemplar: „ pago : obli(inform(X, cliente, Y, acc, pay(Z, P, Q, T)), pago : utt(inform(X, cliente, Y, acc, pay(Z, P, Q), T)) « entrega : a La norma es una obligación del agente Y (esta vez asumiendo el papel de gerente de almacén wm) de enviar un mensaje al cliente X que el artículo Z ha sido entregado. En la Figura 2 se muestra una representación diagnóstica de cómo se relacionan las actividades y una estructura normativa: Pago Entrega Contrato Nivel Normativo Salida Registro Pago Entrega Negociación Nivel de Coordinación Contrato nt Figura 2: Actividades y Estructura Normativa A medida que se pronuncian las ilocuciones durante las actividades, surgen posiciones normativas. Las preferencias y las posiciones normativas se combinan en normas de transición, lo que provoca el flujo de posiciones normativas entre las distintas situaciones normativas. La conexión entre los dos niveles se describe en la sección 6.2. 4. DEFINICIÓN DE CONFLICTOS Los términos conflicto deontico e inconsistencia deontica se han utilizado indistintamente en la literatura. Sin embargo, en este trabajo adoptamos el punto de vista de [7] en el que los autores sugieren que surge una inconsistencia deontica cuando una acción es simultáneamente permitida y prohibida - ya que un permiso no puede ser actuado en consecuencia, no se produce un conflicto real. Sin embargo, las situaciones en que una acción está simultáneamente obligada y prohibida son conflictos deonticos, ya que tanto las obligaciones como las prohibiciones influyen en los comportamientos en conflicto. El contenido de las posiciones normativas en este trabajo son ilocuciones. Por lo tanto, surge un conflicto normativo cuando una ilocución está simultáneamente obligada y prohibida. Proponemos utilizar la noción estándar de unificación [9] para detectar cuándo se superponen una prohibición y un permiso. Por ejemplo, una obligación obli(informar(A1, R1, A2, R2, p(c, X, T)) y una prohibición prh(informar(a1, r1, a2, r2, p(Y, d), T)) están en conflicto ya que se unifican en el punto Capturamos formalmente esta noción: Def. 9. Un conflicto (deontico) surge entre dos posiciones normativas N y N bajo una sustitución Es decir, una prohibición y una obligación están en conflicto si, y sólo si, sus ilocuciones se unifican en virtud de La sustitución, llamada aquí el conjunto de conflictos, unifica los agentes, roles y fórmulas atómicas. Asumimos que unificar es una implementación adecuada de un algoritmo de unificación que i) termina siempre (posiblemente fallando, si no se puede encontrar un unificador); ii) es correcto; y iii) tiene complejidad computacional lineal. Las incoherencias causadas por la misma ilocución, que se permiten y prohíben simultáneamente, pueden formalizarse de manera similar. En este trabajo nos centramos en los conflictos de prohibición/obligación, pero la maquinaria computacional introducida en la Sección 6.1 también puede ser utilizada para detectar inconsistencias de prohibición/permiso, si sustituimos la modalidad obli por per. 5. FORMALIZACIÓN DEL CONFLICTO-FREEDOM En esta sección presentamos algunos conocimientos de fondo sobre CPN asumiendo una comprensión básica de las redes Petri ordinarias. Para detalles técnicos, remitimos al lector a [16]. A continuación, mapeamos los NS a los CPN y analizamos sus propiedades. Los CPN combinan la fuerza de las redes Petri con la fuerza de los lenguajes de programación funcionales. Por un lado, las redes Petri proporcionan los primitivos para la descripción de la sincronización de los procesos concurrentes. Como se observa en [16], los CPN tienen una semántica que se basa en la verdadera concurrencia, en lugar de entrelazarse. En nuestra opinión, es más fácil trabajar con una semántica de verdadera moneda porque es la forma en que prevemos la conexión entre el nivel de coordinación y el nivel normativo de un sistema multi-agente. Por otra parte, los lenguajes de programación funcionales utilizados por los CPN proporcionan los primitivos para la definición de los tipos de datos y la manipulación de sus valores de datos. Por lo tanto, podemos traducir fácilmente expresiones de una estructura normativa. Por último, pero no por ello menos importante, los CPN tienen una semántica bien definida que define inequívocamente el comportamiento de cada CPN. Además, los CPN tienen un gran número de métodos e instrumentos de análisis formales mediante los cuales se pueden demostrar las propiedades de los CPN. En resumen, los CPN nos proporcionan todas las características necesarias para razonar formalmente sobre las estructuras normativas, dado que se proporciona una cartografía adecuada. De acuerdo con las redes Petri, los estados de un CPN están representados por medio de lugares. Pero a diferencia de Petri Nets, cada lugar tiene un tipo de datos asociado determinando el tipo de datos que el lugar puede contener. Un estado de un CPN se llama marca. Consiste en un número de fichas colocadas en los lugares individuales. Cada token lleva un valor de datos que tiene el tipo del lugar correspondiente. En general, un lugar puede contener dos o más tokens con el mismo valor de datos. Por lo tanto, una marca de un CPN es una función que mapea cada lugar en un multi-set2 de tokens del tipo correcto. Uno a menudo se refiere a los valores token como colores token y uno también se refiere a los tipos de datos como conjuntos de colores. Los tipos de un CPN pueden ser arbitrariamente complejos. Las acciones en un PCN están representadas mediante transiciones. Un arco entrante en una transición desde un lugar indica que la transición puede eliminar tokens del lugar correspondiente mientras que un arco saliente indica que la transición puede añadir tokens. El número exacto de tokens y sus valores de datos son determinados por las expresiones de arco, que se codifican utilizando el lenguaje de programación elegido para el CPN. Una transición está habilitada en un CPN si y sólo si todos los 2 A multi-set (o bolsa) es una extensión a la noción de conjunto, permitiendo la posibilidad de múltiples apariencias del mismo elemento. El Sexto Intl. Conjunto Conf. en Agentes Autónomos y Sistemas Multi-Agentes (AAMAS 07) 639 variables en las expresiones de sus arcos entrantes se unen a algunos valores (cada una de estas fijaciones se refiere como un elemento vinculante). Si es así, la transición puede ocurrir eliminando tokens de sus lugares de entrada y añadiendo tokens a sus lugares de salida. Además de las expresiones de arco, es posible conectar una expresión booleana de guardia (con variables) a cada transición. Juntando todos los elementos de arriba obtenemos una definición formal de CPN que se empleará más adelante para propósitos de mapeo. Def. 10. Un CPN es un conjunto finito de tipos no vacíos, también llamados conjuntos de colores; ii) P es un conjunto finito de lugares; iii) T es un conjunto finito de transiciones; iv) A es un conjunto finito de arcos; v) N es una función de nodo definida de A a P × T • T × P; vi) C es una función de color de P a فارسى; vii) G es una De acuerdo con las redes Petri ordinarias, el comportamiento concurrente de un CPN se basa en la noción de paso. Formalmente, un paso es un no vacío y finito multi-set sobre el conjunto de todos los elementos de unión. Deje que el paso S se active en una marca M. Entonces, S puede ocurrir, cambiando la marca M a M. Además, decimos que el marcado M es directamente accesible desde el marcado M por la ocurrencia del paso S, y lo denotamos por M[S > M. Una secuencia de ocurrencia finita es una secuencia finita de pasos y marcas: M1[S1 > M2. . . Mn[Sn > Mn+1 de tal manera que n+N y Mi[Si > Mi+1 . . , n}. El conjunto de todas las marcas posibles alcanzables para una red neta de una marca M se llama su conjunto de alcance, y se denota como R(Net, M). 5.1 Mapeo a redes de Petri de colores Nuestra estructura normativa es un gráfico bipartito etiquetado. Lo mismo puede decirse de una red Petri coloreada. Estamos presentando un mapeo f de uno a otro, con el fin de proporcionar semántica para la estructura normativa y probar las propiedades al respecto mediante el uso de resultados teóricos bien conocidos de trabajo en CPNs. El mapeo f hace uso de correspondencias entre escenas normativas y lugares CPN, transiciones normativas y transiciones CPN y finalmente, entre etiquetas de arco y expresiones de arco CPN. S → P B → T Lin Lout → E El conjunto de tipos es el conjunto singleton que contiene el color NP (es decir. * = {NP}). Este tipo complejo está estructurado de la siguiente manera (utilizamos CPN-ML [4] sintaxis): color NPT = con Obl  Per  Prh  NoMod color IP = con infor  declaramos  offer color UTT = record illp : IP ag1, role1, ag2, role2 : string content : string time : int color NP = Los arcos son trazados casi directamente. A es un conjunto finito de arcos y N es una función de nodo, de tal manera que Aa Aa Ain Aout. N(a) = a. La función de inicialización I se define como I(p) = Δs ( Por último, la función de color C asigna el color NP a cada lugar: C(p) = NP (­p ­P). No estamos haciendo uso de la función de guardia G. En el trabajo futuro, esta función se puede utilizar para modelar restricciones cuando extendemos la expresividad de nuestro lenguaje de norma. 5.2 Propiedades de las estructuras normativas Después de haber definido el mapeo desde las estructuras normativas hasta las redes de Petri coloreadas, ahora analizamos las propiedades de los CPN que nos ayudan a entender la complejidad de la detección de conflictos. Una pregunta que nos gustaría responder es, si en un momento dado, una determinada estructura normativa está libre de conflictos. Tal instantánea de una estructura normativa corresponde a una marca en el CPN cartografiado. Def. 11. Dada una marca Mi, esta marca es libre de conflicto si p  P. np1, np2  Mi(p) tal que np1.mode = Obl y np2.mode = Prh y np1.illoc y np2.illoc unificar bajo una sustitución válida. Otra pregunta interesante sería si se producirá un conflicto a partir de una instantánea del sistema propagando las posiciones normativas. Para responder a esta pregunta, primero traducimos la instantánea de la estructura normativa al CPN correspondiente y luego ejecutamos la secuencia de ocurrencia finita de marcas y pasos, verificando la libertad de conflicto de cada marca a medida que avanzamos. Def. 12. Dada una marca Mi, una secuencia de ocurrencia finita Si, Si+1,..., Sn se llama libre de conflictos, si y sólo si Mi[Si > Mi+1. . . Mn[Sn > Mn+1 y Mk están libres de conflictos para todos los k, de modo que i ≤ k ≤ n + 1. Sin embargo, la cuestión principal que nos gustaría investigar, es si una estructura normativa dada es o no resistente a los conflictos, es decir, si los agentes que promulgan el MAS son capaces de provocar conflictos a través de sus acciones. Tan pronto como se incluye la posibilidad de acciones (o declaraciones) de agentes autónomos, se pierde el determinismo. Después de haber mapeado la estructura normativa a un CPN, ahora añadimos modelos de CPN de las interacciones de agentes. Cada forma de interacción con el agente (es decir, cada actividad) se puede modelar utilizando CPN en la línea de Cost et al. [5]. Estos CPN no determinantes alimentan tokens en el CPN que modela la estructura normativa. Esto lleva a la introducción de no-determinismo en el PCN combinado. La mitad inferior de la figura 3 muestra parte de un modelo CPN de un protocolo de agente donde el arco denotado con 1 representa alguna pronunciación de una ilocución por un agente. La transición de destino de este arco, no sólo mueve un token al siguiente estado de este CPN, sino que también coloca un token en el lugar correspondiente a la escena normativa apropiada en el modelo del CPN de la estructura normativa (a través del arco 2). La transición 3 finalmente podría propagar ese símbolo en forma de una obligación, por ejemplo. Así, a partir de una marca dada, muchas secuencias de ocurrencia diferentes son posibles dependiendo de las acciones de los agentes. Utilizamos el conjunto de alcance R para definir una situación en la que los agentes no pueden causar conflictos. 640 La Sexta Intl. Conjunto Conf. sobre Agentes Autónomos y Sistemas Multi-Agentes (AAMAS 07) Figura 3: Construcción del CPN combinado Def. 13. Dado un N neto, una marca M es resistente a los conflictos si y sólo si todas las marcas en R(N,M) están libres de conflictos. La verificación de la libertad de conflicto de una marca se puede hacer en tiempo polinomio mediante la verificación de todos los lugares del CPN en busca de fichas en conflicto. La libertad de conflicto de una secuencia de ocurrencia en el CPN que representa la estructura normativa también se puede hacer en tiempo polinomio ya que esta secuencia es determinista dada una instantánea. El hecho de que se diseñe o no una estructura normativa corresponde con seguridad a la comprobación de la resistencia a los conflictos de la marca M0 inicial. Ahora, verificar la resistencia al conflicto de una marca se convierte en una tarea muy difícil. Corresponde al problema de la accesibilidad en un CPN: ¿se puede alcanzar un estado o se puede lograr una marca que contenga un conflicto?. Este problema de alcanzabilidad es conocido por ser NP-completo para las redes Petri ordinarias [22] y como las RCP son funcionalmente idénticas, no podemos esperar verificar la resistencia a los conflictos de una estructura normativa fuera de línea en un tiempo razonable. Por lo tanto, se necesitan mecanismos de distribución y tiempo de ejecución para garantizar que una estructura normativa mantenga la coherencia. Presentamos uno de esos mecanismos en la sección siguiente. 6. GESTIÓN DE ESTRUCTURAS NORMATIVAS Una vez detectado un conflicto (según se define en la Sección 4), proponemos emplear al unificador para resolver el conflicto. En nuestro ejemplo, si las variables en prh(inform(a1, r1, a2, r2, p(Y, d), T)) no obtienen los valores especificados en la sustitución Sin embargo, en lugar de computar el conjunto de complementos de una sustitución (que puede ser un conjunto infinito) proponemos anotar la prohibición con el propio unificador y utilizarla para determinar cuáles son las variables de esa prohibición no pueden ser en futuras unificaciones para evitar un conflicto. Por lo tanto denotamos prohibiciones anotadas como prh( ̄I) . . Es un conjunto de unificadores. Las normas anotadas3 se interpretan como constructos deonticos con influencias restringidas, es decir, su efecto (sobre agentes, roles e ilocuciones) ha sido limitado por el conjunto de unificadores. Una prohibición puede estar en conflicto con varias obligaciones en una escena normativa dada s = id, Δ y tenemos que registrar (y posiblemente evitar) todos estos conflictos. Definimos a continuación un algoritmo que garantiza que una \"posición normativa\" se añada a una escena normativa de tal manera que no cause ningún conflicto. 3 Aunque proponemos limitar las prohibiciones, el mismo mecanismo puede utilizarse para definir la reducción de obligaciones en su lugar. Estas diferentes políticas dependen de la semántica deontica prevista y de los requisitos de los sistemas abordados. Por ejemplo, algunos MAS pueden exigir que sus agentes no actúen en presencia de conflictos, es decir, que se reduzca la obligación. 6.1 Resolución de conflictos Proponemos una forma de resolver los conflictos normativos mediante la unificación. Detectamos la superposición de las influencias de las normas, es decir. cómo afectan al comportamiento de los agentes afectados, y reducimos la influencia de la \"posición normativa\", mediante el uso adecuado de las anotaciones al comprobar si la norma se aplica a las ilocuciones. El algoritmo mostrado en la Figura 4 muestra cómo mantenemos un conjunto de normas libres de conflictos. Añade una norma dada N a un estado normativo existente, libre de conflictos Δ, obteniendo un nuevo estado normativo resultante Δ que es libre de conflictos, es decir, sus prohibiciones están anotadas con un conjunto de conjuntos de conflictos que indican qué fijaciones para variables deben evitarse para que los conflictos no tengan lugar. algoritmo addNorm(N, Δ) comienza 1 marca de tiempo(N) 2 caso N de 3 per( ̄I): Δ := Δ  {N} 4 prh(I): si N  Δ s.t. Conflict(N, N, Las líneas 4-5 abordan el caso cuando intentamos agregar una prohibición de base a un estado normativo: si entra en conflicto con cualquier obligación, entonces se descarta; de lo contrario se añade al estado normativo. Las líneas 6-12 describen la situación cuando la \"posición normativa\" a añadir es una prohibición no básica. En este caso, el algoritmo inicializa un conjunto vacío y bucles (línea 9-10) a través de las normas N en el antiguo estado normativo Δ. Después de encontrar uno que entra en conflicto con N, el algoritmo actualiza el valor de la nueva configuración de conflicto (línea 10). Mediante el bucle a través de Δ, somos capaces de comprobar cualquier conflicto entre la nueva prohibición y las obligaciones existentes, construyendo adecuadamente la anotación  que se utilizará al añadir N a Δ en la línea 11. En las líneas 13 a 27 se describe cómo se ajusta una nueva obligación a un estado normativo existente. Hacemos uso de dos conjuntos inicialmente vacíos, temporales, Δ1, Δ2. El algoritmo pasa a través de Δ (líneas 16-25) recogiendo las prohibiciones anotadas N Hay, sin embargo, dos casos a tratar: el de cuando un motivo La Sexta Intl. Conjunto Conf. sobre los agentes autónomos y los sistemas multiagentes (AAMAS 07) se encuentra la prohibición 641 (línea 17), y su excepción, que abarca las prohibiciones no terrestres (línea 20). En ambos casos, la antigua prohibición se almacena en Δ1 (líneas 18 y 23) para ser posteriormente retirada de Δ (línea 26). Sin embargo, en el caso de una prohibición no terrestre, el algoritmo actualiza su anotación de conjuntos de conflicto (línea 24). El bucle garantiza que se lleve a cabo una búsqueda exhaustiva (lineal) a través de un estado normativo, comprobando si la nueva obligación está en conflicto con cualquier prohibición existente, posiblemente actualizando las anotaciones de estas prohibiciones en conflicto. En la línea 26 el algoritmo construye la nueva actualización Δ eliminando las antiguas prohibiciones almacenadas en Δ1 y añadiendo las prohibiciones actualizadas almacenadas en Δ2 (si las hay), así como la nueva obligación N. Nuestro algoritmo propuesto es correcto en que, para una determinada \"posición normativa\" N y un estado normativo Δ, proporciona un nuevo estado normativo Δ en el que todas las prohibiciones tienen anotaciones que registran cómo se unifican con las obligaciones existentes. Sin embargo, las anotaciones pueden estar vacías: este es el caso cuando tenemos una prohibición básica o una prohibición que no unifica/conflige con ninguna obligación. Los permisos no afectan a nuestro algoritmo y se tratan adecuadamente (línea 3). Cualquier intento de insertar una prohibición de base que entre en conflicto, produce el mismo estado normativo (línea 4). Cuando se añade una nueva obligación, el algoritmo garantiza que se tienen en cuenta todas las prohibiciones (líneas 14 a 27), lo que conduce a la eliminación de las prohibiciones sobre el terreno en conflicto o a la actualización de las anotaciones de las prohibiciones no sobre el terreno. El algoritmo siempre termina: los bucles están sobre un conjunto finito Δ y los conflictos comprueban y establecen operaciones siempre terminan. La complejidad del algoritmo es lineal: el conjunto Δ sólo se examina una vez para cada caso posible de norma que se añade. Al gestionar los estados normativos también es posible que necesitemos eliminar posiciones normativas. Esto es sencillo: los permisos se pueden retirar sin ningún problema; las prohibiciones anotadas también se pueden eliminar sin más consideraciones; sin embargo, las obligaciones requieren algunas tareas domésticas. Cuando se va a eliminar una obligación, debemos verificarla contra todas las prohibiciones anotadas a fin de actualizar sus anotaciones. Aplicamos la comprobación de conflicto y obtenemos un unificador, luego eliminamos este unificador de la anotación de prohibiciones. Invocamos el algoritmo de eliminación como removeNorm(N, Δ): devuelve un nuevo estado normativo Δ en el que N ha sido eliminado, con posibles alteraciones a otras posiciones normativas como se explicó. 6.2 Promulgación de una estructura normativa La promulgación de una estructura normativa equivale a la ejecución paralela y distribuida de escenas normativas y transiciones normativas. A título ilustrativo, describiremos a continuación la interacción entre las situaciones normativas de pago y entrega y la transición normativa que los vincula en la mitad superior de la figura 2. Con este objetivo, considere, por ejemplo, que obl(inform(jules, cliente, rod, acc, pay(copper, 400, 350), T) Δpago y que Δentrega tiene prh(inform(rod,wm, jules, cliente, entregado(Z, Q), T)). Tales estados indican que el cliente Jules está obligado a pagar £400 por 350kg de cobre al contador Rod de acuerdo con la escena normativa de pago, mientras que Rod, asumiendo el papel de gerente de almacén esta vez, está prohibido entregar cualquier cosa al cliente Jules de acuerdo con la escena normativa de entrega. Para cada escena normativa, el proceso de promulgación es el siguiente. En primer lugar, procesa su cola de mensajes entrantes que contiene tres tipos de mensajes: declaraciones de la actividad a la que está vinculada; y comandos normativos para agregar o eliminar posiciones normativas. Por ejemplo, en nuestro ejemplo, la escena normativa de pago recoge la ilocución I = utt((inform(jules, cliente, varilla, acc, pay(cobre, 400, 350), 35)) para el cliente Jules pendiente de pago por cobre (a través de la flecha A en la figura 2). Las Uterancias son timestamped y subsecuentemente agregadas al estado normativo. Tendríamos Δpayment = Δpayment {I}, en nuestro ejemplo. Al recibir órdenes normativas para agregar o eliminar una \"posición normativa\", la escena normativa invoca el algoritmo de adición o eliminación correspondiente descrito en la Sección 6.1. En segundo lugar, la escena normativa reconoce su cambio de estado al enviar un mensaje desencadenante a cada transición normativa saliente a la que está conectado. En nuestro ejemplo, el escenario normativo de pagos estaría señalando su cambio de estado a la transición normativa nt. Para las transiciones normativas, el proceso funciona de manera diferente. Debido a que cada transición normativa controla el funcionamiento de una sola regla, al recibir un mensaje de activación, encuesta cada escena normativa entrante para sustituciones de los esquemas de ilocución pertinentes en el LHS de su regla. En nuestro ejemplo, nt (responsable de la regla descrita en la Sección 3.4), encuestaría el escenario normativo de pago (vía flecha B) para sustituciones. Al recibir respuestas de ellos (en forma de conjuntos de sustituciones junto con marcas de tiempo), tiene que unificar las sustituciones de cada una de estas escenas normativas. Para cada unificación que encuentra, la regla se activa, y por lo tanto el comando normativo correspondiente se envía a lo largo de la escena normativa de salida. La transición normativa entonces mantiene un seguimiento del mensaje de disparo que envió y de las marcas de tiempo de las posiciones normativas que desencadenó el disparo. Esto se hace para asegurar que las mismas posiciones normativas en el LHS de una regla sólo desencadenen su disparo una vez. En nuestro ejemplo, nt estaría recibiendo  = {X/jules, Y/rod, Z/copper, Q/350} de la escena normativa de pagos. Dado que las substiciones en unifican con la regla nts, la regla es disparada, y el comando normativo add(delivery : obli(rod, wm, jules, client, delivery(copper, 350), T)) es enviado a lo largo de la escena normativa de entrega para obligar a Rod a entregar al cliente Jules 350kg de cobre. Después de eso, la escena normativa de entrega invocaría el algoritmo addNorm de la figura 4 con Δdelivery y N = obli(rod, wm, jules, client, delivered(copper, 350)) como argumentos. 7. TRABAJOS Y CONCLUSIONES RELACIONADOS Nuestras contribuciones en este documento son triples. En primer lugar, introducimos un enfoque para la gestión y el razonamiento de las normas de manera distribuida. Hasta donde sabemos, hay poco trabajo publicado en esta dirección. En [8, 21] se presentan dos idiomas para la aplicación distribuida de las normas en el MAS. Sin embargo, en ambos trabajos, cada agente tiene una interfaz de mensaje local que envía mensajes legales de acuerdo con un conjunto de normas. Dado que estas interfaces son locales para cada agente, las normas sólo pueden expresarse en términos de acciones de ese agente. Se trata de una grave desventaja, por ejemplo. cuando uno necesita activar una obligación para con un agente debido a un cierto mensaje de otro. La segunda contribución es la propuesta de una estructura normativa. La noción es fructífera porque permite la separación de las cuestiones normativas y de procedimiento. La estructura normativa que proponemos evidencia la similitud entre la propagación de posiciones normativas y la propagación 642 La Sexta Intl. Conjunto Conf. sobre Agentes Autónomos y Sistemas Multi-Agentes (AAMAS 07) de tokens en Redes Petri Coloradas. Esa similitud sugiere fácilmente una cartografía entre los dos, y da lugar a un tratamiento analítico conveniente de la estructura normativa, en general, y la complejidad de la detección de conflictos, en particular. La idea de modelar interacciones (en forma de conversaciones) a través de Petri Nets se ha investigado en [18], donde el medio de interacción y los agentes individuales se modelan como subredes de CPN que posteriormente se combinan para su análisis. En [5], las conversaciones se diseñan y analizan por primera vez a nivel de los CPN y posteriormente se traducen en protocolos. Lin et al. [20] mapear esquemas de conversación a CPNs. Según nuestro conocimiento, el uso de esta representación en apoyo de la detección de conflictos en el MAS regulado no ha sido reportado en otros lugares. Por último, presentamos un mecanismo distribuido para resolver los conflictos normativos. Sartor [25] trata los conflictos normativos desde el punto de vista de la teoría jurídica y sugiere una forma de ordenar las normas involucradas. Su idea se implementa en [12], pero requiere un recurso central para el mantenimiento de normas. El enfoque para la detección y resolución de conflictos es una adaptación y extensión del trabajo sobre gráficos de instanciación reportados en [17] y un algoritmo relacionado en [27]. El algoritmo presentado en el presente trabajo puede ser utilizado para administrar estados normativos distribuidos: escenas normativas que suceden en paralelo tienen un estado normativo asociado Δ al que el algoritmo se aplica de forma independiente cada vez que se introduce una nueva norma. Estas tres contribuciones que presentamos en este documento abren muchas posibilidades para el trabajo futuro. Cabe mencionar en primer lugar, que como estrategia amplia estamos trabajando en una generalización de la noción de estructura normativa para hacerla funcionar con diferentes modelos de coordinación, con un contenido deontico más rico y además de diferentes realizaciones computacionales de MAS regulado. Como primer paso en esta dirección estamos aprovechando la disociación entre los protocolos de interacción y la orientación normativa declarativa que la estructura normativa pone a disposición, para proporcionar una capa normativa para las instituciones electrónicas (como se define en [1]). Esperamos que este acoplamiento dote a las instituciones electrónicas de un entorno normativo más flexible y más expresivo. Además, queremos extender nuestro modelo a través de varias direcciones: (1) manejar la negación y las limitaciones como parte del lenguaje de la norma, y en particular la noción de tiempo; (2) dar cabida a múltiples autoridades jerárquicas de normas basadas en roles, en la línea de Cholvy y Cuppens [3] y relaciones de poder como sugiere Carabelea et al. [2]; (3) para captar en el algoritmo de resolución de conflictos diferentes semánticas relacionadas con las nociones deonticas apoyando diferentes axiomaciones (por ejemplo, fuerza relativa de la prohibición frente a la obligación, nociones deonticas predeterminadas, inconsistencias deonticas). En el lado teórico, pretendemos utilizar técnicas de análisis de CPN para caracterizar clases de CPN (por ejemplo, acíclicas, simétricas, etc.) que corresponden a familias de Estructuras Normativas susceptibles a la detección de conflictos fuera de línea. La combinación de estas técnicas junto con nuestros mecanismos de resolución de conflictos en línea pretende dotar a los diseñadores del MAS de la capacidad de incorporar normas en sus sistemas de una manera basada en principios. 8. REFERENCIAS [1] J. L. Arcos, M. Esteva, P. Noriega, J. A. Rodr guez, y C. Sierra. Ingeniería de entornos abiertos con instituciones electrónicas. Journal on Engineering Applications of Artificial Intelligence, 18(2):191-204, 2005. [2] C. Carabelea, O. Boissier, y C. Castelfranchi. Usar el poder social para permitir a los agentes razonar sobre ser parte de un grupo. En el 5o Internat. Taller, EEAT 2004, págs. 166 a 177, 2004. [3] L. Cholvy y F. Cuppens. Solución de conflictos normativos mediante la fusión de funciones. En la Quinta Conferencia Internacional sobre Inteligencia Artificial y Derecho, Washington, Estados Unidos, 1995. [4] S. Christensen y T. B. Haagh. Diseño CPN - vista general de la sintaxis CPN ML. Informe técnico, Universidad de Aarhus, 1996. [5] R. S. Cost, Y. Chen, T. W. Finin, Y. Labrou e Y. Peng. Usando petri redes de colores para modelar la conversación. In Issues in Agent Communication, págs. 178 a 192, Londres, Reino Unido, 2000. [6] F. Dignum. Agentes autónomos con normas. Inteligencia Artificial y Ley, 7(1):69-79, 1999. [7] A. Elhag, J. Breuker y P. Brouwer. Sobre el análisis formal de los conflictos normativos. Información & Comunicaciones. Techn. Ley, 9(3):207-217, Oct. 2000. [8] M. Esteva, W. Vasconcelos, C. Sierra, y J. A. Rodr guez-Aguilar. Consistencia normativa en las instituciones electrónicas. volumen 3171 (LNAI), páginas 494-505. Springer-Verlag, 2004. [9] M. Fitting. Prueba de la lógica de primer orden y del teorema automatizado. Springer-Verlag, Nueva York, Estados Unidos, 1990. [10] N. Fornara, F. Vigan`o y M. Colombetti. Un enfoque impulsado por eventos a las normas en las instituciones artificiales. En el taller AAMAS05: Agentes, normas e instituciones para sistemas multiagente regulados (ANI@REM), Utrecht, 2005. [11] D. Gaertner, P. Noriega y C. Sierra. Ampliación de la arquitectura BDI con compromisos. En Actas del IX Congreso Internacional de la Asociación Catalana de Inteligencia Artificial, 2006. [12] A. Garc a-Camino, P. Noriega, y J.-A. Rodr guez-Aguilar. Un algoritmo para la resolución de conflictos en actividades reguladas compuestas. En el 7o taller Int.Workshop - ESAW 06, 2006. [13] A. Garc a-Camino, J.-A. Rodr guez-Aguilar, C. Sierra y W. Vasconcelos. Una arquitectura distribuida para las Sociedades de Agentes de Normas. En DALT III, volumen 3904 (LNAI), páginas 89 a 105. Springer, 2006. [14] F. Giunchiglia y L. Serafini. Lógicas jerárquicas multilenguaje o: Cómo podemos prescindir de lógicas modales. Inteligencia Artificial, 65(1):29-70, 1994. [15] J. Habermas. La Teoría de la Comunicación Acción, Volumen Uno, La Razón y la Racionalización de la Sociedad. Beacon Press, 1984. [16] K. Jensen. Redes Petri coloreadas: Conceptos básicos, métodos de análisis y usos prácticos (Volumen 1). Springer, 1997. [17] M. Kollingbaum y T. Norman. Estrategias para resolver conflictos de normas con razonamiento práctico. En el Taller de Coordinación de la CEPA en Sociedades de Agentes Emergentes 2004, 2004. [18] J.-L. Koning, G. Francois e Y. Demazeau. Formalización y prevalidación para protocolos de interacción en sistemas multiagente. En ECAI, págs. 298 a 307, 1998. [19] B. Kramer y J. Mylopoulos. Representación del conocimiento. En S. C. Shapiro, editor, Enciclopedia de Inteligencia Artificial, volumen 1, páginas 743-759. John Wiley & Sons, 1992. [20] F. Lin, D. H. Norrie, W. Shen y R. Kremer. Un enfoque basado en esquemas para especificar las políticas de conversación. En Temas de Comunicación de Agentes, págs. 193-204, 2000. [21] N. Minsky. Interacción gobernada por la ley (LGI): Un mecanismo de coordinación y control distribuido (Una introducción y un manual de referencia). Informe técnico, Universidad Rutgers, 2005. [22] T. Murata. Redes Petri: Propiedades, análisis y aplicaciones. Actas del IEEE, 77(4):541-580, 1989. [23] S. Parsons, C. Sierra y N. Jennings. Agentes que razonan y negocian discutiendo. Diario de Lógica y Computación, 8(3):261-292, 1998. [24] A. Ricci y M. Viroli. Artefactos de Coordinación: Una Abstracción Unificante para la Coordinación de Ingeniería Mediada por el Medio Ambiente en MAS. Informatica, 29:433-443, 2005. [25] G. Sartor. Conflictos normativos en el razonamiento jurídico. Inteligencia Artificial y Ley, 1(2-3):209-235, junio de 1992. [26] M. Sergot. Una teoría computacional de posiciones normativas. ACM Trans. Comput. Lógica, 2(4):581-622, 2001. [27] W. W. Vasconcelos, M. Kollingbaum, y T. Norman. Resolver conflictos e incoherencias en las organizaciones virtuales reguladas por normas. En Actas de AAMAS 07, Hawaii, EE.UU., 2007. IFAAMAS. [28] G. H. von Wright. Norma y acción: Una investigación lógica. Routledge y Kegan Paul, Londres, 1963. [29] M. Wooldridge. Una introducción a los sistemas multiagente. John Wiley & Sons, Chichester, Reino Unido, febrero de 2002. El Sexto Intl. Conjunto Conf. sobre agentes autónomos y sistemas de agentes múltiples (AAMAS 07) 643 ",
            "error": [
                ""
            ]
        },
        "protocol": {
            "translated_key": [
                "protocolo",
                "protocolos",
                "protocolo",
                "protocolo",
                "protocolo",
                "protocolos",
                "protocolo",
                "protocolo"
            ],
            "translated_annotated_text": "Gestión de Normas Distribuidas en Sistemas Regulados Multi-Agente ∗ Dorian Gaertner Dept. de Computación, Imperial College London, Londres SW7 2AZ, Reino Unido dg00@doc.ic.ac.uk Andrés García-Camino, Pablo Noriega, J.-A. Rodriguez-Aguilar IIIA-CSIC, 08193 Bellaterra, España {andres,pablo,jarážiya.csic.es Wamberto Vasconcelos Dept. de Ciencias de la Computación, Universidad de Aberdeen, Aberdeen AB24 3UE, Reino Unido wvasconcelos@acm.org RESUMEN Las normas son ampliamente reconocidas como un medio de coordinar sistemas multi-agentes. La gestión distribuida de las normas es una cuestión difícil y observamos una falta de realizaciones computacionales verdaderamente distribuidas de los modelos normativos. Con el fin de regular el comportamiento de los agentes autónomos que participan en múltiples actividades relacionadas, proponemos un modelo normativo, la Estructura Normativa (NS), un artefacto que se basa en la propagación de posiciones normativas (obligaciones, prohibiciones, permisos), como consecuencias de las acciones de los agentes. Dentro de un NS, los conflictos pueden surgir debido a la naturaleza dinámica del MAS y la concurrencia de acciones de los agentes. Sin embargo, garantizar la libertad de conflicto de un NS en el momento del diseño es computacionalmente intratable. Demostramos esto formalizando la noción de conflicto, proporcionando un mapeo de los NS en las Redes Petri Coloreadas y tomando prestado los resultados teóricos bien conocidos de ese campo. Dado que se requiere la resolución de conflictos en línea, presentamos un algoritmo tratable que se empleará de forma distribuida. Luego demostramos que este algoritmo es primordial para la promulgación distribuida de un NS. Categorías y sujetos Descriptores I.2.11 [Inteligencia Artificial Distribuida]: Idiomas y estructuras Términos generales Algoritmos, Diseño, Teoría 1. INTRODUCCIÓN Una característica fundamental de los sistemas multiagente abiertos y regulados en los que interactúan agentes autónomos, es que los agentes participantes están destinados a cumplir con las convenciones del sistema. Las normas pueden utilizarse para modelar tales convenciones y, por lo tanto, como medio para regular el comportamiento observable de los agentes [6, 29]. Hay muchas contribuciones sobre el tema de las normas de sociólogos, filósofos y lógicos (por ejemplo, [15, 28]). Sin embargo, hay muy pocas propuestas para la realización computacional de modelos normativos - la forma en que las normas pueden integrarse en el diseño y ejecución de MAS. Los pocos que existen (e.g. [10, 13, 24]), funcionan de manera centralizada, lo que crea cuellos de botella y puntos de fallo únicos. Hasta donde sabemos, ninguna propuesta apoya verdaderamente la promulgación distribuida de entornos normativos. En nuestro documento abordamos ese problema y proponemos medios para manejar los compromisos contradictorios en sistemas abiertos, regulados y multiagentes de manera distribuida. El tipo de MAS regulado que contemplamos consiste en actividades múltiples, simultáneas, relacionadas donde los agentes interactúan. Cada agente puede participar simultáneamente en varias actividades, y cambiar de una actividad a otra. Las acciones de un agente dentro de una actividad pueden tener consecuencias en forma de posiciones normativas (es decir. obligaciones, permisos y prohibiciones) [26] que puedan limitar su comportamiento futuro. Por ejemplo, un agente comprador que se queda sin crédito puede estar prohibido hacer más ofertas, o un agente vendedor está obligado a entregar después de cerrar un acuerdo. Asumimos que los agentes pueden optar por no cumplir todas sus obligaciones y, por lo tanto, pueden ser sancionados por el MAS. Obsérvese que, cuando se distribuyen las actividades, las posiciones normativas deben derivarse de las actividades en las que se generan a aquellas en las que surten efecto. Por ejemplo, la obligación de los vendedores de arriba debe fluir (o propagarse) de una actividad de negociación a una actividad de entrega. Dado que en un MAS abierto y regulado no se pueden incorporar aspectos normativos en el diseño de los agentes, adoptamos la opinión de que el MAS debe complementarse con un conjunto separado de normas que regulen aún más el comportamiento de los agentes participantes. Para modelar la separación de preocupaciones entre el nivel de coordinación (interacciones de agentes) y el nivel normativo (propagación de posiciones normativas), proponemos un artefacto llamado Estructura Normativa (NS). Dentro de un NS pueden surgir conflictos debido a la naturaleza dinámica del MAS y la concurrencia de acciones de los agentes. Por ejemplo, un agente puede estar obligado y prohibido a realizar el 636 978-81-904262-7-5 (RPS) c 2007 IFAAMAS muy mismo acción en una actividad. Dado que la regulación de un MAS implica que los agentes participantes deben ser conscientes de la validez de las acciones que tienen lugar dentro de él, dichos conflictos deben ser identificados y posiblemente resueltos si se necesita una reivindicación de validez para que un agente realice una acción o sea sancionado. Sin embargo, garantizar la libertad de conflicto de un NS en el momento del diseño es computacionalmente intratable. Demostramos esto formalizando la noción de conflicto, proporcionando un mapeo de los NS en las redes de Petri de colores (CPNs) y tomando prestado los resultados teóricos bien conocidos del campo de los CPNs. Creemos que se requiere la detección y resolución de conflictos en línea. Por lo tanto, presentamos un algoritmo tratable para la resolución de conflictos. Este algoritmo es primordial para la promulgación distribuida de un NS. El documento se organiza de la siguiente manera. En la Sección 2 detallamos un escenario para servir de ejemplo a lo largo del artículo. A continuación, en la Sección 3 definimos formalmente el artefacto de la estructura normativa. Además, en la sección 4 formalizamos la noción de conflicto para posteriormente analizar la complejidad de la detección de conflictos en términos de RCP en la sección 5. En la sección 6 se describe la gestión computacional de los NS describiendo su promulgación y presentando un algoritmo para la resolución de conflictos. Por último, comentamos sobre la labor conexa, sacamos conclusiones e informamos sobre la labor futura en la sección 7. 2. SCENARIO Utilizamos un escenario de cadena de suministro en el que empresas e individuos se reúnen en un mercado en línea para realizar negocios. El procedimiento de transacción global puede organizarse como seis actividades distribuidas, representadas como nodos en el diagrama de la Figura 1. En ellas participan diferentes participantes cuyo comportamiento se coordina a través de protocolos. En este escenario, los agentes pueden desempeñar uno de los cuatro papeles: marExit Inscripción Pago Entrega Negociación Coordinación Modelo Contrato Figura 1: Estructura de actividad del contador de ketplace (acc), cliente, proveedor (supp) y gerentes de almacén (wm). Las flechas que conectan las actividades representan cómo los agentes pueden moverse de una actividad a otra. Después de registrarse en el mercado, los clientes y proveedores se reúnen en una actividad en la que negocian los términos de su transacción, es decir. los precios, los importes de las mercancías que deban entregarse, los plazos y otros detalles. En la actividad contractual, se establece el pedido y se prepara una factura. El cliente participará entonces en una actividad de pago, verificando su solvencia e instruyendo a su banco a transferir la cantidad correcta de dinero. Mientras tanto, el proveedor se encargará de la entrega de las mercancías (por ejemplo: a través de un administrador de almacén) en la actividad de entrega. Por último, los agentes pueden salir del mercado conforme a un \"protocolo\" de salida predeterminado. El contable del mercado participa en la mayoría de las actividades como proveedor confiable de herramientas de auditoría. En el resto del documento nos basaremos en este escenario para ilustrar la noción de estructura normativa e ilustrar nuestro enfoque de la detección y resolución de conflictos en un entorno distribuido. 3. ESTRUCTURA NORMATIVA En los agentes MASs interactúan según protocolos que naturalmente se distribuyen. Abogamos por que las acciones en uno de esos \"protocolos\" puedan tener un efecto en la promulgación de otros protocolos. Algunas acciones pueden ser prohibidas u obligatorias, por ejemplo. Tomamos posiciones normativas para ser obligaciones, prohibiciones y permisos similares al trabajo descrito en [26]. La intención de agregar o eliminar una posición normativa que llamamos comando normativo. Los casos de posiciones normativas en un \"protocolo\" también pueden tener consecuencias para otros protocolos1. Para definir nuestro lenguaje de norma y especificar cómo se propagan las posiciones normativas, nos hemos inspirado en sistemas multicontexto [14]. Estos sistemas permiten estructurar el conocimiento en teorías formales distintas y definir las relaciones entre ellos. Las relaciones se expresan como reglas puente - la deducibilidad de las fórmulas en algunos contextos conduce a la deducción de otras fórmulas en otros contextos. Recientemente, estos sistemas se han utilizado con éxito para definir arquitecturas de agentes [11, 23]. La metáfora se traduce a nuestro trabajo actual de la siguiente manera: la expresión de las ilocuciones y/o la existencia de posiciones normativas en algunas escenas normativas conduce a la deducción de posiciones normativas en otras escenas normativas. Nos preocupa la propagación y distribución de posiciones normativas dentro de una red de escenas normativas distribuidas como consecuencia de las acciones de los agentes. Tomamos escenas normativas para ser conjuntos de posiciones normativas y expresiones que se asocian con una interacción subyacente \"protocolo\" correspondiente a una actividad. En esta sección, presentamos primero un lenguaje simple que capta estos aspectos e introduce formalmente las nociones de escena normativa, regla de transición normativa y estructura normativa. Damos la semántica prevista de estas reglas y mostramos cómo controlar un MAS a través de normas en un ejemplo. 3.1 Conceptos básicos Los componentes básicos de nuestro lenguaje son términos y fórmulas atómicas: Def. 1. Un término, denotado como t, es (i) cualquier constante expresada usando minúsculas (con o sin subíndices), por ejemplo. a, b0, c o ii) cualquier variable expresada utilizando mayúsculas (con o sin subíndices), por ejemplo. X, Y, Zb o iii) cualquier función f(t1,. . . , tn), donde f es un símbolo de función n-ary y t1,.., tn son términos. Algunos ejemplos de términos y funciones son Crédito, precio u oferta (biblia, 30), siendo respectivamente una variable, una constante y una función. Estaremos haciendo uso de identificadores en todo el papel, que son términos constantes y también necesitan la siguiente definición: Def. 2. Una fórmula atómica es cualquier construcción p(t1,. . . , tn), donde p es un símbolo predicado n-ary y t1,. . . , son términos. El conjunto de todas las fórmulas atómicas se denota como Δ. Nos centramos en una clase expresiva de MASs en la que la interacción se lleva a cabo por medio de actos de discurso ilocutionarios intercambiados entre los agentes participantes: Def. 3. I I I son las fórmulas atómicas terrestres que tienen la forma p(ag, r, ag, r, , t) donde p es un elemento de 1 Aquí, abstracto de protocolos y se refieren a ellos genéricamente como actividades. El Sexto Intl. Conjunto Conf. en Agentes Autónomos y Sistemas Multi-Agentes (AAMAS 07) 637 un conjunto de partículas ilocucionarias (por ejemplo: informar, petición, oferta); ag, ag son identificadores de agente; r, r son identificadores de rol; , un término de base arbitrario, es el contenido del mensaje, construido a partir de un lenguaje de contenido compartido; t  N es un sello de tiempo. El significado intuitivo de p(ag, r, ag, r, m, t) es que agente ag jugando rol r enviado mensaje m a agente ag jugando rol r en el momento t. Un ejemplo de una ilocución es informar(ag4, supp, ag3, cliente, offer(wire, 12), 10). A veces es útil referirse a las ilocuciones que no están totalmente fundamentadas, es decir, aquellas que pueden contener variables no instantiated (libres). En la descripción de un \"protocolo\", por ejemplo, los valores precisos del mensaje intercambiado se pueden dejar sin especificar. Durante la promulgación de los agentes \"protocolos\" se producirán los valores reales que darán lugar a una ilocución del suelo. Así podemos definir esquemas de ilocución: Def. 4. Un esquema de ilocución ̄I es cualquier fórmula atómica p(ag, r, ag, r, ♥, t) en la que algunos de los términos pueden ser variables o pueden contener variables. 3.2 Definición formal de la noción de NS Primero definimos las escenas normativas de la siguiente manera: Def. 5. Una escena normativa es una tupla s = ids, Δs donde los ids son un identificador de escena y Δs es el conjunto de fórmulas atómicas Por ejemplo, una instantánea del estado de la escena normativa de entrega de nuestro escenario podría ser representada como: Δs = 8 < : utt(request(sean, client, kev, wm, receive(wire, 200), 20)), utt(accept(kev, wm, seen, customer, receive(wire, 200), 30)) 9 = ; Es decir, Tenga en cuenta que el estado de una escena normativa Δs evoluciona con el tiempo. Estas escenas normativas están conectadas entre sí a través de transiciones normativas que especifican cómo las expresiones y posiciones normativas en una escena afectan a otras escenas normativas. Como se mencionó anteriormente, las actividades no son independientes, ya que las ilocuciones pronunciadas en algunas de ellas pueden tener un efecto en otras. Las reglas normativas de transición definen las condiciones bajo las cuales se genera un comando normativo. Estas condiciones son declaraciones o posiciones normativas asociadas con un determinado \"protocolo\" (denominadas por ejemplo. actividad : expresión ) que dan un comando normativo, es decir. la adición o supresión de otra posición normativa, posiblemente relacionada con una actividad diferente. Nuestras reglas de transición están así definidas: Def. 6. Una regla de transición normativa R es de la forma: R ::= V C V ::= ids : D  V, V D ::= N  utt( ̄I) N ::= per( ̄I)  prh( ̄I)  obli( ̄I) C ::= add(ids : N)  remove(ids : N) donde ̄I es un esquema permiso, prohibición u obligación), ids es un identificador de la actividad s y C es un comando normativo. Dotamos nuestro lenguaje con la semántica habitual de los lenguajes basados en reglas [19]. Las reglas trazan una estructura normativa existente a una nueva estructura normativa en la que sólo cambia el estado de las escenas normativas. En las definiciones siguientes nos basamos en el concepto estándar de sustitución [9]. Def. 7. Una transición normativa es un tupla b = idb, rb donde idb es un identificador y rb es una regla de transición normativa. Proponemos ampliar la noción de MAS, regulada por protocolos, con una capa adicional consistente en escenas normativas y transiciones normativas. Esta capa se representa como un gráfico bipartito que llamamos estructura normativa. Una estructura normativa relaciona escenas normativas y transiciones normativas especificando qué posiciones normativas deben generarse o eliminarse en qué escenas normativas. Def. 8. Una estructura normativa es un gráfico bipartito etiquetado NS = Nodos, bordes, Lin, Lout. Nodos es un conjunto de Sâ B donde S es un conjunto de escenas normativas y B es un conjunto de transiciones normativas. Edges es un conjunto Ain Aout donde Ain  S × B es un conjunto de arcos de entrada etiquetados con una fórmula atómica utilizando la función de etiquetado Lin : Ain → D; y Aout  B × S es un conjunto de arcos de salida etiquetados con una posición normativa utilizando la función de etiquetado Lout : Aout → N. Lo siguiente debe contener: 1. Cada fórmula atómica que aparece en el LHS de una regla rb debe ser de la forma (ids : D) donde s â € € € € TM € € € € € € € € € € € € € € € € € € € € € € € € € Ain tal que es = La fórmula atómica que aparece en el RHS de una regla rb debe ser de la forma add(ids : N) o remove(ids : N) donde s â € S y â € Aout tal que aout = (b, s) y Lout (aout ) = N. 3. Ain tal que a = (s, b) y b = idb, rb y Lin (a) = D entonces (ids:D) debe ocurrir en el LHS de rb. 4. Afuera de tal manera que a = (b, s) y b = idb, rb y Lout (a) = N luego add(ids : N) o remove(ids : N) deben ocurrir en el RHS de rb. Los dos primeros puntos aseguran que cada fórmula atómica en el LHS de una regla de transición normativa etiqueta un arco que entra en la transición normativa apropiada en la estructura normativa, y que la fórmula atómica en el RHS etiqueta el arco saliente correspondiente. Los puntos tres y cuatro aseguran que las etiquetas de todos los arcos entrantes se utilicen en el LHS de la regla de transición normativa en la que entran estos arcos, y que las etiquetas de todos los arcos salientes se utilicen en el RHS de la regla de transición normativa que estos arcos dejan. 3.3 Semántica Destinada La semántica formal se definirá mediante un mapeo a Redes Petri Coloradas en la Sección 5.1. Aquí comenzamos a definir la semántica prevista de las reglas normativas de transición describiendo cómo una regla cambia un escenario normativo de una estructura normativa existente que produce una nueva estructura normativa. Cada regla se activa una vez para cada sustitución que unifica el lado izquierdo V de la regla con el estado de las escenas normativas correspondientes. Una fórmula atómica (es decir, una declaración o una posición normativa) si es unificable con una declaración o posición normativa que pertenece al estado del escenario normativo correspondiente. Cada vez que se activa una regla, se lleva a cabo el comando normativo especificado a la derecha de esa regla, con la intención de añadir o eliminar una posición normativa del estado de la escena normativa correspondiente. Sin embargo, la adición no es incondicional, ya que pueden surgir conflictos. Este tema se tratará en las secciones 4 y 6.1. 638 La Sexta Intl. Conjunto Conf. en Agentes Autónomos y Sistemas Multi-Agentes (AAMAS 07) 3.4 Ejemplo En nuestro ejemplo de ejecución tenemos la siguiente regla de transición normativa ejemplar: „ pago : obli(inform(X, cliente, Y, acc, pay(Z, P, Q, T)), pago : utt(inform(X, cliente, Y, acc, pay(Z, P, Q), T)) « entrega : a La norma es una obligación del agente Y (esta vez asumiendo el papel de gerente de almacén wm) de enviar un mensaje al cliente X que el artículo Z ha sido entregado. En la Figura 2 se muestra una representación diagnóstica de cómo se relacionan las actividades y una estructura normativa: Pago Entrega Contrato Nivel Normativo Salida Registro Pago Entrega Negociación Nivel de Coordinación Contrato nt Figura 2: Actividades y Estructura Normativa A medida que se pronuncian las ilocuciones durante las actividades, surgen posiciones normativas. Las preferencias y las posiciones normativas se combinan en normas de transición, lo que provoca el flujo de posiciones normativas entre las distintas situaciones normativas. La conexión entre los dos niveles se describe en la sección 6.2. 4. DEFINICIÓN DE CONFLICTOS Los términos conflicto deontico e inconsistencia deontica se han utilizado indistintamente en la literatura. Sin embargo, en este trabajo adoptamos el punto de vista de [7] en el que los autores sugieren que surge una inconsistencia deontica cuando una acción es simultáneamente permitida y prohibida - ya que un permiso no puede ser actuado en consecuencia, no se produce un conflicto real. Sin embargo, las situaciones en que una acción está simultáneamente obligada y prohibida son conflictos deonticos, ya que tanto las obligaciones como las prohibiciones influyen en los comportamientos en conflicto. El contenido de las posiciones normativas en este trabajo son ilocuciones. Por lo tanto, surge un conflicto normativo cuando una ilocución está simultáneamente obligada y prohibida. Proponemos utilizar la noción estándar de unificación [9] para detectar cuándo se superponen una prohibición y un permiso. Por ejemplo, una obligación obli(informar(A1, R1, A2, R2, p(c, X, T)) y una prohibición prh(informar(a1, r1, a2, r2, p(Y, d), T)) están en conflicto ya que se unifican en el punto Capturamos formalmente esta noción: Def. 9. Un conflicto (deontico) surge entre dos posiciones normativas N y N bajo una sustitución Es decir, una prohibición y una obligación están en conflicto si, y sólo si, sus ilocuciones se unifican en virtud de La sustitución, llamada aquí el conjunto de conflictos, unifica los agentes, roles y fórmulas atómicas. Asumimos que unificar es una implementación adecuada de un algoritmo de unificación que i) termina siempre (posiblemente fallando, si no se puede encontrar un unificador); ii) es correcto; y iii) tiene complejidad computacional lineal. Las incoherencias causadas por la misma ilocución, que se permiten y prohíben simultáneamente, pueden formalizarse de manera similar. En este trabajo nos centramos en los conflictos de prohibición/obligación, pero la maquinaria computacional introducida en la Sección 6.1 también puede ser utilizada para detectar inconsistencias de prohibición/permiso, si sustituimos la modalidad obli por per. 5. FORMALIZACIÓN DEL CONFLICTO-FREEDOM En esta sección presentamos algunos conocimientos de fondo sobre CPN asumiendo una comprensión básica de las redes Petri ordinarias. Para detalles técnicos, remitimos al lector a [16]. A continuación, mapeamos los NS a los CPN y analizamos sus propiedades. Los CPN combinan la fuerza de las redes Petri con la fuerza de los lenguajes de programación funcionales. Por un lado, las redes Petri proporcionan los primitivos para la descripción de la sincronización de los procesos concurrentes. Como se observa en [16], los CPN tienen una semántica que se basa en la verdadera concurrencia, en lugar de entrelazarse. En nuestra opinión, es más fácil trabajar con una semántica de verdadera moneda porque es la forma en que prevemos la conexión entre el nivel de coordinación y el nivel normativo de un sistema multi-agente. Por otra parte, los lenguajes de programación funcionales utilizados por los CPN proporcionan los primitivos para la definición de los tipos de datos y la manipulación de sus valores de datos. Por lo tanto, podemos traducir fácilmente expresiones de una estructura normativa. Por último, pero no por ello menos importante, los CPN tienen una semántica bien definida que define inequívocamente el comportamiento de cada CPN. Además, los CPN tienen un gran número de métodos e instrumentos de análisis formales mediante los cuales se pueden demostrar las propiedades de los CPN. En resumen, los CPN nos proporcionan todas las características necesarias para razonar formalmente sobre las estructuras normativas, dado que se proporciona una cartografía adecuada. De acuerdo con las redes Petri, los estados de un CPN están representados por medio de lugares. Pero a diferencia de Petri Nets, cada lugar tiene un tipo de datos asociado determinando el tipo de datos que el lugar puede contener. Un estado de un CPN se llama marca. Consiste en un número de fichas colocadas en los lugares individuales. Cada token lleva un valor de datos que tiene el tipo del lugar correspondiente. En general, un lugar puede contener dos o más tokens con el mismo valor de datos. Por lo tanto, una marca de un CPN es una función que mapea cada lugar en un multi-set2 de tokens del tipo correcto. Uno a menudo se refiere a los valores token como colores token y uno también se refiere a los tipos de datos como conjuntos de colores. Los tipos de un CPN pueden ser arbitrariamente complejos. Las acciones en un PCN están representadas mediante transiciones. Un arco entrante en una transición desde un lugar indica que la transición puede eliminar tokens del lugar correspondiente mientras que un arco saliente indica que la transición puede añadir tokens. El número exacto de tokens y sus valores de datos son determinados por las expresiones de arco, que se codifican utilizando el lenguaje de programación elegido para el CPN. Una transición está habilitada en un CPN si y sólo si todos los 2 A multi-set (o bolsa) es una extensión a la noción de conjunto, permitiendo la posibilidad de múltiples apariencias del mismo elemento. El Sexto Intl. Conjunto Conf. en Agentes Autónomos y Sistemas Multi-Agentes (AAMAS 07) 639 variables en las expresiones de sus arcos entrantes se unen a algunos valores (cada una de estas fijaciones se refiere como un elemento vinculante). Si es así, la transición puede ocurrir eliminando tokens de sus lugares de entrada y añadiendo tokens a sus lugares de salida. Además de las expresiones de arco, es posible conectar una expresión booleana de guardia (con variables) a cada transición. Juntando todos los elementos de arriba obtenemos una definición formal de CPN que se empleará más adelante para propósitos de mapeo. Def. 10. Un CPN es un conjunto finito de tipos no vacíos, también llamados conjuntos de colores; ii) P es un conjunto finito de lugares; iii) T es un conjunto finito de transiciones; iv) A es un conjunto finito de arcos; v) N es una función de nodo definida de A a P × T • T × P; vi) C es una función de color de P a فارسى; vii) G es una De acuerdo con las redes Petri ordinarias, el comportamiento concurrente de un CPN se basa en la noción de paso. Formalmente, un paso es un no vacío y finito multi-set sobre el conjunto de todos los elementos de unión. Deje que el paso S se active en una marca M. Entonces, S puede ocurrir, cambiando la marca M a M. Además, decimos que el marcado M es directamente accesible desde el marcado M por la ocurrencia del paso S, y lo denotamos por M[S > M. Una secuencia de ocurrencia finita es una secuencia finita de pasos y marcas: M1[S1 > M2. . . Mn[Sn > Mn+1 de tal manera que n+N y Mi[Si > Mi+1 . . , n}. El conjunto de todas las marcas posibles alcanzables para una red neta de una marca M se llama su conjunto de alcance, y se denota como R(Net, M). 5.1 Mapeo a redes de Petri de colores Nuestra estructura normativa es un gráfico bipartito etiquetado. Lo mismo puede decirse de una red Petri coloreada. Estamos presentando un mapeo f de uno a otro, con el fin de proporcionar semántica para la estructura normativa y probar las propiedades al respecto mediante el uso de resultados teóricos bien conocidos de trabajo en CPNs. El mapeo f hace uso de correspondencias entre escenas normativas y lugares CPN, transiciones normativas y transiciones CPN y finalmente, entre etiquetas de arco y expresiones de arco CPN. S → P B → T Lin Lout → E El conjunto de tipos es el conjunto singleton que contiene el color NP (es decir. * = {NP}). Este tipo complejo está estructurado de la siguiente manera (utilizamos CPN-ML [4] sintaxis): color NPT = con Obl  Per  Prh  NoMod color IP = con infor  declaramos  offer color UTT = record illp : IP ag1, role1, ag2, role2 : string content : string time : int color NP = Los arcos son trazados casi directamente. A es un conjunto finito de arcos y N es una función de nodo, de tal manera que Aa Aa Ain Aout. N(a) = a. La función de inicialización I se define como I(p) = Δs ( Por último, la función de color C asigna el color NP a cada lugar: C(p) = NP (­p ­P). No estamos haciendo uso de la función de guardia G. En el trabajo futuro, esta función se puede utilizar para modelar restricciones cuando extendemos la expresividad de nuestro lenguaje de norma. 5.2 Propiedades de las estructuras normativas Después de haber definido el mapeo desde las estructuras normativas hasta las redes de Petri coloreadas, ahora analizamos las propiedades de los CPN que nos ayudan a entender la complejidad de la detección de conflictos. Una pregunta que nos gustaría responder es, si en un momento dado, una determinada estructura normativa está libre de conflictos. Tal instantánea de una estructura normativa corresponde a una marca en el CPN cartografiado. Def. 11. Dada una marca Mi, esta marca es libre de conflicto si p  P. np1, np2  Mi(p) tal que np1.mode = Obl y np2.mode = Prh y np1.illoc y np2.illoc unificar bajo una sustitución válida. Otra pregunta interesante sería si se producirá un conflicto a partir de una instantánea del sistema propagando las posiciones normativas. Para responder a esta pregunta, primero traducimos la instantánea de la estructura normativa al CPN correspondiente y luego ejecutamos la secuencia de ocurrencia finita de marcas y pasos, verificando la libertad de conflicto de cada marca a medida que avanzamos. Def. 12. Dada una marca Mi, una secuencia de ocurrencia finita Si, Si+1,..., Sn se llama libre de conflictos, si y sólo si Mi[Si > Mi+1. . . Mn[Sn > Mn+1 y Mk están libres de conflictos para todos los k, de modo que i ≤ k ≤ n + 1. Sin embargo, la cuestión principal que nos gustaría investigar, es si una estructura normativa dada es o no resistente a los conflictos, es decir, si los agentes que promulgan el MAS son capaces de provocar conflictos a través de sus acciones. Tan pronto como se incluye la posibilidad de acciones (o declaraciones) de agentes autónomos, se pierde el determinismo. Después de haber mapeado la estructura normativa a un CPN, ahora añadimos modelos de CPN de las interacciones de agentes. Cada forma de interacción con el agente (es decir, cada actividad) se puede modelar utilizando CPN en la línea de Cost et al. [5]. Estos CPN no determinantes alimentan tokens en el CPN que modela la estructura normativa. Esto lleva a la introducción de no-determinismo en el PCN combinado. La mitad inferior de la figura 3 muestra parte de un modelo CPN de un agente \"protocolo\" donde el arco denotado con 1 representa alguna pronunciación de una ilocución por un agente. La transición de destino de este arco, no sólo mueve un token al siguiente estado de este CPN, sino que también coloca un token en el lugar correspondiente a la escena normativa apropiada en el modelo del CPN de la estructura normativa (a través del arco 2). La transición 3 finalmente podría propagar ese símbolo en forma de una obligación, por ejemplo. Así, a partir de una marca dada, muchas secuencias de ocurrencia diferentes son posibles dependiendo de las acciones de los agentes. Utilizamos el conjunto de alcance R para definir una situación en la que los agentes no pueden causar conflictos. 640 La Sexta Intl. Conjunto Conf. sobre Agentes Autónomos y Sistemas Multi-Agentes (AAMAS 07) Figura 3: Construcción del CPN combinado Def. 13. Dado un N neto, una marca M es resistente a los conflictos si y sólo si todas las marcas en R(N,M) están libres de conflictos. La verificación de la libertad de conflicto de una marca se puede hacer en tiempo polinomio mediante la verificación de todos los lugares del CPN en busca de fichas en conflicto. La libertad de conflicto de una secuencia de ocurrencia en el CPN que representa la estructura normativa también se puede hacer en tiempo polinomio ya que esta secuencia es determinista dada una instantánea. El hecho de que se diseñe o no una estructura normativa corresponde con seguridad a la comprobación de la resistencia a los conflictos de la marca M0 inicial. Ahora, verificar la resistencia al conflicto de una marca se convierte en una tarea muy difícil. Corresponde al problema de la accesibilidad en un CPN: ¿se puede alcanzar un estado o se puede lograr una marca que contenga un conflicto?. Este problema de alcanzabilidad es conocido por ser NP-completo para las redes Petri ordinarias [22] y como las RCP son funcionalmente idénticas, no podemos esperar verificar la resistencia a los conflictos de una estructura normativa fuera de línea en un tiempo razonable. Por lo tanto, se necesitan mecanismos de distribución y tiempo de ejecución para garantizar que una estructura normativa mantenga la coherencia. Presentamos uno de esos mecanismos en la sección siguiente. 6. GESTIÓN DE ESTRUCTURAS NORMATIVAS Una vez detectado un conflicto (según se define en la Sección 4), proponemos emplear al unificador para resolver el conflicto. En nuestro ejemplo, si las variables en prh(inform(a1, r1, a2, r2, p(Y, d), T)) no obtienen los valores especificados en la sustitución Sin embargo, en lugar de computar el conjunto de complementos de una sustitución (que puede ser un conjunto infinito) proponemos anotar la prohibición con el propio unificador y utilizarla para determinar cuáles son las variables de esa prohibición no pueden ser en futuras unificaciones para evitar un conflicto. Por lo tanto denotamos prohibiciones anotadas como prh( ̄I) . . Es un conjunto de unificadores. Las normas anotadas3 se interpretan como constructos deonticos con influencias restringidas, es decir, su efecto (sobre agentes, roles e ilocuciones) ha sido limitado por el conjunto de unificadores. Una prohibición puede estar en conflicto con varias obligaciones en una escena normativa dada s = id, Δ y tenemos que registrar (y posiblemente evitar) todos estos conflictos. Definimos a continuación un algoritmo que garantiza que una posición normativa se añada a una escena normativa de tal manera que no cause ningún conflicto. 3 Aunque proponemos limitar las prohibiciones, el mismo mecanismo puede utilizarse para definir la reducción de obligaciones en su lugar. Estas diferentes políticas dependen de la semántica deontica prevista y de los requisitos de los sistemas abordados. Por ejemplo, algunos MAS pueden exigir que sus agentes no actúen en presencia de conflictos, es decir, que se reduzca la obligación. 6.1 Resolución de conflictos Proponemos una forma de resolver los conflictos normativos mediante la unificación. Detectamos la superposición de las influencias de las normas, es decir. cómo afectan al comportamiento de los agentes afectados, y reducimos la influencia de la posición normativa, mediante el uso adecuado de las anotaciones al comprobar si la norma se aplica a las ilocuciones. El algoritmo mostrado en la Figura 4 muestra cómo mantenemos un conjunto de normas libres de conflictos. Añade una norma dada N a un estado normativo existente, libre de conflictos Δ, obteniendo un nuevo estado normativo resultante Δ que es libre de conflictos, es decir, sus prohibiciones están anotadas con un conjunto de conjuntos de conflictos que indican qué fijaciones para variables deben evitarse para que los conflictos no tengan lugar. algoritmo addNorm(N, Δ) comienza 1 marca de tiempo(N) 2 caso N de 3 per( ̄I): Δ := Δ  {N} 4 prh(I): si N  Δ s.t. Conflict(N, N, Las líneas 4-5 abordan el caso cuando intentamos agregar una prohibición de base a un estado normativo: si entra en conflicto con cualquier obligación, entonces se descarta; de lo contrario se añade al estado normativo. En las líneas 6 a 12 se describe la situación en que la posición normativa que debe añadirse es una prohibición no básica. En este caso, el algoritmo inicializa un conjunto vacío y bucles (línea 9-10) a través de las normas N en el antiguo estado normativo Δ. Después de encontrar uno que entra en conflicto con N, el algoritmo actualiza el valor de la nueva configuración de conflicto (línea 10). Mediante el bucle a través de Δ, somos capaces de comprobar cualquier conflicto entre la nueva prohibición y las obligaciones existentes, construyendo adecuadamente la anotación  que se utilizará al añadir N a Δ en la línea 11. En las líneas 13 a 27 se describe cómo se ajusta una nueva obligación a un estado normativo existente. Hacemos uso de dos conjuntos inicialmente vacíos, temporales, Δ1, Δ2. El algoritmo pasa a través de Δ (líneas 16-25) recogiendo las prohibiciones anotadas N Hay, sin embargo, dos casos a tratar: el de cuando un motivo La Sexta Intl. Conjunto Conf. sobre los agentes autónomos y los sistemas multiagentes (AAMAS 07) se encuentra la prohibición 641 (línea 17), y su excepción, que abarca las prohibiciones no terrestres (línea 20). En ambos casos, la antigua prohibición se almacena en Δ1 (líneas 18 y 23) para ser posteriormente retirada de Δ (línea 26). Sin embargo, en el caso de una prohibición no terrestre, el algoritmo actualiza su anotación de conjuntos de conflicto (línea 24). El bucle garantiza que se lleve a cabo una búsqueda exhaustiva (lineal) a través de un estado normativo, comprobando si la nueva obligación está en conflicto con cualquier prohibición existente, posiblemente actualizando las anotaciones de estas prohibiciones en conflicto. En la línea 26 el algoritmo construye la nueva actualización Δ eliminando las antiguas prohibiciones almacenadas en Δ1 y añadiendo las prohibiciones actualizadas almacenadas en Δ2 (si las hay), así como la nueva obligación N. Nuestro algoritmo propuesto es correcto en que, para una posición normativa dada N y un estado normativo Δ, proporciona un nuevo estado normativo Δ en el que todas las prohibiciones tienen anotaciones que registran cómo se unifican con las obligaciones existentes. Sin embargo, las anotaciones pueden estar vacías: este es el caso cuando tenemos una prohibición básica o una prohibición que no unifica/conflige con ninguna obligación. Los permisos no afectan a nuestro algoritmo y se tratan adecuadamente (línea 3). Cualquier intento de insertar una prohibición de base que entre en conflicto, produce el mismo estado normativo (línea 4). Cuando se añade una nueva obligación, el algoritmo garantiza que se tienen en cuenta todas las prohibiciones (líneas 14 a 27), lo que conduce a la eliminación de las prohibiciones sobre el terreno en conflicto o a la actualización de las anotaciones de las prohibiciones no sobre el terreno. El algoritmo siempre termina: los bucles están sobre un conjunto finito Δ y los conflictos comprueban y establecen operaciones siempre terminan. La complejidad del algoritmo es lineal: el conjunto Δ sólo se examina una vez para cada caso posible de norma que se añade. Al gestionar los estados normativos también es posible que necesitemos eliminar posiciones normativas. Esto es sencillo: los permisos se pueden retirar sin ningún problema; las prohibiciones anotadas también se pueden eliminar sin más consideraciones; sin embargo, las obligaciones requieren algunas tareas domésticas. Cuando se va a eliminar una obligación, debemos verificarla contra todas las prohibiciones anotadas a fin de actualizar sus anotaciones. Aplicamos la comprobación de conflicto y obtenemos un unificador, luego eliminamos este unificador de la anotación de prohibiciones. Invocamos el algoritmo de eliminación como removeNorm(N, Δ): devuelve un nuevo estado normativo Δ en el que N ha sido eliminado, con posibles alteraciones a otras posiciones normativas como se explicó. 6.2 Promulgación de una estructura normativa La promulgación de una estructura normativa equivale a la ejecución paralela y distribuida de escenas normativas y transiciones normativas. A título ilustrativo, describiremos a continuación la interacción entre las situaciones normativas de pago y entrega y la transición normativa que los vincula en la mitad superior de la figura 2. Con este objetivo, considere, por ejemplo, que obl(inform(jules, cliente, rod, acc, pay(copper, 400, 350), T) Δpago y que Δentrega tiene prh(inform(rod,wm, jules, cliente, entregado(Z, Q), T)). Tales estados indican que el cliente Jules está obligado a pagar £400 por 350kg de cobre al contador Rod de acuerdo con la escena normativa de pago, mientras que Rod, asumiendo el papel de gerente de almacén esta vez, está prohibido entregar cualquier cosa al cliente Jules de acuerdo con la escena normativa de entrega. Para cada escena normativa, el proceso de promulgación es el siguiente. En primer lugar, procesa su cola de mensajes entrantes que contiene tres tipos de mensajes: declaraciones de la actividad a la que está vinculada; y comandos normativos para agregar o eliminar posiciones normativas. Por ejemplo, en nuestro ejemplo, la escena normativa de pago recoge la ilocución I = utt((inform(jules, cliente, varilla, acc, pay(cobre, 400, 350), 35)) para el cliente Jules pendiente de pago por cobre (a través de la flecha A en la figura 2). Las Uterancias son timestamped y subsecuentemente agregadas al estado normativo. Tendríamos Δpayment = Δpayment {I}, en nuestro ejemplo. Al recibir órdenes normativas para agregar o eliminar una posición normativa, la escena normativa invoca el algoritmo de adición o eliminación correspondiente descrito en la Sección 6.1. En segundo lugar, la escena normativa reconoce su cambio de estado al enviar un mensaje desencadenante a cada transición normativa saliente a la que está conectado. En nuestro ejemplo, el escenario normativo de pagos estaría señalando su cambio de estado a la transición normativa nt. Para las transiciones normativas, el proceso funciona de manera diferente. Debido a que cada transición normativa controla el funcionamiento de una sola regla, al recibir un mensaje de activación, encuesta cada escena normativa entrante para sustituciones de los esquemas de ilocución pertinentes en el LHS de su regla. En nuestro ejemplo, nt (responsable de la regla descrita en la Sección 3.4), encuestaría el escenario normativo de pago (vía flecha B) para sustituciones. Al recibir respuestas de ellos (en forma de conjuntos de sustituciones junto con marcas de tiempo), tiene que unificar las sustituciones de cada una de estas escenas normativas. Para cada unificación que encuentra, la regla se activa, y por lo tanto el comando normativo correspondiente se envía a lo largo de la escena normativa de salida. La transición normativa entonces mantiene un seguimiento del mensaje de disparo que envió y de las marcas de tiempo de las posiciones normativas que desencadenó el disparo. Esto se hace para asegurar que las mismas posiciones normativas en el LHS de una regla sólo desencadenen su disparo una vez. En nuestro ejemplo, nt estaría recibiendo  = {X/jules, Y/rod, Z/copper, Q/350} de la escena normativa de pagos. Dado que las substiciones en unifican con la regla nts, la regla es disparada, y el comando normativo add(delivery : obli(rod, wm, jules, client, delivery(copper, 350), T)) es enviado a lo largo de la escena normativa de entrega para obligar a Rod a entregar al cliente Jules 350kg de cobre. Después de eso, la escena normativa de entrega invocaría el algoritmo addNorm de la figura 4 con Δdelivery y N = obli(rod, wm, jules, client, delivered(copper, 350)) como argumentos. 7. TRABAJOS Y CONCLUSIONES RELACIONADOS Nuestras contribuciones en este documento son triples. En primer lugar, introducimos un enfoque para la gestión y el razonamiento de las normas de manera distribuida. Hasta donde sabemos, hay poco trabajo publicado en esta dirección. En [8, 21] se presentan dos idiomas para la aplicación distribuida de las normas en el MAS. Sin embargo, en ambos trabajos, cada agente tiene una interfaz de mensaje local que envía mensajes legales de acuerdo con un conjunto de normas. Dado que estas interfaces son locales para cada agente, las normas sólo pueden expresarse en términos de acciones de ese agente. Se trata de una grave desventaja, por ejemplo. cuando uno necesita activar una obligación para con un agente debido a un cierto mensaje de otro. La segunda contribución es la propuesta de una estructura normativa. La noción es fructífera porque permite la separación de las cuestiones normativas y de procedimiento. La estructura normativa que proponemos evidencia la similitud entre la propagación de posiciones normativas y la propagación 642 La Sexta Intl. Conjunto Conf. sobre Agentes Autónomos y Sistemas Multi-Agentes (AAMAS 07) de tokens en Redes Petri Coloradas. Esa similitud sugiere fácilmente una cartografía entre los dos, y da lugar a un tratamiento analítico conveniente de la estructura normativa, en general, y la complejidad de la detección de conflictos, en particular. La idea de modelar interacciones (en forma de conversaciones) a través de Petri Nets se ha investigado en [18], donde el medio de interacción y los agentes individuales se modelan como subredes de CPN que posteriormente se combinan para su análisis. En [5], las conversaciones se diseñan y analizan por primera vez a nivel de los CPN y posteriormente se traducen en protocolos. Lin et al. [20] mapear esquemas de conversación a CPNs. Según nuestro conocimiento, el uso de esta representación en apoyo de la detección de conflictos en el MAS regulado no ha sido reportado en otros lugares. Por último, presentamos un mecanismo distribuido para resolver los conflictos normativos. Sartor [25] trata los conflictos normativos desde el punto de vista de la teoría jurídica y sugiere una forma de ordenar las normas involucradas. Su idea se implementa en [12], pero requiere un recurso central para el mantenimiento de normas. El enfoque para la detección y resolución de conflictos es una adaptación y extensión del trabajo sobre gráficos de instanciación reportados en [17] y un algoritmo relacionado en [27]. El algoritmo presentado en el presente trabajo puede ser utilizado para administrar estados normativos distribuidos: escenas normativas que suceden en paralelo tienen un estado normativo asociado Δ al que el algoritmo se aplica de forma independiente cada vez que se introduce una nueva norma. Estas tres contribuciones que presentamos en este documento abren muchas posibilidades para el trabajo futuro. Cabe mencionar en primer lugar, que como estrategia amplia estamos trabajando en una generalización de la noción de estructura normativa para hacerla funcionar con diferentes modelos de coordinación, con un contenido deontico más rico y además de diferentes realizaciones computacionales de MAS regulado. Como primer paso en esta dirección estamos aprovechando la disociación entre los protocolos de interacción y la orientación normativa declarativa que la estructura normativa pone a disposición, para proporcionar una capa normativa para las instituciones electrónicas (como se define en [1]). Esperamos que este acoplamiento dote a las instituciones electrónicas de un entorno normativo más flexible y más expresivo. Además, queremos extender nuestro modelo a través de varias direcciones: (1) manejar la negación y las limitaciones como parte del lenguaje de la norma, y en particular la noción de tiempo; (2) dar cabida a múltiples autoridades jerárquicas de normas basadas en roles, en la línea de Cholvy y Cuppens [3] y relaciones de poder como sugiere Carabelea et al. [2]; (3) para captar en el algoritmo de resolución de conflictos diferentes semánticas relacionadas con las nociones deonticas apoyando diferentes axiomaciones (por ejemplo, fuerza relativa de la prohibición frente a la obligación, nociones deonticas predeterminadas, inconsistencias deonticas). En el lado teórico, pretendemos utilizar técnicas de análisis de CPN para caracterizar clases de CPN (por ejemplo, acíclicas, simétricas, etc.) que corresponden a familias de Estructuras Normativas susceptibles a la detección de conflictos fuera de línea. La combinación de estas técnicas junto con nuestros mecanismos de resolución de conflictos en línea pretende dotar a los diseñadores del MAS de la capacidad de incorporar normas en sus sistemas de una manera basada en principios. 8. REFERENCIAS [1] J. L. Arcos, M. Esteva, P. Noriega, J. A. Rodr guez, y C. Sierra. Ingeniería de entornos abiertos con instituciones electrónicas. Journal on Engineering Applications of Artificial Intelligence, 18(2):191-204, 2005. [2] C. Carabelea, O. Boissier, y C. Castelfranchi. Usar el poder social para permitir a los agentes razonar sobre ser parte de un grupo. En el 5o Internat. Taller, EEAT 2004, págs. 166 a 177, 2004. [3] L. Cholvy y F. Cuppens. Solución de conflictos normativos mediante la fusión de funciones. En la Quinta Conferencia Internacional sobre Inteligencia Artificial y Derecho, Washington, Estados Unidos, 1995. [4] S. Christensen y T. B. Haagh. Diseño CPN - vista general de la sintaxis CPN ML. Informe técnico, Universidad de Aarhus, 1996. [5] R. S. Cost, Y. Chen, T. W. Finin, Y. Labrou e Y. Peng. Usando petri redes de colores para modelar la conversación. In Issues in Agent Communication, págs. 178 a 192, Londres, Reino Unido, 2000. [6] F. Dignum. Agentes autónomos con normas. Inteligencia Artificial y Ley, 7(1):69-79, 1999. [7] A. Elhag, J. Breuker y P. Brouwer. Sobre el análisis formal de los conflictos normativos. Información & Comunicaciones. Techn. Ley, 9(3):207-217, Oct. 2000. [8] M. Esteva, W. Vasconcelos, C. Sierra, y J. A. Rodr guez-Aguilar. Consistencia normativa en las instituciones electrónicas. volumen 3171 (LNAI), páginas 494-505. Springer-Verlag, 2004. [9] M. Fitting. Prueba de la lógica de primer orden y del teorema automatizado. Springer-Verlag, Nueva York, Estados Unidos, 1990. [10] N. Fornara, F. Vigan`o y M. Colombetti. Un enfoque impulsado por eventos a las normas en las instituciones artificiales. En el taller AAMAS05: Agentes, normas e instituciones para sistemas multiagente regulados (ANI@REM), Utrecht, 2005. [11] D. Gaertner, P. Noriega y C. Sierra. Ampliación de la arquitectura BDI con compromisos. En Actas del IX Congreso Internacional de la Asociación Catalana de Inteligencia Artificial, 2006. [12] A. Garc a-Camino, P. Noriega, y J.-A. Rodr guez-Aguilar. Un algoritmo para la resolución de conflictos en actividades reguladas compuestas. En el 7o taller Int.Workshop - ESAW 06, 2006. [13] A. Garc a-Camino, J.-A. Rodr guez-Aguilar, C. Sierra y W. Vasconcelos. Una arquitectura distribuida para las Sociedades de Agentes de Normas. En DALT III, volumen 3904 (LNAI), páginas 89 a 105. Springer, 2006. [14] F. Giunchiglia y L. Serafini. Lógicas jerárquicas multilenguaje o: Cómo podemos prescindir de lógicas modales. Inteligencia Artificial, 65(1):29-70, 1994. [15] J. Habermas. La Teoría de la Comunicación Acción, Volumen Uno, La Razón y la Racionalización de la Sociedad. Beacon Press, 1984. [16] K. Jensen. Redes Petri coloreadas: Conceptos básicos, métodos de análisis y usos prácticos (Volumen 1). Springer, 1997. [17] M. Kollingbaum y T. Norman. Estrategias para resolver conflictos de normas con razonamiento práctico. En el Taller de Coordinación de la CEPA en Sociedades de Agentes Emergentes 2004, 2004. [18] J.-L. Koning, G. Francois e Y. Demazeau. Formalización y prevalidación para protocolos de interacción en sistemas multiagente. En ECAI, págs. 298 a 307, 1998. [19] B. Kramer y J. Mylopoulos. Representación del conocimiento. En S. C. Shapiro, editor, Enciclopedia de Inteligencia Artificial, volumen 1, páginas 743-759. John Wiley & Sons, 1992. [20] F. Lin, D. H. Norrie, W. Shen y R. Kremer. Un enfoque basado en esquemas para especificar las políticas de conversación. En Temas de Comunicación de Agentes, págs. 193-204, 2000. [21] N. Minsky. Interacción gobernada por la ley (LGI): Un mecanismo de coordinación y control distribuido (Una introducción y un manual de referencia). Informe técnico, Universidad Rutgers, 2005. [22] T. Murata. Redes Petri: Propiedades, análisis y aplicaciones. Actas del IEEE, 77(4):541-580, 1989. [23] S. Parsons, C. Sierra y N. Jennings. Agentes que razonan y negocian discutiendo. Diario de Lógica y Computación, 8(3):261-292, 1998. [24] A. Ricci y M. Viroli. Artefactos de Coordinación: Una Abstracción Unificante para la Coordinación de Ingeniería Mediada por el Medio Ambiente en MAS. Informatica, 29:433-443, 2005. [25] G. Sartor. Conflictos normativos en el razonamiento jurídico. Inteligencia Artificial y Ley, 1(2-3):209-235, junio de 1992. [26] M. Sergot. Una teoría computacional de posiciones normativas. ACM Trans. Comput. Lógica, 2(4):581-622, 2001. [27] W. W. Vasconcelos, M. Kollingbaum, y T. Norman. Resolver conflictos e incoherencias en las organizaciones virtuales reguladas por normas. En Actas de AAMAS 07, Hawaii, EE.UU., 2007. IFAAMAS. [28] G. H. von Wright. Norma y acción: Una investigación lógica. Routledge y Kegan Paul, Londres, 1963. [29] M. Wooldridge. Una introducción a los sistemas multiagente. John Wiley & Sons, Chichester, Reino Unido, febrero de 2002. El Sexto Intl. Conjunto Conf. sobre agentes autónomos y sistemas de agentes múltiples (AAMAS 07) 643 ",
            "error": [
                "protocolo",
                "protocolos",
                "protocolo",
                "protocolo",
                "protocolo",
                "protocolos",
                "protocolo",
                "protocolo"
            ]
        },
        "normative scene": {
            "translated_key": [
                "escena normativa",
                "escena normativa",
                "escena normativa",
                "escena normativa",
                "escena normativa",
                "escena normativa correspondiente",
                "escena normativa",
                "escena normativa",
                "escena normativa",
                "escena normativa",
                "escena normativa",
                "escena normativa",
                "escena normativa",
                "escena normativa",
                "escena normativa",
                "escena normativa",
                "escena normativa",
                "escena normativa",
                "escena normativa",
                "escena normativa",
                "escena normativa",
                "escena normativa",
                "escena normativa"
            ],
            "translated_annotated_text": "Gestión de Normas Distribuidas en Sistemas Regulados Multi-Agente ∗ Dorian Gaertner Dept. de Computación, Imperial College London, Londres SW7 2AZ, Reino Unido dg00@doc.ic.ac.uk Andrés García-Camino, Pablo Noriega, J.-A. Rodriguez-Aguilar IIIA-CSIC, 08193 Bellaterra, España {andres,pablo,jarážiya.csic.es Wamberto Vasconcelos Dept. de Ciencias de la Computación, Universidad de Aberdeen, Aberdeen AB24 3UE, Reino Unido wvasconcelos@acm.org RESUMEN Las normas son ampliamente reconocidas como un medio de coordinar sistemas multi-agentes. La gestión distribuida de las normas es una cuestión difícil y observamos una falta de realizaciones computacionales verdaderamente distribuidas de los modelos normativos. Con el fin de regular el comportamiento de los agentes autónomos que participan en múltiples actividades relacionadas, proponemos un modelo normativo, la Estructura Normativa (NS), un artefacto que se basa en la propagación de posiciones normativas (obligaciones, prohibiciones, permisos), como consecuencias de las acciones de los agentes. Dentro de un NS, los conflictos pueden surgir debido a la naturaleza dinámica del MAS y la concurrencia de acciones de los agentes. Sin embargo, garantizar la libertad de conflicto de un NS en el momento del diseño es computacionalmente intratable. Demostramos esto formalizando la noción de conflicto, proporcionando un mapeo de los NS en las Redes Petri Coloreadas y tomando prestado los resultados teóricos bien conocidos de ese campo. Dado que se requiere la resolución de conflictos en línea, presentamos un algoritmo tratable que se empleará de forma distribuida. Luego demostramos que este algoritmo es primordial para la promulgación distribuida de un NS. Categorías y sujetos Descriptores I.2.11 [Inteligencia Artificial Distribuida]: Idiomas y estructuras Términos generales Algoritmos, Diseño, Teoría 1. INTRODUCCIÓN Una característica fundamental de los sistemas multiagente abiertos y regulados en los que interactúan agentes autónomos, es que los agentes participantes están destinados a cumplir con las convenciones del sistema. Las normas pueden utilizarse para modelar tales convenciones y, por lo tanto, como medio para regular el comportamiento observable de los agentes [6, 29]. Hay muchas contribuciones sobre el tema de las normas de sociólogos, filósofos y lógicos (por ejemplo, [15, 28]). Sin embargo, hay muy pocas propuestas para la realización computacional de modelos normativos - la forma en que las normas pueden integrarse en el diseño y ejecución de MAS. Los pocos que existen (e.g. [10, 13, 24]), funcionan de manera centralizada, lo que crea cuellos de botella y puntos de fallo únicos. Hasta donde sabemos, ninguna propuesta apoya verdaderamente la promulgación distribuida de entornos normativos. En nuestro documento abordamos ese problema y proponemos medios para manejar los compromisos contradictorios en sistemas abiertos, regulados y multiagentes de manera distribuida. El tipo de MAS regulado que contemplamos consiste en actividades múltiples, simultáneas, relacionadas donde los agentes interactúan. Cada agente puede participar simultáneamente en varias actividades, y cambiar de una actividad a otra. Las acciones de un agente dentro de una actividad pueden tener consecuencias en forma de posiciones normativas (es decir. obligaciones, permisos y prohibiciones) [26] que puedan limitar su comportamiento futuro. Por ejemplo, un agente comprador que se queda sin crédito puede estar prohibido hacer más ofertas, o un agente vendedor está obligado a entregar después de cerrar un acuerdo. Asumimos que los agentes pueden optar por no cumplir todas sus obligaciones y, por lo tanto, pueden ser sancionados por el MAS. Obsérvese que, cuando se distribuyen las actividades, las posiciones normativas deben derivarse de las actividades en las que se generan a aquellas en las que surten efecto. Por ejemplo, la obligación de los vendedores de arriba debe fluir (o propagarse) de una actividad de negociación a una actividad de entrega. Dado que en un MAS abierto y regulado no se pueden incorporar aspectos normativos en el diseño de los agentes, adoptamos la opinión de que el MAS debe complementarse con un conjunto separado de normas que regulen aún más el comportamiento de los agentes participantes. Para modelar la separación de preocupaciones entre el nivel de coordinación (interacciones de agentes) y el nivel normativo (propagación de posiciones normativas), proponemos un artefacto llamado Estructura Normativa (NS). Dentro de un NS pueden surgir conflictos debido a la naturaleza dinámica del MAS y la concurrencia de acciones de los agentes. Por ejemplo, un agente puede estar obligado y prohibido a realizar el 636 978-81-904262-7-5 (RPS) c 2007 IFAAMAS muy mismo acción en una actividad. Dado que la regulación de un MAS implica que los agentes participantes deben ser conscientes de la validez de las acciones que tienen lugar dentro de él, dichos conflictos deben ser identificados y posiblemente resueltos si se necesita una reivindicación de validez para que un agente realice una acción o sea sancionado. Sin embargo, garantizar la libertad de conflicto de un NS en el momento del diseño es computacionalmente intratable. Demostramos esto formalizando la noción de conflicto, proporcionando un mapeo de los NS en las redes de Petri de colores (CPNs) y tomando prestado los resultados teóricos bien conocidos del campo de los CPNs. Creemos que se requiere la detección y resolución de conflictos en línea. Por lo tanto, presentamos un algoritmo tratable para la resolución de conflictos. Este algoritmo es primordial para la promulgación distribuida de un NS. El documento se organiza de la siguiente manera. En la Sección 2 detallamos un escenario para servir de ejemplo a lo largo del artículo. A continuación, en la Sección 3 definimos formalmente el artefacto de la estructura normativa. Además, en la sección 4 formalizamos la noción de conflicto para posteriormente analizar la complejidad de la detección de conflictos en términos de RCP en la sección 5. En la sección 6 se describe la gestión computacional de los NS describiendo su promulgación y presentando un algoritmo para la resolución de conflictos. Por último, comentamos sobre la labor conexa, sacamos conclusiones e informamos sobre la labor futura en la sección 7. 2. SCENARIO Utilizamos un escenario de cadena de suministro en el que empresas e individuos se reúnen en un mercado en línea para realizar negocios. El procedimiento de transacción global puede organizarse como seis actividades distribuidas, representadas como nodos en el diagrama de la Figura 1. En ellas participan diferentes participantes cuyo comportamiento se coordina a través de protocolos. En este escenario, los agentes pueden desempeñar uno de los cuatro papeles: marExit Inscripción Pago Entrega Negociación Coordinación Modelo Contrato Figura 1: Estructura de actividad del contador de ketplace (acc), cliente, proveedor (supp) y gerentes de almacén (wm). Las flechas que conectan las actividades representan cómo los agentes pueden moverse de una actividad a otra. Después de registrarse en el mercado, los clientes y proveedores se reúnen en una actividad en la que negocian los términos de su transacción, es decir. los precios, los importes de las mercancías que deban entregarse, los plazos y otros detalles. En la actividad contractual, se establece el pedido y se prepara una factura. El cliente participará entonces en una actividad de pago, verificando su solvencia e instruyendo a su banco a transferir la cantidad correcta de dinero. Mientras tanto, el proveedor se encargará de la entrega de las mercancías (por ejemplo: a través de un administrador de almacén) en la actividad de entrega. Finalmente, los agentes pueden salir del mercado conforme a un protocolo de salida predeterminado. El contable del mercado participa en la mayoría de las actividades como proveedor confiable de herramientas de auditoría. En el resto del documento nos basaremos en este escenario para ilustrar la noción de estructura normativa e ilustrar nuestro enfoque de la detección y resolución de conflictos en un entorno distribuido. 3. ESTRUCTURA NORMATIVA En los agentes MASs interactúan según protocolos que naturalmente se distribuyen. Abogamos por que las acciones en uno de esos protocolos puedan tener un efecto en la promulgación de otros protocolos. Algunas acciones pueden ser prohibidas u obligatorias, por ejemplo. Tomamos posiciones normativas para ser obligaciones, prohibiciones y permisos similares al trabajo descrito en [26]. La intención de agregar o eliminar una posición normativa que llamamos comando normativo. Los casos de posiciones normativas en un protocolo también pueden tener consecuencias para otros protocolos1. Para definir nuestro lenguaje de norma y especificar cómo se propagan las posiciones normativas, nos hemos inspirado en sistemas multicontexto [14]. Estos sistemas permiten estructurar el conocimiento en teorías formales distintas y definir las relaciones entre ellos. Las relaciones se expresan como reglas puente - la deducibilidad de las fórmulas en algunos contextos conduce a la deducción de otras fórmulas en otros contextos. Recientemente, estos sistemas se han utilizado con éxito para definir arquitecturas de agentes [11, 23]. La metáfora se traduce a nuestro trabajo actual de la siguiente manera: la expresión de las ilocuciones y/o la existencia de posiciones normativas en algunas escenas normativas conduce a la deducción de posiciones normativas en otras escenas normativas. Nos preocupa la propagación y distribución de posiciones normativas dentro de una red de escenas normativas distribuidas como consecuencia de las acciones de los agentes. Tomamos escenas normativas para ser conjuntos de posiciones normativas y expresiones que están asociadas con un protocolo de interacción subyacente correspondiente a una actividad. En esta sección presentamos primero un lenguaje simple que capta estos aspectos e introduce formalmente las nociones de \"escena normativa\", regla de transición normativa y estructura normativa. Damos la semántica prevista de estas reglas y mostramos cómo controlar un MAS a través de normas en un ejemplo. 3.1 Conceptos básicos Los componentes básicos de nuestro lenguaje son términos y fórmulas atómicas: Def. 1. Un término, denotado como t, es (i) cualquier constante expresada usando minúsculas (con o sin subíndices), por ejemplo. a, b0, c o ii) cualquier variable expresada utilizando mayúsculas (con o sin subíndices), por ejemplo. X, Y, Zb o iii) cualquier función f(t1,. . . , tn), donde f es un símbolo de función n-ary y t1,.., tn son términos. Algunos ejemplos de términos y funciones son Crédito, precio u oferta (biblia, 30), siendo respectivamente una variable, una constante y una función. Estaremos haciendo uso de identificadores en todo el papel, que son términos constantes y también necesitan la siguiente definición: Def. 2. Una fórmula atómica es cualquier construcción p(t1,. . . , tn), donde p es un símbolo predicado n-ary y t1,. . . , son términos. El conjunto de todas las fórmulas atómicas se denota como Δ. Nos centramos en una clase expresiva de MASs en la que la interacción se lleva a cabo por medio de actos de discurso ilocutionarios intercambiados entre los agentes participantes: Def. 3. I I I son las fórmulas atómicas terrestres que tienen la forma p(ag, r, ag, r, , t) donde p es un elemento de 1 Aquí, abstracto de protocolos y se refieren a ellos genéricamente como actividades. El Sexto Intl. Conjunto Conf. en Agentes Autónomos y Sistemas Multi-Agentes (AAMAS 07) 637 un conjunto de partículas ilocucionarias (por ejemplo: informar, petición, oferta); ag, ag son identificadores de agente; r, r son identificadores de rol; , un término de base arbitrario, es el contenido del mensaje, construido a partir de un lenguaje de contenido compartido; t  N es un sello de tiempo. El significado intuitivo de p(ag, r, ag, r, m, t) es que agente ag jugando rol r enviado mensaje m a agente ag jugando rol r en el momento t. Un ejemplo de una ilocución es informar(ag4, supp, ag3, cliente, offer(wire, 12), 10). A veces es útil referirse a las ilocuciones que no están totalmente fundamentadas, es decir, aquellas que pueden contener variables no instantiated (libres). En la descripción de un protocolo, por ejemplo, los valores precisos del mensaje intercambiado pueden quedar sin especificar. Durante la promulgación de los agentes del protocolo se producirán los valores reales que darán lugar a una ilocución del suelo. Así podemos definir esquemas de ilocución: Def. 4. Un esquema de ilocución ̄I es cualquier fórmula atómica p(ag, r, ag, r, ♥, t) en la que algunos de los términos pueden ser variables o pueden contener variables. 3.2 Definición formal de la noción de NS Primero definimos las escenas normativas de la siguiente manera: Def. 5. Una \"escena normativa\" es una tupla s = ids, Δs donde los ids son un identificador de escena y Δs es el conjunto de fórmulas atómicas Por ejemplo, una instantánea del estado de la entrega \"escena normativa\" de nuestro escenario podría ser representada como: Δs = 8 < : utt(request(sean, client, kev, wm, receive(wire, 200), 20)), utt(aceptar(kev, wm, seen, customer, deliver(wire, 200), 30)) 9 Tenga en cuenta que el estado de una \"escena normativa\" Δs evoluciona con el tiempo. Estas escenas normativas están conectadas entre sí a través de transiciones normativas que especifican cómo las expresiones y posiciones normativas en una escena afectan a otras escenas normativas. Como se mencionó anteriormente, las actividades no son independientes, ya que las ilocuciones pronunciadas en algunas de ellas pueden tener un efecto en otras. Las reglas normativas de transición definen las condiciones bajo las cuales se genera un comando normativo. Estas condiciones son declaraciones o posiciones normativas asociadas a un protocolo dado (denominadas por ejemplo. actividad : expresión ) que dan un comando normativo, es decir. la adición o supresión de otra posición normativa, posiblemente relacionada con una actividad diferente. Nuestras reglas de transición están así definidas: Def. 6. Una regla de transición normativa R es de la forma: R ::= V C V ::= ids : D  V, V D ::= N  utt( ̄I) N ::= per( ̄I)  prh( ̄I)  obli( ̄I) C ::= add(ids : N)  remove(ids : N) donde ̄I es un esquema permiso, prohibición u obligación), ids es un identificador de la actividad s y C es un comando normativo. Dotamos nuestro lenguaje con la semántica habitual de los lenguajes basados en reglas [19]. Las reglas trazan una estructura normativa existente a una nueva estructura normativa en la que sólo cambia el estado de las escenas normativas. En las definiciones siguientes nos basamos en el concepto estándar de sustitución [9]. Def. 7. Una transición normativa es un tupla b = idb, rb donde idb es un identificador y rb es una regla de transición normativa. Proponemos ampliar la noción de MAS, regulada por protocolos, con una capa adicional consistente en escenas normativas y transiciones normativas. Esta capa se representa como un gráfico bipartito que llamamos estructura normativa. Una estructura normativa relaciona escenas normativas y transiciones normativas especificando qué posiciones normativas deben generarse o eliminarse en qué escenas normativas. Def. 8. Una estructura normativa es un gráfico bipartito etiquetado NS = Nodos, bordes, Lin, Lout. Nodos es un conjunto de Sâ B donde S es un conjunto de escenas normativas y B es un conjunto de transiciones normativas. Edges es un conjunto Ain Aout donde Ain  S × B es un conjunto de arcos de entrada etiquetados con una fórmula atómica utilizando la función de etiquetado Lin : Ain → D; y Aout  B × S es un conjunto de arcos de salida etiquetados con una posición normativa utilizando la función de etiquetado Lout : Aout → N. Lo siguiente debe contener: 1. Cada fórmula atómica que aparece en el LHS de una regla rb debe ser de la forma (ids : D) donde s â € € € € TM € € € € € € € € € € € € € € € € € € € € € € € € € Ain tal que es = La fórmula atómica que aparece en el RHS de una regla rb debe ser de la forma add(ids : N) o remove(ids : N) donde s â € S y â € Aout tal que aout = (b, s) y Lout (aout ) = N. 3. Ain tal que a = (s, b) y b = idb, rb y Lin (a) = D entonces (ids:D) debe ocurrir en el LHS de rb. 4. Afuera de tal manera que a = (b, s) y b = idb, rb y Lout (a) = N luego add(ids : N) o remove(ids : N) deben ocurrir en el RHS de rb. Los dos primeros puntos aseguran que cada fórmula atómica en el LHS de una regla de transición normativa etiqueta un arco que entra en la transición normativa apropiada en la estructura normativa, y que la fórmula atómica en el RHS etiqueta el arco saliente correspondiente. Los puntos tres y cuatro aseguran que las etiquetas de todos los arcos entrantes se utilicen en el LHS de la regla de transición normativa en la que entran estos arcos, y que las etiquetas de todos los arcos salientes se utilicen en el RHS de la regla de transición normativa que estos arcos dejan. 3.3 Semántica Destinada La semántica formal se definirá mediante un mapeo a Redes Petri Coloradas en la Sección 5.1. Aquí comenzamos a definir la semántica prevista de las reglas normativas de transición describiendo cómo una regla cambia una \"escena normativa\" de una estructura normativa existente que produce una nueva estructura normativa. Cada regla se activa una vez para cada sustitución que unifica el lado izquierdo V de la regla con el estado de las escenas normativas correspondientes. Una fórmula atómica (es decir, una declaración o una posición normativa) sostiene si es unificable con una declaración o posición normativa que pertenece al estado de la \"escena normativa correspondiente\". Cada vez que se activa una regla, se lleva a cabo el comando normativo especificado a la derecha de esa regla, con la intención de añadir o eliminar una posición normativa del estado de la correspondiente \"escena normativa\". Sin embargo, la adición no es incondicional, ya que pueden surgir conflictos. Este tema se tratará en las secciones 4 y 6.1. 638 La Sexta Intl. Conjunto Conf. en Agentes Autónomos y Sistemas Multi-Agentes (AAMAS 07) 3.4 Ejemplo En nuestro ejemplo de ejecución tenemos la siguiente regla de transición normativa ejemplar: „ pago : obli(inform(X, cliente, Y, acc, pay(Z, P, Q, T)), pago : utt(inform(X, cliente, Y, acc, pay(Z, P, Q), T)) « entrega : a La norma es una obligación del agente Y (esta vez asumiendo el papel de gerente de almacén wm) de enviar un mensaje al cliente X que el artículo Z ha sido entregado. En la Figura 2 se muestra una representación diagnóstica de cómo se relacionan las actividades y una estructura normativa: Pago Entrega Contrato Nivel Normativo Salida Registro Pago Entrega Negociación Nivel de Coordinación Contrato nt Figura 2: Actividades y Estructura Normativa A medida que se pronuncian las ilocuciones durante las actividades, surgen posiciones normativas. Las preferencias y las posiciones normativas se combinan en normas de transición, lo que provoca el flujo de posiciones normativas entre las distintas situaciones normativas. La conexión entre los dos niveles se describe en la sección 6.2. 4. DEFINICIÓN DE CONFLICTOS Los términos conflicto deontico e inconsistencia deontica se han utilizado indistintamente en la literatura. Sin embargo, en este trabajo adoptamos el punto de vista de [7] en el que los autores sugieren que surge una inconsistencia deontica cuando una acción es simultáneamente permitida y prohibida - ya que un permiso no puede ser actuado en consecuencia, no se produce un conflicto real. Sin embargo, las situaciones en que una acción está simultáneamente obligada y prohibida son conflictos deonticos, ya que tanto las obligaciones como las prohibiciones influyen en los comportamientos en conflicto. El contenido de las posiciones normativas en este trabajo son ilocuciones. Por lo tanto, surge un conflicto normativo cuando una ilocución está simultáneamente obligada y prohibida. Proponemos utilizar la noción estándar de unificación [9] para detectar cuándo se superponen una prohibición y un permiso. Por ejemplo, una obligación obli(informar(A1, R1, A2, R2, p(c, X, T)) y una prohibición prh(informar(a1, r1, a2, r2, p(Y, d), T)) están en conflicto ya que se unifican en el punto Capturamos formalmente esta noción: Def. 9. Un conflicto (deontico) surge entre dos posiciones normativas N y N bajo una sustitución Es decir, una prohibición y una obligación están en conflicto si, y sólo si, sus ilocuciones se unifican en virtud de La sustitución, llamada aquí el conjunto de conflictos, unifica los agentes, roles y fórmulas atómicas. Asumimos que unificar es una implementación adecuada de un algoritmo de unificación que i) termina siempre (posiblemente fallando, si no se puede encontrar un unificador); ii) es correcto; y iii) tiene complejidad computacional lineal. Las incoherencias causadas por la misma ilocución, que se permiten y prohíben simultáneamente, pueden formalizarse de manera similar. En este trabajo nos centramos en los conflictos de prohibición/obligación, pero la maquinaria computacional introducida en la Sección 6.1 también puede ser utilizada para detectar inconsistencias de prohibición/permiso, si sustituimos la modalidad obli por per. 5. FORMALIZACIÓN DEL CONFLICTO-FREEDOM En esta sección presentamos algunos conocimientos de fondo sobre CPN asumiendo una comprensión básica de las redes Petri ordinarias. Para detalles técnicos, remitimos al lector a [16]. A continuación, mapeamos los NS a los CPN y analizamos sus propiedades. Los CPN combinan la fuerza de las redes Petri con la fuerza de los lenguajes de programación funcionales. Por un lado, las redes Petri proporcionan los primitivos para la descripción de la sincronización de los procesos concurrentes. Como se observa en [16], los CPN tienen una semántica que se basa en la verdadera concurrencia, en lugar de entrelazarse. En nuestra opinión, es más fácil trabajar con una semántica de verdadera moneda porque es la forma en que prevemos la conexión entre el nivel de coordinación y el nivel normativo de un sistema multi-agente. Por otra parte, los lenguajes de programación funcionales utilizados por los CPN proporcionan los primitivos para la definición de los tipos de datos y la manipulación de sus valores de datos. Por lo tanto, podemos traducir fácilmente expresiones de una estructura normativa. Por último, pero no por ello menos importante, los CPN tienen una semántica bien definida que define inequívocamente el comportamiento de cada CPN. Además, los CPN tienen un gran número de métodos e instrumentos de análisis formales mediante los cuales se pueden demostrar las propiedades de los CPN. En resumen, los CPN nos proporcionan todas las características necesarias para razonar formalmente sobre las estructuras normativas, dado que se proporciona una cartografía adecuada. De acuerdo con las redes Petri, los estados de un CPN están representados por medio de lugares. Pero a diferencia de Petri Nets, cada lugar tiene un tipo de datos asociado determinando el tipo de datos que el lugar puede contener. Un estado de un CPN se llama marca. Consiste en un número de fichas colocadas en los lugares individuales. Cada token lleva un valor de datos que tiene el tipo del lugar correspondiente. En general, un lugar puede contener dos o más tokens con el mismo valor de datos. Por lo tanto, una marca de un CPN es una función que mapea cada lugar en un multi-set2 de tokens del tipo correcto. Uno a menudo se refiere a los valores token como colores token y uno también se refiere a los tipos de datos como conjuntos de colores. Los tipos de un CPN pueden ser arbitrariamente complejos. Las acciones en un PCN están representadas mediante transiciones. Un arco entrante en una transición desde un lugar indica que la transición puede eliminar tokens del lugar correspondiente mientras que un arco saliente indica que la transición puede añadir tokens. El número exacto de tokens y sus valores de datos son determinados por las expresiones de arco, que se codifican utilizando el lenguaje de programación elegido para el CPN. Una transición está habilitada en un CPN si y sólo si todos los 2 A multi-set (o bolsa) es una extensión a la noción de conjunto, permitiendo la posibilidad de múltiples apariencias del mismo elemento. El Sexto Intl. Conjunto Conf. en Agentes Autónomos y Sistemas Multi-Agentes (AAMAS 07) 639 variables en las expresiones de sus arcos entrantes se unen a algunos valores (cada una de estas fijaciones se refiere como un elemento vinculante). Si es así, la transición puede ocurrir eliminando tokens de sus lugares de entrada y añadiendo tokens a sus lugares de salida. Además de las expresiones de arco, es posible conectar una expresión booleana de guardia (con variables) a cada transición. Juntando todos los elementos de arriba obtenemos una definición formal de CPN que se empleará más adelante para propósitos de mapeo. Def. 10. Un CPN es un conjunto finito de tipos no vacíos, también llamados conjuntos de colores; ii) P es un conjunto finito de lugares; iii) T es un conjunto finito de transiciones; iv) A es un conjunto finito de arcos; v) N es una función de nodo definida de A a P × T • T × P; vi) C es una función de color de P a فارسى; vii) G es una De acuerdo con las redes Petri ordinarias, el comportamiento concurrente de un CPN se basa en la noción de paso. Formalmente, un paso es un no vacío y finito multi-set sobre el conjunto de todos los elementos de unión. Deje que el paso S se active en una marca M. Entonces, S puede ocurrir, cambiando la marca M a M. Además, decimos que el marcado M es directamente accesible desde el marcado M por la ocurrencia del paso S, y lo denotamos por M[S > M. Una secuencia de ocurrencia finita es una secuencia finita de pasos y marcas: M1[S1 > M2. . . Mn[Sn > Mn+1 de tal manera que n+N y Mi[Si > Mi+1 . . , n}. El conjunto de todas las marcas posibles alcanzables para una red neta de una marca M se llama su conjunto de alcance, y se denota como R(Net, M). 5.1 Mapeo a redes de Petri de colores Nuestra estructura normativa es un gráfico bipartito etiquetado. Lo mismo puede decirse de una red Petri coloreada. Estamos presentando un mapeo f de uno a otro, con el fin de proporcionar semántica para la estructura normativa y probar las propiedades al respecto mediante el uso de resultados teóricos bien conocidos de trabajo en CPNs. El mapeo f hace uso de correspondencias entre escenas normativas y lugares CPN, transiciones normativas y transiciones CPN y finalmente, entre etiquetas de arco y expresiones de arco CPN. S → P B → T Lin Lout → E El conjunto de tipos es el conjunto singleton que contiene el color NP (es decir. * = {NP}). Este tipo complejo está estructurado de la siguiente manera (utilizamos CPN-ML [4] sintaxis): color NPT = con Obl  Per  Prh  NoMod color IP = con infor  declaramos  offer color UTT = record illp : IP ag1, role1, ag2, role2 : string content : string time : int color NP = Los arcos son trazados casi directamente. A es un conjunto finito de arcos y N es una función de nodo, de tal manera que Aa Aa Ain Aout. N(a) = a. La función de inicialización I se define como I(p) = Δs ( Por último, la función de color C asigna el color NP a cada lugar: C(p) = NP (­p ­P). No estamos haciendo uso de la función de guardia G. En el trabajo futuro, esta función se puede utilizar para modelar restricciones cuando extendemos la expresividad de nuestro lenguaje de norma. 5.2 Propiedades de las estructuras normativas Después de haber definido el mapeo desde las estructuras normativas hasta las redes de Petri coloreadas, ahora analizamos las propiedades de los CPN que nos ayudan a entender la complejidad de la detección de conflictos. Una pregunta que nos gustaría responder es, si en un momento dado, una determinada estructura normativa está libre de conflictos. Tal instantánea de una estructura normativa corresponde a una marca en el CPN cartografiado. Def. 11. Dada una marca Mi, esta marca es libre de conflicto si p  P. np1, np2  Mi(p) tal que np1.mode = Obl y np2.mode = Prh y np1.illoc y np2.illoc unificar bajo una sustitución válida. Otra pregunta interesante sería si se producirá un conflicto a partir de una instantánea del sistema propagando las posiciones normativas. Para responder a esta pregunta, primero traducimos la instantánea de la estructura normativa al CPN correspondiente y luego ejecutamos la secuencia de ocurrencia finita de marcas y pasos, verificando la libertad de conflicto de cada marca a medida que avanzamos. Def. 12. Dada una marca Mi, una secuencia de ocurrencia finita Si, Si+1,..., Sn se llama libre de conflictos, si y sólo si Mi[Si > Mi+1. . . Mn[Sn > Mn+1 y Mk están libres de conflictos para todos los k, de modo que i ≤ k ≤ n + 1. Sin embargo, la cuestión principal que nos gustaría investigar, es si una estructura normativa dada es o no resistente a los conflictos, es decir, si los agentes que promulgan el MAS son capaces de provocar conflictos a través de sus acciones. Tan pronto como se incluye la posibilidad de acciones (o declaraciones) de agentes autónomos, se pierde el determinismo. Después de haber mapeado la estructura normativa a un CPN, ahora añadimos modelos de CPN de las interacciones de agentes. Cada forma de interacción con el agente (es decir, cada actividad) se puede modelar utilizando CPN en la línea de Cost et al. [5]. Estos CPN no determinantes alimentan tokens en el CPN que modela la estructura normativa. Esto lleva a la introducción de no-determinismo en el PCN combinado. La mitad inferior de la figura 3 muestra parte de un modelo CPN de un protocolo de agente donde el arco denotado con 1 representa alguna pronunciación de una ilocución por un agente. La transición de destino de este arco, no sólo mueve un token al siguiente estado de este CPN, sino que también coloca un token en el lugar correspondiente a la \"escena normativa\" apropiada en el modelo del CPN de la estructura normativa (vía el arco 2). La transición 3 finalmente podría propagar ese símbolo en forma de una obligación, por ejemplo. Así, a partir de una marca dada, muchas secuencias de ocurrencia diferentes son posibles dependiendo de las acciones de los agentes. Utilizamos el conjunto de alcance R para definir una situación en la que los agentes no pueden causar conflictos. 640 La Sexta Intl. Conjunto Conf. sobre Agentes Autónomos y Sistemas Multi-Agentes (AAMAS 07) Figura 3: Construcción del CPN combinado Def. 13. Dado un N neto, una marca M es resistente a los conflictos si y sólo si todas las marcas en R(N,M) están libres de conflictos. La verificación de la libertad de conflicto de una marca se puede hacer en tiempo polinomio mediante la verificación de todos los lugares del CPN en busca de fichas en conflicto. La libertad de conflicto de una secuencia de ocurrencia en el CPN que representa la estructura normativa también se puede hacer en tiempo polinomio ya que esta secuencia es determinista dada una instantánea. El hecho de que se diseñe o no una estructura normativa corresponde con seguridad a la comprobación de la resistencia a los conflictos de la marca M0 inicial. Ahora, verificar la resistencia al conflicto de una marca se convierte en una tarea muy difícil. Corresponde al problema de la accesibilidad en un CPN: ¿se puede alcanzar un estado o se puede lograr una marca que contenga un conflicto?. Este problema de alcanzabilidad es conocido por ser NP-completo para las redes Petri ordinarias [22] y como las RCP son funcionalmente idénticas, no podemos esperar verificar la resistencia a los conflictos de una estructura normativa fuera de línea en un tiempo razonable. Por lo tanto, se necesitan mecanismos de distribución y tiempo de ejecución para garantizar que una estructura normativa mantenga la coherencia. Presentamos uno de esos mecanismos en la sección siguiente. 6. GESTIÓN DE ESTRUCTURAS NORMATIVAS Una vez detectado un conflicto (según se define en la Sección 4), proponemos emplear al unificador para resolver el conflicto. En nuestro ejemplo, si las variables en prh(inform(a1, r1, a2, r2, p(Y, d), T)) no obtienen los valores especificados en la sustitución Sin embargo, en lugar de computar el conjunto de complementos de una sustitución (que puede ser un conjunto infinito) proponemos anotar la prohibición con el propio unificador y utilizarla para determinar cuáles son las variables de esa prohibición no pueden ser en futuras unificaciones para evitar un conflicto. Por lo tanto denotamos prohibiciones anotadas como prh( ̄I) . . Es un conjunto de unificadores. Las normas anotadas3 se interpretan como constructos deonticos con influencias restringidas, es decir, su efecto (sobre agentes, roles e ilocuciones) ha sido limitado por el conjunto de unificadores. Una prohibición puede estar en conflicto con varias obligaciones en una \"escena normativa\" dada s = id, Δ y necesitamos registrar (y posiblemente evitar) todos estos conflictos. Definimos a continuación un algoritmo que asegura que una posición normativa se añada a una \"escena normativa\" de tal manera que no cause ningún conflicto. 3 Aunque proponemos limitar las prohibiciones, el mismo mecanismo puede utilizarse para definir la reducción de obligaciones en su lugar. Estas diferentes políticas dependen de la semántica deontica prevista y de los requisitos de los sistemas abordados. Por ejemplo, algunos MAS pueden exigir que sus agentes no actúen en presencia de conflictos, es decir, que se reduzca la obligación. 6.1 Resolución de conflictos Proponemos una forma de resolver los conflictos normativos mediante la unificación. Detectamos la superposición de las influencias de las normas, es decir. cómo afectan al comportamiento de los agentes afectados, y reducimos la influencia de la posición normativa, mediante el uso adecuado de las anotaciones al comprobar si la norma se aplica a las ilocuciones. El algoritmo mostrado en la Figura 4 muestra cómo mantenemos un conjunto de normas libres de conflictos. Añade una norma dada N a un estado normativo existente, libre de conflictos Δ, obteniendo un nuevo estado normativo resultante Δ que es libre de conflictos, es decir, sus prohibiciones están anotadas con un conjunto de conjuntos de conflictos que indican qué fijaciones para variables deben evitarse para que los conflictos no tengan lugar. algoritmo addNorm(N, Δ) comienza 1 marca de tiempo(N) 2 caso N de 3 per( ̄I): Δ := Δ  {N} 4 prh(I): si N  Δ s.t. Conflict(N, N, Las líneas 4-5 abordan el caso cuando intentamos agregar una prohibición de base a un estado normativo: si entra en conflicto con cualquier obligación, entonces se descarta; de lo contrario se añade al estado normativo. En las líneas 6 a 12 se describe la situación en que la posición normativa que debe añadirse es una prohibición no básica. En este caso, el algoritmo inicializa un conjunto vacío y bucles (línea 9-10) a través de las normas N en el antiguo estado normativo Δ. Después de encontrar uno que entra en conflicto con N, el algoritmo actualiza el valor de la nueva configuración de conflicto (línea 10). Mediante el bucle a través de Δ, somos capaces de comprobar cualquier conflicto entre la nueva prohibición y las obligaciones existentes, construyendo adecuadamente la anotación  que se utilizará al añadir N a Δ en la línea 11. En las líneas 13 a 27 se describe cómo se ajusta una nueva obligación a un estado normativo existente. Hacemos uso de dos conjuntos inicialmente vacíos, temporales, Δ1, Δ2. El algoritmo pasa a través de Δ (líneas 16-25) recogiendo las prohibiciones anotadas N Hay, sin embargo, dos casos a tratar: el de cuando un motivo La Sexta Intl. Conjunto Conf. sobre los agentes autónomos y los sistemas multiagentes (AAMAS 07) se encuentra la prohibición 641 (línea 17), y su excepción, que abarca las prohibiciones no terrestres (línea 20). En ambos casos, la antigua prohibición se almacena en Δ1 (líneas 18 y 23) para ser posteriormente retirada de Δ (línea 26). Sin embargo, en el caso de una prohibición no terrestre, el algoritmo actualiza su anotación de conjuntos de conflicto (línea 24). El bucle garantiza que se lleve a cabo una búsqueda exhaustiva (lineal) a través de un estado normativo, comprobando si la nueva obligación está en conflicto con cualquier prohibición existente, posiblemente actualizando las anotaciones de estas prohibiciones en conflicto. En la línea 26 el algoritmo construye la nueva actualización Δ eliminando las antiguas prohibiciones almacenadas en Δ1 y añadiendo las prohibiciones actualizadas almacenadas en Δ2 (si las hay), así como la nueva obligación N. Nuestro algoritmo propuesto es correcto en que, para una posición normativa dada N y un estado normativo Δ, proporciona un nuevo estado normativo Δ en el que todas las prohibiciones tienen anotaciones que registran cómo se unifican con las obligaciones existentes. Sin embargo, las anotaciones pueden estar vacías: este es el caso cuando tenemos una prohibición básica o una prohibición que no unifica/conflige con ninguna obligación. Los permisos no afectan a nuestro algoritmo y se tratan adecuadamente (línea 3). Cualquier intento de insertar una prohibición de base que entre en conflicto, produce el mismo estado normativo (línea 4). Cuando se añade una nueva obligación, el algoritmo garantiza que se tienen en cuenta todas las prohibiciones (líneas 14 a 27), lo que conduce a la eliminación de las prohibiciones sobre el terreno en conflicto o a la actualización de las anotaciones de las prohibiciones no sobre el terreno. El algoritmo siempre termina: los bucles están sobre un conjunto finito Δ y los conflictos comprueban y establecen operaciones siempre terminan. La complejidad del algoritmo es lineal: el conjunto Δ sólo se examina una vez para cada caso posible de norma que se añade. Al gestionar los estados normativos también es posible que necesitemos eliminar posiciones normativas. Esto es sencillo: los permisos se pueden retirar sin ningún problema; las prohibiciones anotadas también se pueden eliminar sin más consideraciones; sin embargo, las obligaciones requieren algunas tareas domésticas. Cuando se va a eliminar una obligación, debemos verificarla contra todas las prohibiciones anotadas a fin de actualizar sus anotaciones. Aplicamos la comprobación de conflicto y obtenemos un unificador, luego eliminamos este unificador de la anotación de prohibiciones. Invocamos el algoritmo de eliminación como removeNorm(N, Δ): devuelve un nuevo estado normativo Δ en el que N ha sido eliminado, con posibles alteraciones a otras posiciones normativas como se explicó. 6.2 Promulgación de una estructura normativa La promulgación de una estructura normativa equivale a la ejecución paralela y distribuida de escenas normativas y transiciones normativas. A título ilustrativo, describiremos a continuación la interacción entre las situaciones normativas de pago y entrega y la transición normativa que los vincula en la mitad superior de la figura 2. Con este objetivo, considere, por ejemplo, que obl(inform(jules, cliente, rod, acc, pay(copper, 400, 350), T) Δpago y que Δentrega tiene prh(inform(rod,wm, jules, cliente, entregado(Z, Q), T)). Tales estados indican que el cliente Jules está obligado a pagar £400 por 350kg de cobre al contador Rod de acuerdo con el pago \"escena normativa\", mientras que Rod, asumiendo el papel de gerente de almacén esta vez, está prohibido entregar cualquier cosa al cliente Jules de acuerdo con la entrega \"escena normativa\". Para cada \"escena normativa\", el proceso de promulgación es el siguiente. En primer lugar, procesa su cola de mensajes entrantes que contiene tres tipos de mensajes: declaraciones de la actividad a la que está vinculada; y comandos normativos para agregar o eliminar posiciones normativas. Por ejemplo, en nuestro ejemplo, el pago \"escena normativa\" recoge la ilocución I = utt((inform(jules, cliente, rod, acc, pay(cobre, 400, 350), 35)) para el cliente Jules pendiente de pago por cobre (a través de la flecha A en la figura 2). Las Uterancias son timestamped y subsecuentemente agregadas al estado normativo. Tendríamos Δpayment = Δpayment {I}, en nuestro ejemplo. Al recibir órdenes normativas para agregar o eliminar una posición normativa, la \"escena normativa\" invoca el algoritmo de adición o eliminación correspondiente descrito en la Sección 6.1. En segundo lugar, la \"escena normativa\" reconoce su cambio de estado al enviar un mensaje desencadenante a cada transición normativa saliente a la que está conectado. En nuestro ejemplo, la \"escena normativa\" del pago estaría señalando su cambio de estado a la transición normativa nt. Para las transiciones normativas, el proceso funciona de manera diferente. Debido a que cada transición normativa controla el funcionamiento de una sola regla, al recibir un mensaje de activación, encuesta cada \"escena normativa\" entrante en busca de sustituciones para el esquema de ilocución relevante en el LHS de su regla. En nuestro ejemplo, nt (responsable de la regla descrita en la Sección 3.4), encuestaría el pago \"escena normativa\" (a través de la flecha B) para sustituciones. Al recibir respuestas de ellos (en forma de conjuntos de sustituciones junto con marcas de tiempo), tiene que unificar las sustituciones de cada una de estas escenas normativas. Para cada unificación que encuentra, la regla se activa, y por lo tanto el comando normativo correspondiente se envía a lo largo de la salida \"escena normativa\". La transición normativa entonces mantiene un seguimiento del mensaje de disparo que envió y de las marcas de tiempo de las posiciones normativas que desencadenó el disparo. Esto se hace para asegurar que las mismas posiciones normativas en el LHS de una regla sólo desencadenen su disparo una vez. En nuestro ejemplo, nt estaría recibiendo  = {X/jules, Y/rod, Z/copper, Q/350} del pago \"escena normativa\". Dado que las substiciones en unifican con la regla nts, la regla es disparada, y el comando normativo add(delivery : obli(rod, wm, jules, client, delivery(copper, 350), T)) es enviado a lo largo de la entrega \"escena normativa\" para obligar a Rod a entregar al cliente Jules 350kg de cobre. Después de eso, la entrega \"escena normativa\" invocaría el algoritmo addNorm de la figura 4 con Δdelivery y N = obli(rod, wm, jules, client, delivered(copper, 350)) como argumentos. 7. TRABAJOS Y CONCLUSIONES RELACIONADOS Nuestras contribuciones en este documento son triples. En primer lugar, introducimos un enfoque para la gestión y el razonamiento de las normas de manera distribuida. Hasta donde sabemos, hay poco trabajo publicado en esta dirección. En [8, 21] se presentan dos idiomas para la aplicación distribuida de las normas en el MAS. Sin embargo, en ambos trabajos, cada agente tiene una interfaz de mensaje local que envía mensajes legales de acuerdo con un conjunto de normas. Dado que estas interfaces son locales para cada agente, las normas sólo pueden expresarse en términos de acciones de ese agente. Se trata de una grave desventaja, por ejemplo. cuando uno necesita activar una obligación para con un agente debido a un cierto mensaje de otro. La segunda contribución es la propuesta de una estructura normativa. La noción es fructífera porque permite la separación de las cuestiones normativas y de procedimiento. La estructura normativa que proponemos evidencia la similitud entre la propagación de posiciones normativas y la propagación 642 La Sexta Intl. Conjunto Conf. sobre Agentes Autónomos y Sistemas Multi-Agentes (AAMAS 07) de tokens en Redes Petri Coloradas. Esa similitud sugiere fácilmente una cartografía entre los dos, y da lugar a un tratamiento analítico conveniente de la estructura normativa, en general, y la complejidad de la detección de conflictos, en particular. La idea de modelar interacciones (en forma de conversaciones) a través de Petri Nets se ha investigado en [18], donde el medio de interacción y los agentes individuales se modelan como subredes de CPN que posteriormente se combinan para su análisis. En [5], las conversaciones se diseñan y analizan por primera vez a nivel de los CPN y posteriormente se traducen en protocolos. Lin et al. [20] mapear esquemas de conversación a CPNs. Según nuestro conocimiento, el uso de esta representación en apoyo de la detección de conflictos en el MAS regulado no ha sido reportado en otros lugares. Por último, presentamos un mecanismo distribuido para resolver los conflictos normativos. Sartor [25] trata los conflictos normativos desde el punto de vista de la teoría jurídica y sugiere una forma de ordenar las normas involucradas. Su idea se implementa en [12], pero requiere un recurso central para el mantenimiento de normas. El enfoque para la detección y resolución de conflictos es una adaptación y extensión del trabajo sobre gráficos de instanciación reportados en [17] y un algoritmo relacionado en [27]. El algoritmo presentado en el presente trabajo puede ser utilizado para administrar estados normativos distribuidos: escenas normativas que suceden en paralelo tienen un estado normativo asociado Δ al que el algoritmo se aplica de forma independiente cada vez que se introduce una nueva norma. Estas tres contribuciones que presentamos en este documento abren muchas posibilidades para el trabajo futuro. Cabe mencionar en primer lugar, que como estrategia amplia estamos trabajando en una generalización de la noción de estructura normativa para hacerla funcionar con diferentes modelos de coordinación, con un contenido deontico más rico y además de diferentes realizaciones computacionales de MAS regulado. Como primer paso en esta dirección estamos aprovechando la disociación entre los protocolos de interacción y la orientación normativa declarativa que la estructura normativa pone a disposición, para proporcionar una capa normativa para las instituciones electrónicas (como se define en [1]). Esperamos que este acoplamiento dote a las instituciones electrónicas de un entorno normativo más flexible y más expresivo. Además, queremos extender nuestro modelo a través de varias direcciones: (1) manejar la negación y las limitaciones como parte del lenguaje de la norma, y en particular la noción de tiempo; (2) dar cabida a múltiples autoridades jerárquicas de normas basadas en roles, en la línea de Cholvy y Cuppens [3] y relaciones de poder como sugiere Carabelea et al. [2]; (3) para captar en el algoritmo de resolución de conflictos diferentes semánticas relacionadas con las nociones deonticas apoyando diferentes axiomaciones (por ejemplo, fuerza relativa de la prohibición frente a la obligación, nociones deonticas predeterminadas, inconsistencias deonticas). En el lado teórico, pretendemos utilizar técnicas de análisis de CPN para caracterizar clases de CPN (por ejemplo, acíclicas, simétricas, etc.) que corresponden a familias de Estructuras Normativas susceptibles a la detección de conflictos fuera de línea. La combinación de estas técnicas junto con nuestros mecanismos de resolución de conflictos en línea pretende dotar a los diseñadores del MAS de la capacidad de incorporar normas en sus sistemas de una manera basada en principios. 8. REFERENCIAS [1] J. L. Arcos, M. Esteva, P. Noriega, J. A. Rodr guez, y C. Sierra. Ingeniería de entornos abiertos con instituciones electrónicas. Journal on Engineering Applications of Artificial Intelligence, 18(2):191-204, 2005. [2] C. Carabelea, O. Boissier, y C. Castelfranchi. Usar el poder social para permitir a los agentes razonar sobre ser parte de un grupo. En el 5o Internat. Taller, EEAT 2004, págs. 166 a 177, 2004. [3] L. Cholvy y F. Cuppens. Solución de conflictos normativos mediante la fusión de funciones. En la Quinta Conferencia Internacional sobre Inteligencia Artificial y Derecho, Washington, Estados Unidos, 1995. [4] S. Christensen y T. B. Haagh. Diseño CPN - vista general de la sintaxis CPN ML. Informe técnico, Universidad de Aarhus, 1996. [5] R. S. Cost, Y. Chen, T. W. Finin, Y. Labrou e Y. Peng. Usando petri redes de colores para modelar la conversación. In Issues in Agent Communication, págs. 178 a 192, Londres, Reino Unido, 2000. [6] F. Dignum. Agentes autónomos con normas. Inteligencia Artificial y Ley, 7(1):69-79, 1999. [7] A. Elhag, J. Breuker y P. Brouwer. Sobre el análisis formal de los conflictos normativos. Información & Comunicaciones. Techn. Ley, 9(3):207-217, Oct. 2000. [8] M. Esteva, W. Vasconcelos, C. Sierra, y J. A. Rodr guez-Aguilar. Consistencia normativa en las instituciones electrónicas. volumen 3171 (LNAI), páginas 494-505. Springer-Verlag, 2004. [9] M. Fitting. Prueba de la lógica de primer orden y del teorema automatizado. Springer-Verlag, Nueva York, Estados Unidos, 1990. [10] N. Fornara, F. Vigan`o y M. Colombetti. Un enfoque impulsado por eventos a las normas en las instituciones artificiales. En el taller AAMAS05: Agentes, normas e instituciones para sistemas multiagente regulados (ANI@REM), Utrecht, 2005. [11] D. Gaertner, P. Noriega y C. Sierra. Ampliación de la arquitectura BDI con compromisos. En Actas del IX Congreso Internacional de la Asociación Catalana de Inteligencia Artificial, 2006. [12] A. Garc a-Camino, P. Noriega, y J.-A. Rodr guez-Aguilar. Un algoritmo para la resolución de conflictos en actividades reguladas compuestas. En el 7o taller Int.Workshop - ESAW 06, 2006. [13] A. Garc a-Camino, J.-A. Rodr guez-Aguilar, C. Sierra y W. Vasconcelos. Una arquitectura distribuida para las Sociedades de Agentes de Normas. En DALT III, volumen 3904 (LNAI), páginas 89 a 105. Springer, 2006. [14] F. Giunchiglia y L. Serafini. Lógicas jerárquicas multilenguaje o: Cómo podemos prescindir de lógicas modales. Inteligencia Artificial, 65(1):29-70, 1994. [15] J. Habermas. La Teoría de la Comunicación Acción, Volumen Uno, La Razón y la Racionalización de la Sociedad. Beacon Press, 1984. [16] K. Jensen. Redes Petri coloreadas: Conceptos básicos, métodos de análisis y usos prácticos (Volumen 1). Springer, 1997. [17] M. Kollingbaum y T. Norman. Estrategias para resolver conflictos de normas con razonamiento práctico. En el Taller de Coordinación de la CEPA en Sociedades de Agentes Emergentes 2004, 2004. [18] J.-L. Koning, G. Francois e Y. Demazeau. Formalización y prevalidación para protocolos de interacción en sistemas multiagente. En ECAI, págs. 298 a 307, 1998. [19] B. Kramer y J. Mylopoulos. Representación del conocimiento. En S. C. Shapiro, editor, Enciclopedia de Inteligencia Artificial, volumen 1, páginas 743-759. John Wiley & Sons, 1992. [20] F. Lin, D. H. Norrie, W. Shen y R. Kremer. Un enfoque basado en esquemas para especificar las políticas de conversación. En Temas de Comunicación de Agentes, págs. 193-204, 2000. [21] N. Minsky. Interacción gobernada por la ley (LGI): Un mecanismo de coordinación y control distribuido (Una introducción y un manual de referencia). Informe técnico, Universidad Rutgers, 2005. [22] T. Murata. Redes Petri: Propiedades, análisis y aplicaciones. Actas del IEEE, 77(4):541-580, 1989. [23] S. Parsons, C. Sierra y N. Jennings. Agentes que razonan y negocian discutiendo. Diario de Lógica y Computación, 8(3):261-292, 1998. [24] A. Ricci y M. Viroli. Artefactos de Coordinación: Una Abstracción Unificante para la Coordinación de Ingeniería Mediada por el Medio Ambiente en MAS. Informatica, 29:433-443, 2005. [25] G. Sartor. Conflictos normativos en el razonamiento jurídico. Inteligencia Artificial y Ley, 1(2-3):209-235, junio de 1992. [26] M. Sergot. Una teoría computacional de posiciones normativas. ACM Trans. Comput. Lógica, 2(4):581-622, 2001. [27] W. W. Vasconcelos, M. Kollingbaum, y T. Norman. Resolver conflictos e incoherencias en las organizaciones virtuales reguladas por normas. En Actas de AAMAS 07, Hawaii, EE.UU., 2007. IFAAMAS. [28] G. H. von Wright. Norma y acción: Una investigación lógica. Routledge y Kegan Paul, Londres, 1963. [29] M. Wooldridge. Una introducción a los sistemas multiagente. John Wiley & Sons, Chichester, Reino Unido, febrero de 2002. El Sexto Intl. Conjunto Conf. sobre agentes autónomos y sistemas de agentes múltiples (AAMAS 07) 643 ",
            "error": [
                "escena normativa",
                "escena normativa",
                "escena normativa",
                "escena normativa",
                "escena normativa",
                "escena normativa correspondiente",
                "escena normativa",
                "escena normativa",
                "escena normativa",
                "escena normativa",
                "escena normativa",
                "escena normativa",
                "escena normativa",
                "escena normativa",
                "escena normativa",
                "escena normativa",
                "escena normativa",
                "escena normativa",
                "escena normativa",
                "escena normativa",
                "escena normativa",
                "escena normativa",
                "escena normativa"
            ]
        },
        "normative transition rule": {
            "translated_key": [
                "regla de transición normativa",
                "regla de transición normativa",
                "regla de transición normativa",
                "regla de transición normativa",
                "regla de transición normativa",
                "regla de transición normativa",
                "regla de transición normativa",
                "pago : obl(inform(X, cliente, Y, acc, pay(Z, P, Q, T)), pago : utt(inform(X, cliente, Y, acc, pay(Z, P, Q), T)) "
            ],
            "translated_annotated_text": "Gestión de Normas Distribuidas en Sistemas Regulados Multi-Agente ∗ Dorian Gaertner Dept. de Computación, Imperial College London, Londres SW7 2AZ, Reino Unido dg00@doc.ic.ac.uk Andrés García-Camino, Pablo Noriega, J.-A. Rodriguez-Aguilar IIIA-CSIC, 08193 Bellaterra, España {andres,pablo,jarážiya.csic.es Wamberto Vasconcelos Dept. de Ciencias de la Computación, Universidad de Aberdeen, Aberdeen AB24 3UE, Reino Unido wvasconcelos@acm.org RESUMEN Las normas son ampliamente reconocidas como un medio de coordinar sistemas multi-agentes. La gestión distribuida de las normas es una cuestión difícil y observamos una falta de realizaciones computacionales verdaderamente distribuidas de los modelos normativos. Con el fin de regular el comportamiento de los agentes autónomos que participan en múltiples actividades relacionadas, proponemos un modelo normativo, la Estructura Normativa (NS), un artefacto que se basa en la propagación de posiciones normativas (obligaciones, prohibiciones, permisos), como consecuencias de las acciones de los agentes. Dentro de un NS, los conflictos pueden surgir debido a la naturaleza dinámica del MAS y la concurrencia de acciones de los agentes. Sin embargo, garantizar la libertad de conflicto de un NS en el momento del diseño es computacionalmente intratable. Demostramos esto formalizando la noción de conflicto, proporcionando un mapeo de los NS en las Redes Petri Coloreadas y tomando prestado los resultados teóricos bien conocidos de ese campo. Dado que se requiere la resolución de conflictos en línea, presentamos un algoritmo tratable que se empleará de forma distribuida. Luego demostramos que este algoritmo es primordial para la promulgación distribuida de un NS. Categorías y sujetos Descriptores I.2.11 [Inteligencia Artificial Distribuida]: Idiomas y estructuras Términos generales Algoritmos, Diseño, Teoría 1. INTRODUCCIÓN Una característica fundamental de los sistemas multiagente abiertos y regulados en los que interactúan agentes autónomos, es que los agentes participantes están destinados a cumplir con las convenciones del sistema. Las normas pueden utilizarse para modelar tales convenciones y, por lo tanto, como medio para regular el comportamiento observable de los agentes [6, 29]. Hay muchas contribuciones sobre el tema de las normas de sociólogos, filósofos y lógicos (por ejemplo, [15, 28]). Sin embargo, hay muy pocas propuestas para la realización computacional de modelos normativos - la forma en que las normas pueden integrarse en el diseño y ejecución de MAS. Los pocos que existen (e.g. [10, 13, 24]), funcionan de manera centralizada, lo que crea cuellos de botella y puntos de fallo únicos. Hasta donde sabemos, ninguna propuesta apoya verdaderamente la promulgación distribuida de entornos normativos. En nuestro documento abordamos ese problema y proponemos medios para manejar los compromisos contradictorios en sistemas abiertos, regulados y multiagentes de manera distribuida. El tipo de MAS regulado que contemplamos consiste en actividades múltiples, simultáneas, relacionadas donde los agentes interactúan. Cada agente puede participar simultáneamente en varias actividades, y cambiar de una actividad a otra. Las acciones de un agente dentro de una actividad pueden tener consecuencias en forma de posiciones normativas (es decir. obligaciones, permisos y prohibiciones) [26] que puedan limitar su comportamiento futuro. Por ejemplo, un agente comprador que se queda sin crédito puede estar prohibido hacer más ofertas, o un agente vendedor está obligado a entregar después de cerrar un acuerdo. Asumimos que los agentes pueden optar por no cumplir todas sus obligaciones y, por lo tanto, pueden ser sancionados por el MAS. Obsérvese que, cuando se distribuyen las actividades, las posiciones normativas deben derivarse de las actividades en las que se generan a aquellas en las que surten efecto. Por ejemplo, la obligación de los vendedores de arriba debe fluir (o propagarse) de una actividad de negociación a una actividad de entrega. Dado que en un MAS abierto y regulado no se pueden incorporar aspectos normativos en el diseño de los agentes, adoptamos la opinión de que el MAS debe complementarse con un conjunto separado de normas que regulen aún más el comportamiento de los agentes participantes. Para modelar la separación de preocupaciones entre el nivel de coordinación (interacciones de agentes) y el nivel normativo (propagación de posiciones normativas), proponemos un artefacto llamado Estructura Normativa (NS). Dentro de un NS pueden surgir conflictos debido a la naturaleza dinámica del MAS y la concurrencia de acciones de los agentes. Por ejemplo, un agente puede estar obligado y prohibido a realizar el 636 978-81-904262-7-5 (RPS) c 2007 IFAAMAS muy mismo acción en una actividad. Dado que la regulación de un MAS implica que los agentes participantes deben ser conscientes de la validez de las acciones que tienen lugar dentro de él, dichos conflictos deben ser identificados y posiblemente resueltos si se necesita una reivindicación de validez para que un agente realice una acción o sea sancionado. Sin embargo, garantizar la libertad de conflicto de un NS en el momento del diseño es computacionalmente intratable. Demostramos esto formalizando la noción de conflicto, proporcionando un mapeo de los NS en las redes de Petri de colores (CPNs) y tomando prestado los resultados teóricos bien conocidos del campo de los CPNs. Creemos que se requiere la detección y resolución de conflictos en línea. Por lo tanto, presentamos un algoritmo tratable para la resolución de conflictos. Este algoritmo es primordial para la promulgación distribuida de un NS. El documento se organiza de la siguiente manera. En la Sección 2 detallamos un escenario para servir de ejemplo a lo largo del artículo. A continuación, en la Sección 3 definimos formalmente el artefacto de la estructura normativa. Además, en la sección 4 formalizamos la noción de conflicto para posteriormente analizar la complejidad de la detección de conflictos en términos de RCP en la sección 5. En la sección 6 se describe la gestión computacional de los NS describiendo su promulgación y presentando un algoritmo para la resolución de conflictos. Por último, comentamos sobre la labor conexa, sacamos conclusiones e informamos sobre la labor futura en la sección 7. 2. SCENARIO Utilizamos un escenario de cadena de suministro en el que empresas e individuos se reúnen en un mercado en línea para realizar negocios. El procedimiento de transacción global puede organizarse como seis actividades distribuidas, representadas como nodos en el diagrama de la Figura 1. En ellas participan diferentes participantes cuyo comportamiento se coordina a través de protocolos. En este escenario, los agentes pueden desempeñar uno de los cuatro papeles: marExit Inscripción Pago Entrega Negociación Coordinación Modelo Contrato Figura 1: Estructura de actividad del contador de ketplace (acc), cliente, proveedor (supp) y gerentes de almacén (wm). Las flechas que conectan las actividades representan cómo los agentes pueden moverse de una actividad a otra. Después de registrarse en el mercado, los clientes y proveedores se reúnen en una actividad en la que negocian los términos de su transacción, es decir. los precios, los importes de las mercancías que deban entregarse, los plazos y otros detalles. En la actividad contractual, se establece el pedido y se prepara una factura. El cliente participará entonces en una actividad de pago, verificando su solvencia e instruyendo a su banco a transferir la cantidad correcta de dinero. Mientras tanto, el proveedor se encargará de la entrega de las mercancías (por ejemplo: a través de un administrador de almacén) en la actividad de entrega. Finalmente, los agentes pueden salir del mercado conforme a un protocolo de salida predeterminado. El contable del mercado participa en la mayoría de las actividades como proveedor confiable de herramientas de auditoría. En el resto del documento nos basaremos en este escenario para ilustrar la noción de estructura normativa e ilustrar nuestro enfoque de la detección y resolución de conflictos en un entorno distribuido. 3. ESTRUCTURA NORMATIVA En los agentes MASs interactúan según protocolos que naturalmente se distribuyen. Abogamos por que las acciones en uno de esos protocolos puedan tener un efecto en la promulgación de otros protocolos. Algunas acciones pueden ser prohibidas u obligatorias, por ejemplo. Tomamos posiciones normativas para ser obligaciones, prohibiciones y permisos similares al trabajo descrito en [26]. La intención de agregar o eliminar una posición normativa que llamamos comando normativo. Los casos de posiciones normativas en un protocolo también pueden tener consecuencias para otros protocolos1. Para definir nuestro lenguaje de norma y especificar cómo se propagan las posiciones normativas, nos hemos inspirado en sistemas multicontexto [14]. Estos sistemas permiten estructurar el conocimiento en teorías formales distintas y definir las relaciones entre ellos. Las relaciones se expresan como reglas puente - la deducibilidad de las fórmulas en algunos contextos conduce a la deducción de otras fórmulas en otros contextos. Recientemente, estos sistemas se han utilizado con éxito para definir arquitecturas de agentes [11, 23]. La metáfora se traduce a nuestro trabajo actual de la siguiente manera: la expresión de las ilocuciones y/o la existencia de posiciones normativas en algunas escenas normativas conduce a la deducción de posiciones normativas en otras escenas normativas. Nos preocupa la propagación y distribución de posiciones normativas dentro de una red de escenas normativas distribuidas como consecuencia de las acciones de los agentes. Tomamos escenas normativas para ser conjuntos de posiciones normativas y expresiones que están asociadas con un protocolo de interacción subyacente correspondiente a una actividad. En esta sección, presentamos primero un lenguaje simple que capta estos aspectos e introduce formalmente las nociones de escena normativa, \"regla de transición normativa\" y estructura normativa. Damos la semántica prevista de estas reglas y mostramos cómo controlar un MAS a través de normas en un ejemplo. 3.1 Conceptos básicos Los componentes básicos de nuestro lenguaje son términos y fórmulas atómicas: Def. 1. Un término, denotado como t, es (i) cualquier constante expresada usando minúsculas (con o sin subíndices), por ejemplo. a, b0, c o ii) cualquier variable expresada utilizando mayúsculas (con o sin subíndices), por ejemplo. X, Y, Zb o iii) cualquier función f(t1,. . . , tn), donde f es un símbolo de función n-ary y t1,.., tn son términos. Algunos ejemplos de términos y funciones son Crédito, precio u oferta (biblia, 30), siendo respectivamente una variable, una constante y una función. Estaremos haciendo uso de identificadores en todo el papel, que son términos constantes y también necesitan la siguiente definición: Def. 2. Una fórmula atómica es cualquier construcción p(t1,. . . , tn), donde p es un símbolo predicado n-ary y t1,. . . , son términos. El conjunto de todas las fórmulas atómicas se denota como Δ. Nos centramos en una clase expresiva de MASs en la que la interacción se lleva a cabo por medio de actos de discurso ilocutionarios intercambiados entre los agentes participantes: Def. 3. I I I son las fórmulas atómicas terrestres que tienen la forma p(ag, r, ag, r, , t) donde p es un elemento de 1 Aquí, abstracto de protocolos y se refieren a ellos genéricamente como actividades. El Sexto Intl. Conjunto Conf. en Agentes Autónomos y Sistemas Multi-Agentes (AAMAS 07) 637 un conjunto de partículas ilocucionarias (por ejemplo: informar, petición, oferta); ag, ag son identificadores de agente; r, r son identificadores de rol; , un término de base arbitrario, es el contenido del mensaje, construido a partir de un lenguaje de contenido compartido; t  N es un sello de tiempo. El significado intuitivo de p(ag, r, ag, r, m, t) es que agente ag jugando rol r enviado mensaje m a agente ag jugando rol r en el momento t. Un ejemplo de una ilocución es informar(ag4, supp, ag3, cliente, offer(wire, 12), 10). A veces es útil referirse a las ilocuciones que no están totalmente fundamentadas, es decir, aquellas que pueden contener variables no instantiated (libres). En la descripción de un protocolo, por ejemplo, los valores precisos del mensaje intercambiado pueden quedar sin especificar. Durante la promulgación de los agentes del protocolo se producirán los valores reales que darán lugar a una ilocución del suelo. Así podemos definir esquemas de ilocución: Def. 4. Un esquema de ilocución ̄I es cualquier fórmula atómica p(ag, r, ag, r, ♥, t) en la que algunos de los términos pueden ser variables o pueden contener variables. 3.2 Definición formal de la noción de NS Primero definimos las escenas normativas de la siguiente manera: Def. 5. Una escena normativa es una tupla s = ids, Δs donde los ids son un identificador de escena y Δs es el conjunto de fórmulas atómicas Por ejemplo, una instantánea del estado de la escena normativa de entrega de nuestro escenario podría ser representada como: Δs = 8 < : utt(request(sean, client, kev, wm, receive(wire, 200), 20)), utt(accept(kev, wm, seen, customer, receive(wire, 200), 30)) 9 = ; Es decir, Tenga en cuenta que el estado de una escena normativa Δs evoluciona con el tiempo. Estas escenas normativas están conectadas entre sí a través de transiciones normativas que especifican cómo las expresiones y posiciones normativas en una escena afectan a otras escenas normativas. Como se mencionó anteriormente, las actividades no son independientes, ya que las ilocuciones pronunciadas en algunas de ellas pueden tener un efecto en otras. Las reglas normativas de transición definen las condiciones bajo las cuales se genera un comando normativo. Estas condiciones son declaraciones o posiciones normativas asociadas a un protocolo dado (denominadas por ejemplo. actividad : expresión ) que dan un comando normativo, es decir. la adición o supresión de otra posición normativa, posiblemente relacionada con una actividad diferente. Nuestras reglas de transición están así definidas: Def. 6. Una \"regla de transición normativa\" R es de la forma: R ::= V C V ::= ids : D  V, V D ::= N  utt( ̄I) N ::= per( ̄I)  prh( ̄I)  obli( ̄I) C ::= add(ids : N)  remove(ids : N) donde ̄I es permiso, prohibición u obligación), ids es un identificador de la actividad s y C es un comando normativo. Dotamos nuestro lenguaje con la semántica habitual de los lenguajes basados en reglas [19]. Las reglas trazan una estructura normativa existente a una nueva estructura normativa en la que sólo cambia el estado de las escenas normativas. En las definiciones siguientes nos basamos en el concepto estándar de sustitución [9]. Def. 7. Una transición normativa es una tupla b = idb, rb donde idb es un identificador y rb es una \"regla de transición normativa\". Proponemos ampliar la noción de MAS, regulada por protocolos, con una capa adicional consistente en escenas normativas y transiciones normativas. Esta capa se representa como un gráfico bipartito que llamamos estructura normativa. Una estructura normativa relaciona escenas normativas y transiciones normativas especificando qué posiciones normativas deben generarse o eliminarse en qué escenas normativas. Def. 8. Una estructura normativa es un gráfico bipartito etiquetado NS = Nodos, bordes, Lin, Lout. Nodos es un conjunto de Sâ B donde S es un conjunto de escenas normativas y B es un conjunto de transiciones normativas. Edges es un conjunto Ain Aout donde Ain  S × B es un conjunto de arcos de entrada etiquetados con una fórmula atómica utilizando la función de etiquetado Lin : Ain → D; y Aout  B × S es un conjunto de arcos de salida etiquetados con una posición normativa utilizando la función de etiquetado Lout : Aout → N. Lo siguiente debe contener: 1. Cada fórmula atómica que aparece en el LHS de una regla rb debe ser de la forma (ids : D) donde s â € € € € TM € € € € € € € € € € € € € € € € € € € € € € € € € Ain tal que es = La fórmula atómica que aparece en el RHS de una regla rb debe ser de la forma add(ids : N) o remove(ids : N) donde s â € S y â € Aout tal que aout = (b, s) y Lout (aout ) = N. 3. Ain tal que a = (s, b) y b = idb, rb y Lin (a) = D entonces (ids:D) debe ocurrir en el LHS de rb. 4. Afuera de tal manera que a = (b, s) y b = idb, rb y Lout (a) = N luego add(ids : N) o remove(ids : N) deben ocurrir en el RHS de rb. Los dos primeros puntos aseguran que cada fórmula atómica en el LHS de una \"regla de transición normativa\" etiqueta un arco que entra en la transición normativa apropiada en la estructura normativa, y que la fórmula atómica en el RHS etiqueta el arco saliente correspondiente. Los puntos tres y cuatro aseguran que las etiquetas de todos los arcos entrantes se utilicen en el LHS de la \"regla de transición normativa\" en la que entran estos arcos, y que las etiquetas de todos los arcos salientes se utilicen en el RHS de la \"regla de transición normativa\" que estos arcos dejan. 3.3 Semántica Destinada La semántica formal se definirá mediante un mapeo a Redes Petri Coloradas en la Sección 5.1. Aquí comenzamos a definir la semántica prevista de las reglas normativas de transición describiendo cómo una regla cambia un escenario normativo de una estructura normativa existente que produce una nueva estructura normativa. Cada regla se activa una vez para cada sustitución que unifica el lado izquierdo V de la regla con el estado de las escenas normativas correspondientes. Una fórmula atómica (es decir, una declaración o una posición normativa) si es unificable con una declaración o posición normativa que pertenece al estado del escenario normativo correspondiente. Cada vez que se activa una regla, se lleva a cabo el comando normativo especificado a la derecha de esa regla, con la intención de añadir o eliminar una posición normativa del estado de la escena normativa correspondiente. Sin embargo, la adición no es incondicional, ya que pueden surgir conflictos. Este tema se tratará en las secciones 4 y 6.1. 638 La Sexta Intl. Conjunto Conf. en Agentes Autónomos y Sistemas Multi-Agentes (AAMAS 07) 3.4 Ejemplo En nuestro ejemplo de ejecución tenemos la siguiente \"regla de transición normativa\": \"pago : obl(inform(X, cliente, Y, acc, pay(Z, P, Q, T)), pago : utt(inform(X, cliente, Y, acc, pay(Z, P, Q), T)) \" entrega : add La norma es una obligación del agente Y (esta vez asumiendo el papel de gerente de almacén wm) de enviar un mensaje al cliente X que el artículo Z ha sido entregado. En la Figura 2 se muestra una representación diagnóstica de cómo se relacionan las actividades y una estructura normativa: Pago Entrega Contrato Nivel Normativo Salida Registro Pago Entrega Negociación Nivel de Coordinación Contrato nt Figura 2: Actividades y Estructura Normativa A medida que se pronuncian las ilocuciones durante las actividades, surgen posiciones normativas. Las preferencias y las posiciones normativas se combinan en normas de transición, lo que provoca el flujo de posiciones normativas entre las distintas situaciones normativas. La conexión entre los dos niveles se describe en la sección 6.2. 4. DEFINICIÓN DE CONFLICTOS Los términos conflicto deontico e inconsistencia deontica se han utilizado indistintamente en la literatura. Sin embargo, en este trabajo adoptamos el punto de vista de [7] en el que los autores sugieren que surge una inconsistencia deontica cuando una acción es simultáneamente permitida y prohibida - ya que un permiso no puede ser actuado en consecuencia, no se produce un conflicto real. Sin embargo, las situaciones en que una acción está simultáneamente obligada y prohibida son conflictos deonticos, ya que tanto las obligaciones como las prohibiciones influyen en los comportamientos en conflicto. El contenido de las posiciones normativas en este trabajo son ilocuciones. Por lo tanto, surge un conflicto normativo cuando una ilocución está simultáneamente obligada y prohibida. Proponemos utilizar la noción estándar de unificación [9] para detectar cuándo se superponen una prohibición y un permiso. Por ejemplo, una obligación obli(informar(A1, R1, A2, R2, p(c, X, T)) y una prohibición prh(informar(a1, r1, a2, r2, p(Y, d), T)) están en conflicto ya que se unifican en el punto Capturamos formalmente esta noción: Def. 9. Un conflicto (deontico) surge entre dos posiciones normativas N y N bajo una sustitución Es decir, una prohibición y una obligación están en conflicto si, y sólo si, sus ilocuciones se unifican en virtud de La sustitución, llamada aquí el conjunto de conflictos, unifica los agentes, roles y fórmulas atómicas. Asumimos que unificar es una implementación adecuada de un algoritmo de unificación que i) termina siempre (posiblemente fallando, si no se puede encontrar un unificador); ii) es correcto; y iii) tiene complejidad computacional lineal. Las incoherencias causadas por la misma ilocución, que se permiten y prohíben simultáneamente, pueden formalizarse de manera similar. En este trabajo nos centramos en los conflictos de prohibición/obligación, pero la maquinaria computacional introducida en la Sección 6.1 también puede ser utilizada para detectar inconsistencias de prohibición/permiso, si sustituimos la modalidad obli por per. 5. FORMALIZACIÓN DEL CONFLICTO-FREEDOM En esta sección presentamos algunos conocimientos de fondo sobre CPN asumiendo una comprensión básica de las redes Petri ordinarias. Para detalles técnicos, remitimos al lector a [16]. A continuación, mapeamos los NS a los CPN y analizamos sus propiedades. Los CPN combinan la fuerza de las redes Petri con la fuerza de los lenguajes de programación funcionales. Por un lado, las redes Petri proporcionan los primitivos para la descripción de la sincronización de los procesos concurrentes. Como se observa en [16], los CPN tienen una semántica que se basa en la verdadera concurrencia, en lugar de entrelazarse. En nuestra opinión, es más fácil trabajar con una semántica de verdadera moneda porque es la forma en que prevemos la conexión entre el nivel de coordinación y el nivel normativo de un sistema multi-agente. Por otra parte, los lenguajes de programación funcionales utilizados por los CPN proporcionan los primitivos para la definición de los tipos de datos y la manipulación de sus valores de datos. Por lo tanto, podemos traducir fácilmente expresiones de una estructura normativa. Por último, pero no por ello menos importante, los CPN tienen una semántica bien definida que define inequívocamente el comportamiento de cada CPN. Además, los CPN tienen un gran número de métodos e instrumentos de análisis formales mediante los cuales se pueden demostrar las propiedades de los CPN. En resumen, los CPN nos proporcionan todas las características necesarias para razonar formalmente sobre las estructuras normativas, dado que se proporciona una cartografía adecuada. De acuerdo con las redes Petri, los estados de un CPN están representados por medio de lugares. Pero a diferencia de Petri Nets, cada lugar tiene un tipo de datos asociado determinando el tipo de datos que el lugar puede contener. Un estado de un CPN se llama marca. Consiste en un número de fichas colocadas en los lugares individuales. Cada token lleva un valor de datos que tiene el tipo del lugar correspondiente. En general, un lugar puede contener dos o más tokens con el mismo valor de datos. Por lo tanto, una marca de un CPN es una función que mapea cada lugar en un multi-set2 de tokens del tipo correcto. Uno a menudo se refiere a los valores token como colores token y uno también se refiere a los tipos de datos como conjuntos de colores. Los tipos de un CPN pueden ser arbitrariamente complejos. Las acciones en un PCN están representadas mediante transiciones. Un arco entrante en una transición desde un lugar indica que la transición puede eliminar tokens del lugar correspondiente mientras que un arco saliente indica que la transición puede añadir tokens. El número exacto de tokens y sus valores de datos son determinados por las expresiones de arco, que se codifican utilizando el lenguaje de programación elegido para el CPN. Una transición está habilitada en un CPN si y sólo si todos los 2 A multi-set (o bolsa) es una extensión a la noción de conjunto, permitiendo la posibilidad de múltiples apariencias del mismo elemento. El Sexto Intl. Conjunto Conf. en Agentes Autónomos y Sistemas Multi-Agentes (AAMAS 07) 639 variables en las expresiones de sus arcos entrantes se unen a algunos valores (cada una de estas fijaciones se refiere como un elemento vinculante). Si es así, la transición puede ocurrir eliminando tokens de sus lugares de entrada y añadiendo tokens a sus lugares de salida. Además de las expresiones de arco, es posible conectar una expresión booleana de guardia (con variables) a cada transición. Juntando todos los elementos de arriba obtenemos una definición formal de CPN que se empleará más adelante para propósitos de mapeo. Def. 10. Un CPN es un conjunto finito de tipos no vacíos, también llamados conjuntos de colores; ii) P es un conjunto finito de lugares; iii) T es un conjunto finito de transiciones; iv) A es un conjunto finito de arcos; v) N es una función de nodo definida de A a P × T • T × P; vi) C es una función de color de P a فارسى; vii) G es una De acuerdo con las redes Petri ordinarias, el comportamiento concurrente de un CPN se basa en la noción de paso. Formalmente, un paso es un no vacío y finito multi-set sobre el conjunto de todos los elementos de unión. Deje que el paso S se active en una marca M. Entonces, S puede ocurrir, cambiando la marca M a M. Además, decimos que el marcado M es directamente accesible desde el marcado M por la ocurrencia del paso S, y lo denotamos por M[S > M. Una secuencia de ocurrencia finita es una secuencia finita de pasos y marcas: M1[S1 > M2. . . Mn[Sn > Mn+1 de tal manera que n+N y Mi[Si > Mi+1 . . , n}. El conjunto de todas las marcas posibles alcanzables para una red neta de una marca M se llama su conjunto de alcance, y se denota como R(Net, M). 5.1 Mapeo a redes de Petri de colores Nuestra estructura normativa es un gráfico bipartito etiquetado. Lo mismo puede decirse de una red Petri coloreada. Estamos presentando un mapeo f de uno a otro, con el fin de proporcionar semántica para la estructura normativa y probar las propiedades al respecto mediante el uso de resultados teóricos bien conocidos de trabajo en CPNs. El mapeo f hace uso de correspondencias entre escenas normativas y lugares CPN, transiciones normativas y transiciones CPN y finalmente, entre etiquetas de arco y expresiones de arco CPN. S → P B → T Lin Lout → E El conjunto de tipos es el conjunto singleton que contiene el color NP (es decir. * = {NP}). Este tipo complejo está estructurado de la siguiente manera (utilizamos CPN-ML [4] sintaxis): color NPT = con Obl  Per  Prh  NoMod color IP = con infor  declaramos  offer color UTT = record illp : IP ag1, role1, ag2, role2 : string content : string time : int color NP = Los arcos son trazados casi directamente. A es un conjunto finito de arcos y N es una función de nodo, de tal manera que Aa Aa Ain Aout. N(a) = a. La función de inicialización I se define como I(p) = Δs ( Por último, la función de color C asigna el color NP a cada lugar: C(p) = NP (­p ­P). No estamos haciendo uso de la función de guardia G. En el trabajo futuro, esta función se puede utilizar para modelar restricciones cuando extendemos la expresividad de nuestro lenguaje de norma. 5.2 Propiedades de las estructuras normativas Después de haber definido el mapeo desde las estructuras normativas hasta las redes de Petri coloreadas, ahora analizamos las propiedades de los CPN que nos ayudan a entender la complejidad de la detección de conflictos. Una pregunta que nos gustaría responder es, si en un momento dado, una determinada estructura normativa está libre de conflictos. Tal instantánea de una estructura normativa corresponde a una marca en el CPN cartografiado. Def. 11. Dada una marca Mi, esta marca es libre de conflicto si p  P. np1, np2  Mi(p) tal que np1.mode = Obl y np2.mode = Prh y np1.illoc y np2.illoc unificar bajo una sustitución válida. Otra pregunta interesante sería si se producirá un conflicto a partir de una instantánea del sistema propagando las posiciones normativas. Para responder a esta pregunta, primero traducimos la instantánea de la estructura normativa al CPN correspondiente y luego ejecutamos la secuencia de ocurrencia finita de marcas y pasos, verificando la libertad de conflicto de cada marca a medida que avanzamos. Def. 12. Dada una marca Mi, una secuencia de ocurrencia finita Si, Si+1,..., Sn se llama libre de conflictos, si y sólo si Mi[Si > Mi+1. . . Mn[Sn > Mn+1 y Mk están libres de conflictos para todos los k, de modo que i ≤ k ≤ n + 1. Sin embargo, la cuestión principal que nos gustaría investigar, es si una estructura normativa dada es o no resistente a los conflictos, es decir, si los agentes que promulgan el MAS son capaces de provocar conflictos a través de sus acciones. Tan pronto como se incluye la posibilidad de acciones (o declaraciones) de agentes autónomos, se pierde el determinismo. Después de haber mapeado la estructura normativa a un CPN, ahora añadimos modelos de CPN de las interacciones de agentes. Cada forma de interacción con el agente (es decir, cada actividad) se puede modelar utilizando CPN en la línea de Cost et al. [5]. Estos CPN no determinantes alimentan tokens en el CPN que modela la estructura normativa. Esto lleva a la introducción de no-determinismo en el PCN combinado. La mitad inferior de la figura 3 muestra parte de un modelo CPN de un protocolo de agente donde el arco denotado con 1 representa alguna pronunciación de una ilocución por un agente. La transición de destino de este arco, no sólo mueve un token al siguiente estado de este CPN, sino que también coloca un token en el lugar correspondiente a la escena normativa apropiada en el modelo del CPN de la estructura normativa (a través del arco 2). La transición 3 finalmente podría propagar ese símbolo en forma de una obligación, por ejemplo. Así, a partir de una marca dada, muchas secuencias de ocurrencia diferentes son posibles dependiendo de las acciones de los agentes. Utilizamos el conjunto de alcance R para definir una situación en la que los agentes no pueden causar conflictos. 640 La Sexta Intl. Conjunto Conf. sobre Agentes Autónomos y Sistemas Multi-Agentes (AAMAS 07) Figura 3: Construcción del CPN combinado Def. 13. Dado un N neto, una marca M es resistente a los conflictos si y sólo si todas las marcas en R(N,M) están libres de conflictos. La verificación de la libertad de conflicto de una marca se puede hacer en tiempo polinomio mediante la verificación de todos los lugares del CPN en busca de fichas en conflicto. La libertad de conflicto de una secuencia de ocurrencia en el CPN que representa la estructura normativa también se puede hacer en tiempo polinomio ya que esta secuencia es determinista dada una instantánea. El hecho de que se diseñe o no una estructura normativa corresponde con seguridad a la comprobación de la resistencia a los conflictos de la marca M0 inicial. Ahora, verificar la resistencia al conflicto de una marca se convierte en una tarea muy difícil. Corresponde al problema de la accesibilidad en un CPN: ¿se puede alcanzar un estado o se puede lograr una marca que contenga un conflicto?. Este problema de alcanzabilidad es conocido por ser NP-completo para las redes Petri ordinarias [22] y como las RCP son funcionalmente idénticas, no podemos esperar verificar la resistencia a los conflictos de una estructura normativa fuera de línea en un tiempo razonable. Por lo tanto, se necesitan mecanismos de distribución y tiempo de ejecución para garantizar que una estructura normativa mantenga la coherencia. Presentamos uno de esos mecanismos en la sección siguiente. 6. GESTIÓN DE ESTRUCTURAS NORMATIVAS Una vez detectado un conflicto (según se define en la Sección 4), proponemos emplear al unificador para resolver el conflicto. En nuestro ejemplo, si las variables en prh(inform(a1, r1, a2, r2, p(Y, d), T)) no obtienen los valores especificados en la sustitución Sin embargo, en lugar de computar el conjunto de complementos de una sustitución (que puede ser un conjunto infinito) proponemos anotar la prohibición con el propio unificador y utilizarla para determinar cuáles son las variables de esa prohibición no pueden ser en futuras unificaciones para evitar un conflicto. Por lo tanto denotamos prohibiciones anotadas como prh( ̄I) . . Es un conjunto de unificadores. Las normas anotadas3 se interpretan como constructos deonticos con influencias restringidas, es decir, su efecto (sobre agentes, roles e ilocuciones) ha sido limitado por el conjunto de unificadores. Una prohibición puede estar en conflicto con varias obligaciones en una escena normativa dada s = id, Δ y tenemos que registrar (y posiblemente evitar) todos estos conflictos. Definimos a continuación un algoritmo que garantiza que una posición normativa se añada a una escena normativa de tal manera que no cause ningún conflicto. 3 Aunque proponemos limitar las prohibiciones, el mismo mecanismo puede utilizarse para definir la reducción de obligaciones en su lugar. Estas diferentes políticas dependen de la semántica deontica prevista y de los requisitos de los sistemas abordados. Por ejemplo, algunos MAS pueden exigir que sus agentes no actúen en presencia de conflictos, es decir, que se reduzca la obligación. 6.1 Resolución de conflictos Proponemos una forma de resolver los conflictos normativos mediante la unificación. Detectamos la superposición de las influencias de las normas, es decir. cómo afectan al comportamiento de los agentes afectados, y reducimos la influencia de la posición normativa, mediante el uso adecuado de las anotaciones al comprobar si la norma se aplica a las ilocuciones. El algoritmo mostrado en la Figura 4 muestra cómo mantenemos un conjunto de normas libres de conflictos. Añade una norma dada N a un estado normativo existente, libre de conflictos Δ, obteniendo un nuevo estado normativo resultante Δ que es libre de conflictos, es decir, sus prohibiciones están anotadas con un conjunto de conjuntos de conflictos que indican qué fijaciones para variables deben evitarse para que los conflictos no tengan lugar. algoritmo addNorm(N, Δ) comienza 1 marca de tiempo(N) 2 caso N de 3 per( ̄I): Δ := Δ  {N} 4 prh(I): si N  Δ s.t. Conflict(N, N, Las líneas 4-5 abordan el caso cuando intentamos agregar una prohibición de base a un estado normativo: si entra en conflicto con cualquier obligación, entonces se descarta; de lo contrario se añade al estado normativo. En las líneas 6 a 12 se describe la situación en que la posición normativa que debe añadirse es una prohibición no básica. En este caso, el algoritmo inicializa un conjunto vacío y bucles (línea 9-10) a través de las normas N en el antiguo estado normativo Δ. Después de encontrar uno que entra en conflicto con N, el algoritmo actualiza el valor de la nueva configuración de conflicto (línea 10). Mediante el bucle a través de Δ, somos capaces de comprobar cualquier conflicto entre la nueva prohibición y las obligaciones existentes, construyendo adecuadamente la anotación  que se utilizará al añadir N a Δ en la línea 11. En las líneas 13 a 27 se describe cómo se ajusta una nueva obligación a un estado normativo existente. Hacemos uso de dos conjuntos inicialmente vacíos, temporales, Δ1, Δ2. El algoritmo pasa a través de Δ (líneas 16-25) recogiendo las prohibiciones anotadas N Hay, sin embargo, dos casos a tratar: el de cuando un motivo La Sexta Intl. Conjunto Conf. sobre los agentes autónomos y los sistemas multiagentes (AAMAS 07) se encuentra la prohibición 641 (línea 17), y su excepción, que abarca las prohibiciones no terrestres (línea 20). En ambos casos, la antigua prohibición se almacena en Δ1 (líneas 18 y 23) para ser posteriormente retirada de Δ (línea 26). Sin embargo, en el caso de una prohibición no terrestre, el algoritmo actualiza su anotación de conjuntos de conflicto (línea 24). El bucle garantiza que se lleve a cabo una búsqueda exhaustiva (lineal) a través de un estado normativo, comprobando si la nueva obligación está en conflicto con cualquier prohibición existente, posiblemente actualizando las anotaciones de estas prohibiciones en conflicto. En la línea 26 el algoritmo construye la nueva actualización Δ eliminando las antiguas prohibiciones almacenadas en Δ1 y añadiendo las prohibiciones actualizadas almacenadas en Δ2 (si las hay), así como la nueva obligación N. Nuestro algoritmo propuesto es correcto en que, para una posición normativa dada N y un estado normativo Δ, proporciona un nuevo estado normativo Δ en el que todas las prohibiciones tienen anotaciones que registran cómo se unifican con las obligaciones existentes. Sin embargo, las anotaciones pueden estar vacías: este es el caso cuando tenemos una prohibición básica o una prohibición que no unifica/conflige con ninguna obligación. Los permisos no afectan a nuestro algoritmo y se tratan adecuadamente (línea 3). Cualquier intento de insertar una prohibición de base que entre en conflicto, produce el mismo estado normativo (línea 4). Cuando se añade una nueva obligación, el algoritmo garantiza que se tienen en cuenta todas las prohibiciones (líneas 14 a 27), lo que conduce a la eliminación de las prohibiciones sobre el terreno en conflicto o a la actualización de las anotaciones de las prohibiciones no sobre el terreno. El algoritmo siempre termina: los bucles están sobre un conjunto finito Δ y los conflictos comprueban y establecen operaciones siempre terminan. La complejidad del algoritmo es lineal: el conjunto Δ sólo se examina una vez para cada caso posible de norma que se añade. Al gestionar los estados normativos también es posible que necesitemos eliminar posiciones normativas. Esto es sencillo: los permisos se pueden retirar sin ningún problema; las prohibiciones anotadas también se pueden eliminar sin más consideraciones; sin embargo, las obligaciones requieren algunas tareas domésticas. Cuando se va a eliminar una obligación, debemos verificarla contra todas las prohibiciones anotadas a fin de actualizar sus anotaciones. Aplicamos la comprobación de conflicto y obtenemos un unificador, luego eliminamos este unificador de la anotación de prohibiciones. Invocamos el algoritmo de eliminación como removeNorm(N, Δ): devuelve un nuevo estado normativo Δ en el que N ha sido eliminado, con posibles alteraciones a otras posiciones normativas como se explicó. 6.2 Promulgación de una estructura normativa La promulgación de una estructura normativa equivale a la ejecución paralela y distribuida de escenas normativas y transiciones normativas. A título ilustrativo, describiremos a continuación la interacción entre las situaciones normativas de pago y entrega y la transición normativa que los vincula en la mitad superior de la figura 2. Con este objetivo, considere, por ejemplo, que obl(inform(jules, cliente, rod, acc, pay(copper, 400, 350), T) Δpago y que Δentrega tiene prh(inform(rod,wm, jules, cliente, entregado(Z, Q), T)). Tales estados indican que el cliente Jules está obligado a pagar £400 por 350kg de cobre al contador Rod de acuerdo con la escena normativa de pago, mientras que Rod, asumiendo el papel de gerente de almacén esta vez, está prohibido entregar cualquier cosa al cliente Jules de acuerdo con la escena normativa de entrega. Para cada escena normativa, el proceso de promulgación es el siguiente. En primer lugar, procesa su cola de mensajes entrantes que contiene tres tipos de mensajes: declaraciones de la actividad a la que está vinculada; y comandos normativos para agregar o eliminar posiciones normativas. Por ejemplo, en nuestro ejemplo, la escena normativa de pago recoge la ilocución I = utt((inform(jules, cliente, varilla, acc, pay(cobre, 400, 350), 35)) para el cliente Jules pendiente de pago por cobre (a través de la flecha A en la figura 2). Las Uterancias son timestamped y subsecuentemente agregadas al estado normativo. Tendríamos Δpayment = Δpayment {I}, en nuestro ejemplo. Al recibir órdenes normativas para agregar o eliminar una posición normativa, la escena normativa invoca el algoritmo de adición o eliminación correspondiente descrito en la Sección 6.1. En segundo lugar, la escena normativa reconoce su cambio de estado al enviar un mensaje desencadenante a cada transición normativa saliente a la que está conectado. En nuestro ejemplo, el escenario normativo de pagos estaría señalando su cambio de estado a la transición normativa nt. Para las transiciones normativas, el proceso funciona de manera diferente. Debido a que cada transición normativa controla el funcionamiento de una sola regla, al recibir un mensaje de activación, encuesta cada escena normativa entrante para sustituciones de los esquemas de ilocución pertinentes en el LHS de su regla. En nuestro ejemplo, nt (responsable de la regla descrita en la Sección 3.4), encuestaría el escenario normativo de pago (vía flecha B) para sustituciones. Al recibir respuestas de ellos (en forma de conjuntos de sustituciones junto con marcas de tiempo), tiene que unificar las sustituciones de cada una de estas escenas normativas. Para cada unificación que encuentra, la regla se activa, y por lo tanto el comando normativo correspondiente se envía a lo largo de la escena normativa de salida. La transición normativa entonces mantiene un seguimiento del mensaje de disparo que envió y de las marcas de tiempo de las posiciones normativas que desencadenó el disparo. Esto se hace para asegurar que las mismas posiciones normativas en el LHS de una regla sólo desencadenen su disparo una vez. En nuestro ejemplo, nt estaría recibiendo  = {X/jules, Y/rod, Z/copper, Q/350} de la escena normativa de pagos. Dado que las substiciones en unifican con la regla nts, la regla es disparada, y el comando normativo add(delivery : obli(rod, wm, jules, client, delivery(copper, 350), T)) es enviado a lo largo de la escena normativa de entrega para obligar a Rod a entregar al cliente Jules 350kg de cobre. Después de eso, la escena normativa de entrega invocaría el algoritmo addNorm de la figura 4 con Δdelivery y N = obli(rod, wm, jules, client, delivered(copper, 350)) como argumentos. 7. TRABAJOS Y CONCLUSIONES RELACIONADOS Nuestras contribuciones en este documento son triples. En primer lugar, introducimos un enfoque para la gestión y el razonamiento de las normas de manera distribuida. Hasta donde sabemos, hay poco trabajo publicado en esta dirección. En [8, 21] se presentan dos idiomas para la aplicación distribuida de las normas en el MAS. Sin embargo, en ambos trabajos, cada agente tiene una interfaz de mensaje local que envía mensajes legales de acuerdo con un conjunto de normas. Dado que estas interfaces son locales para cada agente, las normas sólo pueden expresarse en términos de acciones de ese agente. Se trata de una grave desventaja, por ejemplo. cuando uno necesita activar una obligación para con un agente debido a un cierto mensaje de otro. La segunda contribución es la propuesta de una estructura normativa. La noción es fructífera porque permite la separación de las cuestiones normativas y de procedimiento. La estructura normativa que proponemos evidencia la similitud entre la propagación de posiciones normativas y la propagación 642 La Sexta Intl. Conjunto Conf. sobre Agentes Autónomos y Sistemas Multi-Agentes (AAMAS 07) de tokens en Redes Petri Coloradas. Esa similitud sugiere fácilmente una cartografía entre los dos, y da lugar a un tratamiento analítico conveniente de la estructura normativa, en general, y la complejidad de la detección de conflictos, en particular. La idea de modelar interacciones (en forma de conversaciones) a través de Petri Nets se ha investigado en [18], donde el medio de interacción y los agentes individuales se modelan como subredes de CPN que posteriormente se combinan para su análisis. En [5], las conversaciones se diseñan y analizan por primera vez a nivel de los CPN y posteriormente se traducen en protocolos. Lin et al. [20] mapear esquemas de conversación a CPNs. Según nuestro conocimiento, el uso de esta representación en apoyo de la detección de conflictos en el MAS regulado no ha sido reportado en otros lugares. Por último, presentamos un mecanismo distribuido para resolver los conflictos normativos. Sartor [25] trata los conflictos normativos desde el punto de vista de la teoría jurídica y sugiere una forma de ordenar las normas involucradas. Su idea se implementa en [12], pero requiere un recurso central para el mantenimiento de normas. El enfoque para la detección y resolución de conflictos es una adaptación y extensión del trabajo sobre gráficos de instanciación reportados en [17] y un algoritmo relacionado en [27]. El algoritmo presentado en el presente trabajo puede ser utilizado para administrar estados normativos distribuidos: escenas normativas que suceden en paralelo tienen un estado normativo asociado Δ al que el algoritmo se aplica de forma independiente cada vez que se introduce una nueva norma. Estas tres contribuciones que presentamos en este documento abren muchas posibilidades para el trabajo futuro. Cabe mencionar en primer lugar, que como estrategia amplia estamos trabajando en una generalización de la noción de estructura normativa para hacerla funcionar con diferentes modelos de coordinación, con un contenido deontico más rico y además de diferentes realizaciones computacionales de MAS regulado. Como primer paso en esta dirección estamos aprovechando la disociación entre los protocolos de interacción y la orientación normativa declarativa que la estructura normativa pone a disposición, para proporcionar una capa normativa para las instituciones electrónicas (como se define en [1]). Esperamos que este acoplamiento dote a las instituciones electrónicas de un entorno normativo más flexible y más expresivo. Además, queremos extender nuestro modelo a través de varias direcciones: (1) manejar la negación y las limitaciones como parte del lenguaje de la norma, y en particular la noción de tiempo; (2) dar cabida a múltiples autoridades jerárquicas de normas basadas en roles, en la línea de Cholvy y Cuppens [3] y relaciones de poder como sugiere Carabelea et al. [2]; (3) para captar en el algoritmo de resolución de conflictos diferentes semánticas relacionadas con las nociones deonticas apoyando diferentes axiomaciones (por ejemplo, fuerza relativa de la prohibición frente a la obligación, nociones deonticas predeterminadas, inconsistencias deonticas). En el lado teórico, pretendemos utilizar técnicas de análisis de CPN para caracterizar clases de CPN (por ejemplo, acíclicas, simétricas, etc.) que corresponden a familias de Estructuras Normativas susceptibles a la detección de conflictos fuera de línea. La combinación de estas técnicas junto con nuestros mecanismos de resolución de conflictos en línea pretende dotar a los diseñadores del MAS de la capacidad de incorporar normas en sus sistemas de una manera basada en principios. 8. REFERENCIAS [1] J. L. Arcos, M. Esteva, P. Noriega, J. A. Rodr guez, y C. Sierra. Ingeniería de entornos abiertos con instituciones electrónicas. Journal on Engineering Applications of Artificial Intelligence, 18(2):191-204, 2005. [2] C. Carabelea, O. Boissier, y C. Castelfranchi. Usar el poder social para permitir a los agentes razonar sobre ser parte de un grupo. En el 5o Internat. Taller, EEAT 2004, págs. 166 a 177, 2004. [3] L. Cholvy y F. Cuppens. Solución de conflictos normativos mediante la fusión de funciones. En la Quinta Conferencia Internacional sobre Inteligencia Artificial y Derecho, Washington, Estados Unidos, 1995. [4] S. Christensen y T. B. Haagh. Diseño CPN - vista general de la sintaxis CPN ML. Informe técnico, Universidad de Aarhus, 1996. [5] R. S. Cost, Y. Chen, T. W. Finin, Y. Labrou e Y. Peng. Usando petri redes de colores para modelar la conversación. In Issues in Agent Communication, págs. 178 a 192, Londres, Reino Unido, 2000. [6] F. Dignum. Agentes autónomos con normas. Inteligencia Artificial y Ley, 7(1):69-79, 1999. [7] A. Elhag, J. Breuker y P. Brouwer. Sobre el análisis formal de los conflictos normativos. Información & Comunicaciones. Techn. Ley, 9(3):207-217, Oct. 2000. [8] M. Esteva, W. Vasconcelos, C. Sierra, y J. A. Rodr guez-Aguilar. Consistencia normativa en las instituciones electrónicas. volumen 3171 (LNAI), páginas 494-505. Springer-Verlag, 2004. [9] M. Fitting. Prueba de la lógica de primer orden y del teorema automatizado. Springer-Verlag, Nueva York, Estados Unidos, 1990. [10] N. Fornara, F. Vigan`o y M. Colombetti. Un enfoque impulsado por eventos a las normas en las instituciones artificiales. En el taller AAMAS05: Agentes, normas e instituciones para sistemas multiagente regulados (ANI@REM), Utrecht, 2005. [11] D. Gaertner, P. Noriega y C. Sierra. Ampliación de la arquitectura BDI con compromisos. En Actas del IX Congreso Internacional de la Asociación Catalana de Inteligencia Artificial, 2006. [12] A. Garc a-Camino, P. Noriega, y J.-A. Rodr guez-Aguilar. Un algoritmo para la resolución de conflictos en actividades reguladas compuestas. En el 7o taller Int.Workshop - ESAW 06, 2006. [13] A. Garc a-Camino, J.-A. Rodr guez-Aguilar, C. Sierra y W. Vasconcelos. Una arquitectura distribuida para las Sociedades de Agentes de Normas. En DALT III, volumen 3904 (LNAI), páginas 89 a 105. Springer, 2006. [14] F. Giunchiglia y L. Serafini. Lógicas jerárquicas multilenguaje o: Cómo podemos prescindir de lógicas modales. Inteligencia Artificial, 65(1):29-70, 1994. [15] J. Habermas. La Teoría de la Comunicación Acción, Volumen Uno, La Razón y la Racionalización de la Sociedad. Beacon Press, 1984. [16] K. Jensen. Redes Petri coloreadas: Conceptos básicos, métodos de análisis y usos prácticos (Volumen 1). Springer, 1997. [17] M. Kollingbaum y T. Norman. Estrategias para resolver conflictos de normas con razonamiento práctico. En el Taller de Coordinación de la CEPA en Sociedades de Agentes Emergentes 2004, 2004. [18] J.-L. Koning, G. Francois e Y. Demazeau. Formalización y prevalidación para protocolos de interacción en sistemas multiagente. En ECAI, págs. 298 a 307, 1998. [19] B. Kramer y J. Mylopoulos. Representación del conocimiento. En S. C. Shapiro, editor, Enciclopedia de Inteligencia Artificial, volumen 1, páginas 743-759. John Wiley & Sons, 1992. [20] F. Lin, D. H. Norrie, W. Shen y R. Kremer. Un enfoque basado en esquemas para especificar las políticas de conversación. En Temas de Comunicación de Agentes, págs. 193-204, 2000. [21] N. Minsky. Interacción gobernada por la ley (LGI): Un mecanismo de coordinación y control distribuido (Una introducción y un manual de referencia). Informe técnico, Universidad Rutgers, 2005. [22] T. Murata. Redes Petri: Propiedades, análisis y aplicaciones. Actas del IEEE, 77(4):541-580, 1989. [23] S. Parsons, C. Sierra y N. Jennings. Agentes que razonan y negocian discutiendo. Diario de Lógica y Computación, 8(3):261-292, 1998. [24] A. Ricci y M. Viroli. Artefactos de Coordinación: Una Abstracción Unificante para la Coordinación de Ingeniería Mediada por el Medio Ambiente en MAS. Informatica, 29:433-443, 2005. [25] G. Sartor. Conflictos normativos en el razonamiento jurídico. Inteligencia Artificial y Ley, 1(2-3):209-235, junio de 1992. [26] M. Sergot. Una teoría computacional de posiciones normativas. ACM Trans. Comput. Lógica, 2(4):581-622, 2001. [27] W. W. Vasconcelos, M. Kollingbaum, y T. Norman. Resolver conflictos e incoherencias en las organizaciones virtuales reguladas por normas. En Actas de AAMAS 07, Hawaii, EE.UU., 2007. IFAAMAS. [28] G. H. von Wright. Norma y acción: Una investigación lógica. Routledge y Kegan Paul, Londres, 1963. [29] M. Wooldridge. Una introducción a los sistemas multiagente. John Wiley & Sons, Chichester, Reino Unido, febrero de 2002. El Sexto Intl. Conjunto Conf. sobre agentes autónomos y sistemas de agentes múltiples (AAMAS 07) 643 ",
            "error": [
                "regla de transición normativa",
                "regla de transición normativa",
                "regla de transición normativa",
                "regla de transición normativa",
                "regla de transición normativa",
                "regla de transición normativa",
                "regla de transición normativa",
                "pago : obl(inform(X, cliente, Y, acc, pay(Z, P, Q, T)), pago : utt(inform(X, cliente, Y, acc, pay(Z, P, Q), T)) "
            ]
        },
        "normative structure": {
            "translated_key": "estructura normativa",
            "translated_annotated_text": "Gestión de Normas Distribuidas en Sistemas Regulados Multi-Agente ∗ Dorian Gaertner Dept. de Computación, Imperial College London, Londres SW7 2AZ, Reino Unido dg00@doc.ic.ac.uk Andrés García-Camino, Pablo Noriega, J.-A. Rodriguez-Aguilar IIIA-CSIC, 08193 Bellaterra, España {andres,pablo,jarážiya.csic.es Wamberto Vasconcelos Dept. de Ciencias de la Computación, Universidad de Aberdeen, Aberdeen AB24 3UE, Reino Unido wvasconcelos@acm.org RESUMEN Las normas son ampliamente reconocidas como un medio de coordinar sistemas multi-agentes. La gestión distribuida de las normas es una cuestión difícil y observamos una falta de realizaciones computacionales verdaderamente distribuidas de los modelos normativos. Con el fin de regular el comportamiento de los agentes autónomos que participan en múltiples actividades relacionadas, proponemos un modelo normativo, la Estructura Normativa (NS), un artefacto que se basa en la propagación de posiciones normativas (obligaciones, prohibiciones, permisos), como consecuencias de las acciones de los agentes. Dentro de un NS, los conflictos pueden surgir debido a la naturaleza dinámica del MAS y la concurrencia de acciones de los agentes. Sin embargo, garantizar la libertad de conflicto de un NS en el momento del diseño es computacionalmente intratable. Demostramos esto formalizando la noción de conflicto, proporcionando un mapeo de los NS en las Redes Petri Coloreadas y tomando prestado los resultados teóricos bien conocidos de ese campo. Dado que se requiere la resolución de conflictos en línea, presentamos un algoritmo tratable que se empleará de forma distribuida. Luego demostramos que este algoritmo es primordial para la promulgación distribuida de un NS. Categorías y sujetos Descriptores I.2.11 [Inteligencia Artificial Distribuida]: Idiomas y estructuras Términos generales Algoritmos, Diseño, Teoría 1. INTRODUCCIÓN Una característica fundamental de los sistemas multiagente abiertos y regulados en los que interactúan agentes autónomos, es que los agentes participantes están destinados a cumplir con las convenciones del sistema. Las normas pueden utilizarse para modelar tales convenciones y, por lo tanto, como medio para regular el comportamiento observable de los agentes [6, 29]. Hay muchas contribuciones sobre el tema de las normas de sociólogos, filósofos y lógicos (por ejemplo, [15, 28]). Sin embargo, hay muy pocas propuestas para la realización computacional de modelos normativos - la forma en que las normas pueden integrarse en el diseño y ejecución de MAS. Los pocos que existen (e.g. [10, 13, 24]), funcionan de manera centralizada, lo que crea cuellos de botella y puntos de fallo únicos. Hasta donde sabemos, ninguna propuesta apoya verdaderamente la promulgación distribuida de entornos normativos. En nuestro documento abordamos ese problema y proponemos medios para manejar los compromisos contradictorios en sistemas abiertos, regulados y multiagentes de manera distribuida. El tipo de MAS regulado que contemplamos consiste en actividades múltiples, simultáneas, relacionadas donde los agentes interactúan. Cada agente puede participar simultáneamente en varias actividades, y cambiar de una actividad a otra. Las acciones de un agente dentro de una actividad pueden tener consecuencias en forma de posiciones normativas (es decir. obligaciones, permisos y prohibiciones) [26] que puedan limitar su comportamiento futuro. Por ejemplo, un agente comprador que se queda sin crédito puede estar prohibido hacer más ofertas, o un agente vendedor está obligado a entregar después de cerrar un acuerdo. Asumimos que los agentes pueden optar por no cumplir todas sus obligaciones y, por lo tanto, pueden ser sancionados por el MAS. Obsérvese que, cuando se distribuyen las actividades, las posiciones normativas deben derivarse de las actividades en las que se generan a aquellas en las que surten efecto. Por ejemplo, la obligación de los vendedores de arriba debe fluir (o propagarse) de una actividad de negociación a una actividad de entrega. Dado que en un MAS abierto y regulado no se pueden incorporar aspectos normativos en el diseño de los agentes, adoptamos la opinión de que el MAS debe complementarse con un conjunto separado de normas que regulen aún más el comportamiento de los agentes participantes. Para modelar la separación de preocupaciones entre el nivel de coordinación (interacciones de agentes) y el nivel normativo (propagación de posiciones normativas), proponemos un artefacto llamado Estructura Normativa (NS). Dentro de un NS pueden surgir conflictos debido a la naturaleza dinámica del MAS y la concurrencia de acciones de los agentes. Por ejemplo, un agente puede estar obligado y prohibido a realizar el 636 978-81-904262-7-5 (RPS) c 2007 IFAAMAS muy mismo acción en una actividad. Dado que la regulación de un MAS implica que los agentes participantes deben ser conscientes de la validez de las acciones que tienen lugar dentro de él, dichos conflictos deben ser identificados y posiblemente resueltos si se necesita una reivindicación de validez para que un agente realice una acción o sea sancionado. Sin embargo, garantizar la libertad de conflicto de un NS en el momento del diseño es computacionalmente intratable. Demostramos esto formalizando la noción de conflicto, proporcionando un mapeo de los NS en las redes de Petri de colores (CPNs) y tomando prestado los resultados teóricos bien conocidos del campo de los CPNs. Creemos que se requiere la detección y resolución de conflictos en línea. Por lo tanto, presentamos un algoritmo tratable para la resolución de conflictos. Este algoritmo es primordial para la promulgación distribuida de un NS. El documento se organiza de la siguiente manera. En la Sección 2 detallamos un escenario para servir de ejemplo a lo largo del artículo. A continuación, en la Sección 3 definimos formalmente el artefacto \"estructura normativa\". Además, en la sección 4 formalizamos la noción de conflicto para posteriormente analizar la complejidad de la detección de conflictos en términos de RCP en la sección 5. En la sección 6 se describe la gestión computacional de los NS describiendo su promulgación y presentando un algoritmo para la resolución de conflictos. Por último, comentamos sobre la labor conexa, sacamos conclusiones e informamos sobre la labor futura en la sección 7. 2. SCENARIO Utilizamos un escenario de cadena de suministro en el que empresas e individuos se reúnen en un mercado en línea para realizar negocios. El procedimiento de transacción global puede organizarse como seis actividades distribuidas, representadas como nodos en el diagrama de la Figura 1. En ellas participan diferentes participantes cuyo comportamiento se coordina a través de protocolos. En este escenario, los agentes pueden desempeñar uno de los cuatro papeles: marExit Inscripción Pago Entrega Negociación Coordinación Modelo Contrato Figura 1: Estructura de actividad del contador de ketplace (acc), cliente, proveedor (supp) y gerentes de almacén (wm). Las flechas que conectan las actividades representan cómo los agentes pueden moverse de una actividad a otra. Después de registrarse en el mercado, los clientes y proveedores se reúnen en una actividad en la que negocian los términos de su transacción, es decir. los precios, los importes de las mercancías que deban entregarse, los plazos y otros detalles. En la actividad contractual, se establece el pedido y se prepara una factura. El cliente participará entonces en una actividad de pago, verificando su solvencia e instruyendo a su banco a transferir la cantidad correcta de dinero. Mientras tanto, el proveedor se encargará de la entrega de las mercancías (por ejemplo: a través de un administrador de almacén) en la actividad de entrega. Finalmente, los agentes pueden salir del mercado conforme a un protocolo de salida predeterminado. El contable del mercado participa en la mayoría de las actividades como proveedor confiable de herramientas de auditoría. En el resto del documento, nos basaremos en este escenario para ilustrar la noción de \"estructura normativa\" e ilustrar nuestro enfoque de la detección y resolución de conflictos en un entorno distribuido. 3. ESTRUCTURA NORMATIVA En los agentes MASs interactúan según protocolos que naturalmente se distribuyen. Abogamos por que las acciones en uno de esos protocolos puedan tener un efecto en la promulgación de otros protocolos. Algunas acciones pueden ser prohibidas u obligatorias, por ejemplo. Tomamos posiciones normativas para ser obligaciones, prohibiciones y permisos similares al trabajo descrito en [26]. La intención de agregar o eliminar una posición normativa que llamamos comando normativo. Los casos de posiciones normativas en un protocolo también pueden tener consecuencias para otros protocolos1. Para definir nuestro lenguaje de norma y especificar cómo se propagan las posiciones normativas, nos hemos inspirado en sistemas multicontexto [14]. Estos sistemas permiten estructurar el conocimiento en teorías formales distintas y definir las relaciones entre ellos. Las relaciones se expresan como reglas puente - la deducibilidad de las fórmulas en algunos contextos conduce a la deducción de otras fórmulas en otros contextos. Recientemente, estos sistemas se han utilizado con éxito para definir arquitecturas de agentes [11, 23]. La metáfora se traduce a nuestro trabajo actual de la siguiente manera: la expresión de las ilocuciones y/o la existencia de posiciones normativas en algunas escenas normativas conduce a la deducción de posiciones normativas en otras escenas normativas. Nos preocupa la propagación y distribución de posiciones normativas dentro de una red de escenas normativas distribuidas como consecuencia de las acciones de los agentes. Tomamos escenas normativas para ser conjuntos de posiciones normativas y expresiones que están asociadas con un protocolo de interacción subyacente correspondiente a una actividad. En esta sección, presentamos primero un lenguaje simple que capta estos aspectos e introduce formalmente las nociones de escena normativa, regla de transición normativa y \"estructura normativa\". Damos la semántica prevista de estas reglas y mostramos cómo controlar un MAS a través de normas en un ejemplo. 3.1 Conceptos básicos Los componentes básicos de nuestro lenguaje son términos y fórmulas atómicas: Def. 1. Un término, denotado como t, es (i) cualquier constante expresada usando minúsculas (con o sin subíndices), por ejemplo. a, b0, c o ii) cualquier variable expresada utilizando mayúsculas (con o sin subíndices), por ejemplo. X, Y, Zb o iii) cualquier función f(t1,. . . , tn), donde f es un símbolo de función n-ary y t1,.., tn son términos. Algunos ejemplos de términos y funciones son Crédito, precio u oferta (biblia, 30), siendo respectivamente una variable, una constante y una función. Estaremos haciendo uso de identificadores en todo el papel, que son términos constantes y también necesitan la siguiente definición: Def. 2. Una fórmula atómica es cualquier construcción p(t1,. . . , tn), donde p es un símbolo predicado n-ary y t1,. . . , son términos. El conjunto de todas las fórmulas atómicas se denota como Δ. Nos centramos en una clase expresiva de MASs en la que la interacción se lleva a cabo por medio de actos de discurso ilocutionarios intercambiados entre los agentes participantes: Def. 3. I I I son las fórmulas atómicas terrestres que tienen la forma p(ag, r, ag, r, , t) donde p es un elemento de 1 Aquí, abstracto de protocolos y se refieren a ellos genéricamente como actividades. El Sexto Intl. Conjunto Conf. en Agentes Autónomos y Sistemas Multi-Agentes (AAMAS 07) 637 un conjunto de partículas ilocucionarias (por ejemplo: informar, petición, oferta); ag, ag son identificadores de agente; r, r son identificadores de rol; , un término de base arbitrario, es el contenido del mensaje, construido a partir de un lenguaje de contenido compartido; t  N es un sello de tiempo. El significado intuitivo de p(ag, r, ag, r, m, t) es que agente ag jugando rol r enviado mensaje m a agente ag jugando rol r en el momento t. Un ejemplo de una ilocución es informar(ag4, supp, ag3, cliente, offer(wire, 12), 10). A veces es útil referirse a las ilocuciones que no están totalmente fundamentadas, es decir, aquellas que pueden contener variables no instantiated (libres). En la descripción de un protocolo, por ejemplo, los valores precisos del mensaje intercambiado pueden quedar sin especificar. Durante la promulgación de los agentes del protocolo se producirán los valores reales que darán lugar a una ilocución del suelo. Así podemos definir esquemas de ilocución: Def. 4. Un esquema de ilocución ̄I es cualquier fórmula atómica p(ag, r, ag, r, ♥, t) en la que algunos de los términos pueden ser variables o pueden contener variables. 3.2 Definición formal de la noción de NS Primero definimos las escenas normativas de la siguiente manera: Def. 5. Una escena normativa es una tupla s = ids, Δs donde los ids son un identificador de escena y Δs es el conjunto de fórmulas atómicas Por ejemplo, una instantánea del estado de la escena normativa de entrega de nuestro escenario podría ser representada como: Δs = 8 < : utt(request(sean, client, kev, wm, receive(wire, 200), 20)), utt(accept(kev, wm, seen, customer, receive(wire, 200), 30)) 9 = ; Es decir, Tenga en cuenta que el estado de una escena normativa Δs evoluciona con el tiempo. Estas escenas normativas están conectadas entre sí a través de transiciones normativas que especifican cómo las expresiones y posiciones normativas en una escena afectan a otras escenas normativas. Como se mencionó anteriormente, las actividades no son independientes, ya que las ilocuciones pronunciadas en algunas de ellas pueden tener un efecto en otras. Las reglas normativas de transición definen las condiciones bajo las cuales se genera un comando normativo. Estas condiciones son declaraciones o posiciones normativas asociadas a un protocolo dado (denominadas por ejemplo. actividad : expresión ) que dan un comando normativo, es decir. la adición o supresión de otra posición normativa, posiblemente relacionada con una actividad diferente. Nuestras reglas de transición están así definidas: Def. 6. Una regla de transición normativa R es de la forma: R ::= V C V ::= ids : D  V, V D ::= N  utt( ̄I) N ::= per( ̄I)  prh( ̄I)  obli( ̄I) C ::= add(ids : N)  remove(ids : N) donde ̄I es un esquema permiso, prohibición u obligación), ids es un identificador de la actividad s y C es un comando normativo. Dotamos nuestro lenguaje con la semántica habitual de los lenguajes basados en reglas [19]. Las reglas trazan una \"estructura normativa\" existente a una nueva \"estructura normativa\" donde sólo cambia el estado de las escenas normativas. En las definiciones siguientes nos basamos en el concepto estándar de sustitución [9]. Def. 7. Una transición normativa es un tupla b = idb, rb donde idb es un identificador y rb es una regla de transición normativa. Proponemos ampliar la noción de MAS, regulada por protocolos, con una capa adicional consistente en escenas normativas y transiciones normativas. Esta capa se representa como un gráfico bipartito que llamamos \"estructura normativa\". Una \"estructura normativa\" relaciona escenas normativas y transiciones normativas especificando qué posiciones normativas deben ser generadas o eliminadas en qué escenas normativas. Def. 8. Una \"estructura normativa\" es un gráfico bipartito etiquetado NS = Nodos, bordes, Lin, Lout. Nodos es un conjunto de Sâ B donde S es un conjunto de escenas normativas y B es un conjunto de transiciones normativas. Edges es un conjunto Ain Aout donde Ain  S × B es un conjunto de arcos de entrada etiquetados con una fórmula atómica utilizando la función de etiquetado Lin : Ain → D; y Aout  B × S es un conjunto de arcos de salida etiquetados con una posición normativa utilizando la función de etiquetado Lout : Aout → N. Lo siguiente debe contener: 1. Cada fórmula atómica que aparece en el LHS de una regla rb debe ser de la forma (ids : D) donde s â € € € € TM € € € € € € € € € € € € € € € € € € € € € € € € € Ain tal que es = La fórmula atómica que aparece en el RHS de una regla rb debe ser de la forma add(ids : N) o remove(ids : N) donde s â € S y â € Aout tal que aout = (b, s) y Lout (aout ) = N. 3. Ain tal que a = (s, b) y b = idb, rb y Lin (a) = D entonces (ids:D) debe ocurrir en el LHS de rb. 4. Afuera de tal manera que a = (b, s) y b = idb, rb y Lout (a) = N luego add(ids : N) o remove(ids : N) deben ocurrir en el RHS de rb. Los dos primeros puntos aseguran que cada fórmula atómica en el LHS de una regla de transición normativa etiqueta un arco entrando en la transición normativa apropiada en la \"estructura normativa\", y que la fórmula atómica en el RHS etiqueta el arco saliente correspondiente. Los puntos tres y cuatro aseguran que las etiquetas de todos los arcos entrantes se utilicen en el LHS de la regla de transición normativa en la que entran estos arcos, y que las etiquetas de todos los arcos salientes se utilicen en el RHS de la regla de transición normativa que estos arcos dejan. 3.3 Semántica Destinada La semántica formal se definirá mediante un mapeo a Redes Petri Coloradas en la Sección 5.1. Aquí comenzamos a definir la semántica prevista de las reglas normativas de transición describiendo cómo una regla cambia una escena normativa de una \"estructura normativa\" existente que produce una nueva \"estructura normativa\". Cada regla se activa una vez para cada sustitución que unifica el lado izquierdo V de la regla con el estado de las escenas normativas correspondientes. Una fórmula atómica (es decir, una declaración o una posición normativa) si es unificable con una declaración o posición normativa que pertenece al estado del escenario normativo correspondiente. Cada vez que se activa una regla, se lleva a cabo el comando normativo especificado a la derecha de esa regla, con la intención de añadir o eliminar una posición normativa del estado de la escena normativa correspondiente. Sin embargo, la adición no es incondicional, ya que pueden surgir conflictos. Este tema se tratará en las secciones 4 y 6.1. 638 La Sexta Intl. Conjunto Conf. en Agentes Autónomos y Sistemas Multi-Agentes (AAMAS 07) 3.4 Ejemplo En nuestro ejemplo de ejecución tenemos la siguiente regla de transición normativa ejemplar: „ pago : obli(inform(X, cliente, Y, acc, pay(Z, P, Q, T)), pago : utt(inform(X, cliente, Y, acc, pay(Z, P, Q), T)) « entrega : a La norma es una obligación del agente Y (esta vez asumiendo el papel de gerente de almacén wm) de enviar un mensaje al cliente X que el artículo Z ha sido entregado. En la Figura 2 se muestra una representación diagnóstica de cómo se relacionan las actividades y una \"estructura normativa\": Pago Entrega Contrato Nivel Normativo Salida Registro Pago Entrega Negociación Nivel de Coordinación Contrato nt Figura 2: Actividades y Estructura Normativa A medida que se pronuncian las ilocuciones durante las actividades, surgen posiciones normativas. Las preferencias y las posiciones normativas se combinan en normas de transición, lo que provoca el flujo de posiciones normativas entre las distintas situaciones normativas. La conexión entre los dos niveles se describe en la sección 6.2. 4. DEFINICIÓN DE CONFLICTOS Los términos conflicto deontico e inconsistencia deontica se han utilizado indistintamente en la literatura. Sin embargo, en este trabajo adoptamos el punto de vista de [7] en el que los autores sugieren que surge una inconsistencia deontica cuando una acción es simultáneamente permitida y prohibida - ya que un permiso no puede ser actuado en consecuencia, no se produce un conflicto real. Sin embargo, las situaciones en que una acción está simultáneamente obligada y prohibida son conflictos deonticos, ya que tanto las obligaciones como las prohibiciones influyen en los comportamientos en conflicto. El contenido de las posiciones normativas en este trabajo son ilocuciones. Por lo tanto, surge un conflicto normativo cuando una ilocución está simultáneamente obligada y prohibida. Proponemos utilizar la noción estándar de unificación [9] para detectar cuándo se superponen una prohibición y un permiso. Por ejemplo, una obligación obli(informar(A1, R1, A2, R2, p(c, X, T)) y una prohibición prh(informar(a1, r1, a2, r2, p(Y, d), T)) están en conflicto ya que se unifican en el punto Capturamos formalmente esta noción: Def. 9. Un conflicto (deontico) surge entre dos posiciones normativas N y N bajo una sustitución Es decir, una prohibición y una obligación están en conflicto si, y sólo si, sus ilocuciones se unifican en virtud de La sustitución, llamada aquí el conjunto de conflictos, unifica los agentes, roles y fórmulas atómicas. Asumimos que unificar es una implementación adecuada de un algoritmo de unificación que i) termina siempre (posiblemente fallando, si no se puede encontrar un unificador); ii) es correcto; y iii) tiene complejidad computacional lineal. Las incoherencias causadas por la misma ilocución, que se permiten y prohíben simultáneamente, pueden formalizarse de manera similar. En este trabajo nos centramos en los conflictos de prohibición/obligación, pero la maquinaria computacional introducida en la Sección 6.1 también puede ser utilizada para detectar inconsistencias de prohibición/permiso, si sustituimos la modalidad obli por per. 5. FORMALIZACIÓN DEL CONFLICTO-FREEDOM En esta sección presentamos algunos conocimientos de fondo sobre CPN asumiendo una comprensión básica de las redes Petri ordinarias. Para detalles técnicos, remitimos al lector a [16]. A continuación, mapeamos los NS a los CPN y analizamos sus propiedades. Los CPN combinan la fuerza de las redes Petri con la fuerza de los lenguajes de programación funcionales. Por un lado, las redes Petri proporcionan los primitivos para la descripción de la sincronización de los procesos concurrentes. Como se observa en [16], los CPN tienen una semántica que se basa en la verdadera concurrencia, en lugar de entrelazarse. En nuestra opinión, es más fácil trabajar con una semántica de verdadera moneda porque es la forma en que prevemos la conexión entre el nivel de coordinación y el nivel normativo de un sistema multi-agente. Por otra parte, los lenguajes de programación funcionales utilizados por los CPN proporcionan los primitivos para la definición de los tipos de datos y la manipulación de sus valores de datos. Así, podemos traducir fácilmente expresiones de una \"estructura normativa\". Por último, pero no por ello menos importante, los CPN tienen una semántica bien definida que define inequívocamente el comportamiento de cada CPN. Además, los CPN tienen un gran número de métodos e instrumentos de análisis formales mediante los cuales se pueden demostrar las propiedades de los CPN. En resumen, los CPN nos proporcionan todas las características necesarias para razonar formalmente sobre las estructuras normativas, dado que se proporciona una cartografía adecuada. De acuerdo con las redes Petri, los estados de un CPN están representados por medio de lugares. Pero a diferencia de Petri Nets, cada lugar tiene un tipo de datos asociado determinando el tipo de datos que el lugar puede contener. Un estado de un CPN se llama marca. Consiste en un número de fichas colocadas en los lugares individuales. Cada token lleva un valor de datos que tiene el tipo del lugar correspondiente. En general, un lugar puede contener dos o más tokens con el mismo valor de datos. Por lo tanto, una marca de un CPN es una función que mapea cada lugar en un multi-set2 de tokens del tipo correcto. Uno a menudo se refiere a los valores token como colores token y uno también se refiere a los tipos de datos como conjuntos de colores. Los tipos de un CPN pueden ser arbitrariamente complejos. Las acciones en un PCN están representadas mediante transiciones. Un arco entrante en una transición desde un lugar indica que la transición puede eliminar tokens del lugar correspondiente mientras que un arco saliente indica que la transición puede añadir tokens. El número exacto de tokens y sus valores de datos son determinados por las expresiones de arco, que se codifican utilizando el lenguaje de programación elegido para el CPN. Una transición está habilitada en un CPN si y sólo si todos los 2 A multi-set (o bolsa) es una extensión a la noción de conjunto, permitiendo la posibilidad de múltiples apariencias del mismo elemento. El Sexto Intl. Conjunto Conf. en Agentes Autónomos y Sistemas Multi-Agentes (AAMAS 07) 639 variables en las expresiones de sus arcos entrantes se unen a algunos valores (cada una de estas fijaciones se refiere como un elemento vinculante). Si es así, la transición puede ocurrir eliminando tokens de sus lugares de entrada y añadiendo tokens a sus lugares de salida. Además de las expresiones de arco, es posible conectar una expresión booleana de guardia (con variables) a cada transición. Juntando todos los elementos de arriba obtenemos una definición formal de CPN que se empleará más adelante para propósitos de mapeo. Def. 10. Un CPN es un conjunto finito de tipos no vacíos, también llamados conjuntos de colores; ii) P es un conjunto finito de lugares; iii) T es un conjunto finito de transiciones; iv) A es un conjunto finito de arcos; v) N es una función de nodo definida de A a P × T • T × P; vi) C es una función de color de P a فارسى; vii) G es una De acuerdo con las redes Petri ordinarias, el comportamiento concurrente de un CPN se basa en la noción de paso. Formalmente, un paso es un no vacío y finito multi-set sobre el conjunto de todos los elementos de unión. Deje que el paso S se active en una marca M. Entonces, S puede ocurrir, cambiando la marca M a M. Además, decimos que el marcado M es directamente accesible desde el marcado M por la ocurrencia del paso S, y lo denotamos por M[S > M. Una secuencia de ocurrencia finita es una secuencia finita de pasos y marcas: M1[S1 > M2. . . Mn[Sn > Mn+1 de tal manera que n+N y Mi[Si > Mi+1 . . , n}. El conjunto de todas las marcas posibles alcanzables para una red neta de una marca M se llama su conjunto de alcance, y se denota como R(Net, M). 5.1 Mapeo a redes de Petri de colores Nuestra \"estructura normativa\" es un gráfico bipartito etiquetado. Lo mismo puede decirse de una red Petri coloreada. Estamos presentando un mapeo f de uno a otro, con el fin de proporcionar semántica para la \"estructura normativa\" y probar las propiedades al respecto mediante el uso de resultados teóricos bien conocidos de trabajo en CPNs. El mapeo f hace uso de correspondencias entre escenas normativas y lugares CPN, transiciones normativas y transiciones CPN y finalmente, entre etiquetas de arco y expresiones de arco CPN. S → P B → T Lin Lout → E El conjunto de tipos es el conjunto singleton que contiene el color NP (es decir. * = {NP}). Este tipo complejo está estructurado de la siguiente manera (utilizamos CPN-ML [4] sintaxis): color NPT = con Obl  Per  Prh  NoMod color IP = con infor  declaramos  offer color UTT = record illp : IP ag1, role1, ag2, role2 : string content : string time : int color NP = Los arcos son trazados casi directamente. A es un conjunto finito de arcos y N es una función de nodo, de tal manera que Aa Aa Ain Aout. N(a) = a. La función de inicialización I se define como I(p) = Δs ( Por último, la función de color C asigna el color NP a cada lugar: C(p) = NP (­p ­P). No estamos haciendo uso de la función de guardia G. En el trabajo futuro, esta función se puede utilizar para modelar restricciones cuando extendemos la expresividad de nuestro lenguaje de norma. 5.2 Propiedades de las estructuras normativas Después de haber definido el mapeo desde las estructuras normativas hasta las redes de Petri coloreadas, ahora analizamos las propiedades de los CPN que nos ayudan a entender la complejidad de la detección de conflictos. Una pregunta que nos gustaría responder es, si en un momento dado, una determinada \"estructura normativa\" está libre de conflictos. Tal instantánea de una \"estructura normativa\" corresponde a una marca en el CPN mapeado. Def. 11. Dada una marca Mi, esta marca es libre de conflicto si p  P. np1, np2  Mi(p) tal que np1.mode = Obl y np2.mode = Prh y np1.illoc y np2.illoc unificar bajo una sustitución válida. Otra pregunta interesante sería si se producirá un conflicto a partir de una instantánea del sistema propagando las posiciones normativas. Para responder a esta pregunta, primero traducimos la instantánea de la \"estructura normativa\" al CPN correspondiente y luego ejecutamos la secuencia de ocurrencia finita de marcas y pasos, verificando la libertad de conflicto de cada marca a medida que avanzamos. Def. 12. Dada una marca Mi, una secuencia de ocurrencia finita Si, Si+1,..., Sn se llama libre de conflictos, si y sólo si Mi[Si > Mi+1. . . Mn[Sn > Mn+1 y Mk están libres de conflictos para todos los k, de modo que i ≤ k ≤ n + 1. Sin embargo, la pregunta principal que nos gustaría investigar, es si una \"estructura normativa\" dada es o no resistente a los conflictos, es decir, si los agentes que promulgan el MAS son capaces de provocar conflictos a través de sus acciones. Tan pronto como se incluye la posibilidad de acciones (o declaraciones) de agentes autónomos, se pierde el determinismo. Habiendo asignado la \"estructura normativa\" a un CPN, ahora añadimos modelos de CPN de las interacciones de los agentes. Cada forma de interacción con el agente (es decir, cada actividad) se puede modelar utilizando CPN en la línea de Cost et al. [5]. Estos CPN no deterministas alimentan tokens en el CPN que modela la \"estructura normativa\". Esto lleva a la introducción de no-determinismo en el PCN combinado. La mitad inferior de la figura 3 muestra parte de un modelo CPN de un protocolo de agente donde el arco denotado con 1 representa alguna pronunciación de una ilocución por un agente. La transición de destino de este arco, no sólo mueve un token al siguiente estado de este CPN, sino que también coloca un token en el lugar correspondiente a la escena normativa apropiada en el modelo del CPN de la \"estructura normativa\" (vía el arco 2). La transición 3 finalmente podría propagar ese símbolo en forma de una obligación, por ejemplo. Así, a partir de una marca dada, muchas secuencias de ocurrencia diferentes son posibles dependiendo de las acciones de los agentes. Utilizamos el conjunto de alcance R para definir una situación en la que los agentes no pueden causar conflictos. 640 La Sexta Intl. Conjunto Conf. sobre Agentes Autónomos y Sistemas Multi-Agentes (AAMAS 07) Figura 3: Construcción del CPN combinado Def. 13. Dado un N neto, una marca M es resistente a los conflictos si y sólo si todas las marcas en R(N,M) están libres de conflictos. La verificación de la libertad de conflicto de una marca se puede hacer en tiempo polinomio mediante la verificación de todos los lugares del CPN en busca de fichas en conflicto. La libertad de conflicto de una secuencia de ocurrencia en el CPN que representa la \"estructura normativa\" también se puede hacer en tiempo polinomio ya que esta secuencia es determinista dada una instantánea. Si se ha diseñado o no una \"estructura normativa\" de forma segura corresponde a la comprobación de la resistencia a los conflictos de la marca M0 inicial. Ahora, verificar la resistencia al conflicto de una marca se convierte en una tarea muy difícil. Corresponde al problema de la accesibilidad en un CPN: ¿se puede alcanzar un estado o se puede lograr una marca que contenga un conflicto?. Este problema de alcanzabilidad es conocido por ser NP-completo para las redes Petri ordinarias [22] y puesto que las RCP son funcionalmente idénticas, no podemos esperar verificar la resistencia al conflicto de una \"estructura normativa\" fuera de línea en una cantidad razonable de tiempo. Por lo tanto, se necesitan mecanismos de tiempo de ejecución distribuidos para garantizar que una \"estructura normativa\" mantenga la coherencia. Presentamos uno de esos mecanismos en la sección siguiente. 6. GESTIÓN DE ESTRUCTURAS NORMATIVAS Una vez detectado un conflicto (según se define en la Sección 4), proponemos emplear al unificador para resolver el conflicto. En nuestro ejemplo, si las variables en prh(inform(a1, r1, a2, r2, p(Y, d), T)) no obtienen los valores especificados en la sustitución Sin embargo, en lugar de computar el conjunto de complementos de una sustitución (que puede ser un conjunto infinito) proponemos anotar la prohibición con el propio unificador y utilizarla para determinar cuáles son las variables de esa prohibición no pueden ser en futuras unificaciones para evitar un conflicto. Por lo tanto denotamos prohibiciones anotadas como prh( ̄I) . . Es un conjunto de unificadores. Las normas anotadas3 se interpretan como constructos deonticos con influencias restringidas, es decir, su efecto (sobre agentes, roles e ilocuciones) ha sido limitado por el conjunto de unificadores. Una prohibición puede estar en conflicto con varias obligaciones en una escena normativa dada s = id, Δ y tenemos que registrar (y posiblemente evitar) todos estos conflictos. Definimos a continuación un algoritmo que garantiza que una posición normativa se añada a una escena normativa de tal manera que no cause ningún conflicto. 3 Aunque proponemos limitar las prohibiciones, el mismo mecanismo puede utilizarse para definir la reducción de obligaciones en su lugar. Estas diferentes políticas dependen de la semántica deontica prevista y de los requisitos de los sistemas abordados. Por ejemplo, algunos MAS pueden exigir que sus agentes no actúen en presencia de conflictos, es decir, que se reduzca la obligación. 6.1 Resolución de conflictos Proponemos una forma de resolver los conflictos normativos mediante la unificación. Detectamos la superposición de las influencias de las normas, es decir. cómo afectan al comportamiento de los agentes afectados, y reducimos la influencia de la posición normativa, mediante el uso adecuado de las anotaciones al comprobar si la norma se aplica a las ilocuciones. El algoritmo mostrado en la Figura 4 muestra cómo mantenemos un conjunto de normas libres de conflictos. Añade una norma dada N a un estado normativo existente, libre de conflictos Δ, obteniendo un nuevo estado normativo resultante Δ que es libre de conflictos, es decir, sus prohibiciones están anotadas con un conjunto de conjuntos de conflictos que indican qué fijaciones para variables deben evitarse para que los conflictos no tengan lugar. algoritmo addNorm(N, Δ) comienza 1 marca de tiempo(N) 2 caso N de 3 per( ̄I): Δ := Δ  {N} 4 prh(I): si N  Δ s.t. Conflict(N, N, Las líneas 4-5 abordan el caso cuando intentamos agregar una prohibición de base a un estado normativo: si entra en conflicto con cualquier obligación, entonces se descarta; de lo contrario se añade al estado normativo. En las líneas 6 a 12 se describe la situación en que la posición normativa que debe añadirse es una prohibición no básica. En este caso, el algoritmo inicializa un conjunto vacío y bucles (línea 9-10) a través de las normas N en el antiguo estado normativo Δ. Después de encontrar uno que entra en conflicto con N, el algoritmo actualiza el valor de la nueva configuración de conflicto (línea 10). Mediante el bucle a través de Δ, somos capaces de comprobar cualquier conflicto entre la nueva prohibición y las obligaciones existentes, construyendo adecuadamente la anotación  que se utilizará al añadir N a Δ en la línea 11. En las líneas 13 a 27 se describe cómo se ajusta una nueva obligación a un estado normativo existente. Hacemos uso de dos conjuntos inicialmente vacíos, temporales, Δ1, Δ2. El algoritmo pasa a través de Δ (líneas 16-25) recogiendo las prohibiciones anotadas N Hay, sin embargo, dos casos a tratar: el de cuando un motivo La Sexta Intl. Conjunto Conf. sobre los agentes autónomos y los sistemas multiagentes (AAMAS 07) se encuentra la prohibición 641 (línea 17), y su excepción, que abarca las prohibiciones no terrestres (línea 20). En ambos casos, la antigua prohibición se almacena en Δ1 (líneas 18 y 23) para ser posteriormente retirada de Δ (línea 26). Sin embargo, en el caso de una prohibición no terrestre, el algoritmo actualiza su anotación de conjuntos de conflicto (línea 24). El bucle garantiza que se lleve a cabo una búsqueda exhaustiva (lineal) a través de un estado normativo, comprobando si la nueva obligación está en conflicto con cualquier prohibición existente, posiblemente actualizando las anotaciones de estas prohibiciones en conflicto. En la línea 26 el algoritmo construye la nueva actualización Δ eliminando las antiguas prohibiciones almacenadas en Δ1 y añadiendo las prohibiciones actualizadas almacenadas en Δ2 (si las hay), así como la nueva obligación N. Nuestro algoritmo propuesto es correcto en que, para una posición normativa dada N y un estado normativo Δ, proporciona un nuevo estado normativo Δ en el que todas las prohibiciones tienen anotaciones que registran cómo se unifican con las obligaciones existentes. Sin embargo, las anotaciones pueden estar vacías: este es el caso cuando tenemos una prohibición básica o una prohibición que no unifica/conflige con ninguna obligación. Los permisos no afectan a nuestro algoritmo y se tratan adecuadamente (línea 3). Cualquier intento de insertar una prohibición de base que entre en conflicto, produce el mismo estado normativo (línea 4). Cuando se añade una nueva obligación, el algoritmo garantiza que se tienen en cuenta todas las prohibiciones (líneas 14 a 27), lo que conduce a la eliminación de las prohibiciones sobre el terreno en conflicto o a la actualización de las anotaciones de las prohibiciones no sobre el terreno. El algoritmo siempre termina: los bucles están sobre un conjunto finito Δ y los conflictos comprueban y establecen operaciones siempre terminan. La complejidad del algoritmo es lineal: el conjunto Δ sólo se examina una vez para cada caso posible de norma que se añade. Al gestionar los estados normativos también es posible que necesitemos eliminar posiciones normativas. Esto es sencillo: los permisos se pueden retirar sin ningún problema; las prohibiciones anotadas también se pueden eliminar sin más consideraciones; sin embargo, las obligaciones requieren algunas tareas domésticas. Cuando se va a eliminar una obligación, debemos verificarla contra todas las prohibiciones anotadas a fin de actualizar sus anotaciones. Aplicamos la comprobación de conflicto y obtenemos un unificador, luego eliminamos este unificador de la anotación de prohibiciones. Invocamos el algoritmo de eliminación como removeNorm(N, Δ): devuelve un nuevo estado normativo Δ en el que N ha sido eliminado, con posibles alteraciones a otras posiciones normativas como se explicó. 6.2 Promulgación de una estructura normativa La promulgación de una \"estructura normativa\" equivale a la ejecución paralela y distribuida de escenas normativas y transiciones normativas. A título ilustrativo, describiremos a continuación la interacción entre las situaciones normativas de pago y entrega y la transición normativa que los vincula en la mitad superior de la figura 2. Con este objetivo, considere, por ejemplo, que obl(inform(jules, cliente, rod, acc, pay(copper, 400, 350), T) Δpago y que Δentrega tiene prh(inform(rod,wm, jules, cliente, entregado(Z, Q), T)). Tales estados indican que el cliente Jules está obligado a pagar £400 por 350kg de cobre al contador Rod de acuerdo con la escena normativa de pago, mientras que Rod, asumiendo el papel de gerente de almacén esta vez, está prohibido entregar cualquier cosa al cliente Jules de acuerdo con la escena normativa de entrega. Para cada escena normativa, el proceso de promulgación es el siguiente. En primer lugar, procesa su cola de mensajes entrantes que contiene tres tipos de mensajes: declaraciones de la actividad a la que está vinculada; y comandos normativos para agregar o eliminar posiciones normativas. Por ejemplo, en nuestro ejemplo, la escena normativa de pago recoge la ilocución I = utt((inform(jules, cliente, varilla, acc, pay(cobre, 400, 350), 35)) para el cliente Jules pendiente de pago por cobre (a través de la flecha A en la figura 2). Las Uterancias son timestamped y subsecuentemente agregadas al estado normativo. Tendríamos Δpayment = Δpayment {I}, en nuestro ejemplo. Al recibir órdenes normativas para agregar o eliminar una posición normativa, la escena normativa invoca el algoritmo de adición o eliminación correspondiente descrito en la Sección 6.1. En segundo lugar, la escena normativa reconoce su cambio de estado al enviar un mensaje desencadenante a cada transición normativa saliente a la que está conectado. En nuestro ejemplo, el escenario normativo de pagos estaría señalando su cambio de estado a la transición normativa nt. Para las transiciones normativas, el proceso funciona de manera diferente. Debido a que cada transición normativa controla el funcionamiento de una sola regla, al recibir un mensaje de activación, encuesta cada escena normativa entrante para sustituciones de los esquemas de ilocución pertinentes en el LHS de su regla. En nuestro ejemplo, nt (responsable de la regla descrita en la Sección 3.4), encuestaría el escenario normativo de pago (vía flecha B) para sustituciones. Al recibir respuestas de ellos (en forma de conjuntos de sustituciones junto con marcas de tiempo), tiene que unificar las sustituciones de cada una de estas escenas normativas. Para cada unificación que encuentra, la regla se activa, y por lo tanto el comando normativo correspondiente se envía a lo largo de la escena normativa de salida. La transición normativa entonces mantiene un seguimiento del mensaje de disparo que envió y de las marcas de tiempo de las posiciones normativas que desencadenó el disparo. Esto se hace para asegurar que las mismas posiciones normativas en el LHS de una regla sólo desencadenen su disparo una vez. En nuestro ejemplo, nt estaría recibiendo  = {X/jules, Y/rod, Z/copper, Q/350} de la escena normativa de pagos. Dado que las substiciones en unifican con la regla nts, la regla es disparada, y el comando normativo add(delivery : obli(rod, wm, jules, client, delivery(copper, 350), T)) es enviado a lo largo de la escena normativa de entrega para obligar a Rod a entregar al cliente Jules 350kg de cobre. Después de eso, la escena normativa de entrega invocaría el algoritmo addNorm de la figura 4 con Δdelivery y N = obli(rod, wm, jules, client, delivered(copper, 350)) como argumentos. 7. TRABAJOS Y CONCLUSIONES RELACIONADOS Nuestras contribuciones en este documento son triples. En primer lugar, introducimos un enfoque para la gestión y el razonamiento de las normas de manera distribuida. Hasta donde sabemos, hay poco trabajo publicado en esta dirección. En [8, 21] se presentan dos idiomas para la aplicación distribuida de las normas en el MAS. Sin embargo, en ambos trabajos, cada agente tiene una interfaz de mensaje local que envía mensajes legales de acuerdo con un conjunto de normas. Dado que estas interfaces son locales para cada agente, las normas sólo pueden expresarse en términos de acciones de ese agente. Se trata de una grave desventaja, por ejemplo. cuando uno necesita activar una obligación para con un agente debido a un cierto mensaje de otro. La segunda contribución es la propuesta de una \"estructura normativa\". La noción es fructífera porque permite la separación de las cuestiones normativas y de procedimiento. La \"estructura normativa\" que proponemos hace evidente la similitud entre la propagación de las posiciones normativas y la propagación 642 La Sexta Intl. Conjunto Conf. sobre Agentes Autónomos y Sistemas Multi-Agentes (AAMAS 07) de tokens en Redes Petri Coloradas. Esa similitud sugiere fácilmente un mapeo entre los dos, y da lugar a un tratamiento analítico conveniente de la \"estructura normativa\", en general, y la complejidad de la detección de conflictos, en particular. La idea de modelar interacciones (en forma de conversaciones) a través de Petri Nets se ha investigado en [18], donde el medio de interacción y los agentes individuales se modelan como subredes de CPN que posteriormente se combinan para su análisis. En [5], las conversaciones se diseñan y analizan por primera vez a nivel de los CPN y posteriormente se traducen en protocolos. Lin et al. [20] mapear esquemas de conversación a CPNs. Según nuestro conocimiento, el uso de esta representación en apoyo de la detección de conflictos en el MAS regulado no ha sido reportado en otros lugares. Por último, presentamos un mecanismo distribuido para resolver los conflictos normativos. Sartor [25] trata los conflictos normativos desde el punto de vista de la teoría jurídica y sugiere una forma de ordenar las normas involucradas. Su idea se implementa en [12], pero requiere un recurso central para el mantenimiento de normas. El enfoque para la detección y resolución de conflictos es una adaptación y extensión del trabajo sobre gráficos de instanciación reportados en [17] y un algoritmo relacionado en [27]. El algoritmo presentado en el presente trabajo puede ser utilizado para administrar estados normativos distribuidos: escenas normativas que suceden en paralelo tienen un estado normativo asociado Δ al que el algoritmo se aplica de forma independiente cada vez que se introduce una nueva norma. Estas tres contribuciones que presentamos en este documento abren muchas posibilidades para el trabajo futuro. Cabe mencionar en primer lugar, que como estrategia amplia estamos trabajando en una generalización de la noción de \"estructura normativa\" para que funcione con diferentes modelos de coordinación, con un contenido deontico más rico y además de diferentes realizaciones computacionales de MAS regulado. Como primer paso en esta dirección estamos aprovechando la disociación entre los protocolos de interacción y la orientación normativa declarativa que la \"estructura normativa\" pone a disposición, para proporcionar una capa normativa para las instituciones electrónicas (como se define en [1]). Esperamos que este acoplamiento dote a las instituciones electrónicas de un entorno normativo más flexible y más expresivo. Además, queremos extender nuestro modelo a través de varias direcciones: (1) manejar la negación y las limitaciones como parte del lenguaje de la norma, y en particular la noción de tiempo; (2) dar cabida a múltiples autoridades jerárquicas de normas basadas en roles, en la línea de Cholvy y Cuppens [3] y relaciones de poder como sugiere Carabelea et al. [2]; (3) para captar en el algoritmo de resolución de conflictos diferentes semánticas relacionadas con las nociones deonticas apoyando diferentes axiomaciones (por ejemplo, fuerza relativa de la prohibición frente a la obligación, nociones deonticas predeterminadas, inconsistencias deonticas). En el lado teórico, pretendemos utilizar técnicas de análisis de CPN para caracterizar clases de CPN (por ejemplo, acíclicas, simétricas, etc.) que corresponden a familias de Estructuras Normativas susceptibles a la detección de conflictos fuera de línea. La combinación de estas técnicas junto con nuestros mecanismos de resolución de conflictos en línea pretende dotar a los diseñadores del MAS de la capacidad de incorporar normas en sus sistemas de una manera basada en principios. 8. REFERENCIAS [1] J. L. Arcos, M. Esteva, P. Noriega, J. A. Rodr guez, y C. Sierra. Ingeniería de entornos abiertos con instituciones electrónicas. Journal on Engineering Applications of Artificial Intelligence, 18(2):191-204, 2005. [2] C. Carabelea, O. Boissier, y C. Castelfranchi. Usar el poder social para permitir a los agentes razonar sobre ser parte de un grupo. En el 5o Internat. Taller, EEAT 2004, págs. 166 a 177, 2004. [3] L. Cholvy y F. Cuppens. Solución de conflictos normativos mediante la fusión de funciones. En la Quinta Conferencia Internacional sobre Inteligencia Artificial y Derecho, Washington, Estados Unidos, 1995. [4] S. Christensen y T. B. Haagh. Diseño CPN - vista general de la sintaxis CPN ML. Informe técnico, Universidad de Aarhus, 1996. [5] R. S. Cost, Y. Chen, T. W. Finin, Y. Labrou e Y. Peng. Usando petri redes de colores para modelar la conversación. In Issues in Agent Communication, págs. 178 a 192, Londres, Reino Unido, 2000. [6] F. Dignum. Agentes autónomos con normas. Inteligencia Artificial y Ley, 7(1):69-79, 1999. [7] A. Elhag, J. Breuker y P. Brouwer. Sobre el análisis formal de los conflictos normativos. Información & Comunicaciones. Techn. Ley, 9(3):207-217, Oct. 2000. [8] M. Esteva, W. Vasconcelos, C. Sierra, y J. A. Rodr guez-Aguilar. Consistencia normativa en las instituciones electrónicas. volumen 3171 (LNAI), páginas 494-505. Springer-Verlag, 2004. [9] M. Fitting. Prueba de la lógica de primer orden y del teorema automatizado. Springer-Verlag, Nueva York, Estados Unidos, 1990. [10] N. Fornara, F. Vigan`o y M. Colombetti. Un enfoque impulsado por eventos a las normas en las instituciones artificiales. En el taller AAMAS05: Agentes, normas e instituciones para sistemas multiagente regulados (ANI@REM), Utrecht, 2005. [11] D. Gaertner, P. Noriega y C. Sierra. Ampliación de la arquitectura BDI con compromisos. En Actas del IX Congreso Internacional de la Asociación Catalana de Inteligencia Artificial, 2006. [12] A. Garc a-Camino, P. Noriega, y J.-A. Rodr guez-Aguilar. Un algoritmo para la resolución de conflictos en actividades reguladas compuestas. En el 7o taller Int.Workshop - ESAW 06, 2006. [13] A. Garc a-Camino, J.-A. Rodr guez-Aguilar, C. Sierra y W. Vasconcelos. Una arquitectura distribuida para las Sociedades de Agentes de Normas. En DALT III, volumen 3904 (LNAI), páginas 89 a 105. Springer, 2006. [14] F. Giunchiglia y L. Serafini. Lógicas jerárquicas multilenguaje o: Cómo podemos prescindir de lógicas modales. Inteligencia Artificial, 65(1):29-70, 1994. [15] J. Habermas. La Teoría de la Comunicación Acción, Volumen Uno, La Razón y la Racionalización de la Sociedad. Beacon Press, 1984. [16] K. Jensen. Redes Petri coloreadas: Conceptos básicos, métodos de análisis y usos prácticos (Volumen 1). Springer, 1997. [17] M. Kollingbaum y T. Norman. Estrategias para resolver conflictos de normas con razonamiento práctico. En el Taller de Coordinación de la CEPA en Sociedades de Agentes Emergentes 2004, 2004. [18] J.-L. Koning, G. Francois e Y. Demazeau. Formalización y prevalidación para protocolos de interacción en sistemas multiagente. En ECAI, págs. 298 a 307, 1998. [19] B. Kramer y J. Mylopoulos. Representación del conocimiento. En S. C. Shapiro, editor, Enciclopedia de Inteligencia Artificial, volumen 1, páginas 743-759. John Wiley & Sons, 1992. [20] F. Lin, D. H. Norrie, W. Shen y R. Kremer. Un enfoque basado en esquemas para especificar las políticas de conversación. En Temas de Comunicación de Agentes, págs. 193-204, 2000. [21] N. Minsky. Interacción gobernada por la ley (LGI): Un mecanismo de coordinación y control distribuido (Una introducción y un manual de referencia). Informe técnico, Universidad Rutgers, 2005. [22] T. Murata. Redes Petri: Propiedades, análisis y aplicaciones. Actas del IEEE, 77(4):541-580, 1989. [23] S. Parsons, C. Sierra y N. Jennings. Agentes que razonan y negocian discutiendo. Diario de Lógica y Computación, 8(3):261-292, 1998. [24] A. Ricci y M. Viroli. Artefactos de Coordinación: Una Abstracción Unificante para la Coordinación de Ingeniería Mediada por el Medio Ambiente en MAS. Informatica, 29:433-443, 2005. [25] G. Sartor. Conflictos normativos en el razonamiento jurídico. Inteligencia Artificial y Ley, 1(2-3):209-235, junio de 1992. [26] M. Sergot. Una teoría computacional de posiciones normativas. ACM Trans. Comput. Lógica, 2(4):581-622, 2001. [27] W. W. Vasconcelos, M. Kollingbaum, y T. Norman. Resolver conflictos e incoherencias en las organizaciones virtuales reguladas por normas. En Actas de AAMAS 07, Hawaii, EE.UU., 2007. IFAAMAS. [28] G. H. von Wright. Norma y acción: Una investigación lógica. Routledge y Kegan Paul, Londres, 1963. [29] M. Wooldridge. Una introducción a los sistemas multiagente. John Wiley & Sons, Chichester, Reino Unido, febrero de 2002. El Sexto Intl. Conjunto Conf. sobre agentes autónomos y sistemas de agentes múltiples (AAMAS 07) 643 ",
            "error": [
                ""
            ]
        },
        "bi-partite graph": {
            "translated_key": [
                "gráfico bipartito",
                "grafica bipartita",
                "gráfico bipartito"
            ],
            "translated_annotated_text": "Gestión de Normas Distribuidas en Sistemas Regulados Multi-Agente ∗ Dorian Gaertner Dept. de Computación, Imperial College London, Londres SW7 2AZ, Reino Unido dg00@doc.ic.ac.uk Andrés García-Camino, Pablo Noriega, J.-A. Rodriguez-Aguilar IIIA-CSIC, 08193 Bellaterra, España {andres,pablo,jarážiya.csic.es Wamberto Vasconcelos Dept. de Ciencias de la Computación, Universidad de Aberdeen, Aberdeen AB24 3UE, Reino Unido wvasconcelos@acm.org RESUMEN Las normas son ampliamente reconocidas como un medio de coordinar sistemas multi-agentes. La gestión distribuida de las normas es una cuestión difícil y observamos una falta de realizaciones computacionales verdaderamente distribuidas de los modelos normativos. Con el fin de regular el comportamiento de los agentes autónomos que participan en múltiples actividades relacionadas, proponemos un modelo normativo, la Estructura Normativa (NS), un artefacto que se basa en la propagación de posiciones normativas (obligaciones, prohibiciones, permisos), como consecuencias de las acciones de los agentes. Dentro de un NS, los conflictos pueden surgir debido a la naturaleza dinámica del MAS y la concurrencia de acciones de los agentes. Sin embargo, garantizar la libertad de conflicto de un NS en el momento del diseño es computacionalmente intratable. Demostramos esto formalizando la noción de conflicto, proporcionando un mapeo de los NS en las Redes Petri Coloreadas y tomando prestado los resultados teóricos bien conocidos de ese campo. Dado que se requiere la resolución de conflictos en línea, presentamos un algoritmo tratable que se empleará de forma distribuida. Luego demostramos que este algoritmo es primordial para la promulgación distribuida de un NS. Categorías y sujetos Descriptores I.2.11 [Inteligencia Artificial Distribuida]: Idiomas y estructuras Términos generales Algoritmos, Diseño, Teoría 1. INTRODUCCIÓN Una característica fundamental de los sistemas multiagente abiertos y regulados en los que interactúan agentes autónomos, es que los agentes participantes están destinados a cumplir con las convenciones del sistema. Las normas pueden utilizarse para modelar tales convenciones y, por lo tanto, como medio para regular el comportamiento observable de los agentes [6, 29]. Hay muchas contribuciones sobre el tema de las normas de sociólogos, filósofos y lógicos (por ejemplo, [15, 28]). Sin embargo, hay muy pocas propuestas para la realización computacional de modelos normativos - la forma en que las normas pueden integrarse en el diseño y ejecución de MAS. Los pocos que existen (e.g. [10, 13, 24]), funcionan de manera centralizada, lo que crea cuellos de botella y puntos de fallo únicos. Hasta donde sabemos, ninguna propuesta apoya verdaderamente la promulgación distribuida de entornos normativos. En nuestro documento abordamos ese problema y proponemos medios para manejar los compromisos contradictorios en sistemas abiertos, regulados y multiagentes de manera distribuida. El tipo de MAS regulado que contemplamos consiste en actividades múltiples, simultáneas, relacionadas donde los agentes interactúan. Cada agente puede participar simultáneamente en varias actividades, y cambiar de una actividad a otra. Las acciones de un agente dentro de una actividad pueden tener consecuencias en forma de posiciones normativas (es decir. obligaciones, permisos y prohibiciones) [26] que puedan limitar su comportamiento futuro. Por ejemplo, un agente comprador que se queda sin crédito puede estar prohibido hacer más ofertas, o un agente vendedor está obligado a entregar después de cerrar un acuerdo. Asumimos que los agentes pueden optar por no cumplir todas sus obligaciones y, por lo tanto, pueden ser sancionados por el MAS. Obsérvese que, cuando se distribuyen las actividades, las posiciones normativas deben derivarse de las actividades en las que se generan a aquellas en las que surten efecto. Por ejemplo, la obligación de los vendedores de arriba debe fluir (o propagarse) de una actividad de negociación a una actividad de entrega. Dado que en un MAS abierto y regulado no se pueden incorporar aspectos normativos en el diseño de los agentes, adoptamos la opinión de que el MAS debe complementarse con un conjunto separado de normas que regulen aún más el comportamiento de los agentes participantes. Para modelar la separación de preocupaciones entre el nivel de coordinación (interacciones de agentes) y el nivel normativo (propagación de posiciones normativas), proponemos un artefacto llamado Estructura Normativa (NS). Dentro de un NS pueden surgir conflictos debido a la naturaleza dinámica del MAS y la concurrencia de acciones de los agentes. Por ejemplo, un agente puede estar obligado y prohibido a realizar el 636 978-81-904262-7-5 (RPS) c 2007 IFAAMAS muy mismo acción en una actividad. Dado que la regulación de un MAS implica que los agentes participantes deben ser conscientes de la validez de las acciones que tienen lugar dentro de él, dichos conflictos deben ser identificados y posiblemente resueltos si se necesita una reivindicación de validez para que un agente realice una acción o sea sancionado. Sin embargo, garantizar la libertad de conflicto de un NS en el momento del diseño es computacionalmente intratable. Demostramos esto formalizando la noción de conflicto, proporcionando un mapeo de los NS en las redes de Petri de colores (CPNs) y tomando prestado los resultados teóricos bien conocidos del campo de los CPNs. Creemos que se requiere la detección y resolución de conflictos en línea. Por lo tanto, presentamos un algoritmo tratable para la resolución de conflictos. Este algoritmo es primordial para la promulgación distribuida de un NS. El documento se organiza de la siguiente manera. En la Sección 2 detallamos un escenario para servir de ejemplo a lo largo del artículo. A continuación, en la Sección 3 definimos formalmente el artefacto de la estructura normativa. Además, en la sección 4 formalizamos la noción de conflicto para posteriormente analizar la complejidad de la detección de conflictos en términos de RCP en la sección 5. En la sección 6 se describe la gestión computacional de los NS describiendo su promulgación y presentando un algoritmo para la resolución de conflictos. Por último, comentamos sobre la labor conexa, sacamos conclusiones e informamos sobre la labor futura en la sección 7. 2. SCENARIO Utilizamos un escenario de cadena de suministro en el que empresas e individuos se reúnen en un mercado en línea para realizar negocios. El procedimiento de transacción global puede organizarse como seis actividades distribuidas, representadas como nodos en el diagrama de la Figura 1. En ellas participan diferentes participantes cuyo comportamiento se coordina a través de protocolos. En este escenario, los agentes pueden desempeñar uno de los cuatro papeles: marExit Inscripción Pago Entrega Negociación Coordinación Modelo Contrato Figura 1: Estructura de actividad del contador de ketplace (acc), cliente, proveedor (supp) y gerentes de almacén (wm). Las flechas que conectan las actividades representan cómo los agentes pueden moverse de una actividad a otra. Después de registrarse en el mercado, los clientes y proveedores se reúnen en una actividad en la que negocian los términos de su transacción, es decir. los precios, los importes de las mercancías que deban entregarse, los plazos y otros detalles. En la actividad contractual, se establece el pedido y se prepara una factura. El cliente participará entonces en una actividad de pago, verificando su solvencia e instruyendo a su banco a transferir la cantidad correcta de dinero. Mientras tanto, el proveedor se encargará de la entrega de las mercancías (por ejemplo: a través de un administrador de almacén) en la actividad de entrega. Finalmente, los agentes pueden salir del mercado conforme a un protocolo de salida predeterminado. El contable del mercado participa en la mayoría de las actividades como proveedor confiable de herramientas de auditoría. En el resto del documento nos basaremos en este escenario para ilustrar la noción de estructura normativa e ilustrar nuestro enfoque de la detección y resolución de conflictos en un entorno distribuido. 3. ESTRUCTURA NORMATIVA En los agentes MASs interactúan según protocolos que naturalmente se distribuyen. Abogamos por que las acciones en uno de esos protocolos puedan tener un efecto en la promulgación de otros protocolos. Algunas acciones pueden ser prohibidas u obligatorias, por ejemplo. Tomamos posiciones normativas para ser obligaciones, prohibiciones y permisos similares al trabajo descrito en [26]. La intención de agregar o eliminar una posición normativa que llamamos comando normativo. Los casos de posiciones normativas en un protocolo también pueden tener consecuencias para otros protocolos1. Para definir nuestro lenguaje de norma y especificar cómo se propagan las posiciones normativas, nos hemos inspirado en sistemas multicontexto [14]. Estos sistemas permiten estructurar el conocimiento en teorías formales distintas y definir las relaciones entre ellos. Las relaciones se expresan como reglas puente - la deducibilidad de las fórmulas en algunos contextos conduce a la deducción de otras fórmulas en otros contextos. Recientemente, estos sistemas se han utilizado con éxito para definir arquitecturas de agentes [11, 23]. La metáfora se traduce a nuestro trabajo actual de la siguiente manera: la expresión de las ilocuciones y/o la existencia de posiciones normativas en algunas escenas normativas conduce a la deducción de posiciones normativas en otras escenas normativas. Nos preocupa la propagación y distribución de posiciones normativas dentro de una red de escenas normativas distribuidas como consecuencia de las acciones de los agentes. Tomamos escenas normativas para ser conjuntos de posiciones normativas y expresiones que están asociadas con un protocolo de interacción subyacente correspondiente a una actividad. En esta sección, presentamos primero un lenguaje simple que capta estos aspectos e introduce formalmente las nociones de escena normativa, regla de transición normativa y estructura normativa. Damos la semántica prevista de estas reglas y mostramos cómo controlar un MAS a través de normas en un ejemplo. 3.1 Conceptos básicos Los componentes básicos de nuestro lenguaje son términos y fórmulas atómicas: Def. 1. Un término, denotado como t, es (i) cualquier constante expresada usando minúsculas (con o sin subíndices), por ejemplo. a, b0, c o ii) cualquier variable expresada utilizando mayúsculas (con o sin subíndices), por ejemplo. X, Y, Zb o iii) cualquier función f(t1,. . . , tn), donde f es un símbolo de función n-ary y t1,.., tn son términos. Algunos ejemplos de términos y funciones son Crédito, precio u oferta (biblia, 30), siendo respectivamente una variable, una constante y una función. Estaremos haciendo uso de identificadores en todo el papel, que son términos constantes y también necesitan la siguiente definición: Def. 2. Una fórmula atómica es cualquier construcción p(t1,. . . , tn), donde p es un símbolo predicado n-ary y t1,. . . , son términos. El conjunto de todas las fórmulas atómicas se denota como Δ. Nos centramos en una clase expresiva de MASs en la que la interacción se lleva a cabo por medio de actos de discurso ilocutionarios intercambiados entre los agentes participantes: Def. 3. I I I son las fórmulas atómicas terrestres que tienen la forma p(ag, r, ag, r, , t) donde p es un elemento de 1 Aquí, abstracto de protocolos y se refieren a ellos genéricamente como actividades. El Sexto Intl. Conjunto Conf. en Agentes Autónomos y Sistemas Multi-Agentes (AAMAS 07) 637 un conjunto de partículas ilocucionarias (por ejemplo: informar, petición, oferta); ag, ag son identificadores de agente; r, r son identificadores de rol; , un término de base arbitrario, es el contenido del mensaje, construido a partir de un lenguaje de contenido compartido; t  N es un sello de tiempo. El significado intuitivo de p(ag, r, ag, r, m, t) es que agente ag jugando rol r enviado mensaje m a agente ag jugando rol r en el momento t. Un ejemplo de una ilocución es informar(ag4, supp, ag3, cliente, offer(wire, 12), 10). A veces es útil referirse a las ilocuciones que no están totalmente fundamentadas, es decir, aquellas que pueden contener variables no instantiated (libres). En la descripción de un protocolo, por ejemplo, los valores precisos del mensaje intercambiado pueden quedar sin especificar. Durante la promulgación de los agentes del protocolo se producirán los valores reales que darán lugar a una ilocución del suelo. Así podemos definir esquemas de ilocución: Def. 4. Un esquema de ilocución ̄I es cualquier fórmula atómica p(ag, r, ag, r, ♥, t) en la que algunos de los términos pueden ser variables o pueden contener variables. 3.2 Definición formal de la noción de NS Primero definimos las escenas normativas de la siguiente manera: Def. 5. Una escena normativa es una tupla s = ids, Δs donde los ids son un identificador de escena y Δs es el conjunto de fórmulas atómicas Por ejemplo, una instantánea del estado de la escena normativa de entrega de nuestro escenario podría ser representada como: Δs = 8 < : utt(request(sean, client, kev, wm, receive(wire, 200), 20)), utt(accept(kev, wm, seen, customer, receive(wire, 200), 30)) 9 = ; Es decir, Tenga en cuenta que el estado de una escena normativa Δs evoluciona con el tiempo. Estas escenas normativas están conectadas entre sí a través de transiciones normativas que especifican cómo las expresiones y posiciones normativas en una escena afectan a otras escenas normativas. Como se mencionó anteriormente, las actividades no son independientes, ya que las ilocuciones pronunciadas en algunas de ellas pueden tener un efecto en otras. Las reglas normativas de transición definen las condiciones bajo las cuales se genera un comando normativo. Estas condiciones son declaraciones o posiciones normativas asociadas a un protocolo dado (denominadas por ejemplo. actividad : expresión ) que dan un comando normativo, es decir. la adición o supresión de otra posición normativa, posiblemente relacionada con una actividad diferente. Nuestras reglas de transición están así definidas: Def. 6. Una regla de transición normativa R es de la forma: R ::= V C V ::= ids : D  V, V D ::= N  utt( ̄I) N ::= per( ̄I)  prh( ̄I)  obli( ̄I) C ::= add(ids : N)  remove(ids : N) donde ̄I es un esquema permiso, prohibición u obligación), ids es un identificador de la actividad s y C es un comando normativo. Dotamos nuestro lenguaje con la semántica habitual de los lenguajes basados en reglas [19]. Las reglas trazan una estructura normativa existente a una nueva estructura normativa en la que sólo cambia el estado de las escenas normativas. En las definiciones siguientes nos basamos en el concepto estándar de sustitución [9]. Def. 7. Una transición normativa es un tupla b = idb, rb donde idb es un identificador y rb es una regla de transición normativa. Proponemos ampliar la noción de MAS, regulada por protocolos, con una capa adicional consistente en escenas normativas y transiciones normativas. Esta capa se representa como un \"gráfico bipartito\" que llamamos estructura normativa. Una estructura normativa relaciona escenas normativas y transiciones normativas especificando qué posiciones normativas deben generarse o eliminarse en qué escenas normativas. Def. 8. Una estructura normativa es una etiqueta \"grafica bipartita\" NS = Nodos, bordes, Lin, Lout. Nodos es un conjunto de Sâ B donde S es un conjunto de escenas normativas y B es un conjunto de transiciones normativas. Edges es un conjunto Ain Aout donde Ain  S × B es un conjunto de arcos de entrada etiquetados con una fórmula atómica utilizando la función de etiquetado Lin : Ain → D; y Aout  B × S es un conjunto de arcos de salida etiquetados con una posición normativa utilizando la función de etiquetado Lout : Aout → N. Lo siguiente debe contener: 1. Cada fórmula atómica que aparece en el LHS de una regla rb debe ser de la forma (ids : D) donde s â € € € € TM € € € € € € € € € € € € € € € € € € € € € € € € € Ain tal que es = La fórmula atómica que aparece en el RHS de una regla rb debe ser de la forma add(ids : N) o remove(ids : N) donde s â € S y â € Aout tal que aout = (b, s) y Lout (aout ) = N. 3. Ain tal que a = (s, b) y b = idb, rb y Lin (a) = D entonces (ids:D) debe ocurrir en el LHS de rb. 4. Afuera de tal manera que a = (b, s) y b = idb, rb y Lout (a) = N luego add(ids : N) o remove(ids : N) deben ocurrir en el RHS de rb. Los dos primeros puntos aseguran que cada fórmula atómica en el LHS de una regla de transición normativa etiqueta un arco que entra en la transición normativa apropiada en la estructura normativa, y que la fórmula atómica en el RHS etiqueta el arco saliente correspondiente. Los puntos tres y cuatro aseguran que las etiquetas de todos los arcos entrantes se utilicen en el LHS de la regla de transición normativa en la que entran estos arcos, y que las etiquetas de todos los arcos salientes se utilicen en el RHS de la regla de transición normativa que estos arcos dejan. 3.3 Semántica Destinada La semántica formal se definirá mediante un mapeo a Redes Petri Coloradas en la Sección 5.1. Aquí comenzamos a definir la semántica prevista de las reglas normativas de transición describiendo cómo una regla cambia un escenario normativo de una estructura normativa existente que produce una nueva estructura normativa. Cada regla se activa una vez para cada sustitución que unifica el lado izquierdo V de la regla con el estado de las escenas normativas correspondientes. Una fórmula atómica (es decir, una declaración o una posición normativa) si es unificable con una declaración o posición normativa que pertenece al estado del escenario normativo correspondiente. Cada vez que se activa una regla, se lleva a cabo el comando normativo especificado a la derecha de esa regla, con la intención de añadir o eliminar una posición normativa del estado de la escena normativa correspondiente. Sin embargo, la adición no es incondicional, ya que pueden surgir conflictos. Este tema se tratará en las secciones 4 y 6.1. 638 La Sexta Intl. Conjunto Conf. en Agentes Autónomos y Sistemas Multi-Agentes (AAMAS 07) 3.4 Ejemplo En nuestro ejemplo de ejecución tenemos la siguiente regla de transición normativa ejemplar: „ pago : obli(inform(X, cliente, Y, acc, pay(Z, P, Q, T)), pago : utt(inform(X, cliente, Y, acc, pay(Z, P, Q), T)) « entrega : a La norma es una obligación del agente Y (esta vez asumiendo el papel de gerente de almacén wm) de enviar un mensaje al cliente X que el artículo Z ha sido entregado. En la Figura 2 se muestra una representación diagnóstica de cómo se relacionan las actividades y una estructura normativa: Pago Entrega Contrato Nivel Normativo Salida Registro Pago Entrega Negociación Nivel de Coordinación Contrato nt Figura 2: Actividades y Estructura Normativa A medida que se pronuncian las ilocuciones durante las actividades, surgen posiciones normativas. Las preferencias y las posiciones normativas se combinan en normas de transición, lo que provoca el flujo de posiciones normativas entre las distintas situaciones normativas. La conexión entre los dos niveles se describe en la sección 6.2. 4. DEFINICIÓN DE CONFLICTOS Los términos conflicto deontico e inconsistencia deontica se han utilizado indistintamente en la literatura. Sin embargo, en este trabajo adoptamos el punto de vista de [7] en el que los autores sugieren que surge una inconsistencia deontica cuando una acción es simultáneamente permitida y prohibida - ya que un permiso no puede ser actuado en consecuencia, no se produce un conflicto real. Sin embargo, las situaciones en que una acción está simultáneamente obligada y prohibida son conflictos deonticos, ya que tanto las obligaciones como las prohibiciones influyen en los comportamientos en conflicto. El contenido de las posiciones normativas en este trabajo son ilocuciones. Por lo tanto, surge un conflicto normativo cuando una ilocución está simultáneamente obligada y prohibida. Proponemos utilizar la noción estándar de unificación [9] para detectar cuándo se superponen una prohibición y un permiso. Por ejemplo, una obligación obli(informar(A1, R1, A2, R2, p(c, X, T)) y una prohibición prh(informar(a1, r1, a2, r2, p(Y, d), T)) están en conflicto ya que se unifican en el punto Capturamos formalmente esta noción: Def. 9. Un conflicto (deontico) surge entre dos posiciones normativas N y N bajo una sustitución Es decir, una prohibición y una obligación están en conflicto si, y sólo si, sus ilocuciones se unifican en virtud de La sustitución, llamada aquí el conjunto de conflictos, unifica los agentes, roles y fórmulas atómicas. Asumimos que unificar es una implementación adecuada de un algoritmo de unificación que i) termina siempre (posiblemente fallando, si no se puede encontrar un unificador); ii) es correcto; y iii) tiene complejidad computacional lineal. Las incoherencias causadas por la misma ilocución, que se permiten y prohíben simultáneamente, pueden formalizarse de manera similar. En este trabajo nos centramos en los conflictos de prohibición/obligación, pero la maquinaria computacional introducida en la Sección 6.1 también puede ser utilizada para detectar inconsistencias de prohibición/permiso, si sustituimos la modalidad obli por per. 5. FORMALIZACIÓN DEL CONFLICTO-FREEDOM En esta sección presentamos algunos conocimientos de fondo sobre CPN asumiendo una comprensión básica de las redes Petri ordinarias. Para detalles técnicos, remitimos al lector a [16]. A continuación, mapeamos los NS a los CPN y analizamos sus propiedades. Los CPN combinan la fuerza de las redes Petri con la fuerza de los lenguajes de programación funcionales. Por un lado, las redes Petri proporcionan los primitivos para la descripción de la sincronización de los procesos concurrentes. Como se observa en [16], los CPN tienen una semántica que se basa en la verdadera concurrencia, en lugar de entrelazarse. En nuestra opinión, es más fácil trabajar con una semántica de verdadera moneda porque es la forma en que prevemos la conexión entre el nivel de coordinación y el nivel normativo de un sistema multi-agente. Por otra parte, los lenguajes de programación funcionales utilizados por los CPN proporcionan los primitivos para la definición de los tipos de datos y la manipulación de sus valores de datos. Por lo tanto, podemos traducir fácilmente expresiones de una estructura normativa. Por último, pero no por ello menos importante, los CPN tienen una semántica bien definida que define inequívocamente el comportamiento de cada CPN. Además, los CPN tienen un gran número de métodos e instrumentos de análisis formales mediante los cuales se pueden demostrar las propiedades de los CPN. En resumen, los CPN nos proporcionan todas las características necesarias para razonar formalmente sobre las estructuras normativas, dado que se proporciona una cartografía adecuada. De acuerdo con las redes Petri, los estados de un CPN están representados por medio de lugares. Pero a diferencia de Petri Nets, cada lugar tiene un tipo de datos asociado determinando el tipo de datos que el lugar puede contener. Un estado de un CPN se llama marca. Consiste en un número de fichas colocadas en los lugares individuales. Cada token lleva un valor de datos que tiene el tipo del lugar correspondiente. En general, un lugar puede contener dos o más tokens con el mismo valor de datos. Por lo tanto, una marca de un CPN es una función que mapea cada lugar en un multi-set2 de tokens del tipo correcto. Uno a menudo se refiere a los valores token como colores token y uno también se refiere a los tipos de datos como conjuntos de colores. Los tipos de un CPN pueden ser arbitrariamente complejos. Las acciones en un PCN están representadas mediante transiciones. Un arco entrante en una transición desde un lugar indica que la transición puede eliminar tokens del lugar correspondiente mientras que un arco saliente indica que la transición puede añadir tokens. El número exacto de tokens y sus valores de datos son determinados por las expresiones de arco, que se codifican utilizando el lenguaje de programación elegido para el CPN. Una transición está habilitada en un CPN si y sólo si todos los 2 A multi-set (o bolsa) es una extensión a la noción de conjunto, permitiendo la posibilidad de múltiples apariencias del mismo elemento. El Sexto Intl. Conjunto Conf. en Agentes Autónomos y Sistemas Multi-Agentes (AAMAS 07) 639 variables en las expresiones de sus arcos entrantes se unen a algunos valores (cada una de estas fijaciones se refiere como un elemento vinculante). Si es así, la transición puede ocurrir eliminando tokens de sus lugares de entrada y añadiendo tokens a sus lugares de salida. Además de las expresiones de arco, es posible conectar una expresión booleana de guardia (con variables) a cada transición. Juntando todos los elementos de arriba obtenemos una definición formal de CPN que se empleará más adelante para propósitos de mapeo. Def. 10. Un CPN es un conjunto finito de tipos no vacíos, también llamados conjuntos de colores; ii) P es un conjunto finito de lugares; iii) T es un conjunto finito de transiciones; iv) A es un conjunto finito de arcos; v) N es una función de nodo definida de A a P × T • T × P; vi) C es una función de color de P a فارسى; vii) G es una De acuerdo con las redes Petri ordinarias, el comportamiento concurrente de un CPN se basa en la noción de paso. Formalmente, un paso es un no vacío y finito multi-set sobre el conjunto de todos los elementos de unión. Deje que el paso S se active en una marca M. Entonces, S puede ocurrir, cambiando la marca M a M. Además, decimos que el marcado M es directamente accesible desde el marcado M por la ocurrencia del paso S, y lo denotamos por M[S > M. Una secuencia de ocurrencia finita es una secuencia finita de pasos y marcas: M1[S1 > M2. . . Mn[Sn > Mn+1 de tal manera que n+N y Mi[Si > Mi+1 . . , n}. El conjunto de todas las marcas posibles alcanzables para una red neta de una marca M se llama su conjunto de alcance, y se denota como R(Net, M). 5.1 Mapeo a redes de Petri de colores Nuestra estructura normativa es un \"gráfico bipartito\". Lo mismo puede decirse de una red Petri coloreada. Estamos presentando un mapeo f de uno a otro, con el fin de proporcionar semántica para la estructura normativa y probar las propiedades al respecto mediante el uso de resultados teóricos bien conocidos de trabajo en CPNs. El mapeo f hace uso de correspondencias entre escenas normativas y lugares CPN, transiciones normativas y transiciones CPN y finalmente, entre etiquetas de arco y expresiones de arco CPN. S → P B → T Lin Lout → E El conjunto de tipos es el conjunto singleton que contiene el color NP (es decir. * = {NP}). Este tipo complejo está estructurado de la siguiente manera (utilizamos CPN-ML [4] sintaxis): color NPT = con Obl  Per  Prh  NoMod color IP = con infor  declaramos  offer color UTT = record illp : IP ag1, role1, ag2, role2 : string content : string time : int color NP = Los arcos son trazados casi directamente. A es un conjunto finito de arcos y N es una función de nodo, de tal manera que Aa Aa Ain Aout. N(a) = a. La función de inicialización I se define como I(p) = Δs ( Por último, la función de color C asigna el color NP a cada lugar: C(p) = NP (­p ­P). No estamos haciendo uso de la función de guardia G. En el trabajo futuro, esta función se puede utilizar para modelar restricciones cuando extendemos la expresividad de nuestro lenguaje de norma. 5.2 Propiedades de las estructuras normativas Después de haber definido el mapeo desde las estructuras normativas hasta las redes de Petri coloreadas, ahora analizamos las propiedades de los CPN que nos ayudan a entender la complejidad de la detección de conflictos. Una pregunta que nos gustaría responder es, si en un momento dado, una determinada estructura normativa está libre de conflictos. Tal instantánea de una estructura normativa corresponde a una marca en el CPN cartografiado. Def. 11. Dada una marca Mi, esta marca es libre de conflicto si p  P. np1, np2  Mi(p) tal que np1.mode = Obl y np2.mode = Prh y np1.illoc y np2.illoc unificar bajo una sustitución válida. Otra pregunta interesante sería si se producirá un conflicto a partir de una instantánea del sistema propagando las posiciones normativas. Para responder a esta pregunta, primero traducimos la instantánea de la estructura normativa al CPN correspondiente y luego ejecutamos la secuencia de ocurrencia finita de marcas y pasos, verificando la libertad de conflicto de cada marca a medida que avanzamos. Def. 12. Dada una marca Mi, una secuencia de ocurrencia finita Si, Si+1,..., Sn se llama libre de conflictos, si y sólo si Mi[Si > Mi+1. . . Mn[Sn > Mn+1 y Mk están libres de conflictos para todos los k, de modo que i ≤ k ≤ n + 1. Sin embargo, la cuestión principal que nos gustaría investigar, es si una estructura normativa dada es o no resistente a los conflictos, es decir, si los agentes que promulgan el MAS son capaces de provocar conflictos a través de sus acciones. Tan pronto como se incluye la posibilidad de acciones (o declaraciones) de agentes autónomos, se pierde el determinismo. Después de haber mapeado la estructura normativa a un CPN, ahora añadimos modelos de CPN de las interacciones de agentes. Cada forma de interacción con el agente (es decir, cada actividad) se puede modelar utilizando CPN en la línea de Cost et al. [5]. Estos CPN no determinantes alimentan tokens en el CPN que modela la estructura normativa. Esto lleva a la introducción de no-determinismo en el PCN combinado. La mitad inferior de la figura 3 muestra parte de un modelo CPN de un protocolo de agente donde el arco denotado con 1 representa alguna pronunciación de una ilocución por un agente. La transición de destino de este arco, no sólo mueve un token al siguiente estado de este CPN, sino que también coloca un token en el lugar correspondiente a la escena normativa apropiada en el modelo del CPN de la estructura normativa (a través del arco 2). La transición 3 finalmente podría propagar ese símbolo en forma de una obligación, por ejemplo. Así, a partir de una marca dada, muchas secuencias de ocurrencia diferentes son posibles dependiendo de las acciones de los agentes. Utilizamos el conjunto de alcance R para definir una situación en la que los agentes no pueden causar conflictos. 640 La Sexta Intl. Conjunto Conf. sobre Agentes Autónomos y Sistemas Multi-Agentes (AAMAS 07) Figura 3: Construcción del CPN combinado Def. 13. Dado un N neto, una marca M es resistente a los conflictos si y sólo si todas las marcas en R(N,M) están libres de conflictos. La verificación de la libertad de conflicto de una marca se puede hacer en tiempo polinomio mediante la verificación de todos los lugares del CPN en busca de fichas en conflicto. La libertad de conflicto de una secuencia de ocurrencia en el CPN que representa la estructura normativa también se puede hacer en tiempo polinomio ya que esta secuencia es determinista dada una instantánea. El hecho de que se diseñe o no una estructura normativa corresponde con seguridad a la comprobación de la resistencia a los conflictos de la marca M0 inicial. Ahora, verificar la resistencia al conflicto de una marca se convierte en una tarea muy difícil. Corresponde al problema de la accesibilidad en un CPN: ¿se puede alcanzar un estado o se puede lograr una marca que contenga un conflicto?. Este problema de alcanzabilidad es conocido por ser NP-completo para las redes Petri ordinarias [22] y como las RCP son funcionalmente idénticas, no podemos esperar verificar la resistencia a los conflictos de una estructura normativa fuera de línea en un tiempo razonable. Por lo tanto, se necesitan mecanismos de distribución y tiempo de ejecución para garantizar que una estructura normativa mantenga la coherencia. Presentamos uno de esos mecanismos en la sección siguiente. 6. GESTIÓN DE ESTRUCTURAS NORMATIVAS Una vez detectado un conflicto (según se define en la Sección 4), proponemos emplear al unificador para resolver el conflicto. En nuestro ejemplo, si las variables en prh(inform(a1, r1, a2, r2, p(Y, d), T)) no obtienen los valores especificados en la sustitución Sin embargo, en lugar de computar el conjunto de complementos de una sustitución (que puede ser un conjunto infinito) proponemos anotar la prohibición con el propio unificador y utilizarla para determinar cuáles son las variables de esa prohibición no pueden ser en futuras unificaciones para evitar un conflicto. Por lo tanto denotamos prohibiciones anotadas como prh( ̄I) . . Es un conjunto de unificadores. Las normas anotadas3 se interpretan como constructos deonticos con influencias restringidas, es decir, su efecto (sobre agentes, roles e ilocuciones) ha sido limitado por el conjunto de unificadores. Una prohibición puede estar en conflicto con varias obligaciones en una escena normativa dada s = id, Δ y tenemos que registrar (y posiblemente evitar) todos estos conflictos. Definimos a continuación un algoritmo que garantiza que una posición normativa se añada a una escena normativa de tal manera que no cause ningún conflicto. 3 Aunque proponemos limitar las prohibiciones, el mismo mecanismo puede utilizarse para definir la reducción de obligaciones en su lugar. Estas diferentes políticas dependen de la semántica deontica prevista y de los requisitos de los sistemas abordados. Por ejemplo, algunos MAS pueden exigir que sus agentes no actúen en presencia de conflictos, es decir, que se reduzca la obligación. 6.1 Resolución de conflictos Proponemos una forma de resolver los conflictos normativos mediante la unificación. Detectamos la superposición de las influencias de las normas, es decir. cómo afectan al comportamiento de los agentes afectados, y reducimos la influencia de la posición normativa, mediante el uso adecuado de las anotaciones al comprobar si la norma se aplica a las ilocuciones. El algoritmo mostrado en la Figura 4 muestra cómo mantenemos un conjunto de normas libres de conflictos. Añade una norma dada N a un estado normativo existente, libre de conflictos Δ, obteniendo un nuevo estado normativo resultante Δ que es libre de conflictos, es decir, sus prohibiciones están anotadas con un conjunto de conjuntos de conflictos que indican qué fijaciones para variables deben evitarse para que los conflictos no tengan lugar. algoritmo addNorm(N, Δ) comienza 1 marca de tiempo(N) 2 caso N de 3 per( ̄I): Δ := Δ  {N} 4 prh(I): si N  Δ s.t. Conflict(N, N, Las líneas 4-5 abordan el caso cuando intentamos agregar una prohibición de base a un estado normativo: si entra en conflicto con cualquier obligación, entonces se descarta; de lo contrario se añade al estado normativo. En las líneas 6 a 12 se describe la situación en que la posición normativa que debe añadirse es una prohibición no básica. En este caso, el algoritmo inicializa un conjunto vacío y bucles (línea 9-10) a través de las normas N en el antiguo estado normativo Δ. Después de encontrar uno que entra en conflicto con N, el algoritmo actualiza el valor de la nueva configuración de conflicto (línea 10). Mediante el bucle a través de Δ, somos capaces de comprobar cualquier conflicto entre la nueva prohibición y las obligaciones existentes, construyendo adecuadamente la anotación  que se utilizará al añadir N a Δ en la línea 11. En las líneas 13 a 27 se describe cómo se ajusta una nueva obligación a un estado normativo existente. Hacemos uso de dos conjuntos inicialmente vacíos, temporales, Δ1, Δ2. El algoritmo pasa a través de Δ (líneas 16-25) recogiendo las prohibiciones anotadas N Hay, sin embargo, dos casos a tratar: el de cuando un motivo La Sexta Intl. Conjunto Conf. sobre los agentes autónomos y los sistemas multiagentes (AAMAS 07) se encuentra la prohibición 641 (línea 17), y su excepción, que abarca las prohibiciones no terrestres (línea 20). En ambos casos, la antigua prohibición se almacena en Δ1 (líneas 18 y 23) para ser posteriormente retirada de Δ (línea 26). Sin embargo, en el caso de una prohibición no terrestre, el algoritmo actualiza su anotación de conjuntos de conflicto (línea 24). El bucle garantiza que se lleve a cabo una búsqueda exhaustiva (lineal) a través de un estado normativo, comprobando si la nueva obligación está en conflicto con cualquier prohibición existente, posiblemente actualizando las anotaciones de estas prohibiciones en conflicto. En la línea 26 el algoritmo construye la nueva actualización Δ eliminando las antiguas prohibiciones almacenadas en Δ1 y añadiendo las prohibiciones actualizadas almacenadas en Δ2 (si las hay), así como la nueva obligación N. Nuestro algoritmo propuesto es correcto en que, para una posición normativa dada N y un estado normativo Δ, proporciona un nuevo estado normativo Δ en el que todas las prohibiciones tienen anotaciones que registran cómo se unifican con las obligaciones existentes. Sin embargo, las anotaciones pueden estar vacías: este es el caso cuando tenemos una prohibición básica o una prohibición que no unifica/conflige con ninguna obligación. Los permisos no afectan a nuestro algoritmo y se tratan adecuadamente (línea 3). Cualquier intento de insertar una prohibición de base que entre en conflicto, produce el mismo estado normativo (línea 4). Cuando se añade una nueva obligación, el algoritmo garantiza que se tienen en cuenta todas las prohibiciones (líneas 14 a 27), lo que conduce a la eliminación de las prohibiciones sobre el terreno en conflicto o a la actualización de las anotaciones de las prohibiciones no sobre el terreno. El algoritmo siempre termina: los bucles están sobre un conjunto finito Δ y los conflictos comprueban y establecen operaciones siempre terminan. La complejidad del algoritmo es lineal: el conjunto Δ sólo se examina una vez para cada caso posible de norma que se añade. Al gestionar los estados normativos también es posible que necesitemos eliminar posiciones normativas. Esto es sencillo: los permisos se pueden retirar sin ningún problema; las prohibiciones anotadas también se pueden eliminar sin más consideraciones; sin embargo, las obligaciones requieren algunas tareas domésticas. Cuando se va a eliminar una obligación, debemos verificarla contra todas las prohibiciones anotadas a fin de actualizar sus anotaciones. Aplicamos la comprobación de conflicto y obtenemos un unificador, luego eliminamos este unificador de la anotación de prohibiciones. Invocamos el algoritmo de eliminación como removeNorm(N, Δ): devuelve un nuevo estado normativo Δ en el que N ha sido eliminado, con posibles alteraciones a otras posiciones normativas como se explicó. 6.2 Promulgación de una estructura normativa La promulgación de una estructura normativa equivale a la ejecución paralela y distribuida de escenas normativas y transiciones normativas. A título ilustrativo, describiremos a continuación la interacción entre las situaciones normativas de pago y entrega y la transición normativa que los vincula en la mitad superior de la figura 2. Con este objetivo, considere, por ejemplo, que obl(inform(jules, cliente, rod, acc, pay(copper, 400, 350), T) Δpago y que Δentrega tiene prh(inform(rod,wm, jules, cliente, entregado(Z, Q), T)). Tales estados indican que el cliente Jules está obligado a pagar £400 por 350kg de cobre al contador Rod de acuerdo con la escena normativa de pago, mientras que Rod, asumiendo el papel de gerente de almacén esta vez, está prohibido entregar cualquier cosa al cliente Jules de acuerdo con la escena normativa de entrega. Para cada escena normativa, el proceso de promulgación es el siguiente. En primer lugar, procesa su cola de mensajes entrantes que contiene tres tipos de mensajes: declaraciones de la actividad a la que está vinculada; y comandos normativos para agregar o eliminar posiciones normativas. Por ejemplo, en nuestro ejemplo, la escena normativa de pago recoge la ilocución I = utt((inform(jules, cliente, varilla, acc, pay(cobre, 400, 350), 35)) para el cliente Jules pendiente de pago por cobre (a través de la flecha A en la figura 2). Las Uterancias son timestamped y subsecuentemente agregadas al estado normativo. Tendríamos Δpayment = Δpayment {I}, en nuestro ejemplo. Al recibir órdenes normativas para agregar o eliminar una posición normativa, la escena normativa invoca el algoritmo de adición o eliminación correspondiente descrito en la Sección 6.1. En segundo lugar, la escena normativa reconoce su cambio de estado al enviar un mensaje desencadenante a cada transición normativa saliente a la que está conectado. En nuestro ejemplo, el escenario normativo de pagos estaría señalando su cambio de estado a la transición normativa nt. Para las transiciones normativas, el proceso funciona de manera diferente. Debido a que cada transición normativa controla el funcionamiento de una sola regla, al recibir un mensaje de activación, encuesta cada escena normativa entrante para sustituciones de los esquemas de ilocución pertinentes en el LHS de su regla. En nuestro ejemplo, nt (responsable de la regla descrita en la Sección 3.4), encuestaría el escenario normativo de pago (vía flecha B) para sustituciones. Al recibir respuestas de ellos (en forma de conjuntos de sustituciones junto con marcas de tiempo), tiene que unificar las sustituciones de cada una de estas escenas normativas. Para cada unificación que encuentra, la regla se activa, y por lo tanto el comando normativo correspondiente se envía a lo largo de la escena normativa de salida. La transición normativa entonces mantiene un seguimiento del mensaje de disparo que envió y de las marcas de tiempo de las posiciones normativas que desencadenó el disparo. Esto se hace para asegurar que las mismas posiciones normativas en el LHS de una regla sólo desencadenen su disparo una vez. En nuestro ejemplo, nt estaría recibiendo  = {X/jules, Y/rod, Z/copper, Q/350} de la escena normativa de pagos. Dado que las substiciones en unifican con la regla nts, la regla es disparada, y el comando normativo add(delivery : obli(rod, wm, jules, client, delivery(copper, 350), T)) es enviado a lo largo de la escena normativa de entrega para obligar a Rod a entregar al cliente Jules 350kg de cobre. Después de eso, la escena normativa de entrega invocaría el algoritmo addNorm de la figura 4 con Δdelivery y N = obli(rod, wm, jules, client, delivered(copper, 350)) como argumentos. 7. TRABAJOS Y CONCLUSIONES RELACIONADOS Nuestras contribuciones en este documento son triples. En primer lugar, introducimos un enfoque para la gestión y el razonamiento de las normas de manera distribuida. Hasta donde sabemos, hay poco trabajo publicado en esta dirección. En [8, 21] se presentan dos idiomas para la aplicación distribuida de las normas en el MAS. Sin embargo, en ambos trabajos, cada agente tiene una interfaz de mensaje local que envía mensajes legales de acuerdo con un conjunto de normas. Dado que estas interfaces son locales para cada agente, las normas sólo pueden expresarse en términos de acciones de ese agente. Se trata de una grave desventaja, por ejemplo. cuando uno necesita activar una obligación para con un agente debido a un cierto mensaje de otro. La segunda contribución es la propuesta de una estructura normativa. La noción es fructífera porque permite la separación de las cuestiones normativas y de procedimiento. La estructura normativa que proponemos evidencia la similitud entre la propagación de posiciones normativas y la propagación 642 La Sexta Intl. Conjunto Conf. sobre Agentes Autónomos y Sistemas Multi-Agentes (AAMAS 07) de tokens en Redes Petri Coloradas. Esa similitud sugiere fácilmente una cartografía entre los dos, y da lugar a un tratamiento analítico conveniente de la estructura normativa, en general, y la complejidad de la detección de conflictos, en particular. La idea de modelar interacciones (en forma de conversaciones) a través de Petri Nets se ha investigado en [18], donde el medio de interacción y los agentes individuales se modelan como subredes de CPN que posteriormente se combinan para su análisis. En [5], las conversaciones se diseñan y analizan por primera vez a nivel de los CPN y posteriormente se traducen en protocolos. Lin et al. [20] mapear esquemas de conversación a CPNs. Según nuestro conocimiento, el uso de esta representación en apoyo de la detección de conflictos en el MAS regulado no ha sido reportado en otros lugares. Por último, presentamos un mecanismo distribuido para resolver los conflictos normativos. Sartor [25] trata los conflictos normativos desde el punto de vista de la teoría jurídica y sugiere una forma de ordenar las normas involucradas. Su idea se implementa en [12], pero requiere un recurso central para el mantenimiento de normas. El enfoque para la detección y resolución de conflictos es una adaptación y extensión del trabajo sobre gráficos de instanciación reportados en [17] y un algoritmo relacionado en [27]. El algoritmo presentado en el presente trabajo puede ser utilizado para administrar estados normativos distribuidos: escenas normativas que suceden en paralelo tienen un estado normativo asociado Δ al que el algoritmo se aplica de forma independiente cada vez que se introduce una nueva norma. Estas tres contribuciones que presentamos en este documento abren muchas posibilidades para el trabajo futuro. Cabe mencionar en primer lugar, que como estrategia amplia estamos trabajando en una generalización de la noción de estructura normativa para hacerla funcionar con diferentes modelos de coordinación, con un contenido deontico más rico y además de diferentes realizaciones computacionales de MAS regulado. Como primer paso en esta dirección estamos aprovechando la disociación entre los protocolos de interacción y la orientación normativa declarativa que la estructura normativa pone a disposición, para proporcionar una capa normativa para las instituciones electrónicas (como se define en [1]). Esperamos que este acoplamiento dote a las instituciones electrónicas de un entorno normativo más flexible y más expresivo. Además, queremos extender nuestro modelo a través de varias direcciones: (1) manejar la negación y las limitaciones como parte del lenguaje de la norma, y en particular la noción de tiempo; (2) dar cabida a múltiples autoridades jerárquicas de normas basadas en roles, en la línea de Cholvy y Cuppens [3] y relaciones de poder como sugiere Carabelea et al. [2]; (3) para captar en el algoritmo de resolución de conflictos diferentes semánticas relacionadas con las nociones deonticas apoyando diferentes axiomaciones (por ejemplo, fuerza relativa de la prohibición frente a la obligación, nociones deonticas predeterminadas, inconsistencias deonticas). En el lado teórico, pretendemos utilizar técnicas de análisis de CPN para caracterizar clases de CPN (por ejemplo, acíclicas, simétricas, etc.) que corresponden a familias de Estructuras Normativas susceptibles a la detección de conflictos fuera de línea. La combinación de estas técnicas junto con nuestros mecanismos de resolución de conflictos en línea pretende dotar a los diseñadores del MAS de la capacidad de incorporar normas en sus sistemas de una manera basada en principios. 8. REFERENCIAS [1] J. L. Arcos, M. Esteva, P. Noriega, J. A. Rodr guez, y C. Sierra. Ingeniería de entornos abiertos con instituciones electrónicas. Journal on Engineering Applications of Artificial Intelligence, 18(2):191-204, 2005. [2] C. Carabelea, O. Boissier, y C. Castelfranchi. Usar el poder social para permitir a los agentes razonar sobre ser parte de un grupo. En el 5o Internat. Taller, EEAT 2004, págs. 166 a 177, 2004. [3] L. Cholvy y F. Cuppens. Solución de conflictos normativos mediante la fusión de funciones. En la Quinta Conferencia Internacional sobre Inteligencia Artificial y Derecho, Washington, Estados Unidos, 1995. [4] S. Christensen y T. B. Haagh. Diseño CPN - vista general de la sintaxis CPN ML. Informe técnico, Universidad de Aarhus, 1996. [5] R. S. Cost, Y. Chen, T. W. Finin, Y. Labrou e Y. Peng. Usando petri redes de colores para modelar la conversación. In Issues in Agent Communication, págs. 178 a 192, Londres, Reino Unido, 2000. [6] F. Dignum. Agentes autónomos con normas. Inteligencia Artificial y Ley, 7(1):69-79, 1999. [7] A. Elhag, J. Breuker y P. Brouwer. Sobre el análisis formal de los conflictos normativos. Información & Comunicaciones. Techn. Ley, 9(3):207-217, Oct. 2000. [8] M. Esteva, W. Vasconcelos, C. Sierra, y J. A. Rodr guez-Aguilar. Consistencia normativa en las instituciones electrónicas. volumen 3171 (LNAI), páginas 494-505. Springer-Verlag, 2004. [9] M. Fitting. Prueba de la lógica de primer orden y del teorema automatizado. Springer-Verlag, Nueva York, Estados Unidos, 1990. [10] N. Fornara, F. Vigan`o y M. Colombetti. Un enfoque impulsado por eventos a las normas en las instituciones artificiales. En el taller AAMAS05: Agentes, normas e instituciones para sistemas multiagente regulados (ANI@REM), Utrecht, 2005. [11] D. Gaertner, P. Noriega y C. Sierra. Ampliación de la arquitectura BDI con compromisos. En Actas del IX Congreso Internacional de la Asociación Catalana de Inteligencia Artificial, 2006. [12] A. Garc a-Camino, P. Noriega, y J.-A. Rodr guez-Aguilar. Un algoritmo para la resolución de conflictos en actividades reguladas compuestas. En el 7o taller Int.Workshop - ESAW 06, 2006. [13] A. Garc a-Camino, J.-A. Rodr guez-Aguilar, C. Sierra y W. Vasconcelos. Una arquitectura distribuida para las Sociedades de Agentes de Normas. En DALT III, volumen 3904 (LNAI), páginas 89 a 105. Springer, 2006. [14] F. Giunchiglia y L. Serafini. Lógicas jerárquicas multilenguaje o: Cómo podemos prescindir de lógicas modales. Inteligencia Artificial, 65(1):29-70, 1994. [15] J. Habermas. La Teoría de la Comunicación Acción, Volumen Uno, La Razón y la Racionalización de la Sociedad. Beacon Press, 1984. [16] K. Jensen. Redes Petri coloreadas: Conceptos básicos, métodos de análisis y usos prácticos (Volumen 1). Springer, 1997. [17] M. Kollingbaum y T. Norman. Estrategias para resolver conflictos de normas con razonamiento práctico. En el Taller de Coordinación de la CEPA en Sociedades de Agentes Emergentes 2004, 2004. [18] J.-L. Koning, G. Francois e Y. Demazeau. Formalización y prevalidación para protocolos de interacción en sistemas multiagente. En ECAI, págs. 298 a 307, 1998. [19] B. Kramer y J. Mylopoulos. Representación del conocimiento. En S. C. Shapiro, editor, Enciclopedia de Inteligencia Artificial, volumen 1, páginas 743-759. John Wiley & Sons, 1992. [20] F. Lin, D. H. Norrie, W. Shen y R. Kremer. Un enfoque basado en esquemas para especificar las políticas de conversación. En Temas de Comunicación de Agentes, págs. 193-204, 2000. [21] N. Minsky. Interacción gobernada por la ley (LGI): Un mecanismo de coordinación y control distribuido (Una introducción y un manual de referencia). Informe técnico, Universidad Rutgers, 2005. [22] T. Murata. Redes Petri: Propiedades, análisis y aplicaciones. Actas del IEEE, 77(4):541-580, 1989. [23] S. Parsons, C. Sierra y N. Jennings. Agentes que razonan y negocian discutiendo. Diario de Lógica y Computación, 8(3):261-292, 1998. [24] A. Ricci y M. Viroli. Artefactos de Coordinación: Una Abstracción Unificante para la Coordinación de Ingeniería Mediada por el Medio Ambiente en MAS. Informatica, 29:433-443, 2005. [25] G. Sartor. Conflictos normativos en el razonamiento jurídico. Inteligencia Artificial y Ley, 1(2-3):209-235, junio de 1992. [26] M. Sergot. Una teoría computacional de posiciones normativas. ACM Trans. Comput. Lógica, 2(4):581-622, 2001. [27] W. W. Vasconcelos, M. Kollingbaum, y T. Norman. Resolver conflictos e incoherencias en las organizaciones virtuales reguladas por normas. En Actas de AAMAS 07, Hawaii, EE.UU., 2007. IFAAMAS. [28] G. H. von Wright. Norma y acción: Una investigación lógica. Routledge y Kegan Paul, Londres, 1963. [29] M. Wooldridge. Una introducción a los sistemas multiagente. John Wiley & Sons, Chichester, Reino Unido, febrero de 2002. El Sexto Intl. Conjunto Conf. sobre agentes autónomos y sistemas de agentes múltiples (AAMAS 07) 643 ",
            "error": [
                "gráfico bipartito",
                "grafica bipartita",
                "gráfico bipartito"
            ]
        },
        "prohibition": {
            "translated_key": "prohibición",
            "translated_annotated_text": "Gestión de Normas Distribuidas en Sistemas Regulados Multi-Agente ∗ Dorian Gaertner Dept. de Computación, Imperial College London, Londres SW7 2AZ, Reino Unido dg00@doc.ic.ac.uk Andrés García-Camino, Pablo Noriega, J.-A. Rodriguez-Aguilar IIIA-CSIC, 08193 Bellaterra, España {andres,pablo,jarážiya.csic.es Wamberto Vasconcelos Dept. de Ciencias de la Computación, Universidad de Aberdeen, Aberdeen AB24 3UE, Reino Unido wvasconcelos@acm.org RESUMEN Las normas son ampliamente reconocidas como un medio de coordinar sistemas multi-agentes. La gestión distribuida de las normas es una cuestión difícil y observamos una falta de realizaciones computacionales verdaderamente distribuidas de los modelos normativos. Con el fin de regular el comportamiento de los agentes autónomos que participan en múltiples actividades relacionadas, proponemos un modelo normativo, la Estructura Normativa (NS), un artefacto que se basa en la propagación de posiciones normativas (obligaciones, prohibiciones, permisos), como consecuencias de las acciones de los agentes. Dentro de un NS, los conflictos pueden surgir debido a la naturaleza dinámica del MAS y la concurrencia de acciones de los agentes. Sin embargo, garantizar la libertad de conflicto de un NS en el momento del diseño es computacionalmente intratable. Demostramos esto formalizando la noción de conflicto, proporcionando un mapeo de los NS en las Redes Petri Coloreadas y tomando prestado los resultados teóricos bien conocidos de ese campo. Dado que se requiere la resolución de conflictos en línea, presentamos un algoritmo tratable que se empleará de forma distribuida. Luego demostramos que este algoritmo es primordial para la promulgación distribuida de un NS. Categorías y sujetos Descriptores I.2.11 [Inteligencia Artificial Distribuida]: Idiomas y estructuras Términos generales Algoritmos, Diseño, Teoría 1. INTRODUCCIÓN Una característica fundamental de los sistemas multiagente abiertos y regulados en los que interactúan agentes autónomos, es que los agentes participantes están destinados a cumplir con las convenciones del sistema. Las normas pueden utilizarse para modelar tales convenciones y, por lo tanto, como medio para regular el comportamiento observable de los agentes [6, 29]. Hay muchas contribuciones sobre el tema de las normas de sociólogos, filósofos y lógicos (por ejemplo, [15, 28]). Sin embargo, hay muy pocas propuestas para la realización computacional de modelos normativos - la forma en que las normas pueden integrarse en el diseño y ejecución de MAS. Los pocos que existen (e.g. [10, 13, 24]), funcionan de manera centralizada, lo que crea cuellos de botella y puntos de fallo únicos. Hasta donde sabemos, ninguna propuesta apoya verdaderamente la promulgación distribuida de entornos normativos. En nuestro documento abordamos ese problema y proponemos medios para manejar los compromisos contradictorios en sistemas abiertos, regulados y multiagentes de manera distribuida. El tipo de MAS regulado que contemplamos consiste en actividades múltiples, simultáneas, relacionadas donde los agentes interactúan. Cada agente puede participar simultáneamente en varias actividades, y cambiar de una actividad a otra. Las acciones de un agente dentro de una actividad pueden tener consecuencias en forma de posiciones normativas (es decir. obligaciones, permisos y prohibiciones) [26] que puedan limitar su comportamiento futuro. Por ejemplo, un agente comprador que se queda sin crédito puede estar prohibido hacer más ofertas, o un agente vendedor está obligado a entregar después de cerrar un acuerdo. Asumimos que los agentes pueden optar por no cumplir todas sus obligaciones y, por lo tanto, pueden ser sancionados por el MAS. Obsérvese que, cuando se distribuyen las actividades, las posiciones normativas deben derivarse de las actividades en las que se generan a aquellas en las que surten efecto. Por ejemplo, la obligación de los vendedores de arriba debe fluir (o propagarse) de una actividad de negociación a una actividad de entrega. Dado que en un MAS abierto y regulado no se pueden incorporar aspectos normativos en el diseño de los agentes, adoptamos la opinión de que el MAS debe complementarse con un conjunto separado de normas que regulen aún más el comportamiento de los agentes participantes. Para modelar la separación de preocupaciones entre el nivel de coordinación (interacciones de agentes) y el nivel normativo (propagación de posiciones normativas), proponemos un artefacto llamado Estructura Normativa (NS). Dentro de un NS pueden surgir conflictos debido a la naturaleza dinámica del MAS y la concurrencia de acciones de los agentes. Por ejemplo, un agente puede estar obligado y prohibido a realizar el 636 978-81-904262-7-5 (RPS) c 2007 IFAAMAS muy mismo acción en una actividad. Dado que la regulación de un MAS implica que los agentes participantes deben ser conscientes de la validez de las acciones que tienen lugar dentro de él, dichos conflictos deben ser identificados y posiblemente resueltos si se necesita una reivindicación de validez para que un agente realice una acción o sea sancionado. Sin embargo, garantizar la libertad de conflicto de un NS en el momento del diseño es computacionalmente intratable. Demostramos esto formalizando la noción de conflicto, proporcionando un mapeo de los NS en las redes de Petri de colores (CPNs) y tomando prestado los resultados teóricos bien conocidos del campo de los CPNs. Creemos que se requiere la detección y resolución de conflictos en línea. Por lo tanto, presentamos un algoritmo tratable para la resolución de conflictos. Este algoritmo es primordial para la promulgación distribuida de un NS. El documento se organiza de la siguiente manera. En la Sección 2 detallamos un escenario para servir de ejemplo a lo largo del artículo. A continuación, en la Sección 3 definimos formalmente el artefacto de la estructura normativa. Además, en la sección 4 formalizamos la noción de conflicto para posteriormente analizar la complejidad de la detección de conflictos en términos de RCP en la sección 5. En la sección 6 se describe la gestión computacional de los NS describiendo su promulgación y presentando un algoritmo para la resolución de conflictos. Por último, comentamos sobre la labor conexa, sacamos conclusiones e informamos sobre la labor futura en la sección 7. 2. SCENARIO Utilizamos un escenario de cadena de suministro en el que empresas e individuos se reúnen en un mercado en línea para realizar negocios. El procedimiento de transacción global puede organizarse como seis actividades distribuidas, representadas como nodos en el diagrama de la Figura 1. En ellas participan diferentes participantes cuyo comportamiento se coordina a través de protocolos. En este escenario, los agentes pueden desempeñar uno de los cuatro papeles: marExit Inscripción Pago Entrega Negociación Coordinación Modelo Contrato Figura 1: Estructura de actividad del contador de ketplace (acc), cliente, proveedor (supp) y gerentes de almacén (wm). Las flechas que conectan las actividades representan cómo los agentes pueden moverse de una actividad a otra. Después de registrarse en el mercado, los clientes y proveedores se reúnen en una actividad en la que negocian los términos de su transacción, es decir. los precios, los importes de las mercancías que deban entregarse, los plazos y otros detalles. En la actividad contractual, se establece el pedido y se prepara una factura. El cliente participará entonces en una actividad de pago, verificando su solvencia e instruyendo a su banco a transferir la cantidad correcta de dinero. Mientras tanto, el proveedor se encargará de la entrega de las mercancías (por ejemplo: a través de un administrador de almacén) en la actividad de entrega. Finalmente, los agentes pueden salir del mercado conforme a un protocolo de salida predeterminado. El contable del mercado participa en la mayoría de las actividades como proveedor confiable de herramientas de auditoría. En el resto del documento nos basaremos en este escenario para ilustrar la noción de estructura normativa e ilustrar nuestro enfoque de la detección y resolución de conflictos en un entorno distribuido. 3. ESTRUCTURA NORMATIVA En los agentes MASs interactúan según protocolos que naturalmente se distribuyen. Abogamos por que las acciones en uno de esos protocolos puedan tener un efecto en la promulgación de otros protocolos. Algunas acciones pueden ser prohibidas u obligatorias, por ejemplo. Tomamos posiciones normativas para ser obligaciones, prohibiciones y permisos similares al trabajo descrito en [26]. La intención de agregar o eliminar una posición normativa que llamamos comando normativo. Los casos de posiciones normativas en un protocolo también pueden tener consecuencias para otros protocolos1. Para definir nuestro lenguaje de norma y especificar cómo se propagan las posiciones normativas, nos hemos inspirado en sistemas multicontexto [14]. Estos sistemas permiten estructurar el conocimiento en teorías formales distintas y definir las relaciones entre ellos. Las relaciones se expresan como reglas puente - la deducibilidad de las fórmulas en algunos contextos conduce a la deducción de otras fórmulas en otros contextos. Recientemente, estos sistemas se han utilizado con éxito para definir arquitecturas de agentes [11, 23]. La metáfora se traduce a nuestro trabajo actual de la siguiente manera: la expresión de las ilocuciones y/o la existencia de posiciones normativas en algunas escenas normativas conduce a la deducción de posiciones normativas en otras escenas normativas. Nos preocupa la propagación y distribución de posiciones normativas dentro de una red de escenas normativas distribuidas como consecuencia de las acciones de los agentes. Tomamos escenas normativas para ser conjuntos de posiciones normativas y expresiones que están asociadas con un protocolo de interacción subyacente correspondiente a una actividad. En esta sección, presentamos primero un lenguaje simple que capta estos aspectos e introduce formalmente las nociones de escena normativa, regla de transición normativa y estructura normativa. Damos la semántica prevista de estas reglas y mostramos cómo controlar un MAS a través de normas en un ejemplo. 3.1 Conceptos básicos Los componentes básicos de nuestro lenguaje son términos y fórmulas atómicas: Def. 1. Un término, denotado como t, es (i) cualquier constante expresada usando minúsculas (con o sin subíndices), por ejemplo. a, b0, c o ii) cualquier variable expresada utilizando mayúsculas (con o sin subíndices), por ejemplo. X, Y, Zb o iii) cualquier función f(t1,. . . , tn), donde f es un símbolo de función n-ary y t1,.., tn son términos. Algunos ejemplos de términos y funciones son Crédito, precio u oferta (biblia, 30), siendo respectivamente una variable, una constante y una función. Estaremos haciendo uso de identificadores en todo el papel, que son términos constantes y también necesitan la siguiente definición: Def. 2. Una fórmula atómica es cualquier construcción p(t1,. . . , tn), donde p es un símbolo predicado n-ary y t1,. . . , son términos. El conjunto de todas las fórmulas atómicas se denota como Δ. Nos centramos en una clase expresiva de MASs en la que la interacción se lleva a cabo por medio de actos de discurso ilocutionarios intercambiados entre los agentes participantes: Def. 3. I I I son las fórmulas atómicas terrestres que tienen la forma p(ag, r, ag, r, , t) donde p es un elemento de 1 Aquí, abstracto de protocolos y se refieren a ellos genéricamente como actividades. El Sexto Intl. Conjunto Conf. en Agentes Autónomos y Sistemas Multi-Agentes (AAMAS 07) 637 un conjunto de partículas ilocucionarias (por ejemplo: informar, petición, oferta); ag, ag son identificadores de agente; r, r son identificadores de rol; , un término de base arbitrario, es el contenido del mensaje, construido a partir de un lenguaje de contenido compartido; t  N es un sello de tiempo. El significado intuitivo de p(ag, r, ag, r, m, t) es que agente ag jugando rol r enviado mensaje m a agente ag jugando rol r en el momento t. Un ejemplo de una ilocución es informar(ag4, supp, ag3, cliente, offer(wire, 12), 10). A veces es útil referirse a las ilocuciones que no están totalmente fundamentadas, es decir, aquellas que pueden contener variables no instantiated (libres). En la descripción de un protocolo, por ejemplo, los valores precisos del mensaje intercambiado pueden quedar sin especificar. Durante la promulgación de los agentes del protocolo se producirán los valores reales que darán lugar a una ilocución del suelo. Así podemos definir esquemas de ilocución: Def. 4. Un esquema de ilocución ̄I es cualquier fórmula atómica p(ag, r, ag, r, ♥, t) en la que algunos de los términos pueden ser variables o pueden contener variables. 3.2 Definición formal de la noción de NS Primero definimos las escenas normativas de la siguiente manera: Def. 5. Una escena normativa es una tupla s = ids, Δs donde los ids son un identificador de escena y Δs es el conjunto de fórmulas atómicas Por ejemplo, una instantánea del estado de la escena normativa de entrega de nuestro escenario podría ser representada como: Δs = 8 < : utt(request(sean, client, kev, wm, receive(wire, 200), 20)), utt(accept(kev, wm, seen, customer, receive(wire, 200), 30)) 9 = ; Es decir, Tenga en cuenta que el estado de una escena normativa Δs evoluciona con el tiempo. Estas escenas normativas están conectadas entre sí a través de transiciones normativas que especifican cómo las expresiones y posiciones normativas en una escena afectan a otras escenas normativas. Como se mencionó anteriormente, las actividades no son independientes, ya que las ilocuciones pronunciadas en algunas de ellas pueden tener un efecto en otras. Las reglas normativas de transición definen las condiciones bajo las cuales se genera un comando normativo. Estas condiciones son declaraciones o posiciones normativas asociadas a un protocolo dado (denominadas por ejemplo. actividad : expresión ) que dan un comando normativo, es decir. la adición o supresión de otra posición normativa, posiblemente relacionada con una actividad diferente. Nuestras reglas de transición están así definidas: Def. 6. Una regla de transición normativa R es de la forma: R ::= V C V ::= ids : D  V, V D ::= N  utt( ̄I) N ::= per( ̄I)  prh( ̄I)  obli( ̄I) C ::= add(ids : N)  remove(ids : N) donde ̄I es un esquema permiso, \"prohibición\" u obligación), ids es un identificador para la actividad s y C es un comando normativo. Dotamos nuestro lenguaje con la semántica habitual de los lenguajes basados en reglas [19]. Las reglas trazan una estructura normativa existente a una nueva estructura normativa en la que sólo cambia el estado de las escenas normativas. En las definiciones siguientes nos basamos en el concepto estándar de sustitución [9]. Def. 7. Una transición normativa es un tupla b = idb, rb donde idb es un identificador y rb es una regla de transición normativa. Proponemos ampliar la noción de MAS, regulada por protocolos, con una capa adicional consistente en escenas normativas y transiciones normativas. Esta capa se representa como un gráfico bipartito que llamamos estructura normativa. Una estructura normativa relaciona escenas normativas y transiciones normativas especificando qué posiciones normativas deben generarse o eliminarse en qué escenas normativas. Def. 8. Una estructura normativa es un gráfico bipartito etiquetado NS = Nodos, bordes, Lin, Lout. Nodos es un conjunto de Sâ B donde S es un conjunto de escenas normativas y B es un conjunto de transiciones normativas. Edges es un conjunto Ain Aout donde Ain  S × B es un conjunto de arcos de entrada etiquetados con una fórmula atómica utilizando la función de etiquetado Lin : Ain → D; y Aout  B × S es un conjunto de arcos de salida etiquetados con una posición normativa utilizando la función de etiquetado Lout : Aout → N. Lo siguiente debe contener: 1. Cada fórmula atómica que aparece en el LHS de una regla rb debe ser de la forma (ids : D) donde s â € € € € TM € € € € € € € € € € € € € € € € € € € € € € € € € Ain tal que es = La fórmula atómica que aparece en el RHS de una regla rb debe ser de la forma add(ids : N) o remove(ids : N) donde s â € S y â € Aout tal que aout = (b, s) y Lout (aout ) = N. 3. Ain tal que a = (s, b) y b = idb, rb y Lin (a) = D entonces (ids:D) debe ocurrir en el LHS de rb. 4. Afuera de tal manera que a = (b, s) y b = idb, rb y Lout (a) = N luego add(ids : N) o remove(ids : N) deben ocurrir en el RHS de rb. Los dos primeros puntos aseguran que cada fórmula atómica en el LHS de una regla de transición normativa etiqueta un arco que entra en la transición normativa apropiada en la estructura normativa, y que la fórmula atómica en el RHS etiqueta el arco saliente correspondiente. Los puntos tres y cuatro aseguran que las etiquetas de todos los arcos entrantes se utilicen en el LHS de la regla de transición normativa en la que entran estos arcos, y que las etiquetas de todos los arcos salientes se utilicen en el RHS de la regla de transición normativa que estos arcos dejan. 3.3 Semántica Destinada La semántica formal se definirá mediante un mapeo a Redes Petri Coloradas en la Sección 5.1. Aquí comenzamos a definir la semántica prevista de las reglas normativas de transición describiendo cómo una regla cambia un escenario normativo de una estructura normativa existente que produce una nueva estructura normativa. Cada regla se activa una vez para cada sustitución que unifica el lado izquierdo V de la regla con el estado de las escenas normativas correspondientes. Una fórmula atómica (es decir, una declaración o una posición normativa) si es unificable con una declaración o posición normativa que pertenece al estado del escenario normativo correspondiente. Cada vez que se activa una regla, se lleva a cabo el comando normativo especificado a la derecha de esa regla, con la intención de añadir o eliminar una posición normativa del estado de la escena normativa correspondiente. Sin embargo, la adición no es incondicional, ya que pueden surgir conflictos. Este tema se tratará en las secciones 4 y 6.1. 638 La Sexta Intl. Conjunto Conf. en Agentes Autónomos y Sistemas Multi-Agentes (AAMAS 07) 3.4 Ejemplo En nuestro ejemplo de ejecución tenemos la siguiente regla de transición normativa ejemplar: „ pago : obli(inform(X, cliente, Y, acc, pay(Z, P, Q, T)), pago : utt(inform(X, cliente, Y, acc, pay(Z, P, Q), T)) « entrega : a La norma es una obligación del agente Y (esta vez asumiendo el papel de gerente de almacén wm) de enviar un mensaje al cliente X que el artículo Z ha sido entregado. En la Figura 2 se muestra una representación diagnóstica de cómo se relacionan las actividades y una estructura normativa: Pago Entrega Contrato Nivel Normativo Salida Registro Pago Entrega Negociación Nivel de Coordinación Contrato nt Figura 2: Actividades y Estructura Normativa A medida que se pronuncian las ilocuciones durante las actividades, surgen posiciones normativas. Las preferencias y las posiciones normativas se combinan en normas de transición, lo que provoca el flujo de posiciones normativas entre las distintas situaciones normativas. La conexión entre los dos niveles se describe en la sección 6.2. 4. DEFINICIÓN DE CONFLICTOS Los términos conflicto deontico e inconsistencia deontica se han utilizado indistintamente en la literatura. Sin embargo, en este trabajo adoptamos el punto de vista de [7] en el que los autores sugieren que surge una inconsistencia deontica cuando una acción es simultáneamente permitida y prohibida - ya que un permiso no puede ser actuado en consecuencia, no se produce un conflicto real. Sin embargo, las situaciones en que una acción está simultáneamente obligada y prohibida son conflictos deonticos, ya que tanto las obligaciones como las prohibiciones influyen en los comportamientos en conflicto. El contenido de las posiciones normativas en este trabajo son ilocuciones. Por lo tanto, surge un conflicto normativo cuando una ilocución está simultáneamente obligada y prohibida. Proponemos utilizar la noción estándar de unificación [9] para detectar cuando una \"prohibición\" y un solapamiento de permisos. Por ejemplo, una obligación obli(informar(A1, R1, A2, R2, p(c, X, T)) y una \"prohibición\" prh(informar(a1, r1, a2, r2, p(Y, d), T)) están en conflicto, ya que unifican en virtud de  = {A1/a1, R1/r1, A2/a2, R2/r2, Y/ Capturamos formalmente esta noción: Def. 9. Un conflicto (deontico) surge entre dos posiciones normativas N y N bajo una sustitución Es decir, una \"prohibición\" y una obligación están en conflicto si, y sólo si, sus ilocuciones se unifican bajo La sustitución, llamada aquí el conjunto de conflictos, unifica los agentes, roles y fórmulas atómicas. Asumimos que unificar es una implementación adecuada de un algoritmo de unificación que i) termina siempre (posiblemente fallando, si no se puede encontrar un unificador); ii) es correcto; y iii) tiene complejidad computacional lineal. Las incoherencias causadas por la misma ilocución, que se permiten y prohíben simultáneamente, pueden formalizarse de manera similar. En este artículo nos centramos en los conflictos de \"prohibición\"/obligación, pero la maquinaria computacional introducida en la Sección 6.1 también puede ser utilizada para detectar inconsistencias de \"prohibición\"/permisión, si sustituimos la modalidad obli por per. 5. FORMALIZACIÓN DEL CONFLICTO-FREEDOM En esta sección presentamos algunos conocimientos de fondo sobre CPN asumiendo una comprensión básica de las redes Petri ordinarias. Para detalles técnicos, remitimos al lector a [16]. A continuación, mapeamos los NS a los CPN y analizamos sus propiedades. Los CPN combinan la fuerza de las redes Petri con la fuerza de los lenguajes de programación funcionales. Por un lado, las redes Petri proporcionan los primitivos para la descripción de la sincronización de los procesos concurrentes. Como se observa en [16], los CPN tienen una semántica que se basa en la verdadera concurrencia, en lugar de entrelazarse. En nuestra opinión, es más fácil trabajar con una semántica de verdadera moneda porque es la forma en que prevemos la conexión entre el nivel de coordinación y el nivel normativo de un sistema multi-agente. Por otra parte, los lenguajes de programación funcionales utilizados por los CPN proporcionan los primitivos para la definición de los tipos de datos y la manipulación de sus valores de datos. Por lo tanto, podemos traducir fácilmente expresiones de una estructura normativa. Por último, pero no por ello menos importante, los CPN tienen una semántica bien definida que define inequívocamente el comportamiento de cada CPN. Además, los CPN tienen un gran número de métodos e instrumentos de análisis formales mediante los cuales se pueden demostrar las propiedades de los CPN. En resumen, los CPN nos proporcionan todas las características necesarias para razonar formalmente sobre las estructuras normativas, dado que se proporciona una cartografía adecuada. De acuerdo con las redes Petri, los estados de un CPN están representados por medio de lugares. Pero a diferencia de Petri Nets, cada lugar tiene un tipo de datos asociado determinando el tipo de datos que el lugar puede contener. Un estado de un CPN se llama marca. Consiste en un número de fichas colocadas en los lugares individuales. Cada token lleva un valor de datos que tiene el tipo del lugar correspondiente. En general, un lugar puede contener dos o más tokens con el mismo valor de datos. Por lo tanto, una marca de un CPN es una función que mapea cada lugar en un multi-set2 de tokens del tipo correcto. Uno a menudo se refiere a los valores token como colores token y uno también se refiere a los tipos de datos como conjuntos de colores. Los tipos de un CPN pueden ser arbitrariamente complejos. Las acciones en un PCN están representadas mediante transiciones. Un arco entrante en una transición desde un lugar indica que la transición puede eliminar tokens del lugar correspondiente mientras que un arco saliente indica que la transición puede añadir tokens. El número exacto de tokens y sus valores de datos son determinados por las expresiones de arco, que se codifican utilizando el lenguaje de programación elegido para el CPN. Una transición está habilitada en un CPN si y sólo si todos los 2 A multi-set (o bolsa) es una extensión a la noción de conjunto, permitiendo la posibilidad de múltiples apariencias del mismo elemento. El Sexto Intl. Conjunto Conf. en Agentes Autónomos y Sistemas Multi-Agentes (AAMAS 07) 639 variables en las expresiones de sus arcos entrantes se unen a algunos valores (cada una de estas fijaciones se refiere como un elemento vinculante). Si es así, la transición puede ocurrir eliminando tokens de sus lugares de entrada y añadiendo tokens a sus lugares de salida. Además de las expresiones de arco, es posible conectar una expresión booleana de guardia (con variables) a cada transición. Juntando todos los elementos de arriba obtenemos una definición formal de CPN que se empleará más adelante para propósitos de mapeo. Def. 10. Un CPN es un conjunto finito de tipos no vacíos, también llamados conjuntos de colores; ii) P es un conjunto finito de lugares; iii) T es un conjunto finito de transiciones; iv) A es un conjunto finito de arcos; v) N es una función de nodo definida de A a P × T • T × P; vi) C es una función de color de P a فارسى; vii) G es una De acuerdo con las redes Petri ordinarias, el comportamiento concurrente de un CPN se basa en la noción de paso. Formalmente, un paso es un no vacío y finito multi-set sobre el conjunto de todos los elementos de unión. Deje que el paso S se active en una marca M. Entonces, S puede ocurrir, cambiando la marca M a M. Además, decimos que el marcado M es directamente accesible desde el marcado M por la ocurrencia del paso S, y lo denotamos por M[S > M. Una secuencia de ocurrencia finita es una secuencia finita de pasos y marcas: M1[S1 > M2. . . Mn[Sn > Mn+1 de tal manera que n+N y Mi[Si > Mi+1 . . , n}. El conjunto de todas las marcas posibles alcanzables para una red neta de una marca M se llama su conjunto de alcance, y se denota como R(Net, M). 5.1 Mapeo a redes de Petri de colores Nuestra estructura normativa es un gráfico bipartito etiquetado. Lo mismo puede decirse de una red Petri coloreada. Estamos presentando un mapeo f de uno a otro, con el fin de proporcionar semántica para la estructura normativa y probar las propiedades al respecto mediante el uso de resultados teóricos bien conocidos de trabajo en CPNs. El mapeo f hace uso de correspondencias entre escenas normativas y lugares CPN, transiciones normativas y transiciones CPN y finalmente, entre etiquetas de arco y expresiones de arco CPN. S → P B → T Lin Lout → E El conjunto de tipos es el conjunto singleton que contiene el color NP (es decir. * = {NP}). Este tipo complejo está estructurado de la siguiente manera (utilizamos CPN-ML [4] sintaxis): color NPT = con Obl  Per  Prh  NoMod color IP = con infor  declaramos  offer color UTT = record illp : IP ag1, role1, ag2, role2 : string content : string time : int color NP = Los arcos son trazados casi directamente. A es un conjunto finito de arcos y N es una función de nodo, de tal manera que Aa Aa Ain Aout. N(a) = a. La función de inicialización I se define como I(p) = Δs ( Por último, la función de color C asigna el color NP a cada lugar: C(p) = NP (­p ­P). No estamos haciendo uso de la función de guardia G. En el trabajo futuro, esta función se puede utilizar para modelar restricciones cuando extendemos la expresividad de nuestro lenguaje de norma. 5.2 Propiedades de las estructuras normativas Después de haber definido el mapeo desde las estructuras normativas hasta las redes de Petri coloreadas, ahora analizamos las propiedades de los CPN que nos ayudan a entender la complejidad de la detección de conflictos. Una pregunta que nos gustaría responder es, si en un momento dado, una determinada estructura normativa está libre de conflictos. Tal instantánea de una estructura normativa corresponde a una marca en el CPN cartografiado. Def. 11. Dada una marca Mi, esta marca es libre de conflicto si p  P. np1, np2  Mi(p) tal que np1.mode = Obl y np2.mode = Prh y np1.illoc y np2.illoc unificar bajo una sustitución válida. Otra pregunta interesante sería si se producirá un conflicto a partir de una instantánea del sistema propagando las posiciones normativas. Para responder a esta pregunta, primero traducimos la instantánea de la estructura normativa al CPN correspondiente y luego ejecutamos la secuencia de ocurrencia finita de marcas y pasos, verificando la libertad de conflicto de cada marca a medida que avanzamos. Def. 12. Dada una marca Mi, una secuencia de ocurrencia finita Si, Si+1,..., Sn se llama libre de conflictos, si y sólo si Mi[Si > Mi+1. . . Mn[Sn > Mn+1 y Mk están libres de conflictos para todos los k, de modo que i ≤ k ≤ n + 1. Sin embargo, la cuestión principal que nos gustaría investigar, es si una estructura normativa dada es o no resistente a los conflictos, es decir, si los agentes que promulgan el MAS son capaces de provocar conflictos a través de sus acciones. Tan pronto como se incluye la posibilidad de acciones (o declaraciones) de agentes autónomos, se pierde el determinismo. Después de haber mapeado la estructura normativa a un CPN, ahora añadimos modelos de CPN de las interacciones de agentes. Cada forma de interacción con el agente (es decir, cada actividad) se puede modelar utilizando CPN en la línea de Cost et al. [5]. Estos CPN no determinantes alimentan tokens en el CPN que modela la estructura normativa. Esto lleva a la introducción de no-determinismo en el PCN combinado. La mitad inferior de la figura 3 muestra parte de un modelo CPN de un protocolo de agente donde el arco denotado con 1 representa alguna pronunciación de una ilocución por un agente. La transición de destino de este arco, no sólo mueve un token al siguiente estado de este CPN, sino que también coloca un token en el lugar correspondiente a la escena normativa apropiada en el modelo del CPN de la estructura normativa (a través del arco 2). La transición 3 finalmente podría propagar ese símbolo en forma de una obligación, por ejemplo. Así, a partir de una marca dada, muchas secuencias de ocurrencia diferentes son posibles dependiendo de las acciones de los agentes. Utilizamos el conjunto de alcance R para definir una situación en la que los agentes no pueden causar conflictos. 640 La Sexta Intl. Conjunto Conf. sobre Agentes Autónomos y Sistemas Multi-Agentes (AAMAS 07) Figura 3: Construcción del CPN combinado Def. 13. Dado un N neto, una marca M es resistente a los conflictos si y sólo si todas las marcas en R(N,M) están libres de conflictos. La verificación de la libertad de conflicto de una marca se puede hacer en tiempo polinomio mediante la verificación de todos los lugares del CPN en busca de fichas en conflicto. La libertad de conflicto de una secuencia de ocurrencia en el CPN que representa la estructura normativa también se puede hacer en tiempo polinomio ya que esta secuencia es determinista dada una instantánea. El hecho de que se diseñe o no una estructura normativa corresponde con seguridad a la comprobación de la resistencia a los conflictos de la marca M0 inicial. Ahora, verificar la resistencia al conflicto de una marca se convierte en una tarea muy difícil. Corresponde al problema de la accesibilidad en un CPN: ¿se puede alcanzar un estado o se puede lograr una marca que contenga un conflicto?. Este problema de alcanzabilidad es conocido por ser NP-completo para las redes Petri ordinarias [22] y como las RCP son funcionalmente idénticas, no podemos esperar verificar la resistencia a los conflictos de una estructura normativa fuera de línea en un tiempo razonable. Por lo tanto, se necesitan mecanismos de distribución y tiempo de ejecución para garantizar que una estructura normativa mantenga la coherencia. Presentamos uno de esos mecanismos en la sección siguiente. 6. GESTIÓN DE ESTRUCTURAS NORMATIVAS Una vez detectado un conflicto (según se define en la Sección 4), proponemos emplear al unificador para resolver el conflicto. En nuestro ejemplo, si las variables en prh(inform(a1, r1, a2, r2, p(Y, d), T)) no obtienen los valores especificados en la sustitución Sin embargo, en lugar de computar el conjunto de complementos de una sustitución (que puede ser un conjunto infinito) proponemos anotar la \"prohibición\" con el propio unificador y usarlo para determinar qué variables de esa \"prohibición\" no pueden ser en futuras unificaciones para evitar un conflicto. Por lo tanto denotamos prohibiciones anotadas como prh( ̄I) . . Es un conjunto de unificadores. Las normas anotadas3 se interpretan como constructos deonticos con influencias restringidas, es decir, su efecto (sobre agentes, roles e ilocuciones) ha sido limitado por el conjunto de unificadores. Una \"prohibición\" puede estar en conflicto con varias obligaciones en una escena normativa dada s = id, Δ y necesitamos registrar (y posiblemente evitar) todos estos conflictos. Definimos a continuación un algoritmo que garantiza que una posición normativa se añada a una escena normativa de tal manera que no cause ningún conflicto. 3 Aunque proponemos limitar las prohibiciones, el mismo mecanismo puede utilizarse para definir la reducción de obligaciones en su lugar. Estas diferentes políticas dependen de la semántica deontica prevista y de los requisitos de los sistemas abordados. Por ejemplo, algunos MAS pueden exigir que sus agentes no actúen en presencia de conflictos, es decir, que se reduzca la obligación. 6.1 Resolución de conflictos Proponemos una forma de resolver los conflictos normativos mediante la unificación. Detectamos la superposición de las influencias de las normas, es decir. cómo afectan al comportamiento de los agentes afectados, y reducimos la influencia de la posición normativa, mediante el uso adecuado de las anotaciones al comprobar si la norma se aplica a las ilocuciones. El algoritmo mostrado en la Figura 4 muestra cómo mantenemos un conjunto de normas libres de conflictos. Añade una norma dada N a un estado normativo existente, libre de conflictos Δ, obteniendo un nuevo estado normativo resultante Δ que es libre de conflictos, es decir, sus prohibiciones están anotadas con un conjunto de conjuntos de conflictos que indican qué fijaciones para variables deben evitarse para que los conflictos no tengan lugar. algoritmo addNorm(N, Δ) comienza 1 marca de tiempo(N) 2 caso N de 3 per( ̄I): Δ := Δ  {N} 4 prh(I): si N  Δ s.t. Conflict(N, N, Las líneas 4-5 abordan el caso cuando intentamos agregar un motivo de \"prohibición\" a un estado normativo: si entra en conflicto con cualquier obligación, entonces se descarta; de lo contrario se añade al estado normativo. Las líneas 6-12 describen la situación cuando la posición normativa que se debe agregar es una \"prohibición\" no fundamentada. En este caso, el algoritmo inicializa un conjunto vacío y bucles (línea 9-10) a través de las normas N en el antiguo estado normativo Δ. Después de encontrar uno que entra en conflicto con N, el algoritmo actualiza el valor de la nueva configuración de conflicto (línea 10). Mediante el bucle a través de Δ, somos capaces de comprobar cualquier conflicto entre la nueva \"prohibición\" y las obligaciones existentes, la construcción adecuada de la anotación  que se utilizará al añadir N a Δ en la línea 11. En las líneas 13 a 27 se describe cómo se ajusta una nueva obligación a un estado normativo existente. Hacemos uso de dos conjuntos inicialmente vacíos, temporales, Δ1, Δ2. El algoritmo pasa a través de Δ (líneas 16-25) recogiendo las prohibiciones anotadas N Hay, sin embargo, dos casos a tratar: el de cuando un motivo La Sexta Intl. Conjunto Conf. sobre los agentes autónomos y los sistemas multiagentes (AAMAS 07) 641 \"prohibición\" se encuentra (línea 17), y su excepción, que abarca prohibiciones no terrestres (línea 20). En ambos casos, la antigua \"prohibición\" se almacena en Δ1 (líneas 18 y 23) para ser posteriormente retirada de Δ (línea 26). Sin embargo, en el caso de una \"prohibición\" no fundamentada, el algoritmo actualiza su anotación de conjuntos de conflicto (línea 24). El bucle garantiza que se lleve a cabo una búsqueda exhaustiva (lineal) a través de un estado normativo, comprobando si la nueva obligación está en conflicto con cualquier prohibición existente, posiblemente actualizando las anotaciones de estas prohibiciones en conflicto. En la línea 26 el algoritmo construye la nueva actualización Δ eliminando las antiguas prohibiciones almacenadas en Δ1 y añadiendo las prohibiciones actualizadas almacenadas en Δ2 (si las hay), así como la nueva obligación N. Nuestro algoritmo propuesto es correcto en que, para una posición normativa dada N y un estado normativo Δ, proporciona un nuevo estado normativo Δ en el que todas las prohibiciones tienen anotaciones que registran cómo se unifican con las obligaciones existentes. Las anotaciones pueden estar vacías, sin embargo: este es el caso cuando tenemos un motivo de \"prohibición\" o una \"prohibición\" que no unifica/conflige con ninguna obligación. Los permisos no afectan a nuestro algoritmo y se tratan adecuadamente (línea 3). Cualquier intento de insertar un motivo de \"prohibición\" que entre en conflicto, produce el mismo estado normativo (línea 4). Cuando se añade una nueva obligación, el algoritmo garantiza que se tienen en cuenta todas las prohibiciones (líneas 14 a 27), lo que conduce a la eliminación de las prohibiciones sobre el terreno en conflicto o a la actualización de las anotaciones de las prohibiciones no sobre el terreno. El algoritmo siempre termina: los bucles están sobre un conjunto finito Δ y los conflictos comprueban y establecen operaciones siempre terminan. La complejidad del algoritmo es lineal: el conjunto Δ sólo se examina una vez para cada caso posible de norma que se añade. Al gestionar los estados normativos también es posible que necesitemos eliminar posiciones normativas. Esto es sencillo: los permisos se pueden retirar sin ningún problema; las prohibiciones anotadas también se pueden eliminar sin más consideraciones; sin embargo, las obligaciones requieren algunas tareas domésticas. Cuando se va a eliminar una obligación, debemos verificarla contra todas las prohibiciones anotadas a fin de actualizar sus anotaciones. Aplicamos la comprobación de conflicto y obtenemos un unificador, luego eliminamos este unificador de la anotación de prohibiciones. Invocamos el algoritmo de eliminación como removeNorm(N, Δ): devuelve un nuevo estado normativo Δ en el que N ha sido eliminado, con posibles alteraciones a otras posiciones normativas como se explicó. 6.2 Promulgación de una estructura normativa La promulgación de una estructura normativa equivale a la ejecución paralela y distribuida de escenas normativas y transiciones normativas. A título ilustrativo, describiremos a continuación la interacción entre las situaciones normativas de pago y entrega y la transición normativa que los vincula en la mitad superior de la figura 2. Con este objetivo, considere, por ejemplo, que obl(inform(jules, cliente, rod, acc, pay(copper, 400, 350), T) Δpago y que Δentrega tiene prh(inform(rod,wm, jules, cliente, entregado(Z, Q), T)). Tales estados indican que el cliente Jules está obligado a pagar £400 por 350kg de cobre al contador Rod de acuerdo con la escena normativa de pago, mientras que Rod, asumiendo el papel de gerente de almacén esta vez, está prohibido entregar cualquier cosa al cliente Jules de acuerdo con la escena normativa de entrega. Para cada escena normativa, el proceso de promulgación es el siguiente. En primer lugar, procesa su cola de mensajes entrantes que contiene tres tipos de mensajes: declaraciones de la actividad a la que está vinculada; y comandos normativos para agregar o eliminar posiciones normativas. Por ejemplo, en nuestro ejemplo, la escena normativa de pago recoge la ilocución I = utt((inform(jules, cliente, varilla, acc, pay(cobre, 400, 350), 35)) para el cliente Jules pendiente de pago por cobre (a través de la flecha A en la figura 2). Las Uterancias son timestamped y subsecuentemente agregadas al estado normativo. Tendríamos Δpayment = Δpayment {I}, en nuestro ejemplo. Al recibir órdenes normativas para agregar o eliminar una posición normativa, la escena normativa invoca el algoritmo de adición o eliminación correspondiente descrito en la Sección 6.1. En segundo lugar, la escena normativa reconoce su cambio de estado al enviar un mensaje desencadenante a cada transición normativa saliente a la que está conectado. En nuestro ejemplo, el escenario normativo de pagos estaría señalando su cambio de estado a la transición normativa nt. Para las transiciones normativas, el proceso funciona de manera diferente. Debido a que cada transición normativa controla el funcionamiento de una sola regla, al recibir un mensaje de activación, encuesta cada escena normativa entrante para sustituciones de los esquemas de ilocución pertinentes en el LHS de su regla. En nuestro ejemplo, nt (responsable de la regla descrita en la Sección 3.4), encuestaría el escenario normativo de pago (vía flecha B) para sustituciones. Al recibir respuestas de ellos (en forma de conjuntos de sustituciones junto con marcas de tiempo), tiene que unificar las sustituciones de cada una de estas escenas normativas. Para cada unificación que encuentra, la regla se activa, y por lo tanto el comando normativo correspondiente se envía a lo largo de la escena normativa de salida. La transición normativa entonces mantiene un seguimiento del mensaje de disparo que envió y de las marcas de tiempo de las posiciones normativas que desencadenó el disparo. Esto se hace para asegurar que las mismas posiciones normativas en el LHS de una regla sólo desencadenen su disparo una vez. En nuestro ejemplo, nt estaría recibiendo  = {X/jules, Y/rod, Z/copper, Q/350} de la escena normativa de pagos. Dado que las substiciones en unifican con la regla nts, la regla es disparada, y el comando normativo add(delivery : obli(rod, wm, jules, client, delivery(copper, 350), T)) es enviado a lo largo de la escena normativa de entrega para obligar a Rod a entregar al cliente Jules 350kg de cobre. Después de eso, la escena normativa de entrega invocaría el algoritmo addNorm de la figura 4 con Δdelivery y N = obli(rod, wm, jules, client, delivered(copper, 350)) como argumentos. 7. TRABAJOS Y CONCLUSIONES RELACIONADOS Nuestras contribuciones en este documento son triples. En primer lugar, introducimos un enfoque para la gestión y el razonamiento de las normas de manera distribuida. Hasta donde sabemos, hay poco trabajo publicado en esta dirección. En [8, 21] se presentan dos idiomas para la aplicación distribuida de las normas en el MAS. Sin embargo, en ambos trabajos, cada agente tiene una interfaz de mensaje local que envía mensajes legales de acuerdo con un conjunto de normas. Dado que estas interfaces son locales para cada agente, las normas sólo pueden expresarse en términos de acciones de ese agente. Se trata de una grave desventaja, por ejemplo. cuando uno necesita activar una obligación para con un agente debido a un cierto mensaje de otro. La segunda contribución es la propuesta de una estructura normativa. La noción es fructífera porque permite la separación de las cuestiones normativas y de procedimiento. La estructura normativa que proponemos evidencia la similitud entre la propagación de posiciones normativas y la propagación 642 La Sexta Intl. Conjunto Conf. sobre Agentes Autónomos y Sistemas Multi-Agentes (AAMAS 07) de tokens en Redes Petri Coloradas. Esa similitud sugiere fácilmente una cartografía entre los dos, y da lugar a un tratamiento analítico conveniente de la estructura normativa, en general, y la complejidad de la detección de conflictos, en particular. La idea de modelar interacciones (en forma de conversaciones) a través de Petri Nets se ha investigado en [18], donde el medio de interacción y los agentes individuales se modelan como subredes de CPN que posteriormente se combinan para su análisis. En [5], las conversaciones se diseñan y analizan por primera vez a nivel de los CPN y posteriormente se traducen en protocolos. Lin et al. [20] mapear esquemas de conversación a CPNs. Según nuestro conocimiento, el uso de esta representación en apoyo de la detección de conflictos en el MAS regulado no ha sido reportado en otros lugares. Por último, presentamos un mecanismo distribuido para resolver los conflictos normativos. Sartor [25] trata los conflictos normativos desde el punto de vista de la teoría jurídica y sugiere una forma de ordenar las normas involucradas. Su idea se implementa en [12], pero requiere un recurso central para el mantenimiento de normas. El enfoque para la detección y resolución de conflictos es una adaptación y extensión del trabajo sobre gráficos de instanciación reportados en [17] y un algoritmo relacionado en [27]. El algoritmo presentado en el presente trabajo puede ser utilizado para administrar estados normativos distribuidos: escenas normativas que suceden en paralelo tienen un estado normativo asociado Δ al que el algoritmo se aplica de forma independiente cada vez que se introduce una nueva norma. Estas tres contribuciones que presentamos en este documento abren muchas posibilidades para el trabajo futuro. Cabe mencionar en primer lugar, que como estrategia amplia estamos trabajando en una generalización de la noción de estructura normativa para hacerla funcionar con diferentes modelos de coordinación, con un contenido deontico más rico y además de diferentes realizaciones computacionales de MAS regulado. Como primer paso en esta dirección estamos aprovechando la disociación entre los protocolos de interacción y la orientación normativa declarativa que la estructura normativa pone a disposición, para proporcionar una capa normativa para las instituciones electrónicas (como se define en [1]). Esperamos que este acoplamiento dote a las instituciones electrónicas de un entorno normativo más flexible y más expresivo. Además, queremos extender nuestro modelo a través de varias direcciones: (1) manejar la negación y las limitaciones como parte del lenguaje de la norma, y en particular la noción de tiempo; (2) dar cabida a múltiples autoridades jerárquicas de normas basadas en roles, en la línea de Cholvy y Cuppens [3] y relaciones de poder como sugiere Carabelea et al. [2]; (3) para captar en el algoritmo de resolución de conflictos diferentes semánticas relacionadas con las nociones deonticas apoyando diferentes axiomaciones (por ejemplo, fuerza relativa de \"prohibición\" versus obligación, nociones deonticas por defecto, inconsistencias deonticas). En el lado teórico, pretendemos utilizar técnicas de análisis de CPN para caracterizar clases de CPN (por ejemplo, acíclicas, simétricas, etc.) que corresponden a familias de Estructuras Normativas susceptibles a la detección de conflictos fuera de línea. La combinación de estas técnicas junto con nuestros mecanismos de resolución de conflictos en línea pretende dotar a los diseñadores del MAS de la capacidad de incorporar normas en sus sistemas de una manera basada en principios. 8. REFERENCIAS [1] J. L. Arcos, M. Esteva, P. Noriega, J. A. Rodr guez, y C. Sierra. Ingeniería de entornos abiertos con instituciones electrónicas. Journal on Engineering Applications of Artificial Intelligence, 18(2):191-204, 2005. [2] C. Carabelea, O. Boissier, y C. Castelfranchi. Usar el poder social para permitir a los agentes razonar sobre ser parte de un grupo. En el 5o Internat. Taller, EEAT 2004, págs. 166 a 177, 2004. [3] L. Cholvy y F. Cuppens. Solución de conflictos normativos mediante la fusión de funciones. En la Quinta Conferencia Internacional sobre Inteligencia Artificial y Derecho, Washington, Estados Unidos, 1995. [4] S. Christensen y T. B. Haagh. Diseño CPN - vista general de la sintaxis CPN ML. Informe técnico, Universidad de Aarhus, 1996. [5] R. S. Cost, Y. Chen, T. W. Finin, Y. Labrou e Y. Peng. Usando petri redes de colores para modelar la conversación. In Issues in Agent Communication, págs. 178 a 192, Londres, Reino Unido, 2000. [6] F. Dignum. Agentes autónomos con normas. Inteligencia Artificial y Ley, 7(1):69-79, 1999. [7] A. Elhag, J. Breuker y P. Brouwer. Sobre el análisis formal de los conflictos normativos. Información & Comunicaciones. Techn. Ley, 9(3):207-217, Oct. 2000. [8] M. Esteva, W. Vasconcelos, C. Sierra, y J. A. Rodr guez-Aguilar. Consistencia normativa en las instituciones electrónicas. volumen 3171 (LNAI), páginas 494-505. Springer-Verlag, 2004. [9] M. Fitting. Prueba de la lógica de primer orden y del teorema automatizado. Springer-Verlag, Nueva York, Estados Unidos, 1990. [10] N. Fornara, F. Vigan`o y M. Colombetti. Un enfoque impulsado por eventos a las normas en las instituciones artificiales. En el taller AAMAS05: Agentes, normas e instituciones para sistemas multiagente regulados (ANI@REM), Utrecht, 2005. [11] D. Gaertner, P. Noriega y C. Sierra. Ampliación de la arquitectura BDI con compromisos. En Actas del IX Congreso Internacional de la Asociación Catalana de Inteligencia Artificial, 2006. [12] A. Garc a-Camino, P. Noriega, y J.-A. Rodr guez-Aguilar. Un algoritmo para la resolución de conflictos en actividades reguladas compuestas. En el 7o taller Int.Workshop - ESAW 06, 2006. [13] A. Garc a-Camino, J.-A. Rodr guez-Aguilar, C. Sierra y W. Vasconcelos. Una arquitectura distribuida para las Sociedades de Agentes de Normas. En DALT III, volumen 3904 (LNAI), páginas 89 a 105. Springer, 2006. [14] F. Giunchiglia y L. Serafini. Lógicas jerárquicas multilenguaje o: Cómo podemos prescindir de lógicas modales. Inteligencia Artificial, 65(1):29-70, 1994. [15] J. Habermas. La Teoría de la Comunicación Acción, Volumen Uno, La Razón y la Racionalización de la Sociedad. Beacon Press, 1984. [16] K. Jensen. Redes Petri coloreadas: Conceptos básicos, métodos de análisis y usos prácticos (Volumen 1). Springer, 1997. [17] M. Kollingbaum y T. Norman. Estrategias para resolver conflictos de normas con razonamiento práctico. En el Taller de Coordinación de la CEPA en Sociedades de Agentes Emergentes 2004, 2004. [18] J.-L. Koning, G. Francois e Y. Demazeau. Formalización y prevalidación para protocolos de interacción en sistemas multiagente. En ECAI, págs. 298 a 307, 1998. [19] B. Kramer y J. Mylopoulos. Representación del conocimiento. En S. C. Shapiro, editor, Enciclopedia de Inteligencia Artificial, volumen 1, páginas 743-759. John Wiley & Sons, 1992. [20] F. Lin, D. H. Norrie, W. Shen y R. Kremer. Un enfoque basado en esquemas para especificar las políticas de conversación. En Temas de Comunicación de Agentes, págs. 193-204, 2000. [21] N. Minsky. Interacción gobernada por la ley (LGI): Un mecanismo de coordinación y control distribuido (Una introducción y un manual de referencia). Informe técnico, Universidad Rutgers, 2005. [22] T. Murata. Redes Petri: Propiedades, análisis y aplicaciones. Actas del IEEE, 77(4):541-580, 1989. [23] S. Parsons, C. Sierra y N. Jennings. Agentes que razonan y negocian discutiendo. Diario de Lógica y Computación, 8(3):261-292, 1998. [24] A. Ricci y M. Viroli. Artefactos de Coordinación: Una Abstracción Unificante para la Coordinación de Ingeniería Mediada por el Medio Ambiente en MAS. Informatica, 29:433-443, 2005. [25] G. Sartor. Conflictos normativos en el razonamiento jurídico. Inteligencia Artificial y Ley, 1(2-3):209-235, junio de 1992. [26] M. Sergot. Una teoría computacional de posiciones normativas. ACM Trans. Comput. Lógica, 2(4):581-622, 2001. [27] W. W. Vasconcelos, M. Kollingbaum, y T. Norman. Resolver conflictos e incoherencias en las organizaciones virtuales reguladas por normas. En Actas de AAMAS 07, Hawaii, EE.UU., 2007. IFAAMAS. [28] G. H. von Wright. Norma y acción: Una investigación lógica. Routledge y Kegan Paul, Londres, 1963. [29] M. Wooldridge. Una introducción a los sistemas multiagente. John Wiley & Sons, Chichester, Reino Unido, febrero de 2002. El Sexto Intl. Conjunto Conf. sobre agentes autónomos y sistemas de agentes múltiples (AAMAS 07) 643 ",
            "error": [
                ""
            ]
        },
        "permission overlap": {
            "translated_key": "permiso de superposición",
            "translated_annotated_text": "Gestión de Normas Distribuidas en Sistemas Regulados Multi-Agente ∗ Dorian Gaertner Dept. de Computación, Imperial College London, Londres SW7 2AZ, Reino Unido dg00@doc.ic.ac.uk Andrés García-Camino, Pablo Noriega, J.-A. Rodriguez-Aguilar IIIA-CSIC, 08193 Bellaterra, España {andres,pablo,jarážiya.csic.es Wamberto Vasconcelos Dept. de Ciencias de la Computación, Universidad de Aberdeen, Aberdeen AB24 3UE, Reino Unido wvasconcelos@acm.org RESUMEN Las normas son ampliamente reconocidas como un medio de coordinar sistemas multi-agentes. La gestión distribuida de las normas es una cuestión difícil y observamos una falta de realizaciones computacionales verdaderamente distribuidas de los modelos normativos. Con el fin de regular el comportamiento de los agentes autónomos que participan en múltiples actividades relacionadas, proponemos un modelo normativo, la Estructura Normativa (NS), un artefacto que se basa en la propagación de posiciones normativas (obligaciones, prohibiciones, permisos), como consecuencias de las acciones de los agentes. Dentro de un NS, los conflictos pueden surgir debido a la naturaleza dinámica del MAS y la concurrencia de acciones de los agentes. Sin embargo, garantizar la libertad de conflicto de un NS en el momento del diseño es computacionalmente intratable. Demostramos esto formalizando la noción de conflicto, proporcionando un mapeo de los NS en las Redes Petri Coloreadas y tomando prestado los resultados teóricos bien conocidos de ese campo. Dado que se requiere la resolución de conflictos en línea, presentamos un algoritmo tratable que se empleará de forma distribuida. Luego demostramos que este algoritmo es primordial para la promulgación distribuida de un NS. Categorías y sujetos Descriptores I.2.11 [Inteligencia Artificial Distribuida]: Idiomas y estructuras Términos generales Algoritmos, Diseño, Teoría 1. INTRODUCCIÓN Una característica fundamental de los sistemas multiagente abiertos y regulados en los que interactúan agentes autónomos, es que los agentes participantes están destinados a cumplir con las convenciones del sistema. Las normas pueden utilizarse para modelar tales convenciones y, por lo tanto, como medio para regular el comportamiento observable de los agentes [6, 29]. Hay muchas contribuciones sobre el tema de las normas de sociólogos, filósofos y lógicos (por ejemplo, [15, 28]). Sin embargo, hay muy pocas propuestas para la realización computacional de modelos normativos - la forma en que las normas pueden integrarse en el diseño y ejecución de MAS. Los pocos que existen (e.g. [10, 13, 24]), funcionan de manera centralizada, lo que crea cuellos de botella y puntos de fallo únicos. Hasta donde sabemos, ninguna propuesta apoya verdaderamente la promulgación distribuida de entornos normativos. En nuestro documento abordamos ese problema y proponemos medios para manejar los compromisos contradictorios en sistemas abiertos, regulados y multiagentes de manera distribuida. El tipo de MAS regulado que contemplamos consiste en actividades múltiples, simultáneas, relacionadas donde los agentes interactúan. Cada agente puede participar simultáneamente en varias actividades, y cambiar de una actividad a otra. Las acciones de un agente dentro de una actividad pueden tener consecuencias en forma de posiciones normativas (es decir. obligaciones, permisos y prohibiciones) [26] que puedan limitar su comportamiento futuro. Por ejemplo, un agente comprador que se queda sin crédito puede estar prohibido hacer más ofertas, o un agente vendedor está obligado a entregar después de cerrar un acuerdo. Asumimos que los agentes pueden optar por no cumplir todas sus obligaciones y, por lo tanto, pueden ser sancionados por el MAS. Obsérvese que, cuando se distribuyen las actividades, las posiciones normativas deben derivarse de las actividades en las que se generan a aquellas en las que surten efecto. Por ejemplo, la obligación de los vendedores de arriba debe fluir (o propagarse) de una actividad de negociación a una actividad de entrega. Dado que en un MAS abierto y regulado no se pueden incorporar aspectos normativos en el diseño de los agentes, adoptamos la opinión de que el MAS debe complementarse con un conjunto separado de normas que regulen aún más el comportamiento de los agentes participantes. Para modelar la separación de preocupaciones entre el nivel de coordinación (interacciones de agentes) y el nivel normativo (propagación de posiciones normativas), proponemos un artefacto llamado Estructura Normativa (NS). Dentro de un NS pueden surgir conflictos debido a la naturaleza dinámica del MAS y la concurrencia de acciones de los agentes. Por ejemplo, un agente puede estar obligado y prohibido a realizar el 636 978-81-904262-7-5 (RPS) c 2007 IFAAMAS muy mismo acción en una actividad. Dado que la regulación de un MAS implica que los agentes participantes deben ser conscientes de la validez de las acciones que tienen lugar dentro de él, dichos conflictos deben ser identificados y posiblemente resueltos si se necesita una reivindicación de validez para que un agente realice una acción o sea sancionado. Sin embargo, garantizar la libertad de conflicto de un NS en el momento del diseño es computacionalmente intratable. Demostramos esto formalizando la noción de conflicto, proporcionando un mapeo de los NS en las redes de Petri de colores (CPNs) y tomando prestado los resultados teóricos bien conocidos del campo de los CPNs. Creemos que se requiere la detección y resolución de conflictos en línea. Por lo tanto, presentamos un algoritmo tratable para la resolución de conflictos. Este algoritmo es primordial para la promulgación distribuida de un NS. El documento se organiza de la siguiente manera. En la Sección 2 detallamos un escenario para servir de ejemplo a lo largo del artículo. A continuación, en la Sección 3 definimos formalmente el artefacto de la estructura normativa. Además, en la sección 4 formalizamos la noción de conflicto para posteriormente analizar la complejidad de la detección de conflictos en términos de RCP en la sección 5. En la sección 6 se describe la gestión computacional de los NS describiendo su promulgación y presentando un algoritmo para la resolución de conflictos. Por último, comentamos sobre la labor conexa, sacamos conclusiones e informamos sobre la labor futura en la sección 7. 2. SCENARIO Utilizamos un escenario de cadena de suministro en el que empresas e individuos se reúnen en un mercado en línea para realizar negocios. El procedimiento de transacción global puede organizarse como seis actividades distribuidas, representadas como nodos en el diagrama de la Figura 1. En ellas participan diferentes participantes cuyo comportamiento se coordina a través de protocolos. En este escenario, los agentes pueden desempeñar uno de los cuatro papeles: marExit Inscripción Pago Entrega Negociación Coordinación Modelo Contrato Figura 1: Estructura de actividad del contador de ketplace (acc), cliente, proveedor (supp) y gerentes de almacén (wm). Las flechas que conectan las actividades representan cómo los agentes pueden moverse de una actividad a otra. Después de registrarse en el mercado, los clientes y proveedores se reúnen en una actividad en la que negocian los términos de su transacción, es decir. los precios, los importes de las mercancías que deban entregarse, los plazos y otros detalles. En la actividad contractual, se establece el pedido y se prepara una factura. El cliente participará entonces en una actividad de pago, verificando su solvencia e instruyendo a su banco a transferir la cantidad correcta de dinero. Mientras tanto, el proveedor se encargará de la entrega de las mercancías (por ejemplo: a través de un administrador de almacén) en la actividad de entrega. Finalmente, los agentes pueden salir del mercado conforme a un protocolo de salida predeterminado. El contable del mercado participa en la mayoría de las actividades como proveedor confiable de herramientas de auditoría. En el resto del documento nos basaremos en este escenario para ilustrar la noción de estructura normativa e ilustrar nuestro enfoque de la detección y resolución de conflictos en un entorno distribuido. 3. ESTRUCTURA NORMATIVA En los agentes MASs interactúan según protocolos que naturalmente se distribuyen. Abogamos por que las acciones en uno de esos protocolos puedan tener un efecto en la promulgación de otros protocolos. Algunas acciones pueden ser prohibidas u obligatorias, por ejemplo. Tomamos posiciones normativas para ser obligaciones, prohibiciones y permisos similares al trabajo descrito en [26]. La intención de agregar o eliminar una posición normativa que llamamos comando normativo. Los casos de posiciones normativas en un protocolo también pueden tener consecuencias para otros protocolos1. Para definir nuestro lenguaje de norma y especificar cómo se propagan las posiciones normativas, nos hemos inspirado en sistemas multicontexto [14]. Estos sistemas permiten estructurar el conocimiento en teorías formales distintas y definir las relaciones entre ellos. Las relaciones se expresan como reglas puente - la deducibilidad de las fórmulas en algunos contextos conduce a la deducción de otras fórmulas en otros contextos. Recientemente, estos sistemas se han utilizado con éxito para definir arquitecturas de agentes [11, 23]. La metáfora se traduce a nuestro trabajo actual de la siguiente manera: la expresión de las ilocuciones y/o la existencia de posiciones normativas en algunas escenas normativas conduce a la deducción de posiciones normativas en otras escenas normativas. Nos preocupa la propagación y distribución de posiciones normativas dentro de una red de escenas normativas distribuidas como consecuencia de las acciones de los agentes. Tomamos escenas normativas para ser conjuntos de posiciones normativas y expresiones que están asociadas con un protocolo de interacción subyacente correspondiente a una actividad. En esta sección, presentamos primero un lenguaje simple que capta estos aspectos e introduce formalmente las nociones de escena normativa, regla de transición normativa y estructura normativa. Damos la semántica prevista de estas reglas y mostramos cómo controlar un MAS a través de normas en un ejemplo. 3.1 Conceptos básicos Los componentes básicos de nuestro lenguaje son términos y fórmulas atómicas: Def. 1. Un término, denotado como t, es (i) cualquier constante expresada usando minúsculas (con o sin subíndices), por ejemplo. a, b0, c o ii) cualquier variable expresada utilizando mayúsculas (con o sin subíndices), por ejemplo. X, Y, Zb o iii) cualquier función f(t1,. . . , tn), donde f es un símbolo de función n-ary y t1,.., tn son términos. Algunos ejemplos de términos y funciones son Crédito, precio u oferta (biblia, 30), siendo respectivamente una variable, una constante y una función. Estaremos haciendo uso de identificadores en todo el papel, que son términos constantes y también necesitan la siguiente definición: Def. 2. Una fórmula atómica es cualquier construcción p(t1,. . . , tn), donde p es un símbolo predicado n-ary y t1,. . . , son términos. El conjunto de todas las fórmulas atómicas se denota como Δ. Nos centramos en una clase expresiva de MASs en la que la interacción se lleva a cabo por medio de actos de discurso ilocutionarios intercambiados entre los agentes participantes: Def. 3. I I I son las fórmulas atómicas terrestres que tienen la forma p(ag, r, ag, r, , t) donde p es un elemento de 1 Aquí, abstracto de protocolos y se refieren a ellos genéricamente como actividades. El Sexto Intl. Conjunto Conf. en Agentes Autónomos y Sistemas Multi-Agentes (AAMAS 07) 637 un conjunto de partículas ilocucionarias (por ejemplo: informar, petición, oferta); ag, ag son identificadores de agente; r, r son identificadores de rol; , un término de base arbitrario, es el contenido del mensaje, construido a partir de un lenguaje de contenido compartido; t  N es un sello de tiempo. El significado intuitivo de p(ag, r, ag, r, m, t) es que agente ag jugando rol r enviado mensaje m a agente ag jugando rol r en el momento t. Un ejemplo de una ilocución es informar(ag4, supp, ag3, cliente, offer(wire, 12), 10). A veces es útil referirse a las ilocuciones que no están totalmente fundamentadas, es decir, aquellas que pueden contener variables no instantiated (libres). En la descripción de un protocolo, por ejemplo, los valores precisos del mensaje intercambiado pueden quedar sin especificar. Durante la promulgación de los agentes del protocolo se producirán los valores reales que darán lugar a una ilocución del suelo. Así podemos definir esquemas de ilocución: Def. 4. Un esquema de ilocución ̄I es cualquier fórmula atómica p(ag, r, ag, r, ♥, t) en la que algunos de los términos pueden ser variables o pueden contener variables. 3.2 Definición formal de la noción de NS Primero definimos las escenas normativas de la siguiente manera: Def. 5. Una escena normativa es una tupla s = ids, Δs donde los ids son un identificador de escena y Δs es el conjunto de fórmulas atómicas Por ejemplo, una instantánea del estado de la escena normativa de entrega de nuestro escenario podría ser representada como: Δs = 8 < : utt(request(sean, client, kev, wm, receive(wire, 200), 20)), utt(accept(kev, wm, seen, customer, receive(wire, 200), 30)) 9 = ; Es decir, Tenga en cuenta que el estado de una escena normativa Δs evoluciona con el tiempo. Estas escenas normativas están conectadas entre sí a través de transiciones normativas que especifican cómo las expresiones y posiciones normativas en una escena afectan a otras escenas normativas. Como se mencionó anteriormente, las actividades no son independientes, ya que las ilocuciones pronunciadas en algunas de ellas pueden tener un efecto en otras. Las reglas normativas de transición definen las condiciones bajo las cuales se genera un comando normativo. Estas condiciones son declaraciones o posiciones normativas asociadas a un protocolo dado (denominadas por ejemplo. actividad : expresión ) que dan un comando normativo, es decir. la adición o supresión de otra posición normativa, posiblemente relacionada con una actividad diferente. Nuestras reglas de transición están así definidas: Def. 6. Una regla de transición normativa R es de la forma: R ::= V C V ::= ids : D  V, V D ::= N  utt( ̄I) N ::= per( ̄I)  prh( ̄I)  obli( ̄I) C ::= add(ids : N)  remove(ids : N) donde ̄I es un esquema permiso, prohibición u obligación), ids es un identificador de la actividad s y C es un comando normativo. Dotamos nuestro lenguaje con la semántica habitual de los lenguajes basados en reglas [19]. Las reglas trazan una estructura normativa existente a una nueva estructura normativa en la que sólo cambia el estado de las escenas normativas. En las definiciones siguientes nos basamos en el concepto estándar de sustitución [9]. Def. 7. Una transición normativa es un tupla b = idb, rb donde idb es un identificador y rb es una regla de transición normativa. Proponemos ampliar la noción de MAS, regulada por protocolos, con una capa adicional consistente en escenas normativas y transiciones normativas. Esta capa se representa como un gráfico bipartito que llamamos estructura normativa. Una estructura normativa relaciona escenas normativas y transiciones normativas especificando qué posiciones normativas deben generarse o eliminarse en qué escenas normativas. Def. 8. Una estructura normativa es un gráfico bipartito etiquetado NS = Nodos, bordes, Lin, Lout. Nodos es un conjunto de Sâ B donde S es un conjunto de escenas normativas y B es un conjunto de transiciones normativas. Edges es un conjunto Ain Aout donde Ain  S × B es un conjunto de arcos de entrada etiquetados con una fórmula atómica utilizando la función de etiquetado Lin : Ain → D; y Aout  B × S es un conjunto de arcos de salida etiquetados con una posición normativa utilizando la función de etiquetado Lout : Aout → N. Lo siguiente debe contener: 1. Cada fórmula atómica que aparece en el LHS de una regla rb debe ser de la forma (ids : D) donde s â € € € € TM € € € € € € € € € € € € € € € € € € € € € € € € € Ain tal que es = La fórmula atómica que aparece en el RHS de una regla rb debe ser de la forma add(ids : N) o remove(ids : N) donde s â € S y â € Aout tal que aout = (b, s) y Lout (aout ) = N. 3. Ain tal que a = (s, b) y b = idb, rb y Lin (a) = D entonces (ids:D) debe ocurrir en el LHS de rb. 4. Afuera de tal manera que a = (b, s) y b = idb, rb y Lout (a) = N luego add(ids : N) o remove(ids : N) deben ocurrir en el RHS de rb. Los dos primeros puntos aseguran que cada fórmula atómica en el LHS de una regla de transición normativa etiqueta un arco que entra en la transición normativa apropiada en la estructura normativa, y que la fórmula atómica en el RHS etiqueta el arco saliente correspondiente. Los puntos tres y cuatro aseguran que las etiquetas de todos los arcos entrantes se utilicen en el LHS de la regla de transición normativa en la que entran estos arcos, y que las etiquetas de todos los arcos salientes se utilicen en el RHS de la regla de transición normativa que estos arcos dejan. 3.3 Semántica Destinada La semántica formal se definirá mediante un mapeo a Redes Petri Coloradas en la Sección 5.1. Aquí comenzamos a definir la semántica prevista de las reglas normativas de transición describiendo cómo una regla cambia un escenario normativo de una estructura normativa existente que produce una nueva estructura normativa. Cada regla se activa una vez para cada sustitución que unifica el lado izquierdo V de la regla con el estado de las escenas normativas correspondientes. Una fórmula atómica (es decir, una declaración o una posición normativa) si es unificable con una declaración o posición normativa que pertenece al estado del escenario normativo correspondiente. Cada vez que se activa una regla, se lleva a cabo el comando normativo especificado a la derecha de esa regla, con la intención de añadir o eliminar una posición normativa del estado de la escena normativa correspondiente. Sin embargo, la adición no es incondicional, ya que pueden surgir conflictos. Este tema se tratará en las secciones 4 y 6.1. 638 La Sexta Intl. Conjunto Conf. en Agentes Autónomos y Sistemas Multi-Agentes (AAMAS 07) 3.4 Ejemplo En nuestro ejemplo de ejecución tenemos la siguiente regla de transición normativa ejemplar: „ pago : obli(inform(X, cliente, Y, acc, pay(Z, P, Q, T)), pago : utt(inform(X, cliente, Y, acc, pay(Z, P, Q), T)) « entrega : a La norma es una obligación del agente Y (esta vez asumiendo el papel de gerente de almacén wm) de enviar un mensaje al cliente X que el artículo Z ha sido entregado. En la Figura 2 se muestra una representación diagnóstica de cómo se relacionan las actividades y una estructura normativa: Pago Entrega Contrato Nivel Normativo Salida Registro Pago Entrega Negociación Nivel de Coordinación Contrato nt Figura 2: Actividades y Estructura Normativa A medida que se pronuncian las ilocuciones durante las actividades, surgen posiciones normativas. Las preferencias y las posiciones normativas se combinan en normas de transición, lo que provoca el flujo de posiciones normativas entre las distintas situaciones normativas. La conexión entre los dos niveles se describe en la sección 6.2. 4. DEFINICIÓN DE CONFLICTOS Los términos conflicto deontico e inconsistencia deontica se han utilizado indistintamente en la literatura. Sin embargo, en este trabajo adoptamos el punto de vista de [7] en el que los autores sugieren que surge una inconsistencia deontica cuando una acción es simultáneamente permitida y prohibida - ya que un permiso no puede ser actuado en consecuencia, no se produce un conflicto real. Sin embargo, las situaciones en que una acción está simultáneamente obligada y prohibida son conflictos deonticos, ya que tanto las obligaciones como las prohibiciones influyen en los comportamientos en conflicto. El contenido de las posiciones normativas en este trabajo son ilocuciones. Por lo tanto, surge un conflicto normativo cuando una ilocución está simultáneamente obligada y prohibida. Proponemos utilizar la noción estándar de unificación [9] para detectar cuándo una prohibición y una \"permiso de superposición\". Por ejemplo, una obligación obli(informar(A1, R1, A2, R2, p(c, X, T)) y una prohibición prh(informar(a1, r1, a2, r2, p(Y, d), T)) están en conflicto ya que se unifican en el punto Capturamos formalmente esta noción: Def. 9. Un conflicto (deontico) surge entre dos posiciones normativas N y N bajo una sustitución Es decir, una prohibición y una obligación están en conflicto si, y sólo si, sus ilocuciones se unifican en virtud de La sustitución, llamada aquí el conjunto de conflictos, unifica los agentes, roles y fórmulas atómicas. Asumimos que unificar es una implementación adecuada de un algoritmo de unificación que i) termina siempre (posiblemente fallando, si no se puede encontrar un unificador); ii) es correcto; y iii) tiene complejidad computacional lineal. Las incoherencias causadas por la misma ilocución, que se permiten y prohíben simultáneamente, pueden formalizarse de manera similar. En este trabajo nos centramos en los conflictos de prohibición/obligación, pero la maquinaria computacional introducida en la Sección 6.1 también puede ser utilizada para detectar inconsistencias de prohibición/permiso, si sustituimos la modalidad obli por per. 5. FORMALIZACIÓN DEL CONFLICTO-FREEDOM En esta sección presentamos algunos conocimientos de fondo sobre CPN asumiendo una comprensión básica de las redes Petri ordinarias. Para detalles técnicos, remitimos al lector a [16]. A continuación, mapeamos los NS a los CPN y analizamos sus propiedades. Los CPN combinan la fuerza de las redes Petri con la fuerza de los lenguajes de programación funcionales. Por un lado, las redes Petri proporcionan los primitivos para la descripción de la sincronización de los procesos concurrentes. Como se observa en [16], los CPN tienen una semántica que se basa en la verdadera concurrencia, en lugar de entrelazarse. En nuestra opinión, es más fácil trabajar con una semántica de verdadera moneda porque es la forma en que prevemos la conexión entre el nivel de coordinación y el nivel normativo de un sistema multi-agente. Por otra parte, los lenguajes de programación funcionales utilizados por los CPN proporcionan los primitivos para la definición de los tipos de datos y la manipulación de sus valores de datos. Por lo tanto, podemos traducir fácilmente expresiones de una estructura normativa. Por último, pero no por ello menos importante, los CPN tienen una semántica bien definida que define inequívocamente el comportamiento de cada CPN. Además, los CPN tienen un gran número de métodos e instrumentos de análisis formales mediante los cuales se pueden demostrar las propiedades de los CPN. En resumen, los CPN nos proporcionan todas las características necesarias para razonar formalmente sobre las estructuras normativas, dado que se proporciona una cartografía adecuada. De acuerdo con las redes Petri, los estados de un CPN están representados por medio de lugares. Pero a diferencia de Petri Nets, cada lugar tiene un tipo de datos asociado determinando el tipo de datos que el lugar puede contener. Un estado de un CPN se llama marca. Consiste en un número de fichas colocadas en los lugares individuales. Cada token lleva un valor de datos que tiene el tipo del lugar correspondiente. En general, un lugar puede contener dos o más tokens con el mismo valor de datos. Por lo tanto, una marca de un CPN es una función que mapea cada lugar en un multi-set2 de tokens del tipo correcto. Uno a menudo se refiere a los valores token como colores token y uno también se refiere a los tipos de datos como conjuntos de colores. Los tipos de un CPN pueden ser arbitrariamente complejos. Las acciones en un PCN están representadas mediante transiciones. Un arco entrante en una transición desde un lugar indica que la transición puede eliminar tokens del lugar correspondiente mientras que un arco saliente indica que la transición puede añadir tokens. El número exacto de tokens y sus valores de datos son determinados por las expresiones de arco, que se codifican utilizando el lenguaje de programación elegido para el CPN. Una transición está habilitada en un CPN si y sólo si todos los 2 A multi-set (o bolsa) es una extensión a la noción de conjunto, permitiendo la posibilidad de múltiples apariencias del mismo elemento. El Sexto Intl. Conjunto Conf. en Agentes Autónomos y Sistemas Multi-Agentes (AAMAS 07) 639 variables en las expresiones de sus arcos entrantes se unen a algunos valores (cada una de estas fijaciones se refiere como un elemento vinculante). Si es así, la transición puede ocurrir eliminando tokens de sus lugares de entrada y añadiendo tokens a sus lugares de salida. Además de las expresiones de arco, es posible conectar una expresión booleana de guardia (con variables) a cada transición. Juntando todos los elementos de arriba obtenemos una definición formal de CPN que se empleará más adelante para propósitos de mapeo. Def. 10. Un CPN es un conjunto finito de tipos no vacíos, también llamados conjuntos de colores; ii) P es un conjunto finito de lugares; iii) T es un conjunto finito de transiciones; iv) A es un conjunto finito de arcos; v) N es una función de nodo definida de A a P × T • T × P; vi) C es una función de color de P a فارسى; vii) G es una De acuerdo con las redes Petri ordinarias, el comportamiento concurrente de un CPN se basa en la noción de paso. Formalmente, un paso es un no vacío y finito multi-set sobre el conjunto de todos los elementos de unión. Deje que el paso S se active en una marca M. Entonces, S puede ocurrir, cambiando la marca M a M. Además, decimos que el marcado M es directamente accesible desde el marcado M por la ocurrencia del paso S, y lo denotamos por M[S > M. Una secuencia de ocurrencia finita es una secuencia finita de pasos y marcas: M1[S1 > M2. . . Mn[Sn > Mn+1 de tal manera que n+N y Mi[Si > Mi+1 . . , n}. El conjunto de todas las marcas posibles alcanzables para una red neta de una marca M se llama su conjunto de alcance, y se denota como R(Net, M). 5.1 Mapeo a redes de Petri de colores Nuestra estructura normativa es un gráfico bipartito etiquetado. Lo mismo puede decirse de una red Petri coloreada. Estamos presentando un mapeo f de uno a otro, con el fin de proporcionar semántica para la estructura normativa y probar las propiedades al respecto mediante el uso de resultados teóricos bien conocidos de trabajo en CPNs. El mapeo f hace uso de correspondencias entre escenas normativas y lugares CPN, transiciones normativas y transiciones CPN y finalmente, entre etiquetas de arco y expresiones de arco CPN. S → P B → T Lin Lout → E El conjunto de tipos es el conjunto singleton que contiene el color NP (es decir. * = {NP}). Este tipo complejo está estructurado de la siguiente manera (utilizamos CPN-ML [4] sintaxis): color NPT = con Obl  Per  Prh  NoMod color IP = con infor  declaramos  offer color UTT = record illp : IP ag1, role1, ag2, role2 : string content : string time : int color NP = Los arcos son trazados casi directamente. A es un conjunto finito de arcos y N es una función de nodo, de tal manera que Aa Aa Ain Aout. N(a) = a. La función de inicialización I se define como I(p) = Δs ( Por último, la función de color C asigna el color NP a cada lugar: C(p) = NP (­p ­P). No estamos haciendo uso de la función de guardia G. En el trabajo futuro, esta función se puede utilizar para modelar restricciones cuando extendemos la expresividad de nuestro lenguaje de norma. 5.2 Propiedades de las estructuras normativas Después de haber definido el mapeo desde las estructuras normativas hasta las redes de Petri coloreadas, ahora analizamos las propiedades de los CPN que nos ayudan a entender la complejidad de la detección de conflictos. Una pregunta que nos gustaría responder es, si en un momento dado, una determinada estructura normativa está libre de conflictos. Tal instantánea de una estructura normativa corresponde a una marca en el CPN cartografiado. Def. 11. Dada una marca Mi, esta marca es libre de conflicto si p  P. np1, np2  Mi(p) tal que np1.mode = Obl y np2.mode = Prh y np1.illoc y np2.illoc unificar bajo una sustitución válida. Otra pregunta interesante sería si se producirá un conflicto a partir de una instantánea del sistema propagando las posiciones normativas. Para responder a esta pregunta, primero traducimos la instantánea de la estructura normativa al CPN correspondiente y luego ejecutamos la secuencia de ocurrencia finita de marcas y pasos, verificando la libertad de conflicto de cada marca a medida que avanzamos. Def. 12. Dada una marca Mi, una secuencia de ocurrencia finita Si, Si+1,..., Sn se llama libre de conflictos, si y sólo si Mi[Si > Mi+1. . . Mn[Sn > Mn+1 y Mk están libres de conflictos para todos los k, de modo que i ≤ k ≤ n + 1. Sin embargo, la cuestión principal que nos gustaría investigar, es si una estructura normativa dada es o no resistente a los conflictos, es decir, si los agentes que promulgan el MAS son capaces de provocar conflictos a través de sus acciones. Tan pronto como se incluye la posibilidad de acciones (o declaraciones) de agentes autónomos, se pierde el determinismo. Después de haber mapeado la estructura normativa a un CPN, ahora añadimos modelos de CPN de las interacciones de agentes. Cada forma de interacción con el agente (es decir, cada actividad) se puede modelar utilizando CPN en la línea de Cost et al. [5]. Estos CPN no determinantes alimentan tokens en el CPN que modela la estructura normativa. Esto lleva a la introducción de no-determinismo en el PCN combinado. La mitad inferior de la figura 3 muestra parte de un modelo CPN de un protocolo de agente donde el arco denotado con 1 representa alguna pronunciación de una ilocución por un agente. La transición de destino de este arco, no sólo mueve un token al siguiente estado de este CPN, sino que también coloca un token en el lugar correspondiente a la escena normativa apropiada en el modelo del CPN de la estructura normativa (a través del arco 2). La transición 3 finalmente podría propagar ese símbolo en forma de una obligación, por ejemplo. Así, a partir de una marca dada, muchas secuencias de ocurrencia diferentes son posibles dependiendo de las acciones de los agentes. Utilizamos el conjunto de alcance R para definir una situación en la que los agentes no pueden causar conflictos. 640 La Sexta Intl. Conjunto Conf. sobre Agentes Autónomos y Sistemas Multi-Agentes (AAMAS 07) Figura 3: Construcción del CPN combinado Def. 13. Dado un N neto, una marca M es resistente a los conflictos si y sólo si todas las marcas en R(N,M) están libres de conflictos. La verificación de la libertad de conflicto de una marca se puede hacer en tiempo polinomio mediante la verificación de todos los lugares del CPN en busca de fichas en conflicto. La libertad de conflicto de una secuencia de ocurrencia en el CPN que representa la estructura normativa también se puede hacer en tiempo polinomio ya que esta secuencia es determinista dada una instantánea. El hecho de que se diseñe o no una estructura normativa corresponde con seguridad a la comprobación de la resistencia a los conflictos de la marca M0 inicial. Ahora, verificar la resistencia al conflicto de una marca se convierte en una tarea muy difícil. Corresponde al problema de la accesibilidad en un CPN: ¿se puede alcanzar un estado o se puede lograr una marca que contenga un conflicto?. Este problema de alcanzabilidad es conocido por ser NP-completo para las redes Petri ordinarias [22] y como las RCP son funcionalmente idénticas, no podemos esperar verificar la resistencia a los conflictos de una estructura normativa fuera de línea en un tiempo razonable. Por lo tanto, se necesitan mecanismos de distribución y tiempo de ejecución para garantizar que una estructura normativa mantenga la coherencia. Presentamos uno de esos mecanismos en la sección siguiente. 6. GESTIÓN DE ESTRUCTURAS NORMATIVAS Una vez detectado un conflicto (según se define en la Sección 4), proponemos emplear al unificador para resolver el conflicto. En nuestro ejemplo, si las variables en prh(inform(a1, r1, a2, r2, p(Y, d), T)) no obtienen los valores especificados en la sustitución Sin embargo, en lugar de computar el conjunto de complementos de una sustitución (que puede ser un conjunto infinito) proponemos anotar la prohibición con el propio unificador y utilizarla para determinar cuáles son las variables de esa prohibición no pueden ser en futuras unificaciones para evitar un conflicto. Por lo tanto denotamos prohibiciones anotadas como prh( ̄I) . . Es un conjunto de unificadores. Las normas anotadas3 se interpretan como constructos deonticos con influencias restringidas, es decir, su efecto (sobre agentes, roles e ilocuciones) ha sido limitado por el conjunto de unificadores. Una prohibición puede estar en conflicto con varias obligaciones en una escena normativa dada s = id, Δ y tenemos que registrar (y posiblemente evitar) todos estos conflictos. Definimos a continuación un algoritmo que garantiza que una posición normativa se añada a una escena normativa de tal manera que no cause ningún conflicto. 3 Aunque proponemos limitar las prohibiciones, el mismo mecanismo puede utilizarse para definir la reducción de obligaciones en su lugar. Estas diferentes políticas dependen de la semántica deontica prevista y de los requisitos de los sistemas abordados. Por ejemplo, algunos MAS pueden exigir que sus agentes no actúen en presencia de conflictos, es decir, que se reduzca la obligación. 6.1 Resolución de conflictos Proponemos una forma de resolver los conflictos normativos mediante la unificación. Detectamos la superposición de las influencias de las normas, es decir. cómo afectan al comportamiento de los agentes afectados, y reducimos la influencia de la posición normativa, mediante el uso adecuado de las anotaciones al comprobar si la norma se aplica a las ilocuciones. El algoritmo mostrado en la Figura 4 muestra cómo mantenemos un conjunto de normas libres de conflictos. Añade una norma dada N a un estado normativo existente, libre de conflictos Δ, obteniendo un nuevo estado normativo resultante Δ que es libre de conflictos, es decir, sus prohibiciones están anotadas con un conjunto de conjuntos de conflictos que indican qué fijaciones para variables deben evitarse para que los conflictos no tengan lugar. algoritmo addNorm(N, Δ) comienza 1 marca de tiempo(N) 2 caso N de 3 per( ̄I): Δ := Δ  {N} 4 prh(I): si N  Δ s.t. Conflict(N, N, Las líneas 4-5 abordan el caso cuando intentamos agregar una prohibición de base a un estado normativo: si entra en conflicto con cualquier obligación, entonces se descarta; de lo contrario se añade al estado normativo. En las líneas 6 a 12 se describe la situación en que la posición normativa que debe añadirse es una prohibición no básica. En este caso, el algoritmo inicializa un conjunto vacío y bucles (línea 9-10) a través de las normas N en el antiguo estado normativo Δ. Después de encontrar uno que entra en conflicto con N, el algoritmo actualiza el valor de la nueva configuración de conflicto (línea 10). Mediante el bucle a través de Δ, somos capaces de comprobar cualquier conflicto entre la nueva prohibición y las obligaciones existentes, construyendo adecuadamente la anotación  que se utilizará al añadir N a Δ en la línea 11. En las líneas 13 a 27 se describe cómo se ajusta una nueva obligación a un estado normativo existente. Hacemos uso de dos conjuntos inicialmente vacíos, temporales, Δ1, Δ2. El algoritmo pasa a través de Δ (líneas 16-25) recogiendo las prohibiciones anotadas N Hay, sin embargo, dos casos a tratar: el de cuando un motivo La Sexta Intl. Conjunto Conf. sobre los agentes autónomos y los sistemas multiagentes (AAMAS 07) se encuentra la prohibición 641 (línea 17), y su excepción, que abarca las prohibiciones no terrestres (línea 20). En ambos casos, la antigua prohibición se almacena en Δ1 (líneas 18 y 23) para ser posteriormente retirada de Δ (línea 26). Sin embargo, en el caso de una prohibición no terrestre, el algoritmo actualiza su anotación de conjuntos de conflicto (línea 24). El bucle garantiza que se lleve a cabo una búsqueda exhaustiva (lineal) a través de un estado normativo, comprobando si la nueva obligación está en conflicto con cualquier prohibición existente, posiblemente actualizando las anotaciones de estas prohibiciones en conflicto. En la línea 26 el algoritmo construye la nueva actualización Δ eliminando las antiguas prohibiciones almacenadas en Δ1 y añadiendo las prohibiciones actualizadas almacenadas en Δ2 (si las hay), así como la nueva obligación N. Nuestro algoritmo propuesto es correcto en que, para una posición normativa dada N y un estado normativo Δ, proporciona un nuevo estado normativo Δ en el que todas las prohibiciones tienen anotaciones que registran cómo se unifican con las obligaciones existentes. Sin embargo, las anotaciones pueden estar vacías: este es el caso cuando tenemos una prohibición básica o una prohibición que no unifica/conflige con ninguna obligación. Los permisos no afectan a nuestro algoritmo y se tratan adecuadamente (línea 3). Cualquier intento de insertar una prohibición de base que entre en conflicto, produce el mismo estado normativo (línea 4). Cuando se añade una nueva obligación, el algoritmo garantiza que se tienen en cuenta todas las prohibiciones (líneas 14 a 27), lo que conduce a la eliminación de las prohibiciones sobre el terreno en conflicto o a la actualización de las anotaciones de las prohibiciones no sobre el terreno. El algoritmo siempre termina: los bucles están sobre un conjunto finito Δ y los conflictos comprueban y establecen operaciones siempre terminan. La complejidad del algoritmo es lineal: el conjunto Δ sólo se examina una vez para cada caso posible de norma que se añade. Al gestionar los estados normativos también es posible que necesitemos eliminar posiciones normativas. Esto es sencillo: los permisos se pueden retirar sin ningún problema; las prohibiciones anotadas también se pueden eliminar sin más consideraciones; sin embargo, las obligaciones requieren algunas tareas domésticas. Cuando se va a eliminar una obligación, debemos verificarla contra todas las prohibiciones anotadas a fin de actualizar sus anotaciones. Aplicamos la comprobación de conflicto y obtenemos un unificador, luego eliminamos este unificador de la anotación de prohibiciones. Invocamos el algoritmo de eliminación como removeNorm(N, Δ): devuelve un nuevo estado normativo Δ en el que N ha sido eliminado, con posibles alteraciones a otras posiciones normativas como se explicó. 6.2 Promulgación de una estructura normativa La promulgación de una estructura normativa equivale a la ejecución paralela y distribuida de escenas normativas y transiciones normativas. A título ilustrativo, describiremos a continuación la interacción entre las situaciones normativas de pago y entrega y la transición normativa que los vincula en la mitad superior de la figura 2. Con este objetivo, considere, por ejemplo, que obl(inform(jules, cliente, rod, acc, pay(copper, 400, 350), T) Δpago y que Δentrega tiene prh(inform(rod,wm, jules, cliente, entregado(Z, Q), T)). Tales estados indican que el cliente Jules está obligado a pagar £400 por 350kg de cobre al contador Rod de acuerdo con la escena normativa de pago, mientras que Rod, asumiendo el papel de gerente de almacén esta vez, está prohibido entregar cualquier cosa al cliente Jules de acuerdo con la escena normativa de entrega. Para cada escena normativa, el proceso de promulgación es el siguiente. En primer lugar, procesa su cola de mensajes entrantes que contiene tres tipos de mensajes: declaraciones de la actividad a la que está vinculada; y comandos normativos para agregar o eliminar posiciones normativas. Por ejemplo, en nuestro ejemplo, la escena normativa de pago recoge la ilocución I = utt((inform(jules, cliente, varilla, acc, pay(cobre, 400, 350), 35)) para el cliente Jules pendiente de pago por cobre (a través de la flecha A en la figura 2). Las Uterancias son timestamped y subsecuentemente agregadas al estado normativo. Tendríamos Δpayment = Δpayment {I}, en nuestro ejemplo. Al recibir órdenes normativas para agregar o eliminar una posición normativa, la escena normativa invoca el algoritmo de adición o eliminación correspondiente descrito en la Sección 6.1. En segundo lugar, la escena normativa reconoce su cambio de estado al enviar un mensaje desencadenante a cada transición normativa saliente a la que está conectado. En nuestro ejemplo, el escenario normativo de pagos estaría señalando su cambio de estado a la transición normativa nt. Para las transiciones normativas, el proceso funciona de manera diferente. Debido a que cada transición normativa controla el funcionamiento de una sola regla, al recibir un mensaje de activación, encuesta cada escena normativa entrante para sustituciones de los esquemas de ilocución pertinentes en el LHS de su regla. En nuestro ejemplo, nt (responsable de la regla descrita en la Sección 3.4), encuestaría el escenario normativo de pago (vía flecha B) para sustituciones. Al recibir respuestas de ellos (en forma de conjuntos de sustituciones junto con marcas de tiempo), tiene que unificar las sustituciones de cada una de estas escenas normativas. Para cada unificación que encuentra, la regla se activa, y por lo tanto el comando normativo correspondiente se envía a lo largo de la escena normativa de salida. La transición normativa entonces mantiene un seguimiento del mensaje de disparo que envió y de las marcas de tiempo de las posiciones normativas que desencadenó el disparo. Esto se hace para asegurar que las mismas posiciones normativas en el LHS de una regla sólo desencadenen su disparo una vez. En nuestro ejemplo, nt estaría recibiendo  = {X/jules, Y/rod, Z/copper, Q/350} de la escena normativa de pagos. Dado que las substiciones en unifican con la regla nts, la regla es disparada, y el comando normativo add(delivery : obli(rod, wm, jules, client, delivery(copper, 350), T)) es enviado a lo largo de la escena normativa de entrega para obligar a Rod a entregar al cliente Jules 350kg de cobre. Después de eso, la escena normativa de entrega invocaría el algoritmo addNorm de la figura 4 con Δdelivery y N = obli(rod, wm, jules, client, delivered(copper, 350)) como argumentos. 7. TRABAJOS Y CONCLUSIONES RELACIONADOS Nuestras contribuciones en este documento son triples. En primer lugar, introducimos un enfoque para la gestión y el razonamiento de las normas de manera distribuida. Hasta donde sabemos, hay poco trabajo publicado en esta dirección. En [8, 21] se presentan dos idiomas para la aplicación distribuida de las normas en el MAS. Sin embargo, en ambos trabajos, cada agente tiene una interfaz de mensaje local que envía mensajes legales de acuerdo con un conjunto de normas. Dado que estas interfaces son locales para cada agente, las normas sólo pueden expresarse en términos de acciones de ese agente. Se trata de una grave desventaja, por ejemplo. cuando uno necesita activar una obligación para con un agente debido a un cierto mensaje de otro. La segunda contribución es la propuesta de una estructura normativa. La noción es fructífera porque permite la separación de las cuestiones normativas y de procedimiento. La estructura normativa que proponemos evidencia la similitud entre la propagación de posiciones normativas y la propagación 642 La Sexta Intl. Conjunto Conf. sobre Agentes Autónomos y Sistemas Multi-Agentes (AAMAS 07) de tokens en Redes Petri Coloradas. Esa similitud sugiere fácilmente una cartografía entre los dos, y da lugar a un tratamiento analítico conveniente de la estructura normativa, en general, y la complejidad de la detección de conflictos, en particular. La idea de modelar interacciones (en forma de conversaciones) a través de Petri Nets se ha investigado en [18], donde el medio de interacción y los agentes individuales se modelan como subredes de CPN que posteriormente se combinan para su análisis. En [5], las conversaciones se diseñan y analizan por primera vez a nivel de los CPN y posteriormente se traducen en protocolos. Lin et al. [20] mapear esquemas de conversación a CPNs. Según nuestro conocimiento, el uso de esta representación en apoyo de la detección de conflictos en el MAS regulado no ha sido reportado en otros lugares. Por último, presentamos un mecanismo distribuido para resolver los conflictos normativos. Sartor [25] trata los conflictos normativos desde el punto de vista de la teoría jurídica y sugiere una forma de ordenar las normas involucradas. Su idea se implementa en [12], pero requiere un recurso central para el mantenimiento de normas. El enfoque para la detección y resolución de conflictos es una adaptación y extensión del trabajo sobre gráficos de instanciación reportados en [17] y un algoritmo relacionado en [27]. El algoritmo presentado en el presente trabajo puede ser utilizado para administrar estados normativos distribuidos: escenas normativas que suceden en paralelo tienen un estado normativo asociado Δ al que el algoritmo se aplica de forma independiente cada vez que se introduce una nueva norma. Estas tres contribuciones que presentamos en este documento abren muchas posibilidades para el trabajo futuro. Cabe mencionar en primer lugar, que como estrategia amplia estamos trabajando en una generalización de la noción de estructura normativa para hacerla funcionar con diferentes modelos de coordinación, con un contenido deontico más rico y además de diferentes realizaciones computacionales de MAS regulado. Como primer paso en esta dirección estamos aprovechando la disociación entre los protocolos de interacción y la orientación normativa declarativa que la estructura normativa pone a disposición, para proporcionar una capa normativa para las instituciones electrónicas (como se define en [1]). Esperamos que este acoplamiento dote a las instituciones electrónicas de un entorno normativo más flexible y más expresivo. Además, queremos extender nuestro modelo a través de varias direcciones: (1) manejar la negación y las limitaciones como parte del lenguaje de la norma, y en particular la noción de tiempo; (2) dar cabida a múltiples autoridades jerárquicas de normas basadas en roles, en la línea de Cholvy y Cuppens [3] y relaciones de poder como sugiere Carabelea et al. [2]; (3) para captar en el algoritmo de resolución de conflictos diferentes semánticas relacionadas con las nociones deonticas apoyando diferentes axiomaciones (por ejemplo, fuerza relativa de la prohibición frente a la obligación, nociones deonticas predeterminadas, inconsistencias deonticas). En el lado teórico, pretendemos utilizar técnicas de análisis de CPN para caracterizar clases de CPN (por ejemplo, acíclicas, simétricas, etc.) que corresponden a familias de Estructuras Normativas susceptibles a la detección de conflictos fuera de línea. La combinación de estas técnicas junto con nuestros mecanismos de resolución de conflictos en línea pretende dotar a los diseñadores del MAS de la capacidad de incorporar normas en sus sistemas de una manera basada en principios. 8. REFERENCIAS [1] J. L. Arcos, M. Esteva, P. Noriega, J. A. Rodr guez, y C. Sierra. Ingeniería de entornos abiertos con instituciones electrónicas. Journal on Engineering Applications of Artificial Intelligence, 18(2):191-204, 2005. [2] C. Carabelea, O. Boissier, y C. Castelfranchi. Usar el poder social para permitir a los agentes razonar sobre ser parte de un grupo. En el 5o Internat. Taller, EEAT 2004, págs. 166 a 177, 2004. [3] L. Cholvy y F. Cuppens. Solución de conflictos normativos mediante la fusión de funciones. En la Quinta Conferencia Internacional sobre Inteligencia Artificial y Derecho, Washington, Estados Unidos, 1995. [4] S. Christensen y T. B. Haagh. Diseño CPN - vista general de la sintaxis CPN ML. Informe técnico, Universidad de Aarhus, 1996. [5] R. S. Cost, Y. Chen, T. W. Finin, Y. Labrou e Y. Peng. Usando petri redes de colores para modelar la conversación. In Issues in Agent Communication, págs. 178 a 192, Londres, Reino Unido, 2000. [6] F. Dignum. Agentes autónomos con normas. Inteligencia Artificial y Ley, 7(1):69-79, 1999. [7] A. Elhag, J. Breuker y P. Brouwer. Sobre el análisis formal de los conflictos normativos. Información & Comunicaciones. Techn. Ley, 9(3):207-217, Oct. 2000. [8] M. Esteva, W. Vasconcelos, C. Sierra, y J. A. Rodr guez-Aguilar. Consistencia normativa en las instituciones electrónicas. volumen 3171 (LNAI), páginas 494-505. Springer-Verlag, 2004. [9] M. Fitting. Prueba de la lógica de primer orden y del teorema automatizado. Springer-Verlag, Nueva York, Estados Unidos, 1990. [10] N. Fornara, F. Vigan`o y M. Colombetti. Un enfoque impulsado por eventos a las normas en las instituciones artificiales. En el taller AAMAS05: Agentes, normas e instituciones para sistemas multiagente regulados (ANI@REM), Utrecht, 2005. [11] D. Gaertner, P. Noriega y C. Sierra. Ampliación de la arquitectura BDI con compromisos. En Actas del IX Congreso Internacional de la Asociación Catalana de Inteligencia Artificial, 2006. [12] A. Garc a-Camino, P. Noriega, y J.-A. Rodr guez-Aguilar. Un algoritmo para la resolución de conflictos en actividades reguladas compuestas. En el 7o taller Int.Workshop - ESAW 06, 2006. [13] A. Garc a-Camino, J.-A. Rodr guez-Aguilar, C. Sierra y W. Vasconcelos. Una arquitectura distribuida para las Sociedades de Agentes de Normas. En DALT III, volumen 3904 (LNAI), páginas 89 a 105. Springer, 2006. [14] F. Giunchiglia y L. Serafini. Lógicas jerárquicas multilenguaje o: Cómo podemos prescindir de lógicas modales. Inteligencia Artificial, 65(1):29-70, 1994. [15] J. Habermas. La Teoría de la Comunicación Acción, Volumen Uno, La Razón y la Racionalización de la Sociedad. Beacon Press, 1984. [16] K. Jensen. Redes Petri coloreadas: Conceptos básicos, métodos de análisis y usos prácticos (Volumen 1). Springer, 1997. [17] M. Kollingbaum y T. Norman. Estrategias para resolver conflictos de normas con razonamiento práctico. En el Taller de Coordinación de la CEPA en Sociedades de Agentes Emergentes 2004, 2004. [18] J.-L. Koning, G. Francois e Y. Demazeau. Formalización y prevalidación para protocolos de interacción en sistemas multiagente. En ECAI, págs. 298 a 307, 1998. [19] B. Kramer y J. Mylopoulos. Representación del conocimiento. En S. C. Shapiro, editor, Enciclopedia de Inteligencia Artificial, volumen 1, páginas 743-759. John Wiley & Sons, 1992. [20] F. Lin, D. H. Norrie, W. Shen y R. Kremer. Un enfoque basado en esquemas para especificar las políticas de conversación. En Temas de Comunicación de Agentes, págs. 193-204, 2000. [21] N. Minsky. Interacción gobernada por la ley (LGI): Un mecanismo de coordinación y control distribuido (Una introducción y un manual de referencia). Informe técnico, Universidad Rutgers, 2005. [22] T. Murata. Redes Petri: Propiedades, análisis y aplicaciones. Actas del IEEE, 77(4):541-580, 1989. [23] S. Parsons, C. Sierra y N. Jennings. Agentes que razonan y negocian discutiendo. Diario de Lógica y Computación, 8(3):261-292, 1998. [24] A. Ricci y M. Viroli. Artefactos de Coordinación: Una Abstracción Unificante para la Coordinación de Ingeniería Mediada por el Medio Ambiente en MAS. Informatica, 29:433-443, 2005. [25] G. Sartor. Conflictos normativos en el razonamiento jurídico. Inteligencia Artificial y Ley, 1(2-3):209-235, junio de 1992. [26] M. Sergot. Una teoría computacional de posiciones normativas. ACM Trans. Comput. Lógica, 2(4):581-622, 2001. [27] W. W. Vasconcelos, M. Kollingbaum, y T. Norman. Resolver conflictos e incoherencias en las organizaciones virtuales reguladas por normas. En Actas de AAMAS 07, Hawaii, EE.UU., 2007. IFAAMAS. [28] G. H. von Wright. Norma y acción: Una investigación lógica. Routledge y Kegan Paul, Londres, 1963. [29] M. Wooldridge. Una introducción a los sistemas multiagente. John Wiley & Sons, Chichester, Reino Unido, febrero de 2002. El Sexto Intl. Conjunto Conf. sobre agentes autónomos y sistemas de agentes múltiples (AAMAS 07) 643 ",
            "error": [
                ""
            ]
        },
        "token": {
            "translated_key": "token",
            "translated_annotated_text": "Gestión de Normas Distribuidas en Sistemas Regulados Multi-Agente ∗ Dorian Gaertner Dept. de Computación, Imperial College London, Londres SW7 2AZ, Reino Unido dg00@doc.ic.ac.uk Andrés García-Camino, Pablo Noriega, J.-A. Rodriguez-Aguilar IIIA-CSIC, 08193 Bellaterra, España {andres,pablo,jarážiya.csic.es Wamberto Vasconcelos Dept. de Ciencias de la Computación, Universidad de Aberdeen, Aberdeen AB24 3UE, Reino Unido wvasconcelos@acm.org RESUMEN Las normas son ampliamente reconocidas como un medio de coordinar sistemas multi-agentes. La gestión distribuida de las normas es una cuestión difícil y observamos una falta de realizaciones computacionales verdaderamente distribuidas de los modelos normativos. Con el fin de regular el comportamiento de los agentes autónomos que participan en múltiples actividades relacionadas, proponemos un modelo normativo, la Estructura Normativa (NS), un artefacto que se basa en la propagación de posiciones normativas (obligaciones, prohibiciones, permisos), como consecuencias de las acciones de los agentes. Dentro de un NS, los conflictos pueden surgir debido a la naturaleza dinámica del MAS y la concurrencia de acciones de los agentes. Sin embargo, garantizar la libertad de conflicto de un NS en el momento del diseño es computacionalmente intratable. Demostramos esto formalizando la noción de conflicto, proporcionando un mapeo de los NS en las Redes Petri Coloreadas y tomando prestado los resultados teóricos bien conocidos de ese campo. Dado que se requiere la resolución de conflictos en línea, presentamos un algoritmo tratable que se empleará de forma distribuida. Luego demostramos que este algoritmo es primordial para la promulgación distribuida de un NS. Categorías y sujetos Descriptores I.2.11 [Inteligencia Artificial Distribuida]: Idiomas y estructuras Términos generales Algoritmos, Diseño, Teoría 1. INTRODUCCIÓN Una característica fundamental de los sistemas multiagente abiertos y regulados en los que interactúan agentes autónomos, es que los agentes participantes están destinados a cumplir con las convenciones del sistema. Las normas pueden utilizarse para modelar tales convenciones y, por lo tanto, como medio para regular el comportamiento observable de los agentes [6, 29]. Hay muchas contribuciones sobre el tema de las normas de sociólogos, filósofos y lógicos (por ejemplo, [15, 28]). Sin embargo, hay muy pocas propuestas para la realización computacional de modelos normativos - la forma en que las normas pueden integrarse en el diseño y ejecución de MAS. Los pocos que existen (e.g. [10, 13, 24]), funcionan de manera centralizada, lo que crea cuellos de botella y puntos de fallo únicos. Hasta donde sabemos, ninguna propuesta apoya verdaderamente la promulgación distribuida de entornos normativos. En nuestro documento abordamos ese problema y proponemos medios para manejar los compromisos contradictorios en sistemas abiertos, regulados y multiagentes de manera distribuida. El tipo de MAS regulado que contemplamos consiste en actividades múltiples, simultáneas, relacionadas donde los agentes interactúan. Cada agente puede participar simultáneamente en varias actividades, y cambiar de una actividad a otra. Las acciones de un agente dentro de una actividad pueden tener consecuencias en forma de posiciones normativas (es decir. obligaciones, permisos y prohibiciones) [26] que puedan limitar su comportamiento futuro. Por ejemplo, un agente comprador que se queda sin crédito puede estar prohibido hacer más ofertas, o un agente vendedor está obligado a entregar después de cerrar un acuerdo. Asumimos que los agentes pueden optar por no cumplir todas sus obligaciones y, por lo tanto, pueden ser sancionados por el MAS. Obsérvese que, cuando se distribuyen las actividades, las posiciones normativas deben derivarse de las actividades en las que se generan a aquellas en las que surten efecto. Por ejemplo, la obligación de los vendedores de arriba debe fluir (o propagarse) de una actividad de negociación a una actividad de entrega. Dado que en un MAS abierto y regulado no se pueden incorporar aspectos normativos en el diseño de los agentes, adoptamos la opinión de que el MAS debe complementarse con un conjunto separado de normas que regulen aún más el comportamiento de los agentes participantes. Para modelar la separación de preocupaciones entre el nivel de coordinación (interacciones de agentes) y el nivel normativo (propagación de posiciones normativas), proponemos un artefacto llamado Estructura Normativa (NS). Dentro de un NS pueden surgir conflictos debido a la naturaleza dinámica del MAS y la concurrencia de acciones de los agentes. Por ejemplo, un agente puede estar obligado y prohibido a realizar el 636 978-81-904262-7-5 (RPS) c 2007 IFAAMAS muy mismo acción en una actividad. Dado que la regulación de un MAS implica que los agentes participantes deben ser conscientes de la validez de las acciones que tienen lugar dentro de él, dichos conflictos deben ser identificados y posiblemente resueltos si se necesita una reivindicación de validez para que un agente realice una acción o sea sancionado. Sin embargo, garantizar la libertad de conflicto de un NS en el momento del diseño es computacionalmente intratable. Demostramos esto formalizando la noción de conflicto, proporcionando un mapeo de los NS en las redes de Petri de colores (CPNs) y tomando prestado los resultados teóricos bien conocidos del campo de los CPNs. Creemos que se requiere la detección y resolución de conflictos en línea. Por lo tanto, presentamos un algoritmo tratable para la resolución de conflictos. Este algoritmo es primordial para la promulgación distribuida de un NS. El documento se organiza de la siguiente manera. En la Sección 2 detallamos un escenario para servir de ejemplo a lo largo del artículo. A continuación, en la Sección 3 definimos formalmente el artefacto de la estructura normativa. Además, en la sección 4 formalizamos la noción de conflicto para posteriormente analizar la complejidad de la detección de conflictos en términos de RCP en la sección 5. En la sección 6 se describe la gestión computacional de los NS describiendo su promulgación y presentando un algoritmo para la resolución de conflictos. Por último, comentamos sobre la labor conexa, sacamos conclusiones e informamos sobre la labor futura en la sección 7. 2. SCENARIO Utilizamos un escenario de cadena de suministro en el que empresas e individuos se reúnen en un mercado en línea para realizar negocios. El procedimiento de transacción global puede organizarse como seis actividades distribuidas, representadas como nodos en el diagrama de la Figura 1. En ellas participan diferentes participantes cuyo comportamiento se coordina a través de protocolos. En este escenario, los agentes pueden desempeñar uno de los cuatro papeles: marExit Inscripción Pago Entrega Negociación Coordinación Modelo Contrato Figura 1: Estructura de actividad del contador de ketplace (acc), cliente, proveedor (supp) y gerentes de almacén (wm). Las flechas que conectan las actividades representan cómo los agentes pueden moverse de una actividad a otra. Después de registrarse en el mercado, los clientes y proveedores se reúnen en una actividad en la que negocian los términos de su transacción, es decir. los precios, los importes de las mercancías que deban entregarse, los plazos y otros detalles. En la actividad contractual, se establece el pedido y se prepara una factura. El cliente participará entonces en una actividad de pago, verificando su solvencia e instruyendo a su banco a transferir la cantidad correcta de dinero. Mientras tanto, el proveedor se encargará de la entrega de las mercancías (por ejemplo: a través de un administrador de almacén) en la actividad de entrega. Finalmente, los agentes pueden salir del mercado conforme a un protocolo de salida predeterminado. El contable del mercado participa en la mayoría de las actividades como proveedor confiable de herramientas de auditoría. En el resto del documento nos basaremos en este escenario para ilustrar la noción de estructura normativa e ilustrar nuestro enfoque de la detección y resolución de conflictos en un entorno distribuido. 3. ESTRUCTURA NORMATIVA En los agentes MASs interactúan según protocolos que naturalmente se distribuyen. Abogamos por que las acciones en uno de esos protocolos puedan tener un efecto en la promulgación de otros protocolos. Algunas acciones pueden ser prohibidas u obligatorias, por ejemplo. Tomamos posiciones normativas para ser obligaciones, prohibiciones y permisos similares al trabajo descrito en [26]. La intención de agregar o eliminar una posición normativa que llamamos comando normativo. Los casos de posiciones normativas en un protocolo también pueden tener consecuencias para otros protocolos1. Para definir nuestro lenguaje de norma y especificar cómo se propagan las posiciones normativas, nos hemos inspirado en sistemas multicontexto [14]. Estos sistemas permiten estructurar el conocimiento en teorías formales distintas y definir las relaciones entre ellos. Las relaciones se expresan como reglas puente - la deducibilidad de las fórmulas en algunos contextos conduce a la deducción de otras fórmulas en otros contextos. Recientemente, estos sistemas se han utilizado con éxito para definir arquitecturas de agentes [11, 23]. La metáfora se traduce a nuestro trabajo actual de la siguiente manera: la expresión de las ilocuciones y/o la existencia de posiciones normativas en algunas escenas normativas conduce a la deducción de posiciones normativas en otras escenas normativas. Nos preocupa la propagación y distribución de posiciones normativas dentro de una red de escenas normativas distribuidas como consecuencia de las acciones de los agentes. Tomamos escenas normativas para ser conjuntos de posiciones normativas y expresiones que están asociadas con un protocolo de interacción subyacente correspondiente a una actividad. En esta sección, presentamos primero un lenguaje simple que capta estos aspectos e introduce formalmente las nociones de escena normativa, regla de transición normativa y estructura normativa. Damos la semántica prevista de estas reglas y mostramos cómo controlar un MAS a través de normas en un ejemplo. 3.1 Conceptos básicos Los componentes básicos de nuestro lenguaje son términos y fórmulas atómicas: Def. 1. Un término, denotado como t, es (i) cualquier constante expresada usando minúsculas (con o sin subíndices), por ejemplo. a, b0, c o ii) cualquier variable expresada utilizando mayúsculas (con o sin subíndices), por ejemplo. X, Y, Zb o iii) cualquier función f(t1,. . . , tn), donde f es un símbolo de función n-ary y t1,.., tn son términos. Algunos ejemplos de términos y funciones son Crédito, precio u oferta (biblia, 30), siendo respectivamente una variable, una constante y una función. Estaremos haciendo uso de identificadores en todo el papel, que son términos constantes y también necesitan la siguiente definición: Def. 2. Una fórmula atómica es cualquier construcción p(t1,. . . , tn), donde p es un símbolo predicado n-ary y t1,. . . , son términos. El conjunto de todas las fórmulas atómicas se denota como Δ. Nos centramos en una clase expresiva de MASs en la que la interacción se lleva a cabo por medio de actos de discurso ilocutionarios intercambiados entre los agentes participantes: Def. 3. I I I son las fórmulas atómicas terrestres que tienen la forma p(ag, r, ag, r, , t) donde p es un elemento de 1 Aquí, abstracto de protocolos y se refieren a ellos genéricamente como actividades. El Sexto Intl. Conjunto Conf. en Agentes Autónomos y Sistemas Multi-Agentes (AAMAS 07) 637 un conjunto de partículas ilocucionarias (por ejemplo: informar, petición, oferta); ag, ag son identificadores de agente; r, r son identificadores de rol; , un término de base arbitrario, es el contenido del mensaje, construido a partir de un lenguaje de contenido compartido; t  N es un sello de tiempo. El significado intuitivo de p(ag, r, ag, r, m, t) es que agente ag jugando rol r enviado mensaje m a agente ag jugando rol r en el momento t. Un ejemplo de una ilocución es informar(ag4, supp, ag3, cliente, offer(wire, 12), 10). A veces es útil referirse a las ilocuciones que no están totalmente fundamentadas, es decir, aquellas que pueden contener variables no instantiated (libres). En la descripción de un protocolo, por ejemplo, los valores precisos del mensaje intercambiado pueden quedar sin especificar. Durante la promulgación de los agentes del protocolo se producirán los valores reales que darán lugar a una ilocución del suelo. Así podemos definir esquemas de ilocución: Def. 4. Un esquema de ilocución ̄I es cualquier fórmula atómica p(ag, r, ag, r, ♥, t) en la que algunos de los términos pueden ser variables o pueden contener variables. 3.2 Definición formal de la noción de NS Primero definimos las escenas normativas de la siguiente manera: Def. 5. Una escena normativa es una tupla s = ids, Δs donde los ids son un identificador de escena y Δs es el conjunto de fórmulas atómicas Por ejemplo, una instantánea del estado de la escena normativa de entrega de nuestro escenario podría ser representada como: Δs = 8 < : utt(request(sean, client, kev, wm, receive(wire, 200), 20)), utt(accept(kev, wm, seen, customer, receive(wire, 200), 30)) 9 = ; Es decir, Tenga en cuenta que el estado de una escena normativa Δs evoluciona con el tiempo. Estas escenas normativas están conectadas entre sí a través de transiciones normativas que especifican cómo las expresiones y posiciones normativas en una escena afectan a otras escenas normativas. Como se mencionó anteriormente, las actividades no son independientes, ya que las ilocuciones pronunciadas en algunas de ellas pueden tener un efecto en otras. Las reglas normativas de transición definen las condiciones bajo las cuales se genera un comando normativo. Estas condiciones son declaraciones o posiciones normativas asociadas a un protocolo dado (denominadas por ejemplo. actividad : expresión ) que dan un comando normativo, es decir. la adición o supresión de otra posición normativa, posiblemente relacionada con una actividad diferente. Nuestras reglas de transición están así definidas: Def. 6. Una regla de transición normativa R es de la forma: R ::= V C V ::= ids : D  V, V D ::= N  utt( ̄I) N ::= per( ̄I)  prh( ̄I)  obli( ̄I) C ::= add(ids : N)  remove(ids : N) donde ̄I es un esquema permiso, prohibición u obligación), ids es un identificador de la actividad s y C es un comando normativo. Dotamos nuestro lenguaje con la semántica habitual de los lenguajes basados en reglas [19]. Las reglas trazan una estructura normativa existente a una nueva estructura normativa en la que sólo cambia el estado de las escenas normativas. En las definiciones siguientes nos basamos en el concepto estándar de sustitución [9]. Def. 7. Una transición normativa es un tupla b = idb, rb donde idb es un identificador y rb es una regla de transición normativa. Proponemos ampliar la noción de MAS, regulada por protocolos, con una capa adicional consistente en escenas normativas y transiciones normativas. Esta capa se representa como un gráfico bipartito que llamamos estructura normativa. Una estructura normativa relaciona escenas normativas y transiciones normativas especificando qué posiciones normativas deben generarse o eliminarse en qué escenas normativas. Def. 8. Una estructura normativa es un gráfico bipartito etiquetado NS = Nodos, bordes, Lin, Lout. Nodos es un conjunto de Sâ B donde S es un conjunto de escenas normativas y B es un conjunto de transiciones normativas. Edges es un conjunto Ain Aout donde Ain  S × B es un conjunto de arcos de entrada etiquetados con una fórmula atómica utilizando la función de etiquetado Lin : Ain → D; y Aout  B × S es un conjunto de arcos de salida etiquetados con una posición normativa utilizando la función de etiquetado Lout : Aout → N. Lo siguiente debe contener: 1. Cada fórmula atómica que aparece en el LHS de una regla rb debe ser de la forma (ids : D) donde s â € € € € TM € € € € € € € € € € € € € € € € € € € € € € € € € Ain tal que es = La fórmula atómica que aparece en el RHS de una regla rb debe ser de la forma add(ids : N) o remove(ids : N) donde s â € S y â € Aout tal que aout = (b, s) y Lout (aout ) = N. 3. Ain tal que a = (s, b) y b = idb, rb y Lin (a) = D entonces (ids:D) debe ocurrir en el LHS de rb. 4. Afuera de tal manera que a = (b, s) y b = idb, rb y Lout (a) = N luego add(ids : N) o remove(ids : N) deben ocurrir en el RHS de rb. Los dos primeros puntos aseguran que cada fórmula atómica en el LHS de una regla de transición normativa etiqueta un arco que entra en la transición normativa apropiada en la estructura normativa, y que la fórmula atómica en el RHS etiqueta el arco saliente correspondiente. Los puntos tres y cuatro aseguran que las etiquetas de todos los arcos entrantes se utilicen en el LHS de la regla de transición normativa en la que entran estos arcos, y que las etiquetas de todos los arcos salientes se utilicen en el RHS de la regla de transición normativa que estos arcos dejan. 3.3 Semántica Destinada La semántica formal se definirá mediante un mapeo a Redes Petri Coloradas en la Sección 5.1. Aquí comenzamos a definir la semántica prevista de las reglas normativas de transición describiendo cómo una regla cambia un escenario normativo de una estructura normativa existente que produce una nueva estructura normativa. Cada regla se activa una vez para cada sustitución que unifica el lado izquierdo V de la regla con el estado de las escenas normativas correspondientes. Una fórmula atómica (es decir, una declaración o una posición normativa) si es unificable con una declaración o posición normativa que pertenece al estado del escenario normativo correspondiente. Cada vez que se activa una regla, se lleva a cabo el comando normativo especificado a la derecha de esa regla, con la intención de añadir o eliminar una posición normativa del estado de la escena normativa correspondiente. Sin embargo, la adición no es incondicional, ya que pueden surgir conflictos. Este tema se tratará en las secciones 4 y 6.1. 638 La Sexta Intl. Conjunto Conf. en Agentes Autónomos y Sistemas Multi-Agentes (AAMAS 07) 3.4 Ejemplo En nuestro ejemplo de ejecución tenemos la siguiente regla de transición normativa ejemplar: „ pago : obli(inform(X, cliente, Y, acc, pay(Z, P, Q, T)), pago : utt(inform(X, cliente, Y, acc, pay(Z, P, Q), T)) « entrega : a La norma es una obligación del agente Y (esta vez asumiendo el papel de gerente de almacén wm) de enviar un mensaje al cliente X que el artículo Z ha sido entregado. En la Figura 2 se muestra una representación diagnóstica de cómo se relacionan las actividades y una estructura normativa: Pago Entrega Contrato Nivel Normativo Salida Registro Pago Entrega Negociación Nivel de Coordinación Contrato nt Figura 2: Actividades y Estructura Normativa A medida que se pronuncian las ilocuciones durante las actividades, surgen posiciones normativas. Las preferencias y las posiciones normativas se combinan en normas de transición, lo que provoca el flujo de posiciones normativas entre las distintas situaciones normativas. La conexión entre los dos niveles se describe en la sección 6.2. 4. DEFINICIÓN DE CONFLICTOS Los términos conflicto deontico e inconsistencia deontica se han utilizado indistintamente en la literatura. Sin embargo, en este trabajo adoptamos el punto de vista de [7] en el que los autores sugieren que surge una inconsistencia deontica cuando una acción es simultáneamente permitida y prohibida - ya que un permiso no puede ser actuado en consecuencia, no se produce un conflicto real. Sin embargo, las situaciones en que una acción está simultáneamente obligada y prohibida son conflictos deonticos, ya que tanto las obligaciones como las prohibiciones influyen en los comportamientos en conflicto. El contenido de las posiciones normativas en este trabajo son ilocuciones. Por lo tanto, surge un conflicto normativo cuando una ilocución está simultáneamente obligada y prohibida. Proponemos utilizar la noción estándar de unificación [9] para detectar cuándo se superponen una prohibición y un permiso. Por ejemplo, una obligación obli(informar(A1, R1, A2, R2, p(c, X, T)) y una prohibición prh(informar(a1, r1, a2, r2, p(Y, d), T)) están en conflicto ya que se unifican en el punto Capturamos formalmente esta noción: Def. 9. Un conflicto (deontico) surge entre dos posiciones normativas N y N bajo una sustitución Es decir, una prohibición y una obligación están en conflicto si, y sólo si, sus ilocuciones se unifican en virtud de La sustitución, llamada aquí el conjunto de conflictos, unifica los agentes, roles y fórmulas atómicas. Asumimos que unificar es una implementación adecuada de un algoritmo de unificación que i) termina siempre (posiblemente fallando, si no se puede encontrar un unificador); ii) es correcto; y iii) tiene complejidad computacional lineal. Las incoherencias causadas por la misma ilocución, que se permiten y prohíben simultáneamente, pueden formalizarse de manera similar. En este trabajo nos centramos en los conflictos de prohibición/obligación, pero la maquinaria computacional introducida en la Sección 6.1 también puede ser utilizada para detectar inconsistencias de prohibición/permiso, si sustituimos la modalidad obli por per. 5. FORMALIZACIÓN DEL CONFLICTO-FREEDOM En esta sección presentamos algunos conocimientos de fondo sobre CPN asumiendo una comprensión básica de las redes Petri ordinarias. Para detalles técnicos, remitimos al lector a [16]. A continuación, mapeamos los NS a los CPN y analizamos sus propiedades. Los CPN combinan la fuerza de las redes Petri con la fuerza de los lenguajes de programación funcionales. Por un lado, las redes Petri proporcionan los primitivos para la descripción de la sincronización de los procesos concurrentes. Como se observa en [16], los CPN tienen una semántica que se basa en la verdadera concurrencia, en lugar de entrelazarse. En nuestra opinión, es más fácil trabajar con una semántica de verdadera moneda porque es la forma en que prevemos la conexión entre el nivel de coordinación y el nivel normativo de un sistema multi-agente. Por otra parte, los lenguajes de programación funcionales utilizados por los CPN proporcionan los primitivos para la definición de los tipos de datos y la manipulación de sus valores de datos. Por lo tanto, podemos traducir fácilmente expresiones de una estructura normativa. Por último, pero no por ello menos importante, los CPN tienen una semántica bien definida que define inequívocamente el comportamiento de cada CPN. Además, los CPN tienen un gran número de métodos e instrumentos de análisis formales mediante los cuales se pueden demostrar las propiedades de los CPN. En resumen, los CPN nos proporcionan todas las características necesarias para razonar formalmente sobre las estructuras normativas, dado que se proporciona una cartografía adecuada. De acuerdo con las redes Petri, los estados de un CPN están representados por medio de lugares. Pero a diferencia de Petri Nets, cada lugar tiene un tipo de datos asociado determinando el tipo de datos que el lugar puede contener. Un estado de un CPN se llama marca. Consiste en un número de fichas colocadas en los lugares individuales. Cada \"token\" lleva un valor de datos que tiene el tipo del lugar correspondiente. En general, un lugar puede contener dos o más tokens con el mismo valor de datos. Por lo tanto, una marca de un CPN es una función que mapea cada lugar en un multi-set2 de tokens del tipo correcto. Uno se refiere a menudo a los valores \"token\" como colores \"token\" y uno también se refiere a los tipos de datos como conjuntos de colores. Los tipos de un CPN pueden ser arbitrariamente complejos. Las acciones en un PCN están representadas mediante transiciones. Un arco entrante en una transición desde un lugar indica que la transición puede eliminar tokens del lugar correspondiente mientras que un arco saliente indica que la transición puede añadir tokens. El número exacto de tokens y sus valores de datos son determinados por las expresiones de arco, que se codifican utilizando el lenguaje de programación elegido para el CPN. Una transición está habilitada en un CPN si y sólo si todos los 2 A multi-set (o bolsa) es una extensión a la noción de conjunto, permitiendo la posibilidad de múltiples apariencias del mismo elemento. El Sexto Intl. Conjunto Conf. en Agentes Autónomos y Sistemas Multi-Agentes (AAMAS 07) 639 variables en las expresiones de sus arcos entrantes se unen a algunos valores (cada una de estas fijaciones se refiere como un elemento vinculante). Si es así, la transición puede ocurrir eliminando tokens de sus lugares de entrada y añadiendo tokens a sus lugares de salida. Además de las expresiones de arco, es posible conectar una expresión booleana de guardia (con variables) a cada transición. Juntando todos los elementos de arriba obtenemos una definición formal de CPN que se empleará más adelante para propósitos de mapeo. Def. 10. Un CPN es un conjunto finito de tipos no vacíos, también llamados conjuntos de colores; ii) P es un conjunto finito de lugares; iii) T es un conjunto finito de transiciones; iv) A es un conjunto finito de arcos; v) N es una función de nodo definida de A a P × T • T × P; vi) C es una función de color de P a فارسى; vii) G es una De acuerdo con las redes Petri ordinarias, el comportamiento concurrente de un CPN se basa en la noción de paso. Formalmente, un paso es un no vacío y finito multi-set sobre el conjunto de todos los elementos de unión. Deje que el paso S se active en una marca M. Entonces, S puede ocurrir, cambiando la marca M a M. Además, decimos que el marcado M es directamente accesible desde el marcado M por la ocurrencia del paso S, y lo denotamos por M[S > M. Una secuencia de ocurrencia finita es una secuencia finita de pasos y marcas: M1[S1 > M2. . . Mn[Sn > Mn+1 de tal manera que n+N y Mi[Si > Mi+1 . . , n}. El conjunto de todas las marcas posibles alcanzables para una red neta de una marca M se llama su conjunto de alcance, y se denota como R(Net, M). 5.1 Mapeo a redes de Petri de colores Nuestra estructura normativa es un gráfico bipartito etiquetado. Lo mismo puede decirse de una red Petri coloreada. Estamos presentando un mapeo f de uno a otro, con el fin de proporcionar semántica para la estructura normativa y probar las propiedades al respecto mediante el uso de resultados teóricos bien conocidos de trabajo en CPNs. El mapeo f hace uso de correspondencias entre escenas normativas y lugares CPN, transiciones normativas y transiciones CPN y finalmente, entre etiquetas de arco y expresiones de arco CPN. S → P B → T Lin Lout → E El conjunto de tipos es el conjunto singleton que contiene el color NP (es decir. * = {NP}). Este tipo complejo está estructurado de la siguiente manera (utilizamos CPN-ML [4] sintaxis): color NPT = con Obl  Per  Prh  NoMod color IP = con infor  declaramos  offer color UTT = record illp : IP ag1, role1, ag2, role2 : string content : string time : int color NP = Los arcos son trazados casi directamente. A es un conjunto finito de arcos y N es una función de nodo, de tal manera que Aa Aa Ain Aout. N(a) = a. La función de inicialización I se define como I(p) = Δs ( Por último, la función de color C asigna el color NP a cada lugar: C(p) = NP (­p ­P). No estamos haciendo uso de la función de guardia G. En el trabajo futuro, esta función se puede utilizar para modelar restricciones cuando extendemos la expresividad de nuestro lenguaje de norma. 5.2 Propiedades de las estructuras normativas Después de haber definido el mapeo desde las estructuras normativas hasta las redes de Petri coloreadas, ahora analizamos las propiedades de los CPN que nos ayudan a entender la complejidad de la detección de conflictos. Una pregunta que nos gustaría responder es, si en un momento dado, una determinada estructura normativa está libre de conflictos. Tal instantánea de una estructura normativa corresponde a una marca en el CPN cartografiado. Def. 11. Dada una marca Mi, esta marca es libre de conflicto si p  P. np1, np2  Mi(p) tal que np1.mode = Obl y np2.mode = Prh y np1.illoc y np2.illoc unificar bajo una sustitución válida. Otra pregunta interesante sería si se producirá un conflicto a partir de una instantánea del sistema propagando las posiciones normativas. Para responder a esta pregunta, primero traducimos la instantánea de la estructura normativa al CPN correspondiente y luego ejecutamos la secuencia de ocurrencia finita de marcas y pasos, verificando la libertad de conflicto de cada marca a medida que avanzamos. Def. 12. Dada una marca Mi, una secuencia de ocurrencia finita Si, Si+1,..., Sn se llama libre de conflictos, si y sólo si Mi[Si > Mi+1. . . Mn[Sn > Mn+1 y Mk están libres de conflictos para todos los k, de modo que i ≤ k ≤ n + 1. Sin embargo, la cuestión principal que nos gustaría investigar, es si una estructura normativa dada es o no resistente a los conflictos, es decir, si los agentes que promulgan el MAS son capaces de provocar conflictos a través de sus acciones. Tan pronto como se incluye la posibilidad de acciones (o declaraciones) de agentes autónomos, se pierde el determinismo. Después de haber mapeado la estructura normativa a un CPN, ahora añadimos modelos de CPN de las interacciones de agentes. Cada forma de interacción con el agente (es decir, cada actividad) se puede modelar utilizando CPN en la línea de Cost et al. [5]. Estos CPN no determinantes alimentan tokens en el CPN que modela la estructura normativa. Esto lleva a la introducción de no-determinismo en el PCN combinado. La mitad inferior de la figura 3 muestra parte de un modelo CPN de un protocolo de agente donde el arco denotado con 1 representa alguna pronunciación de una ilocución por un agente. La transición objetivo de este arco, no sólo mueve un \"token\" hacia el siguiente estado de este PCN, sino que también coloca un \"token\" en el lugar correspondiente a la escena normativa apropiada en el modelo del PCN de la estructura normativa (a través del arco 2). La Transición 3 finalmente podría propagar ese \"token\" en forma de una obligación, por ejemplo. Así, a partir de una marca dada, muchas secuencias de ocurrencia diferentes son posibles dependiendo de las acciones de los agentes. Utilizamos el conjunto de alcance R para definir una situación en la que los agentes no pueden causar conflictos. 640 La Sexta Intl. Conjunto Conf. sobre Agentes Autónomos y Sistemas Multi-Agentes (AAMAS 07) Figura 3: Construcción del CPN combinado Def. 13. Dado un N neto, una marca M es resistente a los conflictos si y sólo si todas las marcas en R(N,M) están libres de conflictos. La verificación de la libertad de conflicto de una marca se puede hacer en tiempo polinomio mediante la verificación de todos los lugares del CPN en busca de fichas en conflicto. La libertad de conflicto de una secuencia de ocurrencia en el CPN que representa la estructura normativa también se puede hacer en tiempo polinomio ya que esta secuencia es determinista dada una instantánea. El hecho de que se diseñe o no una estructura normativa corresponde con seguridad a la comprobación de la resistencia a los conflictos de la marca M0 inicial. Ahora, verificar la resistencia al conflicto de una marca se convierte en una tarea muy difícil. Corresponde al problema de la accesibilidad en un CPN: ¿se puede alcanzar un estado o se puede lograr una marca que contenga un conflicto?. Este problema de alcanzabilidad es conocido por ser NP-completo para las redes Petri ordinarias [22] y como las RCP son funcionalmente idénticas, no podemos esperar verificar la resistencia a los conflictos de una estructura normativa fuera de línea en un tiempo razonable. Por lo tanto, se necesitan mecanismos de distribución y tiempo de ejecución para garantizar que una estructura normativa mantenga la coherencia. Presentamos uno de esos mecanismos en la sección siguiente. 6. GESTIÓN DE ESTRUCTURAS NORMATIVAS Una vez detectado un conflicto (según se define en la Sección 4), proponemos emplear al unificador para resolver el conflicto. En nuestro ejemplo, si las variables en prh(inform(a1, r1, a2, r2, p(Y, d), T)) no obtienen los valores especificados en la sustitución Sin embargo, en lugar de computar el conjunto de complementos de una sustitución (que puede ser un conjunto infinito) proponemos anotar la prohibición con el propio unificador y utilizarla para determinar cuáles son las variables de esa prohibición no pueden ser en futuras unificaciones para evitar un conflicto. Por lo tanto denotamos prohibiciones anotadas como prh( ̄I) . . Es un conjunto de unificadores. Las normas anotadas3 se interpretan como constructos deonticos con influencias restringidas, es decir, su efecto (sobre agentes, roles e ilocuciones) ha sido limitado por el conjunto de unificadores. Una prohibición puede estar en conflicto con varias obligaciones en una escena normativa dada s = id, Δ y tenemos que registrar (y posiblemente evitar) todos estos conflictos. Definimos a continuación un algoritmo que garantiza que una posición normativa se añada a una escena normativa de tal manera que no cause ningún conflicto. 3 Aunque proponemos limitar las prohibiciones, el mismo mecanismo puede utilizarse para definir la reducción de obligaciones en su lugar. Estas diferentes políticas dependen de la semántica deontica prevista y de los requisitos de los sistemas abordados. Por ejemplo, algunos MAS pueden exigir que sus agentes no actúen en presencia de conflictos, es decir, que se reduzca la obligación. 6.1 Resolución de conflictos Proponemos una forma de resolver los conflictos normativos mediante la unificación. Detectamos la superposición de las influencias de las normas, es decir. cómo afectan al comportamiento de los agentes afectados, y reducimos la influencia de la posición normativa, mediante el uso adecuado de las anotaciones al comprobar si la norma se aplica a las ilocuciones. El algoritmo mostrado en la Figura 4 muestra cómo mantenemos un conjunto de normas libres de conflictos. Añade una norma dada N a un estado normativo existente, libre de conflictos Δ, obteniendo un nuevo estado normativo resultante Δ que es libre de conflictos, es decir, sus prohibiciones están anotadas con un conjunto de conjuntos de conflictos que indican qué fijaciones para variables deben evitarse para que los conflictos no tengan lugar. algoritmo addNorm(N, Δ) comienza 1 marca de tiempo(N) 2 caso N de 3 per( ̄I): Δ := Δ  {N} 4 prh(I): si N  Δ s.t. Conflict(N, N, Las líneas 4-5 abordan el caso cuando intentamos agregar una prohibición de base a un estado normativo: si entra en conflicto con cualquier obligación, entonces se descarta; de lo contrario se añade al estado normativo. En las líneas 6 a 12 se describe la situación en que la posición normativa que debe añadirse es una prohibición no básica. En este caso, el algoritmo inicializa un conjunto vacío y bucles (línea 9-10) a través de las normas N en el antiguo estado normativo Δ. Después de encontrar uno que entra en conflicto con N, el algoritmo actualiza el valor de la nueva configuración de conflicto (línea 10). Mediante el bucle a través de Δ, somos capaces de comprobar cualquier conflicto entre la nueva prohibición y las obligaciones existentes, construyendo adecuadamente la anotación  que se utilizará al añadir N a Δ en la línea 11. En las líneas 13 a 27 se describe cómo se ajusta una nueva obligación a un estado normativo existente. Hacemos uso de dos conjuntos inicialmente vacíos, temporales, Δ1, Δ2. El algoritmo pasa a través de Δ (líneas 16-25) recogiendo las prohibiciones anotadas N Hay, sin embargo, dos casos a tratar: el de cuando un motivo La Sexta Intl. Conjunto Conf. sobre los agentes autónomos y los sistemas multiagentes (AAMAS 07) se encuentra la prohibición 641 (línea 17), y su excepción, que abarca las prohibiciones no terrestres (línea 20). En ambos casos, la antigua prohibición se almacena en Δ1 (líneas 18 y 23) para ser posteriormente retirada de Δ (línea 26). Sin embargo, en el caso de una prohibición no terrestre, el algoritmo actualiza su anotación de conjuntos de conflicto (línea 24). El bucle garantiza que se lleve a cabo una búsqueda exhaustiva (lineal) a través de un estado normativo, comprobando si la nueva obligación está en conflicto con cualquier prohibición existente, posiblemente actualizando las anotaciones de estas prohibiciones en conflicto. En la línea 26 el algoritmo construye la nueva actualización Δ eliminando las antiguas prohibiciones almacenadas en Δ1 y añadiendo las prohibiciones actualizadas almacenadas en Δ2 (si las hay), así como la nueva obligación N. Nuestro algoritmo propuesto es correcto en que, para una posición normativa dada N y un estado normativo Δ, proporciona un nuevo estado normativo Δ en el que todas las prohibiciones tienen anotaciones que registran cómo se unifican con las obligaciones existentes. Sin embargo, las anotaciones pueden estar vacías: este es el caso cuando tenemos una prohibición básica o una prohibición que no unifica/conflige con ninguna obligación. Los permisos no afectan a nuestro algoritmo y se tratan adecuadamente (línea 3). Cualquier intento de insertar una prohibición de base que entre en conflicto, produce el mismo estado normativo (línea 4). Cuando se añade una nueva obligación, el algoritmo garantiza que se tienen en cuenta todas las prohibiciones (líneas 14 a 27), lo que conduce a la eliminación de las prohibiciones sobre el terreno en conflicto o a la actualización de las anotaciones de las prohibiciones no sobre el terreno. El algoritmo siempre termina: los bucles están sobre un conjunto finito Δ y los conflictos comprueban y establecen operaciones siempre terminan. La complejidad del algoritmo es lineal: el conjunto Δ sólo se examina una vez para cada caso posible de norma que se añade. Al gestionar los estados normativos también es posible que necesitemos eliminar posiciones normativas. Esto es sencillo: los permisos se pueden retirar sin ningún problema; las prohibiciones anotadas también se pueden eliminar sin más consideraciones; sin embargo, las obligaciones requieren algunas tareas domésticas. Cuando se va a eliminar una obligación, debemos verificarla contra todas las prohibiciones anotadas a fin de actualizar sus anotaciones. Aplicamos la comprobación de conflicto y obtenemos un unificador, luego eliminamos este unificador de la anotación de prohibiciones. Invocamos el algoritmo de eliminación como removeNorm(N, Δ): devuelve un nuevo estado normativo Δ en el que N ha sido eliminado, con posibles alteraciones a otras posiciones normativas como se explicó. 6.2 Promulgación de una estructura normativa La promulgación de una estructura normativa equivale a la ejecución paralela y distribuida de escenas normativas y transiciones normativas. A título ilustrativo, describiremos a continuación la interacción entre las situaciones normativas de pago y entrega y la transición normativa que los vincula en la mitad superior de la figura 2. Con este objetivo, considere, por ejemplo, que obl(inform(jules, cliente, rod, acc, pay(copper, 400, 350), T) Δpago y que Δentrega tiene prh(inform(rod,wm, jules, cliente, entregado(Z, Q), T)). Tales estados indican que el cliente Jules está obligado a pagar £400 por 350kg de cobre al contador Rod de acuerdo con la escena normativa de pago, mientras que Rod, asumiendo el papel de gerente de almacén esta vez, está prohibido entregar cualquier cosa al cliente Jules de acuerdo con la escena normativa de entrega. Para cada escena normativa, el proceso de promulgación es el siguiente. En primer lugar, procesa su cola de mensajes entrantes que contiene tres tipos de mensajes: declaraciones de la actividad a la que está vinculada; y comandos normativos para agregar o eliminar posiciones normativas. Por ejemplo, en nuestro ejemplo, la escena normativa de pago recoge la ilocución I = utt((inform(jules, cliente, varilla, acc, pay(cobre, 400, 350), 35)) para el cliente Jules pendiente de pago por cobre (a través de la flecha A en la figura 2). Las Uterancias son timestamped y subsecuentemente agregadas al estado normativo. Tendríamos Δpayment = Δpayment {I}, en nuestro ejemplo. Al recibir órdenes normativas para agregar o eliminar una posición normativa, la escena normativa invoca el algoritmo de adición o eliminación correspondiente descrito en la Sección 6.1. En segundo lugar, la escena normativa reconoce su cambio de estado al enviar un mensaje desencadenante a cada transición normativa saliente a la que está conectado. En nuestro ejemplo, el escenario normativo de pagos estaría señalando su cambio de estado a la transición normativa nt. Para las transiciones normativas, el proceso funciona de manera diferente. Debido a que cada transición normativa controla el funcionamiento de una sola regla, al recibir un mensaje de activación, encuesta cada escena normativa entrante para sustituciones de los esquemas de ilocución pertinentes en el LHS de su regla. En nuestro ejemplo, nt (responsable de la regla descrita en la Sección 3.4), encuestaría el escenario normativo de pago (vía flecha B) para sustituciones. Al recibir respuestas de ellos (en forma de conjuntos de sustituciones junto con marcas de tiempo), tiene que unificar las sustituciones de cada una de estas escenas normativas. Para cada unificación que encuentra, la regla se activa, y por lo tanto el comando normativo correspondiente se envía a lo largo de la escena normativa de salida. La transición normativa entonces mantiene un seguimiento del mensaje de disparo que envió y de las marcas de tiempo de las posiciones normativas que desencadenó el disparo. Esto se hace para asegurar que las mismas posiciones normativas en el LHS de una regla sólo desencadenen su disparo una vez. En nuestro ejemplo, nt estaría recibiendo  = {X/jules, Y/rod, Z/copper, Q/350} de la escena normativa de pagos. Dado que las substiciones en unifican con la regla nts, la regla es disparada, y el comando normativo add(delivery : obli(rod, wm, jules, client, delivery(copper, 350), T)) es enviado a lo largo de la escena normativa de entrega para obligar a Rod a entregar al cliente Jules 350kg de cobre. Después de eso, la escena normativa de entrega invocaría el algoritmo addNorm de la figura 4 con Δdelivery y N = obli(rod, wm, jules, client, delivered(copper, 350)) como argumentos. 7. TRABAJOS Y CONCLUSIONES RELACIONADOS Nuestras contribuciones en este documento son triples. En primer lugar, introducimos un enfoque para la gestión y el razonamiento de las normas de manera distribuida. Hasta donde sabemos, hay poco trabajo publicado en esta dirección. En [8, 21] se presentan dos idiomas para la aplicación distribuida de las normas en el MAS. Sin embargo, en ambos trabajos, cada agente tiene una interfaz de mensaje local que envía mensajes legales de acuerdo con un conjunto de normas. Dado que estas interfaces son locales para cada agente, las normas sólo pueden expresarse en términos de acciones de ese agente. Se trata de una grave desventaja, por ejemplo. cuando uno necesita activar una obligación para con un agente debido a un cierto mensaje de otro. La segunda contribución es la propuesta de una estructura normativa. La noción es fructífera porque permite la separación de las cuestiones normativas y de procedimiento. La estructura normativa que proponemos evidencia la similitud entre la propagación de posiciones normativas y la propagación 642 La Sexta Intl. Conjunto Conf. sobre Agentes Autónomos y Sistemas Multi-Agentes (AAMAS 07) de tokens en Redes Petri Coloradas. Esa similitud sugiere fácilmente una cartografía entre los dos, y da lugar a un tratamiento analítico conveniente de la estructura normativa, en general, y la complejidad de la detección de conflictos, en particular. La idea de modelar interacciones (en forma de conversaciones) a través de Petri Nets se ha investigado en [18], donde el medio de interacción y los agentes individuales se modelan como subredes de CPN que posteriormente se combinan para su análisis. En [5], las conversaciones se diseñan y analizan por primera vez a nivel de los CPN y posteriormente se traducen en protocolos. Lin et al. [20] mapear esquemas de conversación a CPNs. Según nuestro conocimiento, el uso de esta representación en apoyo de la detección de conflictos en el MAS regulado no ha sido reportado en otros lugares. Por último, presentamos un mecanismo distribuido para resolver los conflictos normativos. Sartor [25] trata los conflictos normativos desde el punto de vista de la teoría jurídica y sugiere una forma de ordenar las normas involucradas. Su idea se implementa en [12], pero requiere un recurso central para el mantenimiento de normas. El enfoque para la detección y resolución de conflictos es una adaptación y extensión del trabajo sobre gráficos de instanciación reportados en [17] y un algoritmo relacionado en [27]. El algoritmo presentado en el presente trabajo puede ser utilizado para administrar estados normativos distribuidos: escenas normativas que suceden en paralelo tienen un estado normativo asociado Δ al que el algoritmo se aplica de forma independiente cada vez que se introduce una nueva norma. Estas tres contribuciones que presentamos en este documento abren muchas posibilidades para el trabajo futuro. Cabe mencionar en primer lugar, que como estrategia amplia estamos trabajando en una generalización de la noción de estructura normativa para hacerla funcionar con diferentes modelos de coordinación, con un contenido deontico más rico y además de diferentes realizaciones computacionales de MAS regulado. Como primer paso en esta dirección estamos aprovechando la disociación entre los protocolos de interacción y la orientación normativa declarativa que la estructura normativa pone a disposición, para proporcionar una capa normativa para las instituciones electrónicas (como se define en [1]). Esperamos que este acoplamiento dote a las instituciones electrónicas de un entorno normativo más flexible y más expresivo. Además, queremos extender nuestro modelo a través de varias direcciones: (1) manejar la negación y las limitaciones como parte del lenguaje de la norma, y en particular la noción de tiempo; (2) dar cabida a múltiples autoridades jerárquicas de normas basadas en roles, en la línea de Cholvy y Cuppens [3] y relaciones de poder como sugiere Carabelea et al. [2]; (3) para captar en el algoritmo de resolución de conflictos diferentes semánticas relacionadas con las nociones deonticas apoyando diferentes axiomaciones (por ejemplo, fuerza relativa de la prohibición frente a la obligación, nociones deonticas predeterminadas, inconsistencias deonticas). En el lado teórico, pretendemos utilizar técnicas de análisis de CPN para caracterizar clases de CPN (por ejemplo, acíclicas, simétricas, etc.) que corresponden a familias de Estructuras Normativas susceptibles a la detección de conflictos fuera de línea. La combinación de estas técnicas junto con nuestros mecanismos de resolución de conflictos en línea pretende dotar a los diseñadores del MAS de la capacidad de incorporar normas en sus sistemas de una manera basada en principios. 8. REFERENCIAS [1] J. L. Arcos, M. Esteva, P. Noriega, J. A. Rodr guez, y C. Sierra. Ingeniería de entornos abiertos con instituciones electrónicas. Journal on Engineering Applications of Artificial Intelligence, 18(2):191-204, 2005. [2] C. Carabelea, O. Boissier, y C. Castelfranchi. Usar el poder social para permitir a los agentes razonar sobre ser parte de un grupo. En el 5o Internat. Taller, EEAT 2004, págs. 166 a 177, 2004. [3] L. Cholvy y F. Cuppens. Solución de conflictos normativos mediante la fusión de funciones. En la Quinta Conferencia Internacional sobre Inteligencia Artificial y Derecho, Washington, Estados Unidos, 1995. [4] S. Christensen y T. B. Haagh. Diseño CPN - vista general de la sintaxis CPN ML. Informe técnico, Universidad de Aarhus, 1996. [5] R. S. Cost, Y. Chen, T. W. Finin, Y. Labrou e Y. Peng. Usando petri redes de colores para modelar la conversación. In Issues in Agent Communication, págs. 178 a 192, Londres, Reino Unido, 2000. [6] F. Dignum. Agentes autónomos con normas. Inteligencia Artificial y Ley, 7(1):69-79, 1999. [7] A. Elhag, J. Breuker y P. Brouwer. Sobre el análisis formal de los conflictos normativos. Información & Comunicaciones. Techn. Ley, 9(3):207-217, Oct. 2000. [8] M. Esteva, W. Vasconcelos, C. Sierra, y J. A. Rodr guez-Aguilar. Consistencia normativa en las instituciones electrónicas. volumen 3171 (LNAI), páginas 494-505. Springer-Verlag, 2004. [9] M. Fitting. Prueba de la lógica de primer orden y del teorema automatizado. Springer-Verlag, Nueva York, Estados Unidos, 1990. [10] N. Fornara, F. Vigan`o y M. Colombetti. Un enfoque impulsado por eventos a las normas en las instituciones artificiales. En el taller AAMAS05: Agentes, normas e instituciones para sistemas multiagente regulados (ANI@REM), Utrecht, 2005. [11] D. Gaertner, P. Noriega y C. Sierra. Ampliación de la arquitectura BDI con compromisos. En Actas del IX Congreso Internacional de la Asociación Catalana de Inteligencia Artificial, 2006. [12] A. Garc a-Camino, P. Noriega, y J.-A. Rodr guez-Aguilar. Un algoritmo para la resolución de conflictos en actividades reguladas compuestas. En el 7o taller Int.Workshop - ESAW 06, 2006. [13] A. Garc a-Camino, J.-A. Rodr guez-Aguilar, C. Sierra y W. Vasconcelos. Una arquitectura distribuida para las Sociedades de Agentes de Normas. En DALT III, volumen 3904 (LNAI), páginas 89 a 105. Springer, 2006. [14] F. Giunchiglia y L. Serafini. Lógicas jerárquicas multilenguaje o: Cómo podemos prescindir de lógicas modales. Inteligencia Artificial, 65(1):29-70, 1994. [15] J. Habermas. La Teoría de la Comunicación Acción, Volumen Uno, La Razón y la Racionalización de la Sociedad. Beacon Press, 1984. [16] K. Jensen. Redes Petri coloreadas: Conceptos básicos, métodos de análisis y usos prácticos (Volumen 1). Springer, 1997. [17] M. Kollingbaum y T. Norman. Estrategias para resolver conflictos de normas con razonamiento práctico. En el Taller de Coordinación de la CEPA en Sociedades de Agentes Emergentes 2004, 2004. [18] J.-L. Koning, G. Francois e Y. Demazeau. Formalización y prevalidación para protocolos de interacción en sistemas multiagente. En ECAI, págs. 298 a 307, 1998. [19] B. Kramer y J. Mylopoulos. Representación del conocimiento. En S. C. Shapiro, editor, Enciclopedia de Inteligencia Artificial, volumen 1, páginas 743-759. John Wiley & Sons, 1992. [20] F. Lin, D. H. Norrie, W. Shen y R. Kremer. Un enfoque basado en esquemas para especificar las políticas de conversación. En Temas de Comunicación de Agentes, págs. 193-204, 2000. [21] N. Minsky. Interacción gobernada por la ley (LGI): Un mecanismo de coordinación y control distribuido (Una introducción y un manual de referencia). Informe técnico, Universidad Rutgers, 2005. [22] T. Murata. Redes Petri: Propiedades, análisis y aplicaciones. Actas del IEEE, 77(4):541-580, 1989. [23] S. Parsons, C. Sierra y N. Jennings. Agentes que razonan y negocian discutiendo. Diario de Lógica y Computación, 8(3):261-292, 1998. [24] A. Ricci y M. Viroli. Artefactos de Coordinación: Una Abstracción Unificante para la Coordinación de Ingeniería Mediada por el Medio Ambiente en MAS. Informatica, 29:433-443, 2005. [25] G. Sartor. Conflictos normativos en el razonamiento jurídico. Inteligencia Artificial y Ley, 1(2-3):209-235, junio de 1992. [26] M. Sergot. Una teoría computacional de posiciones normativas. ACM Trans. Comput. Lógica, 2(4):581-622, 2001. [27] W. W. Vasconcelos, M. Kollingbaum, y T. Norman. Resolver conflictos e incoherencias en las organizaciones virtuales reguladas por normas. En Actas de AAMAS 07, Hawaii, EE.UU., 2007. IFAAMAS. [28] G. H. von Wright. Norma y acción: Una investigación lógica. Routledge y Kegan Paul, Londres, 1963. [29] M. Wooldridge. Una introducción a los sistemas multiagente. John Wiley & Sons, Chichester, Reino Unido, febrero de 2002. El Sexto Intl. Conjunto Conf. sobre agentes autónomos y sistemas de agentes múltiples (AAMAS 07) 643 ",
            "error": [
                ""
            ]
        },
        "conflict": {
            "translated_key": [
                "conflicto",
                "conflicto",
                "conflicto",
                "conflicto",
                "conflicto",
                "conflictos",
                "conflicto",
                "conflicto",
                "conflicto",
                "conflicto",
                "conflictos",
                "conflicto",
                "conflicto",
                "conflicto",
                "conflicto",
                "conflicto",
                "conflicto",
                "conflicto",
                "conflicto",
                "conflicto",
                "conflicto",
                "conflicto",
                "conflicto",
                "conflicto",
                "conflicto",
                "conflicto",
                "conflicto",
                "conflicto",
                "conflicto",
                "conflicto",
                "conflicto",
                "conflicto",
                "conflicto",
                "conflicto",
                "conflicto",
                "conflicto",
                "conflicto",
                "conflicto",
                "conflicto",
                "conflicto",
                "conflicto",
                "conflicto",
                "conflicto",
                "conflige",
                "conflicto",
                "conflicto",
                "conflicto",
                "conflicto",
                "conflicto",
                "conflicto",
                "conflicto",
                "conflicto",
                "conflicto"
            ],
            "translated_annotated_text": "Gestión de Normas Distribuidas en Sistemas Regulados Multi-Agente ∗ Dorian Gaertner Dept. de Computación, Imperial College London, Londres SW7 2AZ, Reino Unido dg00@doc.ic.ac.uk Andrés García-Camino, Pablo Noriega, J.-A. Rodriguez-Aguilar IIIA-CSIC, 08193 Bellaterra, España {andres,pablo,jarážiya.csic.es Wamberto Vasconcelos Dept. de Ciencias de la Computación, Universidad de Aberdeen, Aberdeen AB24 3UE, Reino Unido wvasconcelos@acm.org RESUMEN Las normas son ampliamente reconocidas como un medio de coordinar sistemas multi-agentes. La gestión distribuida de las normas es una cuestión difícil y observamos una falta de realizaciones computacionales verdaderamente distribuidas de los modelos normativos. Con el fin de regular el comportamiento de los agentes autónomos que participan en múltiples actividades relacionadas, proponemos un modelo normativo, la Estructura Normativa (NS), un artefacto que se basa en la propagación de posiciones normativas (obligaciones, prohibiciones, permisos), como consecuencias de las acciones de los agentes. Dentro de un NS, los conflictos pueden surgir debido a la naturaleza dinámica del MAS y la concurrencia de acciones de los agentes. Sin embargo, garantizar la libertad de \"conflicto\" de un NS en el momento del diseño es computacionalmente intratable. Demostramos esto formalizando la noción de \"conflicto\", proporcionando un mapeo de los NSs en las redes de Petri de colores y tomando prestado los resultados teóricos bien conocidos de ese campo. Dado que se requiere la resolución de \"conflicto\" en línea, presentamos un algoritmo tratable que se empleará de forma distribuida. Luego demostramos que este algoritmo es primordial para la promulgación distribuida de un NS. Categorías y sujetos Descriptores I.2.11 [Inteligencia Artificial Distribuida]: Idiomas y estructuras Términos generales Algoritmos, Diseño, Teoría 1. INTRODUCCIÓN Una característica fundamental de los sistemas multiagente abiertos y regulados en los que interactúan agentes autónomos, es que los agentes participantes están destinados a cumplir con las convenciones del sistema. Las normas pueden utilizarse para modelar tales convenciones y, por lo tanto, como medio para regular el comportamiento observable de los agentes [6, 29]. Hay muchas contribuciones sobre el tema de las normas de sociólogos, filósofos y lógicos (por ejemplo, [15, 28]). Sin embargo, hay muy pocas propuestas para la realización computacional de modelos normativos - la forma en que las normas pueden integrarse en el diseño y ejecución de MAS. Los pocos que existen (e.g. [10, 13, 24]), funcionan de manera centralizada, lo que crea cuellos de botella y puntos de fallo únicos. Hasta donde sabemos, ninguna propuesta apoya verdaderamente la promulgación distribuida de entornos normativos. En nuestro documento abordamos ese problema y proponemos medios para manejar los compromisos contradictorios en sistemas abiertos, regulados y multiagentes de manera distribuida. El tipo de MAS regulado que contemplamos consiste en actividades múltiples, simultáneas, relacionadas donde los agentes interactúan. Cada agente puede participar simultáneamente en varias actividades, y cambiar de una actividad a otra. Las acciones de un agente dentro de una actividad pueden tener consecuencias en forma de posiciones normativas (es decir. obligaciones, permisos y prohibiciones) [26] que puedan limitar su comportamiento futuro. Por ejemplo, un agente comprador que se queda sin crédito puede estar prohibido hacer más ofertas, o un agente vendedor está obligado a entregar después de cerrar un acuerdo. Asumimos que los agentes pueden optar por no cumplir todas sus obligaciones y, por lo tanto, pueden ser sancionados por el MAS. Obsérvese que, cuando se distribuyen las actividades, las posiciones normativas deben derivarse de las actividades en las que se generan a aquellas en las que surten efecto. Por ejemplo, la obligación de los vendedores de arriba debe fluir (o propagarse) de una actividad de negociación a una actividad de entrega. Dado que en un MAS abierto y regulado no se pueden incorporar aspectos normativos en el diseño de los agentes, adoptamos la opinión de que el MAS debe complementarse con un conjunto separado de normas que regulen aún más el comportamiento de los agentes participantes. Para modelar la separación de preocupaciones entre el nivel de coordinación (interacciones de agentes) y el nivel normativo (propagación de posiciones normativas), proponemos un artefacto llamado Estructura Normativa (NS). Dentro de un NS pueden surgir conflictos debido a la naturaleza dinámica del MAS y la concurrencia de acciones de los agentes. Por ejemplo, un agente puede estar obligado y prohibido a realizar el 636 978-81-904262-7-5 (RPS) c 2007 IFAAMAS muy mismo acción en una actividad. Dado que la regulación de un MAS implica que los agentes participantes deben ser conscientes de la validez de las acciones que tienen lugar dentro de él, dichos conflictos deben ser identificados y posiblemente resueltos si se necesita una reivindicación de validez para que un agente realice una acción o sea sancionado. Sin embargo, garantizar la libertad de \"conflicto\" de un NS en el momento del diseño es computacionalmente intratable. Demostramos esto formalizando la noción de \"conflicto\", proporcionando un mapeo de los NS en las redes de Petri de colores (CPNs) y tomando prestado los resultados teóricos bien conocidos del campo de los CPNs. Creemos que la detección y resolución de \"conflictos\" en línea es necesaria. Por lo tanto, presentamos un algoritmo tratable para la resolución de \"conflicto\". Este algoritmo es primordial para la promulgación distribuida de un NS. El documento se organiza de la siguiente manera. En la Sección 2 detallamos un escenario para servir de ejemplo a lo largo del artículo. A continuación, en la Sección 3 definimos formalmente el artefacto de la estructura normativa. Más adelante, en la sección 4 formalizamos la noción de \"conflicto\" para posteriormente analizar la complejidad de la detección de \"conflicto\" en términos de CPN en la sección 5. La sección 6 describe la gestión computacional de los NS describiendo su promulgación y presentando un algoritmo para la resolución de \"conflicto\". Por último, comentamos sobre la labor conexa, sacamos conclusiones e informamos sobre la labor futura en la sección 7. 2. SCENARIO Utilizamos un escenario de cadena de suministro en el que empresas e individuos se reúnen en un mercado en línea para realizar negocios. El procedimiento de transacción global puede organizarse como seis actividades distribuidas, representadas como nodos en el diagrama de la Figura 1. En ellas participan diferentes participantes cuyo comportamiento se coordina a través de protocolos. En este escenario, los agentes pueden desempeñar uno de los cuatro papeles: marExit Inscripción Pago Entrega Negociación Coordinación Modelo Contrato Figura 1: Estructura de actividad del contador de ketplace (acc), cliente, proveedor (supp) y gerentes de almacén (wm). Las flechas que conectan las actividades representan cómo los agentes pueden moverse de una actividad a otra. Después de registrarse en el mercado, los clientes y proveedores se reúnen en una actividad en la que negocian los términos de su transacción, es decir. los precios, los importes de las mercancías que deban entregarse, los plazos y otros detalles. En la actividad contractual, se establece el pedido y se prepara una factura. El cliente participará entonces en una actividad de pago, verificando su solvencia e instruyendo a su banco a transferir la cantidad correcta de dinero. Mientras tanto, el proveedor se encargará de la entrega de las mercancías (por ejemplo: a través de un administrador de almacén) en la actividad de entrega. Finalmente, los agentes pueden salir del mercado conforme a un protocolo de salida predeterminado. El contable del mercado participa en la mayoría de las actividades como proveedor confiable de herramientas de auditoría. En el resto del documento nos basaremos en este escenario para ilustrar la noción de estructura normativa e ilustrar nuestro enfoque de detección y resolución de \"conflictos\" en un entorno distribuido. 3. ESTRUCTURA NORMATIVA En los agentes MASs interactúan según protocolos que naturalmente se distribuyen. Abogamos por que las acciones en uno de esos protocolos puedan tener un efecto en la promulgación de otros protocolos. Algunas acciones pueden ser prohibidas u obligatorias, por ejemplo. Tomamos posiciones normativas para ser obligaciones, prohibiciones y permisos similares al trabajo descrito en [26]. La intención de agregar o eliminar una posición normativa que llamamos comando normativo. Los casos de posiciones normativas en un protocolo también pueden tener consecuencias para otros protocolos1. Para definir nuestro lenguaje de norma y especificar cómo se propagan las posiciones normativas, nos hemos inspirado en sistemas multicontexto [14]. Estos sistemas permiten estructurar el conocimiento en teorías formales distintas y definir las relaciones entre ellos. Las relaciones se expresan como reglas puente - la deducibilidad de las fórmulas en algunos contextos conduce a la deducción de otras fórmulas en otros contextos. Recientemente, estos sistemas se han utilizado con éxito para definir arquitecturas de agentes [11, 23]. La metáfora se traduce a nuestro trabajo actual de la siguiente manera: la expresión de las ilocuciones y/o la existencia de posiciones normativas en algunas escenas normativas conduce a la deducción de posiciones normativas en otras escenas normativas. Nos preocupa la propagación y distribución de posiciones normativas dentro de una red de escenas normativas distribuidas como consecuencia de las acciones de los agentes. Tomamos escenas normativas para ser conjuntos de posiciones normativas y expresiones que están asociadas con un protocolo de interacción subyacente correspondiente a una actividad. En esta sección, presentamos primero un lenguaje simple que capta estos aspectos e introduce formalmente las nociones de escena normativa, regla de transición normativa y estructura normativa. Damos la semántica prevista de estas reglas y mostramos cómo controlar un MAS a través de normas en un ejemplo. 3.1 Conceptos básicos Los componentes básicos de nuestro lenguaje son términos y fórmulas atómicas: Def. 1. Un término, denotado como t, es (i) cualquier constante expresada usando minúsculas (con o sin subíndices), por ejemplo. a, b0, c o ii) cualquier variable expresada utilizando mayúsculas (con o sin subíndices), por ejemplo. X, Y, Zb o iii) cualquier función f(t1,. . . , tn), donde f es un símbolo de función n-ary y t1,.., tn son términos. Algunos ejemplos de términos y funciones son Crédito, precio u oferta (biblia, 30), siendo respectivamente una variable, una constante y una función. Estaremos haciendo uso de identificadores en todo el papel, que son términos constantes y también necesitan la siguiente definición: Def. 2. Una fórmula atómica es cualquier construcción p(t1,. . . , tn), donde p es un símbolo predicado n-ary y t1,. . . , son términos. El conjunto de todas las fórmulas atómicas se denota como Δ. Nos centramos en una clase expresiva de MASs en la que la interacción se lleva a cabo por medio de actos de discurso ilocutionarios intercambiados entre los agentes participantes: Def. 3. I I I son las fórmulas atómicas terrestres que tienen la forma p(ag, r, ag, r, , t) donde p es un elemento de 1 Aquí, abstracto de protocolos y se refieren a ellos genéricamente como actividades. El Sexto Intl. Conjunto Conf. en Agentes Autónomos y Sistemas Multi-Agentes (AAMAS 07) 637 un conjunto de partículas ilocucionarias (por ejemplo: informar, petición, oferta); ag, ag son identificadores de agente; r, r son identificadores de rol; , un término de base arbitrario, es el contenido del mensaje, construido a partir de un lenguaje de contenido compartido; t  N es un sello de tiempo. El significado intuitivo de p(ag, r, ag, r, m, t) es que agente ag jugando rol r enviado mensaje m a agente ag jugando rol r en el momento t. Un ejemplo de una ilocución es informar(ag4, supp, ag3, cliente, offer(wire, 12), 10). A veces es útil referirse a las ilocuciones que no están totalmente fundamentadas, es decir, aquellas que pueden contener variables no instantiated (libres). En la descripción de un protocolo, por ejemplo, los valores precisos del mensaje intercambiado pueden quedar sin especificar. Durante la promulgación de los agentes del protocolo se producirán los valores reales que darán lugar a una ilocución del suelo. Así podemos definir esquemas de ilocución: Def. 4. Un esquema de ilocución ̄I es cualquier fórmula atómica p(ag, r, ag, r, ♥, t) en la que algunos de los términos pueden ser variables o pueden contener variables. 3.2 Definición formal de la noción de NS Primero definimos las escenas normativas de la siguiente manera: Def. 5. Una escena normativa es una tupla s = ids, Δs donde los ids son un identificador de escena y Δs es el conjunto de fórmulas atómicas Por ejemplo, una instantánea del estado de la escena normativa de entrega de nuestro escenario podría ser representada como: Δs = 8 < : utt(request(sean, client, kev, wm, receive(wire, 200), 20)), utt(accept(kev, wm, seen, customer, receive(wire, 200), 30)) 9 = ; Es decir, Tenga en cuenta que el estado de una escena normativa Δs evoluciona con el tiempo. Estas escenas normativas están conectadas entre sí a través de transiciones normativas que especifican cómo las expresiones y posiciones normativas en una escena afectan a otras escenas normativas. Como se mencionó anteriormente, las actividades no son independientes, ya que las ilocuciones pronunciadas en algunas de ellas pueden tener un efecto en otras. Las reglas normativas de transición definen las condiciones bajo las cuales se genera un comando normativo. Estas condiciones son declaraciones o posiciones normativas asociadas a un protocolo dado (denominadas por ejemplo. actividad : expresión ) que dan un comando normativo, es decir. la adición o supresión de otra posición normativa, posiblemente relacionada con una actividad diferente. Nuestras reglas de transición están así definidas: Def. 6. Una regla de transición normativa R es de la forma: R ::= V C V ::= ids : D  V, V D ::= N  utt( ̄I) N ::= per( ̄I)  prh( ̄I)  obli( ̄I) C ::= add(ids : N)  remove(ids : N) donde ̄I es un esquema permiso, prohibición u obligación), ids es un identificador de la actividad s y C es un comando normativo. Dotamos nuestro lenguaje con la semántica habitual de los lenguajes basados en reglas [19]. Las reglas trazan una estructura normativa existente a una nueva estructura normativa en la que sólo cambia el estado de las escenas normativas. En las definiciones siguientes nos basamos en el concepto estándar de sustitución [9]. Def. 7. Una transición normativa es un tupla b = idb, rb donde idb es un identificador y rb es una regla de transición normativa. Proponemos ampliar la noción de MAS, regulada por protocolos, con una capa adicional consistente en escenas normativas y transiciones normativas. Esta capa se representa como un gráfico bipartito que llamamos estructura normativa. Una estructura normativa relaciona escenas normativas y transiciones normativas especificando qué posiciones normativas deben generarse o eliminarse en qué escenas normativas. Def. 8. Una estructura normativa es un gráfico bipartito etiquetado NS = Nodos, bordes, Lin, Lout. Nodos es un conjunto de Sâ B donde S es un conjunto de escenas normativas y B es un conjunto de transiciones normativas. Edges es un conjunto Ain Aout donde Ain  S × B es un conjunto de arcos de entrada etiquetados con una fórmula atómica utilizando la función de etiquetado Lin : Ain → D; y Aout  B × S es un conjunto de arcos de salida etiquetados con una posición normativa utilizando la función de etiquetado Lout : Aout → N. Lo siguiente debe contener: 1. Cada fórmula atómica que aparece en el LHS de una regla rb debe ser de la forma (ids : D) donde s â € € € € TM € € € € € € € € € € € € € € € € € € € € € € € € € Ain tal que es = La fórmula atómica que aparece en el RHS de una regla rb debe ser de la forma add(ids : N) o remove(ids : N) donde s â € S y â € Aout tal que aout = (b, s) y Lout (aout ) = N. 3. Ain tal que a = (s, b) y b = idb, rb y Lin (a) = D entonces (ids:D) debe ocurrir en el LHS de rb. 4. Afuera de tal manera que a = (b, s) y b = idb, rb y Lout (a) = N luego add(ids : N) o remove(ids : N) deben ocurrir en el RHS de rb. Los dos primeros puntos aseguran que cada fórmula atómica en el LHS de una regla de transición normativa etiqueta un arco que entra en la transición normativa apropiada en la estructura normativa, y que la fórmula atómica en el RHS etiqueta el arco saliente correspondiente. Los puntos tres y cuatro aseguran que las etiquetas de todos los arcos entrantes se utilicen en el LHS de la regla de transición normativa en la que entran estos arcos, y que las etiquetas de todos los arcos salientes se utilicen en el RHS de la regla de transición normativa que estos arcos dejan. 3.3 Semántica Destinada La semántica formal se definirá mediante un mapeo a Redes Petri Coloradas en la Sección 5.1. Aquí comenzamos a definir la semántica prevista de las reglas normativas de transición describiendo cómo una regla cambia un escenario normativo de una estructura normativa existente que produce una nueva estructura normativa. Cada regla se activa una vez para cada sustitución que unifica el lado izquierdo V de la regla con el estado de las escenas normativas correspondientes. Una fórmula atómica (es decir, una declaración o una posición normativa) si es unificable con una declaración o posición normativa que pertenece al estado del escenario normativo correspondiente. Cada vez que se activa una regla, se lleva a cabo el comando normativo especificado a la derecha de esa regla, con la intención de añadir o eliminar una posición normativa del estado de la escena normativa correspondiente. Sin embargo, la adición no es incondicional, ya que pueden surgir conflictos. Este tema se tratará en las secciones 4 y 6.1. 638 La Sexta Intl. Conjunto Conf. en Agentes Autónomos y Sistemas Multi-Agentes (AAMAS 07) 3.4 Ejemplo En nuestro ejemplo de ejecución tenemos la siguiente regla de transición normativa ejemplar: „ pago : obli(inform(X, cliente, Y, acc, pay(Z, P, Q, T)), pago : utt(inform(X, cliente, Y, acc, pay(Z, P, Q), T)) « entrega : a La norma es una obligación del agente Y (esta vez asumiendo el papel de gerente de almacén wm) de enviar un mensaje al cliente X que el artículo Z ha sido entregado. En la Figura 2 se muestra una representación diagnóstica de cómo se relacionan las actividades y una estructura normativa: Pago Entrega Contrato Nivel Normativo Salida Registro Pago Entrega Negociación Nivel de Coordinación Contrato nt Figura 2: Actividades y Estructura Normativa A medida que se pronuncian las ilocuciones durante las actividades, surgen posiciones normativas. Las preferencias y las posiciones normativas se combinan en normas de transición, lo que provoca el flujo de posiciones normativas entre las distintas situaciones normativas. La conexión entre los dos niveles se describe en la sección 6.2. 4. DEFINICIÓN DE CONFLICTOS Los términos \"conflicto\" deontico e inconsistencia deontica se han utilizado indistintamente en la literatura. Sin embargo, en este trabajo adoptamos el punto de vista de [7] en el que los autores sugieren que surge una inconsistencia deontica cuando una acción es simultáneamente permitida y prohibida - ya que un permiso no puede ser actuado en consecuencia, no se produce un \"conflicto\" real. Sin embargo, las situaciones en que una acción está simultáneamente obligada y prohibida son conflictos deonticos, ya que tanto las obligaciones como las prohibiciones influyen en los comportamientos en conflicto. El contenido de las posiciones normativas en este trabajo son ilocuciones. Por lo tanto, surge un \"conflicto\" normativo cuando una ilocución está simultáneamente obligada y prohibida. Proponemos utilizar la noción estándar de unificación [9] para detectar cuándo se superponen una prohibición y un permiso. Por ejemplo, una obligación obli(informar(A1, R1, A2, R2, p(c, X, T)) y una prohibición prh(informar(a1, r1, a2, r2, p(Y, d), T)) se encuentran en \"conflicto\" ya que se unifican en la sección  = {A1/a1, R1/r1, A2/a2, R2/r2, Y Capturamos formalmente esta noción: Def. 9. A (deontico) \"conflicto\" surge entre dos posiciones normativas N y N bajo una sustitución Es decir, una prohibición y una obligación están en \"conflicto\" si, y sólo si, sus ilocuciones se unifican bajo La sustitución, llamada aquí el \"conflicto\", unifica los agentes, roles y fórmulas atómicas. Asumimos que unificar es una implementación adecuada de un algoritmo de unificación que i) termina siempre (posiblemente fallando, si no se puede encontrar un unificador); ii) es correcto; y iii) tiene complejidad computacional lineal. Las incoherencias causadas por la misma ilocución, que se permiten y prohíben simultáneamente, pueden formalizarse de manera similar. En este trabajo nos centramos en los conflictos de prohibición/obligación, pero la maquinaria computacional introducida en la Sección 6.1 también puede ser utilizada para detectar inconsistencias de prohibición/permiso, si sustituimos la modalidad obli por per. 5. FORMALIZACIÓN DEL CONFLICTO-FREEDOM En esta sección presentamos algunos conocimientos de fondo sobre CPN asumiendo una comprensión básica de las redes Petri ordinarias. Para detalles técnicos, remitimos al lector a [16]. A continuación, mapeamos los NS a los CPN y analizamos sus propiedades. Los CPN combinan la fuerza de las redes Petri con la fuerza de los lenguajes de programación funcionales. Por un lado, las redes Petri proporcionan los primitivos para la descripción de la sincronización de los procesos concurrentes. Como se observa en [16], los CPN tienen una semántica que se basa en la verdadera concurrencia, en lugar de entrelazarse. En nuestra opinión, es más fácil trabajar con una semántica de verdadera moneda porque es la forma en que prevemos la conexión entre el nivel de coordinación y el nivel normativo de un sistema multi-agente. Por otra parte, los lenguajes de programación funcionales utilizados por los CPN proporcionan los primitivos para la definición de los tipos de datos y la manipulación de sus valores de datos. Por lo tanto, podemos traducir fácilmente expresiones de una estructura normativa. Por último, pero no por ello menos importante, los CPN tienen una semántica bien definida que define inequívocamente el comportamiento de cada CPN. Además, los CPN tienen un gran número de métodos e instrumentos de análisis formales mediante los cuales se pueden demostrar las propiedades de los CPN. En resumen, los CPN nos proporcionan todas las características necesarias para razonar formalmente sobre las estructuras normativas, dado que se proporciona una cartografía adecuada. De acuerdo con las redes Petri, los estados de un CPN están representados por medio de lugares. Pero a diferencia de Petri Nets, cada lugar tiene un tipo de datos asociado determinando el tipo de datos que el lugar puede contener. Un estado de un CPN se llama marca. Consiste en un número de fichas colocadas en los lugares individuales. Cada token lleva un valor de datos que tiene el tipo del lugar correspondiente. En general, un lugar puede contener dos o más tokens con el mismo valor de datos. Por lo tanto, una marca de un CPN es una función que mapea cada lugar en un multi-set2 de tokens del tipo correcto. Uno a menudo se refiere a los valores token como colores token y uno también se refiere a los tipos de datos como conjuntos de colores. Los tipos de un CPN pueden ser arbitrariamente complejos. Las acciones en un PCN están representadas mediante transiciones. Un arco entrante en una transición desde un lugar indica que la transición puede eliminar tokens del lugar correspondiente mientras que un arco saliente indica que la transición puede añadir tokens. El número exacto de tokens y sus valores de datos son determinados por las expresiones de arco, que se codifican utilizando el lenguaje de programación elegido para el CPN. Una transición está habilitada en un CPN si y sólo si todos los 2 A multi-set (o bolsa) es una extensión a la noción de conjunto, permitiendo la posibilidad de múltiples apariencias del mismo elemento. El Sexto Intl. Conjunto Conf. en Agentes Autónomos y Sistemas Multi-Agentes (AAMAS 07) 639 variables en las expresiones de sus arcos entrantes se unen a algunos valores (cada una de estas fijaciones se refiere como un elemento vinculante). Si es así, la transición puede ocurrir eliminando tokens de sus lugares de entrada y añadiendo tokens a sus lugares de salida. Además de las expresiones de arco, es posible conectar una expresión booleana de guardia (con variables) a cada transición. Juntando todos los elementos de arriba obtenemos una definición formal de CPN que se empleará más adelante para propósitos de mapeo. Def. 10. Un CPN es un conjunto finito de tipos no vacíos, también llamados conjuntos de colores; ii) P es un conjunto finito de lugares; iii) T es un conjunto finito de transiciones; iv) A es un conjunto finito de arcos; v) N es una función de nodo definida de A a P × T • T × P; vi) C es una función de color de P a فارسى; vii) G es una De acuerdo con las redes Petri ordinarias, el comportamiento concurrente de un CPN se basa en la noción de paso. Formalmente, un paso es un no vacío y finito multi-set sobre el conjunto de todos los elementos de unión. Deje que el paso S se active en una marca M. Entonces, S puede ocurrir, cambiando la marca M a M. Además, decimos que el marcado M es directamente accesible desde el marcado M por la ocurrencia del paso S, y lo denotamos por M[S > M. Una secuencia de ocurrencia finita es una secuencia finita de pasos y marcas: M1[S1 > M2. . . Mn[Sn > Mn+1 de tal manera que n+N y Mi[Si > Mi+1 . . , n}. El conjunto de todas las marcas posibles alcanzables para una red neta de una marca M se llama su conjunto de alcance, y se denota como R(Net, M). 5.1 Mapeo a redes de Petri de colores Nuestra estructura normativa es un gráfico bipartito etiquetado. Lo mismo puede decirse de una red Petri coloreada. Estamos presentando un mapeo f de uno a otro, con el fin de proporcionar semántica para la estructura normativa y probar las propiedades al respecto mediante el uso de resultados teóricos bien conocidos de trabajo en CPNs. El mapeo f hace uso de correspondencias entre escenas normativas y lugares CPN, transiciones normativas y transiciones CPN y finalmente, entre etiquetas de arco y expresiones de arco CPN. S → P B → T Lin Lout → E El conjunto de tipos es el conjunto singleton que contiene el color NP (es decir. * = {NP}). Este tipo complejo está estructurado de la siguiente manera (utilizamos CPN-ML [4] sintaxis): color NPT = con Obl  Per  Prh  NoMod color IP = con infor  declaramos  offer color UTT = record illp : IP ag1, role1, ag2, role2 : string content : string time : int color NP = Los arcos son trazados casi directamente. A es un conjunto finito de arcos y N es una función de nodo, de tal manera que Aa Aa Ain Aout. N(a) = a. La función de inicialización I se define como I(p) = Δs ( Por último, la función de color C asigna el color NP a cada lugar: C(p) = NP (­p ­P). No estamos haciendo uso de la función de guardia G. En el trabajo futuro, esta función se puede utilizar para modelar restricciones cuando extendemos la expresividad de nuestro lenguaje de norma. 5.2 Propiedades de las estructuras normativas Una vez definido el mapeo desde las estructuras normativas hasta las redes Petri coloreadas, ahora analizamos las propiedades de los CPN que nos ayudan a entender la complejidad de la detección de \"conflicto\". Una pregunta que nos gustaría responder es, si en un momento dado, una determinada estructura normativa está libre de \"conflicto\". Tal instantánea de una estructura normativa corresponde a una marca en el CPN cartografiado. Def. 11. Dada una marca Mi, esta marca es libre de conflicto si p  P. np1, np2  Mi(p) tal que np1.mode = Obl y np2.mode = Prh y np1.illoc y np2.illoc unificar bajo una sustitución válida. Otra pregunta interesante sería, si un \"conflicto\" ocurrirá a partir de tal instantánea del sistema mediante la propagación de las posiciones normativas. Para responder a esta pregunta, primero traducimos la instantánea de la estructura normativa al CPN correspondiente y luego ejecutamos la secuencia de ocurrencia finita de marcas y pasos, verificando la libertad de \"conflicto\" de cada marca a medida que avanzamos. Def. 12. Dada una marca Mi, una secuencia de ocurrencia finita Si, Si+1,..., Sn se llama \"conflicto\"-libre, si y sólo si Mi[Si > Mi+1. . . Mn[Sn > Mn+1 y Mk están libres de \"conflicto\" para todos los k de modo que i ≤ k ≤ n + 1. Sin embargo, la cuestión principal que nos gustaría investigar, es si una estructura normativa dada es o no resistente a los conflictos, es decir, si los agentes que promulgan el MAS son capaces de provocar conflictos a través de sus acciones. Tan pronto como se incluye la posibilidad de acciones (o declaraciones) de agentes autónomos, se pierde el determinismo. Después de haber mapeado la estructura normativa a un CPN, ahora añadimos modelos de CPN de las interacciones de agentes. Cada forma de interacción con el agente (es decir, cada actividad) se puede modelar utilizando CPN en la línea de Cost et al. [5]. Estos CPN no determinantes alimentan tokens en el CPN que modela la estructura normativa. Esto lleva a la introducción de no-determinismo en el PCN combinado. La mitad inferior de la figura 3 muestra parte de un modelo CPN de un protocolo de agente donde el arco denotado con 1 representa alguna pronunciación de una ilocución por un agente. La transición de destino de este arco, no sólo mueve un token al siguiente estado de este CPN, sino que también coloca un token en el lugar correspondiente a la escena normativa apropiada en el modelo del CPN de la estructura normativa (a través del arco 2). La transición 3 finalmente podría propagar ese símbolo en forma de una obligación, por ejemplo. Así, a partir de una marca dada, muchas secuencias de ocurrencia diferentes son posibles dependiendo de las acciones de los agentes. Utilizamos el conjunto de alcance R para definir una situación en la que los agentes no pueden causar conflictos. 640 La Sexta Intl. Conjunto Conf. sobre Agentes Autónomos y Sistemas Multi-Agentes (AAMAS 07) Figura 3: Construcción del CPN combinado Def. 13. Dado un N neto, una marca M es resistente al \"conflicto\" si y sólo si todas las marcas en R(N,M) están libres de \"conflicto\". Comprobar la libertad de \"conflicto\" de una marca se puede hacer en tiempo polinomio mediante la verificación de todos los lugares del CPN en busca de fichas en conflicto. La libertad de conflicto de una secuencia de ocurrencia en el CPN que representa la estructura normativa también se puede hacer en tiempo polinomio ya que esta secuencia es determinista dada una instantánea. El hecho de que se diseñe o no una estructura normativa corresponde con seguridad a la comprobación de la resistencia \"conflicto\" de la marca M0 inicial. Ahora, verificar la resistencia al \"conflicto\" de una marca se convierte en una tarea muy difícil. Corresponde al problema de accesibilidad en un CPN: ¿se puede alcanzar un estado o se puede lograr una marca, que contenga un \"conflicto\"? Este problema de alcanzabilidad es conocido por ser NP-completo para las redes Petri ordinarias [22] y como las RCP son funcionalmente idénticas, no podemos esperar verificar la resistencia \"conflicto\" de una estructura normativa fuera de línea en una cantidad razonable de tiempo. Por lo tanto, se necesitan mecanismos de distribución y tiempo de ejecución para garantizar que una estructura normativa mantenga la coherencia. Presentamos uno de esos mecanismos en la sección siguiente. 6. GESTIÓN DE ESTRUCTURAS NORMATIVAS Una vez detectado un \"conflicto\" (como se define en la Sección 4), proponemos emplear al unificador para resolver el \"conflicto\". En nuestro ejemplo, si las variables en prh(inform(a1, r1, a2, r2, p(Y, d), T)) no obtienen los valores especificados en la sustitución  entonces no habrá un \"conflicto\". Sin embargo, en lugar de computar el conjunto de complementos de una sustitución (que puede ser un conjunto infinito) proponemos anotar la prohibición con el propio unificador y utilizarla para determinar cuáles son las variables de esa prohibición no puede ser en futuras unificaciones para evitar un \"conflicto\". Por lo tanto denotamos prohibiciones anotadas como prh( ̄I) . . Es un conjunto de unificadores. Las normas anotadas3 se interpretan como constructos deonticos con influencias restringidas, es decir, su efecto (sobre agentes, roles e ilocuciones) ha sido limitado por el conjunto de unificadores. Una prohibición puede estar en \"conflicto\" con varias obligaciones en una escena normativa dada s = id, Δ y tenemos que registrar (y posiblemente evitar) todos estos conflictos. Definimos a continuación un algoritmo que garantiza que una posición normativa se añada a una escena normativa de tal manera que no cause ningún conflicto. 3 Aunque proponemos limitar las prohibiciones, el mismo mecanismo puede utilizarse para definir la reducción de obligaciones en su lugar. Estas diferentes políticas dependen de la semántica deontica prevista y de los requisitos de los sistemas abordados. Por ejemplo, algunos MAS pueden exigir que sus agentes no actúen en presencia de conflictos, es decir, que se reduzca la obligación. 6.1 Resolución de conflictos Proponemos una forma de resolver los conflictos normativos mediante la unificación. Detectamos la superposición de las influencias de las normas, es decir. cómo afectan al comportamiento de los agentes afectados, y reducimos la influencia de la posición normativa, mediante el uso adecuado de las anotaciones al comprobar si la norma se aplica a las ilocuciones. El algoritmo mostrado en la Figura 4 muestra cómo mantenemos un conjunto de normas libres de \"conflicto\". Añade una norma dada N a un estado normativo existente, libre de conflictos Δ, obteniendo un nuevo estado normativo resultante Δ que es libre de \"conflicto\", es decir, sus prohibiciones están anotadas con un conjunto de conjuntos de \"conflicto\" que indican qué fijaciones para variables deben evitarse para que los conflictos no tengan lugar. algoritmo addNorm(N, Δ) comienza 1 marca de tiempo(N) 2 caso N de 3 per( ̄I): Δ := Δ  {N} 4 prh(I): si N  Δ s.t. \"conflicto\" (N, N, Las líneas 4-5 abordan el caso cuando intentamos agregar una prohibición de base a un estado normativo: si entra en conflicto con cualquier obligación, entonces se descarta; de lo contrario se añade al estado normativo. En las líneas 6 a 12 se describe la situación en que la posición normativa que debe añadirse es una prohibición no básica. En este caso, el algoritmo inicializa un conjunto vacío y bucles (línea 9-10) a través de las normas N en el antiguo estado normativo Δ. Después de encontrar uno que entra en conflicto con N, el algoritmo actualiza el valor de la nueva configuración de \"conflicto\" (línea 10). Mediante el bucle a través de Δ, somos capaces de comprobar cualquier conflicto entre la nueva prohibición y las obligaciones existentes, construyendo adecuadamente la anotación  que se utilizará al añadir N a Δ en la línea 11. En las líneas 13 a 27 se describe cómo se ajusta una nueva obligación a un estado normativo existente. Hacemos uso de dos conjuntos inicialmente vacíos, temporales, Δ1, Δ2. El algoritmo pasa a través de Δ (líneas 16-25) recogiendo las prohibiciones anotadas N. Hay, sin embargo, dos casos a tratar: el de cuando un motivo La Sexta Intl. Conjunto Conf. sobre los agentes autónomos y los sistemas multiagentes (AAMAS 07) se encuentra la prohibición 641 (línea 17), y su excepción, que abarca las prohibiciones no terrestres (línea 20). En ambos casos, la antigua prohibición se almacena en Δ1 (líneas 18 y 23) para ser posteriormente retirada de Δ (línea 26). Sin embargo, en el caso de una prohibición no terrestre, el algoritmo actualiza su anotación de conjuntos de \"conflicto\" (línea 24). El bucle garantiza que se lleve a cabo una búsqueda exhaustiva (lineal) a través de un estado normativo, comprobando si la nueva obligación está en \"conflicto\" con cualquier prohibición existente, posiblemente actualizando las anotaciones de estas prohibiciones en conflicto. En la línea 26 el algoritmo construye la nueva actualización Δ eliminando las antiguas prohibiciones almacenadas en Δ1 y añadiendo las prohibiciones actualizadas almacenadas en Δ2 (si las hay), así como la nueva obligación N. Nuestro algoritmo propuesto es correcto en que, para una posición normativa dada N y un estado normativo Δ, proporciona un nuevo estado normativo Δ en el que todas las prohibiciones tienen anotaciones que registran cómo se unifican con las obligaciones existentes. Las anotaciones pueden estar vacías, sin embargo: este es el caso cuando tenemos una prohibición de base o una prohibición que no unifica/\"conflige\" con ninguna obligación. Los permisos no afectan a nuestro algoritmo y se tratan adecuadamente (línea 3). Cualquier intento de insertar una prohibición de base que entre en conflicto, produce el mismo estado normativo (línea 4). Cuando se añade una nueva obligación, el algoritmo garantiza que se tienen en cuenta todas las prohibiciones (líneas 14 a 27), lo que conduce a la eliminación de las prohibiciones sobre el terreno en conflicto o a la actualización de las anotaciones de las prohibiciones no sobre el terreno. El algoritmo siempre termina: los bucles están sobre un conjunto finito Δ y las comprobaciones y operaciones de \"conflicto\" siempre terminan. La complejidad del algoritmo es lineal: el conjunto Δ sólo se examina una vez para cada caso posible de norma que se añade. Al gestionar los estados normativos también es posible que necesitemos eliminar posiciones normativas. Esto es sencillo: los permisos se pueden retirar sin ningún problema; las prohibiciones anotadas también se pueden eliminar sin más consideraciones; sin embargo, las obligaciones requieren algunas tareas domésticas. Cuando se va a eliminar una obligación, debemos verificarla contra todas las prohibiciones anotadas a fin de actualizar sus anotaciones. Aplicamos el \"conflicto\" comprobar y obtener un unificador, a continuación, eliminar este unificador de la anotación prohibiciones. Invocamos el algoritmo de eliminación como removeNorm(N, Δ): devuelve un nuevo estado normativo Δ en el que N ha sido eliminado, con posibles alteraciones a otras posiciones normativas como se explicó. 6.2 Promulgación de una estructura normativa La promulgación de una estructura normativa equivale a la ejecución paralela y distribuida de escenas normativas y transiciones normativas. A título ilustrativo, describiremos a continuación la interacción entre las situaciones normativas de pago y entrega y la transición normativa que los vincula en la mitad superior de la figura 2. Con este objetivo, considere, por ejemplo, que obl(inform(jules, cliente, rod, acc, pay(copper, 400, 350), T) Δpago y que Δentrega tiene prh(inform(rod,wm, jules, cliente, entregado(Z, Q), T)). Tales estados indican que el cliente Jules está obligado a pagar £400 por 350kg de cobre al contador Rod de acuerdo con la escena normativa de pago, mientras que Rod, asumiendo el papel de gerente de almacén esta vez, está prohibido entregar cualquier cosa al cliente Jules de acuerdo con la escena normativa de entrega. Para cada escena normativa, el proceso de promulgación es el siguiente. En primer lugar, procesa su cola de mensajes entrantes que contiene tres tipos de mensajes: declaraciones de la actividad a la que está vinculada; y comandos normativos para agregar o eliminar posiciones normativas. Por ejemplo, en nuestro ejemplo, la escena normativa de pago recoge la ilocución I = utt((inform(jules, cliente, varilla, acc, pay(cobre, 400, 350), 35)) para el cliente Jules pendiente de pago por cobre (a través de la flecha A en la figura 2). Las Uterancias son timestamped y subsecuentemente agregadas al estado normativo. Tendríamos Δpayment = Δpayment {I}, en nuestro ejemplo. Al recibir órdenes normativas para agregar o eliminar una posición normativa, la escena normativa invoca el algoritmo de adición o eliminación correspondiente descrito en la Sección 6.1. En segundo lugar, la escena normativa reconoce su cambio de estado al enviar un mensaje desencadenante a cada transición normativa saliente a la que está conectado. En nuestro ejemplo, el escenario normativo de pagos estaría señalando su cambio de estado a la transición normativa nt. Para las transiciones normativas, el proceso funciona de manera diferente. Debido a que cada transición normativa controla el funcionamiento de una sola regla, al recibir un mensaje de activación, encuesta cada escena normativa entrante para sustituciones de los esquemas de ilocución pertinentes en el LHS de su regla. En nuestro ejemplo, nt (responsable de la regla descrita en la Sección 3.4), encuestaría el escenario normativo de pago (vía flecha B) para sustituciones. Al recibir respuestas de ellos (en forma de conjuntos de sustituciones junto con marcas de tiempo), tiene que unificar las sustituciones de cada una de estas escenas normativas. Para cada unificación que encuentra, la regla se activa, y por lo tanto el comando normativo correspondiente se envía a lo largo de la escena normativa de salida. La transición normativa entonces mantiene un seguimiento del mensaje de disparo que envió y de las marcas de tiempo de las posiciones normativas que desencadenó el disparo. Esto se hace para asegurar que las mismas posiciones normativas en el LHS de una regla sólo desencadenen su disparo una vez. En nuestro ejemplo, nt estaría recibiendo  = {X/jules, Y/rod, Z/copper, Q/350} de la escena normativa de pagos. Dado que las substiciones en unifican con la regla nts, la regla es disparada, y el comando normativo add(delivery : obli(rod, wm, jules, client, delivery(copper, 350), T)) es enviado a lo largo de la escena normativa de entrega para obligar a Rod a entregar al cliente Jules 350kg de cobre. Después de eso, la escena normativa de entrega invocaría el algoritmo addNorm de la figura 4 con Δdelivery y N = obli(rod, wm, jules, client, delivered(copper, 350)) como argumentos. 7. TRABAJOS Y CONCLUSIONES RELACIONADOS Nuestras contribuciones en este documento son triples. En primer lugar, introducimos un enfoque para la gestión y el razonamiento de las normas de manera distribuida. Hasta donde sabemos, hay poco trabajo publicado en esta dirección. En [8, 21] se presentan dos idiomas para la aplicación distribuida de las normas en el MAS. Sin embargo, en ambos trabajos, cada agente tiene una interfaz de mensaje local que envía mensajes legales de acuerdo con un conjunto de normas. Dado que estas interfaces son locales para cada agente, las normas sólo pueden expresarse en términos de acciones de ese agente. Se trata de una grave desventaja, por ejemplo. cuando uno necesita activar una obligación para con un agente debido a un cierto mensaje de otro. La segunda contribución es la propuesta de una estructura normativa. La noción es fructífera porque permite la separación de las cuestiones normativas y de procedimiento. La estructura normativa que proponemos evidencia la similitud entre la propagación de posiciones normativas y la propagación 642 La Sexta Intl. Conjunto Conf. sobre Agentes Autónomos y Sistemas Multi-Agentes (AAMAS 07) de tokens en Redes Petri Coloradas. Esa similitud sugiere fácilmente un mapeo entre los dos, y da lugar a un tratamiento analítico conveniente de la estructura normativa, en general, y la complejidad de la detección de \"conflicto\", en particular. La idea de modelar interacciones (en forma de conversaciones) a través de Petri Nets se ha investigado en [18], donde el medio de interacción y los agentes individuales se modelan como subredes de CPN que posteriormente se combinan para su análisis. En [5], las conversaciones se diseñan y analizan por primera vez a nivel de los CPN y posteriormente se traducen en protocolos. Lin et al. [20] mapear esquemas de conversación a CPNs. Hasta donde sabemos, el uso de esta representación en apoyo de la detección de \"conflicto\" en el MAS regulado no ha sido reportado en otros lugares. Por último, presentamos un mecanismo distribuido para resolver los conflictos normativos. Sartor [25] trata los conflictos normativos desde el punto de vista de la teoría jurídica y sugiere una forma de ordenar las normas involucradas. Su idea se implementa en [12], pero requiere un recurso central para el mantenimiento de normas. El enfoque para la detección y resolución de \"conflicto\" es una adaptación y extensión del trabajo sobre gráficos de instanciación reportados en [17] y un algoritmo relacionado en [27]. El algoritmo presentado en el presente trabajo puede ser utilizado para administrar estados normativos distribuidos: escenas normativas que suceden en paralelo tienen un estado normativo asociado Δ al que el algoritmo se aplica de forma independiente cada vez que se introduce una nueva norma. Estas tres contribuciones que presentamos en este documento abren muchas posibilidades para el trabajo futuro. Cabe mencionar en primer lugar, que como estrategia amplia estamos trabajando en una generalización de la noción de estructura normativa para hacerla funcionar con diferentes modelos de coordinación, con un contenido deontico más rico y además de diferentes realizaciones computacionales de MAS regulado. Como primer paso en esta dirección estamos aprovechando la disociación entre los protocolos de interacción y la orientación normativa declarativa que la estructura normativa pone a disposición, para proporcionar una capa normativa para las instituciones electrónicas (como se define en [1]). Esperamos que este acoplamiento dote a las instituciones electrónicas de un entorno normativo más flexible y más expresivo. Además, queremos extender nuestro modelo a través de varias direcciones: (1) manejar la negación y las limitaciones como parte del lenguaje de la norma, y en particular la noción de tiempo; (2) dar cabida a múltiples autoridades jerárquicas de normas basadas en roles, en la línea de Cholvy y Cuppens [3] y relaciones de poder como sugiere Carabelea et al. [2]; (3) para captar en el algoritmo de resolución de \"conflicto\" diferentes semánticas relacionadas con las nociones deonticas apoyando diferentes axiomaciones (por ejemplo, fuerza relativa de la prohibición frente a la obligación, nociones deonticas por defecto, inconsistencias deonticas). En el lado teórico, pretendemos utilizar técnicas de análisis de CPN para caracterizar clases de CPN (por ejemplo, acíclicas, simétricas, etc.) correspondientes a familias de Estructuras Normativas susceptibles de detección de \"conflicto\" offline traqueable. La combinación de estas técnicas junto con nuestros mecanismos de resolución de \"conflicto\" en línea pretende dotar a los diseñadores del MAS de la capacidad de incorporar normas en sus sistemas de una manera basada en principios. 8. REFERENCIAS [1] J. L. Arcos, M. Esteva, P. Noriega, J. A. Rodr guez, y C. Sierra. Ingeniería de entornos abiertos con instituciones electrónicas. Journal on Engineering Applications of Artificial Intelligence, 18(2):191-204, 2005. [2] C. Carabelea, O. Boissier, y C. Castelfranchi. Usar el poder social para permitir a los agentes razonar sobre ser parte de un grupo. En el 5o Internat. Taller, EEAT 2004, págs. 166 a 177, 2004. [3] L. Cholvy y F. Cuppens. Solución de conflictos normativos mediante la fusión de funciones. En la Quinta Conferencia Internacional sobre Inteligencia Artificial y Derecho, Washington, Estados Unidos, 1995. [4] S. Christensen y T. B. Haagh. Diseño CPN - vista general de la sintaxis CPN ML. Informe técnico, Universidad de Aarhus, 1996. [5] R. S. Cost, Y. Chen, T. W. Finin, Y. Labrou e Y. Peng. Usando petri redes de colores para modelar la conversación. In Issues in Agent Communication, págs. 178 a 192, Londres, Reino Unido, 2000. [6] F. Dignum. Agentes autónomos con normas. Inteligencia Artificial y Ley, 7(1):69-79, 1999. [7] A. Elhag, J. Breuker y P. Brouwer. Sobre el análisis formal de los conflictos normativos. Información & Comunicaciones. Techn. Ley, 9(3):207-217, Oct. 2000. [8] M. Esteva, W. Vasconcelos, C. Sierra, y J. A. Rodr guez-Aguilar. Consistencia normativa en las instituciones electrónicas. volumen 3171 (LNAI), páginas 494-505. Springer-Verlag, 2004. [9] M. Fitting. Prueba de la lógica de primer orden y del teorema automatizado. Springer-Verlag, Nueva York, Estados Unidos, 1990. [10] N. Fornara, F. Vigan`o y M. Colombetti. Un enfoque impulsado por eventos a las normas en las instituciones artificiales. En el taller AAMAS05: Agentes, normas e instituciones para sistemas multiagente regulados (ANI@REM), Utrecht, 2005. [11] D. Gaertner, P. Noriega y C. Sierra. Ampliación de la arquitectura BDI con compromisos. En Actas del IX Congreso Internacional de la Asociación Catalana de Inteligencia Artificial, 2006. [12] A. Garc a-Camino, P. Noriega, y J.-A. Rodr guez-Aguilar. Un algoritmo para la resolución de conflictos en actividades reguladas compuestas. En el 7o taller Int.Workshop - ESAW 06, 2006. [13] A. Garc a-Camino, J.-A. Rodr guez-Aguilar, C. Sierra y W. Vasconcelos. Una arquitectura distribuida para las Sociedades de Agentes de Normas. En DALT III, volumen 3904 (LNAI), páginas 89 a 105. Springer, 2006. [14] F. Giunchiglia y L. Serafini. Lógicas jerárquicas multilenguaje o: Cómo podemos prescindir de lógicas modales. Inteligencia Artificial, 65(1):29-70, 1994. [15] J. Habermas. La Teoría de la Comunicación Acción, Volumen Uno, La Razón y la Racionalización de la Sociedad. Beacon Press, 1984. [16] K. Jensen. Redes Petri coloreadas: Conceptos básicos, métodos de análisis y usos prácticos (Volumen 1). Springer, 1997. [17] M. Kollingbaum y T. Norman. Estrategias para resolver \"conflicto\" de normas en el razonamiento práctico. En el Taller de Coordinación de la CEPA en Sociedades de Agentes Emergentes 2004, 2004. [18] J.-L. Koning, G. Francois e Y. Demazeau. Formalización y prevalidación para protocolos de interacción en sistemas multiagente. En ECAI, págs. 298 a 307, 1998. [19] B. Kramer y J. Mylopoulos. Representación del conocimiento. En S. C. Shapiro, editor, Enciclopedia de Inteligencia Artificial, volumen 1, páginas 743-759. John Wiley & Sons, 1992. [20] F. Lin, D. H. Norrie, W. Shen y R. Kremer. Un enfoque basado en esquemas para especificar las políticas de conversación. En Temas de Comunicación de Agentes, págs. 193-204, 2000. [21] N. Minsky. Interacción gobernada por la ley (LGI): Un mecanismo de coordinación y control distribuido (Una introducción y un manual de referencia). Informe técnico, Universidad Rutgers, 2005. [22] T. Murata. Redes Petri: Propiedades, análisis y aplicaciones. Actas del IEEE, 77(4):541-580, 1989. [23] S. Parsons, C. Sierra y N. Jennings. Agentes que razonan y negocian discutiendo. Diario de Lógica y Computación, 8(3):261-292, 1998. [24] A. Ricci y M. Viroli. Artefactos de Coordinación: Una Abstracción Unificante para la Coordinación de Ingeniería Mediada por el Medio Ambiente en MAS. Informatica, 29:433-443, 2005. [25] G. Sartor. Conflictos normativos en el razonamiento jurídico. Inteligencia Artificial y Ley, 1(2-3):209-235, junio de 1992. [26] M. Sergot. Una teoría computacional de posiciones normativas. ACM Trans. Comput. Lógica, 2(4):581-622, 2001. [27] W. W. Vasconcelos, M. Kollingbaum, y T. Norman. Resolver conflictos e incoherencias en las organizaciones virtuales reguladas por normas. En Actas de AAMAS 07, Hawaii, EE.UU., 2007. IFAAMAS. [28] G. H. von Wright. Norma y acción: Una investigación lógica. Routledge y Kegan Paul, Londres, 1963. [29] M. Wooldridge. Una introducción a los sistemas multiagente. John Wiley & Sons, Chichester, Reino Unido, febrero de 2002. El Sexto Intl. Conjunto Conf. sobre agentes autónomos y sistemas de agentes múltiples (AAMAS 07) 643 ",
            "error": [
                "conflicto",
                "conflicto",
                "conflicto",
                "conflicto",
                "conflicto",
                "conflictos",
                "conflicto",
                "conflicto",
                "conflicto",
                "conflicto",
                "conflictos",
                "conflicto",
                "conflicto",
                "conflicto",
                "conflicto",
                "conflicto",
                "conflicto",
                "conflicto",
                "conflicto",
                "conflicto",
                "conflicto",
                "conflicto",
                "conflicto",
                "conflicto",
                "conflicto",
                "conflicto",
                "conflicto",
                "conflicto",
                "conflicto",
                "conflicto",
                "conflicto",
                "conflicto",
                "conflicto",
                "conflicto",
                "conflicto",
                "conflicto",
                "conflicto",
                "conflicto",
                "conflicto",
                "conflicto",
                "conflicto",
                "conflicto",
                "conflicto",
                "conflige",
                "conflicto",
                "conflicto",
                "conflicto",
                "conflicto",
                "conflicto",
                "conflicto",
                "conflicto",
                "conflicto",
                "conflicto"
            ]
        },
        "regulate multi-agent system": {
            "translated_key": [],
            "translated_annotated_text": "Gestión de Normas Distribuidas en Sistemas Regulados Multi-Agente ∗ Dorian Gaertner Dept. de Computación, Imperial College London, Londres SW7 2AZ, Reino Unido dg00@doc.ic.ac.uk Andrés García-Camino, Pablo Noriega, J.-A. Rodriguez-Aguilar IIIA-CSIC, 08193 Bellaterra, España {andres,pablo,jarážiya.csic.es Wamberto Vasconcelos Dept. de Ciencias de la Computación, Universidad de Aberdeen, Aberdeen AB24 3UE, Reino Unido wvasconcelos@acm.org RESUMEN Las normas son ampliamente reconocidas como un medio de coordinar sistemas multi-agentes. La gestión distribuida de las normas es una cuestión difícil y observamos una falta de realizaciones computacionales verdaderamente distribuidas de los modelos normativos. Con el fin de regular el comportamiento de los agentes autónomos que participan en múltiples actividades relacionadas, proponemos un modelo normativo, la Estructura Normativa (NS), un artefacto que se basa en la propagación de posiciones normativas (obligaciones, prohibiciones, permisos), como consecuencias de las acciones de los agentes. Dentro de un NS, los conflictos pueden surgir debido a la naturaleza dinámica del MAS y la concurrencia de acciones de los agentes. Sin embargo, garantizar la libertad de conflicto de un NS en el momento del diseño es computacionalmente intratable. Demostramos esto formalizando la noción de conflicto, proporcionando un mapeo de los NS en las Redes Petri Coloreadas y tomando prestado los resultados teóricos bien conocidos de ese campo. Dado que se requiere la resolución de conflictos en línea, presentamos un algoritmo tratable que se empleará de forma distribuida. Luego demostramos que este algoritmo es primordial para la promulgación distribuida de un NS. Categorías y sujetos Descriptores I.2.11 [Inteligencia Artificial Distribuida]: Idiomas y estructuras Términos generales Algoritmos, Diseño, Teoría 1. INTRODUCCIÓN Una característica fundamental de los sistemas multiagente abiertos y regulados en los que interactúan agentes autónomos, es que los agentes participantes están destinados a cumplir con las convenciones del sistema. Las normas pueden utilizarse para modelar tales convenciones y, por lo tanto, como medio para regular el comportamiento observable de los agentes [6, 29]. Hay muchas contribuciones sobre el tema de las normas de sociólogos, filósofos y lógicos (por ejemplo, [15, 28]). Sin embargo, hay muy pocas propuestas para la realización computacional de modelos normativos - la forma en que las normas pueden integrarse en el diseño y ejecución de MAS. Los pocos que existen (e.g. [10, 13, 24]), funcionan de manera centralizada, lo que crea cuellos de botella y puntos de fallo únicos. Hasta donde sabemos, ninguna propuesta apoya verdaderamente la promulgación distribuida de entornos normativos. En nuestro documento abordamos ese problema y proponemos medios para manejar los compromisos contradictorios en sistemas abiertos, regulados y multiagentes de manera distribuida. El tipo de MAS regulado que contemplamos consiste en actividades múltiples, simultáneas, relacionadas donde los agentes interactúan. Cada agente puede participar simultáneamente en varias actividades, y cambiar de una actividad a otra. Las acciones de un agente dentro de una actividad pueden tener consecuencias en forma de posiciones normativas (es decir. obligaciones, permisos y prohibiciones) [26] que puedan limitar su comportamiento futuro. Por ejemplo, un agente comprador que se queda sin crédito puede estar prohibido hacer más ofertas, o un agente vendedor está obligado a entregar después de cerrar un acuerdo. Asumimos que los agentes pueden optar por no cumplir todas sus obligaciones y, por lo tanto, pueden ser sancionados por el MAS. Obsérvese que, cuando se distribuyen las actividades, las posiciones normativas deben derivarse de las actividades en las que se generan a aquellas en las que surten efecto. Por ejemplo, la obligación de los vendedores de arriba debe fluir (o propagarse) de una actividad de negociación a una actividad de entrega. Dado que en un MAS abierto y regulado no se pueden incorporar aspectos normativos en el diseño de los agentes, adoptamos la opinión de que el MAS debe complementarse con un conjunto separado de normas que regulen aún más el comportamiento de los agentes participantes. Para modelar la separación de preocupaciones entre el nivel de coordinación (interacciones de agentes) y el nivel normativo (propagación de posiciones normativas), proponemos un artefacto llamado Estructura Normativa (NS). Dentro de un NS pueden surgir conflictos debido a la naturaleza dinámica del MAS y la concurrencia de acciones de los agentes. Por ejemplo, un agente puede estar obligado y prohibido a realizar el 636 978-81-904262-7-5 (RPS) c 2007 IFAAMAS muy mismo acción en una actividad. Dado que la regulación de un MAS implica que los agentes participantes deben ser conscientes de la validez de las acciones que tienen lugar dentro de él, dichos conflictos deben ser identificados y posiblemente resueltos si se necesita una reivindicación de validez para que un agente realice una acción o sea sancionado. Sin embargo, garantizar la libertad de conflicto de un NS en el momento del diseño es computacionalmente intratable. Demostramos esto formalizando la noción de conflicto, proporcionando un mapeo de los NS en las redes de Petri de colores (CPNs) y tomando prestado los resultados teóricos bien conocidos del campo de los CPNs. Creemos que se requiere la detección y resolución de conflictos en línea. Por lo tanto, presentamos un algoritmo tratable para la resolución de conflictos. Este algoritmo es primordial para la promulgación distribuida de un NS. El documento se organiza de la siguiente manera. En la Sección 2 detallamos un escenario para servir de ejemplo a lo largo del artículo. A continuación, en la Sección 3 definimos formalmente el artefacto de la estructura normativa. Además, en la sección 4 formalizamos la noción de conflicto para posteriormente analizar la complejidad de la detección de conflictos en términos de RCP en la sección 5. En la sección 6 se describe la gestión computacional de los NS describiendo su promulgación y presentando un algoritmo para la resolución de conflictos. Por último, comentamos sobre la labor conexa, sacamos conclusiones e informamos sobre la labor futura en la sección 7. 2. SCENARIO Utilizamos un escenario de cadena de suministro en el que empresas e individuos se reúnen en un mercado en línea para realizar negocios. El procedimiento de transacción global puede organizarse como seis actividades distribuidas, representadas como nodos en el diagrama de la Figura 1. En ellas participan diferentes participantes cuyo comportamiento se coordina a través de protocolos. En este escenario, los agentes pueden desempeñar uno de los cuatro papeles: marExit Inscripción Pago Entrega Negociación Coordinación Modelo Contrato Figura 1: Estructura de actividad del contador de ketplace (acc), cliente, proveedor (supp) y gerentes de almacén (wm). Las flechas que conectan las actividades representan cómo los agentes pueden moverse de una actividad a otra. Después de registrarse en el mercado, los clientes y proveedores se reúnen en una actividad en la que negocian los términos de su transacción, es decir. los precios, los importes de las mercancías que deban entregarse, los plazos y otros detalles. En la actividad contractual, se establece el pedido y se prepara una factura. El cliente participará entonces en una actividad de pago, verificando su solvencia e instruyendo a su banco a transferir la cantidad correcta de dinero. Mientras tanto, el proveedor se encargará de la entrega de las mercancías (por ejemplo: a través de un administrador de almacén) en la actividad de entrega. Finalmente, los agentes pueden salir del mercado conforme a un protocolo de salida predeterminado. El contable del mercado participa en la mayoría de las actividades como proveedor confiable de herramientas de auditoría. En el resto del documento nos basaremos en este escenario para ilustrar la noción de estructura normativa e ilustrar nuestro enfoque de la detección y resolución de conflictos en un entorno distribuido. 3. ESTRUCTURA NORMATIVA En los agentes MASs interactúan según protocolos que naturalmente se distribuyen. Abogamos por que las acciones en uno de esos protocolos puedan tener un efecto en la promulgación de otros protocolos. Algunas acciones pueden ser prohibidas u obligatorias, por ejemplo. Tomamos posiciones normativas para ser obligaciones, prohibiciones y permisos similares al trabajo descrito en [26]. La intención de agregar o eliminar una posición normativa que llamamos comando normativo. Los casos de posiciones normativas en un protocolo también pueden tener consecuencias para otros protocolos1. Para definir nuestro lenguaje de norma y especificar cómo se propagan las posiciones normativas, nos hemos inspirado en sistemas multicontexto [14]. Estos sistemas permiten estructurar el conocimiento en teorías formales distintas y definir las relaciones entre ellos. Las relaciones se expresan como reglas puente - la deducibilidad de las fórmulas en algunos contextos conduce a la deducción de otras fórmulas en otros contextos. Recientemente, estos sistemas se han utilizado con éxito para definir arquitecturas de agentes [11, 23]. La metáfora se traduce a nuestro trabajo actual de la siguiente manera: la expresión de las ilocuciones y/o la existencia de posiciones normativas en algunas escenas normativas conduce a la deducción de posiciones normativas en otras escenas normativas. Nos preocupa la propagación y distribución de posiciones normativas dentro de una red de escenas normativas distribuidas como consecuencia de las acciones de los agentes. Tomamos escenas normativas para ser conjuntos de posiciones normativas y expresiones que están asociadas con un protocolo de interacción subyacente correspondiente a una actividad. En esta sección, presentamos primero un lenguaje simple que capta estos aspectos e introduce formalmente las nociones de escena normativa, regla de transición normativa y estructura normativa. Damos la semántica prevista de estas reglas y mostramos cómo controlar un MAS a través de normas en un ejemplo. 3.1 Conceptos básicos Los componentes básicos de nuestro lenguaje son términos y fórmulas atómicas: Def. 1. Un término, denotado como t, es (i) cualquier constante expresada usando minúsculas (con o sin subíndices), por ejemplo. a, b0, c o ii) cualquier variable expresada utilizando mayúsculas (con o sin subíndices), por ejemplo. X, Y, Zb o iii) cualquier función f(t1,. . . , tn), donde f es un símbolo de función n-ary y t1,.., tn son términos. Algunos ejemplos de términos y funciones son Crédito, precio u oferta (biblia, 30), siendo respectivamente una variable, una constante y una función. Estaremos haciendo uso de identificadores en todo el papel, que son términos constantes y también necesitan la siguiente definición: Def. 2. Una fórmula atómica es cualquier construcción p(t1,. . . , tn), donde p es un símbolo predicado n-ary y t1,. . . , son términos. El conjunto de todas las fórmulas atómicas se denota como Δ. Nos centramos en una clase expresiva de MASs en la que la interacción se lleva a cabo por medio de actos de discurso ilocutionarios intercambiados entre los agentes participantes: Def. 3. I I I son las fórmulas atómicas terrestres que tienen la forma p(ag, r, ag, r, , t) donde p es un elemento de 1 Aquí, abstracto de protocolos y se refieren a ellos genéricamente como actividades. El Sexto Intl. Conjunto Conf. en Agentes Autónomos y Sistemas Multi-Agentes (AAMAS 07) 637 un conjunto de partículas ilocucionarias (por ejemplo: informar, petición, oferta); ag, ag son identificadores de agente; r, r son identificadores de rol; , un término de base arbitrario, es el contenido del mensaje, construido a partir de un lenguaje de contenido compartido; t  N es un sello de tiempo. El significado intuitivo de p(ag, r, ag, r, m, t) es que agente ag jugando rol r enviado mensaje m a agente ag jugando rol r en el momento t. Un ejemplo de una ilocución es informar(ag4, supp, ag3, cliente, offer(wire, 12), 10). A veces es útil referirse a las ilocuciones que no están totalmente fundamentadas, es decir, aquellas que pueden contener variables no instantiated (libres). En la descripción de un protocolo, por ejemplo, los valores precisos del mensaje intercambiado pueden quedar sin especificar. Durante la promulgación de los agentes del protocolo se producirán los valores reales que darán lugar a una ilocución del suelo. Así podemos definir esquemas de ilocución: Def. 4. Un esquema de ilocución ̄I es cualquier fórmula atómica p(ag, r, ag, r, ♥, t) en la que algunos de los términos pueden ser variables o pueden contener variables. 3.2 Definición formal de la noción de NS Primero definimos las escenas normativas de la siguiente manera: Def. 5. Una escena normativa es una tupla s = ids, Δs donde los ids son un identificador de escena y Δs es el conjunto de fórmulas atómicas Por ejemplo, una instantánea del estado de la escena normativa de entrega de nuestro escenario podría ser representada como: Δs = 8 < : utt(request(sean, client, kev, wm, receive(wire, 200), 20)), utt(accept(kev, wm, seen, customer, receive(wire, 200), 30)) 9 = ; Es decir, Tenga en cuenta que el estado de una escena normativa Δs evoluciona con el tiempo. Estas escenas normativas están conectadas entre sí a través de transiciones normativas que especifican cómo las expresiones y posiciones normativas en una escena afectan a otras escenas normativas. Como se mencionó anteriormente, las actividades no son independientes, ya que las ilocuciones pronunciadas en algunas de ellas pueden tener un efecto en otras. Las reglas normativas de transición definen las condiciones bajo las cuales se genera un comando normativo. Estas condiciones son declaraciones o posiciones normativas asociadas a un protocolo dado (denominadas por ejemplo. actividad : expresión ) que dan un comando normativo, es decir. la adición o supresión de otra posición normativa, posiblemente relacionada con una actividad diferente. Nuestras reglas de transición están así definidas: Def. 6. Una regla de transición normativa R es de la forma: R ::= V C V ::= ids : D  V, V D ::= N  utt( ̄I) N ::= per( ̄I)  prh( ̄I)  obli( ̄I) C ::= add(ids : N)  remove(ids : N) donde ̄I es un esquema permiso, prohibición u obligación), ids es un identificador de la actividad s y C es un comando normativo. Dotamos nuestro lenguaje con la semántica habitual de los lenguajes basados en reglas [19]. Las reglas trazan una estructura normativa existente a una nueva estructura normativa en la que sólo cambia el estado de las escenas normativas. En las definiciones siguientes nos basamos en el concepto estándar de sustitución [9]. Def. 7. Una transición normativa es un tupla b = idb, rb donde idb es un identificador y rb es una regla de transición normativa. Proponemos ampliar la noción de MAS, regulada por protocolos, con una capa adicional consistente en escenas normativas y transiciones normativas. Esta capa se representa como un gráfico bipartito que llamamos estructura normativa. Una estructura normativa relaciona escenas normativas y transiciones normativas especificando qué posiciones normativas deben generarse o eliminarse en qué escenas normativas. Def. 8. Una estructura normativa es un gráfico bipartito etiquetado NS = Nodos, bordes, Lin, Lout. Nodos es un conjunto de Sâ B donde S es un conjunto de escenas normativas y B es un conjunto de transiciones normativas. Edges es un conjunto Ain Aout donde Ain  S × B es un conjunto de arcos de entrada etiquetados con una fórmula atómica utilizando la función de etiquetado Lin : Ain → D; y Aout  B × S es un conjunto de arcos de salida etiquetados con una posición normativa utilizando la función de etiquetado Lout : Aout → N. Lo siguiente debe contener: 1. Cada fórmula atómica que aparece en el LHS de una regla rb debe ser de la forma (ids : D) donde s â € € € € TM € € € € € € € € € € € € € € € € € € € € € € € € € Ain tal que es = La fórmula atómica que aparece en el RHS de una regla rb debe ser de la forma add(ids : N) o remove(ids : N) donde s â € S y â € Aout tal que aout = (b, s) y Lout (aout ) = N. 3. Ain tal que a = (s, b) y b = idb, rb y Lin (a) = D entonces (ids:D) debe ocurrir en el LHS de rb. 4. Afuera de tal manera que a = (b, s) y b = idb, rb y Lout (a) = N luego add(ids : N) o remove(ids : N) deben ocurrir en el RHS de rb. Los dos primeros puntos aseguran que cada fórmula atómica en el LHS de una regla de transición normativa etiqueta un arco que entra en la transición normativa apropiada en la estructura normativa, y que la fórmula atómica en el RHS etiqueta el arco saliente correspondiente. Los puntos tres y cuatro aseguran que las etiquetas de todos los arcos entrantes se utilicen en el LHS de la regla de transición normativa en la que entran estos arcos, y que las etiquetas de todos los arcos salientes se utilicen en el RHS de la regla de transición normativa que estos arcos dejan. 3.3 Semántica Destinada La semántica formal se definirá mediante un mapeo a Redes Petri Coloradas en la Sección 5.1. Aquí comenzamos a definir la semántica prevista de las reglas normativas de transición describiendo cómo una regla cambia un escenario normativo de una estructura normativa existente que produce una nueva estructura normativa. Cada regla se activa una vez para cada sustitución que unifica el lado izquierdo V de la regla con el estado de las escenas normativas correspondientes. Una fórmula atómica (es decir, una declaración o una posición normativa) si es unificable con una declaración o posición normativa que pertenece al estado del escenario normativo correspondiente. Cada vez que se activa una regla, se lleva a cabo el comando normativo especificado a la derecha de esa regla, con la intención de añadir o eliminar una posición normativa del estado de la escena normativa correspondiente. Sin embargo, la adición no es incondicional, ya que pueden surgir conflictos. Este tema se tratará en las secciones 4 y 6.1. 638 La Sexta Intl. Conjunto Conf. en Agentes Autónomos y Sistemas Multi-Agentes (AAMAS 07) 3.4 Ejemplo En nuestro ejemplo de ejecución tenemos la siguiente regla de transición normativa ejemplar: „ pago : obli(inform(X, cliente, Y, acc, pay(Z, P, Q, T)), pago : utt(inform(X, cliente, Y, acc, pay(Z, P, Q), T)) « entrega : a La norma es una obligación del agente Y (esta vez asumiendo el papel de gerente de almacén wm) de enviar un mensaje al cliente X que el artículo Z ha sido entregado. En la Figura 2 se muestra una representación diagnóstica de cómo se relacionan las actividades y una estructura normativa: Pago Entrega Contrato Nivel Normativo Salida Registro Pago Entrega Negociación Nivel de Coordinación Contrato nt Figura 2: Actividades y Estructura Normativa A medida que se pronuncian las ilocuciones durante las actividades, surgen posiciones normativas. Las preferencias y las posiciones normativas se combinan en normas de transición, lo que provoca el flujo de posiciones normativas entre las distintas situaciones normativas. La conexión entre los dos niveles se describe en la sección 6.2. 4. DEFINICIÓN DE CONFLICTOS Los términos conflicto deontico e inconsistencia deontica se han utilizado indistintamente en la literatura. Sin embargo, en este trabajo adoptamos el punto de vista de [7] en el que los autores sugieren que surge una inconsistencia deontica cuando una acción es simultáneamente permitida y prohibida - ya que un permiso no puede ser actuado en consecuencia, no se produce un conflicto real. Sin embargo, las situaciones en que una acción está simultáneamente obligada y prohibida son conflictos deonticos, ya que tanto las obligaciones como las prohibiciones influyen en los comportamientos en conflicto. El contenido de las posiciones normativas en este trabajo son ilocuciones. Por lo tanto, surge un conflicto normativo cuando una ilocución está simultáneamente obligada y prohibida. Proponemos utilizar la noción estándar de unificación [9] para detectar cuándo se superponen una prohibición y un permiso. Por ejemplo, una obligación obli(informar(A1, R1, A2, R2, p(c, X, T)) y una prohibición prh(informar(a1, r1, a2, r2, p(Y, d), T)) están en conflicto ya que se unifican en el punto Capturamos formalmente esta noción: Def. 9. Un conflicto (deontico) surge entre dos posiciones normativas N y N bajo una sustitución Es decir, una prohibición y una obligación están en conflicto si, y sólo si, sus ilocuciones se unifican en virtud de La sustitución, llamada aquí el conjunto de conflictos, unifica los agentes, roles y fórmulas atómicas. Asumimos que unificar es una implementación adecuada de un algoritmo de unificación que i) termina siempre (posiblemente fallando, si no se puede encontrar un unificador); ii) es correcto; y iii) tiene complejidad computacional lineal. Las incoherencias causadas por la misma ilocución, que se permiten y prohíben simultáneamente, pueden formalizarse de manera similar. En este trabajo nos centramos en los conflictos de prohibición/obligación, pero la maquinaria computacional introducida en la Sección 6.1 también puede ser utilizada para detectar inconsistencias de prohibición/permiso, si sustituimos la modalidad obli por per. 5. FORMALIZACIÓN DEL CONFLICTO-FREEDOM En esta sección presentamos algunos conocimientos de fondo sobre CPN asumiendo una comprensión básica de las redes Petri ordinarias. Para detalles técnicos, remitimos al lector a [16]. A continuación, mapeamos los NS a los CPN y analizamos sus propiedades. Los CPN combinan la fuerza de las redes Petri con la fuerza de los lenguajes de programación funcionales. Por un lado, las redes Petri proporcionan los primitivos para la descripción de la sincronización de los procesos concurrentes. Como se observa en [16], los CPN tienen una semántica que se basa en la verdadera concurrencia, en lugar de entrelazarse. En nuestra opinión, es más fácil trabajar con una semántica de verdadera moneda porque es la forma en que prevemos la conexión entre el nivel de coordinación y el nivel normativo de un sistema multi-agente. Por otra parte, los lenguajes de programación funcionales utilizados por los CPN proporcionan los primitivos para la definición de los tipos de datos y la manipulación de sus valores de datos. Por lo tanto, podemos traducir fácilmente expresiones de una estructura normativa. Por último, pero no por ello menos importante, los CPN tienen una semántica bien definida que define inequívocamente el comportamiento de cada CPN. Además, los CPN tienen un gran número de métodos e instrumentos de análisis formales mediante los cuales se pueden demostrar las propiedades de los CPN. En resumen, los CPN nos proporcionan todas las características necesarias para razonar formalmente sobre las estructuras normativas, dado que se proporciona una cartografía adecuada. De acuerdo con las redes Petri, los estados de un CPN están representados por medio de lugares. Pero a diferencia de Petri Nets, cada lugar tiene un tipo de datos asociado determinando el tipo de datos que el lugar puede contener. Un estado de un CPN se llama marca. Consiste en un número de fichas colocadas en los lugares individuales. Cada token lleva un valor de datos que tiene el tipo del lugar correspondiente. En general, un lugar puede contener dos o más tokens con el mismo valor de datos. Por lo tanto, una marca de un CPN es una función que mapea cada lugar en un multi-set2 de tokens del tipo correcto. Uno a menudo se refiere a los valores token como colores token y uno también se refiere a los tipos de datos como conjuntos de colores. Los tipos de un CPN pueden ser arbitrariamente complejos. Las acciones en un PCN están representadas mediante transiciones. Un arco entrante en una transición desde un lugar indica que la transición puede eliminar tokens del lugar correspondiente mientras que un arco saliente indica que la transición puede añadir tokens. El número exacto de tokens y sus valores de datos son determinados por las expresiones de arco, que se codifican utilizando el lenguaje de programación elegido para el CPN. Una transición está habilitada en un CPN si y sólo si todos los 2 A multi-set (o bolsa) es una extensión a la noción de conjunto, permitiendo la posibilidad de múltiples apariencias del mismo elemento. El Sexto Intl. Conjunto Conf. en Agentes Autónomos y Sistemas Multi-Agentes (AAMAS 07) 639 variables en las expresiones de sus arcos entrantes se unen a algunos valores (cada una de estas fijaciones se refiere como un elemento vinculante). Si es así, la transición puede ocurrir eliminando tokens de sus lugares de entrada y añadiendo tokens a sus lugares de salida. Además de las expresiones de arco, es posible conectar una expresión booleana de guardia (con variables) a cada transición. Juntando todos los elementos de arriba obtenemos una definición formal de CPN que se empleará más adelante para propósitos de mapeo. Def. 10. Un CPN es un conjunto finito de tipos no vacíos, también llamados conjuntos de colores; ii) P es un conjunto finito de lugares; iii) T es un conjunto finito de transiciones; iv) A es un conjunto finito de arcos; v) N es una función de nodo definida de A a P × T • T × P; vi) C es una función de color de P a فارسى; vii) G es una De acuerdo con las redes Petri ordinarias, el comportamiento concurrente de un CPN se basa en la noción de paso. Formalmente, un paso es un no vacío y finito multi-set sobre el conjunto de todos los elementos de unión. Deje que el paso S se active en una marca M. Entonces, S puede ocurrir, cambiando la marca M a M. Además, decimos que el marcado M es directamente accesible desde el marcado M por la ocurrencia del paso S, y lo denotamos por M[S > M. Una secuencia de ocurrencia finita es una secuencia finita de pasos y marcas: M1[S1 > M2. . . Mn[Sn > Mn+1 de tal manera que n+N y Mi[Si > Mi+1 . . , n}. El conjunto de todas las marcas posibles alcanzables para una red neta de una marca M se llama su conjunto de alcance, y se denota como R(Net, M). 5.1 Mapeo a redes de Petri de colores Nuestra estructura normativa es un gráfico bipartito etiquetado. Lo mismo puede decirse de una red Petri coloreada. Estamos presentando un mapeo f de uno a otro, con el fin de proporcionar semántica para la estructura normativa y probar las propiedades al respecto mediante el uso de resultados teóricos bien conocidos de trabajo en CPNs. El mapeo f hace uso de correspondencias entre escenas normativas y lugares CPN, transiciones normativas y transiciones CPN y finalmente, entre etiquetas de arco y expresiones de arco CPN. S → P B → T Lin Lout → E El conjunto de tipos es el conjunto singleton que contiene el color NP (es decir. * = {NP}). Este tipo complejo está estructurado de la siguiente manera (utilizamos CPN-ML [4] sintaxis): color NPT = con Obl  Per  Prh  NoMod color IP = con infor  declaramos  offer color UTT = record illp : IP ag1, role1, ag2, role2 : string content : string time : int color NP = Los arcos son trazados casi directamente. A es un conjunto finito de arcos y N es una función de nodo, de tal manera que Aa Aa Ain Aout. N(a) = a. La función de inicialización I se define como I(p) = Δs ( Por último, la función de color C asigna el color NP a cada lugar: C(p) = NP (­p ­P). No estamos haciendo uso de la función de guardia G. En el trabajo futuro, esta función se puede utilizar para modelar restricciones cuando extendemos la expresividad de nuestro lenguaje de norma. 5.2 Propiedades de las estructuras normativas Después de haber definido el mapeo desde las estructuras normativas hasta las redes de Petri coloreadas, ahora analizamos las propiedades de los CPN que nos ayudan a entender la complejidad de la detección de conflictos. Una pregunta que nos gustaría responder es, si en un momento dado, una determinada estructura normativa está libre de conflictos. Tal instantánea de una estructura normativa corresponde a una marca en el CPN cartografiado. Def. 11. Dada una marca Mi, esta marca es libre de conflicto si p  P. np1, np2  Mi(p) tal que np1.mode = Obl y np2.mode = Prh y np1.illoc y np2.illoc unificar bajo una sustitución válida. Otra pregunta interesante sería si se producirá un conflicto a partir de una instantánea del sistema propagando las posiciones normativas. Para responder a esta pregunta, primero traducimos la instantánea de la estructura normativa al CPN correspondiente y luego ejecutamos la secuencia de ocurrencia finita de marcas y pasos, verificando la libertad de conflicto de cada marca a medida que avanzamos. Def. 12. Dada una marca Mi, una secuencia de ocurrencia finita Si, Si+1,..., Sn se llama libre de conflictos, si y sólo si Mi[Si > Mi+1. . . Mn[Sn > Mn+1 y Mk están libres de conflictos para todos los k, de modo que i ≤ k ≤ n + 1. Sin embargo, la cuestión principal que nos gustaría investigar, es si una estructura normativa dada es o no resistente a los conflictos, es decir, si los agentes que promulgan el MAS son capaces de provocar conflictos a través de sus acciones. Tan pronto como se incluye la posibilidad de acciones (o declaraciones) de agentes autónomos, se pierde el determinismo. Después de haber mapeado la estructura normativa a un CPN, ahora añadimos modelos de CPN de las interacciones de agentes. Cada forma de interacción con el agente (es decir, cada actividad) se puede modelar utilizando CPN en la línea de Cost et al. [5]. Estos CPN no determinantes alimentan tokens en el CPN que modela la estructura normativa. Esto lleva a la introducción de no-determinismo en el PCN combinado. La mitad inferior de la figura 3 muestra parte de un modelo CPN de un protocolo de agente donde el arco denotado con 1 representa alguna pronunciación de una ilocución por un agente. La transición de destino de este arco, no sólo mueve un token al siguiente estado de este CPN, sino que también coloca un token en el lugar correspondiente a la escena normativa apropiada en el modelo del CPN de la estructura normativa (a través del arco 2). La transición 3 finalmente podría propagar ese símbolo en forma de una obligación, por ejemplo. Así, a partir de una marca dada, muchas secuencias de ocurrencia diferentes son posibles dependiendo de las acciones de los agentes. Utilizamos el conjunto de alcance R para definir una situación en la que los agentes no pueden causar conflictos. 640 La Sexta Intl. Conjunto Conf. sobre Agentes Autónomos y Sistemas Multi-Agentes (AAMAS 07) Figura 3: Construcción del CPN combinado Def. 13. Dado un N neto, una marca M es resistente a los conflictos si y sólo si todas las marcas en R(N,M) están libres de conflictos. La verificación de la libertad de conflicto de una marca se puede hacer en tiempo polinomio mediante la verificación de todos los lugares del CPN en busca de fichas en conflicto. La libertad de conflicto de una secuencia de ocurrencia en el CPN que representa la estructura normativa también se puede hacer en tiempo polinomio ya que esta secuencia es determinista dada una instantánea. El hecho de que se diseñe o no una estructura normativa corresponde con seguridad a la comprobación de la resistencia a los conflictos de la marca M0 inicial. Ahora, verificar la resistencia al conflicto de una marca se convierte en una tarea muy difícil. Corresponde al problema de la accesibilidad en un CPN: ¿se puede alcanzar un estado o se puede lograr una marca que contenga un conflicto?. Este problema de alcanzabilidad es conocido por ser NP-completo para las redes Petri ordinarias [22] y como las RCP son funcionalmente idénticas, no podemos esperar verificar la resistencia a los conflictos de una estructura normativa fuera de línea en un tiempo razonable. Por lo tanto, se necesitan mecanismos de distribución y tiempo de ejecución para garantizar que una estructura normativa mantenga la coherencia. Presentamos uno de esos mecanismos en la sección siguiente. 6. GESTIÓN DE ESTRUCTURAS NORMATIVAS Una vez detectado un conflicto (según se define en la Sección 4), proponemos emplear al unificador para resolver el conflicto. En nuestro ejemplo, si las variables en prh(inform(a1, r1, a2, r2, p(Y, d), T)) no obtienen los valores especificados en la sustitución Sin embargo, en lugar de computar el conjunto de complementos de una sustitución (que puede ser un conjunto infinito) proponemos anotar la prohibición con el propio unificador y utilizarla para determinar cuáles son las variables de esa prohibición no pueden ser en futuras unificaciones para evitar un conflicto. Por lo tanto denotamos prohibiciones anotadas como prh( ̄I) . . Es un conjunto de unificadores. Las normas anotadas3 se interpretan como constructos deonticos con influencias restringidas, es decir, su efecto (sobre agentes, roles e ilocuciones) ha sido limitado por el conjunto de unificadores. Una prohibición puede estar en conflicto con varias obligaciones en una escena normativa dada s = id, Δ y tenemos que registrar (y posiblemente evitar) todos estos conflictos. Definimos a continuación un algoritmo que garantiza que una posición normativa se añada a una escena normativa de tal manera que no cause ningún conflicto. 3 Aunque proponemos limitar las prohibiciones, el mismo mecanismo puede utilizarse para definir la reducción de obligaciones en su lugar. Estas diferentes políticas dependen de la semántica deontica prevista y de los requisitos de los sistemas abordados. Por ejemplo, algunos MAS pueden exigir que sus agentes no actúen en presencia de conflictos, es decir, que se reduzca la obligación. 6.1 Resolución de conflictos Proponemos una forma de resolver los conflictos normativos mediante la unificación. Detectamos la superposición de las influencias de las normas, es decir. cómo afectan al comportamiento de los agentes afectados, y reducimos la influencia de la posición normativa, mediante el uso adecuado de las anotaciones al comprobar si la norma se aplica a las ilocuciones. El algoritmo mostrado en la Figura 4 muestra cómo mantenemos un conjunto de normas libres de conflictos. Añade una norma dada N a un estado normativo existente, libre de conflictos Δ, obteniendo un nuevo estado normativo resultante Δ que es libre de conflictos, es decir, sus prohibiciones están anotadas con un conjunto de conjuntos de conflictos que indican qué fijaciones para variables deben evitarse para que los conflictos no tengan lugar. algoritmo addNorm(N, Δ) comienza 1 marca de tiempo(N) 2 caso N de 3 per( ̄I): Δ := Δ  {N} 4 prh(I): si N  Δ s.t. Conflict(N, N, Las líneas 4-5 abordan el caso cuando intentamos agregar una prohibición de base a un estado normativo: si entra en conflicto con cualquier obligación, entonces se descarta; de lo contrario se añade al estado normativo. En las líneas 6 a 12 se describe la situación en que la posición normativa que debe añadirse es una prohibición no básica. En este caso, el algoritmo inicializa un conjunto vacío y bucles (línea 9-10) a través de las normas N en el antiguo estado normativo Δ. Después de encontrar uno que entra en conflicto con N, el algoritmo actualiza el valor de la nueva configuración de conflicto (línea 10). Mediante el bucle a través de Δ, somos capaces de comprobar cualquier conflicto entre la nueva prohibición y las obligaciones existentes, construyendo adecuadamente la anotación  que se utilizará al añadir N a Δ en la línea 11. En las líneas 13 a 27 se describe cómo se ajusta una nueva obligación a un estado normativo existente. Hacemos uso de dos conjuntos inicialmente vacíos, temporales, Δ1, Δ2. El algoritmo pasa a través de Δ (líneas 16-25) recogiendo las prohibiciones anotadas N Hay, sin embargo, dos casos a tratar: el de cuando un motivo La Sexta Intl. Conjunto Conf. sobre los agentes autónomos y los sistemas multiagentes (AAMAS 07) se encuentra la prohibición 641 (línea 17), y su excepción, que abarca las prohibiciones no terrestres (línea 20). En ambos casos, la antigua prohibición se almacena en Δ1 (líneas 18 y 23) para ser posteriormente retirada de Δ (línea 26). Sin embargo, en el caso de una prohibición no terrestre, el algoritmo actualiza su anotación de conjuntos de conflicto (línea 24). El bucle garantiza que se lleve a cabo una búsqueda exhaustiva (lineal) a través de un estado normativo, comprobando si la nueva obligación está en conflicto con cualquier prohibición existente, posiblemente actualizando las anotaciones de estas prohibiciones en conflicto. En la línea 26 el algoritmo construye la nueva actualización Δ eliminando las antiguas prohibiciones almacenadas en Δ1 y añadiendo las prohibiciones actualizadas almacenadas en Δ2 (si las hay), así como la nueva obligación N. Nuestro algoritmo propuesto es correcto en que, para una posición normativa dada N y un estado normativo Δ, proporciona un nuevo estado normativo Δ en el que todas las prohibiciones tienen anotaciones que registran cómo se unifican con las obligaciones existentes. Sin embargo, las anotaciones pueden estar vacías: este es el caso cuando tenemos una prohibición básica o una prohibición que no unifica/conflige con ninguna obligación. Los permisos no afectan a nuestro algoritmo y se tratan adecuadamente (línea 3). Cualquier intento de insertar una prohibición de base que entre en conflicto, produce el mismo estado normativo (línea 4). Cuando se añade una nueva obligación, el algoritmo garantiza que se tienen en cuenta todas las prohibiciones (líneas 14 a 27), lo que conduce a la eliminación de las prohibiciones sobre el terreno en conflicto o a la actualización de las anotaciones de las prohibiciones no sobre el terreno. El algoritmo siempre termina: los bucles están sobre un conjunto finito Δ y los conflictos comprueban y establecen operaciones siempre terminan. La complejidad del algoritmo es lineal: el conjunto Δ sólo se examina una vez para cada caso posible de norma que se añade. Al gestionar los estados normativos también es posible que necesitemos eliminar posiciones normativas. Esto es sencillo: los permisos se pueden retirar sin ningún problema; las prohibiciones anotadas también se pueden eliminar sin más consideraciones; sin embargo, las obligaciones requieren algunas tareas domésticas. Cuando se va a eliminar una obligación, debemos verificarla contra todas las prohibiciones anotadas a fin de actualizar sus anotaciones. Aplicamos la comprobación de conflicto y obtenemos un unificador, luego eliminamos este unificador de la anotación de prohibiciones. Invocamos el algoritmo de eliminación como removeNorm(N, Δ): devuelve un nuevo estado normativo Δ en el que N ha sido eliminado, con posibles alteraciones a otras posiciones normativas como se explicó. 6.2 Promulgación de una estructura normativa La promulgación de una estructura normativa equivale a la ejecución paralela y distribuida de escenas normativas y transiciones normativas. A título ilustrativo, describiremos a continuación la interacción entre las situaciones normativas de pago y entrega y la transición normativa que los vincula en la mitad superior de la figura 2. Con este objetivo, considere, por ejemplo, que obl(inform(jules, cliente, rod, acc, pay(copper, 400, 350), T) Δpago y que Δentrega tiene prh(inform(rod,wm, jules, cliente, entregado(Z, Q), T)). Tales estados indican que el cliente Jules está obligado a pagar £400 por 350kg de cobre al contador Rod de acuerdo con la escena normativa de pago, mientras que Rod, asumiendo el papel de gerente de almacén esta vez, está prohibido entregar cualquier cosa al cliente Jules de acuerdo con la escena normativa de entrega. Para cada escena normativa, el proceso de promulgación es el siguiente. En primer lugar, procesa su cola de mensajes entrantes que contiene tres tipos de mensajes: declaraciones de la actividad a la que está vinculada; y comandos normativos para agregar o eliminar posiciones normativas. Por ejemplo, en nuestro ejemplo, la escena normativa de pago recoge la ilocución I = utt((inform(jules, cliente, varilla, acc, pay(cobre, 400, 350), 35)) para el cliente Jules pendiente de pago por cobre (a través de la flecha A en la figura 2). Las Uterancias son timestamped y subsecuentemente agregadas al estado normativo. Tendríamos Δpayment = Δpayment {I}, en nuestro ejemplo. Al recibir órdenes normativas para agregar o eliminar una posición normativa, la escena normativa invoca el algoritmo de adición o eliminación correspondiente descrito en la Sección 6.1. En segundo lugar, la escena normativa reconoce su cambio de estado al enviar un mensaje desencadenante a cada transición normativa saliente a la que está conectado. En nuestro ejemplo, el escenario normativo de pagos estaría señalando su cambio de estado a la transición normativa nt. Para las transiciones normativas, el proceso funciona de manera diferente. Debido a que cada transición normativa controla el funcionamiento de una sola regla, al recibir un mensaje de activación, encuesta cada escena normativa entrante para sustituciones de los esquemas de ilocución pertinentes en el LHS de su regla. En nuestro ejemplo, nt (responsable de la regla descrita en la Sección 3.4), encuestaría el escenario normativo de pago (vía flecha B) para sustituciones. Al recibir respuestas de ellos (en forma de conjuntos de sustituciones junto con marcas de tiempo), tiene que unificar las sustituciones de cada una de estas escenas normativas. Para cada unificación que encuentra, la regla se activa, y por lo tanto el comando normativo correspondiente se envía a lo largo de la escena normativa de salida. La transición normativa entonces mantiene un seguimiento del mensaje de disparo que envió y de las marcas de tiempo de las posiciones normativas que desencadenó el disparo. Esto se hace para asegurar que las mismas posiciones normativas en el LHS de una regla sólo desencadenen su disparo una vez. En nuestro ejemplo, nt estaría recibiendo  = {X/jules, Y/rod, Z/copper, Q/350} de la escena normativa de pagos. Dado que las substiciones en unifican con la regla nts, la regla es disparada, y el comando normativo add(delivery : obli(rod, wm, jules, client, delivery(copper, 350), T)) es enviado a lo largo de la escena normativa de entrega para obligar a Rod a entregar al cliente Jules 350kg de cobre. Después de eso, la escena normativa de entrega invocaría el algoritmo addNorm de la figura 4 con Δdelivery y N = obli(rod, wm, jules, client, delivered(copper, 350)) como argumentos. 7. TRABAJOS Y CONCLUSIONES RELACIONADOS Nuestras contribuciones en este documento son triples. En primer lugar, introducimos un enfoque para la gestión y el razonamiento de las normas de manera distribuida. Hasta donde sabemos, hay poco trabajo publicado en esta dirección. En [8, 21] se presentan dos idiomas para la aplicación distribuida de las normas en el MAS. Sin embargo, en ambos trabajos, cada agente tiene una interfaz de mensaje local que envía mensajes legales de acuerdo con un conjunto de normas. Dado que estas interfaces son locales para cada agente, las normas sólo pueden expresarse en términos de acciones de ese agente. Se trata de una grave desventaja, por ejemplo. cuando uno necesita activar una obligación para con un agente debido a un cierto mensaje de otro. La segunda contribución es la propuesta de una estructura normativa. La noción es fructífera porque permite la separación de las cuestiones normativas y de procedimiento. La estructura normativa que proponemos evidencia la similitud entre la propagación de posiciones normativas y la propagación 642 La Sexta Intl. Conjunto Conf. sobre Agentes Autónomos y Sistemas Multi-Agentes (AAMAS 07) de tokens en Redes Petri Coloradas. Esa similitud sugiere fácilmente una cartografía entre los dos, y da lugar a un tratamiento analítico conveniente de la estructura normativa, en general, y la complejidad de la detección de conflictos, en particular. La idea de modelar interacciones (en forma de conversaciones) a través de Petri Nets se ha investigado en [18], donde el medio de interacción y los agentes individuales se modelan como subredes de CPN que posteriormente se combinan para su análisis. En [5], las conversaciones se diseñan y analizan por primera vez a nivel de los CPN y posteriormente se traducen en protocolos. Lin et al. [20] mapear esquemas de conversación a CPNs. Según nuestro conocimiento, el uso de esta representación en apoyo de la detección de conflictos en el MAS regulado no ha sido reportado en otros lugares. Por último, presentamos un mecanismo distribuido para resolver los conflictos normativos. Sartor [25] trata los conflictos normativos desde el punto de vista de la teoría jurídica y sugiere una forma de ordenar las normas involucradas. Su idea se implementa en [12], pero requiere un recurso central para el mantenimiento de normas. El enfoque para la detección y resolución de conflictos es una adaptación y extensión del trabajo sobre gráficos de instanciación reportados en [17] y un algoritmo relacionado en [27]. El algoritmo presentado en el presente trabajo puede ser utilizado para administrar estados normativos distribuidos: escenas normativas que suceden en paralelo tienen un estado normativo asociado Δ al que el algoritmo se aplica de forma independiente cada vez que se introduce una nueva norma. Estas tres contribuciones que presentamos en este documento abren muchas posibilidades para el trabajo futuro. Cabe mencionar en primer lugar, que como estrategia amplia estamos trabajando en una generalización de la noción de estructura normativa para hacerla funcionar con diferentes modelos de coordinación, con un contenido deontico más rico y además de diferentes realizaciones computacionales de MAS regulado. Como primer paso en esta dirección estamos aprovechando la disociación entre los protocolos de interacción y la orientación normativa declarativa que la estructura normativa pone a disposición, para proporcionar una capa normativa para las instituciones electrónicas (como se define en [1]). Esperamos que este acoplamiento dote a las instituciones electrónicas de un entorno normativo más flexible y más expresivo. Además, queremos extender nuestro modelo a través de varias direcciones: (1) manejar la negación y las limitaciones como parte del lenguaje de la norma, y en particular la noción de tiempo; (2) dar cabida a múltiples autoridades jerárquicas de normas basadas en roles, en la línea de Cholvy y Cuppens [3] y relaciones de poder como sugiere Carabelea et al. [2]; (3) para captar en el algoritmo de resolución de conflictos diferentes semánticas relacionadas con las nociones deonticas apoyando diferentes axiomaciones (por ejemplo, fuerza relativa de la prohibición frente a la obligación, nociones deonticas predeterminadas, inconsistencias deonticas). En el lado teórico, pretendemos utilizar técnicas de análisis de CPN para caracterizar clases de CPN (por ejemplo, acíclicas, simétricas, etc.) que corresponden a familias de Estructuras Normativas susceptibles a la detección de conflictos fuera de línea. La combinación de estas técnicas junto con nuestros mecanismos de resolución de conflictos en línea pretende dotar a los diseñadores del MAS de la capacidad de incorporar normas en sus sistemas de una manera basada en principios. 8. REFERENCIAS [1] J. L. Arcos, M. Esteva, P. Noriega, J. A. Rodr guez, y C. Sierra. Ingeniería de entornos abiertos con instituciones electrónicas. Journal on Engineering Applications of Artificial Intelligence, 18(2):191-204, 2005. [2] C. Carabelea, O. Boissier, y C. Castelfranchi. Usar el poder social para permitir a los agentes razonar sobre ser parte de un grupo. En el 5o Internat. Taller, EEAT 2004, págs. 166 a 177, 2004. [3] L. Cholvy y F. Cuppens. Solución de conflictos normativos mediante la fusión de funciones. En la Quinta Conferencia Internacional sobre Inteligencia Artificial y Derecho, Washington, Estados Unidos, 1995. [4] S. Christensen y T. B. Haagh. Diseño CPN - vista general de la sintaxis CPN ML. Informe técnico, Universidad de Aarhus, 1996. [5] R. S. Cost, Y. Chen, T. W. Finin, Y. Labrou e Y. Peng. Usando petri redes de colores para modelar la conversación. In Issues in Agent Communication, págs. 178 a 192, Londres, Reino Unido, 2000. [6] F. Dignum. Agentes autónomos con normas. Inteligencia Artificial y Ley, 7(1):69-79, 1999. [7] A. Elhag, J. Breuker y P. Brouwer. Sobre el análisis formal de los conflictos normativos. Información & Comunicaciones. Techn. Ley, 9(3):207-217, Oct. 2000. [8] M. Esteva, W. Vasconcelos, C. Sierra, y J. A. Rodr guez-Aguilar. Consistencia normativa en las instituciones electrónicas. volumen 3171 (LNAI), páginas 494-505. Springer-Verlag, 2004. [9] M. Fitting. Prueba de la lógica de primer orden y del teorema automatizado. Springer-Verlag, Nueva York, Estados Unidos, 1990. [10] N. Fornara, F. Vigan`o y M. Colombetti. Un enfoque impulsado por eventos a las normas en las instituciones artificiales. En el taller AAMAS05: Agentes, normas e instituciones para sistemas multiagente regulados (ANI@REM), Utrecht, 2005. [11] D. Gaertner, P. Noriega y C. Sierra. Ampliación de la arquitectura BDI con compromisos. En Actas del IX Congreso Internacional de la Asociación Catalana de Inteligencia Artificial, 2006. [12] A. Garc a-Camino, P. Noriega, y J.-A. Rodr guez-Aguilar. Un algoritmo para la resolución de conflictos en actividades reguladas compuestas. En el 7o taller Int.Workshop - ESAW 06, 2006. [13] A. Garc a-Camino, J.-A. Rodr guez-Aguilar, C. Sierra y W. Vasconcelos. Una arquitectura distribuida para las Sociedades de Agentes de Normas. En DALT III, volumen 3904 (LNAI), páginas 89 a 105. Springer, 2006. [14] F. Giunchiglia y L. Serafini. Lógicas jerárquicas multilenguaje o: Cómo podemos prescindir de lógicas modales. Inteligencia Artificial, 65(1):29-70, 1994. [15] J. Habermas. La Teoría de la Comunicación Acción, Volumen Uno, La Razón y la Racionalización de la Sociedad. Beacon Press, 1984. [16] K. Jensen. Redes Petri coloreadas: Conceptos básicos, métodos de análisis y usos prácticos (Volumen 1). Springer, 1997. [17] M. Kollingbaum y T. Norman. Estrategias para resolver conflictos de normas con razonamiento práctico. En el Taller de Coordinación de la CEPA en Sociedades de Agentes Emergentes 2004, 2004. [18] J.-L. Koning, G. Francois e Y. Demazeau. Formalización y prevalidación para protocolos de interacción en sistemas multiagente. En ECAI, págs. 298 a 307, 1998. [19] B. Kramer y J. Mylopoulos. Representación del conocimiento. En S. C. Shapiro, editor, Enciclopedia de Inteligencia Artificial, volumen 1, páginas 743-759. John Wiley & Sons, 1992. [20] F. Lin, D. H. Norrie, W. Shen y R. Kremer. Un enfoque basado en esquemas para especificar las políticas de conversación. En Temas de Comunicación de Agentes, págs. 193-204, 2000. [21] N. Minsky. Interacción gobernada por la ley (LGI): Un mecanismo de coordinación y control distribuido (Una introducción y un manual de referencia). Informe técnico, Universidad Rutgers, 2005. [22] T. Murata. Redes Petri: Propiedades, análisis y aplicaciones. Actas del IEEE, 77(4):541-580, 1989. [23] S. Parsons, C. Sierra y N. Jennings. Agentes que razonan y negocian discutiendo. Diario de Lógica y Computación, 8(3):261-292, 1998. [24] A. Ricci y M. Viroli. Artefactos de Coordinación: Una Abstracción Unificante para la Coordinación de Ingeniería Mediada por el Medio Ambiente en MAS. Informatica, 29:433-443, 2005. [25] G. Sartor. Conflictos normativos en el razonamiento jurídico. Inteligencia Artificial y Ley, 1(2-3):209-235, junio de 1992. [26] M. Sergot. Una teoría computacional de posiciones normativas. ACM Trans. Comput. Lógica, 2(4):581-622, 2001. [27] W. W. Vasconcelos, M. Kollingbaum, y T. Norman. Resolver conflictos e incoherencias en las organizaciones virtuales reguladas por normas. En Actas de AAMAS 07, Hawaii, EE.UU., 2007. IFAAMAS. [28] G. H. von Wright. Norma y acción: Una investigación lógica. Routledge y Kegan Paul, Londres, 1963. [29] M. Wooldridge. Una introducción a los sistemas multiagente. John Wiley & Sons, Chichester, Reino Unido, febrero de 2002. El Sexto Intl. Conjunto Conf. sobre agentes autónomos y sistemas de agentes múltiples (AAMAS 07) 643 ",
            "error": []
        },
        "norm conflict": {
            "translated_key": "conflicto de normas",
            "translated_annotated_text": "Gestión de Normas Distribuidas en Sistemas Regulados Multi-Agente ∗ Dorian Gaertner Dept. de Computación, Imperial College London, Londres SW7 2AZ, Reino Unido dg00@doc.ic.ac.uk Andrés García-Camino, Pablo Noriega, J.-A. Rodriguez-Aguilar IIIA-CSIC, 08193 Bellaterra, España {andres,pablo,jarážiya.csic.es Wamberto Vasconcelos Dept. de Ciencias de la Computación, Universidad de Aberdeen, Aberdeen AB24 3UE, Reino Unido wvasconcelos@acm.org RESUMEN Las normas son ampliamente reconocidas como un medio de coordinar sistemas multi-agentes. La gestión distribuida de las normas es una cuestión difícil y observamos una falta de realizaciones computacionales verdaderamente distribuidas de los modelos normativos. Con el fin de regular el comportamiento de los agentes autónomos que participan en múltiples actividades relacionadas, proponemos un modelo normativo, la Estructura Normativa (NS), un artefacto que se basa en la propagación de posiciones normativas (obligaciones, prohibiciones, permisos), como consecuencias de las acciones de los agentes. Dentro de un NS, los conflictos pueden surgir debido a la naturaleza dinámica del MAS y la concurrencia de acciones de los agentes. Sin embargo, garantizar la libertad de conflicto de un NS en el momento del diseño es computacionalmente intratable. Demostramos esto formalizando la noción de conflicto, proporcionando un mapeo de los NS en las Redes Petri Coloreadas y tomando prestado los resultados teóricos bien conocidos de ese campo. Dado que se requiere la resolución de conflictos en línea, presentamos un algoritmo tratable que se empleará de forma distribuida. Luego demostramos que este algoritmo es primordial para la promulgación distribuida de un NS. Categorías y sujetos Descriptores I.2.11 [Inteligencia Artificial Distribuida]: Idiomas y estructuras Términos generales Algoritmos, Diseño, Teoría 1. INTRODUCCIÓN Una característica fundamental de los sistemas multiagente abiertos y regulados en los que interactúan agentes autónomos, es que los agentes participantes están destinados a cumplir con las convenciones del sistema. Las normas pueden utilizarse para modelar tales convenciones y, por lo tanto, como medio para regular el comportamiento observable de los agentes [6, 29]. Hay muchas contribuciones sobre el tema de las normas de sociólogos, filósofos y lógicos (por ejemplo, [15, 28]). Sin embargo, hay muy pocas propuestas para la realización computacional de modelos normativos - la forma en que las normas pueden integrarse en el diseño y ejecución de MAS. Los pocos que existen (e.g. [10, 13, 24]), funcionan de manera centralizada, lo que crea cuellos de botella y puntos de fallo únicos. Hasta donde sabemos, ninguna propuesta apoya verdaderamente la promulgación distribuida de entornos normativos. En nuestro documento abordamos ese problema y proponemos medios para manejar los compromisos contradictorios en sistemas abiertos, regulados y multiagentes de manera distribuida. El tipo de MAS regulado que contemplamos consiste en actividades múltiples, simultáneas, relacionadas donde los agentes interactúan. Cada agente puede participar simultáneamente en varias actividades, y cambiar de una actividad a otra. Las acciones de un agente dentro de una actividad pueden tener consecuencias en forma de posiciones normativas (es decir. obligaciones, permisos y prohibiciones) [26] que puedan limitar su comportamiento futuro. Por ejemplo, un agente comprador que se queda sin crédito puede estar prohibido hacer más ofertas, o un agente vendedor está obligado a entregar después de cerrar un acuerdo. Asumimos que los agentes pueden optar por no cumplir todas sus obligaciones y, por lo tanto, pueden ser sancionados por el MAS. Obsérvese que, cuando se distribuyen las actividades, las posiciones normativas deben derivarse de las actividades en las que se generan a aquellas en las que surten efecto. Por ejemplo, la obligación de los vendedores de arriba debe fluir (o propagarse) de una actividad de negociación a una actividad de entrega. Dado que en un MAS abierto y regulado no se pueden incorporar aspectos normativos en el diseño de los agentes, adoptamos la opinión de que el MAS debe complementarse con un conjunto separado de normas que regulen aún más el comportamiento de los agentes participantes. Para modelar la separación de preocupaciones entre el nivel de coordinación (interacciones de agentes) y el nivel normativo (propagación de posiciones normativas), proponemos un artefacto llamado Estructura Normativa (NS). Dentro de un NS pueden surgir conflictos debido a la naturaleza dinámica del MAS y la concurrencia de acciones de los agentes. Por ejemplo, un agente puede estar obligado y prohibido a realizar el 636 978-81-904262-7-5 (RPS) c 2007 IFAAMAS muy mismo acción en una actividad. Dado que la regulación de un MAS implica que los agentes participantes deben ser conscientes de la validez de las acciones que tienen lugar dentro de él, dichos conflictos deben ser identificados y posiblemente resueltos si se necesita una reivindicación de validez para que un agente realice una acción o sea sancionado. Sin embargo, garantizar la libertad de conflicto de un NS en el momento del diseño es computacionalmente intratable. Demostramos esto formalizando la noción de conflicto, proporcionando un mapeo de los NS en las redes de Petri de colores (CPNs) y tomando prestado los resultados teóricos bien conocidos del campo de los CPNs. Creemos que se requiere la detección y resolución de conflictos en línea. Por lo tanto, presentamos un algoritmo tratable para la resolución de conflictos. Este algoritmo es primordial para la promulgación distribuida de un NS. El documento se organiza de la siguiente manera. En la Sección 2 detallamos un escenario para servir de ejemplo a lo largo del artículo. A continuación, en la Sección 3 definimos formalmente el artefacto de la estructura normativa. Además, en la sección 4 formalizamos la noción de conflicto para posteriormente analizar la complejidad de la detección de conflictos en términos de RCP en la sección 5. En la sección 6 se describe la gestión computacional de los NS describiendo su promulgación y presentando un algoritmo para la resolución de conflictos. Por último, comentamos sobre la labor conexa, sacamos conclusiones e informamos sobre la labor futura en la sección 7. 2. SCENARIO Utilizamos un escenario de cadena de suministro en el que empresas e individuos se reúnen en un mercado en línea para realizar negocios. El procedimiento de transacción global puede organizarse como seis actividades distribuidas, representadas como nodos en el diagrama de la Figura 1. En ellas participan diferentes participantes cuyo comportamiento se coordina a través de protocolos. En este escenario, los agentes pueden desempeñar uno de los cuatro papeles: marExit Inscripción Pago Entrega Negociación Coordinación Modelo Contrato Figura 1: Estructura de actividad del contador de ketplace (acc), cliente, proveedor (supp) y gerentes de almacén (wm). Las flechas que conectan las actividades representan cómo los agentes pueden moverse de una actividad a otra. Después de registrarse en el mercado, los clientes y proveedores se reúnen en una actividad en la que negocian los términos de su transacción, es decir. los precios, los importes de las mercancías que deban entregarse, los plazos y otros detalles. En la actividad contractual, se establece el pedido y se prepara una factura. El cliente participará entonces en una actividad de pago, verificando su solvencia e instruyendo a su banco a transferir la cantidad correcta de dinero. Mientras tanto, el proveedor se encargará de la entrega de las mercancías (por ejemplo: a través de un administrador de almacén) en la actividad de entrega. Finalmente, los agentes pueden salir del mercado conforme a un protocolo de salida predeterminado. El contable del mercado participa en la mayoría de las actividades como proveedor confiable de herramientas de auditoría. En el resto del documento nos basaremos en este escenario para ilustrar la noción de estructura normativa e ilustrar nuestro enfoque de la detección y resolución de conflictos en un entorno distribuido. 3. ESTRUCTURA NORMATIVA En los agentes MASs interactúan según protocolos que naturalmente se distribuyen. Abogamos por que las acciones en uno de esos protocolos puedan tener un efecto en la promulgación de otros protocolos. Algunas acciones pueden ser prohibidas u obligatorias, por ejemplo. Tomamos posiciones normativas para ser obligaciones, prohibiciones y permisos similares al trabajo descrito en [26]. La intención de agregar o eliminar una posición normativa que llamamos comando normativo. Los casos de posiciones normativas en un protocolo también pueden tener consecuencias para otros protocolos1. Para definir nuestro lenguaje de norma y especificar cómo se propagan las posiciones normativas, nos hemos inspirado en sistemas multicontexto [14]. Estos sistemas permiten estructurar el conocimiento en teorías formales distintas y definir las relaciones entre ellos. Las relaciones se expresan como reglas puente - la deducibilidad de las fórmulas en algunos contextos conduce a la deducción de otras fórmulas en otros contextos. Recientemente, estos sistemas se han utilizado con éxito para definir arquitecturas de agentes [11, 23]. La metáfora se traduce a nuestro trabajo actual de la siguiente manera: la expresión de las ilocuciones y/o la existencia de posiciones normativas en algunas escenas normativas conduce a la deducción de posiciones normativas en otras escenas normativas. Nos preocupa la propagación y distribución de posiciones normativas dentro de una red de escenas normativas distribuidas como consecuencia de las acciones de los agentes. Tomamos escenas normativas para ser conjuntos de posiciones normativas y expresiones que están asociadas con un protocolo de interacción subyacente correspondiente a una actividad. En esta sección, presentamos primero un lenguaje simple que capta estos aspectos e introduce formalmente las nociones de escena normativa, regla de transición normativa y estructura normativa. Damos la semántica prevista de estas reglas y mostramos cómo controlar un MAS a través de normas en un ejemplo. 3.1 Conceptos básicos Los componentes básicos de nuestro lenguaje son términos y fórmulas atómicas: Def. 1. Un término, denotado como t, es (i) cualquier constante expresada usando minúsculas (con o sin subíndices), por ejemplo. a, b0, c o ii) cualquier variable expresada utilizando mayúsculas (con o sin subíndices), por ejemplo. X, Y, Zb o iii) cualquier función f(t1,. . . , tn), donde f es un símbolo de función n-ary y t1,.., tn son términos. Algunos ejemplos de términos y funciones son Crédito, precio u oferta (biblia, 30), siendo respectivamente una variable, una constante y una función. Estaremos haciendo uso de identificadores en todo el papel, que son términos constantes y también necesitan la siguiente definición: Def. 2. Una fórmula atómica es cualquier construcción p(t1,. . . , tn), donde p es un símbolo predicado n-ary y t1,. . . , son términos. El conjunto de todas las fórmulas atómicas se denota como Δ. Nos centramos en una clase expresiva de MASs en la que la interacción se lleva a cabo por medio de actos de discurso ilocutionarios intercambiados entre los agentes participantes: Def. 3. I I I son las fórmulas atómicas terrestres que tienen la forma p(ag, r, ag, r, , t) donde p es un elemento de 1 Aquí, abstracto de protocolos y se refieren a ellos genéricamente como actividades. El Sexto Intl. Conjunto Conf. en Agentes Autónomos y Sistemas Multi-Agentes (AAMAS 07) 637 un conjunto de partículas ilocucionarias (por ejemplo: informar, petición, oferta); ag, ag son identificadores de agente; r, r son identificadores de rol; , un término de base arbitrario, es el contenido del mensaje, construido a partir de un lenguaje de contenido compartido; t  N es un sello de tiempo. El significado intuitivo de p(ag, r, ag, r, m, t) es que agente ag jugando rol r enviado mensaje m a agente ag jugando rol r en el momento t. Un ejemplo de una ilocución es informar(ag4, supp, ag3, cliente, offer(wire, 12), 10). A veces es útil referirse a las ilocuciones que no están totalmente fundamentadas, es decir, aquellas que pueden contener variables no instantiated (libres). En la descripción de un protocolo, por ejemplo, los valores precisos del mensaje intercambiado pueden quedar sin especificar. Durante la promulgación de los agentes del protocolo se producirán los valores reales que darán lugar a una ilocución del suelo. Así podemos definir esquemas de ilocución: Def. 4. Un esquema de ilocución ̄I es cualquier fórmula atómica p(ag, r, ag, r, ♥, t) en la que algunos de los términos pueden ser variables o pueden contener variables. 3.2 Definición formal de la noción de NS Primero definimos las escenas normativas de la siguiente manera: Def. 5. Una escena normativa es una tupla s = ids, Δs donde los ids son un identificador de escena y Δs es el conjunto de fórmulas atómicas Por ejemplo, una instantánea del estado de la escena normativa de entrega de nuestro escenario podría ser representada como: Δs = 8 < : utt(request(sean, client, kev, wm, receive(wire, 200), 20)), utt(accept(kev, wm, seen, customer, receive(wire, 200), 30)) 9 = ; Es decir, Tenga en cuenta que el estado de una escena normativa Δs evoluciona con el tiempo. Estas escenas normativas están conectadas entre sí a través de transiciones normativas que especifican cómo las expresiones y posiciones normativas en una escena afectan a otras escenas normativas. Como se mencionó anteriormente, las actividades no son independientes, ya que las ilocuciones pronunciadas en algunas de ellas pueden tener un efecto en otras. Las reglas normativas de transición definen las condiciones bajo las cuales se genera un comando normativo. Estas condiciones son declaraciones o posiciones normativas asociadas a un protocolo dado (denominadas por ejemplo. actividad : expresión ) que dan un comando normativo, es decir. la adición o supresión de otra posición normativa, posiblemente relacionada con una actividad diferente. Nuestras reglas de transición están así definidas: Def. 6. Una regla de transición normativa R es de la forma: R ::= V C V ::= ids : D  V, V D ::= N  utt( ̄I) N ::= per( ̄I)  prh( ̄I)  obli( ̄I) C ::= add(ids : N)  remove(ids : N) donde ̄I es un esquema permiso, prohibición u obligación), ids es un identificador de la actividad s y C es un comando normativo. Dotamos nuestro lenguaje con la semántica habitual de los lenguajes basados en reglas [19]. Las reglas trazan una estructura normativa existente a una nueva estructura normativa en la que sólo cambia el estado de las escenas normativas. En las definiciones siguientes nos basamos en el concepto estándar de sustitución [9]. Def. 7. Una transición normativa es un tupla b = idb, rb donde idb es un identificador y rb es una regla de transición normativa. Proponemos ampliar la noción de MAS, regulada por protocolos, con una capa adicional consistente en escenas normativas y transiciones normativas. Esta capa se representa como un gráfico bipartito que llamamos estructura normativa. Una estructura normativa relaciona escenas normativas y transiciones normativas especificando qué posiciones normativas deben generarse o eliminarse en qué escenas normativas. Def. 8. Una estructura normativa es un gráfico bipartito etiquetado NS = Nodos, bordes, Lin, Lout. Nodos es un conjunto de Sâ B donde S es un conjunto de escenas normativas y B es un conjunto de transiciones normativas. Edges es un conjunto Ain Aout donde Ain  S × B es un conjunto de arcos de entrada etiquetados con una fórmula atómica utilizando la función de etiquetado Lin : Ain → D; y Aout  B × S es un conjunto de arcos de salida etiquetados con una posición normativa utilizando la función de etiquetado Lout : Aout → N. Lo siguiente debe contener: 1. Cada fórmula atómica que aparece en el LHS de una regla rb debe ser de la forma (ids : D) donde s â € € € € TM € € € € € € € € € € € € € € € € € € € € € € € € € Ain tal que es = La fórmula atómica que aparece en el RHS de una regla rb debe ser de la forma add(ids : N) o remove(ids : N) donde s â € S y â € Aout tal que aout = (b, s) y Lout (aout ) = N. 3. Ain tal que a = (s, b) y b = idb, rb y Lin (a) = D entonces (ids:D) debe ocurrir en el LHS de rb. 4. Afuera de tal manera que a = (b, s) y b = idb, rb y Lout (a) = N luego add(ids : N) o remove(ids : N) deben ocurrir en el RHS de rb. Los dos primeros puntos aseguran que cada fórmula atómica en el LHS de una regla de transición normativa etiqueta un arco que entra en la transición normativa apropiada en la estructura normativa, y que la fórmula atómica en el RHS etiqueta el arco saliente correspondiente. Los puntos tres y cuatro aseguran que las etiquetas de todos los arcos entrantes se utilicen en el LHS de la regla de transición normativa en la que entran estos arcos, y que las etiquetas de todos los arcos salientes se utilicen en el RHS de la regla de transición normativa que estos arcos dejan. 3.3 Semántica Destinada La semántica formal se definirá mediante un mapeo a Redes Petri Coloradas en la Sección 5.1. Aquí comenzamos a definir la semántica prevista de las reglas normativas de transición describiendo cómo una regla cambia un escenario normativo de una estructura normativa existente que produce una nueva estructura normativa. Cada regla se activa una vez para cada sustitución que unifica el lado izquierdo V de la regla con el estado de las escenas normativas correspondientes. Una fórmula atómica (es decir, una declaración o una posición normativa) si es unificable con una declaración o posición normativa que pertenece al estado del escenario normativo correspondiente. Cada vez que se activa una regla, se lleva a cabo el comando normativo especificado a la derecha de esa regla, con la intención de añadir o eliminar una posición normativa del estado de la escena normativa correspondiente. Sin embargo, la adición no es incondicional, ya que pueden surgir conflictos. Este tema se tratará en las secciones 4 y 6.1. 638 La Sexta Intl. Conjunto Conf. en Agentes Autónomos y Sistemas Multi-Agentes (AAMAS 07) 3.4 Ejemplo En nuestro ejemplo de ejecución tenemos la siguiente regla de transición normativa ejemplar: „ pago : obli(inform(X, cliente, Y, acc, pay(Z, P, Q, T)), pago : utt(inform(X, cliente, Y, acc, pay(Z, P, Q), T)) « entrega : a La norma es una obligación del agente Y (esta vez asumiendo el papel de gerente de almacén wm) de enviar un mensaje al cliente X que el artículo Z ha sido entregado. En la Figura 2 se muestra una representación diagnóstica de cómo se relacionan las actividades y una estructura normativa: Pago Entrega Contrato Nivel Normativo Salida Registro Pago Entrega Negociación Nivel de Coordinación Contrato nt Figura 2: Actividades y Estructura Normativa A medida que se pronuncian las ilocuciones durante las actividades, surgen posiciones normativas. Las preferencias y las posiciones normativas se combinan en normas de transición, lo que provoca el flujo de posiciones normativas entre las distintas situaciones normativas. La conexión entre los dos niveles se describe en la sección 6.2. 4. DEFINICIÓN DE CONFLICTOS Los términos conflicto deontico e inconsistencia deontica se han utilizado indistintamente en la literatura. Sin embargo, en este trabajo adoptamos el punto de vista de [7] en el que los autores sugieren que surge una inconsistencia deontica cuando una acción es simultáneamente permitida y prohibida - ya que un permiso no puede ser actuado en consecuencia, no se produce un conflicto real. Sin embargo, las situaciones en que una acción está simultáneamente obligada y prohibida son conflictos deonticos, ya que tanto las obligaciones como las prohibiciones influyen en los comportamientos en conflicto. El contenido de las posiciones normativas en este trabajo son ilocuciones. Por lo tanto, surge un conflicto normativo cuando una ilocución está simultáneamente obligada y prohibida. Proponemos utilizar la noción estándar de unificación [9] para detectar cuándo se superponen una prohibición y un permiso. Por ejemplo, una obligación obli(informar(A1, R1, A2, R2, p(c, X, T)) y una prohibición prh(informar(a1, r1, a2, r2, p(Y, d), T)) están en conflicto ya que se unifican en el punto Capturamos formalmente esta noción: Def. 9. Un conflicto (deontico) surge entre dos posiciones normativas N y N bajo una sustitución Es decir, una prohibición y una obligación están en conflicto si, y sólo si, sus ilocuciones se unifican en virtud de La sustitución, llamada aquí el conjunto de conflictos, unifica los agentes, roles y fórmulas atómicas. Asumimos que unificar es una implementación adecuada de un algoritmo de unificación que i) termina siempre (posiblemente fallando, si no se puede encontrar un unificador); ii) es correcto; y iii) tiene complejidad computacional lineal. Las incoherencias causadas por la misma ilocución, que se permiten y prohíben simultáneamente, pueden formalizarse de manera similar. En este trabajo nos centramos en los conflictos de prohibición/obligación, pero la maquinaria computacional introducida en la Sección 6.1 también puede ser utilizada para detectar inconsistencias de prohibición/permiso, si sustituimos la modalidad obli por per. 5. FORMALIZACIÓN DEL CONFLICTO-FREEDOM En esta sección presentamos algunos conocimientos de fondo sobre CPN asumiendo una comprensión básica de las redes Petri ordinarias. Para detalles técnicos, remitimos al lector a [16]. A continuación, mapeamos los NS a los CPN y analizamos sus propiedades. Los CPN combinan la fuerza de las redes Petri con la fuerza de los lenguajes de programación funcionales. Por un lado, las redes Petri proporcionan los primitivos para la descripción de la sincronización de los procesos concurrentes. Como se observa en [16], los CPN tienen una semántica que se basa en la verdadera concurrencia, en lugar de entrelazarse. En nuestra opinión, es más fácil trabajar con una semántica de verdadera moneda porque es la forma en que prevemos la conexión entre el nivel de coordinación y el nivel normativo de un sistema multi-agente. Por otra parte, los lenguajes de programación funcionales utilizados por los CPN proporcionan los primitivos para la definición de los tipos de datos y la manipulación de sus valores de datos. Por lo tanto, podemos traducir fácilmente expresiones de una estructura normativa. Por último, pero no por ello menos importante, los CPN tienen una semántica bien definida que define inequívocamente el comportamiento de cada CPN. Además, los CPN tienen un gran número de métodos e instrumentos de análisis formales mediante los cuales se pueden demostrar las propiedades de los CPN. En resumen, los CPN nos proporcionan todas las características necesarias para razonar formalmente sobre las estructuras normativas, dado que se proporciona una cartografía adecuada. De acuerdo con las redes Petri, los estados de un CPN están representados por medio de lugares. Pero a diferencia de Petri Nets, cada lugar tiene un tipo de datos asociado determinando el tipo de datos que el lugar puede contener. Un estado de un CPN se llama marca. Consiste en un número de fichas colocadas en los lugares individuales. Cada token lleva un valor de datos que tiene el tipo del lugar correspondiente. En general, un lugar puede contener dos o más tokens con el mismo valor de datos. Por lo tanto, una marca de un CPN es una función que mapea cada lugar en un multi-set2 de tokens del tipo correcto. Uno a menudo se refiere a los valores token como colores token y uno también se refiere a los tipos de datos como conjuntos de colores. Los tipos de un CPN pueden ser arbitrariamente complejos. Las acciones en un PCN están representadas mediante transiciones. Un arco entrante en una transición desde un lugar indica que la transición puede eliminar tokens del lugar correspondiente mientras que un arco saliente indica que la transición puede añadir tokens. El número exacto de tokens y sus valores de datos son determinados por las expresiones de arco, que se codifican utilizando el lenguaje de programación elegido para el CPN. Una transición está habilitada en un CPN si y sólo si todos los 2 A multi-set (o bolsa) es una extensión a la noción de conjunto, permitiendo la posibilidad de múltiples apariencias del mismo elemento. El Sexto Intl. Conjunto Conf. en Agentes Autónomos y Sistemas Multi-Agentes (AAMAS 07) 639 variables en las expresiones de sus arcos entrantes se unen a algunos valores (cada una de estas fijaciones se refiere como un elemento vinculante). Si es así, la transición puede ocurrir eliminando tokens de sus lugares de entrada y añadiendo tokens a sus lugares de salida. Además de las expresiones de arco, es posible conectar una expresión booleana de guardia (con variables) a cada transición. Juntando todos los elementos de arriba obtenemos una definición formal de CPN que se empleará más adelante para propósitos de mapeo. Def. 10. Un CPN es un conjunto finito de tipos no vacíos, también llamados conjuntos de colores; ii) P es un conjunto finito de lugares; iii) T es un conjunto finito de transiciones; iv) A es un conjunto finito de arcos; v) N es una función de nodo definida de A a P × T • T × P; vi) C es una función de color de P a فارسى; vii) G es una De acuerdo con las redes Petri ordinarias, el comportamiento concurrente de un CPN se basa en la noción de paso. Formalmente, un paso es un no vacío y finito multi-set sobre el conjunto de todos los elementos de unión. Deje que el paso S se active en una marca M. Entonces, S puede ocurrir, cambiando la marca M a M. Además, decimos que el marcado M es directamente accesible desde el marcado M por la ocurrencia del paso S, y lo denotamos por M[S > M. Una secuencia de ocurrencia finita es una secuencia finita de pasos y marcas: M1[S1 > M2. . . Mn[Sn > Mn+1 de tal manera que n+N y Mi[Si > Mi+1 . . , n}. El conjunto de todas las marcas posibles alcanzables para una red neta de una marca M se llama su conjunto de alcance, y se denota como R(Net, M). 5.1 Mapeo a redes de Petri de colores Nuestra estructura normativa es un gráfico bipartito etiquetado. Lo mismo puede decirse de una red Petri coloreada. Estamos presentando un mapeo f de uno a otro, con el fin de proporcionar semántica para la estructura normativa y probar las propiedades al respecto mediante el uso de resultados teóricos bien conocidos de trabajo en CPNs. El mapeo f hace uso de correspondencias entre escenas normativas y lugares CPN, transiciones normativas y transiciones CPN y finalmente, entre etiquetas de arco y expresiones de arco CPN. S → P B → T Lin Lout → E El conjunto de tipos es el conjunto singleton que contiene el color NP (es decir. * = {NP}). Este tipo complejo está estructurado de la siguiente manera (utilizamos CPN-ML [4] sintaxis): color NPT = con Obl  Per  Prh  NoMod color IP = con infor  declaramos  offer color UTT = record illp : IP ag1, role1, ag2, role2 : string content : string time : int color NP = Los arcos son trazados casi directamente. A es un conjunto finito de arcos y N es una función de nodo, de tal manera que Aa Aa Ain Aout. N(a) = a. La función de inicialización I se define como I(p) = Δs ( Por último, la función de color C asigna el color NP a cada lugar: C(p) = NP (­p ­P). No estamos haciendo uso de la función de guardia G. En el trabajo futuro, esta función se puede utilizar para modelar restricciones cuando extendemos la expresividad de nuestro lenguaje de norma. 5.2 Propiedades de las estructuras normativas Después de haber definido el mapeo desde las estructuras normativas hasta las redes de Petri coloreadas, ahora analizamos las propiedades de los CPN que nos ayudan a entender la complejidad de la detección de conflictos. Una pregunta que nos gustaría responder es, si en un momento dado, una determinada estructura normativa está libre de conflictos. Tal instantánea de una estructura normativa corresponde a una marca en el CPN cartografiado. Def. 11. Dada una marca Mi, esta marca es libre de conflicto si p  P. np1, np2  Mi(p) tal que np1.mode = Obl y np2.mode = Prh y np1.illoc y np2.illoc unificar bajo una sustitución válida. Otra pregunta interesante sería si se producirá un conflicto a partir de una instantánea del sistema propagando las posiciones normativas. Para responder a esta pregunta, primero traducimos la instantánea de la estructura normativa al CPN correspondiente y luego ejecutamos la secuencia de ocurrencia finita de marcas y pasos, verificando la libertad de conflicto de cada marca a medida que avanzamos. Def. 12. Dada una marca Mi, una secuencia de ocurrencia finita Si, Si+1,..., Sn se llama libre de conflictos, si y sólo si Mi[Si > Mi+1. . . Mn[Sn > Mn+1 y Mk están libres de conflictos para todos los k, de modo que i ≤ k ≤ n + 1. Sin embargo, la cuestión principal que nos gustaría investigar, es si una estructura normativa dada es o no resistente a los conflictos, es decir, si los agentes que promulgan el MAS son capaces de provocar conflictos a través de sus acciones. Tan pronto como se incluye la posibilidad de acciones (o declaraciones) de agentes autónomos, se pierde el determinismo. Después de haber mapeado la estructura normativa a un CPN, ahora añadimos modelos de CPN de las interacciones de agentes. Cada forma de interacción con el agente (es decir, cada actividad) se puede modelar utilizando CPN en la línea de Cost et al. [5]. Estos CPN no determinantes alimentan tokens en el CPN que modela la estructura normativa. Esto lleva a la introducción de no-determinismo en el PCN combinado. La mitad inferior de la figura 3 muestra parte de un modelo CPN de un protocolo de agente donde el arco denotado con 1 representa alguna pronunciación de una ilocución por un agente. La transición de destino de este arco, no sólo mueve un token al siguiente estado de este CPN, sino que también coloca un token en el lugar correspondiente a la escena normativa apropiada en el modelo del CPN de la estructura normativa (a través del arco 2). La transición 3 finalmente podría propagar ese símbolo en forma de una obligación, por ejemplo. Así, a partir de una marca dada, muchas secuencias de ocurrencia diferentes son posibles dependiendo de las acciones de los agentes. Utilizamos el conjunto de alcance R para definir una situación en la que los agentes no pueden causar conflictos. 640 La Sexta Intl. Conjunto Conf. sobre Agentes Autónomos y Sistemas Multi-Agentes (AAMAS 07) Figura 3: Construcción del CPN combinado Def. 13. Dado un N neto, una marca M es resistente a los conflictos si y sólo si todas las marcas en R(N,M) están libres de conflictos. La verificación de la libertad de conflicto de una marca se puede hacer en tiempo polinomio mediante la verificación de todos los lugares del CPN en busca de fichas en conflicto. La libertad de conflicto de una secuencia de ocurrencia en el CPN que representa la estructura normativa también se puede hacer en tiempo polinomio ya que esta secuencia es determinista dada una instantánea. El hecho de que se diseñe o no una estructura normativa corresponde con seguridad a la comprobación de la resistencia a los conflictos de la marca M0 inicial. Ahora, verificar la resistencia al conflicto de una marca se convierte en una tarea muy difícil. Corresponde al problema de la accesibilidad en un CPN: ¿se puede alcanzar un estado o se puede lograr una marca que contenga un conflicto?. Este problema de alcanzabilidad es conocido por ser NP-completo para las redes Petri ordinarias [22] y como las RCP son funcionalmente idénticas, no podemos esperar verificar la resistencia a los conflictos de una estructura normativa fuera de línea en un tiempo razonable. Por lo tanto, se necesitan mecanismos de distribución y tiempo de ejecución para garantizar que una estructura normativa mantenga la coherencia. Presentamos uno de esos mecanismos en la sección siguiente. 6. GESTIÓN DE ESTRUCTURAS NORMATIVAS Una vez detectado un conflicto (según se define en la Sección 4), proponemos emplear al unificador para resolver el conflicto. En nuestro ejemplo, si las variables en prh(inform(a1, r1, a2, r2, p(Y, d), T)) no obtienen los valores especificados en la sustitución Sin embargo, en lugar de computar el conjunto de complementos de una sustitución (que puede ser un conjunto infinito) proponemos anotar la prohibición con el propio unificador y utilizarla para determinar cuáles son las variables de esa prohibición no pueden ser en futuras unificaciones para evitar un conflicto. Por lo tanto denotamos prohibiciones anotadas como prh( ̄I) . . Es un conjunto de unificadores. Las normas anotadas3 se interpretan como constructos deonticos con influencias restringidas, es decir, su efecto (sobre agentes, roles e ilocuciones) ha sido limitado por el conjunto de unificadores. Una prohibición puede estar en conflicto con varias obligaciones en una escena normativa dada s = id, Δ y tenemos que registrar (y posiblemente evitar) todos estos conflictos. Definimos a continuación un algoritmo que garantiza que una posición normativa se añada a una escena normativa de tal manera que no cause ningún conflicto. 3 Aunque proponemos limitar las prohibiciones, el mismo mecanismo puede utilizarse para definir la reducción de obligaciones en su lugar. Estas diferentes políticas dependen de la semántica deontica prevista y de los requisitos de los sistemas abordados. Por ejemplo, algunos MAS pueden exigir que sus agentes no actúen en presencia de conflictos, es decir, que se reduzca la obligación. 6.1 Resolución de conflictos Proponemos una forma de resolver los conflictos normativos mediante la unificación. Detectamos la superposición de las influencias de las normas, es decir. cómo afectan al comportamiento de los agentes afectados, y reducimos la influencia de la posición normativa, mediante el uso adecuado de las anotaciones al comprobar si la norma se aplica a las ilocuciones. El algoritmo mostrado en la Figura 4 muestra cómo mantenemos un conjunto de normas libres de conflictos. Añade una norma dada N a un estado normativo existente, libre de conflictos Δ, obteniendo un nuevo estado normativo resultante Δ que es libre de conflictos, es decir, sus prohibiciones están anotadas con un conjunto de conjuntos de conflictos que indican qué fijaciones para variables deben evitarse para que los conflictos no tengan lugar. algoritmo addNorm(N, Δ) comienza 1 marca de tiempo(N) 2 caso N de 3 per( ̄I): Δ := Δ  {N} 4 prh(I): si N  Δ s.t. Conflict(N, N, Las líneas 4-5 abordan el caso cuando intentamos agregar una prohibición de base a un estado normativo: si entra en conflicto con cualquier obligación, entonces se descarta; de lo contrario se añade al estado normativo. En las líneas 6 a 12 se describe la situación en que la posición normativa que debe añadirse es una prohibición no básica. En este caso, el algoritmo inicializa un conjunto vacío y bucles (línea 9-10) a través de las normas N en el antiguo estado normativo Δ. Después de encontrar uno que entra en conflicto con N, el algoritmo actualiza el valor de la nueva configuración de conflicto (línea 10). Mediante el bucle a través de Δ, somos capaces de comprobar cualquier conflicto entre la nueva prohibición y las obligaciones existentes, construyendo adecuadamente la anotación  que se utilizará al añadir N a Δ en la línea 11. En las líneas 13 a 27 se describe cómo se ajusta una nueva obligación a un estado normativo existente. Hacemos uso de dos conjuntos inicialmente vacíos, temporales, Δ1, Δ2. El algoritmo pasa a través de Δ (líneas 16-25) recogiendo las prohibiciones anotadas N Hay, sin embargo, dos casos a tratar: el de cuando un motivo La Sexta Intl. Conjunto Conf. sobre los agentes autónomos y los sistemas multiagentes (AAMAS 07) se encuentra la prohibición 641 (línea 17), y su excepción, que abarca las prohibiciones no terrestres (línea 20). En ambos casos, la antigua prohibición se almacena en Δ1 (líneas 18 y 23) para ser posteriormente retirada de Δ (línea 26). Sin embargo, en el caso de una prohibición no terrestre, el algoritmo actualiza su anotación de conjuntos de conflicto (línea 24). El bucle garantiza que se lleve a cabo una búsqueda exhaustiva (lineal) a través de un estado normativo, comprobando si la nueva obligación está en conflicto con cualquier prohibición existente, posiblemente actualizando las anotaciones de estas prohibiciones en conflicto. En la línea 26 el algoritmo construye la nueva actualización Δ eliminando las antiguas prohibiciones almacenadas en Δ1 y añadiendo las prohibiciones actualizadas almacenadas en Δ2 (si las hay), así como la nueva obligación N. Nuestro algoritmo propuesto es correcto en que, para una posición normativa dada N y un estado normativo Δ, proporciona un nuevo estado normativo Δ en el que todas las prohibiciones tienen anotaciones que registran cómo se unifican con las obligaciones existentes. Sin embargo, las anotaciones pueden estar vacías: este es el caso cuando tenemos una prohibición básica o una prohibición que no unifica/conflige con ninguna obligación. Los permisos no afectan a nuestro algoritmo y se tratan adecuadamente (línea 3). Cualquier intento de insertar una prohibición de base que entre en conflicto, produce el mismo estado normativo (línea 4). Cuando se añade una nueva obligación, el algoritmo garantiza que se tienen en cuenta todas las prohibiciones (líneas 14 a 27), lo que conduce a la eliminación de las prohibiciones sobre el terreno en conflicto o a la actualización de las anotaciones de las prohibiciones no sobre el terreno. El algoritmo siempre termina: los bucles están sobre un conjunto finito Δ y los conflictos comprueban y establecen operaciones siempre terminan. La complejidad del algoritmo es lineal: el conjunto Δ sólo se examina una vez para cada caso posible de norma que se añade. Al gestionar los estados normativos también es posible que necesitemos eliminar posiciones normativas. Esto es sencillo: los permisos se pueden retirar sin ningún problema; las prohibiciones anotadas también se pueden eliminar sin más consideraciones; sin embargo, las obligaciones requieren algunas tareas domésticas. Cuando se va a eliminar una obligación, debemos verificarla contra todas las prohibiciones anotadas a fin de actualizar sus anotaciones. Aplicamos la comprobación de conflicto y obtenemos un unificador, luego eliminamos este unificador de la anotación de prohibiciones. Invocamos el algoritmo de eliminación como removeNorm(N, Δ): devuelve un nuevo estado normativo Δ en el que N ha sido eliminado, con posibles alteraciones a otras posiciones normativas como se explicó. 6.2 Promulgación de una estructura normativa La promulgación de una estructura normativa equivale a la ejecución paralela y distribuida de escenas normativas y transiciones normativas. A título ilustrativo, describiremos a continuación la interacción entre las situaciones normativas de pago y entrega y la transición normativa que los vincula en la mitad superior de la figura 2. Con este objetivo, considere, por ejemplo, que obl(inform(jules, cliente, rod, acc, pay(copper, 400, 350), T) Δpago y que Δentrega tiene prh(inform(rod,wm, jules, cliente, entregado(Z, Q), T)). Tales estados indican que el cliente Jules está obligado a pagar £400 por 350kg de cobre al contador Rod de acuerdo con la escena normativa de pago, mientras que Rod, asumiendo el papel de gerente de almacén esta vez, está prohibido entregar cualquier cosa al cliente Jules de acuerdo con la escena normativa de entrega. Para cada escena normativa, el proceso de promulgación es el siguiente. En primer lugar, procesa su cola de mensajes entrantes que contiene tres tipos de mensajes: declaraciones de la actividad a la que está vinculada; y comandos normativos para agregar o eliminar posiciones normativas. Por ejemplo, en nuestro ejemplo, la escena normativa de pago recoge la ilocución I = utt((inform(jules, cliente, varilla, acc, pay(cobre, 400, 350), 35)) para el cliente Jules pendiente de pago por cobre (a través de la flecha A en la figura 2). Las Uterancias son timestamped y subsecuentemente agregadas al estado normativo. Tendríamos Δpayment = Δpayment {I}, en nuestro ejemplo. Al recibir órdenes normativas para agregar o eliminar una posición normativa, la escena normativa invoca el algoritmo de adición o eliminación correspondiente descrito en la Sección 6.1. En segundo lugar, la escena normativa reconoce su cambio de estado al enviar un mensaje desencadenante a cada transición normativa saliente a la que está conectado. En nuestro ejemplo, el escenario normativo de pagos estaría señalando su cambio de estado a la transición normativa nt. Para las transiciones normativas, el proceso funciona de manera diferente. Debido a que cada transición normativa controla el funcionamiento de una sola regla, al recibir un mensaje de activación, encuesta cada escena normativa entrante para sustituciones de los esquemas de ilocución pertinentes en el LHS de su regla. En nuestro ejemplo, nt (responsable de la regla descrita en la Sección 3.4), encuestaría el escenario normativo de pago (vía flecha B) para sustituciones. Al recibir respuestas de ellos (en forma de conjuntos de sustituciones junto con marcas de tiempo), tiene que unificar las sustituciones de cada una de estas escenas normativas. Para cada unificación que encuentra, la regla se activa, y por lo tanto el comando normativo correspondiente se envía a lo largo de la escena normativa de salida. La transición normativa entonces mantiene un seguimiento del mensaje de disparo que envió y de las marcas de tiempo de las posiciones normativas que desencadenó el disparo. Esto se hace para asegurar que las mismas posiciones normativas en el LHS de una regla sólo desencadenen su disparo una vez. En nuestro ejemplo, nt estaría recibiendo  = {X/jules, Y/rod, Z/copper, Q/350} de la escena normativa de pagos. Dado que las substiciones en unifican con la regla nts, la regla es disparada, y el comando normativo add(delivery : obli(rod, wm, jules, client, delivery(copper, 350), T)) es enviado a lo largo de la escena normativa de entrega para obligar a Rod a entregar al cliente Jules 350kg de cobre. Después de eso, la escena normativa de entrega invocaría el algoritmo addNorm de la figura 4 con Δdelivery y N = obli(rod, wm, jules, client, delivered(copper, 350)) como argumentos. 7. TRABAJOS Y CONCLUSIONES RELACIONADOS Nuestras contribuciones en este documento son triples. En primer lugar, introducimos un enfoque para la gestión y el razonamiento de las normas de manera distribuida. Hasta donde sabemos, hay poco trabajo publicado en esta dirección. En [8, 21] se presentan dos idiomas para la aplicación distribuida de las normas en el MAS. Sin embargo, en ambos trabajos, cada agente tiene una interfaz de mensaje local que envía mensajes legales de acuerdo con un conjunto de normas. Dado que estas interfaces son locales para cada agente, las normas sólo pueden expresarse en términos de acciones de ese agente. Se trata de una grave desventaja, por ejemplo. cuando uno necesita activar una obligación para con un agente debido a un cierto mensaje de otro. La segunda contribución es la propuesta de una estructura normativa. La noción es fructífera porque permite la separación de las cuestiones normativas y de procedimiento. La estructura normativa que proponemos evidencia la similitud entre la propagación de posiciones normativas y la propagación 642 La Sexta Intl. Conjunto Conf. sobre Agentes Autónomos y Sistemas Multi-Agentes (AAMAS 07) de tokens en Redes Petri Coloradas. Esa similitud sugiere fácilmente una cartografía entre los dos, y da lugar a un tratamiento analítico conveniente de la estructura normativa, en general, y la complejidad de la detección de conflictos, en particular. La idea de modelar interacciones (en forma de conversaciones) a través de Petri Nets se ha investigado en [18], donde el medio de interacción y los agentes individuales se modelan como subredes de CPN que posteriormente se combinan para su análisis. En [5], las conversaciones se diseñan y analizan por primera vez a nivel de los CPN y posteriormente se traducen en protocolos. Lin et al. [20] mapear esquemas de conversación a CPNs. Según nuestro conocimiento, el uso de esta representación en apoyo de la detección de conflictos en el MAS regulado no ha sido reportado en otros lugares. Por último, presentamos un mecanismo distribuido para resolver los conflictos normativos. Sartor [25] trata los conflictos normativos desde el punto de vista de la teoría jurídica y sugiere una forma de ordenar las normas involucradas. Su idea se implementa en [12], pero requiere un recurso central para el mantenimiento de normas. El enfoque para la detección y resolución de conflictos es una adaptación y extensión del trabajo sobre gráficos de instanciación reportados en [17] y un algoritmo relacionado en [27]. El algoritmo presentado en el presente trabajo puede ser utilizado para administrar estados normativos distribuidos: escenas normativas que suceden en paralelo tienen un estado normativo asociado Δ al que el algoritmo se aplica de forma independiente cada vez que se introduce una nueva norma. Estas tres contribuciones que presentamos en este documento abren muchas posibilidades para el trabajo futuro. Cabe mencionar en primer lugar, que como estrategia amplia estamos trabajando en una generalización de la noción de estructura normativa para hacerla funcionar con diferentes modelos de coordinación, con un contenido deontico más rico y además de diferentes realizaciones computacionales de MAS regulado. Como primer paso en esta dirección estamos aprovechando la disociación entre los protocolos de interacción y la orientación normativa declarativa que la estructura normativa pone a disposición, para proporcionar una capa normativa para las instituciones electrónicas (como se define en [1]). Esperamos que este acoplamiento dote a las instituciones electrónicas de un entorno normativo más flexible y más expresivo. Además, queremos extender nuestro modelo a través de varias direcciones: (1) manejar la negación y las limitaciones como parte del lenguaje de la norma, y en particular la noción de tiempo; (2) dar cabida a múltiples autoridades jerárquicas de normas basadas en roles, en la línea de Cholvy y Cuppens [3] y relaciones de poder como sugiere Carabelea et al. [2]; (3) para captar en el algoritmo de resolución de conflictos diferentes semánticas relacionadas con las nociones deonticas apoyando diferentes axiomaciones (por ejemplo, fuerza relativa de la prohibición frente a la obligación, nociones deonticas predeterminadas, inconsistencias deonticas). En el lado teórico, pretendemos utilizar técnicas de análisis de CPN para caracterizar clases de CPN (por ejemplo, acíclicas, simétricas, etc.) que corresponden a familias de Estructuras Normativas susceptibles a la detección de conflictos fuera de línea. La combinación de estas técnicas junto con nuestros mecanismos de resolución de conflictos en línea pretende dotar a los diseñadores del MAS de la capacidad de incorporar normas en sus sistemas de una manera basada en principios. 8. REFERENCIAS [1] J. L. Arcos, M. Esteva, P. Noriega, J. A. Rodr guez, y C. Sierra. Ingeniería de entornos abiertos con instituciones electrónicas. Journal on Engineering Applications of Artificial Intelligence, 18(2):191-204, 2005. [2] C. Carabelea, O. Boissier, y C. Castelfranchi. Usar el poder social para permitir a los agentes razonar sobre ser parte de un grupo. En el 5o Internat. Taller, EEAT 2004, págs. 166 a 177, 2004. [3] L. Cholvy y F. Cuppens. Solución de conflictos normativos mediante la fusión de funciones. En la Quinta Conferencia Internacional sobre Inteligencia Artificial y Derecho, Washington, Estados Unidos, 1995. [4] S. Christensen y T. B. Haagh. Diseño CPN - vista general de la sintaxis CPN ML. Informe técnico, Universidad de Aarhus, 1996. [5] R. S. Cost, Y. Chen, T. W. Finin, Y. Labrou e Y. Peng. Usando petri redes de colores para modelar la conversación. In Issues in Agent Communication, págs. 178 a 192, Londres, Reino Unido, 2000. [6] F. Dignum. Agentes autónomos con normas. Inteligencia Artificial y Ley, 7(1):69-79, 1999. [7] A. Elhag, J. Breuker y P. Brouwer. Sobre el análisis formal de los conflictos normativos. Información & Comunicaciones. Techn. Ley, 9(3):207-217, Oct. 2000. [8] M. Esteva, W. Vasconcelos, C. Sierra, y J. A. Rodr guez-Aguilar. Consistencia normativa en las instituciones electrónicas. volumen 3171 (LNAI), páginas 494-505. Springer-Verlag, 2004. [9] M. Fitting. Prueba de la lógica de primer orden y del teorema automatizado. Springer-Verlag, Nueva York, Estados Unidos, 1990. [10] N. Fornara, F. Vigan`o y M. Colombetti. Un enfoque impulsado por eventos a las normas en las instituciones artificiales. En el taller AAMAS05: Agentes, normas e instituciones para sistemas multiagente regulados (ANI@REM), Utrecht, 2005. [11] D. Gaertner, P. Noriega y C. Sierra. Ampliación de la arquitectura BDI con compromisos. En Actas del IX Congreso Internacional de la Asociación Catalana de Inteligencia Artificial, 2006. [12] A. Garc a-Camino, P. Noriega, y J.-A. Rodr guez-Aguilar. Un algoritmo para la resolución de conflictos en actividades reguladas compuestas. En el 7o taller Int.Workshop - ESAW 06, 2006. [13] A. Garc a-Camino, J.-A. Rodr guez-Aguilar, C. Sierra y W. Vasconcelos. Una arquitectura distribuida para las Sociedades de Agentes de Normas. En DALT III, volumen 3904 (LNAI), páginas 89 a 105. Springer, 2006. [14] F. Giunchiglia y L. Serafini. Lógicas jerárquicas multilenguaje o: Cómo podemos prescindir de lógicas modales. Inteligencia Artificial, 65(1):29-70, 1994. [15] J. Habermas. La Teoría de la Comunicación Acción, Volumen Uno, La Razón y la Racionalización de la Sociedad. Beacon Press, 1984. [16] K. Jensen. Redes Petri coloreadas: Conceptos básicos, métodos de análisis y usos prácticos (Volumen 1). Springer, 1997. [17] M. Kollingbaum y T. Norman. Estrategias para resolver \"conflicto de normas\" en el razonamiento práctico. En el Taller de Coordinación de la CEPA en Sociedades de Agentes Emergentes 2004, 2004. [18] J.-L. Koning, G. Francois e Y. Demazeau. Formalización y prevalidación para protocolos de interacción en sistemas multiagente. En ECAI, págs. 298 a 307, 1998. [19] B. Kramer y J. Mylopoulos. Representación del conocimiento. En S. C. Shapiro, editor, Enciclopedia de Inteligencia Artificial, volumen 1, páginas 743-759. John Wiley & Sons, 1992. [20] F. Lin, D. H. Norrie, W. Shen y R. Kremer. Un enfoque basado en esquemas para especificar las políticas de conversación. En Temas de Comunicación de Agentes, págs. 193-204, 2000. [21] N. Minsky. Interacción gobernada por la ley (LGI): Un mecanismo de coordinación y control distribuido (Una introducción y un manual de referencia). Informe técnico, Universidad Rutgers, 2005. [22] T. Murata. Redes Petri: Propiedades, análisis y aplicaciones. Actas del IEEE, 77(4):541-580, 1989. [23] S. Parsons, C. Sierra y N. Jennings. Agentes que razonan y negocian discutiendo. Diario de Lógica y Computación, 8(3):261-292, 1998. [24] A. Ricci y M. Viroli. Artefactos de Coordinación: Una Abstracción Unificante para la Coordinación de Ingeniería Mediada por el Medio Ambiente en MAS. Informatica, 29:433-443, 2005. [25] G. Sartor. Conflictos normativos en el razonamiento jurídico. Inteligencia Artificial y Ley, 1(2-3):209-235, junio de 1992. [26] M. Sergot. Una teoría computacional de posiciones normativas. ACM Trans. Comput. Lógica, 2(4):581-622, 2001. [27] W. W. Vasconcelos, M. Kollingbaum, y T. Norman. Resolver conflictos e incoherencias en las organizaciones virtuales reguladas por normas. En Actas de AAMAS 07, Hawaii, EE.UU., 2007. IFAAMAS. [28] G. H. von Wright. Norma y acción: Una investigación lógica. Routledge y Kegan Paul, Londres, 1963. [29] M. Wooldridge. Una introducción a los sistemas multiagente. John Wiley & Sons, Chichester, Reino Unido, febrero de 2002. El Sexto Intl. Conjunto Conf. sobre agentes autónomos y sistemas de agentes múltiples (AAMAS 07) 643 ",
            "error": [
                ""
            ]
        },
        "electronic institution": {
            "translated_key": [],
            "translated_annotated_text": "Gestión de Normas Distribuidas en Sistemas Regulados Multi-Agente ∗ Dorian Gaertner Dept. de Computación, Imperial College London, Londres SW7 2AZ, Reino Unido dg00@doc.ic.ac.uk Andrés García-Camino, Pablo Noriega, J.-A. Rodriguez-Aguilar IIIA-CSIC, 08193 Bellaterra, España {andres,pablo,jarážiya.csic.es Wamberto Vasconcelos Dept. de Ciencias de la Computación, Universidad de Aberdeen, Aberdeen AB24 3UE, Reino Unido wvasconcelos@acm.org RESUMEN Las normas son ampliamente reconocidas como un medio de coordinar sistemas multi-agentes. La gestión distribuida de las normas es una cuestión difícil y observamos una falta de realizaciones computacionales verdaderamente distribuidas de los modelos normativos. Con el fin de regular el comportamiento de los agentes autónomos que participan en múltiples actividades relacionadas, proponemos un modelo normativo, la Estructura Normativa (NS), un artefacto que se basa en la propagación de posiciones normativas (obligaciones, prohibiciones, permisos), como consecuencias de las acciones de los agentes. Dentro de un NS, los conflictos pueden surgir debido a la naturaleza dinámica del MAS y la concurrencia de acciones de los agentes. Sin embargo, garantizar la libertad de conflicto de un NS en el momento del diseño es computacionalmente intratable. Demostramos esto formalizando la noción de conflicto, proporcionando un mapeo de los NS en las Redes Petri Coloreadas y tomando prestado los resultados teóricos bien conocidos de ese campo. Dado que se requiere la resolución de conflictos en línea, presentamos un algoritmo tratable que se empleará de forma distribuida. Luego demostramos que este algoritmo es primordial para la promulgación distribuida de un NS. Categorías y sujetos Descriptores I.2.11 [Inteligencia Artificial Distribuida]: Idiomas y estructuras Términos generales Algoritmos, Diseño, Teoría 1. INTRODUCCIÓN Una característica fundamental de los sistemas multiagente abiertos y regulados en los que interactúan agentes autónomos, es que los agentes participantes están destinados a cumplir con las convenciones del sistema. Las normas pueden utilizarse para modelar tales convenciones y, por lo tanto, como medio para regular el comportamiento observable de los agentes [6, 29]. Hay muchas contribuciones sobre el tema de las normas de sociólogos, filósofos y lógicos (por ejemplo, [15, 28]). Sin embargo, hay muy pocas propuestas para la realización computacional de modelos normativos - la forma en que las normas pueden integrarse en el diseño y ejecución de MAS. Los pocos que existen (e.g. [10, 13, 24]), funcionan de manera centralizada, lo que crea cuellos de botella y puntos de fallo únicos. Hasta donde sabemos, ninguna propuesta apoya verdaderamente la promulgación distribuida de entornos normativos. En nuestro documento abordamos ese problema y proponemos medios para manejar los compromisos contradictorios en sistemas abiertos, regulados y multiagentes de manera distribuida. El tipo de MAS regulado que contemplamos consiste en actividades múltiples, simultáneas, relacionadas donde los agentes interactúan. Cada agente puede participar simultáneamente en varias actividades, y cambiar de una actividad a otra. Las acciones de un agente dentro de una actividad pueden tener consecuencias en forma de posiciones normativas (es decir. obligaciones, permisos y prohibiciones) [26] que puedan limitar su comportamiento futuro. Por ejemplo, un agente comprador que se queda sin crédito puede estar prohibido hacer más ofertas, o un agente vendedor está obligado a entregar después de cerrar un acuerdo. Asumimos que los agentes pueden optar por no cumplir todas sus obligaciones y, por lo tanto, pueden ser sancionados por el MAS. Obsérvese que, cuando se distribuyen las actividades, las posiciones normativas deben derivarse de las actividades en las que se generan a aquellas en las que surten efecto. Por ejemplo, la obligación de los vendedores de arriba debe fluir (o propagarse) de una actividad de negociación a una actividad de entrega. Dado que en un MAS abierto y regulado no se pueden incorporar aspectos normativos en el diseño de los agentes, adoptamos la opinión de que el MAS debe complementarse con un conjunto separado de normas que regulen aún más el comportamiento de los agentes participantes. Para modelar la separación de preocupaciones entre el nivel de coordinación (interacciones de agentes) y el nivel normativo (propagación de posiciones normativas), proponemos un artefacto llamado Estructura Normativa (NS). Dentro de un NS pueden surgir conflictos debido a la naturaleza dinámica del MAS y la concurrencia de acciones de los agentes. Por ejemplo, un agente puede estar obligado y prohibido a realizar el 636 978-81-904262-7-5 (RPS) c 2007 IFAAMAS muy mismo acción en una actividad. Dado que la regulación de un MAS implica que los agentes participantes deben ser conscientes de la validez de las acciones que tienen lugar dentro de él, dichos conflictos deben ser identificados y posiblemente resueltos si se necesita una reivindicación de validez para que un agente realice una acción o sea sancionado. Sin embargo, garantizar la libertad de conflicto de un NS en el momento del diseño es computacionalmente intratable. Demostramos esto formalizando la noción de conflicto, proporcionando un mapeo de los NS en las redes de Petri de colores (CPNs) y tomando prestado los resultados teóricos bien conocidos del campo de los CPNs. Creemos que se requiere la detección y resolución de conflictos en línea. Por lo tanto, presentamos un algoritmo tratable para la resolución de conflictos. Este algoritmo es primordial para la promulgación distribuida de un NS. El documento se organiza de la siguiente manera. En la Sección 2 detallamos un escenario para servir de ejemplo a lo largo del artículo. A continuación, en la Sección 3 definimos formalmente el artefacto de la estructura normativa. Además, en la sección 4 formalizamos la noción de conflicto para posteriormente analizar la complejidad de la detección de conflictos en términos de RCP en la sección 5. En la sección 6 se describe la gestión computacional de los NS describiendo su promulgación y presentando un algoritmo para la resolución de conflictos. Por último, comentamos sobre la labor conexa, sacamos conclusiones e informamos sobre la labor futura en la sección 7. 2. SCENARIO Utilizamos un escenario de cadena de suministro en el que empresas e individuos se reúnen en un mercado en línea para realizar negocios. El procedimiento de transacción global puede organizarse como seis actividades distribuidas, representadas como nodos en el diagrama de la Figura 1. En ellas participan diferentes participantes cuyo comportamiento se coordina a través de protocolos. En este escenario, los agentes pueden desempeñar uno de los cuatro papeles: marExit Inscripción Pago Entrega Negociación Coordinación Modelo Contrato Figura 1: Estructura de actividad del contador de ketplace (acc), cliente, proveedor (supp) y gerentes de almacén (wm). Las flechas que conectan las actividades representan cómo los agentes pueden moverse de una actividad a otra. Después de registrarse en el mercado, los clientes y proveedores se reúnen en una actividad en la que negocian los términos de su transacción, es decir. los precios, los importes de las mercancías que deban entregarse, los plazos y otros detalles. En la actividad contractual, se establece el pedido y se prepara una factura. El cliente participará entonces en una actividad de pago, verificando su solvencia e instruyendo a su banco a transferir la cantidad correcta de dinero. Mientras tanto, el proveedor se encargará de la entrega de las mercancías (por ejemplo: a través de un administrador de almacén) en la actividad de entrega. Finalmente, los agentes pueden salir del mercado conforme a un protocolo de salida predeterminado. El contable del mercado participa en la mayoría de las actividades como proveedor confiable de herramientas de auditoría. En el resto del documento nos basaremos en este escenario para ilustrar la noción de estructura normativa e ilustrar nuestro enfoque de la detección y resolución de conflictos en un entorno distribuido. 3. ESTRUCTURA NORMATIVA En los agentes MASs interactúan según protocolos que naturalmente se distribuyen. Abogamos por que las acciones en uno de esos protocolos puedan tener un efecto en la promulgación de otros protocolos. Algunas acciones pueden ser prohibidas u obligatorias, por ejemplo. Tomamos posiciones normativas para ser obligaciones, prohibiciones y permisos similares al trabajo descrito en [26]. La intención de agregar o eliminar una posición normativa que llamamos comando normativo. Los casos de posiciones normativas en un protocolo también pueden tener consecuencias para otros protocolos1. Para definir nuestro lenguaje de norma y especificar cómo se propagan las posiciones normativas, nos hemos inspirado en sistemas multicontexto [14]. Estos sistemas permiten estructurar el conocimiento en teorías formales distintas y definir las relaciones entre ellos. Las relaciones se expresan como reglas puente - la deducibilidad de las fórmulas en algunos contextos conduce a la deducción de otras fórmulas en otros contextos. Recientemente, estos sistemas se han utilizado con éxito para definir arquitecturas de agentes [11, 23]. La metáfora se traduce a nuestro trabajo actual de la siguiente manera: la expresión de las ilocuciones y/o la existencia de posiciones normativas en algunas escenas normativas conduce a la deducción de posiciones normativas en otras escenas normativas. Nos preocupa la propagación y distribución de posiciones normativas dentro de una red de escenas normativas distribuidas como consecuencia de las acciones de los agentes. Tomamos escenas normativas para ser conjuntos de posiciones normativas y expresiones que están asociadas con un protocolo de interacción subyacente correspondiente a una actividad. En esta sección, presentamos primero un lenguaje simple que capta estos aspectos e introduce formalmente las nociones de escena normativa, regla de transición normativa y estructura normativa. Damos la semántica prevista de estas reglas y mostramos cómo controlar un MAS a través de normas en un ejemplo. 3.1 Conceptos básicos Los componentes básicos de nuestro lenguaje son términos y fórmulas atómicas: Def. 1. Un término, denotado como t, es (i) cualquier constante expresada usando minúsculas (con o sin subíndices), por ejemplo. a, b0, c o ii) cualquier variable expresada utilizando mayúsculas (con o sin subíndices), por ejemplo. X, Y, Zb o iii) cualquier función f(t1,. . . , tn), donde f es un símbolo de función n-ary y t1,.., tn son términos. Algunos ejemplos de términos y funciones son Crédito, precio u oferta (biblia, 30), siendo respectivamente una variable, una constante y una función. Estaremos haciendo uso de identificadores en todo el papel, que son términos constantes y también necesitan la siguiente definición: Def. 2. Una fórmula atómica es cualquier construcción p(t1,. . . , tn), donde p es un símbolo predicado n-ary y t1,. . . , son términos. El conjunto de todas las fórmulas atómicas se denota como Δ. Nos centramos en una clase expresiva de MASs en la que la interacción se lleva a cabo por medio de actos de discurso ilocutionarios intercambiados entre los agentes participantes: Def. 3. I I I son las fórmulas atómicas terrestres que tienen la forma p(ag, r, ag, r, , t) donde p es un elemento de 1 Aquí, abstracto de protocolos y se refieren a ellos genéricamente como actividades. El Sexto Intl. Conjunto Conf. en Agentes Autónomos y Sistemas Multi-Agentes (AAMAS 07) 637 un conjunto de partículas ilocucionarias (por ejemplo: informar, petición, oferta); ag, ag son identificadores de agente; r, r son identificadores de rol; , un término de base arbitrario, es el contenido del mensaje, construido a partir de un lenguaje de contenido compartido; t  N es un sello de tiempo. El significado intuitivo de p(ag, r, ag, r, m, t) es que agente ag jugando rol r enviado mensaje m a agente ag jugando rol r en el momento t. Un ejemplo de una ilocución es informar(ag4, supp, ag3, cliente, offer(wire, 12), 10). A veces es útil referirse a las ilocuciones que no están totalmente fundamentadas, es decir, aquellas que pueden contener variables no instantiated (libres). En la descripción de un protocolo, por ejemplo, los valores precisos del mensaje intercambiado pueden quedar sin especificar. Durante la promulgación de los agentes del protocolo se producirán los valores reales que darán lugar a una ilocución del suelo. Así podemos definir esquemas de ilocución: Def. 4. Un esquema de ilocución ̄I es cualquier fórmula atómica p(ag, r, ag, r, ♥, t) en la que algunos de los términos pueden ser variables o pueden contener variables. 3.2 Definición formal de la noción de NS Primero definimos las escenas normativas de la siguiente manera: Def. 5. Una escena normativa es una tupla s = ids, Δs donde los ids son un identificador de escena y Δs es el conjunto de fórmulas atómicas Por ejemplo, una instantánea del estado de la escena normativa de entrega de nuestro escenario podría ser representada como: Δs = 8 < : utt(request(sean, client, kev, wm, receive(wire, 200), 20)), utt(accept(kev, wm, seen, customer, receive(wire, 200), 30)) 9 = ; Es decir, Tenga en cuenta que el estado de una escena normativa Δs evoluciona con el tiempo. Estas escenas normativas están conectadas entre sí a través de transiciones normativas que especifican cómo las expresiones y posiciones normativas en una escena afectan a otras escenas normativas. Como se mencionó anteriormente, las actividades no son independientes, ya que las ilocuciones pronunciadas en algunas de ellas pueden tener un efecto en otras. Las reglas normativas de transición definen las condiciones bajo las cuales se genera un comando normativo. Estas condiciones son declaraciones o posiciones normativas asociadas a un protocolo dado (denominadas por ejemplo. actividad : expresión ) que dan un comando normativo, es decir. la adición o supresión de otra posición normativa, posiblemente relacionada con una actividad diferente. Nuestras reglas de transición están así definidas: Def. 6. Una regla de transición normativa R es de la forma: R ::= V C V ::= ids : D  V, V D ::= N  utt( ̄I) N ::= per( ̄I)  prh( ̄I)  obli( ̄I) C ::= add(ids : N)  remove(ids : N) donde ̄I es un esquema permiso, prohibición u obligación), ids es un identificador de la actividad s y C es un comando normativo. Dotamos nuestro lenguaje con la semántica habitual de los lenguajes basados en reglas [19]. Las reglas trazan una estructura normativa existente a una nueva estructura normativa en la que sólo cambia el estado de las escenas normativas. En las definiciones siguientes nos basamos en el concepto estándar de sustitución [9]. Def. 7. Una transición normativa es un tupla b = idb, rb donde idb es un identificador y rb es una regla de transición normativa. Proponemos ampliar la noción de MAS, regulada por protocolos, con una capa adicional consistente en escenas normativas y transiciones normativas. Esta capa se representa como un gráfico bipartito que llamamos estructura normativa. Una estructura normativa relaciona escenas normativas y transiciones normativas especificando qué posiciones normativas deben generarse o eliminarse en qué escenas normativas. Def. 8. Una estructura normativa es un gráfico bipartito etiquetado NS = Nodos, bordes, Lin, Lout. Nodos es un conjunto de Sâ B donde S es un conjunto de escenas normativas y B es un conjunto de transiciones normativas. Edges es un conjunto Ain Aout donde Ain  S × B es un conjunto de arcos de entrada etiquetados con una fórmula atómica utilizando la función de etiquetado Lin : Ain → D; y Aout  B × S es un conjunto de arcos de salida etiquetados con una posición normativa utilizando la función de etiquetado Lout : Aout → N. Lo siguiente debe contener: 1. Cada fórmula atómica que aparece en el LHS de una regla rb debe ser de la forma (ids : D) donde s â € € € € TM € € € € € € € € € € € € € € € € € € € € € € € € € Ain tal que es = La fórmula atómica que aparece en el RHS de una regla rb debe ser de la forma add(ids : N) o remove(ids : N) donde s â € S y â € Aout tal que aout = (b, s) y Lout (aout ) = N. 3. Ain tal que a = (s, b) y b = idb, rb y Lin (a) = D entonces (ids:D) debe ocurrir en el LHS de rb. 4. Afuera de tal manera que a = (b, s) y b = idb, rb y Lout (a) = N luego add(ids : N) o remove(ids : N) deben ocurrir en el RHS de rb. Los dos primeros puntos aseguran que cada fórmula atómica en el LHS de una regla de transición normativa etiqueta un arco que entra en la transición normativa apropiada en la estructura normativa, y que la fórmula atómica en el RHS etiqueta el arco saliente correspondiente. Los puntos tres y cuatro aseguran que las etiquetas de todos los arcos entrantes se utilicen en el LHS de la regla de transición normativa en la que entran estos arcos, y que las etiquetas de todos los arcos salientes se utilicen en el RHS de la regla de transición normativa que estos arcos dejan. 3.3 Semántica Destinada La semántica formal se definirá mediante un mapeo a Redes Petri Coloradas en la Sección 5.1. Aquí comenzamos a definir la semántica prevista de las reglas normativas de transición describiendo cómo una regla cambia un escenario normativo de una estructura normativa existente que produce una nueva estructura normativa. Cada regla se activa una vez para cada sustitución que unifica el lado izquierdo V de la regla con el estado de las escenas normativas correspondientes. Una fórmula atómica (es decir, una declaración o una posición normativa) si es unificable con una declaración o posición normativa que pertenece al estado del escenario normativo correspondiente. Cada vez que se activa una regla, se lleva a cabo el comando normativo especificado a la derecha de esa regla, con la intención de añadir o eliminar una posición normativa del estado de la escena normativa correspondiente. Sin embargo, la adición no es incondicional, ya que pueden surgir conflictos. Este tema se tratará en las secciones 4 y 6.1. 638 La Sexta Intl. Conjunto Conf. en Agentes Autónomos y Sistemas Multi-Agentes (AAMAS 07) 3.4 Ejemplo En nuestro ejemplo de ejecución tenemos la siguiente regla de transición normativa ejemplar: „ pago : obli(inform(X, cliente, Y, acc, pay(Z, P, Q, T)), pago : utt(inform(X, cliente, Y, acc, pay(Z, P, Q), T)) « entrega : a La norma es una obligación del agente Y (esta vez asumiendo el papel de gerente de almacén wm) de enviar un mensaje al cliente X que el artículo Z ha sido entregado. En la Figura 2 se muestra una representación diagnóstica de cómo se relacionan las actividades y una estructura normativa: Pago Entrega Contrato Nivel Normativo Salida Registro Pago Entrega Negociación Nivel de Coordinación Contrato nt Figura 2: Actividades y Estructura Normativa A medida que se pronuncian las ilocuciones durante las actividades, surgen posiciones normativas. Las preferencias y las posiciones normativas se combinan en normas de transición, lo que provoca el flujo de posiciones normativas entre las distintas situaciones normativas. La conexión entre los dos niveles se describe en la sección 6.2. 4. DEFINICIÓN DE CONFLICTOS Los términos conflicto deontico e inconsistencia deontica se han utilizado indistintamente en la literatura. Sin embargo, en este trabajo adoptamos el punto de vista de [7] en el que los autores sugieren que surge una inconsistencia deontica cuando una acción es simultáneamente permitida y prohibida - ya que un permiso no puede ser actuado en consecuencia, no se produce un conflicto real. Sin embargo, las situaciones en que una acción está simultáneamente obligada y prohibida son conflictos deonticos, ya que tanto las obligaciones como las prohibiciones influyen en los comportamientos en conflicto. El contenido de las posiciones normativas en este trabajo son ilocuciones. Por lo tanto, surge un conflicto normativo cuando una ilocución está simultáneamente obligada y prohibida. Proponemos utilizar la noción estándar de unificación [9] para detectar cuándo se superponen una prohibición y un permiso. Por ejemplo, una obligación obli(informar(A1, R1, A2, R2, p(c, X, T)) y una prohibición prh(informar(a1, r1, a2, r2, p(Y, d), T)) están en conflicto ya que se unifican en el punto Capturamos formalmente esta noción: Def. 9. Un conflicto (deontico) surge entre dos posiciones normativas N y N bajo una sustitución Es decir, una prohibición y una obligación están en conflicto si, y sólo si, sus ilocuciones se unifican en virtud de La sustitución, llamada aquí el conjunto de conflictos, unifica los agentes, roles y fórmulas atómicas. Asumimos que unificar es una implementación adecuada de un algoritmo de unificación que i) termina siempre (posiblemente fallando, si no se puede encontrar un unificador); ii) es correcto; y iii) tiene complejidad computacional lineal. Las incoherencias causadas por la misma ilocución, que se permiten y prohíben simultáneamente, pueden formalizarse de manera similar. En este trabajo nos centramos en los conflictos de prohibición/obligación, pero la maquinaria computacional introducida en la Sección 6.1 también puede ser utilizada para detectar inconsistencias de prohibición/permiso, si sustituimos la modalidad obli por per. 5. FORMALIZACIÓN DEL CONFLICTO-FREEDOM En esta sección presentamos algunos conocimientos de fondo sobre CPN asumiendo una comprensión básica de las redes Petri ordinarias. Para detalles técnicos, remitimos al lector a [16]. A continuación, mapeamos los NS a los CPN y analizamos sus propiedades. Los CPN combinan la fuerza de las redes Petri con la fuerza de los lenguajes de programación funcionales. Por un lado, las redes Petri proporcionan los primitivos para la descripción de la sincronización de los procesos concurrentes. Como se observa en [16], los CPN tienen una semántica que se basa en la verdadera concurrencia, en lugar de entrelazarse. En nuestra opinión, es más fácil trabajar con una semántica de verdadera moneda porque es la forma en que prevemos la conexión entre el nivel de coordinación y el nivel normativo de un sistema multi-agente. Por otra parte, los lenguajes de programación funcionales utilizados por los CPN proporcionan los primitivos para la definición de los tipos de datos y la manipulación de sus valores de datos. Por lo tanto, podemos traducir fácilmente expresiones de una estructura normativa. Por último, pero no por ello menos importante, los CPN tienen una semántica bien definida que define inequívocamente el comportamiento de cada CPN. Además, los CPN tienen un gran número de métodos e instrumentos de análisis formales mediante los cuales se pueden demostrar las propiedades de los CPN. En resumen, los CPN nos proporcionan todas las características necesarias para razonar formalmente sobre las estructuras normativas, dado que se proporciona una cartografía adecuada. De acuerdo con las redes Petri, los estados de un CPN están representados por medio de lugares. Pero a diferencia de Petri Nets, cada lugar tiene un tipo de datos asociado determinando el tipo de datos que el lugar puede contener. Un estado de un CPN se llama marca. Consiste en un número de fichas colocadas en los lugares individuales. Cada token lleva un valor de datos que tiene el tipo del lugar correspondiente. En general, un lugar puede contener dos o más tokens con el mismo valor de datos. Por lo tanto, una marca de un CPN es una función que mapea cada lugar en un multi-set2 de tokens del tipo correcto. Uno a menudo se refiere a los valores token como colores token y uno también se refiere a los tipos de datos como conjuntos de colores. Los tipos de un CPN pueden ser arbitrariamente complejos. Las acciones en un PCN están representadas mediante transiciones. Un arco entrante en una transición desde un lugar indica que la transición puede eliminar tokens del lugar correspondiente mientras que un arco saliente indica que la transición puede añadir tokens. El número exacto de tokens y sus valores de datos son determinados por las expresiones de arco, que se codifican utilizando el lenguaje de programación elegido para el CPN. Una transición está habilitada en un CPN si y sólo si todos los 2 A multi-set (o bolsa) es una extensión a la noción de conjunto, permitiendo la posibilidad de múltiples apariencias del mismo elemento. El Sexto Intl. Conjunto Conf. en Agentes Autónomos y Sistemas Multi-Agentes (AAMAS 07) 639 variables en las expresiones de sus arcos entrantes se unen a algunos valores (cada una de estas fijaciones se refiere como un elemento vinculante). Si es así, la transición puede ocurrir eliminando tokens de sus lugares de entrada y añadiendo tokens a sus lugares de salida. Además de las expresiones de arco, es posible conectar una expresión booleana de guardia (con variables) a cada transición. Juntando todos los elementos de arriba obtenemos una definición formal de CPN que se empleará más adelante para propósitos de mapeo. Def. 10. Un CPN es un conjunto finito de tipos no vacíos, también llamados conjuntos de colores; ii) P es un conjunto finito de lugares; iii) T es un conjunto finito de transiciones; iv) A es un conjunto finito de arcos; v) N es una función de nodo definida de A a P × T • T × P; vi) C es una función de color de P a فارسى; vii) G es una De acuerdo con las redes Petri ordinarias, el comportamiento concurrente de un CPN se basa en la noción de paso. Formalmente, un paso es un no vacío y finito multi-set sobre el conjunto de todos los elementos de unión. Deje que el paso S se active en una marca M. Entonces, S puede ocurrir, cambiando la marca M a M. Además, decimos que el marcado M es directamente accesible desde el marcado M por la ocurrencia del paso S, y lo denotamos por M[S > M. Una secuencia de ocurrencia finita es una secuencia finita de pasos y marcas: M1[S1 > M2. . . Mn[Sn > Mn+1 de tal manera que n+N y Mi[Si > Mi+1 . . , n}. El conjunto de todas las marcas posibles alcanzables para una red neta de una marca M se llama su conjunto de alcance, y se denota como R(Net, M). 5.1 Mapeo a redes de Petri de colores Nuestra estructura normativa es un gráfico bipartito etiquetado. Lo mismo puede decirse de una red Petri coloreada. Estamos presentando un mapeo f de uno a otro, con el fin de proporcionar semántica para la estructura normativa y probar las propiedades al respecto mediante el uso de resultados teóricos bien conocidos de trabajo en CPNs. El mapeo f hace uso de correspondencias entre escenas normativas y lugares CPN, transiciones normativas y transiciones CPN y finalmente, entre etiquetas de arco y expresiones de arco CPN. S → P B → T Lin Lout → E El conjunto de tipos es el conjunto singleton que contiene el color NP (es decir. * = {NP}). Este tipo complejo está estructurado de la siguiente manera (utilizamos CPN-ML [4] sintaxis): color NPT = con Obl  Per  Prh  NoMod color IP = con infor  declaramos  offer color UTT = record illp : IP ag1, role1, ag2, role2 : string content : string time : int color NP = Los arcos son trazados casi directamente. A es un conjunto finito de arcos y N es una función de nodo, de tal manera que Aa Aa Ain Aout. N(a) = a. La función de inicialización I se define como I(p) = Δs ( Por último, la función de color C asigna el color NP a cada lugar: C(p) = NP (­p ­P). No estamos haciendo uso de la función de guardia G. En el trabajo futuro, esta función se puede utilizar para modelar restricciones cuando extendemos la expresividad de nuestro lenguaje de norma. 5.2 Propiedades de las estructuras normativas Después de haber definido el mapeo desde las estructuras normativas hasta las redes de Petri coloreadas, ahora analizamos las propiedades de los CPN que nos ayudan a entender la complejidad de la detección de conflictos. Una pregunta que nos gustaría responder es, si en un momento dado, una determinada estructura normativa está libre de conflictos. Tal instantánea de una estructura normativa corresponde a una marca en el CPN cartografiado. Def. 11. Dada una marca Mi, esta marca es libre de conflicto si p  P. np1, np2  Mi(p) tal que np1.mode = Obl y np2.mode = Prh y np1.illoc y np2.illoc unificar bajo una sustitución válida. Otra pregunta interesante sería si se producirá un conflicto a partir de una instantánea del sistema propagando las posiciones normativas. Para responder a esta pregunta, primero traducimos la instantánea de la estructura normativa al CPN correspondiente y luego ejecutamos la secuencia de ocurrencia finita de marcas y pasos, verificando la libertad de conflicto de cada marca a medida que avanzamos. Def. 12. Dada una marca Mi, una secuencia de ocurrencia finita Si, Si+1,..., Sn se llama libre de conflictos, si y sólo si Mi[Si > Mi+1. . . Mn[Sn > Mn+1 y Mk están libres de conflictos para todos los k, de modo que i ≤ k ≤ n + 1. Sin embargo, la cuestión principal que nos gustaría investigar, es si una estructura normativa dada es o no resistente a los conflictos, es decir, si los agentes que promulgan el MAS son capaces de provocar conflictos a través de sus acciones. Tan pronto como se incluye la posibilidad de acciones (o declaraciones) de agentes autónomos, se pierde el determinismo. Después de haber mapeado la estructura normativa a un CPN, ahora añadimos modelos de CPN de las interacciones de agentes. Cada forma de interacción con el agente (es decir, cada actividad) se puede modelar utilizando CPN en la línea de Cost et al. [5]. Estos CPN no determinantes alimentan tokens en el CPN que modela la estructura normativa. Esto lleva a la introducción de no-determinismo en el PCN combinado. La mitad inferior de la figura 3 muestra parte de un modelo CPN de un protocolo de agente donde el arco denotado con 1 representa alguna pronunciación de una ilocución por un agente. La transición de destino de este arco, no sólo mueve un token al siguiente estado de este CPN, sino que también coloca un token en el lugar correspondiente a la escena normativa apropiada en el modelo del CPN de la estructura normativa (a través del arco 2). La transición 3 finalmente podría propagar ese símbolo en forma de una obligación, por ejemplo. Así, a partir de una marca dada, muchas secuencias de ocurrencia diferentes son posibles dependiendo de las acciones de los agentes. Utilizamos el conjunto de alcance R para definir una situación en la que los agentes no pueden causar conflictos. 640 La Sexta Intl. Conjunto Conf. sobre Agentes Autónomos y Sistemas Multi-Agentes (AAMAS 07) Figura 3: Construcción del CPN combinado Def. 13. Dado un N neto, una marca M es resistente a los conflictos si y sólo si todas las marcas en R(N,M) están libres de conflictos. La verificación de la libertad de conflicto de una marca se puede hacer en tiempo polinomio mediante la verificación de todos los lugares del CPN en busca de fichas en conflicto. La libertad de conflicto de una secuencia de ocurrencia en el CPN que representa la estructura normativa también se puede hacer en tiempo polinomio ya que esta secuencia es determinista dada una instantánea. El hecho de que se diseñe o no una estructura normativa corresponde con seguridad a la comprobación de la resistencia a los conflictos de la marca M0 inicial. Ahora, verificar la resistencia al conflicto de una marca se convierte en una tarea muy difícil. Corresponde al problema de la accesibilidad en un CPN: ¿se puede alcanzar un estado o se puede lograr una marca que contenga un conflicto?. Este problema de alcanzabilidad es conocido por ser NP-completo para las redes Petri ordinarias [22] y como las RCP son funcionalmente idénticas, no podemos esperar verificar la resistencia a los conflictos de una estructura normativa fuera de línea en un tiempo razonable. Por lo tanto, se necesitan mecanismos de distribución y tiempo de ejecución para garantizar que una estructura normativa mantenga la coherencia. Presentamos uno de esos mecanismos en la sección siguiente. 6. GESTIÓN DE ESTRUCTURAS NORMATIVAS Una vez detectado un conflicto (según se define en la Sección 4), proponemos emplear al unificador para resolver el conflicto. En nuestro ejemplo, si las variables en prh(inform(a1, r1, a2, r2, p(Y, d), T)) no obtienen los valores especificados en la sustitución Sin embargo, en lugar de computar el conjunto de complementos de una sustitución (que puede ser un conjunto infinito) proponemos anotar la prohibición con el propio unificador y utilizarla para determinar cuáles son las variables de esa prohibición no pueden ser en futuras unificaciones para evitar un conflicto. Por lo tanto denotamos prohibiciones anotadas como prh( ̄I) . . Es un conjunto de unificadores. Las normas anotadas3 se interpretan como constructos deonticos con influencias restringidas, es decir, su efecto (sobre agentes, roles e ilocuciones) ha sido limitado por el conjunto de unificadores. Una prohibición puede estar en conflicto con varias obligaciones en una escena normativa dada s = id, Δ y tenemos que registrar (y posiblemente evitar) todos estos conflictos. Definimos a continuación un algoritmo que garantiza que una posición normativa se añada a una escena normativa de tal manera que no cause ningún conflicto. 3 Aunque proponemos limitar las prohibiciones, el mismo mecanismo puede utilizarse para definir la reducción de obligaciones en su lugar. Estas diferentes políticas dependen de la semántica deontica prevista y de los requisitos de los sistemas abordados. Por ejemplo, algunos MAS pueden exigir que sus agentes no actúen en presencia de conflictos, es decir, que se reduzca la obligación. 6.1 Resolución de conflictos Proponemos una forma de resolver los conflictos normativos mediante la unificación. Detectamos la superposición de las influencias de las normas, es decir. cómo afectan al comportamiento de los agentes afectados, y reducimos la influencia de la posición normativa, mediante el uso adecuado de las anotaciones al comprobar si la norma se aplica a las ilocuciones. El algoritmo mostrado en la Figura 4 muestra cómo mantenemos un conjunto de normas libres de conflictos. Añade una norma dada N a un estado normativo existente, libre de conflictos Δ, obteniendo un nuevo estado normativo resultante Δ que es libre de conflictos, es decir, sus prohibiciones están anotadas con un conjunto de conjuntos de conflictos que indican qué fijaciones para variables deben evitarse para que los conflictos no tengan lugar. algoritmo addNorm(N, Δ) comienza 1 marca de tiempo(N) 2 caso N de 3 per( ̄I): Δ := Δ  {N} 4 prh(I): si N  Δ s.t. Conflict(N, N, Las líneas 4-5 abordan el caso cuando intentamos agregar una prohibición de base a un estado normativo: si entra en conflicto con cualquier obligación, entonces se descarta; de lo contrario se añade al estado normativo. En las líneas 6 a 12 se describe la situación en que la posición normativa que debe añadirse es una prohibición no básica. En este caso, el algoritmo inicializa un conjunto vacío y bucles (línea 9-10) a través de las normas N en el antiguo estado normativo Δ. Después de encontrar uno que entra en conflicto con N, el algoritmo actualiza el valor de la nueva configuración de conflicto (línea 10). Mediante el bucle a través de Δ, somos capaces de comprobar cualquier conflicto entre la nueva prohibición y las obligaciones existentes, construyendo adecuadamente la anotación  que se utilizará al añadir N a Δ en la línea 11. En las líneas 13 a 27 se describe cómo se ajusta una nueva obligación a un estado normativo existente. Hacemos uso de dos conjuntos inicialmente vacíos, temporales, Δ1, Δ2. El algoritmo pasa a través de Δ (líneas 16-25) recogiendo las prohibiciones anotadas N Hay, sin embargo, dos casos a tratar: el de cuando un motivo La Sexta Intl. Conjunto Conf. sobre los agentes autónomos y los sistemas multiagentes (AAMAS 07) se encuentra la prohibición 641 (línea 17), y su excepción, que abarca las prohibiciones no terrestres (línea 20). En ambos casos, la antigua prohibición se almacena en Δ1 (líneas 18 y 23) para ser posteriormente retirada de Δ (línea 26). Sin embargo, en el caso de una prohibición no terrestre, el algoritmo actualiza su anotación de conjuntos de conflicto (línea 24). El bucle garantiza que se lleve a cabo una búsqueda exhaustiva (lineal) a través de un estado normativo, comprobando si la nueva obligación está en conflicto con cualquier prohibición existente, posiblemente actualizando las anotaciones de estas prohibiciones en conflicto. En la línea 26 el algoritmo construye la nueva actualización Δ eliminando las antiguas prohibiciones almacenadas en Δ1 y añadiendo las prohibiciones actualizadas almacenadas en Δ2 (si las hay), así como la nueva obligación N. Nuestro algoritmo propuesto es correcto en que, para una posición normativa dada N y un estado normativo Δ, proporciona un nuevo estado normativo Δ en el que todas las prohibiciones tienen anotaciones que registran cómo se unifican con las obligaciones existentes. Sin embargo, las anotaciones pueden estar vacías: este es el caso cuando tenemos una prohibición básica o una prohibición que no unifica/conflige con ninguna obligación. Los permisos no afectan a nuestro algoritmo y se tratan adecuadamente (línea 3). Cualquier intento de insertar una prohibición de base que entre en conflicto, produce el mismo estado normativo (línea 4). Cuando se añade una nueva obligación, el algoritmo garantiza que se tienen en cuenta todas las prohibiciones (líneas 14 a 27), lo que conduce a la eliminación de las prohibiciones sobre el terreno en conflicto o a la actualización de las anotaciones de las prohibiciones no sobre el terreno. El algoritmo siempre termina: los bucles están sobre un conjunto finito Δ y los conflictos comprueban y establecen operaciones siempre terminan. La complejidad del algoritmo es lineal: el conjunto Δ sólo se examina una vez para cada caso posible de norma que se añade. Al gestionar los estados normativos también es posible que necesitemos eliminar posiciones normativas. Esto es sencillo: los permisos se pueden retirar sin ningún problema; las prohibiciones anotadas también se pueden eliminar sin más consideraciones; sin embargo, las obligaciones requieren algunas tareas domésticas. Cuando se va a eliminar una obligación, debemos verificarla contra todas las prohibiciones anotadas a fin de actualizar sus anotaciones. Aplicamos la comprobación de conflicto y obtenemos un unificador, luego eliminamos este unificador de la anotación de prohibiciones. Invocamos el algoritmo de eliminación como removeNorm(N, Δ): devuelve un nuevo estado normativo Δ en el que N ha sido eliminado, con posibles alteraciones a otras posiciones normativas como se explicó. 6.2 Promulgación de una estructura normativa La promulgación de una estructura normativa equivale a la ejecución paralela y distribuida de escenas normativas y transiciones normativas. A título ilustrativo, describiremos a continuación la interacción entre las situaciones normativas de pago y entrega y la transición normativa que los vincula en la mitad superior de la figura 2. Con este objetivo, considere, por ejemplo, que obl(inform(jules, cliente, rod, acc, pay(copper, 400, 350), T) Δpago y que Δentrega tiene prh(inform(rod,wm, jules, cliente, entregado(Z, Q), T)). Tales estados indican que el cliente Jules está obligado a pagar £400 por 350kg de cobre al contador Rod de acuerdo con la escena normativa de pago, mientras que Rod, asumiendo el papel de gerente de almacén esta vez, está prohibido entregar cualquier cosa al cliente Jules de acuerdo con la escena normativa de entrega. Para cada escena normativa, el proceso de promulgación es el siguiente. En primer lugar, procesa su cola de mensajes entrantes que contiene tres tipos de mensajes: declaraciones de la actividad a la que está vinculada; y comandos normativos para agregar o eliminar posiciones normativas. Por ejemplo, en nuestro ejemplo, la escena normativa de pago recoge la ilocución I = utt((inform(jules, cliente, varilla, acc, pay(cobre, 400, 350), 35)) para el cliente Jules pendiente de pago por cobre (a través de la flecha A en la figura 2). Las Uterancias son timestamped y subsecuentemente agregadas al estado normativo. Tendríamos Δpayment = Δpayment {I}, en nuestro ejemplo. Al recibir órdenes normativas para agregar o eliminar una posición normativa, la escena normativa invoca el algoritmo de adición o eliminación correspondiente descrito en la Sección 6.1. En segundo lugar, la escena normativa reconoce su cambio de estado al enviar un mensaje desencadenante a cada transición normativa saliente a la que está conectado. En nuestro ejemplo, el escenario normativo de pagos estaría señalando su cambio de estado a la transición normativa nt. Para las transiciones normativas, el proceso funciona de manera diferente. Debido a que cada transición normativa controla el funcionamiento de una sola regla, al recibir un mensaje de activación, encuesta cada escena normativa entrante para sustituciones de los esquemas de ilocución pertinentes en el LHS de su regla. En nuestro ejemplo, nt (responsable de la regla descrita en la Sección 3.4), encuestaría el escenario normativo de pago (vía flecha B) para sustituciones. Al recibir respuestas de ellos (en forma de conjuntos de sustituciones junto con marcas de tiempo), tiene que unificar las sustituciones de cada una de estas escenas normativas. Para cada unificación que encuentra, la regla se activa, y por lo tanto el comando normativo correspondiente se envía a lo largo de la escena normativa de salida. La transición normativa entonces mantiene un seguimiento del mensaje de disparo que envió y de las marcas de tiempo de las posiciones normativas que desencadenó el disparo. Esto se hace para asegurar que las mismas posiciones normativas en el LHS de una regla sólo desencadenen su disparo una vez. En nuestro ejemplo, nt estaría recibiendo  = {X/jules, Y/rod, Z/copper, Q/350} de la escena normativa de pagos. Dado que las substiciones en unifican con la regla nts, la regla es disparada, y el comando normativo add(delivery : obli(rod, wm, jules, client, delivery(copper, 350), T)) es enviado a lo largo de la escena normativa de entrega para obligar a Rod a entregar al cliente Jules 350kg de cobre. Después de eso, la escena normativa de entrega invocaría el algoritmo addNorm de la figura 4 con Δdelivery y N = obli(rod, wm, jules, client, delivered(copper, 350)) como argumentos. 7. TRABAJOS Y CONCLUSIONES RELACIONADOS Nuestras contribuciones en este documento son triples. En primer lugar, introducimos un enfoque para la gestión y el razonamiento de las normas de manera distribuida. Hasta donde sabemos, hay poco trabajo publicado en esta dirección. En [8, 21] se presentan dos idiomas para la aplicación distribuida de las normas en el MAS. Sin embargo, en ambos trabajos, cada agente tiene una interfaz de mensaje local que envía mensajes legales de acuerdo con un conjunto de normas. Dado que estas interfaces son locales para cada agente, las normas sólo pueden expresarse en términos de acciones de ese agente. Se trata de una grave desventaja, por ejemplo. cuando uno necesita activar una obligación para con un agente debido a un cierto mensaje de otro. La segunda contribución es la propuesta de una estructura normativa. La noción es fructífera porque permite la separación de las cuestiones normativas y de procedimiento. La estructura normativa que proponemos evidencia la similitud entre la propagación de posiciones normativas y la propagación 642 La Sexta Intl. Conjunto Conf. sobre Agentes Autónomos y Sistemas Multi-Agentes (AAMAS 07) de tokens en Redes Petri Coloradas. Esa similitud sugiere fácilmente una cartografía entre los dos, y da lugar a un tratamiento analítico conveniente de la estructura normativa, en general, y la complejidad de la detección de conflictos, en particular. La idea de modelar interacciones (en forma de conversaciones) a través de Petri Nets se ha investigado en [18], donde el medio de interacción y los agentes individuales se modelan como subredes de CPN que posteriormente se combinan para su análisis. En [5], las conversaciones se diseñan y analizan por primera vez a nivel de los CPN y posteriormente se traducen en protocolos. Lin et al. [20] mapear esquemas de conversación a CPNs. Según nuestro conocimiento, el uso de esta representación en apoyo de la detección de conflictos en el MAS regulado no ha sido reportado en otros lugares. Por último, presentamos un mecanismo distribuido para resolver los conflictos normativos. Sartor [25] trata los conflictos normativos desde el punto de vista de la teoría jurídica y sugiere una forma de ordenar las normas involucradas. Su idea se implementa en [12], pero requiere un recurso central para el mantenimiento de normas. El enfoque para la detección y resolución de conflictos es una adaptación y extensión del trabajo sobre gráficos de instanciación reportados en [17] y un algoritmo relacionado en [27]. El algoritmo presentado en el presente trabajo puede ser utilizado para administrar estados normativos distribuidos: escenas normativas que suceden en paralelo tienen un estado normativo asociado Δ al que el algoritmo se aplica de forma independiente cada vez que se introduce una nueva norma. Estas tres contribuciones que presentamos en este documento abren muchas posibilidades para el trabajo futuro. Cabe mencionar en primer lugar, que como estrategia amplia estamos trabajando en una generalización de la noción de estructura normativa para hacerla funcionar con diferentes modelos de coordinación, con un contenido deontico más rico y además de diferentes realizaciones computacionales de MAS regulado. Como primer paso en esta dirección estamos aprovechando la disociación entre los protocolos de interacción y la orientación normativa declarativa que la estructura normativa pone a disposición, para proporcionar una capa normativa para las instituciones electrónicas (como se define en [1]). Esperamos que este acoplamiento dote a las instituciones electrónicas de un entorno normativo más flexible y más expresivo. Además, queremos extender nuestro modelo a través de varias direcciones: (1) manejar la negación y las limitaciones como parte del lenguaje de la norma, y en particular la noción de tiempo; (2) dar cabida a múltiples autoridades jerárquicas de normas basadas en roles, en la línea de Cholvy y Cuppens [3] y relaciones de poder como sugiere Carabelea et al. [2]; (3) para captar en el algoritmo de resolución de conflictos diferentes semánticas relacionadas con las nociones deonticas apoyando diferentes axiomaciones (por ejemplo, fuerza relativa de la prohibición frente a la obligación, nociones deonticas predeterminadas, inconsistencias deonticas). En el lado teórico, pretendemos utilizar técnicas de análisis de CPN para caracterizar clases de CPN (por ejemplo, acíclicas, simétricas, etc.) que corresponden a familias de Estructuras Normativas susceptibles a la detección de conflictos fuera de línea. La combinación de estas técnicas junto con nuestros mecanismos de resolución de conflictos en línea pretende dotar a los diseñadores del MAS de la capacidad de incorporar normas en sus sistemas de una manera basada en principios. 8. REFERENCIAS [1] J. L. Arcos, M. Esteva, P. Noriega, J. A. Rodr guez, y C. Sierra. Ingeniería de entornos abiertos con instituciones electrónicas. Journal on Engineering Applications of Artificial Intelligence, 18(2):191-204, 2005. [2] C. Carabelea, O. Boissier, y C. Castelfranchi. Usar el poder social para permitir a los agentes razonar sobre ser parte de un grupo. En el 5o Internat. Taller, EEAT 2004, págs. 166 a 177, 2004. [3] L. Cholvy y F. Cuppens. Solución de conflictos normativos mediante la fusión de funciones. En la Quinta Conferencia Internacional sobre Inteligencia Artificial y Derecho, Washington, Estados Unidos, 1995. [4] S. Christensen y T. B. Haagh. Diseño CPN - vista general de la sintaxis CPN ML. Informe técnico, Universidad de Aarhus, 1996. [5] R. S. Cost, Y. Chen, T. W. Finin, Y. Labrou e Y. Peng. Usando petri redes de colores para modelar la conversación. In Issues in Agent Communication, págs. 178 a 192, Londres, Reino Unido, 2000. [6] F. Dignum. Agentes autónomos con normas. Inteligencia Artificial y Ley, 7(1):69-79, 1999. [7] A. Elhag, J. Breuker y P. Brouwer. Sobre el análisis formal de los conflictos normativos. Información & Comunicaciones. Techn. Ley, 9(3):207-217, Oct. 2000. [8] M. Esteva, W. Vasconcelos, C. Sierra, y J. A. Rodr guez-Aguilar. Consistencia normativa en las instituciones electrónicas. volumen 3171 (LNAI), páginas 494-505. Springer-Verlag, 2004. [9] M. Fitting. Prueba de la lógica de primer orden y del teorema automatizado. Springer-Verlag, Nueva York, Estados Unidos, 1990. [10] N. Fornara, F. Vigan`o y M. Colombetti. Un enfoque impulsado por eventos a las normas en las instituciones artificiales. En el taller AAMAS05: Agentes, normas e instituciones para sistemas multiagente regulados (ANI@REM), Utrecht, 2005. [11] D. Gaertner, P. Noriega y C. Sierra. Ampliación de la arquitectura BDI con compromisos. En Actas del IX Congreso Internacional de la Asociación Catalana de Inteligencia Artificial, 2006. [12] A. Garc a-Camino, P. Noriega, y J.-A. Rodr guez-Aguilar. Un algoritmo para la resolución de conflictos en actividades reguladas compuestas. En el 7o taller Int.Workshop - ESAW 06, 2006. [13] A. Garc a-Camino, J.-A. Rodr guez-Aguilar, C. Sierra y W. Vasconcelos. Una arquitectura distribuida para las Sociedades de Agentes de Normas. En DALT III, volumen 3904 (LNAI), páginas 89 a 105. Springer, 2006. [14] F. Giunchiglia y L. Serafini. Lógicas jerárquicas multilenguaje o: Cómo podemos prescindir de lógicas modales. Inteligencia Artificial, 65(1):29-70, 1994. [15] J. Habermas. La Teoría de la Comunicación Acción, Volumen Uno, La Razón y la Racionalización de la Sociedad. Beacon Press, 1984. [16] K. Jensen. Redes Petri coloreadas: Conceptos básicos, métodos de análisis y usos prácticos (Volumen 1). Springer, 1997. [17] M. Kollingbaum y T. Norman. Estrategias para resolver conflictos de normas con razonamiento práctico. En el Taller de Coordinación de la CEPA en Sociedades de Agentes Emergentes 2004, 2004. [18] J.-L. Koning, G. Francois e Y. Demazeau. Formalización y prevalidación para protocolos de interacción en sistemas multiagente. En ECAI, págs. 298 a 307, 1998. [19] B. Kramer y J. Mylopoulos. Representación del conocimiento. En S. C. Shapiro, editor, Enciclopedia de Inteligencia Artificial, volumen 1, páginas 743-759. John Wiley & Sons, 1992. [20] F. Lin, D. H. Norrie, W. Shen y R. Kremer. Un enfoque basado en esquemas para especificar las políticas de conversación. En Temas de Comunicación de Agentes, págs. 193-204, 2000. [21] N. Minsky. Interacción gobernada por la ley (LGI): Un mecanismo de coordinación y control distribuido (Una introducción y un manual de referencia). Informe técnico, Universidad Rutgers, 2005. [22] T. Murata. Redes Petri: Propiedades, análisis y aplicaciones. Actas del IEEE, 77(4):541-580, 1989. [23] S. Parsons, C. Sierra y N. Jennings. Agentes que razonan y negocian discutiendo. Diario de Lógica y Computación, 8(3):261-292, 1998. [24] A. Ricci y M. Viroli. Artefactos de Coordinación: Una Abstracción Unificante para la Coordinación de Ingeniería Mediada por el Medio Ambiente en MAS. Informatica, 29:433-443, 2005. [25] G. Sartor. Conflictos normativos en el razonamiento jurídico. Inteligencia Artificial y Ley, 1(2-3):209-235, junio de 1992. [26] M. Sergot. Una teoría computacional de posiciones normativas. ACM Trans. Comput. Lógica, 2(4):581-622, 2001. [27] W. W. Vasconcelos, M. Kollingbaum, y T. Norman. Resolver conflictos e incoherencias en las organizaciones virtuales reguladas por normas. En Actas de AAMAS 07, Hawaii, EE.UU., 2007. IFAAMAS. [28] G. H. von Wright. Norma y acción: Una investigación lógica. Routledge y Kegan Paul, Londres, 1963. [29] M. Wooldridge. Una introducción a los sistemas multiagente. John Wiley & Sons, Chichester, Reino Unido, febrero de 2002. El Sexto Intl. Conjunto Conf. sobre agentes autónomos y sistemas de agentes múltiples (AAMAS 07) 643 ",
            "error": []
        },
        "organisation": {
            "translated_key": [],
            "translated_annotated_text": "Gestión de Normas Distribuidas en Sistemas Regulados Multi-Agente ∗ Dorian Gaertner Dept. de Computación, Imperial College London, Londres SW7 2AZ, Reino Unido dg00@doc.ic.ac.uk Andrés García-Camino, Pablo Noriega, J.-A. Rodriguez-Aguilar IIIA-CSIC, 08193 Bellaterra, España {andres,pablo,jarážiya.csic.es Wamberto Vasconcelos Dept. de Ciencias de la Computación, Universidad de Aberdeen, Aberdeen AB24 3UE, Reino Unido wvasconcelos@acm.org RESUMEN Las normas son ampliamente reconocidas como un medio de coordinar sistemas multi-agentes. La gestión distribuida de las normas es una cuestión difícil y observamos una falta de realizaciones computacionales verdaderamente distribuidas de los modelos normativos. Con el fin de regular el comportamiento de los agentes autónomos que participan en múltiples actividades relacionadas, proponemos un modelo normativo, la Estructura Normativa (NS), un artefacto que se basa en la propagación de posiciones normativas (obligaciones, prohibiciones, permisos), como consecuencias de las acciones de los agentes. Dentro de un NS, los conflictos pueden surgir debido a la naturaleza dinámica del MAS y la concurrencia de acciones de los agentes. Sin embargo, garantizar la libertad de conflicto de un NS en el momento del diseño es computacionalmente intratable. Demostramos esto formalizando la noción de conflicto, proporcionando un mapeo de los NS en las Redes Petri Coloreadas y tomando prestado los resultados teóricos bien conocidos de ese campo. Dado que se requiere la resolución de conflictos en línea, presentamos un algoritmo tratable que se empleará de forma distribuida. Luego demostramos que este algoritmo es primordial para la promulgación distribuida de un NS. Categorías y sujetos Descriptores I.2.11 [Inteligencia Artificial Distribuida]: Idiomas y estructuras Términos generales Algoritmos, Diseño, Teoría 1. INTRODUCCIÓN Una característica fundamental de los sistemas multiagente abiertos y regulados en los que interactúan agentes autónomos, es que los agentes participantes están destinados a cumplir con las convenciones del sistema. Las normas pueden utilizarse para modelar tales convenciones y, por lo tanto, como medio para regular el comportamiento observable de los agentes [6, 29]. Hay muchas contribuciones sobre el tema de las normas de sociólogos, filósofos y lógicos (por ejemplo, [15, 28]). Sin embargo, hay muy pocas propuestas para la realización computacional de modelos normativos - la forma en que las normas pueden integrarse en el diseño y ejecución de MAS. Los pocos que existen (e.g. [10, 13, 24]), funcionan de manera centralizada, lo que crea cuellos de botella y puntos de fallo únicos. Hasta donde sabemos, ninguna propuesta apoya verdaderamente la promulgación distribuida de entornos normativos. En nuestro documento abordamos ese problema y proponemos medios para manejar los compromisos contradictorios en sistemas abiertos, regulados y multiagentes de manera distribuida. El tipo de MAS regulado que contemplamos consiste en actividades múltiples, simultáneas, relacionadas donde los agentes interactúan. Cada agente puede participar simultáneamente en varias actividades, y cambiar de una actividad a otra. Las acciones de un agente dentro de una actividad pueden tener consecuencias en forma de posiciones normativas (es decir. obligaciones, permisos y prohibiciones) [26] que puedan limitar su comportamiento futuro. Por ejemplo, un agente comprador que se queda sin crédito puede estar prohibido hacer más ofertas, o un agente vendedor está obligado a entregar después de cerrar un acuerdo. Asumimos que los agentes pueden optar por no cumplir todas sus obligaciones y, por lo tanto, pueden ser sancionados por el MAS. Obsérvese que, cuando se distribuyen las actividades, las posiciones normativas deben derivarse de las actividades en las que se generan a aquellas en las que surten efecto. Por ejemplo, la obligación de los vendedores de arriba debe fluir (o propagarse) de una actividad de negociación a una actividad de entrega. Dado que en un MAS abierto y regulado no se pueden incorporar aspectos normativos en el diseño de los agentes, adoptamos la opinión de que el MAS debe complementarse con un conjunto separado de normas que regulen aún más el comportamiento de los agentes participantes. Para modelar la separación de preocupaciones entre el nivel de coordinación (interacciones de agentes) y el nivel normativo (propagación de posiciones normativas), proponemos un artefacto llamado Estructura Normativa (NS). Dentro de un NS pueden surgir conflictos debido a la naturaleza dinámica del MAS y la concurrencia de acciones de los agentes. Por ejemplo, un agente puede estar obligado y prohibido a realizar el 636 978-81-904262-7-5 (RPS) c 2007 IFAAMAS muy mismo acción en una actividad. Dado que la regulación de un MAS implica que los agentes participantes deben ser conscientes de la validez de las acciones que tienen lugar dentro de él, dichos conflictos deben ser identificados y posiblemente resueltos si se necesita una reivindicación de validez para que un agente realice una acción o sea sancionado. Sin embargo, garantizar la libertad de conflicto de un NS en el momento del diseño es computacionalmente intratable. Demostramos esto formalizando la noción de conflicto, proporcionando un mapeo de los NS en las redes de Petri de colores (CPNs) y tomando prestado los resultados teóricos bien conocidos del campo de los CPNs. Creemos que se requiere la detección y resolución de conflictos en línea. Por lo tanto, presentamos un algoritmo tratable para la resolución de conflictos. Este algoritmo es primordial para la promulgación distribuida de un NS. El documento se organiza de la siguiente manera. En la Sección 2 detallamos un escenario para servir de ejemplo a lo largo del artículo. A continuación, en la Sección 3 definimos formalmente el artefacto de la estructura normativa. Además, en la sección 4 formalizamos la noción de conflicto para posteriormente analizar la complejidad de la detección de conflictos en términos de RCP en la sección 5. En la sección 6 se describe la gestión computacional de los NS describiendo su promulgación y presentando un algoritmo para la resolución de conflictos. Por último, comentamos sobre la labor conexa, sacamos conclusiones e informamos sobre la labor futura en la sección 7. 2. SCENARIO Utilizamos un escenario de cadena de suministro en el que empresas e individuos se reúnen en un mercado en línea para realizar negocios. El procedimiento de transacción global puede organizarse como seis actividades distribuidas, representadas como nodos en el diagrama de la Figura 1. En ellas participan diferentes participantes cuyo comportamiento se coordina a través de protocolos. En este escenario, los agentes pueden desempeñar uno de los cuatro papeles: marExit Inscripción Pago Entrega Negociación Coordinación Modelo Contrato Figura 1: Estructura de actividad del contador de ketplace (acc), cliente, proveedor (supp) y gerentes de almacén (wm). Las flechas que conectan las actividades representan cómo los agentes pueden moverse de una actividad a otra. Después de registrarse en el mercado, los clientes y proveedores se reúnen en una actividad en la que negocian los términos de su transacción, es decir. los precios, los importes de las mercancías que deban entregarse, los plazos y otros detalles. En la actividad contractual, se establece el pedido y se prepara una factura. El cliente participará entonces en una actividad de pago, verificando su solvencia e instruyendo a su banco a transferir la cantidad correcta de dinero. Mientras tanto, el proveedor se encargará de la entrega de las mercancías (por ejemplo: a través de un administrador de almacén) en la actividad de entrega. Finalmente, los agentes pueden salir del mercado conforme a un protocolo de salida predeterminado. El contable del mercado participa en la mayoría de las actividades como proveedor confiable de herramientas de auditoría. En el resto del documento nos basaremos en este escenario para ilustrar la noción de estructura normativa e ilustrar nuestro enfoque de la detección y resolución de conflictos en un entorno distribuido. 3. ESTRUCTURA NORMATIVA En los agentes MASs interactúan según protocolos que naturalmente se distribuyen. Abogamos por que las acciones en uno de esos protocolos puedan tener un efecto en la promulgación de otros protocolos. Algunas acciones pueden ser prohibidas u obligatorias, por ejemplo. Tomamos posiciones normativas para ser obligaciones, prohibiciones y permisos similares al trabajo descrito en [26]. La intención de agregar o eliminar una posición normativa que llamamos comando normativo. Los casos de posiciones normativas en un protocolo también pueden tener consecuencias para otros protocolos1. Para definir nuestro lenguaje de norma y especificar cómo se propagan las posiciones normativas, nos hemos inspirado en sistemas multicontexto [14]. Estos sistemas permiten estructurar el conocimiento en teorías formales distintas y definir las relaciones entre ellos. Las relaciones se expresan como reglas puente - la deducibilidad de las fórmulas en algunos contextos conduce a la deducción de otras fórmulas en otros contextos. Recientemente, estos sistemas se han utilizado con éxito para definir arquitecturas de agentes [11, 23]. La metáfora se traduce a nuestro trabajo actual de la siguiente manera: la expresión de las ilocuciones y/o la existencia de posiciones normativas en algunas escenas normativas conduce a la deducción de posiciones normativas en otras escenas normativas. Nos preocupa la propagación y distribución de posiciones normativas dentro de una red de escenas normativas distribuidas como consecuencia de las acciones de los agentes. Tomamos escenas normativas para ser conjuntos de posiciones normativas y expresiones que están asociadas con un protocolo de interacción subyacente correspondiente a una actividad. En esta sección, presentamos primero un lenguaje simple que capta estos aspectos e introduce formalmente las nociones de escena normativa, regla de transición normativa y estructura normativa. Damos la semántica prevista de estas reglas y mostramos cómo controlar un MAS a través de normas en un ejemplo. 3.1 Conceptos básicos Los componentes básicos de nuestro lenguaje son términos y fórmulas atómicas: Def. 1. Un término, denotado como t, es (i) cualquier constante expresada usando minúsculas (con o sin subíndices), por ejemplo. a, b0, c o ii) cualquier variable expresada utilizando mayúsculas (con o sin subíndices), por ejemplo. X, Y, Zb o iii) cualquier función f(t1,. . . , tn), donde f es un símbolo de función n-ary y t1,.., tn son términos. Algunos ejemplos de términos y funciones son Crédito, precio u oferta (biblia, 30), siendo respectivamente una variable, una constante y una función. Estaremos haciendo uso de identificadores en todo el papel, que son términos constantes y también necesitan la siguiente definición: Def. 2. Una fórmula atómica es cualquier construcción p(t1,. . . , tn), donde p es un símbolo predicado n-ary y t1,. . . , son términos. El conjunto de todas las fórmulas atómicas se denota como Δ. Nos centramos en una clase expresiva de MASs en la que la interacción se lleva a cabo por medio de actos de discurso ilocutionarios intercambiados entre los agentes participantes: Def. 3. I I I son las fórmulas atómicas terrestres que tienen la forma p(ag, r, ag, r, , t) donde p es un elemento de 1 Aquí, abstracto de protocolos y se refieren a ellos genéricamente como actividades. El Sexto Intl. Conjunto Conf. en Agentes Autónomos y Sistemas Multi-Agentes (AAMAS 07) 637 un conjunto de partículas ilocucionarias (por ejemplo: informar, petición, oferta); ag, ag son identificadores de agente; r, r son identificadores de rol; , un término de base arbitrario, es el contenido del mensaje, construido a partir de un lenguaje de contenido compartido; t  N es un sello de tiempo. El significado intuitivo de p(ag, r, ag, r, m, t) es que agente ag jugando rol r enviado mensaje m a agente ag jugando rol r en el momento t. Un ejemplo de una ilocución es informar(ag4, supp, ag3, cliente, offer(wire, 12), 10). A veces es útil referirse a las ilocuciones que no están totalmente fundamentadas, es decir, aquellas que pueden contener variables no instantiated (libres). En la descripción de un protocolo, por ejemplo, los valores precisos del mensaje intercambiado pueden quedar sin especificar. Durante la promulgación de los agentes del protocolo se producirán los valores reales que darán lugar a una ilocución del suelo. Así podemos definir esquemas de ilocución: Def. 4. Un esquema de ilocución ̄I es cualquier fórmula atómica p(ag, r, ag, r, ♥, t) en la que algunos de los términos pueden ser variables o pueden contener variables. 3.2 Definición formal de la noción de NS Primero definimos las escenas normativas de la siguiente manera: Def. 5. Una escena normativa es una tupla s = ids, Δs donde los ids son un identificador de escena y Δs es el conjunto de fórmulas atómicas Por ejemplo, una instantánea del estado de la escena normativa de entrega de nuestro escenario podría ser representada como: Δs = 8 < : utt(request(sean, client, kev, wm, receive(wire, 200), 20)), utt(accept(kev, wm, seen, customer, receive(wire, 200), 30)) 9 = ; Es decir, Tenga en cuenta que el estado de una escena normativa Δs evoluciona con el tiempo. Estas escenas normativas están conectadas entre sí a través de transiciones normativas que especifican cómo las expresiones y posiciones normativas en una escena afectan a otras escenas normativas. Como se mencionó anteriormente, las actividades no son independientes, ya que las ilocuciones pronunciadas en algunas de ellas pueden tener un efecto en otras. Las reglas normativas de transición definen las condiciones bajo las cuales se genera un comando normativo. Estas condiciones son declaraciones o posiciones normativas asociadas a un protocolo dado (denominadas por ejemplo. actividad : expresión ) que dan un comando normativo, es decir. la adición o supresión de otra posición normativa, posiblemente relacionada con una actividad diferente. Nuestras reglas de transición están así definidas: Def. 6. Una regla de transición normativa R es de la forma: R ::= V C V ::= ids : D  V, V D ::= N  utt( ̄I) N ::= per( ̄I)  prh( ̄I)  obli( ̄I) C ::= add(ids : N)  remove(ids : N) donde ̄I es un esquema permiso, prohibición u obligación), ids es un identificador de la actividad s y C es un comando normativo. Dotamos nuestro lenguaje con la semántica habitual de los lenguajes basados en reglas [19]. Las reglas trazan una estructura normativa existente a una nueva estructura normativa en la que sólo cambia el estado de las escenas normativas. En las definiciones siguientes nos basamos en el concepto estándar de sustitución [9]. Def. 7. Una transición normativa es un tupla b = idb, rb donde idb es un identificador y rb es una regla de transición normativa. Proponemos ampliar la noción de MAS, regulada por protocolos, con una capa adicional consistente en escenas normativas y transiciones normativas. Esta capa se representa como un gráfico bipartito que llamamos estructura normativa. Una estructura normativa relaciona escenas normativas y transiciones normativas especificando qué posiciones normativas deben generarse o eliminarse en qué escenas normativas. Def. 8. Una estructura normativa es un gráfico bipartito etiquetado NS = Nodos, bordes, Lin, Lout. Nodos es un conjunto de Sâ B donde S es un conjunto de escenas normativas y B es un conjunto de transiciones normativas. Edges es un conjunto Ain Aout donde Ain  S × B es un conjunto de arcos de entrada etiquetados con una fórmula atómica utilizando la función de etiquetado Lin : Ain → D; y Aout  B × S es un conjunto de arcos de salida etiquetados con una posición normativa utilizando la función de etiquetado Lout : Aout → N. Lo siguiente debe contener: 1. Cada fórmula atómica que aparece en el LHS de una regla rb debe ser de la forma (ids : D) donde s â € € € € TM € € € € € € € € € € € € € € € € € € € € € € € € € Ain tal que es = La fórmula atómica que aparece en el RHS de una regla rb debe ser de la forma add(ids : N) o remove(ids : N) donde s â € S y â € Aout tal que aout = (b, s) y Lout (aout ) = N. 3. Ain tal que a = (s, b) y b = idb, rb y Lin (a) = D entonces (ids:D) debe ocurrir en el LHS de rb. 4. Afuera de tal manera que a = (b, s) y b = idb, rb y Lout (a) = N luego add(ids : N) o remove(ids : N) deben ocurrir en el RHS de rb. Los dos primeros puntos aseguran que cada fórmula atómica en el LHS de una regla de transición normativa etiqueta un arco que entra en la transición normativa apropiada en la estructura normativa, y que la fórmula atómica en el RHS etiqueta el arco saliente correspondiente. Los puntos tres y cuatro aseguran que las etiquetas de todos los arcos entrantes se utilicen en el LHS de la regla de transición normativa en la que entran estos arcos, y que las etiquetas de todos los arcos salientes se utilicen en el RHS de la regla de transición normativa que estos arcos dejan. 3.3 Semántica Destinada La semántica formal se definirá mediante un mapeo a Redes Petri Coloradas en la Sección 5.1. Aquí comenzamos a definir la semántica prevista de las reglas normativas de transición describiendo cómo una regla cambia un escenario normativo de una estructura normativa existente que produce una nueva estructura normativa. Cada regla se activa una vez para cada sustitución que unifica el lado izquierdo V de la regla con el estado de las escenas normativas correspondientes. Una fórmula atómica (es decir, una declaración o una posición normativa) si es unificable con una declaración o posición normativa que pertenece al estado del escenario normativo correspondiente. Cada vez que se activa una regla, se lleva a cabo el comando normativo especificado a la derecha de esa regla, con la intención de añadir o eliminar una posición normativa del estado de la escena normativa correspondiente. Sin embargo, la adición no es incondicional, ya que pueden surgir conflictos. Este tema se tratará en las secciones 4 y 6.1. 638 La Sexta Intl. Conjunto Conf. en Agentes Autónomos y Sistemas Multi-Agentes (AAMAS 07) 3.4 Ejemplo En nuestro ejemplo de ejecución tenemos la siguiente regla de transición normativa ejemplar: „ pago : obli(inform(X, cliente, Y, acc, pay(Z, P, Q, T)), pago : utt(inform(X, cliente, Y, acc, pay(Z, P, Q), T)) « entrega : a La norma es una obligación del agente Y (esta vez asumiendo el papel de gerente de almacén wm) de enviar un mensaje al cliente X que el artículo Z ha sido entregado. En la Figura 2 se muestra una representación diagnóstica de cómo se relacionan las actividades y una estructura normativa: Pago Entrega Contrato Nivel Normativo Salida Registro Pago Entrega Negociación Nivel de Coordinación Contrato nt Figura 2: Actividades y Estructura Normativa A medida que se pronuncian las ilocuciones durante las actividades, surgen posiciones normativas. Las preferencias y las posiciones normativas se combinan en normas de transición, lo que provoca el flujo de posiciones normativas entre las distintas situaciones normativas. La conexión entre los dos niveles se describe en la sección 6.2. 4. DEFINICIÓN DE CONFLICTOS Los términos conflicto deontico e inconsistencia deontica se han utilizado indistintamente en la literatura. Sin embargo, en este trabajo adoptamos el punto de vista de [7] en el que los autores sugieren que surge una inconsistencia deontica cuando una acción es simultáneamente permitida y prohibida - ya que un permiso no puede ser actuado en consecuencia, no se produce un conflicto real. Sin embargo, las situaciones en que una acción está simultáneamente obligada y prohibida son conflictos deonticos, ya que tanto las obligaciones como las prohibiciones influyen en los comportamientos en conflicto. El contenido de las posiciones normativas en este trabajo son ilocuciones. Por lo tanto, surge un conflicto normativo cuando una ilocución está simultáneamente obligada y prohibida. Proponemos utilizar la noción estándar de unificación [9] para detectar cuándo se superponen una prohibición y un permiso. Por ejemplo, una obligación obli(informar(A1, R1, A2, R2, p(c, X, T)) y una prohibición prh(informar(a1, r1, a2, r2, p(Y, d), T)) están en conflicto ya que se unifican en el punto Capturamos formalmente esta noción: Def. 9. Un conflicto (deontico) surge entre dos posiciones normativas N y N bajo una sustitución Es decir, una prohibición y una obligación están en conflicto si, y sólo si, sus ilocuciones se unifican en virtud de La sustitución, llamada aquí el conjunto de conflictos, unifica los agentes, roles y fórmulas atómicas. Asumimos que unificar es una implementación adecuada de un algoritmo de unificación que i) termina siempre (posiblemente fallando, si no se puede encontrar un unificador); ii) es correcto; y iii) tiene complejidad computacional lineal. Las incoherencias causadas por la misma ilocución, que se permiten y prohíben simultáneamente, pueden formalizarse de manera similar. En este trabajo nos centramos en los conflictos de prohibición/obligación, pero la maquinaria computacional introducida en la Sección 6.1 también puede ser utilizada para detectar inconsistencias de prohibición/permiso, si sustituimos la modalidad obli por per. 5. FORMALIZACIÓN DEL CONFLICTO-FREEDOM En esta sección presentamos algunos conocimientos de fondo sobre CPN asumiendo una comprensión básica de las redes Petri ordinarias. Para detalles técnicos, remitimos al lector a [16]. A continuación, mapeamos los NS a los CPN y analizamos sus propiedades. Los CPN combinan la fuerza de las redes Petri con la fuerza de los lenguajes de programación funcionales. Por un lado, las redes Petri proporcionan los primitivos para la descripción de la sincronización de los procesos concurrentes. Como se observa en [16], los CPN tienen una semántica que se basa en la verdadera concurrencia, en lugar de entrelazarse. En nuestra opinión, es más fácil trabajar con una semántica de verdadera moneda porque es la forma en que prevemos la conexión entre el nivel de coordinación y el nivel normativo de un sistema multi-agente. Por otra parte, los lenguajes de programación funcionales utilizados por los CPN proporcionan los primitivos para la definición de los tipos de datos y la manipulación de sus valores de datos. Por lo tanto, podemos traducir fácilmente expresiones de una estructura normativa. Por último, pero no por ello menos importante, los CPN tienen una semántica bien definida que define inequívocamente el comportamiento de cada CPN. Además, los CPN tienen un gran número de métodos e instrumentos de análisis formales mediante los cuales se pueden demostrar las propiedades de los CPN. En resumen, los CPN nos proporcionan todas las características necesarias para razonar formalmente sobre las estructuras normativas, dado que se proporciona una cartografía adecuada. De acuerdo con las redes Petri, los estados de un CPN están representados por medio de lugares. Pero a diferencia de Petri Nets, cada lugar tiene un tipo de datos asociado determinando el tipo de datos que el lugar puede contener. Un estado de un CPN se llama marca. Consiste en un número de fichas colocadas en los lugares individuales. Cada token lleva un valor de datos que tiene el tipo del lugar correspondiente. En general, un lugar puede contener dos o más tokens con el mismo valor de datos. Por lo tanto, una marca de un CPN es una función que mapea cada lugar en un multi-set2 de tokens del tipo correcto. Uno a menudo se refiere a los valores token como colores token y uno también se refiere a los tipos de datos como conjuntos de colores. Los tipos de un CPN pueden ser arbitrariamente complejos. Las acciones en un PCN están representadas mediante transiciones. Un arco entrante en una transición desde un lugar indica que la transición puede eliminar tokens del lugar correspondiente mientras que un arco saliente indica que la transición puede añadir tokens. El número exacto de tokens y sus valores de datos son determinados por las expresiones de arco, que se codifican utilizando el lenguaje de programación elegido para el CPN. Una transición está habilitada en un CPN si y sólo si todos los 2 A multi-set (o bolsa) es una extensión a la noción de conjunto, permitiendo la posibilidad de múltiples apariencias del mismo elemento. El Sexto Intl. Conjunto Conf. en Agentes Autónomos y Sistemas Multi-Agentes (AAMAS 07) 639 variables en las expresiones de sus arcos entrantes se unen a algunos valores (cada una de estas fijaciones se refiere como un elemento vinculante). Si es así, la transición puede ocurrir eliminando tokens de sus lugares de entrada y añadiendo tokens a sus lugares de salida. Además de las expresiones de arco, es posible conectar una expresión booleana de guardia (con variables) a cada transición. Juntando todos los elementos de arriba obtenemos una definición formal de CPN que se empleará más adelante para propósitos de mapeo. Def. 10. Un CPN es un conjunto finito de tipos no vacíos, también llamados conjuntos de colores; ii) P es un conjunto finito de lugares; iii) T es un conjunto finito de transiciones; iv) A es un conjunto finito de arcos; v) N es una función de nodo definida de A a P × T • T × P; vi) C es una función de color de P a فارسى; vii) G es una De acuerdo con las redes Petri ordinarias, el comportamiento concurrente de un CPN se basa en la noción de paso. Formalmente, un paso es un no vacío y finito multi-set sobre el conjunto de todos los elementos de unión. Deje que el paso S se active en una marca M. Entonces, S puede ocurrir, cambiando la marca M a M. Además, decimos que el marcado M es directamente accesible desde el marcado M por la ocurrencia del paso S, y lo denotamos por M[S > M. Una secuencia de ocurrencia finita es una secuencia finita de pasos y marcas: M1[S1 > M2. . . Mn[Sn > Mn+1 de tal manera que n+N y Mi[Si > Mi+1 . . , n}. El conjunto de todas las marcas posibles alcanzables para una red neta de una marca M se llama su conjunto de alcance, y se denota como R(Net, M). 5.1 Mapeo a redes de Petri de colores Nuestra estructura normativa es un gráfico bipartito etiquetado. Lo mismo puede decirse de una red Petri coloreada. Estamos presentando un mapeo f de uno a otro, con el fin de proporcionar semántica para la estructura normativa y probar las propiedades al respecto mediante el uso de resultados teóricos bien conocidos de trabajo en CPNs. El mapeo f hace uso de correspondencias entre escenas normativas y lugares CPN, transiciones normativas y transiciones CPN y finalmente, entre etiquetas de arco y expresiones de arco CPN. S → P B → T Lin Lout → E El conjunto de tipos es el conjunto singleton que contiene el color NP (es decir. * = {NP}). Este tipo complejo está estructurado de la siguiente manera (utilizamos CPN-ML [4] sintaxis): color NPT = con Obl  Per  Prh  NoMod color IP = con infor  declaramos  offer color UTT = record illp : IP ag1, role1, ag2, role2 : string content : string time : int color NP = Los arcos son trazados casi directamente. A es un conjunto finito de arcos y N es una función de nodo, de tal manera que Aa Aa Ain Aout. N(a) = a. La función de inicialización I se define como I(p) = Δs ( Por último, la función de color C asigna el color NP a cada lugar: C(p) = NP (­p ­P). No estamos haciendo uso de la función de guardia G. En el trabajo futuro, esta función se puede utilizar para modelar restricciones cuando extendemos la expresividad de nuestro lenguaje de norma. 5.2 Propiedades de las estructuras normativas Después de haber definido el mapeo desde las estructuras normativas hasta las redes de Petri coloreadas, ahora analizamos las propiedades de los CPN que nos ayudan a entender la complejidad de la detección de conflictos. Una pregunta que nos gustaría responder es, si en un momento dado, una determinada estructura normativa está libre de conflictos. Tal instantánea de una estructura normativa corresponde a una marca en el CPN cartografiado. Def. 11. Dada una marca Mi, esta marca es libre de conflicto si p  P. np1, np2  Mi(p) tal que np1.mode = Obl y np2.mode = Prh y np1.illoc y np2.illoc unificar bajo una sustitución válida. Otra pregunta interesante sería si se producirá un conflicto a partir de una instantánea del sistema propagando las posiciones normativas. Para responder a esta pregunta, primero traducimos la instantánea de la estructura normativa al CPN correspondiente y luego ejecutamos la secuencia de ocurrencia finita de marcas y pasos, verificando la libertad de conflicto de cada marca a medida que avanzamos. Def. 12. Dada una marca Mi, una secuencia de ocurrencia finita Si, Si+1,..., Sn se llama libre de conflictos, si y sólo si Mi[Si > Mi+1. . . Mn[Sn > Mn+1 y Mk están libres de conflictos para todos los k, de modo que i ≤ k ≤ n + 1. Sin embargo, la cuestión principal que nos gustaría investigar, es si una estructura normativa dada es o no resistente a los conflictos, es decir, si los agentes que promulgan el MAS son capaces de provocar conflictos a través de sus acciones. Tan pronto como se incluye la posibilidad de acciones (o declaraciones) de agentes autónomos, se pierde el determinismo. Después de haber mapeado la estructura normativa a un CPN, ahora añadimos modelos de CPN de las interacciones de agentes. Cada forma de interacción con el agente (es decir, cada actividad) se puede modelar utilizando CPN en la línea de Cost et al. [5]. Estos CPN no determinantes alimentan tokens en el CPN que modela la estructura normativa. Esto lleva a la introducción de no-determinismo en el PCN combinado. La mitad inferior de la figura 3 muestra parte de un modelo CPN de un protocolo de agente donde el arco denotado con 1 representa alguna pronunciación de una ilocución por un agente. La transición de destino de este arco, no sólo mueve un token al siguiente estado de este CPN, sino que también coloca un token en el lugar correspondiente a la escena normativa apropiada en el modelo del CPN de la estructura normativa (a través del arco 2). La transición 3 finalmente podría propagar ese símbolo en forma de una obligación, por ejemplo. Así, a partir de una marca dada, muchas secuencias de ocurrencia diferentes son posibles dependiendo de las acciones de los agentes. Utilizamos el conjunto de alcance R para definir una situación en la que los agentes no pueden causar conflictos. 640 La Sexta Intl. Conjunto Conf. sobre Agentes Autónomos y Sistemas Multi-Agentes (AAMAS 07) Figura 3: Construcción del CPN combinado Def. 13. Dado un N neto, una marca M es resistente a los conflictos si y sólo si todas las marcas en R(N,M) están libres de conflictos. La verificación de la libertad de conflicto de una marca se puede hacer en tiempo polinomio mediante la verificación de todos los lugares del CPN en busca de fichas en conflicto. La libertad de conflicto de una secuencia de ocurrencia en el CPN que representa la estructura normativa también se puede hacer en tiempo polinomio ya que esta secuencia es determinista dada una instantánea. El hecho de que se diseñe o no una estructura normativa corresponde con seguridad a la comprobación de la resistencia a los conflictos de la marca M0 inicial. Ahora, verificar la resistencia al conflicto de una marca se convierte en una tarea muy difícil. Corresponde al problema de la accesibilidad en un CPN: ¿se puede alcanzar un estado o se puede lograr una marca que contenga un conflicto?. Este problema de alcanzabilidad es conocido por ser NP-completo para las redes Petri ordinarias [22] y como las RCP son funcionalmente idénticas, no podemos esperar verificar la resistencia a los conflictos de una estructura normativa fuera de línea en un tiempo razonable. Por lo tanto, se necesitan mecanismos de distribución y tiempo de ejecución para garantizar que una estructura normativa mantenga la coherencia. Presentamos uno de esos mecanismos en la sección siguiente. 6. GESTIÓN DE ESTRUCTURAS NORMATIVAS Una vez detectado un conflicto (según se define en la Sección 4), proponemos emplear al unificador para resolver el conflicto. En nuestro ejemplo, si las variables en prh(inform(a1, r1, a2, r2, p(Y, d), T)) no obtienen los valores especificados en la sustitución Sin embargo, en lugar de computar el conjunto de complementos de una sustitución (que puede ser un conjunto infinito) proponemos anotar la prohibición con el propio unificador y utilizarla para determinar cuáles son las variables de esa prohibición no pueden ser en futuras unificaciones para evitar un conflicto. Por lo tanto denotamos prohibiciones anotadas como prh( ̄I) . . Es un conjunto de unificadores. Las normas anotadas3 se interpretan como constructos deonticos con influencias restringidas, es decir, su efecto (sobre agentes, roles e ilocuciones) ha sido limitado por el conjunto de unificadores. Una prohibición puede estar en conflicto con varias obligaciones en una escena normativa dada s = id, Δ y tenemos que registrar (y posiblemente evitar) todos estos conflictos. Definimos a continuación un algoritmo que garantiza que una posición normativa se añada a una escena normativa de tal manera que no cause ningún conflicto. 3 Aunque proponemos limitar las prohibiciones, el mismo mecanismo puede utilizarse para definir la reducción de obligaciones en su lugar. Estas diferentes políticas dependen de la semántica deontica prevista y de los requisitos de los sistemas abordados. Por ejemplo, algunos MAS pueden exigir que sus agentes no actúen en presencia de conflictos, es decir, que se reduzca la obligación. 6.1 Resolución de conflictos Proponemos una forma de resolver los conflictos normativos mediante la unificación. Detectamos la superposición de las influencias de las normas, es decir. cómo afectan al comportamiento de los agentes afectados, y reducimos la influencia de la posición normativa, mediante el uso adecuado de las anotaciones al comprobar si la norma se aplica a las ilocuciones. El algoritmo mostrado en la Figura 4 muestra cómo mantenemos un conjunto de normas libres de conflictos. Añade una norma dada N a un estado normativo existente, libre de conflictos Δ, obteniendo un nuevo estado normativo resultante Δ que es libre de conflictos, es decir, sus prohibiciones están anotadas con un conjunto de conjuntos de conflictos que indican qué fijaciones para variables deben evitarse para que los conflictos no tengan lugar. algoritmo addNorm(N, Δ) comienza 1 marca de tiempo(N) 2 caso N de 3 per( ̄I): Δ := Δ  {N} 4 prh(I): si N  Δ s.t. Conflict(N, N, Las líneas 4-5 abordan el caso cuando intentamos agregar una prohibición de base a un estado normativo: si entra en conflicto con cualquier obligación, entonces se descarta; de lo contrario se añade al estado normativo. En las líneas 6 a 12 se describe la situación en que la posición normativa que debe añadirse es una prohibición no básica. En este caso, el algoritmo inicializa un conjunto vacío y bucles (línea 9-10) a través de las normas N en el antiguo estado normativo Δ. Después de encontrar uno que entra en conflicto con N, el algoritmo actualiza el valor de la nueva configuración de conflicto (línea 10). Mediante el bucle a través de Δ, somos capaces de comprobar cualquier conflicto entre la nueva prohibición y las obligaciones existentes, construyendo adecuadamente la anotación  que se utilizará al añadir N a Δ en la línea 11. En las líneas 13 a 27 se describe cómo se ajusta una nueva obligación a un estado normativo existente. Hacemos uso de dos conjuntos inicialmente vacíos, temporales, Δ1, Δ2. El algoritmo pasa a través de Δ (líneas 16-25) recogiendo las prohibiciones anotadas N Hay, sin embargo, dos casos a tratar: el de cuando un motivo La Sexta Intl. Conjunto Conf. sobre los agentes autónomos y los sistemas multiagentes (AAMAS 07) se encuentra la prohibición 641 (línea 17), y su excepción, que abarca las prohibiciones no terrestres (línea 20). En ambos casos, la antigua prohibición se almacena en Δ1 (líneas 18 y 23) para ser posteriormente retirada de Δ (línea 26). Sin embargo, en el caso de una prohibición no terrestre, el algoritmo actualiza su anotación de conjuntos de conflicto (línea 24). El bucle garantiza que se lleve a cabo una búsqueda exhaustiva (lineal) a través de un estado normativo, comprobando si la nueva obligación está en conflicto con cualquier prohibición existente, posiblemente actualizando las anotaciones de estas prohibiciones en conflicto. En la línea 26 el algoritmo construye la nueva actualización Δ eliminando las antiguas prohibiciones almacenadas en Δ1 y añadiendo las prohibiciones actualizadas almacenadas en Δ2 (si las hay), así como la nueva obligación N. Nuestro algoritmo propuesto es correcto en que, para una posición normativa dada N y un estado normativo Δ, proporciona un nuevo estado normativo Δ en el que todas las prohibiciones tienen anotaciones que registran cómo se unifican con las obligaciones existentes. Sin embargo, las anotaciones pueden estar vacías: este es el caso cuando tenemos una prohibición básica o una prohibición que no unifica/conflige con ninguna obligación. Los permisos no afectan a nuestro algoritmo y se tratan adecuadamente (línea 3). Cualquier intento de insertar una prohibición de base que entre en conflicto, produce el mismo estado normativo (línea 4). Cuando se añade una nueva obligación, el algoritmo garantiza que se tienen en cuenta todas las prohibiciones (líneas 14 a 27), lo que conduce a la eliminación de las prohibiciones sobre el terreno en conflicto o a la actualización de las anotaciones de las prohibiciones no sobre el terreno. El algoritmo siempre termina: los bucles están sobre un conjunto finito Δ y los conflictos comprueban y establecen operaciones siempre terminan. La complejidad del algoritmo es lineal: el conjunto Δ sólo se examina una vez para cada caso posible de norma que se añade. Al gestionar los estados normativos también es posible que necesitemos eliminar posiciones normativas. Esto es sencillo: los permisos se pueden retirar sin ningún problema; las prohibiciones anotadas también se pueden eliminar sin más consideraciones; sin embargo, las obligaciones requieren algunas tareas domésticas. Cuando se va a eliminar una obligación, debemos verificarla contra todas las prohibiciones anotadas a fin de actualizar sus anotaciones. Aplicamos la comprobación de conflicto y obtenemos un unificador, luego eliminamos este unificador de la anotación de prohibiciones. Invocamos el algoritmo de eliminación como removeNorm(N, Δ): devuelve un nuevo estado normativo Δ en el que N ha sido eliminado, con posibles alteraciones a otras posiciones normativas como se explicó. 6.2 Promulgación de una estructura normativa La promulgación de una estructura normativa equivale a la ejecución paralela y distribuida de escenas normativas y transiciones normativas. A título ilustrativo, describiremos a continuación la interacción entre las situaciones normativas de pago y entrega y la transición normativa que los vincula en la mitad superior de la figura 2. Con este objetivo, considere, por ejemplo, que obl(inform(jules, cliente, rod, acc, pay(copper, 400, 350), T) Δpago y que Δentrega tiene prh(inform(rod,wm, jules, cliente, entregado(Z, Q), T)). Tales estados indican que el cliente Jules está obligado a pagar £400 por 350kg de cobre al contador Rod de acuerdo con la escena normativa de pago, mientras que Rod, asumiendo el papel de gerente de almacén esta vez, está prohibido entregar cualquier cosa al cliente Jules de acuerdo con la escena normativa de entrega. Para cada escena normativa, el proceso de promulgación es el siguiente. En primer lugar, procesa su cola de mensajes entrantes que contiene tres tipos de mensajes: declaraciones de la actividad a la que está vinculada; y comandos normativos para agregar o eliminar posiciones normativas. Por ejemplo, en nuestro ejemplo, la escena normativa de pago recoge la ilocución I = utt((inform(jules, cliente, varilla, acc, pay(cobre, 400, 350), 35)) para el cliente Jules pendiente de pago por cobre (a través de la flecha A en la figura 2). Las Uterancias son timestamped y subsecuentemente agregadas al estado normativo. Tendríamos Δpayment = Δpayment {I}, en nuestro ejemplo. Al recibir órdenes normativas para agregar o eliminar una posición normativa, la escena normativa invoca el algoritmo de adición o eliminación correspondiente descrito en la Sección 6.1. En segundo lugar, la escena normativa reconoce su cambio de estado al enviar un mensaje desencadenante a cada transición normativa saliente a la que está conectado. En nuestro ejemplo, el escenario normativo de pagos estaría señalando su cambio de estado a la transición normativa nt. Para las transiciones normativas, el proceso funciona de manera diferente. Debido a que cada transición normativa controla el funcionamiento de una sola regla, al recibir un mensaje de activación, encuesta cada escena normativa entrante para sustituciones de los esquemas de ilocución pertinentes en el LHS de su regla. En nuestro ejemplo, nt (responsable de la regla descrita en la Sección 3.4), encuestaría el escenario normativo de pago (vía flecha B) para sustituciones. Al recibir respuestas de ellos (en forma de conjuntos de sustituciones junto con marcas de tiempo), tiene que unificar las sustituciones de cada una de estas escenas normativas. Para cada unificación que encuentra, la regla se activa, y por lo tanto el comando normativo correspondiente se envía a lo largo de la escena normativa de salida. La transición normativa entonces mantiene un seguimiento del mensaje de disparo que envió y de las marcas de tiempo de las posiciones normativas que desencadenó el disparo. Esto se hace para asegurar que las mismas posiciones normativas en el LHS de una regla sólo desencadenen su disparo una vez. En nuestro ejemplo, nt estaría recibiendo  = {X/jules, Y/rod, Z/copper, Q/350} de la escena normativa de pagos. Dado que las substiciones en unifican con la regla nts, la regla es disparada, y el comando normativo add(delivery : obli(rod, wm, jules, client, delivery(copper, 350), T)) es enviado a lo largo de la escena normativa de entrega para obligar a Rod a entregar al cliente Jules 350kg de cobre. Después de eso, la escena normativa de entrega invocaría el algoritmo addNorm de la figura 4 con Δdelivery y N = obli(rod, wm, jules, client, delivered(copper, 350)) como argumentos. 7. TRABAJOS Y CONCLUSIONES RELACIONADOS Nuestras contribuciones en este documento son triples. En primer lugar, introducimos un enfoque para la gestión y el razonamiento de las normas de manera distribuida. Hasta donde sabemos, hay poco trabajo publicado en esta dirección. En [8, 21] se presentan dos idiomas para la aplicación distribuida de las normas en el MAS. Sin embargo, en ambos trabajos, cada agente tiene una interfaz de mensaje local que envía mensajes legales de acuerdo con un conjunto de normas. Dado que estas interfaces son locales para cada agente, las normas sólo pueden expresarse en términos de acciones de ese agente. Se trata de una grave desventaja, por ejemplo. cuando uno necesita activar una obligación para con un agente debido a un cierto mensaje de otro. La segunda contribución es la propuesta de una estructura normativa. La noción es fructífera porque permite la separación de las cuestiones normativas y de procedimiento. La estructura normativa que proponemos evidencia la similitud entre la propagación de posiciones normativas y la propagación 642 La Sexta Intl. Conjunto Conf. sobre Agentes Autónomos y Sistemas Multi-Agentes (AAMAS 07) de tokens en Redes Petri Coloradas. Esa similitud sugiere fácilmente una cartografía entre los dos, y da lugar a un tratamiento analítico conveniente de la estructura normativa, en general, y la complejidad de la detección de conflictos, en particular. La idea de modelar interacciones (en forma de conversaciones) a través de Petri Nets se ha investigado en [18], donde el medio de interacción y los agentes individuales se modelan como subredes de CPN que posteriormente se combinan para su análisis. En [5], las conversaciones se diseñan y analizan por primera vez a nivel de los CPN y posteriormente se traducen en protocolos. Lin et al. [20] mapear esquemas de conversación a CPNs. Según nuestro conocimiento, el uso de esta representación en apoyo de la detección de conflictos en el MAS regulado no ha sido reportado en otros lugares. Por último, presentamos un mecanismo distribuido para resolver los conflictos normativos. Sartor [25] trata los conflictos normativos desde el punto de vista de la teoría jurídica y sugiere una forma de ordenar las normas involucradas. Su idea se implementa en [12], pero requiere un recurso central para el mantenimiento de normas. El enfoque para la detección y resolución de conflictos es una adaptación y extensión del trabajo sobre gráficos de instanciación reportados en [17] y un algoritmo relacionado en [27]. El algoritmo presentado en el presente trabajo puede ser utilizado para administrar estados normativos distribuidos: escenas normativas que suceden en paralelo tienen un estado normativo asociado Δ al que el algoritmo se aplica de forma independiente cada vez que se introduce una nueva norma. Estas tres contribuciones que presentamos en este documento abren muchas posibilidades para el trabajo futuro. Cabe mencionar en primer lugar, que como estrategia amplia estamos trabajando en una generalización de la noción de estructura normativa para hacerla funcionar con diferentes modelos de coordinación, con un contenido deontico más rico y además de diferentes realizaciones computacionales de MAS regulado. Como primer paso en esta dirección estamos aprovechando la disociación entre los protocolos de interacción y la orientación normativa declarativa que la estructura normativa pone a disposición, para proporcionar una capa normativa para las instituciones electrónicas (como se define en [1]). Esperamos que este acoplamiento dote a las instituciones electrónicas de un entorno normativo más flexible y más expresivo. Además, queremos extender nuestro modelo a través de varias direcciones: (1) manejar la negación y las limitaciones como parte del lenguaje de la norma, y en particular la noción de tiempo; (2) dar cabida a múltiples autoridades jerárquicas de normas basadas en roles, en la línea de Cholvy y Cuppens [3] y relaciones de poder como sugiere Carabelea et al. [2]; (3) para captar en el algoritmo de resolución de conflictos diferentes semánticas relacionadas con las nociones deonticas apoyando diferentes axiomaciones (por ejemplo, fuerza relativa de la prohibición frente a la obligación, nociones deonticas predeterminadas, inconsistencias deonticas). En el lado teórico, pretendemos utilizar técnicas de análisis de CPN para caracterizar clases de CPN (por ejemplo, acíclicas, simétricas, etc.) que corresponden a familias de Estructuras Normativas susceptibles a la detección de conflictos fuera de línea. La combinación de estas técnicas junto con nuestros mecanismos de resolución de conflictos en línea pretende dotar a los diseñadores del MAS de la capacidad de incorporar normas en sus sistemas de una manera basada en principios. 8. REFERENCIAS [1] J. L. Arcos, M. Esteva, P. Noriega, J. A. Rodr guez, y C. Sierra. Ingeniería de entornos abiertos con instituciones electrónicas. Journal on Engineering Applications of Artificial Intelligence, 18(2):191-204, 2005. [2] C. Carabelea, O. Boissier, y C. Castelfranchi. Usar el poder social para permitir a los agentes razonar sobre ser parte de un grupo. En el 5o Internat. Taller, EEAT 2004, págs. 166 a 177, 2004. [3] L. Cholvy y F. Cuppens. Solución de conflictos normativos mediante la fusión de funciones. En la Quinta Conferencia Internacional sobre Inteligencia Artificial y Derecho, Washington, Estados Unidos, 1995. [4] S. Christensen y T. B. Haagh. Diseño CPN - vista general de la sintaxis CPN ML. Informe técnico, Universidad de Aarhus, 1996. [5] R. S. Cost, Y. Chen, T. W. Finin, Y. Labrou e Y. Peng. Usando petri redes de colores para modelar la conversación. In Issues in Agent Communication, págs. 178 a 192, Londres, Reino Unido, 2000. [6] F. Dignum. Agentes autónomos con normas. Inteligencia Artificial y Ley, 7(1):69-79, 1999. [7] A. Elhag, J. Breuker y P. Brouwer. Sobre el análisis formal de los conflictos normativos. Información & Comunicaciones. Techn. Ley, 9(3):207-217, Oct. 2000. [8] M. Esteva, W. Vasconcelos, C. Sierra, y J. A. Rodr guez-Aguilar. Consistencia normativa en las instituciones electrónicas. volumen 3171 (LNAI), páginas 494-505. Springer-Verlag, 2004. [9] M. Fitting. Prueba de la lógica de primer orden y del teorema automatizado. Springer-Verlag, Nueva York, Estados Unidos, 1990. [10] N. Fornara, F. Vigan`o y M. Colombetti. Un enfoque impulsado por eventos a las normas en las instituciones artificiales. En el taller AAMAS05: Agentes, normas e instituciones para sistemas multiagente regulados (ANI@REM), Utrecht, 2005. [11] D. Gaertner, P. Noriega y C. Sierra. Ampliación de la arquitectura BDI con compromisos. En Actas del IX Congreso Internacional de la Asociación Catalana de Inteligencia Artificial, 2006. [12] A. Garc a-Camino, P. Noriega, y J.-A. Rodr guez-Aguilar. Un algoritmo para la resolución de conflictos en actividades reguladas compuestas. En el 7o taller Int.Workshop - ESAW 06, 2006. [13] A. Garc a-Camino, J.-A. Rodr guez-Aguilar, C. Sierra y W. Vasconcelos. Una arquitectura distribuida para las Sociedades de Agentes de Normas. En DALT III, volumen 3904 (LNAI), páginas 89 a 105. Springer, 2006. [14] F. Giunchiglia y L. Serafini. Lógicas jerárquicas multilenguaje o: Cómo podemos prescindir de lógicas modales. Inteligencia Artificial, 65(1):29-70, 1994. [15] J. Habermas. La Teoría de la Comunicación Acción, Volumen Uno, La Razón y la Racionalización de la Sociedad. Beacon Press, 1984. [16] K. Jensen. Redes Petri coloreadas: Conceptos básicos, métodos de análisis y usos prácticos (Volumen 1). Springer, 1997. [17] M. Kollingbaum y T. Norman. Estrategias para resolver conflictos de normas con razonamiento práctico. En el Taller de Coordinación de la CEPA en Sociedades de Agentes Emergentes 2004, 2004. [18] J.-L. Koning, G. Francois e Y. Demazeau. Formalización y prevalidación para protocolos de interacción en sistemas multiagente. En ECAI, págs. 298 a 307, 1998. [19] B. Kramer y J. Mylopoulos. Representación del conocimiento. En S. C. Shapiro, editor, Enciclopedia de Inteligencia Artificial, volumen 1, páginas 743-759. John Wiley & Sons, 1992. [20] F. Lin, D. H. Norrie, W. Shen y R. Kremer. Un enfoque basado en esquemas para especificar las políticas de conversación. En Temas de Comunicación de Agentes, págs. 193-204, 2000. [21] N. Minsky. Interacción gobernada por la ley (LGI): Un mecanismo de coordinación y control distribuido (Una introducción y un manual de referencia). Informe técnico, Universidad Rutgers, 2005. [22] T. Murata. Redes Petri: Propiedades, análisis y aplicaciones. Actas del IEEE, 77(4):541-580, 1989. [23] S. Parsons, C. Sierra y N. Jennings. Agentes que razonan y negocian discutiendo. Diario de Lógica y Computación, 8(3):261-292, 1998. [24] A. Ricci y M. Viroli. Artefactos de Coordinación: Una Abstracción Unificante para la Coordinación de Ingeniería Mediada por el Medio Ambiente en MAS. Informatica, 29:433-443, 2005. [25] G. Sartor. Conflictos normativos en el razonamiento jurídico. Inteligencia Artificial y Ley, 1(2-3):209-235, junio de 1992. [26] M. Sergot. Una teoría computacional de posiciones normativas. ACM Trans. Comput. Lógica, 2(4):581-622, 2001. [27] W. W. Vasconcelos, M. Kollingbaum, y T. Norman. Resolver conflictos e incoherencias en las organizaciones virtuales reguladas por normas. En Actas de AAMAS 07, Hawaii, EE.UU., 2007. IFAAMAS. [28] G. H. von Wright. Norma y acción: Una investigación lógica. Routledge y Kegan Paul, Londres, 1963. [29] M. Wooldridge. Una introducción a los sistemas multiagente. John Wiley & Sons, Chichester, Reino Unido, febrero de 2002. El Sexto Intl. Conjunto Conf. sobre agentes autónomos y sistemas de agentes múltiples (AAMAS 07) 643 ",
            "error": []
        },
        "coordination": {
            "translated_key": "coordinación",
            "translated_annotated_text": "Gestión de Normas Distribuidas en Sistemas Regulados Multi-Agente ∗ Dorian Gaertner Dept. de Computación, Imperial College London, Londres SW7 2AZ, Reino Unido dg00@doc.ic.ac.uk Andrés García-Camino, Pablo Noriega, J.-A. Rodriguez-Aguilar IIIA-CSIC, 08193 Bellaterra, España {andres,pablo,jarážiya.csic.es Wamberto Vasconcelos Dept. de Ciencias de la Computación, Universidad de Aberdeen, Aberdeen AB24 3UE, Reino Unido wvasconcelos@acm.org RESUMEN Las normas son ampliamente reconocidas como un medio de coordinar sistemas multi-agentes. La gestión distribuida de las normas es una cuestión difícil y observamos una falta de realizaciones computacionales verdaderamente distribuidas de los modelos normativos. Con el fin de regular el comportamiento de los agentes autónomos que participan en múltiples actividades relacionadas, proponemos un modelo normativo, la Estructura Normativa (NS), un artefacto que se basa en la propagación de posiciones normativas (obligaciones, prohibiciones, permisos), como consecuencias de las acciones de los agentes. Dentro de un NS, los conflictos pueden surgir debido a la naturaleza dinámica del MAS y la concurrencia de acciones de los agentes. Sin embargo, garantizar la libertad de conflicto de un NS en el momento del diseño es computacionalmente intratable. Demostramos esto formalizando la noción de conflicto, proporcionando un mapeo de los NS en las Redes Petri Coloreadas y tomando prestado los resultados teóricos bien conocidos de ese campo. Dado que se requiere la resolución de conflictos en línea, presentamos un algoritmo tratable que se empleará de forma distribuida. Luego demostramos que este algoritmo es primordial para la promulgación distribuida de un NS. Categorías y sujetos Descriptores I.2.11 [Inteligencia Artificial Distribuida]: Idiomas y estructuras Términos generales Algoritmos, Diseño, Teoría 1. INTRODUCCIÓN Una característica fundamental de los sistemas multiagente abiertos y regulados en los que interactúan agentes autónomos, es que los agentes participantes están destinados a cumplir con las convenciones del sistema. Las normas pueden utilizarse para modelar tales convenciones y, por lo tanto, como medio para regular el comportamiento observable de los agentes [6, 29]. Hay muchas contribuciones sobre el tema de las normas de sociólogos, filósofos y lógicos (por ejemplo, [15, 28]). Sin embargo, hay muy pocas propuestas para la realización computacional de modelos normativos - la forma en que las normas pueden integrarse en el diseño y ejecución de MAS. Los pocos que existen (e.g. [10, 13, 24]), funcionan de manera centralizada, lo que crea cuellos de botella y puntos de fallo únicos. Hasta donde sabemos, ninguna propuesta apoya verdaderamente la promulgación distribuida de entornos normativos. En nuestro documento abordamos ese problema y proponemos medios para manejar los compromisos contradictorios en sistemas abiertos, regulados y multiagentes de manera distribuida. El tipo de MAS regulado que contemplamos consiste en actividades múltiples, simultáneas, relacionadas donde los agentes interactúan. Cada agente puede participar simultáneamente en varias actividades, y cambiar de una actividad a otra. Las acciones de un agente dentro de una actividad pueden tener consecuencias en forma de posiciones normativas (es decir. obligaciones, permisos y prohibiciones) [26] que puedan limitar su comportamiento futuro. Por ejemplo, un agente comprador que se queda sin crédito puede estar prohibido hacer más ofertas, o un agente vendedor está obligado a entregar después de cerrar un acuerdo. Asumimos que los agentes pueden optar por no cumplir todas sus obligaciones y, por lo tanto, pueden ser sancionados por el MAS. Obsérvese que, cuando se distribuyen las actividades, las posiciones normativas deben derivarse de las actividades en las que se generan a aquellas en las que surten efecto. Por ejemplo, la obligación de los vendedores de arriba debe fluir (o propagarse) de una actividad de negociación a una actividad de entrega. Dado que en un MAS abierto y regulado no se pueden incorporar aspectos normativos en el diseño de los agentes, adoptamos la opinión de que el MAS debe complementarse con un conjunto separado de normas que regulen aún más el comportamiento de los agentes participantes. Para modelar la separación de preocupaciones entre el nivel de \"coordinación\" (interacciones de agentes) y el nivel normativo (propagación de posiciones normativas), proponemos un artefacto llamado Estructura Normativa (NS). Dentro de un NS pueden surgir conflictos debido a la naturaleza dinámica del MAS y la concurrencia de acciones de los agentes. Por ejemplo, un agente puede estar obligado y prohibido a realizar el 636 978-81-904262-7-5 (RPS) c 2007 IFAAMAS muy mismo acción en una actividad. Dado que la regulación de un MAS implica que los agentes participantes deben ser conscientes de la validez de las acciones que tienen lugar dentro de él, dichos conflictos deben ser identificados y posiblemente resueltos si se necesita una reivindicación de validez para que un agente realice una acción o sea sancionado. Sin embargo, garantizar la libertad de conflicto de un NS en el momento del diseño es computacionalmente intratable. Demostramos esto formalizando la noción de conflicto, proporcionando un mapeo de los NS en las redes de Petri de colores (CPNs) y tomando prestado los resultados teóricos bien conocidos del campo de los CPNs. Creemos que se requiere la detección y resolución de conflictos en línea. Por lo tanto, presentamos un algoritmo tratable para la resolución de conflictos. Este algoritmo es primordial para la promulgación distribuida de un NS. El documento se organiza de la siguiente manera. En la Sección 2 detallamos un escenario para servir de ejemplo a lo largo del artículo. A continuación, en la Sección 3 definimos formalmente el artefacto de la estructura normativa. Además, en la sección 4 formalizamos la noción de conflicto para posteriormente analizar la complejidad de la detección de conflictos en términos de RCP en la sección 5. En la sección 6 se describe la gestión computacional de los NS describiendo su promulgación y presentando un algoritmo para la resolución de conflictos. Por último, comentamos sobre la labor conexa, sacamos conclusiones e informamos sobre la labor futura en la sección 7. 2. SCENARIO Utilizamos un escenario de cadena de suministro en el que empresas e individuos se reúnen en un mercado en línea para realizar negocios. El procedimiento de transacción global puede organizarse como seis actividades distribuidas, representadas como nodos en el diagrama de la Figura 1. En ellas participan diferentes participantes cuyo comportamiento se coordina a través de protocolos. En este escenario, los agentes pueden desempeñar uno de los cuatro papeles: marExit Inscripción Pago Entrega Negociación Coordinación Modelo Contrato Figura 1: Estructura de actividad del contador de ketplace (acc), cliente, proveedor (supp) y gerentes de almacén (wm). Las flechas que conectan las actividades representan cómo los agentes pueden moverse de una actividad a otra. Después de registrarse en el mercado, los clientes y proveedores se reúnen en una actividad en la que negocian los términos de su transacción, es decir. los precios, los importes de las mercancías que deban entregarse, los plazos y otros detalles. En la actividad contractual, se establece el pedido y se prepara una factura. El cliente participará entonces en una actividad de pago, verificando su solvencia e instruyendo a su banco a transferir la cantidad correcta de dinero. Mientras tanto, el proveedor se encargará de la entrega de las mercancías (por ejemplo: a través de un administrador de almacén) en la actividad de entrega. Finalmente, los agentes pueden salir del mercado conforme a un protocolo de salida predeterminado. El contable del mercado participa en la mayoría de las actividades como proveedor confiable de herramientas de auditoría. En el resto del documento nos basaremos en este escenario para ilustrar la noción de estructura normativa e ilustrar nuestro enfoque de la detección y resolución de conflictos en un entorno distribuido. 3. ESTRUCTURA NORMATIVA En los agentes MASs interactúan según protocolos que naturalmente se distribuyen. Abogamos por que las acciones en uno de esos protocolos puedan tener un efecto en la promulgación de otros protocolos. Algunas acciones pueden ser prohibidas u obligatorias, por ejemplo. Tomamos posiciones normativas para ser obligaciones, prohibiciones y permisos similares al trabajo descrito en [26]. La intención de agregar o eliminar una posición normativa que llamamos comando normativo. Los casos de posiciones normativas en un protocolo también pueden tener consecuencias para otros protocolos1. Para definir nuestro lenguaje de norma y especificar cómo se propagan las posiciones normativas, nos hemos inspirado en sistemas multicontexto [14]. Estos sistemas permiten estructurar el conocimiento en teorías formales distintas y definir las relaciones entre ellos. Las relaciones se expresan como reglas puente - la deducibilidad de las fórmulas en algunos contextos conduce a la deducción de otras fórmulas en otros contextos. Recientemente, estos sistemas se han utilizado con éxito para definir arquitecturas de agentes [11, 23]. La metáfora se traduce a nuestro trabajo actual de la siguiente manera: la expresión de las ilocuciones y/o la existencia de posiciones normativas en algunas escenas normativas conduce a la deducción de posiciones normativas en otras escenas normativas. Nos preocupa la propagación y distribución de posiciones normativas dentro de una red de escenas normativas distribuidas como consecuencia de las acciones de los agentes. Tomamos escenas normativas para ser conjuntos de posiciones normativas y expresiones que están asociadas con un protocolo de interacción subyacente correspondiente a una actividad. En esta sección, presentamos primero un lenguaje simple que capta estos aspectos e introduce formalmente las nociones de escena normativa, regla de transición normativa y estructura normativa. Damos la semántica prevista de estas reglas y mostramos cómo controlar un MAS a través de normas en un ejemplo. 3.1 Conceptos básicos Los componentes básicos de nuestro lenguaje son términos y fórmulas atómicas: Def. 1. Un término, denotado como t, es (i) cualquier constante expresada usando minúsculas (con o sin subíndices), por ejemplo. a, b0, c o ii) cualquier variable expresada utilizando mayúsculas (con o sin subíndices), por ejemplo. X, Y, Zb o iii) cualquier función f(t1,. . . , tn), donde f es un símbolo de función n-ary y t1,.., tn son términos. Algunos ejemplos de términos y funciones son Crédito, precio u oferta (biblia, 30), siendo respectivamente una variable, una constante y una función. Estaremos haciendo uso de identificadores en todo el papel, que son términos constantes y también necesitan la siguiente definición: Def. 2. Una fórmula atómica es cualquier construcción p(t1,. . . , tn), donde p es un símbolo predicado n-ary y t1,. . . , son términos. El conjunto de todas las fórmulas atómicas se denota como Δ. Nos centramos en una clase expresiva de MASs en la que la interacción se lleva a cabo por medio de actos de discurso ilocutionarios intercambiados entre los agentes participantes: Def. 3. I I I son las fórmulas atómicas terrestres que tienen la forma p(ag, r, ag, r, , t) donde p es un elemento de 1 Aquí, abstracto de protocolos y se refieren a ellos genéricamente como actividades. El Sexto Intl. Conjunto Conf. en Agentes Autónomos y Sistemas Multi-Agentes (AAMAS 07) 637 un conjunto de partículas ilocucionarias (por ejemplo: informar, petición, oferta); ag, ag son identificadores de agente; r, r son identificadores de rol; , un término de base arbitrario, es el contenido del mensaje, construido a partir de un lenguaje de contenido compartido; t  N es un sello de tiempo. El significado intuitivo de p(ag, r, ag, r, m, t) es que agente ag jugando rol r enviado mensaje m a agente ag jugando rol r en el momento t. Un ejemplo de una ilocución es informar(ag4, supp, ag3, cliente, offer(wire, 12), 10). A veces es útil referirse a las ilocuciones que no están totalmente fundamentadas, es decir, aquellas que pueden contener variables no instantiated (libres). En la descripción de un protocolo, por ejemplo, los valores precisos del mensaje intercambiado pueden quedar sin especificar. Durante la promulgación de los agentes del protocolo se producirán los valores reales que darán lugar a una ilocución del suelo. Así podemos definir esquemas de ilocución: Def. 4. Un esquema de ilocución ̄I es cualquier fórmula atómica p(ag, r, ag, r, ♥, t) en la que algunos de los términos pueden ser variables o pueden contener variables. 3.2 Definición formal de la noción de NS Primero definimos las escenas normativas de la siguiente manera: Def. 5. Una escena normativa es una tupla s = ids, Δs donde los ids son un identificador de escena y Δs es el conjunto de fórmulas atómicas Por ejemplo, una instantánea del estado de la escena normativa de entrega de nuestro escenario podría ser representada como: Δs = 8 < : utt(request(sean, client, kev, wm, receive(wire, 200), 20)), utt(accept(kev, wm, seen, customer, receive(wire, 200), 30)) 9 = ; Es decir, Tenga en cuenta que el estado de una escena normativa Δs evoluciona con el tiempo. Estas escenas normativas están conectadas entre sí a través de transiciones normativas que especifican cómo las expresiones y posiciones normativas en una escena afectan a otras escenas normativas. Como se mencionó anteriormente, las actividades no son independientes, ya que las ilocuciones pronunciadas en algunas de ellas pueden tener un efecto en otras. Las reglas normativas de transición definen las condiciones bajo las cuales se genera un comando normativo. Estas condiciones son declaraciones o posiciones normativas asociadas a un protocolo dado (denominadas por ejemplo. actividad : expresión ) que dan un comando normativo, es decir. la adición o supresión de otra posición normativa, posiblemente relacionada con una actividad diferente. Nuestras reglas de transición están así definidas: Def. 6. Una regla de transición normativa R es de la forma: R ::= V C V ::= ids : D  V, V D ::= N  utt( ̄I) N ::= per( ̄I)  prh( ̄I)  obli( ̄I) C ::= add(ids : N)  remove(ids : N) donde ̄I es un esquema permiso, prohibición u obligación), ids es un identificador de la actividad s y C es un comando normativo. Dotamos nuestro lenguaje con la semántica habitual de los lenguajes basados en reglas [19]. Las reglas trazan una estructura normativa existente a una nueva estructura normativa en la que sólo cambia el estado de las escenas normativas. En las definiciones siguientes nos basamos en el concepto estándar de sustitución [9]. Def. 7. Una transición normativa es un tupla b = idb, rb donde idb es un identificador y rb es una regla de transición normativa. Proponemos ampliar la noción de MAS, regulada por protocolos, con una capa adicional consistente en escenas normativas y transiciones normativas. Esta capa se representa como un gráfico bipartito que llamamos estructura normativa. Una estructura normativa relaciona escenas normativas y transiciones normativas especificando qué posiciones normativas deben generarse o eliminarse en qué escenas normativas. Def. 8. Una estructura normativa es un gráfico bipartito etiquetado NS = Nodos, bordes, Lin, Lout. Nodos es un conjunto de Sâ B donde S es un conjunto de escenas normativas y B es un conjunto de transiciones normativas. Edges es un conjunto Ain Aout donde Ain  S × B es un conjunto de arcos de entrada etiquetados con una fórmula atómica utilizando la función de etiquetado Lin : Ain → D; y Aout  B × S es un conjunto de arcos de salida etiquetados con una posición normativa utilizando la función de etiquetado Lout : Aout → N. Lo siguiente debe contener: 1. Cada fórmula atómica que aparece en el LHS de una regla rb debe ser de la forma (ids : D) donde s â € € € € TM € € € € € € € € € € € € € € € € € € € € € € € € € Ain tal que es = La fórmula atómica que aparece en el RHS de una regla rb debe ser de la forma add(ids : N) o remove(ids : N) donde s â € S y â € Aout tal que aout = (b, s) y Lout (aout ) = N. 3. Ain tal que a = (s, b) y b = idb, rb y Lin (a) = D entonces (ids:D) debe ocurrir en el LHS de rb. 4. Afuera de tal manera que a = (b, s) y b = idb, rb y Lout (a) = N luego add(ids : N) o remove(ids : N) deben ocurrir en el RHS de rb. Los dos primeros puntos aseguran que cada fórmula atómica en el LHS de una regla de transición normativa etiqueta un arco que entra en la transición normativa apropiada en la estructura normativa, y que la fórmula atómica en el RHS etiqueta el arco saliente correspondiente. Los puntos tres y cuatro aseguran que las etiquetas de todos los arcos entrantes se utilicen en el LHS de la regla de transición normativa en la que entran estos arcos, y que las etiquetas de todos los arcos salientes se utilicen en el RHS de la regla de transición normativa que estos arcos dejan. 3.3 Semántica Destinada La semántica formal se definirá mediante un mapeo a Redes Petri Coloradas en la Sección 5.1. Aquí comenzamos a definir la semántica prevista de las reglas normativas de transición describiendo cómo una regla cambia un escenario normativo de una estructura normativa existente que produce una nueva estructura normativa. Cada regla se activa una vez para cada sustitución que unifica el lado izquierdo V de la regla con el estado de las escenas normativas correspondientes. Una fórmula atómica (es decir, una declaración o una posición normativa) si es unificable con una declaración o posición normativa que pertenece al estado del escenario normativo correspondiente. Cada vez que se activa una regla, se lleva a cabo el comando normativo especificado a la derecha de esa regla, con la intención de añadir o eliminar una posición normativa del estado de la escena normativa correspondiente. Sin embargo, la adición no es incondicional, ya que pueden surgir conflictos. Este tema se tratará en las secciones 4 y 6.1. 638 La Sexta Intl. Conjunto Conf. en Agentes Autónomos y Sistemas Multi-Agentes (AAMAS 07) 3.4 Ejemplo En nuestro ejemplo de ejecución tenemos la siguiente regla de transición normativa ejemplar: „ pago : obli(inform(X, cliente, Y, acc, pay(Z, P, Q, T)), pago : utt(inform(X, cliente, Y, acc, pay(Z, P, Q), T)) « entrega : a La norma es una obligación del agente Y (esta vez asumiendo el papel de gerente de almacén wm) de enviar un mensaje al cliente X que el artículo Z ha sido entregado. En la Figura 2 se muestra una representación diagnóstica de cómo se relacionan las actividades y una estructura normativa: Pago Entrega Contrato Nivel Normativo Salida Registro Pago Entrega Negociación Nivel de Coordinación Contrato nt Figura 2: Actividades y Estructura Normativa A medida que se pronuncian las ilocuciones durante las actividades, surgen posiciones normativas. Las preferencias y las posiciones normativas se combinan en normas de transición, lo que provoca el flujo de posiciones normativas entre las distintas situaciones normativas. La conexión entre los dos niveles se describe en la sección 6.2. 4. DEFINICIÓN DE CONFLICTOS Los términos conflicto deontico e inconsistencia deontica se han utilizado indistintamente en la literatura. Sin embargo, en este trabajo adoptamos el punto de vista de [7] en el que los autores sugieren que surge una inconsistencia deontica cuando una acción es simultáneamente permitida y prohibida - ya que un permiso no puede ser actuado en consecuencia, no se produce un conflicto real. Sin embargo, las situaciones en que una acción está simultáneamente obligada y prohibida son conflictos deonticos, ya que tanto las obligaciones como las prohibiciones influyen en los comportamientos en conflicto. El contenido de las posiciones normativas en este trabajo son ilocuciones. Por lo tanto, surge un conflicto normativo cuando una ilocución está simultáneamente obligada y prohibida. Proponemos utilizar la noción estándar de unificación [9] para detectar cuándo se superponen una prohibición y un permiso. Por ejemplo, una obligación obli(informar(A1, R1, A2, R2, p(c, X, T)) y una prohibición prh(informar(a1, r1, a2, r2, p(Y, d), T)) están en conflicto ya que se unifican en el punto Capturamos formalmente esta noción: Def. 9. Un conflicto (deontico) surge entre dos posiciones normativas N y N bajo una sustitución Es decir, una prohibición y una obligación están en conflicto si, y sólo si, sus ilocuciones se unifican en virtud de La sustitución, llamada aquí el conjunto de conflictos, unifica los agentes, roles y fórmulas atómicas. Asumimos que unificar es una implementación adecuada de un algoritmo de unificación que i) termina siempre (posiblemente fallando, si no se puede encontrar un unificador); ii) es correcto; y iii) tiene complejidad computacional lineal. Las incoherencias causadas por la misma ilocución, que se permiten y prohíben simultáneamente, pueden formalizarse de manera similar. En este trabajo nos centramos en los conflictos de prohibición/obligación, pero la maquinaria computacional introducida en la Sección 6.1 también puede ser utilizada para detectar inconsistencias de prohibición/permiso, si sustituimos la modalidad obli por per. 5. FORMALIZACIÓN DEL CONFLICTO-FREEDOM En esta sección presentamos algunos conocimientos de fondo sobre CPN asumiendo una comprensión básica de las redes Petri ordinarias. Para detalles técnicos, remitimos al lector a [16]. A continuación, mapeamos los NS a los CPN y analizamos sus propiedades. Los CPN combinan la fuerza de las redes Petri con la fuerza de los lenguajes de programación funcionales. Por un lado, las redes Petri proporcionan los primitivos para la descripción de la sincronización de los procesos concurrentes. Como se observa en [16], los CPN tienen una semántica que se basa en la verdadera concurrencia, en lugar de entrelazarse. En nuestra opinión, una semántica de verdadera moneda es más fácil de trabajar porque es la forma en que prevemos la conexión entre el nivel de \"coordinación\" y el nivel normativo de un sistema multi-agente. Por otra parte, los lenguajes de programación funcionales utilizados por los CPN proporcionan los primitivos para la definición de los tipos de datos y la manipulación de sus valores de datos. Por lo tanto, podemos traducir fácilmente expresiones de una estructura normativa. Por último, pero no por ello menos importante, los CPN tienen una semántica bien definida que define inequívocamente el comportamiento de cada CPN. Además, los CPN tienen un gran número de métodos e instrumentos de análisis formales mediante los cuales se pueden demostrar las propiedades de los CPN. En resumen, los CPN nos proporcionan todas las características necesarias para razonar formalmente sobre las estructuras normativas, dado que se proporciona una cartografía adecuada. De acuerdo con las redes Petri, los estados de un CPN están representados por medio de lugares. Pero a diferencia de Petri Nets, cada lugar tiene un tipo de datos asociado determinando el tipo de datos que el lugar puede contener. Un estado de un CPN se llama marca. Consiste en un número de fichas colocadas en los lugares individuales. Cada token lleva un valor de datos que tiene el tipo del lugar correspondiente. En general, un lugar puede contener dos o más tokens con el mismo valor de datos. Por lo tanto, una marca de un CPN es una función que mapea cada lugar en un multi-set2 de tokens del tipo correcto. Uno a menudo se refiere a los valores token como colores token y uno también se refiere a los tipos de datos como conjuntos de colores. Los tipos de un CPN pueden ser arbitrariamente complejos. Las acciones en un PCN están representadas mediante transiciones. Un arco entrante en una transición desde un lugar indica que la transición puede eliminar tokens del lugar correspondiente mientras que un arco saliente indica que la transición puede añadir tokens. El número exacto de tokens y sus valores de datos son determinados por las expresiones de arco, que se codifican utilizando el lenguaje de programación elegido para el CPN. Una transición está habilitada en un CPN si y sólo si todos los 2 A multi-set (o bolsa) es una extensión a la noción de conjunto, permitiendo la posibilidad de múltiples apariencias del mismo elemento. El Sexto Intl. Conjunto Conf. en Agentes Autónomos y Sistemas Multi-Agentes (AAMAS 07) 639 variables en las expresiones de sus arcos entrantes se unen a algunos valores (cada una de estas fijaciones se refiere como un elemento vinculante). Si es así, la transición puede ocurrir eliminando tokens de sus lugares de entrada y añadiendo tokens a sus lugares de salida. Además de las expresiones de arco, es posible conectar una expresión booleana de guardia (con variables) a cada transición. Juntando todos los elementos de arriba obtenemos una definición formal de CPN que se empleará más adelante para propósitos de mapeo. Def. 10. Un CPN es un conjunto finito de tipos no vacíos, también llamados conjuntos de colores; ii) P es un conjunto finito de lugares; iii) T es un conjunto finito de transiciones; iv) A es un conjunto finito de arcos; v) N es una función de nodo definida de A a P × T • T × P; vi) C es una función de color de P a فارسى; vii) G es una De acuerdo con las redes Petri ordinarias, el comportamiento concurrente de un CPN se basa en la noción de paso. Formalmente, un paso es un no vacío y finito multi-set sobre el conjunto de todos los elementos de unión. Deje que el paso S se active en una marca M. Entonces, S puede ocurrir, cambiando la marca M a M. Además, decimos que el marcado M es directamente accesible desde el marcado M por la ocurrencia del paso S, y lo denotamos por M[S > M. Una secuencia de ocurrencia finita es una secuencia finita de pasos y marcas: M1[S1 > M2. . . Mn[Sn > Mn+1 de tal manera que n+N y Mi[Si > Mi+1 . . , n}. El conjunto de todas las marcas posibles alcanzables para una red neta de una marca M se llama su conjunto de alcance, y se denota como R(Net, M). 5.1 Mapeo a redes de Petri de colores Nuestra estructura normativa es un gráfico bipartito etiquetado. Lo mismo puede decirse de una red Petri coloreada. Estamos presentando un mapeo f de uno a otro, con el fin de proporcionar semántica para la estructura normativa y probar las propiedades al respecto mediante el uso de resultados teóricos bien conocidos de trabajo en CPNs. El mapeo f hace uso de correspondencias entre escenas normativas y lugares CPN, transiciones normativas y transiciones CPN y finalmente, entre etiquetas de arco y expresiones de arco CPN. S → P B → T Lin Lout → E El conjunto de tipos es el conjunto singleton que contiene el color NP (es decir. * = {NP}). Este tipo complejo está estructurado de la siguiente manera (utilizamos CPN-ML [4] sintaxis): color NPT = con Obl  Per  Prh  NoMod color IP = con infor  declaramos  offer color UTT = record illp : IP ag1, role1, ag2, role2 : string content : string time : int color NP = Los arcos son trazados casi directamente. A es un conjunto finito de arcos y N es una función de nodo, de tal manera que Aa Aa Ain Aout. N(a) = a. La función de inicialización I se define como I(p) = Δs ( Por último, la función de color C asigna el color NP a cada lugar: C(p) = NP (­p ­P). No estamos haciendo uso de la función de guardia G. En el trabajo futuro, esta función se puede utilizar para modelar restricciones cuando extendemos la expresividad de nuestro lenguaje de norma. 5.2 Propiedades de las estructuras normativas Después de haber definido el mapeo desde las estructuras normativas hasta las redes de Petri coloreadas, ahora analizamos las propiedades de los CPN que nos ayudan a entender la complejidad de la detección de conflictos. Una pregunta que nos gustaría responder es, si en un momento dado, una determinada estructura normativa está libre de conflictos. Tal instantánea de una estructura normativa corresponde a una marca en el CPN cartografiado. Def. 11. Dada una marca Mi, esta marca es libre de conflicto si p  P. np1, np2  Mi(p) tal que np1.mode = Obl y np2.mode = Prh y np1.illoc y np2.illoc unificar bajo una sustitución válida. Otra pregunta interesante sería si se producirá un conflicto a partir de una instantánea del sistema propagando las posiciones normativas. Para responder a esta pregunta, primero traducimos la instantánea de la estructura normativa al CPN correspondiente y luego ejecutamos la secuencia de ocurrencia finita de marcas y pasos, verificando la libertad de conflicto de cada marca a medida que avanzamos. Def. 12. Dada una marca Mi, una secuencia de ocurrencia finita Si, Si+1,..., Sn se llama libre de conflictos, si y sólo si Mi[Si > Mi+1. . . Mn[Sn > Mn+1 y Mk están libres de conflictos para todos los k, de modo que i ≤ k ≤ n + 1. Sin embargo, la cuestión principal que nos gustaría investigar, es si una estructura normativa dada es o no resistente a los conflictos, es decir, si los agentes que promulgan el MAS son capaces de provocar conflictos a través de sus acciones. Tan pronto como se incluye la posibilidad de acciones (o declaraciones) de agentes autónomos, se pierde el determinismo. Después de haber mapeado la estructura normativa a un CPN, ahora añadimos modelos de CPN de las interacciones de agentes. Cada forma de interacción con el agente (es decir, cada actividad) se puede modelar utilizando CPN en la línea de Cost et al. [5]. Estos CPN no determinantes alimentan tokens en el CPN que modela la estructura normativa. Esto lleva a la introducción de no-determinismo en el PCN combinado. La mitad inferior de la figura 3 muestra parte de un modelo CPN de un protocolo de agente donde el arco denotado con 1 representa alguna pronunciación de una ilocución por un agente. La transición de destino de este arco, no sólo mueve un token al siguiente estado de este CPN, sino que también coloca un token en el lugar correspondiente a la escena normativa apropiada en el modelo del CPN de la estructura normativa (a través del arco 2). La transición 3 finalmente podría propagar ese símbolo en forma de una obligación, por ejemplo. Así, a partir de una marca dada, muchas secuencias de ocurrencia diferentes son posibles dependiendo de las acciones de los agentes. Utilizamos el conjunto de alcance R para definir una situación en la que los agentes no pueden causar conflictos. 640 La Sexta Intl. Conjunto Conf. sobre Agentes Autónomos y Sistemas Multi-Agentes (AAMAS 07) Figura 3: Construcción del CPN combinado Def. 13. Dado un N neto, una marca M es resistente a los conflictos si y sólo si todas las marcas en R(N,M) están libres de conflictos. La verificación de la libertad de conflicto de una marca se puede hacer en tiempo polinomio mediante la verificación de todos los lugares del CPN en busca de fichas en conflicto. La libertad de conflicto de una secuencia de ocurrencia en el CPN que representa la estructura normativa también se puede hacer en tiempo polinomio ya que esta secuencia es determinista dada una instantánea. El hecho de que se diseñe o no una estructura normativa corresponde con seguridad a la comprobación de la resistencia a los conflictos de la marca M0 inicial. Ahora, verificar la resistencia al conflicto de una marca se convierte en una tarea muy difícil. Corresponde al problema de la accesibilidad en un CPN: ¿se puede alcanzar un estado o se puede lograr una marca que contenga un conflicto?. Este problema de alcanzabilidad es conocido por ser NP-completo para las redes Petri ordinarias [22] y como las RCP son funcionalmente idénticas, no podemos esperar verificar la resistencia a los conflictos de una estructura normativa fuera de línea en un tiempo razonable. Por lo tanto, se necesitan mecanismos de distribución y tiempo de ejecución para garantizar que una estructura normativa mantenga la coherencia. Presentamos uno de esos mecanismos en la sección siguiente. 6. GESTIÓN DE ESTRUCTURAS NORMATIVAS Una vez detectado un conflicto (según se define en la Sección 4), proponemos emplear al unificador para resolver el conflicto. En nuestro ejemplo, si las variables en prh(inform(a1, r1, a2, r2, p(Y, d), T)) no obtienen los valores especificados en la sustitución Sin embargo, en lugar de computar el conjunto de complementos de una sustitución (que puede ser un conjunto infinito) proponemos anotar la prohibición con el propio unificador y utilizarla para determinar cuáles son las variables de esa prohibición no pueden ser en futuras unificaciones para evitar un conflicto. Por lo tanto denotamos prohibiciones anotadas como prh( ̄I) . . Es un conjunto de unificadores. Las normas anotadas3 se interpretan como constructos deonticos con influencias restringidas, es decir, su efecto (sobre agentes, roles e ilocuciones) ha sido limitado por el conjunto de unificadores. Una prohibición puede estar en conflicto con varias obligaciones en una escena normativa dada s = id, Δ y tenemos que registrar (y posiblemente evitar) todos estos conflictos. Definimos a continuación un algoritmo que garantiza que una posición normativa se añada a una escena normativa de tal manera que no cause ningún conflicto. 3 Aunque proponemos limitar las prohibiciones, el mismo mecanismo puede utilizarse para definir la reducción de obligaciones en su lugar. Estas diferentes políticas dependen de la semántica deontica prevista y de los requisitos de los sistemas abordados. Por ejemplo, algunos MAS pueden exigir que sus agentes no actúen en presencia de conflictos, es decir, que se reduzca la obligación. 6.1 Resolución de conflictos Proponemos una forma de resolver los conflictos normativos mediante la unificación. Detectamos la superposición de las influencias de las normas, es decir. cómo afectan al comportamiento de los agentes afectados, y reducimos la influencia de la posición normativa, mediante el uso adecuado de las anotaciones al comprobar si la norma se aplica a las ilocuciones. El algoritmo mostrado en la Figura 4 muestra cómo mantenemos un conjunto de normas libres de conflictos. Añade una norma dada N a un estado normativo existente, libre de conflictos Δ, obteniendo un nuevo estado normativo resultante Δ que es libre de conflictos, es decir, sus prohibiciones están anotadas con un conjunto de conjuntos de conflictos que indican qué fijaciones para variables deben evitarse para que los conflictos no tengan lugar. algoritmo addNorm(N, Δ) comienza 1 marca de tiempo(N) 2 caso N de 3 per( ̄I): Δ := Δ  {N} 4 prh(I): si N  Δ s.t. Conflict(N, N, Las líneas 4-5 abordan el caso cuando intentamos agregar una prohibición de base a un estado normativo: si entra en conflicto con cualquier obligación, entonces se descarta; de lo contrario se añade al estado normativo. En las líneas 6 a 12 se describe la situación en que la posición normativa que debe añadirse es una prohibición no básica. En este caso, el algoritmo inicializa un conjunto vacío y bucles (línea 9-10) a través de las normas N en el antiguo estado normativo Δ. Después de encontrar uno que entra en conflicto con N, el algoritmo actualiza el valor de la nueva configuración de conflicto (línea 10). Mediante el bucle a través de Δ, somos capaces de comprobar cualquier conflicto entre la nueva prohibición y las obligaciones existentes, construyendo adecuadamente la anotación  que se utilizará al añadir N a Δ en la línea 11. En las líneas 13 a 27 se describe cómo se ajusta una nueva obligación a un estado normativo existente. Hacemos uso de dos conjuntos inicialmente vacíos, temporales, Δ1, Δ2. El algoritmo pasa a través de Δ (líneas 16-25) recogiendo las prohibiciones anotadas N Hay, sin embargo, dos casos a tratar: el de cuando un motivo La Sexta Intl. Conjunto Conf. sobre los agentes autónomos y los sistemas multiagentes (AAMAS 07) se encuentra la prohibición 641 (línea 17), y su excepción, que abarca las prohibiciones no terrestres (línea 20). En ambos casos, la antigua prohibición se almacena en Δ1 (líneas 18 y 23) para ser posteriormente retirada de Δ (línea 26). Sin embargo, en el caso de una prohibición no terrestre, el algoritmo actualiza su anotación de conjuntos de conflicto (línea 24). El bucle garantiza que se lleve a cabo una búsqueda exhaustiva (lineal) a través de un estado normativo, comprobando si la nueva obligación está en conflicto con cualquier prohibición existente, posiblemente actualizando las anotaciones de estas prohibiciones en conflicto. En la línea 26 el algoritmo construye la nueva actualización Δ eliminando las antiguas prohibiciones almacenadas en Δ1 y añadiendo las prohibiciones actualizadas almacenadas en Δ2 (si las hay), así como la nueva obligación N. Nuestro algoritmo propuesto es correcto en que, para una posición normativa dada N y un estado normativo Δ, proporciona un nuevo estado normativo Δ en el que todas las prohibiciones tienen anotaciones que registran cómo se unifican con las obligaciones existentes. Sin embargo, las anotaciones pueden estar vacías: este es el caso cuando tenemos una prohibición básica o una prohibición que no unifica/conflige con ninguna obligación. Los permisos no afectan a nuestro algoritmo y se tratan adecuadamente (línea 3). Cualquier intento de insertar una prohibición de base que entre en conflicto, produce el mismo estado normativo (línea 4). Cuando se añade una nueva obligación, el algoritmo garantiza que se tienen en cuenta todas las prohibiciones (líneas 14 a 27), lo que conduce a la eliminación de las prohibiciones sobre el terreno en conflicto o a la actualización de las anotaciones de las prohibiciones no sobre el terreno. El algoritmo siempre termina: los bucles están sobre un conjunto finito Δ y los conflictos comprueban y establecen operaciones siempre terminan. La complejidad del algoritmo es lineal: el conjunto Δ sólo se examina una vez para cada caso posible de norma que se añade. Al gestionar los estados normativos también es posible que necesitemos eliminar posiciones normativas. Esto es sencillo: los permisos se pueden retirar sin ningún problema; las prohibiciones anotadas también se pueden eliminar sin más consideraciones; sin embargo, las obligaciones requieren algunas tareas domésticas. Cuando se va a eliminar una obligación, debemos verificarla contra todas las prohibiciones anotadas a fin de actualizar sus anotaciones. Aplicamos la comprobación de conflicto y obtenemos un unificador, luego eliminamos este unificador de la anotación de prohibiciones. Invocamos el algoritmo de eliminación como removeNorm(N, Δ): devuelve un nuevo estado normativo Δ en el que N ha sido eliminado, con posibles alteraciones a otras posiciones normativas como se explicó. 6.2 Promulgación de una estructura normativa La promulgación de una estructura normativa equivale a la ejecución paralela y distribuida de escenas normativas y transiciones normativas. A título ilustrativo, describiremos a continuación la interacción entre las situaciones normativas de pago y entrega y la transición normativa que los vincula en la mitad superior de la figura 2. Con este objetivo, considere, por ejemplo, que obl(inform(jules, cliente, rod, acc, pay(copper, 400, 350), T) Δpago y que Δentrega tiene prh(inform(rod,wm, jules, cliente, entregado(Z, Q), T)). Tales estados indican que el cliente Jules está obligado a pagar £400 por 350kg de cobre al contador Rod de acuerdo con la escena normativa de pago, mientras que Rod, asumiendo el papel de gerente de almacén esta vez, está prohibido entregar cualquier cosa al cliente Jules de acuerdo con la escena normativa de entrega. Para cada escena normativa, el proceso de promulgación es el siguiente. En primer lugar, procesa su cola de mensajes entrantes que contiene tres tipos de mensajes: declaraciones de la actividad a la que está vinculada; y comandos normativos para agregar o eliminar posiciones normativas. Por ejemplo, en nuestro ejemplo, la escena normativa de pago recoge la ilocución I = utt((inform(jules, cliente, varilla, acc, pay(cobre, 400, 350), 35)) para el cliente Jules pendiente de pago por cobre (a través de la flecha A en la figura 2). Las Uterancias son timestamped y subsecuentemente agregadas al estado normativo. Tendríamos Δpayment = Δpayment {I}, en nuestro ejemplo. Al recibir órdenes normativas para agregar o eliminar una posición normativa, la escena normativa invoca el algoritmo de adición o eliminación correspondiente descrito en la Sección 6.1. En segundo lugar, la escena normativa reconoce su cambio de estado al enviar un mensaje desencadenante a cada transición normativa saliente a la que está conectado. En nuestro ejemplo, el escenario normativo de pagos estaría señalando su cambio de estado a la transición normativa nt. Para las transiciones normativas, el proceso funciona de manera diferente. Debido a que cada transición normativa controla el funcionamiento de una sola regla, al recibir un mensaje de activación, encuesta cada escena normativa entrante para sustituciones de los esquemas de ilocución pertinentes en el LHS de su regla. En nuestro ejemplo, nt (responsable de la regla descrita en la Sección 3.4), encuestaría el escenario normativo de pago (vía flecha B) para sustituciones. Al recibir respuestas de ellos (en forma de conjuntos de sustituciones junto con marcas de tiempo), tiene que unificar las sustituciones de cada una de estas escenas normativas. Para cada unificación que encuentra, la regla se activa, y por lo tanto el comando normativo correspondiente se envía a lo largo de la escena normativa de salida. La transición normativa entonces mantiene un seguimiento del mensaje de disparo que envió y de las marcas de tiempo de las posiciones normativas que desencadenó el disparo. Esto se hace para asegurar que las mismas posiciones normativas en el LHS de una regla sólo desencadenen su disparo una vez. En nuestro ejemplo, nt estaría recibiendo  = {X/jules, Y/rod, Z/copper, Q/350} de la escena normativa de pagos. Dado que las substiciones en unifican con la regla nts, la regla es disparada, y el comando normativo add(delivery : obli(rod, wm, jules, client, delivery(copper, 350), T)) es enviado a lo largo de la escena normativa de entrega para obligar a Rod a entregar al cliente Jules 350kg de cobre. Después de eso, la escena normativa de entrega invocaría el algoritmo addNorm de la figura 4 con Δdelivery y N = obli(rod, wm, jules, client, delivered(copper, 350)) como argumentos. 7. TRABAJOS Y CONCLUSIONES RELACIONADOS Nuestras contribuciones en este documento son triples. En primer lugar, introducimos un enfoque para la gestión y el razonamiento de las normas de manera distribuida. Hasta donde sabemos, hay poco trabajo publicado en esta dirección. En [8, 21] se presentan dos idiomas para la aplicación distribuida de las normas en el MAS. Sin embargo, en ambos trabajos, cada agente tiene una interfaz de mensaje local que envía mensajes legales de acuerdo con un conjunto de normas. Dado que estas interfaces son locales para cada agente, las normas sólo pueden expresarse en términos de acciones de ese agente. Se trata de una grave desventaja, por ejemplo. cuando uno necesita activar una obligación para con un agente debido a un cierto mensaje de otro. La segunda contribución es la propuesta de una estructura normativa. La noción es fructífera porque permite la separación de las cuestiones normativas y de procedimiento. La estructura normativa que proponemos evidencia la similitud entre la propagación de posiciones normativas y la propagación 642 La Sexta Intl. Conjunto Conf. sobre Agentes Autónomos y Sistemas Multi-Agentes (AAMAS 07) de tokens en Redes Petri Coloradas. Esa similitud sugiere fácilmente una cartografía entre los dos, y da lugar a un tratamiento analítico conveniente de la estructura normativa, en general, y la complejidad de la detección de conflictos, en particular. La idea de modelar interacciones (en forma de conversaciones) a través de Petri Nets se ha investigado en [18], donde el medio de interacción y los agentes individuales se modelan como subredes de CPN que posteriormente se combinan para su análisis. En [5], las conversaciones se diseñan y analizan por primera vez a nivel de los CPN y posteriormente se traducen en protocolos. Lin et al. [20] mapear esquemas de conversación a CPNs. Según nuestro conocimiento, el uso de esta representación en apoyo de la detección de conflictos en el MAS regulado no ha sido reportado en otros lugares. Por último, presentamos un mecanismo distribuido para resolver los conflictos normativos. Sartor [25] trata los conflictos normativos desde el punto de vista de la teoría jurídica y sugiere una forma de ordenar las normas involucradas. Su idea se implementa en [12], pero requiere un recurso central para el mantenimiento de normas. El enfoque para la detección y resolución de conflictos es una adaptación y extensión del trabajo sobre gráficos de instanciación reportados en [17] y un algoritmo relacionado en [27]. El algoritmo presentado en el presente trabajo puede ser utilizado para administrar estados normativos distribuidos: escenas normativas que suceden en paralelo tienen un estado normativo asociado Δ al que el algoritmo se aplica de forma independiente cada vez que se introduce una nueva norma. Estas tres contribuciones que presentamos en este documento abren muchas posibilidades para el trabajo futuro. Cabe mencionar en primer lugar, que como estrategia amplia estamos trabajando en una generalización de la noción de estructura normativa para hacerla funcionar con diferentes modelos de \"coordinación\", con contenido deontico más rico y además de diferentes realizaciones computacionales del MAS regulado. Como primer paso en esta dirección estamos aprovechando la disociación entre los protocolos de interacción y la orientación normativa declarativa que la estructura normativa pone a disposición, para proporcionar una capa normativa para las instituciones electrónicas (como se define en [1]). Esperamos que este acoplamiento dote a las instituciones electrónicas de un entorno normativo más flexible y más expresivo. Además, queremos extender nuestro modelo a través de varias direcciones: (1) manejar la negación y las limitaciones como parte del lenguaje de la norma, y en particular la noción de tiempo; (2) dar cabida a múltiples autoridades jerárquicas de normas basadas en roles, en la línea de Cholvy y Cuppens [3] y relaciones de poder como sugiere Carabelea et al. [2]; (3) para captar en el algoritmo de resolución de conflictos diferentes semánticas relacionadas con las nociones deonticas apoyando diferentes axiomaciones (por ejemplo, fuerza relativa de la prohibición frente a la obligación, nociones deonticas predeterminadas, inconsistencias deonticas). En el lado teórico, pretendemos utilizar técnicas de análisis de CPN para caracterizar clases de CPN (por ejemplo, acíclicas, simétricas, etc.) que corresponden a familias de Estructuras Normativas susceptibles a la detección de conflictos fuera de línea. La combinación de estas técnicas junto con nuestros mecanismos de resolución de conflictos en línea pretende dotar a los diseñadores del MAS de la capacidad de incorporar normas en sus sistemas de una manera basada en principios. 8. REFERENCIAS [1] J. L. Arcos, M. Esteva, P. Noriega, J. A. Rodr guez, y C. Sierra. Ingeniería de entornos abiertos con instituciones electrónicas. Journal on Engineering Applications of Artificial Intelligence, 18(2):191-204, 2005. [2] C. Carabelea, O. Boissier, y C. Castelfranchi. Usar el poder social para permitir a los agentes razonar sobre ser parte de un grupo. En el 5o Internat. Taller, EEAT 2004, págs. 166 a 177, 2004. [3] L. Cholvy y F. Cuppens. Solución de conflictos normativos mediante la fusión de funciones. En la Quinta Conferencia Internacional sobre Inteligencia Artificial y Derecho, Washington, Estados Unidos, 1995. [4] S. Christensen y T. B. Haagh. Diseño CPN - vista general de la sintaxis CPN ML. Informe técnico, Universidad de Aarhus, 1996. [5] R. S. Cost, Y. Chen, T. W. Finin, Y. Labrou e Y. Peng. Usando petri redes de colores para modelar la conversación. In Issues in Agent Communication, págs. 178 a 192, Londres, Reino Unido, 2000. [6] F. Dignum. Agentes autónomos con normas. Inteligencia Artificial y Ley, 7(1):69-79, 1999. [7] A. Elhag, J. Breuker y P. Brouwer. Sobre el análisis formal de los conflictos normativos. Información & Comunicaciones. Techn. Ley, 9(3):207-217, Oct. 2000. [8] M. Esteva, W. Vasconcelos, C. Sierra, y J. A. Rodr guez-Aguilar. Consistencia normativa en las instituciones electrónicas. volumen 3171 (LNAI), páginas 494-505. Springer-Verlag, 2004. [9] M. Fitting. Prueba de la lógica de primer orden y del teorema automatizado. Springer-Verlag, Nueva York, Estados Unidos, 1990. [10] N. Fornara, F. Vigan`o y M. Colombetti. Un enfoque impulsado por eventos a las normas en las instituciones artificiales. En el taller AAMAS05: Agentes, normas e instituciones para sistemas multiagente regulados (ANI@REM), Utrecht, 2005. [11] D. Gaertner, P. Noriega y C. Sierra. Ampliación de la arquitectura BDI con compromisos. En Actas del IX Congreso Internacional de la Asociación Catalana de Inteligencia Artificial, 2006. [12] A. Garc a-Camino, P. Noriega, y J.-A. Rodr guez-Aguilar. Un algoritmo para la resolución de conflictos en actividades reguladas compuestas. En el 7o taller Int.Workshop - ESAW 06, 2006. [13] A. Garc a-Camino, J.-A. Rodr guez-Aguilar, C. Sierra y W. Vasconcelos. Una arquitectura distribuida para las Sociedades de Agentes de Normas. En DALT III, volumen 3904 (LNAI), páginas 89 a 105. Springer, 2006. [14] F. Giunchiglia y L. Serafini. Lógicas jerárquicas multilenguaje o: Cómo podemos prescindir de lógicas modales. Inteligencia Artificial, 65(1):29-70, 1994. [15] J. Habermas. La Teoría de la Comunicación Acción, Volumen Uno, La Razón y la Racionalización de la Sociedad. Beacon Press, 1984. [16] K. Jensen. Redes Petri coloreadas: Conceptos básicos, métodos de análisis y usos prácticos (Volumen 1). Springer, 1997. [17] M. Kollingbaum y T. Norman. Estrategias para resolver conflictos de normas con razonamiento práctico. En el Taller de Coordinación de la CEPA en Sociedades de Agentes Emergentes 2004, 2004. [18] J.-L. Koning, G. Francois e Y. Demazeau. Formalización y prevalidación para protocolos de interacción en sistemas multiagente. En ECAI, págs. 298 a 307, 1998. [19] B. Kramer y J. Mylopoulos. Representación del conocimiento. En S. C. Shapiro, editor, Enciclopedia de Inteligencia Artificial, volumen 1, páginas 743-759. John Wiley & Sons, 1992. [20] F. Lin, D. H. Norrie, W. Shen y R. Kremer. Un enfoque basado en esquemas para especificar las políticas de conversación. En Temas de Comunicación de Agentes, págs. 193-204, 2000. [21] N. Minsky. Interacción gobernada por la ley (LGI): Un mecanismo de coordinación y control distribuido (Una introducción y un manual de referencia). Informe técnico, Universidad Rutgers, 2005. [22] T. Murata. Redes Petri: Propiedades, análisis y aplicaciones. Actas del IEEE, 77(4):541-580, 1989. [23] S. Parsons, C. Sierra y N. Jennings. Agentes que razonan y negocian discutiendo. Diario de Lógica y Computación, 8(3):261-292, 1998. [24] A. Ricci y M. Viroli. Artefactos de Coordinación: Una Abstracción Unificante para la Coordinación de Ingeniería Mediada por el Medio Ambiente en MAS. Informatica, 29:433-443, 2005. [25] G. Sartor. Conflictos normativos en el razonamiento jurídico. Inteligencia Artificial y Ley, 1(2-3):209-235, junio de 1992. [26] M. Sergot. Una teoría computacional de posiciones normativas. ACM Trans. Comput. Lógica, 2(4):581-622, 2001. [27] W. W. Vasconcelos, M. Kollingbaum, y T. Norman. Resolver conflictos e incoherencias en las organizaciones virtuales reguladas por normas. En Actas de AAMAS 07, Hawaii, EE.UU., 2007. IFAAMAS. [28] G. H. von Wright. Norma y acción: Una investigación lógica. Routledge y Kegan Paul, Londres, 1963. [29] M. Wooldridge. Una introducción a los sistemas multiagente. John Wiley & Sons, Chichester, Reino Unido, febrero de 2002. El Sexto Intl. Conjunto Conf. sobre agentes autónomos y sistemas de agentes múltiples (AAMAS 07) 643 ",
            "error": [
                ""
            ]
        }
    }
}