{
    "original_text": "Location based Indexing Scheme for DAYS Debopam Acharya and Vijay Kumar 1 Computer Science and Informatics University of Missouri-Kansas City Kansas City, MO 64110 dargc(kumarv)@umkc.edu ABSTRACT Data dissemination through wireless channels for broadcasting information to consumers is becoming quite common. Many dissemination schemes have been proposed but most of them push data to wireless channels for general consumption. Push based broadcast [1] is essentially asymmetric, i.e., the volume of data being higher from the server to the users than from the users back to the server. Push based scheme requires some indexing which indicates when the data will be broadcast and its position in the broadcast. Access latency and tuning time are the two main parameters which may be used to evaluate an indexing scheme. Two of the important indexing schemes proposed earlier were tree based and the exponential indexing schemes. None of these schemes were able to address the requirements of location dependent data (LDD) which is highly desirable feature of data dissemination. In this paper, we discuss the broadcast of LDD in our project DAta in Your Space (DAYS), and propose a scheme for indexing LDD. We argue that this scheme, when applied to LDD, significantly improves performance in terms of tuning time over the above mentioned schemes. We prove our argument with the help of simulation results. Categories and Subject Descriptors H.3.1 [Information Systems]: Information Storage and Retrieval - content analysis and indexing; H.3.3 [Information Systems]: Information Storage and Retrieval - information search and retrieval. General Terms Algorithms, Performance, Experimentation 1. INTRODUCTION Wireless data dissemination is an economical and efficient way to make desired data available to a large number of mobile or static users. The mode of data transfer is essentially asymmetric, that is, the capacity of the transfer of data (downstream communication) from the server to the client (mobile user) is significantly larger than the client or mobile user to the server (upstream communication). The effectiveness of a data dissemination system is judged by its ability to provide user the required data at anywhere and at anytime. One of the best ways to accomplish this is through the dissemination of highly personalized Location Based Services (LBS) which allows users to access personalized location dependent data. An example would be someone using their mobile device to search for a vegetarian restaurant. The LBS application would interact with other location technology components or use the mobile users input to determine the users location and download the information about the restaurants in proximity to the user by tuning into the wireless channel which is disseminating LDD. We see a limited deployment of LBS by some service providers. But there are every indications that with time some of the complex technical problems such as uniform location framework, calculating and tracking locations in all types of places, positioning in various environments, innovative location applications, etc., will be resolved and LBS will become a common facility and will help to improve market productivity and customer comfort. In our project called DAYS, we use wireless data broadcast mechanism to push LDD to users and mobile users monitor and tune the channel to find and download the required data. A simple broadcast, however, is likely to cause significant performance degradation in the energy constrained mobile devices and a common solution to this problem is the use of efficient air indexing. The indexing approach stores control information which tells the user about the data location in the broadcast and how and when he could access it. A mobile user, thus, has some free time to go into the doze mode which conserves valuable power. It also allows the user to personalize his own mobile device by selectively tuning to the information of his choice. Access efficiency and energy conservation are the two issues which are significant for data broadcast systems. Access efficiency refers to the latency experienced when a request is initiated till the response is received. Energy conservation [7, 10] refers to the efficient use of the limited energy of the mobile device in accessing broadcast data. Two parameters that affect these are the tuning time and the access latency. Tuning time refers to the time during which the mobile unit (MU) remains in active state to tune the channel and download its required data. It can also be defined as the number of buckets tuned by the mobile device in active state to get its required data. Access latency may be defined as the time elapsed since a request has been issued till the response has been received. 1 This research was supported by a grant from NSF IIS-0209170. Several indexing schemes have been proposed in the past and the prominent among them are the tree based and the exponential indexing schemes [17]. The main disadvantages of the tree based schemes are that they are based on centralized tree structures. To start a search, the MU has to wait until it reaches the root of the next broadcast tree. This significantly affects the tuning time of the mobile unit. The exponential schemes facilitate index replication by sharing links in different search trees. For broadcasts with large number of pages, the exponential scheme has been shown to perform similarly as the tree based schemes in terms of access latency. Also, the average length of broadcast increases due to the index replication and this may cause significant increase in the access latency. None of the above indexing schemes is equally effective in broadcasting location dependent data. In addition to providing low latency, they lack properties which are used to address LDD issues. We propose an indexing scheme in DAYS which takes care of some these problems. We show with simulation results that our scheme outperforms some of the earlier indexing schemes for broadcasting LDD in terms of tuning time. The rest of the paper is presented as follows. In section 2, we discuss previous work related to indexing of broadcast data. Section 3 describes our DAYS architecture. Location dependent data, its generation and subsequent broadcast is presented in section 4. Section 5 discusses our indexing scheme in detail. Simulation of our scheme and its performance evaluation is presented in section 6. Section 7 concludes the paper and mentions future related work. 2. PREVIOUS WORK Several disk-based indexing techniques have been used for air indexing. Imielinski et al. [5, 6] applied the B+ index tree, where the leaf nodes store the arrival times of the data items. The distributed indexing method was proposed to efficiently replicate and distribute the index tree in a broadcast. Specifically, the index tree is divided into a replicated part and a non replicated part. Each broadcast consists of the replicated part and the nonreplicated part that indexes the data items immediately following it. As such, each node in the non-replicated part appears only once in a broadcast and, hence, reduces the replication cost and access latency while achieving a good tuning time. Chen et al. [2] and Shivakumar et al. [8] considered unbalanced tree structures to optimize energy consumption for non-uniform data access. These structures minimize the average index search cost by reducing the number of index searches for hot data at the expense of spending more on cold data. Tan and Yu discussed data and index organization under skewed broadcast Hashing and signature methods have also been suggested for wireless broadcast that supports equality queries [9]. A flexible indexing method was proposed in [5]. The flexible index first sorts the data items in ascending (or descending) order of the search key values and then divides them into p segments. The first bucket in each data segment contains a control index, which is a binary index mapping a given key value to the segment containing that key, and a local index, which is an m-entry index mapping a given key value to the buckets within the current segment. By tuning the parameters of p and m, mobile clients can achieve either a good tuning time or good access latency. Another indexing technique proposed is the exponential indexing scheme [17]. In this scheme, a parameterized index, called the exponential index is used to optimize the access latency or the tuning time. It facilitates index replication by linking different search trees. All of the above mentioned schemes have been applied to data which are non related to each other. These non related data may be clustered or non clustered. However, none of them has specifically addressed the requirements of LDD. Location dependent data are data which are associated with a location. Presently there are several applications that deal with LDD [13, 16]. Almost all of them depict LDD with the help of hierarchical structures [3, 4]. This is based on the containment property of location dependent data. The Containment property helps determining relative position of an object by defining or identifying locations that contains those objects. The subordinate locations are hierarchically related to each other. Thus, Containment property limits the range of availability or operation of a service. We use this containment property in our indexing scheme to index LDD. 3. DAYS ARCHITECTURE DAYS has been conceptualized to disseminate topical and nontopical data to users in a local broadcast space and to accept queries from individual users globally. Topical data, for example, weather information, traffic information, stock information, etc., constantly changes over time. Non topical data such as hotel, restaurant, real estate prices, etc., do not change so often. Thus, we envision the presence of two types of data distribution: In the first case, server pushes data to local users through wireless channels. The other case deals with the server sending results of user queries through downlink wireless channels. Technically, we see the presence of two types of queues in the pull based data access. One is a heavily loaded queue containing globally uploaded queries. The other is a comparatively lightly loaded queue consisting of locally uploaded queries. The DAYS architecture [12] as shown in figure 1 consists of a Data Server, Broadcast Scheduler, DAYS Coordinator, Network of LEO satellites for global data delivery and a Local broadcast space. Data is pushed into the local broadcast space so that users may tune into the wireless channels to access the data. The local broadcast space consists of a broadcast tower, mobile units and a network of data staging machines called the surrogates. Data staging in surrogates has been earlier investigated as a successful technique [12, 15] to cache users related data. We believe that data staging can be used to drastically reduce the latency time for both the local broadcast data as well as global responses. Query request in the surrogates may subsequently be used to generate the popularity patterns which ultimately decide the broadcast schedule [12]. 18 Popularity Feedback from Surrogates for Broadcast Scheduler Local Broadcast Space Broadcast Tower SurrogateMU MU MU MU Data ServerBroadcast schedulerDAYS Coordinator Local downlink channel Global downlink channel Pull request queue Global request queue Local request queue Location based index Starbucks Plaza Kansas City Figure 1. DAYS Architecture Figure 2. Location Structure ofStarbucks, Plaza 4. LOCATION DEPENDENT DATA (LDD) We argue that incorporating location information in wireless data broadcast can significantly decrease the access latency. This property becomes highly useful for mobile unit which has limited storage and processing capability. There are a variety of applications to obtain information about traffic, restaurant and hotel booking, fast food, gas stations, post office, grocery stores, etc. If these applications are coupled with location information, then the search will be fast and highly cost effective. An important property of the locations is Containment which helps to determine the relative location of an object with respect to its parent that contains the object. Thus, Containment limits the range of availability of a data. We use this property in our indexing scheme. The database contains the broadcast contents which are converted into LDD [14] by associating them with respective locations so that it can be broadcasted in a clustered manner. The clustering of LDD helps the user to locate information efficiently and supports containment property. We present an example to justify our proposition. Example: Suppose a user issues query Starbucks Coffee in Plaza please. to access information about the Plaza branch of Starbucks Coffee in Kansas City. In the case of location independent set up the system will list all Starbucks coffee shops in Kansas City area. It is obvious that such responses will increase access latency and are not desirable. These can be managed efficiently if the server has location dependent data, i.e., a mapping between a Starbucks coffee shop data and its physical location. Also, for a query including range of locations of Starbucks, a single query requesting locations for the entire region of Kansas City, as shown in Figure 2, will suffice. This will save enormous amount of bandwidth by decreasing the number of messages and at the same time will be helpful in preventing the scalability bottleneck in highly populated area. 4.1 Mapping Function for LDD The example justifies the need for a mapping function to process location dependent queries. This will be especially important for pull based queries across the globe for which the reply could be composed for different parts of the world. The mapping function is necessary to construct the broadcast schedule. We define Global Property Set (GPS) [11], Information Content (IC) set, and Location Hierarchy (LH) set where IC ⊆ GPS and LH ⊆ GPS to develop a mapping function. LH = {l1, l2, l3…,lk} where li represent locations in the location tree and IC = {ic1, ic2, ic3,…,icn} where ici represent information type. For example, if we have traffic, weather, and stock information are in broadcast then IC = {ictraffic, icweather, and icstock}. The mapping scheme must be able to identify and select an IC member and a LH node for (a) correct association, (b) granularity match, (c) and termination condition. For example, weather ∈ IC could be associated with a country or a state or a city or a town of LH. The granularity match between the weather and a LH node is as per user requirement. Thus, with a coarse granularity weather information is associated with a country to get countrys weather and with town in a finer granularity. If a town is the finest granularity, then it defines the terminal condition for association between IC and LH for weather. This means that a user cannot get weather information about subdivision of a town. In reality weather of a subdivision does not make any sense. We develop a simple heuristic mapping approach scheme based on user requirement. Let IC = {m1, m2,m3 .,..., mk}, where mi represent its element and let LH = {n1, n2, n3, ..., nl}, where ni represents LHs member. We define GPS for IC (GPSIC) ⊆ GPS and for LH (GPSLH) ⊆ GPS as GPSIC = {P1, P2,…, Pn}, where P1, P2, P3,…, Pn are properties of its members and GPSLH = {Q1, Q2,…, Qm} where Q1, Q2,…, Qm are properties of its members. The properties of a particular member of IC are a subset of GPSIC. It is generally true that (property set (mi∈ IC) ∪ property set (mj∈ IC)) ≠ ∅, however, there may be cases where the intersection is not null. For example, stock ∈ IC and movie ∈ IC rating do not have any property in common. We assume that any two or more members of IC have at least one common geographical property (i.e. location) because DAYS broadcasts information about those categories, which are closely tied with a location. For example, stock of a company is related to a country, weather is related to a city or state, etc. We define the property subset of mi∈ IC as PSm i ∀ mi ∈ IC and PSm i = {P1, P2, ..., Pr} where r ≤ n. ∀ Pr {Pr ∈ PSm i → Pr∈ GPSIC} which implies that ∀ i, PSm i ⊆ GPSIC. The geographical properties of this set are indicative of whether mi ∈ IC can be mapped to only a single granularity level (i.e. a single location) in LH or a multiple granularity levels (i.e. more than one nodes in 19 the hierarchy) in LH. How many and which granularity levels should a mi map to, depends upon the level at which the service provider wants to provide information about the mi in question. Similarly we define a property subset of LH members as PSn j ∀ nj ∈ LH which can be written as PSn j ={Q1, Q2, Q3, …, Qs} where s ≤ m. In addition, ∀ Qs {Qs∈ PSn j → Qs∈ GPSLH} which implies that ∀j, PSn j ⊆ GPSLH. The process of mapping from IC to LH is then identifying for some mx∈ IC one or more ny∈ LH such that PSmx ∩ PSnv ≠ φ. This means that when mx maps to ny and all children of ny if mx can map to multiple granularity levels or mx maps only to ny if mx can map to a single granularity level. We assume that new members can join and old member can leave IC or LH any time. The deletion of members from the IC space is simple but addition of members to the IC space is more restrictive. If we want to add a new member to the IC space, then we first define a property set for the new member: PSmnew_m ={P1, P2, P3, …, Pt} and add it to the IC only if the condition:∀ Pw {Pw∈ PSpnew_m → Pw∈ GPSIC} is satisfied. This scheme has an additional benefit of allowing the information service providers to have a control over what kind of information they wish to provide to the users. We present the following example to illustrate the mapping concept. IC = {Traffic, Stock, Restaurant, Weather, Important history dates, Road conditions} LH = {Country, State, City, Zip-code, Major-roads} GPSIC = {Surface-mobility, Roads, High, Low, Italian-food, StateName, Temp, CityName, Seat-availability, Zip, Traffic-jams, Stock-price, CountryName, MajorRoadName, Wars, Discoveries, World} GPSLH = {Country, CountrySize, StateName, CityName, Zip, MajorRoadName} Ps(ICStock) = {Stock-price, CountryName, High, Low} Ps(ICTraffic) = {Surface-mobility, Roads, High, Low, Traffic-jams, CityName} Ps(ICImportant dates in history) = {World, Wars, Discoveries} Ps(ICRoad conditions) = {Precipitation, StateName, CityName} Ps(ICRestaurant) = {Italian-food, Zip code} Ps(ICWeather) = {StateName, CityName, Precipitation, Temperature} PS(LHCountry) = {CountryName, CountrySize} PS(LHState = {StateName, State size}, PS(LHCity) ={CityName, City size} PS(LHZipcode) = {ZipCodeNum } PS(LHMajor roads) = {MajorRoadName} Now, only PS(ICStock) ∩ PSCountry ≠φ. In addition, PS(ICStock) indicated that Stock can map to only a single location Country. When we consider the member Traffic of IC space, only PS(ICTraffic) ∩ PScity ≠ φ. As PS(ICTraffic) indicates that Traffic can map to only a single location, it maps only to City and none of its children. Now unlike Stock, mapping of Traffic with Major roads, which is a child of City, is meaningful. However service providers have right to control the granularity levels at which they want to provide information about a member of IC space. PS(ICRoad conditions) ∩ PSState ≠φ and PS(ICRoad conditions) ∩ PSCity≠φ. So Road conditions maps to State as well as City. As PS(ICRoad conditions) indicates that Road conditions can map to multiple granularity levels, Road conditions will also map to Zip Code and Major roads, which are the children of State and City. Similarly, Restaurant maps only to Zip code, and Weather maps to State, City and their children, Major Roads and Zip Code. 5. LOCATION BASED INDEXING SCHEME This section discusses our location based indexing scheme (LBIS). The scheme is designed to conform to the LDD broadcast in our project DAYS. As discussed earlier, we use the containment property of LDD in the indexing scheme. This significantly limits the search of our required data to a particular portion of broadcast. Thus, we argue that the scheme provides bounded tuning time. We describe the architecture of our indexing scheme. Our scheme contains separate data buckets and index buckets. The index buckets are of two types. The first type is called the Major index. The Major index provides information about the types of data broadcasted. For example, if we intend to broadcast information like Entertainment, Weather, Traffic etc., then the major index points to either these major types of information and/or their main subtypes of information, the number of main subtypes varying from one information to another. This strictly limits number of accesses to a Major index. The Major index never points to the original data. It points to the sub indexes called the Minor index. The minor indexes are the indexes which actually points to the original data. We called these minor index pointers as Location Pointers as they points to the data which are associated with a location. Thus, our search for a data includes accessing of a major index and some minor indexes, the number of minor index varying depending on the type of information. Thus, our indexing scheme takes into account the hierarchical nature of the LDD, the Containment property, and requires our broadcast schedule to be clustered based on data type and location. The structure of the location hierarchy requires the use of different types of index at different levels. The structure and positions of index strictly depend on the location hierarchy as described in our mapping scheme earlier. We illustrate the implementation of our scheme with an example. The rules for framing the index are mentioned subsequently. 20 A1 Entertainment Resturant Movie A2 A3 A4 R1 R2 R3 R4 R5 R6 R7 R8 Weather KC SL JC SF Entertainment R1 R2 R3 R4 R5 R6 R7 R8 KC SL JC SF (A, R, NEXT = 8) 3, R5 4, R7 Type (S, L) ER W E EM (1, 4) (5, 4) (1, 4), (9, 4) (9, 4) Type (S, L) W E EM ER (1, 4) (5, 8) (5, 4) (9, 4) Type (S, L) E EM ER W (1, 8) (1, 4) (5, 4) (9, 4) A1 A2 A3 A4 Movie Resturant Weather 1 2 3 4 5 6 7 8 9 10 11 12 Major index Major index Major index Minor index Major index Minor index Figure 3. Location Mapped Information for Broadcast Figure 4. Data coupled with Location based Index Example: Let us suppose that our broadcast content contains ICentertainment and ICweather which is represented as shown in Fig. 3. Ai represents Areas of City and Ri represents roads in a certain area. The leaves of Weather structure represent four cities. The index structure is given in Fig. 4 which shows the position of major and minor index and data in the broadcast schedule. We propose the following rules for the creation of the air indexed broadcast schedule: • The major index and the minor index are created. • The major index contains the position and range of different types of data items (Weather and Entertainment, Figure 3) and their categories. The sub categories of Entertainment, Movie and Restaurant, are also in the index. Thus, the major index contains Entertainment (E), Entertainment-Movie (EM), Entertainment-Restaurant (ER), and Weather (W). The tuple (S, L) represents the starting position (S) of the data item and L represents the range of the item in terms of number of data buckets. • The minor index contains the variables A, R and a pointer Next. In our example (Figure 3), road R represents the first node of area A. The minor index is used to point to actual data buckets present at the lowest levels of the hierarchy. In contrast, the major index points to a broader range of locations and so it contains information about main and sub categories of data. • Index information is not incorporated in the data buckets. Index buckets are separate containing only the control information. • The number of major index buckets m=#(IC), IC = {ic1, ic2, ic3,…,icn} where ici represent information type and # represents the cardinality of the Information Content set IC. In this example, IC= {icMovie, icWeather, icRestaurant} and so #(IC) =3. Hence, the number of major index buckets is 3. • Mechanism to resolve the query is present in the java based coordinator in MU. For example, if a query Q is presented as Q (Entertainment, Movie, Road_1), then the resultant search will be for the EM information in the major index. We say, Q EM. Our proposed index works as follows: Let us suppose that an MU issues a query which is represented by Java Coordinator present in the MU as Restaurant information on Road 7. This is resolved by the coordinator as Q ER. This means one has to search for ER unit of index in the major index. Let us suppose that the MU logs into the channel at R2. The first index it receives is a minor index after R2. In this index, value of Next variable = 4, which means that the next major index is present after bucket 4. The MU may go into doze mode. It becomes active after bucket 4 and receives the major index. It searches for ER information which is the first entry in this index. It is now certain that the MU will get the position of the data bucket in the adjoining minor index. The second unit in the minor index depicts the position of the required data R7. It tells that the data bucket is the first bucket in Area 4. The MU goes into doze mode again and becomes active after bucket 6. It gets the required data in the next bucket. We present the algorithm for searching the location based Index. Algorithm 1 Location based Index Search in DAYS 1. Scan broadcast for the next index bucket, found=false 2. While (not found) do 3. if bucket is Major Index then 4. Find the Type & Tuple (S, L) 5. if S is greater than 1, go into doze mode for S seconds 6. end if 7. Wake up at the Sth bucket and observe the Minor Index 8. end if 9. if bucket is Minor Index then 10. if TypeRequested not equal to Typefound and (A,R)Request not equal to (A,R)found then 11. Go into doze mode till NEXT & repeat from step 3 12. end if 13. else find entry in Minor Index which points to data 14. Compute time of arrival T of data bucket 15. Go into doze mode till T 16. Wake up at T and access data, found = true 17. end else 18. end if 19. end While 21 6. PERFORMANCE EVALUATION Conservation of energy is the main concern when we try to access data from wireless broadcast. An efficient scheme should allow the mobile device to access its required data by staying active for a minimum amount of time. This would save considerable amount of energy. Since items are distributed based on types and are mapped to suitable locations, we argue that our broadcast deals with clustered data types. The mobile unit has to access a larger major index and a relatively much smaller minor index to get information about the time of arrival of data. This is in contrast to the exponential scheme where the indexes are of equal sizes. The example discussed and Algorithm 1 reveals that to access any data, we need to access the major index only once followed by one or more accesses to the minor index. The number of minor index access depends on the number of internal locations. As the number of internal locations vary for item to item (for example, Weather is generally associated with a City whereas traffic is granulated up to major and minor roads of a city), we argue that the structure of the location mapped information may be visualized as a forest which is a collection of general trees, the number of general trees depending on the types of information broadcasted and depth of a tree depending on the granularity of the location information associated with the information. For our experiments, we assume the forest as a collection of balanced M-ary trees. We further assume the M-ary trees to be full by assuming the presence of dummy nodes in different levels of a tree. Thus, if the number of data items is d and the height of the tree is m, then n= (m*d-1)/(m-1) where n is the number of vertices in the tree and i= (d-1)/(m-1) where i is the number of internal vertices. Tuning time for a data item involves 1 unit of time required to access the major index plus time required to access the data items present in the leaves of the tree. Thus, tuning time with d data items is t = logmd+1 We can say that tuning time is bounded by O(logmd). We compare our scheme with the distributed indexing and exponential scheme. We assume a flat broadcast and number of pages varying from 5000 to 25000. The various simulation parameters are shown in Table 1. Figure 5-8 shows the relative tuning times of three indexing algorithms, ie, the LBIS, exponential scheme and the distributed tree scheme. Figure 5 shows the result for number of internal location nodes = 3. We can see that LBIS significantly outperforms both the other schemes. The tuning time in LBIS ranges from approx 6.8 to 8. This large tuning time is due to the fact that after reaching the lowest minor index, the MU may have to access few buckets sequentially to get the required data bucket. We can see that the tuning time tends to become stable as the length of broadcast increases. In figure 6 we consider m= 4. Here we can see that the exponential and the distributed perform almost similarly, though the former seems to perform slightly better as the broadcast length increases. A very interesting pattern is visible in figure 7. For smaller broadcast size, the LBIS seems to have larger tuning time than the other two schemes. But as the length of broadcast increases, it is clearly visible the LBIS outperforms the other two schemes. The Distributed tree indexing shows similar behavior like the LBIS. The tuning time in LBIS remains low because the algorithm allows the MU to skip some intermediate Minor Indexes. This allows the MU to move into lower levels directly after coming into active mode, thus saving valuable energy. This action is not possible in the distributed tree indexing and hence we can observe that its tuning time is more than the LBIS scheme, although it performs better than the exponential scheme. Figure 8, in contrast, shows us that the tuning time in LBIS, though less than the other two schemes, tends to increase sharply as the broadcast length becomes greater than the 15000 pages. This may be attributed both due to increase in time required to scan the intermediate Minor Indexes and the length of the broadcast. But we can observe that the slope of the LBIS curve is significantly less than the other two curves. Table 1 Simulation Parameters P Definition Values N Number of data Items 5000 - 25000 m Number of internal location nodes 3, 4, 5, 6 B Capacity of bucket without index (for exponential index) 10,64,128,256 i Index base for exponential index 2,4,6,8 k Index size for distributed tree 8 bytes The simulation results establish some facts about our location based indexing scheme. The scheme performs better than the other two schemes in terms of tuning time in most of the cases. As the length of the broadcast increases, after a certain point, though the tuning time increases as a result of factors which we have described before, the scheme always performs better than the other two schemes. Due to the prescribed limit of the number of pages in the paper, we are unable to show more results. But these omitted results show similar trend as the results depicted in figure 5-8. 7. CONCLUSION AND FUTURE WORK In this paper we have presented a scheme for mapping of wireless broadcast data with their locations. We have presented an example to show how the hierarchical structure of the location tree maps with the data to create LDD. We have presented a scheme called LBIS to index this LDD. We have used the containment property of LDD in the scheme that limits the search to a narrow range of data in the broadcast, thus saving valuable energy in the device. The mapping of data with locations and the indexing scheme will be used in our DAYS project to create the push based architecture. The LBIS has been compared with two other prominent indexing schemes, i.e., the distributed tree indexing scheme and the exponential indexing scheme. We showed in our simulations that the LBIS scheme has the lowest tuning time for broadcasts having large number of pages, thus saving valuable battery power in the MU. 22 In the future work we try to incorporate pull based architecture in our DAYS project. Data from the server is available for access by the global users. This may be done by putting a request to the source server. The query in this case is a global query. It is transferred from the users source server to the destination server through the use of LEO satellites. We intend to use our LDD scheme and data staging architecture in the pull based architecture. We will show that the LDD scheme together with the data staging architecture significantly improves the latency for global as well as local query. 8. REFERENCES [1] Acharya, S., Alonso, R. Franklin, M and Zdonik S. Broadcast disk: Data management for asymmetric communications environments. In Proceedings of ACM SIGMOD Conference on Management of Data, pages 199-210, San Jose, CA, May 1995. [2] Chen, M.S.,Wu, K.L. and Yu, P. S. Optimizing index allocation for sequential data broadcasting in wireless mobile computing. IEEE Transactions on Knowledge and Data Engineering (TKDE), 15(1):161-173, January/February 2003. Figure 5. Broadcast Size (# buckets) Dist tree Expo LBIS Figure 6. Broadcast Size (# buckets) Dist tree Expo LBIS Figure 7. Broadcast Size (# buckets) Dist tree Expo LBIS Figure 8. Broadcast Size (# buckets) Dist tree Expo LBIS Averagetuningtime Averagetuningtime Averagetuningtime Averagetuningtime 23 [3] Hu, Q. L., Lee, D. L. and Lee, W.C. Performance evaluation of a wireless hierarchical data dissemination system. In Proceedings of the 5th Annual ACM International Conference on Mobile Computing and Networking (MobiCom99), pages 163-173, Seattle, WA, August 1999. [4] Hu, Q. L. Lee, W.C. and Lee, D. L. Power conservative multi-attribute queries on data broadcast. In Proceedings of the 16th International Conference on Data Engineering (ICDE00), pages 157-166, San Diego, CA, February 2000. [5] Imielinski, T., Viswanathan, S. and Badrinath. B. R. Power efficient filtering of data on air. In Proceedings of the 4th International Conference on Extending Database Technology (EDBT94), pages 245-258, Cambridge, UK, March 1994. [6] Imielinski, T., Viswanathan, S. and Badrinath. B. R. Data on air - Organization and access. IEEE Transactions on Knowledge and Data Engineering (TKDE), 9(3):353-372, May/June 1997. [7] Shih, E., Bahl, P. and Sinclair, M. J. Wake on wireless: An event driven energy saving strategy for battery operated devices. In Proceedings of the 8th Annual ACM International Conference on Mobile Computing and Networking (MobiCom02), pages 160-171, Atlanta, GA, September 2002. [8] Shivakumar N. and Venkatasubramanian, S. Energy-efficient indexing for information dissemination in wireless systems. ACM/Baltzer Journal of Mobile Networks and Applications (MONET), 1(4):433-446, December 1996. [9] Tan K. L. and Yu, J. X. Energy efficient filtering of non uniform broadcast. In Proceedings of the 16th International Conference on Distributed Computing Systems (ICDCS96), pages 520-527, Hong Kong, May 1996. [10] Viredaz, M. A., Brakmo, L. S. and Hamburgen, W. R. Energy management on handheld devices. ACM Queue, 1(7):44-52, October 2003. [11] Garg, N. Kumar, V., & Dunham, M.H. Information Mapping and Indexing in DAYS, 6th International Workshop on Mobility in Databases and Distributed Systems, in conjunction with the 14th International Conference on Database and Expert Systems Applications September 1-5, Prague, Czech Republic, 2003. [12] Acharya D., Kumar, V., & Dunham, M.H. InfoSpace: Hybrid and Adaptive Public Data Dissemination System for Ubiquitous Computing. Accepted for publication in the special issue of Pervasive Computing. Wiley Journal for Wireless Communications and Mobile Computing, 2004. [13] Acharya D., Kumar, V., & Prabhu, N. Discovering and using Web Services in M-Commerce, Proceedings for 5th VLDB Workshop on Technologies for E-Services, Toronto, Canada,2004. [14] Acharya D., Kumar, V. Indexing Location Dependent Data in broadcast environment. Accepted for publication, JDIM special issue on Distributed Data Management, 2005. [15] Flinn, J., Sinnamohideen, S., & Satyanarayan, M. Data Staging on Untrusted Surrogates, Intel Research, Pittsburg, Unpublished Report, 2003. [16] Seydim, A.Y., Dunham, M.H. & Kumar, V. Location dependent query processing, Proceedings of the 2nd ACM international workshop on Data engineering for wireless and mobile access, p.47-53, Santa Barbara, California, USA, 2001. [17] Xu, J., Lee, W.C., Tang., X. Exponential Index: A Parameterized Distributed Indexing Scheme for Data on Air. In Proceedings of the 2nd ACM/USENIX International Conference on Mobile Systems, Applications, and Services (MobiSys04), Boston, MA, June 2004. 24",
    "original_translation": "Esquema de Indización basado en la ubicación para DAYS Debopam Acharya y Vijay Kumar 1 Computer Science and Informatics University of Missouri-Kansas City Kansas City, MO 64110 dargc(kumarv)@umkc.edu RESUMEN La difusión de datos a través de canales inalámbricos para transmitir información a los consumidores se está volviendo bastante común. Se han propuesto muchos planes de difusión, pero la mayoría de ellos llevan los datos a canales inalámbricos para consumo general. La difusión basada en push [1] es esencialmente asimétrica, es decir, el volumen de datos es mayor desde el servidor a los usuarios que desde los usuarios de vuelta al servidor. El esquema basado en el empuje requiere una indexación que indica cuándo se transmitirán los datos y su posición en la emisión. Latencia de acceso y tiempo de afinación son los dos parámetros principales que pueden utilizarse para evaluar un esquema de indexación. Dos de los importantes esquemas de indexación propuestos anteriormente se basaban en los árboles y los esquemas de indexación exponencial. Ninguno de estos planes pudo satisfacer los requisitos de los datos dependientes de la ubicación (DDL), que es una característica muy deseable de la difusión de datos. En este artículo, discutimos la emisión de LDD en nuestro proyecto DAta in Your Space (DAYS), y proponemos un esquema para la indexación de LDD. Argumentamos que este sistema, cuando se aplica a la DDTS, mejora significativamente el rendimiento en términos de tiempo de afinación en los esquemas antes mencionados. Demostramos nuestro argumento con la ayuda de resultados de simulación. Categorías y Descriptores sujetos H.3.1 [Sistemas de información]: Almacenamiento y recuperación de información - análisis e indexación de contenido; H.3.3 [Sistemas de información]: Almacenamiento y recuperación de información - búsqueda y recuperación de información. Términos generales Algoritmos, Rendimiento, Experimentación 1. INTRODUCCIÓN La difusión inalámbrica de datos es una forma económica y eficiente de poner los datos deseados a disposición de un gran número de usuarios móviles o estáticos. El modo de transferencia de datos es esencialmente asimétrico, es decir, la capacidad de transferencia de datos (comunicación descendente) del servidor al cliente (usuario móvil) es significativamente mayor que el cliente o usuario móvil al servidor (comunicación ascendente). La eficacia de un sistema de difusión de datos se determina por su capacidad para proporcionar a los usuarios los datos requeridos en cualquier lugar y en cualquier momento. Una de las mejores maneras de lograr esto es a través de la difusión de servicios basados en la ubicación altamente personalizados (LBS) que permite a los usuarios acceder a datos dependientes de la ubicación personalizada. Un ejemplo sería alguien usando su dispositivo móvil para buscar un restaurante vegetariano. La aplicación LBS interactuaría con otros componentes de tecnología de localización o utilizaría la entrada de usuarios móviles para determinar la ubicación de los usuarios y descargar la información sobre los restaurantes cercanos al usuario sintonizando el canal inalámbrico que está difundiendo LDD. Vemos un despliegue limitado de LBS por parte de algunos proveedores de servicios. Pero hay todos los indicios de que con el tiempo se resolverán algunos de los complejos problemas técnicos, como el marco de localización uniforme, el cálculo y el seguimiento de ubicaciones en todo tipo de lugares, el posicionamiento en diversos entornos, aplicaciones de localización innovadoras, etc., y LBS se convertirá en una instalación común y ayudará a mejorar la productividad del mercado y el confort del cliente. En nuestro proyecto llamado DAYS, utilizamos el mecanismo de difusión de datos inalámbricos para impulsar LDD a los usuarios y usuarios móviles monitorear y sintonizar el canal para encontrar y descargar los datos requeridos. Sin embargo, es probable que una emisión simple cause una degradación significativa del rendimiento de los dispositivos móviles con limitaciones energéticas, y una solución común a este problema es el uso de una indexación eficiente del aire. El enfoque de indexación almacena información de control que informa al usuario sobre la ubicación de los datos en la emisión y cómo y cuándo pudo acceder a ella. Un usuario móvil, por lo tanto, tiene un poco de tiempo libre para entrar en el modo de somnífero que conserva valiosa energía. También permite al usuario personalizar su propio dispositivo móvil afinando selectivamente la información de su elección. La eficiencia del acceso y la conservación de la energía son las dos cuestiones importantes para los sistemas de radiodifusión de datos. La eficiencia de acceso se refiere a la latencia experimentada cuando se inicia una solicitud hasta que se recibe la respuesta. Conservación de la energía [7, 10] se refiere al uso eficiente de la energía limitada del dispositivo móvil para acceder a los datos de radiodifusión. Dos parámetros que afectan a estos son el tiempo de afinación y la latencia de acceso. El tiempo de sintonización se refiere al tiempo durante el cual la unidad móvil (MU) permanece en estado activo para sintonizar el canal y descargar los datos requeridos. También se puede definir como el número de cubos sintonizados por el dispositivo móvil en estado activo para obtener los datos requeridos. La latencia de acceso puede definirse como el tiempo transcurrido desde que se ha emitido una solicitud hasta que se ha recibido la respuesta. 1 Esta investigación fue apoyada por una subvención de NSF IIS-0209170. En el pasado se han propuesto varios esquemas de indexación, entre los que destacan los basados en árboles y los esquemas de indexación exponencial [17]. Las principales desventajas de los esquemas basados en árboles son que se basan en estructuras arbóreas centralizadas. Para iniciar una búsqueda, la MU tiene que esperar hasta que llegue a la raíz del siguiente árbol de transmisión. Esto afecta significativamente el tiempo de afinación de la unidad móvil. Los esquemas exponenciales facilitan la replicación de índices compartiendo enlaces en diferentes árboles de búsqueda. Para las emisiones con un gran número de páginas, se ha demostrado que el esquema exponencial funciona de manera similar a los esquemas basados en árboles en términos de latencia de acceso. Además, la duración media de la emisión aumenta debido a la replicación del índice y esto puede causar un aumento significativo de la latencia del acceso. Ninguno de los sistemas de indexación mencionados es igualmente eficaz en la difusión de datos dependientes de la ubicación. Además de proporcionar baja latencia, carecen de propiedades que se utilizan para abordar los problemas de DDT. Proponemos un esquema de indexación en DAYS que se ocupa de algunos de estos problemas. Demostramos con resultados de simulación que nuestro esquema supera a algunos de los esquemas de indexación anteriores para la difusión de LDD en términos de tiempo de afinación. El resto del documento se presenta de la siguiente manera. En la sección 2, se analiza el trabajo anterior relacionado con la indexación de los datos de radiodifusión. La sección 3 describe nuestra arquitectura DAYS. Los datos dependientes de la ubicación, su generación y su posterior difusión se presentan en la sección 4. La sección 5 discute nuestro esquema de indexación en detalle. La simulación de nuestro esquema y su evaluación del desempeño se presenta en la sección 6. En la sección 7 se concluye el documento y se menciona la labor futura relacionada. 2. TRABAJO ANTERIOR Varias técnicas de indexación basadas en discos se han utilizado para la indexación de aire. Imielinski et al. [5, 6] aplicó el árbol del índice B+, donde los nodos de la hoja almacenan los tiempos de llegada de los ítems de datos. Se propuso el método de indexación distribuida para reproducir y distribuir eficientemente el árbol de índices en una emisión. Específicamente, el árbol índice se divide en una parte replicada y una parte no replicada. Cada emisión consiste en la parte replicada y la parte no replicada que indiza los elementos de datos inmediatamente después de ella. Como tal, cada nodo en la parte no replicada aparece sólo una vez en una emisión y, por lo tanto, reduce el costo de replicación y latencia de acceso, al tiempo que logra un buen tiempo de afinación. Chen et al. [2] y Shivakumar et al. [8] considera estructuras de árboles desequilibradas para optimizar el consumo de energía para el acceso a datos no uniformes. Estas estructuras minimizan el costo medio de búsqueda de índices reduciendo el número de búsquedas de datos en caliente a expensas de gastar más en datos en frío. Tan y Yu discutieron la organización de datos e índices bajo la emisión sesgada También se han sugerido métodos de Hashing y firma para la transmisión inalámbrica que admite consultas de igualdad [9]. En [5] se propuso un método flexible de indización. El índice flexible primero clasifica los elementos de datos en orden ascendente (o descendente) de los valores clave de búsqueda y luego los divide en segmentos p. El primer cubo en cada segmento de datos contiene un índice de control, que es un índice binario que asigna un valor clave dado al segmento que contiene esa clave, y un índice local, que es un índice de entrada m que asigna un valor clave dado a los cubos dentro del segmento actual. Al afinar los parámetros de p y m, los clientes móviles pueden lograr un buen tiempo de afinación o una buena latencia de acceso. Otra técnica de indexación propuesta es el esquema de indexación exponencial [17]. En este esquema, se utiliza un índice parametrizado, llamado índice exponencial, para optimizar la latencia del acceso o el tiempo de afinación. Facilita la replicación de índices mediante la vinculación de diferentes árboles de búsqueda. Todos los regímenes mencionados se han aplicado a datos que no están relacionados entre sí. Estos datos no relacionados pueden agruparse o no agruparse. Sin embargo, ninguno de ellos se ha ocupado específicamente de los requisitos de la DDT. Los datos dependientes de la ubicación son datos que están asociados con una ubicación. En la actualidad hay varias aplicaciones que se ocupan de la DDTS [13, 16]. Casi todos ellos representan LDD con la ayuda de estructuras jerárquicas [3, 4]. Esto se basa en la propiedad de contención de datos dependientes de la ubicación. La propiedad Containment ayuda a determinar la posición relativa de un objeto definiendo o identificando ubicaciones que contienen esos objetos. Las ubicaciones subordinadas están jerárquicamente relacionadas entre sí. Así, la propiedad Containment limita la gama de disponibilidad u operación de un servicio. Usamos esta propiedad de contención en nuestro esquema de indexación para indexar LDD. 3. DAYS ARCHITECTURE DAYS se ha conceptualizado para difundir datos tópicos y no tópicos a los usuarios en un espacio de difusión local y para aceptar consultas de usuarios individuales a nivel mundial. Los datos tópicos, por ejemplo, información meteorológica, información de tráfico, información de existencias, etc., cambian constantemente con el tiempo. Los datos no tópicos como hotel, restaurante, precios inmobiliarios, etc., no cambian tan a menudo. Así, imaginamos la presencia de dos tipos de distribución de datos: En el primer caso, el servidor empuja los datos a los usuarios locales a través de canales inalámbricos. El otro caso se refiere al servidor que envía los resultados de las consultas de los usuarios a través de canales inalámbricos de enlace descendente. Técnicamente, vemos la presencia de dos tipos de colas en el acceso basado en datos. Una es una cola muy cargada que contiene consultas cargadas globalmente. La otra es una cola relativamente ligera que consiste en consultas subidas localmente. La arquitectura DAYS [12], como se muestra en la figura 1, consiste en un servidor de datos, programador de transmisiones, coordinador de DAYS, red de satélites LEO para la entrega de datos a nivel mundial y un espacio de transmisión local. Los datos se introducen en el espacio de transmisión local para que los usuarios puedan sintonizarse con los canales inalámbricos para acceder a los datos. El espacio de transmisión local consiste en una torre de transmisión, unidades móviles y una red de máquinas de puesta en escena de datos llamadas subrogados. La estadificación de datos en sustitutos se ha investigado anteriormente como una técnica exitosa [12, 15] para los datos relacionados con los usuarios de caché. Creemos que la estadificación de datos se puede utilizar para reducir drásticamente el tiempo de latencia tanto para los datos de radiodifusión local como para las respuestas globales. La solicitud de consulta en los sustitutos puede utilizarse posteriormente para generar los patrones de popularidad que finalmente deciden el horario de emisión [12]. 18 Popularidad Comentarios de Surrogates for Broadcast Scheduler Local Space Broadcast Tower SurrogateMU MU MU Servidor de datosHorario de radiodifusiónDÍAS Coordinador Canal local de enlace descendente Canal global de enlace descendente Pull request cola cola Solicitud global cola Solicitud local cola Ubicación índice basado en Starbucks Plaza Kansas City Figura 1. Arquitectura DAYS Figura 2. Ubicación Estructura deStarbucks, Plaza 4. DATOS DEPENDIENTES DE LOCALIZACIÓN (LDD) Argumentamos que la incorporación de información de ubicación en la transmisión inalámbrica de datos puede disminuir significativamente la latencia de acceso. Esta propiedad se convierte en muy útil para la unidad móvil que tiene capacidad de almacenamiento y procesamiento limitada. Hay una variedad de aplicaciones para obtener información sobre tráfico, reservas de restaurantes y hoteles, comida rápida, gasolineras, oficina de correos, tiendas de comestibles, etc. Si estas aplicaciones se combinan con información de ubicación, entonces la búsqueda será rápida y altamente rentable. Una propiedad importante de las ubicaciones es Containment que ayuda a determinar la ubicación relativa de un objeto con respecto a su padre que contiene el objeto. Por lo tanto, Containment limita el rango de disponibilidad de un dato. Usamos esta propiedad en nuestro esquema de indexación. La base de datos contiene los contenidos transmitidos que se convierten en LDD [14] asociándolos con las ubicaciones respectivas para que puedan transmitirse de manera agrupada. El agrupamiento de LDD ayuda al usuario a localizar la información de manera eficiente y soporta la propiedad de contención. Presentamos un ejemplo para justificar nuestra propuesta. Ejemplo: Supongamos que un usuario emite una consulta Starbucks Coffee en Plaza por favor. para acceder a información sobre la sucursal Plaza de Starbucks Coffee en Kansas City. En el caso de la ubicación independiente establecido el sistema enumerará todas las cafeterías Starbucks en el área de Kansas City. Es evidente que esas respuestas aumentarán la latencia del acceso y no son deseables. Estos se pueden administrar de manera eficiente si el servidor tiene datos dependientes de la ubicación, es decir, una asignación entre los datos de una cafetería de Starbucks y su ubicación física. Además, para una consulta que incluya el rango de ubicaciones de Starbucks, bastará con una sola consulta solicitando ubicaciones para toda la región de Kansas City, como se muestra en la Figura 2. Esto ahorrará una enorme cantidad de ancho de banda al disminuir el número de mensajes y, al mismo tiempo, será útil para prevenir el cuello de botella de escalabilidad en una zona muy poblada. 4.1 Función de asignación para LDD El ejemplo justifica la necesidad de una función de asignación para procesar consultas dependientes de la ubicación. Esto será especialmente importante para las consultas basadas en la atracción en todo el mundo para las cuales la respuesta podría estar compuesta para diferentes partes del mundo. La función de mapeo es necesaria para construir el horario de emisión. Definimos Global Property Set (GPS) [11], Information Content (IC) set, and Location Jerarchy (LH) set where IC  GPS and LH  GPS to develop a mapping function. LH = {l1, l2, l3...,lk} donde li representan ubicaciones en el árbol de ubicación y IC = {ic1, ic2, ic3,...,icn} donde ici representan tipo de información. Por ejemplo, si tenemos tráfico, tiempo, y la información de stock están en transmisión entonces IC = {ictráfico, icweather, e icstock}. El esquema de asignación debe ser capaz de identificar y seleccionar un miembro IC y un nodo LH para (a) asociación correcta, (b) coincidencia de granularidad, (c) y condición de terminación. Por ejemplo, el clima • IC podría estar asociado con un país o un estado o una ciudad o un pueblo de LH. La coincidencia de granularidad entre el tiempo y un nodo LH es según el requisito del usuario. Así, con una granularidad gruesa la información meteorológica se asocia con un país para obtener el clima de los países y con la ciudad en una granularidad más fina. Si una ciudad es la mejor granularidad, entonces define la condición terminal para la asociación entre IC y LH para el tiempo. Esto significa que un usuario no puede obtener información meteorológica sobre la subdivisión de una ciudad. En realidad, el clima de una subdivisión no tiene ningún sentido. Desarrollamos un simple esquema de mapeo heurístico basado en las necesidades del usuario. Dejar IC = {m1, m2,m3.,..., mk}, donde mi representa su elemento y dejar LH = {n1, n2, n3,..., nl}, donde ni representa miembro LHs. Definimos GPS para IC (GPSIC)  GPS y para LH (GPSLH)  GPS como GPSIC = {P1, P2,..., Pn}, donde P1, P2, P3,..., Pn son propiedades de sus miembros y GPSLH = {Q1, Q2,..., Qm} donde Q1, Q2,..., Qm son propiedades de sus miembros. Las propiedades de un miembro particular de IC son un subconjunto de GPSIC. Generalmente es cierto que (conjunto de propiedades (miÃ3n IC) â € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € Por ejemplo, stock • IC y película • IC calificación no tienen ninguna propiedad en común. Asumimos que dos o más miembros del CI tienen al menos una propiedad geográfica común (es decir, lugar) porque DAYS transmite información sobre esas categorías, que están estrechamente vinculadas con un lugar. Por ejemplo, las acciones de una empresa están relacionadas con un país, el clima está relacionado con una ciudad o estado, etc. Definimos el subconjunto de propiedades de mio IC como PSm i ♥ mi • IC y PSm i = {P1, P2,..., Pr} donde r ≤ n. • Pr {Pr • PSm i → Pr • GPSIC} que implica que • i, PSm i  GPSIC. Las propiedades geográficas de este conjunto son indicativas de si mi IC puede ser mapeado a un solo nivel de granularidad (es decir. una sola ubicación) en LH o varios niveles de granularidad (es decir, más de un nodo en 19 de la jerarquía) en LH. ¿Cuántos y qué niveles de granularidad debe un mapa mi, depende del nivel en el que el proveedor de servicios quiere proporcionar información sobre el mi en cuestión. Del mismo modo, definimos un subconjunto de propiedades de los miembros de LH como PSn j Ł nj Ł LH que puede ser escrito como PSn j ={Q1, Q2, Q3,..., Qs} donde s ≤ m. Además, El proceso de mapeo de IC a LH es entonces identificar para algunos mxÃ3 IC uno o mÃ¡s nyÃ3 LH tal que PSmx Ã3 PSnv Esto significa que cuando mx mapea a ny y a todos los niños de ny si mx puede mapear a múltiples niveles de granularidad o mx mapea sólo a ny si mx puede mapear a un solo nivel de granularidad. Asumimos que los nuevos miembros pueden unirse y los antiguos miembros pueden salir de IC o LH en cualquier momento. La eliminación de miembros del espacio del CI es simple, pero la adición de miembros al espacio del CI es más restrictiva. Si queremos añadir un nuevo miembro al espacio IC, primero definimos un conjunto de propiedades para el nuevo miembro: PSmnew_m ={P1, P2, P3,..., Pt} y lo añadimos al CI sólo si la condición: Este régimen tiene una ventaja adicional al permitir a los proveedores de servicios de información controlar el tipo de información que desean proporcionar a los usuarios. Presentamos el siguiente ejemplo para ilustrar el concepto de mapeo. IC = {Tráfico, Stock, Restaurante, Tiempo, Fechas importantes de la historia, Condiciones de la carretera} LH = {País, Estado, Ciudad, Código postal, Principales carreteras} GPSIC = {Surface-mobility, Roads, High, Low, Italian-food, StateName, Temp, CityName, Seat-disponibilidad, Zip, Traffic-jams, Además, PS(ICStock) indicó que Stock solo puede mapear a un solo país. Cuando consideramos el miembro Tráfico del espacio IC, sólo PS(ICTraffic) â € ¢ PScity â € TM. Como PS(ICTRAFFIC) indica que Traffic puede mapear a una sola ubicación, solo mapea a City y a ninguno de sus hijos. Ahora bien, a diferencia de Stock, el mapeo del tráfico con las principales carreteras, que es un hijo de la ciudad, es significativo. Sin embargo, los proveedores de servicios tienen derecho a controlar los niveles de granularidad a los que desean proporcionar información sobre un miembro del espacio IC. PS(ICRoad conditions) • PSState  y PS(ICRoad conditions) • PSCity. Así que las condiciones de la carretera son mapas al Estado, así como a la ciudad. Como PS(ICRoad conditions) indica que las condiciones de la carretera pueden mapear a múltiples niveles de granularidad, las condiciones de la carretera también mapearán a Zip Code y las principales carreteras, que son los niños del Estado y la ciudad. Del mismo modo, los mapas del restaurante sólo al código postal, y los mapas meteorológicos al estado, la ciudad y sus hijos, las carreteras principales y el código postal. 5. ESQUEMA DE ÍNDICE BASADA EN LOCALIZACIÓN Esta sección discute nuestro esquema de indexación basado en la ubicación (LBIS). El esquema está diseñado para ajustarse a la emisión LDD en nuestro proyecto DAYS. Como se discutió anteriormente, utilizamos la propiedad de contención de LDD en el esquema de indexación. Esto limita significativamente la búsqueda de nuestros datos requeridos a una parte particular de la transmisión. Por lo tanto, argumentamos que el esquema proporciona tiempo de afinación limitado. Describimos la arquitectura de nuestro esquema de indexación. Nuestro esquema contiene cubos de datos separados y cubos de índices. Los cubos de índice son de dos tipos. El primer tipo se llama el índice Mayor. El índice Major proporciona información sobre los tipos de datos transmitidos. Por ejemplo, si tenemos la intención de transmitir información como Entretenimiento, Tiempo, Tráfico, etc., entonces el índice principal apunta a estos tipos principales de información y/o sus principales subtipos de información, el número de subtipos principales variando de una información a otra. Esto limita estrictamente el número de accesos a un índice principal. El índice Major nunca apunta a los datos originales. Señala a los subíndices llamados el índice Menor. Los índices menores son los índices que realmente apuntan a los datos originales. Llamamos a estos indicadores menores como punteros de ubicación, ya que apunta a los datos que están asociados con una ubicación. Por lo tanto, nuestra búsqueda de datos incluye el acceso a un índice mayor y algunos índices menores, el número de índice menor variando dependiendo del tipo de información. Por lo tanto, nuestro esquema de indexación tiene en cuenta la naturaleza jerárquica del LDD, la propiedad Containment, y requiere que nuestro programa de transmisión se agrupe en función del tipo de datos y la ubicación. La estructura de la jerarquía de ubicación requiere el uso de diferentes tipos de índice en diferentes niveles. La estructura y las posiciones del índice dependen estrictamente de la jerarquía de ubicación descrita anteriormente en nuestro esquema de asignación. Ilustramos la implementación de nuestro esquema con un ejemplo. Posteriormente se mencionan las normas para la elaboración del índice. 20 A1 Entretenimiento Restaurante Película A2 A3 A4 R1 R2 R3 R4 R5 R6 R7 R8 Tiempo KC SL JC SF Entretenimiento R1 R2 R3 R4 R4 R5 R6 R7 R8 KC SL JC SF (A, R, NEXT = 8) 3, R5 4, R7 Tipo (S, L) ER W E EM (1, 4) (5, Información cartográfica de ubicación para radiodifusión Figura 4. Datos junto con el índice basado en la ubicación Ejemplo: Supongamos que nuestro contenido de transmisión contiene ICentertainment y ICweather que se representa como se muestra en la Fig. 3. Ai representa las áreas de la ciudad y Ri representa las carreteras en un área determinada. Las hojas de la estructura meteorológica representan cuatro ciudades. La estructura del índice se indica en la Fig. 4 que muestra la posición del índice mayor y menor y los datos en el horario de emisión. Proponemos las siguientes reglas para la creación del programa de emisión indexado por aire: • Se crean el índice mayor y el índice menor. • El índice principal contiene la posición y el rango de diferentes tipos de ítems de datos (Weather and Entertainment, Figura 3) y sus categorías. Las subcategorías de Entretenimiento, Cine y Restaurante, también están en el índice. Así, el índice principal contiene Entretenimiento (E), Entretenimiento-Movie (EM), Entretenimiento-Restaurante (ER), y Tiempo (W). La tupla (S, L) representa la posición inicial (S) del elemento de datos y L representa el rango del elemento en términos de número de cubos de datos. • El índice menor contiene las variables A, R y un puntero Siguiente. En nuestro ejemplo (Figura 3), la carretera R representa el primer nodo del área A. El índice menor se utiliza para apuntar a cubos de datos reales presentes en los niveles más bajos de la jerarquía. En cambio, el índice principal apunta a una gama más amplia de ubicaciones, por lo que contiene información sobre las principales y subcategorías de datos. • La información del índice no se incorpora en los cubos de datos. Los cubos de índice están separados que contienen sólo la información de control. • El número de cubos índice m=#(IC), IC = {ic1, ic2, ic3,...,icn} donde ici representa el tipo de información y # representa la cardinalidad del conjunto de contenido de información IC. En este ejemplo, IC= {icMovie, icWeather, icRestaurant} y así #(IC) =3. Por lo tanto, el número de cubos índice principales es 3. • El mecanismo para resolver la consulta está presente en el coordinador de java en MU. Por ejemplo, si una consulta Q se presenta como Q (Entretenimiento, Película, Road_1), entonces la búsqueda resultante será para la información EM en el índice principal. Nosotros decimos, Q EM. Nuestro índice propuesto funciona de la siguiente manera: Supongamos que una MU emite una consulta que está representada por Java Coordinador presente en la MU como información de restaurante en la carretera 7. Esto es resuelto por el coordinador como Q ER. Esto significa que uno tiene que buscar la unidad de índice ER en el índice principal. Supongamos que el MU entra en el canal en R2. El primer índice que recibe es un índice menor después de R2. En este índice, el valor de la variable Siguiente = 4, lo que significa que el siguiente índice mayor está presente después del cubo 4. La MU puede entrar en modo somnoliento. Se activa después del cubo 4 y recibe el índice principal. Busca información de ER que es la primera entrada en este índice. Ahora es seguro que la MU obtendrá la posición del cubo de datos en el índice menor contiguo. La segunda unidad en el índice menor representa la posición de los datos requeridos R7. Indica que el cubo de datos es el primer cubo en el Área 4. El MU vuelve a entrar en modo somnífero y se activa después del cubo 6. Obtiene los datos necesarios en el siguiente cubo. Presentamos el algoritmo para buscar el Índice basado en la ubicación. Algoritmo 1 Índice basado en la ubicación Buscar en DAYS 1. Escanear la transmisión para el siguiente cubo índice, encontrado=falso 2. Mientras que (no se encuentra) hacer 3. si cubo es el índice mayor entonces 4. Encuentra el Tipo & Tupla (S, L) 5. si S es mayor que 1, entra en modo Doze durante S segundos 6. termina si 7. Despierta en el cubo Sth y observa el índice menor 8. termina si 9. si el cubo es índice menor entonces 10. si TypeRequest no es igual a Typefound y (A,R)Solicitud no es igual a (A,R)found entonces 11. Vaya al modo de doze hasta el SIGUIENTE y repita desde el paso 3 12. terminar si 13. de lo contrario encontrar entrada en Índice Menor que apunta a los datos 14. Calcular la hora de llegada T del cubo de datos 15. Entra en modo somnífero hasta la T 16. Despierta en T y accede a los datos, encontrados = verdadero 17. fin de lo contrario 18. final si 19. final Mientras que 21 6. EVALUACIÓN DE LA EJECUCIÓN La conservación de la energía es la principal preocupación cuando tratamos de acceder a los datos de la transmisión inalámbrica. Un sistema eficiente debe permitir al dispositivo móvil acceder a los datos que necesita manteniéndose activo durante un período mínimo de tiempo. Esto ahorraría una cantidad considerable de energía. Dado que los elementos se distribuyen en función de los tipos y se asignan a ubicaciones adecuadas, argumentamos que nuestra transmisión se ocupa de los tipos de datos agrupados. La unidad móvil tiene que acceder a un índice mayor y a un índice menor relativamente menor para obtener información sobre la hora de llegada de los datos. Esto contrasta con el esquema exponencial donde los índices son de tamaños iguales. El ejemplo discutido y Algoritmo 1 revela que para acceder a cualquier dato, necesitamos acceder al índice mayor sólo una vez seguido por uno o más accesos al índice menor. El número de accesos menores al índice depende del número de ubicaciones internas. Como el número de ubicaciones internas varía de elemento a elemento (por ejemplo, Weather está generalmente asociado con una ciudad mientras que el tráfico se granula hasta las carreteras principales y menores de una ciudad), argumentamos que la estructura de la información de localización mapeada puede ser visualizada como un bosque que es una colección de árboles generales, el número de árboles generales dependiendo de los tipos de información transmitida y la profundidad de un árbol dependiendo de la granularidad de la información de Para nuestros experimentos, asumimos el bosque como una colección de árboles M-ary equilibrados. Asumimos además que los árboles de la arteria M están llenos al asumir la presencia de nodos ficticios en diferentes niveles de un árbol. Así, si el número de ítems de datos es d y la altura del árbol es m, entonces n= (m*d-1)/(m-1) donde n es el número de vértices en el árbol e i= (d-1)/(m-1) donde i es el número de vértices internos. El tiempo de afinación para un ítem de datos implica 1 unidad de tiempo requerido para acceder al índice principal más el tiempo requerido para acceder a los ítems de datos presentes en las hojas del árbol. Por lo tanto, el tiempo de sintonización con d ítems de datos es t = logmd+1 Podemos decir que el tiempo de sintonización está limitado por O(logmd). Comparamos nuestro esquema con el esquema de indexación distribuida y exponencial. Asumimos una emisión plana y el número de páginas que varían de 5000 a 25000. Los diversos parámetros de simulación se muestran en la Tabla 1. La Figura 5-8 muestra los tiempos relativos de afinación de tres algoritmos de indexación, es decir, el LBIS, esquema exponencial y el esquema de árbol distribuido. La Figura 5 muestra el resultado para el número de nodos internos de ubicación = 3. Podemos ver que LBIS supera significativamente a los otros esquemas. El tiempo de afinación en LBIS varía de aproximadamente 6,8 a 8. Este gran tiempo de afinación se debe al hecho de que después de alcanzar el índice menor más bajo, la MU puede tener que acceder a pocos cubos secuencialmente para obtener el cubo de datos requerido. Podemos ver que el tiempo de afinación tiende a ser estable a medida que aumenta la duración de la emisión. En la figura 6 se considera m= 4. Aquí podemos ver que el exponencial y el rendimiento distribuido casi de manera similar, aunque el primero parece funcionar ligeramente mejor a medida que aumenta la longitud de emisión. Un patrón muy interesante es visible en la figura 7. Para las emisiones de menor tamaño, el LBIS parece tener un tiempo de afinación mayor que los otros dos esquemas. Pero a medida que aumenta la duración de la emisión, es claramente visible que el LBIS supera a los otros dos esquemas. La indexación del árbol distribuido muestra un comportamiento similar al del LBIS. El tiempo de afinación en LBIS sigue siendo bajo porque el algoritmo permite a la MU saltarse algunos Índices Menores intermedios. Esto permite que la MU se mueva a niveles más bajos directamente después de entrar en modo activo, ahorrando así energía valiosa. Esta acción no es posible en la indexación de árboles distribuidos y por lo tanto podemos observar que su tiempo de afinación es más que el esquema LBIS, aunque tiene mejores resultados que el esquema exponencial. La Figura 8, en contraste, nos muestra que el tiempo de afinación en LBIS, aunque menor que los otros dos esquemas, tiende a aumentar bruscamente a medida que la longitud de emisión se hace mayor que las 15000 páginas. Esto puede atribuirse tanto al aumento del tiempo necesario para escanear los Índices Menores intermedios como a la duración de la emisión. Pero podemos observar que la pendiente de la curva LBIS es significativamente menor que las otras dos curvas. Tabla 1 Parámetros de simulación P Valores de definición N Número de datos Elementos 5000 - 25000 m Número de nodos de ubicación internos 3, 4, 5, 6 B Capacidad de cubo sin índice (para índice exponencial) 10,64,128,256 i Base de índice para índice exponencial 2,4,6,8 k Tamaño del índice para árbol distribuido 8 bytes Los resultados de la simulación establecen algunos hechos sobre nuestro esquema de indexación basado en la ubicación. En la mayoría de los casos, el sistema funciona mejor que los otros dos en términos de tiempo de afinación. A medida que aumenta la duración de la emisión, después de cierto punto, aunque el tiempo de afinación aumenta como resultado de factores que hemos descrito antes, el esquema siempre funciona mejor que los otros dos esquemas. Debido al límite prescrito del número de páginas en el papel, no podemos mostrar más resultados. Pero estos resultados omitidos muestran una tendencia similar a la de los resultados representados en la figura 5-8. 7. CONCLUSIÓN Y FUTURO TRABAJO En este trabajo hemos presentado un esquema para el mapeo de datos de radiodifusión inalámbrica con sus ubicaciones. Hemos presentado un ejemplo para mostrar cómo la estructura jerárquica del árbol de ubicación mapea con los datos para crear LDD. Hemos presentado un esquema llamado LBIS para indexar este LDD. Hemos utilizado la propiedad de contención de LDD en el esquema que limita la búsqueda a un estrecho rango de datos en la emisión, ahorrando así energía valiosa en el dispositivo. La asignación de datos con ubicaciones y el esquema de indexación se utilizará en nuestro proyecto DAYS para crear la arquitectura basada en empuje. El LBIS se ha comparado con otros dos sistemas de indexación prominentes, a saber, el sistema de indexación de árboles distribuidos y el sistema de indexación exponencial. En nuestras simulaciones demostramos que el esquema LBIS tiene el menor tiempo de afinación para las emisiones que tienen un gran número de páginas, ahorrando así una valiosa potencia de batería en la MU. 22 En el trabajo futuro tratamos de incorporar la arquitectura basada en el tirón en nuestro proyecto DAYS. Los datos del servidor están disponibles para el acceso de los usuarios globales. Esto se puede hacer poniendo una solicitud al servidor de origen. La consulta en este caso es una consulta global. Se transfiere del servidor de origen de los usuarios al servidor de destino mediante el uso de satélites LEO. Tenemos la intención de utilizar nuestro esquema de LDD y arquitectura de estadificación de datos en la arquitectura basada en el tirón. Demostraremos que el esquema de LDD junto con la arquitectura de estadificación de datos mejora significativamente la latencia para la consulta global y local. 8. REFERENCIAS [1] Acharya, S., Alonso, R. Franklin, M y Zdonik S. Disco de transmisión: Gestión de datos para entornos de comunicación asimétricos. En Actas de la Conferencia de la ACM SIGMOD sobre Gestión de Datos, págs. 199 a 210, San José, CA, mayo de 1995. [2] Chen, M.S.,Wu, K.L. y Yu, P. S. Optimizando la asignación de índices para la difusión secuencial de datos en la computación móvil inalámbrica. IEEE Transactions on Knowledge and Data Engineering (TKDE), 15(1):161-173, enero/febrero de 2003. Gráfico 5 Tamaño de la transmisión (# cubos) Dist tree Expo LBIS Figura 6. Tamaño de la transmisión (# cubos) Dist tree Expo LBIS Figura 7. Tamaño de la transmisión (# cubos) Dist tree Expo LBIS Figura 8. Tamaño de la transmisión (# cubos) Árbol dist Expo LBIS Tiempo medio de afinación Tiempo medio de afinación Tiempo medio de afinación 23 [3] Hu, Q. L., Lee, D. L. y Lee, W.C. Evaluación del rendimiento de un sistema inalámbrico de difusión jerárquica de datos. En Actas de la Quinta Conferencia Internacional Anual de ACM sobre Computación y Redes Móviles (MobiCom99), págs. 163 a 173, Seattle, WA, agosto de 1999. [4] Hu, Q. L. Lee, W.C. y Lee, D. L. Power consultas conservadoras de múltiples atributos en la transmisión de datos. En Actas de la 16a Conferencia Internacional sobre Ingeniería de Datos (ICDE00), páginas 157-166, San Diego, CA, febrero de 2000. [5] Imielinski, T., Viswanathan, S. y Badrinath. B. R. Filtrado eficiente de energía de los datos en el aire. En Actas de la Cuarta Conferencia Internacional sobre Tecnología de Bases de Datos Ampliadas (EDBT94), págs. 245 a 258, Cambridge, Reino Unido, marzo de 1994. [6] Imielinski, T., Viswanathan, S. y Badrinath. B. R. Datos sobre el aire - Organización y acceso. Operaciones de IEEE en Ingeniería de Conocimientos e Datos (TKDE), 9(3):353-372, mayo/junio de 1997. [7] Shih, E., Bahl, P. y Sinclair, M. J. Wake on wireless: Una estrategia de ahorro de energía impulsada por eventos para dispositivos operados por baterías. En Actas de la 8a Conferencia Internacional Anual de ACM sobre Computación y Redes Móviles (MobiCom02), págs. 160 a 171, Atlanta, GA, septiembre de 2002. [8] Shivakumar N. y Venkatasubramanian, S. Indización energéticamente eficiente para la difusión de información en sistemas inalámbricos. ACM/Baltzer Journal of Mobile Networks and Applications (MONET), 1(4):433-446, diciembre de 1996. [9] Tan K. L. y Yu, J. X. Filtración energéticamente eficiente de emisiones no uniformes. En Actas de la 16a Conferencia Internacional sobre Sistemas de Computación Distribuida (ICDCS96), págs. 520 a 527, Hong Kong, mayo de 1996. [10] Viredaz, M. A., Brakmo, L. S. y Hamburgen, W. R. Gestión de energía en dispositivos portátiles. ACM Coue, 1(7):44-52, octubre de 2003. [11] Garg, N. Kumar, V., & Dunham, M.H. Mapeo e indización de información en DAYS, 6o Taller Internacional sobre Movilidad en Bases de Datos y Sistemas Distribuidos, en conjunción con la 14a Conferencia Internacional sobre Aplicaciones de Bases de Datos y Sistemas Expertos, 1o a 5 de septiembre, Praga, República Checa, 2003. [12] Acharya D., Kumar, V., & Dunham, M.H. InfoSpace: Sistema de difusión de datos públicos híbrido y adaptativo para computación ubicua. Aceptado para publicación en el número especial de Pervasive Computing. Wiley Journal for Wireless Communications and Mobile Computing, 2004. [13] Acharya D., Kumar, V., & Prabhu, N. Descubriendo y usando Servicios Web en M-Commerce, Proceedings for 5th VLDB Workshop on Technologies for E-Services, Toronto, Canada,2004. [14] Acharya D., Kumar, V. Indexing Location Depending Data in broadcast en ambiente. Aceptado para su publicación, número especial de JDIM sobre Gestión de Datos Distribuidos, 2005. [15] Flinn, J., Sinnamohideen, S., & Satyanarayan, M. Data Staging on No Trusted Surrogates, Intel Research, Pittsburg, Unpublished Report, 2003. [16] Seydim, A.Y., Dunham, M.H. & Kumar, V. Location dependiente consulta processing, Actas del segundo taller internacional de ACM sobre ingeniería de datos para acceso inalámbrico y móvil, p.47-53, Santa Barbara, California, USA, 2001. [17] Xu, J., Lee, W.C., Tang., X. Índice exponencial: Un esquema de indexación distribuida para los datos sobre el aire. En Actas de la II Conferencia Internacional ACM/USENIX sobre Sistemas, Aplicaciones y Servicios Móviles (MobiSys04), Boston, MA, junio de 2004. 24",
    "error_count": 16,
    "keys": {
        "wireless datum dissemination": {
            "translated_key": [],
            "translated_annotated_text": "Esquema de Indización basado en la ubicación para DAYS Debopam Acharya y Vijay Kumar 1 Computer Science and Informatics University of Missouri-Kansas City Kansas City, MO 64110 dargc(kumarv)@umkc.edu RESUMEN La difusión de datos a través de canales inalámbricos para transmitir información a los consumidores se está volviendo bastante común. Se han propuesto muchos planes de difusión, pero la mayoría de ellos llevan los datos a canales inalámbricos para consumo general. La difusión basada en push [1] es esencialmente asimétrica, es decir, el volumen de datos es mayor desde el servidor a los usuarios que desde los usuarios de vuelta al servidor. El esquema basado en el empuje requiere una indexación que indica cuándo se transmitirán los datos y su posición en la emisión. Latencia de acceso y tiempo de afinación son los dos parámetros principales que pueden utilizarse para evaluar un esquema de indexación. Dos de los importantes esquemas de indexación propuestos anteriormente se basaban en los árboles y los esquemas de indexación exponencial. Ninguno de estos planes pudo satisfacer los requisitos de los datos dependientes de la ubicación (DDL), que es una característica muy deseable de la difusión de datos. En este artículo, discutimos la emisión de LDD en nuestro proyecto DAta in Your Space (DAYS), y proponemos un esquema para la indexación de LDD. Argumentamos que este sistema, cuando se aplica a la DDTS, mejora significativamente el rendimiento en términos de tiempo de afinación en los esquemas antes mencionados. Demostramos nuestro argumento con la ayuda de resultados de simulación. Categorías y Descriptores sujetos H.3.1 [Sistemas de información]: Almacenamiento y recuperación de información - análisis e indexación de contenido; H.3.3 [Sistemas de información]: Almacenamiento y recuperación de información - búsqueda y recuperación de información. Términos generales Algoritmos, Rendimiento, Experimentación 1. INTRODUCCIÓN La difusión inalámbrica de datos es una forma económica y eficiente de poner los datos deseados a disposición de un gran número de usuarios móviles o estáticos. El modo de transferencia de datos es esencialmente asimétrico, es decir, la capacidad de transferencia de datos (comunicación descendente) del servidor al cliente (usuario móvil) es significativamente mayor que el cliente o usuario móvil al servidor (comunicación ascendente). La eficacia de un sistema de difusión de datos se determina por su capacidad para proporcionar a los usuarios los datos requeridos en cualquier lugar y en cualquier momento. Una de las mejores maneras de lograr esto es a través de la difusión de servicios basados en la ubicación altamente personalizados (LBS) que permite a los usuarios acceder a datos dependientes de la ubicación personalizada. Un ejemplo sería alguien usando su dispositivo móvil para buscar un restaurante vegetariano. La aplicación LBS interactuaría con otros componentes de tecnología de localización o utilizaría la entrada de usuarios móviles para determinar la ubicación de los usuarios y descargar la información sobre los restaurantes cercanos al usuario sintonizando el canal inalámbrico que está difundiendo LDD. Vemos un despliegue limitado de LBS por parte de algunos proveedores de servicios. Pero hay todos los indicios de que con el tiempo se resolverán algunos de los complejos problemas técnicos, como el marco de localización uniforme, el cálculo y el seguimiento de ubicaciones en todo tipo de lugares, el posicionamiento en diversos entornos, aplicaciones de localización innovadoras, etc., y LBS se convertirá en una instalación común y ayudará a mejorar la productividad del mercado y el confort del cliente. En nuestro proyecto llamado DAYS, utilizamos el mecanismo de difusión de datos inalámbricos para impulsar LDD a los usuarios y usuarios móviles monitorear y sintonizar el canal para encontrar y descargar los datos requeridos. Sin embargo, es probable que una emisión simple cause una degradación significativa del rendimiento de los dispositivos móviles con limitaciones energéticas, y una solución común a este problema es el uso de una indexación eficiente del aire. El enfoque de indexación almacena información de control que informa al usuario sobre la ubicación de los datos en la emisión y cómo y cuándo pudo acceder a ella. Un usuario móvil, por lo tanto, tiene un poco de tiempo libre para entrar en el modo de somnífero que conserva valiosa energía. También permite al usuario personalizar su propio dispositivo móvil afinando selectivamente la información de su elección. La eficiencia del acceso y la conservación de la energía son las dos cuestiones importantes para los sistemas de radiodifusión de datos. La eficiencia de acceso se refiere a la latencia experimentada cuando se inicia una solicitud hasta que se recibe la respuesta. Conservación de la energía [7, 10] se refiere al uso eficiente de la energía limitada del dispositivo móvil para acceder a los datos de radiodifusión. Dos parámetros que afectan a estos son el tiempo de afinación y la latencia de acceso. El tiempo de sintonización se refiere al tiempo durante el cual la unidad móvil (MU) permanece en estado activo para sintonizar el canal y descargar los datos requeridos. También se puede definir como el número de cubos sintonizados por el dispositivo móvil en estado activo para obtener los datos requeridos. La latencia de acceso puede definirse como el tiempo transcurrido desde que se ha emitido una solicitud hasta que se ha recibido la respuesta. 1 Esta investigación fue apoyada por una subvención de NSF IIS-0209170. En el pasado se han propuesto varios esquemas de indexación, entre los que destacan los basados en árboles y los esquemas de indexación exponencial [17]. Las principales desventajas de los esquemas basados en árboles son que se basan en estructuras arbóreas centralizadas. Para iniciar una búsqueda, la MU tiene que esperar hasta que llegue a la raíz del siguiente árbol de transmisión. Esto afecta significativamente el tiempo de afinación de la unidad móvil. Los esquemas exponenciales facilitan la replicación de índices compartiendo enlaces en diferentes árboles de búsqueda. Para las emisiones con un gran número de páginas, se ha demostrado que el esquema exponencial funciona de manera similar a los esquemas basados en árboles en términos de latencia de acceso. Además, la duración media de la emisión aumenta debido a la replicación del índice y esto puede causar un aumento significativo de la latencia del acceso. Ninguno de los sistemas de indexación mencionados es igualmente eficaz en la difusión de datos dependientes de la ubicación. Además de proporcionar baja latencia, carecen de propiedades que se utilizan para abordar los problemas de DDT. Proponemos un esquema de indexación en DAYS que se ocupa de algunos de estos problemas. Demostramos con resultados de simulación que nuestro esquema supera a algunos de los esquemas de indexación anteriores para la difusión de LDD en términos de tiempo de afinación. El resto del documento se presenta de la siguiente manera. En la sección 2, se analiza el trabajo anterior relacionado con la indexación de los datos de radiodifusión. La sección 3 describe nuestra arquitectura DAYS. Los datos dependientes de la ubicación, su generación y su posterior difusión se presentan en la sección 4. La sección 5 discute nuestro esquema de indexación en detalle. La simulación de nuestro esquema y su evaluación del desempeño se presenta en la sección 6. En la sección 7 se concluye el documento y se menciona la labor futura relacionada. 2. TRABAJO ANTERIOR Varias técnicas de indexación basadas en discos se han utilizado para la indexación de aire. Imielinski et al. [5, 6] aplicó el árbol del índice B+, donde los nodos de la hoja almacenan los tiempos de llegada de los ítems de datos. Se propuso el método de indexación distribuida para reproducir y distribuir eficientemente el árbol de índices en una emisión. Específicamente, el árbol índice se divide en una parte replicada y una parte no replicada. Cada emisión consiste en la parte replicada y la parte no replicada que indiza los elementos de datos inmediatamente después de ella. Como tal, cada nodo en la parte no replicada aparece sólo una vez en una emisión y, por lo tanto, reduce el costo de replicación y latencia de acceso, al tiempo que logra un buen tiempo de afinación. Chen et al. [2] y Shivakumar et al. [8] considera estructuras de árboles desequilibradas para optimizar el consumo de energía para el acceso a datos no uniformes. Estas estructuras minimizan el costo medio de búsqueda de índices reduciendo el número de búsquedas de datos en caliente a expensas de gastar más en datos en frío. Tan y Yu discutieron la organización de datos e índices bajo la emisión sesgada También se han sugerido métodos de Hashing y firma para la transmisión inalámbrica que admite consultas de igualdad [9]. En [5] se propuso un método flexible de indización. El índice flexible primero clasifica los elementos de datos en orden ascendente (o descendente) de los valores clave de búsqueda y luego los divide en segmentos p. El primer cubo en cada segmento de datos contiene un índice de control, que es un índice binario que asigna un valor clave dado al segmento que contiene esa clave, y un índice local, que es un índice de entrada m que asigna un valor clave dado a los cubos dentro del segmento actual. Al afinar los parámetros de p y m, los clientes móviles pueden lograr un buen tiempo de afinación o una buena latencia de acceso. Otra técnica de indexación propuesta es el esquema de indexación exponencial [17]. En este esquema, se utiliza un índice parametrizado, llamado índice exponencial, para optimizar la latencia del acceso o el tiempo de afinación. Facilita la replicación de índices mediante la vinculación de diferentes árboles de búsqueda. Todos los regímenes mencionados se han aplicado a datos que no están relacionados entre sí. Estos datos no relacionados pueden agruparse o no agruparse. Sin embargo, ninguno de ellos se ha ocupado específicamente de los requisitos de la DDT. Los datos dependientes de la ubicación son datos que están asociados con una ubicación. En la actualidad hay varias aplicaciones que se ocupan de la DDTS [13, 16]. Casi todos ellos representan LDD con la ayuda de estructuras jerárquicas [3, 4]. Esto se basa en la propiedad de contención de datos dependientes de la ubicación. La propiedad Containment ayuda a determinar la posición relativa de un objeto definiendo o identificando ubicaciones que contienen esos objetos. Las ubicaciones subordinadas están jerárquicamente relacionadas entre sí. Así, la propiedad Containment limita la gama de disponibilidad u operación de un servicio. Usamos esta propiedad de contención en nuestro esquema de indexación para indexar LDD. 3. DAYS ARCHITECTURE DAYS se ha conceptualizado para difundir datos tópicos y no tópicos a los usuarios en un espacio de difusión local y para aceptar consultas de usuarios individuales a nivel mundial. Los datos tópicos, por ejemplo, información meteorológica, información de tráfico, información de existencias, etc., cambian constantemente con el tiempo. Los datos no tópicos como hotel, restaurante, precios inmobiliarios, etc., no cambian tan a menudo. Así, imaginamos la presencia de dos tipos de distribución de datos: En el primer caso, el servidor empuja los datos a los usuarios locales a través de canales inalámbricos. El otro caso se refiere al servidor que envía los resultados de las consultas de los usuarios a través de canales inalámbricos de enlace descendente. Técnicamente, vemos la presencia de dos tipos de colas en el acceso basado en datos. Una es una cola muy cargada que contiene consultas cargadas globalmente. La otra es una cola relativamente ligera que consiste en consultas subidas localmente. La arquitectura DAYS [12], como se muestra en la figura 1, consiste en un servidor de datos, programador de transmisiones, coordinador de DAYS, red de satélites LEO para la entrega de datos a nivel mundial y un espacio de transmisión local. Los datos se introducen en el espacio de transmisión local para que los usuarios puedan sintonizarse con los canales inalámbricos para acceder a los datos. El espacio de transmisión local consiste en una torre de transmisión, unidades móviles y una red de máquinas de puesta en escena de datos llamadas subrogados. La estadificación de datos en sustitutos se ha investigado anteriormente como una técnica exitosa [12, 15] para los datos relacionados con los usuarios de caché. Creemos que la estadificación de datos se puede utilizar para reducir drásticamente el tiempo de latencia tanto para los datos de radiodifusión local como para las respuestas globales. La solicitud de consulta en los sustitutos puede utilizarse posteriormente para generar los patrones de popularidad que finalmente deciden el horario de emisión [12]. 18 Popularidad Comentarios de Surrogates for Broadcast Scheduler Local Space Broadcast Tower SurrogateMU MU MU Servidor de datosHorario de radiodifusiónDÍAS Coordinador Canal local de enlace descendente Canal global de enlace descendente Pull request cola cola Solicitud global cola Solicitud local cola Ubicación índice basado en Starbucks Plaza Kansas City Figura 1. Arquitectura DAYS Figura 2. Ubicación Estructura deStarbucks, Plaza 4. DATOS DEPENDIENTES DE LOCALIZACIÓN (LDD) Argumentamos que la incorporación de información de ubicación en la transmisión inalámbrica de datos puede disminuir significativamente la latencia de acceso. Esta propiedad se convierte en muy útil para la unidad móvil que tiene capacidad de almacenamiento y procesamiento limitada. Hay una variedad de aplicaciones para obtener información sobre tráfico, reservas de restaurantes y hoteles, comida rápida, gasolineras, oficina de correos, tiendas de comestibles, etc. Si estas aplicaciones se combinan con información de ubicación, entonces la búsqueda será rápida y altamente rentable. Una propiedad importante de las ubicaciones es Containment que ayuda a determinar la ubicación relativa de un objeto con respecto a su padre que contiene el objeto. Por lo tanto, Containment limita el rango de disponibilidad de un dato. Usamos esta propiedad en nuestro esquema de indexación. La base de datos contiene los contenidos transmitidos que se convierten en LDD [14] asociándolos con las ubicaciones respectivas para que puedan transmitirse de manera agrupada. El agrupamiento de LDD ayuda al usuario a localizar la información de manera eficiente y soporta la propiedad de contención. Presentamos un ejemplo para justificar nuestra propuesta. Ejemplo: Supongamos que un usuario emite una consulta Starbucks Coffee en Plaza por favor. para acceder a información sobre la sucursal Plaza de Starbucks Coffee en Kansas City. En el caso de la ubicación independiente establecido el sistema enumerará todas las cafeterías Starbucks en el área de Kansas City. Es evidente que esas respuestas aumentarán la latencia del acceso y no son deseables. Estos se pueden administrar de manera eficiente si el servidor tiene datos dependientes de la ubicación, es decir, una asignación entre los datos de una cafetería de Starbucks y su ubicación física. Además, para una consulta que incluya el rango de ubicaciones de Starbucks, bastará con una sola consulta solicitando ubicaciones para toda la región de Kansas City, como se muestra en la Figura 2. Esto ahorrará una enorme cantidad de ancho de banda al disminuir el número de mensajes y, al mismo tiempo, será útil para prevenir el cuello de botella de escalabilidad en una zona muy poblada. 4.1 Función de asignación para LDD El ejemplo justifica la necesidad de una función de asignación para procesar consultas dependientes de la ubicación. Esto será especialmente importante para las consultas basadas en la atracción en todo el mundo para las cuales la respuesta podría estar compuesta para diferentes partes del mundo. La función de mapeo es necesaria para construir el horario de emisión. Definimos Global Property Set (GPS) [11], Information Content (IC) set, and Location Jerarchy (LH) set where IC  GPS and LH  GPS to develop a mapping function. LH = {l1, l2, l3...,lk} donde li representan ubicaciones en el árbol de ubicación y IC = {ic1, ic2, ic3,...,icn} donde ici representan tipo de información. Por ejemplo, si tenemos tráfico, tiempo, y la información de stock están en transmisión entonces IC = {ictráfico, icweather, e icstock}. El esquema de asignación debe ser capaz de identificar y seleccionar un miembro IC y un nodo LH para (a) asociación correcta, (b) coincidencia de granularidad, (c) y condición de terminación. Por ejemplo, el clima • IC podría estar asociado con un país o un estado o una ciudad o un pueblo de LH. La coincidencia de granularidad entre el tiempo y un nodo LH es según el requisito del usuario. Así, con una granularidad gruesa la información meteorológica se asocia con un país para obtener el clima de los países y con la ciudad en una granularidad más fina. Si una ciudad es la mejor granularidad, entonces define la condición terminal para la asociación entre IC y LH para el tiempo. Esto significa que un usuario no puede obtener información meteorológica sobre la subdivisión de una ciudad. En realidad, el clima de una subdivisión no tiene ningún sentido. Desarrollamos un simple esquema de mapeo heurístico basado en las necesidades del usuario. Dejar IC = {m1, m2,m3.,..., mk}, donde mi representa su elemento y dejar LH = {n1, n2, n3,..., nl}, donde ni representa miembro LHs. Definimos GPS para IC (GPSIC)  GPS y para LH (GPSLH)  GPS como GPSIC = {P1, P2,..., Pn}, donde P1, P2, P3,..., Pn son propiedades de sus miembros y GPSLH = {Q1, Q2,..., Qm} donde Q1, Q2,..., Qm son propiedades de sus miembros. Las propiedades de un miembro particular de IC son un subconjunto de GPSIC. Generalmente es cierto que (conjunto de propiedades (miÃ3n IC) â € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € Por ejemplo, stock • IC y película • IC calificación no tienen ninguna propiedad en común. Asumimos que dos o más miembros del CI tienen al menos una propiedad geográfica común (es decir, lugar) porque DAYS transmite información sobre esas categorías, que están estrechamente vinculadas con un lugar. Por ejemplo, las acciones de una empresa están relacionadas con un país, el clima está relacionado con una ciudad o estado, etc. Definimos el subconjunto de propiedades de mio IC como PSm i ♥ mi • IC y PSm i = {P1, P2,..., Pr} donde r ≤ n. • Pr {Pr • PSm i → Pr • GPSIC} que implica que • i, PSm i  GPSIC. Las propiedades geográficas de este conjunto son indicativas de si mi IC puede ser mapeado a un solo nivel de granularidad (es decir. una sola ubicación) en LH o varios niveles de granularidad (es decir, más de un nodo en 19 de la jerarquía) en LH. ¿Cuántos y qué niveles de granularidad debe un mapa mi, depende del nivel en el que el proveedor de servicios quiere proporcionar información sobre el mi en cuestión. Del mismo modo, definimos un subconjunto de propiedades de los miembros de LH como PSn j Ł nj Ł LH que puede ser escrito como PSn j ={Q1, Q2, Q3,..., Qs} donde s ≤ m. Además, El proceso de mapeo de IC a LH es entonces identificar para algunos mxÃ3 IC uno o mÃ¡s nyÃ3 LH tal que PSmx Ã3 PSnv Esto significa que cuando mx mapea a ny y a todos los niños de ny si mx puede mapear a múltiples niveles de granularidad o mx mapea sólo a ny si mx puede mapear a un solo nivel de granularidad. Asumimos que los nuevos miembros pueden unirse y los antiguos miembros pueden salir de IC o LH en cualquier momento. La eliminación de miembros del espacio del CI es simple, pero la adición de miembros al espacio del CI es más restrictiva. Si queremos añadir un nuevo miembro al espacio IC, primero definimos un conjunto de propiedades para el nuevo miembro: PSmnew_m ={P1, P2, P3,..., Pt} y lo añadimos al CI sólo si la condición: Este régimen tiene una ventaja adicional al permitir a los proveedores de servicios de información controlar el tipo de información que desean proporcionar a los usuarios. Presentamos el siguiente ejemplo para ilustrar el concepto de mapeo. IC = {Tráfico, Stock, Restaurante, Tiempo, Fechas importantes de la historia, Condiciones de la carretera} LH = {País, Estado, Ciudad, Código postal, Principales carreteras} GPSIC = {Surface-mobility, Roads, High, Low, Italian-food, StateName, Temp, CityName, Seat-disponibilidad, Zip, Traffic-jams, Además, PS(ICStock) indicó que Stock solo puede mapear a un solo país. Cuando consideramos el miembro Tráfico del espacio IC, sólo PS(ICTraffic) â € ¢ PScity â € TM. Como PS(ICTRAFFIC) indica que Traffic puede mapear a una sola ubicación, solo mapea a City y a ninguno de sus hijos. Ahora bien, a diferencia de Stock, el mapeo del tráfico con las principales carreteras, que es un hijo de la ciudad, es significativo. Sin embargo, los proveedores de servicios tienen derecho a controlar los niveles de granularidad a los que desean proporcionar información sobre un miembro del espacio IC. PS(ICRoad conditions) • PSState  y PS(ICRoad conditions) • PSCity. Así que las condiciones de la carretera son mapas al Estado, así como a la ciudad. Como PS(ICRoad conditions) indica que las condiciones de la carretera pueden mapear a múltiples niveles de granularidad, las condiciones de la carretera también mapearán a Zip Code y las principales carreteras, que son los niños del Estado y la ciudad. Del mismo modo, los mapas del restaurante sólo al código postal, y los mapas meteorológicos al estado, la ciudad y sus hijos, las carreteras principales y el código postal. 5. ESQUEMA DE ÍNDICE BASADA EN LOCALIZACIÓN Esta sección discute nuestro esquema de indexación basado en la ubicación (LBIS). El esquema está diseñado para ajustarse a la emisión LDD en nuestro proyecto DAYS. Como se discutió anteriormente, utilizamos la propiedad de contención de LDD en el esquema de indexación. Esto limita significativamente la búsqueda de nuestros datos requeridos a una parte particular de la transmisión. Por lo tanto, argumentamos que el esquema proporciona tiempo de afinación limitado. Describimos la arquitectura de nuestro esquema de indexación. Nuestro esquema contiene cubos de datos separados y cubos de índices. Los cubos de índice son de dos tipos. El primer tipo se llama el índice Mayor. El índice Major proporciona información sobre los tipos de datos transmitidos. Por ejemplo, si tenemos la intención de transmitir información como Entretenimiento, Tiempo, Tráfico, etc., entonces el índice principal apunta a estos tipos principales de información y/o sus principales subtipos de información, el número de subtipos principales variando de una información a otra. Esto limita estrictamente el número de accesos a un índice principal. El índice Major nunca apunta a los datos originales. Señala a los subíndices llamados el índice Menor. Los índices menores son los índices que realmente apuntan a los datos originales. Llamamos a estos indicadores menores como punteros de ubicación, ya que apunta a los datos que están asociados con una ubicación. Por lo tanto, nuestra búsqueda de datos incluye el acceso a un índice mayor y algunos índices menores, el número de índice menor variando dependiendo del tipo de información. Por lo tanto, nuestro esquema de indexación tiene en cuenta la naturaleza jerárquica del LDD, la propiedad Containment, y requiere que nuestro programa de transmisión se agrupe en función del tipo de datos y la ubicación. La estructura de la jerarquía de ubicación requiere el uso de diferentes tipos de índice en diferentes niveles. La estructura y las posiciones del índice dependen estrictamente de la jerarquía de ubicación descrita anteriormente en nuestro esquema de asignación. Ilustramos la implementación de nuestro esquema con un ejemplo. Posteriormente se mencionan las normas para la elaboración del índice. 20 A1 Entretenimiento Restaurante Película A2 A3 A4 R1 R2 R3 R4 R5 R6 R7 R8 Tiempo KC SL JC SF Entretenimiento R1 R2 R3 R4 R4 R5 R6 R7 R8 KC SL JC SF (A, R, NEXT = 8) 3, R5 4, R7 Tipo (S, L) ER W E EM (1, 4) (5, Información cartográfica de ubicación para radiodifusión Figura 4. Datos junto con el índice basado en la ubicación Ejemplo: Supongamos que nuestro contenido de transmisión contiene ICentertainment y ICweather que se representa como se muestra en la Fig. 3. Ai representa las áreas de la ciudad y Ri representa las carreteras en un área determinada. Las hojas de la estructura meteorológica representan cuatro ciudades. La estructura del índice se indica en la Fig. 4 que muestra la posición del índice mayor y menor y los datos en el horario de emisión. Proponemos las siguientes reglas para la creación del programa de emisión indexado por aire: • Se crean el índice mayor y el índice menor. • El índice principal contiene la posición y el rango de diferentes tipos de ítems de datos (Weather and Entertainment, Figura 3) y sus categorías. Las subcategorías de Entretenimiento, Cine y Restaurante, también están en el índice. Así, el índice principal contiene Entretenimiento (E), Entretenimiento-Movie (EM), Entretenimiento-Restaurante (ER), y Tiempo (W). La tupla (S, L) representa la posición inicial (S) del elemento de datos y L representa el rango del elemento en términos de número de cubos de datos. • El índice menor contiene las variables A, R y un puntero Siguiente. En nuestro ejemplo (Figura 3), la carretera R representa el primer nodo del área A. El índice menor se utiliza para apuntar a cubos de datos reales presentes en los niveles más bajos de la jerarquía. En cambio, el índice principal apunta a una gama más amplia de ubicaciones, por lo que contiene información sobre las principales y subcategorías de datos. • La información del índice no se incorpora en los cubos de datos. Los cubos de índice están separados que contienen sólo la información de control. • El número de cubos índice m=#(IC), IC = {ic1, ic2, ic3,...,icn} donde ici representa el tipo de información y # representa la cardinalidad del conjunto de contenido de información IC. En este ejemplo, IC= {icMovie, icWeather, icRestaurant} y así #(IC) =3. Por lo tanto, el número de cubos índice principales es 3. • El mecanismo para resolver la consulta está presente en el coordinador de java en MU. Por ejemplo, si una consulta Q se presenta como Q (Entretenimiento, Película, Road_1), entonces la búsqueda resultante será para la información EM en el índice principal. Nosotros decimos, Q EM. Nuestro índice propuesto funciona de la siguiente manera: Supongamos que una MU emite una consulta que está representada por Java Coordinador presente en la MU como información de restaurante en la carretera 7. Esto es resuelto por el coordinador como Q ER. Esto significa que uno tiene que buscar la unidad de índice ER en el índice principal. Supongamos que el MU entra en el canal en R2. El primer índice que recibe es un índice menor después de R2. En este índice, el valor de la variable Siguiente = 4, lo que significa que el siguiente índice mayor está presente después del cubo 4. La MU puede entrar en modo somnoliento. Se activa después del cubo 4 y recibe el índice principal. Busca información de ER que es la primera entrada en este índice. Ahora es seguro que la MU obtendrá la posición del cubo de datos en el índice menor contiguo. La segunda unidad en el índice menor representa la posición de los datos requeridos R7. Indica que el cubo de datos es el primer cubo en el Área 4. El MU vuelve a entrar en modo somnífero y se activa después del cubo 6. Obtiene los datos necesarios en el siguiente cubo. Presentamos el algoritmo para buscar el Índice basado en la ubicación. Algoritmo 1 Índice basado en la ubicación Buscar en DAYS 1. Escanear la transmisión para el siguiente cubo índice, encontrado=falso 2. Mientras que (no se encuentra) hacer 3. si cubo es el índice mayor entonces 4. Encuentra el Tipo & Tupla (S, L) 5. si S es mayor que 1, entra en modo Doze durante S segundos 6. termina si 7. Despierta en el cubo Sth y observa el índice menor 8. termina si 9. si el cubo es índice menor entonces 10. si TypeRequest no es igual a Typefound y (A,R)Solicitud no es igual a (A,R)found entonces 11. Vaya al modo de doze hasta el SIGUIENTE y repita desde el paso 3 12. terminar si 13. de lo contrario encontrar entrada en Índice Menor que apunta a los datos 14. Calcular la hora de llegada T del cubo de datos 15. Entra en modo somnífero hasta la T 16. Despierta en T y accede a los datos, encontrados = verdadero 17. fin de lo contrario 18. final si 19. final Mientras que 21 6. EVALUACIÓN DE LA EJECUCIÓN La conservación de la energía es la principal preocupación cuando tratamos de acceder a los datos de la transmisión inalámbrica. Un sistema eficiente debe permitir al dispositivo móvil acceder a los datos que necesita manteniéndose activo durante un período mínimo de tiempo. Esto ahorraría una cantidad considerable de energía. Dado que los elementos se distribuyen en función de los tipos y se asignan a ubicaciones adecuadas, argumentamos que nuestra transmisión se ocupa de los tipos de datos agrupados. La unidad móvil tiene que acceder a un índice mayor y a un índice menor relativamente menor para obtener información sobre la hora de llegada de los datos. Esto contrasta con el esquema exponencial donde los índices son de tamaños iguales. El ejemplo discutido y Algoritmo 1 revela que para acceder a cualquier dato, necesitamos acceder al índice mayor sólo una vez seguido por uno o más accesos al índice menor. El número de accesos menores al índice depende del número de ubicaciones internas. Como el número de ubicaciones internas varía de elemento a elemento (por ejemplo, Weather está generalmente asociado con una ciudad mientras que el tráfico se granula hasta las carreteras principales y menores de una ciudad), argumentamos que la estructura de la información de localización mapeada puede ser visualizada como un bosque que es una colección de árboles generales, el número de árboles generales dependiendo de los tipos de información transmitida y la profundidad de un árbol dependiendo de la granularidad de la información de Para nuestros experimentos, asumimos el bosque como una colección de árboles M-ary equilibrados. Asumimos además que los árboles de la arteria M están llenos al asumir la presencia de nodos ficticios en diferentes niveles de un árbol. Así, si el número de ítems de datos es d y la altura del árbol es m, entonces n= (m*d-1)/(m-1) donde n es el número de vértices en el árbol e i= (d-1)/(m-1) donde i es el número de vértices internos. El tiempo de afinación para un ítem de datos implica 1 unidad de tiempo requerido para acceder al índice principal más el tiempo requerido para acceder a los ítems de datos presentes en las hojas del árbol. Por lo tanto, el tiempo de sintonización con d ítems de datos es t = logmd+1 Podemos decir que el tiempo de sintonización está limitado por O(logmd). Comparamos nuestro esquema con el esquema de indexación distribuida y exponencial. Asumimos una emisión plana y el número de páginas que varían de 5000 a 25000. Los diversos parámetros de simulación se muestran en la Tabla 1. La Figura 5-8 muestra los tiempos relativos de afinación de tres algoritmos de indexación, es decir, el LBIS, esquema exponencial y el esquema de árbol distribuido. La Figura 5 muestra el resultado para el número de nodos internos de ubicación = 3. Podemos ver que LBIS supera significativamente a los otros esquemas. El tiempo de afinación en LBIS varía de aproximadamente 6,8 a 8. Este gran tiempo de afinación se debe al hecho de que después de alcanzar el índice menor más bajo, la MU puede tener que acceder a pocos cubos secuencialmente para obtener el cubo de datos requerido. Podemos ver que el tiempo de afinación tiende a ser estable a medida que aumenta la duración de la emisión. En la figura 6 se considera m= 4. Aquí podemos ver que el exponencial y el rendimiento distribuido casi de manera similar, aunque el primero parece funcionar ligeramente mejor a medida que aumenta la longitud de emisión. Un patrón muy interesante es visible en la figura 7. Para las emisiones de menor tamaño, el LBIS parece tener un tiempo de afinación mayor que los otros dos esquemas. Pero a medida que aumenta la duración de la emisión, es claramente visible que el LBIS supera a los otros dos esquemas. La indexación del árbol distribuido muestra un comportamiento similar al del LBIS. El tiempo de afinación en LBIS sigue siendo bajo porque el algoritmo permite a la MU saltarse algunos Índices Menores intermedios. Esto permite que la MU se mueva a niveles más bajos directamente después de entrar en modo activo, ahorrando así energía valiosa. Esta acción no es posible en la indexación de árboles distribuidos y por lo tanto podemos observar que su tiempo de afinación es más que el esquema LBIS, aunque tiene mejores resultados que el esquema exponencial. La Figura 8, en contraste, nos muestra que el tiempo de afinación en LBIS, aunque menor que los otros dos esquemas, tiende a aumentar bruscamente a medida que la longitud de emisión se hace mayor que las 15000 páginas. Esto puede atribuirse tanto al aumento del tiempo necesario para escanear los Índices Menores intermedios como a la duración de la emisión. Pero podemos observar que la pendiente de la curva LBIS es significativamente menor que las otras dos curvas. Tabla 1 Parámetros de simulación P Valores de definición N Número de datos Elementos 5000 - 25000 m Número de nodos de ubicación internos 3, 4, 5, 6 B Capacidad de cubo sin índice (para índice exponencial) 10,64,128,256 i Base de índice para índice exponencial 2,4,6,8 k Tamaño del índice para árbol distribuido 8 bytes Los resultados de la simulación establecen algunos hechos sobre nuestro esquema de indexación basado en la ubicación. En la mayoría de los casos, el sistema funciona mejor que los otros dos en términos de tiempo de afinación. A medida que aumenta la duración de la emisión, después de cierto punto, aunque el tiempo de afinación aumenta como resultado de factores que hemos descrito antes, el esquema siempre funciona mejor que los otros dos esquemas. Debido al límite prescrito del número de páginas en el papel, no podemos mostrar más resultados. Pero estos resultados omitidos muestran una tendencia similar a la de los resultados representados en la figura 5-8. 7. CONCLUSIÓN Y FUTURO TRABAJO En este trabajo hemos presentado un esquema para el mapeo de datos de radiodifusión inalámbrica con sus ubicaciones. Hemos presentado un ejemplo para mostrar cómo la estructura jerárquica del árbol de ubicación mapea con los datos para crear LDD. Hemos presentado un esquema llamado LBIS para indexar este LDD. Hemos utilizado la propiedad de contención de LDD en el esquema que limita la búsqueda a un estrecho rango de datos en la emisión, ahorrando así energía valiosa en el dispositivo. La asignación de datos con ubicaciones y el esquema de indexación se utilizará en nuestro proyecto DAYS para crear la arquitectura basada en empuje. El LBIS se ha comparado con otros dos sistemas de indexación prominentes, a saber, el sistema de indexación de árboles distribuidos y el sistema de indexación exponencial. En nuestras simulaciones demostramos que el esquema LBIS tiene el menor tiempo de afinación para las emisiones que tienen un gran número de páginas, ahorrando así una valiosa potencia de batería en la MU. 22 En el trabajo futuro tratamos de incorporar la arquitectura basada en el tirón en nuestro proyecto DAYS. Los datos del servidor están disponibles para el acceso de los usuarios globales. Esto se puede hacer poniendo una solicitud al servidor de origen. La consulta en este caso es una consulta global. Se transfiere del servidor de origen de los usuarios al servidor de destino mediante el uso de satélites LEO. Tenemos la intención de utilizar nuestro esquema de LDD y arquitectura de estadificación de datos en la arquitectura basada en el tirón. Demostraremos que el esquema de LDD junto con la arquitectura de estadificación de datos mejora significativamente la latencia para la consulta global y local. 8. REFERENCIAS [1] Acharya, S., Alonso, R. Franklin, M y Zdonik S. Disco de transmisión: Gestión de datos para entornos de comunicación asimétricos. En Actas de la Conferencia de la ACM SIGMOD sobre Gestión de Datos, págs. 199 a 210, San José, CA, mayo de 1995. [2] Chen, M.S.,Wu, K.L. y Yu, P. S. Optimizando la asignación de índices para la difusión secuencial de datos en la computación móvil inalámbrica. IEEE Transactions on Knowledge and Data Engineering (TKDE), 15(1):161-173, enero/febrero de 2003. Gráfico 5 Tamaño de la transmisión (# cubos) Dist tree Expo LBIS Figura 6. Tamaño de la transmisión (# cubos) Dist tree Expo LBIS Figura 7. Tamaño de la transmisión (# cubos) Dist tree Expo LBIS Figura 8. Tamaño de la transmisión (# cubos) Árbol dist Expo LBIS Tiempo medio de afinación Tiempo medio de afinación Tiempo medio de afinación 23 [3] Hu, Q. L., Lee, D. L. y Lee, W.C. Evaluación del rendimiento de un sistema inalámbrico de difusión jerárquica de datos. En Actas de la Quinta Conferencia Internacional Anual de ACM sobre Computación y Redes Móviles (MobiCom99), págs. 163 a 173, Seattle, WA, agosto de 1999. [4] Hu, Q. L. Lee, W.C. y Lee, D. L. Power consultas conservadoras de múltiples atributos en la transmisión de datos. En Actas de la 16a Conferencia Internacional sobre Ingeniería de Datos (ICDE00), páginas 157-166, San Diego, CA, febrero de 2000. [5] Imielinski, T., Viswanathan, S. y Badrinath. B. R. Filtrado eficiente de energía de los datos en el aire. En Actas de la Cuarta Conferencia Internacional sobre Tecnología de Bases de Datos Ampliadas (EDBT94), págs. 245 a 258, Cambridge, Reino Unido, marzo de 1994. [6] Imielinski, T., Viswanathan, S. y Badrinath. B. R. Datos sobre el aire - Organización y acceso. Operaciones de IEEE en Ingeniería de Conocimientos e Datos (TKDE), 9(3):353-372, mayo/junio de 1997. [7] Shih, E., Bahl, P. y Sinclair, M. J. Wake on wireless: Una estrategia de ahorro de energía impulsada por eventos para dispositivos operados por baterías. En Actas de la 8a Conferencia Internacional Anual de ACM sobre Computación y Redes Móviles (MobiCom02), págs. 160 a 171, Atlanta, GA, septiembre de 2002. [8] Shivakumar N. y Venkatasubramanian, S. Indización energéticamente eficiente para la difusión de información en sistemas inalámbricos. ACM/Baltzer Journal of Mobile Networks and Applications (MONET), 1(4):433-446, diciembre de 1996. [9] Tan K. L. y Yu, J. X. Filtración energéticamente eficiente de emisiones no uniformes. En Actas de la 16a Conferencia Internacional sobre Sistemas de Computación Distribuida (ICDCS96), págs. 520 a 527, Hong Kong, mayo de 1996. [10] Viredaz, M. A., Brakmo, L. S. y Hamburgen, W. R. Gestión de energía en dispositivos portátiles. ACM Coue, 1(7):44-52, octubre de 2003. [11] Garg, N. Kumar, V., & Dunham, M.H. Mapeo e indización de información en DAYS, 6o Taller Internacional sobre Movilidad en Bases de Datos y Sistemas Distribuidos, en conjunción con la 14a Conferencia Internacional sobre Aplicaciones de Bases de Datos y Sistemas Expertos, 1o a 5 de septiembre, Praga, República Checa, 2003. [12] Acharya D., Kumar, V., & Dunham, M.H. InfoSpace: Sistema de difusión de datos públicos híbrido y adaptativo para computación ubicua. Aceptado para publicación en el número especial de Pervasive Computing. Wiley Journal for Wireless Communications and Mobile Computing, 2004. [13] Acharya D., Kumar, V., & Prabhu, N. Descubriendo y usando Servicios Web en M-Commerce, Proceedings for 5th VLDB Workshop on Technologies for E-Services, Toronto, Canada,2004. [14] Acharya D., Kumar, V. Indexing Location Depending Data in broadcast en ambiente. Aceptado para su publicación, número especial de JDIM sobre Gestión de Datos Distribuidos, 2005. [15] Flinn, J., Sinnamohideen, S., & Satyanarayan, M. Data Staging on No Trusted Surrogates, Intel Research, Pittsburg, Unpublished Report, 2003. [16] Seydim, A.Y., Dunham, M.H. & Kumar, V. Location dependiente consulta processing, Actas del segundo taller internacional de ACM sobre ingeniería de datos para acceso inalámbrico y móvil, p.47-53, Santa Barbara, California, USA, 2001. [17] Xu, J., Lee, W.C., Tang., X. Índice exponencial: Un esquema de indexación distribuida para los datos sobre el aire. En Actas de la II Conferencia Internacional ACM/USENIX sobre Sistemas, Aplicaciones y Servicios Móviles (MobiSys04), Boston, MA, junio de 2004. 24 ",
            "error": []
        },
        "indexing scheme": {
            "translated_key": [
                "esquema de indexación",
                "plan de indexación",
                "esquema de indexación",
                "esquema de indexación",
                "esquema de indexación",
                "esquema de indexación",
                "esquema de indexación",
                "esquema de indexación",
                "esquema de indexación",
                "esquema de indexación",
                "esquema de indexación",
                "esquema de indexación",
                "sistema de indexación",
                "sistema de indexación"
            ],
            "translated_annotated_text": "Esquema de Indización basado en la ubicación para DAYS Debopam Acharya y Vijay Kumar 1 Computer Science and Informatics University of Missouri-Kansas City Kansas City, MO 64110 dargc(kumarv)@umkc.edu RESUMEN La difusión de datos a través de canales inalámbricos para transmitir información a los consumidores se está volviendo bastante común. Se han propuesto muchos planes de difusión, pero la mayoría de ellos llevan los datos a canales inalámbricos para consumo general. La difusión basada en push [1] es esencialmente asimétrica, es decir, el volumen de datos es mayor desde el servidor a los usuarios que desde los usuarios de vuelta al servidor. El esquema basado en el empuje requiere una indexación que indica cuándo se transmitirán los datos y su posición en la emisión. Latencia de acceso y tiempo de afinación son los dos parámetros principales que se pueden utilizar para evaluar un \"esquema de indexación\". Dos de los importantes esquemas de indexación propuestos anteriormente se basaban en los árboles y los esquemas de indexación exponencial. Ninguno de estos planes pudo satisfacer los requisitos de los datos dependientes de la ubicación (DDL), que es una característica muy deseable de la difusión de datos. En este artículo, discutimos la emisión de LDD en nuestro proyecto DAta in Your Space (DAYS), y proponemos un esquema para la indexación de LDD. Argumentamos que este sistema, cuando se aplica a la DDTS, mejora significativamente el rendimiento en términos de tiempo de afinación en los esquemas antes mencionados. Demostramos nuestro argumento con la ayuda de resultados de simulación. Categorías y Descriptores sujetos H.3.1 [Sistemas de información]: Almacenamiento y recuperación de información - análisis e indexación de contenido; H.3.3 [Sistemas de información]: Almacenamiento y recuperación de información - búsqueda y recuperación de información. Términos generales Algoritmos, Rendimiento, Experimentación 1. INTRODUCCIÓN La difusión inalámbrica de datos es una forma económica y eficiente de poner los datos deseados a disposición de un gran número de usuarios móviles o estáticos. El modo de transferencia de datos es esencialmente asimétrico, es decir, la capacidad de transferencia de datos (comunicación descendente) del servidor al cliente (usuario móvil) es significativamente mayor que el cliente o usuario móvil al servidor (comunicación ascendente). La eficacia de un sistema de difusión de datos se determina por su capacidad para proporcionar a los usuarios los datos requeridos en cualquier lugar y en cualquier momento. Una de las mejores maneras de lograr esto es a través de la difusión de servicios basados en la ubicación altamente personalizados (LBS) que permite a los usuarios acceder a datos dependientes de la ubicación personalizada. Un ejemplo sería alguien usando su dispositivo móvil para buscar un restaurante vegetariano. La aplicación LBS interactuaría con otros componentes de tecnología de localización o utilizaría la entrada de usuarios móviles para determinar la ubicación de los usuarios y descargar la información sobre los restaurantes cercanos al usuario sintonizando el canal inalámbrico que está difundiendo LDD. Vemos un despliegue limitado de LBS por parte de algunos proveedores de servicios. Pero hay todos los indicios de que con el tiempo se resolverán algunos de los complejos problemas técnicos, como el marco de localización uniforme, el cálculo y el seguimiento de ubicaciones en todo tipo de lugares, el posicionamiento en diversos entornos, aplicaciones de localización innovadoras, etc., y LBS se convertirá en una instalación común y ayudará a mejorar la productividad del mercado y el confort del cliente. En nuestro proyecto llamado DAYS, utilizamos el mecanismo de difusión de datos inalámbricos para impulsar LDD a los usuarios y usuarios móviles monitorear y sintonizar el canal para encontrar y descargar los datos requeridos. Sin embargo, es probable que una emisión simple cause una degradación significativa del rendimiento de los dispositivos móviles con limitaciones energéticas, y una solución común a este problema es el uso de una indexación eficiente del aire. El enfoque de indexación almacena información de control que informa al usuario sobre la ubicación de los datos en la emisión y cómo y cuándo pudo acceder a ella. Un usuario móvil, por lo tanto, tiene un poco de tiempo libre para entrar en el modo de somnífero que conserva valiosa energía. También permite al usuario personalizar su propio dispositivo móvil afinando selectivamente la información de su elección. La eficiencia del acceso y la conservación de la energía son las dos cuestiones importantes para los sistemas de radiodifusión de datos. La eficiencia de acceso se refiere a la latencia experimentada cuando se inicia una solicitud hasta que se recibe la respuesta. Conservación de la energía [7, 10] se refiere al uso eficiente de la energía limitada del dispositivo móvil para acceder a los datos de radiodifusión. Dos parámetros que afectan a estos son el tiempo de afinación y la latencia de acceso. El tiempo de sintonización se refiere al tiempo durante el cual la unidad móvil (MU) permanece en estado activo para sintonizar el canal y descargar los datos requeridos. También se puede definir como el número de cubos sintonizados por el dispositivo móvil en estado activo para obtener los datos requeridos. La latencia de acceso puede definirse como el tiempo transcurrido desde que se ha emitido una solicitud hasta que se ha recibido la respuesta. 1 Esta investigación fue apoyada por una subvención de NSF IIS-0209170. En el pasado se han propuesto varios esquemas de indexación, entre los que destacan los basados en árboles y los esquemas de indexación exponencial [17]. Las principales desventajas de los esquemas basados en árboles son que se basan en estructuras arbóreas centralizadas. Para iniciar una búsqueda, la MU tiene que esperar hasta que llegue a la raíz del siguiente árbol de transmisión. Esto afecta significativamente el tiempo de afinación de la unidad móvil. Los esquemas exponenciales facilitan la replicación de índices compartiendo enlaces en diferentes árboles de búsqueda. Para las emisiones con un gran número de páginas, se ha demostrado que el esquema exponencial funciona de manera similar a los esquemas basados en árboles en términos de latencia de acceso. Además, la duración media de la emisión aumenta debido a la replicación del índice y esto puede causar un aumento significativo de la latencia del acceso. Ninguno de los sistemas de indexación mencionados es igualmente eficaz en la difusión de datos dependientes de la ubicación. Además de proporcionar baja latencia, carecen de propiedades que se utilizan para abordar los problemas de DDT. Proponemos un \"plan de indexación\" en DAYS que se ocupa de algunos de estos problemas. Demostramos con resultados de simulación que nuestro esquema supera a algunos de los esquemas de indexación anteriores para la difusión de LDD en términos de tiempo de afinación. El resto del documento se presenta de la siguiente manera. En la sección 2, se analiza el trabajo anterior relacionado con la indexación de los datos de radiodifusión. La sección 3 describe nuestra arquitectura DAYS. Los datos dependientes de la ubicación, su generación y su posterior difusión se presentan en la sección 4. En la sección 5 se analiza en detalle nuestro \"esquema de indexación\". La simulación de nuestro esquema y su evaluación del desempeño se presenta en la sección 6. En la sección 7 se concluye el documento y se menciona la labor futura relacionada. 2. TRABAJO ANTERIOR Varias técnicas de indexación basadas en discos se han utilizado para la indexación de aire. Imielinski et al. [5, 6] aplicó el árbol del índice B+, donde los nodos de la hoja almacenan los tiempos de llegada de los ítems de datos. Se propuso el método de indexación distribuida para reproducir y distribuir eficientemente el árbol de índices en una emisión. Específicamente, el árbol índice se divide en una parte replicada y una parte no replicada. Cada emisión consiste en la parte replicada y la parte no replicada que indiza los elementos de datos inmediatamente después de ella. Como tal, cada nodo en la parte no replicada aparece sólo una vez en una emisión y, por lo tanto, reduce el costo de replicación y latencia de acceso, al tiempo que logra un buen tiempo de afinación. Chen et al. [2] y Shivakumar et al. [8] considera estructuras de árboles desequilibradas para optimizar el consumo de energía para el acceso a datos no uniformes. Estas estructuras minimizan el costo medio de búsqueda de índices reduciendo el número de búsquedas de datos en caliente a expensas de gastar más en datos en frío. Tan y Yu discutieron la organización de datos e índices bajo la emisión sesgada También se han sugerido métodos de Hashing y firma para la transmisión inalámbrica que admite consultas de igualdad [9]. En [5] se propuso un método flexible de indización. El índice flexible primero clasifica los elementos de datos en orden ascendente (o descendente) de los valores clave de búsqueda y luego los divide en segmentos p. El primer cubo en cada segmento de datos contiene un índice de control, que es un índice binario que asigna un valor clave dado al segmento que contiene esa clave, y un índice local, que es un índice de entrada m que asigna un valor clave dado a los cubos dentro del segmento actual. Al afinar los parámetros de p y m, los clientes móviles pueden lograr un buen tiempo de afinación o una buena latencia de acceso. Otra técnica de indexación propuesta es el \"esquema de indexación\" exponencial [17]. En este esquema, se utiliza un índice parametrizado, llamado índice exponencial, para optimizar la latencia del acceso o el tiempo de afinación. Facilita la replicación de índices mediante la vinculación de diferentes árboles de búsqueda. Todos los regímenes mencionados se han aplicado a datos que no están relacionados entre sí. Estos datos no relacionados pueden agruparse o no agruparse. Sin embargo, ninguno de ellos se ha ocupado específicamente de los requisitos de la DDT. Los datos dependientes de la ubicación son datos que están asociados con una ubicación. En la actualidad hay varias aplicaciones que se ocupan de la DDTS [13, 16]. Casi todos ellos representan LDD con la ayuda de estructuras jerárquicas [3, 4]. Esto se basa en la propiedad de contención de datos dependientes de la ubicación. La propiedad Containment ayuda a determinar la posición relativa de un objeto definiendo o identificando ubicaciones que contienen esos objetos. Las ubicaciones subordinadas están jerárquicamente relacionadas entre sí. Así, la propiedad Containment limita la gama de disponibilidad u operación de un servicio. Usamos esta propiedad de contención en nuestro \"esquema de indexación\" para indexar LDD. 3. DAYS ARCHITECTURE DAYS se ha conceptualizado para difundir datos tópicos y no tópicos a los usuarios en un espacio de difusión local y para aceptar consultas de usuarios individuales a nivel mundial. Los datos tópicos, por ejemplo, información meteorológica, información de tráfico, información de existencias, etc., cambian constantemente con el tiempo. Los datos no tópicos como hotel, restaurante, precios inmobiliarios, etc., no cambian tan a menudo. Así, imaginamos la presencia de dos tipos de distribución de datos: En el primer caso, el servidor empuja los datos a los usuarios locales a través de canales inalámbricos. El otro caso se refiere al servidor que envía los resultados de las consultas de los usuarios a través de canales inalámbricos de enlace descendente. Técnicamente, vemos la presencia de dos tipos de colas en el acceso basado en datos. Una es una cola muy cargada que contiene consultas cargadas globalmente. La otra es una cola relativamente ligera que consiste en consultas subidas localmente. La arquitectura DAYS [12], como se muestra en la figura 1, consiste en un servidor de datos, programador de transmisiones, coordinador de DAYS, red de satélites LEO para la entrega de datos a nivel mundial y un espacio de transmisión local. Los datos se introducen en el espacio de transmisión local para que los usuarios puedan sintonizarse con los canales inalámbricos para acceder a los datos. El espacio de transmisión local consiste en una torre de transmisión, unidades móviles y una red de máquinas de puesta en escena de datos llamadas subrogados. La estadificación de datos en sustitutos se ha investigado anteriormente como una técnica exitosa [12, 15] para los datos relacionados con los usuarios de caché. Creemos que la estadificación de datos se puede utilizar para reducir drásticamente el tiempo de latencia tanto para los datos de radiodifusión local como para las respuestas globales. La solicitud de consulta en los sustitutos puede utilizarse posteriormente para generar los patrones de popularidad que finalmente deciden el horario de emisión [12]. 18 Popularidad Comentarios de Surrogates for Broadcast Scheduler Local Space Broadcast Tower SurrogateMU MU MU Servidor de datosHorario de radiodifusiónDÍAS Coordinador Canal local de enlace descendente Canal global de enlace descendente Pull request cola cola Solicitud global cola Solicitud local cola Ubicación índice basado en Starbucks Plaza Kansas City Figura 1. Arquitectura DAYS Figura 2. Ubicación Estructura deStarbucks, Plaza 4. DATOS DEPENDIENTES DE LOCALIZACIÓN (LDD) Argumentamos que la incorporación de información de ubicación en la transmisión inalámbrica de datos puede disminuir significativamente la latencia de acceso. Esta propiedad se convierte en muy útil para la unidad móvil que tiene capacidad de almacenamiento y procesamiento limitada. Hay una variedad de aplicaciones para obtener información sobre tráfico, reservas de restaurantes y hoteles, comida rápida, gasolineras, oficina de correos, tiendas de comestibles, etc. Si estas aplicaciones se combinan con información de ubicación, entonces la búsqueda será rápida y altamente rentable. Una propiedad importante de las ubicaciones es Containment que ayuda a determinar la ubicación relativa de un objeto con respecto a su padre que contiene el objeto. Por lo tanto, Containment limita el rango de disponibilidad de un dato. Usamos esta propiedad en nuestro \"esquema de indexación\". La base de datos contiene los contenidos transmitidos que se convierten en LDD [14] asociándolos con las ubicaciones respectivas para que puedan transmitirse de manera agrupada. El agrupamiento de LDD ayuda al usuario a localizar la información de manera eficiente y soporta la propiedad de contención. Presentamos un ejemplo para justificar nuestra propuesta. Ejemplo: Supongamos que un usuario emite una consulta Starbucks Coffee en Plaza por favor. para acceder a información sobre la sucursal Plaza de Starbucks Coffee en Kansas City. En el caso de la ubicación independiente establecido el sistema enumerará todas las cafeterías Starbucks en el área de Kansas City. Es evidente que esas respuestas aumentarán la latencia del acceso y no son deseables. Estos se pueden administrar de manera eficiente si el servidor tiene datos dependientes de la ubicación, es decir, una asignación entre los datos de una cafetería de Starbucks y su ubicación física. Además, para una consulta que incluya el rango de ubicaciones de Starbucks, bastará con una sola consulta solicitando ubicaciones para toda la región de Kansas City, como se muestra en la Figura 2. Esto ahorrará una enorme cantidad de ancho de banda al disminuir el número de mensajes y, al mismo tiempo, será útil para prevenir el cuello de botella de escalabilidad en una zona muy poblada. 4.1 Función de asignación para LDD El ejemplo justifica la necesidad de una función de asignación para procesar consultas dependientes de la ubicación. Esto será especialmente importante para las consultas basadas en la atracción en todo el mundo para las cuales la respuesta podría estar compuesta para diferentes partes del mundo. La función de mapeo es necesaria para construir el horario de emisión. Definimos Global Property Set (GPS) [11], Information Content (IC) set, and Location Jerarchy (LH) set where IC  GPS and LH  GPS to develop a mapping function. LH = {l1, l2, l3...,lk} donde li representan ubicaciones en el árbol de ubicación y IC = {ic1, ic2, ic3,...,icn} donde ici representan tipo de información. Por ejemplo, si tenemos tráfico, tiempo, y la información de stock están en transmisión entonces IC = {ictráfico, icweather, e icstock}. El esquema de asignación debe ser capaz de identificar y seleccionar un miembro IC y un nodo LH para (a) asociación correcta, (b) coincidencia de granularidad, (c) y condición de terminación. Por ejemplo, el clima • IC podría estar asociado con un país o un estado o una ciudad o un pueblo de LH. La coincidencia de granularidad entre el tiempo y un nodo LH es según el requisito del usuario. Así, con una granularidad gruesa la información meteorológica se asocia con un país para obtener el clima de los países y con la ciudad en una granularidad más fina. Si una ciudad es la mejor granularidad, entonces define la condición terminal para la asociación entre IC y LH para el tiempo. Esto significa que un usuario no puede obtener información meteorológica sobre la subdivisión de una ciudad. En realidad, el clima de una subdivisión no tiene ningún sentido. Desarrollamos un simple esquema de mapeo heurístico basado en las necesidades del usuario. Dejar IC = {m1, m2,m3.,..., mk}, donde mi representa su elemento y dejar LH = {n1, n2, n3,..., nl}, donde ni representa miembro LHs. Definimos GPS para IC (GPSIC)  GPS y para LH (GPSLH)  GPS como GPSIC = {P1, P2,..., Pn}, donde P1, P2, P3,..., Pn son propiedades de sus miembros y GPSLH = {Q1, Q2,..., Qm} donde Q1, Q2,..., Qm son propiedades de sus miembros. Las propiedades de un miembro particular de IC son un subconjunto de GPSIC. Generalmente es cierto que (conjunto de propiedades (miÃ3n IC) â € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € Por ejemplo, stock • IC y película • IC calificación no tienen ninguna propiedad en común. Asumimos que dos o más miembros del CI tienen al menos una propiedad geográfica común (es decir, lugar) porque DAYS transmite información sobre esas categorías, que están estrechamente vinculadas con un lugar. Por ejemplo, las acciones de una empresa están relacionadas con un país, el clima está relacionado con una ciudad o estado, etc. Definimos el subconjunto de propiedades de mio IC como PSm i ♥ mi • IC y PSm i = {P1, P2,..., Pr} donde r ≤ n. • Pr {Pr • PSm i → Pr • GPSIC} que implica que • i, PSm i  GPSIC. Las propiedades geográficas de este conjunto son indicativas de si mi IC puede ser mapeado a un solo nivel de granularidad (es decir. una sola ubicación) en LH o varios niveles de granularidad (es decir, más de un nodo en 19 de la jerarquía) en LH. ¿Cuántos y qué niveles de granularidad debe un mapa mi, depende del nivel en el que el proveedor de servicios quiere proporcionar información sobre el mi en cuestión. Del mismo modo, definimos un subconjunto de propiedades de los miembros de LH como PSn j Ł nj Ł LH que puede ser escrito como PSn j ={Q1, Q2, Q3,..., Qs} donde s ≤ m. Además, El proceso de mapeo de IC a LH es entonces identificar para algunos mxÃ3 IC uno o mÃ¡s nyÃ3 LH tal que PSmx Ã3 PSnv Esto significa que cuando mx mapea a ny y a todos los niños de ny si mx puede mapear a múltiples niveles de granularidad o mx mapea sólo a ny si mx puede mapear a un solo nivel de granularidad. Asumimos que los nuevos miembros pueden unirse y los antiguos miembros pueden salir de IC o LH en cualquier momento. La eliminación de miembros del espacio del CI es simple, pero la adición de miembros al espacio del CI es más restrictiva. Si queremos añadir un nuevo miembro al espacio IC, primero definimos un conjunto de propiedades para el nuevo miembro: PSmnew_m ={P1, P2, P3,..., Pt} y lo añadimos al CI sólo si la condición: Este régimen tiene una ventaja adicional al permitir a los proveedores de servicios de información controlar el tipo de información que desean proporcionar a los usuarios. Presentamos el siguiente ejemplo para ilustrar el concepto de mapeo. IC = {Tráfico, Stock, Restaurante, Tiempo, Fechas importantes de la historia, Condiciones de la carretera} LH = {País, Estado, Ciudad, Código postal, Principales carreteras} GPSIC = {Surface-mobility, Roads, High, Low, Italian-food, StateName, Temp, CityName, Seat-disponibilidad, Zip, Traffic-jams, Además, PS(ICStock) indicó que Stock solo puede mapear a un solo país. Cuando consideramos el miembro Tráfico del espacio IC, sólo PS(ICTraffic) â € ¢ PScity â € TM. Como PS(ICTRAFFIC) indica que Traffic puede mapear a una sola ubicación, solo mapea a City y a ninguno de sus hijos. Ahora bien, a diferencia de Stock, el mapeo del tráfico con las principales carreteras, que es un hijo de la ciudad, es significativo. Sin embargo, los proveedores de servicios tienen derecho a controlar los niveles de granularidad a los que desean proporcionar información sobre un miembro del espacio IC. PS(ICRoad conditions) • PSState  y PS(ICRoad conditions) • PSCity. Así que las condiciones de la carretera son mapas al Estado, así como a la ciudad. Como PS(ICRoad conditions) indica que las condiciones de la carretera pueden mapear a múltiples niveles de granularidad, las condiciones de la carretera también mapearán a Zip Code y las principales carreteras, que son los niños del Estado y la ciudad. Del mismo modo, los mapas del restaurante sólo al código postal, y los mapas meteorológicos al estado, la ciudad y sus hijos, las carreteras principales y el código postal. 5. ESQUEMA DE INDEXACIÓN BASADA EN LOCALIZACIÓN Esta sección discute nuestro \"esquema de indexación\" basado en la ubicación (LBIS). El esquema está diseñado para ajustarse a la emisión LDD en nuestro proyecto DAYS. Como se discutió anteriormente, utilizamos la propiedad de contención de LDD en el \"esquema de indexación\". Esto limita significativamente la búsqueda de nuestros datos requeridos a una parte particular de la transmisión. Por lo tanto, argumentamos que el esquema proporciona tiempo de afinación limitado. Describimos la arquitectura de nuestro \"esquema de indexación\". Nuestro esquema contiene cubos de datos separados y cubos de índices. Los cubos de índice son de dos tipos. El primer tipo se llama el índice Mayor. El índice Major proporciona información sobre los tipos de datos transmitidos. Por ejemplo, si tenemos la intención de transmitir información como Entretenimiento, Tiempo, Tráfico, etc., entonces el índice principal apunta a estos tipos principales de información y/o sus principales subtipos de información, el número de subtipos principales variando de una información a otra. Esto limita estrictamente el número de accesos a un índice principal. El índice Major nunca apunta a los datos originales. Señala a los subíndices llamados el índice Menor. Los índices menores son los índices que realmente apuntan a los datos originales. Llamamos a estos indicadores menores como punteros de ubicación, ya que apunta a los datos que están asociados con una ubicación. Por lo tanto, nuestra búsqueda de datos incluye el acceso a un índice mayor y algunos índices menores, el número de índice menor variando dependiendo del tipo de información. Por lo tanto, nuestro \"esquema de indexación\" tiene en cuenta la naturaleza jerárquica del LDD, la propiedad Containment, y requiere que nuestro programa de emisión se agrupe en función del tipo de datos y la ubicación. La estructura de la jerarquía de ubicación requiere el uso de diferentes tipos de índice en diferentes niveles. La estructura y las posiciones del índice dependen estrictamente de la jerarquía de ubicación descrita anteriormente en nuestro esquema de asignación. Ilustramos la implementación de nuestro esquema con un ejemplo. Posteriormente se mencionan las normas para la elaboración del índice. 20 A1 Entretenimiento Restaurante Película A2 A3 A4 R1 R2 R3 R4 R5 R6 R7 R8 Tiempo KC SL JC SF Entretenimiento R1 R2 R3 R4 R4 R5 R6 R7 R8 KC SL JC SF (A, R, NEXT = 8) 3, R5 4, R7 Tipo (S, L) ER W E EM (1, 4) (5, Información cartográfica de ubicación para radiodifusión Figura 4. Datos junto con el índice basado en la ubicación Ejemplo: Supongamos que nuestro contenido de transmisión contiene ICentertainment y ICweather que se representa como se muestra en la Fig. 3. Ai representa las áreas de la ciudad y Ri representa las carreteras en un área determinada. Las hojas de la estructura meteorológica representan cuatro ciudades. La estructura del índice se indica en la Fig. 4 que muestra la posición del índice mayor y menor y los datos en el horario de emisión. Proponemos las siguientes reglas para la creación del programa de emisión indexado por aire: • Se crean el índice mayor y el índice menor. • El índice principal contiene la posición y el rango de diferentes tipos de ítems de datos (Weather and Entertainment, Figura 3) y sus categorías. Las subcategorías de Entretenimiento, Cine y Restaurante, también están en el índice. Así, el índice principal contiene Entretenimiento (E), Entretenimiento-Movie (EM), Entretenimiento-Restaurante (ER), y Tiempo (W). La tupla (S, L) representa la posición inicial (S) del elemento de datos y L representa el rango del elemento en términos de número de cubos de datos. • El índice menor contiene las variables A, R y un puntero Siguiente. En nuestro ejemplo (Figura 3), la carretera R representa el primer nodo del área A. El índice menor se utiliza para apuntar a cubos de datos reales presentes en los niveles más bajos de la jerarquía. En cambio, el índice principal apunta a una gama más amplia de ubicaciones, por lo que contiene información sobre las principales y subcategorías de datos. • La información del índice no se incorpora en los cubos de datos. Los cubos de índice están separados que contienen sólo la información de control. • El número de cubos índice m=#(IC), IC = {ic1, ic2, ic3,...,icn} donde ici representa el tipo de información y # representa la cardinalidad del conjunto de contenido de información IC. En este ejemplo, IC= {icMovie, icWeather, icRestaurant} y así #(IC) =3. Por lo tanto, el número de cubos índice principales es 3. • El mecanismo para resolver la consulta está presente en el coordinador de java en MU. Por ejemplo, si una consulta Q se presenta como Q (Entretenimiento, Película, Road_1), entonces la búsqueda resultante será para la información EM en el índice principal. Nosotros decimos, Q EM. Nuestro índice propuesto funciona de la siguiente manera: Supongamos que una MU emite una consulta que está representada por Java Coordinador presente en la MU como información de restaurante en la carretera 7. Esto es resuelto por el coordinador como Q ER. Esto significa que uno tiene que buscar la unidad de índice ER en el índice principal. Supongamos que el MU entra en el canal en R2. El primer índice que recibe es un índice menor después de R2. En este índice, el valor de la variable Siguiente = 4, lo que significa que el siguiente índice mayor está presente después del cubo 4. La MU puede entrar en modo somnoliento. Se activa después del cubo 4 y recibe el índice principal. Busca información de ER que es la primera entrada en este índice. Ahora es seguro que la MU obtendrá la posición del cubo de datos en el índice menor contiguo. La segunda unidad en el índice menor representa la posición de los datos requeridos R7. Indica que el cubo de datos es el primer cubo en el Área 4. El MU vuelve a entrar en modo somnífero y se activa después del cubo 6. Obtiene los datos necesarios en el siguiente cubo. Presentamos el algoritmo para buscar el Índice basado en la ubicación. Algoritmo 1 Índice basado en la ubicación Buscar en DAYS 1. Escanear la transmisión para el siguiente cubo índice, encontrado=falso 2. Mientras que (no se encuentra) hacer 3. si cubo es el índice mayor entonces 4. Encuentra el Tipo & Tupla (S, L) 5. si S es mayor que 1, entra en modo Doze durante S segundos 6. termina si 7. Despierta en el cubo Sth y observa el índice menor 8. termina si 9. si el cubo es índice menor entonces 10. si TypeRequest no es igual a Typefound y (A,R)Solicitud no es igual a (A,R)found entonces 11. Vaya al modo de doze hasta el SIGUIENTE y repita desde el paso 3 12. terminar si 13. de lo contrario encontrar entrada en Índice Menor que apunta a los datos 14. Calcular la hora de llegada T del cubo de datos 15. Entra en modo somnífero hasta la T 16. Despierta en T y accede a los datos, encontrados = verdadero 17. fin de lo contrario 18. final si 19. final Mientras que 21 6. EVALUACIÓN DE LA EJECUCIÓN La conservación de la energía es la principal preocupación cuando tratamos de acceder a los datos de la transmisión inalámbrica. Un sistema eficiente debe permitir al dispositivo móvil acceder a los datos que necesita manteniéndose activo durante un período mínimo de tiempo. Esto ahorraría una cantidad considerable de energía. Dado que los elementos se distribuyen en función de los tipos y se asignan a ubicaciones adecuadas, argumentamos que nuestra transmisión se ocupa de los tipos de datos agrupados. La unidad móvil tiene que acceder a un índice mayor y a un índice menor relativamente menor para obtener información sobre la hora de llegada de los datos. Esto contrasta con el esquema exponencial donde los índices son de tamaños iguales. El ejemplo discutido y Algoritmo 1 revela que para acceder a cualquier dato, necesitamos acceder al índice mayor sólo una vez seguido por uno o más accesos al índice menor. El número de accesos menores al índice depende del número de ubicaciones internas. Como el número de ubicaciones internas varía de elemento a elemento (por ejemplo, Weather está generalmente asociado con una ciudad mientras que el tráfico se granula hasta las carreteras principales y menores de una ciudad), argumentamos que la estructura de la información de localización mapeada puede ser visualizada como un bosque que es una colección de árboles generales, el número de árboles generales dependiendo de los tipos de información transmitida y la profundidad de un árbol dependiendo de la granularidad de la información de Para nuestros experimentos, asumimos el bosque como una colección de árboles M-ary equilibrados. Asumimos además que los árboles de la arteria M están llenos al asumir la presencia de nodos ficticios en diferentes niveles de un árbol. Así, si el número de ítems de datos es d y la altura del árbol es m, entonces n= (m*d-1)/(m-1) donde n es el número de vértices en el árbol e i= (d-1)/(m-1) donde i es el número de vértices internos. El tiempo de afinación para un ítem de datos implica 1 unidad de tiempo requerido para acceder al índice principal más el tiempo requerido para acceder a los ítems de datos presentes en las hojas del árbol. Por lo tanto, el tiempo de sintonización con d ítems de datos es t = logmd+1 Podemos decir que el tiempo de sintonización está limitado por O(logmd). Comparamos nuestro esquema con el esquema de indexación distribuida y exponencial. Asumimos una emisión plana y el número de páginas que varían de 5000 a 25000. Los diversos parámetros de simulación se muestran en la Tabla 1. La Figura 5-8 muestra los tiempos relativos de afinación de tres algoritmos de indexación, es decir, el LBIS, esquema exponencial y el esquema de árbol distribuido. La Figura 5 muestra el resultado para el número de nodos internos de ubicación = 3. Podemos ver que LBIS supera significativamente a los otros esquemas. El tiempo de afinación en LBIS varía de aproximadamente 6,8 a 8. Este gran tiempo de afinación se debe al hecho de que después de alcanzar el índice menor más bajo, la MU puede tener que acceder a pocos cubos secuencialmente para obtener el cubo de datos requerido. Podemos ver que el tiempo de afinación tiende a ser estable a medida que aumenta la duración de la emisión. En la figura 6 se considera m= 4. Aquí podemos ver que el exponencial y el rendimiento distribuido casi de manera similar, aunque el primero parece funcionar ligeramente mejor a medida que aumenta la longitud de emisión. Un patrón muy interesante es visible en la figura 7. Para las emisiones de menor tamaño, el LBIS parece tener un tiempo de afinación mayor que los otros dos esquemas. Pero a medida que aumenta la duración de la emisión, es claramente visible que el LBIS supera a los otros dos esquemas. La indexación del árbol distribuido muestra un comportamiento similar al del LBIS. El tiempo de afinación en LBIS sigue siendo bajo porque el algoritmo permite a la MU saltarse algunos Índices Menores intermedios. Esto permite que la MU se mueva a niveles más bajos directamente después de entrar en modo activo, ahorrando así energía valiosa. Esta acción no es posible en la indexación de árboles distribuidos y por lo tanto podemos observar que su tiempo de afinación es más que el esquema LBIS, aunque tiene mejores resultados que el esquema exponencial. La Figura 8, en contraste, nos muestra que el tiempo de afinación en LBIS, aunque menor que los otros dos esquemas, tiende a aumentar bruscamente a medida que la longitud de emisión se hace mayor que las 15000 páginas. Esto puede atribuirse tanto al aumento del tiempo necesario para escanear los Índices Menores intermedios como a la duración de la emisión. Pero podemos observar que la pendiente de la curva LBIS es significativamente menor que las otras dos curvas. Tabla 1 Parámetros de simulación P Valores de definición N Número de datos Elementos 5000 - 25000 m Número de nodos de ubicación internos 3, 4, 5, 6 B Capacidad de cubo sin índice (para índice exponencial) 10,64,128,256 i Base del índice para índice exponencial 2,4,6,8 k Tamaño del índice para árbol distribuido 8 bytes Los resultados de la simulación establecen algunos hechos sobre nuestro \"esquema de indexación\" basado en la ubicación. En la mayoría de los casos, el sistema funciona mejor que los otros dos en términos de tiempo de afinación. A medida que aumenta la duración de la emisión, después de cierto punto, aunque el tiempo de afinación aumenta como resultado de factores que hemos descrito antes, el esquema siempre funciona mejor que los otros dos esquemas. Debido al límite prescrito del número de páginas en el papel, no podemos mostrar más resultados. Pero estos resultados omitidos muestran una tendencia similar a la de los resultados representados en la figura 5-8. 7. CONCLUSIÓN Y FUTURO TRABAJO En este trabajo hemos presentado un esquema para el mapeo de datos de radiodifusión inalámbrica con sus ubicaciones. Hemos presentado un ejemplo para mostrar cómo la estructura jerárquica del árbol de ubicación mapea con los datos para crear LDD. Hemos presentado un esquema llamado LBIS para indexar este LDD. Hemos utilizado la propiedad de contención de LDD en el esquema que limita la búsqueda a un estrecho rango de datos en la emisión, ahorrando así energía valiosa en el dispositivo. La asignación de datos con ubicaciones y el \"esquema de indexación\" se utilizará en nuestro proyecto DAYS para crear la arquitectura basada en empuje. El LBIS se ha comparado con otros dos sistemas de indexación prominentes, es decir, el \"sistema de indexación\" de árboles distribuidos y el \"sistema de indexación\" exponencial. En nuestras simulaciones demostramos que el esquema LBIS tiene el menor tiempo de afinación para las emisiones que tienen un gran número de páginas, ahorrando así una valiosa potencia de batería en la MU. 22 En el trabajo futuro tratamos de incorporar la arquitectura basada en el tirón en nuestro proyecto DAYS. Los datos del servidor están disponibles para el acceso de los usuarios globales. Esto se puede hacer poniendo una solicitud al servidor de origen. La consulta en este caso es una consulta global. Se transfiere del servidor de origen de los usuarios al servidor de destino mediante el uso de satélites LEO. Tenemos la intención de utilizar nuestro esquema de LDD y arquitectura de estadificación de datos en la arquitectura basada en el tirón. Demostraremos que el esquema de LDD junto con la arquitectura de estadificación de datos mejora significativamente la latencia para la consulta global y local. 8. REFERENCIAS [1] Acharya, S., Alonso, R. Franklin, M y Zdonik S. Disco de transmisión: Gestión de datos para entornos de comunicación asimétricos. En Actas de la Conferencia de la ACM SIGMOD sobre Gestión de Datos, págs. 199 a 210, San José, CA, mayo de 1995. [2] Chen, M.S.,Wu, K.L. y Yu, P. S. Optimizando la asignación de índices para la difusión secuencial de datos en la computación móvil inalámbrica. IEEE Transactions on Knowledge and Data Engineering (TKDE), 15(1):161-173, enero/febrero de 2003. Gráfico 5 Tamaño de la transmisión (# cubos) Dist tree Expo LBIS Figura 6. Tamaño de la transmisión (# cubos) Dist tree Expo LBIS Figura 7. Tamaño de la transmisión (# cubos) Dist tree Expo LBIS Figura 8. Tamaño de la transmisión (# cubos) Árbol dist Expo LBIS Tiempo medio de afinación Tiempo medio de afinación Tiempo medio de afinación 23 [3] Hu, Q. L., Lee, D. L. y Lee, W.C. Evaluación del rendimiento de un sistema inalámbrico de difusión jerárquica de datos. En Actas de la Quinta Conferencia Internacional Anual de ACM sobre Computación y Redes Móviles (MobiCom99), págs. 163 a 173, Seattle, WA, agosto de 1999. [4] Hu, Q. L. Lee, W.C. y Lee, D. L. Power consultas conservadoras de múltiples atributos en la transmisión de datos. En Actas de la 16a Conferencia Internacional sobre Ingeniería de Datos (ICDE00), páginas 157-166, San Diego, CA, febrero de 2000. [5] Imielinski, T., Viswanathan, S. y Badrinath. B. R. Filtrado eficiente de energía de los datos en el aire. En Actas de la Cuarta Conferencia Internacional sobre Tecnología de Bases de Datos Ampliadas (EDBT94), págs. 245 a 258, Cambridge, Reino Unido, marzo de 1994. [6] Imielinski, T., Viswanathan, S. y Badrinath. B. R. Datos sobre el aire - Organización y acceso. Operaciones de IEEE en Ingeniería de Conocimientos e Datos (TKDE), 9(3):353-372, mayo/junio de 1997. [7] Shih, E., Bahl, P. y Sinclair, M. J. Wake on wireless: Una estrategia de ahorro de energía impulsada por eventos para dispositivos operados por baterías. En Actas de la 8a Conferencia Internacional Anual de ACM sobre Computación y Redes Móviles (MobiCom02), págs. 160 a 171, Atlanta, GA, septiembre de 2002. [8] Shivakumar N. y Venkatasubramanian, S. Indización energéticamente eficiente para la difusión de información en sistemas inalámbricos. ACM/Baltzer Journal of Mobile Networks and Applications (MONET), 1(4):433-446, diciembre de 1996. [9] Tan K. L. y Yu, J. X. Filtración energéticamente eficiente de emisiones no uniformes. En Actas de la 16a Conferencia Internacional sobre Sistemas de Computación Distribuida (ICDCS96), págs. 520 a 527, Hong Kong, mayo de 1996. [10] Viredaz, M. A., Brakmo, L. S. y Hamburgen, W. R. Gestión de energía en dispositivos portátiles. ACM Coue, 1(7):44-52, octubre de 2003. [11] Garg, N. Kumar, V., & Dunham, M.H. Mapeo e indización de información en DAYS, 6o Taller Internacional sobre Movilidad en Bases de Datos y Sistemas Distribuidos, en conjunción con la 14a Conferencia Internacional sobre Aplicaciones de Bases de Datos y Sistemas Expertos, 1o a 5 de septiembre, Praga, República Checa, 2003. [12] Acharya D., Kumar, V., & Dunham, M.H. InfoSpace: Sistema de difusión de datos públicos híbrido y adaptativo para computación ubicua. Aceptado para publicación en el número especial de Pervasive Computing. Wiley Journal for Wireless Communications and Mobile Computing, 2004. [13] Acharya D., Kumar, V., & Prabhu, N. Descubriendo y usando Servicios Web en M-Commerce, Proceedings for 5th VLDB Workshop on Technologies for E-Services, Toronto, Canada,2004. [14] Acharya D., Kumar, V. Indexing Location Depending Data in broadcast en ambiente. Aceptado para su publicación, número especial de JDIM sobre Gestión de Datos Distribuidos, 2005. [15] Flinn, J., Sinnamohideen, S., & Satyanarayan, M. Data Staging on No Trusted Surrogates, Intel Research, Pittsburg, Unpublished Report, 2003. [16] Seydim, A.Y., Dunham, M.H. & Kumar, V. Location dependiente consulta processing, Actas del segundo taller internacional de ACM sobre ingeniería de datos para acceso inalámbrico y móvil, p.47-53, Santa Barbara, California, USA, 2001. [17] Xu, J., Lee, W.C., Tang., X. Índice exponencial: Un esquema de indexación distribuida para los datos sobre el aire. En Actas de la II Conferencia Internacional ACM/USENIX sobre Sistemas, Aplicaciones y Servicios Móviles (MobiSys04), Boston, MA, junio de 2004. 24 ",
            "error": [
                "esquema de indexación",
                "plan de indexación",
                "esquema de indexación",
                "esquema de indexación",
                "esquema de indexación",
                "esquema de indexación",
                "esquema de indexación",
                "esquema de indexación",
                "esquema de indexación",
                "esquema de indexación",
                "esquema de indexación",
                "esquema de indexación",
                "sistema de indexación",
                "sistema de indexación"
            ]
        },
        "location dependent datum": {
            "translated_key": [],
            "translated_annotated_text": "Esquema de Indización basado en la ubicación para DAYS Debopam Acharya y Vijay Kumar 1 Computer Science and Informatics University of Missouri-Kansas City Kansas City, MO 64110 dargc(kumarv)@umkc.edu RESUMEN La difusión de datos a través de canales inalámbricos para transmitir información a los consumidores se está volviendo bastante común. Se han propuesto muchos planes de difusión, pero la mayoría de ellos llevan los datos a canales inalámbricos para consumo general. La difusión basada en push [1] es esencialmente asimétrica, es decir, el volumen de datos es mayor desde el servidor a los usuarios que desde los usuarios de vuelta al servidor. El esquema basado en el empuje requiere una indexación que indica cuándo se transmitirán los datos y su posición en la emisión. Latencia de acceso y tiempo de afinación son los dos parámetros principales que pueden utilizarse para evaluar un esquema de indexación. Dos de los importantes esquemas de indexación propuestos anteriormente se basaban en los árboles y los esquemas de indexación exponencial. Ninguno de estos planes pudo satisfacer los requisitos de los datos dependientes de la ubicación (DDL), que es una característica muy deseable de la difusión de datos. En este artículo, discutimos la emisión de LDD en nuestro proyecto DAta in Your Space (DAYS), y proponemos un esquema para la indexación de LDD. Argumentamos que este sistema, cuando se aplica a la DDTS, mejora significativamente el rendimiento en términos de tiempo de afinación en los esquemas antes mencionados. Demostramos nuestro argumento con la ayuda de resultados de simulación. Categorías y Descriptores sujetos H.3.1 [Sistemas de información]: Almacenamiento y recuperación de información - análisis e indexación de contenido; H.3.3 [Sistemas de información]: Almacenamiento y recuperación de información - búsqueda y recuperación de información. Términos generales Algoritmos, Rendimiento, Experimentación 1. INTRODUCCIÓN La difusión inalámbrica de datos es una forma económica y eficiente de poner los datos deseados a disposición de un gran número de usuarios móviles o estáticos. El modo de transferencia de datos es esencialmente asimétrico, es decir, la capacidad de transferencia de datos (comunicación descendente) del servidor al cliente (usuario móvil) es significativamente mayor que el cliente o usuario móvil al servidor (comunicación ascendente). La eficacia de un sistema de difusión de datos se determina por su capacidad para proporcionar a los usuarios los datos requeridos en cualquier lugar y en cualquier momento. Una de las mejores maneras de lograr esto es a través de la difusión de servicios basados en la ubicación altamente personalizados (LBS) que permite a los usuarios acceder a datos dependientes de la ubicación personalizada. Un ejemplo sería alguien usando su dispositivo móvil para buscar un restaurante vegetariano. La aplicación LBS interactuaría con otros componentes de tecnología de localización o utilizaría la entrada de usuarios móviles para determinar la ubicación de los usuarios y descargar la información sobre los restaurantes cercanos al usuario sintonizando el canal inalámbrico que está difundiendo LDD. Vemos un despliegue limitado de LBS por parte de algunos proveedores de servicios. Pero hay todos los indicios de que con el tiempo se resolverán algunos de los complejos problemas técnicos, como el marco de localización uniforme, el cálculo y el seguimiento de ubicaciones en todo tipo de lugares, el posicionamiento en diversos entornos, aplicaciones de localización innovadoras, etc., y LBS se convertirá en una instalación común y ayudará a mejorar la productividad del mercado y el confort del cliente. En nuestro proyecto llamado DAYS, utilizamos el mecanismo de difusión de datos inalámbricos para impulsar LDD a los usuarios y usuarios móviles monitorear y sintonizar el canal para encontrar y descargar los datos requeridos. Sin embargo, es probable que una emisión simple cause una degradación significativa del rendimiento de los dispositivos móviles con limitaciones energéticas, y una solución común a este problema es el uso de una indexación eficiente del aire. El enfoque de indexación almacena información de control que informa al usuario sobre la ubicación de los datos en la emisión y cómo y cuándo pudo acceder a ella. Un usuario móvil, por lo tanto, tiene un poco de tiempo libre para entrar en el modo de somnífero que conserva valiosa energía. También permite al usuario personalizar su propio dispositivo móvil afinando selectivamente la información de su elección. La eficiencia del acceso y la conservación de la energía son las dos cuestiones importantes para los sistemas de radiodifusión de datos. La eficiencia de acceso se refiere a la latencia experimentada cuando se inicia una solicitud hasta que se recibe la respuesta. Conservación de la energía [7, 10] se refiere al uso eficiente de la energía limitada del dispositivo móvil para acceder a los datos de radiodifusión. Dos parámetros que afectan a estos son el tiempo de afinación y la latencia de acceso. El tiempo de sintonización se refiere al tiempo durante el cual la unidad móvil (MU) permanece en estado activo para sintonizar el canal y descargar los datos requeridos. También se puede definir como el número de cubos sintonizados por el dispositivo móvil en estado activo para obtener los datos requeridos. La latencia de acceso puede definirse como el tiempo transcurrido desde que se ha emitido una solicitud hasta que se ha recibido la respuesta. 1 Esta investigación fue apoyada por una subvención de NSF IIS-0209170. En el pasado se han propuesto varios esquemas de indexación, entre los que destacan los basados en árboles y los esquemas de indexación exponencial [17]. Las principales desventajas de los esquemas basados en árboles son que se basan en estructuras arbóreas centralizadas. Para iniciar una búsqueda, la MU tiene que esperar hasta que llegue a la raíz del siguiente árbol de transmisión. Esto afecta significativamente el tiempo de afinación de la unidad móvil. Los esquemas exponenciales facilitan la replicación de índices compartiendo enlaces en diferentes árboles de búsqueda. Para las emisiones con un gran número de páginas, se ha demostrado que el esquema exponencial funciona de manera similar a los esquemas basados en árboles en términos de latencia de acceso. Además, la duración media de la emisión aumenta debido a la replicación del índice y esto puede causar un aumento significativo de la latencia del acceso. Ninguno de los sistemas de indexación mencionados es igualmente eficaz en la difusión de datos dependientes de la ubicación. Además de proporcionar baja latencia, carecen de propiedades que se utilizan para abordar los problemas de DDT. Proponemos un esquema de indexación en DAYS que se ocupa de algunos de estos problemas. Demostramos con resultados de simulación que nuestro esquema supera a algunos de los esquemas de indexación anteriores para la difusión de LDD en términos de tiempo de afinación. El resto del documento se presenta de la siguiente manera. En la sección 2, se analiza el trabajo anterior relacionado con la indexación de los datos de radiodifusión. La sección 3 describe nuestra arquitectura DAYS. Los datos dependientes de la ubicación, su generación y su posterior difusión se presentan en la sección 4. La sección 5 discute nuestro esquema de indexación en detalle. La simulación de nuestro esquema y su evaluación del desempeño se presenta en la sección 6. En la sección 7 se concluye el documento y se menciona la labor futura relacionada. 2. TRABAJO ANTERIOR Varias técnicas de indexación basadas en discos se han utilizado para la indexación de aire. Imielinski et al. [5, 6] aplicó el árbol del índice B+, donde los nodos de la hoja almacenan los tiempos de llegada de los ítems de datos. Se propuso el método de indexación distribuida para reproducir y distribuir eficientemente el árbol de índices en una emisión. Específicamente, el árbol índice se divide en una parte replicada y una parte no replicada. Cada emisión consiste en la parte replicada y la parte no replicada que indiza los elementos de datos inmediatamente después de ella. Como tal, cada nodo en la parte no replicada aparece sólo una vez en una emisión y, por lo tanto, reduce el costo de replicación y latencia de acceso, al tiempo que logra un buen tiempo de afinación. Chen et al. [2] y Shivakumar et al. [8] considera estructuras de árboles desequilibradas para optimizar el consumo de energía para el acceso a datos no uniformes. Estas estructuras minimizan el costo medio de búsqueda de índices reduciendo el número de búsquedas de datos en caliente a expensas de gastar más en datos en frío. Tan y Yu discutieron la organización de datos e índices bajo la emisión sesgada También se han sugerido métodos de Hashing y firma para la transmisión inalámbrica que admite consultas de igualdad [9]. En [5] se propuso un método flexible de indización. El índice flexible primero clasifica los elementos de datos en orden ascendente (o descendente) de los valores clave de búsqueda y luego los divide en segmentos p. El primer cubo en cada segmento de datos contiene un índice de control, que es un índice binario que asigna un valor clave dado al segmento que contiene esa clave, y un índice local, que es un índice de entrada m que asigna un valor clave dado a los cubos dentro del segmento actual. Al afinar los parámetros de p y m, los clientes móviles pueden lograr un buen tiempo de afinación o una buena latencia de acceso. Otra técnica de indexación propuesta es el esquema de indexación exponencial [17]. En este esquema, se utiliza un índice parametrizado, llamado índice exponencial, para optimizar la latencia del acceso o el tiempo de afinación. Facilita la replicación de índices mediante la vinculación de diferentes árboles de búsqueda. Todos los regímenes mencionados se han aplicado a datos que no están relacionados entre sí. Estos datos no relacionados pueden agruparse o no agruparse. Sin embargo, ninguno de ellos se ha ocupado específicamente de los requisitos de la DDT. Los datos dependientes de la ubicación son datos que están asociados con una ubicación. En la actualidad hay varias aplicaciones que se ocupan de la DDTS [13, 16]. Casi todos ellos representan LDD con la ayuda de estructuras jerárquicas [3, 4]. Esto se basa en la propiedad de contención de datos dependientes de la ubicación. La propiedad Containment ayuda a determinar la posición relativa de un objeto definiendo o identificando ubicaciones que contienen esos objetos. Las ubicaciones subordinadas están jerárquicamente relacionadas entre sí. Así, la propiedad Containment limita la gama de disponibilidad u operación de un servicio. Usamos esta propiedad de contención en nuestro esquema de indexación para indexar LDD. 3. DAYS ARCHITECTURE DAYS se ha conceptualizado para difundir datos tópicos y no tópicos a los usuarios en un espacio de difusión local y para aceptar consultas de usuarios individuales a nivel mundial. Los datos tópicos, por ejemplo, información meteorológica, información de tráfico, información de existencias, etc., cambian constantemente con el tiempo. Los datos no tópicos como hotel, restaurante, precios inmobiliarios, etc., no cambian tan a menudo. Así, imaginamos la presencia de dos tipos de distribución de datos: En el primer caso, el servidor empuja los datos a los usuarios locales a través de canales inalámbricos. El otro caso se refiere al servidor que envía los resultados de las consultas de los usuarios a través de canales inalámbricos de enlace descendente. Técnicamente, vemos la presencia de dos tipos de colas en el acceso basado en datos. Una es una cola muy cargada que contiene consultas cargadas globalmente. La otra es una cola relativamente ligera que consiste en consultas subidas localmente. La arquitectura DAYS [12], como se muestra en la figura 1, consiste en un servidor de datos, programador de transmisiones, coordinador de DAYS, red de satélites LEO para la entrega de datos a nivel mundial y un espacio de transmisión local. Los datos se introducen en el espacio de transmisión local para que los usuarios puedan sintonizarse con los canales inalámbricos para acceder a los datos. El espacio de transmisión local consiste en una torre de transmisión, unidades móviles y una red de máquinas de puesta en escena de datos llamadas subrogados. La estadificación de datos en sustitutos se ha investigado anteriormente como una técnica exitosa [12, 15] para los datos relacionados con los usuarios de caché. Creemos que la estadificación de datos se puede utilizar para reducir drásticamente el tiempo de latencia tanto para los datos de radiodifusión local como para las respuestas globales. La solicitud de consulta en los sustitutos puede utilizarse posteriormente para generar los patrones de popularidad que finalmente deciden el horario de emisión [12]. 18 Popularidad Comentarios de Surrogates for Broadcast Scheduler Local Space Broadcast Tower SurrogateMU MU MU Servidor de datosHorario de radiodifusiónDÍAS Coordinador Canal local de enlace descendente Canal global de enlace descendente Pull request cola cola Solicitud global cola Solicitud local cola Ubicación índice basado en Starbucks Plaza Kansas City Figura 1. Arquitectura DAYS Figura 2. Ubicación Estructura deStarbucks, Plaza 4. DATOS DEPENDIENTES DE LOCALIZACIÓN (LDD) Argumentamos que la incorporación de información de ubicación en la transmisión inalámbrica de datos puede disminuir significativamente la latencia de acceso. Esta propiedad se convierte en muy útil para la unidad móvil que tiene capacidad de almacenamiento y procesamiento limitada. Hay una variedad de aplicaciones para obtener información sobre tráfico, reservas de restaurantes y hoteles, comida rápida, gasolineras, oficina de correos, tiendas de comestibles, etc. Si estas aplicaciones se combinan con información de ubicación, entonces la búsqueda será rápida y altamente rentable. Una propiedad importante de las ubicaciones es Containment que ayuda a determinar la ubicación relativa de un objeto con respecto a su padre que contiene el objeto. Por lo tanto, Containment limita el rango de disponibilidad de un dato. Usamos esta propiedad en nuestro esquema de indexación. La base de datos contiene los contenidos transmitidos que se convierten en LDD [14] asociándolos con las ubicaciones respectivas para que puedan transmitirse de manera agrupada. El agrupamiento de LDD ayuda al usuario a localizar la información de manera eficiente y soporta la propiedad de contención. Presentamos un ejemplo para justificar nuestra propuesta. Ejemplo: Supongamos que un usuario emite una consulta Starbucks Coffee en Plaza por favor. para acceder a información sobre la sucursal Plaza de Starbucks Coffee en Kansas City. En el caso de la ubicación independiente establecido el sistema enumerará todas las cafeterías Starbucks en el área de Kansas City. Es evidente que esas respuestas aumentarán la latencia del acceso y no son deseables. Estos se pueden administrar de manera eficiente si el servidor tiene datos dependientes de la ubicación, es decir, una asignación entre los datos de una cafetería de Starbucks y su ubicación física. Además, para una consulta que incluya el rango de ubicaciones de Starbucks, bastará con una sola consulta solicitando ubicaciones para toda la región de Kansas City, como se muestra en la Figura 2. Esto ahorrará una enorme cantidad de ancho de banda al disminuir el número de mensajes y, al mismo tiempo, será útil para prevenir el cuello de botella de escalabilidad en una zona muy poblada. 4.1 Función de asignación para LDD El ejemplo justifica la necesidad de una función de asignación para procesar consultas dependientes de la ubicación. Esto será especialmente importante para las consultas basadas en la atracción en todo el mundo para las cuales la respuesta podría estar compuesta para diferentes partes del mundo. La función de mapeo es necesaria para construir el horario de emisión. Definimos Global Property Set (GPS) [11], Information Content (IC) set, and Location Jerarchy (LH) set where IC  GPS and LH  GPS to develop a mapping function. LH = {l1, l2, l3...,lk} donde li representan ubicaciones en el árbol de ubicación y IC = {ic1, ic2, ic3,...,icn} donde ici representan tipo de información. Por ejemplo, si tenemos tráfico, tiempo, y la información de stock están en transmisión entonces IC = {ictráfico, icweather, e icstock}. El esquema de asignación debe ser capaz de identificar y seleccionar un miembro IC y un nodo LH para (a) asociación correcta, (b) coincidencia de granularidad, (c) y condición de terminación. Por ejemplo, el clima • IC podría estar asociado con un país o un estado o una ciudad o un pueblo de LH. La coincidencia de granularidad entre el tiempo y un nodo LH es según el requisito del usuario. Así, con una granularidad gruesa la información meteorológica se asocia con un país para obtener el clima de los países y con la ciudad en una granularidad más fina. Si una ciudad es la mejor granularidad, entonces define la condición terminal para la asociación entre IC y LH para el tiempo. Esto significa que un usuario no puede obtener información meteorológica sobre la subdivisión de una ciudad. En realidad, el clima de una subdivisión no tiene ningún sentido. Desarrollamos un simple esquema de mapeo heurístico basado en las necesidades del usuario. Dejar IC = {m1, m2,m3.,..., mk}, donde mi representa su elemento y dejar LH = {n1, n2, n3,..., nl}, donde ni representa miembro LHs. Definimos GPS para IC (GPSIC)  GPS y para LH (GPSLH)  GPS como GPSIC = {P1, P2,..., Pn}, donde P1, P2, P3,..., Pn son propiedades de sus miembros y GPSLH = {Q1, Q2,..., Qm} donde Q1, Q2,..., Qm son propiedades de sus miembros. Las propiedades de un miembro particular de IC son un subconjunto de GPSIC. Generalmente es cierto que (conjunto de propiedades (miÃ3n IC) â € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € Por ejemplo, stock • IC y película • IC calificación no tienen ninguna propiedad en común. Asumimos que dos o más miembros del CI tienen al menos una propiedad geográfica común (es decir, lugar) porque DAYS transmite información sobre esas categorías, que están estrechamente vinculadas con un lugar. Por ejemplo, las acciones de una empresa están relacionadas con un país, el clima está relacionado con una ciudad o estado, etc. Definimos el subconjunto de propiedades de mio IC como PSm i ♥ mi • IC y PSm i = {P1, P2,..., Pr} donde r ≤ n. • Pr {Pr • PSm i → Pr • GPSIC} que implica que • i, PSm i  GPSIC. Las propiedades geográficas de este conjunto son indicativas de si mi IC puede ser mapeado a un solo nivel de granularidad (es decir. una sola ubicación) en LH o varios niveles de granularidad (es decir, más de un nodo en 19 de la jerarquía) en LH. ¿Cuántos y qué niveles de granularidad debe un mapa mi, depende del nivel en el que el proveedor de servicios quiere proporcionar información sobre el mi en cuestión. Del mismo modo, definimos un subconjunto de propiedades de los miembros de LH como PSn j Ł nj Ł LH que puede ser escrito como PSn j ={Q1, Q2, Q3,..., Qs} donde s ≤ m. Además, El proceso de mapeo de IC a LH es entonces identificar para algunos mxÃ3 IC uno o mÃ¡s nyÃ3 LH tal que PSmx Ã3 PSnv Esto significa que cuando mx mapea a ny y a todos los niños de ny si mx puede mapear a múltiples niveles de granularidad o mx mapea sólo a ny si mx puede mapear a un solo nivel de granularidad. Asumimos que los nuevos miembros pueden unirse y los antiguos miembros pueden salir de IC o LH en cualquier momento. La eliminación de miembros del espacio del CI es simple, pero la adición de miembros al espacio del CI es más restrictiva. Si queremos añadir un nuevo miembro al espacio IC, primero definimos un conjunto de propiedades para el nuevo miembro: PSmnew_m ={P1, P2, P3,..., Pt} y lo añadimos al CI sólo si la condición: Este régimen tiene una ventaja adicional al permitir a los proveedores de servicios de información controlar el tipo de información que desean proporcionar a los usuarios. Presentamos el siguiente ejemplo para ilustrar el concepto de mapeo. IC = {Tráfico, Stock, Restaurante, Tiempo, Fechas importantes de la historia, Condiciones de la carretera} LH = {País, Estado, Ciudad, Código postal, Principales carreteras} GPSIC = {Surface-mobility, Roads, High, Low, Italian-food, StateName, Temp, CityName, Seat-disponibilidad, Zip, Traffic-jams, Además, PS(ICStock) indicó que Stock solo puede mapear a un solo país. Cuando consideramos el miembro Tráfico del espacio IC, sólo PS(ICTraffic) â € ¢ PScity â € TM. Como PS(ICTRAFFIC) indica que Traffic puede mapear a una sola ubicación, solo mapea a City y a ninguno de sus hijos. Ahora bien, a diferencia de Stock, el mapeo del tráfico con las principales carreteras, que es un hijo de la ciudad, es significativo. Sin embargo, los proveedores de servicios tienen derecho a controlar los niveles de granularidad a los que desean proporcionar información sobre un miembro del espacio IC. PS(ICRoad conditions) • PSState  y PS(ICRoad conditions) • PSCity. Así que las condiciones de la carretera son mapas al Estado, así como a la ciudad. Como PS(ICRoad conditions) indica que las condiciones de la carretera pueden mapear a múltiples niveles de granularidad, las condiciones de la carretera también mapearán a Zip Code y las principales carreteras, que son los niños del Estado y la ciudad. Del mismo modo, los mapas del restaurante sólo al código postal, y los mapas meteorológicos al estado, la ciudad y sus hijos, las carreteras principales y el código postal. 5. ESQUEMA DE ÍNDICE BASADA EN LOCALIZACIÓN Esta sección discute nuestro esquema de indexación basado en la ubicación (LBIS). El esquema está diseñado para ajustarse a la emisión LDD en nuestro proyecto DAYS. Como se discutió anteriormente, utilizamos la propiedad de contención de LDD en el esquema de indexación. Esto limita significativamente la búsqueda de nuestros datos requeridos a una parte particular de la transmisión. Por lo tanto, argumentamos que el esquema proporciona tiempo de afinación limitado. Describimos la arquitectura de nuestro esquema de indexación. Nuestro esquema contiene cubos de datos separados y cubos de índices. Los cubos de índice son de dos tipos. El primer tipo se llama el índice Mayor. El índice Major proporciona información sobre los tipos de datos transmitidos. Por ejemplo, si tenemos la intención de transmitir información como Entretenimiento, Tiempo, Tráfico, etc., entonces el índice principal apunta a estos tipos principales de información y/o sus principales subtipos de información, el número de subtipos principales variando de una información a otra. Esto limita estrictamente el número de accesos a un índice principal. El índice Major nunca apunta a los datos originales. Señala a los subíndices llamados el índice Menor. Los índices menores son los índices que realmente apuntan a los datos originales. Llamamos a estos indicadores menores como punteros de ubicación, ya que apunta a los datos que están asociados con una ubicación. Por lo tanto, nuestra búsqueda de datos incluye el acceso a un índice mayor y algunos índices menores, el número de índice menor variando dependiendo del tipo de información. Por lo tanto, nuestro esquema de indexación tiene en cuenta la naturaleza jerárquica del LDD, la propiedad Containment, y requiere que nuestro programa de transmisión se agrupe en función del tipo de datos y la ubicación. La estructura de la jerarquía de ubicación requiere el uso de diferentes tipos de índice en diferentes niveles. La estructura y las posiciones del índice dependen estrictamente de la jerarquía de ubicación descrita anteriormente en nuestro esquema de asignación. Ilustramos la implementación de nuestro esquema con un ejemplo. Posteriormente se mencionan las normas para la elaboración del índice. 20 A1 Entretenimiento Restaurante Película A2 A3 A4 R1 R2 R3 R4 R5 R6 R7 R8 Tiempo KC SL JC SF Entretenimiento R1 R2 R3 R4 R4 R5 R6 R7 R8 KC SL JC SF (A, R, NEXT = 8) 3, R5 4, R7 Tipo (S, L) ER W E EM (1, 4) (5, Información cartográfica de ubicación para radiodifusión Figura 4. Datos junto con el índice basado en la ubicación Ejemplo: Supongamos que nuestro contenido de transmisión contiene ICentertainment y ICweather que se representa como se muestra en la Fig. 3. Ai representa las áreas de la ciudad y Ri representa las carreteras en un área determinada. Las hojas de la estructura meteorológica representan cuatro ciudades. La estructura del índice se indica en la Fig. 4 que muestra la posición del índice mayor y menor y los datos en el horario de emisión. Proponemos las siguientes reglas para la creación del programa de emisión indexado por aire: • Se crean el índice mayor y el índice menor. • El índice principal contiene la posición y el rango de diferentes tipos de ítems de datos (Weather and Entertainment, Figura 3) y sus categorías. Las subcategorías de Entretenimiento, Cine y Restaurante, también están en el índice. Así, el índice principal contiene Entretenimiento (E), Entretenimiento-Movie (EM), Entretenimiento-Restaurante (ER), y Tiempo (W). La tupla (S, L) representa la posición inicial (S) del elemento de datos y L representa el rango del elemento en términos de número de cubos de datos. • El índice menor contiene las variables A, R y un puntero Siguiente. En nuestro ejemplo (Figura 3), la carretera R representa el primer nodo del área A. El índice menor se utiliza para apuntar a cubos de datos reales presentes en los niveles más bajos de la jerarquía. En cambio, el índice principal apunta a una gama más amplia de ubicaciones, por lo que contiene información sobre las principales y subcategorías de datos. • La información del índice no se incorpora en los cubos de datos. Los cubos de índice están separados que contienen sólo la información de control. • El número de cubos índice m=#(IC), IC = {ic1, ic2, ic3,...,icn} donde ici representa el tipo de información y # representa la cardinalidad del conjunto de contenido de información IC. En este ejemplo, IC= {icMovie, icWeather, icRestaurant} y así #(IC) =3. Por lo tanto, el número de cubos índice principales es 3. • El mecanismo para resolver la consulta está presente en el coordinador de java en MU. Por ejemplo, si una consulta Q se presenta como Q (Entretenimiento, Película, Road_1), entonces la búsqueda resultante será para la información EM en el índice principal. Nosotros decimos, Q EM. Nuestro índice propuesto funciona de la siguiente manera: Supongamos que una MU emite una consulta que está representada por Java Coordinador presente en la MU como información de restaurante en la carretera 7. Esto es resuelto por el coordinador como Q ER. Esto significa que uno tiene que buscar la unidad de índice ER en el índice principal. Supongamos que el MU entra en el canal en R2. El primer índice que recibe es un índice menor después de R2. En este índice, el valor de la variable Siguiente = 4, lo que significa que el siguiente índice mayor está presente después del cubo 4. La MU puede entrar en modo somnoliento. Se activa después del cubo 4 y recibe el índice principal. Busca información de ER que es la primera entrada en este índice. Ahora es seguro que la MU obtendrá la posición del cubo de datos en el índice menor contiguo. La segunda unidad en el índice menor representa la posición de los datos requeridos R7. Indica que el cubo de datos es el primer cubo en el Área 4. El MU vuelve a entrar en modo somnífero y se activa después del cubo 6. Obtiene los datos necesarios en el siguiente cubo. Presentamos el algoritmo para buscar el Índice basado en la ubicación. Algoritmo 1 Índice basado en la ubicación Buscar en DAYS 1. Escanear la transmisión para el siguiente cubo índice, encontrado=falso 2. Mientras que (no se encuentra) hacer 3. si cubo es el índice mayor entonces 4. Encuentra el Tipo & Tupla (S, L) 5. si S es mayor que 1, entra en modo Doze durante S segundos 6. termina si 7. Despierta en el cubo Sth y observa el índice menor 8. termina si 9. si el cubo es índice menor entonces 10. si TypeRequest no es igual a Typefound y (A,R)Solicitud no es igual a (A,R)found entonces 11. Vaya al modo de doze hasta el SIGUIENTE y repita desde el paso 3 12. terminar si 13. de lo contrario encontrar entrada en Índice Menor que apunta a los datos 14. Calcular la hora de llegada T del cubo de datos 15. Entra en modo somnífero hasta la T 16. Despierta en T y accede a los datos, encontrados = verdadero 17. fin de lo contrario 18. final si 19. final Mientras que 21 6. EVALUACIÓN DE LA EJECUCIÓN La conservación de la energía es la principal preocupación cuando tratamos de acceder a los datos de la transmisión inalámbrica. Un sistema eficiente debe permitir al dispositivo móvil acceder a los datos que necesita manteniéndose activo durante un período mínimo de tiempo. Esto ahorraría una cantidad considerable de energía. Dado que los elementos se distribuyen en función de los tipos y se asignan a ubicaciones adecuadas, argumentamos que nuestra transmisión se ocupa de los tipos de datos agrupados. La unidad móvil tiene que acceder a un índice mayor y a un índice menor relativamente menor para obtener información sobre la hora de llegada de los datos. Esto contrasta con el esquema exponencial donde los índices son de tamaños iguales. El ejemplo discutido y Algoritmo 1 revela que para acceder a cualquier dato, necesitamos acceder al índice mayor sólo una vez seguido por uno o más accesos al índice menor. El número de accesos menores al índice depende del número de ubicaciones internas. Como el número de ubicaciones internas varía de elemento a elemento (por ejemplo, Weather está generalmente asociado con una ciudad mientras que el tráfico se granula hasta las carreteras principales y menores de una ciudad), argumentamos que la estructura de la información de localización mapeada puede ser visualizada como un bosque que es una colección de árboles generales, el número de árboles generales dependiendo de los tipos de información transmitida y la profundidad de un árbol dependiendo de la granularidad de la información de Para nuestros experimentos, asumimos el bosque como una colección de árboles M-ary equilibrados. Asumimos además que los árboles de la arteria M están llenos al asumir la presencia de nodos ficticios en diferentes niveles de un árbol. Así, si el número de ítems de datos es d y la altura del árbol es m, entonces n= (m*d-1)/(m-1) donde n es el número de vértices en el árbol e i= (d-1)/(m-1) donde i es el número de vértices internos. El tiempo de afinación para un ítem de datos implica 1 unidad de tiempo requerido para acceder al índice principal más el tiempo requerido para acceder a los ítems de datos presentes en las hojas del árbol. Por lo tanto, el tiempo de sintonización con d ítems de datos es t = logmd+1 Podemos decir que el tiempo de sintonización está limitado por O(logmd). Comparamos nuestro esquema con el esquema de indexación distribuida y exponencial. Asumimos una emisión plana y el número de páginas que varían de 5000 a 25000. Los diversos parámetros de simulación se muestran en la Tabla 1. La Figura 5-8 muestra los tiempos relativos de afinación de tres algoritmos de indexación, es decir, el LBIS, esquema exponencial y el esquema de árbol distribuido. La Figura 5 muestra el resultado para el número de nodos internos de ubicación = 3. Podemos ver que LBIS supera significativamente a los otros esquemas. El tiempo de afinación en LBIS varía de aproximadamente 6,8 a 8. Este gran tiempo de afinación se debe al hecho de que después de alcanzar el índice menor más bajo, la MU puede tener que acceder a pocos cubos secuencialmente para obtener el cubo de datos requerido. Podemos ver que el tiempo de afinación tiende a ser estable a medida que aumenta la duración de la emisión. En la figura 6 se considera m= 4. Aquí podemos ver que el exponencial y el rendimiento distribuido casi de manera similar, aunque el primero parece funcionar ligeramente mejor a medida que aumenta la longitud de emisión. Un patrón muy interesante es visible en la figura 7. Para las emisiones de menor tamaño, el LBIS parece tener un tiempo de afinación mayor que los otros dos esquemas. Pero a medida que aumenta la duración de la emisión, es claramente visible que el LBIS supera a los otros dos esquemas. La indexación del árbol distribuido muestra un comportamiento similar al del LBIS. El tiempo de afinación en LBIS sigue siendo bajo porque el algoritmo permite a la MU saltarse algunos Índices Menores intermedios. Esto permite que la MU se mueva a niveles más bajos directamente después de entrar en modo activo, ahorrando así energía valiosa. Esta acción no es posible en la indexación de árboles distribuidos y por lo tanto podemos observar que su tiempo de afinación es más que el esquema LBIS, aunque tiene mejores resultados que el esquema exponencial. La Figura 8, en contraste, nos muestra que el tiempo de afinación en LBIS, aunque menor que los otros dos esquemas, tiende a aumentar bruscamente a medida que la longitud de emisión se hace mayor que las 15000 páginas. Esto puede atribuirse tanto al aumento del tiempo necesario para escanear los Índices Menores intermedios como a la duración de la emisión. Pero podemos observar que la pendiente de la curva LBIS es significativamente menor que las otras dos curvas. Tabla 1 Parámetros de simulación P Valores de definición N Número de datos Elementos 5000 - 25000 m Número de nodos de ubicación internos 3, 4, 5, 6 B Capacidad de cubo sin índice (para índice exponencial) 10,64,128,256 i Base de índice para índice exponencial 2,4,6,8 k Tamaño del índice para árbol distribuido 8 bytes Los resultados de la simulación establecen algunos hechos sobre nuestro esquema de indexación basado en la ubicación. En la mayoría de los casos, el sistema funciona mejor que los otros dos en términos de tiempo de afinación. A medida que aumenta la duración de la emisión, después de cierto punto, aunque el tiempo de afinación aumenta como resultado de factores que hemos descrito antes, el esquema siempre funciona mejor que los otros dos esquemas. Debido al límite prescrito del número de páginas en el papel, no podemos mostrar más resultados. Pero estos resultados omitidos muestran una tendencia similar a la de los resultados representados en la figura 5-8. 7. CONCLUSIÓN Y FUTURO TRABAJO En este trabajo hemos presentado un esquema para el mapeo de datos de radiodifusión inalámbrica con sus ubicaciones. Hemos presentado un ejemplo para mostrar cómo la estructura jerárquica del árbol de ubicación mapea con los datos para crear LDD. Hemos presentado un esquema llamado LBIS para indexar este LDD. Hemos utilizado la propiedad de contención de LDD en el esquema que limita la búsqueda a un estrecho rango de datos en la emisión, ahorrando así energía valiosa en el dispositivo. La asignación de datos con ubicaciones y el esquema de indexación se utilizará en nuestro proyecto DAYS para crear la arquitectura basada en empuje. El LBIS se ha comparado con otros dos sistemas de indexación prominentes, a saber, el sistema de indexación de árboles distribuidos y el sistema de indexación exponencial. En nuestras simulaciones demostramos que el esquema LBIS tiene el menor tiempo de afinación para las emisiones que tienen un gran número de páginas, ahorrando así una valiosa potencia de batería en la MU. 22 En el trabajo futuro tratamos de incorporar la arquitectura basada en el tirón en nuestro proyecto DAYS. Los datos del servidor están disponibles para el acceso de los usuarios globales. Esto se puede hacer poniendo una solicitud al servidor de origen. La consulta en este caso es una consulta global. Se transfiere del servidor de origen de los usuarios al servidor de destino mediante el uso de satélites LEO. Tenemos la intención de utilizar nuestro esquema de LDD y arquitectura de estadificación de datos en la arquitectura basada en el tirón. Demostraremos que el esquema de LDD junto con la arquitectura de estadificación de datos mejora significativamente la latencia para la consulta global y local. 8. REFERENCIAS [1] Acharya, S., Alonso, R. Franklin, M y Zdonik S. Disco de transmisión: Gestión de datos para entornos de comunicación asimétricos. En Actas de la Conferencia de la ACM SIGMOD sobre Gestión de Datos, págs. 199 a 210, San José, CA, mayo de 1995. [2] Chen, M.S.,Wu, K.L. y Yu, P. S. Optimizando la asignación de índices para la difusión secuencial de datos en la computación móvil inalámbrica. IEEE Transactions on Knowledge and Data Engineering (TKDE), 15(1):161-173, enero/febrero de 2003. Gráfico 5 Tamaño de la transmisión (# cubos) Dist tree Expo LBIS Figura 6. Tamaño de la transmisión (# cubos) Dist tree Expo LBIS Figura 7. Tamaño de la transmisión (# cubos) Dist tree Expo LBIS Figura 8. Tamaño de la transmisión (# cubos) Árbol dist Expo LBIS Tiempo medio de afinación Tiempo medio de afinación Tiempo medio de afinación 23 [3] Hu, Q. L., Lee, D. L. y Lee, W.C. Evaluación del rendimiento de un sistema inalámbrico de difusión jerárquica de datos. En Actas de la Quinta Conferencia Internacional Anual de ACM sobre Computación y Redes Móviles (MobiCom99), págs. 163 a 173, Seattle, WA, agosto de 1999. [4] Hu, Q. L. Lee, W.C. y Lee, D. L. Power consultas conservadoras de múltiples atributos en la transmisión de datos. En Actas de la 16a Conferencia Internacional sobre Ingeniería de Datos (ICDE00), páginas 157-166, San Diego, CA, febrero de 2000. [5] Imielinski, T., Viswanathan, S. y Badrinath. B. R. Filtrado eficiente de energía de los datos en el aire. En Actas de la Cuarta Conferencia Internacional sobre Tecnología de Bases de Datos Ampliadas (EDBT94), págs. 245 a 258, Cambridge, Reino Unido, marzo de 1994. [6] Imielinski, T., Viswanathan, S. y Badrinath. B. R. Datos sobre el aire - Organización y acceso. Operaciones de IEEE en Ingeniería de Conocimientos e Datos (TKDE), 9(3):353-372, mayo/junio de 1997. [7] Shih, E., Bahl, P. y Sinclair, M. J. Wake on wireless: Una estrategia de ahorro de energía impulsada por eventos para dispositivos operados por baterías. En Actas de la 8a Conferencia Internacional Anual de ACM sobre Computación y Redes Móviles (MobiCom02), págs. 160 a 171, Atlanta, GA, septiembre de 2002. [8] Shivakumar N. y Venkatasubramanian, S. Indización energéticamente eficiente para la difusión de información en sistemas inalámbricos. ACM/Baltzer Journal of Mobile Networks and Applications (MONET), 1(4):433-446, diciembre de 1996. [9] Tan K. L. y Yu, J. X. Filtración energéticamente eficiente de emisiones no uniformes. En Actas de la 16a Conferencia Internacional sobre Sistemas de Computación Distribuida (ICDCS96), págs. 520 a 527, Hong Kong, mayo de 1996. [10] Viredaz, M. A., Brakmo, L. S. y Hamburgen, W. R. Gestión de energía en dispositivos portátiles. ACM Coue, 1(7):44-52, octubre de 2003. [11] Garg, N. Kumar, V., & Dunham, M.H. Mapeo e indización de información en DAYS, 6o Taller Internacional sobre Movilidad en Bases de Datos y Sistemas Distribuidos, en conjunción con la 14a Conferencia Internacional sobre Aplicaciones de Bases de Datos y Sistemas Expertos, 1o a 5 de septiembre, Praga, República Checa, 2003. [12] Acharya D., Kumar, V., & Dunham, M.H. InfoSpace: Sistema de difusión de datos públicos híbrido y adaptativo para computación ubicua. Aceptado para publicación en el número especial de Pervasive Computing. Wiley Journal for Wireless Communications and Mobile Computing, 2004. [13] Acharya D., Kumar, V., & Prabhu, N. Descubriendo y usando Servicios Web en M-Commerce, Proceedings for 5th VLDB Workshop on Technologies for E-Services, Toronto, Canada,2004. [14] Acharya D., Kumar, V. Indexing Location Depending Data in broadcast en ambiente. Aceptado para su publicación, número especial de JDIM sobre Gestión de Datos Distribuidos, 2005. [15] Flinn, J., Sinnamohideen, S., & Satyanarayan, M. Data Staging on No Trusted Surrogates, Intel Research, Pittsburg, Unpublished Report, 2003. [16] Seydim, A.Y., Dunham, M.H. & Kumar, V. Location dependiente consulta processing, Actas del segundo taller internacional de ACM sobre ingeniería de datos para acceso inalámbrico y móvil, p.47-53, Santa Barbara, California, USA, 2001. [17] Xu, J., Lee, W.C., Tang., X. Índice exponencial: Un esquema de indexación distribuida para los datos sobre el aire. En Actas de la II Conferencia Internacional ACM/USENIX sobre Sistemas, Aplicaciones y Servicios Móviles (MobiSys04), Boston, MA, junio de 2004. 24 ",
            "error": []
        },
        "ldd": {
            "translated_key": [],
            "translated_annotated_text": "Esquema de Indización basado en la ubicación para DAYS Debopam Acharya y Vijay Kumar 1 Computer Science and Informatics University of Missouri-Kansas City Kansas City, MO 64110 dargc(kumarv)@umkc.edu RESUMEN La difusión de datos a través de canales inalámbricos para transmitir información a los consumidores se está volviendo bastante común. Se han propuesto muchos planes de difusión, pero la mayoría de ellos llevan los datos a canales inalámbricos para consumo general. La difusión basada en push [1] es esencialmente asimétrica, es decir, el volumen de datos es mayor desde el servidor a los usuarios que desde los usuarios de vuelta al servidor. El esquema basado en el empuje requiere una indexación que indica cuándo se transmitirán los datos y su posición en la emisión. Latencia de acceso y tiempo de afinación son los dos parámetros principales que pueden utilizarse para evaluar un esquema de indexación. Dos de los importantes esquemas de indexación propuestos anteriormente se basaban en los árboles y los esquemas de indexación exponencial. Ninguno de estos planes pudo satisfacer los requisitos de los datos dependientes de la ubicación (DDL), que es una característica muy deseable de la difusión de datos. En este artículo, discutimos la emisión de LDD en nuestro proyecto DAta in Your Space (DAYS), y proponemos un esquema para la indexación de LDD. Argumentamos que este sistema, cuando se aplica a la DDTS, mejora significativamente el rendimiento en términos de tiempo de afinación en los esquemas antes mencionados. Demostramos nuestro argumento con la ayuda de resultados de simulación. Categorías y Descriptores sujetos H.3.1 [Sistemas de información]: Almacenamiento y recuperación de información - análisis e indexación de contenido; H.3.3 [Sistemas de información]: Almacenamiento y recuperación de información - búsqueda y recuperación de información. Términos generales Algoritmos, Rendimiento, Experimentación 1. INTRODUCCIÓN La difusión inalámbrica de datos es una forma económica y eficiente de poner los datos deseados a disposición de un gran número de usuarios móviles o estáticos. El modo de transferencia de datos es esencialmente asimétrico, es decir, la capacidad de transferencia de datos (comunicación descendente) del servidor al cliente (usuario móvil) es significativamente mayor que el cliente o usuario móvil al servidor (comunicación ascendente). La eficacia de un sistema de difusión de datos se determina por su capacidad para proporcionar a los usuarios los datos requeridos en cualquier lugar y en cualquier momento. Una de las mejores maneras de lograr esto es a través de la difusión de servicios basados en la ubicación altamente personalizados (LBS) que permite a los usuarios acceder a datos dependientes de la ubicación personalizada. Un ejemplo sería alguien usando su dispositivo móvil para buscar un restaurante vegetariano. La aplicación LBS interactuaría con otros componentes de tecnología de localización o utilizaría la entrada de usuarios móviles para determinar la ubicación de los usuarios y descargar la información sobre los restaurantes cercanos al usuario sintonizando el canal inalámbrico que está difundiendo LDD. Vemos un despliegue limitado de LBS por parte de algunos proveedores de servicios. Pero hay todos los indicios de que con el tiempo se resolverán algunos de los complejos problemas técnicos, como el marco de localización uniforme, el cálculo y el seguimiento de ubicaciones en todo tipo de lugares, el posicionamiento en diversos entornos, aplicaciones de localización innovadoras, etc., y LBS se convertirá en una instalación común y ayudará a mejorar la productividad del mercado y el confort del cliente. En nuestro proyecto llamado DAYS, utilizamos el mecanismo de difusión de datos inalámbricos para impulsar LDD a los usuarios y usuarios móviles monitorear y sintonizar el canal para encontrar y descargar los datos requeridos. Sin embargo, es probable que una emisión simple cause una degradación significativa del rendimiento de los dispositivos móviles con limitaciones energéticas, y una solución común a este problema es el uso de una indexación eficiente del aire. El enfoque de indexación almacena información de control que informa al usuario sobre la ubicación de los datos en la emisión y cómo y cuándo pudo acceder a ella. Un usuario móvil, por lo tanto, tiene un poco de tiempo libre para entrar en el modo de somnífero que conserva valiosa energía. También permite al usuario personalizar su propio dispositivo móvil afinando selectivamente la información de su elección. La eficiencia del acceso y la conservación de la energía son las dos cuestiones importantes para los sistemas de radiodifusión de datos. La eficiencia de acceso se refiere a la latencia experimentada cuando se inicia una solicitud hasta que se recibe la respuesta. Conservación de la energía [7, 10] se refiere al uso eficiente de la energía limitada del dispositivo móvil para acceder a los datos de radiodifusión. Dos parámetros que afectan a estos son el tiempo de afinación y la latencia de acceso. El tiempo de sintonización se refiere al tiempo durante el cual la unidad móvil (MU) permanece en estado activo para sintonizar el canal y descargar los datos requeridos. También se puede definir como el número de cubos sintonizados por el dispositivo móvil en estado activo para obtener los datos requeridos. La latencia de acceso puede definirse como el tiempo transcurrido desde que se ha emitido una solicitud hasta que se ha recibido la respuesta. 1 Esta investigación fue apoyada por una subvención de NSF IIS-0209170. En el pasado se han propuesto varios esquemas de indexación, entre los que destacan los basados en árboles y los esquemas de indexación exponencial [17]. Las principales desventajas de los esquemas basados en árboles son que se basan en estructuras arbóreas centralizadas. Para iniciar una búsqueda, la MU tiene que esperar hasta que llegue a la raíz del siguiente árbol de transmisión. Esto afecta significativamente el tiempo de afinación de la unidad móvil. Los esquemas exponenciales facilitan la replicación de índices compartiendo enlaces en diferentes árboles de búsqueda. Para las emisiones con un gran número de páginas, se ha demostrado que el esquema exponencial funciona de manera similar a los esquemas basados en árboles en términos de latencia de acceso. Además, la duración media de la emisión aumenta debido a la replicación del índice y esto puede causar un aumento significativo de la latencia del acceso. Ninguno de los sistemas de indexación mencionados es igualmente eficaz en la difusión de datos dependientes de la ubicación. Además de proporcionar baja latencia, carecen de propiedades que se utilizan para abordar los problemas de DDT. Proponemos un esquema de indexación en DAYS que se ocupa de algunos de estos problemas. Demostramos con resultados de simulación que nuestro esquema supera a algunos de los esquemas de indexación anteriores para la difusión de LDD en términos de tiempo de afinación. El resto del documento se presenta de la siguiente manera. En la sección 2, se analiza el trabajo anterior relacionado con la indexación de los datos de radiodifusión. La sección 3 describe nuestra arquitectura DAYS. Los datos dependientes de la ubicación, su generación y su posterior difusión se presentan en la sección 4. La sección 5 discute nuestro esquema de indexación en detalle. La simulación de nuestro esquema y su evaluación del desempeño se presenta en la sección 6. En la sección 7 se concluye el documento y se menciona la labor futura relacionada. 2. TRABAJO ANTERIOR Varias técnicas de indexación basadas en discos se han utilizado para la indexación de aire. Imielinski et al. [5, 6] aplicó el árbol del índice B+, donde los nodos de la hoja almacenan los tiempos de llegada de los ítems de datos. Se propuso el método de indexación distribuida para reproducir y distribuir eficientemente el árbol de índices en una emisión. Específicamente, el árbol índice se divide en una parte replicada y una parte no replicada. Cada emisión consiste en la parte replicada y la parte no replicada que indiza los elementos de datos inmediatamente después de ella. Como tal, cada nodo en la parte no replicada aparece sólo una vez en una emisión y, por lo tanto, reduce el costo de replicación y latencia de acceso, al tiempo que logra un buen tiempo de afinación. Chen et al. [2] y Shivakumar et al. [8] considera estructuras de árboles desequilibradas para optimizar el consumo de energía para el acceso a datos no uniformes. Estas estructuras minimizan el costo medio de búsqueda de índices reduciendo el número de búsquedas de datos en caliente a expensas de gastar más en datos en frío. Tan y Yu discutieron la organización de datos e índices bajo la emisión sesgada También se han sugerido métodos de Hashing y firma para la transmisión inalámbrica que admite consultas de igualdad [9]. En [5] se propuso un método flexible de indización. El índice flexible primero clasifica los elementos de datos en orden ascendente (o descendente) de los valores clave de búsqueda y luego los divide en segmentos p. El primer cubo en cada segmento de datos contiene un índice de control, que es un índice binario que asigna un valor clave dado al segmento que contiene esa clave, y un índice local, que es un índice de entrada m que asigna un valor clave dado a los cubos dentro del segmento actual. Al afinar los parámetros de p y m, los clientes móviles pueden lograr un buen tiempo de afinación o una buena latencia de acceso. Otra técnica de indexación propuesta es el esquema de indexación exponencial [17]. En este esquema, se utiliza un índice parametrizado, llamado índice exponencial, para optimizar la latencia del acceso o el tiempo de afinación. Facilita la replicación de índices mediante la vinculación de diferentes árboles de búsqueda. Todos los regímenes mencionados se han aplicado a datos que no están relacionados entre sí. Estos datos no relacionados pueden agruparse o no agruparse. Sin embargo, ninguno de ellos se ha ocupado específicamente de los requisitos de la DDT. Los datos dependientes de la ubicación son datos que están asociados con una ubicación. En la actualidad hay varias aplicaciones que se ocupan de la DDTS [13, 16]. Casi todos ellos representan LDD con la ayuda de estructuras jerárquicas [3, 4]. Esto se basa en la propiedad de contención de datos dependientes de la ubicación. La propiedad Containment ayuda a determinar la posición relativa de un objeto definiendo o identificando ubicaciones que contienen esos objetos. Las ubicaciones subordinadas están jerárquicamente relacionadas entre sí. Así, la propiedad Containment limita la gama de disponibilidad u operación de un servicio. Usamos esta propiedad de contención en nuestro esquema de indexación para indexar LDD. 3. DAYS ARCHITECTURE DAYS se ha conceptualizado para difundir datos tópicos y no tópicos a los usuarios en un espacio de difusión local y para aceptar consultas de usuarios individuales a nivel mundial. Los datos tópicos, por ejemplo, información meteorológica, información de tráfico, información de existencias, etc., cambian constantemente con el tiempo. Los datos no tópicos como hotel, restaurante, precios inmobiliarios, etc., no cambian tan a menudo. Así, imaginamos la presencia de dos tipos de distribución de datos: En el primer caso, el servidor empuja los datos a los usuarios locales a través de canales inalámbricos. El otro caso se refiere al servidor que envía los resultados de las consultas de los usuarios a través de canales inalámbricos de enlace descendente. Técnicamente, vemos la presencia de dos tipos de colas en el acceso basado en datos. Una es una cola muy cargada que contiene consultas cargadas globalmente. La otra es una cola relativamente ligera que consiste en consultas subidas localmente. La arquitectura DAYS [12], como se muestra en la figura 1, consiste en un servidor de datos, programador de transmisiones, coordinador de DAYS, red de satélites LEO para la entrega de datos a nivel mundial y un espacio de transmisión local. Los datos se introducen en el espacio de transmisión local para que los usuarios puedan sintonizarse con los canales inalámbricos para acceder a los datos. El espacio de transmisión local consiste en una torre de transmisión, unidades móviles y una red de máquinas de puesta en escena de datos llamadas subrogados. La estadificación de datos en sustitutos se ha investigado anteriormente como una técnica exitosa [12, 15] para los datos relacionados con los usuarios de caché. Creemos que la estadificación de datos se puede utilizar para reducir drásticamente el tiempo de latencia tanto para los datos de radiodifusión local como para las respuestas globales. La solicitud de consulta en los sustitutos puede utilizarse posteriormente para generar los patrones de popularidad que finalmente deciden el horario de emisión [12]. 18 Popularidad Comentarios de Surrogates for Broadcast Scheduler Local Space Broadcast Tower SurrogateMU MU MU Servidor de datosHorario de radiodifusiónDÍAS Coordinador Canal local de enlace descendente Canal global de enlace descendente Pull request cola cola Solicitud global cola Solicitud local cola Ubicación índice basado en Starbucks Plaza Kansas City Figura 1. Arquitectura DAYS Figura 2. Ubicación Estructura deStarbucks, Plaza 4. DATOS DEPENDIENTES DE LOCALIZACIÓN (LDD) Argumentamos que la incorporación de información de ubicación en la transmisión inalámbrica de datos puede disminuir significativamente la latencia de acceso. Esta propiedad se convierte en muy útil para la unidad móvil que tiene capacidad de almacenamiento y procesamiento limitada. Hay una variedad de aplicaciones para obtener información sobre tráfico, reservas de restaurantes y hoteles, comida rápida, gasolineras, oficina de correos, tiendas de comestibles, etc. Si estas aplicaciones se combinan con información de ubicación, entonces la búsqueda será rápida y altamente rentable. Una propiedad importante de las ubicaciones es Containment que ayuda a determinar la ubicación relativa de un objeto con respecto a su padre que contiene el objeto. Por lo tanto, Containment limita el rango de disponibilidad de un dato. Usamos esta propiedad en nuestro esquema de indexación. La base de datos contiene los contenidos transmitidos que se convierten en LDD [14] asociándolos con las ubicaciones respectivas para que puedan transmitirse de manera agrupada. El agrupamiento de LDD ayuda al usuario a localizar la información de manera eficiente y soporta la propiedad de contención. Presentamos un ejemplo para justificar nuestra propuesta. Ejemplo: Supongamos que un usuario emite una consulta Starbucks Coffee en Plaza por favor. para acceder a información sobre la sucursal Plaza de Starbucks Coffee en Kansas City. En el caso de la ubicación independiente establecido el sistema enumerará todas las cafeterías Starbucks en el área de Kansas City. Es evidente que esas respuestas aumentarán la latencia del acceso y no son deseables. Estos se pueden administrar de manera eficiente si el servidor tiene datos dependientes de la ubicación, es decir, una asignación entre los datos de una cafetería de Starbucks y su ubicación física. Además, para una consulta que incluya el rango de ubicaciones de Starbucks, bastará con una sola consulta solicitando ubicaciones para toda la región de Kansas City, como se muestra en la Figura 2. Esto ahorrará una enorme cantidad de ancho de banda al disminuir el número de mensajes y, al mismo tiempo, será útil para prevenir el cuello de botella de escalabilidad en una zona muy poblada. 4.1 Función de asignación para LDD El ejemplo justifica la necesidad de una función de asignación para procesar consultas dependientes de la ubicación. Esto será especialmente importante para las consultas basadas en la atracción en todo el mundo para las cuales la respuesta podría estar compuesta para diferentes partes del mundo. La función de mapeo es necesaria para construir el horario de emisión. Definimos Global Property Set (GPS) [11], Information Content (IC) set, and Location Jerarchy (LH) set where IC  GPS and LH  GPS to develop a mapping function. LH = {l1, l2, l3...,lk} donde li representan ubicaciones en el árbol de ubicación y IC = {ic1, ic2, ic3,...,icn} donde ici representan tipo de información. Por ejemplo, si tenemos tráfico, tiempo, y la información de stock están en transmisión entonces IC = {ictráfico, icweather, e icstock}. El esquema de asignación debe ser capaz de identificar y seleccionar un miembro IC y un nodo LH para (a) asociación correcta, (b) coincidencia de granularidad, (c) y condición de terminación. Por ejemplo, el clima • IC podría estar asociado con un país o un estado o una ciudad o un pueblo de LH. La coincidencia de granularidad entre el tiempo y un nodo LH es según el requisito del usuario. Así, con una granularidad gruesa la información meteorológica se asocia con un país para obtener el clima de los países y con la ciudad en una granularidad más fina. Si una ciudad es la mejor granularidad, entonces define la condición terminal para la asociación entre IC y LH para el tiempo. Esto significa que un usuario no puede obtener información meteorológica sobre la subdivisión de una ciudad. En realidad, el clima de una subdivisión no tiene ningún sentido. Desarrollamos un simple esquema de mapeo heurístico basado en las necesidades del usuario. Dejar IC = {m1, m2,m3.,..., mk}, donde mi representa su elemento y dejar LH = {n1, n2, n3,..., nl}, donde ni representa miembro LHs. Definimos GPS para IC (GPSIC)  GPS y para LH (GPSLH)  GPS como GPSIC = {P1, P2,..., Pn}, donde P1, P2, P3,..., Pn son propiedades de sus miembros y GPSLH = {Q1, Q2,..., Qm} donde Q1, Q2,..., Qm son propiedades de sus miembros. Las propiedades de un miembro particular de IC son un subconjunto de GPSIC. Generalmente es cierto que (conjunto de propiedades (miÃ3n IC) â € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € Por ejemplo, stock • IC y película • IC calificación no tienen ninguna propiedad en común. Asumimos que dos o más miembros del CI tienen al menos una propiedad geográfica común (es decir, lugar) porque DAYS transmite información sobre esas categorías, que están estrechamente vinculadas con un lugar. Por ejemplo, las acciones de una empresa están relacionadas con un país, el clima está relacionado con una ciudad o estado, etc. Definimos el subconjunto de propiedades de mio IC como PSm i ♥ mi • IC y PSm i = {P1, P2,..., Pr} donde r ≤ n. • Pr {Pr • PSm i → Pr • GPSIC} que implica que • i, PSm i  GPSIC. Las propiedades geográficas de este conjunto son indicativas de si mi IC puede ser mapeado a un solo nivel de granularidad (es decir. una sola ubicación) en LH o varios niveles de granularidad (es decir, más de un nodo en 19 de la jerarquía) en LH. ¿Cuántos y qué niveles de granularidad debe un mapa mi, depende del nivel en el que el proveedor de servicios quiere proporcionar información sobre el mi en cuestión. Del mismo modo, definimos un subconjunto de propiedades de los miembros de LH como PSn j Ł nj Ł LH que puede ser escrito como PSn j ={Q1, Q2, Q3,..., Qs} donde s ≤ m. Además, El proceso de mapeo de IC a LH es entonces identificar para algunos mxÃ3 IC uno o mÃ¡s nyÃ3 LH tal que PSmx Ã3 PSnv Esto significa que cuando mx mapea a ny y a todos los niños de ny si mx puede mapear a múltiples niveles de granularidad o mx mapea sólo a ny si mx puede mapear a un solo nivel de granularidad. Asumimos que los nuevos miembros pueden unirse y los antiguos miembros pueden salir de IC o LH en cualquier momento. La eliminación de miembros del espacio del CI es simple, pero la adición de miembros al espacio del CI es más restrictiva. Si queremos añadir un nuevo miembro al espacio IC, primero definimos un conjunto de propiedades para el nuevo miembro: PSmnew_m ={P1, P2, P3,..., Pt} y lo añadimos al CI sólo si la condición: Este régimen tiene una ventaja adicional al permitir a los proveedores de servicios de información controlar el tipo de información que desean proporcionar a los usuarios. Presentamos el siguiente ejemplo para ilustrar el concepto de mapeo. IC = {Tráfico, Stock, Restaurante, Tiempo, Fechas importantes de la historia, Condiciones de la carretera} LH = {País, Estado, Ciudad, Código postal, Principales carreteras} GPSIC = {Surface-mobility, Roads, High, Low, Italian-food, StateName, Temp, CityName, Seat-disponibilidad, Zip, Traffic-jams, Además, PS(ICStock) indicó que Stock solo puede mapear a un solo país. Cuando consideramos el miembro Tráfico del espacio IC, sólo PS(ICTraffic) â € ¢ PScity â € TM. Como PS(ICTRAFFIC) indica que Traffic puede mapear a una sola ubicación, solo mapea a City y a ninguno de sus hijos. Ahora bien, a diferencia de Stock, el mapeo del tráfico con las principales carreteras, que es un hijo de la ciudad, es significativo. Sin embargo, los proveedores de servicios tienen derecho a controlar los niveles de granularidad a los que desean proporcionar información sobre un miembro del espacio IC. PS(ICRoad conditions) • PSState  y PS(ICRoad conditions) • PSCity. Así que las condiciones de la carretera son mapas al Estado, así como a la ciudad. Como PS(ICRoad conditions) indica que las condiciones de la carretera pueden mapear a múltiples niveles de granularidad, las condiciones de la carretera también mapearán a Zip Code y las principales carreteras, que son los niños del Estado y la ciudad. Del mismo modo, los mapas del restaurante sólo al código postal, y los mapas meteorológicos al estado, la ciudad y sus hijos, las carreteras principales y el código postal. 5. ESQUEMA DE ÍNDICE BASADA EN LOCALIZACIÓN Esta sección discute nuestro esquema de indexación basado en la ubicación (LBIS). El esquema está diseñado para ajustarse a la emisión LDD en nuestro proyecto DAYS. Como se discutió anteriormente, utilizamos la propiedad de contención de LDD en el esquema de indexación. Esto limita significativamente la búsqueda de nuestros datos requeridos a una parte particular de la transmisión. Por lo tanto, argumentamos que el esquema proporciona tiempo de afinación limitado. Describimos la arquitectura de nuestro esquema de indexación. Nuestro esquema contiene cubos de datos separados y cubos de índices. Los cubos de índice son de dos tipos. El primer tipo se llama el índice Mayor. El índice Major proporciona información sobre los tipos de datos transmitidos. Por ejemplo, si tenemos la intención de transmitir información como Entretenimiento, Tiempo, Tráfico, etc., entonces el índice principal apunta a estos tipos principales de información y/o sus principales subtipos de información, el número de subtipos principales variando de una información a otra. Esto limita estrictamente el número de accesos a un índice principal. El índice Major nunca apunta a los datos originales. Señala a los subíndices llamados el índice Menor. Los índices menores son los índices que realmente apuntan a los datos originales. Llamamos a estos indicadores menores como punteros de ubicación, ya que apunta a los datos que están asociados con una ubicación. Por lo tanto, nuestra búsqueda de datos incluye el acceso a un índice mayor y algunos índices menores, el número de índice menor variando dependiendo del tipo de información. Por lo tanto, nuestro esquema de indexación tiene en cuenta la naturaleza jerárquica del LDD, la propiedad Containment, y requiere que nuestro programa de transmisión se agrupe en función del tipo de datos y la ubicación. La estructura de la jerarquía de ubicación requiere el uso de diferentes tipos de índice en diferentes niveles. La estructura y las posiciones del índice dependen estrictamente de la jerarquía de ubicación descrita anteriormente en nuestro esquema de asignación. Ilustramos la implementación de nuestro esquema con un ejemplo. Posteriormente se mencionan las normas para la elaboración del índice. 20 A1 Entretenimiento Restaurante Película A2 A3 A4 R1 R2 R3 R4 R5 R6 R7 R8 Tiempo KC SL JC SF Entretenimiento R1 R2 R3 R4 R4 R5 R6 R7 R8 KC SL JC SF (A, R, NEXT = 8) 3, R5 4, R7 Tipo (S, L) ER W E EM (1, 4) (5, Información cartográfica de ubicación para radiodifusión Figura 4. Datos junto con el índice basado en la ubicación Ejemplo: Supongamos que nuestro contenido de transmisión contiene ICentertainment y ICweather que se representa como se muestra en la Fig. 3. Ai representa las áreas de la ciudad y Ri representa las carreteras en un área determinada. Las hojas de la estructura meteorológica representan cuatro ciudades. La estructura del índice se indica en la Fig. 4 que muestra la posición del índice mayor y menor y los datos en el horario de emisión. Proponemos las siguientes reglas para la creación del programa de emisión indexado por aire: • Se crean el índice mayor y el índice menor. • El índice principal contiene la posición y el rango de diferentes tipos de ítems de datos (Weather and Entertainment, Figura 3) y sus categorías. Las subcategorías de Entretenimiento, Cine y Restaurante, también están en el índice. Así, el índice principal contiene Entretenimiento (E), Entretenimiento-Movie (EM), Entretenimiento-Restaurante (ER), y Tiempo (W). La tupla (S, L) representa la posición inicial (S) del elemento de datos y L representa el rango del elemento en términos de número de cubos de datos. • El índice menor contiene las variables A, R y un puntero Siguiente. En nuestro ejemplo (Figura 3), la carretera R representa el primer nodo del área A. El índice menor se utiliza para apuntar a cubos de datos reales presentes en los niveles más bajos de la jerarquía. En cambio, el índice principal apunta a una gama más amplia de ubicaciones, por lo que contiene información sobre las principales y subcategorías de datos. • La información del índice no se incorpora en los cubos de datos. Los cubos de índice están separados que contienen sólo la información de control. • El número de cubos índice m=#(IC), IC = {ic1, ic2, ic3,...,icn} donde ici representa el tipo de información y # representa la cardinalidad del conjunto de contenido de información IC. En este ejemplo, IC= {icMovie, icWeather, icRestaurant} y así #(IC) =3. Por lo tanto, el número de cubos índice principales es 3. • El mecanismo para resolver la consulta está presente en el coordinador de java en MU. Por ejemplo, si una consulta Q se presenta como Q (Entretenimiento, Película, Road_1), entonces la búsqueda resultante será para la información EM en el índice principal. Nosotros decimos, Q EM. Nuestro índice propuesto funciona de la siguiente manera: Supongamos que una MU emite una consulta que está representada por Java Coordinador presente en la MU como información de restaurante en la carretera 7. Esto es resuelto por el coordinador como Q ER. Esto significa que uno tiene que buscar la unidad de índice ER en el índice principal. Supongamos que el MU entra en el canal en R2. El primer índice que recibe es un índice menor después de R2. En este índice, el valor de la variable Siguiente = 4, lo que significa que el siguiente índice mayor está presente después del cubo 4. La MU puede entrar en modo somnoliento. Se activa después del cubo 4 y recibe el índice principal. Busca información de ER que es la primera entrada en este índice. Ahora es seguro que la MU obtendrá la posición del cubo de datos en el índice menor contiguo. La segunda unidad en el índice menor representa la posición de los datos requeridos R7. Indica que el cubo de datos es el primer cubo en el Área 4. El MU vuelve a entrar en modo somnífero y se activa después del cubo 6. Obtiene los datos necesarios en el siguiente cubo. Presentamos el algoritmo para buscar el Índice basado en la ubicación. Algoritmo 1 Índice basado en la ubicación Buscar en DAYS 1. Escanear la transmisión para el siguiente cubo índice, encontrado=falso 2. Mientras que (no se encuentra) hacer 3. si cubo es el índice mayor entonces 4. Encuentra el Tipo & Tupla (S, L) 5. si S es mayor que 1, entra en modo Doze durante S segundos 6. termina si 7. Despierta en el cubo Sth y observa el índice menor 8. termina si 9. si el cubo es índice menor entonces 10. si TypeRequest no es igual a Typefound y (A,R)Solicitud no es igual a (A,R)found entonces 11. Vaya al modo de doze hasta el SIGUIENTE y repita desde el paso 3 12. terminar si 13. de lo contrario encontrar entrada en Índice Menor que apunta a los datos 14. Calcular la hora de llegada T del cubo de datos 15. Entra en modo somnífero hasta la T 16. Despierta en T y accede a los datos, encontrados = verdadero 17. fin de lo contrario 18. final si 19. final Mientras que 21 6. EVALUACIÓN DE LA EJECUCIÓN La conservación de la energía es la principal preocupación cuando tratamos de acceder a los datos de la transmisión inalámbrica. Un sistema eficiente debe permitir al dispositivo móvil acceder a los datos que necesita manteniéndose activo durante un período mínimo de tiempo. Esto ahorraría una cantidad considerable de energía. Dado que los elementos se distribuyen en función de los tipos y se asignan a ubicaciones adecuadas, argumentamos que nuestra transmisión se ocupa de los tipos de datos agrupados. La unidad móvil tiene que acceder a un índice mayor y a un índice menor relativamente menor para obtener información sobre la hora de llegada de los datos. Esto contrasta con el esquema exponencial donde los índices son de tamaños iguales. El ejemplo discutido y Algoritmo 1 revela que para acceder a cualquier dato, necesitamos acceder al índice mayor sólo una vez seguido por uno o más accesos al índice menor. El número de accesos menores al índice depende del número de ubicaciones internas. Como el número de ubicaciones internas varía de elemento a elemento (por ejemplo, Weather está generalmente asociado con una ciudad mientras que el tráfico se granula hasta las carreteras principales y menores de una ciudad), argumentamos que la estructura de la información de localización mapeada puede ser visualizada como un bosque que es una colección de árboles generales, el número de árboles generales dependiendo de los tipos de información transmitida y la profundidad de un árbol dependiendo de la granularidad de la información de Para nuestros experimentos, asumimos el bosque como una colección de árboles M-ary equilibrados. Asumimos además que los árboles de la arteria M están llenos al asumir la presencia de nodos ficticios en diferentes niveles de un árbol. Así, si el número de ítems de datos es d y la altura del árbol es m, entonces n= (m*d-1)/(m-1) donde n es el número de vértices en el árbol e i= (d-1)/(m-1) donde i es el número de vértices internos. El tiempo de afinación para un ítem de datos implica 1 unidad de tiempo requerido para acceder al índice principal más el tiempo requerido para acceder a los ítems de datos presentes en las hojas del árbol. Por lo tanto, el tiempo de sintonización con d ítems de datos es t = logmd+1 Podemos decir que el tiempo de sintonización está limitado por O(logmd). Comparamos nuestro esquema con el esquema de indexación distribuida y exponencial. Asumimos una emisión plana y el número de páginas que varían de 5000 a 25000. Los diversos parámetros de simulación se muestran en la Tabla 1. La Figura 5-8 muestra los tiempos relativos de afinación de tres algoritmos de indexación, es decir, el LBIS, esquema exponencial y el esquema de árbol distribuido. La Figura 5 muestra el resultado para el número de nodos internos de ubicación = 3. Podemos ver que LBIS supera significativamente a los otros esquemas. El tiempo de afinación en LBIS varía de aproximadamente 6,8 a 8. Este gran tiempo de afinación se debe al hecho de que después de alcanzar el índice menor más bajo, la MU puede tener que acceder a pocos cubos secuencialmente para obtener el cubo de datos requerido. Podemos ver que el tiempo de afinación tiende a ser estable a medida que aumenta la duración de la emisión. En la figura 6 se considera m= 4. Aquí podemos ver que el exponencial y el rendimiento distribuido casi de manera similar, aunque el primero parece funcionar ligeramente mejor a medida que aumenta la longitud de emisión. Un patrón muy interesante es visible en la figura 7. Para las emisiones de menor tamaño, el LBIS parece tener un tiempo de afinación mayor que los otros dos esquemas. Pero a medida que aumenta la duración de la emisión, es claramente visible que el LBIS supera a los otros dos esquemas. La indexación del árbol distribuido muestra un comportamiento similar al del LBIS. El tiempo de afinación en LBIS sigue siendo bajo porque el algoritmo permite a la MU saltarse algunos Índices Menores intermedios. Esto permite que la MU se mueva a niveles más bajos directamente después de entrar en modo activo, ahorrando así energía valiosa. Esta acción no es posible en la indexación de árboles distribuidos y por lo tanto podemos observar que su tiempo de afinación es más que el esquema LBIS, aunque tiene mejores resultados que el esquema exponencial. La Figura 8, en contraste, nos muestra que el tiempo de afinación en LBIS, aunque menor que los otros dos esquemas, tiende a aumentar bruscamente a medida que la longitud de emisión se hace mayor que las 15000 páginas. Esto puede atribuirse tanto al aumento del tiempo necesario para escanear los Índices Menores intermedios como a la duración de la emisión. Pero podemos observar que la pendiente de la curva LBIS es significativamente menor que las otras dos curvas. Tabla 1 Parámetros de simulación P Valores de definición N Número de datos Elementos 5000 - 25000 m Número de nodos de ubicación internos 3, 4, 5, 6 B Capacidad de cubo sin índice (para índice exponencial) 10,64,128,256 i Base de índice para índice exponencial 2,4,6,8 k Tamaño del índice para árbol distribuido 8 bytes Los resultados de la simulación establecen algunos hechos sobre nuestro esquema de indexación basado en la ubicación. En la mayoría de los casos, el sistema funciona mejor que los otros dos en términos de tiempo de afinación. A medida que aumenta la duración de la emisión, después de cierto punto, aunque el tiempo de afinación aumenta como resultado de factores que hemos descrito antes, el esquema siempre funciona mejor que los otros dos esquemas. Debido al límite prescrito del número de páginas en el papel, no podemos mostrar más resultados. Pero estos resultados omitidos muestran una tendencia similar a la de los resultados representados en la figura 5-8. 7. CONCLUSIÓN Y FUTURO TRABAJO En este trabajo hemos presentado un esquema para el mapeo de datos de radiodifusión inalámbrica con sus ubicaciones. Hemos presentado un ejemplo para mostrar cómo la estructura jerárquica del árbol de ubicación mapea con los datos para crear LDD. Hemos presentado un esquema llamado LBIS para indexar este LDD. Hemos utilizado la propiedad de contención de LDD en el esquema que limita la búsqueda a un estrecho rango de datos en la emisión, ahorrando así energía valiosa en el dispositivo. La asignación de datos con ubicaciones y el esquema de indexación se utilizará en nuestro proyecto DAYS para crear la arquitectura basada en empuje. El LBIS se ha comparado con otros dos sistemas de indexación prominentes, a saber, el sistema de indexación de árboles distribuidos y el sistema de indexación exponencial. En nuestras simulaciones demostramos que el esquema LBIS tiene el menor tiempo de afinación para las emisiones que tienen un gran número de páginas, ahorrando así una valiosa potencia de batería en la MU. 22 En el trabajo futuro tratamos de incorporar la arquitectura basada en el tirón en nuestro proyecto DAYS. Los datos del servidor están disponibles para el acceso de los usuarios globales. Esto se puede hacer poniendo una solicitud al servidor de origen. La consulta en este caso es una consulta global. Se transfiere del servidor de origen de los usuarios al servidor de destino mediante el uso de satélites LEO. Tenemos la intención de utilizar nuestro esquema de LDD y arquitectura de estadificación de datos en la arquitectura basada en el tirón. Demostraremos que el esquema de LDD junto con la arquitectura de estadificación de datos mejora significativamente la latencia para la consulta global y local. 8. REFERENCIAS [1] Acharya, S., Alonso, R. Franklin, M y Zdonik S. Disco de transmisión: Gestión de datos para entornos de comunicación asimétricos. En Actas de la Conferencia de la ACM SIGMOD sobre Gestión de Datos, págs. 199 a 210, San José, CA, mayo de 1995. [2] Chen, M.S.,Wu, K.L. y Yu, P. S. Optimizando la asignación de índices para la difusión secuencial de datos en la computación móvil inalámbrica. IEEE Transactions on Knowledge and Data Engineering (TKDE), 15(1):161-173, enero/febrero de 2003. Gráfico 5 Tamaño de la transmisión (# cubos) Dist tree Expo LBIS Figura 6. Tamaño de la transmisión (# cubos) Dist tree Expo LBIS Figura 7. Tamaño de la transmisión (# cubos) Dist tree Expo LBIS Figura 8. Tamaño de la transmisión (# cubos) Árbol dist Expo LBIS Tiempo medio de afinación Tiempo medio de afinación Tiempo medio de afinación 23 [3] Hu, Q. L., Lee, D. L. y Lee, W.C. Evaluación del rendimiento de un sistema inalámbrico de difusión jerárquica de datos. En Actas de la Quinta Conferencia Internacional Anual de ACM sobre Computación y Redes Móviles (MobiCom99), págs. 163 a 173, Seattle, WA, agosto de 1999. [4] Hu, Q. L. Lee, W.C. y Lee, D. L. Power consultas conservadoras de múltiples atributos en la transmisión de datos. En Actas de la 16a Conferencia Internacional sobre Ingeniería de Datos (ICDE00), páginas 157-166, San Diego, CA, febrero de 2000. [5] Imielinski, T., Viswanathan, S. y Badrinath. B. R. Filtrado eficiente de energía de los datos en el aire. En Actas de la Cuarta Conferencia Internacional sobre Tecnología de Bases de Datos Ampliadas (EDBT94), págs. 245 a 258, Cambridge, Reino Unido, marzo de 1994. [6] Imielinski, T., Viswanathan, S. y Badrinath. B. R. Datos sobre el aire - Organización y acceso. Operaciones de IEEE en Ingeniería de Conocimientos e Datos (TKDE), 9(3):353-372, mayo/junio de 1997. [7] Shih, E., Bahl, P. y Sinclair, M. J. Wake on wireless: Una estrategia de ahorro de energía impulsada por eventos para dispositivos operados por baterías. En Actas de la 8a Conferencia Internacional Anual de ACM sobre Computación y Redes Móviles (MobiCom02), págs. 160 a 171, Atlanta, GA, septiembre de 2002. [8] Shivakumar N. y Venkatasubramanian, S. Indización energéticamente eficiente para la difusión de información en sistemas inalámbricos. ACM/Baltzer Journal of Mobile Networks and Applications (MONET), 1(4):433-446, diciembre de 1996. [9] Tan K. L. y Yu, J. X. Filtración energéticamente eficiente de emisiones no uniformes. En Actas de la 16a Conferencia Internacional sobre Sistemas de Computación Distribuida (ICDCS96), págs. 520 a 527, Hong Kong, mayo de 1996. [10] Viredaz, M. A., Brakmo, L. S. y Hamburgen, W. R. Gestión de energía en dispositivos portátiles. ACM Coue, 1(7):44-52, octubre de 2003. [11] Garg, N. Kumar, V., & Dunham, M.H. Mapeo e indización de información en DAYS, 6o Taller Internacional sobre Movilidad en Bases de Datos y Sistemas Distribuidos, en conjunción con la 14a Conferencia Internacional sobre Aplicaciones de Bases de Datos y Sistemas Expertos, 1o a 5 de septiembre, Praga, República Checa, 2003. [12] Acharya D., Kumar, V., & Dunham, M.H. InfoSpace: Sistema de difusión de datos públicos híbrido y adaptativo para computación ubicua. Aceptado para publicación en el número especial de Pervasive Computing. Wiley Journal for Wireless Communications and Mobile Computing, 2004. [13] Acharya D., Kumar, V., & Prabhu, N. Descubriendo y usando Servicios Web en M-Commerce, Proceedings for 5th VLDB Workshop on Technologies for E-Services, Toronto, Canada,2004. [14] Acharya D., Kumar, V. Indexing Location Depending Data in broadcast en ambiente. Aceptado para su publicación, número especial de JDIM sobre Gestión de Datos Distribuidos, 2005. [15] Flinn, J., Sinnamohideen, S., & Satyanarayan, M. Data Staging on No Trusted Surrogates, Intel Research, Pittsburg, Unpublished Report, 2003. [16] Seydim, A.Y., Dunham, M.H. & Kumar, V. Location dependiente consulta processing, Actas del segundo taller internacional de ACM sobre ingeniería de datos para acceso inalámbrico y móvil, p.47-53, Santa Barbara, California, USA, 2001. [17] Xu, J., Lee, W.C., Tang., X. Índice exponencial: Un esquema de indexación distribuida para los datos sobre el aire. En Actas de la II Conferencia Internacional ACM/USENIX sobre Sistemas, Aplicaciones y Servicios Móviles (MobiSys04), Boston, MA, junio de 2004. 24 ",
            "error": []
        },
        "location based service": {
            "translated_key": [],
            "translated_annotated_text": "Esquema de Indización basado en la ubicación para DAYS Debopam Acharya y Vijay Kumar 1 Computer Science and Informatics University of Missouri-Kansas City Kansas City, MO 64110 dargc(kumarv)@umkc.edu RESUMEN La difusión de datos a través de canales inalámbricos para transmitir información a los consumidores se está volviendo bastante común. Se han propuesto muchos planes de difusión, pero la mayoría de ellos llevan los datos a canales inalámbricos para consumo general. La difusión basada en push [1] es esencialmente asimétrica, es decir, el volumen de datos es mayor desde el servidor a los usuarios que desde los usuarios de vuelta al servidor. El esquema basado en el empuje requiere una indexación que indica cuándo se transmitirán los datos y su posición en la emisión. Latencia de acceso y tiempo de afinación son los dos parámetros principales que pueden utilizarse para evaluar un esquema de indexación. Dos de los importantes esquemas de indexación propuestos anteriormente se basaban en los árboles y los esquemas de indexación exponencial. Ninguno de estos planes pudo satisfacer los requisitos de los datos dependientes de la ubicación (DDL), que es una característica muy deseable de la difusión de datos. En este artículo, discutimos la emisión de LDD en nuestro proyecto DAta in Your Space (DAYS), y proponemos un esquema para la indexación de LDD. Argumentamos que este sistema, cuando se aplica a la DDTS, mejora significativamente el rendimiento en términos de tiempo de afinación en los esquemas antes mencionados. Demostramos nuestro argumento con la ayuda de resultados de simulación. Categorías y Descriptores sujetos H.3.1 [Sistemas de información]: Almacenamiento y recuperación de información - análisis e indexación de contenido; H.3.3 [Sistemas de información]: Almacenamiento y recuperación de información - búsqueda y recuperación de información. Términos generales Algoritmos, Rendimiento, Experimentación 1. INTRODUCCIÓN La difusión inalámbrica de datos es una forma económica y eficiente de poner los datos deseados a disposición de un gran número de usuarios móviles o estáticos. El modo de transferencia de datos es esencialmente asimétrico, es decir, la capacidad de transferencia de datos (comunicación descendente) del servidor al cliente (usuario móvil) es significativamente mayor que el cliente o usuario móvil al servidor (comunicación ascendente). La eficacia de un sistema de difusión de datos se determina por su capacidad para proporcionar a los usuarios los datos requeridos en cualquier lugar y en cualquier momento. Una de las mejores maneras de lograr esto es a través de la difusión de servicios basados en la ubicación altamente personalizados (LBS) que permite a los usuarios acceder a datos dependientes de la ubicación personalizada. Un ejemplo sería alguien usando su dispositivo móvil para buscar un restaurante vegetariano. La aplicación LBS interactuaría con otros componentes de tecnología de localización o utilizaría la entrada de usuarios móviles para determinar la ubicación de los usuarios y descargar la información sobre los restaurantes cercanos al usuario sintonizando el canal inalámbrico que está difundiendo LDD. Vemos un despliegue limitado de LBS por parte de algunos proveedores de servicios. Pero hay todos los indicios de que con el tiempo se resolverán algunos de los complejos problemas técnicos, como el marco de localización uniforme, el cálculo y el seguimiento de ubicaciones en todo tipo de lugares, el posicionamiento en diversos entornos, aplicaciones de localización innovadoras, etc., y LBS se convertirá en una instalación común y ayudará a mejorar la productividad del mercado y el confort del cliente. En nuestro proyecto llamado DAYS, utilizamos el mecanismo de difusión de datos inalámbricos para impulsar LDD a los usuarios y usuarios móviles monitorear y sintonizar el canal para encontrar y descargar los datos requeridos. Sin embargo, es probable que una emisión simple cause una degradación significativa del rendimiento de los dispositivos móviles con limitaciones energéticas, y una solución común a este problema es el uso de una indexación eficiente del aire. El enfoque de indexación almacena información de control que informa al usuario sobre la ubicación de los datos en la emisión y cómo y cuándo pudo acceder a ella. Un usuario móvil, por lo tanto, tiene un poco de tiempo libre para entrar en el modo de somnífero que conserva valiosa energía. También permite al usuario personalizar su propio dispositivo móvil afinando selectivamente la información de su elección. La eficiencia del acceso y la conservación de la energía son las dos cuestiones importantes para los sistemas de radiodifusión de datos. La eficiencia de acceso se refiere a la latencia experimentada cuando se inicia una solicitud hasta que se recibe la respuesta. Conservación de la energía [7, 10] se refiere al uso eficiente de la energía limitada del dispositivo móvil para acceder a los datos de radiodifusión. Dos parámetros que afectan a estos son el tiempo de afinación y la latencia de acceso. El tiempo de sintonización se refiere al tiempo durante el cual la unidad móvil (MU) permanece en estado activo para sintonizar el canal y descargar los datos requeridos. También se puede definir como el número de cubos sintonizados por el dispositivo móvil en estado activo para obtener los datos requeridos. La latencia de acceso puede definirse como el tiempo transcurrido desde que se ha emitido una solicitud hasta que se ha recibido la respuesta. 1 Esta investigación fue apoyada por una subvención de NSF IIS-0209170. En el pasado se han propuesto varios esquemas de indexación, entre los que destacan los basados en árboles y los esquemas de indexación exponencial [17]. Las principales desventajas de los esquemas basados en árboles son que se basan en estructuras arbóreas centralizadas. Para iniciar una búsqueda, la MU tiene que esperar hasta que llegue a la raíz del siguiente árbol de transmisión. Esto afecta significativamente el tiempo de afinación de la unidad móvil. Los esquemas exponenciales facilitan la replicación de índices compartiendo enlaces en diferentes árboles de búsqueda. Para las emisiones con un gran número de páginas, se ha demostrado que el esquema exponencial funciona de manera similar a los esquemas basados en árboles en términos de latencia de acceso. Además, la duración media de la emisión aumenta debido a la replicación del índice y esto puede causar un aumento significativo de la latencia del acceso. Ninguno de los sistemas de indexación mencionados es igualmente eficaz en la difusión de datos dependientes de la ubicación. Además de proporcionar baja latencia, carecen de propiedades que se utilizan para abordar los problemas de DDT. Proponemos un esquema de indexación en DAYS que se ocupa de algunos de estos problemas. Demostramos con resultados de simulación que nuestro esquema supera a algunos de los esquemas de indexación anteriores para la difusión de LDD en términos de tiempo de afinación. El resto del documento se presenta de la siguiente manera. En la sección 2, se analiza el trabajo anterior relacionado con la indexación de los datos de radiodifusión. La sección 3 describe nuestra arquitectura DAYS. Los datos dependientes de la ubicación, su generación y su posterior difusión se presentan en la sección 4. La sección 5 discute nuestro esquema de indexación en detalle. La simulación de nuestro esquema y su evaluación del desempeño se presenta en la sección 6. En la sección 7 se concluye el documento y se menciona la labor futura relacionada. 2. TRABAJO ANTERIOR Varias técnicas de indexación basadas en discos se han utilizado para la indexación de aire. Imielinski et al. [5, 6] aplicó el árbol del índice B+, donde los nodos de la hoja almacenan los tiempos de llegada de los ítems de datos. Se propuso el método de indexación distribuida para reproducir y distribuir eficientemente el árbol de índices en una emisión. Específicamente, el árbol índice se divide en una parte replicada y una parte no replicada. Cada emisión consiste en la parte replicada y la parte no replicada que indiza los elementos de datos inmediatamente después de ella. Como tal, cada nodo en la parte no replicada aparece sólo una vez en una emisión y, por lo tanto, reduce el costo de replicación y latencia de acceso, al tiempo que logra un buen tiempo de afinación. Chen et al. [2] y Shivakumar et al. [8] considera estructuras de árboles desequilibradas para optimizar el consumo de energía para el acceso a datos no uniformes. Estas estructuras minimizan el costo medio de búsqueda de índices reduciendo el número de búsquedas de datos en caliente a expensas de gastar más en datos en frío. Tan y Yu discutieron la organización de datos e índices bajo la emisión sesgada También se han sugerido métodos de Hashing y firma para la transmisión inalámbrica que admite consultas de igualdad [9]. En [5] se propuso un método flexible de indización. El índice flexible primero clasifica los elementos de datos en orden ascendente (o descendente) de los valores clave de búsqueda y luego los divide en segmentos p. El primer cubo en cada segmento de datos contiene un índice de control, que es un índice binario que asigna un valor clave dado al segmento que contiene esa clave, y un índice local, que es un índice de entrada m que asigna un valor clave dado a los cubos dentro del segmento actual. Al afinar los parámetros de p y m, los clientes móviles pueden lograr un buen tiempo de afinación o una buena latencia de acceso. Otra técnica de indexación propuesta es el esquema de indexación exponencial [17]. En este esquema, se utiliza un índice parametrizado, llamado índice exponencial, para optimizar la latencia del acceso o el tiempo de afinación. Facilita la replicación de índices mediante la vinculación de diferentes árboles de búsqueda. Todos los regímenes mencionados se han aplicado a datos que no están relacionados entre sí. Estos datos no relacionados pueden agruparse o no agruparse. Sin embargo, ninguno de ellos se ha ocupado específicamente de los requisitos de la DDT. Los datos dependientes de la ubicación son datos que están asociados con una ubicación. En la actualidad hay varias aplicaciones que se ocupan de la DDTS [13, 16]. Casi todos ellos representan LDD con la ayuda de estructuras jerárquicas [3, 4]. Esto se basa en la propiedad de contención de datos dependientes de la ubicación. La propiedad Containment ayuda a determinar la posición relativa de un objeto definiendo o identificando ubicaciones que contienen esos objetos. Las ubicaciones subordinadas están jerárquicamente relacionadas entre sí. Así, la propiedad Containment limita la gama de disponibilidad u operación de un servicio. Usamos esta propiedad de contención en nuestro esquema de indexación para indexar LDD. 3. DAYS ARCHITECTURE DAYS se ha conceptualizado para difundir datos tópicos y no tópicos a los usuarios en un espacio de difusión local y para aceptar consultas de usuarios individuales a nivel mundial. Los datos tópicos, por ejemplo, información meteorológica, información de tráfico, información de existencias, etc., cambian constantemente con el tiempo. Los datos no tópicos como hotel, restaurante, precios inmobiliarios, etc., no cambian tan a menudo. Así, imaginamos la presencia de dos tipos de distribución de datos: En el primer caso, el servidor empuja los datos a los usuarios locales a través de canales inalámbricos. El otro caso se refiere al servidor que envía los resultados de las consultas de los usuarios a través de canales inalámbricos de enlace descendente. Técnicamente, vemos la presencia de dos tipos de colas en el acceso basado en datos. Una es una cola muy cargada que contiene consultas cargadas globalmente. La otra es una cola relativamente ligera que consiste en consultas subidas localmente. La arquitectura DAYS [12], como se muestra en la figura 1, consiste en un servidor de datos, programador de transmisiones, coordinador de DAYS, red de satélites LEO para la entrega de datos a nivel mundial y un espacio de transmisión local. Los datos se introducen en el espacio de transmisión local para que los usuarios puedan sintonizarse con los canales inalámbricos para acceder a los datos. El espacio de transmisión local consiste en una torre de transmisión, unidades móviles y una red de máquinas de puesta en escena de datos llamadas subrogados. La estadificación de datos en sustitutos se ha investigado anteriormente como una técnica exitosa [12, 15] para los datos relacionados con los usuarios de caché. Creemos que la estadificación de datos se puede utilizar para reducir drásticamente el tiempo de latencia tanto para los datos de radiodifusión local como para las respuestas globales. La solicitud de consulta en los sustitutos puede utilizarse posteriormente para generar los patrones de popularidad que finalmente deciden el horario de emisión [12]. 18 Popularidad Comentarios de Surrogates for Broadcast Scheduler Local Space Broadcast Tower SurrogateMU MU MU Servidor de datosHorario de radiodifusiónDÍAS Coordinador Canal local de enlace descendente Canal global de enlace descendente Pull request cola cola Solicitud global cola Solicitud local cola Ubicación índice basado en Starbucks Plaza Kansas City Figura 1. Arquitectura DAYS Figura 2. Ubicación Estructura deStarbucks, Plaza 4. DATOS DEPENDIENTES DE LOCALIZACIÓN (LDD) Argumentamos que la incorporación de información de ubicación en la transmisión inalámbrica de datos puede disminuir significativamente la latencia de acceso. Esta propiedad se convierte en muy útil para la unidad móvil que tiene capacidad de almacenamiento y procesamiento limitada. Hay una variedad de aplicaciones para obtener información sobre tráfico, reservas de restaurantes y hoteles, comida rápida, gasolineras, oficina de correos, tiendas de comestibles, etc. Si estas aplicaciones se combinan con información de ubicación, entonces la búsqueda será rápida y altamente rentable. Una propiedad importante de las ubicaciones es Containment que ayuda a determinar la ubicación relativa de un objeto con respecto a su padre que contiene el objeto. Por lo tanto, Containment limita el rango de disponibilidad de un dato. Usamos esta propiedad en nuestro esquema de indexación. La base de datos contiene los contenidos transmitidos que se convierten en LDD [14] asociándolos con las ubicaciones respectivas para que puedan transmitirse de manera agrupada. El agrupamiento de LDD ayuda al usuario a localizar la información de manera eficiente y soporta la propiedad de contención. Presentamos un ejemplo para justificar nuestra propuesta. Ejemplo: Supongamos que un usuario emite una consulta Starbucks Coffee en Plaza por favor. para acceder a información sobre la sucursal Plaza de Starbucks Coffee en Kansas City. En el caso de la ubicación independiente establecido el sistema enumerará todas las cafeterías Starbucks en el área de Kansas City. Es evidente que esas respuestas aumentarán la latencia del acceso y no son deseables. Estos se pueden administrar de manera eficiente si el servidor tiene datos dependientes de la ubicación, es decir, una asignación entre los datos de una cafetería de Starbucks y su ubicación física. Además, para una consulta que incluya el rango de ubicaciones de Starbucks, bastará con una sola consulta solicitando ubicaciones para toda la región de Kansas City, como se muestra en la Figura 2. Esto ahorrará una enorme cantidad de ancho de banda al disminuir el número de mensajes y, al mismo tiempo, será útil para prevenir el cuello de botella de escalabilidad en una zona muy poblada. 4.1 Función de asignación para LDD El ejemplo justifica la necesidad de una función de asignación para procesar consultas dependientes de la ubicación. Esto será especialmente importante para las consultas basadas en la atracción en todo el mundo para las cuales la respuesta podría estar compuesta para diferentes partes del mundo. La función de mapeo es necesaria para construir el horario de emisión. Definimos Global Property Set (GPS) [11], Information Content (IC) set, and Location Jerarchy (LH) set where IC  GPS and LH  GPS to develop a mapping function. LH = {l1, l2, l3...,lk} donde li representan ubicaciones en el árbol de ubicación y IC = {ic1, ic2, ic3,...,icn} donde ici representan tipo de información. Por ejemplo, si tenemos tráfico, tiempo, y la información de stock están en transmisión entonces IC = {ictráfico, icweather, e icstock}. El esquema de asignación debe ser capaz de identificar y seleccionar un miembro IC y un nodo LH para (a) asociación correcta, (b) coincidencia de granularidad, (c) y condición de terminación. Por ejemplo, el clima • IC podría estar asociado con un país o un estado o una ciudad o un pueblo de LH. La coincidencia de granularidad entre el tiempo y un nodo LH es según el requisito del usuario. Así, con una granularidad gruesa la información meteorológica se asocia con un país para obtener el clima de los países y con la ciudad en una granularidad más fina. Si una ciudad es la mejor granularidad, entonces define la condición terminal para la asociación entre IC y LH para el tiempo. Esto significa que un usuario no puede obtener información meteorológica sobre la subdivisión de una ciudad. En realidad, el clima de una subdivisión no tiene ningún sentido. Desarrollamos un simple esquema de mapeo heurístico basado en las necesidades del usuario. Dejar IC = {m1, m2,m3.,..., mk}, donde mi representa su elemento y dejar LH = {n1, n2, n3,..., nl}, donde ni representa miembro LHs. Definimos GPS para IC (GPSIC)  GPS y para LH (GPSLH)  GPS como GPSIC = {P1, P2,..., Pn}, donde P1, P2, P3,..., Pn son propiedades de sus miembros y GPSLH = {Q1, Q2,..., Qm} donde Q1, Q2,..., Qm son propiedades de sus miembros. Las propiedades de un miembro particular de IC son un subconjunto de GPSIC. Generalmente es cierto que (conjunto de propiedades (miÃ3n IC) â € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € Por ejemplo, stock • IC y película • IC calificación no tienen ninguna propiedad en común. Asumimos que dos o más miembros del CI tienen al menos una propiedad geográfica común (es decir, lugar) porque DAYS transmite información sobre esas categorías, que están estrechamente vinculadas con un lugar. Por ejemplo, las acciones de una empresa están relacionadas con un país, el clima está relacionado con una ciudad o estado, etc. Definimos el subconjunto de propiedades de mio IC como PSm i ♥ mi • IC y PSm i = {P1, P2,..., Pr} donde r ≤ n. • Pr {Pr • PSm i → Pr • GPSIC} que implica que • i, PSm i  GPSIC. Las propiedades geográficas de este conjunto son indicativas de si mi IC puede ser mapeado a un solo nivel de granularidad (es decir. una sola ubicación) en LH o varios niveles de granularidad (es decir, más de un nodo en 19 de la jerarquía) en LH. ¿Cuántos y qué niveles de granularidad debe un mapa mi, depende del nivel en el que el proveedor de servicios quiere proporcionar información sobre el mi en cuestión. Del mismo modo, definimos un subconjunto de propiedades de los miembros de LH como PSn j Ł nj Ł LH que puede ser escrito como PSn j ={Q1, Q2, Q3,..., Qs} donde s ≤ m. Además, El proceso de mapeo de IC a LH es entonces identificar para algunos mxÃ3 IC uno o mÃ¡s nyÃ3 LH tal que PSmx Ã3 PSnv Esto significa que cuando mx mapea a ny y a todos los niños de ny si mx puede mapear a múltiples niveles de granularidad o mx mapea sólo a ny si mx puede mapear a un solo nivel de granularidad. Asumimos que los nuevos miembros pueden unirse y los antiguos miembros pueden salir de IC o LH en cualquier momento. La eliminación de miembros del espacio del CI es simple, pero la adición de miembros al espacio del CI es más restrictiva. Si queremos añadir un nuevo miembro al espacio IC, primero definimos un conjunto de propiedades para el nuevo miembro: PSmnew_m ={P1, P2, P3,..., Pt} y lo añadimos al CI sólo si la condición: Este régimen tiene una ventaja adicional al permitir a los proveedores de servicios de información controlar el tipo de información que desean proporcionar a los usuarios. Presentamos el siguiente ejemplo para ilustrar el concepto de mapeo. IC = {Tráfico, Stock, Restaurante, Tiempo, Fechas importantes de la historia, Condiciones de la carretera} LH = {País, Estado, Ciudad, Código postal, Principales carreteras} GPSIC = {Surface-mobility, Roads, High, Low, Italian-food, StateName, Temp, CityName, Seat-disponibilidad, Zip, Traffic-jams, Además, PS(ICStock) indicó que Stock solo puede mapear a un solo país. Cuando consideramos el miembro Tráfico del espacio IC, sólo PS(ICTraffic) â € ¢ PScity â € TM. Como PS(ICTRAFFIC) indica que Traffic puede mapear a una sola ubicación, solo mapea a City y a ninguno de sus hijos. Ahora bien, a diferencia de Stock, el mapeo del tráfico con las principales carreteras, que es un hijo de la ciudad, es significativo. Sin embargo, los proveedores de servicios tienen derecho a controlar los niveles de granularidad a los que desean proporcionar información sobre un miembro del espacio IC. PS(ICRoad conditions) • PSState  y PS(ICRoad conditions) • PSCity. Así que las condiciones de la carretera son mapas al Estado, así como a la ciudad. Como PS(ICRoad conditions) indica que las condiciones de la carretera pueden mapear a múltiples niveles de granularidad, las condiciones de la carretera también mapearán a Zip Code y las principales carreteras, que son los niños del Estado y la ciudad. Del mismo modo, los mapas del restaurante sólo al código postal, y los mapas meteorológicos al estado, la ciudad y sus hijos, las carreteras principales y el código postal. 5. ESQUEMA DE ÍNDICE BASADA EN LOCALIZACIÓN Esta sección discute nuestro esquema de indexación basado en la ubicación (LBIS). El esquema está diseñado para ajustarse a la emisión LDD en nuestro proyecto DAYS. Como se discutió anteriormente, utilizamos la propiedad de contención de LDD en el esquema de indexación. Esto limita significativamente la búsqueda de nuestros datos requeridos a una parte particular de la transmisión. Por lo tanto, argumentamos que el esquema proporciona tiempo de afinación limitado. Describimos la arquitectura de nuestro esquema de indexación. Nuestro esquema contiene cubos de datos separados y cubos de índices. Los cubos de índice son de dos tipos. El primer tipo se llama el índice Mayor. El índice Major proporciona información sobre los tipos de datos transmitidos. Por ejemplo, si tenemos la intención de transmitir información como Entretenimiento, Tiempo, Tráfico, etc., entonces el índice principal apunta a estos tipos principales de información y/o sus principales subtipos de información, el número de subtipos principales variando de una información a otra. Esto limita estrictamente el número de accesos a un índice principal. El índice Major nunca apunta a los datos originales. Señala a los subíndices llamados el índice Menor. Los índices menores son los índices que realmente apuntan a los datos originales. Llamamos a estos indicadores menores como punteros de ubicación, ya que apunta a los datos que están asociados con una ubicación. Por lo tanto, nuestra búsqueda de datos incluye el acceso a un índice mayor y algunos índices menores, el número de índice menor variando dependiendo del tipo de información. Por lo tanto, nuestro esquema de indexación tiene en cuenta la naturaleza jerárquica del LDD, la propiedad Containment, y requiere que nuestro programa de transmisión se agrupe en función del tipo de datos y la ubicación. La estructura de la jerarquía de ubicación requiere el uso de diferentes tipos de índice en diferentes niveles. La estructura y las posiciones del índice dependen estrictamente de la jerarquía de ubicación descrita anteriormente en nuestro esquema de asignación. Ilustramos la implementación de nuestro esquema con un ejemplo. Posteriormente se mencionan las normas para la elaboración del índice. 20 A1 Entretenimiento Restaurante Película A2 A3 A4 R1 R2 R3 R4 R5 R6 R7 R8 Tiempo KC SL JC SF Entretenimiento R1 R2 R3 R4 R4 R5 R6 R7 R8 KC SL JC SF (A, R, NEXT = 8) 3, R5 4, R7 Tipo (S, L) ER W E EM (1, 4) (5, Información cartográfica de ubicación para radiodifusión Figura 4. Datos junto con el índice basado en la ubicación Ejemplo: Supongamos que nuestro contenido de transmisión contiene ICentertainment y ICweather que se representa como se muestra en la Fig. 3. Ai representa las áreas de la ciudad y Ri representa las carreteras en un área determinada. Las hojas de la estructura meteorológica representan cuatro ciudades. La estructura del índice se indica en la Fig. 4 que muestra la posición del índice mayor y menor y los datos en el horario de emisión. Proponemos las siguientes reglas para la creación del programa de emisión indexado por aire: • Se crean el índice mayor y el índice menor. • El índice principal contiene la posición y el rango de diferentes tipos de ítems de datos (Weather and Entertainment, Figura 3) y sus categorías. Las subcategorías de Entretenimiento, Cine y Restaurante, también están en el índice. Así, el índice principal contiene Entretenimiento (E), Entretenimiento-Movie (EM), Entretenimiento-Restaurante (ER), y Tiempo (W). La tupla (S, L) representa la posición inicial (S) del elemento de datos y L representa el rango del elemento en términos de número de cubos de datos. • El índice menor contiene las variables A, R y un puntero Siguiente. En nuestro ejemplo (Figura 3), la carretera R representa el primer nodo del área A. El índice menor se utiliza para apuntar a cubos de datos reales presentes en los niveles más bajos de la jerarquía. En cambio, el índice principal apunta a una gama más amplia de ubicaciones, por lo que contiene información sobre las principales y subcategorías de datos. • La información del índice no se incorpora en los cubos de datos. Los cubos de índice están separados que contienen sólo la información de control. • El número de cubos índice m=#(IC), IC = {ic1, ic2, ic3,...,icn} donde ici representa el tipo de información y # representa la cardinalidad del conjunto de contenido de información IC. En este ejemplo, IC= {icMovie, icWeather, icRestaurant} y así #(IC) =3. Por lo tanto, el número de cubos índice principales es 3. • El mecanismo para resolver la consulta está presente en el coordinador de java en MU. Por ejemplo, si una consulta Q se presenta como Q (Entretenimiento, Película, Road_1), entonces la búsqueda resultante será para la información EM en el índice principal. Nosotros decimos, Q EM. Nuestro índice propuesto funciona de la siguiente manera: Supongamos que una MU emite una consulta que está representada por Java Coordinador presente en la MU como información de restaurante en la carretera 7. Esto es resuelto por el coordinador como Q ER. Esto significa que uno tiene que buscar la unidad de índice ER en el índice principal. Supongamos que el MU entra en el canal en R2. El primer índice que recibe es un índice menor después de R2. En este índice, el valor de la variable Siguiente = 4, lo que significa que el siguiente índice mayor está presente después del cubo 4. La MU puede entrar en modo somnoliento. Se activa después del cubo 4 y recibe el índice principal. Busca información de ER que es la primera entrada en este índice. Ahora es seguro que la MU obtendrá la posición del cubo de datos en el índice menor contiguo. La segunda unidad en el índice menor representa la posición de los datos requeridos R7. Indica que el cubo de datos es el primer cubo en el Área 4. El MU vuelve a entrar en modo somnífero y se activa después del cubo 6. Obtiene los datos necesarios en el siguiente cubo. Presentamos el algoritmo para buscar el Índice basado en la ubicación. Algoritmo 1 Índice basado en la ubicación Buscar en DAYS 1. Escanear la transmisión para el siguiente cubo índice, encontrado=falso 2. Mientras que (no se encuentra) hacer 3. si cubo es el índice mayor entonces 4. Encuentra el Tipo & Tupla (S, L) 5. si S es mayor que 1, entra en modo Doze durante S segundos 6. termina si 7. Despierta en el cubo Sth y observa el índice menor 8. termina si 9. si el cubo es índice menor entonces 10. si TypeRequest no es igual a Typefound y (A,R)Solicitud no es igual a (A,R)found entonces 11. Vaya al modo de doze hasta el SIGUIENTE y repita desde el paso 3 12. terminar si 13. de lo contrario encontrar entrada en Índice Menor que apunta a los datos 14. Calcular la hora de llegada T del cubo de datos 15. Entra en modo somnífero hasta la T 16. Despierta en T y accede a los datos, encontrados = verdadero 17. fin de lo contrario 18. final si 19. final Mientras que 21 6. EVALUACIÓN DE LA EJECUCIÓN La conservación de la energía es la principal preocupación cuando tratamos de acceder a los datos de la transmisión inalámbrica. Un sistema eficiente debe permitir al dispositivo móvil acceder a los datos que necesita manteniéndose activo durante un período mínimo de tiempo. Esto ahorraría una cantidad considerable de energía. Dado que los elementos se distribuyen en función de los tipos y se asignan a ubicaciones adecuadas, argumentamos que nuestra transmisión se ocupa de los tipos de datos agrupados. La unidad móvil tiene que acceder a un índice mayor y a un índice menor relativamente menor para obtener información sobre la hora de llegada de los datos. Esto contrasta con el esquema exponencial donde los índices son de tamaños iguales. El ejemplo discutido y Algoritmo 1 revela que para acceder a cualquier dato, necesitamos acceder al índice mayor sólo una vez seguido por uno o más accesos al índice menor. El número de accesos menores al índice depende del número de ubicaciones internas. Como el número de ubicaciones internas varía de elemento a elemento (por ejemplo, Weather está generalmente asociado con una ciudad mientras que el tráfico se granula hasta las carreteras principales y menores de una ciudad), argumentamos que la estructura de la información de localización mapeada puede ser visualizada como un bosque que es una colección de árboles generales, el número de árboles generales dependiendo de los tipos de información transmitida y la profundidad de un árbol dependiendo de la granularidad de la información de Para nuestros experimentos, asumimos el bosque como una colección de árboles M-ary equilibrados. Asumimos además que los árboles de la arteria M están llenos al asumir la presencia de nodos ficticios en diferentes niveles de un árbol. Así, si el número de ítems de datos es d y la altura del árbol es m, entonces n= (m*d-1)/(m-1) donde n es el número de vértices en el árbol e i= (d-1)/(m-1) donde i es el número de vértices internos. El tiempo de afinación para un ítem de datos implica 1 unidad de tiempo requerido para acceder al índice principal más el tiempo requerido para acceder a los ítems de datos presentes en las hojas del árbol. Por lo tanto, el tiempo de sintonización con d ítems de datos es t = logmd+1 Podemos decir que el tiempo de sintonización está limitado por O(logmd). Comparamos nuestro esquema con el esquema de indexación distribuida y exponencial. Asumimos una emisión plana y el número de páginas que varían de 5000 a 25000. Los diversos parámetros de simulación se muestran en la Tabla 1. La Figura 5-8 muestra los tiempos relativos de afinación de tres algoritmos de indexación, es decir, el LBIS, esquema exponencial y el esquema de árbol distribuido. La Figura 5 muestra el resultado para el número de nodos internos de ubicación = 3. Podemos ver que LBIS supera significativamente a los otros esquemas. El tiempo de afinación en LBIS varía de aproximadamente 6,8 a 8. Este gran tiempo de afinación se debe al hecho de que después de alcanzar el índice menor más bajo, la MU puede tener que acceder a pocos cubos secuencialmente para obtener el cubo de datos requerido. Podemos ver que el tiempo de afinación tiende a ser estable a medida que aumenta la duración de la emisión. En la figura 6 se considera m= 4. Aquí podemos ver que el exponencial y el rendimiento distribuido casi de manera similar, aunque el primero parece funcionar ligeramente mejor a medida que aumenta la longitud de emisión. Un patrón muy interesante es visible en la figura 7. Para las emisiones de menor tamaño, el LBIS parece tener un tiempo de afinación mayor que los otros dos esquemas. Pero a medida que aumenta la duración de la emisión, es claramente visible que el LBIS supera a los otros dos esquemas. La indexación del árbol distribuido muestra un comportamiento similar al del LBIS. El tiempo de afinación en LBIS sigue siendo bajo porque el algoritmo permite a la MU saltarse algunos Índices Menores intermedios. Esto permite que la MU se mueva a niveles más bajos directamente después de entrar en modo activo, ahorrando así energía valiosa. Esta acción no es posible en la indexación de árboles distribuidos y por lo tanto podemos observar que su tiempo de afinación es más que el esquema LBIS, aunque tiene mejores resultados que el esquema exponencial. La Figura 8, en contraste, nos muestra que el tiempo de afinación en LBIS, aunque menor que los otros dos esquemas, tiende a aumentar bruscamente a medida que la longitud de emisión se hace mayor que las 15000 páginas. Esto puede atribuirse tanto al aumento del tiempo necesario para escanear los Índices Menores intermedios como a la duración de la emisión. Pero podemos observar que la pendiente de la curva LBIS es significativamente menor que las otras dos curvas. Tabla 1 Parámetros de simulación P Valores de definición N Número de datos Elementos 5000 - 25000 m Número de nodos de ubicación internos 3, 4, 5, 6 B Capacidad de cubo sin índice (para índice exponencial) 10,64,128,256 i Base de índice para índice exponencial 2,4,6,8 k Tamaño del índice para árbol distribuido 8 bytes Los resultados de la simulación establecen algunos hechos sobre nuestro esquema de indexación basado en la ubicación. En la mayoría de los casos, el sistema funciona mejor que los otros dos en términos de tiempo de afinación. A medida que aumenta la duración de la emisión, después de cierto punto, aunque el tiempo de afinación aumenta como resultado de factores que hemos descrito antes, el esquema siempre funciona mejor que los otros dos esquemas. Debido al límite prescrito del número de páginas en el papel, no podemos mostrar más resultados. Pero estos resultados omitidos muestran una tendencia similar a la de los resultados representados en la figura 5-8. 7. CONCLUSIÓN Y FUTURO TRABAJO En este trabajo hemos presentado un esquema para el mapeo de datos de radiodifusión inalámbrica con sus ubicaciones. Hemos presentado un ejemplo para mostrar cómo la estructura jerárquica del árbol de ubicación mapea con los datos para crear LDD. Hemos presentado un esquema llamado LBIS para indexar este LDD. Hemos utilizado la propiedad de contención de LDD en el esquema que limita la búsqueda a un estrecho rango de datos en la emisión, ahorrando así energía valiosa en el dispositivo. La asignación de datos con ubicaciones y el esquema de indexación se utilizará en nuestro proyecto DAYS para crear la arquitectura basada en empuje. El LBIS se ha comparado con otros dos sistemas de indexación prominentes, a saber, el sistema de indexación de árboles distribuidos y el sistema de indexación exponencial. En nuestras simulaciones demostramos que el esquema LBIS tiene el menor tiempo de afinación para las emisiones que tienen un gran número de páginas, ahorrando así una valiosa potencia de batería en la MU. 22 En el trabajo futuro tratamos de incorporar la arquitectura basada en el tirón en nuestro proyecto DAYS. Los datos del servidor están disponibles para el acceso de los usuarios globales. Esto se puede hacer poniendo una solicitud al servidor de origen. La consulta en este caso es una consulta global. Se transfiere del servidor de origen de los usuarios al servidor de destino mediante el uso de satélites LEO. Tenemos la intención de utilizar nuestro esquema de LDD y arquitectura de estadificación de datos en la arquitectura basada en el tirón. Demostraremos que el esquema de LDD junto con la arquitectura de estadificación de datos mejora significativamente la latencia para la consulta global y local. 8. REFERENCIAS [1] Acharya, S., Alonso, R. Franklin, M y Zdonik S. Disco de transmisión: Gestión de datos para entornos de comunicación asimétricos. En Actas de la Conferencia de la ACM SIGMOD sobre Gestión de Datos, págs. 199 a 210, San José, CA, mayo de 1995. [2] Chen, M.S.,Wu, K.L. y Yu, P. S. Optimizando la asignación de índices para la difusión secuencial de datos en la computación móvil inalámbrica. IEEE Transactions on Knowledge and Data Engineering (TKDE), 15(1):161-173, enero/febrero de 2003. Gráfico 5 Tamaño de la transmisión (# cubos) Dist tree Expo LBIS Figura 6. Tamaño de la transmisión (# cubos) Dist tree Expo LBIS Figura 7. Tamaño de la transmisión (# cubos) Dist tree Expo LBIS Figura 8. Tamaño de la transmisión (# cubos) Árbol dist Expo LBIS Tiempo medio de afinación Tiempo medio de afinación Tiempo medio de afinación 23 [3] Hu, Q. L., Lee, D. L. y Lee, W.C. Evaluación del rendimiento de un sistema inalámbrico de difusión jerárquica de datos. En Actas de la Quinta Conferencia Internacional Anual de ACM sobre Computación y Redes Móviles (MobiCom99), págs. 163 a 173, Seattle, WA, agosto de 1999. [4] Hu, Q. L. Lee, W.C. y Lee, D. L. Power consultas conservadoras de múltiples atributos en la transmisión de datos. En Actas de la 16a Conferencia Internacional sobre Ingeniería de Datos (ICDE00), páginas 157-166, San Diego, CA, febrero de 2000. [5] Imielinski, T., Viswanathan, S. y Badrinath. B. R. Filtrado eficiente de energía de los datos en el aire. En Actas de la Cuarta Conferencia Internacional sobre Tecnología de Bases de Datos Ampliadas (EDBT94), págs. 245 a 258, Cambridge, Reino Unido, marzo de 1994. [6] Imielinski, T., Viswanathan, S. y Badrinath. B. R. Datos sobre el aire - Organización y acceso. Operaciones de IEEE en Ingeniería de Conocimientos e Datos (TKDE), 9(3):353-372, mayo/junio de 1997. [7] Shih, E., Bahl, P. y Sinclair, M. J. Wake on wireless: Una estrategia de ahorro de energía impulsada por eventos para dispositivos operados por baterías. En Actas de la 8a Conferencia Internacional Anual de ACM sobre Computación y Redes Móviles (MobiCom02), págs. 160 a 171, Atlanta, GA, septiembre de 2002. [8] Shivakumar N. y Venkatasubramanian, S. Indización energéticamente eficiente para la difusión de información en sistemas inalámbricos. ACM/Baltzer Journal of Mobile Networks and Applications (MONET), 1(4):433-446, diciembre de 1996. [9] Tan K. L. y Yu, J. X. Filtración energéticamente eficiente de emisiones no uniformes. En Actas de la 16a Conferencia Internacional sobre Sistemas de Computación Distribuida (ICDCS96), págs. 520 a 527, Hong Kong, mayo de 1996. [10] Viredaz, M. A., Brakmo, L. S. y Hamburgen, W. R. Gestión de energía en dispositivos portátiles. ACM Coue, 1(7):44-52, octubre de 2003. [11] Garg, N. Kumar, V., & Dunham, M.H. Mapeo e indización de información en DAYS, 6o Taller Internacional sobre Movilidad en Bases de Datos y Sistemas Distribuidos, en conjunción con la 14a Conferencia Internacional sobre Aplicaciones de Bases de Datos y Sistemas Expertos, 1o a 5 de septiembre, Praga, República Checa, 2003. [12] Acharya D., Kumar, V., & Dunham, M.H. InfoSpace: Sistema de difusión de datos públicos híbrido y adaptativo para computación ubicua. Aceptado para publicación en el número especial de Pervasive Computing. Wiley Journal for Wireless Communications and Mobile Computing, 2004. [13] Acharya D., Kumar, V., & Prabhu, N. Descubriendo y usando Servicios Web en M-Commerce, Proceedings for 5th VLDB Workshop on Technologies for E-Services, Toronto, Canada,2004. [14] Acharya D., Kumar, V. Indexing Location Depending Data in broadcast en ambiente. Aceptado para su publicación, número especial de JDIM sobre Gestión de Datos Distribuidos, 2005. [15] Flinn, J., Sinnamohideen, S., & Satyanarayan, M. Data Staging on No Trusted Surrogates, Intel Research, Pittsburg, Unpublished Report, 2003. [16] Seydim, A.Y., Dunham, M.H. & Kumar, V. Location dependiente consulta processing, Actas del segundo taller internacional de ACM sobre ingeniería de datos para acceso inalámbrico y móvil, p.47-53, Santa Barbara, California, USA, 2001. [17] Xu, J., Lee, W.C., Tang., X. Índice exponencial: Un esquema de indexación distribuida para los datos sobre el aire. En Actas de la II Conferencia Internacional ACM/USENIX sobre Sistemas, Aplicaciones y Servicios Móviles (MobiSys04), Boston, MA, junio de 2004. 24 ",
            "error": []
        },
        "mobile user": {
            "translated_key": "usuario móvil",
            "translated_annotated_text": "Esquema de Indización basado en la ubicación para DAYS Debopam Acharya y Vijay Kumar 1 Computer Science and Informatics University of Missouri-Kansas City Kansas City, MO 64110 dargc(kumarv)@umkc.edu RESUMEN La difusión de datos a través de canales inalámbricos para transmitir información a los consumidores se está volviendo bastante común. Se han propuesto muchos planes de difusión, pero la mayoría de ellos llevan los datos a canales inalámbricos para consumo general. La difusión basada en push [1] es esencialmente asimétrica, es decir, el volumen de datos es mayor desde el servidor a los usuarios que desde los usuarios de vuelta al servidor. El esquema basado en el empuje requiere una indexación que indica cuándo se transmitirán los datos y su posición en la emisión. Latencia de acceso y tiempo de afinación son los dos parámetros principales que pueden utilizarse para evaluar un esquema de indexación. Dos de los importantes esquemas de indexación propuestos anteriormente se basaban en los árboles y los esquemas de indexación exponencial. Ninguno de estos planes pudo satisfacer los requisitos de los datos dependientes de la ubicación (DDL), que es una característica muy deseable de la difusión de datos. En este artículo, discutimos la emisión de LDD en nuestro proyecto DAta in Your Space (DAYS), y proponemos un esquema para la indexación de LDD. Argumentamos que este sistema, cuando se aplica a la DDTS, mejora significativamente el rendimiento en términos de tiempo de afinación en los esquemas antes mencionados. Demostramos nuestro argumento con la ayuda de resultados de simulación. Categorías y Descriptores sujetos H.3.1 [Sistemas de información]: Almacenamiento y recuperación de información - análisis e indexación de contenido; H.3.3 [Sistemas de información]: Almacenamiento y recuperación de información - búsqueda y recuperación de información. Términos generales Algoritmos, Rendimiento, Experimentación 1. INTRODUCCIÓN La difusión inalámbrica de datos es una forma económica y eficiente de poner los datos deseados a disposición de un gran número de usuarios móviles o estáticos. El modo de transferencia de datos es esencialmente asimétrico, es decir, la capacidad de transferencia de datos (comunicación descendente) del servidor al cliente (\"usuario móvil\") es significativamente mayor que el cliente o \"usuario móvil\" al servidor (comunicación ascendente). La eficacia de un sistema de difusión de datos se determina por su capacidad para proporcionar a los usuarios los datos requeridos en cualquier lugar y en cualquier momento. Una de las mejores maneras de lograr esto es a través de la difusión de servicios basados en la ubicación altamente personalizados (LBS) que permite a los usuarios acceder a datos dependientes de la ubicación personalizada. Un ejemplo sería alguien usando su dispositivo móvil para buscar un restaurante vegetariano. La aplicación LBS interactuaría con otros componentes de tecnología de localización o utilizaría la entrada de usuarios móviles para determinar la ubicación de los usuarios y descargar la información sobre los restaurantes cercanos al usuario sintonizando el canal inalámbrico que está difundiendo LDD. Vemos un despliegue limitado de LBS por parte de algunos proveedores de servicios. Pero hay todos los indicios de que con el tiempo se resolverán algunos de los complejos problemas técnicos, como el marco de localización uniforme, el cálculo y el seguimiento de ubicaciones en todo tipo de lugares, el posicionamiento en diversos entornos, aplicaciones de localización innovadoras, etc., y LBS se convertirá en una instalación común y ayudará a mejorar la productividad del mercado y el confort del cliente. En nuestro proyecto llamado DAYS, utilizamos el mecanismo de difusión de datos inalámbricos para impulsar LDD a los usuarios y usuarios móviles monitorear y sintonizar el canal para encontrar y descargar los datos requeridos. Sin embargo, es probable que una emisión simple cause una degradación significativa del rendimiento de los dispositivos móviles con limitaciones energéticas, y una solución común a este problema es el uso de una indexación eficiente del aire. El enfoque de indexación almacena información de control que informa al usuario sobre la ubicación de los datos en la emisión y cómo y cuándo pudo acceder a ella. Un \"usuario móvil\", por lo tanto, tiene algún tiempo libre para entrar en el modo de dormitar que conserva valiosa energía. También permite al usuario personalizar su propio dispositivo móvil afinando selectivamente la información de su elección. La eficiencia del acceso y la conservación de la energía son las dos cuestiones importantes para los sistemas de radiodifusión de datos. La eficiencia de acceso se refiere a la latencia experimentada cuando se inicia una solicitud hasta que se recibe la respuesta. Conservación de la energía [7, 10] se refiere al uso eficiente de la energía limitada del dispositivo móvil para acceder a los datos de radiodifusión. Dos parámetros que afectan a estos son el tiempo de afinación y la latencia de acceso. El tiempo de sintonización se refiere al tiempo durante el cual la unidad móvil (MU) permanece en estado activo para sintonizar el canal y descargar los datos requeridos. También se puede definir como el número de cubos sintonizados por el dispositivo móvil en estado activo para obtener los datos requeridos. La latencia de acceso puede definirse como el tiempo transcurrido desde que se ha emitido una solicitud hasta que se ha recibido la respuesta. 1 Esta investigación fue apoyada por una subvención de NSF IIS-0209170. En el pasado se han propuesto varios esquemas de indexación, entre los que destacan los basados en árboles y los esquemas de indexación exponencial [17]. Las principales desventajas de los esquemas basados en árboles son que se basan en estructuras arbóreas centralizadas. Para iniciar una búsqueda, la MU tiene que esperar hasta que llegue a la raíz del siguiente árbol de transmisión. Esto afecta significativamente el tiempo de afinación de la unidad móvil. Los esquemas exponenciales facilitan la replicación de índices compartiendo enlaces en diferentes árboles de búsqueda. Para las emisiones con un gran número de páginas, se ha demostrado que el esquema exponencial funciona de manera similar a los esquemas basados en árboles en términos de latencia de acceso. Además, la duración media de la emisión aumenta debido a la replicación del índice y esto puede causar un aumento significativo de la latencia del acceso. Ninguno de los sistemas de indexación mencionados es igualmente eficaz en la difusión de datos dependientes de la ubicación. Además de proporcionar baja latencia, carecen de propiedades que se utilizan para abordar los problemas de DDT. Proponemos un esquema de indexación en DAYS que se ocupa de algunos de estos problemas. Demostramos con resultados de simulación que nuestro esquema supera a algunos de los esquemas de indexación anteriores para la difusión de LDD en términos de tiempo de afinación. El resto del documento se presenta de la siguiente manera. En la sección 2, se analiza el trabajo anterior relacionado con la indexación de los datos de radiodifusión. La sección 3 describe nuestra arquitectura DAYS. Los datos dependientes de la ubicación, su generación y su posterior difusión se presentan en la sección 4. La sección 5 discute nuestro esquema de indexación en detalle. La simulación de nuestro esquema y su evaluación del desempeño se presenta en la sección 6. En la sección 7 se concluye el documento y se menciona la labor futura relacionada. 2. TRABAJO ANTERIOR Varias técnicas de indexación basadas en discos se han utilizado para la indexación de aire. Imielinski et al. [5, 6] aplicó el árbol del índice B+, donde los nodos de la hoja almacenan los tiempos de llegada de los ítems de datos. Se propuso el método de indexación distribuida para reproducir y distribuir eficientemente el árbol de índices en una emisión. Específicamente, el árbol índice se divide en una parte replicada y una parte no replicada. Cada emisión consiste en la parte replicada y la parte no replicada que indiza los elementos de datos inmediatamente después de ella. Como tal, cada nodo en la parte no replicada aparece sólo una vez en una emisión y, por lo tanto, reduce el costo de replicación y latencia de acceso, al tiempo que logra un buen tiempo de afinación. Chen et al. [2] y Shivakumar et al. [8] considera estructuras de árboles desequilibradas para optimizar el consumo de energía para el acceso a datos no uniformes. Estas estructuras minimizan el costo medio de búsqueda de índices reduciendo el número de búsquedas de datos en caliente a expensas de gastar más en datos en frío. Tan y Yu discutieron la organización de datos e índices bajo la emisión sesgada También se han sugerido métodos de Hashing y firma para la transmisión inalámbrica que admite consultas de igualdad [9]. En [5] se propuso un método flexible de indización. El índice flexible primero clasifica los elementos de datos en orden ascendente (o descendente) de los valores clave de búsqueda y luego los divide en segmentos p. El primer cubo en cada segmento de datos contiene un índice de control, que es un índice binario que asigna un valor clave dado al segmento que contiene esa clave, y un índice local, que es un índice de entrada m que asigna un valor clave dado a los cubos dentro del segmento actual. Al afinar los parámetros de p y m, los clientes móviles pueden lograr un buen tiempo de afinación o una buena latencia de acceso. Otra técnica de indexación propuesta es el esquema de indexación exponencial [17]. En este esquema, se utiliza un índice parametrizado, llamado índice exponencial, para optimizar la latencia del acceso o el tiempo de afinación. Facilita la replicación de índices mediante la vinculación de diferentes árboles de búsqueda. Todos los regímenes mencionados se han aplicado a datos que no están relacionados entre sí. Estos datos no relacionados pueden agruparse o no agruparse. Sin embargo, ninguno de ellos se ha ocupado específicamente de los requisitos de la DDT. Los datos dependientes de la ubicación son datos que están asociados con una ubicación. En la actualidad hay varias aplicaciones que se ocupan de la DDTS [13, 16]. Casi todos ellos representan LDD con la ayuda de estructuras jerárquicas [3, 4]. Esto se basa en la propiedad de contención de datos dependientes de la ubicación. La propiedad Containment ayuda a determinar la posición relativa de un objeto definiendo o identificando ubicaciones que contienen esos objetos. Las ubicaciones subordinadas están jerárquicamente relacionadas entre sí. Así, la propiedad Containment limita la gama de disponibilidad u operación de un servicio. Usamos esta propiedad de contención en nuestro esquema de indexación para indexar LDD. 3. DAYS ARCHITECTURE DAYS se ha conceptualizado para difundir datos tópicos y no tópicos a los usuarios en un espacio de difusión local y para aceptar consultas de usuarios individuales a nivel mundial. Los datos tópicos, por ejemplo, información meteorológica, información de tráfico, información de existencias, etc., cambian constantemente con el tiempo. Los datos no tópicos como hotel, restaurante, precios inmobiliarios, etc., no cambian tan a menudo. Así, imaginamos la presencia de dos tipos de distribución de datos: En el primer caso, el servidor empuja los datos a los usuarios locales a través de canales inalámbricos. El otro caso se refiere al servidor que envía los resultados de las consultas de los usuarios a través de canales inalámbricos de enlace descendente. Técnicamente, vemos la presencia de dos tipos de colas en el acceso basado en datos. Una es una cola muy cargada que contiene consultas cargadas globalmente. La otra es una cola relativamente ligera que consiste en consultas subidas localmente. La arquitectura DAYS [12], como se muestra en la figura 1, consiste en un servidor de datos, programador de transmisiones, coordinador de DAYS, red de satélites LEO para la entrega de datos a nivel mundial y un espacio de transmisión local. Los datos se introducen en el espacio de transmisión local para que los usuarios puedan sintonizarse con los canales inalámbricos para acceder a los datos. El espacio de transmisión local consiste en una torre de transmisión, unidades móviles y una red de máquinas de puesta en escena de datos llamadas subrogados. La estadificación de datos en sustitutos se ha investigado anteriormente como una técnica exitosa [12, 15] para los datos relacionados con los usuarios de caché. Creemos que la estadificación de datos se puede utilizar para reducir drásticamente el tiempo de latencia tanto para los datos de radiodifusión local como para las respuestas globales. La solicitud de consulta en los sustitutos puede utilizarse posteriormente para generar los patrones de popularidad que finalmente deciden el horario de emisión [12]. 18 Popularidad Comentarios de Surrogates for Broadcast Scheduler Local Space Broadcast Tower SurrogateMU MU MU Servidor de datosHorario de radiodifusiónDÍAS Coordinador Canal local de enlace descendente Canal global de enlace descendente Pull request cola cola Solicitud global cola Solicitud local cola Ubicación índice basado en Starbucks Plaza Kansas City Figura 1. Arquitectura DAYS Figura 2. Ubicación Estructura deStarbucks, Plaza 4. DATOS DEPENDIENTES DE LOCALIZACIÓN (LDD) Argumentamos que la incorporación de información de ubicación en la transmisión inalámbrica de datos puede disminuir significativamente la latencia de acceso. Esta propiedad se convierte en muy útil para la unidad móvil que tiene capacidad de almacenamiento y procesamiento limitada. Hay una variedad de aplicaciones para obtener información sobre tráfico, reservas de restaurantes y hoteles, comida rápida, gasolineras, oficina de correos, tiendas de comestibles, etc. Si estas aplicaciones se combinan con información de ubicación, entonces la búsqueda será rápida y altamente rentable. Una propiedad importante de las ubicaciones es Containment que ayuda a determinar la ubicación relativa de un objeto con respecto a su padre que contiene el objeto. Por lo tanto, Containment limita el rango de disponibilidad de un dato. Usamos esta propiedad en nuestro esquema de indexación. La base de datos contiene los contenidos transmitidos que se convierten en LDD [14] asociándolos con las ubicaciones respectivas para que puedan transmitirse de manera agrupada. El agrupamiento de LDD ayuda al usuario a localizar la información de manera eficiente y soporta la propiedad de contención. Presentamos un ejemplo para justificar nuestra propuesta. Ejemplo: Supongamos que un usuario emite una consulta Starbucks Coffee en Plaza por favor. para acceder a información sobre la sucursal Plaza de Starbucks Coffee en Kansas City. En el caso de la ubicación independiente establecido el sistema enumerará todas las cafeterías Starbucks en el área de Kansas City. Es evidente que esas respuestas aumentarán la latencia del acceso y no son deseables. Estos se pueden administrar de manera eficiente si el servidor tiene datos dependientes de la ubicación, es decir, una asignación entre los datos de una cafetería de Starbucks y su ubicación física. Además, para una consulta que incluya el rango de ubicaciones de Starbucks, bastará con una sola consulta solicitando ubicaciones para toda la región de Kansas City, como se muestra en la Figura 2. Esto ahorrará una enorme cantidad de ancho de banda al disminuir el número de mensajes y, al mismo tiempo, será útil para prevenir el cuello de botella de escalabilidad en una zona muy poblada. 4.1 Función de asignación para LDD El ejemplo justifica la necesidad de una función de asignación para procesar consultas dependientes de la ubicación. Esto será especialmente importante para las consultas basadas en la atracción en todo el mundo para las cuales la respuesta podría estar compuesta para diferentes partes del mundo. La función de mapeo es necesaria para construir el horario de emisión. Definimos Global Property Set (GPS) [11], Information Content (IC) set, and Location Jerarchy (LH) set where IC  GPS and LH  GPS to develop a mapping function. LH = {l1, l2, l3...,lk} donde li representan ubicaciones en el árbol de ubicación y IC = {ic1, ic2, ic3,...,icn} donde ici representan tipo de información. Por ejemplo, si tenemos tráfico, tiempo, y la información de stock están en transmisión entonces IC = {ictráfico, icweather, e icstock}. El esquema de asignación debe ser capaz de identificar y seleccionar un miembro IC y un nodo LH para (a) asociación correcta, (b) coincidencia de granularidad, (c) y condición de terminación. Por ejemplo, el clima • IC podría estar asociado con un país o un estado o una ciudad o un pueblo de LH. La coincidencia de granularidad entre el tiempo y un nodo LH es según el requisito del usuario. Así, con una granularidad gruesa la información meteorológica se asocia con un país para obtener el clima de los países y con la ciudad en una granularidad más fina. Si una ciudad es la mejor granularidad, entonces define la condición terminal para la asociación entre IC y LH para el tiempo. Esto significa que un usuario no puede obtener información meteorológica sobre la subdivisión de una ciudad. En realidad, el clima de una subdivisión no tiene ningún sentido. Desarrollamos un simple esquema de mapeo heurístico basado en las necesidades del usuario. Dejar IC = {m1, m2,m3.,..., mk}, donde mi representa su elemento y dejar LH = {n1, n2, n3,..., nl}, donde ni representa miembro LHs. Definimos GPS para IC (GPSIC)  GPS y para LH (GPSLH)  GPS como GPSIC = {P1, P2,..., Pn}, donde P1, P2, P3,..., Pn son propiedades de sus miembros y GPSLH = {Q1, Q2,..., Qm} donde Q1, Q2,..., Qm son propiedades de sus miembros. Las propiedades de un miembro particular de IC son un subconjunto de GPSIC. Generalmente es cierto que (conjunto de propiedades (miÃ3n IC) â € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € Por ejemplo, stock • IC y película • IC calificación no tienen ninguna propiedad en común. Asumimos que dos o más miembros del CI tienen al menos una propiedad geográfica común (es decir, lugar) porque DAYS transmite información sobre esas categorías, que están estrechamente vinculadas con un lugar. Por ejemplo, las acciones de una empresa están relacionadas con un país, el clima está relacionado con una ciudad o estado, etc. Definimos el subconjunto de propiedades de mio IC como PSm i ♥ mi • IC y PSm i = {P1, P2,..., Pr} donde r ≤ n. • Pr {Pr • PSm i → Pr • GPSIC} que implica que • i, PSm i  GPSIC. Las propiedades geográficas de este conjunto son indicativas de si mi IC puede ser mapeado a un solo nivel de granularidad (es decir. una sola ubicación) en LH o varios niveles de granularidad (es decir, más de un nodo en 19 de la jerarquía) en LH. ¿Cuántos y qué niveles de granularidad debe un mapa mi, depende del nivel en el que el proveedor de servicios quiere proporcionar información sobre el mi en cuestión. Del mismo modo, definimos un subconjunto de propiedades de los miembros de LH como PSn j Ł nj Ł LH que puede ser escrito como PSn j ={Q1, Q2, Q3,..., Qs} donde s ≤ m. Además, El proceso de mapeo de IC a LH es entonces identificar para algunos mxÃ3 IC uno o mÃ¡s nyÃ3 LH tal que PSmx Ã3 PSnv Esto significa que cuando mx mapea a ny y a todos los niños de ny si mx puede mapear a múltiples niveles de granularidad o mx mapea sólo a ny si mx puede mapear a un solo nivel de granularidad. Asumimos que los nuevos miembros pueden unirse y los antiguos miembros pueden salir de IC o LH en cualquier momento. La eliminación de miembros del espacio del CI es simple, pero la adición de miembros al espacio del CI es más restrictiva. Si queremos añadir un nuevo miembro al espacio IC, primero definimos un conjunto de propiedades para el nuevo miembro: PSmnew_m ={P1, P2, P3,..., Pt} y lo añadimos al CI sólo si la condición: Este régimen tiene una ventaja adicional al permitir a los proveedores de servicios de información controlar el tipo de información que desean proporcionar a los usuarios. Presentamos el siguiente ejemplo para ilustrar el concepto de mapeo. IC = {Tráfico, Stock, Restaurante, Tiempo, Fechas importantes de la historia, Condiciones de la carretera} LH = {País, Estado, Ciudad, Código postal, Principales carreteras} GPSIC = {Surface-mobility, Roads, High, Low, Italian-food, StateName, Temp, CityName, Seat-disponibilidad, Zip, Traffic-jams, Además, PS(ICStock) indicó que Stock solo puede mapear a un solo país. Cuando consideramos el miembro Tráfico del espacio IC, sólo PS(ICTraffic) â € ¢ PScity â € TM. Como PS(ICTRAFFIC) indica que Traffic puede mapear a una sola ubicación, solo mapea a City y a ninguno de sus hijos. Ahora bien, a diferencia de Stock, el mapeo del tráfico con las principales carreteras, que es un hijo de la ciudad, es significativo. Sin embargo, los proveedores de servicios tienen derecho a controlar los niveles de granularidad a los que desean proporcionar información sobre un miembro del espacio IC. PS(ICRoad conditions) • PSState  y PS(ICRoad conditions) • PSCity. Así que las condiciones de la carretera son mapas al Estado, así como a la ciudad. Como PS(ICRoad conditions) indica que las condiciones de la carretera pueden mapear a múltiples niveles de granularidad, las condiciones de la carretera también mapearán a Zip Code y las principales carreteras, que son los niños del Estado y la ciudad. Del mismo modo, los mapas del restaurante sólo al código postal, y los mapas meteorológicos al estado, la ciudad y sus hijos, las carreteras principales y el código postal. 5. ESQUEMA DE ÍNDICE BASADA EN LOCALIZACIÓN Esta sección discute nuestro esquema de indexación basado en la ubicación (LBIS). El esquema está diseñado para ajustarse a la emisión LDD en nuestro proyecto DAYS. Como se discutió anteriormente, utilizamos la propiedad de contención de LDD en el esquema de indexación. Esto limita significativamente la búsqueda de nuestros datos requeridos a una parte particular de la transmisión. Por lo tanto, argumentamos que el esquema proporciona tiempo de afinación limitado. Describimos la arquitectura de nuestro esquema de indexación. Nuestro esquema contiene cubos de datos separados y cubos de índices. Los cubos de índice son de dos tipos. El primer tipo se llama el índice Mayor. El índice Major proporciona información sobre los tipos de datos transmitidos. Por ejemplo, si tenemos la intención de transmitir información como Entretenimiento, Tiempo, Tráfico, etc., entonces el índice principal apunta a estos tipos principales de información y/o sus principales subtipos de información, el número de subtipos principales variando de una información a otra. Esto limita estrictamente el número de accesos a un índice principal. El índice Major nunca apunta a los datos originales. Señala a los subíndices llamados el índice Menor. Los índices menores son los índices que realmente apuntan a los datos originales. Llamamos a estos indicadores menores como punteros de ubicación, ya que apunta a los datos que están asociados con una ubicación. Por lo tanto, nuestra búsqueda de datos incluye el acceso a un índice mayor y algunos índices menores, el número de índice menor variando dependiendo del tipo de información. Por lo tanto, nuestro esquema de indexación tiene en cuenta la naturaleza jerárquica del LDD, la propiedad Containment, y requiere que nuestro programa de transmisión se agrupe en función del tipo de datos y la ubicación. La estructura de la jerarquía de ubicación requiere el uso de diferentes tipos de índice en diferentes niveles. La estructura y las posiciones del índice dependen estrictamente de la jerarquía de ubicación descrita anteriormente en nuestro esquema de asignación. Ilustramos la implementación de nuestro esquema con un ejemplo. Posteriormente se mencionan las normas para la elaboración del índice. 20 A1 Entretenimiento Restaurante Película A2 A3 A4 R1 R2 R3 R4 R5 R6 R7 R8 Tiempo KC SL JC SF Entretenimiento R1 R2 R3 R4 R4 R5 R6 R7 R8 KC SL JC SF (A, R, NEXT = 8) 3, R5 4, R7 Tipo (S, L) ER W E EM (1, 4) (5, Información cartográfica de ubicación para radiodifusión Figura 4. Datos junto con el índice basado en la ubicación Ejemplo: Supongamos que nuestro contenido de transmisión contiene ICentertainment y ICweather que se representa como se muestra en la Fig. 3. Ai representa las áreas de la ciudad y Ri representa las carreteras en un área determinada. Las hojas de la estructura meteorológica representan cuatro ciudades. La estructura del índice se indica en la Fig. 4 que muestra la posición del índice mayor y menor y los datos en el horario de emisión. Proponemos las siguientes reglas para la creación del programa de emisión indexado por aire: • Se crean el índice mayor y el índice menor. • El índice principal contiene la posición y el rango de diferentes tipos de ítems de datos (Weather and Entertainment, Figura 3) y sus categorías. Las subcategorías de Entretenimiento, Cine y Restaurante, también están en el índice. Así, el índice principal contiene Entretenimiento (E), Entretenimiento-Movie (EM), Entretenimiento-Restaurante (ER), y Tiempo (W). La tupla (S, L) representa la posición inicial (S) del elemento de datos y L representa el rango del elemento en términos de número de cubos de datos. • El índice menor contiene las variables A, R y un puntero Siguiente. En nuestro ejemplo (Figura 3), la carretera R representa el primer nodo del área A. El índice menor se utiliza para apuntar a cubos de datos reales presentes en los niveles más bajos de la jerarquía. En cambio, el índice principal apunta a una gama más amplia de ubicaciones, por lo que contiene información sobre las principales y subcategorías de datos. • La información del índice no se incorpora en los cubos de datos. Los cubos de índice están separados que contienen sólo la información de control. • El número de cubos índice m=#(IC), IC = {ic1, ic2, ic3,...,icn} donde ici representa el tipo de información y # representa la cardinalidad del conjunto de contenido de información IC. En este ejemplo, IC= {icMovie, icWeather, icRestaurant} y así #(IC) =3. Por lo tanto, el número de cubos índice principales es 3. • El mecanismo para resolver la consulta está presente en el coordinador de java en MU. Por ejemplo, si una consulta Q se presenta como Q (Entretenimiento, Película, Road_1), entonces la búsqueda resultante será para la información EM en el índice principal. Nosotros decimos, Q EM. Nuestro índice propuesto funciona de la siguiente manera: Supongamos que una MU emite una consulta que está representada por Java Coordinador presente en la MU como información de restaurante en la carretera 7. Esto es resuelto por el coordinador como Q ER. Esto significa que uno tiene que buscar la unidad de índice ER en el índice principal. Supongamos que el MU entra en el canal en R2. El primer índice que recibe es un índice menor después de R2. En este índice, el valor de la variable Siguiente = 4, lo que significa que el siguiente índice mayor está presente después del cubo 4. La MU puede entrar en modo somnoliento. Se activa después del cubo 4 y recibe el índice principal. Busca información de ER que es la primera entrada en este índice. Ahora es seguro que la MU obtendrá la posición del cubo de datos en el índice menor contiguo. La segunda unidad en el índice menor representa la posición de los datos requeridos R7. Indica que el cubo de datos es el primer cubo en el Área 4. El MU vuelve a entrar en modo somnífero y se activa después del cubo 6. Obtiene los datos necesarios en el siguiente cubo. Presentamos el algoritmo para buscar el Índice basado en la ubicación. Algoritmo 1 Índice basado en la ubicación Buscar en DAYS 1. Escanear la transmisión para el siguiente cubo índice, encontrado=falso 2. Mientras que (no se encuentra) hacer 3. si cubo es el índice mayor entonces 4. Encuentra el Tipo & Tupla (S, L) 5. si S es mayor que 1, entra en modo Doze durante S segundos 6. termina si 7. Despierta en el cubo Sth y observa el índice menor 8. termina si 9. si el cubo es índice menor entonces 10. si TypeRequest no es igual a Typefound y (A,R)Solicitud no es igual a (A,R)found entonces 11. Vaya al modo de doze hasta el SIGUIENTE y repita desde el paso 3 12. terminar si 13. de lo contrario encontrar entrada en Índice Menor que apunta a los datos 14. Calcular la hora de llegada T del cubo de datos 15. Entra en modo somnífero hasta la T 16. Despierta en T y accede a los datos, encontrados = verdadero 17. fin de lo contrario 18. final si 19. final Mientras que 21 6. EVALUACIÓN DE LA EJECUCIÓN La conservación de la energía es la principal preocupación cuando tratamos de acceder a los datos de la transmisión inalámbrica. Un sistema eficiente debe permitir al dispositivo móvil acceder a los datos que necesita manteniéndose activo durante un período mínimo de tiempo. Esto ahorraría una cantidad considerable de energía. Dado que los elementos se distribuyen en función de los tipos y se asignan a ubicaciones adecuadas, argumentamos que nuestra transmisión se ocupa de los tipos de datos agrupados. La unidad móvil tiene que acceder a un índice mayor y a un índice menor relativamente menor para obtener información sobre la hora de llegada de los datos. Esto contrasta con el esquema exponencial donde los índices son de tamaños iguales. El ejemplo discutido y Algoritmo 1 revela que para acceder a cualquier dato, necesitamos acceder al índice mayor sólo una vez seguido por uno o más accesos al índice menor. El número de accesos menores al índice depende del número de ubicaciones internas. Como el número de ubicaciones internas varía de elemento a elemento (por ejemplo, Weather está generalmente asociado con una ciudad mientras que el tráfico se granula hasta las carreteras principales y menores de una ciudad), argumentamos que la estructura de la información de localización mapeada puede ser visualizada como un bosque que es una colección de árboles generales, el número de árboles generales dependiendo de los tipos de información transmitida y la profundidad de un árbol dependiendo de la granularidad de la información de Para nuestros experimentos, asumimos el bosque como una colección de árboles M-ary equilibrados. Asumimos además que los árboles de la arteria M están llenos al asumir la presencia de nodos ficticios en diferentes niveles de un árbol. Así, si el número de ítems de datos es d y la altura del árbol es m, entonces n= (m*d-1)/(m-1) donde n es el número de vértices en el árbol e i= (d-1)/(m-1) donde i es el número de vértices internos. El tiempo de afinación para un ítem de datos implica 1 unidad de tiempo requerido para acceder al índice principal más el tiempo requerido para acceder a los ítems de datos presentes en las hojas del árbol. Por lo tanto, el tiempo de sintonización con d ítems de datos es t = logmd+1 Podemos decir que el tiempo de sintonización está limitado por O(logmd). Comparamos nuestro esquema con el esquema de indexación distribuida y exponencial. Asumimos una emisión plana y el número de páginas que varían de 5000 a 25000. Los diversos parámetros de simulación se muestran en la Tabla 1. La Figura 5-8 muestra los tiempos relativos de afinación de tres algoritmos de indexación, es decir, el LBIS, esquema exponencial y el esquema de árbol distribuido. La Figura 5 muestra el resultado para el número de nodos internos de ubicación = 3. Podemos ver que LBIS supera significativamente a los otros esquemas. El tiempo de afinación en LBIS varía de aproximadamente 6,8 a 8. Este gran tiempo de afinación se debe al hecho de que después de alcanzar el índice menor más bajo, la MU puede tener que acceder a pocos cubos secuencialmente para obtener el cubo de datos requerido. Podemos ver que el tiempo de afinación tiende a ser estable a medida que aumenta la duración de la emisión. En la figura 6 se considera m= 4. Aquí podemos ver que el exponencial y el rendimiento distribuido casi de manera similar, aunque el primero parece funcionar ligeramente mejor a medida que aumenta la longitud de emisión. Un patrón muy interesante es visible en la figura 7. Para las emisiones de menor tamaño, el LBIS parece tener un tiempo de afinación mayor que los otros dos esquemas. Pero a medida que aumenta la duración de la emisión, es claramente visible que el LBIS supera a los otros dos esquemas. La indexación del árbol distribuido muestra un comportamiento similar al del LBIS. El tiempo de afinación en LBIS sigue siendo bajo porque el algoritmo permite a la MU saltarse algunos Índices Menores intermedios. Esto permite que la MU se mueva a niveles más bajos directamente después de entrar en modo activo, ahorrando así energía valiosa. Esta acción no es posible en la indexación de árboles distribuidos y por lo tanto podemos observar que su tiempo de afinación es más que el esquema LBIS, aunque tiene mejores resultados que el esquema exponencial. La Figura 8, en contraste, nos muestra que el tiempo de afinación en LBIS, aunque menor que los otros dos esquemas, tiende a aumentar bruscamente a medida que la longitud de emisión se hace mayor que las 15000 páginas. Esto puede atribuirse tanto al aumento del tiempo necesario para escanear los Índices Menores intermedios como a la duración de la emisión. Pero podemos observar que la pendiente de la curva LBIS es significativamente menor que las otras dos curvas. Tabla 1 Parámetros de simulación P Valores de definición N Número de datos Elementos 5000 - 25000 m Número de nodos de ubicación internos 3, 4, 5, 6 B Capacidad de cubo sin índice (para índice exponencial) 10,64,128,256 i Base de índice para índice exponencial 2,4,6,8 k Tamaño del índice para árbol distribuido 8 bytes Los resultados de la simulación establecen algunos hechos sobre nuestro esquema de indexación basado en la ubicación. En la mayoría de los casos, el sistema funciona mejor que los otros dos en términos de tiempo de afinación. A medida que aumenta la duración de la emisión, después de cierto punto, aunque el tiempo de afinación aumenta como resultado de factores que hemos descrito antes, el esquema siempre funciona mejor que los otros dos esquemas. Debido al límite prescrito del número de páginas en el papel, no podemos mostrar más resultados. Pero estos resultados omitidos muestran una tendencia similar a la de los resultados representados en la figura 5-8. 7. CONCLUSIÓN Y FUTURO TRABAJO En este trabajo hemos presentado un esquema para el mapeo de datos de radiodifusión inalámbrica con sus ubicaciones. Hemos presentado un ejemplo para mostrar cómo la estructura jerárquica del árbol de ubicación mapea con los datos para crear LDD. Hemos presentado un esquema llamado LBIS para indexar este LDD. Hemos utilizado la propiedad de contención de LDD en el esquema que limita la búsqueda a un estrecho rango de datos en la emisión, ahorrando así energía valiosa en el dispositivo. La asignación de datos con ubicaciones y el esquema de indexación se utilizará en nuestro proyecto DAYS para crear la arquitectura basada en empuje. El LBIS se ha comparado con otros dos sistemas de indexación prominentes, a saber, el sistema de indexación de árboles distribuidos y el sistema de indexación exponencial. En nuestras simulaciones demostramos que el esquema LBIS tiene el menor tiempo de afinación para las emisiones que tienen un gran número de páginas, ahorrando así una valiosa potencia de batería en la MU. 22 En el trabajo futuro tratamos de incorporar la arquitectura basada en el tirón en nuestro proyecto DAYS. Los datos del servidor están disponibles para el acceso de los usuarios globales. Esto se puede hacer poniendo una solicitud al servidor de origen. La consulta en este caso es una consulta global. Se transfiere del servidor de origen de los usuarios al servidor de destino mediante el uso de satélites LEO. Tenemos la intención de utilizar nuestro esquema de LDD y arquitectura de estadificación de datos en la arquitectura basada en el tirón. Demostraremos que el esquema de LDD junto con la arquitectura de estadificación de datos mejora significativamente la latencia para la consulta global y local. 8. REFERENCIAS [1] Acharya, S., Alonso, R. Franklin, M y Zdonik S. Disco de transmisión: Gestión de datos para entornos de comunicación asimétricos. En Actas de la Conferencia de la ACM SIGMOD sobre Gestión de Datos, págs. 199 a 210, San José, CA, mayo de 1995. [2] Chen, M.S.,Wu, K.L. y Yu, P. S. Optimizando la asignación de índices para la difusión secuencial de datos en la computación móvil inalámbrica. IEEE Transactions on Knowledge and Data Engineering (TKDE), 15(1):161-173, enero/febrero de 2003. Gráfico 5 Tamaño de la transmisión (# cubos) Dist tree Expo LBIS Figura 6. Tamaño de la transmisión (# cubos) Dist tree Expo LBIS Figura 7. Tamaño de la transmisión (# cubos) Dist tree Expo LBIS Figura 8. Tamaño de la transmisión (# cubos) Árbol dist Expo LBIS Tiempo medio de afinación Tiempo medio de afinación Tiempo medio de afinación 23 [3] Hu, Q. L., Lee, D. L. y Lee, W.C. Evaluación del rendimiento de un sistema inalámbrico de difusión jerárquica de datos. En Actas de la Quinta Conferencia Internacional Anual de ACM sobre Computación y Redes Móviles (MobiCom99), págs. 163 a 173, Seattle, WA, agosto de 1999. [4] Hu, Q. L. Lee, W.C. y Lee, D. L. Power consultas conservadoras de múltiples atributos en la transmisión de datos. En Actas de la 16a Conferencia Internacional sobre Ingeniería de Datos (ICDE00), páginas 157-166, San Diego, CA, febrero de 2000. [5] Imielinski, T., Viswanathan, S. y Badrinath. B. R. Filtrado eficiente de energía de los datos en el aire. En Actas de la Cuarta Conferencia Internacional sobre Tecnología de Bases de Datos Ampliadas (EDBT94), págs. 245 a 258, Cambridge, Reino Unido, marzo de 1994. [6] Imielinski, T., Viswanathan, S. y Badrinath. B. R. Datos sobre el aire - Organización y acceso. Operaciones de IEEE en Ingeniería de Conocimientos e Datos (TKDE), 9(3):353-372, mayo/junio de 1997. [7] Shih, E., Bahl, P. y Sinclair, M. J. Wake on wireless: Una estrategia de ahorro de energía impulsada por eventos para dispositivos operados por baterías. En Actas de la 8a Conferencia Internacional Anual de ACM sobre Computación y Redes Móviles (MobiCom02), págs. 160 a 171, Atlanta, GA, septiembre de 2002. [8] Shivakumar N. y Venkatasubramanian, S. Indización energéticamente eficiente para la difusión de información en sistemas inalámbricos. ACM/Baltzer Journal of Mobile Networks and Applications (MONET), 1(4):433-446, diciembre de 1996. [9] Tan K. L. y Yu, J. X. Filtración energéticamente eficiente de emisiones no uniformes. En Actas de la 16a Conferencia Internacional sobre Sistemas de Computación Distribuida (ICDCS96), págs. 520 a 527, Hong Kong, mayo de 1996. [10] Viredaz, M. A., Brakmo, L. S. y Hamburgen, W. R. Gestión de energía en dispositivos portátiles. ACM Coue, 1(7):44-52, octubre de 2003. [11] Garg, N. Kumar, V., & Dunham, M.H. Mapeo e indización de información en DAYS, 6o Taller Internacional sobre Movilidad en Bases de Datos y Sistemas Distribuidos, en conjunción con la 14a Conferencia Internacional sobre Aplicaciones de Bases de Datos y Sistemas Expertos, 1o a 5 de septiembre, Praga, República Checa, 2003. [12] Acharya D., Kumar, V., & Dunham, M.H. InfoSpace: Sistema de difusión de datos públicos híbrido y adaptativo para computación ubicua. Aceptado para publicación en el número especial de Pervasive Computing. Wiley Journal for Wireless Communications and Mobile Computing, 2004. [13] Acharya D., Kumar, V., & Prabhu, N. Descubriendo y usando Servicios Web en M-Commerce, Proceedings for 5th VLDB Workshop on Technologies for E-Services, Toronto, Canada,2004. [14] Acharya D., Kumar, V. Indexing Location Depending Data in broadcast en ambiente. Aceptado para su publicación, número especial de JDIM sobre Gestión de Datos Distribuidos, 2005. [15] Flinn, J., Sinnamohideen, S., & Satyanarayan, M. Data Staging on No Trusted Surrogates, Intel Research, Pittsburg, Unpublished Report, 2003. [16] Seydim, A.Y., Dunham, M.H. & Kumar, V. Location dependiente consulta processing, Actas del segundo taller internacional de ACM sobre ingeniería de datos para acceso inalámbrico y móvil, p.47-53, Santa Barbara, California, USA, 2001. [17] Xu, J., Lee, W.C., Tang., X. Índice exponencial: Un esquema de indexación distribuida para los datos sobre el aire. En Actas de la II Conferencia Internacional ACM/USENIX sobre Sistemas, Aplicaciones y Servicios Móviles (MobiSys04), Boston, MA, junio de 2004. 24 ",
            "error": [
                ""
            ]
        },
        "datum broadcast system": {
            "translated_key": [],
            "translated_annotated_text": "Esquema de Indización basado en la ubicación para DAYS Debopam Acharya y Vijay Kumar 1 Computer Science and Informatics University of Missouri-Kansas City Kansas City, MO 64110 dargc(kumarv)@umkc.edu RESUMEN La difusión de datos a través de canales inalámbricos para transmitir información a los consumidores se está volviendo bastante común. Se han propuesto muchos planes de difusión, pero la mayoría de ellos llevan los datos a canales inalámbricos para consumo general. La difusión basada en push [1] es esencialmente asimétrica, es decir, el volumen de datos es mayor desde el servidor a los usuarios que desde los usuarios de vuelta al servidor. El esquema basado en el empuje requiere una indexación que indica cuándo se transmitirán los datos y su posición en la emisión. Latencia de acceso y tiempo de afinación son los dos parámetros principales que pueden utilizarse para evaluar un esquema de indexación. Dos de los importantes esquemas de indexación propuestos anteriormente se basaban en los árboles y los esquemas de indexación exponencial. Ninguno de estos planes pudo satisfacer los requisitos de los datos dependientes de la ubicación (DDL), que es una característica muy deseable de la difusión de datos. En este artículo, discutimos la emisión de LDD en nuestro proyecto DAta in Your Space (DAYS), y proponemos un esquema para la indexación de LDD. Argumentamos que este sistema, cuando se aplica a la DDTS, mejora significativamente el rendimiento en términos de tiempo de afinación en los esquemas antes mencionados. Demostramos nuestro argumento con la ayuda de resultados de simulación. Categorías y Descriptores sujetos H.3.1 [Sistemas de información]: Almacenamiento y recuperación de información - análisis e indexación de contenido; H.3.3 [Sistemas de información]: Almacenamiento y recuperación de información - búsqueda y recuperación de información. Términos generales Algoritmos, Rendimiento, Experimentación 1. INTRODUCCIÓN La difusión inalámbrica de datos es una forma económica y eficiente de poner los datos deseados a disposición de un gran número de usuarios móviles o estáticos. El modo de transferencia de datos es esencialmente asimétrico, es decir, la capacidad de transferencia de datos (comunicación descendente) del servidor al cliente (usuario móvil) es significativamente mayor que el cliente o usuario móvil al servidor (comunicación ascendente). La eficacia de un sistema de difusión de datos se determina por su capacidad para proporcionar a los usuarios los datos requeridos en cualquier lugar y en cualquier momento. Una de las mejores maneras de lograr esto es a través de la difusión de servicios basados en la ubicación altamente personalizados (LBS) que permite a los usuarios acceder a datos dependientes de la ubicación personalizada. Un ejemplo sería alguien usando su dispositivo móvil para buscar un restaurante vegetariano. La aplicación LBS interactuaría con otros componentes de tecnología de localización o utilizaría la entrada de usuarios móviles para determinar la ubicación de los usuarios y descargar la información sobre los restaurantes cercanos al usuario sintonizando el canal inalámbrico que está difundiendo LDD. Vemos un despliegue limitado de LBS por parte de algunos proveedores de servicios. Pero hay todos los indicios de que con el tiempo se resolverán algunos de los complejos problemas técnicos, como el marco de localización uniforme, el cálculo y el seguimiento de ubicaciones en todo tipo de lugares, el posicionamiento en diversos entornos, aplicaciones de localización innovadoras, etc., y LBS se convertirá en una instalación común y ayudará a mejorar la productividad del mercado y el confort del cliente. En nuestro proyecto llamado DAYS, utilizamos el mecanismo de difusión de datos inalámbricos para impulsar LDD a los usuarios y usuarios móviles monitorear y sintonizar el canal para encontrar y descargar los datos requeridos. Sin embargo, es probable que una emisión simple cause una degradación significativa del rendimiento de los dispositivos móviles con limitaciones energéticas, y una solución común a este problema es el uso de una indexación eficiente del aire. El enfoque de indexación almacena información de control que informa al usuario sobre la ubicación de los datos en la emisión y cómo y cuándo pudo acceder a ella. Un usuario móvil, por lo tanto, tiene un poco de tiempo libre para entrar en el modo de somnífero que conserva valiosa energía. También permite al usuario personalizar su propio dispositivo móvil afinando selectivamente la información de su elección. La eficiencia del acceso y la conservación de la energía son las dos cuestiones importantes para los sistemas de radiodifusión de datos. La eficiencia de acceso se refiere a la latencia experimentada cuando se inicia una solicitud hasta que se recibe la respuesta. Conservación de la energía [7, 10] se refiere al uso eficiente de la energía limitada del dispositivo móvil para acceder a los datos de radiodifusión. Dos parámetros que afectan a estos son el tiempo de afinación y la latencia de acceso. El tiempo de sintonización se refiere al tiempo durante el cual la unidad móvil (MU) permanece en estado activo para sintonizar el canal y descargar los datos requeridos. También se puede definir como el número de cubos sintonizados por el dispositivo móvil en estado activo para obtener los datos requeridos. La latencia de acceso puede definirse como el tiempo transcurrido desde que se ha emitido una solicitud hasta que se ha recibido la respuesta. 1 Esta investigación fue apoyada por una subvención de NSF IIS-0209170. En el pasado se han propuesto varios esquemas de indexación, entre los que destacan los basados en árboles y los esquemas de indexación exponencial [17]. Las principales desventajas de los esquemas basados en árboles son que se basan en estructuras arbóreas centralizadas. Para iniciar una búsqueda, la MU tiene que esperar hasta que llegue a la raíz del siguiente árbol de transmisión. Esto afecta significativamente el tiempo de afinación de la unidad móvil. Los esquemas exponenciales facilitan la replicación de índices compartiendo enlaces en diferentes árboles de búsqueda. Para las emisiones con un gran número de páginas, se ha demostrado que el esquema exponencial funciona de manera similar a los esquemas basados en árboles en términos de latencia de acceso. Además, la duración media de la emisión aumenta debido a la replicación del índice y esto puede causar un aumento significativo de la latencia del acceso. Ninguno de los sistemas de indexación mencionados es igualmente eficaz en la difusión de datos dependientes de la ubicación. Además de proporcionar baja latencia, carecen de propiedades que se utilizan para abordar los problemas de DDT. Proponemos un esquema de indexación en DAYS que se ocupa de algunos de estos problemas. Demostramos con resultados de simulación que nuestro esquema supera a algunos de los esquemas de indexación anteriores para la difusión de LDD en términos de tiempo de afinación. El resto del documento se presenta de la siguiente manera. En la sección 2, se analiza el trabajo anterior relacionado con la indexación de los datos de radiodifusión. La sección 3 describe nuestra arquitectura DAYS. Los datos dependientes de la ubicación, su generación y su posterior difusión se presentan en la sección 4. La sección 5 discute nuestro esquema de indexación en detalle. La simulación de nuestro esquema y su evaluación del desempeño se presenta en la sección 6. En la sección 7 se concluye el documento y se menciona la labor futura relacionada. 2. TRABAJO ANTERIOR Varias técnicas de indexación basadas en discos se han utilizado para la indexación de aire. Imielinski et al. [5, 6] aplicó el árbol del índice B+, donde los nodos de la hoja almacenan los tiempos de llegada de los ítems de datos. Se propuso el método de indexación distribuida para reproducir y distribuir eficientemente el árbol de índices en una emisión. Específicamente, el árbol índice se divide en una parte replicada y una parte no replicada. Cada emisión consiste en la parte replicada y la parte no replicada que indiza los elementos de datos inmediatamente después de ella. Como tal, cada nodo en la parte no replicada aparece sólo una vez en una emisión y, por lo tanto, reduce el costo de replicación y latencia de acceso, al tiempo que logra un buen tiempo de afinación. Chen et al. [2] y Shivakumar et al. [8] considera estructuras de árboles desequilibradas para optimizar el consumo de energía para el acceso a datos no uniformes. Estas estructuras minimizan el costo medio de búsqueda de índices reduciendo el número de búsquedas de datos en caliente a expensas de gastar más en datos en frío. Tan y Yu discutieron la organización de datos e índices bajo la emisión sesgada También se han sugerido métodos de Hashing y firma para la transmisión inalámbrica que admite consultas de igualdad [9]. En [5] se propuso un método flexible de indización. El índice flexible primero clasifica los elementos de datos en orden ascendente (o descendente) de los valores clave de búsqueda y luego los divide en segmentos p. El primer cubo en cada segmento de datos contiene un índice de control, que es un índice binario que asigna un valor clave dado al segmento que contiene esa clave, y un índice local, que es un índice de entrada m que asigna un valor clave dado a los cubos dentro del segmento actual. Al afinar los parámetros de p y m, los clientes móviles pueden lograr un buen tiempo de afinación o una buena latencia de acceso. Otra técnica de indexación propuesta es el esquema de indexación exponencial [17]. En este esquema, se utiliza un índice parametrizado, llamado índice exponencial, para optimizar la latencia del acceso o el tiempo de afinación. Facilita la replicación de índices mediante la vinculación de diferentes árboles de búsqueda. Todos los regímenes mencionados se han aplicado a datos que no están relacionados entre sí. Estos datos no relacionados pueden agruparse o no agruparse. Sin embargo, ninguno de ellos se ha ocupado específicamente de los requisitos de la DDT. Los datos dependientes de la ubicación son datos que están asociados con una ubicación. En la actualidad hay varias aplicaciones que se ocupan de la DDTS [13, 16]. Casi todos ellos representan LDD con la ayuda de estructuras jerárquicas [3, 4]. Esto se basa en la propiedad de contención de datos dependientes de la ubicación. La propiedad Containment ayuda a determinar la posición relativa de un objeto definiendo o identificando ubicaciones que contienen esos objetos. Las ubicaciones subordinadas están jerárquicamente relacionadas entre sí. Así, la propiedad Containment limita la gama de disponibilidad u operación de un servicio. Usamos esta propiedad de contención en nuestro esquema de indexación para indexar LDD. 3. DAYS ARCHITECTURE DAYS se ha conceptualizado para difundir datos tópicos y no tópicos a los usuarios en un espacio de difusión local y para aceptar consultas de usuarios individuales a nivel mundial. Los datos tópicos, por ejemplo, información meteorológica, información de tráfico, información de existencias, etc., cambian constantemente con el tiempo. Los datos no tópicos como hotel, restaurante, precios inmobiliarios, etc., no cambian tan a menudo. Así, imaginamos la presencia de dos tipos de distribución de datos: En el primer caso, el servidor empuja los datos a los usuarios locales a través de canales inalámbricos. El otro caso se refiere al servidor que envía los resultados de las consultas de los usuarios a través de canales inalámbricos de enlace descendente. Técnicamente, vemos la presencia de dos tipos de colas en el acceso basado en datos. Una es una cola muy cargada que contiene consultas cargadas globalmente. La otra es una cola relativamente ligera que consiste en consultas subidas localmente. La arquitectura DAYS [12], como se muestra en la figura 1, consiste en un servidor de datos, programador de transmisiones, coordinador de DAYS, red de satélites LEO para la entrega de datos a nivel mundial y un espacio de transmisión local. Los datos se introducen en el espacio de transmisión local para que los usuarios puedan sintonizarse con los canales inalámbricos para acceder a los datos. El espacio de transmisión local consiste en una torre de transmisión, unidades móviles y una red de máquinas de puesta en escena de datos llamadas subrogados. La estadificación de datos en sustitutos se ha investigado anteriormente como una técnica exitosa [12, 15] para los datos relacionados con los usuarios de caché. Creemos que la estadificación de datos se puede utilizar para reducir drásticamente el tiempo de latencia tanto para los datos de radiodifusión local como para las respuestas globales. La solicitud de consulta en los sustitutos puede utilizarse posteriormente para generar los patrones de popularidad que finalmente deciden el horario de emisión [12]. 18 Popularidad Comentarios de Surrogates for Broadcast Scheduler Local Space Broadcast Tower SurrogateMU MU MU Servidor de datosHorario de radiodifusiónDÍAS Coordinador Canal local de enlace descendente Canal global de enlace descendente Pull request cola cola Solicitud global cola Solicitud local cola Ubicación índice basado en Starbucks Plaza Kansas City Figura 1. Arquitectura DAYS Figura 2. Ubicación Estructura deStarbucks, Plaza 4. DATOS DEPENDIENTES DE LOCALIZACIÓN (LDD) Argumentamos que la incorporación de información de ubicación en la transmisión inalámbrica de datos puede disminuir significativamente la latencia de acceso. Esta propiedad se convierte en muy útil para la unidad móvil que tiene capacidad de almacenamiento y procesamiento limitada. Hay una variedad de aplicaciones para obtener información sobre tráfico, reservas de restaurantes y hoteles, comida rápida, gasolineras, oficina de correos, tiendas de comestibles, etc. Si estas aplicaciones se combinan con información de ubicación, entonces la búsqueda será rápida y altamente rentable. Una propiedad importante de las ubicaciones es Containment que ayuda a determinar la ubicación relativa de un objeto con respecto a su padre que contiene el objeto. Por lo tanto, Containment limita el rango de disponibilidad de un dato. Usamos esta propiedad en nuestro esquema de indexación. La base de datos contiene los contenidos transmitidos que se convierten en LDD [14] asociándolos con las ubicaciones respectivas para que puedan transmitirse de manera agrupada. El agrupamiento de LDD ayuda al usuario a localizar la información de manera eficiente y soporta la propiedad de contención. Presentamos un ejemplo para justificar nuestra propuesta. Ejemplo: Supongamos que un usuario emite una consulta Starbucks Coffee en Plaza por favor. para acceder a información sobre la sucursal Plaza de Starbucks Coffee en Kansas City. En el caso de la ubicación independiente establecido el sistema enumerará todas las cafeterías Starbucks en el área de Kansas City. Es evidente que esas respuestas aumentarán la latencia del acceso y no son deseables. Estos se pueden administrar de manera eficiente si el servidor tiene datos dependientes de la ubicación, es decir, una asignación entre los datos de una cafetería de Starbucks y su ubicación física. Además, para una consulta que incluya el rango de ubicaciones de Starbucks, bastará con una sola consulta solicitando ubicaciones para toda la región de Kansas City, como se muestra en la Figura 2. Esto ahorrará una enorme cantidad de ancho de banda al disminuir el número de mensajes y, al mismo tiempo, será útil para prevenir el cuello de botella de escalabilidad en una zona muy poblada. 4.1 Función de asignación para LDD El ejemplo justifica la necesidad de una función de asignación para procesar consultas dependientes de la ubicación. Esto será especialmente importante para las consultas basadas en la atracción en todo el mundo para las cuales la respuesta podría estar compuesta para diferentes partes del mundo. La función de mapeo es necesaria para construir el horario de emisión. Definimos Global Property Set (GPS) [11], Information Content (IC) set, and Location Jerarchy (LH) set where IC  GPS and LH  GPS to develop a mapping function. LH = {l1, l2, l3...,lk} donde li representan ubicaciones en el árbol de ubicación y IC = {ic1, ic2, ic3,...,icn} donde ici representan tipo de información. Por ejemplo, si tenemos tráfico, tiempo, y la información de stock están en transmisión entonces IC = {ictráfico, icweather, e icstock}. El esquema de asignación debe ser capaz de identificar y seleccionar un miembro IC y un nodo LH para (a) asociación correcta, (b) coincidencia de granularidad, (c) y condición de terminación. Por ejemplo, el clima • IC podría estar asociado con un país o un estado o una ciudad o un pueblo de LH. La coincidencia de granularidad entre el tiempo y un nodo LH es según el requisito del usuario. Así, con una granularidad gruesa la información meteorológica se asocia con un país para obtener el clima de los países y con la ciudad en una granularidad más fina. Si una ciudad es la mejor granularidad, entonces define la condición terminal para la asociación entre IC y LH para el tiempo. Esto significa que un usuario no puede obtener información meteorológica sobre la subdivisión de una ciudad. En realidad, el clima de una subdivisión no tiene ningún sentido. Desarrollamos un simple esquema de mapeo heurístico basado en las necesidades del usuario. Dejar IC = {m1, m2,m3.,..., mk}, donde mi representa su elemento y dejar LH = {n1, n2, n3,..., nl}, donde ni representa miembro LHs. Definimos GPS para IC (GPSIC)  GPS y para LH (GPSLH)  GPS como GPSIC = {P1, P2,..., Pn}, donde P1, P2, P3,..., Pn son propiedades de sus miembros y GPSLH = {Q1, Q2,..., Qm} donde Q1, Q2,..., Qm son propiedades de sus miembros. Las propiedades de un miembro particular de IC son un subconjunto de GPSIC. Generalmente es cierto que (conjunto de propiedades (miÃ3n IC) â € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € Por ejemplo, stock • IC y película • IC calificación no tienen ninguna propiedad en común. Asumimos que dos o más miembros del CI tienen al menos una propiedad geográfica común (es decir, lugar) porque DAYS transmite información sobre esas categorías, que están estrechamente vinculadas con un lugar. Por ejemplo, las acciones de una empresa están relacionadas con un país, el clima está relacionado con una ciudad o estado, etc. Definimos el subconjunto de propiedades de mio IC como PSm i ♥ mi • IC y PSm i = {P1, P2,..., Pr} donde r ≤ n. • Pr {Pr • PSm i → Pr • GPSIC} que implica que • i, PSm i  GPSIC. Las propiedades geográficas de este conjunto son indicativas de si mi IC puede ser mapeado a un solo nivel de granularidad (es decir. una sola ubicación) en LH o varios niveles de granularidad (es decir, más de un nodo en 19 de la jerarquía) en LH. ¿Cuántos y qué niveles de granularidad debe un mapa mi, depende del nivel en el que el proveedor de servicios quiere proporcionar información sobre el mi en cuestión. Del mismo modo, definimos un subconjunto de propiedades de los miembros de LH como PSn j Ł nj Ł LH que puede ser escrito como PSn j ={Q1, Q2, Q3,..., Qs} donde s ≤ m. Además, El proceso de mapeo de IC a LH es entonces identificar para algunos mxÃ3 IC uno o mÃ¡s nyÃ3 LH tal que PSmx Ã3 PSnv Esto significa que cuando mx mapea a ny y a todos los niños de ny si mx puede mapear a múltiples niveles de granularidad o mx mapea sólo a ny si mx puede mapear a un solo nivel de granularidad. Asumimos que los nuevos miembros pueden unirse y los antiguos miembros pueden salir de IC o LH en cualquier momento. La eliminación de miembros del espacio del CI es simple, pero la adición de miembros al espacio del CI es más restrictiva. Si queremos añadir un nuevo miembro al espacio IC, primero definimos un conjunto de propiedades para el nuevo miembro: PSmnew_m ={P1, P2, P3,..., Pt} y lo añadimos al CI sólo si la condición: Este régimen tiene una ventaja adicional al permitir a los proveedores de servicios de información controlar el tipo de información que desean proporcionar a los usuarios. Presentamos el siguiente ejemplo para ilustrar el concepto de mapeo. IC = {Tráfico, Stock, Restaurante, Tiempo, Fechas importantes de la historia, Condiciones de la carretera} LH = {País, Estado, Ciudad, Código postal, Principales carreteras} GPSIC = {Surface-mobility, Roads, High, Low, Italian-food, StateName, Temp, CityName, Seat-disponibilidad, Zip, Traffic-jams, Además, PS(ICStock) indicó que Stock solo puede mapear a un solo país. Cuando consideramos el miembro Tráfico del espacio IC, sólo PS(ICTraffic) â € ¢ PScity â € TM. Como PS(ICTRAFFIC) indica que Traffic puede mapear a una sola ubicación, solo mapea a City y a ninguno de sus hijos. Ahora bien, a diferencia de Stock, el mapeo del tráfico con las principales carreteras, que es un hijo de la ciudad, es significativo. Sin embargo, los proveedores de servicios tienen derecho a controlar los niveles de granularidad a los que desean proporcionar información sobre un miembro del espacio IC. PS(ICRoad conditions) • PSState  y PS(ICRoad conditions) • PSCity. Así que las condiciones de la carretera son mapas al Estado, así como a la ciudad. Como PS(ICRoad conditions) indica que las condiciones de la carretera pueden mapear a múltiples niveles de granularidad, las condiciones de la carretera también mapearán a Zip Code y las principales carreteras, que son los niños del Estado y la ciudad. Del mismo modo, los mapas del restaurante sólo al código postal, y los mapas meteorológicos al estado, la ciudad y sus hijos, las carreteras principales y el código postal. 5. ESQUEMA DE ÍNDICE BASADA EN LOCALIZACIÓN Esta sección discute nuestro esquema de indexación basado en la ubicación (LBIS). El esquema está diseñado para ajustarse a la emisión LDD en nuestro proyecto DAYS. Como se discutió anteriormente, utilizamos la propiedad de contención de LDD en el esquema de indexación. Esto limita significativamente la búsqueda de nuestros datos requeridos a una parte particular de la transmisión. Por lo tanto, argumentamos que el esquema proporciona tiempo de afinación limitado. Describimos la arquitectura de nuestro esquema de indexación. Nuestro esquema contiene cubos de datos separados y cubos de índices. Los cubos de índice son de dos tipos. El primer tipo se llama el índice Mayor. El índice Major proporciona información sobre los tipos de datos transmitidos. Por ejemplo, si tenemos la intención de transmitir información como Entretenimiento, Tiempo, Tráfico, etc., entonces el índice principal apunta a estos tipos principales de información y/o sus principales subtipos de información, el número de subtipos principales variando de una información a otra. Esto limita estrictamente el número de accesos a un índice principal. El índice Major nunca apunta a los datos originales. Señala a los subíndices llamados el índice Menor. Los índices menores son los índices que realmente apuntan a los datos originales. Llamamos a estos indicadores menores como punteros de ubicación, ya que apunta a los datos que están asociados con una ubicación. Por lo tanto, nuestra búsqueda de datos incluye el acceso a un índice mayor y algunos índices menores, el número de índice menor variando dependiendo del tipo de información. Por lo tanto, nuestro esquema de indexación tiene en cuenta la naturaleza jerárquica del LDD, la propiedad Containment, y requiere que nuestro programa de transmisión se agrupe en función del tipo de datos y la ubicación. La estructura de la jerarquía de ubicación requiere el uso de diferentes tipos de índice en diferentes niveles. La estructura y las posiciones del índice dependen estrictamente de la jerarquía de ubicación descrita anteriormente en nuestro esquema de asignación. Ilustramos la implementación de nuestro esquema con un ejemplo. Posteriormente se mencionan las normas para la elaboración del índice. 20 A1 Entretenimiento Restaurante Película A2 A3 A4 R1 R2 R3 R4 R5 R6 R7 R8 Tiempo KC SL JC SF Entretenimiento R1 R2 R3 R4 R4 R5 R6 R7 R8 KC SL JC SF (A, R, NEXT = 8) 3, R5 4, R7 Tipo (S, L) ER W E EM (1, 4) (5, Información cartográfica de ubicación para radiodifusión Figura 4. Datos junto con el índice basado en la ubicación Ejemplo: Supongamos que nuestro contenido de transmisión contiene ICentertainment y ICweather que se representa como se muestra en la Fig. 3. Ai representa las áreas de la ciudad y Ri representa las carreteras en un área determinada. Las hojas de la estructura meteorológica representan cuatro ciudades. La estructura del índice se indica en la Fig. 4 que muestra la posición del índice mayor y menor y los datos en el horario de emisión. Proponemos las siguientes reglas para la creación del programa de emisión indexado por aire: • Se crean el índice mayor y el índice menor. • El índice principal contiene la posición y el rango de diferentes tipos de ítems de datos (Weather and Entertainment, Figura 3) y sus categorías. Las subcategorías de Entretenimiento, Cine y Restaurante, también están en el índice. Así, el índice principal contiene Entretenimiento (E), Entretenimiento-Movie (EM), Entretenimiento-Restaurante (ER), y Tiempo (W). La tupla (S, L) representa la posición inicial (S) del elemento de datos y L representa el rango del elemento en términos de número de cubos de datos. • El índice menor contiene las variables A, R y un puntero Siguiente. En nuestro ejemplo (Figura 3), la carretera R representa el primer nodo del área A. El índice menor se utiliza para apuntar a cubos de datos reales presentes en los niveles más bajos de la jerarquía. En cambio, el índice principal apunta a una gama más amplia de ubicaciones, por lo que contiene información sobre las principales y subcategorías de datos. • La información del índice no se incorpora en los cubos de datos. Los cubos de índice están separados que contienen sólo la información de control. • El número de cubos índice m=#(IC), IC = {ic1, ic2, ic3,...,icn} donde ici representa el tipo de información y # representa la cardinalidad del conjunto de contenido de información IC. En este ejemplo, IC= {icMovie, icWeather, icRestaurant} y así #(IC) =3. Por lo tanto, el número de cubos índice principales es 3. • El mecanismo para resolver la consulta está presente en el coordinador de java en MU. Por ejemplo, si una consulta Q se presenta como Q (Entretenimiento, Película, Road_1), entonces la búsqueda resultante será para la información EM en el índice principal. Nosotros decimos, Q EM. Nuestro índice propuesto funciona de la siguiente manera: Supongamos que una MU emite una consulta que está representada por Java Coordinador presente en la MU como información de restaurante en la carretera 7. Esto es resuelto por el coordinador como Q ER. Esto significa que uno tiene que buscar la unidad de índice ER en el índice principal. Supongamos que el MU entra en el canal en R2. El primer índice que recibe es un índice menor después de R2. En este índice, el valor de la variable Siguiente = 4, lo que significa que el siguiente índice mayor está presente después del cubo 4. La MU puede entrar en modo somnoliento. Se activa después del cubo 4 y recibe el índice principal. Busca información de ER que es la primera entrada en este índice. Ahora es seguro que la MU obtendrá la posición del cubo de datos en el índice menor contiguo. La segunda unidad en el índice menor representa la posición de los datos requeridos R7. Indica que el cubo de datos es el primer cubo en el Área 4. El MU vuelve a entrar en modo somnífero y se activa después del cubo 6. Obtiene los datos necesarios en el siguiente cubo. Presentamos el algoritmo para buscar el Índice basado en la ubicación. Algoritmo 1 Índice basado en la ubicación Buscar en DAYS 1. Escanear la transmisión para el siguiente cubo índice, encontrado=falso 2. Mientras que (no se encuentra) hacer 3. si cubo es el índice mayor entonces 4. Encuentra el Tipo & Tupla (S, L) 5. si S es mayor que 1, entra en modo Doze durante S segundos 6. termina si 7. Despierta en el cubo Sth y observa el índice menor 8. termina si 9. si el cubo es índice menor entonces 10. si TypeRequest no es igual a Typefound y (A,R)Solicitud no es igual a (A,R)found entonces 11. Vaya al modo de doze hasta el SIGUIENTE y repita desde el paso 3 12. terminar si 13. de lo contrario encontrar entrada en Índice Menor que apunta a los datos 14. Calcular la hora de llegada T del cubo de datos 15. Entra en modo somnífero hasta la T 16. Despierta en T y accede a los datos, encontrados = verdadero 17. fin de lo contrario 18. final si 19. final Mientras que 21 6. EVALUACIÓN DE LA EJECUCIÓN La conservación de la energía es la principal preocupación cuando tratamos de acceder a los datos de la transmisión inalámbrica. Un sistema eficiente debe permitir al dispositivo móvil acceder a los datos que necesita manteniéndose activo durante un período mínimo de tiempo. Esto ahorraría una cantidad considerable de energía. Dado que los elementos se distribuyen en función de los tipos y se asignan a ubicaciones adecuadas, argumentamos que nuestra transmisión se ocupa de los tipos de datos agrupados. La unidad móvil tiene que acceder a un índice mayor y a un índice menor relativamente menor para obtener información sobre la hora de llegada de los datos. Esto contrasta con el esquema exponencial donde los índices son de tamaños iguales. El ejemplo discutido y Algoritmo 1 revela que para acceder a cualquier dato, necesitamos acceder al índice mayor sólo una vez seguido por uno o más accesos al índice menor. El número de accesos menores al índice depende del número de ubicaciones internas. Como el número de ubicaciones internas varía de elemento a elemento (por ejemplo, Weather está generalmente asociado con una ciudad mientras que el tráfico se granula hasta las carreteras principales y menores de una ciudad), argumentamos que la estructura de la información de localización mapeada puede ser visualizada como un bosque que es una colección de árboles generales, el número de árboles generales dependiendo de los tipos de información transmitida y la profundidad de un árbol dependiendo de la granularidad de la información de Para nuestros experimentos, asumimos el bosque como una colección de árboles M-ary equilibrados. Asumimos además que los árboles de la arteria M están llenos al asumir la presencia de nodos ficticios en diferentes niveles de un árbol. Así, si el número de ítems de datos es d y la altura del árbol es m, entonces n= (m*d-1)/(m-1) donde n es el número de vértices en el árbol e i= (d-1)/(m-1) donde i es el número de vértices internos. El tiempo de afinación para un ítem de datos implica 1 unidad de tiempo requerido para acceder al índice principal más el tiempo requerido para acceder a los ítems de datos presentes en las hojas del árbol. Por lo tanto, el tiempo de sintonización con d ítems de datos es t = logmd+1 Podemos decir que el tiempo de sintonización está limitado por O(logmd). Comparamos nuestro esquema con el esquema de indexación distribuida y exponencial. Asumimos una emisión plana y el número de páginas que varían de 5000 a 25000. Los diversos parámetros de simulación se muestran en la Tabla 1. La Figura 5-8 muestra los tiempos relativos de afinación de tres algoritmos de indexación, es decir, el LBIS, esquema exponencial y el esquema de árbol distribuido. La Figura 5 muestra el resultado para el número de nodos internos de ubicación = 3. Podemos ver que LBIS supera significativamente a los otros esquemas. El tiempo de afinación en LBIS varía de aproximadamente 6,8 a 8. Este gran tiempo de afinación se debe al hecho de que después de alcanzar el índice menor más bajo, la MU puede tener que acceder a pocos cubos secuencialmente para obtener el cubo de datos requerido. Podemos ver que el tiempo de afinación tiende a ser estable a medida que aumenta la duración de la emisión. En la figura 6 se considera m= 4. Aquí podemos ver que el exponencial y el rendimiento distribuido casi de manera similar, aunque el primero parece funcionar ligeramente mejor a medida que aumenta la longitud de emisión. Un patrón muy interesante es visible en la figura 7. Para las emisiones de menor tamaño, el LBIS parece tener un tiempo de afinación mayor que los otros dos esquemas. Pero a medida que aumenta la duración de la emisión, es claramente visible que el LBIS supera a los otros dos esquemas. La indexación del árbol distribuido muestra un comportamiento similar al del LBIS. El tiempo de afinación en LBIS sigue siendo bajo porque el algoritmo permite a la MU saltarse algunos Índices Menores intermedios. Esto permite que la MU se mueva a niveles más bajos directamente después de entrar en modo activo, ahorrando así energía valiosa. Esta acción no es posible en la indexación de árboles distribuidos y por lo tanto podemos observar que su tiempo de afinación es más que el esquema LBIS, aunque tiene mejores resultados que el esquema exponencial. La Figura 8, en contraste, nos muestra que el tiempo de afinación en LBIS, aunque menor que los otros dos esquemas, tiende a aumentar bruscamente a medida que la longitud de emisión se hace mayor que las 15000 páginas. Esto puede atribuirse tanto al aumento del tiempo necesario para escanear los Índices Menores intermedios como a la duración de la emisión. Pero podemos observar que la pendiente de la curva LBIS es significativamente menor que las otras dos curvas. Tabla 1 Parámetros de simulación P Valores de definición N Número de datos Elementos 5000 - 25000 m Número de nodos de ubicación internos 3, 4, 5, 6 B Capacidad de cubo sin índice (para índice exponencial) 10,64,128,256 i Base de índice para índice exponencial 2,4,6,8 k Tamaño del índice para árbol distribuido 8 bytes Los resultados de la simulación establecen algunos hechos sobre nuestro esquema de indexación basado en la ubicación. En la mayoría de los casos, el sistema funciona mejor que los otros dos en términos de tiempo de afinación. A medida que aumenta la duración de la emisión, después de cierto punto, aunque el tiempo de afinación aumenta como resultado de factores que hemos descrito antes, el esquema siempre funciona mejor que los otros dos esquemas. Debido al límite prescrito del número de páginas en el papel, no podemos mostrar más resultados. Pero estos resultados omitidos muestran una tendencia similar a la de los resultados representados en la figura 5-8. 7. CONCLUSIÓN Y FUTURO TRABAJO En este trabajo hemos presentado un esquema para el mapeo de datos de radiodifusión inalámbrica con sus ubicaciones. Hemos presentado un ejemplo para mostrar cómo la estructura jerárquica del árbol de ubicación mapea con los datos para crear LDD. Hemos presentado un esquema llamado LBIS para indexar este LDD. Hemos utilizado la propiedad de contención de LDD en el esquema que limita la búsqueda a un estrecho rango de datos en la emisión, ahorrando así energía valiosa en el dispositivo. La asignación de datos con ubicaciones y el esquema de indexación se utilizará en nuestro proyecto DAYS para crear la arquitectura basada en empuje. El LBIS se ha comparado con otros dos sistemas de indexación prominentes, a saber, el sistema de indexación de árboles distribuidos y el sistema de indexación exponencial. En nuestras simulaciones demostramos que el esquema LBIS tiene el menor tiempo de afinación para las emisiones que tienen un gran número de páginas, ahorrando así una valiosa potencia de batería en la MU. 22 En el trabajo futuro tratamos de incorporar la arquitectura basada en el tirón en nuestro proyecto DAYS. Los datos del servidor están disponibles para el acceso de los usuarios globales. Esto se puede hacer poniendo una solicitud al servidor de origen. La consulta en este caso es una consulta global. Se transfiere del servidor de origen de los usuarios al servidor de destino mediante el uso de satélites LEO. Tenemos la intención de utilizar nuestro esquema de LDD y arquitectura de estadificación de datos en la arquitectura basada en el tirón. Demostraremos que el esquema de LDD junto con la arquitectura de estadificación de datos mejora significativamente la latencia para la consulta global y local. 8. REFERENCIAS [1] Acharya, S., Alonso, R. Franklin, M y Zdonik S. Disco de transmisión: Gestión de datos para entornos de comunicación asimétricos. En Actas de la Conferencia de la ACM SIGMOD sobre Gestión de Datos, págs. 199 a 210, San José, CA, mayo de 1995. [2] Chen, M.S.,Wu, K.L. y Yu, P. S. Optimizando la asignación de índices para la difusión secuencial de datos en la computación móvil inalámbrica. IEEE Transactions on Knowledge and Data Engineering (TKDE), 15(1):161-173, enero/febrero de 2003. Gráfico 5 Tamaño de la transmisión (# cubos) Dist tree Expo LBIS Figura 6. Tamaño de la transmisión (# cubos) Dist tree Expo LBIS Figura 7. Tamaño de la transmisión (# cubos) Dist tree Expo LBIS Figura 8. Tamaño de la transmisión (# cubos) Árbol dist Expo LBIS Tiempo medio de afinación Tiempo medio de afinación Tiempo medio de afinación 23 [3] Hu, Q. L., Lee, D. L. y Lee, W.C. Evaluación del rendimiento de un sistema inalámbrico de difusión jerárquica de datos. En Actas de la Quinta Conferencia Internacional Anual de ACM sobre Computación y Redes Móviles (MobiCom99), págs. 163 a 173, Seattle, WA, agosto de 1999. [4] Hu, Q. L. Lee, W.C. y Lee, D. L. Power consultas conservadoras de múltiples atributos en la transmisión de datos. En Actas de la 16a Conferencia Internacional sobre Ingeniería de Datos (ICDE00), páginas 157-166, San Diego, CA, febrero de 2000. [5] Imielinski, T., Viswanathan, S. y Badrinath. B. R. Filtrado eficiente de energía de los datos en el aire. En Actas de la Cuarta Conferencia Internacional sobre Tecnología de Bases de Datos Ampliadas (EDBT94), págs. 245 a 258, Cambridge, Reino Unido, marzo de 1994. [6] Imielinski, T., Viswanathan, S. y Badrinath. B. R. Datos sobre el aire - Organización y acceso. Operaciones de IEEE en Ingeniería de Conocimientos e Datos (TKDE), 9(3):353-372, mayo/junio de 1997. [7] Shih, E., Bahl, P. y Sinclair, M. J. Wake on wireless: Una estrategia de ahorro de energía impulsada por eventos para dispositivos operados por baterías. En Actas de la 8a Conferencia Internacional Anual de ACM sobre Computación y Redes Móviles (MobiCom02), págs. 160 a 171, Atlanta, GA, septiembre de 2002. [8] Shivakumar N. y Venkatasubramanian, S. Indización energéticamente eficiente para la difusión de información en sistemas inalámbricos. ACM/Baltzer Journal of Mobile Networks and Applications (MONET), 1(4):433-446, diciembre de 1996. [9] Tan K. L. y Yu, J. X. Filtración energéticamente eficiente de emisiones no uniformes. En Actas de la 16a Conferencia Internacional sobre Sistemas de Computación Distribuida (ICDCS96), págs. 520 a 527, Hong Kong, mayo de 1996. [10] Viredaz, M. A., Brakmo, L. S. y Hamburgen, W. R. Gestión de energía en dispositivos portátiles. ACM Coue, 1(7):44-52, octubre de 2003. [11] Garg, N. Kumar, V., & Dunham, M.H. Mapeo e indización de información en DAYS, 6o Taller Internacional sobre Movilidad en Bases de Datos y Sistemas Distribuidos, en conjunción con la 14a Conferencia Internacional sobre Aplicaciones de Bases de Datos y Sistemas Expertos, 1o a 5 de septiembre, Praga, República Checa, 2003. [12] Acharya D., Kumar, V., & Dunham, M.H. InfoSpace: Sistema de difusión de datos públicos híbrido y adaptativo para computación ubicua. Aceptado para publicación en el número especial de Pervasive Computing. Wiley Journal for Wireless Communications and Mobile Computing, 2004. [13] Acharya D., Kumar, V., & Prabhu, N. Descubriendo y usando Servicios Web en M-Commerce, Proceedings for 5th VLDB Workshop on Technologies for E-Services, Toronto, Canada,2004. [14] Acharya D., Kumar, V. Indexing Location Depending Data in broadcast en ambiente. Aceptado para su publicación, número especial de JDIM sobre Gestión de Datos Distribuidos, 2005. [15] Flinn, J., Sinnamohideen, S., & Satyanarayan, M. Data Staging on No Trusted Surrogates, Intel Research, Pittsburg, Unpublished Report, 2003. [16] Seydim, A.Y., Dunham, M.H. & Kumar, V. Location dependiente consulta processing, Actas del segundo taller internacional de ACM sobre ingeniería de datos para acceso inalámbrico y móvil, p.47-53, Santa Barbara, California, USA, 2001. [17] Xu, J., Lee, W.C., Tang., X. Índice exponencial: Un esquema de indexación distribuida para los datos sobre el aire. En Actas de la II Conferencia Internacional ACM/USENIX sobre Sistemas, Aplicaciones y Servicios Móviles (MobiSys04), Boston, MA, junio de 2004. 24 ",
            "error": []
        },
        "tree structure": {
            "translated_key": [],
            "translated_annotated_text": "Esquema de Indización basado en la ubicación para DAYS Debopam Acharya y Vijay Kumar 1 Computer Science and Informatics University of Missouri-Kansas City Kansas City, MO 64110 dargc(kumarv)@umkc.edu RESUMEN La difusión de datos a través de canales inalámbricos para transmitir información a los consumidores se está volviendo bastante común. Se han propuesto muchos planes de difusión, pero la mayoría de ellos llevan los datos a canales inalámbricos para consumo general. La difusión basada en push [1] es esencialmente asimétrica, es decir, el volumen de datos es mayor desde el servidor a los usuarios que desde los usuarios de vuelta al servidor. El esquema basado en el empuje requiere una indexación que indica cuándo se transmitirán los datos y su posición en la emisión. Latencia de acceso y tiempo de afinación son los dos parámetros principales que pueden utilizarse para evaluar un esquema de indexación. Dos de los importantes esquemas de indexación propuestos anteriormente se basaban en los árboles y los esquemas de indexación exponencial. Ninguno de estos planes pudo satisfacer los requisitos de los datos dependientes de la ubicación (DDL), que es una característica muy deseable de la difusión de datos. En este artículo, discutimos la emisión de LDD en nuestro proyecto DAta in Your Space (DAYS), y proponemos un esquema para la indexación de LDD. Argumentamos que este sistema, cuando se aplica a la DDTS, mejora significativamente el rendimiento en términos de tiempo de afinación en los esquemas antes mencionados. Demostramos nuestro argumento con la ayuda de resultados de simulación. Categorías y Descriptores sujetos H.3.1 [Sistemas de información]: Almacenamiento y recuperación de información - análisis e indexación de contenido; H.3.3 [Sistemas de información]: Almacenamiento y recuperación de información - búsqueda y recuperación de información. Términos generales Algoritmos, Rendimiento, Experimentación 1. INTRODUCCIÓN La difusión inalámbrica de datos es una forma económica y eficiente de poner los datos deseados a disposición de un gran número de usuarios móviles o estáticos. El modo de transferencia de datos es esencialmente asimétrico, es decir, la capacidad de transferencia de datos (comunicación descendente) del servidor al cliente (usuario móvil) es significativamente mayor que el cliente o usuario móvil al servidor (comunicación ascendente). La eficacia de un sistema de difusión de datos se determina por su capacidad para proporcionar a los usuarios los datos requeridos en cualquier lugar y en cualquier momento. Una de las mejores maneras de lograr esto es a través de la difusión de servicios basados en la ubicación altamente personalizados (LBS) que permite a los usuarios acceder a datos dependientes de la ubicación personalizada. Un ejemplo sería alguien usando su dispositivo móvil para buscar un restaurante vegetariano. La aplicación LBS interactuaría con otros componentes de tecnología de localización o utilizaría la entrada de usuarios móviles para determinar la ubicación de los usuarios y descargar la información sobre los restaurantes cercanos al usuario sintonizando el canal inalámbrico que está difundiendo LDD. Vemos un despliegue limitado de LBS por parte de algunos proveedores de servicios. Pero hay todos los indicios de que con el tiempo se resolverán algunos de los complejos problemas técnicos, como el marco de localización uniforme, el cálculo y el seguimiento de ubicaciones en todo tipo de lugares, el posicionamiento en diversos entornos, aplicaciones de localización innovadoras, etc., y LBS se convertirá en una instalación común y ayudará a mejorar la productividad del mercado y el confort del cliente. En nuestro proyecto llamado DAYS, utilizamos el mecanismo de difusión de datos inalámbricos para impulsar LDD a los usuarios y usuarios móviles monitorear y sintonizar el canal para encontrar y descargar los datos requeridos. Sin embargo, es probable que una emisión simple cause una degradación significativa del rendimiento de los dispositivos móviles con limitaciones energéticas, y una solución común a este problema es el uso de una indexación eficiente del aire. El enfoque de indexación almacena información de control que informa al usuario sobre la ubicación de los datos en la emisión y cómo y cuándo pudo acceder a ella. Un usuario móvil, por lo tanto, tiene un poco de tiempo libre para entrar en el modo de somnífero que conserva valiosa energía. También permite al usuario personalizar su propio dispositivo móvil afinando selectivamente la información de su elección. La eficiencia del acceso y la conservación de la energía son las dos cuestiones importantes para los sistemas de radiodifusión de datos. La eficiencia de acceso se refiere a la latencia experimentada cuando se inicia una solicitud hasta que se recibe la respuesta. Conservación de la energía [7, 10] se refiere al uso eficiente de la energía limitada del dispositivo móvil para acceder a los datos de radiodifusión. Dos parámetros que afectan a estos son el tiempo de afinación y la latencia de acceso. El tiempo de sintonización se refiere al tiempo durante el cual la unidad móvil (MU) permanece en estado activo para sintonizar el canal y descargar los datos requeridos. También se puede definir como el número de cubos sintonizados por el dispositivo móvil en estado activo para obtener los datos requeridos. La latencia de acceso puede definirse como el tiempo transcurrido desde que se ha emitido una solicitud hasta que se ha recibido la respuesta. 1 Esta investigación fue apoyada por una subvención de NSF IIS-0209170. En el pasado se han propuesto varios esquemas de indexación, entre los que destacan los basados en árboles y los esquemas de indexación exponencial [17]. Las principales desventajas de los esquemas basados en árboles son que se basan en estructuras arbóreas centralizadas. Para iniciar una búsqueda, la MU tiene que esperar hasta que llegue a la raíz del siguiente árbol de transmisión. Esto afecta significativamente el tiempo de afinación de la unidad móvil. Los esquemas exponenciales facilitan la replicación de índices compartiendo enlaces en diferentes árboles de búsqueda. Para las emisiones con un gran número de páginas, se ha demostrado que el esquema exponencial funciona de manera similar a los esquemas basados en árboles en términos de latencia de acceso. Además, la duración media de la emisión aumenta debido a la replicación del índice y esto puede causar un aumento significativo de la latencia del acceso. Ninguno de los sistemas de indexación mencionados es igualmente eficaz en la difusión de datos dependientes de la ubicación. Además de proporcionar baja latencia, carecen de propiedades que se utilizan para abordar los problemas de DDT. Proponemos un esquema de indexación en DAYS que se ocupa de algunos de estos problemas. Demostramos con resultados de simulación que nuestro esquema supera a algunos de los esquemas de indexación anteriores para la difusión de LDD en términos de tiempo de afinación. El resto del documento se presenta de la siguiente manera. En la sección 2, se analiza el trabajo anterior relacionado con la indexación de los datos de radiodifusión. La sección 3 describe nuestra arquitectura DAYS. Los datos dependientes de la ubicación, su generación y su posterior difusión se presentan en la sección 4. La sección 5 discute nuestro esquema de indexación en detalle. La simulación de nuestro esquema y su evaluación del desempeño se presenta en la sección 6. En la sección 7 se concluye el documento y se menciona la labor futura relacionada. 2. TRABAJO ANTERIOR Varias técnicas de indexación basadas en discos se han utilizado para la indexación de aire. Imielinski et al. [5, 6] aplicó el árbol del índice B+, donde los nodos de la hoja almacenan los tiempos de llegada de los ítems de datos. Se propuso el método de indexación distribuida para reproducir y distribuir eficientemente el árbol de índices en una emisión. Específicamente, el árbol índice se divide en una parte replicada y una parte no replicada. Cada emisión consiste en la parte replicada y la parte no replicada que indiza los elementos de datos inmediatamente después de ella. Como tal, cada nodo en la parte no replicada aparece sólo una vez en una emisión y, por lo tanto, reduce el costo de replicación y latencia de acceso, al tiempo que logra un buen tiempo de afinación. Chen et al. [2] y Shivakumar et al. [8] considera estructuras de árboles desequilibradas para optimizar el consumo de energía para el acceso a datos no uniformes. Estas estructuras minimizan el costo medio de búsqueda de índices reduciendo el número de búsquedas de datos en caliente a expensas de gastar más en datos en frío. Tan y Yu discutieron la organización de datos e índices bajo la emisión sesgada También se han sugerido métodos de Hashing y firma para la transmisión inalámbrica que admite consultas de igualdad [9]. En [5] se propuso un método flexible de indización. El índice flexible primero clasifica los elementos de datos en orden ascendente (o descendente) de los valores clave de búsqueda y luego los divide en segmentos p. El primer cubo en cada segmento de datos contiene un índice de control, que es un índice binario que asigna un valor clave dado al segmento que contiene esa clave, y un índice local, que es un índice de entrada m que asigna un valor clave dado a los cubos dentro del segmento actual. Al afinar los parámetros de p y m, los clientes móviles pueden lograr un buen tiempo de afinación o una buena latencia de acceso. Otra técnica de indexación propuesta es el esquema de indexación exponencial [17]. En este esquema, se utiliza un índice parametrizado, llamado índice exponencial, para optimizar la latencia del acceso o el tiempo de afinación. Facilita la replicación de índices mediante la vinculación de diferentes árboles de búsqueda. Todos los regímenes mencionados se han aplicado a datos que no están relacionados entre sí. Estos datos no relacionados pueden agruparse o no agruparse. Sin embargo, ninguno de ellos se ha ocupado específicamente de los requisitos de la DDT. Los datos dependientes de la ubicación son datos que están asociados con una ubicación. En la actualidad hay varias aplicaciones que se ocupan de la DDTS [13, 16]. Casi todos ellos representan LDD con la ayuda de estructuras jerárquicas [3, 4]. Esto se basa en la propiedad de contención de datos dependientes de la ubicación. La propiedad Containment ayuda a determinar la posición relativa de un objeto definiendo o identificando ubicaciones que contienen esos objetos. Las ubicaciones subordinadas están jerárquicamente relacionadas entre sí. Así, la propiedad Containment limita la gama de disponibilidad u operación de un servicio. Usamos esta propiedad de contención en nuestro esquema de indexación para indexar LDD. 3. DAYS ARCHITECTURE DAYS se ha conceptualizado para difundir datos tópicos y no tópicos a los usuarios en un espacio de difusión local y para aceptar consultas de usuarios individuales a nivel mundial. Los datos tópicos, por ejemplo, información meteorológica, información de tráfico, información de existencias, etc., cambian constantemente con el tiempo. Los datos no tópicos como hotel, restaurante, precios inmobiliarios, etc., no cambian tan a menudo. Así, imaginamos la presencia de dos tipos de distribución de datos: En el primer caso, el servidor empuja los datos a los usuarios locales a través de canales inalámbricos. El otro caso se refiere al servidor que envía los resultados de las consultas de los usuarios a través de canales inalámbricos de enlace descendente. Técnicamente, vemos la presencia de dos tipos de colas en el acceso basado en datos. Una es una cola muy cargada que contiene consultas cargadas globalmente. La otra es una cola relativamente ligera que consiste en consultas subidas localmente. La arquitectura DAYS [12], como se muestra en la figura 1, consiste en un servidor de datos, programador de transmisiones, coordinador de DAYS, red de satélites LEO para la entrega de datos a nivel mundial y un espacio de transmisión local. Los datos se introducen en el espacio de transmisión local para que los usuarios puedan sintonizarse con los canales inalámbricos para acceder a los datos. El espacio de transmisión local consiste en una torre de transmisión, unidades móviles y una red de máquinas de puesta en escena de datos llamadas subrogados. La estadificación de datos en sustitutos se ha investigado anteriormente como una técnica exitosa [12, 15] para los datos relacionados con los usuarios de caché. Creemos que la estadificación de datos se puede utilizar para reducir drásticamente el tiempo de latencia tanto para los datos de radiodifusión local como para las respuestas globales. La solicitud de consulta en los sustitutos puede utilizarse posteriormente para generar los patrones de popularidad que finalmente deciden el horario de emisión [12]. 18 Popularidad Comentarios de Surrogates for Broadcast Scheduler Local Space Broadcast Tower SurrogateMU MU MU Servidor de datosHorario de radiodifusiónDÍAS Coordinador Canal local de enlace descendente Canal global de enlace descendente Pull request cola cola Solicitud global cola Solicitud local cola Ubicación índice basado en Starbucks Plaza Kansas City Figura 1. Arquitectura DAYS Figura 2. Ubicación Estructura deStarbucks, Plaza 4. DATOS DEPENDIENTES DE LOCALIZACIÓN (LDD) Argumentamos que la incorporación de información de ubicación en la transmisión inalámbrica de datos puede disminuir significativamente la latencia de acceso. Esta propiedad se convierte en muy útil para la unidad móvil que tiene capacidad de almacenamiento y procesamiento limitada. Hay una variedad de aplicaciones para obtener información sobre tráfico, reservas de restaurantes y hoteles, comida rápida, gasolineras, oficina de correos, tiendas de comestibles, etc. Si estas aplicaciones se combinan con información de ubicación, entonces la búsqueda será rápida y altamente rentable. Una propiedad importante de las ubicaciones es Containment que ayuda a determinar la ubicación relativa de un objeto con respecto a su padre que contiene el objeto. Por lo tanto, Containment limita el rango de disponibilidad de un dato. Usamos esta propiedad en nuestro esquema de indexación. La base de datos contiene los contenidos transmitidos que se convierten en LDD [14] asociándolos con las ubicaciones respectivas para que puedan transmitirse de manera agrupada. El agrupamiento de LDD ayuda al usuario a localizar la información de manera eficiente y soporta la propiedad de contención. Presentamos un ejemplo para justificar nuestra propuesta. Ejemplo: Supongamos que un usuario emite una consulta Starbucks Coffee en Plaza por favor. para acceder a información sobre la sucursal Plaza de Starbucks Coffee en Kansas City. En el caso de la ubicación independiente establecido el sistema enumerará todas las cafeterías Starbucks en el área de Kansas City. Es evidente que esas respuestas aumentarán la latencia del acceso y no son deseables. Estos se pueden administrar de manera eficiente si el servidor tiene datos dependientes de la ubicación, es decir, una asignación entre los datos de una cafetería de Starbucks y su ubicación física. Además, para una consulta que incluya el rango de ubicaciones de Starbucks, bastará con una sola consulta solicitando ubicaciones para toda la región de Kansas City, como se muestra en la Figura 2. Esto ahorrará una enorme cantidad de ancho de banda al disminuir el número de mensajes y, al mismo tiempo, será útil para prevenir el cuello de botella de escalabilidad en una zona muy poblada. 4.1 Función de asignación para LDD El ejemplo justifica la necesidad de una función de asignación para procesar consultas dependientes de la ubicación. Esto será especialmente importante para las consultas basadas en la atracción en todo el mundo para las cuales la respuesta podría estar compuesta para diferentes partes del mundo. La función de mapeo es necesaria para construir el horario de emisión. Definimos Global Property Set (GPS) [11], Information Content (IC) set, and Location Jerarchy (LH) set where IC  GPS and LH  GPS to develop a mapping function. LH = {l1, l2, l3...,lk} donde li representan ubicaciones en el árbol de ubicación y IC = {ic1, ic2, ic3,...,icn} donde ici representan tipo de información. Por ejemplo, si tenemos tráfico, tiempo, y la información de stock están en transmisión entonces IC = {ictráfico, icweather, e icstock}. El esquema de asignación debe ser capaz de identificar y seleccionar un miembro IC y un nodo LH para (a) asociación correcta, (b) coincidencia de granularidad, (c) y condición de terminación. Por ejemplo, el clima • IC podría estar asociado con un país o un estado o una ciudad o un pueblo de LH. La coincidencia de granularidad entre el tiempo y un nodo LH es según el requisito del usuario. Así, con una granularidad gruesa la información meteorológica se asocia con un país para obtener el clima de los países y con la ciudad en una granularidad más fina. Si una ciudad es la mejor granularidad, entonces define la condición terminal para la asociación entre IC y LH para el tiempo. Esto significa que un usuario no puede obtener información meteorológica sobre la subdivisión de una ciudad. En realidad, el clima de una subdivisión no tiene ningún sentido. Desarrollamos un simple esquema de mapeo heurístico basado en las necesidades del usuario. Dejar IC = {m1, m2,m3.,..., mk}, donde mi representa su elemento y dejar LH = {n1, n2, n3,..., nl}, donde ni representa miembro LHs. Definimos GPS para IC (GPSIC)  GPS y para LH (GPSLH)  GPS como GPSIC = {P1, P2,..., Pn}, donde P1, P2, P3,..., Pn son propiedades de sus miembros y GPSLH = {Q1, Q2,..., Qm} donde Q1, Q2,..., Qm son propiedades de sus miembros. Las propiedades de un miembro particular de IC son un subconjunto de GPSIC. Generalmente es cierto que (conjunto de propiedades (miÃ3n IC) â € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € Por ejemplo, stock • IC y película • IC calificación no tienen ninguna propiedad en común. Asumimos que dos o más miembros del CI tienen al menos una propiedad geográfica común (es decir, lugar) porque DAYS transmite información sobre esas categorías, que están estrechamente vinculadas con un lugar. Por ejemplo, las acciones de una empresa están relacionadas con un país, el clima está relacionado con una ciudad o estado, etc. Definimos el subconjunto de propiedades de mio IC como PSm i ♥ mi • IC y PSm i = {P1, P2,..., Pr} donde r ≤ n. • Pr {Pr • PSm i → Pr • GPSIC} que implica que • i, PSm i  GPSIC. Las propiedades geográficas de este conjunto son indicativas de si mi IC puede ser mapeado a un solo nivel de granularidad (es decir. una sola ubicación) en LH o varios niveles de granularidad (es decir, más de un nodo en 19 de la jerarquía) en LH. ¿Cuántos y qué niveles de granularidad debe un mapa mi, depende del nivel en el que el proveedor de servicios quiere proporcionar información sobre el mi en cuestión. Del mismo modo, definimos un subconjunto de propiedades de los miembros de LH como PSn j Ł nj Ł LH que puede ser escrito como PSn j ={Q1, Q2, Q3,..., Qs} donde s ≤ m. Además, El proceso de mapeo de IC a LH es entonces identificar para algunos mxÃ3 IC uno o mÃ¡s nyÃ3 LH tal que PSmx Ã3 PSnv Esto significa que cuando mx mapea a ny y a todos los niños de ny si mx puede mapear a múltiples niveles de granularidad o mx mapea sólo a ny si mx puede mapear a un solo nivel de granularidad. Asumimos que los nuevos miembros pueden unirse y los antiguos miembros pueden salir de IC o LH en cualquier momento. La eliminación de miembros del espacio del CI es simple, pero la adición de miembros al espacio del CI es más restrictiva. Si queremos añadir un nuevo miembro al espacio IC, primero definimos un conjunto de propiedades para el nuevo miembro: PSmnew_m ={P1, P2, P3,..., Pt} y lo añadimos al CI sólo si la condición: Este régimen tiene una ventaja adicional al permitir a los proveedores de servicios de información controlar el tipo de información que desean proporcionar a los usuarios. Presentamos el siguiente ejemplo para ilustrar el concepto de mapeo. IC = {Tráfico, Stock, Restaurante, Tiempo, Fechas importantes de la historia, Condiciones de la carretera} LH = {País, Estado, Ciudad, Código postal, Principales carreteras} GPSIC = {Surface-mobility, Roads, High, Low, Italian-food, StateName, Temp, CityName, Seat-disponibilidad, Zip, Traffic-jams, Además, PS(ICStock) indicó que Stock solo puede mapear a un solo país. Cuando consideramos el miembro Tráfico del espacio IC, sólo PS(ICTraffic) â € ¢ PScity â € TM. Como PS(ICTRAFFIC) indica que Traffic puede mapear a una sola ubicación, solo mapea a City y a ninguno de sus hijos. Ahora bien, a diferencia de Stock, el mapeo del tráfico con las principales carreteras, que es un hijo de la ciudad, es significativo. Sin embargo, los proveedores de servicios tienen derecho a controlar los niveles de granularidad a los que desean proporcionar información sobre un miembro del espacio IC. PS(ICRoad conditions) • PSState  y PS(ICRoad conditions) • PSCity. Así que las condiciones de la carretera son mapas al Estado, así como a la ciudad. Como PS(ICRoad conditions) indica que las condiciones de la carretera pueden mapear a múltiples niveles de granularidad, las condiciones de la carretera también mapearán a Zip Code y las principales carreteras, que son los niños del Estado y la ciudad. Del mismo modo, los mapas del restaurante sólo al código postal, y los mapas meteorológicos al estado, la ciudad y sus hijos, las carreteras principales y el código postal. 5. ESQUEMA DE ÍNDICE BASADA EN LOCALIZACIÓN Esta sección discute nuestro esquema de indexación basado en la ubicación (LBIS). El esquema está diseñado para ajustarse a la emisión LDD en nuestro proyecto DAYS. Como se discutió anteriormente, utilizamos la propiedad de contención de LDD en el esquema de indexación. Esto limita significativamente la búsqueda de nuestros datos requeridos a una parte particular de la transmisión. Por lo tanto, argumentamos que el esquema proporciona tiempo de afinación limitado. Describimos la arquitectura de nuestro esquema de indexación. Nuestro esquema contiene cubos de datos separados y cubos de índices. Los cubos de índice son de dos tipos. El primer tipo se llama el índice Mayor. El índice Major proporciona información sobre los tipos de datos transmitidos. Por ejemplo, si tenemos la intención de transmitir información como Entretenimiento, Tiempo, Tráfico, etc., entonces el índice principal apunta a estos tipos principales de información y/o sus principales subtipos de información, el número de subtipos principales variando de una información a otra. Esto limita estrictamente el número de accesos a un índice principal. El índice Major nunca apunta a los datos originales. Señala a los subíndices llamados el índice Menor. Los índices menores son los índices que realmente apuntan a los datos originales. Llamamos a estos indicadores menores como punteros de ubicación, ya que apunta a los datos que están asociados con una ubicación. Por lo tanto, nuestra búsqueda de datos incluye el acceso a un índice mayor y algunos índices menores, el número de índice menor variando dependiendo del tipo de información. Por lo tanto, nuestro esquema de indexación tiene en cuenta la naturaleza jerárquica del LDD, la propiedad Containment, y requiere que nuestro programa de transmisión se agrupe en función del tipo de datos y la ubicación. La estructura de la jerarquía de ubicación requiere el uso de diferentes tipos de índice en diferentes niveles. La estructura y las posiciones del índice dependen estrictamente de la jerarquía de ubicación descrita anteriormente en nuestro esquema de asignación. Ilustramos la implementación de nuestro esquema con un ejemplo. Posteriormente se mencionan las normas para la elaboración del índice. 20 A1 Entretenimiento Restaurante Película A2 A3 A4 R1 R2 R3 R4 R5 R6 R7 R8 Tiempo KC SL JC SF Entretenimiento R1 R2 R3 R4 R4 R5 R6 R7 R8 KC SL JC SF (A, R, NEXT = 8) 3, R5 4, R7 Tipo (S, L) ER W E EM (1, 4) (5, Información cartográfica de ubicación para radiodifusión Figura 4. Datos junto con el índice basado en la ubicación Ejemplo: Supongamos que nuestro contenido de transmisión contiene ICentertainment y ICweather que se representa como se muestra en la Fig. 3. Ai representa las áreas de la ciudad y Ri representa las carreteras en un área determinada. Las hojas de la estructura meteorológica representan cuatro ciudades. La estructura del índice se indica en la Fig. 4 que muestra la posición del índice mayor y menor y los datos en el horario de emisión. Proponemos las siguientes reglas para la creación del programa de emisión indexado por aire: • Se crean el índice mayor y el índice menor. • El índice principal contiene la posición y el rango de diferentes tipos de ítems de datos (Weather and Entertainment, Figura 3) y sus categorías. Las subcategorías de Entretenimiento, Cine y Restaurante, también están en el índice. Así, el índice principal contiene Entretenimiento (E), Entretenimiento-Movie (EM), Entretenimiento-Restaurante (ER), y Tiempo (W). La tupla (S, L) representa la posición inicial (S) del elemento de datos y L representa el rango del elemento en términos de número de cubos de datos. • El índice menor contiene las variables A, R y un puntero Siguiente. En nuestro ejemplo (Figura 3), la carretera R representa el primer nodo del área A. El índice menor se utiliza para apuntar a cubos de datos reales presentes en los niveles más bajos de la jerarquía. En cambio, el índice principal apunta a una gama más amplia de ubicaciones, por lo que contiene información sobre las principales y subcategorías de datos. • La información del índice no se incorpora en los cubos de datos. Los cubos de índice están separados que contienen sólo la información de control. • El número de cubos índice m=#(IC), IC = {ic1, ic2, ic3,...,icn} donde ici representa el tipo de información y # representa la cardinalidad del conjunto de contenido de información IC. En este ejemplo, IC= {icMovie, icWeather, icRestaurant} y así #(IC) =3. Por lo tanto, el número de cubos índice principales es 3. • El mecanismo para resolver la consulta está presente en el coordinador de java en MU. Por ejemplo, si una consulta Q se presenta como Q (Entretenimiento, Película, Road_1), entonces la búsqueda resultante será para la información EM en el índice principal. Nosotros decimos, Q EM. Nuestro índice propuesto funciona de la siguiente manera: Supongamos que una MU emite una consulta que está representada por Java Coordinador presente en la MU como información de restaurante en la carretera 7. Esto es resuelto por el coordinador como Q ER. Esto significa que uno tiene que buscar la unidad de índice ER en el índice principal. Supongamos que el MU entra en el canal en R2. El primer índice que recibe es un índice menor después de R2. En este índice, el valor de la variable Siguiente = 4, lo que significa que el siguiente índice mayor está presente después del cubo 4. La MU puede entrar en modo somnoliento. Se activa después del cubo 4 y recibe el índice principal. Busca información de ER que es la primera entrada en este índice. Ahora es seguro que la MU obtendrá la posición del cubo de datos en el índice menor contiguo. La segunda unidad en el índice menor representa la posición de los datos requeridos R7. Indica que el cubo de datos es el primer cubo en el Área 4. El MU vuelve a entrar en modo somnífero y se activa después del cubo 6. Obtiene los datos necesarios en el siguiente cubo. Presentamos el algoritmo para buscar el Índice basado en la ubicación. Algoritmo 1 Índice basado en la ubicación Buscar en DAYS 1. Escanear la transmisión para el siguiente cubo índice, encontrado=falso 2. Mientras que (no se encuentra) hacer 3. si cubo es el índice mayor entonces 4. Encuentra el Tipo & Tupla (S, L) 5. si S es mayor que 1, entra en modo Doze durante S segundos 6. termina si 7. Despierta en el cubo Sth y observa el índice menor 8. termina si 9. si el cubo es índice menor entonces 10. si TypeRequest no es igual a Typefound y (A,R)Solicitud no es igual a (A,R)found entonces 11. Vaya al modo de doze hasta el SIGUIENTE y repita desde el paso 3 12. terminar si 13. de lo contrario encontrar entrada en Índice Menor que apunta a los datos 14. Calcular la hora de llegada T del cubo de datos 15. Entra en modo somnífero hasta la T 16. Despierta en T y accede a los datos, encontrados = verdadero 17. fin de lo contrario 18. final si 19. final Mientras que 21 6. EVALUACIÓN DE LA EJECUCIÓN La conservación de la energía es la principal preocupación cuando tratamos de acceder a los datos de la transmisión inalámbrica. Un sistema eficiente debe permitir al dispositivo móvil acceder a los datos que necesita manteniéndose activo durante un período mínimo de tiempo. Esto ahorraría una cantidad considerable de energía. Dado que los elementos se distribuyen en función de los tipos y se asignan a ubicaciones adecuadas, argumentamos que nuestra transmisión se ocupa de los tipos de datos agrupados. La unidad móvil tiene que acceder a un índice mayor y a un índice menor relativamente menor para obtener información sobre la hora de llegada de los datos. Esto contrasta con el esquema exponencial donde los índices son de tamaños iguales. El ejemplo discutido y Algoritmo 1 revela que para acceder a cualquier dato, necesitamos acceder al índice mayor sólo una vez seguido por uno o más accesos al índice menor. El número de accesos menores al índice depende del número de ubicaciones internas. Como el número de ubicaciones internas varía de elemento a elemento (por ejemplo, Weather está generalmente asociado con una ciudad mientras que el tráfico se granula hasta las carreteras principales y menores de una ciudad), argumentamos que la estructura de la información de localización mapeada puede ser visualizada como un bosque que es una colección de árboles generales, el número de árboles generales dependiendo de los tipos de información transmitida y la profundidad de un árbol dependiendo de la granularidad de la información de Para nuestros experimentos, asumimos el bosque como una colección de árboles M-ary equilibrados. Asumimos además que los árboles de la arteria M están llenos al asumir la presencia de nodos ficticios en diferentes niveles de un árbol. Así, si el número de ítems de datos es d y la altura del árbol es m, entonces n= (m*d-1)/(m-1) donde n es el número de vértices en el árbol e i= (d-1)/(m-1) donde i es el número de vértices internos. El tiempo de afinación para un ítem de datos implica 1 unidad de tiempo requerido para acceder al índice principal más el tiempo requerido para acceder a los ítems de datos presentes en las hojas del árbol. Por lo tanto, el tiempo de sintonización con d ítems de datos es t = logmd+1 Podemos decir que el tiempo de sintonización está limitado por O(logmd). Comparamos nuestro esquema con el esquema de indexación distribuida y exponencial. Asumimos una emisión plana y el número de páginas que varían de 5000 a 25000. Los diversos parámetros de simulación se muestran en la Tabla 1. La Figura 5-8 muestra los tiempos relativos de afinación de tres algoritmos de indexación, es decir, el LBIS, esquema exponencial y el esquema de árbol distribuido. La Figura 5 muestra el resultado para el número de nodos internos de ubicación = 3. Podemos ver que LBIS supera significativamente a los otros esquemas. El tiempo de afinación en LBIS varía de aproximadamente 6,8 a 8. Este gran tiempo de afinación se debe al hecho de que después de alcanzar el índice menor más bajo, la MU puede tener que acceder a pocos cubos secuencialmente para obtener el cubo de datos requerido. Podemos ver que el tiempo de afinación tiende a ser estable a medida que aumenta la duración de la emisión. En la figura 6 se considera m= 4. Aquí podemos ver que el exponencial y el rendimiento distribuido casi de manera similar, aunque el primero parece funcionar ligeramente mejor a medida que aumenta la longitud de emisión. Un patrón muy interesante es visible en la figura 7. Para las emisiones de menor tamaño, el LBIS parece tener un tiempo de afinación mayor que los otros dos esquemas. Pero a medida que aumenta la duración de la emisión, es claramente visible que el LBIS supera a los otros dos esquemas. La indexación del árbol distribuido muestra un comportamiento similar al del LBIS. El tiempo de afinación en LBIS sigue siendo bajo porque el algoritmo permite a la MU saltarse algunos Índices Menores intermedios. Esto permite que la MU se mueva a niveles más bajos directamente después de entrar en modo activo, ahorrando así energía valiosa. Esta acción no es posible en la indexación de árboles distribuidos y por lo tanto podemos observar que su tiempo de afinación es más que el esquema LBIS, aunque tiene mejores resultados que el esquema exponencial. La Figura 8, en contraste, nos muestra que el tiempo de afinación en LBIS, aunque menor que los otros dos esquemas, tiende a aumentar bruscamente a medida que la longitud de emisión se hace mayor que las 15000 páginas. Esto puede atribuirse tanto al aumento del tiempo necesario para escanear los Índices Menores intermedios como a la duración de la emisión. Pero podemos observar que la pendiente de la curva LBIS es significativamente menor que las otras dos curvas. Tabla 1 Parámetros de simulación P Valores de definición N Número de datos Elementos 5000 - 25000 m Número de nodos de ubicación internos 3, 4, 5, 6 B Capacidad de cubo sin índice (para índice exponencial) 10,64,128,256 i Base de índice para índice exponencial 2,4,6,8 k Tamaño del índice para árbol distribuido 8 bytes Los resultados de la simulación establecen algunos hechos sobre nuestro esquema de indexación basado en la ubicación. En la mayoría de los casos, el sistema funciona mejor que los otros dos en términos de tiempo de afinación. A medida que aumenta la duración de la emisión, después de cierto punto, aunque el tiempo de afinación aumenta como resultado de factores que hemos descrito antes, el esquema siempre funciona mejor que los otros dos esquemas. Debido al límite prescrito del número de páginas en el papel, no podemos mostrar más resultados. Pero estos resultados omitidos muestran una tendencia similar a la de los resultados representados en la figura 5-8. 7. CONCLUSIÓN Y FUTURO TRABAJO En este trabajo hemos presentado un esquema para el mapeo de datos de radiodifusión inalámbrica con sus ubicaciones. Hemos presentado un ejemplo para mostrar cómo la estructura jerárquica del árbol de ubicación mapea con los datos para crear LDD. Hemos presentado un esquema llamado LBIS para indexar este LDD. Hemos utilizado la propiedad de contención de LDD en el esquema que limita la búsqueda a un estrecho rango de datos en la emisión, ahorrando así energía valiosa en el dispositivo. La asignación de datos con ubicaciones y el esquema de indexación se utilizará en nuestro proyecto DAYS para crear la arquitectura basada en empuje. El LBIS se ha comparado con otros dos sistemas de indexación prominentes, a saber, el sistema de indexación de árboles distribuidos y el sistema de indexación exponencial. En nuestras simulaciones demostramos que el esquema LBIS tiene el menor tiempo de afinación para las emisiones que tienen un gran número de páginas, ahorrando así una valiosa potencia de batería en la MU. 22 En el trabajo futuro tratamos de incorporar la arquitectura basada en el tirón en nuestro proyecto DAYS. Los datos del servidor están disponibles para el acceso de los usuarios globales. Esto se puede hacer poniendo una solicitud al servidor de origen. La consulta en este caso es una consulta global. Se transfiere del servidor de origen de los usuarios al servidor de destino mediante el uso de satélites LEO. Tenemos la intención de utilizar nuestro esquema de LDD y arquitectura de estadificación de datos en la arquitectura basada en el tirón. Demostraremos que el esquema de LDD junto con la arquitectura de estadificación de datos mejora significativamente la latencia para la consulta global y local. 8. REFERENCIAS [1] Acharya, S., Alonso, R. Franklin, M y Zdonik S. Disco de transmisión: Gestión de datos para entornos de comunicación asimétricos. En Actas de la Conferencia de la ACM SIGMOD sobre Gestión de Datos, págs. 199 a 210, San José, CA, mayo de 1995. [2] Chen, M.S.,Wu, K.L. y Yu, P. S. Optimizando la asignación de índices para la difusión secuencial de datos en la computación móvil inalámbrica. IEEE Transactions on Knowledge and Data Engineering (TKDE), 15(1):161-173, enero/febrero de 2003. Gráfico 5 Tamaño de la transmisión (# cubos) Dist tree Expo LBIS Figura 6. Tamaño de la transmisión (# cubos) Dist tree Expo LBIS Figura 7. Tamaño de la transmisión (# cubos) Dist tree Expo LBIS Figura 8. Tamaño de la transmisión (# cubos) Árbol dist Expo LBIS Tiempo medio de afinación Tiempo medio de afinación Tiempo medio de afinación 23 [3] Hu, Q. L., Lee, D. L. y Lee, W.C. Evaluación del rendimiento de un sistema inalámbrico de difusión jerárquica de datos. En Actas de la Quinta Conferencia Internacional Anual de ACM sobre Computación y Redes Móviles (MobiCom99), págs. 163 a 173, Seattle, WA, agosto de 1999. [4] Hu, Q. L. Lee, W.C. y Lee, D. L. Power consultas conservadoras de múltiples atributos en la transmisión de datos. En Actas de la 16a Conferencia Internacional sobre Ingeniería de Datos (ICDE00), páginas 157-166, San Diego, CA, febrero de 2000. [5] Imielinski, T., Viswanathan, S. y Badrinath. B. R. Filtrado eficiente de energía de los datos en el aire. En Actas de la Cuarta Conferencia Internacional sobre Tecnología de Bases de Datos Ampliadas (EDBT94), págs. 245 a 258, Cambridge, Reino Unido, marzo de 1994. [6] Imielinski, T., Viswanathan, S. y Badrinath. B. R. Datos sobre el aire - Organización y acceso. Operaciones de IEEE en Ingeniería de Conocimientos e Datos (TKDE), 9(3):353-372, mayo/junio de 1997. [7] Shih, E., Bahl, P. y Sinclair, M. J. Wake on wireless: Una estrategia de ahorro de energía impulsada por eventos para dispositivos operados por baterías. En Actas de la 8a Conferencia Internacional Anual de ACM sobre Computación y Redes Móviles (MobiCom02), págs. 160 a 171, Atlanta, GA, septiembre de 2002. [8] Shivakumar N. y Venkatasubramanian, S. Indización energéticamente eficiente para la difusión de información en sistemas inalámbricos. ACM/Baltzer Journal of Mobile Networks and Applications (MONET), 1(4):433-446, diciembre de 1996. [9] Tan K. L. y Yu, J. X. Filtración energéticamente eficiente de emisiones no uniformes. En Actas de la 16a Conferencia Internacional sobre Sistemas de Computación Distribuida (ICDCS96), págs. 520 a 527, Hong Kong, mayo de 1996. [10] Viredaz, M. A., Brakmo, L. S. y Hamburgen, W. R. Gestión de energía en dispositivos portátiles. ACM Coue, 1(7):44-52, octubre de 2003. [11] Garg, N. Kumar, V., & Dunham, M.H. Mapeo e indización de información en DAYS, 6o Taller Internacional sobre Movilidad en Bases de Datos y Sistemas Distribuidos, en conjunción con la 14a Conferencia Internacional sobre Aplicaciones de Bases de Datos y Sistemas Expertos, 1o a 5 de septiembre, Praga, República Checa, 2003. [12] Acharya D., Kumar, V., & Dunham, M.H. InfoSpace: Sistema de difusión de datos públicos híbrido y adaptativo para computación ubicua. Aceptado para publicación en el número especial de Pervasive Computing. Wiley Journal for Wireless Communications and Mobile Computing, 2004. [13] Acharya D., Kumar, V., & Prabhu, N. Descubriendo y usando Servicios Web en M-Commerce, Proceedings for 5th VLDB Workshop on Technologies for E-Services, Toronto, Canada,2004. [14] Acharya D., Kumar, V. Indexing Location Depending Data in broadcast en ambiente. Aceptado para su publicación, número especial de JDIM sobre Gestión de Datos Distribuidos, 2005. [15] Flinn, J., Sinnamohideen, S., & Satyanarayan, M. Data Staging on No Trusted Surrogates, Intel Research, Pittsburg, Unpublished Report, 2003. [16] Seydim, A.Y., Dunham, M.H. & Kumar, V. Location dependiente consulta processing, Actas del segundo taller internacional de ACM sobre ingeniería de datos para acceso inalámbrico y móvil, p.47-53, Santa Barbara, California, USA, 2001. [17] Xu, J., Lee, W.C., Tang., X. Índice exponencial: Un esquema de indexación distribuida para los datos sobre el aire. En Actas de la II Conferencia Internacional ACM/USENIX sobre Sistemas, Aplicaciones y Servicios Móviles (MobiSys04), Boston, MA, junio de 2004. 24 ",
            "error": []
        },
        "day": {
            "translated_key": [],
            "translated_annotated_text": "Esquema de Indización basado en la ubicación para DAYS Debopam Acharya y Vijay Kumar 1 Computer Science and Informatics University of Missouri-Kansas City Kansas City, MO 64110 dargc(kumarv)@umkc.edu RESUMEN La difusión de datos a través de canales inalámbricos para transmitir información a los consumidores se está volviendo bastante común. Se han propuesto muchos planes de difusión, pero la mayoría de ellos llevan los datos a canales inalámbricos para consumo general. La difusión basada en push [1] es esencialmente asimétrica, es decir, el volumen de datos es mayor desde el servidor a los usuarios que desde los usuarios de vuelta al servidor. El esquema basado en el empuje requiere una indexación que indica cuándo se transmitirán los datos y su posición en la emisión. Latencia de acceso y tiempo de afinación son los dos parámetros principales que pueden utilizarse para evaluar un esquema de indexación. Dos de los importantes esquemas de indexación propuestos anteriormente se basaban en los árboles y los esquemas de indexación exponencial. Ninguno de estos planes pudo satisfacer los requisitos de los datos dependientes de la ubicación (DDL), que es una característica muy deseable de la difusión de datos. En este artículo, discutimos la emisión de LDD en nuestro proyecto DAta in Your Space (DAYS), y proponemos un esquema para la indexación de LDD. Argumentamos que este sistema, cuando se aplica a la DDTS, mejora significativamente el rendimiento en términos de tiempo de afinación en los esquemas antes mencionados. Demostramos nuestro argumento con la ayuda de resultados de simulación. Categorías y Descriptores sujetos H.3.1 [Sistemas de información]: Almacenamiento y recuperación de información - análisis e indexación de contenido; H.3.3 [Sistemas de información]: Almacenamiento y recuperación de información - búsqueda y recuperación de información. Términos generales Algoritmos, Rendimiento, Experimentación 1. INTRODUCCIÓN La difusión inalámbrica de datos es una forma económica y eficiente de poner los datos deseados a disposición de un gran número de usuarios móviles o estáticos. El modo de transferencia de datos es esencialmente asimétrico, es decir, la capacidad de transferencia de datos (comunicación descendente) del servidor al cliente (usuario móvil) es significativamente mayor que el cliente o usuario móvil al servidor (comunicación ascendente). La eficacia de un sistema de difusión de datos se determina por su capacidad para proporcionar a los usuarios los datos requeridos en cualquier lugar y en cualquier momento. Una de las mejores maneras de lograr esto es a través de la difusión de servicios basados en la ubicación altamente personalizados (LBS) que permite a los usuarios acceder a datos dependientes de la ubicación personalizada. Un ejemplo sería alguien usando su dispositivo móvil para buscar un restaurante vegetariano. La aplicación LBS interactuaría con otros componentes de tecnología de localización o utilizaría la entrada de usuarios móviles para determinar la ubicación de los usuarios y descargar la información sobre los restaurantes cercanos al usuario sintonizando el canal inalámbrico que está difundiendo LDD. Vemos un despliegue limitado de LBS por parte de algunos proveedores de servicios. Pero hay todos los indicios de que con el tiempo se resolverán algunos de los complejos problemas técnicos, como el marco de localización uniforme, el cálculo y el seguimiento de ubicaciones en todo tipo de lugares, el posicionamiento en diversos entornos, aplicaciones de localización innovadoras, etc., y LBS se convertirá en una instalación común y ayudará a mejorar la productividad del mercado y el confort del cliente. En nuestro proyecto llamado DAYS, utilizamos el mecanismo de difusión de datos inalámbricos para impulsar LDD a los usuarios y usuarios móviles monitorear y sintonizar el canal para encontrar y descargar los datos requeridos. Sin embargo, es probable que una emisión simple cause una degradación significativa del rendimiento de los dispositivos móviles con limitaciones energéticas, y una solución común a este problema es el uso de una indexación eficiente del aire. El enfoque de indexación almacena información de control que informa al usuario sobre la ubicación de los datos en la emisión y cómo y cuándo pudo acceder a ella. Un usuario móvil, por lo tanto, tiene un poco de tiempo libre para entrar en el modo de somnífero que conserva valiosa energía. También permite al usuario personalizar su propio dispositivo móvil afinando selectivamente la información de su elección. La eficiencia del acceso y la conservación de la energía son las dos cuestiones importantes para los sistemas de radiodifusión de datos. La eficiencia de acceso se refiere a la latencia experimentada cuando se inicia una solicitud hasta que se recibe la respuesta. Conservación de la energía [7, 10] se refiere al uso eficiente de la energía limitada del dispositivo móvil para acceder a los datos de radiodifusión. Dos parámetros que afectan a estos son el tiempo de afinación y la latencia de acceso. El tiempo de sintonización se refiere al tiempo durante el cual la unidad móvil (MU) permanece en estado activo para sintonizar el canal y descargar los datos requeridos. También se puede definir como el número de cubos sintonizados por el dispositivo móvil en estado activo para obtener los datos requeridos. La latencia de acceso puede definirse como el tiempo transcurrido desde que se ha emitido una solicitud hasta que se ha recibido la respuesta. 1 Esta investigación fue apoyada por una subvención de NSF IIS-0209170. En el pasado se han propuesto varios esquemas de indexación, entre los que destacan los basados en árboles y los esquemas de indexación exponencial [17]. Las principales desventajas de los esquemas basados en árboles son que se basan en estructuras arbóreas centralizadas. Para iniciar una búsqueda, la MU tiene que esperar hasta que llegue a la raíz del siguiente árbol de transmisión. Esto afecta significativamente el tiempo de afinación de la unidad móvil. Los esquemas exponenciales facilitan la replicación de índices compartiendo enlaces en diferentes árboles de búsqueda. Para las emisiones con un gran número de páginas, se ha demostrado que el esquema exponencial funciona de manera similar a los esquemas basados en árboles en términos de latencia de acceso. Además, la duración media de la emisión aumenta debido a la replicación del índice y esto puede causar un aumento significativo de la latencia del acceso. Ninguno de los sistemas de indexación mencionados es igualmente eficaz en la difusión de datos dependientes de la ubicación. Además de proporcionar baja latencia, carecen de propiedades que se utilizan para abordar los problemas de DDT. Proponemos un esquema de indexación en DAYS que se ocupa de algunos de estos problemas. Demostramos con resultados de simulación que nuestro esquema supera a algunos de los esquemas de indexación anteriores para la difusión de LDD en términos de tiempo de afinación. El resto del documento se presenta de la siguiente manera. En la sección 2, se analiza el trabajo anterior relacionado con la indexación de los datos de radiodifusión. La sección 3 describe nuestra arquitectura DAYS. Los datos dependientes de la ubicación, su generación y su posterior difusión se presentan en la sección 4. La sección 5 discute nuestro esquema de indexación en detalle. La simulación de nuestro esquema y su evaluación del desempeño se presenta en la sección 6. En la sección 7 se concluye el documento y se menciona la labor futura relacionada. 2. TRABAJO ANTERIOR Varias técnicas de indexación basadas en discos se han utilizado para la indexación de aire. Imielinski et al. [5, 6] aplicó el árbol del índice B+, donde los nodos de la hoja almacenan los tiempos de llegada de los ítems de datos. Se propuso el método de indexación distribuida para reproducir y distribuir eficientemente el árbol de índices en una emisión. Específicamente, el árbol índice se divide en una parte replicada y una parte no replicada. Cada emisión consiste en la parte replicada y la parte no replicada que indiza los elementos de datos inmediatamente después de ella. Como tal, cada nodo en la parte no replicada aparece sólo una vez en una emisión y, por lo tanto, reduce el costo de replicación y latencia de acceso, al tiempo que logra un buen tiempo de afinación. Chen et al. [2] y Shivakumar et al. [8] considera estructuras de árboles desequilibradas para optimizar el consumo de energía para el acceso a datos no uniformes. Estas estructuras minimizan el costo medio de búsqueda de índices reduciendo el número de búsquedas de datos en caliente a expensas de gastar más en datos en frío. Tan y Yu discutieron la organización de datos e índices bajo la emisión sesgada También se han sugerido métodos de Hashing y firma para la transmisión inalámbrica que admite consultas de igualdad [9]. En [5] se propuso un método flexible de indización. El índice flexible primero clasifica los elementos de datos en orden ascendente (o descendente) de los valores clave de búsqueda y luego los divide en segmentos p. El primer cubo en cada segmento de datos contiene un índice de control, que es un índice binario que asigna un valor clave dado al segmento que contiene esa clave, y un índice local, que es un índice de entrada m que asigna un valor clave dado a los cubos dentro del segmento actual. Al afinar los parámetros de p y m, los clientes móviles pueden lograr un buen tiempo de afinación o una buena latencia de acceso. Otra técnica de indexación propuesta es el esquema de indexación exponencial [17]. En este esquema, se utiliza un índice parametrizado, llamado índice exponencial, para optimizar la latencia del acceso o el tiempo de afinación. Facilita la replicación de índices mediante la vinculación de diferentes árboles de búsqueda. Todos los regímenes mencionados se han aplicado a datos que no están relacionados entre sí. Estos datos no relacionados pueden agruparse o no agruparse. Sin embargo, ninguno de ellos se ha ocupado específicamente de los requisitos de la DDT. Los datos dependientes de la ubicación son datos que están asociados con una ubicación. En la actualidad hay varias aplicaciones que se ocupan de la DDTS [13, 16]. Casi todos ellos representan LDD con la ayuda de estructuras jerárquicas [3, 4]. Esto se basa en la propiedad de contención de datos dependientes de la ubicación. La propiedad Containment ayuda a determinar la posición relativa de un objeto definiendo o identificando ubicaciones que contienen esos objetos. Las ubicaciones subordinadas están jerárquicamente relacionadas entre sí. Así, la propiedad Containment limita la gama de disponibilidad u operación de un servicio. Usamos esta propiedad de contención en nuestro esquema de indexación para indexar LDD. 3. DAYS ARCHITECTURE DAYS se ha conceptualizado para difundir datos tópicos y no tópicos a los usuarios en un espacio de difusión local y para aceptar consultas de usuarios individuales a nivel mundial. Los datos tópicos, por ejemplo, información meteorológica, información de tráfico, información de existencias, etc., cambian constantemente con el tiempo. Los datos no tópicos como hotel, restaurante, precios inmobiliarios, etc., no cambian tan a menudo. Así, imaginamos la presencia de dos tipos de distribución de datos: En el primer caso, el servidor empuja los datos a los usuarios locales a través de canales inalámbricos. El otro caso se refiere al servidor que envía los resultados de las consultas de los usuarios a través de canales inalámbricos de enlace descendente. Técnicamente, vemos la presencia de dos tipos de colas en el acceso basado en datos. Una es una cola muy cargada que contiene consultas cargadas globalmente. La otra es una cola relativamente ligera que consiste en consultas subidas localmente. La arquitectura DAYS [12], como se muestra en la figura 1, consiste en un servidor de datos, programador de transmisiones, coordinador de DAYS, red de satélites LEO para la entrega de datos a nivel mundial y un espacio de transmisión local. Los datos se introducen en el espacio de transmisión local para que los usuarios puedan sintonizarse con los canales inalámbricos para acceder a los datos. El espacio de transmisión local consiste en una torre de transmisión, unidades móviles y una red de máquinas de puesta en escena de datos llamadas subrogados. La estadificación de datos en sustitutos se ha investigado anteriormente como una técnica exitosa [12, 15] para los datos relacionados con los usuarios de caché. Creemos que la estadificación de datos se puede utilizar para reducir drásticamente el tiempo de latencia tanto para los datos de radiodifusión local como para las respuestas globales. La solicitud de consulta en los sustitutos puede utilizarse posteriormente para generar los patrones de popularidad que finalmente deciden el horario de emisión [12]. 18 Popularidad Comentarios de Surrogates for Broadcast Scheduler Local Space Broadcast Tower SurrogateMU MU MU Servidor de datosHorario de radiodifusiónDÍAS Coordinador Canal local de enlace descendente Canal global de enlace descendente Pull request cola cola Solicitud global cola Solicitud local cola Ubicación índice basado en Starbucks Plaza Kansas City Figura 1. Arquitectura DAYS Figura 2. Ubicación Estructura deStarbucks, Plaza 4. DATOS DEPENDIENTES DE LOCALIZACIÓN (LDD) Argumentamos que la incorporación de información de ubicación en la transmisión inalámbrica de datos puede disminuir significativamente la latencia de acceso. Esta propiedad se convierte en muy útil para la unidad móvil que tiene capacidad de almacenamiento y procesamiento limitada. Hay una variedad de aplicaciones para obtener información sobre tráfico, reservas de restaurantes y hoteles, comida rápida, gasolineras, oficina de correos, tiendas de comestibles, etc. Si estas aplicaciones se combinan con información de ubicación, entonces la búsqueda será rápida y altamente rentable. Una propiedad importante de las ubicaciones es Containment que ayuda a determinar la ubicación relativa de un objeto con respecto a su padre que contiene el objeto. Por lo tanto, Containment limita el rango de disponibilidad de un dato. Usamos esta propiedad en nuestro esquema de indexación. La base de datos contiene los contenidos transmitidos que se convierten en LDD [14] asociándolos con las ubicaciones respectivas para que puedan transmitirse de manera agrupada. El agrupamiento de LDD ayuda al usuario a localizar la información de manera eficiente y soporta la propiedad de contención. Presentamos un ejemplo para justificar nuestra propuesta. Ejemplo: Supongamos que un usuario emite una consulta Starbucks Coffee en Plaza por favor. para acceder a información sobre la sucursal Plaza de Starbucks Coffee en Kansas City. En el caso de la ubicación independiente establecido el sistema enumerará todas las cafeterías Starbucks en el área de Kansas City. Es evidente que esas respuestas aumentarán la latencia del acceso y no son deseables. Estos se pueden administrar de manera eficiente si el servidor tiene datos dependientes de la ubicación, es decir, una asignación entre los datos de una cafetería de Starbucks y su ubicación física. Además, para una consulta que incluya el rango de ubicaciones de Starbucks, bastará con una sola consulta solicitando ubicaciones para toda la región de Kansas City, como se muestra en la Figura 2. Esto ahorrará una enorme cantidad de ancho de banda al disminuir el número de mensajes y, al mismo tiempo, será útil para prevenir el cuello de botella de escalabilidad en una zona muy poblada. 4.1 Función de asignación para LDD El ejemplo justifica la necesidad de una función de asignación para procesar consultas dependientes de la ubicación. Esto será especialmente importante para las consultas basadas en la atracción en todo el mundo para las cuales la respuesta podría estar compuesta para diferentes partes del mundo. La función de mapeo es necesaria para construir el horario de emisión. Definimos Global Property Set (GPS) [11], Information Content (IC) set, and Location Jerarchy (LH) set where IC  GPS and LH  GPS to develop a mapping function. LH = {l1, l2, l3...,lk} donde li representan ubicaciones en el árbol de ubicación y IC = {ic1, ic2, ic3,...,icn} donde ici representan tipo de información. Por ejemplo, si tenemos tráfico, tiempo, y la información de stock están en transmisión entonces IC = {ictráfico, icweather, e icstock}. El esquema de asignación debe ser capaz de identificar y seleccionar un miembro IC y un nodo LH para (a) asociación correcta, (b) coincidencia de granularidad, (c) y condición de terminación. Por ejemplo, el clima • IC podría estar asociado con un país o un estado o una ciudad o un pueblo de LH. La coincidencia de granularidad entre el tiempo y un nodo LH es según el requisito del usuario. Así, con una granularidad gruesa la información meteorológica se asocia con un país para obtener el clima de los países y con la ciudad en una granularidad más fina. Si una ciudad es la mejor granularidad, entonces define la condición terminal para la asociación entre IC y LH para el tiempo. Esto significa que un usuario no puede obtener información meteorológica sobre la subdivisión de una ciudad. En realidad, el clima de una subdivisión no tiene ningún sentido. Desarrollamos un simple esquema de mapeo heurístico basado en las necesidades del usuario. Dejar IC = {m1, m2,m3.,..., mk}, donde mi representa su elemento y dejar LH = {n1, n2, n3,..., nl}, donde ni representa miembro LHs. Definimos GPS para IC (GPSIC)  GPS y para LH (GPSLH)  GPS como GPSIC = {P1, P2,..., Pn}, donde P1, P2, P3,..., Pn son propiedades de sus miembros y GPSLH = {Q1, Q2,..., Qm} donde Q1, Q2,..., Qm son propiedades de sus miembros. Las propiedades de un miembro particular de IC son un subconjunto de GPSIC. Generalmente es cierto que (conjunto de propiedades (miÃ3n IC) â € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € Por ejemplo, stock • IC y película • IC calificación no tienen ninguna propiedad en común. Asumimos que dos o más miembros del CI tienen al menos una propiedad geográfica común (es decir, lugar) porque DAYS transmite información sobre esas categorías, que están estrechamente vinculadas con un lugar. Por ejemplo, las acciones de una empresa están relacionadas con un país, el clima está relacionado con una ciudad o estado, etc. Definimos el subconjunto de propiedades de mio IC como PSm i ♥ mi • IC y PSm i = {P1, P2,..., Pr} donde r ≤ n. • Pr {Pr • PSm i → Pr • GPSIC} que implica que • i, PSm i  GPSIC. Las propiedades geográficas de este conjunto son indicativas de si mi IC puede ser mapeado a un solo nivel de granularidad (es decir. una sola ubicación) en LH o varios niveles de granularidad (es decir, más de un nodo en 19 de la jerarquía) en LH. ¿Cuántos y qué niveles de granularidad debe un mapa mi, depende del nivel en el que el proveedor de servicios quiere proporcionar información sobre el mi en cuestión. Del mismo modo, definimos un subconjunto de propiedades de los miembros de LH como PSn j Ł nj Ł LH que puede ser escrito como PSn j ={Q1, Q2, Q3,..., Qs} donde s ≤ m. Además, El proceso de mapeo de IC a LH es entonces identificar para algunos mxÃ3 IC uno o mÃ¡s nyÃ3 LH tal que PSmx Ã3 PSnv Esto significa que cuando mx mapea a ny y a todos los niños de ny si mx puede mapear a múltiples niveles de granularidad o mx mapea sólo a ny si mx puede mapear a un solo nivel de granularidad. Asumimos que los nuevos miembros pueden unirse y los antiguos miembros pueden salir de IC o LH en cualquier momento. La eliminación de miembros del espacio del CI es simple, pero la adición de miembros al espacio del CI es más restrictiva. Si queremos añadir un nuevo miembro al espacio IC, primero definimos un conjunto de propiedades para el nuevo miembro: PSmnew_m ={P1, P2, P3,..., Pt} y lo añadimos al CI sólo si la condición: Este régimen tiene una ventaja adicional al permitir a los proveedores de servicios de información controlar el tipo de información que desean proporcionar a los usuarios. Presentamos el siguiente ejemplo para ilustrar el concepto de mapeo. IC = {Tráfico, Stock, Restaurante, Tiempo, Fechas importantes de la historia, Condiciones de la carretera} LH = {País, Estado, Ciudad, Código postal, Principales carreteras} GPSIC = {Surface-mobility, Roads, High, Low, Italian-food, StateName, Temp, CityName, Seat-disponibilidad, Zip, Traffic-jams, Además, PS(ICStock) indicó que Stock solo puede mapear a un solo país. Cuando consideramos el miembro Tráfico del espacio IC, sólo PS(ICTraffic) â € ¢ PScity â € TM. Como PS(ICTRAFFIC) indica que Traffic puede mapear a una sola ubicación, solo mapea a City y a ninguno de sus hijos. Ahora bien, a diferencia de Stock, el mapeo del tráfico con las principales carreteras, que es un hijo de la ciudad, es significativo. Sin embargo, los proveedores de servicios tienen derecho a controlar los niveles de granularidad a los que desean proporcionar información sobre un miembro del espacio IC. PS(ICRoad conditions) • PSState  y PS(ICRoad conditions) • PSCity. Así que las condiciones de la carretera son mapas al Estado, así como a la ciudad. Como PS(ICRoad conditions) indica que las condiciones de la carretera pueden mapear a múltiples niveles de granularidad, las condiciones de la carretera también mapearán a Zip Code y las principales carreteras, que son los niños del Estado y la ciudad. Del mismo modo, los mapas del restaurante sólo al código postal, y los mapas meteorológicos al estado, la ciudad y sus hijos, las carreteras principales y el código postal. 5. ESQUEMA DE ÍNDICE BASADA EN LOCALIZACIÓN Esta sección discute nuestro esquema de indexación basado en la ubicación (LBIS). El esquema está diseñado para ajustarse a la emisión LDD en nuestro proyecto DAYS. Como se discutió anteriormente, utilizamos la propiedad de contención de LDD en el esquema de indexación. Esto limita significativamente la búsqueda de nuestros datos requeridos a una parte particular de la transmisión. Por lo tanto, argumentamos que el esquema proporciona tiempo de afinación limitado. Describimos la arquitectura de nuestro esquema de indexación. Nuestro esquema contiene cubos de datos separados y cubos de índices. Los cubos de índice son de dos tipos. El primer tipo se llama el índice Mayor. El índice Major proporciona información sobre los tipos de datos transmitidos. Por ejemplo, si tenemos la intención de transmitir información como Entretenimiento, Tiempo, Tráfico, etc., entonces el índice principal apunta a estos tipos principales de información y/o sus principales subtipos de información, el número de subtipos principales variando de una información a otra. Esto limita estrictamente el número de accesos a un índice principal. El índice Major nunca apunta a los datos originales. Señala a los subíndices llamados el índice Menor. Los índices menores son los índices que realmente apuntan a los datos originales. Llamamos a estos indicadores menores como punteros de ubicación, ya que apunta a los datos que están asociados con una ubicación. Por lo tanto, nuestra búsqueda de datos incluye el acceso a un índice mayor y algunos índices menores, el número de índice menor variando dependiendo del tipo de información. Por lo tanto, nuestro esquema de indexación tiene en cuenta la naturaleza jerárquica del LDD, la propiedad Containment, y requiere que nuestro programa de transmisión se agrupe en función del tipo de datos y la ubicación. La estructura de la jerarquía de ubicación requiere el uso de diferentes tipos de índice en diferentes niveles. La estructura y las posiciones del índice dependen estrictamente de la jerarquía de ubicación descrita anteriormente en nuestro esquema de asignación. Ilustramos la implementación de nuestro esquema con un ejemplo. Posteriormente se mencionan las normas para la elaboración del índice. 20 A1 Entretenimiento Restaurante Película A2 A3 A4 R1 R2 R3 R4 R5 R6 R7 R8 Tiempo KC SL JC SF Entretenimiento R1 R2 R3 R4 R4 R5 R6 R7 R8 KC SL JC SF (A, R, NEXT = 8) 3, R5 4, R7 Tipo (S, L) ER W E EM (1, 4) (5, Información cartográfica de ubicación para radiodifusión Figura 4. Datos junto con el índice basado en la ubicación Ejemplo: Supongamos que nuestro contenido de transmisión contiene ICentertainment y ICweather que se representa como se muestra en la Fig. 3. Ai representa las áreas de la ciudad y Ri representa las carreteras en un área determinada. Las hojas de la estructura meteorológica representan cuatro ciudades. La estructura del índice se indica en la Fig. 4 que muestra la posición del índice mayor y menor y los datos en el horario de emisión. Proponemos las siguientes reglas para la creación del programa de emisión indexado por aire: • Se crean el índice mayor y el índice menor. • El índice principal contiene la posición y el rango de diferentes tipos de ítems de datos (Weather and Entertainment, Figura 3) y sus categorías. Las subcategorías de Entretenimiento, Cine y Restaurante, también están en el índice. Así, el índice principal contiene Entretenimiento (E), Entretenimiento-Movie (EM), Entretenimiento-Restaurante (ER), y Tiempo (W). La tupla (S, L) representa la posición inicial (S) del elemento de datos y L representa el rango del elemento en términos de número de cubos de datos. • El índice menor contiene las variables A, R y un puntero Siguiente. En nuestro ejemplo (Figura 3), la carretera R representa el primer nodo del área A. El índice menor se utiliza para apuntar a cubos de datos reales presentes en los niveles más bajos de la jerarquía. En cambio, el índice principal apunta a una gama más amplia de ubicaciones, por lo que contiene información sobre las principales y subcategorías de datos. • La información del índice no se incorpora en los cubos de datos. Los cubos de índice están separados que contienen sólo la información de control. • El número de cubos índice m=#(IC), IC = {ic1, ic2, ic3,...,icn} donde ici representa el tipo de información y # representa la cardinalidad del conjunto de contenido de información IC. En este ejemplo, IC= {icMovie, icWeather, icRestaurant} y así #(IC) =3. Por lo tanto, el número de cubos índice principales es 3. • El mecanismo para resolver la consulta está presente en el coordinador de java en MU. Por ejemplo, si una consulta Q se presenta como Q (Entretenimiento, Película, Road_1), entonces la búsqueda resultante será para la información EM en el índice principal. Nosotros decimos, Q EM. Nuestro índice propuesto funciona de la siguiente manera: Supongamos que una MU emite una consulta que está representada por Java Coordinador presente en la MU como información de restaurante en la carretera 7. Esto es resuelto por el coordinador como Q ER. Esto significa que uno tiene que buscar la unidad de índice ER en el índice principal. Supongamos que el MU entra en el canal en R2. El primer índice que recibe es un índice menor después de R2. En este índice, el valor de la variable Siguiente = 4, lo que significa que el siguiente índice mayor está presente después del cubo 4. La MU puede entrar en modo somnoliento. Se activa después del cubo 4 y recibe el índice principal. Busca información de ER que es la primera entrada en este índice. Ahora es seguro que la MU obtendrá la posición del cubo de datos en el índice menor contiguo. La segunda unidad en el índice menor representa la posición de los datos requeridos R7. Indica que el cubo de datos es el primer cubo en el Área 4. El MU vuelve a entrar en modo somnífero y se activa después del cubo 6. Obtiene los datos necesarios en el siguiente cubo. Presentamos el algoritmo para buscar el Índice basado en la ubicación. Algoritmo 1 Índice basado en la ubicación Buscar en DAYS 1. Escanear la transmisión para el siguiente cubo índice, encontrado=falso 2. Mientras que (no se encuentra) hacer 3. si cubo es el índice mayor entonces 4. Encuentra el Tipo & Tupla (S, L) 5. si S es mayor que 1, entra en modo Doze durante S segundos 6. termina si 7. Despierta en el cubo Sth y observa el índice menor 8. termina si 9. si el cubo es índice menor entonces 10. si TypeRequest no es igual a Typefound y (A,R)Solicitud no es igual a (A,R)found entonces 11. Vaya al modo de doze hasta el SIGUIENTE y repita desde el paso 3 12. terminar si 13. de lo contrario encontrar entrada en Índice Menor que apunta a los datos 14. Calcular la hora de llegada T del cubo de datos 15. Entra en modo somnífero hasta la T 16. Despierta en T y accede a los datos, encontrados = verdadero 17. fin de lo contrario 18. final si 19. final Mientras que 21 6. EVALUACIÓN DE LA EJECUCIÓN La conservación de la energía es la principal preocupación cuando tratamos de acceder a los datos de la transmisión inalámbrica. Un sistema eficiente debe permitir al dispositivo móvil acceder a los datos que necesita manteniéndose activo durante un período mínimo de tiempo. Esto ahorraría una cantidad considerable de energía. Dado que los elementos se distribuyen en función de los tipos y se asignan a ubicaciones adecuadas, argumentamos que nuestra transmisión se ocupa de los tipos de datos agrupados. La unidad móvil tiene que acceder a un índice mayor y a un índice menor relativamente menor para obtener información sobre la hora de llegada de los datos. Esto contrasta con el esquema exponencial donde los índices son de tamaños iguales. El ejemplo discutido y Algoritmo 1 revela que para acceder a cualquier dato, necesitamos acceder al índice mayor sólo una vez seguido por uno o más accesos al índice menor. El número de accesos menores al índice depende del número de ubicaciones internas. Como el número de ubicaciones internas varía de elemento a elemento (por ejemplo, Weather está generalmente asociado con una ciudad mientras que el tráfico se granula hasta las carreteras principales y menores de una ciudad), argumentamos que la estructura de la información de localización mapeada puede ser visualizada como un bosque que es una colección de árboles generales, el número de árboles generales dependiendo de los tipos de información transmitida y la profundidad de un árbol dependiendo de la granularidad de la información de Para nuestros experimentos, asumimos el bosque como una colección de árboles M-ary equilibrados. Asumimos además que los árboles de la arteria M están llenos al asumir la presencia de nodos ficticios en diferentes niveles de un árbol. Así, si el número de ítems de datos es d y la altura del árbol es m, entonces n= (m*d-1)/(m-1) donde n es el número de vértices en el árbol e i= (d-1)/(m-1) donde i es el número de vértices internos. El tiempo de afinación para un ítem de datos implica 1 unidad de tiempo requerido para acceder al índice principal más el tiempo requerido para acceder a los ítems de datos presentes en las hojas del árbol. Por lo tanto, el tiempo de sintonización con d ítems de datos es t = logmd+1 Podemos decir que el tiempo de sintonización está limitado por O(logmd). Comparamos nuestro esquema con el esquema de indexación distribuida y exponencial. Asumimos una emisión plana y el número de páginas que varían de 5000 a 25000. Los diversos parámetros de simulación se muestran en la Tabla 1. La Figura 5-8 muestra los tiempos relativos de afinación de tres algoritmos de indexación, es decir, el LBIS, esquema exponencial y el esquema de árbol distribuido. La Figura 5 muestra el resultado para el número de nodos internos de ubicación = 3. Podemos ver que LBIS supera significativamente a los otros esquemas. El tiempo de afinación en LBIS varía de aproximadamente 6,8 a 8. Este gran tiempo de afinación se debe al hecho de que después de alcanzar el índice menor más bajo, la MU puede tener que acceder a pocos cubos secuencialmente para obtener el cubo de datos requerido. Podemos ver que el tiempo de afinación tiende a ser estable a medida que aumenta la duración de la emisión. En la figura 6 se considera m= 4. Aquí podemos ver que el exponencial y el rendimiento distribuido casi de manera similar, aunque el primero parece funcionar ligeramente mejor a medida que aumenta la longitud de emisión. Un patrón muy interesante es visible en la figura 7. Para las emisiones de menor tamaño, el LBIS parece tener un tiempo de afinación mayor que los otros dos esquemas. Pero a medida que aumenta la duración de la emisión, es claramente visible que el LBIS supera a los otros dos esquemas. La indexación del árbol distribuido muestra un comportamiento similar al del LBIS. El tiempo de afinación en LBIS sigue siendo bajo porque el algoritmo permite a la MU saltarse algunos Índices Menores intermedios. Esto permite que la MU se mueva a niveles más bajos directamente después de entrar en modo activo, ahorrando así energía valiosa. Esta acción no es posible en la indexación de árboles distribuidos y por lo tanto podemos observar que su tiempo de afinación es más que el esquema LBIS, aunque tiene mejores resultados que el esquema exponencial. La Figura 8, en contraste, nos muestra que el tiempo de afinación en LBIS, aunque menor que los otros dos esquemas, tiende a aumentar bruscamente a medida que la longitud de emisión se hace mayor que las 15000 páginas. Esto puede atribuirse tanto al aumento del tiempo necesario para escanear los Índices Menores intermedios como a la duración de la emisión. Pero podemos observar que la pendiente de la curva LBIS es significativamente menor que las otras dos curvas. Tabla 1 Parámetros de simulación P Valores de definición N Número de datos Elementos 5000 - 25000 m Número de nodos de ubicación internos 3, 4, 5, 6 B Capacidad de cubo sin índice (para índice exponencial) 10,64,128,256 i Base de índice para índice exponencial 2,4,6,8 k Tamaño del índice para árbol distribuido 8 bytes Los resultados de la simulación establecen algunos hechos sobre nuestro esquema de indexación basado en la ubicación. En la mayoría de los casos, el sistema funciona mejor que los otros dos en términos de tiempo de afinación. A medida que aumenta la duración de la emisión, después de cierto punto, aunque el tiempo de afinación aumenta como resultado de factores que hemos descrito antes, el esquema siempre funciona mejor que los otros dos esquemas. Debido al límite prescrito del número de páginas en el papel, no podemos mostrar más resultados. Pero estos resultados omitidos muestran una tendencia similar a la de los resultados representados en la figura 5-8. 7. CONCLUSIÓN Y FUTURO TRABAJO En este trabajo hemos presentado un esquema para el mapeo de datos de radiodifusión inalámbrica con sus ubicaciones. Hemos presentado un ejemplo para mostrar cómo la estructura jerárquica del árbol de ubicación mapea con los datos para crear LDD. Hemos presentado un esquema llamado LBIS para indexar este LDD. Hemos utilizado la propiedad de contención de LDD en el esquema que limita la búsqueda a un estrecho rango de datos en la emisión, ahorrando así energía valiosa en el dispositivo. La asignación de datos con ubicaciones y el esquema de indexación se utilizará en nuestro proyecto DAYS para crear la arquitectura basada en empuje. El LBIS se ha comparado con otros dos sistemas de indexación prominentes, a saber, el sistema de indexación de árboles distribuidos y el sistema de indexación exponencial. En nuestras simulaciones demostramos que el esquema LBIS tiene el menor tiempo de afinación para las emisiones que tienen un gran número de páginas, ahorrando así una valiosa potencia de batería en la MU. 22 En el trabajo futuro tratamos de incorporar la arquitectura basada en el tirón en nuestro proyecto DAYS. Los datos del servidor están disponibles para el acceso de los usuarios globales. Esto se puede hacer poniendo una solicitud al servidor de origen. La consulta en este caso es una consulta global. Se transfiere del servidor de origen de los usuarios al servidor de destino mediante el uso de satélites LEO. Tenemos la intención de utilizar nuestro esquema de LDD y arquitectura de estadificación de datos en la arquitectura basada en el tirón. Demostraremos que el esquema de LDD junto con la arquitectura de estadificación de datos mejora significativamente la latencia para la consulta global y local. 8. REFERENCIAS [1] Acharya, S., Alonso, R. Franklin, M y Zdonik S. Disco de transmisión: Gestión de datos para entornos de comunicación asimétricos. En Actas de la Conferencia de la ACM SIGMOD sobre Gestión de Datos, págs. 199 a 210, San José, CA, mayo de 1995. [2] Chen, M.S.,Wu, K.L. y Yu, P. S. Optimizando la asignación de índices para la difusión secuencial de datos en la computación móvil inalámbrica. IEEE Transactions on Knowledge and Data Engineering (TKDE), 15(1):161-173, enero/febrero de 2003. Gráfico 5 Tamaño de la transmisión (# cubos) Dist tree Expo LBIS Figura 6. Tamaño de la transmisión (# cubos) Dist tree Expo LBIS Figura 7. Tamaño de la transmisión (# cubos) Dist tree Expo LBIS Figura 8. Tamaño de la transmisión (# cubos) Árbol dist Expo LBIS Tiempo medio de afinación Tiempo medio de afinación Tiempo medio de afinación 23 [3] Hu, Q. L., Lee, D. L. y Lee, W.C. Evaluación del rendimiento de un sistema inalámbrico de difusión jerárquica de datos. En Actas de la Quinta Conferencia Internacional Anual de ACM sobre Computación y Redes Móviles (MobiCom99), págs. 163 a 173, Seattle, WA, agosto de 1999. [4] Hu, Q. L. Lee, W.C. y Lee, D. L. Power consultas conservadoras de múltiples atributos en la transmisión de datos. En Actas de la 16a Conferencia Internacional sobre Ingeniería de Datos (ICDE00), páginas 157-166, San Diego, CA, febrero de 2000. [5] Imielinski, T., Viswanathan, S. y Badrinath. B. R. Filtrado eficiente de energía de los datos en el aire. En Actas de la Cuarta Conferencia Internacional sobre Tecnología de Bases de Datos Ampliadas (EDBT94), págs. 245 a 258, Cambridge, Reino Unido, marzo de 1994. [6] Imielinski, T., Viswanathan, S. y Badrinath. B. R. Datos sobre el aire - Organización y acceso. Operaciones de IEEE en Ingeniería de Conocimientos e Datos (TKDE), 9(3):353-372, mayo/junio de 1997. [7] Shih, E., Bahl, P. y Sinclair, M. J. Wake on wireless: Una estrategia de ahorro de energía impulsada por eventos para dispositivos operados por baterías. En Actas de la 8a Conferencia Internacional Anual de ACM sobre Computación y Redes Móviles (MobiCom02), págs. 160 a 171, Atlanta, GA, septiembre de 2002. [8] Shivakumar N. y Venkatasubramanian, S. Indización energéticamente eficiente para la difusión de información en sistemas inalámbricos. ACM/Baltzer Journal of Mobile Networks and Applications (MONET), 1(4):433-446, diciembre de 1996. [9] Tan K. L. y Yu, J. X. Filtración energéticamente eficiente de emisiones no uniformes. En Actas de la 16a Conferencia Internacional sobre Sistemas de Computación Distribuida (ICDCS96), págs. 520 a 527, Hong Kong, mayo de 1996. [10] Viredaz, M. A., Brakmo, L. S. y Hamburgen, W. R. Gestión de energía en dispositivos portátiles. ACM Coue, 1(7):44-52, octubre de 2003. [11] Garg, N. Kumar, V., & Dunham, M.H. Mapeo e indización de información en DAYS, 6o Taller Internacional sobre Movilidad en Bases de Datos y Sistemas Distribuidos, en conjunción con la 14a Conferencia Internacional sobre Aplicaciones de Bases de Datos y Sistemas Expertos, 1o a 5 de septiembre, Praga, República Checa, 2003. [12] Acharya D., Kumar, V., & Dunham, M.H. InfoSpace: Sistema de difusión de datos públicos híbrido y adaptativo para computación ubicua. Aceptado para publicación en el número especial de Pervasive Computing. Wiley Journal for Wireless Communications and Mobile Computing, 2004. [13] Acharya D., Kumar, V., & Prabhu, N. Descubriendo y usando Servicios Web en M-Commerce, Proceedings for 5th VLDB Workshop on Technologies for E-Services, Toronto, Canada,2004. [14] Acharya D., Kumar, V. Indexing Location Depending Data in broadcast en ambiente. Aceptado para su publicación, número especial de JDIM sobre Gestión de Datos Distribuidos, 2005. [15] Flinn, J., Sinnamohideen, S., & Satyanarayan, M. Data Staging on No Trusted Surrogates, Intel Research, Pittsburg, Unpublished Report, 2003. [16] Seydim, A.Y., Dunham, M.H. & Kumar, V. Location dependiente consulta processing, Actas del segundo taller internacional de ACM sobre ingeniería de datos para acceso inalámbrico y móvil, p.47-53, Santa Barbara, California, USA, 2001. [17] Xu, J., Lee, W.C., Tang., X. Índice exponencial: Un esquema de indexación distribuida para los datos sobre el aire. En Actas de la II Conferencia Internacional ACM/USENIX sobre Sistemas, Aplicaciones y Servicios Móviles (MobiSys04), Boston, MA, junio de 2004. 24 ",
            "error": []
        },
        "pull based datum access": {
            "translated_key": [],
            "translated_annotated_text": "Esquema de Indización basado en la ubicación para DAYS Debopam Acharya y Vijay Kumar 1 Computer Science and Informatics University of Missouri-Kansas City Kansas City, MO 64110 dargc(kumarv)@umkc.edu RESUMEN La difusión de datos a través de canales inalámbricos para transmitir información a los consumidores se está volviendo bastante común. Se han propuesto muchos planes de difusión, pero la mayoría de ellos llevan los datos a canales inalámbricos para consumo general. La difusión basada en push [1] es esencialmente asimétrica, es decir, el volumen de datos es mayor desde el servidor a los usuarios que desde los usuarios de vuelta al servidor. El esquema basado en el empuje requiere una indexación que indica cuándo se transmitirán los datos y su posición en la emisión. Latencia de acceso y tiempo de afinación son los dos parámetros principales que pueden utilizarse para evaluar un esquema de indexación. Dos de los importantes esquemas de indexación propuestos anteriormente se basaban en los árboles y los esquemas de indexación exponencial. Ninguno de estos planes pudo satisfacer los requisitos de los datos dependientes de la ubicación (DDL), que es una característica muy deseable de la difusión de datos. En este artículo, discutimos la emisión de LDD en nuestro proyecto DAta in Your Space (DAYS), y proponemos un esquema para la indexación de LDD. Argumentamos que este sistema, cuando se aplica a la DDTS, mejora significativamente el rendimiento en términos de tiempo de afinación en los esquemas antes mencionados. Demostramos nuestro argumento con la ayuda de resultados de simulación. Categorías y Descriptores sujetos H.3.1 [Sistemas de información]: Almacenamiento y recuperación de información - análisis e indexación de contenido; H.3.3 [Sistemas de información]: Almacenamiento y recuperación de información - búsqueda y recuperación de información. Términos generales Algoritmos, Rendimiento, Experimentación 1. INTRODUCCIÓN La difusión inalámbrica de datos es una forma económica y eficiente de poner los datos deseados a disposición de un gran número de usuarios móviles o estáticos. El modo de transferencia de datos es esencialmente asimétrico, es decir, la capacidad de transferencia de datos (comunicación descendente) del servidor al cliente (usuario móvil) es significativamente mayor que el cliente o usuario móvil al servidor (comunicación ascendente). La eficacia de un sistema de difusión de datos se determina por su capacidad para proporcionar a los usuarios los datos requeridos en cualquier lugar y en cualquier momento. Una de las mejores maneras de lograr esto es a través de la difusión de servicios basados en la ubicación altamente personalizados (LBS) que permite a los usuarios acceder a datos dependientes de la ubicación personalizada. Un ejemplo sería alguien usando su dispositivo móvil para buscar un restaurante vegetariano. La aplicación LBS interactuaría con otros componentes de tecnología de localización o utilizaría la entrada de usuarios móviles para determinar la ubicación de los usuarios y descargar la información sobre los restaurantes cercanos al usuario sintonizando el canal inalámbrico que está difundiendo LDD. Vemos un despliegue limitado de LBS por parte de algunos proveedores de servicios. Pero hay todos los indicios de que con el tiempo se resolverán algunos de los complejos problemas técnicos, como el marco de localización uniforme, el cálculo y el seguimiento de ubicaciones en todo tipo de lugares, el posicionamiento en diversos entornos, aplicaciones de localización innovadoras, etc., y LBS se convertirá en una instalación común y ayudará a mejorar la productividad del mercado y el confort del cliente. En nuestro proyecto llamado DAYS, utilizamos el mecanismo de difusión de datos inalámbricos para impulsar LDD a los usuarios y usuarios móviles monitorear y sintonizar el canal para encontrar y descargar los datos requeridos. Sin embargo, es probable que una emisión simple cause una degradación significativa del rendimiento de los dispositivos móviles con limitaciones energéticas, y una solución común a este problema es el uso de una indexación eficiente del aire. El enfoque de indexación almacena información de control que informa al usuario sobre la ubicación de los datos en la emisión y cómo y cuándo pudo acceder a ella. Un usuario móvil, por lo tanto, tiene un poco de tiempo libre para entrar en el modo de somnífero que conserva valiosa energía. También permite al usuario personalizar su propio dispositivo móvil afinando selectivamente la información de su elección. La eficiencia del acceso y la conservación de la energía son las dos cuestiones importantes para los sistemas de radiodifusión de datos. La eficiencia de acceso se refiere a la latencia experimentada cuando se inicia una solicitud hasta que se recibe la respuesta. Conservación de la energía [7, 10] se refiere al uso eficiente de la energía limitada del dispositivo móvil para acceder a los datos de radiodifusión. Dos parámetros que afectan a estos son el tiempo de afinación y la latencia de acceso. El tiempo de sintonización se refiere al tiempo durante el cual la unidad móvil (MU) permanece en estado activo para sintonizar el canal y descargar los datos requeridos. También se puede definir como el número de cubos sintonizados por el dispositivo móvil en estado activo para obtener los datos requeridos. La latencia de acceso puede definirse como el tiempo transcurrido desde que se ha emitido una solicitud hasta que se ha recibido la respuesta. 1 Esta investigación fue apoyada por una subvención de NSF IIS-0209170. En el pasado se han propuesto varios esquemas de indexación, entre los que destacan los basados en árboles y los esquemas de indexación exponencial [17]. Las principales desventajas de los esquemas basados en árboles son que se basan en estructuras arbóreas centralizadas. Para iniciar una búsqueda, la MU tiene que esperar hasta que llegue a la raíz del siguiente árbol de transmisión. Esto afecta significativamente el tiempo de afinación de la unidad móvil. Los esquemas exponenciales facilitan la replicación de índices compartiendo enlaces en diferentes árboles de búsqueda. Para las emisiones con un gran número de páginas, se ha demostrado que el esquema exponencial funciona de manera similar a los esquemas basados en árboles en términos de latencia de acceso. Además, la duración media de la emisión aumenta debido a la replicación del índice y esto puede causar un aumento significativo de la latencia del acceso. Ninguno de los sistemas de indexación mencionados es igualmente eficaz en la difusión de datos dependientes de la ubicación. Además de proporcionar baja latencia, carecen de propiedades que se utilizan para abordar los problemas de DDT. Proponemos un esquema de indexación en DAYS que se ocupa de algunos de estos problemas. Demostramos con resultados de simulación que nuestro esquema supera a algunos de los esquemas de indexación anteriores para la difusión de LDD en términos de tiempo de afinación. El resto del documento se presenta de la siguiente manera. En la sección 2, se analiza el trabajo anterior relacionado con la indexación de los datos de radiodifusión. La sección 3 describe nuestra arquitectura DAYS. Los datos dependientes de la ubicación, su generación y su posterior difusión se presentan en la sección 4. La sección 5 discute nuestro esquema de indexación en detalle. La simulación de nuestro esquema y su evaluación del desempeño se presenta en la sección 6. En la sección 7 se concluye el documento y se menciona la labor futura relacionada. 2. TRABAJO ANTERIOR Varias técnicas de indexación basadas en discos se han utilizado para la indexación de aire. Imielinski et al. [5, 6] aplicó el árbol del índice B+, donde los nodos de la hoja almacenan los tiempos de llegada de los ítems de datos. Se propuso el método de indexación distribuida para reproducir y distribuir eficientemente el árbol de índices en una emisión. Específicamente, el árbol índice se divide en una parte replicada y una parte no replicada. Cada emisión consiste en la parte replicada y la parte no replicada que indiza los elementos de datos inmediatamente después de ella. Como tal, cada nodo en la parte no replicada aparece sólo una vez en una emisión y, por lo tanto, reduce el costo de replicación y latencia de acceso, al tiempo que logra un buen tiempo de afinación. Chen et al. [2] y Shivakumar et al. [8] considera estructuras de árboles desequilibradas para optimizar el consumo de energía para el acceso a datos no uniformes. Estas estructuras minimizan el costo medio de búsqueda de índices reduciendo el número de búsquedas de datos en caliente a expensas de gastar más en datos en frío. Tan y Yu discutieron la organización de datos e índices bajo la emisión sesgada También se han sugerido métodos de Hashing y firma para la transmisión inalámbrica que admite consultas de igualdad [9]. En [5] se propuso un método flexible de indización. El índice flexible primero clasifica los elementos de datos en orden ascendente (o descendente) de los valores clave de búsqueda y luego los divide en segmentos p. El primer cubo en cada segmento de datos contiene un índice de control, que es un índice binario que asigna un valor clave dado al segmento que contiene esa clave, y un índice local, que es un índice de entrada m que asigna un valor clave dado a los cubos dentro del segmento actual. Al afinar los parámetros de p y m, los clientes móviles pueden lograr un buen tiempo de afinación o una buena latencia de acceso. Otra técnica de indexación propuesta es el esquema de indexación exponencial [17]. En este esquema, se utiliza un índice parametrizado, llamado índice exponencial, para optimizar la latencia del acceso o el tiempo de afinación. Facilita la replicación de índices mediante la vinculación de diferentes árboles de búsqueda. Todos los regímenes mencionados se han aplicado a datos que no están relacionados entre sí. Estos datos no relacionados pueden agruparse o no agruparse. Sin embargo, ninguno de ellos se ha ocupado específicamente de los requisitos de la DDT. Los datos dependientes de la ubicación son datos que están asociados con una ubicación. En la actualidad hay varias aplicaciones que se ocupan de la DDTS [13, 16]. Casi todos ellos representan LDD con la ayuda de estructuras jerárquicas [3, 4]. Esto se basa en la propiedad de contención de datos dependientes de la ubicación. La propiedad Containment ayuda a determinar la posición relativa de un objeto definiendo o identificando ubicaciones que contienen esos objetos. Las ubicaciones subordinadas están jerárquicamente relacionadas entre sí. Así, la propiedad Containment limita la gama de disponibilidad u operación de un servicio. Usamos esta propiedad de contención en nuestro esquema de indexación para indexar LDD. 3. DAYS ARCHITECTURE DAYS se ha conceptualizado para difundir datos tópicos y no tópicos a los usuarios en un espacio de difusión local y para aceptar consultas de usuarios individuales a nivel mundial. Los datos tópicos, por ejemplo, información meteorológica, información de tráfico, información de existencias, etc., cambian constantemente con el tiempo. Los datos no tópicos como hotel, restaurante, precios inmobiliarios, etc., no cambian tan a menudo. Así, imaginamos la presencia de dos tipos de distribución de datos: En el primer caso, el servidor empuja los datos a los usuarios locales a través de canales inalámbricos. El otro caso se refiere al servidor que envía los resultados de las consultas de los usuarios a través de canales inalámbricos de enlace descendente. Técnicamente, vemos la presencia de dos tipos de colas en el acceso basado en datos. Una es una cola muy cargada que contiene consultas cargadas globalmente. La otra es una cola relativamente ligera que consiste en consultas subidas localmente. La arquitectura DAYS [12], como se muestra en la figura 1, consiste en un servidor de datos, programador de transmisiones, coordinador de DAYS, red de satélites LEO para la entrega de datos a nivel mundial y un espacio de transmisión local. Los datos se introducen en el espacio de transmisión local para que los usuarios puedan sintonizarse con los canales inalámbricos para acceder a los datos. El espacio de transmisión local consiste en una torre de transmisión, unidades móviles y una red de máquinas de puesta en escena de datos llamadas subrogados. La estadificación de datos en sustitutos se ha investigado anteriormente como una técnica exitosa [12, 15] para los datos relacionados con los usuarios de caché. Creemos que la estadificación de datos se puede utilizar para reducir drásticamente el tiempo de latencia tanto para los datos de radiodifusión local como para las respuestas globales. La solicitud de consulta en los sustitutos puede utilizarse posteriormente para generar los patrones de popularidad que finalmente deciden el horario de emisión [12]. 18 Popularidad Comentarios de Surrogates for Broadcast Scheduler Local Space Broadcast Tower SurrogateMU MU MU Servidor de datosHorario de radiodifusiónDÍAS Coordinador Canal local de enlace descendente Canal global de enlace descendente Pull request cola cola Solicitud global cola Solicitud local cola Ubicación índice basado en Starbucks Plaza Kansas City Figura 1. Arquitectura DAYS Figura 2. Ubicación Estructura deStarbucks, Plaza 4. DATOS DEPENDIENTES DE LOCALIZACIÓN (LDD) Argumentamos que la incorporación de información de ubicación en la transmisión inalámbrica de datos puede disminuir significativamente la latencia de acceso. Esta propiedad se convierte en muy útil para la unidad móvil que tiene capacidad de almacenamiento y procesamiento limitada. Hay una variedad de aplicaciones para obtener información sobre tráfico, reservas de restaurantes y hoteles, comida rápida, gasolineras, oficina de correos, tiendas de comestibles, etc. Si estas aplicaciones se combinan con información de ubicación, entonces la búsqueda será rápida y altamente rentable. Una propiedad importante de las ubicaciones es Containment que ayuda a determinar la ubicación relativa de un objeto con respecto a su padre que contiene el objeto. Por lo tanto, Containment limita el rango de disponibilidad de un dato. Usamos esta propiedad en nuestro esquema de indexación. La base de datos contiene los contenidos transmitidos que se convierten en LDD [14] asociándolos con las ubicaciones respectivas para que puedan transmitirse de manera agrupada. El agrupamiento de LDD ayuda al usuario a localizar la información de manera eficiente y soporta la propiedad de contención. Presentamos un ejemplo para justificar nuestra propuesta. Ejemplo: Supongamos que un usuario emite una consulta Starbucks Coffee en Plaza por favor. para acceder a información sobre la sucursal Plaza de Starbucks Coffee en Kansas City. En el caso de la ubicación independiente establecido el sistema enumerará todas las cafeterías Starbucks en el área de Kansas City. Es evidente que esas respuestas aumentarán la latencia del acceso y no son deseables. Estos se pueden administrar de manera eficiente si el servidor tiene datos dependientes de la ubicación, es decir, una asignación entre los datos de una cafetería de Starbucks y su ubicación física. Además, para una consulta que incluya el rango de ubicaciones de Starbucks, bastará con una sola consulta solicitando ubicaciones para toda la región de Kansas City, como se muestra en la Figura 2. Esto ahorrará una enorme cantidad de ancho de banda al disminuir el número de mensajes y, al mismo tiempo, será útil para prevenir el cuello de botella de escalabilidad en una zona muy poblada. 4.1 Función de asignación para LDD El ejemplo justifica la necesidad de una función de asignación para procesar consultas dependientes de la ubicación. Esto será especialmente importante para las consultas basadas en la atracción en todo el mundo para las cuales la respuesta podría estar compuesta para diferentes partes del mundo. La función de mapeo es necesaria para construir el horario de emisión. Definimos Global Property Set (GPS) [11], Information Content (IC) set, and Location Jerarchy (LH) set where IC  GPS and LH  GPS to develop a mapping function. LH = {l1, l2, l3...,lk} donde li representan ubicaciones en el árbol de ubicación y IC = {ic1, ic2, ic3,...,icn} donde ici representan tipo de información. Por ejemplo, si tenemos tráfico, tiempo, y la información de stock están en transmisión entonces IC = {ictráfico, icweather, e icstock}. El esquema de asignación debe ser capaz de identificar y seleccionar un miembro IC y un nodo LH para (a) asociación correcta, (b) coincidencia de granularidad, (c) y condición de terminación. Por ejemplo, el clima • IC podría estar asociado con un país o un estado o una ciudad o un pueblo de LH. La coincidencia de granularidad entre el tiempo y un nodo LH es según el requisito del usuario. Así, con una granularidad gruesa la información meteorológica se asocia con un país para obtener el clima de los países y con la ciudad en una granularidad más fina. Si una ciudad es la mejor granularidad, entonces define la condición terminal para la asociación entre IC y LH para el tiempo. Esto significa que un usuario no puede obtener información meteorológica sobre la subdivisión de una ciudad. En realidad, el clima de una subdivisión no tiene ningún sentido. Desarrollamos un simple esquema de mapeo heurístico basado en las necesidades del usuario. Dejar IC = {m1, m2,m3.,..., mk}, donde mi representa su elemento y dejar LH = {n1, n2, n3,..., nl}, donde ni representa miembro LHs. Definimos GPS para IC (GPSIC)  GPS y para LH (GPSLH)  GPS como GPSIC = {P1, P2,..., Pn}, donde P1, P2, P3,..., Pn son propiedades de sus miembros y GPSLH = {Q1, Q2,..., Qm} donde Q1, Q2,..., Qm son propiedades de sus miembros. Las propiedades de un miembro particular de IC son un subconjunto de GPSIC. Generalmente es cierto que (conjunto de propiedades (miÃ3n IC) â € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € Por ejemplo, stock • IC y película • IC calificación no tienen ninguna propiedad en común. Asumimos que dos o más miembros del CI tienen al menos una propiedad geográfica común (es decir, lugar) porque DAYS transmite información sobre esas categorías, que están estrechamente vinculadas con un lugar. Por ejemplo, las acciones de una empresa están relacionadas con un país, el clima está relacionado con una ciudad o estado, etc. Definimos el subconjunto de propiedades de mio IC como PSm i ♥ mi • IC y PSm i = {P1, P2,..., Pr} donde r ≤ n. • Pr {Pr • PSm i → Pr • GPSIC} que implica que • i, PSm i  GPSIC. Las propiedades geográficas de este conjunto son indicativas de si mi IC puede ser mapeado a un solo nivel de granularidad (es decir. una sola ubicación) en LH o varios niveles de granularidad (es decir, más de un nodo en 19 de la jerarquía) en LH. ¿Cuántos y qué niveles de granularidad debe un mapa mi, depende del nivel en el que el proveedor de servicios quiere proporcionar información sobre el mi en cuestión. Del mismo modo, definimos un subconjunto de propiedades de los miembros de LH como PSn j Ł nj Ł LH que puede ser escrito como PSn j ={Q1, Q2, Q3,..., Qs} donde s ≤ m. Además, El proceso de mapeo de IC a LH es entonces identificar para algunos mxÃ3 IC uno o mÃ¡s nyÃ3 LH tal que PSmx Ã3 PSnv Esto significa que cuando mx mapea a ny y a todos los niños de ny si mx puede mapear a múltiples niveles de granularidad o mx mapea sólo a ny si mx puede mapear a un solo nivel de granularidad. Asumimos que los nuevos miembros pueden unirse y los antiguos miembros pueden salir de IC o LH en cualquier momento. La eliminación de miembros del espacio del CI es simple, pero la adición de miembros al espacio del CI es más restrictiva. Si queremos añadir un nuevo miembro al espacio IC, primero definimos un conjunto de propiedades para el nuevo miembro: PSmnew_m ={P1, P2, P3,..., Pt} y lo añadimos al CI sólo si la condición: Este régimen tiene una ventaja adicional al permitir a los proveedores de servicios de información controlar el tipo de información que desean proporcionar a los usuarios. Presentamos el siguiente ejemplo para ilustrar el concepto de mapeo. IC = {Tráfico, Stock, Restaurante, Tiempo, Fechas importantes de la historia, Condiciones de la carretera} LH = {País, Estado, Ciudad, Código postal, Principales carreteras} GPSIC = {Surface-mobility, Roads, High, Low, Italian-food, StateName, Temp, CityName, Seat-disponibilidad, Zip, Traffic-jams, Además, PS(ICStock) indicó que Stock solo puede mapear a un solo país. Cuando consideramos el miembro Tráfico del espacio IC, sólo PS(ICTraffic) â € ¢ PScity â € TM. Como PS(ICTRAFFIC) indica que Traffic puede mapear a una sola ubicación, solo mapea a City y a ninguno de sus hijos. Ahora bien, a diferencia de Stock, el mapeo del tráfico con las principales carreteras, que es un hijo de la ciudad, es significativo. Sin embargo, los proveedores de servicios tienen derecho a controlar los niveles de granularidad a los que desean proporcionar información sobre un miembro del espacio IC. PS(ICRoad conditions) • PSState  y PS(ICRoad conditions) • PSCity. Así que las condiciones de la carretera son mapas al Estado, así como a la ciudad. Como PS(ICRoad conditions) indica que las condiciones de la carretera pueden mapear a múltiples niveles de granularidad, las condiciones de la carretera también mapearán a Zip Code y las principales carreteras, que son los niños del Estado y la ciudad. Del mismo modo, los mapas del restaurante sólo al código postal, y los mapas meteorológicos al estado, la ciudad y sus hijos, las carreteras principales y el código postal. 5. ESQUEMA DE ÍNDICE BASADA EN LOCALIZACIÓN Esta sección discute nuestro esquema de indexación basado en la ubicación (LBIS). El esquema está diseñado para ajustarse a la emisión LDD en nuestro proyecto DAYS. Como se discutió anteriormente, utilizamos la propiedad de contención de LDD en el esquema de indexación. Esto limita significativamente la búsqueda de nuestros datos requeridos a una parte particular de la transmisión. Por lo tanto, argumentamos que el esquema proporciona tiempo de afinación limitado. Describimos la arquitectura de nuestro esquema de indexación. Nuestro esquema contiene cubos de datos separados y cubos de índices. Los cubos de índice son de dos tipos. El primer tipo se llama el índice Mayor. El índice Major proporciona información sobre los tipos de datos transmitidos. Por ejemplo, si tenemos la intención de transmitir información como Entretenimiento, Tiempo, Tráfico, etc., entonces el índice principal apunta a estos tipos principales de información y/o sus principales subtipos de información, el número de subtipos principales variando de una información a otra. Esto limita estrictamente el número de accesos a un índice principal. El índice Major nunca apunta a los datos originales. Señala a los subíndices llamados el índice Menor. Los índices menores son los índices que realmente apuntan a los datos originales. Llamamos a estos indicadores menores como punteros de ubicación, ya que apunta a los datos que están asociados con una ubicación. Por lo tanto, nuestra búsqueda de datos incluye el acceso a un índice mayor y algunos índices menores, el número de índice menor variando dependiendo del tipo de información. Por lo tanto, nuestro esquema de indexación tiene en cuenta la naturaleza jerárquica del LDD, la propiedad Containment, y requiere que nuestro programa de transmisión se agrupe en función del tipo de datos y la ubicación. La estructura de la jerarquía de ubicación requiere el uso de diferentes tipos de índice en diferentes niveles. La estructura y las posiciones del índice dependen estrictamente de la jerarquía de ubicación descrita anteriormente en nuestro esquema de asignación. Ilustramos la implementación de nuestro esquema con un ejemplo. Posteriormente se mencionan las normas para la elaboración del índice. 20 A1 Entretenimiento Restaurante Película A2 A3 A4 R1 R2 R3 R4 R5 R6 R7 R8 Tiempo KC SL JC SF Entretenimiento R1 R2 R3 R4 R4 R5 R6 R7 R8 KC SL JC SF (A, R, NEXT = 8) 3, R5 4, R7 Tipo (S, L) ER W E EM (1, 4) (5, Información cartográfica de ubicación para radiodifusión Figura 4. Datos junto con el índice basado en la ubicación Ejemplo: Supongamos que nuestro contenido de transmisión contiene ICentertainment y ICweather que se representa como se muestra en la Fig. 3. Ai representa las áreas de la ciudad y Ri representa las carreteras en un área determinada. Las hojas de la estructura meteorológica representan cuatro ciudades. La estructura del índice se indica en la Fig. 4 que muestra la posición del índice mayor y menor y los datos en el horario de emisión. Proponemos las siguientes reglas para la creación del programa de emisión indexado por aire: • Se crean el índice mayor y el índice menor. • El índice principal contiene la posición y el rango de diferentes tipos de ítems de datos (Weather and Entertainment, Figura 3) y sus categorías. Las subcategorías de Entretenimiento, Cine y Restaurante, también están en el índice. Así, el índice principal contiene Entretenimiento (E), Entretenimiento-Movie (EM), Entretenimiento-Restaurante (ER), y Tiempo (W). La tupla (S, L) representa la posición inicial (S) del elemento de datos y L representa el rango del elemento en términos de número de cubos de datos. • El índice menor contiene las variables A, R y un puntero Siguiente. En nuestro ejemplo (Figura 3), la carretera R representa el primer nodo del área A. El índice menor se utiliza para apuntar a cubos de datos reales presentes en los niveles más bajos de la jerarquía. En cambio, el índice principal apunta a una gama más amplia de ubicaciones, por lo que contiene información sobre las principales y subcategorías de datos. • La información del índice no se incorpora en los cubos de datos. Los cubos de índice están separados que contienen sólo la información de control. • El número de cubos índice m=#(IC), IC = {ic1, ic2, ic3,...,icn} donde ici representa el tipo de información y # representa la cardinalidad del conjunto de contenido de información IC. En este ejemplo, IC= {icMovie, icWeather, icRestaurant} y así #(IC) =3. Por lo tanto, el número de cubos índice principales es 3. • El mecanismo para resolver la consulta está presente en el coordinador de java en MU. Por ejemplo, si una consulta Q se presenta como Q (Entretenimiento, Película, Road_1), entonces la búsqueda resultante será para la información EM en el índice principal. Nosotros decimos, Q EM. Nuestro índice propuesto funciona de la siguiente manera: Supongamos que una MU emite una consulta que está representada por Java Coordinador presente en la MU como información de restaurante en la carretera 7. Esto es resuelto por el coordinador como Q ER. Esto significa que uno tiene que buscar la unidad de índice ER en el índice principal. Supongamos que el MU entra en el canal en R2. El primer índice que recibe es un índice menor después de R2. En este índice, el valor de la variable Siguiente = 4, lo que significa que el siguiente índice mayor está presente después del cubo 4. La MU puede entrar en modo somnoliento. Se activa después del cubo 4 y recibe el índice principal. Busca información de ER que es la primera entrada en este índice. Ahora es seguro que la MU obtendrá la posición del cubo de datos en el índice menor contiguo. La segunda unidad en el índice menor representa la posición de los datos requeridos R7. Indica que el cubo de datos es el primer cubo en el Área 4. El MU vuelve a entrar en modo somnífero y se activa después del cubo 6. Obtiene los datos necesarios en el siguiente cubo. Presentamos el algoritmo para buscar el Índice basado en la ubicación. Algoritmo 1 Índice basado en la ubicación Buscar en DAYS 1. Escanear la transmisión para el siguiente cubo índice, encontrado=falso 2. Mientras que (no se encuentra) hacer 3. si cubo es el índice mayor entonces 4. Encuentra el Tipo & Tupla (S, L) 5. si S es mayor que 1, entra en modo Doze durante S segundos 6. termina si 7. Despierta en el cubo Sth y observa el índice menor 8. termina si 9. si el cubo es índice menor entonces 10. si TypeRequest no es igual a Typefound y (A,R)Solicitud no es igual a (A,R)found entonces 11. Vaya al modo de doze hasta el SIGUIENTE y repita desde el paso 3 12. terminar si 13. de lo contrario encontrar entrada en Índice Menor que apunta a los datos 14. Calcular la hora de llegada T del cubo de datos 15. Entra en modo somnífero hasta la T 16. Despierta en T y accede a los datos, encontrados = verdadero 17. fin de lo contrario 18. final si 19. final Mientras que 21 6. EVALUACIÓN DE LA EJECUCIÓN La conservación de la energía es la principal preocupación cuando tratamos de acceder a los datos de la transmisión inalámbrica. Un sistema eficiente debe permitir al dispositivo móvil acceder a los datos que necesita manteniéndose activo durante un período mínimo de tiempo. Esto ahorraría una cantidad considerable de energía. Dado que los elementos se distribuyen en función de los tipos y se asignan a ubicaciones adecuadas, argumentamos que nuestra transmisión se ocupa de los tipos de datos agrupados. La unidad móvil tiene que acceder a un índice mayor y a un índice menor relativamente menor para obtener información sobre la hora de llegada de los datos. Esto contrasta con el esquema exponencial donde los índices son de tamaños iguales. El ejemplo discutido y Algoritmo 1 revela que para acceder a cualquier dato, necesitamos acceder al índice mayor sólo una vez seguido por uno o más accesos al índice menor. El número de accesos menores al índice depende del número de ubicaciones internas. Como el número de ubicaciones internas varía de elemento a elemento (por ejemplo, Weather está generalmente asociado con una ciudad mientras que el tráfico se granula hasta las carreteras principales y menores de una ciudad), argumentamos que la estructura de la información de localización mapeada puede ser visualizada como un bosque que es una colección de árboles generales, el número de árboles generales dependiendo de los tipos de información transmitida y la profundidad de un árbol dependiendo de la granularidad de la información de Para nuestros experimentos, asumimos el bosque como una colección de árboles M-ary equilibrados. Asumimos además que los árboles de la arteria M están llenos al asumir la presencia de nodos ficticios en diferentes niveles de un árbol. Así, si el número de ítems de datos es d y la altura del árbol es m, entonces n= (m*d-1)/(m-1) donde n es el número de vértices en el árbol e i= (d-1)/(m-1) donde i es el número de vértices internos. El tiempo de afinación para un ítem de datos implica 1 unidad de tiempo requerido para acceder al índice principal más el tiempo requerido para acceder a los ítems de datos presentes en las hojas del árbol. Por lo tanto, el tiempo de sintonización con d ítems de datos es t = logmd+1 Podemos decir que el tiempo de sintonización está limitado por O(logmd). Comparamos nuestro esquema con el esquema de indexación distribuida y exponencial. Asumimos una emisión plana y el número de páginas que varían de 5000 a 25000. Los diversos parámetros de simulación se muestran en la Tabla 1. La Figura 5-8 muestra los tiempos relativos de afinación de tres algoritmos de indexación, es decir, el LBIS, esquema exponencial y el esquema de árbol distribuido. La Figura 5 muestra el resultado para el número de nodos internos de ubicación = 3. Podemos ver que LBIS supera significativamente a los otros esquemas. El tiempo de afinación en LBIS varía de aproximadamente 6,8 a 8. Este gran tiempo de afinación se debe al hecho de que después de alcanzar el índice menor más bajo, la MU puede tener que acceder a pocos cubos secuencialmente para obtener el cubo de datos requerido. Podemos ver que el tiempo de afinación tiende a ser estable a medida que aumenta la duración de la emisión. En la figura 6 se considera m= 4. Aquí podemos ver que el exponencial y el rendimiento distribuido casi de manera similar, aunque el primero parece funcionar ligeramente mejor a medida que aumenta la longitud de emisión. Un patrón muy interesante es visible en la figura 7. Para las emisiones de menor tamaño, el LBIS parece tener un tiempo de afinación mayor que los otros dos esquemas. Pero a medida que aumenta la duración de la emisión, es claramente visible que el LBIS supera a los otros dos esquemas. La indexación del árbol distribuido muestra un comportamiento similar al del LBIS. El tiempo de afinación en LBIS sigue siendo bajo porque el algoritmo permite a la MU saltarse algunos Índices Menores intermedios. Esto permite que la MU se mueva a niveles más bajos directamente después de entrar en modo activo, ahorrando así energía valiosa. Esta acción no es posible en la indexación de árboles distribuidos y por lo tanto podemos observar que su tiempo de afinación es más que el esquema LBIS, aunque tiene mejores resultados que el esquema exponencial. La Figura 8, en contraste, nos muestra que el tiempo de afinación en LBIS, aunque menor que los otros dos esquemas, tiende a aumentar bruscamente a medida que la longitud de emisión se hace mayor que las 15000 páginas. Esto puede atribuirse tanto al aumento del tiempo necesario para escanear los Índices Menores intermedios como a la duración de la emisión. Pero podemos observar que la pendiente de la curva LBIS es significativamente menor que las otras dos curvas. Tabla 1 Parámetros de simulación P Valores de definición N Número de datos Elementos 5000 - 25000 m Número de nodos de ubicación internos 3, 4, 5, 6 B Capacidad de cubo sin índice (para índice exponencial) 10,64,128,256 i Base de índice para índice exponencial 2,4,6,8 k Tamaño del índice para árbol distribuido 8 bytes Los resultados de la simulación establecen algunos hechos sobre nuestro esquema de indexación basado en la ubicación. En la mayoría de los casos, el sistema funciona mejor que los otros dos en términos de tiempo de afinación. A medida que aumenta la duración de la emisión, después de cierto punto, aunque el tiempo de afinación aumenta como resultado de factores que hemos descrito antes, el esquema siempre funciona mejor que los otros dos esquemas. Debido al límite prescrito del número de páginas en el papel, no podemos mostrar más resultados. Pero estos resultados omitidos muestran una tendencia similar a la de los resultados representados en la figura 5-8. 7. CONCLUSIÓN Y FUTURO TRABAJO En este trabajo hemos presentado un esquema para el mapeo de datos de radiodifusión inalámbrica con sus ubicaciones. Hemos presentado un ejemplo para mostrar cómo la estructura jerárquica del árbol de ubicación mapea con los datos para crear LDD. Hemos presentado un esquema llamado LBIS para indexar este LDD. Hemos utilizado la propiedad de contención de LDD en el esquema que limita la búsqueda a un estrecho rango de datos en la emisión, ahorrando así energía valiosa en el dispositivo. La asignación de datos con ubicaciones y el esquema de indexación se utilizará en nuestro proyecto DAYS para crear la arquitectura basada en empuje. El LBIS se ha comparado con otros dos sistemas de indexación prominentes, a saber, el sistema de indexación de árboles distribuidos y el sistema de indexación exponencial. En nuestras simulaciones demostramos que el esquema LBIS tiene el menor tiempo de afinación para las emisiones que tienen un gran número de páginas, ahorrando así una valiosa potencia de batería en la MU. 22 En el trabajo futuro tratamos de incorporar la arquitectura basada en el tirón en nuestro proyecto DAYS. Los datos del servidor están disponibles para el acceso de los usuarios globales. Esto se puede hacer poniendo una solicitud al servidor de origen. La consulta en este caso es una consulta global. Se transfiere del servidor de origen de los usuarios al servidor de destino mediante el uso de satélites LEO. Tenemos la intención de utilizar nuestro esquema de LDD y arquitectura de estadificación de datos en la arquitectura basada en el tirón. Demostraremos que el esquema de LDD junto con la arquitectura de estadificación de datos mejora significativamente la latencia para la consulta global y local. 8. REFERENCIAS [1] Acharya, S., Alonso, R. Franklin, M y Zdonik S. Disco de transmisión: Gestión de datos para entornos de comunicación asimétricos. En Actas de la Conferencia de la ACM SIGMOD sobre Gestión de Datos, págs. 199 a 210, San José, CA, mayo de 1995. [2] Chen, M.S.,Wu, K.L. y Yu, P. S. Optimizando la asignación de índices para la difusión secuencial de datos en la computación móvil inalámbrica. IEEE Transactions on Knowledge and Data Engineering (TKDE), 15(1):161-173, enero/febrero de 2003. Gráfico 5 Tamaño de la transmisión (# cubos) Dist tree Expo LBIS Figura 6. Tamaño de la transmisión (# cubos) Dist tree Expo LBIS Figura 7. Tamaño de la transmisión (# cubos) Dist tree Expo LBIS Figura 8. Tamaño de la transmisión (# cubos) Árbol dist Expo LBIS Tiempo medio de afinación Tiempo medio de afinación Tiempo medio de afinación 23 [3] Hu, Q. L., Lee, D. L. y Lee, W.C. Evaluación del rendimiento de un sistema inalámbrico de difusión jerárquica de datos. En Actas de la Quinta Conferencia Internacional Anual de ACM sobre Computación y Redes Móviles (MobiCom99), págs. 163 a 173, Seattle, WA, agosto de 1999. [4] Hu, Q. L. Lee, W.C. y Lee, D. L. Power consultas conservadoras de múltiples atributos en la transmisión de datos. En Actas de la 16a Conferencia Internacional sobre Ingeniería de Datos (ICDE00), páginas 157-166, San Diego, CA, febrero de 2000. [5] Imielinski, T., Viswanathan, S. y Badrinath. B. R. Filtrado eficiente de energía de los datos en el aire. En Actas de la Cuarta Conferencia Internacional sobre Tecnología de Bases de Datos Ampliadas (EDBT94), págs. 245 a 258, Cambridge, Reino Unido, marzo de 1994. [6] Imielinski, T., Viswanathan, S. y Badrinath. B. R. Datos sobre el aire - Organización y acceso. Operaciones de IEEE en Ingeniería de Conocimientos e Datos (TKDE), 9(3):353-372, mayo/junio de 1997. [7] Shih, E., Bahl, P. y Sinclair, M. J. Wake on wireless: Una estrategia de ahorro de energía impulsada por eventos para dispositivos operados por baterías. En Actas de la 8a Conferencia Internacional Anual de ACM sobre Computación y Redes Móviles (MobiCom02), págs. 160 a 171, Atlanta, GA, septiembre de 2002. [8] Shivakumar N. y Venkatasubramanian, S. Indización energéticamente eficiente para la difusión de información en sistemas inalámbricos. ACM/Baltzer Journal of Mobile Networks and Applications (MONET), 1(4):433-446, diciembre de 1996. [9] Tan K. L. y Yu, J. X. Filtración energéticamente eficiente de emisiones no uniformes. En Actas de la 16a Conferencia Internacional sobre Sistemas de Computación Distribuida (ICDCS96), págs. 520 a 527, Hong Kong, mayo de 1996. [10] Viredaz, M. A., Brakmo, L. S. y Hamburgen, W. R. Gestión de energía en dispositivos portátiles. ACM Coue, 1(7):44-52, octubre de 2003. [11] Garg, N. Kumar, V., & Dunham, M.H. Mapeo e indización de información en DAYS, 6o Taller Internacional sobre Movilidad en Bases de Datos y Sistemas Distribuidos, en conjunción con la 14a Conferencia Internacional sobre Aplicaciones de Bases de Datos y Sistemas Expertos, 1o a 5 de septiembre, Praga, República Checa, 2003. [12] Acharya D., Kumar, V., & Dunham, M.H. InfoSpace: Sistema de difusión de datos públicos híbrido y adaptativo para computación ubicua. Aceptado para publicación en el número especial de Pervasive Computing. Wiley Journal for Wireless Communications and Mobile Computing, 2004. [13] Acharya D., Kumar, V., & Prabhu, N. Descubriendo y usando Servicios Web en M-Commerce, Proceedings for 5th VLDB Workshop on Technologies for E-Services, Toronto, Canada,2004. [14] Acharya D., Kumar, V. Indexing Location Depending Data in broadcast en ambiente. Aceptado para su publicación, número especial de JDIM sobre Gestión de Datos Distribuidos, 2005. [15] Flinn, J., Sinnamohideen, S., & Satyanarayan, M. Data Staging on No Trusted Surrogates, Intel Research, Pittsburg, Unpublished Report, 2003. [16] Seydim, A.Y., Dunham, M.H. & Kumar, V. Location dependiente consulta processing, Actas del segundo taller internacional de ACM sobre ingeniería de datos para acceso inalámbrico y móvil, p.47-53, Santa Barbara, California, USA, 2001. [17] Xu, J., Lee, W.C., Tang., X. Índice exponencial: Un esquema de indexación distribuida para los datos sobre el aire. En Actas de la II Conferencia Internacional ACM/USENIX sobre Sistemas, Aplicaciones y Servicios Móviles (MobiSys04), Boston, MA, junio de 2004. 24 ",
            "error": []
        },
        "wireless channel": {
            "translated_key": "canal inalámbrico",
            "translated_annotated_text": "Esquema de Indización basado en la ubicación para DAYS Debopam Acharya y Vijay Kumar 1 Computer Science and Informatics University of Missouri-Kansas City Kansas City, MO 64110 dargc(kumarv)@umkc.edu RESUMEN La difusión de datos a través de canales inalámbricos para transmitir información a los consumidores se está volviendo bastante común. Se han propuesto muchos planes de difusión, pero la mayoría de ellos llevan los datos a canales inalámbricos para consumo general. La difusión basada en push [1] es esencialmente asimétrica, es decir, el volumen de datos es mayor desde el servidor a los usuarios que desde los usuarios de vuelta al servidor. El esquema basado en el empuje requiere una indexación que indica cuándo se transmitirán los datos y su posición en la emisión. Latencia de acceso y tiempo de afinación son los dos parámetros principales que pueden utilizarse para evaluar un esquema de indexación. Dos de los importantes esquemas de indexación propuestos anteriormente se basaban en los árboles y los esquemas de indexación exponencial. Ninguno de estos planes pudo satisfacer los requisitos de los datos dependientes de la ubicación (DDL), que es una característica muy deseable de la difusión de datos. En este artículo, discutimos la emisión de LDD en nuestro proyecto DAta in Your Space (DAYS), y proponemos un esquema para la indexación de LDD. Argumentamos que este sistema, cuando se aplica a la DDTS, mejora significativamente el rendimiento en términos de tiempo de afinación en los esquemas antes mencionados. Demostramos nuestro argumento con la ayuda de resultados de simulación. Categorías y Descriptores sujetos H.3.1 [Sistemas de información]: Almacenamiento y recuperación de información - análisis e indexación de contenido; H.3.3 [Sistemas de información]: Almacenamiento y recuperación de información - búsqueda y recuperación de información. Términos generales Algoritmos, Rendimiento, Experimentación 1. INTRODUCCIÓN La difusión inalámbrica de datos es una forma económica y eficiente de poner los datos deseados a disposición de un gran número de usuarios móviles o estáticos. El modo de transferencia de datos es esencialmente asimétrico, es decir, la capacidad de transferencia de datos (comunicación descendente) del servidor al cliente (usuario móvil) es significativamente mayor que el cliente o usuario móvil al servidor (comunicación ascendente). La eficacia de un sistema de difusión de datos se determina por su capacidad para proporcionar a los usuarios los datos requeridos en cualquier lugar y en cualquier momento. Una de las mejores maneras de lograr esto es a través de la difusión de servicios basados en la ubicación altamente personalizados (LBS) que permite a los usuarios acceder a datos dependientes de la ubicación personalizada. Un ejemplo sería alguien usando su dispositivo móvil para buscar un restaurante vegetariano. La aplicación LBS interactuaría con otros componentes de tecnología de localización o utilizaría la entrada de usuarios móviles para determinar la ubicación de los usuarios y descargar la información sobre los restaurantes cercanos al usuario sintonizando el \"canal inalámbrico\" que está difundiendo LDD. Vemos un despliegue limitado de LBS por parte de algunos proveedores de servicios. Pero hay todos los indicios de que con el tiempo se resolverán algunos de los complejos problemas técnicos, como el marco de localización uniforme, el cálculo y el seguimiento de ubicaciones en todo tipo de lugares, el posicionamiento en diversos entornos, aplicaciones de localización innovadoras, etc., y LBS se convertirá en una instalación común y ayudará a mejorar la productividad del mercado y el confort del cliente. En nuestro proyecto llamado DAYS, utilizamos el mecanismo de difusión de datos inalámbricos para impulsar LDD a los usuarios y usuarios móviles monitorear y sintonizar el canal para encontrar y descargar los datos requeridos. Sin embargo, es probable que una emisión simple cause una degradación significativa del rendimiento de los dispositivos móviles con limitaciones energéticas, y una solución común a este problema es el uso de una indexación eficiente del aire. El enfoque de indexación almacena información de control que informa al usuario sobre la ubicación de los datos en la emisión y cómo y cuándo pudo acceder a ella. Un usuario móvil, por lo tanto, tiene un poco de tiempo libre para entrar en el modo de somnífero que conserva valiosa energía. También permite al usuario personalizar su propio dispositivo móvil afinando selectivamente la información de su elección. La eficiencia del acceso y la conservación de la energía son las dos cuestiones importantes para los sistemas de radiodifusión de datos. La eficiencia de acceso se refiere a la latencia experimentada cuando se inicia una solicitud hasta que se recibe la respuesta. Conservación de la energía [7, 10] se refiere al uso eficiente de la energía limitada del dispositivo móvil para acceder a los datos de radiodifusión. Dos parámetros que afectan a estos son el tiempo de afinación y la latencia de acceso. El tiempo de sintonización se refiere al tiempo durante el cual la unidad móvil (MU) permanece en estado activo para sintonizar el canal y descargar los datos requeridos. También se puede definir como el número de cubos sintonizados por el dispositivo móvil en estado activo para obtener los datos requeridos. La latencia de acceso puede definirse como el tiempo transcurrido desde que se ha emitido una solicitud hasta que se ha recibido la respuesta. 1 Esta investigación fue apoyada por una subvención de NSF IIS-0209170. En el pasado se han propuesto varios esquemas de indexación, entre los que destacan los basados en árboles y los esquemas de indexación exponencial [17]. Las principales desventajas de los esquemas basados en árboles son que se basan en estructuras arbóreas centralizadas. Para iniciar una búsqueda, la MU tiene que esperar hasta que llegue a la raíz del siguiente árbol de transmisión. Esto afecta significativamente el tiempo de afinación de la unidad móvil. Los esquemas exponenciales facilitan la replicación de índices compartiendo enlaces en diferentes árboles de búsqueda. Para las emisiones con un gran número de páginas, se ha demostrado que el esquema exponencial funciona de manera similar a los esquemas basados en árboles en términos de latencia de acceso. Además, la duración media de la emisión aumenta debido a la replicación del índice y esto puede causar un aumento significativo de la latencia del acceso. Ninguno de los sistemas de indexación mencionados es igualmente eficaz en la difusión de datos dependientes de la ubicación. Además de proporcionar baja latencia, carecen de propiedades que se utilizan para abordar los problemas de DDT. Proponemos un esquema de indexación en DAYS que se ocupa de algunos de estos problemas. Demostramos con resultados de simulación que nuestro esquema supera a algunos de los esquemas de indexación anteriores para la difusión de LDD en términos de tiempo de afinación. El resto del documento se presenta de la siguiente manera. En la sección 2, se analiza el trabajo anterior relacionado con la indexación de los datos de radiodifusión. La sección 3 describe nuestra arquitectura DAYS. Los datos dependientes de la ubicación, su generación y su posterior difusión se presentan en la sección 4. La sección 5 discute nuestro esquema de indexación en detalle. La simulación de nuestro esquema y su evaluación del desempeño se presenta en la sección 6. En la sección 7 se concluye el documento y se menciona la labor futura relacionada. 2. TRABAJO ANTERIOR Varias técnicas de indexación basadas en discos se han utilizado para la indexación de aire. Imielinski et al. [5, 6] aplicó el árbol del índice B+, donde los nodos de la hoja almacenan los tiempos de llegada de los ítems de datos. Se propuso el método de indexación distribuida para reproducir y distribuir eficientemente el árbol de índices en una emisión. Específicamente, el árbol índice se divide en una parte replicada y una parte no replicada. Cada emisión consiste en la parte replicada y la parte no replicada que indiza los elementos de datos inmediatamente después de ella. Como tal, cada nodo en la parte no replicada aparece sólo una vez en una emisión y, por lo tanto, reduce el costo de replicación y latencia de acceso, al tiempo que logra un buen tiempo de afinación. Chen et al. [2] y Shivakumar et al. [8] considera estructuras de árboles desequilibradas para optimizar el consumo de energía para el acceso a datos no uniformes. Estas estructuras minimizan el costo medio de búsqueda de índices reduciendo el número de búsquedas de datos en caliente a expensas de gastar más en datos en frío. Tan y Yu discutieron la organización de datos e índices bajo la emisión sesgada También se han sugerido métodos de Hashing y firma para la transmisión inalámbrica que admite consultas de igualdad [9]. En [5] se propuso un método flexible de indización. El índice flexible primero clasifica los elementos de datos en orden ascendente (o descendente) de los valores clave de búsqueda y luego los divide en segmentos p. El primer cubo en cada segmento de datos contiene un índice de control, que es un índice binario que asigna un valor clave dado al segmento que contiene esa clave, y un índice local, que es un índice de entrada m que asigna un valor clave dado a los cubos dentro del segmento actual. Al afinar los parámetros de p y m, los clientes móviles pueden lograr un buen tiempo de afinación o una buena latencia de acceso. Otra técnica de indexación propuesta es el esquema de indexación exponencial [17]. En este esquema, se utiliza un índice parametrizado, llamado índice exponencial, para optimizar la latencia del acceso o el tiempo de afinación. Facilita la replicación de índices mediante la vinculación de diferentes árboles de búsqueda. Todos los regímenes mencionados se han aplicado a datos que no están relacionados entre sí. Estos datos no relacionados pueden agruparse o no agruparse. Sin embargo, ninguno de ellos se ha ocupado específicamente de los requisitos de la DDT. Los datos dependientes de la ubicación son datos que están asociados con una ubicación. En la actualidad hay varias aplicaciones que se ocupan de la DDTS [13, 16]. Casi todos ellos representan LDD con la ayuda de estructuras jerárquicas [3, 4]. Esto se basa en la propiedad de contención de datos dependientes de la ubicación. La propiedad Containment ayuda a determinar la posición relativa de un objeto definiendo o identificando ubicaciones que contienen esos objetos. Las ubicaciones subordinadas están jerárquicamente relacionadas entre sí. Así, la propiedad Containment limita la gama de disponibilidad u operación de un servicio. Usamos esta propiedad de contención en nuestro esquema de indexación para indexar LDD. 3. DAYS ARCHITECTURE DAYS se ha conceptualizado para difundir datos tópicos y no tópicos a los usuarios en un espacio de difusión local y para aceptar consultas de usuarios individuales a nivel mundial. Los datos tópicos, por ejemplo, información meteorológica, información de tráfico, información de existencias, etc., cambian constantemente con el tiempo. Los datos no tópicos como hotel, restaurante, precios inmobiliarios, etc., no cambian tan a menudo. Así, imaginamos la presencia de dos tipos de distribución de datos: En el primer caso, el servidor empuja los datos a los usuarios locales a través de canales inalámbricos. El otro caso se refiere al servidor que envía los resultados de las consultas de los usuarios a través de canales inalámbricos de enlace descendente. Técnicamente, vemos la presencia de dos tipos de colas en el acceso basado en datos. Una es una cola muy cargada que contiene consultas cargadas globalmente. La otra es una cola relativamente ligera que consiste en consultas subidas localmente. La arquitectura DAYS [12], como se muestra en la figura 1, consiste en un servidor de datos, programador de transmisiones, coordinador de DAYS, red de satélites LEO para la entrega de datos a nivel mundial y un espacio de transmisión local. Los datos se introducen en el espacio de transmisión local para que los usuarios puedan sintonizarse con los canales inalámbricos para acceder a los datos. El espacio de transmisión local consiste en una torre de transmisión, unidades móviles y una red de máquinas de puesta en escena de datos llamadas subrogados. La estadificación de datos en sustitutos se ha investigado anteriormente como una técnica exitosa [12, 15] para los datos relacionados con los usuarios de caché. Creemos que la estadificación de datos se puede utilizar para reducir drásticamente el tiempo de latencia tanto para los datos de radiodifusión local como para las respuestas globales. La solicitud de consulta en los sustitutos puede utilizarse posteriormente para generar los patrones de popularidad que finalmente deciden el horario de emisión [12]. 18 Popularidad Comentarios de Surrogates for Broadcast Scheduler Local Space Broadcast Tower SurrogateMU MU MU Servidor de datosHorario de radiodifusiónDÍAS Coordinador Canal local de enlace descendente Canal global de enlace descendente Pull request cola cola Solicitud global cola Solicitud local cola Ubicación índice basado en Starbucks Plaza Kansas City Figura 1. Arquitectura DAYS Figura 2. Ubicación Estructura deStarbucks, Plaza 4. DATOS DEPENDIENTES DE LOCALIZACIÓN (LDD) Argumentamos que la incorporación de información de ubicación en la transmisión inalámbrica de datos puede disminuir significativamente la latencia de acceso. Esta propiedad se convierte en muy útil para la unidad móvil que tiene capacidad de almacenamiento y procesamiento limitada. Hay una variedad de aplicaciones para obtener información sobre tráfico, reservas de restaurantes y hoteles, comida rápida, gasolineras, oficina de correos, tiendas de comestibles, etc. Si estas aplicaciones se combinan con información de ubicación, entonces la búsqueda será rápida y altamente rentable. Una propiedad importante de las ubicaciones es Containment que ayuda a determinar la ubicación relativa de un objeto con respecto a su padre que contiene el objeto. Por lo tanto, Containment limita el rango de disponibilidad de un dato. Usamos esta propiedad en nuestro esquema de indexación. La base de datos contiene los contenidos transmitidos que se convierten en LDD [14] asociándolos con las ubicaciones respectivas para que puedan transmitirse de manera agrupada. El agrupamiento de LDD ayuda al usuario a localizar la información de manera eficiente y soporta la propiedad de contención. Presentamos un ejemplo para justificar nuestra propuesta. Ejemplo: Supongamos que un usuario emite una consulta Starbucks Coffee en Plaza por favor. para acceder a información sobre la sucursal Plaza de Starbucks Coffee en Kansas City. En el caso de la ubicación independiente establecido el sistema enumerará todas las cafeterías Starbucks en el área de Kansas City. Es evidente que esas respuestas aumentarán la latencia del acceso y no son deseables. Estos se pueden administrar de manera eficiente si el servidor tiene datos dependientes de la ubicación, es decir, una asignación entre los datos de una cafetería de Starbucks y su ubicación física. Además, para una consulta que incluya el rango de ubicaciones de Starbucks, bastará con una sola consulta solicitando ubicaciones para toda la región de Kansas City, como se muestra en la Figura 2. Esto ahorrará una enorme cantidad de ancho de banda al disminuir el número de mensajes y, al mismo tiempo, será útil para prevenir el cuello de botella de escalabilidad en una zona muy poblada. 4.1 Función de asignación para LDD El ejemplo justifica la necesidad de una función de asignación para procesar consultas dependientes de la ubicación. Esto será especialmente importante para las consultas basadas en la atracción en todo el mundo para las cuales la respuesta podría estar compuesta para diferentes partes del mundo. La función de mapeo es necesaria para construir el horario de emisión. Definimos Global Property Set (GPS) [11], Information Content (IC) set, and Location Jerarchy (LH) set where IC  GPS and LH  GPS to develop a mapping function. LH = {l1, l2, l3...,lk} donde li representan ubicaciones en el árbol de ubicación y IC = {ic1, ic2, ic3,...,icn} donde ici representan tipo de información. Por ejemplo, si tenemos tráfico, tiempo, y la información de stock están en transmisión entonces IC = {ictráfico, icweather, e icstock}. El esquema de asignación debe ser capaz de identificar y seleccionar un miembro IC y un nodo LH para (a) asociación correcta, (b) coincidencia de granularidad, (c) y condición de terminación. Por ejemplo, el clima • IC podría estar asociado con un país o un estado o una ciudad o un pueblo de LH. La coincidencia de granularidad entre el tiempo y un nodo LH es según el requisito del usuario. Así, con una granularidad gruesa la información meteorológica se asocia con un país para obtener el clima de los países y con la ciudad en una granularidad más fina. Si una ciudad es la mejor granularidad, entonces define la condición terminal para la asociación entre IC y LH para el tiempo. Esto significa que un usuario no puede obtener información meteorológica sobre la subdivisión de una ciudad. En realidad, el clima de una subdivisión no tiene ningún sentido. Desarrollamos un simple esquema de mapeo heurístico basado en las necesidades del usuario. Dejar IC = {m1, m2,m3.,..., mk}, donde mi representa su elemento y dejar LH = {n1, n2, n3,..., nl}, donde ni representa miembro LHs. Definimos GPS para IC (GPSIC)  GPS y para LH (GPSLH)  GPS como GPSIC = {P1, P2,..., Pn}, donde P1, P2, P3,..., Pn son propiedades de sus miembros y GPSLH = {Q1, Q2,..., Qm} donde Q1, Q2,..., Qm son propiedades de sus miembros. Las propiedades de un miembro particular de IC son un subconjunto de GPSIC. Generalmente es cierto que (conjunto de propiedades (miÃ3n IC) â € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € Por ejemplo, stock • IC y película • IC calificación no tienen ninguna propiedad en común. Asumimos que dos o más miembros del CI tienen al menos una propiedad geográfica común (es decir, lugar) porque DAYS transmite información sobre esas categorías, que están estrechamente vinculadas con un lugar. Por ejemplo, las acciones de una empresa están relacionadas con un país, el clima está relacionado con una ciudad o estado, etc. Definimos el subconjunto de propiedades de mio IC como PSm i ♥ mi • IC y PSm i = {P1, P2,..., Pr} donde r ≤ n. • Pr {Pr • PSm i → Pr • GPSIC} que implica que • i, PSm i  GPSIC. Las propiedades geográficas de este conjunto son indicativas de si mi IC puede ser mapeado a un solo nivel de granularidad (es decir. una sola ubicación) en LH o varios niveles de granularidad (es decir, más de un nodo en 19 de la jerarquía) en LH. ¿Cuántos y qué niveles de granularidad debe un mapa mi, depende del nivel en el que el proveedor de servicios quiere proporcionar información sobre el mi en cuestión. Del mismo modo, definimos un subconjunto de propiedades de los miembros de LH como PSn j Ł nj Ł LH que puede ser escrito como PSn j ={Q1, Q2, Q3,..., Qs} donde s ≤ m. Además, El proceso de mapeo de IC a LH es entonces identificar para algunos mxÃ3 IC uno o mÃ¡s nyÃ3 LH tal que PSmx Ã3 PSnv Esto significa que cuando mx mapea a ny y a todos los niños de ny si mx puede mapear a múltiples niveles de granularidad o mx mapea sólo a ny si mx puede mapear a un solo nivel de granularidad. Asumimos que los nuevos miembros pueden unirse y los antiguos miembros pueden salir de IC o LH en cualquier momento. La eliminación de miembros del espacio del CI es simple, pero la adición de miembros al espacio del CI es más restrictiva. Si queremos añadir un nuevo miembro al espacio IC, primero definimos un conjunto de propiedades para el nuevo miembro: PSmnew_m ={P1, P2, P3,..., Pt} y lo añadimos al CI sólo si la condición: Este régimen tiene una ventaja adicional al permitir a los proveedores de servicios de información controlar el tipo de información que desean proporcionar a los usuarios. Presentamos el siguiente ejemplo para ilustrar el concepto de mapeo. IC = {Tráfico, Stock, Restaurante, Tiempo, Fechas importantes de la historia, Condiciones de la carretera} LH = {País, Estado, Ciudad, Código postal, Principales carreteras} GPSIC = {Surface-mobility, Roads, High, Low, Italian-food, StateName, Temp, CityName, Seat-disponibilidad, Zip, Traffic-jams, Además, PS(ICStock) indicó que Stock solo puede mapear a un solo país. Cuando consideramos el miembro Tráfico del espacio IC, sólo PS(ICTraffic) â € ¢ PScity â € TM. Como PS(ICTRAFFIC) indica que Traffic puede mapear a una sola ubicación, solo mapea a City y a ninguno de sus hijos. Ahora bien, a diferencia de Stock, el mapeo del tráfico con las principales carreteras, que es un hijo de la ciudad, es significativo. Sin embargo, los proveedores de servicios tienen derecho a controlar los niveles de granularidad a los que desean proporcionar información sobre un miembro del espacio IC. PS(ICRoad conditions) • PSState  y PS(ICRoad conditions) • PSCity. Así que las condiciones de la carretera son mapas al Estado, así como a la ciudad. Como PS(ICRoad conditions) indica que las condiciones de la carretera pueden mapear a múltiples niveles de granularidad, las condiciones de la carretera también mapearán a Zip Code y las principales carreteras, que son los niños del Estado y la ciudad. Del mismo modo, los mapas del restaurante sólo al código postal, y los mapas meteorológicos al estado, la ciudad y sus hijos, las carreteras principales y el código postal. 5. ESQUEMA DE ÍNDICE BASADA EN LOCALIZACIÓN Esta sección discute nuestro esquema de indexación basado en la ubicación (LBIS). El esquema está diseñado para ajustarse a la emisión LDD en nuestro proyecto DAYS. Como se discutió anteriormente, utilizamos la propiedad de contención de LDD en el esquema de indexación. Esto limita significativamente la búsqueda de nuestros datos requeridos a una parte particular de la transmisión. Por lo tanto, argumentamos que el esquema proporciona tiempo de afinación limitado. Describimos la arquitectura de nuestro esquema de indexación. Nuestro esquema contiene cubos de datos separados y cubos de índices. Los cubos de índice son de dos tipos. El primer tipo se llama el índice Mayor. El índice Major proporciona información sobre los tipos de datos transmitidos. Por ejemplo, si tenemos la intención de transmitir información como Entretenimiento, Tiempo, Tráfico, etc., entonces el índice principal apunta a estos tipos principales de información y/o sus principales subtipos de información, el número de subtipos principales variando de una información a otra. Esto limita estrictamente el número de accesos a un índice principal. El índice Major nunca apunta a los datos originales. Señala a los subíndices llamados el índice Menor. Los índices menores son los índices que realmente apuntan a los datos originales. Llamamos a estos indicadores menores como punteros de ubicación, ya que apunta a los datos que están asociados con una ubicación. Por lo tanto, nuestra búsqueda de datos incluye el acceso a un índice mayor y algunos índices menores, el número de índice menor variando dependiendo del tipo de información. Por lo tanto, nuestro esquema de indexación tiene en cuenta la naturaleza jerárquica del LDD, la propiedad Containment, y requiere que nuestro programa de transmisión se agrupe en función del tipo de datos y la ubicación. La estructura de la jerarquía de ubicación requiere el uso de diferentes tipos de índice en diferentes niveles. La estructura y las posiciones del índice dependen estrictamente de la jerarquía de ubicación descrita anteriormente en nuestro esquema de asignación. Ilustramos la implementación de nuestro esquema con un ejemplo. Posteriormente se mencionan las normas para la elaboración del índice. 20 A1 Entretenimiento Restaurante Película A2 A3 A4 R1 R2 R3 R4 R5 R6 R7 R8 Tiempo KC SL JC SF Entretenimiento R1 R2 R3 R4 R4 R5 R6 R7 R8 KC SL JC SF (A, R, NEXT = 8) 3, R5 4, R7 Tipo (S, L) ER W E EM (1, 4) (5, Información cartográfica de ubicación para radiodifusión Figura 4. Datos junto con el índice basado en la ubicación Ejemplo: Supongamos que nuestro contenido de transmisión contiene ICentertainment y ICweather que se representa como se muestra en la Fig. 3. Ai representa las áreas de la ciudad y Ri representa las carreteras en un área determinada. Las hojas de la estructura meteorológica representan cuatro ciudades. La estructura del índice se indica en la Fig. 4 que muestra la posición del índice mayor y menor y los datos en el horario de emisión. Proponemos las siguientes reglas para la creación del programa de emisión indexado por aire: • Se crean el índice mayor y el índice menor. • El índice principal contiene la posición y el rango de diferentes tipos de ítems de datos (Weather and Entertainment, Figura 3) y sus categorías. Las subcategorías de Entretenimiento, Cine y Restaurante, también están en el índice. Así, el índice principal contiene Entretenimiento (E), Entretenimiento-Movie (EM), Entretenimiento-Restaurante (ER), y Tiempo (W). La tupla (S, L) representa la posición inicial (S) del elemento de datos y L representa el rango del elemento en términos de número de cubos de datos. • El índice menor contiene las variables A, R y un puntero Siguiente. En nuestro ejemplo (Figura 3), la carretera R representa el primer nodo del área A. El índice menor se utiliza para apuntar a cubos de datos reales presentes en los niveles más bajos de la jerarquía. En cambio, el índice principal apunta a una gama más amplia de ubicaciones, por lo que contiene información sobre las principales y subcategorías de datos. • La información del índice no se incorpora en los cubos de datos. Los cubos de índice están separados que contienen sólo la información de control. • El número de cubos índice m=#(IC), IC = {ic1, ic2, ic3,...,icn} donde ici representa el tipo de información y # representa la cardinalidad del conjunto de contenido de información IC. En este ejemplo, IC= {icMovie, icWeather, icRestaurant} y así #(IC) =3. Por lo tanto, el número de cubos índice principales es 3. • El mecanismo para resolver la consulta está presente en el coordinador de java en MU. Por ejemplo, si una consulta Q se presenta como Q (Entretenimiento, Película, Road_1), entonces la búsqueda resultante será para la información EM en el índice principal. Nosotros decimos, Q EM. Nuestro índice propuesto funciona de la siguiente manera: Supongamos que una MU emite una consulta que está representada por Java Coordinador presente en la MU como información de restaurante en la carretera 7. Esto es resuelto por el coordinador como Q ER. Esto significa que uno tiene que buscar la unidad de índice ER en el índice principal. Supongamos que el MU entra en el canal en R2. El primer índice que recibe es un índice menor después de R2. En este índice, el valor de la variable Siguiente = 4, lo que significa que el siguiente índice mayor está presente después del cubo 4. La MU puede entrar en modo somnoliento. Se activa después del cubo 4 y recibe el índice principal. Busca información de ER que es la primera entrada en este índice. Ahora es seguro que la MU obtendrá la posición del cubo de datos en el índice menor contiguo. La segunda unidad en el índice menor representa la posición de los datos requeridos R7. Indica que el cubo de datos es el primer cubo en el Área 4. El MU vuelve a entrar en modo somnífero y se activa después del cubo 6. Obtiene los datos necesarios en el siguiente cubo. Presentamos el algoritmo para buscar el Índice basado en la ubicación. Algoritmo 1 Índice basado en la ubicación Buscar en DAYS 1. Escanear la transmisión para el siguiente cubo índice, encontrado=falso 2. Mientras que (no se encuentra) hacer 3. si cubo es el índice mayor entonces 4. Encuentra el Tipo & Tupla (S, L) 5. si S es mayor que 1, entra en modo Doze durante S segundos 6. termina si 7. Despierta en el cubo Sth y observa el índice menor 8. termina si 9. si el cubo es índice menor entonces 10. si TypeRequest no es igual a Typefound y (A,R)Solicitud no es igual a (A,R)found entonces 11. Vaya al modo de doze hasta el SIGUIENTE y repita desde el paso 3 12. terminar si 13. de lo contrario encontrar entrada en Índice Menor que apunta a los datos 14. Calcular la hora de llegada T del cubo de datos 15. Entra en modo somnífero hasta la T 16. Despierta en T y accede a los datos, encontrados = verdadero 17. fin de lo contrario 18. final si 19. final Mientras que 21 6. EVALUACIÓN DE LA EJECUCIÓN La conservación de la energía es la principal preocupación cuando tratamos de acceder a los datos de la transmisión inalámbrica. Un sistema eficiente debe permitir al dispositivo móvil acceder a los datos que necesita manteniéndose activo durante un período mínimo de tiempo. Esto ahorraría una cantidad considerable de energía. Dado que los elementos se distribuyen en función de los tipos y se asignan a ubicaciones adecuadas, argumentamos que nuestra transmisión se ocupa de los tipos de datos agrupados. La unidad móvil tiene que acceder a un índice mayor y a un índice menor relativamente menor para obtener información sobre la hora de llegada de los datos. Esto contrasta con el esquema exponencial donde los índices son de tamaños iguales. El ejemplo discutido y Algoritmo 1 revela que para acceder a cualquier dato, necesitamos acceder al índice mayor sólo una vez seguido por uno o más accesos al índice menor. El número de accesos menores al índice depende del número de ubicaciones internas. Como el número de ubicaciones internas varía de elemento a elemento (por ejemplo, Weather está generalmente asociado con una ciudad mientras que el tráfico se granula hasta las carreteras principales y menores de una ciudad), argumentamos que la estructura de la información de localización mapeada puede ser visualizada como un bosque que es una colección de árboles generales, el número de árboles generales dependiendo de los tipos de información transmitida y la profundidad de un árbol dependiendo de la granularidad de la información de Para nuestros experimentos, asumimos el bosque como una colección de árboles M-ary equilibrados. Asumimos además que los árboles de la arteria M están llenos al asumir la presencia de nodos ficticios en diferentes niveles de un árbol. Así, si el número de ítems de datos es d y la altura del árbol es m, entonces n= (m*d-1)/(m-1) donde n es el número de vértices en el árbol e i= (d-1)/(m-1) donde i es el número de vértices internos. El tiempo de afinación para un ítem de datos implica 1 unidad de tiempo requerido para acceder al índice principal más el tiempo requerido para acceder a los ítems de datos presentes en las hojas del árbol. Por lo tanto, el tiempo de sintonización con d ítems de datos es t = logmd+1 Podemos decir que el tiempo de sintonización está limitado por O(logmd). Comparamos nuestro esquema con el esquema de indexación distribuida y exponencial. Asumimos una emisión plana y el número de páginas que varían de 5000 a 25000. Los diversos parámetros de simulación se muestran en la Tabla 1. La Figura 5-8 muestra los tiempos relativos de afinación de tres algoritmos de indexación, es decir, el LBIS, esquema exponencial y el esquema de árbol distribuido. La Figura 5 muestra el resultado para el número de nodos internos de ubicación = 3. Podemos ver que LBIS supera significativamente a los otros esquemas. El tiempo de afinación en LBIS varía de aproximadamente 6,8 a 8. Este gran tiempo de afinación se debe al hecho de que después de alcanzar el índice menor más bajo, la MU puede tener que acceder a pocos cubos secuencialmente para obtener el cubo de datos requerido. Podemos ver que el tiempo de afinación tiende a ser estable a medida que aumenta la duración de la emisión. En la figura 6 se considera m= 4. Aquí podemos ver que el exponencial y el rendimiento distribuido casi de manera similar, aunque el primero parece funcionar ligeramente mejor a medida que aumenta la longitud de emisión. Un patrón muy interesante es visible en la figura 7. Para las emisiones de menor tamaño, el LBIS parece tener un tiempo de afinación mayor que los otros dos esquemas. Pero a medida que aumenta la duración de la emisión, es claramente visible que el LBIS supera a los otros dos esquemas. La indexación del árbol distribuido muestra un comportamiento similar al del LBIS. El tiempo de afinación en LBIS sigue siendo bajo porque el algoritmo permite a la MU saltarse algunos Índices Menores intermedios. Esto permite que la MU se mueva a niveles más bajos directamente después de entrar en modo activo, ahorrando así energía valiosa. Esta acción no es posible en la indexación de árboles distribuidos y por lo tanto podemos observar que su tiempo de afinación es más que el esquema LBIS, aunque tiene mejores resultados que el esquema exponencial. La Figura 8, en contraste, nos muestra que el tiempo de afinación en LBIS, aunque menor que los otros dos esquemas, tiende a aumentar bruscamente a medida que la longitud de emisión se hace mayor que las 15000 páginas. Esto puede atribuirse tanto al aumento del tiempo necesario para escanear los Índices Menores intermedios como a la duración de la emisión. Pero podemos observar que la pendiente de la curva LBIS es significativamente menor que las otras dos curvas. Tabla 1 Parámetros de simulación P Valores de definición N Número de datos Elementos 5000 - 25000 m Número de nodos de ubicación internos 3, 4, 5, 6 B Capacidad de cubo sin índice (para índice exponencial) 10,64,128,256 i Base de índice para índice exponencial 2,4,6,8 k Tamaño del índice para árbol distribuido 8 bytes Los resultados de la simulación establecen algunos hechos sobre nuestro esquema de indexación basado en la ubicación. En la mayoría de los casos, el sistema funciona mejor que los otros dos en términos de tiempo de afinación. A medida que aumenta la duración de la emisión, después de cierto punto, aunque el tiempo de afinación aumenta como resultado de factores que hemos descrito antes, el esquema siempre funciona mejor que los otros dos esquemas. Debido al límite prescrito del número de páginas en el papel, no podemos mostrar más resultados. Pero estos resultados omitidos muestran una tendencia similar a la de los resultados representados en la figura 5-8. 7. CONCLUSIÓN Y FUTURO TRABAJO En este trabajo hemos presentado un esquema para el mapeo de datos de radiodifusión inalámbrica con sus ubicaciones. Hemos presentado un ejemplo para mostrar cómo la estructura jerárquica del árbol de ubicación mapea con los datos para crear LDD. Hemos presentado un esquema llamado LBIS para indexar este LDD. Hemos utilizado la propiedad de contención de LDD en el esquema que limita la búsqueda a un estrecho rango de datos en la emisión, ahorrando así energía valiosa en el dispositivo. La asignación de datos con ubicaciones y el esquema de indexación se utilizará en nuestro proyecto DAYS para crear la arquitectura basada en empuje. El LBIS se ha comparado con otros dos sistemas de indexación prominentes, a saber, el sistema de indexación de árboles distribuidos y el sistema de indexación exponencial. En nuestras simulaciones demostramos que el esquema LBIS tiene el menor tiempo de afinación para las emisiones que tienen un gran número de páginas, ahorrando así una valiosa potencia de batería en la MU. 22 En el trabajo futuro tratamos de incorporar la arquitectura basada en el tirón en nuestro proyecto DAYS. Los datos del servidor están disponibles para el acceso de los usuarios globales. Esto se puede hacer poniendo una solicitud al servidor de origen. La consulta en este caso es una consulta global. Se transfiere del servidor de origen de los usuarios al servidor de destino mediante el uso de satélites LEO. Tenemos la intención de utilizar nuestro esquema de LDD y arquitectura de estadificación de datos en la arquitectura basada en el tirón. Demostraremos que el esquema de LDD junto con la arquitectura de estadificación de datos mejora significativamente la latencia para la consulta global y local. 8. REFERENCIAS [1] Acharya, S., Alonso, R. Franklin, M y Zdonik S. Disco de transmisión: Gestión de datos para entornos de comunicación asimétricos. En Actas de la Conferencia de la ACM SIGMOD sobre Gestión de Datos, págs. 199 a 210, San José, CA, mayo de 1995. [2] Chen, M.S.,Wu, K.L. y Yu, P. S. Optimizando la asignación de índices para la difusión secuencial de datos en la computación móvil inalámbrica. IEEE Transactions on Knowledge and Data Engineering (TKDE), 15(1):161-173, enero/febrero de 2003. Gráfico 5 Tamaño de la transmisión (# cubos) Dist tree Expo LBIS Figura 6. Tamaño de la transmisión (# cubos) Dist tree Expo LBIS Figura 7. Tamaño de la transmisión (# cubos) Dist tree Expo LBIS Figura 8. Tamaño de la transmisión (# cubos) Árbol dist Expo LBIS Tiempo medio de afinación Tiempo medio de afinación Tiempo medio de afinación 23 [3] Hu, Q. L., Lee, D. L. y Lee, W.C. Evaluación del rendimiento de un sistema inalámbrico de difusión jerárquica de datos. En Actas de la Quinta Conferencia Internacional Anual de ACM sobre Computación y Redes Móviles (MobiCom99), págs. 163 a 173, Seattle, WA, agosto de 1999. [4] Hu, Q. L. Lee, W.C. y Lee, D. L. Power consultas conservadoras de múltiples atributos en la transmisión de datos. En Actas de la 16a Conferencia Internacional sobre Ingeniería de Datos (ICDE00), páginas 157-166, San Diego, CA, febrero de 2000. [5] Imielinski, T., Viswanathan, S. y Badrinath. B. R. Filtrado eficiente de energía de los datos en el aire. En Actas de la Cuarta Conferencia Internacional sobre Tecnología de Bases de Datos Ampliadas (EDBT94), págs. 245 a 258, Cambridge, Reino Unido, marzo de 1994. [6] Imielinski, T., Viswanathan, S. y Badrinath. B. R. Datos sobre el aire - Organización y acceso. Operaciones de IEEE en Ingeniería de Conocimientos e Datos (TKDE), 9(3):353-372, mayo/junio de 1997. [7] Shih, E., Bahl, P. y Sinclair, M. J. Wake on wireless: Una estrategia de ahorro de energía impulsada por eventos para dispositivos operados por baterías. En Actas de la 8a Conferencia Internacional Anual de ACM sobre Computación y Redes Móviles (MobiCom02), págs. 160 a 171, Atlanta, GA, septiembre de 2002. [8] Shivakumar N. y Venkatasubramanian, S. Indización energéticamente eficiente para la difusión de información en sistemas inalámbricos. ACM/Baltzer Journal of Mobile Networks and Applications (MONET), 1(4):433-446, diciembre de 1996. [9] Tan K. L. y Yu, J. X. Filtración energéticamente eficiente de emisiones no uniformes. En Actas de la 16a Conferencia Internacional sobre Sistemas de Computación Distribuida (ICDCS96), págs. 520 a 527, Hong Kong, mayo de 1996. [10] Viredaz, M. A., Brakmo, L. S. y Hamburgen, W. R. Gestión de energía en dispositivos portátiles. ACM Coue, 1(7):44-52, octubre de 2003. [11] Garg, N. Kumar, V., & Dunham, M.H. Mapeo e indización de información en DAYS, 6o Taller Internacional sobre Movilidad en Bases de Datos y Sistemas Distribuidos, en conjunción con la 14a Conferencia Internacional sobre Aplicaciones de Bases de Datos y Sistemas Expertos, 1o a 5 de septiembre, Praga, República Checa, 2003. [12] Acharya D., Kumar, V., & Dunham, M.H. InfoSpace: Sistema de difusión de datos públicos híbrido y adaptativo para computación ubicua. Aceptado para publicación en el número especial de Pervasive Computing. Wiley Journal for Wireless Communications and Mobile Computing, 2004. [13] Acharya D., Kumar, V., & Prabhu, N. Descubriendo y usando Servicios Web en M-Commerce, Proceedings for 5th VLDB Workshop on Technologies for E-Services, Toronto, Canada,2004. [14] Acharya D., Kumar, V. Indexing Location Depending Data in broadcast en ambiente. Aceptado para su publicación, número especial de JDIM sobre Gestión de Datos Distribuidos, 2005. [15] Flinn, J., Sinnamohideen, S., & Satyanarayan, M. Data Staging on No Trusted Surrogates, Intel Research, Pittsburg, Unpublished Report, 2003. [16] Seydim, A.Y., Dunham, M.H. & Kumar, V. Location dependiente consulta processing, Actas del segundo taller internacional de ACM sobre ingeniería de datos para acceso inalámbrico y móvil, p.47-53, Santa Barbara, California, USA, 2001. [17] Xu, J., Lee, W.C., Tang., X. Índice exponencial: Un esquema de indexación distribuida para los datos sobre el aire. En Actas de la II Conferencia Internacional ACM/USENIX sobre Sistemas, Aplicaciones y Servicios Móviles (MobiSys04), Boston, MA, junio de 2004. 24 ",
            "error": [
                ""
            ]
        },
        "mapping of wireless broadcast datum": {
            "translated_key": [],
            "translated_annotated_text": "Esquema de Indización basado en la ubicación para DAYS Debopam Acharya y Vijay Kumar 1 Computer Science and Informatics University of Missouri-Kansas City Kansas City, MO 64110 dargc(kumarv)@umkc.edu RESUMEN La difusión de datos a través de canales inalámbricos para transmitir información a los consumidores se está volviendo bastante común. Se han propuesto muchos planes de difusión, pero la mayoría de ellos llevan los datos a canales inalámbricos para consumo general. La difusión basada en push [1] es esencialmente asimétrica, es decir, el volumen de datos es mayor desde el servidor a los usuarios que desde los usuarios de vuelta al servidor. El esquema basado en el empuje requiere una indexación que indica cuándo se transmitirán los datos y su posición en la emisión. Latencia de acceso y tiempo de afinación son los dos parámetros principales que pueden utilizarse para evaluar un esquema de indexación. Dos de los importantes esquemas de indexación propuestos anteriormente se basaban en los árboles y los esquemas de indexación exponencial. Ninguno de estos planes pudo satisfacer los requisitos de los datos dependientes de la ubicación (DDL), que es una característica muy deseable de la difusión de datos. En este artículo, discutimos la emisión de LDD en nuestro proyecto DAta in Your Space (DAYS), y proponemos un esquema para la indexación de LDD. Argumentamos que este sistema, cuando se aplica a la DDTS, mejora significativamente el rendimiento en términos de tiempo de afinación en los esquemas antes mencionados. Demostramos nuestro argumento con la ayuda de resultados de simulación. Categorías y Descriptores sujetos H.3.1 [Sistemas de información]: Almacenamiento y recuperación de información - análisis e indexación de contenido; H.3.3 [Sistemas de información]: Almacenamiento y recuperación de información - búsqueda y recuperación de información. Términos generales Algoritmos, Rendimiento, Experimentación 1. INTRODUCCIÓN La difusión inalámbrica de datos es una forma económica y eficiente de poner los datos deseados a disposición de un gran número de usuarios móviles o estáticos. El modo de transferencia de datos es esencialmente asimétrico, es decir, la capacidad de transferencia de datos (comunicación descendente) del servidor al cliente (usuario móvil) es significativamente mayor que el cliente o usuario móvil al servidor (comunicación ascendente). La eficacia de un sistema de difusión de datos se determina por su capacidad para proporcionar a los usuarios los datos requeridos en cualquier lugar y en cualquier momento. Una de las mejores maneras de lograr esto es a través de la difusión de servicios basados en la ubicación altamente personalizados (LBS) que permite a los usuarios acceder a datos dependientes de la ubicación personalizada. Un ejemplo sería alguien usando su dispositivo móvil para buscar un restaurante vegetariano. La aplicación LBS interactuaría con otros componentes de tecnología de localización o utilizaría la entrada de usuarios móviles para determinar la ubicación de los usuarios y descargar la información sobre los restaurantes cercanos al usuario sintonizando el canal inalámbrico que está difundiendo LDD. Vemos un despliegue limitado de LBS por parte de algunos proveedores de servicios. Pero hay todos los indicios de que con el tiempo se resolverán algunos de los complejos problemas técnicos, como el marco de localización uniforme, el cálculo y el seguimiento de ubicaciones en todo tipo de lugares, el posicionamiento en diversos entornos, aplicaciones de localización innovadoras, etc., y LBS se convertirá en una instalación común y ayudará a mejorar la productividad del mercado y el confort del cliente. En nuestro proyecto llamado DAYS, utilizamos el mecanismo de difusión de datos inalámbricos para impulsar LDD a los usuarios y usuarios móviles monitorear y sintonizar el canal para encontrar y descargar los datos requeridos. Sin embargo, es probable que una emisión simple cause una degradación significativa del rendimiento de los dispositivos móviles con limitaciones energéticas, y una solución común a este problema es el uso de una indexación eficiente del aire. El enfoque de indexación almacena información de control que informa al usuario sobre la ubicación de los datos en la emisión y cómo y cuándo pudo acceder a ella. Un usuario móvil, por lo tanto, tiene un poco de tiempo libre para entrar en el modo de somnífero que conserva valiosa energía. También permite al usuario personalizar su propio dispositivo móvil afinando selectivamente la información de su elección. La eficiencia del acceso y la conservación de la energía son las dos cuestiones importantes para los sistemas de radiodifusión de datos. La eficiencia de acceso se refiere a la latencia experimentada cuando se inicia una solicitud hasta que se recibe la respuesta. Conservación de la energía [7, 10] se refiere al uso eficiente de la energía limitada del dispositivo móvil para acceder a los datos de radiodifusión. Dos parámetros que afectan a estos son el tiempo de afinación y la latencia de acceso. El tiempo de sintonización se refiere al tiempo durante el cual la unidad móvil (MU) permanece en estado activo para sintonizar el canal y descargar los datos requeridos. También se puede definir como el número de cubos sintonizados por el dispositivo móvil en estado activo para obtener los datos requeridos. La latencia de acceso puede definirse como el tiempo transcurrido desde que se ha emitido una solicitud hasta que se ha recibido la respuesta. 1 Esta investigación fue apoyada por una subvención de NSF IIS-0209170. En el pasado se han propuesto varios esquemas de indexación, entre los que destacan los basados en árboles y los esquemas de indexación exponencial [17]. Las principales desventajas de los esquemas basados en árboles son que se basan en estructuras arbóreas centralizadas. Para iniciar una búsqueda, la MU tiene que esperar hasta que llegue a la raíz del siguiente árbol de transmisión. Esto afecta significativamente el tiempo de afinación de la unidad móvil. Los esquemas exponenciales facilitan la replicación de índices compartiendo enlaces en diferentes árboles de búsqueda. Para las emisiones con un gran número de páginas, se ha demostrado que el esquema exponencial funciona de manera similar a los esquemas basados en árboles en términos de latencia de acceso. Además, la duración media de la emisión aumenta debido a la replicación del índice y esto puede causar un aumento significativo de la latencia del acceso. Ninguno de los sistemas de indexación mencionados es igualmente eficaz en la difusión de datos dependientes de la ubicación. Además de proporcionar baja latencia, carecen de propiedades que se utilizan para abordar los problemas de DDT. Proponemos un esquema de indexación en DAYS que se ocupa de algunos de estos problemas. Demostramos con resultados de simulación que nuestro esquema supera a algunos de los esquemas de indexación anteriores para la difusión de LDD en términos de tiempo de afinación. El resto del documento se presenta de la siguiente manera. En la sección 2, se analiza el trabajo anterior relacionado con la indexación de los datos de radiodifusión. La sección 3 describe nuestra arquitectura DAYS. Los datos dependientes de la ubicación, su generación y su posterior difusión se presentan en la sección 4. La sección 5 discute nuestro esquema de indexación en detalle. La simulación de nuestro esquema y su evaluación del desempeño se presenta en la sección 6. En la sección 7 se concluye el documento y se menciona la labor futura relacionada. 2. TRABAJO ANTERIOR Varias técnicas de indexación basadas en discos se han utilizado para la indexación de aire. Imielinski et al. [5, 6] aplicó el árbol del índice B+, donde los nodos de la hoja almacenan los tiempos de llegada de los ítems de datos. Se propuso el método de indexación distribuida para reproducir y distribuir eficientemente el árbol de índices en una emisión. Específicamente, el árbol índice se divide en una parte replicada y una parte no replicada. Cada emisión consiste en la parte replicada y la parte no replicada que indiza los elementos de datos inmediatamente después de ella. Como tal, cada nodo en la parte no replicada aparece sólo una vez en una emisión y, por lo tanto, reduce el costo de replicación y latencia de acceso, al tiempo que logra un buen tiempo de afinación. Chen et al. [2] y Shivakumar et al. [8] considera estructuras de árboles desequilibradas para optimizar el consumo de energía para el acceso a datos no uniformes. Estas estructuras minimizan el costo medio de búsqueda de índices reduciendo el número de búsquedas de datos en caliente a expensas de gastar más en datos en frío. Tan y Yu discutieron la organización de datos e índices bajo la emisión sesgada También se han sugerido métodos de Hashing y firma para la transmisión inalámbrica que admite consultas de igualdad [9]. En [5] se propuso un método flexible de indización. El índice flexible primero clasifica los elementos de datos en orden ascendente (o descendente) de los valores clave de búsqueda y luego los divide en segmentos p. El primer cubo en cada segmento de datos contiene un índice de control, que es un índice binario que asigna un valor clave dado al segmento que contiene esa clave, y un índice local, que es un índice de entrada m que asigna un valor clave dado a los cubos dentro del segmento actual. Al afinar los parámetros de p y m, los clientes móviles pueden lograr un buen tiempo de afinación o una buena latencia de acceso. Otra técnica de indexación propuesta es el esquema de indexación exponencial [17]. En este esquema, se utiliza un índice parametrizado, llamado índice exponencial, para optimizar la latencia del acceso o el tiempo de afinación. Facilita la replicación de índices mediante la vinculación de diferentes árboles de búsqueda. Todos los regímenes mencionados se han aplicado a datos que no están relacionados entre sí. Estos datos no relacionados pueden agruparse o no agruparse. Sin embargo, ninguno de ellos se ha ocupado específicamente de los requisitos de la DDT. Los datos dependientes de la ubicación son datos que están asociados con una ubicación. En la actualidad hay varias aplicaciones que se ocupan de la DDTS [13, 16]. Casi todos ellos representan LDD con la ayuda de estructuras jerárquicas [3, 4]. Esto se basa en la propiedad de contención de datos dependientes de la ubicación. La propiedad Containment ayuda a determinar la posición relativa de un objeto definiendo o identificando ubicaciones que contienen esos objetos. Las ubicaciones subordinadas están jerárquicamente relacionadas entre sí. Así, la propiedad Containment limita la gama de disponibilidad u operación de un servicio. Usamos esta propiedad de contención en nuestro esquema de indexación para indexar LDD. 3. DAYS ARCHITECTURE DAYS se ha conceptualizado para difundir datos tópicos y no tópicos a los usuarios en un espacio de difusión local y para aceptar consultas de usuarios individuales a nivel mundial. Los datos tópicos, por ejemplo, información meteorológica, información de tráfico, información de existencias, etc., cambian constantemente con el tiempo. Los datos no tópicos como hotel, restaurante, precios inmobiliarios, etc., no cambian tan a menudo. Así, imaginamos la presencia de dos tipos de distribución de datos: En el primer caso, el servidor empuja los datos a los usuarios locales a través de canales inalámbricos. El otro caso se refiere al servidor que envía los resultados de las consultas de los usuarios a través de canales inalámbricos de enlace descendente. Técnicamente, vemos la presencia de dos tipos de colas en el acceso basado en datos. Una es una cola muy cargada que contiene consultas cargadas globalmente. La otra es una cola relativamente ligera que consiste en consultas subidas localmente. La arquitectura DAYS [12], como se muestra en la figura 1, consiste en un servidor de datos, programador de transmisiones, coordinador de DAYS, red de satélites LEO para la entrega de datos a nivel mundial y un espacio de transmisión local. Los datos se introducen en el espacio de transmisión local para que los usuarios puedan sintonizarse con los canales inalámbricos para acceder a los datos. El espacio de transmisión local consiste en una torre de transmisión, unidades móviles y una red de máquinas de puesta en escena de datos llamadas subrogados. La estadificación de datos en sustitutos se ha investigado anteriormente como una técnica exitosa [12, 15] para los datos relacionados con los usuarios de caché. Creemos que la estadificación de datos se puede utilizar para reducir drásticamente el tiempo de latencia tanto para los datos de radiodifusión local como para las respuestas globales. La solicitud de consulta en los sustitutos puede utilizarse posteriormente para generar los patrones de popularidad que finalmente deciden el horario de emisión [12]. 18 Popularidad Comentarios de Surrogates for Broadcast Scheduler Local Space Broadcast Tower SurrogateMU MU MU Servidor de datosHorario de radiodifusiónDÍAS Coordinador Canal local de enlace descendente Canal global de enlace descendente Pull request cola cola Solicitud global cola Solicitud local cola Ubicación índice basado en Starbucks Plaza Kansas City Figura 1. Arquitectura DAYS Figura 2. Ubicación Estructura deStarbucks, Plaza 4. DATOS DEPENDIENTES DE LOCALIZACIÓN (LDD) Argumentamos que la incorporación de información de ubicación en la transmisión inalámbrica de datos puede disminuir significativamente la latencia de acceso. Esta propiedad se convierte en muy útil para la unidad móvil que tiene capacidad de almacenamiento y procesamiento limitada. Hay una variedad de aplicaciones para obtener información sobre tráfico, reservas de restaurantes y hoteles, comida rápida, gasolineras, oficina de correos, tiendas de comestibles, etc. Si estas aplicaciones se combinan con información de ubicación, entonces la búsqueda será rápida y altamente rentable. Una propiedad importante de las ubicaciones es Containment que ayuda a determinar la ubicación relativa de un objeto con respecto a su padre que contiene el objeto. Por lo tanto, Containment limita el rango de disponibilidad de un dato. Usamos esta propiedad en nuestro esquema de indexación. La base de datos contiene los contenidos transmitidos que se convierten en LDD [14] asociándolos con las ubicaciones respectivas para que puedan transmitirse de manera agrupada. El agrupamiento de LDD ayuda al usuario a localizar la información de manera eficiente y soporta la propiedad de contención. Presentamos un ejemplo para justificar nuestra propuesta. Ejemplo: Supongamos que un usuario emite una consulta Starbucks Coffee en Plaza por favor. para acceder a información sobre la sucursal Plaza de Starbucks Coffee en Kansas City. En el caso de la ubicación independiente establecido el sistema enumerará todas las cafeterías Starbucks en el área de Kansas City. Es evidente que esas respuestas aumentarán la latencia del acceso y no son deseables. Estos se pueden administrar de manera eficiente si el servidor tiene datos dependientes de la ubicación, es decir, una asignación entre los datos de una cafetería de Starbucks y su ubicación física. Además, para una consulta que incluya el rango de ubicaciones de Starbucks, bastará con una sola consulta solicitando ubicaciones para toda la región de Kansas City, como se muestra en la Figura 2. Esto ahorrará una enorme cantidad de ancho de banda al disminuir el número de mensajes y, al mismo tiempo, será útil para prevenir el cuello de botella de escalabilidad en una zona muy poblada. 4.1 Función de asignación para LDD El ejemplo justifica la necesidad de una función de asignación para procesar consultas dependientes de la ubicación. Esto será especialmente importante para las consultas basadas en la atracción en todo el mundo para las cuales la respuesta podría estar compuesta para diferentes partes del mundo. La función de mapeo es necesaria para construir el horario de emisión. Definimos Global Property Set (GPS) [11], Information Content (IC) set, and Location Jerarchy (LH) set where IC  GPS and LH  GPS to develop a mapping function. LH = {l1, l2, l3...,lk} donde li representan ubicaciones en el árbol de ubicación y IC = {ic1, ic2, ic3,...,icn} donde ici representan tipo de información. Por ejemplo, si tenemos tráfico, tiempo, y la información de stock están en transmisión entonces IC = {ictráfico, icweather, e icstock}. El esquema de asignación debe ser capaz de identificar y seleccionar un miembro IC y un nodo LH para (a) asociación correcta, (b) coincidencia de granularidad, (c) y condición de terminación. Por ejemplo, el clima • IC podría estar asociado con un país o un estado o una ciudad o un pueblo de LH. La coincidencia de granularidad entre el tiempo y un nodo LH es según el requisito del usuario. Así, con una granularidad gruesa la información meteorológica se asocia con un país para obtener el clima de los países y con la ciudad en una granularidad más fina. Si una ciudad es la mejor granularidad, entonces define la condición terminal para la asociación entre IC y LH para el tiempo. Esto significa que un usuario no puede obtener información meteorológica sobre la subdivisión de una ciudad. En realidad, el clima de una subdivisión no tiene ningún sentido. Desarrollamos un simple esquema de mapeo heurístico basado en las necesidades del usuario. Dejar IC = {m1, m2,m3.,..., mk}, donde mi representa su elemento y dejar LH = {n1, n2, n3,..., nl}, donde ni representa miembro LHs. Definimos GPS para IC (GPSIC)  GPS y para LH (GPSLH)  GPS como GPSIC = {P1, P2,..., Pn}, donde P1, P2, P3,..., Pn son propiedades de sus miembros y GPSLH = {Q1, Q2,..., Qm} donde Q1, Q2,..., Qm son propiedades de sus miembros. Las propiedades de un miembro particular de IC son un subconjunto de GPSIC. Generalmente es cierto que (conjunto de propiedades (miÃ3n IC) â € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € Por ejemplo, stock • IC y película • IC calificación no tienen ninguna propiedad en común. Asumimos que dos o más miembros del CI tienen al menos una propiedad geográfica común (es decir, lugar) porque DAYS transmite información sobre esas categorías, que están estrechamente vinculadas con un lugar. Por ejemplo, las acciones de una empresa están relacionadas con un país, el clima está relacionado con una ciudad o estado, etc. Definimos el subconjunto de propiedades de mio IC como PSm i ♥ mi • IC y PSm i = {P1, P2,..., Pr} donde r ≤ n. • Pr {Pr • PSm i → Pr • GPSIC} que implica que • i, PSm i  GPSIC. Las propiedades geográficas de este conjunto son indicativas de si mi IC puede ser mapeado a un solo nivel de granularidad (es decir. una sola ubicación) en LH o varios niveles de granularidad (es decir, más de un nodo en 19 de la jerarquía) en LH. ¿Cuántos y qué niveles de granularidad debe un mapa mi, depende del nivel en el que el proveedor de servicios quiere proporcionar información sobre el mi en cuestión. Del mismo modo, definimos un subconjunto de propiedades de los miembros de LH como PSn j Ł nj Ł LH que puede ser escrito como PSn j ={Q1, Q2, Q3,..., Qs} donde s ≤ m. Además, El proceso de mapeo de IC a LH es entonces identificar para algunos mxÃ3 IC uno o mÃ¡s nyÃ3 LH tal que PSmx Ã3 PSnv Esto significa que cuando mx mapea a ny y a todos los niños de ny si mx puede mapear a múltiples niveles de granularidad o mx mapea sólo a ny si mx puede mapear a un solo nivel de granularidad. Asumimos que los nuevos miembros pueden unirse y los antiguos miembros pueden salir de IC o LH en cualquier momento. La eliminación de miembros del espacio del CI es simple, pero la adición de miembros al espacio del CI es más restrictiva. Si queremos añadir un nuevo miembro al espacio IC, primero definimos un conjunto de propiedades para el nuevo miembro: PSmnew_m ={P1, P2, P3,..., Pt} y lo añadimos al CI sólo si la condición: Este régimen tiene una ventaja adicional al permitir a los proveedores de servicios de información controlar el tipo de información que desean proporcionar a los usuarios. Presentamos el siguiente ejemplo para ilustrar el concepto de mapeo. IC = {Tráfico, Stock, Restaurante, Tiempo, Fechas importantes de la historia, Condiciones de la carretera} LH = {País, Estado, Ciudad, Código postal, Principales carreteras} GPSIC = {Surface-mobility, Roads, High, Low, Italian-food, StateName, Temp, CityName, Seat-disponibilidad, Zip, Traffic-jams, Además, PS(ICStock) indicó que Stock solo puede mapear a un solo país. Cuando consideramos el miembro Tráfico del espacio IC, sólo PS(ICTraffic) â € ¢ PScity â € TM. Como PS(ICTRAFFIC) indica que Traffic puede mapear a una sola ubicación, solo mapea a City y a ninguno de sus hijos. Ahora bien, a diferencia de Stock, el mapeo del tráfico con las principales carreteras, que es un hijo de la ciudad, es significativo. Sin embargo, los proveedores de servicios tienen derecho a controlar los niveles de granularidad a los que desean proporcionar información sobre un miembro del espacio IC. PS(ICRoad conditions) • PSState  y PS(ICRoad conditions) • PSCity. Así que las condiciones de la carretera son mapas al Estado, así como a la ciudad. Como PS(ICRoad conditions) indica que las condiciones de la carretera pueden mapear a múltiples niveles de granularidad, las condiciones de la carretera también mapearán a Zip Code y las principales carreteras, que son los niños del Estado y la ciudad. Del mismo modo, los mapas del restaurante sólo al código postal, y los mapas meteorológicos al estado, la ciudad y sus hijos, las carreteras principales y el código postal. 5. ESQUEMA DE ÍNDICE BASADA EN LOCALIZACIÓN Esta sección discute nuestro esquema de indexación basado en la ubicación (LBIS). El esquema está diseñado para ajustarse a la emisión LDD en nuestro proyecto DAYS. Como se discutió anteriormente, utilizamos la propiedad de contención de LDD en el esquema de indexación. Esto limita significativamente la búsqueda de nuestros datos requeridos a una parte particular de la transmisión. Por lo tanto, argumentamos que el esquema proporciona tiempo de afinación limitado. Describimos la arquitectura de nuestro esquema de indexación. Nuestro esquema contiene cubos de datos separados y cubos de índices. Los cubos de índice son de dos tipos. El primer tipo se llama el índice Mayor. El índice Major proporciona información sobre los tipos de datos transmitidos. Por ejemplo, si tenemos la intención de transmitir información como Entretenimiento, Tiempo, Tráfico, etc., entonces el índice principal apunta a estos tipos principales de información y/o sus principales subtipos de información, el número de subtipos principales variando de una información a otra. Esto limita estrictamente el número de accesos a un índice principal. El índice Major nunca apunta a los datos originales. Señala a los subíndices llamados el índice Menor. Los índices menores son los índices que realmente apuntan a los datos originales. Llamamos a estos indicadores menores como punteros de ubicación, ya que apunta a los datos que están asociados con una ubicación. Por lo tanto, nuestra búsqueda de datos incluye el acceso a un índice mayor y algunos índices menores, el número de índice menor variando dependiendo del tipo de información. Por lo tanto, nuestro esquema de indexación tiene en cuenta la naturaleza jerárquica del LDD, la propiedad Containment, y requiere que nuestro programa de transmisión se agrupe en función del tipo de datos y la ubicación. La estructura de la jerarquía de ubicación requiere el uso de diferentes tipos de índice en diferentes niveles. La estructura y las posiciones del índice dependen estrictamente de la jerarquía de ubicación descrita anteriormente en nuestro esquema de asignación. Ilustramos la implementación de nuestro esquema con un ejemplo. Posteriormente se mencionan las normas para la elaboración del índice. 20 A1 Entretenimiento Restaurante Película A2 A3 A4 R1 R2 R3 R4 R5 R6 R7 R8 Tiempo KC SL JC SF Entretenimiento R1 R2 R3 R4 R4 R5 R6 R7 R8 KC SL JC SF (A, R, NEXT = 8) 3, R5 4, R7 Tipo (S, L) ER W E EM (1, 4) (5, Información cartográfica de ubicación para radiodifusión Figura 4. Datos junto con el índice basado en la ubicación Ejemplo: Supongamos que nuestro contenido de transmisión contiene ICentertainment y ICweather que se representa como se muestra en la Fig. 3. Ai representa las áreas de la ciudad y Ri representa las carreteras en un área determinada. Las hojas de la estructura meteorológica representan cuatro ciudades. La estructura del índice se indica en la Fig. 4 que muestra la posición del índice mayor y menor y los datos en el horario de emisión. Proponemos las siguientes reglas para la creación del programa de emisión indexado por aire: • Se crean el índice mayor y el índice menor. • El índice principal contiene la posición y el rango de diferentes tipos de ítems de datos (Weather and Entertainment, Figura 3) y sus categorías. Las subcategorías de Entretenimiento, Cine y Restaurante, también están en el índice. Así, el índice principal contiene Entretenimiento (E), Entretenimiento-Movie (EM), Entretenimiento-Restaurante (ER), y Tiempo (W). La tupla (S, L) representa la posición inicial (S) del elemento de datos y L representa el rango del elemento en términos de número de cubos de datos. • El índice menor contiene las variables A, R y un puntero Siguiente. En nuestro ejemplo (Figura 3), la carretera R representa el primer nodo del área A. El índice menor se utiliza para apuntar a cubos de datos reales presentes en los niveles más bajos de la jerarquía. En cambio, el índice principal apunta a una gama más amplia de ubicaciones, por lo que contiene información sobre las principales y subcategorías de datos. • La información del índice no se incorpora en los cubos de datos. Los cubos de índice están separados que contienen sólo la información de control. • El número de cubos índice m=#(IC), IC = {ic1, ic2, ic3,...,icn} donde ici representa el tipo de información y # representa la cardinalidad del conjunto de contenido de información IC. En este ejemplo, IC= {icMovie, icWeather, icRestaurant} y así #(IC) =3. Por lo tanto, el número de cubos índice principales es 3. • El mecanismo para resolver la consulta está presente en el coordinador de java en MU. Por ejemplo, si una consulta Q se presenta como Q (Entretenimiento, Película, Road_1), entonces la búsqueda resultante será para la información EM en el índice principal. Nosotros decimos, Q EM. Nuestro índice propuesto funciona de la siguiente manera: Supongamos que una MU emite una consulta que está representada por Java Coordinador presente en la MU como información de restaurante en la carretera 7. Esto es resuelto por el coordinador como Q ER. Esto significa que uno tiene que buscar la unidad de índice ER en el índice principal. Supongamos que el MU entra en el canal en R2. El primer índice que recibe es un índice menor después de R2. En este índice, el valor de la variable Siguiente = 4, lo que significa que el siguiente índice mayor está presente después del cubo 4. La MU puede entrar en modo somnoliento. Se activa después del cubo 4 y recibe el índice principal. Busca información de ER que es la primera entrada en este índice. Ahora es seguro que la MU obtendrá la posición del cubo de datos en el índice menor contiguo. La segunda unidad en el índice menor representa la posición de los datos requeridos R7. Indica que el cubo de datos es el primer cubo en el Área 4. El MU vuelve a entrar en modo somnífero y se activa después del cubo 6. Obtiene los datos necesarios en el siguiente cubo. Presentamos el algoritmo para buscar el Índice basado en la ubicación. Algoritmo 1 Índice basado en la ubicación Buscar en DAYS 1. Escanear la transmisión para el siguiente cubo índice, encontrado=falso 2. Mientras que (no se encuentra) hacer 3. si cubo es el índice mayor entonces 4. Encuentra el Tipo & Tupla (S, L) 5. si S es mayor que 1, entra en modo Doze durante S segundos 6. termina si 7. Despierta en el cubo Sth y observa el índice menor 8. termina si 9. si el cubo es índice menor entonces 10. si TypeRequest no es igual a Typefound y (A,R)Solicitud no es igual a (A,R)found entonces 11. Vaya al modo de doze hasta el SIGUIENTE y repita desde el paso 3 12. terminar si 13. de lo contrario encontrar entrada en Índice Menor que apunta a los datos 14. Calcular la hora de llegada T del cubo de datos 15. Entra en modo somnífero hasta la T 16. Despierta en T y accede a los datos, encontrados = verdadero 17. fin de lo contrario 18. final si 19. final Mientras que 21 6. EVALUACIÓN DE LA EJECUCIÓN La conservación de la energía es la principal preocupación cuando tratamos de acceder a los datos de la transmisión inalámbrica. Un sistema eficiente debe permitir al dispositivo móvil acceder a los datos que necesita manteniéndose activo durante un período mínimo de tiempo. Esto ahorraría una cantidad considerable de energía. Dado que los elementos se distribuyen en función de los tipos y se asignan a ubicaciones adecuadas, argumentamos que nuestra transmisión se ocupa de los tipos de datos agrupados. La unidad móvil tiene que acceder a un índice mayor y a un índice menor relativamente menor para obtener información sobre la hora de llegada de los datos. Esto contrasta con el esquema exponencial donde los índices son de tamaños iguales. El ejemplo discutido y Algoritmo 1 revela que para acceder a cualquier dato, necesitamos acceder al índice mayor sólo una vez seguido por uno o más accesos al índice menor. El número de accesos menores al índice depende del número de ubicaciones internas. Como el número de ubicaciones internas varía de elemento a elemento (por ejemplo, Weather está generalmente asociado con una ciudad mientras que el tráfico se granula hasta las carreteras principales y menores de una ciudad), argumentamos que la estructura de la información de localización mapeada puede ser visualizada como un bosque que es una colección de árboles generales, el número de árboles generales dependiendo de los tipos de información transmitida y la profundidad de un árbol dependiendo de la granularidad de la información de Para nuestros experimentos, asumimos el bosque como una colección de árboles M-ary equilibrados. Asumimos además que los árboles de la arteria M están llenos al asumir la presencia de nodos ficticios en diferentes niveles de un árbol. Así, si el número de ítems de datos es d y la altura del árbol es m, entonces n= (m*d-1)/(m-1) donde n es el número de vértices en el árbol e i= (d-1)/(m-1) donde i es el número de vértices internos. El tiempo de afinación para un ítem de datos implica 1 unidad de tiempo requerido para acceder al índice principal más el tiempo requerido para acceder a los ítems de datos presentes en las hojas del árbol. Por lo tanto, el tiempo de sintonización con d ítems de datos es t = logmd+1 Podemos decir que el tiempo de sintonización está limitado por O(logmd). Comparamos nuestro esquema con el esquema de indexación distribuida y exponencial. Asumimos una emisión plana y el número de páginas que varían de 5000 a 25000. Los diversos parámetros de simulación se muestran en la Tabla 1. La Figura 5-8 muestra los tiempos relativos de afinación de tres algoritmos de indexación, es decir, el LBIS, esquema exponencial y el esquema de árbol distribuido. La Figura 5 muestra el resultado para el número de nodos internos de ubicación = 3. Podemos ver que LBIS supera significativamente a los otros esquemas. El tiempo de afinación en LBIS varía de aproximadamente 6,8 a 8. Este gran tiempo de afinación se debe al hecho de que después de alcanzar el índice menor más bajo, la MU puede tener que acceder a pocos cubos secuencialmente para obtener el cubo de datos requerido. Podemos ver que el tiempo de afinación tiende a ser estable a medida que aumenta la duración de la emisión. En la figura 6 se considera m= 4. Aquí podemos ver que el exponencial y el rendimiento distribuido casi de manera similar, aunque el primero parece funcionar ligeramente mejor a medida que aumenta la longitud de emisión. Un patrón muy interesante es visible en la figura 7. Para las emisiones de menor tamaño, el LBIS parece tener un tiempo de afinación mayor que los otros dos esquemas. Pero a medida que aumenta la duración de la emisión, es claramente visible que el LBIS supera a los otros dos esquemas. La indexación del árbol distribuido muestra un comportamiento similar al del LBIS. El tiempo de afinación en LBIS sigue siendo bajo porque el algoritmo permite a la MU saltarse algunos Índices Menores intermedios. Esto permite que la MU se mueva a niveles más bajos directamente después de entrar en modo activo, ahorrando así energía valiosa. Esta acción no es posible en la indexación de árboles distribuidos y por lo tanto podemos observar que su tiempo de afinación es más que el esquema LBIS, aunque tiene mejores resultados que el esquema exponencial. La Figura 8, en contraste, nos muestra que el tiempo de afinación en LBIS, aunque menor que los otros dos esquemas, tiende a aumentar bruscamente a medida que la longitud de emisión se hace mayor que las 15000 páginas. Esto puede atribuirse tanto al aumento del tiempo necesario para escanear los Índices Menores intermedios como a la duración de la emisión. Pero podemos observar que la pendiente de la curva LBIS es significativamente menor que las otras dos curvas. Tabla 1 Parámetros de simulación P Valores de definición N Número de datos Elementos 5000 - 25000 m Número de nodos de ubicación internos 3, 4, 5, 6 B Capacidad de cubo sin índice (para índice exponencial) 10,64,128,256 i Base de índice para índice exponencial 2,4,6,8 k Tamaño del índice para árbol distribuido 8 bytes Los resultados de la simulación establecen algunos hechos sobre nuestro esquema de indexación basado en la ubicación. En la mayoría de los casos, el sistema funciona mejor que los otros dos en términos de tiempo de afinación. A medida que aumenta la duración de la emisión, después de cierto punto, aunque el tiempo de afinación aumenta como resultado de factores que hemos descrito antes, el esquema siempre funciona mejor que los otros dos esquemas. Debido al límite prescrito del número de páginas en el papel, no podemos mostrar más resultados. Pero estos resultados omitidos muestran una tendencia similar a la de los resultados representados en la figura 5-8. 7. CONCLUSIÓN Y FUTURO TRABAJO En este trabajo hemos presentado un esquema para el mapeo de datos de radiodifusión inalámbrica con sus ubicaciones. Hemos presentado un ejemplo para mostrar cómo la estructura jerárquica del árbol de ubicación mapea con los datos para crear LDD. Hemos presentado un esquema llamado LBIS para indexar este LDD. Hemos utilizado la propiedad de contención de LDD en el esquema que limita la búsqueda a un estrecho rango de datos en la emisión, ahorrando así energía valiosa en el dispositivo. La asignación de datos con ubicaciones y el esquema de indexación se utilizará en nuestro proyecto DAYS para crear la arquitectura basada en empuje. El LBIS se ha comparado con otros dos sistemas de indexación prominentes, a saber, el sistema de indexación de árboles distribuidos y el sistema de indexación exponencial. En nuestras simulaciones demostramos que el esquema LBIS tiene el menor tiempo de afinación para las emisiones que tienen un gran número de páginas, ahorrando así una valiosa potencia de batería en la MU. 22 En el trabajo futuro tratamos de incorporar la arquitectura basada en el tirón en nuestro proyecto DAYS. Los datos del servidor están disponibles para el acceso de los usuarios globales. Esto se puede hacer poniendo una solicitud al servidor de origen. La consulta en este caso es una consulta global. Se transfiere del servidor de origen de los usuarios al servidor de destino mediante el uso de satélites LEO. Tenemos la intención de utilizar nuestro esquema de LDD y arquitectura de estadificación de datos en la arquitectura basada en el tirón. Demostraremos que el esquema de LDD junto con la arquitectura de estadificación de datos mejora significativamente la latencia para la consulta global y local. 8. REFERENCIAS [1] Acharya, S., Alonso, R. Franklin, M y Zdonik S. Disco de transmisión: Gestión de datos para entornos de comunicación asimétricos. En Actas de la Conferencia de la ACM SIGMOD sobre Gestión de Datos, págs. 199 a 210, San José, CA, mayo de 1995. [2] Chen, M.S.,Wu, K.L. y Yu, P. S. Optimizando la asignación de índices para la difusión secuencial de datos en la computación móvil inalámbrica. IEEE Transactions on Knowledge and Data Engineering (TKDE), 15(1):161-173, enero/febrero de 2003. Gráfico 5 Tamaño de la transmisión (# cubos) Dist tree Expo LBIS Figura 6. Tamaño de la transmisión (# cubos) Dist tree Expo LBIS Figura 7. Tamaño de la transmisión (# cubos) Dist tree Expo LBIS Figura 8. Tamaño de la transmisión (# cubos) Árbol dist Expo LBIS Tiempo medio de afinación Tiempo medio de afinación Tiempo medio de afinación 23 [3] Hu, Q. L., Lee, D. L. y Lee, W.C. Evaluación del rendimiento de un sistema inalámbrico de difusión jerárquica de datos. En Actas de la Quinta Conferencia Internacional Anual de ACM sobre Computación y Redes Móviles (MobiCom99), págs. 163 a 173, Seattle, WA, agosto de 1999. [4] Hu, Q. L. Lee, W.C. y Lee, D. L. Power consultas conservadoras de múltiples atributos en la transmisión de datos. En Actas de la 16a Conferencia Internacional sobre Ingeniería de Datos (ICDE00), páginas 157-166, San Diego, CA, febrero de 2000. [5] Imielinski, T., Viswanathan, S. y Badrinath. B. R. Filtrado eficiente de energía de los datos en el aire. En Actas de la Cuarta Conferencia Internacional sobre Tecnología de Bases de Datos Ampliadas (EDBT94), págs. 245 a 258, Cambridge, Reino Unido, marzo de 1994. [6] Imielinski, T., Viswanathan, S. y Badrinath. B. R. Datos sobre el aire - Organización y acceso. Operaciones de IEEE en Ingeniería de Conocimientos e Datos (TKDE), 9(3):353-372, mayo/junio de 1997. [7] Shih, E., Bahl, P. y Sinclair, M. J. Wake on wireless: Una estrategia de ahorro de energía impulsada por eventos para dispositivos operados por baterías. En Actas de la 8a Conferencia Internacional Anual de ACM sobre Computación y Redes Móviles (MobiCom02), págs. 160 a 171, Atlanta, GA, septiembre de 2002. [8] Shivakumar N. y Venkatasubramanian, S. Indización energéticamente eficiente para la difusión de información en sistemas inalámbricos. ACM/Baltzer Journal of Mobile Networks and Applications (MONET), 1(4):433-446, diciembre de 1996. [9] Tan K. L. y Yu, J. X. Filtración energéticamente eficiente de emisiones no uniformes. En Actas de la 16a Conferencia Internacional sobre Sistemas de Computación Distribuida (ICDCS96), págs. 520 a 527, Hong Kong, mayo de 1996. [10] Viredaz, M. A., Brakmo, L. S. y Hamburgen, W. R. Gestión de energía en dispositivos portátiles. ACM Coue, 1(7):44-52, octubre de 2003. [11] Garg, N. Kumar, V., & Dunham, M.H. Mapeo e indización de información en DAYS, 6o Taller Internacional sobre Movilidad en Bases de Datos y Sistemas Distribuidos, en conjunción con la 14a Conferencia Internacional sobre Aplicaciones de Bases de Datos y Sistemas Expertos, 1o a 5 de septiembre, Praga, República Checa, 2003. [12] Acharya D., Kumar, V., & Dunham, M.H. InfoSpace: Sistema de difusión de datos públicos híbrido y adaptativo para computación ubicua. Aceptado para publicación en el número especial de Pervasive Computing. Wiley Journal for Wireless Communications and Mobile Computing, 2004. [13] Acharya D., Kumar, V., & Prabhu, N. Descubriendo y usando Servicios Web en M-Commerce, Proceedings for 5th VLDB Workshop on Technologies for E-Services, Toronto, Canada,2004. [14] Acharya D., Kumar, V. Indexing Location Depending Data in broadcast en ambiente. Aceptado para su publicación, número especial de JDIM sobre Gestión de Datos Distribuidos, 2005. [15] Flinn, J., Sinnamohideen, S., & Satyanarayan, M. Data Staging on No Trusted Surrogates, Intel Research, Pittsburg, Unpublished Report, 2003. [16] Seydim, A.Y., Dunham, M.H. & Kumar, V. Location dependiente consulta processing, Actas del segundo taller internacional de ACM sobre ingeniería de datos para acceso inalámbrico y móvil, p.47-53, Santa Barbara, California, USA, 2001. [17] Xu, J., Lee, W.C., Tang., X. Índice exponencial: Un esquema de indexación distribuida para los datos sobre el aire. En Actas de la II Conferencia Internacional ACM/USENIX sobre Sistemas, Aplicaciones y Servicios Móviles (MobiSys04), Boston, MA, junio de 2004. 24 ",
            "error": []
        },
        "wireless broadcast datum mapping": {
            "translated_key": [],
            "translated_annotated_text": "Esquema de Indización basado en la ubicación para DAYS Debopam Acharya y Vijay Kumar 1 Computer Science and Informatics University of Missouri-Kansas City Kansas City, MO 64110 dargc(kumarv)@umkc.edu RESUMEN La difusión de datos a través de canales inalámbricos para transmitir información a los consumidores se está volviendo bastante común. Se han propuesto muchos planes de difusión, pero la mayoría de ellos llevan los datos a canales inalámbricos para consumo general. La difusión basada en push [1] es esencialmente asimétrica, es decir, el volumen de datos es mayor desde el servidor a los usuarios que desde los usuarios de vuelta al servidor. El esquema basado en el empuje requiere una indexación que indica cuándo se transmitirán los datos y su posición en la emisión. Latencia de acceso y tiempo de afinación son los dos parámetros principales que pueden utilizarse para evaluar un esquema de indexación. Dos de los importantes esquemas de indexación propuestos anteriormente se basaban en los árboles y los esquemas de indexación exponencial. Ninguno de estos planes pudo satisfacer los requisitos de los datos dependientes de la ubicación (DDL), que es una característica muy deseable de la difusión de datos. En este artículo, discutimos la emisión de LDD en nuestro proyecto DAta in Your Space (DAYS), y proponemos un esquema para la indexación de LDD. Argumentamos que este sistema, cuando se aplica a la DDTS, mejora significativamente el rendimiento en términos de tiempo de afinación en los esquemas antes mencionados. Demostramos nuestro argumento con la ayuda de resultados de simulación. Categorías y Descriptores sujetos H.3.1 [Sistemas de información]: Almacenamiento y recuperación de información - análisis e indexación de contenido; H.3.3 [Sistemas de información]: Almacenamiento y recuperación de información - búsqueda y recuperación de información. Términos generales Algoritmos, Rendimiento, Experimentación 1. INTRODUCCIÓN La difusión inalámbrica de datos es una forma económica y eficiente de poner los datos deseados a disposición de un gran número de usuarios móviles o estáticos. El modo de transferencia de datos es esencialmente asimétrico, es decir, la capacidad de transferencia de datos (comunicación descendente) del servidor al cliente (usuario móvil) es significativamente mayor que el cliente o usuario móvil al servidor (comunicación ascendente). La eficacia de un sistema de difusión de datos se determina por su capacidad para proporcionar a los usuarios los datos requeridos en cualquier lugar y en cualquier momento. Una de las mejores maneras de lograr esto es a través de la difusión de servicios basados en la ubicación altamente personalizados (LBS) que permite a los usuarios acceder a datos dependientes de la ubicación personalizada. Un ejemplo sería alguien usando su dispositivo móvil para buscar un restaurante vegetariano. La aplicación LBS interactuaría con otros componentes de tecnología de localización o utilizaría la entrada de usuarios móviles para determinar la ubicación de los usuarios y descargar la información sobre los restaurantes cercanos al usuario sintonizando el canal inalámbrico que está difundiendo LDD. Vemos un despliegue limitado de LBS por parte de algunos proveedores de servicios. Pero hay todos los indicios de que con el tiempo se resolverán algunos de los complejos problemas técnicos, como el marco de localización uniforme, el cálculo y el seguimiento de ubicaciones en todo tipo de lugares, el posicionamiento en diversos entornos, aplicaciones de localización innovadoras, etc., y LBS se convertirá en una instalación común y ayudará a mejorar la productividad del mercado y el confort del cliente. En nuestro proyecto llamado DAYS, utilizamos el mecanismo de difusión de datos inalámbricos para impulsar LDD a los usuarios y usuarios móviles monitorear y sintonizar el canal para encontrar y descargar los datos requeridos. Sin embargo, es probable que una emisión simple cause una degradación significativa del rendimiento de los dispositivos móviles con limitaciones energéticas, y una solución común a este problema es el uso de una indexación eficiente del aire. El enfoque de indexación almacena información de control que informa al usuario sobre la ubicación de los datos en la emisión y cómo y cuándo pudo acceder a ella. Un usuario móvil, por lo tanto, tiene un poco de tiempo libre para entrar en el modo de somnífero que conserva valiosa energía. También permite al usuario personalizar su propio dispositivo móvil afinando selectivamente la información de su elección. La eficiencia del acceso y la conservación de la energía son las dos cuestiones importantes para los sistemas de radiodifusión de datos. La eficiencia de acceso se refiere a la latencia experimentada cuando se inicia una solicitud hasta que se recibe la respuesta. Conservación de la energía [7, 10] se refiere al uso eficiente de la energía limitada del dispositivo móvil para acceder a los datos de radiodifusión. Dos parámetros que afectan a estos son el tiempo de afinación y la latencia de acceso. El tiempo de sintonización se refiere al tiempo durante el cual la unidad móvil (MU) permanece en estado activo para sintonizar el canal y descargar los datos requeridos. También se puede definir como el número de cubos sintonizados por el dispositivo móvil en estado activo para obtener los datos requeridos. La latencia de acceso puede definirse como el tiempo transcurrido desde que se ha emitido una solicitud hasta que se ha recibido la respuesta. 1 Esta investigación fue apoyada por una subvención de NSF IIS-0209170. En el pasado se han propuesto varios esquemas de indexación, entre los que destacan los basados en árboles y los esquemas de indexación exponencial [17]. Las principales desventajas de los esquemas basados en árboles son que se basan en estructuras arbóreas centralizadas. Para iniciar una búsqueda, la MU tiene que esperar hasta que llegue a la raíz del siguiente árbol de transmisión. Esto afecta significativamente el tiempo de afinación de la unidad móvil. Los esquemas exponenciales facilitan la replicación de índices compartiendo enlaces en diferentes árboles de búsqueda. Para las emisiones con un gran número de páginas, se ha demostrado que el esquema exponencial funciona de manera similar a los esquemas basados en árboles en términos de latencia de acceso. Además, la duración media de la emisión aumenta debido a la replicación del índice y esto puede causar un aumento significativo de la latencia del acceso. Ninguno de los sistemas de indexación mencionados es igualmente eficaz en la difusión de datos dependientes de la ubicación. Además de proporcionar baja latencia, carecen de propiedades que se utilizan para abordar los problemas de DDT. Proponemos un esquema de indexación en DAYS que se ocupa de algunos de estos problemas. Demostramos con resultados de simulación que nuestro esquema supera a algunos de los esquemas de indexación anteriores para la difusión de LDD en términos de tiempo de afinación. El resto del documento se presenta de la siguiente manera. En la sección 2, se analiza el trabajo anterior relacionado con la indexación de los datos de radiodifusión. La sección 3 describe nuestra arquitectura DAYS. Los datos dependientes de la ubicación, su generación y su posterior difusión se presentan en la sección 4. La sección 5 discute nuestro esquema de indexación en detalle. La simulación de nuestro esquema y su evaluación del desempeño se presenta en la sección 6. En la sección 7 se concluye el documento y se menciona la labor futura relacionada. 2. TRABAJO ANTERIOR Varias técnicas de indexación basadas en discos se han utilizado para la indexación de aire. Imielinski et al. [5, 6] aplicó el árbol del índice B+, donde los nodos de la hoja almacenan los tiempos de llegada de los ítems de datos. Se propuso el método de indexación distribuida para reproducir y distribuir eficientemente el árbol de índices en una emisión. Específicamente, el árbol índice se divide en una parte replicada y una parte no replicada. Cada emisión consiste en la parte replicada y la parte no replicada que indiza los elementos de datos inmediatamente después de ella. Como tal, cada nodo en la parte no replicada aparece sólo una vez en una emisión y, por lo tanto, reduce el costo de replicación y latencia de acceso, al tiempo que logra un buen tiempo de afinación. Chen et al. [2] y Shivakumar et al. [8] considera estructuras de árboles desequilibradas para optimizar el consumo de energía para el acceso a datos no uniformes. Estas estructuras minimizan el costo medio de búsqueda de índices reduciendo el número de búsquedas de datos en caliente a expensas de gastar más en datos en frío. Tan y Yu discutieron la organización de datos e índices bajo la emisión sesgada También se han sugerido métodos de Hashing y firma para la transmisión inalámbrica que admite consultas de igualdad [9]. En [5] se propuso un método flexible de indización. El índice flexible primero clasifica los elementos de datos en orden ascendente (o descendente) de los valores clave de búsqueda y luego los divide en segmentos p. El primer cubo en cada segmento de datos contiene un índice de control, que es un índice binario que asigna un valor clave dado al segmento que contiene esa clave, y un índice local, que es un índice de entrada m que asigna un valor clave dado a los cubos dentro del segmento actual. Al afinar los parámetros de p y m, los clientes móviles pueden lograr un buen tiempo de afinación o una buena latencia de acceso. Otra técnica de indexación propuesta es el esquema de indexación exponencial [17]. En este esquema, se utiliza un índice parametrizado, llamado índice exponencial, para optimizar la latencia del acceso o el tiempo de afinación. Facilita la replicación de índices mediante la vinculación de diferentes árboles de búsqueda. Todos los regímenes mencionados se han aplicado a datos que no están relacionados entre sí. Estos datos no relacionados pueden agruparse o no agruparse. Sin embargo, ninguno de ellos se ha ocupado específicamente de los requisitos de la DDT. Los datos dependientes de la ubicación son datos que están asociados con una ubicación. En la actualidad hay varias aplicaciones que se ocupan de la DDTS [13, 16]. Casi todos ellos representan LDD con la ayuda de estructuras jerárquicas [3, 4]. Esto se basa en la propiedad de contención de datos dependientes de la ubicación. La propiedad Containment ayuda a determinar la posición relativa de un objeto definiendo o identificando ubicaciones que contienen esos objetos. Las ubicaciones subordinadas están jerárquicamente relacionadas entre sí. Así, la propiedad Containment limita la gama de disponibilidad u operación de un servicio. Usamos esta propiedad de contención en nuestro esquema de indexación para indexar LDD. 3. DAYS ARCHITECTURE DAYS se ha conceptualizado para difundir datos tópicos y no tópicos a los usuarios en un espacio de difusión local y para aceptar consultas de usuarios individuales a nivel mundial. Los datos tópicos, por ejemplo, información meteorológica, información de tráfico, información de existencias, etc., cambian constantemente con el tiempo. Los datos no tópicos como hotel, restaurante, precios inmobiliarios, etc., no cambian tan a menudo. Así, imaginamos la presencia de dos tipos de distribución de datos: En el primer caso, el servidor empuja los datos a los usuarios locales a través de canales inalámbricos. El otro caso se refiere al servidor que envía los resultados de las consultas de los usuarios a través de canales inalámbricos de enlace descendente. Técnicamente, vemos la presencia de dos tipos de colas en el acceso basado en datos. Una es una cola muy cargada que contiene consultas cargadas globalmente. La otra es una cola relativamente ligera que consiste en consultas subidas localmente. La arquitectura DAYS [12], como se muestra en la figura 1, consiste en un servidor de datos, programador de transmisiones, coordinador de DAYS, red de satélites LEO para la entrega de datos a nivel mundial y un espacio de transmisión local. Los datos se introducen en el espacio de transmisión local para que los usuarios puedan sintonizarse con los canales inalámbricos para acceder a los datos. El espacio de transmisión local consiste en una torre de transmisión, unidades móviles y una red de máquinas de puesta en escena de datos llamadas subrogados. La estadificación de datos en sustitutos se ha investigado anteriormente como una técnica exitosa [12, 15] para los datos relacionados con los usuarios de caché. Creemos que la estadificación de datos se puede utilizar para reducir drásticamente el tiempo de latencia tanto para los datos de radiodifusión local como para las respuestas globales. La solicitud de consulta en los sustitutos puede utilizarse posteriormente para generar los patrones de popularidad que finalmente deciden el horario de emisión [12]. 18 Popularidad Comentarios de Surrogates for Broadcast Scheduler Local Space Broadcast Tower SurrogateMU MU MU Servidor de datosHorario de radiodifusiónDÍAS Coordinador Canal local de enlace descendente Canal global de enlace descendente Pull request cola cola Solicitud global cola Solicitud local cola Ubicación índice basado en Starbucks Plaza Kansas City Figura 1. Arquitectura DAYS Figura 2. Ubicación Estructura deStarbucks, Plaza 4. DATOS DEPENDIENTES DE LOCALIZACIÓN (LDD) Argumentamos que la incorporación de información de ubicación en la transmisión inalámbrica de datos puede disminuir significativamente la latencia de acceso. Esta propiedad se convierte en muy útil para la unidad móvil que tiene capacidad de almacenamiento y procesamiento limitada. Hay una variedad de aplicaciones para obtener información sobre tráfico, reservas de restaurantes y hoteles, comida rápida, gasolineras, oficina de correos, tiendas de comestibles, etc. Si estas aplicaciones se combinan con información de ubicación, entonces la búsqueda será rápida y altamente rentable. Una propiedad importante de las ubicaciones es Containment que ayuda a determinar la ubicación relativa de un objeto con respecto a su padre que contiene el objeto. Por lo tanto, Containment limita el rango de disponibilidad de un dato. Usamos esta propiedad en nuestro esquema de indexación. La base de datos contiene los contenidos transmitidos que se convierten en LDD [14] asociándolos con las ubicaciones respectivas para que puedan transmitirse de manera agrupada. El agrupamiento de LDD ayuda al usuario a localizar la información de manera eficiente y soporta la propiedad de contención. Presentamos un ejemplo para justificar nuestra propuesta. Ejemplo: Supongamos que un usuario emite una consulta Starbucks Coffee en Plaza por favor. para acceder a información sobre la sucursal Plaza de Starbucks Coffee en Kansas City. En el caso de la ubicación independiente establecido el sistema enumerará todas las cafeterías Starbucks en el área de Kansas City. Es evidente que esas respuestas aumentarán la latencia del acceso y no son deseables. Estos se pueden administrar de manera eficiente si el servidor tiene datos dependientes de la ubicación, es decir, una asignación entre los datos de una cafetería de Starbucks y su ubicación física. Además, para una consulta que incluya el rango de ubicaciones de Starbucks, bastará con una sola consulta solicitando ubicaciones para toda la región de Kansas City, como se muestra en la Figura 2. Esto ahorrará una enorme cantidad de ancho de banda al disminuir el número de mensajes y, al mismo tiempo, será útil para prevenir el cuello de botella de escalabilidad en una zona muy poblada. 4.1 Función de asignación para LDD El ejemplo justifica la necesidad de una función de asignación para procesar consultas dependientes de la ubicación. Esto será especialmente importante para las consultas basadas en la atracción en todo el mundo para las cuales la respuesta podría estar compuesta para diferentes partes del mundo. La función de mapeo es necesaria para construir el horario de emisión. Definimos Global Property Set (GPS) [11], Information Content (IC) set, and Location Jerarchy (LH) set where IC  GPS and LH  GPS to develop a mapping function. LH = {l1, l2, l3...,lk} donde li representan ubicaciones en el árbol de ubicación y IC = {ic1, ic2, ic3,...,icn} donde ici representan tipo de información. Por ejemplo, si tenemos tráfico, tiempo, y la información de stock están en transmisión entonces IC = {ictráfico, icweather, e icstock}. El esquema de asignación debe ser capaz de identificar y seleccionar un miembro IC y un nodo LH para (a) asociación correcta, (b) coincidencia de granularidad, (c) y condición de terminación. Por ejemplo, el clima • IC podría estar asociado con un país o un estado o una ciudad o un pueblo de LH. La coincidencia de granularidad entre el tiempo y un nodo LH es según el requisito del usuario. Así, con una granularidad gruesa la información meteorológica se asocia con un país para obtener el clima de los países y con la ciudad en una granularidad más fina. Si una ciudad es la mejor granularidad, entonces define la condición terminal para la asociación entre IC y LH para el tiempo. Esto significa que un usuario no puede obtener información meteorológica sobre la subdivisión de una ciudad. En realidad, el clima de una subdivisión no tiene ningún sentido. Desarrollamos un simple esquema de mapeo heurístico basado en las necesidades del usuario. Dejar IC = {m1, m2,m3.,..., mk}, donde mi representa su elemento y dejar LH = {n1, n2, n3,..., nl}, donde ni representa miembro LHs. Definimos GPS para IC (GPSIC)  GPS y para LH (GPSLH)  GPS como GPSIC = {P1, P2,..., Pn}, donde P1, P2, P3,..., Pn son propiedades de sus miembros y GPSLH = {Q1, Q2,..., Qm} donde Q1, Q2,..., Qm son propiedades de sus miembros. Las propiedades de un miembro particular de IC son un subconjunto de GPSIC. Generalmente es cierto que (conjunto de propiedades (miÃ3n IC) â € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € Por ejemplo, stock • IC y película • IC calificación no tienen ninguna propiedad en común. Asumimos que dos o más miembros del CI tienen al menos una propiedad geográfica común (es decir, lugar) porque DAYS transmite información sobre esas categorías, que están estrechamente vinculadas con un lugar. Por ejemplo, las acciones de una empresa están relacionadas con un país, el clima está relacionado con una ciudad o estado, etc. Definimos el subconjunto de propiedades de mio IC como PSm i ♥ mi • IC y PSm i = {P1, P2,..., Pr} donde r ≤ n. • Pr {Pr • PSm i → Pr • GPSIC} que implica que • i, PSm i  GPSIC. Las propiedades geográficas de este conjunto son indicativas de si mi IC puede ser mapeado a un solo nivel de granularidad (es decir. una sola ubicación) en LH o varios niveles de granularidad (es decir, más de un nodo en 19 de la jerarquía) en LH. ¿Cuántos y qué niveles de granularidad debe un mapa mi, depende del nivel en el que el proveedor de servicios quiere proporcionar información sobre el mi en cuestión. Del mismo modo, definimos un subconjunto de propiedades de los miembros de LH como PSn j Ł nj Ł LH que puede ser escrito como PSn j ={Q1, Q2, Q3,..., Qs} donde s ≤ m. Además, El proceso de mapeo de IC a LH es entonces identificar para algunos mxÃ3 IC uno o mÃ¡s nyÃ3 LH tal que PSmx Ã3 PSnv Esto significa que cuando mx mapea a ny y a todos los niños de ny si mx puede mapear a múltiples niveles de granularidad o mx mapea sólo a ny si mx puede mapear a un solo nivel de granularidad. Asumimos que los nuevos miembros pueden unirse y los antiguos miembros pueden salir de IC o LH en cualquier momento. La eliminación de miembros del espacio del CI es simple, pero la adición de miembros al espacio del CI es más restrictiva. Si queremos añadir un nuevo miembro al espacio IC, primero definimos un conjunto de propiedades para el nuevo miembro: PSmnew_m ={P1, P2, P3,..., Pt} y lo añadimos al CI sólo si la condición: Este régimen tiene una ventaja adicional al permitir a los proveedores de servicios de información controlar el tipo de información que desean proporcionar a los usuarios. Presentamos el siguiente ejemplo para ilustrar el concepto de mapeo. IC = {Tráfico, Stock, Restaurante, Tiempo, Fechas importantes de la historia, Condiciones de la carretera} LH = {País, Estado, Ciudad, Código postal, Principales carreteras} GPSIC = {Surface-mobility, Roads, High, Low, Italian-food, StateName, Temp, CityName, Seat-disponibilidad, Zip, Traffic-jams, Además, PS(ICStock) indicó que Stock solo puede mapear a un solo país. Cuando consideramos el miembro Tráfico del espacio IC, sólo PS(ICTraffic) â € ¢ PScity â € TM. Como PS(ICTRAFFIC) indica que Traffic puede mapear a una sola ubicación, solo mapea a City y a ninguno de sus hijos. Ahora bien, a diferencia de Stock, el mapeo del tráfico con las principales carreteras, que es un hijo de la ciudad, es significativo. Sin embargo, los proveedores de servicios tienen derecho a controlar los niveles de granularidad a los que desean proporcionar información sobre un miembro del espacio IC. PS(ICRoad conditions) • PSState  y PS(ICRoad conditions) • PSCity. Así que las condiciones de la carretera son mapas al Estado, así como a la ciudad. Como PS(ICRoad conditions) indica que las condiciones de la carretera pueden mapear a múltiples niveles de granularidad, las condiciones de la carretera también mapearán a Zip Code y las principales carreteras, que son los niños del Estado y la ciudad. Del mismo modo, los mapas del restaurante sólo al código postal, y los mapas meteorológicos al estado, la ciudad y sus hijos, las carreteras principales y el código postal. 5. ESQUEMA DE ÍNDICE BASADA EN LOCALIZACIÓN Esta sección discute nuestro esquema de indexación basado en la ubicación (LBIS). El esquema está diseñado para ajustarse a la emisión LDD en nuestro proyecto DAYS. Como se discutió anteriormente, utilizamos la propiedad de contención de LDD en el esquema de indexación. Esto limita significativamente la búsqueda de nuestros datos requeridos a una parte particular de la transmisión. Por lo tanto, argumentamos que el esquema proporciona tiempo de afinación limitado. Describimos la arquitectura de nuestro esquema de indexación. Nuestro esquema contiene cubos de datos separados y cubos de índices. Los cubos de índice son de dos tipos. El primer tipo se llama el índice Mayor. El índice Major proporciona información sobre los tipos de datos transmitidos. Por ejemplo, si tenemos la intención de transmitir información como Entretenimiento, Tiempo, Tráfico, etc., entonces el índice principal apunta a estos tipos principales de información y/o sus principales subtipos de información, el número de subtipos principales variando de una información a otra. Esto limita estrictamente el número de accesos a un índice principal. El índice Major nunca apunta a los datos originales. Señala a los subíndices llamados el índice Menor. Los índices menores son los índices que realmente apuntan a los datos originales. Llamamos a estos indicadores menores como punteros de ubicación, ya que apunta a los datos que están asociados con una ubicación. Por lo tanto, nuestra búsqueda de datos incluye el acceso a un índice mayor y algunos índices menores, el número de índice menor variando dependiendo del tipo de información. Por lo tanto, nuestro esquema de indexación tiene en cuenta la naturaleza jerárquica del LDD, la propiedad Containment, y requiere que nuestro programa de transmisión se agrupe en función del tipo de datos y la ubicación. La estructura de la jerarquía de ubicación requiere el uso de diferentes tipos de índice en diferentes niveles. La estructura y las posiciones del índice dependen estrictamente de la jerarquía de ubicación descrita anteriormente en nuestro esquema de asignación. Ilustramos la implementación de nuestro esquema con un ejemplo. Posteriormente se mencionan las normas para la elaboración del índice. 20 A1 Entretenimiento Restaurante Película A2 A3 A4 R1 R2 R3 R4 R5 R6 R7 R8 Tiempo KC SL JC SF Entretenimiento R1 R2 R3 R4 R4 R5 R6 R7 R8 KC SL JC SF (A, R, NEXT = 8) 3, R5 4, R7 Tipo (S, L) ER W E EM (1, 4) (5, Información cartográfica de ubicación para radiodifusión Figura 4. Datos junto con el índice basado en la ubicación Ejemplo: Supongamos que nuestro contenido de transmisión contiene ICentertainment y ICweather que se representa como se muestra en la Fig. 3. Ai representa las áreas de la ciudad y Ri representa las carreteras en un área determinada. Las hojas de la estructura meteorológica representan cuatro ciudades. La estructura del índice se indica en la Fig. 4 que muestra la posición del índice mayor y menor y los datos en el horario de emisión. Proponemos las siguientes reglas para la creación del programa de emisión indexado por aire: • Se crean el índice mayor y el índice menor. • El índice principal contiene la posición y el rango de diferentes tipos de ítems de datos (Weather and Entertainment, Figura 3) y sus categorías. Las subcategorías de Entretenimiento, Cine y Restaurante, también están en el índice. Así, el índice principal contiene Entretenimiento (E), Entretenimiento-Movie (EM), Entretenimiento-Restaurante (ER), y Tiempo (W). La tupla (S, L) representa la posición inicial (S) del elemento de datos y L representa el rango del elemento en términos de número de cubos de datos. • El índice menor contiene las variables A, R y un puntero Siguiente. En nuestro ejemplo (Figura 3), la carretera R representa el primer nodo del área A. El índice menor se utiliza para apuntar a cubos de datos reales presentes en los niveles más bajos de la jerarquía. En cambio, el índice principal apunta a una gama más amplia de ubicaciones, por lo que contiene información sobre las principales y subcategorías de datos. • La información del índice no se incorpora en los cubos de datos. Los cubos de índice están separados que contienen sólo la información de control. • El número de cubos índice m=#(IC), IC = {ic1, ic2, ic3,...,icn} donde ici representa el tipo de información y # representa la cardinalidad del conjunto de contenido de información IC. En este ejemplo, IC= {icMovie, icWeather, icRestaurant} y así #(IC) =3. Por lo tanto, el número de cubos índice principales es 3. • El mecanismo para resolver la consulta está presente en el coordinador de java en MU. Por ejemplo, si una consulta Q se presenta como Q (Entretenimiento, Película, Road_1), entonces la búsqueda resultante será para la información EM en el índice principal. Nosotros decimos, Q EM. Nuestro índice propuesto funciona de la siguiente manera: Supongamos que una MU emite una consulta que está representada por Java Coordinador presente en la MU como información de restaurante en la carretera 7. Esto es resuelto por el coordinador como Q ER. Esto significa que uno tiene que buscar la unidad de índice ER en el índice principal. Supongamos que el MU entra en el canal en R2. El primer índice que recibe es un índice menor después de R2. En este índice, el valor de la variable Siguiente = 4, lo que significa que el siguiente índice mayor está presente después del cubo 4. La MU puede entrar en modo somnoliento. Se activa después del cubo 4 y recibe el índice principal. Busca información de ER que es la primera entrada en este índice. Ahora es seguro que la MU obtendrá la posición del cubo de datos en el índice menor contiguo. La segunda unidad en el índice menor representa la posición de los datos requeridos R7. Indica que el cubo de datos es el primer cubo en el Área 4. El MU vuelve a entrar en modo somnífero y se activa después del cubo 6. Obtiene los datos necesarios en el siguiente cubo. Presentamos el algoritmo para buscar el Índice basado en la ubicación. Algoritmo 1 Índice basado en la ubicación Buscar en DAYS 1. Escanear la transmisión para el siguiente cubo índice, encontrado=falso 2. Mientras que (no se encuentra) hacer 3. si cubo es el índice mayor entonces 4. Encuentra el Tipo & Tupla (S, L) 5. si S es mayor que 1, entra en modo Doze durante S segundos 6. termina si 7. Despierta en el cubo Sth y observa el índice menor 8. termina si 9. si el cubo es índice menor entonces 10. si TypeRequest no es igual a Typefound y (A,R)Solicitud no es igual a (A,R)found entonces 11. Vaya al modo de doze hasta el SIGUIENTE y repita desde el paso 3 12. terminar si 13. de lo contrario encontrar entrada en Índice Menor que apunta a los datos 14. Calcular la hora de llegada T del cubo de datos 15. Entra en modo somnífero hasta la T 16. Despierta en T y accede a los datos, encontrados = verdadero 17. fin de lo contrario 18. final si 19. final Mientras que 21 6. EVALUACIÓN DE LA EJECUCIÓN La conservación de la energía es la principal preocupación cuando tratamos de acceder a los datos de la transmisión inalámbrica. Un sistema eficiente debe permitir al dispositivo móvil acceder a los datos que necesita manteniéndose activo durante un período mínimo de tiempo. Esto ahorraría una cantidad considerable de energía. Dado que los elementos se distribuyen en función de los tipos y se asignan a ubicaciones adecuadas, argumentamos que nuestra transmisión se ocupa de los tipos de datos agrupados. La unidad móvil tiene que acceder a un índice mayor y a un índice menor relativamente menor para obtener información sobre la hora de llegada de los datos. Esto contrasta con el esquema exponencial donde los índices son de tamaños iguales. El ejemplo discutido y Algoritmo 1 revela que para acceder a cualquier dato, necesitamos acceder al índice mayor sólo una vez seguido por uno o más accesos al índice menor. El número de accesos menores al índice depende del número de ubicaciones internas. Como el número de ubicaciones internas varía de elemento a elemento (por ejemplo, Weather está generalmente asociado con una ciudad mientras que el tráfico se granula hasta las carreteras principales y menores de una ciudad), argumentamos que la estructura de la información de localización mapeada puede ser visualizada como un bosque que es una colección de árboles generales, el número de árboles generales dependiendo de los tipos de información transmitida y la profundidad de un árbol dependiendo de la granularidad de la información de Para nuestros experimentos, asumimos el bosque como una colección de árboles M-ary equilibrados. Asumimos además que los árboles de la arteria M están llenos al asumir la presencia de nodos ficticios en diferentes niveles de un árbol. Así, si el número de ítems de datos es d y la altura del árbol es m, entonces n= (m*d-1)/(m-1) donde n es el número de vértices en el árbol e i= (d-1)/(m-1) donde i es el número de vértices internos. El tiempo de afinación para un ítem de datos implica 1 unidad de tiempo requerido para acceder al índice principal más el tiempo requerido para acceder a los ítems de datos presentes en las hojas del árbol. Por lo tanto, el tiempo de sintonización con d ítems de datos es t = logmd+1 Podemos decir que el tiempo de sintonización está limitado por O(logmd). Comparamos nuestro esquema con el esquema de indexación distribuida y exponencial. Asumimos una emisión plana y el número de páginas que varían de 5000 a 25000. Los diversos parámetros de simulación se muestran en la Tabla 1. La Figura 5-8 muestra los tiempos relativos de afinación de tres algoritmos de indexación, es decir, el LBIS, esquema exponencial y el esquema de árbol distribuido. La Figura 5 muestra el resultado para el número de nodos internos de ubicación = 3. Podemos ver que LBIS supera significativamente a los otros esquemas. El tiempo de afinación en LBIS varía de aproximadamente 6,8 a 8. Este gran tiempo de afinación se debe al hecho de que después de alcanzar el índice menor más bajo, la MU puede tener que acceder a pocos cubos secuencialmente para obtener el cubo de datos requerido. Podemos ver que el tiempo de afinación tiende a ser estable a medida que aumenta la duración de la emisión. En la figura 6 se considera m= 4. Aquí podemos ver que el exponencial y el rendimiento distribuido casi de manera similar, aunque el primero parece funcionar ligeramente mejor a medida que aumenta la longitud de emisión. Un patrón muy interesante es visible en la figura 7. Para las emisiones de menor tamaño, el LBIS parece tener un tiempo de afinación mayor que los otros dos esquemas. Pero a medida que aumenta la duración de la emisión, es claramente visible que el LBIS supera a los otros dos esquemas. La indexación del árbol distribuido muestra un comportamiento similar al del LBIS. El tiempo de afinación en LBIS sigue siendo bajo porque el algoritmo permite a la MU saltarse algunos Índices Menores intermedios. Esto permite que la MU se mueva a niveles más bajos directamente después de entrar en modo activo, ahorrando así energía valiosa. Esta acción no es posible en la indexación de árboles distribuidos y por lo tanto podemos observar que su tiempo de afinación es más que el esquema LBIS, aunque tiene mejores resultados que el esquema exponencial. La Figura 8, en contraste, nos muestra que el tiempo de afinación en LBIS, aunque menor que los otros dos esquemas, tiende a aumentar bruscamente a medida que la longitud de emisión se hace mayor que las 15000 páginas. Esto puede atribuirse tanto al aumento del tiempo necesario para escanear los Índices Menores intermedios como a la duración de la emisión. Pero podemos observar que la pendiente de la curva LBIS es significativamente menor que las otras dos curvas. Tabla 1 Parámetros de simulación P Valores de definición N Número de datos Elementos 5000 - 25000 m Número de nodos de ubicación internos 3, 4, 5, 6 B Capacidad de cubo sin índice (para índice exponencial) 10,64,128,256 i Base de índice para índice exponencial 2,4,6,8 k Tamaño del índice para árbol distribuido 8 bytes Los resultados de la simulación establecen algunos hechos sobre nuestro esquema de indexación basado en la ubicación. En la mayoría de los casos, el sistema funciona mejor que los otros dos en términos de tiempo de afinación. A medida que aumenta la duración de la emisión, después de cierto punto, aunque el tiempo de afinación aumenta como resultado de factores que hemos descrito antes, el esquema siempre funciona mejor que los otros dos esquemas. Debido al límite prescrito del número de páginas en el papel, no podemos mostrar más resultados. Pero estos resultados omitidos muestran una tendencia similar a la de los resultados representados en la figura 5-8. 7. CONCLUSIÓN Y FUTURO TRABAJO En este trabajo hemos presentado un esquema para el mapeo de datos de radiodifusión inalámbrica con sus ubicaciones. Hemos presentado un ejemplo para mostrar cómo la estructura jerárquica del árbol de ubicación mapea con los datos para crear LDD. Hemos presentado un esquema llamado LBIS para indexar este LDD. Hemos utilizado la propiedad de contención de LDD en el esquema que limita la búsqueda a un estrecho rango de datos en la emisión, ahorrando así energía valiosa en el dispositivo. La asignación de datos con ubicaciones y el esquema de indexación se utilizará en nuestro proyecto DAYS para crear la arquitectura basada en empuje. El LBIS se ha comparado con otros dos sistemas de indexación prominentes, a saber, el sistema de indexación de árboles distribuidos y el sistema de indexación exponencial. En nuestras simulaciones demostramos que el esquema LBIS tiene el menor tiempo de afinación para las emisiones que tienen un gran número de páginas, ahorrando así una valiosa potencia de batería en la MU. 22 En el trabajo futuro tratamos de incorporar la arquitectura basada en el tirón en nuestro proyecto DAYS. Los datos del servidor están disponibles para el acceso de los usuarios globales. Esto se puede hacer poniendo una solicitud al servidor de origen. La consulta en este caso es una consulta global. Se transfiere del servidor de origen de los usuarios al servidor de destino mediante el uso de satélites LEO. Tenemos la intención de utilizar nuestro esquema de LDD y arquitectura de estadificación de datos en la arquitectura basada en el tirón. Demostraremos que el esquema de LDD junto con la arquitectura de estadificación de datos mejora significativamente la latencia para la consulta global y local. 8. REFERENCIAS [1] Acharya, S., Alonso, R. Franklin, M y Zdonik S. Disco de transmisión: Gestión de datos para entornos de comunicación asimétricos. En Actas de la Conferencia de la ACM SIGMOD sobre Gestión de Datos, págs. 199 a 210, San José, CA, mayo de 1995. [2] Chen, M.S.,Wu, K.L. y Yu, P. S. Optimizando la asignación de índices para la difusión secuencial de datos en la computación móvil inalámbrica. IEEE Transactions on Knowledge and Data Engineering (TKDE), 15(1):161-173, enero/febrero de 2003. Gráfico 5 Tamaño de la transmisión (# cubos) Dist tree Expo LBIS Figura 6. Tamaño de la transmisión (# cubos) Dist tree Expo LBIS Figura 7. Tamaño de la transmisión (# cubos) Dist tree Expo LBIS Figura 8. Tamaño de la transmisión (# cubos) Árbol dist Expo LBIS Tiempo medio de afinación Tiempo medio de afinación Tiempo medio de afinación 23 [3] Hu, Q. L., Lee, D. L. y Lee, W.C. Evaluación del rendimiento de un sistema inalámbrico de difusión jerárquica de datos. En Actas de la Quinta Conferencia Internacional Anual de ACM sobre Computación y Redes Móviles (MobiCom99), págs. 163 a 173, Seattle, WA, agosto de 1999. [4] Hu, Q. L. Lee, W.C. y Lee, D. L. Power consultas conservadoras de múltiples atributos en la transmisión de datos. En Actas de la 16a Conferencia Internacional sobre Ingeniería de Datos (ICDE00), páginas 157-166, San Diego, CA, febrero de 2000. [5] Imielinski, T., Viswanathan, S. y Badrinath. B. R. Filtrado eficiente de energía de los datos en el aire. En Actas de la Cuarta Conferencia Internacional sobre Tecnología de Bases de Datos Ampliadas (EDBT94), págs. 245 a 258, Cambridge, Reino Unido, marzo de 1994. [6] Imielinski, T., Viswanathan, S. y Badrinath. B. R. Datos sobre el aire - Organización y acceso. Operaciones de IEEE en Ingeniería de Conocimientos e Datos (TKDE), 9(3):353-372, mayo/junio de 1997. [7] Shih, E., Bahl, P. y Sinclair, M. J. Wake on wireless: Una estrategia de ahorro de energía impulsada por eventos para dispositivos operados por baterías. En Actas de la 8a Conferencia Internacional Anual de ACM sobre Computación y Redes Móviles (MobiCom02), págs. 160 a 171, Atlanta, GA, septiembre de 2002. [8] Shivakumar N. y Venkatasubramanian, S. Indización energéticamente eficiente para la difusión de información en sistemas inalámbricos. ACM/Baltzer Journal of Mobile Networks and Applications (MONET), 1(4):433-446, diciembre de 1996. [9] Tan K. L. y Yu, J. X. Filtración energéticamente eficiente de emisiones no uniformes. En Actas de la 16a Conferencia Internacional sobre Sistemas de Computación Distribuida (ICDCS96), págs. 520 a 527, Hong Kong, mayo de 1996. [10] Viredaz, M. A., Brakmo, L. S. y Hamburgen, W. R. Gestión de energía en dispositivos portátiles. ACM Coue, 1(7):44-52, octubre de 2003. [11] Garg, N. Kumar, V., & Dunham, M.H. Mapeo e indización de información en DAYS, 6o Taller Internacional sobre Movilidad en Bases de Datos y Sistemas Distribuidos, en conjunción con la 14a Conferencia Internacional sobre Aplicaciones de Bases de Datos y Sistemas Expertos, 1o a 5 de septiembre, Praga, República Checa, 2003. [12] Acharya D., Kumar, V., & Dunham, M.H. InfoSpace: Sistema de difusión de datos públicos híbrido y adaptativo para computación ubicua. Aceptado para publicación en el número especial de Pervasive Computing. Wiley Journal for Wireless Communications and Mobile Computing, 2004. [13] Acharya D., Kumar, V., & Prabhu, N. Descubriendo y usando Servicios Web en M-Commerce, Proceedings for 5th VLDB Workshop on Technologies for E-Services, Toronto, Canada,2004. [14] Acharya D., Kumar, V. Indexing Location Depending Data in broadcast en ambiente. Aceptado para su publicación, número especial de JDIM sobre Gestión de Datos Distribuidos, 2005. [15] Flinn, J., Sinnamohideen, S., & Satyanarayan, M. Data Staging on No Trusted Surrogates, Intel Research, Pittsburg, Unpublished Report, 2003. [16] Seydim, A.Y., Dunham, M.H. & Kumar, V. Location dependiente consulta processing, Actas del segundo taller internacional de ACM sobre ingeniería de datos para acceso inalámbrico y móvil, p.47-53, Santa Barbara, California, USA, 2001. [17] Xu, J., Lee, W.C., Tang., X. Índice exponencial: Un esquema de indexación distribuida para los datos sobre el aire. En Actas de la II Conferencia Internacional ACM/USENIX sobre Sistemas, Aplicaciones y Servicios Móviles (MobiSys04), Boston, MA, junio de 2004. 24 ",
            "error": []
        },
        "wireless datum broadcast": {
            "translated_key": [],
            "translated_annotated_text": "Esquema de Indización basado en la ubicación para DAYS Debopam Acharya y Vijay Kumar 1 Computer Science and Informatics University of Missouri-Kansas City Kansas City, MO 64110 dargc(kumarv)@umkc.edu RESUMEN La difusión de datos a través de canales inalámbricos para transmitir información a los consumidores se está volviendo bastante común. Se han propuesto muchos planes de difusión, pero la mayoría de ellos llevan los datos a canales inalámbricos para consumo general. La difusión basada en push [1] es esencialmente asimétrica, es decir, el volumen de datos es mayor desde el servidor a los usuarios que desde los usuarios de vuelta al servidor. El esquema basado en el empuje requiere una indexación que indica cuándo se transmitirán los datos y su posición en la emisión. Latencia de acceso y tiempo de afinación son los dos parámetros principales que pueden utilizarse para evaluar un esquema de indexación. Dos de los importantes esquemas de indexación propuestos anteriormente se basaban en los árboles y los esquemas de indexación exponencial. Ninguno de estos planes pudo satisfacer los requisitos de los datos dependientes de la ubicación (DDL), que es una característica muy deseable de la difusión de datos. En este artículo, discutimos la emisión de LDD en nuestro proyecto DAta in Your Space (DAYS), y proponemos un esquema para la indexación de LDD. Argumentamos que este sistema, cuando se aplica a la DDTS, mejora significativamente el rendimiento en términos de tiempo de afinación en los esquemas antes mencionados. Demostramos nuestro argumento con la ayuda de resultados de simulación. Categorías y Descriptores sujetos H.3.1 [Sistemas de información]: Almacenamiento y recuperación de información - análisis e indexación de contenido; H.3.3 [Sistemas de información]: Almacenamiento y recuperación de información - búsqueda y recuperación de información. Términos generales Algoritmos, Rendimiento, Experimentación 1. INTRODUCCIÓN La difusión inalámbrica de datos es una forma económica y eficiente de poner los datos deseados a disposición de un gran número de usuarios móviles o estáticos. El modo de transferencia de datos es esencialmente asimétrico, es decir, la capacidad de transferencia de datos (comunicación descendente) del servidor al cliente (usuario móvil) es significativamente mayor que el cliente o usuario móvil al servidor (comunicación ascendente). La eficacia de un sistema de difusión de datos se determina por su capacidad para proporcionar a los usuarios los datos requeridos en cualquier lugar y en cualquier momento. Una de las mejores maneras de lograr esto es a través de la difusión de servicios basados en la ubicación altamente personalizados (LBS) que permite a los usuarios acceder a datos dependientes de la ubicación personalizada. Un ejemplo sería alguien usando su dispositivo móvil para buscar un restaurante vegetariano. La aplicación LBS interactuaría con otros componentes de tecnología de localización o utilizaría la entrada de usuarios móviles para determinar la ubicación de los usuarios y descargar la información sobre los restaurantes cercanos al usuario sintonizando el canal inalámbrico que está difundiendo LDD. Vemos un despliegue limitado de LBS por parte de algunos proveedores de servicios. Pero hay todos los indicios de que con el tiempo se resolverán algunos de los complejos problemas técnicos, como el marco de localización uniforme, el cálculo y el seguimiento de ubicaciones en todo tipo de lugares, el posicionamiento en diversos entornos, aplicaciones de localización innovadoras, etc., y LBS se convertirá en una instalación común y ayudará a mejorar la productividad del mercado y el confort del cliente. En nuestro proyecto llamado DAYS, utilizamos el mecanismo de difusión de datos inalámbricos para impulsar LDD a los usuarios y usuarios móviles monitorear y sintonizar el canal para encontrar y descargar los datos requeridos. Sin embargo, es probable que una emisión simple cause una degradación significativa del rendimiento de los dispositivos móviles con limitaciones energéticas, y una solución común a este problema es el uso de una indexación eficiente del aire. El enfoque de indexación almacena información de control que informa al usuario sobre la ubicación de los datos en la emisión y cómo y cuándo pudo acceder a ella. Un usuario móvil, por lo tanto, tiene un poco de tiempo libre para entrar en el modo de somnífero que conserva valiosa energía. También permite al usuario personalizar su propio dispositivo móvil afinando selectivamente la información de su elección. La eficiencia del acceso y la conservación de la energía son las dos cuestiones importantes para los sistemas de radiodifusión de datos. La eficiencia de acceso se refiere a la latencia experimentada cuando se inicia una solicitud hasta que se recibe la respuesta. Conservación de la energía [7, 10] se refiere al uso eficiente de la energía limitada del dispositivo móvil para acceder a los datos de radiodifusión. Dos parámetros que afectan a estos son el tiempo de afinación y la latencia de acceso. El tiempo de sintonización se refiere al tiempo durante el cual la unidad móvil (MU) permanece en estado activo para sintonizar el canal y descargar los datos requeridos. También se puede definir como el número de cubos sintonizados por el dispositivo móvil en estado activo para obtener los datos requeridos. La latencia de acceso puede definirse como el tiempo transcurrido desde que se ha emitido una solicitud hasta que se ha recibido la respuesta. 1 Esta investigación fue apoyada por una subvención de NSF IIS-0209170. En el pasado se han propuesto varios esquemas de indexación, entre los que destacan los basados en árboles y los esquemas de indexación exponencial [17]. Las principales desventajas de los esquemas basados en árboles son que se basan en estructuras arbóreas centralizadas. Para iniciar una búsqueda, la MU tiene que esperar hasta que llegue a la raíz del siguiente árbol de transmisión. Esto afecta significativamente el tiempo de afinación de la unidad móvil. Los esquemas exponenciales facilitan la replicación de índices compartiendo enlaces en diferentes árboles de búsqueda. Para las emisiones con un gran número de páginas, se ha demostrado que el esquema exponencial funciona de manera similar a los esquemas basados en árboles en términos de latencia de acceso. Además, la duración media de la emisión aumenta debido a la replicación del índice y esto puede causar un aumento significativo de la latencia del acceso. Ninguno de los sistemas de indexación mencionados es igualmente eficaz en la difusión de datos dependientes de la ubicación. Además de proporcionar baja latencia, carecen de propiedades que se utilizan para abordar los problemas de DDT. Proponemos un esquema de indexación en DAYS que se ocupa de algunos de estos problemas. Demostramos con resultados de simulación que nuestro esquema supera a algunos de los esquemas de indexación anteriores para la difusión de LDD en términos de tiempo de afinación. El resto del documento se presenta de la siguiente manera. En la sección 2, se analiza el trabajo anterior relacionado con la indexación de los datos de radiodifusión. La sección 3 describe nuestra arquitectura DAYS. Los datos dependientes de la ubicación, su generación y su posterior difusión se presentan en la sección 4. La sección 5 discute nuestro esquema de indexación en detalle. La simulación de nuestro esquema y su evaluación del desempeño se presenta en la sección 6. En la sección 7 se concluye el documento y se menciona la labor futura relacionada. 2. TRABAJO ANTERIOR Varias técnicas de indexación basadas en discos se han utilizado para la indexación de aire. Imielinski et al. [5, 6] aplicó el árbol del índice B+, donde los nodos de la hoja almacenan los tiempos de llegada de los ítems de datos. Se propuso el método de indexación distribuida para reproducir y distribuir eficientemente el árbol de índices en una emisión. Específicamente, el árbol índice se divide en una parte replicada y una parte no replicada. Cada emisión consiste en la parte replicada y la parte no replicada que indiza los elementos de datos inmediatamente después de ella. Como tal, cada nodo en la parte no replicada aparece sólo una vez en una emisión y, por lo tanto, reduce el costo de replicación y latencia de acceso, al tiempo que logra un buen tiempo de afinación. Chen et al. [2] y Shivakumar et al. [8] considera estructuras de árboles desequilibradas para optimizar el consumo de energía para el acceso a datos no uniformes. Estas estructuras minimizan el costo medio de búsqueda de índices reduciendo el número de búsquedas de datos en caliente a expensas de gastar más en datos en frío. Tan y Yu discutieron la organización de datos e índices bajo la emisión sesgada También se han sugerido métodos de Hashing y firma para la transmisión inalámbrica que admite consultas de igualdad [9]. En [5] se propuso un método flexible de indización. El índice flexible primero clasifica los elementos de datos en orden ascendente (o descendente) de los valores clave de búsqueda y luego los divide en segmentos p. El primer cubo en cada segmento de datos contiene un índice de control, que es un índice binario que asigna un valor clave dado al segmento que contiene esa clave, y un índice local, que es un índice de entrada m que asigna un valor clave dado a los cubos dentro del segmento actual. Al afinar los parámetros de p y m, los clientes móviles pueden lograr un buen tiempo de afinación o una buena latencia de acceso. Otra técnica de indexación propuesta es el esquema de indexación exponencial [17]. En este esquema, se utiliza un índice parametrizado, llamado índice exponencial, para optimizar la latencia del acceso o el tiempo de afinación. Facilita la replicación de índices mediante la vinculación de diferentes árboles de búsqueda. Todos los regímenes mencionados se han aplicado a datos que no están relacionados entre sí. Estos datos no relacionados pueden agruparse o no agruparse. Sin embargo, ninguno de ellos se ha ocupado específicamente de los requisitos de la DDT. Los datos dependientes de la ubicación son datos que están asociados con una ubicación. En la actualidad hay varias aplicaciones que se ocupan de la DDTS [13, 16]. Casi todos ellos representan LDD con la ayuda de estructuras jerárquicas [3, 4]. Esto se basa en la propiedad de contención de datos dependientes de la ubicación. La propiedad Containment ayuda a determinar la posición relativa de un objeto definiendo o identificando ubicaciones que contienen esos objetos. Las ubicaciones subordinadas están jerárquicamente relacionadas entre sí. Así, la propiedad Containment limita la gama de disponibilidad u operación de un servicio. Usamos esta propiedad de contención en nuestro esquema de indexación para indexar LDD. 3. DAYS ARCHITECTURE DAYS se ha conceptualizado para difundir datos tópicos y no tópicos a los usuarios en un espacio de difusión local y para aceptar consultas de usuarios individuales a nivel mundial. Los datos tópicos, por ejemplo, información meteorológica, información de tráfico, información de existencias, etc., cambian constantemente con el tiempo. Los datos no tópicos como hotel, restaurante, precios inmobiliarios, etc., no cambian tan a menudo. Así, imaginamos la presencia de dos tipos de distribución de datos: En el primer caso, el servidor empuja los datos a los usuarios locales a través de canales inalámbricos. El otro caso se refiere al servidor que envía los resultados de las consultas de los usuarios a través de canales inalámbricos de enlace descendente. Técnicamente, vemos la presencia de dos tipos de colas en el acceso basado en datos. Una es una cola muy cargada que contiene consultas cargadas globalmente. La otra es una cola relativamente ligera que consiste en consultas subidas localmente. La arquitectura DAYS [12], como se muestra en la figura 1, consiste en un servidor de datos, programador de transmisiones, coordinador de DAYS, red de satélites LEO para la entrega de datos a nivel mundial y un espacio de transmisión local. Los datos se introducen en el espacio de transmisión local para que los usuarios puedan sintonizarse con los canales inalámbricos para acceder a los datos. El espacio de transmisión local consiste en una torre de transmisión, unidades móviles y una red de máquinas de puesta en escena de datos llamadas subrogados. La estadificación de datos en sustitutos se ha investigado anteriormente como una técnica exitosa [12, 15] para los datos relacionados con los usuarios de caché. Creemos que la estadificación de datos se puede utilizar para reducir drásticamente el tiempo de latencia tanto para los datos de radiodifusión local como para las respuestas globales. La solicitud de consulta en los sustitutos puede utilizarse posteriormente para generar los patrones de popularidad que finalmente deciden el horario de emisión [12]. 18 Popularidad Comentarios de Surrogates for Broadcast Scheduler Local Space Broadcast Tower SurrogateMU MU MU Servidor de datosHorario de radiodifusiónDÍAS Coordinador Canal local de enlace descendente Canal global de enlace descendente Pull request cola cola Solicitud global cola Solicitud local cola Ubicación índice basado en Starbucks Plaza Kansas City Figura 1. Arquitectura DAYS Figura 2. Ubicación Estructura deStarbucks, Plaza 4. DATOS DEPENDIENTES DE LOCALIZACIÓN (LDD) Argumentamos que la incorporación de información de ubicación en la transmisión inalámbrica de datos puede disminuir significativamente la latencia de acceso. Esta propiedad se convierte en muy útil para la unidad móvil que tiene capacidad de almacenamiento y procesamiento limitada. Hay una variedad de aplicaciones para obtener información sobre tráfico, reservas de restaurantes y hoteles, comida rápida, gasolineras, oficina de correos, tiendas de comestibles, etc. Si estas aplicaciones se combinan con información de ubicación, entonces la búsqueda será rápida y altamente rentable. Una propiedad importante de las ubicaciones es Containment que ayuda a determinar la ubicación relativa de un objeto con respecto a su padre que contiene el objeto. Por lo tanto, Containment limita el rango de disponibilidad de un dato. Usamos esta propiedad en nuestro esquema de indexación. La base de datos contiene los contenidos transmitidos que se convierten en LDD [14] asociándolos con las ubicaciones respectivas para que puedan transmitirse de manera agrupada. El agrupamiento de LDD ayuda al usuario a localizar la información de manera eficiente y soporta la propiedad de contención. Presentamos un ejemplo para justificar nuestra propuesta. Ejemplo: Supongamos que un usuario emite una consulta Starbucks Coffee en Plaza por favor. para acceder a información sobre la sucursal Plaza de Starbucks Coffee en Kansas City. En el caso de la ubicación independiente establecido el sistema enumerará todas las cafeterías Starbucks en el área de Kansas City. Es evidente que esas respuestas aumentarán la latencia del acceso y no son deseables. Estos se pueden administrar de manera eficiente si el servidor tiene datos dependientes de la ubicación, es decir, una asignación entre los datos de una cafetería de Starbucks y su ubicación física. Además, para una consulta que incluya el rango de ubicaciones de Starbucks, bastará con una sola consulta solicitando ubicaciones para toda la región de Kansas City, como se muestra en la Figura 2. Esto ahorrará una enorme cantidad de ancho de banda al disminuir el número de mensajes y, al mismo tiempo, será útil para prevenir el cuello de botella de escalabilidad en una zona muy poblada. 4.1 Función de asignación para LDD El ejemplo justifica la necesidad de una función de asignación para procesar consultas dependientes de la ubicación. Esto será especialmente importante para las consultas basadas en la atracción en todo el mundo para las cuales la respuesta podría estar compuesta para diferentes partes del mundo. La función de mapeo es necesaria para construir el horario de emisión. Definimos Global Property Set (GPS) [11], Information Content (IC) set, and Location Jerarchy (LH) set where IC  GPS and LH  GPS to develop a mapping function. LH = {l1, l2, l3...,lk} donde li representan ubicaciones en el árbol de ubicación y IC = {ic1, ic2, ic3,...,icn} donde ici representan tipo de información. Por ejemplo, si tenemos tráfico, tiempo, y la información de stock están en transmisión entonces IC = {ictráfico, icweather, e icstock}. El esquema de asignación debe ser capaz de identificar y seleccionar un miembro IC y un nodo LH para (a) asociación correcta, (b) coincidencia de granularidad, (c) y condición de terminación. Por ejemplo, el clima • IC podría estar asociado con un país o un estado o una ciudad o un pueblo de LH. La coincidencia de granularidad entre el tiempo y un nodo LH es según el requisito del usuario. Así, con una granularidad gruesa la información meteorológica se asocia con un país para obtener el clima de los países y con la ciudad en una granularidad más fina. Si una ciudad es la mejor granularidad, entonces define la condición terminal para la asociación entre IC y LH para el tiempo. Esto significa que un usuario no puede obtener información meteorológica sobre la subdivisión de una ciudad. En realidad, el clima de una subdivisión no tiene ningún sentido. Desarrollamos un simple esquema de mapeo heurístico basado en las necesidades del usuario. Dejar IC = {m1, m2,m3.,..., mk}, donde mi representa su elemento y dejar LH = {n1, n2, n3,..., nl}, donde ni representa miembro LHs. Definimos GPS para IC (GPSIC)  GPS y para LH (GPSLH)  GPS como GPSIC = {P1, P2,..., Pn}, donde P1, P2, P3,..., Pn son propiedades de sus miembros y GPSLH = {Q1, Q2,..., Qm} donde Q1, Q2,..., Qm son propiedades de sus miembros. Las propiedades de un miembro particular de IC son un subconjunto de GPSIC. Generalmente es cierto que (conjunto de propiedades (miÃ3n IC) â € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € Por ejemplo, stock • IC y película • IC calificación no tienen ninguna propiedad en común. Asumimos que dos o más miembros del CI tienen al menos una propiedad geográfica común (es decir, lugar) porque DAYS transmite información sobre esas categorías, que están estrechamente vinculadas con un lugar. Por ejemplo, las acciones de una empresa están relacionadas con un país, el clima está relacionado con una ciudad o estado, etc. Definimos el subconjunto de propiedades de mio IC como PSm i ♥ mi • IC y PSm i = {P1, P2,..., Pr} donde r ≤ n. • Pr {Pr • PSm i → Pr • GPSIC} que implica que • i, PSm i  GPSIC. Las propiedades geográficas de este conjunto son indicativas de si mi IC puede ser mapeado a un solo nivel de granularidad (es decir. una sola ubicación) en LH o varios niveles de granularidad (es decir, más de un nodo en 19 de la jerarquía) en LH. ¿Cuántos y qué niveles de granularidad debe un mapa mi, depende del nivel en el que el proveedor de servicios quiere proporcionar información sobre el mi en cuestión. Del mismo modo, definimos un subconjunto de propiedades de los miembros de LH como PSn j Ł nj Ł LH que puede ser escrito como PSn j ={Q1, Q2, Q3,..., Qs} donde s ≤ m. Además, El proceso de mapeo de IC a LH es entonces identificar para algunos mxÃ3 IC uno o mÃ¡s nyÃ3 LH tal que PSmx Ã3 PSnv Esto significa que cuando mx mapea a ny y a todos los niños de ny si mx puede mapear a múltiples niveles de granularidad o mx mapea sólo a ny si mx puede mapear a un solo nivel de granularidad. Asumimos que los nuevos miembros pueden unirse y los antiguos miembros pueden salir de IC o LH en cualquier momento. La eliminación de miembros del espacio del CI es simple, pero la adición de miembros al espacio del CI es más restrictiva. Si queremos añadir un nuevo miembro al espacio IC, primero definimos un conjunto de propiedades para el nuevo miembro: PSmnew_m ={P1, P2, P3,..., Pt} y lo añadimos al CI sólo si la condición: Este régimen tiene una ventaja adicional al permitir a los proveedores de servicios de información controlar el tipo de información que desean proporcionar a los usuarios. Presentamos el siguiente ejemplo para ilustrar el concepto de mapeo. IC = {Tráfico, Stock, Restaurante, Tiempo, Fechas importantes de la historia, Condiciones de la carretera} LH = {País, Estado, Ciudad, Código postal, Principales carreteras} GPSIC = {Surface-mobility, Roads, High, Low, Italian-food, StateName, Temp, CityName, Seat-disponibilidad, Zip, Traffic-jams, Además, PS(ICStock) indicó que Stock solo puede mapear a un solo país. Cuando consideramos el miembro Tráfico del espacio IC, sólo PS(ICTraffic) â € ¢ PScity â € TM. Como PS(ICTRAFFIC) indica que Traffic puede mapear a una sola ubicación, solo mapea a City y a ninguno de sus hijos. Ahora bien, a diferencia de Stock, el mapeo del tráfico con las principales carreteras, que es un hijo de la ciudad, es significativo. Sin embargo, los proveedores de servicios tienen derecho a controlar los niveles de granularidad a los que desean proporcionar información sobre un miembro del espacio IC. PS(ICRoad conditions) • PSState  y PS(ICRoad conditions) • PSCity. Así que las condiciones de la carretera son mapas al Estado, así como a la ciudad. Como PS(ICRoad conditions) indica que las condiciones de la carretera pueden mapear a múltiples niveles de granularidad, las condiciones de la carretera también mapearán a Zip Code y las principales carreteras, que son los niños del Estado y la ciudad. Del mismo modo, los mapas del restaurante sólo al código postal, y los mapas meteorológicos al estado, la ciudad y sus hijos, las carreteras principales y el código postal. 5. ESQUEMA DE ÍNDICE BASADA EN LOCALIZACIÓN Esta sección discute nuestro esquema de indexación basado en la ubicación (LBIS). El esquema está diseñado para ajustarse a la emisión LDD en nuestro proyecto DAYS. Como se discutió anteriormente, utilizamos la propiedad de contención de LDD en el esquema de indexación. Esto limita significativamente la búsqueda de nuestros datos requeridos a una parte particular de la transmisión. Por lo tanto, argumentamos que el esquema proporciona tiempo de afinación limitado. Describimos la arquitectura de nuestro esquema de indexación. Nuestro esquema contiene cubos de datos separados y cubos de índices. Los cubos de índice son de dos tipos. El primer tipo se llama el índice Mayor. El índice Major proporciona información sobre los tipos de datos transmitidos. Por ejemplo, si tenemos la intención de transmitir información como Entretenimiento, Tiempo, Tráfico, etc., entonces el índice principal apunta a estos tipos principales de información y/o sus principales subtipos de información, el número de subtipos principales variando de una información a otra. Esto limita estrictamente el número de accesos a un índice principal. El índice Major nunca apunta a los datos originales. Señala a los subíndices llamados el índice Menor. Los índices menores son los índices que realmente apuntan a los datos originales. Llamamos a estos indicadores menores como punteros de ubicación, ya que apunta a los datos que están asociados con una ubicación. Por lo tanto, nuestra búsqueda de datos incluye el acceso a un índice mayor y algunos índices menores, el número de índice menor variando dependiendo del tipo de información. Por lo tanto, nuestro esquema de indexación tiene en cuenta la naturaleza jerárquica del LDD, la propiedad Containment, y requiere que nuestro programa de transmisión se agrupe en función del tipo de datos y la ubicación. La estructura de la jerarquía de ubicación requiere el uso de diferentes tipos de índice en diferentes niveles. La estructura y las posiciones del índice dependen estrictamente de la jerarquía de ubicación descrita anteriormente en nuestro esquema de asignación. Ilustramos la implementación de nuestro esquema con un ejemplo. Posteriormente se mencionan las normas para la elaboración del índice. 20 A1 Entretenimiento Restaurante Película A2 A3 A4 R1 R2 R3 R4 R5 R6 R7 R8 Tiempo KC SL JC SF Entretenimiento R1 R2 R3 R4 R4 R5 R6 R7 R8 KC SL JC SF (A, R, NEXT = 8) 3, R5 4, R7 Tipo (S, L) ER W E EM (1, 4) (5, Información cartográfica de ubicación para radiodifusión Figura 4. Datos junto con el índice basado en la ubicación Ejemplo: Supongamos que nuestro contenido de transmisión contiene ICentertainment y ICweather que se representa como se muestra en la Fig. 3. Ai representa las áreas de la ciudad y Ri representa las carreteras en un área determinada. Las hojas de la estructura meteorológica representan cuatro ciudades. La estructura del índice se indica en la Fig. 4 que muestra la posición del índice mayor y menor y los datos en el horario de emisión. Proponemos las siguientes reglas para la creación del programa de emisión indexado por aire: • Se crean el índice mayor y el índice menor. • El índice principal contiene la posición y el rango de diferentes tipos de ítems de datos (Weather and Entertainment, Figura 3) y sus categorías. Las subcategorías de Entretenimiento, Cine y Restaurante, también están en el índice. Así, el índice principal contiene Entretenimiento (E), Entretenimiento-Movie (EM), Entretenimiento-Restaurante (ER), y Tiempo (W). La tupla (S, L) representa la posición inicial (S) del elemento de datos y L representa el rango del elemento en términos de número de cubos de datos. • El índice menor contiene las variables A, R y un puntero Siguiente. En nuestro ejemplo (Figura 3), la carretera R representa el primer nodo del área A. El índice menor se utiliza para apuntar a cubos de datos reales presentes en los niveles más bajos de la jerarquía. En cambio, el índice principal apunta a una gama más amplia de ubicaciones, por lo que contiene información sobre las principales y subcategorías de datos. • La información del índice no se incorpora en los cubos de datos. Los cubos de índice están separados que contienen sólo la información de control. • El número de cubos índice m=#(IC), IC = {ic1, ic2, ic3,...,icn} donde ici representa el tipo de información y # representa la cardinalidad del conjunto de contenido de información IC. En este ejemplo, IC= {icMovie, icWeather, icRestaurant} y así #(IC) =3. Por lo tanto, el número de cubos índice principales es 3. • El mecanismo para resolver la consulta está presente en el coordinador de java en MU. Por ejemplo, si una consulta Q se presenta como Q (Entretenimiento, Película, Road_1), entonces la búsqueda resultante será para la información EM en el índice principal. Nosotros decimos, Q EM. Nuestro índice propuesto funciona de la siguiente manera: Supongamos que una MU emite una consulta que está representada por Java Coordinador presente en la MU como información de restaurante en la carretera 7. Esto es resuelto por el coordinador como Q ER. Esto significa que uno tiene que buscar la unidad de índice ER en el índice principal. Supongamos que el MU entra en el canal en R2. El primer índice que recibe es un índice menor después de R2. En este índice, el valor de la variable Siguiente = 4, lo que significa que el siguiente índice mayor está presente después del cubo 4. La MU puede entrar en modo somnoliento. Se activa después del cubo 4 y recibe el índice principal. Busca información de ER que es la primera entrada en este índice. Ahora es seguro que la MU obtendrá la posición del cubo de datos en el índice menor contiguo. La segunda unidad en el índice menor representa la posición de los datos requeridos R7. Indica que el cubo de datos es el primer cubo en el Área 4. El MU vuelve a entrar en modo somnífero y se activa después del cubo 6. Obtiene los datos necesarios en el siguiente cubo. Presentamos el algoritmo para buscar el Índice basado en la ubicación. Algoritmo 1 Índice basado en la ubicación Buscar en DAYS 1. Escanear la transmisión para el siguiente cubo índice, encontrado=falso 2. Mientras que (no se encuentra) hacer 3. si cubo es el índice mayor entonces 4. Encuentra el Tipo & Tupla (S, L) 5. si S es mayor que 1, entra en modo Doze durante S segundos 6. termina si 7. Despierta en el cubo Sth y observa el índice menor 8. termina si 9. si el cubo es índice menor entonces 10. si TypeRequest no es igual a Typefound y (A,R)Solicitud no es igual a (A,R)found entonces 11. Vaya al modo de doze hasta el SIGUIENTE y repita desde el paso 3 12. terminar si 13. de lo contrario encontrar entrada en Índice Menor que apunta a los datos 14. Calcular la hora de llegada T del cubo de datos 15. Entra en modo somnífero hasta la T 16. Despierta en T y accede a los datos, encontrados = verdadero 17. fin de lo contrario 18. final si 19. final Mientras que 21 6. EVALUACIÓN DE LA EJECUCIÓN La conservación de la energía es la principal preocupación cuando tratamos de acceder a los datos de la transmisión inalámbrica. Un sistema eficiente debe permitir al dispositivo móvil acceder a los datos que necesita manteniéndose activo durante un período mínimo de tiempo. Esto ahorraría una cantidad considerable de energía. Dado que los elementos se distribuyen en función de los tipos y se asignan a ubicaciones adecuadas, argumentamos que nuestra transmisión se ocupa de los tipos de datos agrupados. La unidad móvil tiene que acceder a un índice mayor y a un índice menor relativamente menor para obtener información sobre la hora de llegada de los datos. Esto contrasta con el esquema exponencial donde los índices son de tamaños iguales. El ejemplo discutido y Algoritmo 1 revela que para acceder a cualquier dato, necesitamos acceder al índice mayor sólo una vez seguido por uno o más accesos al índice menor. El número de accesos menores al índice depende del número de ubicaciones internas. Como el número de ubicaciones internas varía de elemento a elemento (por ejemplo, Weather está generalmente asociado con una ciudad mientras que el tráfico se granula hasta las carreteras principales y menores de una ciudad), argumentamos que la estructura de la información de localización mapeada puede ser visualizada como un bosque que es una colección de árboles generales, el número de árboles generales dependiendo de los tipos de información transmitida y la profundidad de un árbol dependiendo de la granularidad de la información de Para nuestros experimentos, asumimos el bosque como una colección de árboles M-ary equilibrados. Asumimos además que los árboles de la arteria M están llenos al asumir la presencia de nodos ficticios en diferentes niveles de un árbol. Así, si el número de ítems de datos es d y la altura del árbol es m, entonces n= (m*d-1)/(m-1) donde n es el número de vértices en el árbol e i= (d-1)/(m-1) donde i es el número de vértices internos. El tiempo de afinación para un ítem de datos implica 1 unidad de tiempo requerido para acceder al índice principal más el tiempo requerido para acceder a los ítems de datos presentes en las hojas del árbol. Por lo tanto, el tiempo de sintonización con d ítems de datos es t = logmd+1 Podemos decir que el tiempo de sintonización está limitado por O(logmd). Comparamos nuestro esquema con el esquema de indexación distribuida y exponencial. Asumimos una emisión plana y el número de páginas que varían de 5000 a 25000. Los diversos parámetros de simulación se muestran en la Tabla 1. La Figura 5-8 muestra los tiempos relativos de afinación de tres algoritmos de indexación, es decir, el LBIS, esquema exponencial y el esquema de árbol distribuido. La Figura 5 muestra el resultado para el número de nodos internos de ubicación = 3. Podemos ver que LBIS supera significativamente a los otros esquemas. El tiempo de afinación en LBIS varía de aproximadamente 6,8 a 8. Este gran tiempo de afinación se debe al hecho de que después de alcanzar el índice menor más bajo, la MU puede tener que acceder a pocos cubos secuencialmente para obtener el cubo de datos requerido. Podemos ver que el tiempo de afinación tiende a ser estable a medida que aumenta la duración de la emisión. En la figura 6 se considera m= 4. Aquí podemos ver que el exponencial y el rendimiento distribuido casi de manera similar, aunque el primero parece funcionar ligeramente mejor a medida que aumenta la longitud de emisión. Un patrón muy interesante es visible en la figura 7. Para las emisiones de menor tamaño, el LBIS parece tener un tiempo de afinación mayor que los otros dos esquemas. Pero a medida que aumenta la duración de la emisión, es claramente visible que el LBIS supera a los otros dos esquemas. La indexación del árbol distribuido muestra un comportamiento similar al del LBIS. El tiempo de afinación en LBIS sigue siendo bajo porque el algoritmo permite a la MU saltarse algunos Índices Menores intermedios. Esto permite que la MU se mueva a niveles más bajos directamente después de entrar en modo activo, ahorrando así energía valiosa. Esta acción no es posible en la indexación de árboles distribuidos y por lo tanto podemos observar que su tiempo de afinación es más que el esquema LBIS, aunque tiene mejores resultados que el esquema exponencial. La Figura 8, en contraste, nos muestra que el tiempo de afinación en LBIS, aunque menor que los otros dos esquemas, tiende a aumentar bruscamente a medida que la longitud de emisión se hace mayor que las 15000 páginas. Esto puede atribuirse tanto al aumento del tiempo necesario para escanear los Índices Menores intermedios como a la duración de la emisión. Pero podemos observar que la pendiente de la curva LBIS es significativamente menor que las otras dos curvas. Tabla 1 Parámetros de simulación P Valores de definición N Número de datos Elementos 5000 - 25000 m Número de nodos de ubicación internos 3, 4, 5, 6 B Capacidad de cubo sin índice (para índice exponencial) 10,64,128,256 i Base de índice para índice exponencial 2,4,6,8 k Tamaño del índice para árbol distribuido 8 bytes Los resultados de la simulación establecen algunos hechos sobre nuestro esquema de indexación basado en la ubicación. En la mayoría de los casos, el sistema funciona mejor que los otros dos en términos de tiempo de afinación. A medida que aumenta la duración de la emisión, después de cierto punto, aunque el tiempo de afinación aumenta como resultado de factores que hemos descrito antes, el esquema siempre funciona mejor que los otros dos esquemas. Debido al límite prescrito del número de páginas en el papel, no podemos mostrar más resultados. Pero estos resultados omitidos muestran una tendencia similar a la de los resultados representados en la figura 5-8. 7. CONCLUSIÓN Y FUTURO TRABAJO En este trabajo hemos presentado un esquema para el mapeo de datos de radiodifusión inalámbrica con sus ubicaciones. Hemos presentado un ejemplo para mostrar cómo la estructura jerárquica del árbol de ubicación mapea con los datos para crear LDD. Hemos presentado un esquema llamado LBIS para indexar este LDD. Hemos utilizado la propiedad de contención de LDD en el esquema que limita la búsqueda a un estrecho rango de datos en la emisión, ahorrando así energía valiosa en el dispositivo. La asignación de datos con ubicaciones y el esquema de indexación se utilizará en nuestro proyecto DAYS para crear la arquitectura basada en empuje. El LBIS se ha comparado con otros dos sistemas de indexación prominentes, a saber, el sistema de indexación de árboles distribuidos y el sistema de indexación exponencial. En nuestras simulaciones demostramos que el esquema LBIS tiene el menor tiempo de afinación para las emisiones que tienen un gran número de páginas, ahorrando así una valiosa potencia de batería en la MU. 22 En el trabajo futuro tratamos de incorporar la arquitectura basada en el tirón en nuestro proyecto DAYS. Los datos del servidor están disponibles para el acceso de los usuarios globales. Esto se puede hacer poniendo una solicitud al servidor de origen. La consulta en este caso es una consulta global. Se transfiere del servidor de origen de los usuarios al servidor de destino mediante el uso de satélites LEO. Tenemos la intención de utilizar nuestro esquema de LDD y arquitectura de estadificación de datos en la arquitectura basada en el tirón. Demostraremos que el esquema de LDD junto con la arquitectura de estadificación de datos mejora significativamente la latencia para la consulta global y local. 8. REFERENCIAS [1] Acharya, S., Alonso, R. Franklin, M y Zdonik S. Disco de transmisión: Gestión de datos para entornos de comunicación asimétricos. En Actas de la Conferencia de la ACM SIGMOD sobre Gestión de Datos, págs. 199 a 210, San José, CA, mayo de 1995. [2] Chen, M.S.,Wu, K.L. y Yu, P. S. Optimizando la asignación de índices para la difusión secuencial de datos en la computación móvil inalámbrica. IEEE Transactions on Knowledge and Data Engineering (TKDE), 15(1):161-173, enero/febrero de 2003. Gráfico 5 Tamaño de la transmisión (# cubos) Dist tree Expo LBIS Figura 6. Tamaño de la transmisión (# cubos) Dist tree Expo LBIS Figura 7. Tamaño de la transmisión (# cubos) Dist tree Expo LBIS Figura 8. Tamaño de la transmisión (# cubos) Árbol dist Expo LBIS Tiempo medio de afinación Tiempo medio de afinación Tiempo medio de afinación 23 [3] Hu, Q. L., Lee, D. L. y Lee, W.C. Evaluación del rendimiento de un sistema inalámbrico de difusión jerárquica de datos. En Actas de la Quinta Conferencia Internacional Anual de ACM sobre Computación y Redes Móviles (MobiCom99), págs. 163 a 173, Seattle, WA, agosto de 1999. [4] Hu, Q. L. Lee, W.C. y Lee, D. L. Power consultas conservadoras de múltiples atributos en la transmisión de datos. En Actas de la 16a Conferencia Internacional sobre Ingeniería de Datos (ICDE00), páginas 157-166, San Diego, CA, febrero de 2000. [5] Imielinski, T., Viswanathan, S. y Badrinath. B. R. Filtrado eficiente de energía de los datos en el aire. En Actas de la Cuarta Conferencia Internacional sobre Tecnología de Bases de Datos Ampliadas (EDBT94), págs. 245 a 258, Cambridge, Reino Unido, marzo de 1994. [6] Imielinski, T., Viswanathan, S. y Badrinath. B. R. Datos sobre el aire - Organización y acceso. Operaciones de IEEE en Ingeniería de Conocimientos e Datos (TKDE), 9(3):353-372, mayo/junio de 1997. [7] Shih, E., Bahl, P. y Sinclair, M. J. Wake on wireless: Una estrategia de ahorro de energía impulsada por eventos para dispositivos operados por baterías. En Actas de la 8a Conferencia Internacional Anual de ACM sobre Computación y Redes Móviles (MobiCom02), págs. 160 a 171, Atlanta, GA, septiembre de 2002. [8] Shivakumar N. y Venkatasubramanian, S. Indización energéticamente eficiente para la difusión de información en sistemas inalámbricos. ACM/Baltzer Journal of Mobile Networks and Applications (MONET), 1(4):433-446, diciembre de 1996. [9] Tan K. L. y Yu, J. X. Filtración energéticamente eficiente de emisiones no uniformes. En Actas de la 16a Conferencia Internacional sobre Sistemas de Computación Distribuida (ICDCS96), págs. 520 a 527, Hong Kong, mayo de 1996. [10] Viredaz, M. A., Brakmo, L. S. y Hamburgen, W. R. Gestión de energía en dispositivos portátiles. ACM Coue, 1(7):44-52, octubre de 2003. [11] Garg, N. Kumar, V., & Dunham, M.H. Mapeo e indización de información en DAYS, 6o Taller Internacional sobre Movilidad en Bases de Datos y Sistemas Distribuidos, en conjunción con la 14a Conferencia Internacional sobre Aplicaciones de Bases de Datos y Sistemas Expertos, 1o a 5 de septiembre, Praga, República Checa, 2003. [12] Acharya D., Kumar, V., & Dunham, M.H. InfoSpace: Sistema de difusión de datos públicos híbrido y adaptativo para computación ubicua. Aceptado para publicación en el número especial de Pervasive Computing. Wiley Journal for Wireless Communications and Mobile Computing, 2004. [13] Acharya D., Kumar, V., & Prabhu, N. Descubriendo y usando Servicios Web en M-Commerce, Proceedings for 5th VLDB Workshop on Technologies for E-Services, Toronto, Canada,2004. [14] Acharya D., Kumar, V. Indexing Location Depending Data in broadcast en ambiente. Aceptado para su publicación, número especial de JDIM sobre Gestión de Datos Distribuidos, 2005. [15] Flinn, J., Sinnamohideen, S., & Satyanarayan, M. Data Staging on No Trusted Surrogates, Intel Research, Pittsburg, Unpublished Report, 2003. [16] Seydim, A.Y., Dunham, M.H. & Kumar, V. Location dependiente consulta processing, Actas del segundo taller internacional de ACM sobre ingeniería de datos para acceso inalámbrico y móvil, p.47-53, Santa Barbara, California, USA, 2001. [17] Xu, J., Lee, W.C., Tang., X. Índice exponencial: Un esquema de indexación distribuida para los datos sobre el aire. En Actas de la II Conferencia Internacional ACM/USENIX sobre Sistemas, Aplicaciones y Servicios Móviles (MobiSys04), Boston, MA, junio de 2004. 24 ",
            "error": []
        },
        "index": {
            "translated_key": [
                "índice",
                "índice",
                "index",
                "índice",
                "índice",
                "índice",
                "índice",
                "índice",
                "índice",
                "índice",
                "índice",
                "índice",
                "índice",
                "índice",
                "índice",
                "índice",
                "indexar",
                "index",
                "índice",
                "índice",
                "índice",
                "índice",
                "índice",
                "índice",
                "índice",
                "índice",
                "índice",
                "índice",
                "índice",
                "índice",
                "índice",
                "índice",
                "índice",
                "índice",
                "índice",
                "índice",
                "índice",
                "índice",
                "índice",
                "índice",
                "índice",
                "índice",
                "índice",
                "índice",
                "índice",
                "índice",
                "índice",
                "índice",
                "índice",
                "índice",
                "índice",
                "índice",
                "índice",
                "índice",
                "índice",
                "índice",
                "index",
                "índice",
                "índice",
                "índice",
                "índice",
                "índice",
                "índice",
                "índice",
                "índice",
                "índice",
                "índice",
                "indexar",
                "índice"
            ],
            "translated_annotated_text": "Esquema de Indización basado en la ubicación para DAYS Debopam Acharya y Vijay Kumar 1 Computer Science and Informatics University of Missouri-Kansas City Kansas City, MO 64110 dargc(kumarv)@umkc.edu RESUMEN La difusión de datos a través de canales inalámbricos para transmitir información a los consumidores se está volviendo bastante común. Se han propuesto muchos planes de difusión, pero la mayoría de ellos llevan los datos a canales inalámbricos para consumo general. La difusión basada en push [1] es esencialmente asimétrica, es decir, el volumen de datos es mayor desde el servidor a los usuarios que desde los usuarios de vuelta al servidor. El esquema basado en el empuje requiere una indexación que indica cuándo se transmitirán los datos y su posición en la emisión. Latencia de acceso y tiempo de afinación son los dos parámetros principales que pueden utilizarse para evaluar un esquema de indexación. Dos de los importantes esquemas de indexación propuestos anteriormente se basaban en los árboles y los esquemas de indexación exponencial. Ninguno de estos planes pudo satisfacer los requisitos de los datos dependientes de la ubicación (DDL), que es una característica muy deseable de la difusión de datos. En este artículo, discutimos la emisión de LDD en nuestro proyecto DAta in Your Space (DAYS), y proponemos un esquema para la indexación de LDD. Argumentamos que este sistema, cuando se aplica a la DDTS, mejora significativamente el rendimiento en términos de tiempo de afinación en los esquemas antes mencionados. Demostramos nuestro argumento con la ayuda de resultados de simulación. Categorías y Descriptores sujetos H.3.1 [Sistemas de información]: Almacenamiento y recuperación de información - análisis e indexación de contenido; H.3.3 [Sistemas de información]: Almacenamiento y recuperación de información - búsqueda y recuperación de información. Términos generales Algoritmos, Rendimiento, Experimentación 1. INTRODUCCIÓN La difusión inalámbrica de datos es una forma económica y eficiente de poner los datos deseados a disposición de un gran número de usuarios móviles o estáticos. El modo de transferencia de datos es esencialmente asimétrico, es decir, la capacidad de transferencia de datos (comunicación descendente) del servidor al cliente (usuario móvil) es significativamente mayor que el cliente o usuario móvil al servidor (comunicación ascendente). La eficacia de un sistema de difusión de datos se determina por su capacidad para proporcionar a los usuarios los datos requeridos en cualquier lugar y en cualquier momento. Una de las mejores maneras de lograr esto es a través de la difusión de servicios basados en la ubicación altamente personalizados (LBS) que permite a los usuarios acceder a datos dependientes de la ubicación personalizada. Un ejemplo sería alguien usando su dispositivo móvil para buscar un restaurante vegetariano. La aplicación LBS interactuaría con otros componentes de tecnología de localización o utilizaría la entrada de usuarios móviles para determinar la ubicación de los usuarios y descargar la información sobre los restaurantes cercanos al usuario sintonizando el canal inalámbrico que está difundiendo LDD. Vemos un despliegue limitado de LBS por parte de algunos proveedores de servicios. Pero hay todos los indicios de que con el tiempo se resolverán algunos de los complejos problemas técnicos, como el marco de localización uniforme, el cálculo y el seguimiento de ubicaciones en todo tipo de lugares, el posicionamiento en diversos entornos, aplicaciones de localización innovadoras, etc., y LBS se convertirá en una instalación común y ayudará a mejorar la productividad del mercado y el confort del cliente. En nuestro proyecto llamado DAYS, utilizamos el mecanismo de difusión de datos inalámbricos para impulsar LDD a los usuarios y usuarios móviles monitorear y sintonizar el canal para encontrar y descargar los datos requeridos. Sin embargo, es probable que una emisión simple cause una degradación significativa del rendimiento de los dispositivos móviles con limitaciones energéticas, y una solución común a este problema es el uso de una indexación eficiente del aire. El enfoque de indexación almacena información de control que informa al usuario sobre la ubicación de los datos en la emisión y cómo y cuándo pudo acceder a ella. Un usuario móvil, por lo tanto, tiene un poco de tiempo libre para entrar en el modo de somnífero que conserva valiosa energía. También permite al usuario personalizar su propio dispositivo móvil afinando selectivamente la información de su elección. La eficiencia del acceso y la conservación de la energía son las dos cuestiones importantes para los sistemas de radiodifusión de datos. La eficiencia de acceso se refiere a la latencia experimentada cuando se inicia una solicitud hasta que se recibe la respuesta. Conservación de la energía [7, 10] se refiere al uso eficiente de la energía limitada del dispositivo móvil para acceder a los datos de radiodifusión. Dos parámetros que afectan a estos son el tiempo de afinación y la latencia de acceso. El tiempo de sintonización se refiere al tiempo durante el cual la unidad móvil (MU) permanece en estado activo para sintonizar el canal y descargar los datos requeridos. También se puede definir como el número de cubos sintonizados por el dispositivo móvil en estado activo para obtener los datos requeridos. La latencia de acceso puede definirse como el tiempo transcurrido desde que se ha emitido una solicitud hasta que se ha recibido la respuesta. 1 Esta investigación fue apoyada por una subvención de NSF IIS-0209170. En el pasado se han propuesto varios esquemas de indexación, entre los que destacan los basados en árboles y los esquemas de indexación exponencial [17]. Las principales desventajas de los esquemas basados en árboles son que se basan en estructuras arbóreas centralizadas. Para iniciar una búsqueda, la MU tiene que esperar hasta que llegue a la raíz del siguiente árbol de transmisión. Esto afecta significativamente el tiempo de afinación de la unidad móvil. Los esquemas exponenciales facilitan la replicación del \"índice\" compartiendo enlaces en diferentes árboles de búsqueda. Para las emisiones con un gran número de páginas, se ha demostrado que el esquema exponencial funciona de manera similar a los esquemas basados en árboles en términos de latencia de acceso. Además, la duración media de la emisión aumenta debido a la replicación del \"índice\" y esto puede causar un aumento significativo en la latencia del acceso. Ninguno de los sistemas de indexación mencionados es igualmente eficaz en la difusión de datos dependientes de la ubicación. Además de proporcionar baja latencia, carecen de propiedades que se utilizan para abordar los problemas de DDT. Proponemos un esquema de indexación en DAYS que se ocupa de algunos de estos problemas. Demostramos con resultados de simulación que nuestro esquema supera a algunos de los esquemas de indexación anteriores para la difusión de LDD en términos de tiempo de afinación. El resto del documento se presenta de la siguiente manera. En la sección 2, se analiza el trabajo anterior relacionado con la indexación de los datos de radiodifusión. La sección 3 describe nuestra arquitectura DAYS. Los datos dependientes de la ubicación, su generación y su posterior difusión se presentan en la sección 4. La sección 5 discute nuestro esquema de indexación en detalle. La simulación de nuestro esquema y su evaluación del desempeño se presenta en la sección 6. En la sección 7 se concluye el documento y se menciona la labor futura relacionada. 2. TRABAJO ANTERIOR Varias técnicas de indexación basadas en discos se han utilizado para la indexación de aire. Imielinski et al. [5, 6] aplicó el árbol B+ \"index\", donde los nodos de la hoja almacenan los tiempos de llegada de los elementos de datos. El método de indexación distribuido fue propuesto para replicar y distribuir eficientemente el árbol de \"índice\" en una emisión. Específicamente, el árbol \"índice\" se divide en una parte replicada y una parte no replicada. Cada emisión consiste en la parte replicada y la parte no replicada que indiza los elementos de datos inmediatamente después de ella. Como tal, cada nodo en la parte no replicada aparece sólo una vez en una emisión y, por lo tanto, reduce el costo de replicación y latencia de acceso, al tiempo que logra un buen tiempo de afinación. Chen et al. [2] y Shivakumar et al. [8] considera estructuras de árboles desequilibradas para optimizar el consumo de energía para el acceso a datos no uniformes. Estas estructuras minimizan el costo medio de búsqueda de \"índice\" reduciendo el número de búsquedas de \"índice\" de datos calientes a expensas de gastar más en datos fríos. Tan y Yu discutieron los datos y la organización del \"índice\" bajo los métodos de transmisión sesgados de Hashing y firma también se han sugerido para la transmisión inalámbrica que admite consultas de igualdad [9]. En [5] se propuso un método flexible de indización. El \"índice\" flexible primero clasifica los elementos de datos en orden ascendente (o descendente) de los valores clave de búsqueda y luego los divide en segmentos de p. El primer cubo en cada segmento de datos contiene un \"índice\" de control, que es un \"índice\" binario que asigna un valor clave dado al segmento que contiene esa clave, y un \"índice\" local que es un \"índice\" de entrada m que asigna un valor clave dado a los cubos dentro del segmento actual. Al afinar los parámetros de p y m, los clientes móviles pueden lograr un buen tiempo de afinación o una buena latencia de acceso. Otra técnica de indexación propuesta es el esquema de indexación exponencial [17]. En este esquema, se utiliza un \"índice\" parametrizado, llamado \"índice\" exponencial para optimizar la latencia de acceso o el tiempo de afinación. Facilita la replicación de \"índice\" mediante la vinculación de diferentes árboles de búsqueda. Todos los regímenes mencionados se han aplicado a datos que no están relacionados entre sí. Estos datos no relacionados pueden agruparse o no agruparse. Sin embargo, ninguno de ellos se ha ocupado específicamente de los requisitos de la DDT. Los datos dependientes de la ubicación son datos que están asociados con una ubicación. En la actualidad hay varias aplicaciones que se ocupan de la DDTS [13, 16]. Casi todos ellos representan LDD con la ayuda de estructuras jerárquicas [3, 4]. Esto se basa en la propiedad de contención de datos dependientes de la ubicación. La propiedad Containment ayuda a determinar la posición relativa de un objeto definiendo o identificando ubicaciones que contienen esos objetos. Las ubicaciones subordinadas están jerárquicamente relacionadas entre sí. Así, la propiedad Containment limita la gama de disponibilidad u operación de un servicio. Usamos esta propiedad de contención en nuestro esquema de indexación para \"indexar\" LDD. 3. DAYS ARCHITECTURE DAYS se ha conceptualizado para difundir datos tópicos y no tópicos a los usuarios en un espacio de difusión local y para aceptar consultas de usuarios individuales a nivel mundial. Los datos tópicos, por ejemplo, información meteorológica, información de tráfico, información de existencias, etc., cambian constantemente con el tiempo. Los datos no tópicos como hotel, restaurante, precios inmobiliarios, etc., no cambian tan a menudo. Así, imaginamos la presencia de dos tipos de distribución de datos: En el primer caso, el servidor empuja los datos a los usuarios locales a través de canales inalámbricos. El otro caso se refiere al servidor que envía los resultados de las consultas de los usuarios a través de canales inalámbricos de enlace descendente. Técnicamente, vemos la presencia de dos tipos de colas en el acceso basado en datos. Una es una cola muy cargada que contiene consultas cargadas globalmente. La otra es una cola relativamente ligera que consiste en consultas subidas localmente. La arquitectura DAYS [12], como se muestra en la figura 1, consiste en un servidor de datos, programador de transmisiones, coordinador de DAYS, red de satélites LEO para la entrega de datos a nivel mundial y un espacio de transmisión local. Los datos se introducen en el espacio de transmisión local para que los usuarios puedan sintonizarse con los canales inalámbricos para acceder a los datos. El espacio de transmisión local consiste en una torre de transmisión, unidades móviles y una red de máquinas de puesta en escena de datos llamadas subrogados. La estadificación de datos en sustitutos se ha investigado anteriormente como una técnica exitosa [12, 15] para los datos relacionados con los usuarios de caché. Creemos que la estadificación de datos se puede utilizar para reducir drásticamente el tiempo de latencia tanto para los datos de radiodifusión local como para las respuestas globales. La solicitud de consulta en los sustitutos puede utilizarse posteriormente para generar los patrones de popularidad que finalmente deciden el horario de emisión [12]. 18 Popularidad Comentarios de Surrogates for Broadcast Scheduler Local Space Broadcast Tower SurrogateMU MU MU Data ServerHorario de transmisión generalDÍAS Coordinador Canal local de enlace descendente Canal global de enlace descendente Pull request cola cola Solicitud global cola Solicitud local cola Ubicación \"index\" Starbucks Plaza Kansas City Figura 1. Arquitectura DAYS Figura 2. Ubicación Estructura deStarbucks, Plaza 4. DATOS DEPENDIENTES DE LOCALIZACIÓN (LDD) Argumentamos que la incorporación de información de ubicación en la transmisión inalámbrica de datos puede disminuir significativamente la latencia de acceso. Esta propiedad se convierte en muy útil para la unidad móvil que tiene capacidad de almacenamiento y procesamiento limitada. Hay una variedad de aplicaciones para obtener información sobre tráfico, reservas de restaurantes y hoteles, comida rápida, gasolineras, oficina de correos, tiendas de comestibles, etc. Si estas aplicaciones se combinan con información de ubicación, entonces la búsqueda será rápida y altamente rentable. Una propiedad importante de las ubicaciones es Containment que ayuda a determinar la ubicación relativa de un objeto con respecto a su padre que contiene el objeto. Por lo tanto, Containment limita el rango de disponibilidad de un dato. Usamos esta propiedad en nuestro esquema de indexación. La base de datos contiene los contenidos transmitidos que se convierten en LDD [14] asociándolos con las ubicaciones respectivas para que puedan transmitirse de manera agrupada. El agrupamiento de LDD ayuda al usuario a localizar la información de manera eficiente y soporta la propiedad de contención. Presentamos un ejemplo para justificar nuestra propuesta. Ejemplo: Supongamos que un usuario emite una consulta Starbucks Coffee en Plaza por favor. para acceder a información sobre la sucursal Plaza de Starbucks Coffee en Kansas City. En el caso de la ubicación independiente establecido el sistema enumerará todas las cafeterías Starbucks en el área de Kansas City. Es evidente que esas respuestas aumentarán la latencia del acceso y no son deseables. Estos se pueden administrar de manera eficiente si el servidor tiene datos dependientes de la ubicación, es decir, una asignación entre los datos de una cafetería de Starbucks y su ubicación física. Además, para una consulta que incluya el rango de ubicaciones de Starbucks, bastará con una sola consulta solicitando ubicaciones para toda la región de Kansas City, como se muestra en la Figura 2. Esto ahorrará una enorme cantidad de ancho de banda al disminuir el número de mensajes y, al mismo tiempo, será útil para prevenir el cuello de botella de escalabilidad en una zona muy poblada. 4.1 Función de asignación para LDD El ejemplo justifica la necesidad de una función de asignación para procesar consultas dependientes de la ubicación. Esto será especialmente importante para las consultas basadas en la atracción en todo el mundo para las cuales la respuesta podría estar compuesta para diferentes partes del mundo. La función de mapeo es necesaria para construir el horario de emisión. Definimos Global Property Set (GPS) [11], Information Content (IC) set, and Location Jerarchy (LH) set where IC  GPS and LH  GPS to develop a mapping function. LH = {l1, l2, l3...,lk} donde li representan ubicaciones en el árbol de ubicación y IC = {ic1, ic2, ic3,...,icn} donde ici representan tipo de información. Por ejemplo, si tenemos tráfico, tiempo, y la información de stock están en transmisión entonces IC = {ictráfico, icweather, e icstock}. El esquema de asignación debe ser capaz de identificar y seleccionar un miembro IC y un nodo LH para (a) asociación correcta, (b) coincidencia de granularidad, (c) y condición de terminación. Por ejemplo, el clima • IC podría estar asociado con un país o un estado o una ciudad o un pueblo de LH. La coincidencia de granularidad entre el tiempo y un nodo LH es según el requisito del usuario. Así, con una granularidad gruesa la información meteorológica se asocia con un país para obtener el clima de los países y con la ciudad en una granularidad más fina. Si una ciudad es la mejor granularidad, entonces define la condición terminal para la asociación entre IC y LH para el tiempo. Esto significa que un usuario no puede obtener información meteorológica sobre la subdivisión de una ciudad. En realidad, el clima de una subdivisión no tiene ningún sentido. Desarrollamos un simple esquema de mapeo heurístico basado en las necesidades del usuario. Dejar IC = {m1, m2,m3.,..., mk}, donde mi representa su elemento y dejar LH = {n1, n2, n3,..., nl}, donde ni representa miembro LHs. Definimos GPS para IC (GPSIC)  GPS y para LH (GPSLH)  GPS como GPSIC = {P1, P2,..., Pn}, donde P1, P2, P3,..., Pn son propiedades de sus miembros y GPSLH = {Q1, Q2,..., Qm} donde Q1, Q2,..., Qm son propiedades de sus miembros. Las propiedades de un miembro particular de IC son un subconjunto de GPSIC. Generalmente es cierto que (conjunto de propiedades (miÃ3n IC) â € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € Por ejemplo, stock • IC y película • IC calificación no tienen ninguna propiedad en común. Asumimos que dos o más miembros del CI tienen al menos una propiedad geográfica común (es decir, lugar) porque DAYS transmite información sobre esas categorías, que están estrechamente vinculadas con un lugar. Por ejemplo, las acciones de una empresa están relacionadas con un país, el clima está relacionado con una ciudad o estado, etc. Definimos el subconjunto de propiedades de mio IC como PSm i ♥ mi • IC y PSm i = {P1, P2,..., Pr} donde r ≤ n. • Pr {Pr • PSm i → Pr • GPSIC} que implica que • i, PSm i  GPSIC. Las propiedades geográficas de este conjunto son indicativas de si mi IC puede ser mapeado a un solo nivel de granularidad (es decir. una sola ubicación) en LH o varios niveles de granularidad (es decir, más de un nodo en 19 de la jerarquía) en LH. ¿Cuántos y qué niveles de granularidad debe un mapa mi, depende del nivel en el que el proveedor de servicios quiere proporcionar información sobre el mi en cuestión. Del mismo modo, definimos un subconjunto de propiedades de los miembros de LH como PSn j Ł nj Ł LH que puede ser escrito como PSn j ={Q1, Q2, Q3,..., Qs} donde s ≤ m. Además, El proceso de mapeo de IC a LH es entonces identificar para algunos mxÃ3 IC uno o mÃ¡s nyÃ3 LH tal que PSmx Ã3 PSnv Esto significa que cuando mx mapea a ny y a todos los niños de ny si mx puede mapear a múltiples niveles de granularidad o mx mapea sólo a ny si mx puede mapear a un solo nivel de granularidad. Asumimos que los nuevos miembros pueden unirse y los antiguos miembros pueden salir de IC o LH en cualquier momento. La eliminación de miembros del espacio del CI es simple, pero la adición de miembros al espacio del CI es más restrictiva. Si queremos añadir un nuevo miembro al espacio IC, primero definimos un conjunto de propiedades para el nuevo miembro: PSmnew_m ={P1, P2, P3,..., Pt} y lo añadimos al CI sólo si la condición: Este régimen tiene una ventaja adicional al permitir a los proveedores de servicios de información controlar el tipo de información que desean proporcionar a los usuarios. Presentamos el siguiente ejemplo para ilustrar el concepto de mapeo. IC = {Tráfico, Stock, Restaurante, Tiempo, Fechas importantes de la historia, Condiciones de la carretera} LH = {País, Estado, Ciudad, Código postal, Principales carreteras} GPSIC = {Surface-mobility, Roads, High, Low, Italian-food, StateName, Temp, CityName, Seat-disponibilidad, Zip, Traffic-jams, Además, PS(ICStock) indicó que Stock solo puede mapear a un solo país. Cuando consideramos el miembro Tráfico del espacio IC, sólo PS(ICTraffic) â € ¢ PScity â € TM. Como PS(ICTRAFFIC) indica que Traffic puede mapear a una sola ubicación, solo mapea a City y a ninguno de sus hijos. Ahora bien, a diferencia de Stock, el mapeo del tráfico con las principales carreteras, que es un hijo de la ciudad, es significativo. Sin embargo, los proveedores de servicios tienen derecho a controlar los niveles de granularidad a los que desean proporcionar información sobre un miembro del espacio IC. PS(ICRoad conditions) • PSState  y PS(ICRoad conditions) • PSCity. Así que las condiciones de la carretera son mapas al Estado, así como a la ciudad. Como PS(ICRoad conditions) indica que las condiciones de la carretera pueden mapear a múltiples niveles de granularidad, las condiciones de la carretera también mapearán a Zip Code y las principales carreteras, que son los niños del Estado y la ciudad. Del mismo modo, los mapas del restaurante sólo al código postal, y los mapas meteorológicos al estado, la ciudad y sus hijos, las carreteras principales y el código postal. 5. ESQUEMA DE ÍNDICE BASADA EN LOCALIZACIÓN Esta sección discute nuestro esquema de indexación basado en la ubicación (LBIS). El esquema está diseñado para ajustarse a la emisión LDD en nuestro proyecto DAYS. Como se discutió anteriormente, utilizamos la propiedad de contención de LDD en el esquema de indexación. Esto limita significativamente la búsqueda de nuestros datos requeridos a una parte particular de la transmisión. Por lo tanto, argumentamos que el esquema proporciona tiempo de afinación limitado. Describimos la arquitectura de nuestro esquema de indexación. Nuestro esquema contiene cubos de datos separados y cubos de \"índice\". Los cubos \"índice\" son de dos tipos. El primer tipo se llama el \"índice\" mayor. El \"índice\" mayor proporciona información sobre los tipos de datos transmitidos. Por ejemplo, si tenemos la intención de transmitir información como Entretenimiento, Tiempo, Tráfico, etc., entonces el \"índice\" principal apunta a estos grandes tipos de información y/o sus principales subtipos de información, el número de subtipos principales variando de una información a otra. Esto limita estrictamente el número de accesos a un \"índice\" mayor. El \"índice\" mayor nunca apunta a los datos originales. Señala a los subíndices llamados el Menor \"índice\". Los índices menores son los índices que realmente apuntan a los datos originales. Llamamos a estos punteros menores \"índice\" como punteros de ubicación, ya que apuntan a los datos que están asociados con una ubicación. Por lo tanto, nuestra búsqueda de datos incluye el acceso a un \"índice\" importante y algunos índices menores, el número de \"índice\" menor que varía dependiendo del tipo de información. Por lo tanto, nuestro esquema de indexación tiene en cuenta la naturaleza jerárquica del LDD, la propiedad Containment, y requiere que nuestro programa de transmisión se agrupe en función del tipo de datos y la ubicación. La estructura de la jerarquía de ubicación requiere el uso de diferentes tipos de \"índice\" en diferentes niveles. La estructura y las posiciones del \"índice\" dependen estrictamente de la jerarquía de ubicación como se describe en nuestro esquema de asignación anterior. Ilustramos la implementación de nuestro esquema con un ejemplo. Las reglas para enmarcar el \"índice\" se mencionan posteriormente. 20 A1 Entretenimiento Restaurante Película A2 A3 A4 R1 R2 R3 R4 R5 R6 R7 R8 Tiempo KC SL JC SF Entretenimiento R1 R2 R3 R4 R4 R5 R6 R7 R8 KC SL JC SF (A, R, NEXT = 8) 3, R5 4, R7 Tipo (S, L) ER W E EM (1, 4) (5, Información cartográfica de ubicación para radiodifusión Figura 4. Datos junto con el índice basado en la ubicación Ejemplo: Supongamos que nuestro contenido de transmisión contiene ICentertainment y ICweather que se representa como se muestra en la Fig. 3. Ai representa las áreas de la ciudad y Ri representa las carreteras en un área determinada. Las hojas de la estructura meteorológica representan cuatro ciudades. La estructura del \"índice\" se da en la Fig. 4 que muestra la posición del \"índice\" mayor y menor y los datos en el programa de emisión. Proponemos las siguientes reglas para la creación del programa de emisión indexado por aire: • Se crean el \"índice\" principal y el \"índice\" menor. • El \"índice\" principal contiene la posición y el rango de diferentes tipos de ítems de datos (Tiempo y Entretenimiento, Figura 3) y sus categorías. Las subcategorías de Entretenimiento, Cine y Restaurante, también están en el \"índice\". Así, el \"índice\" principal contiene Entretenimiento (E), Entretenimiento-Movie (EM), Entretenimiento-Restaurante (ER), y Tiempo (W). La tupla (S, L) representa la posición inicial (S) del elemento de datos y L representa el rango del elemento en términos de número de cubos de datos. • El \"índice\" menor contiene las variables A, R y un puntero Siguiente. En nuestro ejemplo (Figura 3), la carretera R representa el primer nodo del área A. El \"índice\" menor se utiliza para apuntar a cubos de datos reales presentes en los niveles más bajos de la jerarquía. En contraste, el \"índice\" principal apunta a una gama más amplia de ubicaciones y por lo tanto contiene información sobre las principales y subcategorías de datos. • La información del índice no se incorpora en los cubos de datos. Los cubos de índice están separados que contienen sólo la información de control. • El número de cubos principales \"índice\" m=#(IC), IC = {ic1, ic2, ic3,...,icn} donde ici representa el tipo de información y # representa la cardinalidad del conjunto de Contenidos de Información IC. En este ejemplo, IC= {icMovie, icWeather, icRestaurant} y así #(IC) =3. Por lo tanto, el número de cubos \"índice\" principales es 3. • El mecanismo para resolver la consulta está presente en el coordinador de java en MU. Por ejemplo, si una consulta Q se presenta como Q (Entretenimiento, Película, Road_1), entonces la búsqueda resultante será para la información EM en el \"índice\" principal. Nosotros decimos, Q EM. Nuestro \"índice\" propuesto funciona de la siguiente manera: Supongamos que una MU emite una consulta que está representada por Java Coordinador presente en la MU como información de restaurante en la carretera 7. Esto es resuelto por el coordinador como Q ER. Esto significa que uno tiene que buscar la unidad de ER de \"índice\" en el \"índice\" mayor. Supongamos que el MU entra en el canal en R2. El primer \"índice\" que recibe es un \"índice\" menor después de R2. En este \"índice\", valor de la variable Siguiente = 4, lo que significa que el siguiente \"índice\" mayor está presente después del cubo 4. La MU puede entrar en modo somnoliento. Se activa después del cubo 4 y recibe el mayor \"índice\". Busca información de ER que es la primera entrada en este \"índice\". Ahora es seguro que el MU obtendrá la posición del cubo de datos en el \"índice\" menor contiguo. La segunda unidad en el \"índice\" menor representa la posición de los datos requeridos R7. Indica que el cubo de datos es el primer cubo en el Área 4. El MU vuelve a entrar en modo somnífero y se activa después del cubo 6. Obtiene los datos necesarios en el siguiente cubo. Presentamos el algoritmo para buscar el Índice basado en la ubicación. Algoritmo 1 Índice basado en la ubicación Buscar en DAYS 1. Escanear la transmisión para el siguiente cubo \"index\", encontrado=falso 2. Mientras que (no se encuentra) hacer 3. si cubo es el índice mayor entonces 4. Encuentra el Tipo & Tupla (S, L) 5. si S es mayor que 1, entra en modo Doze durante S segundos 6. termina si 7. Despierta en el cubo Sth y observa el índice menor 8. termina si 9. si el cubo es índice menor entonces 10. si TypeRequest no es igual a Typefound y (A,R)Solicitud no es igual a (A,R)found entonces 11. Vaya al modo de doze hasta el SIGUIENTE y repita desde el paso 3 12. terminar si 13. de lo contrario encontrar entrada en Índice Menor que apunta a los datos 14. Calcular la hora de llegada T del cubo de datos 15. Entra en modo somnífero hasta la T 16. Despierta en T y accede a los datos, encontrados = verdadero 17. fin de lo contrario 18. final si 19. final Mientras que 21 6. EVALUACIÓN DE LA EJECUCIÓN La conservación de la energía es la principal preocupación cuando tratamos de acceder a los datos de la transmisión inalámbrica. Un sistema eficiente debe permitir al dispositivo móvil acceder a los datos que necesita manteniéndose activo durante un período mínimo de tiempo. Esto ahorraría una cantidad considerable de energía. Dado que los elementos se distribuyen en función de los tipos y se asignan a ubicaciones adecuadas, argumentamos que nuestra transmisión se ocupa de los tipos de datos agrupados. La unidad móvil tiene que acceder a un \"índice\" mayor y a un \"índice\" menor relativamente menor para obtener información sobre la hora de llegada de los datos. Esto contrasta con el esquema exponencial donde los índices son de tamaños iguales. El ejemplo discutido y Algoritmo 1 revela que para acceder a cualquier dato, necesitamos acceder al \"índice\" mayor sólo una vez seguido por uno o más accesos al \"índice\" menor. El número de acceso \"índice\" menor depende del número de ubicaciones internas. Como el número de ubicaciones internas varía de elemento a elemento (por ejemplo, Weather está generalmente asociado con una ciudad mientras que el tráfico se granula hasta las carreteras principales y menores de una ciudad), argumentamos que la estructura de la información de localización mapeada puede ser visualizada como un bosque que es una colección de árboles generales, el número de árboles generales dependiendo de los tipos de información transmitida y la profundidad de un árbol dependiendo de la granularidad de la información de Para nuestros experimentos, asumimos el bosque como una colección de árboles M-ary equilibrados. Asumimos además que los árboles de la arteria M están llenos al asumir la presencia de nodos ficticios en diferentes niveles de un árbol. Así, si el número de ítems de datos es d y la altura del árbol es m, entonces n= (m*d-1)/(m-1) donde n es el número de vértices en el árbol e i= (d-1)/(m-1) donde i es el número de vértices internos. El tiempo de afinación para un ítem de datos implica 1 unidad de tiempo requerido para acceder al \"índice\" principal más el tiempo requerido para acceder a los ítems de datos presentes en las hojas del árbol. Por lo tanto, el tiempo de sintonización con d ítems de datos es t = logmd+1 Podemos decir que el tiempo de sintonización está limitado por O(logmd). Comparamos nuestro esquema con el esquema de indexación distribuida y exponencial. Asumimos una emisión plana y el número de páginas que varían de 5000 a 25000. Los diversos parámetros de simulación se muestran en la Tabla 1. La Figura 5-8 muestra los tiempos relativos de afinación de tres algoritmos de indexación, es decir, el LBIS, esquema exponencial y el esquema de árbol distribuido. La Figura 5 muestra el resultado para el número de nodos internos de ubicación = 3. Podemos ver que LBIS supera significativamente a los otros esquemas. El tiempo de afinación en LBIS varía de aproximadamente 6,8 a 8. Este gran tiempo de afinación se debe al hecho de que después de alcanzar el menor \"índice\" menor, la MU puede tener que acceder a pocos cubos secuencialmente para obtener el cubo de datos requerido. Podemos ver que el tiempo de afinación tiende a ser estable a medida que aumenta la duración de la emisión. En la figura 6 se considera m= 4. Aquí podemos ver que el exponencial y el rendimiento distribuido casi de manera similar, aunque el primero parece funcionar ligeramente mejor a medida que aumenta la longitud de emisión. Un patrón muy interesante es visible en la figura 7. Para las emisiones de menor tamaño, el LBIS parece tener un tiempo de afinación mayor que los otros dos esquemas. Pero a medida que aumenta la duración de la emisión, es claramente visible que el LBIS supera a los otros dos esquemas. La indexación del árbol distribuido muestra un comportamiento similar al del LBIS. El tiempo de afinación en LBIS sigue siendo bajo porque el algoritmo permite a la MU saltarse algunos Índices Menores intermedios. Esto permite que la MU se mueva a niveles más bajos directamente después de entrar en modo activo, ahorrando así energía valiosa. Esta acción no es posible en la indexación de árboles distribuidos y por lo tanto podemos observar que su tiempo de afinación es más que el esquema LBIS, aunque tiene mejores resultados que el esquema exponencial. La Figura 8, en contraste, nos muestra que el tiempo de afinación en LBIS, aunque menor que los otros dos esquemas, tiende a aumentar bruscamente a medida que la longitud de emisión se hace mayor que las 15000 páginas. Esto puede atribuirse tanto al aumento del tiempo necesario para escanear los Índices Menores intermedios como a la duración de la emisión. Pero podemos observar que la pendiente de la curva LBIS es significativamente menor que las otras dos curvas. Tabla 1 Parámetros de simulación P Valores de definición N Número de datos Elementos 5000 - 25000 m Número de nodos de ubicación internos 3, 4, 5, 6 B Capacidad del cubo sin \"índice\" (para \"índice\" exponencial) 10,64,128,256 i Base del índice para \"índice\" exponencial 2,4,6,8 k Tamaño del índice para árbol distribuido 8 bytes Los resultados de la simulación establecen algunos hechos sobre nuestro esquema de indexación basado En la mayoría de los casos, el sistema funciona mejor que los otros dos en términos de tiempo de afinación. A medida que aumenta la duración de la emisión, después de cierto punto, aunque el tiempo de afinación aumenta como resultado de factores que hemos descrito antes, el esquema siempre funciona mejor que los otros dos esquemas. Debido al límite prescrito del número de páginas en el papel, no podemos mostrar más resultados. Pero estos resultados omitidos muestran una tendencia similar a la de los resultados representados en la figura 5-8. 7. CONCLUSIÓN Y FUTURO TRABAJO En este trabajo hemos presentado un esquema para el mapeo de datos de radiodifusión inalámbrica con sus ubicaciones. Hemos presentado un ejemplo para mostrar cómo la estructura jerárquica del árbol de ubicación mapea con los datos para crear LDD. Hemos presentado un esquema llamado LBIS para \"indexar\" este LDD. Hemos utilizado la propiedad de contención de LDD en el esquema que limita la búsqueda a un estrecho rango de datos en la emisión, ahorrando así energía valiosa en el dispositivo. La asignación de datos con ubicaciones y el esquema de indexación se utilizará en nuestro proyecto DAYS para crear la arquitectura basada en empuje. El LBIS se ha comparado con otros dos sistemas de indexación prominentes, a saber, el sistema de indexación de árboles distribuidos y el sistema de indexación exponencial. En nuestras simulaciones demostramos que el esquema LBIS tiene el menor tiempo de afinación para las emisiones que tienen un gran número de páginas, ahorrando así una valiosa potencia de batería en la MU. 22 En el trabajo futuro tratamos de incorporar la arquitectura basada en el tirón en nuestro proyecto DAYS. Los datos del servidor están disponibles para el acceso de los usuarios globales. Esto se puede hacer poniendo una solicitud al servidor de origen. La consulta en este caso es una consulta global. Se transfiere del servidor de origen de los usuarios al servidor de destino mediante el uso de satélites LEO. Tenemos la intención de utilizar nuestro esquema de LDD y arquitectura de estadificación de datos en la arquitectura basada en el tirón. Demostraremos que el esquema de LDD junto con la arquitectura de estadificación de datos mejora significativamente la latencia para la consulta global y local. 8. REFERENCIAS [1] Acharya, S., Alonso, R. Franklin, M y Zdonik S. Disco de transmisión: Gestión de datos para entornos de comunicación asimétricos. En Actas de la Conferencia de la ACM SIGMOD sobre Gestión de Datos, págs. 199 a 210, San José, CA, mayo de 1995. [2] Chen, M.S.,Wu, K.L. y Yu, P. S. Optimizando la asignación de \"índice\" para la difusión secuencial de datos en la computación móvil inalámbrica. IEEE Transactions on Knowledge and Data Engineering (TKDE), 15(1):161-173, enero/febrero de 2003. Gráfico 5 Tamaño de la transmisión (# cubos) Dist tree Expo LBIS Figura 6. Tamaño de la transmisión (# cubos) Dist tree Expo LBIS Figura 7. Tamaño de la transmisión (# cubos) Dist tree Expo LBIS Figura 8. Tamaño de la transmisión (# cubos) Árbol dist Expo LBIS Tiempo medio de afinación Tiempo medio de afinación Tiempo medio de afinación 23 [3] Hu, Q. L., Lee, D. L. y Lee, W.C. Evaluación del rendimiento de un sistema inalámbrico de difusión jerárquica de datos. En Actas de la Quinta Conferencia Internacional Anual de ACM sobre Computación y Redes Móviles (MobiCom99), págs. 163 a 173, Seattle, WA, agosto de 1999. [4] Hu, Q. L. Lee, W.C. y Lee, D. L. Power consultas conservadoras de múltiples atributos en la transmisión de datos. En Actas de la 16a Conferencia Internacional sobre Ingeniería de Datos (ICDE00), páginas 157-166, San Diego, CA, febrero de 2000. [5] Imielinski, T., Viswanathan, S. y Badrinath. B. R. Filtrado eficiente de energía de los datos en el aire. En Actas de la Cuarta Conferencia Internacional sobre Tecnología de Bases de Datos Ampliadas (EDBT94), págs. 245 a 258, Cambridge, Reino Unido, marzo de 1994. [6] Imielinski, T., Viswanathan, S. y Badrinath. B. R. Datos sobre el aire - Organización y acceso. Operaciones de IEEE en Ingeniería de Conocimientos e Datos (TKDE), 9(3):353-372, mayo/junio de 1997. [7] Shih, E., Bahl, P. y Sinclair, M. J. Wake on wireless: Una estrategia de ahorro de energía impulsada por eventos para dispositivos operados por baterías. En Actas de la 8a Conferencia Internacional Anual de ACM sobre Computación y Redes Móviles (MobiCom02), págs. 160 a 171, Atlanta, GA, septiembre de 2002. [8] Shivakumar N. y Venkatasubramanian, S. Indización energéticamente eficiente para la difusión de información en sistemas inalámbricos. ACM/Baltzer Journal of Mobile Networks and Applications (MONET), 1(4):433-446, diciembre de 1996. [9] Tan K. L. y Yu, J. X. Filtración energéticamente eficiente de emisiones no uniformes. En Actas de la 16a Conferencia Internacional sobre Sistemas de Computación Distribuida (ICDCS96), págs. 520 a 527, Hong Kong, mayo de 1996. [10] Viredaz, M. A., Brakmo, L. S. y Hamburgen, W. R. Gestión de energía en dispositivos portátiles. ACM Coue, 1(7):44-52, octubre de 2003. [11] Garg, N. Kumar, V., & Dunham, M.H. Mapeo e indización de información en DAYS, 6o Taller Internacional sobre Movilidad en Bases de Datos y Sistemas Distribuidos, en conjunción con la 14a Conferencia Internacional sobre Aplicaciones de Bases de Datos y Sistemas Expertos, 1o a 5 de septiembre, Praga, República Checa, 2003. [12] Acharya D., Kumar, V., & Dunham, M.H. InfoSpace: Sistema de difusión de datos públicos híbrido y adaptativo para computación ubicua. Aceptado para publicación en el número especial de Pervasive Computing. Wiley Journal for Wireless Communications and Mobile Computing, 2004. [13] Acharya D., Kumar, V., & Prabhu, N. Descubriendo y usando Servicios Web en M-Commerce, Proceedings for 5th VLDB Workshop on Technologies for E-Services, Toronto, Canada,2004. [14] Acharya D., Kumar, V. Indexing Location Depending Data in broadcast en ambiente. Aceptado para su publicación, número especial de JDIM sobre Gestión de Datos Distribuidos, 2005. [15] Flinn, J., Sinnamohideen, S., & Satyanarayan, M. Data Staging on No Trusted Surrogates, Intel Research, Pittsburg, Unpublished Report, 2003. [16] Seydim, A.Y., Dunham, M.H. & Kumar, V. Location dependiente consulta processing, Actas del segundo taller internacional de ACM sobre ingeniería de datos para acceso inalámbrico y móvil, p.47-53, Santa Barbara, California, USA, 2001. [17] Xu, J., Lee, W.C., Tang., X. Índice exponencial: Un esquema de indexación distribuida para los datos sobre el aire. En Actas de la II Conferencia Internacional ACM/USENIX sobre Sistemas, Aplicaciones y Servicios Móviles (MobiSys04), Boston, MA, junio de 2004. 24 ",
            "error": [
                "índice",
                "índice",
                "index",
                "índice",
                "índice",
                "índice",
                "índice",
                "índice",
                "índice",
                "índice",
                "índice",
                "índice",
                "índice",
                "índice",
                "índice",
                "índice",
                "indexar",
                "index",
                "índice",
                "índice",
                "índice",
                "índice",
                "índice",
                "índice",
                "índice",
                "índice",
                "índice",
                "índice",
                "índice",
                "índice",
                "índice",
                "índice",
                "índice",
                "índice",
                "índice",
                "índice",
                "índice",
                "índice",
                "índice",
                "índice",
                "índice",
                "índice",
                "índice",
                "índice",
                "índice",
                "índice",
                "índice",
                "índice",
                "índice",
                "índice",
                "índice",
                "índice",
                "índice",
                "índice",
                "índice",
                "índice",
                "index",
                "índice",
                "índice",
                "índice",
                "índice",
                "índice",
                "índice",
                "índice",
                "índice",
                "índice",
                "índice",
                "indexar",
                "índice"
            ]
        },
        "location base service": {
            "translated_key": [],
            "translated_annotated_text": "Esquema de Indización basado en la ubicación para DAYS Debopam Acharya y Vijay Kumar 1 Computer Science and Informatics University of Missouri-Kansas City Kansas City, MO 64110 dargc(kumarv)@umkc.edu RESUMEN La difusión de datos a través de canales inalámbricos para transmitir información a los consumidores se está volviendo bastante común. Se han propuesto muchos planes de difusión, pero la mayoría de ellos llevan los datos a canales inalámbricos para consumo general. La difusión basada en push [1] es esencialmente asimétrica, es decir, el volumen de datos es mayor desde el servidor a los usuarios que desde los usuarios de vuelta al servidor. El esquema basado en el empuje requiere una indexación que indica cuándo se transmitirán los datos y su posición en la emisión. Latencia de acceso y tiempo de afinación son los dos parámetros principales que pueden utilizarse para evaluar un esquema de indexación. Dos de los importantes esquemas de indexación propuestos anteriormente se basaban en los árboles y los esquemas de indexación exponencial. Ninguno de estos planes pudo satisfacer los requisitos de los datos dependientes de la ubicación (DDL), que es una característica muy deseable de la difusión de datos. En este artículo, discutimos la emisión de LDD en nuestro proyecto DAta in Your Space (DAYS), y proponemos un esquema para la indexación de LDD. Argumentamos que este sistema, cuando se aplica a la DDTS, mejora significativamente el rendimiento en términos de tiempo de afinación en los esquemas antes mencionados. Demostramos nuestro argumento con la ayuda de resultados de simulación. Categorías y Descriptores sujetos H.3.1 [Sistemas de información]: Almacenamiento y recuperación de información - análisis e indexación de contenido; H.3.3 [Sistemas de información]: Almacenamiento y recuperación de información - búsqueda y recuperación de información. Términos generales Algoritmos, Rendimiento, Experimentación 1. INTRODUCCIÓN La difusión inalámbrica de datos es una forma económica y eficiente de poner los datos deseados a disposición de un gran número de usuarios móviles o estáticos. El modo de transferencia de datos es esencialmente asimétrico, es decir, la capacidad de transferencia de datos (comunicación descendente) del servidor al cliente (usuario móvil) es significativamente mayor que el cliente o usuario móvil al servidor (comunicación ascendente). La eficacia de un sistema de difusión de datos se determina por su capacidad para proporcionar a los usuarios los datos requeridos en cualquier lugar y en cualquier momento. Una de las mejores maneras de lograr esto es a través de la difusión de servicios basados en la ubicación altamente personalizados (LBS) que permite a los usuarios acceder a datos dependientes de la ubicación personalizada. Un ejemplo sería alguien usando su dispositivo móvil para buscar un restaurante vegetariano. La aplicación LBS interactuaría con otros componentes de tecnología de localización o utilizaría la entrada de usuarios móviles para determinar la ubicación de los usuarios y descargar la información sobre los restaurantes cercanos al usuario sintonizando el canal inalámbrico que está difundiendo LDD. Vemos un despliegue limitado de LBS por parte de algunos proveedores de servicios. Pero hay todos los indicios de que con el tiempo se resolverán algunos de los complejos problemas técnicos, como el marco de localización uniforme, el cálculo y el seguimiento de ubicaciones en todo tipo de lugares, el posicionamiento en diversos entornos, aplicaciones de localización innovadoras, etc., y LBS se convertirá en una instalación común y ayudará a mejorar la productividad del mercado y el confort del cliente. En nuestro proyecto llamado DAYS, utilizamos el mecanismo de difusión de datos inalámbricos para impulsar LDD a los usuarios y usuarios móviles monitorear y sintonizar el canal para encontrar y descargar los datos requeridos. Sin embargo, es probable que una emisión simple cause una degradación significativa del rendimiento de los dispositivos móviles con limitaciones energéticas, y una solución común a este problema es el uso de una indexación eficiente del aire. El enfoque de indexación almacena información de control que informa al usuario sobre la ubicación de los datos en la emisión y cómo y cuándo pudo acceder a ella. Un usuario móvil, por lo tanto, tiene un poco de tiempo libre para entrar en el modo de somnífero que conserva valiosa energía. También permite al usuario personalizar su propio dispositivo móvil afinando selectivamente la información de su elección. La eficiencia del acceso y la conservación de la energía son las dos cuestiones importantes para los sistemas de radiodifusión de datos. La eficiencia de acceso se refiere a la latencia experimentada cuando se inicia una solicitud hasta que se recibe la respuesta. Conservación de la energía [7, 10] se refiere al uso eficiente de la energía limitada del dispositivo móvil para acceder a los datos de radiodifusión. Dos parámetros que afectan a estos son el tiempo de afinación y la latencia de acceso. El tiempo de sintonización se refiere al tiempo durante el cual la unidad móvil (MU) permanece en estado activo para sintonizar el canal y descargar los datos requeridos. También se puede definir como el número de cubos sintonizados por el dispositivo móvil en estado activo para obtener los datos requeridos. La latencia de acceso puede definirse como el tiempo transcurrido desde que se ha emitido una solicitud hasta que se ha recibido la respuesta. 1 Esta investigación fue apoyada por una subvención de NSF IIS-0209170. En el pasado se han propuesto varios esquemas de indexación, entre los que destacan los basados en árboles y los esquemas de indexación exponencial [17]. Las principales desventajas de los esquemas basados en árboles son que se basan en estructuras arbóreas centralizadas. Para iniciar una búsqueda, la MU tiene que esperar hasta que llegue a la raíz del siguiente árbol de transmisión. Esto afecta significativamente el tiempo de afinación de la unidad móvil. Los esquemas exponenciales facilitan la replicación de índices compartiendo enlaces en diferentes árboles de búsqueda. Para las emisiones con un gran número de páginas, se ha demostrado que el esquema exponencial funciona de manera similar a los esquemas basados en árboles en términos de latencia de acceso. Además, la duración media de la emisión aumenta debido a la replicación del índice y esto puede causar un aumento significativo de la latencia del acceso. Ninguno de los sistemas de indexación mencionados es igualmente eficaz en la difusión de datos dependientes de la ubicación. Además de proporcionar baja latencia, carecen de propiedades que se utilizan para abordar los problemas de DDT. Proponemos un esquema de indexación en DAYS que se ocupa de algunos de estos problemas. Demostramos con resultados de simulación que nuestro esquema supera a algunos de los esquemas de indexación anteriores para la difusión de LDD en términos de tiempo de afinación. El resto del documento se presenta de la siguiente manera. En la sección 2, se analiza el trabajo anterior relacionado con la indexación de los datos de radiodifusión. La sección 3 describe nuestra arquitectura DAYS. Los datos dependientes de la ubicación, su generación y su posterior difusión se presentan en la sección 4. La sección 5 discute nuestro esquema de indexación en detalle. La simulación de nuestro esquema y su evaluación del desempeño se presenta en la sección 6. En la sección 7 se concluye el documento y se menciona la labor futura relacionada. 2. TRABAJO ANTERIOR Varias técnicas de indexación basadas en discos se han utilizado para la indexación de aire. Imielinski et al. [5, 6] aplicó el árbol del índice B+, donde los nodos de la hoja almacenan los tiempos de llegada de los ítems de datos. Se propuso el método de indexación distribuida para reproducir y distribuir eficientemente el árbol de índices en una emisión. Específicamente, el árbol índice se divide en una parte replicada y una parte no replicada. Cada emisión consiste en la parte replicada y la parte no replicada que indiza los elementos de datos inmediatamente después de ella. Como tal, cada nodo en la parte no replicada aparece sólo una vez en una emisión y, por lo tanto, reduce el costo de replicación y latencia de acceso, al tiempo que logra un buen tiempo de afinación. Chen et al. [2] y Shivakumar et al. [8] considera estructuras de árboles desequilibradas para optimizar el consumo de energía para el acceso a datos no uniformes. Estas estructuras minimizan el costo medio de búsqueda de índices reduciendo el número de búsquedas de datos en caliente a expensas de gastar más en datos en frío. Tan y Yu discutieron la organización de datos e índices bajo la emisión sesgada También se han sugerido métodos de Hashing y firma para la transmisión inalámbrica que admite consultas de igualdad [9]. En [5] se propuso un método flexible de indización. El índice flexible primero clasifica los elementos de datos en orden ascendente (o descendente) de los valores clave de búsqueda y luego los divide en segmentos p. El primer cubo en cada segmento de datos contiene un índice de control, que es un índice binario que asigna un valor clave dado al segmento que contiene esa clave, y un índice local, que es un índice de entrada m que asigna un valor clave dado a los cubos dentro del segmento actual. Al afinar los parámetros de p y m, los clientes móviles pueden lograr un buen tiempo de afinación o una buena latencia de acceso. Otra técnica de indexación propuesta es el esquema de indexación exponencial [17]. En este esquema, se utiliza un índice parametrizado, llamado índice exponencial, para optimizar la latencia del acceso o el tiempo de afinación. Facilita la replicación de índices mediante la vinculación de diferentes árboles de búsqueda. Todos los regímenes mencionados se han aplicado a datos que no están relacionados entre sí. Estos datos no relacionados pueden agruparse o no agruparse. Sin embargo, ninguno de ellos se ha ocupado específicamente de los requisitos de la DDT. Los datos dependientes de la ubicación son datos que están asociados con una ubicación. En la actualidad hay varias aplicaciones que se ocupan de la DDTS [13, 16]. Casi todos ellos representan LDD con la ayuda de estructuras jerárquicas [3, 4]. Esto se basa en la propiedad de contención de datos dependientes de la ubicación. La propiedad Containment ayuda a determinar la posición relativa de un objeto definiendo o identificando ubicaciones que contienen esos objetos. Las ubicaciones subordinadas están jerárquicamente relacionadas entre sí. Así, la propiedad Containment limita la gama de disponibilidad u operación de un servicio. Usamos esta propiedad de contención en nuestro esquema de indexación para indexar LDD. 3. DAYS ARCHITECTURE DAYS se ha conceptualizado para difundir datos tópicos y no tópicos a los usuarios en un espacio de difusión local y para aceptar consultas de usuarios individuales a nivel mundial. Los datos tópicos, por ejemplo, información meteorológica, información de tráfico, información de existencias, etc., cambian constantemente con el tiempo. Los datos no tópicos como hotel, restaurante, precios inmobiliarios, etc., no cambian tan a menudo. Así, imaginamos la presencia de dos tipos de distribución de datos: En el primer caso, el servidor empuja los datos a los usuarios locales a través de canales inalámbricos. El otro caso se refiere al servidor que envía los resultados de las consultas de los usuarios a través de canales inalámbricos de enlace descendente. Técnicamente, vemos la presencia de dos tipos de colas en el acceso basado en datos. Una es una cola muy cargada que contiene consultas cargadas globalmente. La otra es una cola relativamente ligera que consiste en consultas subidas localmente. La arquitectura DAYS [12], como se muestra en la figura 1, consiste en un servidor de datos, programador de transmisiones, coordinador de DAYS, red de satélites LEO para la entrega de datos a nivel mundial y un espacio de transmisión local. Los datos se introducen en el espacio de transmisión local para que los usuarios puedan sintonizarse con los canales inalámbricos para acceder a los datos. El espacio de transmisión local consiste en una torre de transmisión, unidades móviles y una red de máquinas de puesta en escena de datos llamadas subrogados. La estadificación de datos en sustitutos se ha investigado anteriormente como una técnica exitosa [12, 15] para los datos relacionados con los usuarios de caché. Creemos que la estadificación de datos se puede utilizar para reducir drásticamente el tiempo de latencia tanto para los datos de radiodifusión local como para las respuestas globales. La solicitud de consulta en los sustitutos puede utilizarse posteriormente para generar los patrones de popularidad que finalmente deciden el horario de emisión [12]. 18 Popularidad Comentarios de Surrogates for Broadcast Scheduler Local Space Broadcast Tower SurrogateMU MU MU Servidor de datosHorario de radiodifusiónDÍAS Coordinador Canal local de enlace descendente Canal global de enlace descendente Pull request cola cola Solicitud global cola Solicitud local cola Ubicación índice basado en Starbucks Plaza Kansas City Figura 1. Arquitectura DAYS Figura 2. Ubicación Estructura deStarbucks, Plaza 4. DATOS DEPENDIENTES DE LOCALIZACIÓN (LDD) Argumentamos que la incorporación de información de ubicación en la transmisión inalámbrica de datos puede disminuir significativamente la latencia de acceso. Esta propiedad se convierte en muy útil para la unidad móvil que tiene capacidad de almacenamiento y procesamiento limitada. Hay una variedad de aplicaciones para obtener información sobre tráfico, reservas de restaurantes y hoteles, comida rápida, gasolineras, oficina de correos, tiendas de comestibles, etc. Si estas aplicaciones se combinan con información de ubicación, entonces la búsqueda será rápida y altamente rentable. Una propiedad importante de las ubicaciones es Containment que ayuda a determinar la ubicación relativa de un objeto con respecto a su padre que contiene el objeto. Por lo tanto, Containment limita el rango de disponibilidad de un dato. Usamos esta propiedad en nuestro esquema de indexación. La base de datos contiene los contenidos transmitidos que se convierten en LDD [14] asociándolos con las ubicaciones respectivas para que puedan transmitirse de manera agrupada. El agrupamiento de LDD ayuda al usuario a localizar la información de manera eficiente y soporta la propiedad de contención. Presentamos un ejemplo para justificar nuestra propuesta. Ejemplo: Supongamos que un usuario emite una consulta Starbucks Coffee en Plaza por favor. para acceder a información sobre la sucursal Plaza de Starbucks Coffee en Kansas City. En el caso de la ubicación independiente establecido el sistema enumerará todas las cafeterías Starbucks en el área de Kansas City. Es evidente que esas respuestas aumentarán la latencia del acceso y no son deseables. Estos se pueden administrar de manera eficiente si el servidor tiene datos dependientes de la ubicación, es decir, una asignación entre los datos de una cafetería de Starbucks y su ubicación física. Además, para una consulta que incluya el rango de ubicaciones de Starbucks, bastará con una sola consulta solicitando ubicaciones para toda la región de Kansas City, como se muestra en la Figura 2. Esto ahorrará una enorme cantidad de ancho de banda al disminuir el número de mensajes y, al mismo tiempo, será útil para prevenir el cuello de botella de escalabilidad en una zona muy poblada. 4.1 Función de asignación para LDD El ejemplo justifica la necesidad de una función de asignación para procesar consultas dependientes de la ubicación. Esto será especialmente importante para las consultas basadas en la atracción en todo el mundo para las cuales la respuesta podría estar compuesta para diferentes partes del mundo. La función de mapeo es necesaria para construir el horario de emisión. Definimos Global Property Set (GPS) [11], Information Content (IC) set, and Location Jerarchy (LH) set where IC  GPS and LH  GPS to develop a mapping function. LH = {l1, l2, l3...,lk} donde li representan ubicaciones en el árbol de ubicación y IC = {ic1, ic2, ic3,...,icn} donde ici representan tipo de información. Por ejemplo, si tenemos tráfico, tiempo, y la información de stock están en transmisión entonces IC = {ictráfico, icweather, e icstock}. El esquema de asignación debe ser capaz de identificar y seleccionar un miembro IC y un nodo LH para (a) asociación correcta, (b) coincidencia de granularidad, (c) y condición de terminación. Por ejemplo, el clima • IC podría estar asociado con un país o un estado o una ciudad o un pueblo de LH. La coincidencia de granularidad entre el tiempo y un nodo LH es según el requisito del usuario. Así, con una granularidad gruesa la información meteorológica se asocia con un país para obtener el clima de los países y con la ciudad en una granularidad más fina. Si una ciudad es la mejor granularidad, entonces define la condición terminal para la asociación entre IC y LH para el tiempo. Esto significa que un usuario no puede obtener información meteorológica sobre la subdivisión de una ciudad. En realidad, el clima de una subdivisión no tiene ningún sentido. Desarrollamos un simple esquema de mapeo heurístico basado en las necesidades del usuario. Dejar IC = {m1, m2,m3.,..., mk}, donde mi representa su elemento y dejar LH = {n1, n2, n3,..., nl}, donde ni representa miembro LHs. Definimos GPS para IC (GPSIC)  GPS y para LH (GPSLH)  GPS como GPSIC = {P1, P2,..., Pn}, donde P1, P2, P3,..., Pn son propiedades de sus miembros y GPSLH = {Q1, Q2,..., Qm} donde Q1, Q2,..., Qm son propiedades de sus miembros. Las propiedades de un miembro particular de IC son un subconjunto de GPSIC. Generalmente es cierto que (conjunto de propiedades (miÃ3n IC) â € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € Por ejemplo, stock • IC y película • IC calificación no tienen ninguna propiedad en común. Asumimos que dos o más miembros del CI tienen al menos una propiedad geográfica común (es decir, lugar) porque DAYS transmite información sobre esas categorías, que están estrechamente vinculadas con un lugar. Por ejemplo, las acciones de una empresa están relacionadas con un país, el clima está relacionado con una ciudad o estado, etc. Definimos el subconjunto de propiedades de mio IC como PSm i ♥ mi • IC y PSm i = {P1, P2,..., Pr} donde r ≤ n. • Pr {Pr • PSm i → Pr • GPSIC} que implica que • i, PSm i  GPSIC. Las propiedades geográficas de este conjunto son indicativas de si mi IC puede ser mapeado a un solo nivel de granularidad (es decir. una sola ubicación) en LH o varios niveles de granularidad (es decir, más de un nodo en 19 de la jerarquía) en LH. ¿Cuántos y qué niveles de granularidad debe un mapa mi, depende del nivel en el que el proveedor de servicios quiere proporcionar información sobre el mi en cuestión. Del mismo modo, definimos un subconjunto de propiedades de los miembros de LH como PSn j Ł nj Ł LH que puede ser escrito como PSn j ={Q1, Q2, Q3,..., Qs} donde s ≤ m. Además, El proceso de mapeo de IC a LH es entonces identificar para algunos mxÃ3 IC uno o mÃ¡s nyÃ3 LH tal que PSmx Ã3 PSnv Esto significa que cuando mx mapea a ny y a todos los niños de ny si mx puede mapear a múltiples niveles de granularidad o mx mapea sólo a ny si mx puede mapear a un solo nivel de granularidad. Asumimos que los nuevos miembros pueden unirse y los antiguos miembros pueden salir de IC o LH en cualquier momento. La eliminación de miembros del espacio del CI es simple, pero la adición de miembros al espacio del CI es más restrictiva. Si queremos añadir un nuevo miembro al espacio IC, primero definimos un conjunto de propiedades para el nuevo miembro: PSmnew_m ={P1, P2, P3,..., Pt} y lo añadimos al CI sólo si la condición: Este régimen tiene una ventaja adicional al permitir a los proveedores de servicios de información controlar el tipo de información que desean proporcionar a los usuarios. Presentamos el siguiente ejemplo para ilustrar el concepto de mapeo. IC = {Tráfico, Stock, Restaurante, Tiempo, Fechas importantes de la historia, Condiciones de la carretera} LH = {País, Estado, Ciudad, Código postal, Principales carreteras} GPSIC = {Surface-mobility, Roads, High, Low, Italian-food, StateName, Temp, CityName, Seat-disponibilidad, Zip, Traffic-jams, Además, PS(ICStock) indicó que Stock solo puede mapear a un solo país. Cuando consideramos el miembro Tráfico del espacio IC, sólo PS(ICTraffic) â € ¢ PScity â € TM. Como PS(ICTRAFFIC) indica que Traffic puede mapear a una sola ubicación, solo mapea a City y a ninguno de sus hijos. Ahora bien, a diferencia de Stock, el mapeo del tráfico con las principales carreteras, que es un hijo de la ciudad, es significativo. Sin embargo, los proveedores de servicios tienen derecho a controlar los niveles de granularidad a los que desean proporcionar información sobre un miembro del espacio IC. PS(ICRoad conditions) • PSState  y PS(ICRoad conditions) • PSCity. Así que las condiciones de la carretera son mapas al Estado, así como a la ciudad. Como PS(ICRoad conditions) indica que las condiciones de la carretera pueden mapear a múltiples niveles de granularidad, las condiciones de la carretera también mapearán a Zip Code y las principales carreteras, que son los niños del Estado y la ciudad. Del mismo modo, los mapas del restaurante sólo al código postal, y los mapas meteorológicos al estado, la ciudad y sus hijos, las carreteras principales y el código postal. 5. ESQUEMA DE ÍNDICE BASADA EN LOCALIZACIÓN Esta sección discute nuestro esquema de indexación basado en la ubicación (LBIS). El esquema está diseñado para ajustarse a la emisión LDD en nuestro proyecto DAYS. Como se discutió anteriormente, utilizamos la propiedad de contención de LDD en el esquema de indexación. Esto limita significativamente la búsqueda de nuestros datos requeridos a una parte particular de la transmisión. Por lo tanto, argumentamos que el esquema proporciona tiempo de afinación limitado. Describimos la arquitectura de nuestro esquema de indexación. Nuestro esquema contiene cubos de datos separados y cubos de índices. Los cubos de índice son de dos tipos. El primer tipo se llama el índice Mayor. El índice Major proporciona información sobre los tipos de datos transmitidos. Por ejemplo, si tenemos la intención de transmitir información como Entretenimiento, Tiempo, Tráfico, etc., entonces el índice principal apunta a estos tipos principales de información y/o sus principales subtipos de información, el número de subtipos principales variando de una información a otra. Esto limita estrictamente el número de accesos a un índice principal. El índice Major nunca apunta a los datos originales. Señala a los subíndices llamados el índice Menor. Los índices menores son los índices que realmente apuntan a los datos originales. Llamamos a estos indicadores menores como punteros de ubicación, ya que apunta a los datos que están asociados con una ubicación. Por lo tanto, nuestra búsqueda de datos incluye el acceso a un índice mayor y algunos índices menores, el número de índice menor variando dependiendo del tipo de información. Por lo tanto, nuestro esquema de indexación tiene en cuenta la naturaleza jerárquica del LDD, la propiedad Containment, y requiere que nuestro programa de transmisión se agrupe en función del tipo de datos y la ubicación. La estructura de la jerarquía de ubicación requiere el uso de diferentes tipos de índice en diferentes niveles. La estructura y las posiciones del índice dependen estrictamente de la jerarquía de ubicación descrita anteriormente en nuestro esquema de asignación. Ilustramos la implementación de nuestro esquema con un ejemplo. Posteriormente se mencionan las normas para la elaboración del índice. 20 A1 Entretenimiento Restaurante Película A2 A3 A4 R1 R2 R3 R4 R5 R6 R7 R8 Tiempo KC SL JC SF Entretenimiento R1 R2 R3 R4 R4 R5 R6 R7 R8 KC SL JC SF (A, R, NEXT = 8) 3, R5 4, R7 Tipo (S, L) ER W E EM (1, 4) (5, Información cartográfica de ubicación para radiodifusión Figura 4. Datos junto con el índice basado en la ubicación Ejemplo: Supongamos que nuestro contenido de transmisión contiene ICentertainment y ICweather que se representa como se muestra en la Fig. 3. Ai representa las áreas de la ciudad y Ri representa las carreteras en un área determinada. Las hojas de la estructura meteorológica representan cuatro ciudades. La estructura del índice se indica en la Fig. 4 que muestra la posición del índice mayor y menor y los datos en el horario de emisión. Proponemos las siguientes reglas para la creación del programa de emisión indexado por aire: • Se crean el índice mayor y el índice menor. • El índice principal contiene la posición y el rango de diferentes tipos de ítems de datos (Weather and Entertainment, Figura 3) y sus categorías. Las subcategorías de Entretenimiento, Cine y Restaurante, también están en el índice. Así, el índice principal contiene Entretenimiento (E), Entretenimiento-Movie (EM), Entretenimiento-Restaurante (ER), y Tiempo (W). La tupla (S, L) representa la posición inicial (S) del elemento de datos y L representa el rango del elemento en términos de número de cubos de datos. • El índice menor contiene las variables A, R y un puntero Siguiente. En nuestro ejemplo (Figura 3), la carretera R representa el primer nodo del área A. El índice menor se utiliza para apuntar a cubos de datos reales presentes en los niveles más bajos de la jerarquía. En cambio, el índice principal apunta a una gama más amplia de ubicaciones, por lo que contiene información sobre las principales y subcategorías de datos. • La información del índice no se incorpora en los cubos de datos. Los cubos de índice están separados que contienen sólo la información de control. • El número de cubos índice m=#(IC), IC = {ic1, ic2, ic3,...,icn} donde ici representa el tipo de información y # representa la cardinalidad del conjunto de contenido de información IC. En este ejemplo, IC= {icMovie, icWeather, icRestaurant} y así #(IC) =3. Por lo tanto, el número de cubos índice principales es 3. • El mecanismo para resolver la consulta está presente en el coordinador de java en MU. Por ejemplo, si una consulta Q se presenta como Q (Entretenimiento, Película, Road_1), entonces la búsqueda resultante será para la información EM en el índice principal. Nosotros decimos, Q EM. Nuestro índice propuesto funciona de la siguiente manera: Supongamos que una MU emite una consulta que está representada por Java Coordinador presente en la MU como información de restaurante en la carretera 7. Esto es resuelto por el coordinador como Q ER. Esto significa que uno tiene que buscar la unidad de índice ER en el índice principal. Supongamos que el MU entra en el canal en R2. El primer índice que recibe es un índice menor después de R2. En este índice, el valor de la variable Siguiente = 4, lo que significa que el siguiente índice mayor está presente después del cubo 4. La MU puede entrar en modo somnoliento. Se activa después del cubo 4 y recibe el índice principal. Busca información de ER que es la primera entrada en este índice. Ahora es seguro que la MU obtendrá la posición del cubo de datos en el índice menor contiguo. La segunda unidad en el índice menor representa la posición de los datos requeridos R7. Indica que el cubo de datos es el primer cubo en el Área 4. El MU vuelve a entrar en modo somnífero y se activa después del cubo 6. Obtiene los datos necesarios en el siguiente cubo. Presentamos el algoritmo para buscar el Índice basado en la ubicación. Algoritmo 1 Índice basado en la ubicación Buscar en DAYS 1. Escanear la transmisión para el siguiente cubo índice, encontrado=falso 2. Mientras que (no se encuentra) hacer 3. si cubo es el índice mayor entonces 4. Encuentra el Tipo & Tupla (S, L) 5. si S es mayor que 1, entra en modo Doze durante S segundos 6. termina si 7. Despierta en el cubo Sth y observa el índice menor 8. termina si 9. si el cubo es índice menor entonces 10. si TypeRequest no es igual a Typefound y (A,R)Solicitud no es igual a (A,R)found entonces 11. Vaya al modo de doze hasta el SIGUIENTE y repita desde el paso 3 12. terminar si 13. de lo contrario encontrar entrada en Índice Menor que apunta a los datos 14. Calcular la hora de llegada T del cubo de datos 15. Entra en modo somnífero hasta la T 16. Despierta en T y accede a los datos, encontrados = verdadero 17. fin de lo contrario 18. final si 19. final Mientras que 21 6. EVALUACIÓN DE LA EJECUCIÓN La conservación de la energía es la principal preocupación cuando tratamos de acceder a los datos de la transmisión inalámbrica. Un sistema eficiente debe permitir al dispositivo móvil acceder a los datos que necesita manteniéndose activo durante un período mínimo de tiempo. Esto ahorraría una cantidad considerable de energía. Dado que los elementos se distribuyen en función de los tipos y se asignan a ubicaciones adecuadas, argumentamos que nuestra transmisión se ocupa de los tipos de datos agrupados. La unidad móvil tiene que acceder a un índice mayor y a un índice menor relativamente menor para obtener información sobre la hora de llegada de los datos. Esto contrasta con el esquema exponencial donde los índices son de tamaños iguales. El ejemplo discutido y Algoritmo 1 revela que para acceder a cualquier dato, necesitamos acceder al índice mayor sólo una vez seguido por uno o más accesos al índice menor. El número de accesos menores al índice depende del número de ubicaciones internas. Como el número de ubicaciones internas varía de elemento a elemento (por ejemplo, Weather está generalmente asociado con una ciudad mientras que el tráfico se granula hasta las carreteras principales y menores de una ciudad), argumentamos que la estructura de la información de localización mapeada puede ser visualizada como un bosque que es una colección de árboles generales, el número de árboles generales dependiendo de los tipos de información transmitida y la profundidad de un árbol dependiendo de la granularidad de la información de Para nuestros experimentos, asumimos el bosque como una colección de árboles M-ary equilibrados. Asumimos además que los árboles de la arteria M están llenos al asumir la presencia de nodos ficticios en diferentes niveles de un árbol. Así, si el número de ítems de datos es d y la altura del árbol es m, entonces n= (m*d-1)/(m-1) donde n es el número de vértices en el árbol e i= (d-1)/(m-1) donde i es el número de vértices internos. El tiempo de afinación para un ítem de datos implica 1 unidad de tiempo requerido para acceder al índice principal más el tiempo requerido para acceder a los ítems de datos presentes en las hojas del árbol. Por lo tanto, el tiempo de sintonización con d ítems de datos es t = logmd+1 Podemos decir que el tiempo de sintonización está limitado por O(logmd). Comparamos nuestro esquema con el esquema de indexación distribuida y exponencial. Asumimos una emisión plana y el número de páginas que varían de 5000 a 25000. Los diversos parámetros de simulación se muestran en la Tabla 1. La Figura 5-8 muestra los tiempos relativos de afinación de tres algoritmos de indexación, es decir, el LBIS, esquema exponencial y el esquema de árbol distribuido. La Figura 5 muestra el resultado para el número de nodos internos de ubicación = 3. Podemos ver que LBIS supera significativamente a los otros esquemas. El tiempo de afinación en LBIS varía de aproximadamente 6,8 a 8. Este gran tiempo de afinación se debe al hecho de que después de alcanzar el índice menor más bajo, la MU puede tener que acceder a pocos cubos secuencialmente para obtener el cubo de datos requerido. Podemos ver que el tiempo de afinación tiende a ser estable a medida que aumenta la duración de la emisión. En la figura 6 se considera m= 4. Aquí podemos ver que el exponencial y el rendimiento distribuido casi de manera similar, aunque el primero parece funcionar ligeramente mejor a medida que aumenta la longitud de emisión. Un patrón muy interesante es visible en la figura 7. Para las emisiones de menor tamaño, el LBIS parece tener un tiempo de afinación mayor que los otros dos esquemas. Pero a medida que aumenta la duración de la emisión, es claramente visible que el LBIS supera a los otros dos esquemas. La indexación del árbol distribuido muestra un comportamiento similar al del LBIS. El tiempo de afinación en LBIS sigue siendo bajo porque el algoritmo permite a la MU saltarse algunos Índices Menores intermedios. Esto permite que la MU se mueva a niveles más bajos directamente después de entrar en modo activo, ahorrando así energía valiosa. Esta acción no es posible en la indexación de árboles distribuidos y por lo tanto podemos observar que su tiempo de afinación es más que el esquema LBIS, aunque tiene mejores resultados que el esquema exponencial. La Figura 8, en contraste, nos muestra que el tiempo de afinación en LBIS, aunque menor que los otros dos esquemas, tiende a aumentar bruscamente a medida que la longitud de emisión se hace mayor que las 15000 páginas. Esto puede atribuirse tanto al aumento del tiempo necesario para escanear los Índices Menores intermedios como a la duración de la emisión. Pero podemos observar que la pendiente de la curva LBIS es significativamente menor que las otras dos curvas. Tabla 1 Parámetros de simulación P Valores de definición N Número de datos Elementos 5000 - 25000 m Número de nodos de ubicación internos 3, 4, 5, 6 B Capacidad de cubo sin índice (para índice exponencial) 10,64,128,256 i Base de índice para índice exponencial 2,4,6,8 k Tamaño del índice para árbol distribuido 8 bytes Los resultados de la simulación establecen algunos hechos sobre nuestro esquema de indexación basado en la ubicación. En la mayoría de los casos, el sistema funciona mejor que los otros dos en términos de tiempo de afinación. A medida que aumenta la duración de la emisión, después de cierto punto, aunque el tiempo de afinación aumenta como resultado de factores que hemos descrito antes, el esquema siempre funciona mejor que los otros dos esquemas. Debido al límite prescrito del número de páginas en el papel, no podemos mostrar más resultados. Pero estos resultados omitidos muestran una tendencia similar a la de los resultados representados en la figura 5-8. 7. CONCLUSIÓN Y FUTURO TRABAJO En este trabajo hemos presentado un esquema para el mapeo de datos de radiodifusión inalámbrica con sus ubicaciones. Hemos presentado un ejemplo para mostrar cómo la estructura jerárquica del árbol de ubicación mapea con los datos para crear LDD. Hemos presentado un esquema llamado LBIS para indexar este LDD. Hemos utilizado la propiedad de contención de LDD en el esquema que limita la búsqueda a un estrecho rango de datos en la emisión, ahorrando así energía valiosa en el dispositivo. La asignación de datos con ubicaciones y el esquema de indexación se utilizará en nuestro proyecto DAYS para crear la arquitectura basada en empuje. El LBIS se ha comparado con otros dos sistemas de indexación prominentes, a saber, el sistema de indexación de árboles distribuidos y el sistema de indexación exponencial. En nuestras simulaciones demostramos que el esquema LBIS tiene el menor tiempo de afinación para las emisiones que tienen un gran número de páginas, ahorrando así una valiosa potencia de batería en la MU. 22 En el trabajo futuro tratamos de incorporar la arquitectura basada en el tirón en nuestro proyecto DAYS. Los datos del servidor están disponibles para el acceso de los usuarios globales. Esto se puede hacer poniendo una solicitud al servidor de origen. La consulta en este caso es una consulta global. Se transfiere del servidor de origen de los usuarios al servidor de destino mediante el uso de satélites LEO. Tenemos la intención de utilizar nuestro esquema de LDD y arquitectura de estadificación de datos en la arquitectura basada en el tirón. Demostraremos que el esquema de LDD junto con la arquitectura de estadificación de datos mejora significativamente la latencia para la consulta global y local. 8. REFERENCIAS [1] Acharya, S., Alonso, R. Franklin, M y Zdonik S. Disco de transmisión: Gestión de datos para entornos de comunicación asimétricos. En Actas de la Conferencia de la ACM SIGMOD sobre Gestión de Datos, págs. 199 a 210, San José, CA, mayo de 1995. [2] Chen, M.S.,Wu, K.L. y Yu, P. S. Optimizando la asignación de índices para la difusión secuencial de datos en la computación móvil inalámbrica. IEEE Transactions on Knowledge and Data Engineering (TKDE), 15(1):161-173, enero/febrero de 2003. Gráfico 5 Tamaño de la transmisión (# cubos) Dist tree Expo LBIS Figura 6. Tamaño de la transmisión (# cubos) Dist tree Expo LBIS Figura 7. Tamaño de la transmisión (# cubos) Dist tree Expo LBIS Figura 8. Tamaño de la transmisión (# cubos) Árbol dist Expo LBIS Tiempo medio de afinación Tiempo medio de afinación Tiempo medio de afinación 23 [3] Hu, Q. L., Lee, D. L. y Lee, W.C. Evaluación del rendimiento de un sistema inalámbrico de difusión jerárquica de datos. En Actas de la Quinta Conferencia Internacional Anual de ACM sobre Computación y Redes Móviles (MobiCom99), págs. 163 a 173, Seattle, WA, agosto de 1999. [4] Hu, Q. L. Lee, W.C. y Lee, D. L. Power consultas conservadoras de múltiples atributos en la transmisión de datos. En Actas de la 16a Conferencia Internacional sobre Ingeniería de Datos (ICDE00), páginas 157-166, San Diego, CA, febrero de 2000. [5] Imielinski, T., Viswanathan, S. y Badrinath. B. R. Filtrado eficiente de energía de los datos en el aire. En Actas de la Cuarta Conferencia Internacional sobre Tecnología de Bases de Datos Ampliadas (EDBT94), págs. 245 a 258, Cambridge, Reino Unido, marzo de 1994. [6] Imielinski, T., Viswanathan, S. y Badrinath. B. R. Datos sobre el aire - Organización y acceso. Operaciones de IEEE en Ingeniería de Conocimientos e Datos (TKDE), 9(3):353-372, mayo/junio de 1997. [7] Shih, E., Bahl, P. y Sinclair, M. J. Wake on wireless: Una estrategia de ahorro de energía impulsada por eventos para dispositivos operados por baterías. En Actas de la 8a Conferencia Internacional Anual de ACM sobre Computación y Redes Móviles (MobiCom02), págs. 160 a 171, Atlanta, GA, septiembre de 2002. [8] Shivakumar N. y Venkatasubramanian, S. Indización energéticamente eficiente para la difusión de información en sistemas inalámbricos. ACM/Baltzer Journal of Mobile Networks and Applications (MONET), 1(4):433-446, diciembre de 1996. [9] Tan K. L. y Yu, J. X. Filtración energéticamente eficiente de emisiones no uniformes. En Actas de la 16a Conferencia Internacional sobre Sistemas de Computación Distribuida (ICDCS96), págs. 520 a 527, Hong Kong, mayo de 1996. [10] Viredaz, M. A., Brakmo, L. S. y Hamburgen, W. R. Gestión de energía en dispositivos portátiles. ACM Coue, 1(7):44-52, octubre de 2003. [11] Garg, N. Kumar, V., & Dunham, M.H. Mapeo e indización de información en DAYS, 6o Taller Internacional sobre Movilidad en Bases de Datos y Sistemas Distribuidos, en conjunción con la 14a Conferencia Internacional sobre Aplicaciones de Bases de Datos y Sistemas Expertos, 1o a 5 de septiembre, Praga, República Checa, 2003. [12] Acharya D., Kumar, V., & Dunham, M.H. InfoSpace: Sistema de difusión de datos públicos híbrido y adaptativo para computación ubicua. Aceptado para publicación en el número especial de Pervasive Computing. Wiley Journal for Wireless Communications and Mobile Computing, 2004. [13] Acharya D., Kumar, V., & Prabhu, N. Descubriendo y usando Servicios Web en M-Commerce, Proceedings for 5th VLDB Workshop on Technologies for E-Services, Toronto, Canada,2004. [14] Acharya D., Kumar, V. Indexing Location Depending Data in broadcast en ambiente. Aceptado para su publicación, número especial de JDIM sobre Gestión de Datos Distribuidos, 2005. [15] Flinn, J., Sinnamohideen, S., & Satyanarayan, M. Data Staging on No Trusted Surrogates, Intel Research, Pittsburg, Unpublished Report, 2003. [16] Seydim, A.Y., Dunham, M.H. & Kumar, V. Location dependiente consulta processing, Actas del segundo taller internacional de ACM sobre ingeniería de datos para acceso inalámbrico y móvil, p.47-53, Santa Barbara, California, USA, 2001. [17] Xu, J., Lee, W.C., Tang., X. Índice exponencial: Un esquema de indexación distribuida para los datos sobre el aire. En Actas de la II Conferencia Internacional ACM/USENIX sobre Sistemas, Aplicaciones y Servicios Móviles (MobiSys04), Boston, MA, junio de 2004. 24 ",
            "error": []
        },
        "datum stage": {
            "translated_key": [],
            "translated_annotated_text": "Esquema de Indización basado en la ubicación para DAYS Debopam Acharya y Vijay Kumar 1 Computer Science and Informatics University of Missouri-Kansas City Kansas City, MO 64110 dargc(kumarv)@umkc.edu RESUMEN La difusión de datos a través de canales inalámbricos para transmitir información a los consumidores se está volviendo bastante común. Se han propuesto muchos planes de difusión, pero la mayoría de ellos llevan los datos a canales inalámbricos para consumo general. La difusión basada en push [1] es esencialmente asimétrica, es decir, el volumen de datos es mayor desde el servidor a los usuarios que desde los usuarios de vuelta al servidor. El esquema basado en el empuje requiere una indexación que indica cuándo se transmitirán los datos y su posición en la emisión. Latencia de acceso y tiempo de afinación son los dos parámetros principales que pueden utilizarse para evaluar un esquema de indexación. Dos de los importantes esquemas de indexación propuestos anteriormente se basaban en los árboles y los esquemas de indexación exponencial. Ninguno de estos planes pudo satisfacer los requisitos de los datos dependientes de la ubicación (DDL), que es una característica muy deseable de la difusión de datos. En este artículo, discutimos la emisión de LDD en nuestro proyecto DAta in Your Space (DAYS), y proponemos un esquema para la indexación de LDD. Argumentamos que este sistema, cuando se aplica a la DDTS, mejora significativamente el rendimiento en términos de tiempo de afinación en los esquemas antes mencionados. Demostramos nuestro argumento con la ayuda de resultados de simulación. Categorías y Descriptores sujetos H.3.1 [Sistemas de información]: Almacenamiento y recuperación de información - análisis e indexación de contenido; H.3.3 [Sistemas de información]: Almacenamiento y recuperación de información - búsqueda y recuperación de información. Términos generales Algoritmos, Rendimiento, Experimentación 1. INTRODUCCIÓN La difusión inalámbrica de datos es una forma económica y eficiente de poner los datos deseados a disposición de un gran número de usuarios móviles o estáticos. El modo de transferencia de datos es esencialmente asimétrico, es decir, la capacidad de transferencia de datos (comunicación descendente) del servidor al cliente (usuario móvil) es significativamente mayor que el cliente o usuario móvil al servidor (comunicación ascendente). La eficacia de un sistema de difusión de datos se determina por su capacidad para proporcionar a los usuarios los datos requeridos en cualquier lugar y en cualquier momento. Una de las mejores maneras de lograr esto es a través de la difusión de servicios basados en la ubicación altamente personalizados (LBS) que permite a los usuarios acceder a datos dependientes de la ubicación personalizada. Un ejemplo sería alguien usando su dispositivo móvil para buscar un restaurante vegetariano. La aplicación LBS interactuaría con otros componentes de tecnología de localización o utilizaría la entrada de usuarios móviles para determinar la ubicación de los usuarios y descargar la información sobre los restaurantes cercanos al usuario sintonizando el canal inalámbrico que está difundiendo LDD. Vemos un despliegue limitado de LBS por parte de algunos proveedores de servicios. Pero hay todos los indicios de que con el tiempo se resolverán algunos de los complejos problemas técnicos, como el marco de localización uniforme, el cálculo y el seguimiento de ubicaciones en todo tipo de lugares, el posicionamiento en diversos entornos, aplicaciones de localización innovadoras, etc., y LBS se convertirá en una instalación común y ayudará a mejorar la productividad del mercado y el confort del cliente. En nuestro proyecto llamado DAYS, utilizamos el mecanismo de difusión de datos inalámbricos para impulsar LDD a los usuarios y usuarios móviles monitorear y sintonizar el canal para encontrar y descargar los datos requeridos. Sin embargo, es probable que una emisión simple cause una degradación significativa del rendimiento de los dispositivos móviles con limitaciones energéticas, y una solución común a este problema es el uso de una indexación eficiente del aire. El enfoque de indexación almacena información de control que informa al usuario sobre la ubicación de los datos en la emisión y cómo y cuándo pudo acceder a ella. Un usuario móvil, por lo tanto, tiene un poco de tiempo libre para entrar en el modo de somnífero que conserva valiosa energía. También permite al usuario personalizar su propio dispositivo móvil afinando selectivamente la información de su elección. La eficiencia del acceso y la conservación de la energía son las dos cuestiones importantes para los sistemas de radiodifusión de datos. La eficiencia de acceso se refiere a la latencia experimentada cuando se inicia una solicitud hasta que se recibe la respuesta. Conservación de la energía [7, 10] se refiere al uso eficiente de la energía limitada del dispositivo móvil para acceder a los datos de radiodifusión. Dos parámetros que afectan a estos son el tiempo de afinación y la latencia de acceso. El tiempo de sintonización se refiere al tiempo durante el cual la unidad móvil (MU) permanece en estado activo para sintonizar el canal y descargar los datos requeridos. También se puede definir como el número de cubos sintonizados por el dispositivo móvil en estado activo para obtener los datos requeridos. La latencia de acceso puede definirse como el tiempo transcurrido desde que se ha emitido una solicitud hasta que se ha recibido la respuesta. 1 Esta investigación fue apoyada por una subvención de NSF IIS-0209170. En el pasado se han propuesto varios esquemas de indexación, entre los que destacan los basados en árboles y los esquemas de indexación exponencial [17]. Las principales desventajas de los esquemas basados en árboles son que se basan en estructuras arbóreas centralizadas. Para iniciar una búsqueda, la MU tiene que esperar hasta que llegue a la raíz del siguiente árbol de transmisión. Esto afecta significativamente el tiempo de afinación de la unidad móvil. Los esquemas exponenciales facilitan la replicación de índices compartiendo enlaces en diferentes árboles de búsqueda. Para las emisiones con un gran número de páginas, se ha demostrado que el esquema exponencial funciona de manera similar a los esquemas basados en árboles en términos de latencia de acceso. Además, la duración media de la emisión aumenta debido a la replicación del índice y esto puede causar un aumento significativo de la latencia del acceso. Ninguno de los sistemas de indexación mencionados es igualmente eficaz en la difusión de datos dependientes de la ubicación. Además de proporcionar baja latencia, carecen de propiedades que se utilizan para abordar los problemas de DDT. Proponemos un esquema de indexación en DAYS que se ocupa de algunos de estos problemas. Demostramos con resultados de simulación que nuestro esquema supera a algunos de los esquemas de indexación anteriores para la difusión de LDD en términos de tiempo de afinación. El resto del documento se presenta de la siguiente manera. En la sección 2, se analiza el trabajo anterior relacionado con la indexación de los datos de radiodifusión. La sección 3 describe nuestra arquitectura DAYS. Los datos dependientes de la ubicación, su generación y su posterior difusión se presentan en la sección 4. La sección 5 discute nuestro esquema de indexación en detalle. La simulación de nuestro esquema y su evaluación del desempeño se presenta en la sección 6. En la sección 7 se concluye el documento y se menciona la labor futura relacionada. 2. TRABAJO ANTERIOR Varias técnicas de indexación basadas en discos se han utilizado para la indexación de aire. Imielinski et al. [5, 6] aplicó el árbol del índice B+, donde los nodos de la hoja almacenan los tiempos de llegada de los ítems de datos. Se propuso el método de indexación distribuida para reproducir y distribuir eficientemente el árbol de índices en una emisión. Específicamente, el árbol índice se divide en una parte replicada y una parte no replicada. Cada emisión consiste en la parte replicada y la parte no replicada que indiza los elementos de datos inmediatamente después de ella. Como tal, cada nodo en la parte no replicada aparece sólo una vez en una emisión y, por lo tanto, reduce el costo de replicación y latencia de acceso, al tiempo que logra un buen tiempo de afinación. Chen et al. [2] y Shivakumar et al. [8] considera estructuras de árboles desequilibradas para optimizar el consumo de energía para el acceso a datos no uniformes. Estas estructuras minimizan el costo medio de búsqueda de índices reduciendo el número de búsquedas de datos en caliente a expensas de gastar más en datos en frío. Tan y Yu discutieron la organización de datos e índices bajo la emisión sesgada También se han sugerido métodos de Hashing y firma para la transmisión inalámbrica que admite consultas de igualdad [9]. En [5] se propuso un método flexible de indización. El índice flexible primero clasifica los elementos de datos en orden ascendente (o descendente) de los valores clave de búsqueda y luego los divide en segmentos p. El primer cubo en cada segmento de datos contiene un índice de control, que es un índice binario que asigna un valor clave dado al segmento que contiene esa clave, y un índice local, que es un índice de entrada m que asigna un valor clave dado a los cubos dentro del segmento actual. Al afinar los parámetros de p y m, los clientes móviles pueden lograr un buen tiempo de afinación o una buena latencia de acceso. Otra técnica de indexación propuesta es el esquema de indexación exponencial [17]. En este esquema, se utiliza un índice parametrizado, llamado índice exponencial, para optimizar la latencia del acceso o el tiempo de afinación. Facilita la replicación de índices mediante la vinculación de diferentes árboles de búsqueda. Todos los regímenes mencionados se han aplicado a datos que no están relacionados entre sí. Estos datos no relacionados pueden agruparse o no agruparse. Sin embargo, ninguno de ellos se ha ocupado específicamente de los requisitos de la DDT. Los datos dependientes de la ubicación son datos que están asociados con una ubicación. En la actualidad hay varias aplicaciones que se ocupan de la DDTS [13, 16]. Casi todos ellos representan LDD con la ayuda de estructuras jerárquicas [3, 4]. Esto se basa en la propiedad de contención de datos dependientes de la ubicación. La propiedad Containment ayuda a determinar la posición relativa de un objeto definiendo o identificando ubicaciones que contienen esos objetos. Las ubicaciones subordinadas están jerárquicamente relacionadas entre sí. Así, la propiedad Containment limita la gama de disponibilidad u operación de un servicio. Usamos esta propiedad de contención en nuestro esquema de indexación para indexar LDD. 3. DAYS ARCHITECTURE DAYS se ha conceptualizado para difundir datos tópicos y no tópicos a los usuarios en un espacio de difusión local y para aceptar consultas de usuarios individuales a nivel mundial. Los datos tópicos, por ejemplo, información meteorológica, información de tráfico, información de existencias, etc., cambian constantemente con el tiempo. Los datos no tópicos como hotel, restaurante, precios inmobiliarios, etc., no cambian tan a menudo. Así, imaginamos la presencia de dos tipos de distribución de datos: En el primer caso, el servidor empuja los datos a los usuarios locales a través de canales inalámbricos. El otro caso se refiere al servidor que envía los resultados de las consultas de los usuarios a través de canales inalámbricos de enlace descendente. Técnicamente, vemos la presencia de dos tipos de colas en el acceso basado en datos. Una es una cola muy cargada que contiene consultas cargadas globalmente. La otra es una cola relativamente ligera que consiste en consultas subidas localmente. La arquitectura DAYS [12], como se muestra en la figura 1, consiste en un servidor de datos, programador de transmisiones, coordinador de DAYS, red de satélites LEO para la entrega de datos a nivel mundial y un espacio de transmisión local. Los datos se introducen en el espacio de transmisión local para que los usuarios puedan sintonizarse con los canales inalámbricos para acceder a los datos. El espacio de transmisión local consiste en una torre de transmisión, unidades móviles y una red de máquinas de puesta en escena de datos llamadas subrogados. La estadificación de datos en sustitutos se ha investigado anteriormente como una técnica exitosa [12, 15] para los datos relacionados con los usuarios de caché. Creemos que la estadificación de datos se puede utilizar para reducir drásticamente el tiempo de latencia tanto para los datos de radiodifusión local como para las respuestas globales. La solicitud de consulta en los sustitutos puede utilizarse posteriormente para generar los patrones de popularidad que finalmente deciden el horario de emisión [12]. 18 Popularidad Comentarios de Surrogates for Broadcast Scheduler Local Space Broadcast Tower SurrogateMU MU MU Servidor de datosHorario de radiodifusiónDÍAS Coordinador Canal local de enlace descendente Canal global de enlace descendente Pull request cola cola Solicitud global cola Solicitud local cola Ubicación índice basado en Starbucks Plaza Kansas City Figura 1. Arquitectura DAYS Figura 2. Ubicación Estructura deStarbucks, Plaza 4. DATOS DEPENDIENTES DE LOCALIZACIÓN (LDD) Argumentamos que la incorporación de información de ubicación en la transmisión inalámbrica de datos puede disminuir significativamente la latencia de acceso. Esta propiedad se convierte en muy útil para la unidad móvil que tiene capacidad de almacenamiento y procesamiento limitada. Hay una variedad de aplicaciones para obtener información sobre tráfico, reservas de restaurantes y hoteles, comida rápida, gasolineras, oficina de correos, tiendas de comestibles, etc. Si estas aplicaciones se combinan con información de ubicación, entonces la búsqueda será rápida y altamente rentable. Una propiedad importante de las ubicaciones es Containment que ayuda a determinar la ubicación relativa de un objeto con respecto a su padre que contiene el objeto. Por lo tanto, Containment limita el rango de disponibilidad de un dato. Usamos esta propiedad en nuestro esquema de indexación. La base de datos contiene los contenidos transmitidos que se convierten en LDD [14] asociándolos con las ubicaciones respectivas para que puedan transmitirse de manera agrupada. El agrupamiento de LDD ayuda al usuario a localizar la información de manera eficiente y soporta la propiedad de contención. Presentamos un ejemplo para justificar nuestra propuesta. Ejemplo: Supongamos que un usuario emite una consulta Starbucks Coffee en Plaza por favor. para acceder a información sobre la sucursal Plaza de Starbucks Coffee en Kansas City. En el caso de la ubicación independiente establecido el sistema enumerará todas las cafeterías Starbucks en el área de Kansas City. Es evidente que esas respuestas aumentarán la latencia del acceso y no son deseables. Estos se pueden administrar de manera eficiente si el servidor tiene datos dependientes de la ubicación, es decir, una asignación entre los datos de una cafetería de Starbucks y su ubicación física. Además, para una consulta que incluya el rango de ubicaciones de Starbucks, bastará con una sola consulta solicitando ubicaciones para toda la región de Kansas City, como se muestra en la Figura 2. Esto ahorrará una enorme cantidad de ancho de banda al disminuir el número de mensajes y, al mismo tiempo, será útil para prevenir el cuello de botella de escalabilidad en una zona muy poblada. 4.1 Función de asignación para LDD El ejemplo justifica la necesidad de una función de asignación para procesar consultas dependientes de la ubicación. Esto será especialmente importante para las consultas basadas en la atracción en todo el mundo para las cuales la respuesta podría estar compuesta para diferentes partes del mundo. La función de mapeo es necesaria para construir el horario de emisión. Definimos Global Property Set (GPS) [11], Information Content (IC) set, and Location Jerarchy (LH) set where IC  GPS and LH  GPS to develop a mapping function. LH = {l1, l2, l3...,lk} donde li representan ubicaciones en el árbol de ubicación y IC = {ic1, ic2, ic3,...,icn} donde ici representan tipo de información. Por ejemplo, si tenemos tráfico, tiempo, y la información de stock están en transmisión entonces IC = {ictráfico, icweather, e icstock}. El esquema de asignación debe ser capaz de identificar y seleccionar un miembro IC y un nodo LH para (a) asociación correcta, (b) coincidencia de granularidad, (c) y condición de terminación. Por ejemplo, el clima • IC podría estar asociado con un país o un estado o una ciudad o un pueblo de LH. La coincidencia de granularidad entre el tiempo y un nodo LH es según el requisito del usuario. Así, con una granularidad gruesa la información meteorológica se asocia con un país para obtener el clima de los países y con la ciudad en una granularidad más fina. Si una ciudad es la mejor granularidad, entonces define la condición terminal para la asociación entre IC y LH para el tiempo. Esto significa que un usuario no puede obtener información meteorológica sobre la subdivisión de una ciudad. En realidad, el clima de una subdivisión no tiene ningún sentido. Desarrollamos un simple esquema de mapeo heurístico basado en las necesidades del usuario. Dejar IC = {m1, m2,m3.,..., mk}, donde mi representa su elemento y dejar LH = {n1, n2, n3,..., nl}, donde ni representa miembro LHs. Definimos GPS para IC (GPSIC)  GPS y para LH (GPSLH)  GPS como GPSIC = {P1, P2,..., Pn}, donde P1, P2, P3,..., Pn son propiedades de sus miembros y GPSLH = {Q1, Q2,..., Qm} donde Q1, Q2,..., Qm son propiedades de sus miembros. Las propiedades de un miembro particular de IC son un subconjunto de GPSIC. Generalmente es cierto que (conjunto de propiedades (miÃ3n IC) â € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € € Por ejemplo, stock • IC y película • IC calificación no tienen ninguna propiedad en común. Asumimos que dos o más miembros del CI tienen al menos una propiedad geográfica común (es decir, lugar) porque DAYS transmite información sobre esas categorías, que están estrechamente vinculadas con un lugar. Por ejemplo, las acciones de una empresa están relacionadas con un país, el clima está relacionado con una ciudad o estado, etc. Definimos el subconjunto de propiedades de mio IC como PSm i ♥ mi • IC y PSm i = {P1, P2,..., Pr} donde r ≤ n. • Pr {Pr • PSm i → Pr • GPSIC} que implica que • i, PSm i  GPSIC. Las propiedades geográficas de este conjunto son indicativas de si mi IC puede ser mapeado a un solo nivel de granularidad (es decir. una sola ubicación) en LH o varios niveles de granularidad (es decir, más de un nodo en 19 de la jerarquía) en LH. ¿Cuántos y qué niveles de granularidad debe un mapa mi, depende del nivel en el que el proveedor de servicios quiere proporcionar información sobre el mi en cuestión. Del mismo modo, definimos un subconjunto de propiedades de los miembros de LH como PSn j Ł nj Ł LH que puede ser escrito como PSn j ={Q1, Q2, Q3,..., Qs} donde s ≤ m. Además, El proceso de mapeo de IC a LH es entonces identificar para algunos mxÃ3 IC uno o mÃ¡s nyÃ3 LH tal que PSmx Ã3 PSnv Esto significa que cuando mx mapea a ny y a todos los niños de ny si mx puede mapear a múltiples niveles de granularidad o mx mapea sólo a ny si mx puede mapear a un solo nivel de granularidad. Asumimos que los nuevos miembros pueden unirse y los antiguos miembros pueden salir de IC o LH en cualquier momento. La eliminación de miembros del espacio del CI es simple, pero la adición de miembros al espacio del CI es más restrictiva. Si queremos añadir un nuevo miembro al espacio IC, primero definimos un conjunto de propiedades para el nuevo miembro: PSmnew_m ={P1, P2, P3,..., Pt} y lo añadimos al CI sólo si la condición: Este régimen tiene una ventaja adicional al permitir a los proveedores de servicios de información controlar el tipo de información que desean proporcionar a los usuarios. Presentamos el siguiente ejemplo para ilustrar el concepto de mapeo. IC = {Tráfico, Stock, Restaurante, Tiempo, Fechas importantes de la historia, Condiciones de la carretera} LH = {País, Estado, Ciudad, Código postal, Principales carreteras} GPSIC = {Surface-mobility, Roads, High, Low, Italian-food, StateName, Temp, CityName, Seat-disponibilidad, Zip, Traffic-jams, Además, PS(ICStock) indicó que Stock solo puede mapear a un solo país. Cuando consideramos el miembro Tráfico del espacio IC, sólo PS(ICTraffic) â € ¢ PScity â € TM. Como PS(ICTRAFFIC) indica que Traffic puede mapear a una sola ubicación, solo mapea a City y a ninguno de sus hijos. Ahora bien, a diferencia de Stock, el mapeo del tráfico con las principales carreteras, que es un hijo de la ciudad, es significativo. Sin embargo, los proveedores de servicios tienen derecho a controlar los niveles de granularidad a los que desean proporcionar información sobre un miembro del espacio IC. PS(ICRoad conditions) • PSState  y PS(ICRoad conditions) • PSCity. Así que las condiciones de la carretera son mapas al Estado, así como a la ciudad. Como PS(ICRoad conditions) indica que las condiciones de la carretera pueden mapear a múltiples niveles de granularidad, las condiciones de la carretera también mapearán a Zip Code y las principales carreteras, que son los niños del Estado y la ciudad. Del mismo modo, los mapas del restaurante sólo al código postal, y los mapas meteorológicos al estado, la ciudad y sus hijos, las carreteras principales y el código postal. 5. ESQUEMA DE ÍNDICE BASADA EN LOCALIZACIÓN Esta sección discute nuestro esquema de indexación basado en la ubicación (LBIS). El esquema está diseñado para ajustarse a la emisión LDD en nuestro proyecto DAYS. Como se discutió anteriormente, utilizamos la propiedad de contención de LDD en el esquema de indexación. Esto limita significativamente la búsqueda de nuestros datos requeridos a una parte particular de la transmisión. Por lo tanto, argumentamos que el esquema proporciona tiempo de afinación limitado. Describimos la arquitectura de nuestro esquema de indexación. Nuestro esquema contiene cubos de datos separados y cubos de índices. Los cubos de índice son de dos tipos. El primer tipo se llama el índice Mayor. El índice Major proporciona información sobre los tipos de datos transmitidos. Por ejemplo, si tenemos la intención de transmitir información como Entretenimiento, Tiempo, Tráfico, etc., entonces el índice principal apunta a estos tipos principales de información y/o sus principales subtipos de información, el número de subtipos principales variando de una información a otra. Esto limita estrictamente el número de accesos a un índice principal. El índice Major nunca apunta a los datos originales. Señala a los subíndices llamados el índice Menor. Los índices menores son los índices que realmente apuntan a los datos originales. Llamamos a estos indicadores menores como punteros de ubicación, ya que apunta a los datos que están asociados con una ubicación. Por lo tanto, nuestra búsqueda de datos incluye el acceso a un índice mayor y algunos índices menores, el número de índice menor variando dependiendo del tipo de información. Por lo tanto, nuestro esquema de indexación tiene en cuenta la naturaleza jerárquica del LDD, la propiedad Containment, y requiere que nuestro programa de transmisión se agrupe en función del tipo de datos y la ubicación. La estructura de la jerarquía de ubicación requiere el uso de diferentes tipos de índice en diferentes niveles. La estructura y las posiciones del índice dependen estrictamente de la jerarquía de ubicación descrita anteriormente en nuestro esquema de asignación. Ilustramos la implementación de nuestro esquema con un ejemplo. Posteriormente se mencionan las normas para la elaboración del índice. 20 A1 Entretenimiento Restaurante Película A2 A3 A4 R1 R2 R3 R4 R5 R6 R7 R8 Tiempo KC SL JC SF Entretenimiento R1 R2 R3 R4 R4 R5 R6 R7 R8 KC SL JC SF (A, R, NEXT = 8) 3, R5 4, R7 Tipo (S, L) ER W E EM (1, 4) (5, Información cartográfica de ubicación para radiodifusión Figura 4. Datos junto con el índice basado en la ubicación Ejemplo: Supongamos que nuestro contenido de transmisión contiene ICentertainment y ICweather que se representa como se muestra en la Fig. 3. Ai representa las áreas de la ciudad y Ri representa las carreteras en un área determinada. Las hojas de la estructura meteorológica representan cuatro ciudades. La estructura del índice se indica en la Fig. 4 que muestra la posición del índice mayor y menor y los datos en el horario de emisión. Proponemos las siguientes reglas para la creación del programa de emisión indexado por aire: • Se crean el índice mayor y el índice menor. • El índice principal contiene la posición y el rango de diferentes tipos de ítems de datos (Weather and Entertainment, Figura 3) y sus categorías. Las subcategorías de Entretenimiento, Cine y Restaurante, también están en el índice. Así, el índice principal contiene Entretenimiento (E), Entretenimiento-Movie (EM), Entretenimiento-Restaurante (ER), y Tiempo (W). La tupla (S, L) representa la posición inicial (S) del elemento de datos y L representa el rango del elemento en términos de número de cubos de datos. • El índice menor contiene las variables A, R y un puntero Siguiente. En nuestro ejemplo (Figura 3), la carretera R representa el primer nodo del área A. El índice menor se utiliza para apuntar a cubos de datos reales presentes en los niveles más bajos de la jerarquía. En cambio, el índice principal apunta a una gama más amplia de ubicaciones, por lo que contiene información sobre las principales y subcategorías de datos. • La información del índice no se incorpora en los cubos de datos. Los cubos de índice están separados que contienen sólo la información de control. • El número de cubos índice m=#(IC), IC = {ic1, ic2, ic3,...,icn} donde ici representa el tipo de información y # representa la cardinalidad del conjunto de contenido de información IC. En este ejemplo, IC= {icMovie, icWeather, icRestaurant} y así #(IC) =3. Por lo tanto, el número de cubos índice principales es 3. • El mecanismo para resolver la consulta está presente en el coordinador de java en MU. Por ejemplo, si una consulta Q se presenta como Q (Entretenimiento, Película, Road_1), entonces la búsqueda resultante será para la información EM en el índice principal. Nosotros decimos, Q EM. Nuestro índice propuesto funciona de la siguiente manera: Supongamos que una MU emite una consulta que está representada por Java Coordinador presente en la MU como información de restaurante en la carretera 7. Esto es resuelto por el coordinador como Q ER. Esto significa que uno tiene que buscar la unidad de índice ER en el índice principal. Supongamos que el MU entra en el canal en R2. El primer índice que recibe es un índice menor después de R2. En este índice, el valor de la variable Siguiente = 4, lo que significa que el siguiente índice mayor está presente después del cubo 4. La MU puede entrar en modo somnoliento. Se activa después del cubo 4 y recibe el índice principal. Busca información de ER que es la primera entrada en este índice. Ahora es seguro que la MU obtendrá la posición del cubo de datos en el índice menor contiguo. La segunda unidad en el índice menor representa la posición de los datos requeridos R7. Indica que el cubo de datos es el primer cubo en el Área 4. El MU vuelve a entrar en modo somnífero y se activa después del cubo 6. Obtiene los datos necesarios en el siguiente cubo. Presentamos el algoritmo para buscar el Índice basado en la ubicación. Algoritmo 1 Índice basado en la ubicación Buscar en DAYS 1. Escanear la transmisión para el siguiente cubo índice, encontrado=falso 2. Mientras que (no se encuentra) hacer 3. si cubo es el índice mayor entonces 4. Encuentra el Tipo & Tupla (S, L) 5. si S es mayor que 1, entra en modo Doze durante S segundos 6. termina si 7. Despierta en el cubo Sth y observa el índice menor 8. termina si 9. si el cubo es índice menor entonces 10. si TypeRequest no es igual a Typefound y (A,R)Solicitud no es igual a (A,R)found entonces 11. Vaya al modo de doze hasta el SIGUIENTE y repita desde el paso 3 12. terminar si 13. de lo contrario encontrar entrada en Índice Menor que apunta a los datos 14. Calcular la hora de llegada T del cubo de datos 15. Entra en modo somnífero hasta la T 16. Despierta en T y accede a los datos, encontrados = verdadero 17. fin de lo contrario 18. final si 19. final Mientras que 21 6. EVALUACIÓN DE LA EJECUCIÓN La conservación de la energía es la principal preocupación cuando tratamos de acceder a los datos de la transmisión inalámbrica. Un sistema eficiente debe permitir al dispositivo móvil acceder a los datos que necesita manteniéndose activo durante un período mínimo de tiempo. Esto ahorraría una cantidad considerable de energía. Dado que los elementos se distribuyen en función de los tipos y se asignan a ubicaciones adecuadas, argumentamos que nuestra transmisión se ocupa de los tipos de datos agrupados. La unidad móvil tiene que acceder a un índice mayor y a un índice menor relativamente menor para obtener información sobre la hora de llegada de los datos. Esto contrasta con el esquema exponencial donde los índices son de tamaños iguales. El ejemplo discutido y Algoritmo 1 revela que para acceder a cualquier dato, necesitamos acceder al índice mayor sólo una vez seguido por uno o más accesos al índice menor. El número de accesos menores al índice depende del número de ubicaciones internas. Como el número de ubicaciones internas varía de elemento a elemento (por ejemplo, Weather está generalmente asociado con una ciudad mientras que el tráfico se granula hasta las carreteras principales y menores de una ciudad), argumentamos que la estructura de la información de localización mapeada puede ser visualizada como un bosque que es una colección de árboles generales, el número de árboles generales dependiendo de los tipos de información transmitida y la profundidad de un árbol dependiendo de la granularidad de la información de Para nuestros experimentos, asumimos el bosque como una colección de árboles M-ary equilibrados. Asumimos además que los árboles de la arteria M están llenos al asumir la presencia de nodos ficticios en diferentes niveles de un árbol. Así, si el número de ítems de datos es d y la altura del árbol es m, entonces n= (m*d-1)/(m-1) donde n es el número de vértices en el árbol e i= (d-1)/(m-1) donde i es el número de vértices internos. El tiempo de afinación para un ítem de datos implica 1 unidad de tiempo requerido para acceder al índice principal más el tiempo requerido para acceder a los ítems de datos presentes en las hojas del árbol. Por lo tanto, el tiempo de sintonización con d ítems de datos es t = logmd+1 Podemos decir que el tiempo de sintonización está limitado por O(logmd). Comparamos nuestro esquema con el esquema de indexación distribuida y exponencial. Asumimos una emisión plana y el número de páginas que varían de 5000 a 25000. Los diversos parámetros de simulación se muestran en la Tabla 1. La Figura 5-8 muestra los tiempos relativos de afinación de tres algoritmos de indexación, es decir, el LBIS, esquema exponencial y el esquema de árbol distribuido. La Figura 5 muestra el resultado para el número de nodos internos de ubicación = 3. Podemos ver que LBIS supera significativamente a los otros esquemas. El tiempo de afinación en LBIS varía de aproximadamente 6,8 a 8. Este gran tiempo de afinación se debe al hecho de que después de alcanzar el índice menor más bajo, la MU puede tener que acceder a pocos cubos secuencialmente para obtener el cubo de datos requerido. Podemos ver que el tiempo de afinación tiende a ser estable a medida que aumenta la duración de la emisión. En la figura 6 se considera m= 4. Aquí podemos ver que el exponencial y el rendimiento distribuido casi de manera similar, aunque el primero parece funcionar ligeramente mejor a medida que aumenta la longitud de emisión. Un patrón muy interesante es visible en la figura 7. Para las emisiones de menor tamaño, el LBIS parece tener un tiempo de afinación mayor que los otros dos esquemas. Pero a medida que aumenta la duración de la emisión, es claramente visible que el LBIS supera a los otros dos esquemas. La indexación del árbol distribuido muestra un comportamiento similar al del LBIS. El tiempo de afinación en LBIS sigue siendo bajo porque el algoritmo permite a la MU saltarse algunos Índices Menores intermedios. Esto permite que la MU se mueva a niveles más bajos directamente después de entrar en modo activo, ahorrando así energía valiosa. Esta acción no es posible en la indexación de árboles distribuidos y por lo tanto podemos observar que su tiempo de afinación es más que el esquema LBIS, aunque tiene mejores resultados que el esquema exponencial. La Figura 8, en contraste, nos muestra que el tiempo de afinación en LBIS, aunque menor que los otros dos esquemas, tiende a aumentar bruscamente a medida que la longitud de emisión se hace mayor que las 15000 páginas. Esto puede atribuirse tanto al aumento del tiempo necesario para escanear los Índices Menores intermedios como a la duración de la emisión. Pero podemos observar que la pendiente de la curva LBIS es significativamente menor que las otras dos curvas. Tabla 1 Parámetros de simulación P Valores de definición N Número de datos Elementos 5000 - 25000 m Número de nodos de ubicación internos 3, 4, 5, 6 B Capacidad de cubo sin índice (para índice exponencial) 10,64,128,256 i Base de índice para índice exponencial 2,4,6,8 k Tamaño del índice para árbol distribuido 8 bytes Los resultados de la simulación establecen algunos hechos sobre nuestro esquema de indexación basado en la ubicación. En la mayoría de los casos, el sistema funciona mejor que los otros dos en términos de tiempo de afinación. A medida que aumenta la duración de la emisión, después de cierto punto, aunque el tiempo de afinación aumenta como resultado de factores que hemos descrito antes, el esquema siempre funciona mejor que los otros dos esquemas. Debido al límite prescrito del número de páginas en el papel, no podemos mostrar más resultados. Pero estos resultados omitidos muestran una tendencia similar a la de los resultados representados en la figura 5-8. 7. CONCLUSIÓN Y FUTURO TRABAJO En este trabajo hemos presentado un esquema para el mapeo de datos de radiodifusión inalámbrica con sus ubicaciones. Hemos presentado un ejemplo para mostrar cómo la estructura jerárquica del árbol de ubicación mapea con los datos para crear LDD. Hemos presentado un esquema llamado LBIS para indexar este LDD. Hemos utilizado la propiedad de contención de LDD en el esquema que limita la búsqueda a un estrecho rango de datos en la emisión, ahorrando así energía valiosa en el dispositivo. La asignación de datos con ubicaciones y el esquema de indexación se utilizará en nuestro proyecto DAYS para crear la arquitectura basada en empuje. El LBIS se ha comparado con otros dos sistemas de indexación prominentes, a saber, el sistema de indexación de árboles distribuidos y el sistema de indexación exponencial. En nuestras simulaciones demostramos que el esquema LBIS tiene el menor tiempo de afinación para las emisiones que tienen un gran número de páginas, ahorrando así una valiosa potencia de batería en la MU. 22 En el trabajo futuro tratamos de incorporar la arquitectura basada en el tirón en nuestro proyecto DAYS. Los datos del servidor están disponibles para el acceso de los usuarios globales. Esto se puede hacer poniendo una solicitud al servidor de origen. La consulta en este caso es una consulta global. Se transfiere del servidor de origen de los usuarios al servidor de destino mediante el uso de satélites LEO. Tenemos la intención de utilizar nuestro esquema de LDD y arquitectura de estadificación de datos en la arquitectura basada en el tirón. Demostraremos que el esquema de LDD junto con la arquitectura de estadificación de datos mejora significativamente la latencia para la consulta global y local. 8. REFERENCIAS [1] Acharya, S., Alonso, R. Franklin, M y Zdonik S. Disco de transmisión: Gestión de datos para entornos de comunicación asimétricos. En Actas de la Conferencia de la ACM SIGMOD sobre Gestión de Datos, págs. 199 a 210, San José, CA, mayo de 1995. [2] Chen, M.S.,Wu, K.L. y Yu, P. S. Optimizando la asignación de índices para la difusión secuencial de datos en la computación móvil inalámbrica. IEEE Transactions on Knowledge and Data Engineering (TKDE), 15(1):161-173, enero/febrero de 2003. Gráfico 5 Tamaño de la transmisión (# cubos) Dist tree Expo LBIS Figura 6. Tamaño de la transmisión (# cubos) Dist tree Expo LBIS Figura 7. Tamaño de la transmisión (# cubos) Dist tree Expo LBIS Figura 8. Tamaño de la transmisión (# cubos) Árbol dist Expo LBIS Tiempo medio de afinación Tiempo medio de afinación Tiempo medio de afinación 23 [3] Hu, Q. L., Lee, D. L. y Lee, W.C. Evaluación del rendimiento de un sistema inalámbrico de difusión jerárquica de datos. En Actas de la Quinta Conferencia Internacional Anual de ACM sobre Computación y Redes Móviles (MobiCom99), págs. 163 a 173, Seattle, WA, agosto de 1999. [4] Hu, Q. L. Lee, W.C. y Lee, D. L. Power consultas conservadoras de múltiples atributos en la transmisión de datos. En Actas de la 16a Conferencia Internacional sobre Ingeniería de Datos (ICDE00), páginas 157-166, San Diego, CA, febrero de 2000. [5] Imielinski, T., Viswanathan, S. y Badrinath. B. R. Filtrado eficiente de energía de los datos en el aire. En Actas de la Cuarta Conferencia Internacional sobre Tecnología de Bases de Datos Ampliadas (EDBT94), págs. 245 a 258, Cambridge, Reino Unido, marzo de 1994. [6] Imielinski, T., Viswanathan, S. y Badrinath. B. R. Datos sobre el aire - Organización y acceso. Operaciones de IEEE en Ingeniería de Conocimientos e Datos (TKDE), 9(3):353-372, mayo/junio de 1997. [7] Shih, E., Bahl, P. y Sinclair, M. J. Wake on wireless: Una estrategia de ahorro de energía impulsada por eventos para dispositivos operados por baterías. En Actas de la 8a Conferencia Internacional Anual de ACM sobre Computación y Redes Móviles (MobiCom02), págs. 160 a 171, Atlanta, GA, septiembre de 2002. [8] Shivakumar N. y Venkatasubramanian, S. Indización energéticamente eficiente para la difusión de información en sistemas inalámbricos. ACM/Baltzer Journal of Mobile Networks and Applications (MONET), 1(4):433-446, diciembre de 1996. [9] Tan K. L. y Yu, J. X. Filtración energéticamente eficiente de emisiones no uniformes. En Actas de la 16a Conferencia Internacional sobre Sistemas de Computación Distribuida (ICDCS96), págs. 520 a 527, Hong Kong, mayo de 1996. [10] Viredaz, M. A., Brakmo, L. S. y Hamburgen, W. R. Gestión de energía en dispositivos portátiles. ACM Coue, 1(7):44-52, octubre de 2003. [11] Garg, N. Kumar, V., & Dunham, M.H. Mapeo e indización de información en DAYS, 6o Taller Internacional sobre Movilidad en Bases de Datos y Sistemas Distribuidos, en conjunción con la 14a Conferencia Internacional sobre Aplicaciones de Bases de Datos y Sistemas Expertos, 1o a 5 de septiembre, Praga, República Checa, 2003. [12] Acharya D., Kumar, V., & Dunham, M.H. InfoSpace: Sistema de difusión de datos públicos híbrido y adaptativo para computación ubicua. Aceptado para publicación en el número especial de Pervasive Computing. Wiley Journal for Wireless Communications and Mobile Computing, 2004. [13] Acharya D., Kumar, V., & Prabhu, N. Descubriendo y usando Servicios Web en M-Commerce, Proceedings for 5th VLDB Workshop on Technologies for E-Services, Toronto, Canada,2004. [14] Acharya D., Kumar, V. Indexing Location Depending Data in broadcast en ambiente. Aceptado para su publicación, número especial de JDIM sobre Gestión de Datos Distribuidos, 2005. [15] Flinn, J., Sinnamohideen, S., & Satyanarayan, M. Data Staging on No Trusted Surrogates, Intel Research, Pittsburg, Unpublished Report, 2003. [16] Seydim, A.Y., Dunham, M.H. & Kumar, V. Location dependiente consulta processing, Actas del segundo taller internacional de ACM sobre ingeniería de datos para acceso inalámbrico y móvil, p.47-53, Santa Barbara, California, USA, 2001. [17] Xu, J., Lee, W.C., Tang., X. Índice exponencial: Un esquema de indexación distribuida para los datos sobre el aire. En Actas de la II Conferencia Internacional ACM/USENIX sobre Sistemas, Aplicaciones y Servicios Móviles (MobiSys04), Boston, MA, junio de 2004. 24 ",
            "error": []
        }
    }
}