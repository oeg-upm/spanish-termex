{
    "original_text": "An Evaluation of Availability Latency in Carrier-based Vehicular ad-hoc Networks Shahram Ghandeharizadeh Dept of Computer Science Univ of Southern California Los Angeles, CA 90089, USA shahram@usc.edu Shyam Kapadia Dept of Computer Science Univ of Southern California Los Angeles, CA 90089, USA kapadia@usc.edu Bhaskar Krishnamachari Dept of Computer Science Dept of Electrical Engineering Univ of Southern California Los Angeles, CA 90089, USA bkrishna@usc.edu ABSTRACT On-demand delivery of audio and video clips in peer-to-peer vehicular ad-hoc networks is an emerging area of research. Our target environment uses data carriers, termed zebroids, where a mobile device carries a data item on behalf of a server to a client thereby minimizing its availability latency. In this study, we quantify the variation in availability latency with zebroids as a function of a rich set of parameters such as car density, storage per device, repository size, and replacement policies employed by zebroids. Using analysis and extensive simulations, we gain novel insights into the design of carrier-based systems. Significant improvements in latency can be obtained with zebroids at the cost of a minimal overhead. These improvements occur even in scenarios with lower accuracy in the predictions of the car routes. Two particularly surprising findings are: (1) a naive random replacement policy employed by the zebroids shows competitive performance, and (2) latency improvements obtained with a simplified instantiation of zebroids are found to be robust to changes in the popularity distribution of the data items. Categories and Subject Descriptors: C.2.4 [Distributed Systems]: Client/Server General Terms: Algorithms, Performance, Design, Experimentation. 1. INTRODUCTION Technological advances in areas of storage and wireless communications have now made it feasible to envision on-demand delivery of data items, for e.g., video and audio clips, in vehicular peer-topeer networks. In prior work, Ghandeharizadeh et al. [10] introduce the concept of vehicles equipped with a Car-to-Car-Peer-toPeer device, termed AutoMata, for in-vehicle entertainment. The notable features of an AutoMata include a mass storage device offering hundreds of gigabytes (GB) of storage, a fast processor, and several types of networking cards. Even with todays 500 GB disk drives, a repository of diverse entertainment content may exceed the storage capacity of a single AutoMata. Such repositories constitute the focus of this study. To exchange data, we assume each AutoMata is configured with two types of networking cards: 1) a low-bandwidth networking card with a long radio-range in the order of miles that enables an AutoMata device to communicate with a nearby cellular or WiMax station, 2) a high-bandwidth networking card with a limited radio-range in the order of hundreds of feet. The high bandwidth connection supports data rates in the order of tens to hundreds of Megabits per second and represents the ad-hoc peer to peer network between the vehicles. This is labelled as the data plane and is employed to exchange data items between devices. The low-bandwidth connection serves as the control plane, enabling AutoMata devices to exchange meta-data with one or more centralized servers. This connection offers bandwidths in the order of tens to hundreds of Kilobits per second. The centralized servers, termed dispatchers, compute schedules of data delivery along the data plane using the provided meta-data. These schedules are transmitted to the participating vehicles using the control plane. The technical feasibility of such a two-tier architecture is presented in [7], with preliminary results to demonstrate the bandwidth of the control plane is sufficient for exchange of control information needed for realizing such an application. In a typical scenario, an AutoMata device presents a passenger with a list of data items1 , showing both the name of each data item and its availability latency. The latter, denoted as δ, is defined as the earliest time at which the client encounters a copy of its requested data item. A data item is available immediately when it resides in the local storage of the AutoMata device serving the request. Due to storage constraints, an AutoMata may not store the entire repository. In this case, availability latency is the time from when the user issues a request until when the AutoMata encounters another car containing the referenced data item. (The terms car and AutoMata are used interchangeably in this study.) The availability latency for an item is a function of the current location of the client, its destination and travel path, the mobility model of the AutoMata equipped vehicles, the number of replicas constructed for the different data items, and the placement of data item replicas across the vehicles. A method to improve the availability latency is to employ data carriers which transport a replica of the requested data item from a server car containing it to a client that requested it. These data carriers are termed zebroids. Selection of zebroids is facilitated by the two-tiered architecture. The control plane enables centralized information gathering at a dispatcher present at a base-station.2 Some examples of control in1 Without loss of generality, the term data item might be either traditional media such as text or continuous media such as an audio or video clip. 2 There may be dispatchers deployed at a subset of the base-stations for fault-tolerance and robustness. Dispatchers between basestations may communicate via the wired infrastructure. 75 formation are currently active requests, travel path of the clients and their destinations, and paths of the other cars. For each client request, the dispatcher may choose a set of z carriers that collaborate to transfer a data item from a server to a client (z-relay zebroids). Here, z is the number of zebroids such that 0 ≤ z < N, where N is the total number of cars. When z = 0 there are no carriers, requiring a server to deliver the data item directly to the client. Otherwise, the chosen relay team of z zebroids hand over the data item transitively to one another to arrive at the client, thereby reducing availability latency (see Section 3.1 for details). To increase robustness, the dispatcher may employ multiple relay teams of z-carriers for every request. This may be useful in scenarios where the dispatcher has lower prediction accuracy in the information about the routes of the cars. Finally, storage constraints may require a zebroid to evict existing data items from its local storage to accommodate the client requested item. In this study, we quantify the following main factors that affect availability latency in the presence of zebroids: (i) data item repository size, (ii) car density, (iii) storage capacity per car, (iv) client trip duration, (v) replacement scheme employed by the zebroids, and (vi) accuracy of the car route predictions. For a significant subset of these factors, we address some key questions pertaining to use of zebroids both via analysis and extensive simulations. Our main findings are as follows. A naive random replacement policy employed by the zebroids shows competitive performance in terms of availability latency. With such a policy, substantial improvements in latency can be obtained with zebroids at a minimal replacement overhead. In more practical scenarios, where the dispatcher has inaccurate information about the car routes, zebroids continue to provide latency improvements. A surprising result is that changes in popularity of the data items do not impact the latency gains obtained with a simple instantiation of z-relay zebroids called one-instantaneous zebroids (see Section 3.1). This study suggests a number of interesting directions to be pursued to gain better understanding of design of carrier-based systems that improve availability latency. Related Work: Replication in mobile ad-hoc networks has been a widely studied topic [11, 12, 15]. However, none of these studies employ zebroids as data carriers to reduce the latency of the clients requests. Several novel and important studies such as ZebraNet [13], DakNet [14], Data Mules [16], Message Ferries [20], and Seek and Focus [17] have analyzed factors impacting intermittently connected networks consisting of data carriers similar in spirit to zebroids. Factors considered by each study are dictated by their assumed environment and target application. A novel characteristic of our study is the impact on availability latency for a given database repository of items. A detailed description of related works can be obtained in [9]. The rest of this paper is organized as follows. Section 2 provides an overview of the terminology along with the factors that impact availability latency in the presence of zebroids. Section 3 describes how the zebroids may be employed. Section 4 provides details of the analysis methodology employed to capture the performance with zebroids. Section 5 describes the details of the simulation environment used for evaluation. Section 6 enlists the key questions examined in this study and answers them via analysis and simulations. Finally, Section 7 presents brief conclusions and future research directions. 2. OVERVIEW AND TERMINOLOGY Table 1 summarizes the notation of the parameters used in the paper. Below we introduce some terminology used in the paper. Assume a network of N AutoMata-equipped cars, each with storage capacity of α bytes. The total storage capacity of the system is ST =N ·α. There are T data items in the database, each with Database Parameters T Number of data items. Si Size of data item i fi Frequency of access to data item i. Replication Parameters Ri Normalized frequency of access to data item i ri Number of replicas for data item i n Characterizes a particular replication scheme. δi Average availability latency of data item i δagg Aggregate availability latency, δagg = T j=1 δj · fj AutoMata System Parameters G Number of cells in the map (2D-torus). N Number of AutoMata devices in the system. α Storage capacity per AutoMata. γ Trip duration of the client AutoMata. ST Total storage capacity of the AutoMata system, ST = N · α. Table 1: Terms and their definitions size Si. The frequency of access to data item i is denoted as fi, with T j=1 fj = 1. Let the trip duration of the client AutoMata under consideration be γ. We now define the normalized frequency of access to the data item i, denoted by Ri, as: Ri = (fi)n T j=1(fj)n ; 0 ≤ n ≤ ∞ (1) The exponent n characterizes a particular replication technique. A square-root replication scheme is realized when n = 0.5 [5]. This serves as the base-line for comparison with the case when zebroids are deployed. Ri is normalized to a value between 0 and 1. The number of replicas for data item i, denoted as ri, is: ri = min (N, max (1, Ri·N·α Si )). This captures the case when at least one copy of every data item must be present in the ad-hoc network at all times. In cases where a data item may be lost from the ad-hoc network, this equation becomes ri = min (N, max (0, Ri·N·α Si )). In this case, a request for the lost data item may need to be satisfied by fetching the item from a remote server. The availability latency for a data item i, denoted as δi, is defined as the earliest time at which a client AutoMata will find the first replica of the item accessible to it. If this condition is not satisfied, then we set δi to γ. This indicates that data item i was not available to the client during its journey. Note that since there is at least one replica in the system for every data item i, by setting γ to a large value we ensure that the clients request for any data item i will be satisfied. However, in most practical circumstances γ may not be so large as to find every data item. We are interested in the availability latency observed across all data items. Hence, we augment the average availability latency for every data item i with its fi to obtain the following weighted availability latency (δagg) metric: δagg = T i=1 δi · fi Next, we present our solution approach describing how zebroids are selected. 3. SOLUTION APPROACH 3.1 Zebroids When a client references a data item missing from its local storage, the dispatcher identifies all cars with a copy of the data item as servers. Next, the dispatcher obtains the future routes of all cars for a finite time duration equivalent to the maximum time the client is willing to wait for its request to be serviced. Using this information, the dispatcher schedules the quickest delivery path from any of the servers to the client using any other cars as intermediate carriers. Hence, it determines the optimal set of forwarding decisions 76 that will enable the data item to be delivered to the client in the minimum amount of time. Note that the latency along the quickest delivery path that employs a relay team of z zebroids is similar to that obtained with epidemic routing [19] under the assumptions of infinite storage and no interference. A simple instantiation of z-relay zebroids occurs when z = 1 and the clients request triggers a transfer of a copy of the requested data item from a server to a zebroid in its vicinity. Such a zebroid is termed one-instantaneous zebroid. In some cases, the dispatcher might have inaccurate information about the routes of the cars. Hence, a zebroid scheduled on the basis of this inaccurate information may not rendezvous with its target client. To minimize the likelihood of such scenarios, the dispatcher may schedule multiple zebroids. This may incur additional overhead due to redundant resource utilization to obtain the same latency improvements. The time required to transfer a data item from a server to a zebroid depends on its size and the available link bandwidth. With small data items, it is reasonable to assume that this transfer time is small, especially in the presence of the high bandwidth data plane. Large data items may be divided into smaller chunks enabling the dispatcher to schedule one or more zebroids to deliver each chunk to a client in a timely manner. This remains a future research direction. Initially, number of replicas for each data item replicas might be computed using Equation 1. This scheme computes the number of data item replicas as a function of their popularity. It is static because number of replicas in the system do not change and no replacements are performed. Hence, this is referred to as the nozebroids environment. We quantify the performance of the various replacement policies with reference to this base-line that does not employ zebroids. One may assume a cold start phase, where initially only one or few copies of every data item exist in the system. Many storage slots of the cars may be unoccupied. When the cars encounter one another they construct new replicas of some selected data items to occupy the empty slots. The selection procedure may be to choose the data items uniformly at random. New replicas are created as long as a car has a certain threshold of its storage unoccupied. Eventually, majority of the storage capacity of a car will be exhausted. 3.2 Carrier-based Replacement policies The replacement policies considered in this paper are reactive since a replacement occurs only in response to a request issued for a certain data item. When the local storage of a zebroid is completely occupied, it needs to replace one of its existing items to carry the client requested data item. For this purpose, the zebroid must select an appropriate candidate for eviction. This decision process is analogous to that encountered in operating system paging where the goal is to maximize the cache hit ratio to prevent disk access delay [18]. The carrier-based replacement policies employed in our study are Least Recently Used (LRU), Least Frequently Used (LFU) and Random (where a eviction candidate is chosen uniformly at random). We have considered local and global variants of the LRU/LFU policies which determine whether local or global knowledge of contents of the cars known at the dispatcher is used for the eviction decision at a zebroid (see [9] for more details). The replacement policies incur the following overheads. First, the complexity associated with the implementation of a policy. Second, the bandwidth used to transfer a copy of a data item from a server to the zebroid. Third, the average number of replacements incurred by the zebroids. Note that in the no-zebroids case neither overhead is incurred. The metrics considered in this study are aggregate availability latency, δagg, percentage improvement in δagg with zebroids as compared to the no-zebroids case and average number of replacements incurred per client request which is an indicator of the overhead incurred by zebroids. Note that the dispatchers with the help of the control plane may ensure that no data item is lost from the system. In other words, at least one replica of every data item is maintained in the ad-hoc network at all times. In such cases, even though a car may meet a requesting client earlier than other servers, if its local storage contains data items with only a single copy in the system, then such a car is not chosen as a zebroid. 4. ANALYSIS METHODOLOGY Here, we present the analytical evaluation methodology and some approximations as closed-form equations that capture the improvements in availability latency that can be obtained with both oneinstantaneous and z-relay zebroids. First, we present some preliminaries of our analysis methodology. • Let N be the number of cars in the network performing a 2D random walk on a √ G× √ G torus. An additional car serves as a client yielding a total of N + 1 cars. Such a mobility model has been used widely in the literature [17, 16] chiefly because it is amenable to analysis and provides a baseline against which performance of other mobility models can be compared. Moreover, this class of Markovian mobility models has been used to model the movements of vehicles [3, 21]. • We assume that all cars start from the stationary distribution and perform independent random walks. Although for sparse density scenarios, the independence assumption does hold, it is no longer valid when N approaches G. • Let the size of data item repository of interest be T. Also, data item i has ri replicas. This implies ri cars, identified as servers, have a copy of this data item when the client requests item i. All analysis results presented in this section are obtained assuming that the client is willing to wait as long as it takes for its request to be satisfied (unbounded trip duration γ = ∞). With the random walk mobility model on a 2D-torus, there is a guarantee that as long as there is at least one replica of the requested data item in the network, the client will eventually encounter this replica [2]. Extensions to the analysis that also consider finite trip durations can be obtained in [9]. Consider a scenario where no zebroids are employed. In this case, the expected availability latency for the data item is the expected meeting time of the random walk undertaken by the client with any of the random walks performed by the servers. Aldous et al. [2] show that the the meeting time of two random walks in such a setting can be modelled as an exponential distribution with the mean C = c · G · log G, where the constant c 0.17 for G ≥ 25. The meeting time, or equivalently the availability latency δi, for the client requesting data item i is the time till it encounters any of these ri replicas for the first time. This is also an exponential distribution with the following expected value (note that this formulation is valid only for sparse cases when G >> ri): δi = cGlogG ri The aggregate availability latency without employing zebroids is then this expression averaged over all data items, weighted by their frequency of access: δagg(no − zeb) = T i=1 fi · c · G · log G ri = T i=1 fi · C ri (2) 77 4.1 One-instantaneous zebroids Recall that with one-instantaneous zebroids, for a given request, a new replica is created on a car in the vicinity of the server, provided this car meets the client earlier than any of the ri servers. Moreover, this replica is spawned at the time step when the client issues the request. Let Nc i be the expected total number of nodes that are in the same cell as any of the ri servers. Then, we have Nc i = (N − ri) · (1 − (1 − 1 G )ri ) (3) In the analytical model, we assume that Nc i new replicas are created, so that the total number of replicas is increased to ri +Nc i . The availability latency is reduced since the client is more likely to meet a replica earlier. The aggregated expected availability latency in the case of one-instantaneous zebroids is then given by, δagg(zeb) = T i=1 fi · c · G · log G ri + Nc i = T i=1 fi · C ri + Nc i (4) Note that in obtaining this expression, for ease of analysis, we have assumed that the new replicas start from random locations in the torus (not necessarily from the same cell as the original ri servers). It thus treats all the Nc i carriers independently, just like the ri original servers. As we shall show below by comparison with simulations, this approximation provides an upper-bound on the improvements that can be obtained because it results in a lower expected latency at the client. It should be noted that the procedure listed above will yield a similar latency to that employed by a dispatcher employing oneinstantaneous zebroids (see Section 3.1). Since the dispatcher is aware of all future car movements it would only transfer the requested data item on a single zebroid, if it determines that the zebroid will meet the client earlier than any other server. This selected zebroid is included in the Nc i new replicas. 4.2 z-relay zebroids To calculate the expected availability latency with z-relay zebroids, we use a coloring problem analog similar to an approach used by Spyropoulos et al. [17]. Details of the procedure to obtain a closed-form expression are given in [9]. The aggregate availability latency (δagg) with z-relay zebroids is given by, δagg(zeb) = T i=1 [fi · C N + 1 · 1 N + 1 − ri · (N · log N ri − log (N + 1 − ri))] (5) 5. SIMULATION METHODOLOGY The simulation environment considered in this study comprises of vehicles such as cars that carry a fraction of the data item repository. A prediction accuracy parameter inherently provides a certain probabilistic guarantee on the confidence of the car route predictions known at the dispatcher. A value of 100% implies that the exact routes of all cars are known at all times. A 70% value for this parameter indicates that the routes predicted for the cars will match the actual ones with probability 0.7. Note that this probability is spread across the car routes for the entire trip duration. We now provide the preliminaries of the simulation study and then describe the parameter settings used in our experiments. • Similar to the analysis methodology, the map used is a 2D torus. A Markov mobility model representing a unbiased 2D random walk on the surface of the torus describes the movement of the cars across this torus. • Each grid/cell is a unique state of this Markov chain. In each time slot, every car makes a transition from a cell to any of its neighboring 8 cells. The transition is a function of the current location of the car and a probability transition matrix Q = [qij] where qij is the probability of transition from state i to state j. Only AutoMata equipped cars within the same cell may communicate with each other. • The parameters γ, δ have been discretized and expressed in terms of the number of time slots. • An AutoMata device does not maintain more than one replica of a data item. This is because additional replicas occupy storage without providing benefits. • Either one-instantaneous or z-relay zebroids may be employed per client request for latency improvement. • Unless otherwise mentioned, the prediction accuracy parameter is assumed to be 100%. This is because this study aims to quantify the effect of a large number of parameters individually on availability latency. Here, we set the size of every data item, Si, to be 1. α represents the number of storage slots per AutoMata. Each storage slot stores one data item. γ represents the duration of the clients journey in terms of the number of time slots. Hence the possible values of availability latency are between 0 and γ. δ is defined as the number of time slots after which a client AutoMata device will encounter a replica of the data item for the first time. If a replica for the data item requested was encountered by the client in the first cell then we set δ = 0. If δ > γ then we set δ = γ indicating that no copy of the requested data item was encountered by the client during its entire journey. In all our simulations, for illustration we consider a 5 × 5 2D-torus with γ set to 10. Our experiments indicate that the trends in the results scale to maps of larger size. We simulated a skewed distribution of access to the T data items that obeys Zipfs law with a mean of 0.27. This distribution is shown to correspond to sale of movie theater tickets in the United States [6]. We employ a replication scheme that allocates replicas for a data item as a function of the square-root of the frequency of access of that item. The square-root replication scheme is shown to have competitive latency performance over a large parameter space [8]. The data item replicas are distributed uniformly across the AutoMata devices. This serves as the base-line no-zebroids case. The square-root scheme also provides the initial replica distribution when zebroids are employed. Note that the replacements performed by the zebroids will cause changes to the data item replica distribution. Requests generated as per the Zipf distribution are issued one at a time. The client car that issues the request is chosen in a round-robin manner. After a maximum period of γ, the latency encountered by this request is recorded. In all the simulation results, each point is an average of 200,000 requests. Moreover, the 95% confidence intervals determined for the results are quite tight for the metrics of latency and replacement overhead. Hence, we only present them for the metric that captures the percentage improvement in latency with respect to the no-zebroids case. 6. RESULTS In this section, we describe our evaluation results where the following key questions are addressed. With a wide choice of replacement schemes available for a zebroid, what is their effect on availability latency? A more central question is: Do zebroids provide 78 0 20 40 60 80 100 1.5 2 2.5 3 3.5 Number of cars Aggregate availability latency (δ agg ) lru_global lfu_global lru_local lfu_local random Figure 1: Figure 1 shows the availability latency when employing one-instantaneous zebroids as a function of (N,α) values, when the total storage in the system is kept fixed, ST = 200. significant improvements in availability latency? What is the associated overhead incurred in employing these zebroids? What happens to these improvements in scenarios where a dispatcher may have imperfect information about the car routes? What inherent trade-offs exist between car density and storage per car with regards to their combined as well as individual effect on availability latency in the presence of zebroids? We present both simple analysis and detailed simulations to provide answers to these questions as well as gain insights into design of carrier-based systems. 6.1 How does a replacement scheme employed by a zebroid impact availability latency? For illustration, we present scale-up experiments where oneinstantaneous zebroids are employed (see Figure 1). By scale-up, we mean that α and N are changed proportionally to keep the total system storage, ST , constant. Here, T = 50 and ST = 200. We choose the following values of (N,α) = {(20,10), (25,8), (50,4), (100,2)}. The figure indicates that a random replacement scheme shows competitive performance. This is because of several reasons. Recall that the initial replica distribution is set as per the squareroot replication scheme. The random replacement scheme does not alter this distribution since it makes replacements blind to the popularity of a data item. However, the replacements cause dynamic data re-organization so as to better serve the currently active request. Moreover, the mobility pattern of the cars is random, hence, the locations from which the requests are issued by clients are also random and not known a priori at the dispatcher. These findings are significant because a random replacement policy can be implemented in a simple decentralized manner. The lru-global and lfu-global schemes provide a latency performance that is worse than random. This is because these policies rapidly develop a preference for the more popular data items thereby creating a larger number of replicas for them. During eviction, the more popular data items are almost never selected as a replacement candidate. Consequently, there are fewer replicas for the less popular items. Hence, the initial distribution of the data item replicas changes from square-root to that resembling linear replication. The higher number of replicas for the popular data items provide marginal additional benefits, while the lower number of replicas for the other data items hurts the latency performance of these global policies. The lfu-local and lru-local schemes have similar performance to random since they do not have enough history of local data item requests. We speculate that the performance of these local policies will approach that of their global variants for a large enough history of data item requests. On account of the competitive performance shown by a random policy, for the remainder of the paper, we present the performance of zebroids that employ a random replacement policy. 6.2 Do zebroids provide significant improvements in availability latency? We find that in many scenarios employing zebroids provides substantial improvements in availability latency. 6.2.1 Analysis We first consider the case of one-instantaneous zebroids. Figure 2.a shows the variation in δagg as a function of N for T = 10 and α = 1 with a 10 × 10 torus using Equation 4. Both the x and y axes are drawn to a log-scale. Figure 2.b show the % improvement in δagg obtained with one-instantaneous zebroids. In this case, only the x-axis is drawn to a log-scale. For illustration, we assume that the T data items are requested uniformly. Initially, when the network is sparse the analytical approximation for improvements in latency with zebroids, obtained from Equations 2 and 4, closely matches the simulation results. However, as N increases, the sparseness assumption for which the analysis is valid, namely N << G, is no longer true. Hence, the two curves rapidly diverge. The point at which the two curves move away from each other corresponds to a value of δagg ≤ 1. Moreover, as mentioned earlier, the analysis provides an upper bound on the latency improvements, as it treats the newly created replicas given by Nc i independently. However, these Nc i replicas start from the same cell as one of the server replicas ri. Finally, the analysis captures a oneshot scenario where given an initial data item replica distribution, the availability latency is computed. The new replicas created do not affect future requests from the client. On account of space limitations, here, we summarize the observations in the case when z-relay zebroids are employed. The interested reader can obtain further details in [9]. Similar observations, like the one-instantaneous zebroid case, apply since the simulation and analysis curves again start diverging when the analysis assumptions are no longer valid. However, the key observation here is that the latency improvement with z-relay zebroids is significantly better than the one-instantaneous zebroids case, especially for lower storage scenarios. This is because in sparse scenarios, the transitive hand-offs between the zebroids creates higher number of replicas for the requested data item, yielding lower availability latency. Moreover, it is also seen that the simulation validation curve for the improvements in δagg with z-relay zebroids approaches that of the one-instantaneous zebroid case for higher storage (higher N values). This is because one-instantaneous zebroids are a special case of z-relay zebroids. 6.2.2 Simulation We conduct simulations to examine the entire storage spectrum obtained by changing car density N or storage per car α to also capture scenarios where the sparseness assumptions for which the analysis is valid do not hold. We separate the effect of N and α by capturing the variation of N while keeping α constant (case 1) and vice-versa (case 2) both with z-relay and one-instantaneous zebroids. Here, we set the repository size as T = 25. Figure 3 captures case 1 mentioned above. Similar trends are observed with case 2, a complete description of those results are available in [9]. With Figure 3.b, keeping α constant, initially increasing car density has higher latency benefits because increasing N introduces more zebroids in the system. As N is further increased, ω reduces because the total storage in the system goes up. Consequently, the number of replicas per data item goes up thereby increasing the 79 number of servers. Hence, the replacement policy cannot find a zebroid as often to transport the requested data item to the client earlier than any of the servers. On the other hand, the increased number of servers benefits the no-zebroids case in bringing δagg down. The net effect results in reduction in ω for larger values of N. 10 1 10 2 10 3 10 −1 10 0 10 1 10 2 Number of cars no−zebroidsanal no−zebroids sim one−instantaneous anal one−instantaneoussim Aggregate Availability latency (δagg ) 2.a) δagg 10 1 10 2 10 3 0 10 20 30 40 50 60 70 80 90 100 Number of cars % Improvement in δagg wrt no−zebroids (ω) analytical upper−bound simulation 2.b) ω Figure 2: Figure 2 shows the latency performance with oneinstantaneous zebroids via simulations along with the analytical approximation for a 10 × 10 torus with T = 10. The trends mentioned above are similar to that obtained from the analysis. However, somewhat counter-intuitively with relatively higher system storage, z-relay zebroids provide slightly lower improvements in latency as compared to one-instantaneous zebroids. We speculate that this is due to the different data item replica distributions enforced by them. Note that replacements performed by the zebroids cause fluctuations in these replica distributions which may effect future client requests. We are currently exploring suitable choices of parameters that can capture these changing replica distributions. 6.3 What is the overhead incurred with improvements in latency with zebroids? We find that the improvements in latency with zebroids are obtained at a minimal replacement overhead (< 1 per client request). 6.3.1 Analysis With one-instantaneous zebroids, for each client request a maximum of one zebroid is employed for latency improvement. Hence, the replacement overhead per client request can amount to a maximum of one. Recall that to calculate the latency with one-instantaneous 0 50 100 150 200 250 300 350 400 0 1 2 3 4 5 6 Number of cars Aggregate availability latency (δagg ) no−zebroids one−instantaneous z−relays 3.a 0 50 100 150 200 250 300 350 400 0 10 20 30 40 50 60 Number of cars % Improvement in δagg wrt no−zebroids (ω) one−instantaneous z−relays 3.b Figure 3: Figure 3 depicts the latency performance with both one-instantaneous and z-relay zebroids as a function of the car density when α = 2 and T = 25. zebroids, Nc i new replicas are created in the same cell as the servers. Now a replacement is only incurred if one of these Nc i newly created replicas meets the client earlier than any of the ri servers. Let Xri and XNc i respectively be random variables that capture the minimum time till any of the ri and Nc i replicas meet the client. Since Xri and XNc i are assumed to be independent, by the property of exponentially distributed random variables we have, Overhead/request = 1 · P(XNc i < Xri ) + 0 · P(Xri ≤ XNc i ) (6) Overhead/request = ri C ri C + Nc i C = ri ri + Nc i (7) Recall that the number of replicas for data item i, ri, is a function of the total storage in the system i.e., ri = k·N ·α where k satisfies the constraint 1 ≤ ri ≤ N. Using this along with Equation 2, we get Overhead/request = 1 − G G + N · (1 − k · α) (8) Now if we keep the total system storage N · α constant since G and T are also constant, increasing N increases the replacement overhead. However, if N ·α is constant then increasing N causes α 80 0 20 40 60 80 100 0 0.05 0.1 0.15 0.2 0.25 0.3 0.35 0.4 0.45 0.5 Number of cars one−instantaneous zebroids Average number of replacements per request (N=20,α=10) (N=25,α=8) (N=50,α=4) (N=100,α=2) Figure 4: Figure 4 captures replacement overhead when employing one-instantaneous zebroids as a function of (N,α) values, when the total storage in the system is kept fixed, ST = 200. to go down. This implies that a higher replacement overhead is incurred for higher N and lower α values. Moreover, when ri = N, this means that every car has a replica of data item i. Hence, no zebroids are employed when this item is requested, yielding an overhead/request for this item as zero. Next, we present simulation results that validate our analysis hypothesis for the overhead associated with deployment of one-instantaneous zebroids. 6.3.2 Simulation Figure 4 shows the replacement overhead with one-instantaneous zebroids when (N,α) are varied while keeping the total system storage constant. The trends shown by the simulation are in agreement with those predicted by the analysis above. However, the total system storage can be changed either by varying car density (N) or storage per car (α). On account of similar trends, here we present the case when α is kept constant and N is varied (Figure 5). We refer the reader to [9] for the case when α is varied and N is held constant. We present an intuitive argument for the behavior of the perrequest replacement overhead curves. When the storage is extremely scarce so that only one replica per data item exists in the AutoMata network, the number of replacements performed by the zebroids is zero since any replacement will cause a data item to be lost from the system. The dispatcher ensures that no data item is lost from the system. At the other end of the spectrum, if storage becomes so abundant that α = T then the entire data item repository can be replicated on every car. The number of replacements is again zero since each request can be satisfied locally. A similar scenario occurs if N is increased to such a large value that another car with the requested data item is always available in the vicinity of the client. However, there is a storage spectrum in the middle where replacements by the scheduled zebroids result in improvements in δagg (see Figure 3). Moreover, we observe that for sparse storage scenarios, the higher improvements with z-relay zebroids are obtained at the cost of a higher replacement overhead when compared to the one-instantaneous zebroids case. This is because in the former case, each of these z zebroids selected along the lowest latency path to the client needs to perform a replacement. However, the replacement overhead is still less than 1 indicating that on an average less than one replacement per client request is needed even when z-relay zebroids are employed. 0 50 100 150 200 250 300 350 400 0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1 Number of cars z−relays one−instantaneous Average number of replacements per request Figure 5: Figure 5 shows the replacement overhead with zebroids for the cases when N is varied keeping α = 2. 10 20 30 40 50 60 70 80 90 100 0 0.5 1 1.5 2 2.5 3 3.5 4 Prediction percentage no−zebroids (N=50) one−instantaneous (N=50) z−relays (N=50) no−zebroids (N=200) one−instantaneous (N=200) z−relays (N=200) Aggregate Availability Latency (δagg ) Figure 6: Figure 6 shows δagg for different car densities as a function of the prediction accuracy metric with α = 2 and T = 25. 6.4 What happens to the availability latency with zebroids in scenarios with inaccuracies in the car route predictions? We find that zebroids continue to provide improvements in availability latency even with lower accuracy in the car route predictions. We use a single parameter p to quantify the accuracy of the car route predictions. 6.4.1 Analysis Since p represents the probability that a car route predicted by the dispatcher matches the actual one, hence, the latency with zebroids can be approximated by, δerr agg = p · δagg(zeb) + (1 − p) · δagg(no − zeb) (9) δerr agg = p · δagg(zeb) + (1 − p) · C ri (10) Expressions for δagg(zeb) can be obtained from Equations 4 (one-instantaneous) or 5 (z-relay zebroids). 6.4.2 Simulation Figure 6 shows the variation in δagg as a function of this route prediction accuracy metric. We observe a smooth reduction in the 81 improvement in δagg as the prediction accuracy metric reduces. For zebroids that are scheduled but fail to rendezvous with the client due to the prediction error, we tag any such replacements made by the zebroids as failed. It is seen that failed replacements gradually increase as the prediction accuracy reduces. 6.5 Under what conditions are the improvements in availability latency with zebroids maximized? Surprisingly, we find that the improvements in latency obtained with one-instantaneous zebroids are independent of the input distribution of the popularity of the data items. 6.5.1 Analysis The fractional difference (labelled ω) in the latency between the no-zebroids and one-instantaneous zebroids is obtained from equations 2, 3, and 4 as ω = T i=1 fi·C ri − T i=1 fi·C ri+(N−ri)·(1−(1− 1 G )ri ) T i=1 fi·C ri (11) Here C = c·G·log G. This captures the fractional improvement in the availability latency obtained by employing one-instantaneous zebroids. Let α = 1, making the total storage in the system ST = N. Assuming the initial replica distribution is as per the squareroot replication scheme, we have, ri = √ fi·N T j=1 √ fj . Hence, we get fi = K2 ·r2 i N2 , where K = T j=1 fj. Using this, along with the approximation (1 − x)n 1 − n · x for small x, we simplify the above equation to get, ω = 1 − T i=1 ri 1+ N−ri G T i=1 ri In order to determine when the gains with one-instantaneous zebroids are maximized, we can frame an optimization problem as follows: Maximize ω, subject to T i=1 ri = ST THEOREM 1. With a square-root replication scheme, improvements obtained with one-instantaneous zebroids are independent of the input popularity distribution of the data items. (See [9] for proof) 6.5.2 Simulation We perform simulations with two different frequency distribution of data items: Uniform and Zipfian (with mean= 0.27). Similar latency improvements with one-instantaneous zebroids are obtained in both cases. This result has important implications. In cases with biased popularity toward certain data items, the aggregate improvements in latency across all data item requests still remain the same. Even in scenarios where the frequency of access to the data items changes dynamically, zebroids will continue to provide similar latency improvements. 7. CONCLUSIONS AND FUTURE RESEARCH DIRECTIONS In this study, we examined the improvements in latency that can be obtained in the presence of carriers that deliver a data item from a server to a client. We quantified the variation in availability latency as a function of a rich set of parameters such as car density, storage per car, title database size, and replacement policies employed by zebroids. Below we summarize some key future research directions we intend to pursue. To better reflect reality we would like to validate the observations obtained from this study with some real world simulation traces of vehicular movements (for example using CORSIM [1]). This will also serve as a validation for the utility of the Markov mobility model used in this study. We are currently analyzing the performance of zebroids on a real world data set comprising of an ad-hoc network of buses moving around a small neighborhood in Amherst [4]. Zebroids may also be used for delivery of data items that carry delay sensitive information with a certain expiry. Extensions to zebroids that satisfy such application requirements presents an interesting future research direction. 8. ACKNOWLEDGMENTS This research was supported in part by an Annenberg fellowship and NSF grants numbered CNS-0435505 (NeTS NOSS), CNS-0347621 (CAREER), and IIS-0307908. 9. REFERENCES [1] Federal Highway Administration. Corridor simulation. Version 5.1, http://www.ops.fhwa.dot.gov/trafficanalysistools/cors im.htm. [2] D. Aldous and J. Fill. Reversible markov chains and random walks on graphs. Under preparation. [3] A. Bar-Noy, I. Kessler, and M. Sidi. Mobile Users: To Update or Not to Update. In IEEE Infocom, 1994. [4] J. Burgess, B. Gallagher, D. Jensen, and B. Levine. MaxProp: Routing for Vehicle-Based Disruption-Tolerant Networking. In IEEE Infocom, April 2006. [5] E. Cohen and S. Shenker. Replication Strategies in Unstructured Peer-to-Peer Networks. In SIGCOMM, 2002. [6] A. Dan, D. Dias, R. Mukherjee, D. Sitaram, and R. Tewari. Buffering and Caching in Large-Scale Video Servers. In COMPCON, 1995. [7] S. Ghandeharizadeh, S. Kapadia, and B. Krishnamachari. PAVAN: A Policy Framework for Content Availabilty in Vehicular ad-hoc Networks. In VANET, New York, NY, USA, 2004. ACM Press. [8] S. Ghandeharizadeh, S. Kapadia, and B. Krishnamachari. Comparison of Replication Strategies for Content Availability in C2P2 networks. In MDM, May 2005. [9] S. Ghandeharizadeh, S. Kapadia, and B. Krishnamachari. An Evaluation of Availability Latency in Carrier-based Vehicular ad-hoc Networks. Technical report, Department of Computer Science, University of Southern California,CENG-2006-1, 2006. [10] S. Ghandeharizadeh and B. Krishnamachari. C2p2: A peer-to-peer network for on-demand automobile information services. In Globe. IEEE, 2004. [11] T. Hara. Effective Replica Allocation in ad-hoc Networks for Improving Data Accessibility. In IEEE Infocom, 2001. [12] H. Hayashi, T. Hara, and S. Nishio. A Replica Allocation Method Adapting to Topology Changes in ad-hoc Networks. In DEXA, 2005. [13] P. Juang, H. Oki, Y. Wang, M. Martonosi, L. Peh, and D. Rubenstein. Energy-efficient computing for wildlife tracking: design tradeoffs and early experiences with ZebraNet. SIGARCH Comput. Archit. News, 2002. [14] A. Pentland, R. Fletcher, and A. Hasson. DakNet: Rethinking Connectivity in Developing Nations. Computer, 37(1):78-83, 2004. [15] F. Sailhan and V. Issarny. Cooperative Caching in ad-hoc Networks. In MDM, 2003. [16] R. Shah, S. Roy, S. Jain, and W. Brunette. Data mules: Modeling and analysis of a three-tier architecture for sparse sensor networks. Elsevier ad-hoc Networks Journal, 1, September 2003. [17] T. Spyropoulos, K. Psounis, and C. Raghavendra. Single-Copy Routing in Intermittently Connected Mobile Networks. In SECON, April 2004. [18] A. Tanenbaum. Modern Operating Systems, 2nd Edition, Chapter 4, Section 4.4 . Prentice Hall, 2001. [19] A. Vahdat and D. Becker. Epidemic routing for partially-connected ad-hoc networks. Technical report, Department of Computer Science, Duke University, 2000. [20] W. Zhao, M. Ammar, and E. Zegura. A message ferrying approach for data delivery in sparse mobile ad-hoc networks. In MobiHoc, pages 187-198, New York, NY, USA, 2004. ACM Press. [21] M. Zonoozi and P. Dassanayake. User Mobility Modeling and Characterization of Mobility Pattern. IEEE Journal on Selected Areas in Communications, 15:1239-1252, September 1997. 82",
    "original_translation": "Una evaluación de la latencia de disponibilidad en redes ad hoc vehiculares basadas en portador Shahram Ghandeharizadeh Dept of Computer Science Univ of Southern California Los Angeles, CA 90089, USA shahram@usc.edu Shyam Kapadia Dept of Computer Science Univ of Southern California Los Angeles, CA 90089, USA kapadia@usc.edu Bhaskar Krishna Nuestro entorno de destino utiliza portadores de datos, llamados zebroids, donde un dispositivo móvil lleva un elemento de datos en nombre de un servidor a un cliente, minimizando así su latencia de disponibilidad. En este estudio, cuantificamos la variación de la latencia de disponibilidad con zebroids en función de un rico conjunto de parámetros como densidad de coche, almacenamiento por dispositivo, tamaño del repositorio y políticas de reemplazo empleadas por zebroids. Utilizando análisis y simulaciones extensas, obtenemos ideas novedosas sobre el diseño de sistemas basados en operadores. Se pueden obtener mejoras significativas en la latencia con zebroids a costa de un mínimo gasto general. Estas mejoras se producen incluso en escenarios con menor precisión en las predicciones de las rutas del coche. Dos hallazgos particularmente sorprendentes son: (1) una política de sustitución aleatoria ingenua empleada por los zebroids muestra un rendimiento competitivo, y (2) mejoras de la latencia obtenidas con una instanciación simplificada de zebroids se encuentran robustos a los cambios en la distribución de popularidad de los ítems de datos. Categorías y Subject Descriptores: C.2.4 [Sistemas distribuidos]: Términos Generales del Cliente/Servidor: Algoritmos, Rendimiento, Diseño, Experimentación. 1. INTRODUCCIÓN Los avances tecnológicos en las esferas del almacenamiento y las comunicaciones inalámbricas han hecho posible ahora prever la entrega a petición de datos, por ejemplo, para clips de vídeo y audio, en redes de peer-topeer vehiculares. En trabajos previos, Ghandeharizadeh et al. [10] introduce el concepto de vehículos equipados con un dispositivo Car-to-Car-Peer-toPeer, denominado AutoMata, para el entretenimiento dentro del vehículo. Las características notables de un AutoMata incluyen un dispositivo de almacenamiento masivo que ofrece cientos de gigabytes (GB) de almacenamiento, un procesador rápido y varios tipos de tarjetas de red. Incluso con las unidades de disco actuales de 500 GB, un repositorio de contenido de entretenimiento diverso puede exceder la capacidad de almacenamiento de un solo AutoMata. Tales repositorios constituyen el foco de este estudio. Para intercambiar datos, suponemos que cada AutoMata está configurado con dos tipos de tarjetas de red: 1) una tarjeta de red de baja anchura de banda con un radio-rango largo en el orden de millas que permite a un dispositivo AutoMata comunicarse con una estación celular cercana o WiMax, 2) una tarjeta de red de alta anchura de banda con un radio-rango limitado en el orden de cientos de pies. La conexión de ancho de banda alto admite tasas de datos en el orden de decenas a cientos de megabits por segundo y representa la red ad-hoc peer a peer entre los vehículos. Esto se etiqueta como el plano de datos y se emplea para intercambiar elementos de datos entre dispositivos. La conexión de baja anchura de banda sirve como plano de control, permitiendo a los dispositivos AutoMata intercambiar meta-datos con uno o más servidores centralizados. Esta conexión ofrece anchos de banda en el orden de decenas a cientos de Kilobits por segundo. Los servidores centralizados, denominados despachadores, calculan los calendarios de entrega de datos a lo largo del plano de datos utilizando los metadatos proporcionados. Estos horarios se transmiten a los vehículos participantes que utilizan el avión de control. La viabilidad técnica de tal arquitectura de dos niveles se presenta en [7], con resultados preliminares para demostrar que el ancho de banda del plano de control es suficiente para el intercambio de la información de control necesaria para realizar tal aplicación. En un escenario típico, un dispositivo AutoMata presenta a un pasajero con una lista de elementos de datos1, mostrando tanto el nombre de cada elemento de datos como su latencia de disponibilidad. Este último, denotado como ♥, se define como el momento más temprano en que el cliente encuentra una copia de su elemento de datos solicitado. Un elemento de datos está disponible inmediatamente cuando reside en el almacenamiento local del dispositivo AutoMata que atiende a la solicitud. Debido a las restricciones de almacenamiento, un AutoMata puede no almacenar todo el repositorio. En este caso, la latencia de disponibilidad es el tiempo desde que el usuario emite una solicitud hasta que el AutoMata encuentra otro coche que contiene el elemento de datos referenciado. (Los términos coche y AutoMata se utilizan indistintamente en este estudio.) La latencia de disponibilidad para un artículo es una función de la ubicación actual del cliente, su ruta de destino y viaje, el modelo de movilidad de los vehículos equipados con AutoMata, el número de réplicas construidas para los diferentes elementos de datos, y la colocación de réplicas de elementos de datos a través de los vehículos. Un método para mejorar la latencia de disponibilidad es emplear portadores de datos que transportan una réplica del elemento de datos solicitado desde un coche servidor que lo contiene a un cliente que lo solicitó. Estos portadores de datos se denominan zebroids. La selección de cebroides es facilitada por la arquitectura de dos niveles. El plano de control permite la recopilación centralizada de información en un despachador presente en una estación base.2 Algunos ejemplos de control en1 Sin pérdida de generalidad, el término elemento de datos puede ser medios tradicionales como texto o medios continuos como un clip de audio o vídeo. 2 Puede haber despachadores desplegados en un subconjunto de las estaciones de base para la tolerancia a fallos y la robustez. Los distribuidores entre estaciones de base pueden comunicarse a través de la infraestructura cableada. 75 formación son actualmente solicitudes activas, ruta de viaje de los clientes y sus destinos, y caminos de los otros coches. Para cada solicitud del cliente, el despachador puede elegir un conjunto de portadores z que colaboran para transferir un elemento de datos de un servidor a un cliente (z-relay zebroids). Aquí, z es el número de zebroids tales que 0 ≤ z < N, donde N es el número total de coches. Cuando z = 0 no hay portadores, lo que requiere un servidor para entregar el elemento de datos directamente al cliente. De lo contrario, el equipo de relé elegido de z zebroids se entregará los datos de forma transitoria unos a otros para llegar al cliente, reduciendo así la latencia de la disponibilidad (para más detalles, véase la sección 3.1). Para aumentar la robustez, el despachador puede emplear múltiples equipos de relé de portadoras z para cada solicitud. Esto puede ser útil en escenarios en los que el despachador tiene menor precisión de predicción en la información sobre las rutas de los coches. Por último, las restricciones de almacenamiento pueden requerir que un zebroid desaloje elementos de datos existentes de su almacenamiento local para acomodar el elemento solicitado por el cliente. En este estudio, se cuantifican los siguientes factores principales que afectan a la latencia de la disponibilidad en presencia de zebroideos: (i) tamaño del repositorio de datos, (ii) densidad del coche, (iii) capacidad de almacenamiento por coche, (iv) duración del viaje del cliente, (v) esquema de reemplazo empleado por los zebroideos, y (vi) exactitud de las predicciones de la ruta del coche. Para un subconjunto significativo de estos factores, abordamos algunas preguntas clave relativas al uso de zebroids tanto a través del análisis como de simulaciones extensas. Nuestras principales conclusiones son las siguientes. Una política de sustitución aleatoria ingenua empleada por los zebroids muestra un rendimiento competitivo en términos de latencia de disponibilidad. Con esta política, se pueden obtener mejoras sustanciales en la latencia con zebroids con un mínimo de gastos generales de reemplazo. En escenarios más prácticos, donde el despachador tiene información inexacta sobre las rutas del coche, los zebroids continúan proporcionando mejoras de la latencia. Un resultado sorprendente es que los cambios en la popularidad de los ítems de datos no impactan las ganancias de latencia obtenidas con una simple instanciación de z-relay zebroids llamados cebroids uno-instantáneos (ver Sección 3.1). Este estudio sugiere una serie de direcciones interesantes a seguir para obtener una mejor comprensión del diseño de sistemas basados en el portador que mejoran la latencia de disponibilidad. Trabajo relacionado: La replicación en redes móviles ad-hoc ha sido un tema ampliamente estudiado [11, 12, 15]. Sin embargo, ninguno de estos estudios emplea zebroids como portadores de datos para reducir la latencia de las solicitudes de los clientes. Varios estudios novedosos e importantes como ZebraNet [13], DakNet [14], Data Mules [16], Message Ferries [20] y Seek and Focus [17] han analizado factores que afectan a redes conectadas intermitentemente consistentes en portadores de datos similares en espíritu a los zebroideos. Los factores considerados por cada estudio son dictados por su supuesto entorno y aplicación diana. Una característica novedosa de nuestro estudio es el impacto en la latencia de disponibilidad para un repositorio de datos dado de elementos. En [9] se puede obtener una descripción detallada de las obras relacionadas. El resto de este documento está organizado de la siguiente manera. En la sección 2 se ofrece una visión general de la terminología junto con los factores que influyen en la latencia de la disponibilidad en presencia de zebroides. En la sección 3 se describe cómo se pueden emplear los cebroides. En la sección 4 se proporciona información detallada sobre la metodología de análisis empleada para captar el desempeño con los zebroids. En la sección 5 se describen los detalles del entorno de simulación utilizado para la evaluación. La sección 6 recoge las preguntas clave examinadas en este estudio y las responde a través de análisis y simulaciones. Por último, en la sección 7 se presentan breves conclusiones y futuras orientaciones de la investigación. 2. SINOPSIS Y TERMINOLOGÍA La Tabla 1 resume la notación de los parámetros utilizados en el artículo. A continuación introducimos algunas terminologías utilizadas en el artículo. Asumir una red de coches N AutoMata equipados, cada uno con capacidad de almacenamiento de α bytes. La capacidad total de almacenamiento del sistema es ST = N. Hay elementos de datos T en la base de datos, cada uno con parámetros de base de datos T Número de elementos de datos. Si Tamaño del ítem de datos i fi Frecuencia de acceso al ítem de datos i. Parámetros de replicación Ri Frecuencia normalizada de acceso al ítem de datos i ri Número de réplicas para ítem de datos i n Caracteriza un esquema de replicación particular. Latencia media de la disponibilidad del elemento de datos i Łagg Latencia agregada de la disponibilidad, N Número de dispositivos AutoMata en el sistema. α Capacidad de almacenamiento por AutoMata. γ Duración del viaje del cliente AutoMata. ST Capacidad total de almacenamiento del sistema AutoMata, ST = N · α. Cuadro 1: Términos y sus definiciones tamaño Si. La frecuencia de acceso al ítem de datos i se denota como fi, con T j=1 fj = 1. Deje que la duración del viaje del cliente AutoMata en consideración sea γ. Ahora definimos la frecuencia normalizada de acceso al ítem de datos i, denotado por Ri, como: Ri = (fi)n T j=1(fj)n ; 0 ≤ n ≤ فارسى (1) El exponente n caracteriza una técnica de replicación particular. Un esquema de replicación de raíz cuadrada se realiza cuando n = 0.5 [5]. Esto sirve como la línea base para la comparación con el caso cuando se despliegan zebroids. Ri se normaliza a un valor entre 0 y 1. El número de réplicas para el dato i, denotado como ri, es: ri = min (N, max (1, Ri·N Si )). Esto capta el caso cuando al menos una copia de cada elemento de datos debe estar presente en la red ad-hoc en todo momento. En los casos en que un elemento de datos se puede perder de la red ad-hoc, esta ecuación se convierte en ri = min (N, max (0, Ri·N Si )). En este caso, es posible que sea necesario satisfacer una solicitud para el elemento de datos perdido mediante la obtención del elemento desde un servidor remoto. La latencia de disponibilidad para un elemento de datos i, denotado como i, se define como la primera vez en la que un cliente AutoMata encontrará la primera réplica del elemento accesible a él. Si esta condición no se cumple, entonces se establece a i. Esto indica que el elemento de datos I no estaba disponible para el cliente durante su viaje. Tenga en cuenta que como hay al menos una réplica en el sistema para cada elemento de datos i, al establecer γ a un gran valor nos aseguramos de que los clientes soliciten cualquier elemento de datos i será satisfecho. Sin embargo, en la mayoría de las circunstancias prácticas γ puede no ser tan grande como para encontrar cada elemento de datos. Estamos interesados en la latencia de disponibilidad observada en todos los datos. Por lo tanto, aumentamos la latencia media de disponibilidad para cada ítem de datos i con su fi para obtener la siguiente latencia ponderada de disponibilidad (?agg) métrica:?agg = T i=1?i · fi A continuación, presentamos nuestro enfoque de solución describiendo cómo se seleccionan los zebroids. 3. ENFOQUE DE SOLUCIÓN 3.1 Zebroids Cuando un cliente hace referencia a un elemento de datos que falta en su almacenamiento local, el despachador identifica todos los coches con una copia del elemento de datos como servidores. A continuación, el despachador obtiene las rutas futuras de todos los coches para una duración de tiempo finito equivalente al tiempo máximo que el cliente está dispuesto a esperar a que su solicitud sea atendido. Utilizando esta información, el despachador programa la ruta de entrega más rápida desde cualquiera de los servidores al cliente utilizando cualquier otro coche como transportistas intermedios. Por lo tanto, determina el conjunto óptimo de decisiones de reenvío 76 que permitirá que el elemento de datos se entreguen al cliente en el mínimo de tiempo. Tenga en cuenta que la latencia a lo largo de la ruta de entrega más rápida que emplea un equipo de relé de z zebroids es similar a la obtenida con el encaminamiento epidémico [19] bajo los supuestos de almacenamiento infinito y ninguna interferencia. Una simple instanciación de z-relay zebroids se produce cuando z = 1 y la solicitud de los clientes desencadena una transferencia de una copia del elemento de datos solicitado de un servidor a un zebroid en su vecindad. Tal zebroideo se denomina cebroide uniinstantáneo. En algunos casos, el expedidor podría tener información inexacta sobre las rutas de los coches. Por lo tanto, un zebroid programado sobre la base de esta información inexacta puede no reunirse con su cliente objetivo. Para minimizar la probabilidad de tales escenarios, el despachador puede programar múltiples zebroids. Esto puede acarrear gastos generales adicionales debido a la utilización redundante de recursos para obtener las mismas mejoras de latencia. El tiempo necesario para transferir un elemento de datos de un servidor a un zebroid depende de su tamaño y del ancho de banda del enlace disponible. Con elementos de datos pequeños, es razonable suponer que este tiempo de transferencia es pequeño, especialmente en presencia del plano de datos de alto ancho de banda. Los elementos de datos grandes se pueden dividir en trozos más pequeños que permiten al despachador programar uno o más zebroids para entregar cada trozo a un cliente de una manera oportuna. Esta sigue siendo una dirección de investigación futura. Inicialmente, el número de réplicas para cada ítem de datos puede ser calculado usando la Ecuación 1. Este esquema calcula el número de réplicas de datos en función de su popularidad. Es estática porque el número de réplicas en el sistema no cambia y no se realizan reemplazos. Por lo tanto, esto se conoce como el ambiente de los nozebroids. Cuantificamos el desempeño de las diversas políticas de reemplazo con referencia a esta línea base que no emplea zebroids. Uno puede asumir una fase de arranque en frío, donde inicialmente sólo una o pocas copias de cada elemento de datos existen en el sistema. Muchas ranuras de almacenamiento de los coches pueden estar desocupados. Cuando los coches se encuentran entre sí, construyen nuevas réplicas de algunos elementos de datos seleccionados para ocupar los huecos vacíos. El procedimiento de selección puede consistir en elegir los datos de manera uniforme al azar. Nuevas réplicas se crean siempre y cuando un coche tiene un cierto umbral de su almacenamiento desocupado. Eventualmente, la mayoría de la capacidad de almacenamiento de un coche se agotará. 3.2 Políticas de reemplazo basadas en el operador Las políticas de reemplazo consideradas en este documento son reactivas ya que una sustitución se produce sólo en respuesta a una solicitud emitida para un determinado elemento de datos. Cuando el almacenamiento local de un zebroid está completamente ocupado, necesita reemplazar uno de sus elementos existentes para llevar el elemento de datos solicitado por el cliente. Para ello, el zebroid debe seleccionar a un candidato apropiado para el desalojo. Este proceso de decisión es análogo al encontrado en la paginación del sistema operativo donde el objetivo es maximizar la relación de acceso a la caché para evitar el retraso del acceso al disco [18]. Las políticas de reemplazo basadas en transportistas empleadas en nuestro estudio son las menos usadas recientemente (LRU), las menos usadas con frecuencia (LFU) y las aleatorias (donde un candidato de desalojo es elegido uniformemente al azar). Hemos considerado variantes locales y globales de las políticas LRU/LFU que determinan si el conocimiento local o global de los contenidos de los coches conocidos en el expedidor se utiliza para la decisión de desalojo en un zebroid (ver [9] para más detalles). Las pólizas de sustitución entrañan los siguientes gastos generales. En primer lugar, la complejidad asociada a la aplicación de una política. En segundo lugar, el ancho de banda utilizado para transferir una copia de un elemento de datos de un servidor al zebroid. En tercer lugar, el número medio de reemplazos realizados por los zebroides. Tenga en cuenta que en el caso de no cebroides no se incurre en gastos generales. Las métricas consideradas en este estudio son la latencia de la disponibilidad agregada, Tenga en cuenta que los despachadores con la ayuda del plano de control pueden asegurarse de que no se pierda ningún elemento de datos del sistema. En otras palabras, al menos una réplica de cada elemento de datos se mantiene en la red ad-hoc en todo momento. En tales casos, aunque un coche puede encontrarse con un cliente solicitante antes que otros servidores, si su almacenamiento local contiene elementos de datos con sólo una copia en el sistema, entonces tal coche no se elige como un zebroid. 4. METODOLOGÍA DE ANÁLISIS Aquí presentamos la metodología de evaluación analítica y algunas aproximaciones como ecuaciones de forma cerrada que capturan las mejoras en la latencia de disponibilidad que se pueden obtener tanto con cebros oneinstantáneos como con z-relay. Primero, presentamos algunos preliminares de nuestra metodología de análisis. • Que N sea el número de coches en la red que realizan una caminata aleatoria en 2D en un toro de G× G. Un coche adicional sirve como un cliente que entrega un total de N + 1 coches. Este modelo de movilidad se ha utilizado ampliamente en la literatura [17, 16] principalmente porque es susceptible de análisis y proporciona una base de referencia para comparar el rendimiento de otros modelos de movilidad. Además, esta clase de modelos de movilidad markoviana se ha utilizado para modelar los movimientos de los vehículos [3, 21]. • Asumimos que todos los coches comienzan desde la distribución estacionaria y realizan caminatas aleatorias independientes. Aunque para escenarios de densidad escasa, la suposición de independencia se mantiene, ya no es válido cuando N se aproxima a G. • Deje que el tamaño del repositorio de ítems de datos de interés sea T. Además, el ítem de datos i tiene réplicas ri. Esto implica que los coches ri, identificados como servidores, tienen una copia de este elemento de datos cuando el cliente solicita el elemento i. Todos los resultados de análisis presentados en esta sección se obtienen asumiendo que el cliente está dispuesto a esperar el tiempo necesario para que su solicitud sea satisfecha (duración del viaje sin límite γ = ­). Con el modelo de movilidad al azar en un torso 2D, hay una garantía de que mientras haya al menos una réplica del elemento de datos solicitado en la red, el cliente se encontrará con esta réplica [2]. Las extensiones al análisis que también consideran las duraciones del viaje finito se pueden obtener en [9]. Considere un escenario en el que no se emplean zebroids. En este caso, la latencia de disponibilidad esperada para el ítem de datos es el tiempo de reunión esperado de la caminata aleatoria realizada por el cliente con cualquiera de las caminatas aleatorias realizadas por los servidores. Aldous et al. [2] muestran que el tiempo de reunión de dos caminatas aleatorias en tal entorno puede modelarse como una distribución exponencial con la media C = c · G · log G, donde la constante c 0,17 para G ≥ 25. El tiempo de reunión, o equivalente a la latencia de la disponibilidad de i, para el cliente que solicita datos i es el momento hasta que se encuentre con cualquiera de estas réplicas ri por primera vez. Se trata también de una distribución exponencial con el siguiente valor esperado (obsérvese que esta formulación es válida sólo para casos escasos cuando G >> ri): فارسىi = cGlogG ri La latencia de disponibilidad agregada sin emplear zebroids es entonces esta expresión promediada sobre todos los ítems de datos, ponderada por su frecuencia de acceso: فارسىagg(no − zeb) = T i=1 fi Por otra parte, esta réplica se genera en el paso de tiempo cuando el cliente emite la solicitud. Que Nc i sea el número total esperado de nodos que están en la misma celda que cualquiera de los servidores ri. Luego, tenemos Nc i = (N − ri) · (1 − (1 − 1 G )ri ) (3) En el modelo analítico, suponemos que Nc i nuevas réplicas se crean, de modo que el número total de réplicas se aumenta a ri + Nc i. La latencia de disponibilidad se reduce ya que es más probable que el cliente cumpla con una réplica anterior. La latencia agregada de disponibilidad esperada en el caso de los cebroides uno-instantáneos es dada por, agg(zeb) = T i=1 fi · c · G · log G ri + Nc i = T i=1 fi · C ri + Nc i (4) Tenga en cuenta que al obtener esta expresión, para facilitar el análisis, hemos asumido que las nuevas réplicas comienzan Así trata a todos los portadores de Nc i de forma independiente, al igual que los servidores originales ri. Como mostraremos a continuación en comparación con las simulaciones, esta aproximación proporciona un límite superior a las mejoras que se pueden obtener porque da lugar a una menor latencia esperada en el cliente. Cabe señalar que el procedimiento mencionado anteriormente producirá una latencia similar a la empleada por un expedidor que emplee cebroides oneinstantáneos (véase la sección 3.1). Dado que el despachador es consciente de todos los movimientos futuros del coche que sólo transferiría el elemento de datos solicitado en un único zebroid, si determina que el zebroid se reunirá con el cliente antes que cualquier otro servidor. Este zebroid seleccionado está incluido en las nuevas réplicas de Nc i. 4.2 z-relay zebroids Para calcular la latencia de disponibilidad esperada con z-relay zebroids, utilizamos un análogo de problema de coloración similar a un enfoque utilizado por Spyropoulos et al. [17]. En [9] se dan detalles del procedimiento para obtener una expresión de forma cerrada. La latencia de disponibilidad agregada (agg) con z-relay zebroids es dada por, agg(zeb) = T i=1 [fi · C N + 1 · 1 N + 1 − ri · (N · log N ri − log (N + 1 − ri))] (5) 5. METODOLOGÍA DE SIMULACIÓN El entorno de simulación considerado en este estudio se compone de vehículos como automóviles que llevan una fracción del repositorio de datos. Un parámetro de precisión de predicción proporciona inherentemente una cierta garantía probabilística sobre la confianza de las predicciones de ruta del automóvil conocidas en el despachador. Un valor del 100% implica que las rutas exactas de todos los coches se conocen en todo momento. Un valor del 70% para este parámetro indica que las rutas previstas para los coches coincidirán con las reales con probabilidad 0.7. Tenga en cuenta que esta probabilidad se extiende a través de las rutas del coche durante toda la duración del viaje. Ahora proporcionamos los preliminares del estudio de simulación y luego describimos los parámetros de configuración utilizados en nuestros experimentos. • Similar a la metodología de análisis, el mapa utilizado es un toro 2D. Un modelo de movilidad Markov que representa una caminata aleatoria 2D imparcial en la superficie del toro describe el movimiento de los coches a través de este toro. • Cada cuadrícula/célula es un estado único de esta cadena Markov. En cada ranura de tiempo, cada coche hace una transición de una celda a cualquiera de sus 8 celdas vecinas. La transición es una función de la ubicación actual del coche y una matriz de transición de probabilidad Q = [qij] donde qij es la probabilidad de transición del estado i al estado j. Solo los coches equipados con AutoMata dentro de la misma celda pueden comunicarse entre sí. • Los parámetros γ,  han sido discretizados y expresados en términos del número de franjas horarias. • Un dispositivo AutoMata no mantiene más de una réplica de un elemento de datos. Esto se debe a que las réplicas adicionales ocupan el almacenamiento sin proporcionar beneficios. • Los cebroides de relé z o uno instantáneos pueden ser empleados por solicitud del cliente para mejorar la latencia. • A menos que se mencione lo contrario, se supone que el parámetro de precisión de la predicción es del 100%. Esto se debe a que este estudio pretende cuantificar el efecto de un gran número de parámetros individualmente sobre la latencia de la disponibilidad. Aquí, establecemos el tamaño de cada elemento de datos, Si, para ser 1. α representa el número de ranuras de almacenamiento por AutoMata. Cada ranura de almacenamiento almacena un elemento de datos. γ representa la duración del viaje de los clientes en términos del número de franjas horarias. Por lo tanto, los posibles valores de latencia de disponibilidad están entre 0 y γ.  se define como el número de franjas horarias después de lo cual un dispositivo cliente AutoMata encontrará una réplica del elemento de datos por primera vez. Si una réplica para el elemento de datos solicitado fue encontrado por el cliente en la primera celda, a continuación, se establece  = 0. Si se trata de un elemento de datos solicitado, el cliente no encontró ninguna copia del elemento de datos solicitado durante todo su viaje. En todas nuestras simulaciones, para la ilustración consideramos un 5 × 5 2D-torus con γ fijado a 10. Nuestros experimentos indican que las tendencias en la escala de resultados a mapas de mayor tamaño. Simulamos una distribución sesgada de acceso a los datos T que obedece a la ley Ziffs con una media de 0.27. Esta distribución corresponde a la venta de entradas de cine en los Estados Unidos [6]. Empleamos un esquema de replicación que asigna réplicas para un elemento de datos en función de la raíz cuadrada de la frecuencia de acceso de ese elemento. Se muestra que el esquema de replicación de raíz cuadrada tiene un rendimiento de latencia competitivo en un gran espacio de parámetros [8]. Las réplicas de elementos de datos se distribuyen uniformemente entre los dispositivos AutoMata. Esto sirve como el caso de la línea base sin cebros. El esquema de raíz cuadrada también proporciona la distribución de réplica inicial cuando se emplean zebroids. Tenga en cuenta que los reemplazos realizados por los zebroids causarán cambios en la distribución de réplica de ítems de datos. Las solicitudes generadas según la distribución Zipf se emiten una a la vez. El coche cliente que emite la solicitud se elige de una manera redonda-robina. Después de un período máximo de γ, se registra la latencia con que se encontró esta solicitud. En todos los resultados de simulación, cada punto es un promedio de 200.000 solicitudes. Además, los intervalos de confianza del 95% determinados para los resultados son bastante ajustados para las métricas de latencia y los gastos generales de reemplazo. Por lo tanto, sólo los presentamos para la métrica que captura la mejora porcentual de la latencia con respecto al caso de no-zebroides. 6. RESULTADOS En esta sección, describimos nuestros resultados de evaluación donde se abordan las siguientes preguntas clave. Con una amplia selección de esquemas de reemplazo disponibles para un zebroid, ¿cuál es su efecto en la latencia de disponibilidad? Una pregunta más central es: Do zebroids provide 78 0 20 40 60 80 100 1.5 2 2.5 3 3.5 Número de coches Latencia de disponibilidad agregada (­agg ) lru_global lfu_global lru_local lfu_local random Figura 1: La figura 1 muestra la latencia de disponibilidad al emplear cebroids uno-instantáneos en función de los valores (N,α), cuando el ¿Cuáles son los gastos generales asociados en el empleo de estos zebroides? ¿Qué sucede con estas mejoras en escenarios donde un despachador puede tener información imperfecta sobre las rutas del automóvil? ¿Cuáles son las compensaciones inherentes entre la densidad del automóvil y el almacenamiento por automóvil en lo que respecta a su efecto combinado e individual sobre la latencia de la disponibilidad en presencia de zebroids? Presentamos análisis simples y simulaciones detalladas para proporcionar respuestas a estas preguntas, así como para obtener información sobre el diseño de sistemas basados en operadores. 6.1 ¿Cómo funciona un esquema de sustitución empleado por un latencia de disponibilidad de impacto zebroideo? Para ilustrarlo, presentamos experimentos de escala en los que se emplean cebroides oneinstantáneos (ver Figura 1). Por escala, queremos decir que α y N se cambian proporcionalmente para mantener el almacenamiento total del sistema, ST, constante. Aquí, T = 50 y ST = 200. Elegimos los siguientes valores de (N,α) = {(20,10), (25,8), (50,4), (100,2)}. La cifra indica que un plan de sustitución al azar muestra un rendimiento competitivo. Esto se debe a varias razones. Recuerde que la distribución de réplica inicial se establece según el esquema de replicación de raíz cuadrada. El esquema de reemplazo aleatorio no altera esta distribución ya que hace que los reemplazos ciegos a la popularidad de un elemento de datos. Sin embargo, los reemplazos causan una reorganización dinámica de los datos a fin de atender mejor a la solicitud activa actual. Además, el patrón de movilidad de los coches es aleatorio, por lo que las ubicaciones desde las que los clientes emiten las solicitudes también son aleatorias y no se conocen a priori en el despachador. Estas conclusiones son importantes porque una política de sustitución aleatoria puede aplicarse de manera descentralizada. Los esquemas rru-global y lfu-global proporcionan un rendimiento de latencia que es peor que aleatorio. Esto se debe a que estas políticas desarrollan rápidamente una preferencia por los elementos de datos más populares, creando así un mayor número de réplicas para ellos. Durante el desalojo, los datos más populares casi nunca se seleccionan como candidatos de reemplazo. En consecuencia, hay menos réplicas para los artículos menos populares. Por lo tanto, la distribución inicial del elemento de datos replica cambios de raíz cuadrada a que se asemeja a replicación lineal. El mayor número de réplicas de las partidas de datos populares proporciona beneficios adicionales marginales, mientras que el menor número de réplicas de las demás partidas de datos perjudica el rendimiento de latencia de estas políticas mundiales. Los esquemas lfu-local y lru-local tienen un rendimiento similar al aleatorio ya que no tienen suficiente historial de solicitudes de datos locales. Especulamos que el desempeño de estas políticas locales se acercará al de sus variantes globales para una historia suficientemente grande de solicitudes de ítems de datos. Debido al rendimiento competitivo demostrado por una política aleatoria, para el resto del documento, presentamos el rendimiento de los zebroids que emplean una política de reemplazo aleatorio. 6.2 ¿Proporcionan los zebroids mejoras significativas en la latencia de disponibilidad? Encontramos que en muchos escenarios que emplean zebroids proporciona mejoras sustanciales en la latencia de la disponibilidad. 6.2.1 Análisis Primero consideramos el caso de los cebroides uno-instantáneos. La Figura 2.a muestra la variación en Łagg en función de N para T = 10 y α = 1 con 10 × 10 toros usando la Ecuación 4. Los ejes x e y se dibujan a una escala de registro. En la figura 2.b se muestra la mejoría en % en el Agg obtenido con cebroides uniinstantáneos. En este caso, sólo el eje x se dibuja a una escala de registro. Para ilustrar, suponemos que los datos T son solicitados uniformemente. Inicialmente, cuando la red es escasa la aproximación analítica para mejoras en la latencia con zebroids, obtenida de las ecuaciones 2 y 4, coincide estrechamente con los resultados de la simulación. Sin embargo, a medida que N aumenta, la suposición de escasez para la que el análisis es válido, a saber, N+G, ya no es cierta. Por lo tanto, las dos curvas divergen rápidamente. El punto en el que las dos curvas se alejan unas de otras corresponde a un valor de Además, como se mencionó anteriormente, el análisis proporciona un límite superior a las mejoras de la latencia, ya que trata de las réplicas recién creadas dadas por Nc i de forma independiente. Sin embargo, estas réplicas de Nc i comienzan desde la misma celda que una de las réplicas de servidor ri. Finalmente, el análisis captura un escenario oneshot donde dada una distribución inicial de réplica de datos, se calcula la latencia de disponibilidad. Las nuevas réplicas creadas no afectan las solicitudes futuras del cliente. Debido a las limitaciones de espacio, aquí, se resumen las observaciones en el caso de z-relay zebroids se emplean. El lector interesado puede obtener más detalles en [9]. Observaciones similares, como el caso cebroideo uniinstantaneo, se aplican ya que las curvas de simulación y análisis comienzan de nuevo a divergir cuando los supuestos de análisis ya no son válidos. Sin embargo, la observación clave aquí es que la mejora de la latencia con z-relay zebroids es significativamente mejor que el caso de cebroids uno-instantáneos, especialmente para escenarios de almacenamiento más bajos. Esto se debe a que en escenarios escasos, los traspasos transitivos entre los zebroides crean un mayor número de réplicas para el ítem de datos solicitado, lo que produce una menor latencia de disponibilidad. Por otra parte, también se observa que la curva de validación de simulación para las mejoras en Łagg con z-relay zebroids se aproxima a la del caso cebroideo uniinstantánea para un almacenamiento más alto (valores de N más altos). Esto se debe a que los cebroides uno-instantáneos son un caso especial de z-relay zebroides. 6.2.2 Simulación Realizamos simulaciones para examinar todo el espectro de almacenamiento obtenido cambiando la densidad del vehículo N o el almacenamiento por coche α para capturar también escenarios en los que no se mantienen las hipótesis de escasez para las que el análisis es válido. Separamos el efecto de N y α capturando la variación de N manteniendo constante α (caso 1) y viceversa (caso 2) tanto con z-relay y cebroides uno-instantáneos. Aquí, establecemos el tamaño del repositorio como T = 25. En el gráfico 3 figura el caso 1 mencionado anteriormente. Se observan tendencias similares con el caso 2, en [9] se dispone de una descripción completa de esos resultados. Con la Figura 3.b, manteniendo constante α, la densidad del coche aumenta inicialmente tiene mayores beneficios de latencia porque el aumento de N introduce más zebroids en el sistema. A medida que N se incrementa aún más, • reduce porque el almacenamiento total en el sistema sube. En consecuencia, el número de réplicas por elemento de datos sube aumentando así el número de servidores 79. Por lo tanto, la política de reemplazo no puede encontrar un zebroid tan a menudo para transportar el elemento de datos solicitado al cliente antes que cualquiera de los servidores. Por otro lado, el aumento del número de servidores beneficia al caso de no-zebroids al reducir a Agg. El efecto neto da lugar a una reducción de los valores más grandes de N. 10 1 10 2 10 3 10 −1 10 0 10 1 10 2 Número de automóviles no-zebroidsanal no-zebroids sim one-instantaneoussim Agregación Disponibilidad Latencia (­agg ) 2.a) Agg 10 1 10 2 10 3 0 10 20 40 50 60 70 80 90 100 Número de automóviles % Mejora Las tendencias mencionadas anteriormente son similares a las obtenidas del análisis. Sin embargo, algo contra-intuitivamente con almacenamiento relativamente más alto del sistema, z-relay zebroids proporcionan mejoras ligeramente más bajas en la latencia en comparación con uno-instantaneous zebroids. Especulamos que esto se debe a las diferentes distribuciones de réplicas de ítems de datos impuestas por ellos. Tenga en cuenta que los reemplazos realizados por los zebroids causan fluctuaciones en estas distribuciones de réplica que pueden afectar futuras solicitudes de clientes. Actualmente estamos explorando opciones adecuadas de parámetros que pueden capturar estas distribuciones de réplicas cambiantes. 6.3 ¿Cuáles son los gastos generales derivados de la mejora de la latencia de los zebroideos? Encontramos que las mejoras en la latencia con zebroids se obtienen con un mínimo de reemplazo de los gastos generales (< 1 por solicitud del cliente). 6.3.1 Análisis Con cebroides uniinstantáneos, para cada solicitud de cliente se emplea un máximo de un cebroide para mejorar la latencia. Por lo tanto, los gastos generales de sustitución por solicitud del cliente pueden ascender a un máximo de uno. Recordemos que para calcular la latencia con una latencia instantánea 0 50 100 150 200 250 350 400 0 1 2 3 4 5 6 Número de coches Latencia de disponibilidad agregada (?agg ) no-zebroids one-instantaneous z-relays 3.a 0 50 100 150 200 250 300 350 400 0 10 20 30 40 50 60 Número de coches % Mejora en?agg wrt no-zebro Ahora un reemplazo sólo se incumple si una de estas réplicas de Nc i de nueva creación se reúne con el cliente antes que cualquiera de los servidores de ri. Que Xri y XNc i respectivamente sean variables aleatorias que capturen el tiempo mínimo hasta que cualquiera de las réplicas de ri y Nc i cumpla con el cliente. Dado que Xri y XNc i se supone que son independientes, por la propiedad de variables aleatorias distribuidas exponencialmente tenemos, Overhead/request = 1 · P(XNc i < Xri ) + 0 · P(Xri ≤ XNc i ) (6) Overhead/request = ri C ri C + Nc i C = ri ri + Nc i (7) Sin embargo, si N  es constante entonces el aumento de las causas N α 80 0 20 40 60 80 100 0 0,05 0,15 0,20 0,25 0,35 0,40 0,45 0,5 Número de coches cebroides instantáneos número medio de reemplazos por solicitud (N=20,α=10) (N=25,α=8) (N=50,α=4) (N=100,α=2) Figura 4: La figura 4 captura el reemplazo de Esto implica que se incurre en un aumento de los gastos generales de sustitución para valores N y α más altos. Por otra parte, cuando ri = N, esto significa que cada coche tiene una réplica de elemento de datos i. Por lo tanto, no se emplean zebroids cuando se solicita este artículo, lo que da lugar a un gasto general/solicitud para este artículo como cero. A continuación, presentamos resultados de simulación que validan nuestra hipótesis de análisis para los gastos generales asociados con el despliegue de cebroides uno-instantáneos. 6.3.2 Simulación En la figura 4 se muestra la superficie de repuesto con cebroides uno-instantáneos cuando se varían (N,α) manteniendo constante el almacenamiento total del sistema. Las tendencias mostradas por la simulación concuerdan con las previstas por el análisis anterior. Sin embargo, el almacenamiento total del sistema puede ser cambiado ya sea por la densidad variable del coche (N) o el almacenamiento por coche (α). Debido a tendencias similares, aquí presentamos el caso cuando α se mantiene constante y N es variada (Figura 5). Referimos al lector a [9] para el caso cuando α es variado y N se mantiene constante. Presentamos un argumento intuitivo para el comportamiento de las curvas superiores de reemplazo de la solicitud. Cuando el almacenamiento es extremadamente escaso de modo que sólo existe una réplica por elemento de datos en la red AutoMata, el número de reemplazos realizados por los zebroids es cero ya que cualquier reemplazo causará que un elemento de datos se pierda del sistema. El despachador garantiza que no se pierda ningún elemento de datos del sistema. En el otro extremo del espectro, si el almacenamiento se vuelve tan abundante que α = T entonces todo el repositorio de elementos de datos se puede replicar en cada coche. El número de reemplazos es de nuevo cero ya que cada solicitud puede ser satisfecha localmente. Un escenario similar ocurre si N se aumenta a un valor tan grande que otro coche con el elemento de datos solicitado siempre está disponible en las proximidades del cliente. Sin embargo, hay un espectro de almacenamiento en el medio donde los reemplazos por los zebroides programados dan lugar a mejoras en el Agg (ver Figura 3). Por otra parte, observamos que para escenarios de almacenamiento escasos, las mejoras más altas con z-relay zebroids se obtienen al costo de un aumento de los gastos generales de reemplazo en comparación con el caso de cebroids uno-instantáneos. Esto se debe a que en el caso anterior, cada uno de estos z zebroids seleccionados a lo largo de la ruta de latencia más baja al cliente necesita realizar un reemplazo. Sin embargo, los gastos generales de sustitución son todavía inferiores a 1 lo que indica que en promedio se necesita menos de un reemplazo por solicitud del cliente, incluso cuando se emplean z-relay zebroids. 0 50 100 150 200 250 300 350 400 0 0,1 0,2 0,3 0,4 0,6 0,7 0,8 0,9 1 Número de coches z-reemplaza uno-instantánea Número medio de reemplazos por solicitud Figura 5: La figura 5 muestra los gastos generales de reemplazo con cebroide para los casos en que N es diferente manteniendo α = 2. 10 20 30 40 50 60 70 80 90 100 0 0,5 1 1,5 2 2,5 3 3,5 4 Porcentaje de predicción no-zebroideos (N=50) uno-instantáneos (N=50) z-relés (N=50) no-zebroideos (N=200) uno-instantáneos (N=200) z-relés (N=200) Disponibilidad agregada Latencia ( 6.4 ¿Qué sucede con la latencia de la disponibilidad con zebroids en escenarios con inexactitudes en las predicciones de la ruta del coche? Encontramos que los zebroids continúan proporcionando mejoras en la latencia de la disponibilidad incluso con menor precisión en las predicciones de la ruta del coche. Utilizamos un único parámetro p para cuantificar la exactitud de las predicciones de la ruta del coche. 6.4.1 Análisis Dado que p representa la probabilidad de que una ruta del automóvil predicha por el expedidor coincida con la actual, por lo tanto, la latencia con los zebroideos puede ser aproximada por, 6.4.2 Simulación En la figura 6 se muestra la variación en el Agg en función de esta métrica de precisión de la predicción de ruta. Observamos una reducción suave en la mejora de 81 en Agg a medida que la métrica de precisión de predicción reduce. Para los zebroids que están programados pero no se reúnen con el cliente debido al error de predicción, etiquetamos tales reemplazos hechos por los zebroids como fallados. Se ve que los reemplazos fallidos aumentan gradualmente a medida que la precisión de la predicción se reduce. 6.5 ¿En qué condiciones se maximizan las mejoras en la latencia de disponibilidad con zebroids? Sorprendentemente, encontramos que las mejoras en la latencia obtenidas con cebroides uno-instantáneos son independientes de la distribución de entrada de la popularidad de los ítems de datos. 6.5.1 Análisis La diferencia fraccionaria (marcada en la letra ) en la latencia entre los cebroides no-zebroideos y los cebroides uno-instantáneos se obtiene a partir de las ecuaciones 2, 3 y 4 de la siguiente forma: T i=1 fi·C ri − T i=1 fi·C ri+(N−ri)·(1−(1− 1 G )ri Let α = 1, haciendo el almacenamiento total en el sistema ST = N. Suponiendo que la distribución de réplica inicial es según el esquema de replicación de raíz cuadrada, tenemos, ri = fi·N T j = 1 fj. Por lo tanto, obtenemos fi = K2 ·r2 i N2, donde K = T j=1 fj. Utilizando esto, junto con la aproximación (1 − x)n 1 − n · x para x pequeña, simplificamos la ecuación anterior para obtener, • = 1 − T i=1 ri 1+ N−ri G T i=1 ri Para determinar cuándo se maximizan las ganancias con cebroides uno-instantáneos, podemos enmarcar un problema de optimización de la siguiente manera: Maximizar •, sujeto a T i Con un esquema de replicación de raíz cuadrada, las mejoras obtenidas con cebroides uniinstantáneos son independientes de la distribución de popularidad de entrada de los ítems de datos. (Ver [9] para la prueba) 6.5.2 Simulación Realizamos simulaciones con dos diferentes distribución de frecuencias de ítems de datos: Uniforme y Zipfian (con media= 0.27). En ambos casos se obtienen mejoras similares de latencia con cebroides uniinstantáneos. Este resultado tiene importantes implicaciones. En casos con popularidad sesgada hacia ciertos ítems de datos, las mejoras agregadas en la latencia en todas las solicitudes de ítems de datos siguen siendo las mismas. Incluso en escenarios en los que la frecuencia de acceso a los datos cambia dinámicamente, los zebroids seguirán proporcionando mejoras similares en la latencia. 7. CONCLUSIONES Y FUTURAS DIRECCIONES DE INVESTIGACIÓN En este estudio, examinamos las mejoras en la latencia que se pueden obtener en presencia de transportistas que entregan un elemento de datos desde un servidor a un cliente. Se cuantificó la variación de la latencia de disponibilidad en función de un rico conjunto de parámetros como la densidad del coche, el almacenamiento por coche, el tamaño de la base de datos de título y las políticas de reemplazo empleadas por los zebroids. A continuación se resumen algunas direcciones clave de investigación en el futuro que pretendemos seguir. Para reflejar mejor la realidad nos gustaría validar las observaciones obtenidas de este estudio con algunos rastros de simulación del mundo real de movimientos vehiculares (por ejemplo usando CORSIM [1]). Esto también servirá como validación para la utilidad del modelo de movilidad Markov utilizado en este estudio. Actualmente estamos analizando el desempeño de los zebroids en un conjunto de datos del mundo real que comprende una red ad-hoc de autobuses que se mueven alrededor de un pequeño barrio en Amherst [4]. Los cebroides también se pueden utilizar para la entrega de datos que transportan información sensible al retraso con una determinada caducidad. Las extensiones a zebroids que satisfacen estos requisitos de aplicación presentan una dirección de investigación futura interesante. 8. AGRADECIMIENTOS Esta investigación fue apoyada en parte por una beca Annenberg y subvenciones NSF numeradas CNS-0435505 (NeTS NOSS), CNS-0347621 (CAREER), y IIS-0307908. 9. REFERENCIAS [1] Administración Federal de Carreteras. Simulación del corredor. Versión 5.1, http://www.ops.fhwa.dot.gov/trafficanalysistools/cors im.htm. [2] D. Aldous y J. Llena. Cadenas de markov reversibles y caminatas aleatorias en gráficos. En preparación. [3] A. Bar-Noy, I. Kessler y M. Sidi. Usuarios móviles: Para actualizar o no actualizar. En IEEE Infocom, 1994. [4] J. Burgess, B. Gallagher, D. Jensen, y B. Levine. MaxProp: Enrutamiento para redes tolerantes a perturbaciones basadas en vehículos. En IEEE Infocom, abril de 2006. [5] E. Cohen y S. Shenker. Estrategias de replicación en redes de pares no estructuradas. En SIGCOMM, 2002. [6] A. Dan, D. Dias, R. Mukherjee, D. Sitaram y R. Tewari. Buffering y Caching en servidores de vídeo a gran escala. En COMPCON, 1995. [7] S. Ghandeharizadeh, S. Kapadia, y B. Krishnamachari. PAVAN: Marco normativo para la disponibilidad de contenidos en las redes ad hoc de vehículos. En VANET, Nueva York, Nueva York, Estados Unidos, 2004. ACM Press. [8] S. Ghandeharizadeh, S. Kapadia, y B. Krishnamachari. Comparación de estrategias de replicación para la disponibilidad de contenido en redes C2P2. En MDM, mayo de 2005. [9] S. Ghandeharizadeh, S. Kapadia, y B. Krishnamachari. Una evaluación de la latencia de disponibilidad en redes de vehículos ad-hoc basadas en el portador. Informe técnico, Departamento de Ciencias de la Computación, Universidad del Sur de California, CENG-2006-1, 2006. [10] S. Ghandeharizadeh y B. Krishnamachari. C2p2: Una red inter pares para servicios de información de automóviles a petición. En Globe. IEEE, 2004. [11] T. Hara. Asignación eficaz de réplicas en redes ad-hoc para mejorar la accesibilidad de datos. En IEEE Infocom, 2001. [12] H. Hayashi, T. Hara, y S. Nishio. Un método de asignación de réplica Adaptarse a los cambios de topología en redes ad-hoc. En DEXA, 2005. [13] P. Juang, H. Oki, Y. Wang, M. Martonosi, L. Peh, y D. Rubenstein. Computación energéticamente eficiente para el seguimiento de vida silvestre: compensaciones de diseño y experiencias tempranas con ZebraNet. Silgarch Comput. Archit. Noticias, 2002. [14] A. Pentland, R. Fletcher y A. Hasson. DakNet: Repensar la conectividad en las naciones en desarrollo. Computadora, 37(1):78-83, 2004. [15] F. Sailhan y V. Issarny. Caché cooperativo en redes ad-hoc. En MDM, 2003. [16] R. Shah, S. Roy, S. Jain y W. Brunette. Mulas de datos: Modelado y análisis de una arquitectura de tres niveles para redes de sensores escasas. Elsevier ad-hoc Networks Journal, 1o de septiembre de 2003. [17] T. Schiropoulos, K. Psounis y C. Raghavendra. Enrutamiento de una sola copia en redes móviles conectadas intermitentemente. En SECON, abril de 2004. [18] A. Tanenbaum. Sistemas operativos modernos, 2a edición, capítulo 4, sección 4.4. Prentice Hall, 2001. [19] A. Vahdat y D. Becker. Ruta epidémica para redes ad-hoc parcialmente conectadas. Informe técnico, Departamento de Informática, Universidad de Duke, 2000. [20] W. Zhao, M. Ammar, y E. Zegura. Un enfoque de ferriing de mensajes para la entrega de datos en redes móviles ad-hoc escasas. En MobiHoc, págs. 187 a 198, Nueva York, NY, Estados Unidos, 2004. ACM Press. [21] M. Zonoozi y P. Dassanayake. Modelado de Movilidad de Usuario y Caracterización del Patrón de Movilidad. Revista IEEE sobre áreas seleccionadas en las comunicaciones, 15:1239-1252, septiembre de 1997. 82",
    "error_count": 12,
    "keys": {
        "audio and video clip": {
            "translated_key": [],
            "translated_annotated_text": "Una evaluación de la latencia de disponibilidad en redes ad hoc vehiculares basadas en portador Shahram Ghandeharizadeh Dept of Computer Science Univ of Southern California Los Angeles, CA 90089, USA shahram@usc.edu Shyam Kapadia Dept of Computer Science Univ of Southern California Los Angeles, CA 90089, USA kapadia@usc.edu Bhaskar Krishna Nuestro entorno de destino utiliza portadores de datos, llamados zebroids, donde un dispositivo móvil lleva un elemento de datos en nombre de un servidor a un cliente, minimizando así su latencia de disponibilidad. En este estudio, cuantificamos la variación de la latencia de disponibilidad con zebroids en función de un rico conjunto de parámetros como densidad de coche, almacenamiento por dispositivo, tamaño del repositorio y políticas de reemplazo empleadas por zebroids. Utilizando análisis y simulaciones extensas, obtenemos ideas novedosas sobre el diseño de sistemas basados en operadores. Se pueden obtener mejoras significativas en la latencia con zebroids a costa de un mínimo gasto general. Estas mejoras se producen incluso en escenarios con menor precisión en las predicciones de las rutas del coche. Dos hallazgos particularmente sorprendentes son: (1) una política de sustitución aleatoria ingenua empleada por los zebroids muestra un rendimiento competitivo, y (2) mejoras de la latencia obtenidas con una instanciación simplificada de zebroids se encuentran robustos a los cambios en la distribución de popularidad de los ítems de datos. Categorías y Subject Descriptores: C.2.4 [Sistemas distribuidos]: Términos Generales del Cliente/Servidor: Algoritmos, Rendimiento, Diseño, Experimentación. 1. INTRODUCCIÓN Los avances tecnológicos en las esferas del almacenamiento y las comunicaciones inalámbricas han hecho posible ahora prever la entrega a petición de datos, por ejemplo, para clips de vídeo y audio, en redes de peer-topeer vehiculares. En trabajos previos, Ghandeharizadeh et al. [10] introduce el concepto de vehículos equipados con un dispositivo Car-to-Car-Peer-toPeer, denominado AutoMata, para el entretenimiento dentro del vehículo. Las características notables de un AutoMata incluyen un dispositivo de almacenamiento masivo que ofrece cientos de gigabytes (GB) de almacenamiento, un procesador rápido y varios tipos de tarjetas de red. Incluso con las unidades de disco actuales de 500 GB, un repositorio de contenido de entretenimiento diverso puede exceder la capacidad de almacenamiento de un solo AutoMata. Tales repositorios constituyen el foco de este estudio. Para intercambiar datos, suponemos que cada AutoMata está configurado con dos tipos de tarjetas de red: 1) una tarjeta de red de baja anchura de banda con un radio-rango largo en el orden de millas que permite a un dispositivo AutoMata comunicarse con una estación celular cercana o WiMax, 2) una tarjeta de red de alta anchura de banda con un radio-rango limitado en el orden de cientos de pies. La conexión de ancho de banda alto admite tasas de datos en el orden de decenas a cientos de megabits por segundo y representa la red ad-hoc peer a peer entre los vehículos. Esto se etiqueta como el plano de datos y se emplea para intercambiar elementos de datos entre dispositivos. La conexión de baja anchura de banda sirve como plano de control, permitiendo a los dispositivos AutoMata intercambiar meta-datos con uno o más servidores centralizados. Esta conexión ofrece anchos de banda en el orden de decenas a cientos de Kilobits por segundo. Los servidores centralizados, denominados despachadores, calculan los calendarios de entrega de datos a lo largo del plano de datos utilizando los metadatos proporcionados. Estos horarios se transmiten a los vehículos participantes que utilizan el avión de control. La viabilidad técnica de tal arquitectura de dos niveles se presenta en [7], con resultados preliminares para demostrar que el ancho de banda del plano de control es suficiente para el intercambio de la información de control necesaria para realizar tal aplicación. En un escenario típico, un dispositivo AutoMata presenta a un pasajero con una lista de elementos de datos1, mostrando tanto el nombre de cada elemento de datos como su latencia de disponibilidad. Este último, denotado como ♥, se define como el momento más temprano en que el cliente encuentra una copia de su elemento de datos solicitado. Un elemento de datos está disponible inmediatamente cuando reside en el almacenamiento local del dispositivo AutoMata que atiende a la solicitud. Debido a las restricciones de almacenamiento, un AutoMata puede no almacenar todo el repositorio. En este caso, la latencia de disponibilidad es el tiempo desde que el usuario emite una solicitud hasta que el AutoMata encuentra otro coche que contiene el elemento de datos referenciado. (Los términos coche y AutoMata se utilizan indistintamente en este estudio.) La latencia de disponibilidad para un artículo es una función de la ubicación actual del cliente, su ruta de destino y viaje, el modelo de movilidad de los vehículos equipados con AutoMata, el número de réplicas construidas para los diferentes elementos de datos, y la colocación de réplicas de elementos de datos a través de los vehículos. Un método para mejorar la latencia de disponibilidad es emplear portadores de datos que transportan una réplica del elemento de datos solicitado desde un coche servidor que lo contiene a un cliente que lo solicitó. Estos portadores de datos se denominan zebroids. La selección de cebroides es facilitada por la arquitectura de dos niveles. El plano de control permite la recopilación centralizada de información en un despachador presente en una estación base.2 Algunos ejemplos de control en1 Sin pérdida de generalidad, el término elemento de datos puede ser medios tradicionales como texto o medios continuos como un clip de audio o vídeo. 2 Puede haber despachadores desplegados en un subconjunto de las estaciones de base para la tolerancia a fallos y la robustez. Los distribuidores entre estaciones de base pueden comunicarse a través de la infraestructura cableada. 75 formación son actualmente solicitudes activas, ruta de viaje de los clientes y sus destinos, y caminos de los otros coches. Para cada solicitud del cliente, el despachador puede elegir un conjunto de portadores z que colaboran para transferir un elemento de datos de un servidor a un cliente (z-relay zebroids). Aquí, z es el número de zebroids tales que 0 ≤ z < N, donde N es el número total de coches. Cuando z = 0 no hay portadores, lo que requiere un servidor para entregar el elemento de datos directamente al cliente. De lo contrario, el equipo de relé elegido de z zebroids se entregará los datos de forma transitoria unos a otros para llegar al cliente, reduciendo así la latencia de la disponibilidad (para más detalles, véase la sección 3.1). Para aumentar la robustez, el despachador puede emplear múltiples equipos de relé de portadoras z para cada solicitud. Esto puede ser útil en escenarios en los que el despachador tiene menor precisión de predicción en la información sobre las rutas de los coches. Por último, las restricciones de almacenamiento pueden requerir que un zebroid desaloje elementos de datos existentes de su almacenamiento local para acomodar el elemento solicitado por el cliente. En este estudio, se cuantifican los siguientes factores principales que afectan a la latencia de la disponibilidad en presencia de zebroideos: (i) tamaño del repositorio de datos, (ii) densidad del coche, (iii) capacidad de almacenamiento por coche, (iv) duración del viaje del cliente, (v) esquema de reemplazo empleado por los zebroideos, y (vi) exactitud de las predicciones de la ruta del coche. Para un subconjunto significativo de estos factores, abordamos algunas preguntas clave relativas al uso de zebroids tanto a través del análisis como de simulaciones extensas. Nuestras principales conclusiones son las siguientes. Una política de sustitución aleatoria ingenua empleada por los zebroids muestra un rendimiento competitivo en términos de latencia de disponibilidad. Con esta política, se pueden obtener mejoras sustanciales en la latencia con zebroids con un mínimo de gastos generales de reemplazo. En escenarios más prácticos, donde el despachador tiene información inexacta sobre las rutas del coche, los zebroids continúan proporcionando mejoras de la latencia. Un resultado sorprendente es que los cambios en la popularidad de los ítems de datos no impactan las ganancias de latencia obtenidas con una simple instanciación de z-relay zebroids llamados cebroids uno-instantáneos (ver Sección 3.1). Este estudio sugiere una serie de direcciones interesantes a seguir para obtener una mejor comprensión del diseño de sistemas basados en el portador que mejoran la latencia de disponibilidad. Trabajo relacionado: La replicación en redes móviles ad-hoc ha sido un tema ampliamente estudiado [11, 12, 15]. Sin embargo, ninguno de estos estudios emplea zebroids como portadores de datos para reducir la latencia de las solicitudes de los clientes. Varios estudios novedosos e importantes como ZebraNet [13], DakNet [14], Data Mules [16], Message Ferries [20] y Seek and Focus [17] han analizado factores que afectan a redes conectadas intermitentemente consistentes en portadores de datos similares en espíritu a los zebroideos. Los factores considerados por cada estudio son dictados por su supuesto entorno y aplicación diana. Una característica novedosa de nuestro estudio es el impacto en la latencia de disponibilidad para un repositorio de datos dado de elementos. En [9] se puede obtener una descripción detallada de las obras relacionadas. El resto de este documento está organizado de la siguiente manera. En la sección 2 se ofrece una visión general de la terminología junto con los factores que influyen en la latencia de la disponibilidad en presencia de zebroides. En la sección 3 se describe cómo se pueden emplear los cebroides. En la sección 4 se proporciona información detallada sobre la metodología de análisis empleada para captar el desempeño con los zebroids. En la sección 5 se describen los detalles del entorno de simulación utilizado para la evaluación. La sección 6 recoge las preguntas clave examinadas en este estudio y las responde a través de análisis y simulaciones. Por último, en la sección 7 se presentan breves conclusiones y futuras orientaciones de la investigación. 2. SINOPSIS Y TERMINOLOGÍA La Tabla 1 resume la notación de los parámetros utilizados en el artículo. A continuación introducimos algunas terminologías utilizadas en el artículo. Asumir una red de coches N AutoMata equipados, cada uno con capacidad de almacenamiento de α bytes. La capacidad total de almacenamiento del sistema es ST = N. Hay elementos de datos T en la base de datos, cada uno con parámetros de base de datos T Número de elementos de datos. Si Tamaño del ítem de datos i fi Frecuencia de acceso al ítem de datos i. Parámetros de replicación Ri Frecuencia normalizada de acceso al ítem de datos i ri Número de réplicas para ítem de datos i n Caracteriza un esquema de replicación particular. Latencia media de la disponibilidad del elemento de datos i Łagg Latencia agregada de la disponibilidad, N Número de dispositivos AutoMata en el sistema. α Capacidad de almacenamiento por AutoMata. γ Duración del viaje del cliente AutoMata. ST Capacidad total de almacenamiento del sistema AutoMata, ST = N · α. Cuadro 1: Términos y sus definiciones tamaño Si. La frecuencia de acceso al ítem de datos i se denota como fi, con T j=1 fj = 1. Deje que la duración del viaje del cliente AutoMata en consideración sea γ. Ahora definimos la frecuencia normalizada de acceso al ítem de datos i, denotado por Ri, como: Ri = (fi)n T j=1(fj)n ; 0 ≤ n ≤ فارسى (1) El exponente n caracteriza una técnica de replicación particular. Un esquema de replicación de raíz cuadrada se realiza cuando n = 0.5 [5]. Esto sirve como la línea base para la comparación con el caso cuando se despliegan zebroids. Ri se normaliza a un valor entre 0 y 1. El número de réplicas para el dato i, denotado como ri, es: ri = min (N, max (1, Ri·N Si )). Esto capta el caso cuando al menos una copia de cada elemento de datos debe estar presente en la red ad-hoc en todo momento. En los casos en que un elemento de datos se puede perder de la red ad-hoc, esta ecuación se convierte en ri = min (N, max (0, Ri·N Si )). En este caso, es posible que sea necesario satisfacer una solicitud para el elemento de datos perdido mediante la obtención del elemento desde un servidor remoto. La latencia de disponibilidad para un elemento de datos i, denotado como i, se define como la primera vez en la que un cliente AutoMata encontrará la primera réplica del elemento accesible a él. Si esta condición no se cumple, entonces se establece a i. Esto indica que el elemento de datos I no estaba disponible para el cliente durante su viaje. Tenga en cuenta que como hay al menos una réplica en el sistema para cada elemento de datos i, al establecer γ a un gran valor nos aseguramos de que los clientes soliciten cualquier elemento de datos i será satisfecho. Sin embargo, en la mayoría de las circunstancias prácticas γ puede no ser tan grande como para encontrar cada elemento de datos. Estamos interesados en la latencia de disponibilidad observada en todos los datos. Por lo tanto, aumentamos la latencia media de disponibilidad para cada ítem de datos i con su fi para obtener la siguiente latencia ponderada de disponibilidad (?agg) métrica:?agg = T i=1?i · fi A continuación, presentamos nuestro enfoque de solución describiendo cómo se seleccionan los zebroids. 3. ENFOQUE DE SOLUCIÓN 3.1 Zebroids Cuando un cliente hace referencia a un elemento de datos que falta en su almacenamiento local, el despachador identifica todos los coches con una copia del elemento de datos como servidores. A continuación, el despachador obtiene las rutas futuras de todos los coches para una duración de tiempo finito equivalente al tiempo máximo que el cliente está dispuesto a esperar a que su solicitud sea atendido. Utilizando esta información, el despachador programa la ruta de entrega más rápida desde cualquiera de los servidores al cliente utilizando cualquier otro coche como transportistas intermedios. Por lo tanto, determina el conjunto óptimo de decisiones de reenvío 76 que permitirá que el elemento de datos se entreguen al cliente en el mínimo de tiempo. Tenga en cuenta que la latencia a lo largo de la ruta de entrega más rápida que emplea un equipo de relé de z zebroids es similar a la obtenida con el encaminamiento epidémico [19] bajo los supuestos de almacenamiento infinito y ninguna interferencia. Una simple instanciación de z-relay zebroids se produce cuando z = 1 y la solicitud de los clientes desencadena una transferencia de una copia del elemento de datos solicitado de un servidor a un zebroid en su vecindad. Tal zebroideo se denomina cebroide uniinstantáneo. En algunos casos, el expedidor podría tener información inexacta sobre las rutas de los coches. Por lo tanto, un zebroid programado sobre la base de esta información inexacta puede no reunirse con su cliente objetivo. Para minimizar la probabilidad de tales escenarios, el despachador puede programar múltiples zebroids. Esto puede acarrear gastos generales adicionales debido a la utilización redundante de recursos para obtener las mismas mejoras de latencia. El tiempo necesario para transferir un elemento de datos de un servidor a un zebroid depende de su tamaño y del ancho de banda del enlace disponible. Con elementos de datos pequeños, es razonable suponer que este tiempo de transferencia es pequeño, especialmente en presencia del plano de datos de alto ancho de banda. Los elementos de datos grandes se pueden dividir en trozos más pequeños que permiten al despachador programar uno o más zebroids para entregar cada trozo a un cliente de una manera oportuna. Esta sigue siendo una dirección de investigación futura. Inicialmente, el número de réplicas para cada ítem de datos puede ser calculado usando la Ecuación 1. Este esquema calcula el número de réplicas de datos en función de su popularidad. Es estática porque el número de réplicas en el sistema no cambia y no se realizan reemplazos. Por lo tanto, esto se conoce como el ambiente de los nozebroids. Cuantificamos el desempeño de las diversas políticas de reemplazo con referencia a esta línea base que no emplea zebroids. Uno puede asumir una fase de arranque en frío, donde inicialmente sólo una o pocas copias de cada elemento de datos existen en el sistema. Muchas ranuras de almacenamiento de los coches pueden estar desocupados. Cuando los coches se encuentran entre sí, construyen nuevas réplicas de algunos elementos de datos seleccionados para ocupar los huecos vacíos. El procedimiento de selección puede consistir en elegir los datos de manera uniforme al azar. Nuevas réplicas se crean siempre y cuando un coche tiene un cierto umbral de su almacenamiento desocupado. Eventualmente, la mayoría de la capacidad de almacenamiento de un coche se agotará. 3.2 Políticas de reemplazo basadas en el operador Las políticas de reemplazo consideradas en este documento son reactivas ya que una sustitución se produce sólo en respuesta a una solicitud emitida para un determinado elemento de datos. Cuando el almacenamiento local de un zebroid está completamente ocupado, necesita reemplazar uno de sus elementos existentes para llevar el elemento de datos solicitado por el cliente. Para ello, el zebroid debe seleccionar a un candidato apropiado para el desalojo. Este proceso de decisión es análogo al encontrado en la paginación del sistema operativo donde el objetivo es maximizar la relación de acceso a la caché para evitar el retraso del acceso al disco [18]. Las políticas de reemplazo basadas en transportistas empleadas en nuestro estudio son las menos usadas recientemente (LRU), las menos usadas con frecuencia (LFU) y las aleatorias (donde un candidato de desalojo es elegido uniformemente al azar). Hemos considerado variantes locales y globales de las políticas LRU/LFU que determinan si el conocimiento local o global de los contenidos de los coches conocidos en el expedidor se utiliza para la decisión de desalojo en un zebroid (ver [9] para más detalles). Las pólizas de sustitución entrañan los siguientes gastos generales. En primer lugar, la complejidad asociada a la aplicación de una política. En segundo lugar, el ancho de banda utilizado para transferir una copia de un elemento de datos de un servidor al zebroid. En tercer lugar, el número medio de reemplazos realizados por los zebroides. Tenga en cuenta que en el caso de no cebroides no se incurre en gastos generales. Las métricas consideradas en este estudio son la latencia de la disponibilidad agregada, Tenga en cuenta que los despachadores con la ayuda del plano de control pueden asegurarse de que no se pierda ningún elemento de datos del sistema. En otras palabras, al menos una réplica de cada elemento de datos se mantiene en la red ad-hoc en todo momento. En tales casos, aunque un coche puede encontrarse con un cliente solicitante antes que otros servidores, si su almacenamiento local contiene elementos de datos con sólo una copia en el sistema, entonces tal coche no se elige como un zebroid. 4. METODOLOGÍA DE ANÁLISIS Aquí presentamos la metodología de evaluación analítica y algunas aproximaciones como ecuaciones de forma cerrada que capturan las mejoras en la latencia de disponibilidad que se pueden obtener tanto con cebros oneinstantáneos como con z-relay. Primero, presentamos algunos preliminares de nuestra metodología de análisis. • Que N sea el número de coches en la red que realizan una caminata aleatoria en 2D en un toro de G× G. Un coche adicional sirve como un cliente que entrega un total de N + 1 coches. Este modelo de movilidad se ha utilizado ampliamente en la literatura [17, 16] principalmente porque es susceptible de análisis y proporciona una base de referencia para comparar el rendimiento de otros modelos de movilidad. Además, esta clase de modelos de movilidad markoviana se ha utilizado para modelar los movimientos de los vehículos [3, 21]. • Asumimos que todos los coches comienzan desde la distribución estacionaria y realizan caminatas aleatorias independientes. Aunque para escenarios de densidad escasa, la suposición de independencia se mantiene, ya no es válido cuando N se aproxima a G. • Deje que el tamaño del repositorio de ítems de datos de interés sea T. Además, el ítem de datos i tiene réplicas ri. Esto implica que los coches ri, identificados como servidores, tienen una copia de este elemento de datos cuando el cliente solicita el elemento i. Todos los resultados de análisis presentados en esta sección se obtienen asumiendo que el cliente está dispuesto a esperar el tiempo necesario para que su solicitud sea satisfecha (duración del viaje sin límite γ = ­). Con el modelo de movilidad al azar en un torso 2D, hay una garantía de que mientras haya al menos una réplica del elemento de datos solicitado en la red, el cliente se encontrará con esta réplica [2]. Las extensiones al análisis que también consideran las duraciones del viaje finito se pueden obtener en [9]. Considere un escenario en el que no se emplean zebroids. En este caso, la latencia de disponibilidad esperada para el ítem de datos es el tiempo de reunión esperado de la caminata aleatoria realizada por el cliente con cualquiera de las caminatas aleatorias realizadas por los servidores. Aldous et al. [2] muestran que el tiempo de reunión de dos caminatas aleatorias en tal entorno puede modelarse como una distribución exponencial con la media C = c · G · log G, donde la constante c 0,17 para G ≥ 25. El tiempo de reunión, o equivalente a la latencia de la disponibilidad de i, para el cliente que solicita datos i es el momento hasta que se encuentre con cualquiera de estas réplicas ri por primera vez. Se trata también de una distribución exponencial con el siguiente valor esperado (obsérvese que esta formulación es válida sólo para casos escasos cuando G >> ri): فارسىi = cGlogG ri La latencia de disponibilidad agregada sin emplear zebroids es entonces esta expresión promediada sobre todos los ítems de datos, ponderada por su frecuencia de acceso: فارسىagg(no − zeb) = T i=1 fi Por otra parte, esta réplica se genera en el paso de tiempo cuando el cliente emite la solicitud. Que Nc i sea el número total esperado de nodos que están en la misma celda que cualquiera de los servidores ri. Luego, tenemos Nc i = (N − ri) · (1 − (1 − 1 G )ri ) (3) En el modelo analítico, suponemos que Nc i nuevas réplicas se crean, de modo que el número total de réplicas se aumenta a ri + Nc i. La latencia de disponibilidad se reduce ya que es más probable que el cliente cumpla con una réplica anterior. La latencia agregada de disponibilidad esperada en el caso de los cebroides uno-instantáneos es dada por, agg(zeb) = T i=1 fi · c · G · log G ri + Nc i = T i=1 fi · C ri + Nc i (4) Tenga en cuenta que al obtener esta expresión, para facilitar el análisis, hemos asumido que las nuevas réplicas comienzan Así trata a todos los portadores de Nc i de forma independiente, al igual que los servidores originales ri. Como mostraremos a continuación en comparación con las simulaciones, esta aproximación proporciona un límite superior a las mejoras que se pueden obtener porque da lugar a una menor latencia esperada en el cliente. Cabe señalar que el procedimiento mencionado anteriormente producirá una latencia similar a la empleada por un expedidor que emplee cebroides oneinstantáneos (véase la sección 3.1). Dado que el despachador es consciente de todos los movimientos futuros del coche que sólo transferiría el elemento de datos solicitado en un único zebroid, si determina que el zebroid se reunirá con el cliente antes que cualquier otro servidor. Este zebroid seleccionado está incluido en las nuevas réplicas de Nc i. 4.2 z-relay zebroids Para calcular la latencia de disponibilidad esperada con z-relay zebroids, utilizamos un análogo de problema de coloración similar a un enfoque utilizado por Spyropoulos et al. [17]. En [9] se dan detalles del procedimiento para obtener una expresión de forma cerrada. La latencia de disponibilidad agregada (agg) con z-relay zebroids es dada por, agg(zeb) = T i=1 [fi · C N + 1 · 1 N + 1 − ri · (N · log N ri − log (N + 1 − ri))] (5) 5. METODOLOGÍA DE SIMULACIÓN El entorno de simulación considerado en este estudio se compone de vehículos como automóviles que llevan una fracción del repositorio de datos. Un parámetro de precisión de predicción proporciona inherentemente una cierta garantía probabilística sobre la confianza de las predicciones de ruta del automóvil conocidas en el despachador. Un valor del 100% implica que las rutas exactas de todos los coches se conocen en todo momento. Un valor del 70% para este parámetro indica que las rutas previstas para los coches coincidirán con las reales con probabilidad 0.7. Tenga en cuenta que esta probabilidad se extiende a través de las rutas del coche durante toda la duración del viaje. Ahora proporcionamos los preliminares del estudio de simulación y luego describimos los parámetros de configuración utilizados en nuestros experimentos. • Similar a la metodología de análisis, el mapa utilizado es un toro 2D. Un modelo de movilidad Markov que representa una caminata aleatoria 2D imparcial en la superficie del toro describe el movimiento de los coches a través de este toro. • Cada cuadrícula/célula es un estado único de esta cadena Markov. En cada ranura de tiempo, cada coche hace una transición de una celda a cualquiera de sus 8 celdas vecinas. La transición es una función de la ubicación actual del coche y una matriz de transición de probabilidad Q = [qij] donde qij es la probabilidad de transición del estado i al estado j. Solo los coches equipados con AutoMata dentro de la misma celda pueden comunicarse entre sí. • Los parámetros γ,  han sido discretizados y expresados en términos del número de franjas horarias. • Un dispositivo AutoMata no mantiene más de una réplica de un elemento de datos. Esto se debe a que las réplicas adicionales ocupan el almacenamiento sin proporcionar beneficios. • Los cebroides de relé z o uno instantáneos pueden ser empleados por solicitud del cliente para mejorar la latencia. • A menos que se mencione lo contrario, se supone que el parámetro de precisión de la predicción es del 100%. Esto se debe a que este estudio pretende cuantificar el efecto de un gran número de parámetros individualmente sobre la latencia de la disponibilidad. Aquí, establecemos el tamaño de cada elemento de datos, Si, para ser 1. α representa el número de ranuras de almacenamiento por AutoMata. Cada ranura de almacenamiento almacena un elemento de datos. γ representa la duración del viaje de los clientes en términos del número de franjas horarias. Por lo tanto, los posibles valores de latencia de disponibilidad están entre 0 y γ.  se define como el número de franjas horarias después de lo cual un dispositivo cliente AutoMata encontrará una réplica del elemento de datos por primera vez. Si una réplica para el elemento de datos solicitado fue encontrado por el cliente en la primera celda, a continuación, se establece  = 0. Si se trata de un elemento de datos solicitado, el cliente no encontró ninguna copia del elemento de datos solicitado durante todo su viaje. En todas nuestras simulaciones, para la ilustración consideramos un 5 × 5 2D-torus con γ fijado a 10. Nuestros experimentos indican que las tendencias en la escala de resultados a mapas de mayor tamaño. Simulamos una distribución sesgada de acceso a los datos T que obedece a la ley Ziffs con una media de 0.27. Esta distribución corresponde a la venta de entradas de cine en los Estados Unidos [6]. Empleamos un esquema de replicación que asigna réplicas para un elemento de datos en función de la raíz cuadrada de la frecuencia de acceso de ese elemento. Se muestra que el esquema de replicación de raíz cuadrada tiene un rendimiento de latencia competitivo en un gran espacio de parámetros [8]. Las réplicas de elementos de datos se distribuyen uniformemente entre los dispositivos AutoMata. Esto sirve como el caso de la línea base sin cebros. El esquema de raíz cuadrada también proporciona la distribución de réplica inicial cuando se emplean zebroids. Tenga en cuenta que los reemplazos realizados por los zebroids causarán cambios en la distribución de réplica de ítems de datos. Las solicitudes generadas según la distribución Zipf se emiten una a la vez. El coche cliente que emite la solicitud se elige de una manera redonda-robina. Después de un período máximo de γ, se registra la latencia con que se encontró esta solicitud. En todos los resultados de simulación, cada punto es un promedio de 200.000 solicitudes. Además, los intervalos de confianza del 95% determinados para los resultados son bastante ajustados para las métricas de latencia y los gastos generales de reemplazo. Por lo tanto, sólo los presentamos para la métrica que captura la mejora porcentual de la latencia con respecto al caso de no-zebroides. 6. RESULTADOS En esta sección, describimos nuestros resultados de evaluación donde se abordan las siguientes preguntas clave. Con una amplia selección de esquemas de reemplazo disponibles para un zebroid, ¿cuál es su efecto en la latencia de disponibilidad? Una pregunta más central es: Do zebroids provide 78 0 20 40 60 80 100 1.5 2 2.5 3 3.5 Número de coches Latencia de disponibilidad agregada (­agg ) lru_global lfu_global lru_local lfu_local random Figura 1: La figura 1 muestra la latencia de disponibilidad al emplear cebroids uno-instantáneos en función de los valores (N,α), cuando el ¿Cuáles son los gastos generales asociados en el empleo de estos zebroides? ¿Qué sucede con estas mejoras en escenarios donde un despachador puede tener información imperfecta sobre las rutas del automóvil? ¿Cuáles son las compensaciones inherentes entre la densidad del automóvil y el almacenamiento por automóvil en lo que respecta a su efecto combinado e individual sobre la latencia de la disponibilidad en presencia de zebroids? Presentamos análisis simples y simulaciones detalladas para proporcionar respuestas a estas preguntas, así como para obtener información sobre el diseño de sistemas basados en operadores. 6.1 ¿Cómo funciona un esquema de sustitución empleado por un latencia de disponibilidad de impacto zebroideo? Para ilustrarlo, presentamos experimentos de escala en los que se emplean cebroides oneinstantáneos (ver Figura 1). Por escala, queremos decir que α y N se cambian proporcionalmente para mantener el almacenamiento total del sistema, ST, constante. Aquí, T = 50 y ST = 200. Elegimos los siguientes valores de (N,α) = {(20,10), (25,8), (50,4), (100,2)}. La cifra indica que un plan de sustitución al azar muestra un rendimiento competitivo. Esto se debe a varias razones. Recuerde que la distribución de réplica inicial se establece según el esquema de replicación de raíz cuadrada. El esquema de reemplazo aleatorio no altera esta distribución ya que hace que los reemplazos ciegos a la popularidad de un elemento de datos. Sin embargo, los reemplazos causan una reorganización dinámica de los datos a fin de atender mejor a la solicitud activa actual. Además, el patrón de movilidad de los coches es aleatorio, por lo que las ubicaciones desde las que los clientes emiten las solicitudes también son aleatorias y no se conocen a priori en el despachador. Estas conclusiones son importantes porque una política de sustitución aleatoria puede aplicarse de manera descentralizada. Los esquemas rru-global y lfu-global proporcionan un rendimiento de latencia que es peor que aleatorio. Esto se debe a que estas políticas desarrollan rápidamente una preferencia por los elementos de datos más populares, creando así un mayor número de réplicas para ellos. Durante el desalojo, los datos más populares casi nunca se seleccionan como candidatos de reemplazo. En consecuencia, hay menos réplicas para los artículos menos populares. Por lo tanto, la distribución inicial del elemento de datos replica cambios de raíz cuadrada a que se asemeja a replicación lineal. El mayor número de réplicas de las partidas de datos populares proporciona beneficios adicionales marginales, mientras que el menor número de réplicas de las demás partidas de datos perjudica el rendimiento de latencia de estas políticas mundiales. Los esquemas lfu-local y lru-local tienen un rendimiento similar al aleatorio ya que no tienen suficiente historial de solicitudes de datos locales. Especulamos que el desempeño de estas políticas locales se acercará al de sus variantes globales para una historia suficientemente grande de solicitudes de ítems de datos. Debido al rendimiento competitivo demostrado por una política aleatoria, para el resto del documento, presentamos el rendimiento de los zebroids que emplean una política de reemplazo aleatorio. 6.2 ¿Proporcionan los zebroids mejoras significativas en la latencia de disponibilidad? Encontramos que en muchos escenarios que emplean zebroids proporciona mejoras sustanciales en la latencia de la disponibilidad. 6.2.1 Análisis Primero consideramos el caso de los cebroides uno-instantáneos. La Figura 2.a muestra la variación en Łagg en función de N para T = 10 y α = 1 con 10 × 10 toros usando la Ecuación 4. Los ejes x e y se dibujan a una escala de registro. En la figura 2.b se muestra la mejoría en % en el Agg obtenido con cebroides uniinstantáneos. En este caso, sólo el eje x se dibuja a una escala de registro. Para ilustrar, suponemos que los datos T son solicitados uniformemente. Inicialmente, cuando la red es escasa la aproximación analítica para mejoras en la latencia con zebroids, obtenida de las ecuaciones 2 y 4, coincide estrechamente con los resultados de la simulación. Sin embargo, a medida que N aumenta, la suposición de escasez para la que el análisis es válido, a saber, N+G, ya no es cierta. Por lo tanto, las dos curvas divergen rápidamente. El punto en el que las dos curvas se alejan unas de otras corresponde a un valor de Además, como se mencionó anteriormente, el análisis proporciona un límite superior a las mejoras de la latencia, ya que trata de las réplicas recién creadas dadas por Nc i de forma independiente. Sin embargo, estas réplicas de Nc i comienzan desde la misma celda que una de las réplicas de servidor ri. Finalmente, el análisis captura un escenario oneshot donde dada una distribución inicial de réplica de datos, se calcula la latencia de disponibilidad. Las nuevas réplicas creadas no afectan las solicitudes futuras del cliente. Debido a las limitaciones de espacio, aquí, se resumen las observaciones en el caso de z-relay zebroids se emplean. El lector interesado puede obtener más detalles en [9]. Observaciones similares, como el caso cebroideo uniinstantaneo, se aplican ya que las curvas de simulación y análisis comienzan de nuevo a divergir cuando los supuestos de análisis ya no son válidos. Sin embargo, la observación clave aquí es que la mejora de la latencia con z-relay zebroids es significativamente mejor que el caso de cebroids uno-instantáneos, especialmente para escenarios de almacenamiento más bajos. Esto se debe a que en escenarios escasos, los traspasos transitivos entre los zebroides crean un mayor número de réplicas para el ítem de datos solicitado, lo que produce una menor latencia de disponibilidad. Por otra parte, también se observa que la curva de validación de simulación para las mejoras en Łagg con z-relay zebroids se aproxima a la del caso cebroideo uniinstantánea para un almacenamiento más alto (valores de N más altos). Esto se debe a que los cebroides uno-instantáneos son un caso especial de z-relay zebroides. 6.2.2 Simulación Realizamos simulaciones para examinar todo el espectro de almacenamiento obtenido cambiando la densidad del vehículo N o el almacenamiento por coche α para capturar también escenarios en los que no se mantienen las hipótesis de escasez para las que el análisis es válido. Separamos el efecto de N y α capturando la variación de N manteniendo constante α (caso 1) y viceversa (caso 2) tanto con z-relay y cebroides uno-instantáneos. Aquí, establecemos el tamaño del repositorio como T = 25. En el gráfico 3 figura el caso 1 mencionado anteriormente. Se observan tendencias similares con el caso 2, en [9] se dispone de una descripción completa de esos resultados. Con la Figura 3.b, manteniendo constante α, la densidad del coche aumenta inicialmente tiene mayores beneficios de latencia porque el aumento de N introduce más zebroids en el sistema. A medida que N se incrementa aún más, • reduce porque el almacenamiento total en el sistema sube. En consecuencia, el número de réplicas por elemento de datos sube aumentando así el número de servidores 79. Por lo tanto, la política de reemplazo no puede encontrar un zebroid tan a menudo para transportar el elemento de datos solicitado al cliente antes que cualquiera de los servidores. Por otro lado, el aumento del número de servidores beneficia al caso de no-zebroids al reducir a Agg. El efecto neto da lugar a una reducción de los valores más grandes de N. 10 1 10 2 10 3 10 −1 10 0 10 1 10 2 Número de automóviles no-zebroidsanal no-zebroids sim one-instantaneoussim Agregación Disponibilidad Latencia (­agg ) 2.a) Agg 10 1 10 2 10 3 0 10 20 40 50 60 70 80 90 100 Número de automóviles % Mejora Las tendencias mencionadas anteriormente son similares a las obtenidas del análisis. Sin embargo, algo contra-intuitivamente con almacenamiento relativamente más alto del sistema, z-relay zebroids proporcionan mejoras ligeramente más bajas en la latencia en comparación con uno-instantaneous zebroids. Especulamos que esto se debe a las diferentes distribuciones de réplicas de ítems de datos impuestas por ellos. Tenga en cuenta que los reemplazos realizados por los zebroids causan fluctuaciones en estas distribuciones de réplica que pueden afectar futuras solicitudes de clientes. Actualmente estamos explorando opciones adecuadas de parámetros que pueden capturar estas distribuciones de réplicas cambiantes. 6.3 ¿Cuáles son los gastos generales derivados de la mejora de la latencia de los zebroideos? Encontramos que las mejoras en la latencia con zebroids se obtienen con un mínimo de reemplazo de los gastos generales (< 1 por solicitud del cliente). 6.3.1 Análisis Con cebroides uniinstantáneos, para cada solicitud de cliente se emplea un máximo de un cebroide para mejorar la latencia. Por lo tanto, los gastos generales de sustitución por solicitud del cliente pueden ascender a un máximo de uno. Recordemos que para calcular la latencia con una latencia instantánea 0 50 100 150 200 250 350 400 0 1 2 3 4 5 6 Número de coches Latencia de disponibilidad agregada (?agg ) no-zebroids one-instantaneous z-relays 3.a 0 50 100 150 200 250 300 350 400 0 10 20 30 40 50 60 Número de coches % Mejora en?agg wrt no-zebro Ahora un reemplazo sólo se incumple si una de estas réplicas de Nc i de nueva creación se reúne con el cliente antes que cualquiera de los servidores de ri. Que Xri y XNc i respectivamente sean variables aleatorias que capturen el tiempo mínimo hasta que cualquiera de las réplicas de ri y Nc i cumpla con el cliente. Dado que Xri y XNc i se supone que son independientes, por la propiedad de variables aleatorias distribuidas exponencialmente tenemos, Overhead/request = 1 · P(XNc i < Xri ) + 0 · P(Xri ≤ XNc i ) (6) Overhead/request = ri C ri C + Nc i C = ri ri + Nc i (7) Sin embargo, si N  es constante entonces el aumento de las causas N α 80 0 20 40 60 80 100 0 0,05 0,15 0,20 0,25 0,35 0,40 0,45 0,5 Número de coches cebroides instantáneos número medio de reemplazos por solicitud (N=20,α=10) (N=25,α=8) (N=50,α=4) (N=100,α=2) Figura 4: La figura 4 captura el reemplazo de Esto implica que se incurre en un aumento de los gastos generales de sustitución para valores N y α más altos. Por otra parte, cuando ri = N, esto significa que cada coche tiene una réplica de elemento de datos i. Por lo tanto, no se emplean zebroids cuando se solicita este artículo, lo que da lugar a un gasto general/solicitud para este artículo como cero. A continuación, presentamos resultados de simulación que validan nuestra hipótesis de análisis para los gastos generales asociados con el despliegue de cebroides uno-instantáneos. 6.3.2 Simulación En la figura 4 se muestra la superficie de repuesto con cebroides uno-instantáneos cuando se varían (N,α) manteniendo constante el almacenamiento total del sistema. Las tendencias mostradas por la simulación concuerdan con las previstas por el análisis anterior. Sin embargo, el almacenamiento total del sistema puede ser cambiado ya sea por la densidad variable del coche (N) o el almacenamiento por coche (α). Debido a tendencias similares, aquí presentamos el caso cuando α se mantiene constante y N es variada (Figura 5). Referimos al lector a [9] para el caso cuando α es variado y N se mantiene constante. Presentamos un argumento intuitivo para el comportamiento de las curvas superiores de reemplazo de la solicitud. Cuando el almacenamiento es extremadamente escaso de modo que sólo existe una réplica por elemento de datos en la red AutoMata, el número de reemplazos realizados por los zebroids es cero ya que cualquier reemplazo causará que un elemento de datos se pierda del sistema. El despachador garantiza que no se pierda ningún elemento de datos del sistema. En el otro extremo del espectro, si el almacenamiento se vuelve tan abundante que α = T entonces todo el repositorio de elementos de datos se puede replicar en cada coche. El número de reemplazos es de nuevo cero ya que cada solicitud puede ser satisfecha localmente. Un escenario similar ocurre si N se aumenta a un valor tan grande que otro coche con el elemento de datos solicitado siempre está disponible en las proximidades del cliente. Sin embargo, hay un espectro de almacenamiento en el medio donde los reemplazos por los zebroides programados dan lugar a mejoras en el Agg (ver Figura 3). Por otra parte, observamos que para escenarios de almacenamiento escasos, las mejoras más altas con z-relay zebroids se obtienen al costo de un aumento de los gastos generales de reemplazo en comparación con el caso de cebroids uno-instantáneos. Esto se debe a que en el caso anterior, cada uno de estos z zebroids seleccionados a lo largo de la ruta de latencia más baja al cliente necesita realizar un reemplazo. Sin embargo, los gastos generales de sustitución son todavía inferiores a 1 lo que indica que en promedio se necesita menos de un reemplazo por solicitud del cliente, incluso cuando se emplean z-relay zebroids. 0 50 100 150 200 250 300 350 400 0 0,1 0,2 0,3 0,4 0,6 0,7 0,8 0,9 1 Número de coches z-reemplaza uno-instantánea Número medio de reemplazos por solicitud Figura 5: La figura 5 muestra los gastos generales de reemplazo con cebroide para los casos en que N es diferente manteniendo α = 2. 10 20 30 40 50 60 70 80 90 100 0 0,5 1 1,5 2 2,5 3 3,5 4 Porcentaje de predicción no-zebroideos (N=50) uno-instantáneos (N=50) z-relés (N=50) no-zebroideos (N=200) uno-instantáneos (N=200) z-relés (N=200) Disponibilidad agregada Latencia ( 6.4 ¿Qué sucede con la latencia de la disponibilidad con zebroids en escenarios con inexactitudes en las predicciones de la ruta del coche? Encontramos que los zebroids continúan proporcionando mejoras en la latencia de la disponibilidad incluso con menor precisión en las predicciones de la ruta del coche. Utilizamos un único parámetro p para cuantificar la exactitud de las predicciones de la ruta del coche. 6.4.1 Análisis Dado que p representa la probabilidad de que una ruta del automóvil predicha por el expedidor coincida con la actual, por lo tanto, la latencia con los zebroideos puede ser aproximada por, 6.4.2 Simulación En la figura 6 se muestra la variación en el Agg en función de esta métrica de precisión de la predicción de ruta. Observamos una reducción suave en la mejora de 81 en Agg a medida que la métrica de precisión de predicción reduce. Para los zebroids que están programados pero no se reúnen con el cliente debido al error de predicción, etiquetamos tales reemplazos hechos por los zebroids como fallados. Se ve que los reemplazos fallidos aumentan gradualmente a medida que la precisión de la predicción se reduce. 6.5 ¿En qué condiciones se maximizan las mejoras en la latencia de disponibilidad con zebroids? Sorprendentemente, encontramos que las mejoras en la latencia obtenidas con cebroides uno-instantáneos son independientes de la distribución de entrada de la popularidad de los ítems de datos. 6.5.1 Análisis La diferencia fraccionaria (marcada en la letra ) en la latencia entre los cebroides no-zebroideos y los cebroides uno-instantáneos se obtiene a partir de las ecuaciones 2, 3 y 4 de la siguiente forma: T i=1 fi·C ri − T i=1 fi·C ri+(N−ri)·(1−(1− 1 G )ri Let α = 1, haciendo el almacenamiento total en el sistema ST = N. Suponiendo que la distribución de réplica inicial es según el esquema de replicación de raíz cuadrada, tenemos, ri = fi·N T j = 1 fj. Por lo tanto, obtenemos fi = K2 ·r2 i N2, donde K = T j=1 fj. Utilizando esto, junto con la aproximación (1 − x)n 1 − n · x para x pequeña, simplificamos la ecuación anterior para obtener, • = 1 − T i=1 ri 1+ N−ri G T i=1 ri Para determinar cuándo se maximizan las ganancias con cebroides uno-instantáneos, podemos enmarcar un problema de optimización de la siguiente manera: Maximizar •, sujeto a T i Con un esquema de replicación de raíz cuadrada, las mejoras obtenidas con cebroides uniinstantáneos son independientes de la distribución de popularidad de entrada de los ítems de datos. (Ver [9] para la prueba) 6.5.2 Simulación Realizamos simulaciones con dos diferentes distribución de frecuencias de ítems de datos: Uniforme y Zipfian (con media= 0.27). En ambos casos se obtienen mejoras similares de latencia con cebroides uniinstantáneos. Este resultado tiene importantes implicaciones. En casos con popularidad sesgada hacia ciertos ítems de datos, las mejoras agregadas en la latencia en todas las solicitudes de ítems de datos siguen siendo las mismas. Incluso en escenarios en los que la frecuencia de acceso a los datos cambia dinámicamente, los zebroids seguirán proporcionando mejoras similares en la latencia. 7. CONCLUSIONES Y FUTURAS DIRECCIONES DE INVESTIGACIÓN En este estudio, examinamos las mejoras en la latencia que se pueden obtener en presencia de transportistas que entregan un elemento de datos desde un servidor a un cliente. Se cuantificó la variación de la latencia de disponibilidad en función de un rico conjunto de parámetros como la densidad del coche, el almacenamiento por coche, el tamaño de la base de datos de título y las políticas de reemplazo empleadas por los zebroids. A continuación se resumen algunas direcciones clave de investigación en el futuro que pretendemos seguir. Para reflejar mejor la realidad nos gustaría validar las observaciones obtenidas de este estudio con algunos rastros de simulación del mundo real de movimientos vehiculares (por ejemplo usando CORSIM [1]). Esto también servirá como validación para la utilidad del modelo de movilidad Markov utilizado en este estudio. Actualmente estamos analizando el desempeño de los zebroids en un conjunto de datos del mundo real que comprende una red ad-hoc de autobuses que se mueven alrededor de un pequeño barrio en Amherst [4]. Los cebroides también se pueden utilizar para la entrega de datos que transportan información sensible al retraso con una determinada caducidad. Las extensiones a zebroids que satisfacen estos requisitos de aplicación presentan una dirección de investigación futura interesante. 8. AGRADECIMIENTOS Esta investigación fue apoyada en parte por una beca Annenberg y subvenciones NSF numeradas CNS-0435505 (NeTS NOSS), CNS-0347621 (CAREER), y IIS-0307908. 9. REFERENCIAS [1] Administración Federal de Carreteras. Simulación del corredor. Versión 5.1, http://www.ops.fhwa.dot.gov/trafficanalysistools/cors im.htm. [2] D. Aldous y J. Llena. Cadenas de markov reversibles y caminatas aleatorias en gráficos. En preparación. [3] A. Bar-Noy, I. Kessler y M. Sidi. Usuarios móviles: Para actualizar o no actualizar. En IEEE Infocom, 1994. [4] J. Burgess, B. Gallagher, D. Jensen, y B. Levine. MaxProp: Enrutamiento para redes tolerantes a perturbaciones basadas en vehículos. En IEEE Infocom, abril de 2006. [5] E. Cohen y S. Shenker. Estrategias de replicación en redes de pares no estructuradas. En SIGCOMM, 2002. [6] A. Dan, D. Dias, R. Mukherjee, D. Sitaram y R. Tewari. Buffering y Caching en servidores de vídeo a gran escala. En COMPCON, 1995. [7] S. Ghandeharizadeh, S. Kapadia, y B. Krishnamachari. PAVAN: Marco normativo para la disponibilidad de contenidos en las redes ad hoc de vehículos. En VANET, Nueva York, Nueva York, Estados Unidos, 2004. ACM Press. [8] S. Ghandeharizadeh, S. Kapadia, y B. Krishnamachari. Comparación de estrategias de replicación para la disponibilidad de contenido en redes C2P2. En MDM, mayo de 2005. [9] S. Ghandeharizadeh, S. Kapadia, y B. Krishnamachari. Una evaluación de la latencia de disponibilidad en redes de vehículos ad-hoc basadas en el portador. Informe técnico, Departamento de Ciencias de la Computación, Universidad del Sur de California, CENG-2006-1, 2006. [10] S. Ghandeharizadeh y B. Krishnamachari. C2p2: Una red inter pares para servicios de información de automóviles a petición. En Globe. IEEE, 2004. [11] T. Hara. Asignación eficaz de réplicas en redes ad-hoc para mejorar la accesibilidad de datos. En IEEE Infocom, 2001. [12] H. Hayashi, T. Hara, y S. Nishio. Un método de asignación de réplica Adaptarse a los cambios de topología en redes ad-hoc. En DEXA, 2005. [13] P. Juang, H. Oki, Y. Wang, M. Martonosi, L. Peh, y D. Rubenstein. Computación energéticamente eficiente para el seguimiento de vida silvestre: compensaciones de diseño y experiencias tempranas con ZebraNet. Silgarch Comput. Archit. Noticias, 2002. [14] A. Pentland, R. Fletcher y A. Hasson. DakNet: Repensar la conectividad en las naciones en desarrollo. Computadora, 37(1):78-83, 2004. [15] F. Sailhan y V. Issarny. Caché cooperativo en redes ad-hoc. En MDM, 2003. [16] R. Shah, S. Roy, S. Jain y W. Brunette. Mulas de datos: Modelado y análisis de una arquitectura de tres niveles para redes de sensores escasas. Elsevier ad-hoc Networks Journal, 1o de septiembre de 2003. [17] T. Schiropoulos, K. Psounis y C. Raghavendra. Enrutamiento de una sola copia en redes móviles conectadas intermitentemente. En SECON, abril de 2004. [18] A. Tanenbaum. Sistemas operativos modernos, 2a edición, capítulo 4, sección 4.4. Prentice Hall, 2001. [19] A. Vahdat y D. Becker. Ruta epidémica para redes ad-hoc parcialmente conectadas. Informe técnico, Departamento de Informática, Universidad de Duke, 2000. [20] W. Zhao, M. Ammar, y E. Zegura. Un enfoque de ferriing de mensajes para la entrega de datos en redes móviles ad-hoc escasas. En MobiHoc, págs. 187 a 198, Nueva York, NY, Estados Unidos, 2004. ACM Press. [21] M. Zonoozi y P. Dassanayake. Modelado de Movilidad de Usuario y Caracterización del Patrón de Movilidad. Revista IEEE sobre áreas seleccionadas en las comunicaciones, 15:1239-1252, septiembre de 1997. 82 ",
            "error": []
        },
        "peer-to-peer vehicular ad-hoc network": {
            "translated_key": [],
            "translated_annotated_text": "Una evaluación de la latencia de disponibilidad en redes ad hoc vehiculares basadas en portador Shahram Ghandeharizadeh Dept of Computer Science Univ of Southern California Los Angeles, CA 90089, USA shahram@usc.edu Shyam Kapadia Dept of Computer Science Univ of Southern California Los Angeles, CA 90089, USA kapadia@usc.edu Bhaskar Krishna Nuestro entorno de destino utiliza portadores de datos, llamados zebroids, donde un dispositivo móvil lleva un elemento de datos en nombre de un servidor a un cliente, minimizando así su latencia de disponibilidad. En este estudio, cuantificamos la variación de la latencia de disponibilidad con zebroids en función de un rico conjunto de parámetros como densidad de coche, almacenamiento por dispositivo, tamaño del repositorio y políticas de reemplazo empleadas por zebroids. Utilizando análisis y simulaciones extensas, obtenemos ideas novedosas sobre el diseño de sistemas basados en operadores. Se pueden obtener mejoras significativas en la latencia con zebroids a costa de un mínimo gasto general. Estas mejoras se producen incluso en escenarios con menor precisión en las predicciones de las rutas del coche. Dos hallazgos particularmente sorprendentes son: (1) una política de sustitución aleatoria ingenua empleada por los zebroids muestra un rendimiento competitivo, y (2) mejoras de la latencia obtenidas con una instanciación simplificada de zebroids se encuentran robustos a los cambios en la distribución de popularidad de los ítems de datos. Categorías y Subject Descriptores: C.2.4 [Sistemas distribuidos]: Términos Generales del Cliente/Servidor: Algoritmos, Rendimiento, Diseño, Experimentación. 1. INTRODUCCIÓN Los avances tecnológicos en las esferas del almacenamiento y las comunicaciones inalámbricas han hecho posible ahora prever la entrega a petición de datos, por ejemplo, para clips de vídeo y audio, en redes de peer-topeer vehiculares. En trabajos previos, Ghandeharizadeh et al. [10] introduce el concepto de vehículos equipados con un dispositivo Car-to-Car-Peer-toPeer, denominado AutoMata, para el entretenimiento dentro del vehículo. Las características notables de un AutoMata incluyen un dispositivo de almacenamiento masivo que ofrece cientos de gigabytes (GB) de almacenamiento, un procesador rápido y varios tipos de tarjetas de red. Incluso con las unidades de disco actuales de 500 GB, un repositorio de contenido de entretenimiento diverso puede exceder la capacidad de almacenamiento de un solo AutoMata. Tales repositorios constituyen el foco de este estudio. Para intercambiar datos, suponemos que cada AutoMata está configurado con dos tipos de tarjetas de red: 1) una tarjeta de red de baja anchura de banda con un radio-rango largo en el orden de millas que permite a un dispositivo AutoMata comunicarse con una estación celular cercana o WiMax, 2) una tarjeta de red de alta anchura de banda con un radio-rango limitado en el orden de cientos de pies. La conexión de ancho de banda alto admite tasas de datos en el orden de decenas a cientos de megabits por segundo y representa la red ad-hoc peer a peer entre los vehículos. Esto se etiqueta como el plano de datos y se emplea para intercambiar elementos de datos entre dispositivos. La conexión de baja anchura de banda sirve como plano de control, permitiendo a los dispositivos AutoMata intercambiar meta-datos con uno o más servidores centralizados. Esta conexión ofrece anchos de banda en el orden de decenas a cientos de Kilobits por segundo. Los servidores centralizados, denominados despachadores, calculan los calendarios de entrega de datos a lo largo del plano de datos utilizando los metadatos proporcionados. Estos horarios se transmiten a los vehículos participantes que utilizan el avión de control. La viabilidad técnica de tal arquitectura de dos niveles se presenta en [7], con resultados preliminares para demostrar que el ancho de banda del plano de control es suficiente para el intercambio de la información de control necesaria para realizar tal aplicación. En un escenario típico, un dispositivo AutoMata presenta a un pasajero con una lista de elementos de datos1, mostrando tanto el nombre de cada elemento de datos como su latencia de disponibilidad. Este último, denotado como ♥, se define como el momento más temprano en que el cliente encuentra una copia de su elemento de datos solicitado. Un elemento de datos está disponible inmediatamente cuando reside en el almacenamiento local del dispositivo AutoMata que atiende a la solicitud. Debido a las restricciones de almacenamiento, un AutoMata puede no almacenar todo el repositorio. En este caso, la latencia de disponibilidad es el tiempo desde que el usuario emite una solicitud hasta que el AutoMata encuentra otro coche que contiene el elemento de datos referenciado. (Los términos coche y AutoMata se utilizan indistintamente en este estudio.) La latencia de disponibilidad para un artículo es una función de la ubicación actual del cliente, su ruta de destino y viaje, el modelo de movilidad de los vehículos equipados con AutoMata, el número de réplicas construidas para los diferentes elementos de datos, y la colocación de réplicas de elementos de datos a través de los vehículos. Un método para mejorar la latencia de disponibilidad es emplear portadores de datos que transportan una réplica del elemento de datos solicitado desde un coche servidor que lo contiene a un cliente que lo solicitó. Estos portadores de datos se denominan zebroids. La selección de cebroides es facilitada por la arquitectura de dos niveles. El plano de control permite la recopilación centralizada de información en un despachador presente en una estación base.2 Algunos ejemplos de control en1 Sin pérdida de generalidad, el término elemento de datos puede ser medios tradicionales como texto o medios continuos como un clip de audio o vídeo. 2 Puede haber despachadores desplegados en un subconjunto de las estaciones de base para la tolerancia a fallos y la robustez. Los distribuidores entre estaciones de base pueden comunicarse a través de la infraestructura cableada. 75 formación son actualmente solicitudes activas, ruta de viaje de los clientes y sus destinos, y caminos de los otros coches. Para cada solicitud del cliente, el despachador puede elegir un conjunto de portadores z que colaboran para transferir un elemento de datos de un servidor a un cliente (z-relay zebroids). Aquí, z es el número de zebroids tales que 0 ≤ z < N, donde N es el número total de coches. Cuando z = 0 no hay portadores, lo que requiere un servidor para entregar el elemento de datos directamente al cliente. De lo contrario, el equipo de relé elegido de z zebroids se entregará los datos de forma transitoria unos a otros para llegar al cliente, reduciendo así la latencia de la disponibilidad (para más detalles, véase la sección 3.1). Para aumentar la robustez, el despachador puede emplear múltiples equipos de relé de portadoras z para cada solicitud. Esto puede ser útil en escenarios en los que el despachador tiene menor precisión de predicción en la información sobre las rutas de los coches. Por último, las restricciones de almacenamiento pueden requerir que un zebroid desaloje elementos de datos existentes de su almacenamiento local para acomodar el elemento solicitado por el cliente. En este estudio, se cuantifican los siguientes factores principales que afectan a la latencia de la disponibilidad en presencia de zebroideos: (i) tamaño del repositorio de datos, (ii) densidad del coche, (iii) capacidad de almacenamiento por coche, (iv) duración del viaje del cliente, (v) esquema de reemplazo empleado por los zebroideos, y (vi) exactitud de las predicciones de la ruta del coche. Para un subconjunto significativo de estos factores, abordamos algunas preguntas clave relativas al uso de zebroids tanto a través del análisis como de simulaciones extensas. Nuestras principales conclusiones son las siguientes. Una política de sustitución aleatoria ingenua empleada por los zebroids muestra un rendimiento competitivo en términos de latencia de disponibilidad. Con esta política, se pueden obtener mejoras sustanciales en la latencia con zebroids con un mínimo de gastos generales de reemplazo. En escenarios más prácticos, donde el despachador tiene información inexacta sobre las rutas del coche, los zebroids continúan proporcionando mejoras de la latencia. Un resultado sorprendente es que los cambios en la popularidad de los ítems de datos no impactan las ganancias de latencia obtenidas con una simple instanciación de z-relay zebroids llamados cebroids uno-instantáneos (ver Sección 3.1). Este estudio sugiere una serie de direcciones interesantes a seguir para obtener una mejor comprensión del diseño de sistemas basados en el portador que mejoran la latencia de disponibilidad. Trabajo relacionado: La replicación en redes móviles ad-hoc ha sido un tema ampliamente estudiado [11, 12, 15]. Sin embargo, ninguno de estos estudios emplea zebroids como portadores de datos para reducir la latencia de las solicitudes de los clientes. Varios estudios novedosos e importantes como ZebraNet [13], DakNet [14], Data Mules [16], Message Ferries [20] y Seek and Focus [17] han analizado factores que afectan a redes conectadas intermitentemente consistentes en portadores de datos similares en espíritu a los zebroideos. Los factores considerados por cada estudio son dictados por su supuesto entorno y aplicación diana. Una característica novedosa de nuestro estudio es el impacto en la latencia de disponibilidad para un repositorio de datos dado de elementos. En [9] se puede obtener una descripción detallada de las obras relacionadas. El resto de este documento está organizado de la siguiente manera. En la sección 2 se ofrece una visión general de la terminología junto con los factores que influyen en la latencia de la disponibilidad en presencia de zebroides. En la sección 3 se describe cómo se pueden emplear los cebroides. En la sección 4 se proporciona información detallada sobre la metodología de análisis empleada para captar el desempeño con los zebroids. En la sección 5 se describen los detalles del entorno de simulación utilizado para la evaluación. La sección 6 recoge las preguntas clave examinadas en este estudio y las responde a través de análisis y simulaciones. Por último, en la sección 7 se presentan breves conclusiones y futuras orientaciones de la investigación. 2. SINOPSIS Y TERMINOLOGÍA La Tabla 1 resume la notación de los parámetros utilizados en el artículo. A continuación introducimos algunas terminologías utilizadas en el artículo. Asumir una red de coches N AutoMata equipados, cada uno con capacidad de almacenamiento de α bytes. La capacidad total de almacenamiento del sistema es ST = N. Hay elementos de datos T en la base de datos, cada uno con parámetros de base de datos T Número de elementos de datos. Si Tamaño del ítem de datos i fi Frecuencia de acceso al ítem de datos i. Parámetros de replicación Ri Frecuencia normalizada de acceso al ítem de datos i ri Número de réplicas para ítem de datos i n Caracteriza un esquema de replicación particular. Latencia media de la disponibilidad del elemento de datos i Łagg Latencia agregada de la disponibilidad, N Número de dispositivos AutoMata en el sistema. α Capacidad de almacenamiento por AutoMata. γ Duración del viaje del cliente AutoMata. ST Capacidad total de almacenamiento del sistema AutoMata, ST = N · α. Cuadro 1: Términos y sus definiciones tamaño Si. La frecuencia de acceso al ítem de datos i se denota como fi, con T j=1 fj = 1. Deje que la duración del viaje del cliente AutoMata en consideración sea γ. Ahora definimos la frecuencia normalizada de acceso al ítem de datos i, denotado por Ri, como: Ri = (fi)n T j=1(fj)n ; 0 ≤ n ≤ فارسى (1) El exponente n caracteriza una técnica de replicación particular. Un esquema de replicación de raíz cuadrada se realiza cuando n = 0.5 [5]. Esto sirve como la línea base para la comparación con el caso cuando se despliegan zebroids. Ri se normaliza a un valor entre 0 y 1. El número de réplicas para el dato i, denotado como ri, es: ri = min (N, max (1, Ri·N Si )). Esto capta el caso cuando al menos una copia de cada elemento de datos debe estar presente en la red ad-hoc en todo momento. En los casos en que un elemento de datos se puede perder de la red ad-hoc, esta ecuación se convierte en ri = min (N, max (0, Ri·N Si )). En este caso, es posible que sea necesario satisfacer una solicitud para el elemento de datos perdido mediante la obtención del elemento desde un servidor remoto. La latencia de disponibilidad para un elemento de datos i, denotado como i, se define como la primera vez en la que un cliente AutoMata encontrará la primera réplica del elemento accesible a él. Si esta condición no se cumple, entonces se establece a i. Esto indica que el elemento de datos I no estaba disponible para el cliente durante su viaje. Tenga en cuenta que como hay al menos una réplica en el sistema para cada elemento de datos i, al establecer γ a un gran valor nos aseguramos de que los clientes soliciten cualquier elemento de datos i será satisfecho. Sin embargo, en la mayoría de las circunstancias prácticas γ puede no ser tan grande como para encontrar cada elemento de datos. Estamos interesados en la latencia de disponibilidad observada en todos los datos. Por lo tanto, aumentamos la latencia media de disponibilidad para cada ítem de datos i con su fi para obtener la siguiente latencia ponderada de disponibilidad (?agg) métrica:?agg = T i=1?i · fi A continuación, presentamos nuestro enfoque de solución describiendo cómo se seleccionan los zebroids. 3. ENFOQUE DE SOLUCIÓN 3.1 Zebroids Cuando un cliente hace referencia a un elemento de datos que falta en su almacenamiento local, el despachador identifica todos los coches con una copia del elemento de datos como servidores. A continuación, el despachador obtiene las rutas futuras de todos los coches para una duración de tiempo finito equivalente al tiempo máximo que el cliente está dispuesto a esperar a que su solicitud sea atendido. Utilizando esta información, el despachador programa la ruta de entrega más rápida desde cualquiera de los servidores al cliente utilizando cualquier otro coche como transportistas intermedios. Por lo tanto, determina el conjunto óptimo de decisiones de reenvío 76 que permitirá que el elemento de datos se entreguen al cliente en el mínimo de tiempo. Tenga en cuenta que la latencia a lo largo de la ruta de entrega más rápida que emplea un equipo de relé de z zebroids es similar a la obtenida con el encaminamiento epidémico [19] bajo los supuestos de almacenamiento infinito y ninguna interferencia. Una simple instanciación de z-relay zebroids se produce cuando z = 1 y la solicitud de los clientes desencadena una transferencia de una copia del elemento de datos solicitado de un servidor a un zebroid en su vecindad. Tal zebroideo se denomina cebroide uniinstantáneo. En algunos casos, el expedidor podría tener información inexacta sobre las rutas de los coches. Por lo tanto, un zebroid programado sobre la base de esta información inexacta puede no reunirse con su cliente objetivo. Para minimizar la probabilidad de tales escenarios, el despachador puede programar múltiples zebroids. Esto puede acarrear gastos generales adicionales debido a la utilización redundante de recursos para obtener las mismas mejoras de latencia. El tiempo necesario para transferir un elemento de datos de un servidor a un zebroid depende de su tamaño y del ancho de banda del enlace disponible. Con elementos de datos pequeños, es razonable suponer que este tiempo de transferencia es pequeño, especialmente en presencia del plano de datos de alto ancho de banda. Los elementos de datos grandes se pueden dividir en trozos más pequeños que permiten al despachador programar uno o más zebroids para entregar cada trozo a un cliente de una manera oportuna. Esta sigue siendo una dirección de investigación futura. Inicialmente, el número de réplicas para cada ítem de datos puede ser calculado usando la Ecuación 1. Este esquema calcula el número de réplicas de datos en función de su popularidad. Es estática porque el número de réplicas en el sistema no cambia y no se realizan reemplazos. Por lo tanto, esto se conoce como el ambiente de los nozebroids. Cuantificamos el desempeño de las diversas políticas de reemplazo con referencia a esta línea base que no emplea zebroids. Uno puede asumir una fase de arranque en frío, donde inicialmente sólo una o pocas copias de cada elemento de datos existen en el sistema. Muchas ranuras de almacenamiento de los coches pueden estar desocupados. Cuando los coches se encuentran entre sí, construyen nuevas réplicas de algunos elementos de datos seleccionados para ocupar los huecos vacíos. El procedimiento de selección puede consistir en elegir los datos de manera uniforme al azar. Nuevas réplicas se crean siempre y cuando un coche tiene un cierto umbral de su almacenamiento desocupado. Eventualmente, la mayoría de la capacidad de almacenamiento de un coche se agotará. 3.2 Políticas de reemplazo basadas en el operador Las políticas de reemplazo consideradas en este documento son reactivas ya que una sustitución se produce sólo en respuesta a una solicitud emitida para un determinado elemento de datos. Cuando el almacenamiento local de un zebroid está completamente ocupado, necesita reemplazar uno de sus elementos existentes para llevar el elemento de datos solicitado por el cliente. Para ello, el zebroid debe seleccionar a un candidato apropiado para el desalojo. Este proceso de decisión es análogo al encontrado en la paginación del sistema operativo donde el objetivo es maximizar la relación de acceso a la caché para evitar el retraso del acceso al disco [18]. Las políticas de reemplazo basadas en transportistas empleadas en nuestro estudio son las menos usadas recientemente (LRU), las menos usadas con frecuencia (LFU) y las aleatorias (donde un candidato de desalojo es elegido uniformemente al azar). Hemos considerado variantes locales y globales de las políticas LRU/LFU que determinan si el conocimiento local o global de los contenidos de los coches conocidos en el expedidor se utiliza para la decisión de desalojo en un zebroid (ver [9] para más detalles). Las pólizas de sustitución entrañan los siguientes gastos generales. En primer lugar, la complejidad asociada a la aplicación de una política. En segundo lugar, el ancho de banda utilizado para transferir una copia de un elemento de datos de un servidor al zebroid. En tercer lugar, el número medio de reemplazos realizados por los zebroides. Tenga en cuenta que en el caso de no cebroides no se incurre en gastos generales. Las métricas consideradas en este estudio son la latencia de la disponibilidad agregada, Tenga en cuenta que los despachadores con la ayuda del plano de control pueden asegurarse de que no se pierda ningún elemento de datos del sistema. En otras palabras, al menos una réplica de cada elemento de datos se mantiene en la red ad-hoc en todo momento. En tales casos, aunque un coche puede encontrarse con un cliente solicitante antes que otros servidores, si su almacenamiento local contiene elementos de datos con sólo una copia en el sistema, entonces tal coche no se elige como un zebroid. 4. METODOLOGÍA DE ANÁLISIS Aquí presentamos la metodología de evaluación analítica y algunas aproximaciones como ecuaciones de forma cerrada que capturan las mejoras en la latencia de disponibilidad que se pueden obtener tanto con cebros oneinstantáneos como con z-relay. Primero, presentamos algunos preliminares de nuestra metodología de análisis. • Que N sea el número de coches en la red que realizan una caminata aleatoria en 2D en un toro de G× G. Un coche adicional sirve como un cliente que entrega un total de N + 1 coches. Este modelo de movilidad se ha utilizado ampliamente en la literatura [17, 16] principalmente porque es susceptible de análisis y proporciona una base de referencia para comparar el rendimiento de otros modelos de movilidad. Además, esta clase de modelos de movilidad markoviana se ha utilizado para modelar los movimientos de los vehículos [3, 21]. • Asumimos que todos los coches comienzan desde la distribución estacionaria y realizan caminatas aleatorias independientes. Aunque para escenarios de densidad escasa, la suposición de independencia se mantiene, ya no es válido cuando N se aproxima a G. • Deje que el tamaño del repositorio de ítems de datos de interés sea T. Además, el ítem de datos i tiene réplicas ri. Esto implica que los coches ri, identificados como servidores, tienen una copia de este elemento de datos cuando el cliente solicita el elemento i. Todos los resultados de análisis presentados en esta sección se obtienen asumiendo que el cliente está dispuesto a esperar el tiempo necesario para que su solicitud sea satisfecha (duración del viaje sin límite γ = ­). Con el modelo de movilidad al azar en un torso 2D, hay una garantía de que mientras haya al menos una réplica del elemento de datos solicitado en la red, el cliente se encontrará con esta réplica [2]. Las extensiones al análisis que también consideran las duraciones del viaje finito se pueden obtener en [9]. Considere un escenario en el que no se emplean zebroids. En este caso, la latencia de disponibilidad esperada para el ítem de datos es el tiempo de reunión esperado de la caminata aleatoria realizada por el cliente con cualquiera de las caminatas aleatorias realizadas por los servidores. Aldous et al. [2] muestran que el tiempo de reunión de dos caminatas aleatorias en tal entorno puede modelarse como una distribución exponencial con la media C = c · G · log G, donde la constante c 0,17 para G ≥ 25. El tiempo de reunión, o equivalente a la latencia de la disponibilidad de i, para el cliente que solicita datos i es el momento hasta que se encuentre con cualquiera de estas réplicas ri por primera vez. Se trata también de una distribución exponencial con el siguiente valor esperado (obsérvese que esta formulación es válida sólo para casos escasos cuando G >> ri): فارسىi = cGlogG ri La latencia de disponibilidad agregada sin emplear zebroids es entonces esta expresión promediada sobre todos los ítems de datos, ponderada por su frecuencia de acceso: فارسىagg(no − zeb) = T i=1 fi Por otra parte, esta réplica se genera en el paso de tiempo cuando el cliente emite la solicitud. Que Nc i sea el número total esperado de nodos que están en la misma celda que cualquiera de los servidores ri. Luego, tenemos Nc i = (N − ri) · (1 − (1 − 1 G )ri ) (3) En el modelo analítico, suponemos que Nc i nuevas réplicas se crean, de modo que el número total de réplicas se aumenta a ri + Nc i. La latencia de disponibilidad se reduce ya que es más probable que el cliente cumpla con una réplica anterior. La latencia agregada de disponibilidad esperada en el caso de los cebroides uno-instantáneos es dada por, agg(zeb) = T i=1 fi · c · G · log G ri + Nc i = T i=1 fi · C ri + Nc i (4) Tenga en cuenta que al obtener esta expresión, para facilitar el análisis, hemos asumido que las nuevas réplicas comienzan Así trata a todos los portadores de Nc i de forma independiente, al igual que los servidores originales ri. Como mostraremos a continuación en comparación con las simulaciones, esta aproximación proporciona un límite superior a las mejoras que se pueden obtener porque da lugar a una menor latencia esperada en el cliente. Cabe señalar que el procedimiento mencionado anteriormente producirá una latencia similar a la empleada por un expedidor que emplee cebroides oneinstantáneos (véase la sección 3.1). Dado que el despachador es consciente de todos los movimientos futuros del coche que sólo transferiría el elemento de datos solicitado en un único zebroid, si determina que el zebroid se reunirá con el cliente antes que cualquier otro servidor. Este zebroid seleccionado está incluido en las nuevas réplicas de Nc i. 4.2 z-relay zebroids Para calcular la latencia de disponibilidad esperada con z-relay zebroids, utilizamos un análogo de problema de coloración similar a un enfoque utilizado por Spyropoulos et al. [17]. En [9] se dan detalles del procedimiento para obtener una expresión de forma cerrada. La latencia de disponibilidad agregada (agg) con z-relay zebroids es dada por, agg(zeb) = T i=1 [fi · C N + 1 · 1 N + 1 − ri · (N · log N ri − log (N + 1 − ri))] (5) 5. METODOLOGÍA DE SIMULACIÓN El entorno de simulación considerado en este estudio se compone de vehículos como automóviles que llevan una fracción del repositorio de datos. Un parámetro de precisión de predicción proporciona inherentemente una cierta garantía probabilística sobre la confianza de las predicciones de ruta del automóvil conocidas en el despachador. Un valor del 100% implica que las rutas exactas de todos los coches se conocen en todo momento. Un valor del 70% para este parámetro indica que las rutas previstas para los coches coincidirán con las reales con probabilidad 0.7. Tenga en cuenta que esta probabilidad se extiende a través de las rutas del coche durante toda la duración del viaje. Ahora proporcionamos los preliminares del estudio de simulación y luego describimos los parámetros de configuración utilizados en nuestros experimentos. • Similar a la metodología de análisis, el mapa utilizado es un toro 2D. Un modelo de movilidad Markov que representa una caminata aleatoria 2D imparcial en la superficie del toro describe el movimiento de los coches a través de este toro. • Cada cuadrícula/célula es un estado único de esta cadena Markov. En cada ranura de tiempo, cada coche hace una transición de una celda a cualquiera de sus 8 celdas vecinas. La transición es una función de la ubicación actual del coche y una matriz de transición de probabilidad Q = [qij] donde qij es la probabilidad de transición del estado i al estado j. Solo los coches equipados con AutoMata dentro de la misma celda pueden comunicarse entre sí. • Los parámetros γ,  han sido discretizados y expresados en términos del número de franjas horarias. • Un dispositivo AutoMata no mantiene más de una réplica de un elemento de datos. Esto se debe a que las réplicas adicionales ocupan el almacenamiento sin proporcionar beneficios. • Los cebroides de relé z o uno instantáneos pueden ser empleados por solicitud del cliente para mejorar la latencia. • A menos que se mencione lo contrario, se supone que el parámetro de precisión de la predicción es del 100%. Esto se debe a que este estudio pretende cuantificar el efecto de un gran número de parámetros individualmente sobre la latencia de la disponibilidad. Aquí, establecemos el tamaño de cada elemento de datos, Si, para ser 1. α representa el número de ranuras de almacenamiento por AutoMata. Cada ranura de almacenamiento almacena un elemento de datos. γ representa la duración del viaje de los clientes en términos del número de franjas horarias. Por lo tanto, los posibles valores de latencia de disponibilidad están entre 0 y γ.  se define como el número de franjas horarias después de lo cual un dispositivo cliente AutoMata encontrará una réplica del elemento de datos por primera vez. Si una réplica para el elemento de datos solicitado fue encontrado por el cliente en la primera celda, a continuación, se establece  = 0. Si se trata de un elemento de datos solicitado, el cliente no encontró ninguna copia del elemento de datos solicitado durante todo su viaje. En todas nuestras simulaciones, para la ilustración consideramos un 5 × 5 2D-torus con γ fijado a 10. Nuestros experimentos indican que las tendencias en la escala de resultados a mapas de mayor tamaño. Simulamos una distribución sesgada de acceso a los datos T que obedece a la ley Ziffs con una media de 0.27. Esta distribución corresponde a la venta de entradas de cine en los Estados Unidos [6]. Empleamos un esquema de replicación que asigna réplicas para un elemento de datos en función de la raíz cuadrada de la frecuencia de acceso de ese elemento. Se muestra que el esquema de replicación de raíz cuadrada tiene un rendimiento de latencia competitivo en un gran espacio de parámetros [8]. Las réplicas de elementos de datos se distribuyen uniformemente entre los dispositivos AutoMata. Esto sirve como el caso de la línea base sin cebros. El esquema de raíz cuadrada también proporciona la distribución de réplica inicial cuando se emplean zebroids. Tenga en cuenta que los reemplazos realizados por los zebroids causarán cambios en la distribución de réplica de ítems de datos. Las solicitudes generadas según la distribución Zipf se emiten una a la vez. El coche cliente que emite la solicitud se elige de una manera redonda-robina. Después de un período máximo de γ, se registra la latencia con que se encontró esta solicitud. En todos los resultados de simulación, cada punto es un promedio de 200.000 solicitudes. Además, los intervalos de confianza del 95% determinados para los resultados son bastante ajustados para las métricas de latencia y los gastos generales de reemplazo. Por lo tanto, sólo los presentamos para la métrica que captura la mejora porcentual de la latencia con respecto al caso de no-zebroides. 6. RESULTADOS En esta sección, describimos nuestros resultados de evaluación donde se abordan las siguientes preguntas clave. Con una amplia selección de esquemas de reemplazo disponibles para un zebroid, ¿cuál es su efecto en la latencia de disponibilidad? Una pregunta más central es: Do zebroids provide 78 0 20 40 60 80 100 1.5 2 2.5 3 3.5 Número de coches Latencia de disponibilidad agregada (­agg ) lru_global lfu_global lru_local lfu_local random Figura 1: La figura 1 muestra la latencia de disponibilidad al emplear cebroids uno-instantáneos en función de los valores (N,α), cuando el ¿Cuáles son los gastos generales asociados en el empleo de estos zebroides? ¿Qué sucede con estas mejoras en escenarios donde un despachador puede tener información imperfecta sobre las rutas del automóvil? ¿Cuáles son las compensaciones inherentes entre la densidad del automóvil y el almacenamiento por automóvil en lo que respecta a su efecto combinado e individual sobre la latencia de la disponibilidad en presencia de zebroids? Presentamos análisis simples y simulaciones detalladas para proporcionar respuestas a estas preguntas, así como para obtener información sobre el diseño de sistemas basados en operadores. 6.1 ¿Cómo funciona un esquema de sustitución empleado por un latencia de disponibilidad de impacto zebroideo? Para ilustrarlo, presentamos experimentos de escala en los que se emplean cebroides oneinstantáneos (ver Figura 1). Por escala, queremos decir que α y N se cambian proporcionalmente para mantener el almacenamiento total del sistema, ST, constante. Aquí, T = 50 y ST = 200. Elegimos los siguientes valores de (N,α) = {(20,10), (25,8), (50,4), (100,2)}. La cifra indica que un plan de sustitución al azar muestra un rendimiento competitivo. Esto se debe a varias razones. Recuerde que la distribución de réplica inicial se establece según el esquema de replicación de raíz cuadrada. El esquema de reemplazo aleatorio no altera esta distribución ya que hace que los reemplazos ciegos a la popularidad de un elemento de datos. Sin embargo, los reemplazos causan una reorganización dinámica de los datos a fin de atender mejor a la solicitud activa actual. Además, el patrón de movilidad de los coches es aleatorio, por lo que las ubicaciones desde las que los clientes emiten las solicitudes también son aleatorias y no se conocen a priori en el despachador. Estas conclusiones son importantes porque una política de sustitución aleatoria puede aplicarse de manera descentralizada. Los esquemas rru-global y lfu-global proporcionan un rendimiento de latencia que es peor que aleatorio. Esto se debe a que estas políticas desarrollan rápidamente una preferencia por los elementos de datos más populares, creando así un mayor número de réplicas para ellos. Durante el desalojo, los datos más populares casi nunca se seleccionan como candidatos de reemplazo. En consecuencia, hay menos réplicas para los artículos menos populares. Por lo tanto, la distribución inicial del elemento de datos replica cambios de raíz cuadrada a que se asemeja a replicación lineal. El mayor número de réplicas de las partidas de datos populares proporciona beneficios adicionales marginales, mientras que el menor número de réplicas de las demás partidas de datos perjudica el rendimiento de latencia de estas políticas mundiales. Los esquemas lfu-local y lru-local tienen un rendimiento similar al aleatorio ya que no tienen suficiente historial de solicitudes de datos locales. Especulamos que el desempeño de estas políticas locales se acercará al de sus variantes globales para una historia suficientemente grande de solicitudes de ítems de datos. Debido al rendimiento competitivo demostrado por una política aleatoria, para el resto del documento, presentamos el rendimiento de los zebroids que emplean una política de reemplazo aleatorio. 6.2 ¿Proporcionan los zebroids mejoras significativas en la latencia de disponibilidad? Encontramos que en muchos escenarios que emplean zebroids proporciona mejoras sustanciales en la latencia de la disponibilidad. 6.2.1 Análisis Primero consideramos el caso de los cebroides uno-instantáneos. La Figura 2.a muestra la variación en Łagg en función de N para T = 10 y α = 1 con 10 × 10 toros usando la Ecuación 4. Los ejes x e y se dibujan a una escala de registro. En la figura 2.b se muestra la mejoría en % en el Agg obtenido con cebroides uniinstantáneos. En este caso, sólo el eje x se dibuja a una escala de registro. Para ilustrar, suponemos que los datos T son solicitados uniformemente. Inicialmente, cuando la red es escasa la aproximación analítica para mejoras en la latencia con zebroids, obtenida de las ecuaciones 2 y 4, coincide estrechamente con los resultados de la simulación. Sin embargo, a medida que N aumenta, la suposición de escasez para la que el análisis es válido, a saber, N+G, ya no es cierta. Por lo tanto, las dos curvas divergen rápidamente. El punto en el que las dos curvas se alejan unas de otras corresponde a un valor de Además, como se mencionó anteriormente, el análisis proporciona un límite superior a las mejoras de la latencia, ya que trata de las réplicas recién creadas dadas por Nc i de forma independiente. Sin embargo, estas réplicas de Nc i comienzan desde la misma celda que una de las réplicas de servidor ri. Finalmente, el análisis captura un escenario oneshot donde dada una distribución inicial de réplica de datos, se calcula la latencia de disponibilidad. Las nuevas réplicas creadas no afectan las solicitudes futuras del cliente. Debido a las limitaciones de espacio, aquí, se resumen las observaciones en el caso de z-relay zebroids se emplean. El lector interesado puede obtener más detalles en [9]. Observaciones similares, como el caso cebroideo uniinstantaneo, se aplican ya que las curvas de simulación y análisis comienzan de nuevo a divergir cuando los supuestos de análisis ya no son válidos. Sin embargo, la observación clave aquí es que la mejora de la latencia con z-relay zebroids es significativamente mejor que el caso de cebroids uno-instantáneos, especialmente para escenarios de almacenamiento más bajos. Esto se debe a que en escenarios escasos, los traspasos transitivos entre los zebroides crean un mayor número de réplicas para el ítem de datos solicitado, lo que produce una menor latencia de disponibilidad. Por otra parte, también se observa que la curva de validación de simulación para las mejoras en Łagg con z-relay zebroids se aproxima a la del caso cebroideo uniinstantánea para un almacenamiento más alto (valores de N más altos). Esto se debe a que los cebroides uno-instantáneos son un caso especial de z-relay zebroides. 6.2.2 Simulación Realizamos simulaciones para examinar todo el espectro de almacenamiento obtenido cambiando la densidad del vehículo N o el almacenamiento por coche α para capturar también escenarios en los que no se mantienen las hipótesis de escasez para las que el análisis es válido. Separamos el efecto de N y α capturando la variación de N manteniendo constante α (caso 1) y viceversa (caso 2) tanto con z-relay y cebroides uno-instantáneos. Aquí, establecemos el tamaño del repositorio como T = 25. En el gráfico 3 figura el caso 1 mencionado anteriormente. Se observan tendencias similares con el caso 2, en [9] se dispone de una descripción completa de esos resultados. Con la Figura 3.b, manteniendo constante α, la densidad del coche aumenta inicialmente tiene mayores beneficios de latencia porque el aumento de N introduce más zebroids en el sistema. A medida que N se incrementa aún más, • reduce porque el almacenamiento total en el sistema sube. En consecuencia, el número de réplicas por elemento de datos sube aumentando así el número de servidores 79. Por lo tanto, la política de reemplazo no puede encontrar un zebroid tan a menudo para transportar el elemento de datos solicitado al cliente antes que cualquiera de los servidores. Por otro lado, el aumento del número de servidores beneficia al caso de no-zebroids al reducir a Agg. El efecto neto da lugar a una reducción de los valores más grandes de N. 10 1 10 2 10 3 10 −1 10 0 10 1 10 2 Número de automóviles no-zebroidsanal no-zebroids sim one-instantaneoussim Agregación Disponibilidad Latencia (­agg ) 2.a) Agg 10 1 10 2 10 3 0 10 20 40 50 60 70 80 90 100 Número de automóviles % Mejora Las tendencias mencionadas anteriormente son similares a las obtenidas del análisis. Sin embargo, algo contra-intuitivamente con almacenamiento relativamente más alto del sistema, z-relay zebroids proporcionan mejoras ligeramente más bajas en la latencia en comparación con uno-instantaneous zebroids. Especulamos que esto se debe a las diferentes distribuciones de réplicas de ítems de datos impuestas por ellos. Tenga en cuenta que los reemplazos realizados por los zebroids causan fluctuaciones en estas distribuciones de réplica que pueden afectar futuras solicitudes de clientes. Actualmente estamos explorando opciones adecuadas de parámetros que pueden capturar estas distribuciones de réplicas cambiantes. 6.3 ¿Cuáles son los gastos generales derivados de la mejora de la latencia de los zebroideos? Encontramos que las mejoras en la latencia con zebroids se obtienen con un mínimo de reemplazo de los gastos generales (< 1 por solicitud del cliente). 6.3.1 Análisis Con cebroides uniinstantáneos, para cada solicitud de cliente se emplea un máximo de un cebroide para mejorar la latencia. Por lo tanto, los gastos generales de sustitución por solicitud del cliente pueden ascender a un máximo de uno. Recordemos que para calcular la latencia con una latencia instantánea 0 50 100 150 200 250 350 400 0 1 2 3 4 5 6 Número de coches Latencia de disponibilidad agregada (?agg ) no-zebroids one-instantaneous z-relays 3.a 0 50 100 150 200 250 300 350 400 0 10 20 30 40 50 60 Número de coches % Mejora en?agg wrt no-zebro Ahora un reemplazo sólo se incumple si una de estas réplicas de Nc i de nueva creación se reúne con el cliente antes que cualquiera de los servidores de ri. Que Xri y XNc i respectivamente sean variables aleatorias que capturen el tiempo mínimo hasta que cualquiera de las réplicas de ri y Nc i cumpla con el cliente. Dado que Xri y XNc i se supone que son independientes, por la propiedad de variables aleatorias distribuidas exponencialmente tenemos, Overhead/request = 1 · P(XNc i < Xri ) + 0 · P(Xri ≤ XNc i ) (6) Overhead/request = ri C ri C + Nc i C = ri ri + Nc i (7) Sin embargo, si N  es constante entonces el aumento de las causas N α 80 0 20 40 60 80 100 0 0,05 0,15 0,20 0,25 0,35 0,40 0,45 0,5 Número de coches cebroides instantáneos número medio de reemplazos por solicitud (N=20,α=10) (N=25,α=8) (N=50,α=4) (N=100,α=2) Figura 4: La figura 4 captura el reemplazo de Esto implica que se incurre en un aumento de los gastos generales de sustitución para valores N y α más altos. Por otra parte, cuando ri = N, esto significa que cada coche tiene una réplica de elemento de datos i. Por lo tanto, no se emplean zebroids cuando se solicita este artículo, lo que da lugar a un gasto general/solicitud para este artículo como cero. A continuación, presentamos resultados de simulación que validan nuestra hipótesis de análisis para los gastos generales asociados con el despliegue de cebroides uno-instantáneos. 6.3.2 Simulación En la figura 4 se muestra la superficie de repuesto con cebroides uno-instantáneos cuando se varían (N,α) manteniendo constante el almacenamiento total del sistema. Las tendencias mostradas por la simulación concuerdan con las previstas por el análisis anterior. Sin embargo, el almacenamiento total del sistema puede ser cambiado ya sea por la densidad variable del coche (N) o el almacenamiento por coche (α). Debido a tendencias similares, aquí presentamos el caso cuando α se mantiene constante y N es variada (Figura 5). Referimos al lector a [9] para el caso cuando α es variado y N se mantiene constante. Presentamos un argumento intuitivo para el comportamiento de las curvas superiores de reemplazo de la solicitud. Cuando el almacenamiento es extremadamente escaso de modo que sólo existe una réplica por elemento de datos en la red AutoMata, el número de reemplazos realizados por los zebroids es cero ya que cualquier reemplazo causará que un elemento de datos se pierda del sistema. El despachador garantiza que no se pierda ningún elemento de datos del sistema. En el otro extremo del espectro, si el almacenamiento se vuelve tan abundante que α = T entonces todo el repositorio de elementos de datos se puede replicar en cada coche. El número de reemplazos es de nuevo cero ya que cada solicitud puede ser satisfecha localmente. Un escenario similar ocurre si N se aumenta a un valor tan grande que otro coche con el elemento de datos solicitado siempre está disponible en las proximidades del cliente. Sin embargo, hay un espectro de almacenamiento en el medio donde los reemplazos por los zebroides programados dan lugar a mejoras en el Agg (ver Figura 3). Por otra parte, observamos que para escenarios de almacenamiento escasos, las mejoras más altas con z-relay zebroids se obtienen al costo de un aumento de los gastos generales de reemplazo en comparación con el caso de cebroids uno-instantáneos. Esto se debe a que en el caso anterior, cada uno de estos z zebroids seleccionados a lo largo de la ruta de latencia más baja al cliente necesita realizar un reemplazo. Sin embargo, los gastos generales de sustitución son todavía inferiores a 1 lo que indica que en promedio se necesita menos de un reemplazo por solicitud del cliente, incluso cuando se emplean z-relay zebroids. 0 50 100 150 200 250 300 350 400 0 0,1 0,2 0,3 0,4 0,6 0,7 0,8 0,9 1 Número de coches z-reemplaza uno-instantánea Número medio de reemplazos por solicitud Figura 5: La figura 5 muestra los gastos generales de reemplazo con cebroide para los casos en que N es diferente manteniendo α = 2. 10 20 30 40 50 60 70 80 90 100 0 0,5 1 1,5 2 2,5 3 3,5 4 Porcentaje de predicción no-zebroideos (N=50) uno-instantáneos (N=50) z-relés (N=50) no-zebroideos (N=200) uno-instantáneos (N=200) z-relés (N=200) Disponibilidad agregada Latencia ( 6.4 ¿Qué sucede con la latencia de la disponibilidad con zebroids en escenarios con inexactitudes en las predicciones de la ruta del coche? Encontramos que los zebroids continúan proporcionando mejoras en la latencia de la disponibilidad incluso con menor precisión en las predicciones de la ruta del coche. Utilizamos un único parámetro p para cuantificar la exactitud de las predicciones de la ruta del coche. 6.4.1 Análisis Dado que p representa la probabilidad de que una ruta del automóvil predicha por el expedidor coincida con la actual, por lo tanto, la latencia con los zebroideos puede ser aproximada por, 6.4.2 Simulación En la figura 6 se muestra la variación en el Agg en función de esta métrica de precisión de la predicción de ruta. Observamos una reducción suave en la mejora de 81 en Agg a medida que la métrica de precisión de predicción reduce. Para los zebroids que están programados pero no se reúnen con el cliente debido al error de predicción, etiquetamos tales reemplazos hechos por los zebroids como fallados. Se ve que los reemplazos fallidos aumentan gradualmente a medida que la precisión de la predicción se reduce. 6.5 ¿En qué condiciones se maximizan las mejoras en la latencia de disponibilidad con zebroids? Sorprendentemente, encontramos que las mejoras en la latencia obtenidas con cebroides uno-instantáneos son independientes de la distribución de entrada de la popularidad de los ítems de datos. 6.5.1 Análisis La diferencia fraccionaria (marcada en la letra ) en la latencia entre los cebroides no-zebroideos y los cebroides uno-instantáneos se obtiene a partir de las ecuaciones 2, 3 y 4 de la siguiente forma: T i=1 fi·C ri − T i=1 fi·C ri+(N−ri)·(1−(1− 1 G )ri Let α = 1, haciendo el almacenamiento total en el sistema ST = N. Suponiendo que la distribución de réplica inicial es según el esquema de replicación de raíz cuadrada, tenemos, ri = fi·N T j = 1 fj. Por lo tanto, obtenemos fi = K2 ·r2 i N2, donde K = T j=1 fj. Utilizando esto, junto con la aproximación (1 − x)n 1 − n · x para x pequeña, simplificamos la ecuación anterior para obtener, • = 1 − T i=1 ri 1+ N−ri G T i=1 ri Para determinar cuándo se maximizan las ganancias con cebroides uno-instantáneos, podemos enmarcar un problema de optimización de la siguiente manera: Maximizar •, sujeto a T i Con un esquema de replicación de raíz cuadrada, las mejoras obtenidas con cebroides uniinstantáneos son independientes de la distribución de popularidad de entrada de los ítems de datos. (Ver [9] para la prueba) 6.5.2 Simulación Realizamos simulaciones con dos diferentes distribución de frecuencias de ítems de datos: Uniforme y Zipfian (con media= 0.27). En ambos casos se obtienen mejoras similares de latencia con cebroides uniinstantáneos. Este resultado tiene importantes implicaciones. En casos con popularidad sesgada hacia ciertos ítems de datos, las mejoras agregadas en la latencia en todas las solicitudes de ítems de datos siguen siendo las mismas. Incluso en escenarios en los que la frecuencia de acceso a los datos cambia dinámicamente, los zebroids seguirán proporcionando mejoras similares en la latencia. 7. CONCLUSIONES Y FUTURAS DIRECCIONES DE INVESTIGACIÓN En este estudio, examinamos las mejoras en la latencia que se pueden obtener en presencia de transportistas que entregan un elemento de datos desde un servidor a un cliente. Se cuantificó la variación de la latencia de disponibilidad en función de un rico conjunto de parámetros como la densidad del coche, el almacenamiento por coche, el tamaño de la base de datos de título y las políticas de reemplazo empleadas por los zebroids. A continuación se resumen algunas direcciones clave de investigación en el futuro que pretendemos seguir. Para reflejar mejor la realidad nos gustaría validar las observaciones obtenidas de este estudio con algunos rastros de simulación del mundo real de movimientos vehiculares (por ejemplo usando CORSIM [1]). Esto también servirá como validación para la utilidad del modelo de movilidad Markov utilizado en este estudio. Actualmente estamos analizando el desempeño de los zebroids en un conjunto de datos del mundo real que comprende una red ad-hoc de autobuses que se mueven alrededor de un pequeño barrio en Amherst [4]. Los cebroides también se pueden utilizar para la entrega de datos que transportan información sensible al retraso con una determinada caducidad. Las extensiones a zebroids que satisfacen estos requisitos de aplicación presentan una dirección de investigación futura interesante. 8. AGRADECIMIENTOS Esta investigación fue apoyada en parte por una beca Annenberg y subvenciones NSF numeradas CNS-0435505 (NeTS NOSS), CNS-0347621 (CAREER), y IIS-0307908. 9. REFERENCIAS [1] Administración Federal de Carreteras. Simulación del corredor. Versión 5.1, http://www.ops.fhwa.dot.gov/trafficanalysistools/cors im.htm. [2] D. Aldous y J. Llena. Cadenas de markov reversibles y caminatas aleatorias en gráficos. En preparación. [3] A. Bar-Noy, I. Kessler y M. Sidi. Usuarios móviles: Para actualizar o no actualizar. En IEEE Infocom, 1994. [4] J. Burgess, B. Gallagher, D. Jensen, y B. Levine. MaxProp: Enrutamiento para redes tolerantes a perturbaciones basadas en vehículos. En IEEE Infocom, abril de 2006. [5] E. Cohen y S. Shenker. Estrategias de replicación en redes de pares no estructuradas. En SIGCOMM, 2002. [6] A. Dan, D. Dias, R. Mukherjee, D. Sitaram y R. Tewari. Buffering y Caching en servidores de vídeo a gran escala. En COMPCON, 1995. [7] S. Ghandeharizadeh, S. Kapadia, y B. Krishnamachari. PAVAN: Marco normativo para la disponibilidad de contenidos en las redes ad hoc de vehículos. En VANET, Nueva York, Nueva York, Estados Unidos, 2004. ACM Press. [8] S. Ghandeharizadeh, S. Kapadia, y B. Krishnamachari. Comparación de estrategias de replicación para la disponibilidad de contenido en redes C2P2. En MDM, mayo de 2005. [9] S. Ghandeharizadeh, S. Kapadia, y B. Krishnamachari. Una evaluación de la latencia de disponibilidad en redes de vehículos ad-hoc basadas en el portador. Informe técnico, Departamento de Ciencias de la Computación, Universidad del Sur de California, CENG-2006-1, 2006. [10] S. Ghandeharizadeh y B. Krishnamachari. C2p2: Una red inter pares para servicios de información de automóviles a petición. En Globe. IEEE, 2004. [11] T. Hara. Asignación eficaz de réplicas en redes ad-hoc para mejorar la accesibilidad de datos. En IEEE Infocom, 2001. [12] H. Hayashi, T. Hara, y S. Nishio. Un método de asignación de réplica Adaptarse a los cambios de topología en redes ad-hoc. En DEXA, 2005. [13] P. Juang, H. Oki, Y. Wang, M. Martonosi, L. Peh, y D. Rubenstein. Computación energéticamente eficiente para el seguimiento de vida silvestre: compensaciones de diseño y experiencias tempranas con ZebraNet. Silgarch Comput. Archit. Noticias, 2002. [14] A. Pentland, R. Fletcher y A. Hasson. DakNet: Repensar la conectividad en las naciones en desarrollo. Computadora, 37(1):78-83, 2004. [15] F. Sailhan y V. Issarny. Caché cooperativo en redes ad-hoc. En MDM, 2003. [16] R. Shah, S. Roy, S. Jain y W. Brunette. Mulas de datos: Modelado y análisis de una arquitectura de tres niveles para redes de sensores escasas. Elsevier ad-hoc Networks Journal, 1o de septiembre de 2003. [17] T. Schiropoulos, K. Psounis y C. Raghavendra. Enrutamiento de una sola copia en redes móviles conectadas intermitentemente. En SECON, abril de 2004. [18] A. Tanenbaum. Sistemas operativos modernos, 2a edición, capítulo 4, sección 4.4. Prentice Hall, 2001. [19] A. Vahdat y D. Becker. Ruta epidémica para redes ad-hoc parcialmente conectadas. Informe técnico, Departamento de Informática, Universidad de Duke, 2000. [20] W. Zhao, M. Ammar, y E. Zegura. Un enfoque de ferriing de mensajes para la entrega de datos en redes móviles ad-hoc escasas. En MobiHoc, págs. 187 a 198, Nueva York, NY, Estados Unidos, 2004. ACM Press. [21] M. Zonoozi y P. Dassanayake. Modelado de Movilidad de Usuario y Caracterización del Patrón de Movilidad. Revista IEEE sobre áreas seleccionadas en las comunicaciones, 15:1239-1252, septiembre de 1997. 82 ",
            "error": []
        },
        "datum carrier": {
            "translated_key": [],
            "translated_annotated_text": "Una evaluación de la latencia de disponibilidad en redes ad hoc vehiculares basadas en portador Shahram Ghandeharizadeh Dept of Computer Science Univ of Southern California Los Angeles, CA 90089, USA shahram@usc.edu Shyam Kapadia Dept of Computer Science Univ of Southern California Los Angeles, CA 90089, USA kapadia@usc.edu Bhaskar Krishna Nuestro entorno de destino utiliza portadores de datos, llamados zebroids, donde un dispositivo móvil lleva un elemento de datos en nombre de un servidor a un cliente, minimizando así su latencia de disponibilidad. En este estudio, cuantificamos la variación de la latencia de disponibilidad con zebroids en función de un rico conjunto de parámetros como densidad de coche, almacenamiento por dispositivo, tamaño del repositorio y políticas de reemplazo empleadas por zebroids. Utilizando análisis y simulaciones extensas, obtenemos ideas novedosas sobre el diseño de sistemas basados en operadores. Se pueden obtener mejoras significativas en la latencia con zebroids a costa de un mínimo gasto general. Estas mejoras se producen incluso en escenarios con menor precisión en las predicciones de las rutas del coche. Dos hallazgos particularmente sorprendentes son: (1) una política de sustitución aleatoria ingenua empleada por los zebroids muestra un rendimiento competitivo, y (2) mejoras de la latencia obtenidas con una instanciación simplificada de zebroids se encuentran robustos a los cambios en la distribución de popularidad de los ítems de datos. Categorías y Subject Descriptores: C.2.4 [Sistemas distribuidos]: Términos Generales del Cliente/Servidor: Algoritmos, Rendimiento, Diseño, Experimentación. 1. INTRODUCCIÓN Los avances tecnológicos en las esferas del almacenamiento y las comunicaciones inalámbricas han hecho posible ahora prever la entrega a petición de datos, por ejemplo, para clips de vídeo y audio, en redes de peer-topeer vehiculares. En trabajos previos, Ghandeharizadeh et al. [10] introduce el concepto de vehículos equipados con un dispositivo Car-to-Car-Peer-toPeer, denominado AutoMata, para el entretenimiento dentro del vehículo. Las características notables de un AutoMata incluyen un dispositivo de almacenamiento masivo que ofrece cientos de gigabytes (GB) de almacenamiento, un procesador rápido y varios tipos de tarjetas de red. Incluso con las unidades de disco actuales de 500 GB, un repositorio de contenido de entretenimiento diverso puede exceder la capacidad de almacenamiento de un solo AutoMata. Tales repositorios constituyen el foco de este estudio. Para intercambiar datos, suponemos que cada AutoMata está configurado con dos tipos de tarjetas de red: 1) una tarjeta de red de baja anchura de banda con un radio-rango largo en el orden de millas que permite a un dispositivo AutoMata comunicarse con una estación celular cercana o WiMax, 2) una tarjeta de red de alta anchura de banda con un radio-rango limitado en el orden de cientos de pies. La conexión de ancho de banda alto admite tasas de datos en el orden de decenas a cientos de megabits por segundo y representa la red ad-hoc peer a peer entre los vehículos. Esto se etiqueta como el plano de datos y se emplea para intercambiar elementos de datos entre dispositivos. La conexión de baja anchura de banda sirve como plano de control, permitiendo a los dispositivos AutoMata intercambiar meta-datos con uno o más servidores centralizados. Esta conexión ofrece anchos de banda en el orden de decenas a cientos de Kilobits por segundo. Los servidores centralizados, denominados despachadores, calculan los calendarios de entrega de datos a lo largo del plano de datos utilizando los metadatos proporcionados. Estos horarios se transmiten a los vehículos participantes que utilizan el avión de control. La viabilidad técnica de tal arquitectura de dos niveles se presenta en [7], con resultados preliminares para demostrar que el ancho de banda del plano de control es suficiente para el intercambio de la información de control necesaria para realizar tal aplicación. En un escenario típico, un dispositivo AutoMata presenta a un pasajero con una lista de elementos de datos1, mostrando tanto el nombre de cada elemento de datos como su latencia de disponibilidad. Este último, denotado como ♥, se define como el momento más temprano en que el cliente encuentra una copia de su elemento de datos solicitado. Un elemento de datos está disponible inmediatamente cuando reside en el almacenamiento local del dispositivo AutoMata que atiende a la solicitud. Debido a las restricciones de almacenamiento, un AutoMata puede no almacenar todo el repositorio. En este caso, la latencia de disponibilidad es el tiempo desde que el usuario emite una solicitud hasta que el AutoMata encuentra otro coche que contiene el elemento de datos referenciado. (Los términos coche y AutoMata se utilizan indistintamente en este estudio.) La latencia de disponibilidad para un artículo es una función de la ubicación actual del cliente, su ruta de destino y viaje, el modelo de movilidad de los vehículos equipados con AutoMata, el número de réplicas construidas para los diferentes elementos de datos, y la colocación de réplicas de elementos de datos a través de los vehículos. Un método para mejorar la latencia de disponibilidad es emplear portadores de datos que transportan una réplica del elemento de datos solicitado desde un coche servidor que lo contiene a un cliente que lo solicitó. Estos portadores de datos se denominan zebroids. La selección de cebroides es facilitada por la arquitectura de dos niveles. El plano de control permite la recopilación centralizada de información en un despachador presente en una estación base.2 Algunos ejemplos de control en1 Sin pérdida de generalidad, el término elemento de datos puede ser medios tradicionales como texto o medios continuos como un clip de audio o vídeo. 2 Puede haber despachadores desplegados en un subconjunto de las estaciones de base para la tolerancia a fallos y la robustez. Los distribuidores entre estaciones de base pueden comunicarse a través de la infraestructura cableada. 75 formación son actualmente solicitudes activas, ruta de viaje de los clientes y sus destinos, y caminos de los otros coches. Para cada solicitud del cliente, el despachador puede elegir un conjunto de portadores z que colaboran para transferir un elemento de datos de un servidor a un cliente (z-relay zebroids). Aquí, z es el número de zebroids tales que 0 ≤ z < N, donde N es el número total de coches. Cuando z = 0 no hay portadores, lo que requiere un servidor para entregar el elemento de datos directamente al cliente. De lo contrario, el equipo de relé elegido de z zebroids se entregará los datos de forma transitoria unos a otros para llegar al cliente, reduciendo así la latencia de la disponibilidad (para más detalles, véase la sección 3.1). Para aumentar la robustez, el despachador puede emplear múltiples equipos de relé de portadoras z para cada solicitud. Esto puede ser útil en escenarios en los que el despachador tiene menor precisión de predicción en la información sobre las rutas de los coches. Por último, las restricciones de almacenamiento pueden requerir que un zebroid desaloje elementos de datos existentes de su almacenamiento local para acomodar el elemento solicitado por el cliente. En este estudio, se cuantifican los siguientes factores principales que afectan a la latencia de la disponibilidad en presencia de zebroideos: (i) tamaño del repositorio de datos, (ii) densidad del coche, (iii) capacidad de almacenamiento por coche, (iv) duración del viaje del cliente, (v) esquema de reemplazo empleado por los zebroideos, y (vi) exactitud de las predicciones de la ruta del coche. Para un subconjunto significativo de estos factores, abordamos algunas preguntas clave relativas al uso de zebroids tanto a través del análisis como de simulaciones extensas. Nuestras principales conclusiones son las siguientes. Una política de sustitución aleatoria ingenua empleada por los zebroids muestra un rendimiento competitivo en términos de latencia de disponibilidad. Con esta política, se pueden obtener mejoras sustanciales en la latencia con zebroids con un mínimo de gastos generales de reemplazo. En escenarios más prácticos, donde el despachador tiene información inexacta sobre las rutas del coche, los zebroids continúan proporcionando mejoras de la latencia. Un resultado sorprendente es que los cambios en la popularidad de los ítems de datos no impactan las ganancias de latencia obtenidas con una simple instanciación de z-relay zebroids llamados cebroids uno-instantáneos (ver Sección 3.1). Este estudio sugiere una serie de direcciones interesantes a seguir para obtener una mejor comprensión del diseño de sistemas basados en el portador que mejoran la latencia de disponibilidad. Trabajo relacionado: La replicación en redes móviles ad-hoc ha sido un tema ampliamente estudiado [11, 12, 15]. Sin embargo, ninguno de estos estudios emplea zebroids como portadores de datos para reducir la latencia de las solicitudes de los clientes. Varios estudios novedosos e importantes como ZebraNet [13], DakNet [14], Data Mules [16], Message Ferries [20] y Seek and Focus [17] han analizado factores que afectan a redes conectadas intermitentemente consistentes en portadores de datos similares en espíritu a los zebroideos. Los factores considerados por cada estudio son dictados por su supuesto entorno y aplicación diana. Una característica novedosa de nuestro estudio es el impacto en la latencia de disponibilidad para un repositorio de datos dado de elementos. En [9] se puede obtener una descripción detallada de las obras relacionadas. El resto de este documento está organizado de la siguiente manera. En la sección 2 se ofrece una visión general de la terminología junto con los factores que influyen en la latencia de la disponibilidad en presencia de zebroides. En la sección 3 se describe cómo se pueden emplear los cebroides. En la sección 4 se proporciona información detallada sobre la metodología de análisis empleada para captar el desempeño con los zebroids. En la sección 5 se describen los detalles del entorno de simulación utilizado para la evaluación. La sección 6 recoge las preguntas clave examinadas en este estudio y las responde a través de análisis y simulaciones. Por último, en la sección 7 se presentan breves conclusiones y futuras orientaciones de la investigación. 2. SINOPSIS Y TERMINOLOGÍA La Tabla 1 resume la notación de los parámetros utilizados en el artículo. A continuación introducimos algunas terminologías utilizadas en el artículo. Asumir una red de coches N AutoMata equipados, cada uno con capacidad de almacenamiento de α bytes. La capacidad total de almacenamiento del sistema es ST = N. Hay elementos de datos T en la base de datos, cada uno con parámetros de base de datos T Número de elementos de datos. Si Tamaño del ítem de datos i fi Frecuencia de acceso al ítem de datos i. Parámetros de replicación Ri Frecuencia normalizada de acceso al ítem de datos i ri Número de réplicas para ítem de datos i n Caracteriza un esquema de replicación particular. Latencia media de la disponibilidad del elemento de datos i Łagg Latencia agregada de la disponibilidad, N Número de dispositivos AutoMata en el sistema. α Capacidad de almacenamiento por AutoMata. γ Duración del viaje del cliente AutoMata. ST Capacidad total de almacenamiento del sistema AutoMata, ST = N · α. Cuadro 1: Términos y sus definiciones tamaño Si. La frecuencia de acceso al ítem de datos i se denota como fi, con T j=1 fj = 1. Deje que la duración del viaje del cliente AutoMata en consideración sea γ. Ahora definimos la frecuencia normalizada de acceso al ítem de datos i, denotado por Ri, como: Ri = (fi)n T j=1(fj)n ; 0 ≤ n ≤ فارسى (1) El exponente n caracteriza una técnica de replicación particular. Un esquema de replicación de raíz cuadrada se realiza cuando n = 0.5 [5]. Esto sirve como la línea base para la comparación con el caso cuando se despliegan zebroids. Ri se normaliza a un valor entre 0 y 1. El número de réplicas para el dato i, denotado como ri, es: ri = min (N, max (1, Ri·N Si )). Esto capta el caso cuando al menos una copia de cada elemento de datos debe estar presente en la red ad-hoc en todo momento. En los casos en que un elemento de datos se puede perder de la red ad-hoc, esta ecuación se convierte en ri = min (N, max (0, Ri·N Si )). En este caso, es posible que sea necesario satisfacer una solicitud para el elemento de datos perdido mediante la obtención del elemento desde un servidor remoto. La latencia de disponibilidad para un elemento de datos i, denotado como i, se define como la primera vez en la que un cliente AutoMata encontrará la primera réplica del elemento accesible a él. Si esta condición no se cumple, entonces se establece a i. Esto indica que el elemento de datos I no estaba disponible para el cliente durante su viaje. Tenga en cuenta que como hay al menos una réplica en el sistema para cada elemento de datos i, al establecer γ a un gran valor nos aseguramos de que los clientes soliciten cualquier elemento de datos i será satisfecho. Sin embargo, en la mayoría de las circunstancias prácticas γ puede no ser tan grande como para encontrar cada elemento de datos. Estamos interesados en la latencia de disponibilidad observada en todos los datos. Por lo tanto, aumentamos la latencia media de disponibilidad para cada ítem de datos i con su fi para obtener la siguiente latencia ponderada de disponibilidad (?agg) métrica:?agg = T i=1?i · fi A continuación, presentamos nuestro enfoque de solución describiendo cómo se seleccionan los zebroids. 3. ENFOQUE DE SOLUCIÓN 3.1 Zebroids Cuando un cliente hace referencia a un elemento de datos que falta en su almacenamiento local, el despachador identifica todos los coches con una copia del elemento de datos como servidores. A continuación, el despachador obtiene las rutas futuras de todos los coches para una duración de tiempo finito equivalente al tiempo máximo que el cliente está dispuesto a esperar a que su solicitud sea atendido. Utilizando esta información, el despachador programa la ruta de entrega más rápida desde cualquiera de los servidores al cliente utilizando cualquier otro coche como transportistas intermedios. Por lo tanto, determina el conjunto óptimo de decisiones de reenvío 76 que permitirá que el elemento de datos se entreguen al cliente en el mínimo de tiempo. Tenga en cuenta que la latencia a lo largo de la ruta de entrega más rápida que emplea un equipo de relé de z zebroids es similar a la obtenida con el encaminamiento epidémico [19] bajo los supuestos de almacenamiento infinito y ninguna interferencia. Una simple instanciación de z-relay zebroids se produce cuando z = 1 y la solicitud de los clientes desencadena una transferencia de una copia del elemento de datos solicitado de un servidor a un zebroid en su vecindad. Tal zebroideo se denomina cebroide uniinstantáneo. En algunos casos, el expedidor podría tener información inexacta sobre las rutas de los coches. Por lo tanto, un zebroid programado sobre la base de esta información inexacta puede no reunirse con su cliente objetivo. Para minimizar la probabilidad de tales escenarios, el despachador puede programar múltiples zebroids. Esto puede acarrear gastos generales adicionales debido a la utilización redundante de recursos para obtener las mismas mejoras de latencia. El tiempo necesario para transferir un elemento de datos de un servidor a un zebroid depende de su tamaño y del ancho de banda del enlace disponible. Con elementos de datos pequeños, es razonable suponer que este tiempo de transferencia es pequeño, especialmente en presencia del plano de datos de alto ancho de banda. Los elementos de datos grandes se pueden dividir en trozos más pequeños que permiten al despachador programar uno o más zebroids para entregar cada trozo a un cliente de una manera oportuna. Esta sigue siendo una dirección de investigación futura. Inicialmente, el número de réplicas para cada ítem de datos puede ser calculado usando la Ecuación 1. Este esquema calcula el número de réplicas de datos en función de su popularidad. Es estática porque el número de réplicas en el sistema no cambia y no se realizan reemplazos. Por lo tanto, esto se conoce como el ambiente de los nozebroids. Cuantificamos el desempeño de las diversas políticas de reemplazo con referencia a esta línea base que no emplea zebroids. Uno puede asumir una fase de arranque en frío, donde inicialmente sólo una o pocas copias de cada elemento de datos existen en el sistema. Muchas ranuras de almacenamiento de los coches pueden estar desocupados. Cuando los coches se encuentran entre sí, construyen nuevas réplicas de algunos elementos de datos seleccionados para ocupar los huecos vacíos. El procedimiento de selección puede consistir en elegir los datos de manera uniforme al azar. Nuevas réplicas se crean siempre y cuando un coche tiene un cierto umbral de su almacenamiento desocupado. Eventualmente, la mayoría de la capacidad de almacenamiento de un coche se agotará. 3.2 Políticas de reemplazo basadas en el operador Las políticas de reemplazo consideradas en este documento son reactivas ya que una sustitución se produce sólo en respuesta a una solicitud emitida para un determinado elemento de datos. Cuando el almacenamiento local de un zebroid está completamente ocupado, necesita reemplazar uno de sus elementos existentes para llevar el elemento de datos solicitado por el cliente. Para ello, el zebroid debe seleccionar a un candidato apropiado para el desalojo. Este proceso de decisión es análogo al encontrado en la paginación del sistema operativo donde el objetivo es maximizar la relación de acceso a la caché para evitar el retraso del acceso al disco [18]. Las políticas de reemplazo basadas en transportistas empleadas en nuestro estudio son las menos usadas recientemente (LRU), las menos usadas con frecuencia (LFU) y las aleatorias (donde un candidato de desalojo es elegido uniformemente al azar). Hemos considerado variantes locales y globales de las políticas LRU/LFU que determinan si el conocimiento local o global de los contenidos de los coches conocidos en el expedidor se utiliza para la decisión de desalojo en un zebroid (ver [9] para más detalles). Las pólizas de sustitución entrañan los siguientes gastos generales. En primer lugar, la complejidad asociada a la aplicación de una política. En segundo lugar, el ancho de banda utilizado para transferir una copia de un elemento de datos de un servidor al zebroid. En tercer lugar, el número medio de reemplazos realizados por los zebroides. Tenga en cuenta que en el caso de no cebroides no se incurre en gastos generales. Las métricas consideradas en este estudio son la latencia de la disponibilidad agregada, Tenga en cuenta que los despachadores con la ayuda del plano de control pueden asegurarse de que no se pierda ningún elemento de datos del sistema. En otras palabras, al menos una réplica de cada elemento de datos se mantiene en la red ad-hoc en todo momento. En tales casos, aunque un coche puede encontrarse con un cliente solicitante antes que otros servidores, si su almacenamiento local contiene elementos de datos con sólo una copia en el sistema, entonces tal coche no se elige como un zebroid. 4. METODOLOGÍA DE ANÁLISIS Aquí presentamos la metodología de evaluación analítica y algunas aproximaciones como ecuaciones de forma cerrada que capturan las mejoras en la latencia de disponibilidad que se pueden obtener tanto con cebros oneinstantáneos como con z-relay. Primero, presentamos algunos preliminares de nuestra metodología de análisis. • Que N sea el número de coches en la red que realizan una caminata aleatoria en 2D en un toro de G× G. Un coche adicional sirve como un cliente que entrega un total de N + 1 coches. Este modelo de movilidad se ha utilizado ampliamente en la literatura [17, 16] principalmente porque es susceptible de análisis y proporciona una base de referencia para comparar el rendimiento de otros modelos de movilidad. Además, esta clase de modelos de movilidad markoviana se ha utilizado para modelar los movimientos de los vehículos [3, 21]. • Asumimos que todos los coches comienzan desde la distribución estacionaria y realizan caminatas aleatorias independientes. Aunque para escenarios de densidad escasa, la suposición de independencia se mantiene, ya no es válido cuando N se aproxima a G. • Deje que el tamaño del repositorio de ítems de datos de interés sea T. Además, el ítem de datos i tiene réplicas ri. Esto implica que los coches ri, identificados como servidores, tienen una copia de este elemento de datos cuando el cliente solicita el elemento i. Todos los resultados de análisis presentados en esta sección se obtienen asumiendo que el cliente está dispuesto a esperar el tiempo necesario para que su solicitud sea satisfecha (duración del viaje sin límite γ = ­). Con el modelo de movilidad al azar en un torso 2D, hay una garantía de que mientras haya al menos una réplica del elemento de datos solicitado en la red, el cliente se encontrará con esta réplica [2]. Las extensiones al análisis que también consideran las duraciones del viaje finito se pueden obtener en [9]. Considere un escenario en el que no se emplean zebroids. En este caso, la latencia de disponibilidad esperada para el ítem de datos es el tiempo de reunión esperado de la caminata aleatoria realizada por el cliente con cualquiera de las caminatas aleatorias realizadas por los servidores. Aldous et al. [2] muestran que el tiempo de reunión de dos caminatas aleatorias en tal entorno puede modelarse como una distribución exponencial con la media C = c · G · log G, donde la constante c 0,17 para G ≥ 25. El tiempo de reunión, o equivalente a la latencia de la disponibilidad de i, para el cliente que solicita datos i es el momento hasta que se encuentre con cualquiera de estas réplicas ri por primera vez. Se trata también de una distribución exponencial con el siguiente valor esperado (obsérvese que esta formulación es válida sólo para casos escasos cuando G >> ri): فارسىi = cGlogG ri La latencia de disponibilidad agregada sin emplear zebroids es entonces esta expresión promediada sobre todos los ítems de datos, ponderada por su frecuencia de acceso: فارسىagg(no − zeb) = T i=1 fi Por otra parte, esta réplica se genera en el paso de tiempo cuando el cliente emite la solicitud. Que Nc i sea el número total esperado de nodos que están en la misma celda que cualquiera de los servidores ri. Luego, tenemos Nc i = (N − ri) · (1 − (1 − 1 G )ri ) (3) En el modelo analítico, suponemos que Nc i nuevas réplicas se crean, de modo que el número total de réplicas se aumenta a ri + Nc i. La latencia de disponibilidad se reduce ya que es más probable que el cliente cumpla con una réplica anterior. La latencia agregada de disponibilidad esperada en el caso de los cebroides uno-instantáneos es dada por, agg(zeb) = T i=1 fi · c · G · log G ri + Nc i = T i=1 fi · C ri + Nc i (4) Tenga en cuenta que al obtener esta expresión, para facilitar el análisis, hemos asumido que las nuevas réplicas comienzan Así trata a todos los portadores de Nc i de forma independiente, al igual que los servidores originales ri. Como mostraremos a continuación en comparación con las simulaciones, esta aproximación proporciona un límite superior a las mejoras que se pueden obtener porque da lugar a una menor latencia esperada en el cliente. Cabe señalar que el procedimiento mencionado anteriormente producirá una latencia similar a la empleada por un expedidor que emplee cebroides oneinstantáneos (véase la sección 3.1). Dado que el despachador es consciente de todos los movimientos futuros del coche que sólo transferiría el elemento de datos solicitado en un único zebroid, si determina que el zebroid se reunirá con el cliente antes que cualquier otro servidor. Este zebroid seleccionado está incluido en las nuevas réplicas de Nc i. 4.2 z-relay zebroids Para calcular la latencia de disponibilidad esperada con z-relay zebroids, utilizamos un análogo de problema de coloración similar a un enfoque utilizado por Spyropoulos et al. [17]. En [9] se dan detalles del procedimiento para obtener una expresión de forma cerrada. La latencia de disponibilidad agregada (agg) con z-relay zebroids es dada por, agg(zeb) = T i=1 [fi · C N + 1 · 1 N + 1 − ri · (N · log N ri − log (N + 1 − ri))] (5) 5. METODOLOGÍA DE SIMULACIÓN El entorno de simulación considerado en este estudio se compone de vehículos como automóviles que llevan una fracción del repositorio de datos. Un parámetro de precisión de predicción proporciona inherentemente una cierta garantía probabilística sobre la confianza de las predicciones de ruta del automóvil conocidas en el despachador. Un valor del 100% implica que las rutas exactas de todos los coches se conocen en todo momento. Un valor del 70% para este parámetro indica que las rutas previstas para los coches coincidirán con las reales con probabilidad 0.7. Tenga en cuenta que esta probabilidad se extiende a través de las rutas del coche durante toda la duración del viaje. Ahora proporcionamos los preliminares del estudio de simulación y luego describimos los parámetros de configuración utilizados en nuestros experimentos. • Similar a la metodología de análisis, el mapa utilizado es un toro 2D. Un modelo de movilidad Markov que representa una caminata aleatoria 2D imparcial en la superficie del toro describe el movimiento de los coches a través de este toro. • Cada cuadrícula/célula es un estado único de esta cadena Markov. En cada ranura de tiempo, cada coche hace una transición de una celda a cualquiera de sus 8 celdas vecinas. La transición es una función de la ubicación actual del coche y una matriz de transición de probabilidad Q = [qij] donde qij es la probabilidad de transición del estado i al estado j. Solo los coches equipados con AutoMata dentro de la misma celda pueden comunicarse entre sí. • Los parámetros γ,  han sido discretizados y expresados en términos del número de franjas horarias. • Un dispositivo AutoMata no mantiene más de una réplica de un elemento de datos. Esto se debe a que las réplicas adicionales ocupan el almacenamiento sin proporcionar beneficios. • Los cebroides de relé z o uno instantáneos pueden ser empleados por solicitud del cliente para mejorar la latencia. • A menos que se mencione lo contrario, se supone que el parámetro de precisión de la predicción es del 100%. Esto se debe a que este estudio pretende cuantificar el efecto de un gran número de parámetros individualmente sobre la latencia de la disponibilidad. Aquí, establecemos el tamaño de cada elemento de datos, Si, para ser 1. α representa el número de ranuras de almacenamiento por AutoMata. Cada ranura de almacenamiento almacena un elemento de datos. γ representa la duración del viaje de los clientes en términos del número de franjas horarias. Por lo tanto, los posibles valores de latencia de disponibilidad están entre 0 y γ.  se define como el número de franjas horarias después de lo cual un dispositivo cliente AutoMata encontrará una réplica del elemento de datos por primera vez. Si una réplica para el elemento de datos solicitado fue encontrado por el cliente en la primera celda, a continuación, se establece  = 0. Si se trata de un elemento de datos solicitado, el cliente no encontró ninguna copia del elemento de datos solicitado durante todo su viaje. En todas nuestras simulaciones, para la ilustración consideramos un 5 × 5 2D-torus con γ fijado a 10. Nuestros experimentos indican que las tendencias en la escala de resultados a mapas de mayor tamaño. Simulamos una distribución sesgada de acceso a los datos T que obedece a la ley Ziffs con una media de 0.27. Esta distribución corresponde a la venta de entradas de cine en los Estados Unidos [6]. Empleamos un esquema de replicación que asigna réplicas para un elemento de datos en función de la raíz cuadrada de la frecuencia de acceso de ese elemento. Se muestra que el esquema de replicación de raíz cuadrada tiene un rendimiento de latencia competitivo en un gran espacio de parámetros [8]. Las réplicas de elementos de datos se distribuyen uniformemente entre los dispositivos AutoMata. Esto sirve como el caso de la línea base sin cebros. El esquema de raíz cuadrada también proporciona la distribución de réplica inicial cuando se emplean zebroids. Tenga en cuenta que los reemplazos realizados por los zebroids causarán cambios en la distribución de réplica de ítems de datos. Las solicitudes generadas según la distribución Zipf se emiten una a la vez. El coche cliente que emite la solicitud se elige de una manera redonda-robina. Después de un período máximo de γ, se registra la latencia con que se encontró esta solicitud. En todos los resultados de simulación, cada punto es un promedio de 200.000 solicitudes. Además, los intervalos de confianza del 95% determinados para los resultados son bastante ajustados para las métricas de latencia y los gastos generales de reemplazo. Por lo tanto, sólo los presentamos para la métrica que captura la mejora porcentual de la latencia con respecto al caso de no-zebroides. 6. RESULTADOS En esta sección, describimos nuestros resultados de evaluación donde se abordan las siguientes preguntas clave. Con una amplia selección de esquemas de reemplazo disponibles para un zebroid, ¿cuál es su efecto en la latencia de disponibilidad? Una pregunta más central es: Do zebroids provide 78 0 20 40 60 80 100 1.5 2 2.5 3 3.5 Número de coches Latencia de disponibilidad agregada (­agg ) lru_global lfu_global lru_local lfu_local random Figura 1: La figura 1 muestra la latencia de disponibilidad al emplear cebroids uno-instantáneos en función de los valores (N,α), cuando el ¿Cuáles son los gastos generales asociados en el empleo de estos zebroides? ¿Qué sucede con estas mejoras en escenarios donde un despachador puede tener información imperfecta sobre las rutas del automóvil? ¿Cuáles son las compensaciones inherentes entre la densidad del automóvil y el almacenamiento por automóvil en lo que respecta a su efecto combinado e individual sobre la latencia de la disponibilidad en presencia de zebroids? Presentamos análisis simples y simulaciones detalladas para proporcionar respuestas a estas preguntas, así como para obtener información sobre el diseño de sistemas basados en operadores. 6.1 ¿Cómo funciona un esquema de sustitución empleado por un latencia de disponibilidad de impacto zebroideo? Para ilustrarlo, presentamos experimentos de escala en los que se emplean cebroides oneinstantáneos (ver Figura 1). Por escala, queremos decir que α y N se cambian proporcionalmente para mantener el almacenamiento total del sistema, ST, constante. Aquí, T = 50 y ST = 200. Elegimos los siguientes valores de (N,α) = {(20,10), (25,8), (50,4), (100,2)}. La cifra indica que un plan de sustitución al azar muestra un rendimiento competitivo. Esto se debe a varias razones. Recuerde que la distribución de réplica inicial se establece según el esquema de replicación de raíz cuadrada. El esquema de reemplazo aleatorio no altera esta distribución ya que hace que los reemplazos ciegos a la popularidad de un elemento de datos. Sin embargo, los reemplazos causan una reorganización dinámica de los datos a fin de atender mejor a la solicitud activa actual. Además, el patrón de movilidad de los coches es aleatorio, por lo que las ubicaciones desde las que los clientes emiten las solicitudes también son aleatorias y no se conocen a priori en el despachador. Estas conclusiones son importantes porque una política de sustitución aleatoria puede aplicarse de manera descentralizada. Los esquemas rru-global y lfu-global proporcionan un rendimiento de latencia que es peor que aleatorio. Esto se debe a que estas políticas desarrollan rápidamente una preferencia por los elementos de datos más populares, creando así un mayor número de réplicas para ellos. Durante el desalojo, los datos más populares casi nunca se seleccionan como candidatos de reemplazo. En consecuencia, hay menos réplicas para los artículos menos populares. Por lo tanto, la distribución inicial del elemento de datos replica cambios de raíz cuadrada a que se asemeja a replicación lineal. El mayor número de réplicas de las partidas de datos populares proporciona beneficios adicionales marginales, mientras que el menor número de réplicas de las demás partidas de datos perjudica el rendimiento de latencia de estas políticas mundiales. Los esquemas lfu-local y lru-local tienen un rendimiento similar al aleatorio ya que no tienen suficiente historial de solicitudes de datos locales. Especulamos que el desempeño de estas políticas locales se acercará al de sus variantes globales para una historia suficientemente grande de solicitudes de ítems de datos. Debido al rendimiento competitivo demostrado por una política aleatoria, para el resto del documento, presentamos el rendimiento de los zebroids que emplean una política de reemplazo aleatorio. 6.2 ¿Proporcionan los zebroids mejoras significativas en la latencia de disponibilidad? Encontramos que en muchos escenarios que emplean zebroids proporciona mejoras sustanciales en la latencia de la disponibilidad. 6.2.1 Análisis Primero consideramos el caso de los cebroides uno-instantáneos. La Figura 2.a muestra la variación en Łagg en función de N para T = 10 y α = 1 con 10 × 10 toros usando la Ecuación 4. Los ejes x e y se dibujan a una escala de registro. En la figura 2.b se muestra la mejoría en % en el Agg obtenido con cebroides uniinstantáneos. En este caso, sólo el eje x se dibuja a una escala de registro. Para ilustrar, suponemos que los datos T son solicitados uniformemente. Inicialmente, cuando la red es escasa la aproximación analítica para mejoras en la latencia con zebroids, obtenida de las ecuaciones 2 y 4, coincide estrechamente con los resultados de la simulación. Sin embargo, a medida que N aumenta, la suposición de escasez para la que el análisis es válido, a saber, N+G, ya no es cierta. Por lo tanto, las dos curvas divergen rápidamente. El punto en el que las dos curvas se alejan unas de otras corresponde a un valor de Además, como se mencionó anteriormente, el análisis proporciona un límite superior a las mejoras de la latencia, ya que trata de las réplicas recién creadas dadas por Nc i de forma independiente. Sin embargo, estas réplicas de Nc i comienzan desde la misma celda que una de las réplicas de servidor ri. Finalmente, el análisis captura un escenario oneshot donde dada una distribución inicial de réplica de datos, se calcula la latencia de disponibilidad. Las nuevas réplicas creadas no afectan las solicitudes futuras del cliente. Debido a las limitaciones de espacio, aquí, se resumen las observaciones en el caso de z-relay zebroids se emplean. El lector interesado puede obtener más detalles en [9]. Observaciones similares, como el caso cebroideo uniinstantaneo, se aplican ya que las curvas de simulación y análisis comienzan de nuevo a divergir cuando los supuestos de análisis ya no son válidos. Sin embargo, la observación clave aquí es que la mejora de la latencia con z-relay zebroids es significativamente mejor que el caso de cebroids uno-instantáneos, especialmente para escenarios de almacenamiento más bajos. Esto se debe a que en escenarios escasos, los traspasos transitivos entre los zebroides crean un mayor número de réplicas para el ítem de datos solicitado, lo que produce una menor latencia de disponibilidad. Por otra parte, también se observa que la curva de validación de simulación para las mejoras en Łagg con z-relay zebroids se aproxima a la del caso cebroideo uniinstantánea para un almacenamiento más alto (valores de N más altos). Esto se debe a que los cebroides uno-instantáneos son un caso especial de z-relay zebroides. 6.2.2 Simulación Realizamos simulaciones para examinar todo el espectro de almacenamiento obtenido cambiando la densidad del vehículo N o el almacenamiento por coche α para capturar también escenarios en los que no se mantienen las hipótesis de escasez para las que el análisis es válido. Separamos el efecto de N y α capturando la variación de N manteniendo constante α (caso 1) y viceversa (caso 2) tanto con z-relay y cebroides uno-instantáneos. Aquí, establecemos el tamaño del repositorio como T = 25. En el gráfico 3 figura el caso 1 mencionado anteriormente. Se observan tendencias similares con el caso 2, en [9] se dispone de una descripción completa de esos resultados. Con la Figura 3.b, manteniendo constante α, la densidad del coche aumenta inicialmente tiene mayores beneficios de latencia porque el aumento de N introduce más zebroids en el sistema. A medida que N se incrementa aún más, • reduce porque el almacenamiento total en el sistema sube. En consecuencia, el número de réplicas por elemento de datos sube aumentando así el número de servidores 79. Por lo tanto, la política de reemplazo no puede encontrar un zebroid tan a menudo para transportar el elemento de datos solicitado al cliente antes que cualquiera de los servidores. Por otro lado, el aumento del número de servidores beneficia al caso de no-zebroids al reducir a Agg. El efecto neto da lugar a una reducción de los valores más grandes de N. 10 1 10 2 10 3 10 −1 10 0 10 1 10 2 Número de automóviles no-zebroidsanal no-zebroids sim one-instantaneoussim Agregación Disponibilidad Latencia (­agg ) 2.a) Agg 10 1 10 2 10 3 0 10 20 40 50 60 70 80 90 100 Número de automóviles % Mejora Las tendencias mencionadas anteriormente son similares a las obtenidas del análisis. Sin embargo, algo contra-intuitivamente con almacenamiento relativamente más alto del sistema, z-relay zebroids proporcionan mejoras ligeramente más bajas en la latencia en comparación con uno-instantaneous zebroids. Especulamos que esto se debe a las diferentes distribuciones de réplicas de ítems de datos impuestas por ellos. Tenga en cuenta que los reemplazos realizados por los zebroids causan fluctuaciones en estas distribuciones de réplica que pueden afectar futuras solicitudes de clientes. Actualmente estamos explorando opciones adecuadas de parámetros que pueden capturar estas distribuciones de réplicas cambiantes. 6.3 ¿Cuáles son los gastos generales derivados de la mejora de la latencia de los zebroideos? Encontramos que las mejoras en la latencia con zebroids se obtienen con un mínimo de reemplazo de los gastos generales (< 1 por solicitud del cliente). 6.3.1 Análisis Con cebroides uniinstantáneos, para cada solicitud de cliente se emplea un máximo de un cebroide para mejorar la latencia. Por lo tanto, los gastos generales de sustitución por solicitud del cliente pueden ascender a un máximo de uno. Recordemos que para calcular la latencia con una latencia instantánea 0 50 100 150 200 250 350 400 0 1 2 3 4 5 6 Número de coches Latencia de disponibilidad agregada (?agg ) no-zebroids one-instantaneous z-relays 3.a 0 50 100 150 200 250 300 350 400 0 10 20 30 40 50 60 Número de coches % Mejora en?agg wrt no-zebro Ahora un reemplazo sólo se incumple si una de estas réplicas de Nc i de nueva creación se reúne con el cliente antes que cualquiera de los servidores de ri. Que Xri y XNc i respectivamente sean variables aleatorias que capturen el tiempo mínimo hasta que cualquiera de las réplicas de ri y Nc i cumpla con el cliente. Dado que Xri y XNc i se supone que son independientes, por la propiedad de variables aleatorias distribuidas exponencialmente tenemos, Overhead/request = 1 · P(XNc i < Xri ) + 0 · P(Xri ≤ XNc i ) (6) Overhead/request = ri C ri C + Nc i C = ri ri + Nc i (7) Sin embargo, si N  es constante entonces el aumento de las causas N α 80 0 20 40 60 80 100 0 0,05 0,15 0,20 0,25 0,35 0,40 0,45 0,5 Número de coches cebroides instantáneos número medio de reemplazos por solicitud (N=20,α=10) (N=25,α=8) (N=50,α=4) (N=100,α=2) Figura 4: La figura 4 captura el reemplazo de Esto implica que se incurre en un aumento de los gastos generales de sustitución para valores N y α más altos. Por otra parte, cuando ri = N, esto significa que cada coche tiene una réplica de elemento de datos i. Por lo tanto, no se emplean zebroids cuando se solicita este artículo, lo que da lugar a un gasto general/solicitud para este artículo como cero. A continuación, presentamos resultados de simulación que validan nuestra hipótesis de análisis para los gastos generales asociados con el despliegue de cebroides uno-instantáneos. 6.3.2 Simulación En la figura 4 se muestra la superficie de repuesto con cebroides uno-instantáneos cuando se varían (N,α) manteniendo constante el almacenamiento total del sistema. Las tendencias mostradas por la simulación concuerdan con las previstas por el análisis anterior. Sin embargo, el almacenamiento total del sistema puede ser cambiado ya sea por la densidad variable del coche (N) o el almacenamiento por coche (α). Debido a tendencias similares, aquí presentamos el caso cuando α se mantiene constante y N es variada (Figura 5). Referimos al lector a [9] para el caso cuando α es variado y N se mantiene constante. Presentamos un argumento intuitivo para el comportamiento de las curvas superiores de reemplazo de la solicitud. Cuando el almacenamiento es extremadamente escaso de modo que sólo existe una réplica por elemento de datos en la red AutoMata, el número de reemplazos realizados por los zebroids es cero ya que cualquier reemplazo causará que un elemento de datos se pierda del sistema. El despachador garantiza que no se pierda ningún elemento de datos del sistema. En el otro extremo del espectro, si el almacenamiento se vuelve tan abundante que α = T entonces todo el repositorio de elementos de datos se puede replicar en cada coche. El número de reemplazos es de nuevo cero ya que cada solicitud puede ser satisfecha localmente. Un escenario similar ocurre si N se aumenta a un valor tan grande que otro coche con el elemento de datos solicitado siempre está disponible en las proximidades del cliente. Sin embargo, hay un espectro de almacenamiento en el medio donde los reemplazos por los zebroides programados dan lugar a mejoras en el Agg (ver Figura 3). Por otra parte, observamos que para escenarios de almacenamiento escasos, las mejoras más altas con z-relay zebroids se obtienen al costo de un aumento de los gastos generales de reemplazo en comparación con el caso de cebroids uno-instantáneos. Esto se debe a que en el caso anterior, cada uno de estos z zebroids seleccionados a lo largo de la ruta de latencia más baja al cliente necesita realizar un reemplazo. Sin embargo, los gastos generales de sustitución son todavía inferiores a 1 lo que indica que en promedio se necesita menos de un reemplazo por solicitud del cliente, incluso cuando se emplean z-relay zebroids. 0 50 100 150 200 250 300 350 400 0 0,1 0,2 0,3 0,4 0,6 0,7 0,8 0,9 1 Número de coches z-reemplaza uno-instantánea Número medio de reemplazos por solicitud Figura 5: La figura 5 muestra los gastos generales de reemplazo con cebroide para los casos en que N es diferente manteniendo α = 2. 10 20 30 40 50 60 70 80 90 100 0 0,5 1 1,5 2 2,5 3 3,5 4 Porcentaje de predicción no-zebroideos (N=50) uno-instantáneos (N=50) z-relés (N=50) no-zebroideos (N=200) uno-instantáneos (N=200) z-relés (N=200) Disponibilidad agregada Latencia ( 6.4 ¿Qué sucede con la latencia de la disponibilidad con zebroids en escenarios con inexactitudes en las predicciones de la ruta del coche? Encontramos que los zebroids continúan proporcionando mejoras en la latencia de la disponibilidad incluso con menor precisión en las predicciones de la ruta del coche. Utilizamos un único parámetro p para cuantificar la exactitud de las predicciones de la ruta del coche. 6.4.1 Análisis Dado que p representa la probabilidad de que una ruta del automóvil predicha por el expedidor coincida con la actual, por lo tanto, la latencia con los zebroideos puede ser aproximada por, 6.4.2 Simulación En la figura 6 se muestra la variación en el Agg en función de esta métrica de precisión de la predicción de ruta. Observamos una reducción suave en la mejora de 81 en Agg a medida que la métrica de precisión de predicción reduce. Para los zebroids que están programados pero no se reúnen con el cliente debido al error de predicción, etiquetamos tales reemplazos hechos por los zebroids como fallados. Se ve que los reemplazos fallidos aumentan gradualmente a medida que la precisión de la predicción se reduce. 6.5 ¿En qué condiciones se maximizan las mejoras en la latencia de disponibilidad con zebroids? Sorprendentemente, encontramos que las mejoras en la latencia obtenidas con cebroides uno-instantáneos son independientes de la distribución de entrada de la popularidad de los ítems de datos. 6.5.1 Análisis La diferencia fraccionaria (marcada en la letra ) en la latencia entre los cebroides no-zebroideos y los cebroides uno-instantáneos se obtiene a partir de las ecuaciones 2, 3 y 4 de la siguiente forma: T i=1 fi·C ri − T i=1 fi·C ri+(N−ri)·(1−(1− 1 G )ri Let α = 1, haciendo el almacenamiento total en el sistema ST = N. Suponiendo que la distribución de réplica inicial es según el esquema de replicación de raíz cuadrada, tenemos, ri = fi·N T j = 1 fj. Por lo tanto, obtenemos fi = K2 ·r2 i N2, donde K = T j=1 fj. Utilizando esto, junto con la aproximación (1 − x)n 1 − n · x para x pequeña, simplificamos la ecuación anterior para obtener, • = 1 − T i=1 ri 1+ N−ri G T i=1 ri Para determinar cuándo se maximizan las ganancias con cebroides uno-instantáneos, podemos enmarcar un problema de optimización de la siguiente manera: Maximizar •, sujeto a T i Con un esquema de replicación de raíz cuadrada, las mejoras obtenidas con cebroides uniinstantáneos son independientes de la distribución de popularidad de entrada de los ítems de datos. (Ver [9] para la prueba) 6.5.2 Simulación Realizamos simulaciones con dos diferentes distribución de frecuencias de ítems de datos: Uniforme y Zipfian (con media= 0.27). En ambos casos se obtienen mejoras similares de latencia con cebroides uniinstantáneos. Este resultado tiene importantes implicaciones. En casos con popularidad sesgada hacia ciertos ítems de datos, las mejoras agregadas en la latencia en todas las solicitudes de ítems de datos siguen siendo las mismas. Incluso en escenarios en los que la frecuencia de acceso a los datos cambia dinámicamente, los zebroids seguirán proporcionando mejoras similares en la latencia. 7. CONCLUSIONES Y FUTURAS DIRECCIONES DE INVESTIGACIÓN En este estudio, examinamos las mejoras en la latencia que se pueden obtener en presencia de transportistas que entregan un elemento de datos desde un servidor a un cliente. Se cuantificó la variación de la latencia de disponibilidad en función de un rico conjunto de parámetros como la densidad del coche, el almacenamiento por coche, el tamaño de la base de datos de título y las políticas de reemplazo empleadas por los zebroids. A continuación se resumen algunas direcciones clave de investigación en el futuro que pretendemos seguir. Para reflejar mejor la realidad nos gustaría validar las observaciones obtenidas de este estudio con algunos rastros de simulación del mundo real de movimientos vehiculares (por ejemplo usando CORSIM [1]). Esto también servirá como validación para la utilidad del modelo de movilidad Markov utilizado en este estudio. Actualmente estamos analizando el desempeño de los zebroids en un conjunto de datos del mundo real que comprende una red ad-hoc de autobuses que se mueven alrededor de un pequeño barrio en Amherst [4]. Los cebroides también se pueden utilizar para la entrega de datos que transportan información sensible al retraso con una determinada caducidad. Las extensiones a zebroids que satisfacen estos requisitos de aplicación presentan una dirección de investigación futura interesante. 8. AGRADECIMIENTOS Esta investigación fue apoyada en parte por una beca Annenberg y subvenciones NSF numeradas CNS-0435505 (NeTS NOSS), CNS-0347621 (CAREER), y IIS-0307908. 9. REFERENCIAS [1] Administración Federal de Carreteras. Simulación del corredor. Versión 5.1, http://www.ops.fhwa.dot.gov/trafficanalysistools/cors im.htm. [2] D. Aldous y J. Llena. Cadenas de markov reversibles y caminatas aleatorias en gráficos. En preparación. [3] A. Bar-Noy, I. Kessler y M. Sidi. Usuarios móviles: Para actualizar o no actualizar. En IEEE Infocom, 1994. [4] J. Burgess, B. Gallagher, D. Jensen, y B. Levine. MaxProp: Enrutamiento para redes tolerantes a perturbaciones basadas en vehículos. En IEEE Infocom, abril de 2006. [5] E. Cohen y S. Shenker. Estrategias de replicación en redes de pares no estructuradas. En SIGCOMM, 2002. [6] A. Dan, D. Dias, R. Mukherjee, D. Sitaram y R. Tewari. Buffering y Caching en servidores de vídeo a gran escala. En COMPCON, 1995. [7] S. Ghandeharizadeh, S. Kapadia, y B. Krishnamachari. PAVAN: Marco normativo para la disponibilidad de contenidos en las redes ad hoc de vehículos. En VANET, Nueva York, Nueva York, Estados Unidos, 2004. ACM Press. [8] S. Ghandeharizadeh, S. Kapadia, y B. Krishnamachari. Comparación de estrategias de replicación para la disponibilidad de contenido en redes C2P2. En MDM, mayo de 2005. [9] S. Ghandeharizadeh, S. Kapadia, y B. Krishnamachari. Una evaluación de la latencia de disponibilidad en redes de vehículos ad-hoc basadas en el portador. Informe técnico, Departamento de Ciencias de la Computación, Universidad del Sur de California, CENG-2006-1, 2006. [10] S. Ghandeharizadeh y B. Krishnamachari. C2p2: Una red inter pares para servicios de información de automóviles a petición. En Globe. IEEE, 2004. [11] T. Hara. Asignación eficaz de réplicas en redes ad-hoc para mejorar la accesibilidad de datos. En IEEE Infocom, 2001. [12] H. Hayashi, T. Hara, y S. Nishio. Un método de asignación de réplica Adaptarse a los cambios de topología en redes ad-hoc. En DEXA, 2005. [13] P. Juang, H. Oki, Y. Wang, M. Martonosi, L. Peh, y D. Rubenstein. Computación energéticamente eficiente para el seguimiento de vida silvestre: compensaciones de diseño y experiencias tempranas con ZebraNet. Silgarch Comput. Archit. Noticias, 2002. [14] A. Pentland, R. Fletcher y A. Hasson. DakNet: Repensar la conectividad en las naciones en desarrollo. Computadora, 37(1):78-83, 2004. [15] F. Sailhan y V. Issarny. Caché cooperativo en redes ad-hoc. En MDM, 2003. [16] R. Shah, S. Roy, S. Jain y W. Brunette. Mulas de datos: Modelado y análisis de una arquitectura de tres niveles para redes de sensores escasas. Elsevier ad-hoc Networks Journal, 1o de septiembre de 2003. [17] T. Schiropoulos, K. Psounis y C. Raghavendra. Enrutamiento de una sola copia en redes móviles conectadas intermitentemente. En SECON, abril de 2004. [18] A. Tanenbaum. Sistemas operativos modernos, 2a edición, capítulo 4, sección 4.4. Prentice Hall, 2001. [19] A. Vahdat y D. Becker. Ruta epidémica para redes ad-hoc parcialmente conectadas. Informe técnico, Departamento de Informática, Universidad de Duke, 2000. [20] W. Zhao, M. Ammar, y E. Zegura. Un enfoque de ferriing de mensajes para la entrega de datos en redes móviles ad-hoc escasas. En MobiHoc, págs. 187 a 198, Nueva York, NY, Estados Unidos, 2004. ACM Press. [21] M. Zonoozi y P. Dassanayake. Modelado de Movilidad de Usuario y Caracterización del Patrón de Movilidad. Revista IEEE sobre áreas seleccionadas en las comunicaciones, 15:1239-1252, septiembre de 1997. 82 ",
            "error": []
        },
        "termed zebroid": {
            "translated_key": [],
            "translated_annotated_text": "Una evaluación de la latencia de disponibilidad en redes ad hoc vehiculares basadas en portador Shahram Ghandeharizadeh Dept of Computer Science Univ of Southern California Los Angeles, CA 90089, USA shahram@usc.edu Shyam Kapadia Dept of Computer Science Univ of Southern California Los Angeles, CA 90089, USA kapadia@usc.edu Bhaskar Krishna Nuestro entorno de destino utiliza portadores de datos, llamados zebroids, donde un dispositivo móvil lleva un elemento de datos en nombre de un servidor a un cliente, minimizando así su latencia de disponibilidad. En este estudio, cuantificamos la variación de la latencia de disponibilidad con zebroids en función de un rico conjunto de parámetros como densidad de coche, almacenamiento por dispositivo, tamaño del repositorio y políticas de reemplazo empleadas por zebroids. Utilizando análisis y simulaciones extensas, obtenemos ideas novedosas sobre el diseño de sistemas basados en operadores. Se pueden obtener mejoras significativas en la latencia con zebroids a costa de un mínimo gasto general. Estas mejoras se producen incluso en escenarios con menor precisión en las predicciones de las rutas del coche. Dos hallazgos particularmente sorprendentes son: (1) una política de sustitución aleatoria ingenua empleada por los zebroids muestra un rendimiento competitivo, y (2) mejoras de la latencia obtenidas con una instanciación simplificada de zebroids se encuentran robustos a los cambios en la distribución de popularidad de los ítems de datos. Categorías y Subject Descriptores: C.2.4 [Sistemas distribuidos]: Términos Generales del Cliente/Servidor: Algoritmos, Rendimiento, Diseño, Experimentación. 1. INTRODUCCIÓN Los avances tecnológicos en las esferas del almacenamiento y las comunicaciones inalámbricas han hecho posible ahora prever la entrega a petición de datos, por ejemplo, para clips de vídeo y audio, en redes de peer-topeer vehiculares. En trabajos previos, Ghandeharizadeh et al. [10] introduce el concepto de vehículos equipados con un dispositivo Car-to-Car-Peer-toPeer, denominado AutoMata, para el entretenimiento dentro del vehículo. Las características notables de un AutoMata incluyen un dispositivo de almacenamiento masivo que ofrece cientos de gigabytes (GB) de almacenamiento, un procesador rápido y varios tipos de tarjetas de red. Incluso con las unidades de disco actuales de 500 GB, un repositorio de contenido de entretenimiento diverso puede exceder la capacidad de almacenamiento de un solo AutoMata. Tales repositorios constituyen el foco de este estudio. Para intercambiar datos, suponemos que cada AutoMata está configurado con dos tipos de tarjetas de red: 1) una tarjeta de red de baja anchura de banda con un radio-rango largo en el orden de millas que permite a un dispositivo AutoMata comunicarse con una estación celular cercana o WiMax, 2) una tarjeta de red de alta anchura de banda con un radio-rango limitado en el orden de cientos de pies. La conexión de ancho de banda alto admite tasas de datos en el orden de decenas a cientos de megabits por segundo y representa la red ad-hoc peer a peer entre los vehículos. Esto se etiqueta como el plano de datos y se emplea para intercambiar elementos de datos entre dispositivos. La conexión de baja anchura de banda sirve como plano de control, permitiendo a los dispositivos AutoMata intercambiar meta-datos con uno o más servidores centralizados. Esta conexión ofrece anchos de banda en el orden de decenas a cientos de Kilobits por segundo. Los servidores centralizados, denominados despachadores, calculan los calendarios de entrega de datos a lo largo del plano de datos utilizando los metadatos proporcionados. Estos horarios se transmiten a los vehículos participantes que utilizan el avión de control. La viabilidad técnica de tal arquitectura de dos niveles se presenta en [7], con resultados preliminares para demostrar que el ancho de banda del plano de control es suficiente para el intercambio de la información de control necesaria para realizar tal aplicación. En un escenario típico, un dispositivo AutoMata presenta a un pasajero con una lista de elementos de datos1, mostrando tanto el nombre de cada elemento de datos como su latencia de disponibilidad. Este último, denotado como ♥, se define como el momento más temprano en que el cliente encuentra una copia de su elemento de datos solicitado. Un elemento de datos está disponible inmediatamente cuando reside en el almacenamiento local del dispositivo AutoMata que atiende a la solicitud. Debido a las restricciones de almacenamiento, un AutoMata puede no almacenar todo el repositorio. En este caso, la latencia de disponibilidad es el tiempo desde que el usuario emite una solicitud hasta que el AutoMata encuentra otro coche que contiene el elemento de datos referenciado. (Los términos coche y AutoMata se utilizan indistintamente en este estudio.) La latencia de disponibilidad para un artículo es una función de la ubicación actual del cliente, su ruta de destino y viaje, el modelo de movilidad de los vehículos equipados con AutoMata, el número de réplicas construidas para los diferentes elementos de datos, y la colocación de réplicas de elementos de datos a través de los vehículos. Un método para mejorar la latencia de disponibilidad es emplear portadores de datos que transportan una réplica del elemento de datos solicitado desde un coche servidor que lo contiene a un cliente que lo solicitó. Estos portadores de datos se denominan zebroids. La selección de cebroides es facilitada por la arquitectura de dos niveles. El plano de control permite la recopilación centralizada de información en un despachador presente en una estación base.2 Algunos ejemplos de control en1 Sin pérdida de generalidad, el término elemento de datos puede ser medios tradicionales como texto o medios continuos como un clip de audio o vídeo. 2 Puede haber despachadores desplegados en un subconjunto de las estaciones de base para la tolerancia a fallos y la robustez. Los distribuidores entre estaciones de base pueden comunicarse a través de la infraestructura cableada. 75 formación son actualmente solicitudes activas, ruta de viaje de los clientes y sus destinos, y caminos de los otros coches. Para cada solicitud del cliente, el despachador puede elegir un conjunto de portadores z que colaboran para transferir un elemento de datos de un servidor a un cliente (z-relay zebroids). Aquí, z es el número de zebroids tales que 0 ≤ z < N, donde N es el número total de coches. Cuando z = 0 no hay portadores, lo que requiere un servidor para entregar el elemento de datos directamente al cliente. De lo contrario, el equipo de relé elegido de z zebroids se entregará los datos de forma transitoria unos a otros para llegar al cliente, reduciendo así la latencia de la disponibilidad (para más detalles, véase la sección 3.1). Para aumentar la robustez, el despachador puede emplear múltiples equipos de relé de portadoras z para cada solicitud. Esto puede ser útil en escenarios en los que el despachador tiene menor precisión de predicción en la información sobre las rutas de los coches. Por último, las restricciones de almacenamiento pueden requerir que un zebroid desaloje elementos de datos existentes de su almacenamiento local para acomodar el elemento solicitado por el cliente. En este estudio, se cuantifican los siguientes factores principales que afectan a la latencia de la disponibilidad en presencia de zebroideos: (i) tamaño del repositorio de datos, (ii) densidad del coche, (iii) capacidad de almacenamiento por coche, (iv) duración del viaje del cliente, (v) esquema de reemplazo empleado por los zebroideos, y (vi) exactitud de las predicciones de la ruta del coche. Para un subconjunto significativo de estos factores, abordamos algunas preguntas clave relativas al uso de zebroids tanto a través del análisis como de simulaciones extensas. Nuestras principales conclusiones son las siguientes. Una política de sustitución aleatoria ingenua empleada por los zebroids muestra un rendimiento competitivo en términos de latencia de disponibilidad. Con esta política, se pueden obtener mejoras sustanciales en la latencia con zebroids con un mínimo de gastos generales de reemplazo. En escenarios más prácticos, donde el despachador tiene información inexacta sobre las rutas del coche, los zebroids continúan proporcionando mejoras de la latencia. Un resultado sorprendente es que los cambios en la popularidad de los ítems de datos no impactan las ganancias de latencia obtenidas con una simple instanciación de z-relay zebroids llamados cebroids uno-instantáneos (ver Sección 3.1). Este estudio sugiere una serie de direcciones interesantes a seguir para obtener una mejor comprensión del diseño de sistemas basados en el portador que mejoran la latencia de disponibilidad. Trabajo relacionado: La replicación en redes móviles ad-hoc ha sido un tema ampliamente estudiado [11, 12, 15]. Sin embargo, ninguno de estos estudios emplea zebroids como portadores de datos para reducir la latencia de las solicitudes de los clientes. Varios estudios novedosos e importantes como ZebraNet [13], DakNet [14], Data Mules [16], Message Ferries [20] y Seek and Focus [17] han analizado factores que afectan a redes conectadas intermitentemente consistentes en portadores de datos similares en espíritu a los zebroideos. Los factores considerados por cada estudio son dictados por su supuesto entorno y aplicación diana. Una característica novedosa de nuestro estudio es el impacto en la latencia de disponibilidad para un repositorio de datos dado de elementos. En [9] se puede obtener una descripción detallada de las obras relacionadas. El resto de este documento está organizado de la siguiente manera. En la sección 2 se ofrece una visión general de la terminología junto con los factores que influyen en la latencia de la disponibilidad en presencia de zebroides. En la sección 3 se describe cómo se pueden emplear los cebroides. En la sección 4 se proporciona información detallada sobre la metodología de análisis empleada para captar el desempeño con los zebroids. En la sección 5 se describen los detalles del entorno de simulación utilizado para la evaluación. La sección 6 recoge las preguntas clave examinadas en este estudio y las responde a través de análisis y simulaciones. Por último, en la sección 7 se presentan breves conclusiones y futuras orientaciones de la investigación. 2. SINOPSIS Y TERMINOLOGÍA La Tabla 1 resume la notación de los parámetros utilizados en el artículo. A continuación introducimos algunas terminologías utilizadas en el artículo. Asumir una red de coches N AutoMata equipados, cada uno con capacidad de almacenamiento de α bytes. La capacidad total de almacenamiento del sistema es ST = N. Hay elementos de datos T en la base de datos, cada uno con parámetros de base de datos T Número de elementos de datos. Si Tamaño del ítem de datos i fi Frecuencia de acceso al ítem de datos i. Parámetros de replicación Ri Frecuencia normalizada de acceso al ítem de datos i ri Número de réplicas para ítem de datos i n Caracteriza un esquema de replicación particular. Latencia media de la disponibilidad del elemento de datos i Łagg Latencia agregada de la disponibilidad, N Número de dispositivos AutoMata en el sistema. α Capacidad de almacenamiento por AutoMata. γ Duración del viaje del cliente AutoMata. ST Capacidad total de almacenamiento del sistema AutoMata, ST = N · α. Cuadro 1: Términos y sus definiciones tamaño Si. La frecuencia de acceso al ítem de datos i se denota como fi, con T j=1 fj = 1. Deje que la duración del viaje del cliente AutoMata en consideración sea γ. Ahora definimos la frecuencia normalizada de acceso al ítem de datos i, denotado por Ri, como: Ri = (fi)n T j=1(fj)n ; 0 ≤ n ≤ فارسى (1) El exponente n caracteriza una técnica de replicación particular. Un esquema de replicación de raíz cuadrada se realiza cuando n = 0.5 [5]. Esto sirve como la línea base para la comparación con el caso cuando se despliegan zebroids. Ri se normaliza a un valor entre 0 y 1. El número de réplicas para el dato i, denotado como ri, es: ri = min (N, max (1, Ri·N Si )). Esto capta el caso cuando al menos una copia de cada elemento de datos debe estar presente en la red ad-hoc en todo momento. En los casos en que un elemento de datos se puede perder de la red ad-hoc, esta ecuación se convierte en ri = min (N, max (0, Ri·N Si )). En este caso, es posible que sea necesario satisfacer una solicitud para el elemento de datos perdido mediante la obtención del elemento desde un servidor remoto. La latencia de disponibilidad para un elemento de datos i, denotado como i, se define como la primera vez en la que un cliente AutoMata encontrará la primera réplica del elemento accesible a él. Si esta condición no se cumple, entonces se establece a i. Esto indica que el elemento de datos I no estaba disponible para el cliente durante su viaje. Tenga en cuenta que como hay al menos una réplica en el sistema para cada elemento de datos i, al establecer γ a un gran valor nos aseguramos de que los clientes soliciten cualquier elemento de datos i será satisfecho. Sin embargo, en la mayoría de las circunstancias prácticas γ puede no ser tan grande como para encontrar cada elemento de datos. Estamos interesados en la latencia de disponibilidad observada en todos los datos. Por lo tanto, aumentamos la latencia media de disponibilidad para cada ítem de datos i con su fi para obtener la siguiente latencia ponderada de disponibilidad (?agg) métrica:?agg = T i=1?i · fi A continuación, presentamos nuestro enfoque de solución describiendo cómo se seleccionan los zebroids. 3. ENFOQUE DE SOLUCIÓN 3.1 Zebroids Cuando un cliente hace referencia a un elemento de datos que falta en su almacenamiento local, el despachador identifica todos los coches con una copia del elemento de datos como servidores. A continuación, el despachador obtiene las rutas futuras de todos los coches para una duración de tiempo finito equivalente al tiempo máximo que el cliente está dispuesto a esperar a que su solicitud sea atendido. Utilizando esta información, el despachador programa la ruta de entrega más rápida desde cualquiera de los servidores al cliente utilizando cualquier otro coche como transportistas intermedios. Por lo tanto, determina el conjunto óptimo de decisiones de reenvío 76 que permitirá que el elemento de datos se entreguen al cliente en el mínimo de tiempo. Tenga en cuenta que la latencia a lo largo de la ruta de entrega más rápida que emplea un equipo de relé de z zebroids es similar a la obtenida con el encaminamiento epidémico [19] bajo los supuestos de almacenamiento infinito y ninguna interferencia. Una simple instanciación de z-relay zebroids se produce cuando z = 1 y la solicitud de los clientes desencadena una transferencia de una copia del elemento de datos solicitado de un servidor a un zebroid en su vecindad. Tal zebroideo se denomina cebroide uniinstantáneo. En algunos casos, el expedidor podría tener información inexacta sobre las rutas de los coches. Por lo tanto, un zebroid programado sobre la base de esta información inexacta puede no reunirse con su cliente objetivo. Para minimizar la probabilidad de tales escenarios, el despachador puede programar múltiples zebroids. Esto puede acarrear gastos generales adicionales debido a la utilización redundante de recursos para obtener las mismas mejoras de latencia. El tiempo necesario para transferir un elemento de datos de un servidor a un zebroid depende de su tamaño y del ancho de banda del enlace disponible. Con elementos de datos pequeños, es razonable suponer que este tiempo de transferencia es pequeño, especialmente en presencia del plano de datos de alto ancho de banda. Los elementos de datos grandes se pueden dividir en trozos más pequeños que permiten al despachador programar uno o más zebroids para entregar cada trozo a un cliente de una manera oportuna. Esta sigue siendo una dirección de investigación futura. Inicialmente, el número de réplicas para cada ítem de datos puede ser calculado usando la Ecuación 1. Este esquema calcula el número de réplicas de datos en función de su popularidad. Es estática porque el número de réplicas en el sistema no cambia y no se realizan reemplazos. Por lo tanto, esto se conoce como el ambiente de los nozebroids. Cuantificamos el desempeño de las diversas políticas de reemplazo con referencia a esta línea base que no emplea zebroids. Uno puede asumir una fase de arranque en frío, donde inicialmente sólo una o pocas copias de cada elemento de datos existen en el sistema. Muchas ranuras de almacenamiento de los coches pueden estar desocupados. Cuando los coches se encuentran entre sí, construyen nuevas réplicas de algunos elementos de datos seleccionados para ocupar los huecos vacíos. El procedimiento de selección puede consistir en elegir los datos de manera uniforme al azar. Nuevas réplicas se crean siempre y cuando un coche tiene un cierto umbral de su almacenamiento desocupado. Eventualmente, la mayoría de la capacidad de almacenamiento de un coche se agotará. 3.2 Políticas de reemplazo basadas en el operador Las políticas de reemplazo consideradas en este documento son reactivas ya que una sustitución se produce sólo en respuesta a una solicitud emitida para un determinado elemento de datos. Cuando el almacenamiento local de un zebroid está completamente ocupado, necesita reemplazar uno de sus elementos existentes para llevar el elemento de datos solicitado por el cliente. Para ello, el zebroid debe seleccionar a un candidato apropiado para el desalojo. Este proceso de decisión es análogo al encontrado en la paginación del sistema operativo donde el objetivo es maximizar la relación de acceso a la caché para evitar el retraso del acceso al disco [18]. Las políticas de reemplazo basadas en transportistas empleadas en nuestro estudio son las menos usadas recientemente (LRU), las menos usadas con frecuencia (LFU) y las aleatorias (donde un candidato de desalojo es elegido uniformemente al azar). Hemos considerado variantes locales y globales de las políticas LRU/LFU que determinan si el conocimiento local o global de los contenidos de los coches conocidos en el expedidor se utiliza para la decisión de desalojo en un zebroid (ver [9] para más detalles). Las pólizas de sustitución entrañan los siguientes gastos generales. En primer lugar, la complejidad asociada a la aplicación de una política. En segundo lugar, el ancho de banda utilizado para transferir una copia de un elemento de datos de un servidor al zebroid. En tercer lugar, el número medio de reemplazos realizados por los zebroides. Tenga en cuenta que en el caso de no cebroides no se incurre en gastos generales. Las métricas consideradas en este estudio son la latencia de la disponibilidad agregada, Tenga en cuenta que los despachadores con la ayuda del plano de control pueden asegurarse de que no se pierda ningún elemento de datos del sistema. En otras palabras, al menos una réplica de cada elemento de datos se mantiene en la red ad-hoc en todo momento. En tales casos, aunque un coche puede encontrarse con un cliente solicitante antes que otros servidores, si su almacenamiento local contiene elementos de datos con sólo una copia en el sistema, entonces tal coche no se elige como un zebroid. 4. METODOLOGÍA DE ANÁLISIS Aquí presentamos la metodología de evaluación analítica y algunas aproximaciones como ecuaciones de forma cerrada que capturan las mejoras en la latencia de disponibilidad que se pueden obtener tanto con cebros oneinstantáneos como con z-relay. Primero, presentamos algunos preliminares de nuestra metodología de análisis. • Que N sea el número de coches en la red que realizan una caminata aleatoria en 2D en un toro de G× G. Un coche adicional sirve como un cliente que entrega un total de N + 1 coches. Este modelo de movilidad se ha utilizado ampliamente en la literatura [17, 16] principalmente porque es susceptible de análisis y proporciona una base de referencia para comparar el rendimiento de otros modelos de movilidad. Además, esta clase de modelos de movilidad markoviana se ha utilizado para modelar los movimientos de los vehículos [3, 21]. • Asumimos que todos los coches comienzan desde la distribución estacionaria y realizan caminatas aleatorias independientes. Aunque para escenarios de densidad escasa, la suposición de independencia se mantiene, ya no es válido cuando N se aproxima a G. • Deje que el tamaño del repositorio de ítems de datos de interés sea T. Además, el ítem de datos i tiene réplicas ri. Esto implica que los coches ri, identificados como servidores, tienen una copia de este elemento de datos cuando el cliente solicita el elemento i. Todos los resultados de análisis presentados en esta sección se obtienen asumiendo que el cliente está dispuesto a esperar el tiempo necesario para que su solicitud sea satisfecha (duración del viaje sin límite γ = ­). Con el modelo de movilidad al azar en un torso 2D, hay una garantía de que mientras haya al menos una réplica del elemento de datos solicitado en la red, el cliente se encontrará con esta réplica [2]. Las extensiones al análisis que también consideran las duraciones del viaje finito se pueden obtener en [9]. Considere un escenario en el que no se emplean zebroids. En este caso, la latencia de disponibilidad esperada para el ítem de datos es el tiempo de reunión esperado de la caminata aleatoria realizada por el cliente con cualquiera de las caminatas aleatorias realizadas por los servidores. Aldous et al. [2] muestran que el tiempo de reunión de dos caminatas aleatorias en tal entorno puede modelarse como una distribución exponencial con la media C = c · G · log G, donde la constante c 0,17 para G ≥ 25. El tiempo de reunión, o equivalente a la latencia de la disponibilidad de i, para el cliente que solicita datos i es el momento hasta que se encuentre con cualquiera de estas réplicas ri por primera vez. Se trata también de una distribución exponencial con el siguiente valor esperado (obsérvese que esta formulación es válida sólo para casos escasos cuando G >> ri): فارسىi = cGlogG ri La latencia de disponibilidad agregada sin emplear zebroids es entonces esta expresión promediada sobre todos los ítems de datos, ponderada por su frecuencia de acceso: فارسىagg(no − zeb) = T i=1 fi Por otra parte, esta réplica se genera en el paso de tiempo cuando el cliente emite la solicitud. Que Nc i sea el número total esperado de nodos que están en la misma celda que cualquiera de los servidores ri. Luego, tenemos Nc i = (N − ri) · (1 − (1 − 1 G )ri ) (3) En el modelo analítico, suponemos que Nc i nuevas réplicas se crean, de modo que el número total de réplicas se aumenta a ri + Nc i. La latencia de disponibilidad se reduce ya que es más probable que el cliente cumpla con una réplica anterior. La latencia agregada de disponibilidad esperada en el caso de los cebroides uno-instantáneos es dada por, agg(zeb) = T i=1 fi · c · G · log G ri + Nc i = T i=1 fi · C ri + Nc i (4) Tenga en cuenta que al obtener esta expresión, para facilitar el análisis, hemos asumido que las nuevas réplicas comienzan Así trata a todos los portadores de Nc i de forma independiente, al igual que los servidores originales ri. Como mostraremos a continuación en comparación con las simulaciones, esta aproximación proporciona un límite superior a las mejoras que se pueden obtener porque da lugar a una menor latencia esperada en el cliente. Cabe señalar que el procedimiento mencionado anteriormente producirá una latencia similar a la empleada por un expedidor que emplee cebroides oneinstantáneos (véase la sección 3.1). Dado que el despachador es consciente de todos los movimientos futuros del coche que sólo transferiría el elemento de datos solicitado en un único zebroid, si determina que el zebroid se reunirá con el cliente antes que cualquier otro servidor. Este zebroid seleccionado está incluido en las nuevas réplicas de Nc i. 4.2 z-relay zebroids Para calcular la latencia de disponibilidad esperada con z-relay zebroids, utilizamos un análogo de problema de coloración similar a un enfoque utilizado por Spyropoulos et al. [17]. En [9] se dan detalles del procedimiento para obtener una expresión de forma cerrada. La latencia de disponibilidad agregada (agg) con z-relay zebroids es dada por, agg(zeb) = T i=1 [fi · C N + 1 · 1 N + 1 − ri · (N · log N ri − log (N + 1 − ri))] (5) 5. METODOLOGÍA DE SIMULACIÓN El entorno de simulación considerado en este estudio se compone de vehículos como automóviles que llevan una fracción del repositorio de datos. Un parámetro de precisión de predicción proporciona inherentemente una cierta garantía probabilística sobre la confianza de las predicciones de ruta del automóvil conocidas en el despachador. Un valor del 100% implica que las rutas exactas de todos los coches se conocen en todo momento. Un valor del 70% para este parámetro indica que las rutas previstas para los coches coincidirán con las reales con probabilidad 0.7. Tenga en cuenta que esta probabilidad se extiende a través de las rutas del coche durante toda la duración del viaje. Ahora proporcionamos los preliminares del estudio de simulación y luego describimos los parámetros de configuración utilizados en nuestros experimentos. • Similar a la metodología de análisis, el mapa utilizado es un toro 2D. Un modelo de movilidad Markov que representa una caminata aleatoria 2D imparcial en la superficie del toro describe el movimiento de los coches a través de este toro. • Cada cuadrícula/célula es un estado único de esta cadena Markov. En cada ranura de tiempo, cada coche hace una transición de una celda a cualquiera de sus 8 celdas vecinas. La transición es una función de la ubicación actual del coche y una matriz de transición de probabilidad Q = [qij] donde qij es la probabilidad de transición del estado i al estado j. Solo los coches equipados con AutoMata dentro de la misma celda pueden comunicarse entre sí. • Los parámetros γ,  han sido discretizados y expresados en términos del número de franjas horarias. • Un dispositivo AutoMata no mantiene más de una réplica de un elemento de datos. Esto se debe a que las réplicas adicionales ocupan el almacenamiento sin proporcionar beneficios. • Los cebroides de relé z o uno instantáneos pueden ser empleados por solicitud del cliente para mejorar la latencia. • A menos que se mencione lo contrario, se supone que el parámetro de precisión de la predicción es del 100%. Esto se debe a que este estudio pretende cuantificar el efecto de un gran número de parámetros individualmente sobre la latencia de la disponibilidad. Aquí, establecemos el tamaño de cada elemento de datos, Si, para ser 1. α representa el número de ranuras de almacenamiento por AutoMata. Cada ranura de almacenamiento almacena un elemento de datos. γ representa la duración del viaje de los clientes en términos del número de franjas horarias. Por lo tanto, los posibles valores de latencia de disponibilidad están entre 0 y γ.  se define como el número de franjas horarias después de lo cual un dispositivo cliente AutoMata encontrará una réplica del elemento de datos por primera vez. Si una réplica para el elemento de datos solicitado fue encontrado por el cliente en la primera celda, a continuación, se establece  = 0. Si se trata de un elemento de datos solicitado, el cliente no encontró ninguna copia del elemento de datos solicitado durante todo su viaje. En todas nuestras simulaciones, para la ilustración consideramos un 5 × 5 2D-torus con γ fijado a 10. Nuestros experimentos indican que las tendencias en la escala de resultados a mapas de mayor tamaño. Simulamos una distribución sesgada de acceso a los datos T que obedece a la ley Ziffs con una media de 0.27. Esta distribución corresponde a la venta de entradas de cine en los Estados Unidos [6]. Empleamos un esquema de replicación que asigna réplicas para un elemento de datos en función de la raíz cuadrada de la frecuencia de acceso de ese elemento. Se muestra que el esquema de replicación de raíz cuadrada tiene un rendimiento de latencia competitivo en un gran espacio de parámetros [8]. Las réplicas de elementos de datos se distribuyen uniformemente entre los dispositivos AutoMata. Esto sirve como el caso de la línea base sin cebros. El esquema de raíz cuadrada también proporciona la distribución de réplica inicial cuando se emplean zebroids. Tenga en cuenta que los reemplazos realizados por los zebroids causarán cambios en la distribución de réplica de ítems de datos. Las solicitudes generadas según la distribución Zipf se emiten una a la vez. El coche cliente que emite la solicitud se elige de una manera redonda-robina. Después de un período máximo de γ, se registra la latencia con que se encontró esta solicitud. En todos los resultados de simulación, cada punto es un promedio de 200.000 solicitudes. Además, los intervalos de confianza del 95% determinados para los resultados son bastante ajustados para las métricas de latencia y los gastos generales de reemplazo. Por lo tanto, sólo los presentamos para la métrica que captura la mejora porcentual de la latencia con respecto al caso de no-zebroides. 6. RESULTADOS En esta sección, describimos nuestros resultados de evaluación donde se abordan las siguientes preguntas clave. Con una amplia selección de esquemas de reemplazo disponibles para un zebroid, ¿cuál es su efecto en la latencia de disponibilidad? Una pregunta más central es: Do zebroids provide 78 0 20 40 60 80 100 1.5 2 2.5 3 3.5 Número de coches Latencia de disponibilidad agregada (­agg ) lru_global lfu_global lru_local lfu_local random Figura 1: La figura 1 muestra la latencia de disponibilidad al emplear cebroids uno-instantáneos en función de los valores (N,α), cuando el ¿Cuáles son los gastos generales asociados en el empleo de estos zebroides? ¿Qué sucede con estas mejoras en escenarios donde un despachador puede tener información imperfecta sobre las rutas del automóvil? ¿Cuáles son las compensaciones inherentes entre la densidad del automóvil y el almacenamiento por automóvil en lo que respecta a su efecto combinado e individual sobre la latencia de la disponibilidad en presencia de zebroids? Presentamos análisis simples y simulaciones detalladas para proporcionar respuestas a estas preguntas, así como para obtener información sobre el diseño de sistemas basados en operadores. 6.1 ¿Cómo funciona un esquema de sustitución empleado por un latencia de disponibilidad de impacto zebroideo? Para ilustrarlo, presentamos experimentos de escala en los que se emplean cebroides oneinstantáneos (ver Figura 1). Por escala, queremos decir que α y N se cambian proporcionalmente para mantener el almacenamiento total del sistema, ST, constante. Aquí, T = 50 y ST = 200. Elegimos los siguientes valores de (N,α) = {(20,10), (25,8), (50,4), (100,2)}. La cifra indica que un plan de sustitución al azar muestra un rendimiento competitivo. Esto se debe a varias razones. Recuerde que la distribución de réplica inicial se establece según el esquema de replicación de raíz cuadrada. El esquema de reemplazo aleatorio no altera esta distribución ya que hace que los reemplazos ciegos a la popularidad de un elemento de datos. Sin embargo, los reemplazos causan una reorganización dinámica de los datos a fin de atender mejor a la solicitud activa actual. Además, el patrón de movilidad de los coches es aleatorio, por lo que las ubicaciones desde las que los clientes emiten las solicitudes también son aleatorias y no se conocen a priori en el despachador. Estas conclusiones son importantes porque una política de sustitución aleatoria puede aplicarse de manera descentralizada. Los esquemas rru-global y lfu-global proporcionan un rendimiento de latencia que es peor que aleatorio. Esto se debe a que estas políticas desarrollan rápidamente una preferencia por los elementos de datos más populares, creando así un mayor número de réplicas para ellos. Durante el desalojo, los datos más populares casi nunca se seleccionan como candidatos de reemplazo. En consecuencia, hay menos réplicas para los artículos menos populares. Por lo tanto, la distribución inicial del elemento de datos replica cambios de raíz cuadrada a que se asemeja a replicación lineal. El mayor número de réplicas de las partidas de datos populares proporciona beneficios adicionales marginales, mientras que el menor número de réplicas de las demás partidas de datos perjudica el rendimiento de latencia de estas políticas mundiales. Los esquemas lfu-local y lru-local tienen un rendimiento similar al aleatorio ya que no tienen suficiente historial de solicitudes de datos locales. Especulamos que el desempeño de estas políticas locales se acercará al de sus variantes globales para una historia suficientemente grande de solicitudes de ítems de datos. Debido al rendimiento competitivo demostrado por una política aleatoria, para el resto del documento, presentamos el rendimiento de los zebroids que emplean una política de reemplazo aleatorio. 6.2 ¿Proporcionan los zebroids mejoras significativas en la latencia de disponibilidad? Encontramos que en muchos escenarios que emplean zebroids proporciona mejoras sustanciales en la latencia de la disponibilidad. 6.2.1 Análisis Primero consideramos el caso de los cebroides uno-instantáneos. La Figura 2.a muestra la variación en Łagg en función de N para T = 10 y α = 1 con 10 × 10 toros usando la Ecuación 4. Los ejes x e y se dibujan a una escala de registro. En la figura 2.b se muestra la mejoría en % en el Agg obtenido con cebroides uniinstantáneos. En este caso, sólo el eje x se dibuja a una escala de registro. Para ilustrar, suponemos que los datos T son solicitados uniformemente. Inicialmente, cuando la red es escasa la aproximación analítica para mejoras en la latencia con zebroids, obtenida de las ecuaciones 2 y 4, coincide estrechamente con los resultados de la simulación. Sin embargo, a medida que N aumenta, la suposición de escasez para la que el análisis es válido, a saber, N+G, ya no es cierta. Por lo tanto, las dos curvas divergen rápidamente. El punto en el que las dos curvas se alejan unas de otras corresponde a un valor de Además, como se mencionó anteriormente, el análisis proporciona un límite superior a las mejoras de la latencia, ya que trata de las réplicas recién creadas dadas por Nc i de forma independiente. Sin embargo, estas réplicas de Nc i comienzan desde la misma celda que una de las réplicas de servidor ri. Finalmente, el análisis captura un escenario oneshot donde dada una distribución inicial de réplica de datos, se calcula la latencia de disponibilidad. Las nuevas réplicas creadas no afectan las solicitudes futuras del cliente. Debido a las limitaciones de espacio, aquí, se resumen las observaciones en el caso de z-relay zebroids se emplean. El lector interesado puede obtener más detalles en [9]. Observaciones similares, como el caso cebroideo uniinstantaneo, se aplican ya que las curvas de simulación y análisis comienzan de nuevo a divergir cuando los supuestos de análisis ya no son válidos. Sin embargo, la observación clave aquí es que la mejora de la latencia con z-relay zebroids es significativamente mejor que el caso de cebroids uno-instantáneos, especialmente para escenarios de almacenamiento más bajos. Esto se debe a que en escenarios escasos, los traspasos transitivos entre los zebroides crean un mayor número de réplicas para el ítem de datos solicitado, lo que produce una menor latencia de disponibilidad. Por otra parte, también se observa que la curva de validación de simulación para las mejoras en Łagg con z-relay zebroids se aproxima a la del caso cebroideo uniinstantánea para un almacenamiento más alto (valores de N más altos). Esto se debe a que los cebroides uno-instantáneos son un caso especial de z-relay zebroides. 6.2.2 Simulación Realizamos simulaciones para examinar todo el espectro de almacenamiento obtenido cambiando la densidad del vehículo N o el almacenamiento por coche α para capturar también escenarios en los que no se mantienen las hipótesis de escasez para las que el análisis es válido. Separamos el efecto de N y α capturando la variación de N manteniendo constante α (caso 1) y viceversa (caso 2) tanto con z-relay y cebroides uno-instantáneos. Aquí, establecemos el tamaño del repositorio como T = 25. En el gráfico 3 figura el caso 1 mencionado anteriormente. Se observan tendencias similares con el caso 2, en [9] se dispone de una descripción completa de esos resultados. Con la Figura 3.b, manteniendo constante α, la densidad del coche aumenta inicialmente tiene mayores beneficios de latencia porque el aumento de N introduce más zebroids en el sistema. A medida que N se incrementa aún más, • reduce porque el almacenamiento total en el sistema sube. En consecuencia, el número de réplicas por elemento de datos sube aumentando así el número de servidores 79. Por lo tanto, la política de reemplazo no puede encontrar un zebroid tan a menudo para transportar el elemento de datos solicitado al cliente antes que cualquiera de los servidores. Por otro lado, el aumento del número de servidores beneficia al caso de no-zebroids al reducir a Agg. El efecto neto da lugar a una reducción de los valores más grandes de N. 10 1 10 2 10 3 10 −1 10 0 10 1 10 2 Número de automóviles no-zebroidsanal no-zebroids sim one-instantaneoussim Agregación Disponibilidad Latencia (­agg ) 2.a) Agg 10 1 10 2 10 3 0 10 20 40 50 60 70 80 90 100 Número de automóviles % Mejora Las tendencias mencionadas anteriormente son similares a las obtenidas del análisis. Sin embargo, algo contra-intuitivamente con almacenamiento relativamente más alto del sistema, z-relay zebroids proporcionan mejoras ligeramente más bajas en la latencia en comparación con uno-instantaneous zebroids. Especulamos que esto se debe a las diferentes distribuciones de réplicas de ítems de datos impuestas por ellos. Tenga en cuenta que los reemplazos realizados por los zebroids causan fluctuaciones en estas distribuciones de réplica que pueden afectar futuras solicitudes de clientes. Actualmente estamos explorando opciones adecuadas de parámetros que pueden capturar estas distribuciones de réplicas cambiantes. 6.3 ¿Cuáles son los gastos generales derivados de la mejora de la latencia de los zebroideos? Encontramos que las mejoras en la latencia con zebroids se obtienen con un mínimo de reemplazo de los gastos generales (< 1 por solicitud del cliente). 6.3.1 Análisis Con cebroides uniinstantáneos, para cada solicitud de cliente se emplea un máximo de un cebroide para mejorar la latencia. Por lo tanto, los gastos generales de sustitución por solicitud del cliente pueden ascender a un máximo de uno. Recordemos que para calcular la latencia con una latencia instantánea 0 50 100 150 200 250 350 400 0 1 2 3 4 5 6 Número de coches Latencia de disponibilidad agregada (?agg ) no-zebroids one-instantaneous z-relays 3.a 0 50 100 150 200 250 300 350 400 0 10 20 30 40 50 60 Número de coches % Mejora en?agg wrt no-zebro Ahora un reemplazo sólo se incumple si una de estas réplicas de Nc i de nueva creación se reúne con el cliente antes que cualquiera de los servidores de ri. Que Xri y XNc i respectivamente sean variables aleatorias que capturen el tiempo mínimo hasta que cualquiera de las réplicas de ri y Nc i cumpla con el cliente. Dado que Xri y XNc i se supone que son independientes, por la propiedad de variables aleatorias distribuidas exponencialmente tenemos, Overhead/request = 1 · P(XNc i < Xri ) + 0 · P(Xri ≤ XNc i ) (6) Overhead/request = ri C ri C + Nc i C = ri ri + Nc i (7) Sin embargo, si N  es constante entonces el aumento de las causas N α 80 0 20 40 60 80 100 0 0,05 0,15 0,20 0,25 0,35 0,40 0,45 0,5 Número de coches cebroides instantáneos número medio de reemplazos por solicitud (N=20,α=10) (N=25,α=8) (N=50,α=4) (N=100,α=2) Figura 4: La figura 4 captura el reemplazo de Esto implica que se incurre en un aumento de los gastos generales de sustitución para valores N y α más altos. Por otra parte, cuando ri = N, esto significa que cada coche tiene una réplica de elemento de datos i. Por lo tanto, no se emplean zebroids cuando se solicita este artículo, lo que da lugar a un gasto general/solicitud para este artículo como cero. A continuación, presentamos resultados de simulación que validan nuestra hipótesis de análisis para los gastos generales asociados con el despliegue de cebroides uno-instantáneos. 6.3.2 Simulación En la figura 4 se muestra la superficie de repuesto con cebroides uno-instantáneos cuando se varían (N,α) manteniendo constante el almacenamiento total del sistema. Las tendencias mostradas por la simulación concuerdan con las previstas por el análisis anterior. Sin embargo, el almacenamiento total del sistema puede ser cambiado ya sea por la densidad variable del coche (N) o el almacenamiento por coche (α). Debido a tendencias similares, aquí presentamos el caso cuando α se mantiene constante y N es variada (Figura 5). Referimos al lector a [9] para el caso cuando α es variado y N se mantiene constante. Presentamos un argumento intuitivo para el comportamiento de las curvas superiores de reemplazo de la solicitud. Cuando el almacenamiento es extremadamente escaso de modo que sólo existe una réplica por elemento de datos en la red AutoMata, el número de reemplazos realizados por los zebroids es cero ya que cualquier reemplazo causará que un elemento de datos se pierda del sistema. El despachador garantiza que no se pierda ningún elemento de datos del sistema. En el otro extremo del espectro, si el almacenamiento se vuelve tan abundante que α = T entonces todo el repositorio de elementos de datos se puede replicar en cada coche. El número de reemplazos es de nuevo cero ya que cada solicitud puede ser satisfecha localmente. Un escenario similar ocurre si N se aumenta a un valor tan grande que otro coche con el elemento de datos solicitado siempre está disponible en las proximidades del cliente. Sin embargo, hay un espectro de almacenamiento en el medio donde los reemplazos por los zebroides programados dan lugar a mejoras en el Agg (ver Figura 3). Por otra parte, observamos que para escenarios de almacenamiento escasos, las mejoras más altas con z-relay zebroids se obtienen al costo de un aumento de los gastos generales de reemplazo en comparación con el caso de cebroids uno-instantáneos. Esto se debe a que en el caso anterior, cada uno de estos z zebroids seleccionados a lo largo de la ruta de latencia más baja al cliente necesita realizar un reemplazo. Sin embargo, los gastos generales de sustitución son todavía inferiores a 1 lo que indica que en promedio se necesita menos de un reemplazo por solicitud del cliente, incluso cuando se emplean z-relay zebroids. 0 50 100 150 200 250 300 350 400 0 0,1 0,2 0,3 0,4 0,6 0,7 0,8 0,9 1 Número de coches z-reemplaza uno-instantánea Número medio de reemplazos por solicitud Figura 5: La figura 5 muestra los gastos generales de reemplazo con cebroide para los casos en que N es diferente manteniendo α = 2. 10 20 30 40 50 60 70 80 90 100 0 0,5 1 1,5 2 2,5 3 3,5 4 Porcentaje de predicción no-zebroideos (N=50) uno-instantáneos (N=50) z-relés (N=50) no-zebroideos (N=200) uno-instantáneos (N=200) z-relés (N=200) Disponibilidad agregada Latencia ( 6.4 ¿Qué sucede con la latencia de la disponibilidad con zebroids en escenarios con inexactitudes en las predicciones de la ruta del coche? Encontramos que los zebroids continúan proporcionando mejoras en la latencia de la disponibilidad incluso con menor precisión en las predicciones de la ruta del coche. Utilizamos un único parámetro p para cuantificar la exactitud de las predicciones de la ruta del coche. 6.4.1 Análisis Dado que p representa la probabilidad de que una ruta del automóvil predicha por el expedidor coincida con la actual, por lo tanto, la latencia con los zebroideos puede ser aproximada por, 6.4.2 Simulación En la figura 6 se muestra la variación en el Agg en función de esta métrica de precisión de la predicción de ruta. Observamos una reducción suave en la mejora de 81 en Agg a medida que la métrica de precisión de predicción reduce. Para los zebroids que están programados pero no se reúnen con el cliente debido al error de predicción, etiquetamos tales reemplazos hechos por los zebroids como fallados. Se ve que los reemplazos fallidos aumentan gradualmente a medida que la precisión de la predicción se reduce. 6.5 ¿En qué condiciones se maximizan las mejoras en la latencia de disponibilidad con zebroids? Sorprendentemente, encontramos que las mejoras en la latencia obtenidas con cebroides uno-instantáneos son independientes de la distribución de entrada de la popularidad de los ítems de datos. 6.5.1 Análisis La diferencia fraccionaria (marcada en la letra ) en la latencia entre los cebroides no-zebroideos y los cebroides uno-instantáneos se obtiene a partir de las ecuaciones 2, 3 y 4 de la siguiente forma: T i=1 fi·C ri − T i=1 fi·C ri+(N−ri)·(1−(1− 1 G )ri Let α = 1, haciendo el almacenamiento total en el sistema ST = N. Suponiendo que la distribución de réplica inicial es según el esquema de replicación de raíz cuadrada, tenemos, ri = fi·N T j = 1 fj. Por lo tanto, obtenemos fi = K2 ·r2 i N2, donde K = T j=1 fj. Utilizando esto, junto con la aproximación (1 − x)n 1 − n · x para x pequeña, simplificamos la ecuación anterior para obtener, • = 1 − T i=1 ri 1+ N−ri G T i=1 ri Para determinar cuándo se maximizan las ganancias con cebroides uno-instantáneos, podemos enmarcar un problema de optimización de la siguiente manera: Maximizar •, sujeto a T i Con un esquema de replicación de raíz cuadrada, las mejoras obtenidas con cebroides uniinstantáneos son independientes de la distribución de popularidad de entrada de los ítems de datos. (Ver [9] para la prueba) 6.5.2 Simulación Realizamos simulaciones con dos diferentes distribución de frecuencias de ítems de datos: Uniforme y Zipfian (con media= 0.27). En ambos casos se obtienen mejoras similares de latencia con cebroides uniinstantáneos. Este resultado tiene importantes implicaciones. En casos con popularidad sesgada hacia ciertos ítems de datos, las mejoras agregadas en la latencia en todas las solicitudes de ítems de datos siguen siendo las mismas. Incluso en escenarios en los que la frecuencia de acceso a los datos cambia dinámicamente, los zebroids seguirán proporcionando mejoras similares en la latencia. 7. CONCLUSIONES Y FUTURAS DIRECCIONES DE INVESTIGACIÓN En este estudio, examinamos las mejoras en la latencia que se pueden obtener en presencia de transportistas que entregan un elemento de datos desde un servidor a un cliente. Se cuantificó la variación de la latencia de disponibilidad en función de un rico conjunto de parámetros como la densidad del coche, el almacenamiento por coche, el tamaño de la base de datos de título y las políticas de reemplazo empleadas por los zebroids. A continuación se resumen algunas direcciones clave de investigación en el futuro que pretendemos seguir. Para reflejar mejor la realidad nos gustaría validar las observaciones obtenidas de este estudio con algunos rastros de simulación del mundo real de movimientos vehiculares (por ejemplo usando CORSIM [1]). Esto también servirá como validación para la utilidad del modelo de movilidad Markov utilizado en este estudio. Actualmente estamos analizando el desempeño de los zebroids en un conjunto de datos del mundo real que comprende una red ad-hoc de autobuses que se mueven alrededor de un pequeño barrio en Amherst [4]. Los cebroides también se pueden utilizar para la entrega de datos que transportan información sensible al retraso con una determinada caducidad. Las extensiones a zebroids que satisfacen estos requisitos de aplicación presentan una dirección de investigación futura interesante. 8. AGRADECIMIENTOS Esta investigación fue apoyada en parte por una beca Annenberg y subvenciones NSF numeradas CNS-0435505 (NeTS NOSS), CNS-0347621 (CAREER), y IIS-0307908. 9. REFERENCIAS [1] Administración Federal de Carreteras. Simulación del corredor. Versión 5.1, http://www.ops.fhwa.dot.gov/trafficanalysistools/cors im.htm. [2] D. Aldous y J. Llena. Cadenas de markov reversibles y caminatas aleatorias en gráficos. En preparación. [3] A. Bar-Noy, I. Kessler y M. Sidi. Usuarios móviles: Para actualizar o no actualizar. En IEEE Infocom, 1994. [4] J. Burgess, B. Gallagher, D. Jensen, y B. Levine. MaxProp: Enrutamiento para redes tolerantes a perturbaciones basadas en vehículos. En IEEE Infocom, abril de 2006. [5] E. Cohen y S. Shenker. Estrategias de replicación en redes de pares no estructuradas. En SIGCOMM, 2002. [6] A. Dan, D. Dias, R. Mukherjee, D. Sitaram y R. Tewari. Buffering y Caching en servidores de vídeo a gran escala. En COMPCON, 1995. [7] S. Ghandeharizadeh, S. Kapadia, y B. Krishnamachari. PAVAN: Marco normativo para la disponibilidad de contenidos en las redes ad hoc de vehículos. En VANET, Nueva York, Nueva York, Estados Unidos, 2004. ACM Press. [8] S. Ghandeharizadeh, S. Kapadia, y B. Krishnamachari. Comparación de estrategias de replicación para la disponibilidad de contenido en redes C2P2. En MDM, mayo de 2005. [9] S. Ghandeharizadeh, S. Kapadia, y B. Krishnamachari. Una evaluación de la latencia de disponibilidad en redes de vehículos ad-hoc basadas en el portador. Informe técnico, Departamento de Ciencias de la Computación, Universidad del Sur de California, CENG-2006-1, 2006. [10] S. Ghandeharizadeh y B. Krishnamachari. C2p2: Una red inter pares para servicios de información de automóviles a petición. En Globe. IEEE, 2004. [11] T. Hara. Asignación eficaz de réplicas en redes ad-hoc para mejorar la accesibilidad de datos. En IEEE Infocom, 2001. [12] H. Hayashi, T. Hara, y S. Nishio. Un método de asignación de réplica Adaptarse a los cambios de topología en redes ad-hoc. En DEXA, 2005. [13] P. Juang, H. Oki, Y. Wang, M. Martonosi, L. Peh, y D. Rubenstein. Computación energéticamente eficiente para el seguimiento de vida silvestre: compensaciones de diseño y experiencias tempranas con ZebraNet. Silgarch Comput. Archit. Noticias, 2002. [14] A. Pentland, R. Fletcher y A. Hasson. DakNet: Repensar la conectividad en las naciones en desarrollo. Computadora, 37(1):78-83, 2004. [15] F. Sailhan y V. Issarny. Caché cooperativo en redes ad-hoc. En MDM, 2003. [16] R. Shah, S. Roy, S. Jain y W. Brunette. Mulas de datos: Modelado y análisis de una arquitectura de tres niveles para redes de sensores escasas. Elsevier ad-hoc Networks Journal, 1o de septiembre de 2003. [17] T. Schiropoulos, K. Psounis y C. Raghavendra. Enrutamiento de una sola copia en redes móviles conectadas intermitentemente. En SECON, abril de 2004. [18] A. Tanenbaum. Sistemas operativos modernos, 2a edición, capítulo 4, sección 4.4. Prentice Hall, 2001. [19] A. Vahdat y D. Becker. Ruta epidémica para redes ad-hoc parcialmente conectadas. Informe técnico, Departamento de Informática, Universidad de Duke, 2000. [20] W. Zhao, M. Ammar, y E. Zegura. Un enfoque de ferriing de mensajes para la entrega de datos en redes móviles ad-hoc escasas. En MobiHoc, págs. 187 a 198, Nueva York, NY, Estados Unidos, 2004. ACM Press. [21] M. Zonoozi y P. Dassanayake. Modelado de Movilidad de Usuario y Caracterización del Patrón de Movilidad. Revista IEEE sobre áreas seleccionadas en las comunicaciones, 15:1239-1252, septiembre de 1997. 82 ",
            "error": []
        },
        "mobile device": {
            "translated_key": "dispositivo móvil",
            "translated_annotated_text": "Una evaluación de la latencia de disponibilidad en redes ad hoc vehiculares basadas en portador Shahram Ghandeharizadeh Dept of Computer Science Univ of Southern California Los Angeles, CA 90089, USA shahram@usc.edu Shyam Kapadia Dept of Computer Science Univ of Southern California Los Angeles, CA 90089, USA kapadia@usc.edu Bhaskar Krishna Nuestro entorno de destino utiliza portadores de datos, llamados zebroids, donde un \"dispositivo móvil\" lleva un elemento de datos en nombre de un servidor a un cliente, minimizando así su latencia de disponibilidad. En este estudio, cuantificamos la variación de la latencia de disponibilidad con zebroids en función de un rico conjunto de parámetros como densidad de coche, almacenamiento por dispositivo, tamaño del repositorio y políticas de reemplazo empleadas por zebroids. Utilizando análisis y simulaciones extensas, obtenemos ideas novedosas sobre el diseño de sistemas basados en operadores. Se pueden obtener mejoras significativas en la latencia con zebroids a costa de un mínimo gasto general. Estas mejoras se producen incluso en escenarios con menor precisión en las predicciones de las rutas del coche. Dos hallazgos particularmente sorprendentes son: (1) una política de sustitución aleatoria ingenua empleada por los zebroids muestra un rendimiento competitivo, y (2) mejoras de la latencia obtenidas con una instanciación simplificada de zebroids se encuentran robustos a los cambios en la distribución de popularidad de los ítems de datos. Categorías y Subject Descriptores: C.2.4 [Sistemas distribuidos]: Términos Generales del Cliente/Servidor: Algoritmos, Rendimiento, Diseño, Experimentación. 1. INTRODUCCIÓN Los avances tecnológicos en las esferas del almacenamiento y las comunicaciones inalámbricas han hecho posible ahora prever la entrega a petición de datos, por ejemplo, para clips de vídeo y audio, en redes de peer-topeer vehiculares. En trabajos previos, Ghandeharizadeh et al. [10] introduce el concepto de vehículos equipados con un dispositivo Car-to-Car-Peer-toPeer, denominado AutoMata, para el entretenimiento dentro del vehículo. Las características notables de un AutoMata incluyen un dispositivo de almacenamiento masivo que ofrece cientos de gigabytes (GB) de almacenamiento, un procesador rápido y varios tipos de tarjetas de red. Incluso con las unidades de disco actuales de 500 GB, un repositorio de contenido de entretenimiento diverso puede exceder la capacidad de almacenamiento de un solo AutoMata. Tales repositorios constituyen el foco de este estudio. Para intercambiar datos, suponemos que cada AutoMata está configurado con dos tipos de tarjetas de red: 1) una tarjeta de red de baja anchura de banda con un radio-rango largo en el orden de millas que permite a un dispositivo AutoMata comunicarse con una estación celular cercana o WiMax, 2) una tarjeta de red de alta anchura de banda con un radio-rango limitado en el orden de cientos de pies. La conexión de ancho de banda alto admite tasas de datos en el orden de decenas a cientos de megabits por segundo y representa la red ad-hoc peer a peer entre los vehículos. Esto se etiqueta como el plano de datos y se emplea para intercambiar elementos de datos entre dispositivos. La conexión de baja anchura de banda sirve como plano de control, permitiendo a los dispositivos AutoMata intercambiar meta-datos con uno o más servidores centralizados. Esta conexión ofrece anchos de banda en el orden de decenas a cientos de Kilobits por segundo. Los servidores centralizados, denominados despachadores, calculan los calendarios de entrega de datos a lo largo del plano de datos utilizando los metadatos proporcionados. Estos horarios se transmiten a los vehículos participantes que utilizan el avión de control. La viabilidad técnica de tal arquitectura de dos niveles se presenta en [7], con resultados preliminares para demostrar que el ancho de banda del plano de control es suficiente para el intercambio de la información de control necesaria para realizar tal aplicación. En un escenario típico, un dispositivo AutoMata presenta a un pasajero con una lista de elementos de datos1, mostrando tanto el nombre de cada elemento de datos como su latencia de disponibilidad. Este último, denotado como ♥, se define como el momento más temprano en que el cliente encuentra una copia de su elemento de datos solicitado. Un elemento de datos está disponible inmediatamente cuando reside en el almacenamiento local del dispositivo AutoMata que atiende a la solicitud. Debido a las restricciones de almacenamiento, un AutoMata puede no almacenar todo el repositorio. En este caso, la latencia de disponibilidad es el tiempo desde que el usuario emite una solicitud hasta que el AutoMata encuentra otro coche que contiene el elemento de datos referenciado. (Los términos coche y AutoMata se utilizan indistintamente en este estudio.) La latencia de disponibilidad para un artículo es una función de la ubicación actual del cliente, su ruta de destino y viaje, el modelo de movilidad de los vehículos equipados con AutoMata, el número de réplicas construidas para los diferentes elementos de datos, y la colocación de réplicas de elementos de datos a través de los vehículos. Un método para mejorar la latencia de disponibilidad es emplear portadores de datos que transportan una réplica del elemento de datos solicitado desde un coche servidor que lo contiene a un cliente que lo solicitó. Estos portadores de datos se denominan zebroids. La selección de cebroides es facilitada por la arquitectura de dos niveles. El plano de control permite la recopilación centralizada de información en un despachador presente en una estación base.2 Algunos ejemplos de control en1 Sin pérdida de generalidad, el término elemento de datos puede ser medios tradicionales como texto o medios continuos como un clip de audio o vídeo. 2 Puede haber despachadores desplegados en un subconjunto de las estaciones de base para la tolerancia a fallos y la robustez. Los distribuidores entre estaciones de base pueden comunicarse a través de la infraestructura cableada. 75 formación son actualmente solicitudes activas, ruta de viaje de los clientes y sus destinos, y caminos de los otros coches. Para cada solicitud del cliente, el despachador puede elegir un conjunto de portadores z que colaboran para transferir un elemento de datos de un servidor a un cliente (z-relay zebroids). Aquí, z es el número de zebroids tales que 0 ≤ z < N, donde N es el número total de coches. Cuando z = 0 no hay portadores, lo que requiere un servidor para entregar el elemento de datos directamente al cliente. De lo contrario, el equipo de relé elegido de z zebroids se entregará los datos de forma transitoria unos a otros para llegar al cliente, reduciendo así la latencia de la disponibilidad (para más detalles, véase la sección 3.1). Para aumentar la robustez, el despachador puede emplear múltiples equipos de relé de portadoras z para cada solicitud. Esto puede ser útil en escenarios en los que el despachador tiene menor precisión de predicción en la información sobre las rutas de los coches. Por último, las restricciones de almacenamiento pueden requerir que un zebroid desaloje elementos de datos existentes de su almacenamiento local para acomodar el elemento solicitado por el cliente. En este estudio, se cuantifican los siguientes factores principales que afectan a la latencia de la disponibilidad en presencia de zebroideos: (i) tamaño del repositorio de datos, (ii) densidad del coche, (iii) capacidad de almacenamiento por coche, (iv) duración del viaje del cliente, (v) esquema de reemplazo empleado por los zebroideos, y (vi) exactitud de las predicciones de la ruta del coche. Para un subconjunto significativo de estos factores, abordamos algunas preguntas clave relativas al uso de zebroids tanto a través del análisis como de simulaciones extensas. Nuestras principales conclusiones son las siguientes. Una política de sustitución aleatoria ingenua empleada por los zebroids muestra un rendimiento competitivo en términos de latencia de disponibilidad. Con esta política, se pueden obtener mejoras sustanciales en la latencia con zebroids con un mínimo de gastos generales de reemplazo. En escenarios más prácticos, donde el despachador tiene información inexacta sobre las rutas del coche, los zebroids continúan proporcionando mejoras de la latencia. Un resultado sorprendente es que los cambios en la popularidad de los ítems de datos no impactan las ganancias de latencia obtenidas con una simple instanciación de z-relay zebroids llamados cebroids uno-instantáneos (ver Sección 3.1). Este estudio sugiere una serie de direcciones interesantes a seguir para obtener una mejor comprensión del diseño de sistemas basados en el portador que mejoran la latencia de disponibilidad. Trabajo relacionado: La replicación en redes móviles ad-hoc ha sido un tema ampliamente estudiado [11, 12, 15]. Sin embargo, ninguno de estos estudios emplea zebroids como portadores de datos para reducir la latencia de las solicitudes de los clientes. Varios estudios novedosos e importantes como ZebraNet [13], DakNet [14], Data Mules [16], Message Ferries [20] y Seek and Focus [17] han analizado factores que afectan a redes conectadas intermitentemente consistentes en portadores de datos similares en espíritu a los zebroideos. Los factores considerados por cada estudio son dictados por su supuesto entorno y aplicación diana. Una característica novedosa de nuestro estudio es el impacto en la latencia de disponibilidad para un repositorio de datos dado de elementos. En [9] se puede obtener una descripción detallada de las obras relacionadas. El resto de este documento está organizado de la siguiente manera. En la sección 2 se ofrece una visión general de la terminología junto con los factores que influyen en la latencia de la disponibilidad en presencia de zebroides. En la sección 3 se describe cómo se pueden emplear los cebroides. En la sección 4 se proporciona información detallada sobre la metodología de análisis empleada para captar el desempeño con los zebroids. En la sección 5 se describen los detalles del entorno de simulación utilizado para la evaluación. La sección 6 recoge las preguntas clave examinadas en este estudio y las responde a través de análisis y simulaciones. Por último, en la sección 7 se presentan breves conclusiones y futuras orientaciones de la investigación. 2. SINOPSIS Y TERMINOLOGÍA La Tabla 1 resume la notación de los parámetros utilizados en el artículo. A continuación introducimos algunas terminologías utilizadas en el artículo. Asumir una red de coches N AutoMata equipados, cada uno con capacidad de almacenamiento de α bytes. La capacidad total de almacenamiento del sistema es ST = N. Hay elementos de datos T en la base de datos, cada uno con parámetros de base de datos T Número de elementos de datos. Si Tamaño del ítem de datos i fi Frecuencia de acceso al ítem de datos i. Parámetros de replicación Ri Frecuencia normalizada de acceso al ítem de datos i ri Número de réplicas para ítem de datos i n Caracteriza un esquema de replicación particular. Latencia media de la disponibilidad del elemento de datos i Łagg Latencia agregada de la disponibilidad, N Número de dispositivos AutoMata en el sistema. α Capacidad de almacenamiento por AutoMata. γ Duración del viaje del cliente AutoMata. ST Capacidad total de almacenamiento del sistema AutoMata, ST = N · α. Cuadro 1: Términos y sus definiciones tamaño Si. La frecuencia de acceso al ítem de datos i se denota como fi, con T j=1 fj = 1. Deje que la duración del viaje del cliente AutoMata en consideración sea γ. Ahora definimos la frecuencia normalizada de acceso al ítem de datos i, denotado por Ri, como: Ri = (fi)n T j=1(fj)n ; 0 ≤ n ≤ فارسى (1) El exponente n caracteriza una técnica de replicación particular. Un esquema de replicación de raíz cuadrada se realiza cuando n = 0.5 [5]. Esto sirve como la línea base para la comparación con el caso cuando se despliegan zebroids. Ri se normaliza a un valor entre 0 y 1. El número de réplicas para el dato i, denotado como ri, es: ri = min (N, max (1, Ri·N Si )). Esto capta el caso cuando al menos una copia de cada elemento de datos debe estar presente en la red ad-hoc en todo momento. En los casos en que un elemento de datos se puede perder de la red ad-hoc, esta ecuación se convierte en ri = min (N, max (0, Ri·N Si )). En este caso, es posible que sea necesario satisfacer una solicitud para el elemento de datos perdido mediante la obtención del elemento desde un servidor remoto. La latencia de disponibilidad para un elemento de datos i, denotado como i, se define como la primera vez en la que un cliente AutoMata encontrará la primera réplica del elemento accesible a él. Si esta condición no se cumple, entonces se establece a i. Esto indica que el elemento de datos I no estaba disponible para el cliente durante su viaje. Tenga en cuenta que como hay al menos una réplica en el sistema para cada elemento de datos i, al establecer γ a un gran valor nos aseguramos de que los clientes soliciten cualquier elemento de datos i será satisfecho. Sin embargo, en la mayoría de las circunstancias prácticas γ puede no ser tan grande como para encontrar cada elemento de datos. Estamos interesados en la latencia de disponibilidad observada en todos los datos. Por lo tanto, aumentamos la latencia media de disponibilidad para cada ítem de datos i con su fi para obtener la siguiente latencia ponderada de disponibilidad (?agg) métrica:?agg = T i=1?i · fi A continuación, presentamos nuestro enfoque de solución describiendo cómo se seleccionan los zebroids. 3. ENFOQUE DE SOLUCIÓN 3.1 Zebroids Cuando un cliente hace referencia a un elemento de datos que falta en su almacenamiento local, el despachador identifica todos los coches con una copia del elemento de datos como servidores. A continuación, el despachador obtiene las rutas futuras de todos los coches para una duración de tiempo finito equivalente al tiempo máximo que el cliente está dispuesto a esperar a que su solicitud sea atendido. Utilizando esta información, el despachador programa la ruta de entrega más rápida desde cualquiera de los servidores al cliente utilizando cualquier otro coche como transportistas intermedios. Por lo tanto, determina el conjunto óptimo de decisiones de reenvío 76 que permitirá que el elemento de datos se entreguen al cliente en el mínimo de tiempo. Tenga en cuenta que la latencia a lo largo de la ruta de entrega más rápida que emplea un equipo de relé de z zebroids es similar a la obtenida con el encaminamiento epidémico [19] bajo los supuestos de almacenamiento infinito y ninguna interferencia. Una simple instanciación de z-relay zebroids se produce cuando z = 1 y la solicitud de los clientes desencadena una transferencia de una copia del elemento de datos solicitado de un servidor a un zebroid en su vecindad. Tal zebroideo se denomina cebroide uniinstantáneo. En algunos casos, el expedidor podría tener información inexacta sobre las rutas de los coches. Por lo tanto, un zebroid programado sobre la base de esta información inexacta puede no reunirse con su cliente objetivo. Para minimizar la probabilidad de tales escenarios, el despachador puede programar múltiples zebroids. Esto puede acarrear gastos generales adicionales debido a la utilización redundante de recursos para obtener las mismas mejoras de latencia. El tiempo necesario para transferir un elemento de datos de un servidor a un zebroid depende de su tamaño y del ancho de banda del enlace disponible. Con elementos de datos pequeños, es razonable suponer que este tiempo de transferencia es pequeño, especialmente en presencia del plano de datos de alto ancho de banda. Los elementos de datos grandes se pueden dividir en trozos más pequeños que permiten al despachador programar uno o más zebroids para entregar cada trozo a un cliente de una manera oportuna. Esta sigue siendo una dirección de investigación futura. Inicialmente, el número de réplicas para cada ítem de datos puede ser calculado usando la Ecuación 1. Este esquema calcula el número de réplicas de datos en función de su popularidad. Es estática porque el número de réplicas en el sistema no cambia y no se realizan reemplazos. Por lo tanto, esto se conoce como el ambiente de los nozebroids. Cuantificamos el desempeño de las diversas políticas de reemplazo con referencia a esta línea base que no emplea zebroids. Uno puede asumir una fase de arranque en frío, donde inicialmente sólo una o pocas copias de cada elemento de datos existen en el sistema. Muchas ranuras de almacenamiento de los coches pueden estar desocupados. Cuando los coches se encuentran entre sí, construyen nuevas réplicas de algunos elementos de datos seleccionados para ocupar los huecos vacíos. El procedimiento de selección puede consistir en elegir los datos de manera uniforme al azar. Nuevas réplicas se crean siempre y cuando un coche tiene un cierto umbral de su almacenamiento desocupado. Eventualmente, la mayoría de la capacidad de almacenamiento de un coche se agotará. 3.2 Políticas de reemplazo basadas en el operador Las políticas de reemplazo consideradas en este documento son reactivas ya que una sustitución se produce sólo en respuesta a una solicitud emitida para un determinado elemento de datos. Cuando el almacenamiento local de un zebroid está completamente ocupado, necesita reemplazar uno de sus elementos existentes para llevar el elemento de datos solicitado por el cliente. Para ello, el zebroid debe seleccionar a un candidato apropiado para el desalojo. Este proceso de decisión es análogo al encontrado en la paginación del sistema operativo donde el objetivo es maximizar la relación de acceso a la caché para evitar el retraso del acceso al disco [18]. Las políticas de reemplazo basadas en transportistas empleadas en nuestro estudio son las menos usadas recientemente (LRU), las menos usadas con frecuencia (LFU) y las aleatorias (donde un candidato de desalojo es elegido uniformemente al azar). Hemos considerado variantes locales y globales de las políticas LRU/LFU que determinan si el conocimiento local o global de los contenidos de los coches conocidos en el expedidor se utiliza para la decisión de desalojo en un zebroid (ver [9] para más detalles). Las pólizas de sustitución entrañan los siguientes gastos generales. En primer lugar, la complejidad asociada a la aplicación de una política. En segundo lugar, el ancho de banda utilizado para transferir una copia de un elemento de datos de un servidor al zebroid. En tercer lugar, el número medio de reemplazos realizados por los zebroides. Tenga en cuenta que en el caso de no cebroides no se incurre en gastos generales. Las métricas consideradas en este estudio son la latencia de la disponibilidad agregada, Tenga en cuenta que los despachadores con la ayuda del plano de control pueden asegurarse de que no se pierda ningún elemento de datos del sistema. En otras palabras, al menos una réplica de cada elemento de datos se mantiene en la red ad-hoc en todo momento. En tales casos, aunque un coche puede encontrarse con un cliente solicitante antes que otros servidores, si su almacenamiento local contiene elementos de datos con sólo una copia en el sistema, entonces tal coche no se elige como un zebroid. 4. METODOLOGÍA DE ANÁLISIS Aquí presentamos la metodología de evaluación analítica y algunas aproximaciones como ecuaciones de forma cerrada que capturan las mejoras en la latencia de disponibilidad que se pueden obtener tanto con cebros oneinstantáneos como con z-relay. Primero, presentamos algunos preliminares de nuestra metodología de análisis. • Que N sea el número de coches en la red que realizan una caminata aleatoria en 2D en un toro de G× G. Un coche adicional sirve como un cliente que entrega un total de N + 1 coches. Este modelo de movilidad se ha utilizado ampliamente en la literatura [17, 16] principalmente porque es susceptible de análisis y proporciona una base de referencia para comparar el rendimiento de otros modelos de movilidad. Además, esta clase de modelos de movilidad markoviana se ha utilizado para modelar los movimientos de los vehículos [3, 21]. • Asumimos que todos los coches comienzan desde la distribución estacionaria y realizan caminatas aleatorias independientes. Aunque para escenarios de densidad escasa, la suposición de independencia se mantiene, ya no es válido cuando N se aproxima a G. • Deje que el tamaño del repositorio de ítems de datos de interés sea T. Además, el ítem de datos i tiene réplicas ri. Esto implica que los coches ri, identificados como servidores, tienen una copia de este elemento de datos cuando el cliente solicita el elemento i. Todos los resultados de análisis presentados en esta sección se obtienen asumiendo que el cliente está dispuesto a esperar el tiempo necesario para que su solicitud sea satisfecha (duración del viaje sin límite γ = ­). Con el modelo de movilidad al azar en un torso 2D, hay una garantía de que mientras haya al menos una réplica del elemento de datos solicitado en la red, el cliente se encontrará con esta réplica [2]. Las extensiones al análisis que también consideran las duraciones del viaje finito se pueden obtener en [9]. Considere un escenario en el que no se emplean zebroids. En este caso, la latencia de disponibilidad esperada para el ítem de datos es el tiempo de reunión esperado de la caminata aleatoria realizada por el cliente con cualquiera de las caminatas aleatorias realizadas por los servidores. Aldous et al. [2] muestran que el tiempo de reunión de dos caminatas aleatorias en tal entorno puede modelarse como una distribución exponencial con la media C = c · G · log G, donde la constante c 0,17 para G ≥ 25. El tiempo de reunión, o equivalente a la latencia de la disponibilidad de i, para el cliente que solicita datos i es el momento hasta que se encuentre con cualquiera de estas réplicas ri por primera vez. Se trata también de una distribución exponencial con el siguiente valor esperado (obsérvese que esta formulación es válida sólo para casos escasos cuando G >> ri): فارسىi = cGlogG ri La latencia de disponibilidad agregada sin emplear zebroids es entonces esta expresión promediada sobre todos los ítems de datos, ponderada por su frecuencia de acceso: فارسىagg(no − zeb) = T i=1 fi Por otra parte, esta réplica se genera en el paso de tiempo cuando el cliente emite la solicitud. Que Nc i sea el número total esperado de nodos que están en la misma celda que cualquiera de los servidores ri. Luego, tenemos Nc i = (N − ri) · (1 − (1 − 1 G )ri ) (3) En el modelo analítico, suponemos que Nc i nuevas réplicas se crean, de modo que el número total de réplicas se aumenta a ri + Nc i. La latencia de disponibilidad se reduce ya que es más probable que el cliente cumpla con una réplica anterior. La latencia agregada de disponibilidad esperada en el caso de los cebroides uno-instantáneos es dada por, agg(zeb) = T i=1 fi · c · G · log G ri + Nc i = T i=1 fi · C ri + Nc i (4) Tenga en cuenta que al obtener esta expresión, para facilitar el análisis, hemos asumido que las nuevas réplicas comienzan Así trata a todos los portadores de Nc i de forma independiente, al igual que los servidores originales ri. Como mostraremos a continuación en comparación con las simulaciones, esta aproximación proporciona un límite superior a las mejoras que se pueden obtener porque da lugar a una menor latencia esperada en el cliente. Cabe señalar que el procedimiento mencionado anteriormente producirá una latencia similar a la empleada por un expedidor que emplee cebroides oneinstantáneos (véase la sección 3.1). Dado que el despachador es consciente de todos los movimientos futuros del coche que sólo transferiría el elemento de datos solicitado en un único zebroid, si determina que el zebroid se reunirá con el cliente antes que cualquier otro servidor. Este zebroid seleccionado está incluido en las nuevas réplicas de Nc i. 4.2 z-relay zebroids Para calcular la latencia de disponibilidad esperada con z-relay zebroids, utilizamos un análogo de problema de coloración similar a un enfoque utilizado por Spyropoulos et al. [17]. En [9] se dan detalles del procedimiento para obtener una expresión de forma cerrada. La latencia de disponibilidad agregada (agg) con z-relay zebroids es dada por, agg(zeb) = T i=1 [fi · C N + 1 · 1 N + 1 − ri · (N · log N ri − log (N + 1 − ri))] (5) 5. METODOLOGÍA DE SIMULACIÓN El entorno de simulación considerado en este estudio se compone de vehículos como automóviles que llevan una fracción del repositorio de datos. Un parámetro de precisión de predicción proporciona inherentemente una cierta garantía probabilística sobre la confianza de las predicciones de ruta del automóvil conocidas en el despachador. Un valor del 100% implica que las rutas exactas de todos los coches se conocen en todo momento. Un valor del 70% para este parámetro indica que las rutas previstas para los coches coincidirán con las reales con probabilidad 0.7. Tenga en cuenta que esta probabilidad se extiende a través de las rutas del coche durante toda la duración del viaje. Ahora proporcionamos los preliminares del estudio de simulación y luego describimos los parámetros de configuración utilizados en nuestros experimentos. • Similar a la metodología de análisis, el mapa utilizado es un toro 2D. Un modelo de movilidad Markov que representa una caminata aleatoria 2D imparcial en la superficie del toro describe el movimiento de los coches a través de este toro. • Cada cuadrícula/célula es un estado único de esta cadena Markov. En cada ranura de tiempo, cada coche hace una transición de una celda a cualquiera de sus 8 celdas vecinas. La transición es una función de la ubicación actual del coche y una matriz de transición de probabilidad Q = [qij] donde qij es la probabilidad de transición del estado i al estado j. Solo los coches equipados con AutoMata dentro de la misma celda pueden comunicarse entre sí. • Los parámetros γ,  han sido discretizados y expresados en términos del número de franjas horarias. • Un dispositivo AutoMata no mantiene más de una réplica de un elemento de datos. Esto se debe a que las réplicas adicionales ocupan el almacenamiento sin proporcionar beneficios. • Los cebroides de relé z o uno instantáneos pueden ser empleados por solicitud del cliente para mejorar la latencia. • A menos que se mencione lo contrario, se supone que el parámetro de precisión de la predicción es del 100%. Esto se debe a que este estudio pretende cuantificar el efecto de un gran número de parámetros individualmente sobre la latencia de la disponibilidad. Aquí, establecemos el tamaño de cada elemento de datos, Si, para ser 1. α representa el número de ranuras de almacenamiento por AutoMata. Cada ranura de almacenamiento almacena un elemento de datos. γ representa la duración del viaje de los clientes en términos del número de franjas horarias. Por lo tanto, los posibles valores de latencia de disponibilidad están entre 0 y γ.  se define como el número de franjas horarias después de lo cual un dispositivo cliente AutoMata encontrará una réplica del elemento de datos por primera vez. Si una réplica para el elemento de datos solicitado fue encontrado por el cliente en la primera celda, a continuación, se establece  = 0. Si se trata de un elemento de datos solicitado, el cliente no encontró ninguna copia del elemento de datos solicitado durante todo su viaje. En todas nuestras simulaciones, para la ilustración consideramos un 5 × 5 2D-torus con γ fijado a 10. Nuestros experimentos indican que las tendencias en la escala de resultados a mapas de mayor tamaño. Simulamos una distribución sesgada de acceso a los datos T que obedece a la ley Ziffs con una media de 0.27. Esta distribución corresponde a la venta de entradas de cine en los Estados Unidos [6]. Empleamos un esquema de replicación que asigna réplicas para un elemento de datos en función de la raíz cuadrada de la frecuencia de acceso de ese elemento. Se muestra que el esquema de replicación de raíz cuadrada tiene un rendimiento de latencia competitivo en un gran espacio de parámetros [8]. Las réplicas de elementos de datos se distribuyen uniformemente entre los dispositivos AutoMata. Esto sirve como el caso de la línea base sin cebros. El esquema de raíz cuadrada también proporciona la distribución de réplica inicial cuando se emplean zebroids. Tenga en cuenta que los reemplazos realizados por los zebroids causarán cambios en la distribución de réplica de ítems de datos. Las solicitudes generadas según la distribución Zipf se emiten una a la vez. El coche cliente que emite la solicitud se elige de una manera redonda-robina. Después de un período máximo de γ, se registra la latencia con que se encontró esta solicitud. En todos los resultados de simulación, cada punto es un promedio de 200.000 solicitudes. Además, los intervalos de confianza del 95% determinados para los resultados son bastante ajustados para las métricas de latencia y los gastos generales de reemplazo. Por lo tanto, sólo los presentamos para la métrica que captura la mejora porcentual de la latencia con respecto al caso de no-zebroides. 6. RESULTADOS En esta sección, describimos nuestros resultados de evaluación donde se abordan las siguientes preguntas clave. Con una amplia selección de esquemas de reemplazo disponibles para un zebroid, ¿cuál es su efecto en la latencia de disponibilidad? Una pregunta más central es: Do zebroids provide 78 0 20 40 60 80 100 1.5 2 2.5 3 3.5 Número de coches Latencia de disponibilidad agregada (­agg ) lru_global lfu_global lru_local lfu_local random Figura 1: La figura 1 muestra la latencia de disponibilidad al emplear cebroids uno-instantáneos en función de los valores (N,α), cuando el ¿Cuáles son los gastos generales asociados en el empleo de estos zebroides? ¿Qué sucede con estas mejoras en escenarios donde un despachador puede tener información imperfecta sobre las rutas del automóvil? ¿Cuáles son las compensaciones inherentes entre la densidad del automóvil y el almacenamiento por automóvil en lo que respecta a su efecto combinado e individual sobre la latencia de la disponibilidad en presencia de zebroids? Presentamos análisis simples y simulaciones detalladas para proporcionar respuestas a estas preguntas, así como para obtener información sobre el diseño de sistemas basados en operadores. 6.1 ¿Cómo funciona un esquema de sustitución empleado por un latencia de disponibilidad de impacto zebroideo? Para ilustrarlo, presentamos experimentos de escala en los que se emplean cebroides oneinstantáneos (ver Figura 1). Por escala, queremos decir que α y N se cambian proporcionalmente para mantener el almacenamiento total del sistema, ST, constante. Aquí, T = 50 y ST = 200. Elegimos los siguientes valores de (N,α) = {(20,10), (25,8), (50,4), (100,2)}. La cifra indica que un plan de sustitución al azar muestra un rendimiento competitivo. Esto se debe a varias razones. Recuerde que la distribución de réplica inicial se establece según el esquema de replicación de raíz cuadrada. El esquema de reemplazo aleatorio no altera esta distribución ya que hace que los reemplazos ciegos a la popularidad de un elemento de datos. Sin embargo, los reemplazos causan una reorganización dinámica de los datos a fin de atender mejor a la solicitud activa actual. Además, el patrón de movilidad de los coches es aleatorio, por lo que las ubicaciones desde las que los clientes emiten las solicitudes también son aleatorias y no se conocen a priori en el despachador. Estas conclusiones son importantes porque una política de sustitución aleatoria puede aplicarse de manera descentralizada. Los esquemas rru-global y lfu-global proporcionan un rendimiento de latencia que es peor que aleatorio. Esto se debe a que estas políticas desarrollan rápidamente una preferencia por los elementos de datos más populares, creando así un mayor número de réplicas para ellos. Durante el desalojo, los datos más populares casi nunca se seleccionan como candidatos de reemplazo. En consecuencia, hay menos réplicas para los artículos menos populares. Por lo tanto, la distribución inicial del elemento de datos replica cambios de raíz cuadrada a que se asemeja a replicación lineal. El mayor número de réplicas de las partidas de datos populares proporciona beneficios adicionales marginales, mientras que el menor número de réplicas de las demás partidas de datos perjudica el rendimiento de latencia de estas políticas mundiales. Los esquemas lfu-local y lru-local tienen un rendimiento similar al aleatorio ya que no tienen suficiente historial de solicitudes de datos locales. Especulamos que el desempeño de estas políticas locales se acercará al de sus variantes globales para una historia suficientemente grande de solicitudes de ítems de datos. Debido al rendimiento competitivo demostrado por una política aleatoria, para el resto del documento, presentamos el rendimiento de los zebroids que emplean una política de reemplazo aleatorio. 6.2 ¿Proporcionan los zebroids mejoras significativas en la latencia de disponibilidad? Encontramos que en muchos escenarios que emplean zebroids proporciona mejoras sustanciales en la latencia de la disponibilidad. 6.2.1 Análisis Primero consideramos el caso de los cebroides uno-instantáneos. La Figura 2.a muestra la variación en Łagg en función de N para T = 10 y α = 1 con 10 × 10 toros usando la Ecuación 4. Los ejes x e y se dibujan a una escala de registro. En la figura 2.b se muestra la mejoría en % en el Agg obtenido con cebroides uniinstantáneos. En este caso, sólo el eje x se dibuja a una escala de registro. Para ilustrar, suponemos que los datos T son solicitados uniformemente. Inicialmente, cuando la red es escasa la aproximación analítica para mejoras en la latencia con zebroids, obtenida de las ecuaciones 2 y 4, coincide estrechamente con los resultados de la simulación. Sin embargo, a medida que N aumenta, la suposición de escasez para la que el análisis es válido, a saber, N+G, ya no es cierta. Por lo tanto, las dos curvas divergen rápidamente. El punto en el que las dos curvas se alejan unas de otras corresponde a un valor de Además, como se mencionó anteriormente, el análisis proporciona un límite superior a las mejoras de la latencia, ya que trata de las réplicas recién creadas dadas por Nc i de forma independiente. Sin embargo, estas réplicas de Nc i comienzan desde la misma celda que una de las réplicas de servidor ri. Finalmente, el análisis captura un escenario oneshot donde dada una distribución inicial de réplica de datos, se calcula la latencia de disponibilidad. Las nuevas réplicas creadas no afectan las solicitudes futuras del cliente. Debido a las limitaciones de espacio, aquí, se resumen las observaciones en el caso de z-relay zebroids se emplean. El lector interesado puede obtener más detalles en [9]. Observaciones similares, como el caso cebroideo uniinstantaneo, se aplican ya que las curvas de simulación y análisis comienzan de nuevo a divergir cuando los supuestos de análisis ya no son válidos. Sin embargo, la observación clave aquí es que la mejora de la latencia con z-relay zebroids es significativamente mejor que el caso de cebroids uno-instantáneos, especialmente para escenarios de almacenamiento más bajos. Esto se debe a que en escenarios escasos, los traspasos transitivos entre los zebroides crean un mayor número de réplicas para el ítem de datos solicitado, lo que produce una menor latencia de disponibilidad. Por otra parte, también se observa que la curva de validación de simulación para las mejoras en Łagg con z-relay zebroids se aproxima a la del caso cebroideo uniinstantánea para un almacenamiento más alto (valores de N más altos). Esto se debe a que los cebroides uno-instantáneos son un caso especial de z-relay zebroides. 6.2.2 Simulación Realizamos simulaciones para examinar todo el espectro de almacenamiento obtenido cambiando la densidad del vehículo N o el almacenamiento por coche α para capturar también escenarios en los que no se mantienen las hipótesis de escasez para las que el análisis es válido. Separamos el efecto de N y α capturando la variación de N manteniendo constante α (caso 1) y viceversa (caso 2) tanto con z-relay y cebroides uno-instantáneos. Aquí, establecemos el tamaño del repositorio como T = 25. En el gráfico 3 figura el caso 1 mencionado anteriormente. Se observan tendencias similares con el caso 2, en [9] se dispone de una descripción completa de esos resultados. Con la Figura 3.b, manteniendo constante α, la densidad del coche aumenta inicialmente tiene mayores beneficios de latencia porque el aumento de N introduce más zebroids en el sistema. A medida que N se incrementa aún más, • reduce porque el almacenamiento total en el sistema sube. En consecuencia, el número de réplicas por elemento de datos sube aumentando así el número de servidores 79. Por lo tanto, la política de reemplazo no puede encontrar un zebroid tan a menudo para transportar el elemento de datos solicitado al cliente antes que cualquiera de los servidores. Por otro lado, el aumento del número de servidores beneficia al caso de no-zebroids al reducir a Agg. El efecto neto da lugar a una reducción de los valores más grandes de N. 10 1 10 2 10 3 10 −1 10 0 10 1 10 2 Número de automóviles no-zebroidsanal no-zebroids sim one-instantaneoussim Agregación Disponibilidad Latencia (­agg ) 2.a) Agg 10 1 10 2 10 3 0 10 20 40 50 60 70 80 90 100 Número de automóviles % Mejora Las tendencias mencionadas anteriormente son similares a las obtenidas del análisis. Sin embargo, algo contra-intuitivamente con almacenamiento relativamente más alto del sistema, z-relay zebroids proporcionan mejoras ligeramente más bajas en la latencia en comparación con uno-instantaneous zebroids. Especulamos que esto se debe a las diferentes distribuciones de réplicas de ítems de datos impuestas por ellos. Tenga en cuenta que los reemplazos realizados por los zebroids causan fluctuaciones en estas distribuciones de réplica que pueden afectar futuras solicitudes de clientes. Actualmente estamos explorando opciones adecuadas de parámetros que pueden capturar estas distribuciones de réplicas cambiantes. 6.3 ¿Cuáles son los gastos generales derivados de la mejora de la latencia de los zebroideos? Encontramos que las mejoras en la latencia con zebroids se obtienen con un mínimo de reemplazo de los gastos generales (< 1 por solicitud del cliente). 6.3.1 Análisis Con cebroides uniinstantáneos, para cada solicitud de cliente se emplea un máximo de un cebroide para mejorar la latencia. Por lo tanto, los gastos generales de sustitución por solicitud del cliente pueden ascender a un máximo de uno. Recordemos que para calcular la latencia con una latencia instantánea 0 50 100 150 200 250 350 400 0 1 2 3 4 5 6 Número de coches Latencia de disponibilidad agregada (?agg ) no-zebroids one-instantaneous z-relays 3.a 0 50 100 150 200 250 300 350 400 0 10 20 30 40 50 60 Número de coches % Mejora en?agg wrt no-zebro Ahora un reemplazo sólo se incumple si una de estas réplicas de Nc i de nueva creación se reúne con el cliente antes que cualquiera de los servidores de ri. Que Xri y XNc i respectivamente sean variables aleatorias que capturen el tiempo mínimo hasta que cualquiera de las réplicas de ri y Nc i cumpla con el cliente. Dado que Xri y XNc i se supone que son independientes, por la propiedad de variables aleatorias distribuidas exponencialmente tenemos, Overhead/request = 1 · P(XNc i < Xri ) + 0 · P(Xri ≤ XNc i ) (6) Overhead/request = ri C ri C + Nc i C = ri ri + Nc i (7) Sin embargo, si N  es constante entonces el aumento de las causas N α 80 0 20 40 60 80 100 0 0,05 0,15 0,20 0,25 0,35 0,40 0,45 0,5 Número de coches cebroides instantáneos número medio de reemplazos por solicitud (N=20,α=10) (N=25,α=8) (N=50,α=4) (N=100,α=2) Figura 4: La figura 4 captura el reemplazo de Esto implica que se incurre en un aumento de los gastos generales de sustitución para valores N y α más altos. Por otra parte, cuando ri = N, esto significa que cada coche tiene una réplica de elemento de datos i. Por lo tanto, no se emplean zebroids cuando se solicita este artículo, lo que da lugar a un gasto general/solicitud para este artículo como cero. A continuación, presentamos resultados de simulación que validan nuestra hipótesis de análisis para los gastos generales asociados con el despliegue de cebroides uno-instantáneos. 6.3.2 Simulación En la figura 4 se muestra la superficie de repuesto con cebroides uno-instantáneos cuando se varían (N,α) manteniendo constante el almacenamiento total del sistema. Las tendencias mostradas por la simulación concuerdan con las previstas por el análisis anterior. Sin embargo, el almacenamiento total del sistema puede ser cambiado ya sea por la densidad variable del coche (N) o el almacenamiento por coche (α). Debido a tendencias similares, aquí presentamos el caso cuando α se mantiene constante y N es variada (Figura 5). Referimos al lector a [9] para el caso cuando α es variado y N se mantiene constante. Presentamos un argumento intuitivo para el comportamiento de las curvas superiores de reemplazo de la solicitud. Cuando el almacenamiento es extremadamente escaso de modo que sólo existe una réplica por elemento de datos en la red AutoMata, el número de reemplazos realizados por los zebroids es cero ya que cualquier reemplazo causará que un elemento de datos se pierda del sistema. El despachador garantiza que no se pierda ningún elemento de datos del sistema. En el otro extremo del espectro, si el almacenamiento se vuelve tan abundante que α = T entonces todo el repositorio de elementos de datos se puede replicar en cada coche. El número de reemplazos es de nuevo cero ya que cada solicitud puede ser satisfecha localmente. Un escenario similar ocurre si N se aumenta a un valor tan grande que otro coche con el elemento de datos solicitado siempre está disponible en las proximidades del cliente. Sin embargo, hay un espectro de almacenamiento en el medio donde los reemplazos por los zebroides programados dan lugar a mejoras en el Agg (ver Figura 3). Por otra parte, observamos que para escenarios de almacenamiento escasos, las mejoras más altas con z-relay zebroids se obtienen al costo de un aumento de los gastos generales de reemplazo en comparación con el caso de cebroids uno-instantáneos. Esto se debe a que en el caso anterior, cada uno de estos z zebroids seleccionados a lo largo de la ruta de latencia más baja al cliente necesita realizar un reemplazo. Sin embargo, los gastos generales de sustitución son todavía inferiores a 1 lo que indica que en promedio se necesita menos de un reemplazo por solicitud del cliente, incluso cuando se emplean z-relay zebroids. 0 50 100 150 200 250 300 350 400 0 0,1 0,2 0,3 0,4 0,6 0,7 0,8 0,9 1 Número de coches z-reemplaza uno-instantánea Número medio de reemplazos por solicitud Figura 5: La figura 5 muestra los gastos generales de reemplazo con cebroide para los casos en que N es diferente manteniendo α = 2. 10 20 30 40 50 60 70 80 90 100 0 0,5 1 1,5 2 2,5 3 3,5 4 Porcentaje de predicción no-zebroideos (N=50) uno-instantáneos (N=50) z-relés (N=50) no-zebroideos (N=200) uno-instantáneos (N=200) z-relés (N=200) Disponibilidad agregada Latencia ( 6.4 ¿Qué sucede con la latencia de la disponibilidad con zebroids en escenarios con inexactitudes en las predicciones de la ruta del coche? Encontramos que los zebroids continúan proporcionando mejoras en la latencia de la disponibilidad incluso con menor precisión en las predicciones de la ruta del coche. Utilizamos un único parámetro p para cuantificar la exactitud de las predicciones de la ruta del coche. 6.4.1 Análisis Dado que p representa la probabilidad de que una ruta del automóvil predicha por el expedidor coincida con la actual, por lo tanto, la latencia con los zebroideos puede ser aproximada por, 6.4.2 Simulación En la figura 6 se muestra la variación en el Agg en función de esta métrica de precisión de la predicción de ruta. Observamos una reducción suave en la mejora de 81 en Agg a medida que la métrica de precisión de predicción reduce. Para los zebroids que están programados pero no se reúnen con el cliente debido al error de predicción, etiquetamos tales reemplazos hechos por los zebroids como fallados. Se ve que los reemplazos fallidos aumentan gradualmente a medida que la precisión de la predicción se reduce. 6.5 ¿En qué condiciones se maximizan las mejoras en la latencia de disponibilidad con zebroids? Sorprendentemente, encontramos que las mejoras en la latencia obtenidas con cebroides uno-instantáneos son independientes de la distribución de entrada de la popularidad de los ítems de datos. 6.5.1 Análisis La diferencia fraccionaria (marcada en la letra ) en la latencia entre los cebroides no-zebroideos y los cebroides uno-instantáneos se obtiene a partir de las ecuaciones 2, 3 y 4 de la siguiente forma: T i=1 fi·C ri − T i=1 fi·C ri+(N−ri)·(1−(1− 1 G )ri Let α = 1, haciendo el almacenamiento total en el sistema ST = N. Suponiendo que la distribución de réplica inicial es según el esquema de replicación de raíz cuadrada, tenemos, ri = fi·N T j = 1 fj. Por lo tanto, obtenemos fi = K2 ·r2 i N2, donde K = T j=1 fj. Utilizando esto, junto con la aproximación (1 − x)n 1 − n · x para x pequeña, simplificamos la ecuación anterior para obtener, • = 1 − T i=1 ri 1+ N−ri G T i=1 ri Para determinar cuándo se maximizan las ganancias con cebroides uno-instantáneos, podemos enmarcar un problema de optimización de la siguiente manera: Maximizar •, sujeto a T i Con un esquema de replicación de raíz cuadrada, las mejoras obtenidas con cebroides uniinstantáneos son independientes de la distribución de popularidad de entrada de los ítems de datos. (Ver [9] para la prueba) 6.5.2 Simulación Realizamos simulaciones con dos diferentes distribución de frecuencias de ítems de datos: Uniforme y Zipfian (con media= 0.27). En ambos casos se obtienen mejoras similares de latencia con cebroides uniinstantáneos. Este resultado tiene importantes implicaciones. En casos con popularidad sesgada hacia ciertos ítems de datos, las mejoras agregadas en la latencia en todas las solicitudes de ítems de datos siguen siendo las mismas. Incluso en escenarios en los que la frecuencia de acceso a los datos cambia dinámicamente, los zebroids seguirán proporcionando mejoras similares en la latencia. 7. CONCLUSIONES Y FUTURAS DIRECCIONES DE INVESTIGACIÓN En este estudio, examinamos las mejoras en la latencia que se pueden obtener en presencia de transportistas que entregan un elemento de datos desde un servidor a un cliente. Se cuantificó la variación de la latencia de disponibilidad en función de un rico conjunto de parámetros como la densidad del coche, el almacenamiento por coche, el tamaño de la base de datos de título y las políticas de reemplazo empleadas por los zebroids. A continuación se resumen algunas direcciones clave de investigación en el futuro que pretendemos seguir. Para reflejar mejor la realidad nos gustaría validar las observaciones obtenidas de este estudio con algunos rastros de simulación del mundo real de movimientos vehiculares (por ejemplo usando CORSIM [1]). Esto también servirá como validación para la utilidad del modelo de movilidad Markov utilizado en este estudio. Actualmente estamos analizando el desempeño de los zebroids en un conjunto de datos del mundo real que comprende una red ad-hoc de autobuses que se mueven alrededor de un pequeño barrio en Amherst [4]. Los cebroides también se pueden utilizar para la entrega de datos que transportan información sensible al retraso con una determinada caducidad. Las extensiones a zebroids que satisfacen estos requisitos de aplicación presentan una dirección de investigación futura interesante. 8. AGRADECIMIENTOS Esta investigación fue apoyada en parte por una beca Annenberg y subvenciones NSF numeradas CNS-0435505 (NeTS NOSS), CNS-0347621 (CAREER), y IIS-0307908. 9. REFERENCIAS [1] Administración Federal de Carreteras. Simulación del corredor. Versión 5.1, http://www.ops.fhwa.dot.gov/trafficanalysistools/cors im.htm. [2] D. Aldous y J. Llena. Cadenas de markov reversibles y caminatas aleatorias en gráficos. En preparación. [3] A. Bar-Noy, I. Kessler y M. Sidi. Usuarios móviles: Para actualizar o no actualizar. En IEEE Infocom, 1994. [4] J. Burgess, B. Gallagher, D. Jensen, y B. Levine. MaxProp: Enrutamiento para redes tolerantes a perturbaciones basadas en vehículos. En IEEE Infocom, abril de 2006. [5] E. Cohen y S. Shenker. Estrategias de replicación en redes de pares no estructuradas. En SIGCOMM, 2002. [6] A. Dan, D. Dias, R. Mukherjee, D. Sitaram y R. Tewari. Buffering y Caching en servidores de vídeo a gran escala. En COMPCON, 1995. [7] S. Ghandeharizadeh, S. Kapadia, y B. Krishnamachari. PAVAN: Marco normativo para la disponibilidad de contenidos en las redes ad hoc de vehículos. En VANET, Nueva York, Nueva York, Estados Unidos, 2004. ACM Press. [8] S. Ghandeharizadeh, S. Kapadia, y B. Krishnamachari. Comparación de estrategias de replicación para la disponibilidad de contenido en redes C2P2. En MDM, mayo de 2005. [9] S. Ghandeharizadeh, S. Kapadia, y B. Krishnamachari. Una evaluación de la latencia de disponibilidad en redes de vehículos ad-hoc basadas en el portador. Informe técnico, Departamento de Ciencias de la Computación, Universidad del Sur de California, CENG-2006-1, 2006. [10] S. Ghandeharizadeh y B. Krishnamachari. C2p2: Una red inter pares para servicios de información de automóviles a petición. En Globe. IEEE, 2004. [11] T. Hara. Asignación eficaz de réplicas en redes ad-hoc para mejorar la accesibilidad de datos. En IEEE Infocom, 2001. [12] H. Hayashi, T. Hara, y S. Nishio. Un método de asignación de réplica Adaptarse a los cambios de topología en redes ad-hoc. En DEXA, 2005. [13] P. Juang, H. Oki, Y. Wang, M. Martonosi, L. Peh, y D. Rubenstein. Computación energéticamente eficiente para el seguimiento de vida silvestre: compensaciones de diseño y experiencias tempranas con ZebraNet. Silgarch Comput. Archit. Noticias, 2002. [14] A. Pentland, R. Fletcher y A. Hasson. DakNet: Repensar la conectividad en las naciones en desarrollo. Computadora, 37(1):78-83, 2004. [15] F. Sailhan y V. Issarny. Caché cooperativo en redes ad-hoc. En MDM, 2003. [16] R. Shah, S. Roy, S. Jain y W. Brunette. Mulas de datos: Modelado y análisis de una arquitectura de tres niveles para redes de sensores escasas. Elsevier ad-hoc Networks Journal, 1o de septiembre de 2003. [17] T. Schiropoulos, K. Psounis y C. Raghavendra. Enrutamiento de una sola copia en redes móviles conectadas intermitentemente. En SECON, abril de 2004. [18] A. Tanenbaum. Sistemas operativos modernos, 2a edición, capítulo 4, sección 4.4. Prentice Hall, 2001. [19] A. Vahdat y D. Becker. Ruta epidémica para redes ad-hoc parcialmente conectadas. Informe técnico, Departamento de Informática, Universidad de Duke, 2000. [20] W. Zhao, M. Ammar, y E. Zegura. Un enfoque de ferriing de mensajes para la entrega de datos en redes móviles ad-hoc escasas. En MobiHoc, págs. 187 a 198, Nueva York, NY, Estados Unidos, 2004. ACM Press. [21] M. Zonoozi y P. Dassanayake. Modelado de Movilidad de Usuario y Caracterización del Patrón de Movilidad. Revista IEEE sobre áreas seleccionadas en las comunicaciones, 15:1239-1252, septiembre de 1997. 82 ",
            "error": [
                ""
            ]
        },
        "availability latency": {
            "translated_key": [
                "latencia de disponibilidad",
                "latencia de disponibilidad",
                "latencia de disponibilidad",
                "latencia de disponibilidad",
                "latencia de disponibilidad",
                "latencia de disponibilidad",
                "latencia de disponibilidad",
                "latencia de disponibilidad",
                "latencia de disponibilidad",
                "latencia de disponibilidad",
                "latencia de disponibilidad",
                "latencia de disponibilidad",
                "latencia de disponibilidad",
                "latencia de disponibilidad",
                "latencia de disponibilidad",
                "latencia de disponibilidad",
                "latencia de disponibilidad",
                "agg",
                "agg",
                "latencia de disponibilidad",
                "latencia de disponibilidad",
                "latencia de disponibilidad",
                "latencia de disponibilidad",
                "latencia de disponibilidad",
                "latencia de disponibilidad",
                "latencia de disponibilidad",
                "latencia de disponibilidad",
                "latencia de disponibilidad",
                "latencia de disponibilidad",
                "latencia de disponibilidad",
                "latencia de disponibilidad",
                "latencia de disponibilidad",
                "latencia de disponibilidad",
                "latencia de disponibilidad",
                "latencia de disponibilidad",
                "latencia de disponibilidad",
                "latencia de disponibilidad",
                "latencia de disponibilidad",
                "disponibilidad latencia",
                "latencia de disponibilidad",
                "latencia de disponibilidad",
                "latencia de disponibilidad",
                "latencia de disponibilidad"
            ],
            "translated_annotated_text": "Una evaluación de la latencia de disponibilidad en redes ad hoc vehiculares basadas en portador Shahram Ghandeharizadeh Dept of Computer Science Univ of Southern California Los Angeles, CA 90089, USA shahram@usc.edu Shyam Kapadia Dept of Computer Science Univ of Southern California Los Angeles, CA 90089, USA kapadia@usc.edu Bhaskar Krishna Nuestro entorno de destino utiliza portadores de datos, llamados zebroids, donde un dispositivo móvil lleva un elemento de datos en nombre de un servidor a un cliente, minimizando así su \"latencia de disponibilidad\". En este estudio, se cuantifica la variación de la \"latencia de disponibilidad\" con los zebroideos en función de un rico conjunto de parámetros como la densidad del coche, el almacenamiento por dispositivo, el tamaño del repositorio y las políticas de reemplazo empleadas por los zebroideos. Utilizando análisis y simulaciones extensas, obtenemos ideas novedosas sobre el diseño de sistemas basados en operadores. Se pueden obtener mejoras significativas en la latencia con zebroids a costa de un mínimo gasto general. Estas mejoras se producen incluso en escenarios con menor precisión en las predicciones de las rutas del coche. Dos hallazgos particularmente sorprendentes son: (1) una política de sustitución aleatoria ingenua empleada por los zebroids muestra un rendimiento competitivo, y (2) mejoras de la latencia obtenidas con una instanciación simplificada de zebroids se encuentran robustos a los cambios en la distribución de popularidad de los ítems de datos. Categorías y Subject Descriptores: C.2.4 [Sistemas distribuidos]: Términos Generales del Cliente/Servidor: Algoritmos, Rendimiento, Diseño, Experimentación. 1. INTRODUCCIÓN Los avances tecnológicos en las esferas del almacenamiento y las comunicaciones inalámbricas han hecho posible ahora prever la entrega a petición de datos, por ejemplo, para clips de vídeo y audio, en redes de peer-topeer vehiculares. En trabajos previos, Ghandeharizadeh et al. [10] introduce el concepto de vehículos equipados con un dispositivo Car-to-Car-Peer-toPeer, denominado AutoMata, para el entretenimiento dentro del vehículo. Las características notables de un AutoMata incluyen un dispositivo de almacenamiento masivo que ofrece cientos de gigabytes (GB) de almacenamiento, un procesador rápido y varios tipos de tarjetas de red. Incluso con las unidades de disco actuales de 500 GB, un repositorio de contenido de entretenimiento diverso puede exceder la capacidad de almacenamiento de un solo AutoMata. Tales repositorios constituyen el foco de este estudio. Para intercambiar datos, suponemos que cada AutoMata está configurado con dos tipos de tarjetas de red: 1) una tarjeta de red de baja anchura de banda con un radio-rango largo en el orden de millas que permite a un dispositivo AutoMata comunicarse con una estación celular cercana o WiMax, 2) una tarjeta de red de alta anchura de banda con un radio-rango limitado en el orden de cientos de pies. La conexión de ancho de banda alto admite tasas de datos en el orden de decenas a cientos de megabits por segundo y representa la red ad-hoc peer a peer entre los vehículos. Esto se etiqueta como el plano de datos y se emplea para intercambiar elementos de datos entre dispositivos. La conexión de baja anchura de banda sirve como plano de control, permitiendo a los dispositivos AutoMata intercambiar meta-datos con uno o más servidores centralizados. Esta conexión ofrece anchos de banda en el orden de decenas a cientos de Kilobits por segundo. Los servidores centralizados, denominados despachadores, calculan los calendarios de entrega de datos a lo largo del plano de datos utilizando los metadatos proporcionados. Estos horarios se transmiten a los vehículos participantes que utilizan el avión de control. La viabilidad técnica de tal arquitectura de dos niveles se presenta en [7], con resultados preliminares para demostrar que el ancho de banda del plano de control es suficiente para el intercambio de la información de control necesaria para realizar tal aplicación. En un escenario típico, un dispositivo AutoMata presenta a un pasajero con una lista de elementos de datos1, mostrando tanto el nombre de cada elemento de datos como su \"latencia de disponibilidad\". Este último, denotado como ♥, se define como el momento más temprano en que el cliente encuentra una copia de su elemento de datos solicitado. Un elemento de datos está disponible inmediatamente cuando reside en el almacenamiento local del dispositivo AutoMata que atiende a la solicitud. Debido a las restricciones de almacenamiento, un AutoMata puede no almacenar todo el repositorio. En este caso, \"latencia de disponibilidad\" es el momento desde que el usuario emite una solicitud hasta cuando el AutoMata encuentra otro coche que contiene el elemento de datos referenciado. (Los términos coche y AutoMata se utilizan indistintamente en este estudio.) La \"latencia de disponibilidad\" para un artículo es una función de la ubicación actual del cliente, su destino y ruta de viaje, el modelo de movilidad de los vehículos equipados con AutoMata, el número de réplicas construidas para los diferentes elementos de datos, y la colocación de réplicas de elementos de datos a través de los vehículos. Un método para mejorar la \"latencia de disponibilidad\" es emplear portadores de datos que transportan una réplica del elemento de datos solicitado desde un coche servidor que lo contiene a un cliente que lo solicitó. Estos portadores de datos se denominan zebroids. La selección de cebroides es facilitada por la arquitectura de dos niveles. El plano de control permite la recopilación centralizada de información en un despachador presente en una estación base.2 Algunos ejemplos de control en1 Sin pérdida de generalidad, el término elemento de datos puede ser medios tradicionales como texto o medios continuos como un clip de audio o vídeo. 2 Puede haber despachadores desplegados en un subconjunto de las estaciones de base para la tolerancia a fallos y la robustez. Los distribuidores entre estaciones de base pueden comunicarse a través de la infraestructura cableada. 75 formación son actualmente solicitudes activas, ruta de viaje de los clientes y sus destinos, y caminos de los otros coches. Para cada solicitud del cliente, el despachador puede elegir un conjunto de portadores z que colaboran para transferir un elemento de datos de un servidor a un cliente (z-relay zebroids). Aquí, z es el número de zebroids tales que 0 ≤ z < N, donde N es el número total de coches. Cuando z = 0 no hay portadores, lo que requiere un servidor para entregar el elemento de datos directamente al cliente. De lo contrario, el equipo de relé elegido de z zebroids se entregará los datos de forma transitoria unos a otros para llegar al cliente, reduciendo así la \"latencia de disponibilidad\" (para más detalles, véase la sección 3.1). Para aumentar la robustez, el despachador puede emplear múltiples equipos de relé de portadoras z para cada solicitud. Esto puede ser útil en escenarios en los que el despachador tiene menor precisión de predicción en la información sobre las rutas de los coches. Por último, las restricciones de almacenamiento pueden requerir que un zebroid desaloje elementos de datos existentes de su almacenamiento local para acomodar el elemento solicitado por el cliente. En este estudio, se cuantifican los siguientes factores principales que afectan a la \"latencia de disponibilidad\" en presencia de zebroideos: (i) tamaño del repositorio de datos, (ii) densidad del coche, (iii) capacidad de almacenamiento por coche, (iv) duración del viaje del cliente, (v) esquema de reemplazo empleado por los zebroideos, y (vi) exactitud de las predicciones de la ruta del coche. Para un subconjunto significativo de estos factores, abordamos algunas preguntas clave relativas al uso de zebroids tanto a través del análisis como de simulaciones extensas. Nuestras principales conclusiones son las siguientes. Una política de sustitución aleatoria ingenua empleada por los zebroids muestra un rendimiento competitivo en términos de \"latencia de disponibilidad\". Con esta política, se pueden obtener mejoras sustanciales en la latencia con zebroids con un mínimo de gastos generales de reemplazo. En escenarios más prácticos, donde el despachador tiene información inexacta sobre las rutas del coche, los zebroids continúan proporcionando mejoras de la latencia. Un resultado sorprendente es que los cambios en la popularidad de los ítems de datos no impactan las ganancias de latencia obtenidas con una simple instanciación de z-relay zebroids llamados cebroids uno-instantáneos (ver Sección 3.1). Este estudio sugiere una serie de direcciones interesantes a seguir para obtener una mejor comprensión del diseño de sistemas basados en el portador que mejoren la \"latencia de disponibilidad\". Trabajo relacionado: La replicación en redes móviles ad-hoc ha sido un tema ampliamente estudiado [11, 12, 15]. Sin embargo, ninguno de estos estudios emplea zebroids como portadores de datos para reducir la latencia de las solicitudes de los clientes. Varios estudios novedosos e importantes como ZebraNet [13], DakNet [14], Data Mules [16], Message Ferries [20] y Seek and Focus [17] han analizado factores que afectan a redes conectadas intermitentemente consistentes en portadores de datos similares en espíritu a los zebroideos. Los factores considerados por cada estudio son dictados por su supuesto entorno y aplicación diana. Una característica novedosa de nuestro estudio es el impacto en la \"latencia de disponibilidad\" para un repositorio de datos dado de elementos. En [9] se puede obtener una descripción detallada de las obras relacionadas. El resto de este documento está organizado de la siguiente manera. La sección 2 ofrece una visión general de la terminología junto con los factores que afectan a la \"latencia de disponibilidad\" en presencia de zebroides. En la sección 3 se describe cómo se pueden emplear los cebroides. En la sección 4 se proporciona información detallada sobre la metodología de análisis empleada para captar el desempeño con los zebroids. En la sección 5 se describen los detalles del entorno de simulación utilizado para la evaluación. La sección 6 recoge las preguntas clave examinadas en este estudio y las responde a través de análisis y simulaciones. Por último, en la sección 7 se presentan breves conclusiones y futuras orientaciones de la investigación. 2. SINOPSIS Y TERMINOLOGÍA La Tabla 1 resume la notación de los parámetros utilizados en el artículo. A continuación introducimos algunas terminologías utilizadas en el artículo. Asumir una red de coches N AutoMata equipados, cada uno con capacidad de almacenamiento de α bytes. La capacidad total de almacenamiento del sistema es ST = N. Hay elementos de datos T en la base de datos, cada uno con parámetros de base de datos T Número de elementos de datos. Si Tamaño del ítem de datos i fi Frecuencia de acceso al ítem de datos i. Parámetros de replicación Ri Frecuencia normalizada de acceso al ítem de datos i ri Número de réplicas para ítem de datos i n Caracteriza un esquema de replicación particular. Número de celdas en el mapa (2D-torus). N Número de dispositivos AutoMata en el sistema. α Capacidad de almacenamiento por AutoMata. γ Duración del viaje del cliente AutoMata. ST Capacidad total de almacenamiento del sistema AutoMata, ST = N · α. Cuadro 1: Términos y sus definiciones tamaño Si. La frecuencia de acceso al ítem de datos i se denota como fi, con T j=1 fj = 1. Deje que la duración del viaje del cliente AutoMata en consideración sea γ. Ahora definimos la frecuencia normalizada de acceso al ítem de datos i, denotado por Ri, como: Ri = (fi)n T j=1(fj)n ; 0 ≤ n ≤ فارسى (1) El exponente n caracteriza una técnica de replicación particular. Un esquema de replicación de raíz cuadrada se realiza cuando n = 0.5 [5]. Esto sirve como la línea base para la comparación con el caso cuando se despliegan zebroids. Ri se normaliza a un valor entre 0 y 1. El número de réplicas para el dato i, denotado como ri, es: ri = min (N, max (1, Ri·N Si )). Esto capta el caso cuando al menos una copia de cada elemento de datos debe estar presente en la red ad-hoc en todo momento. En los casos en que un elemento de datos se puede perder de la red ad-hoc, esta ecuación se convierte en ri = min (N, max (0, Ri·N Si )). En este caso, es posible que sea necesario satisfacer una solicitud para el elemento de datos perdido mediante la obtención del elemento desde un servidor remoto. La \"latencia de disponibilidad\" para un elemento de datos i, denotado como Łi, se define como el primer momento en el que un cliente AutoMata encontrará la primera réplica del elemento accesible a él. Si esta condición no se cumple, entonces se establece a i. Esto indica que el elemento de datos I no estaba disponible para el cliente durante su viaje. Tenga en cuenta que como hay al menos una réplica en el sistema para cada elemento de datos i, al establecer γ a un gran valor nos aseguramos de que los clientes soliciten cualquier elemento de datos i será satisfecho. Sin embargo, en la mayoría de las circunstancias prácticas γ puede no ser tan grande como para encontrar cada elemento de datos. Estamos interesados en la \"latencia de disponibilidad\" observada en todos los datos. Por lo tanto, aumentamos la \"latencia de disponibilidad\" promedio para cada ítem de datos i con su fi para obtener la siguiente \"latencia de disponibilidad\" ponderada (?agg):?agg = T i=1?i · fi A continuación, presentamos nuestro enfoque de solución describiendo cómo se seleccionan los zebroideos. 3. ENFOQUE DE SOLUCIÓN 3.1 Zebroids Cuando un cliente hace referencia a un elemento de datos que falta en su almacenamiento local, el despachador identifica todos los coches con una copia del elemento de datos como servidores. A continuación, el despachador obtiene las rutas futuras de todos los coches para una duración de tiempo finito equivalente al tiempo máximo que el cliente está dispuesto a esperar a que su solicitud sea atendido. Utilizando esta información, el despachador programa la ruta de entrega más rápida desde cualquiera de los servidores al cliente utilizando cualquier otro coche como transportistas intermedios. Por lo tanto, determina el conjunto óptimo de decisiones de reenvío 76 que permitirá que el elemento de datos se entreguen al cliente en el mínimo de tiempo. Tenga en cuenta que la latencia a lo largo de la ruta de entrega más rápida que emplea un equipo de relé de z zebroids es similar a la obtenida con el encaminamiento epidémico [19] bajo los supuestos de almacenamiento infinito y ninguna interferencia. Una simple instanciación de z-relay zebroids se produce cuando z = 1 y la solicitud de los clientes desencadena una transferencia de una copia del elemento de datos solicitado de un servidor a un zebroid en su vecindad. Tal zebroideo se denomina cebroide uniinstantáneo. En algunos casos, el expedidor podría tener información inexacta sobre las rutas de los coches. Por lo tanto, un zebroid programado sobre la base de esta información inexacta puede no reunirse con su cliente objetivo. Para minimizar la probabilidad de tales escenarios, el despachador puede programar múltiples zebroids. Esto puede acarrear gastos generales adicionales debido a la utilización redundante de recursos para obtener las mismas mejoras de latencia. El tiempo necesario para transferir un elemento de datos de un servidor a un zebroid depende de su tamaño y del ancho de banda del enlace disponible. Con elementos de datos pequeños, es razonable suponer que este tiempo de transferencia es pequeño, especialmente en presencia del plano de datos de alto ancho de banda. Los elementos de datos grandes se pueden dividir en trozos más pequeños que permiten al despachador programar uno o más zebroids para entregar cada trozo a un cliente de una manera oportuna. Esta sigue siendo una dirección de investigación futura. Inicialmente, el número de réplicas para cada ítem de datos puede ser calculado usando la Ecuación 1. Este esquema calcula el número de réplicas de datos en función de su popularidad. Es estática porque el número de réplicas en el sistema no cambia y no se realizan reemplazos. Por lo tanto, esto se conoce como el ambiente de los nozebroids. Cuantificamos el desempeño de las diversas políticas de reemplazo con referencia a esta línea base que no emplea zebroids. Uno puede asumir una fase de arranque en frío, donde inicialmente sólo una o pocas copias de cada elemento de datos existen en el sistema. Muchas ranuras de almacenamiento de los coches pueden estar desocupados. Cuando los coches se encuentran entre sí, construyen nuevas réplicas de algunos elementos de datos seleccionados para ocupar los huecos vacíos. El procedimiento de selección puede consistir en elegir los datos de manera uniforme al azar. Nuevas réplicas se crean siempre y cuando un coche tiene un cierto umbral de su almacenamiento desocupado. Eventualmente, la mayoría de la capacidad de almacenamiento de un coche se agotará. 3.2 Políticas de reemplazo basadas en el operador Las políticas de reemplazo consideradas en este documento son reactivas ya que una sustitución se produce sólo en respuesta a una solicitud emitida para un determinado elemento de datos. Cuando el almacenamiento local de un zebroid está completamente ocupado, necesita reemplazar uno de sus elementos existentes para llevar el elemento de datos solicitado por el cliente. Para ello, el zebroid debe seleccionar a un candidato apropiado para el desalojo. Este proceso de decisión es análogo al encontrado en la paginación del sistema operativo donde el objetivo es maximizar la relación de acceso a la caché para evitar el retraso del acceso al disco [18]. Las políticas de reemplazo basadas en transportistas empleadas en nuestro estudio son las menos usadas recientemente (LRU), las menos usadas con frecuencia (LFU) y las aleatorias (donde un candidato de desalojo es elegido uniformemente al azar). Hemos considerado variantes locales y globales de las políticas LRU/LFU que determinan si el conocimiento local o global de los contenidos de los coches conocidos en el expedidor se utiliza para la decisión de desalojo en un zebroid (ver [9] para más detalles). Las pólizas de sustitución entrañan los siguientes gastos generales. En primer lugar, la complejidad asociada a la aplicación de una política. En segundo lugar, el ancho de banda utilizado para transferir una copia de un elemento de datos de un servidor al zebroid. En tercer lugar, el número medio de reemplazos realizados por los zebroides. Tenga en cuenta que en el caso de no cebroides no se incurre en gastos generales. Las métricas consideradas en el presente estudio son la \"latencia de disponibilidad\" agregada, la \"agg\", la mejora porcentual en la \"agg\" con los zebroides en comparación con el caso de los no zebroides y el número medio de reemplazos incurridos por solicitud del cliente, lo que es un indicador de los gastos generales incurridos por los zebroides. Tenga en cuenta que los despachadores con la ayuda del plano de control pueden asegurarse de que no se pierda ningún elemento de datos del sistema. En otras palabras, al menos una réplica de cada elemento de datos se mantiene en la red ad-hoc en todo momento. En tales casos, aunque un coche puede encontrarse con un cliente solicitante antes que otros servidores, si su almacenamiento local contiene elementos de datos con sólo una copia en el sistema, entonces tal coche no se elige como un zebroid. 4. METODOLOGÍA DE ANÁLISIS Aquí presentamos la metodología de evaluación analítica y algunas aproximaciones como ecuaciones de forma cerrada que capturan las mejoras en la \"latencia de disponibilidad\" que se pueden obtener tanto con cebroides oneinstantáneos como con z-relay. Primero, presentamos algunos preliminares de nuestra metodología de análisis. • Que N sea el número de coches en la red que realizan una caminata aleatoria en 2D en un toro de G× G. Un coche adicional sirve como un cliente que entrega un total de N + 1 coches. Este modelo de movilidad se ha utilizado ampliamente en la literatura [17, 16] principalmente porque es susceptible de análisis y proporciona una base de referencia para comparar el rendimiento de otros modelos de movilidad. Además, esta clase de modelos de movilidad markoviana se ha utilizado para modelar los movimientos de los vehículos [3, 21]. • Asumimos que todos los coches comienzan desde la distribución estacionaria y realizan caminatas aleatorias independientes. Aunque para escenarios de densidad escasa, la suposición de independencia se mantiene, ya no es válido cuando N se aproxima a G. • Deje que el tamaño del repositorio de ítems de datos de interés sea T. Además, el ítem de datos i tiene réplicas ri. Esto implica que los coches ri, identificados como servidores, tienen una copia de este elemento de datos cuando el cliente solicita el elemento i. Todos los resultados de análisis presentados en esta sección se obtienen asumiendo que el cliente está dispuesto a esperar el tiempo necesario para que su solicitud sea satisfecha (duración del viaje sin límite γ = ­). Con el modelo de movilidad al azar en un torso 2D, hay una garantía de que mientras haya al menos una réplica del elemento de datos solicitado en la red, el cliente se encontrará con esta réplica [2]. Las extensiones al análisis que también consideran las duraciones del viaje finito se pueden obtener en [9]. Considere un escenario en el que no se emplean zebroids. En este caso, la \"latencia de disponibilidad\" esperada para el ítem de datos es el tiempo de reunión esperado de la caminata aleatoria realizada por el cliente con cualquiera de las caminatas aleatorias realizadas por los servidores. Aldous et al. [2] muestran que el tiempo de reunión de dos caminatas aleatorias en tal entorno puede modelarse como una distribución exponencial con la media C = c · G · log G, donde la constante c 0,17 para G ≥ 25. La hora de la reunión, o equivalente a la \"latencia de disponibilidad\" para el cliente que solicita datos i es el momento hasta que se encuentra con cualquiera de estas réplicas de ri por primera vez. Esta es también una distribución exponencial con el siguiente valor esperado (obsérvese que esta formulación es válida sólo para casos escasos cuando G >> ri): فارسىi = cGlogG ri El agregado \"latencia de disponibilidad\" sin emplear zebroids es entonces esta expresión promediada sobre todos los ítems de datos, ponderada por su frecuencia de acceso: Por otra parte, esta réplica se genera en el paso de tiempo cuando el cliente emite la solicitud. Que Nc i sea el número total esperado de nodos que están en la misma celda que cualquiera de los servidores ri. Luego, tenemos Nc i = (N − ri) · (1 − (1 − 1 G )ri ) (3) En el modelo analítico, suponemos que Nc i nuevas réplicas se crean, de modo que el número total de réplicas se aumenta a ri + Nc i. La \"latencia de disponibilidad\" se reduce ya que el cliente tiene más probabilidades de cumplir con una réplica anterior. La \"latencia de disponibilidad\" agregada esperada en el caso de cebroides uno-instantáneos es dada entonces por, Łagg(zeb) = T i=1 fi · c · G · log G ri + Nc i = T i=1 fi · C ri + Nc i (4) Tenga en cuenta que al obtener esta expresión, para facilitar el análisis, hemos asumido que las nuevas Así trata a todos los portadores de Nc i de forma independiente, al igual que los servidores originales ri. Como mostraremos a continuación en comparación con las simulaciones, esta aproximación proporciona un límite superior a las mejoras que se pueden obtener porque da lugar a una menor latencia esperada en el cliente. Cabe señalar que el procedimiento mencionado anteriormente producirá una latencia similar a la empleada por un expedidor que emplee cebroides oneinstantáneos (véase la sección 3.1). Dado que el despachador es consciente de todos los movimientos futuros del coche que sólo transferiría el elemento de datos solicitado en un único zebroid, si determina que el zebroid se reunirá con el cliente antes que cualquier otro servidor. Este zebroid seleccionado está incluido en las nuevas réplicas de Nc i. 4.2 z-relay zebroids Para calcular la \"latencia de disponibilidad\" esperada con z-relay zebroids, utilizamos un análogo del problema de coloración similar a un enfoque utilizado por Spyropoulos et al. [17]. En [9] se dan detalles del procedimiento para obtener una expresión de forma cerrada. El agregado de \"latencia de disponibilidad\" (agg) con z-relay zebroids es dado por, agg(zeb) = T i=1 [fi · C N + 1 · 1 N + 1 − ri · (N · log N ri − log (N + 1 − ri))] (5) 5. METODOLOGÍA DE SIMULACIÓN El entorno de simulación considerado en este estudio se compone de vehículos como automóviles que llevan una fracción del repositorio de datos. Un parámetro de precisión de predicción proporciona inherentemente una cierta garantía probabilística sobre la confianza de las predicciones de ruta del automóvil conocidas en el despachador. Un valor del 100% implica que las rutas exactas de todos los coches se conocen en todo momento. Un valor del 70% para este parámetro indica que las rutas previstas para los coches coincidirán con las reales con probabilidad 0.7. Tenga en cuenta que esta probabilidad se extiende a través de las rutas del coche durante toda la duración del viaje. Ahora proporcionamos los preliminares del estudio de simulación y luego describimos los parámetros de configuración utilizados en nuestros experimentos. • Similar a la metodología de análisis, el mapa utilizado es un toro 2D. Un modelo de movilidad Markov que representa una caminata aleatoria 2D imparcial en la superficie del toro describe el movimiento de los coches a través de este toro. • Cada cuadrícula/célula es un estado único de esta cadena Markov. En cada ranura de tiempo, cada coche hace una transición de una celda a cualquiera de sus 8 celdas vecinas. La transición es una función de la ubicación actual del coche y una matriz de transición de probabilidad Q = [qij] donde qij es la probabilidad de transición del estado i al estado j. Solo los coches equipados con AutoMata dentro de la misma celda pueden comunicarse entre sí. • Los parámetros γ,  han sido discretizados y expresados en términos del número de franjas horarias. • Un dispositivo AutoMata no mantiene más de una réplica de un elemento de datos. Esto se debe a que las réplicas adicionales ocupan el almacenamiento sin proporcionar beneficios. • Los cebroides de relé z o uno instantáneos pueden ser empleados por solicitud del cliente para mejorar la latencia. • A menos que se mencione lo contrario, se supone que el parámetro de precisión de la predicción es del 100%. Esto se debe a que este estudio pretende cuantificar el efecto de un gran número de parámetros individualmente sobre la \"latencia de disponibilidad\". Aquí, establecemos el tamaño de cada elemento de datos, Si, para ser 1. α representa el número de ranuras de almacenamiento por AutoMata. Cada ranura de almacenamiento almacena un elemento de datos. γ representa la duración del viaje de los clientes en términos del número de franjas horarias. Por lo tanto, los posibles valores de \"latencia de disponibilidad\" están entre 0 y γ.  se define como el número de franjas horarias después de lo cual un dispositivo cliente AutoMata encontrará una réplica del elemento de datos por primera vez. Si una réplica para el elemento de datos solicitado fue encontrado por el cliente en la primera celda, a continuación, se establece  = 0. Si se trata de un elemento de datos solicitado, el cliente no encontró ninguna copia del elemento de datos solicitado durante todo su viaje. En todas nuestras simulaciones, para la ilustración consideramos un 5 × 5 2D-torus con γ fijado a 10. Nuestros experimentos indican que las tendencias en la escala de resultados a mapas de mayor tamaño. Simulamos una distribución sesgada de acceso a los datos T que obedece a la ley Ziffs con una media de 0.27. Esta distribución corresponde a la venta de entradas de cine en los Estados Unidos [6]. Empleamos un esquema de replicación que asigna réplicas para un elemento de datos en función de la raíz cuadrada de la frecuencia de acceso de ese elemento. Se muestra que el esquema de replicación de raíz cuadrada tiene un rendimiento de latencia competitivo en un gran espacio de parámetros [8]. Las réplicas de elementos de datos se distribuyen uniformemente entre los dispositivos AutoMata. Esto sirve como el caso de la línea base sin cebros. El esquema de raíz cuadrada también proporciona la distribución de réplica inicial cuando se emplean zebroids. Tenga en cuenta que los reemplazos realizados por los zebroids causarán cambios en la distribución de réplica de ítems de datos. Las solicitudes generadas según la distribución Zipf se emiten una a la vez. El coche cliente que emite la solicitud se elige de una manera redonda-robina. Después de un período máximo de γ, se registra la latencia con que se encontró esta solicitud. En todos los resultados de simulación, cada punto es un promedio de 200.000 solicitudes. Además, los intervalos de confianza del 95% determinados para los resultados son bastante ajustados para las métricas de latencia y los gastos generales de reemplazo. Por lo tanto, sólo los presentamos para la métrica que captura la mejora porcentual de la latencia con respecto al caso de no-zebroides. 6. RESULTADOS En esta sección, describimos nuestros resultados de evaluación donde se abordan las siguientes preguntas clave. Con una amplia selección de esquemas de reemplazo disponibles para un zebroid, ¿cuál es su efecto en la \"latencia de disponibilidad\"? Una pregunta más central es: Do zebroids provide 78 0 20 40 60 80 100 1.5 2 2.5 3 3.5 Número de coches Agregado \"latencia de disponibilidad\" (­agg ) lru_global lfu_global lru_local lfu_local random Figura 1: La Figura 1 muestra la \"latencia de disponibilidad\" cuando se emplean cebroids uno-instantáneos en función de los valores ( ¿Cuáles son los gastos generales asociados en el empleo de estos zebroides? ¿Qué sucede con estas mejoras en escenarios donde un despachador puede tener información imperfecta sobre las rutas del automóvil? ¿Qué compensaciones inherentes existen entre la densidad del automóvil y el almacenamiento por automóvil en lo que respecta a su efecto combinado e individual sobre la \"latencia de disponibilidad\" en presencia de zebroids? Presentamos análisis simples y simulaciones detalladas para proporcionar respuestas a estas preguntas, así como para obtener información sobre el diseño de sistemas basados en operadores. 6.1 ¿Cómo un esquema de reemplazo empleado por un impacto zebroide \"latencia de disponibilidad\"? Para ilustrarlo, presentamos experimentos de escala en los que se emplean cebroides oneinstantáneos (ver Figura 1). Por escala, queremos decir que α y N se cambian proporcionalmente para mantener el almacenamiento total del sistema, ST, constante. Aquí, T = 50 y ST = 200. Elegimos los siguientes valores de (N,α) = {(20,10), (25,8), (50,4), (100,2)}. La cifra indica que un plan de sustitución al azar muestra un rendimiento competitivo. Esto se debe a varias razones. Recuerde que la distribución de réplica inicial se establece según el esquema de replicación de raíz cuadrada. El esquema de reemplazo aleatorio no altera esta distribución ya que hace que los reemplazos ciegos a la popularidad de un elemento de datos. Sin embargo, los reemplazos causan una reorganización dinámica de los datos a fin de atender mejor a la solicitud activa actual. Además, el patrón de movilidad de los coches es aleatorio, por lo que las ubicaciones desde las que los clientes emiten las solicitudes también son aleatorias y no se conocen a priori en el despachador. Estas conclusiones son importantes porque una política de sustitución aleatoria puede aplicarse de manera descentralizada. Los esquemas rru-global y lfu-global proporcionan un rendimiento de latencia que es peor que aleatorio. Esto se debe a que estas políticas desarrollan rápidamente una preferencia por los elementos de datos más populares, creando así un mayor número de réplicas para ellos. Durante el desalojo, los datos más populares casi nunca se seleccionan como candidatos de reemplazo. En consecuencia, hay menos réplicas para los artículos menos populares. Por lo tanto, la distribución inicial del elemento de datos replica cambios de raíz cuadrada a que se asemeja a replicación lineal. El mayor número de réplicas de las partidas de datos populares proporciona beneficios adicionales marginales, mientras que el menor número de réplicas de las demás partidas de datos perjudica el rendimiento de latencia de estas políticas mundiales. Los esquemas lfu-local y lru-local tienen un rendimiento similar al aleatorio ya que no tienen suficiente historial de solicitudes de datos locales. Especulamos que el desempeño de estas políticas locales se acercará al de sus variantes globales para una historia suficientemente grande de solicitudes de ítems de datos. Debido al rendimiento competitivo demostrado por una política aleatoria, para el resto del documento, presentamos el rendimiento de los zebroids que emplean una política de reemplazo aleatorio. 6.2 ¿Los cebroides proporcionan mejoras significativas en la \"latencia de disponibilidad\"? Encontramos que en muchos escenarios que emplean zebroids proporciona mejoras sustanciales en la \"latencia de disponibilidad\". 6.2.1 Análisis Primero consideramos el caso de los cebroides uno-instantáneos. La Figura 2.a muestra la variación en Łagg en función de N para T = 10 y α = 1 con 10 × 10 toros usando la Ecuación 4. Los ejes x e y se dibujan a una escala de registro. En la figura 2.b se muestra la mejoría en % en el Agg obtenido con cebroides uniinstantáneos. En este caso, sólo el eje x se dibuja a una escala de registro. Para ilustrar, suponemos que los datos T son solicitados uniformemente. Inicialmente, cuando la red es escasa la aproximación analítica para mejoras en la latencia con zebroids, obtenida de las ecuaciones 2 y 4, coincide estrechamente con los resultados de la simulación. Sin embargo, a medida que N aumenta, la suposición de escasez para la que el análisis es válido, a saber, N+G, ya no es cierta. Por lo tanto, las dos curvas divergen rápidamente. El punto en el que las dos curvas se alejan unas de otras corresponde a un valor de Además, como se mencionó anteriormente, el análisis proporciona un límite superior a las mejoras de la latencia, ya que trata de las réplicas recién creadas dadas por Nc i de forma independiente. Sin embargo, estas réplicas de Nc i comienzan desde la misma celda que una de las réplicas de servidor ri. Finalmente, el análisis captura un escenario oneshot donde, dada una distribución inicial de réplica de ítems de datos, se calcula la \"latencia de disponibilidad\". Las nuevas réplicas creadas no afectan las solicitudes futuras del cliente. Debido a las limitaciones de espacio, aquí, se resumen las observaciones en el caso de z-relay zebroids se emplean. El lector interesado puede obtener más detalles en [9]. Observaciones similares, como el caso cebroideo uniinstantaneo, se aplican ya que las curvas de simulación y análisis comienzan de nuevo a divergir cuando los supuestos de análisis ya no son válidos. Sin embargo, la observación clave aquí es que la mejora de la latencia con z-relay zebroids es significativamente mejor que el caso de cebroids uno-instantáneos, especialmente para escenarios de almacenamiento más bajos. Esto se debe a que en escenarios escasos, los traspasos transitivos entre los zebroides crean un mayor número de réplicas para el ítem de datos solicitado, lo que produce una menor \"latencia de disponibilidad\". Por otra parte, también se observa que la curva de validación de simulación para las mejoras en Łagg con z-relay zebroids se aproxima a la del caso cebroideo uniinstantánea para un almacenamiento más alto (valores de N más altos). Esto se debe a que los cebroides uno-instantáneos son un caso especial de z-relay zebroides. 6.2.2 Simulación Realizamos simulaciones para examinar todo el espectro de almacenamiento obtenido cambiando la densidad del vehículo N o el almacenamiento por coche α para capturar también escenarios en los que no se mantienen las hipótesis de escasez para las que el análisis es válido. Separamos el efecto de N y α capturando la variación de N manteniendo constante α (caso 1) y viceversa (caso 2) tanto con z-relay y cebroides uno-instantáneos. Aquí, establecemos el tamaño del repositorio como T = 25. En el gráfico 3 figura el caso 1 mencionado anteriormente. Se observan tendencias similares con el caso 2, en [9] se dispone de una descripción completa de esos resultados. Con la Figura 3.b, manteniendo constante α, la densidad del coche aumenta inicialmente tiene mayores beneficios de latencia porque el aumento de N introduce más zebroids en el sistema. A medida que N se incrementa aún más, • reduce porque el almacenamiento total en el sistema sube. En consecuencia, el número de réplicas por elemento de datos sube aumentando así el número de servidores 79. Por lo tanto, la política de reemplazo no puede encontrar un zebroid tan a menudo para transportar el elemento de datos solicitado al cliente antes que cualquiera de los servidores. Por otro lado, el aumento del número de servidores beneficia al caso de no-zebroids al reducir a Agg. El efecto neto da lugar a una reducción de los valores más grandes de N. 10 1 10 2 10 3 10 −1 10 0 10 1 10 2 Número de automóviles no-zebroidsanal no-zebroids sim one-instantaneoussim Agregación Disponibilidad Latencia (­agg ) 2.a) Agg 10 1 10 2 10 3 0 10 20 40 50 60 70 80 90 100 Número de automóviles % Mejora Las tendencias mencionadas anteriormente son similares a las obtenidas del análisis. Sin embargo, algo contra-intuitivamente con almacenamiento relativamente más alto del sistema, z-relay zebroids proporcionan mejoras ligeramente más bajas en la latencia en comparación con uno-instantaneous zebroids. Especulamos que esto se debe a las diferentes distribuciones de réplicas de ítems de datos impuestas por ellos. Tenga en cuenta que los reemplazos realizados por los zebroids causan fluctuaciones en estas distribuciones de réplica que pueden afectar futuras solicitudes de clientes. Actualmente estamos explorando opciones adecuadas de parámetros que pueden capturar estas distribuciones de réplicas cambiantes. 6.3 ¿Cuáles son los gastos generales derivados de la mejora de la latencia de los zebroideos? Encontramos que las mejoras en la latencia con zebroids se obtienen con un mínimo de reemplazo de los gastos generales (< 1 por solicitud del cliente). 6.3.1 Análisis Con cebroides uniinstantáneos, para cada solicitud de cliente se emplea un máximo de un cebroide para mejorar la latencia. Por lo tanto, los gastos generales de sustitución por solicitud del cliente pueden ascender a un máximo de uno. Recordemos que para calcular la latencia con una latencia instantánea 0 50 100 150 200 250 350 400 0 1 2 3 4 5 6 Número de automóviles Aggregate \"disponibilidad latencia\" (?agg ) no-zebroids one-instantaneous z-relays 3.a 0 50 100 150 200 250 300 350 400 0 10 20 30 40 50 60 Número de automóviles % Mejora en?agg w Ahora un reemplazo sólo se incumple si una de estas réplicas de Nc i de nueva creación se reúne con el cliente antes que cualquiera de los servidores de ri. Que Xri y XNc i respectivamente sean variables aleatorias que capturen el tiempo mínimo hasta que cualquiera de las réplicas de ri y Nc i cumpla con el cliente. Dado que Xri y XNc i se supone que son independientes, por la propiedad de variables aleatorias distribuidas exponencialmente tenemos, Overhead/request = 1 · P(XNc i < Xri ) + 0 · P(Xri ≤ XNc i ) (6) Overhead/request = ri C ri C + Nc i C = ri ri + Nc i (7) Sin embargo, si N  es constante entonces el aumento de las causas N α 80 0 20 40 60 80 100 0 0,05 0,15 0,20 0,25 0,35 0,40 0,45 0,5 Número de coches cebroides instantáneos número medio de reemplazos por solicitud (N=20,α=10) (N=25,α=8) (N=50,α=4) (N=100,α=2) Figura 4: La figura 4 captura el reemplazo de Esto implica que se incurre en un aumento de los gastos generales de sustitución para valores N y α más altos. Por otra parte, cuando ri = N, esto significa que cada coche tiene una réplica de elemento de datos i. Por lo tanto, no se emplean zebroids cuando se solicita este artículo, lo que da lugar a un gasto general/solicitud para este artículo como cero. A continuación, presentamos resultados de simulación que validan nuestra hipótesis de análisis para los gastos generales asociados con el despliegue de cebroides uno-instantáneos. 6.3.2 Simulación En la figura 4 se muestra la superficie de repuesto con cebroides uno-instantáneos cuando se varían (N,α) manteniendo constante el almacenamiento total del sistema. Las tendencias mostradas por la simulación concuerdan con las previstas por el análisis anterior. Sin embargo, el almacenamiento total del sistema puede ser cambiado ya sea por la densidad variable del coche (N) o el almacenamiento por coche (α). Debido a tendencias similares, aquí presentamos el caso cuando α se mantiene constante y N es variada (Figura 5). Referimos al lector a [9] para el caso cuando α es variado y N se mantiene constante. Presentamos un argumento intuitivo para el comportamiento de las curvas superiores de reemplazo de la solicitud. Cuando el almacenamiento es extremadamente escaso de modo que sólo existe una réplica por elemento de datos en la red AutoMata, el número de reemplazos realizados por los zebroids es cero ya que cualquier reemplazo causará que un elemento de datos se pierda del sistema. El despachador garantiza que no se pierda ningún elemento de datos del sistema. En el otro extremo del espectro, si el almacenamiento se vuelve tan abundante que α = T entonces todo el repositorio de elementos de datos se puede replicar en cada coche. El número de reemplazos es de nuevo cero ya que cada solicitud puede ser satisfecha localmente. Un escenario similar ocurre si N se aumenta a un valor tan grande que otro coche con el elemento de datos solicitado siempre está disponible en las proximidades del cliente. Sin embargo, hay un espectro de almacenamiento en el medio donde los reemplazos por los zebroides programados dan lugar a mejoras en el Agg (ver Figura 3). Por otra parte, observamos que para escenarios de almacenamiento escasos, las mejoras más altas con z-relay zebroids se obtienen al costo de un aumento de los gastos generales de reemplazo en comparación con el caso de cebroids uno-instantáneos. Esto se debe a que en el caso anterior, cada uno de estos z zebroids seleccionados a lo largo de la ruta de latencia más baja al cliente necesita realizar un reemplazo. Sin embargo, los gastos generales de sustitución son todavía inferiores a 1 lo que indica que en promedio se necesita menos de un reemplazo por solicitud del cliente, incluso cuando se emplean z-relay zebroids. 0 50 100 150 200 250 300 350 400 0 0,1 0,2 0,3 0,4 0,6 0,7 0,8 0,9 1 Número de coches z-reemplaza uno-instantánea Número medio de reemplazos por solicitud Figura 5: La figura 5 muestra los gastos generales de reemplazo con cebroide para los casos en que N es diferente manteniendo α = 2. 10 20 30 40 50 60 70 80 90 100 0 0,5 1 1,5 2 2,5 3 3,5 4 Porcentaje de predicción no-zebroideos (N=50) uno-instantáneos (N=50) z-relés (N=50) no-zebroideos (N=200) uno-instantáneos (N=200) z-relés (N=200) Disponibilidad agregada Latencia ( 6.4 ¿Qué sucede con la \"latencia de disponibilidad\" con los zebroideos en escenarios con inexactitudes en las predicciones de la ruta del automóvil? Encontramos que los zebroids continúan proporcionando mejoras en la \"latencia de disponibilidad\" incluso con menor precisión en las predicciones de la ruta del coche. Utilizamos un único parámetro p para cuantificar la exactitud de las predicciones de la ruta del coche. 6.4.1 Análisis Dado que p representa la probabilidad de que una ruta del automóvil predicha por el expedidor coincida con la actual, por lo tanto, la latencia con los zebroideos puede ser aproximada por, 6.4.2 Simulación En la figura 6 se muestra la variación en el Agg en función de esta métrica de precisión de la predicción de ruta. Observamos una reducción suave en la mejora de 81 en Agg a medida que la métrica de precisión de predicción reduce. Para los zebroids que están programados pero no se reúnen con el cliente debido al error de predicción, etiquetamos tales reemplazos hechos por los zebroids como fallados. Se ve que los reemplazos fallidos aumentan gradualmente a medida que la precisión de la predicción se reduce. 6.5 ¿En qué condiciones se maximizan las mejoras en la \"latencia de disponibilidad\" con los zebroides? Sorprendentemente, encontramos que las mejoras en la latencia obtenidas con cebroides uno-instantáneos son independientes de la distribución de entrada de la popularidad de los ítems de datos. 6.5.1 Análisis La diferencia fraccionaria (marcada en la letra ) en la latencia entre los cebroides no-zebroideos y los cebroides uno-instantáneos se obtiene a partir de las ecuaciones 2, 3 y 4 de la siguiente forma: T i=1 fi·C ri − T i=1 fi·C ri+(N−ri)·(1−(1− 1 G )ri Let α = 1, haciendo el almacenamiento total en el sistema ST = N. Suponiendo que la distribución de réplica inicial es según el esquema de replicación de raíz cuadrada, tenemos, ri = fi·N T j = 1 fj. Por lo tanto, obtenemos fi = K2 ·r2 i N2, donde K = T j=1 fj. Utilizando esto, junto con la aproximación (1 − x)n 1 − n · x para x pequeña, simplificamos la ecuación anterior para obtener, • = 1 − T i=1 ri 1+ N−ri G T i=1 ri Para determinar cuándo se maximizan las ganancias con cebroides uno-instantáneos, podemos enmarcar un problema de optimización de la siguiente manera: Maximizar •, sujeto a T i Con un esquema de replicación de raíz cuadrada, las mejoras obtenidas con cebroides uniinstantáneos son independientes de la distribución de popularidad de entrada de los ítems de datos. (Ver [9] para la prueba) 6.5.2 Simulación Realizamos simulaciones con dos diferentes distribución de frecuencias de ítems de datos: Uniforme y Zipfian (con media= 0.27). En ambos casos se obtienen mejoras similares de latencia con cebroides uniinstantáneos. Este resultado tiene importantes implicaciones. En casos con popularidad sesgada hacia ciertos ítems de datos, las mejoras agregadas en la latencia en todas las solicitudes de ítems de datos siguen siendo las mismas. Incluso en escenarios en los que la frecuencia de acceso a los datos cambia dinámicamente, los zebroids seguirán proporcionando mejoras similares en la latencia. 7. CONCLUSIONES Y FUTURAS DIRECCIONES DE INVESTIGACIÓN En este estudio, examinamos las mejoras en la latencia que se pueden obtener en presencia de transportistas que entregan un elemento de datos desde un servidor a un cliente. Se cuantificó la variación de la \"latencia de disponibilidad\" en función de un rico conjunto de parámetros como la densidad del coche, el almacenamiento por coche, el tamaño de la base de datos de título y las políticas de reemplazo empleadas por los zebroids. A continuación se resumen algunas direcciones clave de investigación en el futuro que pretendemos seguir. Para reflejar mejor la realidad nos gustaría validar las observaciones obtenidas de este estudio con algunos rastros de simulación del mundo real de movimientos vehiculares (por ejemplo usando CORSIM [1]). Esto también servirá como validación para la utilidad del modelo de movilidad Markov utilizado en este estudio. Actualmente estamos analizando el desempeño de los zebroids en un conjunto de datos del mundo real que comprende una red ad-hoc de autobuses que se mueven alrededor de un pequeño barrio en Amherst [4]. Los cebroides también se pueden utilizar para la entrega de datos que transportan información sensible al retraso con una determinada caducidad. Las extensiones a zebroids que satisfacen estos requisitos de aplicación presentan una dirección de investigación futura interesante. 8. AGRADECIMIENTOS Esta investigación fue apoyada en parte por una beca Annenberg y subvenciones NSF numeradas CNS-0435505 (NeTS NOSS), CNS-0347621 (CAREER), y IIS-0307908. 9. REFERENCIAS [1] Administración Federal de Carreteras. Simulación del corredor. Versión 5.1, http://www.ops.fhwa.dot.gov/trafficanalysistools/cors im.htm. [2] D. Aldous y J. Llena. Cadenas de markov reversibles y caminatas aleatorias en gráficos. En preparación. [3] A. Bar-Noy, I. Kessler y M. Sidi. Usuarios móviles: Para actualizar o no actualizar. En IEEE Infocom, 1994. [4] J. Burgess, B. Gallagher, D. Jensen, y B. Levine. MaxProp: Enrutamiento para redes tolerantes a perturbaciones basadas en vehículos. En IEEE Infocom, abril de 2006. [5] E. Cohen y S. Shenker. Estrategias de replicación en redes de pares no estructuradas. En SIGCOMM, 2002. [6] A. Dan, D. Dias, R. Mukherjee, D. Sitaram y R. Tewari. Buffering y Caching en servidores de vídeo a gran escala. En COMPCON, 1995. [7] S. Ghandeharizadeh, S. Kapadia, y B. Krishnamachari. PAVAN: Marco normativo para la disponibilidad de contenidos en las redes ad hoc de vehículos. En VANET, Nueva York, Nueva York, Estados Unidos, 2004. ACM Press. [8] S. Ghandeharizadeh, S. Kapadia, y B. Krishnamachari. Comparación de estrategias de replicación para la disponibilidad de contenido en redes C2P2. En MDM, mayo de 2005. [9] S. Ghandeharizadeh, S. Kapadia, y B. Krishnamachari. Una evaluación de la latencia de disponibilidad en redes de vehículos ad-hoc basadas en el portador. Informe técnico, Departamento de Ciencias de la Computación, Universidad del Sur de California, CENG-2006-1, 2006. [10] S. Ghandeharizadeh y B. Krishnamachari. C2p2: Una red inter pares para servicios de información de automóviles a petición. En Globe. IEEE, 2004. [11] T. Hara. Asignación eficaz de réplicas en redes ad-hoc para mejorar la accesibilidad de datos. En IEEE Infocom, 2001. [12] H. Hayashi, T. Hara, y S. Nishio. Un método de asignación de réplica Adaptarse a los cambios de topología en redes ad-hoc. En DEXA, 2005. [13] P. Juang, H. Oki, Y. Wang, M. Martonosi, L. Peh, y D. Rubenstein. Computación energéticamente eficiente para el seguimiento de vida silvestre: compensaciones de diseño y experiencias tempranas con ZebraNet. Silgarch Comput. Archit. Noticias, 2002. [14] A. Pentland, R. Fletcher y A. Hasson. DakNet: Repensar la conectividad en las naciones en desarrollo. Computadora, 37(1):78-83, 2004. [15] F. Sailhan y V. Issarny. Caché cooperativo en redes ad-hoc. En MDM, 2003. [16] R. Shah, S. Roy, S. Jain y W. Brunette. Mulas de datos: Modelado y análisis de una arquitectura de tres niveles para redes de sensores escasas. Elsevier ad-hoc Networks Journal, 1o de septiembre de 2003. [17] T. Schiropoulos, K. Psounis y C. Raghavendra. Enrutamiento de una sola copia en redes móviles conectadas intermitentemente. En SECON, abril de 2004. [18] A. Tanenbaum. Sistemas operativos modernos, 2a edición, capítulo 4, sección 4.4. Prentice Hall, 2001. [19] A. Vahdat y D. Becker. Ruta epidémica para redes ad-hoc parcialmente conectadas. Informe técnico, Departamento de Informática, Universidad de Duke, 2000. [20] W. Zhao, M. Ammar, y E. Zegura. Un enfoque de ferriing de mensajes para la entrega de datos en redes móviles ad-hoc escasas. En MobiHoc, págs. 187 a 198, Nueva York, NY, Estados Unidos, 2004. ACM Press. [21] M. Zonoozi y P. Dassanayake. Modelado de Movilidad de Usuario y Caracterización del Patrón de Movilidad. Revista IEEE sobre áreas seleccionadas en las comunicaciones, 15:1239-1252, septiembre de 1997. 82 ",
            "error": [
                "latencia de disponibilidad",
                "latencia de disponibilidad",
                "latencia de disponibilidad",
                "latencia de disponibilidad",
                "latencia de disponibilidad",
                "latencia de disponibilidad",
                "latencia de disponibilidad",
                "latencia de disponibilidad",
                "latencia de disponibilidad",
                "latencia de disponibilidad",
                "latencia de disponibilidad",
                "latencia de disponibilidad",
                "latencia de disponibilidad",
                "latencia de disponibilidad",
                "latencia de disponibilidad",
                "latencia de disponibilidad",
                "latencia de disponibilidad",
                "agg",
                "agg",
                "latencia de disponibilidad",
                "latencia de disponibilidad",
                "latencia de disponibilidad",
                "latencia de disponibilidad",
                "latencia de disponibilidad",
                "latencia de disponibilidad",
                "latencia de disponibilidad",
                "latencia de disponibilidad",
                "latencia de disponibilidad",
                "latencia de disponibilidad",
                "latencia de disponibilidad",
                "latencia de disponibilidad",
                "latencia de disponibilidad",
                "latencia de disponibilidad",
                "latencia de disponibilidad",
                "latencia de disponibilidad",
                "latencia de disponibilidad",
                "latencia de disponibilidad",
                "latencia de disponibilidad",
                "disponibilidad latencia",
                "latencia de disponibilidad",
                "latencia de disponibilidad",
                "latencia de disponibilidad",
                "latencia de disponibilidad"
            ]
        },
        "car density": {
            "translated_key": "densidad del coche",
            "translated_annotated_text": "Una evaluación de la latencia de disponibilidad en redes ad hoc vehiculares basadas en portador Shahram Ghandeharizadeh Dept of Computer Science Univ of Southern California Los Angeles, CA 90089, USA shahram@usc.edu Shyam Kapadia Dept of Computer Science Univ of Southern California Los Angeles, CA 90089, USA kapadia@usc.edu Bhaskar Krishna Nuestro entorno de destino utiliza portadores de datos, llamados zebroids, donde un dispositivo móvil lleva un elemento de datos en nombre de un servidor a un cliente, minimizando así su latencia de disponibilidad. En este estudio, cuantificamos la variación de la latencia de disponibilidad con los zebroideos en función de un rico conjunto de parámetros como \"densidad del coche\", almacenamiento por dispositivo, tamaño del repositorio y políticas de reemplazo empleadas por los zebroideos. Utilizando análisis y simulaciones extensas, obtenemos ideas novedosas sobre el diseño de sistemas basados en operadores. Se pueden obtener mejoras significativas en la latencia con zebroids a costa de un mínimo gasto general. Estas mejoras se producen incluso en escenarios con menor precisión en las predicciones de las rutas del coche. Dos hallazgos particularmente sorprendentes son: (1) una política de sustitución aleatoria ingenua empleada por los zebroids muestra un rendimiento competitivo, y (2) mejoras de la latencia obtenidas con una instanciación simplificada de zebroids se encuentran robustos a los cambios en la distribución de popularidad de los ítems de datos. Categorías y Subject Descriptores: C.2.4 [Sistemas distribuidos]: Términos Generales del Cliente/Servidor: Algoritmos, Rendimiento, Diseño, Experimentación. 1. INTRODUCCIÓN Los avances tecnológicos en las esferas del almacenamiento y las comunicaciones inalámbricas han hecho posible ahora prever la entrega a petición de datos, por ejemplo, para clips de vídeo y audio, en redes de peer-topeer vehiculares. En trabajos previos, Ghandeharizadeh et al. [10] introduce el concepto de vehículos equipados con un dispositivo Car-to-Car-Peer-toPeer, denominado AutoMata, para el entretenimiento dentro del vehículo. Las características notables de un AutoMata incluyen un dispositivo de almacenamiento masivo que ofrece cientos de gigabytes (GB) de almacenamiento, un procesador rápido y varios tipos de tarjetas de red. Incluso con las unidades de disco actuales de 500 GB, un repositorio de contenido de entretenimiento diverso puede exceder la capacidad de almacenamiento de un solo AutoMata. Tales repositorios constituyen el foco de este estudio. Para intercambiar datos, suponemos que cada AutoMata está configurado con dos tipos de tarjetas de red: 1) una tarjeta de red de baja anchura de banda con un radio-rango largo en el orden de millas que permite a un dispositivo AutoMata comunicarse con una estación celular cercana o WiMax, 2) una tarjeta de red de alta anchura de banda con un radio-rango limitado en el orden de cientos de pies. La conexión de ancho de banda alto admite tasas de datos en el orden de decenas a cientos de megabits por segundo y representa la red ad-hoc peer a peer entre los vehículos. Esto se etiqueta como el plano de datos y se emplea para intercambiar elementos de datos entre dispositivos. La conexión de baja anchura de banda sirve como plano de control, permitiendo a los dispositivos AutoMata intercambiar meta-datos con uno o más servidores centralizados. Esta conexión ofrece anchos de banda en el orden de decenas a cientos de Kilobits por segundo. Los servidores centralizados, denominados despachadores, calculan los calendarios de entrega de datos a lo largo del plano de datos utilizando los metadatos proporcionados. Estos horarios se transmiten a los vehículos participantes que utilizan el avión de control. La viabilidad técnica de tal arquitectura de dos niveles se presenta en [7], con resultados preliminares para demostrar que el ancho de banda del plano de control es suficiente para el intercambio de la información de control necesaria para realizar tal aplicación. En un escenario típico, un dispositivo AutoMata presenta a un pasajero con una lista de elementos de datos1, mostrando tanto el nombre de cada elemento de datos como su latencia de disponibilidad. Este último, denotado como ♥, se define como el momento más temprano en que el cliente encuentra una copia de su elemento de datos solicitado. Un elemento de datos está disponible inmediatamente cuando reside en el almacenamiento local del dispositivo AutoMata que atiende a la solicitud. Debido a las restricciones de almacenamiento, un AutoMata puede no almacenar todo el repositorio. En este caso, la latencia de disponibilidad es el tiempo desde que el usuario emite una solicitud hasta que el AutoMata encuentra otro coche que contiene el elemento de datos referenciado. (Los términos coche y AutoMata se utilizan indistintamente en este estudio.) La latencia de disponibilidad para un artículo es una función de la ubicación actual del cliente, su ruta de destino y viaje, el modelo de movilidad de los vehículos equipados con AutoMata, el número de réplicas construidas para los diferentes elementos de datos, y la colocación de réplicas de elementos de datos a través de los vehículos. Un método para mejorar la latencia de disponibilidad es emplear portadores de datos que transportan una réplica del elemento de datos solicitado desde un coche servidor que lo contiene a un cliente que lo solicitó. Estos portadores de datos se denominan zebroids. La selección de cebroides es facilitada por la arquitectura de dos niveles. El plano de control permite la recopilación centralizada de información en un despachador presente en una estación base.2 Algunos ejemplos de control en1 Sin pérdida de generalidad, el término elemento de datos puede ser medios tradicionales como texto o medios continuos como un clip de audio o vídeo. 2 Puede haber despachadores desplegados en un subconjunto de las estaciones de base para la tolerancia a fallos y la robustez. Los distribuidores entre estaciones de base pueden comunicarse a través de la infraestructura cableada. 75 formación son actualmente solicitudes activas, ruta de viaje de los clientes y sus destinos, y caminos de los otros coches. Para cada solicitud del cliente, el despachador puede elegir un conjunto de portadores z que colaboran para transferir un elemento de datos de un servidor a un cliente (z-relay zebroids). Aquí, z es el número de zebroids tales que 0 ≤ z < N, donde N es el número total de coches. Cuando z = 0 no hay portadores, lo que requiere un servidor para entregar el elemento de datos directamente al cliente. De lo contrario, el equipo de relé elegido de z zebroids se entregará los datos de forma transitoria unos a otros para llegar al cliente, reduciendo así la latencia de la disponibilidad (para más detalles, véase la sección 3.1). Para aumentar la robustez, el despachador puede emplear múltiples equipos de relé de portadoras z para cada solicitud. Esto puede ser útil en escenarios en los que el despachador tiene menor precisión de predicción en la información sobre las rutas de los coches. Por último, las restricciones de almacenamiento pueden requerir que un zebroid desaloje elementos de datos existentes de su almacenamiento local para acomodar el elemento solicitado por el cliente. En este estudio, se cuantifican los siguientes factores principales que afectan a la latencia de la disponibilidad en presencia de zebroids: (i) tamaño del repositorio de datos, (ii) \"densidad del coche\", (iii) capacidad de almacenamiento por coche, (iv) duración del viaje del cliente, (v) esquema de reemplazo empleado por los zebroids, y (vi) exactitud de las predicciones de la ruta del coche. Para un subconjunto significativo de estos factores, abordamos algunas preguntas clave relativas al uso de zebroids tanto a través del análisis como de simulaciones extensas. Nuestras principales conclusiones son las siguientes. Una política de sustitución aleatoria ingenua empleada por los zebroids muestra un rendimiento competitivo en términos de latencia de disponibilidad. Con esta política, se pueden obtener mejoras sustanciales en la latencia con zebroids con un mínimo de gastos generales de reemplazo. En escenarios más prácticos, donde el despachador tiene información inexacta sobre las rutas del coche, los zebroids continúan proporcionando mejoras de la latencia. Un resultado sorprendente es que los cambios en la popularidad de los ítems de datos no impactan las ganancias de latencia obtenidas con una simple instanciación de z-relay zebroids llamados cebroids uno-instantáneos (ver Sección 3.1). Este estudio sugiere una serie de direcciones interesantes a seguir para obtener una mejor comprensión del diseño de sistemas basados en el portador que mejoran la latencia de disponibilidad. Trabajo relacionado: La replicación en redes móviles ad-hoc ha sido un tema ampliamente estudiado [11, 12, 15]. Sin embargo, ninguno de estos estudios emplea zebroids como portadores de datos para reducir la latencia de las solicitudes de los clientes. Varios estudios novedosos e importantes como ZebraNet [13], DakNet [14], Data Mules [16], Message Ferries [20] y Seek and Focus [17] han analizado factores que afectan a redes conectadas intermitentemente consistentes en portadores de datos similares en espíritu a los zebroideos. Los factores considerados por cada estudio son dictados por su supuesto entorno y aplicación diana. Una característica novedosa de nuestro estudio es el impacto en la latencia de disponibilidad para un repositorio de datos dado de elementos. En [9] se puede obtener una descripción detallada de las obras relacionadas. El resto de este documento está organizado de la siguiente manera. En la sección 2 se ofrece una visión general de la terminología junto con los factores que influyen en la latencia de la disponibilidad en presencia de zebroides. En la sección 3 se describe cómo se pueden emplear los cebroides. En la sección 4 se proporciona información detallada sobre la metodología de análisis empleada para captar el desempeño con los zebroids. En la sección 5 se describen los detalles del entorno de simulación utilizado para la evaluación. La sección 6 recoge las preguntas clave examinadas en este estudio y las responde a través de análisis y simulaciones. Por último, en la sección 7 se presentan breves conclusiones y futuras orientaciones de la investigación. 2. SINOPSIS Y TERMINOLOGÍA La Tabla 1 resume la notación de los parámetros utilizados en el artículo. A continuación introducimos algunas terminologías utilizadas en el artículo. Asumir una red de coches N AutoMata equipados, cada uno con capacidad de almacenamiento de α bytes. La capacidad total de almacenamiento del sistema es ST = N. Hay elementos de datos T en la base de datos, cada uno con parámetros de base de datos T Número de elementos de datos. Si Tamaño del ítem de datos i fi Frecuencia de acceso al ítem de datos i. Parámetros de replicación Ri Frecuencia normalizada de acceso al ítem de datos i ri Número de réplicas para ítem de datos i n Caracteriza un esquema de replicación particular. Latencia media de la disponibilidad del elemento de datos i Łagg Latencia agregada de la disponibilidad, N Número de dispositivos AutoMata en el sistema. α Capacidad de almacenamiento por AutoMata. γ Duración del viaje del cliente AutoMata. ST Capacidad total de almacenamiento del sistema AutoMata, ST = N · α. Cuadro 1: Términos y sus definiciones tamaño Si. La frecuencia de acceso al ítem de datos i se denota como fi, con T j=1 fj = 1. Deje que la duración del viaje del cliente AutoMata en consideración sea γ. Ahora definimos la frecuencia normalizada de acceso al ítem de datos i, denotado por Ri, como: Ri = (fi)n T j=1(fj)n ; 0 ≤ n ≤ فارسى (1) El exponente n caracteriza una técnica de replicación particular. Un esquema de replicación de raíz cuadrada se realiza cuando n = 0.5 [5]. Esto sirve como la línea base para la comparación con el caso cuando se despliegan zebroids. Ri se normaliza a un valor entre 0 y 1. El número de réplicas para el dato i, denotado como ri, es: ri = min (N, max (1, Ri·N Si )). Esto capta el caso cuando al menos una copia de cada elemento de datos debe estar presente en la red ad-hoc en todo momento. En los casos en que un elemento de datos se puede perder de la red ad-hoc, esta ecuación se convierte en ri = min (N, max (0, Ri·N Si )). En este caso, es posible que sea necesario satisfacer una solicitud para el elemento de datos perdido mediante la obtención del elemento desde un servidor remoto. La latencia de disponibilidad para un elemento de datos i, denotado como i, se define como la primera vez en la que un cliente AutoMata encontrará la primera réplica del elemento accesible a él. Si esta condición no se cumple, entonces se establece a i. Esto indica que el elemento de datos I no estaba disponible para el cliente durante su viaje. Tenga en cuenta que como hay al menos una réplica en el sistema para cada elemento de datos i, al establecer γ a un gran valor nos aseguramos de que los clientes soliciten cualquier elemento de datos i será satisfecho. Sin embargo, en la mayoría de las circunstancias prácticas γ puede no ser tan grande como para encontrar cada elemento de datos. Estamos interesados en la latencia de disponibilidad observada en todos los datos. Por lo tanto, aumentamos la latencia media de disponibilidad para cada ítem de datos i con su fi para obtener la siguiente latencia ponderada de disponibilidad (?agg) métrica:?agg = T i=1?i · fi A continuación, presentamos nuestro enfoque de solución describiendo cómo se seleccionan los zebroids. 3. ENFOQUE DE SOLUCIÓN 3.1 Zebroids Cuando un cliente hace referencia a un elemento de datos que falta en su almacenamiento local, el despachador identifica todos los coches con una copia del elemento de datos como servidores. A continuación, el despachador obtiene las rutas futuras de todos los coches para una duración de tiempo finito equivalente al tiempo máximo que el cliente está dispuesto a esperar a que su solicitud sea atendido. Utilizando esta información, el despachador programa la ruta de entrega más rápida desde cualquiera de los servidores al cliente utilizando cualquier otro coche como transportistas intermedios. Por lo tanto, determina el conjunto óptimo de decisiones de reenvío 76 que permitirá que el elemento de datos se entreguen al cliente en el mínimo de tiempo. Tenga en cuenta que la latencia a lo largo de la ruta de entrega más rápida que emplea un equipo de relé de z zebroids es similar a la obtenida con el encaminamiento epidémico [19] bajo los supuestos de almacenamiento infinito y ninguna interferencia. Una simple instanciación de z-relay zebroids se produce cuando z = 1 y la solicitud de los clientes desencadena una transferencia de una copia del elemento de datos solicitado de un servidor a un zebroid en su vecindad. Tal zebroideo se denomina cebroide uniinstantáneo. En algunos casos, el expedidor podría tener información inexacta sobre las rutas de los coches. Por lo tanto, un zebroid programado sobre la base de esta información inexacta puede no reunirse con su cliente objetivo. Para minimizar la probabilidad de tales escenarios, el despachador puede programar múltiples zebroids. Esto puede acarrear gastos generales adicionales debido a la utilización redundante de recursos para obtener las mismas mejoras de latencia. El tiempo necesario para transferir un elemento de datos de un servidor a un zebroid depende de su tamaño y del ancho de banda del enlace disponible. Con elementos de datos pequeños, es razonable suponer que este tiempo de transferencia es pequeño, especialmente en presencia del plano de datos de alto ancho de banda. Los elementos de datos grandes se pueden dividir en trozos más pequeños que permiten al despachador programar uno o más zebroids para entregar cada trozo a un cliente de una manera oportuna. Esta sigue siendo una dirección de investigación futura. Inicialmente, el número de réplicas para cada ítem de datos puede ser calculado usando la Ecuación 1. Este esquema calcula el número de réplicas de datos en función de su popularidad. Es estática porque el número de réplicas en el sistema no cambia y no se realizan reemplazos. Por lo tanto, esto se conoce como el ambiente de los nozebroids. Cuantificamos el desempeño de las diversas políticas de reemplazo con referencia a esta línea base que no emplea zebroids. Uno puede asumir una fase de arranque en frío, donde inicialmente sólo una o pocas copias de cada elemento de datos existen en el sistema. Muchas ranuras de almacenamiento de los coches pueden estar desocupados. Cuando los coches se encuentran entre sí, construyen nuevas réplicas de algunos elementos de datos seleccionados para ocupar los huecos vacíos. El procedimiento de selección puede consistir en elegir los datos de manera uniforme al azar. Nuevas réplicas se crean siempre y cuando un coche tiene un cierto umbral de su almacenamiento desocupado. Eventualmente, la mayoría de la capacidad de almacenamiento de un coche se agotará. 3.2 Políticas de reemplazo basadas en el operador Las políticas de reemplazo consideradas en este documento son reactivas ya que una sustitución se produce sólo en respuesta a una solicitud emitida para un determinado elemento de datos. Cuando el almacenamiento local de un zebroid está completamente ocupado, necesita reemplazar uno de sus elementos existentes para llevar el elemento de datos solicitado por el cliente. Para ello, el zebroid debe seleccionar a un candidato apropiado para el desalojo. Este proceso de decisión es análogo al encontrado en la paginación del sistema operativo donde el objetivo es maximizar la relación de acceso a la caché para evitar el retraso del acceso al disco [18]. Las políticas de reemplazo basadas en transportistas empleadas en nuestro estudio son las menos usadas recientemente (LRU), las menos usadas con frecuencia (LFU) y las aleatorias (donde un candidato de desalojo es elegido uniformemente al azar). Hemos considerado variantes locales y globales de las políticas LRU/LFU que determinan si el conocimiento local o global de los contenidos de los coches conocidos en el expedidor se utiliza para la decisión de desalojo en un zebroid (ver [9] para más detalles). Las pólizas de sustitución entrañan los siguientes gastos generales. En primer lugar, la complejidad asociada a la aplicación de una política. En segundo lugar, el ancho de banda utilizado para transferir una copia de un elemento de datos de un servidor al zebroid. En tercer lugar, el número medio de reemplazos realizados por los zebroides. Tenga en cuenta que en el caso de no cebroides no se incurre en gastos generales. Las métricas consideradas en este estudio son la latencia de la disponibilidad agregada, Tenga en cuenta que los despachadores con la ayuda del plano de control pueden asegurarse de que no se pierda ningún elemento de datos del sistema. En otras palabras, al menos una réplica de cada elemento de datos se mantiene en la red ad-hoc en todo momento. En tales casos, aunque un coche puede encontrarse con un cliente solicitante antes que otros servidores, si su almacenamiento local contiene elementos de datos con sólo una copia en el sistema, entonces tal coche no se elige como un zebroid. 4. METODOLOGÍA DE ANÁLISIS Aquí presentamos la metodología de evaluación analítica y algunas aproximaciones como ecuaciones de forma cerrada que capturan las mejoras en la latencia de disponibilidad que se pueden obtener tanto con cebros oneinstantáneos como con z-relay. Primero, presentamos algunos preliminares de nuestra metodología de análisis. • Que N sea el número de coches en la red que realizan una caminata aleatoria en 2D en un toro de G× G. Un coche adicional sirve como un cliente que entrega un total de N + 1 coches. Este modelo de movilidad se ha utilizado ampliamente en la literatura [17, 16] principalmente porque es susceptible de análisis y proporciona una base de referencia para comparar el rendimiento de otros modelos de movilidad. Además, esta clase de modelos de movilidad markoviana se ha utilizado para modelar los movimientos de los vehículos [3, 21]. • Asumimos que todos los coches comienzan desde la distribución estacionaria y realizan caminatas aleatorias independientes. Aunque para escenarios de densidad escasa, la suposición de independencia se mantiene, ya no es válido cuando N se aproxima a G. • Deje que el tamaño del repositorio de ítems de datos de interés sea T. Además, el ítem de datos i tiene réplicas ri. Esto implica que los coches ri, identificados como servidores, tienen una copia de este elemento de datos cuando el cliente solicita el elemento i. Todos los resultados de análisis presentados en esta sección se obtienen asumiendo que el cliente está dispuesto a esperar el tiempo necesario para que su solicitud sea satisfecha (duración del viaje sin límite γ = ­). Con el modelo de movilidad al azar en un torso 2D, hay una garantía de que mientras haya al menos una réplica del elemento de datos solicitado en la red, el cliente se encontrará con esta réplica [2]. Las extensiones al análisis que también consideran las duraciones del viaje finito se pueden obtener en [9]. Considere un escenario en el que no se emplean zebroids. En este caso, la latencia de disponibilidad esperada para el ítem de datos es el tiempo de reunión esperado de la caminata aleatoria realizada por el cliente con cualquiera de las caminatas aleatorias realizadas por los servidores. Aldous et al. [2] muestran que el tiempo de reunión de dos caminatas aleatorias en tal entorno puede modelarse como una distribución exponencial con la media C = c · G · log G, donde la constante c 0,17 para G ≥ 25. El tiempo de reunión, o equivalente a la latencia de la disponibilidad de i, para el cliente que solicita datos i es el momento hasta que se encuentre con cualquiera de estas réplicas ri por primera vez. Se trata también de una distribución exponencial con el siguiente valor esperado (obsérvese que esta formulación es válida sólo para casos escasos cuando G >> ri): فارسىi = cGlogG ri La latencia de disponibilidad agregada sin emplear zebroids es entonces esta expresión promediada sobre todos los ítems de datos, ponderada por su frecuencia de acceso: فارسىagg(no − zeb) = T i=1 fi Por otra parte, esta réplica se genera en el paso de tiempo cuando el cliente emite la solicitud. Que Nc i sea el número total esperado de nodos que están en la misma celda que cualquiera de los servidores ri. Luego, tenemos Nc i = (N − ri) · (1 − (1 − 1 G )ri ) (3) En el modelo analítico, suponemos que Nc i nuevas réplicas se crean, de modo que el número total de réplicas se aumenta a ri + Nc i. La latencia de disponibilidad se reduce ya que es más probable que el cliente cumpla con una réplica anterior. La latencia agregada de disponibilidad esperada en el caso de los cebroides uno-instantáneos es dada por, agg(zeb) = T i=1 fi · c · G · log G ri + Nc i = T i=1 fi · C ri + Nc i (4) Tenga en cuenta que al obtener esta expresión, para facilitar el análisis, hemos asumido que las nuevas réplicas comienzan Así trata a todos los portadores de Nc i de forma independiente, al igual que los servidores originales ri. Como mostraremos a continuación en comparación con las simulaciones, esta aproximación proporciona un límite superior a las mejoras que se pueden obtener porque da lugar a una menor latencia esperada en el cliente. Cabe señalar que el procedimiento mencionado anteriormente producirá una latencia similar a la empleada por un expedidor que emplee cebroides oneinstantáneos (véase la sección 3.1). Dado que el despachador es consciente de todos los movimientos futuros del coche que sólo transferiría el elemento de datos solicitado en un único zebroid, si determina que el zebroid se reunirá con el cliente antes que cualquier otro servidor. Este zebroid seleccionado está incluido en las nuevas réplicas de Nc i. 4.2 z-relay zebroids Para calcular la latencia de disponibilidad esperada con z-relay zebroids, utilizamos un análogo de problema de coloración similar a un enfoque utilizado por Spyropoulos et al. [17]. En [9] se dan detalles del procedimiento para obtener una expresión de forma cerrada. La latencia de disponibilidad agregada (agg) con z-relay zebroids es dada por, agg(zeb) = T i=1 [fi · C N + 1 · 1 N + 1 − ri · (N · log N ri − log (N + 1 − ri))] (5) 5. METODOLOGÍA DE SIMULACIÓN El entorno de simulación considerado en este estudio se compone de vehículos como automóviles que llevan una fracción del repositorio de datos. Un parámetro de precisión de predicción proporciona inherentemente una cierta garantía probabilística sobre la confianza de las predicciones de ruta del automóvil conocidas en el despachador. Un valor del 100% implica que las rutas exactas de todos los coches se conocen en todo momento. Un valor del 70% para este parámetro indica que las rutas previstas para los coches coincidirán con las reales con probabilidad 0.7. Tenga en cuenta que esta probabilidad se extiende a través de las rutas del coche durante toda la duración del viaje. Ahora proporcionamos los preliminares del estudio de simulación y luego describimos los parámetros de configuración utilizados en nuestros experimentos. • Similar a la metodología de análisis, el mapa utilizado es un toro 2D. Un modelo de movilidad Markov que representa una caminata aleatoria 2D imparcial en la superficie del toro describe el movimiento de los coches a través de este toro. • Cada cuadrícula/célula es un estado único de esta cadena Markov. En cada ranura de tiempo, cada coche hace una transición de una celda a cualquiera de sus 8 celdas vecinas. La transición es una función de la ubicación actual del coche y una matriz de transición de probabilidad Q = [qij] donde qij es la probabilidad de transición del estado i al estado j. Solo los coches equipados con AutoMata dentro de la misma celda pueden comunicarse entre sí. • Los parámetros γ,  han sido discretizados y expresados en términos del número de franjas horarias. • Un dispositivo AutoMata no mantiene más de una réplica de un elemento de datos. Esto se debe a que las réplicas adicionales ocupan el almacenamiento sin proporcionar beneficios. • Los cebroides de relé z o uno instantáneos pueden ser empleados por solicitud del cliente para mejorar la latencia. • A menos que se mencione lo contrario, se supone que el parámetro de precisión de la predicción es del 100%. Esto se debe a que este estudio pretende cuantificar el efecto de un gran número de parámetros individualmente sobre la latencia de la disponibilidad. Aquí, establecemos el tamaño de cada elemento de datos, Si, para ser 1. α representa el número de ranuras de almacenamiento por AutoMata. Cada ranura de almacenamiento almacena un elemento de datos. γ representa la duración del viaje de los clientes en términos del número de franjas horarias. Por lo tanto, los posibles valores de latencia de disponibilidad están entre 0 y γ.  se define como el número de franjas horarias después de lo cual un dispositivo cliente AutoMata encontrará una réplica del elemento de datos por primera vez. Si una réplica para el elemento de datos solicitado fue encontrado por el cliente en la primera celda, a continuación, se establece  = 0. Si se trata de un elemento de datos solicitado, el cliente no encontró ninguna copia del elemento de datos solicitado durante todo su viaje. En todas nuestras simulaciones, para la ilustración consideramos un 5 × 5 2D-torus con γ fijado a 10. Nuestros experimentos indican que las tendencias en la escala de resultados a mapas de mayor tamaño. Simulamos una distribución sesgada de acceso a los datos T que obedece a la ley Ziffs con una media de 0.27. Esta distribución corresponde a la venta de entradas de cine en los Estados Unidos [6]. Empleamos un esquema de replicación que asigna réplicas para un elemento de datos en función de la raíz cuadrada de la frecuencia de acceso de ese elemento. Se muestra que el esquema de replicación de raíz cuadrada tiene un rendimiento de latencia competitivo en un gran espacio de parámetros [8]. Las réplicas de elementos de datos se distribuyen uniformemente entre los dispositivos AutoMata. Esto sirve como el caso de la línea base sin cebros. El esquema de raíz cuadrada también proporciona la distribución de réplica inicial cuando se emplean zebroids. Tenga en cuenta que los reemplazos realizados por los zebroids causarán cambios en la distribución de réplica de ítems de datos. Las solicitudes generadas según la distribución Zipf se emiten una a la vez. El coche cliente que emite la solicitud se elige de una manera redonda-robina. Después de un período máximo de γ, se registra la latencia con que se encontró esta solicitud. En todos los resultados de simulación, cada punto es un promedio de 200.000 solicitudes. Además, los intervalos de confianza del 95% determinados para los resultados son bastante ajustados para las métricas de latencia y los gastos generales de reemplazo. Por lo tanto, sólo los presentamos para la métrica que captura la mejora porcentual de la latencia con respecto al caso de no-zebroides. 6. RESULTADOS En esta sección, describimos nuestros resultados de evaluación donde se abordan las siguientes preguntas clave. Con una amplia selección de esquemas de reemplazo disponibles para un zebroid, ¿cuál es su efecto en la latencia de disponibilidad? Una pregunta más central es: Do zebroids provide 78 0 20 40 60 80 100 1.5 2 2.5 3 3.5 Número de coches Latencia de disponibilidad agregada (­agg ) lru_global lfu_global lru_local lfu_local random Figura 1: La figura 1 muestra la latencia de disponibilidad al emplear cebroids uno-instantáneos en función de los valores (N,α), cuando el ¿Cuáles son los gastos generales asociados en el empleo de estos zebroides? ¿Qué sucede con estas mejoras en escenarios donde un despachador puede tener información imperfecta sobre las rutas del automóvil? ¿Qué compensaciones inherentes existen entre la \"densidad del coche\" y el almacenamiento por coche con respecto a su efecto combinado, así como individual sobre la latencia de la disponibilidad en presencia de zebroids? Presentamos análisis simples y simulaciones detalladas para proporcionar respuestas a estas preguntas, así como para obtener información sobre el diseño de sistemas basados en operadores. 6.1 ¿Cómo funciona un esquema de sustitución empleado por un latencia de disponibilidad de impacto zebroideo? Para ilustrarlo, presentamos experimentos de escala en los que se emplean cebroides oneinstantáneos (ver Figura 1). Por escala, queremos decir que α y N se cambian proporcionalmente para mantener el almacenamiento total del sistema, ST, constante. Aquí, T = 50 y ST = 200. Elegimos los siguientes valores de (N,α) = {(20,10), (25,8), (50,4), (100,2)}. La cifra indica que un plan de sustitución al azar muestra un rendimiento competitivo. Esto se debe a varias razones. Recuerde que la distribución de réplica inicial se establece según el esquema de replicación de raíz cuadrada. El esquema de reemplazo aleatorio no altera esta distribución ya que hace que los reemplazos ciegos a la popularidad de un elemento de datos. Sin embargo, los reemplazos causan una reorganización dinámica de los datos a fin de atender mejor a la solicitud activa actual. Además, el patrón de movilidad de los coches es aleatorio, por lo que las ubicaciones desde las que los clientes emiten las solicitudes también son aleatorias y no se conocen a priori en el despachador. Estas conclusiones son importantes porque una política de sustitución aleatoria puede aplicarse de manera descentralizada. Los esquemas rru-global y lfu-global proporcionan un rendimiento de latencia que es peor que aleatorio. Esto se debe a que estas políticas desarrollan rápidamente una preferencia por los elementos de datos más populares, creando así un mayor número de réplicas para ellos. Durante el desalojo, los datos más populares casi nunca se seleccionan como candidatos de reemplazo. En consecuencia, hay menos réplicas para los artículos menos populares. Por lo tanto, la distribución inicial del elemento de datos replica cambios de raíz cuadrada a que se asemeja a replicación lineal. El mayor número de réplicas de las partidas de datos populares proporciona beneficios adicionales marginales, mientras que el menor número de réplicas de las demás partidas de datos perjudica el rendimiento de latencia de estas políticas mundiales. Los esquemas lfu-local y lru-local tienen un rendimiento similar al aleatorio ya que no tienen suficiente historial de solicitudes de datos locales. Especulamos que el desempeño de estas políticas locales se acercará al de sus variantes globales para una historia suficientemente grande de solicitudes de ítems de datos. Debido al rendimiento competitivo demostrado por una política aleatoria, para el resto del documento, presentamos el rendimiento de los zebroids que emplean una política de reemplazo aleatorio. 6.2 ¿Proporcionan los zebroids mejoras significativas en la latencia de disponibilidad? Encontramos que en muchos escenarios que emplean zebroids proporciona mejoras sustanciales en la latencia de la disponibilidad. 6.2.1 Análisis Primero consideramos el caso de los cebroides uno-instantáneos. La Figura 2.a muestra la variación en Łagg en función de N para T = 10 y α = 1 con 10 × 10 toros usando la Ecuación 4. Los ejes x e y se dibujan a una escala de registro. En la figura 2.b se muestra la mejoría en % en el Agg obtenido con cebroides uniinstantáneos. En este caso, sólo el eje x se dibuja a una escala de registro. Para ilustrar, suponemos que los datos T son solicitados uniformemente. Inicialmente, cuando la red es escasa la aproximación analítica para mejoras en la latencia con zebroids, obtenida de las ecuaciones 2 y 4, coincide estrechamente con los resultados de la simulación. Sin embargo, a medida que N aumenta, la suposición de escasez para la que el análisis es válido, a saber, N+G, ya no es cierta. Por lo tanto, las dos curvas divergen rápidamente. El punto en el que las dos curvas se alejan unas de otras corresponde a un valor de Además, como se mencionó anteriormente, el análisis proporciona un límite superior a las mejoras de la latencia, ya que trata de las réplicas recién creadas dadas por Nc i de forma independiente. Sin embargo, estas réplicas de Nc i comienzan desde la misma celda que una de las réplicas de servidor ri. Finalmente, el análisis captura un escenario oneshot donde dada una distribución inicial de réplica de datos, se calcula la latencia de disponibilidad. Las nuevas réplicas creadas no afectan las solicitudes futuras del cliente. Debido a las limitaciones de espacio, aquí, se resumen las observaciones en el caso de z-relay zebroids se emplean. El lector interesado puede obtener más detalles en [9]. Observaciones similares, como el caso cebroideo uniinstantaneo, se aplican ya que las curvas de simulación y análisis comienzan de nuevo a divergir cuando los supuestos de análisis ya no son válidos. Sin embargo, la observación clave aquí es que la mejora de la latencia con z-relay zebroids es significativamente mejor que el caso de cebroids uno-instantáneos, especialmente para escenarios de almacenamiento más bajos. Esto se debe a que en escenarios escasos, los traspasos transitivos entre los zebroides crean un mayor número de réplicas para el ítem de datos solicitado, lo que produce una menor latencia de disponibilidad. Por otra parte, también se observa que la curva de validación de simulación para las mejoras en Łagg con z-relay zebroids se aproxima a la del caso cebroideo uniinstantánea para un almacenamiento más alto (valores de N más altos). Esto se debe a que los cebroides uno-instantáneos son un caso especial de z-relay zebroides. 6.2.2 Simulación Realizamos simulaciones para examinar todo el espectro de almacenamiento obtenido cambiando la \"densidad del coche\" N o el almacenamiento por coche α para capturar también escenarios en los que no se mantienen las hipótesis de escasez para las que el análisis es válido. Separamos el efecto de N y α capturando la variación de N manteniendo constante α (caso 1) y viceversa (caso 2) tanto con z-relay y cebroides uno-instantáneos. Aquí, establecemos el tamaño del repositorio como T = 25. En el gráfico 3 figura el caso 1 mencionado anteriormente. Se observan tendencias similares con el caso 2, en [9] se dispone de una descripción completa de esos resultados. Con la Figura 3.b, manteniendo constante α, el aumento inicial de la \"densidad del coche\" tiene mayores beneficios de latencia porque el aumento de N introduce más zebroids en el sistema. A medida que N se incrementa aún más, • reduce porque el almacenamiento total en el sistema sube. En consecuencia, el número de réplicas por elemento de datos sube aumentando así el número de servidores 79. Por lo tanto, la política de reemplazo no puede encontrar un zebroid tan a menudo para transportar el elemento de datos solicitado al cliente antes que cualquiera de los servidores. Por otro lado, el aumento del número de servidores beneficia al caso de no-zebroids al reducir a Agg. El efecto neto da lugar a una reducción de los valores más grandes de N. 10 1 10 2 10 3 10 −1 10 0 10 1 10 2 Número de automóviles no-zebroidsanal no-zebroids sim one-instantaneoussim Agregación Disponibilidad Latencia (­agg ) 2.a) Agg 10 1 10 2 10 3 0 10 20 40 50 60 70 80 90 100 Número de automóviles % Mejora Las tendencias mencionadas anteriormente son similares a las obtenidas del análisis. Sin embargo, algo contra-intuitivamente con almacenamiento relativamente más alto del sistema, z-relay zebroids proporcionan mejoras ligeramente más bajas en la latencia en comparación con uno-instantaneous zebroids. Especulamos que esto se debe a las diferentes distribuciones de réplicas de ítems de datos impuestas por ellos. Tenga en cuenta que los reemplazos realizados por los zebroids causan fluctuaciones en estas distribuciones de réplica que pueden afectar futuras solicitudes de clientes. Actualmente estamos explorando opciones adecuadas de parámetros que pueden capturar estas distribuciones de réplicas cambiantes. 6.3 ¿Cuáles son los gastos generales derivados de la mejora de la latencia de los zebroideos? Encontramos que las mejoras en la latencia con zebroids se obtienen con un mínimo de reemplazo de los gastos generales (< 1 por solicitud del cliente). 6.3.1 Análisis Con cebroides uniinstantáneos, para cada solicitud de cliente se emplea un máximo de un cebroide para mejorar la latencia. Por lo tanto, los gastos generales de sustitución por solicitud del cliente pueden ascender a un máximo de uno. Recordemos que para calcular la latencia con una latencia instantánea 0 50 100 150 200 250 350 400 0 1 2 3 4 5 6 Número de coches Latencia de disponibilidad agregada (­agg ) no-zebroids one−instantaneous z−relays 3.a 0 50 100 150 200 250 300 350 400 0 10 20 30 40 50 60 Número de coches % Mejora en ­agg wrt no−zebro Ahora un reemplazo sólo se incumple si una de estas réplicas de Nc i de nueva creación se reúne con el cliente antes que cualquiera de los servidores de ri. Que Xri y XNc i respectivamente sean variables aleatorias que capturen el tiempo mínimo hasta que cualquiera de las réplicas de ri y Nc i cumpla con el cliente. Dado que Xri y XNc i se supone que son independientes, por la propiedad de variables aleatorias distribuidas exponencialmente tenemos, Overhead/request = 1 · P(XNc i < Xri ) + 0 · P(Xri ≤ XNc i ) (6) Overhead/request = ri C ri C + Nc i C = ri ri + Nc i (7) Sin embargo, si N  es constante entonces el aumento de las causas N α 80 0 20 40 60 80 100 0 0,05 0,15 0,20 0,25 0,35 0,40 0,45 0,5 Número de coches cebroides instantáneos número medio de reemplazos por solicitud (N=20,α=10) (N=25,α=8) (N=50,α=4) (N=100,α=2) Figura 4: La figura 4 captura el reemplazo de Esto implica que se incurre en un aumento de los gastos generales de sustitución para valores N y α más altos. Por otra parte, cuando ri = N, esto significa que cada coche tiene una réplica de elemento de datos i. Por lo tanto, no se emplean zebroids cuando se solicita este artículo, lo que da lugar a un gasto general/solicitud para este artículo como cero. A continuación, presentamos resultados de simulación que validan nuestra hipótesis de análisis para los gastos generales asociados con el despliegue de cebroides uno-instantáneos. 6.3.2 Simulación En la figura 4 se muestra la superficie de repuesto con cebroides uno-instantáneos cuando se varían (N,α) manteniendo constante el almacenamiento total del sistema. Las tendencias mostradas por la simulación concuerdan con las previstas por el análisis anterior. Sin embargo, el almacenamiento total del sistema se puede cambiar ya sea variando la \"densidad del coche\" (N) o el almacenamiento por coche (α). Debido a tendencias similares, aquí presentamos el caso cuando α se mantiene constante y N es variada (Figura 5). Referimos al lector a [9] para el caso cuando α es variado y N se mantiene constante. Presentamos un argumento intuitivo para el comportamiento de las curvas superiores de reemplazo de la solicitud. Cuando el almacenamiento es extremadamente escaso de modo que sólo existe una réplica por elemento de datos en la red AutoMata, el número de reemplazos realizados por los zebroids es cero ya que cualquier reemplazo causará que un elemento de datos se pierda del sistema. El despachador garantiza que no se pierda ningún elemento de datos del sistema. En el otro extremo del espectro, si el almacenamiento se vuelve tan abundante que α = T entonces todo el repositorio de elementos de datos se puede replicar en cada coche. El número de reemplazos es de nuevo cero ya que cada solicitud puede ser satisfecha localmente. Un escenario similar ocurre si N se aumenta a un valor tan grande que otro coche con el elemento de datos solicitado siempre está disponible en las proximidades del cliente. Sin embargo, hay un espectro de almacenamiento en el medio donde los reemplazos por los zebroides programados dan lugar a mejoras en el Agg (ver Figura 3). Por otra parte, observamos que para escenarios de almacenamiento escasos, las mejoras más altas con z-relay zebroids se obtienen al costo de un aumento de los gastos generales de reemplazo en comparación con el caso de cebroids uno-instantáneos. Esto se debe a que en el caso anterior, cada uno de estos z zebroids seleccionados a lo largo de la ruta de latencia más baja al cliente necesita realizar un reemplazo. Sin embargo, los gastos generales de sustitución son todavía inferiores a 1 lo que indica que en promedio se necesita menos de un reemplazo por solicitud del cliente, incluso cuando se emplean z-relay zebroids. 0 50 100 150 200 250 300 350 400 0 0,1 0,2 0,3 0,4 0,6 0,7 0,8 0,9 1 Número de coches z-reemplaza uno-instantánea Número medio de reemplazos por solicitud Figura 5: La figura 5 muestra los gastos generales de reemplazo con cebroide para los casos en que N es diferente manteniendo α = 2. 10 20 30 40 50 60 70 80 90 100 0 0,5 1 1,5 2 2,5 3 3,5 4 Porcentaje de predicción no-zebroideos (N=50) uno-instantáneos (N=50) z-relés (N=50) no-zebroideos (N=200) uno-instantáneos (N=200) z-relés (N=200) Disponibilidad agregada Latencia ( 6.4 ¿Qué sucede con la latencia de la disponibilidad con zebroids en escenarios con inexactitudes en las predicciones de la ruta del coche? Encontramos que los zebroids continúan proporcionando mejoras en la latencia de la disponibilidad incluso con menor precisión en las predicciones de la ruta del coche. Utilizamos un único parámetro p para cuantificar la exactitud de las predicciones de la ruta del coche. 6.4.1 Análisis Dado que p representa la probabilidad de que una ruta del automóvil predicha por el expedidor coincida con la actual, por lo tanto, la latencia con los zebroideos puede ser aproximada por, 6.4.2 Simulación En la figura 6 se muestra la variación en el Agg en función de esta métrica de precisión de la predicción de ruta. Observamos una reducción suave en la mejora de 81 en Agg a medida que la métrica de precisión de predicción reduce. Para los zebroids que están programados pero no se reúnen con el cliente debido al error de predicción, etiquetamos tales reemplazos hechos por los zebroids como fallados. Se ve que los reemplazos fallidos aumentan gradualmente a medida que la precisión de la predicción se reduce. 6.5 ¿En qué condiciones se maximizan las mejoras en la latencia de disponibilidad con zebroids? Sorprendentemente, encontramos que las mejoras en la latencia obtenidas con cebroides uno-instantáneos son independientes de la distribución de entrada de la popularidad de los ítems de datos. 6.5.1 Análisis La diferencia fraccionaria (marcada en la letra ) en la latencia entre los cebroides no-zebroideos y los cebroides uno-instantáneos se obtiene a partir de las ecuaciones 2, 3 y 4 de la siguiente forma: T i=1 fi·C ri − T i=1 fi·C ri+(N−ri)·(1−(1− 1 G )ri Let α = 1, haciendo el almacenamiento total en el sistema ST = N. Suponiendo que la distribución de réplica inicial es según el esquema de replicación de raíz cuadrada, tenemos, ri = fi·N T j = 1 fj. Por lo tanto, obtenemos fi = K2 ·r2 i N2, donde K = T j=1 fj. Utilizando esto, junto con la aproximación (1 − x)n 1 − n · x para x pequeña, simplificamos la ecuación anterior para obtener, • = 1 − T i=1 ri 1+ N−ri G T i=1 ri Para determinar cuándo se maximizan las ganancias con cebroides uno-instantáneos, podemos enmarcar un problema de optimización de la siguiente manera: Maximizar •, sujeto a T i Con un esquema de replicación de raíz cuadrada, las mejoras obtenidas con cebroides uniinstantáneos son independientes de la distribución de popularidad de entrada de los ítems de datos. (Ver [9] para la prueba) 6.5.2 Simulación Realizamos simulaciones con dos diferentes distribución de frecuencias de ítems de datos: Uniforme y Zipfian (con media= 0.27). En ambos casos se obtienen mejoras similares de latencia con cebroides uniinstantáneos. Este resultado tiene importantes implicaciones. En casos con popularidad sesgada hacia ciertos ítems de datos, las mejoras agregadas en la latencia en todas las solicitudes de ítems de datos siguen siendo las mismas. Incluso en escenarios en los que la frecuencia de acceso a los datos cambia dinámicamente, los zebroids seguirán proporcionando mejoras similares en la latencia. 7. CONCLUSIONES Y FUTURAS DIRECCIONES DE INVESTIGACIÓN En este estudio, examinamos las mejoras en la latencia que se pueden obtener en presencia de transportistas que entregan un elemento de datos desde un servidor a un cliente. Se cuantificó la variación de la latencia de disponibilidad en función de un rico conjunto de parámetros tales como \"densidad del coche\", almacenamiento por coche, tamaño de la base de datos de título, y políticas de reemplazo empleadas por zebroids. A continuación se resumen algunas direcciones clave de investigación en el futuro que pretendemos seguir. Para reflejar mejor la realidad nos gustaría validar las observaciones obtenidas de este estudio con algunos rastros de simulación del mundo real de movimientos vehiculares (por ejemplo usando CORSIM [1]). Esto también servirá como validación para la utilidad del modelo de movilidad Markov utilizado en este estudio. Actualmente estamos analizando el desempeño de los zebroids en un conjunto de datos del mundo real que comprende una red ad-hoc de autobuses que se mueven alrededor de un pequeño barrio en Amherst [4]. Los cebroides también se pueden utilizar para la entrega de datos que transportan información sensible al retraso con una determinada caducidad. Las extensiones a zebroids que satisfacen estos requisitos de aplicación presentan una dirección de investigación futura interesante. 8. AGRADECIMIENTOS Esta investigación fue apoyada en parte por una beca Annenberg y subvenciones NSF numeradas CNS-0435505 (NeTS NOSS), CNS-0347621 (CAREER), y IIS-0307908. 9. REFERENCIAS [1] Administración Federal de Carreteras. Simulación del corredor. Versión 5.1, http://www.ops.fhwa.dot.gov/trafficanalysistools/cors im.htm. [2] D. Aldous y J. Llena. Cadenas de markov reversibles y caminatas aleatorias en gráficos. En preparación. [3] A. Bar-Noy, I. Kessler y M. Sidi. Usuarios móviles: Para actualizar o no actualizar. En IEEE Infocom, 1994. [4] J. Burgess, B. Gallagher, D. Jensen, y B. Levine. MaxProp: Enrutamiento para redes tolerantes a perturbaciones basadas en vehículos. En IEEE Infocom, abril de 2006. [5] E. Cohen y S. Shenker. Estrategias de replicación en redes de pares no estructuradas. En SIGCOMM, 2002. [6] A. Dan, D. Dias, R. Mukherjee, D. Sitaram y R. Tewari. Buffering y Caching en servidores de vídeo a gran escala. En COMPCON, 1995. [7] S. Ghandeharizadeh, S. Kapadia, y B. Krishnamachari. PAVAN: Marco normativo para la disponibilidad de contenidos en las redes ad hoc de vehículos. En VANET, Nueva York, Nueva York, Estados Unidos, 2004. ACM Press. [8] S. Ghandeharizadeh, S. Kapadia, y B. Krishnamachari. Comparación de estrategias de replicación para la disponibilidad de contenido en redes C2P2. En MDM, mayo de 2005. [9] S. Ghandeharizadeh, S. Kapadia, y B. Krishnamachari. Una evaluación de la latencia de disponibilidad en redes de vehículos ad-hoc basadas en el portador. Informe técnico, Departamento de Ciencias de la Computación, Universidad del Sur de California, CENG-2006-1, 2006. [10] S. Ghandeharizadeh y B. Krishnamachari. C2p2: Una red inter pares para servicios de información de automóviles a petición. En Globe. IEEE, 2004. [11] T. Hara. Asignación eficaz de réplicas en redes ad-hoc para mejorar la accesibilidad de datos. En IEEE Infocom, 2001. [12] H. Hayashi, T. Hara, y S. Nishio. Un método de asignación de réplica Adaptarse a los cambios de topología en redes ad-hoc. En DEXA, 2005. [13] P. Juang, H. Oki, Y. Wang, M. Martonosi, L. Peh, y D. Rubenstein. Computación energéticamente eficiente para el seguimiento de vida silvestre: compensaciones de diseño y experiencias tempranas con ZebraNet. Silgarch Comput. Archit. Noticias, 2002. [14] A. Pentland, R. Fletcher y A. Hasson. DakNet: Repensar la conectividad en las naciones en desarrollo. Computadora, 37(1):78-83, 2004. [15] F. Sailhan y V. Issarny. Caché cooperativo en redes ad-hoc. En MDM, 2003. [16] R. Shah, S. Roy, S. Jain y W. Brunette. Mulas de datos: Modelado y análisis de una arquitectura de tres niveles para redes de sensores escasas. Elsevier ad-hoc Networks Journal, 1o de septiembre de 2003. [17] T. Schiropoulos, K. Psounis y C. Raghavendra. Enrutamiento de una sola copia en redes móviles conectadas intermitentemente. En SECON, abril de 2004. [18] A. Tanenbaum. Sistemas operativos modernos, 2a edición, capítulo 4, sección 4.4. Prentice Hall, 2001. [19] A. Vahdat y D. Becker. Ruta epidémica para redes ad-hoc parcialmente conectadas. Informe técnico, Departamento de Informática, Universidad de Duke, 2000. [20] W. Zhao, M. Ammar, y E. Zegura. Un enfoque de ferriing de mensajes para la entrega de datos en redes móviles ad-hoc escasas. En MobiHoc, págs. 187 a 198, Nueva York, NY, Estados Unidos, 2004. ACM Press. [21] M. Zonoozi y P. Dassanayake. Modelado de Movilidad de Usuario y Caracterización del Patrón de Movilidad. Revista IEEE sobre áreas seleccionadas en las comunicaciones, 15:1239-1252, septiembre de 1997. 82 ",
            "error": [
                ""
            ]
        },
        "storage per device": {
            "translated_key": "almacenamiento por dispositivo",
            "translated_annotated_text": "Una evaluación de la latencia de disponibilidad en redes ad hoc vehiculares basadas en portador Shahram Ghandeharizadeh Dept of Computer Science Univ of Southern California Los Angeles, CA 90089, USA shahram@usc.edu Shyam Kapadia Dept of Computer Science Univ of Southern California Los Angeles, CA 90089, USA kapadia@usc.edu Bhaskar Krishna Nuestro entorno de destino utiliza portadores de datos, llamados zebroids, donde un dispositivo móvil lleva un elemento de datos en nombre de un servidor a un cliente, minimizando así su latencia de disponibilidad. En este estudio, cuantificamos la variación de la latencia de disponibilidad con los zebroideos en función de un rico conjunto de parámetros como la densidad del coche, \"almacenamiento por dispositivo\", el tamaño del repositorio y las políticas de reemplazo empleadas por los zebroideos. Utilizando análisis y simulaciones extensas, obtenemos ideas novedosas sobre el diseño de sistemas basados en operadores. Se pueden obtener mejoras significativas en la latencia con zebroids a costa de un mínimo gasto general. Estas mejoras se producen incluso en escenarios con menor precisión en las predicciones de las rutas del coche. Dos hallazgos particularmente sorprendentes son: (1) una política de sustitución aleatoria ingenua empleada por los zebroids muestra un rendimiento competitivo, y (2) mejoras de la latencia obtenidas con una instanciación simplificada de zebroids se encuentran robustos a los cambios en la distribución de popularidad de los ítems de datos. Categorías y Subject Descriptores: C.2.4 [Sistemas distribuidos]: Términos Generales del Cliente/Servidor: Algoritmos, Rendimiento, Diseño, Experimentación. 1. INTRODUCCIÓN Los avances tecnológicos en las esferas del almacenamiento y las comunicaciones inalámbricas han hecho posible ahora prever la entrega a petición de datos, por ejemplo, para clips de vídeo y audio, en redes de peer-topeer vehiculares. En trabajos previos, Ghandeharizadeh et al. [10] introduce el concepto de vehículos equipados con un dispositivo Car-to-Car-Peer-toPeer, denominado AutoMata, para el entretenimiento dentro del vehículo. Las características notables de un AutoMata incluyen un dispositivo de almacenamiento masivo que ofrece cientos de gigabytes (GB) de almacenamiento, un procesador rápido y varios tipos de tarjetas de red. Incluso con las unidades de disco actuales de 500 GB, un repositorio de contenido de entretenimiento diverso puede exceder la capacidad de almacenamiento de un solo AutoMata. Tales repositorios constituyen el foco de este estudio. Para intercambiar datos, suponemos que cada AutoMata está configurado con dos tipos de tarjetas de red: 1) una tarjeta de red de baja anchura de banda con un radio-rango largo en el orden de millas que permite a un dispositivo AutoMata comunicarse con una estación celular cercana o WiMax, 2) una tarjeta de red de alta anchura de banda con un radio-rango limitado en el orden de cientos de pies. La conexión de ancho de banda alto admite tasas de datos en el orden de decenas a cientos de megabits por segundo y representa la red ad-hoc peer a peer entre los vehículos. Esto se etiqueta como el plano de datos y se emplea para intercambiar elementos de datos entre dispositivos. La conexión de baja anchura de banda sirve como plano de control, permitiendo a los dispositivos AutoMata intercambiar meta-datos con uno o más servidores centralizados. Esta conexión ofrece anchos de banda en el orden de decenas a cientos de Kilobits por segundo. Los servidores centralizados, denominados despachadores, calculan los calendarios de entrega de datos a lo largo del plano de datos utilizando los metadatos proporcionados. Estos horarios se transmiten a los vehículos participantes que utilizan el avión de control. La viabilidad técnica de tal arquitectura de dos niveles se presenta en [7], con resultados preliminares para demostrar que el ancho de banda del plano de control es suficiente para el intercambio de la información de control necesaria para realizar tal aplicación. En un escenario típico, un dispositivo AutoMata presenta a un pasajero con una lista de elementos de datos1, mostrando tanto el nombre de cada elemento de datos como su latencia de disponibilidad. Este último, denotado como ♥, se define como el momento más temprano en que el cliente encuentra una copia de su elemento de datos solicitado. Un elemento de datos está disponible inmediatamente cuando reside en el almacenamiento local del dispositivo AutoMata que atiende a la solicitud. Debido a las restricciones de almacenamiento, un AutoMata puede no almacenar todo el repositorio. En este caso, la latencia de disponibilidad es el tiempo desde que el usuario emite una solicitud hasta que el AutoMata encuentra otro coche que contiene el elemento de datos referenciado. (Los términos coche y AutoMata se utilizan indistintamente en este estudio.) La latencia de disponibilidad para un artículo es una función de la ubicación actual del cliente, su ruta de destino y viaje, el modelo de movilidad de los vehículos equipados con AutoMata, el número de réplicas construidas para los diferentes elementos de datos, y la colocación de réplicas de elementos de datos a través de los vehículos. Un método para mejorar la latencia de disponibilidad es emplear portadores de datos que transportan una réplica del elemento de datos solicitado desde un coche servidor que lo contiene a un cliente que lo solicitó. Estos portadores de datos se denominan zebroids. La selección de cebroides es facilitada por la arquitectura de dos niveles. El plano de control permite la recopilación centralizada de información en un despachador presente en una estación base.2 Algunos ejemplos de control en1 Sin pérdida de generalidad, el término elemento de datos puede ser medios tradicionales como texto o medios continuos como un clip de audio o vídeo. 2 Puede haber despachadores desplegados en un subconjunto de las estaciones de base para la tolerancia a fallos y la robustez. Los distribuidores entre estaciones de base pueden comunicarse a través de la infraestructura cableada. 75 formación son actualmente solicitudes activas, ruta de viaje de los clientes y sus destinos, y caminos de los otros coches. Para cada solicitud del cliente, el despachador puede elegir un conjunto de portadores z que colaboran para transferir un elemento de datos de un servidor a un cliente (z-relay zebroids). Aquí, z es el número de zebroids tales que 0 ≤ z < N, donde N es el número total de coches. Cuando z = 0 no hay portadores, lo que requiere un servidor para entregar el elemento de datos directamente al cliente. De lo contrario, el equipo de relé elegido de z zebroids se entregará los datos de forma transitoria unos a otros para llegar al cliente, reduciendo así la latencia de la disponibilidad (para más detalles, véase la sección 3.1). Para aumentar la robustez, el despachador puede emplear múltiples equipos de relé de portadoras z para cada solicitud. Esto puede ser útil en escenarios en los que el despachador tiene menor precisión de predicción en la información sobre las rutas de los coches. Por último, las restricciones de almacenamiento pueden requerir que un zebroid desaloje elementos de datos existentes de su almacenamiento local para acomodar el elemento solicitado por el cliente. En este estudio, se cuantifican los siguientes factores principales que afectan a la latencia de la disponibilidad en presencia de zebroideos: (i) tamaño del repositorio de datos, (ii) densidad del coche, (iii) capacidad de almacenamiento por coche, (iv) duración del viaje del cliente, (v) esquema de reemplazo empleado por los zebroideos, y (vi) exactitud de las predicciones de la ruta del coche. Para un subconjunto significativo de estos factores, abordamos algunas preguntas clave relativas al uso de zebroids tanto a través del análisis como de simulaciones extensas. Nuestras principales conclusiones son las siguientes. Una política de sustitución aleatoria ingenua empleada por los zebroids muestra un rendimiento competitivo en términos de latencia de disponibilidad. Con esta política, se pueden obtener mejoras sustanciales en la latencia con zebroids con un mínimo de gastos generales de reemplazo. En escenarios más prácticos, donde el despachador tiene información inexacta sobre las rutas del coche, los zebroids continúan proporcionando mejoras de la latencia. Un resultado sorprendente es que los cambios en la popularidad de los ítems de datos no impactan las ganancias de latencia obtenidas con una simple instanciación de z-relay zebroids llamados cebroids uno-instantáneos (ver Sección 3.1). Este estudio sugiere una serie de direcciones interesantes a seguir para obtener una mejor comprensión del diseño de sistemas basados en el portador que mejoran la latencia de disponibilidad. Trabajo relacionado: La replicación en redes móviles ad-hoc ha sido un tema ampliamente estudiado [11, 12, 15]. Sin embargo, ninguno de estos estudios emplea zebroids como portadores de datos para reducir la latencia de las solicitudes de los clientes. Varios estudios novedosos e importantes como ZebraNet [13], DakNet [14], Data Mules [16], Message Ferries [20] y Seek and Focus [17] han analizado factores que afectan a redes conectadas intermitentemente consistentes en portadores de datos similares en espíritu a los zebroideos. Los factores considerados por cada estudio son dictados por su supuesto entorno y aplicación diana. Una característica novedosa de nuestro estudio es el impacto en la latencia de disponibilidad para un repositorio de datos dado de elementos. En [9] se puede obtener una descripción detallada de las obras relacionadas. El resto de este documento está organizado de la siguiente manera. En la sección 2 se ofrece una visión general de la terminología junto con los factores que influyen en la latencia de la disponibilidad en presencia de zebroides. En la sección 3 se describe cómo se pueden emplear los cebroides. En la sección 4 se proporciona información detallada sobre la metodología de análisis empleada para captar el desempeño con los zebroids. En la sección 5 se describen los detalles del entorno de simulación utilizado para la evaluación. La sección 6 recoge las preguntas clave examinadas en este estudio y las responde a través de análisis y simulaciones. Por último, en la sección 7 se presentan breves conclusiones y futuras orientaciones de la investigación. 2. SINOPSIS Y TERMINOLOGÍA La Tabla 1 resume la notación de los parámetros utilizados en el artículo. A continuación introducimos algunas terminologías utilizadas en el artículo. Asumir una red de coches N AutoMata equipados, cada uno con capacidad de almacenamiento de α bytes. La capacidad total de almacenamiento del sistema es ST = N. Hay elementos de datos T en la base de datos, cada uno con parámetros de base de datos T Número de elementos de datos. Si Tamaño del ítem de datos i fi Frecuencia de acceso al ítem de datos i. Parámetros de replicación Ri Frecuencia normalizada de acceso al ítem de datos i ri Número de réplicas para ítem de datos i n Caracteriza un esquema de replicación particular. Latencia media de la disponibilidad del elemento de datos i Łagg Latencia agregada de la disponibilidad, N Número de dispositivos AutoMata en el sistema. α Capacidad de almacenamiento por AutoMata. γ Duración del viaje del cliente AutoMata. ST Capacidad total de almacenamiento del sistema AutoMata, ST = N · α. Cuadro 1: Términos y sus definiciones tamaño Si. La frecuencia de acceso al ítem de datos i se denota como fi, con T j=1 fj = 1. Deje que la duración del viaje del cliente AutoMata en consideración sea γ. Ahora definimos la frecuencia normalizada de acceso al ítem de datos i, denotado por Ri, como: Ri = (fi)n T j=1(fj)n ; 0 ≤ n ≤ فارسى (1) El exponente n caracteriza una técnica de replicación particular. Un esquema de replicación de raíz cuadrada se realiza cuando n = 0.5 [5]. Esto sirve como la línea base para la comparación con el caso cuando se despliegan zebroids. Ri se normaliza a un valor entre 0 y 1. El número de réplicas para el dato i, denotado como ri, es: ri = min (N, max (1, Ri·N Si )). Esto capta el caso cuando al menos una copia de cada elemento de datos debe estar presente en la red ad-hoc en todo momento. En los casos en que un elemento de datos se puede perder de la red ad-hoc, esta ecuación se convierte en ri = min (N, max (0, Ri·N Si )). En este caso, es posible que sea necesario satisfacer una solicitud para el elemento de datos perdido mediante la obtención del elemento desde un servidor remoto. La latencia de disponibilidad para un elemento de datos i, denotado como i, se define como la primera vez en la que un cliente AutoMata encontrará la primera réplica del elemento accesible a él. Si esta condición no se cumple, entonces se establece a i. Esto indica que el elemento de datos I no estaba disponible para el cliente durante su viaje. Tenga en cuenta que como hay al menos una réplica en el sistema para cada elemento de datos i, al establecer γ a un gran valor nos aseguramos de que los clientes soliciten cualquier elemento de datos i será satisfecho. Sin embargo, en la mayoría de las circunstancias prácticas γ puede no ser tan grande como para encontrar cada elemento de datos. Estamos interesados en la latencia de disponibilidad observada en todos los datos. Por lo tanto, aumentamos la latencia media de disponibilidad para cada ítem de datos i con su fi para obtener la siguiente latencia ponderada de disponibilidad (?agg) métrica:?agg = T i=1?i · fi A continuación, presentamos nuestro enfoque de solución describiendo cómo se seleccionan los zebroids. 3. ENFOQUE DE SOLUCIÓN 3.1 Zebroids Cuando un cliente hace referencia a un elemento de datos que falta en su almacenamiento local, el despachador identifica todos los coches con una copia del elemento de datos como servidores. A continuación, el despachador obtiene las rutas futuras de todos los coches para una duración de tiempo finito equivalente al tiempo máximo que el cliente está dispuesto a esperar a que su solicitud sea atendido. Utilizando esta información, el despachador programa la ruta de entrega más rápida desde cualquiera de los servidores al cliente utilizando cualquier otro coche como transportistas intermedios. Por lo tanto, determina el conjunto óptimo de decisiones de reenvío 76 que permitirá que el elemento de datos se entreguen al cliente en el mínimo de tiempo. Tenga en cuenta que la latencia a lo largo de la ruta de entrega más rápida que emplea un equipo de relé de z zebroids es similar a la obtenida con el encaminamiento epidémico [19] bajo los supuestos de almacenamiento infinito y ninguna interferencia. Una simple instanciación de z-relay zebroids se produce cuando z = 1 y la solicitud de los clientes desencadena una transferencia de una copia del elemento de datos solicitado de un servidor a un zebroid en su vecindad. Tal zebroideo se denomina cebroide uniinstantáneo. En algunos casos, el expedidor podría tener información inexacta sobre las rutas de los coches. Por lo tanto, un zebroid programado sobre la base de esta información inexacta puede no reunirse con su cliente objetivo. Para minimizar la probabilidad de tales escenarios, el despachador puede programar múltiples zebroids. Esto puede acarrear gastos generales adicionales debido a la utilización redundante de recursos para obtener las mismas mejoras de latencia. El tiempo necesario para transferir un elemento de datos de un servidor a un zebroid depende de su tamaño y del ancho de banda del enlace disponible. Con elementos de datos pequeños, es razonable suponer que este tiempo de transferencia es pequeño, especialmente en presencia del plano de datos de alto ancho de banda. Los elementos de datos grandes se pueden dividir en trozos más pequeños que permiten al despachador programar uno o más zebroids para entregar cada trozo a un cliente de una manera oportuna. Esta sigue siendo una dirección de investigación futura. Inicialmente, el número de réplicas para cada ítem de datos puede ser calculado usando la Ecuación 1. Este esquema calcula el número de réplicas de datos en función de su popularidad. Es estática porque el número de réplicas en el sistema no cambia y no se realizan reemplazos. Por lo tanto, esto se conoce como el ambiente de los nozebroids. Cuantificamos el desempeño de las diversas políticas de reemplazo con referencia a esta línea base que no emplea zebroids. Uno puede asumir una fase de arranque en frío, donde inicialmente sólo una o pocas copias de cada elemento de datos existen en el sistema. Muchas ranuras de almacenamiento de los coches pueden estar desocupados. Cuando los coches se encuentran entre sí, construyen nuevas réplicas de algunos elementos de datos seleccionados para ocupar los huecos vacíos. El procedimiento de selección puede consistir en elegir los datos de manera uniforme al azar. Nuevas réplicas se crean siempre y cuando un coche tiene un cierto umbral de su almacenamiento desocupado. Eventualmente, la mayoría de la capacidad de almacenamiento de un coche se agotará. 3.2 Políticas de reemplazo basadas en el operador Las políticas de reemplazo consideradas en este documento son reactivas ya que una sustitución se produce sólo en respuesta a una solicitud emitida para un determinado elemento de datos. Cuando el almacenamiento local de un zebroid está completamente ocupado, necesita reemplazar uno de sus elementos existentes para llevar el elemento de datos solicitado por el cliente. Para ello, el zebroid debe seleccionar a un candidato apropiado para el desalojo. Este proceso de decisión es análogo al encontrado en la paginación del sistema operativo donde el objetivo es maximizar la relación de acceso a la caché para evitar el retraso del acceso al disco [18]. Las políticas de reemplazo basadas en transportistas empleadas en nuestro estudio son las menos usadas recientemente (LRU), las menos usadas con frecuencia (LFU) y las aleatorias (donde un candidato de desalojo es elegido uniformemente al azar). Hemos considerado variantes locales y globales de las políticas LRU/LFU que determinan si el conocimiento local o global de los contenidos de los coches conocidos en el expedidor se utiliza para la decisión de desalojo en un zebroid (ver [9] para más detalles). Las pólizas de sustitución entrañan los siguientes gastos generales. En primer lugar, la complejidad asociada a la aplicación de una política. En segundo lugar, el ancho de banda utilizado para transferir una copia de un elemento de datos de un servidor al zebroid. En tercer lugar, el número medio de reemplazos realizados por los zebroides. Tenga en cuenta que en el caso de no cebroides no se incurre en gastos generales. Las métricas consideradas en este estudio son la latencia de la disponibilidad agregada, Tenga en cuenta que los despachadores con la ayuda del plano de control pueden asegurarse de que no se pierda ningún elemento de datos del sistema. En otras palabras, al menos una réplica de cada elemento de datos se mantiene en la red ad-hoc en todo momento. En tales casos, aunque un coche puede encontrarse con un cliente solicitante antes que otros servidores, si su almacenamiento local contiene elementos de datos con sólo una copia en el sistema, entonces tal coche no se elige como un zebroid. 4. METODOLOGÍA DE ANÁLISIS Aquí presentamos la metodología de evaluación analítica y algunas aproximaciones como ecuaciones de forma cerrada que capturan las mejoras en la latencia de disponibilidad que se pueden obtener tanto con cebros oneinstantáneos como con z-relay. Primero, presentamos algunos preliminares de nuestra metodología de análisis. • Que N sea el número de coches en la red que realizan una caminata aleatoria en 2D en un toro de G× G. Un coche adicional sirve como un cliente que entrega un total de N + 1 coches. Este modelo de movilidad se ha utilizado ampliamente en la literatura [17, 16] principalmente porque es susceptible de análisis y proporciona una base de referencia para comparar el rendimiento de otros modelos de movilidad. Además, esta clase de modelos de movilidad markoviana se ha utilizado para modelar los movimientos de los vehículos [3, 21]. • Asumimos que todos los coches comienzan desde la distribución estacionaria y realizan caminatas aleatorias independientes. Aunque para escenarios de densidad escasa, la suposición de independencia se mantiene, ya no es válido cuando N se aproxima a G. • Deje que el tamaño del repositorio de ítems de datos de interés sea T. Además, el ítem de datos i tiene réplicas ri. Esto implica que los coches ri, identificados como servidores, tienen una copia de este elemento de datos cuando el cliente solicita el elemento i. Todos los resultados de análisis presentados en esta sección se obtienen asumiendo que el cliente está dispuesto a esperar el tiempo necesario para que su solicitud sea satisfecha (duración del viaje sin límite γ = ­). Con el modelo de movilidad al azar en un torso 2D, hay una garantía de que mientras haya al menos una réplica del elemento de datos solicitado en la red, el cliente se encontrará con esta réplica [2]. Las extensiones al análisis que también consideran las duraciones del viaje finito se pueden obtener en [9]. Considere un escenario en el que no se emplean zebroids. En este caso, la latencia de disponibilidad esperada para el ítem de datos es el tiempo de reunión esperado de la caminata aleatoria realizada por el cliente con cualquiera de las caminatas aleatorias realizadas por los servidores. Aldous et al. [2] muestran que el tiempo de reunión de dos caminatas aleatorias en tal entorno puede modelarse como una distribución exponencial con la media C = c · G · log G, donde la constante c 0,17 para G ≥ 25. El tiempo de reunión, o equivalente a la latencia de la disponibilidad de i, para el cliente que solicita datos i es el momento hasta que se encuentre con cualquiera de estas réplicas ri por primera vez. Se trata también de una distribución exponencial con el siguiente valor esperado (obsérvese que esta formulación es válida sólo para casos escasos cuando G >> ri): فارسىi = cGlogG ri La latencia de disponibilidad agregada sin emplear zebroids es entonces esta expresión promediada sobre todos los ítems de datos, ponderada por su frecuencia de acceso: فارسىagg(no − zeb) = T i=1 fi Por otra parte, esta réplica se genera en el paso de tiempo cuando el cliente emite la solicitud. Que Nc i sea el número total esperado de nodos que están en la misma celda que cualquiera de los servidores ri. Luego, tenemos Nc i = (N − ri) · (1 − (1 − 1 G )ri ) (3) En el modelo analítico, suponemos que Nc i nuevas réplicas se crean, de modo que el número total de réplicas se aumenta a ri + Nc i. La latencia de disponibilidad se reduce ya que es más probable que el cliente cumpla con una réplica anterior. La latencia agregada de disponibilidad esperada en el caso de los cebroides uno-instantáneos es dada por, agg(zeb) = T i=1 fi · c · G · log G ri + Nc i = T i=1 fi · C ri + Nc i (4) Tenga en cuenta que al obtener esta expresión, para facilitar el análisis, hemos asumido que las nuevas réplicas comienzan Así trata a todos los portadores de Nc i de forma independiente, al igual que los servidores originales ri. Como mostraremos a continuación en comparación con las simulaciones, esta aproximación proporciona un límite superior a las mejoras que se pueden obtener porque da lugar a una menor latencia esperada en el cliente. Cabe señalar que el procedimiento mencionado anteriormente producirá una latencia similar a la empleada por un expedidor que emplee cebroides oneinstantáneos (véase la sección 3.1). Dado que el despachador es consciente de todos los movimientos futuros del coche que sólo transferiría el elemento de datos solicitado en un único zebroid, si determina que el zebroid se reunirá con el cliente antes que cualquier otro servidor. Este zebroid seleccionado está incluido en las nuevas réplicas de Nc i. 4.2 z-relay zebroids Para calcular la latencia de disponibilidad esperada con z-relay zebroids, utilizamos un análogo de problema de coloración similar a un enfoque utilizado por Spyropoulos et al. [17]. En [9] se dan detalles del procedimiento para obtener una expresión de forma cerrada. La latencia de disponibilidad agregada (agg) con z-relay zebroids es dada por, agg(zeb) = T i=1 [fi · C N + 1 · 1 N + 1 − ri · (N · log N ri − log (N + 1 − ri))] (5) 5. METODOLOGÍA DE SIMULACIÓN El entorno de simulación considerado en este estudio se compone de vehículos como automóviles que llevan una fracción del repositorio de datos. Un parámetro de precisión de predicción proporciona inherentemente una cierta garantía probabilística sobre la confianza de las predicciones de ruta del automóvil conocidas en el despachador. Un valor del 100% implica que las rutas exactas de todos los coches se conocen en todo momento. Un valor del 70% para este parámetro indica que las rutas previstas para los coches coincidirán con las reales con probabilidad 0.7. Tenga en cuenta que esta probabilidad se extiende a través de las rutas del coche durante toda la duración del viaje. Ahora proporcionamos los preliminares del estudio de simulación y luego describimos los parámetros de configuración utilizados en nuestros experimentos. • Similar a la metodología de análisis, el mapa utilizado es un toro 2D. Un modelo de movilidad Markov que representa una caminata aleatoria 2D imparcial en la superficie del toro describe el movimiento de los coches a través de este toro. • Cada cuadrícula/célula es un estado único de esta cadena Markov. En cada ranura de tiempo, cada coche hace una transición de una celda a cualquiera de sus 8 celdas vecinas. La transición es una función de la ubicación actual del coche y una matriz de transición de probabilidad Q = [qij] donde qij es la probabilidad de transición del estado i al estado j. Solo los coches equipados con AutoMata dentro de la misma celda pueden comunicarse entre sí. • Los parámetros γ,  han sido discretizados y expresados en términos del número de franjas horarias. • Un dispositivo AutoMata no mantiene más de una réplica de un elemento de datos. Esto se debe a que las réplicas adicionales ocupan el almacenamiento sin proporcionar beneficios. • Los cebroides de relé z o uno instantáneos pueden ser empleados por solicitud del cliente para mejorar la latencia. • A menos que se mencione lo contrario, se supone que el parámetro de precisión de la predicción es del 100%. Esto se debe a que este estudio pretende cuantificar el efecto de un gran número de parámetros individualmente sobre la latencia de la disponibilidad. Aquí, establecemos el tamaño de cada elemento de datos, Si, para ser 1. α representa el número de ranuras de almacenamiento por AutoMata. Cada ranura de almacenamiento almacena un elemento de datos. γ representa la duración del viaje de los clientes en términos del número de franjas horarias. Por lo tanto, los posibles valores de latencia de disponibilidad están entre 0 y γ.  se define como el número de franjas horarias después de lo cual un dispositivo cliente AutoMata encontrará una réplica del elemento de datos por primera vez. Si una réplica para el elemento de datos solicitado fue encontrado por el cliente en la primera celda, a continuación, se establece  = 0. Si se trata de un elemento de datos solicitado, el cliente no encontró ninguna copia del elemento de datos solicitado durante todo su viaje. En todas nuestras simulaciones, para la ilustración consideramos un 5 × 5 2D-torus con γ fijado a 10. Nuestros experimentos indican que las tendencias en la escala de resultados a mapas de mayor tamaño. Simulamos una distribución sesgada de acceso a los datos T que obedece a la ley Ziffs con una media de 0.27. Esta distribución corresponde a la venta de entradas de cine en los Estados Unidos [6]. Empleamos un esquema de replicación que asigna réplicas para un elemento de datos en función de la raíz cuadrada de la frecuencia de acceso de ese elemento. Se muestra que el esquema de replicación de raíz cuadrada tiene un rendimiento de latencia competitivo en un gran espacio de parámetros [8]. Las réplicas de elementos de datos se distribuyen uniformemente entre los dispositivos AutoMata. Esto sirve como el caso de la línea base sin cebros. El esquema de raíz cuadrada también proporciona la distribución de réplica inicial cuando se emplean zebroids. Tenga en cuenta que los reemplazos realizados por los zebroids causarán cambios en la distribución de réplica de ítems de datos. Las solicitudes generadas según la distribución Zipf se emiten una a la vez. El coche cliente que emite la solicitud se elige de una manera redonda-robina. Después de un período máximo de γ, se registra la latencia con que se encontró esta solicitud. En todos los resultados de simulación, cada punto es un promedio de 200.000 solicitudes. Además, los intervalos de confianza del 95% determinados para los resultados son bastante ajustados para las métricas de latencia y los gastos generales de reemplazo. Por lo tanto, sólo los presentamos para la métrica que captura la mejora porcentual de la latencia con respecto al caso de no-zebroides. 6. RESULTADOS En esta sección, describimos nuestros resultados de evaluación donde se abordan las siguientes preguntas clave. Con una amplia selección de esquemas de reemplazo disponibles para un zebroid, ¿cuál es su efecto en la latencia de disponibilidad? Una pregunta más central es: Do zebroids provide 78 0 20 40 60 80 100 1.5 2 2.5 3 3.5 Número de coches Latencia de disponibilidad agregada (­agg ) lru_global lfu_global lru_local lfu_local random Figura 1: La figura 1 muestra la latencia de disponibilidad al emplear cebroids uno-instantáneos en función de los valores (N,α), cuando el ¿Cuáles son los gastos generales asociados en el empleo de estos zebroides? ¿Qué sucede con estas mejoras en escenarios donde un despachador puede tener información imperfecta sobre las rutas del automóvil? ¿Cuáles son las compensaciones inherentes entre la densidad del automóvil y el almacenamiento por automóvil en lo que respecta a su efecto combinado e individual sobre la latencia de la disponibilidad en presencia de zebroids? Presentamos análisis simples y simulaciones detalladas para proporcionar respuestas a estas preguntas, así como para obtener información sobre el diseño de sistemas basados en operadores. 6.1 ¿Cómo funciona un esquema de sustitución empleado por un latencia de disponibilidad de impacto zebroideo? Para ilustrarlo, presentamos experimentos de escala en los que se emplean cebroides oneinstantáneos (ver Figura 1). Por escala, queremos decir que α y N se cambian proporcionalmente para mantener el almacenamiento total del sistema, ST, constante. Aquí, T = 50 y ST = 200. Elegimos los siguientes valores de (N,α) = {(20,10), (25,8), (50,4), (100,2)}. La cifra indica que un plan de sustitución al azar muestra un rendimiento competitivo. Esto se debe a varias razones. Recuerde que la distribución de réplica inicial se establece según el esquema de replicación de raíz cuadrada. El esquema de reemplazo aleatorio no altera esta distribución ya que hace que los reemplazos ciegos a la popularidad de un elemento de datos. Sin embargo, los reemplazos causan una reorganización dinámica de los datos a fin de atender mejor a la solicitud activa actual. Además, el patrón de movilidad de los coches es aleatorio, por lo que las ubicaciones desde las que los clientes emiten las solicitudes también son aleatorias y no se conocen a priori en el despachador. Estas conclusiones son importantes porque una política de sustitución aleatoria puede aplicarse de manera descentralizada. Los esquemas rru-global y lfu-global proporcionan un rendimiento de latencia que es peor que aleatorio. Esto se debe a que estas políticas desarrollan rápidamente una preferencia por los elementos de datos más populares, creando así un mayor número de réplicas para ellos. Durante el desalojo, los datos más populares casi nunca se seleccionan como candidatos de reemplazo. En consecuencia, hay menos réplicas para los artículos menos populares. Por lo tanto, la distribución inicial del elemento de datos replica cambios de raíz cuadrada a que se asemeja a replicación lineal. El mayor número de réplicas de las partidas de datos populares proporciona beneficios adicionales marginales, mientras que el menor número de réplicas de las demás partidas de datos perjudica el rendimiento de latencia de estas políticas mundiales. Los esquemas lfu-local y lru-local tienen un rendimiento similar al aleatorio ya que no tienen suficiente historial de solicitudes de datos locales. Especulamos que el desempeño de estas políticas locales se acercará al de sus variantes globales para una historia suficientemente grande de solicitudes de ítems de datos. Debido al rendimiento competitivo demostrado por una política aleatoria, para el resto del documento, presentamos el rendimiento de los zebroids que emplean una política de reemplazo aleatorio. 6.2 ¿Proporcionan los zebroids mejoras significativas en la latencia de disponibilidad? Encontramos que en muchos escenarios que emplean zebroids proporciona mejoras sustanciales en la latencia de la disponibilidad. 6.2.1 Análisis Primero consideramos el caso de los cebroides uno-instantáneos. La Figura 2.a muestra la variación en Łagg en función de N para T = 10 y α = 1 con 10 × 10 toros usando la Ecuación 4. Los ejes x e y se dibujan a una escala de registro. En la figura 2.b se muestra la mejoría en % en el Agg obtenido con cebroides uniinstantáneos. En este caso, sólo el eje x se dibuja a una escala de registro. Para ilustrar, suponemos que los datos T son solicitados uniformemente. Inicialmente, cuando la red es escasa la aproximación analítica para mejoras en la latencia con zebroids, obtenida de las ecuaciones 2 y 4, coincide estrechamente con los resultados de la simulación. Sin embargo, a medida que N aumenta, la suposición de escasez para la que el análisis es válido, a saber, N+G, ya no es cierta. Por lo tanto, las dos curvas divergen rápidamente. El punto en el que las dos curvas se alejan unas de otras corresponde a un valor de Además, como se mencionó anteriormente, el análisis proporciona un límite superior a las mejoras de la latencia, ya que trata de las réplicas recién creadas dadas por Nc i de forma independiente. Sin embargo, estas réplicas de Nc i comienzan desde la misma celda que una de las réplicas de servidor ri. Finalmente, el análisis captura un escenario oneshot donde dada una distribución inicial de réplica de datos, se calcula la latencia de disponibilidad. Las nuevas réplicas creadas no afectan las solicitudes futuras del cliente. Debido a las limitaciones de espacio, aquí, se resumen las observaciones en el caso de z-relay zebroids se emplean. El lector interesado puede obtener más detalles en [9]. Observaciones similares, como el caso cebroideo uniinstantaneo, se aplican ya que las curvas de simulación y análisis comienzan de nuevo a divergir cuando los supuestos de análisis ya no son válidos. Sin embargo, la observación clave aquí es que la mejora de la latencia con z-relay zebroids es significativamente mejor que el caso de cebroids uno-instantáneos, especialmente para escenarios de almacenamiento más bajos. Esto se debe a que en escenarios escasos, los traspasos transitivos entre los zebroides crean un mayor número de réplicas para el ítem de datos solicitado, lo que produce una menor latencia de disponibilidad. Por otra parte, también se observa que la curva de validación de simulación para las mejoras en Łagg con z-relay zebroids se aproxima a la del caso cebroideo uniinstantánea para un almacenamiento más alto (valores de N más altos). Esto se debe a que los cebroides uno-instantáneos son un caso especial de z-relay zebroides. 6.2.2 Simulación Realizamos simulaciones para examinar todo el espectro de almacenamiento obtenido cambiando la densidad del vehículo N o el almacenamiento por coche α para capturar también escenarios en los que no se mantienen las hipótesis de escasez para las que el análisis es válido. Separamos el efecto de N y α capturando la variación de N manteniendo constante α (caso 1) y viceversa (caso 2) tanto con z-relay y cebroides uno-instantáneos. Aquí, establecemos el tamaño del repositorio como T = 25. En el gráfico 3 figura el caso 1 mencionado anteriormente. Se observan tendencias similares con el caso 2, en [9] se dispone de una descripción completa de esos resultados. Con la Figura 3.b, manteniendo constante α, la densidad del coche aumenta inicialmente tiene mayores beneficios de latencia porque el aumento de N introduce más zebroids en el sistema. A medida que N se incrementa aún más, • reduce porque el almacenamiento total en el sistema sube. En consecuencia, el número de réplicas por elemento de datos sube aumentando así el número de servidores 79. Por lo tanto, la política de reemplazo no puede encontrar un zebroid tan a menudo para transportar el elemento de datos solicitado al cliente antes que cualquiera de los servidores. Por otro lado, el aumento del número de servidores beneficia al caso de no-zebroids al reducir a Agg. El efecto neto da lugar a una reducción de los valores más grandes de N. 10 1 10 2 10 3 10 −1 10 0 10 1 10 2 Número de automóviles no-zebroidsanal no-zebroids sim one-instantaneoussim Agregación Disponibilidad Latencia (­agg ) 2.a) Agg 10 1 10 2 10 3 0 10 20 40 50 60 70 80 90 100 Número de automóviles % Mejora Las tendencias mencionadas anteriormente son similares a las obtenidas del análisis. Sin embargo, algo contra-intuitivamente con almacenamiento relativamente más alto del sistema, z-relay zebroids proporcionan mejoras ligeramente más bajas en la latencia en comparación con uno-instantaneous zebroids. Especulamos que esto se debe a las diferentes distribuciones de réplicas de ítems de datos impuestas por ellos. Tenga en cuenta que los reemplazos realizados por los zebroids causan fluctuaciones en estas distribuciones de réplica que pueden afectar futuras solicitudes de clientes. Actualmente estamos explorando opciones adecuadas de parámetros que pueden capturar estas distribuciones de réplicas cambiantes. 6.3 ¿Cuáles son los gastos generales derivados de la mejora de la latencia de los zebroideos? Encontramos que las mejoras en la latencia con zebroids se obtienen con un mínimo de reemplazo de los gastos generales (< 1 por solicitud del cliente). 6.3.1 Análisis Con cebroides uniinstantáneos, para cada solicitud de cliente se emplea un máximo de un cebroide para mejorar la latencia. Por lo tanto, los gastos generales de sustitución por solicitud del cliente pueden ascender a un máximo de uno. Recordemos que para calcular la latencia con una latencia instantánea 0 50 100 150 200 250 350 400 0 1 2 3 4 5 6 Número de coches Latencia de disponibilidad agregada (?agg ) no-zebroids one-instantaneous z-relays 3.a 0 50 100 150 200 250 300 350 400 0 10 20 30 40 50 60 Número de coches % Mejora en?agg wrt no-zebro Ahora un reemplazo sólo se incumple si una de estas réplicas de Nc i de nueva creación se reúne con el cliente antes que cualquiera de los servidores de ri. Que Xri y XNc i respectivamente sean variables aleatorias que capturen el tiempo mínimo hasta que cualquiera de las réplicas de ri y Nc i cumpla con el cliente. Dado que Xri y XNc i se supone que son independientes, por la propiedad de variables aleatorias distribuidas exponencialmente tenemos, Overhead/request = 1 · P(XNc i < Xri ) + 0 · P(Xri ≤ XNc i ) (6) Overhead/request = ri C ri C + Nc i C = ri ri + Nc i (7) Sin embargo, si N  es constante entonces el aumento de las causas N α 80 0 20 40 60 80 100 0 0,05 0,15 0,20 0,25 0,35 0,40 0,45 0,5 Número de coches cebroides instantáneos número medio de reemplazos por solicitud (N=20,α=10) (N=25,α=8) (N=50,α=4) (N=100,α=2) Figura 4: La figura 4 captura el reemplazo de Esto implica que se incurre en un aumento de los gastos generales de sustitución para valores N y α más altos. Por otra parte, cuando ri = N, esto significa que cada coche tiene una réplica de elemento de datos i. Por lo tanto, no se emplean zebroids cuando se solicita este artículo, lo que da lugar a un gasto general/solicitud para este artículo como cero. A continuación, presentamos resultados de simulación que validan nuestra hipótesis de análisis para los gastos generales asociados con el despliegue de cebroides uno-instantáneos. 6.3.2 Simulación En la figura 4 se muestra la superficie de repuesto con cebroides uno-instantáneos cuando se varían (N,α) manteniendo constante el almacenamiento total del sistema. Las tendencias mostradas por la simulación concuerdan con las previstas por el análisis anterior. Sin embargo, el almacenamiento total del sistema puede ser cambiado ya sea por la densidad variable del coche (N) o el almacenamiento por coche (α). Debido a tendencias similares, aquí presentamos el caso cuando α se mantiene constante y N es variada (Figura 5). Referimos al lector a [9] para el caso cuando α es variado y N se mantiene constante. Presentamos un argumento intuitivo para el comportamiento de las curvas superiores de reemplazo de la solicitud. Cuando el almacenamiento es extremadamente escaso de modo que sólo existe una réplica por elemento de datos en la red AutoMata, el número de reemplazos realizados por los zebroids es cero ya que cualquier reemplazo causará que un elemento de datos se pierda del sistema. El despachador garantiza que no se pierda ningún elemento de datos del sistema. En el otro extremo del espectro, si el almacenamiento se vuelve tan abundante que α = T entonces todo el repositorio de elementos de datos se puede replicar en cada coche. El número de reemplazos es de nuevo cero ya que cada solicitud puede ser satisfecha localmente. Un escenario similar ocurre si N se aumenta a un valor tan grande que otro coche con el elemento de datos solicitado siempre está disponible en las proximidades del cliente. Sin embargo, hay un espectro de almacenamiento en el medio donde los reemplazos por los zebroides programados dan lugar a mejoras en el Agg (ver Figura 3). Por otra parte, observamos que para escenarios de almacenamiento escasos, las mejoras más altas con z-relay zebroids se obtienen al costo de un aumento de los gastos generales de reemplazo en comparación con el caso de cebroids uno-instantáneos. Esto se debe a que en el caso anterior, cada uno de estos z zebroids seleccionados a lo largo de la ruta de latencia más baja al cliente necesita realizar un reemplazo. Sin embargo, los gastos generales de sustitución son todavía inferiores a 1 lo que indica que en promedio se necesita menos de un reemplazo por solicitud del cliente, incluso cuando se emplean z-relay zebroids. 0 50 100 150 200 250 300 350 400 0 0,1 0,2 0,3 0,4 0,6 0,7 0,8 0,9 1 Número de coches z-reemplaza uno-instantánea Número medio de reemplazos por solicitud Figura 5: La figura 5 muestra los gastos generales de reemplazo con cebroide para los casos en que N es diferente manteniendo α = 2. 10 20 30 40 50 60 70 80 90 100 0 0,5 1 1,5 2 2,5 3 3,5 4 Porcentaje de predicción no-zebroideos (N=50) uno-instantáneos (N=50) z-relés (N=50) no-zebroideos (N=200) uno-instantáneos (N=200) z-relés (N=200) Disponibilidad agregada Latencia ( 6.4 ¿Qué sucede con la latencia de la disponibilidad con zebroids en escenarios con inexactitudes en las predicciones de la ruta del coche? Encontramos que los zebroids continúan proporcionando mejoras en la latencia de la disponibilidad incluso con menor precisión en las predicciones de la ruta del coche. Utilizamos un único parámetro p para cuantificar la exactitud de las predicciones de la ruta del coche. 6.4.1 Análisis Dado que p representa la probabilidad de que una ruta del automóvil predicha por el expedidor coincida con la actual, por lo tanto, la latencia con los zebroideos puede ser aproximada por, 6.4.2 Simulación En la figura 6 se muestra la variación en el Agg en función de esta métrica de precisión de la predicción de ruta. Observamos una reducción suave en la mejora de 81 en Agg a medida que la métrica de precisión de predicción reduce. Para los zebroids que están programados pero no se reúnen con el cliente debido al error de predicción, etiquetamos tales reemplazos hechos por los zebroids como fallados. Se ve que los reemplazos fallidos aumentan gradualmente a medida que la precisión de la predicción se reduce. 6.5 ¿En qué condiciones se maximizan las mejoras en la latencia de disponibilidad con zebroids? Sorprendentemente, encontramos que las mejoras en la latencia obtenidas con cebroides uno-instantáneos son independientes de la distribución de entrada de la popularidad de los ítems de datos. 6.5.1 Análisis La diferencia fraccionaria (marcada en la letra ) en la latencia entre los cebroides no-zebroideos y los cebroides uno-instantáneos se obtiene a partir de las ecuaciones 2, 3 y 4 de la siguiente forma: T i=1 fi·C ri − T i=1 fi·C ri+(N−ri)·(1−(1− 1 G )ri Let α = 1, haciendo el almacenamiento total en el sistema ST = N. Suponiendo que la distribución de réplica inicial es según el esquema de replicación de raíz cuadrada, tenemos, ri = fi·N T j = 1 fj. Por lo tanto, obtenemos fi = K2 ·r2 i N2, donde K = T j=1 fj. Utilizando esto, junto con la aproximación (1 − x)n 1 − n · x para x pequeña, simplificamos la ecuación anterior para obtener, • = 1 − T i=1 ri 1+ N−ri G T i=1 ri Para determinar cuándo se maximizan las ganancias con cebroides uno-instantáneos, podemos enmarcar un problema de optimización de la siguiente manera: Maximizar •, sujeto a T i Con un esquema de replicación de raíz cuadrada, las mejoras obtenidas con cebroides uniinstantáneos son independientes de la distribución de popularidad de entrada de los ítems de datos. (Ver [9] para la prueba) 6.5.2 Simulación Realizamos simulaciones con dos diferentes distribución de frecuencias de ítems de datos: Uniforme y Zipfian (con media= 0.27). En ambos casos se obtienen mejoras similares de latencia con cebroides uniinstantáneos. Este resultado tiene importantes implicaciones. En casos con popularidad sesgada hacia ciertos ítems de datos, las mejoras agregadas en la latencia en todas las solicitudes de ítems de datos siguen siendo las mismas. Incluso en escenarios en los que la frecuencia de acceso a los datos cambia dinámicamente, los zebroids seguirán proporcionando mejoras similares en la latencia. 7. CONCLUSIONES Y FUTURAS DIRECCIONES DE INVESTIGACIÓN En este estudio, examinamos las mejoras en la latencia que se pueden obtener en presencia de transportistas que entregan un elemento de datos desde un servidor a un cliente. Se cuantificó la variación de la latencia de disponibilidad en función de un rico conjunto de parámetros como la densidad del coche, el almacenamiento por coche, el tamaño de la base de datos de título y las políticas de reemplazo empleadas por los zebroids. A continuación se resumen algunas direcciones clave de investigación en el futuro que pretendemos seguir. Para reflejar mejor la realidad nos gustaría validar las observaciones obtenidas de este estudio con algunos rastros de simulación del mundo real de movimientos vehiculares (por ejemplo usando CORSIM [1]). Esto también servirá como validación para la utilidad del modelo de movilidad Markov utilizado en este estudio. Actualmente estamos analizando el desempeño de los zebroids en un conjunto de datos del mundo real que comprende una red ad-hoc de autobuses que se mueven alrededor de un pequeño barrio en Amherst [4]. Los cebroides también se pueden utilizar para la entrega de datos que transportan información sensible al retraso con una determinada caducidad. Las extensiones a zebroids que satisfacen estos requisitos de aplicación presentan una dirección de investigación futura interesante. 8. AGRADECIMIENTOS Esta investigación fue apoyada en parte por una beca Annenberg y subvenciones NSF numeradas CNS-0435505 (NeTS NOSS), CNS-0347621 (CAREER), y IIS-0307908. 9. REFERENCIAS [1] Administración Federal de Carreteras. Simulación del corredor. Versión 5.1, http://www.ops.fhwa.dot.gov/trafficanalysistools/cors im.htm. [2] D. Aldous y J. Llena. Cadenas de markov reversibles y caminatas aleatorias en gráficos. En preparación. [3] A. Bar-Noy, I. Kessler y M. Sidi. Usuarios móviles: Para actualizar o no actualizar. En IEEE Infocom, 1994. [4] J. Burgess, B. Gallagher, D. Jensen, y B. Levine. MaxProp: Enrutamiento para redes tolerantes a perturbaciones basadas en vehículos. En IEEE Infocom, abril de 2006. [5] E. Cohen y S. Shenker. Estrategias de replicación en redes de pares no estructuradas. En SIGCOMM, 2002. [6] A. Dan, D. Dias, R. Mukherjee, D. Sitaram y R. Tewari. Buffering y Caching en servidores de vídeo a gran escala. En COMPCON, 1995. [7] S. Ghandeharizadeh, S. Kapadia, y B. Krishnamachari. PAVAN: Marco normativo para la disponibilidad de contenidos en las redes ad hoc de vehículos. En VANET, Nueva York, Nueva York, Estados Unidos, 2004. ACM Press. [8] S. Ghandeharizadeh, S. Kapadia, y B. Krishnamachari. Comparación de estrategias de replicación para la disponibilidad de contenido en redes C2P2. En MDM, mayo de 2005. [9] S. Ghandeharizadeh, S. Kapadia, y B. Krishnamachari. Una evaluación de la latencia de disponibilidad en redes de vehículos ad-hoc basadas en el portador. Informe técnico, Departamento de Ciencias de la Computación, Universidad del Sur de California, CENG-2006-1, 2006. [10] S. Ghandeharizadeh y B. Krishnamachari. C2p2: Una red inter pares para servicios de información de automóviles a petición. En Globe. IEEE, 2004. [11] T. Hara. Asignación eficaz de réplicas en redes ad-hoc para mejorar la accesibilidad de datos. En IEEE Infocom, 2001. [12] H. Hayashi, T. Hara, y S. Nishio. Un método de asignación de réplica Adaptarse a los cambios de topología en redes ad-hoc. En DEXA, 2005. [13] P. Juang, H. Oki, Y. Wang, M. Martonosi, L. Peh, y D. Rubenstein. Computación energéticamente eficiente para el seguimiento de vida silvestre: compensaciones de diseño y experiencias tempranas con ZebraNet. Silgarch Comput. Archit. Noticias, 2002. [14] A. Pentland, R. Fletcher y A. Hasson. DakNet: Repensar la conectividad en las naciones en desarrollo. Computadora, 37(1):78-83, 2004. [15] F. Sailhan y V. Issarny. Caché cooperativo en redes ad-hoc. En MDM, 2003. [16] R. Shah, S. Roy, S. Jain y W. Brunette. Mulas de datos: Modelado y análisis de una arquitectura de tres niveles para redes de sensores escasas. Elsevier ad-hoc Networks Journal, 1o de septiembre de 2003. [17] T. Schiropoulos, K. Psounis y C. Raghavendra. Enrutamiento de una sola copia en redes móviles conectadas intermitentemente. En SECON, abril de 2004. [18] A. Tanenbaum. Sistemas operativos modernos, 2a edición, capítulo 4, sección 4.4. Prentice Hall, 2001. [19] A. Vahdat y D. Becker. Ruta epidémica para redes ad-hoc parcialmente conectadas. Informe técnico, Departamento de Informática, Universidad de Duke, 2000. [20] W. Zhao, M. Ammar, y E. Zegura. Un enfoque de ferriing de mensajes para la entrega de datos en redes móviles ad-hoc escasas. En MobiHoc, págs. 187 a 198, Nueva York, NY, Estados Unidos, 2004. ACM Press. [21] M. Zonoozi y P. Dassanayake. Modelado de Movilidad de Usuario y Caracterización del Patrón de Movilidad. Revista IEEE sobre áreas seleccionadas en las comunicaciones, 15:1239-1252, septiembre de 1997. 82 ",
            "error": [
                ""
            ]
        },
        "repository size": {
            "translated_key": "tamaño del repositorio",
            "translated_annotated_text": "Una evaluación de la latencia de disponibilidad en redes ad hoc vehiculares basadas en portador Shahram Ghandeharizadeh Dept of Computer Science Univ of Southern California Los Angeles, CA 90089, USA shahram@usc.edu Shyam Kapadia Dept of Computer Science Univ of Southern California Los Angeles, CA 90089, USA kapadia@usc.edu Bhaskar Krishna Nuestro entorno de destino utiliza portadores de datos, llamados zebroids, donde un dispositivo móvil lleva un elemento de datos en nombre de un servidor a un cliente, minimizando así su latencia de disponibilidad. En este estudio, se cuantifica la variación de la latencia de disponibilidad con los zebroideos en función de un rico conjunto de parámetros como densidad de automóviles, almacenamiento por dispositivo, \"tamaño del repositorio\", y políticas de reemplazo empleadas por los zebroideos. Utilizando análisis y simulaciones extensas, obtenemos ideas novedosas sobre el diseño de sistemas basados en operadores. Se pueden obtener mejoras significativas en la latencia con zebroids a costa de un mínimo gasto general. Estas mejoras se producen incluso en escenarios con menor precisión en las predicciones de las rutas del coche. Dos hallazgos particularmente sorprendentes son: (1) una política de sustitución aleatoria ingenua empleada por los zebroids muestra un rendimiento competitivo, y (2) mejoras de la latencia obtenidas con una instanciación simplificada de zebroids se encuentran robustos a los cambios en la distribución de popularidad de los ítems de datos. Categorías y Subject Descriptores: C.2.4 [Sistemas distribuidos]: Términos Generales del Cliente/Servidor: Algoritmos, Rendimiento, Diseño, Experimentación. 1. INTRODUCCIÓN Los avances tecnológicos en las esferas del almacenamiento y las comunicaciones inalámbricas han hecho posible ahora prever la entrega a petición de datos, por ejemplo, para clips de vídeo y audio, en redes de peer-topeer vehiculares. En trabajos previos, Ghandeharizadeh et al. [10] introduce el concepto de vehículos equipados con un dispositivo Car-to-Car-Peer-toPeer, denominado AutoMata, para el entretenimiento dentro del vehículo. Las características notables de un AutoMata incluyen un dispositivo de almacenamiento masivo que ofrece cientos de gigabytes (GB) de almacenamiento, un procesador rápido y varios tipos de tarjetas de red. Incluso con las unidades de disco actuales de 500 GB, un repositorio de contenido de entretenimiento diverso puede exceder la capacidad de almacenamiento de un solo AutoMata. Tales repositorios constituyen el foco de este estudio. Para intercambiar datos, suponemos que cada AutoMata está configurado con dos tipos de tarjetas de red: 1) una tarjeta de red de baja anchura de banda con un radio-rango largo en el orden de millas que permite a un dispositivo AutoMata comunicarse con una estación celular cercana o WiMax, 2) una tarjeta de red de alta anchura de banda con un radio-rango limitado en el orden de cientos de pies. La conexión de ancho de banda alto admite tasas de datos en el orden de decenas a cientos de megabits por segundo y representa la red ad-hoc peer a peer entre los vehículos. Esto se etiqueta como el plano de datos y se emplea para intercambiar elementos de datos entre dispositivos. La conexión de baja anchura de banda sirve como plano de control, permitiendo a los dispositivos AutoMata intercambiar meta-datos con uno o más servidores centralizados. Esta conexión ofrece anchos de banda en el orden de decenas a cientos de Kilobits por segundo. Los servidores centralizados, denominados despachadores, calculan los calendarios de entrega de datos a lo largo del plano de datos utilizando los metadatos proporcionados. Estos horarios se transmiten a los vehículos participantes que utilizan el avión de control. La viabilidad técnica de tal arquitectura de dos niveles se presenta en [7], con resultados preliminares para demostrar que el ancho de banda del plano de control es suficiente para el intercambio de la información de control necesaria para realizar tal aplicación. En un escenario típico, un dispositivo AutoMata presenta a un pasajero con una lista de elementos de datos1, mostrando tanto el nombre de cada elemento de datos como su latencia de disponibilidad. Este último, denotado como ♥, se define como el momento más temprano en que el cliente encuentra una copia de su elemento de datos solicitado. Un elemento de datos está disponible inmediatamente cuando reside en el almacenamiento local del dispositivo AutoMata que atiende a la solicitud. Debido a las restricciones de almacenamiento, un AutoMata puede no almacenar todo el repositorio. En este caso, la latencia de disponibilidad es el tiempo desde que el usuario emite una solicitud hasta que el AutoMata encuentra otro coche que contiene el elemento de datos referenciado. (Los términos coche y AutoMata se utilizan indistintamente en este estudio.) La latencia de disponibilidad para un artículo es una función de la ubicación actual del cliente, su ruta de destino y viaje, el modelo de movilidad de los vehículos equipados con AutoMata, el número de réplicas construidas para los diferentes elementos de datos, y la colocación de réplicas de elementos de datos a través de los vehículos. Un método para mejorar la latencia de disponibilidad es emplear portadores de datos que transportan una réplica del elemento de datos solicitado desde un coche servidor que lo contiene a un cliente que lo solicitó. Estos portadores de datos se denominan zebroids. La selección de cebroides es facilitada por la arquitectura de dos niveles. El plano de control permite la recopilación centralizada de información en un despachador presente en una estación base.2 Algunos ejemplos de control en1 Sin pérdida de generalidad, el término elemento de datos puede ser medios tradicionales como texto o medios continuos como un clip de audio o vídeo. 2 Puede haber despachadores desplegados en un subconjunto de las estaciones de base para la tolerancia a fallos y la robustez. Los distribuidores entre estaciones de base pueden comunicarse a través de la infraestructura cableada. 75 formación son actualmente solicitudes activas, ruta de viaje de los clientes y sus destinos, y caminos de los otros coches. Para cada solicitud del cliente, el despachador puede elegir un conjunto de portadores z que colaboran para transferir un elemento de datos de un servidor a un cliente (z-relay zebroids). Aquí, z es el número de zebroids tales que 0 ≤ z < N, donde N es el número total de coches. Cuando z = 0 no hay portadores, lo que requiere un servidor para entregar el elemento de datos directamente al cliente. De lo contrario, el equipo de relé elegido de z zebroids se entregará los datos de forma transitoria unos a otros para llegar al cliente, reduciendo así la latencia de la disponibilidad (para más detalles, véase la sección 3.1). Para aumentar la robustez, el despachador puede emplear múltiples equipos de relé de portadoras z para cada solicitud. Esto puede ser útil en escenarios en los que el despachador tiene menor precisión de predicción en la información sobre las rutas de los coches. Por último, las restricciones de almacenamiento pueden requerir que un zebroid desaloje elementos de datos existentes de su almacenamiento local para acomodar el elemento solicitado por el cliente. En este estudio, se cuantifican los siguientes factores principales que afectan a la latencia de la disponibilidad en presencia de zebroideos: i) ítem de datos \"tamaño del repositorio\", ii) densidad del automóvil, iii) capacidad de almacenamiento por coche, iv) duración del viaje del cliente, v) esquema de reemplazo empleado por los zebroideos, y vi) exactitud de las predicciones de la ruta del automóvil. Para un subconjunto significativo de estos factores, abordamos algunas preguntas clave relativas al uso de zebroids tanto a través del análisis como de simulaciones extensas. Nuestras principales conclusiones son las siguientes. Una política de sustitución aleatoria ingenua empleada por los zebroids muestra un rendimiento competitivo en términos de latencia de disponibilidad. Con esta política, se pueden obtener mejoras sustanciales en la latencia con zebroids con un mínimo de gastos generales de reemplazo. En escenarios más prácticos, donde el despachador tiene información inexacta sobre las rutas del coche, los zebroids continúan proporcionando mejoras de la latencia. Un resultado sorprendente es que los cambios en la popularidad de los ítems de datos no impactan las ganancias de latencia obtenidas con una simple instanciación de z-relay zebroids llamados cebroids uno-instantáneos (ver Sección 3.1). Este estudio sugiere una serie de direcciones interesantes a seguir para obtener una mejor comprensión del diseño de sistemas basados en el portador que mejoran la latencia de disponibilidad. Trabajo relacionado: La replicación en redes móviles ad-hoc ha sido un tema ampliamente estudiado [11, 12, 15]. Sin embargo, ninguno de estos estudios emplea zebroids como portadores de datos para reducir la latencia de las solicitudes de los clientes. Varios estudios novedosos e importantes como ZebraNet [13], DakNet [14], Data Mules [16], Message Ferries [20] y Seek and Focus [17] han analizado factores que afectan a redes conectadas intermitentemente consistentes en portadores de datos similares en espíritu a los zebroideos. Los factores considerados por cada estudio son dictados por su supuesto entorno y aplicación diana. Una característica novedosa de nuestro estudio es el impacto en la latencia de disponibilidad para un repositorio de datos dado de elementos. En [9] se puede obtener una descripción detallada de las obras relacionadas. El resto de este documento está organizado de la siguiente manera. En la sección 2 se ofrece una visión general de la terminología junto con los factores que influyen en la latencia de la disponibilidad en presencia de zebroides. En la sección 3 se describe cómo se pueden emplear los cebroides. En la sección 4 se proporciona información detallada sobre la metodología de análisis empleada para captar el desempeño con los zebroids. En la sección 5 se describen los detalles del entorno de simulación utilizado para la evaluación. La sección 6 recoge las preguntas clave examinadas en este estudio y las responde a través de análisis y simulaciones. Por último, en la sección 7 se presentan breves conclusiones y futuras orientaciones de la investigación. 2. SINOPSIS Y TERMINOLOGÍA La Tabla 1 resume la notación de los parámetros utilizados en el artículo. A continuación introducimos algunas terminologías utilizadas en el artículo. Asumir una red de coches N AutoMata equipados, cada uno con capacidad de almacenamiento de α bytes. La capacidad total de almacenamiento del sistema es ST = N. Hay elementos de datos T en la base de datos, cada uno con parámetros de base de datos T Número de elementos de datos. Si Tamaño del ítem de datos i fi Frecuencia de acceso al ítem de datos i. Parámetros de replicación Ri Frecuencia normalizada de acceso al ítem de datos i ri Número de réplicas para ítem de datos i n Caracteriza un esquema de replicación particular. Latencia media de la disponibilidad del elemento de datos i Łagg Latencia agregada de la disponibilidad, N Número de dispositivos AutoMata en el sistema. α Capacidad de almacenamiento por AutoMata. γ Duración del viaje del cliente AutoMata. ST Capacidad total de almacenamiento del sistema AutoMata, ST = N · α. Cuadro 1: Términos y sus definiciones tamaño Si. La frecuencia de acceso al ítem de datos i se denota como fi, con T j=1 fj = 1. Deje que la duración del viaje del cliente AutoMata en consideración sea γ. Ahora definimos la frecuencia normalizada de acceso al ítem de datos i, denotado por Ri, como: Ri = (fi)n T j=1(fj)n ; 0 ≤ n ≤ فارسى (1) El exponente n caracteriza una técnica de replicación particular. Un esquema de replicación de raíz cuadrada se realiza cuando n = 0.5 [5]. Esto sirve como la línea base para la comparación con el caso cuando se despliegan zebroids. Ri se normaliza a un valor entre 0 y 1. El número de réplicas para el dato i, denotado como ri, es: ri = min (N, max (1, Ri·N Si )). Esto capta el caso cuando al menos una copia de cada elemento de datos debe estar presente en la red ad-hoc en todo momento. En los casos en que un elemento de datos se puede perder de la red ad-hoc, esta ecuación se convierte en ri = min (N, max (0, Ri·N Si )). En este caso, es posible que sea necesario satisfacer una solicitud para el elemento de datos perdido mediante la obtención del elemento desde un servidor remoto. La latencia de disponibilidad para un elemento de datos i, denotado como i, se define como la primera vez en la que un cliente AutoMata encontrará la primera réplica del elemento accesible a él. Si esta condición no se cumple, entonces se establece a i. Esto indica que el elemento de datos I no estaba disponible para el cliente durante su viaje. Tenga en cuenta que como hay al menos una réplica en el sistema para cada elemento de datos i, al establecer γ a un gran valor nos aseguramos de que los clientes soliciten cualquier elemento de datos i será satisfecho. Sin embargo, en la mayoría de las circunstancias prácticas γ puede no ser tan grande como para encontrar cada elemento de datos. Estamos interesados en la latencia de disponibilidad observada en todos los datos. Por lo tanto, aumentamos la latencia media de disponibilidad para cada ítem de datos i con su fi para obtener la siguiente latencia ponderada de disponibilidad (?agg) métrica:?agg = T i=1?i · fi A continuación, presentamos nuestro enfoque de solución describiendo cómo se seleccionan los zebroids. 3. ENFOQUE DE SOLUCIÓN 3.1 Zebroids Cuando un cliente hace referencia a un elemento de datos que falta en su almacenamiento local, el despachador identifica todos los coches con una copia del elemento de datos como servidores. A continuación, el despachador obtiene las rutas futuras de todos los coches para una duración de tiempo finito equivalente al tiempo máximo que el cliente está dispuesto a esperar a que su solicitud sea atendido. Utilizando esta información, el despachador programa la ruta de entrega más rápida desde cualquiera de los servidores al cliente utilizando cualquier otro coche como transportistas intermedios. Por lo tanto, determina el conjunto óptimo de decisiones de reenvío 76 que permitirá que el elemento de datos se entreguen al cliente en el mínimo de tiempo. Tenga en cuenta que la latencia a lo largo de la ruta de entrega más rápida que emplea un equipo de relé de z zebroids es similar a la obtenida con el encaminamiento epidémico [19] bajo los supuestos de almacenamiento infinito y ninguna interferencia. Una simple instanciación de z-relay zebroids se produce cuando z = 1 y la solicitud de los clientes desencadena una transferencia de una copia del elemento de datos solicitado de un servidor a un zebroid en su vecindad. Tal zebroideo se denomina cebroide uniinstantáneo. En algunos casos, el expedidor podría tener información inexacta sobre las rutas de los coches. Por lo tanto, un zebroid programado sobre la base de esta información inexacta puede no reunirse con su cliente objetivo. Para minimizar la probabilidad de tales escenarios, el despachador puede programar múltiples zebroids. Esto puede acarrear gastos generales adicionales debido a la utilización redundante de recursos para obtener las mismas mejoras de latencia. El tiempo necesario para transferir un elemento de datos de un servidor a un zebroid depende de su tamaño y del ancho de banda del enlace disponible. Con elementos de datos pequeños, es razonable suponer que este tiempo de transferencia es pequeño, especialmente en presencia del plano de datos de alto ancho de banda. Los elementos de datos grandes se pueden dividir en trozos más pequeños que permiten al despachador programar uno o más zebroids para entregar cada trozo a un cliente de una manera oportuna. Esta sigue siendo una dirección de investigación futura. Inicialmente, el número de réplicas para cada ítem de datos puede ser calculado usando la Ecuación 1. Este esquema calcula el número de réplicas de datos en función de su popularidad. Es estática porque el número de réplicas en el sistema no cambia y no se realizan reemplazos. Por lo tanto, esto se conoce como el ambiente de los nozebroids. Cuantificamos el desempeño de las diversas políticas de reemplazo con referencia a esta línea base que no emplea zebroids. Uno puede asumir una fase de arranque en frío, donde inicialmente sólo una o pocas copias de cada elemento de datos existen en el sistema. Muchas ranuras de almacenamiento de los coches pueden estar desocupados. Cuando los coches se encuentran entre sí, construyen nuevas réplicas de algunos elementos de datos seleccionados para ocupar los huecos vacíos. El procedimiento de selección puede consistir en elegir los datos de manera uniforme al azar. Nuevas réplicas se crean siempre y cuando un coche tiene un cierto umbral de su almacenamiento desocupado. Eventualmente, la mayoría de la capacidad de almacenamiento de un coche se agotará. 3.2 Políticas de reemplazo basadas en el operador Las políticas de reemplazo consideradas en este documento son reactivas ya que una sustitución se produce sólo en respuesta a una solicitud emitida para un determinado elemento de datos. Cuando el almacenamiento local de un zebroid está completamente ocupado, necesita reemplazar uno de sus elementos existentes para llevar el elemento de datos solicitado por el cliente. Para ello, el zebroid debe seleccionar a un candidato apropiado para el desalojo. Este proceso de decisión es análogo al encontrado en la paginación del sistema operativo donde el objetivo es maximizar la relación de acceso a la caché para evitar el retraso del acceso al disco [18]. Las políticas de reemplazo basadas en transportistas empleadas en nuestro estudio son las menos usadas recientemente (LRU), las menos usadas con frecuencia (LFU) y las aleatorias (donde un candidato de desalojo es elegido uniformemente al azar). Hemos considerado variantes locales y globales de las políticas LRU/LFU que determinan si el conocimiento local o global de los contenidos de los coches conocidos en el expedidor se utiliza para la decisión de desalojo en un zebroid (ver [9] para más detalles). Las pólizas de sustitución entrañan los siguientes gastos generales. En primer lugar, la complejidad asociada a la aplicación de una política. En segundo lugar, el ancho de banda utilizado para transferir una copia de un elemento de datos de un servidor al zebroid. En tercer lugar, el número medio de reemplazos realizados por los zebroides. Tenga en cuenta que en el caso de no cebroides no se incurre en gastos generales. Las métricas consideradas en este estudio son la latencia de la disponibilidad agregada, Tenga en cuenta que los despachadores con la ayuda del plano de control pueden asegurarse de que no se pierda ningún elemento de datos del sistema. En otras palabras, al menos una réplica de cada elemento de datos se mantiene en la red ad-hoc en todo momento. En tales casos, aunque un coche puede encontrarse con un cliente solicitante antes que otros servidores, si su almacenamiento local contiene elementos de datos con sólo una copia en el sistema, entonces tal coche no se elige como un zebroid. 4. METODOLOGÍA DE ANÁLISIS Aquí presentamos la metodología de evaluación analítica y algunas aproximaciones como ecuaciones de forma cerrada que capturan las mejoras en la latencia de disponibilidad que se pueden obtener tanto con cebros oneinstantáneos como con z-relay. Primero, presentamos algunos preliminares de nuestra metodología de análisis. • Que N sea el número de coches en la red que realizan una caminata aleatoria en 2D en un toro de G× G. Un coche adicional sirve como un cliente que entrega un total de N + 1 coches. Este modelo de movilidad se ha utilizado ampliamente en la literatura [17, 16] principalmente porque es susceptible de análisis y proporciona una base de referencia para comparar el rendimiento de otros modelos de movilidad. Además, esta clase de modelos de movilidad markoviana se ha utilizado para modelar los movimientos de los vehículos [3, 21]. • Asumimos que todos los coches comienzan desde la distribución estacionaria y realizan caminatas aleatorias independientes. Aunque para escenarios de densidad escasa, la suposición de independencia se mantiene, ya no es válido cuando N se aproxima a G. • Deje que el tamaño del repositorio de ítems de datos de interés sea T. Además, el ítem de datos i tiene réplicas ri. Esto implica que los coches ri, identificados como servidores, tienen una copia de este elemento de datos cuando el cliente solicita el elemento i. Todos los resultados de análisis presentados en esta sección se obtienen asumiendo que el cliente está dispuesto a esperar el tiempo necesario para que su solicitud sea satisfecha (duración del viaje sin límite γ = ­). Con el modelo de movilidad al azar en un torso 2D, hay una garantía de que mientras haya al menos una réplica del elemento de datos solicitado en la red, el cliente se encontrará con esta réplica [2]. Las extensiones al análisis que también consideran las duraciones del viaje finito se pueden obtener en [9]. Considere un escenario en el que no se emplean zebroids. En este caso, la latencia de disponibilidad esperada para el ítem de datos es el tiempo de reunión esperado de la caminata aleatoria realizada por el cliente con cualquiera de las caminatas aleatorias realizadas por los servidores. Aldous et al. [2] muestran que el tiempo de reunión de dos caminatas aleatorias en tal entorno puede modelarse como una distribución exponencial con la media C = c · G · log G, donde la constante c 0,17 para G ≥ 25. El tiempo de reunión, o equivalente a la latencia de la disponibilidad de i, para el cliente que solicita datos i es el momento hasta que se encuentre con cualquiera de estas réplicas ri por primera vez. Se trata también de una distribución exponencial con el siguiente valor esperado (obsérvese que esta formulación es válida sólo para casos escasos cuando G >> ri): فارسىi = cGlogG ri La latencia de disponibilidad agregada sin emplear zebroids es entonces esta expresión promediada sobre todos los ítems de datos, ponderada por su frecuencia de acceso: فارسىagg(no − zeb) = T i=1 fi Por otra parte, esta réplica se genera en el paso de tiempo cuando el cliente emite la solicitud. Que Nc i sea el número total esperado de nodos que están en la misma celda que cualquiera de los servidores ri. Luego, tenemos Nc i = (N − ri) · (1 − (1 − 1 G )ri ) (3) En el modelo analítico, suponemos que Nc i nuevas réplicas se crean, de modo que el número total de réplicas se aumenta a ri + Nc i. La latencia de disponibilidad se reduce ya que es más probable que el cliente cumpla con una réplica anterior. La latencia agregada de disponibilidad esperada en el caso de los cebroides uno-instantáneos es dada por, agg(zeb) = T i=1 fi · c · G · log G ri + Nc i = T i=1 fi · C ri + Nc i (4) Tenga en cuenta que al obtener esta expresión, para facilitar el análisis, hemos asumido que las nuevas réplicas comienzan Así trata a todos los portadores de Nc i de forma independiente, al igual que los servidores originales ri. Como mostraremos a continuación en comparación con las simulaciones, esta aproximación proporciona un límite superior a las mejoras que se pueden obtener porque da lugar a una menor latencia esperada en el cliente. Cabe señalar que el procedimiento mencionado anteriormente producirá una latencia similar a la empleada por un expedidor que emplee cebroides oneinstantáneos (véase la sección 3.1). Dado que el despachador es consciente de todos los movimientos futuros del coche que sólo transferiría el elemento de datos solicitado en un único zebroid, si determina que el zebroid se reunirá con el cliente antes que cualquier otro servidor. Este zebroid seleccionado está incluido en las nuevas réplicas de Nc i. 4.2 z-relay zebroids Para calcular la latencia de disponibilidad esperada con z-relay zebroids, utilizamos un análogo de problema de coloración similar a un enfoque utilizado por Spyropoulos et al. [17]. En [9] se dan detalles del procedimiento para obtener una expresión de forma cerrada. La latencia de disponibilidad agregada (agg) con z-relay zebroids es dada por, agg(zeb) = T i=1 [fi · C N + 1 · 1 N + 1 − ri · (N · log N ri − log (N + 1 − ri))] (5) 5. METODOLOGÍA DE SIMULACIÓN El entorno de simulación considerado en este estudio se compone de vehículos como automóviles que llevan una fracción del repositorio de datos. Un parámetro de precisión de predicción proporciona inherentemente una cierta garantía probabilística sobre la confianza de las predicciones de ruta del automóvil conocidas en el despachador. Un valor del 100% implica que las rutas exactas de todos los coches se conocen en todo momento. Un valor del 70% para este parámetro indica que las rutas previstas para los coches coincidirán con las reales con probabilidad 0.7. Tenga en cuenta que esta probabilidad se extiende a través de las rutas del coche durante toda la duración del viaje. Ahora proporcionamos los preliminares del estudio de simulación y luego describimos los parámetros de configuración utilizados en nuestros experimentos. • Similar a la metodología de análisis, el mapa utilizado es un toro 2D. Un modelo de movilidad Markov que representa una caminata aleatoria 2D imparcial en la superficie del toro describe el movimiento de los coches a través de este toro. • Cada cuadrícula/célula es un estado único de esta cadena Markov. En cada ranura de tiempo, cada coche hace una transición de una celda a cualquiera de sus 8 celdas vecinas. La transición es una función de la ubicación actual del coche y una matriz de transición de probabilidad Q = [qij] donde qij es la probabilidad de transición del estado i al estado j. Solo los coches equipados con AutoMata dentro de la misma celda pueden comunicarse entre sí. • Los parámetros γ,  han sido discretizados y expresados en términos del número de franjas horarias. • Un dispositivo AutoMata no mantiene más de una réplica de un elemento de datos. Esto se debe a que las réplicas adicionales ocupan el almacenamiento sin proporcionar beneficios. • Los cebroides de relé z o uno instantáneos pueden ser empleados por solicitud del cliente para mejorar la latencia. • A menos que se mencione lo contrario, se supone que el parámetro de precisión de la predicción es del 100%. Esto se debe a que este estudio pretende cuantificar el efecto de un gran número de parámetros individualmente sobre la latencia de la disponibilidad. Aquí, establecemos el tamaño de cada elemento de datos, Si, para ser 1. α representa el número de ranuras de almacenamiento por AutoMata. Cada ranura de almacenamiento almacena un elemento de datos. γ representa la duración del viaje de los clientes en términos del número de franjas horarias. Por lo tanto, los posibles valores de latencia de disponibilidad están entre 0 y γ.  se define como el número de franjas horarias después de lo cual un dispositivo cliente AutoMata encontrará una réplica del elemento de datos por primera vez. Si una réplica para el elemento de datos solicitado fue encontrado por el cliente en la primera celda, a continuación, se establece  = 0. Si se trata de un elemento de datos solicitado, el cliente no encontró ninguna copia del elemento de datos solicitado durante todo su viaje. En todas nuestras simulaciones, para la ilustración consideramos un 5 × 5 2D-torus con γ fijado a 10. Nuestros experimentos indican que las tendencias en la escala de resultados a mapas de mayor tamaño. Simulamos una distribución sesgada de acceso a los datos T que obedece a la ley Ziffs con una media de 0.27. Esta distribución corresponde a la venta de entradas de cine en los Estados Unidos [6]. Empleamos un esquema de replicación que asigna réplicas para un elemento de datos en función de la raíz cuadrada de la frecuencia de acceso de ese elemento. Se muestra que el esquema de replicación de raíz cuadrada tiene un rendimiento de latencia competitivo en un gran espacio de parámetros [8]. Las réplicas de elementos de datos se distribuyen uniformemente entre los dispositivos AutoMata. Esto sirve como el caso de la línea base sin cebros. El esquema de raíz cuadrada también proporciona la distribución de réplica inicial cuando se emplean zebroids. Tenga en cuenta que los reemplazos realizados por los zebroids causarán cambios en la distribución de réplica de ítems de datos. Las solicitudes generadas según la distribución Zipf se emiten una a la vez. El coche cliente que emite la solicitud se elige de una manera redonda-robina. Después de un período máximo de γ, se registra la latencia con que se encontró esta solicitud. En todos los resultados de simulación, cada punto es un promedio de 200.000 solicitudes. Además, los intervalos de confianza del 95% determinados para los resultados son bastante ajustados para las métricas de latencia y los gastos generales de reemplazo. Por lo tanto, sólo los presentamos para la métrica que captura la mejora porcentual de la latencia con respecto al caso de no-zebroides. 6. RESULTADOS En esta sección, describimos nuestros resultados de evaluación donde se abordan las siguientes preguntas clave. Con una amplia selección de esquemas de reemplazo disponibles para un zebroid, ¿cuál es su efecto en la latencia de disponibilidad? Una pregunta más central es: Do zebroids provide 78 0 20 40 60 80 100 1.5 2 2.5 3 3.5 Número de coches Latencia de disponibilidad agregada (­agg ) lru_global lfu_global lru_local lfu_local random Figura 1: La figura 1 muestra la latencia de disponibilidad al emplear cebroids uno-instantáneos en función de los valores (N,α), cuando el ¿Cuáles son los gastos generales asociados en el empleo de estos zebroides? ¿Qué sucede con estas mejoras en escenarios donde un despachador puede tener información imperfecta sobre las rutas del automóvil? ¿Cuáles son las compensaciones inherentes entre la densidad del automóvil y el almacenamiento por automóvil en lo que respecta a su efecto combinado e individual sobre la latencia de la disponibilidad en presencia de zebroids? Presentamos análisis simples y simulaciones detalladas para proporcionar respuestas a estas preguntas, así como para obtener información sobre el diseño de sistemas basados en operadores. 6.1 ¿Cómo funciona un esquema de sustitución empleado por un latencia de disponibilidad de impacto zebroideo? Para ilustrarlo, presentamos experimentos de escala en los que se emplean cebroides oneinstantáneos (ver Figura 1). Por escala, queremos decir que α y N se cambian proporcionalmente para mantener el almacenamiento total del sistema, ST, constante. Aquí, T = 50 y ST = 200. Elegimos los siguientes valores de (N,α) = {(20,10), (25,8), (50,4), (100,2)}. La cifra indica que un plan de sustitución al azar muestra un rendimiento competitivo. Esto se debe a varias razones. Recuerde que la distribución de réplica inicial se establece según el esquema de replicación de raíz cuadrada. El esquema de reemplazo aleatorio no altera esta distribución ya que hace que los reemplazos ciegos a la popularidad de un elemento de datos. Sin embargo, los reemplazos causan una reorganización dinámica de los datos a fin de atender mejor a la solicitud activa actual. Además, el patrón de movilidad de los coches es aleatorio, por lo que las ubicaciones desde las que los clientes emiten las solicitudes también son aleatorias y no se conocen a priori en el despachador. Estas conclusiones son importantes porque una política de sustitución aleatoria puede aplicarse de manera descentralizada. Los esquemas rru-global y lfu-global proporcionan un rendimiento de latencia que es peor que aleatorio. Esto se debe a que estas políticas desarrollan rápidamente una preferencia por los elementos de datos más populares, creando así un mayor número de réplicas para ellos. Durante el desalojo, los datos más populares casi nunca se seleccionan como candidatos de reemplazo. En consecuencia, hay menos réplicas para los artículos menos populares. Por lo tanto, la distribución inicial del elemento de datos replica cambios de raíz cuadrada a que se asemeja a replicación lineal. El mayor número de réplicas de las partidas de datos populares proporciona beneficios adicionales marginales, mientras que el menor número de réplicas de las demás partidas de datos perjudica el rendimiento de latencia de estas políticas mundiales. Los esquemas lfu-local y lru-local tienen un rendimiento similar al aleatorio ya que no tienen suficiente historial de solicitudes de datos locales. Especulamos que el desempeño de estas políticas locales se acercará al de sus variantes globales para una historia suficientemente grande de solicitudes de ítems de datos. Debido al rendimiento competitivo demostrado por una política aleatoria, para el resto del documento, presentamos el rendimiento de los zebroids que emplean una política de reemplazo aleatorio. 6.2 ¿Proporcionan los zebroids mejoras significativas en la latencia de disponibilidad? Encontramos que en muchos escenarios que emplean zebroids proporciona mejoras sustanciales en la latencia de la disponibilidad. 6.2.1 Análisis Primero consideramos el caso de los cebroides uno-instantáneos. La Figura 2.a muestra la variación en Łagg en función de N para T = 10 y α = 1 con 10 × 10 toros usando la Ecuación 4. Los ejes x e y se dibujan a una escala de registro. En la figura 2.b se muestra la mejoría en % en el Agg obtenido con cebroides uniinstantáneos. En este caso, sólo el eje x se dibuja a una escala de registro. Para ilustrar, suponemos que los datos T son solicitados uniformemente. Inicialmente, cuando la red es escasa la aproximación analítica para mejoras en la latencia con zebroids, obtenida de las ecuaciones 2 y 4, coincide estrechamente con los resultados de la simulación. Sin embargo, a medida que N aumenta, la suposición de escasez para la que el análisis es válido, a saber, N+G, ya no es cierta. Por lo tanto, las dos curvas divergen rápidamente. El punto en el que las dos curvas se alejan unas de otras corresponde a un valor de Además, como se mencionó anteriormente, el análisis proporciona un límite superior a las mejoras de la latencia, ya que trata de las réplicas recién creadas dadas por Nc i de forma independiente. Sin embargo, estas réplicas de Nc i comienzan desde la misma celda que una de las réplicas de servidor ri. Finalmente, el análisis captura un escenario oneshot donde dada una distribución inicial de réplica de datos, se calcula la latencia de disponibilidad. Las nuevas réplicas creadas no afectan las solicitudes futuras del cliente. Debido a las limitaciones de espacio, aquí, se resumen las observaciones en el caso de z-relay zebroids se emplean. El lector interesado puede obtener más detalles en [9]. Observaciones similares, como el caso cebroideo uniinstantaneo, se aplican ya que las curvas de simulación y análisis comienzan de nuevo a divergir cuando los supuestos de análisis ya no son válidos. Sin embargo, la observación clave aquí es que la mejora de la latencia con z-relay zebroids es significativamente mejor que el caso de cebroids uno-instantáneos, especialmente para escenarios de almacenamiento más bajos. Esto se debe a que en escenarios escasos, los traspasos transitivos entre los zebroides crean un mayor número de réplicas para el ítem de datos solicitado, lo que produce una menor latencia de disponibilidad. Por otra parte, también se observa que la curva de validación de simulación para las mejoras en Łagg con z-relay zebroids se aproxima a la del caso cebroideo uniinstantánea para un almacenamiento más alto (valores de N más altos). Esto se debe a que los cebroides uno-instantáneos son un caso especial de z-relay zebroides. 6.2.2 Simulación Realizamos simulaciones para examinar todo el espectro de almacenamiento obtenido cambiando la densidad del vehículo N o el almacenamiento por coche α para capturar también escenarios en los que no se mantienen las hipótesis de escasez para las que el análisis es válido. Separamos el efecto de N y α capturando la variación de N manteniendo constante α (caso 1) y viceversa (caso 2) tanto con z-relay y cebroides uno-instantáneos. Aquí, establecemos el \"tamaño del repositorio\" como T = 25. En el gráfico 3 figura el caso 1 mencionado anteriormente. Se observan tendencias similares con el caso 2, en [9] se dispone de una descripción completa de esos resultados. Con la Figura 3.b, manteniendo constante α, la densidad del coche aumenta inicialmente tiene mayores beneficios de latencia porque el aumento de N introduce más zebroids en el sistema. A medida que N se incrementa aún más, • reduce porque el almacenamiento total en el sistema sube. En consecuencia, el número de réplicas por elemento de datos sube aumentando así el número de servidores 79. Por lo tanto, la política de reemplazo no puede encontrar un zebroid tan a menudo para transportar el elemento de datos solicitado al cliente antes que cualquiera de los servidores. Por otro lado, el aumento del número de servidores beneficia al caso de no-zebroids al reducir a Agg. El efecto neto da lugar a una reducción de los valores más grandes de N. 10 1 10 2 10 3 10 −1 10 0 10 1 10 2 Número de automóviles no-zebroidsanal no-zebroids sim one-instantaneoussim Agregación Disponibilidad Latencia (­agg ) 2.a) Agg 10 1 10 2 10 3 0 10 20 40 50 60 70 80 90 100 Número de automóviles % Mejora Las tendencias mencionadas anteriormente son similares a las obtenidas del análisis. Sin embargo, algo contra-intuitivamente con almacenamiento relativamente más alto del sistema, z-relay zebroids proporcionan mejoras ligeramente más bajas en la latencia en comparación con uno-instantaneous zebroids. Especulamos que esto se debe a las diferentes distribuciones de réplicas de ítems de datos impuestas por ellos. Tenga en cuenta que los reemplazos realizados por los zebroids causan fluctuaciones en estas distribuciones de réplica que pueden afectar futuras solicitudes de clientes. Actualmente estamos explorando opciones adecuadas de parámetros que pueden capturar estas distribuciones de réplicas cambiantes. 6.3 ¿Cuáles son los gastos generales derivados de la mejora de la latencia de los zebroideos? Encontramos que las mejoras en la latencia con zebroids se obtienen con un mínimo de reemplazo de los gastos generales (< 1 por solicitud del cliente). 6.3.1 Análisis Con cebroides uniinstantáneos, para cada solicitud de cliente se emplea un máximo de un cebroide para mejorar la latencia. Por lo tanto, los gastos generales de sustitución por solicitud del cliente pueden ascender a un máximo de uno. Recordemos que para calcular la latencia con una latencia instantánea 0 50 100 150 200 250 350 400 0 1 2 3 4 5 6 Número de coches Latencia de disponibilidad agregada (?agg ) no-zebroids one-instantaneous z-relays 3.a 0 50 100 150 200 250 300 350 400 0 10 20 30 40 50 60 Número de coches % Mejora en?agg wrt no-zebro Ahora un reemplazo sólo se incumple si una de estas réplicas de Nc i de nueva creación se reúne con el cliente antes que cualquiera de los servidores de ri. Que Xri y XNc i respectivamente sean variables aleatorias que capturen el tiempo mínimo hasta que cualquiera de las réplicas de ri y Nc i cumpla con el cliente. Dado que Xri y XNc i se supone que son independientes, por la propiedad de variables aleatorias distribuidas exponencialmente tenemos, Overhead/request = 1 · P(XNc i < Xri ) + 0 · P(Xri ≤ XNc i ) (6) Overhead/request = ri C ri C + Nc i C = ri ri + Nc i (7) Sin embargo, si N  es constante entonces el aumento de las causas N α 80 0 20 40 60 80 100 0 0,05 0,15 0,20 0,25 0,35 0,40 0,45 0,5 Número de coches cebroides instantáneos número medio de reemplazos por solicitud (N=20,α=10) (N=25,α=8) (N=50,α=4) (N=100,α=2) Figura 4: La figura 4 captura el reemplazo de Esto implica que se incurre en un aumento de los gastos generales de sustitución para valores N y α más altos. Por otra parte, cuando ri = N, esto significa que cada coche tiene una réplica de elemento de datos i. Por lo tanto, no se emplean zebroids cuando se solicita este artículo, lo que da lugar a un gasto general/solicitud para este artículo como cero. A continuación, presentamos resultados de simulación que validan nuestra hipótesis de análisis para los gastos generales asociados con el despliegue de cebroides uno-instantáneos. 6.3.2 Simulación En la figura 4 se muestra la superficie de repuesto con cebroides uno-instantáneos cuando se varían (N,α) manteniendo constante el almacenamiento total del sistema. Las tendencias mostradas por la simulación concuerdan con las previstas por el análisis anterior. Sin embargo, el almacenamiento total del sistema puede ser cambiado ya sea por la densidad variable del coche (N) o el almacenamiento por coche (α). Debido a tendencias similares, aquí presentamos el caso cuando α se mantiene constante y N es variada (Figura 5). Referimos al lector a [9] para el caso cuando α es variado y N se mantiene constante. Presentamos un argumento intuitivo para el comportamiento de las curvas superiores de reemplazo de la solicitud. Cuando el almacenamiento es extremadamente escaso de modo que sólo existe una réplica por elemento de datos en la red AutoMata, el número de reemplazos realizados por los zebroids es cero ya que cualquier reemplazo causará que un elemento de datos se pierda del sistema. El despachador garantiza que no se pierda ningún elemento de datos del sistema. En el otro extremo del espectro, si el almacenamiento se vuelve tan abundante que α = T entonces todo el repositorio de elementos de datos se puede replicar en cada coche. El número de reemplazos es de nuevo cero ya que cada solicitud puede ser satisfecha localmente. Un escenario similar ocurre si N se aumenta a un valor tan grande que otro coche con el elemento de datos solicitado siempre está disponible en las proximidades del cliente. Sin embargo, hay un espectro de almacenamiento en el medio donde los reemplazos por los zebroides programados dan lugar a mejoras en el Agg (ver Figura 3). Por otra parte, observamos que para escenarios de almacenamiento escasos, las mejoras más altas con z-relay zebroids se obtienen al costo de un aumento de los gastos generales de reemplazo en comparación con el caso de cebroids uno-instantáneos. Esto se debe a que en el caso anterior, cada uno de estos z zebroids seleccionados a lo largo de la ruta de latencia más baja al cliente necesita realizar un reemplazo. Sin embargo, los gastos generales de sustitución son todavía inferiores a 1 lo que indica que en promedio se necesita menos de un reemplazo por solicitud del cliente, incluso cuando se emplean z-relay zebroids. 0 50 100 150 200 250 300 350 400 0 0,1 0,2 0,3 0,4 0,6 0,7 0,8 0,9 1 Número de coches z-reemplaza uno-instantánea Número medio de reemplazos por solicitud Figura 5: La figura 5 muestra los gastos generales de reemplazo con cebroide para los casos en que N es diferente manteniendo α = 2. 10 20 30 40 50 60 70 80 90 100 0 0,5 1 1,5 2 2,5 3 3,5 4 Porcentaje de predicción no-zebroideos (N=50) uno-instantáneos (N=50) z-relés (N=50) no-zebroideos (N=200) uno-instantáneos (N=200) z-relés (N=200) Disponibilidad agregada Latencia ( 6.4 ¿Qué sucede con la latencia de la disponibilidad con zebroids en escenarios con inexactitudes en las predicciones de la ruta del coche? Encontramos que los zebroids continúan proporcionando mejoras en la latencia de la disponibilidad incluso con menor precisión en las predicciones de la ruta del coche. Utilizamos un único parámetro p para cuantificar la exactitud de las predicciones de la ruta del coche. 6.4.1 Análisis Dado que p representa la probabilidad de que una ruta del automóvil predicha por el expedidor coincida con la actual, por lo tanto, la latencia con los zebroideos puede ser aproximada por, 6.4.2 Simulación En la figura 6 se muestra la variación en el Agg en función de esta métrica de precisión de la predicción de ruta. Observamos una reducción suave en la mejora de 81 en Agg a medida que la métrica de precisión de predicción reduce. Para los zebroids que están programados pero no se reúnen con el cliente debido al error de predicción, etiquetamos tales reemplazos hechos por los zebroids como fallados. Se ve que los reemplazos fallidos aumentan gradualmente a medida que la precisión de la predicción se reduce. 6.5 ¿En qué condiciones se maximizan las mejoras en la latencia de disponibilidad con zebroids? Sorprendentemente, encontramos que las mejoras en la latencia obtenidas con cebroides uno-instantáneos son independientes de la distribución de entrada de la popularidad de los ítems de datos. 6.5.1 Análisis La diferencia fraccionaria (marcada en la letra ) en la latencia entre los cebroides no-zebroideos y los cebroides uno-instantáneos se obtiene a partir de las ecuaciones 2, 3 y 4 de la siguiente forma: T i=1 fi·C ri − T i=1 fi·C ri+(N−ri)·(1−(1− 1 G )ri Let α = 1, haciendo el almacenamiento total en el sistema ST = N. Suponiendo que la distribución de réplica inicial es según el esquema de replicación de raíz cuadrada, tenemos, ri = fi·N T j = 1 fj. Por lo tanto, obtenemos fi = K2 ·r2 i N2, donde K = T j=1 fj. Utilizando esto, junto con la aproximación (1 − x)n 1 − n · x para x pequeña, simplificamos la ecuación anterior para obtener, • = 1 − T i=1 ri 1+ N−ri G T i=1 ri Para determinar cuándo se maximizan las ganancias con cebroides uno-instantáneos, podemos enmarcar un problema de optimización de la siguiente manera: Maximizar •, sujeto a T i Con un esquema de replicación de raíz cuadrada, las mejoras obtenidas con cebroides uniinstantáneos son independientes de la distribución de popularidad de entrada de los ítems de datos. (Ver [9] para la prueba) 6.5.2 Simulación Realizamos simulaciones con dos diferentes distribución de frecuencias de ítems de datos: Uniforme y Zipfian (con media= 0.27). En ambos casos se obtienen mejoras similares de latencia con cebroides uniinstantáneos. Este resultado tiene importantes implicaciones. En casos con popularidad sesgada hacia ciertos ítems de datos, las mejoras agregadas en la latencia en todas las solicitudes de ítems de datos siguen siendo las mismas. Incluso en escenarios en los que la frecuencia de acceso a los datos cambia dinámicamente, los zebroids seguirán proporcionando mejoras similares en la latencia. 7. CONCLUSIONES Y FUTURAS DIRECCIONES DE INVESTIGACIÓN En este estudio, examinamos las mejoras en la latencia que se pueden obtener en presencia de transportistas que entregan un elemento de datos desde un servidor a un cliente. Se cuantificó la variación de la latencia de disponibilidad en función de un rico conjunto de parámetros como la densidad del coche, el almacenamiento por coche, el tamaño de la base de datos de título y las políticas de reemplazo empleadas por los zebroids. A continuación se resumen algunas direcciones clave de investigación en el futuro que pretendemos seguir. Para reflejar mejor la realidad nos gustaría validar las observaciones obtenidas de este estudio con algunos rastros de simulación del mundo real de movimientos vehiculares (por ejemplo usando CORSIM [1]). Esto también servirá como validación para la utilidad del modelo de movilidad Markov utilizado en este estudio. Actualmente estamos analizando el desempeño de los zebroids en un conjunto de datos del mundo real que comprende una red ad-hoc de autobuses que se mueven alrededor de un pequeño barrio en Amherst [4]. Los cebroides también se pueden utilizar para la entrega de datos que transportan información sensible al retraso con una determinada caducidad. Las extensiones a zebroids que satisfacen estos requisitos de aplicación presentan una dirección de investigación futura interesante. 8. AGRADECIMIENTOS Esta investigación fue apoyada en parte por una beca Annenberg y subvenciones NSF numeradas CNS-0435505 (NeTS NOSS), CNS-0347621 (CAREER), y IIS-0307908. 9. REFERENCIAS [1] Administración Federal de Carreteras. Simulación del corredor. Versión 5.1, http://www.ops.fhwa.dot.gov/trafficanalysistools/cors im.htm. [2] D. Aldous y J. Llena. Cadenas de markov reversibles y caminatas aleatorias en gráficos. En preparación. [3] A. Bar-Noy, I. Kessler y M. Sidi. Usuarios móviles: Para actualizar o no actualizar. En IEEE Infocom, 1994. [4] J. Burgess, B. Gallagher, D. Jensen, y B. Levine. MaxProp: Enrutamiento para redes tolerantes a perturbaciones basadas en vehículos. En IEEE Infocom, abril de 2006. [5] E. Cohen y S. Shenker. Estrategias de replicación en redes de pares no estructuradas. En SIGCOMM, 2002. [6] A. Dan, D. Dias, R. Mukherjee, D. Sitaram y R. Tewari. Buffering y Caching en servidores de vídeo a gran escala. En COMPCON, 1995. [7] S. Ghandeharizadeh, S. Kapadia, y B. Krishnamachari. PAVAN: Marco normativo para la disponibilidad de contenidos en las redes ad hoc de vehículos. En VANET, Nueva York, Nueva York, Estados Unidos, 2004. ACM Press. [8] S. Ghandeharizadeh, S. Kapadia, y B. Krishnamachari. Comparación de estrategias de replicación para la disponibilidad de contenido en redes C2P2. En MDM, mayo de 2005. [9] S. Ghandeharizadeh, S. Kapadia, y B. Krishnamachari. Una evaluación de la latencia de disponibilidad en redes de vehículos ad-hoc basadas en el portador. Informe técnico, Departamento de Ciencias de la Computación, Universidad del Sur de California, CENG-2006-1, 2006. [10] S. Ghandeharizadeh y B. Krishnamachari. C2p2: Una red inter pares para servicios de información de automóviles a petición. En Globe. IEEE, 2004. [11] T. Hara. Asignación eficaz de réplicas en redes ad-hoc para mejorar la accesibilidad de datos. En IEEE Infocom, 2001. [12] H. Hayashi, T. Hara, y S. Nishio. Un método de asignación de réplica Adaptarse a los cambios de topología en redes ad-hoc. En DEXA, 2005. [13] P. Juang, H. Oki, Y. Wang, M. Martonosi, L. Peh, y D. Rubenstein. Computación energéticamente eficiente para el seguimiento de vida silvestre: compensaciones de diseño y experiencias tempranas con ZebraNet. Silgarch Comput. Archit. Noticias, 2002. [14] A. Pentland, R. Fletcher y A. Hasson. DakNet: Repensar la conectividad en las naciones en desarrollo. Computadora, 37(1):78-83, 2004. [15] F. Sailhan y V. Issarny. Caché cooperativo en redes ad-hoc. En MDM, 2003. [16] R. Shah, S. Roy, S. Jain y W. Brunette. Mulas de datos: Modelado y análisis de una arquitectura de tres niveles para redes de sensores escasas. Elsevier ad-hoc Networks Journal, 1o de septiembre de 2003. [17] T. Schiropoulos, K. Psounis y C. Raghavendra. Enrutamiento de una sola copia en redes móviles conectadas intermitentemente. En SECON, abril de 2004. [18] A. Tanenbaum. Sistemas operativos modernos, 2a edición, capítulo 4, sección 4.4. Prentice Hall, 2001. [19] A. Vahdat y D. Becker. Ruta epidémica para redes ad-hoc parcialmente conectadas. Informe técnico, Departamento de Informática, Universidad de Duke, 2000. [20] W. Zhao, M. Ammar, y E. Zegura. Un enfoque de ferriing de mensajes para la entrega de datos en redes móviles ad-hoc escasas. En MobiHoc, págs. 187 a 198, Nueva York, NY, Estados Unidos, 2004. ACM Press. [21] M. Zonoozi y P. Dassanayake. Modelado de Movilidad de Usuario y Caracterización del Patrón de Movilidad. Revista IEEE sobre áreas seleccionadas en las comunicaciones, 15:1239-1252, septiembre de 1997. 82 ",
            "error": [
                ""
            ]
        },
        "replacement policy": {
            "translated_key": "política de reemplazo",
            "translated_annotated_text": "Una evaluación de la latencia de disponibilidad en redes ad hoc vehiculares basadas en portador Shahram Ghandeharizadeh Dept of Computer Science Univ of Southern California Los Angeles, CA 90089, USA shahram@usc.edu Shyam Kapadia Dept of Computer Science Univ of Southern California Los Angeles, CA 90089, USA kapadia@usc.edu Bhaskar Krishna Nuestro entorno de destino utiliza portadores de datos, llamados zebroids, donde un dispositivo móvil lleva un elemento de datos en nombre de un servidor a un cliente, minimizando así su latencia de disponibilidad. En este estudio, cuantificamos la variación de la latencia de disponibilidad con zebroids en función de un rico conjunto de parámetros como densidad de coche, almacenamiento por dispositivo, tamaño del repositorio y políticas de reemplazo empleadas por zebroids. Utilizando análisis y simulaciones extensas, obtenemos ideas novedosas sobre el diseño de sistemas basados en operadores. Se pueden obtener mejoras significativas en la latencia con zebroids a costa de un mínimo gasto general. Estas mejoras se producen incluso en escenarios con menor precisión en las predicciones de las rutas del coche. Dos hallazgos particularmente sorprendentes son: (1) una \"política de reemplazo\" ingenua y aleatoria empleada por los zebroids muestra un rendimiento competitivo, y (2) mejoras de la latencia obtenidas con una instanciación simplificada de zebroids se encuentran robustas a cambios en la distribución de popularidad de los ítems de datos. Categorías y Subject Descriptores: C.2.4 [Sistemas distribuidos]: Términos Generales del Cliente/Servidor: Algoritmos, Rendimiento, Diseño, Experimentación. 1. INTRODUCCIÓN Los avances tecnológicos en las esferas del almacenamiento y las comunicaciones inalámbricas han hecho posible ahora prever la entrega a petición de datos, por ejemplo, para clips de vídeo y audio, en redes de peer-topeer vehiculares. En trabajos previos, Ghandeharizadeh et al. [10] introduce el concepto de vehículos equipados con un dispositivo Car-to-Car-Peer-toPeer, denominado AutoMata, para el entretenimiento dentro del vehículo. Las características notables de un AutoMata incluyen un dispositivo de almacenamiento masivo que ofrece cientos de gigabytes (GB) de almacenamiento, un procesador rápido y varios tipos de tarjetas de red. Incluso con las unidades de disco actuales de 500 GB, un repositorio de contenido de entretenimiento diverso puede exceder la capacidad de almacenamiento de un solo AutoMata. Tales repositorios constituyen el foco de este estudio. Para intercambiar datos, suponemos que cada AutoMata está configurado con dos tipos de tarjetas de red: 1) una tarjeta de red de baja anchura de banda con un radio-rango largo en el orden de millas que permite a un dispositivo AutoMata comunicarse con una estación celular cercana o WiMax, 2) una tarjeta de red de alta anchura de banda con un radio-rango limitado en el orden de cientos de pies. La conexión de ancho de banda alto admite tasas de datos en el orden de decenas a cientos de megabits por segundo y representa la red ad-hoc peer a peer entre los vehículos. Esto se etiqueta como el plano de datos y se emplea para intercambiar elementos de datos entre dispositivos. La conexión de baja anchura de banda sirve como plano de control, permitiendo a los dispositivos AutoMata intercambiar meta-datos con uno o más servidores centralizados. Esta conexión ofrece anchos de banda en el orden de decenas a cientos de Kilobits por segundo. Los servidores centralizados, denominados despachadores, calculan los calendarios de entrega de datos a lo largo del plano de datos utilizando los metadatos proporcionados. Estos horarios se transmiten a los vehículos participantes que utilizan el avión de control. La viabilidad técnica de tal arquitectura de dos niveles se presenta en [7], con resultados preliminares para demostrar que el ancho de banda del plano de control es suficiente para el intercambio de la información de control necesaria para realizar tal aplicación. En un escenario típico, un dispositivo AutoMata presenta a un pasajero con una lista de elementos de datos1, mostrando tanto el nombre de cada elemento de datos como su latencia de disponibilidad. Este último, denotado como ♥, se define como el momento más temprano en que el cliente encuentra una copia de su elemento de datos solicitado. Un elemento de datos está disponible inmediatamente cuando reside en el almacenamiento local del dispositivo AutoMata que atiende a la solicitud. Debido a las restricciones de almacenamiento, un AutoMata puede no almacenar todo el repositorio. En este caso, la latencia de disponibilidad es el tiempo desde que el usuario emite una solicitud hasta que el AutoMata encuentra otro coche que contiene el elemento de datos referenciado. (Los términos coche y AutoMata se utilizan indistintamente en este estudio.) La latencia de disponibilidad para un artículo es una función de la ubicación actual del cliente, su ruta de destino y viaje, el modelo de movilidad de los vehículos equipados con AutoMata, el número de réplicas construidas para los diferentes elementos de datos, y la colocación de réplicas de elementos de datos a través de los vehículos. Un método para mejorar la latencia de disponibilidad es emplear portadores de datos que transportan una réplica del elemento de datos solicitado desde un coche servidor que lo contiene a un cliente que lo solicitó. Estos portadores de datos se denominan zebroids. La selección de cebroides es facilitada por la arquitectura de dos niveles. El plano de control permite la recopilación centralizada de información en un despachador presente en una estación base.2 Algunos ejemplos de control en1 Sin pérdida de generalidad, el término elemento de datos puede ser medios tradicionales como texto o medios continuos como un clip de audio o vídeo. 2 Puede haber despachadores desplegados en un subconjunto de las estaciones de base para la tolerancia a fallos y la robustez. Los distribuidores entre estaciones de base pueden comunicarse a través de la infraestructura cableada. 75 formación son actualmente solicitudes activas, ruta de viaje de los clientes y sus destinos, y caminos de los otros coches. Para cada solicitud del cliente, el despachador puede elegir un conjunto de portadores z que colaboran para transferir un elemento de datos de un servidor a un cliente (z-relay zebroids). Aquí, z es el número de zebroids tales que 0 ≤ z < N, donde N es el número total de coches. Cuando z = 0 no hay portadores, lo que requiere un servidor para entregar el elemento de datos directamente al cliente. De lo contrario, el equipo de relé elegido de z zebroids se entregará los datos de forma transitoria unos a otros para llegar al cliente, reduciendo así la latencia de la disponibilidad (para más detalles, véase la sección 3.1). Para aumentar la robustez, el despachador puede emplear múltiples equipos de relé de portadoras z para cada solicitud. Esto puede ser útil en escenarios en los que el despachador tiene menor precisión de predicción en la información sobre las rutas de los coches. Por último, las restricciones de almacenamiento pueden requerir que un zebroid desaloje elementos de datos existentes de su almacenamiento local para acomodar el elemento solicitado por el cliente. En este estudio, se cuantifican los siguientes factores principales que afectan a la latencia de la disponibilidad en presencia de zebroideos: (i) tamaño del repositorio de datos, (ii) densidad del coche, (iii) capacidad de almacenamiento por coche, (iv) duración del viaje del cliente, (v) esquema de reemplazo empleado por los zebroideos, y (vi) exactitud de las predicciones de la ruta del coche. Para un subconjunto significativo de estos factores, abordamos algunas preguntas clave relativas al uso de zebroids tanto a través del análisis como de simulaciones extensas. Nuestras principales conclusiones son las siguientes. Una \"política de reemplazo\" aleatoria e ingenua empleada por los zebroids muestra un rendimiento competitivo en términos de latencia de disponibilidad. Con esta política, se pueden obtener mejoras sustanciales en la latencia con zebroids con un mínimo de gastos generales de reemplazo. En escenarios más prácticos, donde el despachador tiene información inexacta sobre las rutas del coche, los zebroids continúan proporcionando mejoras de la latencia. Un resultado sorprendente es que los cambios en la popularidad de los ítems de datos no impactan las ganancias de latencia obtenidas con una simple instanciación de z-relay zebroids llamados cebroids uno-instantáneos (ver Sección 3.1). Este estudio sugiere una serie de direcciones interesantes a seguir para obtener una mejor comprensión del diseño de sistemas basados en el portador que mejoran la latencia de disponibilidad. Trabajo relacionado: La replicación en redes móviles ad-hoc ha sido un tema ampliamente estudiado [11, 12, 15]. Sin embargo, ninguno de estos estudios emplea zebroids como portadores de datos para reducir la latencia de las solicitudes de los clientes. Varios estudios novedosos e importantes como ZebraNet [13], DakNet [14], Data Mules [16], Message Ferries [20] y Seek and Focus [17] han analizado factores que afectan a redes conectadas intermitentemente consistentes en portadores de datos similares en espíritu a los zebroideos. Los factores considerados por cada estudio son dictados por su supuesto entorno y aplicación diana. Una característica novedosa de nuestro estudio es el impacto en la latencia de disponibilidad para un repositorio de datos dado de elementos. En [9] se puede obtener una descripción detallada de las obras relacionadas. El resto de este documento está organizado de la siguiente manera. En la sección 2 se ofrece una visión general de la terminología junto con los factores que influyen en la latencia de la disponibilidad en presencia de zebroides. En la sección 3 se describe cómo se pueden emplear los cebroides. En la sección 4 se proporciona información detallada sobre la metodología de análisis empleada para captar el desempeño con los zebroids. En la sección 5 se describen los detalles del entorno de simulación utilizado para la evaluación. La sección 6 recoge las preguntas clave examinadas en este estudio y las responde a través de análisis y simulaciones. Por último, en la sección 7 se presentan breves conclusiones y futuras orientaciones de la investigación. 2. SINOPSIS Y TERMINOLOGÍA La Tabla 1 resume la notación de los parámetros utilizados en el artículo. A continuación introducimos algunas terminologías utilizadas en el artículo. Asumir una red de coches N AutoMata equipados, cada uno con capacidad de almacenamiento de α bytes. La capacidad total de almacenamiento del sistema es ST = N. Hay elementos de datos T en la base de datos, cada uno con parámetros de base de datos T Número de elementos de datos. Si Tamaño del ítem de datos i fi Frecuencia de acceso al ítem de datos i. Parámetros de replicación Ri Frecuencia normalizada de acceso al ítem de datos i ri Número de réplicas para ítem de datos i n Caracteriza un esquema de replicación particular. Latencia media de la disponibilidad del elemento de datos i Łagg Latencia agregada de la disponibilidad, N Número de dispositivos AutoMata en el sistema. α Capacidad de almacenamiento por AutoMata. γ Duración del viaje del cliente AutoMata. ST Capacidad total de almacenamiento del sistema AutoMata, ST = N · α. Cuadro 1: Términos y sus definiciones tamaño Si. La frecuencia de acceso al ítem de datos i se denota como fi, con T j=1 fj = 1. Deje que la duración del viaje del cliente AutoMata en consideración sea γ. Ahora definimos la frecuencia normalizada de acceso al ítem de datos i, denotado por Ri, como: Ri = (fi)n T j=1(fj)n ; 0 ≤ n ≤ فارسى (1) El exponente n caracteriza una técnica de replicación particular. Un esquema de replicación de raíz cuadrada se realiza cuando n = 0.5 [5]. Esto sirve como la línea base para la comparación con el caso cuando se despliegan zebroids. Ri se normaliza a un valor entre 0 y 1. El número de réplicas para el dato i, denotado como ri, es: ri = min (N, max (1, Ri·N Si )). Esto capta el caso cuando al menos una copia de cada elemento de datos debe estar presente en la red ad-hoc en todo momento. En los casos en que un elemento de datos se puede perder de la red ad-hoc, esta ecuación se convierte en ri = min (N, max (0, Ri·N Si )). En este caso, es posible que sea necesario satisfacer una solicitud para el elemento de datos perdido mediante la obtención del elemento desde un servidor remoto. La latencia de disponibilidad para un elemento de datos i, denotado como i, se define como la primera vez en la que un cliente AutoMata encontrará la primera réplica del elemento accesible a él. Si esta condición no se cumple, entonces se establece a i. Esto indica que el elemento de datos I no estaba disponible para el cliente durante su viaje. Tenga en cuenta que como hay al menos una réplica en el sistema para cada elemento de datos i, al establecer γ a un gran valor nos aseguramos de que los clientes soliciten cualquier elemento de datos i será satisfecho. Sin embargo, en la mayoría de las circunstancias prácticas γ puede no ser tan grande como para encontrar cada elemento de datos. Estamos interesados en la latencia de disponibilidad observada en todos los datos. Por lo tanto, aumentamos la latencia media de disponibilidad para cada ítem de datos i con su fi para obtener la siguiente latencia ponderada de disponibilidad (?agg) métrica:?agg = T i=1?i · fi A continuación, presentamos nuestro enfoque de solución describiendo cómo se seleccionan los zebroids. 3. ENFOQUE DE SOLUCIÓN 3.1 Zebroids Cuando un cliente hace referencia a un elemento de datos que falta en su almacenamiento local, el despachador identifica todos los coches con una copia del elemento de datos como servidores. A continuación, el despachador obtiene las rutas futuras de todos los coches para una duración de tiempo finito equivalente al tiempo máximo que el cliente está dispuesto a esperar a que su solicitud sea atendido. Utilizando esta información, el despachador programa la ruta de entrega más rápida desde cualquiera de los servidores al cliente utilizando cualquier otro coche como transportistas intermedios. Por lo tanto, determina el conjunto óptimo de decisiones de reenvío 76 que permitirá que el elemento de datos se entreguen al cliente en el mínimo de tiempo. Tenga en cuenta que la latencia a lo largo de la ruta de entrega más rápida que emplea un equipo de relé de z zebroids es similar a la obtenida con el encaminamiento epidémico [19] bajo los supuestos de almacenamiento infinito y ninguna interferencia. Una simple instanciación de z-relay zebroids se produce cuando z = 1 y la solicitud de los clientes desencadena una transferencia de una copia del elemento de datos solicitado de un servidor a un zebroid en su vecindad. Tal zebroideo se denomina cebroide uniinstantáneo. En algunos casos, el expedidor podría tener información inexacta sobre las rutas de los coches. Por lo tanto, un zebroid programado sobre la base de esta información inexacta puede no reunirse con su cliente objetivo. Para minimizar la probabilidad de tales escenarios, el despachador puede programar múltiples zebroids. Esto puede acarrear gastos generales adicionales debido a la utilización redundante de recursos para obtener las mismas mejoras de latencia. El tiempo necesario para transferir un elemento de datos de un servidor a un zebroid depende de su tamaño y del ancho de banda del enlace disponible. Con elementos de datos pequeños, es razonable suponer que este tiempo de transferencia es pequeño, especialmente en presencia del plano de datos de alto ancho de banda. Los elementos de datos grandes se pueden dividir en trozos más pequeños que permiten al despachador programar uno o más zebroids para entregar cada trozo a un cliente de una manera oportuna. Esta sigue siendo una dirección de investigación futura. Inicialmente, el número de réplicas para cada ítem de datos puede ser calculado usando la Ecuación 1. Este esquema calcula el número de réplicas de datos en función de su popularidad. Es estática porque el número de réplicas en el sistema no cambia y no se realizan reemplazos. Por lo tanto, esto se conoce como el ambiente de los nozebroids. Cuantificamos el desempeño de las diversas políticas de reemplazo con referencia a esta línea base que no emplea zebroids. Uno puede asumir una fase de arranque en frío, donde inicialmente sólo una o pocas copias de cada elemento de datos existen en el sistema. Muchas ranuras de almacenamiento de los coches pueden estar desocupados. Cuando los coches se encuentran entre sí, construyen nuevas réplicas de algunos elementos de datos seleccionados para ocupar los huecos vacíos. El procedimiento de selección puede consistir en elegir los datos de manera uniforme al azar. Nuevas réplicas se crean siempre y cuando un coche tiene un cierto umbral de su almacenamiento desocupado. Eventualmente, la mayoría de la capacidad de almacenamiento de un coche se agotará. 3.2 Políticas de reemplazo basadas en el operador Las políticas de reemplazo consideradas en este documento son reactivas ya que una sustitución se produce sólo en respuesta a una solicitud emitida para un determinado elemento de datos. Cuando el almacenamiento local de un zebroid está completamente ocupado, necesita reemplazar uno de sus elementos existentes para llevar el elemento de datos solicitado por el cliente. Para ello, el zebroid debe seleccionar a un candidato apropiado para el desalojo. Este proceso de decisión es análogo al encontrado en la paginación del sistema operativo donde el objetivo es maximizar la relación de acceso a la caché para evitar el retraso del acceso al disco [18]. Las políticas de reemplazo basadas en transportistas empleadas en nuestro estudio son las menos usadas recientemente (LRU), las menos usadas con frecuencia (LFU) y las aleatorias (donde un candidato de desalojo es elegido uniformemente al azar). Hemos considerado variantes locales y globales de las políticas LRU/LFU que determinan si el conocimiento local o global de los contenidos de los coches conocidos en el expedidor se utiliza para la decisión de desalojo en un zebroid (ver [9] para más detalles). Las pólizas de sustitución entrañan los siguientes gastos generales. En primer lugar, la complejidad asociada a la aplicación de una política. En segundo lugar, el ancho de banda utilizado para transferir una copia de un elemento de datos de un servidor al zebroid. En tercer lugar, el número medio de reemplazos realizados por los zebroides. Tenga en cuenta que en el caso de no cebroides no se incurre en gastos generales. Las métricas consideradas en este estudio son la latencia de la disponibilidad agregada, Tenga en cuenta que los despachadores con la ayuda del plano de control pueden asegurarse de que no se pierda ningún elemento de datos del sistema. En otras palabras, al menos una réplica de cada elemento de datos se mantiene en la red ad-hoc en todo momento. En tales casos, aunque un coche puede encontrarse con un cliente solicitante antes que otros servidores, si su almacenamiento local contiene elementos de datos con sólo una copia en el sistema, entonces tal coche no se elige como un zebroid. 4. METODOLOGÍA DE ANÁLISIS Aquí presentamos la metodología de evaluación analítica y algunas aproximaciones como ecuaciones de forma cerrada que capturan las mejoras en la latencia de disponibilidad que se pueden obtener tanto con cebros oneinstantáneos como con z-relay. Primero, presentamos algunos preliminares de nuestra metodología de análisis. • Que N sea el número de coches en la red que realizan una caminata aleatoria en 2D en un toro de G× G. Un coche adicional sirve como un cliente que entrega un total de N + 1 coches. Este modelo de movilidad se ha utilizado ampliamente en la literatura [17, 16] principalmente porque es susceptible de análisis y proporciona una base de referencia para comparar el rendimiento de otros modelos de movilidad. Además, esta clase de modelos de movilidad markoviana se ha utilizado para modelar los movimientos de los vehículos [3, 21]. • Asumimos que todos los coches comienzan desde la distribución estacionaria y realizan caminatas aleatorias independientes. Aunque para escenarios de densidad escasa, la suposición de independencia se mantiene, ya no es válido cuando N se aproxima a G. • Deje que el tamaño del repositorio de ítems de datos de interés sea T. Además, el ítem de datos i tiene réplicas ri. Esto implica que los coches ri, identificados como servidores, tienen una copia de este elemento de datos cuando el cliente solicita el elemento i. Todos los resultados de análisis presentados en esta sección se obtienen asumiendo que el cliente está dispuesto a esperar el tiempo necesario para que su solicitud sea satisfecha (duración del viaje sin límite γ = ­). Con el modelo de movilidad al azar en un torso 2D, hay una garantía de que mientras haya al menos una réplica del elemento de datos solicitado en la red, el cliente se encontrará con esta réplica [2]. Las extensiones al análisis que también consideran las duraciones del viaje finito se pueden obtener en [9]. Considere un escenario en el que no se emplean zebroids. En este caso, la latencia de disponibilidad esperada para el ítem de datos es el tiempo de reunión esperado de la caminata aleatoria realizada por el cliente con cualquiera de las caminatas aleatorias realizadas por los servidores. Aldous et al. [2] muestran que el tiempo de reunión de dos caminatas aleatorias en tal entorno puede modelarse como una distribución exponencial con la media C = c · G · log G, donde la constante c 0,17 para G ≥ 25. El tiempo de reunión, o equivalente a la latencia de la disponibilidad de i, para el cliente que solicita datos i es el momento hasta que se encuentre con cualquiera de estas réplicas ri por primera vez. Se trata también de una distribución exponencial con el siguiente valor esperado (obsérvese que esta formulación es válida sólo para casos escasos cuando G >> ri): فارسىi = cGlogG ri La latencia de disponibilidad agregada sin emplear zebroids es entonces esta expresión promediada sobre todos los ítems de datos, ponderada por su frecuencia de acceso: فارسىagg(no − zeb) = T i=1 fi Por otra parte, esta réplica se genera en el paso de tiempo cuando el cliente emite la solicitud. Que Nc i sea el número total esperado de nodos que están en la misma celda que cualquiera de los servidores ri. Luego, tenemos Nc i = (N − ri) · (1 − (1 − 1 G )ri ) (3) En el modelo analítico, suponemos que Nc i nuevas réplicas se crean, de modo que el número total de réplicas se aumenta a ri + Nc i. La latencia de disponibilidad se reduce ya que es más probable que el cliente cumpla con una réplica anterior. La latencia agregada de disponibilidad esperada en el caso de los cebroides uno-instantáneos es dada por, agg(zeb) = T i=1 fi · c · G · log G ri + Nc i = T i=1 fi · C ri + Nc i (4) Tenga en cuenta que al obtener esta expresión, para facilitar el análisis, hemos asumido que las nuevas réplicas comienzan Así trata a todos los portadores de Nc i de forma independiente, al igual que los servidores originales ri. Como mostraremos a continuación en comparación con las simulaciones, esta aproximación proporciona un límite superior a las mejoras que se pueden obtener porque da lugar a una menor latencia esperada en el cliente. Cabe señalar que el procedimiento mencionado anteriormente producirá una latencia similar a la empleada por un expedidor que emplee cebroides oneinstantáneos (véase la sección 3.1). Dado que el despachador es consciente de todos los movimientos futuros del coche que sólo transferiría el elemento de datos solicitado en un único zebroid, si determina que el zebroid se reunirá con el cliente antes que cualquier otro servidor. Este zebroid seleccionado está incluido en las nuevas réplicas de Nc i. 4.2 z-relay zebroids Para calcular la latencia de disponibilidad esperada con z-relay zebroids, utilizamos un análogo de problema de coloración similar a un enfoque utilizado por Spyropoulos et al. [17]. En [9] se dan detalles del procedimiento para obtener una expresión de forma cerrada. La latencia de disponibilidad agregada (agg) con z-relay zebroids es dada por, agg(zeb) = T i=1 [fi · C N + 1 · 1 N + 1 − ri · (N · log N ri − log (N + 1 − ri))] (5) 5. METODOLOGÍA DE SIMULACIÓN El entorno de simulación considerado en este estudio se compone de vehículos como automóviles que llevan una fracción del repositorio de datos. Un parámetro de precisión de predicción proporciona inherentemente una cierta garantía probabilística sobre la confianza de las predicciones de ruta del automóvil conocidas en el despachador. Un valor del 100% implica que las rutas exactas de todos los coches se conocen en todo momento. Un valor del 70% para este parámetro indica que las rutas previstas para los coches coincidirán con las reales con probabilidad 0.7. Tenga en cuenta que esta probabilidad se extiende a través de las rutas del coche durante toda la duración del viaje. Ahora proporcionamos los preliminares del estudio de simulación y luego describimos los parámetros de configuración utilizados en nuestros experimentos. • Similar a la metodología de análisis, el mapa utilizado es un toro 2D. Un modelo de movilidad Markov que representa una caminata aleatoria 2D imparcial en la superficie del toro describe el movimiento de los coches a través de este toro. • Cada cuadrícula/célula es un estado único de esta cadena Markov. En cada ranura de tiempo, cada coche hace una transición de una celda a cualquiera de sus 8 celdas vecinas. La transición es una función de la ubicación actual del coche y una matriz de transición de probabilidad Q = [qij] donde qij es la probabilidad de transición del estado i al estado j. Solo los coches equipados con AutoMata dentro de la misma celda pueden comunicarse entre sí. • Los parámetros γ,  han sido discretizados y expresados en términos del número de franjas horarias. • Un dispositivo AutoMata no mantiene más de una réplica de un elemento de datos. Esto se debe a que las réplicas adicionales ocupan el almacenamiento sin proporcionar beneficios. • Los cebroides de relé z o uno instantáneos pueden ser empleados por solicitud del cliente para mejorar la latencia. • A menos que se mencione lo contrario, se supone que el parámetro de precisión de la predicción es del 100%. Esto se debe a que este estudio pretende cuantificar el efecto de un gran número de parámetros individualmente sobre la latencia de la disponibilidad. Aquí, establecemos el tamaño de cada elemento de datos, Si, para ser 1. α representa el número de ranuras de almacenamiento por AutoMata. Cada ranura de almacenamiento almacena un elemento de datos. γ representa la duración del viaje de los clientes en términos del número de franjas horarias. Por lo tanto, los posibles valores de latencia de disponibilidad están entre 0 y γ.  se define como el número de franjas horarias después de lo cual un dispositivo cliente AutoMata encontrará una réplica del elemento de datos por primera vez. Si una réplica para el elemento de datos solicitado fue encontrado por el cliente en la primera celda, a continuación, se establece  = 0. Si se trata de un elemento de datos solicitado, el cliente no encontró ninguna copia del elemento de datos solicitado durante todo su viaje. En todas nuestras simulaciones, para la ilustración consideramos un 5 × 5 2D-torus con γ fijado a 10. Nuestros experimentos indican que las tendencias en la escala de resultados a mapas de mayor tamaño. Simulamos una distribución sesgada de acceso a los datos T que obedece a la ley Ziffs con una media de 0.27. Esta distribución corresponde a la venta de entradas de cine en los Estados Unidos [6]. Empleamos un esquema de replicación que asigna réplicas para un elemento de datos en función de la raíz cuadrada de la frecuencia de acceso de ese elemento. Se muestra que el esquema de replicación de raíz cuadrada tiene un rendimiento de latencia competitivo en un gran espacio de parámetros [8]. Las réplicas de elementos de datos se distribuyen uniformemente entre los dispositivos AutoMata. Esto sirve como el caso de la línea base sin cebros. El esquema de raíz cuadrada también proporciona la distribución de réplica inicial cuando se emplean zebroids. Tenga en cuenta que los reemplazos realizados por los zebroids causarán cambios en la distribución de réplica de ítems de datos. Las solicitudes generadas según la distribución Zipf se emiten una a la vez. El coche cliente que emite la solicitud se elige de una manera redonda-robina. Después de un período máximo de γ, se registra la latencia con que se encontró esta solicitud. En todos los resultados de simulación, cada punto es un promedio de 200.000 solicitudes. Además, los intervalos de confianza del 95% determinados para los resultados son bastante ajustados para las métricas de latencia y los gastos generales de reemplazo. Por lo tanto, sólo los presentamos para la métrica que captura la mejora porcentual de la latencia con respecto al caso de no-zebroides. 6. RESULTADOS En esta sección, describimos nuestros resultados de evaluación donde se abordan las siguientes preguntas clave. Con una amplia selección de esquemas de reemplazo disponibles para un zebroid, ¿cuál es su efecto en la latencia de disponibilidad? Una pregunta más central es: Do zebroids provide 78 0 20 40 60 80 100 1.5 2 2.5 3 3.5 Número de coches Latencia de disponibilidad agregada (­agg ) lru_global lfu_global lru_local lfu_local random Figura 1: La figura 1 muestra la latencia de disponibilidad al emplear cebroids uno-instantáneos en función de los valores (N,α), cuando el ¿Cuáles son los gastos generales asociados en el empleo de estos zebroides? ¿Qué sucede con estas mejoras en escenarios donde un despachador puede tener información imperfecta sobre las rutas del automóvil? ¿Cuáles son las compensaciones inherentes entre la densidad del automóvil y el almacenamiento por automóvil en lo que respecta a su efecto combinado e individual sobre la latencia de la disponibilidad en presencia de zebroids? Presentamos análisis simples y simulaciones detalladas para proporcionar respuestas a estas preguntas, así como para obtener información sobre el diseño de sistemas basados en operadores. 6.1 ¿Cómo funciona un esquema de sustitución empleado por un latencia de disponibilidad de impacto zebroideo? Para ilustrarlo, presentamos experimentos de escala en los que se emplean cebroides oneinstantáneos (ver Figura 1). Por escala, queremos decir que α y N se cambian proporcionalmente para mantener el almacenamiento total del sistema, ST, constante. Aquí, T = 50 y ST = 200. Elegimos los siguientes valores de (N,α) = {(20,10), (25,8), (50,4), (100,2)}. La cifra indica que un plan de sustitución al azar muestra un rendimiento competitivo. Esto se debe a varias razones. Recuerde que la distribución de réplica inicial se establece según el esquema de replicación de raíz cuadrada. El esquema de reemplazo aleatorio no altera esta distribución ya que hace que los reemplazos ciegos a la popularidad de un elemento de datos. Sin embargo, los reemplazos causan una reorganización dinámica de los datos a fin de atender mejor a la solicitud activa actual. Además, el patrón de movilidad de los coches es aleatorio, por lo que las ubicaciones desde las que los clientes emiten las solicitudes también son aleatorias y no se conocen a priori en el despachador. Estos hallazgos son significativos porque una \"política de reemplazo\" aleatoria puede ser implementada de una manera simple y descentralizada. Los esquemas rru-global y lfu-global proporcionan un rendimiento de latencia que es peor que aleatorio. Esto se debe a que estas políticas desarrollan rápidamente una preferencia por los elementos de datos más populares, creando así un mayor número de réplicas para ellos. Durante el desalojo, los datos más populares casi nunca se seleccionan como candidatos de reemplazo. En consecuencia, hay menos réplicas para los artículos menos populares. Por lo tanto, la distribución inicial del elemento de datos replica cambios de raíz cuadrada a que se asemeja a replicación lineal. El mayor número de réplicas de las partidas de datos populares proporciona beneficios adicionales marginales, mientras que el menor número de réplicas de las demás partidas de datos perjudica el rendimiento de latencia de estas políticas mundiales. Los esquemas lfu-local y lru-local tienen un rendimiento similar al aleatorio ya que no tienen suficiente historial de solicitudes de datos locales. Especulamos que el desempeño de estas políticas locales se acercará al de sus variantes globales para una historia suficientemente grande de solicitudes de ítems de datos. Debido al rendimiento competitivo demostrado por una política aleatoria, para el resto del documento, presentamos el rendimiento de los zebroids que emplean una \"política de reemplazo\" aleatoria. 6.2 ¿Proporcionan los zebroids mejoras significativas en la latencia de disponibilidad? Encontramos que en muchos escenarios que emplean zebroids proporciona mejoras sustanciales en la latencia de la disponibilidad. 6.2.1 Análisis Primero consideramos el caso de los cebroides uno-instantáneos. La Figura 2.a muestra la variación en Łagg en función de N para T = 10 y α = 1 con 10 × 10 toros usando la Ecuación 4. Los ejes x e y se dibujan a una escala de registro. En la figura 2.b se muestra la mejoría en % en el Agg obtenido con cebroides uniinstantáneos. En este caso, sólo el eje x se dibuja a una escala de registro. Para ilustrar, suponemos que los datos T son solicitados uniformemente. Inicialmente, cuando la red es escasa la aproximación analítica para mejoras en la latencia con zebroids, obtenida de las ecuaciones 2 y 4, coincide estrechamente con los resultados de la simulación. Sin embargo, a medida que N aumenta, la suposición de escasez para la que el análisis es válido, a saber, N+G, ya no es cierta. Por lo tanto, las dos curvas divergen rápidamente. El punto en el que las dos curvas se alejan unas de otras corresponde a un valor de Además, como se mencionó anteriormente, el análisis proporciona un límite superior a las mejoras de la latencia, ya que trata de las réplicas recién creadas dadas por Nc i de forma independiente. Sin embargo, estas réplicas de Nc i comienzan desde la misma celda que una de las réplicas de servidor ri. Finalmente, el análisis captura un escenario oneshot donde dada una distribución inicial de réplica de datos, se calcula la latencia de disponibilidad. Las nuevas réplicas creadas no afectan las solicitudes futuras del cliente. Debido a las limitaciones de espacio, aquí, se resumen las observaciones en el caso de z-relay zebroids se emplean. El lector interesado puede obtener más detalles en [9]. Observaciones similares, como el caso cebroideo uniinstantaneo, se aplican ya que las curvas de simulación y análisis comienzan de nuevo a divergir cuando los supuestos de análisis ya no son válidos. Sin embargo, la observación clave aquí es que la mejora de la latencia con z-relay zebroids es significativamente mejor que el caso de cebroids uno-instantáneos, especialmente para escenarios de almacenamiento más bajos. Esto se debe a que en escenarios escasos, los traspasos transitivos entre los zebroides crean un mayor número de réplicas para el ítem de datos solicitado, lo que produce una menor latencia de disponibilidad. Por otra parte, también se observa que la curva de validación de simulación para las mejoras en Łagg con z-relay zebroids se aproxima a la del caso cebroideo uniinstantánea para un almacenamiento más alto (valores de N más altos). Esto se debe a que los cebroides uno-instantáneos son un caso especial de z-relay zebroides. 6.2.2 Simulación Realizamos simulaciones para examinar todo el espectro de almacenamiento obtenido cambiando la densidad del vehículo N o el almacenamiento por coche α para capturar también escenarios en los que no se mantienen las hipótesis de escasez para las que el análisis es válido. Separamos el efecto de N y α capturando la variación de N manteniendo constante α (caso 1) y viceversa (caso 2) tanto con z-relay y cebroides uno-instantáneos. Aquí, establecemos el tamaño del repositorio como T = 25. En el gráfico 3 figura el caso 1 mencionado anteriormente. Se observan tendencias similares con el caso 2, en [9] se dispone de una descripción completa de esos resultados. Con la Figura 3.b, manteniendo constante α, la densidad del coche aumenta inicialmente tiene mayores beneficios de latencia porque el aumento de N introduce más zebroids en el sistema. A medida que N se incrementa aún más, • reduce porque el almacenamiento total en el sistema sube. En consecuencia, el número de réplicas por elemento de datos sube aumentando así el número de servidores 79. Por lo tanto, la \"política de reemplazo\" no puede encontrar un zebroid tan a menudo para transportar el elemento de datos solicitado al cliente antes que cualquiera de los servidores. Por otro lado, el aumento del número de servidores beneficia al caso de no-zebroids al reducir a Agg. El efecto neto da lugar a una reducción de los valores más grandes de N. 10 1 10 2 10 3 10 −1 10 0 10 1 10 2 Número de automóviles no-zebroidsanal no-zebroids sim one-instantaneoussim Agregación Disponibilidad Latencia (­agg ) 2.a) Agg 10 1 10 2 10 3 0 10 20 40 50 60 70 80 90 100 Número de automóviles % Mejora Las tendencias mencionadas anteriormente son similares a las obtenidas del análisis. Sin embargo, algo contra-intuitivamente con almacenamiento relativamente más alto del sistema, z-relay zebroids proporcionan mejoras ligeramente más bajas en la latencia en comparación con uno-instantaneous zebroids. Especulamos que esto se debe a las diferentes distribuciones de réplicas de ítems de datos impuestas por ellos. Tenga en cuenta que los reemplazos realizados por los zebroids causan fluctuaciones en estas distribuciones de réplica que pueden afectar futuras solicitudes de clientes. Actualmente estamos explorando opciones adecuadas de parámetros que pueden capturar estas distribuciones de réplicas cambiantes. 6.3 ¿Cuáles son los gastos generales derivados de la mejora de la latencia de los zebroideos? Encontramos que las mejoras en la latencia con zebroids se obtienen con un mínimo de reemplazo de los gastos generales (< 1 por solicitud del cliente). 6.3.1 Análisis Con cebroides uniinstantáneos, para cada solicitud de cliente se emplea un máximo de un cebroide para mejorar la latencia. Por lo tanto, los gastos generales de sustitución por solicitud del cliente pueden ascender a un máximo de uno. Recordemos que para calcular la latencia con una latencia instantánea 0 50 100 150 200 250 350 400 0 1 2 3 4 5 6 Número de coches Latencia de disponibilidad agregada (?agg ) no-zebroids one-instantaneous z-relays 3.a 0 50 100 150 200 250 300 350 400 0 10 20 30 40 50 60 Número de coches % Mejora en?agg wrt no-zebro Ahora un reemplazo sólo se incumple si una de estas réplicas de Nc i de nueva creación se reúne con el cliente antes que cualquiera de los servidores de ri. Que Xri y XNc i respectivamente sean variables aleatorias que capturen el tiempo mínimo hasta que cualquiera de las réplicas de ri y Nc i cumpla con el cliente. Dado que Xri y XNc i se supone que son independientes, por la propiedad de variables aleatorias distribuidas exponencialmente tenemos, Overhead/request = 1 · P(XNc i < Xri ) + 0 · P(Xri ≤ XNc i ) (6) Overhead/request = ri C ri C + Nc i C = ri ri + Nc i (7) Sin embargo, si N  es constante entonces el aumento de las causas N α 80 0 20 40 60 80 100 0 0,05 0,15 0,20 0,25 0,35 0,40 0,45 0,5 Número de coches cebroides instantáneos número medio de reemplazos por solicitud (N=20,α=10) (N=25,α=8) (N=50,α=4) (N=100,α=2) Figura 4: La figura 4 captura el reemplazo de Esto implica que se incurre en un aumento de los gastos generales de sustitución para valores N y α más altos. Por otra parte, cuando ri = N, esto significa que cada coche tiene una réplica de elemento de datos i. Por lo tanto, no se emplean zebroids cuando se solicita este artículo, lo que da lugar a un gasto general/solicitud para este artículo como cero. A continuación, presentamos resultados de simulación que validan nuestra hipótesis de análisis para los gastos generales asociados con el despliegue de cebroides uno-instantáneos. 6.3.2 Simulación En la figura 4 se muestra la superficie de repuesto con cebroides uno-instantáneos cuando se varían (N,α) manteniendo constante el almacenamiento total del sistema. Las tendencias mostradas por la simulación concuerdan con las previstas por el análisis anterior. Sin embargo, el almacenamiento total del sistema puede ser cambiado ya sea por la densidad variable del coche (N) o el almacenamiento por coche (α). Debido a tendencias similares, aquí presentamos el caso cuando α se mantiene constante y N es variada (Figura 5). Referimos al lector a [9] para el caso cuando α es variado y N se mantiene constante. Presentamos un argumento intuitivo para el comportamiento de las curvas superiores de reemplazo de la solicitud. Cuando el almacenamiento es extremadamente escaso de modo que sólo existe una réplica por elemento de datos en la red AutoMata, el número de reemplazos realizados por los zebroids es cero ya que cualquier reemplazo causará que un elemento de datos se pierda del sistema. El despachador garantiza que no se pierda ningún elemento de datos del sistema. En el otro extremo del espectro, si el almacenamiento se vuelve tan abundante que α = T entonces todo el repositorio de elementos de datos se puede replicar en cada coche. El número de reemplazos es de nuevo cero ya que cada solicitud puede ser satisfecha localmente. Un escenario similar ocurre si N se aumenta a un valor tan grande que otro coche con el elemento de datos solicitado siempre está disponible en las proximidades del cliente. Sin embargo, hay un espectro de almacenamiento en el medio donde los reemplazos por los zebroides programados dan lugar a mejoras en el Agg (ver Figura 3). Por otra parte, observamos que para escenarios de almacenamiento escasos, las mejoras más altas con z-relay zebroids se obtienen al costo de un aumento de los gastos generales de reemplazo en comparación con el caso de cebroids uno-instantáneos. Esto se debe a que en el caso anterior, cada uno de estos z zebroids seleccionados a lo largo de la ruta de latencia más baja al cliente necesita realizar un reemplazo. Sin embargo, los gastos generales de sustitución son todavía inferiores a 1 lo que indica que en promedio se necesita menos de un reemplazo por solicitud del cliente, incluso cuando se emplean z-relay zebroids. 0 50 100 150 200 250 300 350 400 0 0,1 0,2 0,3 0,4 0,6 0,7 0,8 0,9 1 Número de coches z-reemplaza uno-instantánea Número medio de reemplazos por solicitud Figura 5: La figura 5 muestra los gastos generales de reemplazo con cebroide para los casos en que N es diferente manteniendo α = 2. 10 20 30 40 50 60 70 80 90 100 0 0,5 1 1,5 2 2,5 3 3,5 4 Porcentaje de predicción no-zebroideos (N=50) uno-instantáneos (N=50) z-relés (N=50) no-zebroideos (N=200) uno-instantáneos (N=200) z-relés (N=200) Disponibilidad agregada Latencia ( 6.4 ¿Qué sucede con la latencia de la disponibilidad con zebroids en escenarios con inexactitudes en las predicciones de la ruta del coche? Encontramos que los zebroids continúan proporcionando mejoras en la latencia de la disponibilidad incluso con menor precisión en las predicciones de la ruta del coche. Utilizamos un único parámetro p para cuantificar la exactitud de las predicciones de la ruta del coche. 6.4.1 Análisis Dado que p representa la probabilidad de que una ruta del automóvil predicha por el expedidor coincida con la actual, por lo tanto, la latencia con los zebroideos puede ser aproximada por, 6.4.2 Simulación En la figura 6 se muestra la variación en el Agg en función de esta métrica de precisión de la predicción de ruta. Observamos una reducción suave en la mejora de 81 en Agg a medida que la métrica de precisión de predicción reduce. Para los zebroids que están programados pero no se reúnen con el cliente debido al error de predicción, etiquetamos tales reemplazos hechos por los zebroids como fallados. Se ve que los reemplazos fallidos aumentan gradualmente a medida que la precisión de la predicción se reduce. 6.5 ¿En qué condiciones se maximizan las mejoras en la latencia de disponibilidad con zebroids? Sorprendentemente, encontramos que las mejoras en la latencia obtenidas con cebroides uno-instantáneos son independientes de la distribución de entrada de la popularidad de los ítems de datos. 6.5.1 Análisis La diferencia fraccionaria (marcada en la letra ) en la latencia entre los cebroides no-zebroideos y los cebroides uno-instantáneos se obtiene a partir de las ecuaciones 2, 3 y 4 de la siguiente forma: T i=1 fi·C ri − T i=1 fi·C ri+(N−ri)·(1−(1− 1 G )ri Let α = 1, haciendo el almacenamiento total en el sistema ST = N. Suponiendo que la distribución de réplica inicial es según el esquema de replicación de raíz cuadrada, tenemos, ri = fi·N T j = 1 fj. Por lo tanto, obtenemos fi = K2 ·r2 i N2, donde K = T j=1 fj. Utilizando esto, junto con la aproximación (1 − x)n 1 − n · x para x pequeña, simplificamos la ecuación anterior para obtener, • = 1 − T i=1 ri 1+ N−ri G T i=1 ri Para determinar cuándo se maximizan las ganancias con cebroides uno-instantáneos, podemos enmarcar un problema de optimización de la siguiente manera: Maximizar •, sujeto a T i Con un esquema de replicación de raíz cuadrada, las mejoras obtenidas con cebroides uniinstantáneos son independientes de la distribución de popularidad de entrada de los ítems de datos. (Ver [9] para la prueba) 6.5.2 Simulación Realizamos simulaciones con dos diferentes distribución de frecuencias de ítems de datos: Uniforme y Zipfian (con media= 0.27). En ambos casos se obtienen mejoras similares de latencia con cebroides uniinstantáneos. Este resultado tiene importantes implicaciones. En casos con popularidad sesgada hacia ciertos ítems de datos, las mejoras agregadas en la latencia en todas las solicitudes de ítems de datos siguen siendo las mismas. Incluso en escenarios en los que la frecuencia de acceso a los datos cambia dinámicamente, los zebroids seguirán proporcionando mejoras similares en la latencia. 7. CONCLUSIONES Y FUTURAS DIRECCIONES DE INVESTIGACIÓN En este estudio, examinamos las mejoras en la latencia que se pueden obtener en presencia de transportistas que entregan un elemento de datos desde un servidor a un cliente. Se cuantificó la variación de la latencia de disponibilidad en función de un rico conjunto de parámetros como la densidad del coche, el almacenamiento por coche, el tamaño de la base de datos de título y las políticas de reemplazo empleadas por los zebroids. A continuación se resumen algunas direcciones clave de investigación en el futuro que pretendemos seguir. Para reflejar mejor la realidad nos gustaría validar las observaciones obtenidas de este estudio con algunos rastros de simulación del mundo real de movimientos vehiculares (por ejemplo usando CORSIM [1]). Esto también servirá como validación para la utilidad del modelo de movilidad Markov utilizado en este estudio. Actualmente estamos analizando el desempeño de los zebroids en un conjunto de datos del mundo real que comprende una red ad-hoc de autobuses que se mueven alrededor de un pequeño barrio en Amherst [4]. Los cebroides también se pueden utilizar para la entrega de datos que transportan información sensible al retraso con una determinada caducidad. Las extensiones a zebroids que satisfacen estos requisitos de aplicación presentan una dirección de investigación futura interesante. 8. AGRADECIMIENTOS Esta investigación fue apoyada en parte por una beca Annenberg y subvenciones NSF numeradas CNS-0435505 (NeTS NOSS), CNS-0347621 (CAREER), y IIS-0307908. 9. REFERENCIAS [1] Administración Federal de Carreteras. Simulación del corredor. Versión 5.1, http://www.ops.fhwa.dot.gov/trafficanalysistools/cors im.htm. [2] D. Aldous y J. Llena. Cadenas de markov reversibles y caminatas aleatorias en gráficos. En preparación. [3] A. Bar-Noy, I. Kessler y M. Sidi. Usuarios móviles: Para actualizar o no actualizar. En IEEE Infocom, 1994. [4] J. Burgess, B. Gallagher, D. Jensen, y B. Levine. MaxProp: Enrutamiento para redes tolerantes a perturbaciones basadas en vehículos. En IEEE Infocom, abril de 2006. [5] E. Cohen y S. Shenker. Estrategias de replicación en redes de pares no estructuradas. En SIGCOMM, 2002. [6] A. Dan, D. Dias, R. Mukherjee, D. Sitaram y R. Tewari. Buffering y Caching en servidores de vídeo a gran escala. En COMPCON, 1995. [7] S. Ghandeharizadeh, S. Kapadia, y B. Krishnamachari. PAVAN: Marco normativo para la disponibilidad de contenidos en las redes ad hoc de vehículos. En VANET, Nueva York, Nueva York, Estados Unidos, 2004. ACM Press. [8] S. Ghandeharizadeh, S. Kapadia, y B. Krishnamachari. Comparación de estrategias de replicación para la disponibilidad de contenido en redes C2P2. En MDM, mayo de 2005. [9] S. Ghandeharizadeh, S. Kapadia, y B. Krishnamachari. Una evaluación de la latencia de disponibilidad en redes de vehículos ad-hoc basadas en el portador. Informe técnico, Departamento de Ciencias de la Computación, Universidad del Sur de California, CENG-2006-1, 2006. [10] S. Ghandeharizadeh y B. Krishnamachari. C2p2: Una red inter pares para servicios de información de automóviles a petición. En Globe. IEEE, 2004. [11] T. Hara. Asignación eficaz de réplicas en redes ad-hoc para mejorar la accesibilidad de datos. En IEEE Infocom, 2001. [12] H. Hayashi, T. Hara, y S. Nishio. Un método de asignación de réplica Adaptarse a los cambios de topología en redes ad-hoc. En DEXA, 2005. [13] P. Juang, H. Oki, Y. Wang, M. Martonosi, L. Peh, y D. Rubenstein. Computación energéticamente eficiente para el seguimiento de vida silvestre: compensaciones de diseño y experiencias tempranas con ZebraNet. Silgarch Comput. Archit. Noticias, 2002. [14] A. Pentland, R. Fletcher y A. Hasson. DakNet: Repensar la conectividad en las naciones en desarrollo. Computadora, 37(1):78-83, 2004. [15] F. Sailhan y V. Issarny. Caché cooperativo en redes ad-hoc. En MDM, 2003. [16] R. Shah, S. Roy, S. Jain y W. Brunette. Mulas de datos: Modelado y análisis de una arquitectura de tres niveles para redes de sensores escasas. Elsevier ad-hoc Networks Journal, 1o de septiembre de 2003. [17] T. Schiropoulos, K. Psounis y C. Raghavendra. Enrutamiento de una sola copia en redes móviles conectadas intermitentemente. En SECON, abril de 2004. [18] A. Tanenbaum. Sistemas operativos modernos, 2a edición, capítulo 4, sección 4.4. Prentice Hall, 2001. [19] A. Vahdat y D. Becker. Ruta epidémica para redes ad-hoc parcialmente conectadas. Informe técnico, Departamento de Informática, Universidad de Duke, 2000. [20] W. Zhao, M. Ammar, y E. Zegura. Un enfoque de ferriing de mensajes para la entrega de datos en redes móviles ad-hoc escasas. En MobiHoc, págs. 187 a 198, Nueva York, NY, Estados Unidos, 2004. ACM Press. [21] M. Zonoozi y P. Dassanayake. Modelado de Movilidad de Usuario y Caracterización del Patrón de Movilidad. Revista IEEE sobre áreas seleccionadas en las comunicaciones, 15:1239-1252, septiembre de 1997. 82 ",
            "error": [
                ""
            ]
        },
        "naive random replacement policy": {
            "translated_key": "política de reemplazo aleatorio ingenuo",
            "translated_annotated_text": "Una evaluación de la latencia de disponibilidad en redes ad hoc vehiculares basadas en portador Shahram Ghandeharizadeh Dept of Computer Science Univ of Southern California Los Angeles, CA 90089, USA shahram@usc.edu Shyam Kapadia Dept of Computer Science Univ of Southern California Los Angeles, CA 90089, USA kapadia@usc.edu Bhaskar Krishna Nuestro entorno de destino utiliza portadores de datos, llamados zebroids, donde un dispositivo móvil lleva un elemento de datos en nombre de un servidor a un cliente, minimizando así su latencia de disponibilidad. En este estudio, cuantificamos la variación de la latencia de disponibilidad con zebroids en función de un rico conjunto de parámetros como densidad de coche, almacenamiento por dispositivo, tamaño del repositorio y políticas de reemplazo empleadas por zebroids. Utilizando análisis y simulaciones extensas, obtenemos ideas novedosas sobre el diseño de sistemas basados en operadores. Se pueden obtener mejoras significativas en la latencia con zebroids a costa de un mínimo gasto general. Estas mejoras se producen incluso en escenarios con menor precisión en las predicciones de las rutas del coche. Dos hallazgos particularmente sorprendentes son: (1) una \"política de reemplazo aleatorio ingenuo\" empleada por los zebroids muestra rendimiento competitivo, y (2) mejoras de la latencia obtenidas con una instanciación simplificada de zebroids se encuentran robustos a los cambios en la distribución de popularidad de los ítems de datos. Categorías y Subject Descriptores: C.2.4 [Sistemas distribuidos]: Términos Generales del Cliente/Servidor: Algoritmos, Rendimiento, Diseño, Experimentación. 1. INTRODUCCIÓN Los avances tecnológicos en las esferas del almacenamiento y las comunicaciones inalámbricas han hecho posible ahora prever la entrega a petición de datos, por ejemplo, para clips de vídeo y audio, en redes de peer-topeer vehiculares. En trabajos previos, Ghandeharizadeh et al. [10] introduce el concepto de vehículos equipados con un dispositivo Car-to-Car-Peer-toPeer, denominado AutoMata, para el entretenimiento dentro del vehículo. Las características notables de un AutoMata incluyen un dispositivo de almacenamiento masivo que ofrece cientos de gigabytes (GB) de almacenamiento, un procesador rápido y varios tipos de tarjetas de red. Incluso con las unidades de disco actuales de 500 GB, un repositorio de contenido de entretenimiento diverso puede exceder la capacidad de almacenamiento de un solo AutoMata. Tales repositorios constituyen el foco de este estudio. Para intercambiar datos, suponemos que cada AutoMata está configurado con dos tipos de tarjetas de red: 1) una tarjeta de red de baja anchura de banda con un radio-rango largo en el orden de millas que permite a un dispositivo AutoMata comunicarse con una estación celular cercana o WiMax, 2) una tarjeta de red de alta anchura de banda con un radio-rango limitado en el orden de cientos de pies. La conexión de ancho de banda alto admite tasas de datos en el orden de decenas a cientos de megabits por segundo y representa la red ad-hoc peer a peer entre los vehículos. Esto se etiqueta como el plano de datos y se emplea para intercambiar elementos de datos entre dispositivos. La conexión de baja anchura de banda sirve como plano de control, permitiendo a los dispositivos AutoMata intercambiar meta-datos con uno o más servidores centralizados. Esta conexión ofrece anchos de banda en el orden de decenas a cientos de Kilobits por segundo. Los servidores centralizados, denominados despachadores, calculan los calendarios de entrega de datos a lo largo del plano de datos utilizando los metadatos proporcionados. Estos horarios se transmiten a los vehículos participantes que utilizan el avión de control. La viabilidad técnica de tal arquitectura de dos niveles se presenta en [7], con resultados preliminares para demostrar que el ancho de banda del plano de control es suficiente para el intercambio de la información de control necesaria para realizar tal aplicación. En un escenario típico, un dispositivo AutoMata presenta a un pasajero con una lista de elementos de datos1, mostrando tanto el nombre de cada elemento de datos como su latencia de disponibilidad. Este último, denotado como ♥, se define como el momento más temprano en que el cliente encuentra una copia de su elemento de datos solicitado. Un elemento de datos está disponible inmediatamente cuando reside en el almacenamiento local del dispositivo AutoMata que atiende a la solicitud. Debido a las restricciones de almacenamiento, un AutoMata puede no almacenar todo el repositorio. En este caso, la latencia de disponibilidad es el tiempo desde que el usuario emite una solicitud hasta que el AutoMata encuentra otro coche que contiene el elemento de datos referenciado. (Los términos coche y AutoMata se utilizan indistintamente en este estudio.) La latencia de disponibilidad para un artículo es una función de la ubicación actual del cliente, su ruta de destino y viaje, el modelo de movilidad de los vehículos equipados con AutoMata, el número de réplicas construidas para los diferentes elementos de datos, y la colocación de réplicas de elementos de datos a través de los vehículos. Un método para mejorar la latencia de disponibilidad es emplear portadores de datos que transportan una réplica del elemento de datos solicitado desde un coche servidor que lo contiene a un cliente que lo solicitó. Estos portadores de datos se denominan zebroids. La selección de cebroides es facilitada por la arquitectura de dos niveles. El plano de control permite la recopilación centralizada de información en un despachador presente en una estación base.2 Algunos ejemplos de control en1 Sin pérdida de generalidad, el término elemento de datos puede ser medios tradicionales como texto o medios continuos como un clip de audio o vídeo. 2 Puede haber despachadores desplegados en un subconjunto de las estaciones de base para la tolerancia a fallos y la robustez. Los distribuidores entre estaciones de base pueden comunicarse a través de la infraestructura cableada. 75 formación son actualmente solicitudes activas, ruta de viaje de los clientes y sus destinos, y caminos de los otros coches. Para cada solicitud del cliente, el despachador puede elegir un conjunto de portadores z que colaboran para transferir un elemento de datos de un servidor a un cliente (z-relay zebroids). Aquí, z es el número de zebroids tales que 0 ≤ z < N, donde N es el número total de coches. Cuando z = 0 no hay portadores, lo que requiere un servidor para entregar el elemento de datos directamente al cliente. De lo contrario, el equipo de relé elegido de z zebroids se entregará los datos de forma transitoria unos a otros para llegar al cliente, reduciendo así la latencia de la disponibilidad (para más detalles, véase la sección 3.1). Para aumentar la robustez, el despachador puede emplear múltiples equipos de relé de portadoras z para cada solicitud. Esto puede ser útil en escenarios en los que el despachador tiene menor precisión de predicción en la información sobre las rutas de los coches. Por último, las restricciones de almacenamiento pueden requerir que un zebroid desaloje elementos de datos existentes de su almacenamiento local para acomodar el elemento solicitado por el cliente. En este estudio, se cuantifican los siguientes factores principales que afectan a la latencia de la disponibilidad en presencia de zebroideos: (i) tamaño del repositorio de datos, (ii) densidad del coche, (iii) capacidad de almacenamiento por coche, (iv) duración del viaje del cliente, (v) esquema de reemplazo empleado por los zebroideos, y (vi) exactitud de las predicciones de la ruta del coche. Para un subconjunto significativo de estos factores, abordamos algunas preguntas clave relativas al uso de zebroids tanto a través del análisis como de simulaciones extensas. Nuestras principales conclusiones son las siguientes. Una \"política de reemplazo aleatorio ingenuo\" empleada por los zebroids muestra un rendimiento competitivo en términos de latencia de disponibilidad. Con esta política, se pueden obtener mejoras sustanciales en la latencia con zebroids con un mínimo de gastos generales de reemplazo. En escenarios más prácticos, donde el despachador tiene información inexacta sobre las rutas del coche, los zebroids continúan proporcionando mejoras de la latencia. Un resultado sorprendente es que los cambios en la popularidad de los ítems de datos no impactan las ganancias de latencia obtenidas con una simple instanciación de z-relay zebroids llamados cebroids uno-instantáneos (ver Sección 3.1). Este estudio sugiere una serie de direcciones interesantes a seguir para obtener una mejor comprensión del diseño de sistemas basados en el portador que mejoran la latencia de disponibilidad. Trabajo relacionado: La replicación en redes móviles ad-hoc ha sido un tema ampliamente estudiado [11, 12, 15]. Sin embargo, ninguno de estos estudios emplea zebroids como portadores de datos para reducir la latencia de las solicitudes de los clientes. Varios estudios novedosos e importantes como ZebraNet [13], DakNet [14], Data Mules [16], Message Ferries [20] y Seek and Focus [17] han analizado factores que afectan a redes conectadas intermitentemente consistentes en portadores de datos similares en espíritu a los zebroideos. Los factores considerados por cada estudio son dictados por su supuesto entorno y aplicación diana. Una característica novedosa de nuestro estudio es el impacto en la latencia de disponibilidad para un repositorio de datos dado de elementos. En [9] se puede obtener una descripción detallada de las obras relacionadas. El resto de este documento está organizado de la siguiente manera. En la sección 2 se ofrece una visión general de la terminología junto con los factores que influyen en la latencia de la disponibilidad en presencia de zebroides. En la sección 3 se describe cómo se pueden emplear los cebroides. En la sección 4 se proporciona información detallada sobre la metodología de análisis empleada para captar el desempeño con los zebroids. En la sección 5 se describen los detalles del entorno de simulación utilizado para la evaluación. La sección 6 recoge las preguntas clave examinadas en este estudio y las responde a través de análisis y simulaciones. Por último, en la sección 7 se presentan breves conclusiones y futuras orientaciones de la investigación. 2. SINOPSIS Y TERMINOLOGÍA La Tabla 1 resume la notación de los parámetros utilizados en el artículo. A continuación introducimos algunas terminologías utilizadas en el artículo. Asumir una red de coches N AutoMata equipados, cada uno con capacidad de almacenamiento de α bytes. La capacidad total de almacenamiento del sistema es ST = N. Hay elementos de datos T en la base de datos, cada uno con parámetros de base de datos T Número de elementos de datos. Si Tamaño del ítem de datos i fi Frecuencia de acceso al ítem de datos i. Parámetros de replicación Ri Frecuencia normalizada de acceso al ítem de datos i ri Número de réplicas para ítem de datos i n Caracteriza un esquema de replicación particular. Latencia media de la disponibilidad del elemento de datos i Łagg Latencia agregada de la disponibilidad, N Número de dispositivos AutoMata en el sistema. α Capacidad de almacenamiento por AutoMata. γ Duración del viaje del cliente AutoMata. ST Capacidad total de almacenamiento del sistema AutoMata, ST = N · α. Cuadro 1: Términos y sus definiciones tamaño Si. La frecuencia de acceso al ítem de datos i se denota como fi, con T j=1 fj = 1. Deje que la duración del viaje del cliente AutoMata en consideración sea γ. Ahora definimos la frecuencia normalizada de acceso al ítem de datos i, denotado por Ri, como: Ri = (fi)n T j=1(fj)n ; 0 ≤ n ≤ فارسى (1) El exponente n caracteriza una técnica de replicación particular. Un esquema de replicación de raíz cuadrada se realiza cuando n = 0.5 [5]. Esto sirve como la línea base para la comparación con el caso cuando se despliegan zebroids. Ri se normaliza a un valor entre 0 y 1. El número de réplicas para el dato i, denotado como ri, es: ri = min (N, max (1, Ri·N Si )). Esto capta el caso cuando al menos una copia de cada elemento de datos debe estar presente en la red ad-hoc en todo momento. En los casos en que un elemento de datos se puede perder de la red ad-hoc, esta ecuación se convierte en ri = min (N, max (0, Ri·N Si )). En este caso, es posible que sea necesario satisfacer una solicitud para el elemento de datos perdido mediante la obtención del elemento desde un servidor remoto. La latencia de disponibilidad para un elemento de datos i, denotado como i, se define como la primera vez en la que un cliente AutoMata encontrará la primera réplica del elemento accesible a él. Si esta condición no se cumple, entonces se establece a i. Esto indica que el elemento de datos I no estaba disponible para el cliente durante su viaje. Tenga en cuenta que como hay al menos una réplica en el sistema para cada elemento de datos i, al establecer γ a un gran valor nos aseguramos de que los clientes soliciten cualquier elemento de datos i será satisfecho. Sin embargo, en la mayoría de las circunstancias prácticas γ puede no ser tan grande como para encontrar cada elemento de datos. Estamos interesados en la latencia de disponibilidad observada en todos los datos. Por lo tanto, aumentamos la latencia media de disponibilidad para cada ítem de datos i con su fi para obtener la siguiente latencia ponderada de disponibilidad (?agg) métrica:?agg = T i=1?i · fi A continuación, presentamos nuestro enfoque de solución describiendo cómo se seleccionan los zebroids. 3. ENFOQUE DE SOLUCIÓN 3.1 Zebroids Cuando un cliente hace referencia a un elemento de datos que falta en su almacenamiento local, el despachador identifica todos los coches con una copia del elemento de datos como servidores. A continuación, el despachador obtiene las rutas futuras de todos los coches para una duración de tiempo finito equivalente al tiempo máximo que el cliente está dispuesto a esperar a que su solicitud sea atendido. Utilizando esta información, el despachador programa la ruta de entrega más rápida desde cualquiera de los servidores al cliente utilizando cualquier otro coche como transportistas intermedios. Por lo tanto, determina el conjunto óptimo de decisiones de reenvío 76 que permitirá que el elemento de datos se entreguen al cliente en el mínimo de tiempo. Tenga en cuenta que la latencia a lo largo de la ruta de entrega más rápida que emplea un equipo de relé de z zebroids es similar a la obtenida con el encaminamiento epidémico [19] bajo los supuestos de almacenamiento infinito y ninguna interferencia. Una simple instanciación de z-relay zebroids se produce cuando z = 1 y la solicitud de los clientes desencadena una transferencia de una copia del elemento de datos solicitado de un servidor a un zebroid en su vecindad. Tal zebroideo se denomina cebroide uniinstantáneo. En algunos casos, el expedidor podría tener información inexacta sobre las rutas de los coches. Por lo tanto, un zebroid programado sobre la base de esta información inexacta puede no reunirse con su cliente objetivo. Para minimizar la probabilidad de tales escenarios, el despachador puede programar múltiples zebroids. Esto puede acarrear gastos generales adicionales debido a la utilización redundante de recursos para obtener las mismas mejoras de latencia. El tiempo necesario para transferir un elemento de datos de un servidor a un zebroid depende de su tamaño y del ancho de banda del enlace disponible. Con elementos de datos pequeños, es razonable suponer que este tiempo de transferencia es pequeño, especialmente en presencia del plano de datos de alto ancho de banda. Los elementos de datos grandes se pueden dividir en trozos más pequeños que permiten al despachador programar uno o más zebroids para entregar cada trozo a un cliente de una manera oportuna. Esta sigue siendo una dirección de investigación futura. Inicialmente, el número de réplicas para cada ítem de datos puede ser calculado usando la Ecuación 1. Este esquema calcula el número de réplicas de datos en función de su popularidad. Es estática porque el número de réplicas en el sistema no cambia y no se realizan reemplazos. Por lo tanto, esto se conoce como el ambiente de los nozebroids. Cuantificamos el desempeño de las diversas políticas de reemplazo con referencia a esta línea base que no emplea zebroids. Uno puede asumir una fase de arranque en frío, donde inicialmente sólo una o pocas copias de cada elemento de datos existen en el sistema. Muchas ranuras de almacenamiento de los coches pueden estar desocupados. Cuando los coches se encuentran entre sí, construyen nuevas réplicas de algunos elementos de datos seleccionados para ocupar los huecos vacíos. El procedimiento de selección puede consistir en elegir los datos de manera uniforme al azar. Nuevas réplicas se crean siempre y cuando un coche tiene un cierto umbral de su almacenamiento desocupado. Eventualmente, la mayoría de la capacidad de almacenamiento de un coche se agotará. 3.2 Políticas de reemplazo basadas en el operador Las políticas de reemplazo consideradas en este documento son reactivas ya que una sustitución se produce sólo en respuesta a una solicitud emitida para un determinado elemento de datos. Cuando el almacenamiento local de un zebroid está completamente ocupado, necesita reemplazar uno de sus elementos existentes para llevar el elemento de datos solicitado por el cliente. Para ello, el zebroid debe seleccionar a un candidato apropiado para el desalojo. Este proceso de decisión es análogo al encontrado en la paginación del sistema operativo donde el objetivo es maximizar la relación de acceso a la caché para evitar el retraso del acceso al disco [18]. Las políticas de reemplazo basadas en transportistas empleadas en nuestro estudio son las menos usadas recientemente (LRU), las menos usadas con frecuencia (LFU) y las aleatorias (donde un candidato de desalojo es elegido uniformemente al azar). Hemos considerado variantes locales y globales de las políticas LRU/LFU que determinan si el conocimiento local o global de los contenidos de los coches conocidos en el expedidor se utiliza para la decisión de desalojo en un zebroid (ver [9] para más detalles). Las pólizas de sustitución entrañan los siguientes gastos generales. En primer lugar, la complejidad asociada a la aplicación de una política. En segundo lugar, el ancho de banda utilizado para transferir una copia de un elemento de datos de un servidor al zebroid. En tercer lugar, el número medio de reemplazos realizados por los zebroides. Tenga en cuenta que en el caso de no cebroides no se incurre en gastos generales. Las métricas consideradas en este estudio son la latencia de la disponibilidad agregada, Tenga en cuenta que los despachadores con la ayuda del plano de control pueden asegurarse de que no se pierda ningún elemento de datos del sistema. En otras palabras, al menos una réplica de cada elemento de datos se mantiene en la red ad-hoc en todo momento. En tales casos, aunque un coche puede encontrarse con un cliente solicitante antes que otros servidores, si su almacenamiento local contiene elementos de datos con sólo una copia en el sistema, entonces tal coche no se elige como un zebroid. 4. METODOLOGÍA DE ANÁLISIS Aquí presentamos la metodología de evaluación analítica y algunas aproximaciones como ecuaciones de forma cerrada que capturan las mejoras en la latencia de disponibilidad que se pueden obtener tanto con cebros oneinstantáneos como con z-relay. Primero, presentamos algunos preliminares de nuestra metodología de análisis. • Que N sea el número de coches en la red que realizan una caminata aleatoria en 2D en un toro de G× G. Un coche adicional sirve como un cliente que entrega un total de N + 1 coches. Este modelo de movilidad se ha utilizado ampliamente en la literatura [17, 16] principalmente porque es susceptible de análisis y proporciona una base de referencia para comparar el rendimiento de otros modelos de movilidad. Además, esta clase de modelos de movilidad markoviana se ha utilizado para modelar los movimientos de los vehículos [3, 21]. • Asumimos que todos los coches comienzan desde la distribución estacionaria y realizan caminatas aleatorias independientes. Aunque para escenarios de densidad escasa, la suposición de independencia se mantiene, ya no es válido cuando N se aproxima a G. • Deje que el tamaño del repositorio de ítems de datos de interés sea T. Además, el ítem de datos i tiene réplicas ri. Esto implica que los coches ri, identificados como servidores, tienen una copia de este elemento de datos cuando el cliente solicita el elemento i. Todos los resultados de análisis presentados en esta sección se obtienen asumiendo que el cliente está dispuesto a esperar el tiempo necesario para que su solicitud sea satisfecha (duración del viaje sin límite γ = ­). Con el modelo de movilidad al azar en un torso 2D, hay una garantía de que mientras haya al menos una réplica del elemento de datos solicitado en la red, el cliente se encontrará con esta réplica [2]. Las extensiones al análisis que también consideran las duraciones del viaje finito se pueden obtener en [9]. Considere un escenario en el que no se emplean zebroids. En este caso, la latencia de disponibilidad esperada para el ítem de datos es el tiempo de reunión esperado de la caminata aleatoria realizada por el cliente con cualquiera de las caminatas aleatorias realizadas por los servidores. Aldous et al. [2] muestran que el tiempo de reunión de dos caminatas aleatorias en tal entorno puede modelarse como una distribución exponencial con la media C = c · G · log G, donde la constante c 0,17 para G ≥ 25. El tiempo de reunión, o equivalente a la latencia de la disponibilidad de i, para el cliente que solicita datos i es el momento hasta que se encuentre con cualquiera de estas réplicas ri por primera vez. Se trata también de una distribución exponencial con el siguiente valor esperado (obsérvese que esta formulación es válida sólo para casos escasos cuando G >> ri): فارسىi = cGlogG ri La latencia de disponibilidad agregada sin emplear zebroids es entonces esta expresión promediada sobre todos los ítems de datos, ponderada por su frecuencia de acceso: فارسىagg(no − zeb) = T i=1 fi Por otra parte, esta réplica se genera en el paso de tiempo cuando el cliente emite la solicitud. Que Nc i sea el número total esperado de nodos que están en la misma celda que cualquiera de los servidores ri. Luego, tenemos Nc i = (N − ri) · (1 − (1 − 1 G )ri ) (3) En el modelo analítico, suponemos que Nc i nuevas réplicas se crean, de modo que el número total de réplicas se aumenta a ri + Nc i. La latencia de disponibilidad se reduce ya que es más probable que el cliente cumpla con una réplica anterior. La latencia agregada de disponibilidad esperada en el caso de los cebroides uno-instantáneos es dada por, agg(zeb) = T i=1 fi · c · G · log G ri + Nc i = T i=1 fi · C ri + Nc i (4) Tenga en cuenta que al obtener esta expresión, para facilitar el análisis, hemos asumido que las nuevas réplicas comienzan Así trata a todos los portadores de Nc i de forma independiente, al igual que los servidores originales ri. Como mostraremos a continuación en comparación con las simulaciones, esta aproximación proporciona un límite superior a las mejoras que se pueden obtener porque da lugar a una menor latencia esperada en el cliente. Cabe señalar que el procedimiento mencionado anteriormente producirá una latencia similar a la empleada por un expedidor que emplee cebroides oneinstantáneos (véase la sección 3.1). Dado que el despachador es consciente de todos los movimientos futuros del coche que sólo transferiría el elemento de datos solicitado en un único zebroid, si determina que el zebroid se reunirá con el cliente antes que cualquier otro servidor. Este zebroid seleccionado está incluido en las nuevas réplicas de Nc i. 4.2 z-relay zebroids Para calcular la latencia de disponibilidad esperada con z-relay zebroids, utilizamos un análogo de problema de coloración similar a un enfoque utilizado por Spyropoulos et al. [17]. En [9] se dan detalles del procedimiento para obtener una expresión de forma cerrada. La latencia de disponibilidad agregada (agg) con z-relay zebroids es dada por, agg(zeb) = T i=1 [fi · C N + 1 · 1 N + 1 − ri · (N · log N ri − log (N + 1 − ri))] (5) 5. METODOLOGÍA DE SIMULACIÓN El entorno de simulación considerado en este estudio se compone de vehículos como automóviles que llevan una fracción del repositorio de datos. Un parámetro de precisión de predicción proporciona inherentemente una cierta garantía probabilística sobre la confianza de las predicciones de ruta del automóvil conocidas en el despachador. Un valor del 100% implica que las rutas exactas de todos los coches se conocen en todo momento. Un valor del 70% para este parámetro indica que las rutas previstas para los coches coincidirán con las reales con probabilidad 0.7. Tenga en cuenta que esta probabilidad se extiende a través de las rutas del coche durante toda la duración del viaje. Ahora proporcionamos los preliminares del estudio de simulación y luego describimos los parámetros de configuración utilizados en nuestros experimentos. • Similar a la metodología de análisis, el mapa utilizado es un toro 2D. Un modelo de movilidad Markov que representa una caminata aleatoria 2D imparcial en la superficie del toro describe el movimiento de los coches a través de este toro. • Cada cuadrícula/célula es un estado único de esta cadena Markov. En cada ranura de tiempo, cada coche hace una transición de una celda a cualquiera de sus 8 celdas vecinas. La transición es una función de la ubicación actual del coche y una matriz de transición de probabilidad Q = [qij] donde qij es la probabilidad de transición del estado i al estado j. Solo los coches equipados con AutoMata dentro de la misma celda pueden comunicarse entre sí. • Los parámetros γ,  han sido discretizados y expresados en términos del número de franjas horarias. • Un dispositivo AutoMata no mantiene más de una réplica de un elemento de datos. Esto se debe a que las réplicas adicionales ocupan el almacenamiento sin proporcionar beneficios. • Los cebroides de relé z o uno instantáneos pueden ser empleados por solicitud del cliente para mejorar la latencia. • A menos que se mencione lo contrario, se supone que el parámetro de precisión de la predicción es del 100%. Esto se debe a que este estudio pretende cuantificar el efecto de un gran número de parámetros individualmente sobre la latencia de la disponibilidad. Aquí, establecemos el tamaño de cada elemento de datos, Si, para ser 1. α representa el número de ranuras de almacenamiento por AutoMata. Cada ranura de almacenamiento almacena un elemento de datos. γ representa la duración del viaje de los clientes en términos del número de franjas horarias. Por lo tanto, los posibles valores de latencia de disponibilidad están entre 0 y γ.  se define como el número de franjas horarias después de lo cual un dispositivo cliente AutoMata encontrará una réplica del elemento de datos por primera vez. Si una réplica para el elemento de datos solicitado fue encontrado por el cliente en la primera celda, a continuación, se establece  = 0. Si se trata de un elemento de datos solicitado, el cliente no encontró ninguna copia del elemento de datos solicitado durante todo su viaje. En todas nuestras simulaciones, para la ilustración consideramos un 5 × 5 2D-torus con γ fijado a 10. Nuestros experimentos indican que las tendencias en la escala de resultados a mapas de mayor tamaño. Simulamos una distribución sesgada de acceso a los datos T que obedece a la ley Ziffs con una media de 0.27. Esta distribución corresponde a la venta de entradas de cine en los Estados Unidos [6]. Empleamos un esquema de replicación que asigna réplicas para un elemento de datos en función de la raíz cuadrada de la frecuencia de acceso de ese elemento. Se muestra que el esquema de replicación de raíz cuadrada tiene un rendimiento de latencia competitivo en un gran espacio de parámetros [8]. Las réplicas de elementos de datos se distribuyen uniformemente entre los dispositivos AutoMata. Esto sirve como el caso de la línea base sin cebros. El esquema de raíz cuadrada también proporciona la distribución de réplica inicial cuando se emplean zebroids. Tenga en cuenta que los reemplazos realizados por los zebroids causarán cambios en la distribución de réplica de ítems de datos. Las solicitudes generadas según la distribución Zipf se emiten una a la vez. El coche cliente que emite la solicitud se elige de una manera redonda-robina. Después de un período máximo de γ, se registra la latencia con que se encontró esta solicitud. En todos los resultados de simulación, cada punto es un promedio de 200.000 solicitudes. Además, los intervalos de confianza del 95% determinados para los resultados son bastante ajustados para las métricas de latencia y los gastos generales de reemplazo. Por lo tanto, sólo los presentamos para la métrica que captura la mejora porcentual de la latencia con respecto al caso de no-zebroides. 6. RESULTADOS En esta sección, describimos nuestros resultados de evaluación donde se abordan las siguientes preguntas clave. Con una amplia selección de esquemas de reemplazo disponibles para un zebroid, ¿cuál es su efecto en la latencia de disponibilidad? Una pregunta más central es: Do zebroids provide 78 0 20 40 60 80 100 1.5 2 2.5 3 3.5 Número de coches Latencia de disponibilidad agregada (­agg ) lru_global lfu_global lru_local lfu_local random Figura 1: La figura 1 muestra la latencia de disponibilidad al emplear cebroids uno-instantáneos en función de los valores (N,α), cuando el ¿Cuáles son los gastos generales asociados en el empleo de estos zebroides? ¿Qué sucede con estas mejoras en escenarios donde un despachador puede tener información imperfecta sobre las rutas del automóvil? ¿Cuáles son las compensaciones inherentes entre la densidad del automóvil y el almacenamiento por automóvil en lo que respecta a su efecto combinado e individual sobre la latencia de la disponibilidad en presencia de zebroids? Presentamos análisis simples y simulaciones detalladas para proporcionar respuestas a estas preguntas, así como para obtener información sobre el diseño de sistemas basados en operadores. 6.1 ¿Cómo funciona un esquema de sustitución empleado por un latencia de disponibilidad de impacto zebroideo? Para ilustrarlo, presentamos experimentos de escala en los que se emplean cebroides oneinstantáneos (ver Figura 1). Por escala, queremos decir que α y N se cambian proporcionalmente para mantener el almacenamiento total del sistema, ST, constante. Aquí, T = 50 y ST = 200. Elegimos los siguientes valores de (N,α) = {(20,10), (25,8), (50,4), (100,2)}. La cifra indica que un plan de sustitución al azar muestra un rendimiento competitivo. Esto se debe a varias razones. Recuerde que la distribución de réplica inicial se establece según el esquema de replicación de raíz cuadrada. El esquema de reemplazo aleatorio no altera esta distribución ya que hace que los reemplazos ciegos a la popularidad de un elemento de datos. Sin embargo, los reemplazos causan una reorganización dinámica de los datos a fin de atender mejor a la solicitud activa actual. Además, el patrón de movilidad de los coches es aleatorio, por lo que las ubicaciones desde las que los clientes emiten las solicitudes también son aleatorias y no se conocen a priori en el despachador. Estas conclusiones son importantes porque una política de sustitución aleatoria puede aplicarse de manera descentralizada. Los esquemas rru-global y lfu-global proporcionan un rendimiento de latencia que es peor que aleatorio. Esto se debe a que estas políticas desarrollan rápidamente una preferencia por los elementos de datos más populares, creando así un mayor número de réplicas para ellos. Durante el desalojo, los datos más populares casi nunca se seleccionan como candidatos de reemplazo. En consecuencia, hay menos réplicas para los artículos menos populares. Por lo tanto, la distribución inicial del elemento de datos replica cambios de raíz cuadrada a que se asemeja a replicación lineal. El mayor número de réplicas de las partidas de datos populares proporciona beneficios adicionales marginales, mientras que el menor número de réplicas de las demás partidas de datos perjudica el rendimiento de latencia de estas políticas mundiales. Los esquemas lfu-local y lru-local tienen un rendimiento similar al aleatorio ya que no tienen suficiente historial de solicitudes de datos locales. Especulamos que el desempeño de estas políticas locales se acercará al de sus variantes globales para una historia suficientemente grande de solicitudes de ítems de datos. Debido al rendimiento competitivo demostrado por una política aleatoria, para el resto del documento, presentamos el rendimiento de los zebroids que emplean una política de reemplazo aleatorio. 6.2 ¿Proporcionan los zebroids mejoras significativas en la latencia de disponibilidad? Encontramos que en muchos escenarios que emplean zebroids proporciona mejoras sustanciales en la latencia de la disponibilidad. 6.2.1 Análisis Primero consideramos el caso de los cebroides uno-instantáneos. La Figura 2.a muestra la variación en Łagg en función de N para T = 10 y α = 1 con 10 × 10 toros usando la Ecuación 4. Los ejes x e y se dibujan a una escala de registro. En la figura 2.b se muestra la mejoría en % en el Agg obtenido con cebroides uniinstantáneos. En este caso, sólo el eje x se dibuja a una escala de registro. Para ilustrar, suponemos que los datos T son solicitados uniformemente. Inicialmente, cuando la red es escasa la aproximación analítica para mejoras en la latencia con zebroids, obtenida de las ecuaciones 2 y 4, coincide estrechamente con los resultados de la simulación. Sin embargo, a medida que N aumenta, la suposición de escasez para la que el análisis es válido, a saber, N+G, ya no es cierta. Por lo tanto, las dos curvas divergen rápidamente. El punto en el que las dos curvas se alejan unas de otras corresponde a un valor de Además, como se mencionó anteriormente, el análisis proporciona un límite superior a las mejoras de la latencia, ya que trata de las réplicas recién creadas dadas por Nc i de forma independiente. Sin embargo, estas réplicas de Nc i comienzan desde la misma celda que una de las réplicas de servidor ri. Finalmente, el análisis captura un escenario oneshot donde dada una distribución inicial de réplica de datos, se calcula la latencia de disponibilidad. Las nuevas réplicas creadas no afectan las solicitudes futuras del cliente. Debido a las limitaciones de espacio, aquí, se resumen las observaciones en el caso de z-relay zebroids se emplean. El lector interesado puede obtener más detalles en [9]. Observaciones similares, como el caso cebroideo uniinstantaneo, se aplican ya que las curvas de simulación y análisis comienzan de nuevo a divergir cuando los supuestos de análisis ya no son válidos. Sin embargo, la observación clave aquí es que la mejora de la latencia con z-relay zebroids es significativamente mejor que el caso de cebroids uno-instantáneos, especialmente para escenarios de almacenamiento más bajos. Esto se debe a que en escenarios escasos, los traspasos transitivos entre los zebroides crean un mayor número de réplicas para el ítem de datos solicitado, lo que produce una menor latencia de disponibilidad. Por otra parte, también se observa que la curva de validación de simulación para las mejoras en Łagg con z-relay zebroids se aproxima a la del caso cebroideo uniinstantánea para un almacenamiento más alto (valores de N más altos). Esto se debe a que los cebroides uno-instantáneos son un caso especial de z-relay zebroides. 6.2.2 Simulación Realizamos simulaciones para examinar todo el espectro de almacenamiento obtenido cambiando la densidad del vehículo N o el almacenamiento por coche α para capturar también escenarios en los que no se mantienen las hipótesis de escasez para las que el análisis es válido. Separamos el efecto de N y α capturando la variación de N manteniendo constante α (caso 1) y viceversa (caso 2) tanto con z-relay y cebroides uno-instantáneos. Aquí, establecemos el tamaño del repositorio como T = 25. En el gráfico 3 figura el caso 1 mencionado anteriormente. Se observan tendencias similares con el caso 2, en [9] se dispone de una descripción completa de esos resultados. Con la Figura 3.b, manteniendo constante α, la densidad del coche aumenta inicialmente tiene mayores beneficios de latencia porque el aumento de N introduce más zebroids en el sistema. A medida que N se incrementa aún más, • reduce porque el almacenamiento total en el sistema sube. En consecuencia, el número de réplicas por elemento de datos sube aumentando así el número de servidores 79. Por lo tanto, la política de reemplazo no puede encontrar un zebroid tan a menudo para transportar el elemento de datos solicitado al cliente antes que cualquiera de los servidores. Por otro lado, el aumento del número de servidores beneficia al caso de no-zebroids al reducir a Agg. El efecto neto da lugar a una reducción de los valores más grandes de N. 10 1 10 2 10 3 10 −1 10 0 10 1 10 2 Número de automóviles no-zebroidsanal no-zebroids sim one-instantaneoussim Agregación Disponibilidad Latencia (­agg ) 2.a) Agg 10 1 10 2 10 3 0 10 20 40 50 60 70 80 90 100 Número de automóviles % Mejora Las tendencias mencionadas anteriormente son similares a las obtenidas del análisis. Sin embargo, algo contra-intuitivamente con almacenamiento relativamente más alto del sistema, z-relay zebroids proporcionan mejoras ligeramente más bajas en la latencia en comparación con uno-instantaneous zebroids. Especulamos que esto se debe a las diferentes distribuciones de réplicas de ítems de datos impuestas por ellos. Tenga en cuenta que los reemplazos realizados por los zebroids causan fluctuaciones en estas distribuciones de réplica que pueden afectar futuras solicitudes de clientes. Actualmente estamos explorando opciones adecuadas de parámetros que pueden capturar estas distribuciones de réplicas cambiantes. 6.3 ¿Cuáles son los gastos generales derivados de la mejora de la latencia de los zebroideos? Encontramos que las mejoras en la latencia con zebroids se obtienen con un mínimo de reemplazo de los gastos generales (< 1 por solicitud del cliente). 6.3.1 Análisis Con cebroides uniinstantáneos, para cada solicitud de cliente se emplea un máximo de un cebroide para mejorar la latencia. Por lo tanto, los gastos generales de sustitución por solicitud del cliente pueden ascender a un máximo de uno. Recordemos que para calcular la latencia con una latencia instantánea 0 50 100 150 200 250 350 400 0 1 2 3 4 5 6 Número de coches Latencia de disponibilidad agregada (?agg ) no-zebroids one-instantaneous z-relays 3.a 0 50 100 150 200 250 300 350 400 0 10 20 30 40 50 60 Número de coches % Mejora en?agg wrt no-zebro Ahora un reemplazo sólo se incumple si una de estas réplicas de Nc i de nueva creación se reúne con el cliente antes que cualquiera de los servidores de ri. Que Xri y XNc i respectivamente sean variables aleatorias que capturen el tiempo mínimo hasta que cualquiera de las réplicas de ri y Nc i cumpla con el cliente. Dado que Xri y XNc i se supone que son independientes, por la propiedad de variables aleatorias distribuidas exponencialmente tenemos, Overhead/request = 1 · P(XNc i < Xri ) + 0 · P(Xri ≤ XNc i ) (6) Overhead/request = ri C ri C + Nc i C = ri ri + Nc i (7) Sin embargo, si N  es constante entonces el aumento de las causas N α 80 0 20 40 60 80 100 0 0,05 0,15 0,20 0,25 0,35 0,40 0,45 0,5 Número de coches cebroides instantáneos número medio de reemplazos por solicitud (N=20,α=10) (N=25,α=8) (N=50,α=4) (N=100,α=2) Figura 4: La figura 4 captura el reemplazo de Esto implica que se incurre en un aumento de los gastos generales de sustitución para valores N y α más altos. Por otra parte, cuando ri = N, esto significa que cada coche tiene una réplica de elemento de datos i. Por lo tanto, no se emplean zebroids cuando se solicita este artículo, lo que da lugar a un gasto general/solicitud para este artículo como cero. A continuación, presentamos resultados de simulación que validan nuestra hipótesis de análisis para los gastos generales asociados con el despliegue de cebroides uno-instantáneos. 6.3.2 Simulación En la figura 4 se muestra la superficie de repuesto con cebroides uno-instantáneos cuando se varían (N,α) manteniendo constante el almacenamiento total del sistema. Las tendencias mostradas por la simulación concuerdan con las previstas por el análisis anterior. Sin embargo, el almacenamiento total del sistema puede ser cambiado ya sea por la densidad variable del coche (N) o el almacenamiento por coche (α). Debido a tendencias similares, aquí presentamos el caso cuando α se mantiene constante y N es variada (Figura 5). Referimos al lector a [9] para el caso cuando α es variado y N se mantiene constante. Presentamos un argumento intuitivo para el comportamiento de las curvas superiores de reemplazo de la solicitud. Cuando el almacenamiento es extremadamente escaso de modo que sólo existe una réplica por elemento de datos en la red AutoMata, el número de reemplazos realizados por los zebroids es cero ya que cualquier reemplazo causará que un elemento de datos se pierda del sistema. El despachador garantiza que no se pierda ningún elemento de datos del sistema. En el otro extremo del espectro, si el almacenamiento se vuelve tan abundante que α = T entonces todo el repositorio de elementos de datos se puede replicar en cada coche. El número de reemplazos es de nuevo cero ya que cada solicitud puede ser satisfecha localmente. Un escenario similar ocurre si N se aumenta a un valor tan grande que otro coche con el elemento de datos solicitado siempre está disponible en las proximidades del cliente. Sin embargo, hay un espectro de almacenamiento en el medio donde los reemplazos por los zebroides programados dan lugar a mejoras en el Agg (ver Figura 3). Por otra parte, observamos que para escenarios de almacenamiento escasos, las mejoras más altas con z-relay zebroids se obtienen al costo de un aumento de los gastos generales de reemplazo en comparación con el caso de cebroids uno-instantáneos. Esto se debe a que en el caso anterior, cada uno de estos z zebroids seleccionados a lo largo de la ruta de latencia más baja al cliente necesita realizar un reemplazo. Sin embargo, los gastos generales de sustitución son todavía inferiores a 1 lo que indica que en promedio se necesita menos de un reemplazo por solicitud del cliente, incluso cuando se emplean z-relay zebroids. 0 50 100 150 200 250 300 350 400 0 0,1 0,2 0,3 0,4 0,6 0,7 0,8 0,9 1 Número de coches z-reemplaza uno-instantánea Número medio de reemplazos por solicitud Figura 5: La figura 5 muestra los gastos generales de reemplazo con cebroide para los casos en que N es diferente manteniendo α = 2. 10 20 30 40 50 60 70 80 90 100 0 0,5 1 1,5 2 2,5 3 3,5 4 Porcentaje de predicción no-zebroideos (N=50) uno-instantáneos (N=50) z-relés (N=50) no-zebroideos (N=200) uno-instantáneos (N=200) z-relés (N=200) Disponibilidad agregada Latencia ( 6.4 ¿Qué sucede con la latencia de la disponibilidad con zebroids en escenarios con inexactitudes en las predicciones de la ruta del coche? Encontramos que los zebroids continúan proporcionando mejoras en la latencia de la disponibilidad incluso con menor precisión en las predicciones de la ruta del coche. Utilizamos un único parámetro p para cuantificar la exactitud de las predicciones de la ruta del coche. 6.4.1 Análisis Dado que p representa la probabilidad de que una ruta del automóvil predicha por el expedidor coincida con la actual, por lo tanto, la latencia con los zebroideos puede ser aproximada por, 6.4.2 Simulación En la figura 6 se muestra la variación en el Agg en función de esta métrica de precisión de la predicción de ruta. Observamos una reducción suave en la mejora de 81 en Agg a medida que la métrica de precisión de predicción reduce. Para los zebroids que están programados pero no se reúnen con el cliente debido al error de predicción, etiquetamos tales reemplazos hechos por los zebroids como fallados. Se ve que los reemplazos fallidos aumentan gradualmente a medida que la precisión de la predicción se reduce. 6.5 ¿En qué condiciones se maximizan las mejoras en la latencia de disponibilidad con zebroids? Sorprendentemente, encontramos que las mejoras en la latencia obtenidas con cebroides uno-instantáneos son independientes de la distribución de entrada de la popularidad de los ítems de datos. 6.5.1 Análisis La diferencia fraccionaria (marcada en la letra ) en la latencia entre los cebroides no-zebroideos y los cebroides uno-instantáneos se obtiene a partir de las ecuaciones 2, 3 y 4 de la siguiente forma: T i=1 fi·C ri − T i=1 fi·C ri+(N−ri)·(1−(1− 1 G )ri Let α = 1, haciendo el almacenamiento total en el sistema ST = N. Suponiendo que la distribución de réplica inicial es según el esquema de replicación de raíz cuadrada, tenemos, ri = fi·N T j = 1 fj. Por lo tanto, obtenemos fi = K2 ·r2 i N2, donde K = T j=1 fj. Utilizando esto, junto con la aproximación (1 − x)n 1 − n · x para x pequeña, simplificamos la ecuación anterior para obtener, • = 1 − T i=1 ri 1+ N−ri G T i=1 ri Para determinar cuándo se maximizan las ganancias con cebroides uno-instantáneos, podemos enmarcar un problema de optimización de la siguiente manera: Maximizar •, sujeto a T i Con un esquema de replicación de raíz cuadrada, las mejoras obtenidas con cebroides uniinstantáneos son independientes de la distribución de popularidad de entrada de los ítems de datos. (Ver [9] para la prueba) 6.5.2 Simulación Realizamos simulaciones con dos diferentes distribución de frecuencias de ítems de datos: Uniforme y Zipfian (con media= 0.27). En ambos casos se obtienen mejoras similares de latencia con cebroides uniinstantáneos. Este resultado tiene importantes implicaciones. En casos con popularidad sesgada hacia ciertos ítems de datos, las mejoras agregadas en la latencia en todas las solicitudes de ítems de datos siguen siendo las mismas. Incluso en escenarios en los que la frecuencia de acceso a los datos cambia dinámicamente, los zebroids seguirán proporcionando mejoras similares en la latencia. 7. CONCLUSIONES Y FUTURAS DIRECCIONES DE INVESTIGACIÓN En este estudio, examinamos las mejoras en la latencia que se pueden obtener en presencia de transportistas que entregan un elemento de datos desde un servidor a un cliente. Se cuantificó la variación de la latencia de disponibilidad en función de un rico conjunto de parámetros como la densidad del coche, el almacenamiento por coche, el tamaño de la base de datos de título y las políticas de reemplazo empleadas por los zebroids. A continuación se resumen algunas direcciones clave de investigación en el futuro que pretendemos seguir. Para reflejar mejor la realidad nos gustaría validar las observaciones obtenidas de este estudio con algunos rastros de simulación del mundo real de movimientos vehiculares (por ejemplo usando CORSIM [1]). Esto también servirá como validación para la utilidad del modelo de movilidad Markov utilizado en este estudio. Actualmente estamos analizando el desempeño de los zebroids en un conjunto de datos del mundo real que comprende una red ad-hoc de autobuses que se mueven alrededor de un pequeño barrio en Amherst [4]. Los cebroides también se pueden utilizar para la entrega de datos que transportan información sensible al retraso con una determinada caducidad. Las extensiones a zebroids que satisfacen estos requisitos de aplicación presentan una dirección de investigación futura interesante. 8. AGRADECIMIENTOS Esta investigación fue apoyada en parte por una beca Annenberg y subvenciones NSF numeradas CNS-0435505 (NeTS NOSS), CNS-0347621 (CAREER), y IIS-0307908. 9. REFERENCIAS [1] Administración Federal de Carreteras. Simulación del corredor. Versión 5.1, http://www.ops.fhwa.dot.gov/trafficanalysistools/cors im.htm. [2] D. Aldous y J. Llena. Cadenas de markov reversibles y caminatas aleatorias en gráficos. En preparación. [3] A. Bar-Noy, I. Kessler y M. Sidi. Usuarios móviles: Para actualizar o no actualizar. En IEEE Infocom, 1994. [4] J. Burgess, B. Gallagher, D. Jensen, y B. Levine. MaxProp: Enrutamiento para redes tolerantes a perturbaciones basadas en vehículos. En IEEE Infocom, abril de 2006. [5] E. Cohen y S. Shenker. Estrategias de replicación en redes de pares no estructuradas. En SIGCOMM, 2002. [6] A. Dan, D. Dias, R. Mukherjee, D. Sitaram y R. Tewari. Buffering y Caching en servidores de vídeo a gran escala. En COMPCON, 1995. [7] S. Ghandeharizadeh, S. Kapadia, y B. Krishnamachari. PAVAN: Marco normativo para la disponibilidad de contenidos en las redes ad hoc de vehículos. En VANET, Nueva York, Nueva York, Estados Unidos, 2004. ACM Press. [8] S. Ghandeharizadeh, S. Kapadia, y B. Krishnamachari. Comparación de estrategias de replicación para la disponibilidad de contenido en redes C2P2. En MDM, mayo de 2005. [9] S. Ghandeharizadeh, S. Kapadia, y B. Krishnamachari. Una evaluación de la latencia de disponibilidad en redes de vehículos ad-hoc basadas en el portador. Informe técnico, Departamento de Ciencias de la Computación, Universidad del Sur de California, CENG-2006-1, 2006. [10] S. Ghandeharizadeh y B. Krishnamachari. C2p2: Una red inter pares para servicios de información de automóviles a petición. En Globe. IEEE, 2004. [11] T. Hara. Asignación eficaz de réplicas en redes ad-hoc para mejorar la accesibilidad de datos. En IEEE Infocom, 2001. [12] H. Hayashi, T. Hara, y S. Nishio. Un método de asignación de réplica Adaptarse a los cambios de topología en redes ad-hoc. En DEXA, 2005. [13] P. Juang, H. Oki, Y. Wang, M. Martonosi, L. Peh, y D. Rubenstein. Computación energéticamente eficiente para el seguimiento de vida silvestre: compensaciones de diseño y experiencias tempranas con ZebraNet. Silgarch Comput. Archit. Noticias, 2002. [14] A. Pentland, R. Fletcher y A. Hasson. DakNet: Repensar la conectividad en las naciones en desarrollo. Computadora, 37(1):78-83, 2004. [15] F. Sailhan y V. Issarny. Caché cooperativo en redes ad-hoc. En MDM, 2003. [16] R. Shah, S. Roy, S. Jain y W. Brunette. Mulas de datos: Modelado y análisis de una arquitectura de tres niveles para redes de sensores escasas. Elsevier ad-hoc Networks Journal, 1o de septiembre de 2003. [17] T. Schiropoulos, K. Psounis y C. Raghavendra. Enrutamiento de una sola copia en redes móviles conectadas intermitentemente. En SECON, abril de 2004. [18] A. Tanenbaum. Sistemas operativos modernos, 2a edición, capítulo 4, sección 4.4. Prentice Hall, 2001. [19] A. Vahdat y D. Becker. Ruta epidémica para redes ad-hoc parcialmente conectadas. Informe técnico, Departamento de Informática, Universidad de Duke, 2000. [20] W. Zhao, M. Ammar, y E. Zegura. Un enfoque de ferriing de mensajes para la entrega de datos en redes móviles ad-hoc escasas. En MobiHoc, págs. 187 a 198, Nueva York, NY, Estados Unidos, 2004. ACM Press. [21] M. Zonoozi y P. Dassanayake. Modelado de Movilidad de Usuario y Caracterización del Patrón de Movilidad. Revista IEEE sobre áreas seleccionadas en las comunicaciones, 15:1239-1252, septiembre de 1997. 82 ",
            "error": [
                ""
            ]
        },
        "zebroid": {
            "translated_key": [
                "zebroid",
                "zebroid",
                "zebroid",
                "zebroid",
                "zebroid",
                "zebroid",
                "zebroid",
                "zebroid",
                "zebroid",
                "zebroid",
                "zebroid",
                "zebroid",
                "zebroid",
                "zebroid",
                "zebroid",
                "zebroid",
                "zebroideo",
                "zebroid",
                "zebroid",
                "zebroide"
            ],
            "translated_annotated_text": "Una evaluación de la latencia de disponibilidad en redes ad hoc vehiculares basadas en portador Shahram Ghandeharizadeh Dept of Computer Science Univ of Southern California Los Angeles, CA 90089, USA shahram@usc.edu Shyam Kapadia Dept of Computer Science Univ of Southern California Los Angeles, CA 90089, USA kapadia@usc.edu Bhaskar Krishna Nuestro entorno de destino utiliza portadores de datos, llamados zebroids, donde un dispositivo móvil lleva un elemento de datos en nombre de un servidor a un cliente, minimizando así su latencia de disponibilidad. En este estudio, cuantificamos la variación de la latencia de disponibilidad con zebroids en función de un rico conjunto de parámetros como densidad de coche, almacenamiento por dispositivo, tamaño del repositorio y políticas de reemplazo empleadas por zebroids. Utilizando análisis y simulaciones extensas, obtenemos ideas novedosas sobre el diseño de sistemas basados en operadores. Se pueden obtener mejoras significativas en la latencia con zebroids a costa de un mínimo gasto general. Estas mejoras se producen incluso en escenarios con menor precisión en las predicciones de las rutas del coche. Dos hallazgos particularmente sorprendentes son: (1) una política de sustitución aleatoria ingenua empleada por los zebroids muestra un rendimiento competitivo, y (2) mejoras de la latencia obtenidas con una instanciación simplificada de zebroids se encuentran robustos a los cambios en la distribución de popularidad de los ítems de datos. Categorías y Subject Descriptores: C.2.4 [Sistemas distribuidos]: Términos Generales del Cliente/Servidor: Algoritmos, Rendimiento, Diseño, Experimentación. 1. INTRODUCCIÓN Los avances tecnológicos en las esferas del almacenamiento y las comunicaciones inalámbricas han hecho posible ahora prever la entrega a petición de datos, por ejemplo, para clips de vídeo y audio, en redes de peer-topeer vehiculares. En trabajos previos, Ghandeharizadeh et al. [10] introduce el concepto de vehículos equipados con un dispositivo Car-to-Car-Peer-toPeer, denominado AutoMata, para el entretenimiento dentro del vehículo. Las características notables de un AutoMata incluyen un dispositivo de almacenamiento masivo que ofrece cientos de gigabytes (GB) de almacenamiento, un procesador rápido y varios tipos de tarjetas de red. Incluso con las unidades de disco actuales de 500 GB, un repositorio de contenido de entretenimiento diverso puede exceder la capacidad de almacenamiento de un solo AutoMata. Tales repositorios constituyen el foco de este estudio. Para intercambiar datos, suponemos que cada AutoMata está configurado con dos tipos de tarjetas de red: 1) una tarjeta de red de baja anchura de banda con un radio-rango largo en el orden de millas que permite a un dispositivo AutoMata comunicarse con una estación celular cercana o WiMax, 2) una tarjeta de red de alta anchura de banda con un radio-rango limitado en el orden de cientos de pies. La conexión de ancho de banda alto admite tasas de datos en el orden de decenas a cientos de megabits por segundo y representa la red ad-hoc peer a peer entre los vehículos. Esto se etiqueta como el plano de datos y se emplea para intercambiar elementos de datos entre dispositivos. La conexión de baja anchura de banda sirve como plano de control, permitiendo a los dispositivos AutoMata intercambiar meta-datos con uno o más servidores centralizados. Esta conexión ofrece anchos de banda en el orden de decenas a cientos de Kilobits por segundo. Los servidores centralizados, denominados despachadores, calculan los calendarios de entrega de datos a lo largo del plano de datos utilizando los metadatos proporcionados. Estos horarios se transmiten a los vehículos participantes que utilizan el avión de control. La viabilidad técnica de tal arquitectura de dos niveles se presenta en [7], con resultados preliminares para demostrar que el ancho de banda del plano de control es suficiente para el intercambio de la información de control necesaria para realizar tal aplicación. En un escenario típico, un dispositivo AutoMata presenta a un pasajero con una lista de elementos de datos1, mostrando tanto el nombre de cada elemento de datos como su latencia de disponibilidad. Este último, denotado como ♥, se define como el momento más temprano en que el cliente encuentra una copia de su elemento de datos solicitado. Un elemento de datos está disponible inmediatamente cuando reside en el almacenamiento local del dispositivo AutoMata que atiende a la solicitud. Debido a las restricciones de almacenamiento, un AutoMata puede no almacenar todo el repositorio. En este caso, la latencia de disponibilidad es el tiempo desde que el usuario emite una solicitud hasta que el AutoMata encuentra otro coche que contiene el elemento de datos referenciado. (Los términos coche y AutoMata se utilizan indistintamente en este estudio.) La latencia de disponibilidad para un artículo es una función de la ubicación actual del cliente, su ruta de destino y viaje, el modelo de movilidad de los vehículos equipados con AutoMata, el número de réplicas construidas para los diferentes elementos de datos, y la colocación de réplicas de elementos de datos a través de los vehículos. Un método para mejorar la latencia de disponibilidad es emplear portadores de datos que transportan una réplica del elemento de datos solicitado desde un coche servidor que lo contiene a un cliente que lo solicitó. Estos portadores de datos se denominan zebroids. La selección de cebroides es facilitada por la arquitectura de dos niveles. El plano de control permite la recopilación centralizada de información en un despachador presente en una estación base.2 Algunos ejemplos de control en1 Sin pérdida de generalidad, el término elemento de datos puede ser medios tradicionales como texto o medios continuos como un clip de audio o vídeo. 2 Puede haber despachadores desplegados en un subconjunto de las estaciones de base para la tolerancia a fallos y la robustez. Los distribuidores entre estaciones de base pueden comunicarse a través de la infraestructura cableada. 75 formación son actualmente solicitudes activas, ruta de viaje de los clientes y sus destinos, y caminos de los otros coches. Para cada solicitud del cliente, el despachador puede elegir un conjunto de portadores z que colaboran para transferir un elemento de datos de un servidor a un cliente (z-relay zebroids). Aquí, z es el número de zebroids tales que 0 ≤ z < N, donde N es el número total de coches. Cuando z = 0 no hay portadores, lo que requiere un servidor para entregar el elemento de datos directamente al cliente. De lo contrario, el equipo de relé elegido de z zebroids se entregará los datos de forma transitoria unos a otros para llegar al cliente, reduciendo así la latencia de la disponibilidad (para más detalles, véase la sección 3.1). Para aumentar la robustez, el despachador puede emplear múltiples equipos de relé de portadoras z para cada solicitud. Esto puede ser útil en escenarios en los que el despachador tiene menor precisión de predicción en la información sobre las rutas de los coches. Por último, las restricciones de almacenamiento pueden requerir un \"zebroid\" para desalojar elementos de datos existentes de su almacenamiento local para acomodar el elemento solicitado por el cliente. En este estudio, se cuantifican los siguientes factores principales que afectan a la latencia de la disponibilidad en presencia de zebroideos: (i) tamaño del repositorio de datos, (ii) densidad del coche, (iii) capacidad de almacenamiento por coche, (iv) duración del viaje del cliente, (v) esquema de reemplazo empleado por los zebroideos, y (vi) exactitud de las predicciones de la ruta del coche. Para un subconjunto significativo de estos factores, abordamos algunas preguntas clave relativas al uso de zebroids tanto a través del análisis como de simulaciones extensas. Nuestras principales conclusiones son las siguientes. Una política de sustitución aleatoria ingenua empleada por los zebroids muestra un rendimiento competitivo en términos de latencia de disponibilidad. Con esta política, se pueden obtener mejoras sustanciales en la latencia con zebroids con un mínimo de gastos generales de reemplazo. En escenarios más prácticos, donde el despachador tiene información inexacta sobre las rutas del coche, los zebroids continúan proporcionando mejoras de la latencia. Un resultado sorprendente es que los cambios en la popularidad de los ítems de datos no impactan las ganancias de latencia obtenidas con una simple instanciación de z-relay zebroids llamados cebroids uno-instantáneos (ver Sección 3.1). Este estudio sugiere una serie de direcciones interesantes a seguir para obtener una mejor comprensión del diseño de sistemas basados en el portador que mejoran la latencia de disponibilidad. Trabajo relacionado: La replicación en redes móviles ad-hoc ha sido un tema ampliamente estudiado [11, 12, 15]. Sin embargo, ninguno de estos estudios emplea zebroids como portadores de datos para reducir la latencia de las solicitudes de los clientes. Varios estudios novedosos e importantes como ZebraNet [13], DakNet [14], Data Mules [16], Message Ferries [20] y Seek and Focus [17] han analizado factores que afectan a redes conectadas intermitentemente consistentes en portadores de datos similares en espíritu a los zebroideos. Los factores considerados por cada estudio son dictados por su supuesto entorno y aplicación diana. Una característica novedosa de nuestro estudio es el impacto en la latencia de disponibilidad para un repositorio de datos dado de elementos. En [9] se puede obtener una descripción detallada de las obras relacionadas. El resto de este documento está organizado de la siguiente manera. En la sección 2 se ofrece una visión general de la terminología junto con los factores que influyen en la latencia de la disponibilidad en presencia de zebroides. En la sección 3 se describe cómo se pueden emplear los cebroides. En la sección 4 se proporciona información detallada sobre la metodología de análisis empleada para captar el desempeño con los zebroids. En la sección 5 se describen los detalles del entorno de simulación utilizado para la evaluación. La sección 6 recoge las preguntas clave examinadas en este estudio y las responde a través de análisis y simulaciones. Por último, en la sección 7 se presentan breves conclusiones y futuras orientaciones de la investigación. 2. SINOPSIS Y TERMINOLOGÍA La Tabla 1 resume la notación de los parámetros utilizados en el artículo. A continuación introducimos algunas terminologías utilizadas en el artículo. Asumir una red de coches N AutoMata equipados, cada uno con capacidad de almacenamiento de α bytes. La capacidad total de almacenamiento del sistema es ST = N. Hay elementos de datos T en la base de datos, cada uno con parámetros de base de datos T Número de elementos de datos. Si Tamaño del ítem de datos i fi Frecuencia de acceso al ítem de datos i. Parámetros de replicación Ri Frecuencia normalizada de acceso al ítem de datos i ri Número de réplicas para ítem de datos i n Caracteriza un esquema de replicación particular. Latencia media de la disponibilidad del elemento de datos i Łagg Latencia agregada de la disponibilidad, N Número de dispositivos AutoMata en el sistema. α Capacidad de almacenamiento por AutoMata. γ Duración del viaje del cliente AutoMata. ST Capacidad total de almacenamiento del sistema AutoMata, ST = N · α. Cuadro 1: Términos y sus definiciones tamaño Si. La frecuencia de acceso al ítem de datos i se denota como fi, con T j=1 fj = 1. Deje que la duración del viaje del cliente AutoMata en consideración sea γ. Ahora definimos la frecuencia normalizada de acceso al ítem de datos i, denotado por Ri, como: Ri = (fi)n T j=1(fj)n ; 0 ≤ n ≤ فارسى (1) El exponente n caracteriza una técnica de replicación particular. Un esquema de replicación de raíz cuadrada se realiza cuando n = 0.5 [5]. Esto sirve como la línea base para la comparación con el caso cuando se despliegan zebroids. Ri se normaliza a un valor entre 0 y 1. El número de réplicas para el dato i, denotado como ri, es: ri = min (N, max (1, Ri·N Si )). Esto capta el caso cuando al menos una copia de cada elemento de datos debe estar presente en la red ad-hoc en todo momento. En los casos en que un elemento de datos se puede perder de la red ad-hoc, esta ecuación se convierte en ri = min (N, max (0, Ri·N Si )). En este caso, es posible que sea necesario satisfacer una solicitud para el elemento de datos perdido mediante la obtención del elemento desde un servidor remoto. La latencia de disponibilidad para un elemento de datos i, denotado como i, se define como la primera vez en la que un cliente AutoMata encontrará la primera réplica del elemento accesible a él. Si esta condición no se cumple, entonces se establece a i. Esto indica que el elemento de datos I no estaba disponible para el cliente durante su viaje. Tenga en cuenta que como hay al menos una réplica en el sistema para cada elemento de datos i, al establecer γ a un gran valor nos aseguramos de que los clientes soliciten cualquier elemento de datos i será satisfecho. Sin embargo, en la mayoría de las circunstancias prácticas γ puede no ser tan grande como para encontrar cada elemento de datos. Estamos interesados en la latencia de disponibilidad observada en todos los datos. Por lo tanto, aumentamos la latencia media de disponibilidad para cada ítem de datos i con su fi para obtener la siguiente latencia ponderada de disponibilidad (?agg) métrica:?agg = T i=1?i · fi A continuación, presentamos nuestro enfoque de solución describiendo cómo se seleccionan los zebroids. 3. ENFOQUE DE SOLUCIÓN 3.1 Zebroids Cuando un cliente hace referencia a un elemento de datos que falta en su almacenamiento local, el despachador identifica todos los coches con una copia del elemento de datos como servidores. A continuación, el despachador obtiene las rutas futuras de todos los coches para una duración de tiempo finito equivalente al tiempo máximo que el cliente está dispuesto a esperar a que su solicitud sea atendido. Utilizando esta información, el despachador programa la ruta de entrega más rápida desde cualquiera de los servidores al cliente utilizando cualquier otro coche como transportistas intermedios. Por lo tanto, determina el conjunto óptimo de decisiones de reenvío 76 que permitirá que el elemento de datos se entreguen al cliente en el mínimo de tiempo. Tenga en cuenta que la latencia a lo largo de la ruta de entrega más rápida que emplea un equipo de relé de z zebroids es similar a la obtenida con el encaminamiento epidémico [19] bajo los supuestos de almacenamiento infinito y ninguna interferencia. Una simple instanciación de z-relay zebroids se produce cuando z = 1 y la solicitud de los clientes desencadena una transferencia de una copia del elemento de datos solicitado de un servidor a un \"zebroid\" en su vecindad. Tal \"zebroid\" se llama un-instantánea \"zebroid\". En algunos casos, el expedidor podría tener información inexacta sobre las rutas de los coches. Por lo tanto, un \"zebroid\" programado sobre la base de esta información inexacta puede no reunirse con su cliente objetivo. Para minimizar la probabilidad de tales escenarios, el despachador puede programar múltiples zebroids. Esto puede acarrear gastos generales adicionales debido a la utilización redundante de recursos para obtener las mismas mejoras de latencia. El tiempo necesario para transferir un elemento de datos de un servidor a un \"zebroid\" depende de su tamaño y del ancho de banda del enlace disponible. Con elementos de datos pequeños, es razonable suponer que este tiempo de transferencia es pequeño, especialmente en presencia del plano de datos de alto ancho de banda. Los elementos de datos grandes se pueden dividir en trozos más pequeños que permiten al despachador programar uno o más zebroids para entregar cada trozo a un cliente de una manera oportuna. Esta sigue siendo una dirección de investigación futura. Inicialmente, el número de réplicas para cada ítem de datos puede ser calculado usando la Ecuación 1. Este esquema calcula el número de réplicas de datos en función de su popularidad. Es estática porque el número de réplicas en el sistema no cambia y no se realizan reemplazos. Por lo tanto, esto se conoce como el ambiente de los nozebroids. Cuantificamos el desempeño de las diversas políticas de reemplazo con referencia a esta línea base que no emplea zebroids. Uno puede asumir una fase de arranque en frío, donde inicialmente sólo una o pocas copias de cada elemento de datos existen en el sistema. Muchas ranuras de almacenamiento de los coches pueden estar desocupados. Cuando los coches se encuentran entre sí, construyen nuevas réplicas de algunos elementos de datos seleccionados para ocupar los huecos vacíos. El procedimiento de selección puede consistir en elegir los datos de manera uniforme al azar. Nuevas réplicas se crean siempre y cuando un coche tiene un cierto umbral de su almacenamiento desocupado. Eventualmente, la mayoría de la capacidad de almacenamiento de un coche se agotará. 3.2 Políticas de reemplazo basadas en el operador Las políticas de reemplazo consideradas en este documento son reactivas ya que una sustitución se produce sólo en respuesta a una solicitud emitida para un determinado elemento de datos. Cuando el almacenamiento local de un \"zebroid\" está completamente ocupado, necesita reemplazar uno de sus elementos existentes para llevar el elemento de datos solicitado por el cliente. Para ello, el \"zebroid\" debe seleccionar a un candidato apropiado para el desalojo. Este proceso de decisión es análogo al encontrado en la paginación del sistema operativo donde el objetivo es maximizar la relación de acceso a la caché para evitar el retraso del acceso al disco [18]. Las políticas de reemplazo basadas en transportistas empleadas en nuestro estudio son las menos usadas recientemente (LRU), las menos usadas con frecuencia (LFU) y las aleatorias (donde un candidato de desalojo es elegido uniformemente al azar). Hemos considerado variantes locales y globales de las políticas LRU/LFU que determinan si el conocimiento local o global de los contenidos de los coches conocidos en el expedidor se utiliza para la decisión de desalojo en un \"zebroid\" (ver [9] para más detalles). Las pólizas de sustitución entrañan los siguientes gastos generales. En primer lugar, la complejidad asociada a la aplicación de una política. En segundo lugar, el ancho de banda utilizado para transferir una copia de un elemento de datos de un servidor al \"zebroid\". En tercer lugar, el número medio de reemplazos realizados por los zebroides. Tenga en cuenta que en el caso de no cebroides no se incurre en gastos generales. Las métricas consideradas en este estudio son la latencia de la disponibilidad agregada, Tenga en cuenta que los despachadores con la ayuda del plano de control pueden asegurarse de que no se pierda ningún elemento de datos del sistema. En otras palabras, al menos una réplica de cada elemento de datos se mantiene en la red ad-hoc en todo momento. En tales casos, aunque un coche puede encontrarse con un cliente solicitante antes que otros servidores, si su almacenamiento local contiene elementos de datos con una sola copia en el sistema, entonces tal coche no se elige como un \"zebroid\". 4. METODOLOGÍA DE ANÁLISIS Aquí presentamos la metodología de evaluación analítica y algunas aproximaciones como ecuaciones de forma cerrada que capturan las mejoras en la latencia de disponibilidad que se pueden obtener tanto con cebros oneinstantáneos como con z-relay. Primero, presentamos algunos preliminares de nuestra metodología de análisis. • Que N sea el número de coches en la red que realizan una caminata aleatoria en 2D en un toro de G× G. Un coche adicional sirve como un cliente que entrega un total de N + 1 coches. Este modelo de movilidad se ha utilizado ampliamente en la literatura [17, 16] principalmente porque es susceptible de análisis y proporciona una base de referencia para comparar el rendimiento de otros modelos de movilidad. Además, esta clase de modelos de movilidad markoviana se ha utilizado para modelar los movimientos de los vehículos [3, 21]. • Asumimos que todos los coches comienzan desde la distribución estacionaria y realizan caminatas aleatorias independientes. Aunque para escenarios de densidad escasa, la suposición de independencia se mantiene, ya no es válido cuando N se aproxima a G. • Deje que el tamaño del repositorio de ítems de datos de interés sea T. Además, el ítem de datos i tiene réplicas ri. Esto implica que los coches ri, identificados como servidores, tienen una copia de este elemento de datos cuando el cliente solicita el elemento i. Todos los resultados de análisis presentados en esta sección se obtienen asumiendo que el cliente está dispuesto a esperar el tiempo necesario para que su solicitud sea satisfecha (duración del viaje sin límite γ = ­). Con el modelo de movilidad al azar en un torso 2D, hay una garantía de que mientras haya al menos una réplica del elemento de datos solicitado en la red, el cliente se encontrará con esta réplica [2]. Las extensiones al análisis que también consideran las duraciones del viaje finito se pueden obtener en [9]. Considere un escenario en el que no se emplean zebroids. En este caso, la latencia de disponibilidad esperada para el ítem de datos es el tiempo de reunión esperado de la caminata aleatoria realizada por el cliente con cualquiera de las caminatas aleatorias realizadas por los servidores. Aldous et al. [2] muestran que el tiempo de reunión de dos caminatas aleatorias en tal entorno puede modelarse como una distribución exponencial con la media C = c · G · log G, donde la constante c 0,17 para G ≥ 25. El tiempo de reunión, o equivalente a la latencia de la disponibilidad de i, para el cliente que solicita datos i es el momento hasta que se encuentre con cualquiera de estas réplicas ri por primera vez. Se trata también de una distribución exponencial con el siguiente valor esperado (obsérvese que esta formulación es válida sólo para casos escasos cuando G >> ri): فارسىi = cGlogG ri La latencia de disponibilidad agregada sin emplear zebroids es entonces esta expresión promediada sobre todos los ítems de datos, ponderada por su frecuencia de acceso: فارسىagg(no − zeb) = T i=1 fi Por otra parte, esta réplica se genera en el paso de tiempo cuando el cliente emite la solicitud. Que Nc i sea el número total esperado de nodos que están en la misma celda que cualquiera de los servidores ri. Luego, tenemos Nc i = (N − ri) · (1 − (1 − 1 G )ri ) (3) En el modelo analítico, suponemos que Nc i nuevas réplicas se crean, de modo que el número total de réplicas se aumenta a ri + Nc i. La latencia de disponibilidad se reduce ya que es más probable que el cliente cumpla con una réplica anterior. La latencia agregada de disponibilidad esperada en el caso de los cebroides uno-instantáneos es dada por, agg(zeb) = T i=1 fi · c · G · log G ri + Nc i = T i=1 fi · C ri + Nc i (4) Tenga en cuenta que al obtener esta expresión, para facilitar el análisis, hemos asumido que las nuevas réplicas comienzan Así trata a todos los portadores de Nc i de forma independiente, al igual que los servidores originales ri. Como mostraremos a continuación en comparación con las simulaciones, esta aproximación proporciona un límite superior a las mejoras que se pueden obtener porque da lugar a una menor latencia esperada en el cliente. Cabe señalar que el procedimiento mencionado anteriormente producirá una latencia similar a la empleada por un expedidor que emplee cebroides oneinstantáneos (véase la sección 3.1). Dado que el despachador es consciente de todos los movimientos futuros del coche que sólo transferiría el elemento de datos solicitado en un único \"zebroid\", si determina que el \"zebroid\" se reunirá con el cliente antes que cualquier otro servidor. Este \"zebroid\" seleccionado está incluido en las nuevas réplicas de Nc i. 4.2 z-relay zebroids Para calcular la latencia de disponibilidad esperada con z-relay zebroids, utilizamos un análogo de problema de coloración similar a un enfoque utilizado por Spyropoulos et al. [17]. En [9] se dan detalles del procedimiento para obtener una expresión de forma cerrada. La latencia de disponibilidad agregada (agg) con z-relay zebroids es dada por, agg(zeb) = T i=1 [fi · C N + 1 · 1 N + 1 − ri · (N · log N ri − log (N + 1 − ri))] (5) 5. METODOLOGÍA DE SIMULACIÓN El entorno de simulación considerado en este estudio se compone de vehículos como automóviles que llevan una fracción del repositorio de datos. Un parámetro de precisión de predicción proporciona inherentemente una cierta garantía probabilística sobre la confianza de las predicciones de ruta del automóvil conocidas en el despachador. Un valor del 100% implica que las rutas exactas de todos los coches se conocen en todo momento. Un valor del 70% para este parámetro indica que las rutas previstas para los coches coincidirán con las reales con probabilidad 0.7. Tenga en cuenta que esta probabilidad se extiende a través de las rutas del coche durante toda la duración del viaje. Ahora proporcionamos los preliminares del estudio de simulación y luego describimos los parámetros de configuración utilizados en nuestros experimentos. • Similar a la metodología de análisis, el mapa utilizado es un toro 2D. Un modelo de movilidad Markov que representa una caminata aleatoria 2D imparcial en la superficie del toro describe el movimiento de los coches a través de este toro. • Cada cuadrícula/célula es un estado único de esta cadena Markov. En cada ranura de tiempo, cada coche hace una transición de una celda a cualquiera de sus 8 celdas vecinas. La transición es una función de la ubicación actual del coche y una matriz de transición de probabilidad Q = [qij] donde qij es la probabilidad de transición del estado i al estado j. Solo los coches equipados con AutoMata dentro de la misma celda pueden comunicarse entre sí. • Los parámetros γ,  han sido discretizados y expresados en términos del número de franjas horarias. • Un dispositivo AutoMata no mantiene más de una réplica de un elemento de datos. Esto se debe a que las réplicas adicionales ocupan el almacenamiento sin proporcionar beneficios. • Los cebroides de relé z o uno instantáneos pueden ser empleados por solicitud del cliente para mejorar la latencia. • A menos que se mencione lo contrario, se supone que el parámetro de precisión de la predicción es del 100%. Esto se debe a que este estudio pretende cuantificar el efecto de un gran número de parámetros individualmente sobre la latencia de la disponibilidad. Aquí, establecemos el tamaño de cada elemento de datos, Si, para ser 1. α representa el número de ranuras de almacenamiento por AutoMata. Cada ranura de almacenamiento almacena un elemento de datos. γ representa la duración del viaje de los clientes en términos del número de franjas horarias. Por lo tanto, los posibles valores de latencia de disponibilidad están entre 0 y γ.  se define como el número de franjas horarias después de lo cual un dispositivo cliente AutoMata encontrará una réplica del elemento de datos por primera vez. Si una réplica para el elemento de datos solicitado fue encontrado por el cliente en la primera celda, a continuación, se establece  = 0. Si se trata de un elemento de datos solicitado, el cliente no encontró ninguna copia del elemento de datos solicitado durante todo su viaje. En todas nuestras simulaciones, para la ilustración consideramos un 5 × 5 2D-torus con γ fijado a 10. Nuestros experimentos indican que las tendencias en la escala de resultados a mapas de mayor tamaño. Simulamos una distribución sesgada de acceso a los datos T que obedece a la ley Ziffs con una media de 0.27. Esta distribución corresponde a la venta de entradas de cine en los Estados Unidos [6]. Empleamos un esquema de replicación que asigna réplicas para un elemento de datos en función de la raíz cuadrada de la frecuencia de acceso de ese elemento. Se muestra que el esquema de replicación de raíz cuadrada tiene un rendimiento de latencia competitivo en un gran espacio de parámetros [8]. Las réplicas de elementos de datos se distribuyen uniformemente entre los dispositivos AutoMata. Esto sirve como el caso de la línea base sin cebros. El esquema de raíz cuadrada también proporciona la distribución de réplica inicial cuando se emplean zebroids. Tenga en cuenta que los reemplazos realizados por los zebroids causarán cambios en la distribución de réplica de ítems de datos. Las solicitudes generadas según la distribución Zipf se emiten una a la vez. El coche cliente que emite la solicitud se elige de una manera redonda-robina. Después de un período máximo de γ, se registra la latencia con que se encontró esta solicitud. En todos los resultados de simulación, cada punto es un promedio de 200.000 solicitudes. Además, los intervalos de confianza del 95% determinados para los resultados son bastante ajustados para las métricas de latencia y los gastos generales de reemplazo. Por lo tanto, sólo los presentamos para la métrica que captura la mejora porcentual de la latencia con respecto al caso de no-zebroides. 6. RESULTADOS En esta sección, describimos nuestros resultados de evaluación donde se abordan las siguientes preguntas clave. Con una amplia selección de esquemas de reemplazo disponibles para un \"zebroid\", ¿cuál es su efecto en la latencia de disponibilidad? Una pregunta más central es: Do zebroids provide 78 0 20 40 60 80 100 1.5 2 2.5 3 3.5 Número de coches Latencia de disponibilidad agregada (­agg ) lru_global lfu_global lru_local lfu_local random Figura 1: La figura 1 muestra la latencia de disponibilidad al emplear cebroids uno-instantáneos en función de los valores (N,α), cuando el ¿Cuáles son los gastos generales asociados en el empleo de estos zebroides? ¿Qué sucede con estas mejoras en escenarios donde un despachador puede tener información imperfecta sobre las rutas del automóvil? ¿Cuáles son las compensaciones inherentes entre la densidad del automóvil y el almacenamiento por automóvil en lo que respecta a su efecto combinado e individual sobre la latencia de la disponibilidad en presencia de zebroids? Presentamos análisis simples y simulaciones detalladas para proporcionar respuestas a estas preguntas, así como para obtener información sobre el diseño de sistemas basados en operadores. 6.1 ¿Cómo un esquema de sustitución empleado por un \"zebroid\" afecta la latencia de la disponibilidad? Para ilustrarlo, presentamos experimentos de escala en los que se emplean cebroides oneinstantáneos (ver Figura 1). Por escala, queremos decir que α y N se cambian proporcionalmente para mantener el almacenamiento total del sistema, ST, constante. Aquí, T = 50 y ST = 200. Elegimos los siguientes valores de (N,α) = {(20,10), (25,8), (50,4), (100,2)}. La cifra indica que un plan de sustitución al azar muestra un rendimiento competitivo. Esto se debe a varias razones. Recuerde que la distribución de réplica inicial se establece según el esquema de replicación de raíz cuadrada. El esquema de reemplazo aleatorio no altera esta distribución ya que hace que los reemplazos ciegos a la popularidad de un elemento de datos. Sin embargo, los reemplazos causan una reorganización dinámica de los datos a fin de atender mejor a la solicitud activa actual. Además, el patrón de movilidad de los coches es aleatorio, por lo que las ubicaciones desde las que los clientes emiten las solicitudes también son aleatorias y no se conocen a priori en el despachador. Estas conclusiones son importantes porque una política de sustitución aleatoria puede aplicarse de manera descentralizada. Los esquemas rru-global y lfu-global proporcionan un rendimiento de latencia que es peor que aleatorio. Esto se debe a que estas políticas desarrollan rápidamente una preferencia por los elementos de datos más populares, creando así un mayor número de réplicas para ellos. Durante el desalojo, los datos más populares casi nunca se seleccionan como candidatos de reemplazo. En consecuencia, hay menos réplicas para los artículos menos populares. Por lo tanto, la distribución inicial del elemento de datos replica cambios de raíz cuadrada a que se asemeja a replicación lineal. El mayor número de réplicas de las partidas de datos populares proporciona beneficios adicionales marginales, mientras que el menor número de réplicas de las demás partidas de datos perjudica el rendimiento de latencia de estas políticas mundiales. Los esquemas lfu-local y lru-local tienen un rendimiento similar al aleatorio ya que no tienen suficiente historial de solicitudes de datos locales. Especulamos que el desempeño de estas políticas locales se acercará al de sus variantes globales para una historia suficientemente grande de solicitudes de ítems de datos. Debido al rendimiento competitivo demostrado por una política aleatoria, para el resto del documento, presentamos el rendimiento de los zebroids que emplean una política de reemplazo aleatorio. 6.2 ¿Proporcionan los zebroids mejoras significativas en la latencia de disponibilidad? Encontramos que en muchos escenarios que emplean zebroids proporciona mejoras sustanciales en la latencia de la disponibilidad. 6.2.1 Análisis Primero consideramos el caso de los cebroides uno-instantáneos. La Figura 2.a muestra la variación en Łagg en función de N para T = 10 y α = 1 con 10 × 10 toros usando la Ecuación 4. Los ejes x e y se dibujan a una escala de registro. En la figura 2.b se muestra la mejoría en % en el Agg obtenido con cebroides uniinstantáneos. En este caso, sólo el eje x se dibuja a una escala de registro. Para ilustrar, suponemos que los datos T son solicitados uniformemente. Inicialmente, cuando la red es escasa la aproximación analítica para mejoras en la latencia con zebroids, obtenida de las ecuaciones 2 y 4, coincide estrechamente con los resultados de la simulación. Sin embargo, a medida que N aumenta, la suposición de escasez para la que el análisis es válido, a saber, N+G, ya no es cierta. Por lo tanto, las dos curvas divergen rápidamente. El punto en el que las dos curvas se alejan unas de otras corresponde a un valor de Además, como se mencionó anteriormente, el análisis proporciona un límite superior a las mejoras de la latencia, ya que trata de las réplicas recién creadas dadas por Nc i de forma independiente. Sin embargo, estas réplicas de Nc i comienzan desde la misma celda que una de las réplicas de servidor ri. Finalmente, el análisis captura un escenario oneshot donde dada una distribución inicial de réplica de datos, se calcula la latencia de disponibilidad. Las nuevas réplicas creadas no afectan las solicitudes futuras del cliente. Debido a las limitaciones de espacio, aquí, se resumen las observaciones en el caso de z-relay zebroids se emplean. El lector interesado puede obtener más detalles en [9]. Observaciones similares, como el caso de un \"zebroideo\" instantáneo, se aplican ya que las curvas de simulación y análisis comienzan de nuevo a diferir cuando los supuestos de análisis ya no son válidos. Sin embargo, la observación clave aquí es que la mejora de la latencia con z-relay zebroids es significativamente mejor que el caso de cebroids uno-instantáneos, especialmente para escenarios de almacenamiento más bajos. Esto se debe a que en escenarios escasos, los traspasos transitivos entre los zebroides crean un mayor número de réplicas para el ítem de datos solicitado, lo que produce una menor latencia de disponibilidad. Por otra parte, también se observa que la curva de validación de simulación para las mejoras en Łagg con z-relay zebroids se aproxima a la del caso \"zebroid\" uno-instantánea para un almacenamiento más alto (valores N más altos). Esto se debe a que los cebroides uno-instantáneos son un caso especial de z-relay zebroides. 6.2.2 Simulación Realizamos simulaciones para examinar todo el espectro de almacenamiento obtenido cambiando la densidad del vehículo N o el almacenamiento por coche α para capturar también escenarios en los que no se mantienen las hipótesis de escasez para las que el análisis es válido. Separamos el efecto de N y α capturando la variación de N manteniendo constante α (caso 1) y viceversa (caso 2) tanto con z-relay y cebroides uno-instantáneos. Aquí, establecemos el tamaño del repositorio como T = 25. En el gráfico 3 figura el caso 1 mencionado anteriormente. Se observan tendencias similares con el caso 2, en [9] se dispone de una descripción completa de esos resultados. Con la Figura 3.b, manteniendo constante α, la densidad del coche aumenta inicialmente tiene mayores beneficios de latencia porque el aumento de N introduce más zebroids en el sistema. A medida que N se incrementa aún más, • reduce porque el almacenamiento total en el sistema sube. En consecuencia, el número de réplicas por elemento de datos sube aumentando así el número de servidores 79. Por lo tanto, la política de reemplazo no puede encontrar un \"zebroid\" tan a menudo para transportar el elemento de datos solicitado al cliente antes que cualquiera de los servidores. Por otro lado, el aumento del número de servidores beneficia al caso de no-zebroids al reducir a Agg. El efecto neto da lugar a una reducción de los valores más grandes de N. 10 1 10 2 10 3 10 −1 10 0 10 1 10 2 Número de automóviles no-zebroidsanal no-zebroids sim one-instantaneoussim Agregación Disponibilidad Latencia (­agg ) 2.a) Agg 10 1 10 2 10 3 0 10 20 40 50 60 70 80 90 100 Número de automóviles % Mejora Las tendencias mencionadas anteriormente son similares a las obtenidas del análisis. Sin embargo, algo contra-intuitivamente con almacenamiento relativamente más alto del sistema, z-relay zebroids proporcionan mejoras ligeramente más bajas en la latencia en comparación con uno-instantaneous zebroids. Especulamos que esto se debe a las diferentes distribuciones de réplicas de ítems de datos impuestas por ellos. Tenga en cuenta que los reemplazos realizados por los zebroids causan fluctuaciones en estas distribuciones de réplica que pueden afectar futuras solicitudes de clientes. Actualmente estamos explorando opciones adecuadas de parámetros que pueden capturar estas distribuciones de réplicas cambiantes. 6.3 ¿Cuáles son los gastos generales derivados de la mejora de la latencia de los zebroideos? Encontramos que las mejoras en la latencia con zebroids se obtienen con un mínimo de reemplazo de los gastos generales (< 1 por solicitud del cliente). 6.3.1 Análisis Con cebroides uniinstantáneos, para cada solicitud de cliente se emplea un máximo de un \"zebroide\" para mejorar la latencia. Por lo tanto, los gastos generales de sustitución por solicitud del cliente pueden ascender a un máximo de uno. Recordemos que para calcular la latencia con una latencia instantánea 0 50 100 150 200 250 350 400 0 1 2 3 4 5 6 Número de coches Latencia de disponibilidad agregada (?agg ) no-zebroids one-instantaneous z-relays 3.a 0 50 100 150 200 250 300 350 400 0 10 20 30 40 50 60 Número de coches % Mejora en?agg wrt no-zebro Ahora un reemplazo sólo se incumple si una de estas réplicas de Nc i de nueva creación se reúne con el cliente antes que cualquiera de los servidores de ri. Que Xri y XNc i respectivamente sean variables aleatorias que capturen el tiempo mínimo hasta que cualquiera de las réplicas de ri y Nc i cumpla con el cliente. Dado que Xri y XNc i se supone que son independientes, por la propiedad de variables aleatorias distribuidas exponencialmente tenemos, Overhead/request = 1 · P(XNc i < Xri ) + 0 · P(Xri ≤ XNc i ) (6) Overhead/request = ri C ri C + Nc i C = ri ri + Nc i (7) Sin embargo, si N  es constante entonces el aumento de las causas N α 80 0 20 40 60 80 100 0 0,05 0,15 0,20 0,25 0,35 0,40 0,45 0,5 Número de coches cebroides instantáneos número medio de reemplazos por solicitud (N=20,α=10) (N=25,α=8) (N=50,α=4) (N=100,α=2) Figura 4: La figura 4 captura el reemplazo de Esto implica que se incurre en un aumento de los gastos generales de sustitución para valores N y α más altos. Por otra parte, cuando ri = N, esto significa que cada coche tiene una réplica de elemento de datos i. Por lo tanto, no se emplean zebroids cuando se solicita este artículo, lo que da lugar a un gasto general/solicitud para este artículo como cero. A continuación, presentamos resultados de simulación que validan nuestra hipótesis de análisis para los gastos generales asociados con el despliegue de cebroides uno-instantáneos. 6.3.2 Simulación En la figura 4 se muestra la superficie de repuesto con cebroides uno-instantáneos cuando se varían (N,α) manteniendo constante el almacenamiento total del sistema. Las tendencias mostradas por la simulación concuerdan con las previstas por el análisis anterior. Sin embargo, el almacenamiento total del sistema puede ser cambiado ya sea por la densidad variable del coche (N) o el almacenamiento por coche (α). Debido a tendencias similares, aquí presentamos el caso cuando α se mantiene constante y N es variada (Figura 5). Referimos al lector a [9] para el caso cuando α es variado y N se mantiene constante. Presentamos un argumento intuitivo para el comportamiento de las curvas superiores de reemplazo de la solicitud. Cuando el almacenamiento es extremadamente escaso de modo que sólo existe una réplica por elemento de datos en la red AutoMata, el número de reemplazos realizados por los zebroids es cero ya que cualquier reemplazo causará que un elemento de datos se pierda del sistema. El despachador garantiza que no se pierda ningún elemento de datos del sistema. En el otro extremo del espectro, si el almacenamiento se vuelve tan abundante que α = T entonces todo el repositorio de elementos de datos se puede replicar en cada coche. El número de reemplazos es de nuevo cero ya que cada solicitud puede ser satisfecha localmente. Un escenario similar ocurre si N se aumenta a un valor tan grande que otro coche con el elemento de datos solicitado siempre está disponible en las proximidades del cliente. Sin embargo, hay un espectro de almacenamiento en el medio donde los reemplazos por los zebroides programados dan lugar a mejoras en el Agg (ver Figura 3). Por otra parte, observamos que para escenarios de almacenamiento escasos, las mejoras más altas con z-relay zebroids se obtienen al costo de un aumento de los gastos generales de reemplazo en comparación con el caso de cebroids uno-instantáneos. Esto se debe a que en el caso anterior, cada uno de estos z zebroids seleccionados a lo largo de la ruta de latencia más baja al cliente necesita realizar un reemplazo. Sin embargo, los gastos generales de sustitución son todavía inferiores a 1 lo que indica que en promedio se necesita menos de un reemplazo por solicitud del cliente, incluso cuando se emplean z-relay zebroids. 0 50 100 150 200 250 300 350 400 0 0,1 0,2 0,3 0,4 0,6 0,7 0,8 0,9 1 Número de coches z-reemplaza uno-instantánea Número medio de reemplazos por solicitud Figura 5: La figura 5 muestra los gastos generales de reemplazo con cebroide para los casos en que N es diferente manteniendo α = 2. 10 20 30 40 50 60 70 80 90 100 0 0,5 1 1,5 2 2,5 3 3,5 4 Porcentaje de predicción no-zebroideos (N=50) uno-instantáneos (N=50) z-relés (N=50) no-zebroideos (N=200) uno-instantáneos (N=200) z-relés (N=200) Disponibilidad agregada Latencia ( 6.4 ¿Qué sucede con la latencia de la disponibilidad con zebroids en escenarios con inexactitudes en las predicciones de la ruta del coche? Encontramos que los zebroids continúan proporcionando mejoras en la latencia de la disponibilidad incluso con menor precisión en las predicciones de la ruta del coche. Utilizamos un único parámetro p para cuantificar la exactitud de las predicciones de la ruta del coche. 6.4.1 Análisis Dado que p representa la probabilidad de que una ruta del automóvil predicha por el expedidor coincida con la actual, por lo tanto, la latencia con los zebroideos puede ser aproximada por, 6.4.2 Simulación En la figura 6 se muestra la variación en el Agg en función de esta métrica de precisión de la predicción de ruta. Observamos una reducción suave en la mejora de 81 en Agg a medida que la métrica de precisión de predicción reduce. Para los zebroids que están programados pero no se reúnen con el cliente debido al error de predicción, etiquetamos tales reemplazos hechos por los zebroids como fallados. Se ve que los reemplazos fallidos aumentan gradualmente a medida que la precisión de la predicción se reduce. 6.5 ¿En qué condiciones se maximizan las mejoras en la latencia de disponibilidad con zebroids? Sorprendentemente, encontramos que las mejoras en la latencia obtenidas con cebroides uno-instantáneos son independientes de la distribución de entrada de la popularidad de los ítems de datos. 6.5.1 Análisis La diferencia fraccionaria (marcada en la letra ) en la latencia entre los cebroides no-zebroideos y los cebroides uno-instantáneos se obtiene a partir de las ecuaciones 2, 3 y 4 de la siguiente forma: T i=1 fi·C ri − T i=1 fi·C ri+(N−ri)·(1−(1− 1 G )ri Let α = 1, haciendo el almacenamiento total en el sistema ST = N. Suponiendo que la distribución de réplica inicial es según el esquema de replicación de raíz cuadrada, tenemos, ri = fi·N T j = 1 fj. Por lo tanto, obtenemos fi = K2 ·r2 i N2, donde K = T j=1 fj. Utilizando esto, junto con la aproximación (1 − x)n 1 − n · x para x pequeña, simplificamos la ecuación anterior para obtener, • = 1 − T i=1 ri 1+ N−ri G T i=1 ri Para determinar cuándo se maximizan las ganancias con cebroides uno-instantáneos, podemos enmarcar un problema de optimización de la siguiente manera: Maximizar •, sujeto a T i Con un esquema de replicación de raíz cuadrada, las mejoras obtenidas con cebroides uniinstantáneos son independientes de la distribución de popularidad de entrada de los ítems de datos. (Ver [9] para la prueba) 6.5.2 Simulación Realizamos simulaciones con dos diferentes distribución de frecuencias de ítems de datos: Uniforme y Zipfian (con media= 0.27). En ambos casos se obtienen mejoras similares de latencia con cebroides uniinstantáneos. Este resultado tiene importantes implicaciones. En casos con popularidad sesgada hacia ciertos ítems de datos, las mejoras agregadas en la latencia en todas las solicitudes de ítems de datos siguen siendo las mismas. Incluso en escenarios en los que la frecuencia de acceso a los datos cambia dinámicamente, los zebroids seguirán proporcionando mejoras similares en la latencia. 7. CONCLUSIONES Y FUTURAS DIRECCIONES DE INVESTIGACIÓN En este estudio, examinamos las mejoras en la latencia que se pueden obtener en presencia de transportistas que entregan un elemento de datos desde un servidor a un cliente. Se cuantificó la variación de la latencia de disponibilidad en función de un rico conjunto de parámetros como la densidad del coche, el almacenamiento por coche, el tamaño de la base de datos de título y las políticas de reemplazo empleadas por los zebroids. A continuación se resumen algunas direcciones clave de investigación en el futuro que pretendemos seguir. Para reflejar mejor la realidad nos gustaría validar las observaciones obtenidas de este estudio con algunos rastros de simulación del mundo real de movimientos vehiculares (por ejemplo usando CORSIM [1]). Esto también servirá como validación para la utilidad del modelo de movilidad Markov utilizado en este estudio. Actualmente estamos analizando el desempeño de los zebroids en un conjunto de datos del mundo real que comprende una red ad-hoc de autobuses que se mueven alrededor de un pequeño barrio en Amherst [4]. Los cebroides también se pueden utilizar para la entrega de datos que transportan información sensible al retraso con una determinada caducidad. Las extensiones a zebroids que satisfacen estos requisitos de aplicación presentan una dirección de investigación futura interesante. 8. AGRADECIMIENTOS Esta investigación fue apoyada en parte por una beca Annenberg y subvenciones NSF numeradas CNS-0435505 (NeTS NOSS), CNS-0347621 (CAREER), y IIS-0307908. 9. REFERENCIAS [1] Administración Federal de Carreteras. Simulación del corredor. Versión 5.1, http://www.ops.fhwa.dot.gov/trafficanalysistools/cors im.htm. [2] D. Aldous y J. Llena. Cadenas de markov reversibles y caminatas aleatorias en gráficos. En preparación. [3] A. Bar-Noy, I. Kessler y M. Sidi. Usuarios móviles: Para actualizar o no actualizar. En IEEE Infocom, 1994. [4] J. Burgess, B. Gallagher, D. Jensen, y B. Levine. MaxProp: Enrutamiento para redes tolerantes a perturbaciones basadas en vehículos. En IEEE Infocom, abril de 2006. [5] E. Cohen y S. Shenker. Estrategias de replicación en redes de pares no estructuradas. En SIGCOMM, 2002. [6] A. Dan, D. Dias, R. Mukherjee, D. Sitaram y R. Tewari. Buffering y Caching en servidores de vídeo a gran escala. En COMPCON, 1995. [7] S. Ghandeharizadeh, S. Kapadia, y B. Krishnamachari. PAVAN: Marco normativo para la disponibilidad de contenidos en las redes ad hoc de vehículos. En VANET, Nueva York, Nueva York, Estados Unidos, 2004. ACM Press. [8] S. Ghandeharizadeh, S. Kapadia, y B. Krishnamachari. Comparación de estrategias de replicación para la disponibilidad de contenido en redes C2P2. En MDM, mayo de 2005. [9] S. Ghandeharizadeh, S. Kapadia, y B. Krishnamachari. Una evaluación de la latencia de disponibilidad en redes de vehículos ad-hoc basadas en el portador. Informe técnico, Departamento de Ciencias de la Computación, Universidad del Sur de California, CENG-2006-1, 2006. [10] S. Ghandeharizadeh y B. Krishnamachari. C2p2: Una red inter pares para servicios de información de automóviles a petición. En Globe. IEEE, 2004. [11] T. Hara. Asignación eficaz de réplicas en redes ad-hoc para mejorar la accesibilidad de datos. En IEEE Infocom, 2001. [12] H. Hayashi, T. Hara, y S. Nishio. Un método de asignación de réplica Adaptarse a los cambios de topología en redes ad-hoc. En DEXA, 2005. [13] P. Juang, H. Oki, Y. Wang, M. Martonosi, L. Peh, y D. Rubenstein. Computación energéticamente eficiente para el seguimiento de vida silvestre: compensaciones de diseño y experiencias tempranas con ZebraNet. Silgarch Comput. Archit. Noticias, 2002. [14] A. Pentland, R. Fletcher y A. Hasson. DakNet: Repensar la conectividad en las naciones en desarrollo. Computadora, 37(1):78-83, 2004. [15] F. Sailhan y V. Issarny. Caché cooperativo en redes ad-hoc. En MDM, 2003. [16] R. Shah, S. Roy, S. Jain y W. Brunette. Mulas de datos: Modelado y análisis de una arquitectura de tres niveles para redes de sensores escasas. Elsevier ad-hoc Networks Journal, 1o de septiembre de 2003. [17] T. Schiropoulos, K. Psounis y C. Raghavendra. Enrutamiento de una sola copia en redes móviles conectadas intermitentemente. En SECON, abril de 2004. [18] A. Tanenbaum. Sistemas operativos modernos, 2a edición, capítulo 4, sección 4.4. Prentice Hall, 2001. [19] A. Vahdat y D. Becker. Ruta epidémica para redes ad-hoc parcialmente conectadas. Informe técnico, Departamento de Informática, Universidad de Duke, 2000. [20] W. Zhao, M. Ammar, y E. Zegura. Un enfoque de ferriing de mensajes para la entrega de datos en redes móviles ad-hoc escasas. En MobiHoc, págs. 187 a 198, Nueva York, NY, Estados Unidos, 2004. ACM Press. [21] M. Zonoozi y P. Dassanayake. Modelado de Movilidad de Usuario y Caracterización del Patrón de Movilidad. Revista IEEE sobre áreas seleccionadas en las comunicaciones, 15:1239-1252, septiembre de 1997. 82 ",
            "error": [
                "zebroid",
                "zebroid",
                "zebroid",
                "zebroid",
                "zebroid",
                "zebroid",
                "zebroid",
                "zebroid",
                "zebroid",
                "zebroid",
                "zebroid",
                "zebroid",
                "zebroid",
                "zebroid",
                "zebroid",
                "zebroid",
                "zebroideo",
                "zebroid",
                "zebroid",
                "zebroide"
            ]
        },
        "simplified instantiation of zebroid": {
            "translated_key": [],
            "translated_annotated_text": "Una evaluación de la latencia de disponibilidad en redes ad hoc vehiculares basadas en portador Shahram Ghandeharizadeh Dept of Computer Science Univ of Southern California Los Angeles, CA 90089, USA shahram@usc.edu Shyam Kapadia Dept of Computer Science Univ of Southern California Los Angeles, CA 90089, USA kapadia@usc.edu Bhaskar Krishna Nuestro entorno de destino utiliza portadores de datos, llamados zebroids, donde un dispositivo móvil lleva un elemento de datos en nombre de un servidor a un cliente, minimizando así su latencia de disponibilidad. En este estudio, cuantificamos la variación de la latencia de disponibilidad con zebroids en función de un rico conjunto de parámetros como densidad de coche, almacenamiento por dispositivo, tamaño del repositorio y políticas de reemplazo empleadas por zebroids. Utilizando análisis y simulaciones extensas, obtenemos ideas novedosas sobre el diseño de sistemas basados en operadores. Se pueden obtener mejoras significativas en la latencia con zebroids a costa de un mínimo gasto general. Estas mejoras se producen incluso en escenarios con menor precisión en las predicciones de las rutas del coche. Dos hallazgos particularmente sorprendentes son: (1) una política de sustitución aleatoria ingenua empleada por los zebroids muestra un rendimiento competitivo, y (2) mejoras de la latencia obtenidas con una instanciación simplificada de zebroids se encuentran robustos a los cambios en la distribución de popularidad de los ítems de datos. Categorías y Subject Descriptores: C.2.4 [Sistemas distribuidos]: Términos Generales del Cliente/Servidor: Algoritmos, Rendimiento, Diseño, Experimentación. 1. INTRODUCCIÓN Los avances tecnológicos en las esferas del almacenamiento y las comunicaciones inalámbricas han hecho posible ahora prever la entrega a petición de datos, por ejemplo, para clips de vídeo y audio, en redes de peer-topeer vehiculares. En trabajos previos, Ghandeharizadeh et al. [10] introduce el concepto de vehículos equipados con un dispositivo Car-to-Car-Peer-toPeer, denominado AutoMata, para el entretenimiento dentro del vehículo. Las características notables de un AutoMata incluyen un dispositivo de almacenamiento masivo que ofrece cientos de gigabytes (GB) de almacenamiento, un procesador rápido y varios tipos de tarjetas de red. Incluso con las unidades de disco actuales de 500 GB, un repositorio de contenido de entretenimiento diverso puede exceder la capacidad de almacenamiento de un solo AutoMata. Tales repositorios constituyen el foco de este estudio. Para intercambiar datos, suponemos que cada AutoMata está configurado con dos tipos de tarjetas de red: 1) una tarjeta de red de baja anchura de banda con un radio-rango largo en el orden de millas que permite a un dispositivo AutoMata comunicarse con una estación celular cercana o WiMax, 2) una tarjeta de red de alta anchura de banda con un radio-rango limitado en el orden de cientos de pies. La conexión de ancho de banda alto admite tasas de datos en el orden de decenas a cientos de megabits por segundo y representa la red ad-hoc peer a peer entre los vehículos. Esto se etiqueta como el plano de datos y se emplea para intercambiar elementos de datos entre dispositivos. La conexión de baja anchura de banda sirve como plano de control, permitiendo a los dispositivos AutoMata intercambiar meta-datos con uno o más servidores centralizados. Esta conexión ofrece anchos de banda en el orden de decenas a cientos de Kilobits por segundo. Los servidores centralizados, denominados despachadores, calculan los calendarios de entrega de datos a lo largo del plano de datos utilizando los metadatos proporcionados. Estos horarios se transmiten a los vehículos participantes que utilizan el avión de control. La viabilidad técnica de tal arquitectura de dos niveles se presenta en [7], con resultados preliminares para demostrar que el ancho de banda del plano de control es suficiente para el intercambio de la información de control necesaria para realizar tal aplicación. En un escenario típico, un dispositivo AutoMata presenta a un pasajero con una lista de elementos de datos1, mostrando tanto el nombre de cada elemento de datos como su latencia de disponibilidad. Este último, denotado como ♥, se define como el momento más temprano en que el cliente encuentra una copia de su elemento de datos solicitado. Un elemento de datos está disponible inmediatamente cuando reside en el almacenamiento local del dispositivo AutoMata que atiende a la solicitud. Debido a las restricciones de almacenamiento, un AutoMata puede no almacenar todo el repositorio. En este caso, la latencia de disponibilidad es el tiempo desde que el usuario emite una solicitud hasta que el AutoMata encuentra otro coche que contiene el elemento de datos referenciado. (Los términos coche y AutoMata se utilizan indistintamente en este estudio.) La latencia de disponibilidad para un artículo es una función de la ubicación actual del cliente, su ruta de destino y viaje, el modelo de movilidad de los vehículos equipados con AutoMata, el número de réplicas construidas para los diferentes elementos de datos, y la colocación de réplicas de elementos de datos a través de los vehículos. Un método para mejorar la latencia de disponibilidad es emplear portadores de datos que transportan una réplica del elemento de datos solicitado desde un coche servidor que lo contiene a un cliente que lo solicitó. Estos portadores de datos se denominan zebroids. La selección de cebroides es facilitada por la arquitectura de dos niveles. El plano de control permite la recopilación centralizada de información en un despachador presente en una estación base.2 Algunos ejemplos de control en1 Sin pérdida de generalidad, el término elemento de datos puede ser medios tradicionales como texto o medios continuos como un clip de audio o vídeo. 2 Puede haber despachadores desplegados en un subconjunto de las estaciones de base para la tolerancia a fallos y la robustez. Los distribuidores entre estaciones de base pueden comunicarse a través de la infraestructura cableada. 75 formación son actualmente solicitudes activas, ruta de viaje de los clientes y sus destinos, y caminos de los otros coches. Para cada solicitud del cliente, el despachador puede elegir un conjunto de portadores z que colaboran para transferir un elemento de datos de un servidor a un cliente (z-relay zebroids). Aquí, z es el número de zebroids tales que 0 ≤ z < N, donde N es el número total de coches. Cuando z = 0 no hay portadores, lo que requiere un servidor para entregar el elemento de datos directamente al cliente. De lo contrario, el equipo de relé elegido de z zebroids se entregará los datos de forma transitoria unos a otros para llegar al cliente, reduciendo así la latencia de la disponibilidad (para más detalles, véase la sección 3.1). Para aumentar la robustez, el despachador puede emplear múltiples equipos de relé de portadoras z para cada solicitud. Esto puede ser útil en escenarios en los que el despachador tiene menor precisión de predicción en la información sobre las rutas de los coches. Por último, las restricciones de almacenamiento pueden requerir que un zebroid desaloje elementos de datos existentes de su almacenamiento local para acomodar el elemento solicitado por el cliente. En este estudio, se cuantifican los siguientes factores principales que afectan a la latencia de la disponibilidad en presencia de zebroideos: (i) tamaño del repositorio de datos, (ii) densidad del coche, (iii) capacidad de almacenamiento por coche, (iv) duración del viaje del cliente, (v) esquema de reemplazo empleado por los zebroideos, y (vi) exactitud de las predicciones de la ruta del coche. Para un subconjunto significativo de estos factores, abordamos algunas preguntas clave relativas al uso de zebroids tanto a través del análisis como de simulaciones extensas. Nuestras principales conclusiones son las siguientes. Una política de sustitución aleatoria ingenua empleada por los zebroids muestra un rendimiento competitivo en términos de latencia de disponibilidad. Con esta política, se pueden obtener mejoras sustanciales en la latencia con zebroids con un mínimo de gastos generales de reemplazo. En escenarios más prácticos, donde el despachador tiene información inexacta sobre las rutas del coche, los zebroids continúan proporcionando mejoras de la latencia. Un resultado sorprendente es que los cambios en la popularidad de los ítems de datos no impactan las ganancias de latencia obtenidas con una simple instanciación de z-relay zebroids llamados cebroids uno-instantáneos (ver Sección 3.1). Este estudio sugiere una serie de direcciones interesantes a seguir para obtener una mejor comprensión del diseño de sistemas basados en el portador que mejoran la latencia de disponibilidad. Trabajo relacionado: La replicación en redes móviles ad-hoc ha sido un tema ampliamente estudiado [11, 12, 15]. Sin embargo, ninguno de estos estudios emplea zebroids como portadores de datos para reducir la latencia de las solicitudes de los clientes. Varios estudios novedosos e importantes como ZebraNet [13], DakNet [14], Data Mules [16], Message Ferries [20] y Seek and Focus [17] han analizado factores que afectan a redes conectadas intermitentemente consistentes en portadores de datos similares en espíritu a los zebroideos. Los factores considerados por cada estudio son dictados por su supuesto entorno y aplicación diana. Una característica novedosa de nuestro estudio es el impacto en la latencia de disponibilidad para un repositorio de datos dado de elementos. En [9] se puede obtener una descripción detallada de las obras relacionadas. El resto de este documento está organizado de la siguiente manera. En la sección 2 se ofrece una visión general de la terminología junto con los factores que influyen en la latencia de la disponibilidad en presencia de zebroides. En la sección 3 se describe cómo se pueden emplear los cebroides. En la sección 4 se proporciona información detallada sobre la metodología de análisis empleada para captar el desempeño con los zebroids. En la sección 5 se describen los detalles del entorno de simulación utilizado para la evaluación. La sección 6 recoge las preguntas clave examinadas en este estudio y las responde a través de análisis y simulaciones. Por último, en la sección 7 se presentan breves conclusiones y futuras orientaciones de la investigación. 2. SINOPSIS Y TERMINOLOGÍA La Tabla 1 resume la notación de los parámetros utilizados en el artículo. A continuación introducimos algunas terminologías utilizadas en el artículo. Asumir una red de coches N AutoMata equipados, cada uno con capacidad de almacenamiento de α bytes. La capacidad total de almacenamiento del sistema es ST = N. Hay elementos de datos T en la base de datos, cada uno con parámetros de base de datos T Número de elementos de datos. Si Tamaño del ítem de datos i fi Frecuencia de acceso al ítem de datos i. Parámetros de replicación Ri Frecuencia normalizada de acceso al ítem de datos i ri Número de réplicas para ítem de datos i n Caracteriza un esquema de replicación particular. Latencia media de la disponibilidad del elemento de datos i Łagg Latencia agregada de la disponibilidad, N Número de dispositivos AutoMata en el sistema. α Capacidad de almacenamiento por AutoMata. γ Duración del viaje del cliente AutoMata. ST Capacidad total de almacenamiento del sistema AutoMata, ST = N · α. Cuadro 1: Términos y sus definiciones tamaño Si. La frecuencia de acceso al ítem de datos i se denota como fi, con T j=1 fj = 1. Deje que la duración del viaje del cliente AutoMata en consideración sea γ. Ahora definimos la frecuencia normalizada de acceso al ítem de datos i, denotado por Ri, como: Ri = (fi)n T j=1(fj)n ; 0 ≤ n ≤ فارسى (1) El exponente n caracteriza una técnica de replicación particular. Un esquema de replicación de raíz cuadrada se realiza cuando n = 0.5 [5]. Esto sirve como la línea base para la comparación con el caso cuando se despliegan zebroids. Ri se normaliza a un valor entre 0 y 1. El número de réplicas para el dato i, denotado como ri, es: ri = min (N, max (1, Ri·N Si )). Esto capta el caso cuando al menos una copia de cada elemento de datos debe estar presente en la red ad-hoc en todo momento. En los casos en que un elemento de datos se puede perder de la red ad-hoc, esta ecuación se convierte en ri = min (N, max (0, Ri·N Si )). En este caso, es posible que sea necesario satisfacer una solicitud para el elemento de datos perdido mediante la obtención del elemento desde un servidor remoto. La latencia de disponibilidad para un elemento de datos i, denotado como i, se define como la primera vez en la que un cliente AutoMata encontrará la primera réplica del elemento accesible a él. Si esta condición no se cumple, entonces se establece a i. Esto indica que el elemento de datos I no estaba disponible para el cliente durante su viaje. Tenga en cuenta que como hay al menos una réplica en el sistema para cada elemento de datos i, al establecer γ a un gran valor nos aseguramos de que los clientes soliciten cualquier elemento de datos i será satisfecho. Sin embargo, en la mayoría de las circunstancias prácticas γ puede no ser tan grande como para encontrar cada elemento de datos. Estamos interesados en la latencia de disponibilidad observada en todos los datos. Por lo tanto, aumentamos la latencia media de disponibilidad para cada ítem de datos i con su fi para obtener la siguiente latencia ponderada de disponibilidad (?agg) métrica:?agg = T i=1?i · fi A continuación, presentamos nuestro enfoque de solución describiendo cómo se seleccionan los zebroids. 3. ENFOQUE DE SOLUCIÓN 3.1 Zebroids Cuando un cliente hace referencia a un elemento de datos que falta en su almacenamiento local, el despachador identifica todos los coches con una copia del elemento de datos como servidores. A continuación, el despachador obtiene las rutas futuras de todos los coches para una duración de tiempo finito equivalente al tiempo máximo que el cliente está dispuesto a esperar a que su solicitud sea atendido. Utilizando esta información, el despachador programa la ruta de entrega más rápida desde cualquiera de los servidores al cliente utilizando cualquier otro coche como transportistas intermedios. Por lo tanto, determina el conjunto óptimo de decisiones de reenvío 76 que permitirá que el elemento de datos se entreguen al cliente en el mínimo de tiempo. Tenga en cuenta que la latencia a lo largo de la ruta de entrega más rápida que emplea un equipo de relé de z zebroids es similar a la obtenida con el encaminamiento epidémico [19] bajo los supuestos de almacenamiento infinito y ninguna interferencia. Una simple instanciación de z-relay zebroids se produce cuando z = 1 y la solicitud de los clientes desencadena una transferencia de una copia del elemento de datos solicitado de un servidor a un zebroid en su vecindad. Tal zebroideo se denomina cebroide uniinstantáneo. En algunos casos, el expedidor podría tener información inexacta sobre las rutas de los coches. Por lo tanto, un zebroid programado sobre la base de esta información inexacta puede no reunirse con su cliente objetivo. Para minimizar la probabilidad de tales escenarios, el despachador puede programar múltiples zebroids. Esto puede acarrear gastos generales adicionales debido a la utilización redundante de recursos para obtener las mismas mejoras de latencia. El tiempo necesario para transferir un elemento de datos de un servidor a un zebroid depende de su tamaño y del ancho de banda del enlace disponible. Con elementos de datos pequeños, es razonable suponer que este tiempo de transferencia es pequeño, especialmente en presencia del plano de datos de alto ancho de banda. Los elementos de datos grandes se pueden dividir en trozos más pequeños que permiten al despachador programar uno o más zebroids para entregar cada trozo a un cliente de una manera oportuna. Esta sigue siendo una dirección de investigación futura. Inicialmente, el número de réplicas para cada ítem de datos puede ser calculado usando la Ecuación 1. Este esquema calcula el número de réplicas de datos en función de su popularidad. Es estática porque el número de réplicas en el sistema no cambia y no se realizan reemplazos. Por lo tanto, esto se conoce como el ambiente de los nozebroids. Cuantificamos el desempeño de las diversas políticas de reemplazo con referencia a esta línea base que no emplea zebroids. Uno puede asumir una fase de arranque en frío, donde inicialmente sólo una o pocas copias de cada elemento de datos existen en el sistema. Muchas ranuras de almacenamiento de los coches pueden estar desocupados. Cuando los coches se encuentran entre sí, construyen nuevas réplicas de algunos elementos de datos seleccionados para ocupar los huecos vacíos. El procedimiento de selección puede consistir en elegir los datos de manera uniforme al azar. Nuevas réplicas se crean siempre y cuando un coche tiene un cierto umbral de su almacenamiento desocupado. Eventualmente, la mayoría de la capacidad de almacenamiento de un coche se agotará. 3.2 Políticas de reemplazo basadas en el operador Las políticas de reemplazo consideradas en este documento son reactivas ya que una sustitución se produce sólo en respuesta a una solicitud emitida para un determinado elemento de datos. Cuando el almacenamiento local de un zebroid está completamente ocupado, necesita reemplazar uno de sus elementos existentes para llevar el elemento de datos solicitado por el cliente. Para ello, el zebroid debe seleccionar a un candidato apropiado para el desalojo. Este proceso de decisión es análogo al encontrado en la paginación del sistema operativo donde el objetivo es maximizar la relación de acceso a la caché para evitar el retraso del acceso al disco [18]. Las políticas de reemplazo basadas en transportistas empleadas en nuestro estudio son las menos usadas recientemente (LRU), las menos usadas con frecuencia (LFU) y las aleatorias (donde un candidato de desalojo es elegido uniformemente al azar). Hemos considerado variantes locales y globales de las políticas LRU/LFU que determinan si el conocimiento local o global de los contenidos de los coches conocidos en el expedidor se utiliza para la decisión de desalojo en un zebroid (ver [9] para más detalles). Las pólizas de sustitución entrañan los siguientes gastos generales. En primer lugar, la complejidad asociada a la aplicación de una política. En segundo lugar, el ancho de banda utilizado para transferir una copia de un elemento de datos de un servidor al zebroid. En tercer lugar, el número medio de reemplazos realizados por los zebroides. Tenga en cuenta que en el caso de no cebroides no se incurre en gastos generales. Las métricas consideradas en este estudio son la latencia de la disponibilidad agregada, Tenga en cuenta que los despachadores con la ayuda del plano de control pueden asegurarse de que no se pierda ningún elemento de datos del sistema. En otras palabras, al menos una réplica de cada elemento de datos se mantiene en la red ad-hoc en todo momento. En tales casos, aunque un coche puede encontrarse con un cliente solicitante antes que otros servidores, si su almacenamiento local contiene elementos de datos con sólo una copia en el sistema, entonces tal coche no se elige como un zebroid. 4. METODOLOGÍA DE ANÁLISIS Aquí presentamos la metodología de evaluación analítica y algunas aproximaciones como ecuaciones de forma cerrada que capturan las mejoras en la latencia de disponibilidad que se pueden obtener tanto con cebros oneinstantáneos como con z-relay. Primero, presentamos algunos preliminares de nuestra metodología de análisis. • Que N sea el número de coches en la red que realizan una caminata aleatoria en 2D en un toro de G× G. Un coche adicional sirve como un cliente que entrega un total de N + 1 coches. Este modelo de movilidad se ha utilizado ampliamente en la literatura [17, 16] principalmente porque es susceptible de análisis y proporciona una base de referencia para comparar el rendimiento de otros modelos de movilidad. Además, esta clase de modelos de movilidad markoviana se ha utilizado para modelar los movimientos de los vehículos [3, 21]. • Asumimos que todos los coches comienzan desde la distribución estacionaria y realizan caminatas aleatorias independientes. Aunque para escenarios de densidad escasa, la suposición de independencia se mantiene, ya no es válido cuando N se aproxima a G. • Deje que el tamaño del repositorio de ítems de datos de interés sea T. Además, el ítem de datos i tiene réplicas ri. Esto implica que los coches ri, identificados como servidores, tienen una copia de este elemento de datos cuando el cliente solicita el elemento i. Todos los resultados de análisis presentados en esta sección se obtienen asumiendo que el cliente está dispuesto a esperar el tiempo necesario para que su solicitud sea satisfecha (duración del viaje sin límite γ = ­). Con el modelo de movilidad al azar en un torso 2D, hay una garantía de que mientras haya al menos una réplica del elemento de datos solicitado en la red, el cliente se encontrará con esta réplica [2]. Las extensiones al análisis que también consideran las duraciones del viaje finito se pueden obtener en [9]. Considere un escenario en el que no se emplean zebroids. En este caso, la latencia de disponibilidad esperada para el ítem de datos es el tiempo de reunión esperado de la caminata aleatoria realizada por el cliente con cualquiera de las caminatas aleatorias realizadas por los servidores. Aldous et al. [2] muestran que el tiempo de reunión de dos caminatas aleatorias en tal entorno puede modelarse como una distribución exponencial con la media C = c · G · log G, donde la constante c 0,17 para G ≥ 25. El tiempo de reunión, o equivalente a la latencia de la disponibilidad de i, para el cliente que solicita datos i es el momento hasta que se encuentre con cualquiera de estas réplicas ri por primera vez. Se trata también de una distribución exponencial con el siguiente valor esperado (obsérvese que esta formulación es válida sólo para casos escasos cuando G >> ri): فارسىi = cGlogG ri La latencia de disponibilidad agregada sin emplear zebroids es entonces esta expresión promediada sobre todos los ítems de datos, ponderada por su frecuencia de acceso: فارسىagg(no − zeb) = T i=1 fi Por otra parte, esta réplica se genera en el paso de tiempo cuando el cliente emite la solicitud. Que Nc i sea el número total esperado de nodos que están en la misma celda que cualquiera de los servidores ri. Luego, tenemos Nc i = (N − ri) · (1 − (1 − 1 G )ri ) (3) En el modelo analítico, suponemos que Nc i nuevas réplicas se crean, de modo que el número total de réplicas se aumenta a ri + Nc i. La latencia de disponibilidad se reduce ya que es más probable que el cliente cumpla con una réplica anterior. La latencia agregada de disponibilidad esperada en el caso de los cebroides uno-instantáneos es dada por, agg(zeb) = T i=1 fi · c · G · log G ri + Nc i = T i=1 fi · C ri + Nc i (4) Tenga en cuenta que al obtener esta expresión, para facilitar el análisis, hemos asumido que las nuevas réplicas comienzan Así trata a todos los portadores de Nc i de forma independiente, al igual que los servidores originales ri. Como mostraremos a continuación en comparación con las simulaciones, esta aproximación proporciona un límite superior a las mejoras que se pueden obtener porque da lugar a una menor latencia esperada en el cliente. Cabe señalar que el procedimiento mencionado anteriormente producirá una latencia similar a la empleada por un expedidor que emplee cebroides oneinstantáneos (véase la sección 3.1). Dado que el despachador es consciente de todos los movimientos futuros del coche que sólo transferiría el elemento de datos solicitado en un único zebroid, si determina que el zebroid se reunirá con el cliente antes que cualquier otro servidor. Este zebroid seleccionado está incluido en las nuevas réplicas de Nc i. 4.2 z-relay zebroids Para calcular la latencia de disponibilidad esperada con z-relay zebroids, utilizamos un análogo de problema de coloración similar a un enfoque utilizado por Spyropoulos et al. [17]. En [9] se dan detalles del procedimiento para obtener una expresión de forma cerrada. La latencia de disponibilidad agregada (agg) con z-relay zebroids es dada por, agg(zeb) = T i=1 [fi · C N + 1 · 1 N + 1 − ri · (N · log N ri − log (N + 1 − ri))] (5) 5. METODOLOGÍA DE SIMULACIÓN El entorno de simulación considerado en este estudio se compone de vehículos como automóviles que llevan una fracción del repositorio de datos. Un parámetro de precisión de predicción proporciona inherentemente una cierta garantía probabilística sobre la confianza de las predicciones de ruta del automóvil conocidas en el despachador. Un valor del 100% implica que las rutas exactas de todos los coches se conocen en todo momento. Un valor del 70% para este parámetro indica que las rutas previstas para los coches coincidirán con las reales con probabilidad 0.7. Tenga en cuenta que esta probabilidad se extiende a través de las rutas del coche durante toda la duración del viaje. Ahora proporcionamos los preliminares del estudio de simulación y luego describimos los parámetros de configuración utilizados en nuestros experimentos. • Similar a la metodología de análisis, el mapa utilizado es un toro 2D. Un modelo de movilidad Markov que representa una caminata aleatoria 2D imparcial en la superficie del toro describe el movimiento de los coches a través de este toro. • Cada cuadrícula/célula es un estado único de esta cadena Markov. En cada ranura de tiempo, cada coche hace una transición de una celda a cualquiera de sus 8 celdas vecinas. La transición es una función de la ubicación actual del coche y una matriz de transición de probabilidad Q = [qij] donde qij es la probabilidad de transición del estado i al estado j. Solo los coches equipados con AutoMata dentro de la misma celda pueden comunicarse entre sí. • Los parámetros γ,  han sido discretizados y expresados en términos del número de franjas horarias. • Un dispositivo AutoMata no mantiene más de una réplica de un elemento de datos. Esto se debe a que las réplicas adicionales ocupan el almacenamiento sin proporcionar beneficios. • Los cebroides de relé z o uno instantáneos pueden ser empleados por solicitud del cliente para mejorar la latencia. • A menos que se mencione lo contrario, se supone que el parámetro de precisión de la predicción es del 100%. Esto se debe a que este estudio pretende cuantificar el efecto de un gran número de parámetros individualmente sobre la latencia de la disponibilidad. Aquí, establecemos el tamaño de cada elemento de datos, Si, para ser 1. α representa el número de ranuras de almacenamiento por AutoMata. Cada ranura de almacenamiento almacena un elemento de datos. γ representa la duración del viaje de los clientes en términos del número de franjas horarias. Por lo tanto, los posibles valores de latencia de disponibilidad están entre 0 y γ.  se define como el número de franjas horarias después de lo cual un dispositivo cliente AutoMata encontrará una réplica del elemento de datos por primera vez. Si una réplica para el elemento de datos solicitado fue encontrado por el cliente en la primera celda, a continuación, se establece  = 0. Si se trata de un elemento de datos solicitado, el cliente no encontró ninguna copia del elemento de datos solicitado durante todo su viaje. En todas nuestras simulaciones, para la ilustración consideramos un 5 × 5 2D-torus con γ fijado a 10. Nuestros experimentos indican que las tendencias en la escala de resultados a mapas de mayor tamaño. Simulamos una distribución sesgada de acceso a los datos T que obedece a la ley Ziffs con una media de 0.27. Esta distribución corresponde a la venta de entradas de cine en los Estados Unidos [6]. Empleamos un esquema de replicación que asigna réplicas para un elemento de datos en función de la raíz cuadrada de la frecuencia de acceso de ese elemento. Se muestra que el esquema de replicación de raíz cuadrada tiene un rendimiento de latencia competitivo en un gran espacio de parámetros [8]. Las réplicas de elementos de datos se distribuyen uniformemente entre los dispositivos AutoMata. Esto sirve como el caso de la línea base sin cebros. El esquema de raíz cuadrada también proporciona la distribución de réplica inicial cuando se emplean zebroids. Tenga en cuenta que los reemplazos realizados por los zebroids causarán cambios en la distribución de réplica de ítems de datos. Las solicitudes generadas según la distribución Zipf se emiten una a la vez. El coche cliente que emite la solicitud se elige de una manera redonda-robina. Después de un período máximo de γ, se registra la latencia con que se encontró esta solicitud. En todos los resultados de simulación, cada punto es un promedio de 200.000 solicitudes. Además, los intervalos de confianza del 95% determinados para los resultados son bastante ajustados para las métricas de latencia y los gastos generales de reemplazo. Por lo tanto, sólo los presentamos para la métrica que captura la mejora porcentual de la latencia con respecto al caso de no-zebroides. 6. RESULTADOS En esta sección, describimos nuestros resultados de evaluación donde se abordan las siguientes preguntas clave. Con una amplia selección de esquemas de reemplazo disponibles para un zebroid, ¿cuál es su efecto en la latencia de disponibilidad? Una pregunta más central es: Do zebroids provide 78 0 20 40 60 80 100 1.5 2 2.5 3 3.5 Número de coches Latencia de disponibilidad agregada (­agg ) lru_global lfu_global lru_local lfu_local random Figura 1: La figura 1 muestra la latencia de disponibilidad al emplear cebroids uno-instantáneos en función de los valores (N,α), cuando el ¿Cuáles son los gastos generales asociados en el empleo de estos zebroides? ¿Qué sucede con estas mejoras en escenarios donde un despachador puede tener información imperfecta sobre las rutas del automóvil? ¿Cuáles son las compensaciones inherentes entre la densidad del automóvil y el almacenamiento por automóvil en lo que respecta a su efecto combinado e individual sobre la latencia de la disponibilidad en presencia de zebroids? Presentamos análisis simples y simulaciones detalladas para proporcionar respuestas a estas preguntas, así como para obtener información sobre el diseño de sistemas basados en operadores. 6.1 ¿Cómo funciona un esquema de sustitución empleado por un latencia de disponibilidad de impacto zebroideo? Para ilustrarlo, presentamos experimentos de escala en los que se emplean cebroides oneinstantáneos (ver Figura 1). Por escala, queremos decir que α y N se cambian proporcionalmente para mantener el almacenamiento total del sistema, ST, constante. Aquí, T = 50 y ST = 200. Elegimos los siguientes valores de (N,α) = {(20,10), (25,8), (50,4), (100,2)}. La cifra indica que un plan de sustitución al azar muestra un rendimiento competitivo. Esto se debe a varias razones. Recuerde que la distribución de réplica inicial se establece según el esquema de replicación de raíz cuadrada. El esquema de reemplazo aleatorio no altera esta distribución ya que hace que los reemplazos ciegos a la popularidad de un elemento de datos. Sin embargo, los reemplazos causan una reorganización dinámica de los datos a fin de atender mejor a la solicitud activa actual. Además, el patrón de movilidad de los coches es aleatorio, por lo que las ubicaciones desde las que los clientes emiten las solicitudes también son aleatorias y no se conocen a priori en el despachador. Estas conclusiones son importantes porque una política de sustitución aleatoria puede aplicarse de manera descentralizada. Los esquemas rru-global y lfu-global proporcionan un rendimiento de latencia que es peor que aleatorio. Esto se debe a que estas políticas desarrollan rápidamente una preferencia por los elementos de datos más populares, creando así un mayor número de réplicas para ellos. Durante el desalojo, los datos más populares casi nunca se seleccionan como candidatos de reemplazo. En consecuencia, hay menos réplicas para los artículos menos populares. Por lo tanto, la distribución inicial del elemento de datos replica cambios de raíz cuadrada a que se asemeja a replicación lineal. El mayor número de réplicas de las partidas de datos populares proporciona beneficios adicionales marginales, mientras que el menor número de réplicas de las demás partidas de datos perjudica el rendimiento de latencia de estas políticas mundiales. Los esquemas lfu-local y lru-local tienen un rendimiento similar al aleatorio ya que no tienen suficiente historial de solicitudes de datos locales. Especulamos que el desempeño de estas políticas locales se acercará al de sus variantes globales para una historia suficientemente grande de solicitudes de ítems de datos. Debido al rendimiento competitivo demostrado por una política aleatoria, para el resto del documento, presentamos el rendimiento de los zebroids que emplean una política de reemplazo aleatorio. 6.2 ¿Proporcionan los zebroids mejoras significativas en la latencia de disponibilidad? Encontramos que en muchos escenarios que emplean zebroids proporciona mejoras sustanciales en la latencia de la disponibilidad. 6.2.1 Análisis Primero consideramos el caso de los cebroides uno-instantáneos. La Figura 2.a muestra la variación en Łagg en función de N para T = 10 y α = 1 con 10 × 10 toros usando la Ecuación 4. Los ejes x e y se dibujan a una escala de registro. En la figura 2.b se muestra la mejoría en % en el Agg obtenido con cebroides uniinstantáneos. En este caso, sólo el eje x se dibuja a una escala de registro. Para ilustrar, suponemos que los datos T son solicitados uniformemente. Inicialmente, cuando la red es escasa la aproximación analítica para mejoras en la latencia con zebroids, obtenida de las ecuaciones 2 y 4, coincide estrechamente con los resultados de la simulación. Sin embargo, a medida que N aumenta, la suposición de escasez para la que el análisis es válido, a saber, N+G, ya no es cierta. Por lo tanto, las dos curvas divergen rápidamente. El punto en el que las dos curvas se alejan unas de otras corresponde a un valor de Además, como se mencionó anteriormente, el análisis proporciona un límite superior a las mejoras de la latencia, ya que trata de las réplicas recién creadas dadas por Nc i de forma independiente. Sin embargo, estas réplicas de Nc i comienzan desde la misma celda que una de las réplicas de servidor ri. Finalmente, el análisis captura un escenario oneshot donde dada una distribución inicial de réplica de datos, se calcula la latencia de disponibilidad. Las nuevas réplicas creadas no afectan las solicitudes futuras del cliente. Debido a las limitaciones de espacio, aquí, se resumen las observaciones en el caso de z-relay zebroids se emplean. El lector interesado puede obtener más detalles en [9]. Observaciones similares, como el caso cebroideo uniinstantaneo, se aplican ya que las curvas de simulación y análisis comienzan de nuevo a divergir cuando los supuestos de análisis ya no son válidos. Sin embargo, la observación clave aquí es que la mejora de la latencia con z-relay zebroids es significativamente mejor que el caso de cebroids uno-instantáneos, especialmente para escenarios de almacenamiento más bajos. Esto se debe a que en escenarios escasos, los traspasos transitivos entre los zebroides crean un mayor número de réplicas para el ítem de datos solicitado, lo que produce una menor latencia de disponibilidad. Por otra parte, también se observa que la curva de validación de simulación para las mejoras en Łagg con z-relay zebroids se aproxima a la del caso cebroideo uniinstantánea para un almacenamiento más alto (valores de N más altos). Esto se debe a que los cebroides uno-instantáneos son un caso especial de z-relay zebroides. 6.2.2 Simulación Realizamos simulaciones para examinar todo el espectro de almacenamiento obtenido cambiando la densidad del vehículo N o el almacenamiento por coche α para capturar también escenarios en los que no se mantienen las hipótesis de escasez para las que el análisis es válido. Separamos el efecto de N y α capturando la variación de N manteniendo constante α (caso 1) y viceversa (caso 2) tanto con z-relay y cebroides uno-instantáneos. Aquí, establecemos el tamaño del repositorio como T = 25. En el gráfico 3 figura el caso 1 mencionado anteriormente. Se observan tendencias similares con el caso 2, en [9] se dispone de una descripción completa de esos resultados. Con la Figura 3.b, manteniendo constante α, la densidad del coche aumenta inicialmente tiene mayores beneficios de latencia porque el aumento de N introduce más zebroids en el sistema. A medida que N se incrementa aún más, • reduce porque el almacenamiento total en el sistema sube. En consecuencia, el número de réplicas por elemento de datos sube aumentando así el número de servidores 79. Por lo tanto, la política de reemplazo no puede encontrar un zebroid tan a menudo para transportar el elemento de datos solicitado al cliente antes que cualquiera de los servidores. Por otro lado, el aumento del número de servidores beneficia al caso de no-zebroids al reducir a Agg. El efecto neto da lugar a una reducción de los valores más grandes de N. 10 1 10 2 10 3 10 −1 10 0 10 1 10 2 Número de automóviles no-zebroidsanal no-zebroids sim one-instantaneoussim Agregación Disponibilidad Latencia (­agg ) 2.a) Agg 10 1 10 2 10 3 0 10 20 40 50 60 70 80 90 100 Número de automóviles % Mejora Las tendencias mencionadas anteriormente son similares a las obtenidas del análisis. Sin embargo, algo contra-intuitivamente con almacenamiento relativamente más alto del sistema, z-relay zebroids proporcionan mejoras ligeramente más bajas en la latencia en comparación con uno-instantaneous zebroids. Especulamos que esto se debe a las diferentes distribuciones de réplicas de ítems de datos impuestas por ellos. Tenga en cuenta que los reemplazos realizados por los zebroids causan fluctuaciones en estas distribuciones de réplica que pueden afectar futuras solicitudes de clientes. Actualmente estamos explorando opciones adecuadas de parámetros que pueden capturar estas distribuciones de réplicas cambiantes. 6.3 ¿Cuáles son los gastos generales derivados de la mejora de la latencia de los zebroideos? Encontramos que las mejoras en la latencia con zebroids se obtienen con un mínimo de reemplazo de los gastos generales (< 1 por solicitud del cliente). 6.3.1 Análisis Con cebroides uniinstantáneos, para cada solicitud de cliente se emplea un máximo de un cebroide para mejorar la latencia. Por lo tanto, los gastos generales de sustitución por solicitud del cliente pueden ascender a un máximo de uno. Recordemos que para calcular la latencia con una latencia instantánea 0 50 100 150 200 250 350 400 0 1 2 3 4 5 6 Número de coches Latencia de disponibilidad agregada (?agg ) no-zebroids one-instantaneous z-relays 3.a 0 50 100 150 200 250 300 350 400 0 10 20 30 40 50 60 Número de coches % Mejora en?agg wrt no-zebro Ahora un reemplazo sólo se incumple si una de estas réplicas de Nc i de nueva creación se reúne con el cliente antes que cualquiera de los servidores de ri. Que Xri y XNc i respectivamente sean variables aleatorias que capturen el tiempo mínimo hasta que cualquiera de las réplicas de ri y Nc i cumpla con el cliente. Dado que Xri y XNc i se supone que son independientes, por la propiedad de variables aleatorias distribuidas exponencialmente tenemos, Overhead/request = 1 · P(XNc i < Xri ) + 0 · P(Xri ≤ XNc i ) (6) Overhead/request = ri C ri C + Nc i C = ri ri + Nc i (7) Sin embargo, si N  es constante entonces el aumento de las causas N α 80 0 20 40 60 80 100 0 0,05 0,15 0,20 0,25 0,35 0,40 0,45 0,5 Número de coches cebroides instantáneos número medio de reemplazos por solicitud (N=20,α=10) (N=25,α=8) (N=50,α=4) (N=100,α=2) Figura 4: La figura 4 captura el reemplazo de Esto implica que se incurre en un aumento de los gastos generales de sustitución para valores N y α más altos. Por otra parte, cuando ri = N, esto significa que cada coche tiene una réplica de elemento de datos i. Por lo tanto, no se emplean zebroids cuando se solicita este artículo, lo que da lugar a un gasto general/solicitud para este artículo como cero. A continuación, presentamos resultados de simulación que validan nuestra hipótesis de análisis para los gastos generales asociados con el despliegue de cebroides uno-instantáneos. 6.3.2 Simulación En la figura 4 se muestra la superficie de repuesto con cebroides uno-instantáneos cuando se varían (N,α) manteniendo constante el almacenamiento total del sistema. Las tendencias mostradas por la simulación concuerdan con las previstas por el análisis anterior. Sin embargo, el almacenamiento total del sistema puede ser cambiado ya sea por la densidad variable del coche (N) o el almacenamiento por coche (α). Debido a tendencias similares, aquí presentamos el caso cuando α se mantiene constante y N es variada (Figura 5). Referimos al lector a [9] para el caso cuando α es variado y N se mantiene constante. Presentamos un argumento intuitivo para el comportamiento de las curvas superiores de reemplazo de la solicitud. Cuando el almacenamiento es extremadamente escaso de modo que sólo existe una réplica por elemento de datos en la red AutoMata, el número de reemplazos realizados por los zebroids es cero ya que cualquier reemplazo causará que un elemento de datos se pierda del sistema. El despachador garantiza que no se pierda ningún elemento de datos del sistema. En el otro extremo del espectro, si el almacenamiento se vuelve tan abundante que α = T entonces todo el repositorio de elementos de datos se puede replicar en cada coche. El número de reemplazos es de nuevo cero ya que cada solicitud puede ser satisfecha localmente. Un escenario similar ocurre si N se aumenta a un valor tan grande que otro coche con el elemento de datos solicitado siempre está disponible en las proximidades del cliente. Sin embargo, hay un espectro de almacenamiento en el medio donde los reemplazos por los zebroides programados dan lugar a mejoras en el Agg (ver Figura 3). Por otra parte, observamos que para escenarios de almacenamiento escasos, las mejoras más altas con z-relay zebroids se obtienen al costo de un aumento de los gastos generales de reemplazo en comparación con el caso de cebroids uno-instantáneos. Esto se debe a que en el caso anterior, cada uno de estos z zebroids seleccionados a lo largo de la ruta de latencia más baja al cliente necesita realizar un reemplazo. Sin embargo, los gastos generales de sustitución son todavía inferiores a 1 lo que indica que en promedio se necesita menos de un reemplazo por solicitud del cliente, incluso cuando se emplean z-relay zebroids. 0 50 100 150 200 250 300 350 400 0 0,1 0,2 0,3 0,4 0,6 0,7 0,8 0,9 1 Número de coches z-reemplaza uno-instantánea Número medio de reemplazos por solicitud Figura 5: La figura 5 muestra los gastos generales de reemplazo con cebroide para los casos en que N es diferente manteniendo α = 2. 10 20 30 40 50 60 70 80 90 100 0 0,5 1 1,5 2 2,5 3 3,5 4 Porcentaje de predicción no-zebroideos (N=50) uno-instantáneos (N=50) z-relés (N=50) no-zebroideos (N=200) uno-instantáneos (N=200) z-relés (N=200) Disponibilidad agregada Latencia ( 6.4 ¿Qué sucede con la latencia de la disponibilidad con zebroids en escenarios con inexactitudes en las predicciones de la ruta del coche? Encontramos que los zebroids continúan proporcionando mejoras en la latencia de la disponibilidad incluso con menor precisión en las predicciones de la ruta del coche. Utilizamos un único parámetro p para cuantificar la exactitud de las predicciones de la ruta del coche. 6.4.1 Análisis Dado que p representa la probabilidad de que una ruta del automóvil predicha por el expedidor coincida con la actual, por lo tanto, la latencia con los zebroideos puede ser aproximada por, 6.4.2 Simulación En la figura 6 se muestra la variación en el Agg en función de esta métrica de precisión de la predicción de ruta. Observamos una reducción suave en la mejora de 81 en Agg a medida que la métrica de precisión de predicción reduce. Para los zebroids que están programados pero no se reúnen con el cliente debido al error de predicción, etiquetamos tales reemplazos hechos por los zebroids como fallados. Se ve que los reemplazos fallidos aumentan gradualmente a medida que la precisión de la predicción se reduce. 6.5 ¿En qué condiciones se maximizan las mejoras en la latencia de disponibilidad con zebroids? Sorprendentemente, encontramos que las mejoras en la latencia obtenidas con cebroides uno-instantáneos son independientes de la distribución de entrada de la popularidad de los ítems de datos. 6.5.1 Análisis La diferencia fraccionaria (marcada en la letra ) en la latencia entre los cebroides no-zebroideos y los cebroides uno-instantáneos se obtiene a partir de las ecuaciones 2, 3 y 4 de la siguiente forma: T i=1 fi·C ri − T i=1 fi·C ri+(N−ri)·(1−(1− 1 G )ri Let α = 1, haciendo el almacenamiento total en el sistema ST = N. Suponiendo que la distribución de réplica inicial es según el esquema de replicación de raíz cuadrada, tenemos, ri = fi·N T j = 1 fj. Por lo tanto, obtenemos fi = K2 ·r2 i N2, donde K = T j=1 fj. Utilizando esto, junto con la aproximación (1 − x)n 1 − n · x para x pequeña, simplificamos la ecuación anterior para obtener, • = 1 − T i=1 ri 1+ N−ri G T i=1 ri Para determinar cuándo se maximizan las ganancias con cebroides uno-instantáneos, podemos enmarcar un problema de optimización de la siguiente manera: Maximizar •, sujeto a T i Con un esquema de replicación de raíz cuadrada, las mejoras obtenidas con cebroides uniinstantáneos son independientes de la distribución de popularidad de entrada de los ítems de datos. (Ver [9] para la prueba) 6.5.2 Simulación Realizamos simulaciones con dos diferentes distribución de frecuencias de ítems de datos: Uniforme y Zipfian (con media= 0.27). En ambos casos se obtienen mejoras similares de latencia con cebroides uniinstantáneos. Este resultado tiene importantes implicaciones. En casos con popularidad sesgada hacia ciertos ítems de datos, las mejoras agregadas en la latencia en todas las solicitudes de ítems de datos siguen siendo las mismas. Incluso en escenarios en los que la frecuencia de acceso a los datos cambia dinámicamente, los zebroids seguirán proporcionando mejoras similares en la latencia. 7. CONCLUSIONES Y FUTURAS DIRECCIONES DE INVESTIGACIÓN En este estudio, examinamos las mejoras en la latencia que se pueden obtener en presencia de transportistas que entregan un elemento de datos desde un servidor a un cliente. Se cuantificó la variación de la latencia de disponibilidad en función de un rico conjunto de parámetros como la densidad del coche, el almacenamiento por coche, el tamaño de la base de datos de título y las políticas de reemplazo empleadas por los zebroids. A continuación se resumen algunas direcciones clave de investigación en el futuro que pretendemos seguir. Para reflejar mejor la realidad nos gustaría validar las observaciones obtenidas de este estudio con algunos rastros de simulación del mundo real de movimientos vehiculares (por ejemplo usando CORSIM [1]). Esto también servirá como validación para la utilidad del modelo de movilidad Markov utilizado en este estudio. Actualmente estamos analizando el desempeño de los zebroids en un conjunto de datos del mundo real que comprende una red ad-hoc de autobuses que se mueven alrededor de un pequeño barrio en Amherst [4]. Los cebroides también se pueden utilizar para la entrega de datos que transportan información sensible al retraso con una determinada caducidad. Las extensiones a zebroids que satisfacen estos requisitos de aplicación presentan una dirección de investigación futura interesante. 8. AGRADECIMIENTOS Esta investigación fue apoyada en parte por una beca Annenberg y subvenciones NSF numeradas CNS-0435505 (NeTS NOSS), CNS-0347621 (CAREER), y IIS-0307908. 9. REFERENCIAS [1] Administración Federal de Carreteras. Simulación del corredor. Versión 5.1, http://www.ops.fhwa.dot.gov/trafficanalysistools/cors im.htm. [2] D. Aldous y J. Llena. Cadenas de markov reversibles y caminatas aleatorias en gráficos. En preparación. [3] A. Bar-Noy, I. Kessler y M. Sidi. Usuarios móviles: Para actualizar o no actualizar. En IEEE Infocom, 1994. [4] J. Burgess, B. Gallagher, D. Jensen, y B. Levine. MaxProp: Enrutamiento para redes tolerantes a perturbaciones basadas en vehículos. En IEEE Infocom, abril de 2006. [5] E. Cohen y S. Shenker. Estrategias de replicación en redes de pares no estructuradas. En SIGCOMM, 2002. [6] A. Dan, D. Dias, R. Mukherjee, D. Sitaram y R. Tewari. Buffering y Caching en servidores de vídeo a gran escala. En COMPCON, 1995. [7] S. Ghandeharizadeh, S. Kapadia, y B. Krishnamachari. PAVAN: Marco normativo para la disponibilidad de contenidos en las redes ad hoc de vehículos. En VANET, Nueva York, Nueva York, Estados Unidos, 2004. ACM Press. [8] S. Ghandeharizadeh, S. Kapadia, y B. Krishnamachari. Comparación de estrategias de replicación para la disponibilidad de contenido en redes C2P2. En MDM, mayo de 2005. [9] S. Ghandeharizadeh, S. Kapadia, y B. Krishnamachari. Una evaluación de la latencia de disponibilidad en redes de vehículos ad-hoc basadas en el portador. Informe técnico, Departamento de Ciencias de la Computación, Universidad del Sur de California, CENG-2006-1, 2006. [10] S. Ghandeharizadeh y B. Krishnamachari. C2p2: Una red inter pares para servicios de información de automóviles a petición. En Globe. IEEE, 2004. [11] T. Hara. Asignación eficaz de réplicas en redes ad-hoc para mejorar la accesibilidad de datos. En IEEE Infocom, 2001. [12] H. Hayashi, T. Hara, y S. Nishio. Un método de asignación de réplica Adaptarse a los cambios de topología en redes ad-hoc. En DEXA, 2005. [13] P. Juang, H. Oki, Y. Wang, M. Martonosi, L. Peh, y D. Rubenstein. Computación energéticamente eficiente para el seguimiento de vida silvestre: compensaciones de diseño y experiencias tempranas con ZebraNet. Silgarch Comput. Archit. Noticias, 2002. [14] A. Pentland, R. Fletcher y A. Hasson. DakNet: Repensar la conectividad en las naciones en desarrollo. Computadora, 37(1):78-83, 2004. [15] F. Sailhan y V. Issarny. Caché cooperativo en redes ad-hoc. En MDM, 2003. [16] R. Shah, S. Roy, S. Jain y W. Brunette. Mulas de datos: Modelado y análisis de una arquitectura de tres niveles para redes de sensores escasas. Elsevier ad-hoc Networks Journal, 1o de septiembre de 2003. [17] T. Schiropoulos, K. Psounis y C. Raghavendra. Enrutamiento de una sola copia en redes móviles conectadas intermitentemente. En SECON, abril de 2004. [18] A. Tanenbaum. Sistemas operativos modernos, 2a edición, capítulo 4, sección 4.4. Prentice Hall, 2001. [19] A. Vahdat y D. Becker. Ruta epidémica para redes ad-hoc parcialmente conectadas. Informe técnico, Departamento de Informática, Universidad de Duke, 2000. [20] W. Zhao, M. Ammar, y E. Zegura. Un enfoque de ferriing de mensajes para la entrega de datos en redes móviles ad-hoc escasas. En MobiHoc, págs. 187 a 198, Nueva York, NY, Estados Unidos, 2004. ACM Press. [21] M. Zonoozi y P. Dassanayake. Modelado de Movilidad de Usuario y Caracterización del Patrón de Movilidad. Revista IEEE sobre áreas seleccionadas en las comunicaciones, 15:1239-1252, septiembre de 1997. 82 ",
            "error": []
        },
        "zebroid simplified instantiation": {
            "translated_key": [],
            "translated_annotated_text": "Una evaluación de la latencia de disponibilidad en redes ad hoc vehiculares basadas en portador Shahram Ghandeharizadeh Dept of Computer Science Univ of Southern California Los Angeles, CA 90089, USA shahram@usc.edu Shyam Kapadia Dept of Computer Science Univ of Southern California Los Angeles, CA 90089, USA kapadia@usc.edu Bhaskar Krishna Nuestro entorno de destino utiliza portadores de datos, llamados zebroids, donde un dispositivo móvil lleva un elemento de datos en nombre de un servidor a un cliente, minimizando así su latencia de disponibilidad. En este estudio, cuantificamos la variación de la latencia de disponibilidad con zebroids en función de un rico conjunto de parámetros como densidad de coche, almacenamiento por dispositivo, tamaño del repositorio y políticas de reemplazo empleadas por zebroids. Utilizando análisis y simulaciones extensas, obtenemos ideas novedosas sobre el diseño de sistemas basados en operadores. Se pueden obtener mejoras significativas en la latencia con zebroids a costa de un mínimo gasto general. Estas mejoras se producen incluso en escenarios con menor precisión en las predicciones de las rutas del coche. Dos hallazgos particularmente sorprendentes son: (1) una política de sustitución aleatoria ingenua empleada por los zebroids muestra un rendimiento competitivo, y (2) mejoras de la latencia obtenidas con una instanciación simplificada de zebroids se encuentran robustos a los cambios en la distribución de popularidad de los ítems de datos. Categorías y Subject Descriptores: C.2.4 [Sistemas distribuidos]: Términos Generales del Cliente/Servidor: Algoritmos, Rendimiento, Diseño, Experimentación. 1. INTRODUCCIÓN Los avances tecnológicos en las esferas del almacenamiento y las comunicaciones inalámbricas han hecho posible ahora prever la entrega a petición de datos, por ejemplo, para clips de vídeo y audio, en redes de peer-topeer vehiculares. En trabajos previos, Ghandeharizadeh et al. [10] introduce el concepto de vehículos equipados con un dispositivo Car-to-Car-Peer-toPeer, denominado AutoMata, para el entretenimiento dentro del vehículo. Las características notables de un AutoMata incluyen un dispositivo de almacenamiento masivo que ofrece cientos de gigabytes (GB) de almacenamiento, un procesador rápido y varios tipos de tarjetas de red. Incluso con las unidades de disco actuales de 500 GB, un repositorio de contenido de entretenimiento diverso puede exceder la capacidad de almacenamiento de un solo AutoMata. Tales repositorios constituyen el foco de este estudio. Para intercambiar datos, suponemos que cada AutoMata está configurado con dos tipos de tarjetas de red: 1) una tarjeta de red de baja anchura de banda con un radio-rango largo en el orden de millas que permite a un dispositivo AutoMata comunicarse con una estación celular cercana o WiMax, 2) una tarjeta de red de alta anchura de banda con un radio-rango limitado en el orden de cientos de pies. La conexión de ancho de banda alto admite tasas de datos en el orden de decenas a cientos de megabits por segundo y representa la red ad-hoc peer a peer entre los vehículos. Esto se etiqueta como el plano de datos y se emplea para intercambiar elementos de datos entre dispositivos. La conexión de baja anchura de banda sirve como plano de control, permitiendo a los dispositivos AutoMata intercambiar meta-datos con uno o más servidores centralizados. Esta conexión ofrece anchos de banda en el orden de decenas a cientos de Kilobits por segundo. Los servidores centralizados, denominados despachadores, calculan los calendarios de entrega de datos a lo largo del plano de datos utilizando los metadatos proporcionados. Estos horarios se transmiten a los vehículos participantes que utilizan el avión de control. La viabilidad técnica de tal arquitectura de dos niveles se presenta en [7], con resultados preliminares para demostrar que el ancho de banda del plano de control es suficiente para el intercambio de la información de control necesaria para realizar tal aplicación. En un escenario típico, un dispositivo AutoMata presenta a un pasajero con una lista de elementos de datos1, mostrando tanto el nombre de cada elemento de datos como su latencia de disponibilidad. Este último, denotado como ♥, se define como el momento más temprano en que el cliente encuentra una copia de su elemento de datos solicitado. Un elemento de datos está disponible inmediatamente cuando reside en el almacenamiento local del dispositivo AutoMata que atiende a la solicitud. Debido a las restricciones de almacenamiento, un AutoMata puede no almacenar todo el repositorio. En este caso, la latencia de disponibilidad es el tiempo desde que el usuario emite una solicitud hasta que el AutoMata encuentra otro coche que contiene el elemento de datos referenciado. (Los términos coche y AutoMata se utilizan indistintamente en este estudio.) La latencia de disponibilidad para un artículo es una función de la ubicación actual del cliente, su ruta de destino y viaje, el modelo de movilidad de los vehículos equipados con AutoMata, el número de réplicas construidas para los diferentes elementos de datos, y la colocación de réplicas de elementos de datos a través de los vehículos. Un método para mejorar la latencia de disponibilidad es emplear portadores de datos que transportan una réplica del elemento de datos solicitado desde un coche servidor que lo contiene a un cliente que lo solicitó. Estos portadores de datos se denominan zebroids. La selección de cebroides es facilitada por la arquitectura de dos niveles. El plano de control permite la recopilación centralizada de información en un despachador presente en una estación base.2 Algunos ejemplos de control en1 Sin pérdida de generalidad, el término elemento de datos puede ser medios tradicionales como texto o medios continuos como un clip de audio o vídeo. 2 Puede haber despachadores desplegados en un subconjunto de las estaciones de base para la tolerancia a fallos y la robustez. Los distribuidores entre estaciones de base pueden comunicarse a través de la infraestructura cableada. 75 formación son actualmente solicitudes activas, ruta de viaje de los clientes y sus destinos, y caminos de los otros coches. Para cada solicitud del cliente, el despachador puede elegir un conjunto de portadores z que colaboran para transferir un elemento de datos de un servidor a un cliente (z-relay zebroids). Aquí, z es el número de zebroids tales que 0 ≤ z < N, donde N es el número total de coches. Cuando z = 0 no hay portadores, lo que requiere un servidor para entregar el elemento de datos directamente al cliente. De lo contrario, el equipo de relé elegido de z zebroids se entregará los datos de forma transitoria unos a otros para llegar al cliente, reduciendo así la latencia de la disponibilidad (para más detalles, véase la sección 3.1). Para aumentar la robustez, el despachador puede emplear múltiples equipos de relé de portadoras z para cada solicitud. Esto puede ser útil en escenarios en los que el despachador tiene menor precisión de predicción en la información sobre las rutas de los coches. Por último, las restricciones de almacenamiento pueden requerir que un zebroid desaloje elementos de datos existentes de su almacenamiento local para acomodar el elemento solicitado por el cliente. En este estudio, se cuantifican los siguientes factores principales que afectan a la latencia de la disponibilidad en presencia de zebroideos: (i) tamaño del repositorio de datos, (ii) densidad del coche, (iii) capacidad de almacenamiento por coche, (iv) duración del viaje del cliente, (v) esquema de reemplazo empleado por los zebroideos, y (vi) exactitud de las predicciones de la ruta del coche. Para un subconjunto significativo de estos factores, abordamos algunas preguntas clave relativas al uso de zebroids tanto a través del análisis como de simulaciones extensas. Nuestras principales conclusiones son las siguientes. Una política de sustitución aleatoria ingenua empleada por los zebroids muestra un rendimiento competitivo en términos de latencia de disponibilidad. Con esta política, se pueden obtener mejoras sustanciales en la latencia con zebroids con un mínimo de gastos generales de reemplazo. En escenarios más prácticos, donde el despachador tiene información inexacta sobre las rutas del coche, los zebroids continúan proporcionando mejoras de la latencia. Un resultado sorprendente es que los cambios en la popularidad de los ítems de datos no impactan las ganancias de latencia obtenidas con una simple instanciación de z-relay zebroids llamados cebroids uno-instantáneos (ver Sección 3.1). Este estudio sugiere una serie de direcciones interesantes a seguir para obtener una mejor comprensión del diseño de sistemas basados en el portador que mejoran la latencia de disponibilidad. Trabajo relacionado: La replicación en redes móviles ad-hoc ha sido un tema ampliamente estudiado [11, 12, 15]. Sin embargo, ninguno de estos estudios emplea zebroids como portadores de datos para reducir la latencia de las solicitudes de los clientes. Varios estudios novedosos e importantes como ZebraNet [13], DakNet [14], Data Mules [16], Message Ferries [20] y Seek and Focus [17] han analizado factores que afectan a redes conectadas intermitentemente consistentes en portadores de datos similares en espíritu a los zebroideos. Los factores considerados por cada estudio son dictados por su supuesto entorno y aplicación diana. Una característica novedosa de nuestro estudio es el impacto en la latencia de disponibilidad para un repositorio de datos dado de elementos. En [9] se puede obtener una descripción detallada de las obras relacionadas. El resto de este documento está organizado de la siguiente manera. En la sección 2 se ofrece una visión general de la terminología junto con los factores que influyen en la latencia de la disponibilidad en presencia de zebroides. En la sección 3 se describe cómo se pueden emplear los cebroides. En la sección 4 se proporciona información detallada sobre la metodología de análisis empleada para captar el desempeño con los zebroids. En la sección 5 se describen los detalles del entorno de simulación utilizado para la evaluación. La sección 6 recoge las preguntas clave examinadas en este estudio y las responde a través de análisis y simulaciones. Por último, en la sección 7 se presentan breves conclusiones y futuras orientaciones de la investigación. 2. SINOPSIS Y TERMINOLOGÍA La Tabla 1 resume la notación de los parámetros utilizados en el artículo. A continuación introducimos algunas terminologías utilizadas en el artículo. Asumir una red de coches N AutoMata equipados, cada uno con capacidad de almacenamiento de α bytes. La capacidad total de almacenamiento del sistema es ST = N. Hay elementos de datos T en la base de datos, cada uno con parámetros de base de datos T Número de elementos de datos. Si Tamaño del ítem de datos i fi Frecuencia de acceso al ítem de datos i. Parámetros de replicación Ri Frecuencia normalizada de acceso al ítem de datos i ri Número de réplicas para ítem de datos i n Caracteriza un esquema de replicación particular. Latencia media de la disponibilidad del elemento de datos i Łagg Latencia agregada de la disponibilidad, N Número de dispositivos AutoMata en el sistema. α Capacidad de almacenamiento por AutoMata. γ Duración del viaje del cliente AutoMata. ST Capacidad total de almacenamiento del sistema AutoMata, ST = N · α. Cuadro 1: Términos y sus definiciones tamaño Si. La frecuencia de acceso al ítem de datos i se denota como fi, con T j=1 fj = 1. Deje que la duración del viaje del cliente AutoMata en consideración sea γ. Ahora definimos la frecuencia normalizada de acceso al ítem de datos i, denotado por Ri, como: Ri = (fi)n T j=1(fj)n ; 0 ≤ n ≤ فارسى (1) El exponente n caracteriza una técnica de replicación particular. Un esquema de replicación de raíz cuadrada se realiza cuando n = 0.5 [5]. Esto sirve como la línea base para la comparación con el caso cuando se despliegan zebroids. Ri se normaliza a un valor entre 0 y 1. El número de réplicas para el dato i, denotado como ri, es: ri = min (N, max (1, Ri·N Si )). Esto capta el caso cuando al menos una copia de cada elemento de datos debe estar presente en la red ad-hoc en todo momento. En los casos en que un elemento de datos se puede perder de la red ad-hoc, esta ecuación se convierte en ri = min (N, max (0, Ri·N Si )). En este caso, es posible que sea necesario satisfacer una solicitud para el elemento de datos perdido mediante la obtención del elemento desde un servidor remoto. La latencia de disponibilidad para un elemento de datos i, denotado como i, se define como la primera vez en la que un cliente AutoMata encontrará la primera réplica del elemento accesible a él. Si esta condición no se cumple, entonces se establece a i. Esto indica que el elemento de datos I no estaba disponible para el cliente durante su viaje. Tenga en cuenta que como hay al menos una réplica en el sistema para cada elemento de datos i, al establecer γ a un gran valor nos aseguramos de que los clientes soliciten cualquier elemento de datos i será satisfecho. Sin embargo, en la mayoría de las circunstancias prácticas γ puede no ser tan grande como para encontrar cada elemento de datos. Estamos interesados en la latencia de disponibilidad observada en todos los datos. Por lo tanto, aumentamos la latencia media de disponibilidad para cada ítem de datos i con su fi para obtener la siguiente latencia ponderada de disponibilidad (?agg) métrica:?agg = T i=1?i · fi A continuación, presentamos nuestro enfoque de solución describiendo cómo se seleccionan los zebroids. 3. ENFOQUE DE SOLUCIÓN 3.1 Zebroids Cuando un cliente hace referencia a un elemento de datos que falta en su almacenamiento local, el despachador identifica todos los coches con una copia del elemento de datos como servidores. A continuación, el despachador obtiene las rutas futuras de todos los coches para una duración de tiempo finito equivalente al tiempo máximo que el cliente está dispuesto a esperar a que su solicitud sea atendido. Utilizando esta información, el despachador programa la ruta de entrega más rápida desde cualquiera de los servidores al cliente utilizando cualquier otro coche como transportistas intermedios. Por lo tanto, determina el conjunto óptimo de decisiones de reenvío 76 que permitirá que el elemento de datos se entreguen al cliente en el mínimo de tiempo. Tenga en cuenta que la latencia a lo largo de la ruta de entrega más rápida que emplea un equipo de relé de z zebroids es similar a la obtenida con el encaminamiento epidémico [19] bajo los supuestos de almacenamiento infinito y ninguna interferencia. Una simple instanciación de z-relay zebroids se produce cuando z = 1 y la solicitud de los clientes desencadena una transferencia de una copia del elemento de datos solicitado de un servidor a un zebroid en su vecindad. Tal zebroideo se denomina cebroide uniinstantáneo. En algunos casos, el expedidor podría tener información inexacta sobre las rutas de los coches. Por lo tanto, un zebroid programado sobre la base de esta información inexacta puede no reunirse con su cliente objetivo. Para minimizar la probabilidad de tales escenarios, el despachador puede programar múltiples zebroids. Esto puede acarrear gastos generales adicionales debido a la utilización redundante de recursos para obtener las mismas mejoras de latencia. El tiempo necesario para transferir un elemento de datos de un servidor a un zebroid depende de su tamaño y del ancho de banda del enlace disponible. Con elementos de datos pequeños, es razonable suponer que este tiempo de transferencia es pequeño, especialmente en presencia del plano de datos de alto ancho de banda. Los elementos de datos grandes se pueden dividir en trozos más pequeños que permiten al despachador programar uno o más zebroids para entregar cada trozo a un cliente de una manera oportuna. Esta sigue siendo una dirección de investigación futura. Inicialmente, el número de réplicas para cada ítem de datos puede ser calculado usando la Ecuación 1. Este esquema calcula el número de réplicas de datos en función de su popularidad. Es estática porque el número de réplicas en el sistema no cambia y no se realizan reemplazos. Por lo tanto, esto se conoce como el ambiente de los nozebroids. Cuantificamos el desempeño de las diversas políticas de reemplazo con referencia a esta línea base que no emplea zebroids. Uno puede asumir una fase de arranque en frío, donde inicialmente sólo una o pocas copias de cada elemento de datos existen en el sistema. Muchas ranuras de almacenamiento de los coches pueden estar desocupados. Cuando los coches se encuentran entre sí, construyen nuevas réplicas de algunos elementos de datos seleccionados para ocupar los huecos vacíos. El procedimiento de selección puede consistir en elegir los datos de manera uniforme al azar. Nuevas réplicas se crean siempre y cuando un coche tiene un cierto umbral de su almacenamiento desocupado. Eventualmente, la mayoría de la capacidad de almacenamiento de un coche se agotará. 3.2 Políticas de reemplazo basadas en el operador Las políticas de reemplazo consideradas en este documento son reactivas ya que una sustitución se produce sólo en respuesta a una solicitud emitida para un determinado elemento de datos. Cuando el almacenamiento local de un zebroid está completamente ocupado, necesita reemplazar uno de sus elementos existentes para llevar el elemento de datos solicitado por el cliente. Para ello, el zebroid debe seleccionar a un candidato apropiado para el desalojo. Este proceso de decisión es análogo al encontrado en la paginación del sistema operativo donde el objetivo es maximizar la relación de acceso a la caché para evitar el retraso del acceso al disco [18]. Las políticas de reemplazo basadas en transportistas empleadas en nuestro estudio son las menos usadas recientemente (LRU), las menos usadas con frecuencia (LFU) y las aleatorias (donde un candidato de desalojo es elegido uniformemente al azar). Hemos considerado variantes locales y globales de las políticas LRU/LFU que determinan si el conocimiento local o global de los contenidos de los coches conocidos en el expedidor se utiliza para la decisión de desalojo en un zebroid (ver [9] para más detalles). Las pólizas de sustitución entrañan los siguientes gastos generales. En primer lugar, la complejidad asociada a la aplicación de una política. En segundo lugar, el ancho de banda utilizado para transferir una copia de un elemento de datos de un servidor al zebroid. En tercer lugar, el número medio de reemplazos realizados por los zebroides. Tenga en cuenta que en el caso de no cebroides no se incurre en gastos generales. Las métricas consideradas en este estudio son la latencia de la disponibilidad agregada, Tenga en cuenta que los despachadores con la ayuda del plano de control pueden asegurarse de que no se pierda ningún elemento de datos del sistema. En otras palabras, al menos una réplica de cada elemento de datos se mantiene en la red ad-hoc en todo momento. En tales casos, aunque un coche puede encontrarse con un cliente solicitante antes que otros servidores, si su almacenamiento local contiene elementos de datos con sólo una copia en el sistema, entonces tal coche no se elige como un zebroid. 4. METODOLOGÍA DE ANÁLISIS Aquí presentamos la metodología de evaluación analítica y algunas aproximaciones como ecuaciones de forma cerrada que capturan las mejoras en la latencia de disponibilidad que se pueden obtener tanto con cebros oneinstantáneos como con z-relay. Primero, presentamos algunos preliminares de nuestra metodología de análisis. • Que N sea el número de coches en la red que realizan una caminata aleatoria en 2D en un toro de G× G. Un coche adicional sirve como un cliente que entrega un total de N + 1 coches. Este modelo de movilidad se ha utilizado ampliamente en la literatura [17, 16] principalmente porque es susceptible de análisis y proporciona una base de referencia para comparar el rendimiento de otros modelos de movilidad. Además, esta clase de modelos de movilidad markoviana se ha utilizado para modelar los movimientos de los vehículos [3, 21]. • Asumimos que todos los coches comienzan desde la distribución estacionaria y realizan caminatas aleatorias independientes. Aunque para escenarios de densidad escasa, la suposición de independencia se mantiene, ya no es válido cuando N se aproxima a G. • Deje que el tamaño del repositorio de ítems de datos de interés sea T. Además, el ítem de datos i tiene réplicas ri. Esto implica que los coches ri, identificados como servidores, tienen una copia de este elemento de datos cuando el cliente solicita el elemento i. Todos los resultados de análisis presentados en esta sección se obtienen asumiendo que el cliente está dispuesto a esperar el tiempo necesario para que su solicitud sea satisfecha (duración del viaje sin límite γ = ­). Con el modelo de movilidad al azar en un torso 2D, hay una garantía de que mientras haya al menos una réplica del elemento de datos solicitado en la red, el cliente se encontrará con esta réplica [2]. Las extensiones al análisis que también consideran las duraciones del viaje finito se pueden obtener en [9]. Considere un escenario en el que no se emplean zebroids. En este caso, la latencia de disponibilidad esperada para el ítem de datos es el tiempo de reunión esperado de la caminata aleatoria realizada por el cliente con cualquiera de las caminatas aleatorias realizadas por los servidores. Aldous et al. [2] muestran que el tiempo de reunión de dos caminatas aleatorias en tal entorno puede modelarse como una distribución exponencial con la media C = c · G · log G, donde la constante c 0,17 para G ≥ 25. El tiempo de reunión, o equivalente a la latencia de la disponibilidad de i, para el cliente que solicita datos i es el momento hasta que se encuentre con cualquiera de estas réplicas ri por primera vez. Se trata también de una distribución exponencial con el siguiente valor esperado (obsérvese que esta formulación es válida sólo para casos escasos cuando G >> ri): فارسىi = cGlogG ri La latencia de disponibilidad agregada sin emplear zebroids es entonces esta expresión promediada sobre todos los ítems de datos, ponderada por su frecuencia de acceso: فارسىagg(no − zeb) = T i=1 fi Por otra parte, esta réplica se genera en el paso de tiempo cuando el cliente emite la solicitud. Que Nc i sea el número total esperado de nodos que están en la misma celda que cualquiera de los servidores ri. Luego, tenemos Nc i = (N − ri) · (1 − (1 − 1 G )ri ) (3) En el modelo analítico, suponemos que Nc i nuevas réplicas se crean, de modo que el número total de réplicas se aumenta a ri + Nc i. La latencia de disponibilidad se reduce ya que es más probable que el cliente cumpla con una réplica anterior. La latencia agregada de disponibilidad esperada en el caso de los cebroides uno-instantáneos es dada por, agg(zeb) = T i=1 fi · c · G · log G ri + Nc i = T i=1 fi · C ri + Nc i (4) Tenga en cuenta que al obtener esta expresión, para facilitar el análisis, hemos asumido que las nuevas réplicas comienzan Así trata a todos los portadores de Nc i de forma independiente, al igual que los servidores originales ri. Como mostraremos a continuación en comparación con las simulaciones, esta aproximación proporciona un límite superior a las mejoras que se pueden obtener porque da lugar a una menor latencia esperada en el cliente. Cabe señalar que el procedimiento mencionado anteriormente producirá una latencia similar a la empleada por un expedidor que emplee cebroides oneinstantáneos (véase la sección 3.1). Dado que el despachador es consciente de todos los movimientos futuros del coche que sólo transferiría el elemento de datos solicitado en un único zebroid, si determina que el zebroid se reunirá con el cliente antes que cualquier otro servidor. Este zebroid seleccionado está incluido en las nuevas réplicas de Nc i. 4.2 z-relay zebroids Para calcular la latencia de disponibilidad esperada con z-relay zebroids, utilizamos un análogo de problema de coloración similar a un enfoque utilizado por Spyropoulos et al. [17]. En [9] se dan detalles del procedimiento para obtener una expresión de forma cerrada. La latencia de disponibilidad agregada (agg) con z-relay zebroids es dada por, agg(zeb) = T i=1 [fi · C N + 1 · 1 N + 1 − ri · (N · log N ri − log (N + 1 − ri))] (5) 5. METODOLOGÍA DE SIMULACIÓN El entorno de simulación considerado en este estudio se compone de vehículos como automóviles que llevan una fracción del repositorio de datos. Un parámetro de precisión de predicción proporciona inherentemente una cierta garantía probabilística sobre la confianza de las predicciones de ruta del automóvil conocidas en el despachador. Un valor del 100% implica que las rutas exactas de todos los coches se conocen en todo momento. Un valor del 70% para este parámetro indica que las rutas previstas para los coches coincidirán con las reales con probabilidad 0.7. Tenga en cuenta que esta probabilidad se extiende a través de las rutas del coche durante toda la duración del viaje. Ahora proporcionamos los preliminares del estudio de simulación y luego describimos los parámetros de configuración utilizados en nuestros experimentos. • Similar a la metodología de análisis, el mapa utilizado es un toro 2D. Un modelo de movilidad Markov que representa una caminata aleatoria 2D imparcial en la superficie del toro describe el movimiento de los coches a través de este toro. • Cada cuadrícula/célula es un estado único de esta cadena Markov. En cada ranura de tiempo, cada coche hace una transición de una celda a cualquiera de sus 8 celdas vecinas. La transición es una función de la ubicación actual del coche y una matriz de transición de probabilidad Q = [qij] donde qij es la probabilidad de transición del estado i al estado j. Solo los coches equipados con AutoMata dentro de la misma celda pueden comunicarse entre sí. • Los parámetros γ,  han sido discretizados y expresados en términos del número de franjas horarias. • Un dispositivo AutoMata no mantiene más de una réplica de un elemento de datos. Esto se debe a que las réplicas adicionales ocupan el almacenamiento sin proporcionar beneficios. • Los cebroides de relé z o uno instantáneos pueden ser empleados por solicitud del cliente para mejorar la latencia. • A menos que se mencione lo contrario, se supone que el parámetro de precisión de la predicción es del 100%. Esto se debe a que este estudio pretende cuantificar el efecto de un gran número de parámetros individualmente sobre la latencia de la disponibilidad. Aquí, establecemos el tamaño de cada elemento de datos, Si, para ser 1. α representa el número de ranuras de almacenamiento por AutoMata. Cada ranura de almacenamiento almacena un elemento de datos. γ representa la duración del viaje de los clientes en términos del número de franjas horarias. Por lo tanto, los posibles valores de latencia de disponibilidad están entre 0 y γ.  se define como el número de franjas horarias después de lo cual un dispositivo cliente AutoMata encontrará una réplica del elemento de datos por primera vez. Si una réplica para el elemento de datos solicitado fue encontrado por el cliente en la primera celda, a continuación, se establece  = 0. Si se trata de un elemento de datos solicitado, el cliente no encontró ninguna copia del elemento de datos solicitado durante todo su viaje. En todas nuestras simulaciones, para la ilustración consideramos un 5 × 5 2D-torus con γ fijado a 10. Nuestros experimentos indican que las tendencias en la escala de resultados a mapas de mayor tamaño. Simulamos una distribución sesgada de acceso a los datos T que obedece a la ley Ziffs con una media de 0.27. Esta distribución corresponde a la venta de entradas de cine en los Estados Unidos [6]. Empleamos un esquema de replicación que asigna réplicas para un elemento de datos en función de la raíz cuadrada de la frecuencia de acceso de ese elemento. Se muestra que el esquema de replicación de raíz cuadrada tiene un rendimiento de latencia competitivo en un gran espacio de parámetros [8]. Las réplicas de elementos de datos se distribuyen uniformemente entre los dispositivos AutoMata. Esto sirve como el caso de la línea base sin cebros. El esquema de raíz cuadrada también proporciona la distribución de réplica inicial cuando se emplean zebroids. Tenga en cuenta que los reemplazos realizados por los zebroids causarán cambios en la distribución de réplica de ítems de datos. Las solicitudes generadas según la distribución Zipf se emiten una a la vez. El coche cliente que emite la solicitud se elige de una manera redonda-robina. Después de un período máximo de γ, se registra la latencia con que se encontró esta solicitud. En todos los resultados de simulación, cada punto es un promedio de 200.000 solicitudes. Además, los intervalos de confianza del 95% determinados para los resultados son bastante ajustados para las métricas de latencia y los gastos generales de reemplazo. Por lo tanto, sólo los presentamos para la métrica que captura la mejora porcentual de la latencia con respecto al caso de no-zebroides. 6. RESULTADOS En esta sección, describimos nuestros resultados de evaluación donde se abordan las siguientes preguntas clave. Con una amplia selección de esquemas de reemplazo disponibles para un zebroid, ¿cuál es su efecto en la latencia de disponibilidad? Una pregunta más central es: Do zebroids provide 78 0 20 40 60 80 100 1.5 2 2.5 3 3.5 Número de coches Latencia de disponibilidad agregada (­agg ) lru_global lfu_global lru_local lfu_local random Figura 1: La figura 1 muestra la latencia de disponibilidad al emplear cebroids uno-instantáneos en función de los valores (N,α), cuando el ¿Cuáles son los gastos generales asociados en el empleo de estos zebroides? ¿Qué sucede con estas mejoras en escenarios donde un despachador puede tener información imperfecta sobre las rutas del automóvil? ¿Cuáles son las compensaciones inherentes entre la densidad del automóvil y el almacenamiento por automóvil en lo que respecta a su efecto combinado e individual sobre la latencia de la disponibilidad en presencia de zebroids? Presentamos análisis simples y simulaciones detalladas para proporcionar respuestas a estas preguntas, así como para obtener información sobre el diseño de sistemas basados en operadores. 6.1 ¿Cómo funciona un esquema de sustitución empleado por un latencia de disponibilidad de impacto zebroideo? Para ilustrarlo, presentamos experimentos de escala en los que se emplean cebroides oneinstantáneos (ver Figura 1). Por escala, queremos decir que α y N se cambian proporcionalmente para mantener el almacenamiento total del sistema, ST, constante. Aquí, T = 50 y ST = 200. Elegimos los siguientes valores de (N,α) = {(20,10), (25,8), (50,4), (100,2)}. La cifra indica que un plan de sustitución al azar muestra un rendimiento competitivo. Esto se debe a varias razones. Recuerde que la distribución de réplica inicial se establece según el esquema de replicación de raíz cuadrada. El esquema de reemplazo aleatorio no altera esta distribución ya que hace que los reemplazos ciegos a la popularidad de un elemento de datos. Sin embargo, los reemplazos causan una reorganización dinámica de los datos a fin de atender mejor a la solicitud activa actual. Además, el patrón de movilidad de los coches es aleatorio, por lo que las ubicaciones desde las que los clientes emiten las solicitudes también son aleatorias y no se conocen a priori en el despachador. Estas conclusiones son importantes porque una política de sustitución aleatoria puede aplicarse de manera descentralizada. Los esquemas rru-global y lfu-global proporcionan un rendimiento de latencia que es peor que aleatorio. Esto se debe a que estas políticas desarrollan rápidamente una preferencia por los elementos de datos más populares, creando así un mayor número de réplicas para ellos. Durante el desalojo, los datos más populares casi nunca se seleccionan como candidatos de reemplazo. En consecuencia, hay menos réplicas para los artículos menos populares. Por lo tanto, la distribución inicial del elemento de datos replica cambios de raíz cuadrada a que se asemeja a replicación lineal. El mayor número de réplicas de las partidas de datos populares proporciona beneficios adicionales marginales, mientras que el menor número de réplicas de las demás partidas de datos perjudica el rendimiento de latencia de estas políticas mundiales. Los esquemas lfu-local y lru-local tienen un rendimiento similar al aleatorio ya que no tienen suficiente historial de solicitudes de datos locales. Especulamos que el desempeño de estas políticas locales se acercará al de sus variantes globales para una historia suficientemente grande de solicitudes de ítems de datos. Debido al rendimiento competitivo demostrado por una política aleatoria, para el resto del documento, presentamos el rendimiento de los zebroids que emplean una política de reemplazo aleatorio. 6.2 ¿Proporcionan los zebroids mejoras significativas en la latencia de disponibilidad? Encontramos que en muchos escenarios que emplean zebroids proporciona mejoras sustanciales en la latencia de la disponibilidad. 6.2.1 Análisis Primero consideramos el caso de los cebroides uno-instantáneos. La Figura 2.a muestra la variación en Łagg en función de N para T = 10 y α = 1 con 10 × 10 toros usando la Ecuación 4. Los ejes x e y se dibujan a una escala de registro. En la figura 2.b se muestra la mejoría en % en el Agg obtenido con cebroides uniinstantáneos. En este caso, sólo el eje x se dibuja a una escala de registro. Para ilustrar, suponemos que los datos T son solicitados uniformemente. Inicialmente, cuando la red es escasa la aproximación analítica para mejoras en la latencia con zebroids, obtenida de las ecuaciones 2 y 4, coincide estrechamente con los resultados de la simulación. Sin embargo, a medida que N aumenta, la suposición de escasez para la que el análisis es válido, a saber, N+G, ya no es cierta. Por lo tanto, las dos curvas divergen rápidamente. El punto en el que las dos curvas se alejan unas de otras corresponde a un valor de Además, como se mencionó anteriormente, el análisis proporciona un límite superior a las mejoras de la latencia, ya que trata de las réplicas recién creadas dadas por Nc i de forma independiente. Sin embargo, estas réplicas de Nc i comienzan desde la misma celda que una de las réplicas de servidor ri. Finalmente, el análisis captura un escenario oneshot donde dada una distribución inicial de réplica de datos, se calcula la latencia de disponibilidad. Las nuevas réplicas creadas no afectan las solicitudes futuras del cliente. Debido a las limitaciones de espacio, aquí, se resumen las observaciones en el caso de z-relay zebroids se emplean. El lector interesado puede obtener más detalles en [9]. Observaciones similares, como el caso cebroideo uniinstantaneo, se aplican ya que las curvas de simulación y análisis comienzan de nuevo a divergir cuando los supuestos de análisis ya no son válidos. Sin embargo, la observación clave aquí es que la mejora de la latencia con z-relay zebroids es significativamente mejor que el caso de cebroids uno-instantáneos, especialmente para escenarios de almacenamiento más bajos. Esto se debe a que en escenarios escasos, los traspasos transitivos entre los zebroides crean un mayor número de réplicas para el ítem de datos solicitado, lo que produce una menor latencia de disponibilidad. Por otra parte, también se observa que la curva de validación de simulación para las mejoras en Łagg con z-relay zebroids se aproxima a la del caso cebroideo uniinstantánea para un almacenamiento más alto (valores de N más altos). Esto se debe a que los cebroides uno-instantáneos son un caso especial de z-relay zebroides. 6.2.2 Simulación Realizamos simulaciones para examinar todo el espectro de almacenamiento obtenido cambiando la densidad del vehículo N o el almacenamiento por coche α para capturar también escenarios en los que no se mantienen las hipótesis de escasez para las que el análisis es válido. Separamos el efecto de N y α capturando la variación de N manteniendo constante α (caso 1) y viceversa (caso 2) tanto con z-relay y cebroides uno-instantáneos. Aquí, establecemos el tamaño del repositorio como T = 25. En el gráfico 3 figura el caso 1 mencionado anteriormente. Se observan tendencias similares con el caso 2, en [9] se dispone de una descripción completa de esos resultados. Con la Figura 3.b, manteniendo constante α, la densidad del coche aumenta inicialmente tiene mayores beneficios de latencia porque el aumento de N introduce más zebroids en el sistema. A medida que N se incrementa aún más, • reduce porque el almacenamiento total en el sistema sube. En consecuencia, el número de réplicas por elemento de datos sube aumentando así el número de servidores 79. Por lo tanto, la política de reemplazo no puede encontrar un zebroid tan a menudo para transportar el elemento de datos solicitado al cliente antes que cualquiera de los servidores. Por otro lado, el aumento del número de servidores beneficia al caso de no-zebroids al reducir a Agg. El efecto neto da lugar a una reducción de los valores más grandes de N. 10 1 10 2 10 3 10 −1 10 0 10 1 10 2 Número de automóviles no-zebroidsanal no-zebroids sim one-instantaneoussim Agregación Disponibilidad Latencia (­agg ) 2.a) Agg 10 1 10 2 10 3 0 10 20 40 50 60 70 80 90 100 Número de automóviles % Mejora Las tendencias mencionadas anteriormente son similares a las obtenidas del análisis. Sin embargo, algo contra-intuitivamente con almacenamiento relativamente más alto del sistema, z-relay zebroids proporcionan mejoras ligeramente más bajas en la latencia en comparación con uno-instantaneous zebroids. Especulamos que esto se debe a las diferentes distribuciones de réplicas de ítems de datos impuestas por ellos. Tenga en cuenta que los reemplazos realizados por los zebroids causan fluctuaciones en estas distribuciones de réplica que pueden afectar futuras solicitudes de clientes. Actualmente estamos explorando opciones adecuadas de parámetros que pueden capturar estas distribuciones de réplicas cambiantes. 6.3 ¿Cuáles son los gastos generales derivados de la mejora de la latencia de los zebroideos? Encontramos que las mejoras en la latencia con zebroids se obtienen con un mínimo de reemplazo de los gastos generales (< 1 por solicitud del cliente). 6.3.1 Análisis Con cebroides uniinstantáneos, para cada solicitud de cliente se emplea un máximo de un cebroide para mejorar la latencia. Por lo tanto, los gastos generales de sustitución por solicitud del cliente pueden ascender a un máximo de uno. Recordemos que para calcular la latencia con una latencia instantánea 0 50 100 150 200 250 350 400 0 1 2 3 4 5 6 Número de coches Latencia de disponibilidad agregada (?agg ) no-zebroids one-instantaneous z-relays 3.a 0 50 100 150 200 250 300 350 400 0 10 20 30 40 50 60 Número de coches % Mejora en?agg wrt no-zebro Ahora un reemplazo sólo se incumple si una de estas réplicas de Nc i de nueva creación se reúne con el cliente antes que cualquiera de los servidores de ri. Que Xri y XNc i respectivamente sean variables aleatorias que capturen el tiempo mínimo hasta que cualquiera de las réplicas de ri y Nc i cumpla con el cliente. Dado que Xri y XNc i se supone que son independientes, por la propiedad de variables aleatorias distribuidas exponencialmente tenemos, Overhead/request = 1 · P(XNc i < Xri ) + 0 · P(Xri ≤ XNc i ) (6) Overhead/request = ri C ri C + Nc i C = ri ri + Nc i (7) Sin embargo, si N  es constante entonces el aumento de las causas N α 80 0 20 40 60 80 100 0 0,05 0,15 0,20 0,25 0,35 0,40 0,45 0,5 Número de coches cebroides instantáneos número medio de reemplazos por solicitud (N=20,α=10) (N=25,α=8) (N=50,α=4) (N=100,α=2) Figura 4: La figura 4 captura el reemplazo de Esto implica que se incurre en un aumento de los gastos generales de sustitución para valores N y α más altos. Por otra parte, cuando ri = N, esto significa que cada coche tiene una réplica de elemento de datos i. Por lo tanto, no se emplean zebroids cuando se solicita este artículo, lo que da lugar a un gasto general/solicitud para este artículo como cero. A continuación, presentamos resultados de simulación que validan nuestra hipótesis de análisis para los gastos generales asociados con el despliegue de cebroides uno-instantáneos. 6.3.2 Simulación En la figura 4 se muestra la superficie de repuesto con cebroides uno-instantáneos cuando se varían (N,α) manteniendo constante el almacenamiento total del sistema. Las tendencias mostradas por la simulación concuerdan con las previstas por el análisis anterior. Sin embargo, el almacenamiento total del sistema puede ser cambiado ya sea por la densidad variable del coche (N) o el almacenamiento por coche (α). Debido a tendencias similares, aquí presentamos el caso cuando α se mantiene constante y N es variada (Figura 5). Referimos al lector a [9] para el caso cuando α es variado y N se mantiene constante. Presentamos un argumento intuitivo para el comportamiento de las curvas superiores de reemplazo de la solicitud. Cuando el almacenamiento es extremadamente escaso de modo que sólo existe una réplica por elemento de datos en la red AutoMata, el número de reemplazos realizados por los zebroids es cero ya que cualquier reemplazo causará que un elemento de datos se pierda del sistema. El despachador garantiza que no se pierda ningún elemento de datos del sistema. En el otro extremo del espectro, si el almacenamiento se vuelve tan abundante que α = T entonces todo el repositorio de elementos de datos se puede replicar en cada coche. El número de reemplazos es de nuevo cero ya que cada solicitud puede ser satisfecha localmente. Un escenario similar ocurre si N se aumenta a un valor tan grande que otro coche con el elemento de datos solicitado siempre está disponible en las proximidades del cliente. Sin embargo, hay un espectro de almacenamiento en el medio donde los reemplazos por los zebroides programados dan lugar a mejoras en el Agg (ver Figura 3). Por otra parte, observamos que para escenarios de almacenamiento escasos, las mejoras más altas con z-relay zebroids se obtienen al costo de un aumento de los gastos generales de reemplazo en comparación con el caso de cebroids uno-instantáneos. Esto se debe a que en el caso anterior, cada uno de estos z zebroids seleccionados a lo largo de la ruta de latencia más baja al cliente necesita realizar un reemplazo. Sin embargo, los gastos generales de sustitución son todavía inferiores a 1 lo que indica que en promedio se necesita menos de un reemplazo por solicitud del cliente, incluso cuando se emplean z-relay zebroids. 0 50 100 150 200 250 300 350 400 0 0,1 0,2 0,3 0,4 0,6 0,7 0,8 0,9 1 Número de coches z-reemplaza uno-instantánea Número medio de reemplazos por solicitud Figura 5: La figura 5 muestra los gastos generales de reemplazo con cebroide para los casos en que N es diferente manteniendo α = 2. 10 20 30 40 50 60 70 80 90 100 0 0,5 1 1,5 2 2,5 3 3,5 4 Porcentaje de predicción no-zebroideos (N=50) uno-instantáneos (N=50) z-relés (N=50) no-zebroideos (N=200) uno-instantáneos (N=200) z-relés (N=200) Disponibilidad agregada Latencia ( 6.4 ¿Qué sucede con la latencia de la disponibilidad con zebroids en escenarios con inexactitudes en las predicciones de la ruta del coche? Encontramos que los zebroids continúan proporcionando mejoras en la latencia de la disponibilidad incluso con menor precisión en las predicciones de la ruta del coche. Utilizamos un único parámetro p para cuantificar la exactitud de las predicciones de la ruta del coche. 6.4.1 Análisis Dado que p representa la probabilidad de que una ruta del automóvil predicha por el expedidor coincida con la actual, por lo tanto, la latencia con los zebroideos puede ser aproximada por, 6.4.2 Simulación En la figura 6 se muestra la variación en el Agg en función de esta métrica de precisión de la predicción de ruta. Observamos una reducción suave en la mejora de 81 en Agg a medida que la métrica de precisión de predicción reduce. Para los zebroids que están programados pero no se reúnen con el cliente debido al error de predicción, etiquetamos tales reemplazos hechos por los zebroids como fallados. Se ve que los reemplazos fallidos aumentan gradualmente a medida que la precisión de la predicción se reduce. 6.5 ¿En qué condiciones se maximizan las mejoras en la latencia de disponibilidad con zebroids? Sorprendentemente, encontramos que las mejoras en la latencia obtenidas con cebroides uno-instantáneos son independientes de la distribución de entrada de la popularidad de los ítems de datos. 6.5.1 Análisis La diferencia fraccionaria (marcada en la letra ) en la latencia entre los cebroides no-zebroideos y los cebroides uno-instantáneos se obtiene a partir de las ecuaciones 2, 3 y 4 de la siguiente forma: T i=1 fi·C ri − T i=1 fi·C ri+(N−ri)·(1−(1− 1 G )ri Let α = 1, haciendo el almacenamiento total en el sistema ST = N. Suponiendo que la distribución de réplica inicial es según el esquema de replicación de raíz cuadrada, tenemos, ri = fi·N T j = 1 fj. Por lo tanto, obtenemos fi = K2 ·r2 i N2, donde K = T j=1 fj. Utilizando esto, junto con la aproximación (1 − x)n 1 − n · x para x pequeña, simplificamos la ecuación anterior para obtener, • = 1 − T i=1 ri 1+ N−ri G T i=1 ri Para determinar cuándo se maximizan las ganancias con cebroides uno-instantáneos, podemos enmarcar un problema de optimización de la siguiente manera: Maximizar •, sujeto a T i Con un esquema de replicación de raíz cuadrada, las mejoras obtenidas con cebroides uniinstantáneos son independientes de la distribución de popularidad de entrada de los ítems de datos. (Ver [9] para la prueba) 6.5.2 Simulación Realizamos simulaciones con dos diferentes distribución de frecuencias de ítems de datos: Uniforme y Zipfian (con media= 0.27). En ambos casos se obtienen mejoras similares de latencia con cebroides uniinstantáneos. Este resultado tiene importantes implicaciones. En casos con popularidad sesgada hacia ciertos ítems de datos, las mejoras agregadas en la latencia en todas las solicitudes de ítems de datos siguen siendo las mismas. Incluso en escenarios en los que la frecuencia de acceso a los datos cambia dinámicamente, los zebroids seguirán proporcionando mejoras similares en la latencia. 7. CONCLUSIONES Y FUTURAS DIRECCIONES DE INVESTIGACIÓN En este estudio, examinamos las mejoras en la latencia que se pueden obtener en presencia de transportistas que entregan un elemento de datos desde un servidor a un cliente. Se cuantificó la variación de la latencia de disponibilidad en función de un rico conjunto de parámetros como la densidad del coche, el almacenamiento por coche, el tamaño de la base de datos de título y las políticas de reemplazo empleadas por los zebroids. A continuación se resumen algunas direcciones clave de investigación en el futuro que pretendemos seguir. Para reflejar mejor la realidad nos gustaría validar las observaciones obtenidas de este estudio con algunos rastros de simulación del mundo real de movimientos vehiculares (por ejemplo usando CORSIM [1]). Esto también servirá como validación para la utilidad del modelo de movilidad Markov utilizado en este estudio. Actualmente estamos analizando el desempeño de los zebroids en un conjunto de datos del mundo real que comprende una red ad-hoc de autobuses que se mueven alrededor de un pequeño barrio en Amherst [4]. Los cebroides también se pueden utilizar para la entrega de datos que transportan información sensible al retraso con una determinada caducidad. Las extensiones a zebroids que satisfacen estos requisitos de aplicación presentan una dirección de investigación futura interesante. 8. AGRADECIMIENTOS Esta investigación fue apoyada en parte por una beca Annenberg y subvenciones NSF numeradas CNS-0435505 (NeTS NOSS), CNS-0347621 (CAREER), y IIS-0307908. 9. REFERENCIAS [1] Administración Federal de Carreteras. Simulación del corredor. Versión 5.1, http://www.ops.fhwa.dot.gov/trafficanalysistools/cors im.htm. [2] D. Aldous y J. Llena. Cadenas de markov reversibles y caminatas aleatorias en gráficos. En preparación. [3] A. Bar-Noy, I. Kessler y M. Sidi. Usuarios móviles: Para actualizar o no actualizar. En IEEE Infocom, 1994. [4] J. Burgess, B. Gallagher, D. Jensen, y B. Levine. MaxProp: Enrutamiento para redes tolerantes a perturbaciones basadas en vehículos. En IEEE Infocom, abril de 2006. [5] E. Cohen y S. Shenker. Estrategias de replicación en redes de pares no estructuradas. En SIGCOMM, 2002. [6] A. Dan, D. Dias, R. Mukherjee, D. Sitaram y R. Tewari. Buffering y Caching en servidores de vídeo a gran escala. En COMPCON, 1995. [7] S. Ghandeharizadeh, S. Kapadia, y B. Krishnamachari. PAVAN: Marco normativo para la disponibilidad de contenidos en las redes ad hoc de vehículos. En VANET, Nueva York, Nueva York, Estados Unidos, 2004. ACM Press. [8] S. Ghandeharizadeh, S. Kapadia, y B. Krishnamachari. Comparación de estrategias de replicación para la disponibilidad de contenido en redes C2P2. En MDM, mayo de 2005. [9] S. Ghandeharizadeh, S. Kapadia, y B. Krishnamachari. Una evaluación de la latencia de disponibilidad en redes de vehículos ad-hoc basadas en el portador. Informe técnico, Departamento de Ciencias de la Computación, Universidad del Sur de California, CENG-2006-1, 2006. [10] S. Ghandeharizadeh y B. Krishnamachari. C2p2: Una red inter pares para servicios de información de automóviles a petición. En Globe. IEEE, 2004. [11] T. Hara. Asignación eficaz de réplicas en redes ad-hoc para mejorar la accesibilidad de datos. En IEEE Infocom, 2001. [12] H. Hayashi, T. Hara, y S. Nishio. Un método de asignación de réplica Adaptarse a los cambios de topología en redes ad-hoc. En DEXA, 2005. [13] P. Juang, H. Oki, Y. Wang, M. Martonosi, L. Peh, y D. Rubenstein. Computación energéticamente eficiente para el seguimiento de vida silvestre: compensaciones de diseño y experiencias tempranas con ZebraNet. Silgarch Comput. Archit. Noticias, 2002. [14] A. Pentland, R. Fletcher y A. Hasson. DakNet: Repensar la conectividad en las naciones en desarrollo. Computadora, 37(1):78-83, 2004. [15] F. Sailhan y V. Issarny. Caché cooperativo en redes ad-hoc. En MDM, 2003. [16] R. Shah, S. Roy, S. Jain y W. Brunette. Mulas de datos: Modelado y análisis de una arquitectura de tres niveles para redes de sensores escasas. Elsevier ad-hoc Networks Journal, 1o de septiembre de 2003. [17] T. Schiropoulos, K. Psounis y C. Raghavendra. Enrutamiento de una sola copia en redes móviles conectadas intermitentemente. En SECON, abril de 2004. [18] A. Tanenbaum. Sistemas operativos modernos, 2a edición, capítulo 4, sección 4.4. Prentice Hall, 2001. [19] A. Vahdat y D. Becker. Ruta epidémica para redes ad-hoc parcialmente conectadas. Informe técnico, Departamento de Informática, Universidad de Duke, 2000. [20] W. Zhao, M. Ammar, y E. Zegura. Un enfoque de ferriing de mensajes para la entrega de datos en redes móviles ad-hoc escasas. En MobiHoc, págs. 187 a 198, Nueva York, NY, Estados Unidos, 2004. ACM Press. [21] M. Zonoozi y P. Dassanayake. Modelado de Movilidad de Usuario y Caracterización del Patrón de Movilidad. Revista IEEE sobre áreas seleccionadas en las comunicaciones, 15:1239-1252, septiembre de 1997. 82 ",
            "error": []
        },
        "mobility": {
            "translated_key": "movilidad",
            "translated_annotated_text": "Una evaluación de la latencia de disponibilidad en redes ad hoc vehiculares basadas en portador Shahram Ghandeharizadeh Dept of Computer Science Univ of Southern California Los Angeles, CA 90089, USA shahram@usc.edu Shyam Kapadia Dept of Computer Science Univ of Southern California Los Angeles, CA 90089, USA kapadia@usc.edu Bhaskar Krishna Nuestro entorno de destino utiliza portadores de datos, llamados zebroids, donde un dispositivo móvil lleva un elemento de datos en nombre de un servidor a un cliente, minimizando así su latencia de disponibilidad. En este estudio, cuantificamos la variación de la latencia de disponibilidad con zebroids en función de un rico conjunto de parámetros como densidad de coche, almacenamiento por dispositivo, tamaño del repositorio y políticas de reemplazo empleadas por zebroids. Utilizando análisis y simulaciones extensas, obtenemos ideas novedosas sobre el diseño de sistemas basados en operadores. Se pueden obtener mejoras significativas en la latencia con zebroids a costa de un mínimo gasto general. Estas mejoras se producen incluso en escenarios con menor precisión en las predicciones de las rutas del coche. Dos hallazgos particularmente sorprendentes son: (1) una política de sustitución aleatoria ingenua empleada por los zebroids muestra un rendimiento competitivo, y (2) mejoras de la latencia obtenidas con una instanciación simplificada de zebroids se encuentran robustos a los cambios en la distribución de popularidad de los ítems de datos. Categorías y Subject Descriptores: C.2.4 [Sistemas distribuidos]: Términos Generales del Cliente/Servidor: Algoritmos, Rendimiento, Diseño, Experimentación. 1. INTRODUCCIÓN Los avances tecnológicos en las esferas del almacenamiento y las comunicaciones inalámbricas han hecho posible ahora prever la entrega a petición de datos, por ejemplo, para clips de vídeo y audio, en redes de peer-topeer vehiculares. En trabajos previos, Ghandeharizadeh et al. [10] introduce el concepto de vehículos equipados con un dispositivo Car-to-Car-Peer-toPeer, denominado AutoMata, para el entretenimiento dentro del vehículo. Las características notables de un AutoMata incluyen un dispositivo de almacenamiento masivo que ofrece cientos de gigabytes (GB) de almacenamiento, un procesador rápido y varios tipos de tarjetas de red. Incluso con las unidades de disco actuales de 500 GB, un repositorio de contenido de entretenimiento diverso puede exceder la capacidad de almacenamiento de un solo AutoMata. Tales repositorios constituyen el foco de este estudio. Para intercambiar datos, suponemos que cada AutoMata está configurado con dos tipos de tarjetas de red: 1) una tarjeta de red de baja anchura de banda con un radio-rango largo en el orden de millas que permite a un dispositivo AutoMata comunicarse con una estación celular cercana o WiMax, 2) una tarjeta de red de alta anchura de banda con un radio-rango limitado en el orden de cientos de pies. La conexión de ancho de banda alto admite tasas de datos en el orden de decenas a cientos de megabits por segundo y representa la red ad-hoc peer a peer entre los vehículos. Esto se etiqueta como el plano de datos y se emplea para intercambiar elementos de datos entre dispositivos. La conexión de baja anchura de banda sirve como plano de control, permitiendo a los dispositivos AutoMata intercambiar meta-datos con uno o más servidores centralizados. Esta conexión ofrece anchos de banda en el orden de decenas a cientos de Kilobits por segundo. Los servidores centralizados, denominados despachadores, calculan los calendarios de entrega de datos a lo largo del plano de datos utilizando los metadatos proporcionados. Estos horarios se transmiten a los vehículos participantes que utilizan el avión de control. La viabilidad técnica de tal arquitectura de dos niveles se presenta en [7], con resultados preliminares para demostrar que el ancho de banda del plano de control es suficiente para el intercambio de la información de control necesaria para realizar tal aplicación. En un escenario típico, un dispositivo AutoMata presenta a un pasajero con una lista de elementos de datos1, mostrando tanto el nombre de cada elemento de datos como su latencia de disponibilidad. Este último, denotado como ♥, se define como el momento más temprano en que el cliente encuentra una copia de su elemento de datos solicitado. Un elemento de datos está disponible inmediatamente cuando reside en el almacenamiento local del dispositivo AutoMata que atiende a la solicitud. Debido a las restricciones de almacenamiento, un AutoMata puede no almacenar todo el repositorio. En este caso, la latencia de disponibilidad es el tiempo desde que el usuario emite una solicitud hasta que el AutoMata encuentra otro coche que contiene el elemento de datos referenciado. (Los términos coche y AutoMata se utilizan indistintamente en este estudio.) La latencia de disponibilidad para un artículo es una función de la ubicación actual del cliente, su destino y ruta de viaje, el modelo de \"movilidad\" de los vehículos equipados con AutoMata, el número de réplicas construidas para los diferentes elementos de datos, y la colocación de réplicas de elementos de datos a través de los vehículos. Un método para mejorar la latencia de disponibilidad es emplear portadores de datos que transportan una réplica del elemento de datos solicitado desde un coche servidor que lo contiene a un cliente que lo solicitó. Estos portadores de datos se denominan zebroids. La selección de cebroides es facilitada por la arquitectura de dos niveles. El plano de control permite la recopilación centralizada de información en un despachador presente en una estación base.2 Algunos ejemplos de control en1 Sin pérdida de generalidad, el término elemento de datos puede ser medios tradicionales como texto o medios continuos como un clip de audio o vídeo. 2 Puede haber despachadores desplegados en un subconjunto de las estaciones de base para la tolerancia a fallos y la robustez. Los distribuidores entre estaciones de base pueden comunicarse a través de la infraestructura cableada. 75 formación son actualmente solicitudes activas, ruta de viaje de los clientes y sus destinos, y caminos de los otros coches. Para cada solicitud del cliente, el despachador puede elegir un conjunto de portadores z que colaboran para transferir un elemento de datos de un servidor a un cliente (z-relay zebroids). Aquí, z es el número de zebroids tales que 0 ≤ z < N, donde N es el número total de coches. Cuando z = 0 no hay portadores, lo que requiere un servidor para entregar el elemento de datos directamente al cliente. De lo contrario, el equipo de relé elegido de z zebroids se entregará los datos de forma transitoria unos a otros para llegar al cliente, reduciendo así la latencia de la disponibilidad (para más detalles, véase la sección 3.1). Para aumentar la robustez, el despachador puede emplear múltiples equipos de relé de portadoras z para cada solicitud. Esto puede ser útil en escenarios en los que el despachador tiene menor precisión de predicción en la información sobre las rutas de los coches. Por último, las restricciones de almacenamiento pueden requerir que un zebroid desaloje elementos de datos existentes de su almacenamiento local para acomodar el elemento solicitado por el cliente. En este estudio, se cuantifican los siguientes factores principales que afectan a la latencia de la disponibilidad en presencia de zebroideos: (i) tamaño del repositorio de datos, (ii) densidad del coche, (iii) capacidad de almacenamiento por coche, (iv) duración del viaje del cliente, (v) esquema de reemplazo empleado por los zebroideos, y (vi) exactitud de las predicciones de la ruta del coche. Para un subconjunto significativo de estos factores, abordamos algunas preguntas clave relativas al uso de zebroids tanto a través del análisis como de simulaciones extensas. Nuestras principales conclusiones son las siguientes. Una política de sustitución aleatoria ingenua empleada por los zebroids muestra un rendimiento competitivo en términos de latencia de disponibilidad. Con esta política, se pueden obtener mejoras sustanciales en la latencia con zebroids con un mínimo de gastos generales de reemplazo. En escenarios más prácticos, donde el despachador tiene información inexacta sobre las rutas del coche, los zebroids continúan proporcionando mejoras de la latencia. Un resultado sorprendente es que los cambios en la popularidad de los ítems de datos no impactan las ganancias de latencia obtenidas con una simple instanciación de z-relay zebroids llamados cebroids uno-instantáneos (ver Sección 3.1). Este estudio sugiere una serie de direcciones interesantes a seguir para obtener una mejor comprensión del diseño de sistemas basados en el portador que mejoran la latencia de disponibilidad. Trabajo relacionado: La replicación en redes móviles ad-hoc ha sido un tema ampliamente estudiado [11, 12, 15]. Sin embargo, ninguno de estos estudios emplea zebroids como portadores de datos para reducir la latencia de las solicitudes de los clientes. Varios estudios novedosos e importantes como ZebraNet [13], DakNet [14], Data Mules [16], Message Ferries [20] y Seek and Focus [17] han analizado factores que afectan a redes conectadas intermitentemente consistentes en portadores de datos similares en espíritu a los zebroideos. Los factores considerados por cada estudio son dictados por su supuesto entorno y aplicación diana. Una característica novedosa de nuestro estudio es el impacto en la latencia de disponibilidad para un repositorio de datos dado de elementos. En [9] se puede obtener una descripción detallada de las obras relacionadas. El resto de este documento está organizado de la siguiente manera. En la sección 2 se ofrece una visión general de la terminología junto con los factores que influyen en la latencia de la disponibilidad en presencia de zebroides. En la sección 3 se describe cómo se pueden emplear los cebroides. En la sección 4 se proporciona información detallada sobre la metodología de análisis empleada para captar el desempeño con los zebroids. En la sección 5 se describen los detalles del entorno de simulación utilizado para la evaluación. La sección 6 recoge las preguntas clave examinadas en este estudio y las responde a través de análisis y simulaciones. Por último, en la sección 7 se presentan breves conclusiones y futuras orientaciones de la investigación. 2. SINOPSIS Y TERMINOLOGÍA La Tabla 1 resume la notación de los parámetros utilizados en el artículo. A continuación introducimos algunas terminologías utilizadas en el artículo. Asumir una red de coches N AutoMata equipados, cada uno con capacidad de almacenamiento de α bytes. La capacidad total de almacenamiento del sistema es ST = N. Hay elementos de datos T en la base de datos, cada uno con parámetros de base de datos T Número de elementos de datos. Si Tamaño del ítem de datos i fi Frecuencia de acceso al ítem de datos i. Parámetros de replicación Ri Frecuencia normalizada de acceso al ítem de datos i ri Número de réplicas para ítem de datos i n Caracteriza un esquema de replicación particular. Latencia media de la disponibilidad del elemento de datos i Łagg Latencia agregada de la disponibilidad, N Número de dispositivos AutoMata en el sistema. α Capacidad de almacenamiento por AutoMata. γ Duración del viaje del cliente AutoMata. ST Capacidad total de almacenamiento del sistema AutoMata, ST = N · α. Cuadro 1: Términos y sus definiciones tamaño Si. La frecuencia de acceso al ítem de datos i se denota como fi, con T j=1 fj = 1. Deje que la duración del viaje del cliente AutoMata en consideración sea γ. Ahora definimos la frecuencia normalizada de acceso al ítem de datos i, denotado por Ri, como: Ri = (fi)n T j=1(fj)n ; 0 ≤ n ≤ فارسى (1) El exponente n caracteriza una técnica de replicación particular. Un esquema de replicación de raíz cuadrada se realiza cuando n = 0.5 [5]. Esto sirve como la línea base para la comparación con el caso cuando se despliegan zebroids. Ri se normaliza a un valor entre 0 y 1. El número de réplicas para el dato i, denotado como ri, es: ri = min (N, max (1, Ri·N Si )). Esto capta el caso cuando al menos una copia de cada elemento de datos debe estar presente en la red ad-hoc en todo momento. En los casos en que un elemento de datos se puede perder de la red ad-hoc, esta ecuación se convierte en ri = min (N, max (0, Ri·N Si )). En este caso, es posible que sea necesario satisfacer una solicitud para el elemento de datos perdido mediante la obtención del elemento desde un servidor remoto. La latencia de disponibilidad para un elemento de datos i, denotado como i, se define como la primera vez en la que un cliente AutoMata encontrará la primera réplica del elemento accesible a él. Si esta condición no se cumple, entonces se establece a i. Esto indica que el elemento de datos I no estaba disponible para el cliente durante su viaje. Tenga en cuenta que como hay al menos una réplica en el sistema para cada elemento de datos i, al establecer γ a un gran valor nos aseguramos de que los clientes soliciten cualquier elemento de datos i será satisfecho. Sin embargo, en la mayoría de las circunstancias prácticas γ puede no ser tan grande como para encontrar cada elemento de datos. Estamos interesados en la latencia de disponibilidad observada en todos los datos. Por lo tanto, aumentamos la latencia media de disponibilidad para cada ítem de datos i con su fi para obtener la siguiente latencia ponderada de disponibilidad (?agg) métrica:?agg = T i=1?i · fi A continuación, presentamos nuestro enfoque de solución describiendo cómo se seleccionan los zebroids. 3. ENFOQUE DE SOLUCIÓN 3.1 Zebroids Cuando un cliente hace referencia a un elemento de datos que falta en su almacenamiento local, el despachador identifica todos los coches con una copia del elemento de datos como servidores. A continuación, el despachador obtiene las rutas futuras de todos los coches para una duración de tiempo finito equivalente al tiempo máximo que el cliente está dispuesto a esperar a que su solicitud sea atendido. Utilizando esta información, el despachador programa la ruta de entrega más rápida desde cualquiera de los servidores al cliente utilizando cualquier otro coche como transportistas intermedios. Por lo tanto, determina el conjunto óptimo de decisiones de reenvío 76 que permitirá que el elemento de datos se entreguen al cliente en el mínimo de tiempo. Tenga en cuenta que la latencia a lo largo de la ruta de entrega más rápida que emplea un equipo de relé de z zebroids es similar a la obtenida con el encaminamiento epidémico [19] bajo los supuestos de almacenamiento infinito y ninguna interferencia. Una simple instanciación de z-relay zebroids se produce cuando z = 1 y la solicitud de los clientes desencadena una transferencia de una copia del elemento de datos solicitado de un servidor a un zebroid en su vecindad. Tal zebroideo se denomina cebroide uniinstantáneo. En algunos casos, el expedidor podría tener información inexacta sobre las rutas de los coches. Por lo tanto, un zebroid programado sobre la base de esta información inexacta puede no reunirse con su cliente objetivo. Para minimizar la probabilidad de tales escenarios, el despachador puede programar múltiples zebroids. Esto puede acarrear gastos generales adicionales debido a la utilización redundante de recursos para obtener las mismas mejoras de latencia. El tiempo necesario para transferir un elemento de datos de un servidor a un zebroid depende de su tamaño y del ancho de banda del enlace disponible. Con elementos de datos pequeños, es razonable suponer que este tiempo de transferencia es pequeño, especialmente en presencia del plano de datos de alto ancho de banda. Los elementos de datos grandes se pueden dividir en trozos más pequeños que permiten al despachador programar uno o más zebroids para entregar cada trozo a un cliente de una manera oportuna. Esta sigue siendo una dirección de investigación futura. Inicialmente, el número de réplicas para cada ítem de datos puede ser calculado usando la Ecuación 1. Este esquema calcula el número de réplicas de datos en función de su popularidad. Es estática porque el número de réplicas en el sistema no cambia y no se realizan reemplazos. Por lo tanto, esto se conoce como el ambiente de los nozebroids. Cuantificamos el desempeño de las diversas políticas de reemplazo con referencia a esta línea base que no emplea zebroids. Uno puede asumir una fase de arranque en frío, donde inicialmente sólo una o pocas copias de cada elemento de datos existen en el sistema. Muchas ranuras de almacenamiento de los coches pueden estar desocupados. Cuando los coches se encuentran entre sí, construyen nuevas réplicas de algunos elementos de datos seleccionados para ocupar los huecos vacíos. El procedimiento de selección puede consistir en elegir los datos de manera uniforme al azar. Nuevas réplicas se crean siempre y cuando un coche tiene un cierto umbral de su almacenamiento desocupado. Eventualmente, la mayoría de la capacidad de almacenamiento de un coche se agotará. 3.2 Políticas de reemplazo basadas en el operador Las políticas de reemplazo consideradas en este documento son reactivas ya que una sustitución se produce sólo en respuesta a una solicitud emitida para un determinado elemento de datos. Cuando el almacenamiento local de un zebroid está completamente ocupado, necesita reemplazar uno de sus elementos existentes para llevar el elemento de datos solicitado por el cliente. Para ello, el zebroid debe seleccionar a un candidato apropiado para el desalojo. Este proceso de decisión es análogo al encontrado en la paginación del sistema operativo donde el objetivo es maximizar la relación de acceso a la caché para evitar el retraso del acceso al disco [18]. Las políticas de reemplazo basadas en transportistas empleadas en nuestro estudio son las menos usadas recientemente (LRU), las menos usadas con frecuencia (LFU) y las aleatorias (donde un candidato de desalojo es elegido uniformemente al azar). Hemos considerado variantes locales y globales de las políticas LRU/LFU que determinan si el conocimiento local o global de los contenidos de los coches conocidos en el expedidor se utiliza para la decisión de desalojo en un zebroid (ver [9] para más detalles). Las pólizas de sustitución entrañan los siguientes gastos generales. En primer lugar, la complejidad asociada a la aplicación de una política. En segundo lugar, el ancho de banda utilizado para transferir una copia de un elemento de datos de un servidor al zebroid. En tercer lugar, el número medio de reemplazos realizados por los zebroides. Tenga en cuenta que en el caso de no cebroides no se incurre en gastos generales. Las métricas consideradas en este estudio son la latencia de la disponibilidad agregada, Tenga en cuenta que los despachadores con la ayuda del plano de control pueden asegurarse de que no se pierda ningún elemento de datos del sistema. En otras palabras, al menos una réplica de cada elemento de datos se mantiene en la red ad-hoc en todo momento. En tales casos, aunque un coche puede encontrarse con un cliente solicitante antes que otros servidores, si su almacenamiento local contiene elementos de datos con sólo una copia en el sistema, entonces tal coche no se elige como un zebroid. 4. METODOLOGÍA DE ANÁLISIS Aquí presentamos la metodología de evaluación analítica y algunas aproximaciones como ecuaciones de forma cerrada que capturan las mejoras en la latencia de disponibilidad que se pueden obtener tanto con cebros oneinstantáneos como con z-relay. Primero, presentamos algunos preliminares de nuestra metodología de análisis. • Que N sea el número de coches en la red que realizan una caminata aleatoria en 2D en un toro de G× G. Un coche adicional sirve como un cliente que entrega un total de N + 1 coches. Tal modelo de \"movilidad\" se ha utilizado ampliamente en la literatura [17, 16] principalmente porque es susceptible de análisis y proporciona una línea de base con la que se puede comparar el desempeño de otros modelos de \"movilidad\". Además, esta clase de modelos de \"movilidad\" de Markovia se ha utilizado para modelar los movimientos de los vehículos [3, 21]. • Asumimos que todos los coches comienzan desde la distribución estacionaria y realizan caminatas aleatorias independientes. Aunque para escenarios de densidad escasa, la suposición de independencia se mantiene, ya no es válido cuando N se aproxima a G. • Deje que el tamaño del repositorio de ítems de datos de interés sea T. Además, el ítem de datos i tiene réplicas ri. Esto implica que los coches ri, identificados como servidores, tienen una copia de este elemento de datos cuando el cliente solicita el elemento i. Todos los resultados de análisis presentados en esta sección se obtienen asumiendo que el cliente está dispuesto a esperar el tiempo necesario para que su solicitud sea satisfecha (duración del viaje sin límite γ = ­). Con el modelo de \"movilidad\" al azar en un torso 2D, hay una garantía de que mientras haya al menos una réplica del elemento de datos solicitado en la red, el cliente se encontrará con esta réplica [2]. Las extensiones al análisis que también consideran las duraciones del viaje finito se pueden obtener en [9]. Considere un escenario en el que no se emplean zebroids. En este caso, la latencia de disponibilidad esperada para el ítem de datos es el tiempo de reunión esperado de la caminata aleatoria realizada por el cliente con cualquiera de las caminatas aleatorias realizadas por los servidores. Aldous et al. [2] muestran que el tiempo de reunión de dos caminatas aleatorias en tal entorno puede modelarse como una distribución exponencial con la media C = c · G · log G, donde la constante c 0,17 para G ≥ 25. El tiempo de reunión, o equivalente a la latencia de la disponibilidad de i, para el cliente que solicita datos i es el momento hasta que se encuentre con cualquiera de estas réplicas ri por primera vez. Se trata también de una distribución exponencial con el siguiente valor esperado (obsérvese que esta formulación es válida sólo para casos escasos cuando G >> ri): فارسىi = cGlogG ri La latencia de disponibilidad agregada sin emplear zebroids es entonces esta expresión promediada sobre todos los ítems de datos, ponderada por su frecuencia de acceso: فارسىagg(no − zeb) = T i=1 fi Por otra parte, esta réplica se genera en el paso de tiempo cuando el cliente emite la solicitud. Que Nc i sea el número total esperado de nodos que están en la misma celda que cualquiera de los servidores ri. Luego, tenemos Nc i = (N − ri) · (1 − (1 − 1 G )ri ) (3) En el modelo analítico, suponemos que Nc i nuevas réplicas se crean, de modo que el número total de réplicas se aumenta a ri + Nc i. La latencia de disponibilidad se reduce ya que es más probable que el cliente cumpla con una réplica anterior. La latencia agregada de disponibilidad esperada en el caso de los cebroides uno-instantáneos es dada por, agg(zeb) = T i=1 fi · c · G · log G ri + Nc i = T i=1 fi · C ri + Nc i (4) Tenga en cuenta que al obtener esta expresión, para facilitar el análisis, hemos asumido que las nuevas réplicas comienzan Así trata a todos los portadores de Nc i de forma independiente, al igual que los servidores originales ri. Como mostraremos a continuación en comparación con las simulaciones, esta aproximación proporciona un límite superior a las mejoras que se pueden obtener porque da lugar a una menor latencia esperada en el cliente. Cabe señalar que el procedimiento mencionado anteriormente producirá una latencia similar a la empleada por un expedidor que emplee cebroides oneinstantáneos (véase la sección 3.1). Dado que el despachador es consciente de todos los movimientos futuros del coche que sólo transferiría el elemento de datos solicitado en un único zebroid, si determina que el zebroid se reunirá con el cliente antes que cualquier otro servidor. Este zebroid seleccionado está incluido en las nuevas réplicas de Nc i. 4.2 z-relay zebroids Para calcular la latencia de disponibilidad esperada con z-relay zebroids, utilizamos un análogo de problema de coloración similar a un enfoque utilizado por Spyropoulos et al. [17]. En [9] se dan detalles del procedimiento para obtener una expresión de forma cerrada. La latencia de disponibilidad agregada (agg) con z-relay zebroids es dada por, agg(zeb) = T i=1 [fi · C N + 1 · 1 N + 1 − ri · (N · log N ri − log (N + 1 − ri))] (5) 5. METODOLOGÍA DE SIMULACIÓN El entorno de simulación considerado en este estudio se compone de vehículos como automóviles que llevan una fracción del repositorio de datos. Un parámetro de precisión de predicción proporciona inherentemente una cierta garantía probabilística sobre la confianza de las predicciones de ruta del automóvil conocidas en el despachador. Un valor del 100% implica que las rutas exactas de todos los coches se conocen en todo momento. Un valor del 70% para este parámetro indica que las rutas previstas para los coches coincidirán con las reales con probabilidad 0.7. Tenga en cuenta que esta probabilidad se extiende a través de las rutas del coche durante toda la duración del viaje. Ahora proporcionamos los preliminares del estudio de simulación y luego describimos los parámetros de configuración utilizados en nuestros experimentos. • Similar a la metodología de análisis, el mapa utilizado es un toro 2D. Un modelo de \"movilidad\" de Markov que representa una caminata aleatoria 2D imparcial en la superficie del toro describe el movimiento de los coches a través de este toro. • Cada cuadrícula/célula es un estado único de esta cadena Markov. En cada ranura de tiempo, cada coche hace una transición de una celda a cualquiera de sus 8 celdas vecinas. La transición es una función de la ubicación actual del coche y una matriz de transición de probabilidad Q = [qij] donde qij es la probabilidad de transición del estado i al estado j. Solo los coches equipados con AutoMata dentro de la misma celda pueden comunicarse entre sí. • Los parámetros γ,  han sido discretizados y expresados en términos del número de franjas horarias. • Un dispositivo AutoMata no mantiene más de una réplica de un elemento de datos. Esto se debe a que las réplicas adicionales ocupan el almacenamiento sin proporcionar beneficios. • Los cebroides de relé z o uno instantáneos pueden ser empleados por solicitud del cliente para mejorar la latencia. • A menos que se mencione lo contrario, se supone que el parámetro de precisión de la predicción es del 100%. Esto se debe a que este estudio pretende cuantificar el efecto de un gran número de parámetros individualmente sobre la latencia de la disponibilidad. Aquí, establecemos el tamaño de cada elemento de datos, Si, para ser 1. α representa el número de ranuras de almacenamiento por AutoMata. Cada ranura de almacenamiento almacena un elemento de datos. γ representa la duración del viaje de los clientes en términos del número de franjas horarias. Por lo tanto, los posibles valores de latencia de disponibilidad están entre 0 y γ.  se define como el número de franjas horarias después de lo cual un dispositivo cliente AutoMata encontrará una réplica del elemento de datos por primera vez. Si una réplica para el elemento de datos solicitado fue encontrado por el cliente en la primera celda, a continuación, se establece  = 0. Si se trata de un elemento de datos solicitado, el cliente no encontró ninguna copia del elemento de datos solicitado durante todo su viaje. En todas nuestras simulaciones, para la ilustración consideramos un 5 × 5 2D-torus con γ fijado a 10. Nuestros experimentos indican que las tendencias en la escala de resultados a mapas de mayor tamaño. Simulamos una distribución sesgada de acceso a los datos T que obedece a la ley Ziffs con una media de 0.27. Esta distribución corresponde a la venta de entradas de cine en los Estados Unidos [6]. Empleamos un esquema de replicación que asigna réplicas para un elemento de datos en función de la raíz cuadrada de la frecuencia de acceso de ese elemento. Se muestra que el esquema de replicación de raíz cuadrada tiene un rendimiento de latencia competitivo en un gran espacio de parámetros [8]. Las réplicas de elementos de datos se distribuyen uniformemente entre los dispositivos AutoMata. Esto sirve como el caso de la línea base sin cebros. El esquema de raíz cuadrada también proporciona la distribución de réplica inicial cuando se emplean zebroids. Tenga en cuenta que los reemplazos realizados por los zebroids causarán cambios en la distribución de réplica de ítems de datos. Las solicitudes generadas según la distribución Zipf se emiten una a la vez. El coche cliente que emite la solicitud se elige de una manera redonda-robina. Después de un período máximo de γ, se registra la latencia con que se encontró esta solicitud. En todos los resultados de simulación, cada punto es un promedio de 200.000 solicitudes. Además, los intervalos de confianza del 95% determinados para los resultados son bastante ajustados para las métricas de latencia y los gastos generales de reemplazo. Por lo tanto, sólo los presentamos para la métrica que captura la mejora porcentual de la latencia con respecto al caso de no-zebroides. 6. RESULTADOS En esta sección, describimos nuestros resultados de evaluación donde se abordan las siguientes preguntas clave. Con una amplia selección de esquemas de reemplazo disponibles para un zebroid, ¿cuál es su efecto en la latencia de disponibilidad? Una pregunta más central es: Do zebroids provide 78 0 20 40 60 80 100 1.5 2 2.5 3 3.5 Número de coches Latencia de disponibilidad agregada (­agg ) lru_global lfu_global lru_local lfu_local random Figura 1: La figura 1 muestra la latencia de disponibilidad al emplear cebroids uno-instantáneos en función de los valores (N,α), cuando el ¿Cuáles son los gastos generales asociados en el empleo de estos zebroides? ¿Qué sucede con estas mejoras en escenarios donde un despachador puede tener información imperfecta sobre las rutas del automóvil? ¿Cuáles son las compensaciones inherentes entre la densidad del automóvil y el almacenamiento por automóvil en lo que respecta a su efecto combinado e individual sobre la latencia de la disponibilidad en presencia de zebroids? Presentamos análisis simples y simulaciones detalladas para proporcionar respuestas a estas preguntas, así como para obtener información sobre el diseño de sistemas basados en operadores. 6.1 ¿Cómo funciona un esquema de sustitución empleado por un latencia de disponibilidad de impacto zebroideo? Para ilustrarlo, presentamos experimentos de escala en los que se emplean cebroides oneinstantáneos (ver Figura 1). Por escala, queremos decir que α y N se cambian proporcionalmente para mantener el almacenamiento total del sistema, ST, constante. Aquí, T = 50 y ST = 200. Elegimos los siguientes valores de (N,α) = {(20,10), (25,8), (50,4), (100,2)}. La cifra indica que un plan de sustitución al azar muestra un rendimiento competitivo. Esto se debe a varias razones. Recuerde que la distribución de réplica inicial se establece según el esquema de replicación de raíz cuadrada. El esquema de reemplazo aleatorio no altera esta distribución ya que hace que los reemplazos ciegos a la popularidad de un elemento de datos. Sin embargo, los reemplazos causan una reorganización dinámica de los datos a fin de atender mejor a la solicitud activa actual. Por otra parte, el patrón de \"movilidad\" de los coches es aleatorio, por lo tanto, los lugares desde los que las solicitudes son emitidas por los clientes también son aleatorios y no se conoce a priori en el despachador. Estas conclusiones son importantes porque una política de sustitución aleatoria puede aplicarse de manera descentralizada. Los esquemas rru-global y lfu-global proporcionan un rendimiento de latencia que es peor que aleatorio. Esto se debe a que estas políticas desarrollan rápidamente una preferencia por los elementos de datos más populares, creando así un mayor número de réplicas para ellos. Durante el desalojo, los datos más populares casi nunca se seleccionan como candidatos de reemplazo. En consecuencia, hay menos réplicas para los artículos menos populares. Por lo tanto, la distribución inicial del elemento de datos replica cambios de raíz cuadrada a que se asemeja a replicación lineal. El mayor número de réplicas de las partidas de datos populares proporciona beneficios adicionales marginales, mientras que el menor número de réplicas de las demás partidas de datos perjudica el rendimiento de latencia de estas políticas mundiales. Los esquemas lfu-local y lru-local tienen un rendimiento similar al aleatorio ya que no tienen suficiente historial de solicitudes de datos locales. Especulamos que el desempeño de estas políticas locales se acercará al de sus variantes globales para una historia suficientemente grande de solicitudes de ítems de datos. Debido al rendimiento competitivo demostrado por una política aleatoria, para el resto del documento, presentamos el rendimiento de los zebroids que emplean una política de reemplazo aleatorio. 6.2 ¿Proporcionan los zebroids mejoras significativas en la latencia de disponibilidad? Encontramos que en muchos escenarios que emplean zebroids proporciona mejoras sustanciales en la latencia de la disponibilidad. 6.2.1 Análisis Primero consideramos el caso de los cebroides uno-instantáneos. La Figura 2.a muestra la variación en Łagg en función de N para T = 10 y α = 1 con 10 × 10 toros usando la Ecuación 4. Los ejes x e y se dibujan a una escala de registro. En la figura 2.b se muestra la mejoría en % en el Agg obtenido con cebroides uniinstantáneos. En este caso, sólo el eje x se dibuja a una escala de registro. Para ilustrar, suponemos que los datos T son solicitados uniformemente. Inicialmente, cuando la red es escasa la aproximación analítica para mejoras en la latencia con zebroids, obtenida de las ecuaciones 2 y 4, coincide estrechamente con los resultados de la simulación. Sin embargo, a medida que N aumenta, la suposición de escasez para la que el análisis es válido, a saber, N+G, ya no es cierta. Por lo tanto, las dos curvas divergen rápidamente. El punto en el que las dos curvas se alejan unas de otras corresponde a un valor de Además, como se mencionó anteriormente, el análisis proporciona un límite superior a las mejoras de la latencia, ya que trata de las réplicas recién creadas dadas por Nc i de forma independiente. Sin embargo, estas réplicas de Nc i comienzan desde la misma celda que una de las réplicas de servidor ri. Finalmente, el análisis captura un escenario oneshot donde dada una distribución inicial de réplica de datos, se calcula la latencia de disponibilidad. Las nuevas réplicas creadas no afectan las solicitudes futuras del cliente. Debido a las limitaciones de espacio, aquí, se resumen las observaciones en el caso de z-relay zebroids se emplean. El lector interesado puede obtener más detalles en [9]. Observaciones similares, como el caso cebroideo uniinstantaneo, se aplican ya que las curvas de simulación y análisis comienzan de nuevo a divergir cuando los supuestos de análisis ya no son válidos. Sin embargo, la observación clave aquí es que la mejora de la latencia con z-relay zebroids es significativamente mejor que el caso de cebroids uno-instantáneos, especialmente para escenarios de almacenamiento más bajos. Esto se debe a que en escenarios escasos, los traspasos transitivos entre los zebroides crean un mayor número de réplicas para el ítem de datos solicitado, lo que produce una menor latencia de disponibilidad. Por otra parte, también se observa que la curva de validación de simulación para las mejoras en Łagg con z-relay zebroids se aproxima a la del caso cebroideo uniinstantánea para un almacenamiento más alto (valores de N más altos). Esto se debe a que los cebroides uno-instantáneos son un caso especial de z-relay zebroides. 6.2.2 Simulación Realizamos simulaciones para examinar todo el espectro de almacenamiento obtenido cambiando la densidad del vehículo N o el almacenamiento por coche α para capturar también escenarios en los que no se mantienen las hipótesis de escasez para las que el análisis es válido. Separamos el efecto de N y α capturando la variación de N manteniendo constante α (caso 1) y viceversa (caso 2) tanto con z-relay y cebroides uno-instantáneos. Aquí, establecemos el tamaño del repositorio como T = 25. En el gráfico 3 figura el caso 1 mencionado anteriormente. Se observan tendencias similares con el caso 2, en [9] se dispone de una descripción completa de esos resultados. Con la Figura 3.b, manteniendo constante α, la densidad del coche aumenta inicialmente tiene mayores beneficios de latencia porque el aumento de N introduce más zebroids en el sistema. A medida que N se incrementa aún más, • reduce porque el almacenamiento total en el sistema sube. En consecuencia, el número de réplicas por elemento de datos sube aumentando así el número de servidores 79. Por lo tanto, la política de reemplazo no puede encontrar un zebroid tan a menudo para transportar el elemento de datos solicitado al cliente antes que cualquiera de los servidores. Por otro lado, el aumento del número de servidores beneficia al caso de no-zebroids al reducir a Agg. El efecto neto da lugar a una reducción de los valores más grandes de N. 10 1 10 2 10 3 10 −1 10 0 10 1 10 2 Número de automóviles no-zebroidsanal no-zebroids sim one-instantaneoussim Agregación Disponibilidad Latencia (­agg ) 2.a) Agg 10 1 10 2 10 3 0 10 20 40 50 60 70 80 90 100 Número de automóviles % Mejora Las tendencias mencionadas anteriormente son similares a las obtenidas del análisis. Sin embargo, algo contra-intuitivamente con almacenamiento relativamente más alto del sistema, z-relay zebroids proporcionan mejoras ligeramente más bajas en la latencia en comparación con uno-instantaneous zebroids. Especulamos que esto se debe a las diferentes distribuciones de réplicas de ítems de datos impuestas por ellos. Tenga en cuenta que los reemplazos realizados por los zebroids causan fluctuaciones en estas distribuciones de réplica que pueden afectar futuras solicitudes de clientes. Actualmente estamos explorando opciones adecuadas de parámetros que pueden capturar estas distribuciones de réplicas cambiantes. 6.3 ¿Cuáles son los gastos generales derivados de la mejora de la latencia de los zebroideos? Encontramos que las mejoras en la latencia con zebroids se obtienen con un mínimo de reemplazo de los gastos generales (< 1 por solicitud del cliente). 6.3.1 Análisis Con cebroides uniinstantáneos, para cada solicitud de cliente se emplea un máximo de un cebroide para mejorar la latencia. Por lo tanto, los gastos generales de sustitución por solicitud del cliente pueden ascender a un máximo de uno. Recordemos que para calcular la latencia con una latencia instantánea 0 50 100 150 200 250 350 400 0 1 2 3 4 5 6 Número de coches Latencia de disponibilidad agregada (?agg ) no-zebroids one-instantaneous z-relays 3.a 0 50 100 150 200 250 300 350 400 0 10 20 30 40 50 60 Número de coches % Mejora en?agg wrt no-zebro Ahora un reemplazo sólo se incumple si una de estas réplicas de Nc i de nueva creación se reúne con el cliente antes que cualquiera de los servidores de ri. Que Xri y XNc i respectivamente sean variables aleatorias que capturen el tiempo mínimo hasta que cualquiera de las réplicas de ri y Nc i cumpla con el cliente. Dado que Xri y XNc i se supone que son independientes, por la propiedad de variables aleatorias distribuidas exponencialmente tenemos, Overhead/request = 1 · P(XNc i < Xri ) + 0 · P(Xri ≤ XNc i ) (6) Overhead/request = ri C ri C + Nc i C = ri ri + Nc i (7) Sin embargo, si N  es constante entonces el aumento de las causas N α 80 0 20 40 60 80 100 0 0,05 0,15 0,20 0,25 0,35 0,40 0,45 0,5 Número de coches cebroides instantáneos número medio de reemplazos por solicitud (N=20,α=10) (N=25,α=8) (N=50,α=4) (N=100,α=2) Figura 4: La figura 4 captura el reemplazo de Esto implica que se incurre en un aumento de los gastos generales de sustitución para valores N y α más altos. Por otra parte, cuando ri = N, esto significa que cada coche tiene una réplica de elemento de datos i. Por lo tanto, no se emplean zebroids cuando se solicita este artículo, lo que da lugar a un gasto general/solicitud para este artículo como cero. A continuación, presentamos resultados de simulación que validan nuestra hipótesis de análisis para los gastos generales asociados con el despliegue de cebroides uno-instantáneos. 6.3.2 Simulación En la figura 4 se muestra la superficie de repuesto con cebroides uno-instantáneos cuando se varían (N,α) manteniendo constante el almacenamiento total del sistema. Las tendencias mostradas por la simulación concuerdan con las previstas por el análisis anterior. Sin embargo, el almacenamiento total del sistema puede ser cambiado ya sea por la densidad variable del coche (N) o el almacenamiento por coche (α). Debido a tendencias similares, aquí presentamos el caso cuando α se mantiene constante y N es variada (Figura 5). Referimos al lector a [9] para el caso cuando α es variado y N se mantiene constante. Presentamos un argumento intuitivo para el comportamiento de las curvas superiores de reemplazo de la solicitud. Cuando el almacenamiento es extremadamente escaso de modo que sólo existe una réplica por elemento de datos en la red AutoMata, el número de reemplazos realizados por los zebroids es cero ya que cualquier reemplazo causará que un elemento de datos se pierda del sistema. El despachador garantiza que no se pierda ningún elemento de datos del sistema. En el otro extremo del espectro, si el almacenamiento se vuelve tan abundante que α = T entonces todo el repositorio de elementos de datos se puede replicar en cada coche. El número de reemplazos es de nuevo cero ya que cada solicitud puede ser satisfecha localmente. Un escenario similar ocurre si N se aumenta a un valor tan grande que otro coche con el elemento de datos solicitado siempre está disponible en las proximidades del cliente. Sin embargo, hay un espectro de almacenamiento en el medio donde los reemplazos por los zebroides programados dan lugar a mejoras en el Agg (ver Figura 3). Por otra parte, observamos que para escenarios de almacenamiento escasos, las mejoras más altas con z-relay zebroids se obtienen al costo de un aumento de los gastos generales de reemplazo en comparación con el caso de cebroids uno-instantáneos. Esto se debe a que en el caso anterior, cada uno de estos z zebroids seleccionados a lo largo de la ruta de latencia más baja al cliente necesita realizar un reemplazo. Sin embargo, los gastos generales de sustitución son todavía inferiores a 1 lo que indica que en promedio se necesita menos de un reemplazo por solicitud del cliente, incluso cuando se emplean z-relay zebroids. 0 50 100 150 200 250 300 350 400 0 0,1 0,2 0,3 0,4 0,6 0,7 0,8 0,9 1 Número de coches z-reemplaza uno-instantánea Número medio de reemplazos por solicitud Figura 5: La figura 5 muestra los gastos generales de reemplazo con cebroide para los casos en que N es diferente manteniendo α = 2. 10 20 30 40 50 60 70 80 90 100 0 0,5 1 1,5 2 2,5 3 3,5 4 Porcentaje de predicción no-zebroideos (N=50) uno-instantáneos (N=50) z-relés (N=50) no-zebroideos (N=200) uno-instantáneos (N=200) z-relés (N=200) Disponibilidad agregada Latencia ( 6.4 ¿Qué sucede con la latencia de la disponibilidad con zebroids en escenarios con inexactitudes en las predicciones de la ruta del coche? Encontramos que los zebroids continúan proporcionando mejoras en la latencia de la disponibilidad incluso con menor precisión en las predicciones de la ruta del coche. Utilizamos un único parámetro p para cuantificar la exactitud de las predicciones de la ruta del coche. 6.4.1 Análisis Dado que p representa la probabilidad de que una ruta del automóvil predicha por el expedidor coincida con la actual, por lo tanto, la latencia con los zebroideos puede ser aproximada por, 6.4.2 Simulación En la figura 6 se muestra la variación en el Agg en función de esta métrica de precisión de la predicción de ruta. Observamos una reducción suave en la mejora de 81 en Agg a medida que la métrica de precisión de predicción reduce. Para los zebroids que están programados pero no se reúnen con el cliente debido al error de predicción, etiquetamos tales reemplazos hechos por los zebroids como fallados. Se ve que los reemplazos fallidos aumentan gradualmente a medida que la precisión de la predicción se reduce. 6.5 ¿En qué condiciones se maximizan las mejoras en la latencia de disponibilidad con zebroids? Sorprendentemente, encontramos que las mejoras en la latencia obtenidas con cebroides uno-instantáneos son independientes de la distribución de entrada de la popularidad de los ítems de datos. 6.5.1 Análisis La diferencia fraccionaria (marcada en la letra ) en la latencia entre los cebroides no-zebroideos y los cebroides uno-instantáneos se obtiene a partir de las ecuaciones 2, 3 y 4 de la siguiente forma: T i=1 fi·C ri − T i=1 fi·C ri+(N−ri)·(1−(1− 1 G )ri Let α = 1, haciendo el almacenamiento total en el sistema ST = N. Suponiendo que la distribución de réplica inicial es según el esquema de replicación de raíz cuadrada, tenemos, ri = fi·N T j = 1 fj. Por lo tanto, obtenemos fi = K2 ·r2 i N2, donde K = T j=1 fj. Utilizando esto, junto con la aproximación (1 − x)n 1 − n · x para x pequeña, simplificamos la ecuación anterior para obtener, • = 1 − T i=1 ri 1+ N−ri G T i=1 ri Para determinar cuándo se maximizan las ganancias con cebroides uno-instantáneos, podemos enmarcar un problema de optimización de la siguiente manera: Maximizar •, sujeto a T i Con un esquema de replicación de raíz cuadrada, las mejoras obtenidas con cebroides uniinstantáneos son independientes de la distribución de popularidad de entrada de los ítems de datos. (Ver [9] para la prueba) 6.5.2 Simulación Realizamos simulaciones con dos diferentes distribución de frecuencias de ítems de datos: Uniforme y Zipfian (con media= 0.27). En ambos casos se obtienen mejoras similares de latencia con cebroides uniinstantáneos. Este resultado tiene importantes implicaciones. En casos con popularidad sesgada hacia ciertos ítems de datos, las mejoras agregadas en la latencia en todas las solicitudes de ítems de datos siguen siendo las mismas. Incluso en escenarios en los que la frecuencia de acceso a los datos cambia dinámicamente, los zebroids seguirán proporcionando mejoras similares en la latencia. 7. CONCLUSIONES Y FUTURAS DIRECCIONES DE INVESTIGACIÓN En este estudio, examinamos las mejoras en la latencia que se pueden obtener en presencia de transportistas que entregan un elemento de datos desde un servidor a un cliente. Se cuantificó la variación de la latencia de disponibilidad en función de un rico conjunto de parámetros como la densidad del coche, el almacenamiento por coche, el tamaño de la base de datos de título y las políticas de reemplazo empleadas por los zebroids. A continuación se resumen algunas direcciones clave de investigación en el futuro que pretendemos seguir. Para reflejar mejor la realidad nos gustaría validar las observaciones obtenidas de este estudio con algunos rastros de simulación del mundo real de movimientos vehiculares (por ejemplo usando CORSIM [1]). Esto también servirá como validación para la utilidad del modelo de \"movilidad\" Markov utilizado en este estudio. Actualmente estamos analizando el desempeño de los zebroids en un conjunto de datos del mundo real que comprende una red ad-hoc de autobuses que se mueven alrededor de un pequeño barrio en Amherst [4]. Los cebroides también se pueden utilizar para la entrega de datos que transportan información sensible al retraso con una determinada caducidad. Las extensiones a zebroids que satisfacen estos requisitos de aplicación presentan una dirección de investigación futura interesante. 8. AGRADECIMIENTOS Esta investigación fue apoyada en parte por una beca Annenberg y subvenciones NSF numeradas CNS-0435505 (NeTS NOSS), CNS-0347621 (CAREER), y IIS-0307908. 9. REFERENCIAS [1] Administración Federal de Carreteras. Simulación del corredor. Versión 5.1, http://www.ops.fhwa.dot.gov/trafficanalysistools/cors im.htm. [2] D. Aldous y J. Llena. Cadenas de markov reversibles y caminatas aleatorias en gráficos. En preparación. [3] A. Bar-Noy, I. Kessler y M. Sidi. Usuarios móviles: Para actualizar o no actualizar. En IEEE Infocom, 1994. [4] J. Burgess, B. Gallagher, D. Jensen, y B. Levine. MaxProp: Enrutamiento para redes tolerantes a perturbaciones basadas en vehículos. En IEEE Infocom, abril de 2006. [5] E. Cohen y S. Shenker. Estrategias de replicación en redes de pares no estructuradas. En SIGCOMM, 2002. [6] A. Dan, D. Dias, R. Mukherjee, D. Sitaram y R. Tewari. Buffering y Caching en servidores de vídeo a gran escala. En COMPCON, 1995. [7] S. Ghandeharizadeh, S. Kapadia, y B. Krishnamachari. PAVAN: Marco normativo para la disponibilidad de contenidos en las redes ad hoc de vehículos. En VANET, Nueva York, Nueva York, Estados Unidos, 2004. ACM Press. [8] S. Ghandeharizadeh, S. Kapadia, y B. Krishnamachari. Comparación de estrategias de replicación para la disponibilidad de contenido en redes C2P2. En MDM, mayo de 2005. [9] S. Ghandeharizadeh, S. Kapadia, y B. Krishnamachari. Una evaluación de la latencia de disponibilidad en redes de vehículos ad-hoc basadas en el portador. Informe técnico, Departamento de Ciencias de la Computación, Universidad del Sur de California, CENG-2006-1, 2006. [10] S. Ghandeharizadeh y B. Krishnamachari. C2p2: Una red inter pares para servicios de información de automóviles a petición. En Globe. IEEE, 2004. [11] T. Hara. Asignación eficaz de réplicas en redes ad-hoc para mejorar la accesibilidad de datos. En IEEE Infocom, 2001. [12] H. Hayashi, T. Hara, y S. Nishio. Un método de asignación de réplica Adaptarse a los cambios de topología en redes ad-hoc. En DEXA, 2005. [13] P. Juang, H. Oki, Y. Wang, M. Martonosi, L. Peh, y D. Rubenstein. Computación energéticamente eficiente para el seguimiento de vida silvestre: compensaciones de diseño y experiencias tempranas con ZebraNet. Silgarch Comput. Archit. Noticias, 2002. [14] A. Pentland, R. Fletcher y A. Hasson. DakNet: Repensar la conectividad en las naciones en desarrollo. Computadora, 37(1):78-83, 2004. [15] F. Sailhan y V. Issarny. Caché cooperativo en redes ad-hoc. En MDM, 2003. [16] R. Shah, S. Roy, S. Jain y W. Brunette. Mulas de datos: Modelado y análisis de una arquitectura de tres niveles para redes de sensores escasas. Elsevier ad-hoc Networks Journal, 1o de septiembre de 2003. [17] T. Schiropoulos, K. Psounis y C. Raghavendra. Enrutamiento de una sola copia en redes móviles conectadas intermitentemente. En SECON, abril de 2004. [18] A. Tanenbaum. Sistemas operativos modernos, 2a edición, capítulo 4, sección 4.4. Prentice Hall, 2001. [19] A. Vahdat y D. Becker. Ruta epidémica para redes ad-hoc parcialmente conectadas. Informe técnico, Departamento de Informática, Universidad de Duke, 2000. [20] W. Zhao, M. Ammar, y E. Zegura. Un enfoque de ferriing de mensajes para la entrega de datos en redes móviles ad-hoc escasas. En MobiHoc, págs. 187 a 198, Nueva York, NY, Estados Unidos, 2004. ACM Press. [21] M. Zonoozi y P. Dassanayake. Modelado de Movilidad de Usuario y Caracterización del Patrón de Movilidad. Revista IEEE sobre áreas seleccionadas en las comunicaciones, 15:1239-1252, septiembre de 1997. 82 ",
            "error": [
                ""
            ]
        },
        "vehicular network": {
            "translated_key": [],
            "translated_annotated_text": "Una evaluación de la latencia de disponibilidad en redes ad hoc vehiculares basadas en portador Shahram Ghandeharizadeh Dept of Computer Science Univ of Southern California Los Angeles, CA 90089, USA shahram@usc.edu Shyam Kapadia Dept of Computer Science Univ of Southern California Los Angeles, CA 90089, USA kapadia@usc.edu Bhaskar Krishna Nuestro entorno de destino utiliza portadores de datos, llamados zebroids, donde un dispositivo móvil lleva un elemento de datos en nombre de un servidor a un cliente, minimizando así su latencia de disponibilidad. En este estudio, cuantificamos la variación de la latencia de disponibilidad con zebroids en función de un rico conjunto de parámetros como densidad de coche, almacenamiento por dispositivo, tamaño del repositorio y políticas de reemplazo empleadas por zebroids. Utilizando análisis y simulaciones extensas, obtenemos ideas novedosas sobre el diseño de sistemas basados en operadores. Se pueden obtener mejoras significativas en la latencia con zebroids a costa de un mínimo gasto general. Estas mejoras se producen incluso en escenarios con menor precisión en las predicciones de las rutas del coche. Dos hallazgos particularmente sorprendentes son: (1) una política de sustitución aleatoria ingenua empleada por los zebroids muestra un rendimiento competitivo, y (2) mejoras de la latencia obtenidas con una instanciación simplificada de zebroids se encuentran robustos a los cambios en la distribución de popularidad de los ítems de datos. Categorías y Subject Descriptores: C.2.4 [Sistemas distribuidos]: Términos Generales del Cliente/Servidor: Algoritmos, Rendimiento, Diseño, Experimentación. 1. INTRODUCCIÓN Los avances tecnológicos en las esferas del almacenamiento y las comunicaciones inalámbricas han hecho posible ahora prever la entrega a petición de datos, por ejemplo, para clips de vídeo y audio, en redes de peer-topeer vehiculares. En trabajos previos, Ghandeharizadeh et al. [10] introduce el concepto de vehículos equipados con un dispositivo Car-to-Car-Peer-toPeer, denominado AutoMata, para el entretenimiento dentro del vehículo. Las características notables de un AutoMata incluyen un dispositivo de almacenamiento masivo que ofrece cientos de gigabytes (GB) de almacenamiento, un procesador rápido y varios tipos de tarjetas de red. Incluso con las unidades de disco actuales de 500 GB, un repositorio de contenido de entretenimiento diverso puede exceder la capacidad de almacenamiento de un solo AutoMata. Tales repositorios constituyen el foco de este estudio. Para intercambiar datos, suponemos que cada AutoMata está configurado con dos tipos de tarjetas de red: 1) una tarjeta de red de baja anchura de banda con un radio-rango largo en el orden de millas que permite a un dispositivo AutoMata comunicarse con una estación celular cercana o WiMax, 2) una tarjeta de red de alta anchura de banda con un radio-rango limitado en el orden de cientos de pies. La conexión de ancho de banda alto admite tasas de datos en el orden de decenas a cientos de megabits por segundo y representa la red ad-hoc peer a peer entre los vehículos. Esto se etiqueta como el plano de datos y se emplea para intercambiar elementos de datos entre dispositivos. La conexión de baja anchura de banda sirve como plano de control, permitiendo a los dispositivos AutoMata intercambiar meta-datos con uno o más servidores centralizados. Esta conexión ofrece anchos de banda en el orden de decenas a cientos de Kilobits por segundo. Los servidores centralizados, denominados despachadores, calculan los calendarios de entrega de datos a lo largo del plano de datos utilizando los metadatos proporcionados. Estos horarios se transmiten a los vehículos participantes que utilizan el avión de control. La viabilidad técnica de tal arquitectura de dos niveles se presenta en [7], con resultados preliminares para demostrar que el ancho de banda del plano de control es suficiente para el intercambio de la información de control necesaria para realizar tal aplicación. En un escenario típico, un dispositivo AutoMata presenta a un pasajero con una lista de elementos de datos1, mostrando tanto el nombre de cada elemento de datos como su latencia de disponibilidad. Este último, denotado como ♥, se define como el momento más temprano en que el cliente encuentra una copia de su elemento de datos solicitado. Un elemento de datos está disponible inmediatamente cuando reside en el almacenamiento local del dispositivo AutoMata que atiende a la solicitud. Debido a las restricciones de almacenamiento, un AutoMata puede no almacenar todo el repositorio. En este caso, la latencia de disponibilidad es el tiempo desde que el usuario emite una solicitud hasta que el AutoMata encuentra otro coche que contiene el elemento de datos referenciado. (Los términos coche y AutoMata se utilizan indistintamente en este estudio.) La latencia de disponibilidad para un artículo es una función de la ubicación actual del cliente, su ruta de destino y viaje, el modelo de movilidad de los vehículos equipados con AutoMata, el número de réplicas construidas para los diferentes elementos de datos, y la colocación de réplicas de elementos de datos a través de los vehículos. Un método para mejorar la latencia de disponibilidad es emplear portadores de datos que transportan una réplica del elemento de datos solicitado desde un coche servidor que lo contiene a un cliente que lo solicitó. Estos portadores de datos se denominan zebroids. La selección de cebroides es facilitada por la arquitectura de dos niveles. El plano de control permite la recopilación centralizada de información en un despachador presente en una estación base.2 Algunos ejemplos de control en1 Sin pérdida de generalidad, el término elemento de datos puede ser medios tradicionales como texto o medios continuos como un clip de audio o vídeo. 2 Puede haber despachadores desplegados en un subconjunto de las estaciones de base para la tolerancia a fallos y la robustez. Los distribuidores entre estaciones de base pueden comunicarse a través de la infraestructura cableada. 75 formación son actualmente solicitudes activas, ruta de viaje de los clientes y sus destinos, y caminos de los otros coches. Para cada solicitud del cliente, el despachador puede elegir un conjunto de portadores z que colaboran para transferir un elemento de datos de un servidor a un cliente (z-relay zebroids). Aquí, z es el número de zebroids tales que 0 ≤ z < N, donde N es el número total de coches. Cuando z = 0 no hay portadores, lo que requiere un servidor para entregar el elemento de datos directamente al cliente. De lo contrario, el equipo de relé elegido de z zebroids se entregará los datos de forma transitoria unos a otros para llegar al cliente, reduciendo así la latencia de la disponibilidad (para más detalles, véase la sección 3.1). Para aumentar la robustez, el despachador puede emplear múltiples equipos de relé de portadoras z para cada solicitud. Esto puede ser útil en escenarios en los que el despachador tiene menor precisión de predicción en la información sobre las rutas de los coches. Por último, las restricciones de almacenamiento pueden requerir que un zebroid desaloje elementos de datos existentes de su almacenamiento local para acomodar el elemento solicitado por el cliente. En este estudio, se cuantifican los siguientes factores principales que afectan a la latencia de la disponibilidad en presencia de zebroideos: (i) tamaño del repositorio de datos, (ii) densidad del coche, (iii) capacidad de almacenamiento por coche, (iv) duración del viaje del cliente, (v) esquema de reemplazo empleado por los zebroideos, y (vi) exactitud de las predicciones de la ruta del coche. Para un subconjunto significativo de estos factores, abordamos algunas preguntas clave relativas al uso de zebroids tanto a través del análisis como de simulaciones extensas. Nuestras principales conclusiones son las siguientes. Una política de sustitución aleatoria ingenua empleada por los zebroids muestra un rendimiento competitivo en términos de latencia de disponibilidad. Con esta política, se pueden obtener mejoras sustanciales en la latencia con zebroids con un mínimo de gastos generales de reemplazo. En escenarios más prácticos, donde el despachador tiene información inexacta sobre las rutas del coche, los zebroids continúan proporcionando mejoras de la latencia. Un resultado sorprendente es que los cambios en la popularidad de los ítems de datos no impactan las ganancias de latencia obtenidas con una simple instanciación de z-relay zebroids llamados cebroids uno-instantáneos (ver Sección 3.1). Este estudio sugiere una serie de direcciones interesantes a seguir para obtener una mejor comprensión del diseño de sistemas basados en el portador que mejoran la latencia de disponibilidad. Trabajo relacionado: La replicación en redes móviles ad-hoc ha sido un tema ampliamente estudiado [11, 12, 15]. Sin embargo, ninguno de estos estudios emplea zebroids como portadores de datos para reducir la latencia de las solicitudes de los clientes. Varios estudios novedosos e importantes como ZebraNet [13], DakNet [14], Data Mules [16], Message Ferries [20] y Seek and Focus [17] han analizado factores que afectan a redes conectadas intermitentemente consistentes en portadores de datos similares en espíritu a los zebroideos. Los factores considerados por cada estudio son dictados por su supuesto entorno y aplicación diana. Una característica novedosa de nuestro estudio es el impacto en la latencia de disponibilidad para un repositorio de datos dado de elementos. En [9] se puede obtener una descripción detallada de las obras relacionadas. El resto de este documento está organizado de la siguiente manera. En la sección 2 se ofrece una visión general de la terminología junto con los factores que influyen en la latencia de la disponibilidad en presencia de zebroides. En la sección 3 se describe cómo se pueden emplear los cebroides. En la sección 4 se proporciona información detallada sobre la metodología de análisis empleada para captar el desempeño con los zebroids. En la sección 5 se describen los detalles del entorno de simulación utilizado para la evaluación. La sección 6 recoge las preguntas clave examinadas en este estudio y las responde a través de análisis y simulaciones. Por último, en la sección 7 se presentan breves conclusiones y futuras orientaciones de la investigación. 2. SINOPSIS Y TERMINOLOGÍA La Tabla 1 resume la notación de los parámetros utilizados en el artículo. A continuación introducimos algunas terminologías utilizadas en el artículo. Asumir una red de coches N AutoMata equipados, cada uno con capacidad de almacenamiento de α bytes. La capacidad total de almacenamiento del sistema es ST = N. Hay elementos de datos T en la base de datos, cada uno con parámetros de base de datos T Número de elementos de datos. Si Tamaño del ítem de datos i fi Frecuencia de acceso al ítem de datos i. Parámetros de replicación Ri Frecuencia normalizada de acceso al ítem de datos i ri Número de réplicas para ítem de datos i n Caracteriza un esquema de replicación particular. Latencia media de la disponibilidad del elemento de datos i Łagg Latencia agregada de la disponibilidad, N Número de dispositivos AutoMata en el sistema. α Capacidad de almacenamiento por AutoMata. γ Duración del viaje del cliente AutoMata. ST Capacidad total de almacenamiento del sistema AutoMata, ST = N · α. Cuadro 1: Términos y sus definiciones tamaño Si. La frecuencia de acceso al ítem de datos i se denota como fi, con T j=1 fj = 1. Deje que la duración del viaje del cliente AutoMata en consideración sea γ. Ahora definimos la frecuencia normalizada de acceso al ítem de datos i, denotado por Ri, como: Ri = (fi)n T j=1(fj)n ; 0 ≤ n ≤ فارسى (1) El exponente n caracteriza una técnica de replicación particular. Un esquema de replicación de raíz cuadrada se realiza cuando n = 0.5 [5]. Esto sirve como la línea base para la comparación con el caso cuando se despliegan zebroids. Ri se normaliza a un valor entre 0 y 1. El número de réplicas para el dato i, denotado como ri, es: ri = min (N, max (1, Ri·N Si )). Esto capta el caso cuando al menos una copia de cada elemento de datos debe estar presente en la red ad-hoc en todo momento. En los casos en que un elemento de datos se puede perder de la red ad-hoc, esta ecuación se convierte en ri = min (N, max (0, Ri·N Si )). En este caso, es posible que sea necesario satisfacer una solicitud para el elemento de datos perdido mediante la obtención del elemento desde un servidor remoto. La latencia de disponibilidad para un elemento de datos i, denotado como i, se define como la primera vez en la que un cliente AutoMata encontrará la primera réplica del elemento accesible a él. Si esta condición no se cumple, entonces se establece a i. Esto indica que el elemento de datos I no estaba disponible para el cliente durante su viaje. Tenga en cuenta que como hay al menos una réplica en el sistema para cada elemento de datos i, al establecer γ a un gran valor nos aseguramos de que los clientes soliciten cualquier elemento de datos i será satisfecho. Sin embargo, en la mayoría de las circunstancias prácticas γ puede no ser tan grande como para encontrar cada elemento de datos. Estamos interesados en la latencia de disponibilidad observada en todos los datos. Por lo tanto, aumentamos la latencia media de disponibilidad para cada ítem de datos i con su fi para obtener la siguiente latencia ponderada de disponibilidad (?agg) métrica:?agg = T i=1?i · fi A continuación, presentamos nuestro enfoque de solución describiendo cómo se seleccionan los zebroids. 3. ENFOQUE DE SOLUCIÓN 3.1 Zebroids Cuando un cliente hace referencia a un elemento de datos que falta en su almacenamiento local, el despachador identifica todos los coches con una copia del elemento de datos como servidores. A continuación, el despachador obtiene las rutas futuras de todos los coches para una duración de tiempo finito equivalente al tiempo máximo que el cliente está dispuesto a esperar a que su solicitud sea atendido. Utilizando esta información, el despachador programa la ruta de entrega más rápida desde cualquiera de los servidores al cliente utilizando cualquier otro coche como transportistas intermedios. Por lo tanto, determina el conjunto óptimo de decisiones de reenvío 76 que permitirá que el elemento de datos se entreguen al cliente en el mínimo de tiempo. Tenga en cuenta que la latencia a lo largo de la ruta de entrega más rápida que emplea un equipo de relé de z zebroids es similar a la obtenida con el encaminamiento epidémico [19] bajo los supuestos de almacenamiento infinito y ninguna interferencia. Una simple instanciación de z-relay zebroids se produce cuando z = 1 y la solicitud de los clientes desencadena una transferencia de una copia del elemento de datos solicitado de un servidor a un zebroid en su vecindad. Tal zebroideo se denomina cebroide uniinstantáneo. En algunos casos, el expedidor podría tener información inexacta sobre las rutas de los coches. Por lo tanto, un zebroid programado sobre la base de esta información inexacta puede no reunirse con su cliente objetivo. Para minimizar la probabilidad de tales escenarios, el despachador puede programar múltiples zebroids. Esto puede acarrear gastos generales adicionales debido a la utilización redundante de recursos para obtener las mismas mejoras de latencia. El tiempo necesario para transferir un elemento de datos de un servidor a un zebroid depende de su tamaño y del ancho de banda del enlace disponible. Con elementos de datos pequeños, es razonable suponer que este tiempo de transferencia es pequeño, especialmente en presencia del plano de datos de alto ancho de banda. Los elementos de datos grandes se pueden dividir en trozos más pequeños que permiten al despachador programar uno o más zebroids para entregar cada trozo a un cliente de una manera oportuna. Esta sigue siendo una dirección de investigación futura. Inicialmente, el número de réplicas para cada ítem de datos puede ser calculado usando la Ecuación 1. Este esquema calcula el número de réplicas de datos en función de su popularidad. Es estática porque el número de réplicas en el sistema no cambia y no se realizan reemplazos. Por lo tanto, esto se conoce como el ambiente de los nozebroids. Cuantificamos el desempeño de las diversas políticas de reemplazo con referencia a esta línea base que no emplea zebroids. Uno puede asumir una fase de arranque en frío, donde inicialmente sólo una o pocas copias de cada elemento de datos existen en el sistema. Muchas ranuras de almacenamiento de los coches pueden estar desocupados. Cuando los coches se encuentran entre sí, construyen nuevas réplicas de algunos elementos de datos seleccionados para ocupar los huecos vacíos. El procedimiento de selección puede consistir en elegir los datos de manera uniforme al azar. Nuevas réplicas se crean siempre y cuando un coche tiene un cierto umbral de su almacenamiento desocupado. Eventualmente, la mayoría de la capacidad de almacenamiento de un coche se agotará. 3.2 Políticas de reemplazo basadas en el operador Las políticas de reemplazo consideradas en este documento son reactivas ya que una sustitución se produce sólo en respuesta a una solicitud emitida para un determinado elemento de datos. Cuando el almacenamiento local de un zebroid está completamente ocupado, necesita reemplazar uno de sus elementos existentes para llevar el elemento de datos solicitado por el cliente. Para ello, el zebroid debe seleccionar a un candidato apropiado para el desalojo. Este proceso de decisión es análogo al encontrado en la paginación del sistema operativo donde el objetivo es maximizar la relación de acceso a la caché para evitar el retraso del acceso al disco [18]. Las políticas de reemplazo basadas en transportistas empleadas en nuestro estudio son las menos usadas recientemente (LRU), las menos usadas con frecuencia (LFU) y las aleatorias (donde un candidato de desalojo es elegido uniformemente al azar). Hemos considerado variantes locales y globales de las políticas LRU/LFU que determinan si el conocimiento local o global de los contenidos de los coches conocidos en el expedidor se utiliza para la decisión de desalojo en un zebroid (ver [9] para más detalles). Las pólizas de sustitución entrañan los siguientes gastos generales. En primer lugar, la complejidad asociada a la aplicación de una política. En segundo lugar, el ancho de banda utilizado para transferir una copia de un elemento de datos de un servidor al zebroid. En tercer lugar, el número medio de reemplazos realizados por los zebroides. Tenga en cuenta que en el caso de no cebroides no se incurre en gastos generales. Las métricas consideradas en este estudio son la latencia de la disponibilidad agregada, Tenga en cuenta que los despachadores con la ayuda del plano de control pueden asegurarse de que no se pierda ningún elemento de datos del sistema. En otras palabras, al menos una réplica de cada elemento de datos se mantiene en la red ad-hoc en todo momento. En tales casos, aunque un coche puede encontrarse con un cliente solicitante antes que otros servidores, si su almacenamiento local contiene elementos de datos con sólo una copia en el sistema, entonces tal coche no se elige como un zebroid. 4. METODOLOGÍA DE ANÁLISIS Aquí presentamos la metodología de evaluación analítica y algunas aproximaciones como ecuaciones de forma cerrada que capturan las mejoras en la latencia de disponibilidad que se pueden obtener tanto con cebros oneinstantáneos como con z-relay. Primero, presentamos algunos preliminares de nuestra metodología de análisis. • Que N sea el número de coches en la red que realizan una caminata aleatoria en 2D en un toro de G× G. Un coche adicional sirve como un cliente que entrega un total de N + 1 coches. Este modelo de movilidad se ha utilizado ampliamente en la literatura [17, 16] principalmente porque es susceptible de análisis y proporciona una base de referencia para comparar el rendimiento de otros modelos de movilidad. Además, esta clase de modelos de movilidad markoviana se ha utilizado para modelar los movimientos de los vehículos [3, 21]. • Asumimos que todos los coches comienzan desde la distribución estacionaria y realizan caminatas aleatorias independientes. Aunque para escenarios de densidad escasa, la suposición de independencia se mantiene, ya no es válido cuando N se aproxima a G. • Deje que el tamaño del repositorio de ítems de datos de interés sea T. Además, el ítem de datos i tiene réplicas ri. Esto implica que los coches ri, identificados como servidores, tienen una copia de este elemento de datos cuando el cliente solicita el elemento i. Todos los resultados de análisis presentados en esta sección se obtienen asumiendo que el cliente está dispuesto a esperar el tiempo necesario para que su solicitud sea satisfecha (duración del viaje sin límite γ = ­). Con el modelo de movilidad al azar en un torso 2D, hay una garantía de que mientras haya al menos una réplica del elemento de datos solicitado en la red, el cliente se encontrará con esta réplica [2]. Las extensiones al análisis que también consideran las duraciones del viaje finito se pueden obtener en [9]. Considere un escenario en el que no se emplean zebroids. En este caso, la latencia de disponibilidad esperada para el ítem de datos es el tiempo de reunión esperado de la caminata aleatoria realizada por el cliente con cualquiera de las caminatas aleatorias realizadas por los servidores. Aldous et al. [2] muestran que el tiempo de reunión de dos caminatas aleatorias en tal entorno puede modelarse como una distribución exponencial con la media C = c · G · log G, donde la constante c 0,17 para G ≥ 25. El tiempo de reunión, o equivalente a la latencia de la disponibilidad de i, para el cliente que solicita datos i es el momento hasta que se encuentre con cualquiera de estas réplicas ri por primera vez. Se trata también de una distribución exponencial con el siguiente valor esperado (obsérvese que esta formulación es válida sólo para casos escasos cuando G >> ri): فارسىi = cGlogG ri La latencia de disponibilidad agregada sin emplear zebroids es entonces esta expresión promediada sobre todos los ítems de datos, ponderada por su frecuencia de acceso: فارسىagg(no − zeb) = T i=1 fi Por otra parte, esta réplica se genera en el paso de tiempo cuando el cliente emite la solicitud. Que Nc i sea el número total esperado de nodos que están en la misma celda que cualquiera de los servidores ri. Luego, tenemos Nc i = (N − ri) · (1 − (1 − 1 G )ri ) (3) En el modelo analítico, suponemos que Nc i nuevas réplicas se crean, de modo que el número total de réplicas se aumenta a ri + Nc i. La latencia de disponibilidad se reduce ya que es más probable que el cliente cumpla con una réplica anterior. La latencia agregada de disponibilidad esperada en el caso de los cebroides uno-instantáneos es dada por, agg(zeb) = T i=1 fi · c · G · log G ri + Nc i = T i=1 fi · C ri + Nc i (4) Tenga en cuenta que al obtener esta expresión, para facilitar el análisis, hemos asumido que las nuevas réplicas comienzan Así trata a todos los portadores de Nc i de forma independiente, al igual que los servidores originales ri. Como mostraremos a continuación en comparación con las simulaciones, esta aproximación proporciona un límite superior a las mejoras que se pueden obtener porque da lugar a una menor latencia esperada en el cliente. Cabe señalar que el procedimiento mencionado anteriormente producirá una latencia similar a la empleada por un expedidor que emplee cebroides oneinstantáneos (véase la sección 3.1). Dado que el despachador es consciente de todos los movimientos futuros del coche que sólo transferiría el elemento de datos solicitado en un único zebroid, si determina que el zebroid se reunirá con el cliente antes que cualquier otro servidor. Este zebroid seleccionado está incluido en las nuevas réplicas de Nc i. 4.2 z-relay zebroids Para calcular la latencia de disponibilidad esperada con z-relay zebroids, utilizamos un análogo de problema de coloración similar a un enfoque utilizado por Spyropoulos et al. [17]. En [9] se dan detalles del procedimiento para obtener una expresión de forma cerrada. La latencia de disponibilidad agregada (agg) con z-relay zebroids es dada por, agg(zeb) = T i=1 [fi · C N + 1 · 1 N + 1 − ri · (N · log N ri − log (N + 1 − ri))] (5) 5. METODOLOGÍA DE SIMULACIÓN El entorno de simulación considerado en este estudio se compone de vehículos como automóviles que llevan una fracción del repositorio de datos. Un parámetro de precisión de predicción proporciona inherentemente una cierta garantía probabilística sobre la confianza de las predicciones de ruta del automóvil conocidas en el despachador. Un valor del 100% implica que las rutas exactas de todos los coches se conocen en todo momento. Un valor del 70% para este parámetro indica que las rutas previstas para los coches coincidirán con las reales con probabilidad 0.7. Tenga en cuenta que esta probabilidad se extiende a través de las rutas del coche durante toda la duración del viaje. Ahora proporcionamos los preliminares del estudio de simulación y luego describimos los parámetros de configuración utilizados en nuestros experimentos. • Similar a la metodología de análisis, el mapa utilizado es un toro 2D. Un modelo de movilidad Markov que representa una caminata aleatoria 2D imparcial en la superficie del toro describe el movimiento de los coches a través de este toro. • Cada cuadrícula/célula es un estado único de esta cadena Markov. En cada ranura de tiempo, cada coche hace una transición de una celda a cualquiera de sus 8 celdas vecinas. La transición es una función de la ubicación actual del coche y una matriz de transición de probabilidad Q = [qij] donde qij es la probabilidad de transición del estado i al estado j. Solo los coches equipados con AutoMata dentro de la misma celda pueden comunicarse entre sí. • Los parámetros γ,  han sido discretizados y expresados en términos del número de franjas horarias. • Un dispositivo AutoMata no mantiene más de una réplica de un elemento de datos. Esto se debe a que las réplicas adicionales ocupan el almacenamiento sin proporcionar beneficios. • Los cebroides de relé z o uno instantáneos pueden ser empleados por solicitud del cliente para mejorar la latencia. • A menos que se mencione lo contrario, se supone que el parámetro de precisión de la predicción es del 100%. Esto se debe a que este estudio pretende cuantificar el efecto de un gran número de parámetros individualmente sobre la latencia de la disponibilidad. Aquí, establecemos el tamaño de cada elemento de datos, Si, para ser 1. α representa el número de ranuras de almacenamiento por AutoMata. Cada ranura de almacenamiento almacena un elemento de datos. γ representa la duración del viaje de los clientes en términos del número de franjas horarias. Por lo tanto, los posibles valores de latencia de disponibilidad están entre 0 y γ.  se define como el número de franjas horarias después de lo cual un dispositivo cliente AutoMata encontrará una réplica del elemento de datos por primera vez. Si una réplica para el elemento de datos solicitado fue encontrado por el cliente en la primera celda, a continuación, se establece  = 0. Si se trata de un elemento de datos solicitado, el cliente no encontró ninguna copia del elemento de datos solicitado durante todo su viaje. En todas nuestras simulaciones, para la ilustración consideramos un 5 × 5 2D-torus con γ fijado a 10. Nuestros experimentos indican que las tendencias en la escala de resultados a mapas de mayor tamaño. Simulamos una distribución sesgada de acceso a los datos T que obedece a la ley Ziffs con una media de 0.27. Esta distribución corresponde a la venta de entradas de cine en los Estados Unidos [6]. Empleamos un esquema de replicación que asigna réplicas para un elemento de datos en función de la raíz cuadrada de la frecuencia de acceso de ese elemento. Se muestra que el esquema de replicación de raíz cuadrada tiene un rendimiento de latencia competitivo en un gran espacio de parámetros [8]. Las réplicas de elementos de datos se distribuyen uniformemente entre los dispositivos AutoMata. Esto sirve como el caso de la línea base sin cebros. El esquema de raíz cuadrada también proporciona la distribución de réplica inicial cuando se emplean zebroids. Tenga en cuenta que los reemplazos realizados por los zebroids causarán cambios en la distribución de réplica de ítems de datos. Las solicitudes generadas según la distribución Zipf se emiten una a la vez. El coche cliente que emite la solicitud se elige de una manera redonda-robina. Después de un período máximo de γ, se registra la latencia con que se encontró esta solicitud. En todos los resultados de simulación, cada punto es un promedio de 200.000 solicitudes. Además, los intervalos de confianza del 95% determinados para los resultados son bastante ajustados para las métricas de latencia y los gastos generales de reemplazo. Por lo tanto, sólo los presentamos para la métrica que captura la mejora porcentual de la latencia con respecto al caso de no-zebroides. 6. RESULTADOS En esta sección, describimos nuestros resultados de evaluación donde se abordan las siguientes preguntas clave. Con una amplia selección de esquemas de reemplazo disponibles para un zebroid, ¿cuál es su efecto en la latencia de disponibilidad? Una pregunta más central es: Do zebroids provide 78 0 20 40 60 80 100 1.5 2 2.5 3 3.5 Número de coches Latencia de disponibilidad agregada (­agg ) lru_global lfu_global lru_local lfu_local random Figura 1: La figura 1 muestra la latencia de disponibilidad al emplear cebroids uno-instantáneos en función de los valores (N,α), cuando el ¿Cuáles son los gastos generales asociados en el empleo de estos zebroides? ¿Qué sucede con estas mejoras en escenarios donde un despachador puede tener información imperfecta sobre las rutas del automóvil? ¿Cuáles son las compensaciones inherentes entre la densidad del automóvil y el almacenamiento por automóvil en lo que respecta a su efecto combinado e individual sobre la latencia de la disponibilidad en presencia de zebroids? Presentamos análisis simples y simulaciones detalladas para proporcionar respuestas a estas preguntas, así como para obtener información sobre el diseño de sistemas basados en operadores. 6.1 ¿Cómo funciona un esquema de sustitución empleado por un latencia de disponibilidad de impacto zebroideo? Para ilustrarlo, presentamos experimentos de escala en los que se emplean cebroides oneinstantáneos (ver Figura 1). Por escala, queremos decir que α y N se cambian proporcionalmente para mantener el almacenamiento total del sistema, ST, constante. Aquí, T = 50 y ST = 200. Elegimos los siguientes valores de (N,α) = {(20,10), (25,8), (50,4), (100,2)}. La cifra indica que un plan de sustitución al azar muestra un rendimiento competitivo. Esto se debe a varias razones. Recuerde que la distribución de réplica inicial se establece según el esquema de replicación de raíz cuadrada. El esquema de reemplazo aleatorio no altera esta distribución ya que hace que los reemplazos ciegos a la popularidad de un elemento de datos. Sin embargo, los reemplazos causan una reorganización dinámica de los datos a fin de atender mejor a la solicitud activa actual. Además, el patrón de movilidad de los coches es aleatorio, por lo que las ubicaciones desde las que los clientes emiten las solicitudes también son aleatorias y no se conocen a priori en el despachador. Estas conclusiones son importantes porque una política de sustitución aleatoria puede aplicarse de manera descentralizada. Los esquemas rru-global y lfu-global proporcionan un rendimiento de latencia que es peor que aleatorio. Esto se debe a que estas políticas desarrollan rápidamente una preferencia por los elementos de datos más populares, creando así un mayor número de réplicas para ellos. Durante el desalojo, los datos más populares casi nunca se seleccionan como candidatos de reemplazo. En consecuencia, hay menos réplicas para los artículos menos populares. Por lo tanto, la distribución inicial del elemento de datos replica cambios de raíz cuadrada a que se asemeja a replicación lineal. El mayor número de réplicas de las partidas de datos populares proporciona beneficios adicionales marginales, mientras que el menor número de réplicas de las demás partidas de datos perjudica el rendimiento de latencia de estas políticas mundiales. Los esquemas lfu-local y lru-local tienen un rendimiento similar al aleatorio ya que no tienen suficiente historial de solicitudes de datos locales. Especulamos que el desempeño de estas políticas locales se acercará al de sus variantes globales para una historia suficientemente grande de solicitudes de ítems de datos. Debido al rendimiento competitivo demostrado por una política aleatoria, para el resto del documento, presentamos el rendimiento de los zebroids que emplean una política de reemplazo aleatorio. 6.2 ¿Proporcionan los zebroids mejoras significativas en la latencia de disponibilidad? Encontramos que en muchos escenarios que emplean zebroids proporciona mejoras sustanciales en la latencia de la disponibilidad. 6.2.1 Análisis Primero consideramos el caso de los cebroides uno-instantáneos. La Figura 2.a muestra la variación en Łagg en función de N para T = 10 y α = 1 con 10 × 10 toros usando la Ecuación 4. Los ejes x e y se dibujan a una escala de registro. En la figura 2.b se muestra la mejoría en % en el Agg obtenido con cebroides uniinstantáneos. En este caso, sólo el eje x se dibuja a una escala de registro. Para ilustrar, suponemos que los datos T son solicitados uniformemente. Inicialmente, cuando la red es escasa la aproximación analítica para mejoras en la latencia con zebroids, obtenida de las ecuaciones 2 y 4, coincide estrechamente con los resultados de la simulación. Sin embargo, a medida que N aumenta, la suposición de escasez para la que el análisis es válido, a saber, N+G, ya no es cierta. Por lo tanto, las dos curvas divergen rápidamente. El punto en el que las dos curvas se alejan unas de otras corresponde a un valor de Además, como se mencionó anteriormente, el análisis proporciona un límite superior a las mejoras de la latencia, ya que trata de las réplicas recién creadas dadas por Nc i de forma independiente. Sin embargo, estas réplicas de Nc i comienzan desde la misma celda que una de las réplicas de servidor ri. Finalmente, el análisis captura un escenario oneshot donde dada una distribución inicial de réplica de datos, se calcula la latencia de disponibilidad. Las nuevas réplicas creadas no afectan las solicitudes futuras del cliente. Debido a las limitaciones de espacio, aquí, se resumen las observaciones en el caso de z-relay zebroids se emplean. El lector interesado puede obtener más detalles en [9]. Observaciones similares, como el caso cebroideo uniinstantaneo, se aplican ya que las curvas de simulación y análisis comienzan de nuevo a divergir cuando los supuestos de análisis ya no son válidos. Sin embargo, la observación clave aquí es que la mejora de la latencia con z-relay zebroids es significativamente mejor que el caso de cebroids uno-instantáneos, especialmente para escenarios de almacenamiento más bajos. Esto se debe a que en escenarios escasos, los traspasos transitivos entre los zebroides crean un mayor número de réplicas para el ítem de datos solicitado, lo que produce una menor latencia de disponibilidad. Por otra parte, también se observa que la curva de validación de simulación para las mejoras en Łagg con z-relay zebroids se aproxima a la del caso cebroideo uniinstantánea para un almacenamiento más alto (valores de N más altos). Esto se debe a que los cebroides uno-instantáneos son un caso especial de z-relay zebroides. 6.2.2 Simulación Realizamos simulaciones para examinar todo el espectro de almacenamiento obtenido cambiando la densidad del vehículo N o el almacenamiento por coche α para capturar también escenarios en los que no se mantienen las hipótesis de escasez para las que el análisis es válido. Separamos el efecto de N y α capturando la variación de N manteniendo constante α (caso 1) y viceversa (caso 2) tanto con z-relay y cebroides uno-instantáneos. Aquí, establecemos el tamaño del repositorio como T = 25. En el gráfico 3 figura el caso 1 mencionado anteriormente. Se observan tendencias similares con el caso 2, en [9] se dispone de una descripción completa de esos resultados. Con la Figura 3.b, manteniendo constante α, la densidad del coche aumenta inicialmente tiene mayores beneficios de latencia porque el aumento de N introduce más zebroids en el sistema. A medida que N se incrementa aún más, • reduce porque el almacenamiento total en el sistema sube. En consecuencia, el número de réplicas por elemento de datos sube aumentando así el número de servidores 79. Por lo tanto, la política de reemplazo no puede encontrar un zebroid tan a menudo para transportar el elemento de datos solicitado al cliente antes que cualquiera de los servidores. Por otro lado, el aumento del número de servidores beneficia al caso de no-zebroids al reducir a Agg. El efecto neto da lugar a una reducción de los valores más grandes de N. 10 1 10 2 10 3 10 −1 10 0 10 1 10 2 Número de automóviles no-zebroidsanal no-zebroids sim one-instantaneoussim Agregación Disponibilidad Latencia (­agg ) 2.a) Agg 10 1 10 2 10 3 0 10 20 40 50 60 70 80 90 100 Número de automóviles % Mejora Las tendencias mencionadas anteriormente son similares a las obtenidas del análisis. Sin embargo, algo contra-intuitivamente con almacenamiento relativamente más alto del sistema, z-relay zebroids proporcionan mejoras ligeramente más bajas en la latencia en comparación con uno-instantaneous zebroids. Especulamos que esto se debe a las diferentes distribuciones de réplicas de ítems de datos impuestas por ellos. Tenga en cuenta que los reemplazos realizados por los zebroids causan fluctuaciones en estas distribuciones de réplica que pueden afectar futuras solicitudes de clientes. Actualmente estamos explorando opciones adecuadas de parámetros que pueden capturar estas distribuciones de réplicas cambiantes. 6.3 ¿Cuáles son los gastos generales derivados de la mejora de la latencia de los zebroideos? Encontramos que las mejoras en la latencia con zebroids se obtienen con un mínimo de reemplazo de los gastos generales (< 1 por solicitud del cliente). 6.3.1 Análisis Con cebroides uniinstantáneos, para cada solicitud de cliente se emplea un máximo de un cebroide para mejorar la latencia. Por lo tanto, los gastos generales de sustitución por solicitud del cliente pueden ascender a un máximo de uno. Recordemos que para calcular la latencia con una latencia instantánea 0 50 100 150 200 250 350 400 0 1 2 3 4 5 6 Número de coches Latencia de disponibilidad agregada (?agg ) no-zebroids one-instantaneous z-relays 3.a 0 50 100 150 200 250 300 350 400 0 10 20 30 40 50 60 Número de coches % Mejora en?agg wrt no-zebro Ahora un reemplazo sólo se incumple si una de estas réplicas de Nc i de nueva creación se reúne con el cliente antes que cualquiera de los servidores de ri. Que Xri y XNc i respectivamente sean variables aleatorias que capturen el tiempo mínimo hasta que cualquiera de las réplicas de ri y Nc i cumpla con el cliente. Dado que Xri y XNc i se supone que son independientes, por la propiedad de variables aleatorias distribuidas exponencialmente tenemos, Overhead/request = 1 · P(XNc i < Xri ) + 0 · P(Xri ≤ XNc i ) (6) Overhead/request = ri C ri C + Nc i C = ri ri + Nc i (7) Sin embargo, si N  es constante entonces el aumento de las causas N α 80 0 20 40 60 80 100 0 0,05 0,15 0,20 0,25 0,35 0,40 0,45 0,5 Número de coches cebroides instantáneos número medio de reemplazos por solicitud (N=20,α=10) (N=25,α=8) (N=50,α=4) (N=100,α=2) Figura 4: La figura 4 captura el reemplazo de Esto implica que se incurre en un aumento de los gastos generales de sustitución para valores N y α más altos. Por otra parte, cuando ri = N, esto significa que cada coche tiene una réplica de elemento de datos i. Por lo tanto, no se emplean zebroids cuando se solicita este artículo, lo que da lugar a un gasto general/solicitud para este artículo como cero. A continuación, presentamos resultados de simulación que validan nuestra hipótesis de análisis para los gastos generales asociados con el despliegue de cebroides uno-instantáneos. 6.3.2 Simulación En la figura 4 se muestra la superficie de repuesto con cebroides uno-instantáneos cuando se varían (N,α) manteniendo constante el almacenamiento total del sistema. Las tendencias mostradas por la simulación concuerdan con las previstas por el análisis anterior. Sin embargo, el almacenamiento total del sistema puede ser cambiado ya sea por la densidad variable del coche (N) o el almacenamiento por coche (α). Debido a tendencias similares, aquí presentamos el caso cuando α se mantiene constante y N es variada (Figura 5). Referimos al lector a [9] para el caso cuando α es variado y N se mantiene constante. Presentamos un argumento intuitivo para el comportamiento de las curvas superiores de reemplazo de la solicitud. Cuando el almacenamiento es extremadamente escaso de modo que sólo existe una réplica por elemento de datos en la red AutoMata, el número de reemplazos realizados por los zebroids es cero ya que cualquier reemplazo causará que un elemento de datos se pierda del sistema. El despachador garantiza que no se pierda ningún elemento de datos del sistema. En el otro extremo del espectro, si el almacenamiento se vuelve tan abundante que α = T entonces todo el repositorio de elementos de datos se puede replicar en cada coche. El número de reemplazos es de nuevo cero ya que cada solicitud puede ser satisfecha localmente. Un escenario similar ocurre si N se aumenta a un valor tan grande que otro coche con el elemento de datos solicitado siempre está disponible en las proximidades del cliente. Sin embargo, hay un espectro de almacenamiento en el medio donde los reemplazos por los zebroides programados dan lugar a mejoras en el Agg (ver Figura 3). Por otra parte, observamos que para escenarios de almacenamiento escasos, las mejoras más altas con z-relay zebroids se obtienen al costo de un aumento de los gastos generales de reemplazo en comparación con el caso de cebroids uno-instantáneos. Esto se debe a que en el caso anterior, cada uno de estos z zebroids seleccionados a lo largo de la ruta de latencia más baja al cliente necesita realizar un reemplazo. Sin embargo, los gastos generales de sustitución son todavía inferiores a 1 lo que indica que en promedio se necesita menos de un reemplazo por solicitud del cliente, incluso cuando se emplean z-relay zebroids. 0 50 100 150 200 250 300 350 400 0 0,1 0,2 0,3 0,4 0,6 0,7 0,8 0,9 1 Número de coches z-reemplaza uno-instantánea Número medio de reemplazos por solicitud Figura 5: La figura 5 muestra los gastos generales de reemplazo con cebroide para los casos en que N es diferente manteniendo α = 2. 10 20 30 40 50 60 70 80 90 100 0 0,5 1 1,5 2 2,5 3 3,5 4 Porcentaje de predicción no-zebroideos (N=50) uno-instantáneos (N=50) z-relés (N=50) no-zebroideos (N=200) uno-instantáneos (N=200) z-relés (N=200) Disponibilidad agregada Latencia ( 6.4 ¿Qué sucede con la latencia de la disponibilidad con zebroids en escenarios con inexactitudes en las predicciones de la ruta del coche? Encontramos que los zebroids continúan proporcionando mejoras en la latencia de la disponibilidad incluso con menor precisión en las predicciones de la ruta del coche. Utilizamos un único parámetro p para cuantificar la exactitud de las predicciones de la ruta del coche. 6.4.1 Análisis Dado que p representa la probabilidad de que una ruta del automóvil predicha por el expedidor coincida con la actual, por lo tanto, la latencia con los zebroideos puede ser aproximada por, 6.4.2 Simulación En la figura 6 se muestra la variación en el Agg en función de esta métrica de precisión de la predicción de ruta. Observamos una reducción suave en la mejora de 81 en Agg a medida que la métrica de precisión de predicción reduce. Para los zebroids que están programados pero no se reúnen con el cliente debido al error de predicción, etiquetamos tales reemplazos hechos por los zebroids como fallados. Se ve que los reemplazos fallidos aumentan gradualmente a medida que la precisión de la predicción se reduce. 6.5 ¿En qué condiciones se maximizan las mejoras en la latencia de disponibilidad con zebroids? Sorprendentemente, encontramos que las mejoras en la latencia obtenidas con cebroides uno-instantáneos son independientes de la distribución de entrada de la popularidad de los ítems de datos. 6.5.1 Análisis La diferencia fraccionaria (marcada en la letra ) en la latencia entre los cebroides no-zebroideos y los cebroides uno-instantáneos se obtiene a partir de las ecuaciones 2, 3 y 4 de la siguiente forma: T i=1 fi·C ri − T i=1 fi·C ri+(N−ri)·(1−(1− 1 G )ri Let α = 1, haciendo el almacenamiento total en el sistema ST = N. Suponiendo que la distribución de réplica inicial es según el esquema de replicación de raíz cuadrada, tenemos, ri = fi·N T j = 1 fj. Por lo tanto, obtenemos fi = K2 ·r2 i N2, donde K = T j=1 fj. Utilizando esto, junto con la aproximación (1 − x)n 1 − n · x para x pequeña, simplificamos la ecuación anterior para obtener, • = 1 − T i=1 ri 1+ N−ri G T i=1 ri Para determinar cuándo se maximizan las ganancias con cebroides uno-instantáneos, podemos enmarcar un problema de optimización de la siguiente manera: Maximizar •, sujeto a T i Con un esquema de replicación de raíz cuadrada, las mejoras obtenidas con cebroides uniinstantáneos son independientes de la distribución de popularidad de entrada de los ítems de datos. (Ver [9] para la prueba) 6.5.2 Simulación Realizamos simulaciones con dos diferentes distribución de frecuencias de ítems de datos: Uniforme y Zipfian (con media= 0.27). En ambos casos se obtienen mejoras similares de latencia con cebroides uniinstantáneos. Este resultado tiene importantes implicaciones. En casos con popularidad sesgada hacia ciertos ítems de datos, las mejoras agregadas en la latencia en todas las solicitudes de ítems de datos siguen siendo las mismas. Incluso en escenarios en los que la frecuencia de acceso a los datos cambia dinámicamente, los zebroids seguirán proporcionando mejoras similares en la latencia. 7. CONCLUSIONES Y FUTURAS DIRECCIONES DE INVESTIGACIÓN En este estudio, examinamos las mejoras en la latencia que se pueden obtener en presencia de transportistas que entregan un elemento de datos desde un servidor a un cliente. Se cuantificó la variación de la latencia de disponibilidad en función de un rico conjunto de parámetros como la densidad del coche, el almacenamiento por coche, el tamaño de la base de datos de título y las políticas de reemplazo empleadas por los zebroids. A continuación se resumen algunas direcciones clave de investigación en el futuro que pretendemos seguir. Para reflejar mejor la realidad nos gustaría validar las observaciones obtenidas de este estudio con algunos rastros de simulación del mundo real de movimientos vehiculares (por ejemplo usando CORSIM [1]). Esto también servirá como validación para la utilidad del modelo de movilidad Markov utilizado en este estudio. Actualmente estamos analizando el desempeño de los zebroids en un conjunto de datos del mundo real que comprende una red ad-hoc de autobuses que se mueven alrededor de un pequeño barrio en Amherst [4]. Los cebroides también se pueden utilizar para la entrega de datos que transportan información sensible al retraso con una determinada caducidad. Las extensiones a zebroids que satisfacen estos requisitos de aplicación presentan una dirección de investigación futura interesante. 8. AGRADECIMIENTOS Esta investigación fue apoyada en parte por una beca Annenberg y subvenciones NSF numeradas CNS-0435505 (NeTS NOSS), CNS-0347621 (CAREER), y IIS-0307908. 9. REFERENCIAS [1] Administración Federal de Carreteras. Simulación del corredor. Versión 5.1, http://www.ops.fhwa.dot.gov/trafficanalysistools/cors im.htm. [2] D. Aldous y J. Llena. Cadenas de markov reversibles y caminatas aleatorias en gráficos. En preparación. [3] A. Bar-Noy, I. Kessler y M. Sidi. Usuarios móviles: Para actualizar o no actualizar. En IEEE Infocom, 1994. [4] J. Burgess, B. Gallagher, D. Jensen, y B. Levine. MaxProp: Enrutamiento para redes tolerantes a perturbaciones basadas en vehículos. En IEEE Infocom, abril de 2006. [5] E. Cohen y S. Shenker. Estrategias de replicación en redes de pares no estructuradas. En SIGCOMM, 2002. [6] A. Dan, D. Dias, R. Mukherjee, D. Sitaram y R. Tewari. Buffering y Caching en servidores de vídeo a gran escala. En COMPCON, 1995. [7] S. Ghandeharizadeh, S. Kapadia, y B. Krishnamachari. PAVAN: Marco normativo para la disponibilidad de contenidos en las redes ad hoc de vehículos. En VANET, Nueva York, Nueva York, Estados Unidos, 2004. ACM Press. [8] S. Ghandeharizadeh, S. Kapadia, y B. Krishnamachari. Comparación de estrategias de replicación para la disponibilidad de contenido en redes C2P2. En MDM, mayo de 2005. [9] S. Ghandeharizadeh, S. Kapadia, y B. Krishnamachari. Una evaluación de la latencia de disponibilidad en redes de vehículos ad-hoc basadas en el portador. Informe técnico, Departamento de Ciencias de la Computación, Universidad del Sur de California, CENG-2006-1, 2006. [10] S. Ghandeharizadeh y B. Krishnamachari. C2p2: Una red inter pares para servicios de información de automóviles a petición. En Globe. IEEE, 2004. [11] T. Hara. Asignación eficaz de réplicas en redes ad-hoc para mejorar la accesibilidad de datos. En IEEE Infocom, 2001. [12] H. Hayashi, T. Hara, y S. Nishio. Un método de asignación de réplica Adaptarse a los cambios de topología en redes ad-hoc. En DEXA, 2005. [13] P. Juang, H. Oki, Y. Wang, M. Martonosi, L. Peh, y D. Rubenstein. Computación energéticamente eficiente para el seguimiento de vida silvestre: compensaciones de diseño y experiencias tempranas con ZebraNet. Silgarch Comput. Archit. Noticias, 2002. [14] A. Pentland, R. Fletcher y A. Hasson. DakNet: Repensar la conectividad en las naciones en desarrollo. Computadora, 37(1):78-83, 2004. [15] F. Sailhan y V. Issarny. Caché cooperativo en redes ad-hoc. En MDM, 2003. [16] R. Shah, S. Roy, S. Jain y W. Brunette. Mulas de datos: Modelado y análisis de una arquitectura de tres niveles para redes de sensores escasas. Elsevier ad-hoc Networks Journal, 1o de septiembre de 2003. [17] T. Schiropoulos, K. Psounis y C. Raghavendra. Enrutamiento de una sola copia en redes móviles conectadas intermitentemente. En SECON, abril de 2004. [18] A. Tanenbaum. Sistemas operativos modernos, 2a edición, capítulo 4, sección 4.4. Prentice Hall, 2001. [19] A. Vahdat y D. Becker. Ruta epidémica para redes ad-hoc parcialmente conectadas. Informe técnico, Departamento de Informática, Universidad de Duke, 2000. [20] W. Zhao, M. Ammar, y E. Zegura. Un enfoque de ferriing de mensajes para la entrega de datos en redes móviles ad-hoc escasas. En MobiHoc, págs. 187 a 198, Nueva York, NY, Estados Unidos, 2004. ACM Press. [21] M. Zonoozi y P. Dassanayake. Modelado de Movilidad de Usuario y Caracterización del Patrón de Movilidad. Revista IEEE sobre áreas seleccionadas en las comunicaciones, 15:1239-1252, septiembre de 1997. 82 ",
            "error": []
        },
        "automaton": {
            "translated_key": [],
            "translated_annotated_text": "Una evaluación de la latencia de disponibilidad en redes ad hoc vehiculares basadas en portador Shahram Ghandeharizadeh Dept of Computer Science Univ of Southern California Los Angeles, CA 90089, USA shahram@usc.edu Shyam Kapadia Dept of Computer Science Univ of Southern California Los Angeles, CA 90089, USA kapadia@usc.edu Bhaskar Krishna Nuestro entorno de destino utiliza portadores de datos, llamados zebroids, donde un dispositivo móvil lleva un elemento de datos en nombre de un servidor a un cliente, minimizando así su latencia de disponibilidad. En este estudio, cuantificamos la variación de la latencia de disponibilidad con zebroids en función de un rico conjunto de parámetros como densidad de coche, almacenamiento por dispositivo, tamaño del repositorio y políticas de reemplazo empleadas por zebroids. Utilizando análisis y simulaciones extensas, obtenemos ideas novedosas sobre el diseño de sistemas basados en operadores. Se pueden obtener mejoras significativas en la latencia con zebroids a costa de un mínimo gasto general. Estas mejoras se producen incluso en escenarios con menor precisión en las predicciones de las rutas del coche. Dos hallazgos particularmente sorprendentes son: (1) una política de sustitución aleatoria ingenua empleada por los zebroids muestra un rendimiento competitivo, y (2) mejoras de la latencia obtenidas con una instanciación simplificada de zebroids se encuentran robustos a los cambios en la distribución de popularidad de los ítems de datos. Categorías y Subject Descriptores: C.2.4 [Sistemas distribuidos]: Términos Generales del Cliente/Servidor: Algoritmos, Rendimiento, Diseño, Experimentación. 1. INTRODUCCIÓN Los avances tecnológicos en las esferas del almacenamiento y las comunicaciones inalámbricas han hecho posible ahora prever la entrega a petición de datos, por ejemplo, para clips de vídeo y audio, en redes de peer-topeer vehiculares. En trabajos previos, Ghandeharizadeh et al. [10] introduce el concepto de vehículos equipados con un dispositivo Car-to-Car-Peer-toPeer, denominado AutoMata, para el entretenimiento dentro del vehículo. Las características notables de un AutoMata incluyen un dispositivo de almacenamiento masivo que ofrece cientos de gigabytes (GB) de almacenamiento, un procesador rápido y varios tipos de tarjetas de red. Incluso con las unidades de disco actuales de 500 GB, un repositorio de contenido de entretenimiento diverso puede exceder la capacidad de almacenamiento de un solo AutoMata. Tales repositorios constituyen el foco de este estudio. Para intercambiar datos, suponemos que cada AutoMata está configurado con dos tipos de tarjetas de red: 1) una tarjeta de red de baja anchura de banda con un radio-rango largo en el orden de millas que permite a un dispositivo AutoMata comunicarse con una estación celular cercana o WiMax, 2) una tarjeta de red de alta anchura de banda con un radio-rango limitado en el orden de cientos de pies. La conexión de ancho de banda alto admite tasas de datos en el orden de decenas a cientos de megabits por segundo y representa la red ad-hoc peer a peer entre los vehículos. Esto se etiqueta como el plano de datos y se emplea para intercambiar elementos de datos entre dispositivos. La conexión de baja anchura de banda sirve como plano de control, permitiendo a los dispositivos AutoMata intercambiar meta-datos con uno o más servidores centralizados. Esta conexión ofrece anchos de banda en el orden de decenas a cientos de Kilobits por segundo. Los servidores centralizados, denominados despachadores, calculan los calendarios de entrega de datos a lo largo del plano de datos utilizando los metadatos proporcionados. Estos horarios se transmiten a los vehículos participantes que utilizan el avión de control. La viabilidad técnica de tal arquitectura de dos niveles se presenta en [7], con resultados preliminares para demostrar que el ancho de banda del plano de control es suficiente para el intercambio de la información de control necesaria para realizar tal aplicación. En un escenario típico, un dispositivo AutoMata presenta a un pasajero con una lista de elementos de datos1, mostrando tanto el nombre de cada elemento de datos como su latencia de disponibilidad. Este último, denotado como ♥, se define como el momento más temprano en que el cliente encuentra una copia de su elemento de datos solicitado. Un elemento de datos está disponible inmediatamente cuando reside en el almacenamiento local del dispositivo AutoMata que atiende a la solicitud. Debido a las restricciones de almacenamiento, un AutoMata puede no almacenar todo el repositorio. En este caso, la latencia de disponibilidad es el tiempo desde que el usuario emite una solicitud hasta que el AutoMata encuentra otro coche que contiene el elemento de datos referenciado. (Los términos coche y AutoMata se utilizan indistintamente en este estudio.) La latencia de disponibilidad para un artículo es una función de la ubicación actual del cliente, su ruta de destino y viaje, el modelo de movilidad de los vehículos equipados con AutoMata, el número de réplicas construidas para los diferentes elementos de datos, y la colocación de réplicas de elementos de datos a través de los vehículos. Un método para mejorar la latencia de disponibilidad es emplear portadores de datos que transportan una réplica del elemento de datos solicitado desde un coche servidor que lo contiene a un cliente que lo solicitó. Estos portadores de datos se denominan zebroids. La selección de cebroides es facilitada por la arquitectura de dos niveles. El plano de control permite la recopilación centralizada de información en un despachador presente en una estación base.2 Algunos ejemplos de control en1 Sin pérdida de generalidad, el término elemento de datos puede ser medios tradicionales como texto o medios continuos como un clip de audio o vídeo. 2 Puede haber despachadores desplegados en un subconjunto de las estaciones de base para la tolerancia a fallos y la robustez. Los distribuidores entre estaciones de base pueden comunicarse a través de la infraestructura cableada. 75 formación son actualmente solicitudes activas, ruta de viaje de los clientes y sus destinos, y caminos de los otros coches. Para cada solicitud del cliente, el despachador puede elegir un conjunto de portadores z que colaboran para transferir un elemento de datos de un servidor a un cliente (z-relay zebroids). Aquí, z es el número de zebroids tales que 0 ≤ z < N, donde N es el número total de coches. Cuando z = 0 no hay portadores, lo que requiere un servidor para entregar el elemento de datos directamente al cliente. De lo contrario, el equipo de relé elegido de z zebroids se entregará los datos de forma transitoria unos a otros para llegar al cliente, reduciendo así la latencia de la disponibilidad (para más detalles, véase la sección 3.1). Para aumentar la robustez, el despachador puede emplear múltiples equipos de relé de portadoras z para cada solicitud. Esto puede ser útil en escenarios en los que el despachador tiene menor precisión de predicción en la información sobre las rutas de los coches. Por último, las restricciones de almacenamiento pueden requerir que un zebroid desaloje elementos de datos existentes de su almacenamiento local para acomodar el elemento solicitado por el cliente. En este estudio, se cuantifican los siguientes factores principales que afectan a la latencia de la disponibilidad en presencia de zebroideos: (i) tamaño del repositorio de datos, (ii) densidad del coche, (iii) capacidad de almacenamiento por coche, (iv) duración del viaje del cliente, (v) esquema de reemplazo empleado por los zebroideos, y (vi) exactitud de las predicciones de la ruta del coche. Para un subconjunto significativo de estos factores, abordamos algunas preguntas clave relativas al uso de zebroids tanto a través del análisis como de simulaciones extensas. Nuestras principales conclusiones son las siguientes. Una política de sustitución aleatoria ingenua empleada por los zebroids muestra un rendimiento competitivo en términos de latencia de disponibilidad. Con esta política, se pueden obtener mejoras sustanciales en la latencia con zebroids con un mínimo de gastos generales de reemplazo. En escenarios más prácticos, donde el despachador tiene información inexacta sobre las rutas del coche, los zebroids continúan proporcionando mejoras de la latencia. Un resultado sorprendente es que los cambios en la popularidad de los ítems de datos no impactan las ganancias de latencia obtenidas con una simple instanciación de z-relay zebroids llamados cebroids uno-instantáneos (ver Sección 3.1). Este estudio sugiere una serie de direcciones interesantes a seguir para obtener una mejor comprensión del diseño de sistemas basados en el portador que mejoran la latencia de disponibilidad. Trabajo relacionado: La replicación en redes móviles ad-hoc ha sido un tema ampliamente estudiado [11, 12, 15]. Sin embargo, ninguno de estos estudios emplea zebroids como portadores de datos para reducir la latencia de las solicitudes de los clientes. Varios estudios novedosos e importantes como ZebraNet [13], DakNet [14], Data Mules [16], Message Ferries [20] y Seek and Focus [17] han analizado factores que afectan a redes conectadas intermitentemente consistentes en portadores de datos similares en espíritu a los zebroideos. Los factores considerados por cada estudio son dictados por su supuesto entorno y aplicación diana. Una característica novedosa de nuestro estudio es el impacto en la latencia de disponibilidad para un repositorio de datos dado de elementos. En [9] se puede obtener una descripción detallada de las obras relacionadas. El resto de este documento está organizado de la siguiente manera. En la sección 2 se ofrece una visión general de la terminología junto con los factores que influyen en la latencia de la disponibilidad en presencia de zebroides. En la sección 3 se describe cómo se pueden emplear los cebroides. En la sección 4 se proporciona información detallada sobre la metodología de análisis empleada para captar el desempeño con los zebroids. En la sección 5 se describen los detalles del entorno de simulación utilizado para la evaluación. La sección 6 recoge las preguntas clave examinadas en este estudio y las responde a través de análisis y simulaciones. Por último, en la sección 7 se presentan breves conclusiones y futuras orientaciones de la investigación. 2. SINOPSIS Y TERMINOLOGÍA La Tabla 1 resume la notación de los parámetros utilizados en el artículo. A continuación introducimos algunas terminologías utilizadas en el artículo. Asumir una red de coches N AutoMata equipados, cada uno con capacidad de almacenamiento de α bytes. La capacidad total de almacenamiento del sistema es ST = N. Hay elementos de datos T en la base de datos, cada uno con parámetros de base de datos T Número de elementos de datos. Si Tamaño del ítem de datos i fi Frecuencia de acceso al ítem de datos i. Parámetros de replicación Ri Frecuencia normalizada de acceso al ítem de datos i ri Número de réplicas para ítem de datos i n Caracteriza un esquema de replicación particular. Latencia media de la disponibilidad del elemento de datos i Łagg Latencia agregada de la disponibilidad, N Número de dispositivos AutoMata en el sistema. α Capacidad de almacenamiento por AutoMata. γ Duración del viaje del cliente AutoMata. ST Capacidad total de almacenamiento del sistema AutoMata, ST = N · α. Cuadro 1: Términos y sus definiciones tamaño Si. La frecuencia de acceso al ítem de datos i se denota como fi, con T j=1 fj = 1. Deje que la duración del viaje del cliente AutoMata en consideración sea γ. Ahora definimos la frecuencia normalizada de acceso al ítem de datos i, denotado por Ri, como: Ri = (fi)n T j=1(fj)n ; 0 ≤ n ≤ فارسى (1) El exponente n caracteriza una técnica de replicación particular. Un esquema de replicación de raíz cuadrada se realiza cuando n = 0.5 [5]. Esto sirve como la línea base para la comparación con el caso cuando se despliegan zebroids. Ri se normaliza a un valor entre 0 y 1. El número de réplicas para el dato i, denotado como ri, es: ri = min (N, max (1, Ri·N Si )). Esto capta el caso cuando al menos una copia de cada elemento de datos debe estar presente en la red ad-hoc en todo momento. En los casos en que un elemento de datos se puede perder de la red ad-hoc, esta ecuación se convierte en ri = min (N, max (0, Ri·N Si )). En este caso, es posible que sea necesario satisfacer una solicitud para el elemento de datos perdido mediante la obtención del elemento desde un servidor remoto. La latencia de disponibilidad para un elemento de datos i, denotado como i, se define como la primera vez en la que un cliente AutoMata encontrará la primera réplica del elemento accesible a él. Si esta condición no se cumple, entonces se establece a i. Esto indica que el elemento de datos I no estaba disponible para el cliente durante su viaje. Tenga en cuenta que como hay al menos una réplica en el sistema para cada elemento de datos i, al establecer γ a un gran valor nos aseguramos de que los clientes soliciten cualquier elemento de datos i será satisfecho. Sin embargo, en la mayoría de las circunstancias prácticas γ puede no ser tan grande como para encontrar cada elemento de datos. Estamos interesados en la latencia de disponibilidad observada en todos los datos. Por lo tanto, aumentamos la latencia media de disponibilidad para cada ítem de datos i con su fi para obtener la siguiente latencia ponderada de disponibilidad (?agg) métrica:?agg = T i=1?i · fi A continuación, presentamos nuestro enfoque de solución describiendo cómo se seleccionan los zebroids. 3. ENFOQUE DE SOLUCIÓN 3.1 Zebroids Cuando un cliente hace referencia a un elemento de datos que falta en su almacenamiento local, el despachador identifica todos los coches con una copia del elemento de datos como servidores. A continuación, el despachador obtiene las rutas futuras de todos los coches para una duración de tiempo finito equivalente al tiempo máximo que el cliente está dispuesto a esperar a que su solicitud sea atendido. Utilizando esta información, el despachador programa la ruta de entrega más rápida desde cualquiera de los servidores al cliente utilizando cualquier otro coche como transportistas intermedios. Por lo tanto, determina el conjunto óptimo de decisiones de reenvío 76 que permitirá que el elemento de datos se entreguen al cliente en el mínimo de tiempo. Tenga en cuenta que la latencia a lo largo de la ruta de entrega más rápida que emplea un equipo de relé de z zebroids es similar a la obtenida con el encaminamiento epidémico [19] bajo los supuestos de almacenamiento infinito y ninguna interferencia. Una simple instanciación de z-relay zebroids se produce cuando z = 1 y la solicitud de los clientes desencadena una transferencia de una copia del elemento de datos solicitado de un servidor a un zebroid en su vecindad. Tal zebroideo se denomina cebroide uniinstantáneo. En algunos casos, el expedidor podría tener información inexacta sobre las rutas de los coches. Por lo tanto, un zebroid programado sobre la base de esta información inexacta puede no reunirse con su cliente objetivo. Para minimizar la probabilidad de tales escenarios, el despachador puede programar múltiples zebroids. Esto puede acarrear gastos generales adicionales debido a la utilización redundante de recursos para obtener las mismas mejoras de latencia. El tiempo necesario para transferir un elemento de datos de un servidor a un zebroid depende de su tamaño y del ancho de banda del enlace disponible. Con elementos de datos pequeños, es razonable suponer que este tiempo de transferencia es pequeño, especialmente en presencia del plano de datos de alto ancho de banda. Los elementos de datos grandes se pueden dividir en trozos más pequeños que permiten al despachador programar uno o más zebroids para entregar cada trozo a un cliente de una manera oportuna. Esta sigue siendo una dirección de investigación futura. Inicialmente, el número de réplicas para cada ítem de datos puede ser calculado usando la Ecuación 1. Este esquema calcula el número de réplicas de datos en función de su popularidad. Es estática porque el número de réplicas en el sistema no cambia y no se realizan reemplazos. Por lo tanto, esto se conoce como el ambiente de los nozebroids. Cuantificamos el desempeño de las diversas políticas de reemplazo con referencia a esta línea base que no emplea zebroids. Uno puede asumir una fase de arranque en frío, donde inicialmente sólo una o pocas copias de cada elemento de datos existen en el sistema. Muchas ranuras de almacenamiento de los coches pueden estar desocupados. Cuando los coches se encuentran entre sí, construyen nuevas réplicas de algunos elementos de datos seleccionados para ocupar los huecos vacíos. El procedimiento de selección puede consistir en elegir los datos de manera uniforme al azar. Nuevas réplicas se crean siempre y cuando un coche tiene un cierto umbral de su almacenamiento desocupado. Eventualmente, la mayoría de la capacidad de almacenamiento de un coche se agotará. 3.2 Políticas de reemplazo basadas en el operador Las políticas de reemplazo consideradas en este documento son reactivas ya que una sustitución se produce sólo en respuesta a una solicitud emitida para un determinado elemento de datos. Cuando el almacenamiento local de un zebroid está completamente ocupado, necesita reemplazar uno de sus elementos existentes para llevar el elemento de datos solicitado por el cliente. Para ello, el zebroid debe seleccionar a un candidato apropiado para el desalojo. Este proceso de decisión es análogo al encontrado en la paginación del sistema operativo donde el objetivo es maximizar la relación de acceso a la caché para evitar el retraso del acceso al disco [18]. Las políticas de reemplazo basadas en transportistas empleadas en nuestro estudio son las menos usadas recientemente (LRU), las menos usadas con frecuencia (LFU) y las aleatorias (donde un candidato de desalojo es elegido uniformemente al azar). Hemos considerado variantes locales y globales de las políticas LRU/LFU que determinan si el conocimiento local o global de los contenidos de los coches conocidos en el expedidor se utiliza para la decisión de desalojo en un zebroid (ver [9] para más detalles). Las pólizas de sustitución entrañan los siguientes gastos generales. En primer lugar, la complejidad asociada a la aplicación de una política. En segundo lugar, el ancho de banda utilizado para transferir una copia de un elemento de datos de un servidor al zebroid. En tercer lugar, el número medio de reemplazos realizados por los zebroides. Tenga en cuenta que en el caso de no cebroides no se incurre en gastos generales. Las métricas consideradas en este estudio son la latencia de la disponibilidad agregada, Tenga en cuenta que los despachadores con la ayuda del plano de control pueden asegurarse de que no se pierda ningún elemento de datos del sistema. En otras palabras, al menos una réplica de cada elemento de datos se mantiene en la red ad-hoc en todo momento. En tales casos, aunque un coche puede encontrarse con un cliente solicitante antes que otros servidores, si su almacenamiento local contiene elementos de datos con sólo una copia en el sistema, entonces tal coche no se elige como un zebroid. 4. METODOLOGÍA DE ANÁLISIS Aquí presentamos la metodología de evaluación analítica y algunas aproximaciones como ecuaciones de forma cerrada que capturan las mejoras en la latencia de disponibilidad que se pueden obtener tanto con cebros oneinstantáneos como con z-relay. Primero, presentamos algunos preliminares de nuestra metodología de análisis. • Que N sea el número de coches en la red que realizan una caminata aleatoria en 2D en un toro de G× G. Un coche adicional sirve como un cliente que entrega un total de N + 1 coches. Este modelo de movilidad se ha utilizado ampliamente en la literatura [17, 16] principalmente porque es susceptible de análisis y proporciona una base de referencia para comparar el rendimiento de otros modelos de movilidad. Además, esta clase de modelos de movilidad markoviana se ha utilizado para modelar los movimientos de los vehículos [3, 21]. • Asumimos que todos los coches comienzan desde la distribución estacionaria y realizan caminatas aleatorias independientes. Aunque para escenarios de densidad escasa, la suposición de independencia se mantiene, ya no es válido cuando N se aproxima a G. • Deje que el tamaño del repositorio de ítems de datos de interés sea T. Además, el ítem de datos i tiene réplicas ri. Esto implica que los coches ri, identificados como servidores, tienen una copia de este elemento de datos cuando el cliente solicita el elemento i. Todos los resultados de análisis presentados en esta sección se obtienen asumiendo que el cliente está dispuesto a esperar el tiempo necesario para que su solicitud sea satisfecha (duración del viaje sin límite γ = ­). Con el modelo de movilidad al azar en un torso 2D, hay una garantía de que mientras haya al menos una réplica del elemento de datos solicitado en la red, el cliente se encontrará con esta réplica [2]. Las extensiones al análisis que también consideran las duraciones del viaje finito se pueden obtener en [9]. Considere un escenario en el que no se emplean zebroids. En este caso, la latencia de disponibilidad esperada para el ítem de datos es el tiempo de reunión esperado de la caminata aleatoria realizada por el cliente con cualquiera de las caminatas aleatorias realizadas por los servidores. Aldous et al. [2] muestran que el tiempo de reunión de dos caminatas aleatorias en tal entorno puede modelarse como una distribución exponencial con la media C = c · G · log G, donde la constante c 0,17 para G ≥ 25. El tiempo de reunión, o equivalente a la latencia de la disponibilidad de i, para el cliente que solicita datos i es el momento hasta que se encuentre con cualquiera de estas réplicas ri por primera vez. Se trata también de una distribución exponencial con el siguiente valor esperado (obsérvese que esta formulación es válida sólo para casos escasos cuando G >> ri): فارسىi = cGlogG ri La latencia de disponibilidad agregada sin emplear zebroids es entonces esta expresión promediada sobre todos los ítems de datos, ponderada por su frecuencia de acceso: فارسىagg(no − zeb) = T i=1 fi Por otra parte, esta réplica se genera en el paso de tiempo cuando el cliente emite la solicitud. Que Nc i sea el número total esperado de nodos que están en la misma celda que cualquiera de los servidores ri. Luego, tenemos Nc i = (N − ri) · (1 − (1 − 1 G )ri ) (3) En el modelo analítico, suponemos que Nc i nuevas réplicas se crean, de modo que el número total de réplicas se aumenta a ri + Nc i. La latencia de disponibilidad se reduce ya que es más probable que el cliente cumpla con una réplica anterior. La latencia agregada de disponibilidad esperada en el caso de los cebroides uno-instantáneos es dada por, agg(zeb) = T i=1 fi · c · G · log G ri + Nc i = T i=1 fi · C ri + Nc i (4) Tenga en cuenta que al obtener esta expresión, para facilitar el análisis, hemos asumido que las nuevas réplicas comienzan Así trata a todos los portadores de Nc i de forma independiente, al igual que los servidores originales ri. Como mostraremos a continuación en comparación con las simulaciones, esta aproximación proporciona un límite superior a las mejoras que se pueden obtener porque da lugar a una menor latencia esperada en el cliente. Cabe señalar que el procedimiento mencionado anteriormente producirá una latencia similar a la empleada por un expedidor que emplee cebroides oneinstantáneos (véase la sección 3.1). Dado que el despachador es consciente de todos los movimientos futuros del coche que sólo transferiría el elemento de datos solicitado en un único zebroid, si determina que el zebroid se reunirá con el cliente antes que cualquier otro servidor. Este zebroid seleccionado está incluido en las nuevas réplicas de Nc i. 4.2 z-relay zebroids Para calcular la latencia de disponibilidad esperada con z-relay zebroids, utilizamos un análogo de problema de coloración similar a un enfoque utilizado por Spyropoulos et al. [17]. En [9] se dan detalles del procedimiento para obtener una expresión de forma cerrada. La latencia de disponibilidad agregada (agg) con z-relay zebroids es dada por, agg(zeb) = T i=1 [fi · C N + 1 · 1 N + 1 − ri · (N · log N ri − log (N + 1 − ri))] (5) 5. METODOLOGÍA DE SIMULACIÓN El entorno de simulación considerado en este estudio se compone de vehículos como automóviles que llevan una fracción del repositorio de datos. Un parámetro de precisión de predicción proporciona inherentemente una cierta garantía probabilística sobre la confianza de las predicciones de ruta del automóvil conocidas en el despachador. Un valor del 100% implica que las rutas exactas de todos los coches se conocen en todo momento. Un valor del 70% para este parámetro indica que las rutas previstas para los coches coincidirán con las reales con probabilidad 0.7. Tenga en cuenta que esta probabilidad se extiende a través de las rutas del coche durante toda la duración del viaje. Ahora proporcionamos los preliminares del estudio de simulación y luego describimos los parámetros de configuración utilizados en nuestros experimentos. • Similar a la metodología de análisis, el mapa utilizado es un toro 2D. Un modelo de movilidad Markov que representa una caminata aleatoria 2D imparcial en la superficie del toro describe el movimiento de los coches a través de este toro. • Cada cuadrícula/célula es un estado único de esta cadena Markov. En cada ranura de tiempo, cada coche hace una transición de una celda a cualquiera de sus 8 celdas vecinas. La transición es una función de la ubicación actual del coche y una matriz de transición de probabilidad Q = [qij] donde qij es la probabilidad de transición del estado i al estado j. Solo los coches equipados con AutoMata dentro de la misma celda pueden comunicarse entre sí. • Los parámetros γ,  han sido discretizados y expresados en términos del número de franjas horarias. • Un dispositivo AutoMata no mantiene más de una réplica de un elemento de datos. Esto se debe a que las réplicas adicionales ocupan el almacenamiento sin proporcionar beneficios. • Los cebroides de relé z o uno instantáneos pueden ser empleados por solicitud del cliente para mejorar la latencia. • A menos que se mencione lo contrario, se supone que el parámetro de precisión de la predicción es del 100%. Esto se debe a que este estudio pretende cuantificar el efecto de un gran número de parámetros individualmente sobre la latencia de la disponibilidad. Aquí, establecemos el tamaño de cada elemento de datos, Si, para ser 1. α representa el número de ranuras de almacenamiento por AutoMata. Cada ranura de almacenamiento almacena un elemento de datos. γ representa la duración del viaje de los clientes en términos del número de franjas horarias. Por lo tanto, los posibles valores de latencia de disponibilidad están entre 0 y γ.  se define como el número de franjas horarias después de lo cual un dispositivo cliente AutoMata encontrará una réplica del elemento de datos por primera vez. Si una réplica para el elemento de datos solicitado fue encontrado por el cliente en la primera celda, a continuación, se establece  = 0. Si se trata de un elemento de datos solicitado, el cliente no encontró ninguna copia del elemento de datos solicitado durante todo su viaje. En todas nuestras simulaciones, para la ilustración consideramos un 5 × 5 2D-torus con γ fijado a 10. Nuestros experimentos indican que las tendencias en la escala de resultados a mapas de mayor tamaño. Simulamos una distribución sesgada de acceso a los datos T que obedece a la ley Ziffs con una media de 0.27. Esta distribución corresponde a la venta de entradas de cine en los Estados Unidos [6]. Empleamos un esquema de replicación que asigna réplicas para un elemento de datos en función de la raíz cuadrada de la frecuencia de acceso de ese elemento. Se muestra que el esquema de replicación de raíz cuadrada tiene un rendimiento de latencia competitivo en un gran espacio de parámetros [8]. Las réplicas de elementos de datos se distribuyen uniformemente entre los dispositivos AutoMata. Esto sirve como el caso de la línea base sin cebros. El esquema de raíz cuadrada también proporciona la distribución de réplica inicial cuando se emplean zebroids. Tenga en cuenta que los reemplazos realizados por los zebroids causarán cambios en la distribución de réplica de ítems de datos. Las solicitudes generadas según la distribución Zipf se emiten una a la vez. El coche cliente que emite la solicitud se elige de una manera redonda-robina. Después de un período máximo de γ, se registra la latencia con que se encontró esta solicitud. En todos los resultados de simulación, cada punto es un promedio de 200.000 solicitudes. Además, los intervalos de confianza del 95% determinados para los resultados son bastante ajustados para las métricas de latencia y los gastos generales de reemplazo. Por lo tanto, sólo los presentamos para la métrica que captura la mejora porcentual de la latencia con respecto al caso de no-zebroides. 6. RESULTADOS En esta sección, describimos nuestros resultados de evaluación donde se abordan las siguientes preguntas clave. Con una amplia selección de esquemas de reemplazo disponibles para un zebroid, ¿cuál es su efecto en la latencia de disponibilidad? Una pregunta más central es: Do zebroids provide 78 0 20 40 60 80 100 1.5 2 2.5 3 3.5 Número de coches Latencia de disponibilidad agregada (­agg ) lru_global lfu_global lru_local lfu_local random Figura 1: La figura 1 muestra la latencia de disponibilidad al emplear cebroids uno-instantáneos en función de los valores (N,α), cuando el ¿Cuáles son los gastos generales asociados en el empleo de estos zebroides? ¿Qué sucede con estas mejoras en escenarios donde un despachador puede tener información imperfecta sobre las rutas del automóvil? ¿Cuáles son las compensaciones inherentes entre la densidad del automóvil y el almacenamiento por automóvil en lo que respecta a su efecto combinado e individual sobre la latencia de la disponibilidad en presencia de zebroids? Presentamos análisis simples y simulaciones detalladas para proporcionar respuestas a estas preguntas, así como para obtener información sobre el diseño de sistemas basados en operadores. 6.1 ¿Cómo funciona un esquema de sustitución empleado por un latencia de disponibilidad de impacto zebroideo? Para ilustrarlo, presentamos experimentos de escala en los que se emplean cebroides oneinstantáneos (ver Figura 1). Por escala, queremos decir que α y N se cambian proporcionalmente para mantener el almacenamiento total del sistema, ST, constante. Aquí, T = 50 y ST = 200. Elegimos los siguientes valores de (N,α) = {(20,10), (25,8), (50,4), (100,2)}. La cifra indica que un plan de sustitución al azar muestra un rendimiento competitivo. Esto se debe a varias razones. Recuerde que la distribución de réplica inicial se establece según el esquema de replicación de raíz cuadrada. El esquema de reemplazo aleatorio no altera esta distribución ya que hace que los reemplazos ciegos a la popularidad de un elemento de datos. Sin embargo, los reemplazos causan una reorganización dinámica de los datos a fin de atender mejor a la solicitud activa actual. Además, el patrón de movilidad de los coches es aleatorio, por lo que las ubicaciones desde las que los clientes emiten las solicitudes también son aleatorias y no se conocen a priori en el despachador. Estas conclusiones son importantes porque una política de sustitución aleatoria puede aplicarse de manera descentralizada. Los esquemas rru-global y lfu-global proporcionan un rendimiento de latencia que es peor que aleatorio. Esto se debe a que estas políticas desarrollan rápidamente una preferencia por los elementos de datos más populares, creando así un mayor número de réplicas para ellos. Durante el desalojo, los datos más populares casi nunca se seleccionan como candidatos de reemplazo. En consecuencia, hay menos réplicas para los artículos menos populares. Por lo tanto, la distribución inicial del elemento de datos replica cambios de raíz cuadrada a que se asemeja a replicación lineal. El mayor número de réplicas de las partidas de datos populares proporciona beneficios adicionales marginales, mientras que el menor número de réplicas de las demás partidas de datos perjudica el rendimiento de latencia de estas políticas mundiales. Los esquemas lfu-local y lru-local tienen un rendimiento similar al aleatorio ya que no tienen suficiente historial de solicitudes de datos locales. Especulamos que el desempeño de estas políticas locales se acercará al de sus variantes globales para una historia suficientemente grande de solicitudes de ítems de datos. Debido al rendimiento competitivo demostrado por una política aleatoria, para el resto del documento, presentamos el rendimiento de los zebroids que emplean una política de reemplazo aleatorio. 6.2 ¿Proporcionan los zebroids mejoras significativas en la latencia de disponibilidad? Encontramos que en muchos escenarios que emplean zebroids proporciona mejoras sustanciales en la latencia de la disponibilidad. 6.2.1 Análisis Primero consideramos el caso de los cebroides uno-instantáneos. La Figura 2.a muestra la variación en Łagg en función de N para T = 10 y α = 1 con 10 × 10 toros usando la Ecuación 4. Los ejes x e y se dibujan a una escala de registro. En la figura 2.b se muestra la mejoría en % en el Agg obtenido con cebroides uniinstantáneos. En este caso, sólo el eje x se dibuja a una escala de registro. Para ilustrar, suponemos que los datos T son solicitados uniformemente. Inicialmente, cuando la red es escasa la aproximación analítica para mejoras en la latencia con zebroids, obtenida de las ecuaciones 2 y 4, coincide estrechamente con los resultados de la simulación. Sin embargo, a medida que N aumenta, la suposición de escasez para la que el análisis es válido, a saber, N+G, ya no es cierta. Por lo tanto, las dos curvas divergen rápidamente. El punto en el que las dos curvas se alejan unas de otras corresponde a un valor de Además, como se mencionó anteriormente, el análisis proporciona un límite superior a las mejoras de la latencia, ya que trata de las réplicas recién creadas dadas por Nc i de forma independiente. Sin embargo, estas réplicas de Nc i comienzan desde la misma celda que una de las réplicas de servidor ri. Finalmente, el análisis captura un escenario oneshot donde dada una distribución inicial de réplica de datos, se calcula la latencia de disponibilidad. Las nuevas réplicas creadas no afectan las solicitudes futuras del cliente. Debido a las limitaciones de espacio, aquí, se resumen las observaciones en el caso de z-relay zebroids se emplean. El lector interesado puede obtener más detalles en [9]. Observaciones similares, como el caso cebroideo uniinstantaneo, se aplican ya que las curvas de simulación y análisis comienzan de nuevo a divergir cuando los supuestos de análisis ya no son válidos. Sin embargo, la observación clave aquí es que la mejora de la latencia con z-relay zebroids es significativamente mejor que el caso de cebroids uno-instantáneos, especialmente para escenarios de almacenamiento más bajos. Esto se debe a que en escenarios escasos, los traspasos transitivos entre los zebroides crean un mayor número de réplicas para el ítem de datos solicitado, lo que produce una menor latencia de disponibilidad. Por otra parte, también se observa que la curva de validación de simulación para las mejoras en Łagg con z-relay zebroids se aproxima a la del caso cebroideo uniinstantánea para un almacenamiento más alto (valores de N más altos). Esto se debe a que los cebroides uno-instantáneos son un caso especial de z-relay zebroides. 6.2.2 Simulación Realizamos simulaciones para examinar todo el espectro de almacenamiento obtenido cambiando la densidad del vehículo N o el almacenamiento por coche α para capturar también escenarios en los que no se mantienen las hipótesis de escasez para las que el análisis es válido. Separamos el efecto de N y α capturando la variación de N manteniendo constante α (caso 1) y viceversa (caso 2) tanto con z-relay y cebroides uno-instantáneos. Aquí, establecemos el tamaño del repositorio como T = 25. En el gráfico 3 figura el caso 1 mencionado anteriormente. Se observan tendencias similares con el caso 2, en [9] se dispone de una descripción completa de esos resultados. Con la Figura 3.b, manteniendo constante α, la densidad del coche aumenta inicialmente tiene mayores beneficios de latencia porque el aumento de N introduce más zebroids en el sistema. A medida que N se incrementa aún más, • reduce porque el almacenamiento total en el sistema sube. En consecuencia, el número de réplicas por elemento de datos sube aumentando así el número de servidores 79. Por lo tanto, la política de reemplazo no puede encontrar un zebroid tan a menudo para transportar el elemento de datos solicitado al cliente antes que cualquiera de los servidores. Por otro lado, el aumento del número de servidores beneficia al caso de no-zebroids al reducir a Agg. El efecto neto da lugar a una reducción de los valores más grandes de N. 10 1 10 2 10 3 10 −1 10 0 10 1 10 2 Número de automóviles no-zebroidsanal no-zebroids sim one-instantaneoussim Agregación Disponibilidad Latencia (­agg ) 2.a) Agg 10 1 10 2 10 3 0 10 20 40 50 60 70 80 90 100 Número de automóviles % Mejora Las tendencias mencionadas anteriormente son similares a las obtenidas del análisis. Sin embargo, algo contra-intuitivamente con almacenamiento relativamente más alto del sistema, z-relay zebroids proporcionan mejoras ligeramente más bajas en la latencia en comparación con uno-instantaneous zebroids. Especulamos que esto se debe a las diferentes distribuciones de réplicas de ítems de datos impuestas por ellos. Tenga en cuenta que los reemplazos realizados por los zebroids causan fluctuaciones en estas distribuciones de réplica que pueden afectar futuras solicitudes de clientes. Actualmente estamos explorando opciones adecuadas de parámetros que pueden capturar estas distribuciones de réplicas cambiantes. 6.3 ¿Cuáles son los gastos generales derivados de la mejora de la latencia de los zebroideos? Encontramos que las mejoras en la latencia con zebroids se obtienen con un mínimo de reemplazo de los gastos generales (< 1 por solicitud del cliente). 6.3.1 Análisis Con cebroides uniinstantáneos, para cada solicitud de cliente se emplea un máximo de un cebroide para mejorar la latencia. Por lo tanto, los gastos generales de sustitución por solicitud del cliente pueden ascender a un máximo de uno. Recordemos que para calcular la latencia con una latencia instantánea 0 50 100 150 200 250 350 400 0 1 2 3 4 5 6 Número de coches Latencia de disponibilidad agregada (?agg ) no-zebroids one-instantaneous z-relays 3.a 0 50 100 150 200 250 300 350 400 0 10 20 30 40 50 60 Número de coches % Mejora en?agg wrt no-zebro Ahora un reemplazo sólo se incumple si una de estas réplicas de Nc i de nueva creación se reúne con el cliente antes que cualquiera de los servidores de ri. Que Xri y XNc i respectivamente sean variables aleatorias que capturen el tiempo mínimo hasta que cualquiera de las réplicas de ri y Nc i cumpla con el cliente. Dado que Xri y XNc i se supone que son independientes, por la propiedad de variables aleatorias distribuidas exponencialmente tenemos, Overhead/request = 1 · P(XNc i < Xri ) + 0 · P(Xri ≤ XNc i ) (6) Overhead/request = ri C ri C + Nc i C = ri ri + Nc i (7) Sin embargo, si N  es constante entonces el aumento de las causas N α 80 0 20 40 60 80 100 0 0,05 0,15 0,20 0,25 0,35 0,40 0,45 0,5 Número de coches cebroides instantáneos número medio de reemplazos por solicitud (N=20,α=10) (N=25,α=8) (N=50,α=4) (N=100,α=2) Figura 4: La figura 4 captura el reemplazo de Esto implica que se incurre en un aumento de los gastos generales de sustitución para valores N y α más altos. Por otra parte, cuando ri = N, esto significa que cada coche tiene una réplica de elemento de datos i. Por lo tanto, no se emplean zebroids cuando se solicita este artículo, lo que da lugar a un gasto general/solicitud para este artículo como cero. A continuación, presentamos resultados de simulación que validan nuestra hipótesis de análisis para los gastos generales asociados con el despliegue de cebroides uno-instantáneos. 6.3.2 Simulación En la figura 4 se muestra la superficie de repuesto con cebroides uno-instantáneos cuando se varían (N,α) manteniendo constante el almacenamiento total del sistema. Las tendencias mostradas por la simulación concuerdan con las previstas por el análisis anterior. Sin embargo, el almacenamiento total del sistema puede ser cambiado ya sea por la densidad variable del coche (N) o el almacenamiento por coche (α). Debido a tendencias similares, aquí presentamos el caso cuando α se mantiene constante y N es variada (Figura 5). Referimos al lector a [9] para el caso cuando α es variado y N se mantiene constante. Presentamos un argumento intuitivo para el comportamiento de las curvas superiores de reemplazo de la solicitud. Cuando el almacenamiento es extremadamente escaso de modo que sólo existe una réplica por elemento de datos en la red AutoMata, el número de reemplazos realizados por los zebroids es cero ya que cualquier reemplazo causará que un elemento de datos se pierda del sistema. El despachador garantiza que no se pierda ningún elemento de datos del sistema. En el otro extremo del espectro, si el almacenamiento se vuelve tan abundante que α = T entonces todo el repositorio de elementos de datos se puede replicar en cada coche. El número de reemplazos es de nuevo cero ya que cada solicitud puede ser satisfecha localmente. Un escenario similar ocurre si N se aumenta a un valor tan grande que otro coche con el elemento de datos solicitado siempre está disponible en las proximidades del cliente. Sin embargo, hay un espectro de almacenamiento en el medio donde los reemplazos por los zebroides programados dan lugar a mejoras en el Agg (ver Figura 3). Por otra parte, observamos que para escenarios de almacenamiento escasos, las mejoras más altas con z-relay zebroids se obtienen al costo de un aumento de los gastos generales de reemplazo en comparación con el caso de cebroids uno-instantáneos. Esto se debe a que en el caso anterior, cada uno de estos z zebroids seleccionados a lo largo de la ruta de latencia más baja al cliente necesita realizar un reemplazo. Sin embargo, los gastos generales de sustitución son todavía inferiores a 1 lo que indica que en promedio se necesita menos de un reemplazo por solicitud del cliente, incluso cuando se emplean z-relay zebroids. 0 50 100 150 200 250 300 350 400 0 0,1 0,2 0,3 0,4 0,6 0,7 0,8 0,9 1 Número de coches z-reemplaza uno-instantánea Número medio de reemplazos por solicitud Figura 5: La figura 5 muestra los gastos generales de reemplazo con cebroide para los casos en que N es diferente manteniendo α = 2. 10 20 30 40 50 60 70 80 90 100 0 0,5 1 1,5 2 2,5 3 3,5 4 Porcentaje de predicción no-zebroideos (N=50) uno-instantáneos (N=50) z-relés (N=50) no-zebroideos (N=200) uno-instantáneos (N=200) z-relés (N=200) Disponibilidad agregada Latencia ( 6.4 ¿Qué sucede con la latencia de la disponibilidad con zebroids en escenarios con inexactitudes en las predicciones de la ruta del coche? Encontramos que los zebroids continúan proporcionando mejoras en la latencia de la disponibilidad incluso con menor precisión en las predicciones de la ruta del coche. Utilizamos un único parámetro p para cuantificar la exactitud de las predicciones de la ruta del coche. 6.4.1 Análisis Dado que p representa la probabilidad de que una ruta del automóvil predicha por el expedidor coincida con la actual, por lo tanto, la latencia con los zebroideos puede ser aproximada por, 6.4.2 Simulación En la figura 6 se muestra la variación en el Agg en función de esta métrica de precisión de la predicción de ruta. Observamos una reducción suave en la mejora de 81 en Agg a medida que la métrica de precisión de predicción reduce. Para los zebroids que están programados pero no se reúnen con el cliente debido al error de predicción, etiquetamos tales reemplazos hechos por los zebroids como fallados. Se ve que los reemplazos fallidos aumentan gradualmente a medida que la precisión de la predicción se reduce. 6.5 ¿En qué condiciones se maximizan las mejoras en la latencia de disponibilidad con zebroids? Sorprendentemente, encontramos que las mejoras en la latencia obtenidas con cebroides uno-instantáneos son independientes de la distribución de entrada de la popularidad de los ítems de datos. 6.5.1 Análisis La diferencia fraccionaria (marcada en la letra ) en la latencia entre los cebroides no-zebroideos y los cebroides uno-instantáneos se obtiene a partir de las ecuaciones 2, 3 y 4 de la siguiente forma: T i=1 fi·C ri − T i=1 fi·C ri+(N−ri)·(1−(1− 1 G )ri Let α = 1, haciendo el almacenamiento total en el sistema ST = N. Suponiendo que la distribución de réplica inicial es según el esquema de replicación de raíz cuadrada, tenemos, ri = fi·N T j = 1 fj. Por lo tanto, obtenemos fi = K2 ·r2 i N2, donde K = T j=1 fj. Utilizando esto, junto con la aproximación (1 − x)n 1 − n · x para x pequeña, simplificamos la ecuación anterior para obtener, • = 1 − T i=1 ri 1+ N−ri G T i=1 ri Para determinar cuándo se maximizan las ganancias con cebroides uno-instantáneos, podemos enmarcar un problema de optimización de la siguiente manera: Maximizar •, sujeto a T i Con un esquema de replicación de raíz cuadrada, las mejoras obtenidas con cebroides uniinstantáneos son independientes de la distribución de popularidad de entrada de los ítems de datos. (Ver [9] para la prueba) 6.5.2 Simulación Realizamos simulaciones con dos diferentes distribución de frecuencias de ítems de datos: Uniforme y Zipfian (con media= 0.27). En ambos casos se obtienen mejoras similares de latencia con cebroides uniinstantáneos. Este resultado tiene importantes implicaciones. En casos con popularidad sesgada hacia ciertos ítems de datos, las mejoras agregadas en la latencia en todas las solicitudes de ítems de datos siguen siendo las mismas. Incluso en escenarios en los que la frecuencia de acceso a los datos cambia dinámicamente, los zebroids seguirán proporcionando mejoras similares en la latencia. 7. CONCLUSIONES Y FUTURAS DIRECCIONES DE INVESTIGACIÓN En este estudio, examinamos las mejoras en la latencia que se pueden obtener en presencia de transportistas que entregan un elemento de datos desde un servidor a un cliente. Se cuantificó la variación de la latencia de disponibilidad en función de un rico conjunto de parámetros como la densidad del coche, el almacenamiento por coche, el tamaño de la base de datos de título y las políticas de reemplazo empleadas por los zebroids. A continuación se resumen algunas direcciones clave de investigación en el futuro que pretendemos seguir. Para reflejar mejor la realidad nos gustaría validar las observaciones obtenidas de este estudio con algunos rastros de simulación del mundo real de movimientos vehiculares (por ejemplo usando CORSIM [1]). Esto también servirá como validación para la utilidad del modelo de movilidad Markov utilizado en este estudio. Actualmente estamos analizando el desempeño de los zebroids en un conjunto de datos del mundo real que comprende una red ad-hoc de autobuses que se mueven alrededor de un pequeño barrio en Amherst [4]. Los cebroides también se pueden utilizar para la entrega de datos que transportan información sensible al retraso con una determinada caducidad. Las extensiones a zebroids que satisfacen estos requisitos de aplicación presentan una dirección de investigación futura interesante. 8. AGRADECIMIENTOS Esta investigación fue apoyada en parte por una beca Annenberg y subvenciones NSF numeradas CNS-0435505 (NeTS NOSS), CNS-0347621 (CAREER), y IIS-0307908. 9. REFERENCIAS [1] Administración Federal de Carreteras. Simulación del corredor. Versión 5.1, http://www.ops.fhwa.dot.gov/trafficanalysistools/cors im.htm. [2] D. Aldous y J. Llena. Cadenas de markov reversibles y caminatas aleatorias en gráficos. En preparación. [3] A. Bar-Noy, I. Kessler y M. Sidi. Usuarios móviles: Para actualizar o no actualizar. En IEEE Infocom, 1994. [4] J. Burgess, B. Gallagher, D. Jensen, y B. Levine. MaxProp: Enrutamiento para redes tolerantes a perturbaciones basadas en vehículos. En IEEE Infocom, abril de 2006. [5] E. Cohen y S. Shenker. Estrategias de replicación en redes de pares no estructuradas. En SIGCOMM, 2002. [6] A. Dan, D. Dias, R. Mukherjee, D. Sitaram y R. Tewari. Buffering y Caching en servidores de vídeo a gran escala. En COMPCON, 1995. [7] S. Ghandeharizadeh, S. Kapadia, y B. Krishnamachari. PAVAN: Marco normativo para la disponibilidad de contenidos en las redes ad hoc de vehículos. En VANET, Nueva York, Nueva York, Estados Unidos, 2004. ACM Press. [8] S. Ghandeharizadeh, S. Kapadia, y B. Krishnamachari. Comparación de estrategias de replicación para la disponibilidad de contenido en redes C2P2. En MDM, mayo de 2005. [9] S. Ghandeharizadeh, S. Kapadia, y B. Krishnamachari. Una evaluación de la latencia de disponibilidad en redes de vehículos ad-hoc basadas en el portador. Informe técnico, Departamento de Ciencias de la Computación, Universidad del Sur de California, CENG-2006-1, 2006. [10] S. Ghandeharizadeh y B. Krishnamachari. C2p2: Una red inter pares para servicios de información de automóviles a petición. En Globe. IEEE, 2004. [11] T. Hara. Asignación eficaz de réplicas en redes ad-hoc para mejorar la accesibilidad de datos. En IEEE Infocom, 2001. [12] H. Hayashi, T. Hara, y S. Nishio. Un método de asignación de réplica Adaptarse a los cambios de topología en redes ad-hoc. En DEXA, 2005. [13] P. Juang, H. Oki, Y. Wang, M. Martonosi, L. Peh, y D. Rubenstein. Computación energéticamente eficiente para el seguimiento de vida silvestre: compensaciones de diseño y experiencias tempranas con ZebraNet. Silgarch Comput. Archit. Noticias, 2002. [14] A. Pentland, R. Fletcher y A. Hasson. DakNet: Repensar la conectividad en las naciones en desarrollo. Computadora, 37(1):78-83, 2004. [15] F. Sailhan y V. Issarny. Caché cooperativo en redes ad-hoc. En MDM, 2003. [16] R. Shah, S. Roy, S. Jain y W. Brunette. Mulas de datos: Modelado y análisis de una arquitectura de tres niveles para redes de sensores escasas. Elsevier ad-hoc Networks Journal, 1o de septiembre de 2003. [17] T. Schiropoulos, K. Psounis y C. Raghavendra. Enrutamiento de una sola copia en redes móviles conectadas intermitentemente. En SECON, abril de 2004. [18] A. Tanenbaum. Sistemas operativos modernos, 2a edición, capítulo 4, sección 4.4. Prentice Hall, 2001. [19] A. Vahdat y D. Becker. Ruta epidémica para redes ad-hoc parcialmente conectadas. Informe técnico, Departamento de Informática, Universidad de Duke, 2000. [20] W. Zhao, M. Ammar, y E. Zegura. Un enfoque de ferriing de mensajes para la entrega de datos en redes móviles ad-hoc escasas. En MobiHoc, págs. 187 a 198, Nueva York, NY, Estados Unidos, 2004. ACM Press. [21] M. Zonoozi y P. Dassanayake. Modelado de Movilidad de Usuario y Caracterización del Patrón de Movilidad. Revista IEEE sobre áreas seleccionadas en las comunicaciones, 15:1239-1252, septiembre de 1997. 82 ",
            "error": []
        },
        "latency": {
            "translated_key": [
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "agg",
                "agg",
                "no-zebroids",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "T i=1 fi·C ri − T i=1 fi·C ri+(N−ri)·(1−(1− 1 G )ri) Let α = 1, haciendo el almacenamiento total en el sistema ST = N. Suponiendo que la distribución de réplica inicial es según el esquema de replicación de raíz cuadrada, tenemos, ri = fi·N T j = 1 fj. Por lo tanto, obtenemos fi = K2 ·r2 i N2, donde K = T j=1 fj. Utilizando esto, junto con la aproximación (1 − x)n 1 − n · x para x pequeña, simplificamos la ecuación anterior para obtener, • = 1 − T i=1 ri 1+ N−ri G T i=1 ri Para determinar cuándo se maximizan las ganancias con cebroides uno-instantáneos, podemos enmarcar un problema de optimización de la siguiente manera: Maximizar •, sujeto a T i Con un esquema de replicación de raíz cuadrada, las mejoras obtenidas con cebroides uniinstantáneos son independientes de la distribución de popularidad de entrada de los ítems de datos. (Ver [9] para la prueba) 6.5.2 Simulación Realizamos simulaciones con dos diferentes distribución de frecuencias de ítems de datos: Uniforme y Zipfian (con media= 0.27). En ambos casos se obtienen mejoras similares de ",
                " con cebroides uniinstantáneos. Este resultado tiene importantes implicaciones. En casos con popularidad sesgada hacia ciertos ítems de datos, las mejoras agregadas en ",
                " en todas las solicitudes de ítems de datos siguen siendo las mismas. Incluso en escenarios en los que la frecuencia de acceso a los datos cambia dinámicamente, los zebroids seguirán proporcionando mejoras similares de ",
                ". 7. CONCLUSIONES Y FUTURAS DIRECCIONES DE INVESTIGACIÓN En este estudio, examinamos las mejoras en ",
                " que se pueden obtener en presencia de portadores que entregan un ítem de datos desde un servidor a un cliente. Se cuantificó la variación en la "
            ],
            "translated_annotated_text": "Una evaluación de la latencia de disponibilidad en redes ad hoc vehiculares basadas en portador Shahram Ghandeharizadeh Dept of Computer Science Univ of Southern California Los Angeles, CA 90089, USA shahram@usc.edu Shyam Kapadia Dept of Computer Science Univ of Southern California Los Angeles, CA 90089, USA kapadia@usc.edu Bhaskar Krishna Nuestro entorno de destino utiliza portadores de datos, llamados zebroids, donde un dispositivo móvil lleva un elemento de datos en nombre de un servidor a un cliente, minimizando así su disponibilidad \"latencia\". En este estudio, cuantificamos la variación en la \"latencia\" de disponibilidad con los zebroideos en función de un rico conjunto de parámetros como densidad de coche, almacenamiento por dispositivo, tamaño del repositorio y políticas de reemplazo empleadas por los zebroideos. Utilizando análisis y simulaciones extensas, obtenemos ideas novedosas sobre el diseño de sistemas basados en operadores. Se pueden obtener mejoras significativas en la \"latencia\" con zebroids a costa de un mínimo de gastos generales. Estas mejoras se producen incluso en escenarios con menor precisión en las predicciones de las rutas del coche. Dos hallazgos particularmente sorprendentes son: (1) una política de sustitución aleatoria ingenua empleada por los zebroids muestra rendimiento competitivo, y (2) mejoras de \"latencia\" obtenidas con una instanciación simplificada de zebroids se encuentran robustos a los cambios en la distribución de popularidad de los ítems de datos. Categorías y Subject Descriptores: C.2.4 [Sistemas distribuidos]: Términos Generales del Cliente/Servidor: Algoritmos, Rendimiento, Diseño, Experimentación. 1. INTRODUCCIÓN Los avances tecnológicos en las esferas del almacenamiento y las comunicaciones inalámbricas han hecho posible ahora prever la entrega a petición de datos, por ejemplo, para clips de vídeo y audio, en redes de peer-topeer vehiculares. En trabajos previos, Ghandeharizadeh et al. [10] introduce el concepto de vehículos equipados con un dispositivo Car-to-Car-Peer-toPeer, denominado AutoMata, para el entretenimiento dentro del vehículo. Las características notables de un AutoMata incluyen un dispositivo de almacenamiento masivo que ofrece cientos de gigabytes (GB) de almacenamiento, un procesador rápido y varios tipos de tarjetas de red. Incluso con las unidades de disco actuales de 500 GB, un repositorio de contenido de entretenimiento diverso puede exceder la capacidad de almacenamiento de un solo AutoMata. Tales repositorios constituyen el foco de este estudio. Para intercambiar datos, suponemos que cada AutoMata está configurado con dos tipos de tarjetas de red: 1) una tarjeta de red de baja anchura de banda con un radio-rango largo en el orden de millas que permite a un dispositivo AutoMata comunicarse con una estación celular cercana o WiMax, 2) una tarjeta de red de alta anchura de banda con un radio-rango limitado en el orden de cientos de pies. La conexión de ancho de banda alto admite tasas de datos en el orden de decenas a cientos de megabits por segundo y representa la red ad-hoc peer a peer entre los vehículos. Esto se etiqueta como el plano de datos y se emplea para intercambiar elementos de datos entre dispositivos. La conexión de baja anchura de banda sirve como plano de control, permitiendo a los dispositivos AutoMata intercambiar meta-datos con uno o más servidores centralizados. Esta conexión ofrece anchos de banda en el orden de decenas a cientos de Kilobits por segundo. Los servidores centralizados, denominados despachadores, calculan los calendarios de entrega de datos a lo largo del plano de datos utilizando los metadatos proporcionados. Estos horarios se transmiten a los vehículos participantes que utilizan el avión de control. La viabilidad técnica de tal arquitectura de dos niveles se presenta en [7], con resultados preliminares para demostrar que el ancho de banda del plano de control es suficiente para el intercambio de la información de control necesaria para realizar tal aplicación. En un escenario típico, un dispositivo AutoMata presenta a un pasajero con una lista de elementos de datos1, mostrando tanto el nombre de cada elemento de datos como su disponibilidad \"latencia\". Este último, denotado como ♥, se define como el momento más temprano en que el cliente encuentra una copia de su elemento de datos solicitado. Un elemento de datos está disponible inmediatamente cuando reside en el almacenamiento local del dispositivo AutoMata que atiende a la solicitud. Debido a las restricciones de almacenamiento, un AutoMata puede no almacenar todo el repositorio. En este caso, la \"latencia\" de disponibilidad es el tiempo desde que el usuario emite una solicitud hasta que el AutoMata encuentra otro coche que contiene el elemento de datos referenciado. (Los términos coche y AutoMata se utilizan indistintamente en este estudio.) La \"latencia\" de disponibilidad para un artículo es una función de la ubicación actual del cliente, su destino y ruta de viaje, el modelo de movilidad de los vehículos equipados con AutoMata, el número de réplicas construidas para los diferentes elementos de datos, y la colocación de réplicas de elementos de datos a través de los vehículos. Un método para mejorar la \"latencia\" de disponibilidad es emplear portadores de datos que transportan una réplica del elemento de datos solicitado desde un coche servidor que lo contiene a un cliente que lo solicitó. Estos portadores de datos se denominan zebroids. La selección de cebroides es facilitada por la arquitectura de dos niveles. El plano de control permite la recopilación centralizada de información en un despachador presente en una estación base.2 Algunos ejemplos de control en1 Sin pérdida de generalidad, el término elemento de datos puede ser medios tradicionales como texto o medios continuos como un clip de audio o vídeo. 2 Puede haber despachadores desplegados en un subconjunto de las estaciones de base para la tolerancia a fallos y la robustez. Los distribuidores entre estaciones de base pueden comunicarse a través de la infraestructura cableada. 75 formación son actualmente solicitudes activas, ruta de viaje de los clientes y sus destinos, y caminos de los otros coches. Para cada solicitud del cliente, el despachador puede elegir un conjunto de portadores z que colaboran para transferir un elemento de datos de un servidor a un cliente (z-relay zebroids). Aquí, z es el número de zebroids tales que 0 ≤ z < N, donde N es el número total de coches. Cuando z = 0 no hay portadores, lo que requiere un servidor para entregar el elemento de datos directamente al cliente. De lo contrario, el equipo de relé elegido de z zebroids se entregará los datos de forma transitoria unos a otros para llegar al cliente, reduciendo así la \"latencia\" de la disponibilidad (para más detalles, véase la sección 3.1). Para aumentar la robustez, el despachador puede emplear múltiples equipos de relé de portadoras z para cada solicitud. Esto puede ser útil en escenarios en los que el despachador tiene menor precisión de predicción en la información sobre las rutas de los coches. Por último, las restricciones de almacenamiento pueden requerir que un zebroid desaloje elementos de datos existentes de su almacenamiento local para acomodar el elemento solicitado por el cliente. En este estudio, se cuantifican los siguientes factores principales que afectan a la \"latencia\" de disponibilidad en presencia de zebroideos: (i) tamaño del repositorio de datos, (ii) densidad del coche, (iii) capacidad de almacenamiento por coche, (iv) duración del viaje del cliente, (v) esquema de reemplazo empleado por los zebroideos, y (vi) exactitud de las predicciones de la ruta del coche. Para un subconjunto significativo de estos factores, abordamos algunas preguntas clave relativas al uso de zebroids tanto a través del análisis como de simulaciones extensas. Nuestras principales conclusiones son las siguientes. Una política de sustitución aleatoria ingenua empleada por los zebroids muestra un rendimiento competitivo en términos de disponibilidad \"latencia\". Con esta política, se pueden obtener mejoras sustanciales en la \"latencia\" con zebroids a un mínimo de gastos generales de reemplazo. En escenarios más prácticos, donde el despachador tiene información inexacta sobre las rutas del coche, los zebroids continúan proporcionando mejoras de \"latencia\". Un resultado sorprendente es que los cambios en la popularidad de los ítems de datos no impactan las ganancias de \"latencia\" obtenidas con una simple instanciación de z-relay zebroids llamados cebroids uno-instantáneos (ver Sección 3.1). Este estudio sugiere una serie de direcciones interesantes a seguir para obtener una mejor comprensión del diseño de sistemas basados en el portador que mejoran la \"latencia\" de disponibilidad. Trabajo relacionado: La replicación en redes móviles ad-hoc ha sido un tema ampliamente estudiado [11, 12, 15]. Sin embargo, ninguno de estos estudios emplea zebroids como portadores de datos para reducir la \"latencia\" de las solicitudes de los clientes. Varios estudios novedosos e importantes como ZebraNet [13], DakNet [14], Data Mules [16], Message Ferries [20] y Seek and Focus [17] han analizado factores que afectan a redes conectadas intermitentemente consistentes en portadores de datos similares en espíritu a los zebroideos. Los factores considerados por cada estudio son dictados por su supuesto entorno y aplicación diana. Una característica novedosa de nuestro estudio es el impacto en la disponibilidad \"latencia\" para un repositorio de datos dado de elementos. En [9] se puede obtener una descripción detallada de las obras relacionadas. El resto de este documento está organizado de la siguiente manera. La sección 2 ofrece una visión general de la terminología junto con los factores que afectan a la \"latencia\" de la disponibilidad en presencia de zebroideos. En la sección 3 se describe cómo se pueden emplear los cebroides. En la sección 4 se proporciona información detallada sobre la metodología de análisis empleada para captar el desempeño con los zebroids. En la sección 5 se describen los detalles del entorno de simulación utilizado para la evaluación. La sección 6 recoge las preguntas clave examinadas en este estudio y las responde a través de análisis y simulaciones. Por último, en la sección 7 se presentan breves conclusiones y futuras orientaciones de la investigación. 2. SINOPSIS Y TERMINOLOGÍA La Tabla 1 resume la notación de los parámetros utilizados en el artículo. A continuación introducimos algunas terminologías utilizadas en el artículo. Asumir una red de coches N AutoMata equipados, cada uno con capacidad de almacenamiento de α bytes. La capacidad total de almacenamiento del sistema es ST = N. Hay elementos de datos T en la base de datos, cada uno con parámetros de base de datos T Número de elementos de datos. Si Tamaño del ítem de datos i fi Frecuencia de acceso al ítem de datos i. Parámetros de replicación Ri Frecuencia normalizada de acceso al ítem de datos i ri Número de réplicas para ítem de datos i n Caracteriza un esquema de replicación particular. ♥i Disponibilidad media \"latencia\" de los datos i ♥agg Disponibilidad agregada \"latencia\", ♥agg = T j=1 ♥j · fj AutoMata System Parámetros G Número de celdas en el mapa (2D-torus). N Número de dispositivos AutoMata en el sistema. α Capacidad de almacenamiento por AutoMata. γ Duración del viaje del cliente AutoMata. ST Capacidad total de almacenamiento del sistema AutoMata, ST = N · α. Cuadro 1: Términos y sus definiciones tamaño Si. La frecuencia de acceso al ítem de datos i se denota como fi, con T j=1 fj = 1. Deje que la duración del viaje del cliente AutoMata en consideración sea γ. Ahora definimos la frecuencia normalizada de acceso al ítem de datos i, denotado por Ri, como: Ri = (fi)n T j=1(fj)n ; 0 ≤ n ≤ فارسى (1) El exponente n caracteriza una técnica de replicación particular. Un esquema de replicación de raíz cuadrada se realiza cuando n = 0.5 [5]. Esto sirve como la línea base para la comparación con el caso cuando se despliegan zebroids. Ri se normaliza a un valor entre 0 y 1. El número de réplicas para el dato i, denotado como ri, es: ri = min (N, max (1, Ri·N Si )). Esto capta el caso cuando al menos una copia de cada elemento de datos debe estar presente en la red ad-hoc en todo momento. En los casos en que un elemento de datos se puede perder de la red ad-hoc, esta ecuación se convierte en ri = min (N, max (0, Ri·N Si )). En este caso, es posible que sea necesario satisfacer una solicitud para el elemento de datos perdido mediante la obtención del elemento desde un servidor remoto. La \"latencia\" de disponibilidad para un elemento de datos i, denotado como Łi, se define como el primer momento en el que un cliente AutoMata encontrará la primera réplica del elemento accesible a él. Si esta condición no se cumple, entonces se establece a i. Esto indica que el elemento de datos I no estaba disponible para el cliente durante su viaje. Tenga en cuenta que como hay al menos una réplica en el sistema para cada elemento de datos i, al establecer γ a un gran valor nos aseguramos de que los clientes soliciten cualquier elemento de datos i será satisfecho. Sin embargo, en la mayoría de las circunstancias prácticas γ puede no ser tan grande como para encontrar cada elemento de datos. Estamos interesados en la disponibilidad \"latencia\" observada en todos los datos. Por lo tanto, aumentamos la \"latencia\" media de disponibilidad para cada ítem de datos i con su fi para obtener la siguiente \"latencia\" de disponibilidad ponderada (?agg) métrica:?agg = T i=1?i · fi A continuación, presentamos nuestro enfoque de solución describiendo cómo se seleccionan los zebroids. 3. ENFOQUE DE SOLUCIÓN 3.1 Zebroids Cuando un cliente hace referencia a un elemento de datos que falta en su almacenamiento local, el despachador identifica todos los coches con una copia del elemento de datos como servidores. A continuación, el despachador obtiene las rutas futuras de todos los coches para una duración de tiempo finito equivalente al tiempo máximo que el cliente está dispuesto a esperar a que su solicitud sea atendido. Utilizando esta información, el despachador programa la ruta de entrega más rápida desde cualquiera de los servidores al cliente utilizando cualquier otro coche como transportistas intermedios. Por lo tanto, determina el conjunto óptimo de decisiones de reenvío 76 que permitirá que el elemento de datos se entreguen al cliente en el mínimo de tiempo. Tenga en cuenta que la \"latencia\" a lo largo de la ruta de entrega más rápida que emplea un equipo de relé de z zebroids es similar a la obtenida con el encaminamiento epidémico [19] bajo los supuestos de almacenamiento infinito y ninguna interferencia. Una simple instanciación de z-relay zebroids se produce cuando z = 1 y la solicitud de los clientes desencadena una transferencia de una copia del elemento de datos solicitado de un servidor a un zebroid en su vecindad. Tal zebroideo se denomina cebroide uniinstantáneo. En algunos casos, el expedidor podría tener información inexacta sobre las rutas de los coches. Por lo tanto, un zebroid programado sobre la base de esta información inexacta puede no reunirse con su cliente objetivo. Para minimizar la probabilidad de tales escenarios, el despachador puede programar múltiples zebroids. Esto puede incurrir en gastos generales adicionales debido a la utilización redundante de recursos para obtener las mismas mejoras de \"latencia\". El tiempo necesario para transferir un elemento de datos de un servidor a un zebroid depende de su tamaño y del ancho de banda del enlace disponible. Con elementos de datos pequeños, es razonable suponer que este tiempo de transferencia es pequeño, especialmente en presencia del plano de datos de alto ancho de banda. Los elementos de datos grandes se pueden dividir en trozos más pequeños que permiten al despachador programar uno o más zebroids para entregar cada trozo a un cliente de una manera oportuna. Esta sigue siendo una dirección de investigación futura. Inicialmente, el número de réplicas para cada ítem de datos puede ser calculado usando la Ecuación 1. Este esquema calcula el número de réplicas de datos en función de su popularidad. Es estática porque el número de réplicas en el sistema no cambia y no se realizan reemplazos. Por lo tanto, esto se conoce como el ambiente de los nozebroids. Cuantificamos el desempeño de las diversas políticas de reemplazo con referencia a esta línea base que no emplea zebroids. Uno puede asumir una fase de arranque en frío, donde inicialmente sólo una o pocas copias de cada elemento de datos existen en el sistema. Muchas ranuras de almacenamiento de los coches pueden estar desocupados. Cuando los coches se encuentran entre sí, construyen nuevas réplicas de algunos elementos de datos seleccionados para ocupar los huecos vacíos. El procedimiento de selección puede consistir en elegir los datos de manera uniforme al azar. Nuevas réplicas se crean siempre y cuando un coche tiene un cierto umbral de su almacenamiento desocupado. Eventualmente, la mayoría de la capacidad de almacenamiento de un coche se agotará. 3.2 Políticas de reemplazo basadas en el operador Las políticas de reemplazo consideradas en este documento son reactivas ya que una sustitución se produce sólo en respuesta a una solicitud emitida para un determinado elemento de datos. Cuando el almacenamiento local de un zebroid está completamente ocupado, necesita reemplazar uno de sus elementos existentes para llevar el elemento de datos solicitado por el cliente. Para ello, el zebroid debe seleccionar a un candidato apropiado para el desalojo. Este proceso de decisión es análogo al encontrado en la paginación del sistema operativo donde el objetivo es maximizar la relación de acceso a la caché para evitar el retraso del acceso al disco [18]. Las políticas de reemplazo basadas en transportistas empleadas en nuestro estudio son las menos usadas recientemente (LRU), las menos usadas con frecuencia (LFU) y las aleatorias (donde un candidato de desalojo es elegido uniformemente al azar). Hemos considerado variantes locales y globales de las políticas LRU/LFU que determinan si el conocimiento local o global de los contenidos de los coches conocidos en el expedidor se utiliza para la decisión de desalojo en un zebroid (ver [9] para más detalles). Las pólizas de sustitución entrañan los siguientes gastos generales. En primer lugar, la complejidad asociada a la aplicación de una política. En segundo lugar, el ancho de banda utilizado para transferir una copia de un elemento de datos de un servidor al zebroid. En tercer lugar, el número medio de reemplazos realizados por los zebroides. Tenga en cuenta que en el caso de no cebroides no se incurre en gastos generales. Las métricas consideradas en el presente estudio son la disponibilidad agregada \"latencia\", \"agg\", la mejora porcentual en \"agg\" con zebroids en comparación con el caso de \"no-zebroids\" y el número medio de reemplazos incurridos por solicitud del cliente, que es un indicador de los gastos generales incurridos por los zebroids. Tenga en cuenta que los despachadores con la ayuda del plano de control pueden asegurarse de que no se pierda ningún elemento de datos del sistema. En otras palabras, al menos una réplica de cada elemento de datos se mantiene en la red ad-hoc en todo momento. En tales casos, aunque un coche puede encontrarse con un cliente solicitante antes que otros servidores, si su almacenamiento local contiene elementos de datos con sólo una copia en el sistema, entonces tal coche no se elige como un zebroid. 4. METODOLOGÍA DE ANÁLISIS Aquí presentamos la metodología de evaluación analítica y algunas aproximaciones como ecuaciones de forma cerrada que capturan las mejoras en la \"latencia\" de disponibilidad que se pueden obtener tanto con cebroides oneinstantáneos como con z-relay. Primero, presentamos algunos preliminares de nuestra metodología de análisis. • Que N sea el número de coches en la red que realizan una caminata aleatoria en 2D en un toro de G× G. Un coche adicional sirve como un cliente que entrega un total de N + 1 coches. Este modelo de movilidad se ha utilizado ampliamente en la literatura [17, 16] principalmente porque es susceptible de análisis y proporciona una base de referencia para comparar el rendimiento de otros modelos de movilidad. Además, esta clase de modelos de movilidad markoviana se ha utilizado para modelar los movimientos de los vehículos [3, 21]. • Asumimos que todos los coches comienzan desde la distribución estacionaria y realizan caminatas aleatorias independientes. Aunque para escenarios de densidad escasa, la suposición de independencia se mantiene, ya no es válido cuando N se aproxima a G. • Deje que el tamaño del repositorio de ítems de datos de interés sea T. Además, el ítem de datos i tiene réplicas ri. Esto implica que los coches ri, identificados como servidores, tienen una copia de este elemento de datos cuando el cliente solicita el elemento i. Todos los resultados de análisis presentados en esta sección se obtienen asumiendo que el cliente está dispuesto a esperar el tiempo necesario para que su solicitud sea satisfecha (duración del viaje sin límite γ = ­). Con el modelo de movilidad al azar en un torso 2D, hay una garantía de que mientras haya al menos una réplica del elemento de datos solicitado en la red, el cliente se encontrará con esta réplica [2]. Las extensiones al análisis que también consideran las duraciones del viaje finito se pueden obtener en [9]. Considere un escenario en el que no se emplean zebroids. En este caso, la \"latencia\" de disponibilidad esperada para el ítem de datos es el tiempo de reunión esperado de la caminata aleatoria realizada por el cliente con cualquiera de las caminatas aleatorias realizadas por los servidores. Aldous et al. [2] muestran que el tiempo de reunión de dos caminatas aleatorias en tal entorno puede modelarse como una distribución exponencial con la media C = c · G · log G, donde la constante c 0,17 para G ≥ 25. El tiempo de reunión, o equivalente a la disponibilidad de \"latencia\" para el cliente que solicita datos i es el momento hasta que se encuentra con cualquiera de estas réplicas de ri por primera vez. Esta es también una distribución exponencial con el siguiente valor esperado (obsérvese que esta formulación es válida sólo para casos escasos cuando G >> ri): فارسىi = cGlogG ri La disponibilidad agregada \"latencia\" sin emplear zebroids es entonces esta expresión promediada sobre todos los ítems de datos, ponderada por su frecuencia de acceso: Por otra parte, esta réplica se genera en el paso de tiempo cuando el cliente emite la solicitud. Que Nc i sea el número total esperado de nodos que están en la misma celda que cualquiera de los servidores ri. Luego, tenemos Nc i = (N − ri) · (1 − (1 − 1 G )ri ) (3) En el modelo analítico, suponemos que Nc i nuevas réplicas se crean, de modo que el número total de réplicas se aumenta a ri + Nc i. La \"latencia\" de la disponibilidad se reduce ya que el cliente es más propenso a cumplir con una réplica antes. La \"latencia\" agregada de disponibilidad esperada en el caso de cebroides uno-instantáneos es dada entonces por, Łagg(zeb) = T i=1 fi · c · G · log G ri + Nc i = T i=1 fi · C ri + Nc i (4) Tenga en cuenta que al obtener esta expresión, para facilitar el análisis, hemos asumido que las nuevas Así trata a todos los portadores de Nc i de forma independiente, al igual que los servidores originales ri. Como mostraremos a continuación en comparación con las simulaciones, esta aproximación proporciona un límite superior a las mejoras que se pueden obtener porque resulta en una menor \"latencia\" esperada en el cliente. Cabe señalar que el procedimiento mencionado anteriormente dará una \"latencia\" similar a la empleada por un expedidor que emplee cebroides oneinstantáneos (véase la sección 3.1). Dado que el despachador es consciente de todos los movimientos futuros del coche que sólo transferiría el elemento de datos solicitado en un único zebroid, si determina que el zebroid se reunirá con el cliente antes que cualquier otro servidor. Este zebroid seleccionado está incluido en las nuevas réplicas de Nc i. 4.2 z-relay zebroids Para calcular la \"latencia\" de disponibilidad esperada con z-relay zebroids, utilizamos un análogo de problema de coloración similar a un enfoque utilizado por Spyropoulos et al. [17]. En [9] se dan detalles del procedimiento para obtener una expresión de forma cerrada. La \"latencia\" de la disponibilidad agregada con z-relay zebroids es dada por, Łagg(zeb) = T i=1 [fi · C N + 1 · 1 N + 1 − ri · (N · log N ri − log (N + 1 − ri))] (5) 5. METODOLOGÍA DE SIMULACIÓN El entorno de simulación considerado en este estudio se compone de vehículos como automóviles que llevan una fracción del repositorio de datos. Un parámetro de precisión de predicción proporciona inherentemente una cierta garantía probabilística sobre la confianza de las predicciones de ruta del automóvil conocidas en el despachador. Un valor del 100% implica que las rutas exactas de todos los coches se conocen en todo momento. Un valor del 70% para este parámetro indica que las rutas previstas para los coches coincidirán con las reales con probabilidad 0.7. Tenga en cuenta que esta probabilidad se extiende a través de las rutas del coche durante toda la duración del viaje. Ahora proporcionamos los preliminares del estudio de simulación y luego describimos los parámetros de configuración utilizados en nuestros experimentos. • Similar a la metodología de análisis, el mapa utilizado es un toro 2D. Un modelo de movilidad Markov que representa una caminata aleatoria 2D imparcial en la superficie del toro describe el movimiento de los coches a través de este toro. • Cada cuadrícula/célula es un estado único de esta cadena Markov. En cada ranura de tiempo, cada coche hace una transición de una celda a cualquiera de sus 8 celdas vecinas. La transición es una función de la ubicación actual del coche y una matriz de transición de probabilidad Q = [qij] donde qij es la probabilidad de transición del estado i al estado j. Solo los coches equipados con AutoMata dentro de la misma celda pueden comunicarse entre sí. • Los parámetros γ,  han sido discretizados y expresados en términos del número de franjas horarias. • Un dispositivo AutoMata no mantiene más de una réplica de un elemento de datos. Esto se debe a que las réplicas adicionales ocupan el almacenamiento sin proporcionar beneficios. • Pueden emplearse cebroides de relés uno o z instantáneos por solicitud del cliente para mejorar la \"latencia\". • A menos que se mencione lo contrario, se supone que el parámetro de precisión de la predicción es del 100%. Esto se debe a que este estudio pretende cuantificar el efecto de un gran número de parámetros individualmente sobre la \"latencia\" de la disponibilidad. Aquí, establecemos el tamaño de cada elemento de datos, Si, para ser 1. α representa el número de ranuras de almacenamiento por AutoMata. Cada ranura de almacenamiento almacena un elemento de datos. γ representa la duración del viaje de los clientes en términos del número de franjas horarias. Por lo tanto, los posibles valores de disponibilidad \"latencia\" están entre 0 y γ.  se define como el número de franjas horarias después de lo cual un dispositivo cliente AutoMata encontrará una réplica del elemento de datos por primera vez. Si una réplica para el elemento de datos solicitado fue encontrado por el cliente en la primera celda, a continuación, se establece  = 0. Si se trata de un elemento de datos solicitado, el cliente no encontró ninguna copia del elemento de datos solicitado durante todo su viaje. En todas nuestras simulaciones, para la ilustración consideramos un 5 × 5 2D-torus con γ fijado a 10. Nuestros experimentos indican que las tendencias en la escala de resultados a mapas de mayor tamaño. Simulamos una distribución sesgada de acceso a los datos T que obedece a la ley Ziffs con una media de 0.27. Esta distribución corresponde a la venta de entradas de cine en los Estados Unidos [6]. Empleamos un esquema de replicación que asigna réplicas para un elemento de datos en función de la raíz cuadrada de la frecuencia de acceso de ese elemento. Se muestra que el esquema de replicación de raíz cuadrada tiene un rendimiento competitivo de \"latencia\" en un gran espacio de parámetros [8]. Las réplicas de elementos de datos se distribuyen uniformemente entre los dispositivos AutoMata. Esto sirve como el caso de la línea base sin cebros. El esquema de raíz cuadrada también proporciona la distribución de réplica inicial cuando se emplean zebroids. Tenga en cuenta que los reemplazos realizados por los zebroids causarán cambios en la distribución de réplica de ítems de datos. Las solicitudes generadas según la distribución Zipf se emiten una a la vez. El coche cliente que emite la solicitud se elige de una manera redonda-robina. Después de un período máximo de γ, se registra la \"latencia\" encontrada por esta solicitud. En todos los resultados de simulación, cada punto es un promedio de 200.000 solicitudes. Además, los intervalos de confianza del 95% determinados para los resultados son bastante ajustados para las métricas de \"latencia\" y los gastos generales de reemplazo. Por lo tanto, sólo los presentamos para la métrica que captura la mejora porcentual en \"latencia\" con respecto al caso de no-zebroides. 6. RESULTADOS En esta sección, describimos nuestros resultados de evaluación donde se abordan las siguientes preguntas clave. Con una amplia selección de esquemas de reemplazo disponibles para un zebroid, ¿cuál es su efecto en la \"latencia\" de disponibilidad? Una pregunta más central es: Do zebroids provide 78 0 20 40 60 80 100 1.5 2 2.5 3 3.5 Número de coches Disponibilidad agregada \"latencia\" (­agg ) lru_global lfu_global lru_local lfu_local al azar Figura 1: La Figura 1 muestra la disponibilidad \"latencia\" al emplear cebroids uno-instantáneos en función de los valores (N,α), cuando ¿Cuáles son los gastos generales asociados en el empleo de estos zebroides? ¿Qué sucede con estas mejoras en escenarios donde un despachador puede tener información imperfecta sobre las rutas del automóvil? ¿Cuáles son las compensaciones inherentes entre la densidad del automóvil y el almacenamiento por automóvil en lo que respecta a su efecto combinado e individual sobre la \"latencia\" de la disponibilidad en presencia de zebroids? Presentamos análisis simples y simulaciones detalladas para proporcionar respuestas a estas preguntas, así como para obtener información sobre el diseño de sistemas basados en operadores. 6.1 ¿Cómo un esquema de reemplazo empleado por una \"latencia\" de disponibilidad de impacto zebroideo? Para ilustrarlo, presentamos experimentos de escala en los que se emplean cebroides oneinstantáneos (ver Figura 1). Por escala, queremos decir que α y N se cambian proporcionalmente para mantener el almacenamiento total del sistema, ST, constante. Aquí, T = 50 y ST = 200. Elegimos los siguientes valores de (N,α) = {(20,10), (25,8), (50,4), (100,2)}. La cifra indica que un plan de sustitución al azar muestra un rendimiento competitivo. Esto se debe a varias razones. Recuerde que la distribución de réplica inicial se establece según el esquema de replicación de raíz cuadrada. El esquema de reemplazo aleatorio no altera esta distribución ya que hace que los reemplazos ciegos a la popularidad de un elemento de datos. Sin embargo, los reemplazos causan una reorganización dinámica de los datos a fin de atender mejor a la solicitud activa actual. Además, el patrón de movilidad de los coches es aleatorio, por lo que las ubicaciones desde las que los clientes emiten las solicitudes también son aleatorias y no se conocen a priori en el despachador. Estas conclusiones son importantes porque una política de sustitución aleatoria puede aplicarse de manera descentralizada. Los esquemas lru-global y lfu-global proporcionan un desempeño de \"latencia\" que es peor que aleatorio. Esto se debe a que estas políticas desarrollan rápidamente una preferencia por los elementos de datos más populares, creando así un mayor número de réplicas para ellos. Durante el desalojo, los datos más populares casi nunca se seleccionan como candidatos de reemplazo. En consecuencia, hay menos réplicas para los artículos menos populares. Por lo tanto, la distribución inicial del elemento de datos replica cambios de raíz cuadrada a que se asemeja a replicación lineal. El mayor número de réplicas para los ítems de datos populares proporciona beneficios adicionales marginales, mientras que el menor número de réplicas para los otros ítems de datos perjudica el desempeño de \"latencia\" de estas políticas globales. Los esquemas lfu-local y lru-local tienen un rendimiento similar al aleatorio ya que no tienen suficiente historial de solicitudes de datos locales. Especulamos que el desempeño de estas políticas locales se acercará al de sus variantes globales para una historia suficientemente grande de solicitudes de ítems de datos. Debido al rendimiento competitivo demostrado por una política aleatoria, para el resto del documento, presentamos el rendimiento de los zebroids que emplean una política de reemplazo aleatorio. 6.2 ¿Los cebroides proporcionan mejoras significativas en la \"latencia\" de disponibilidad? Encontramos que en muchos escenarios que emplean zebroids proporciona mejoras sustanciales en la \"latencia\" de disponibilidad. 6.2.1 Análisis Primero consideramos el caso de los cebroides uno-instantáneos. La Figura 2.a muestra la variación en Łagg en función de N para T = 10 y α = 1 con 10 × 10 toros usando la Ecuación 4. Los ejes x e y se dibujan a una escala de registro. En la figura 2.b se muestra la mejoría en % en el Agg obtenido con cebroides uniinstantáneos. En este caso, sólo el eje x se dibuja a una escala de registro. Para ilustrar, suponemos que los datos T son solicitados uniformemente. Inicialmente, cuando la red es escasa la aproximación analítica para mejoras en \"latencia\" con zebroids, obtenida de las ecuaciones 2 y 4, coincide estrechamente con los resultados de la simulación. Sin embargo, a medida que N aumenta, la suposición de escasez para la que el análisis es válido, a saber, N+G, ya no es cierta. Por lo tanto, las dos curvas divergen rápidamente. El punto en el que las dos curvas se alejan unas de otras corresponde a un valor de Además, como se mencionó anteriormente, el análisis proporciona un límite superior a las mejoras de \"latencia\", ya que trata las réplicas de nueva creación dadas por Nc i de forma independiente. Sin embargo, estas réplicas de Nc i comienzan desde la misma celda que una de las réplicas de servidor ri. Finalmente, el análisis captura un escenario oneshot donde, dada una distribución de réplica de ítems de datos iniciales, se calcula la disponibilidad \"latencia\". Las nuevas réplicas creadas no afectan las solicitudes futuras del cliente. Debido a las limitaciones de espacio, aquí, se resumen las observaciones en el caso de z-relay zebroids se emplean. El lector interesado puede obtener más detalles en [9]. Observaciones similares, como el caso cebroideo uniinstantaneo, se aplican ya que las curvas de simulación y análisis comienzan de nuevo a divergir cuando los supuestos de análisis ya no son válidos. Sin embargo, la observación clave aquí es que la mejora de la \"latencia\" con z-relay zebroids es significativamente mejor que el caso de cebroids uno-instantáneos, especialmente para escenarios de almacenamiento más bajos. Esto se debe a que en escenarios escasos, los traspasos transitivos entre los zebroides crean un mayor número de réplicas para el ítem de datos solicitado, lo que permite una menor disponibilidad de \"latencia\". Por otra parte, también se observa que la curva de validación de simulación para las mejoras en Łagg con z-relay zebroids se aproxima a la del caso cebroideo uniinstantánea para un almacenamiento más alto (valores de N más altos). Esto se debe a que los cebroides uno-instantáneos son un caso especial de z-relay zebroides. 6.2.2 Simulación Realizamos simulaciones para examinar todo el espectro de almacenamiento obtenido cambiando la densidad del vehículo N o el almacenamiento por coche α para capturar también escenarios en los que no se mantienen las hipótesis de escasez para las que el análisis es válido. Separamos el efecto de N y α capturando la variación de N manteniendo constante α (caso 1) y viceversa (caso 2) tanto con z-relay y cebroides uno-instantáneos. Aquí, establecemos el tamaño del repositorio como T = 25. En el gráfico 3 figura el caso 1 mencionado anteriormente. Se observan tendencias similares con el caso 2, en [9] se dispone de una descripción completa de esos resultados. Con la Figura 3.b, manteniendo constante α, inicialmente aumentando la densidad del coche tiene mayores beneficios de \"latencia\" porque el aumento de N introduce más zebroids en el sistema. A medida que N se incrementa aún más, • reduce porque el almacenamiento total en el sistema sube. En consecuencia, el número de réplicas por elemento de datos sube aumentando así el número de servidores 79. Por lo tanto, la política de reemplazo no puede encontrar un zebroid tan a menudo para transportar el elemento de datos solicitado al cliente antes que cualquiera de los servidores. Por otro lado, el aumento del número de servidores beneficia al caso de no-zebroids al reducir a Agg. El efecto neto da lugar a una reducción de los valores más grandes de N. 10 1 10 2 10 3 10 −1 10 0 10 1 10 2 Número de automóviles no-zebroidsanal no-zebroids sim one-instantaneoussim Agregación Disponibilidad \"latencia\" (­agg ) 2.a) Agg 10 1 10 2 10 3 0 10 20 40 50 60 70 80 90 100 Número de automóviles Las tendencias mencionadas anteriormente son similares a las obtenidas del análisis. Sin embargo, algo contra-intuitivamente con almacenamiento relativamente más alto del sistema, z-relay zebroids proporcionan mejoras ligeramente más bajas en \"latencia\" en comparación con cebroids uno-instantáneos. Especulamos que esto se debe a las diferentes distribuciones de réplicas de ítems de datos impuestas por ellos. Tenga en cuenta que los reemplazos realizados por los zebroids causan fluctuaciones en estas distribuciones de réplica que pueden afectar futuras solicitudes de clientes. Actualmente estamos explorando opciones adecuadas de parámetros que pueden capturar estas distribuciones de réplicas cambiantes. 6.3 ¿Cuáles son los gastos generales derivados de las mejoras en la \"latencia\" de los zebroideos? Encontramos que las mejoras en \"latencia\" con zebroids se obtienen con un mínimo de reemplazo de los gastos generales (< 1 por solicitud del cliente). 6.3.1 Análisis Con cebroides uniinstantáneos, para cada solicitud de cliente se emplea un máximo de un cebroide para mejorar la \"latencia\". Por lo tanto, los gastos generales de sustitución por solicitud del cliente pueden ascender a un máximo de uno. Recordemos que para calcular la \"latencia\" con una sola instantánea 0 50 100 150 200 250 350 400 0 1 2 3 4 5 6 Número de coches Disponibilidad agregada \"latencia\" (?agg ) no-zebroids one-instantaneous z-relays 3.a 0 50 100 150 200 250 300 350 400 0 10 20 30 40 50 60 Número de coches % Mejora en?agg wrt no-ze Ahora un reemplazo sólo se incumple si una de estas réplicas de Nc i de nueva creación se reúne con el cliente antes que cualquiera de los servidores de ri. Que Xri y XNc i respectivamente sean variables aleatorias que capturen el tiempo mínimo hasta que cualquiera de las réplicas de ri y Nc i cumpla con el cliente. Dado que Xri y XNc i se supone que son independientes, por la propiedad de variables aleatorias distribuidas exponencialmente tenemos, Overhead/request = 1 · P(XNc i < Xri ) + 0 · P(Xri ≤ XNc i ) (6) Overhead/request = ri C ri C + Nc i C = ri ri + Nc i (7) Sin embargo, si N  es constante entonces el aumento de las causas N α 80 0 20 40 60 80 100 0 0,05 0,15 0,20 0,25 0,35 0,40 0,45 0,5 Número de coches cebroides instantáneos número medio de reemplazos por solicitud (N=20,α=10) (N=25,α=8) (N=50,α=4) (N=100,α=2) Figura 4: La figura 4 captura el reemplazo de Esto implica que se incurre en un aumento de los gastos generales de sustitución para valores N y α más altos. Por otra parte, cuando ri = N, esto significa que cada coche tiene una réplica de elemento de datos i. Por lo tanto, no se emplean zebroids cuando se solicita este artículo, lo que da lugar a un gasto general/solicitud para este artículo como cero. A continuación, presentamos resultados de simulación que validan nuestra hipótesis de análisis para los gastos generales asociados con el despliegue de cebroides uno-instantáneos. 6.3.2 Simulación En la figura 4 se muestra la superficie de repuesto con cebroides uno-instantáneos cuando se varían (N,α) manteniendo constante el almacenamiento total del sistema. Las tendencias mostradas por la simulación concuerdan con las previstas por el análisis anterior. Sin embargo, el almacenamiento total del sistema puede ser cambiado ya sea por la densidad variable del coche (N) o el almacenamiento por coche (α). Debido a tendencias similares, aquí presentamos el caso cuando α se mantiene constante y N es variada (Figura 5). Referimos al lector a [9] para el caso cuando α es variado y N se mantiene constante. Presentamos un argumento intuitivo para el comportamiento de las curvas superiores de reemplazo de la solicitud. Cuando el almacenamiento es extremadamente escaso de modo que sólo existe una réplica por elemento de datos en la red AutoMata, el número de reemplazos realizados por los zebroids es cero ya que cualquier reemplazo causará que un elemento de datos se pierda del sistema. El despachador garantiza que no se pierda ningún elemento de datos del sistema. En el otro extremo del espectro, si el almacenamiento se vuelve tan abundante que α = T entonces todo el repositorio de elementos de datos se puede replicar en cada coche. El número de reemplazos es de nuevo cero ya que cada solicitud puede ser satisfecha localmente. Un escenario similar ocurre si N se aumenta a un valor tan grande que otro coche con el elemento de datos solicitado siempre está disponible en las proximidades del cliente. Sin embargo, hay un espectro de almacenamiento en el medio donde los reemplazos por los zebroides programados dan lugar a mejoras en el Agg (ver Figura 3). Por otra parte, observamos que para escenarios de almacenamiento escasos, las mejoras más altas con z-relay zebroids se obtienen al costo de un aumento de los gastos generales de reemplazo en comparación con el caso de cebroids uno-instantáneos. Esto se debe a que en el primer caso, cada uno de estos z zebroids seleccionados a lo largo de la ruta de \"latencia\" más baja al cliente necesita realizar un reemplazo. Sin embargo, los gastos generales de sustitución son todavía inferiores a 1 lo que indica que en promedio se necesita menos de un reemplazo por solicitud del cliente, incluso cuando se emplean z-relay zebroids. 0 50 100 150 200 250 300 350 400 0 0,1 0,2 0,3 0,4 0,6 0,7 0,8 0,9 1 Número de coches z-reemplaza uno-instantánea Número medio de reemplazos por solicitud Figura 5: La figura 5 muestra los gastos generales de reemplazo con cebroide para los casos en que N es diferente manteniendo α = 2. 10 20 30 40 50 60 70 80 90 100 0 0,5 1 1,5 2 2,5 3 3,5 4 Porcentaje de predicción no-zebroideos (N=50) uno-instantáneos (N=50) z-relés (N=50) no-zebroideos (N=200) uno-instantáneos (N=200) z-relés (N=200) Disponibilidad agregada Latencia ( 6.4 ¿Qué sucede con la \"latencia\" de disponibilidad con los zebroideos en escenarios con inexactitudes en las predicciones de la ruta del coche? Encontramos que los zebroids continúan proporcionando mejoras en la \"latencia\" de la disponibilidad, incluso con menor precisión en las predicciones de la ruta del coche. Utilizamos un único parámetro p para cuantificar la exactitud de las predicciones de la ruta del coche. 6.4.1 Análisis Dado que p representa la probabilidad de que una ruta del automóvil predicha por el expedidor coincida con la real, por lo tanto, la \"latencia\" con los cebros puede ser aproximada por, 6.4.2 Simulación En la figura 6 se muestra la variación en el Agg en función de esta métrica de precisión de la predicción de ruta. Observamos una reducción suave en la mejora de 81 en Agg a medida que la métrica de precisión de predicción reduce. Para los zebroids que están programados pero no se reúnen con el cliente debido al error de predicción, etiquetamos tales reemplazos hechos por los zebroids como fallados. Se ve que los reemplazos fallidos aumentan gradualmente a medida que la precisión de la predicción se reduce. 6.5 ¿En qué condiciones se maximizan las mejoras en la \"latencia\" de la disponibilidad con los zebroideos? Sorprendentemente, encontramos que las mejoras en \"latencia\" obtenidas con cebroides uniinstantáneos son independientes de la distribución de entrada de la popularidad de los ítems de datos. 6.5.1 Análisis La diferencia fraccionaria (marcada en la letra ) en la \"latencia\" entre los cebroides no-zebroideos y los cebroides uno-instantáneos se obtiene a partir de las ecuaciones 2, 3 y 4 como \"T i=1 fi·C ri − T i=1 fi·C ri+(N−ri)·(1−(1− 1 G )ri) Let α = 1, haciendo el almacenamiento total en el sistema ST = N. Suponiendo que la distribución de réplica inicial es según el esquema de replicación de raíz cuadrada, tenemos, ri = fi·N T j = 1 fj. Por lo tanto, obtenemos fi = K2 ·r2 i N2, donde K = T j=1 fj. Utilizando esto, junto con la aproximación (1 − x)n 1 − n · x para x pequeña, simplificamos la ecuación anterior para obtener, • = 1 − T i=1 ri 1+ N−ri G T i=1 ri Para determinar cuándo se maximizan las ganancias con cebroides uno-instantáneos, podemos enmarcar un problema de optimización de la siguiente manera: Maximizar •, sujeto a T i Con un esquema de replicación de raíz cuadrada, las mejoras obtenidas con cebroides uniinstantáneos son independientes de la distribución de popularidad de entrada de los ítems de datos. (Ver [9] para la prueba) 6.5.2 Simulación Realizamos simulaciones con dos diferentes distribución de frecuencias de ítems de datos: Uniforme y Zipfian (con media= 0.27). En ambos casos se obtienen mejoras similares de \"latencia\" con cebroides uniinstantáneos. Este resultado tiene importantes implicaciones. En casos con popularidad sesgada hacia ciertos ítems de datos, las mejoras agregadas en \"latencia\" en todas las solicitudes de ítems de datos siguen siendo las mismas. Incluso en escenarios en los que la frecuencia de acceso a los datos cambia dinámicamente, los zebroids seguirán proporcionando mejoras similares de \"latencia\". 7. CONCLUSIONES Y FUTURAS DIRECCIONES DE INVESTIGACIÓN En este estudio, examinamos las mejoras en \"latencia\" que se pueden obtener en presencia de portadores que entregan un ítem de datos desde un servidor a un cliente. Se cuantificó la variación en la \"latencia\" de la disponibilidad en función de un rico conjunto de parámetros como la densidad del coche, el almacenamiento por coche, el tamaño de la base de datos de título y las políticas de reemplazo empleadas por los zebroids. A continuación se resumen algunas direcciones clave de investigación en el futuro que pretendemos seguir. Para reflejar mejor la realidad nos gustaría validar las observaciones obtenidas de este estudio con algunos rastros de simulación del mundo real de movimientos vehiculares (por ejemplo usando CORSIM [1]). Esto también servirá como validación para la utilidad del modelo de movilidad Markov utilizado en este estudio. Actualmente estamos analizando el desempeño de los zebroids en un conjunto de datos del mundo real que comprende una red ad-hoc de autobuses que se mueven alrededor de un pequeño barrio en Amherst [4]. Los cebroides también se pueden utilizar para la entrega de datos que transportan información sensible al retraso con una determinada caducidad. Las extensiones a zebroids que satisfacen estos requisitos de aplicación presentan una dirección de investigación futura interesante. 8. AGRADECIMIENTOS Esta investigación fue apoyada en parte por una beca Annenberg y subvenciones NSF numeradas CNS-0435505 (NeTS NOSS), CNS-0347621 (CAREER), y IIS-0307908. 9. REFERENCIAS [1] Administración Federal de Carreteras. Simulación del corredor. Versión 5.1, http://www.ops.fhwa.dot.gov/trafficanalysistools/cors im.htm. [2] D. Aldous y J. Llena. Cadenas de markov reversibles y caminatas aleatorias en gráficos. En preparación. [3] A. Bar-Noy, I. Kessler y M. Sidi. Usuarios móviles: Para actualizar o no actualizar. En IEEE Infocom, 1994. [4] J. Burgess, B. Gallagher, D. Jensen, y B. Levine. MaxProp: Enrutamiento para redes tolerantes a perturbaciones basadas en vehículos. En IEEE Infocom, abril de 2006. [5] E. Cohen y S. Shenker. Estrategias de replicación en redes de pares no estructuradas. En SIGCOMM, 2002. [6] A. Dan, D. Dias, R. Mukherjee, D. Sitaram y R. Tewari. Buffering y Caching en servidores de vídeo a gran escala. En COMPCON, 1995. [7] S. Ghandeharizadeh, S. Kapadia, y B. Krishnamachari. PAVAN: Marco normativo para la disponibilidad de contenidos en las redes ad hoc de vehículos. En VANET, Nueva York, Nueva York, Estados Unidos, 2004. ACM Press. [8] S. Ghandeharizadeh, S. Kapadia, y B. Krishnamachari. Comparación de estrategias de replicación para la disponibilidad de contenido en redes C2P2. En MDM, mayo de 2005. [9] S. Ghandeharizadeh, S. Kapadia, y B. Krishnamachari. Una evaluación de la latencia de disponibilidad en redes de vehículos ad-hoc basadas en el portador. Informe técnico, Departamento de Ciencias de la Computación, Universidad del Sur de California, CENG-2006-1, 2006. [10] S. Ghandeharizadeh y B. Krishnamachari. C2p2: Una red inter pares para servicios de información de automóviles a petición. En Globe. IEEE, 2004. [11] T. Hara. Asignación eficaz de réplicas en redes ad-hoc para mejorar la accesibilidad de datos. En IEEE Infocom, 2001. [12] H. Hayashi, T. Hara, y S. Nishio. Un método de asignación de réplica Adaptarse a los cambios de topología en redes ad-hoc. En DEXA, 2005. [13] P. Juang, H. Oki, Y. Wang, M. Martonosi, L. Peh, y D. Rubenstein. Computación energéticamente eficiente para el seguimiento de vida silvestre: compensaciones de diseño y experiencias tempranas con ZebraNet. Silgarch Comput. Archit. Noticias, 2002. [14] A. Pentland, R. Fletcher y A. Hasson. DakNet: Repensar la conectividad en las naciones en desarrollo. Computadora, 37(1):78-83, 2004. [15] F. Sailhan y V. Issarny. Caché cooperativo en redes ad-hoc. En MDM, 2003. [16] R. Shah, S. Roy, S. Jain y W. Brunette. Mulas de datos: Modelado y análisis de una arquitectura de tres niveles para redes de sensores escasas. Elsevier ad-hoc Networks Journal, 1o de septiembre de 2003. [17] T. Schiropoulos, K. Psounis y C. Raghavendra. Enrutamiento de una sola copia en redes móviles conectadas intermitentemente. En SECON, abril de 2004. [18] A. Tanenbaum. Sistemas operativos modernos, 2a edición, capítulo 4, sección 4.4. Prentice Hall, 2001. [19] A. Vahdat y D. Becker. Ruta epidémica para redes ad-hoc parcialmente conectadas. Informe técnico, Departamento de Informática, Universidad de Duke, 2000. [20] W. Zhao, M. Ammar, y E. Zegura. Un enfoque de ferriing de mensajes para la entrega de datos en redes móviles ad-hoc escasas. En MobiHoc, págs. 187 a 198, Nueva York, NY, Estados Unidos, 2004. ACM Press. [21] M. Zonoozi y P. Dassanayake. Modelado de Movilidad de Usuario y Caracterización del Patrón de Movilidad. Revista IEEE sobre áreas seleccionadas en las comunicaciones, 15:1239-1252, septiembre de 1997. 82 ",
            "error": [
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "agg",
                "agg",
                "no-zebroids",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "latencia",
                "T i=1 fi·C ri − T i=1 fi·C ri+(N−ri)·(1−(1− 1 G )ri) Let α = 1, haciendo el almacenamiento total en el sistema ST = N. Suponiendo que la distribución de réplica inicial es según el esquema de replicación de raíz cuadrada, tenemos, ri = fi·N T j = 1 fj. Por lo tanto, obtenemos fi = K2 ·r2 i N2, donde K = T j=1 fj. Utilizando esto, junto con la aproximación (1 − x)n 1 − n · x para x pequeña, simplificamos la ecuación anterior para obtener, • = 1 − T i=1 ri 1+ N−ri G T i=1 ri Para determinar cuándo se maximizan las ganancias con cebroides uno-instantáneos, podemos enmarcar un problema de optimización de la siguiente manera: Maximizar •, sujeto a T i Con un esquema de replicación de raíz cuadrada, las mejoras obtenidas con cebroides uniinstantáneos son independientes de la distribución de popularidad de entrada de los ítems de datos. (Ver [9] para la prueba) 6.5.2 Simulación Realizamos simulaciones con dos diferentes distribución de frecuencias de ítems de datos: Uniforme y Zipfian (con media= 0.27). En ambos casos se obtienen mejoras similares de ",
                " con cebroides uniinstantáneos. Este resultado tiene importantes implicaciones. En casos con popularidad sesgada hacia ciertos ítems de datos, las mejoras agregadas en ",
                " en todas las solicitudes de ítems de datos siguen siendo las mismas. Incluso en escenarios en los que la frecuencia de acceso a los datos cambia dinámicamente, los zebroids seguirán proporcionando mejoras similares de ",
                ". 7. CONCLUSIONES Y FUTURAS DIRECCIONES DE INVESTIGACIÓN En este estudio, examinamos las mejoras en ",
                " que se pueden obtener en presencia de portadores que entregan un ítem de datos desde un servidor a un cliente. Se cuantificó la variación en la "
            ]
        },
        "markov model": {
            "translated_key": [],
            "translated_annotated_text": "Una evaluación de la latencia de disponibilidad en redes ad hoc vehiculares basadas en portador Shahram Ghandeharizadeh Dept of Computer Science Univ of Southern California Los Angeles, CA 90089, USA shahram@usc.edu Shyam Kapadia Dept of Computer Science Univ of Southern California Los Angeles, CA 90089, USA kapadia@usc.edu Bhaskar Krishna Nuestro entorno de destino utiliza portadores de datos, llamados zebroids, donde un dispositivo móvil lleva un elemento de datos en nombre de un servidor a un cliente, minimizando así su latencia de disponibilidad. En este estudio, cuantificamos la variación de la latencia de disponibilidad con zebroids en función de un rico conjunto de parámetros como densidad de coche, almacenamiento por dispositivo, tamaño del repositorio y políticas de reemplazo empleadas por zebroids. Utilizando análisis y simulaciones extensas, obtenemos ideas novedosas sobre el diseño de sistemas basados en operadores. Se pueden obtener mejoras significativas en la latencia con zebroids a costa de un mínimo gasto general. Estas mejoras se producen incluso en escenarios con menor precisión en las predicciones de las rutas del coche. Dos hallazgos particularmente sorprendentes son: (1) una política de sustitución aleatoria ingenua empleada por los zebroids muestra un rendimiento competitivo, y (2) mejoras de la latencia obtenidas con una instanciación simplificada de zebroids se encuentran robustos a los cambios en la distribución de popularidad de los ítems de datos. Categorías y Subject Descriptores: C.2.4 [Sistemas distribuidos]: Términos Generales del Cliente/Servidor: Algoritmos, Rendimiento, Diseño, Experimentación. 1. INTRODUCCIÓN Los avances tecnológicos en las esferas del almacenamiento y las comunicaciones inalámbricas han hecho posible ahora prever la entrega a petición de datos, por ejemplo, para clips de vídeo y audio, en redes de peer-topeer vehiculares. En trabajos previos, Ghandeharizadeh et al. [10] introduce el concepto de vehículos equipados con un dispositivo Car-to-Car-Peer-toPeer, denominado AutoMata, para el entretenimiento dentro del vehículo. Las características notables de un AutoMata incluyen un dispositivo de almacenamiento masivo que ofrece cientos de gigabytes (GB) de almacenamiento, un procesador rápido y varios tipos de tarjetas de red. Incluso con las unidades de disco actuales de 500 GB, un repositorio de contenido de entretenimiento diverso puede exceder la capacidad de almacenamiento de un solo AutoMata. Tales repositorios constituyen el foco de este estudio. Para intercambiar datos, suponemos que cada AutoMata está configurado con dos tipos de tarjetas de red: 1) una tarjeta de red de baja anchura de banda con un radio-rango largo en el orden de millas que permite a un dispositivo AutoMata comunicarse con una estación celular cercana o WiMax, 2) una tarjeta de red de alta anchura de banda con un radio-rango limitado en el orden de cientos de pies. La conexión de ancho de banda alto admite tasas de datos en el orden de decenas a cientos de megabits por segundo y representa la red ad-hoc peer a peer entre los vehículos. Esto se etiqueta como el plano de datos y se emplea para intercambiar elementos de datos entre dispositivos. La conexión de baja anchura de banda sirve como plano de control, permitiendo a los dispositivos AutoMata intercambiar meta-datos con uno o más servidores centralizados. Esta conexión ofrece anchos de banda en el orden de decenas a cientos de Kilobits por segundo. Los servidores centralizados, denominados despachadores, calculan los calendarios de entrega de datos a lo largo del plano de datos utilizando los metadatos proporcionados. Estos horarios se transmiten a los vehículos participantes que utilizan el avión de control. La viabilidad técnica de tal arquitectura de dos niveles se presenta en [7], con resultados preliminares para demostrar que el ancho de banda del plano de control es suficiente para el intercambio de la información de control necesaria para realizar tal aplicación. En un escenario típico, un dispositivo AutoMata presenta a un pasajero con una lista de elementos de datos1, mostrando tanto el nombre de cada elemento de datos como su latencia de disponibilidad. Este último, denotado como ♥, se define como el momento más temprano en que el cliente encuentra una copia de su elemento de datos solicitado. Un elemento de datos está disponible inmediatamente cuando reside en el almacenamiento local del dispositivo AutoMata que atiende a la solicitud. Debido a las restricciones de almacenamiento, un AutoMata puede no almacenar todo el repositorio. En este caso, la latencia de disponibilidad es el tiempo desde que el usuario emite una solicitud hasta que el AutoMata encuentra otro coche que contiene el elemento de datos referenciado. (Los términos coche y AutoMata se utilizan indistintamente en este estudio.) La latencia de disponibilidad para un artículo es una función de la ubicación actual del cliente, su ruta de destino y viaje, el modelo de movilidad de los vehículos equipados con AutoMata, el número de réplicas construidas para los diferentes elementos de datos, y la colocación de réplicas de elementos de datos a través de los vehículos. Un método para mejorar la latencia de disponibilidad es emplear portadores de datos que transportan una réplica del elemento de datos solicitado desde un coche servidor que lo contiene a un cliente que lo solicitó. Estos portadores de datos se denominan zebroids. La selección de cebroides es facilitada por la arquitectura de dos niveles. El plano de control permite la recopilación centralizada de información en un despachador presente en una estación base.2 Algunos ejemplos de control en1 Sin pérdida de generalidad, el término elemento de datos puede ser medios tradicionales como texto o medios continuos como un clip de audio o vídeo. 2 Puede haber despachadores desplegados en un subconjunto de las estaciones de base para la tolerancia a fallos y la robustez. Los distribuidores entre estaciones de base pueden comunicarse a través de la infraestructura cableada. 75 formación son actualmente solicitudes activas, ruta de viaje de los clientes y sus destinos, y caminos de los otros coches. Para cada solicitud del cliente, el despachador puede elegir un conjunto de portadores z que colaboran para transferir un elemento de datos de un servidor a un cliente (z-relay zebroids). Aquí, z es el número de zebroids tales que 0 ≤ z < N, donde N es el número total de coches. Cuando z = 0 no hay portadores, lo que requiere un servidor para entregar el elemento de datos directamente al cliente. De lo contrario, el equipo de relé elegido de z zebroids se entregará los datos de forma transitoria unos a otros para llegar al cliente, reduciendo así la latencia de la disponibilidad (para más detalles, véase la sección 3.1). Para aumentar la robustez, el despachador puede emplear múltiples equipos de relé de portadoras z para cada solicitud. Esto puede ser útil en escenarios en los que el despachador tiene menor precisión de predicción en la información sobre las rutas de los coches. Por último, las restricciones de almacenamiento pueden requerir que un zebroid desaloje elementos de datos existentes de su almacenamiento local para acomodar el elemento solicitado por el cliente. En este estudio, se cuantifican los siguientes factores principales que afectan a la latencia de la disponibilidad en presencia de zebroideos: (i) tamaño del repositorio de datos, (ii) densidad del coche, (iii) capacidad de almacenamiento por coche, (iv) duración del viaje del cliente, (v) esquema de reemplazo empleado por los zebroideos, y (vi) exactitud de las predicciones de la ruta del coche. Para un subconjunto significativo de estos factores, abordamos algunas preguntas clave relativas al uso de zebroids tanto a través del análisis como de simulaciones extensas. Nuestras principales conclusiones son las siguientes. Una política de sustitución aleatoria ingenua empleada por los zebroids muestra un rendimiento competitivo en términos de latencia de disponibilidad. Con esta política, se pueden obtener mejoras sustanciales en la latencia con zebroids con un mínimo de gastos generales de reemplazo. En escenarios más prácticos, donde el despachador tiene información inexacta sobre las rutas del coche, los zebroids continúan proporcionando mejoras de la latencia. Un resultado sorprendente es que los cambios en la popularidad de los ítems de datos no impactan las ganancias de latencia obtenidas con una simple instanciación de z-relay zebroids llamados cebroids uno-instantáneos (ver Sección 3.1). Este estudio sugiere una serie de direcciones interesantes a seguir para obtener una mejor comprensión del diseño de sistemas basados en el portador que mejoran la latencia de disponibilidad. Trabajo relacionado: La replicación en redes móviles ad-hoc ha sido un tema ampliamente estudiado [11, 12, 15]. Sin embargo, ninguno de estos estudios emplea zebroids como portadores de datos para reducir la latencia de las solicitudes de los clientes. Varios estudios novedosos e importantes como ZebraNet [13], DakNet [14], Data Mules [16], Message Ferries [20] y Seek and Focus [17] han analizado factores que afectan a redes conectadas intermitentemente consistentes en portadores de datos similares en espíritu a los zebroideos. Los factores considerados por cada estudio son dictados por su supuesto entorno y aplicación diana. Una característica novedosa de nuestro estudio es el impacto en la latencia de disponibilidad para un repositorio de datos dado de elementos. En [9] se puede obtener una descripción detallada de las obras relacionadas. El resto de este documento está organizado de la siguiente manera. En la sección 2 se ofrece una visión general de la terminología junto con los factores que influyen en la latencia de la disponibilidad en presencia de zebroides. En la sección 3 se describe cómo se pueden emplear los cebroides. En la sección 4 se proporciona información detallada sobre la metodología de análisis empleada para captar el desempeño con los zebroids. En la sección 5 se describen los detalles del entorno de simulación utilizado para la evaluación. La sección 6 recoge las preguntas clave examinadas en este estudio y las responde a través de análisis y simulaciones. Por último, en la sección 7 se presentan breves conclusiones y futuras orientaciones de la investigación. 2. SINOPSIS Y TERMINOLOGÍA La Tabla 1 resume la notación de los parámetros utilizados en el artículo. A continuación introducimos algunas terminologías utilizadas en el artículo. Asumir una red de coches N AutoMata equipados, cada uno con capacidad de almacenamiento de α bytes. La capacidad total de almacenamiento del sistema es ST = N. Hay elementos de datos T en la base de datos, cada uno con parámetros de base de datos T Número de elementos de datos. Si Tamaño del ítem de datos i fi Frecuencia de acceso al ítem de datos i. Parámetros de replicación Ri Frecuencia normalizada de acceso al ítem de datos i ri Número de réplicas para ítem de datos i n Caracteriza un esquema de replicación particular. Latencia media de la disponibilidad del elemento de datos i Łagg Latencia agregada de la disponibilidad, N Número de dispositivos AutoMata en el sistema. α Capacidad de almacenamiento por AutoMata. γ Duración del viaje del cliente AutoMata. ST Capacidad total de almacenamiento del sistema AutoMata, ST = N · α. Cuadro 1: Términos y sus definiciones tamaño Si. La frecuencia de acceso al ítem de datos i se denota como fi, con T j=1 fj = 1. Deje que la duración del viaje del cliente AutoMata en consideración sea γ. Ahora definimos la frecuencia normalizada de acceso al ítem de datos i, denotado por Ri, como: Ri = (fi)n T j=1(fj)n ; 0 ≤ n ≤ فارسى (1) El exponente n caracteriza una técnica de replicación particular. Un esquema de replicación de raíz cuadrada se realiza cuando n = 0.5 [5]. Esto sirve como la línea base para la comparación con el caso cuando se despliegan zebroids. Ri se normaliza a un valor entre 0 y 1. El número de réplicas para el dato i, denotado como ri, es: ri = min (N, max (1, Ri·N Si )). Esto capta el caso cuando al menos una copia de cada elemento de datos debe estar presente en la red ad-hoc en todo momento. En los casos en que un elemento de datos se puede perder de la red ad-hoc, esta ecuación se convierte en ri = min (N, max (0, Ri·N Si )). En este caso, es posible que sea necesario satisfacer una solicitud para el elemento de datos perdido mediante la obtención del elemento desde un servidor remoto. La latencia de disponibilidad para un elemento de datos i, denotado como i, se define como la primera vez en la que un cliente AutoMata encontrará la primera réplica del elemento accesible a él. Si esta condición no se cumple, entonces se establece a i. Esto indica que el elemento de datos I no estaba disponible para el cliente durante su viaje. Tenga en cuenta que como hay al menos una réplica en el sistema para cada elemento de datos i, al establecer γ a un gran valor nos aseguramos de que los clientes soliciten cualquier elemento de datos i será satisfecho. Sin embargo, en la mayoría de las circunstancias prácticas γ puede no ser tan grande como para encontrar cada elemento de datos. Estamos interesados en la latencia de disponibilidad observada en todos los datos. Por lo tanto, aumentamos la latencia media de disponibilidad para cada ítem de datos i con su fi para obtener la siguiente latencia ponderada de disponibilidad (?agg) métrica:?agg = T i=1?i · fi A continuación, presentamos nuestro enfoque de solución describiendo cómo se seleccionan los zebroids. 3. ENFOQUE DE SOLUCIÓN 3.1 Zebroids Cuando un cliente hace referencia a un elemento de datos que falta en su almacenamiento local, el despachador identifica todos los coches con una copia del elemento de datos como servidores. A continuación, el despachador obtiene las rutas futuras de todos los coches para una duración de tiempo finito equivalente al tiempo máximo que el cliente está dispuesto a esperar a que su solicitud sea atendido. Utilizando esta información, el despachador programa la ruta de entrega más rápida desde cualquiera de los servidores al cliente utilizando cualquier otro coche como transportistas intermedios. Por lo tanto, determina el conjunto óptimo de decisiones de reenvío 76 que permitirá que el elemento de datos se entreguen al cliente en el mínimo de tiempo. Tenga en cuenta que la latencia a lo largo de la ruta de entrega más rápida que emplea un equipo de relé de z zebroids es similar a la obtenida con el encaminamiento epidémico [19] bajo los supuestos de almacenamiento infinito y ninguna interferencia. Una simple instanciación de z-relay zebroids se produce cuando z = 1 y la solicitud de los clientes desencadena una transferencia de una copia del elemento de datos solicitado de un servidor a un zebroid en su vecindad. Tal zebroideo se denomina cebroide uniinstantáneo. En algunos casos, el expedidor podría tener información inexacta sobre las rutas de los coches. Por lo tanto, un zebroid programado sobre la base de esta información inexacta puede no reunirse con su cliente objetivo. Para minimizar la probabilidad de tales escenarios, el despachador puede programar múltiples zebroids. Esto puede acarrear gastos generales adicionales debido a la utilización redundante de recursos para obtener las mismas mejoras de latencia. El tiempo necesario para transferir un elemento de datos de un servidor a un zebroid depende de su tamaño y del ancho de banda del enlace disponible. Con elementos de datos pequeños, es razonable suponer que este tiempo de transferencia es pequeño, especialmente en presencia del plano de datos de alto ancho de banda. Los elementos de datos grandes se pueden dividir en trozos más pequeños que permiten al despachador programar uno o más zebroids para entregar cada trozo a un cliente de una manera oportuna. Esta sigue siendo una dirección de investigación futura. Inicialmente, el número de réplicas para cada ítem de datos puede ser calculado usando la Ecuación 1. Este esquema calcula el número de réplicas de datos en función de su popularidad. Es estática porque el número de réplicas en el sistema no cambia y no se realizan reemplazos. Por lo tanto, esto se conoce como el ambiente de los nozebroids. Cuantificamos el desempeño de las diversas políticas de reemplazo con referencia a esta línea base que no emplea zebroids. Uno puede asumir una fase de arranque en frío, donde inicialmente sólo una o pocas copias de cada elemento de datos existen en el sistema. Muchas ranuras de almacenamiento de los coches pueden estar desocupados. Cuando los coches se encuentran entre sí, construyen nuevas réplicas de algunos elementos de datos seleccionados para ocupar los huecos vacíos. El procedimiento de selección puede consistir en elegir los datos de manera uniforme al azar. Nuevas réplicas se crean siempre y cuando un coche tiene un cierto umbral de su almacenamiento desocupado. Eventualmente, la mayoría de la capacidad de almacenamiento de un coche se agotará. 3.2 Políticas de reemplazo basadas en el operador Las políticas de reemplazo consideradas en este documento son reactivas ya que una sustitución se produce sólo en respuesta a una solicitud emitida para un determinado elemento de datos. Cuando el almacenamiento local de un zebroid está completamente ocupado, necesita reemplazar uno de sus elementos existentes para llevar el elemento de datos solicitado por el cliente. Para ello, el zebroid debe seleccionar a un candidato apropiado para el desalojo. Este proceso de decisión es análogo al encontrado en la paginación del sistema operativo donde el objetivo es maximizar la relación de acceso a la caché para evitar el retraso del acceso al disco [18]. Las políticas de reemplazo basadas en transportistas empleadas en nuestro estudio son las menos usadas recientemente (LRU), las menos usadas con frecuencia (LFU) y las aleatorias (donde un candidato de desalojo es elegido uniformemente al azar). Hemos considerado variantes locales y globales de las políticas LRU/LFU que determinan si el conocimiento local o global de los contenidos de los coches conocidos en el expedidor se utiliza para la decisión de desalojo en un zebroid (ver [9] para más detalles). Las pólizas de sustitución entrañan los siguientes gastos generales. En primer lugar, la complejidad asociada a la aplicación de una política. En segundo lugar, el ancho de banda utilizado para transferir una copia de un elemento de datos de un servidor al zebroid. En tercer lugar, el número medio de reemplazos realizados por los zebroides. Tenga en cuenta que en el caso de no cebroides no se incurre en gastos generales. Las métricas consideradas en este estudio son la latencia de la disponibilidad agregada, Tenga en cuenta que los despachadores con la ayuda del plano de control pueden asegurarse de que no se pierda ningún elemento de datos del sistema. En otras palabras, al menos una réplica de cada elemento de datos se mantiene en la red ad-hoc en todo momento. En tales casos, aunque un coche puede encontrarse con un cliente solicitante antes que otros servidores, si su almacenamiento local contiene elementos de datos con sólo una copia en el sistema, entonces tal coche no se elige como un zebroid. 4. METODOLOGÍA DE ANÁLISIS Aquí presentamos la metodología de evaluación analítica y algunas aproximaciones como ecuaciones de forma cerrada que capturan las mejoras en la latencia de disponibilidad que se pueden obtener tanto con cebros oneinstantáneos como con z-relay. Primero, presentamos algunos preliminares de nuestra metodología de análisis. • Que N sea el número de coches en la red que realizan una caminata aleatoria en 2D en un toro de G× G. Un coche adicional sirve como un cliente que entrega un total de N + 1 coches. Este modelo de movilidad se ha utilizado ampliamente en la literatura [17, 16] principalmente porque es susceptible de análisis y proporciona una base de referencia para comparar el rendimiento de otros modelos de movilidad. Además, esta clase de modelos de movilidad markoviana se ha utilizado para modelar los movimientos de los vehículos [3, 21]. • Asumimos que todos los coches comienzan desde la distribución estacionaria y realizan caminatas aleatorias independientes. Aunque para escenarios de densidad escasa, la suposición de independencia se mantiene, ya no es válido cuando N se aproxima a G. • Deje que el tamaño del repositorio de ítems de datos de interés sea T. Además, el ítem de datos i tiene réplicas ri. Esto implica que los coches ri, identificados como servidores, tienen una copia de este elemento de datos cuando el cliente solicita el elemento i. Todos los resultados de análisis presentados en esta sección se obtienen asumiendo que el cliente está dispuesto a esperar el tiempo necesario para que su solicitud sea satisfecha (duración del viaje sin límite γ = ­). Con el modelo de movilidad al azar en un torso 2D, hay una garantía de que mientras haya al menos una réplica del elemento de datos solicitado en la red, el cliente se encontrará con esta réplica [2]. Las extensiones al análisis que también consideran las duraciones del viaje finito se pueden obtener en [9]. Considere un escenario en el que no se emplean zebroids. En este caso, la latencia de disponibilidad esperada para el ítem de datos es el tiempo de reunión esperado de la caminata aleatoria realizada por el cliente con cualquiera de las caminatas aleatorias realizadas por los servidores. Aldous et al. [2] muestran que el tiempo de reunión de dos caminatas aleatorias en tal entorno puede modelarse como una distribución exponencial con la media C = c · G · log G, donde la constante c 0,17 para G ≥ 25. El tiempo de reunión, o equivalente a la latencia de la disponibilidad de i, para el cliente que solicita datos i es el momento hasta que se encuentre con cualquiera de estas réplicas ri por primera vez. Se trata también de una distribución exponencial con el siguiente valor esperado (obsérvese que esta formulación es válida sólo para casos escasos cuando G >> ri): فارسىi = cGlogG ri La latencia de disponibilidad agregada sin emplear zebroids es entonces esta expresión promediada sobre todos los ítems de datos, ponderada por su frecuencia de acceso: فارسىagg(no − zeb) = T i=1 fi Por otra parte, esta réplica se genera en el paso de tiempo cuando el cliente emite la solicitud. Que Nc i sea el número total esperado de nodos que están en la misma celda que cualquiera de los servidores ri. Luego, tenemos Nc i = (N − ri) · (1 − (1 − 1 G )ri ) (3) En el modelo analítico, suponemos que Nc i nuevas réplicas se crean, de modo que el número total de réplicas se aumenta a ri + Nc i. La latencia de disponibilidad se reduce ya que es más probable que el cliente cumpla con una réplica anterior. La latencia agregada de disponibilidad esperada en el caso de los cebroides uno-instantáneos es dada por, agg(zeb) = T i=1 fi · c · G · log G ri + Nc i = T i=1 fi · C ri + Nc i (4) Tenga en cuenta que al obtener esta expresión, para facilitar el análisis, hemos asumido que las nuevas réplicas comienzan Así trata a todos los portadores de Nc i de forma independiente, al igual que los servidores originales ri. Como mostraremos a continuación en comparación con las simulaciones, esta aproximación proporciona un límite superior a las mejoras que se pueden obtener porque da lugar a una menor latencia esperada en el cliente. Cabe señalar que el procedimiento mencionado anteriormente producirá una latencia similar a la empleada por un expedidor que emplee cebroides oneinstantáneos (véase la sección 3.1). Dado que el despachador es consciente de todos los movimientos futuros del coche que sólo transferiría el elemento de datos solicitado en un único zebroid, si determina que el zebroid se reunirá con el cliente antes que cualquier otro servidor. Este zebroid seleccionado está incluido en las nuevas réplicas de Nc i. 4.2 z-relay zebroids Para calcular la latencia de disponibilidad esperada con z-relay zebroids, utilizamos un análogo de problema de coloración similar a un enfoque utilizado por Spyropoulos et al. [17]. En [9] se dan detalles del procedimiento para obtener una expresión de forma cerrada. La latencia de disponibilidad agregada (agg) con z-relay zebroids es dada por, agg(zeb) = T i=1 [fi · C N + 1 · 1 N + 1 − ri · (N · log N ri − log (N + 1 − ri))] (5) 5. METODOLOGÍA DE SIMULACIÓN El entorno de simulación considerado en este estudio se compone de vehículos como automóviles que llevan una fracción del repositorio de datos. Un parámetro de precisión de predicción proporciona inherentemente una cierta garantía probabilística sobre la confianza de las predicciones de ruta del automóvil conocidas en el despachador. Un valor del 100% implica que las rutas exactas de todos los coches se conocen en todo momento. Un valor del 70% para este parámetro indica que las rutas previstas para los coches coincidirán con las reales con probabilidad 0.7. Tenga en cuenta que esta probabilidad se extiende a través de las rutas del coche durante toda la duración del viaje. Ahora proporcionamos los preliminares del estudio de simulación y luego describimos los parámetros de configuración utilizados en nuestros experimentos. • Similar a la metodología de análisis, el mapa utilizado es un toro 2D. Un modelo de movilidad Markov que representa una caminata aleatoria 2D imparcial en la superficie del toro describe el movimiento de los coches a través de este toro. • Cada cuadrícula/célula es un estado único de esta cadena Markov. En cada ranura de tiempo, cada coche hace una transición de una celda a cualquiera de sus 8 celdas vecinas. La transición es una función de la ubicación actual del coche y una matriz de transición de probabilidad Q = [qij] donde qij es la probabilidad de transición del estado i al estado j. Solo los coches equipados con AutoMata dentro de la misma celda pueden comunicarse entre sí. • Los parámetros γ,  han sido discretizados y expresados en términos del número de franjas horarias. • Un dispositivo AutoMata no mantiene más de una réplica de un elemento de datos. Esto se debe a que las réplicas adicionales ocupan el almacenamiento sin proporcionar beneficios. • Los cebroides de relé z o uno instantáneos pueden ser empleados por solicitud del cliente para mejorar la latencia. • A menos que se mencione lo contrario, se supone que el parámetro de precisión de la predicción es del 100%. Esto se debe a que este estudio pretende cuantificar el efecto de un gran número de parámetros individualmente sobre la latencia de la disponibilidad. Aquí, establecemos el tamaño de cada elemento de datos, Si, para ser 1. α representa el número de ranuras de almacenamiento por AutoMata. Cada ranura de almacenamiento almacena un elemento de datos. γ representa la duración del viaje de los clientes en términos del número de franjas horarias. Por lo tanto, los posibles valores de latencia de disponibilidad están entre 0 y γ.  se define como el número de franjas horarias después de lo cual un dispositivo cliente AutoMata encontrará una réplica del elemento de datos por primera vez. Si una réplica para el elemento de datos solicitado fue encontrado por el cliente en la primera celda, a continuación, se establece  = 0. Si se trata de un elemento de datos solicitado, el cliente no encontró ninguna copia del elemento de datos solicitado durante todo su viaje. En todas nuestras simulaciones, para la ilustración consideramos un 5 × 5 2D-torus con γ fijado a 10. Nuestros experimentos indican que las tendencias en la escala de resultados a mapas de mayor tamaño. Simulamos una distribución sesgada de acceso a los datos T que obedece a la ley Ziffs con una media de 0.27. Esta distribución corresponde a la venta de entradas de cine en los Estados Unidos [6]. Empleamos un esquema de replicación que asigna réplicas para un elemento de datos en función de la raíz cuadrada de la frecuencia de acceso de ese elemento. Se muestra que el esquema de replicación de raíz cuadrada tiene un rendimiento de latencia competitivo en un gran espacio de parámetros [8]. Las réplicas de elementos de datos se distribuyen uniformemente entre los dispositivos AutoMata. Esto sirve como el caso de la línea base sin cebros. El esquema de raíz cuadrada también proporciona la distribución de réplica inicial cuando se emplean zebroids. Tenga en cuenta que los reemplazos realizados por los zebroids causarán cambios en la distribución de réplica de ítems de datos. Las solicitudes generadas según la distribución Zipf se emiten una a la vez. El coche cliente que emite la solicitud se elige de una manera redonda-robina. Después de un período máximo de γ, se registra la latencia con que se encontró esta solicitud. En todos los resultados de simulación, cada punto es un promedio de 200.000 solicitudes. Además, los intervalos de confianza del 95% determinados para los resultados son bastante ajustados para las métricas de latencia y los gastos generales de reemplazo. Por lo tanto, sólo los presentamos para la métrica que captura la mejora porcentual de la latencia con respecto al caso de no-zebroides. 6. RESULTADOS En esta sección, describimos nuestros resultados de evaluación donde se abordan las siguientes preguntas clave. Con una amplia selección de esquemas de reemplazo disponibles para un zebroid, ¿cuál es su efecto en la latencia de disponibilidad? Una pregunta más central es: Do zebroids provide 78 0 20 40 60 80 100 1.5 2 2.5 3 3.5 Número de coches Latencia de disponibilidad agregada (­agg ) lru_global lfu_global lru_local lfu_local random Figura 1: La figura 1 muestra la latencia de disponibilidad al emplear cebroids uno-instantáneos en función de los valores (N,α), cuando el ¿Cuáles son los gastos generales asociados en el empleo de estos zebroides? ¿Qué sucede con estas mejoras en escenarios donde un despachador puede tener información imperfecta sobre las rutas del automóvil? ¿Cuáles son las compensaciones inherentes entre la densidad del automóvil y el almacenamiento por automóvil en lo que respecta a su efecto combinado e individual sobre la latencia de la disponibilidad en presencia de zebroids? Presentamos análisis simples y simulaciones detalladas para proporcionar respuestas a estas preguntas, así como para obtener información sobre el diseño de sistemas basados en operadores. 6.1 ¿Cómo funciona un esquema de sustitución empleado por un latencia de disponibilidad de impacto zebroideo? Para ilustrarlo, presentamos experimentos de escala en los que se emplean cebroides oneinstantáneos (ver Figura 1). Por escala, queremos decir que α y N se cambian proporcionalmente para mantener el almacenamiento total del sistema, ST, constante. Aquí, T = 50 y ST = 200. Elegimos los siguientes valores de (N,α) = {(20,10), (25,8), (50,4), (100,2)}. La cifra indica que un plan de sustitución al azar muestra un rendimiento competitivo. Esto se debe a varias razones. Recuerde que la distribución de réplica inicial se establece según el esquema de replicación de raíz cuadrada. El esquema de reemplazo aleatorio no altera esta distribución ya que hace que los reemplazos ciegos a la popularidad de un elemento de datos. Sin embargo, los reemplazos causan una reorganización dinámica de los datos a fin de atender mejor a la solicitud activa actual. Además, el patrón de movilidad de los coches es aleatorio, por lo que las ubicaciones desde las que los clientes emiten las solicitudes también son aleatorias y no se conocen a priori en el despachador. Estas conclusiones son importantes porque una política de sustitución aleatoria puede aplicarse de manera descentralizada. Los esquemas rru-global y lfu-global proporcionan un rendimiento de latencia que es peor que aleatorio. Esto se debe a que estas políticas desarrollan rápidamente una preferencia por los elementos de datos más populares, creando así un mayor número de réplicas para ellos. Durante el desalojo, los datos más populares casi nunca se seleccionan como candidatos de reemplazo. En consecuencia, hay menos réplicas para los artículos menos populares. Por lo tanto, la distribución inicial del elemento de datos replica cambios de raíz cuadrada a que se asemeja a replicación lineal. El mayor número de réplicas de las partidas de datos populares proporciona beneficios adicionales marginales, mientras que el menor número de réplicas de las demás partidas de datos perjudica el rendimiento de latencia de estas políticas mundiales. Los esquemas lfu-local y lru-local tienen un rendimiento similar al aleatorio ya que no tienen suficiente historial de solicitudes de datos locales. Especulamos que el desempeño de estas políticas locales se acercará al de sus variantes globales para una historia suficientemente grande de solicitudes de ítems de datos. Debido al rendimiento competitivo demostrado por una política aleatoria, para el resto del documento, presentamos el rendimiento de los zebroids que emplean una política de reemplazo aleatorio. 6.2 ¿Proporcionan los zebroids mejoras significativas en la latencia de disponibilidad? Encontramos que en muchos escenarios que emplean zebroids proporciona mejoras sustanciales en la latencia de la disponibilidad. 6.2.1 Análisis Primero consideramos el caso de los cebroides uno-instantáneos. La Figura 2.a muestra la variación en Łagg en función de N para T = 10 y α = 1 con 10 × 10 toros usando la Ecuación 4. Los ejes x e y se dibujan a una escala de registro. En la figura 2.b se muestra la mejoría en % en el Agg obtenido con cebroides uniinstantáneos. En este caso, sólo el eje x se dibuja a una escala de registro. Para ilustrar, suponemos que los datos T son solicitados uniformemente. Inicialmente, cuando la red es escasa la aproximación analítica para mejoras en la latencia con zebroids, obtenida de las ecuaciones 2 y 4, coincide estrechamente con los resultados de la simulación. Sin embargo, a medida que N aumenta, la suposición de escasez para la que el análisis es válido, a saber, N+G, ya no es cierta. Por lo tanto, las dos curvas divergen rápidamente. El punto en el que las dos curvas se alejan unas de otras corresponde a un valor de Además, como se mencionó anteriormente, el análisis proporciona un límite superior a las mejoras de la latencia, ya que trata de las réplicas recién creadas dadas por Nc i de forma independiente. Sin embargo, estas réplicas de Nc i comienzan desde la misma celda que una de las réplicas de servidor ri. Finalmente, el análisis captura un escenario oneshot donde dada una distribución inicial de réplica de datos, se calcula la latencia de disponibilidad. Las nuevas réplicas creadas no afectan las solicitudes futuras del cliente. Debido a las limitaciones de espacio, aquí, se resumen las observaciones en el caso de z-relay zebroids se emplean. El lector interesado puede obtener más detalles en [9]. Observaciones similares, como el caso cebroideo uniinstantaneo, se aplican ya que las curvas de simulación y análisis comienzan de nuevo a divergir cuando los supuestos de análisis ya no son válidos. Sin embargo, la observación clave aquí es que la mejora de la latencia con z-relay zebroids es significativamente mejor que el caso de cebroids uno-instantáneos, especialmente para escenarios de almacenamiento más bajos. Esto se debe a que en escenarios escasos, los traspasos transitivos entre los zebroides crean un mayor número de réplicas para el ítem de datos solicitado, lo que produce una menor latencia de disponibilidad. Por otra parte, también se observa que la curva de validación de simulación para las mejoras en Łagg con z-relay zebroids se aproxima a la del caso cebroideo uniinstantánea para un almacenamiento más alto (valores de N más altos). Esto se debe a que los cebroides uno-instantáneos son un caso especial de z-relay zebroides. 6.2.2 Simulación Realizamos simulaciones para examinar todo el espectro de almacenamiento obtenido cambiando la densidad del vehículo N o el almacenamiento por coche α para capturar también escenarios en los que no se mantienen las hipótesis de escasez para las que el análisis es válido. Separamos el efecto de N y α capturando la variación de N manteniendo constante α (caso 1) y viceversa (caso 2) tanto con z-relay y cebroides uno-instantáneos. Aquí, establecemos el tamaño del repositorio como T = 25. En el gráfico 3 figura el caso 1 mencionado anteriormente. Se observan tendencias similares con el caso 2, en [9] se dispone de una descripción completa de esos resultados. Con la Figura 3.b, manteniendo constante α, la densidad del coche aumenta inicialmente tiene mayores beneficios de latencia porque el aumento de N introduce más zebroids en el sistema. A medida que N se incrementa aún más, • reduce porque el almacenamiento total en el sistema sube. En consecuencia, el número de réplicas por elemento de datos sube aumentando así el número de servidores 79. Por lo tanto, la política de reemplazo no puede encontrar un zebroid tan a menudo para transportar el elemento de datos solicitado al cliente antes que cualquiera de los servidores. Por otro lado, el aumento del número de servidores beneficia al caso de no-zebroids al reducir a Agg. El efecto neto da lugar a una reducción de los valores más grandes de N. 10 1 10 2 10 3 10 −1 10 0 10 1 10 2 Número de automóviles no-zebroidsanal no-zebroids sim one-instantaneoussim Agregación Disponibilidad Latencia (­agg ) 2.a) Agg 10 1 10 2 10 3 0 10 20 40 50 60 70 80 90 100 Número de automóviles % Mejora Las tendencias mencionadas anteriormente son similares a las obtenidas del análisis. Sin embargo, algo contra-intuitivamente con almacenamiento relativamente más alto del sistema, z-relay zebroids proporcionan mejoras ligeramente más bajas en la latencia en comparación con uno-instantaneous zebroids. Especulamos que esto se debe a las diferentes distribuciones de réplicas de ítems de datos impuestas por ellos. Tenga en cuenta que los reemplazos realizados por los zebroids causan fluctuaciones en estas distribuciones de réplica que pueden afectar futuras solicitudes de clientes. Actualmente estamos explorando opciones adecuadas de parámetros que pueden capturar estas distribuciones de réplicas cambiantes. 6.3 ¿Cuáles son los gastos generales derivados de la mejora de la latencia de los zebroideos? Encontramos que las mejoras en la latencia con zebroids se obtienen con un mínimo de reemplazo de los gastos generales (< 1 por solicitud del cliente). 6.3.1 Análisis Con cebroides uniinstantáneos, para cada solicitud de cliente se emplea un máximo de un cebroide para mejorar la latencia. Por lo tanto, los gastos generales de sustitución por solicitud del cliente pueden ascender a un máximo de uno. Recordemos que para calcular la latencia con una latencia instantánea 0 50 100 150 200 250 350 400 0 1 2 3 4 5 6 Número de coches Latencia de disponibilidad agregada (?agg ) no-zebroids one-instantaneous z-relays 3.a 0 50 100 150 200 250 300 350 400 0 10 20 30 40 50 60 Número de coches % Mejora en?agg wrt no-zebro Ahora un reemplazo sólo se incumple si una de estas réplicas de Nc i de nueva creación se reúne con el cliente antes que cualquiera de los servidores de ri. Que Xri y XNc i respectivamente sean variables aleatorias que capturen el tiempo mínimo hasta que cualquiera de las réplicas de ri y Nc i cumpla con el cliente. Dado que Xri y XNc i se supone que son independientes, por la propiedad de variables aleatorias distribuidas exponencialmente tenemos, Overhead/request = 1 · P(XNc i < Xri ) + 0 · P(Xri ≤ XNc i ) (6) Overhead/request = ri C ri C + Nc i C = ri ri + Nc i (7) Sin embargo, si N  es constante entonces el aumento de las causas N α 80 0 20 40 60 80 100 0 0,05 0,15 0,20 0,25 0,35 0,40 0,45 0,5 Número de coches cebroides instantáneos número medio de reemplazos por solicitud (N=20,α=10) (N=25,α=8) (N=50,α=4) (N=100,α=2) Figura 4: La figura 4 captura el reemplazo de Esto implica que se incurre en un aumento de los gastos generales de sustitución para valores N y α más altos. Por otra parte, cuando ri = N, esto significa que cada coche tiene una réplica de elemento de datos i. Por lo tanto, no se emplean zebroids cuando se solicita este artículo, lo que da lugar a un gasto general/solicitud para este artículo como cero. A continuación, presentamos resultados de simulación que validan nuestra hipótesis de análisis para los gastos generales asociados con el despliegue de cebroides uno-instantáneos. 6.3.2 Simulación En la figura 4 se muestra la superficie de repuesto con cebroides uno-instantáneos cuando se varían (N,α) manteniendo constante el almacenamiento total del sistema. Las tendencias mostradas por la simulación concuerdan con las previstas por el análisis anterior. Sin embargo, el almacenamiento total del sistema puede ser cambiado ya sea por la densidad variable del coche (N) o el almacenamiento por coche (α). Debido a tendencias similares, aquí presentamos el caso cuando α se mantiene constante y N es variada (Figura 5). Referimos al lector a [9] para el caso cuando α es variado y N se mantiene constante. Presentamos un argumento intuitivo para el comportamiento de las curvas superiores de reemplazo de la solicitud. Cuando el almacenamiento es extremadamente escaso de modo que sólo existe una réplica por elemento de datos en la red AutoMata, el número de reemplazos realizados por los zebroids es cero ya que cualquier reemplazo causará que un elemento de datos se pierda del sistema. El despachador garantiza que no se pierda ningún elemento de datos del sistema. En el otro extremo del espectro, si el almacenamiento se vuelve tan abundante que α = T entonces todo el repositorio de elementos de datos se puede replicar en cada coche. El número de reemplazos es de nuevo cero ya que cada solicitud puede ser satisfecha localmente. Un escenario similar ocurre si N se aumenta a un valor tan grande que otro coche con el elemento de datos solicitado siempre está disponible en las proximidades del cliente. Sin embargo, hay un espectro de almacenamiento en el medio donde los reemplazos por los zebroides programados dan lugar a mejoras en el Agg (ver Figura 3). Por otra parte, observamos que para escenarios de almacenamiento escasos, las mejoras más altas con z-relay zebroids se obtienen al costo de un aumento de los gastos generales de reemplazo en comparación con el caso de cebroids uno-instantáneos. Esto se debe a que en el caso anterior, cada uno de estos z zebroids seleccionados a lo largo de la ruta de latencia más baja al cliente necesita realizar un reemplazo. Sin embargo, los gastos generales de sustitución son todavía inferiores a 1 lo que indica que en promedio se necesita menos de un reemplazo por solicitud del cliente, incluso cuando se emplean z-relay zebroids. 0 50 100 150 200 250 300 350 400 0 0,1 0,2 0,3 0,4 0,6 0,7 0,8 0,9 1 Número de coches z-reemplaza uno-instantánea Número medio de reemplazos por solicitud Figura 5: La figura 5 muestra los gastos generales de reemplazo con cebroide para los casos en que N es diferente manteniendo α = 2. 10 20 30 40 50 60 70 80 90 100 0 0,5 1 1,5 2 2,5 3 3,5 4 Porcentaje de predicción no-zebroideos (N=50) uno-instantáneos (N=50) z-relés (N=50) no-zebroideos (N=200) uno-instantáneos (N=200) z-relés (N=200) Disponibilidad agregada Latencia ( 6.4 ¿Qué sucede con la latencia de la disponibilidad con zebroids en escenarios con inexactitudes en las predicciones de la ruta del coche? Encontramos que los zebroids continúan proporcionando mejoras en la latencia de la disponibilidad incluso con menor precisión en las predicciones de la ruta del coche. Utilizamos un único parámetro p para cuantificar la exactitud de las predicciones de la ruta del coche. 6.4.1 Análisis Dado que p representa la probabilidad de que una ruta del automóvil predicha por el expedidor coincida con la actual, por lo tanto, la latencia con los zebroideos puede ser aproximada por, 6.4.2 Simulación En la figura 6 se muestra la variación en el Agg en función de esta métrica de precisión de la predicción de ruta. Observamos una reducción suave en la mejora de 81 en Agg a medida que la métrica de precisión de predicción reduce. Para los zebroids que están programados pero no se reúnen con el cliente debido al error de predicción, etiquetamos tales reemplazos hechos por los zebroids como fallados. Se ve que los reemplazos fallidos aumentan gradualmente a medida que la precisión de la predicción se reduce. 6.5 ¿En qué condiciones se maximizan las mejoras en la latencia de disponibilidad con zebroids? Sorprendentemente, encontramos que las mejoras en la latencia obtenidas con cebroides uno-instantáneos son independientes de la distribución de entrada de la popularidad de los ítems de datos. 6.5.1 Análisis La diferencia fraccionaria (marcada en la letra ) en la latencia entre los cebroides no-zebroideos y los cebroides uno-instantáneos se obtiene a partir de las ecuaciones 2, 3 y 4 de la siguiente forma: T i=1 fi·C ri − T i=1 fi·C ri+(N−ri)·(1−(1− 1 G )ri Let α = 1, haciendo el almacenamiento total en el sistema ST = N. Suponiendo que la distribución de réplica inicial es según el esquema de replicación de raíz cuadrada, tenemos, ri = fi·N T j = 1 fj. Por lo tanto, obtenemos fi = K2 ·r2 i N2, donde K = T j=1 fj. Utilizando esto, junto con la aproximación (1 − x)n 1 − n · x para x pequeña, simplificamos la ecuación anterior para obtener, • = 1 − T i=1 ri 1+ N−ri G T i=1 ri Para determinar cuándo se maximizan las ganancias con cebroides uno-instantáneos, podemos enmarcar un problema de optimización de la siguiente manera: Maximizar •, sujeto a T i Con un esquema de replicación de raíz cuadrada, las mejoras obtenidas con cebroides uniinstantáneos son independientes de la distribución de popularidad de entrada de los ítems de datos. (Ver [9] para la prueba) 6.5.2 Simulación Realizamos simulaciones con dos diferentes distribución de frecuencias de ítems de datos: Uniforme y Zipfian (con media= 0.27). En ambos casos se obtienen mejoras similares de latencia con cebroides uniinstantáneos. Este resultado tiene importantes implicaciones. En casos con popularidad sesgada hacia ciertos ítems de datos, las mejoras agregadas en la latencia en todas las solicitudes de ítems de datos siguen siendo las mismas. Incluso en escenarios en los que la frecuencia de acceso a los datos cambia dinámicamente, los zebroids seguirán proporcionando mejoras similares en la latencia. 7. CONCLUSIONES Y FUTURAS DIRECCIONES DE INVESTIGACIÓN En este estudio, examinamos las mejoras en la latencia que se pueden obtener en presencia de transportistas que entregan un elemento de datos desde un servidor a un cliente. Se cuantificó la variación de la latencia de disponibilidad en función de un rico conjunto de parámetros como la densidad del coche, el almacenamiento por coche, el tamaño de la base de datos de título y las políticas de reemplazo empleadas por los zebroids. A continuación se resumen algunas direcciones clave de investigación en el futuro que pretendemos seguir. Para reflejar mejor la realidad nos gustaría validar las observaciones obtenidas de este estudio con algunos rastros de simulación del mundo real de movimientos vehiculares (por ejemplo usando CORSIM [1]). Esto también servirá como validación para la utilidad del modelo de movilidad Markov utilizado en este estudio. Actualmente estamos analizando el desempeño de los zebroids en un conjunto de datos del mundo real que comprende una red ad-hoc de autobuses que se mueven alrededor de un pequeño barrio en Amherst [4]. Los cebroides también se pueden utilizar para la entrega de datos que transportan información sensible al retraso con una determinada caducidad. Las extensiones a zebroids que satisfacen estos requisitos de aplicación presentan una dirección de investigación futura interesante. 8. AGRADECIMIENTOS Esta investigación fue apoyada en parte por una beca Annenberg y subvenciones NSF numeradas CNS-0435505 (NeTS NOSS), CNS-0347621 (CAREER), y IIS-0307908. 9. REFERENCIAS [1] Administración Federal de Carreteras. Simulación del corredor. Versión 5.1, http://www.ops.fhwa.dot.gov/trafficanalysistools/cors im.htm. [2] D. Aldous y J. Llena. Cadenas de markov reversibles y caminatas aleatorias en gráficos. En preparación. [3] A. Bar-Noy, I. Kessler y M. Sidi. Usuarios móviles: Para actualizar o no actualizar. En IEEE Infocom, 1994. [4] J. Burgess, B. Gallagher, D. Jensen, y B. Levine. MaxProp: Enrutamiento para redes tolerantes a perturbaciones basadas en vehículos. En IEEE Infocom, abril de 2006. [5] E. Cohen y S. Shenker. Estrategias de replicación en redes de pares no estructuradas. En SIGCOMM, 2002. [6] A. Dan, D. Dias, R. Mukherjee, D. Sitaram y R. Tewari. Buffering y Caching en servidores de vídeo a gran escala. En COMPCON, 1995. [7] S. Ghandeharizadeh, S. Kapadia, y B. Krishnamachari. PAVAN: Marco normativo para la disponibilidad de contenidos en las redes ad hoc de vehículos. En VANET, Nueva York, Nueva York, Estados Unidos, 2004. ACM Press. [8] S. Ghandeharizadeh, S. Kapadia, y B. Krishnamachari. Comparación de estrategias de replicación para la disponibilidad de contenido en redes C2P2. En MDM, mayo de 2005. [9] S. Ghandeharizadeh, S. Kapadia, y B. Krishnamachari. Una evaluación de la latencia de disponibilidad en redes de vehículos ad-hoc basadas en el portador. Informe técnico, Departamento de Ciencias de la Computación, Universidad del Sur de California, CENG-2006-1, 2006. [10] S. Ghandeharizadeh y B. Krishnamachari. C2p2: Una red inter pares para servicios de información de automóviles a petición. En Globe. IEEE, 2004. [11] T. Hara. Asignación eficaz de réplicas en redes ad-hoc para mejorar la accesibilidad de datos. En IEEE Infocom, 2001. [12] H. Hayashi, T. Hara, y S. Nishio. Un método de asignación de réplica Adaptarse a los cambios de topología en redes ad-hoc. En DEXA, 2005. [13] P. Juang, H. Oki, Y. Wang, M. Martonosi, L. Peh, y D. Rubenstein. Computación energéticamente eficiente para el seguimiento de vida silvestre: compensaciones de diseño y experiencias tempranas con ZebraNet. Silgarch Comput. Archit. Noticias, 2002. [14] A. Pentland, R. Fletcher y A. Hasson. DakNet: Repensar la conectividad en las naciones en desarrollo. Computadora, 37(1):78-83, 2004. [15] F. Sailhan y V. Issarny. Caché cooperativo en redes ad-hoc. En MDM, 2003. [16] R. Shah, S. Roy, S. Jain y W. Brunette. Mulas de datos: Modelado y análisis de una arquitectura de tres niveles para redes de sensores escasas. Elsevier ad-hoc Networks Journal, 1o de septiembre de 2003. [17] T. Schiropoulos, K. Psounis y C. Raghavendra. Enrutamiento de una sola copia en redes móviles conectadas intermitentemente. En SECON, abril de 2004. [18] A. Tanenbaum. Sistemas operativos modernos, 2a edición, capítulo 4, sección 4.4. Prentice Hall, 2001. [19] A. Vahdat y D. Becker. Ruta epidémica para redes ad-hoc parcialmente conectadas. Informe técnico, Departamento de Informática, Universidad de Duke, 2000. [20] W. Zhao, M. Ammar, y E. Zegura. Un enfoque de ferriing de mensajes para la entrega de datos en redes móviles ad-hoc escasas. En MobiHoc, págs. 187 a 198, Nueva York, NY, Estados Unidos, 2004. ACM Press. [21] M. Zonoozi y P. Dassanayake. Modelado de Movilidad de Usuario y Caracterización del Patrón de Movilidad. Revista IEEE sobre áreas seleccionadas en las comunicaciones, 15:1239-1252, septiembre de 1997. 82 ",
            "error": []
        }
    }
}