{
    "original_text": "Loop restructuring for data I/O minimization on limited on-chip memory embedded processors In this paper, we propose a framework for analyzing the flow of values and their reuse in loop nests to minimize data traffic under the constraints of limited on-chip memory capacity and dependences. Our analysis first undertakes fusion of possible loop nests intra-procedurally and then performs loop distribution. The analysis discovers the closeness factor of two statements which is a quantitative measure of data traffic saved per unit memory occupied if the statements were under the same loop nest over the case where they are under different loop nests. We then develop a greedy algorithm which traverses the program dependence graph to group statements together under the same loop nest legally to promote maximal reuse per unit of memory occupied. We implemented our framework in Petit, a tool for dependence analysis and loop transformations. We compared our method with one based on tiling of fused loop nest and one based on a greedy strategy to purely maximize reuse. We show that our methods work better than both of these strategies in most cases for processors such as TMS320Cxx, which have a very limited amount of on-chip memory. The improvements in data I/O range from 10 to 30 percent over tiling and from 10 to 40 percent over maximal reuse for JPEG loops",
    "original_translation": "Reestructuración de bucles para minimizar la E/S de datos en procesadores integrados de memoria on-chip limitados En este artículo, proponemos un marco para analizar el flujo de valores y su reutilización en nidos de bucles para minimizar el tráfico de datos bajo las limitaciones de capacidad de memoria on-chip limitada y dependencias. Nuestro análisis primero lleva a cabo la fusión de posibles nidos de bucles intra-procedimiento y luego realiza la distribución de bucles. El análisis descubre el factor de proximidad de dos declaraciones, que es una medida cuantitativa del tráfico de datos guardado por unidad de memoria ocupada si las declaraciones estaban bajo el mismo nido de bucle sobre el caso donde están bajo diferentes nidos de bucle. A continuación, desarrollamos un algoritmo codicioso que atraviesa el gráfico de dependencia del programa para agrupar declaraciones juntas bajo el mismo nido de bucle legalmente para promover la reutilización máxima por unidad de memoria ocupada. Implementamos nuestro marco en Petit, una herramienta para análisis de dependencia y transformaciones de bucles. Comparamos nuestro método con uno basado en el alicatado del nido de bucle fusionado y uno basado en una estrategia codiciosa para maximizar puramente la reutilización. Demostramos que nuestros métodos funcionan mejor que ambas estrategias en la mayoría de los casos para procesadores como TMS320Cxx, que tienen una cantidad muy limitada de memoria en el chip. Las mejoras en la E/S de datos oscilan entre el 10 y el 30 por ciento sobre el revestimiento y entre el 10 y el 40 por ciento sobre la reutilización máxima para bucles JPEG",
    "error_count": 10,
    "keys": {
        "loop restructuring": {
            "translated_key": [],
            "translated_annotated_text": "Reestructuración de bucles para minimizar la E/S de datos en procesadores integrados de memoria on-chip limitados En este artículo, proponemos un marco para analizar el flujo de valores y su reutilización en nidos de bucles para minimizar el tráfico de datos bajo las limitaciones de capacidad de memoria on-chip limitada y dependencias. Nuestro análisis primero lleva a cabo la fusión de posibles nidos de bucles intra-procedimiento y luego realiza la distribución de bucles. El análisis descubre el factor de proximidad de dos declaraciones, que es una medida cuantitativa del tráfico de datos guardado por unidad de memoria ocupada si las declaraciones estaban bajo el mismo nido de bucle sobre el caso donde están bajo diferentes nidos de bucle. A continuación, desarrollamos un algoritmo codicioso que atraviesa el gráfico de dependencia del programa para agrupar declaraciones juntas bajo el mismo nido de bucle legalmente para promover la reutilización máxima por unidad de memoria ocupada. Implementamos nuestro marco en Petit, una herramienta para análisis de dependencia y transformaciones de bucles. Comparamos nuestro método con uno basado en el alicatado del nido de bucle fusionado y uno basado en una estrategia codiciosa para maximizar puramente la reutilización. Demostramos que nuestros métodos funcionan mejor que ambas estrategias en la mayoría de los casos para procesadores como TMS320Cxx, que tienen una cantidad muy limitada de memoria en el chip. Las mejoras en la E/S de datos oscilan entre el 10 y el 30 por ciento sobre el revestimiento y entre el 10 y el 40 por ciento sobre la reutilización máxima para bucles JPEG ",
            "error": []
        },
        "data I/O minimization": {
            "translated_key": [],
            "translated_annotated_text": "Reestructuración de bucles para la minimización de E/S de datos en procesadores de memoria incrustados en chip limitado En este artículo, proponemos un marco para analizar el flujo de valores y su reutilización en nidos de bucles para minimizar el tráfico de datos bajo las limitaciones de capacidad de memoria on-chip limitada y dependencias. Nuestro análisis primero lleva a cabo la fusión de posibles nidos de bucles intra-procedimiento y luego realiza la distribución de bucles. El análisis descubre el factor de proximidad de dos declaraciones, que es una medida cuantitativa del tráfico de datos guardado por unidad de memoria ocupada si las declaraciones estaban bajo el mismo nido de bucle sobre el caso donde están bajo diferentes nidos de bucle. A continuación, desarrollamos un algoritmo codicioso que atraviesa el gráfico de dependencia del programa para agrupar declaraciones juntas bajo el mismo nido de bucle legalmente para promover la reutilización máxima por unidad de memoria ocupada. Implementamos nuestro marco en Petit, una herramienta para análisis de dependencia y transformaciones de bucles. Comparamos nuestro método con uno basado en el alicatado del nido de bucle fusionado y uno basado en una estrategia codiciosa para maximizar puramente la reutilización. Demostramos que nuestros métodos funcionan mejor que ambas estrategias en la mayoría de los casos para procesadores como TMS320Cxx, que tienen una cantidad muy limitada de memoria en el chip. Las mejoras en la E/S de datos oscilan entre el 10 y el 30 por ciento sobre el revestimiento y entre el 10 y el 40 por ciento sobre la reutilización máxima para bucles JPEG ",
            "error": []
        },
        "on-chip memory": {
            "translated_key": "on-chip",
            "translated_annotated_text": "Reestructuración de bucles para la minimización de E/S de datos en procesadores integrados limitados <br>on-chip</br> En este trabajo, proponemos un marco para analizar el flujo de valores y su reutilización en nidos de bucles para minimizar el tráfico de datos bajo las limitaciones de la capacidad y dependencias limitadas <br>on-chip</br>. Nuestro análisis primero lleva a cabo la fusión de posibles nidos de bucles intra-procedimiento y luego realiza la distribución de bucles. El análisis descubre el factor de proximidad de dos declaraciones, que es una medida cuantitativa del tráfico de datos guardado por unidad de memoria ocupada si las declaraciones estaban bajo el mismo nido de bucle sobre el caso donde están bajo diferentes nidos de bucle. A continuación, desarrollamos un algoritmo codicioso que atraviesa el gráfico de dependencia del programa para agrupar declaraciones juntas bajo el mismo nido de bucle legalmente para promover la reutilización máxima por unidad de memoria ocupada. Implementamos nuestro marco en Petit, una herramienta para análisis de dependencia y transformaciones de bucles. Comparamos nuestro método con uno basado en el alicatado del nido de bucle fusionado y uno basado en una estrategia codiciosa para maximizar puramente la reutilización. Demostramos que nuestros métodos funcionan mejor que ambas estrategias en la mayoría de los casos para procesadores como TMS320Cxx, que tienen una cantidad muy limitada de memoria <br>on-chip</br>. Las mejoras en la E/S de datos oscilan entre el 10 y el 30 por ciento sobre el revestimiento y entre el 10 y el 40 por ciento sobre la reutilización máxima para bucles JPEG ",
            "error": [
                ""
            ]
        },
        "data traffic": {
            "translated_key": "tráfico de datos",
            "translated_annotated_text": "Reestructuración de bucles para la minimización de E/S de datos en procesadores integrados de memoria on-chip limitados En este artículo, proponemos un marco para analizar el flujo de valores y su reutilización en nidos de bucles para minimizar el <br>tráfico de datos</br> bajo las limitaciones de capacidad de memoria on-chip limitada y dependencias. Nuestro análisis primero lleva a cabo la fusión de posibles nidos de bucles intra-procedimiento y luego realiza la distribución de bucles. El análisis descubre el factor de proximidad de dos declaraciones que es una medida cuantitativa del <br>tráfico de datos</br> guardado por unidad de memoria ocupada si las declaraciones estaban bajo el mismo nido de bucle sobre el caso donde están bajo diferentes nidos de bucle.  A continuación, desarrollamos un algoritmo codicioso que atraviesa el gráfico de dependencia del programa para agrupar declaraciones juntas bajo el mismo nido de bucle legalmente para promover la reutilización máxima por unidad de memoria ocupada. Implementamos nuestro marco en Petit, una herramienta para análisis de dependencia y transformaciones de bucles. Comparamos nuestro método con uno basado en el alicatado del nido de bucle fusionado y uno basado en una estrategia codiciosa para maximizar puramente la reutilización. Demostramos que nuestros métodos funcionan mejor que ambas estrategias en la mayoría de los casos para procesadores como TMS320Cxx, que tienen una cantidad muy limitada de memoria en el chip. Las mejoras en la E/S de datos oscilan entre el 10 y el 30 por ciento sobre el revestimiento y entre el 10 y el 40 por ciento sobre la reutilización máxima para bucles JPEG ",
            "error": [
                ""
            ]
        },
        "embedded processors": {
            "translated_key": "procesadores empotrados",
            "translated_annotated_text": "Reestructuración de bucles para la minimización de E/S de datos en memoria limitada en chips <br>procesadores empotrados</br> En este trabajo, proponemos un marco para analizar el flujo de valores y su reutilización en nidos de bucles para minimizar el tráfico de datos bajo las limitaciones de capacidad de memoria en chip limitada y dependencias. Nuestro análisis primero lleva a cabo la fusión de posibles nidos de bucles intra-procedimiento y luego realiza la distribución de bucles. El análisis descubre el factor de proximidad de dos declaraciones, que es una medida cuantitativa del tráfico de datos guardado por unidad de memoria ocupada si las declaraciones estaban bajo el mismo nido de bucle sobre el caso donde están bajo diferentes nidos de bucle. A continuación, desarrollamos un algoritmo codicioso que atraviesa el gráfico de dependencia del programa para agrupar declaraciones juntas bajo el mismo nido de bucle legalmente para promover la reutilización máxima por unidad de memoria ocupada. Implementamos nuestro marco en Petit, una herramienta para análisis de dependencia y transformaciones de bucles. Comparamos nuestro método con uno basado en el alicatado del nido de bucle fusionado y uno basado en una estrategia codiciosa para maximizar puramente la reutilización. Demostramos que nuestros métodos funcionan mejor que ambas estrategias en la mayoría de los casos para procesadores como TMS320Cxx, que tienen una cantidad muy limitada de memoria en el chip. Las mejoras en la E/S de datos oscilan entre el 10 y el 30 por ciento sobre el revestimiento y entre el 10 y el 40 por ciento sobre la reutilización máxima para bucles JPEG ",
            "error": [
                ""
            ]
        },
        "loop fusion": {
            "translated_key": [],
            "translated_annotated_text": "Reestructuración de bucles para minimizar la E/S de datos en procesadores integrados de memoria on-chip limitados En este artículo, proponemos un marco para analizar el flujo de valores y su reutilización en nidos de bucles para minimizar el tráfico de datos bajo las limitaciones de capacidad de memoria on-chip limitada y dependencias. Nuestro análisis primero lleva a cabo la fusión de posibles nidos de bucles intra-procedimiento y luego realiza la distribución de bucles. El análisis descubre el factor de proximidad de dos declaraciones, que es una medida cuantitativa del tráfico de datos guardado por unidad de memoria ocupada si las declaraciones estaban bajo el mismo nido de bucle sobre el caso donde están bajo diferentes nidos de bucle. A continuación, desarrollamos un algoritmo codicioso que atraviesa el gráfico de dependencia del programa para agrupar declaraciones juntas bajo el mismo nido de bucle legalmente para promover la reutilización máxima por unidad de memoria ocupada. Implementamos nuestro marco en Petit, una herramienta para análisis de dependencia y transformaciones de bucles. Comparamos nuestro método con uno basado en el alicatado del nido de bucle fusionado y uno basado en una estrategia codiciosa para maximizar puramente la reutilización. Demostramos que nuestros métodos funcionan mejor que ambas estrategias en la mayoría de los casos para procesadores como TMS320Cxx, que tienen una cantidad muy limitada de memoria en el chip. Las mejoras en la E/S de datos oscilan entre el 10 y el 30 por ciento sobre el revestimiento y entre el 10 y el 40 por ciento sobre la reutilización máxima para bucles JPEG ",
            "error": []
        },
        "data locality": {
            "translated_key": [],
            "translated_annotated_text": "Reestructuración de bucles para minimizar la E/S de datos en procesadores integrados de memoria on-chip limitados En este artículo, proponemos un marco para analizar el flujo de valores y su reutilización en nidos de bucles para minimizar el tráfico de datos bajo las limitaciones de capacidad de memoria on-chip limitada y dependencias. Nuestro análisis primero lleva a cabo la fusión de posibles nidos de bucles intra-procedimiento y luego realiza la distribución de bucles. El análisis descubre el factor de proximidad de dos declaraciones, que es una medida cuantitativa del tráfico de datos guardado por unidad de memoria ocupada si las declaraciones estaban bajo el mismo nido de bucle sobre el caso donde están bajo diferentes nidos de bucle. A continuación, desarrollamos un algoritmo codicioso que atraviesa el gráfico de dependencia del programa para agrupar declaraciones juntas bajo el mismo nido de bucle legalmente para promover la reutilización máxima por unidad de memoria ocupada. Implementamos nuestro marco en Petit, una herramienta para análisis de dependencia y transformaciones de bucles. Comparamos nuestro método con uno basado en el alicatado del nido de bucle fusionado y uno basado en una estrategia codiciosa para maximizar puramente la reutilización. Demostramos que nuestros métodos funcionan mejor que ambas estrategias en la mayoría de los casos para procesadores como TMS320Cxx, que tienen una cantidad muy limitada de memoria en el chip. Las mejoras en la E/S de datos oscilan entre el 10 y el 30 por ciento sobre el revestimiento y entre el 10 y el 40 por ciento sobre la reutilización máxima para bucles JPEG ",
            "error": []
        },
        "program dependence graph": {
            "translated_key": "programa",
            "translated_annotated_text": "Reestructuración de bucles para minimizar la E/S de datos en procesadores integrados de memoria on-chip limitados En este artículo, proponemos un marco para analizar el flujo de valores y su reutilización en nidos de bucles para minimizar el tráfico de datos bajo las limitaciones de capacidad de memoria on-chip limitada y dependencias. Nuestro análisis primero lleva a cabo la fusión de posibles nidos de bucles intra-procedimiento y luego realiza la distribución de bucles. El análisis descubre el factor de proximidad de dos declaraciones, que es una medida cuantitativa del tráfico de datos guardado por unidad de memoria ocupada si las declaraciones estaban bajo el mismo nido de bucle sobre el caso donde están bajo diferentes nidos de bucle. A continuación, desarrollamos un algoritmo codicioso que atraviesa el gráfico de dependencia de <br>programa</br> para agrupar las declaraciones en conjunto bajo el mismo nido de bucle legalmente para promover la reutilización máxima por unidad de memoria ocupada. Implementamos nuestro marco en Petit, una herramienta para análisis de dependencia y transformaciones de bucles. Comparamos nuestro método con uno basado en el alicatado del nido de bucle fusionado y uno basado en una estrategia codiciosa para maximizar puramente la reutilización. Demostramos que nuestros métodos funcionan mejor que ambas estrategias en la mayoría de los casos para procesadores como TMS320Cxx, que tienen una cantidad muy limitada de memoria en el chip. Las mejoras en la E/S de datos oscilan entre el 10 y el 30 por ciento sobre el revestimiento y entre el 10 y el 40 por ciento sobre la reutilización máxima para bucles JPEG ",
            "error": [
                ""
            ]
        },
        "Petit": {
            "translated_key": "Petit",
            "translated_annotated_text": "Reestructuración de bucles para minimizar la E/S de datos en procesadores integrados de memoria on-chip limitados En este artículo, proponemos un marco para analizar el flujo de valores y su reutilización en nidos de bucles para minimizar el tráfico de datos bajo las limitaciones de capacidad de memoria on-chip limitada y dependencias. Nuestro análisis primero lleva a cabo la fusión de posibles nidos de bucles intra-procedimiento y luego realiza la distribución de bucles. El análisis descubre el factor de proximidad de dos declaraciones, que es una medida cuantitativa del tráfico de datos guardado por unidad de memoria ocupada si las declaraciones estaban bajo el mismo nido de bucle sobre el caso donde están bajo diferentes nidos de bucle. A continuación, desarrollamos un algoritmo codicioso que atraviesa el gráfico de dependencia del programa para agrupar declaraciones juntas bajo el mismo nido de bucle legalmente para promover la reutilización máxima por unidad de memoria ocupada. Implementamos nuestro framework en <br>Petit</br>, una herramienta para análisis de dependencia y transformaciones de bucles. Comparamos nuestro método con uno basado en el alicatado del nido de bucle fusionado y uno basado en una estrategia codiciosa para maximizar puramente la reutilización. Demostramos que nuestros métodos funcionan mejor que ambas estrategias en la mayoría de los casos para procesadores como TMS320Cxx, que tienen una cantidad muy limitada de memoria en el chip. Las mejoras en la E/S de datos oscilan entre el 10 y el 30 por ciento sobre el revestimiento y entre el 10 y el 40 por ciento sobre la reutilización máxima para bucles JPEG ",
            "error": [
                ""
            ]
        },
        "fused loop nest": {
            "translated_key": "nido de bucle fusionado",
            "translated_annotated_text": "Reestructuración de bucles para minimizar la E/S de datos en procesadores integrados de memoria on-chip limitados En este artículo, proponemos un marco para analizar el flujo de valores y su reutilización en nidos de bucles para minimizar el tráfico de datos bajo las limitaciones de capacidad de memoria on-chip limitada y dependencias. Nuestro análisis primero lleva a cabo la fusión de posibles nidos de bucles intra-procedimiento y luego realiza la distribución de bucles. El análisis descubre el factor de proximidad de dos declaraciones, que es una medida cuantitativa del tráfico de datos guardado por unidad de memoria ocupada si las declaraciones estaban bajo el mismo nido de bucle sobre el caso donde están bajo diferentes nidos de bucle. A continuación, desarrollamos un algoritmo codicioso que atraviesa el gráfico de dependencia del programa para agrupar declaraciones juntas bajo el mismo nido de bucle legalmente para promover la reutilización máxima por unidad de memoria ocupada. Implementamos nuestro marco en Petit, una herramienta para análisis de dependencia y transformaciones de bucles. Comparamos nuestro método con uno basado en el alicatado del <br>nido de bucle fusionado</br> y uno basado en una estrategia codiciosa para maximizar puramente la reutilización.  Demostramos que nuestros métodos funcionan mejor que ambas estrategias en la mayoría de los casos para procesadores como TMS320Cxx, que tienen una cantidad muy limitada de memoria en el chip. Las mejoras en la E/S de datos oscilan entre el 10 y el 30 por ciento sobre el revestimiento y entre el 10 y el 40 por ciento sobre la reutilización máxima para bucles JPEG ",
            "error": [
                ""
            ]
        },
        "closeness factor": {
            "translated_key": "closeness",
            "translated_annotated_text": "Reestructuración de bucles para minimizar la E/S de datos en procesadores integrados de memoria on-chip limitados En este artículo, proponemos un marco para analizar el flujo de valores y su reutilización en nidos de bucles para minimizar el tráfico de datos bajo las limitaciones de capacidad de memoria on-chip limitada y dependencias. Nuestro análisis primero lleva a cabo la fusión de posibles nidos de bucles intra-procedimiento y luego realiza la distribución de bucles. El análisis descubre el factor <br>closeness</br> de dos declaraciones que es una medida cuantitativa del tráfico de datos guardado por unidad de memoria ocupada si las declaraciones estaban bajo el mismo nido de bucle sobre el caso donde están bajo diferentes nidos de bucle. A continuación, desarrollamos un algoritmo codicioso que atraviesa el gráfico de dependencia del programa para agrupar declaraciones juntas bajo el mismo nido de bucle legalmente para promover la reutilización máxima por unidad de memoria ocupada. Implementamos nuestro marco en Petit, una herramienta para análisis de dependencia y transformaciones de bucles. Comparamos nuestro método con uno basado en el alicatado del nido de bucle fusionado y uno basado en una estrategia codiciosa para maximizar puramente la reutilización. Demostramos que nuestros métodos funcionan mejor que ambas estrategias en la mayoría de los casos para procesadores como TMS320Cxx, que tienen una cantidad muy limitada de memoria en el chip. Las mejoras en la E/S de datos oscilan entre el 10 y el 30 por ciento sobre el revestimiento y entre el 10 y el 40 por ciento sobre la reutilización máxima para bucles JPEG ",
            "error": [
                ""
            ]
        },
        "DSP": {
            "translated_key": [],
            "translated_annotated_text": "Reestructuración de bucles para minimizar la E/S de datos en procesadores integrados de memoria on-chip limitados En este artículo, proponemos un marco para analizar el flujo de valores y su reutilización en nidos de bucles para minimizar el tráfico de datos bajo las limitaciones de capacidad de memoria on-chip limitada y dependencias. Nuestro análisis primero lleva a cabo la fusión de posibles nidos de bucles intra-procedimiento y luego realiza la distribución de bucles. El análisis descubre el factor de proximidad de dos declaraciones, que es una medida cuantitativa del tráfico de datos guardado por unidad de memoria ocupada si las declaraciones estaban bajo el mismo nido de bucle sobre el caso donde están bajo diferentes nidos de bucle. A continuación, desarrollamos un algoritmo codicioso que atraviesa el gráfico de dependencia del programa para agrupar declaraciones juntas bajo el mismo nido de bucle legalmente para promover la reutilización máxima por unidad de memoria ocupada. Implementamos nuestro marco en Petit, una herramienta para análisis de dependencia y transformaciones de bucles. Comparamos nuestro método con uno basado en el alicatado del nido de bucle fusionado y uno basado en una estrategia codiciosa para maximizar puramente la reutilización. Demostramos que nuestros métodos funcionan mejor que ambas estrategias en la mayoría de los casos para procesadores como TMS320Cxx, que tienen una cantidad muy limitada de memoria en el chip. Las mejoras en la E/S de datos oscilan entre el 10 y el 30 por ciento sobre el revestimiento y entre el 10 y el 40 por ciento sobre la reutilización máxima para bucles JPEG ",
            "error": []
        },
        "embedded systems": {
            "translated_key": [],
            "translated_annotated_text": "Reestructuración de bucles para minimizar la E/S de datos en procesadores integrados de memoria on-chip limitados En este artículo, proponemos un marco para analizar el flujo de valores y su reutilización en nidos de bucles para minimizar el tráfico de datos bajo las limitaciones de capacidad de memoria on-chip limitada y dependencias. Nuestro análisis primero lleva a cabo la fusión de posibles nidos de bucles intra-procedimiento y luego realiza la distribución de bucles. El análisis descubre el factor de proximidad de dos declaraciones, que es una medida cuantitativa del tráfico de datos guardado por unidad de memoria ocupada si las declaraciones estaban bajo el mismo nido de bucle sobre el caso donde están bajo diferentes nidos de bucle. A continuación, desarrollamos un algoritmo codicioso que atraviesa el gráfico de dependencia del programa para agrupar declaraciones juntas bajo el mismo nido de bucle legalmente para promover la reutilización máxima por unidad de memoria ocupada. Implementamos nuestro marco en Petit, una herramienta para análisis de dependencia y transformaciones de bucles. Comparamos nuestro método con uno basado en el alicatado del nido de bucle fusionado y uno basado en una estrategia codiciosa para maximizar puramente la reutilización. Demostramos que nuestros métodos funcionan mejor que ambas estrategias en la mayoría de los casos para procesadores como TMS320Cxx, que tienen una cantidad muy limitada de memoria en el chip. Las mejoras en la E/S de datos oscilan entre el 10 y el 30 por ciento sobre el revestimiento y entre el 10 y el 40 por ciento sobre la reutilización máxima para bucles JPEG ",
            "error": []
        },
        "graph theory": {
            "translated_key": [],
            "translated_annotated_text": "Reestructuración de bucles para minimizar la E/S de datos en procesadores integrados de memoria on-chip limitados En este artículo, proponemos un marco para analizar el flujo de valores y su reutilización en nidos de bucles para minimizar el tráfico de datos bajo las limitaciones de capacidad de memoria on-chip limitada y dependencias. Nuestro análisis primero lleva a cabo la fusión de posibles nidos de bucles intra-procedimiento y luego realiza la distribución de bucles. El análisis descubre el factor de proximidad de dos declaraciones, que es una medida cuantitativa del tráfico de datos guardado por unidad de memoria ocupada si las declaraciones estaban bajo el mismo nido de bucle sobre el caso donde están bajo diferentes nidos de bucle. A continuación, desarrollamos un algoritmo codicioso que atraviesa el gráfico de dependencia del programa para agrupar declaraciones juntas bajo el mismo nido de bucle legalmente para promover la reutilización máxima por unidad de memoria ocupada. Implementamos nuestro marco en Petit, una herramienta para análisis de dependencia y transformaciones de bucles. Comparamos nuestro método con uno basado en el alicatado del nido de bucle fusionado y uno basado en una estrategia codiciosa para maximizar puramente la reutilización. Demostramos que nuestros métodos funcionan mejor que ambas estrategias en la mayoría de los casos para procesadores como TMS320Cxx, que tienen una cantidad muy limitada de memoria en el chip. Las mejoras en la E/S de datos oscilan entre el 10 y el 30 por ciento sobre el revestimiento y entre el 10 y el 40 por ciento sobre la reutilización máxima para bucles JPEG ",
            "error": []
        },
        "microprocessor chips": {
            "translated_key": [],
            "translated_annotated_text": "Reestructuración de bucles para minimizar la E/S de datos en procesadores integrados de memoria on-chip limitados En este artículo, proponemos un marco para analizar el flujo de valores y su reutilización en nidos de bucles para minimizar el tráfico de datos bajo las limitaciones de capacidad de memoria on-chip limitada y dependencias. Nuestro análisis primero lleva a cabo la fusión de posibles nidos de bucles intra-procedimiento y luego realiza la distribución de bucles. El análisis descubre el factor de proximidad de dos declaraciones, que es una medida cuantitativa del tráfico de datos guardado por unidad de memoria ocupada si las declaraciones estaban bajo el mismo nido de bucle sobre el caso donde están bajo diferentes nidos de bucle. A continuación, desarrollamos un algoritmo codicioso que atraviesa el gráfico de dependencia del programa para agrupar declaraciones juntas bajo el mismo nido de bucle legalmente para promover la reutilización máxima por unidad de memoria ocupada. Implementamos nuestro marco en Petit, una herramienta para análisis de dependencia y transformaciones de bucles. Comparamos nuestro método con uno basado en el alicatado del nido de bucle fusionado y uno basado en una estrategia codiciosa para maximizar puramente la reutilización. Demostramos que nuestros métodos funcionan mejor que ambas estrategias en la mayoría de los casos para procesadores como TMS320Cxx, que tienen una cantidad muy limitada de memoria en el chip. Las mejoras en la E/S de datos oscilan entre el 10 y el 30 por ciento sobre el revestimiento y entre el 10 y el 40 por ciento sobre la reutilización máxima para bucles JPEG ",
            "error": []
        },
        "program control structures": {
            "translated_key": [],
            "translated_annotated_text": "Reestructuración de bucles para minimizar la E/S de datos en procesadores integrados de memoria on-chip limitados En este artículo, proponemos un marco para analizar el flujo de valores y su reutilización en nidos de bucles para minimizar el tráfico de datos bajo las limitaciones de capacidad de memoria on-chip limitada y dependencias. Nuestro análisis primero lleva a cabo la fusión de posibles nidos de bucles intra-procedimiento y luego realiza la distribución de bucles. El análisis descubre el factor de proximidad de dos declaraciones, que es una medida cuantitativa del tráfico de datos guardado por unidad de memoria ocupada si las declaraciones estaban bajo el mismo nido de bucle sobre el caso donde están bajo diferentes nidos de bucle. A continuación, desarrollamos un algoritmo codicioso que atraviesa el gráfico de dependencia del programa para agrupar declaraciones juntas bajo el mismo nido de bucle legalmente para promover la reutilización máxima por unidad de memoria ocupada. Implementamos nuestro marco en Petit, una herramienta para análisis de dependencia y transformaciones de bucles. Comparamos nuestro método con uno basado en el alicatado del nido de bucle fusionado y uno basado en una estrategia codiciosa para maximizar puramente la reutilización. Demostramos que nuestros métodos funcionan mejor que ambas estrategias en la mayoría de los casos para procesadores como TMS320Cxx, que tienen una cantidad muy limitada de memoria en el chip. Las mejoras en la E/S de datos oscilan entre el 10 y el 30 por ciento sobre el revestimiento y entre el 10 y el 40 por ciento sobre la reutilización máxima para bucles JPEG ",
            "error": []
        },
        "storage management chips": {
            "translated_key": [],
            "translated_annotated_text": "Reestructuración de bucles para minimizar la E/S de datos en procesadores integrados de memoria on-chip limitados En este artículo, proponemos un marco para analizar el flujo de valores y su reutilización en nidos de bucles para minimizar el tráfico de datos bajo las limitaciones de capacidad de memoria on-chip limitada y dependencias. Nuestro análisis primero lleva a cabo la fusión de posibles nidos de bucles intra-procedimiento y luego realiza la distribución de bucles. El análisis descubre el factor de proximidad de dos declaraciones, que es una medida cuantitativa del tráfico de datos guardado por unidad de memoria ocupada si las declaraciones estaban bajo el mismo nido de bucle sobre el caso donde están bajo diferentes nidos de bucle. A continuación, desarrollamos un algoritmo codicioso que atraviesa el gráfico de dependencia del programa para agrupar declaraciones juntas bajo el mismo nido de bucle legalmente para promover la reutilización máxima por unidad de memoria ocupada. Implementamos nuestro marco en Petit, una herramienta para análisis de dependencia y transformaciones de bucles. Comparamos nuestro método con uno basado en el alicatado del nido de bucle fusionado y uno basado en una estrategia codiciosa para maximizar puramente la reutilización. Demostramos que nuestros métodos funcionan mejor que ambas estrategias en la mayoría de los casos para procesadores como TMS320Cxx, que tienen una cantidad muy limitada de memoria en el chip. Las mejoras en la E/S de datos oscilan entre el 10 y el 30 por ciento sobre el revestimiento y entre el 10 y el 40 por ciento sobre la reutilización máxima para bucles JPEG ",
            "error": []
        }
    }
}