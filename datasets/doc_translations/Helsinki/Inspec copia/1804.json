{
    "original_text": "Module placement with boundary constraints using B*-trees The module placement problem is to determine the co-ordinates of logic modules in a chip such that no two modules overlap and some cost (e.g. silicon area, interconnection length, etc.) is optimised. To shorten connections between inputs and outputs and/or make related modules adjacent, it is desired to place some modules along the specific boundaries of a chip. To deal with such boundary constraints, we explore the feasibility conditions of a B*-tree with boundary constraints and develop a simulated annealing-based algorithm using B*-trees. Unlike most previous work, the proposed algorithm guarantees a feasible B*-tree with boundary constraints for each perturbation. Experimental results show that the algorithm can obtain a smaller silicon area than the most recent work based on sequence pairs",
    "original_translation": "Colocación de módulos con limitaciones de límite usando árboles B* El problema de colocación de módulos es determinar las coordenadas de módulos lógicos en un chip de tal manera que no se superpongan dos módulos y algún costo (por ejemplo. área de silicio, longitud de interconexión, etc.) está optimizado. Para acortar las conexiones entre entradas y salidas y/o hacer módulos relacionados adyacentes, se desea colocar algunos módulos a lo largo de los límites específicos de un chip. Para hacer frente a estas limitaciones de límites, exploramos las condiciones de viabilidad de un árbol B* con limitaciones de límites y desarrollamos un algoritmo simulado basado en recocido usando árboles B*. A diferencia de la mayoría de los trabajos anteriores, el algoritmo propuesto garantiza un árbol B* factible con limitaciones de límites para cada perturbación. Los resultados experimentales muestran que el algoritmo puede obtener un área de silicio más pequeña que el trabajo más reciente basado en pares de secuencias",
    "error_count": 10,
    "keys": {
        "logic module placement": {
            "translated_key": [],
            "translated_annotated_text": "Colocación de módulos con limitaciones de límite usando árboles B* El problema de colocación de módulos es determinar las coordenadas de módulos lógicos en un chip de tal manera que no se superpongan dos módulos y algún costo (por ejemplo. área de silicio, longitud de interconexión, etc.) está optimizado. Para acortar las conexiones entre entradas y salidas y/o hacer módulos relacionados adyacentes, se desea colocar algunos módulos a lo largo de los límites específicos de un chip. Para hacer frente a estas limitaciones de límites, exploramos las condiciones de viabilidad de un árbol B* con limitaciones de límites y desarrollamos un algoritmo simulado basado en recocido usando árboles B*. A diferencia de la mayoría de los trabajos anteriores, el algoritmo propuesto garantiza un árbol B* factible con limitaciones de límites para cada perturbación. Los resultados experimentales muestran que el algoritmo puede obtener un área de silicio más pequeña que el trabajo más reciente basado en pares de secuencias ",
            "error": []
        },
        "boundary constraints": {
            "translated_key": [
                "boundary",
                "boundary",
                "boundary",
                "frontarias"
            ],
            "translated_annotated_text": "Colocación de módulos con restricciones <br>boundary</br> usando árboles B* El problema de colocación de módulos es determinar las coordenadas de módulos lógicos en un chip de tal manera que no se superpongan dos módulos y algún costo (por ejemplo. área de silicio, longitud de interconexión, etc.) está optimizado. Para acortar las conexiones entre entradas y salidas y/o hacer módulos relacionados adyacentes, se desea colocar algunos módulos a lo largo de los límites específicos de un chip. Para hacer frente a tales restricciones <br>boundary</br>, exploramos las condiciones de viabilidad de un árbol B* con restricciones <br>boundary</br> y desarrollamos un algoritmo simulado basado en recocido usando árboles B*. A diferencia de la mayoría de los trabajos anteriores, el algoritmo propuesto garantiza un árbol B* factible con restricciones <br>frontarias</br> para cada perturbación. Los resultados experimentales muestran que el algoritmo puede obtener un área de silicio más pequeña que el trabajo más reciente basado en pares de secuencias ",
            "error": [
                "boundary",
                "boundary",
                "boundary",
                "frontarias"
            ]
        },
        "B*-tree": {
            "translated_key": [
                "B*",
                "B* factible"
            ],
            "translated_annotated_text": "Colocación de módulos con limitaciones de límite usando árboles B* El problema de colocación de módulos es determinar las coordenadas de módulos lógicos en un chip de tal manera que no se superpongan dos módulos y algún costo (por ejemplo. área de silicio, longitud de interconexión, etc.) está optimizado. Para acortar las conexiones entre entradas y salidas y/o hacer módulos relacionados adyacentes, se desea colocar algunos módulos a lo largo de los límites específicos de un chip. Para hacer frente a tales restricciones de límites, exploramos las condiciones de viabilidad de un árbol <br>B*</br> con restricciones de límites y desarrollamos un algoritmo simulado basado en recocido usando árboles B*. A diferencia de la mayoría de trabajos anteriores, el algoritmo propuesto garantiza un árbol <br>B* factible</br> con limitaciones de límite para cada perturbación. Los resultados experimentales muestran que el algoritmo puede obtener un área de silicio más pequeña que el trabajo más reciente basado en pares de secuencias ",
            "error": [
                "B*",
                "B* factible"
            ]
        },
        "simulated annealing algorithm": {
            "translated_key": [],
            "translated_annotated_text": "Colocación de módulos con limitaciones de límite usando árboles B* El problema de colocación de módulos es determinar las coordenadas de módulos lógicos en un chip de tal manera que no se superpongan dos módulos y algún costo (por ejemplo. área de silicio, longitud de interconexión, etc.) está optimizado. Para acortar las conexiones entre entradas y salidas y/o hacer módulos relacionados adyacentes, se desea colocar algunos módulos a lo largo de los límites específicos de un chip. Para hacer frente a estas limitaciones de límites, exploramos las condiciones de viabilidad de un árbol B* con limitaciones de límites y desarrollamos un algoritmo simulado basado en recocido usando árboles B*. A diferencia de la mayoría de los trabajos anteriores, el algoritmo propuesto garantiza un árbol B* factible con limitaciones de límites para cada perturbación. Los resultados experimentales muestran que el algoritmo puede obtener un área de silicio más pequeña que el trabajo más reciente basado en pares de secuencias ",
            "error": []
        },
        "silicon area": {
            "translated_key": [
                "silicon area",
                "silicon menor"
            ],
            "translated_annotated_text": "Colocación de módulos con limitaciones de límite usando árboles B* El problema de colocación de módulos es determinar las coordenadas de módulos lógicos en un chip de tal manera que no se superpongan dos módulos y algún costo (por ejemplo. <br>silicon area</br>, longitud de interconexión, etc.) está optimizado. Para acortar las conexiones entre entradas y salidas y/o hacer módulos relacionados adyacentes, se desea colocar algunos módulos a lo largo de los límites específicos de un chip. Para hacer frente a estas limitaciones de límites, exploramos las condiciones de viabilidad de un árbol B* con limitaciones de límites y desarrollamos un algoritmo simulado basado en recocido usando árboles B*. A diferencia de la mayoría de los trabajos anteriores, el algoritmo propuesto garantiza un árbol B* factible con limitaciones de límites para cada perturbación. Los resultados experimentales muestran que el algoritmo puede obtener un área <br>silicon menor</br> que el trabajo más reciente basado en pares de secuencias ",
            "error": [
                "silicon area",
                "silicon menor"
            ]
        },
        "interconnection length": {
            "translated_key": [],
            "translated_annotated_text": "Colocación de módulos con limitaciones de límite usando árboles B* El problema de colocación de módulos es determinar las coordenadas de módulos lógicos en un chip de tal manera que no se superpongan dos módulos y algún costo (por ejemplo. área de silicio, longitud de interconexión, etc. está optimizado. Para acortar las conexiones entre entradas y salidas y/o hacer módulos relacionados adyacentes, se desea colocar algunos módulos a lo largo de los límites específicos de un chip. Para hacer frente a estas limitaciones de límites, exploramos las condiciones de viabilidad de un árbol B* con limitaciones de límites y desarrollamos un algoritmo simulado basado en recocido usando árboles B*. A diferencia de la mayoría de los trabajos anteriores, el algoritmo propuesto garantiza un árbol B* factible con limitaciones de límites para cada perturbación. Los resultados experimentales muestran que el algoritmo puede obtener un área de silicio más pequeña que el trabajo más reciente basado en pares de secuencias ",
            "error": []
        },
        "logic CAD": {
            "translated_key": [],
            "translated_annotated_text": "Colocación de módulos con limitaciones de límite usando árboles B* El problema de colocación de módulos es determinar las coordenadas de módulos lógicos en un chip de tal manera que no se superpongan dos módulos y algún costo (por ejemplo. área de silicio, longitud de interconexión, etc.) está optimizado. Para acortar las conexiones entre entradas y salidas y/o hacer módulos relacionados adyacentes, se desea colocar algunos módulos a lo largo de los límites específicos de un chip. Para hacer frente a estas limitaciones de límites, exploramos las condiciones de viabilidad de un árbol B* con limitaciones de límites y desarrollamos un algoritmo simulado basado en recocido usando árboles B*. A diferencia de la mayoría de los trabajos anteriores, el algoritmo propuesto garantiza un árbol B* factible con limitaciones de límites para cada perturbación. Los resultados experimentales muestran que el algoritmo puede obtener un área de silicio más pequeña que el trabajo más reciente basado en pares de secuencias ",
            "error": []
        },
        "modules": {
            "translated_key": [
                "modules",
                "modules",
                "módulos relacionados",
                "módulos"
            ],
            "translated_annotated_text": "Colocación de módulos con restricciones de límite usando árboles B* El problema de colocación de módulos es determinar las coordenadas de lógica <br>modules</br> en un chip de tal manera que no haya dos superposiciones <br>modules</br> y algún costo (por ejemplo. área de silicio, longitud de interconexión, etc.) está optimizado. Para acortar las conexiones entre entradas y salidas y/o hacer <br>módulos relacionados</br> adyacentes, se desea colocar algunos <br>módulos</br> a lo largo de los límites específicos de un chip. Para hacer frente a estas limitaciones de límites, exploramos las condiciones de viabilidad de un árbol B* con limitaciones de límites y desarrollamos un algoritmo simulado basado en recocido usando árboles B*. A diferencia de la mayoría de los trabajos anteriores, el algoritmo propuesto garantiza un árbol B* factible con limitaciones de límites para cada perturbación. Los resultados experimentales muestran que el algoritmo puede obtener un área de silicio más pequeña que el trabajo más reciente basado en pares de secuencias ",
            "error": [
                "modules",
                "modules",
                "módulos relacionados",
                "módulos"
            ]
        },
        "simulated annealing": {
            "translated_key": [],
            "translated_annotated_text": "Colocación de módulos con limitaciones de límite usando árboles B* El problema de colocación de módulos es determinar las coordenadas de módulos lógicos en un chip de tal manera que no se superpongan dos módulos y algún costo (por ejemplo. área de silicio, longitud de interconexión, etc.) está optimizado. Para acortar las conexiones entre entradas y salidas y/o hacer módulos relacionados adyacentes, se desea colocar algunos módulos a lo largo de los límites específicos de un chip. Para hacer frente a estas limitaciones de límites, exploramos las condiciones de viabilidad de un árbol B* con limitaciones de límites y desarrollamos un algoritmo basado en recocido <br> utilizando árboles B*. A diferencia de la mayoría de los trabajos anteriores, el algoritmo propuesto garantiza un árbol B* factible con limitaciones de límites para cada perturbación. Los resultados experimentales muestran que el algoritmo puede obtener un área de silicio más pequeña que el trabajo más reciente basado en pares de secuencias ",
            "error": []
        },
        "trees (mathematics)": {
            "translated_key": [],
            "translated_annotated_text": "Colocación de módulos con limitaciones de límite usando árboles B* El problema de colocación de módulos es determinar las coordenadas de módulos lógicos en un chip de tal manera que no se superpongan dos módulos y algún costo (por ejemplo. área de silicio, longitud de interconexión, etc.) está optimizado. Para acortar las conexiones entre entradas y salidas y/o hacer módulos relacionados adyacentes, se desea colocar algunos módulos a lo largo de los límites específicos de un chip. Para hacer frente a estas limitaciones de límites, exploramos las condiciones de viabilidad de un árbol B* con limitaciones de límites y desarrollamos un algoritmo simulado basado en recocido usando árboles B*. A diferencia de la mayoría de los trabajos anteriores, el algoritmo propuesto garantiza un árbol B* factible con limitaciones de límites para cada perturbación. Los resultados experimentales muestran que el algoritmo puede obtener un área de silicio más pequeña que el trabajo más reciente basado en pares de secuencias ",
            "error": []
        }
    }
}