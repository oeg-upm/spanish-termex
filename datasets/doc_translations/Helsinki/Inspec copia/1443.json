{
    "original_text": "C and C++: a case for compatibility Modern C and C++ are sibling languages descended from Classic C. In many peoples minds, they are (wrongly, but understandably) fused into the mythical C/C++ programming language. There is no C/C++ language, but there is a C/C++ community. Previously the author described some of the incompatibilities that complicate the work of developers within that C/C++ community. In this article, he discusses some of the underlying myths that help perpetuate these incompatibilities. He also shows why more compatibility (ideally, full compatibility) is in the best interest of the C/C++ community. In the next paper, he presents some examples of how the incompatibilities in C and C++ might be resolved",
    "original_translation": "C y C++: un caso de compatibilidad Los lenguajes modernos C y C++ son lenguajes hermanos que descienden del clásico C. En muchas mentes de la gente, están (mal, pero comprensiblemente) fusionados en el mítico lenguaje de programación C/C++. No hay lenguaje C/C++, pero hay una comunidad de C/C++. Anteriormente el autor describió algunas de las incompatibilidades que complican el trabajo de los desarrolladores dentro de esa comunidad C/C++. En este artículo, discute algunos de los mitos subyacentes que ayudan a perpetuar estas incompatibilidades. También muestra por qué más compatibilidad (idealmente, compatibilidad completa) es en el mejor interés de la comunidad C/C++. En el próximo artículo, presenta algunos ejemplos de cómo las incompatibilidades en C y C++ podrían ser resueltas",
    "error_count": 6,
    "keys": {
        "C++ language": {
            "translated_key": "C++",
            "translated_annotated_text": "C y C++: un caso de compatibilidad Los lenguajes modernos C y C++ son lenguajes hermanos que descienden del clásico C. En muchas mentes de la gente, están (mal, pero comprensiblemente) fusionados en el mítico lenguaje de programación C/C++. No hay lenguaje C/<br>C++</br>, pero hay una comunidad C/C++. Anteriormente el autor describió algunas de las incompatibilidades que complican el trabajo de los desarrolladores dentro de esa comunidad C/C++. En este artículo, discute algunos de los mitos subyacentes que ayudan a perpetuar estas incompatibilidades. También muestra por qué más compatibilidad (idealmente, compatibilidad completa) es en el mejor interés de la comunidad C/C++. En el próximo artículo, presenta algunos ejemplos de cómo las incompatibilidades en C y C++ podrían ser resueltas ",
            "error": [
                ""
            ]
        },
        "C language": {
            "translated_key": [],
            "translated_annotated_text": "C y C++: un caso de compatibilidad Los lenguajes modernos C y C++ son lenguajes hermanos que descienden del clásico C. En muchas mentes de la gente, están (mal, pero comprensiblemente) fusionados en el mítico lenguaje de programación C/C++. No hay lenguaje C/C++, pero hay una comunidad de C/C++. Anteriormente el autor describió algunas de las incompatibilidades que complican el trabajo de los desarrolladores dentro de esa comunidad C/C++. En este artículo, discute algunos de los mitos subyacentes que ayudan a perpetuar estas incompatibilidades. También muestra por qué más compatibilidad (idealmente, compatibilidad completa) es en el mejor interés de la comunidad C/C++. En el próximo artículo, presenta algunos ejemplos de cómo las incompatibilidades en C y C++ podrían ser resueltas ",
            "error": []
        },
        "incompatibilities": {
            "translated_key": "incompatibilidades",
            "translated_annotated_text": "C y C++: un caso de compatibilidad Los lenguajes modernos C y C++ son lenguajes hermanos que descienden del clásico C. En muchas mentes de la gente, están (mal, pero comprensiblemente) fusionados en el mítico lenguaje de programación C/C++. No hay lenguaje C/C++, pero hay una comunidad de C/C++. Anteriormente el autor describió algunas de las <br>incompatibilidades</br> que complican el trabajo de los desarrolladores dentro de esa comunidad C/C++. En este artículo, discute algunos de los mitos subyacentes que ayudan a perpetuar estas <br>incompatibilidades</br>. También muestra por qué más compatibilidad (idealmente, compatibilidad completa) es en el mejor interés de la comunidad C/C++. En el siguiente artículo, presenta algunos ejemplos de cómo las <br>incompatibilidades</br> en C y C++ podrían ser resueltas ",
            "error": [
                ""
            ]
        },
        "object-oriented programming": {
            "translated_key": [],
            "translated_annotated_text": "C y C++: un caso de compatibilidad Los lenguajes modernos C y C++ son lenguajes hermanos que descienden del clásico C. En muchas mentes de la gente, están (mal, pero comprensiblemente) fusionados en el mítico lenguaje de programación C/C++. No hay lenguaje C/C++, pero hay una comunidad de C/C++. Anteriormente el autor describió algunas de las incompatibilidades que complican el trabajo de los desarrolladores dentro de esa comunidad C/C++. En este artículo, discute algunos de los mitos subyacentes que ayudan a perpetuar estas incompatibilidades. También muestra por qué más compatibilidad (idealmente, compatibilidad completa) es en el mejor interés de la comunidad C/C++. En el próximo artículo, presenta algunos ejemplos de cómo las incompatibilidades en C y C++ podrían ser resueltas ",
            "error": []
        },
        "class hierarchies": {
            "translated_key": [],
            "translated_annotated_text": "C y C++: un caso de compatibilidad Los lenguajes modernos C y C++ son lenguajes hermanos que descienden del clásico C. En muchas mentes de la gente, están (mal, pero comprensiblemente) fusionados en el mítico lenguaje de programación C/C++. No hay lenguaje C/C++, pero hay una comunidad de C/C++. Anteriormente el autor describió algunas de las incompatibilidades que complican el trabajo de los desarrolladores dentro de esa comunidad C/C++. En este artículo, discute algunos de los mitos subyacentes que ayudan a perpetuar estas incompatibilidades. También muestra por qué más compatibilidad (idealmente, compatibilidad completa) es en el mejor interés de la comunidad C/C++. En el próximo artículo, presenta algunos ejemplos de cómo las incompatibilidades en C y C++ podrían ser resueltas ",
            "error": []
        },
        "low-level programming": {
            "translated_key": [],
            "translated_annotated_text": "C y C++: un caso de compatibilidad Los lenguajes modernos C y C++ son lenguajes hermanos que descienden del clásico C. En muchas mentes de la gente, están (mal, pero comprensiblemente) fusionados en el mítico lenguaje de programación C/C++. No hay lenguaje C/C++, pero hay una comunidad de C/C++. Anteriormente el autor describió algunas de las incompatibilidades que complican el trabajo de los desarrolladores dentro de esa comunidad C/C++. En este artículo, discute algunos de los mitos subyacentes que ayudan a perpetuar estas incompatibilidades. También muestra por qué más compatibilidad (idealmente, compatibilidad completa) es en el mejor interés de la comunidad C/C++. En el próximo artículo, presenta algunos ejemplos de cómo las incompatibilidades en C y C++ podrían ser resueltas ",
            "error": []
        },
        "C++ libraries": {
            "translated_key": [],
            "translated_annotated_text": "C y C++: un caso de compatibilidad Los lenguajes modernos C y C++ son lenguajes hermanos que descienden del clásico C. En muchas mentes de la gente, están (mal, pero comprensiblemente) fusionados en el mítico lenguaje de programación C/C++. No hay lenguaje C/C++, pero hay una comunidad de C/C++. Anteriormente el autor describió algunas de las incompatibilidades que complican el trabajo de los desarrolladores dentro de esa comunidad C/C++. En este artículo, discute algunos de los mitos subyacentes que ayudan a perpetuar estas incompatibilidades. También muestra por qué más compatibilidad (idealmente, compatibilidad completa) es en el mejor interés de la comunidad C/C++. En el próximo artículo, presenta algunos ejemplos de cómo las incompatibilidades en C y C++ podrían ser resueltas ",
            "error": []
        }
    }
}