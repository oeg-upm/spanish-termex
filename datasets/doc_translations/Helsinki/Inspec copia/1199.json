{
    "original_text": "Quasi stage order conditions for SDIRK methods The stage order condition is a simplifying assumption that reduces the number of order conditions to be fulfilled when designing a Runge-Kutta (RK) method. Because a DIRK (diagonally implicit RK) method cannot have stage order greater than 1, we introduce quasi stage order conditions and derive some of their properties for DIRKs. We use these conditions to derive a low-order DIRK method with embedded error estimator. Numerical tests with stiff ODEs and DAEs of index 1 and 2 indicate that the method is competitive with other RK methods for low accuracy tolerances",
    "original_translation": "Condiciones de orden de etapas para métodos SDIRK La condición de orden de etapas es una suposición simplificada que reduce el número de condiciones de orden que deben cumplirse al diseñar un método Runge-Kutta (RK). Debido a que un método DIRK (diagonalmente implícito RK) no puede tener un orden de etapa superior a 1, introducimos condiciones de orden de etapa cuasi y derivamos algunas de sus propiedades para DIRKs. Utilizamos estas condiciones para derivar un método DIRK de bajo orden con estimador de errores incrustado. Las pruebas numéricas con EOD rígidas y EDA de los índices 1 y 2 indican que el método es competitivo con otros métodos RK para tolerancias de baja precisión",
    "error_count": 5,
    "keys": {
        "quasi stage order conditions": {
            "translated_key": "quasi",
            "translated_annotated_text": "Condiciones de orden de etapas para métodos SDIRK La condición de orden de etapas es una suposición simplificada que reduce el número de condiciones de orden que deben cumplirse al diseñar un método Runge-Kutta (RK). Debido a que un método DIRK (diagonalmente implícito RK) no puede tener un orden de etapa superior a 1, introducimos condiciones de orden de etapa <br>quasi</br> y derivamos algunas de sus propiedades para los DIRKs. Utilizamos estas condiciones para derivar un método DIRK de bajo orden con estimador de errores incrustado. Las pruebas numéricas con EOD rígidas y EDA de los índices 1 y 2 indican que el método es competitivo con otros métodos RK para tolerancias de baja precisión ",
            "error": [
                ""
            ]
        },
        "diagonally implicit Runge-Kutta method": {
            "translated_key": [],
            "translated_annotated_text": "Condiciones de orden de etapas para métodos SDIRK La condición de orden de etapas es una suposición simplificada que reduce el número de condiciones de orden que deben cumplirse al diseñar un método Runge-Kutta (RK). Debido a que un método DIRK (diagonalmente implícito RK) no puede tener un orden de etapa superior a 1, introducimos condiciones de orden de etapa cuasi y derivamos algunas de sus propiedades para DIRKs. Utilizamos estas condiciones para derivar un método DIRK de bajo orden con estimador de errores incrustado. Las pruebas numéricas con EOD rígidas y EDA de los índices 1 y 2 indican que el método es competitivo con otros métodos RK para tolerancias de baja precisión ",
            "error": []
        },
        "embedded error estimator": {
            "translated_key": "embedded",
            "translated_annotated_text": "Condiciones de orden de etapas para métodos SDIRK La condición de orden de etapas es una suposición simplificada que reduce el número de condiciones de orden que deben cumplirse al diseñar un método Runge-Kutta (RK). Debido a que un método DIRK (diagonalmente implícito RK) no puede tener un orden de etapa superior a 1, introducimos condiciones de orden de etapa cuasi y derivamos algunas de sus propiedades para DIRKs. Utilizamos estas condiciones para derivar un método DIRK de bajo orden con estimador de error <br>embedded</br>. Las pruebas numéricas con EOD rígidas y EDA de los índices 1 y 2 indican que el método es competitivo con otros métodos RK para tolerancias de baja precisión ",
            "error": [
                ""
            ]
        },
        "numerical tests": {
            "translated_key": [],
            "translated_annotated_text": "Condiciones de orden de etapas para métodos SDIRK La condición de orden de etapas es una suposición simplificada que reduce el número de condiciones de orden que deben cumplirse al diseñar un método Runge-Kutta (RK). Debido a que un método DIRK (diagonalmente implícito RK) no puede tener un orden de etapa superior a 1, introducimos condiciones de orden de etapa cuasi y derivamos algunas de sus propiedades para DIRKs. Utilizamos estas condiciones para derivar un método DIRK de bajo orden con estimador de errores incrustado. Las pruebas numéricas con EOD rígidas y EDA de los índices 1 y 2 indican que el método es competitivo con otros métodos RK para tolerancias de baja precisión ",
            "error": []
        },
        "differential-algebraic systems": {
            "translated_key": [],
            "translated_annotated_text": "Condiciones de orden de etapas para métodos SDIRK La condición de orden de etapas es una suposición simplificada que reduce el número de condiciones de orden que deben cumplirse al diseñar un método Runge-Kutta (RK). Debido a que un método DIRK (diagonalmente implícito RK) no puede tener un orden de etapa superior a 1, introducimos condiciones de orden de etapa cuasi y derivamos algunas de sus propiedades para DIRKs. Utilizamos estas condiciones para derivar un método DIRK de bajo orden con estimador de errores incrustado. Las pruebas numéricas con EOD rígidas y EDA de los índices 1 y 2 indican que el método es competitivo con otros métodos RK para tolerancias de baja precisión ",
            "error": []
        },
        "SDIRK methods": {
            "translated_key": "SDIRK",
            "translated_annotated_text": "Condiciones de orden stage quasi para métodos <br>SDIRK</br> La condición de orden stage es una suposición simplificada que reduce el número de condiciones de orden que deben cumplirse al diseñar un método Runge-Kutta (RK). Debido a que un método DIRK (diagonalmente implícito RK) no puede tener un orden de etapa superior a 1, introducimos condiciones de orden de etapa cuasi y derivamos algunas de sus propiedades para DIRKs. Utilizamos estas condiciones para derivar un método DIRK de bajo orden con estimador de errores incrustado. Las pruebas numéricas con EOD rígidas y EDA de los índices 1 y 2 indican que el método es competitivo con otros métodos RK para tolerancias de baja precisión ",
            "error": [
                ""
            ]
        },
        "differential equations": {
            "translated_key": [],
            "translated_annotated_text": "Condiciones de orden de etapas para métodos SDIRK La condición de orden de etapas es una suposición simplificada que reduce el número de condiciones de orden que deben cumplirse al diseñar un método Runge-Kutta (RK). Debido a que un método DIRK (diagonalmente implícito RK) no puede tener un orden de etapa superior a 1, introducimos condiciones de orden de etapa cuasi y derivamos algunas de sus propiedades para DIRKs. Utilizamos estas condiciones para derivar un método DIRK de bajo orden con estimador de errores incrustado. Las pruebas numéricas con EOD rígidas y EDA de los índices 1 y 2 indican que el método es competitivo con otros métodos RK para tolerancias de baja precisión ",
            "error": []
        },
        "Runge-Kutta methods": {
            "translated_key": [],
            "translated_annotated_text": "Condiciones de orden de etapas para métodos SDIRK La condición de orden de etapas es una suposición simplificada que reduce el número de condiciones de orden que deben cumplirse al diseñar un método Runge-Kutta (RK). Debido a que un método DIRK (diagonalmente implícito RK) no puede tener un orden de etapa superior a 1, introducimos condiciones de orden de etapa cuasi y derivamos algunas de sus propiedades para DIRKs. Utilizamos estas condiciones para derivar un método DIRK de bajo orden con estimador de errores incrustado. Las pruebas numéricas con EOD rígidas y EDA de los índices 1 y 2 indican que el método es competitivo con otros métodos RK para tolerancias de baja precisión ",
            "error": []
        }
    }
}