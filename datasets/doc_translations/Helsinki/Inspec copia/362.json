{
    "original_text": "On batch-constructing B/sup +/-trees: algorithm and its performance evaluation Efficient construction of indexes is very important in bulk-loading a database or adding a new index to an existing database since both of them should handle an enormous volume of data. In this paper, we propose an algorithm for batch-constructing the B/sup +/-tree, the most widely used index structure in database systems. The main characteristic of our algorithm is to simultaneously process all the key values to be placed on each B+-tree page when accessing the page. This avoids the overhead due to accessing the same page multiple times, which results from applying the B+-tree insertion algorithm repeatedly. For performance evaluation, we have analyzed our algorithm in terms of the number of disk accesses. The results show that the number of disk accesses excluding those in the relocation process is identical to the number of pages belonging to the B/sup +/-tree. Considering that the relocation process is an unavoidable preprocessing step for batch-constructing of B/sup +/-trees, our algorithm requires just one disk access per B+-tree page, and therefore turns out to be optimal. We also present the performance tendency in relation with different parameter values via simulation. Finally, we show the performance enhancement effect of our algorithm, compared with the one using repeated insertions through experiments",
    "original_translation": "Sobre la construcción por lotes de B/sup +/-árboles: algoritmo y su evaluación de rendimiento La construcción eficiente de índices es muy importante para la carga masiva de una base de datos o la adición de un nuevo índice a una base de datos existente, ya que ambos deben manejar un enorme volumen de datos. En este trabajo, proponemos un algoritmo para la construcción por lotes del B/sup +/-tree, la estructura de índices más utilizada en los sistemas de bases de datos. La principal característica de nuestro algoritmo es procesar simultáneamente todos los valores clave que se colocarán en cada página de árbol B+ al acceder a la página. Esto evita la sobrecarga debido al acceso a la misma página varias veces, que resulta de la aplicación del algoritmo de inserción de árbol B+ repetidamente. Para la evaluación de rendimiento, hemos analizado nuestro algoritmo en términos del número de accesos de disco. Los resultados muestran que el número de accesos de disco excluidos aquellos en el proceso de reubicación es idéntico al número de páginas pertenecientes al B/sup +/-tree. Considerando que el proceso de reubicación es un paso inevitable de preprocesamiento para la construcción por lotes de B/sup +/-árboles, nuestro algoritmo requiere sólo un acceso de disco por página de B+-árbol, y por lo tanto resulta ser óptimo. También se presenta la tendencia al rendimiento en relación con diferentes valores de parámetros a través de la simulación. Por último, mostramos el efecto de mejora de rendimiento de nuestro algoritmo, en comparación con el uso de inserciones repetidas a través de experimentos",
    "error_count": 10,
    "keys": {
        "B+-tree batch construction": {
            "translated_key": [],
            "translated_annotated_text": "Sobre la construcción por lotes de B/sup +/-árboles: algoritmo y su evaluación de rendimiento La construcción eficiente de índices es muy importante para la carga masiva de una base de datos o la adición de un nuevo índice a una base de datos existente, ya que ambos deben manejar un enorme volumen de datos. En este trabajo, proponemos un algoritmo para la construcción por lotes del B/sup +/-tree, la estructura de índices más utilizada en los sistemas de bases de datos. La principal característica de nuestro algoritmo es procesar simultáneamente todos los valores clave que se colocarán en cada página de árbol B+ al acceder a la página. Esto evita la sobrecarga debido al acceso a la misma página varias veces, que resulta de la aplicación del algoritmo de inserción de árbol B+ repetidamente. Para la evaluación de rendimiento, hemos analizado nuestro algoritmo en términos del número de accesos de disco. Los resultados muestran que el número de accesos de disco excluidos aquellos en el proceso de reubicación es idéntico al número de páginas pertenecientes al B/sup +/-tree. Considerando que el proceso de reubicación es un paso inevitable de preprocesamiento para la construcción por lotes de B/sup +/-árboles, nuestro algoritmo requiere sólo un acceso de disco por página de B+-árbol, y por lo tanto resulta ser óptimo. También se presenta la tendencia al rendimiento en relación con diferentes valores de parámetros a través de la simulación. Por último, mostramos el efecto de mejora de rendimiento de nuestro algoritmo, en comparación con el uso de inserciones repetidas a través de experimentos ",
            "error": []
        },
        "algorithm performance evaluation": {
            "translated_key": [],
            "translated_annotated_text": "Sobre la construcción por lotes de B/sup +/-árboles: algoritmo y su evaluación de rendimiento La construcción eficiente de índices es muy importante para la carga masiva de una base de datos o la adición de un nuevo índice a una base de datos existente, ya que ambos deben manejar un enorme volumen de datos. En este trabajo, proponemos un algoritmo para la construcción por lotes del B/sup +/-tree, la estructura de índices más utilizada en los sistemas de bases de datos. La principal característica de nuestro algoritmo es procesar simultáneamente todos los valores clave que se colocarán en cada página de árbol B+ al acceder a la página. Esto evita la sobrecarga debido al acceso a la misma página varias veces, que resulta de la aplicación del algoritmo de inserción de árbol B+ repetidamente. Para la evaluación de rendimiento, hemos analizado nuestro algoritmo en términos del número de accesos de disco. Los resultados muestran que el número de accesos de disco excluidos aquellos en el proceso de reubicación es idéntico al número de páginas pertenecientes al B/sup +/-tree. Considerando que el proceso de reubicación es un paso inevitable de preprocesamiento para la construcción por lotes de B/sup +/-árboles, nuestro algoritmo requiere sólo un acceso de disco por página de B+-árbol, y por lo tanto resulta ser óptimo. También se presenta la tendencia al rendimiento en relación con diferentes valores de parámetros a través de la simulación. Por último, mostramos el efecto de mejora de rendimiento de nuestro algoritmo, en comparación con el uso de inserciones repetidas a través de experimentos ",
            "error": []
        },
        "database bulk loading": {
            "translated_key": [],
            "translated_annotated_text": "Sobre la construcción por lotes de B/sup +/-árboles: algoritmo y su evaluación de rendimiento La construcción eficiente de índices es muy importante para la carga masiva de una base de datos o la adición de un nuevo índice a una base de datos existente, ya que ambos deben manejar un enorme volumen de datos. En este trabajo, proponemos un algoritmo para la construcción por lotes del B/sup +/-tree, la estructura de índices más utilizada en los sistemas de bases de datos. La principal característica de nuestro algoritmo es procesar simultáneamente todos los valores clave que se colocarán en cada página de árbol B+ al acceder a la página. Esto evita la sobrecarga debido al acceso a la misma página varias veces, que resulta de la aplicación del algoritmo de inserción de árbol B+ repetidamente. Para la evaluación de rendimiento, hemos analizado nuestro algoritmo en términos del número de accesos de disco. Los resultados muestran que el número de accesos de disco excluidos aquellos en el proceso de reubicación es idéntico al número de páginas pertenecientes al B/sup +/-tree. Considerando que el proceso de reubicación es un paso inevitable de preprocesamiento para la construcción por lotes de B/sup +/-árboles, nuestro algoritmo requiere sólo un acceso de disco por página de B+-árbol, y por lo tanto resulta ser óptimo. También se presenta la tendencia al rendimiento en relación con diferentes valores de parámetros a través de la simulación. Por último, mostramos el efecto de mejora de rendimiento de nuestro algoritmo, en comparación con el uso de inserciones repetidas a través de experimentos ",
            "error": []
        },
        "index structure": {
            "translated_key": [],
            "translated_annotated_text": "Sobre la construcción por lotes de B/sup +/-árboles: algoritmo y su evaluación de rendimiento La construcción eficiente de índices es muy importante para la carga masiva de una base de datos o la adición de un nuevo índice a una base de datos existente, ya que ambos deben manejar un enorme volumen de datos. En este trabajo, proponemos un algoritmo para la construcción por lotes del B/sup +/-tree, la estructura de índice más utilizada en los sistemas de bases de datos. La principal característica de nuestro algoritmo es procesar simultáneamente todos los valores clave que se colocarán en cada página de árbol B+ al acceder a la página. Esto evita la sobrecarga debido al acceso a la misma página varias veces, que resulta de la aplicación del algoritmo de inserción de árbol B+ repetidamente. Para la evaluación de rendimiento, hemos analizado nuestro algoritmo en términos del número de accesos de disco. Los resultados muestran que el número de accesos de disco excluidos aquellos en el proceso de reubicación es idéntico al número de páginas pertenecientes al B/sup +/-tree. Considerando que el proceso de reubicación es un paso inevitable de preprocesamiento para la construcción por lotes de B/sup +/-árboles, nuestro algoritmo requiere sólo un acceso de disco por página de B+-árbol, y por lo tanto resulta ser óptimo. También se presenta la tendencia al rendimiento en relación con diferentes valores de parámetros a través de la simulación. Por último, mostramos el efecto de mejora de rendimiento de nuestro algoritmo, en comparación con el uso de inserciones repetidas a través de experimentos ",
            "error": []
        },
        "B+-tree page": {
            "translated_key": [
                "B+-tree",
                "B+"
            ],
            "translated_annotated_text": "Sobre la construcción por lotes de B/sup +/-árboles: algoritmo y su evaluación de rendimiento La construcción eficiente de índices es muy importante para la carga masiva de una base de datos o la adición de un nuevo índice a una base de datos existente, ya que ambos deben manejar un enorme volumen de datos. En este trabajo, proponemos un algoritmo para la construcción por lotes del B/sup +/-tree, la estructura de índices más utilizada en los sistemas de bases de datos. La principal característica de nuestro algoritmo es procesar simultáneamente todos los valores clave que deben colocarse en cada página <br>B+-tree</br> al acceder a la página. Esto evita la sobrecarga debido al acceso a la misma página varias veces, que resulta de la aplicación del algoritmo de inserción de árbol B+ repetidamente. Para la evaluación de rendimiento, hemos analizado nuestro algoritmo en términos del número de accesos de disco. Los resultados muestran que el número de accesos de disco excluidos aquellos en el proceso de reubicación es idéntico al número de páginas pertenecientes al B/sup +/-tree. Considerando que el proceso de reubicación es un paso inevitable de preprocesamiento para la construcción por lotes de B/sup +/-árboles, nuestro algoritmo requiere sólo un acceso de disco por página de árbol <br>B+</br>, y por lo tanto resulta ser óptimo. También se presenta la tendencia al rendimiento en relación con diferentes valores de parámetros a través de la simulación. Por último, mostramos el efecto de mejora de rendimiento de nuestro algoritmo, en comparación con el uso de inserciones repetidas a través de experimentos ",
            "error": [
                "B+-tree",
                "B+"
            ]
        },
        "page access": {
            "translated_key": [],
            "translated_annotated_text": "Sobre la construcción por lotes de B/sup +/-árboles: algoritmo y su evaluación de rendimiento La construcción eficiente de índices es muy importante para la carga masiva de una base de datos o la adición de un nuevo índice a una base de datos existente, ya que ambos deben manejar un enorme volumen de datos. En este trabajo, proponemos un algoritmo para la construcción por lotes del B/sup +/-tree, la estructura de índices más utilizada en los sistemas de bases de datos. La principal característica de nuestro algoritmo es procesar simultáneamente todos los valores clave que se colocarán en cada página de árbol B+ al acceder a la página. Esto evita la sobrecarga debido al acceso a la misma página varias veces, que resulta de la aplicación del algoritmo de inserción de árbol B+ repetidamente. Para la evaluación de rendimiento, hemos analizado nuestro algoritmo en términos del número de accesos de disco. Los resultados muestran que el número de accesos de disco excluidos aquellos en el proceso de reubicación es idéntico al número de páginas pertenecientes al B/sup +/-tree. Considerando que el proceso de reubicación es un paso inevitable de preprocesamiento para la construcción por lotes de B/sup +/-árboles, nuestro algoritmo requiere sólo un acceso de disco por página de B+-árbol, y por lo tanto resulta ser óptimo. También se presenta la tendencia al rendimiento en relación con diferentes valores de parámetros a través de la simulación. Por último, mostramos el efecto de mejora de rendimiento de nuestro algoritmo, en comparación con el uso de inserciones repetidas a través de experimentos ",
            "error": []
        },
        "B+-tree insertion algorithm": {
            "translated_key": "B+-tree",
            "translated_annotated_text": "Sobre la construcción por lotes de B/sup +/-árboles: algoritmo y su evaluación de rendimiento La construcción eficiente de índices es muy importante para la carga masiva de una base de datos o la adición de un nuevo índice a una base de datos existente, ya que ambos deben manejar un enorme volumen de datos. En este trabajo, proponemos un algoritmo para la construcción por lotes del B/sup +/-tree, la estructura de índices más utilizada en los sistemas de bases de datos. La principal característica de nuestro algoritmo es procesar simultáneamente todos los valores clave que se colocarán en cada página de árbol B+ al acceder a la página. Esto evita la sobrecarga debido al acceso a la misma página varias veces, que resulta de la aplicación del algoritmo de inserción <br>B+-tree</br> repetidamente. Para la evaluación de rendimiento, hemos analizado nuestro algoritmo en términos del número de accesos de disco. Los resultados muestran que el número de accesos de disco excluidos aquellos en el proceso de reubicación es idéntico al número de páginas pertenecientes al B/sup +/-tree. Considerando que el proceso de reubicación es un paso inevitable de preprocesamiento para la construcción por lotes de B/sup +/-árboles, nuestro algoritmo requiere sólo un acceso de disco por página de B+-árbol, y por lo tanto resulta ser óptimo. También se presenta la tendencia al rendimiento en relación con diferentes valores de parámetros a través de la simulación. Por último, mostramos el efecto de mejora de rendimiento de nuestro algoritmo, en comparación con el uso de inserciones repetidas a través de experimentos ",
            "error": [
                ""
            ]
        },
        "disk accesses": {
            "translated_key": [],
            "translated_annotated_text": "Sobre la construcción por lotes de B/sup +/-árboles: algoritmo y su evaluación de rendimiento La construcción eficiente de índices es muy importante para la carga masiva de una base de datos o la adición de un nuevo índice a una base de datos existente, ya que ambos deben manejar un enorme volumen de datos. En este trabajo, proponemos un algoritmo para la construcción por lotes del B/sup +/-tree, la estructura de índices más utilizada en los sistemas de bases de datos. La principal característica de nuestro algoritmo es procesar simultáneamente todos los valores clave que se colocarán en cada página de árbol B+ al acceder a la página. Esto evita la sobrecarga debido al acceso a la misma página varias veces, que resulta de la aplicación del algoritmo de inserción de árbol B+ repetidamente. Para la evaluación del rendimiento, hemos analizado nuestro algoritmo en términos del número de accesos de disco <br></br>. Los resultados muestran que el número de accesos al disco <br>, excluidos los del proceso de reubicación, es idéntico al número de páginas pertenecientes al árbol B/sup +/. Considerando que el proceso de reubicación es un paso inevitable de preprocesamiento para la construcción por lotes de B/sup +/-árboles, nuestro algoritmo requiere sólo un acceso de disco por página de B+-árbol, y por lo tanto resulta ser óptimo. También se presenta la tendencia al rendimiento en relación con diferentes valores de parámetros a través de la simulación. Por último, mostramos el efecto de mejora de rendimiento de nuestro algoritmo, en comparación con el uso de inserciones repetidas a través de experimentos ",
            "error": []
        },
        "relocation process": {
            "translated_key": [],
            "translated_annotated_text": "Sobre la construcción por lotes de B/sup +/-árboles: algoritmo y su evaluación de rendimiento La construcción eficiente de índices es muy importante para la carga masiva de una base de datos o la adición de un nuevo índice a una base de datos existente, ya que ambos deben manejar un enorme volumen de datos. En este trabajo, proponemos un algoritmo para la construcción por lotes del B/sup +/-tree, la estructura de índices más utilizada en los sistemas de bases de datos. La principal característica de nuestro algoritmo es procesar simultáneamente todos los valores clave que se colocarán en cada página de árbol B+ al acceder a la página. Esto evita la sobrecarga debido al acceso a la misma página varias veces, que resulta de la aplicación del algoritmo de inserción de árbol B+ repetidamente. Para la evaluación de rendimiento, hemos analizado nuestro algoritmo en términos del número de accesos de disco. Los resultados muestran que el número de accesos de disco excluidos los del proceso de reubicación <br> es idéntico al número de páginas pertenecientes al árbol B/sup +/. Teniendo en cuenta que el proceso de reubicación <br> es un paso inevitable de preprocesamiento para la construcción por lotes de B/sup +/-árboles, nuestro algoritmo requiere sólo un acceso de disco por página de B+-árbol, y por lo tanto resulta ser óptimo. También se presenta la tendencia al rendimiento en relación con diferentes valores de parámetros a través de la simulación. Por último, mostramos el efecto de mejora de rendimiento de nuestro algoritmo, en comparación con el uso de inserciones repetidas a través de experimentos ",
            "error": []
        },
        "simulation": {
            "translated_key": "simulación",
            "translated_annotated_text": "Sobre la construcción por lotes de B/sup +/-árboles: algoritmo y su evaluación de rendimiento La construcción eficiente de índices es muy importante para la carga masiva de una base de datos o la adición de un nuevo índice a una base de datos existente, ya que ambos deben manejar un enorme volumen de datos. En este trabajo, proponemos un algoritmo para la construcción por lotes del B/sup +/-tree, la estructura de índices más utilizada en los sistemas de bases de datos. La principal característica de nuestro algoritmo es procesar simultáneamente todos los valores clave que se colocarán en cada página de árbol B+ al acceder a la página. Esto evita la sobrecarga debido al acceso a la misma página varias veces, que resulta de la aplicación del algoritmo de inserción de árbol B+ repetidamente. Para la evaluación de rendimiento, hemos analizado nuestro algoritmo en términos del número de accesos de disco. Los resultados muestran que el número de accesos de disco excluidos aquellos en el proceso de reubicación es idéntico al número de páginas pertenecientes al B/sup +/-tree. Considerando que el proceso de reubicación es un paso inevitable de preprocesamiento para la construcción por lotes de B/sup +/-árboles, nuestro algoritmo requiere sólo un acceso de disco por página de B+-árbol, y por lo tanto resulta ser óptimo. También se presenta la tendencia al rendimiento en relación con diferentes valores de parámetros vía <br>simulación</br>. Por último, mostramos el efecto de mejora de rendimiento de nuestro algoritmo, en comparación con el uso de inserciones repetidas a través de experimentos ",
            "error": [
                ""
            ]
        },
        "database indexing": {
            "translated_key": [],
            "translated_annotated_text": "Sobre la construcción por lotes de B/sup +/-árboles: algoritmo y su evaluación de rendimiento La construcción eficiente de índices es muy importante para la carga masiva de una base de datos o la adición de un nuevo índice a una base de datos existente, ya que ambos deben manejar un enorme volumen de datos. En este trabajo, proponemos un algoritmo para la construcción por lotes del B/sup +/-tree, la estructura de índices más utilizada en los sistemas de bases de datos. La principal característica de nuestro algoritmo es procesar simultáneamente todos los valores clave que se colocarán en cada página de árbol B+ al acceder a la página. Esto evita la sobrecarga debido al acceso a la misma página varias veces, que resulta de la aplicación del algoritmo de inserción de árbol B+ repetidamente. Para la evaluación de rendimiento, hemos analizado nuestro algoritmo en términos del número de accesos de disco. Los resultados muestran que el número de accesos de disco excluidos aquellos en el proceso de reubicación es idéntico al número de páginas pertenecientes al B/sup +/-tree. Considerando que el proceso de reubicación es un paso inevitable de preprocesamiento para la construcción por lotes de B/sup +/-árboles, nuestro algoritmo requiere sólo un acceso de disco por página de B+-árbol, y por lo tanto resulta ser óptimo. También se presenta la tendencia al rendimiento en relación con diferentes valores de parámetros a través de la simulación. Por último, mostramos el efecto de mejora de rendimiento de nuestro algoritmo, en comparación con el uso de inserciones repetidas a través de experimentos ",
            "error": []
        },
        "tree data structures": {
            "translated_key": [],
            "translated_annotated_text": "Sobre la construcción por lotes de B/sup +/-árboles: algoritmo y su evaluación de rendimiento La construcción eficiente de índices es muy importante para la carga masiva de una base de datos o la adición de un nuevo índice a una base de datos existente, ya que ambos deben manejar un enorme volumen de datos. En este trabajo, proponemos un algoritmo para la construcción por lotes del B/sup +/-tree, la estructura de índices más utilizada en los sistemas de bases de datos. La principal característica de nuestro algoritmo es procesar simultáneamente todos los valores clave que se colocarán en cada página de árbol B+ al acceder a la página. Esto evita la sobrecarga debido al acceso a la misma página varias veces, que resulta de la aplicación del algoritmo de inserción de árbol B+ repetidamente. Para la evaluación de rendimiento, hemos analizado nuestro algoritmo en términos del número de accesos de disco. Los resultados muestran que el número de accesos de disco excluidos aquellos en el proceso de reubicación es idéntico al número de páginas pertenecientes al B/sup +/-tree. Considerando que el proceso de reubicación es un paso inevitable de preprocesamiento para la construcción por lotes de B/sup +/-árboles, nuestro algoritmo requiere sólo un acceso de disco por página de B+-árbol, y por lo tanto resulta ser óptimo. También se presenta la tendencia al rendimiento en relación con diferentes valores de parámetros a través de la simulación. Por último, mostramos el efecto de mejora de rendimiento de nuestro algoritmo, en comparación con el uso de inserciones repetidas a través de experimentos ",
            "error": []
        }
    }
}