{
    "original_text": "Verifying concurrent systems with symbolic execution Current techniques for interactively proving temporal properties of concurrent systems translate transition systems into temporal formulas by introducing program counter variables. Proofs are not intuitive, because control flow is not explicitly considered. For sequential programs symbolic execution is a very intuitive, interactive proof strategy. In this paper we adopt this technique for parallel programs. Properties are formulated in interval temporal logic. An implementation in the interactive theorem prover KIV has shown that this technique offers a high degree of automation and allows simple, local invariants",
    "original_translation": "Verificar sistemas concurrentes con ejecución simbólica Técnicas actuales para probar interactivamente las propiedades temporales de los sistemas concurrentes traducen los sistemas de transición en fórmulas temporales mediante la introducción de variables contadoras de programas. Las pruebas no son intuitivas, porque el flujo de control no se considera explícitamente. Para programas secuenciales la ejecución simbólica es una estrategia de prueba muy intuitiva e interactiva. En este artículo adoptamos esta técnica para programas paralelos. Las propiedades se formulan en la lógica temporal de intervalo. Una implementación en el teorema interactivo KIV ha demostrado que esta técnica ofrece un alto grado de automatización y permite invariantes locales simples",
    "error_count": 4,
    "keys": {
        "concurrent systems verification": {
            "translated_key": [],
            "translated_annotated_text": "Verificar sistemas concurrentes con ejecución simbólica Técnicas actuales para probar interactivamente las propiedades temporales de los sistemas concurrentes traducen los sistemas de transición en fórmulas temporales mediante la introducción de variables contadoras de programas. Las pruebas no son intuitivas, porque el flujo de control no se considera explícitamente. Para programas secuenciales la ejecución simbólica es una estrategia de prueba muy intuitiva e interactiva. En este artículo adoptamos esta técnica para programas paralelos. Las propiedades se formulan en la lógica temporal de intervalo. Una implementación en el teorema interactivo KIV ha demostrado que esta técnica ofrece un alto grado de automatización y permite invariantes locales simples ",
            "error": []
        },
        "symbolic execution": {
            "translated_key": "ejecución simbólica",
            "translated_annotated_text": "Verificar sistemas concurrentes con \"ejecución simbólica\" Técnicas actuales para probar interactivamente las propiedades temporales de los sistemas concurrentes traducen los sistemas de transición en fórmulas temporales mediante la introducción de variables de contador de programas. Las pruebas no son intuitivas, porque el flujo de control no se considera explícitamente. Para programas secuenciales \"ejecución simbólica\" es una estrategia de prueba muy intuitiva e interactiva. En este artículo adoptamos esta técnica para programas paralelos. Las propiedades se formulan en la lógica temporal de intervalo. Una implementación en el teorema interactivo KIV ha demostrado que esta técnica ofrece un alto grado de automatización y permite invariantes locales simples ",
            "error": [
                ""
            ]
        },
        "temporal properties": {
            "translated_key": "propiedades temporales",
            "translated_annotated_text": "Verificar sistemas concurrentes con ejecución simbólica Técnicas actuales para probar interactivamente \"propiedades temporales\" de sistemas concurrentes traducen los sistemas de transición en fórmulas temporales mediante la introducción de variables contadoras de programas. Las pruebas no son intuitivas, porque el flujo de control no se considera explícitamente. Para programas secuenciales la ejecución simbólica es una estrategia de prueba muy intuitiva e interactiva. En este artículo adoptamos esta técnica para programas paralelos. Las propiedades se formulan en la lógica temporal de intervalo. Una implementación en el teorema interactivo KIV ha demostrado que esta técnica ofrece un alto grado de automatización y permite invariantes locales simples ",
            "error": [
                ""
            ]
        },
        "concurrent systems": {
            "translated_key": "sistemas concurrentes",
            "translated_annotated_text": "Verificar \"sistemas concurrentes\" con ejecución simbólica Técnicas actuales para probar interactivamente las propiedades temporales de los \"sistemas concurrentes\" traducen los sistemas de transición en fórmulas temporales mediante la introducción de variables contadoras de programas. Las pruebas no son intuitivas, porque el flujo de control no se considera explícitamente. Para programas secuenciales la ejecución simbólica es una estrategia de prueba muy intuitiva e interactiva. En este artículo adoptamos esta técnica para programas paralelos. Las propiedades se formulan en la lógica temporal de intervalo. Una implementación en el teorema interactivo KIV ha demostrado que esta técnica ofrece un alto grado de automatización y permite invariantes locales simples ",
            "error": [
                ""
            ]
        },
        "transition systems": {
            "translated_key": "sistemas de transición",
            "translated_annotated_text": "Verificar sistemas concurrentes con ejecución simbólica Técnicas actuales para probar interactivamente las propiedades temporales de los sistemas concurrentes traducen \"sistemas de transición\" en fórmulas temporales mediante la introducción de variables de contador de programa. Las pruebas no son intuitivas, porque el flujo de control no se considera explícitamente. Para programas secuenciales la ejecución simbólica es una estrategia de prueba muy intuitiva e interactiva. En este artículo adoptamos esta técnica para programas paralelos. Las propiedades se formulan en la lógica temporal de intervalo. Una implementación en el teorema interactivo KIV ha demostrado que esta técnica ofrece un alto grado de automatización y permite invariantes locales simples ",
            "error": [
                ""
            ]
        },
        "temporal formulas": {
            "translated_key": "fórmulas temporales",
            "translated_annotated_text": "Verificar sistemas concurrentes con ejecución simbólica Técnicas actuales para probar interactivamente las propiedades temporales de los sistemas concurrentes traducen los sistemas de transición en \"fórmulas temporales\" mediante la introducción de variables contadoras de programas. Las pruebas no son intuitivas, porque el flujo de control no se considera explícitamente. Para programas secuenciales la ejecución simbólica es una estrategia de prueba muy intuitiva e interactiva. En este artículo adoptamos esta técnica para programas paralelos. Las propiedades se formulan en la lógica temporal de intervalo. Una implementación en el teorema interactivo KIV ha demostrado que esta técnica ofrece un alto grado de automatización y permite invariantes locales simples ",
            "error": [
                ""
            ]
        },
        "program counter variables": {
            "translated_key": "variables de contador de programas",
            "translated_annotated_text": "Verificar sistemas concurrentes con ejecución simbólica Técnicas actuales para probar interactivamente las propiedades temporales de los sistemas concurrentes traducen los sistemas de transición en fórmulas temporales mediante la introducción de \"variables de contador de programas\". Las pruebas no son intuitivas, porque el flujo de control no se considera explícitamente. Para programas secuenciales la ejecución simbólica es una estrategia de prueba muy intuitiva e interactiva. En este artículo adoptamos esta técnica para programas paralelos. Las propiedades se formulan en la lógica temporal de intervalo. Una implementación en el teorema interactivo KIV ha demostrado que esta técnica ofrece un alto grado de automatización y permite invariantes locales simples ",
            "error": [
                ""
            ]
        },
        "sequential programs": {
            "translated_key": "programas secuenciales",
            "translated_annotated_text": "Verificar sistemas concurrentes con ejecución simbólica Técnicas actuales para probar interactivamente las propiedades temporales de los sistemas concurrentes traducen los sistemas de transición en fórmulas temporales mediante la introducción de variables contadoras de programas. Las pruebas no son intuitivas, porque el flujo de control no se considera explícitamente. Para \"programas secuenciales\" la ejecución simbólica es una estrategia de prueba muy intuitiva e interactiva. En este artículo adoptamos esta técnica para programas paralelos. Las propiedades se formulan en la lógica temporal de intervalo. Una implementación en el teorema interactivo KIV ha demostrado que esta técnica ofrece un alto grado de automatización y permite invariantes locales simples ",
            "error": [
                ""
            ]
        },
        "parallel programs": {
            "translated_key": "programas paralelos",
            "translated_annotated_text": "Verificar sistemas concurrentes con ejecución simbólica Técnicas actuales para probar interactivamente las propiedades temporales de los sistemas concurrentes traducen los sistemas de transición en fórmulas temporales mediante la introducción de variables contadoras de programas. Las pruebas no son intuitivas, porque el flujo de control no se considera explícitamente. Para programas secuenciales la ejecución simbólica es una estrategia de prueba muy intuitiva e interactiva. En este artículo adoptamos esta técnica para \"programas paralelos\". Las propiedades se formulan en la lógica temporal de intervalo. Una implementación en el teorema interactivo KIV ha demostrado que esta técnica ofrece un alto grado de automatización y permite invariantes locales simples ",
            "error": [
                ""
            ]
        },
        "interactive theorem prover KIV": {
            "translated_key": "teorema interactivo KIV",
            "translated_annotated_text": "Verificar sistemas concurrentes con ejecución simbólica Técnicas actuales para probar interactivamente las propiedades temporales de los sistemas concurrentes traducen los sistemas de transición en fórmulas temporales mediante la introducción de variables contadoras de programas. Las pruebas no son intuitivas, porque el flujo de control no se considera explícitamente. Para programas secuenciales la ejecución simbólica es una estrategia de prueba muy intuitiva e interactiva. En este artículo adoptamos esta técnica para programas paralelos. Las propiedades se formulan en la lógica temporal de intervalo. Una implementación en el \"teorema interactivo KIV\" ha demostrado que esta técnica ofrece un alto grado de automatización y permite invariantes simples y locales ",
            "error": [
                ""
            ]
        },
        "local invariants": {
            "translated_key": "invariantes locales",
            "translated_annotated_text": "Verificar sistemas concurrentes con ejecución simbólica Técnicas actuales para probar interactivamente las propiedades temporales de los sistemas concurrentes traducen los sistemas de transición en fórmulas temporales mediante la introducción de variables contadoras de programas. Las pruebas no son intuitivas, porque el flujo de control no se considera explícitamente. Para programas secuenciales la ejecución simbólica es una estrategia de prueba muy intuitiva e interactiva. En este artículo adoptamos esta técnica para programas paralelos. Las propiedades se formulan en la lógica temporal de intervalo. Una implementación en el teorema interactivo KIV ha demostrado que esta técnica ofrece un alto grado de automatización y permite simples, \"invariantes locales\" ",
            "error": [
                ""
            ]
        },
        "parallel programming": {
            "translated_key": [],
            "translated_annotated_text": "Verificar sistemas concurrentes con ejecución simbólica Técnicas actuales para probar interactivamente las propiedades temporales de los sistemas concurrentes traducen los sistemas de transición en fórmulas temporales mediante la introducción de variables contadoras de programas. Las pruebas no son intuitivas, porque el flujo de control no se considera explícitamente. Para programas secuenciales la ejecución simbólica es una estrategia de prueba muy intuitiva e interactiva. En este artículo adoptamos esta técnica para programas paralelos. Las propiedades se formulan en la lógica temporal de intervalo. Una implementación en el teorema interactivo KIV ha demostrado que esta técnica ofrece un alto grado de automatización y permite invariantes locales simples ",
            "error": []
        },
        "program verification": {
            "translated_key": [],
            "translated_annotated_text": "Verificar sistemas concurrentes con ejecución simbólica Técnicas actuales para probar interactivamente las propiedades temporales de los sistemas concurrentes traducen los sistemas de transición en fórmulas temporales mediante la introducción de variables contadoras de programas. Las pruebas no son intuitivas, porque el flujo de control no se considera explícitamente. Para programas secuenciales la ejecución simbólica es una estrategia de prueba muy intuitiva e interactiva. En este artículo adoptamos esta técnica para programas paralelos. Las propiedades se formulan en la lógica temporal de intervalo. Una implementación en el teorema interactivo KIV ha demostrado que esta técnica ofrece un alto grado de automatización y permite invariantes locales simples ",
            "error": []
        },
        "temporal logic": {
            "translated_key": "logica temporal",
            "translated_annotated_text": "Verificar sistemas concurrentes con ejecución simbólica Técnicas actuales para probar interactivamente las propiedades temporales de los sistemas concurrentes traducen los sistemas de transición en fórmulas temporales mediante la introducción de variables contadoras de programas. Las pruebas no son intuitivas, porque el flujo de control no se considera explícitamente. Para programas secuenciales la ejecución simbólica es una estrategia de prueba muy intuitiva e interactiva. En este artículo adoptamos esta técnica para programas paralelos. Las propiedades se formulan en el intervalo \"logica temporal\". Una implementación en el teorema interactivo KIV ha demostrado que esta técnica ofrece un alto grado de automatización y permite invariantes locales simples ",
            "error": [
                ""
            ]
        },
        "theorem proving": {
            "translated_key": [],
            "translated_annotated_text": "Verificar sistemas concurrentes con ejecución simbólica Técnicas actuales para probar interactivamente las propiedades temporales de los sistemas concurrentes traducen los sistemas de transición en fórmulas temporales mediante la introducción de variables contadoras de programas. Las pruebas no son intuitivas, porque el flujo de control no se considera explícitamente. Para programas secuenciales la ejecución simbólica es una estrategia de prueba muy intuitiva e interactiva. En este artículo adoptamos esta técnica para programas paralelos. Las propiedades se formulan en la lógica temporal de intervalo. Una implementación en el teorema interactivo KIV ha demostrado que esta técnica ofrece un alto grado de automatización y permite invariantes locales simples ",
            "error": []
        }
    }
}