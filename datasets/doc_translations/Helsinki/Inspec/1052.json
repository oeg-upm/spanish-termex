{
    "original_text": "Developing a high-performance web server in Concurrent Haskell Server applications, and in particular network-based server applications, place a unique combination of demands on a programming language: lightweight concurrency, high I/O throughput, and fault tolerance are all important. This paper describes a prototype Web server written in Concurrent Haskell (with extensions), and presents two useful results: firstly, a conforming server could be written with minimal effort, leading to an implementation in less than 1500 lines of code, and secondly the naive implementation produced reasonable performance. Furthermore, making minor modifications to a few time-critical components improved performance to a level acceptable for anything but the most heavily loaded Web servers",
    "original_translation": "El desarrollo de un servidor web de alto rendimiento en las aplicaciones Concurrente Haskell Server, y en particular en las aplicaciones basadas en la red, coloca una combinación única de demandas en un lenguaje de programación: la concurrencia ligera, el alto rendimiento de E/S y la tolerancia a fallos son todos importantes. Este artículo describe un prototipo de servidor Web escrito en Concurrent Haskell (con extensiones), y presenta dos resultados útiles: en primer lugar, un servidor conforme podría ser escrito con un mínimo esfuerzo, lo que conduciría a una implementación en menos de 1500 líneas de código, y en segundo lugar, la implementación ingenua produjo un rendimiento razonable. Además, hacer pequeñas modificaciones a unos pocos componentes críticos del tiempo mejoró el rendimiento a un nivel aceptable para cualquier cosa excepto los servidores web más cargados",
    "error_count": 6,
    "keys": {
        "high-performance Web server": {
            "translated_key": [],
            "translated_annotated_text": "El desarrollo de un servidor web de alto rendimiento en las aplicaciones Concurrente Haskell Server, y en particular en las aplicaciones basadas en la red, coloca una combinación única de demandas en un lenguaje de programación: la concurrencia ligera, el alto rendimiento de E/S y la tolerancia a fallos son todos importantes. Este artículo describe un prototipo de servidor Web escrito en Concurrent Haskell (con extensiones), y presenta dos resultados útiles: en primer lugar, un servidor conforme podría ser escrito con un mínimo esfuerzo, lo que conduciría a una implementación en menos de 1500 líneas de código, y en segundo lugar, la implementación ingenua produjo un rendimiento razonable. Además, hacer pequeñas modificaciones a unos pocos componentes críticos del tiempo mejoró el rendimiento a un nivel aceptable para cualquier cosa excepto los servidores web más cargados ",
            "error": []
        },
        "Concurrent Haskell": {
            "translated_key": "Concurrente Haskell",
            "translated_annotated_text": "El desarrollo de un servidor web de alto rendimiento en las aplicaciones del servidor \"Concurrente Haskell\", y en particular en las aplicaciones basadas en la red, coloca una combinación única de demandas en un lenguaje de programación: la concurrencia ligera, el alto rendimiento de E/S y la tolerancia a fallos son todos importantes. Este artículo describe un prototipo de servidor Web escrito en \"Concurrente Haskell\" (con extensiones), y presenta dos resultados útiles: en primer lugar, un servidor conforme podría ser escrito con un mínimo esfuerzo, lo que conduciría a una implementación en menos de 1500 líneas de código, y en segundo lugar, la implementación ingenua produjo un rendimiento razonable. Además, hacer pequeñas modificaciones a unos pocos componentes críticos del tiempo mejoró el rendimiento a un nivel aceptable para cualquier cosa excepto los servidores web más cargados ",
            "error": [
                ""
            ]
        },
        "network-based server applications": {
            "translated_key": "aplicaciones de servidor basadas en la red",
            "translated_annotated_text": "El desarrollo de un servidor web de alto rendimiento en las aplicaciones de Concurrent Haskell Server, y en particular \"aplicaciones de servidor basadas en la red\", colocan una combinación única de demandas en un lenguaje de programación: la concurrencia ligera, el alto rendimiento de E/S y la tolerancia a fallos son todos importantes. Este artículo describe un prototipo de servidor Web escrito en Concurrent Haskell (con extensiones), y presenta dos resultados útiles: en primer lugar, un servidor conforme podría ser escrito con un mínimo esfuerzo, lo que conduciría a una implementación en menos de 1500 líneas de código, y en segundo lugar, la implementación ingenua produjo un rendimiento razonable. Además, hacer pequeñas modificaciones a unos pocos componentes críticos del tiempo mejoró el rendimiento a un nivel aceptable para cualquier cosa excepto los servidores web más cargados ",
            "error": [
                ""
            ]
        },
        "lightweight concurrency": {
            "translated_key": "condición ligera",
            "translated_annotated_text": "El desarrollo de un servidor web de alto rendimiento en las aplicaciones de Concurrent Haskell Server y, en particular, en las aplicaciones basadas en la red, coloca una combinación única de demandas en un lenguaje de programación: \"condición ligera\", alto rendimiento de E/S, y la tolerancia a fallos son todos importantes. Este artículo describe un prototipo de servidor Web escrito en Concurrent Haskell (con extensiones), y presenta dos resultados útiles: en primer lugar, un servidor conforme podría ser escrito con un mínimo esfuerzo, lo que conduciría a una implementación en menos de 1500 líneas de código, y en segundo lugar, la implementación ingenua produjo un rendimiento razonable. Además, hacer pequeñas modificaciones a unos pocos componentes críticos del tiempo mejoró el rendimiento a un nivel aceptable para cualquier cosa excepto los servidores web más cargados ",
            "error": [
                ""
            ]
        },
        "high I/O throughput": {
            "translated_key": "alto rendimiento de E/S",
            "translated_annotated_text": "El desarrollo de un servidor web de alto rendimiento en las aplicaciones de Concurrent Haskell Server y, en particular, en las aplicaciones basadas en la red, coloca una combinación única de demandas en un lenguaje de programación: condicional ligero, \"alto rendimiento de E/S\", y la tolerancia a fallos son todos importantes. Este artículo describe un prototipo de servidor Web escrito en Concurrent Haskell (con extensiones), y presenta dos resultados útiles: en primer lugar, un servidor conforme podría ser escrito con un mínimo esfuerzo, lo que conduciría a una implementación en menos de 1500 líneas de código, y en segundo lugar, la implementación ingenua produjo un rendimiento razonable. Además, hacer pequeñas modificaciones a unos pocos componentes críticos del tiempo mejoró el rendimiento a un nivel aceptable para cualquier cosa excepto los servidores web más cargados ",
            "error": [
                ""
            ]
        },
        "fault tolerance": {
            "translated_key": "tolerancia a fallos",
            "translated_annotated_text": "El desarrollo de un servidor web de alto rendimiento en las aplicaciones Concurrente Haskell Server, y en particular en las aplicaciones basadas en la red, colocan una combinación única de demandas en un lenguaje de programación: la concurrencia ligera, el alto rendimiento de E/S y la \"tolerancia a fallos\" son todos importantes. Este artículo describe un prototipo de servidor Web escrito en Concurrent Haskell (con extensiones), y presenta dos resultados útiles: en primer lugar, un servidor conforme podría ser escrito con un mínimo esfuerzo, lo que conduciría a una implementación en menos de 1500 líneas de código, y en segundo lugar, la implementación ingenua produjo un rendimiento razonable. Además, hacer pequeñas modificaciones a unos pocos componentes críticos del tiempo mejoró el rendimiento a un nivel aceptable para cualquier cosa excepto los servidores web más cargados ",
            "error": [
                ""
            ]
        },
        "conforming server": {
            "translated_key": "servidor conforme",
            "translated_annotated_text": "El desarrollo de un servidor web de alto rendimiento en las aplicaciones Concurrente Haskell Server, y en particular en las aplicaciones basadas en la red, coloca una combinación única de demandas en un lenguaje de programación: la concurrencia ligera, el alto rendimiento de E/S y la tolerancia a fallos son todos importantes. Este artículo describe un prototipo de servidor Web escrito en Concurrent Haskell (con extensiones), y presenta dos resultados útiles: en primer lugar, un \"servidor conforme\" podría escribirse con un mínimo esfuerzo, lo que conduciría a una implementación en menos de 1500 líneas de código, y en segundo lugar, la implementación ingenua produjo un rendimiento razonable. Además, hacer pequeñas modificaciones a unos pocos componentes críticos del tiempo mejoró el rendimiento a un nivel aceptable para cualquier cosa excepto los servidores web más cargados ",
            "error": [
                ""
            ]
        },
        "time-critical components": {
            "translated_key": "componentes críticos del tiempo",
            "translated_annotated_text": "El desarrollo de un servidor web de alto rendimiento en las aplicaciones Concurrente Haskell Server, y en particular en las aplicaciones basadas en la red, coloca una combinación única de demandas en un lenguaje de programación: la concurrencia ligera, el alto rendimiento de E/S y la tolerancia a fallos son todos importantes. Este artículo describe un prototipo de servidor Web escrito en Concurrent Haskell (con extensiones), y presenta dos resultados útiles: en primer lugar, un servidor conforme podría ser escrito con un mínimo esfuerzo, lo que conduciría a una implementación en menos de 1500 líneas de código, y en segundo lugar, la implementación ingenua produjo un rendimiento razonable. Además, hacer pequeñas modificaciones a unos pocos \"componentes críticos del tiempo\" mejoró el rendimiento a un nivel aceptable para cualquier cosa excepto los servidores web más cargados ",
            "error": [
                ""
            ]
        },
        "concurrency control": {
            "translated_key": [],
            "translated_annotated_text": "El desarrollo de un servidor web de alto rendimiento en las aplicaciones Concurrente Haskell Server, y en particular en las aplicaciones basadas en la red, coloca una combinación única de demandas en un lenguaje de programación: la concurrencia ligera, el alto rendimiento de E/S y la tolerancia a fallos son todos importantes. Este artículo describe un prototipo de servidor Web escrito en Concurrent Haskell (con extensiones), y presenta dos resultados útiles: en primer lugar, un servidor conforme podría ser escrito con un mínimo esfuerzo, lo que conduciría a una implementación en menos de 1500 líneas de código, y en segundo lugar, la implementación ingenua produjo un rendimiento razonable. Además, hacer pequeñas modificaciones a unos pocos componentes críticos del tiempo mejoró el rendimiento a un nivel aceptable para cualquier cosa excepto los servidores web más cargados ",
            "error": []
        },
        "fault tolerant computing": {
            "translated_key": [],
            "translated_annotated_text": "El desarrollo de un servidor web de alto rendimiento en las aplicaciones Concurrente Haskell Server, y en particular en las aplicaciones basadas en la red, coloca una combinación única de demandas en un lenguaje de programación: la concurrencia ligera, el alto rendimiento de E/S y la tolerancia a fallos son todos importantes. Este artículo describe un prototipo de servidor Web escrito en Concurrent Haskell (con extensiones), y presenta dos resultados útiles: en primer lugar, un servidor conforme podría ser escrito con un mínimo esfuerzo, lo que conduciría a una implementación en menos de 1500 líneas de código, y en segundo lugar, la implementación ingenua produjo un rendimiento razonable. Además, hacer pequeñas modificaciones a unos pocos componentes críticos del tiempo mejoró el rendimiento a un nivel aceptable para cualquier cosa excepto los servidores web más cargados ",
            "error": []
        },
        "file servers": {
            "translated_key": [],
            "translated_annotated_text": "El desarrollo de un servidor web de alto rendimiento en las aplicaciones Concurrente Haskell Server, y en particular en las aplicaciones basadas en la red, coloca una combinación única de demandas en un lenguaje de programación: la concurrencia ligera, el alto rendimiento de E/S y la tolerancia a fallos son todos importantes. Este artículo describe un prototipo de servidor Web escrito en Concurrent Haskell (con extensiones), y presenta dos resultados útiles: en primer lugar, un servidor conforme podría ser escrito con un mínimo esfuerzo, lo que conduciría a una implementación en menos de 1500 líneas de código, y en segundo lugar, la implementación ingenua produjo un rendimiento razonable. Además, hacer pequeñas modificaciones a unos pocos componentes críticos del tiempo mejoró el rendimiento a un nivel aceptable para cualquier cosa excepto los servidores web más cargados ",
            "error": []
        },
        "functional programming": {
            "translated_key": [],
            "translated_annotated_text": "El desarrollo de un servidor web de alto rendimiento en las aplicaciones Concurrente Haskell Server, y en particular en las aplicaciones basadas en la red, coloca una combinación única de demandas en un lenguaje de programación: la concurrencia ligera, el alto rendimiento de E/S y la tolerancia a fallos son todos importantes. Este artículo describe un prototipo de servidor Web escrito en Concurrent Haskell (con extensiones), y presenta dos resultados útiles: en primer lugar, un servidor conforme podría ser escrito con un mínimo esfuerzo, lo que conduciría a una implementación en menos de 1500 líneas de código, y en segundo lugar, la implementación ingenua produjo un rendimiento razonable. Además, hacer pequeñas modificaciones a unos pocos componentes críticos del tiempo mejoró el rendimiento a un nivel aceptable para cualquier cosa excepto los servidores web más cargados ",
            "error": []
        },
        "Internet": {
            "translated_key": [],
            "translated_annotated_text": "El desarrollo de un servidor web de alto rendimiento en las aplicaciones Concurrente Haskell Server, y en particular en las aplicaciones basadas en la red, coloca una combinación única de demandas en un lenguaje de programación: la concurrencia ligera, el alto rendimiento de E/S y la tolerancia a fallos son todos importantes. Este artículo describe un prototipo de servidor Web escrito en Concurrent Haskell (con extensiones), y presenta dos resultados útiles: en primer lugar, un servidor conforme podría ser escrito con un mínimo esfuerzo, lo que conduciría a una implementación en menos de 1500 líneas de código, y en segundo lugar, la implementación ingenua produjo un rendimiento razonable. Además, hacer pequeñas modificaciones a unos pocos componentes críticos del tiempo mejoró el rendimiento a un nivel aceptable para cualquier cosa excepto los servidores web más cargados ",
            "error": []
        }
    }
}