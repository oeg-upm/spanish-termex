{
    "original_text": "Implementing equals for mixed-type comparison The idea of comparing objects of different types is not entirely off base, in particular for classes from the same class hierarchy. After all, objects from the same class hierarchy (and by class hierarchy we mean all classes derived from a common superclass other than Object) have something in common, namely at least the superclass part. As we demonstrated in a previous paper (2002), providing a correct implementation of a mixed-type comparison is a non-trivial task. In this article, we will show one way of implementing a mixed-type comparison of objects from the same class hierarchy that meets the requirements of the equals contract",
    "original_translation": "Implementación de iguales para comparación de tipo mixto La idea de comparar objetos de diferentes tipos no está totalmente descabellada, en particular para clases de la misma jerarquía de clases. Después de todo, los objetos de la misma jerarquía de clases (y por jerarquía de clases nos referimos a todas las clases derivadas de una superclase común distinta de Objeto) tienen algo en común, es decir, al menos la parte de la superclase. Como demostramos en un documento anterior (2002), proporcionar una correcta implementación de una comparación de tipo mixto es una tarea no trivial. En este artículo, mostraremos una forma de implementar una comparación de tipo mixto de objetos de la misma jerarquía de clase que cumple con los requisitos del contrato de iguales",
    "error_count": 4,
    "keys": {
        "Java": {
            "translated_key": [],
            "translated_annotated_text": "Implementación de iguales para comparación de tipo mixto La idea de comparar objetos de diferentes tipos no está totalmente descabellada, en particular para clases de la misma jerarquía de clases. Después de todo, los objetos de la misma jerarquía de clases (y por jerarquía de clases nos referimos a todas las clases derivadas de una superclase común distinta de Objeto) tienen algo en común, es decir, al menos la parte de la superclase. Como demostramos en un documento anterior (2002), proporcionar una correcta implementación de una comparación de tipo mixto es una tarea no trivial. En este artículo, mostraremos una forma de implementar una comparación de tipo mixto de objetos de la misma jerarquía de clase que cumple con los requisitos del contrato de iguales ",
            "error": []
        },
        "equals contract": {
            "translated_key": "contrato igual",
            "translated_annotated_text": "Implementación de iguales para comparación de tipo mixto La idea de comparar objetos de diferentes tipos no está totalmente descabellada, en particular para clases de la misma jerarquía de clases. Después de todo, los objetos de la misma jerarquía de clases (y por jerarquía de clases nos referimos a todas las clases derivadas de una superclase común distinta de Objeto) tienen algo en común, es decir, al menos la parte de la superclase. Como demostramos en un documento anterior (2002), proporcionar una correcta implementación de una comparación de tipo mixto es una tarea no trivial. En este artículo, vamos a mostrar una forma de implementar una comparación de tipo mixto de objetos de la misma jerarquía de clase que cumple con los requisitos del \"contrato igual\" ",
            "error": [
                ""
            ]
        },
        "transitivity requirement": {
            "translated_key": [],
            "translated_annotated_text": "Implementación de iguales para comparación de tipo mixto La idea de comparar objetos de diferentes tipos no está totalmente descabellada, en particular para clases de la misma jerarquía de clases. Después de todo, los objetos de la misma jerarquía de clases (y por jerarquía de clases nos referimos a todas las clases derivadas de una superclase común distinta de Objeto) tienen algo en común, es decir, al menos la parte de la superclase. Como demostramos en un documento anterior (2002), proporcionar una correcta implementación de una comparación de tipo mixto es una tarea no trivial. En este artículo, mostraremos una forma de implementar una comparación de tipo mixto de objetos de la misma jerarquía de clase que cumple con los requisitos del contrato de iguales ",
            "error": []
        },
        "mixed-type comparison": {
            "translated_key": "comparación de tipo mixto",
            "translated_annotated_text": "Implementar es igual a \"comparación de tipo mixto\" La idea de comparar objetos de diferentes tipos no está totalmente descabellada, en particular para clases de la misma jerarquía de clases. Después de todo, los objetos de la misma jerarquía de clases (y por jerarquía de clases nos referimos a todas las clases derivadas de una superclase común distinta de Objeto) tienen algo en común, es decir, al menos la parte de la superclase. Como demostramos en un documento anterior (2002), proporcionar una implementación correcta de una \"comparación de tipo mixto\" es una tarea no trivial. En este artículo, mostraremos una forma de implementar una \"comparación de tipo mixto\" de objetos de la misma jerarquía de clase que cumple con los requisitos del contrato de iguales ",
            "error": [
                ""
            ]
        },
        "superclass": {
            "translated_key": "superclase",
            "translated_annotated_text": "Implementación de iguales para comparación de tipo mixto La idea de comparar objetos de diferentes tipos no está totalmente descabellada, en particular para clases de la misma jerarquía de clases. Después de todo, los objetos de la misma jerarquía de clases (y por jerarquía de clases nos referimos a todas las clases derivadas de una \"superclase\" común distinta de Objeto) tienen algo en común, es decir, al menos la parte de \"superclase\". Como demostramos en un documento anterior (2002), proporcionar una correcta implementación de una comparación de tipo mixto es una tarea no trivial. En este artículo, mostraremos una forma de implementar una comparación de tipo mixto de objetos de la misma jerarquía de clase que cumple con los requisitos del contrato de iguales ",
            "error": [
                ""
            ]
        },
        "object-oriented programming": {
            "translated_key": [],
            "translated_annotated_text": "Implementación de iguales para comparación de tipo mixto La idea de comparar objetos de diferentes tipos no está totalmente descabellada, en particular para clases de la misma jerarquía de clases. Después de todo, los objetos de la misma jerarquía de clases (y por jerarquía de clases nos referimos a todas las clases derivadas de una superclase común distinta de Objeto) tienen algo en común, es decir, al menos la parte de la superclase. Como demostramos en un documento anterior (2002), proporcionar una correcta implementación de una comparación de tipo mixto es una tarea no trivial. En este artículo, mostraremos una forma de implementar una comparación de tipo mixto de objetos de la misma jerarquía de clase que cumple con los requisitos del contrato de iguales ",
            "error": []
        }
    }
}