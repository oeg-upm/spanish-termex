{
    "original_text": "Fast and efficient algorithm for the multiplierless realisation of linear DSP transforms A fast algorithm having a pseudopolynomial run-time and memory requirement in the worst case is developed to generate multiplierless architectures at all wordlengths for constant multiplications in linear DSP transforms. It is also re-emphasised that indefinitely reducing operators for multiplierless architectures is not sufficient to reduce the final chip area. For a major reduction, techniques like resource folding must be used. Simple techniques for improving the results are also presented",
    "original_translation": "Algoritmo rápido y eficiente para la realización sin multiplicador de DSP lineal transforma Un algoritmo rápido que tiene un requisito de tiempo de ejecución pseudopolinomio y memoria en el peor de los casos se desarrolla para generar arquitecturas sin multiplicador en todas las longitudes de palabra para las multiplicaciones constantes en transformadas DSP lineales. También se subraya que reducir indefinidamente los operadores de arquitecturas sin multiplicadores no es suficiente para reducir el área de chip final. Para una reducción importante, se deben utilizar técnicas como el plegado de recursos. También se presentan técnicas sencillas para mejorar los resultados",
    "error_count": 3,
    "keys": {
        "multiplierless realisation": {
            "translated_key": "realización sin multiplicadores",
            "translated_annotated_text": "Algoritmo rápido y eficiente para la \"realización sin multiplicadores\" de DSP lineal transforma Un algoritmo rápido que tiene un requisito de tiempo de ejecución pseudopolinomio y memoria en el peor de los casos se desarrolla para generar arquitecturas sin multiplicadores en todas las longitudes de palabra para multiplicaciones constantes en transformadas DSP lineales. También se subraya que reducir indefinidamente los operadores de arquitecturas sin multiplicadores no es suficiente para reducir el área de chip final. Para una reducción importante, se deben utilizar técnicas como el plegado de recursos. También se presentan técnicas sencillas para mejorar los resultados ",
            "error": [
                ""
            ]
        },
        "linear DSP transforms": {
            "translated_key": "transforma DSP lineal",
            "translated_annotated_text": "Algoritmo rápido y eficiente para la realización sin multiplicadores de \"transforma DSP lineal\" Un algoritmo rápido que tiene un requisito de tiempo de ejecución pseudopolinomio y memoria en el peor de los casos se desarrolla para generar arquitecturas sin multiplicadores en todas las longitudes de palabra para multiplicaciones constantes en \"transforma DSP lineal\". También se subraya que reducir indefinidamente los operadores de arquitecturas sin multiplicadores no es suficiente para reducir el área de chip final. Para una reducción importante, se deben utilizar técnicas como el plegado de recursos. También se presentan técnicas sencillas para mejorar los resultados ",
            "error": [
                ""
            ]
        },
        "pseudopolynomial run-time": {
            "translated_key": "tiempo de ejecución seudopolinomio",
            "translated_annotated_text": "Algoritmo rápido y eficiente para la realización sin multiplicador de DSP lineal transforma Un algoritmo rápido que tiene un \"tiempo de ejecución seudopolinomio\" y el requisito de memoria en el peor de los casos se desarrolla para generar arquitecturas sin multiplicador en todas las longitudes de palabra para las multiplicaciones constantes en transformadas lineales DSP. También se subraya que reducir indefinidamente los operadores de arquitecturas sin multiplicadores no es suficiente para reducir el área de chip final. Para una reducción importante, se deben utilizar técnicas como el plegado de recursos. También se presentan técnicas sencillas para mejorar los resultados ",
            "error": [
                ""
            ]
        },
        "memory requirement": {
            "translated_key": "requisito de memoria",
            "translated_annotated_text": "Algoritmo rápido y eficiente para la realización sin multiplicador de DSP lineal transforma Un algoritmo rápido que tiene un tiempo de ejecución pseudopolinomio y \"requisito de memoria\" en el peor de los casos se desarrolla para generar arquitecturas sin multiplicador en todas las longitudes de palabra para las multiplicaciones constantes en transformadas DSP lineales. También se subraya que reducir indefinidamente los operadores de arquitecturas sin multiplicadores no es suficiente para reducir el área de chip final. Para una reducción importante, se deben utilizar técnicas como el plegado de recursos. También se presentan técnicas sencillas para mejorar los resultados ",
            "error": [
                ""
            ]
        },
        "wordlengths": {
            "translated_key": "longitudes de palabras",
            "translated_annotated_text": "Algoritmo rápido y eficiente para la realización sin multiplicadores de DSP lineal transforma Un algoritmo rápido que tiene un requisito de tiempo de ejecución pseudopolinomio y memoria en el peor de los casos se desarrolla para generar arquitecturas sin multiplicadores en todos los \"longitudes de palabras\" para multiplicaciones constantes en transformadas DSP lineales. También se subraya que reducir indefinidamente los operadores de arquitecturas sin multiplicadores no es suficiente para reducir el área de chip final. Para una reducción importante, se deben utilizar técnicas como el plegado de recursos. También se presentan técnicas sencillas para mejorar los resultados ",
            "error": [
                ""
            ]
        },
        "constant multiplications": {
            "translated_key": "multiplicaciones constantes",
            "translated_annotated_text": "Algoritmo rápido y eficiente para la realización sin multiplicador de DSP lineal transforma Un algoritmo rápido que tiene un requisito de tiempo de ejecución pseudopolinomio y memoria en el peor de los casos se desarrolla para generar arquitecturas sin multiplicador en todas las longitudes de palabra para \"multiplicaciones constantes\" en transformadas DSP lineales. También se subraya que reducir indefinidamente los operadores de arquitecturas sin multiplicadores no es suficiente para reducir el área de chip final. Para una reducción importante, se deben utilizar técnicas como el plegado de recursos. También se presentan técnicas sencillas para mejorar los resultados ",
            "error": [
                ""
            ]
        },
        "final chip area": {
            "translated_key": "área de chip final",
            "translated_annotated_text": "Algoritmo rápido y eficiente para la realización sin multiplicador de DSP lineal transforma Un algoritmo rápido que tiene un requisito de tiempo de ejecución pseudopolinomio y memoria en el peor de los casos se desarrolla para generar arquitecturas sin multiplicador en todas las longitudes de palabra para las multiplicaciones constantes en transformadas DSP lineales. También se subraya que reducir indefinidamente a los operadores de arquitecturas sin multiplicadores no es suficiente para reducir el \"área de chip final\". Para una reducción importante, se deben utilizar técnicas como el plegado de recursos. También se presentan técnicas sencillas para mejorar los resultados ",
            "error": [
                ""
            ]
        },
        "resource folding": {
            "translated_key": "doblamiento de recursos",
            "translated_annotated_text": "Algoritmo rápido y eficiente para la realización sin multiplicador de DSP lineal transforma Un algoritmo rápido que tiene un requisito de tiempo de ejecución pseudopolinomio y memoria en el peor de los casos se desarrolla para generar arquitecturas sin multiplicador en todas las longitudes de palabra para las multiplicaciones constantes en transformadas DSP lineales. También se subraya que reducir indefinidamente los operadores de arquitecturas sin multiplicadores no es suficiente para reducir el área de chip final. Para una reducción importante, se deben utilizar técnicas como el \"doblamiento de recursos\". También se presentan técnicas sencillas para mejorar los resultados ",
            "error": [
                ""
            ]
        },
        "digital signal processing chips": {
            "translated_key": [],
            "translated_annotated_text": "Algoritmo rápido y eficiente para la realización sin multiplicador de DSP lineal transforma Un algoritmo rápido que tiene un requisito de tiempo de ejecución pseudopolinomio y memoria en el peor de los casos se desarrolla para generar arquitecturas sin multiplicador en todas las longitudes de palabra para las multiplicaciones constantes en transformadas DSP lineales. También se subraya que reducir indefinidamente los operadores de arquitecturas sin multiplicadores no es suficiente para reducir el área de chip final. Para una reducción importante, se deben utilizar técnicas como el plegado de recursos. También se presentan técnicas sencillas para mejorar los resultados ",
            "error": []
        },
        "iterative methods": {
            "translated_key": [],
            "translated_annotated_text": "Algoritmo rápido y eficiente para la realización sin multiplicador de DSP lineal transforma Un algoritmo rápido que tiene un requisito de tiempo de ejecución pseudopolinomio y memoria en el peor de los casos se desarrolla para generar arquitecturas sin multiplicador en todas las longitudes de palabra para las multiplicaciones constantes en transformadas DSP lineales. También se subraya que reducir indefinidamente los operadores de arquitecturas sin multiplicadores no es suficiente para reducir el área de chip final. Para una reducción importante, se deben utilizar técnicas como el plegado de recursos. También se presentan técnicas sencillas para mejorar los resultados ",
            "error": []
        },
        "processor scheduling": {
            "translated_key": [],
            "translated_annotated_text": "Algoritmo rápido y eficiente para la realización sin multiplicador de DSP lineal transforma Un algoritmo rápido que tiene un requisito de tiempo de ejecución pseudopolinomio y memoria en el peor de los casos se desarrolla para generar arquitecturas sin multiplicador en todas las longitudes de palabra para las multiplicaciones constantes en transformadas DSP lineales. También se subraya que reducir indefinidamente los operadores de arquitecturas sin multiplicadores no es suficiente para reducir el área de chip final. Para una reducción importante, se deben utilizar técnicas como el plegado de recursos. También se presentan técnicas sencillas para mejorar los resultados ",
            "error": []
        }
    }
}