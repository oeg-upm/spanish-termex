{
    "original_text": "FC++: Functional tools for object-oriented tasks FC++ is a library for programming functionally in C++. Compared to other C++ functional programming libraries, FC++ is distinguished by its powerful type system which allows the manipulation of parametrically polymorphic functions (e.g., passing them as arguments to other functions and returning them as results). In this paper, we show how FC++ can be used in common object-oriented programming tasks. We demonstrate FC++ implementations of several common design patterns (Adapter, Builder, Command, and more). Compared to conventional C++ implementations of these patterns, our implementations are either simpler (in that fewer classes/dependencies are needed), more efficient, or more type-safe (thanks to parametric polymorphism and type inference)",
    "original_translation": "FC++: Herramientas funcionales para tareas orientadas a objetos FC++ es una biblioteca para la programación funcional en C++. Comparado con otras bibliotecas de programación funcional de C++, FC++ se distingue por su potente sistema de tipo que permite la manipulación de funciones paramétricamente polimórficas (por ejemplo, pasándolas como argumentos a otras funciones y devolviéndolas como resultados). En este artículo, mostramos cómo FC++ se puede utilizar en tareas de programación comunes orientadas a objetos. Demostramos implementaciones de FC++ de varios patrones de diseño comunes (Adapter, Builder, Command, y más). En comparación con las implementaciones C++ convencionales de estos patrones, nuestras implementaciones son más simples (en el sentido de que se necesitan menos clases/dependencias), más eficientes o más seguras de tipo (gracias al polimorfismo e inferencia de tipo paramétricos)",
    "error_count": 4,
    "keys": {
        "library": {
            "translated_key": "biblioteca",
            "translated_annotated_text": "FC++: Herramientas funcionales para tareas orientadas a objetos FC++ es una \"biblioteca\" para la programación funcional en C++. Comparado con otras bibliotecas de programación funcional de C++, FC++ se distingue por su potente sistema de tipo que permite la manipulación de funciones paramétricamente polimórficas (por ejemplo, pasándolas como argumentos a otras funciones y devolviéndolas como resultados). En este artículo, mostramos cómo FC++ se puede utilizar en tareas de programación comunes orientadas a objetos. Demostramos implementaciones de FC++ de varios patrones de diseño comunes (Adapter, Builder, Command, y más). En comparación con las implementaciones C++ convencionales de estos patrones, nuestras implementaciones son más simples (en el sentido de que se necesitan menos clases/dependencias), más eficientes o más seguras de tipo (gracias al polimorfismo e inferencia de tipo paramétricos) ",
            "error": [
                ""
            ]
        },
        "functional programming": {
            "translated_key": "programación funcional",
            "translated_annotated_text": "FC++: Herramientas funcionales para tareas orientadas a objetos FC++ es una biblioteca para la programación funcional en C++. Comparado con otras bibliotecas de \"programación funcional\" de C++, FC++ se distingue por su potente sistema de tipo que permite la manipulación de funciones paramétricamente polimórficas (por ejemplo, pasándolas como argumentos a otras funciones y devolviéndolas como resultados). En este artículo, mostramos cómo FC++ se puede utilizar en tareas de programación comunes orientadas a objetos. Demostramos implementaciones de FC++ de varios patrones de diseño comunes (Adapter, Builder, Command, y más). En comparación con las implementaciones C++ convencionales de estos patrones, nuestras implementaciones son más simples (en el sentido de que se necesitan menos clases/dependencias), más eficientes o más seguras de tipo (gracias al polimorfismo e inferencia de tipo paramétricos) ",
            "error": [
                ""
            ]
        },
        "FC++": {
            "translated_key": [],
            "translated_annotated_text": "FC++: Herramientas funcionales para tareas orientadas a objetos FC++ es una biblioteca para la programación funcional en C++. Comparado con otras bibliotecas de programación funcional de C++, FC++ se distingue por su potente sistema de tipo que permite la manipulación de funciones paramétricamente polimórficas (por ejemplo, pasándolas como argumentos a otras funciones y devolviéndolas como resultados). En este artículo, mostramos cómo FC++ se puede utilizar en tareas de programación comunes orientadas a objetos. Demostramos implementaciones de FC++ de varios patrones de diseño comunes (Adapter, Builder, Command, y más). En comparación con las implementaciones C++ convencionales de estos patrones, nuestras implementaciones son más simples (en el sentido de que se necesitan menos clases/dependencias), más eficientes o más seguras de tipo (gracias al polimorfismo e inferencia de tipo paramétricos) ",
            "error": []
        },
        "object-oriented programming": {
            "translated_key": "programación orientada a objetos",
            "translated_annotated_text": "FC++: Herramientas funcionales para tareas orientadas a objetos FC++ es una biblioteca para la programación funcional en C++. Comparado con otras bibliotecas de programación funcional de C++, FC++ se distingue por su potente sistema de tipo que permite la manipulación de funciones paramétricamente polimórficas (por ejemplo, pasándolas como argumentos a otras funciones y devolviéndolas como resultados). En este artículo, mostramos cómo FC++ se puede utilizar en tareas comunes de \"programación orientada a objetos\". Demostramos implementaciones de FC++ de varios patrones de diseño comunes (Adapter, Builder, Command, y más). En comparación con las implementaciones C++ convencionales de estos patrones, nuestras implementaciones son más simples (en el sentido de que se necesitan menos clases/dependencias), más eficientes o más seguras de tipo (gracias al polimorfismo e inferencia de tipo paramétricos) ",
            "error": [
                ""
            ]
        },
        "parametric polymorphism": {
            "translated_key": "polimorfismo paramétrico",
            "translated_annotated_text": "FC++: Herramientas funcionales para tareas orientadas a objetos FC++ es una biblioteca para la programación funcional en C++. Comparado con otras bibliotecas de programación funcional de C++, FC++ se distingue por su potente sistema de tipo que permite la manipulación de funciones paramétricamente polimórficas (por ejemplo, pasándolas como argumentos a otras funciones y devolviéndolas como resultados). En este artículo, mostramos cómo FC++ se puede utilizar en tareas de programación comunes orientadas a objetos. Demostramos implementaciones de FC++ de varios patrones de diseño comunes (Adapter, Builder, Command, y más). En comparación con las implementaciones C++ convencionales de estos patrones, nuestras implementaciones son más simples (en el sentido de que se necesitan menos clases/dependencias), más eficientes o más seguras de tipo (gracias al \"polimorfismo paramétrico\" e inferencia de tipo) ",
            "error": [
                ""
            ]
        },
        "C++": {
            "translated_key": [],
            "translated_annotated_text": "FC++: Herramientas funcionales para tareas orientadas a objetos FC++ es una biblioteca para la programación funcional en C++. Comparado con otras bibliotecas de programación funcional de C++, FC++ se distingue por su potente sistema de tipo que permite la manipulación de funciones paramétricamente polimórficas (por ejemplo, pasándolas como argumentos a otras funciones y devolviéndolas como resultados). En este artículo, mostramos cómo FC++ se puede utilizar en tareas de programación comunes orientadas a objetos. Demostramos implementaciones de FC++ de varios patrones de diseño comunes (Adapter, Builder, Command, y más). En comparación con las implementaciones C++ convencionales de estos patrones, nuestras implementaciones son más simples (en el sentido de que se necesitan menos clases/dependencias), más eficientes o más seguras de tipo (gracias al polimorfismo e inferencia de tipo paramétricos) ",
            "error": []
        },
        "C++ language": {
            "translated_key": [],
            "translated_annotated_text": "FC++: Herramientas funcionales para tareas orientadas a objetos FC++ es una biblioteca para la programación funcional en C++. Comparado con otras bibliotecas de programación funcional de C++, FC++ se distingue por su potente sistema de tipo que permite la manipulación de funciones paramétricamente polimórficas (por ejemplo, pasándolas como argumentos a otras funciones y devolviéndolas como resultados). En este artículo, mostramos cómo FC++ se puede utilizar en tareas de programación comunes orientadas a objetos. Demostramos implementaciones de FC++ de varios patrones de diseño comunes (Adapter, Builder, Command, y más). En comparación con las implementaciones C++ convencionales de estos patrones, nuestras implementaciones son más simples (en el sentido de que se necesitan menos clases/dependencias), más eficientes o más seguras de tipo (gracias al polimorfismo e inferencia de tipo paramétricos) ",
            "error": []
        },
        "software libraries": {
            "translated_key": [],
            "translated_annotated_text": "FC++: Herramientas funcionales para tareas orientadas a objetos FC++ es una biblioteca para la programación funcional en C++. Comparado con otras bibliotecas de programación funcional de C++, FC++ se distingue por su potente sistema de tipo que permite la manipulación de funciones paramétricamente polimórficas (por ejemplo, pasándolas como argumentos a otras funciones y devolviéndolas como resultados). En este artículo, mostramos cómo FC++ se puede utilizar en tareas de programación comunes orientadas a objetos. Demostramos implementaciones de FC++ de varios patrones de diseño comunes (Adapter, Builder, Command, y más). En comparación con las implementaciones C++ convencionales de estos patrones, nuestras implementaciones son más simples (en el sentido de que se necesitan menos clases/dependencias), más eficientes o más seguras de tipo (gracias al polimorfismo e inferencia de tipo paramétricos) ",
            "error": []
        }
    }
}