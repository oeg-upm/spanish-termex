{
    "original_text": "A typed representation for HTML and XML documents in Haskell We define a family of embedded domain specific languages for generating HTML and XML documents. Each language is implemented as a combinator library in Haskell. The generated HTML/XML documents are guaranteed to be well-formed. In addition, each library can guarantee that the generated documents are valid XML documents to a certain extent (for HTML only a weaker guarantee is possible). On top of the libraries, Haskell serves as a meta language to define parameterized documents, to map structured documents to HTML/XML, to define conditional content, or to define entire Web sites. The combinator libraries support element-transforming style, a programming style that allows programs to have a visual appearance similar to HTML/XML documents, without modifying the syntax of Haskell",
    "original_translation": "Una representación mecanografiada para documentos HTML y XML en Haskell Definimos una familia de lenguajes específicos de dominios incrustados para generar documentos HTML y XML. Cada idioma se implementa como una biblioteca de combinadores en Haskell. Los documentos HTML/XML generados están garantizados de estar bien formados. Además, cada biblioteca puede garantizar que los documentos generados son documentos XML válidos hasta cierto punto (para HTML sólo es posible una garantía más débil). Encima de las bibliotecas, Haskell sirve como un meta lenguaje para definir documentos parametrizados, para mapear documentos estructurados a HTML/XML, para definir contenido condicional, o para definir sitios Web enteros. Las bibliotecas combinator soportan el estilo de transformación de elementos, un estilo de programación que permite a los programas tener una apariencia visual similar a los documentos HTML/XML, sin modificar la sintaxis de Haskell",
    "error_count": 9,
    "keys": {
        "typed representation": {
            "translated_key": "typed",
            "translated_annotated_text": "Una representación <br>typed</br> para documentos HTML y XML en Haskell Definimos una familia de lenguajes específicos de dominios incrustados para generar documentos HTML y XML. Cada idioma se implementa como una biblioteca de combinadores en Haskell. Los documentos HTML/XML generados están garantizados de estar bien formados. Además, cada biblioteca puede garantizar que los documentos generados son documentos XML válidos hasta cierto punto (para HTML sólo es posible una garantía más débil). Encima de las bibliotecas, Haskell sirve como un meta lenguaje para definir documentos parametrizados, para mapear documentos estructurados a HTML/XML, para definir contenido condicional, o para definir sitios Web enteros. Las bibliotecas combinator soportan el estilo de transformación de elementos, un estilo de programación que permite a los programas tener una apariencia visual similar a los documentos HTML/XML, sin modificar la sintaxis de Haskell ",
            "error": [
                ""
            ]
        },
        "HTML documents": {
            "translated_key": [],
            "translated_annotated_text": "Una representación mecanografiada para documentos HTML y XML en Haskell Definimos una familia de lenguajes específicos de dominios incrustados para generar documentos HTML y XML. Cada idioma se implementa como una biblioteca de combinadores en Haskell. Los documentos HTML/XML generados están garantizados de estar bien formados. Además, cada biblioteca puede garantizar que los documentos generados son documentos XML válidos hasta cierto punto (para HTML sólo es posible una garantía más débil). Encima de las bibliotecas, Haskell sirve como un meta lenguaje para definir documentos parametrizados, para mapear documentos estructurados a HTML/XML, para definir contenido condicional, o para definir sitios Web enteros. Las bibliotecas combinator soportan el estilo de transformación de elementos, un estilo de programación que permite a los programas tener una apariencia visual similar a los documentos HTML/XML, sin modificar la sintaxis de Haskell ",
            "error": []
        },
        "combinator library": {
            "translated_key": "combinator",
            "translated_annotated_text": "Una representación mecanografiada para documentos HTML y XML en Haskell Definimos una familia de lenguajes específicos de dominios incrustados para generar documentos HTML y XML. Cada idioma se implementa como una biblioteca <br>combinator</br> en Haskell. Los documentos HTML/XML generados están garantizados de estar bien formados. Además, cada biblioteca puede garantizar que los documentos generados son documentos XML válidos hasta cierto punto (para HTML sólo es posible una garantía más débil). Encima de las bibliotecas, Haskell sirve como un meta lenguaje para definir documentos parametrizados, para mapear documentos estructurados a HTML/XML, para definir contenido condicional, o para definir sitios Web enteros. Las bibliotecas combinator soportan el estilo de transformación de elementos, un estilo de programación que permite a los programas tener una apariencia visual similar a los documentos HTML/XML, sin modificar la sintaxis de Haskell ",
            "error": [
                ""
            ]
        },
        "software libraries": {
            "translated_key": [],
            "translated_annotated_text": "Una representación mecanografiada para documentos HTML y XML en Haskell Definimos una familia de lenguajes específicos de dominios incrustados para generar documentos HTML y XML. Cada idioma se implementa como una biblioteca de combinadores en Haskell. Los documentos HTML/XML generados están garantizados de estar bien formados. Además, cada biblioteca puede garantizar que los documentos generados son documentos XML válidos hasta cierto punto (para HTML sólo es posible una garantía más débil). Encima de las bibliotecas, Haskell sirve como un meta lenguaje para definir documentos parametrizados, para mapear documentos estructurados a HTML/XML, para definir contenido condicional, o para definir sitios Web enteros. Las bibliotecas combinator soportan el estilo de transformación de elementos, un estilo de programación que permite a los programas tener una apariencia visual similar a los documentos HTML/XML, sin modificar la sintaxis de Haskell ",
            "error": []
        },
        "meta language": {
            "translated_key": "meta",
            "translated_annotated_text": "Una representación mecanografiada para documentos HTML y XML en Haskell Definimos una familia de lenguajes específicos de dominios incrustados para generar documentos HTML y XML. Cada idioma se implementa como una biblioteca de combinadores en Haskell. Los documentos HTML/XML generados están garantizados de estar bien formados. Además, cada biblioteca puede garantizar que los documentos generados son documentos XML válidos hasta cierto punto (para HTML sólo es posible una garantía más débil). Encima de las bibliotecas, Haskell sirve como un lenguaje <br>meta</br> para definir documentos parametrizados, mapear documentos estructurados a HTML/XML, definir contenido condicional o definir sitios Web completos. Las bibliotecas combinator soportan el estilo de transformación de elementos, un estilo de programación que permite a los programas tener una apariencia visual similar a los documentos HTML/XML, sin modificar la sintaxis de Haskell ",
            "error": [
                ""
            ]
        },
        "parameterized documents": {
            "translated_key": "documentos parametrizados",
            "translated_annotated_text": "Una representación mecanografiada para documentos HTML y XML en Haskell Definimos una familia de lenguajes específicos de dominios incrustados para generar documentos HTML y XML. Cada idioma se implementa como una biblioteca de combinadores en Haskell. Los documentos HTML/XML generados están garantizados de estar bien formados. Además, cada biblioteca puede garantizar que los documentos generados son documentos XML válidos hasta cierto punto (para HTML sólo es posible una garantía más débil). Encima de las bibliotecas, Haskell sirve como un meta lenguaje para definir <br>documentos parametrizados</br>, para mapear documentos estructurados a HTML/XML, para definir contenido condicional, o para definir sitios Web enteros.  Las bibliotecas combinator soportan el estilo de transformación de elementos, un estilo de programación que permite a los programas tener una apariencia visual similar a los documentos HTML/XML, sin modificar la sintaxis de Haskell ",
            "error": [
                ""
            ]
        },
        "conditional content": {
            "translated_key": "conditional content",
            "translated_annotated_text": "Una representación mecanografiada para documentos HTML y XML en Haskell Definimos una familia de lenguajes específicos de dominios incrustados para generar documentos HTML y XML. Cada idioma se implementa como una biblioteca de combinadores en Haskell. Los documentos HTML/XML generados están garantizados de estar bien formados. Además, cada biblioteca puede garantizar que los documentos generados son documentos XML válidos hasta cierto punto (para HTML sólo es posible una garantía más débil). Encima de las bibliotecas, Haskell sirve como un meta lenguaje para definir documentos parametrizados, para mapear documentos estructurados a HTML/XML, para definir <br>conditional content</br>, o para definir sitios Web enteros. Las bibliotecas combinator soportan el estilo de transformación de elementos, un estilo de programación que permite a los programas tener una apariencia visual similar a los documentos HTML/XML, sin modificar la sintaxis de Haskell ",
            "error": [
                ""
            ]
        },
        "Web sites": {
            "translated_key": " ",
            "translated_annotated_text": "Una representación mecanografiada para documentos HTML y XML en Haskell Definimos una familia de lenguajes específicos de dominios incrustados para generar documentos HTML y XML. Cada idioma se implementa como una biblioteca de combinadores en Haskell. Los documentos HTML/XML generados están garantizados de estar bien formados. Además, cada biblioteca puede garantizar que los documentos generados son documentos XML válidos hasta cierto punto (para HTML sólo es posible una garantía más débil). Encima de las bibliotecas, Haskell sirve como un meta lenguaje para definir documentos parametrizados, para mapear documentos estructurados a HTML/XML, para definir contenido condicional, o para definir sitios web completos <br> </br>. Las bibliotecas combinator soportan el estilo de transformación de elementos, un estilo de programación que permite a los programas tener una apariencia visual similar a los documentos HTML/XML, sin modificar la sintaxis de Haskell ",
            "error": [
                ""
            ]
        },
        "element-transforming style": {
            "translated_key": "element-transforming style",
            "translated_annotated_text": "Una representación mecanografiada para documentos HTML y XML en Haskell Definimos una familia de lenguajes específicos de dominios incrustados para generar documentos HTML y XML. Cada idioma se implementa como una biblioteca de combinadores en Haskell. Los documentos HTML/XML generados están garantizados de estar bien formados. Además, cada biblioteca puede garantizar que los documentos generados son documentos XML válidos hasta cierto punto (para HTML sólo es posible una garantía más débil). Encima de las bibliotecas, Haskell sirve como un meta lenguaje para definir documentos parametrizados, para mapear documentos estructurados a HTML/XML, para definir contenido condicional, o para definir sitios Web enteros. Las bibliotecas combinator soportan <br>element-transforming style</br>, un estilo de programación que permite a los programas tener una apariencia visual similar a los documentos HTML/XML, sin modificar la sintaxis de Haskell ",
            "error": [
                ""
            ]
        },
        "functional programming": {
            "translated_key": [],
            "translated_annotated_text": "Una representación mecanografiada para documentos HTML y XML en Haskell Definimos una familia de lenguajes específicos de dominios incrustados para generar documentos HTML y XML. Cada idioma se implementa como una biblioteca de combinadores en Haskell. Los documentos HTML/XML generados están garantizados de estar bien formados. Además, cada biblioteca puede garantizar que los documentos generados son documentos XML válidos hasta cierto punto (para HTML sólo es posible una garantía más débil). Encima de las bibliotecas, Haskell sirve como un meta lenguaje para definir documentos parametrizados, para mapear documentos estructurados a HTML/XML, para definir contenido condicional, o para definir sitios Web enteros. Las bibliotecas combinator soportan el estilo de transformación de elementos, un estilo de programación que permite a los programas tener una apariencia visual similar a los documentos HTML/XML, sin modificar la sintaxis de Haskell ",
            "error": []
        },
        "syntax": {
            "translated_key": "syntax",
            "translated_annotated_text": "Una representación mecanografiada para documentos HTML y XML en Haskell Definimos una familia de lenguajes específicos de dominios incrustados para generar documentos HTML y XML. Cada idioma se implementa como una biblioteca de combinadores en Haskell. Los documentos HTML/XML generados están garantizados de estar bien formados. Además, cada biblioteca puede garantizar que los documentos generados son documentos XML válidos hasta cierto punto (para HTML sólo es posible una garantía más débil). Encima de las bibliotecas, Haskell sirve como un meta lenguaje para definir documentos parametrizados, para mapear documentos estructurados a HTML/XML, para definir contenido condicional, o para definir sitios Web enteros. Las bibliotecas combinator soportan el estilo de transformación de elementos, un estilo de programación que permite a los programas tener una apariencia visual similar a los documentos HTML/XML, sin modificar el <br>syntax</br> de Haskell ",
            "error": [
                ""
            ]
        },
        "XML documents": {
            "translated_key": [
                "XML",
                "XML",
                "XML generados",
                "XML documents",
                "XML"
            ],
            "translated_annotated_text": "Una representación mecanografiada para documentos HTML y <br>XML</br> en Haskell Definimos una familia de lenguajes específicos de dominios incrustados para generar documentos HTML y <br>XML</br>. Cada idioma se implementa como una biblioteca de combinadores en Haskell. Los documentos HTML/<br>XML generados</br> están garantizados de estar bien formados. Además, cada biblioteca puede garantizar que los documentos generados son válidos <br>XML documents</br> en cierta medida (para HTML sólo es posible una garantía más débil). Encima de las bibliotecas, Haskell sirve como un meta lenguaje para definir documentos parametrizados, para mapear documentos estructurados a HTML/XML, para definir contenido condicional, o para definir sitios Web enteros. Las bibliotecas combinator soportan el estilo de transformación de elementos, un estilo de programación que permite a los programas tener una apariencia visual similar a los documentos HTML/<br>XML</br>, sin modificar la sintaxis de Haskell ",
            "error": [
                "XML",
                "XML",
                "XML generados",
                "XML documents",
                "XML"
            ]
        },
        "Haskell": {
            "translated_key": "Haskell",
            "translated_annotated_text": "Una representación mecanografiada para documentos HTML y XML en <br>Haskell</br> Definimos una familia de lenguajes específicos de dominios embebidos para generar documentos HTML y XML. Cada idioma se implementa como una biblioteca de combinadores en <br>Haskell</br>. Los documentos HTML/XML generados están garantizados de estar bien formados. Además, cada biblioteca puede garantizar que los documentos generados son documentos XML válidos hasta cierto punto (para HTML sólo es posible una garantía más débil). Encima de las bibliotecas, <br>Haskell</br> sirve como un metalenguaje para definir documentos parametrizados, mapear documentos estructurados a HTML/XML, definir contenido condicional o definir sitios Web completos. Las bibliotecas combinator soportan el estilo de transformación de elementos, un estilo de programación que permite a los programas tener una apariencia visual similar a los documentos HTML/XML, sin modificar la sintaxis de <br>Haskell</br> ",
            "error": [
                ""
            ]
        },
        "embedded domain specific languages": {
            "translated_key": "embedded",
            "translated_annotated_text": "Una representación mecanografiada para documentos HTML y XML en Haskell Definimos una familia de lenguajes específicos del dominio <br>embedded</br> para generar documentos HTML y XML. Cada idioma se implementa como una biblioteca de combinadores en Haskell. Los documentos HTML/XML generados están garantizados de estar bien formados. Además, cada biblioteca puede garantizar que los documentos generados son documentos XML válidos hasta cierto punto (para HTML sólo es posible una garantía más débil). Encima de las bibliotecas, Haskell sirve como un meta lenguaje para definir documentos parametrizados, para mapear documentos estructurados a HTML/XML, para definir contenido condicional, o para definir sitios Web enteros. Las bibliotecas combinator soportan el estilo de transformación de elementos, un estilo de programación que permite a los programas tener una apariencia visual similar a los documentos HTML/XML, sin modificar la sintaxis de Haskell ",
            "error": [
                ""
            ]
        },
        "functional languages": {
            "translated_key": [],
            "translated_annotated_text": "Una representación mecanografiada para documentos HTML y XML en Haskell Definimos una familia de lenguajes específicos de dominios incrustados para generar documentos HTML y XML. Cada idioma se implementa como una biblioteca de combinadores en Haskell. Los documentos HTML/XML generados están garantizados de estar bien formados. Además, cada biblioteca puede garantizar que los documentos generados son documentos XML válidos hasta cierto punto (para HTML sólo es posible una garantía más débil). Encima de las bibliotecas, Haskell sirve como un meta lenguaje para definir documentos parametrizados, para mapear documentos estructurados a HTML/XML, para definir contenido condicional, o para definir sitios Web enteros. Las bibliotecas combinator soportan el estilo de transformación de elementos, un estilo de programación que permite a los programas tener una apariencia visual similar a los documentos HTML/XML, sin modificar la sintaxis de Haskell ",
            "error": []
        },
        "hypermedia markup languages": {
            "translated_key": [],
            "translated_annotated_text": "Una representación mecanografiada para documentos HTML y XML en Haskell Definimos una familia de lenguajes específicos de dominios incrustados para generar documentos HTML y XML. Cada idioma se implementa como una biblioteca de combinadores en Haskell. Los documentos HTML/XML generados están garantizados de estar bien formados. Además, cada biblioteca puede garantizar que los documentos generados son documentos XML válidos hasta cierto punto (para HTML sólo es posible una garantía más débil). Encima de las bibliotecas, Haskell sirve como un meta lenguaje para definir documentos parametrizados, para mapear documentos estructurados a HTML/XML, para definir contenido condicional, o para definir sitios Web enteros. Las bibliotecas combinator soportan el estilo de transformación de elementos, un estilo de programación que permite a los programas tener una apariencia visual similar a los documentos HTML/XML, sin modificar la sintaxis de Haskell ",
            "error": []
        },
        "type theory": {
            "translated_key": [],
            "translated_annotated_text": "Una representación mecanografiada para documentos HTML y XML en Haskell Definimos una familia de lenguajes específicos de dominios incrustados para generar documentos HTML y XML. Cada idioma se implementa como una biblioteca de combinadores en Haskell. Los documentos HTML/XML generados están garantizados de estar bien formados. Además, cada biblioteca puede garantizar que los documentos generados son documentos XML válidos hasta cierto punto (para HTML sólo es posible una garantía más débil). Encima de las bibliotecas, Haskell sirve como un meta lenguaje para definir documentos parametrizados, para mapear documentos estructurados a HTML/XML, para definir contenido condicional, o para definir sitios Web enteros. Las bibliotecas combinator soportan el estilo de transformación de elementos, un estilo de programación que permite a los programas tener una apariencia visual similar a los documentos HTML/XML, sin modificar la sintaxis de Haskell ",
            "error": []
        }
    }
}