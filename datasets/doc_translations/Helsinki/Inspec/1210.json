{
    "original_text": "Adaptive optimizing compilers for the 21st century Historically, compilers have operated by applying a fixed set of optimizations in a predetermined order. We call such an ordered list of optimizations a compilation sequence. This paper describes a prototype system that uses biased random search to discover a program-specific compilation sequence that minimizes an explicit, external objective function. The result is a compiler framework that adapts its behavior to the application being compiled, to the pool of available transformations, to the objective function, and to the target machine. This paper describes experiments that attempt to characterize the space that the adaptive compiler must search. The preliminary results suggest that optimal solutions are rare and that local minima are frequent. If this holds true, biased random searches, such as a,genetic algorithm, should find good solutions more quickly than simpler strategies, such as hill climbing",
    "original_translation": "Compiladores de optimización adaptativa para el siglo XXI Históricamente, los compiladores han operado aplicando un conjunto fijo de optimizaciones en un orden predeterminado. Llamamos a tal lista ordenada de optimizaciones una secuencia de compilación. Este artículo describe un sistema prototipo que utiliza búsqueda aleatoria sesgada para descubrir una secuencia de compilación específica del programa que minimiza una función objetiva explícita y externa. El resultado es un framework compilador que adapta su comportamiento a la aplicación que se está compilando, al conjunto de transformaciones disponibles, a la función objetiva y a la máquina de destino. Este artículo describe experimentos que intentan caracterizar el espacio que el compilador adaptativo debe buscar. Los resultados preliminares sugieren que las soluciones óptimas son raras y que los mínimos locales son frecuentes. Si esto es cierto, búsquedas aleatorias sesgadas, como un algoritmo genético, deberían encontrar buenas soluciones más rápidamente que estrategias más simples, como escalar montañas",
    "error_count": 2,
    "keys": {
        "compilers": {
            "translated_key": "compiladores",
            "translated_annotated_text": "Optimización adaptativa \"compiladores\" para el siglo XXI Históricamente, los \"compiladores\" han operado aplicando un conjunto fijo de optimizaciones en un orden predeterminado. Llamamos a tal lista ordenada de optimizaciones una secuencia de compilación. Este artículo describe un sistema prototipo que utiliza búsqueda aleatoria sesgada para descubrir una secuencia de compilación específica del programa que minimiza una función objetiva explícita y externa. El resultado es un framework compilador que adapta su comportamiento a la aplicación que se está compilando, al conjunto de transformaciones disponibles, a la función objetiva y a la máquina de destino. Este artículo describe experimentos que intentan caracterizar el espacio que el compilador adaptativo debe buscar. Los resultados preliminares sugieren que las soluciones óptimas son raras y que los mínimos locales son frecuentes. Si esto es cierto, búsquedas aleatorias sesgadas, como un algoritmo genético, deberían encontrar buenas soluciones más rápidamente que estrategias más simples, como escalar montañas ",
            "error": [
                ""
            ]
        },
        "optimizations": {
            "translated_key": "optimizaciones",
            "translated_annotated_text": "Compiladores optimizadores adaptativos para el siglo XXI Históricamente, los compiladores han operado aplicando un conjunto fijo de \"optimizaciones\" en un orden predeterminado. Llamamos a tal lista ordenada de \"optimizaciones\" una secuencia de compilación. Este artículo describe un sistema prototipo que utiliza búsqueda aleatoria sesgada para descubrir una secuencia de compilación específica del programa que minimiza una función objetiva explícita y externa. El resultado es un framework compilador que adapta su comportamiento a la aplicación que se está compilando, al conjunto de transformaciones disponibles, a la función objetiva y a la máquina de destino. Este artículo describe experimentos que intentan caracterizar el espacio que el compilador adaptativo debe buscar. Los resultados preliminares sugieren que las soluciones óptimas son raras y que los mínimos locales son frecuentes. Si esto es cierto, búsquedas aleatorias sesgadas, como un algoritmo genético, deberían encontrar buenas soluciones más rápidamente que estrategias más simples, como escalar montañas ",
            "error": [
                ""
            ]
        },
        "compilation sequence": {
            "translated_key": "secuencia de compilación",
            "translated_annotated_text": "Compiladores de optimización adaptativa para el siglo XXI Históricamente, los compiladores han operado aplicando un conjunto fijo de optimizaciones en un orden predeterminado. Llamamos a tal lista ordenada de optimizaciones una \"secuencia de compilación\". Este artículo describe un sistema prototipo que utiliza búsqueda aleatoria sesgada para descubrir una \"secuencia de compilación\" específica del programa que minimiza una función objetiva explícita y externa. El resultado es un framework compilador que adapta su comportamiento a la aplicación que se está compilando, al conjunto de transformaciones disponibles, a la función objetiva y a la máquina de destino. Este artículo describe experimentos que intentan caracterizar el espacio que el compilador adaptativo debe buscar. Los resultados preliminares sugieren que las soluciones óptimas son raras y que los mínimos locales son frecuentes. Si esto es cierto, búsquedas aleatorias sesgadas, como un algoritmo genético, deberían encontrar buenas soluciones más rápidamente que estrategias más simples, como escalar montañas ",
            "error": [
                ""
            ]
        },
        "adaptive compiler": {
            "translated_key": "compilador adaptativo",
            "translated_annotated_text": "Compiladores de optimización adaptativa para el siglo XXI Históricamente, los compiladores han operado aplicando un conjunto fijo de optimizaciones en un orden predeterminado. Llamamos a tal lista ordenada de optimizaciones una secuencia de compilación. Este artículo describe un sistema prototipo que utiliza búsqueda aleatoria sesgada para descubrir una secuencia de compilación específica del programa que minimiza una función objetiva explícita y externa. El resultado es un framework compilador que adapta su comportamiento a la aplicación que se está compilando, al conjunto de transformaciones disponibles, a la función objetiva y a la máquina de destino. Este artículo describe experimentos que intentan caracterizar el espacio que el \"compilador adaptativo\" debe buscar. Los resultados preliminares sugieren que las soluciones óptimas son raras y que los mínimos locales son frecuentes. Si esto es cierto, búsquedas aleatorias sesgadas, como un algoritmo genético, deberían encontrar buenas soluciones más rápidamente que estrategias más simples, como escalar montañas ",
            "error": [
                ""
            ]
        },
        "optimizing compilers": {
            "translated_key": "optimizando compiladores",
            "translated_annotated_text": "Adaptativo \"optimizando compiladores\" para el siglo XXI Históricamente, los compiladores han operado aplicando un conjunto fijo de optimizaciones en un orden predeterminado. Llamamos a tal lista ordenada de optimizaciones una secuencia de compilación. Este artículo describe un sistema prototipo que utiliza búsqueda aleatoria sesgada para descubrir una secuencia de compilación específica del programa que minimiza una función objetiva explícita y externa. El resultado es un framework compilador que adapta su comportamiento a la aplicación que se está compilando, al conjunto de transformaciones disponibles, a la función objetiva y a la máquina de destino. Este artículo describe experimentos que intentan caracterizar el espacio que el compilador adaptativo debe buscar. Los resultados preliminares sugieren que las soluciones óptimas son raras y que los mínimos locales son frecuentes. Si esto es cierto, búsquedas aleatorias sesgadas, como un algoritmo genético, deberían encontrar buenas soluciones más rápidamente que estrategias más simples, como escalar montañas ",
            "error": [
                ""
            ]
        },
        "biased random search": {
            "translated_key": "búsqueda aleatoria sesgada",
            "translated_annotated_text": "Compiladores de optimización adaptativa para el siglo XXI Históricamente, los compiladores han operado aplicando un conjunto fijo de optimizaciones en un orden predeterminado. Llamamos a tal lista ordenada de optimizaciones una secuencia de compilación. Este artículo describe un prototipo de sistema que utiliza \"búsqueda aleatoria sesgada\" para descubrir una secuencia de compilación específica del programa que minimiza una función objetiva explícita y externa. El resultado es un framework compilador que adapta su comportamiento a la aplicación que se está compilando, al conjunto de transformaciones disponibles, a la función objetiva y a la máquina de destino. Este artículo describe experimentos que intentan caracterizar el espacio que el compilador adaptativo debe buscar. Los resultados preliminares sugieren que las soluciones óptimas son raras y que los mínimos locales son frecuentes. Si esto es cierto, búsquedas aleatorias sesgadas, como un algoritmo genético, deberían encontrar buenas soluciones más rápidamente que estrategias más simples, como escalar montañas ",
            "error": [
                ""
            ]
        },
        "configurable compilers": {
            "translated_key": [],
            "translated_annotated_text": "Compiladores de optimización adaptativa para el siglo XXI Históricamente, los compiladores han operado aplicando un conjunto fijo de optimizaciones en un orden predeterminado. Llamamos a tal lista ordenada de optimizaciones una secuencia de compilación. Este artículo describe un sistema prototipo que utiliza búsqueda aleatoria sesgada para descubrir una secuencia de compilación específica del programa que minimiza una función objetiva explícita y externa. El resultado es un framework compilador que adapta su comportamiento a la aplicación que se está compilando, al conjunto de transformaciones disponibles, a la función objetiva y a la máquina de destino. Este artículo describe experimentos que intentan caracterizar el espacio que el compilador adaptativo debe buscar. Los resultados preliminares sugieren que las soluciones óptimas son raras y que los mínimos locales son frecuentes. Si esto es cierto, búsquedas aleatorias sesgadas, como un algoritmo genético, deberían encontrar buenas soluciones más rápidamente que estrategias más simples, como escalar montañas ",
            "error": []
        },
        "optimising compilers": {
            "translated_key": [],
            "translated_annotated_text": "Compiladores de optimización adaptativa para el siglo XXI Históricamente, los compiladores han operado aplicando un conjunto fijo de optimizaciones en un orden predeterminado. Llamamos a tal lista ordenada de optimizaciones una secuencia de compilación. Este artículo describe un sistema prototipo que utiliza búsqueda aleatoria sesgada para descubrir una secuencia de compilación específica del programa que minimiza una función objetiva explícita y externa. El resultado es un framework compilador que adapta su comportamiento a la aplicación que se está compilando, al conjunto de transformaciones disponibles, a la función objetiva y a la máquina de destino. Este artículo describe experimentos que intentan caracterizar el espacio que el compilador adaptativo debe buscar. Los resultados preliminares sugieren que las soluciones óptimas son raras y que los mínimos locales son frecuentes. Si esto es cierto, búsquedas aleatorias sesgadas, como un algoritmo genético, deberían encontrar buenas soluciones más rápidamente que estrategias más simples, como escalar montañas ",
            "error": []
        }
    }
}