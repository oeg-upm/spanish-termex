{
    "original_text": "The Tattletale technique Practical experience has taught many Java developers one thing: critical resources (mutexes, database connections, transactions, file handles, etc.) require timely and systematic release. Unfortunately, Javas garbage collector is not up to that job. According to the Java Language Specification, there are no guarantees when a garbage collector will run, when it will collect an object, or when it will finalize an object - if ever. Even more unfortunately, Javas counterpart to the C++ destructor (the finally block) is both tedious and error-prone, requiring developers to constantly remember and duplicate resource-releasing code. Consequently, even good Java developers can forget to release critical resources. There is a light at the end of the tunnel. Java may make it easier to leak critical resources, but it also provides the necessary mechanisms to easily track them down. The Tattletale technique is a simple method for designing new classes and retrofitting existing classes to quickly and easily detect the offending code responsible for leaking resources",
    "original_translation": "La técnica Tattletale La experiencia práctica ha enseñado a muchos desarrolladores de Java una cosa: recursos críticos (mutexes, conexiones de bases de datos, transacciones, manejadores de archivos, etc.) requieren una liberación oportuna y sistemática. Desafortunadamente, el recolector de basura Javas no está a la altura de ese trabajo. De acuerdo con la especificación de lenguaje Java, no hay garantías cuando un recolector de basura se ejecutará, cuando se recogerá un objeto, o cuando se terminará un objeto - si es que alguna vez. Aún más desafortunadamente, la contraparte de Javas al destructor C++ (el bloque final) es tediosa y propensa a errores, lo que requiere que los desarrolladores recuerden constantemente y dupliquen el código de liberación de recursos. En consecuencia, incluso los buenos desarrolladores de Java pueden olvidarse de liberar recursos críticos. Hay una luz al final del túnel. Java puede facilitar la filtración de recursos críticos, pero también proporciona los mecanismos necesarios para rastrearlos fácilmente. La técnica Tattletale es un método sencillo para diseñar nuevas clases y adaptar las clases existentes para detectar rápida y fácilmente el código ofensivo responsable de filtrar recursos",
    "error_count": 3,
    "keys": {
        "Java": {
            "translated_key": "Java",
            "translated_annotated_text": "La técnica Tattletale La experiencia práctica ha enseñado a muchos desarrolladores de \"Java\" una cosa: recursos críticos (mutexes, conexiones de bases de datos, transacciones, manejadores de archivos, etc.) requieren una liberación oportuna y sistemática. Desafortunadamente, el recolector de basura Javas no está a la altura de ese trabajo. De acuerdo con la especificación de lenguaje \"Java\", no hay garantías cuando un recolector de basura se ejecutará, cuando se recogerá un objeto, o cuando se terminará un objeto - si es que alguna vez. Aún más desafortunadamente, la contraparte de Javas al destructor C++ (el bloque final) es tediosa y propensa a errores, lo que requiere que los desarrolladores recuerden constantemente y dupliquen el código de liberación de recursos. En consecuencia, incluso los buenos desarrolladores de \"Java\" pueden olvidarse de liberar recursos críticos. Hay una luz al final del túnel. \"Java\" puede facilitar la filtración de recursos críticos, pero también proporciona los mecanismos necesarios para rastrearlos fácilmente. La técnica Tattletale es un método sencillo para diseñar nuevas clases y adaptar las clases existentes para detectar rápida y fácilmente el código ofensivo responsable de filtrar recursos ",
            "error": [
                ""
            ]
        },
        "critical resources": {
            "translated_key": "recursos críticos",
            "translated_annotated_text": "La técnica Tattletale La experiencia práctica ha enseñado a muchos desarrolladores de Java una cosa: \"recursos críticos\" (mutexes, conexiones de bases de datos, transacciones, manejadores de archivos, etc.) requieren una liberación oportuna y sistemática. Desafortunadamente, el recolector de basura Javas no está a la altura de ese trabajo. De acuerdo con la especificación de lenguaje Java, no hay garantías cuando un recolector de basura se ejecutará, cuando se recogerá un objeto, o cuando se terminará un objeto - si es que alguna vez. Aún más desafortunadamente, la contraparte de Javas al destructor C++ (el bloque final) es tediosa y propensa a errores, lo que requiere que los desarrolladores recuerden constantemente y dupliquen el código de liberación de recursos. En consecuencia, incluso los buenos desarrolladores de Java pueden olvidarse de lanzar \"recursos críticos\". Hay una luz al final del túnel. Java puede hacer que sea más fácil filtrar \"recursos críticos\", pero también proporciona los mecanismos necesarios para rastrearlos fácilmente. La técnica Tattletale es un método sencillo para diseñar nuevas clases y adaptar las clases existentes para detectar rápida y fácilmente el código ofensivo responsable de filtrar recursos ",
            "error": [
                ""
            ]
        },
        "mutexes": {
            "translated_key": "mutexes",
            "translated_annotated_text": "La técnica Tattletale La experiencia práctica ha enseñado a muchos desarrolladores de Java una cosa: recursos críticos (\"mutexes\", conexiones de bases de datos, transacciones, manejadores de archivos, etc.) requieren una liberación oportuna y sistemática. Desafortunadamente, el recolector de basura Javas no está a la altura de ese trabajo. De acuerdo con la especificación de lenguaje Java, no hay garantías cuando un recolector de basura se ejecutará, cuando se recogerá un objeto, o cuando se terminará un objeto - si es que alguna vez. Aún más desafortunadamente, la contraparte de Javas al destructor C++ (el bloque final) es tediosa y propensa a errores, lo que requiere que los desarrolladores recuerden constantemente y dupliquen el código de liberación de recursos. En consecuencia, incluso los buenos desarrolladores de Java pueden olvidarse de liberar recursos críticos. Hay una luz al final del túnel. Java puede facilitar la filtración de recursos críticos, pero también proporciona los mecanismos necesarios para rastrearlos fácilmente. La técnica Tattletale es un método sencillo para diseñar nuevas clases y adaptar las clases existentes para detectar rápida y fácilmente el código ofensivo responsable de filtrar recursos ",
            "error": [
                ""
            ]
        },
        "database connections": {
            "translated_key": "conexiones de base de datos",
            "translated_annotated_text": "La técnica Tattletale La experiencia práctica ha enseñado a muchos desarrolladores de Java una cosa: recursos críticos (mutexes, \"conexiones de base de datos\", transacciones, manejadores de archivos, etc.) requieren una liberación oportuna y sistemática. Desafortunadamente, el recolector de basura Javas no está a la altura de ese trabajo. De acuerdo con la especificación de lenguaje Java, no hay garantías cuando un recolector de basura se ejecutará, cuando se recogerá un objeto, o cuando se terminará un objeto - si es que alguna vez. Aún más desafortunadamente, la contraparte de Javas al destructor C++ (el bloque final) es tediosa y propensa a errores, lo que requiere que los desarrolladores recuerden constantemente y dupliquen el código de liberación de recursos. En consecuencia, incluso los buenos desarrolladores de Java pueden olvidarse de liberar recursos críticos. Hay una luz al final del túnel. Java puede facilitar la filtración de recursos críticos, pero también proporciona los mecanismos necesarios para rastrearlos fácilmente. La técnica Tattletale es un método sencillo para diseñar nuevas clases y adaptar las clases existentes para detectar rápida y fácilmente el código ofensivo responsable de filtrar recursos ",
            "error": [
                ""
            ]
        },
        "transactions": {
            "translated_key": "transacciones",
            "translated_annotated_text": "La técnica Tattletale La experiencia práctica ha enseñado a muchos desarrolladores de Java una cosa: recursos críticos (mutexes, conexiones de base de datos, \"transacciones\", maneja archivos, etc.) requieren una liberación oportuna y sistemática. Desafortunadamente, el recolector de basura Javas no está a la altura de ese trabajo. De acuerdo con la especificación de lenguaje Java, no hay garantías cuando un recolector de basura se ejecutará, cuando se recogerá un objeto, o cuando se terminará un objeto - si es que alguna vez. Aún más desafortunadamente, la contraparte de Javas al destructor C++ (el bloque final) es tediosa y propensa a errores, lo que requiere que los desarrolladores recuerden constantemente y dupliquen el código de liberación de recursos. En consecuencia, incluso los buenos desarrolladores de Java pueden olvidarse de liberar recursos críticos. Hay una luz al final del túnel. Java puede facilitar la filtración de recursos críticos, pero también proporciona los mecanismos necesarios para rastrearlos fácilmente. La técnica Tattletale es un método sencillo para diseñar nuevas clases y adaptar las clases existentes para detectar rápida y fácilmente el código ofensivo responsable de filtrar recursos ",
            "error": [
                ""
            ]
        },
        "file handles": {
            "translated_key": "manejas de archivos",
            "translated_annotated_text": "La técnica de Tattletale La experiencia práctica ha enseñado a muchos desarrolladores de Java una cosa: recursos críticos (mutexes, conexiones de bases de datos, transacciones, \"manejas de archivos\", etc.) requieren una liberación oportuna y sistemática. Desafortunadamente, el recolector de basura Javas no está a la altura de ese trabajo. De acuerdo con la especificación de lenguaje Java, no hay garantías cuando un recolector de basura se ejecutará, cuando se recogerá un objeto, o cuando se terminará un objeto - si es que alguna vez. Aún más desafortunadamente, la contraparte de Javas al destructor C++ (el bloque final) es tediosa y propensa a errores, lo que requiere que los desarrolladores recuerden constantemente y dupliquen el código de liberación de recursos. En consecuencia, incluso los buenos desarrolladores de Java pueden olvidarse de liberar recursos críticos. Hay una luz al final del túnel. Java puede facilitar la filtración de recursos críticos, pero también proporciona los mecanismos necesarios para rastrearlos fácilmente. La técnica Tattletale es un método sencillo para diseñar nuevas clases y adaptar las clases existentes para detectar rápida y fácilmente el código ofensivo responsable de filtrar recursos ",
            "error": [
                ""
            ]
        },
        "garbage collector": {
            "translated_key": "colector de basura",
            "translated_annotated_text": "La técnica Tattletale La experiencia práctica ha enseñado a muchos desarrolladores de Java una cosa: recursos críticos (mutexes, conexiones de bases de datos, transacciones, manejadores de archivos, etc.) requieren una liberación oportuna y sistemática. Desafortunadamente, Javas \"colector de basura\" no está a la altura de ese trabajo. De acuerdo con la Especificación de lenguaje Java, no hay garantías cuando un \"colector de basura\" se ejecutará, cuando se recogerá un objeto, o cuando se terminará un objeto - si alguna vez. Aún más desafortunadamente, la contraparte de Javas al destructor C++ (el bloque final) es tediosa y propensa a errores, lo que requiere que los desarrolladores recuerden constantemente y dupliquen el código de liberación de recursos. En consecuencia, incluso los buenos desarrolladores de Java pueden olvidarse de liberar recursos críticos. Hay una luz al final del túnel. Java puede facilitar la filtración de recursos críticos, pero también proporciona los mecanismos necesarios para rastrearlos fácilmente. La técnica Tattletale es un método sencillo para diseñar nuevas clases y adaptar las clases existentes para detectar rápida y fácilmente el código ofensivo responsable de filtrar recursos ",
            "error": [
                ""
            ]
        },
        "resource-releasing code": {
            "translated_key": "código de liberación de recursos",
            "translated_annotated_text": "La técnica Tattletale La experiencia práctica ha enseñado a muchos desarrolladores de Java una cosa: recursos críticos (mutexes, conexiones de bases de datos, transacciones, manejadores de archivos, etc.) requieren una liberación oportuna y sistemática. Desafortunadamente, el recolector de basura Javas no está a la altura de ese trabajo. De acuerdo con la especificación de lenguaje Java, no hay garantías cuando un recolector de basura se ejecutará, cuando se recogerá un objeto, o cuando se terminará un objeto - si es que alguna vez. Aún más desafortunadamente, la contraparte de Javas al destructor C++ (el bloque final) es tediosa y propensa a errores, lo que requiere que los desarrolladores recuerden constantemente y dupliquen \"código de liberación de recursos\". En consecuencia, incluso los buenos desarrolladores de Java pueden olvidarse de liberar recursos críticos. Hay una luz al final del túnel. Java puede facilitar la filtración de recursos críticos, pero también proporciona los mecanismos necesarios para rastrearlos fácilmente. La técnica Tattletale es un método sencillo para diseñar nuevas clases y adaptar las clases existentes para detectar rápida y fácilmente el código ofensivo responsable de filtrar recursos ",
            "error": [
                ""
            ]
        },
        "Tattletale technique": {
            "translated_key": "técnica Tattletale",
            "translated_annotated_text": "La \"técnica Tattletale\" La experiencia práctica ha enseñado a muchos desarrolladores de Java una cosa: recursos críticos (mutexes, conexiones de bases de datos, transacciones, manejadores de archivos, etc.) requieren una liberación oportuna y sistemática. Desafortunadamente, el recolector de basura Javas no está a la altura de ese trabajo. De acuerdo con la especificación de lenguaje Java, no hay garantías cuando un recolector de basura se ejecutará, cuando se recogerá un objeto, o cuando se terminará un objeto - si es que alguna vez. Aún más desafortunadamente, la contraparte de Javas al destructor C++ (el bloque final) es tediosa y propensa a errores, lo que requiere que los desarrolladores recuerden constantemente y dupliquen el código de liberación de recursos. En consecuencia, incluso los buenos desarrolladores de Java pueden olvidarse de liberar recursos críticos. Hay una luz al final del túnel. Java puede facilitar la filtración de recursos críticos, pero también proporciona los mecanismos necesarios para rastrearlos fácilmente. La \"técnica Tattletale\" es un método sencillo para diseñar nuevas clases y adaptar las clases existentes para detectar rápida y fácilmente el código ofensivo responsable de filtrar recursos ",
            "error": [
                ""
            ]
        },
        "resources leaking": {
            "translated_key": [],
            "translated_annotated_text": "La técnica Tattletale La experiencia práctica ha enseñado a muchos desarrolladores de Java una cosa: recursos críticos (mutexes, conexiones de bases de datos, transacciones, manejadores de archivos, etc.) requieren una liberación oportuna y sistemática. Desafortunadamente, el recolector de basura Javas no está a la altura de ese trabajo. De acuerdo con la especificación de lenguaje Java, no hay garantías cuando un recolector de basura se ejecutará, cuando se recogerá un objeto, o cuando se terminará un objeto - si es que alguna vez. Aún más desafortunadamente, la contraparte de Javas al destructor C++ (el bloque final) es tediosa y propensa a errores, lo que requiere que los desarrolladores recuerden constantemente y dupliquen el código de liberación de recursos. En consecuencia, incluso los buenos desarrolladores de Java pueden olvidarse de liberar recursos críticos. Hay una luz al final del túnel. Java puede facilitar la filtración de recursos críticos, pero también proporciona los mecanismos necesarios para rastrearlos fácilmente. La técnica Tattletale es un método sencillo para diseñar nuevas clases y adaptar las clases existentes para detectar rápida y fácilmente el código ofensivo responsable de filtrar recursos ",
            "error": []
        },
        "program diagnostics": {
            "translated_key": [],
            "translated_annotated_text": "La técnica Tattletale La experiencia práctica ha enseñado a muchos desarrolladores de Java una cosa: recursos críticos (mutexes, conexiones de bases de datos, transacciones, manejadores de archivos, etc.) requieren una liberación oportuna y sistemática. Desafortunadamente, el recolector de basura Javas no está a la altura de ese trabajo. De acuerdo con la especificación de lenguaje Java, no hay garantías cuando un recolector de basura se ejecutará, cuando se recogerá un objeto, o cuando se terminará un objeto - si es que alguna vez. Aún más desafortunadamente, la contraparte de Javas al destructor C++ (el bloque final) es tediosa y propensa a errores, lo que requiere que los desarrolladores recuerden constantemente y dupliquen el código de liberación de recursos. En consecuencia, incluso los buenos desarrolladores de Java pueden olvidarse de liberar recursos críticos. Hay una luz al final del túnel. Java puede facilitar la filtración de recursos críticos, pero también proporciona los mecanismos necesarios para rastrearlos fácilmente. La técnica Tattletale es un método sencillo para diseñar nuevas clases y adaptar las clases existentes para detectar rápida y fácilmente el código ofensivo responsable de filtrar recursos ",
            "error": []
        },
        "storage management": {
            "translated_key": [],
            "translated_annotated_text": "La técnica Tattletale La experiencia práctica ha enseñado a muchos desarrolladores de Java una cosa: recursos críticos (mutexes, conexiones de bases de datos, transacciones, manejadores de archivos, etc.) requieren una liberación oportuna y sistemática. Desafortunadamente, el recolector de basura Javas no está a la altura de ese trabajo. De acuerdo con la especificación de lenguaje Java, no hay garantías cuando un recolector de basura se ejecutará, cuando se recogerá un objeto, o cuando se terminará un objeto - si es que alguna vez. Aún más desafortunadamente, la contraparte de Javas al destructor C++ (el bloque final) es tediosa y propensa a errores, lo que requiere que los desarrolladores recuerden constantemente y dupliquen el código de liberación de recursos. En consecuencia, incluso los buenos desarrolladores de Java pueden olvidarse de liberar recursos críticos. Hay una luz al final del túnel. Java puede facilitar la filtración de recursos críticos, pero también proporciona los mecanismos necesarios para rastrearlos fácilmente. La técnica Tattletale es un método sencillo para diseñar nuevas clases y adaptar las clases existentes para detectar rápida y fácilmente el código ofensivo responsable de filtrar recursos ",
            "error": []
        }
    }
}