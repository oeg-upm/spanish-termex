{
    "id": "I-66",
    "original_text": "Letting loose a SPIDER on a network of POMDPs: Generating quality guaranteed policies Pradeep Varakantham, Janusz Marecki, Yuichi Yabu∗ , Milind Tambe, Makoto Yokoo∗ University of Southern California, Los Angeles, CA 90089, {varakant, marecki, tambe}@usc.edu ∗ Dept. of Intelligent Systems, Kyushu University, Fukuoka, 812-8581 Japan, yokoo@is.kyushu-u.ac.jp ABSTRACT Distributed Partially Observable Markov Decision Problems (Distributed POMDPs) are a popular approach for modeling multi-agent systems acting in uncertain domains. Given the significant complexity of solving distributed POMDPs, particularly as we scale up the numbers of agents, one popular approach has focused on approximate solutions. Though this approach is efficient, the algorithms within this approach do not provide any guarantees on solution quality. A second less popular approach focuses on global optimality, but typical results are available only for two agents, and also at considerable computational cost. This paper overcomes the limitations of both these approaches by providing SPIDER, a novel combination of three key features for policy generation in distributed POMDPs: (i) it exploits agent interaction structure given a network of agents (i.e. allowing easier scale-up to larger number of agents); (ii) it uses a combination of heuristics to speedup policy search; and (iii) it allows quality guaranteed approximations, allowing a systematic tradeoff of solution quality for time. Experimental results show orders of magnitude improvement in performance when compared with previous global optimal algorithms. Categories and Subject Descriptors I.2.11 [Artificial Intelligence]: Distributed Artificial IntelligenceMulti-agent Systems General Terms Algorithms, Theory 1. INTRODUCTION Distributed Partially Observable Markov Decision Problems (Distributed POMDPs) are emerging as a popular approach for modeling sequential decision making in teams operating under uncertainty [9, 4, 1, 2, 13]. The uncertainty arises on account of nondeterminism in the outcomes of actions and because the world state may only be partially (or incorrectly) observable. Unfortunately, as shown by Bernstein et al. [3], the problem of finding the optimal joint policy for general distributed POMDPs is NEXP-Complete. Researchers have attempted two different types of approaches towards solving these models. The first category consists of highly efficient approximate techniques, that may not reach globally optimal solutions [2, 9, 11]. The key problem with these techniques has been their inability to provide any guarantees on the quality of the solution. In contrast, the second less popular category of approaches has focused on a global optimal result [13, 5, 10]. Though these approaches obtain optimal solutions, they typically consider only two agents. Furthermore, they fail to exploit structure in the interactions of the agents and hence are severely hampered with respect to scalability when considering more than two agents. To address these problems with the existing approaches, we propose approximate techniques that provide guarantees on the quality of the solution while focussing on a network of more than two agents. We first propose the basic SPIDER (Search for Policies In Distributed EnviRonments) algorithm. There are two key novel features in SPIDER: (i) it is a branch and bound heuristic search technique that uses a MDP-based heuristic function to search for an optimal joint policy; (ii) it exploits network structure of agents by organizing agents into a Depth First Search (DFS) pseudo tree and takes advantage of the independence in the different branches of the DFS tree. We then provide three enhancements to improve the efficiency of the basic SPIDER algorithm while providing guarantees on the quality of the solution. The first enhancement uses abstractions for speedup, but does not sacrifice solution quality. In particular, it initially performs branch and bound search on abstract policies and then extends to complete policies. The second enhancement obtains speedups by sacrificing solution quality, but within an input parameter that provides the tolerable expected value difference from the optimal solution. The third enhancement is again based on bounding the search for efficiency, however with a tolerance parameter that is provided as a percentage of optimal. We experimented with the sensor network domain presented in Nair et al. [10], a domain representative of an important class of problems with networks of agents working in uncertain environments. In our experiments, we illustrate that SPIDER dominates an existing global optimal approach called GOA [10], the only known global optimal algorithm with demonstrated experimental results for more than two agents. Furthermore, we demonstrate that abstraction improves the performance of SPIDER significantly (while providing optimal solutions). We finally demonstrate a key feature of SPIDER: by utilizing the approximation enhancements it enables principled tradeoffs in run-time versus solution quality. 822 978-81-904262-7-5 (RPS) c 2007 IFAAMAS 2. DOMAIN: DISTRIBUTED SENSOR NETS Distributed sensor networks are a large, important class of domains that motivate our work. This paper focuses on a set of target tracking problems that arise in certain types of sensor networks [6] first introduced in [10]. Figure 1 shows a specific problem instance within this type consisting of three sensors. Here, each sensor node can scan in one of four directions: North, South, East or West (see Figure 1). To track a target and obtain associated reward, two sensors with overlapping scanning areas must coordinate by scanning the same area simultaneously. In Figure 1, to track a target in Loc11, sensor1 needs to scan East and sensor2 needs to scan West simultaneously. Thus, sensors have to act in a coordinated fashion. We assume that there are two independent targets and that each targets movement is uncertain and unaffected by the sensor agents. Based on the area it is scanning, each sensor receives observations that can have false positives and false negatives. The sensors observations and transitions are independent of each others actions e.g.the observations that sensor1 receives are independent of sensor2s actions. Each agent incurs a cost for scanning whether the target is present or not, but no cost if it turns off. Given the sensors observational uncertainty, the targets uncertain transitions and the distributed nature of the sensor nodes, these sensor nets provide a useful domains for applying distributed POMDP models. Figure 1: A 3-chain sensor configuration 3. BACKGROUND 3.1 Model: Network Distributed POMDP The ND-POMDP model was introduced in [10], motivated by domains such as the sensor networks introduced in Section 2. It is defined as the tuple S, A, P, Ω, O, R, b , where S = ×1≤i≤nSi × Su is the set of world states. Si refers to the set of local states of agent i and Su is the set of unaffectable states. Unaffectable state refers to that part of the world state that cannot be affected by the agents actions, e.g. environmental factors like target locations that no agent can control. A = ×1≤i≤nAi is the set of joint actions, where Ai is the set of action for agent i. ND-POMDP assumes transition independence, where the transition function is defined as P(s, a, s ) = Pu(su, su) · 1≤i≤n Pi(si, su, ai, si), where a = a1, . . . , an is the joint action performed in state s = s1, . . . , sn, su and s = s1, . . . , sn, su is the resulting state. Ω = ×1≤i≤nΩi is the set of joint observations where Ωi is the set of observations for agents i. Observational independence is assumed in ND-POMDPs i.e., the joint observation function is defined as O(s, a, ω) = 1≤i≤n Oi(si, su, ai, ωi), where s = s1, . . . , sn, su is the world state that results from the agents performing a = a1, . . . , an in the previous state, and ω = ω1, . . . , ωn ∈ Ω is the observation received in state s. This implies that each agents observation depends only on the unaffectable state, its local action and on its resulting local state. The reward function, R, is defined as R(s, a) = l Rl(sl1, . . . , slr, su, al1, . . . , alr ), where each l could refer to any sub-group of agents and r = |l|. Based on the reward function, an interaction hypergraph is constructed. A hyper-link, l, exists between a subset of agents for all Rl that comprise R. The interaction hypergraph is defined as G = (Ag, E), where the agents, Ag, are the vertices and E = {l|l ⊆ Ag ∧ Rl is a component of R} are the edges. The initial belief state (distribution over the initial state), b, is defined as b(s) = bu(su) · 1≤i≤n bi(si), where bu and bi refer to the distribution over initial unaffectable state and agent is initial belief state, respectively. The goal in ND-POMDP is to compute the joint policy π = π1, . . . , πn that maximizes teams expected reward over a finite horizon T starting from the belief state b. An ND-POMDP is similar to an n-ary Distributed Constraint Optimization Problem (DCOP)[8, 12] where the variable at each node represents the policy selected by an individual agent, πi with the domain of the variable being the set of all local policies, Πi. The reward component Rl where |l| = 1 can be thought of as a local constraint while the reward component Rl where l > 1 corresponds to a non-local constraint in the constraint graph. 3.2 Algorithm: Global Optimal Algorithm (GOA) In previous work, GOA has been defined as a global optimal algorithm for ND-POMDPs [10]. We will use GOA in our experimental comparisons, since GOA is a state-of-the-art global optimal algorithm, and in fact the only one with experimental results available for networks of more than two agents. GOA borrows from a global optimal DCOP algorithm called DPOP[12]. GOAs message passing follows that of DPOP. The first phase is the UTIL propagation, where the utility messages, in this case values of policies, are passed up from the leaves to the root. Value for a policy at an agent is defined as the sum of best response values from its children and the joint policy reward associated with the parent policy. Thus, given a policy for a parent node, GOA requires an agent to iterate through all its policies, finding the best response policy and returning the value to the parent - while at the parent node, to find the best policy, an agent requires its children to return their best responses to each of its policies. This UTIL propagation process is repeated at each level in the tree, until the root exhausts all its policies. In the second phase of VALUE propagation, where the optimal policies are passed down from the root till the leaves. GOA takes advantage of the local interactions in the interaction graph, by pruning out unnecessary joint policy evaluations (associated with nodes not connected directly in the tree). Since the interaction graph captures all the reward interactions among agents and as this algorithm iterates through all the relevant joint policy evaluations, this algorithm yields a globally optimal solution. 4. SPIDER As mentioned in Section 3.1, an ND-POMDP can be treated as a DCOP, where the goal is to compute a joint policy that maximizes the overall joint reward. The brute-force technique for computing an optimal policy would be to examine the expected values for all possible joint policies. The key idea in SPIDER is to avoid computation of expected values for the entire space of joint policies, by utilizing upper bounds on the expected values of policies and the interaction structure of the agents. Akin to some of the algorithms for DCOP [8, 12], SPIDER has a pre-processing step that constructs a DFS tree corresponding to the given interaction structure. Note that these DFS trees are pseudo trees [12] that allow links between ancestors and children. We employ the Maximum Constrained Node (MCN) heuristic used in the DCOP algorithm, ADOPT [8], however other heuristics (such as MLSP heuristic from [7]) can also be employed. MCN heuristic tries to place agents with more number of constraints at the top of the tree. This tree governs how the search for the optimal joint polThe Sixth Intl. Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 823 icy proceeds in SPIDER. The algorithms presented in this paper are easily extendable to hyper-trees, however for expository purposes, we assume binary trees. SPIDER is an algorithm for centralized planning and distributed execution in distributed POMDPs. In this paper, we employ the following notation to denote policies and expected values: Ancestors(i) ⇒ agents from i to the root (not including i). Tree(i) ⇒ agents in the sub-tree (not including i) for which i is the root. πroot+ ⇒ joint policy of all agents. πi+ ⇒ joint policy of all agents in Tree(i) ∪ i. πi− ⇒ joint policy of agents that are in Ancestors(i). πi ⇒ policy of the ith agent. ˆv[πi, πi− ] ⇒ upper bound on the expected value for πi+ given πi and policies of ancestor agents i.e. πi− . ˆvj[πi, πi− ] ⇒ upper bound on the expected value for πi+ from the jth child. v[πi, πi− ] ⇒ expected value for πi given policies of ancestor agents, πi− . v[πi+ , πi− ] ⇒ expected value for πi+ given policies of ancestor agents, πi− . vj[πi+ , πi− ] ⇒ expected value for πi+ from the jth child. Figure 2: Execution of SPIDER, an example 4.1 Outline of SPIDER SPIDER is based on the idea of branch and bound search, where the nodes in the search tree represent partial/complete joint policies. Figure 2 shows an example search tree for the SPIDER algorithm, using an example of the three agent chain. Before SPIDER begins its search we create a DFS tree (i.e. pseudo tree) from the three agent chain, with the middle agent as the root of this tree. SPIDER exploits the structure of this DFS tree while engaging in its search. Note that in our example figure, each agent is assigned a policy with T=2. Thus, each rounded rectange (search tree node) indicates a partial/complete joint policy, a rectangle indicates an agent and the ovals internal to an agent show its policy. Heuristic or actual expected value for a joint policy is indicated in the top right corner of the rounded rectangle. If the number is italicized and underlined, it implies that the actual expected value of the joint policy is provided. SPIDER begins with no policy assigned to any of the agents (shown in the level 1 of the search tree). Level 2 of the search tree indicates that the joint policies are sorted based on upper bounds computed for root agents policies. Level 3 shows one SPIDER search node with a complete joint policy (a policy assigned to each of the agents). The expected value for this joint policy is used to prune out the nodes in level 2 (the ones with upper bounds < 234) When creating policies for each non-leaf agent i, SPIDER potentially performs two steps: 1. Obtaining upper bounds and sorting: In this step, agent i computes upper bounds on the expected values, ˆv[πi, πi− ] of the joint policies πi+ corresponding to each of its policy πi and fixed ancestor policies. An MDP based heuristic is used to compute these upper bounds on the expected values. Detailed description about this MDP heuristic is provided in Section 4.2. All policies of agent i, Πi are then sorted based on these upper bounds (also referred to as heuristic values henceforth) in descending order. Exploration of these policies (in step 2 below) are performed in this descending order. As indicated in the level 2 of the search tree (of Figure 2), all the joint policies are sorted based on the heuristic values, indicated in the top right corner of each joint policy. The intuition behind sorting and then exploring policies in descending order of upper bounds, is that the policies with higher upper bounds could yield joint policies with higher expected values. 2. Exploration and Pruning: Exploration implies computing the best response joint policy πi+,∗ corresponding to fixed ancestor policies of agent i, πi− . This is performed by iterating through all policies of agent i i.e. Πi and summing two quantities for each policy: (i) the best response for all of is children (obtained by performing steps 1 and 2 at each of the child nodes); (ii) the expected value obtained by i for fixed policies of ancestors. Thus, exploration of a policy πi yields actual expected value of a joint policy, πi+ represented as v[πi+ , πi− ]. The policy with the highest expected value is the best response policy. Pruning refers to avoiding exploring all policies (or computing expected values) at agent i by using the current best expected value, vmax [πi+ , πi− ]. Henceforth, this vmax [πi+ , πi− ] will be referred to as threshold. A policy, πi need not be explored if the upper bound for that policy, ˆv[πi, πi− ] is less than the threshold. This is because the expected value for the best joint policy attainable for that policy will be less than the threshold. On the other hand, when considering a leaf agent, SPIDER computes the best response policy (and consequently its expected value) corresponding to fixed policies of its ancestors, πi− . This is accomplished by computing expected values for each of the policies (corresponding to fixed policies of ancestors) and selecting the highest expected value policy. In Figure 2, SPIDER assigns best response policies to leaf agents at level 3. The policy for the left leaf agent is to perform action East at each time step in the policy, while the policy for the right leaf agent is to perform Off at each time step. These best response policies from the leaf agents yield an actual expected value of 234 for the complete joint policy. Algorithm 1 provides the pseudo code for SPIDER. This algorithm outputs the best joint policy, πi+,∗ (with an expected value greater than threshold) for the agents in Tree(i). Lines 3-8 compute the best response policy of a leaf agent i, while lines 9-23 computes the best response joint policy for agents in Tree(i). This best response computation for a non-leaf agent i includes: (a) Sorting of policies (in descending order) based on heuristic values on line 11; (b) Computing best response policies at each of the children for fixed policies of agent i in lines 16-20; and (c) Maintaining 824 The Sixth Intl. Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Algorithm 1 SPIDER(i, πi− , threshold) 1: πi+,∗ ← null 2: Πi ← GET-ALL-POLICIES (horizon, Ai, Ωi) 3: if IS-LEAF(i) then 4: for all πi ∈ Πi do 5: v[πi, πi−] ← JOINT-REWARD (πi, πi−) 6: if v[πi, πi−] > threshold then 7: πi+,∗ ← πi 8: threshold ← v[πi, πi−] 9: else 10: children ← CHILDREN (i) 11: ˆΠi ← UPPER-BOUND-SORT(i, Πi, πi−) 12: for all πi ∈ ˆΠi do 13: ˜πi+ ← πi 14: if ˆv[πi, πi−] < threshold then 15: Go to line 12 16: for all j ∈ children do 17: jThres ← threshold − v[πi, πi−]− Σk∈children,k=j ˆvk[πi, πi−] 18: πj+,∗ ← SPIDER(j, πi πi−, jThres) 19: ˜πi+ ← ˜πi+ πj+,∗ 20: ˆvj[πi, πi−] ← v[πj+,∗, πi πi−] 21: if v[˜πi+, πi−] > threshold then 22: threshold ← v[˜πi+, πi−] 23: πi+,∗ ← ˜πi+ 24: return πi+,∗ Algorithm 2 UPPER-BOUND-SORT(i, Πi, πi− ) 1: children ← CHILDREN (i) 2: ˆΠi ← null /* Stores the sorted list */ 3: for all πi ∈ Πi do 4: ˆv[πi, πi−] ← JOINT-REWARD (πi, πi−) 5: for all j ∈ children do 6: ˆvj[πi, πi−] ← UPPER-BOUND(i, j, πi πi−) 7: ˆv[πi, πi−] + ← ˆvj[πi, πi−] 8: ˆΠi ← INSERT-INTO-SORTED (πi, ˆΠi) 9: return ˆΠi best expected value, joint policy in lines 21-23. Algorithm 2 provides the pseudo code for sorting policies based on the upper bounds on the expected values of joint policies. Expected value for an agent i consists of two parts: value obtained from ancestors and value obtained from its children. Line 4 computes the expected value obtained from ancestors of the agent (using JOINT-REWARD function), while lines 5-7 compute the heuristic value from the children. The sum of these two parts yields an upper bound on the expected value for agent i, and line 8 of the algorithm sorts the policies based on these upper bounds. 4.2 MDP based heuristic function The heuristic function quickly provides an upper bound on the expected value obtainable from the agents in Tree(i). The subtree of agents is a distributed POMDP in itself and the idea here is to construct a centralized MDP corresponding to the (sub-tree) distributed POMDP and obtain the expected value of the optimal policy for this centralized MDP. To reiterate this in terms of the agents in DFS tree interaction structure, we assume full observability for the agents in Tree(i) and for fixed policies of the agents in {Ancestors(i) ∪ i}, we compute the joint value ˆv[πi+ , πi− ] . We use the following notation for presenting the equations for computing upper bounds/heuristic values (for agents i and k): Let Ei− denote the set of links between agents in {Ancestors(i)∪ i} and Tree(i), Ei+ denote the set of links between agents in Tree(i). Also, if l ∈ Ei− , then l1 is the agent in {Ancestors(i)∪ i} and l2 is the agent in Tree(i), that l connects together. We first compact the standard notation: ot k =Ok(st+1 k , st+1 u , πk(ωt k), ωt+1 k ) (1) pt k =Pk(st k, st u, πk(ωt k), st+1 k ) · ot k pt u =P(st u, st+1 u ) st l = st l1 , st l2 , st u ; ωt l = ωt l1 , ωt l2 rt l =Rl(st l , πl1 (ωt l1 ), πl2 (ωt l2 )) vt l =V t πl (st l , st u, ωt l1 , ωt l2 ) Depending on the location of agent k in the agent tree we have the following cases: IF k ∈ {Ancestors(i) ∪ i}, ˆpt k = pt k, (2) IF k ∈ Tree(i), ˆpt k = Pk(st k, st u, πk(ωt k), st+1 k ) IF l ∈ Ei− , ˆrt l = max {al2 } Rl(st l , πl1 (ωt l1 ), al2 ) IF l ∈ Ei+ , ˆrt l = max {al1 ,al2 } Rl(st l , al1 , al2 ) The value function for an agent i executing the joint policy πi+ at time η − 1 is provided by the equation: V η−1 πi+ (sη−1 , ωη−1 ) = l∈Ei− vη−1 l + l∈Ei+ vη−1 l (3) where vη−1 l = rη−1 l + ω η l ,sη pη−1 l1 pη−1 l2 pη−1 u vη l Algorithm 3 UPPER-BOUND (i, j, πj− ) 1: val ← 0 2: for all l ∈ Ej− ∪ Ej+ do 3: if l ∈ Ej− then πl1 ← φ 4: for all s0 l do 5: val + ← startBel[s0 l ]· UPPER-BOUND-TIME (i, s0 l , j, πl1 , ) 6: return val Algorithm 4 UPPER-BOUND-TIME (i, st l , j, πl1 , ωt l1 ) 1: maxV al ← −∞ 2: for all al1 , al2 do 3: if l ∈ Ei− and l ∈ Ej− then al1 ← πl1 (ωt l1 ) 4: val ← GET-REWARD(st l , al1 , al2 ) 5: if t < πi.horizon − 1 then 6: for all st+1 l , ωt+1 l1 do 7: futV al←pt u ˆpt l1 ˆpt l2 8: futV al ∗ ← UPPER-BOUND-TIME(st+1 l , j, πl1 , ωt l1 ωt+1 l1 ) 9: val + ← futV al 10: if val > maxV al then maxV al ← val 11: return maxV al Upper bound on the expected value for a link is computed by modifying the equation 3 to reflect the full observability assumption. This involves removing the observational probability term for agents in Tree(i) and maximizing the future value ˆvη l over the actions of those agents (in Tree(i)). Thus, the equation for the The Sixth Intl. Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 825 computation of the upper bound on a link l, is as follows: IF l ∈ Ei− , ˆvη−1 l =ˆrη−1 l + max al2 ω η l1 ,s η l ˆpη−1 l1 ˆpη−1 l2 pη−1 u ˆvη l IF l ∈ Ei+ , ˆvη−1 l =ˆrη−1 l + max al1 ,al2 s η l ˆpη−1 l1 ˆpη−1 l2 pη−1 u ˆvη l Algorithm 3 and Algorithm 4 provide the algorithm for computing upper bound for child j of agent i, using the equations descirbed above. While Algorithm 4 computes the upper bound on a link given the starting state, Algorithm 3 sums the upper bound values computed over each of the links in Ei− ∪ Ei+ . 4.3 Abstraction Algorithm 5 SPIDER-ABS(i, πi− , threshold) 1: πi+,∗ ← null 2: Πi ← GET-POLICIES (<>, 1) 3: if IS-LEAF(i) then 4: for all πi ∈ Πi do 5: absHeuristic ← GET-ABS-HEURISTIC (πi, πi−) 6: absHeuristic ∗ ← (timeHorizon − πi.horizon) 7: if πi.horizon = timeHorizon and πi.absNodes = 0 then 8: v[πi, πi−] ← JOINT-REWARD (πi, πi−) 9: if v[πi, πi−] > threshold then 10: πi+,∗ ← πi; threshold ← v[πi, πi−] 11: else if v[πi, πi−] + absHeuristic > threshold then 12: ˆΠi ← EXTEND-POLICY (πi, πi.absNodes + 1) 13: Πi + ← INSERT-SORTED-POLICIES ( ˆΠi) 14: REMOVE(πi) 15: else 16: children ← CHILDREN (i) 17: Πi ← UPPER-BOUND-SORT(i, Πi, πi−) 18: for all πi ∈ Πi do 19: ˜πi+ ← πi 20: absHeuristic ← GET-ABS-HEURISTIC (πi, πi−) 21: absHeuristic ∗ ← (timeHorizon − πi.horizon) 22: if πi.horizon = timeHorizon and πi.absNodes = 0 then 23: if ˆv[πi, πi−] < threshold and πi.absNodes = 0 then 24: Go to line 19 25: for all j ∈ children do 26: jThres ← threshold − v[πi, πi−]− Σk∈children,k=j ˆvk[πi, πi−] 27: πj+,∗ ← SPIDER(j, πi πi−, jThres) 28: ˜πi+ ← ˜πi+ πj+,∗; ˆvj[πi, πi−] ← v[πj+,∗, πi πi−] 29: if v[˜πi+, πi−] > threshold then 30: threshold ← v[˜πi+, πi−]; πi+,∗ ← ˜πi+ 31: else if ˆv[πi+, πi−] + absHeuristic > threshold then 32: ˆΠi ← EXTEND-POLICY (πi, πi.absNodes + 1) 33: Πi + ← INSERT-SORTED-POLICIES (ˆΠi) 34: REMOVE(πi) 35: return πi+,∗ In SPIDER, the exploration/pruning phase can only begin after the heuristic (or upper bound) computation and sorting for the policies has ended. We provide an approach to possibly circumvent the exploration of a group of policies based on heuristic computation for one abstract policy, thus leading to an improvement in runtime performance (without loss in solution quality). The important steps in this technique are defining the abstract policy and how heuristic values are computated for the abstract policies. In this paper, we propose two types of abstraction: 1. Horizon Based Abstraction (HBA): Here, the abstract policy is defined as a shorter horizon policy. It represents a group of longer horizon policies that have the same actions as the abstract policy for times less than or equal to the horizon of the abstract policy. In Figure 3(a), a T=1 abstract policy that performs East action, represents a group of T=2 policies, that perform East in the first time step. For HBA, there are two parts to heuristic computation: (a) Computing the upper bound for the horizon of the abstract policy. This is same as the heuristic computation defined by the GETHEURISTIC() algorithm for SPIDER, however with a shorter time horizon (horizon of the abstract policy). (b) Computing the maximum possible reward that can be accumulated in one time step (using GET-ABS-HEURISTIC()) and multiplying it by the number of time steps to time horizon. This maximum possible reward (for one time step) is obtained by iterating through all the actions of all the agents in Tree(i) and computing the maximum joint reward for any joint action. Sum of (a) and (b) is the heuristic value for a HBA abstract policy. 2. Node Based Abstraction (NBA): Here an abstract policy is obtained by not associating actions to certain nodes of the policy tree. Unlike in HBA, this implies multiple levels of abstraction. This is illustrated in Figure 3(b), where there are T=2 policies that do not have an action for observation TP. These incomplete T=2 policies are abstractions for T=2 complete policies. Increased levels of abstraction leads to faster computation of a complete joint policy, πroot+ and also to shorter heuristic computation and exploration, pruning phases. For NBA, the heuristic computation is similar to that of a normal policy, except in cases where there is no action associated with policy nodes. In such cases, the immediate reward is taken as Rmax (maximum reward for any action). We combine both the abstraction techniques mentioned above into one technique, SPIDER-ABS. Algorithm 5 provides the algorithm for this abstraction technique. For computing optimal joint policy with SPIDER-ABS, a non-leaf agent i initially examines all abstract T=1 policies (line 2) and sorts them based on abstract policy heuristic computations (line 17). The abstraction horizon is gradually increased and these abstract policies are then explored in descending order of heuristic values and ones that have heuristic values less than the threshold are pruned (lines 23-24). Exploration in SPIDER-ABS has the same definition as in SPIDER if the policy being explored has a horizon of policy computation which is equal to the actual time horizon and if all the nodes of the policy have an action associated with them (lines 25-30). However, if those conditions are not met, then it is substituted by a group of policies that it represents (using EXTEND-POLICY () function) (lines 31-32). EXTEND-POLICY() function is also responsible for initializing the horizon and absNodes of a policy. absNodes represents the number of nodes at the last level in the policy tree, that do not have an action assigned to them. If πi.absNodes = |Ωi|πi.horizon−1 (i.e. total number of policy nodes possible at πi.horizon) , then πi.absNodes is set to zero and πi.horizon is increased by 1. Otherwise, πi.absNodes is increased by 1. Thus, this function combines both HBA and NBA by using the policy variables, horizon and absNodes. Before substituting the abstract policy with a group of policies, those policies are sorted based on heuristic values (line 33). Similar type of abstraction based best response computation is adopted at leaf agents (lines 3-14). 4.4 Value ApproXimation (VAX) In this section, we present an approximate enhancement to SPIDER called VAX. The input to this technique is an approximation parameter , which determines the difference from the optimal solution quality. This approximation parameter is used at each agent for pruning out joint policies. The pruning mechanism in SPIDER and SPIDER-Abs dictates that a joint policy be pruned only if the threshold is exactly greater than the heuristic value. However, the 826 The Sixth Intl. Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Figure 3: Example of abstraction for (a) HBA (Horizon Based Abstraction) and (b) NBA (Node Based Abstraction) idea in this technique is to prune out joint a policy if the following condition is satisfied: threshold + > ˆv[πi , πi− ]. Apart from the pruning condition, VAX is the same as SPIDER/SPIDER-ABS. In the example of Figure 2, if the heuristic value for the second joint policy (or second search tree node) in level 2 were 238 instead of 232, then that policy could not be be pruned using SPIDER or SPIDER-Abs. However, in VAX with an approximation parameter of 5, the joint policy in consideration would also be pruned. This is because the threshold (234) at that juncture plus the approximation parameter (5), i.e. 239 would have been greater than the heuristic value for that joint policy (238). It can be noted from the example (just discussed) that this kind of pruning can lead to fewer explorations and hence lead to an improvement in the overall run-time performance. However, this can entail a sacrifice in the quality of the solution because this technique can prune out a candidate optimal solution. A bound on the error introduced by this approximate algorithm as a function of , is provided by Proposition 3. 4.5 Percentage ApproXimation (PAX) In this section, we present the second approximation enhancement over SPIDER called PAX. Input to this technique is a parameter, δ that represents the minimum percentage of the optimal solution quality that is desired. Output of this technique is a policy with an expected value that is at least δ% of the optimal solution quality. A policy is pruned if the following condition is satisfied: threshold > δ 100 ˆv[πi , πi− ]. Like in VAX, the only difference between PAX and SPIDER/SPIDER-ABS is this pruning condition. Again in Figure 2, if the heuristic value for the second search tree node in level 2 were 238 instead of 232, then PAX with an input parameter of 98% would be able to prune that search tree node (since 98 100 ∗238 < 234). This type of pruning leads to fewer explorations and hence an improvement in run-time performance, while potentially leading to a loss in quality of the solution. Proposition 4 provides the bound on quality loss. 4.6 Theoretical Results PROPOSITION 1. Heuristic provided using the centralized MDP heuristic is admissible. Proof. For the value provided by the heuristic to be admissible, it should be an over estimate of the expected value for a joint policy. Thus, we need to show that: For l ∈ Ei+ ∪ Ei− : ˆvt l ≥ vt l (refer to notation in Section 4.2) We use mathematical induction on t to prove this. Base case: t = T − 1. Irrespective of whether l ∈ Ei− or l ∈ Ei+ , ˆrt l is computed by maximizing over all actions of the agents in Tree(i), while rt l is computed for fixed policies of the same agents. Hence, ˆrt l ≥ rt l and also ˆvt l ≥ vt l . Assumption: Proposition holds for t = η, where 1 ≤ η < T − 1. We now have to prove that the proposition holds for t = η − 1. We show the proof for l ∈ Ei− and similar reasoning can be adopted to prove for l ∈ Ei+ . The heuristic value function for l ∈ Ei− is provided by the following equation: ˆvη−1 l =ˆrη−1 l + max al2 ω η l1 ,s η l ˆpη−1 l1 ˆpη−1 l2 pη−1 u ˆvη l Rewriting the RHS and using Eqn 2 (in Section 4.2) =ˆrη−1 l + max al2 ω η l1 ,s η l pη−1 u pη−1 l1 ˆpη−1 l2 ˆvη l =ˆrη−1 l + ω η l1 ,s η l pη−1 u pη−1 l1 max al2 ˆpη−1 l2 ˆvη l Since maxal2 ˆpη−1 l2 ˆvη l ≥ ωl2 oη−1 l2 ˆpη−1 l2 ˆvη l and pη−1 l2 = oη−1 l2 ˆpη−1 l2 ≥ˆrη−1 l + ω η l1 ,s η l pη−1 u pη−1 l1 ωl2 pη−1 l2 ˆvη l Since ˆvη l ≥ vη l (from the assumption) ≥ˆrη−1 l + ω η l1 ,s η l pη−1 u pη−1 l1 ωl2 pη−1 l2 vη l Since ˆrη−1 l ≥ rη−1 l (by definition) ≥rη−1 l + ω η l1 ,s η l pη−1 u pη−1 l1 ωl2 pη−1 l2 vη l =rη−1 l + (ω η l ,s η l ) pη−1 u pη−1 l1 pη−1 l2 vη l = vη−1 l Thus proved. PROPOSITION 2. SPIDER provides an optimal solution. Proof. SPIDER examines all possible joint policies given the interaction structure of the agents. The only exception being when a joint policy is pruned based on the heuristic value. Thus, as long as a candidate optimal policy is not pruned, SPIDER will return an optimal policy. As proved in Proposition 1, the expected value for a joint policy is always an upper bound. Hence when a joint policy is pruned, it cannot be an optimal solution. PROPOSITION 3. Error bound on the solution quality for VAX (implemented over SPIDER-ABS) with an approximation parameter of is ρ , where ρ is the number of leaf nodes in the DFS tree. The Sixth Intl. Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 827 Proof. We prove this proposition using mathematical induction on the depth of the DFS tree. Base case: depth = 1 (i.e. one node). Best response is computed by iterating through all policies, Πk. A policy,πk is pruned if ˆv[πk, πk− ] < threshold + . Thus the best response policy computed by VAX would be at most away from the optimal best response. Hence the proposition holds for the base case. Assumption: Proposition holds for d, where 1 ≤ depth ≤ d. We now have to prove that the proposition holds for d + 1. Without loss of generality, lets assume that the root node of this tree has k children. Each of this children is of depth ≤ d, and hence from the assumption, the error introduced in kth child is ρk , where ρk is the number of leaf nodes in kth child of the root. Therefore, ρ = k ρk, where ρ is the number of leaf nodes in the tree. In SPIDER-ABS, threshold at the root agent, thresspider = k v[πk+ , πk− ]. However, with VAX the threshold at the root agent will be (in the worst case), threshvax = k v[πk+ , πk− ]− k ρk . Hence, with VAX a joint policy is pruned at the root agent if ˆv[πroot, πroot− ] < threshvax + ⇒ ˆv[πroot, πroot− ] < threshspider − (( k ρk) − 1) ≤ threshspider − ( k ρk) ≤ threshspider − ρ . Hence proved. PROPOSITION 4. For PAX (implemented over SPIDER-ABS) with an input parameter of δ, the solution quality is at least δ 100 v[πroot+,∗ ], where v[πroot+,∗ ] denotes the optimal solution quality. Proof. We prove this proposition using mathematical induction on the depth of the DFS tree. Base case: depth = 1 (i.e. one node). Best response is computed by iterating through all policies, Πk. A policy,πk is pruned if δ 100 ˆv[πk, πk− ] < threshold. Thus the best response policy computed by PAX would be at least δ 100 times the optimal best response. Hence the proposition holds for the base case. Assumption: Proposition holds for d, where 1 ≤ depth ≤ d. We now have to prove that the proposition holds for d + 1. Without loss of generality, lets assume that the root node of this tree has k children. Each of this children is of depth ≤ d, and hence from the assumption, the solution quality in the kth child is at least δ 100 v[πk+,∗ , πk− ] for PAX. With SPIDER-ABS, a joint policy is pruned at the root agent if ˆv[πroot, πroot− ] < k v[πk+,∗ , πk− ]. However with PAX, a joint policy is pruned if δ 100 ˆv[πroot, πroot− ] < k δ 100 v[πk+,∗ , πk− ] ⇒ ˆv[πroot, πroot− ] < k v[πk+,∗ , πk− ]. Since the pruning condition at the root agent in PAX is the same as the one in SPIDER-ABS, there is no error introduced at the root agent and all the error is introduced in the children. Thus, overall solution quality is at least δ 100 of the optimal solution. Hence proved. 5. EXPERIMENTAL RESULTS All our experiments were conducted on the sensor network domain from Section 2. The five network configurations employed are shown in Figure 4. Algorithms that we experimented with are GOA, SPIDER, SPIDER-ABS, PAX and VAX. We compare against GOA because it is the only global optimal algorithm that considers more than two agents. We performed two sets of experiments: (i) firstly, we compared the run-time performance of the above algorithms and (ii) secondly, we experimented with PAX and VAX to study the tradeoff between run-time and solution quality. Experiments were terminated after 10000 seconds1 . Figure 5(a) provides run-time comparisons between the optimal algorithms GOA, SPIDER, SPIDER-Abs and the approximate algorithms, PAX ( of 30) and VAX(δ of 80). X-axis denotes the 1 Machine specs for all experiments: Intel Xeon 3.6 GHZ processor, 2GB RAM sensor network configuration used, while Y-axis indicates the runtime (on a log-scale). The time horizon of policy computation was 3. For each configuration (3-chain, 4-chain, 4-star and 5-star), there are five bars indicating the time taken by GOA, SPIDER, SPIDERAbs, PAX and VAX. GOA did not terminate within the time limit for 4-star and 5-star configurations. SPIDER-Abs dominated the SPIDER and GOA for all the configurations. For instance, in the 3chain configuration, SPIDER-ABS provides 230-fold speedup over GOA and 2-fold speedup over SPIDER and for the 4-chain configuration it provides 58-fold speedup over GOA and 2-fold speedup over SPIDER. The two approximation approaches, VAX and PAX provided further improvement in performance over SPIDER-Abs. For instance, in the 5-star configuration VAX provides a 15-fold speedup and PAX provides a 8-fold speedup over SPIDER-Abs. Figures 5(b) provides a comparison of the solution quality obtained using the different algorithms for the problems tested in Figure 5(a). X-axis denotes the sensor network configuration while Y-axis indicates the solution quality. Since GOA, SPIDER, and SPIDER-Abs are all global optimal algorithms, the solution quality is the same for all those algorithms. For 5-P configuration, the global optimal algorithms did not terminate within the limit of 10000 seconds, so the bar for optimal quality indicates an upper bound on the optimal solution quality. With both the approximations, we obtained a solution quality that was close to the optimal solution quality. In 3-chain and 4-star configurations, it is remarkable that both PAX and VAX obtained almost the same actual quality as the global optimal algorithms, despite the approximation parameter and δ. For other configurations as well, the loss in quality was less than 20% of the optimal solution quality. Figure 5(c) provides the time to solution with PAX (for varying epsilons). X-axis denotes the approximation parameter, δ (percentage to optimal) used, while Y-axis denotes the time taken to compute the solution (on a log-scale). The time horizon for all the configurations was 4. As δ was decreased from 70 to 30, the time to solution decreased drastically. For instance, in the 3-chain case there was a total speedup of 170-fold when the δ was changed from 70 to 30. Interestingly, even with a low δ of 30%, the actual solution quality remained equal to the one obtained at 70%. Figure 5(d) provides the time to solution for all the configurations with VAX (for varying epsilons). X-axis denotes the approximation parameter, used, while Y-axis denotes the time taken to compute the solution (on a log-scale). The time horizon for all the configurations was 4. As was increased, the time to solution decreased drastically. For instance, in the 4-star case there was a total speedup of 73-fold when the was changed from 60 to 140. Again, the actual solution quality did not change with varying epsilon. Figure 4: Sensor network configurations 828 The Sixth Intl. Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Figure 5: Comparison of GOA, SPIDER, SPIDER-Abs and VAX for T = 3 on (a) Runtime and (b) Solution quality; (c) Time to solution for PAX with varying percentage to optimal for T=4 (d) Time to solution for VAX with varying epsilon for T=4 6. SUMMARY AND RELATED WORK This paper presents four algorithms SPIDER, SPIDER-ABS, PAX and VAX that provide a novel combination of features for policy search in distributed POMDPs: (i) exploiting agent interaction structure given a network of agents (i.e. easier scale-up to larger number of agents); (ii) using branch and bound search with an MDP based heuristic function; (iii) utilizing abstraction to improve runtime performance without sacrificing solution quality; (iv) providing a priori percentage bounds on quality of solutions using PAX; and (v) providing expected value bounds on the quality of solutions using VAX. These features allow for systematic tradeoff of solution quality for run-time in networks of agents operating under uncertainty. Experimental results show orders of magnitude improvement in performance over previous global optimal algorithms. Researchers have typically employed two types of techniques for solving distributed POMDPs. The first set of techniques compute global optimal solutions. Hansen et al. [5] present an algorithm based on dynamic programming and iterated elimination of dominant policies, that provides optimal solutions for distributed POMDPs. Szer et al. [13] provide an optimal heuristic search method for solving Decentralized POMDPs. This algorithm is based on the combination of a classical heuristic search algorithm, A∗ and decentralized control theory. The key differences between SPIDER and MAA* are: (a) Enhancements to SPIDER (VAX and PAX) provide for quality guaranteed approximations, while MAA* is a global optimal algorithm and hence involves significant computational complexity; (b) Due to MAA*s inability to exploit interaction structure, it was illustrated only with two agents. However, SPIDER has been illustrated for networks of agents; and (c) SPIDER explores the joint policy one agent at a time, while MAA* expands it one time step at a time (simultaneously for all the agents). The second set of techniques seek approximate policies. EmeryMontemerlo et al. [4] approximate POSGs as a series of one-step Bayesian games using heuristics to approximate future value, trading off limited lookahead for computational efficiency, resulting in locally optimal policies (with respect to the selected heuristic). Nair et al. [9]s JESP algorithm uses dynamic programming to reach a local optimum solution for finite horizon decentralized POMDPs. Peshkin et al. [11] and Bernstein et al. [2] are examples of policy search techniques that search for locally optimal policies. Though all the above techniques improve the efficiency of policy computation considerably, they are unable to provide error bounds on the quality of the solution. This aspect of quality bounds differentiates SPIDER from all the above techniques. Acknowledgements. This material is based upon work supported by the Defense Advanced Research Projects Agency (DARPA), through the Department of the Interior, NBC, Acquisition Services Division under Contract No. NBCHD030010. The views and conclusions contained in this document are those of the authors, and should not be interpreted as representing the official policies, either expressed or implied, of the Defense Advanced Research Projects Agency or the U.S. Government. 7. REFERENCES [1] R. Becker, S. Zilberstein, V. Lesser, and C.V. Goldman. Solving transition independent decentralized Markov decision processes. JAIR, 22:423-455, 2004. [2] D. S. Bernstein, E.A. Hansen, and S. Zilberstein. Bounded policy iteration for decentralized POMDPs. In IJCAI, 2005. [3] D. S. Bernstein, S. Zilberstein, and N. Immerman. The complexity of decentralized control of MDPs. In UAI, 2000. [4] R. Emery-Montemerlo, G. Gordon, J. Schneider, and S. Thrun. Approximate solutions for partially observable stochastic games with common payoffs. In AAMAS, 2004. [5] E. Hansen, D. Bernstein, and S. Zilberstein. Dynamic programming for partially observable stochastic games. In AAAI, 2004. [6] V. Lesser, C. Ortiz, and M. Tambe. Distributed sensor nets: A multiagent perspective. Kluwer, 2003. [7] R. Maheswaran, M. Tambe, E. Bowring, J. Pearce, and P. Varakantham. Taking dcop to the real world : Efficient complete solutions for distributed event scheduling. In AAMAS, 2004. [8] P. J. Modi, W. Shen, M. Tambe, and M. Yokoo. An asynchronous complete method for distributed constraint optimization. In AAMAS, 2003. [9] R. Nair, D. Pynadath, M. Yokoo, M. Tambe, and S. Marsella. Taming decentralized POMDPs: Towards efficient policy computation for multiagent settings. In IJCAI, 2003. [10] R. Nair, P. Varakantham, M. Tambe, and M. Yokoo. Networked distributed POMDPs: A synthesis of distributed constraint optimization and POMDPs. In AAAI, 2005. [11] L. Peshkin, N. Meuleau, K.-E. Kim, and L. Kaelbling. Learning to cooperate via policy search. In UAI, 2000. [12] A. Petcu and B. Faltings. A scalable method for multiagent constraint optimization. In IJCAI, 2005. [13] D. Szer, F. Charpillet, and S. Zilberstein. MAA*: A heuristic search algorithm for solving decentralized POMDPs. In IJCAI, 2005. The Sixth Intl. Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 829",
    "original_translation": "Permitir una araña en una red de POMDPS: Generación de políticas garantizadas de calidad Pradeep Varakantham, Janusz Marecki, Yuichi Yabu ∗, Milind Tambe, Makoto Yokoo ∗ Universidad del Sur de California, Los Ángeles, CA 90089, {Varakant, Marecki, Tambe} @usc.edu ∗ Dept. de Sistemas Inteligentes, Universidad de Kyushu, Fukuoka, 812-8581 Japón, yokoo@is.kyushu-u.ac.jp Resumen distribuido los problemas de decisión de Markov parcialmente observables (POMDP distribuidos) son un enfoque popular para modelar sistemas de múltiples agentes que actúan en dominios inciertos en dominios inciertos.. Dada la significativa complejidad de resolver POMDP distribuidos, particularmente a medida que ampliamos el número de agentes, un enfoque popular se ha centrado en soluciones aproximadas. Aunque este enfoque es eficiente, los algoritmos dentro de este enfoque no proporcionan ninguna garantía sobre la calidad de la solución. Un segundo enfoque menos popular se centra en la optimización global, pero los resultados típicos están disponibles solo para dos agentes, y también a un costo computacional considerable. Este documento supera las limitaciones de ambos enfoques al proporcionar araña, una combinación novedosa de tres características clave para la generación de políticas en POMDP distribuidos: (i) Explota la estructura de interacción del agente dada una red de agentes (es decir, permitiendo una escala más fácil a un número mayor a un número más grande.de agentes);(ii) Utiliza una combinación de heurísticas para la búsqueda de políticas aceleradas;y (iii) permite aproximaciones garantizadas de calidad, lo que permite una compensación sistemática de calidad de solución para el tiempo. Los resultados experimentales muestran órdenes de mejora de magnitud en el rendimiento en comparación con los algoritmos óptimos globales anteriores. Categorías y descriptores de sujetos I.2.11 [Inteligencia artificial]: Sistemas de inteligencia artificiales distribuidos Algoritmos generales de sistemas generales, Teoría 1. Introducción Los problemas de decisión de Markov parcialmente observables (POMDP distribuidos) están surgiendo como un enfoque popular para modelar la toma de decisiones secuenciales en equipos que operan bajo incertidumbre [9, 4, 1, 2, 13]. La incertidumbre surge a causa del no determinismo en los resultados de las acciones y porque el estado mundial solo puede ser parcialmente (o incorrectamente) observable. Desafortunadamente, como lo muestran Bernstein et al.[3], el problema de encontrar la política conjunta óptima para los POMDP distribuidos generales es NEXP Complete. Los investigadores han intentado dos tipos diferentes de enfoques para resolver estos modelos. La primera categoría consiste en técnicas aproximadas altamente eficientes, que pueden no alcanzar soluciones óptimas globalmente [2, 9, 11]. El problema clave con estas técnicas ha sido su incapacidad para proporcionar garantías sobre la calidad de la solución. En contraste, la segunda categoría de enfoques menos popular se ha centrado en un resultado óptimo global [13, 5, 10]. Aunque estos enfoques obtienen soluciones óptimas, generalmente consideran solo dos agentes. Además, no explotan la estructura en las interacciones de los agentes y, por lo tanto, están severamente obstaculizados con respecto a la escalabilidad al considerar más de dos agentes. Para abordar estos problemas con los enfoques existentes, proponemos técnicas aproximadas que proporcionan garantías sobre la calidad de la solución al tiempo que se centran en una red de más de dos agentes. Primero proponemos el algoritmo básico de araña (búsqueda de políticas en entornos distribuidos). Hay dos características novedosas clave en Spider: (i) Es una rama y una técnica de búsqueda heurística vinculada que utiliza una función heurística basada en MDP para buscar una política conjunta óptima;(ii) Explota la estructura de red de los agentes organizando a los agentes en un pseudo árbol de búsqueda de profundidad (DFS) y aprovecha la independencia en las diferentes ramas del árbol DFS. Luego proporcionamos tres mejoras para mejorar la eficiencia del algoritmo de araña básica al tiempo que proporcionamos garantías sobre la calidad de la solución. La primera mejora utiliza abstracciones para acelerar, pero no sacrifica la calidad de la solución. En particular, inicialmente realiza la búsqueda de rama y encuadernado en políticas abstractas y luego se extiende a las políticas completas. La segunda mejora obtiene aceleración al sacrificar la calidad de la solución, pero dentro de un parámetro de entrada que proporciona la diferencia de valor esperada tolerable de la solución óptima. La tercera mejora se basa nuevamente en limitar la búsqueda de eficiencia, sin embargo, con un parámetro de tolerancia que se proporciona como un porcentaje de óptimo. Experimentamos con el dominio de la red de sensores presentado en Nair et al.[10], un representante de dominio de una clase importante de problemas con redes de agentes que trabajan en entornos inciertos. En nuestros experimentos, ilustramos que Spider domina un enfoque óptimo global existente llamado Goa [10], el único algoritmo óptimo global conocido con resultados experimentales demostrados para más de dos agentes. Además, demostramos que la abstracción mejora el rendimiento de Spider significativamente (al tiempo que proporciona soluciones óptimas). Finalmente demostramos una característica clave de Spider: al utilizar las mejoras de aproximación, permite compensaciones de principios en tiempo de ejecución frente a la calidad de la solución.822 978-81-904262-7-5 (RPS) C 2007 Ifaamas 2. Dominio: las redes de sensores distribuidos de sensores distribuidos son una clase importante e importante de dominios que motivan nuestro trabajo. Este documento se centra en un conjunto de problemas de seguimiento de objetivos que surgen en ciertos tipos de redes de sensores [6] introducidas por primera vez en [10]. La Figura 1 muestra una instancia de problema específica dentro de este tipo que consta de tres sensores. Aquí, cada nodo del sensor puede escanear en una de cuatro direcciones: norte, sur, este o oeste (ver Figura 1). Para rastrear un objetivo y obtener una recompensa asociada, dos sensores con áreas de escaneo superpuestas deben coordinarse escaneando la misma área simultáneamente. En la Figura 1, para rastrear un objetivo en LOC11, Sensor1 necesita escanear este y Sensor2 necesita escanear hacia el oeste simultáneamente. Por lo tanto, los sensores tienen que actuar de manera coordinada. Suponemos que hay dos objetivos independientes y que cada movimiento de objetivos es incierto y no afectado por los agentes del sensor. Según el área de escaneo, cada sensor recibe observaciones que pueden tener falsos positivos y falsos negativos. Las observaciones y las transiciones de los sensores son independientes de las acciones de los demás, por ejemplo, las observaciones que el sensor1 recibe son independientes de las acciones del sensor2. Cada agente incurre en un costo para escanear si el objetivo está presente o no, pero no hay costo si se apaga. Dada la incertidumbre de observación de los sensores, los objetivos de las transiciones inciertas y la naturaleza distribuida de los nodos del sensor, estas redes de sensores proporcionan un dominio útil para aplicar modelos POMDP distribuidos. Figura 1: una configuración del sensor de 3 cadenas 3. Modelo de fondo 3.1: POMDP distribuido en red El modelo ND-POMDP se introdujo en [10], motivado por dominios como las redes de sensores introducidas en la Sección 2. Se define como la tupla S, A, P, Ω, O, R, B, donde S = × 1≤i≤nsi × Su es el conjunto de estados del mundo. SI se refiere al conjunto de estados locales del Agente I y Su es el conjunto de estados inútiles. El estado inafectable se refiere a esa parte del estado mundial que no puede verse afectado por las acciones de los agentes, p.Factores ambientales como las ubicaciones objetivo que ningún agente puede controlar. A = × 1≤i≤nai es el conjunto de acciones conjuntas, donde AI es el conjunto de acción para el agente i.ND-POMDP asume la independencia de la transición, donde la función de transición se define como p (s, a, s) = pu (su, su) · 1≤i≤n pi (Si, Su, Ai, Si), donde a = a1,..., an es la acción conjunta realizada en el estado S = S1 ,..., Sn, Su y S = S1 ,..., Sn, Su es el estado resultante. Ω = × 1≤i≤nΩi es el conjunto de observaciones articulares donde ωi es el conjunto de observaciones para los agentes i.La independencia observacional se supone en ND-POMDP, es decir, la función de observación conjunta se define como O (S, A, ω) = 1≤i≤n oi (Si, Su, Ai, ωi), donde S = S1 ,..., Sn, Su es el estado mundial que resulta de los agentes que realizan A = A1 ,..., an en el estado anterior, y ω = ω1 ,..., ωn ∈ ω es la observación recibida en el estado s.Esto implica que la observación de cada agente depende solo del estado inafectable, su acción local y de su estado local resultante. La función de recompensa, r, se define como r (s, a) = l rl (sl1, ..., slr, su, al1, ..., alr), donde cada l podría referirse a cualquier subgrupo de agentesy r = | l |. Según la función de recompensa, se construye un hipergrafo de interacción. Un hiper-enlace, L, existe entre un subconjunto de agentes para todos los RL que comprenden R. El hipergrafo de interacción se define como g = (ag, e), donde los agentes, ag, son los vértices y e = {l | l⊆ AG ∧ RL es un componente de R} son los bordes. El estado de creencia inicial (distribución sobre el estado inicial), b, se define como b (s) = bu (su) · 1≤i≤n bi (Si), donde BU y BI se refieren a la distribución sobre el estado inicial inafectable yEl agente es el estado de creencia inicial, respectivamente. El objetivo en ND-POMDP es calcular la política conjunta π = π1 ,..., πn que maximiza la recompensa esperada de los equipos sobre un horizonte finito t a partir del estado de creencia b. Un ND-POMDP es similar a un problema de optimización de restricciones distribuidas N-ARY (DCOP) [8, 12] donde la variable en cada nodo representa la política seleccionada por un agente individual, πi con el dominio de la variable siendo el conjunto de todosPolíticas locales, πi. El componente de recompensa rl donde | l |= 1 puede considerarse como una restricción local, mientras que el componente de recompensa RL donde L> 1 corresponde a una restricción no local en el gráfico de restricción.3.2 Algoritmo: Algoritmo óptimo global (Goa) En trabajos anteriores, Goa se ha definido como un algoritmo óptimo global para ND-POMDPS [10]. Usaremos Goa en nuestras comparaciones experimentales, ya que Goa es un algoritmo óptimo global de última generación, y de hecho el único con resultados experimentales disponibles para redes de más de dos agentes. Goa toma prestado de un algoritmo DCOP óptimo global llamado DPOP [12]. El paso del mensaje Goas sigue el de DPOP. La primera fase es la propagación de Util, donde los mensajes de utilidad, en este caso los valores de las políticas, se transmiten de las hojas a la raíz. El valor para una política en un agente se define como la suma de los mejores valores de respuesta de sus hijos y la recompensa de la política conjunta asociada con la política de los padres. Por lo tanto, dada una política para un nodo principal, Goa requiere que un agente itere a través de todas sus políticas, encuentre la mejor política de respuesta y devuelva el valor al padre, mientras que en el nodo principal, para encontrar la mejor política, un agente requiere suniños para devolver sus mejores respuestas a cada una de sus políticas. Este proceso de propagación de Util se repite en cada nivel en el árbol, hasta que la raíz agota todas sus políticas. En la segunda fase de propagación de valor, donde las políticas óptimas se transmiten desde la raíz hasta las hojas. GOA aprovecha las interacciones locales en el gráfico de interacción, podando las evaluaciones de políticas conjuntas innecesarias (asociadas con nodos no conectados directamente en el árbol). Dado que el gráfico de interacción captura todas las interacciones de recompensa entre los agentes y, como este algoritmo itera a través de todas las evaluaciones de políticas conjuntas relevantes, este algoritmo produce una solución globalmente óptima.4. Spider como se menciona en la Sección 3.1, un ND-POMDP puede tratarse como un DCOP, donde el objetivo es calcular una política conjunta que maximice la recompensa articular general. La técnica de fuerza bruta para calcular una política óptima sería examinar los valores esperados para todas las políticas conjuntas posibles. La idea clave en Spider es evitar el cálculo de los valores esperados para todo el espacio de las políticas conjuntas, utilizando los límites superiores en los valores esperados de las políticas y la estructura de interacción de los agentes. Similar a algunos de los algoritmos para DCOP [8, 12], Spider tiene un paso de preprocesamiento que construye un árbol DFS correspondiente a la estructura de interacción dada. Tenga en cuenta que estos árboles DFS son pseudo árboles [12] que permiten vínculos entre antepasados y niños. Empleamos la heurística máxima de nodo restringido (MCN) utilizado en el algoritmo DCOP, adoptamos [8], sin embargo, también se pueden emplear otras heurísticas (como la heurística MLSP de [7]). La heurística de MCN intenta colocar a los agentes con más cantidad de limitaciones en la parte superior del árbol. Este árbol rige cómo la búsqueda de la articulación óptima del sexto intl. Conf.en agentes autónomos y sistemas de múltiples agentes (AAMAS 07) 823 Icy procede en araña. Los algoritmos presentados en este documento se pueden extender fácilmente a los hiper-árboles, sin embargo, para fines expositivos, asumimos árboles binarios. Spider es un algoritmo para la planificación centralizada y la ejecución distribuida en POMDP distribuidos. En este artículo, empleamos la siguiente notación para denotar políticas y valores esperados: antepasados (i) ⇒ Agentes de I a la raíz (sin incluir I). Árbol (i) ⇒ Agentes en el sub-árbol (sin incluir i) para el cual yo es la raíz.πroot+ ⇒ Política conjunta de todos los agentes.πi+ ⇒ Política conjunta de todos los agentes en el árbol (i) ∪ i.πi− ⇒ Política conjunta de agentes que están en antepasados (i).πi ⇒ Política del agente ésimo.ˆV [πi, πi−] ⇒ Bound superior en el valor esperado para πi+ administrado πi y políticas de agentes antepasados, es decir, πi−.ˆVj [πi, πi−] ⇒ Bound superior en el valor esperado para πi+ del niño JTH.V [πi, πi−] ⇒ Valor esperado para πi Políticas dadas de agentes antepasados, πi−.V [πi+, πi−] ⇒ Valor esperado para πi+ políticas dadas de agentes antepasados, πi−.VJ [πi+, πi−] ⇒ Valor esperado para πi+ del niño Jth. Figura 2: Ejecución de Spider, un esquema de ejemplo 4.1 de Spider Spider se basa en la idea de la búsqueda de rama y la búsqueda unida, donde los nodos en el árbol de búsqueda representan políticas conjuntas parciales/completas. La Figura 2 muestra un ejemplo de árbol de búsqueda para el algoritmo de araña, utilizando un ejemplo de la cadena de tres agentes. Antes de que comience Spider, su búsqueda, creamos un árbol DFS (es decir, pseudo árbol) de la cadena de tres agentes, con el agente medio como la raíz de este árbol. La araña explota la estructura de este árbol DFS mientras participa en su búsqueda. Tenga en cuenta que en nuestra figura de ejemplo, a cada agente se le asigna una política con t = 2. Por lo tanto, cada rectángulo redondeado (nodo del árbol de búsqueda) indica una política de unión parcial/completa, un rectángulo indica un agente y los óvalos internos a un agente muestran su política. El valor heurístico o esperado real para una política conjunta se indica en la esquina superior derecha del rectángulo redondeado. Si el número está en cursiva y subrayado, implica que se proporciona el valor esperado real de la política conjunta. La araña comienza sin una política asignada a ninguno de los agentes (que se muestran en el nivel 1 del árbol de búsqueda). El nivel 2 del árbol de búsqueda indica que las políticas conjuntas se clasifican en función de los límites superiores calculados para las políticas de los agentes de la raíz. El nivel 3 muestra un nodo de búsqueda de araña con una política conjunta completa (una política asignada a cada uno de los agentes). El valor esperado para esta política conjunta se usa para podar los nodos en el nivel 2 (los que tienen límites superiores <234) al crear políticas para cada agente no hojas I, la araña potencialmente realiza dos pasos: 1. Obteniendo límites superiores y clasificación: en este paso, el agente I calcula los límites superiores en los valores esperados, ˆV [πi, πi−] de las políticas conjuntas πi+ correspondientes a cada una de sus políticas πi y políticas de ancestros fijos. Una heurística basada en MDP se usa para calcular estos límites superiores en los valores esperados. La descripción detallada sobre esta heurística MDP se proporciona en la Sección 4.2. Todas las políticas del agente I, πi se clasifican en función de estos límites superiores (también conocidos como valores heurísticos en adelante) en orden descendente. La exploración de estas políticas (en el paso 2 a continuación) se realizan en este orden descendente. Como se indica en el nivel 2 del árbol de búsqueda (de la Figura 2), todas las políticas conjuntas se clasifican en función de los valores heurísticos, indicados en la esquina superior derecha de cada política articular. La intuición detrás de la clasificación y luego la exploración de políticas en orden descendente de los límites superiores, es que las políticas con límites superiores más altos podrían producir políticas articulares con valores esperados más altos.2. Exploración y poda: la exploración implica calcular la mejor política de respuesta de respuesta πi+, ∗ correspondiente a las políticas de antepasados fijos del agente I, πi−. Esto se realiza iterando a través de todas las políticas del agente I, es decir, Πi y sumando dos cantidades para cada política: (i) la mejor respuesta para todos los niños (obtenidos realizando los pasos 1 y 2 en cada uno de los nodos infantiles);(ii) El valor esperado obtenido por I para políticas fijas de antepasados. Por lo tanto, la exploración de una política πi produce un valor esperado real de una política conjunta, πi+ representada como V [πi+, πi−]. La política con el valor esperado más alto es la mejor política de respuesta. La poda se refiere a evitar explorar todas las políticas (o calcular los valores esperados) en el Agente I utilizando el mejor valor esperado actual, Vmax [πi+, πi−]. En adelante, este Vmax [πi+, πi−] se denominará umbral. Una política, no es necesario explorar si el límite superior para esa política, ˆv [πi, πi−] es menor que el umbral. Esto se debe a que el valor esperado para la mejor política conjunta alcanzable para esa política será menor que el umbral. Por otro lado, al considerar un agente de hoja, Spider calcula la mejor política de respuesta (y en consecuencia su valor esperado) correspondiente a las políticas fijas de sus antepasados, πi−. Esto se logra calculando los valores esperados para cada una de las políticas (correspondientes a políticas fijas de antepasados) y seleccionando la política de valor esperado más alto. En la Figura 2, Spider asigna las mejores políticas de respuesta a los agentes de la hoja en el nivel 3. La política para el agente de la hoja izquierda es realizar la acción este en cada paso de tiempo en la política, mientras que la política para el agente de hoja adecuado debe funcionar en cada paso de tiempo. Estas mejores políticas de respuesta de los agentes de la hoja producen un valor esperado real de 234 para la política conjunta completa. El algoritmo 1 proporciona el código pseudo para la araña. Este algoritmo genera la mejor política conjunta, πi+, ∗ (con un valor esperado mayor que el umbral) para los agentes en el árbol (i). Las líneas 3-8 calculan la mejor política de respuesta de un agente de hoja I, mientras que las líneas 9-23 calculan la mejor política de respuesta de respuesta para los agentes en el árbol (i). Este mejor cálculo de respuesta para un agente no hojado incluye: (a) clasificación de políticas (en orden descendente) basada en valores heurísticos en la línea 11;(b) calcular las mejores políticas de respuesta en cada uno de los niños para políticas fijas del agente I en las líneas 16-20;y (c) mantener 824 el sexto intl. Conf.en agentes autónomos y sistemas de múltiples agentes (Aamas 07) Algoritmo 1 Spider (I, πi−, umbral) 1: πi+, ∗ ← NULL 2: πi ← Get-All-Polyies (Horizon, Ai, ωi) 3: If IS es IS-Leaf (i) luego 4: para todos πi ∈ πi do 5: V [πi, πi−] ← Conjunta-Reward (πi, πi−) 6: si v [πi, πi−]> umbral luego 7: πi+,∗ ← πi 8: umbral ← v [πi, πi−] 9: else 10 10: niños ← niños (i) 11: ˆπi ← Sorteo superior (i, πi, πi−) 12: para todos πi ∈ ˆπi do13: ˜πi+ ← πi 14: if ˆv [πi, πi−] <umbral luego 15: vaya a la línea 12 16: para todos los niños j ∈ HODO 17: Jthres ← umbral - v [πi, πi -] - − σk∈Children, k = j ˆvk [πi, πi−] 18: πj+, ∗ ← Spider (J, πi πi−, jthres) 19: ˜πi+ ← ˜πi+ πj+, ∗ 20: ˆvj [πi, πi−] ← V [πj++, ∗, πi πi−] 21: if v [˜πi+, πi−]> umbral luego 22: umbral ← v [˜πi+, πi−] 23: πi+, ∗ ← ˜πi+24: return πi+, ∗ algorithm 2 superior-Dbound-sort (i, πi, πi−) 1: niños ← niños (i) 2: ˆπi ← nulo / * almacena la lista ordenada * / 3: para todos πi ∈ πi do 4: ˆv [πi, πi−]]← Conjunte-Reward (πi, πi−) 5: para todos los niños J ∈ Do 6: ˆvj [πi, πi−] ← Unido superior (i, j, πi πi−) 7: ˆv [πi, πi−] +← ˆVj [πi, πi−] 8: ˆπi ← Insertar en orden (πi, ˆπi) 9: return ˆπi mejor valor esperado, política conjunta en las líneas 21-23. El algoritmo 2 proporciona el código pseudo para clasificar las políticas basadas en los límites superiores en los valores esperados de las políticas conjuntas. El valor esperado para un agente I consta de dos partes: valor obtenido de antepasados y valor obtenido de sus hijos. La línea 4 calcula el valor esperado obtenido de los antepasados del agente (utilizando la función conjunta-recompensa), mientras que las líneas 5-7 calculan el valor heurístico de los niños. La suma de estas dos partes produce un límite superior en el valor esperado para el Agente I, y la línea 8 del algoritmo clasifica las políticas basadas en estos límites superiores.4.2 Función heurística basada en MDP La función heurística rápidamente proporciona un límite superior en el valor esperado que se puede obtener de los agentes en el árbol (i). El subárbol de los agentes es un POMDP distribuido en sí mismo y la idea aquí es construir un MDP centralizado correspondiente al POMDP distribuido (sub-árbol) y obtener el valor esperado de la política óptima para este MDP centralizado. Para reiterar esto en términos de los agentes en la estructura de interacción del árbol DFS, asumimos la observabilidad total para los agentes en el árbol (i) y para las políticas fijas de los agentes en {antepasados (i) ∪ i}, calculamos el valor articular ˆV [πi+, πi−]. Utilizamos la siguiente notación para presentar las ecuaciones para calcular los límites superiores/valores heurísticos (para los agentes I y K): deje que Ei- denote el conjunto de enlaces entre agentes en {antepasados (i) ∪ I} y árbol (i), EI+denota el conjunto de enlaces entre los agentes en el árbol (i). Además, si l ∈ Ei−, entonces L1 es el agente en {antepasados (i) ∪ i} y L2 es el agente en el árbol (i), que L se conecta juntos. Primero compacimos la notación estándar: OT K = OK (ST+1 K, ST+1 U, πk (ωt K), ωt+1 k) (1) Pt K = Pk (St K, St U, πk (ωtk), st+1 k) · ot k pt u = p (st u, st+1 u) st l = st l1, st l2, st u;ωt L = ωt L1, ωt L2 rt l = rl (st l, πl1 (ωt L1), πl2 (ωt l2)) vt l = v t πl (st l, st u, ωt l1, ωt l2) dependiendo de laUbicación del agente k En el árbol del agente tenemos los siguientes casos: si k ∈ {antepasados (i) ∪ i}, ˆpt k = pt k, (2) si k ∈ Tree (i), ˆpt k = pk (st k, st u, πk (ωt k), st+ 1 k) si l ∈ Ei−, ˆrt l = max {al2} rl (st l, πl1 (ωt l1), al2) si l ∈ Ei+, ˆrt l = max{al1, al2} rl (st l, al1, al2) La función de valor para un agente i ejecutando la política conjunta πi+ en el tiempo η - 1 es proporcionada por la ecuación: V η - 1 πi+ (Sη - 1, Ωη - 1) = l∈Ei− vη - 1 l + lleei + vη - 1 l (3) donde vη - 1 l = rη - 1 l + Ω η l, sη pη - 1 l1 pη - 1 l2 pη - 1 u vηL algoritmo 3 límite superior (i, j, πj−) 1: val ← 0 2: para todos l ∈ Ej− ∪ eJ+ do 3: si l ∈ Ej− entonces πl1 ← φ 4: para todos s0 l do 5:Val + ← Startbel [S0 L] · Tiempo superior (I, S0 L, J, πl1,) 6: Algoritmo de Val de retorno 4 Tiempo superior (I, St L, J, πl1, ωt L1) 1: maxv al ← −∞ 2: para todos Al1, al2 do 3: si l ∈ Ei− y l ∈ Ej− entonces AL1 ← πl1 (ωt L1) 4: Val ← Get-Reward (St L, Al1, Al2) 5: Si t <πi.horizon-1, entonces 6: para todos st+1 l, ωt+1 l1 do 7: Futv al ← Pt u ˆpt l1 ˆpt l2 8: futv al ∗ ← en el tiempo superior (ST+1L, J, πl1, ωt L1 ωt + 1 L1) 9: Val + ← Futv al 10: Si Val> maxv al, entonces maxv al ← Val 11: return máximo de límite superior en el valor esperado para un enlace se calcula mediante la modificaciónLa ecuación 3 para reflejar la suposición de observabilidad completa. Esto implica eliminar el término de probabilidad de observación para los agentes en el árbol (i) y maximizar el valor futuro ˆvη l sobre las acciones de esos agentes (en el árbol (i)). Por lo tanto, la ecuación para el sexto intl. Conf.en agentes autónomos y sistemas de múltiples agentes (aamas 07) 825 Cálculo del límite superior en un enlace l, es el siguiente: si l ∈ Ei−, ˆvη-1 l = ˆrη-1 l + max al2 ω η l1, sη l ˆPη - 1 l1 ˆPη - 1 l2 pη - 1 u ˆvη l if l ∈ Ei +, ˆVη - 1 l = ˆrη - 1 l + max al1, al2 s η l ˆpη - 1 l1 ˆpη - 1 l2 pη - 1 uˆVη l Algoritmo 3 y el algoritmo 4 proporcionan el algoritmo para calcular el límite superior para el niño J del Agente I, utilizando las ecuaciones descriptadas anteriormente. Mientras que el algoritmo 4 calcula el límite superior en un enlace dado el estado inicial, el algoritmo 3 suma los valores de límite superior calculados sobre cada uno de los enlaces en Ei− ∪ Ei+.4.3 Algoritmo de abstracción 5 Spider-ABS (I, πi−, umbral) 1: πi+, ∗ ← NULL 2: πi ← Get-Polyies (<>, 1) 3: if is-lef (i) luego 4: para todos πi∈ πi do 5: absheuristic ← get-abs heuristic (πi, πi−) 6: absheuristic ∗ ← (tiempo de tiempo-πi.horizon) 7: if πi.horizon = timehorizon y πi.absnodes = 0 luego 8: v [πi, πi−] ← Conjunta-Reward (πi, πi−) 9: si v [πi, πi−]> umbral luego 10: πi+, ∗ ← πi;Umbral ← V [πi, πi−] 11: de lo contrario si v [πi, πi−] + absheuristic> umbral luego 12: ˆπi ← extend-policy (πi, πi.absnodes + 1) 13: πi + ← insortado- de inserción--Políticas (ˆπi) 14: Eliminar (πi) 15: else 16: Niños ← Niños (i) 17: πi ← Sorteo superior (i, πi, πi−) 18: para todos πi ∈ πi do 19: ˜πi+← πi 20: absheuristic ← get-abs heuristic (πi, πi−) 21: absheuristic ∗ ← (tiempohorizon-πi.horizon) 22: if πi.horizon = timeHorizon y πi.absnodes = 0 luego 23: if ˆv [πi, πi−] <umbral y πi.absnodes = 0 luego 24: vaya a la línea 19 25: Para todos los niños j ∈ Do 26: jthres ← umbral - v [πi, πi -] - σk∈Children, k = j ˆvk [πi, πi−] 27: πj+, ∗ ← Spider (j, πi πi−, jthres) 28: ˜πi+ ← ˜πi+ πj+, ∗;ˆVj [πi, πi−] ← V [πj+, ∗, πi πi−] 29: si v [πi+, πi−]> umbral luego 30: umbral ← v [πi+, πi−];πi +, ∗ ← ˜πi + 31: de lo contrario si ˆv [πi +, πi−] + absheuristic> umbral luego 32: ˆπi ← extend-policy (πi, πi.absnodes + 1) 33: πi + ← insertados con policias (ˆπi) 34: eliminar (πi) 35: return πi+, ∗ en araña, la fase de exploración/poda solo puede comenzar después de que el cálculo heurístico (o límite superior) y la clasificación de las políticas hayan terminado. Proporcionamos un enfoque para posiblemente eludir la exploración de un grupo de políticas basadas en el cálculo heurístico para una política abstracta, lo que lleva a una mejora en el rendimiento del tiempo de ejecución (sin pérdidas en calidad de solución). Los pasos importantes en esta técnica son definir la política abstracta y cómo se calculan los valores heurísticos para las políticas abstractas. En este artículo, proponemos dos tipos de abstracción: 1. Abstracción basada en horizonte (HBA): aquí, la política abstracta se define como una política de horizonte más corta. Representa un grupo de políticas de horizonte más largas que tienen las mismas acciones que la política abstracta para tiempos menores o iguales al horizonte de la política abstracta. En la Figura 3 (a), una política abstracta T = 1 que realiza la acción del este, representa un grupo de políticas T = 2, que funcionan este en el primer paso. Para HBA, hay dos partes para el cálculo heurístico: (a) calcular el límite superior para el horizonte de la política abstracta. Esto es lo mismo que el cálculo heurístico definido por el algoritmo getheuristic () para la araña, sin embargo, con un horizonte de tiempo más corto (horizonte de la política abstracta).(b) Calcular la recompensa máxima posible que se puede acumular en un paso de tiempo (usando get-abs-heuristic ()) y multiplicándola por el número de pasos de tiempo al horizonte temporal. Esta recompensa máxima posible (por un paso de tiempo) se obtiene iterando a través de todas las acciones de todos los agentes en el árbol (i) y calculando la recompensa articular máxima para cualquier acción articular. La suma de (a) y (b) es el valor heurístico para una política abstracta de HBA.2. Abstracción basada en nodos (NBA): aquí se obtiene una política abstracta al no asociar acciones a ciertos nodos del árbol de políticas. A diferencia de HBA, esto implica múltiples niveles de abstracción. Esto se ilustra en la Figura 3 (b), donde hay t = 2 políticas que no tienen una acción para la observación TP. Estas políticas t = 2 incompletas son abstracciones para t = 2 políticas completas. El aumento de los niveles de abstracción conduce a un cálculo más rápido de una política conjunta completa, πroot+ y también a un cálculo y exploración heurística más cortos, fases de poda. Para la NBA, el cálculo heurístico es similar al de una política normal, excepto en los casos en que no hay acción asociada con los nodos de política. En tales casos, la recompensa inmediata se toma como RMAX (recompensa máxima para cualquier acción). Combinamos ambas técnicas de abstracción mencionadas anteriormente en una técnica, Spider-ABS. El algoritmo 5 proporciona el algoritmo para esta técnica de abstracción. Para calcular una política conjunta óptima con Spider-ABS, un agente no hojado que inicialmente examina todas las políticas abstractas T = 1 (línea 2) y las clasifica en función de los cálculos heurísticos de políticas abstractas (línea 17). El horizonte de abstracción aumenta gradualmente y estas políticas abstractas se exploran en el orden descendente de los valores heurísticos y los que tienen valores heurísticos menores que el umbral se podan (líneas 23-24). La exploración en Spider-ABS tiene la misma definición que en Spider si la política que se explora tiene un horizonte de cálculo de política que es igual al horizonte de tiempo real y si todos los nodos de la política tienen una acción asociada con ellos (líneas 25-30). Sin embargo, si no se cumplen esas condiciones, entonces es sustituido por un grupo de políticas que representa (usando la función extend-poliy ()) (líneas 31-32). La función Extend-Policy () también es responsable de inicializar el horizonte y los absnodes de una política.Absnodes representa el número de nodos en el último nivel en el árbol de políticas, que no tienen una acción asignada a ellos. Si πi.absnodes = | ωi | πi.horizon - 1 (es decir, el número total de nodos de política posibles en πi.horizon), entonces πi.absnodes se establece en cero y πi.horizon aumenta en 1. De lo contrario, πi.absnodes aumenta en 1. Por lo tanto, esta función combina HBA y NBA mediante el uso de las variables de política, horizonte y absnodes. Antes de sustituir la política abstracta con un grupo de políticas, esas políticas se clasifican en función de los valores heurísticos (línea 33). Se adopta un tipo similar de cálculo de mejor respuesta basado en abstracción en los agentes de la hoja (líneas 3-14).4.4 Aproximación de valor (VAX) En esta sección, presentamos una mejora aproximada a la araña llamada VAX. La entrada a esta técnica es un parámetro de aproximación, que determina la diferencia con la calidad de solución óptima. Este parámetro de aproximación se usa en cada agente para podar las políticas articulares. El mecanismo de poda en Spider and Spider-ABS dicta que una política conjunta se poda solo si el umbral es exactamente mayor que el valor heurístico. Sin embargo, el 826 el sexto intl. Conf.en agentes autónomos y sistemas de múltiples agentes (AAMAS 07) Figura 3: El ejemplo de abstracción para (a) HBA (abstracción basada en horizonte) y (b) idea de NBA (abstracción basada en nodos) en esta técnica es podar una política si una política siSe satisface la siguiente condición: umbral +> ˆv [πi, πi−]. Además de la condición de poda, Vax es lo mismo que Spider/Spider-ABS. En el ejemplo de la Figura 2, si el valor heurístico para la segunda política conjunta (o el segundo nodo del árbol de búsqueda) en el nivel 2 fue 238 en lugar de 232, entonces esa política no se podía podarse utilizando araña o araña-ABS. Sin embargo, en VAX con un parámetro de aproximación de 5, la política conjunta en consideración también se poda. Esto se debe a que el umbral (234) en esa coyuntura más el parámetro de aproximación (5), es decir, 239 habría sido mayor que el valor heurístico para esa política conjunta (238). Se puede observar en el ejemplo (solo discutido) que este tipo de poda puede conducir a menos exploraciones y, por lo tanto, conducir a una mejora en el rendimiento general del tiempo de ejecución. Sin embargo, esto puede implicar un sacrificio en la calidad de la solución porque esta técnica puede podar una solución óptima candidata. Un límite en el error introducido por este algoritmo aproximado en función de, se proporciona por la Proposición 3. 4.5 Accionamiento porcentual (PAX) En esta sección, presentamos la segunda mejora de la aproximación sobre la araña llamada PAX. La entrada a esta técnica es un parámetro, δ que representa el porcentaje mínimo de la calidad de solución óptima que se desea. La salida de esta técnica es una política con un valor esperado que es al menos δ% de la calidad de solución óptima. Se poda una política si se cumple la siguiente condición: umbral> Δ 100 ˆv [πi, πi−]. Al igual que en Vax, la única diferencia entre Pax y Spider/Spider-ABS es esta condición de poda. Nuevamente en la Figura 2, si el valor heurístico para el segundo nodo del árbol de búsqueda en el nivel 2 fuera 238 en lugar de 232, entonces pax con un parámetro de entrada del 98% podría podar ese nodo de árbol de búsqueda (desde 98 100 ∗ 238 <234). Este tipo de poda conduce a menos exploraciones y, por lo tanto, una mejora en el rendimiento del tiempo de ejecución, mientras que potencialmente conduce a una pérdida en la calidad de la solución. La Proposición 4 proporciona el límite de pérdida de calidad.4.6 Resultados teóricos Proposición 1. La heurística proporcionada por el uso de la heurística MDP centralizada es admisible. Prueba. Para que el valor proporcionado por la heurística sea admisible, debe ser una estimación excesiva del valor esperado para una política conjunta. Por lo tanto, debemos mostrar que: para l ∈ Ei+ ∪ ei−: ˆvt l ≥ vt l (consulte la notación en la sección 4.2) Usamos la inducción matemática en t para probar esto. Caso base: t = t - 1. Independientemente de si l ∈ Ei− o l ∈ Ei+, ˆrt L se calcula maximizando sobre todas las acciones de los agentes en el árbol (i), mientras que RT L se calcula para políticas fijas de los mismos agentes. Por lo tanto, ˆrt l ≥ rt l y también ˆvt l ≥ vt l. Asunción: la proposición es válida para t = η, donde 1 ≤ η <t - 1. Ahora tenemos que demostrar que la proposición es válida para t = η - 1. Mostramos la prueba de l ∈ Ei− y se puede adoptar un razonamiento similar para probar para l ∈ Ei+. La función de valor heurístico para l ∈ Ei− es proporcionada por la siguiente ecuación: ˆvη - 1 l = ˆrη - 1 l + max al2 Ω η l1, s η l ˆpη - 1 l1 ˆpη - 1 l2 pη - 1 u ˆvη l reescribirel rhs y usando eqn 2 (en la sección 4.2) = ˆrη - 1 l + max al2 Ω η l1, s η l pη - 1 u pη - 1 l1 ˆpη - 1 l2 ˆvη l = ˆrη - 1 l + Ω η l1,s η l pη - 1 u pη - 1 l1 max al2 ˆpη - 1 l2 ˆvη l ya que maxal2 ˆpη - 1 l2 ˆvη l ≥ ωl2 oη - 1 l2 ˆpη - 1 l2 ˆvη l y pη - 1 l2 = oη - 1 l2 ˆpηpη−1 l2 ≥ˆrη - 1 l + Ω η l1, s η l pη - 1 u pη - 1 l1 ωl2 pη - 1 l2 ˆvη l ya que ˆvη l ≥ vη l (desde el supuesto) ≥ˆrη - 1 l + Ω η η ηL1, S η l pη - 1 u pη - 1 l1 ωl2 pη - 1 l2 vη l ya que ˆrη - 1 l ≥ rη - 1 l (por definición) ≥rη - 1 l + Ω η l1, s η l pη - 1u pη - 1 l1 ωl2 pη - 1 l2 vη l = rη - 1 l + (Ω η l, s η l) pη - 1 u pη - 1 l1 pη - 1 l2 vη l = vη - 1 l así probado. Proposición 2. Spider proporciona una solución óptima. Prueba. Spider examina todas las políticas articulares posibles dada la estructura de interacción de los agentes. La única excepción es cuando una política conjunta se poda en función del valor heurístico. Por lo tanto, mientras no se poda una política óptima candidata, Spider devolverá una política óptima. Como se demuestra en la Propuesta 1, el valor esperado para una política conjunta es siempre un límite superior. Por lo tanto, cuando se poda una política conjunta, no puede ser una solución óptima. Proposición 3. Error ligado a la calidad de la solución para VAX (implementado sobre Spider-ABS) con un parámetro de aproximación de IS ρ, donde ρ es el número de nodos de hoja en el árbol DFS. El sexto intl. Conf.en agentes autónomos y sistemas de múltiples agentes (AAMAS 07) 827 Prueba. Probamos esta proposición utilizando la inducción matemática en la profundidad del árbol DFS. Caso base: profundidad = 1 (es decir, un nodo). La mejor respuesta se calcula iterando a través de todas las políticas, πk. Una política, πk se poda si ˆv [πk, πk−] <umbral +. Por lo tanto, la mejor política de respuesta calculada por VAX sería como máximo lejos de la mejor respuesta óptima. Por lo tanto, la proposición es válida para el caso base. Asunción: la proposición se cumple para D, donde 1 ≤ profundidad ≤ d.Ahora tenemos que demostrar que la propuesta es dada para D + 1. Sin pérdida de generalidad, supongamos que el nodo raíz de este árbol tiene k hijos. Cada uno de estos niños es de profundidad ≤ d, y por lo tanto, desde la suposición, el error introducido en el niño kth es ρk, donde ρk es el número de nodos de hoja en el niño de la raíz. Por lo tanto, ρ = k ρk, donde ρ es el número de nodos de hoja en el árbol. En Spider-ABS, umbral en el agente de la raíz, ThressPider = K V [πk+, πk−]. Sin embargo, con Vax, el umbral en el agente de la raíz será (en el peor de los casos), ThreshVax = K V [πk+, πk−] - k ρk. Por lo tanto, con Vax, una política conjunta se poda en el agente raíz si ˆV [πroot, πroot−] <Threshvax + ⇒ ˆV [πroot, πroot−] <Threshspider - ((k ρk) - 1) ≤ ThreshSpider - (K ρk)≤ Threshspider - ρ. Por lo tanto probado. Proposición 4. Para Pax (implementado sobre Spider-ABS) con un parámetro de entrada de δ, la calidad de la solución es al menos Δ 100 V [πroot+, ∗], donde V [πroot+, ∗] denota la calidad de solución óptima. Prueba. Probamos esta proposición utilizando la inducción matemática en la profundidad del árbol DFS. Caso base: profundidad = 1 (es decir, un nodo). La mejor respuesta se calcula iterando a través de todas las políticas, πk. Una política, πk se poda si Δ 100 ˆV [πk, πk−] <umbral. Por lo tanto, la mejor política de respuesta calculada por PAX sería al menos Δ 100 veces la mejor respuesta óptima. Por lo tanto, la proposición es válida para el caso base. Asunción: la proposición se cumple para D, donde 1 ≤ profundidad ≤ d.Ahora tenemos que demostrar que la propuesta es dada para D + 1. Sin pérdida de generalidad, supongamos que el nodo raíz de este árbol tiene k hijos. Cada uno de estos niños es de profundidad ≤ d, y por lo tanto, por la suposición, la calidad de la solución en el niño kth es al menos Δ 100 V [πk+, ∗, πk−] para pax. Con Spider-ABS, una política conjunta se poda en el agente raíz si ˆV [πroot, πroot−] <k v [πk+, ∗, πk−]. Sin embargo, con Pax, se poda una política conjunta si Δ 100 ˆV [πroot, πroot−] <k Δ 100 V [πk+, ∗, πk−] ⇒ ˆv [πroot, πroot−] <k v [πk+, ∗, πk−]]. Dado que la condición de poda en el agente de la raíz en PAX es la misma que la de Spider-ABS, no se introduce ningún error en el agente de la raíz y todo el error se introduce en los niños. Por lo tanto, la calidad general de la solución es al menos δ 100 de la solución óptima. Por lo tanto probado.5. Resultados experimentales Todos nuestros experimentos se realizaron en el dominio de la red de sensores de la Sección 2. Las cinco configuraciones de red empleadas se muestran en la Figura 4. Los algoritmos con los que experimentamos son Goa, Spider, Spider-ABS, Pax y Vax. Comparamos contra Goa porque es el único algoritmo óptimo global que considera a más de dos agentes. Realizamos dos conjuntos de experimentos: (i) En primer lugar, comparamos el rendimiento del tiempo de ejecución de los algoritmos anteriores y (ii) en segundo lugar, experimentamos con Pax y Vax para estudiar la compensación entre el tiempo de ejecución y la calidad de la solución. Los experimentos se terminaron después de 10000 segundos1. La Figura 5 (a) proporciona comparaciones en tiempo de ejecución entre los algoritmos óptimos Goa, la araña, la araña ABS y los algoritmos aproximados, Pax (de 30) y Vax (δ de 80). El eje X denota las especificaciones de la máquina 1 para todos los experimentos: procesador Intel Xeon 3.6 GHz, configuración de red del sensor de 2 GB de RAM utilizada, mientras que el eje Y indica el tiempo de ejecución (en una escala de registro). El horizonte temporal del cálculo de políticas fue 3. Para cada configuración (3 cadena, 4 cadena, 4 estrellas y 5 estrellas), hay cinco barras que indican el tiempo que lleva Goa, Spider, Spiderabs, Pax y Vax. Goa no terminó dentro del límite de tiempo para configuraciones de 4 estrellas y 5 estrellas. Spider-ABS dominaron el Spider y Goa para todas las configuraciones. Por ejemplo, en la configuración de 3 cadenas, Spider-ABS proporciona aceleración de 230 veces sobre Goa y 2 veces acelera sobre Spider y para la configuración de 4 cadenas proporciona aceleración de 58 veces sobre GOA y aceleración de 2 veces sobre Spider. Los dos enfoques de aproximación, VAX y PAX proporcionaron una mejora adicional en el rendimiento sobre las arañas ABS. Por ejemplo, en la configuración de 5 estrellas, VAX proporciona una aceleración de 15 veces y PAX proporciona una aceleración de 8 veces sobre Spider-ABS. Las Figuras 5 (b) proporcionan una comparación de la calidad de la solución obtenida utilizando los diferentes algoritmos para los problemas probados en la Figura 5 (a). El eje X denota la configuración de la red del sensor, mientras que el eje Y indica la calidad de la solución. Dado que Goa, Spider y Spider-ABS son algoritmos óptimos globales, la calidad de la solución es la misma para todos esos algoritmos. Para la configuración 5-P, los algoritmos óptimos globales no terminaron dentro del límite de 10000 segundos, por lo que la barra para una calidad óptima indica un límite superior en la calidad de solución óptima. Con ambas aproximaciones, obtuvimos una calidad de solución que estaba cerca de la calidad de solución óptima. En las configuraciones de 3 y 4 estrellas, es notable que tanto Pax como Vax obtuvieron casi la misma calidad real que los algoritmos óptimos globales, a pesar del parámetro de aproximación y δ. Para otras configuraciones también, la pérdida de calidad fue inferior al 20% de la calidad de solución óptima. La Figura 5 (c) proporciona el tiempo de solución con PAX (para diferentes epsilones). El eje X denota el parámetro de aproximación, δ (porcentaje a óptimo) utilizado, mientras que el eje Y denota el tiempo necesario para calcular la solución (en una escala logarítmica). El horizonte del tiempo para todas las configuraciones fue 4. A medida que δ disminuyó de 70 a 30, el tiempo de la solución disminuyó drásticamente. Por ejemplo, en el caso de 3 cadenas hubo una aceleración total de 170 veces cuando el δ se cambió de 70 a 30. Curiosamente, incluso con un bajo δ del 30%, la calidad de la solución real se mantuvo igual a la obtenida al 70%. La Figura 5 (d) proporciona el tiempo de solución para todas las configuraciones con VAX (para diferentes epsilons). El eje X denota el parámetro de aproximación, utilizado, mientras que el eje Y denota el tiempo necesario para calcular la solución (en una escala logarítmica). El horizonte del tiempo para todas las configuraciones fue 4. A medida que aumentó, el tiempo de solución disminuyó drásticamente. Por ejemplo, en el caso de 4 estrellas hubo una aceleración total de 73 veces cuando se cambió de 60 a 140. Una vez más, la calidad de la solución real no cambió con la variable Epsilon. Figura 4: Configuraciones de red de sensores 828 El sexto intl. Conf.en agentes autónomos y sistemas de múltiples agentes (AAMAS 07) Figura 5: Comparación de Goa, Spider, Spider-ABS y Vax para T = 3 en (a) tiempo de ejecución y (b) calidad de solución;(c) Tiempo de solución para PAX con un porcentaje variable a óptimo para T = 4 (d) Tiempo hasta solución para VAX con Epsilon variable para t = 4 6. Resumen y trabajo relacionado Este documento presenta cuatro algoritmos Spider, Spider-ABS, Pax y Vax que proporcionan una nueva combinación de características para la búsqueda de políticas en POMDP distribuidos: (i) Estructura de interacción de agentes explotando dada una red de agentes (es decir, una escala más fácil de escalaa mayor número de agentes);(ii) usar la búsqueda de rama y unión con una función heurística basada en MDP;(iii) utilizar la abstracción para mejorar el rendimiento del tiempo de ejecución sin sacrificar la calidad de la solución;(iv) proporcionar límites de porcentaje a priori en la calidad de las soluciones con PAX;y (v) proporcionar límites de valor esperados en la calidad de las soluciones utilizando VAX. Estas características permiten la compensación sistemática de la calidad de la solución para el tiempo de ejecución en redes de agentes que operan bajo incertidumbre. Los resultados experimentales muestran órdenes de mejora de magnitud en el rendimiento sobre los algoritmos óptimos globales anteriores. Los investigadores generalmente han empleado dos tipos de técnicas para resolver POMDP distribuidos. El primer conjunto de técnicas calcula soluciones óptimas globales. Hansen et al.[5] Presente un algoritmo basado en la programación dinámica y la eliminación iterada de las políticas dominantes, que proporciona soluciones óptimas para POMDP distribuidos. Szer et al.[13] Proporcionar un método de búsqueda heurística óptimo para resolver POMDP descentralizados. Este algoritmo se basa en la combinación de un algoritmo de búsqueda heurística clásica, una teoría de control ∗ y descentralizada. Las diferencias clave entre Spider y MAA* son: (a) Las mejoras de Spider (VAX y PAX) proporcionan aproximaciones garantizadas de calidad, mientras que MaA* es un algoritmo óptimo global y, por lo tanto, implica una complejidad computacional significativa;(b) Debido a la incapacidad de Maa*para explotar la estructura de interacción, se ilustra solo con dos agentes. Sin embargo, Spider ha sido ilustrado para redes de agentes;y (c) Spider explora la política conjunta Un agente a la vez, mientras que Maa* lo expande un paso de vez en cuando (simultáneamente para todos los agentes). El segundo conjunto de técnicas busca políticas aproximadas. Emerymontemerlo et al.[4] Aproximadamente los POSG como una serie de juegos bayesianos de un solo paso que usan heurísticas para aproximar el valor futuro, intercambiando un aspecto limitado para la eficiencia computacional, lo que resulta en políticas localmente óptimas (con respecto a la heurística seleccionada). Nair et al.[9] El algoritmo S JESP utiliza una programación dinámica para alcanzar una solución óptima local para POMDPS descentralizados de horizonte finito. Peshkin et al.[11] y Bernstein et al.[2] son ejemplos de técnicas de búsqueda de políticas que buscan políticas localmente óptimas. Aunque todas las técnicas anteriores mejoran considerablemente la eficiencia del cálculo de políticas, no pueden proporcionar límites de error en la calidad de la solución. Este aspecto de los límites de calidad diferencia la araña de todas las técnicas anteriores. Agradecimientos. Este material se basa en un trabajo respaldado por la Agencia de Proyectos de Investigación Avanzada de Defensa (DARPA), a través del Departamento del Interior, NBC, División de Servicios de Adquisición bajo el No. NBCHD030010. Las opiniones y conclusiones contenidas en este documento son las de los autores, y no deben interpretarse como que representen las políticas oficiales, ya sea expresadas o implícitas, de la Agencia de Proyectos de Investigación Avanzada de Defensa o el Gobierno de los Estados Unidos.7. Referencias [1] R. Becker, S. Zilberstein, V. Lesser y C.V.Goldman. Resolución de procesos de decisión de Markov descentralizados independientes de transición. Jair, 22: 423-455, 2004. [2] D. S. Bernstein, E.A. Hansen y S. Zilberstein. Iteración de política limitada para POMDP descentralizados. En Ijcai, 2005. [3] D. S. Bernstein, S. Zilberstein y N. Inmerman. La complejidad del control descentralizado de los MDP. En UAI, 2000. [4] R. Emery-Montemerlo, G. Gordon, J. Schneider y S. Thrun. Soluciones aproximadas para juegos estocásticos parcialmente observables con pagos comunes. En Aamas, 2004. [5] E. Hansen, D. Bernstein y S. Zilberstein. Programación dinámica para juegos estocásticos parcialmente observables. En AAAI, 2004. [6] V. Lesser, C. Ortiz y M. Tambe. Redes del sensor distribuido: una perspectiva multiagente. Kluwer, 2003. [7] R. Maheswaran, M. Tambe, E. Bowring, J. Pearce y P. Varakantham. Tomando DCOP al mundo real: soluciones completas eficientes para la programación de eventos distribuidos. En Aamas, 2004. [8] P. J. Modi, W. Shen, M. Tambe y M. Yokoo. Un método completo asincrónico para la optimización de restricciones distribuidas. En Aamas, 2003. [9] R. Nair, D. Pynadath, M. Yokoo, M. Tambe y S. Marsella. Taming POMDP descentralizado: hacia un cálculo de políticas eficiente para configuraciones multiagentes. En Ijcai, 2003. [10] R. Nair, P. Varakantham, M. Tambe y M. Yokoo. POMDP distribuidos en red: una síntesis de optimización de restricciones distribuidas y POMDPS. En AAAI, 2005. [11] L. Peshkin, N. Meuleau, K.-E.Kim y L. Kaelbling. Aprender a cooperar a través de la búsqueda de políticas. En UAI, 2000. [12] A. Petcu y B. Faltings. Un método escalable para la optimización de restricciones multiagente. En Ijcai, 2005. [13] D. Szer, F. Charpillet y S. Zilberstein. MAA*: Un algoritmo de búsqueda heurística para resolver POMDPS descentralizados. En Ijcai, 2005. El sexto intl. Conf.en agentes autónomos y sistemas de múltiples agentes (AAMAS 07) 829",
    "original_sentences": [
        "Letting loose a SPIDER on a network of POMDPs: Generating quality guaranteed policies Pradeep Varakantham, Janusz Marecki, Yuichi Yabu∗ , Milind Tambe, Makoto Yokoo∗ University of Southern California, Los Angeles, CA 90089, {varakant, marecki, tambe}@usc.edu ∗ Dept.",
        "of Intelligent Systems, Kyushu University, Fukuoka, 812-8581 Japan, yokoo@is.kyushu-u.ac.jp ABSTRACT Distributed Partially Observable Markov Decision Problems (Distributed POMDPs) are a popular approach for modeling multi-agent systems acting in uncertain domains.",
        "Given the significant complexity of solving distributed POMDPs, particularly as we scale up the numbers of agents, one popular approach has focused on approximate solutions.",
        "Though this approach is efficient, the algorithms within this approach do not provide any guarantees on solution quality.",
        "A second less popular approach focuses on global optimality, but typical results are available only for two agents, and also at considerable computational cost.",
        "This paper overcomes the limitations of both these approaches by providing SPIDER, a novel combination of three key features for policy generation in distributed POMDPs: (i) it exploits agent interaction structure given a network of agents (i.e. allowing easier scale-up to larger number of agents); (ii) it uses a combination of heuristics to speedup policy search; and (iii) it allows quality guaranteed approximations, allowing a systematic tradeoff of solution quality for time.",
        "Experimental results show orders of magnitude improvement in performance when compared with previous global optimal algorithms.",
        "Categories and Subject Descriptors I.2.11 [Artificial Intelligence]: Distributed Artificial IntelligenceMulti-agent Systems General Terms Algorithms, Theory 1.",
        "INTRODUCTION Distributed Partially Observable Markov Decision Problems (Distributed POMDPs) are emerging as a popular approach for modeling sequential decision making in teams operating under uncertainty [9, 4, 1, 2, 13].",
        "The uncertainty arises on account of nondeterminism in the outcomes of actions and because the world state may only be partially (or incorrectly) observable.",
        "Unfortunately, as shown by Bernstein et al. [3], the problem of finding the optimal joint policy for general distributed POMDPs is NEXP-Complete.",
        "Researchers have attempted two different types of approaches towards solving these models.",
        "The first category consists of highly efficient approximate techniques, that may not reach globally optimal solutions [2, 9, 11].",
        "The key problem with these techniques has been their inability to provide any guarantees on the quality of the solution.",
        "In contrast, the second less popular category of approaches has focused on a global optimal result [13, 5, 10].",
        "Though these approaches obtain optimal solutions, they typically consider only two agents.",
        "Furthermore, they fail to exploit structure in the interactions of the agents and hence are severely hampered with respect to scalability when considering more than two agents.",
        "To address these problems with the existing approaches, we propose approximate techniques that provide guarantees on the quality of the solution while focussing on a network of more than two agents.",
        "We first propose the basic SPIDER (Search for Policies In Distributed EnviRonments) algorithm.",
        "There are two key novel features in SPIDER: (i) it is a branch and bound heuristic search technique that uses a MDP-based heuristic function to search for an optimal joint policy; (ii) it exploits network structure of agents by organizing agents into a Depth First Search (DFS) pseudo tree and takes advantage of the independence in the different branches of the DFS tree.",
        "We then provide three enhancements to improve the efficiency of the basic SPIDER algorithm while providing guarantees on the quality of the solution.",
        "The first enhancement uses abstractions for speedup, but does not sacrifice solution quality.",
        "In particular, it initially performs branch and bound search on abstract policies and then extends to complete policies.",
        "The second enhancement obtains speedups by sacrificing solution quality, but within an input parameter that provides the tolerable expected value difference from the optimal solution.",
        "The third enhancement is again based on bounding the search for efficiency, however with a tolerance parameter that is provided as a percentage of optimal.",
        "We experimented with the sensor network domain presented in Nair et al. [10], a domain representative of an important class of problems with networks of agents working in uncertain environments.",
        "In our experiments, we illustrate that SPIDER dominates an existing global optimal approach called GOA [10], the only known global optimal algorithm with demonstrated experimental results for more than two agents.",
        "Furthermore, we demonstrate that abstraction improves the performance of SPIDER significantly (while providing optimal solutions).",
        "We finally demonstrate a key feature of SPIDER: by utilizing the approximation enhancements it enables principled tradeoffs in run-time versus solution quality. 822 978-81-904262-7-5 (RPS) c 2007 IFAAMAS 2.",
        "DOMAIN: DISTRIBUTED SENSOR NETS Distributed sensor networks are a large, important class of domains that motivate our work.",
        "This paper focuses on a set of target tracking problems that arise in certain types of sensor networks [6] first introduced in [10].",
        "Figure 1 shows a specific problem instance within this type consisting of three sensors.",
        "Here, each sensor node can scan in one of four directions: North, South, East or West (see Figure 1).",
        "To track a target and obtain associated reward, two sensors with overlapping scanning areas must coordinate by scanning the same area simultaneously.",
        "In Figure 1, to track a target in Loc11, sensor1 needs to scan East and sensor2 needs to scan West simultaneously.",
        "Thus, sensors have to act in a coordinated fashion.",
        "We assume that there are two independent targets and that each targets movement is uncertain and unaffected by the sensor agents.",
        "Based on the area it is scanning, each sensor receives observations that can have false positives and false negatives.",
        "The sensors observations and transitions are independent of each others actions e.g.the observations that sensor1 receives are independent of sensor2s actions.",
        "Each agent incurs a cost for scanning whether the target is present or not, but no cost if it turns off.",
        "Given the sensors observational uncertainty, the targets uncertain transitions and the distributed nature of the sensor nodes, these sensor nets provide a useful domains for applying distributed POMDP models.",
        "Figure 1: A 3-chain sensor configuration 3.",
        "BACKGROUND 3.1 Model: Network Distributed POMDP The ND-POMDP model was introduced in [10], motivated by domains such as the sensor networks introduced in Section 2.",
        "It is defined as the tuple S, A, P, Ω, O, R, b , where S = ×1≤i≤nSi × Su is the set of world states.",
        "Si refers to the set of local states of agent i and Su is the set of unaffectable states.",
        "Unaffectable state refers to that part of the world state that cannot be affected by the agents actions, e.g. environmental factors like target locations that no agent can control.",
        "A = ×1≤i≤nAi is the set of joint actions, where Ai is the set of action for agent i. ND-POMDP assumes transition independence, where the transition function is defined as P(s, a, s ) = Pu(su, su) · 1≤i≤n Pi(si, su, ai, si), where a = a1, . . . , an is the joint action performed in state s = s1, . . . , sn, su and s = s1, . . . , sn, su is the resulting state.",
        "Ω = ×1≤i≤nΩi is the set of joint observations where Ωi is the set of observations for agents i. Observational independence is assumed in ND-POMDPs i.e., the joint observation function is defined as O(s, a, ω) = 1≤i≤n Oi(si, su, ai, ωi), where s = s1, . . . , sn, su is the world state that results from the agents performing a = a1, . . . , an in the previous state, and ω = ω1, . . . , ωn ∈ Ω is the observation received in state s. This implies that each agents observation depends only on the unaffectable state, its local action and on its resulting local state.",
        "The reward function, R, is defined as R(s, a) = l Rl(sl1, . . . , slr, su, al1, . . . , alr ), where each l could refer to any sub-group of agents and r = |l|.",
        "Based on the reward function, an interaction hypergraph is constructed.",
        "A hyper-link, l, exists between a subset of agents for all Rl that comprise R. The interaction hypergraph is defined as G = (Ag, E), where the agents, Ag, are the vertices and E = {l|l ⊆ Ag ∧ Rl is a component of R} are the edges.",
        "The initial belief state (distribution over the initial state), b, is defined as b(s) = bu(su) · 1≤i≤n bi(si), where bu and bi refer to the distribution over initial unaffectable state and agent is initial belief state, respectively.",
        "The goal in ND-POMDP is to compute the joint policy π = π1, . . . , πn that maximizes teams expected reward over a finite horizon T starting from the belief state b.",
        "An ND-POMDP is similar to an n-ary Distributed Constraint Optimization Problem (DCOP)[8, 12] where the variable at each node represents the policy selected by an individual agent, πi with the domain of the variable being the set of all local policies, Πi.",
        "The reward component Rl where |l| = 1 can be thought of as a local constraint while the reward component Rl where l > 1 corresponds to a non-local constraint in the constraint graph. 3.2 Algorithm: Global Optimal Algorithm (GOA) In previous work, GOA has been defined as a global optimal algorithm for ND-POMDPs [10].",
        "We will use GOA in our experimental comparisons, since GOA is a state-of-the-art global optimal algorithm, and in fact the only one with experimental results available for networks of more than two agents.",
        "GOA borrows from a global optimal DCOP algorithm called DPOP[12].",
        "GOAs message passing follows that of DPOP.",
        "The first phase is the UTIL propagation, where the utility messages, in this case values of policies, are passed up from the leaves to the root.",
        "Value for a policy at an agent is defined as the sum of best response values from its children and the joint policy reward associated with the parent policy.",
        "Thus, given a policy for a parent node, GOA requires an agent to iterate through all its policies, finding the best response policy and returning the value to the parent - while at the parent node, to find the best policy, an agent requires its children to return their best responses to each of its policies.",
        "This UTIL propagation process is repeated at each level in the tree, until the root exhausts all its policies.",
        "In the second phase of VALUE propagation, where the optimal policies are passed down from the root till the leaves.",
        "GOA takes advantage of the local interactions in the interaction graph, by pruning out unnecessary joint policy evaluations (associated with nodes not connected directly in the tree).",
        "Since the interaction graph captures all the reward interactions among agents and as this algorithm iterates through all the relevant joint policy evaluations, this algorithm yields a globally optimal solution. 4.",
        "SPIDER As mentioned in Section 3.1, an ND-POMDP can be treated as a DCOP, where the goal is to compute a joint policy that maximizes the overall joint reward.",
        "The brute-force technique for computing an optimal policy would be to examine the expected values for all possible joint policies.",
        "The key idea in SPIDER is to avoid computation of expected values for the entire space of joint policies, by utilizing upper bounds on the expected values of policies and the interaction structure of the agents.",
        "Akin to some of the algorithms for DCOP [8, 12], SPIDER has a pre-processing step that constructs a DFS tree corresponding to the given interaction structure.",
        "Note that these DFS trees are pseudo trees [12] that allow links between ancestors and children.",
        "We employ the Maximum Constrained Node (MCN) heuristic used in the DCOP algorithm, ADOPT [8], however other heuristics (such as MLSP heuristic from [7]) can also be employed.",
        "MCN heuristic tries to place agents with more number of constraints at the top of the tree.",
        "This tree governs how the search for the optimal joint polThe Sixth Intl.",
        "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 823 icy proceeds in SPIDER.",
        "The algorithms presented in this paper are easily extendable to hyper-trees, however for expository purposes, we assume binary trees.",
        "SPIDER is an algorithm for centralized planning and distributed execution in distributed POMDPs.",
        "In this paper, we employ the following notation to denote policies and expected values: Ancestors(i) ⇒ agents from i to the root (not including i).",
        "Tree(i) ⇒ agents in the sub-tree (not including i) for which i is the root. πroot+ ⇒ joint policy of all agents. πi+ ⇒ joint policy of all agents in Tree(i) ∪ i. πi− ⇒ joint policy of agents that are in Ancestors(i). πi ⇒ policy of the ith agent. ˆv[πi, πi− ] ⇒ upper bound on the expected value for πi+ given πi and policies of ancestor agents i.e. πi− . ˆvj[πi, πi− ] ⇒ upper bound on the expected value for πi+ from the jth child. v[πi, πi− ] ⇒ expected value for πi given policies of ancestor agents, πi− . v[πi+ , πi− ] ⇒ expected value for πi+ given policies of ancestor agents, πi− . vj[πi+ , πi− ] ⇒ expected value for πi+ from the jth child.",
        "Figure 2: Execution of SPIDER, an example 4.1 Outline of SPIDER SPIDER is based on the idea of branch and bound search, where the nodes in the search tree represent partial/complete joint policies.",
        "Figure 2 shows an example search tree for the SPIDER algorithm, using an example of the three agent chain.",
        "Before SPIDER begins its search we create a DFS tree (i.e. pseudo tree) from the three agent chain, with the middle agent as the root of this tree.",
        "SPIDER exploits the structure of this DFS tree while engaging in its search.",
        "Note that in our example figure, each agent is assigned a policy with T=2.",
        "Thus, each rounded rectange (search tree node) indicates a partial/complete joint policy, a rectangle indicates an agent and the ovals internal to an agent show its policy.",
        "Heuristic or actual expected value for a joint policy is indicated in the top right corner of the rounded rectangle.",
        "If the number is italicized and underlined, it implies that the actual expected value of the joint policy is provided.",
        "SPIDER begins with no policy assigned to any of the agents (shown in the level 1 of the search tree).",
        "Level 2 of the search tree indicates that the joint policies are sorted based on upper bounds computed for root agents policies.",
        "Level 3 shows one SPIDER search node with a complete joint policy (a policy assigned to each of the agents).",
        "The expected value for this joint policy is used to prune out the nodes in level 2 (the ones with upper bounds < 234) When creating policies for each non-leaf agent i, SPIDER potentially performs two steps: 1.",
        "Obtaining upper bounds and sorting: In this step, agent i computes upper bounds on the expected values, ˆv[πi, πi− ] of the joint policies πi+ corresponding to each of its policy πi and fixed ancestor policies.",
        "An MDP based heuristic is used to compute these upper bounds on the expected values.",
        "Detailed description about this MDP heuristic is provided in Section 4.2.",
        "All policies of agent i, Πi are then sorted based on these upper bounds (also referred to as heuristic values henceforth) in descending order.",
        "Exploration of these policies (in step 2 below) are performed in this descending order.",
        "As indicated in the level 2 of the search tree (of Figure 2), all the joint policies are sorted based on the heuristic values, indicated in the top right corner of each joint policy.",
        "The intuition behind sorting and then exploring policies in descending order of upper bounds, is that the policies with higher upper bounds could yield joint policies with higher expected values. 2.",
        "Exploration and Pruning: Exploration implies computing the best response joint policy πi+,∗ corresponding to fixed ancestor policies of agent i, πi− .",
        "This is performed by iterating through all policies of agent i i.e.",
        "Πi and summing two quantities for each policy: (i) the best response for all of is children (obtained by performing steps 1 and 2 at each of the child nodes); (ii) the expected value obtained by i for fixed policies of ancestors.",
        "Thus, exploration of a policy πi yields actual expected value of a joint policy, πi+ represented as v[πi+ , πi− ].",
        "The policy with the highest expected value is the best response policy.",
        "Pruning refers to avoiding exploring all policies (or computing expected values) at agent i by using the current best expected value, vmax [πi+ , πi− ].",
        "Henceforth, this vmax [πi+ , πi− ] will be referred to as threshold.",
        "A policy, πi need not be explored if the upper bound for that policy, ˆv[πi, πi− ] is less than the threshold.",
        "This is because the expected value for the best joint policy attainable for that policy will be less than the threshold.",
        "On the other hand, when considering a leaf agent, SPIDER computes the best response policy (and consequently its expected value) corresponding to fixed policies of its ancestors, πi− .",
        "This is accomplished by computing expected values for each of the policies (corresponding to fixed policies of ancestors) and selecting the highest expected value policy.",
        "In Figure 2, SPIDER assigns best response policies to leaf agents at level 3.",
        "The policy for the left leaf agent is to perform action East at each time step in the policy, while the policy for the right leaf agent is to perform Off at each time step.",
        "These best response policies from the leaf agents yield an actual expected value of 234 for the complete joint policy.",
        "Algorithm 1 provides the pseudo code for SPIDER.",
        "This algorithm outputs the best joint policy, πi+,∗ (with an expected value greater than threshold) for the agents in Tree(i).",
        "Lines 3-8 compute the best response policy of a leaf agent i, while lines 9-23 computes the best response joint policy for agents in Tree(i).",
        "This best response computation for a non-leaf agent i includes: (a) Sorting of policies (in descending order) based on heuristic values on line 11; (b) Computing best response policies at each of the children for fixed policies of agent i in lines 16-20; and (c) Maintaining 824 The Sixth Intl.",
        "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Algorithm 1 SPIDER(i, πi− , threshold) 1: πi+,∗ ← null 2: Πi ← GET-ALL-POLICIES (horizon, Ai, Ωi) 3: if IS-LEAF(i) then 4: for all πi ∈ Πi do 5: v[πi, πi−] ← JOINT-REWARD (πi, πi−) 6: if v[πi, πi−] > threshold then 7: πi+,∗ ← πi 8: threshold ← v[πi, πi−] 9: else 10: children ← CHILDREN (i) 11: ˆΠi ← UPPER-BOUND-SORT(i, Πi, πi−) 12: for all πi ∈ ˆΠi do 13: ˜πi+ ← πi 14: if ˆv[πi, πi−] < threshold then 15: Go to line 12 16: for all j ∈ children do 17: jThres ← threshold − v[πi, πi−]− Σk∈children,k=j ˆvk[πi, πi−] 18: πj+,∗ ← SPIDER(j, πi πi−, jThres) 19: ˜πi+ ← ˜πi+ πj+,∗ 20: ˆvj[πi, πi−] ← v[πj+,∗, πi πi−] 21: if v[˜πi+, πi−] > threshold then 22: threshold ← v[˜πi+, πi−] 23: πi+,∗ ← ˜πi+ 24: return πi+,∗ Algorithm 2 UPPER-BOUND-SORT(i, Πi, πi− ) 1: children ← CHILDREN (i) 2: ˆΠi ← null /* Stores the sorted list */ 3: for all πi ∈ Πi do 4: ˆv[πi, πi−] ← JOINT-REWARD (πi, πi−) 5: for all j ∈ children do 6: ˆvj[πi, πi−] ← UPPER-BOUND(i, j, πi πi−) 7: ˆv[πi, πi−] + ← ˆvj[πi, πi−] 8: ˆΠi ← INSERT-INTO-SORTED (πi, ˆΠi) 9: return ˆΠi best expected value, joint policy in lines 21-23.",
        "Algorithm 2 provides the pseudo code for sorting policies based on the upper bounds on the expected values of joint policies.",
        "Expected value for an agent i consists of two parts: value obtained from ancestors and value obtained from its children.",
        "Line 4 computes the expected value obtained from ancestors of the agent (using JOINT-REWARD function), while lines 5-7 compute the heuristic value from the children.",
        "The sum of these two parts yields an upper bound on the expected value for agent i, and line 8 of the algorithm sorts the policies based on these upper bounds. 4.2 MDP based heuristic function The heuristic function quickly provides an upper bound on the expected value obtainable from the agents in Tree(i).",
        "The subtree of agents is a distributed POMDP in itself and the idea here is to construct a centralized MDP corresponding to the (sub-tree) distributed POMDP and obtain the expected value of the optimal policy for this centralized MDP.",
        "To reiterate this in terms of the agents in DFS tree interaction structure, we assume full observability for the agents in Tree(i) and for fixed policies of the agents in {Ancestors(i) ∪ i}, we compute the joint value ˆv[πi+ , πi− ] .",
        "We use the following notation for presenting the equations for computing upper bounds/heuristic values (for agents i and k): Let Ei− denote the set of links between agents in {Ancestors(i)∪ i} and Tree(i), Ei+ denote the set of links between agents in Tree(i).",
        "Also, if l ∈ Ei− , then l1 is the agent in {Ancestors(i)∪ i} and l2 is the agent in Tree(i), that l connects together.",
        "We first compact the standard notation: ot k =Ok(st+1 k , st+1 u , πk(ωt k), ωt+1 k ) (1) pt k =Pk(st k, st u, πk(ωt k), st+1 k ) · ot k pt u =P(st u, st+1 u ) st l = st l1 , st l2 , st u ; ωt l = ωt l1 , ωt l2 rt l =Rl(st l , πl1 (ωt l1 ), πl2 (ωt l2 )) vt l =V t πl (st l , st u, ωt l1 , ωt l2 ) Depending on the location of agent k in the agent tree we have the following cases: IF k ∈ {Ancestors(i) ∪ i}, ˆpt k = pt k, (2) IF k ∈ Tree(i), ˆpt k = Pk(st k, st u, πk(ωt k), st+1 k ) IF l ∈ Ei− , ˆrt l = max {al2 } Rl(st l , πl1 (ωt l1 ), al2 ) IF l ∈ Ei+ , ˆrt l = max {al1 ,al2 } Rl(st l , al1 , al2 ) The value function for an agent i executing the joint policy πi+ at time η − 1 is provided by the equation: V η−1 πi+ (sη−1 , ωη−1 ) = l∈Ei− vη−1 l + l∈Ei+ vη−1 l (3) where vη−1 l = rη−1 l + ω η l ,sη pη−1 l1 pη−1 l2 pη−1 u vη l Algorithm 3 UPPER-BOUND (i, j, πj− ) 1: val ← 0 2: for all l ∈ Ej− ∪ Ej+ do 3: if l ∈ Ej− then πl1 ← φ 4: for all s0 l do 5: val + ← startBel[s0 l ]· UPPER-BOUND-TIME (i, s0 l , j, πl1 , ) 6: return val Algorithm 4 UPPER-BOUND-TIME (i, st l , j, πl1 , ωt l1 ) 1: maxV al ← −∞ 2: for all al1 , al2 do 3: if l ∈ Ei− and l ∈ Ej− then al1 ← πl1 (ωt l1 ) 4: val ← GET-REWARD(st l , al1 , al2 ) 5: if t < πi.horizon − 1 then 6: for all st+1 l , ωt+1 l1 do 7: futV al←pt u ˆpt l1 ˆpt l2 8: futV al ∗ ← UPPER-BOUND-TIME(st+1 l , j, πl1 , ωt l1 ωt+1 l1 ) 9: val + ← futV al 10: if val > maxV al then maxV al ← val 11: return maxV al Upper bound on the expected value for a link is computed by modifying the equation 3 to reflect the full observability assumption.",
        "This involves removing the observational probability term for agents in Tree(i) and maximizing the future value ˆvη l over the actions of those agents (in Tree(i)).",
        "Thus, the equation for the The Sixth Intl.",
        "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 825 computation of the upper bound on a link l, is as follows: IF l ∈ Ei− , ˆvη−1 l =ˆrη−1 l + max al2 ω η l1 ,s η l ˆpη−1 l1 ˆpη−1 l2 pη−1 u ˆvη l IF l ∈ Ei+ , ˆvη−1 l =ˆrη−1 l + max al1 ,al2 s η l ˆpη−1 l1 ˆpη−1 l2 pη−1 u ˆvη l Algorithm 3 and Algorithm 4 provide the algorithm for computing upper bound for child j of agent i, using the equations descirbed above.",
        "While Algorithm 4 computes the upper bound on a link given the starting state, Algorithm 3 sums the upper bound values computed over each of the links in Ei− ∪ Ei+ . 4.3 Abstraction Algorithm 5 SPIDER-ABS(i, πi− , threshold) 1: πi+,∗ ← null 2: Πi ← GET-POLICIES (<>, 1) 3: if IS-LEAF(i) then 4: for all πi ∈ Πi do 5: absHeuristic ← GET-ABS-HEURISTIC (πi, πi−) 6: absHeuristic ∗ ← (timeHorizon − πi.horizon) 7: if πi.horizon = timeHorizon and πi.absNodes = 0 then 8: v[πi, πi−] ← JOINT-REWARD (πi, πi−) 9: if v[πi, πi−] > threshold then 10: πi+,∗ ← πi; threshold ← v[πi, πi−] 11: else if v[πi, πi−] + absHeuristic > threshold then 12: ˆΠi ← EXTEND-POLICY (πi, πi.absNodes + 1) 13: Πi + ← INSERT-SORTED-POLICIES ( ˆΠi) 14: REMOVE(πi) 15: else 16: children ← CHILDREN (i) 17: Πi ← UPPER-BOUND-SORT(i, Πi, πi−) 18: for all πi ∈ Πi do 19: ˜πi+ ← πi 20: absHeuristic ← GET-ABS-HEURISTIC (πi, πi−) 21: absHeuristic ∗ ← (timeHorizon − πi.horizon) 22: if πi.horizon = timeHorizon and πi.absNodes = 0 then 23: if ˆv[πi, πi−] < threshold and πi.absNodes = 0 then 24: Go to line 19 25: for all j ∈ children do 26: jThres ← threshold − v[πi, πi−]− Σk∈children,k=j ˆvk[πi, πi−] 27: πj+,∗ ← SPIDER(j, πi πi−, jThres) 28: ˜πi+ ← ˜πi+ πj+,∗; ˆvj[πi, πi−] ← v[πj+,∗, πi πi−] 29: if v[˜πi+, πi−] > threshold then 30: threshold ← v[˜πi+, πi−]; πi+,∗ ← ˜πi+ 31: else if ˆv[πi+, πi−] + absHeuristic > threshold then 32: ˆΠi ← EXTEND-POLICY (πi, πi.absNodes + 1) 33: Πi + ← INSERT-SORTED-POLICIES (ˆΠi) 34: REMOVE(πi) 35: return πi+,∗ In SPIDER, the exploration/pruning phase can only begin after the heuristic (or upper bound) computation and sorting for the policies has ended.",
        "We provide an approach to possibly circumvent the exploration of a group of policies based on heuristic computation for one abstract policy, thus leading to an improvement in runtime performance (without loss in solution quality).",
        "The important steps in this technique are defining the abstract policy and how heuristic values are computated for the abstract policies.",
        "In this paper, we propose two types of abstraction: 1.",
        "Horizon Based Abstraction (HBA): Here, the abstract policy is defined as a shorter horizon policy.",
        "It represents a group of longer horizon policies that have the same actions as the abstract policy for times less than or equal to the horizon of the abstract policy.",
        "In Figure 3(a), a T=1 abstract policy that performs East action, represents a group of T=2 policies, that perform East in the first time step.",
        "For HBA, there are two parts to heuristic computation: (a) Computing the upper bound for the horizon of the abstract policy.",
        "This is same as the heuristic computation defined by the GETHEURISTIC() algorithm for SPIDER, however with a shorter time horizon (horizon of the abstract policy). (b) Computing the maximum possible reward that can be accumulated in one time step (using GET-ABS-HEURISTIC()) and multiplying it by the number of time steps to time horizon.",
        "This maximum possible reward (for one time step) is obtained by iterating through all the actions of all the agents in Tree(i) and computing the maximum joint reward for any joint action.",
        "Sum of (a) and (b) is the heuristic value for a HBA abstract policy. 2.",
        "Node Based Abstraction (NBA): Here an abstract policy is obtained by not associating actions to certain nodes of the policy tree.",
        "Unlike in HBA, this implies multiple levels of abstraction.",
        "This is illustrated in Figure 3(b), where there are T=2 policies that do not have an action for observation TP.",
        "These incomplete T=2 policies are abstractions for T=2 complete policies.",
        "Increased levels of abstraction leads to faster computation of a complete joint policy, πroot+ and also to shorter heuristic computation and exploration, pruning phases.",
        "For NBA, the heuristic computation is similar to that of a normal policy, except in cases where there is no action associated with policy nodes.",
        "In such cases, the immediate reward is taken as Rmax (maximum reward for any action).",
        "We combine both the abstraction techniques mentioned above into one technique, SPIDER-ABS.",
        "Algorithm 5 provides the algorithm for this abstraction technique.",
        "For computing optimal joint policy with SPIDER-ABS, a non-leaf agent i initially examines all abstract T=1 policies (line 2) and sorts them based on abstract policy heuristic computations (line 17).",
        "The abstraction horizon is gradually increased and these abstract policies are then explored in descending order of heuristic values and ones that have heuristic values less than the threshold are pruned (lines 23-24).",
        "Exploration in SPIDER-ABS has the same definition as in SPIDER if the policy being explored has a horizon of policy computation which is equal to the actual time horizon and if all the nodes of the policy have an action associated with them (lines 25-30).",
        "However, if those conditions are not met, then it is substituted by a group of policies that it represents (using EXTEND-POLICY () function) (lines 31-32).",
        "EXTEND-POLICY() function is also responsible for initializing the horizon and absNodes of a policy. absNodes represents the number of nodes at the last level in the policy tree, that do not have an action assigned to them.",
        "If πi.absNodes = |Ωi|πi.horizon−1 (i.e. total number of policy nodes possible at πi.horizon) , then πi.absNodes is set to zero and πi.horizon is increased by 1.",
        "Otherwise, πi.absNodes is increased by 1.",
        "Thus, this function combines both HBA and NBA by using the policy variables, horizon and absNodes.",
        "Before substituting the abstract policy with a group of policies, those policies are sorted based on heuristic values (line 33).",
        "Similar type of abstraction based best response computation is adopted at leaf agents (lines 3-14). 4.4 Value ApproXimation (VAX) In this section, we present an approximate enhancement to SPIDER called VAX.",
        "The input to this technique is an approximation parameter , which determines the difference from the optimal solution quality.",
        "This approximation parameter is used at each agent for pruning out joint policies.",
        "The pruning mechanism in SPIDER and SPIDER-Abs dictates that a joint policy be pruned only if the threshold is exactly greater than the heuristic value.",
        "However, the 826 The Sixth Intl.",
        "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Figure 3: Example of abstraction for (a) HBA (Horizon Based Abstraction) and (b) NBA (Node Based Abstraction) idea in this technique is to prune out joint a policy if the following condition is satisfied: threshold + > ˆv[πi , πi− ].",
        "Apart from the pruning condition, VAX is the same as SPIDER/SPIDER-ABS.",
        "In the example of Figure 2, if the heuristic value for the second joint policy (or second search tree node) in level 2 were 238 instead of 232, then that policy could not be be pruned using SPIDER or SPIDER-Abs.",
        "However, in VAX with an approximation parameter of 5, the joint policy in consideration would also be pruned.",
        "This is because the threshold (234) at that juncture plus the approximation parameter (5), i.e. 239 would have been greater than the heuristic value for that joint policy (238).",
        "It can be noted from the example (just discussed) that this kind of pruning can lead to fewer explorations and hence lead to an improvement in the overall run-time performance.",
        "However, this can entail a sacrifice in the quality of the solution because this technique can prune out a candidate optimal solution.",
        "A bound on the error introduced by this approximate algorithm as a function of , is provided by Proposition 3. 4.5 Percentage ApproXimation (PAX) In this section, we present the second approximation enhancement over SPIDER called PAX.",
        "Input to this technique is a parameter, δ that represents the minimum percentage of the optimal solution quality that is desired.",
        "Output of this technique is a policy with an expected value that is at least δ% of the optimal solution quality.",
        "A policy is pruned if the following condition is satisfied: threshold > δ 100 ˆv[πi , πi− ].",
        "Like in VAX, the only difference between PAX and SPIDER/SPIDER-ABS is this pruning condition.",
        "Again in Figure 2, if the heuristic value for the second search tree node in level 2 were 238 instead of 232, then PAX with an input parameter of 98% would be able to prune that search tree node (since 98 100 ∗238 < 234).",
        "This type of pruning leads to fewer explorations and hence an improvement in run-time performance, while potentially leading to a loss in quality of the solution.",
        "Proposition 4 provides the bound on quality loss. 4.6 Theoretical Results PROPOSITION 1.",
        "Heuristic provided using the centralized MDP heuristic is admissible.",
        "Proof.",
        "For the value provided by the heuristic to be admissible, it should be an over estimate of the expected value for a joint policy.",
        "Thus, we need to show that: For l ∈ Ei+ ∪ Ei− : ˆvt l ≥ vt l (refer to notation in Section 4.2) We use mathematical induction on t to prove this.",
        "Base case: t = T − 1.",
        "Irrespective of whether l ∈ Ei− or l ∈ Ei+ , ˆrt l is computed by maximizing over all actions of the agents in Tree(i), while rt l is computed for fixed policies of the same agents.",
        "Hence, ˆrt l ≥ rt l and also ˆvt l ≥ vt l .",
        "Assumption: Proposition holds for t = η, where 1 ≤ η < T − 1.",
        "We now have to prove that the proposition holds for t = η − 1.",
        "We show the proof for l ∈ Ei− and similar reasoning can be adopted to prove for l ∈ Ei+ .",
        "The heuristic value function for l ∈ Ei− is provided by the following equation: ˆvη−1 l =ˆrη−1 l + max al2 ω η l1 ,s η l ˆpη−1 l1 ˆpη−1 l2 pη−1 u ˆvη l Rewriting the RHS and using Eqn 2 (in Section 4.2) =ˆrη−1 l + max al2 ω η l1 ,s η l pη−1 u pη−1 l1 ˆpη−1 l2 ˆvη l =ˆrη−1 l + ω η l1 ,s η l pη−1 u pη−1 l1 max al2 ˆpη−1 l2 ˆvη l Since maxal2 ˆpη−1 l2 ˆvη l ≥ ωl2 oη−1 l2 ˆpη−1 l2 ˆvη l and pη−1 l2 = oη−1 l2 ˆpη−1 l2 ≥ˆrη−1 l + ω η l1 ,s η l pη−1 u pη−1 l1 ωl2 pη−1 l2 ˆvη l Since ˆvη l ≥ vη l (from the assumption) ≥ˆrη−1 l + ω η l1 ,s η l pη−1 u pη−1 l1 ωl2 pη−1 l2 vη l Since ˆrη−1 l ≥ rη−1 l (by definition) ≥rη−1 l + ω η l1 ,s η l pη−1 u pη−1 l1 ωl2 pη−1 l2 vη l =rη−1 l + (ω η l ,s η l ) pη−1 u pη−1 l1 pη−1 l2 vη l = vη−1 l Thus proved.",
        "PROPOSITION 2.",
        "SPIDER provides an optimal solution.",
        "Proof.",
        "SPIDER examines all possible joint policies given the interaction structure of the agents.",
        "The only exception being when a joint policy is pruned based on the heuristic value.",
        "Thus, as long as a candidate optimal policy is not pruned, SPIDER will return an optimal policy.",
        "As proved in Proposition 1, the expected value for a joint policy is always an upper bound.",
        "Hence when a joint policy is pruned, it cannot be an optimal solution.",
        "PROPOSITION 3.",
        "Error bound on the solution quality for VAX (implemented over SPIDER-ABS) with an approximation parameter of is ρ , where ρ is the number of leaf nodes in the DFS tree.",
        "The Sixth Intl.",
        "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 827 Proof.",
        "We prove this proposition using mathematical induction on the depth of the DFS tree.",
        "Base case: depth = 1 (i.e. one node).",
        "Best response is computed by iterating through all policies, Πk.",
        "A policy,πk is pruned if ˆv[πk, πk− ] < threshold + .",
        "Thus the best response policy computed by VAX would be at most away from the optimal best response.",
        "Hence the proposition holds for the base case.",
        "Assumption: Proposition holds for d, where 1 ≤ depth ≤ d. We now have to prove that the proposition holds for d + 1.",
        "Without loss of generality, lets assume that the root node of this tree has k children.",
        "Each of this children is of depth ≤ d, and hence from the assumption, the error introduced in kth child is ρk , where ρk is the number of leaf nodes in kth child of the root.",
        "Therefore, ρ = k ρk, where ρ is the number of leaf nodes in the tree.",
        "In SPIDER-ABS, threshold at the root agent, thresspider = k v[πk+ , πk− ].",
        "However, with VAX the threshold at the root agent will be (in the worst case), threshvax = k v[πk+ , πk− ]− k ρk .",
        "Hence, with VAX a joint policy is pruned at the root agent if ˆv[πroot, πroot− ] < threshvax + ⇒ ˆv[πroot, πroot− ] < threshspider − (( k ρk) − 1) ≤ threshspider − ( k ρk) ≤ threshspider − ρ .",
        "Hence proved.",
        "PROPOSITION 4.",
        "For PAX (implemented over SPIDER-ABS) with an input parameter of δ, the solution quality is at least δ 100 v[πroot+,∗ ], where v[πroot+,∗ ] denotes the optimal solution quality.",
        "Proof.",
        "We prove this proposition using mathematical induction on the depth of the DFS tree.",
        "Base case: depth = 1 (i.e. one node).",
        "Best response is computed by iterating through all policies, Πk.",
        "A policy,πk is pruned if δ 100 ˆv[πk, πk− ] < threshold.",
        "Thus the best response policy computed by PAX would be at least δ 100 times the optimal best response.",
        "Hence the proposition holds for the base case.",
        "Assumption: Proposition holds for d, where 1 ≤ depth ≤ d. We now have to prove that the proposition holds for d + 1.",
        "Without loss of generality, lets assume that the root node of this tree has k children.",
        "Each of this children is of depth ≤ d, and hence from the assumption, the solution quality in the kth child is at least δ 100 v[πk+,∗ , πk− ] for PAX.",
        "With SPIDER-ABS, a joint policy is pruned at the root agent if ˆv[πroot, πroot− ] < k v[πk+,∗ , πk− ].",
        "However with PAX, a joint policy is pruned if δ 100 ˆv[πroot, πroot− ] < k δ 100 v[πk+,∗ , πk− ] ⇒ ˆv[πroot, πroot− ] < k v[πk+,∗ , πk− ].",
        "Since the pruning condition at the root agent in PAX is the same as the one in SPIDER-ABS, there is no error introduced at the root agent and all the error is introduced in the children.",
        "Thus, overall solution quality is at least δ 100 of the optimal solution.",
        "Hence proved. 5.",
        "EXPERIMENTAL RESULTS All our experiments were conducted on the sensor network domain from Section 2.",
        "The five network configurations employed are shown in Figure 4.",
        "Algorithms that we experimented with are GOA, SPIDER, SPIDER-ABS, PAX and VAX.",
        "We compare against GOA because it is the only global optimal algorithm that considers more than two agents.",
        "We performed two sets of experiments: (i) firstly, we compared the run-time performance of the above algorithms and (ii) secondly, we experimented with PAX and VAX to study the tradeoff between run-time and solution quality.",
        "Experiments were terminated after 10000 seconds1 .",
        "Figure 5(a) provides run-time comparisons between the optimal algorithms GOA, SPIDER, SPIDER-Abs and the approximate algorithms, PAX ( of 30) and VAX(δ of 80).",
        "X-axis denotes the 1 Machine specs for all experiments: Intel Xeon 3.6 GHZ processor, 2GB RAM sensor network configuration used, while Y-axis indicates the runtime (on a log-scale).",
        "The time horizon of policy computation was 3.",
        "For each configuration (3-chain, 4-chain, 4-star and 5-star), there are five bars indicating the time taken by GOA, SPIDER, SPIDERAbs, PAX and VAX.",
        "GOA did not terminate within the time limit for 4-star and 5-star configurations.",
        "SPIDER-Abs dominated the SPIDER and GOA for all the configurations.",
        "For instance, in the 3chain configuration, SPIDER-ABS provides 230-fold speedup over GOA and 2-fold speedup over SPIDER and for the 4-chain configuration it provides 58-fold speedup over GOA and 2-fold speedup over SPIDER.",
        "The two approximation approaches, VAX and PAX provided further improvement in performance over SPIDER-Abs.",
        "For instance, in the 5-star configuration VAX provides a 15-fold speedup and PAX provides a 8-fold speedup over SPIDER-Abs.",
        "Figures 5(b) provides a comparison of the solution quality obtained using the different algorithms for the problems tested in Figure 5(a).",
        "X-axis denotes the sensor network configuration while Y-axis indicates the solution quality.",
        "Since GOA, SPIDER, and SPIDER-Abs are all global optimal algorithms, the solution quality is the same for all those algorithms.",
        "For 5-P configuration, the global optimal algorithms did not terminate within the limit of 10000 seconds, so the bar for optimal quality indicates an upper bound on the optimal solution quality.",
        "With both the approximations, we obtained a solution quality that was close to the optimal solution quality.",
        "In 3-chain and 4-star configurations, it is remarkable that both PAX and VAX obtained almost the same actual quality as the global optimal algorithms, despite the approximation parameter and δ.",
        "For other configurations as well, the loss in quality was less than 20% of the optimal solution quality.",
        "Figure 5(c) provides the time to solution with PAX (for varying epsilons).",
        "X-axis denotes the approximation parameter, δ (percentage to optimal) used, while Y-axis denotes the time taken to compute the solution (on a log-scale).",
        "The time horizon for all the configurations was 4.",
        "As δ was decreased from 70 to 30, the time to solution decreased drastically.",
        "For instance, in the 3-chain case there was a total speedup of 170-fold when the δ was changed from 70 to 30.",
        "Interestingly, even with a low δ of 30%, the actual solution quality remained equal to the one obtained at 70%.",
        "Figure 5(d) provides the time to solution for all the configurations with VAX (for varying epsilons).",
        "X-axis denotes the approximation parameter, used, while Y-axis denotes the time taken to compute the solution (on a log-scale).",
        "The time horizon for all the configurations was 4.",
        "As was increased, the time to solution decreased drastically.",
        "For instance, in the 4-star case there was a total speedup of 73-fold when the was changed from 60 to 140.",
        "Again, the actual solution quality did not change with varying epsilon.",
        "Figure 4: Sensor network configurations 828 The Sixth Intl.",
        "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Figure 5: Comparison of GOA, SPIDER, SPIDER-Abs and VAX for T = 3 on (a) Runtime and (b) Solution quality; (c) Time to solution for PAX with varying percentage to optimal for T=4 (d) Time to solution for VAX with varying epsilon for T=4 6.",
        "SUMMARY AND RELATED WORK This paper presents four algorithms SPIDER, SPIDER-ABS, PAX and VAX that provide a novel combination of features for policy search in distributed POMDPs: (i) exploiting agent interaction structure given a network of agents (i.e. easier scale-up to larger number of agents); (ii) using branch and bound search with an MDP based heuristic function; (iii) utilizing abstraction to improve runtime performance without sacrificing solution quality; (iv) providing a priori percentage bounds on quality of solutions using PAX; and (v) providing expected value bounds on the quality of solutions using VAX.",
        "These features allow for systematic tradeoff of solution quality for run-time in networks of agents operating under uncertainty.",
        "Experimental results show orders of magnitude improvement in performance over previous global optimal algorithms.",
        "Researchers have typically employed two types of techniques for solving distributed POMDPs.",
        "The first set of techniques compute global optimal solutions.",
        "Hansen et al. [5] present an algorithm based on dynamic programming and iterated elimination of dominant policies, that provides optimal solutions for distributed POMDPs.",
        "Szer et al. [13] provide an optimal heuristic search method for solving Decentralized POMDPs.",
        "This algorithm is based on the combination of a classical heuristic search algorithm, A∗ and decentralized control theory.",
        "The key differences between SPIDER and MAA* are: (a) Enhancements to SPIDER (VAX and PAX) provide for quality guaranteed approximations, while MAA* is a global optimal algorithm and hence involves significant computational complexity; (b) Due to MAA*s inability to exploit interaction structure, it was illustrated only with two agents.",
        "However, SPIDER has been illustrated for networks of agents; and (c) SPIDER explores the joint policy one agent at a time, while MAA* expands it one time step at a time (simultaneously for all the agents).",
        "The second set of techniques seek approximate policies.",
        "EmeryMontemerlo et al. [4] approximate POSGs as a series of one-step Bayesian games using heuristics to approximate future value, trading off limited lookahead for computational efficiency, resulting in locally optimal policies (with respect to the selected heuristic).",
        "Nair et al. [9]s JESP algorithm uses dynamic programming to reach a local optimum solution for finite horizon decentralized POMDPs.",
        "Peshkin et al. [11] and Bernstein et al. [2] are examples of policy search techniques that search for locally optimal policies.",
        "Though all the above techniques improve the efficiency of policy computation considerably, they are unable to provide error bounds on the quality of the solution.",
        "This aspect of quality bounds differentiates SPIDER from all the above techniques.",
        "Acknowledgements.",
        "This material is based upon work supported by the Defense Advanced Research Projects Agency (DARPA), through the Department of the Interior, NBC, Acquisition Services Division under Contract No.",
        "NBCHD030010.",
        "The views and conclusions contained in this document are those of the authors, and should not be interpreted as representing the official policies, either expressed or implied, of the Defense Advanced Research Projects Agency or the U.S. Government. 7.",
        "REFERENCES [1] R. Becker, S. Zilberstein, V. Lesser, and C.V. Goldman.",
        "Solving transition independent decentralized Markov decision processes.",
        "JAIR, 22:423-455, 2004. [2] D. S. Bernstein, E.A.",
        "Hansen, and S. Zilberstein.",
        "Bounded policy iteration for decentralized POMDPs.",
        "In IJCAI, 2005. [3] D. S. Bernstein, S. Zilberstein, and N. Immerman.",
        "The complexity of decentralized control of MDPs.",
        "In UAI, 2000. [4] R. Emery-Montemerlo, G. Gordon, J. Schneider, and S. Thrun.",
        "Approximate solutions for partially observable stochastic games with common payoffs.",
        "In AAMAS, 2004. [5] E. Hansen, D. Bernstein, and S. Zilberstein.",
        "Dynamic programming for partially observable stochastic games.",
        "In AAAI, 2004. [6] V. Lesser, C. Ortiz, and M. Tambe.",
        "Distributed sensor nets: A multiagent perspective.",
        "Kluwer, 2003. [7] R. Maheswaran, M. Tambe, E. Bowring, J. Pearce, and P. Varakantham.",
        "Taking dcop to the real world : Efficient complete solutions for distributed event scheduling.",
        "In AAMAS, 2004. [8] P. J. Modi, W. Shen, M. Tambe, and M. Yokoo.",
        "An asynchronous complete method for distributed constraint optimization.",
        "In AAMAS, 2003. [9] R. Nair, D. Pynadath, M. Yokoo, M. Tambe, and S. Marsella.",
        "Taming decentralized POMDPs: Towards efficient policy computation for multiagent settings.",
        "In IJCAI, 2003. [10] R. Nair, P. Varakantham, M. Tambe, and M. Yokoo.",
        "Networked distributed POMDPs: A synthesis of distributed constraint optimization and POMDPs.",
        "In AAAI, 2005. [11] L. Peshkin, N. Meuleau, K.-E. Kim, and L. Kaelbling.",
        "Learning to cooperate via policy search.",
        "In UAI, 2000. [12] A. Petcu and B. Faltings.",
        "A scalable method for multiagent constraint optimization.",
        "In IJCAI, 2005. [13] D. Szer, F. Charpillet, and S. Zilberstein.",
        "MAA*: A heuristic search algorithm for solving decentralized POMDPs.",
        "In IJCAI, 2005.",
        "The Sixth Intl.",
        "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 829"
    ],
    "error_count": 0,
    "keys": {
        "network": {
            "translated_key": "",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Letting loose a SPIDER on a <br>network</br> of POMDPs: Generating quality guaranteed policies Pradeep Varakantham, Janusz Marecki, Yuichi Yabu∗ , Milind Tambe, Makoto Yokoo∗ University of Southern California, Los Angeles, CA 90089, {varakant, marecki, tambe}@usc.edu ∗ Dept.",
                "of Intelligent Systems, Kyushu University, Fukuoka, 812-8581 Japan, yokoo@is.kyushu-u.ac.jp ABSTRACT Distributed Partially Observable Markov Decision Problems (Distributed POMDPs) are a popular approach for modeling multi-agent systems acting in uncertain domains.",
                "Given the significant complexity of solving distributed POMDPs, particularly as we scale up the numbers of agents, one popular approach has focused on approximate solutions.",
                "Though this approach is efficient, the algorithms within this approach do not provide any guarantees on solution quality.",
                "A second less popular approach focuses on global optimality, but typical results are available only for two agents, and also at considerable computational cost.",
                "This paper overcomes the limitations of both these approaches by providing SPIDER, a novel combination of three key features for policy generation in distributed POMDPs: (i) it exploits agent interaction structure given a <br>network</br> of agents (i.e. allowing easier scale-up to larger number of agents); (ii) it uses a combination of heuristics to speedup policy search; and (iii) it allows quality guaranteed approximations, allowing a systematic tradeoff of solution quality for time.",
                "Experimental results show orders of magnitude improvement in performance when compared with previous global optimal algorithms.",
                "Categories and Subject Descriptors I.2.11 [Artificial Intelligence]: Distributed Artificial IntelligenceMulti-agent Systems General Terms Algorithms, Theory 1.",
                "INTRODUCTION Distributed Partially Observable Markov Decision Problems (Distributed POMDPs) are emerging as a popular approach for modeling sequential decision making in teams operating under uncertainty [9, 4, 1, 2, 13].",
                "The uncertainty arises on account of nondeterminism in the outcomes of actions and because the world state may only be partially (or incorrectly) observable.",
                "Unfortunately, as shown by Bernstein et al. [3], the problem of finding the optimal joint policy for general distributed POMDPs is NEXP-Complete.",
                "Researchers have attempted two different types of approaches towards solving these models.",
                "The first category consists of highly efficient approximate techniques, that may not reach globally optimal solutions [2, 9, 11].",
                "The key problem with these techniques has been their inability to provide any guarantees on the quality of the solution.",
                "In contrast, the second less popular category of approaches has focused on a global optimal result [13, 5, 10].",
                "Though these approaches obtain optimal solutions, they typically consider only two agents.",
                "Furthermore, they fail to exploit structure in the interactions of the agents and hence are severely hampered with respect to scalability when considering more than two agents.",
                "To address these problems with the existing approaches, we propose approximate techniques that provide guarantees on the quality of the solution while focussing on a <br>network</br> of more than two agents.",
                "We first propose the basic SPIDER (Search for Policies In Distributed EnviRonments) algorithm.",
                "There are two key novel features in SPIDER: (i) it is a branch and bound heuristic search technique that uses a MDP-based heuristic function to search for an optimal joint policy; (ii) it exploits <br>network</br> structure of agents by organizing agents into a Depth First Search (DFS) pseudo tree and takes advantage of the independence in the different branches of the DFS tree.",
                "We then provide three enhancements to improve the efficiency of the basic SPIDER algorithm while providing guarantees on the quality of the solution.",
                "The first enhancement uses abstractions for speedup, but does not sacrifice solution quality.",
                "In particular, it initially performs branch and bound search on abstract policies and then extends to complete policies.",
                "The second enhancement obtains speedups by sacrificing solution quality, but within an input parameter that provides the tolerable expected value difference from the optimal solution.",
                "The third enhancement is again based on bounding the search for efficiency, however with a tolerance parameter that is provided as a percentage of optimal.",
                "We experimented with the sensor <br>network</br> domain presented in Nair et al. [10], a domain representative of an important class of problems with networks of agents working in uncertain environments.",
                "In our experiments, we illustrate that SPIDER dominates an existing global optimal approach called GOA [10], the only known global optimal algorithm with demonstrated experimental results for more than two agents.",
                "Furthermore, we demonstrate that abstraction improves the performance of SPIDER significantly (while providing optimal solutions).",
                "We finally demonstrate a key feature of SPIDER: by utilizing the approximation enhancements it enables principled tradeoffs in run-time versus solution quality. 822 978-81-904262-7-5 (RPS) c 2007 IFAAMAS 2.",
                "DOMAIN: DISTRIBUTED SENSOR NETS Distributed sensor networks are a large, important class of domains that motivate our work.",
                "This paper focuses on a set of target tracking problems that arise in certain types of sensor networks [6] first introduced in [10].",
                "Figure 1 shows a specific problem instance within this type consisting of three sensors.",
                "Here, each sensor node can scan in one of four directions: North, South, East or West (see Figure 1).",
                "To track a target and obtain associated reward, two sensors with overlapping scanning areas must coordinate by scanning the same area simultaneously.",
                "In Figure 1, to track a target in Loc11, sensor1 needs to scan East and sensor2 needs to scan West simultaneously.",
                "Thus, sensors have to act in a coordinated fashion.",
                "We assume that there are two independent targets and that each targets movement is uncertain and unaffected by the sensor agents.",
                "Based on the area it is scanning, each sensor receives observations that can have false positives and false negatives.",
                "The sensors observations and transitions are independent of each others actions e.g.the observations that sensor1 receives are independent of sensor2s actions.",
                "Each agent incurs a cost for scanning whether the target is present or not, but no cost if it turns off.",
                "Given the sensors observational uncertainty, the targets uncertain transitions and the distributed nature of the sensor nodes, these sensor nets provide a useful domains for applying distributed POMDP models.",
                "Figure 1: A 3-chain sensor configuration 3.",
                "BACKGROUND 3.1 Model: <br>network</br> Distributed POMDP The ND-POMDP model was introduced in [10], motivated by domains such as the sensor networks introduced in Section 2.",
                "It is defined as the tuple S, A, P, Ω, O, R, b , where S = ×1≤i≤nSi × Su is the set of world states.",
                "Si refers to the set of local states of agent i and Su is the set of unaffectable states.",
                "Unaffectable state refers to that part of the world state that cannot be affected by the agents actions, e.g. environmental factors like target locations that no agent can control.",
                "A = ×1≤i≤nAi is the set of joint actions, where Ai is the set of action for agent i. ND-POMDP assumes transition independence, where the transition function is defined as P(s, a, s ) = Pu(su, su) · 1≤i≤n Pi(si, su, ai, si), where a = a1, . . . , an is the joint action performed in state s = s1, . . . , sn, su and s = s1, . . . , sn, su is the resulting state.",
                "Ω = ×1≤i≤nΩi is the set of joint observations where Ωi is the set of observations for agents i. Observational independence is assumed in ND-POMDPs i.e., the joint observation function is defined as O(s, a, ω) = 1≤i≤n Oi(si, su, ai, ωi), where s = s1, . . . , sn, su is the world state that results from the agents performing a = a1, . . . , an in the previous state, and ω = ω1, . . . , ωn ∈ Ω is the observation received in state s. This implies that each agents observation depends only on the unaffectable state, its local action and on its resulting local state.",
                "The reward function, R, is defined as R(s, a) = l Rl(sl1, . . . , slr, su, al1, . . . , alr ), where each l could refer to any sub-group of agents and r = |l|.",
                "Based on the reward function, an interaction hypergraph is constructed.",
                "A hyper-link, l, exists between a subset of agents for all Rl that comprise R. The interaction hypergraph is defined as G = (Ag, E), where the agents, Ag, are the vertices and E = {l|l ⊆ Ag ∧ Rl is a component of R} are the edges.",
                "The initial belief state (distribution over the initial state), b, is defined as b(s) = bu(su) · 1≤i≤n bi(si), where bu and bi refer to the distribution over initial unaffectable state and agent is initial belief state, respectively.",
                "The goal in ND-POMDP is to compute the joint policy π = π1, . . . , πn that maximizes teams expected reward over a finite horizon T starting from the belief state b.",
                "An ND-POMDP is similar to an n-ary Distributed Constraint Optimization Problem (DCOP)[8, 12] where the variable at each node represents the policy selected by an individual agent, πi with the domain of the variable being the set of all local policies, Πi.",
                "The reward component Rl where |l| = 1 can be thought of as a local constraint while the reward component Rl where l > 1 corresponds to a non-local constraint in the constraint graph. 3.2 Algorithm: Global Optimal Algorithm (GOA) In previous work, GOA has been defined as a global optimal algorithm for ND-POMDPs [10].",
                "We will use GOA in our experimental comparisons, since GOA is a state-of-the-art global optimal algorithm, and in fact the only one with experimental results available for networks of more than two agents.",
                "GOA borrows from a global optimal DCOP algorithm called DPOP[12].",
                "GOAs message passing follows that of DPOP.",
                "The first phase is the UTIL propagation, where the utility messages, in this case values of policies, are passed up from the leaves to the root.",
                "Value for a policy at an agent is defined as the sum of best response values from its children and the joint policy reward associated with the parent policy.",
                "Thus, given a policy for a parent node, GOA requires an agent to iterate through all its policies, finding the best response policy and returning the value to the parent - while at the parent node, to find the best policy, an agent requires its children to return their best responses to each of its policies.",
                "This UTIL propagation process is repeated at each level in the tree, until the root exhausts all its policies.",
                "In the second phase of VALUE propagation, where the optimal policies are passed down from the root till the leaves.",
                "GOA takes advantage of the local interactions in the interaction graph, by pruning out unnecessary joint policy evaluations (associated with nodes not connected directly in the tree).",
                "Since the interaction graph captures all the reward interactions among agents and as this algorithm iterates through all the relevant joint policy evaluations, this algorithm yields a globally optimal solution. 4.",
                "SPIDER As mentioned in Section 3.1, an ND-POMDP can be treated as a DCOP, where the goal is to compute a joint policy that maximizes the overall joint reward.",
                "The brute-force technique for computing an optimal policy would be to examine the expected values for all possible joint policies.",
                "The key idea in SPIDER is to avoid computation of expected values for the entire space of joint policies, by utilizing upper bounds on the expected values of policies and the interaction structure of the agents.",
                "Akin to some of the algorithms for DCOP [8, 12], SPIDER has a pre-processing step that constructs a DFS tree corresponding to the given interaction structure.",
                "Note that these DFS trees are pseudo trees [12] that allow links between ancestors and children.",
                "We employ the Maximum Constrained Node (MCN) heuristic used in the DCOP algorithm, ADOPT [8], however other heuristics (such as MLSP heuristic from [7]) can also be employed.",
                "MCN heuristic tries to place agents with more number of constraints at the top of the tree.",
                "This tree governs how the search for the optimal joint polThe Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 823 icy proceeds in SPIDER.",
                "The algorithms presented in this paper are easily extendable to hyper-trees, however for expository purposes, we assume binary trees.",
                "SPIDER is an algorithm for centralized planning and distributed execution in distributed POMDPs.",
                "In this paper, we employ the following notation to denote policies and expected values: Ancestors(i) ⇒ agents from i to the root (not including i).",
                "Tree(i) ⇒ agents in the sub-tree (not including i) for which i is the root. πroot+ ⇒ joint policy of all agents. πi+ ⇒ joint policy of all agents in Tree(i) ∪ i. πi− ⇒ joint policy of agents that are in Ancestors(i). πi ⇒ policy of the ith agent. ˆv[πi, πi− ] ⇒ upper bound on the expected value for πi+ given πi and policies of ancestor agents i.e. πi− . ˆvj[πi, πi− ] ⇒ upper bound on the expected value for πi+ from the jth child. v[πi, πi− ] ⇒ expected value for πi given policies of ancestor agents, πi− . v[πi+ , πi− ] ⇒ expected value for πi+ given policies of ancestor agents, πi− . vj[πi+ , πi− ] ⇒ expected value for πi+ from the jth child.",
                "Figure 2: Execution of SPIDER, an example 4.1 Outline of SPIDER SPIDER is based on the idea of branch and bound search, where the nodes in the search tree represent partial/complete joint policies.",
                "Figure 2 shows an example search tree for the SPIDER algorithm, using an example of the three agent chain.",
                "Before SPIDER begins its search we create a DFS tree (i.e. pseudo tree) from the three agent chain, with the middle agent as the root of this tree.",
                "SPIDER exploits the structure of this DFS tree while engaging in its search.",
                "Note that in our example figure, each agent is assigned a policy with T=2.",
                "Thus, each rounded rectange (search tree node) indicates a partial/complete joint policy, a rectangle indicates an agent and the ovals internal to an agent show its policy.",
                "Heuristic or actual expected value for a joint policy is indicated in the top right corner of the rounded rectangle.",
                "If the number is italicized and underlined, it implies that the actual expected value of the joint policy is provided.",
                "SPIDER begins with no policy assigned to any of the agents (shown in the level 1 of the search tree).",
                "Level 2 of the search tree indicates that the joint policies are sorted based on upper bounds computed for root agents policies.",
                "Level 3 shows one SPIDER search node with a complete joint policy (a policy assigned to each of the agents).",
                "The expected value for this joint policy is used to prune out the nodes in level 2 (the ones with upper bounds < 234) When creating policies for each non-leaf agent i, SPIDER potentially performs two steps: 1.",
                "Obtaining upper bounds and sorting: In this step, agent i computes upper bounds on the expected values, ˆv[πi, πi− ] of the joint policies πi+ corresponding to each of its policy πi and fixed ancestor policies.",
                "An MDP based heuristic is used to compute these upper bounds on the expected values.",
                "Detailed description about this MDP heuristic is provided in Section 4.2.",
                "All policies of agent i, Πi are then sorted based on these upper bounds (also referred to as heuristic values henceforth) in descending order.",
                "Exploration of these policies (in step 2 below) are performed in this descending order.",
                "As indicated in the level 2 of the search tree (of Figure 2), all the joint policies are sorted based on the heuristic values, indicated in the top right corner of each joint policy.",
                "The intuition behind sorting and then exploring policies in descending order of upper bounds, is that the policies with higher upper bounds could yield joint policies with higher expected values. 2.",
                "Exploration and Pruning: Exploration implies computing the best response joint policy πi+,∗ corresponding to fixed ancestor policies of agent i, πi− .",
                "This is performed by iterating through all policies of agent i i.e.",
                "Πi and summing two quantities for each policy: (i) the best response for all of is children (obtained by performing steps 1 and 2 at each of the child nodes); (ii) the expected value obtained by i for fixed policies of ancestors.",
                "Thus, exploration of a policy πi yields actual expected value of a joint policy, πi+ represented as v[πi+ , πi− ].",
                "The policy with the highest expected value is the best response policy.",
                "Pruning refers to avoiding exploring all policies (or computing expected values) at agent i by using the current best expected value, vmax [πi+ , πi− ].",
                "Henceforth, this vmax [πi+ , πi− ] will be referred to as threshold.",
                "A policy, πi need not be explored if the upper bound for that policy, ˆv[πi, πi− ] is less than the threshold.",
                "This is because the expected value for the best joint policy attainable for that policy will be less than the threshold.",
                "On the other hand, when considering a leaf agent, SPIDER computes the best response policy (and consequently its expected value) corresponding to fixed policies of its ancestors, πi− .",
                "This is accomplished by computing expected values for each of the policies (corresponding to fixed policies of ancestors) and selecting the highest expected value policy.",
                "In Figure 2, SPIDER assigns best response policies to leaf agents at level 3.",
                "The policy for the left leaf agent is to perform action East at each time step in the policy, while the policy for the right leaf agent is to perform Off at each time step.",
                "These best response policies from the leaf agents yield an actual expected value of 234 for the complete joint policy.",
                "Algorithm 1 provides the pseudo code for SPIDER.",
                "This algorithm outputs the best joint policy, πi+,∗ (with an expected value greater than threshold) for the agents in Tree(i).",
                "Lines 3-8 compute the best response policy of a leaf agent i, while lines 9-23 computes the best response joint policy for agents in Tree(i).",
                "This best response computation for a non-leaf agent i includes: (a) Sorting of policies (in descending order) based on heuristic values on line 11; (b) Computing best response policies at each of the children for fixed policies of agent i in lines 16-20; and (c) Maintaining 824 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Algorithm 1 SPIDER(i, πi− , threshold) 1: πi+,∗ ← null 2: Πi ← GET-ALL-POLICIES (horizon, Ai, Ωi) 3: if IS-LEAF(i) then 4: for all πi ∈ Πi do 5: v[πi, πi−] ← JOINT-REWARD (πi, πi−) 6: if v[πi, πi−] > threshold then 7: πi+,∗ ← πi 8: threshold ← v[πi, πi−] 9: else 10: children ← CHILDREN (i) 11: ˆΠi ← UPPER-BOUND-SORT(i, Πi, πi−) 12: for all πi ∈ ˆΠi do 13: ˜πi+ ← πi 14: if ˆv[πi, πi−] < threshold then 15: Go to line 12 16: for all j ∈ children do 17: jThres ← threshold − v[πi, πi−]− Σk∈children,k=j ˆvk[πi, πi−] 18: πj+,∗ ← SPIDER(j, πi πi−, jThres) 19: ˜πi+ ← ˜πi+ πj+,∗ 20: ˆvj[πi, πi−] ← v[πj+,∗, πi πi−] 21: if v[˜πi+, πi−] > threshold then 22: threshold ← v[˜πi+, πi−] 23: πi+,∗ ← ˜πi+ 24: return πi+,∗ Algorithm 2 UPPER-BOUND-SORT(i, Πi, πi− ) 1: children ← CHILDREN (i) 2: ˆΠi ← null /* Stores the sorted list */ 3: for all πi ∈ Πi do 4: ˆv[πi, πi−] ← JOINT-REWARD (πi, πi−) 5: for all j ∈ children do 6: ˆvj[πi, πi−] ← UPPER-BOUND(i, j, πi πi−) 7: ˆv[πi, πi−] + ← ˆvj[πi, πi−] 8: ˆΠi ← INSERT-INTO-SORTED (πi, ˆΠi) 9: return ˆΠi best expected value, joint policy in lines 21-23.",
                "Algorithm 2 provides the pseudo code for sorting policies based on the upper bounds on the expected values of joint policies.",
                "Expected value for an agent i consists of two parts: value obtained from ancestors and value obtained from its children.",
                "Line 4 computes the expected value obtained from ancestors of the agent (using JOINT-REWARD function), while lines 5-7 compute the heuristic value from the children.",
                "The sum of these two parts yields an upper bound on the expected value for agent i, and line 8 of the algorithm sorts the policies based on these upper bounds. 4.2 MDP based heuristic function The heuristic function quickly provides an upper bound on the expected value obtainable from the agents in Tree(i).",
                "The subtree of agents is a distributed POMDP in itself and the idea here is to construct a centralized MDP corresponding to the (sub-tree) distributed POMDP and obtain the expected value of the optimal policy for this centralized MDP.",
                "To reiterate this in terms of the agents in DFS tree interaction structure, we assume full observability for the agents in Tree(i) and for fixed policies of the agents in {Ancestors(i) ∪ i}, we compute the joint value ˆv[πi+ , πi− ] .",
                "We use the following notation for presenting the equations for computing upper bounds/heuristic values (for agents i and k): Let Ei− denote the set of links between agents in {Ancestors(i)∪ i} and Tree(i), Ei+ denote the set of links between agents in Tree(i).",
                "Also, if l ∈ Ei− , then l1 is the agent in {Ancestors(i)∪ i} and l2 is the agent in Tree(i), that l connects together.",
                "We first compact the standard notation: ot k =Ok(st+1 k , st+1 u , πk(ωt k), ωt+1 k ) (1) pt k =Pk(st k, st u, πk(ωt k), st+1 k ) · ot k pt u =P(st u, st+1 u ) st l = st l1 , st l2 , st u ; ωt l = ωt l1 , ωt l2 rt l =Rl(st l , πl1 (ωt l1 ), πl2 (ωt l2 )) vt l =V t πl (st l , st u, ωt l1 , ωt l2 ) Depending on the location of agent k in the agent tree we have the following cases: IF k ∈ {Ancestors(i) ∪ i}, ˆpt k = pt k, (2) IF k ∈ Tree(i), ˆpt k = Pk(st k, st u, πk(ωt k), st+1 k ) IF l ∈ Ei− , ˆrt l = max {al2 } Rl(st l , πl1 (ωt l1 ), al2 ) IF l ∈ Ei+ , ˆrt l = max {al1 ,al2 } Rl(st l , al1 , al2 ) The value function for an agent i executing the joint policy πi+ at time η − 1 is provided by the equation: V η−1 πi+ (sη−1 , ωη−1 ) = l∈Ei− vη−1 l + l∈Ei+ vη−1 l (3) where vη−1 l = rη−1 l + ω η l ,sη pη−1 l1 pη−1 l2 pη−1 u vη l Algorithm 3 UPPER-BOUND (i, j, πj− ) 1: val ← 0 2: for all l ∈ Ej− ∪ Ej+ do 3: if l ∈ Ej− then πl1 ← φ 4: for all s0 l do 5: val + ← startBel[s0 l ]· UPPER-BOUND-TIME (i, s0 l , j, πl1 , ) 6: return val Algorithm 4 UPPER-BOUND-TIME (i, st l , j, πl1 , ωt l1 ) 1: maxV al ← −∞ 2: for all al1 , al2 do 3: if l ∈ Ei− and l ∈ Ej− then al1 ← πl1 (ωt l1 ) 4: val ← GET-REWARD(st l , al1 , al2 ) 5: if t < πi.horizon − 1 then 6: for all st+1 l , ωt+1 l1 do 7: futV al←pt u ˆpt l1 ˆpt l2 8: futV al ∗ ← UPPER-BOUND-TIME(st+1 l , j, πl1 , ωt l1 ωt+1 l1 ) 9: val + ← futV al 10: if val > maxV al then maxV al ← val 11: return maxV al Upper bound on the expected value for a link is computed by modifying the equation 3 to reflect the full observability assumption.",
                "This involves removing the observational probability term for agents in Tree(i) and maximizing the future value ˆvη l over the actions of those agents (in Tree(i)).",
                "Thus, the equation for the The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 825 computation of the upper bound on a link l, is as follows: IF l ∈ Ei− , ˆvη−1 l =ˆrη−1 l + max al2 ω η l1 ,s η l ˆpη−1 l1 ˆpη−1 l2 pη−1 u ˆvη l IF l ∈ Ei+ , ˆvη−1 l =ˆrη−1 l + max al1 ,al2 s η l ˆpη−1 l1 ˆpη−1 l2 pη−1 u ˆvη l Algorithm 3 and Algorithm 4 provide the algorithm for computing upper bound for child j of agent i, using the equations descirbed above.",
                "While Algorithm 4 computes the upper bound on a link given the starting state, Algorithm 3 sums the upper bound values computed over each of the links in Ei− ∪ Ei+ . 4.3 Abstraction Algorithm 5 SPIDER-ABS(i, πi− , threshold) 1: πi+,∗ ← null 2: Πi ← GET-POLICIES (<>, 1) 3: if IS-LEAF(i) then 4: for all πi ∈ Πi do 5: absHeuristic ← GET-ABS-HEURISTIC (πi, πi−) 6: absHeuristic ∗ ← (timeHorizon − πi.horizon) 7: if πi.horizon = timeHorizon and πi.absNodes = 0 then 8: v[πi, πi−] ← JOINT-REWARD (πi, πi−) 9: if v[πi, πi−] > threshold then 10: πi+,∗ ← πi; threshold ← v[πi, πi−] 11: else if v[πi, πi−] + absHeuristic > threshold then 12: ˆΠi ← EXTEND-POLICY (πi, πi.absNodes + 1) 13: Πi + ← INSERT-SORTED-POLICIES ( ˆΠi) 14: REMOVE(πi) 15: else 16: children ← CHILDREN (i) 17: Πi ← UPPER-BOUND-SORT(i, Πi, πi−) 18: for all πi ∈ Πi do 19: ˜πi+ ← πi 20: absHeuristic ← GET-ABS-HEURISTIC (πi, πi−) 21: absHeuristic ∗ ← (timeHorizon − πi.horizon) 22: if πi.horizon = timeHorizon and πi.absNodes = 0 then 23: if ˆv[πi, πi−] < threshold and πi.absNodes = 0 then 24: Go to line 19 25: for all j ∈ children do 26: jThres ← threshold − v[πi, πi−]− Σk∈children,k=j ˆvk[πi, πi−] 27: πj+,∗ ← SPIDER(j, πi πi−, jThres) 28: ˜πi+ ← ˜πi+ πj+,∗; ˆvj[πi, πi−] ← v[πj+,∗, πi πi−] 29: if v[˜πi+, πi−] > threshold then 30: threshold ← v[˜πi+, πi−]; πi+,∗ ← ˜πi+ 31: else if ˆv[πi+, πi−] + absHeuristic > threshold then 32: ˆΠi ← EXTEND-POLICY (πi, πi.absNodes + 1) 33: Πi + ← INSERT-SORTED-POLICIES (ˆΠi) 34: REMOVE(πi) 35: return πi+,∗ In SPIDER, the exploration/pruning phase can only begin after the heuristic (or upper bound) computation and sorting for the policies has ended.",
                "We provide an approach to possibly circumvent the exploration of a group of policies based on heuristic computation for one abstract policy, thus leading to an improvement in runtime performance (without loss in solution quality).",
                "The important steps in this technique are defining the abstract policy and how heuristic values are computated for the abstract policies.",
                "In this paper, we propose two types of abstraction: 1.",
                "Horizon Based Abstraction (HBA): Here, the abstract policy is defined as a shorter horizon policy.",
                "It represents a group of longer horizon policies that have the same actions as the abstract policy for times less than or equal to the horizon of the abstract policy.",
                "In Figure 3(a), a T=1 abstract policy that performs East action, represents a group of T=2 policies, that perform East in the first time step.",
                "For HBA, there are two parts to heuristic computation: (a) Computing the upper bound for the horizon of the abstract policy.",
                "This is same as the heuristic computation defined by the GETHEURISTIC() algorithm for SPIDER, however with a shorter time horizon (horizon of the abstract policy). (b) Computing the maximum possible reward that can be accumulated in one time step (using GET-ABS-HEURISTIC()) and multiplying it by the number of time steps to time horizon.",
                "This maximum possible reward (for one time step) is obtained by iterating through all the actions of all the agents in Tree(i) and computing the maximum joint reward for any joint action.",
                "Sum of (a) and (b) is the heuristic value for a HBA abstract policy. 2.",
                "Node Based Abstraction (NBA): Here an abstract policy is obtained by not associating actions to certain nodes of the policy tree.",
                "Unlike in HBA, this implies multiple levels of abstraction.",
                "This is illustrated in Figure 3(b), where there are T=2 policies that do not have an action for observation TP.",
                "These incomplete T=2 policies are abstractions for T=2 complete policies.",
                "Increased levels of abstraction leads to faster computation of a complete joint policy, πroot+ and also to shorter heuristic computation and exploration, pruning phases.",
                "For NBA, the heuristic computation is similar to that of a normal policy, except in cases where there is no action associated with policy nodes.",
                "In such cases, the immediate reward is taken as Rmax (maximum reward for any action).",
                "We combine both the abstraction techniques mentioned above into one technique, SPIDER-ABS.",
                "Algorithm 5 provides the algorithm for this abstraction technique.",
                "For computing optimal joint policy with SPIDER-ABS, a non-leaf agent i initially examines all abstract T=1 policies (line 2) and sorts them based on abstract policy heuristic computations (line 17).",
                "The abstraction horizon is gradually increased and these abstract policies are then explored in descending order of heuristic values and ones that have heuristic values less than the threshold are pruned (lines 23-24).",
                "Exploration in SPIDER-ABS has the same definition as in SPIDER if the policy being explored has a horizon of policy computation which is equal to the actual time horizon and if all the nodes of the policy have an action associated with them (lines 25-30).",
                "However, if those conditions are not met, then it is substituted by a group of policies that it represents (using EXTEND-POLICY () function) (lines 31-32).",
                "EXTEND-POLICY() function is also responsible for initializing the horizon and absNodes of a policy. absNodes represents the number of nodes at the last level in the policy tree, that do not have an action assigned to them.",
                "If πi.absNodes = |Ωi|πi.horizon−1 (i.e. total number of policy nodes possible at πi.horizon) , then πi.absNodes is set to zero and πi.horizon is increased by 1.",
                "Otherwise, πi.absNodes is increased by 1.",
                "Thus, this function combines both HBA and NBA by using the policy variables, horizon and absNodes.",
                "Before substituting the abstract policy with a group of policies, those policies are sorted based on heuristic values (line 33).",
                "Similar type of abstraction based best response computation is adopted at leaf agents (lines 3-14). 4.4 Value ApproXimation (VAX) In this section, we present an approximate enhancement to SPIDER called VAX.",
                "The input to this technique is an approximation parameter , which determines the difference from the optimal solution quality.",
                "This approximation parameter is used at each agent for pruning out joint policies.",
                "The pruning mechanism in SPIDER and SPIDER-Abs dictates that a joint policy be pruned only if the threshold is exactly greater than the heuristic value.",
                "However, the 826 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Figure 3: Example of abstraction for (a) HBA (Horizon Based Abstraction) and (b) NBA (Node Based Abstraction) idea in this technique is to prune out joint a policy if the following condition is satisfied: threshold + > ˆv[πi , πi− ].",
                "Apart from the pruning condition, VAX is the same as SPIDER/SPIDER-ABS.",
                "In the example of Figure 2, if the heuristic value for the second joint policy (or second search tree node) in level 2 were 238 instead of 232, then that policy could not be be pruned using SPIDER or SPIDER-Abs.",
                "However, in VAX with an approximation parameter of 5, the joint policy in consideration would also be pruned.",
                "This is because the threshold (234) at that juncture plus the approximation parameter (5), i.e. 239 would have been greater than the heuristic value for that joint policy (238).",
                "It can be noted from the example (just discussed) that this kind of pruning can lead to fewer explorations and hence lead to an improvement in the overall run-time performance.",
                "However, this can entail a sacrifice in the quality of the solution because this technique can prune out a candidate optimal solution.",
                "A bound on the error introduced by this approximate algorithm as a function of , is provided by Proposition 3. 4.5 Percentage ApproXimation (PAX) In this section, we present the second approximation enhancement over SPIDER called PAX.",
                "Input to this technique is a parameter, δ that represents the minimum percentage of the optimal solution quality that is desired.",
                "Output of this technique is a policy with an expected value that is at least δ% of the optimal solution quality.",
                "A policy is pruned if the following condition is satisfied: threshold > δ 100 ˆv[πi , πi− ].",
                "Like in VAX, the only difference between PAX and SPIDER/SPIDER-ABS is this pruning condition.",
                "Again in Figure 2, if the heuristic value for the second search tree node in level 2 were 238 instead of 232, then PAX with an input parameter of 98% would be able to prune that search tree node (since 98 100 ∗238 < 234).",
                "This type of pruning leads to fewer explorations and hence an improvement in run-time performance, while potentially leading to a loss in quality of the solution.",
                "Proposition 4 provides the bound on quality loss. 4.6 Theoretical Results PROPOSITION 1.",
                "Heuristic provided using the centralized MDP heuristic is admissible.",
                "Proof.",
                "For the value provided by the heuristic to be admissible, it should be an over estimate of the expected value for a joint policy.",
                "Thus, we need to show that: For l ∈ Ei+ ∪ Ei− : ˆvt l ≥ vt l (refer to notation in Section 4.2) We use mathematical induction on t to prove this.",
                "Base case: t = T − 1.",
                "Irrespective of whether l ∈ Ei− or l ∈ Ei+ , ˆrt l is computed by maximizing over all actions of the agents in Tree(i), while rt l is computed for fixed policies of the same agents.",
                "Hence, ˆrt l ≥ rt l and also ˆvt l ≥ vt l .",
                "Assumption: Proposition holds for t = η, where 1 ≤ η < T − 1.",
                "We now have to prove that the proposition holds for t = η − 1.",
                "We show the proof for l ∈ Ei− and similar reasoning can be adopted to prove for l ∈ Ei+ .",
                "The heuristic value function for l ∈ Ei− is provided by the following equation: ˆvη−1 l =ˆrη−1 l + max al2 ω η l1 ,s η l ˆpη−1 l1 ˆpη−1 l2 pη−1 u ˆvη l Rewriting the RHS and using Eqn 2 (in Section 4.2) =ˆrη−1 l + max al2 ω η l1 ,s η l pη−1 u pη−1 l1 ˆpη−1 l2 ˆvη l =ˆrη−1 l + ω η l1 ,s η l pη−1 u pη−1 l1 max al2 ˆpη−1 l2 ˆvη l Since maxal2 ˆpη−1 l2 ˆvη l ≥ ωl2 oη−1 l2 ˆpη−1 l2 ˆvη l and pη−1 l2 = oη−1 l2 ˆpη−1 l2 ≥ˆrη−1 l + ω η l1 ,s η l pη−1 u pη−1 l1 ωl2 pη−1 l2 ˆvη l Since ˆvη l ≥ vη l (from the assumption) ≥ˆrη−1 l + ω η l1 ,s η l pη−1 u pη−1 l1 ωl2 pη−1 l2 vη l Since ˆrη−1 l ≥ rη−1 l (by definition) ≥rη−1 l + ω η l1 ,s η l pη−1 u pη−1 l1 ωl2 pη−1 l2 vη l =rη−1 l + (ω η l ,s η l ) pη−1 u pη−1 l1 pη−1 l2 vη l = vη−1 l Thus proved.",
                "PROPOSITION 2.",
                "SPIDER provides an optimal solution.",
                "Proof.",
                "SPIDER examines all possible joint policies given the interaction structure of the agents.",
                "The only exception being when a joint policy is pruned based on the heuristic value.",
                "Thus, as long as a candidate optimal policy is not pruned, SPIDER will return an optimal policy.",
                "As proved in Proposition 1, the expected value for a joint policy is always an upper bound.",
                "Hence when a joint policy is pruned, it cannot be an optimal solution.",
                "PROPOSITION 3.",
                "Error bound on the solution quality for VAX (implemented over SPIDER-ABS) with an approximation parameter of is ρ , where ρ is the number of leaf nodes in the DFS tree.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 827 Proof.",
                "We prove this proposition using mathematical induction on the depth of the DFS tree.",
                "Base case: depth = 1 (i.e. one node).",
                "Best response is computed by iterating through all policies, Πk.",
                "A policy,πk is pruned if ˆv[πk, πk− ] < threshold + .",
                "Thus the best response policy computed by VAX would be at most away from the optimal best response.",
                "Hence the proposition holds for the base case.",
                "Assumption: Proposition holds for d, where 1 ≤ depth ≤ d. We now have to prove that the proposition holds for d + 1.",
                "Without loss of generality, lets assume that the root node of this tree has k children.",
                "Each of this children is of depth ≤ d, and hence from the assumption, the error introduced in kth child is ρk , where ρk is the number of leaf nodes in kth child of the root.",
                "Therefore, ρ = k ρk, where ρ is the number of leaf nodes in the tree.",
                "In SPIDER-ABS, threshold at the root agent, thresspider = k v[πk+ , πk− ].",
                "However, with VAX the threshold at the root agent will be (in the worst case), threshvax = k v[πk+ , πk− ]− k ρk .",
                "Hence, with VAX a joint policy is pruned at the root agent if ˆv[πroot, πroot− ] < threshvax + ⇒ ˆv[πroot, πroot− ] < threshspider − (( k ρk) − 1) ≤ threshspider − ( k ρk) ≤ threshspider − ρ .",
                "Hence proved.",
                "PROPOSITION 4.",
                "For PAX (implemented over SPIDER-ABS) with an input parameter of δ, the solution quality is at least δ 100 v[πroot+,∗ ], where v[πroot+,∗ ] denotes the optimal solution quality.",
                "Proof.",
                "We prove this proposition using mathematical induction on the depth of the DFS tree.",
                "Base case: depth = 1 (i.e. one node).",
                "Best response is computed by iterating through all policies, Πk.",
                "A policy,πk is pruned if δ 100 ˆv[πk, πk− ] < threshold.",
                "Thus the best response policy computed by PAX would be at least δ 100 times the optimal best response.",
                "Hence the proposition holds for the base case.",
                "Assumption: Proposition holds for d, where 1 ≤ depth ≤ d. We now have to prove that the proposition holds for d + 1.",
                "Without loss of generality, lets assume that the root node of this tree has k children.",
                "Each of this children is of depth ≤ d, and hence from the assumption, the solution quality in the kth child is at least δ 100 v[πk+,∗ , πk− ] for PAX.",
                "With SPIDER-ABS, a joint policy is pruned at the root agent if ˆv[πroot, πroot− ] < k v[πk+,∗ , πk− ].",
                "However with PAX, a joint policy is pruned if δ 100 ˆv[πroot, πroot− ] < k δ 100 v[πk+,∗ , πk− ] ⇒ ˆv[πroot, πroot− ] < k v[πk+,∗ , πk− ].",
                "Since the pruning condition at the root agent in PAX is the same as the one in SPIDER-ABS, there is no error introduced at the root agent and all the error is introduced in the children.",
                "Thus, overall solution quality is at least δ 100 of the optimal solution.",
                "Hence proved. 5.",
                "EXPERIMENTAL RESULTS All our experiments were conducted on the sensor <br>network</br> domain from Section 2.",
                "The five <br>network</br> configurations employed are shown in Figure 4.",
                "Algorithms that we experimented with are GOA, SPIDER, SPIDER-ABS, PAX and VAX.",
                "We compare against GOA because it is the only global optimal algorithm that considers more than two agents.",
                "We performed two sets of experiments: (i) firstly, we compared the run-time performance of the above algorithms and (ii) secondly, we experimented with PAX and VAX to study the tradeoff between run-time and solution quality.",
                "Experiments were terminated after 10000 seconds1 .",
                "Figure 5(a) provides run-time comparisons between the optimal algorithms GOA, SPIDER, SPIDER-Abs and the approximate algorithms, PAX ( of 30) and VAX(δ of 80).",
                "X-axis denotes the 1 Machine specs for all experiments: Intel Xeon 3.6 GHZ processor, 2GB RAM sensor <br>network</br> configuration used, while Y-axis indicates the runtime (on a log-scale).",
                "The time horizon of policy computation was 3.",
                "For each configuration (3-chain, 4-chain, 4-star and 5-star), there are five bars indicating the time taken by GOA, SPIDER, SPIDERAbs, PAX and VAX.",
                "GOA did not terminate within the time limit for 4-star and 5-star configurations.",
                "SPIDER-Abs dominated the SPIDER and GOA for all the configurations.",
                "For instance, in the 3chain configuration, SPIDER-ABS provides 230-fold speedup over GOA and 2-fold speedup over SPIDER and for the 4-chain configuration it provides 58-fold speedup over GOA and 2-fold speedup over SPIDER.",
                "The two approximation approaches, VAX and PAX provided further improvement in performance over SPIDER-Abs.",
                "For instance, in the 5-star configuration VAX provides a 15-fold speedup and PAX provides a 8-fold speedup over SPIDER-Abs.",
                "Figures 5(b) provides a comparison of the solution quality obtained using the different algorithms for the problems tested in Figure 5(a).",
                "X-axis denotes the sensor <br>network</br> configuration while Y-axis indicates the solution quality.",
                "Since GOA, SPIDER, and SPIDER-Abs are all global optimal algorithms, the solution quality is the same for all those algorithms.",
                "For 5-P configuration, the global optimal algorithms did not terminate within the limit of 10000 seconds, so the bar for optimal quality indicates an upper bound on the optimal solution quality.",
                "With both the approximations, we obtained a solution quality that was close to the optimal solution quality.",
                "In 3-chain and 4-star configurations, it is remarkable that both PAX and VAX obtained almost the same actual quality as the global optimal algorithms, despite the approximation parameter and δ.",
                "For other configurations as well, the loss in quality was less than 20% of the optimal solution quality.",
                "Figure 5(c) provides the time to solution with PAX (for varying epsilons).",
                "X-axis denotes the approximation parameter, δ (percentage to optimal) used, while Y-axis denotes the time taken to compute the solution (on a log-scale).",
                "The time horizon for all the configurations was 4.",
                "As δ was decreased from 70 to 30, the time to solution decreased drastically.",
                "For instance, in the 3-chain case there was a total speedup of 170-fold when the δ was changed from 70 to 30.",
                "Interestingly, even with a low δ of 30%, the actual solution quality remained equal to the one obtained at 70%.",
                "Figure 5(d) provides the time to solution for all the configurations with VAX (for varying epsilons).",
                "X-axis denotes the approximation parameter, used, while Y-axis denotes the time taken to compute the solution (on a log-scale).",
                "The time horizon for all the configurations was 4.",
                "As was increased, the time to solution decreased drastically.",
                "For instance, in the 4-star case there was a total speedup of 73-fold when the was changed from 60 to 140.",
                "Again, the actual solution quality did not change with varying epsilon.",
                "Figure 4: Sensor <br>network</br> configurations 828 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Figure 5: Comparison of GOA, SPIDER, SPIDER-Abs and VAX for T = 3 on (a) Runtime and (b) Solution quality; (c) Time to solution for PAX with varying percentage to optimal for T=4 (d) Time to solution for VAX with varying epsilon for T=4 6.",
                "SUMMARY AND RELATED WORK This paper presents four algorithms SPIDER, SPIDER-ABS, PAX and VAX that provide a novel combination of features for policy search in distributed POMDPs: (i) exploiting agent interaction structure given a <br>network</br> of agents (i.e. easier scale-up to larger number of agents); (ii) using branch and bound search with an MDP based heuristic function; (iii) utilizing abstraction to improve runtime performance without sacrificing solution quality; (iv) providing a priori percentage bounds on quality of solutions using PAX; and (v) providing expected value bounds on the quality of solutions using VAX.",
                "These features allow for systematic tradeoff of solution quality for run-time in networks of agents operating under uncertainty.",
                "Experimental results show orders of magnitude improvement in performance over previous global optimal algorithms.",
                "Researchers have typically employed two types of techniques for solving distributed POMDPs.",
                "The first set of techniques compute global optimal solutions.",
                "Hansen et al. [5] present an algorithm based on dynamic programming and iterated elimination of dominant policies, that provides optimal solutions for distributed POMDPs.",
                "Szer et al. [13] provide an optimal heuristic search method for solving Decentralized POMDPs.",
                "This algorithm is based on the combination of a classical heuristic search algorithm, A∗ and decentralized control theory.",
                "The key differences between SPIDER and MAA* are: (a) Enhancements to SPIDER (VAX and PAX) provide for quality guaranteed approximations, while MAA* is a global optimal algorithm and hence involves significant computational complexity; (b) Due to MAA*s inability to exploit interaction structure, it was illustrated only with two agents.",
                "However, SPIDER has been illustrated for networks of agents; and (c) SPIDER explores the joint policy one agent at a time, while MAA* expands it one time step at a time (simultaneously for all the agents).",
                "The second set of techniques seek approximate policies.",
                "EmeryMontemerlo et al. [4] approximate POSGs as a series of one-step Bayesian games using heuristics to approximate future value, trading off limited lookahead for computational efficiency, resulting in locally optimal policies (with respect to the selected heuristic).",
                "Nair et al. [9]s JESP algorithm uses dynamic programming to reach a local optimum solution for finite horizon decentralized POMDPs.",
                "Peshkin et al. [11] and Bernstein et al. [2] are examples of policy search techniques that search for locally optimal policies.",
                "Though all the above techniques improve the efficiency of policy computation considerably, they are unable to provide error bounds on the quality of the solution.",
                "This aspect of quality bounds differentiates SPIDER from all the above techniques.",
                "Acknowledgements.",
                "This material is based upon work supported by the Defense Advanced Research Projects Agency (DARPA), through the Department of the Interior, NBC, Acquisition Services Division under Contract No.",
                "NBCHD030010.",
                "The views and conclusions contained in this document are those of the authors, and should not be interpreted as representing the official policies, either expressed or implied, of the Defense Advanced Research Projects Agency or the U.S. Government. 7.",
                "REFERENCES [1] R. Becker, S. Zilberstein, V. Lesser, and C.V. Goldman.",
                "Solving transition independent decentralized Markov decision processes.",
                "JAIR, 22:423-455, 2004. [2] D. S. Bernstein, E.A.",
                "Hansen, and S. Zilberstein.",
                "Bounded policy iteration for decentralized POMDPs.",
                "In IJCAI, 2005. [3] D. S. Bernstein, S. Zilberstein, and N. Immerman.",
                "The complexity of decentralized control of MDPs.",
                "In UAI, 2000. [4] R. Emery-Montemerlo, G. Gordon, J. Schneider, and S. Thrun.",
                "Approximate solutions for partially observable stochastic games with common payoffs.",
                "In AAMAS, 2004. [5] E. Hansen, D. Bernstein, and S. Zilberstein.",
                "Dynamic programming for partially observable stochastic games.",
                "In AAAI, 2004. [6] V. Lesser, C. Ortiz, and M. Tambe.",
                "Distributed sensor nets: A multiagent perspective.",
                "Kluwer, 2003. [7] R. Maheswaran, M. Tambe, E. Bowring, J. Pearce, and P. Varakantham.",
                "Taking dcop to the real world : Efficient complete solutions for distributed event scheduling.",
                "In AAMAS, 2004. [8] P. J. Modi, W. Shen, M. Tambe, and M. Yokoo.",
                "An asynchronous complete method for distributed constraint optimization.",
                "In AAMAS, 2003. [9] R. Nair, D. Pynadath, M. Yokoo, M. Tambe, and S. Marsella.",
                "Taming decentralized POMDPs: Towards efficient policy computation for multiagent settings.",
                "In IJCAI, 2003. [10] R. Nair, P. Varakantham, M. Tambe, and M. Yokoo.",
                "Networked distributed POMDPs: A synthesis of distributed constraint optimization and POMDPs.",
                "In AAAI, 2005. [11] L. Peshkin, N. Meuleau, K.-E. Kim, and L. Kaelbling.",
                "Learning to cooperate via policy search.",
                "In UAI, 2000. [12] A. Petcu and B. Faltings.",
                "A scalable method for multiagent constraint optimization.",
                "In IJCAI, 2005. [13] D. Szer, F. Charpillet, and S. Zilberstein.",
                "MAA*: A heuristic search algorithm for solving decentralized POMDPs.",
                "In IJCAI, 2005.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 829"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Permitir una araña en una \"red\" de POMDPS: Generación de políticas garantizadas de calidad Pradeep Varakantham, Janusz Marecki, Yuichi Yabu ∗, Milind Tambe, Makoto Yokoo ∗ Universidad del Sur de California, Los Ángeles, CA 90089, {Varakant, Marecki, Tambe}@USC.Edu ∗ Dept.",
                "Este artículo supera las limitaciones de ambos enfoques al proporcionar araña, una combinación novedosa de tres características clave para la generación de políticas en POMDP distribuidos: (i) Explota la estructura de interacción del agente dada una \"red\" de agentes (es decir, permitiendo una ampliación más fácil amayor número de agentes);(ii) Utiliza una combinación de heurísticas para la búsqueda de políticas aceleradas;y (iii) permite aproximaciones garantizadas de calidad, lo que permite una compensación sistemática de calidad de solución para el tiempo.",
                "Para abordar estos problemas con los enfoques existentes, proponemos técnicas aproximadas que proporcionan garantías sobre la calidad de la solución al tiempo que se centran en una \"red\" de más de dos agentes.",
                "Hay dos características novedosas clave en Spider: (i) Es una rama y una técnica de búsqueda heurística vinculada que utiliza una función heurística basada en MDP para buscar una política conjunta óptima;(ii) Explota la estructura de \"red\" de los agentes organizando a los agentes en un pseudo árbol de búsqueda de Primera búsqueda (DFS) de profundidad y aprovecha la independencia en las diferentes ramas del árbol DFS.",
                "Experimentamos con el dominio del sensor \"Red\" presentado en Nair et al.[10], un representante de dominio de una clase importante de problemas con redes de agentes que trabajan en entornos inciertos.",
                "Modelo de fondo 3.1: \"Red\" distribuido POMDP El modelo ND-POMDP se introdujo en [10], motivado por dominios como las redes de sensores introducidas en la Sección 2.",
                "Resultados experimentales Todos nuestros experimentos se realizaron en el dominio de \"red\" del sensor de la Sección 2.",
                "Las cinco configuraciones de \"red\" empleadas se muestran en la Figura 4.",
                "El eje X denota las especificaciones de la máquina 1 para todos los experimentos: procesador Intel Xeon 3.6 GHz, configuración de \"red\" del sensor RAM de 2 GB utilizada, mientras que el eje Y indica el tiempo de ejecución (en una escala log).",
                "El eje X denota la configuración del sensor \"red\", mientras que el eje Y indica la calidad de la solución."
            ],
            "translated_text": "",
            "candidates": [
                "Network",
                "red",
                "red",
                "red",
                "red",
                "red",
                "red",
                "red",
                "red",
                "Red",
                "Red",
                "Red",
                "Red",
                "red",
                "Red",
                "red",
                "red",
                "red",
                "red",
                "red"
            ],
            "error": []
        },
        "quality guaranteed policies": {
            "translated_key": "",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Letting loose a SPIDER on a network of POMDPs: Generating <br>quality guaranteed policies</br> Pradeep Varakantham, Janusz Marecki, Yuichi Yabu∗ , Milind Tambe, Makoto Yokoo∗ University of Southern California, Los Angeles, CA 90089, {varakant, marecki, tambe}@usc.edu ∗ Dept.",
                "of Intelligent Systems, Kyushu University, Fukuoka, 812-8581 Japan, yokoo@is.kyushu-u.ac.jp ABSTRACT Distributed Partially Observable Markov Decision Problems (Distributed POMDPs) are a popular approach for modeling multi-agent systems acting in uncertain domains.",
                "Given the significant complexity of solving distributed POMDPs, particularly as we scale up the numbers of agents, one popular approach has focused on approximate solutions.",
                "Though this approach is efficient, the algorithms within this approach do not provide any guarantees on solution quality.",
                "A second less popular approach focuses on global optimality, but typical results are available only for two agents, and also at considerable computational cost.",
                "This paper overcomes the limitations of both these approaches by providing SPIDER, a novel combination of three key features for policy generation in distributed POMDPs: (i) it exploits agent interaction structure given a network of agents (i.e. allowing easier scale-up to larger number of agents); (ii) it uses a combination of heuristics to speedup policy search; and (iii) it allows quality guaranteed approximations, allowing a systematic tradeoff of solution quality for time.",
                "Experimental results show orders of magnitude improvement in performance when compared with previous global optimal algorithms.",
                "Categories and Subject Descriptors I.2.11 [Artificial Intelligence]: Distributed Artificial IntelligenceMulti-agent Systems General Terms Algorithms, Theory 1.",
                "INTRODUCTION Distributed Partially Observable Markov Decision Problems (Distributed POMDPs) are emerging as a popular approach for modeling sequential decision making in teams operating under uncertainty [9, 4, 1, 2, 13].",
                "The uncertainty arises on account of nondeterminism in the outcomes of actions and because the world state may only be partially (or incorrectly) observable.",
                "Unfortunately, as shown by Bernstein et al. [3], the problem of finding the optimal joint policy for general distributed POMDPs is NEXP-Complete.",
                "Researchers have attempted two different types of approaches towards solving these models.",
                "The first category consists of highly efficient approximate techniques, that may not reach globally optimal solutions [2, 9, 11].",
                "The key problem with these techniques has been their inability to provide any guarantees on the quality of the solution.",
                "In contrast, the second less popular category of approaches has focused on a global optimal result [13, 5, 10].",
                "Though these approaches obtain optimal solutions, they typically consider only two agents.",
                "Furthermore, they fail to exploit structure in the interactions of the agents and hence are severely hampered with respect to scalability when considering more than two agents.",
                "To address these problems with the existing approaches, we propose approximate techniques that provide guarantees on the quality of the solution while focussing on a network of more than two agents.",
                "We first propose the basic SPIDER (Search for Policies In Distributed EnviRonments) algorithm.",
                "There are two key novel features in SPIDER: (i) it is a branch and bound heuristic search technique that uses a MDP-based heuristic function to search for an optimal joint policy; (ii) it exploits network structure of agents by organizing agents into a Depth First Search (DFS) pseudo tree and takes advantage of the independence in the different branches of the DFS tree.",
                "We then provide three enhancements to improve the efficiency of the basic SPIDER algorithm while providing guarantees on the quality of the solution.",
                "The first enhancement uses abstractions for speedup, but does not sacrifice solution quality.",
                "In particular, it initially performs branch and bound search on abstract policies and then extends to complete policies.",
                "The second enhancement obtains speedups by sacrificing solution quality, but within an input parameter that provides the tolerable expected value difference from the optimal solution.",
                "The third enhancement is again based on bounding the search for efficiency, however with a tolerance parameter that is provided as a percentage of optimal.",
                "We experimented with the sensor network domain presented in Nair et al. [10], a domain representative of an important class of problems with networks of agents working in uncertain environments.",
                "In our experiments, we illustrate that SPIDER dominates an existing global optimal approach called GOA [10], the only known global optimal algorithm with demonstrated experimental results for more than two agents.",
                "Furthermore, we demonstrate that abstraction improves the performance of SPIDER significantly (while providing optimal solutions).",
                "We finally demonstrate a key feature of SPIDER: by utilizing the approximation enhancements it enables principled tradeoffs in run-time versus solution quality. 822 978-81-904262-7-5 (RPS) c 2007 IFAAMAS 2.",
                "DOMAIN: DISTRIBUTED SENSOR NETS Distributed sensor networks are a large, important class of domains that motivate our work.",
                "This paper focuses on a set of target tracking problems that arise in certain types of sensor networks [6] first introduced in [10].",
                "Figure 1 shows a specific problem instance within this type consisting of three sensors.",
                "Here, each sensor node can scan in one of four directions: North, South, East or West (see Figure 1).",
                "To track a target and obtain associated reward, two sensors with overlapping scanning areas must coordinate by scanning the same area simultaneously.",
                "In Figure 1, to track a target in Loc11, sensor1 needs to scan East and sensor2 needs to scan West simultaneously.",
                "Thus, sensors have to act in a coordinated fashion.",
                "We assume that there are two independent targets and that each targets movement is uncertain and unaffected by the sensor agents.",
                "Based on the area it is scanning, each sensor receives observations that can have false positives and false negatives.",
                "The sensors observations and transitions are independent of each others actions e.g.the observations that sensor1 receives are independent of sensor2s actions.",
                "Each agent incurs a cost for scanning whether the target is present or not, but no cost if it turns off.",
                "Given the sensors observational uncertainty, the targets uncertain transitions and the distributed nature of the sensor nodes, these sensor nets provide a useful domains for applying distributed POMDP models.",
                "Figure 1: A 3-chain sensor configuration 3.",
                "BACKGROUND 3.1 Model: Network Distributed POMDP The ND-POMDP model was introduced in [10], motivated by domains such as the sensor networks introduced in Section 2.",
                "It is defined as the tuple S, A, P, Ω, O, R, b , where S = ×1≤i≤nSi × Su is the set of world states.",
                "Si refers to the set of local states of agent i and Su is the set of unaffectable states.",
                "Unaffectable state refers to that part of the world state that cannot be affected by the agents actions, e.g. environmental factors like target locations that no agent can control.",
                "A = ×1≤i≤nAi is the set of joint actions, where Ai is the set of action for agent i. ND-POMDP assumes transition independence, where the transition function is defined as P(s, a, s ) = Pu(su, su) · 1≤i≤n Pi(si, su, ai, si), where a = a1, . . . , an is the joint action performed in state s = s1, . . . , sn, su and s = s1, . . . , sn, su is the resulting state.",
                "Ω = ×1≤i≤nΩi is the set of joint observations where Ωi is the set of observations for agents i. Observational independence is assumed in ND-POMDPs i.e., the joint observation function is defined as O(s, a, ω) = 1≤i≤n Oi(si, su, ai, ωi), where s = s1, . . . , sn, su is the world state that results from the agents performing a = a1, . . . , an in the previous state, and ω = ω1, . . . , ωn ∈ Ω is the observation received in state s. This implies that each agents observation depends only on the unaffectable state, its local action and on its resulting local state.",
                "The reward function, R, is defined as R(s, a) = l Rl(sl1, . . . , slr, su, al1, . . . , alr ), where each l could refer to any sub-group of agents and r = |l|.",
                "Based on the reward function, an interaction hypergraph is constructed.",
                "A hyper-link, l, exists between a subset of agents for all Rl that comprise R. The interaction hypergraph is defined as G = (Ag, E), where the agents, Ag, are the vertices and E = {l|l ⊆ Ag ∧ Rl is a component of R} are the edges.",
                "The initial belief state (distribution over the initial state), b, is defined as b(s) = bu(su) · 1≤i≤n bi(si), where bu and bi refer to the distribution over initial unaffectable state and agent is initial belief state, respectively.",
                "The goal in ND-POMDP is to compute the joint policy π = π1, . . . , πn that maximizes teams expected reward over a finite horizon T starting from the belief state b.",
                "An ND-POMDP is similar to an n-ary Distributed Constraint Optimization Problem (DCOP)[8, 12] where the variable at each node represents the policy selected by an individual agent, πi with the domain of the variable being the set of all local policies, Πi.",
                "The reward component Rl where |l| = 1 can be thought of as a local constraint while the reward component Rl where l > 1 corresponds to a non-local constraint in the constraint graph. 3.2 Algorithm: Global Optimal Algorithm (GOA) In previous work, GOA has been defined as a global optimal algorithm for ND-POMDPs [10].",
                "We will use GOA in our experimental comparisons, since GOA is a state-of-the-art global optimal algorithm, and in fact the only one with experimental results available for networks of more than two agents.",
                "GOA borrows from a global optimal DCOP algorithm called DPOP[12].",
                "GOAs message passing follows that of DPOP.",
                "The first phase is the UTIL propagation, where the utility messages, in this case values of policies, are passed up from the leaves to the root.",
                "Value for a policy at an agent is defined as the sum of best response values from its children and the joint policy reward associated with the parent policy.",
                "Thus, given a policy for a parent node, GOA requires an agent to iterate through all its policies, finding the best response policy and returning the value to the parent - while at the parent node, to find the best policy, an agent requires its children to return their best responses to each of its policies.",
                "This UTIL propagation process is repeated at each level in the tree, until the root exhausts all its policies.",
                "In the second phase of VALUE propagation, where the optimal policies are passed down from the root till the leaves.",
                "GOA takes advantage of the local interactions in the interaction graph, by pruning out unnecessary joint policy evaluations (associated with nodes not connected directly in the tree).",
                "Since the interaction graph captures all the reward interactions among agents and as this algorithm iterates through all the relevant joint policy evaluations, this algorithm yields a globally optimal solution. 4.",
                "SPIDER As mentioned in Section 3.1, an ND-POMDP can be treated as a DCOP, where the goal is to compute a joint policy that maximizes the overall joint reward.",
                "The brute-force technique for computing an optimal policy would be to examine the expected values for all possible joint policies.",
                "The key idea in SPIDER is to avoid computation of expected values for the entire space of joint policies, by utilizing upper bounds on the expected values of policies and the interaction structure of the agents.",
                "Akin to some of the algorithms for DCOP [8, 12], SPIDER has a pre-processing step that constructs a DFS tree corresponding to the given interaction structure.",
                "Note that these DFS trees are pseudo trees [12] that allow links between ancestors and children.",
                "We employ the Maximum Constrained Node (MCN) heuristic used in the DCOP algorithm, ADOPT [8], however other heuristics (such as MLSP heuristic from [7]) can also be employed.",
                "MCN heuristic tries to place agents with more number of constraints at the top of the tree.",
                "This tree governs how the search for the optimal joint polThe Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 823 icy proceeds in SPIDER.",
                "The algorithms presented in this paper are easily extendable to hyper-trees, however for expository purposes, we assume binary trees.",
                "SPIDER is an algorithm for centralized planning and distributed execution in distributed POMDPs.",
                "In this paper, we employ the following notation to denote policies and expected values: Ancestors(i) ⇒ agents from i to the root (not including i).",
                "Tree(i) ⇒ agents in the sub-tree (not including i) for which i is the root. πroot+ ⇒ joint policy of all agents. πi+ ⇒ joint policy of all agents in Tree(i) ∪ i. πi− ⇒ joint policy of agents that are in Ancestors(i). πi ⇒ policy of the ith agent. ˆv[πi, πi− ] ⇒ upper bound on the expected value for πi+ given πi and policies of ancestor agents i.e. πi− . ˆvj[πi, πi− ] ⇒ upper bound on the expected value for πi+ from the jth child. v[πi, πi− ] ⇒ expected value for πi given policies of ancestor agents, πi− . v[πi+ , πi− ] ⇒ expected value for πi+ given policies of ancestor agents, πi− . vj[πi+ , πi− ] ⇒ expected value for πi+ from the jth child.",
                "Figure 2: Execution of SPIDER, an example 4.1 Outline of SPIDER SPIDER is based on the idea of branch and bound search, where the nodes in the search tree represent partial/complete joint policies.",
                "Figure 2 shows an example search tree for the SPIDER algorithm, using an example of the three agent chain.",
                "Before SPIDER begins its search we create a DFS tree (i.e. pseudo tree) from the three agent chain, with the middle agent as the root of this tree.",
                "SPIDER exploits the structure of this DFS tree while engaging in its search.",
                "Note that in our example figure, each agent is assigned a policy with T=2.",
                "Thus, each rounded rectange (search tree node) indicates a partial/complete joint policy, a rectangle indicates an agent and the ovals internal to an agent show its policy.",
                "Heuristic or actual expected value for a joint policy is indicated in the top right corner of the rounded rectangle.",
                "If the number is italicized and underlined, it implies that the actual expected value of the joint policy is provided.",
                "SPIDER begins with no policy assigned to any of the agents (shown in the level 1 of the search tree).",
                "Level 2 of the search tree indicates that the joint policies are sorted based on upper bounds computed for root agents policies.",
                "Level 3 shows one SPIDER search node with a complete joint policy (a policy assigned to each of the agents).",
                "The expected value for this joint policy is used to prune out the nodes in level 2 (the ones with upper bounds < 234) When creating policies for each non-leaf agent i, SPIDER potentially performs two steps: 1.",
                "Obtaining upper bounds and sorting: In this step, agent i computes upper bounds on the expected values, ˆv[πi, πi− ] of the joint policies πi+ corresponding to each of its policy πi and fixed ancestor policies.",
                "An MDP based heuristic is used to compute these upper bounds on the expected values.",
                "Detailed description about this MDP heuristic is provided in Section 4.2.",
                "All policies of agent i, Πi are then sorted based on these upper bounds (also referred to as heuristic values henceforth) in descending order.",
                "Exploration of these policies (in step 2 below) are performed in this descending order.",
                "As indicated in the level 2 of the search tree (of Figure 2), all the joint policies are sorted based on the heuristic values, indicated in the top right corner of each joint policy.",
                "The intuition behind sorting and then exploring policies in descending order of upper bounds, is that the policies with higher upper bounds could yield joint policies with higher expected values. 2.",
                "Exploration and Pruning: Exploration implies computing the best response joint policy πi+,∗ corresponding to fixed ancestor policies of agent i, πi− .",
                "This is performed by iterating through all policies of agent i i.e.",
                "Πi and summing two quantities for each policy: (i) the best response for all of is children (obtained by performing steps 1 and 2 at each of the child nodes); (ii) the expected value obtained by i for fixed policies of ancestors.",
                "Thus, exploration of a policy πi yields actual expected value of a joint policy, πi+ represented as v[πi+ , πi− ].",
                "The policy with the highest expected value is the best response policy.",
                "Pruning refers to avoiding exploring all policies (or computing expected values) at agent i by using the current best expected value, vmax [πi+ , πi− ].",
                "Henceforth, this vmax [πi+ , πi− ] will be referred to as threshold.",
                "A policy, πi need not be explored if the upper bound for that policy, ˆv[πi, πi− ] is less than the threshold.",
                "This is because the expected value for the best joint policy attainable for that policy will be less than the threshold.",
                "On the other hand, when considering a leaf agent, SPIDER computes the best response policy (and consequently its expected value) corresponding to fixed policies of its ancestors, πi− .",
                "This is accomplished by computing expected values for each of the policies (corresponding to fixed policies of ancestors) and selecting the highest expected value policy.",
                "In Figure 2, SPIDER assigns best response policies to leaf agents at level 3.",
                "The policy for the left leaf agent is to perform action East at each time step in the policy, while the policy for the right leaf agent is to perform Off at each time step.",
                "These best response policies from the leaf agents yield an actual expected value of 234 for the complete joint policy.",
                "Algorithm 1 provides the pseudo code for SPIDER.",
                "This algorithm outputs the best joint policy, πi+,∗ (with an expected value greater than threshold) for the agents in Tree(i).",
                "Lines 3-8 compute the best response policy of a leaf agent i, while lines 9-23 computes the best response joint policy for agents in Tree(i).",
                "This best response computation for a non-leaf agent i includes: (a) Sorting of policies (in descending order) based on heuristic values on line 11; (b) Computing best response policies at each of the children for fixed policies of agent i in lines 16-20; and (c) Maintaining 824 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Algorithm 1 SPIDER(i, πi− , threshold) 1: πi+,∗ ← null 2: Πi ← GET-ALL-POLICIES (horizon, Ai, Ωi) 3: if IS-LEAF(i) then 4: for all πi ∈ Πi do 5: v[πi, πi−] ← JOINT-REWARD (πi, πi−) 6: if v[πi, πi−] > threshold then 7: πi+,∗ ← πi 8: threshold ← v[πi, πi−] 9: else 10: children ← CHILDREN (i) 11: ˆΠi ← UPPER-BOUND-SORT(i, Πi, πi−) 12: for all πi ∈ ˆΠi do 13: ˜πi+ ← πi 14: if ˆv[πi, πi−] < threshold then 15: Go to line 12 16: for all j ∈ children do 17: jThres ← threshold − v[πi, πi−]− Σk∈children,k=j ˆvk[πi, πi−] 18: πj+,∗ ← SPIDER(j, πi πi−, jThres) 19: ˜πi+ ← ˜πi+ πj+,∗ 20: ˆvj[πi, πi−] ← v[πj+,∗, πi πi−] 21: if v[˜πi+, πi−] > threshold then 22: threshold ← v[˜πi+, πi−] 23: πi+,∗ ← ˜πi+ 24: return πi+,∗ Algorithm 2 UPPER-BOUND-SORT(i, Πi, πi− ) 1: children ← CHILDREN (i) 2: ˆΠi ← null /* Stores the sorted list */ 3: for all πi ∈ Πi do 4: ˆv[πi, πi−] ← JOINT-REWARD (πi, πi−) 5: for all j ∈ children do 6: ˆvj[πi, πi−] ← UPPER-BOUND(i, j, πi πi−) 7: ˆv[πi, πi−] + ← ˆvj[πi, πi−] 8: ˆΠi ← INSERT-INTO-SORTED (πi, ˆΠi) 9: return ˆΠi best expected value, joint policy in lines 21-23.",
                "Algorithm 2 provides the pseudo code for sorting policies based on the upper bounds on the expected values of joint policies.",
                "Expected value for an agent i consists of two parts: value obtained from ancestors and value obtained from its children.",
                "Line 4 computes the expected value obtained from ancestors of the agent (using JOINT-REWARD function), while lines 5-7 compute the heuristic value from the children.",
                "The sum of these two parts yields an upper bound on the expected value for agent i, and line 8 of the algorithm sorts the policies based on these upper bounds. 4.2 MDP based heuristic function The heuristic function quickly provides an upper bound on the expected value obtainable from the agents in Tree(i).",
                "The subtree of agents is a distributed POMDP in itself and the idea here is to construct a centralized MDP corresponding to the (sub-tree) distributed POMDP and obtain the expected value of the optimal policy for this centralized MDP.",
                "To reiterate this in terms of the agents in DFS tree interaction structure, we assume full observability for the agents in Tree(i) and for fixed policies of the agents in {Ancestors(i) ∪ i}, we compute the joint value ˆv[πi+ , πi− ] .",
                "We use the following notation for presenting the equations for computing upper bounds/heuristic values (for agents i and k): Let Ei− denote the set of links between agents in {Ancestors(i)∪ i} and Tree(i), Ei+ denote the set of links between agents in Tree(i).",
                "Also, if l ∈ Ei− , then l1 is the agent in {Ancestors(i)∪ i} and l2 is the agent in Tree(i), that l connects together.",
                "We first compact the standard notation: ot k =Ok(st+1 k , st+1 u , πk(ωt k), ωt+1 k ) (1) pt k =Pk(st k, st u, πk(ωt k), st+1 k ) · ot k pt u =P(st u, st+1 u ) st l = st l1 , st l2 , st u ; ωt l = ωt l1 , ωt l2 rt l =Rl(st l , πl1 (ωt l1 ), πl2 (ωt l2 )) vt l =V t πl (st l , st u, ωt l1 , ωt l2 ) Depending on the location of agent k in the agent tree we have the following cases: IF k ∈ {Ancestors(i) ∪ i}, ˆpt k = pt k, (2) IF k ∈ Tree(i), ˆpt k = Pk(st k, st u, πk(ωt k), st+1 k ) IF l ∈ Ei− , ˆrt l = max {al2 } Rl(st l , πl1 (ωt l1 ), al2 ) IF l ∈ Ei+ , ˆrt l = max {al1 ,al2 } Rl(st l , al1 , al2 ) The value function for an agent i executing the joint policy πi+ at time η − 1 is provided by the equation: V η−1 πi+ (sη−1 , ωη−1 ) = l∈Ei− vη−1 l + l∈Ei+ vη−1 l (3) where vη−1 l = rη−1 l + ω η l ,sη pη−1 l1 pη−1 l2 pη−1 u vη l Algorithm 3 UPPER-BOUND (i, j, πj− ) 1: val ← 0 2: for all l ∈ Ej− ∪ Ej+ do 3: if l ∈ Ej− then πl1 ← φ 4: for all s0 l do 5: val + ← startBel[s0 l ]· UPPER-BOUND-TIME (i, s0 l , j, πl1 , ) 6: return val Algorithm 4 UPPER-BOUND-TIME (i, st l , j, πl1 , ωt l1 ) 1: maxV al ← −∞ 2: for all al1 , al2 do 3: if l ∈ Ei− and l ∈ Ej− then al1 ← πl1 (ωt l1 ) 4: val ← GET-REWARD(st l , al1 , al2 ) 5: if t < πi.horizon − 1 then 6: for all st+1 l , ωt+1 l1 do 7: futV al←pt u ˆpt l1 ˆpt l2 8: futV al ∗ ← UPPER-BOUND-TIME(st+1 l , j, πl1 , ωt l1 ωt+1 l1 ) 9: val + ← futV al 10: if val > maxV al then maxV al ← val 11: return maxV al Upper bound on the expected value for a link is computed by modifying the equation 3 to reflect the full observability assumption.",
                "This involves removing the observational probability term for agents in Tree(i) and maximizing the future value ˆvη l over the actions of those agents (in Tree(i)).",
                "Thus, the equation for the The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 825 computation of the upper bound on a link l, is as follows: IF l ∈ Ei− , ˆvη−1 l =ˆrη−1 l + max al2 ω η l1 ,s η l ˆpη−1 l1 ˆpη−1 l2 pη−1 u ˆvη l IF l ∈ Ei+ , ˆvη−1 l =ˆrη−1 l + max al1 ,al2 s η l ˆpη−1 l1 ˆpη−1 l2 pη−1 u ˆvη l Algorithm 3 and Algorithm 4 provide the algorithm for computing upper bound for child j of agent i, using the equations descirbed above.",
                "While Algorithm 4 computes the upper bound on a link given the starting state, Algorithm 3 sums the upper bound values computed over each of the links in Ei− ∪ Ei+ . 4.3 Abstraction Algorithm 5 SPIDER-ABS(i, πi− , threshold) 1: πi+,∗ ← null 2: Πi ← GET-POLICIES (<>, 1) 3: if IS-LEAF(i) then 4: for all πi ∈ Πi do 5: absHeuristic ← GET-ABS-HEURISTIC (πi, πi−) 6: absHeuristic ∗ ← (timeHorizon − πi.horizon) 7: if πi.horizon = timeHorizon and πi.absNodes = 0 then 8: v[πi, πi−] ← JOINT-REWARD (πi, πi−) 9: if v[πi, πi−] > threshold then 10: πi+,∗ ← πi; threshold ← v[πi, πi−] 11: else if v[πi, πi−] + absHeuristic > threshold then 12: ˆΠi ← EXTEND-POLICY (πi, πi.absNodes + 1) 13: Πi + ← INSERT-SORTED-POLICIES ( ˆΠi) 14: REMOVE(πi) 15: else 16: children ← CHILDREN (i) 17: Πi ← UPPER-BOUND-SORT(i, Πi, πi−) 18: for all πi ∈ Πi do 19: ˜πi+ ← πi 20: absHeuristic ← GET-ABS-HEURISTIC (πi, πi−) 21: absHeuristic ∗ ← (timeHorizon − πi.horizon) 22: if πi.horizon = timeHorizon and πi.absNodes = 0 then 23: if ˆv[πi, πi−] < threshold and πi.absNodes = 0 then 24: Go to line 19 25: for all j ∈ children do 26: jThres ← threshold − v[πi, πi−]− Σk∈children,k=j ˆvk[πi, πi−] 27: πj+,∗ ← SPIDER(j, πi πi−, jThres) 28: ˜πi+ ← ˜πi+ πj+,∗; ˆvj[πi, πi−] ← v[πj+,∗, πi πi−] 29: if v[˜πi+, πi−] > threshold then 30: threshold ← v[˜πi+, πi−]; πi+,∗ ← ˜πi+ 31: else if ˆv[πi+, πi−] + absHeuristic > threshold then 32: ˆΠi ← EXTEND-POLICY (πi, πi.absNodes + 1) 33: Πi + ← INSERT-SORTED-POLICIES (ˆΠi) 34: REMOVE(πi) 35: return πi+,∗ In SPIDER, the exploration/pruning phase can only begin after the heuristic (or upper bound) computation and sorting for the policies has ended.",
                "We provide an approach to possibly circumvent the exploration of a group of policies based on heuristic computation for one abstract policy, thus leading to an improvement in runtime performance (without loss in solution quality).",
                "The important steps in this technique are defining the abstract policy and how heuristic values are computated for the abstract policies.",
                "In this paper, we propose two types of abstraction: 1.",
                "Horizon Based Abstraction (HBA): Here, the abstract policy is defined as a shorter horizon policy.",
                "It represents a group of longer horizon policies that have the same actions as the abstract policy for times less than or equal to the horizon of the abstract policy.",
                "In Figure 3(a), a T=1 abstract policy that performs East action, represents a group of T=2 policies, that perform East in the first time step.",
                "For HBA, there are two parts to heuristic computation: (a) Computing the upper bound for the horizon of the abstract policy.",
                "This is same as the heuristic computation defined by the GETHEURISTIC() algorithm for SPIDER, however with a shorter time horizon (horizon of the abstract policy). (b) Computing the maximum possible reward that can be accumulated in one time step (using GET-ABS-HEURISTIC()) and multiplying it by the number of time steps to time horizon.",
                "This maximum possible reward (for one time step) is obtained by iterating through all the actions of all the agents in Tree(i) and computing the maximum joint reward for any joint action.",
                "Sum of (a) and (b) is the heuristic value for a HBA abstract policy. 2.",
                "Node Based Abstraction (NBA): Here an abstract policy is obtained by not associating actions to certain nodes of the policy tree.",
                "Unlike in HBA, this implies multiple levels of abstraction.",
                "This is illustrated in Figure 3(b), where there are T=2 policies that do not have an action for observation TP.",
                "These incomplete T=2 policies are abstractions for T=2 complete policies.",
                "Increased levels of abstraction leads to faster computation of a complete joint policy, πroot+ and also to shorter heuristic computation and exploration, pruning phases.",
                "For NBA, the heuristic computation is similar to that of a normal policy, except in cases where there is no action associated with policy nodes.",
                "In such cases, the immediate reward is taken as Rmax (maximum reward for any action).",
                "We combine both the abstraction techniques mentioned above into one technique, SPIDER-ABS.",
                "Algorithm 5 provides the algorithm for this abstraction technique.",
                "For computing optimal joint policy with SPIDER-ABS, a non-leaf agent i initially examines all abstract T=1 policies (line 2) and sorts them based on abstract policy heuristic computations (line 17).",
                "The abstraction horizon is gradually increased and these abstract policies are then explored in descending order of heuristic values and ones that have heuristic values less than the threshold are pruned (lines 23-24).",
                "Exploration in SPIDER-ABS has the same definition as in SPIDER if the policy being explored has a horizon of policy computation which is equal to the actual time horizon and if all the nodes of the policy have an action associated with them (lines 25-30).",
                "However, if those conditions are not met, then it is substituted by a group of policies that it represents (using EXTEND-POLICY () function) (lines 31-32).",
                "EXTEND-POLICY() function is also responsible for initializing the horizon and absNodes of a policy. absNodes represents the number of nodes at the last level in the policy tree, that do not have an action assigned to them.",
                "If πi.absNodes = |Ωi|πi.horizon−1 (i.e. total number of policy nodes possible at πi.horizon) , then πi.absNodes is set to zero and πi.horizon is increased by 1.",
                "Otherwise, πi.absNodes is increased by 1.",
                "Thus, this function combines both HBA and NBA by using the policy variables, horizon and absNodes.",
                "Before substituting the abstract policy with a group of policies, those policies are sorted based on heuristic values (line 33).",
                "Similar type of abstraction based best response computation is adopted at leaf agents (lines 3-14). 4.4 Value ApproXimation (VAX) In this section, we present an approximate enhancement to SPIDER called VAX.",
                "The input to this technique is an approximation parameter , which determines the difference from the optimal solution quality.",
                "This approximation parameter is used at each agent for pruning out joint policies.",
                "The pruning mechanism in SPIDER and SPIDER-Abs dictates that a joint policy be pruned only if the threshold is exactly greater than the heuristic value.",
                "However, the 826 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Figure 3: Example of abstraction for (a) HBA (Horizon Based Abstraction) and (b) NBA (Node Based Abstraction) idea in this technique is to prune out joint a policy if the following condition is satisfied: threshold + > ˆv[πi , πi− ].",
                "Apart from the pruning condition, VAX is the same as SPIDER/SPIDER-ABS.",
                "In the example of Figure 2, if the heuristic value for the second joint policy (or second search tree node) in level 2 were 238 instead of 232, then that policy could not be be pruned using SPIDER or SPIDER-Abs.",
                "However, in VAX with an approximation parameter of 5, the joint policy in consideration would also be pruned.",
                "This is because the threshold (234) at that juncture plus the approximation parameter (5), i.e. 239 would have been greater than the heuristic value for that joint policy (238).",
                "It can be noted from the example (just discussed) that this kind of pruning can lead to fewer explorations and hence lead to an improvement in the overall run-time performance.",
                "However, this can entail a sacrifice in the quality of the solution because this technique can prune out a candidate optimal solution.",
                "A bound on the error introduced by this approximate algorithm as a function of , is provided by Proposition 3. 4.5 Percentage ApproXimation (PAX) In this section, we present the second approximation enhancement over SPIDER called PAX.",
                "Input to this technique is a parameter, δ that represents the minimum percentage of the optimal solution quality that is desired.",
                "Output of this technique is a policy with an expected value that is at least δ% of the optimal solution quality.",
                "A policy is pruned if the following condition is satisfied: threshold > δ 100 ˆv[πi , πi− ].",
                "Like in VAX, the only difference between PAX and SPIDER/SPIDER-ABS is this pruning condition.",
                "Again in Figure 2, if the heuristic value for the second search tree node in level 2 were 238 instead of 232, then PAX with an input parameter of 98% would be able to prune that search tree node (since 98 100 ∗238 < 234).",
                "This type of pruning leads to fewer explorations and hence an improvement in run-time performance, while potentially leading to a loss in quality of the solution.",
                "Proposition 4 provides the bound on quality loss. 4.6 Theoretical Results PROPOSITION 1.",
                "Heuristic provided using the centralized MDP heuristic is admissible.",
                "Proof.",
                "For the value provided by the heuristic to be admissible, it should be an over estimate of the expected value for a joint policy.",
                "Thus, we need to show that: For l ∈ Ei+ ∪ Ei− : ˆvt l ≥ vt l (refer to notation in Section 4.2) We use mathematical induction on t to prove this.",
                "Base case: t = T − 1.",
                "Irrespective of whether l ∈ Ei− or l ∈ Ei+ , ˆrt l is computed by maximizing over all actions of the agents in Tree(i), while rt l is computed for fixed policies of the same agents.",
                "Hence, ˆrt l ≥ rt l and also ˆvt l ≥ vt l .",
                "Assumption: Proposition holds for t = η, where 1 ≤ η < T − 1.",
                "We now have to prove that the proposition holds for t = η − 1.",
                "We show the proof for l ∈ Ei− and similar reasoning can be adopted to prove for l ∈ Ei+ .",
                "The heuristic value function for l ∈ Ei− is provided by the following equation: ˆvη−1 l =ˆrη−1 l + max al2 ω η l1 ,s η l ˆpη−1 l1 ˆpη−1 l2 pη−1 u ˆvη l Rewriting the RHS and using Eqn 2 (in Section 4.2) =ˆrη−1 l + max al2 ω η l1 ,s η l pη−1 u pη−1 l1 ˆpη−1 l2 ˆvη l =ˆrη−1 l + ω η l1 ,s η l pη−1 u pη−1 l1 max al2 ˆpη−1 l2 ˆvη l Since maxal2 ˆpη−1 l2 ˆvη l ≥ ωl2 oη−1 l2 ˆpη−1 l2 ˆvη l and pη−1 l2 = oη−1 l2 ˆpη−1 l2 ≥ˆrη−1 l + ω η l1 ,s η l pη−1 u pη−1 l1 ωl2 pη−1 l2 ˆvη l Since ˆvη l ≥ vη l (from the assumption) ≥ˆrη−1 l + ω η l1 ,s η l pη−1 u pη−1 l1 ωl2 pη−1 l2 vη l Since ˆrη−1 l ≥ rη−1 l (by definition) ≥rη−1 l + ω η l1 ,s η l pη−1 u pη−1 l1 ωl2 pη−1 l2 vη l =rη−1 l + (ω η l ,s η l ) pη−1 u pη−1 l1 pη−1 l2 vη l = vη−1 l Thus proved.",
                "PROPOSITION 2.",
                "SPIDER provides an optimal solution.",
                "Proof.",
                "SPIDER examines all possible joint policies given the interaction structure of the agents.",
                "The only exception being when a joint policy is pruned based on the heuristic value.",
                "Thus, as long as a candidate optimal policy is not pruned, SPIDER will return an optimal policy.",
                "As proved in Proposition 1, the expected value for a joint policy is always an upper bound.",
                "Hence when a joint policy is pruned, it cannot be an optimal solution.",
                "PROPOSITION 3.",
                "Error bound on the solution quality for VAX (implemented over SPIDER-ABS) with an approximation parameter of is ρ , where ρ is the number of leaf nodes in the DFS tree.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 827 Proof.",
                "We prove this proposition using mathematical induction on the depth of the DFS tree.",
                "Base case: depth = 1 (i.e. one node).",
                "Best response is computed by iterating through all policies, Πk.",
                "A policy,πk is pruned if ˆv[πk, πk− ] < threshold + .",
                "Thus the best response policy computed by VAX would be at most away from the optimal best response.",
                "Hence the proposition holds for the base case.",
                "Assumption: Proposition holds for d, where 1 ≤ depth ≤ d. We now have to prove that the proposition holds for d + 1.",
                "Without loss of generality, lets assume that the root node of this tree has k children.",
                "Each of this children is of depth ≤ d, and hence from the assumption, the error introduced in kth child is ρk , where ρk is the number of leaf nodes in kth child of the root.",
                "Therefore, ρ = k ρk, where ρ is the number of leaf nodes in the tree.",
                "In SPIDER-ABS, threshold at the root agent, thresspider = k v[πk+ , πk− ].",
                "However, with VAX the threshold at the root agent will be (in the worst case), threshvax = k v[πk+ , πk− ]− k ρk .",
                "Hence, with VAX a joint policy is pruned at the root agent if ˆv[πroot, πroot− ] < threshvax + ⇒ ˆv[πroot, πroot− ] < threshspider − (( k ρk) − 1) ≤ threshspider − ( k ρk) ≤ threshspider − ρ .",
                "Hence proved.",
                "PROPOSITION 4.",
                "For PAX (implemented over SPIDER-ABS) with an input parameter of δ, the solution quality is at least δ 100 v[πroot+,∗ ], where v[πroot+,∗ ] denotes the optimal solution quality.",
                "Proof.",
                "We prove this proposition using mathematical induction on the depth of the DFS tree.",
                "Base case: depth = 1 (i.e. one node).",
                "Best response is computed by iterating through all policies, Πk.",
                "A policy,πk is pruned if δ 100 ˆv[πk, πk− ] < threshold.",
                "Thus the best response policy computed by PAX would be at least δ 100 times the optimal best response.",
                "Hence the proposition holds for the base case.",
                "Assumption: Proposition holds for d, where 1 ≤ depth ≤ d. We now have to prove that the proposition holds for d + 1.",
                "Without loss of generality, lets assume that the root node of this tree has k children.",
                "Each of this children is of depth ≤ d, and hence from the assumption, the solution quality in the kth child is at least δ 100 v[πk+,∗ , πk− ] for PAX.",
                "With SPIDER-ABS, a joint policy is pruned at the root agent if ˆv[πroot, πroot− ] < k v[πk+,∗ , πk− ].",
                "However with PAX, a joint policy is pruned if δ 100 ˆv[πroot, πroot− ] < k δ 100 v[πk+,∗ , πk− ] ⇒ ˆv[πroot, πroot− ] < k v[πk+,∗ , πk− ].",
                "Since the pruning condition at the root agent in PAX is the same as the one in SPIDER-ABS, there is no error introduced at the root agent and all the error is introduced in the children.",
                "Thus, overall solution quality is at least δ 100 of the optimal solution.",
                "Hence proved. 5.",
                "EXPERIMENTAL RESULTS All our experiments were conducted on the sensor network domain from Section 2.",
                "The five network configurations employed are shown in Figure 4.",
                "Algorithms that we experimented with are GOA, SPIDER, SPIDER-ABS, PAX and VAX.",
                "We compare against GOA because it is the only global optimal algorithm that considers more than two agents.",
                "We performed two sets of experiments: (i) firstly, we compared the run-time performance of the above algorithms and (ii) secondly, we experimented with PAX and VAX to study the tradeoff between run-time and solution quality.",
                "Experiments were terminated after 10000 seconds1 .",
                "Figure 5(a) provides run-time comparisons between the optimal algorithms GOA, SPIDER, SPIDER-Abs and the approximate algorithms, PAX ( of 30) and VAX(δ of 80).",
                "X-axis denotes the 1 Machine specs for all experiments: Intel Xeon 3.6 GHZ processor, 2GB RAM sensor network configuration used, while Y-axis indicates the runtime (on a log-scale).",
                "The time horizon of policy computation was 3.",
                "For each configuration (3-chain, 4-chain, 4-star and 5-star), there are five bars indicating the time taken by GOA, SPIDER, SPIDERAbs, PAX and VAX.",
                "GOA did not terminate within the time limit for 4-star and 5-star configurations.",
                "SPIDER-Abs dominated the SPIDER and GOA for all the configurations.",
                "For instance, in the 3chain configuration, SPIDER-ABS provides 230-fold speedup over GOA and 2-fold speedup over SPIDER and for the 4-chain configuration it provides 58-fold speedup over GOA and 2-fold speedup over SPIDER.",
                "The two approximation approaches, VAX and PAX provided further improvement in performance over SPIDER-Abs.",
                "For instance, in the 5-star configuration VAX provides a 15-fold speedup and PAX provides a 8-fold speedup over SPIDER-Abs.",
                "Figures 5(b) provides a comparison of the solution quality obtained using the different algorithms for the problems tested in Figure 5(a).",
                "X-axis denotes the sensor network configuration while Y-axis indicates the solution quality.",
                "Since GOA, SPIDER, and SPIDER-Abs are all global optimal algorithms, the solution quality is the same for all those algorithms.",
                "For 5-P configuration, the global optimal algorithms did not terminate within the limit of 10000 seconds, so the bar for optimal quality indicates an upper bound on the optimal solution quality.",
                "With both the approximations, we obtained a solution quality that was close to the optimal solution quality.",
                "In 3-chain and 4-star configurations, it is remarkable that both PAX and VAX obtained almost the same actual quality as the global optimal algorithms, despite the approximation parameter and δ.",
                "For other configurations as well, the loss in quality was less than 20% of the optimal solution quality.",
                "Figure 5(c) provides the time to solution with PAX (for varying epsilons).",
                "X-axis denotes the approximation parameter, δ (percentage to optimal) used, while Y-axis denotes the time taken to compute the solution (on a log-scale).",
                "The time horizon for all the configurations was 4.",
                "As δ was decreased from 70 to 30, the time to solution decreased drastically.",
                "For instance, in the 3-chain case there was a total speedup of 170-fold when the δ was changed from 70 to 30.",
                "Interestingly, even with a low δ of 30%, the actual solution quality remained equal to the one obtained at 70%.",
                "Figure 5(d) provides the time to solution for all the configurations with VAX (for varying epsilons).",
                "X-axis denotes the approximation parameter, used, while Y-axis denotes the time taken to compute the solution (on a log-scale).",
                "The time horizon for all the configurations was 4.",
                "As was increased, the time to solution decreased drastically.",
                "For instance, in the 4-star case there was a total speedup of 73-fold when the was changed from 60 to 140.",
                "Again, the actual solution quality did not change with varying epsilon.",
                "Figure 4: Sensor network configurations 828 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Figure 5: Comparison of GOA, SPIDER, SPIDER-Abs and VAX for T = 3 on (a) Runtime and (b) Solution quality; (c) Time to solution for PAX with varying percentage to optimal for T=4 (d) Time to solution for VAX with varying epsilon for T=4 6.",
                "SUMMARY AND RELATED WORK This paper presents four algorithms SPIDER, SPIDER-ABS, PAX and VAX that provide a novel combination of features for policy search in distributed POMDPs: (i) exploiting agent interaction structure given a network of agents (i.e. easier scale-up to larger number of agents); (ii) using branch and bound search with an MDP based heuristic function; (iii) utilizing abstraction to improve runtime performance without sacrificing solution quality; (iv) providing a priori percentage bounds on quality of solutions using PAX; and (v) providing expected value bounds on the quality of solutions using VAX.",
                "These features allow for systematic tradeoff of solution quality for run-time in networks of agents operating under uncertainty.",
                "Experimental results show orders of magnitude improvement in performance over previous global optimal algorithms.",
                "Researchers have typically employed two types of techniques for solving distributed POMDPs.",
                "The first set of techniques compute global optimal solutions.",
                "Hansen et al. [5] present an algorithm based on dynamic programming and iterated elimination of dominant policies, that provides optimal solutions for distributed POMDPs.",
                "Szer et al. [13] provide an optimal heuristic search method for solving Decentralized POMDPs.",
                "This algorithm is based on the combination of a classical heuristic search algorithm, A∗ and decentralized control theory.",
                "The key differences between SPIDER and MAA* are: (a) Enhancements to SPIDER (VAX and PAX) provide for quality guaranteed approximations, while MAA* is a global optimal algorithm and hence involves significant computational complexity; (b) Due to MAA*s inability to exploit interaction structure, it was illustrated only with two agents.",
                "However, SPIDER has been illustrated for networks of agents; and (c) SPIDER explores the joint policy one agent at a time, while MAA* expands it one time step at a time (simultaneously for all the agents).",
                "The second set of techniques seek approximate policies.",
                "EmeryMontemerlo et al. [4] approximate POSGs as a series of one-step Bayesian games using heuristics to approximate future value, trading off limited lookahead for computational efficiency, resulting in locally optimal policies (with respect to the selected heuristic).",
                "Nair et al. [9]s JESP algorithm uses dynamic programming to reach a local optimum solution for finite horizon decentralized POMDPs.",
                "Peshkin et al. [11] and Bernstein et al. [2] are examples of policy search techniques that search for locally optimal policies.",
                "Though all the above techniques improve the efficiency of policy computation considerably, they are unable to provide error bounds on the quality of the solution.",
                "This aspect of quality bounds differentiates SPIDER from all the above techniques.",
                "Acknowledgements.",
                "This material is based upon work supported by the Defense Advanced Research Projects Agency (DARPA), through the Department of the Interior, NBC, Acquisition Services Division under Contract No.",
                "NBCHD030010.",
                "The views and conclusions contained in this document are those of the authors, and should not be interpreted as representing the official policies, either expressed or implied, of the Defense Advanced Research Projects Agency or the U.S. Government. 7.",
                "REFERENCES [1] R. Becker, S. Zilberstein, V. Lesser, and C.V. Goldman.",
                "Solving transition independent decentralized Markov decision processes.",
                "JAIR, 22:423-455, 2004. [2] D. S. Bernstein, E.A.",
                "Hansen, and S. Zilberstein.",
                "Bounded policy iteration for decentralized POMDPs.",
                "In IJCAI, 2005. [3] D. S. Bernstein, S. Zilberstein, and N. Immerman.",
                "The complexity of decentralized control of MDPs.",
                "In UAI, 2000. [4] R. Emery-Montemerlo, G. Gordon, J. Schneider, and S. Thrun.",
                "Approximate solutions for partially observable stochastic games with common payoffs.",
                "In AAMAS, 2004. [5] E. Hansen, D. Bernstein, and S. Zilberstein.",
                "Dynamic programming for partially observable stochastic games.",
                "In AAAI, 2004. [6] V. Lesser, C. Ortiz, and M. Tambe.",
                "Distributed sensor nets: A multiagent perspective.",
                "Kluwer, 2003. [7] R. Maheswaran, M. Tambe, E. Bowring, J. Pearce, and P. Varakantham.",
                "Taking dcop to the real world : Efficient complete solutions for distributed event scheduling.",
                "In AAMAS, 2004. [8] P. J. Modi, W. Shen, M. Tambe, and M. Yokoo.",
                "An asynchronous complete method for distributed constraint optimization.",
                "In AAMAS, 2003. [9] R. Nair, D. Pynadath, M. Yokoo, M. Tambe, and S. Marsella.",
                "Taming decentralized POMDPs: Towards efficient policy computation for multiagent settings.",
                "In IJCAI, 2003. [10] R. Nair, P. Varakantham, M. Tambe, and M. Yokoo.",
                "Networked distributed POMDPs: A synthesis of distributed constraint optimization and POMDPs.",
                "In AAAI, 2005. [11] L. Peshkin, N. Meuleau, K.-E. Kim, and L. Kaelbling.",
                "Learning to cooperate via policy search.",
                "In UAI, 2000. [12] A. Petcu and B. Faltings.",
                "A scalable method for multiagent constraint optimization.",
                "In IJCAI, 2005. [13] D. Szer, F. Charpillet, and S. Zilberstein.",
                "MAA*: A heuristic search algorithm for solving decentralized POMDPs.",
                "In IJCAI, 2005.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 829"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Permitir una araña en una red de POMDPS: Generar \"Políticas garantizadas de calidad\" Pradeep Varakantham, Janusz Marecki, Yuichi Yabu ∗, Milind Tambe, Makoto Yokoo ∗ Universidad del Sur de California, Los Ángeles, CA 90089, {Varakant, Marecki, Tambe}@USC."
            ],
            "translated_text": "",
            "candidates": [
                "Edu ∗ Políticas garantizadas de Calidad",
                "Políticas garantizadas de calidad"
            ],
            "error": []
        },
        "distributed partially observable markov decision problem": {
            "translated_key": "Problema de decisión de Markov distribuido parcialmente observable",
            "is_in_text": false,
            "original_annotated_sentences": [
                "Letting loose a SPIDER on a network of POMDPs: Generating quality guaranteed policies Pradeep Varakantham, Janusz Marecki, Yuichi Yabu∗ , Milind Tambe, Makoto Yokoo∗ University of Southern California, Los Angeles, CA 90089, {varakant, marecki, tambe}@usc.edu ∗ Dept.",
                "of Intelligent Systems, Kyushu University, Fukuoka, 812-8581 Japan, yokoo@is.kyushu-u.ac.jp ABSTRACT Distributed Partially Observable Markov Decision Problems (Distributed POMDPs) are a popular approach for modeling multi-agent systems acting in uncertain domains.",
                "Given the significant complexity of solving distributed POMDPs, particularly as we scale up the numbers of agents, one popular approach has focused on approximate solutions.",
                "Though this approach is efficient, the algorithms within this approach do not provide any guarantees on solution quality.",
                "A second less popular approach focuses on global optimality, but typical results are available only for two agents, and also at considerable computational cost.",
                "This paper overcomes the limitations of both these approaches by providing SPIDER, a novel combination of three key features for policy generation in distributed POMDPs: (i) it exploits agent interaction structure given a network of agents (i.e. allowing easier scale-up to larger number of agents); (ii) it uses a combination of heuristics to speedup policy search; and (iii) it allows quality guaranteed approximations, allowing a systematic tradeoff of solution quality for time.",
                "Experimental results show orders of magnitude improvement in performance when compared with previous global optimal algorithms.",
                "Categories and Subject Descriptors I.2.11 [Artificial Intelligence]: Distributed Artificial IntelligenceMulti-agent Systems General Terms Algorithms, Theory 1.",
                "INTRODUCTION Distributed Partially Observable Markov Decision Problems (Distributed POMDPs) are emerging as a popular approach for modeling sequential decision making in teams operating under uncertainty [9, 4, 1, 2, 13].",
                "The uncertainty arises on account of nondeterminism in the outcomes of actions and because the world state may only be partially (or incorrectly) observable.",
                "Unfortunately, as shown by Bernstein et al. [3], the problem of finding the optimal joint policy for general distributed POMDPs is NEXP-Complete.",
                "Researchers have attempted two different types of approaches towards solving these models.",
                "The first category consists of highly efficient approximate techniques, that may not reach globally optimal solutions [2, 9, 11].",
                "The key problem with these techniques has been their inability to provide any guarantees on the quality of the solution.",
                "In contrast, the second less popular category of approaches has focused on a global optimal result [13, 5, 10].",
                "Though these approaches obtain optimal solutions, they typically consider only two agents.",
                "Furthermore, they fail to exploit structure in the interactions of the agents and hence are severely hampered with respect to scalability when considering more than two agents.",
                "To address these problems with the existing approaches, we propose approximate techniques that provide guarantees on the quality of the solution while focussing on a network of more than two agents.",
                "We first propose the basic SPIDER (Search for Policies In Distributed EnviRonments) algorithm.",
                "There are two key novel features in SPIDER: (i) it is a branch and bound heuristic search technique that uses a MDP-based heuristic function to search for an optimal joint policy; (ii) it exploits network structure of agents by organizing agents into a Depth First Search (DFS) pseudo tree and takes advantage of the independence in the different branches of the DFS tree.",
                "We then provide three enhancements to improve the efficiency of the basic SPIDER algorithm while providing guarantees on the quality of the solution.",
                "The first enhancement uses abstractions for speedup, but does not sacrifice solution quality.",
                "In particular, it initially performs branch and bound search on abstract policies and then extends to complete policies.",
                "The second enhancement obtains speedups by sacrificing solution quality, but within an input parameter that provides the tolerable expected value difference from the optimal solution.",
                "The third enhancement is again based on bounding the search for efficiency, however with a tolerance parameter that is provided as a percentage of optimal.",
                "We experimented with the sensor network domain presented in Nair et al. [10], a domain representative of an important class of problems with networks of agents working in uncertain environments.",
                "In our experiments, we illustrate that SPIDER dominates an existing global optimal approach called GOA [10], the only known global optimal algorithm with demonstrated experimental results for more than two agents.",
                "Furthermore, we demonstrate that abstraction improves the performance of SPIDER significantly (while providing optimal solutions).",
                "We finally demonstrate a key feature of SPIDER: by utilizing the approximation enhancements it enables principled tradeoffs in run-time versus solution quality. 822 978-81-904262-7-5 (RPS) c 2007 IFAAMAS 2.",
                "DOMAIN: DISTRIBUTED SENSOR NETS Distributed sensor networks are a large, important class of domains that motivate our work.",
                "This paper focuses on a set of target tracking problems that arise in certain types of sensor networks [6] first introduced in [10].",
                "Figure 1 shows a specific problem instance within this type consisting of three sensors.",
                "Here, each sensor node can scan in one of four directions: North, South, East or West (see Figure 1).",
                "To track a target and obtain associated reward, two sensors with overlapping scanning areas must coordinate by scanning the same area simultaneously.",
                "In Figure 1, to track a target in Loc11, sensor1 needs to scan East and sensor2 needs to scan West simultaneously.",
                "Thus, sensors have to act in a coordinated fashion.",
                "We assume that there are two independent targets and that each targets movement is uncertain and unaffected by the sensor agents.",
                "Based on the area it is scanning, each sensor receives observations that can have false positives and false negatives.",
                "The sensors observations and transitions are independent of each others actions e.g.the observations that sensor1 receives are independent of sensor2s actions.",
                "Each agent incurs a cost for scanning whether the target is present or not, but no cost if it turns off.",
                "Given the sensors observational uncertainty, the targets uncertain transitions and the distributed nature of the sensor nodes, these sensor nets provide a useful domains for applying distributed POMDP models.",
                "Figure 1: A 3-chain sensor configuration 3.",
                "BACKGROUND 3.1 Model: Network Distributed POMDP The ND-POMDP model was introduced in [10], motivated by domains such as the sensor networks introduced in Section 2.",
                "It is defined as the tuple S, A, P, Ω, O, R, b , where S = ×1≤i≤nSi × Su is the set of world states.",
                "Si refers to the set of local states of agent i and Su is the set of unaffectable states.",
                "Unaffectable state refers to that part of the world state that cannot be affected by the agents actions, e.g. environmental factors like target locations that no agent can control.",
                "A = ×1≤i≤nAi is the set of joint actions, where Ai is the set of action for agent i. ND-POMDP assumes transition independence, where the transition function is defined as P(s, a, s ) = Pu(su, su) · 1≤i≤n Pi(si, su, ai, si), where a = a1, . . . , an is the joint action performed in state s = s1, . . . , sn, su and s = s1, . . . , sn, su is the resulting state.",
                "Ω = ×1≤i≤nΩi is the set of joint observations where Ωi is the set of observations for agents i. Observational independence is assumed in ND-POMDPs i.e., the joint observation function is defined as O(s, a, ω) = 1≤i≤n Oi(si, su, ai, ωi), where s = s1, . . . , sn, su is the world state that results from the agents performing a = a1, . . . , an in the previous state, and ω = ω1, . . . , ωn ∈ Ω is the observation received in state s. This implies that each agents observation depends only on the unaffectable state, its local action and on its resulting local state.",
                "The reward function, R, is defined as R(s, a) = l Rl(sl1, . . . , slr, su, al1, . . . , alr ), where each l could refer to any sub-group of agents and r = |l|.",
                "Based on the reward function, an interaction hypergraph is constructed.",
                "A hyper-link, l, exists between a subset of agents for all Rl that comprise R. The interaction hypergraph is defined as G = (Ag, E), where the agents, Ag, are the vertices and E = {l|l ⊆ Ag ∧ Rl is a component of R} are the edges.",
                "The initial belief state (distribution over the initial state), b, is defined as b(s) = bu(su) · 1≤i≤n bi(si), where bu and bi refer to the distribution over initial unaffectable state and agent is initial belief state, respectively.",
                "The goal in ND-POMDP is to compute the joint policy π = π1, . . . , πn that maximizes teams expected reward over a finite horizon T starting from the belief state b.",
                "An ND-POMDP is similar to an n-ary Distributed Constraint Optimization Problem (DCOP)[8, 12] where the variable at each node represents the policy selected by an individual agent, πi with the domain of the variable being the set of all local policies, Πi.",
                "The reward component Rl where |l| = 1 can be thought of as a local constraint while the reward component Rl where l > 1 corresponds to a non-local constraint in the constraint graph. 3.2 Algorithm: Global Optimal Algorithm (GOA) In previous work, GOA has been defined as a global optimal algorithm for ND-POMDPs [10].",
                "We will use GOA in our experimental comparisons, since GOA is a state-of-the-art global optimal algorithm, and in fact the only one with experimental results available for networks of more than two agents.",
                "GOA borrows from a global optimal DCOP algorithm called DPOP[12].",
                "GOAs message passing follows that of DPOP.",
                "The first phase is the UTIL propagation, where the utility messages, in this case values of policies, are passed up from the leaves to the root.",
                "Value for a policy at an agent is defined as the sum of best response values from its children and the joint policy reward associated with the parent policy.",
                "Thus, given a policy for a parent node, GOA requires an agent to iterate through all its policies, finding the best response policy and returning the value to the parent - while at the parent node, to find the best policy, an agent requires its children to return their best responses to each of its policies.",
                "This UTIL propagation process is repeated at each level in the tree, until the root exhausts all its policies.",
                "In the second phase of VALUE propagation, where the optimal policies are passed down from the root till the leaves.",
                "GOA takes advantage of the local interactions in the interaction graph, by pruning out unnecessary joint policy evaluations (associated with nodes not connected directly in the tree).",
                "Since the interaction graph captures all the reward interactions among agents and as this algorithm iterates through all the relevant joint policy evaluations, this algorithm yields a globally optimal solution. 4.",
                "SPIDER As mentioned in Section 3.1, an ND-POMDP can be treated as a DCOP, where the goal is to compute a joint policy that maximizes the overall joint reward.",
                "The brute-force technique for computing an optimal policy would be to examine the expected values for all possible joint policies.",
                "The key idea in SPIDER is to avoid computation of expected values for the entire space of joint policies, by utilizing upper bounds on the expected values of policies and the interaction structure of the agents.",
                "Akin to some of the algorithms for DCOP [8, 12], SPIDER has a pre-processing step that constructs a DFS tree corresponding to the given interaction structure.",
                "Note that these DFS trees are pseudo trees [12] that allow links between ancestors and children.",
                "We employ the Maximum Constrained Node (MCN) heuristic used in the DCOP algorithm, ADOPT [8], however other heuristics (such as MLSP heuristic from [7]) can also be employed.",
                "MCN heuristic tries to place agents with more number of constraints at the top of the tree.",
                "This tree governs how the search for the optimal joint polThe Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 823 icy proceeds in SPIDER.",
                "The algorithms presented in this paper are easily extendable to hyper-trees, however for expository purposes, we assume binary trees.",
                "SPIDER is an algorithm for centralized planning and distributed execution in distributed POMDPs.",
                "In this paper, we employ the following notation to denote policies and expected values: Ancestors(i) ⇒ agents from i to the root (not including i).",
                "Tree(i) ⇒ agents in the sub-tree (not including i) for which i is the root. πroot+ ⇒ joint policy of all agents. πi+ ⇒ joint policy of all agents in Tree(i) ∪ i. πi− ⇒ joint policy of agents that are in Ancestors(i). πi ⇒ policy of the ith agent. ˆv[πi, πi− ] ⇒ upper bound on the expected value for πi+ given πi and policies of ancestor agents i.e. πi− . ˆvj[πi, πi− ] ⇒ upper bound on the expected value for πi+ from the jth child. v[πi, πi− ] ⇒ expected value for πi given policies of ancestor agents, πi− . v[πi+ , πi− ] ⇒ expected value for πi+ given policies of ancestor agents, πi− . vj[πi+ , πi− ] ⇒ expected value for πi+ from the jth child.",
                "Figure 2: Execution of SPIDER, an example 4.1 Outline of SPIDER SPIDER is based on the idea of branch and bound search, where the nodes in the search tree represent partial/complete joint policies.",
                "Figure 2 shows an example search tree for the SPIDER algorithm, using an example of the three agent chain.",
                "Before SPIDER begins its search we create a DFS tree (i.e. pseudo tree) from the three agent chain, with the middle agent as the root of this tree.",
                "SPIDER exploits the structure of this DFS tree while engaging in its search.",
                "Note that in our example figure, each agent is assigned a policy with T=2.",
                "Thus, each rounded rectange (search tree node) indicates a partial/complete joint policy, a rectangle indicates an agent and the ovals internal to an agent show its policy.",
                "Heuristic or actual expected value for a joint policy is indicated in the top right corner of the rounded rectangle.",
                "If the number is italicized and underlined, it implies that the actual expected value of the joint policy is provided.",
                "SPIDER begins with no policy assigned to any of the agents (shown in the level 1 of the search tree).",
                "Level 2 of the search tree indicates that the joint policies are sorted based on upper bounds computed for root agents policies.",
                "Level 3 shows one SPIDER search node with a complete joint policy (a policy assigned to each of the agents).",
                "The expected value for this joint policy is used to prune out the nodes in level 2 (the ones with upper bounds < 234) When creating policies for each non-leaf agent i, SPIDER potentially performs two steps: 1.",
                "Obtaining upper bounds and sorting: In this step, agent i computes upper bounds on the expected values, ˆv[πi, πi− ] of the joint policies πi+ corresponding to each of its policy πi and fixed ancestor policies.",
                "An MDP based heuristic is used to compute these upper bounds on the expected values.",
                "Detailed description about this MDP heuristic is provided in Section 4.2.",
                "All policies of agent i, Πi are then sorted based on these upper bounds (also referred to as heuristic values henceforth) in descending order.",
                "Exploration of these policies (in step 2 below) are performed in this descending order.",
                "As indicated in the level 2 of the search tree (of Figure 2), all the joint policies are sorted based on the heuristic values, indicated in the top right corner of each joint policy.",
                "The intuition behind sorting and then exploring policies in descending order of upper bounds, is that the policies with higher upper bounds could yield joint policies with higher expected values. 2.",
                "Exploration and Pruning: Exploration implies computing the best response joint policy πi+,∗ corresponding to fixed ancestor policies of agent i, πi− .",
                "This is performed by iterating through all policies of agent i i.e.",
                "Πi and summing two quantities for each policy: (i) the best response for all of is children (obtained by performing steps 1 and 2 at each of the child nodes); (ii) the expected value obtained by i for fixed policies of ancestors.",
                "Thus, exploration of a policy πi yields actual expected value of a joint policy, πi+ represented as v[πi+ , πi− ].",
                "The policy with the highest expected value is the best response policy.",
                "Pruning refers to avoiding exploring all policies (or computing expected values) at agent i by using the current best expected value, vmax [πi+ , πi− ].",
                "Henceforth, this vmax [πi+ , πi− ] will be referred to as threshold.",
                "A policy, πi need not be explored if the upper bound for that policy, ˆv[πi, πi− ] is less than the threshold.",
                "This is because the expected value for the best joint policy attainable for that policy will be less than the threshold.",
                "On the other hand, when considering a leaf agent, SPIDER computes the best response policy (and consequently its expected value) corresponding to fixed policies of its ancestors, πi− .",
                "This is accomplished by computing expected values for each of the policies (corresponding to fixed policies of ancestors) and selecting the highest expected value policy.",
                "In Figure 2, SPIDER assigns best response policies to leaf agents at level 3.",
                "The policy for the left leaf agent is to perform action East at each time step in the policy, while the policy for the right leaf agent is to perform Off at each time step.",
                "These best response policies from the leaf agents yield an actual expected value of 234 for the complete joint policy.",
                "Algorithm 1 provides the pseudo code for SPIDER.",
                "This algorithm outputs the best joint policy, πi+,∗ (with an expected value greater than threshold) for the agents in Tree(i).",
                "Lines 3-8 compute the best response policy of a leaf agent i, while lines 9-23 computes the best response joint policy for agents in Tree(i).",
                "This best response computation for a non-leaf agent i includes: (a) Sorting of policies (in descending order) based on heuristic values on line 11; (b) Computing best response policies at each of the children for fixed policies of agent i in lines 16-20; and (c) Maintaining 824 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Algorithm 1 SPIDER(i, πi− , threshold) 1: πi+,∗ ← null 2: Πi ← GET-ALL-POLICIES (horizon, Ai, Ωi) 3: if IS-LEAF(i) then 4: for all πi ∈ Πi do 5: v[πi, πi−] ← JOINT-REWARD (πi, πi−) 6: if v[πi, πi−] > threshold then 7: πi+,∗ ← πi 8: threshold ← v[πi, πi−] 9: else 10: children ← CHILDREN (i) 11: ˆΠi ← UPPER-BOUND-SORT(i, Πi, πi−) 12: for all πi ∈ ˆΠi do 13: ˜πi+ ← πi 14: if ˆv[πi, πi−] < threshold then 15: Go to line 12 16: for all j ∈ children do 17: jThres ← threshold − v[πi, πi−]− Σk∈children,k=j ˆvk[πi, πi−] 18: πj+,∗ ← SPIDER(j, πi πi−, jThres) 19: ˜πi+ ← ˜πi+ πj+,∗ 20: ˆvj[πi, πi−] ← v[πj+,∗, πi πi−] 21: if v[˜πi+, πi−] > threshold then 22: threshold ← v[˜πi+, πi−] 23: πi+,∗ ← ˜πi+ 24: return πi+,∗ Algorithm 2 UPPER-BOUND-SORT(i, Πi, πi− ) 1: children ← CHILDREN (i) 2: ˆΠi ← null /* Stores the sorted list */ 3: for all πi ∈ Πi do 4: ˆv[πi, πi−] ← JOINT-REWARD (πi, πi−) 5: for all j ∈ children do 6: ˆvj[πi, πi−] ← UPPER-BOUND(i, j, πi πi−) 7: ˆv[πi, πi−] + ← ˆvj[πi, πi−] 8: ˆΠi ← INSERT-INTO-SORTED (πi, ˆΠi) 9: return ˆΠi best expected value, joint policy in lines 21-23.",
                "Algorithm 2 provides the pseudo code for sorting policies based on the upper bounds on the expected values of joint policies.",
                "Expected value for an agent i consists of two parts: value obtained from ancestors and value obtained from its children.",
                "Line 4 computes the expected value obtained from ancestors of the agent (using JOINT-REWARD function), while lines 5-7 compute the heuristic value from the children.",
                "The sum of these two parts yields an upper bound on the expected value for agent i, and line 8 of the algorithm sorts the policies based on these upper bounds. 4.2 MDP based heuristic function The heuristic function quickly provides an upper bound on the expected value obtainable from the agents in Tree(i).",
                "The subtree of agents is a distributed POMDP in itself and the idea here is to construct a centralized MDP corresponding to the (sub-tree) distributed POMDP and obtain the expected value of the optimal policy for this centralized MDP.",
                "To reiterate this in terms of the agents in DFS tree interaction structure, we assume full observability for the agents in Tree(i) and for fixed policies of the agents in {Ancestors(i) ∪ i}, we compute the joint value ˆv[πi+ , πi− ] .",
                "We use the following notation for presenting the equations for computing upper bounds/heuristic values (for agents i and k): Let Ei− denote the set of links between agents in {Ancestors(i)∪ i} and Tree(i), Ei+ denote the set of links between agents in Tree(i).",
                "Also, if l ∈ Ei− , then l1 is the agent in {Ancestors(i)∪ i} and l2 is the agent in Tree(i), that l connects together.",
                "We first compact the standard notation: ot k =Ok(st+1 k , st+1 u , πk(ωt k), ωt+1 k ) (1) pt k =Pk(st k, st u, πk(ωt k), st+1 k ) · ot k pt u =P(st u, st+1 u ) st l = st l1 , st l2 , st u ; ωt l = ωt l1 , ωt l2 rt l =Rl(st l , πl1 (ωt l1 ), πl2 (ωt l2 )) vt l =V t πl (st l , st u, ωt l1 , ωt l2 ) Depending on the location of agent k in the agent tree we have the following cases: IF k ∈ {Ancestors(i) ∪ i}, ˆpt k = pt k, (2) IF k ∈ Tree(i), ˆpt k = Pk(st k, st u, πk(ωt k), st+1 k ) IF l ∈ Ei− , ˆrt l = max {al2 } Rl(st l , πl1 (ωt l1 ), al2 ) IF l ∈ Ei+ , ˆrt l = max {al1 ,al2 } Rl(st l , al1 , al2 ) The value function for an agent i executing the joint policy πi+ at time η − 1 is provided by the equation: V η−1 πi+ (sη−1 , ωη−1 ) = l∈Ei− vη−1 l + l∈Ei+ vη−1 l (3) where vη−1 l = rη−1 l + ω η l ,sη pη−1 l1 pη−1 l2 pη−1 u vη l Algorithm 3 UPPER-BOUND (i, j, πj− ) 1: val ← 0 2: for all l ∈ Ej− ∪ Ej+ do 3: if l ∈ Ej− then πl1 ← φ 4: for all s0 l do 5: val + ← startBel[s0 l ]· UPPER-BOUND-TIME (i, s0 l , j, πl1 , ) 6: return val Algorithm 4 UPPER-BOUND-TIME (i, st l , j, πl1 , ωt l1 ) 1: maxV al ← −∞ 2: for all al1 , al2 do 3: if l ∈ Ei− and l ∈ Ej− then al1 ← πl1 (ωt l1 ) 4: val ← GET-REWARD(st l , al1 , al2 ) 5: if t < πi.horizon − 1 then 6: for all st+1 l , ωt+1 l1 do 7: futV al←pt u ˆpt l1 ˆpt l2 8: futV al ∗ ← UPPER-BOUND-TIME(st+1 l , j, πl1 , ωt l1 ωt+1 l1 ) 9: val + ← futV al 10: if val > maxV al then maxV al ← val 11: return maxV al Upper bound on the expected value for a link is computed by modifying the equation 3 to reflect the full observability assumption.",
                "This involves removing the observational probability term for agents in Tree(i) and maximizing the future value ˆvη l over the actions of those agents (in Tree(i)).",
                "Thus, the equation for the The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 825 computation of the upper bound on a link l, is as follows: IF l ∈ Ei− , ˆvη−1 l =ˆrη−1 l + max al2 ω η l1 ,s η l ˆpη−1 l1 ˆpη−1 l2 pη−1 u ˆvη l IF l ∈ Ei+ , ˆvη−1 l =ˆrη−1 l + max al1 ,al2 s η l ˆpη−1 l1 ˆpη−1 l2 pη−1 u ˆvη l Algorithm 3 and Algorithm 4 provide the algorithm for computing upper bound for child j of agent i, using the equations descirbed above.",
                "While Algorithm 4 computes the upper bound on a link given the starting state, Algorithm 3 sums the upper bound values computed over each of the links in Ei− ∪ Ei+ . 4.3 Abstraction Algorithm 5 SPIDER-ABS(i, πi− , threshold) 1: πi+,∗ ← null 2: Πi ← GET-POLICIES (<>, 1) 3: if IS-LEAF(i) then 4: for all πi ∈ Πi do 5: absHeuristic ← GET-ABS-HEURISTIC (πi, πi−) 6: absHeuristic ∗ ← (timeHorizon − πi.horizon) 7: if πi.horizon = timeHorizon and πi.absNodes = 0 then 8: v[πi, πi−] ← JOINT-REWARD (πi, πi−) 9: if v[πi, πi−] > threshold then 10: πi+,∗ ← πi; threshold ← v[πi, πi−] 11: else if v[πi, πi−] + absHeuristic > threshold then 12: ˆΠi ← EXTEND-POLICY (πi, πi.absNodes + 1) 13: Πi + ← INSERT-SORTED-POLICIES ( ˆΠi) 14: REMOVE(πi) 15: else 16: children ← CHILDREN (i) 17: Πi ← UPPER-BOUND-SORT(i, Πi, πi−) 18: for all πi ∈ Πi do 19: ˜πi+ ← πi 20: absHeuristic ← GET-ABS-HEURISTIC (πi, πi−) 21: absHeuristic ∗ ← (timeHorizon − πi.horizon) 22: if πi.horizon = timeHorizon and πi.absNodes = 0 then 23: if ˆv[πi, πi−] < threshold and πi.absNodes = 0 then 24: Go to line 19 25: for all j ∈ children do 26: jThres ← threshold − v[πi, πi−]− Σk∈children,k=j ˆvk[πi, πi−] 27: πj+,∗ ← SPIDER(j, πi πi−, jThres) 28: ˜πi+ ← ˜πi+ πj+,∗; ˆvj[πi, πi−] ← v[πj+,∗, πi πi−] 29: if v[˜πi+, πi−] > threshold then 30: threshold ← v[˜πi+, πi−]; πi+,∗ ← ˜πi+ 31: else if ˆv[πi+, πi−] + absHeuristic > threshold then 32: ˆΠi ← EXTEND-POLICY (πi, πi.absNodes + 1) 33: Πi + ← INSERT-SORTED-POLICIES (ˆΠi) 34: REMOVE(πi) 35: return πi+,∗ In SPIDER, the exploration/pruning phase can only begin after the heuristic (or upper bound) computation and sorting for the policies has ended.",
                "We provide an approach to possibly circumvent the exploration of a group of policies based on heuristic computation for one abstract policy, thus leading to an improvement in runtime performance (without loss in solution quality).",
                "The important steps in this technique are defining the abstract policy and how heuristic values are computated for the abstract policies.",
                "In this paper, we propose two types of abstraction: 1.",
                "Horizon Based Abstraction (HBA): Here, the abstract policy is defined as a shorter horizon policy.",
                "It represents a group of longer horizon policies that have the same actions as the abstract policy for times less than or equal to the horizon of the abstract policy.",
                "In Figure 3(a), a T=1 abstract policy that performs East action, represents a group of T=2 policies, that perform East in the first time step.",
                "For HBA, there are two parts to heuristic computation: (a) Computing the upper bound for the horizon of the abstract policy.",
                "This is same as the heuristic computation defined by the GETHEURISTIC() algorithm for SPIDER, however with a shorter time horizon (horizon of the abstract policy). (b) Computing the maximum possible reward that can be accumulated in one time step (using GET-ABS-HEURISTIC()) and multiplying it by the number of time steps to time horizon.",
                "This maximum possible reward (for one time step) is obtained by iterating through all the actions of all the agents in Tree(i) and computing the maximum joint reward for any joint action.",
                "Sum of (a) and (b) is the heuristic value for a HBA abstract policy. 2.",
                "Node Based Abstraction (NBA): Here an abstract policy is obtained by not associating actions to certain nodes of the policy tree.",
                "Unlike in HBA, this implies multiple levels of abstraction.",
                "This is illustrated in Figure 3(b), where there are T=2 policies that do not have an action for observation TP.",
                "These incomplete T=2 policies are abstractions for T=2 complete policies.",
                "Increased levels of abstraction leads to faster computation of a complete joint policy, πroot+ and also to shorter heuristic computation and exploration, pruning phases.",
                "For NBA, the heuristic computation is similar to that of a normal policy, except in cases where there is no action associated with policy nodes.",
                "In such cases, the immediate reward is taken as Rmax (maximum reward for any action).",
                "We combine both the abstraction techniques mentioned above into one technique, SPIDER-ABS.",
                "Algorithm 5 provides the algorithm for this abstraction technique.",
                "For computing optimal joint policy with SPIDER-ABS, a non-leaf agent i initially examines all abstract T=1 policies (line 2) and sorts them based on abstract policy heuristic computations (line 17).",
                "The abstraction horizon is gradually increased and these abstract policies are then explored in descending order of heuristic values and ones that have heuristic values less than the threshold are pruned (lines 23-24).",
                "Exploration in SPIDER-ABS has the same definition as in SPIDER if the policy being explored has a horizon of policy computation which is equal to the actual time horizon and if all the nodes of the policy have an action associated with them (lines 25-30).",
                "However, if those conditions are not met, then it is substituted by a group of policies that it represents (using EXTEND-POLICY () function) (lines 31-32).",
                "EXTEND-POLICY() function is also responsible for initializing the horizon and absNodes of a policy. absNodes represents the number of nodes at the last level in the policy tree, that do not have an action assigned to them.",
                "If πi.absNodes = |Ωi|πi.horizon−1 (i.e. total number of policy nodes possible at πi.horizon) , then πi.absNodes is set to zero and πi.horizon is increased by 1.",
                "Otherwise, πi.absNodes is increased by 1.",
                "Thus, this function combines both HBA and NBA by using the policy variables, horizon and absNodes.",
                "Before substituting the abstract policy with a group of policies, those policies are sorted based on heuristic values (line 33).",
                "Similar type of abstraction based best response computation is adopted at leaf agents (lines 3-14). 4.4 Value ApproXimation (VAX) In this section, we present an approximate enhancement to SPIDER called VAX.",
                "The input to this technique is an approximation parameter , which determines the difference from the optimal solution quality.",
                "This approximation parameter is used at each agent for pruning out joint policies.",
                "The pruning mechanism in SPIDER and SPIDER-Abs dictates that a joint policy be pruned only if the threshold is exactly greater than the heuristic value.",
                "However, the 826 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Figure 3: Example of abstraction for (a) HBA (Horizon Based Abstraction) and (b) NBA (Node Based Abstraction) idea in this technique is to prune out joint a policy if the following condition is satisfied: threshold + > ˆv[πi , πi− ].",
                "Apart from the pruning condition, VAX is the same as SPIDER/SPIDER-ABS.",
                "In the example of Figure 2, if the heuristic value for the second joint policy (or second search tree node) in level 2 were 238 instead of 232, then that policy could not be be pruned using SPIDER or SPIDER-Abs.",
                "However, in VAX with an approximation parameter of 5, the joint policy in consideration would also be pruned.",
                "This is because the threshold (234) at that juncture plus the approximation parameter (5), i.e. 239 would have been greater than the heuristic value for that joint policy (238).",
                "It can be noted from the example (just discussed) that this kind of pruning can lead to fewer explorations and hence lead to an improvement in the overall run-time performance.",
                "However, this can entail a sacrifice in the quality of the solution because this technique can prune out a candidate optimal solution.",
                "A bound on the error introduced by this approximate algorithm as a function of , is provided by Proposition 3. 4.5 Percentage ApproXimation (PAX) In this section, we present the second approximation enhancement over SPIDER called PAX.",
                "Input to this technique is a parameter, δ that represents the minimum percentage of the optimal solution quality that is desired.",
                "Output of this technique is a policy with an expected value that is at least δ% of the optimal solution quality.",
                "A policy is pruned if the following condition is satisfied: threshold > δ 100 ˆv[πi , πi− ].",
                "Like in VAX, the only difference between PAX and SPIDER/SPIDER-ABS is this pruning condition.",
                "Again in Figure 2, if the heuristic value for the second search tree node in level 2 were 238 instead of 232, then PAX with an input parameter of 98% would be able to prune that search tree node (since 98 100 ∗238 < 234).",
                "This type of pruning leads to fewer explorations and hence an improvement in run-time performance, while potentially leading to a loss in quality of the solution.",
                "Proposition 4 provides the bound on quality loss. 4.6 Theoretical Results PROPOSITION 1.",
                "Heuristic provided using the centralized MDP heuristic is admissible.",
                "Proof.",
                "For the value provided by the heuristic to be admissible, it should be an over estimate of the expected value for a joint policy.",
                "Thus, we need to show that: For l ∈ Ei+ ∪ Ei− : ˆvt l ≥ vt l (refer to notation in Section 4.2) We use mathematical induction on t to prove this.",
                "Base case: t = T − 1.",
                "Irrespective of whether l ∈ Ei− or l ∈ Ei+ , ˆrt l is computed by maximizing over all actions of the agents in Tree(i), while rt l is computed for fixed policies of the same agents.",
                "Hence, ˆrt l ≥ rt l and also ˆvt l ≥ vt l .",
                "Assumption: Proposition holds for t = η, where 1 ≤ η < T − 1.",
                "We now have to prove that the proposition holds for t = η − 1.",
                "We show the proof for l ∈ Ei− and similar reasoning can be adopted to prove for l ∈ Ei+ .",
                "The heuristic value function for l ∈ Ei− is provided by the following equation: ˆvη−1 l =ˆrη−1 l + max al2 ω η l1 ,s η l ˆpη−1 l1 ˆpη−1 l2 pη−1 u ˆvη l Rewriting the RHS and using Eqn 2 (in Section 4.2) =ˆrη−1 l + max al2 ω η l1 ,s η l pη−1 u pη−1 l1 ˆpη−1 l2 ˆvη l =ˆrη−1 l + ω η l1 ,s η l pη−1 u pη−1 l1 max al2 ˆpη−1 l2 ˆvη l Since maxal2 ˆpη−1 l2 ˆvη l ≥ ωl2 oη−1 l2 ˆpη−1 l2 ˆvη l and pη−1 l2 = oη−1 l2 ˆpη−1 l2 ≥ˆrη−1 l + ω η l1 ,s η l pη−1 u pη−1 l1 ωl2 pη−1 l2 ˆvη l Since ˆvη l ≥ vη l (from the assumption) ≥ˆrη−1 l + ω η l1 ,s η l pη−1 u pη−1 l1 ωl2 pη−1 l2 vη l Since ˆrη−1 l ≥ rη−1 l (by definition) ≥rη−1 l + ω η l1 ,s η l pη−1 u pη−1 l1 ωl2 pη−1 l2 vη l =rη−1 l + (ω η l ,s η l ) pη−1 u pη−1 l1 pη−1 l2 vη l = vη−1 l Thus proved.",
                "PROPOSITION 2.",
                "SPIDER provides an optimal solution.",
                "Proof.",
                "SPIDER examines all possible joint policies given the interaction structure of the agents.",
                "The only exception being when a joint policy is pruned based on the heuristic value.",
                "Thus, as long as a candidate optimal policy is not pruned, SPIDER will return an optimal policy.",
                "As proved in Proposition 1, the expected value for a joint policy is always an upper bound.",
                "Hence when a joint policy is pruned, it cannot be an optimal solution.",
                "PROPOSITION 3.",
                "Error bound on the solution quality for VAX (implemented over SPIDER-ABS) with an approximation parameter of is ρ , where ρ is the number of leaf nodes in the DFS tree.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 827 Proof.",
                "We prove this proposition using mathematical induction on the depth of the DFS tree.",
                "Base case: depth = 1 (i.e. one node).",
                "Best response is computed by iterating through all policies, Πk.",
                "A policy,πk is pruned if ˆv[πk, πk− ] < threshold + .",
                "Thus the best response policy computed by VAX would be at most away from the optimal best response.",
                "Hence the proposition holds for the base case.",
                "Assumption: Proposition holds for d, where 1 ≤ depth ≤ d. We now have to prove that the proposition holds for d + 1.",
                "Without loss of generality, lets assume that the root node of this tree has k children.",
                "Each of this children is of depth ≤ d, and hence from the assumption, the error introduced in kth child is ρk , where ρk is the number of leaf nodes in kth child of the root.",
                "Therefore, ρ = k ρk, where ρ is the number of leaf nodes in the tree.",
                "In SPIDER-ABS, threshold at the root agent, thresspider = k v[πk+ , πk− ].",
                "However, with VAX the threshold at the root agent will be (in the worst case), threshvax = k v[πk+ , πk− ]− k ρk .",
                "Hence, with VAX a joint policy is pruned at the root agent if ˆv[πroot, πroot− ] < threshvax + ⇒ ˆv[πroot, πroot− ] < threshspider − (( k ρk) − 1) ≤ threshspider − ( k ρk) ≤ threshspider − ρ .",
                "Hence proved.",
                "PROPOSITION 4.",
                "For PAX (implemented over SPIDER-ABS) with an input parameter of δ, the solution quality is at least δ 100 v[πroot+,∗ ], where v[πroot+,∗ ] denotes the optimal solution quality.",
                "Proof.",
                "We prove this proposition using mathematical induction on the depth of the DFS tree.",
                "Base case: depth = 1 (i.e. one node).",
                "Best response is computed by iterating through all policies, Πk.",
                "A policy,πk is pruned if δ 100 ˆv[πk, πk− ] < threshold.",
                "Thus the best response policy computed by PAX would be at least δ 100 times the optimal best response.",
                "Hence the proposition holds for the base case.",
                "Assumption: Proposition holds for d, where 1 ≤ depth ≤ d. We now have to prove that the proposition holds for d + 1.",
                "Without loss of generality, lets assume that the root node of this tree has k children.",
                "Each of this children is of depth ≤ d, and hence from the assumption, the solution quality in the kth child is at least δ 100 v[πk+,∗ , πk− ] for PAX.",
                "With SPIDER-ABS, a joint policy is pruned at the root agent if ˆv[πroot, πroot− ] < k v[πk+,∗ , πk− ].",
                "However with PAX, a joint policy is pruned if δ 100 ˆv[πroot, πroot− ] < k δ 100 v[πk+,∗ , πk− ] ⇒ ˆv[πroot, πroot− ] < k v[πk+,∗ , πk− ].",
                "Since the pruning condition at the root agent in PAX is the same as the one in SPIDER-ABS, there is no error introduced at the root agent and all the error is introduced in the children.",
                "Thus, overall solution quality is at least δ 100 of the optimal solution.",
                "Hence proved. 5.",
                "EXPERIMENTAL RESULTS All our experiments were conducted on the sensor network domain from Section 2.",
                "The five network configurations employed are shown in Figure 4.",
                "Algorithms that we experimented with are GOA, SPIDER, SPIDER-ABS, PAX and VAX.",
                "We compare against GOA because it is the only global optimal algorithm that considers more than two agents.",
                "We performed two sets of experiments: (i) firstly, we compared the run-time performance of the above algorithms and (ii) secondly, we experimented with PAX and VAX to study the tradeoff between run-time and solution quality.",
                "Experiments were terminated after 10000 seconds1 .",
                "Figure 5(a) provides run-time comparisons between the optimal algorithms GOA, SPIDER, SPIDER-Abs and the approximate algorithms, PAX ( of 30) and VAX(δ of 80).",
                "X-axis denotes the 1 Machine specs for all experiments: Intel Xeon 3.6 GHZ processor, 2GB RAM sensor network configuration used, while Y-axis indicates the runtime (on a log-scale).",
                "The time horizon of policy computation was 3.",
                "For each configuration (3-chain, 4-chain, 4-star and 5-star), there are five bars indicating the time taken by GOA, SPIDER, SPIDERAbs, PAX and VAX.",
                "GOA did not terminate within the time limit for 4-star and 5-star configurations.",
                "SPIDER-Abs dominated the SPIDER and GOA for all the configurations.",
                "For instance, in the 3chain configuration, SPIDER-ABS provides 230-fold speedup over GOA and 2-fold speedup over SPIDER and for the 4-chain configuration it provides 58-fold speedup over GOA and 2-fold speedup over SPIDER.",
                "The two approximation approaches, VAX and PAX provided further improvement in performance over SPIDER-Abs.",
                "For instance, in the 5-star configuration VAX provides a 15-fold speedup and PAX provides a 8-fold speedup over SPIDER-Abs.",
                "Figures 5(b) provides a comparison of the solution quality obtained using the different algorithms for the problems tested in Figure 5(a).",
                "X-axis denotes the sensor network configuration while Y-axis indicates the solution quality.",
                "Since GOA, SPIDER, and SPIDER-Abs are all global optimal algorithms, the solution quality is the same for all those algorithms.",
                "For 5-P configuration, the global optimal algorithms did not terminate within the limit of 10000 seconds, so the bar for optimal quality indicates an upper bound on the optimal solution quality.",
                "With both the approximations, we obtained a solution quality that was close to the optimal solution quality.",
                "In 3-chain and 4-star configurations, it is remarkable that both PAX and VAX obtained almost the same actual quality as the global optimal algorithms, despite the approximation parameter and δ.",
                "For other configurations as well, the loss in quality was less than 20% of the optimal solution quality.",
                "Figure 5(c) provides the time to solution with PAX (for varying epsilons).",
                "X-axis denotes the approximation parameter, δ (percentage to optimal) used, while Y-axis denotes the time taken to compute the solution (on a log-scale).",
                "The time horizon for all the configurations was 4.",
                "As δ was decreased from 70 to 30, the time to solution decreased drastically.",
                "For instance, in the 3-chain case there was a total speedup of 170-fold when the δ was changed from 70 to 30.",
                "Interestingly, even with a low δ of 30%, the actual solution quality remained equal to the one obtained at 70%.",
                "Figure 5(d) provides the time to solution for all the configurations with VAX (for varying epsilons).",
                "X-axis denotes the approximation parameter, used, while Y-axis denotes the time taken to compute the solution (on a log-scale).",
                "The time horizon for all the configurations was 4.",
                "As was increased, the time to solution decreased drastically.",
                "For instance, in the 4-star case there was a total speedup of 73-fold when the was changed from 60 to 140.",
                "Again, the actual solution quality did not change with varying epsilon.",
                "Figure 4: Sensor network configurations 828 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Figure 5: Comparison of GOA, SPIDER, SPIDER-Abs and VAX for T = 3 on (a) Runtime and (b) Solution quality; (c) Time to solution for PAX with varying percentage to optimal for T=4 (d) Time to solution for VAX with varying epsilon for T=4 6.",
                "SUMMARY AND RELATED WORK This paper presents four algorithms SPIDER, SPIDER-ABS, PAX and VAX that provide a novel combination of features for policy search in distributed POMDPs: (i) exploiting agent interaction structure given a network of agents (i.e. easier scale-up to larger number of agents); (ii) using branch and bound search with an MDP based heuristic function; (iii) utilizing abstraction to improve runtime performance without sacrificing solution quality; (iv) providing a priori percentage bounds on quality of solutions using PAX; and (v) providing expected value bounds on the quality of solutions using VAX.",
                "These features allow for systematic tradeoff of solution quality for run-time in networks of agents operating under uncertainty.",
                "Experimental results show orders of magnitude improvement in performance over previous global optimal algorithms.",
                "Researchers have typically employed two types of techniques for solving distributed POMDPs.",
                "The first set of techniques compute global optimal solutions.",
                "Hansen et al. [5] present an algorithm based on dynamic programming and iterated elimination of dominant policies, that provides optimal solutions for distributed POMDPs.",
                "Szer et al. [13] provide an optimal heuristic search method for solving Decentralized POMDPs.",
                "This algorithm is based on the combination of a classical heuristic search algorithm, A∗ and decentralized control theory.",
                "The key differences between SPIDER and MAA* are: (a) Enhancements to SPIDER (VAX and PAX) provide for quality guaranteed approximations, while MAA* is a global optimal algorithm and hence involves significant computational complexity; (b) Due to MAA*s inability to exploit interaction structure, it was illustrated only with two agents.",
                "However, SPIDER has been illustrated for networks of agents; and (c) SPIDER explores the joint policy one agent at a time, while MAA* expands it one time step at a time (simultaneously for all the agents).",
                "The second set of techniques seek approximate policies.",
                "EmeryMontemerlo et al. [4] approximate POSGs as a series of one-step Bayesian games using heuristics to approximate future value, trading off limited lookahead for computational efficiency, resulting in locally optimal policies (with respect to the selected heuristic).",
                "Nair et al. [9]s JESP algorithm uses dynamic programming to reach a local optimum solution for finite horizon decentralized POMDPs.",
                "Peshkin et al. [11] and Bernstein et al. [2] are examples of policy search techniques that search for locally optimal policies.",
                "Though all the above techniques improve the efficiency of policy computation considerably, they are unable to provide error bounds on the quality of the solution.",
                "This aspect of quality bounds differentiates SPIDER from all the above techniques.",
                "Acknowledgements.",
                "This material is based upon work supported by the Defense Advanced Research Projects Agency (DARPA), through the Department of the Interior, NBC, Acquisition Services Division under Contract No.",
                "NBCHD030010.",
                "The views and conclusions contained in this document are those of the authors, and should not be interpreted as representing the official policies, either expressed or implied, of the Defense Advanced Research Projects Agency or the U.S. Government. 7.",
                "REFERENCES [1] R. Becker, S. Zilberstein, V. Lesser, and C.V. Goldman.",
                "Solving transition independent decentralized Markov decision processes.",
                "JAIR, 22:423-455, 2004. [2] D. S. Bernstein, E.A.",
                "Hansen, and S. Zilberstein.",
                "Bounded policy iteration for decentralized POMDPs.",
                "In IJCAI, 2005. [3] D. S. Bernstein, S. Zilberstein, and N. Immerman.",
                "The complexity of decentralized control of MDPs.",
                "In UAI, 2000. [4] R. Emery-Montemerlo, G. Gordon, J. Schneider, and S. Thrun.",
                "Approximate solutions for partially observable stochastic games with common payoffs.",
                "In AAMAS, 2004. [5] E. Hansen, D. Bernstein, and S. Zilberstein.",
                "Dynamic programming for partially observable stochastic games.",
                "In AAAI, 2004. [6] V. Lesser, C. Ortiz, and M. Tambe.",
                "Distributed sensor nets: A multiagent perspective.",
                "Kluwer, 2003. [7] R. Maheswaran, M. Tambe, E. Bowring, J. Pearce, and P. Varakantham.",
                "Taking dcop to the real world : Efficient complete solutions for distributed event scheduling.",
                "In AAMAS, 2004. [8] P. J. Modi, W. Shen, M. Tambe, and M. Yokoo.",
                "An asynchronous complete method for distributed constraint optimization.",
                "In AAMAS, 2003. [9] R. Nair, D. Pynadath, M. Yokoo, M. Tambe, and S. Marsella.",
                "Taming decentralized POMDPs: Towards efficient policy computation for multiagent settings.",
                "In IJCAI, 2003. [10] R. Nair, P. Varakantham, M. Tambe, and M. Yokoo.",
                "Networked distributed POMDPs: A synthesis of distributed constraint optimization and POMDPs.",
                "In AAAI, 2005. [11] L. Peshkin, N. Meuleau, K.-E. Kim, and L. Kaelbling.",
                "Learning to cooperate via policy search.",
                "In UAI, 2000. [12] A. Petcu and B. Faltings.",
                "A scalable method for multiagent constraint optimization.",
                "In IJCAI, 2005. [13] D. Szer, F. Charpillet, and S. Zilberstein.",
                "MAA*: A heuristic search algorithm for solving decentralized POMDPs.",
                "In IJCAI, 2005.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 829"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [],
            "translated_text": "",
            "candidates": [],
            "error": []
        },
        "multi-agent system": {
            "translated_key": "",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Letting loose a SPIDER on a network of POMDPs: Generating quality guaranteed policies Pradeep Varakantham, Janusz Marecki, Yuichi Yabu∗ , Milind Tambe, Makoto Yokoo∗ University of Southern California, Los Angeles, CA 90089, {varakant, marecki, tambe}@usc.edu ∗ Dept.",
                "of Intelligent Systems, Kyushu University, Fukuoka, 812-8581 Japan, yokoo@is.kyushu-u.ac.jp ABSTRACT Distributed Partially Observable Markov Decision Problems (Distributed POMDPs) are a popular approach for modeling <br>multi-agent system</br>s acting in uncertain domains.",
                "Given the significant complexity of solving distributed POMDPs, particularly as we scale up the numbers of agents, one popular approach has focused on approximate solutions.",
                "Though this approach is efficient, the algorithms within this approach do not provide any guarantees on solution quality.",
                "A second less popular approach focuses on global optimality, but typical results are available only for two agents, and also at considerable computational cost.",
                "This paper overcomes the limitations of both these approaches by providing SPIDER, a novel combination of three key features for policy generation in distributed POMDPs: (i) it exploits agent interaction structure given a network of agents (i.e. allowing easier scale-up to larger number of agents); (ii) it uses a combination of heuristics to speedup policy search; and (iii) it allows quality guaranteed approximations, allowing a systematic tradeoff of solution quality for time.",
                "Experimental results show orders of magnitude improvement in performance when compared with previous global optimal algorithms.",
                "Categories and Subject Descriptors I.2.11 [Artificial Intelligence]: Distributed Artificial IntelligenceMulti-agent Systems General Terms Algorithms, Theory 1.",
                "INTRODUCTION Distributed Partially Observable Markov Decision Problems (Distributed POMDPs) are emerging as a popular approach for modeling sequential decision making in teams operating under uncertainty [9, 4, 1, 2, 13].",
                "The uncertainty arises on account of nondeterminism in the outcomes of actions and because the world state may only be partially (or incorrectly) observable.",
                "Unfortunately, as shown by Bernstein et al. [3], the problem of finding the optimal joint policy for general distributed POMDPs is NEXP-Complete.",
                "Researchers have attempted two different types of approaches towards solving these models.",
                "The first category consists of highly efficient approximate techniques, that may not reach globally optimal solutions [2, 9, 11].",
                "The key problem with these techniques has been their inability to provide any guarantees on the quality of the solution.",
                "In contrast, the second less popular category of approaches has focused on a global optimal result [13, 5, 10].",
                "Though these approaches obtain optimal solutions, they typically consider only two agents.",
                "Furthermore, they fail to exploit structure in the interactions of the agents and hence are severely hampered with respect to scalability when considering more than two agents.",
                "To address these problems with the existing approaches, we propose approximate techniques that provide guarantees on the quality of the solution while focussing on a network of more than two agents.",
                "We first propose the basic SPIDER (Search for Policies In Distributed EnviRonments) algorithm.",
                "There are two key novel features in SPIDER: (i) it is a branch and bound heuristic search technique that uses a MDP-based heuristic function to search for an optimal joint policy; (ii) it exploits network structure of agents by organizing agents into a Depth First Search (DFS) pseudo tree and takes advantage of the independence in the different branches of the DFS tree.",
                "We then provide three enhancements to improve the efficiency of the basic SPIDER algorithm while providing guarantees on the quality of the solution.",
                "The first enhancement uses abstractions for speedup, but does not sacrifice solution quality.",
                "In particular, it initially performs branch and bound search on abstract policies and then extends to complete policies.",
                "The second enhancement obtains speedups by sacrificing solution quality, but within an input parameter that provides the tolerable expected value difference from the optimal solution.",
                "The third enhancement is again based on bounding the search for efficiency, however with a tolerance parameter that is provided as a percentage of optimal.",
                "We experimented with the sensor network domain presented in Nair et al. [10], a domain representative of an important class of problems with networks of agents working in uncertain environments.",
                "In our experiments, we illustrate that SPIDER dominates an existing global optimal approach called GOA [10], the only known global optimal algorithm with demonstrated experimental results for more than two agents.",
                "Furthermore, we demonstrate that abstraction improves the performance of SPIDER significantly (while providing optimal solutions).",
                "We finally demonstrate a key feature of SPIDER: by utilizing the approximation enhancements it enables principled tradeoffs in run-time versus solution quality. 822 978-81-904262-7-5 (RPS) c 2007 IFAAMAS 2.",
                "DOMAIN: DISTRIBUTED SENSOR NETS Distributed sensor networks are a large, important class of domains that motivate our work.",
                "This paper focuses on a set of target tracking problems that arise in certain types of sensor networks [6] first introduced in [10].",
                "Figure 1 shows a specific problem instance within this type consisting of three sensors.",
                "Here, each sensor node can scan in one of four directions: North, South, East or West (see Figure 1).",
                "To track a target and obtain associated reward, two sensors with overlapping scanning areas must coordinate by scanning the same area simultaneously.",
                "In Figure 1, to track a target in Loc11, sensor1 needs to scan East and sensor2 needs to scan West simultaneously.",
                "Thus, sensors have to act in a coordinated fashion.",
                "We assume that there are two independent targets and that each targets movement is uncertain and unaffected by the sensor agents.",
                "Based on the area it is scanning, each sensor receives observations that can have false positives and false negatives.",
                "The sensors observations and transitions are independent of each others actions e.g.the observations that sensor1 receives are independent of sensor2s actions.",
                "Each agent incurs a cost for scanning whether the target is present or not, but no cost if it turns off.",
                "Given the sensors observational uncertainty, the targets uncertain transitions and the distributed nature of the sensor nodes, these sensor nets provide a useful domains for applying distributed POMDP models.",
                "Figure 1: A 3-chain sensor configuration 3.",
                "BACKGROUND 3.1 Model: Network Distributed POMDP The ND-POMDP model was introduced in [10], motivated by domains such as the sensor networks introduced in Section 2.",
                "It is defined as the tuple S, A, P, Ω, O, R, b , where S = ×1≤i≤nSi × Su is the set of world states.",
                "Si refers to the set of local states of agent i and Su is the set of unaffectable states.",
                "Unaffectable state refers to that part of the world state that cannot be affected by the agents actions, e.g. environmental factors like target locations that no agent can control.",
                "A = ×1≤i≤nAi is the set of joint actions, where Ai is the set of action for agent i. ND-POMDP assumes transition independence, where the transition function is defined as P(s, a, s ) = Pu(su, su) · 1≤i≤n Pi(si, su, ai, si), where a = a1, . . . , an is the joint action performed in state s = s1, . . . , sn, su and s = s1, . . . , sn, su is the resulting state.",
                "Ω = ×1≤i≤nΩi is the set of joint observations where Ωi is the set of observations for agents i. Observational independence is assumed in ND-POMDPs i.e., the joint observation function is defined as O(s, a, ω) = 1≤i≤n Oi(si, su, ai, ωi), where s = s1, . . . , sn, su is the world state that results from the agents performing a = a1, . . . , an in the previous state, and ω = ω1, . . . , ωn ∈ Ω is the observation received in state s. This implies that each agents observation depends only on the unaffectable state, its local action and on its resulting local state.",
                "The reward function, R, is defined as R(s, a) = l Rl(sl1, . . . , slr, su, al1, . . . , alr ), where each l could refer to any sub-group of agents and r = |l|.",
                "Based on the reward function, an interaction hypergraph is constructed.",
                "A hyper-link, l, exists between a subset of agents for all Rl that comprise R. The interaction hypergraph is defined as G = (Ag, E), where the agents, Ag, are the vertices and E = {l|l ⊆ Ag ∧ Rl is a component of R} are the edges.",
                "The initial belief state (distribution over the initial state), b, is defined as b(s) = bu(su) · 1≤i≤n bi(si), where bu and bi refer to the distribution over initial unaffectable state and agent is initial belief state, respectively.",
                "The goal in ND-POMDP is to compute the joint policy π = π1, . . . , πn that maximizes teams expected reward over a finite horizon T starting from the belief state b.",
                "An ND-POMDP is similar to an n-ary Distributed Constraint Optimization Problem (DCOP)[8, 12] where the variable at each node represents the policy selected by an individual agent, πi with the domain of the variable being the set of all local policies, Πi.",
                "The reward component Rl where |l| = 1 can be thought of as a local constraint while the reward component Rl where l > 1 corresponds to a non-local constraint in the constraint graph. 3.2 Algorithm: Global Optimal Algorithm (GOA) In previous work, GOA has been defined as a global optimal algorithm for ND-POMDPs [10].",
                "We will use GOA in our experimental comparisons, since GOA is a state-of-the-art global optimal algorithm, and in fact the only one with experimental results available for networks of more than two agents.",
                "GOA borrows from a global optimal DCOP algorithm called DPOP[12].",
                "GOAs message passing follows that of DPOP.",
                "The first phase is the UTIL propagation, where the utility messages, in this case values of policies, are passed up from the leaves to the root.",
                "Value for a policy at an agent is defined as the sum of best response values from its children and the joint policy reward associated with the parent policy.",
                "Thus, given a policy for a parent node, GOA requires an agent to iterate through all its policies, finding the best response policy and returning the value to the parent - while at the parent node, to find the best policy, an agent requires its children to return their best responses to each of its policies.",
                "This UTIL propagation process is repeated at each level in the tree, until the root exhausts all its policies.",
                "In the second phase of VALUE propagation, where the optimal policies are passed down from the root till the leaves.",
                "GOA takes advantage of the local interactions in the interaction graph, by pruning out unnecessary joint policy evaluations (associated with nodes not connected directly in the tree).",
                "Since the interaction graph captures all the reward interactions among agents and as this algorithm iterates through all the relevant joint policy evaluations, this algorithm yields a globally optimal solution. 4.",
                "SPIDER As mentioned in Section 3.1, an ND-POMDP can be treated as a DCOP, where the goal is to compute a joint policy that maximizes the overall joint reward.",
                "The brute-force technique for computing an optimal policy would be to examine the expected values for all possible joint policies.",
                "The key idea in SPIDER is to avoid computation of expected values for the entire space of joint policies, by utilizing upper bounds on the expected values of policies and the interaction structure of the agents.",
                "Akin to some of the algorithms for DCOP [8, 12], SPIDER has a pre-processing step that constructs a DFS tree corresponding to the given interaction structure.",
                "Note that these DFS trees are pseudo trees [12] that allow links between ancestors and children.",
                "We employ the Maximum Constrained Node (MCN) heuristic used in the DCOP algorithm, ADOPT [8], however other heuristics (such as MLSP heuristic from [7]) can also be employed.",
                "MCN heuristic tries to place agents with more number of constraints at the top of the tree.",
                "This tree governs how the search for the optimal joint polThe Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 823 icy proceeds in SPIDER.",
                "The algorithms presented in this paper are easily extendable to hyper-trees, however for expository purposes, we assume binary trees.",
                "SPIDER is an algorithm for centralized planning and distributed execution in distributed POMDPs.",
                "In this paper, we employ the following notation to denote policies and expected values: Ancestors(i) ⇒ agents from i to the root (not including i).",
                "Tree(i) ⇒ agents in the sub-tree (not including i) for which i is the root. πroot+ ⇒ joint policy of all agents. πi+ ⇒ joint policy of all agents in Tree(i) ∪ i. πi− ⇒ joint policy of agents that are in Ancestors(i). πi ⇒ policy of the ith agent. ˆv[πi, πi− ] ⇒ upper bound on the expected value for πi+ given πi and policies of ancestor agents i.e. πi− . ˆvj[πi, πi− ] ⇒ upper bound on the expected value for πi+ from the jth child. v[πi, πi− ] ⇒ expected value for πi given policies of ancestor agents, πi− . v[πi+ , πi− ] ⇒ expected value for πi+ given policies of ancestor agents, πi− . vj[πi+ , πi− ] ⇒ expected value for πi+ from the jth child.",
                "Figure 2: Execution of SPIDER, an example 4.1 Outline of SPIDER SPIDER is based on the idea of branch and bound search, where the nodes in the search tree represent partial/complete joint policies.",
                "Figure 2 shows an example search tree for the SPIDER algorithm, using an example of the three agent chain.",
                "Before SPIDER begins its search we create a DFS tree (i.e. pseudo tree) from the three agent chain, with the middle agent as the root of this tree.",
                "SPIDER exploits the structure of this DFS tree while engaging in its search.",
                "Note that in our example figure, each agent is assigned a policy with T=2.",
                "Thus, each rounded rectange (search tree node) indicates a partial/complete joint policy, a rectangle indicates an agent and the ovals internal to an agent show its policy.",
                "Heuristic or actual expected value for a joint policy is indicated in the top right corner of the rounded rectangle.",
                "If the number is italicized and underlined, it implies that the actual expected value of the joint policy is provided.",
                "SPIDER begins with no policy assigned to any of the agents (shown in the level 1 of the search tree).",
                "Level 2 of the search tree indicates that the joint policies are sorted based on upper bounds computed for root agents policies.",
                "Level 3 shows one SPIDER search node with a complete joint policy (a policy assigned to each of the agents).",
                "The expected value for this joint policy is used to prune out the nodes in level 2 (the ones with upper bounds < 234) When creating policies for each non-leaf agent i, SPIDER potentially performs two steps: 1.",
                "Obtaining upper bounds and sorting: In this step, agent i computes upper bounds on the expected values, ˆv[πi, πi− ] of the joint policies πi+ corresponding to each of its policy πi and fixed ancestor policies.",
                "An MDP based heuristic is used to compute these upper bounds on the expected values.",
                "Detailed description about this MDP heuristic is provided in Section 4.2.",
                "All policies of agent i, Πi are then sorted based on these upper bounds (also referred to as heuristic values henceforth) in descending order.",
                "Exploration of these policies (in step 2 below) are performed in this descending order.",
                "As indicated in the level 2 of the search tree (of Figure 2), all the joint policies are sorted based on the heuristic values, indicated in the top right corner of each joint policy.",
                "The intuition behind sorting and then exploring policies in descending order of upper bounds, is that the policies with higher upper bounds could yield joint policies with higher expected values. 2.",
                "Exploration and Pruning: Exploration implies computing the best response joint policy πi+,∗ corresponding to fixed ancestor policies of agent i, πi− .",
                "This is performed by iterating through all policies of agent i i.e.",
                "Πi and summing two quantities for each policy: (i) the best response for all of is children (obtained by performing steps 1 and 2 at each of the child nodes); (ii) the expected value obtained by i for fixed policies of ancestors.",
                "Thus, exploration of a policy πi yields actual expected value of a joint policy, πi+ represented as v[πi+ , πi− ].",
                "The policy with the highest expected value is the best response policy.",
                "Pruning refers to avoiding exploring all policies (or computing expected values) at agent i by using the current best expected value, vmax [πi+ , πi− ].",
                "Henceforth, this vmax [πi+ , πi− ] will be referred to as threshold.",
                "A policy, πi need not be explored if the upper bound for that policy, ˆv[πi, πi− ] is less than the threshold.",
                "This is because the expected value for the best joint policy attainable for that policy will be less than the threshold.",
                "On the other hand, when considering a leaf agent, SPIDER computes the best response policy (and consequently its expected value) corresponding to fixed policies of its ancestors, πi− .",
                "This is accomplished by computing expected values for each of the policies (corresponding to fixed policies of ancestors) and selecting the highest expected value policy.",
                "In Figure 2, SPIDER assigns best response policies to leaf agents at level 3.",
                "The policy for the left leaf agent is to perform action East at each time step in the policy, while the policy for the right leaf agent is to perform Off at each time step.",
                "These best response policies from the leaf agents yield an actual expected value of 234 for the complete joint policy.",
                "Algorithm 1 provides the pseudo code for SPIDER.",
                "This algorithm outputs the best joint policy, πi+,∗ (with an expected value greater than threshold) for the agents in Tree(i).",
                "Lines 3-8 compute the best response policy of a leaf agent i, while lines 9-23 computes the best response joint policy for agents in Tree(i).",
                "This best response computation for a non-leaf agent i includes: (a) Sorting of policies (in descending order) based on heuristic values on line 11; (b) Computing best response policies at each of the children for fixed policies of agent i in lines 16-20; and (c) Maintaining 824 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Algorithm 1 SPIDER(i, πi− , threshold) 1: πi+,∗ ← null 2: Πi ← GET-ALL-POLICIES (horizon, Ai, Ωi) 3: if IS-LEAF(i) then 4: for all πi ∈ Πi do 5: v[πi, πi−] ← JOINT-REWARD (πi, πi−) 6: if v[πi, πi−] > threshold then 7: πi+,∗ ← πi 8: threshold ← v[πi, πi−] 9: else 10: children ← CHILDREN (i) 11: ˆΠi ← UPPER-BOUND-SORT(i, Πi, πi−) 12: for all πi ∈ ˆΠi do 13: ˜πi+ ← πi 14: if ˆv[πi, πi−] < threshold then 15: Go to line 12 16: for all j ∈ children do 17: jThres ← threshold − v[πi, πi−]− Σk∈children,k=j ˆvk[πi, πi−] 18: πj+,∗ ← SPIDER(j, πi πi−, jThres) 19: ˜πi+ ← ˜πi+ πj+,∗ 20: ˆvj[πi, πi−] ← v[πj+,∗, πi πi−] 21: if v[˜πi+, πi−] > threshold then 22: threshold ← v[˜πi+, πi−] 23: πi+,∗ ← ˜πi+ 24: return πi+,∗ Algorithm 2 UPPER-BOUND-SORT(i, Πi, πi− ) 1: children ← CHILDREN (i) 2: ˆΠi ← null /* Stores the sorted list */ 3: for all πi ∈ Πi do 4: ˆv[πi, πi−] ← JOINT-REWARD (πi, πi−) 5: for all j ∈ children do 6: ˆvj[πi, πi−] ← UPPER-BOUND(i, j, πi πi−) 7: ˆv[πi, πi−] + ← ˆvj[πi, πi−] 8: ˆΠi ← INSERT-INTO-SORTED (πi, ˆΠi) 9: return ˆΠi best expected value, joint policy in lines 21-23.",
                "Algorithm 2 provides the pseudo code for sorting policies based on the upper bounds on the expected values of joint policies.",
                "Expected value for an agent i consists of two parts: value obtained from ancestors and value obtained from its children.",
                "Line 4 computes the expected value obtained from ancestors of the agent (using JOINT-REWARD function), while lines 5-7 compute the heuristic value from the children.",
                "The sum of these two parts yields an upper bound on the expected value for agent i, and line 8 of the algorithm sorts the policies based on these upper bounds. 4.2 MDP based heuristic function The heuristic function quickly provides an upper bound on the expected value obtainable from the agents in Tree(i).",
                "The subtree of agents is a distributed POMDP in itself and the idea here is to construct a centralized MDP corresponding to the (sub-tree) distributed POMDP and obtain the expected value of the optimal policy for this centralized MDP.",
                "To reiterate this in terms of the agents in DFS tree interaction structure, we assume full observability for the agents in Tree(i) and for fixed policies of the agents in {Ancestors(i) ∪ i}, we compute the joint value ˆv[πi+ , πi− ] .",
                "We use the following notation for presenting the equations for computing upper bounds/heuristic values (for agents i and k): Let Ei− denote the set of links between agents in {Ancestors(i)∪ i} and Tree(i), Ei+ denote the set of links between agents in Tree(i).",
                "Also, if l ∈ Ei− , then l1 is the agent in {Ancestors(i)∪ i} and l2 is the agent in Tree(i), that l connects together.",
                "We first compact the standard notation: ot k =Ok(st+1 k , st+1 u , πk(ωt k), ωt+1 k ) (1) pt k =Pk(st k, st u, πk(ωt k), st+1 k ) · ot k pt u =P(st u, st+1 u ) st l = st l1 , st l2 , st u ; ωt l = ωt l1 , ωt l2 rt l =Rl(st l , πl1 (ωt l1 ), πl2 (ωt l2 )) vt l =V t πl (st l , st u, ωt l1 , ωt l2 ) Depending on the location of agent k in the agent tree we have the following cases: IF k ∈ {Ancestors(i) ∪ i}, ˆpt k = pt k, (2) IF k ∈ Tree(i), ˆpt k = Pk(st k, st u, πk(ωt k), st+1 k ) IF l ∈ Ei− , ˆrt l = max {al2 } Rl(st l , πl1 (ωt l1 ), al2 ) IF l ∈ Ei+ , ˆrt l = max {al1 ,al2 } Rl(st l , al1 , al2 ) The value function for an agent i executing the joint policy πi+ at time η − 1 is provided by the equation: V η−1 πi+ (sη−1 , ωη−1 ) = l∈Ei− vη−1 l + l∈Ei+ vη−1 l (3) where vη−1 l = rη−1 l + ω η l ,sη pη−1 l1 pη−1 l2 pη−1 u vη l Algorithm 3 UPPER-BOUND (i, j, πj− ) 1: val ← 0 2: for all l ∈ Ej− ∪ Ej+ do 3: if l ∈ Ej− then πl1 ← φ 4: for all s0 l do 5: val + ← startBel[s0 l ]· UPPER-BOUND-TIME (i, s0 l , j, πl1 , ) 6: return val Algorithm 4 UPPER-BOUND-TIME (i, st l , j, πl1 , ωt l1 ) 1: maxV al ← −∞ 2: for all al1 , al2 do 3: if l ∈ Ei− and l ∈ Ej− then al1 ← πl1 (ωt l1 ) 4: val ← GET-REWARD(st l , al1 , al2 ) 5: if t < πi.horizon − 1 then 6: for all st+1 l , ωt+1 l1 do 7: futV al←pt u ˆpt l1 ˆpt l2 8: futV al ∗ ← UPPER-BOUND-TIME(st+1 l , j, πl1 , ωt l1 ωt+1 l1 ) 9: val + ← futV al 10: if val > maxV al then maxV al ← val 11: return maxV al Upper bound on the expected value for a link is computed by modifying the equation 3 to reflect the full observability assumption.",
                "This involves removing the observational probability term for agents in Tree(i) and maximizing the future value ˆvη l over the actions of those agents (in Tree(i)).",
                "Thus, the equation for the The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 825 computation of the upper bound on a link l, is as follows: IF l ∈ Ei− , ˆvη−1 l =ˆrη−1 l + max al2 ω η l1 ,s η l ˆpη−1 l1 ˆpη−1 l2 pη−1 u ˆvη l IF l ∈ Ei+ , ˆvη−1 l =ˆrη−1 l + max al1 ,al2 s η l ˆpη−1 l1 ˆpη−1 l2 pη−1 u ˆvη l Algorithm 3 and Algorithm 4 provide the algorithm for computing upper bound for child j of agent i, using the equations descirbed above.",
                "While Algorithm 4 computes the upper bound on a link given the starting state, Algorithm 3 sums the upper bound values computed over each of the links in Ei− ∪ Ei+ . 4.3 Abstraction Algorithm 5 SPIDER-ABS(i, πi− , threshold) 1: πi+,∗ ← null 2: Πi ← GET-POLICIES (<>, 1) 3: if IS-LEAF(i) then 4: for all πi ∈ Πi do 5: absHeuristic ← GET-ABS-HEURISTIC (πi, πi−) 6: absHeuristic ∗ ← (timeHorizon − πi.horizon) 7: if πi.horizon = timeHorizon and πi.absNodes = 0 then 8: v[πi, πi−] ← JOINT-REWARD (πi, πi−) 9: if v[πi, πi−] > threshold then 10: πi+,∗ ← πi; threshold ← v[πi, πi−] 11: else if v[πi, πi−] + absHeuristic > threshold then 12: ˆΠi ← EXTEND-POLICY (πi, πi.absNodes + 1) 13: Πi + ← INSERT-SORTED-POLICIES ( ˆΠi) 14: REMOVE(πi) 15: else 16: children ← CHILDREN (i) 17: Πi ← UPPER-BOUND-SORT(i, Πi, πi−) 18: for all πi ∈ Πi do 19: ˜πi+ ← πi 20: absHeuristic ← GET-ABS-HEURISTIC (πi, πi−) 21: absHeuristic ∗ ← (timeHorizon − πi.horizon) 22: if πi.horizon = timeHorizon and πi.absNodes = 0 then 23: if ˆv[πi, πi−] < threshold and πi.absNodes = 0 then 24: Go to line 19 25: for all j ∈ children do 26: jThres ← threshold − v[πi, πi−]− Σk∈children,k=j ˆvk[πi, πi−] 27: πj+,∗ ← SPIDER(j, πi πi−, jThres) 28: ˜πi+ ← ˜πi+ πj+,∗; ˆvj[πi, πi−] ← v[πj+,∗, πi πi−] 29: if v[˜πi+, πi−] > threshold then 30: threshold ← v[˜πi+, πi−]; πi+,∗ ← ˜πi+ 31: else if ˆv[πi+, πi−] + absHeuristic > threshold then 32: ˆΠi ← EXTEND-POLICY (πi, πi.absNodes + 1) 33: Πi + ← INSERT-SORTED-POLICIES (ˆΠi) 34: REMOVE(πi) 35: return πi+,∗ In SPIDER, the exploration/pruning phase can only begin after the heuristic (or upper bound) computation and sorting for the policies has ended.",
                "We provide an approach to possibly circumvent the exploration of a group of policies based on heuristic computation for one abstract policy, thus leading to an improvement in runtime performance (without loss in solution quality).",
                "The important steps in this technique are defining the abstract policy and how heuristic values are computated for the abstract policies.",
                "In this paper, we propose two types of abstraction: 1.",
                "Horizon Based Abstraction (HBA): Here, the abstract policy is defined as a shorter horizon policy.",
                "It represents a group of longer horizon policies that have the same actions as the abstract policy for times less than or equal to the horizon of the abstract policy.",
                "In Figure 3(a), a T=1 abstract policy that performs East action, represents a group of T=2 policies, that perform East in the first time step.",
                "For HBA, there are two parts to heuristic computation: (a) Computing the upper bound for the horizon of the abstract policy.",
                "This is same as the heuristic computation defined by the GETHEURISTIC() algorithm for SPIDER, however with a shorter time horizon (horizon of the abstract policy). (b) Computing the maximum possible reward that can be accumulated in one time step (using GET-ABS-HEURISTIC()) and multiplying it by the number of time steps to time horizon.",
                "This maximum possible reward (for one time step) is obtained by iterating through all the actions of all the agents in Tree(i) and computing the maximum joint reward for any joint action.",
                "Sum of (a) and (b) is the heuristic value for a HBA abstract policy. 2.",
                "Node Based Abstraction (NBA): Here an abstract policy is obtained by not associating actions to certain nodes of the policy tree.",
                "Unlike in HBA, this implies multiple levels of abstraction.",
                "This is illustrated in Figure 3(b), where there are T=2 policies that do not have an action for observation TP.",
                "These incomplete T=2 policies are abstractions for T=2 complete policies.",
                "Increased levels of abstraction leads to faster computation of a complete joint policy, πroot+ and also to shorter heuristic computation and exploration, pruning phases.",
                "For NBA, the heuristic computation is similar to that of a normal policy, except in cases where there is no action associated with policy nodes.",
                "In such cases, the immediate reward is taken as Rmax (maximum reward for any action).",
                "We combine both the abstraction techniques mentioned above into one technique, SPIDER-ABS.",
                "Algorithm 5 provides the algorithm for this abstraction technique.",
                "For computing optimal joint policy with SPIDER-ABS, a non-leaf agent i initially examines all abstract T=1 policies (line 2) and sorts them based on abstract policy heuristic computations (line 17).",
                "The abstraction horizon is gradually increased and these abstract policies are then explored in descending order of heuristic values and ones that have heuristic values less than the threshold are pruned (lines 23-24).",
                "Exploration in SPIDER-ABS has the same definition as in SPIDER if the policy being explored has a horizon of policy computation which is equal to the actual time horizon and if all the nodes of the policy have an action associated with them (lines 25-30).",
                "However, if those conditions are not met, then it is substituted by a group of policies that it represents (using EXTEND-POLICY () function) (lines 31-32).",
                "EXTEND-POLICY() function is also responsible for initializing the horizon and absNodes of a policy. absNodes represents the number of nodes at the last level in the policy tree, that do not have an action assigned to them.",
                "If πi.absNodes = |Ωi|πi.horizon−1 (i.e. total number of policy nodes possible at πi.horizon) , then πi.absNodes is set to zero and πi.horizon is increased by 1.",
                "Otherwise, πi.absNodes is increased by 1.",
                "Thus, this function combines both HBA and NBA by using the policy variables, horizon and absNodes.",
                "Before substituting the abstract policy with a group of policies, those policies are sorted based on heuristic values (line 33).",
                "Similar type of abstraction based best response computation is adopted at leaf agents (lines 3-14). 4.4 Value ApproXimation (VAX) In this section, we present an approximate enhancement to SPIDER called VAX.",
                "The input to this technique is an approximation parameter , which determines the difference from the optimal solution quality.",
                "This approximation parameter is used at each agent for pruning out joint policies.",
                "The pruning mechanism in SPIDER and SPIDER-Abs dictates that a joint policy be pruned only if the threshold is exactly greater than the heuristic value.",
                "However, the 826 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Figure 3: Example of abstraction for (a) HBA (Horizon Based Abstraction) and (b) NBA (Node Based Abstraction) idea in this technique is to prune out joint a policy if the following condition is satisfied: threshold + > ˆv[πi , πi− ].",
                "Apart from the pruning condition, VAX is the same as SPIDER/SPIDER-ABS.",
                "In the example of Figure 2, if the heuristic value for the second joint policy (or second search tree node) in level 2 were 238 instead of 232, then that policy could not be be pruned using SPIDER or SPIDER-Abs.",
                "However, in VAX with an approximation parameter of 5, the joint policy in consideration would also be pruned.",
                "This is because the threshold (234) at that juncture plus the approximation parameter (5), i.e. 239 would have been greater than the heuristic value for that joint policy (238).",
                "It can be noted from the example (just discussed) that this kind of pruning can lead to fewer explorations and hence lead to an improvement in the overall run-time performance.",
                "However, this can entail a sacrifice in the quality of the solution because this technique can prune out a candidate optimal solution.",
                "A bound on the error introduced by this approximate algorithm as a function of , is provided by Proposition 3. 4.5 Percentage ApproXimation (PAX) In this section, we present the second approximation enhancement over SPIDER called PAX.",
                "Input to this technique is a parameter, δ that represents the minimum percentage of the optimal solution quality that is desired.",
                "Output of this technique is a policy with an expected value that is at least δ% of the optimal solution quality.",
                "A policy is pruned if the following condition is satisfied: threshold > δ 100 ˆv[πi , πi− ].",
                "Like in VAX, the only difference between PAX and SPIDER/SPIDER-ABS is this pruning condition.",
                "Again in Figure 2, if the heuristic value for the second search tree node in level 2 were 238 instead of 232, then PAX with an input parameter of 98% would be able to prune that search tree node (since 98 100 ∗238 < 234).",
                "This type of pruning leads to fewer explorations and hence an improvement in run-time performance, while potentially leading to a loss in quality of the solution.",
                "Proposition 4 provides the bound on quality loss. 4.6 Theoretical Results PROPOSITION 1.",
                "Heuristic provided using the centralized MDP heuristic is admissible.",
                "Proof.",
                "For the value provided by the heuristic to be admissible, it should be an over estimate of the expected value for a joint policy.",
                "Thus, we need to show that: For l ∈ Ei+ ∪ Ei− : ˆvt l ≥ vt l (refer to notation in Section 4.2) We use mathematical induction on t to prove this.",
                "Base case: t = T − 1.",
                "Irrespective of whether l ∈ Ei− or l ∈ Ei+ , ˆrt l is computed by maximizing over all actions of the agents in Tree(i), while rt l is computed for fixed policies of the same agents.",
                "Hence, ˆrt l ≥ rt l and also ˆvt l ≥ vt l .",
                "Assumption: Proposition holds for t = η, where 1 ≤ η < T − 1.",
                "We now have to prove that the proposition holds for t = η − 1.",
                "We show the proof for l ∈ Ei− and similar reasoning can be adopted to prove for l ∈ Ei+ .",
                "The heuristic value function for l ∈ Ei− is provided by the following equation: ˆvη−1 l =ˆrη−1 l + max al2 ω η l1 ,s η l ˆpη−1 l1 ˆpη−1 l2 pη−1 u ˆvη l Rewriting the RHS and using Eqn 2 (in Section 4.2) =ˆrη−1 l + max al2 ω η l1 ,s η l pη−1 u pη−1 l1 ˆpη−1 l2 ˆvη l =ˆrη−1 l + ω η l1 ,s η l pη−1 u pη−1 l1 max al2 ˆpη−1 l2 ˆvη l Since maxal2 ˆpη−1 l2 ˆvη l ≥ ωl2 oη−1 l2 ˆpη−1 l2 ˆvη l and pη−1 l2 = oη−1 l2 ˆpη−1 l2 ≥ˆrη−1 l + ω η l1 ,s η l pη−1 u pη−1 l1 ωl2 pη−1 l2 ˆvη l Since ˆvη l ≥ vη l (from the assumption) ≥ˆrη−1 l + ω η l1 ,s η l pη−1 u pη−1 l1 ωl2 pη−1 l2 vη l Since ˆrη−1 l ≥ rη−1 l (by definition) ≥rη−1 l + ω η l1 ,s η l pη−1 u pη−1 l1 ωl2 pη−1 l2 vη l =rη−1 l + (ω η l ,s η l ) pη−1 u pη−1 l1 pη−1 l2 vη l = vη−1 l Thus proved.",
                "PROPOSITION 2.",
                "SPIDER provides an optimal solution.",
                "Proof.",
                "SPIDER examines all possible joint policies given the interaction structure of the agents.",
                "The only exception being when a joint policy is pruned based on the heuristic value.",
                "Thus, as long as a candidate optimal policy is not pruned, SPIDER will return an optimal policy.",
                "As proved in Proposition 1, the expected value for a joint policy is always an upper bound.",
                "Hence when a joint policy is pruned, it cannot be an optimal solution.",
                "PROPOSITION 3.",
                "Error bound on the solution quality for VAX (implemented over SPIDER-ABS) with an approximation parameter of is ρ , where ρ is the number of leaf nodes in the DFS tree.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 827 Proof.",
                "We prove this proposition using mathematical induction on the depth of the DFS tree.",
                "Base case: depth = 1 (i.e. one node).",
                "Best response is computed by iterating through all policies, Πk.",
                "A policy,πk is pruned if ˆv[πk, πk− ] < threshold + .",
                "Thus the best response policy computed by VAX would be at most away from the optimal best response.",
                "Hence the proposition holds for the base case.",
                "Assumption: Proposition holds for d, where 1 ≤ depth ≤ d. We now have to prove that the proposition holds for d + 1.",
                "Without loss of generality, lets assume that the root node of this tree has k children.",
                "Each of this children is of depth ≤ d, and hence from the assumption, the error introduced in kth child is ρk , where ρk is the number of leaf nodes in kth child of the root.",
                "Therefore, ρ = k ρk, where ρ is the number of leaf nodes in the tree.",
                "In SPIDER-ABS, threshold at the root agent, thresspider = k v[πk+ , πk− ].",
                "However, with VAX the threshold at the root agent will be (in the worst case), threshvax = k v[πk+ , πk− ]− k ρk .",
                "Hence, with VAX a joint policy is pruned at the root agent if ˆv[πroot, πroot− ] < threshvax + ⇒ ˆv[πroot, πroot− ] < threshspider − (( k ρk) − 1) ≤ threshspider − ( k ρk) ≤ threshspider − ρ .",
                "Hence proved.",
                "PROPOSITION 4.",
                "For PAX (implemented over SPIDER-ABS) with an input parameter of δ, the solution quality is at least δ 100 v[πroot+,∗ ], where v[πroot+,∗ ] denotes the optimal solution quality.",
                "Proof.",
                "We prove this proposition using mathematical induction on the depth of the DFS tree.",
                "Base case: depth = 1 (i.e. one node).",
                "Best response is computed by iterating through all policies, Πk.",
                "A policy,πk is pruned if δ 100 ˆv[πk, πk− ] < threshold.",
                "Thus the best response policy computed by PAX would be at least δ 100 times the optimal best response.",
                "Hence the proposition holds for the base case.",
                "Assumption: Proposition holds for d, where 1 ≤ depth ≤ d. We now have to prove that the proposition holds for d + 1.",
                "Without loss of generality, lets assume that the root node of this tree has k children.",
                "Each of this children is of depth ≤ d, and hence from the assumption, the solution quality in the kth child is at least δ 100 v[πk+,∗ , πk− ] for PAX.",
                "With SPIDER-ABS, a joint policy is pruned at the root agent if ˆv[πroot, πroot− ] < k v[πk+,∗ , πk− ].",
                "However with PAX, a joint policy is pruned if δ 100 ˆv[πroot, πroot− ] < k δ 100 v[πk+,∗ , πk− ] ⇒ ˆv[πroot, πroot− ] < k v[πk+,∗ , πk− ].",
                "Since the pruning condition at the root agent in PAX is the same as the one in SPIDER-ABS, there is no error introduced at the root agent and all the error is introduced in the children.",
                "Thus, overall solution quality is at least δ 100 of the optimal solution.",
                "Hence proved. 5.",
                "EXPERIMENTAL RESULTS All our experiments were conducted on the sensor network domain from Section 2.",
                "The five network configurations employed are shown in Figure 4.",
                "Algorithms that we experimented with are GOA, SPIDER, SPIDER-ABS, PAX and VAX.",
                "We compare against GOA because it is the only global optimal algorithm that considers more than two agents.",
                "We performed two sets of experiments: (i) firstly, we compared the run-time performance of the above algorithms and (ii) secondly, we experimented with PAX and VAX to study the tradeoff between run-time and solution quality.",
                "Experiments were terminated after 10000 seconds1 .",
                "Figure 5(a) provides run-time comparisons between the optimal algorithms GOA, SPIDER, SPIDER-Abs and the approximate algorithms, PAX ( of 30) and VAX(δ of 80).",
                "X-axis denotes the 1 Machine specs for all experiments: Intel Xeon 3.6 GHZ processor, 2GB RAM sensor network configuration used, while Y-axis indicates the runtime (on a log-scale).",
                "The time horizon of policy computation was 3.",
                "For each configuration (3-chain, 4-chain, 4-star and 5-star), there are five bars indicating the time taken by GOA, SPIDER, SPIDERAbs, PAX and VAX.",
                "GOA did not terminate within the time limit for 4-star and 5-star configurations.",
                "SPIDER-Abs dominated the SPIDER and GOA for all the configurations.",
                "For instance, in the 3chain configuration, SPIDER-ABS provides 230-fold speedup over GOA and 2-fold speedup over SPIDER and for the 4-chain configuration it provides 58-fold speedup over GOA and 2-fold speedup over SPIDER.",
                "The two approximation approaches, VAX and PAX provided further improvement in performance over SPIDER-Abs.",
                "For instance, in the 5-star configuration VAX provides a 15-fold speedup and PAX provides a 8-fold speedup over SPIDER-Abs.",
                "Figures 5(b) provides a comparison of the solution quality obtained using the different algorithms for the problems tested in Figure 5(a).",
                "X-axis denotes the sensor network configuration while Y-axis indicates the solution quality.",
                "Since GOA, SPIDER, and SPIDER-Abs are all global optimal algorithms, the solution quality is the same for all those algorithms.",
                "For 5-P configuration, the global optimal algorithms did not terminate within the limit of 10000 seconds, so the bar for optimal quality indicates an upper bound on the optimal solution quality.",
                "With both the approximations, we obtained a solution quality that was close to the optimal solution quality.",
                "In 3-chain and 4-star configurations, it is remarkable that both PAX and VAX obtained almost the same actual quality as the global optimal algorithms, despite the approximation parameter and δ.",
                "For other configurations as well, the loss in quality was less than 20% of the optimal solution quality.",
                "Figure 5(c) provides the time to solution with PAX (for varying epsilons).",
                "X-axis denotes the approximation parameter, δ (percentage to optimal) used, while Y-axis denotes the time taken to compute the solution (on a log-scale).",
                "The time horizon for all the configurations was 4.",
                "As δ was decreased from 70 to 30, the time to solution decreased drastically.",
                "For instance, in the 3-chain case there was a total speedup of 170-fold when the δ was changed from 70 to 30.",
                "Interestingly, even with a low δ of 30%, the actual solution quality remained equal to the one obtained at 70%.",
                "Figure 5(d) provides the time to solution for all the configurations with VAX (for varying epsilons).",
                "X-axis denotes the approximation parameter, used, while Y-axis denotes the time taken to compute the solution (on a log-scale).",
                "The time horizon for all the configurations was 4.",
                "As was increased, the time to solution decreased drastically.",
                "For instance, in the 4-star case there was a total speedup of 73-fold when the was changed from 60 to 140.",
                "Again, the actual solution quality did not change with varying epsilon.",
                "Figure 4: Sensor network configurations 828 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Figure 5: Comparison of GOA, SPIDER, SPIDER-Abs and VAX for T = 3 on (a) Runtime and (b) Solution quality; (c) Time to solution for PAX with varying percentage to optimal for T=4 (d) Time to solution for VAX with varying epsilon for T=4 6.",
                "SUMMARY AND RELATED WORK This paper presents four algorithms SPIDER, SPIDER-ABS, PAX and VAX that provide a novel combination of features for policy search in distributed POMDPs: (i) exploiting agent interaction structure given a network of agents (i.e. easier scale-up to larger number of agents); (ii) using branch and bound search with an MDP based heuristic function; (iii) utilizing abstraction to improve runtime performance without sacrificing solution quality; (iv) providing a priori percentage bounds on quality of solutions using PAX; and (v) providing expected value bounds on the quality of solutions using VAX.",
                "These features allow for systematic tradeoff of solution quality for run-time in networks of agents operating under uncertainty.",
                "Experimental results show orders of magnitude improvement in performance over previous global optimal algorithms.",
                "Researchers have typically employed two types of techniques for solving distributed POMDPs.",
                "The first set of techniques compute global optimal solutions.",
                "Hansen et al. [5] present an algorithm based on dynamic programming and iterated elimination of dominant policies, that provides optimal solutions for distributed POMDPs.",
                "Szer et al. [13] provide an optimal heuristic search method for solving Decentralized POMDPs.",
                "This algorithm is based on the combination of a classical heuristic search algorithm, A∗ and decentralized control theory.",
                "The key differences between SPIDER and MAA* are: (a) Enhancements to SPIDER (VAX and PAX) provide for quality guaranteed approximations, while MAA* is a global optimal algorithm and hence involves significant computational complexity; (b) Due to MAA*s inability to exploit interaction structure, it was illustrated only with two agents.",
                "However, SPIDER has been illustrated for networks of agents; and (c) SPIDER explores the joint policy one agent at a time, while MAA* expands it one time step at a time (simultaneously for all the agents).",
                "The second set of techniques seek approximate policies.",
                "EmeryMontemerlo et al. [4] approximate POSGs as a series of one-step Bayesian games using heuristics to approximate future value, trading off limited lookahead for computational efficiency, resulting in locally optimal policies (with respect to the selected heuristic).",
                "Nair et al. [9]s JESP algorithm uses dynamic programming to reach a local optimum solution for finite horizon decentralized POMDPs.",
                "Peshkin et al. [11] and Bernstein et al. [2] are examples of policy search techniques that search for locally optimal policies.",
                "Though all the above techniques improve the efficiency of policy computation considerably, they are unable to provide error bounds on the quality of the solution.",
                "This aspect of quality bounds differentiates SPIDER from all the above techniques.",
                "Acknowledgements.",
                "This material is based upon work supported by the Defense Advanced Research Projects Agency (DARPA), through the Department of the Interior, NBC, Acquisition Services Division under Contract No.",
                "NBCHD030010.",
                "The views and conclusions contained in this document are those of the authors, and should not be interpreted as representing the official policies, either expressed or implied, of the Defense Advanced Research Projects Agency or the U.S. Government. 7.",
                "REFERENCES [1] R. Becker, S. Zilberstein, V. Lesser, and C.V. Goldman.",
                "Solving transition independent decentralized Markov decision processes.",
                "JAIR, 22:423-455, 2004. [2] D. S. Bernstein, E.A.",
                "Hansen, and S. Zilberstein.",
                "Bounded policy iteration for decentralized POMDPs.",
                "In IJCAI, 2005. [3] D. S. Bernstein, S. Zilberstein, and N. Immerman.",
                "The complexity of decentralized control of MDPs.",
                "In UAI, 2000. [4] R. Emery-Montemerlo, G. Gordon, J. Schneider, and S. Thrun.",
                "Approximate solutions for partially observable stochastic games with common payoffs.",
                "In AAMAS, 2004. [5] E. Hansen, D. Bernstein, and S. Zilberstein.",
                "Dynamic programming for partially observable stochastic games.",
                "In AAAI, 2004. [6] V. Lesser, C. Ortiz, and M. Tambe.",
                "Distributed sensor nets: A multiagent perspective.",
                "Kluwer, 2003. [7] R. Maheswaran, M. Tambe, E. Bowring, J. Pearce, and P. Varakantham.",
                "Taking dcop to the real world : Efficient complete solutions for distributed event scheduling.",
                "In AAMAS, 2004. [8] P. J. Modi, W. Shen, M. Tambe, and M. Yokoo.",
                "An asynchronous complete method for distributed constraint optimization.",
                "In AAMAS, 2003. [9] R. Nair, D. Pynadath, M. Yokoo, M. Tambe, and S. Marsella.",
                "Taming decentralized POMDPs: Towards efficient policy computation for multiagent settings.",
                "In IJCAI, 2003. [10] R. Nair, P. Varakantham, M. Tambe, and M. Yokoo.",
                "Networked distributed POMDPs: A synthesis of distributed constraint optimization and POMDPs.",
                "In AAAI, 2005. [11] L. Peshkin, N. Meuleau, K.-E. Kim, and L. Kaelbling.",
                "Learning to cooperate via policy search.",
                "In UAI, 2000. [12] A. Petcu and B. Faltings.",
                "A scalable method for multiagent constraint optimization.",
                "In IJCAI, 2005. [13] D. Szer, F. Charpillet, and S. Zilberstein.",
                "MAA*: A heuristic search algorithm for solving decentralized POMDPs.",
                "In IJCAI, 2005.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 829"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "de Sistemas Inteligentes, Universidad de Kyushu, Fukuoka, 812-8581 Japón, yokoo@is.kyushu-u.ac.jp Resumen distribuido los problemas de decisión de Markov parcialmente observables (POMDPS distribuidos) son un enfoque popular para modelar el \"sistema multi-agente\" S Acting \"S Acting Systingen dominios inciertos."
            ],
            "translated_text": "",
            "candidates": [
                "sistema de múltiples agentes",
                "sistema multi-agente"
            ],
            "error": []
        },
        "uncertain domain": {
            "translated_key": "",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Letting loose a SPIDER on a network of POMDPs: Generating quality guaranteed policies Pradeep Varakantham, Janusz Marecki, Yuichi Yabu∗ , Milind Tambe, Makoto Yokoo∗ University of Southern California, Los Angeles, CA 90089, {varakant, marecki, tambe}@usc.edu ∗ Dept.",
                "of Intelligent Systems, Kyushu University, Fukuoka, 812-8581 Japan, yokoo@is.kyushu-u.ac.jp ABSTRACT Distributed Partially Observable Markov Decision Problems (Distributed POMDPs) are a popular approach for modeling multi-agent systems acting in <br>uncertain domain</br>s.",
                "Given the significant complexity of solving distributed POMDPs, particularly as we scale up the numbers of agents, one popular approach has focused on approximate solutions.",
                "Though this approach is efficient, the algorithms within this approach do not provide any guarantees on solution quality.",
                "A second less popular approach focuses on global optimality, but typical results are available only for two agents, and also at considerable computational cost.",
                "This paper overcomes the limitations of both these approaches by providing SPIDER, a novel combination of three key features for policy generation in distributed POMDPs: (i) it exploits agent interaction structure given a network of agents (i.e. allowing easier scale-up to larger number of agents); (ii) it uses a combination of heuristics to speedup policy search; and (iii) it allows quality guaranteed approximations, allowing a systematic tradeoff of solution quality for time.",
                "Experimental results show orders of magnitude improvement in performance when compared with previous global optimal algorithms.",
                "Categories and Subject Descriptors I.2.11 [Artificial Intelligence]: Distributed Artificial IntelligenceMulti-agent Systems General Terms Algorithms, Theory 1.",
                "INTRODUCTION Distributed Partially Observable Markov Decision Problems (Distributed POMDPs) are emerging as a popular approach for modeling sequential decision making in teams operating under uncertainty [9, 4, 1, 2, 13].",
                "The uncertainty arises on account of nondeterminism in the outcomes of actions and because the world state may only be partially (or incorrectly) observable.",
                "Unfortunately, as shown by Bernstein et al. [3], the problem of finding the optimal joint policy for general distributed POMDPs is NEXP-Complete.",
                "Researchers have attempted two different types of approaches towards solving these models.",
                "The first category consists of highly efficient approximate techniques, that may not reach globally optimal solutions [2, 9, 11].",
                "The key problem with these techniques has been their inability to provide any guarantees on the quality of the solution.",
                "In contrast, the second less popular category of approaches has focused on a global optimal result [13, 5, 10].",
                "Though these approaches obtain optimal solutions, they typically consider only two agents.",
                "Furthermore, they fail to exploit structure in the interactions of the agents and hence are severely hampered with respect to scalability when considering more than two agents.",
                "To address these problems with the existing approaches, we propose approximate techniques that provide guarantees on the quality of the solution while focussing on a network of more than two agents.",
                "We first propose the basic SPIDER (Search for Policies In Distributed EnviRonments) algorithm.",
                "There are two key novel features in SPIDER: (i) it is a branch and bound heuristic search technique that uses a MDP-based heuristic function to search for an optimal joint policy; (ii) it exploits network structure of agents by organizing agents into a Depth First Search (DFS) pseudo tree and takes advantage of the independence in the different branches of the DFS tree.",
                "We then provide three enhancements to improve the efficiency of the basic SPIDER algorithm while providing guarantees on the quality of the solution.",
                "The first enhancement uses abstractions for speedup, but does not sacrifice solution quality.",
                "In particular, it initially performs branch and bound search on abstract policies and then extends to complete policies.",
                "The second enhancement obtains speedups by sacrificing solution quality, but within an input parameter that provides the tolerable expected value difference from the optimal solution.",
                "The third enhancement is again based on bounding the search for efficiency, however with a tolerance parameter that is provided as a percentage of optimal.",
                "We experimented with the sensor network domain presented in Nair et al. [10], a domain representative of an important class of problems with networks of agents working in uncertain environments.",
                "In our experiments, we illustrate that SPIDER dominates an existing global optimal approach called GOA [10], the only known global optimal algorithm with demonstrated experimental results for more than two agents.",
                "Furthermore, we demonstrate that abstraction improves the performance of SPIDER significantly (while providing optimal solutions).",
                "We finally demonstrate a key feature of SPIDER: by utilizing the approximation enhancements it enables principled tradeoffs in run-time versus solution quality. 822 978-81-904262-7-5 (RPS) c 2007 IFAAMAS 2.",
                "DOMAIN: DISTRIBUTED SENSOR NETS Distributed sensor networks are a large, important class of domains that motivate our work.",
                "This paper focuses on a set of target tracking problems that arise in certain types of sensor networks [6] first introduced in [10].",
                "Figure 1 shows a specific problem instance within this type consisting of three sensors.",
                "Here, each sensor node can scan in one of four directions: North, South, East or West (see Figure 1).",
                "To track a target and obtain associated reward, two sensors with overlapping scanning areas must coordinate by scanning the same area simultaneously.",
                "In Figure 1, to track a target in Loc11, sensor1 needs to scan East and sensor2 needs to scan West simultaneously.",
                "Thus, sensors have to act in a coordinated fashion.",
                "We assume that there are two independent targets and that each targets movement is uncertain and unaffected by the sensor agents.",
                "Based on the area it is scanning, each sensor receives observations that can have false positives and false negatives.",
                "The sensors observations and transitions are independent of each others actions e.g.the observations that sensor1 receives are independent of sensor2s actions.",
                "Each agent incurs a cost for scanning whether the target is present or not, but no cost if it turns off.",
                "Given the sensors observational uncertainty, the targets uncertain transitions and the distributed nature of the sensor nodes, these sensor nets provide a useful domains for applying distributed POMDP models.",
                "Figure 1: A 3-chain sensor configuration 3.",
                "BACKGROUND 3.1 Model: Network Distributed POMDP The ND-POMDP model was introduced in [10], motivated by domains such as the sensor networks introduced in Section 2.",
                "It is defined as the tuple S, A, P, Ω, O, R, b , where S = ×1≤i≤nSi × Su is the set of world states.",
                "Si refers to the set of local states of agent i and Su is the set of unaffectable states.",
                "Unaffectable state refers to that part of the world state that cannot be affected by the agents actions, e.g. environmental factors like target locations that no agent can control.",
                "A = ×1≤i≤nAi is the set of joint actions, where Ai is the set of action for agent i. ND-POMDP assumes transition independence, where the transition function is defined as P(s, a, s ) = Pu(su, su) · 1≤i≤n Pi(si, su, ai, si), where a = a1, . . . , an is the joint action performed in state s = s1, . . . , sn, su and s = s1, . . . , sn, su is the resulting state.",
                "Ω = ×1≤i≤nΩi is the set of joint observations where Ωi is the set of observations for agents i. Observational independence is assumed in ND-POMDPs i.e., the joint observation function is defined as O(s, a, ω) = 1≤i≤n Oi(si, su, ai, ωi), where s = s1, . . . , sn, su is the world state that results from the agents performing a = a1, . . . , an in the previous state, and ω = ω1, . . . , ωn ∈ Ω is the observation received in state s. This implies that each agents observation depends only on the unaffectable state, its local action and on its resulting local state.",
                "The reward function, R, is defined as R(s, a) = l Rl(sl1, . . . , slr, su, al1, . . . , alr ), where each l could refer to any sub-group of agents and r = |l|.",
                "Based on the reward function, an interaction hypergraph is constructed.",
                "A hyper-link, l, exists between a subset of agents for all Rl that comprise R. The interaction hypergraph is defined as G = (Ag, E), where the agents, Ag, are the vertices and E = {l|l ⊆ Ag ∧ Rl is a component of R} are the edges.",
                "The initial belief state (distribution over the initial state), b, is defined as b(s) = bu(su) · 1≤i≤n bi(si), where bu and bi refer to the distribution over initial unaffectable state and agent is initial belief state, respectively.",
                "The goal in ND-POMDP is to compute the joint policy π = π1, . . . , πn that maximizes teams expected reward over a finite horizon T starting from the belief state b.",
                "An ND-POMDP is similar to an n-ary Distributed Constraint Optimization Problem (DCOP)[8, 12] where the variable at each node represents the policy selected by an individual agent, πi with the domain of the variable being the set of all local policies, Πi.",
                "The reward component Rl where |l| = 1 can be thought of as a local constraint while the reward component Rl where l > 1 corresponds to a non-local constraint in the constraint graph. 3.2 Algorithm: Global Optimal Algorithm (GOA) In previous work, GOA has been defined as a global optimal algorithm for ND-POMDPs [10].",
                "We will use GOA in our experimental comparisons, since GOA is a state-of-the-art global optimal algorithm, and in fact the only one with experimental results available for networks of more than two agents.",
                "GOA borrows from a global optimal DCOP algorithm called DPOP[12].",
                "GOAs message passing follows that of DPOP.",
                "The first phase is the UTIL propagation, where the utility messages, in this case values of policies, are passed up from the leaves to the root.",
                "Value for a policy at an agent is defined as the sum of best response values from its children and the joint policy reward associated with the parent policy.",
                "Thus, given a policy for a parent node, GOA requires an agent to iterate through all its policies, finding the best response policy and returning the value to the parent - while at the parent node, to find the best policy, an agent requires its children to return their best responses to each of its policies.",
                "This UTIL propagation process is repeated at each level in the tree, until the root exhausts all its policies.",
                "In the second phase of VALUE propagation, where the optimal policies are passed down from the root till the leaves.",
                "GOA takes advantage of the local interactions in the interaction graph, by pruning out unnecessary joint policy evaluations (associated with nodes not connected directly in the tree).",
                "Since the interaction graph captures all the reward interactions among agents and as this algorithm iterates through all the relevant joint policy evaluations, this algorithm yields a globally optimal solution. 4.",
                "SPIDER As mentioned in Section 3.1, an ND-POMDP can be treated as a DCOP, where the goal is to compute a joint policy that maximizes the overall joint reward.",
                "The brute-force technique for computing an optimal policy would be to examine the expected values for all possible joint policies.",
                "The key idea in SPIDER is to avoid computation of expected values for the entire space of joint policies, by utilizing upper bounds on the expected values of policies and the interaction structure of the agents.",
                "Akin to some of the algorithms for DCOP [8, 12], SPIDER has a pre-processing step that constructs a DFS tree corresponding to the given interaction structure.",
                "Note that these DFS trees are pseudo trees [12] that allow links between ancestors and children.",
                "We employ the Maximum Constrained Node (MCN) heuristic used in the DCOP algorithm, ADOPT [8], however other heuristics (such as MLSP heuristic from [7]) can also be employed.",
                "MCN heuristic tries to place agents with more number of constraints at the top of the tree.",
                "This tree governs how the search for the optimal joint polThe Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 823 icy proceeds in SPIDER.",
                "The algorithms presented in this paper are easily extendable to hyper-trees, however for expository purposes, we assume binary trees.",
                "SPIDER is an algorithm for centralized planning and distributed execution in distributed POMDPs.",
                "In this paper, we employ the following notation to denote policies and expected values: Ancestors(i) ⇒ agents from i to the root (not including i).",
                "Tree(i) ⇒ agents in the sub-tree (not including i) for which i is the root. πroot+ ⇒ joint policy of all agents. πi+ ⇒ joint policy of all agents in Tree(i) ∪ i. πi− ⇒ joint policy of agents that are in Ancestors(i). πi ⇒ policy of the ith agent. ˆv[πi, πi− ] ⇒ upper bound on the expected value for πi+ given πi and policies of ancestor agents i.e. πi− . ˆvj[πi, πi− ] ⇒ upper bound on the expected value for πi+ from the jth child. v[πi, πi− ] ⇒ expected value for πi given policies of ancestor agents, πi− . v[πi+ , πi− ] ⇒ expected value for πi+ given policies of ancestor agents, πi− . vj[πi+ , πi− ] ⇒ expected value for πi+ from the jth child.",
                "Figure 2: Execution of SPIDER, an example 4.1 Outline of SPIDER SPIDER is based on the idea of branch and bound search, where the nodes in the search tree represent partial/complete joint policies.",
                "Figure 2 shows an example search tree for the SPIDER algorithm, using an example of the three agent chain.",
                "Before SPIDER begins its search we create a DFS tree (i.e. pseudo tree) from the three agent chain, with the middle agent as the root of this tree.",
                "SPIDER exploits the structure of this DFS tree while engaging in its search.",
                "Note that in our example figure, each agent is assigned a policy with T=2.",
                "Thus, each rounded rectange (search tree node) indicates a partial/complete joint policy, a rectangle indicates an agent and the ovals internal to an agent show its policy.",
                "Heuristic or actual expected value for a joint policy is indicated in the top right corner of the rounded rectangle.",
                "If the number is italicized and underlined, it implies that the actual expected value of the joint policy is provided.",
                "SPIDER begins with no policy assigned to any of the agents (shown in the level 1 of the search tree).",
                "Level 2 of the search tree indicates that the joint policies are sorted based on upper bounds computed for root agents policies.",
                "Level 3 shows one SPIDER search node with a complete joint policy (a policy assigned to each of the agents).",
                "The expected value for this joint policy is used to prune out the nodes in level 2 (the ones with upper bounds < 234) When creating policies for each non-leaf agent i, SPIDER potentially performs two steps: 1.",
                "Obtaining upper bounds and sorting: In this step, agent i computes upper bounds on the expected values, ˆv[πi, πi− ] of the joint policies πi+ corresponding to each of its policy πi and fixed ancestor policies.",
                "An MDP based heuristic is used to compute these upper bounds on the expected values.",
                "Detailed description about this MDP heuristic is provided in Section 4.2.",
                "All policies of agent i, Πi are then sorted based on these upper bounds (also referred to as heuristic values henceforth) in descending order.",
                "Exploration of these policies (in step 2 below) are performed in this descending order.",
                "As indicated in the level 2 of the search tree (of Figure 2), all the joint policies are sorted based on the heuristic values, indicated in the top right corner of each joint policy.",
                "The intuition behind sorting and then exploring policies in descending order of upper bounds, is that the policies with higher upper bounds could yield joint policies with higher expected values. 2.",
                "Exploration and Pruning: Exploration implies computing the best response joint policy πi+,∗ corresponding to fixed ancestor policies of agent i, πi− .",
                "This is performed by iterating through all policies of agent i i.e.",
                "Πi and summing two quantities for each policy: (i) the best response for all of is children (obtained by performing steps 1 and 2 at each of the child nodes); (ii) the expected value obtained by i for fixed policies of ancestors.",
                "Thus, exploration of a policy πi yields actual expected value of a joint policy, πi+ represented as v[πi+ , πi− ].",
                "The policy with the highest expected value is the best response policy.",
                "Pruning refers to avoiding exploring all policies (or computing expected values) at agent i by using the current best expected value, vmax [πi+ , πi− ].",
                "Henceforth, this vmax [πi+ , πi− ] will be referred to as threshold.",
                "A policy, πi need not be explored if the upper bound for that policy, ˆv[πi, πi− ] is less than the threshold.",
                "This is because the expected value for the best joint policy attainable for that policy will be less than the threshold.",
                "On the other hand, when considering a leaf agent, SPIDER computes the best response policy (and consequently its expected value) corresponding to fixed policies of its ancestors, πi− .",
                "This is accomplished by computing expected values for each of the policies (corresponding to fixed policies of ancestors) and selecting the highest expected value policy.",
                "In Figure 2, SPIDER assigns best response policies to leaf agents at level 3.",
                "The policy for the left leaf agent is to perform action East at each time step in the policy, while the policy for the right leaf agent is to perform Off at each time step.",
                "These best response policies from the leaf agents yield an actual expected value of 234 for the complete joint policy.",
                "Algorithm 1 provides the pseudo code for SPIDER.",
                "This algorithm outputs the best joint policy, πi+,∗ (with an expected value greater than threshold) for the agents in Tree(i).",
                "Lines 3-8 compute the best response policy of a leaf agent i, while lines 9-23 computes the best response joint policy for agents in Tree(i).",
                "This best response computation for a non-leaf agent i includes: (a) Sorting of policies (in descending order) based on heuristic values on line 11; (b) Computing best response policies at each of the children for fixed policies of agent i in lines 16-20; and (c) Maintaining 824 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Algorithm 1 SPIDER(i, πi− , threshold) 1: πi+,∗ ← null 2: Πi ← GET-ALL-POLICIES (horizon, Ai, Ωi) 3: if IS-LEAF(i) then 4: for all πi ∈ Πi do 5: v[πi, πi−] ← JOINT-REWARD (πi, πi−) 6: if v[πi, πi−] > threshold then 7: πi+,∗ ← πi 8: threshold ← v[πi, πi−] 9: else 10: children ← CHILDREN (i) 11: ˆΠi ← UPPER-BOUND-SORT(i, Πi, πi−) 12: for all πi ∈ ˆΠi do 13: ˜πi+ ← πi 14: if ˆv[πi, πi−] < threshold then 15: Go to line 12 16: for all j ∈ children do 17: jThres ← threshold − v[πi, πi−]− Σk∈children,k=j ˆvk[πi, πi−] 18: πj+,∗ ← SPIDER(j, πi πi−, jThres) 19: ˜πi+ ← ˜πi+ πj+,∗ 20: ˆvj[πi, πi−] ← v[πj+,∗, πi πi−] 21: if v[˜πi+, πi−] > threshold then 22: threshold ← v[˜πi+, πi−] 23: πi+,∗ ← ˜πi+ 24: return πi+,∗ Algorithm 2 UPPER-BOUND-SORT(i, Πi, πi− ) 1: children ← CHILDREN (i) 2: ˆΠi ← null /* Stores the sorted list */ 3: for all πi ∈ Πi do 4: ˆv[πi, πi−] ← JOINT-REWARD (πi, πi−) 5: for all j ∈ children do 6: ˆvj[πi, πi−] ← UPPER-BOUND(i, j, πi πi−) 7: ˆv[πi, πi−] + ← ˆvj[πi, πi−] 8: ˆΠi ← INSERT-INTO-SORTED (πi, ˆΠi) 9: return ˆΠi best expected value, joint policy in lines 21-23.",
                "Algorithm 2 provides the pseudo code for sorting policies based on the upper bounds on the expected values of joint policies.",
                "Expected value for an agent i consists of two parts: value obtained from ancestors and value obtained from its children.",
                "Line 4 computes the expected value obtained from ancestors of the agent (using JOINT-REWARD function), while lines 5-7 compute the heuristic value from the children.",
                "The sum of these two parts yields an upper bound on the expected value for agent i, and line 8 of the algorithm sorts the policies based on these upper bounds. 4.2 MDP based heuristic function The heuristic function quickly provides an upper bound on the expected value obtainable from the agents in Tree(i).",
                "The subtree of agents is a distributed POMDP in itself and the idea here is to construct a centralized MDP corresponding to the (sub-tree) distributed POMDP and obtain the expected value of the optimal policy for this centralized MDP.",
                "To reiterate this in terms of the agents in DFS tree interaction structure, we assume full observability for the agents in Tree(i) and for fixed policies of the agents in {Ancestors(i) ∪ i}, we compute the joint value ˆv[πi+ , πi− ] .",
                "We use the following notation for presenting the equations for computing upper bounds/heuristic values (for agents i and k): Let Ei− denote the set of links between agents in {Ancestors(i)∪ i} and Tree(i), Ei+ denote the set of links between agents in Tree(i).",
                "Also, if l ∈ Ei− , then l1 is the agent in {Ancestors(i)∪ i} and l2 is the agent in Tree(i), that l connects together.",
                "We first compact the standard notation: ot k =Ok(st+1 k , st+1 u , πk(ωt k), ωt+1 k ) (1) pt k =Pk(st k, st u, πk(ωt k), st+1 k ) · ot k pt u =P(st u, st+1 u ) st l = st l1 , st l2 , st u ; ωt l = ωt l1 , ωt l2 rt l =Rl(st l , πl1 (ωt l1 ), πl2 (ωt l2 )) vt l =V t πl (st l , st u, ωt l1 , ωt l2 ) Depending on the location of agent k in the agent tree we have the following cases: IF k ∈ {Ancestors(i) ∪ i}, ˆpt k = pt k, (2) IF k ∈ Tree(i), ˆpt k = Pk(st k, st u, πk(ωt k), st+1 k ) IF l ∈ Ei− , ˆrt l = max {al2 } Rl(st l , πl1 (ωt l1 ), al2 ) IF l ∈ Ei+ , ˆrt l = max {al1 ,al2 } Rl(st l , al1 , al2 ) The value function for an agent i executing the joint policy πi+ at time η − 1 is provided by the equation: V η−1 πi+ (sη−1 , ωη−1 ) = l∈Ei− vη−1 l + l∈Ei+ vη−1 l (3) where vη−1 l = rη−1 l + ω η l ,sη pη−1 l1 pη−1 l2 pη−1 u vη l Algorithm 3 UPPER-BOUND (i, j, πj− ) 1: val ← 0 2: for all l ∈ Ej− ∪ Ej+ do 3: if l ∈ Ej− then πl1 ← φ 4: for all s0 l do 5: val + ← startBel[s0 l ]· UPPER-BOUND-TIME (i, s0 l , j, πl1 , ) 6: return val Algorithm 4 UPPER-BOUND-TIME (i, st l , j, πl1 , ωt l1 ) 1: maxV al ← −∞ 2: for all al1 , al2 do 3: if l ∈ Ei− and l ∈ Ej− then al1 ← πl1 (ωt l1 ) 4: val ← GET-REWARD(st l , al1 , al2 ) 5: if t < πi.horizon − 1 then 6: for all st+1 l , ωt+1 l1 do 7: futV al←pt u ˆpt l1 ˆpt l2 8: futV al ∗ ← UPPER-BOUND-TIME(st+1 l , j, πl1 , ωt l1 ωt+1 l1 ) 9: val + ← futV al 10: if val > maxV al then maxV al ← val 11: return maxV al Upper bound on the expected value for a link is computed by modifying the equation 3 to reflect the full observability assumption.",
                "This involves removing the observational probability term for agents in Tree(i) and maximizing the future value ˆvη l over the actions of those agents (in Tree(i)).",
                "Thus, the equation for the The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 825 computation of the upper bound on a link l, is as follows: IF l ∈ Ei− , ˆvη−1 l =ˆrη−1 l + max al2 ω η l1 ,s η l ˆpη−1 l1 ˆpη−1 l2 pη−1 u ˆvη l IF l ∈ Ei+ , ˆvη−1 l =ˆrη−1 l + max al1 ,al2 s η l ˆpη−1 l1 ˆpη−1 l2 pη−1 u ˆvη l Algorithm 3 and Algorithm 4 provide the algorithm for computing upper bound for child j of agent i, using the equations descirbed above.",
                "While Algorithm 4 computes the upper bound on a link given the starting state, Algorithm 3 sums the upper bound values computed over each of the links in Ei− ∪ Ei+ . 4.3 Abstraction Algorithm 5 SPIDER-ABS(i, πi− , threshold) 1: πi+,∗ ← null 2: Πi ← GET-POLICIES (<>, 1) 3: if IS-LEAF(i) then 4: for all πi ∈ Πi do 5: absHeuristic ← GET-ABS-HEURISTIC (πi, πi−) 6: absHeuristic ∗ ← (timeHorizon − πi.horizon) 7: if πi.horizon = timeHorizon and πi.absNodes = 0 then 8: v[πi, πi−] ← JOINT-REWARD (πi, πi−) 9: if v[πi, πi−] > threshold then 10: πi+,∗ ← πi; threshold ← v[πi, πi−] 11: else if v[πi, πi−] + absHeuristic > threshold then 12: ˆΠi ← EXTEND-POLICY (πi, πi.absNodes + 1) 13: Πi + ← INSERT-SORTED-POLICIES ( ˆΠi) 14: REMOVE(πi) 15: else 16: children ← CHILDREN (i) 17: Πi ← UPPER-BOUND-SORT(i, Πi, πi−) 18: for all πi ∈ Πi do 19: ˜πi+ ← πi 20: absHeuristic ← GET-ABS-HEURISTIC (πi, πi−) 21: absHeuristic ∗ ← (timeHorizon − πi.horizon) 22: if πi.horizon = timeHorizon and πi.absNodes = 0 then 23: if ˆv[πi, πi−] < threshold and πi.absNodes = 0 then 24: Go to line 19 25: for all j ∈ children do 26: jThres ← threshold − v[πi, πi−]− Σk∈children,k=j ˆvk[πi, πi−] 27: πj+,∗ ← SPIDER(j, πi πi−, jThres) 28: ˜πi+ ← ˜πi+ πj+,∗; ˆvj[πi, πi−] ← v[πj+,∗, πi πi−] 29: if v[˜πi+, πi−] > threshold then 30: threshold ← v[˜πi+, πi−]; πi+,∗ ← ˜πi+ 31: else if ˆv[πi+, πi−] + absHeuristic > threshold then 32: ˆΠi ← EXTEND-POLICY (πi, πi.absNodes + 1) 33: Πi + ← INSERT-SORTED-POLICIES (ˆΠi) 34: REMOVE(πi) 35: return πi+,∗ In SPIDER, the exploration/pruning phase can only begin after the heuristic (or upper bound) computation and sorting for the policies has ended.",
                "We provide an approach to possibly circumvent the exploration of a group of policies based on heuristic computation for one abstract policy, thus leading to an improvement in runtime performance (without loss in solution quality).",
                "The important steps in this technique are defining the abstract policy and how heuristic values are computated for the abstract policies.",
                "In this paper, we propose two types of abstraction: 1.",
                "Horizon Based Abstraction (HBA): Here, the abstract policy is defined as a shorter horizon policy.",
                "It represents a group of longer horizon policies that have the same actions as the abstract policy for times less than or equal to the horizon of the abstract policy.",
                "In Figure 3(a), a T=1 abstract policy that performs East action, represents a group of T=2 policies, that perform East in the first time step.",
                "For HBA, there are two parts to heuristic computation: (a) Computing the upper bound for the horizon of the abstract policy.",
                "This is same as the heuristic computation defined by the GETHEURISTIC() algorithm for SPIDER, however with a shorter time horizon (horizon of the abstract policy). (b) Computing the maximum possible reward that can be accumulated in one time step (using GET-ABS-HEURISTIC()) and multiplying it by the number of time steps to time horizon.",
                "This maximum possible reward (for one time step) is obtained by iterating through all the actions of all the agents in Tree(i) and computing the maximum joint reward for any joint action.",
                "Sum of (a) and (b) is the heuristic value for a HBA abstract policy. 2.",
                "Node Based Abstraction (NBA): Here an abstract policy is obtained by not associating actions to certain nodes of the policy tree.",
                "Unlike in HBA, this implies multiple levels of abstraction.",
                "This is illustrated in Figure 3(b), where there are T=2 policies that do not have an action for observation TP.",
                "These incomplete T=2 policies are abstractions for T=2 complete policies.",
                "Increased levels of abstraction leads to faster computation of a complete joint policy, πroot+ and also to shorter heuristic computation and exploration, pruning phases.",
                "For NBA, the heuristic computation is similar to that of a normal policy, except in cases where there is no action associated with policy nodes.",
                "In such cases, the immediate reward is taken as Rmax (maximum reward for any action).",
                "We combine both the abstraction techniques mentioned above into one technique, SPIDER-ABS.",
                "Algorithm 5 provides the algorithm for this abstraction technique.",
                "For computing optimal joint policy with SPIDER-ABS, a non-leaf agent i initially examines all abstract T=1 policies (line 2) and sorts them based on abstract policy heuristic computations (line 17).",
                "The abstraction horizon is gradually increased and these abstract policies are then explored in descending order of heuristic values and ones that have heuristic values less than the threshold are pruned (lines 23-24).",
                "Exploration in SPIDER-ABS has the same definition as in SPIDER if the policy being explored has a horizon of policy computation which is equal to the actual time horizon and if all the nodes of the policy have an action associated with them (lines 25-30).",
                "However, if those conditions are not met, then it is substituted by a group of policies that it represents (using EXTEND-POLICY () function) (lines 31-32).",
                "EXTEND-POLICY() function is also responsible for initializing the horizon and absNodes of a policy. absNodes represents the number of nodes at the last level in the policy tree, that do not have an action assigned to them.",
                "If πi.absNodes = |Ωi|πi.horizon−1 (i.e. total number of policy nodes possible at πi.horizon) , then πi.absNodes is set to zero and πi.horizon is increased by 1.",
                "Otherwise, πi.absNodes is increased by 1.",
                "Thus, this function combines both HBA and NBA by using the policy variables, horizon and absNodes.",
                "Before substituting the abstract policy with a group of policies, those policies are sorted based on heuristic values (line 33).",
                "Similar type of abstraction based best response computation is adopted at leaf agents (lines 3-14). 4.4 Value ApproXimation (VAX) In this section, we present an approximate enhancement to SPIDER called VAX.",
                "The input to this technique is an approximation parameter , which determines the difference from the optimal solution quality.",
                "This approximation parameter is used at each agent for pruning out joint policies.",
                "The pruning mechanism in SPIDER and SPIDER-Abs dictates that a joint policy be pruned only if the threshold is exactly greater than the heuristic value.",
                "However, the 826 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Figure 3: Example of abstraction for (a) HBA (Horizon Based Abstraction) and (b) NBA (Node Based Abstraction) idea in this technique is to prune out joint a policy if the following condition is satisfied: threshold + > ˆv[πi , πi− ].",
                "Apart from the pruning condition, VAX is the same as SPIDER/SPIDER-ABS.",
                "In the example of Figure 2, if the heuristic value for the second joint policy (or second search tree node) in level 2 were 238 instead of 232, then that policy could not be be pruned using SPIDER or SPIDER-Abs.",
                "However, in VAX with an approximation parameter of 5, the joint policy in consideration would also be pruned.",
                "This is because the threshold (234) at that juncture plus the approximation parameter (5), i.e. 239 would have been greater than the heuristic value for that joint policy (238).",
                "It can be noted from the example (just discussed) that this kind of pruning can lead to fewer explorations and hence lead to an improvement in the overall run-time performance.",
                "However, this can entail a sacrifice in the quality of the solution because this technique can prune out a candidate optimal solution.",
                "A bound on the error introduced by this approximate algorithm as a function of , is provided by Proposition 3. 4.5 Percentage ApproXimation (PAX) In this section, we present the second approximation enhancement over SPIDER called PAX.",
                "Input to this technique is a parameter, δ that represents the minimum percentage of the optimal solution quality that is desired.",
                "Output of this technique is a policy with an expected value that is at least δ% of the optimal solution quality.",
                "A policy is pruned if the following condition is satisfied: threshold > δ 100 ˆv[πi , πi− ].",
                "Like in VAX, the only difference between PAX and SPIDER/SPIDER-ABS is this pruning condition.",
                "Again in Figure 2, if the heuristic value for the second search tree node in level 2 were 238 instead of 232, then PAX with an input parameter of 98% would be able to prune that search tree node (since 98 100 ∗238 < 234).",
                "This type of pruning leads to fewer explorations and hence an improvement in run-time performance, while potentially leading to a loss in quality of the solution.",
                "Proposition 4 provides the bound on quality loss. 4.6 Theoretical Results PROPOSITION 1.",
                "Heuristic provided using the centralized MDP heuristic is admissible.",
                "Proof.",
                "For the value provided by the heuristic to be admissible, it should be an over estimate of the expected value for a joint policy.",
                "Thus, we need to show that: For l ∈ Ei+ ∪ Ei− : ˆvt l ≥ vt l (refer to notation in Section 4.2) We use mathematical induction on t to prove this.",
                "Base case: t = T − 1.",
                "Irrespective of whether l ∈ Ei− or l ∈ Ei+ , ˆrt l is computed by maximizing over all actions of the agents in Tree(i), while rt l is computed for fixed policies of the same agents.",
                "Hence, ˆrt l ≥ rt l and also ˆvt l ≥ vt l .",
                "Assumption: Proposition holds for t = η, where 1 ≤ η < T − 1.",
                "We now have to prove that the proposition holds for t = η − 1.",
                "We show the proof for l ∈ Ei− and similar reasoning can be adopted to prove for l ∈ Ei+ .",
                "The heuristic value function for l ∈ Ei− is provided by the following equation: ˆvη−1 l =ˆrη−1 l + max al2 ω η l1 ,s η l ˆpη−1 l1 ˆpη−1 l2 pη−1 u ˆvη l Rewriting the RHS and using Eqn 2 (in Section 4.2) =ˆrη−1 l + max al2 ω η l1 ,s η l pη−1 u pη−1 l1 ˆpη−1 l2 ˆvη l =ˆrη−1 l + ω η l1 ,s η l pη−1 u pη−1 l1 max al2 ˆpη−1 l2 ˆvη l Since maxal2 ˆpη−1 l2 ˆvη l ≥ ωl2 oη−1 l2 ˆpη−1 l2 ˆvη l and pη−1 l2 = oη−1 l2 ˆpη−1 l2 ≥ˆrη−1 l + ω η l1 ,s η l pη−1 u pη−1 l1 ωl2 pη−1 l2 ˆvη l Since ˆvη l ≥ vη l (from the assumption) ≥ˆrη−1 l + ω η l1 ,s η l pη−1 u pη−1 l1 ωl2 pη−1 l2 vη l Since ˆrη−1 l ≥ rη−1 l (by definition) ≥rη−1 l + ω η l1 ,s η l pη−1 u pη−1 l1 ωl2 pη−1 l2 vη l =rη−1 l + (ω η l ,s η l ) pη−1 u pη−1 l1 pη−1 l2 vη l = vη−1 l Thus proved.",
                "PROPOSITION 2.",
                "SPIDER provides an optimal solution.",
                "Proof.",
                "SPIDER examines all possible joint policies given the interaction structure of the agents.",
                "The only exception being when a joint policy is pruned based on the heuristic value.",
                "Thus, as long as a candidate optimal policy is not pruned, SPIDER will return an optimal policy.",
                "As proved in Proposition 1, the expected value for a joint policy is always an upper bound.",
                "Hence when a joint policy is pruned, it cannot be an optimal solution.",
                "PROPOSITION 3.",
                "Error bound on the solution quality for VAX (implemented over SPIDER-ABS) with an approximation parameter of is ρ , where ρ is the number of leaf nodes in the DFS tree.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 827 Proof.",
                "We prove this proposition using mathematical induction on the depth of the DFS tree.",
                "Base case: depth = 1 (i.e. one node).",
                "Best response is computed by iterating through all policies, Πk.",
                "A policy,πk is pruned if ˆv[πk, πk− ] < threshold + .",
                "Thus the best response policy computed by VAX would be at most away from the optimal best response.",
                "Hence the proposition holds for the base case.",
                "Assumption: Proposition holds for d, where 1 ≤ depth ≤ d. We now have to prove that the proposition holds for d + 1.",
                "Without loss of generality, lets assume that the root node of this tree has k children.",
                "Each of this children is of depth ≤ d, and hence from the assumption, the error introduced in kth child is ρk , where ρk is the number of leaf nodes in kth child of the root.",
                "Therefore, ρ = k ρk, where ρ is the number of leaf nodes in the tree.",
                "In SPIDER-ABS, threshold at the root agent, thresspider = k v[πk+ , πk− ].",
                "However, with VAX the threshold at the root agent will be (in the worst case), threshvax = k v[πk+ , πk− ]− k ρk .",
                "Hence, with VAX a joint policy is pruned at the root agent if ˆv[πroot, πroot− ] < threshvax + ⇒ ˆv[πroot, πroot− ] < threshspider − (( k ρk) − 1) ≤ threshspider − ( k ρk) ≤ threshspider − ρ .",
                "Hence proved.",
                "PROPOSITION 4.",
                "For PAX (implemented over SPIDER-ABS) with an input parameter of δ, the solution quality is at least δ 100 v[πroot+,∗ ], where v[πroot+,∗ ] denotes the optimal solution quality.",
                "Proof.",
                "We prove this proposition using mathematical induction on the depth of the DFS tree.",
                "Base case: depth = 1 (i.e. one node).",
                "Best response is computed by iterating through all policies, Πk.",
                "A policy,πk is pruned if δ 100 ˆv[πk, πk− ] < threshold.",
                "Thus the best response policy computed by PAX would be at least δ 100 times the optimal best response.",
                "Hence the proposition holds for the base case.",
                "Assumption: Proposition holds for d, where 1 ≤ depth ≤ d. We now have to prove that the proposition holds for d + 1.",
                "Without loss of generality, lets assume that the root node of this tree has k children.",
                "Each of this children is of depth ≤ d, and hence from the assumption, the solution quality in the kth child is at least δ 100 v[πk+,∗ , πk− ] for PAX.",
                "With SPIDER-ABS, a joint policy is pruned at the root agent if ˆv[πroot, πroot− ] < k v[πk+,∗ , πk− ].",
                "However with PAX, a joint policy is pruned if δ 100 ˆv[πroot, πroot− ] < k δ 100 v[πk+,∗ , πk− ] ⇒ ˆv[πroot, πroot− ] < k v[πk+,∗ , πk− ].",
                "Since the pruning condition at the root agent in PAX is the same as the one in SPIDER-ABS, there is no error introduced at the root agent and all the error is introduced in the children.",
                "Thus, overall solution quality is at least δ 100 of the optimal solution.",
                "Hence proved. 5.",
                "EXPERIMENTAL RESULTS All our experiments were conducted on the sensor network domain from Section 2.",
                "The five network configurations employed are shown in Figure 4.",
                "Algorithms that we experimented with are GOA, SPIDER, SPIDER-ABS, PAX and VAX.",
                "We compare against GOA because it is the only global optimal algorithm that considers more than two agents.",
                "We performed two sets of experiments: (i) firstly, we compared the run-time performance of the above algorithms and (ii) secondly, we experimented with PAX and VAX to study the tradeoff between run-time and solution quality.",
                "Experiments were terminated after 10000 seconds1 .",
                "Figure 5(a) provides run-time comparisons between the optimal algorithms GOA, SPIDER, SPIDER-Abs and the approximate algorithms, PAX ( of 30) and VAX(δ of 80).",
                "X-axis denotes the 1 Machine specs for all experiments: Intel Xeon 3.6 GHZ processor, 2GB RAM sensor network configuration used, while Y-axis indicates the runtime (on a log-scale).",
                "The time horizon of policy computation was 3.",
                "For each configuration (3-chain, 4-chain, 4-star and 5-star), there are five bars indicating the time taken by GOA, SPIDER, SPIDERAbs, PAX and VAX.",
                "GOA did not terminate within the time limit for 4-star and 5-star configurations.",
                "SPIDER-Abs dominated the SPIDER and GOA for all the configurations.",
                "For instance, in the 3chain configuration, SPIDER-ABS provides 230-fold speedup over GOA and 2-fold speedup over SPIDER and for the 4-chain configuration it provides 58-fold speedup over GOA and 2-fold speedup over SPIDER.",
                "The two approximation approaches, VAX and PAX provided further improvement in performance over SPIDER-Abs.",
                "For instance, in the 5-star configuration VAX provides a 15-fold speedup and PAX provides a 8-fold speedup over SPIDER-Abs.",
                "Figures 5(b) provides a comparison of the solution quality obtained using the different algorithms for the problems tested in Figure 5(a).",
                "X-axis denotes the sensor network configuration while Y-axis indicates the solution quality.",
                "Since GOA, SPIDER, and SPIDER-Abs are all global optimal algorithms, the solution quality is the same for all those algorithms.",
                "For 5-P configuration, the global optimal algorithms did not terminate within the limit of 10000 seconds, so the bar for optimal quality indicates an upper bound on the optimal solution quality.",
                "With both the approximations, we obtained a solution quality that was close to the optimal solution quality.",
                "In 3-chain and 4-star configurations, it is remarkable that both PAX and VAX obtained almost the same actual quality as the global optimal algorithms, despite the approximation parameter and δ.",
                "For other configurations as well, the loss in quality was less than 20% of the optimal solution quality.",
                "Figure 5(c) provides the time to solution with PAX (for varying epsilons).",
                "X-axis denotes the approximation parameter, δ (percentage to optimal) used, while Y-axis denotes the time taken to compute the solution (on a log-scale).",
                "The time horizon for all the configurations was 4.",
                "As δ was decreased from 70 to 30, the time to solution decreased drastically.",
                "For instance, in the 3-chain case there was a total speedup of 170-fold when the δ was changed from 70 to 30.",
                "Interestingly, even with a low δ of 30%, the actual solution quality remained equal to the one obtained at 70%.",
                "Figure 5(d) provides the time to solution for all the configurations with VAX (for varying epsilons).",
                "X-axis denotes the approximation parameter, used, while Y-axis denotes the time taken to compute the solution (on a log-scale).",
                "The time horizon for all the configurations was 4.",
                "As was increased, the time to solution decreased drastically.",
                "For instance, in the 4-star case there was a total speedup of 73-fold when the was changed from 60 to 140.",
                "Again, the actual solution quality did not change with varying epsilon.",
                "Figure 4: Sensor network configurations 828 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Figure 5: Comparison of GOA, SPIDER, SPIDER-Abs and VAX for T = 3 on (a) Runtime and (b) Solution quality; (c) Time to solution for PAX with varying percentage to optimal for T=4 (d) Time to solution for VAX with varying epsilon for T=4 6.",
                "SUMMARY AND RELATED WORK This paper presents four algorithms SPIDER, SPIDER-ABS, PAX and VAX that provide a novel combination of features for policy search in distributed POMDPs: (i) exploiting agent interaction structure given a network of agents (i.e. easier scale-up to larger number of agents); (ii) using branch and bound search with an MDP based heuristic function; (iii) utilizing abstraction to improve runtime performance without sacrificing solution quality; (iv) providing a priori percentage bounds on quality of solutions using PAX; and (v) providing expected value bounds on the quality of solutions using VAX.",
                "These features allow for systematic tradeoff of solution quality for run-time in networks of agents operating under uncertainty.",
                "Experimental results show orders of magnitude improvement in performance over previous global optimal algorithms.",
                "Researchers have typically employed two types of techniques for solving distributed POMDPs.",
                "The first set of techniques compute global optimal solutions.",
                "Hansen et al. [5] present an algorithm based on dynamic programming and iterated elimination of dominant policies, that provides optimal solutions for distributed POMDPs.",
                "Szer et al. [13] provide an optimal heuristic search method for solving Decentralized POMDPs.",
                "This algorithm is based on the combination of a classical heuristic search algorithm, A∗ and decentralized control theory.",
                "The key differences between SPIDER and MAA* are: (a) Enhancements to SPIDER (VAX and PAX) provide for quality guaranteed approximations, while MAA* is a global optimal algorithm and hence involves significant computational complexity; (b) Due to MAA*s inability to exploit interaction structure, it was illustrated only with two agents.",
                "However, SPIDER has been illustrated for networks of agents; and (c) SPIDER explores the joint policy one agent at a time, while MAA* expands it one time step at a time (simultaneously for all the agents).",
                "The second set of techniques seek approximate policies.",
                "EmeryMontemerlo et al. [4] approximate POSGs as a series of one-step Bayesian games using heuristics to approximate future value, trading off limited lookahead for computational efficiency, resulting in locally optimal policies (with respect to the selected heuristic).",
                "Nair et al. [9]s JESP algorithm uses dynamic programming to reach a local optimum solution for finite horizon decentralized POMDPs.",
                "Peshkin et al. [11] and Bernstein et al. [2] are examples of policy search techniques that search for locally optimal policies.",
                "Though all the above techniques improve the efficiency of policy computation considerably, they are unable to provide error bounds on the quality of the solution.",
                "This aspect of quality bounds differentiates SPIDER from all the above techniques.",
                "Acknowledgements.",
                "This material is based upon work supported by the Defense Advanced Research Projects Agency (DARPA), through the Department of the Interior, NBC, Acquisition Services Division under Contract No.",
                "NBCHD030010.",
                "The views and conclusions contained in this document are those of the authors, and should not be interpreted as representing the official policies, either expressed or implied, of the Defense Advanced Research Projects Agency or the U.S. Government. 7.",
                "REFERENCES [1] R. Becker, S. Zilberstein, V. Lesser, and C.V. Goldman.",
                "Solving transition independent decentralized Markov decision processes.",
                "JAIR, 22:423-455, 2004. [2] D. S. Bernstein, E.A.",
                "Hansen, and S. Zilberstein.",
                "Bounded policy iteration for decentralized POMDPs.",
                "In IJCAI, 2005. [3] D. S. Bernstein, S. Zilberstein, and N. Immerman.",
                "The complexity of decentralized control of MDPs.",
                "In UAI, 2000. [4] R. Emery-Montemerlo, G. Gordon, J. Schneider, and S. Thrun.",
                "Approximate solutions for partially observable stochastic games with common payoffs.",
                "In AAMAS, 2004. [5] E. Hansen, D. Bernstein, and S. Zilberstein.",
                "Dynamic programming for partially observable stochastic games.",
                "In AAAI, 2004. [6] V. Lesser, C. Ortiz, and M. Tambe.",
                "Distributed sensor nets: A multiagent perspective.",
                "Kluwer, 2003. [7] R. Maheswaran, M. Tambe, E. Bowring, J. Pearce, and P. Varakantham.",
                "Taking dcop to the real world : Efficient complete solutions for distributed event scheduling.",
                "In AAMAS, 2004. [8] P. J. Modi, W. Shen, M. Tambe, and M. Yokoo.",
                "An asynchronous complete method for distributed constraint optimization.",
                "In AAMAS, 2003. [9] R. Nair, D. Pynadath, M. Yokoo, M. Tambe, and S. Marsella.",
                "Taming decentralized POMDPs: Towards efficient policy computation for multiagent settings.",
                "In IJCAI, 2003. [10] R. Nair, P. Varakantham, M. Tambe, and M. Yokoo.",
                "Networked distributed POMDPs: A synthesis of distributed constraint optimization and POMDPs.",
                "In AAAI, 2005. [11] L. Peshkin, N. Meuleau, K.-E. Kim, and L. Kaelbling.",
                "Learning to cooperate via policy search.",
                "In UAI, 2000. [12] A. Petcu and B. Faltings.",
                "A scalable method for multiagent constraint optimization.",
                "In IJCAI, 2005. [13] D. Szer, F. Charpillet, and S. Zilberstein.",
                "MAA*: A heuristic search algorithm for solving decentralized POMDPs.",
                "In IJCAI, 2005.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 829"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "de Sistemas Inteligentes, Universidad de Kyushu, Fukuoka, 812-8581 Japón, yokoo@is.kyushu-u.ac.jp Resumen distribuido los problemas de decisión de Markov parcialmente observables (POMDP distribuidos) son un enfoque popular para modelar sistemas de agentes múltiples que actúan en \"\" Increíbles \"dominio \"s."
            ],
            "translated_text": "",
            "candidates": [
                "dominio incierto",
                " Increíbles "
            ],
            "error": []
        },
        "approximate solution": {
            "translated_key": "solución aproximada",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Letting loose a SPIDER on a network of POMDPs: Generating quality guaranteed policies Pradeep Varakantham, Janusz Marecki, Yuichi Yabu∗ , Milind Tambe, Makoto Yokoo∗ University of Southern California, Los Angeles, CA 90089, {varakant, marecki, tambe}@usc.edu ∗ Dept.",
                "of Intelligent Systems, Kyushu University, Fukuoka, 812-8581 Japan, yokoo@is.kyushu-u.ac.jp ABSTRACT Distributed Partially Observable Markov Decision Problems (Distributed POMDPs) are a popular approach for modeling multi-agent systems acting in uncertain domains.",
                "Given the significant complexity of solving distributed POMDPs, particularly as we scale up the numbers of agents, one popular approach has focused on <br>approximate solution</br>s.",
                "Though this approach is efficient, the algorithms within this approach do not provide any guarantees on solution quality.",
                "A second less popular approach focuses on global optimality, but typical results are available only for two agents, and also at considerable computational cost.",
                "This paper overcomes the limitations of both these approaches by providing SPIDER, a novel combination of three key features for policy generation in distributed POMDPs: (i) it exploits agent interaction structure given a network of agents (i.e. allowing easier scale-up to larger number of agents); (ii) it uses a combination of heuristics to speedup policy search; and (iii) it allows quality guaranteed approximations, allowing a systematic tradeoff of solution quality for time.",
                "Experimental results show orders of magnitude improvement in performance when compared with previous global optimal algorithms.",
                "Categories and Subject Descriptors I.2.11 [Artificial Intelligence]: Distributed Artificial IntelligenceMulti-agent Systems General Terms Algorithms, Theory 1.",
                "INTRODUCTION Distributed Partially Observable Markov Decision Problems (Distributed POMDPs) are emerging as a popular approach for modeling sequential decision making in teams operating under uncertainty [9, 4, 1, 2, 13].",
                "The uncertainty arises on account of nondeterminism in the outcomes of actions and because the world state may only be partially (or incorrectly) observable.",
                "Unfortunately, as shown by Bernstein et al. [3], the problem of finding the optimal joint policy for general distributed POMDPs is NEXP-Complete.",
                "Researchers have attempted two different types of approaches towards solving these models.",
                "The first category consists of highly efficient approximate techniques, that may not reach globally optimal solutions [2, 9, 11].",
                "The key problem with these techniques has been their inability to provide any guarantees on the quality of the solution.",
                "In contrast, the second less popular category of approaches has focused on a global optimal result [13, 5, 10].",
                "Though these approaches obtain optimal solutions, they typically consider only two agents.",
                "Furthermore, they fail to exploit structure in the interactions of the agents and hence are severely hampered with respect to scalability when considering more than two agents.",
                "To address these problems with the existing approaches, we propose approximate techniques that provide guarantees on the quality of the solution while focussing on a network of more than two agents.",
                "We first propose the basic SPIDER (Search for Policies In Distributed EnviRonments) algorithm.",
                "There are two key novel features in SPIDER: (i) it is a branch and bound heuristic search technique that uses a MDP-based heuristic function to search for an optimal joint policy; (ii) it exploits network structure of agents by organizing agents into a Depth First Search (DFS) pseudo tree and takes advantage of the independence in the different branches of the DFS tree.",
                "We then provide three enhancements to improve the efficiency of the basic SPIDER algorithm while providing guarantees on the quality of the solution.",
                "The first enhancement uses abstractions for speedup, but does not sacrifice solution quality.",
                "In particular, it initially performs branch and bound search on abstract policies and then extends to complete policies.",
                "The second enhancement obtains speedups by sacrificing solution quality, but within an input parameter that provides the tolerable expected value difference from the optimal solution.",
                "The third enhancement is again based on bounding the search for efficiency, however with a tolerance parameter that is provided as a percentage of optimal.",
                "We experimented with the sensor network domain presented in Nair et al. [10], a domain representative of an important class of problems with networks of agents working in uncertain environments.",
                "In our experiments, we illustrate that SPIDER dominates an existing global optimal approach called GOA [10], the only known global optimal algorithm with demonstrated experimental results for more than two agents.",
                "Furthermore, we demonstrate that abstraction improves the performance of SPIDER significantly (while providing optimal solutions).",
                "We finally demonstrate a key feature of SPIDER: by utilizing the approximation enhancements it enables principled tradeoffs in run-time versus solution quality. 822 978-81-904262-7-5 (RPS) c 2007 IFAAMAS 2.",
                "DOMAIN: DISTRIBUTED SENSOR NETS Distributed sensor networks are a large, important class of domains that motivate our work.",
                "This paper focuses on a set of target tracking problems that arise in certain types of sensor networks [6] first introduced in [10].",
                "Figure 1 shows a specific problem instance within this type consisting of three sensors.",
                "Here, each sensor node can scan in one of four directions: North, South, East or West (see Figure 1).",
                "To track a target and obtain associated reward, two sensors with overlapping scanning areas must coordinate by scanning the same area simultaneously.",
                "In Figure 1, to track a target in Loc11, sensor1 needs to scan East and sensor2 needs to scan West simultaneously.",
                "Thus, sensors have to act in a coordinated fashion.",
                "We assume that there are two independent targets and that each targets movement is uncertain and unaffected by the sensor agents.",
                "Based on the area it is scanning, each sensor receives observations that can have false positives and false negatives.",
                "The sensors observations and transitions are independent of each others actions e.g.the observations that sensor1 receives are independent of sensor2s actions.",
                "Each agent incurs a cost for scanning whether the target is present or not, but no cost if it turns off.",
                "Given the sensors observational uncertainty, the targets uncertain transitions and the distributed nature of the sensor nodes, these sensor nets provide a useful domains for applying distributed POMDP models.",
                "Figure 1: A 3-chain sensor configuration 3.",
                "BACKGROUND 3.1 Model: Network Distributed POMDP The ND-POMDP model was introduced in [10], motivated by domains such as the sensor networks introduced in Section 2.",
                "It is defined as the tuple S, A, P, Ω, O, R, b , where S = ×1≤i≤nSi × Su is the set of world states.",
                "Si refers to the set of local states of agent i and Su is the set of unaffectable states.",
                "Unaffectable state refers to that part of the world state that cannot be affected by the agents actions, e.g. environmental factors like target locations that no agent can control.",
                "A = ×1≤i≤nAi is the set of joint actions, where Ai is the set of action for agent i. ND-POMDP assumes transition independence, where the transition function is defined as P(s, a, s ) = Pu(su, su) · 1≤i≤n Pi(si, su, ai, si), where a = a1, . . . , an is the joint action performed in state s = s1, . . . , sn, su and s = s1, . . . , sn, su is the resulting state.",
                "Ω = ×1≤i≤nΩi is the set of joint observations where Ωi is the set of observations for agents i. Observational independence is assumed in ND-POMDPs i.e., the joint observation function is defined as O(s, a, ω) = 1≤i≤n Oi(si, su, ai, ωi), where s = s1, . . . , sn, su is the world state that results from the agents performing a = a1, . . . , an in the previous state, and ω = ω1, . . . , ωn ∈ Ω is the observation received in state s. This implies that each agents observation depends only on the unaffectable state, its local action and on its resulting local state.",
                "The reward function, R, is defined as R(s, a) = l Rl(sl1, . . . , slr, su, al1, . . . , alr ), where each l could refer to any sub-group of agents and r = |l|.",
                "Based on the reward function, an interaction hypergraph is constructed.",
                "A hyper-link, l, exists between a subset of agents for all Rl that comprise R. The interaction hypergraph is defined as G = (Ag, E), where the agents, Ag, are the vertices and E = {l|l ⊆ Ag ∧ Rl is a component of R} are the edges.",
                "The initial belief state (distribution over the initial state), b, is defined as b(s) = bu(su) · 1≤i≤n bi(si), where bu and bi refer to the distribution over initial unaffectable state and agent is initial belief state, respectively.",
                "The goal in ND-POMDP is to compute the joint policy π = π1, . . . , πn that maximizes teams expected reward over a finite horizon T starting from the belief state b.",
                "An ND-POMDP is similar to an n-ary Distributed Constraint Optimization Problem (DCOP)[8, 12] where the variable at each node represents the policy selected by an individual agent, πi with the domain of the variable being the set of all local policies, Πi.",
                "The reward component Rl where |l| = 1 can be thought of as a local constraint while the reward component Rl where l > 1 corresponds to a non-local constraint in the constraint graph. 3.2 Algorithm: Global Optimal Algorithm (GOA) In previous work, GOA has been defined as a global optimal algorithm for ND-POMDPs [10].",
                "We will use GOA in our experimental comparisons, since GOA is a state-of-the-art global optimal algorithm, and in fact the only one with experimental results available for networks of more than two agents.",
                "GOA borrows from a global optimal DCOP algorithm called DPOP[12].",
                "GOAs message passing follows that of DPOP.",
                "The first phase is the UTIL propagation, where the utility messages, in this case values of policies, are passed up from the leaves to the root.",
                "Value for a policy at an agent is defined as the sum of best response values from its children and the joint policy reward associated with the parent policy.",
                "Thus, given a policy for a parent node, GOA requires an agent to iterate through all its policies, finding the best response policy and returning the value to the parent - while at the parent node, to find the best policy, an agent requires its children to return their best responses to each of its policies.",
                "This UTIL propagation process is repeated at each level in the tree, until the root exhausts all its policies.",
                "In the second phase of VALUE propagation, where the optimal policies are passed down from the root till the leaves.",
                "GOA takes advantage of the local interactions in the interaction graph, by pruning out unnecessary joint policy evaluations (associated with nodes not connected directly in the tree).",
                "Since the interaction graph captures all the reward interactions among agents and as this algorithm iterates through all the relevant joint policy evaluations, this algorithm yields a globally optimal solution. 4.",
                "SPIDER As mentioned in Section 3.1, an ND-POMDP can be treated as a DCOP, where the goal is to compute a joint policy that maximizes the overall joint reward.",
                "The brute-force technique for computing an optimal policy would be to examine the expected values for all possible joint policies.",
                "The key idea in SPIDER is to avoid computation of expected values for the entire space of joint policies, by utilizing upper bounds on the expected values of policies and the interaction structure of the agents.",
                "Akin to some of the algorithms for DCOP [8, 12], SPIDER has a pre-processing step that constructs a DFS tree corresponding to the given interaction structure.",
                "Note that these DFS trees are pseudo trees [12] that allow links between ancestors and children.",
                "We employ the Maximum Constrained Node (MCN) heuristic used in the DCOP algorithm, ADOPT [8], however other heuristics (such as MLSP heuristic from [7]) can also be employed.",
                "MCN heuristic tries to place agents with more number of constraints at the top of the tree.",
                "This tree governs how the search for the optimal joint polThe Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 823 icy proceeds in SPIDER.",
                "The algorithms presented in this paper are easily extendable to hyper-trees, however for expository purposes, we assume binary trees.",
                "SPIDER is an algorithm for centralized planning and distributed execution in distributed POMDPs.",
                "In this paper, we employ the following notation to denote policies and expected values: Ancestors(i) ⇒ agents from i to the root (not including i).",
                "Tree(i) ⇒ agents in the sub-tree (not including i) for which i is the root. πroot+ ⇒ joint policy of all agents. πi+ ⇒ joint policy of all agents in Tree(i) ∪ i. πi− ⇒ joint policy of agents that are in Ancestors(i). πi ⇒ policy of the ith agent. ˆv[πi, πi− ] ⇒ upper bound on the expected value for πi+ given πi and policies of ancestor agents i.e. πi− . ˆvj[πi, πi− ] ⇒ upper bound on the expected value for πi+ from the jth child. v[πi, πi− ] ⇒ expected value for πi given policies of ancestor agents, πi− . v[πi+ , πi− ] ⇒ expected value for πi+ given policies of ancestor agents, πi− . vj[πi+ , πi− ] ⇒ expected value for πi+ from the jth child.",
                "Figure 2: Execution of SPIDER, an example 4.1 Outline of SPIDER SPIDER is based on the idea of branch and bound search, where the nodes in the search tree represent partial/complete joint policies.",
                "Figure 2 shows an example search tree for the SPIDER algorithm, using an example of the three agent chain.",
                "Before SPIDER begins its search we create a DFS tree (i.e. pseudo tree) from the three agent chain, with the middle agent as the root of this tree.",
                "SPIDER exploits the structure of this DFS tree while engaging in its search.",
                "Note that in our example figure, each agent is assigned a policy with T=2.",
                "Thus, each rounded rectange (search tree node) indicates a partial/complete joint policy, a rectangle indicates an agent and the ovals internal to an agent show its policy.",
                "Heuristic or actual expected value for a joint policy is indicated in the top right corner of the rounded rectangle.",
                "If the number is italicized and underlined, it implies that the actual expected value of the joint policy is provided.",
                "SPIDER begins with no policy assigned to any of the agents (shown in the level 1 of the search tree).",
                "Level 2 of the search tree indicates that the joint policies are sorted based on upper bounds computed for root agents policies.",
                "Level 3 shows one SPIDER search node with a complete joint policy (a policy assigned to each of the agents).",
                "The expected value for this joint policy is used to prune out the nodes in level 2 (the ones with upper bounds < 234) When creating policies for each non-leaf agent i, SPIDER potentially performs two steps: 1.",
                "Obtaining upper bounds and sorting: In this step, agent i computes upper bounds on the expected values, ˆv[πi, πi− ] of the joint policies πi+ corresponding to each of its policy πi and fixed ancestor policies.",
                "An MDP based heuristic is used to compute these upper bounds on the expected values.",
                "Detailed description about this MDP heuristic is provided in Section 4.2.",
                "All policies of agent i, Πi are then sorted based on these upper bounds (also referred to as heuristic values henceforth) in descending order.",
                "Exploration of these policies (in step 2 below) are performed in this descending order.",
                "As indicated in the level 2 of the search tree (of Figure 2), all the joint policies are sorted based on the heuristic values, indicated in the top right corner of each joint policy.",
                "The intuition behind sorting and then exploring policies in descending order of upper bounds, is that the policies with higher upper bounds could yield joint policies with higher expected values. 2.",
                "Exploration and Pruning: Exploration implies computing the best response joint policy πi+,∗ corresponding to fixed ancestor policies of agent i, πi− .",
                "This is performed by iterating through all policies of agent i i.e.",
                "Πi and summing two quantities for each policy: (i) the best response for all of is children (obtained by performing steps 1 and 2 at each of the child nodes); (ii) the expected value obtained by i for fixed policies of ancestors.",
                "Thus, exploration of a policy πi yields actual expected value of a joint policy, πi+ represented as v[πi+ , πi− ].",
                "The policy with the highest expected value is the best response policy.",
                "Pruning refers to avoiding exploring all policies (or computing expected values) at agent i by using the current best expected value, vmax [πi+ , πi− ].",
                "Henceforth, this vmax [πi+ , πi− ] will be referred to as threshold.",
                "A policy, πi need not be explored if the upper bound for that policy, ˆv[πi, πi− ] is less than the threshold.",
                "This is because the expected value for the best joint policy attainable for that policy will be less than the threshold.",
                "On the other hand, when considering a leaf agent, SPIDER computes the best response policy (and consequently its expected value) corresponding to fixed policies of its ancestors, πi− .",
                "This is accomplished by computing expected values for each of the policies (corresponding to fixed policies of ancestors) and selecting the highest expected value policy.",
                "In Figure 2, SPIDER assigns best response policies to leaf agents at level 3.",
                "The policy for the left leaf agent is to perform action East at each time step in the policy, while the policy for the right leaf agent is to perform Off at each time step.",
                "These best response policies from the leaf agents yield an actual expected value of 234 for the complete joint policy.",
                "Algorithm 1 provides the pseudo code for SPIDER.",
                "This algorithm outputs the best joint policy, πi+,∗ (with an expected value greater than threshold) for the agents in Tree(i).",
                "Lines 3-8 compute the best response policy of a leaf agent i, while lines 9-23 computes the best response joint policy for agents in Tree(i).",
                "This best response computation for a non-leaf agent i includes: (a) Sorting of policies (in descending order) based on heuristic values on line 11; (b) Computing best response policies at each of the children for fixed policies of agent i in lines 16-20; and (c) Maintaining 824 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Algorithm 1 SPIDER(i, πi− , threshold) 1: πi+,∗ ← null 2: Πi ← GET-ALL-POLICIES (horizon, Ai, Ωi) 3: if IS-LEAF(i) then 4: for all πi ∈ Πi do 5: v[πi, πi−] ← JOINT-REWARD (πi, πi−) 6: if v[πi, πi−] > threshold then 7: πi+,∗ ← πi 8: threshold ← v[πi, πi−] 9: else 10: children ← CHILDREN (i) 11: ˆΠi ← UPPER-BOUND-SORT(i, Πi, πi−) 12: for all πi ∈ ˆΠi do 13: ˜πi+ ← πi 14: if ˆv[πi, πi−] < threshold then 15: Go to line 12 16: for all j ∈ children do 17: jThres ← threshold − v[πi, πi−]− Σk∈children,k=j ˆvk[πi, πi−] 18: πj+,∗ ← SPIDER(j, πi πi−, jThres) 19: ˜πi+ ← ˜πi+ πj+,∗ 20: ˆvj[πi, πi−] ← v[πj+,∗, πi πi−] 21: if v[˜πi+, πi−] > threshold then 22: threshold ← v[˜πi+, πi−] 23: πi+,∗ ← ˜πi+ 24: return πi+,∗ Algorithm 2 UPPER-BOUND-SORT(i, Πi, πi− ) 1: children ← CHILDREN (i) 2: ˆΠi ← null /* Stores the sorted list */ 3: for all πi ∈ Πi do 4: ˆv[πi, πi−] ← JOINT-REWARD (πi, πi−) 5: for all j ∈ children do 6: ˆvj[πi, πi−] ← UPPER-BOUND(i, j, πi πi−) 7: ˆv[πi, πi−] + ← ˆvj[πi, πi−] 8: ˆΠi ← INSERT-INTO-SORTED (πi, ˆΠi) 9: return ˆΠi best expected value, joint policy in lines 21-23.",
                "Algorithm 2 provides the pseudo code for sorting policies based on the upper bounds on the expected values of joint policies.",
                "Expected value for an agent i consists of two parts: value obtained from ancestors and value obtained from its children.",
                "Line 4 computes the expected value obtained from ancestors of the agent (using JOINT-REWARD function), while lines 5-7 compute the heuristic value from the children.",
                "The sum of these two parts yields an upper bound on the expected value for agent i, and line 8 of the algorithm sorts the policies based on these upper bounds. 4.2 MDP based heuristic function The heuristic function quickly provides an upper bound on the expected value obtainable from the agents in Tree(i).",
                "The subtree of agents is a distributed POMDP in itself and the idea here is to construct a centralized MDP corresponding to the (sub-tree) distributed POMDP and obtain the expected value of the optimal policy for this centralized MDP.",
                "To reiterate this in terms of the agents in DFS tree interaction structure, we assume full observability for the agents in Tree(i) and for fixed policies of the agents in {Ancestors(i) ∪ i}, we compute the joint value ˆv[πi+ , πi− ] .",
                "We use the following notation for presenting the equations for computing upper bounds/heuristic values (for agents i and k): Let Ei− denote the set of links between agents in {Ancestors(i)∪ i} and Tree(i), Ei+ denote the set of links between agents in Tree(i).",
                "Also, if l ∈ Ei− , then l1 is the agent in {Ancestors(i)∪ i} and l2 is the agent in Tree(i), that l connects together.",
                "We first compact the standard notation: ot k =Ok(st+1 k , st+1 u , πk(ωt k), ωt+1 k ) (1) pt k =Pk(st k, st u, πk(ωt k), st+1 k ) · ot k pt u =P(st u, st+1 u ) st l = st l1 , st l2 , st u ; ωt l = ωt l1 , ωt l2 rt l =Rl(st l , πl1 (ωt l1 ), πl2 (ωt l2 )) vt l =V t πl (st l , st u, ωt l1 , ωt l2 ) Depending on the location of agent k in the agent tree we have the following cases: IF k ∈ {Ancestors(i) ∪ i}, ˆpt k = pt k, (2) IF k ∈ Tree(i), ˆpt k = Pk(st k, st u, πk(ωt k), st+1 k ) IF l ∈ Ei− , ˆrt l = max {al2 } Rl(st l , πl1 (ωt l1 ), al2 ) IF l ∈ Ei+ , ˆrt l = max {al1 ,al2 } Rl(st l , al1 , al2 ) The value function for an agent i executing the joint policy πi+ at time η − 1 is provided by the equation: V η−1 πi+ (sη−1 , ωη−1 ) = l∈Ei− vη−1 l + l∈Ei+ vη−1 l (3) where vη−1 l = rη−1 l + ω η l ,sη pη−1 l1 pη−1 l2 pη−1 u vη l Algorithm 3 UPPER-BOUND (i, j, πj− ) 1: val ← 0 2: for all l ∈ Ej− ∪ Ej+ do 3: if l ∈ Ej− then πl1 ← φ 4: for all s0 l do 5: val + ← startBel[s0 l ]· UPPER-BOUND-TIME (i, s0 l , j, πl1 , ) 6: return val Algorithm 4 UPPER-BOUND-TIME (i, st l , j, πl1 , ωt l1 ) 1: maxV al ← −∞ 2: for all al1 , al2 do 3: if l ∈ Ei− and l ∈ Ej− then al1 ← πl1 (ωt l1 ) 4: val ← GET-REWARD(st l , al1 , al2 ) 5: if t < πi.horizon − 1 then 6: for all st+1 l , ωt+1 l1 do 7: futV al←pt u ˆpt l1 ˆpt l2 8: futV al ∗ ← UPPER-BOUND-TIME(st+1 l , j, πl1 , ωt l1 ωt+1 l1 ) 9: val + ← futV al 10: if val > maxV al then maxV al ← val 11: return maxV al Upper bound on the expected value for a link is computed by modifying the equation 3 to reflect the full observability assumption.",
                "This involves removing the observational probability term for agents in Tree(i) and maximizing the future value ˆvη l over the actions of those agents (in Tree(i)).",
                "Thus, the equation for the The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 825 computation of the upper bound on a link l, is as follows: IF l ∈ Ei− , ˆvη−1 l =ˆrη−1 l + max al2 ω η l1 ,s η l ˆpη−1 l1 ˆpη−1 l2 pη−1 u ˆvη l IF l ∈ Ei+ , ˆvη−1 l =ˆrη−1 l + max al1 ,al2 s η l ˆpη−1 l1 ˆpη−1 l2 pη−1 u ˆvη l Algorithm 3 and Algorithm 4 provide the algorithm for computing upper bound for child j of agent i, using the equations descirbed above.",
                "While Algorithm 4 computes the upper bound on a link given the starting state, Algorithm 3 sums the upper bound values computed over each of the links in Ei− ∪ Ei+ . 4.3 Abstraction Algorithm 5 SPIDER-ABS(i, πi− , threshold) 1: πi+,∗ ← null 2: Πi ← GET-POLICIES (<>, 1) 3: if IS-LEAF(i) then 4: for all πi ∈ Πi do 5: absHeuristic ← GET-ABS-HEURISTIC (πi, πi−) 6: absHeuristic ∗ ← (timeHorizon − πi.horizon) 7: if πi.horizon = timeHorizon and πi.absNodes = 0 then 8: v[πi, πi−] ← JOINT-REWARD (πi, πi−) 9: if v[πi, πi−] > threshold then 10: πi+,∗ ← πi; threshold ← v[πi, πi−] 11: else if v[πi, πi−] + absHeuristic > threshold then 12: ˆΠi ← EXTEND-POLICY (πi, πi.absNodes + 1) 13: Πi + ← INSERT-SORTED-POLICIES ( ˆΠi) 14: REMOVE(πi) 15: else 16: children ← CHILDREN (i) 17: Πi ← UPPER-BOUND-SORT(i, Πi, πi−) 18: for all πi ∈ Πi do 19: ˜πi+ ← πi 20: absHeuristic ← GET-ABS-HEURISTIC (πi, πi−) 21: absHeuristic ∗ ← (timeHorizon − πi.horizon) 22: if πi.horizon = timeHorizon and πi.absNodes = 0 then 23: if ˆv[πi, πi−] < threshold and πi.absNodes = 0 then 24: Go to line 19 25: for all j ∈ children do 26: jThres ← threshold − v[πi, πi−]− Σk∈children,k=j ˆvk[πi, πi−] 27: πj+,∗ ← SPIDER(j, πi πi−, jThres) 28: ˜πi+ ← ˜πi+ πj+,∗; ˆvj[πi, πi−] ← v[πj+,∗, πi πi−] 29: if v[˜πi+, πi−] > threshold then 30: threshold ← v[˜πi+, πi−]; πi+,∗ ← ˜πi+ 31: else if ˆv[πi+, πi−] + absHeuristic > threshold then 32: ˆΠi ← EXTEND-POLICY (πi, πi.absNodes + 1) 33: Πi + ← INSERT-SORTED-POLICIES (ˆΠi) 34: REMOVE(πi) 35: return πi+,∗ In SPIDER, the exploration/pruning phase can only begin after the heuristic (or upper bound) computation and sorting for the policies has ended.",
                "We provide an approach to possibly circumvent the exploration of a group of policies based on heuristic computation for one abstract policy, thus leading to an improvement in runtime performance (without loss in solution quality).",
                "The important steps in this technique are defining the abstract policy and how heuristic values are computated for the abstract policies.",
                "In this paper, we propose two types of abstraction: 1.",
                "Horizon Based Abstraction (HBA): Here, the abstract policy is defined as a shorter horizon policy.",
                "It represents a group of longer horizon policies that have the same actions as the abstract policy for times less than or equal to the horizon of the abstract policy.",
                "In Figure 3(a), a T=1 abstract policy that performs East action, represents a group of T=2 policies, that perform East in the first time step.",
                "For HBA, there are two parts to heuristic computation: (a) Computing the upper bound for the horizon of the abstract policy.",
                "This is same as the heuristic computation defined by the GETHEURISTIC() algorithm for SPIDER, however with a shorter time horizon (horizon of the abstract policy). (b) Computing the maximum possible reward that can be accumulated in one time step (using GET-ABS-HEURISTIC()) and multiplying it by the number of time steps to time horizon.",
                "This maximum possible reward (for one time step) is obtained by iterating through all the actions of all the agents in Tree(i) and computing the maximum joint reward for any joint action.",
                "Sum of (a) and (b) is the heuristic value for a HBA abstract policy. 2.",
                "Node Based Abstraction (NBA): Here an abstract policy is obtained by not associating actions to certain nodes of the policy tree.",
                "Unlike in HBA, this implies multiple levels of abstraction.",
                "This is illustrated in Figure 3(b), where there are T=2 policies that do not have an action for observation TP.",
                "These incomplete T=2 policies are abstractions for T=2 complete policies.",
                "Increased levels of abstraction leads to faster computation of a complete joint policy, πroot+ and also to shorter heuristic computation and exploration, pruning phases.",
                "For NBA, the heuristic computation is similar to that of a normal policy, except in cases where there is no action associated with policy nodes.",
                "In such cases, the immediate reward is taken as Rmax (maximum reward for any action).",
                "We combine both the abstraction techniques mentioned above into one technique, SPIDER-ABS.",
                "Algorithm 5 provides the algorithm for this abstraction technique.",
                "For computing optimal joint policy with SPIDER-ABS, a non-leaf agent i initially examines all abstract T=1 policies (line 2) and sorts them based on abstract policy heuristic computations (line 17).",
                "The abstraction horizon is gradually increased and these abstract policies are then explored in descending order of heuristic values and ones that have heuristic values less than the threshold are pruned (lines 23-24).",
                "Exploration in SPIDER-ABS has the same definition as in SPIDER if the policy being explored has a horizon of policy computation which is equal to the actual time horizon and if all the nodes of the policy have an action associated with them (lines 25-30).",
                "However, if those conditions are not met, then it is substituted by a group of policies that it represents (using EXTEND-POLICY () function) (lines 31-32).",
                "EXTEND-POLICY() function is also responsible for initializing the horizon and absNodes of a policy. absNodes represents the number of nodes at the last level in the policy tree, that do not have an action assigned to them.",
                "If πi.absNodes = |Ωi|πi.horizon−1 (i.e. total number of policy nodes possible at πi.horizon) , then πi.absNodes is set to zero and πi.horizon is increased by 1.",
                "Otherwise, πi.absNodes is increased by 1.",
                "Thus, this function combines both HBA and NBA by using the policy variables, horizon and absNodes.",
                "Before substituting the abstract policy with a group of policies, those policies are sorted based on heuristic values (line 33).",
                "Similar type of abstraction based best response computation is adopted at leaf agents (lines 3-14). 4.4 Value ApproXimation (VAX) In this section, we present an approximate enhancement to SPIDER called VAX.",
                "The input to this technique is an approximation parameter , which determines the difference from the optimal solution quality.",
                "This approximation parameter is used at each agent for pruning out joint policies.",
                "The pruning mechanism in SPIDER and SPIDER-Abs dictates that a joint policy be pruned only if the threshold is exactly greater than the heuristic value.",
                "However, the 826 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Figure 3: Example of abstraction for (a) HBA (Horizon Based Abstraction) and (b) NBA (Node Based Abstraction) idea in this technique is to prune out joint a policy if the following condition is satisfied: threshold + > ˆv[πi , πi− ].",
                "Apart from the pruning condition, VAX is the same as SPIDER/SPIDER-ABS.",
                "In the example of Figure 2, if the heuristic value for the second joint policy (or second search tree node) in level 2 were 238 instead of 232, then that policy could not be be pruned using SPIDER or SPIDER-Abs.",
                "However, in VAX with an approximation parameter of 5, the joint policy in consideration would also be pruned.",
                "This is because the threshold (234) at that juncture plus the approximation parameter (5), i.e. 239 would have been greater than the heuristic value for that joint policy (238).",
                "It can be noted from the example (just discussed) that this kind of pruning can lead to fewer explorations and hence lead to an improvement in the overall run-time performance.",
                "However, this can entail a sacrifice in the quality of the solution because this technique can prune out a candidate optimal solution.",
                "A bound on the error introduced by this approximate algorithm as a function of , is provided by Proposition 3. 4.5 Percentage ApproXimation (PAX) In this section, we present the second approximation enhancement over SPIDER called PAX.",
                "Input to this technique is a parameter, δ that represents the minimum percentage of the optimal solution quality that is desired.",
                "Output of this technique is a policy with an expected value that is at least δ% of the optimal solution quality.",
                "A policy is pruned if the following condition is satisfied: threshold > δ 100 ˆv[πi , πi− ].",
                "Like in VAX, the only difference between PAX and SPIDER/SPIDER-ABS is this pruning condition.",
                "Again in Figure 2, if the heuristic value for the second search tree node in level 2 were 238 instead of 232, then PAX with an input parameter of 98% would be able to prune that search tree node (since 98 100 ∗238 < 234).",
                "This type of pruning leads to fewer explorations and hence an improvement in run-time performance, while potentially leading to a loss in quality of the solution.",
                "Proposition 4 provides the bound on quality loss. 4.6 Theoretical Results PROPOSITION 1.",
                "Heuristic provided using the centralized MDP heuristic is admissible.",
                "Proof.",
                "For the value provided by the heuristic to be admissible, it should be an over estimate of the expected value for a joint policy.",
                "Thus, we need to show that: For l ∈ Ei+ ∪ Ei− : ˆvt l ≥ vt l (refer to notation in Section 4.2) We use mathematical induction on t to prove this.",
                "Base case: t = T − 1.",
                "Irrespective of whether l ∈ Ei− or l ∈ Ei+ , ˆrt l is computed by maximizing over all actions of the agents in Tree(i), while rt l is computed for fixed policies of the same agents.",
                "Hence, ˆrt l ≥ rt l and also ˆvt l ≥ vt l .",
                "Assumption: Proposition holds for t = η, where 1 ≤ η < T − 1.",
                "We now have to prove that the proposition holds for t = η − 1.",
                "We show the proof for l ∈ Ei− and similar reasoning can be adopted to prove for l ∈ Ei+ .",
                "The heuristic value function for l ∈ Ei− is provided by the following equation: ˆvη−1 l =ˆrη−1 l + max al2 ω η l1 ,s η l ˆpη−1 l1 ˆpη−1 l2 pη−1 u ˆvη l Rewriting the RHS and using Eqn 2 (in Section 4.2) =ˆrη−1 l + max al2 ω η l1 ,s η l pη−1 u pη−1 l1 ˆpη−1 l2 ˆvη l =ˆrη−1 l + ω η l1 ,s η l pη−1 u pη−1 l1 max al2 ˆpη−1 l2 ˆvη l Since maxal2 ˆpη−1 l2 ˆvη l ≥ ωl2 oη−1 l2 ˆpη−1 l2 ˆvη l and pη−1 l2 = oη−1 l2 ˆpη−1 l2 ≥ˆrη−1 l + ω η l1 ,s η l pη−1 u pη−1 l1 ωl2 pη−1 l2 ˆvη l Since ˆvη l ≥ vη l (from the assumption) ≥ˆrη−1 l + ω η l1 ,s η l pη−1 u pη−1 l1 ωl2 pη−1 l2 vη l Since ˆrη−1 l ≥ rη−1 l (by definition) ≥rη−1 l + ω η l1 ,s η l pη−1 u pη−1 l1 ωl2 pη−1 l2 vη l =rη−1 l + (ω η l ,s η l ) pη−1 u pη−1 l1 pη−1 l2 vη l = vη−1 l Thus proved.",
                "PROPOSITION 2.",
                "SPIDER provides an optimal solution.",
                "Proof.",
                "SPIDER examines all possible joint policies given the interaction structure of the agents.",
                "The only exception being when a joint policy is pruned based on the heuristic value.",
                "Thus, as long as a candidate optimal policy is not pruned, SPIDER will return an optimal policy.",
                "As proved in Proposition 1, the expected value for a joint policy is always an upper bound.",
                "Hence when a joint policy is pruned, it cannot be an optimal solution.",
                "PROPOSITION 3.",
                "Error bound on the solution quality for VAX (implemented over SPIDER-ABS) with an approximation parameter of is ρ , where ρ is the number of leaf nodes in the DFS tree.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 827 Proof.",
                "We prove this proposition using mathematical induction on the depth of the DFS tree.",
                "Base case: depth = 1 (i.e. one node).",
                "Best response is computed by iterating through all policies, Πk.",
                "A policy,πk is pruned if ˆv[πk, πk− ] < threshold + .",
                "Thus the best response policy computed by VAX would be at most away from the optimal best response.",
                "Hence the proposition holds for the base case.",
                "Assumption: Proposition holds for d, where 1 ≤ depth ≤ d. We now have to prove that the proposition holds for d + 1.",
                "Without loss of generality, lets assume that the root node of this tree has k children.",
                "Each of this children is of depth ≤ d, and hence from the assumption, the error introduced in kth child is ρk , where ρk is the number of leaf nodes in kth child of the root.",
                "Therefore, ρ = k ρk, where ρ is the number of leaf nodes in the tree.",
                "In SPIDER-ABS, threshold at the root agent, thresspider = k v[πk+ , πk− ].",
                "However, with VAX the threshold at the root agent will be (in the worst case), threshvax = k v[πk+ , πk− ]− k ρk .",
                "Hence, with VAX a joint policy is pruned at the root agent if ˆv[πroot, πroot− ] < threshvax + ⇒ ˆv[πroot, πroot− ] < threshspider − (( k ρk) − 1) ≤ threshspider − ( k ρk) ≤ threshspider − ρ .",
                "Hence proved.",
                "PROPOSITION 4.",
                "For PAX (implemented over SPIDER-ABS) with an input parameter of δ, the solution quality is at least δ 100 v[πroot+,∗ ], where v[πroot+,∗ ] denotes the optimal solution quality.",
                "Proof.",
                "We prove this proposition using mathematical induction on the depth of the DFS tree.",
                "Base case: depth = 1 (i.e. one node).",
                "Best response is computed by iterating through all policies, Πk.",
                "A policy,πk is pruned if δ 100 ˆv[πk, πk− ] < threshold.",
                "Thus the best response policy computed by PAX would be at least δ 100 times the optimal best response.",
                "Hence the proposition holds for the base case.",
                "Assumption: Proposition holds for d, where 1 ≤ depth ≤ d. We now have to prove that the proposition holds for d + 1.",
                "Without loss of generality, lets assume that the root node of this tree has k children.",
                "Each of this children is of depth ≤ d, and hence from the assumption, the solution quality in the kth child is at least δ 100 v[πk+,∗ , πk− ] for PAX.",
                "With SPIDER-ABS, a joint policy is pruned at the root agent if ˆv[πroot, πroot− ] < k v[πk+,∗ , πk− ].",
                "However with PAX, a joint policy is pruned if δ 100 ˆv[πroot, πroot− ] < k δ 100 v[πk+,∗ , πk− ] ⇒ ˆv[πroot, πroot− ] < k v[πk+,∗ , πk− ].",
                "Since the pruning condition at the root agent in PAX is the same as the one in SPIDER-ABS, there is no error introduced at the root agent and all the error is introduced in the children.",
                "Thus, overall solution quality is at least δ 100 of the optimal solution.",
                "Hence proved. 5.",
                "EXPERIMENTAL RESULTS All our experiments were conducted on the sensor network domain from Section 2.",
                "The five network configurations employed are shown in Figure 4.",
                "Algorithms that we experimented with are GOA, SPIDER, SPIDER-ABS, PAX and VAX.",
                "We compare against GOA because it is the only global optimal algorithm that considers more than two agents.",
                "We performed two sets of experiments: (i) firstly, we compared the run-time performance of the above algorithms and (ii) secondly, we experimented with PAX and VAX to study the tradeoff between run-time and solution quality.",
                "Experiments were terminated after 10000 seconds1 .",
                "Figure 5(a) provides run-time comparisons between the optimal algorithms GOA, SPIDER, SPIDER-Abs and the approximate algorithms, PAX ( of 30) and VAX(δ of 80).",
                "X-axis denotes the 1 Machine specs for all experiments: Intel Xeon 3.6 GHZ processor, 2GB RAM sensor network configuration used, while Y-axis indicates the runtime (on a log-scale).",
                "The time horizon of policy computation was 3.",
                "For each configuration (3-chain, 4-chain, 4-star and 5-star), there are five bars indicating the time taken by GOA, SPIDER, SPIDERAbs, PAX and VAX.",
                "GOA did not terminate within the time limit for 4-star and 5-star configurations.",
                "SPIDER-Abs dominated the SPIDER and GOA for all the configurations.",
                "For instance, in the 3chain configuration, SPIDER-ABS provides 230-fold speedup over GOA and 2-fold speedup over SPIDER and for the 4-chain configuration it provides 58-fold speedup over GOA and 2-fold speedup over SPIDER.",
                "The two approximation approaches, VAX and PAX provided further improvement in performance over SPIDER-Abs.",
                "For instance, in the 5-star configuration VAX provides a 15-fold speedup and PAX provides a 8-fold speedup over SPIDER-Abs.",
                "Figures 5(b) provides a comparison of the solution quality obtained using the different algorithms for the problems tested in Figure 5(a).",
                "X-axis denotes the sensor network configuration while Y-axis indicates the solution quality.",
                "Since GOA, SPIDER, and SPIDER-Abs are all global optimal algorithms, the solution quality is the same for all those algorithms.",
                "For 5-P configuration, the global optimal algorithms did not terminate within the limit of 10000 seconds, so the bar for optimal quality indicates an upper bound on the optimal solution quality.",
                "With both the approximations, we obtained a solution quality that was close to the optimal solution quality.",
                "In 3-chain and 4-star configurations, it is remarkable that both PAX and VAX obtained almost the same actual quality as the global optimal algorithms, despite the approximation parameter and δ.",
                "For other configurations as well, the loss in quality was less than 20% of the optimal solution quality.",
                "Figure 5(c) provides the time to solution with PAX (for varying epsilons).",
                "X-axis denotes the approximation parameter, δ (percentage to optimal) used, while Y-axis denotes the time taken to compute the solution (on a log-scale).",
                "The time horizon for all the configurations was 4.",
                "As δ was decreased from 70 to 30, the time to solution decreased drastically.",
                "For instance, in the 3-chain case there was a total speedup of 170-fold when the δ was changed from 70 to 30.",
                "Interestingly, even with a low δ of 30%, the actual solution quality remained equal to the one obtained at 70%.",
                "Figure 5(d) provides the time to solution for all the configurations with VAX (for varying epsilons).",
                "X-axis denotes the approximation parameter, used, while Y-axis denotes the time taken to compute the solution (on a log-scale).",
                "The time horizon for all the configurations was 4.",
                "As was increased, the time to solution decreased drastically.",
                "For instance, in the 4-star case there was a total speedup of 73-fold when the was changed from 60 to 140.",
                "Again, the actual solution quality did not change with varying epsilon.",
                "Figure 4: Sensor network configurations 828 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Figure 5: Comparison of GOA, SPIDER, SPIDER-Abs and VAX for T = 3 on (a) Runtime and (b) Solution quality; (c) Time to solution for PAX with varying percentage to optimal for T=4 (d) Time to solution for VAX with varying epsilon for T=4 6.",
                "SUMMARY AND RELATED WORK This paper presents four algorithms SPIDER, SPIDER-ABS, PAX and VAX that provide a novel combination of features for policy search in distributed POMDPs: (i) exploiting agent interaction structure given a network of agents (i.e. easier scale-up to larger number of agents); (ii) using branch and bound search with an MDP based heuristic function; (iii) utilizing abstraction to improve runtime performance without sacrificing solution quality; (iv) providing a priori percentage bounds on quality of solutions using PAX; and (v) providing expected value bounds on the quality of solutions using VAX.",
                "These features allow for systematic tradeoff of solution quality for run-time in networks of agents operating under uncertainty.",
                "Experimental results show orders of magnitude improvement in performance over previous global optimal algorithms.",
                "Researchers have typically employed two types of techniques for solving distributed POMDPs.",
                "The first set of techniques compute global optimal solutions.",
                "Hansen et al. [5] present an algorithm based on dynamic programming and iterated elimination of dominant policies, that provides optimal solutions for distributed POMDPs.",
                "Szer et al. [13] provide an optimal heuristic search method for solving Decentralized POMDPs.",
                "This algorithm is based on the combination of a classical heuristic search algorithm, A∗ and decentralized control theory.",
                "The key differences between SPIDER and MAA* are: (a) Enhancements to SPIDER (VAX and PAX) provide for quality guaranteed approximations, while MAA* is a global optimal algorithm and hence involves significant computational complexity; (b) Due to MAA*s inability to exploit interaction structure, it was illustrated only with two agents.",
                "However, SPIDER has been illustrated for networks of agents; and (c) SPIDER explores the joint policy one agent at a time, while MAA* expands it one time step at a time (simultaneously for all the agents).",
                "The second set of techniques seek approximate policies.",
                "EmeryMontemerlo et al. [4] approximate POSGs as a series of one-step Bayesian games using heuristics to approximate future value, trading off limited lookahead for computational efficiency, resulting in locally optimal policies (with respect to the selected heuristic).",
                "Nair et al. [9]s JESP algorithm uses dynamic programming to reach a local optimum solution for finite horizon decentralized POMDPs.",
                "Peshkin et al. [11] and Bernstein et al. [2] are examples of policy search techniques that search for locally optimal policies.",
                "Though all the above techniques improve the efficiency of policy computation considerably, they are unable to provide error bounds on the quality of the solution.",
                "This aspect of quality bounds differentiates SPIDER from all the above techniques.",
                "Acknowledgements.",
                "This material is based upon work supported by the Defense Advanced Research Projects Agency (DARPA), through the Department of the Interior, NBC, Acquisition Services Division under Contract No.",
                "NBCHD030010.",
                "The views and conclusions contained in this document are those of the authors, and should not be interpreted as representing the official policies, either expressed or implied, of the Defense Advanced Research Projects Agency or the U.S. Government. 7.",
                "REFERENCES [1] R. Becker, S. Zilberstein, V. Lesser, and C.V. Goldman.",
                "Solving transition independent decentralized Markov decision processes.",
                "JAIR, 22:423-455, 2004. [2] D. S. Bernstein, E.A.",
                "Hansen, and S. Zilberstein.",
                "Bounded policy iteration for decentralized POMDPs.",
                "In IJCAI, 2005. [3] D. S. Bernstein, S. Zilberstein, and N. Immerman.",
                "The complexity of decentralized control of MDPs.",
                "In UAI, 2000. [4] R. Emery-Montemerlo, G. Gordon, J. Schneider, and S. Thrun.",
                "Approximate solutions for partially observable stochastic games with common payoffs.",
                "In AAMAS, 2004. [5] E. Hansen, D. Bernstein, and S. Zilberstein.",
                "Dynamic programming for partially observable stochastic games.",
                "In AAAI, 2004. [6] V. Lesser, C. Ortiz, and M. Tambe.",
                "Distributed sensor nets: A multiagent perspective.",
                "Kluwer, 2003. [7] R. Maheswaran, M. Tambe, E. Bowring, J. Pearce, and P. Varakantham.",
                "Taking dcop to the real world : Efficient complete solutions for distributed event scheduling.",
                "In AAMAS, 2004. [8] P. J. Modi, W. Shen, M. Tambe, and M. Yokoo.",
                "An asynchronous complete method for distributed constraint optimization.",
                "In AAMAS, 2003. [9] R. Nair, D. Pynadath, M. Yokoo, M. Tambe, and S. Marsella.",
                "Taming decentralized POMDPs: Towards efficient policy computation for multiagent settings.",
                "In IJCAI, 2003. [10] R. Nair, P. Varakantham, M. Tambe, and M. Yokoo.",
                "Networked distributed POMDPs: A synthesis of distributed constraint optimization and POMDPs.",
                "In AAAI, 2005. [11] L. Peshkin, N. Meuleau, K.-E. Kim, and L. Kaelbling.",
                "Learning to cooperate via policy search.",
                "In UAI, 2000. [12] A. Petcu and B. Faltings.",
                "A scalable method for multiagent constraint optimization.",
                "In IJCAI, 2005. [13] D. Szer, F. Charpillet, and S. Zilberstein.",
                "MAA*: A heuristic search algorithm for solving decentralized POMDPs.",
                "In IJCAI, 2005.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 829"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Dada la significativa complejidad de resolver POMDP distribuidos, particularmente a medida que ampliamos el número de agentes, un enfoque popular se ha centrado en la \"solución aproximada\" s."
            ],
            "translated_text": "",
            "candidates": [
                "solución aproximada",
                "solución aproximada"
            ],
            "error": []
        },
        "global optimality": {
            "translated_key": "optimización global",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Letting loose a SPIDER on a network of POMDPs: Generating quality guaranteed policies Pradeep Varakantham, Janusz Marecki, Yuichi Yabu∗ , Milind Tambe, Makoto Yokoo∗ University of Southern California, Los Angeles, CA 90089, {varakant, marecki, tambe}@usc.edu ∗ Dept.",
                "of Intelligent Systems, Kyushu University, Fukuoka, 812-8581 Japan, yokoo@is.kyushu-u.ac.jp ABSTRACT Distributed Partially Observable Markov Decision Problems (Distributed POMDPs) are a popular approach for modeling multi-agent systems acting in uncertain domains.",
                "Given the significant complexity of solving distributed POMDPs, particularly as we scale up the numbers of agents, one popular approach has focused on approximate solutions.",
                "Though this approach is efficient, the algorithms within this approach do not provide any guarantees on solution quality.",
                "A second less popular approach focuses on <br>global optimality</br>, but typical results are available only for two agents, and also at considerable computational cost.",
                "This paper overcomes the limitations of both these approaches by providing SPIDER, a novel combination of three key features for policy generation in distributed POMDPs: (i) it exploits agent interaction structure given a network of agents (i.e. allowing easier scale-up to larger number of agents); (ii) it uses a combination of heuristics to speedup policy search; and (iii) it allows quality guaranteed approximations, allowing a systematic tradeoff of solution quality for time.",
                "Experimental results show orders of magnitude improvement in performance when compared with previous global optimal algorithms.",
                "Categories and Subject Descriptors I.2.11 [Artificial Intelligence]: Distributed Artificial IntelligenceMulti-agent Systems General Terms Algorithms, Theory 1.",
                "INTRODUCTION Distributed Partially Observable Markov Decision Problems (Distributed POMDPs) are emerging as a popular approach for modeling sequential decision making in teams operating under uncertainty [9, 4, 1, 2, 13].",
                "The uncertainty arises on account of nondeterminism in the outcomes of actions and because the world state may only be partially (or incorrectly) observable.",
                "Unfortunately, as shown by Bernstein et al. [3], the problem of finding the optimal joint policy for general distributed POMDPs is NEXP-Complete.",
                "Researchers have attempted two different types of approaches towards solving these models.",
                "The first category consists of highly efficient approximate techniques, that may not reach globally optimal solutions [2, 9, 11].",
                "The key problem with these techniques has been their inability to provide any guarantees on the quality of the solution.",
                "In contrast, the second less popular category of approaches has focused on a global optimal result [13, 5, 10].",
                "Though these approaches obtain optimal solutions, they typically consider only two agents.",
                "Furthermore, they fail to exploit structure in the interactions of the agents and hence are severely hampered with respect to scalability when considering more than two agents.",
                "To address these problems with the existing approaches, we propose approximate techniques that provide guarantees on the quality of the solution while focussing on a network of more than two agents.",
                "We first propose the basic SPIDER (Search for Policies In Distributed EnviRonments) algorithm.",
                "There are two key novel features in SPIDER: (i) it is a branch and bound heuristic search technique that uses a MDP-based heuristic function to search for an optimal joint policy; (ii) it exploits network structure of agents by organizing agents into a Depth First Search (DFS) pseudo tree and takes advantage of the independence in the different branches of the DFS tree.",
                "We then provide three enhancements to improve the efficiency of the basic SPIDER algorithm while providing guarantees on the quality of the solution.",
                "The first enhancement uses abstractions for speedup, but does not sacrifice solution quality.",
                "In particular, it initially performs branch and bound search on abstract policies and then extends to complete policies.",
                "The second enhancement obtains speedups by sacrificing solution quality, but within an input parameter that provides the tolerable expected value difference from the optimal solution.",
                "The third enhancement is again based on bounding the search for efficiency, however with a tolerance parameter that is provided as a percentage of optimal.",
                "We experimented with the sensor network domain presented in Nair et al. [10], a domain representative of an important class of problems with networks of agents working in uncertain environments.",
                "In our experiments, we illustrate that SPIDER dominates an existing global optimal approach called GOA [10], the only known global optimal algorithm with demonstrated experimental results for more than two agents.",
                "Furthermore, we demonstrate that abstraction improves the performance of SPIDER significantly (while providing optimal solutions).",
                "We finally demonstrate a key feature of SPIDER: by utilizing the approximation enhancements it enables principled tradeoffs in run-time versus solution quality. 822 978-81-904262-7-5 (RPS) c 2007 IFAAMAS 2.",
                "DOMAIN: DISTRIBUTED SENSOR NETS Distributed sensor networks are a large, important class of domains that motivate our work.",
                "This paper focuses on a set of target tracking problems that arise in certain types of sensor networks [6] first introduced in [10].",
                "Figure 1 shows a specific problem instance within this type consisting of three sensors.",
                "Here, each sensor node can scan in one of four directions: North, South, East or West (see Figure 1).",
                "To track a target and obtain associated reward, two sensors with overlapping scanning areas must coordinate by scanning the same area simultaneously.",
                "In Figure 1, to track a target in Loc11, sensor1 needs to scan East and sensor2 needs to scan West simultaneously.",
                "Thus, sensors have to act in a coordinated fashion.",
                "We assume that there are two independent targets and that each targets movement is uncertain and unaffected by the sensor agents.",
                "Based on the area it is scanning, each sensor receives observations that can have false positives and false negatives.",
                "The sensors observations and transitions are independent of each others actions e.g.the observations that sensor1 receives are independent of sensor2s actions.",
                "Each agent incurs a cost for scanning whether the target is present or not, but no cost if it turns off.",
                "Given the sensors observational uncertainty, the targets uncertain transitions and the distributed nature of the sensor nodes, these sensor nets provide a useful domains for applying distributed POMDP models.",
                "Figure 1: A 3-chain sensor configuration 3.",
                "BACKGROUND 3.1 Model: Network Distributed POMDP The ND-POMDP model was introduced in [10], motivated by domains such as the sensor networks introduced in Section 2.",
                "It is defined as the tuple S, A, P, Ω, O, R, b , where S = ×1≤i≤nSi × Su is the set of world states.",
                "Si refers to the set of local states of agent i and Su is the set of unaffectable states.",
                "Unaffectable state refers to that part of the world state that cannot be affected by the agents actions, e.g. environmental factors like target locations that no agent can control.",
                "A = ×1≤i≤nAi is the set of joint actions, where Ai is the set of action for agent i. ND-POMDP assumes transition independence, where the transition function is defined as P(s, a, s ) = Pu(su, su) · 1≤i≤n Pi(si, su, ai, si), where a = a1, . . . , an is the joint action performed in state s = s1, . . . , sn, su and s = s1, . . . , sn, su is the resulting state.",
                "Ω = ×1≤i≤nΩi is the set of joint observations where Ωi is the set of observations for agents i. Observational independence is assumed in ND-POMDPs i.e., the joint observation function is defined as O(s, a, ω) = 1≤i≤n Oi(si, su, ai, ωi), where s = s1, . . . , sn, su is the world state that results from the agents performing a = a1, . . . , an in the previous state, and ω = ω1, . . . , ωn ∈ Ω is the observation received in state s. This implies that each agents observation depends only on the unaffectable state, its local action and on its resulting local state.",
                "The reward function, R, is defined as R(s, a) = l Rl(sl1, . . . , slr, su, al1, . . . , alr ), where each l could refer to any sub-group of agents and r = |l|.",
                "Based on the reward function, an interaction hypergraph is constructed.",
                "A hyper-link, l, exists between a subset of agents for all Rl that comprise R. The interaction hypergraph is defined as G = (Ag, E), where the agents, Ag, are the vertices and E = {l|l ⊆ Ag ∧ Rl is a component of R} are the edges.",
                "The initial belief state (distribution over the initial state), b, is defined as b(s) = bu(su) · 1≤i≤n bi(si), where bu and bi refer to the distribution over initial unaffectable state and agent is initial belief state, respectively.",
                "The goal in ND-POMDP is to compute the joint policy π = π1, . . . , πn that maximizes teams expected reward over a finite horizon T starting from the belief state b.",
                "An ND-POMDP is similar to an n-ary Distributed Constraint Optimization Problem (DCOP)[8, 12] where the variable at each node represents the policy selected by an individual agent, πi with the domain of the variable being the set of all local policies, Πi.",
                "The reward component Rl where |l| = 1 can be thought of as a local constraint while the reward component Rl where l > 1 corresponds to a non-local constraint in the constraint graph. 3.2 Algorithm: Global Optimal Algorithm (GOA) In previous work, GOA has been defined as a global optimal algorithm for ND-POMDPs [10].",
                "We will use GOA in our experimental comparisons, since GOA is a state-of-the-art global optimal algorithm, and in fact the only one with experimental results available for networks of more than two agents.",
                "GOA borrows from a global optimal DCOP algorithm called DPOP[12].",
                "GOAs message passing follows that of DPOP.",
                "The first phase is the UTIL propagation, where the utility messages, in this case values of policies, are passed up from the leaves to the root.",
                "Value for a policy at an agent is defined as the sum of best response values from its children and the joint policy reward associated with the parent policy.",
                "Thus, given a policy for a parent node, GOA requires an agent to iterate through all its policies, finding the best response policy and returning the value to the parent - while at the parent node, to find the best policy, an agent requires its children to return their best responses to each of its policies.",
                "This UTIL propagation process is repeated at each level in the tree, until the root exhausts all its policies.",
                "In the second phase of VALUE propagation, where the optimal policies are passed down from the root till the leaves.",
                "GOA takes advantage of the local interactions in the interaction graph, by pruning out unnecessary joint policy evaluations (associated with nodes not connected directly in the tree).",
                "Since the interaction graph captures all the reward interactions among agents and as this algorithm iterates through all the relevant joint policy evaluations, this algorithm yields a globally optimal solution. 4.",
                "SPIDER As mentioned in Section 3.1, an ND-POMDP can be treated as a DCOP, where the goal is to compute a joint policy that maximizes the overall joint reward.",
                "The brute-force technique for computing an optimal policy would be to examine the expected values for all possible joint policies.",
                "The key idea in SPIDER is to avoid computation of expected values for the entire space of joint policies, by utilizing upper bounds on the expected values of policies and the interaction structure of the agents.",
                "Akin to some of the algorithms for DCOP [8, 12], SPIDER has a pre-processing step that constructs a DFS tree corresponding to the given interaction structure.",
                "Note that these DFS trees are pseudo trees [12] that allow links between ancestors and children.",
                "We employ the Maximum Constrained Node (MCN) heuristic used in the DCOP algorithm, ADOPT [8], however other heuristics (such as MLSP heuristic from [7]) can also be employed.",
                "MCN heuristic tries to place agents with more number of constraints at the top of the tree.",
                "This tree governs how the search for the optimal joint polThe Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 823 icy proceeds in SPIDER.",
                "The algorithms presented in this paper are easily extendable to hyper-trees, however for expository purposes, we assume binary trees.",
                "SPIDER is an algorithm for centralized planning and distributed execution in distributed POMDPs.",
                "In this paper, we employ the following notation to denote policies and expected values: Ancestors(i) ⇒ agents from i to the root (not including i).",
                "Tree(i) ⇒ agents in the sub-tree (not including i) for which i is the root. πroot+ ⇒ joint policy of all agents. πi+ ⇒ joint policy of all agents in Tree(i) ∪ i. πi− ⇒ joint policy of agents that are in Ancestors(i). πi ⇒ policy of the ith agent. ˆv[πi, πi− ] ⇒ upper bound on the expected value for πi+ given πi and policies of ancestor agents i.e. πi− . ˆvj[πi, πi− ] ⇒ upper bound on the expected value for πi+ from the jth child. v[πi, πi− ] ⇒ expected value for πi given policies of ancestor agents, πi− . v[πi+ , πi− ] ⇒ expected value for πi+ given policies of ancestor agents, πi− . vj[πi+ , πi− ] ⇒ expected value for πi+ from the jth child.",
                "Figure 2: Execution of SPIDER, an example 4.1 Outline of SPIDER SPIDER is based on the idea of branch and bound search, where the nodes in the search tree represent partial/complete joint policies.",
                "Figure 2 shows an example search tree for the SPIDER algorithm, using an example of the three agent chain.",
                "Before SPIDER begins its search we create a DFS tree (i.e. pseudo tree) from the three agent chain, with the middle agent as the root of this tree.",
                "SPIDER exploits the structure of this DFS tree while engaging in its search.",
                "Note that in our example figure, each agent is assigned a policy with T=2.",
                "Thus, each rounded rectange (search tree node) indicates a partial/complete joint policy, a rectangle indicates an agent and the ovals internal to an agent show its policy.",
                "Heuristic or actual expected value for a joint policy is indicated in the top right corner of the rounded rectangle.",
                "If the number is italicized and underlined, it implies that the actual expected value of the joint policy is provided.",
                "SPIDER begins with no policy assigned to any of the agents (shown in the level 1 of the search tree).",
                "Level 2 of the search tree indicates that the joint policies are sorted based on upper bounds computed for root agents policies.",
                "Level 3 shows one SPIDER search node with a complete joint policy (a policy assigned to each of the agents).",
                "The expected value for this joint policy is used to prune out the nodes in level 2 (the ones with upper bounds < 234) When creating policies for each non-leaf agent i, SPIDER potentially performs two steps: 1.",
                "Obtaining upper bounds and sorting: In this step, agent i computes upper bounds on the expected values, ˆv[πi, πi− ] of the joint policies πi+ corresponding to each of its policy πi and fixed ancestor policies.",
                "An MDP based heuristic is used to compute these upper bounds on the expected values.",
                "Detailed description about this MDP heuristic is provided in Section 4.2.",
                "All policies of agent i, Πi are then sorted based on these upper bounds (also referred to as heuristic values henceforth) in descending order.",
                "Exploration of these policies (in step 2 below) are performed in this descending order.",
                "As indicated in the level 2 of the search tree (of Figure 2), all the joint policies are sorted based on the heuristic values, indicated in the top right corner of each joint policy.",
                "The intuition behind sorting and then exploring policies in descending order of upper bounds, is that the policies with higher upper bounds could yield joint policies with higher expected values. 2.",
                "Exploration and Pruning: Exploration implies computing the best response joint policy πi+,∗ corresponding to fixed ancestor policies of agent i, πi− .",
                "This is performed by iterating through all policies of agent i i.e.",
                "Πi and summing two quantities for each policy: (i) the best response for all of is children (obtained by performing steps 1 and 2 at each of the child nodes); (ii) the expected value obtained by i for fixed policies of ancestors.",
                "Thus, exploration of a policy πi yields actual expected value of a joint policy, πi+ represented as v[πi+ , πi− ].",
                "The policy with the highest expected value is the best response policy.",
                "Pruning refers to avoiding exploring all policies (or computing expected values) at agent i by using the current best expected value, vmax [πi+ , πi− ].",
                "Henceforth, this vmax [πi+ , πi− ] will be referred to as threshold.",
                "A policy, πi need not be explored if the upper bound for that policy, ˆv[πi, πi− ] is less than the threshold.",
                "This is because the expected value for the best joint policy attainable for that policy will be less than the threshold.",
                "On the other hand, when considering a leaf agent, SPIDER computes the best response policy (and consequently its expected value) corresponding to fixed policies of its ancestors, πi− .",
                "This is accomplished by computing expected values for each of the policies (corresponding to fixed policies of ancestors) and selecting the highest expected value policy.",
                "In Figure 2, SPIDER assigns best response policies to leaf agents at level 3.",
                "The policy for the left leaf agent is to perform action East at each time step in the policy, while the policy for the right leaf agent is to perform Off at each time step.",
                "These best response policies from the leaf agents yield an actual expected value of 234 for the complete joint policy.",
                "Algorithm 1 provides the pseudo code for SPIDER.",
                "This algorithm outputs the best joint policy, πi+,∗ (with an expected value greater than threshold) for the agents in Tree(i).",
                "Lines 3-8 compute the best response policy of a leaf agent i, while lines 9-23 computes the best response joint policy for agents in Tree(i).",
                "This best response computation for a non-leaf agent i includes: (a) Sorting of policies (in descending order) based on heuristic values on line 11; (b) Computing best response policies at each of the children for fixed policies of agent i in lines 16-20; and (c) Maintaining 824 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Algorithm 1 SPIDER(i, πi− , threshold) 1: πi+,∗ ← null 2: Πi ← GET-ALL-POLICIES (horizon, Ai, Ωi) 3: if IS-LEAF(i) then 4: for all πi ∈ Πi do 5: v[πi, πi−] ← JOINT-REWARD (πi, πi−) 6: if v[πi, πi−] > threshold then 7: πi+,∗ ← πi 8: threshold ← v[πi, πi−] 9: else 10: children ← CHILDREN (i) 11: ˆΠi ← UPPER-BOUND-SORT(i, Πi, πi−) 12: for all πi ∈ ˆΠi do 13: ˜πi+ ← πi 14: if ˆv[πi, πi−] < threshold then 15: Go to line 12 16: for all j ∈ children do 17: jThres ← threshold − v[πi, πi−]− Σk∈children,k=j ˆvk[πi, πi−] 18: πj+,∗ ← SPIDER(j, πi πi−, jThres) 19: ˜πi+ ← ˜πi+ πj+,∗ 20: ˆvj[πi, πi−] ← v[πj+,∗, πi πi−] 21: if v[˜πi+, πi−] > threshold then 22: threshold ← v[˜πi+, πi−] 23: πi+,∗ ← ˜πi+ 24: return πi+,∗ Algorithm 2 UPPER-BOUND-SORT(i, Πi, πi− ) 1: children ← CHILDREN (i) 2: ˆΠi ← null /* Stores the sorted list */ 3: for all πi ∈ Πi do 4: ˆv[πi, πi−] ← JOINT-REWARD (πi, πi−) 5: for all j ∈ children do 6: ˆvj[πi, πi−] ← UPPER-BOUND(i, j, πi πi−) 7: ˆv[πi, πi−] + ← ˆvj[πi, πi−] 8: ˆΠi ← INSERT-INTO-SORTED (πi, ˆΠi) 9: return ˆΠi best expected value, joint policy in lines 21-23.",
                "Algorithm 2 provides the pseudo code for sorting policies based on the upper bounds on the expected values of joint policies.",
                "Expected value for an agent i consists of two parts: value obtained from ancestors and value obtained from its children.",
                "Line 4 computes the expected value obtained from ancestors of the agent (using JOINT-REWARD function), while lines 5-7 compute the heuristic value from the children.",
                "The sum of these two parts yields an upper bound on the expected value for agent i, and line 8 of the algorithm sorts the policies based on these upper bounds. 4.2 MDP based heuristic function The heuristic function quickly provides an upper bound on the expected value obtainable from the agents in Tree(i).",
                "The subtree of agents is a distributed POMDP in itself and the idea here is to construct a centralized MDP corresponding to the (sub-tree) distributed POMDP and obtain the expected value of the optimal policy for this centralized MDP.",
                "To reiterate this in terms of the agents in DFS tree interaction structure, we assume full observability for the agents in Tree(i) and for fixed policies of the agents in {Ancestors(i) ∪ i}, we compute the joint value ˆv[πi+ , πi− ] .",
                "We use the following notation for presenting the equations for computing upper bounds/heuristic values (for agents i and k): Let Ei− denote the set of links between agents in {Ancestors(i)∪ i} and Tree(i), Ei+ denote the set of links between agents in Tree(i).",
                "Also, if l ∈ Ei− , then l1 is the agent in {Ancestors(i)∪ i} and l2 is the agent in Tree(i), that l connects together.",
                "We first compact the standard notation: ot k =Ok(st+1 k , st+1 u , πk(ωt k), ωt+1 k ) (1) pt k =Pk(st k, st u, πk(ωt k), st+1 k ) · ot k pt u =P(st u, st+1 u ) st l = st l1 , st l2 , st u ; ωt l = ωt l1 , ωt l2 rt l =Rl(st l , πl1 (ωt l1 ), πl2 (ωt l2 )) vt l =V t πl (st l , st u, ωt l1 , ωt l2 ) Depending on the location of agent k in the agent tree we have the following cases: IF k ∈ {Ancestors(i) ∪ i}, ˆpt k = pt k, (2) IF k ∈ Tree(i), ˆpt k = Pk(st k, st u, πk(ωt k), st+1 k ) IF l ∈ Ei− , ˆrt l = max {al2 } Rl(st l , πl1 (ωt l1 ), al2 ) IF l ∈ Ei+ , ˆrt l = max {al1 ,al2 } Rl(st l , al1 , al2 ) The value function for an agent i executing the joint policy πi+ at time η − 1 is provided by the equation: V η−1 πi+ (sη−1 , ωη−1 ) = l∈Ei− vη−1 l + l∈Ei+ vη−1 l (3) where vη−1 l = rη−1 l + ω η l ,sη pη−1 l1 pη−1 l2 pη−1 u vη l Algorithm 3 UPPER-BOUND (i, j, πj− ) 1: val ← 0 2: for all l ∈ Ej− ∪ Ej+ do 3: if l ∈ Ej− then πl1 ← φ 4: for all s0 l do 5: val + ← startBel[s0 l ]· UPPER-BOUND-TIME (i, s0 l , j, πl1 , ) 6: return val Algorithm 4 UPPER-BOUND-TIME (i, st l , j, πl1 , ωt l1 ) 1: maxV al ← −∞ 2: for all al1 , al2 do 3: if l ∈ Ei− and l ∈ Ej− then al1 ← πl1 (ωt l1 ) 4: val ← GET-REWARD(st l , al1 , al2 ) 5: if t < πi.horizon − 1 then 6: for all st+1 l , ωt+1 l1 do 7: futV al←pt u ˆpt l1 ˆpt l2 8: futV al ∗ ← UPPER-BOUND-TIME(st+1 l , j, πl1 , ωt l1 ωt+1 l1 ) 9: val + ← futV al 10: if val > maxV al then maxV al ← val 11: return maxV al Upper bound on the expected value for a link is computed by modifying the equation 3 to reflect the full observability assumption.",
                "This involves removing the observational probability term for agents in Tree(i) and maximizing the future value ˆvη l over the actions of those agents (in Tree(i)).",
                "Thus, the equation for the The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 825 computation of the upper bound on a link l, is as follows: IF l ∈ Ei− , ˆvη−1 l =ˆrη−1 l + max al2 ω η l1 ,s η l ˆpη−1 l1 ˆpη−1 l2 pη−1 u ˆvη l IF l ∈ Ei+ , ˆvη−1 l =ˆrη−1 l + max al1 ,al2 s η l ˆpη−1 l1 ˆpη−1 l2 pη−1 u ˆvη l Algorithm 3 and Algorithm 4 provide the algorithm for computing upper bound for child j of agent i, using the equations descirbed above.",
                "While Algorithm 4 computes the upper bound on a link given the starting state, Algorithm 3 sums the upper bound values computed over each of the links in Ei− ∪ Ei+ . 4.3 Abstraction Algorithm 5 SPIDER-ABS(i, πi− , threshold) 1: πi+,∗ ← null 2: Πi ← GET-POLICIES (<>, 1) 3: if IS-LEAF(i) then 4: for all πi ∈ Πi do 5: absHeuristic ← GET-ABS-HEURISTIC (πi, πi−) 6: absHeuristic ∗ ← (timeHorizon − πi.horizon) 7: if πi.horizon = timeHorizon and πi.absNodes = 0 then 8: v[πi, πi−] ← JOINT-REWARD (πi, πi−) 9: if v[πi, πi−] > threshold then 10: πi+,∗ ← πi; threshold ← v[πi, πi−] 11: else if v[πi, πi−] + absHeuristic > threshold then 12: ˆΠi ← EXTEND-POLICY (πi, πi.absNodes + 1) 13: Πi + ← INSERT-SORTED-POLICIES ( ˆΠi) 14: REMOVE(πi) 15: else 16: children ← CHILDREN (i) 17: Πi ← UPPER-BOUND-SORT(i, Πi, πi−) 18: for all πi ∈ Πi do 19: ˜πi+ ← πi 20: absHeuristic ← GET-ABS-HEURISTIC (πi, πi−) 21: absHeuristic ∗ ← (timeHorizon − πi.horizon) 22: if πi.horizon = timeHorizon and πi.absNodes = 0 then 23: if ˆv[πi, πi−] < threshold and πi.absNodes = 0 then 24: Go to line 19 25: for all j ∈ children do 26: jThres ← threshold − v[πi, πi−]− Σk∈children,k=j ˆvk[πi, πi−] 27: πj+,∗ ← SPIDER(j, πi πi−, jThres) 28: ˜πi+ ← ˜πi+ πj+,∗; ˆvj[πi, πi−] ← v[πj+,∗, πi πi−] 29: if v[˜πi+, πi−] > threshold then 30: threshold ← v[˜πi+, πi−]; πi+,∗ ← ˜πi+ 31: else if ˆv[πi+, πi−] + absHeuristic > threshold then 32: ˆΠi ← EXTEND-POLICY (πi, πi.absNodes + 1) 33: Πi + ← INSERT-SORTED-POLICIES (ˆΠi) 34: REMOVE(πi) 35: return πi+,∗ In SPIDER, the exploration/pruning phase can only begin after the heuristic (or upper bound) computation and sorting for the policies has ended.",
                "We provide an approach to possibly circumvent the exploration of a group of policies based on heuristic computation for one abstract policy, thus leading to an improvement in runtime performance (without loss in solution quality).",
                "The important steps in this technique are defining the abstract policy and how heuristic values are computated for the abstract policies.",
                "In this paper, we propose two types of abstraction: 1.",
                "Horizon Based Abstraction (HBA): Here, the abstract policy is defined as a shorter horizon policy.",
                "It represents a group of longer horizon policies that have the same actions as the abstract policy for times less than or equal to the horizon of the abstract policy.",
                "In Figure 3(a), a T=1 abstract policy that performs East action, represents a group of T=2 policies, that perform East in the first time step.",
                "For HBA, there are two parts to heuristic computation: (a) Computing the upper bound for the horizon of the abstract policy.",
                "This is same as the heuristic computation defined by the GETHEURISTIC() algorithm for SPIDER, however with a shorter time horizon (horizon of the abstract policy). (b) Computing the maximum possible reward that can be accumulated in one time step (using GET-ABS-HEURISTIC()) and multiplying it by the number of time steps to time horizon.",
                "This maximum possible reward (for one time step) is obtained by iterating through all the actions of all the agents in Tree(i) and computing the maximum joint reward for any joint action.",
                "Sum of (a) and (b) is the heuristic value for a HBA abstract policy. 2.",
                "Node Based Abstraction (NBA): Here an abstract policy is obtained by not associating actions to certain nodes of the policy tree.",
                "Unlike in HBA, this implies multiple levels of abstraction.",
                "This is illustrated in Figure 3(b), where there are T=2 policies that do not have an action for observation TP.",
                "These incomplete T=2 policies are abstractions for T=2 complete policies.",
                "Increased levels of abstraction leads to faster computation of a complete joint policy, πroot+ and also to shorter heuristic computation and exploration, pruning phases.",
                "For NBA, the heuristic computation is similar to that of a normal policy, except in cases where there is no action associated with policy nodes.",
                "In such cases, the immediate reward is taken as Rmax (maximum reward for any action).",
                "We combine both the abstraction techniques mentioned above into one technique, SPIDER-ABS.",
                "Algorithm 5 provides the algorithm for this abstraction technique.",
                "For computing optimal joint policy with SPIDER-ABS, a non-leaf agent i initially examines all abstract T=1 policies (line 2) and sorts them based on abstract policy heuristic computations (line 17).",
                "The abstraction horizon is gradually increased and these abstract policies are then explored in descending order of heuristic values and ones that have heuristic values less than the threshold are pruned (lines 23-24).",
                "Exploration in SPIDER-ABS has the same definition as in SPIDER if the policy being explored has a horizon of policy computation which is equal to the actual time horizon and if all the nodes of the policy have an action associated with them (lines 25-30).",
                "However, if those conditions are not met, then it is substituted by a group of policies that it represents (using EXTEND-POLICY () function) (lines 31-32).",
                "EXTEND-POLICY() function is also responsible for initializing the horizon and absNodes of a policy. absNodes represents the number of nodes at the last level in the policy tree, that do not have an action assigned to them.",
                "If πi.absNodes = |Ωi|πi.horizon−1 (i.e. total number of policy nodes possible at πi.horizon) , then πi.absNodes is set to zero and πi.horizon is increased by 1.",
                "Otherwise, πi.absNodes is increased by 1.",
                "Thus, this function combines both HBA and NBA by using the policy variables, horizon and absNodes.",
                "Before substituting the abstract policy with a group of policies, those policies are sorted based on heuristic values (line 33).",
                "Similar type of abstraction based best response computation is adopted at leaf agents (lines 3-14). 4.4 Value ApproXimation (VAX) In this section, we present an approximate enhancement to SPIDER called VAX.",
                "The input to this technique is an approximation parameter , which determines the difference from the optimal solution quality.",
                "This approximation parameter is used at each agent for pruning out joint policies.",
                "The pruning mechanism in SPIDER and SPIDER-Abs dictates that a joint policy be pruned only if the threshold is exactly greater than the heuristic value.",
                "However, the 826 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Figure 3: Example of abstraction for (a) HBA (Horizon Based Abstraction) and (b) NBA (Node Based Abstraction) idea in this technique is to prune out joint a policy if the following condition is satisfied: threshold + > ˆv[πi , πi− ].",
                "Apart from the pruning condition, VAX is the same as SPIDER/SPIDER-ABS.",
                "In the example of Figure 2, if the heuristic value for the second joint policy (or second search tree node) in level 2 were 238 instead of 232, then that policy could not be be pruned using SPIDER or SPIDER-Abs.",
                "However, in VAX with an approximation parameter of 5, the joint policy in consideration would also be pruned.",
                "This is because the threshold (234) at that juncture plus the approximation parameter (5), i.e. 239 would have been greater than the heuristic value for that joint policy (238).",
                "It can be noted from the example (just discussed) that this kind of pruning can lead to fewer explorations and hence lead to an improvement in the overall run-time performance.",
                "However, this can entail a sacrifice in the quality of the solution because this technique can prune out a candidate optimal solution.",
                "A bound on the error introduced by this approximate algorithm as a function of , is provided by Proposition 3. 4.5 Percentage ApproXimation (PAX) In this section, we present the second approximation enhancement over SPIDER called PAX.",
                "Input to this technique is a parameter, δ that represents the minimum percentage of the optimal solution quality that is desired.",
                "Output of this technique is a policy with an expected value that is at least δ% of the optimal solution quality.",
                "A policy is pruned if the following condition is satisfied: threshold > δ 100 ˆv[πi , πi− ].",
                "Like in VAX, the only difference between PAX and SPIDER/SPIDER-ABS is this pruning condition.",
                "Again in Figure 2, if the heuristic value for the second search tree node in level 2 were 238 instead of 232, then PAX with an input parameter of 98% would be able to prune that search tree node (since 98 100 ∗238 < 234).",
                "This type of pruning leads to fewer explorations and hence an improvement in run-time performance, while potentially leading to a loss in quality of the solution.",
                "Proposition 4 provides the bound on quality loss. 4.6 Theoretical Results PROPOSITION 1.",
                "Heuristic provided using the centralized MDP heuristic is admissible.",
                "Proof.",
                "For the value provided by the heuristic to be admissible, it should be an over estimate of the expected value for a joint policy.",
                "Thus, we need to show that: For l ∈ Ei+ ∪ Ei− : ˆvt l ≥ vt l (refer to notation in Section 4.2) We use mathematical induction on t to prove this.",
                "Base case: t = T − 1.",
                "Irrespective of whether l ∈ Ei− or l ∈ Ei+ , ˆrt l is computed by maximizing over all actions of the agents in Tree(i), while rt l is computed for fixed policies of the same agents.",
                "Hence, ˆrt l ≥ rt l and also ˆvt l ≥ vt l .",
                "Assumption: Proposition holds for t = η, where 1 ≤ η < T − 1.",
                "We now have to prove that the proposition holds for t = η − 1.",
                "We show the proof for l ∈ Ei− and similar reasoning can be adopted to prove for l ∈ Ei+ .",
                "The heuristic value function for l ∈ Ei− is provided by the following equation: ˆvη−1 l =ˆrη−1 l + max al2 ω η l1 ,s η l ˆpη−1 l1 ˆpη−1 l2 pη−1 u ˆvη l Rewriting the RHS and using Eqn 2 (in Section 4.2) =ˆrη−1 l + max al2 ω η l1 ,s η l pη−1 u pη−1 l1 ˆpη−1 l2 ˆvη l =ˆrη−1 l + ω η l1 ,s η l pη−1 u pη−1 l1 max al2 ˆpη−1 l2 ˆvη l Since maxal2 ˆpη−1 l2 ˆvη l ≥ ωl2 oη−1 l2 ˆpη−1 l2 ˆvη l and pη−1 l2 = oη−1 l2 ˆpη−1 l2 ≥ˆrη−1 l + ω η l1 ,s η l pη−1 u pη−1 l1 ωl2 pη−1 l2 ˆvη l Since ˆvη l ≥ vη l (from the assumption) ≥ˆrη−1 l + ω η l1 ,s η l pη−1 u pη−1 l1 ωl2 pη−1 l2 vη l Since ˆrη−1 l ≥ rη−1 l (by definition) ≥rη−1 l + ω η l1 ,s η l pη−1 u pη−1 l1 ωl2 pη−1 l2 vη l =rη−1 l + (ω η l ,s η l ) pη−1 u pη−1 l1 pη−1 l2 vη l = vη−1 l Thus proved.",
                "PROPOSITION 2.",
                "SPIDER provides an optimal solution.",
                "Proof.",
                "SPIDER examines all possible joint policies given the interaction structure of the agents.",
                "The only exception being when a joint policy is pruned based on the heuristic value.",
                "Thus, as long as a candidate optimal policy is not pruned, SPIDER will return an optimal policy.",
                "As proved in Proposition 1, the expected value for a joint policy is always an upper bound.",
                "Hence when a joint policy is pruned, it cannot be an optimal solution.",
                "PROPOSITION 3.",
                "Error bound on the solution quality for VAX (implemented over SPIDER-ABS) with an approximation parameter of is ρ , where ρ is the number of leaf nodes in the DFS tree.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 827 Proof.",
                "We prove this proposition using mathematical induction on the depth of the DFS tree.",
                "Base case: depth = 1 (i.e. one node).",
                "Best response is computed by iterating through all policies, Πk.",
                "A policy,πk is pruned if ˆv[πk, πk− ] < threshold + .",
                "Thus the best response policy computed by VAX would be at most away from the optimal best response.",
                "Hence the proposition holds for the base case.",
                "Assumption: Proposition holds for d, where 1 ≤ depth ≤ d. We now have to prove that the proposition holds for d + 1.",
                "Without loss of generality, lets assume that the root node of this tree has k children.",
                "Each of this children is of depth ≤ d, and hence from the assumption, the error introduced in kth child is ρk , where ρk is the number of leaf nodes in kth child of the root.",
                "Therefore, ρ = k ρk, where ρ is the number of leaf nodes in the tree.",
                "In SPIDER-ABS, threshold at the root agent, thresspider = k v[πk+ , πk− ].",
                "However, with VAX the threshold at the root agent will be (in the worst case), threshvax = k v[πk+ , πk− ]− k ρk .",
                "Hence, with VAX a joint policy is pruned at the root agent if ˆv[πroot, πroot− ] < threshvax + ⇒ ˆv[πroot, πroot− ] < threshspider − (( k ρk) − 1) ≤ threshspider − ( k ρk) ≤ threshspider − ρ .",
                "Hence proved.",
                "PROPOSITION 4.",
                "For PAX (implemented over SPIDER-ABS) with an input parameter of δ, the solution quality is at least δ 100 v[πroot+,∗ ], where v[πroot+,∗ ] denotes the optimal solution quality.",
                "Proof.",
                "We prove this proposition using mathematical induction on the depth of the DFS tree.",
                "Base case: depth = 1 (i.e. one node).",
                "Best response is computed by iterating through all policies, Πk.",
                "A policy,πk is pruned if δ 100 ˆv[πk, πk− ] < threshold.",
                "Thus the best response policy computed by PAX would be at least δ 100 times the optimal best response.",
                "Hence the proposition holds for the base case.",
                "Assumption: Proposition holds for d, where 1 ≤ depth ≤ d. We now have to prove that the proposition holds for d + 1.",
                "Without loss of generality, lets assume that the root node of this tree has k children.",
                "Each of this children is of depth ≤ d, and hence from the assumption, the solution quality in the kth child is at least δ 100 v[πk+,∗ , πk− ] for PAX.",
                "With SPIDER-ABS, a joint policy is pruned at the root agent if ˆv[πroot, πroot− ] < k v[πk+,∗ , πk− ].",
                "However with PAX, a joint policy is pruned if δ 100 ˆv[πroot, πroot− ] < k δ 100 v[πk+,∗ , πk− ] ⇒ ˆv[πroot, πroot− ] < k v[πk+,∗ , πk− ].",
                "Since the pruning condition at the root agent in PAX is the same as the one in SPIDER-ABS, there is no error introduced at the root agent and all the error is introduced in the children.",
                "Thus, overall solution quality is at least δ 100 of the optimal solution.",
                "Hence proved. 5.",
                "EXPERIMENTAL RESULTS All our experiments were conducted on the sensor network domain from Section 2.",
                "The five network configurations employed are shown in Figure 4.",
                "Algorithms that we experimented with are GOA, SPIDER, SPIDER-ABS, PAX and VAX.",
                "We compare against GOA because it is the only global optimal algorithm that considers more than two agents.",
                "We performed two sets of experiments: (i) firstly, we compared the run-time performance of the above algorithms and (ii) secondly, we experimented with PAX and VAX to study the tradeoff between run-time and solution quality.",
                "Experiments were terminated after 10000 seconds1 .",
                "Figure 5(a) provides run-time comparisons between the optimal algorithms GOA, SPIDER, SPIDER-Abs and the approximate algorithms, PAX ( of 30) and VAX(δ of 80).",
                "X-axis denotes the 1 Machine specs for all experiments: Intel Xeon 3.6 GHZ processor, 2GB RAM sensor network configuration used, while Y-axis indicates the runtime (on a log-scale).",
                "The time horizon of policy computation was 3.",
                "For each configuration (3-chain, 4-chain, 4-star and 5-star), there are five bars indicating the time taken by GOA, SPIDER, SPIDERAbs, PAX and VAX.",
                "GOA did not terminate within the time limit for 4-star and 5-star configurations.",
                "SPIDER-Abs dominated the SPIDER and GOA for all the configurations.",
                "For instance, in the 3chain configuration, SPIDER-ABS provides 230-fold speedup over GOA and 2-fold speedup over SPIDER and for the 4-chain configuration it provides 58-fold speedup over GOA and 2-fold speedup over SPIDER.",
                "The two approximation approaches, VAX and PAX provided further improvement in performance over SPIDER-Abs.",
                "For instance, in the 5-star configuration VAX provides a 15-fold speedup and PAX provides a 8-fold speedup over SPIDER-Abs.",
                "Figures 5(b) provides a comparison of the solution quality obtained using the different algorithms for the problems tested in Figure 5(a).",
                "X-axis denotes the sensor network configuration while Y-axis indicates the solution quality.",
                "Since GOA, SPIDER, and SPIDER-Abs are all global optimal algorithms, the solution quality is the same for all those algorithms.",
                "For 5-P configuration, the global optimal algorithms did not terminate within the limit of 10000 seconds, so the bar for optimal quality indicates an upper bound on the optimal solution quality.",
                "With both the approximations, we obtained a solution quality that was close to the optimal solution quality.",
                "In 3-chain and 4-star configurations, it is remarkable that both PAX and VAX obtained almost the same actual quality as the global optimal algorithms, despite the approximation parameter and δ.",
                "For other configurations as well, the loss in quality was less than 20% of the optimal solution quality.",
                "Figure 5(c) provides the time to solution with PAX (for varying epsilons).",
                "X-axis denotes the approximation parameter, δ (percentage to optimal) used, while Y-axis denotes the time taken to compute the solution (on a log-scale).",
                "The time horizon for all the configurations was 4.",
                "As δ was decreased from 70 to 30, the time to solution decreased drastically.",
                "For instance, in the 3-chain case there was a total speedup of 170-fold when the δ was changed from 70 to 30.",
                "Interestingly, even with a low δ of 30%, the actual solution quality remained equal to the one obtained at 70%.",
                "Figure 5(d) provides the time to solution for all the configurations with VAX (for varying epsilons).",
                "X-axis denotes the approximation parameter, used, while Y-axis denotes the time taken to compute the solution (on a log-scale).",
                "The time horizon for all the configurations was 4.",
                "As was increased, the time to solution decreased drastically.",
                "For instance, in the 4-star case there was a total speedup of 73-fold when the was changed from 60 to 140.",
                "Again, the actual solution quality did not change with varying epsilon.",
                "Figure 4: Sensor network configurations 828 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Figure 5: Comparison of GOA, SPIDER, SPIDER-Abs and VAX for T = 3 on (a) Runtime and (b) Solution quality; (c) Time to solution for PAX with varying percentage to optimal for T=4 (d) Time to solution for VAX with varying epsilon for T=4 6.",
                "SUMMARY AND RELATED WORK This paper presents four algorithms SPIDER, SPIDER-ABS, PAX and VAX that provide a novel combination of features for policy search in distributed POMDPs: (i) exploiting agent interaction structure given a network of agents (i.e. easier scale-up to larger number of agents); (ii) using branch and bound search with an MDP based heuristic function; (iii) utilizing abstraction to improve runtime performance without sacrificing solution quality; (iv) providing a priori percentage bounds on quality of solutions using PAX; and (v) providing expected value bounds on the quality of solutions using VAX.",
                "These features allow for systematic tradeoff of solution quality for run-time in networks of agents operating under uncertainty.",
                "Experimental results show orders of magnitude improvement in performance over previous global optimal algorithms.",
                "Researchers have typically employed two types of techniques for solving distributed POMDPs.",
                "The first set of techniques compute global optimal solutions.",
                "Hansen et al. [5] present an algorithm based on dynamic programming and iterated elimination of dominant policies, that provides optimal solutions for distributed POMDPs.",
                "Szer et al. [13] provide an optimal heuristic search method for solving Decentralized POMDPs.",
                "This algorithm is based on the combination of a classical heuristic search algorithm, A∗ and decentralized control theory.",
                "The key differences between SPIDER and MAA* are: (a) Enhancements to SPIDER (VAX and PAX) provide for quality guaranteed approximations, while MAA* is a global optimal algorithm and hence involves significant computational complexity; (b) Due to MAA*s inability to exploit interaction structure, it was illustrated only with two agents.",
                "However, SPIDER has been illustrated for networks of agents; and (c) SPIDER explores the joint policy one agent at a time, while MAA* expands it one time step at a time (simultaneously for all the agents).",
                "The second set of techniques seek approximate policies.",
                "EmeryMontemerlo et al. [4] approximate POSGs as a series of one-step Bayesian games using heuristics to approximate future value, trading off limited lookahead for computational efficiency, resulting in locally optimal policies (with respect to the selected heuristic).",
                "Nair et al. [9]s JESP algorithm uses dynamic programming to reach a local optimum solution for finite horizon decentralized POMDPs.",
                "Peshkin et al. [11] and Bernstein et al. [2] are examples of policy search techniques that search for locally optimal policies.",
                "Though all the above techniques improve the efficiency of policy computation considerably, they are unable to provide error bounds on the quality of the solution.",
                "This aspect of quality bounds differentiates SPIDER from all the above techniques.",
                "Acknowledgements.",
                "This material is based upon work supported by the Defense Advanced Research Projects Agency (DARPA), through the Department of the Interior, NBC, Acquisition Services Division under Contract No.",
                "NBCHD030010.",
                "The views and conclusions contained in this document are those of the authors, and should not be interpreted as representing the official policies, either expressed or implied, of the Defense Advanced Research Projects Agency or the U.S. Government. 7.",
                "REFERENCES [1] R. Becker, S. Zilberstein, V. Lesser, and C.V. Goldman.",
                "Solving transition independent decentralized Markov decision processes.",
                "JAIR, 22:423-455, 2004. [2] D. S. Bernstein, E.A.",
                "Hansen, and S. Zilberstein.",
                "Bounded policy iteration for decentralized POMDPs.",
                "In IJCAI, 2005. [3] D. S. Bernstein, S. Zilberstein, and N. Immerman.",
                "The complexity of decentralized control of MDPs.",
                "In UAI, 2000. [4] R. Emery-Montemerlo, G. Gordon, J. Schneider, and S. Thrun.",
                "Approximate solutions for partially observable stochastic games with common payoffs.",
                "In AAMAS, 2004. [5] E. Hansen, D. Bernstein, and S. Zilberstein.",
                "Dynamic programming for partially observable stochastic games.",
                "In AAAI, 2004. [6] V. Lesser, C. Ortiz, and M. Tambe.",
                "Distributed sensor nets: A multiagent perspective.",
                "Kluwer, 2003. [7] R. Maheswaran, M. Tambe, E. Bowring, J. Pearce, and P. Varakantham.",
                "Taking dcop to the real world : Efficient complete solutions for distributed event scheduling.",
                "In AAMAS, 2004. [8] P. J. Modi, W. Shen, M. Tambe, and M. Yokoo.",
                "An asynchronous complete method for distributed constraint optimization.",
                "In AAMAS, 2003. [9] R. Nair, D. Pynadath, M. Yokoo, M. Tambe, and S. Marsella.",
                "Taming decentralized POMDPs: Towards efficient policy computation for multiagent settings.",
                "In IJCAI, 2003. [10] R. Nair, P. Varakantham, M. Tambe, and M. Yokoo.",
                "Networked distributed POMDPs: A synthesis of distributed constraint optimization and POMDPs.",
                "In AAAI, 2005. [11] L. Peshkin, N. Meuleau, K.-E. Kim, and L. Kaelbling.",
                "Learning to cooperate via policy search.",
                "In UAI, 2000. [12] A. Petcu and B. Faltings.",
                "A scalable method for multiagent constraint optimization.",
                "In IJCAI, 2005. [13] D. Szer, F. Charpillet, and S. Zilberstein.",
                "MAA*: A heuristic search algorithm for solving decentralized POMDPs.",
                "In IJCAI, 2005.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 829"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Un segundo enfoque menos popular se centra en la \"optimización global\", pero los resultados típicos están disponibles solo para dos agentes, y también a un costo computacional considerable."
            ],
            "translated_text": "",
            "candidates": [
                "optimización global",
                "optimización global"
            ],
            "error": []
        },
        "agent interaction structure": {
            "translated_key": "",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Letting loose a SPIDER on a network of POMDPs: Generating quality guaranteed policies Pradeep Varakantham, Janusz Marecki, Yuichi Yabu∗ , Milind Tambe, Makoto Yokoo∗ University of Southern California, Los Angeles, CA 90089, {varakant, marecki, tambe}@usc.edu ∗ Dept.",
                "of Intelligent Systems, Kyushu University, Fukuoka, 812-8581 Japan, yokoo@is.kyushu-u.ac.jp ABSTRACT Distributed Partially Observable Markov Decision Problems (Distributed POMDPs) are a popular approach for modeling multi-agent systems acting in uncertain domains.",
                "Given the significant complexity of solving distributed POMDPs, particularly as we scale up the numbers of agents, one popular approach has focused on approximate solutions.",
                "Though this approach is efficient, the algorithms within this approach do not provide any guarantees on solution quality.",
                "A second less popular approach focuses on global optimality, but typical results are available only for two agents, and also at considerable computational cost.",
                "This paper overcomes the limitations of both these approaches by providing SPIDER, a novel combination of three key features for policy generation in distributed POMDPs: (i) it exploits <br>agent interaction structure</br> given a network of agents (i.e. allowing easier scale-up to larger number of agents); (ii) it uses a combination of heuristics to speedup policy search; and (iii) it allows quality guaranteed approximations, allowing a systematic tradeoff of solution quality for time.",
                "Experimental results show orders of magnitude improvement in performance when compared with previous global optimal algorithms.",
                "Categories and Subject Descriptors I.2.11 [Artificial Intelligence]: Distributed Artificial IntelligenceMulti-agent Systems General Terms Algorithms, Theory 1.",
                "INTRODUCTION Distributed Partially Observable Markov Decision Problems (Distributed POMDPs) are emerging as a popular approach for modeling sequential decision making in teams operating under uncertainty [9, 4, 1, 2, 13].",
                "The uncertainty arises on account of nondeterminism in the outcomes of actions and because the world state may only be partially (or incorrectly) observable.",
                "Unfortunately, as shown by Bernstein et al. [3], the problem of finding the optimal joint policy for general distributed POMDPs is NEXP-Complete.",
                "Researchers have attempted two different types of approaches towards solving these models.",
                "The first category consists of highly efficient approximate techniques, that may not reach globally optimal solutions [2, 9, 11].",
                "The key problem with these techniques has been their inability to provide any guarantees on the quality of the solution.",
                "In contrast, the second less popular category of approaches has focused on a global optimal result [13, 5, 10].",
                "Though these approaches obtain optimal solutions, they typically consider only two agents.",
                "Furthermore, they fail to exploit structure in the interactions of the agents and hence are severely hampered with respect to scalability when considering more than two agents.",
                "To address these problems with the existing approaches, we propose approximate techniques that provide guarantees on the quality of the solution while focussing on a network of more than two agents.",
                "We first propose the basic SPIDER (Search for Policies In Distributed EnviRonments) algorithm.",
                "There are two key novel features in SPIDER: (i) it is a branch and bound heuristic search technique that uses a MDP-based heuristic function to search for an optimal joint policy; (ii) it exploits network structure of agents by organizing agents into a Depth First Search (DFS) pseudo tree and takes advantage of the independence in the different branches of the DFS tree.",
                "We then provide three enhancements to improve the efficiency of the basic SPIDER algorithm while providing guarantees on the quality of the solution.",
                "The first enhancement uses abstractions for speedup, but does not sacrifice solution quality.",
                "In particular, it initially performs branch and bound search on abstract policies and then extends to complete policies.",
                "The second enhancement obtains speedups by sacrificing solution quality, but within an input parameter that provides the tolerable expected value difference from the optimal solution.",
                "The third enhancement is again based on bounding the search for efficiency, however with a tolerance parameter that is provided as a percentage of optimal.",
                "We experimented with the sensor network domain presented in Nair et al. [10], a domain representative of an important class of problems with networks of agents working in uncertain environments.",
                "In our experiments, we illustrate that SPIDER dominates an existing global optimal approach called GOA [10], the only known global optimal algorithm with demonstrated experimental results for more than two agents.",
                "Furthermore, we demonstrate that abstraction improves the performance of SPIDER significantly (while providing optimal solutions).",
                "We finally demonstrate a key feature of SPIDER: by utilizing the approximation enhancements it enables principled tradeoffs in run-time versus solution quality. 822 978-81-904262-7-5 (RPS) c 2007 IFAAMAS 2.",
                "DOMAIN: DISTRIBUTED SENSOR NETS Distributed sensor networks are a large, important class of domains that motivate our work.",
                "This paper focuses on a set of target tracking problems that arise in certain types of sensor networks [6] first introduced in [10].",
                "Figure 1 shows a specific problem instance within this type consisting of three sensors.",
                "Here, each sensor node can scan in one of four directions: North, South, East or West (see Figure 1).",
                "To track a target and obtain associated reward, two sensors with overlapping scanning areas must coordinate by scanning the same area simultaneously.",
                "In Figure 1, to track a target in Loc11, sensor1 needs to scan East and sensor2 needs to scan West simultaneously.",
                "Thus, sensors have to act in a coordinated fashion.",
                "We assume that there are two independent targets and that each targets movement is uncertain and unaffected by the sensor agents.",
                "Based on the area it is scanning, each sensor receives observations that can have false positives and false negatives.",
                "The sensors observations and transitions are independent of each others actions e.g.the observations that sensor1 receives are independent of sensor2s actions.",
                "Each agent incurs a cost for scanning whether the target is present or not, but no cost if it turns off.",
                "Given the sensors observational uncertainty, the targets uncertain transitions and the distributed nature of the sensor nodes, these sensor nets provide a useful domains for applying distributed POMDP models.",
                "Figure 1: A 3-chain sensor configuration 3.",
                "BACKGROUND 3.1 Model: Network Distributed POMDP The ND-POMDP model was introduced in [10], motivated by domains such as the sensor networks introduced in Section 2.",
                "It is defined as the tuple S, A, P, Ω, O, R, b , where S = ×1≤i≤nSi × Su is the set of world states.",
                "Si refers to the set of local states of agent i and Su is the set of unaffectable states.",
                "Unaffectable state refers to that part of the world state that cannot be affected by the agents actions, e.g. environmental factors like target locations that no agent can control.",
                "A = ×1≤i≤nAi is the set of joint actions, where Ai is the set of action for agent i. ND-POMDP assumes transition independence, where the transition function is defined as P(s, a, s ) = Pu(su, su) · 1≤i≤n Pi(si, su, ai, si), where a = a1, . . . , an is the joint action performed in state s = s1, . . . , sn, su and s = s1, . . . , sn, su is the resulting state.",
                "Ω = ×1≤i≤nΩi is the set of joint observations where Ωi is the set of observations for agents i. Observational independence is assumed in ND-POMDPs i.e., the joint observation function is defined as O(s, a, ω) = 1≤i≤n Oi(si, su, ai, ωi), where s = s1, . . . , sn, su is the world state that results from the agents performing a = a1, . . . , an in the previous state, and ω = ω1, . . . , ωn ∈ Ω is the observation received in state s. This implies that each agents observation depends only on the unaffectable state, its local action and on its resulting local state.",
                "The reward function, R, is defined as R(s, a) = l Rl(sl1, . . . , slr, su, al1, . . . , alr ), where each l could refer to any sub-group of agents and r = |l|.",
                "Based on the reward function, an interaction hypergraph is constructed.",
                "A hyper-link, l, exists between a subset of agents for all Rl that comprise R. The interaction hypergraph is defined as G = (Ag, E), where the agents, Ag, are the vertices and E = {l|l ⊆ Ag ∧ Rl is a component of R} are the edges.",
                "The initial belief state (distribution over the initial state), b, is defined as b(s) = bu(su) · 1≤i≤n bi(si), where bu and bi refer to the distribution over initial unaffectable state and agent is initial belief state, respectively.",
                "The goal in ND-POMDP is to compute the joint policy π = π1, . . . , πn that maximizes teams expected reward over a finite horizon T starting from the belief state b.",
                "An ND-POMDP is similar to an n-ary Distributed Constraint Optimization Problem (DCOP)[8, 12] where the variable at each node represents the policy selected by an individual agent, πi with the domain of the variable being the set of all local policies, Πi.",
                "The reward component Rl where |l| = 1 can be thought of as a local constraint while the reward component Rl where l > 1 corresponds to a non-local constraint in the constraint graph. 3.2 Algorithm: Global Optimal Algorithm (GOA) In previous work, GOA has been defined as a global optimal algorithm for ND-POMDPs [10].",
                "We will use GOA in our experimental comparisons, since GOA is a state-of-the-art global optimal algorithm, and in fact the only one with experimental results available for networks of more than two agents.",
                "GOA borrows from a global optimal DCOP algorithm called DPOP[12].",
                "GOAs message passing follows that of DPOP.",
                "The first phase is the UTIL propagation, where the utility messages, in this case values of policies, are passed up from the leaves to the root.",
                "Value for a policy at an agent is defined as the sum of best response values from its children and the joint policy reward associated with the parent policy.",
                "Thus, given a policy for a parent node, GOA requires an agent to iterate through all its policies, finding the best response policy and returning the value to the parent - while at the parent node, to find the best policy, an agent requires its children to return their best responses to each of its policies.",
                "This UTIL propagation process is repeated at each level in the tree, until the root exhausts all its policies.",
                "In the second phase of VALUE propagation, where the optimal policies are passed down from the root till the leaves.",
                "GOA takes advantage of the local interactions in the interaction graph, by pruning out unnecessary joint policy evaluations (associated with nodes not connected directly in the tree).",
                "Since the interaction graph captures all the reward interactions among agents and as this algorithm iterates through all the relevant joint policy evaluations, this algorithm yields a globally optimal solution. 4.",
                "SPIDER As mentioned in Section 3.1, an ND-POMDP can be treated as a DCOP, where the goal is to compute a joint policy that maximizes the overall joint reward.",
                "The brute-force technique for computing an optimal policy would be to examine the expected values for all possible joint policies.",
                "The key idea in SPIDER is to avoid computation of expected values for the entire space of joint policies, by utilizing upper bounds on the expected values of policies and the interaction structure of the agents.",
                "Akin to some of the algorithms for DCOP [8, 12], SPIDER has a pre-processing step that constructs a DFS tree corresponding to the given interaction structure.",
                "Note that these DFS trees are pseudo trees [12] that allow links between ancestors and children.",
                "We employ the Maximum Constrained Node (MCN) heuristic used in the DCOP algorithm, ADOPT [8], however other heuristics (such as MLSP heuristic from [7]) can also be employed.",
                "MCN heuristic tries to place agents with more number of constraints at the top of the tree.",
                "This tree governs how the search for the optimal joint polThe Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 823 icy proceeds in SPIDER.",
                "The algorithms presented in this paper are easily extendable to hyper-trees, however for expository purposes, we assume binary trees.",
                "SPIDER is an algorithm for centralized planning and distributed execution in distributed POMDPs.",
                "In this paper, we employ the following notation to denote policies and expected values: Ancestors(i) ⇒ agents from i to the root (not including i).",
                "Tree(i) ⇒ agents in the sub-tree (not including i) for which i is the root. πroot+ ⇒ joint policy of all agents. πi+ ⇒ joint policy of all agents in Tree(i) ∪ i. πi− ⇒ joint policy of agents that are in Ancestors(i). πi ⇒ policy of the ith agent. ˆv[πi, πi− ] ⇒ upper bound on the expected value for πi+ given πi and policies of ancestor agents i.e. πi− . ˆvj[πi, πi− ] ⇒ upper bound on the expected value for πi+ from the jth child. v[πi, πi− ] ⇒ expected value for πi given policies of ancestor agents, πi− . v[πi+ , πi− ] ⇒ expected value for πi+ given policies of ancestor agents, πi− . vj[πi+ , πi− ] ⇒ expected value for πi+ from the jth child.",
                "Figure 2: Execution of SPIDER, an example 4.1 Outline of SPIDER SPIDER is based on the idea of branch and bound search, where the nodes in the search tree represent partial/complete joint policies.",
                "Figure 2 shows an example search tree for the SPIDER algorithm, using an example of the three agent chain.",
                "Before SPIDER begins its search we create a DFS tree (i.e. pseudo tree) from the three agent chain, with the middle agent as the root of this tree.",
                "SPIDER exploits the structure of this DFS tree while engaging in its search.",
                "Note that in our example figure, each agent is assigned a policy with T=2.",
                "Thus, each rounded rectange (search tree node) indicates a partial/complete joint policy, a rectangle indicates an agent and the ovals internal to an agent show its policy.",
                "Heuristic or actual expected value for a joint policy is indicated in the top right corner of the rounded rectangle.",
                "If the number is italicized and underlined, it implies that the actual expected value of the joint policy is provided.",
                "SPIDER begins with no policy assigned to any of the agents (shown in the level 1 of the search tree).",
                "Level 2 of the search tree indicates that the joint policies are sorted based on upper bounds computed for root agents policies.",
                "Level 3 shows one SPIDER search node with a complete joint policy (a policy assigned to each of the agents).",
                "The expected value for this joint policy is used to prune out the nodes in level 2 (the ones with upper bounds < 234) When creating policies for each non-leaf agent i, SPIDER potentially performs two steps: 1.",
                "Obtaining upper bounds and sorting: In this step, agent i computes upper bounds on the expected values, ˆv[πi, πi− ] of the joint policies πi+ corresponding to each of its policy πi and fixed ancestor policies.",
                "An MDP based heuristic is used to compute these upper bounds on the expected values.",
                "Detailed description about this MDP heuristic is provided in Section 4.2.",
                "All policies of agent i, Πi are then sorted based on these upper bounds (also referred to as heuristic values henceforth) in descending order.",
                "Exploration of these policies (in step 2 below) are performed in this descending order.",
                "As indicated in the level 2 of the search tree (of Figure 2), all the joint policies are sorted based on the heuristic values, indicated in the top right corner of each joint policy.",
                "The intuition behind sorting and then exploring policies in descending order of upper bounds, is that the policies with higher upper bounds could yield joint policies with higher expected values. 2.",
                "Exploration and Pruning: Exploration implies computing the best response joint policy πi+,∗ corresponding to fixed ancestor policies of agent i, πi− .",
                "This is performed by iterating through all policies of agent i i.e.",
                "Πi and summing two quantities for each policy: (i) the best response for all of is children (obtained by performing steps 1 and 2 at each of the child nodes); (ii) the expected value obtained by i for fixed policies of ancestors.",
                "Thus, exploration of a policy πi yields actual expected value of a joint policy, πi+ represented as v[πi+ , πi− ].",
                "The policy with the highest expected value is the best response policy.",
                "Pruning refers to avoiding exploring all policies (or computing expected values) at agent i by using the current best expected value, vmax [πi+ , πi− ].",
                "Henceforth, this vmax [πi+ , πi− ] will be referred to as threshold.",
                "A policy, πi need not be explored if the upper bound for that policy, ˆv[πi, πi− ] is less than the threshold.",
                "This is because the expected value for the best joint policy attainable for that policy will be less than the threshold.",
                "On the other hand, when considering a leaf agent, SPIDER computes the best response policy (and consequently its expected value) corresponding to fixed policies of its ancestors, πi− .",
                "This is accomplished by computing expected values for each of the policies (corresponding to fixed policies of ancestors) and selecting the highest expected value policy.",
                "In Figure 2, SPIDER assigns best response policies to leaf agents at level 3.",
                "The policy for the left leaf agent is to perform action East at each time step in the policy, while the policy for the right leaf agent is to perform Off at each time step.",
                "These best response policies from the leaf agents yield an actual expected value of 234 for the complete joint policy.",
                "Algorithm 1 provides the pseudo code for SPIDER.",
                "This algorithm outputs the best joint policy, πi+,∗ (with an expected value greater than threshold) for the agents in Tree(i).",
                "Lines 3-8 compute the best response policy of a leaf agent i, while lines 9-23 computes the best response joint policy for agents in Tree(i).",
                "This best response computation for a non-leaf agent i includes: (a) Sorting of policies (in descending order) based on heuristic values on line 11; (b) Computing best response policies at each of the children for fixed policies of agent i in lines 16-20; and (c) Maintaining 824 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Algorithm 1 SPIDER(i, πi− , threshold) 1: πi+,∗ ← null 2: Πi ← GET-ALL-POLICIES (horizon, Ai, Ωi) 3: if IS-LEAF(i) then 4: for all πi ∈ Πi do 5: v[πi, πi−] ← JOINT-REWARD (πi, πi−) 6: if v[πi, πi−] > threshold then 7: πi+,∗ ← πi 8: threshold ← v[πi, πi−] 9: else 10: children ← CHILDREN (i) 11: ˆΠi ← UPPER-BOUND-SORT(i, Πi, πi−) 12: for all πi ∈ ˆΠi do 13: ˜πi+ ← πi 14: if ˆv[πi, πi−] < threshold then 15: Go to line 12 16: for all j ∈ children do 17: jThres ← threshold − v[πi, πi−]− Σk∈children,k=j ˆvk[πi, πi−] 18: πj+,∗ ← SPIDER(j, πi πi−, jThres) 19: ˜πi+ ← ˜πi+ πj+,∗ 20: ˆvj[πi, πi−] ← v[πj+,∗, πi πi−] 21: if v[˜πi+, πi−] > threshold then 22: threshold ← v[˜πi+, πi−] 23: πi+,∗ ← ˜πi+ 24: return πi+,∗ Algorithm 2 UPPER-BOUND-SORT(i, Πi, πi− ) 1: children ← CHILDREN (i) 2: ˆΠi ← null /* Stores the sorted list */ 3: for all πi ∈ Πi do 4: ˆv[πi, πi−] ← JOINT-REWARD (πi, πi−) 5: for all j ∈ children do 6: ˆvj[πi, πi−] ← UPPER-BOUND(i, j, πi πi−) 7: ˆv[πi, πi−] + ← ˆvj[πi, πi−] 8: ˆΠi ← INSERT-INTO-SORTED (πi, ˆΠi) 9: return ˆΠi best expected value, joint policy in lines 21-23.",
                "Algorithm 2 provides the pseudo code for sorting policies based on the upper bounds on the expected values of joint policies.",
                "Expected value for an agent i consists of two parts: value obtained from ancestors and value obtained from its children.",
                "Line 4 computes the expected value obtained from ancestors of the agent (using JOINT-REWARD function), while lines 5-7 compute the heuristic value from the children.",
                "The sum of these two parts yields an upper bound on the expected value for agent i, and line 8 of the algorithm sorts the policies based on these upper bounds. 4.2 MDP based heuristic function The heuristic function quickly provides an upper bound on the expected value obtainable from the agents in Tree(i).",
                "The subtree of agents is a distributed POMDP in itself and the idea here is to construct a centralized MDP corresponding to the (sub-tree) distributed POMDP and obtain the expected value of the optimal policy for this centralized MDP.",
                "To reiterate this in terms of the agents in DFS tree interaction structure, we assume full observability for the agents in Tree(i) and for fixed policies of the agents in {Ancestors(i) ∪ i}, we compute the joint value ˆv[πi+ , πi− ] .",
                "We use the following notation for presenting the equations for computing upper bounds/heuristic values (for agents i and k): Let Ei− denote the set of links between agents in {Ancestors(i)∪ i} and Tree(i), Ei+ denote the set of links between agents in Tree(i).",
                "Also, if l ∈ Ei− , then l1 is the agent in {Ancestors(i)∪ i} and l2 is the agent in Tree(i), that l connects together.",
                "We first compact the standard notation: ot k =Ok(st+1 k , st+1 u , πk(ωt k), ωt+1 k ) (1) pt k =Pk(st k, st u, πk(ωt k), st+1 k ) · ot k pt u =P(st u, st+1 u ) st l = st l1 , st l2 , st u ; ωt l = ωt l1 , ωt l2 rt l =Rl(st l , πl1 (ωt l1 ), πl2 (ωt l2 )) vt l =V t πl (st l , st u, ωt l1 , ωt l2 ) Depending on the location of agent k in the agent tree we have the following cases: IF k ∈ {Ancestors(i) ∪ i}, ˆpt k = pt k, (2) IF k ∈ Tree(i), ˆpt k = Pk(st k, st u, πk(ωt k), st+1 k ) IF l ∈ Ei− , ˆrt l = max {al2 } Rl(st l , πl1 (ωt l1 ), al2 ) IF l ∈ Ei+ , ˆrt l = max {al1 ,al2 } Rl(st l , al1 , al2 ) The value function for an agent i executing the joint policy πi+ at time η − 1 is provided by the equation: V η−1 πi+ (sη−1 , ωη−1 ) = l∈Ei− vη−1 l + l∈Ei+ vη−1 l (3) where vη−1 l = rη−1 l + ω η l ,sη pη−1 l1 pη−1 l2 pη−1 u vη l Algorithm 3 UPPER-BOUND (i, j, πj− ) 1: val ← 0 2: for all l ∈ Ej− ∪ Ej+ do 3: if l ∈ Ej− then πl1 ← φ 4: for all s0 l do 5: val + ← startBel[s0 l ]· UPPER-BOUND-TIME (i, s0 l , j, πl1 , ) 6: return val Algorithm 4 UPPER-BOUND-TIME (i, st l , j, πl1 , ωt l1 ) 1: maxV al ← −∞ 2: for all al1 , al2 do 3: if l ∈ Ei− and l ∈ Ej− then al1 ← πl1 (ωt l1 ) 4: val ← GET-REWARD(st l , al1 , al2 ) 5: if t < πi.horizon − 1 then 6: for all st+1 l , ωt+1 l1 do 7: futV al←pt u ˆpt l1 ˆpt l2 8: futV al ∗ ← UPPER-BOUND-TIME(st+1 l , j, πl1 , ωt l1 ωt+1 l1 ) 9: val + ← futV al 10: if val > maxV al then maxV al ← val 11: return maxV al Upper bound on the expected value for a link is computed by modifying the equation 3 to reflect the full observability assumption.",
                "This involves removing the observational probability term for agents in Tree(i) and maximizing the future value ˆvη l over the actions of those agents (in Tree(i)).",
                "Thus, the equation for the The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 825 computation of the upper bound on a link l, is as follows: IF l ∈ Ei− , ˆvη−1 l =ˆrη−1 l + max al2 ω η l1 ,s η l ˆpη−1 l1 ˆpη−1 l2 pη−1 u ˆvη l IF l ∈ Ei+ , ˆvη−1 l =ˆrη−1 l + max al1 ,al2 s η l ˆpη−1 l1 ˆpη−1 l2 pη−1 u ˆvη l Algorithm 3 and Algorithm 4 provide the algorithm for computing upper bound for child j of agent i, using the equations descirbed above.",
                "While Algorithm 4 computes the upper bound on a link given the starting state, Algorithm 3 sums the upper bound values computed over each of the links in Ei− ∪ Ei+ . 4.3 Abstraction Algorithm 5 SPIDER-ABS(i, πi− , threshold) 1: πi+,∗ ← null 2: Πi ← GET-POLICIES (<>, 1) 3: if IS-LEAF(i) then 4: for all πi ∈ Πi do 5: absHeuristic ← GET-ABS-HEURISTIC (πi, πi−) 6: absHeuristic ∗ ← (timeHorizon − πi.horizon) 7: if πi.horizon = timeHorizon and πi.absNodes = 0 then 8: v[πi, πi−] ← JOINT-REWARD (πi, πi−) 9: if v[πi, πi−] > threshold then 10: πi+,∗ ← πi; threshold ← v[πi, πi−] 11: else if v[πi, πi−] + absHeuristic > threshold then 12: ˆΠi ← EXTEND-POLICY (πi, πi.absNodes + 1) 13: Πi + ← INSERT-SORTED-POLICIES ( ˆΠi) 14: REMOVE(πi) 15: else 16: children ← CHILDREN (i) 17: Πi ← UPPER-BOUND-SORT(i, Πi, πi−) 18: for all πi ∈ Πi do 19: ˜πi+ ← πi 20: absHeuristic ← GET-ABS-HEURISTIC (πi, πi−) 21: absHeuristic ∗ ← (timeHorizon − πi.horizon) 22: if πi.horizon = timeHorizon and πi.absNodes = 0 then 23: if ˆv[πi, πi−] < threshold and πi.absNodes = 0 then 24: Go to line 19 25: for all j ∈ children do 26: jThres ← threshold − v[πi, πi−]− Σk∈children,k=j ˆvk[πi, πi−] 27: πj+,∗ ← SPIDER(j, πi πi−, jThres) 28: ˜πi+ ← ˜πi+ πj+,∗; ˆvj[πi, πi−] ← v[πj+,∗, πi πi−] 29: if v[˜πi+, πi−] > threshold then 30: threshold ← v[˜πi+, πi−]; πi+,∗ ← ˜πi+ 31: else if ˆv[πi+, πi−] + absHeuristic > threshold then 32: ˆΠi ← EXTEND-POLICY (πi, πi.absNodes + 1) 33: Πi + ← INSERT-SORTED-POLICIES (ˆΠi) 34: REMOVE(πi) 35: return πi+,∗ In SPIDER, the exploration/pruning phase can only begin after the heuristic (or upper bound) computation and sorting for the policies has ended.",
                "We provide an approach to possibly circumvent the exploration of a group of policies based on heuristic computation for one abstract policy, thus leading to an improvement in runtime performance (without loss in solution quality).",
                "The important steps in this technique are defining the abstract policy and how heuristic values are computated for the abstract policies.",
                "In this paper, we propose two types of abstraction: 1.",
                "Horizon Based Abstraction (HBA): Here, the abstract policy is defined as a shorter horizon policy.",
                "It represents a group of longer horizon policies that have the same actions as the abstract policy for times less than or equal to the horizon of the abstract policy.",
                "In Figure 3(a), a T=1 abstract policy that performs East action, represents a group of T=2 policies, that perform East in the first time step.",
                "For HBA, there are two parts to heuristic computation: (a) Computing the upper bound for the horizon of the abstract policy.",
                "This is same as the heuristic computation defined by the GETHEURISTIC() algorithm for SPIDER, however with a shorter time horizon (horizon of the abstract policy). (b) Computing the maximum possible reward that can be accumulated in one time step (using GET-ABS-HEURISTIC()) and multiplying it by the number of time steps to time horizon.",
                "This maximum possible reward (for one time step) is obtained by iterating through all the actions of all the agents in Tree(i) and computing the maximum joint reward for any joint action.",
                "Sum of (a) and (b) is the heuristic value for a HBA abstract policy. 2.",
                "Node Based Abstraction (NBA): Here an abstract policy is obtained by not associating actions to certain nodes of the policy tree.",
                "Unlike in HBA, this implies multiple levels of abstraction.",
                "This is illustrated in Figure 3(b), where there are T=2 policies that do not have an action for observation TP.",
                "These incomplete T=2 policies are abstractions for T=2 complete policies.",
                "Increased levels of abstraction leads to faster computation of a complete joint policy, πroot+ and also to shorter heuristic computation and exploration, pruning phases.",
                "For NBA, the heuristic computation is similar to that of a normal policy, except in cases where there is no action associated with policy nodes.",
                "In such cases, the immediate reward is taken as Rmax (maximum reward for any action).",
                "We combine both the abstraction techniques mentioned above into one technique, SPIDER-ABS.",
                "Algorithm 5 provides the algorithm for this abstraction technique.",
                "For computing optimal joint policy with SPIDER-ABS, a non-leaf agent i initially examines all abstract T=1 policies (line 2) and sorts them based on abstract policy heuristic computations (line 17).",
                "The abstraction horizon is gradually increased and these abstract policies are then explored in descending order of heuristic values and ones that have heuristic values less than the threshold are pruned (lines 23-24).",
                "Exploration in SPIDER-ABS has the same definition as in SPIDER if the policy being explored has a horizon of policy computation which is equal to the actual time horizon and if all the nodes of the policy have an action associated with them (lines 25-30).",
                "However, if those conditions are not met, then it is substituted by a group of policies that it represents (using EXTEND-POLICY () function) (lines 31-32).",
                "EXTEND-POLICY() function is also responsible for initializing the horizon and absNodes of a policy. absNodes represents the number of nodes at the last level in the policy tree, that do not have an action assigned to them.",
                "If πi.absNodes = |Ωi|πi.horizon−1 (i.e. total number of policy nodes possible at πi.horizon) , then πi.absNodes is set to zero and πi.horizon is increased by 1.",
                "Otherwise, πi.absNodes is increased by 1.",
                "Thus, this function combines both HBA and NBA by using the policy variables, horizon and absNodes.",
                "Before substituting the abstract policy with a group of policies, those policies are sorted based on heuristic values (line 33).",
                "Similar type of abstraction based best response computation is adopted at leaf agents (lines 3-14). 4.4 Value ApproXimation (VAX) In this section, we present an approximate enhancement to SPIDER called VAX.",
                "The input to this technique is an approximation parameter , which determines the difference from the optimal solution quality.",
                "This approximation parameter is used at each agent for pruning out joint policies.",
                "The pruning mechanism in SPIDER and SPIDER-Abs dictates that a joint policy be pruned only if the threshold is exactly greater than the heuristic value.",
                "However, the 826 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Figure 3: Example of abstraction for (a) HBA (Horizon Based Abstraction) and (b) NBA (Node Based Abstraction) idea in this technique is to prune out joint a policy if the following condition is satisfied: threshold + > ˆv[πi , πi− ].",
                "Apart from the pruning condition, VAX is the same as SPIDER/SPIDER-ABS.",
                "In the example of Figure 2, if the heuristic value for the second joint policy (or second search tree node) in level 2 were 238 instead of 232, then that policy could not be be pruned using SPIDER or SPIDER-Abs.",
                "However, in VAX with an approximation parameter of 5, the joint policy in consideration would also be pruned.",
                "This is because the threshold (234) at that juncture plus the approximation parameter (5), i.e. 239 would have been greater than the heuristic value for that joint policy (238).",
                "It can be noted from the example (just discussed) that this kind of pruning can lead to fewer explorations and hence lead to an improvement in the overall run-time performance.",
                "However, this can entail a sacrifice in the quality of the solution because this technique can prune out a candidate optimal solution.",
                "A bound on the error introduced by this approximate algorithm as a function of , is provided by Proposition 3. 4.5 Percentage ApproXimation (PAX) In this section, we present the second approximation enhancement over SPIDER called PAX.",
                "Input to this technique is a parameter, δ that represents the minimum percentage of the optimal solution quality that is desired.",
                "Output of this technique is a policy with an expected value that is at least δ% of the optimal solution quality.",
                "A policy is pruned if the following condition is satisfied: threshold > δ 100 ˆv[πi , πi− ].",
                "Like in VAX, the only difference between PAX and SPIDER/SPIDER-ABS is this pruning condition.",
                "Again in Figure 2, if the heuristic value for the second search tree node in level 2 were 238 instead of 232, then PAX with an input parameter of 98% would be able to prune that search tree node (since 98 100 ∗238 < 234).",
                "This type of pruning leads to fewer explorations and hence an improvement in run-time performance, while potentially leading to a loss in quality of the solution.",
                "Proposition 4 provides the bound on quality loss. 4.6 Theoretical Results PROPOSITION 1.",
                "Heuristic provided using the centralized MDP heuristic is admissible.",
                "Proof.",
                "For the value provided by the heuristic to be admissible, it should be an over estimate of the expected value for a joint policy.",
                "Thus, we need to show that: For l ∈ Ei+ ∪ Ei− : ˆvt l ≥ vt l (refer to notation in Section 4.2) We use mathematical induction on t to prove this.",
                "Base case: t = T − 1.",
                "Irrespective of whether l ∈ Ei− or l ∈ Ei+ , ˆrt l is computed by maximizing over all actions of the agents in Tree(i), while rt l is computed for fixed policies of the same agents.",
                "Hence, ˆrt l ≥ rt l and also ˆvt l ≥ vt l .",
                "Assumption: Proposition holds for t = η, where 1 ≤ η < T − 1.",
                "We now have to prove that the proposition holds for t = η − 1.",
                "We show the proof for l ∈ Ei− and similar reasoning can be adopted to prove for l ∈ Ei+ .",
                "The heuristic value function for l ∈ Ei− is provided by the following equation: ˆvη−1 l =ˆrη−1 l + max al2 ω η l1 ,s η l ˆpη−1 l1 ˆpη−1 l2 pη−1 u ˆvη l Rewriting the RHS and using Eqn 2 (in Section 4.2) =ˆrη−1 l + max al2 ω η l1 ,s η l pη−1 u pη−1 l1 ˆpη−1 l2 ˆvη l =ˆrη−1 l + ω η l1 ,s η l pη−1 u pη−1 l1 max al2 ˆpη−1 l2 ˆvη l Since maxal2 ˆpη−1 l2 ˆvη l ≥ ωl2 oη−1 l2 ˆpη−1 l2 ˆvη l and pη−1 l2 = oη−1 l2 ˆpη−1 l2 ≥ˆrη−1 l + ω η l1 ,s η l pη−1 u pη−1 l1 ωl2 pη−1 l2 ˆvη l Since ˆvη l ≥ vη l (from the assumption) ≥ˆrη−1 l + ω η l1 ,s η l pη−1 u pη−1 l1 ωl2 pη−1 l2 vη l Since ˆrη−1 l ≥ rη−1 l (by definition) ≥rη−1 l + ω η l1 ,s η l pη−1 u pη−1 l1 ωl2 pη−1 l2 vη l =rη−1 l + (ω η l ,s η l ) pη−1 u pη−1 l1 pη−1 l2 vη l = vη−1 l Thus proved.",
                "PROPOSITION 2.",
                "SPIDER provides an optimal solution.",
                "Proof.",
                "SPIDER examines all possible joint policies given the interaction structure of the agents.",
                "The only exception being when a joint policy is pruned based on the heuristic value.",
                "Thus, as long as a candidate optimal policy is not pruned, SPIDER will return an optimal policy.",
                "As proved in Proposition 1, the expected value for a joint policy is always an upper bound.",
                "Hence when a joint policy is pruned, it cannot be an optimal solution.",
                "PROPOSITION 3.",
                "Error bound on the solution quality for VAX (implemented over SPIDER-ABS) with an approximation parameter of is ρ , where ρ is the number of leaf nodes in the DFS tree.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 827 Proof.",
                "We prove this proposition using mathematical induction on the depth of the DFS tree.",
                "Base case: depth = 1 (i.e. one node).",
                "Best response is computed by iterating through all policies, Πk.",
                "A policy,πk is pruned if ˆv[πk, πk− ] < threshold + .",
                "Thus the best response policy computed by VAX would be at most away from the optimal best response.",
                "Hence the proposition holds for the base case.",
                "Assumption: Proposition holds for d, where 1 ≤ depth ≤ d. We now have to prove that the proposition holds for d + 1.",
                "Without loss of generality, lets assume that the root node of this tree has k children.",
                "Each of this children is of depth ≤ d, and hence from the assumption, the error introduced in kth child is ρk , where ρk is the number of leaf nodes in kth child of the root.",
                "Therefore, ρ = k ρk, where ρ is the number of leaf nodes in the tree.",
                "In SPIDER-ABS, threshold at the root agent, thresspider = k v[πk+ , πk− ].",
                "However, with VAX the threshold at the root agent will be (in the worst case), threshvax = k v[πk+ , πk− ]− k ρk .",
                "Hence, with VAX a joint policy is pruned at the root agent if ˆv[πroot, πroot− ] < threshvax + ⇒ ˆv[πroot, πroot− ] < threshspider − (( k ρk) − 1) ≤ threshspider − ( k ρk) ≤ threshspider − ρ .",
                "Hence proved.",
                "PROPOSITION 4.",
                "For PAX (implemented over SPIDER-ABS) with an input parameter of δ, the solution quality is at least δ 100 v[πroot+,∗ ], where v[πroot+,∗ ] denotes the optimal solution quality.",
                "Proof.",
                "We prove this proposition using mathematical induction on the depth of the DFS tree.",
                "Base case: depth = 1 (i.e. one node).",
                "Best response is computed by iterating through all policies, Πk.",
                "A policy,πk is pruned if δ 100 ˆv[πk, πk− ] < threshold.",
                "Thus the best response policy computed by PAX would be at least δ 100 times the optimal best response.",
                "Hence the proposition holds for the base case.",
                "Assumption: Proposition holds for d, where 1 ≤ depth ≤ d. We now have to prove that the proposition holds for d + 1.",
                "Without loss of generality, lets assume that the root node of this tree has k children.",
                "Each of this children is of depth ≤ d, and hence from the assumption, the solution quality in the kth child is at least δ 100 v[πk+,∗ , πk− ] for PAX.",
                "With SPIDER-ABS, a joint policy is pruned at the root agent if ˆv[πroot, πroot− ] < k v[πk+,∗ , πk− ].",
                "However with PAX, a joint policy is pruned if δ 100 ˆv[πroot, πroot− ] < k δ 100 v[πk+,∗ , πk− ] ⇒ ˆv[πroot, πroot− ] < k v[πk+,∗ , πk− ].",
                "Since the pruning condition at the root agent in PAX is the same as the one in SPIDER-ABS, there is no error introduced at the root agent and all the error is introduced in the children.",
                "Thus, overall solution quality is at least δ 100 of the optimal solution.",
                "Hence proved. 5.",
                "EXPERIMENTAL RESULTS All our experiments were conducted on the sensor network domain from Section 2.",
                "The five network configurations employed are shown in Figure 4.",
                "Algorithms that we experimented with are GOA, SPIDER, SPIDER-ABS, PAX and VAX.",
                "We compare against GOA because it is the only global optimal algorithm that considers more than two agents.",
                "We performed two sets of experiments: (i) firstly, we compared the run-time performance of the above algorithms and (ii) secondly, we experimented with PAX and VAX to study the tradeoff between run-time and solution quality.",
                "Experiments were terminated after 10000 seconds1 .",
                "Figure 5(a) provides run-time comparisons between the optimal algorithms GOA, SPIDER, SPIDER-Abs and the approximate algorithms, PAX ( of 30) and VAX(δ of 80).",
                "X-axis denotes the 1 Machine specs for all experiments: Intel Xeon 3.6 GHZ processor, 2GB RAM sensor network configuration used, while Y-axis indicates the runtime (on a log-scale).",
                "The time horizon of policy computation was 3.",
                "For each configuration (3-chain, 4-chain, 4-star and 5-star), there are five bars indicating the time taken by GOA, SPIDER, SPIDERAbs, PAX and VAX.",
                "GOA did not terminate within the time limit for 4-star and 5-star configurations.",
                "SPIDER-Abs dominated the SPIDER and GOA for all the configurations.",
                "For instance, in the 3chain configuration, SPIDER-ABS provides 230-fold speedup over GOA and 2-fold speedup over SPIDER and for the 4-chain configuration it provides 58-fold speedup over GOA and 2-fold speedup over SPIDER.",
                "The two approximation approaches, VAX and PAX provided further improvement in performance over SPIDER-Abs.",
                "For instance, in the 5-star configuration VAX provides a 15-fold speedup and PAX provides a 8-fold speedup over SPIDER-Abs.",
                "Figures 5(b) provides a comparison of the solution quality obtained using the different algorithms for the problems tested in Figure 5(a).",
                "X-axis denotes the sensor network configuration while Y-axis indicates the solution quality.",
                "Since GOA, SPIDER, and SPIDER-Abs are all global optimal algorithms, the solution quality is the same for all those algorithms.",
                "For 5-P configuration, the global optimal algorithms did not terminate within the limit of 10000 seconds, so the bar for optimal quality indicates an upper bound on the optimal solution quality.",
                "With both the approximations, we obtained a solution quality that was close to the optimal solution quality.",
                "In 3-chain and 4-star configurations, it is remarkable that both PAX and VAX obtained almost the same actual quality as the global optimal algorithms, despite the approximation parameter and δ.",
                "For other configurations as well, the loss in quality was less than 20% of the optimal solution quality.",
                "Figure 5(c) provides the time to solution with PAX (for varying epsilons).",
                "X-axis denotes the approximation parameter, δ (percentage to optimal) used, while Y-axis denotes the time taken to compute the solution (on a log-scale).",
                "The time horizon for all the configurations was 4.",
                "As δ was decreased from 70 to 30, the time to solution decreased drastically.",
                "For instance, in the 3-chain case there was a total speedup of 170-fold when the δ was changed from 70 to 30.",
                "Interestingly, even with a low δ of 30%, the actual solution quality remained equal to the one obtained at 70%.",
                "Figure 5(d) provides the time to solution for all the configurations with VAX (for varying epsilons).",
                "X-axis denotes the approximation parameter, used, while Y-axis denotes the time taken to compute the solution (on a log-scale).",
                "The time horizon for all the configurations was 4.",
                "As was increased, the time to solution decreased drastically.",
                "For instance, in the 4-star case there was a total speedup of 73-fold when the was changed from 60 to 140.",
                "Again, the actual solution quality did not change with varying epsilon.",
                "Figure 4: Sensor network configurations 828 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Figure 5: Comparison of GOA, SPIDER, SPIDER-Abs and VAX for T = 3 on (a) Runtime and (b) Solution quality; (c) Time to solution for PAX with varying percentage to optimal for T=4 (d) Time to solution for VAX with varying epsilon for T=4 6.",
                "SUMMARY AND RELATED WORK This paper presents four algorithms SPIDER, SPIDER-ABS, PAX and VAX that provide a novel combination of features for policy search in distributed POMDPs: (i) exploiting <br>agent interaction structure</br> given a network of agents (i.e. easier scale-up to larger number of agents); (ii) using branch and bound search with an MDP based heuristic function; (iii) utilizing abstraction to improve runtime performance without sacrificing solution quality; (iv) providing a priori percentage bounds on quality of solutions using PAX; and (v) providing expected value bounds on the quality of solutions using VAX.",
                "These features allow for systematic tradeoff of solution quality for run-time in networks of agents operating under uncertainty.",
                "Experimental results show orders of magnitude improvement in performance over previous global optimal algorithms.",
                "Researchers have typically employed two types of techniques for solving distributed POMDPs.",
                "The first set of techniques compute global optimal solutions.",
                "Hansen et al. [5] present an algorithm based on dynamic programming and iterated elimination of dominant policies, that provides optimal solutions for distributed POMDPs.",
                "Szer et al. [13] provide an optimal heuristic search method for solving Decentralized POMDPs.",
                "This algorithm is based on the combination of a classical heuristic search algorithm, A∗ and decentralized control theory.",
                "The key differences between SPIDER and MAA* are: (a) Enhancements to SPIDER (VAX and PAX) provide for quality guaranteed approximations, while MAA* is a global optimal algorithm and hence involves significant computational complexity; (b) Due to MAA*s inability to exploit interaction structure, it was illustrated only with two agents.",
                "However, SPIDER has been illustrated for networks of agents; and (c) SPIDER explores the joint policy one agent at a time, while MAA* expands it one time step at a time (simultaneously for all the agents).",
                "The second set of techniques seek approximate policies.",
                "EmeryMontemerlo et al. [4] approximate POSGs as a series of one-step Bayesian games using heuristics to approximate future value, trading off limited lookahead for computational efficiency, resulting in locally optimal policies (with respect to the selected heuristic).",
                "Nair et al. [9]s JESP algorithm uses dynamic programming to reach a local optimum solution for finite horizon decentralized POMDPs.",
                "Peshkin et al. [11] and Bernstein et al. [2] are examples of policy search techniques that search for locally optimal policies.",
                "Though all the above techniques improve the efficiency of policy computation considerably, they are unable to provide error bounds on the quality of the solution.",
                "This aspect of quality bounds differentiates SPIDER from all the above techniques.",
                "Acknowledgements.",
                "This material is based upon work supported by the Defense Advanced Research Projects Agency (DARPA), through the Department of the Interior, NBC, Acquisition Services Division under Contract No.",
                "NBCHD030010.",
                "The views and conclusions contained in this document are those of the authors, and should not be interpreted as representing the official policies, either expressed or implied, of the Defense Advanced Research Projects Agency or the U.S. Government. 7.",
                "REFERENCES [1] R. Becker, S. Zilberstein, V. Lesser, and C.V. Goldman.",
                "Solving transition independent decentralized Markov decision processes.",
                "JAIR, 22:423-455, 2004. [2] D. S. Bernstein, E.A.",
                "Hansen, and S. Zilberstein.",
                "Bounded policy iteration for decentralized POMDPs.",
                "In IJCAI, 2005. [3] D. S. Bernstein, S. Zilberstein, and N. Immerman.",
                "The complexity of decentralized control of MDPs.",
                "In UAI, 2000. [4] R. Emery-Montemerlo, G. Gordon, J. Schneider, and S. Thrun.",
                "Approximate solutions for partially observable stochastic games with common payoffs.",
                "In AAMAS, 2004. [5] E. Hansen, D. Bernstein, and S. Zilberstein.",
                "Dynamic programming for partially observable stochastic games.",
                "In AAAI, 2004. [6] V. Lesser, C. Ortiz, and M. Tambe.",
                "Distributed sensor nets: A multiagent perspective.",
                "Kluwer, 2003. [7] R. Maheswaran, M. Tambe, E. Bowring, J. Pearce, and P. Varakantham.",
                "Taking dcop to the real world : Efficient complete solutions for distributed event scheduling.",
                "In AAMAS, 2004. [8] P. J. Modi, W. Shen, M. Tambe, and M. Yokoo.",
                "An asynchronous complete method for distributed constraint optimization.",
                "In AAMAS, 2003. [9] R. Nair, D. Pynadath, M. Yokoo, M. Tambe, and S. Marsella.",
                "Taming decentralized POMDPs: Towards efficient policy computation for multiagent settings.",
                "In IJCAI, 2003. [10] R. Nair, P. Varakantham, M. Tambe, and M. Yokoo.",
                "Networked distributed POMDPs: A synthesis of distributed constraint optimization and POMDPs.",
                "In AAAI, 2005. [11] L. Peshkin, N. Meuleau, K.-E. Kim, and L. Kaelbling.",
                "Learning to cooperate via policy search.",
                "In UAI, 2000. [12] A. Petcu and B. Faltings.",
                "A scalable method for multiagent constraint optimization.",
                "In IJCAI, 2005. [13] D. Szer, F. Charpillet, and S. Zilberstein.",
                "MAA*: A heuristic search algorithm for solving decentralized POMDPs.",
                "In IJCAI, 2005.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 829"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Este documento supera las limitaciones de ambos enfoques al proporcionar araña, una nueva combinación de tres características clave para la generación de políticas en POMDP distribuidos: (i) explota la \"estructura de interacción de los agentes\" dada una red de agentes (es decirmayor número de agentes);(ii) Utiliza una combinación de heurísticas para la búsqueda de políticas aceleradas;y (iii) permite aproximaciones garantizadas de calidad, lo que permite una compensación sistemática de calidad de solución para el tiempo.",
                "Resumen y trabajo relacionado Este documento presenta cuatro algoritmos Spider, Spider-ABS, Pax y Vax que proporcionan una nueva combinación de características para la búsqueda de políticas en POMDP distribuidos: (i) Explotación de la \"estructura de interacción de agentes\" dada una red de agentes (es decir, más fácil escala a escala de escala a escala-Pole a un mayor número de agentes);(ii) usar la búsqueda de rama y unión con una función heurística basada en MDP;(iii) utilizar la abstracción para mejorar el rendimiento del tiempo de ejecución sin sacrificar la calidad de la solución;(iv) proporcionar límites de porcentaje a priori en la calidad de las soluciones con PAX;y (v) proporcionar límites de valor esperados en la calidad de las soluciones utilizando VAX."
            ],
            "translated_text": "",
            "candidates": [
                "estructura de interacción de agente",
                "estructura de interacción de los agentes",
                "estructura de interacción de agente",
                "estructura de interacción de agentes"
            ],
            "error": []
        },
        "network of agent": {
            "translated_key": "",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Letting loose a SPIDER on a network of POMDPs: Generating quality guaranteed policies Pradeep Varakantham, Janusz Marecki, Yuichi Yabu∗ , Milind Tambe, Makoto Yokoo∗ University of Southern California, Los Angeles, CA 90089, {varakant, marecki, tambe}@usc.edu ∗ Dept.",
                "of Intelligent Systems, Kyushu University, Fukuoka, 812-8581 Japan, yokoo@is.kyushu-u.ac.jp ABSTRACT Distributed Partially Observable Markov Decision Problems (Distributed POMDPs) are a popular approach for modeling multi-agent systems acting in uncertain domains.",
                "Given the significant complexity of solving distributed POMDPs, particularly as we scale up the numbers of agents, one popular approach has focused on approximate solutions.",
                "Though this approach is efficient, the algorithms within this approach do not provide any guarantees on solution quality.",
                "A second less popular approach focuses on global optimality, but typical results are available only for two agents, and also at considerable computational cost.",
                "This paper overcomes the limitations of both these approaches by providing SPIDER, a novel combination of three key features for policy generation in distributed POMDPs: (i) it exploits agent interaction structure given a <br>network of agent</br>s (i.e. allowing easier scale-up to larger number of agents); (ii) it uses a combination of heuristics to speedup policy search; and (iii) it allows quality guaranteed approximations, allowing a systematic tradeoff of solution quality for time.",
                "Experimental results show orders of magnitude improvement in performance when compared with previous global optimal algorithms.",
                "Categories and Subject Descriptors I.2.11 [Artificial Intelligence]: Distributed Artificial IntelligenceMulti-agent Systems General Terms Algorithms, Theory 1.",
                "INTRODUCTION Distributed Partially Observable Markov Decision Problems (Distributed POMDPs) are emerging as a popular approach for modeling sequential decision making in teams operating under uncertainty [9, 4, 1, 2, 13].",
                "The uncertainty arises on account of nondeterminism in the outcomes of actions and because the world state may only be partially (or incorrectly) observable.",
                "Unfortunately, as shown by Bernstein et al. [3], the problem of finding the optimal joint policy for general distributed POMDPs is NEXP-Complete.",
                "Researchers have attempted two different types of approaches towards solving these models.",
                "The first category consists of highly efficient approximate techniques, that may not reach globally optimal solutions [2, 9, 11].",
                "The key problem with these techniques has been their inability to provide any guarantees on the quality of the solution.",
                "In contrast, the second less popular category of approaches has focused on a global optimal result [13, 5, 10].",
                "Though these approaches obtain optimal solutions, they typically consider only two agents.",
                "Furthermore, they fail to exploit structure in the interactions of the agents and hence are severely hampered with respect to scalability when considering more than two agents.",
                "To address these problems with the existing approaches, we propose approximate techniques that provide guarantees on the quality of the solution while focussing on a network of more than two agents.",
                "We first propose the basic SPIDER (Search for Policies In Distributed EnviRonments) algorithm.",
                "There are two key novel features in SPIDER: (i) it is a branch and bound heuristic search technique that uses a MDP-based heuristic function to search for an optimal joint policy; (ii) it exploits network structure of agents by organizing agents into a Depth First Search (DFS) pseudo tree and takes advantage of the independence in the different branches of the DFS tree.",
                "We then provide three enhancements to improve the efficiency of the basic SPIDER algorithm while providing guarantees on the quality of the solution.",
                "The first enhancement uses abstractions for speedup, but does not sacrifice solution quality.",
                "In particular, it initially performs branch and bound search on abstract policies and then extends to complete policies.",
                "The second enhancement obtains speedups by sacrificing solution quality, but within an input parameter that provides the tolerable expected value difference from the optimal solution.",
                "The third enhancement is again based on bounding the search for efficiency, however with a tolerance parameter that is provided as a percentage of optimal.",
                "We experimented with the sensor network domain presented in Nair et al. [10], a domain representative of an important class of problems with networks of agents working in uncertain environments.",
                "In our experiments, we illustrate that SPIDER dominates an existing global optimal approach called GOA [10], the only known global optimal algorithm with demonstrated experimental results for more than two agents.",
                "Furthermore, we demonstrate that abstraction improves the performance of SPIDER significantly (while providing optimal solutions).",
                "We finally demonstrate a key feature of SPIDER: by utilizing the approximation enhancements it enables principled tradeoffs in run-time versus solution quality. 822 978-81-904262-7-5 (RPS) c 2007 IFAAMAS 2.",
                "DOMAIN: DISTRIBUTED SENSOR NETS Distributed sensor networks are a large, important class of domains that motivate our work.",
                "This paper focuses on a set of target tracking problems that arise in certain types of sensor networks [6] first introduced in [10].",
                "Figure 1 shows a specific problem instance within this type consisting of three sensors.",
                "Here, each sensor node can scan in one of four directions: North, South, East or West (see Figure 1).",
                "To track a target and obtain associated reward, two sensors with overlapping scanning areas must coordinate by scanning the same area simultaneously.",
                "In Figure 1, to track a target in Loc11, sensor1 needs to scan East and sensor2 needs to scan West simultaneously.",
                "Thus, sensors have to act in a coordinated fashion.",
                "We assume that there are two independent targets and that each targets movement is uncertain and unaffected by the sensor agents.",
                "Based on the area it is scanning, each sensor receives observations that can have false positives and false negatives.",
                "The sensors observations and transitions are independent of each others actions e.g.the observations that sensor1 receives are independent of sensor2s actions.",
                "Each agent incurs a cost for scanning whether the target is present or not, but no cost if it turns off.",
                "Given the sensors observational uncertainty, the targets uncertain transitions and the distributed nature of the sensor nodes, these sensor nets provide a useful domains for applying distributed POMDP models.",
                "Figure 1: A 3-chain sensor configuration 3.",
                "BACKGROUND 3.1 Model: Network Distributed POMDP The ND-POMDP model was introduced in [10], motivated by domains such as the sensor networks introduced in Section 2.",
                "It is defined as the tuple S, A, P, Ω, O, R, b , where S = ×1≤i≤nSi × Su is the set of world states.",
                "Si refers to the set of local states of agent i and Su is the set of unaffectable states.",
                "Unaffectable state refers to that part of the world state that cannot be affected by the agents actions, e.g. environmental factors like target locations that no agent can control.",
                "A = ×1≤i≤nAi is the set of joint actions, where Ai is the set of action for agent i. ND-POMDP assumes transition independence, where the transition function is defined as P(s, a, s ) = Pu(su, su) · 1≤i≤n Pi(si, su, ai, si), where a = a1, . . . , an is the joint action performed in state s = s1, . . . , sn, su and s = s1, . . . , sn, su is the resulting state.",
                "Ω = ×1≤i≤nΩi is the set of joint observations where Ωi is the set of observations for agents i. Observational independence is assumed in ND-POMDPs i.e., the joint observation function is defined as O(s, a, ω) = 1≤i≤n Oi(si, su, ai, ωi), where s = s1, . . . , sn, su is the world state that results from the agents performing a = a1, . . . , an in the previous state, and ω = ω1, . . . , ωn ∈ Ω is the observation received in state s. This implies that each agents observation depends only on the unaffectable state, its local action and on its resulting local state.",
                "The reward function, R, is defined as R(s, a) = l Rl(sl1, . . . , slr, su, al1, . . . , alr ), where each l could refer to any sub-group of agents and r = |l|.",
                "Based on the reward function, an interaction hypergraph is constructed.",
                "A hyper-link, l, exists between a subset of agents for all Rl that comprise R. The interaction hypergraph is defined as G = (Ag, E), where the agents, Ag, are the vertices and E = {l|l ⊆ Ag ∧ Rl is a component of R} are the edges.",
                "The initial belief state (distribution over the initial state), b, is defined as b(s) = bu(su) · 1≤i≤n bi(si), where bu and bi refer to the distribution over initial unaffectable state and agent is initial belief state, respectively.",
                "The goal in ND-POMDP is to compute the joint policy π = π1, . . . , πn that maximizes teams expected reward over a finite horizon T starting from the belief state b.",
                "An ND-POMDP is similar to an n-ary Distributed Constraint Optimization Problem (DCOP)[8, 12] where the variable at each node represents the policy selected by an individual agent, πi with the domain of the variable being the set of all local policies, Πi.",
                "The reward component Rl where |l| = 1 can be thought of as a local constraint while the reward component Rl where l > 1 corresponds to a non-local constraint in the constraint graph. 3.2 Algorithm: Global Optimal Algorithm (GOA) In previous work, GOA has been defined as a global optimal algorithm for ND-POMDPs [10].",
                "We will use GOA in our experimental comparisons, since GOA is a state-of-the-art global optimal algorithm, and in fact the only one with experimental results available for networks of more than two agents.",
                "GOA borrows from a global optimal DCOP algorithm called DPOP[12].",
                "GOAs message passing follows that of DPOP.",
                "The first phase is the UTIL propagation, where the utility messages, in this case values of policies, are passed up from the leaves to the root.",
                "Value for a policy at an agent is defined as the sum of best response values from its children and the joint policy reward associated with the parent policy.",
                "Thus, given a policy for a parent node, GOA requires an agent to iterate through all its policies, finding the best response policy and returning the value to the parent - while at the parent node, to find the best policy, an agent requires its children to return their best responses to each of its policies.",
                "This UTIL propagation process is repeated at each level in the tree, until the root exhausts all its policies.",
                "In the second phase of VALUE propagation, where the optimal policies are passed down from the root till the leaves.",
                "GOA takes advantage of the local interactions in the interaction graph, by pruning out unnecessary joint policy evaluations (associated with nodes not connected directly in the tree).",
                "Since the interaction graph captures all the reward interactions among agents and as this algorithm iterates through all the relevant joint policy evaluations, this algorithm yields a globally optimal solution. 4.",
                "SPIDER As mentioned in Section 3.1, an ND-POMDP can be treated as a DCOP, where the goal is to compute a joint policy that maximizes the overall joint reward.",
                "The brute-force technique for computing an optimal policy would be to examine the expected values for all possible joint policies.",
                "The key idea in SPIDER is to avoid computation of expected values for the entire space of joint policies, by utilizing upper bounds on the expected values of policies and the interaction structure of the agents.",
                "Akin to some of the algorithms for DCOP [8, 12], SPIDER has a pre-processing step that constructs a DFS tree corresponding to the given interaction structure.",
                "Note that these DFS trees are pseudo trees [12] that allow links between ancestors and children.",
                "We employ the Maximum Constrained Node (MCN) heuristic used in the DCOP algorithm, ADOPT [8], however other heuristics (such as MLSP heuristic from [7]) can also be employed.",
                "MCN heuristic tries to place agents with more number of constraints at the top of the tree.",
                "This tree governs how the search for the optimal joint polThe Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 823 icy proceeds in SPIDER.",
                "The algorithms presented in this paper are easily extendable to hyper-trees, however for expository purposes, we assume binary trees.",
                "SPIDER is an algorithm for centralized planning and distributed execution in distributed POMDPs.",
                "In this paper, we employ the following notation to denote policies and expected values: Ancestors(i) ⇒ agents from i to the root (not including i).",
                "Tree(i) ⇒ agents in the sub-tree (not including i) for which i is the root. πroot+ ⇒ joint policy of all agents. πi+ ⇒ joint policy of all agents in Tree(i) ∪ i. πi− ⇒ joint policy of agents that are in Ancestors(i). πi ⇒ policy of the ith agent. ˆv[πi, πi− ] ⇒ upper bound on the expected value for πi+ given πi and policies of ancestor agents i.e. πi− . ˆvj[πi, πi− ] ⇒ upper bound on the expected value for πi+ from the jth child. v[πi, πi− ] ⇒ expected value for πi given policies of ancestor agents, πi− . v[πi+ , πi− ] ⇒ expected value for πi+ given policies of ancestor agents, πi− . vj[πi+ , πi− ] ⇒ expected value for πi+ from the jth child.",
                "Figure 2: Execution of SPIDER, an example 4.1 Outline of SPIDER SPIDER is based on the idea of branch and bound search, where the nodes in the search tree represent partial/complete joint policies.",
                "Figure 2 shows an example search tree for the SPIDER algorithm, using an example of the three agent chain.",
                "Before SPIDER begins its search we create a DFS tree (i.e. pseudo tree) from the three agent chain, with the middle agent as the root of this tree.",
                "SPIDER exploits the structure of this DFS tree while engaging in its search.",
                "Note that in our example figure, each agent is assigned a policy with T=2.",
                "Thus, each rounded rectange (search tree node) indicates a partial/complete joint policy, a rectangle indicates an agent and the ovals internal to an agent show its policy.",
                "Heuristic or actual expected value for a joint policy is indicated in the top right corner of the rounded rectangle.",
                "If the number is italicized and underlined, it implies that the actual expected value of the joint policy is provided.",
                "SPIDER begins with no policy assigned to any of the agents (shown in the level 1 of the search tree).",
                "Level 2 of the search tree indicates that the joint policies are sorted based on upper bounds computed for root agents policies.",
                "Level 3 shows one SPIDER search node with a complete joint policy (a policy assigned to each of the agents).",
                "The expected value for this joint policy is used to prune out the nodes in level 2 (the ones with upper bounds < 234) When creating policies for each non-leaf agent i, SPIDER potentially performs two steps: 1.",
                "Obtaining upper bounds and sorting: In this step, agent i computes upper bounds on the expected values, ˆv[πi, πi− ] of the joint policies πi+ corresponding to each of its policy πi and fixed ancestor policies.",
                "An MDP based heuristic is used to compute these upper bounds on the expected values.",
                "Detailed description about this MDP heuristic is provided in Section 4.2.",
                "All policies of agent i, Πi are then sorted based on these upper bounds (also referred to as heuristic values henceforth) in descending order.",
                "Exploration of these policies (in step 2 below) are performed in this descending order.",
                "As indicated in the level 2 of the search tree (of Figure 2), all the joint policies are sorted based on the heuristic values, indicated in the top right corner of each joint policy.",
                "The intuition behind sorting and then exploring policies in descending order of upper bounds, is that the policies with higher upper bounds could yield joint policies with higher expected values. 2.",
                "Exploration and Pruning: Exploration implies computing the best response joint policy πi+,∗ corresponding to fixed ancestor policies of agent i, πi− .",
                "This is performed by iterating through all policies of agent i i.e.",
                "Πi and summing two quantities for each policy: (i) the best response for all of is children (obtained by performing steps 1 and 2 at each of the child nodes); (ii) the expected value obtained by i for fixed policies of ancestors.",
                "Thus, exploration of a policy πi yields actual expected value of a joint policy, πi+ represented as v[πi+ , πi− ].",
                "The policy with the highest expected value is the best response policy.",
                "Pruning refers to avoiding exploring all policies (or computing expected values) at agent i by using the current best expected value, vmax [πi+ , πi− ].",
                "Henceforth, this vmax [πi+ , πi− ] will be referred to as threshold.",
                "A policy, πi need not be explored if the upper bound for that policy, ˆv[πi, πi− ] is less than the threshold.",
                "This is because the expected value for the best joint policy attainable for that policy will be less than the threshold.",
                "On the other hand, when considering a leaf agent, SPIDER computes the best response policy (and consequently its expected value) corresponding to fixed policies of its ancestors, πi− .",
                "This is accomplished by computing expected values for each of the policies (corresponding to fixed policies of ancestors) and selecting the highest expected value policy.",
                "In Figure 2, SPIDER assigns best response policies to leaf agents at level 3.",
                "The policy for the left leaf agent is to perform action East at each time step in the policy, while the policy for the right leaf agent is to perform Off at each time step.",
                "These best response policies from the leaf agents yield an actual expected value of 234 for the complete joint policy.",
                "Algorithm 1 provides the pseudo code for SPIDER.",
                "This algorithm outputs the best joint policy, πi+,∗ (with an expected value greater than threshold) for the agents in Tree(i).",
                "Lines 3-8 compute the best response policy of a leaf agent i, while lines 9-23 computes the best response joint policy for agents in Tree(i).",
                "This best response computation for a non-leaf agent i includes: (a) Sorting of policies (in descending order) based on heuristic values on line 11; (b) Computing best response policies at each of the children for fixed policies of agent i in lines 16-20; and (c) Maintaining 824 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Algorithm 1 SPIDER(i, πi− , threshold) 1: πi+,∗ ← null 2: Πi ← GET-ALL-POLICIES (horizon, Ai, Ωi) 3: if IS-LEAF(i) then 4: for all πi ∈ Πi do 5: v[πi, πi−] ← JOINT-REWARD (πi, πi−) 6: if v[πi, πi−] > threshold then 7: πi+,∗ ← πi 8: threshold ← v[πi, πi−] 9: else 10: children ← CHILDREN (i) 11: ˆΠi ← UPPER-BOUND-SORT(i, Πi, πi−) 12: for all πi ∈ ˆΠi do 13: ˜πi+ ← πi 14: if ˆv[πi, πi−] < threshold then 15: Go to line 12 16: for all j ∈ children do 17: jThres ← threshold − v[πi, πi−]− Σk∈children,k=j ˆvk[πi, πi−] 18: πj+,∗ ← SPIDER(j, πi πi−, jThres) 19: ˜πi+ ← ˜πi+ πj+,∗ 20: ˆvj[πi, πi−] ← v[πj+,∗, πi πi−] 21: if v[˜πi+, πi−] > threshold then 22: threshold ← v[˜πi+, πi−] 23: πi+,∗ ← ˜πi+ 24: return πi+,∗ Algorithm 2 UPPER-BOUND-SORT(i, Πi, πi− ) 1: children ← CHILDREN (i) 2: ˆΠi ← null /* Stores the sorted list */ 3: for all πi ∈ Πi do 4: ˆv[πi, πi−] ← JOINT-REWARD (πi, πi−) 5: for all j ∈ children do 6: ˆvj[πi, πi−] ← UPPER-BOUND(i, j, πi πi−) 7: ˆv[πi, πi−] + ← ˆvj[πi, πi−] 8: ˆΠi ← INSERT-INTO-SORTED (πi, ˆΠi) 9: return ˆΠi best expected value, joint policy in lines 21-23.",
                "Algorithm 2 provides the pseudo code for sorting policies based on the upper bounds on the expected values of joint policies.",
                "Expected value for an agent i consists of two parts: value obtained from ancestors and value obtained from its children.",
                "Line 4 computes the expected value obtained from ancestors of the agent (using JOINT-REWARD function), while lines 5-7 compute the heuristic value from the children.",
                "The sum of these two parts yields an upper bound on the expected value for agent i, and line 8 of the algorithm sorts the policies based on these upper bounds. 4.2 MDP based heuristic function The heuristic function quickly provides an upper bound on the expected value obtainable from the agents in Tree(i).",
                "The subtree of agents is a distributed POMDP in itself and the idea here is to construct a centralized MDP corresponding to the (sub-tree) distributed POMDP and obtain the expected value of the optimal policy for this centralized MDP.",
                "To reiterate this in terms of the agents in DFS tree interaction structure, we assume full observability for the agents in Tree(i) and for fixed policies of the agents in {Ancestors(i) ∪ i}, we compute the joint value ˆv[πi+ , πi− ] .",
                "We use the following notation for presenting the equations for computing upper bounds/heuristic values (for agents i and k): Let Ei− denote the set of links between agents in {Ancestors(i)∪ i} and Tree(i), Ei+ denote the set of links between agents in Tree(i).",
                "Also, if l ∈ Ei− , then l1 is the agent in {Ancestors(i)∪ i} and l2 is the agent in Tree(i), that l connects together.",
                "We first compact the standard notation: ot k =Ok(st+1 k , st+1 u , πk(ωt k), ωt+1 k ) (1) pt k =Pk(st k, st u, πk(ωt k), st+1 k ) · ot k pt u =P(st u, st+1 u ) st l = st l1 , st l2 , st u ; ωt l = ωt l1 , ωt l2 rt l =Rl(st l , πl1 (ωt l1 ), πl2 (ωt l2 )) vt l =V t πl (st l , st u, ωt l1 , ωt l2 ) Depending on the location of agent k in the agent tree we have the following cases: IF k ∈ {Ancestors(i) ∪ i}, ˆpt k = pt k, (2) IF k ∈ Tree(i), ˆpt k = Pk(st k, st u, πk(ωt k), st+1 k ) IF l ∈ Ei− , ˆrt l = max {al2 } Rl(st l , πl1 (ωt l1 ), al2 ) IF l ∈ Ei+ , ˆrt l = max {al1 ,al2 } Rl(st l , al1 , al2 ) The value function for an agent i executing the joint policy πi+ at time η − 1 is provided by the equation: V η−1 πi+ (sη−1 , ωη−1 ) = l∈Ei− vη−1 l + l∈Ei+ vη−1 l (3) where vη−1 l = rη−1 l + ω η l ,sη pη−1 l1 pη−1 l2 pη−1 u vη l Algorithm 3 UPPER-BOUND (i, j, πj− ) 1: val ← 0 2: for all l ∈ Ej− ∪ Ej+ do 3: if l ∈ Ej− then πl1 ← φ 4: for all s0 l do 5: val + ← startBel[s0 l ]· UPPER-BOUND-TIME (i, s0 l , j, πl1 , ) 6: return val Algorithm 4 UPPER-BOUND-TIME (i, st l , j, πl1 , ωt l1 ) 1: maxV al ← −∞ 2: for all al1 , al2 do 3: if l ∈ Ei− and l ∈ Ej− then al1 ← πl1 (ωt l1 ) 4: val ← GET-REWARD(st l , al1 , al2 ) 5: if t < πi.horizon − 1 then 6: for all st+1 l , ωt+1 l1 do 7: futV al←pt u ˆpt l1 ˆpt l2 8: futV al ∗ ← UPPER-BOUND-TIME(st+1 l , j, πl1 , ωt l1 ωt+1 l1 ) 9: val + ← futV al 10: if val > maxV al then maxV al ← val 11: return maxV al Upper bound on the expected value for a link is computed by modifying the equation 3 to reflect the full observability assumption.",
                "This involves removing the observational probability term for agents in Tree(i) and maximizing the future value ˆvη l over the actions of those agents (in Tree(i)).",
                "Thus, the equation for the The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 825 computation of the upper bound on a link l, is as follows: IF l ∈ Ei− , ˆvη−1 l =ˆrη−1 l + max al2 ω η l1 ,s η l ˆpη−1 l1 ˆpη−1 l2 pη−1 u ˆvη l IF l ∈ Ei+ , ˆvη−1 l =ˆrη−1 l + max al1 ,al2 s η l ˆpη−1 l1 ˆpη−1 l2 pη−1 u ˆvη l Algorithm 3 and Algorithm 4 provide the algorithm for computing upper bound for child j of agent i, using the equations descirbed above.",
                "While Algorithm 4 computes the upper bound on a link given the starting state, Algorithm 3 sums the upper bound values computed over each of the links in Ei− ∪ Ei+ . 4.3 Abstraction Algorithm 5 SPIDER-ABS(i, πi− , threshold) 1: πi+,∗ ← null 2: Πi ← GET-POLICIES (<>, 1) 3: if IS-LEAF(i) then 4: for all πi ∈ Πi do 5: absHeuristic ← GET-ABS-HEURISTIC (πi, πi−) 6: absHeuristic ∗ ← (timeHorizon − πi.horizon) 7: if πi.horizon = timeHorizon and πi.absNodes = 0 then 8: v[πi, πi−] ← JOINT-REWARD (πi, πi−) 9: if v[πi, πi−] > threshold then 10: πi+,∗ ← πi; threshold ← v[πi, πi−] 11: else if v[πi, πi−] + absHeuristic > threshold then 12: ˆΠi ← EXTEND-POLICY (πi, πi.absNodes + 1) 13: Πi + ← INSERT-SORTED-POLICIES ( ˆΠi) 14: REMOVE(πi) 15: else 16: children ← CHILDREN (i) 17: Πi ← UPPER-BOUND-SORT(i, Πi, πi−) 18: for all πi ∈ Πi do 19: ˜πi+ ← πi 20: absHeuristic ← GET-ABS-HEURISTIC (πi, πi−) 21: absHeuristic ∗ ← (timeHorizon − πi.horizon) 22: if πi.horizon = timeHorizon and πi.absNodes = 0 then 23: if ˆv[πi, πi−] < threshold and πi.absNodes = 0 then 24: Go to line 19 25: for all j ∈ children do 26: jThres ← threshold − v[πi, πi−]− Σk∈children,k=j ˆvk[πi, πi−] 27: πj+,∗ ← SPIDER(j, πi πi−, jThres) 28: ˜πi+ ← ˜πi+ πj+,∗; ˆvj[πi, πi−] ← v[πj+,∗, πi πi−] 29: if v[˜πi+, πi−] > threshold then 30: threshold ← v[˜πi+, πi−]; πi+,∗ ← ˜πi+ 31: else if ˆv[πi+, πi−] + absHeuristic > threshold then 32: ˆΠi ← EXTEND-POLICY (πi, πi.absNodes + 1) 33: Πi + ← INSERT-SORTED-POLICIES (ˆΠi) 34: REMOVE(πi) 35: return πi+,∗ In SPIDER, the exploration/pruning phase can only begin after the heuristic (or upper bound) computation and sorting for the policies has ended.",
                "We provide an approach to possibly circumvent the exploration of a group of policies based on heuristic computation for one abstract policy, thus leading to an improvement in runtime performance (without loss in solution quality).",
                "The important steps in this technique are defining the abstract policy and how heuristic values are computated for the abstract policies.",
                "In this paper, we propose two types of abstraction: 1.",
                "Horizon Based Abstraction (HBA): Here, the abstract policy is defined as a shorter horizon policy.",
                "It represents a group of longer horizon policies that have the same actions as the abstract policy for times less than or equal to the horizon of the abstract policy.",
                "In Figure 3(a), a T=1 abstract policy that performs East action, represents a group of T=2 policies, that perform East in the first time step.",
                "For HBA, there are two parts to heuristic computation: (a) Computing the upper bound for the horizon of the abstract policy.",
                "This is same as the heuristic computation defined by the GETHEURISTIC() algorithm for SPIDER, however with a shorter time horizon (horizon of the abstract policy). (b) Computing the maximum possible reward that can be accumulated in one time step (using GET-ABS-HEURISTIC()) and multiplying it by the number of time steps to time horizon.",
                "This maximum possible reward (for one time step) is obtained by iterating through all the actions of all the agents in Tree(i) and computing the maximum joint reward for any joint action.",
                "Sum of (a) and (b) is the heuristic value for a HBA abstract policy. 2.",
                "Node Based Abstraction (NBA): Here an abstract policy is obtained by not associating actions to certain nodes of the policy tree.",
                "Unlike in HBA, this implies multiple levels of abstraction.",
                "This is illustrated in Figure 3(b), where there are T=2 policies that do not have an action for observation TP.",
                "These incomplete T=2 policies are abstractions for T=2 complete policies.",
                "Increased levels of abstraction leads to faster computation of a complete joint policy, πroot+ and also to shorter heuristic computation and exploration, pruning phases.",
                "For NBA, the heuristic computation is similar to that of a normal policy, except in cases where there is no action associated with policy nodes.",
                "In such cases, the immediate reward is taken as Rmax (maximum reward for any action).",
                "We combine both the abstraction techniques mentioned above into one technique, SPIDER-ABS.",
                "Algorithm 5 provides the algorithm for this abstraction technique.",
                "For computing optimal joint policy with SPIDER-ABS, a non-leaf agent i initially examines all abstract T=1 policies (line 2) and sorts them based on abstract policy heuristic computations (line 17).",
                "The abstraction horizon is gradually increased and these abstract policies are then explored in descending order of heuristic values and ones that have heuristic values less than the threshold are pruned (lines 23-24).",
                "Exploration in SPIDER-ABS has the same definition as in SPIDER if the policy being explored has a horizon of policy computation which is equal to the actual time horizon and if all the nodes of the policy have an action associated with them (lines 25-30).",
                "However, if those conditions are not met, then it is substituted by a group of policies that it represents (using EXTEND-POLICY () function) (lines 31-32).",
                "EXTEND-POLICY() function is also responsible for initializing the horizon and absNodes of a policy. absNodes represents the number of nodes at the last level in the policy tree, that do not have an action assigned to them.",
                "If πi.absNodes = |Ωi|πi.horizon−1 (i.e. total number of policy nodes possible at πi.horizon) , then πi.absNodes is set to zero and πi.horizon is increased by 1.",
                "Otherwise, πi.absNodes is increased by 1.",
                "Thus, this function combines both HBA and NBA by using the policy variables, horizon and absNodes.",
                "Before substituting the abstract policy with a group of policies, those policies are sorted based on heuristic values (line 33).",
                "Similar type of abstraction based best response computation is adopted at leaf agents (lines 3-14). 4.4 Value ApproXimation (VAX) In this section, we present an approximate enhancement to SPIDER called VAX.",
                "The input to this technique is an approximation parameter , which determines the difference from the optimal solution quality.",
                "This approximation parameter is used at each agent for pruning out joint policies.",
                "The pruning mechanism in SPIDER and SPIDER-Abs dictates that a joint policy be pruned only if the threshold is exactly greater than the heuristic value.",
                "However, the 826 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Figure 3: Example of abstraction for (a) HBA (Horizon Based Abstraction) and (b) NBA (Node Based Abstraction) idea in this technique is to prune out joint a policy if the following condition is satisfied: threshold + > ˆv[πi , πi− ].",
                "Apart from the pruning condition, VAX is the same as SPIDER/SPIDER-ABS.",
                "In the example of Figure 2, if the heuristic value for the second joint policy (or second search tree node) in level 2 were 238 instead of 232, then that policy could not be be pruned using SPIDER or SPIDER-Abs.",
                "However, in VAX with an approximation parameter of 5, the joint policy in consideration would also be pruned.",
                "This is because the threshold (234) at that juncture plus the approximation parameter (5), i.e. 239 would have been greater than the heuristic value for that joint policy (238).",
                "It can be noted from the example (just discussed) that this kind of pruning can lead to fewer explorations and hence lead to an improvement in the overall run-time performance.",
                "However, this can entail a sacrifice in the quality of the solution because this technique can prune out a candidate optimal solution.",
                "A bound on the error introduced by this approximate algorithm as a function of , is provided by Proposition 3. 4.5 Percentage ApproXimation (PAX) In this section, we present the second approximation enhancement over SPIDER called PAX.",
                "Input to this technique is a parameter, δ that represents the minimum percentage of the optimal solution quality that is desired.",
                "Output of this technique is a policy with an expected value that is at least δ% of the optimal solution quality.",
                "A policy is pruned if the following condition is satisfied: threshold > δ 100 ˆv[πi , πi− ].",
                "Like in VAX, the only difference between PAX and SPIDER/SPIDER-ABS is this pruning condition.",
                "Again in Figure 2, if the heuristic value for the second search tree node in level 2 were 238 instead of 232, then PAX with an input parameter of 98% would be able to prune that search tree node (since 98 100 ∗238 < 234).",
                "This type of pruning leads to fewer explorations and hence an improvement in run-time performance, while potentially leading to a loss in quality of the solution.",
                "Proposition 4 provides the bound on quality loss. 4.6 Theoretical Results PROPOSITION 1.",
                "Heuristic provided using the centralized MDP heuristic is admissible.",
                "Proof.",
                "For the value provided by the heuristic to be admissible, it should be an over estimate of the expected value for a joint policy.",
                "Thus, we need to show that: For l ∈ Ei+ ∪ Ei− : ˆvt l ≥ vt l (refer to notation in Section 4.2) We use mathematical induction on t to prove this.",
                "Base case: t = T − 1.",
                "Irrespective of whether l ∈ Ei− or l ∈ Ei+ , ˆrt l is computed by maximizing over all actions of the agents in Tree(i), while rt l is computed for fixed policies of the same agents.",
                "Hence, ˆrt l ≥ rt l and also ˆvt l ≥ vt l .",
                "Assumption: Proposition holds for t = η, where 1 ≤ η < T − 1.",
                "We now have to prove that the proposition holds for t = η − 1.",
                "We show the proof for l ∈ Ei− and similar reasoning can be adopted to prove for l ∈ Ei+ .",
                "The heuristic value function for l ∈ Ei− is provided by the following equation: ˆvη−1 l =ˆrη−1 l + max al2 ω η l1 ,s η l ˆpη−1 l1 ˆpη−1 l2 pη−1 u ˆvη l Rewriting the RHS and using Eqn 2 (in Section 4.2) =ˆrη−1 l + max al2 ω η l1 ,s η l pη−1 u pη−1 l1 ˆpη−1 l2 ˆvη l =ˆrη−1 l + ω η l1 ,s η l pη−1 u pη−1 l1 max al2 ˆpη−1 l2 ˆvη l Since maxal2 ˆpη−1 l2 ˆvη l ≥ ωl2 oη−1 l2 ˆpη−1 l2 ˆvη l and pη−1 l2 = oη−1 l2 ˆpη−1 l2 ≥ˆrη−1 l + ω η l1 ,s η l pη−1 u pη−1 l1 ωl2 pη−1 l2 ˆvη l Since ˆvη l ≥ vη l (from the assumption) ≥ˆrη−1 l + ω η l1 ,s η l pη−1 u pη−1 l1 ωl2 pη−1 l2 vη l Since ˆrη−1 l ≥ rη−1 l (by definition) ≥rη−1 l + ω η l1 ,s η l pη−1 u pη−1 l1 ωl2 pη−1 l2 vη l =rη−1 l + (ω η l ,s η l ) pη−1 u pη−1 l1 pη−1 l2 vη l = vη−1 l Thus proved.",
                "PROPOSITION 2.",
                "SPIDER provides an optimal solution.",
                "Proof.",
                "SPIDER examines all possible joint policies given the interaction structure of the agents.",
                "The only exception being when a joint policy is pruned based on the heuristic value.",
                "Thus, as long as a candidate optimal policy is not pruned, SPIDER will return an optimal policy.",
                "As proved in Proposition 1, the expected value for a joint policy is always an upper bound.",
                "Hence when a joint policy is pruned, it cannot be an optimal solution.",
                "PROPOSITION 3.",
                "Error bound on the solution quality for VAX (implemented over SPIDER-ABS) with an approximation parameter of is ρ , where ρ is the number of leaf nodes in the DFS tree.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 827 Proof.",
                "We prove this proposition using mathematical induction on the depth of the DFS tree.",
                "Base case: depth = 1 (i.e. one node).",
                "Best response is computed by iterating through all policies, Πk.",
                "A policy,πk is pruned if ˆv[πk, πk− ] < threshold + .",
                "Thus the best response policy computed by VAX would be at most away from the optimal best response.",
                "Hence the proposition holds for the base case.",
                "Assumption: Proposition holds for d, where 1 ≤ depth ≤ d. We now have to prove that the proposition holds for d + 1.",
                "Without loss of generality, lets assume that the root node of this tree has k children.",
                "Each of this children is of depth ≤ d, and hence from the assumption, the error introduced in kth child is ρk , where ρk is the number of leaf nodes in kth child of the root.",
                "Therefore, ρ = k ρk, where ρ is the number of leaf nodes in the tree.",
                "In SPIDER-ABS, threshold at the root agent, thresspider = k v[πk+ , πk− ].",
                "However, with VAX the threshold at the root agent will be (in the worst case), threshvax = k v[πk+ , πk− ]− k ρk .",
                "Hence, with VAX a joint policy is pruned at the root agent if ˆv[πroot, πroot− ] < threshvax + ⇒ ˆv[πroot, πroot− ] < threshspider − (( k ρk) − 1) ≤ threshspider − ( k ρk) ≤ threshspider − ρ .",
                "Hence proved.",
                "PROPOSITION 4.",
                "For PAX (implemented over SPIDER-ABS) with an input parameter of δ, the solution quality is at least δ 100 v[πroot+,∗ ], where v[πroot+,∗ ] denotes the optimal solution quality.",
                "Proof.",
                "We prove this proposition using mathematical induction on the depth of the DFS tree.",
                "Base case: depth = 1 (i.e. one node).",
                "Best response is computed by iterating through all policies, Πk.",
                "A policy,πk is pruned if δ 100 ˆv[πk, πk− ] < threshold.",
                "Thus the best response policy computed by PAX would be at least δ 100 times the optimal best response.",
                "Hence the proposition holds for the base case.",
                "Assumption: Proposition holds for d, where 1 ≤ depth ≤ d. We now have to prove that the proposition holds for d + 1.",
                "Without loss of generality, lets assume that the root node of this tree has k children.",
                "Each of this children is of depth ≤ d, and hence from the assumption, the solution quality in the kth child is at least δ 100 v[πk+,∗ , πk− ] for PAX.",
                "With SPIDER-ABS, a joint policy is pruned at the root agent if ˆv[πroot, πroot− ] < k v[πk+,∗ , πk− ].",
                "However with PAX, a joint policy is pruned if δ 100 ˆv[πroot, πroot− ] < k δ 100 v[πk+,∗ , πk− ] ⇒ ˆv[πroot, πroot− ] < k v[πk+,∗ , πk− ].",
                "Since the pruning condition at the root agent in PAX is the same as the one in SPIDER-ABS, there is no error introduced at the root agent and all the error is introduced in the children.",
                "Thus, overall solution quality is at least δ 100 of the optimal solution.",
                "Hence proved. 5.",
                "EXPERIMENTAL RESULTS All our experiments were conducted on the sensor network domain from Section 2.",
                "The five network configurations employed are shown in Figure 4.",
                "Algorithms that we experimented with are GOA, SPIDER, SPIDER-ABS, PAX and VAX.",
                "We compare against GOA because it is the only global optimal algorithm that considers more than two agents.",
                "We performed two sets of experiments: (i) firstly, we compared the run-time performance of the above algorithms and (ii) secondly, we experimented with PAX and VAX to study the tradeoff between run-time and solution quality.",
                "Experiments were terminated after 10000 seconds1 .",
                "Figure 5(a) provides run-time comparisons between the optimal algorithms GOA, SPIDER, SPIDER-Abs and the approximate algorithms, PAX ( of 30) and VAX(δ of 80).",
                "X-axis denotes the 1 Machine specs for all experiments: Intel Xeon 3.6 GHZ processor, 2GB RAM sensor network configuration used, while Y-axis indicates the runtime (on a log-scale).",
                "The time horizon of policy computation was 3.",
                "For each configuration (3-chain, 4-chain, 4-star and 5-star), there are five bars indicating the time taken by GOA, SPIDER, SPIDERAbs, PAX and VAX.",
                "GOA did not terminate within the time limit for 4-star and 5-star configurations.",
                "SPIDER-Abs dominated the SPIDER and GOA for all the configurations.",
                "For instance, in the 3chain configuration, SPIDER-ABS provides 230-fold speedup over GOA and 2-fold speedup over SPIDER and for the 4-chain configuration it provides 58-fold speedup over GOA and 2-fold speedup over SPIDER.",
                "The two approximation approaches, VAX and PAX provided further improvement in performance over SPIDER-Abs.",
                "For instance, in the 5-star configuration VAX provides a 15-fold speedup and PAX provides a 8-fold speedup over SPIDER-Abs.",
                "Figures 5(b) provides a comparison of the solution quality obtained using the different algorithms for the problems tested in Figure 5(a).",
                "X-axis denotes the sensor network configuration while Y-axis indicates the solution quality.",
                "Since GOA, SPIDER, and SPIDER-Abs are all global optimal algorithms, the solution quality is the same for all those algorithms.",
                "For 5-P configuration, the global optimal algorithms did not terminate within the limit of 10000 seconds, so the bar for optimal quality indicates an upper bound on the optimal solution quality.",
                "With both the approximations, we obtained a solution quality that was close to the optimal solution quality.",
                "In 3-chain and 4-star configurations, it is remarkable that both PAX and VAX obtained almost the same actual quality as the global optimal algorithms, despite the approximation parameter and δ.",
                "For other configurations as well, the loss in quality was less than 20% of the optimal solution quality.",
                "Figure 5(c) provides the time to solution with PAX (for varying epsilons).",
                "X-axis denotes the approximation parameter, δ (percentage to optimal) used, while Y-axis denotes the time taken to compute the solution (on a log-scale).",
                "The time horizon for all the configurations was 4.",
                "As δ was decreased from 70 to 30, the time to solution decreased drastically.",
                "For instance, in the 3-chain case there was a total speedup of 170-fold when the δ was changed from 70 to 30.",
                "Interestingly, even with a low δ of 30%, the actual solution quality remained equal to the one obtained at 70%.",
                "Figure 5(d) provides the time to solution for all the configurations with VAX (for varying epsilons).",
                "X-axis denotes the approximation parameter, used, while Y-axis denotes the time taken to compute the solution (on a log-scale).",
                "The time horizon for all the configurations was 4.",
                "As was increased, the time to solution decreased drastically.",
                "For instance, in the 4-star case there was a total speedup of 73-fold when the was changed from 60 to 140.",
                "Again, the actual solution quality did not change with varying epsilon.",
                "Figure 4: Sensor network configurations 828 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Figure 5: Comparison of GOA, SPIDER, SPIDER-Abs and VAX for T = 3 on (a) Runtime and (b) Solution quality; (c) Time to solution for PAX with varying percentage to optimal for T=4 (d) Time to solution for VAX with varying epsilon for T=4 6.",
                "SUMMARY AND RELATED WORK This paper presents four algorithms SPIDER, SPIDER-ABS, PAX and VAX that provide a novel combination of features for policy search in distributed POMDPs: (i) exploiting agent interaction structure given a <br>network of agent</br>s (i.e. easier scale-up to larger number of agents); (ii) using branch and bound search with an MDP based heuristic function; (iii) utilizing abstraction to improve runtime performance without sacrificing solution quality; (iv) providing a priori percentage bounds on quality of solutions using PAX; and (v) providing expected value bounds on the quality of solutions using VAX.",
                "These features allow for systematic tradeoff of solution quality for run-time in networks of agents operating under uncertainty.",
                "Experimental results show orders of magnitude improvement in performance over previous global optimal algorithms.",
                "Researchers have typically employed two types of techniques for solving distributed POMDPs.",
                "The first set of techniques compute global optimal solutions.",
                "Hansen et al. [5] present an algorithm based on dynamic programming and iterated elimination of dominant policies, that provides optimal solutions for distributed POMDPs.",
                "Szer et al. [13] provide an optimal heuristic search method for solving Decentralized POMDPs.",
                "This algorithm is based on the combination of a classical heuristic search algorithm, A∗ and decentralized control theory.",
                "The key differences between SPIDER and MAA* are: (a) Enhancements to SPIDER (VAX and PAX) provide for quality guaranteed approximations, while MAA* is a global optimal algorithm and hence involves significant computational complexity; (b) Due to MAA*s inability to exploit interaction structure, it was illustrated only with two agents.",
                "However, SPIDER has been illustrated for networks of agents; and (c) SPIDER explores the joint policy one agent at a time, while MAA* expands it one time step at a time (simultaneously for all the agents).",
                "The second set of techniques seek approximate policies.",
                "EmeryMontemerlo et al. [4] approximate POSGs as a series of one-step Bayesian games using heuristics to approximate future value, trading off limited lookahead for computational efficiency, resulting in locally optimal policies (with respect to the selected heuristic).",
                "Nair et al. [9]s JESP algorithm uses dynamic programming to reach a local optimum solution for finite horizon decentralized POMDPs.",
                "Peshkin et al. [11] and Bernstein et al. [2] are examples of policy search techniques that search for locally optimal policies.",
                "Though all the above techniques improve the efficiency of policy computation considerably, they are unable to provide error bounds on the quality of the solution.",
                "This aspect of quality bounds differentiates SPIDER from all the above techniques.",
                "Acknowledgements.",
                "This material is based upon work supported by the Defense Advanced Research Projects Agency (DARPA), through the Department of the Interior, NBC, Acquisition Services Division under Contract No.",
                "NBCHD030010.",
                "The views and conclusions contained in this document are those of the authors, and should not be interpreted as representing the official policies, either expressed or implied, of the Defense Advanced Research Projects Agency or the U.S. Government. 7.",
                "REFERENCES [1] R. Becker, S. Zilberstein, V. Lesser, and C.V. Goldman.",
                "Solving transition independent decentralized Markov decision processes.",
                "JAIR, 22:423-455, 2004. [2] D. S. Bernstein, E.A.",
                "Hansen, and S. Zilberstein.",
                "Bounded policy iteration for decentralized POMDPs.",
                "In IJCAI, 2005. [3] D. S. Bernstein, S. Zilberstein, and N. Immerman.",
                "The complexity of decentralized control of MDPs.",
                "In UAI, 2000. [4] R. Emery-Montemerlo, G. Gordon, J. Schneider, and S. Thrun.",
                "Approximate solutions for partially observable stochastic games with common payoffs.",
                "In AAMAS, 2004. [5] E. Hansen, D. Bernstein, and S. Zilberstein.",
                "Dynamic programming for partially observable stochastic games.",
                "In AAAI, 2004. [6] V. Lesser, C. Ortiz, and M. Tambe.",
                "Distributed sensor nets: A multiagent perspective.",
                "Kluwer, 2003. [7] R. Maheswaran, M. Tambe, E. Bowring, J. Pearce, and P. Varakantham.",
                "Taking dcop to the real world : Efficient complete solutions for distributed event scheduling.",
                "In AAMAS, 2004. [8] P. J. Modi, W. Shen, M. Tambe, and M. Yokoo.",
                "An asynchronous complete method for distributed constraint optimization.",
                "In AAMAS, 2003. [9] R. Nair, D. Pynadath, M. Yokoo, M. Tambe, and S. Marsella.",
                "Taming decentralized POMDPs: Towards efficient policy computation for multiagent settings.",
                "In IJCAI, 2003. [10] R. Nair, P. Varakantham, M. Tambe, and M. Yokoo.",
                "Networked distributed POMDPs: A synthesis of distributed constraint optimization and POMDPs.",
                "In AAAI, 2005. [11] L. Peshkin, N. Meuleau, K.-E. Kim, and L. Kaelbling.",
                "Learning to cooperate via policy search.",
                "In UAI, 2000. [12] A. Petcu and B. Faltings.",
                "A scalable method for multiagent constraint optimization.",
                "In IJCAI, 2005. [13] D. Szer, F. Charpillet, and S. Zilberstein.",
                "MAA*: A heuristic search algorithm for solving decentralized POMDPs.",
                "In IJCAI, 2005.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 829"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Este documento supera las limitaciones de ambos enfoques al proporcionar araña, una nueva combinación de tres características clave para la generación de políticas en POMDP distribuidos: (i) Explota la estructura de interacción del agente dada una \"red de agentes\" (es decir, que permite una escala más fácila mayor número de agentes);(ii) Utiliza una combinación de heurísticas para la búsqueda de políticas aceleradas;y (iii) permite aproximaciones garantizadas de calidad, lo que permite una compensación sistemática de calidad de solución para el tiempo.",
                "Resumen y trabajo relacionado Este documento presenta cuatro algoritmos Spider, Spider-ABS, Pax y Vax que proporcionan una combinación novedosa de características para la búsqueda de políticas en POMDP distribuidos: (i) Estructura de interacción del agente de explotación dada una \"red de agentes\" (es decir, más fácilescalar a un mayor número de agentes);(ii) usar la búsqueda de rama y unión con una función heurística basada en MDP;(iii) utilizar la abstracción para mejorar el rendimiento del tiempo de ejecución sin sacrificar la calidad de la solución;(iv) proporcionar límites de porcentaje a priori en la calidad de las soluciones con PAX;y (v) proporcionar límites de valor esperados en la calidad de las soluciones utilizando VAX."
            ],
            "translated_text": "",
            "candidates": [
                "red",
                "red de agentes",
                "red",
                "red de agentes"
            ],
            "error": []
        },
        "agent network": {
            "translated_key": "red de agentes",
            "is_in_text": false,
            "original_annotated_sentences": [
                "Letting loose a SPIDER on a network of POMDPs: Generating quality guaranteed policies Pradeep Varakantham, Janusz Marecki, Yuichi Yabu∗ , Milind Tambe, Makoto Yokoo∗ University of Southern California, Los Angeles, CA 90089, {varakant, marecki, tambe}@usc.edu ∗ Dept.",
                "of Intelligent Systems, Kyushu University, Fukuoka, 812-8581 Japan, yokoo@is.kyushu-u.ac.jp ABSTRACT Distributed Partially Observable Markov Decision Problems (Distributed POMDPs) are a popular approach for modeling multi-agent systems acting in uncertain domains.",
                "Given the significant complexity of solving distributed POMDPs, particularly as we scale up the numbers of agents, one popular approach has focused on approximate solutions.",
                "Though this approach is efficient, the algorithms within this approach do not provide any guarantees on solution quality.",
                "A second less popular approach focuses on global optimality, but typical results are available only for two agents, and also at considerable computational cost.",
                "This paper overcomes the limitations of both these approaches by providing SPIDER, a novel combination of three key features for policy generation in distributed POMDPs: (i) it exploits agent interaction structure given a network of agents (i.e. allowing easier scale-up to larger number of agents); (ii) it uses a combination of heuristics to speedup policy search; and (iii) it allows quality guaranteed approximations, allowing a systematic tradeoff of solution quality for time.",
                "Experimental results show orders of magnitude improvement in performance when compared with previous global optimal algorithms.",
                "Categories and Subject Descriptors I.2.11 [Artificial Intelligence]: Distributed Artificial IntelligenceMulti-agent Systems General Terms Algorithms, Theory 1.",
                "INTRODUCTION Distributed Partially Observable Markov Decision Problems (Distributed POMDPs) are emerging as a popular approach for modeling sequential decision making in teams operating under uncertainty [9, 4, 1, 2, 13].",
                "The uncertainty arises on account of nondeterminism in the outcomes of actions and because the world state may only be partially (or incorrectly) observable.",
                "Unfortunately, as shown by Bernstein et al. [3], the problem of finding the optimal joint policy for general distributed POMDPs is NEXP-Complete.",
                "Researchers have attempted two different types of approaches towards solving these models.",
                "The first category consists of highly efficient approximate techniques, that may not reach globally optimal solutions [2, 9, 11].",
                "The key problem with these techniques has been their inability to provide any guarantees on the quality of the solution.",
                "In contrast, the second less popular category of approaches has focused on a global optimal result [13, 5, 10].",
                "Though these approaches obtain optimal solutions, they typically consider only two agents.",
                "Furthermore, they fail to exploit structure in the interactions of the agents and hence are severely hampered with respect to scalability when considering more than two agents.",
                "To address these problems with the existing approaches, we propose approximate techniques that provide guarantees on the quality of the solution while focussing on a network of more than two agents.",
                "We first propose the basic SPIDER (Search for Policies In Distributed EnviRonments) algorithm.",
                "There are two key novel features in SPIDER: (i) it is a branch and bound heuristic search technique that uses a MDP-based heuristic function to search for an optimal joint policy; (ii) it exploits network structure of agents by organizing agents into a Depth First Search (DFS) pseudo tree and takes advantage of the independence in the different branches of the DFS tree.",
                "We then provide three enhancements to improve the efficiency of the basic SPIDER algorithm while providing guarantees on the quality of the solution.",
                "The first enhancement uses abstractions for speedup, but does not sacrifice solution quality.",
                "In particular, it initially performs branch and bound search on abstract policies and then extends to complete policies.",
                "The second enhancement obtains speedups by sacrificing solution quality, but within an input parameter that provides the tolerable expected value difference from the optimal solution.",
                "The third enhancement is again based on bounding the search for efficiency, however with a tolerance parameter that is provided as a percentage of optimal.",
                "We experimented with the sensor network domain presented in Nair et al. [10], a domain representative of an important class of problems with networks of agents working in uncertain environments.",
                "In our experiments, we illustrate that SPIDER dominates an existing global optimal approach called GOA [10], the only known global optimal algorithm with demonstrated experimental results for more than two agents.",
                "Furthermore, we demonstrate that abstraction improves the performance of SPIDER significantly (while providing optimal solutions).",
                "We finally demonstrate a key feature of SPIDER: by utilizing the approximation enhancements it enables principled tradeoffs in run-time versus solution quality. 822 978-81-904262-7-5 (RPS) c 2007 IFAAMAS 2.",
                "DOMAIN: DISTRIBUTED SENSOR NETS Distributed sensor networks are a large, important class of domains that motivate our work.",
                "This paper focuses on a set of target tracking problems that arise in certain types of sensor networks [6] first introduced in [10].",
                "Figure 1 shows a specific problem instance within this type consisting of three sensors.",
                "Here, each sensor node can scan in one of four directions: North, South, East or West (see Figure 1).",
                "To track a target and obtain associated reward, two sensors with overlapping scanning areas must coordinate by scanning the same area simultaneously.",
                "In Figure 1, to track a target in Loc11, sensor1 needs to scan East and sensor2 needs to scan West simultaneously.",
                "Thus, sensors have to act in a coordinated fashion.",
                "We assume that there are two independent targets and that each targets movement is uncertain and unaffected by the sensor agents.",
                "Based on the area it is scanning, each sensor receives observations that can have false positives and false negatives.",
                "The sensors observations and transitions are independent of each others actions e.g.the observations that sensor1 receives are independent of sensor2s actions.",
                "Each agent incurs a cost for scanning whether the target is present or not, but no cost if it turns off.",
                "Given the sensors observational uncertainty, the targets uncertain transitions and the distributed nature of the sensor nodes, these sensor nets provide a useful domains for applying distributed POMDP models.",
                "Figure 1: A 3-chain sensor configuration 3.",
                "BACKGROUND 3.1 Model: Network Distributed POMDP The ND-POMDP model was introduced in [10], motivated by domains such as the sensor networks introduced in Section 2.",
                "It is defined as the tuple S, A, P, Ω, O, R, b , where S = ×1≤i≤nSi × Su is the set of world states.",
                "Si refers to the set of local states of agent i and Su is the set of unaffectable states.",
                "Unaffectable state refers to that part of the world state that cannot be affected by the agents actions, e.g. environmental factors like target locations that no agent can control.",
                "A = ×1≤i≤nAi is the set of joint actions, where Ai is the set of action for agent i. ND-POMDP assumes transition independence, where the transition function is defined as P(s, a, s ) = Pu(su, su) · 1≤i≤n Pi(si, su, ai, si), where a = a1, . . . , an is the joint action performed in state s = s1, . . . , sn, su and s = s1, . . . , sn, su is the resulting state.",
                "Ω = ×1≤i≤nΩi is the set of joint observations where Ωi is the set of observations for agents i. Observational independence is assumed in ND-POMDPs i.e., the joint observation function is defined as O(s, a, ω) = 1≤i≤n Oi(si, su, ai, ωi), where s = s1, . . . , sn, su is the world state that results from the agents performing a = a1, . . . , an in the previous state, and ω = ω1, . . . , ωn ∈ Ω is the observation received in state s. This implies that each agents observation depends only on the unaffectable state, its local action and on its resulting local state.",
                "The reward function, R, is defined as R(s, a) = l Rl(sl1, . . . , slr, su, al1, . . . , alr ), where each l could refer to any sub-group of agents and r = |l|.",
                "Based on the reward function, an interaction hypergraph is constructed.",
                "A hyper-link, l, exists between a subset of agents for all Rl that comprise R. The interaction hypergraph is defined as G = (Ag, E), where the agents, Ag, are the vertices and E = {l|l ⊆ Ag ∧ Rl is a component of R} are the edges.",
                "The initial belief state (distribution over the initial state), b, is defined as b(s) = bu(su) · 1≤i≤n bi(si), where bu and bi refer to the distribution over initial unaffectable state and agent is initial belief state, respectively.",
                "The goal in ND-POMDP is to compute the joint policy π = π1, . . . , πn that maximizes teams expected reward over a finite horizon T starting from the belief state b.",
                "An ND-POMDP is similar to an n-ary Distributed Constraint Optimization Problem (DCOP)[8, 12] where the variable at each node represents the policy selected by an individual agent, πi with the domain of the variable being the set of all local policies, Πi.",
                "The reward component Rl where |l| = 1 can be thought of as a local constraint while the reward component Rl where l > 1 corresponds to a non-local constraint in the constraint graph. 3.2 Algorithm: Global Optimal Algorithm (GOA) In previous work, GOA has been defined as a global optimal algorithm for ND-POMDPs [10].",
                "We will use GOA in our experimental comparisons, since GOA is a state-of-the-art global optimal algorithm, and in fact the only one with experimental results available for networks of more than two agents.",
                "GOA borrows from a global optimal DCOP algorithm called DPOP[12].",
                "GOAs message passing follows that of DPOP.",
                "The first phase is the UTIL propagation, where the utility messages, in this case values of policies, are passed up from the leaves to the root.",
                "Value for a policy at an agent is defined as the sum of best response values from its children and the joint policy reward associated with the parent policy.",
                "Thus, given a policy for a parent node, GOA requires an agent to iterate through all its policies, finding the best response policy and returning the value to the parent - while at the parent node, to find the best policy, an agent requires its children to return their best responses to each of its policies.",
                "This UTIL propagation process is repeated at each level in the tree, until the root exhausts all its policies.",
                "In the second phase of VALUE propagation, where the optimal policies are passed down from the root till the leaves.",
                "GOA takes advantage of the local interactions in the interaction graph, by pruning out unnecessary joint policy evaluations (associated with nodes not connected directly in the tree).",
                "Since the interaction graph captures all the reward interactions among agents and as this algorithm iterates through all the relevant joint policy evaluations, this algorithm yields a globally optimal solution. 4.",
                "SPIDER As mentioned in Section 3.1, an ND-POMDP can be treated as a DCOP, where the goal is to compute a joint policy that maximizes the overall joint reward.",
                "The brute-force technique for computing an optimal policy would be to examine the expected values for all possible joint policies.",
                "The key idea in SPIDER is to avoid computation of expected values for the entire space of joint policies, by utilizing upper bounds on the expected values of policies and the interaction structure of the agents.",
                "Akin to some of the algorithms for DCOP [8, 12], SPIDER has a pre-processing step that constructs a DFS tree corresponding to the given interaction structure.",
                "Note that these DFS trees are pseudo trees [12] that allow links between ancestors and children.",
                "We employ the Maximum Constrained Node (MCN) heuristic used in the DCOP algorithm, ADOPT [8], however other heuristics (such as MLSP heuristic from [7]) can also be employed.",
                "MCN heuristic tries to place agents with more number of constraints at the top of the tree.",
                "This tree governs how the search for the optimal joint polThe Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 823 icy proceeds in SPIDER.",
                "The algorithms presented in this paper are easily extendable to hyper-trees, however for expository purposes, we assume binary trees.",
                "SPIDER is an algorithm for centralized planning and distributed execution in distributed POMDPs.",
                "In this paper, we employ the following notation to denote policies and expected values: Ancestors(i) ⇒ agents from i to the root (not including i).",
                "Tree(i) ⇒ agents in the sub-tree (not including i) for which i is the root. πroot+ ⇒ joint policy of all agents. πi+ ⇒ joint policy of all agents in Tree(i) ∪ i. πi− ⇒ joint policy of agents that are in Ancestors(i). πi ⇒ policy of the ith agent. ˆv[πi, πi− ] ⇒ upper bound on the expected value for πi+ given πi and policies of ancestor agents i.e. πi− . ˆvj[πi, πi− ] ⇒ upper bound on the expected value for πi+ from the jth child. v[πi, πi− ] ⇒ expected value for πi given policies of ancestor agents, πi− . v[πi+ , πi− ] ⇒ expected value for πi+ given policies of ancestor agents, πi− . vj[πi+ , πi− ] ⇒ expected value for πi+ from the jth child.",
                "Figure 2: Execution of SPIDER, an example 4.1 Outline of SPIDER SPIDER is based on the idea of branch and bound search, where the nodes in the search tree represent partial/complete joint policies.",
                "Figure 2 shows an example search tree for the SPIDER algorithm, using an example of the three agent chain.",
                "Before SPIDER begins its search we create a DFS tree (i.e. pseudo tree) from the three agent chain, with the middle agent as the root of this tree.",
                "SPIDER exploits the structure of this DFS tree while engaging in its search.",
                "Note that in our example figure, each agent is assigned a policy with T=2.",
                "Thus, each rounded rectange (search tree node) indicates a partial/complete joint policy, a rectangle indicates an agent and the ovals internal to an agent show its policy.",
                "Heuristic or actual expected value for a joint policy is indicated in the top right corner of the rounded rectangle.",
                "If the number is italicized and underlined, it implies that the actual expected value of the joint policy is provided.",
                "SPIDER begins with no policy assigned to any of the agents (shown in the level 1 of the search tree).",
                "Level 2 of the search tree indicates that the joint policies are sorted based on upper bounds computed for root agents policies.",
                "Level 3 shows one SPIDER search node with a complete joint policy (a policy assigned to each of the agents).",
                "The expected value for this joint policy is used to prune out the nodes in level 2 (the ones with upper bounds < 234) When creating policies for each non-leaf agent i, SPIDER potentially performs two steps: 1.",
                "Obtaining upper bounds and sorting: In this step, agent i computes upper bounds on the expected values, ˆv[πi, πi− ] of the joint policies πi+ corresponding to each of its policy πi and fixed ancestor policies.",
                "An MDP based heuristic is used to compute these upper bounds on the expected values.",
                "Detailed description about this MDP heuristic is provided in Section 4.2.",
                "All policies of agent i, Πi are then sorted based on these upper bounds (also referred to as heuristic values henceforth) in descending order.",
                "Exploration of these policies (in step 2 below) are performed in this descending order.",
                "As indicated in the level 2 of the search tree (of Figure 2), all the joint policies are sorted based on the heuristic values, indicated in the top right corner of each joint policy.",
                "The intuition behind sorting and then exploring policies in descending order of upper bounds, is that the policies with higher upper bounds could yield joint policies with higher expected values. 2.",
                "Exploration and Pruning: Exploration implies computing the best response joint policy πi+,∗ corresponding to fixed ancestor policies of agent i, πi− .",
                "This is performed by iterating through all policies of agent i i.e.",
                "Πi and summing two quantities for each policy: (i) the best response for all of is children (obtained by performing steps 1 and 2 at each of the child nodes); (ii) the expected value obtained by i for fixed policies of ancestors.",
                "Thus, exploration of a policy πi yields actual expected value of a joint policy, πi+ represented as v[πi+ , πi− ].",
                "The policy with the highest expected value is the best response policy.",
                "Pruning refers to avoiding exploring all policies (or computing expected values) at agent i by using the current best expected value, vmax [πi+ , πi− ].",
                "Henceforth, this vmax [πi+ , πi− ] will be referred to as threshold.",
                "A policy, πi need not be explored if the upper bound for that policy, ˆv[πi, πi− ] is less than the threshold.",
                "This is because the expected value for the best joint policy attainable for that policy will be less than the threshold.",
                "On the other hand, when considering a leaf agent, SPIDER computes the best response policy (and consequently its expected value) corresponding to fixed policies of its ancestors, πi− .",
                "This is accomplished by computing expected values for each of the policies (corresponding to fixed policies of ancestors) and selecting the highest expected value policy.",
                "In Figure 2, SPIDER assigns best response policies to leaf agents at level 3.",
                "The policy for the left leaf agent is to perform action East at each time step in the policy, while the policy for the right leaf agent is to perform Off at each time step.",
                "These best response policies from the leaf agents yield an actual expected value of 234 for the complete joint policy.",
                "Algorithm 1 provides the pseudo code for SPIDER.",
                "This algorithm outputs the best joint policy, πi+,∗ (with an expected value greater than threshold) for the agents in Tree(i).",
                "Lines 3-8 compute the best response policy of a leaf agent i, while lines 9-23 computes the best response joint policy for agents in Tree(i).",
                "This best response computation for a non-leaf agent i includes: (a) Sorting of policies (in descending order) based on heuristic values on line 11; (b) Computing best response policies at each of the children for fixed policies of agent i in lines 16-20; and (c) Maintaining 824 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Algorithm 1 SPIDER(i, πi− , threshold) 1: πi+,∗ ← null 2: Πi ← GET-ALL-POLICIES (horizon, Ai, Ωi) 3: if IS-LEAF(i) then 4: for all πi ∈ Πi do 5: v[πi, πi−] ← JOINT-REWARD (πi, πi−) 6: if v[πi, πi−] > threshold then 7: πi+,∗ ← πi 8: threshold ← v[πi, πi−] 9: else 10: children ← CHILDREN (i) 11: ˆΠi ← UPPER-BOUND-SORT(i, Πi, πi−) 12: for all πi ∈ ˆΠi do 13: ˜πi+ ← πi 14: if ˆv[πi, πi−] < threshold then 15: Go to line 12 16: for all j ∈ children do 17: jThres ← threshold − v[πi, πi−]− Σk∈children,k=j ˆvk[πi, πi−] 18: πj+,∗ ← SPIDER(j, πi πi−, jThres) 19: ˜πi+ ← ˜πi+ πj+,∗ 20: ˆvj[πi, πi−] ← v[πj+,∗, πi πi−] 21: if v[˜πi+, πi−] > threshold then 22: threshold ← v[˜πi+, πi−] 23: πi+,∗ ← ˜πi+ 24: return πi+,∗ Algorithm 2 UPPER-BOUND-SORT(i, Πi, πi− ) 1: children ← CHILDREN (i) 2: ˆΠi ← null /* Stores the sorted list */ 3: for all πi ∈ Πi do 4: ˆv[πi, πi−] ← JOINT-REWARD (πi, πi−) 5: for all j ∈ children do 6: ˆvj[πi, πi−] ← UPPER-BOUND(i, j, πi πi−) 7: ˆv[πi, πi−] + ← ˆvj[πi, πi−] 8: ˆΠi ← INSERT-INTO-SORTED (πi, ˆΠi) 9: return ˆΠi best expected value, joint policy in lines 21-23.",
                "Algorithm 2 provides the pseudo code for sorting policies based on the upper bounds on the expected values of joint policies.",
                "Expected value for an agent i consists of two parts: value obtained from ancestors and value obtained from its children.",
                "Line 4 computes the expected value obtained from ancestors of the agent (using JOINT-REWARD function), while lines 5-7 compute the heuristic value from the children.",
                "The sum of these two parts yields an upper bound on the expected value for agent i, and line 8 of the algorithm sorts the policies based on these upper bounds. 4.2 MDP based heuristic function The heuristic function quickly provides an upper bound on the expected value obtainable from the agents in Tree(i).",
                "The subtree of agents is a distributed POMDP in itself and the idea here is to construct a centralized MDP corresponding to the (sub-tree) distributed POMDP and obtain the expected value of the optimal policy for this centralized MDP.",
                "To reiterate this in terms of the agents in DFS tree interaction structure, we assume full observability for the agents in Tree(i) and for fixed policies of the agents in {Ancestors(i) ∪ i}, we compute the joint value ˆv[πi+ , πi− ] .",
                "We use the following notation for presenting the equations for computing upper bounds/heuristic values (for agents i and k): Let Ei− denote the set of links between agents in {Ancestors(i)∪ i} and Tree(i), Ei+ denote the set of links between agents in Tree(i).",
                "Also, if l ∈ Ei− , then l1 is the agent in {Ancestors(i)∪ i} and l2 is the agent in Tree(i), that l connects together.",
                "We first compact the standard notation: ot k =Ok(st+1 k , st+1 u , πk(ωt k), ωt+1 k ) (1) pt k =Pk(st k, st u, πk(ωt k), st+1 k ) · ot k pt u =P(st u, st+1 u ) st l = st l1 , st l2 , st u ; ωt l = ωt l1 , ωt l2 rt l =Rl(st l , πl1 (ωt l1 ), πl2 (ωt l2 )) vt l =V t πl (st l , st u, ωt l1 , ωt l2 ) Depending on the location of agent k in the agent tree we have the following cases: IF k ∈ {Ancestors(i) ∪ i}, ˆpt k = pt k, (2) IF k ∈ Tree(i), ˆpt k = Pk(st k, st u, πk(ωt k), st+1 k ) IF l ∈ Ei− , ˆrt l = max {al2 } Rl(st l , πl1 (ωt l1 ), al2 ) IF l ∈ Ei+ , ˆrt l = max {al1 ,al2 } Rl(st l , al1 , al2 ) The value function for an agent i executing the joint policy πi+ at time η − 1 is provided by the equation: V η−1 πi+ (sη−1 , ωη−1 ) = l∈Ei− vη−1 l + l∈Ei+ vη−1 l (3) where vη−1 l = rη−1 l + ω η l ,sη pη−1 l1 pη−1 l2 pη−1 u vη l Algorithm 3 UPPER-BOUND (i, j, πj− ) 1: val ← 0 2: for all l ∈ Ej− ∪ Ej+ do 3: if l ∈ Ej− then πl1 ← φ 4: for all s0 l do 5: val + ← startBel[s0 l ]· UPPER-BOUND-TIME (i, s0 l , j, πl1 , ) 6: return val Algorithm 4 UPPER-BOUND-TIME (i, st l , j, πl1 , ωt l1 ) 1: maxV al ← −∞ 2: for all al1 , al2 do 3: if l ∈ Ei− and l ∈ Ej− then al1 ← πl1 (ωt l1 ) 4: val ← GET-REWARD(st l , al1 , al2 ) 5: if t < πi.horizon − 1 then 6: for all st+1 l , ωt+1 l1 do 7: futV al←pt u ˆpt l1 ˆpt l2 8: futV al ∗ ← UPPER-BOUND-TIME(st+1 l , j, πl1 , ωt l1 ωt+1 l1 ) 9: val + ← futV al 10: if val > maxV al then maxV al ← val 11: return maxV al Upper bound on the expected value for a link is computed by modifying the equation 3 to reflect the full observability assumption.",
                "This involves removing the observational probability term for agents in Tree(i) and maximizing the future value ˆvη l over the actions of those agents (in Tree(i)).",
                "Thus, the equation for the The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 825 computation of the upper bound on a link l, is as follows: IF l ∈ Ei− , ˆvη−1 l =ˆrη−1 l + max al2 ω η l1 ,s η l ˆpη−1 l1 ˆpη−1 l2 pη−1 u ˆvη l IF l ∈ Ei+ , ˆvη−1 l =ˆrη−1 l + max al1 ,al2 s η l ˆpη−1 l1 ˆpη−1 l2 pη−1 u ˆvη l Algorithm 3 and Algorithm 4 provide the algorithm for computing upper bound for child j of agent i, using the equations descirbed above.",
                "While Algorithm 4 computes the upper bound on a link given the starting state, Algorithm 3 sums the upper bound values computed over each of the links in Ei− ∪ Ei+ . 4.3 Abstraction Algorithm 5 SPIDER-ABS(i, πi− , threshold) 1: πi+,∗ ← null 2: Πi ← GET-POLICIES (<>, 1) 3: if IS-LEAF(i) then 4: for all πi ∈ Πi do 5: absHeuristic ← GET-ABS-HEURISTIC (πi, πi−) 6: absHeuristic ∗ ← (timeHorizon − πi.horizon) 7: if πi.horizon = timeHorizon and πi.absNodes = 0 then 8: v[πi, πi−] ← JOINT-REWARD (πi, πi−) 9: if v[πi, πi−] > threshold then 10: πi+,∗ ← πi; threshold ← v[πi, πi−] 11: else if v[πi, πi−] + absHeuristic > threshold then 12: ˆΠi ← EXTEND-POLICY (πi, πi.absNodes + 1) 13: Πi + ← INSERT-SORTED-POLICIES ( ˆΠi) 14: REMOVE(πi) 15: else 16: children ← CHILDREN (i) 17: Πi ← UPPER-BOUND-SORT(i, Πi, πi−) 18: for all πi ∈ Πi do 19: ˜πi+ ← πi 20: absHeuristic ← GET-ABS-HEURISTIC (πi, πi−) 21: absHeuristic ∗ ← (timeHorizon − πi.horizon) 22: if πi.horizon = timeHorizon and πi.absNodes = 0 then 23: if ˆv[πi, πi−] < threshold and πi.absNodes = 0 then 24: Go to line 19 25: for all j ∈ children do 26: jThres ← threshold − v[πi, πi−]− Σk∈children,k=j ˆvk[πi, πi−] 27: πj+,∗ ← SPIDER(j, πi πi−, jThres) 28: ˜πi+ ← ˜πi+ πj+,∗; ˆvj[πi, πi−] ← v[πj+,∗, πi πi−] 29: if v[˜πi+, πi−] > threshold then 30: threshold ← v[˜πi+, πi−]; πi+,∗ ← ˜πi+ 31: else if ˆv[πi+, πi−] + absHeuristic > threshold then 32: ˆΠi ← EXTEND-POLICY (πi, πi.absNodes + 1) 33: Πi + ← INSERT-SORTED-POLICIES (ˆΠi) 34: REMOVE(πi) 35: return πi+,∗ In SPIDER, the exploration/pruning phase can only begin after the heuristic (or upper bound) computation and sorting for the policies has ended.",
                "We provide an approach to possibly circumvent the exploration of a group of policies based on heuristic computation for one abstract policy, thus leading to an improvement in runtime performance (without loss in solution quality).",
                "The important steps in this technique are defining the abstract policy and how heuristic values are computated for the abstract policies.",
                "In this paper, we propose two types of abstraction: 1.",
                "Horizon Based Abstraction (HBA): Here, the abstract policy is defined as a shorter horizon policy.",
                "It represents a group of longer horizon policies that have the same actions as the abstract policy for times less than or equal to the horizon of the abstract policy.",
                "In Figure 3(a), a T=1 abstract policy that performs East action, represents a group of T=2 policies, that perform East in the first time step.",
                "For HBA, there are two parts to heuristic computation: (a) Computing the upper bound for the horizon of the abstract policy.",
                "This is same as the heuristic computation defined by the GETHEURISTIC() algorithm for SPIDER, however with a shorter time horizon (horizon of the abstract policy). (b) Computing the maximum possible reward that can be accumulated in one time step (using GET-ABS-HEURISTIC()) and multiplying it by the number of time steps to time horizon.",
                "This maximum possible reward (for one time step) is obtained by iterating through all the actions of all the agents in Tree(i) and computing the maximum joint reward for any joint action.",
                "Sum of (a) and (b) is the heuristic value for a HBA abstract policy. 2.",
                "Node Based Abstraction (NBA): Here an abstract policy is obtained by not associating actions to certain nodes of the policy tree.",
                "Unlike in HBA, this implies multiple levels of abstraction.",
                "This is illustrated in Figure 3(b), where there are T=2 policies that do not have an action for observation TP.",
                "These incomplete T=2 policies are abstractions for T=2 complete policies.",
                "Increased levels of abstraction leads to faster computation of a complete joint policy, πroot+ and also to shorter heuristic computation and exploration, pruning phases.",
                "For NBA, the heuristic computation is similar to that of a normal policy, except in cases where there is no action associated with policy nodes.",
                "In such cases, the immediate reward is taken as Rmax (maximum reward for any action).",
                "We combine both the abstraction techniques mentioned above into one technique, SPIDER-ABS.",
                "Algorithm 5 provides the algorithm for this abstraction technique.",
                "For computing optimal joint policy with SPIDER-ABS, a non-leaf agent i initially examines all abstract T=1 policies (line 2) and sorts them based on abstract policy heuristic computations (line 17).",
                "The abstraction horizon is gradually increased and these abstract policies are then explored in descending order of heuristic values and ones that have heuristic values less than the threshold are pruned (lines 23-24).",
                "Exploration in SPIDER-ABS has the same definition as in SPIDER if the policy being explored has a horizon of policy computation which is equal to the actual time horizon and if all the nodes of the policy have an action associated with them (lines 25-30).",
                "However, if those conditions are not met, then it is substituted by a group of policies that it represents (using EXTEND-POLICY () function) (lines 31-32).",
                "EXTEND-POLICY() function is also responsible for initializing the horizon and absNodes of a policy. absNodes represents the number of nodes at the last level in the policy tree, that do not have an action assigned to them.",
                "If πi.absNodes = |Ωi|πi.horizon−1 (i.e. total number of policy nodes possible at πi.horizon) , then πi.absNodes is set to zero and πi.horizon is increased by 1.",
                "Otherwise, πi.absNodes is increased by 1.",
                "Thus, this function combines both HBA and NBA by using the policy variables, horizon and absNodes.",
                "Before substituting the abstract policy with a group of policies, those policies are sorted based on heuristic values (line 33).",
                "Similar type of abstraction based best response computation is adopted at leaf agents (lines 3-14). 4.4 Value ApproXimation (VAX) In this section, we present an approximate enhancement to SPIDER called VAX.",
                "The input to this technique is an approximation parameter , which determines the difference from the optimal solution quality.",
                "This approximation parameter is used at each agent for pruning out joint policies.",
                "The pruning mechanism in SPIDER and SPIDER-Abs dictates that a joint policy be pruned only if the threshold is exactly greater than the heuristic value.",
                "However, the 826 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Figure 3: Example of abstraction for (a) HBA (Horizon Based Abstraction) and (b) NBA (Node Based Abstraction) idea in this technique is to prune out joint a policy if the following condition is satisfied: threshold + > ˆv[πi , πi− ].",
                "Apart from the pruning condition, VAX is the same as SPIDER/SPIDER-ABS.",
                "In the example of Figure 2, if the heuristic value for the second joint policy (or second search tree node) in level 2 were 238 instead of 232, then that policy could not be be pruned using SPIDER or SPIDER-Abs.",
                "However, in VAX with an approximation parameter of 5, the joint policy in consideration would also be pruned.",
                "This is because the threshold (234) at that juncture plus the approximation parameter (5), i.e. 239 would have been greater than the heuristic value for that joint policy (238).",
                "It can be noted from the example (just discussed) that this kind of pruning can lead to fewer explorations and hence lead to an improvement in the overall run-time performance.",
                "However, this can entail a sacrifice in the quality of the solution because this technique can prune out a candidate optimal solution.",
                "A bound on the error introduced by this approximate algorithm as a function of , is provided by Proposition 3. 4.5 Percentage ApproXimation (PAX) In this section, we present the second approximation enhancement over SPIDER called PAX.",
                "Input to this technique is a parameter, δ that represents the minimum percentage of the optimal solution quality that is desired.",
                "Output of this technique is a policy with an expected value that is at least δ% of the optimal solution quality.",
                "A policy is pruned if the following condition is satisfied: threshold > δ 100 ˆv[πi , πi− ].",
                "Like in VAX, the only difference between PAX and SPIDER/SPIDER-ABS is this pruning condition.",
                "Again in Figure 2, if the heuristic value for the second search tree node in level 2 were 238 instead of 232, then PAX with an input parameter of 98% would be able to prune that search tree node (since 98 100 ∗238 < 234).",
                "This type of pruning leads to fewer explorations and hence an improvement in run-time performance, while potentially leading to a loss in quality of the solution.",
                "Proposition 4 provides the bound on quality loss. 4.6 Theoretical Results PROPOSITION 1.",
                "Heuristic provided using the centralized MDP heuristic is admissible.",
                "Proof.",
                "For the value provided by the heuristic to be admissible, it should be an over estimate of the expected value for a joint policy.",
                "Thus, we need to show that: For l ∈ Ei+ ∪ Ei− : ˆvt l ≥ vt l (refer to notation in Section 4.2) We use mathematical induction on t to prove this.",
                "Base case: t = T − 1.",
                "Irrespective of whether l ∈ Ei− or l ∈ Ei+ , ˆrt l is computed by maximizing over all actions of the agents in Tree(i), while rt l is computed for fixed policies of the same agents.",
                "Hence, ˆrt l ≥ rt l and also ˆvt l ≥ vt l .",
                "Assumption: Proposition holds for t = η, where 1 ≤ η < T − 1.",
                "We now have to prove that the proposition holds for t = η − 1.",
                "We show the proof for l ∈ Ei− and similar reasoning can be adopted to prove for l ∈ Ei+ .",
                "The heuristic value function for l ∈ Ei− is provided by the following equation: ˆvη−1 l =ˆrη−1 l + max al2 ω η l1 ,s η l ˆpη−1 l1 ˆpη−1 l2 pη−1 u ˆvη l Rewriting the RHS and using Eqn 2 (in Section 4.2) =ˆrη−1 l + max al2 ω η l1 ,s η l pη−1 u pη−1 l1 ˆpη−1 l2 ˆvη l =ˆrη−1 l + ω η l1 ,s η l pη−1 u pη−1 l1 max al2 ˆpη−1 l2 ˆvη l Since maxal2 ˆpη−1 l2 ˆvη l ≥ ωl2 oη−1 l2 ˆpη−1 l2 ˆvη l and pη−1 l2 = oη−1 l2 ˆpη−1 l2 ≥ˆrη−1 l + ω η l1 ,s η l pη−1 u pη−1 l1 ωl2 pη−1 l2 ˆvη l Since ˆvη l ≥ vη l (from the assumption) ≥ˆrη−1 l + ω η l1 ,s η l pη−1 u pη−1 l1 ωl2 pη−1 l2 vη l Since ˆrη−1 l ≥ rη−1 l (by definition) ≥rη−1 l + ω η l1 ,s η l pη−1 u pη−1 l1 ωl2 pη−1 l2 vη l =rη−1 l + (ω η l ,s η l ) pη−1 u pη−1 l1 pη−1 l2 vη l = vη−1 l Thus proved.",
                "PROPOSITION 2.",
                "SPIDER provides an optimal solution.",
                "Proof.",
                "SPIDER examines all possible joint policies given the interaction structure of the agents.",
                "The only exception being when a joint policy is pruned based on the heuristic value.",
                "Thus, as long as a candidate optimal policy is not pruned, SPIDER will return an optimal policy.",
                "As proved in Proposition 1, the expected value for a joint policy is always an upper bound.",
                "Hence when a joint policy is pruned, it cannot be an optimal solution.",
                "PROPOSITION 3.",
                "Error bound on the solution quality for VAX (implemented over SPIDER-ABS) with an approximation parameter of is ρ , where ρ is the number of leaf nodes in the DFS tree.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 827 Proof.",
                "We prove this proposition using mathematical induction on the depth of the DFS tree.",
                "Base case: depth = 1 (i.e. one node).",
                "Best response is computed by iterating through all policies, Πk.",
                "A policy,πk is pruned if ˆv[πk, πk− ] < threshold + .",
                "Thus the best response policy computed by VAX would be at most away from the optimal best response.",
                "Hence the proposition holds for the base case.",
                "Assumption: Proposition holds for d, where 1 ≤ depth ≤ d. We now have to prove that the proposition holds for d + 1.",
                "Without loss of generality, lets assume that the root node of this tree has k children.",
                "Each of this children is of depth ≤ d, and hence from the assumption, the error introduced in kth child is ρk , where ρk is the number of leaf nodes in kth child of the root.",
                "Therefore, ρ = k ρk, where ρ is the number of leaf nodes in the tree.",
                "In SPIDER-ABS, threshold at the root agent, thresspider = k v[πk+ , πk− ].",
                "However, with VAX the threshold at the root agent will be (in the worst case), threshvax = k v[πk+ , πk− ]− k ρk .",
                "Hence, with VAX a joint policy is pruned at the root agent if ˆv[πroot, πroot− ] < threshvax + ⇒ ˆv[πroot, πroot− ] < threshspider − (( k ρk) − 1) ≤ threshspider − ( k ρk) ≤ threshspider − ρ .",
                "Hence proved.",
                "PROPOSITION 4.",
                "For PAX (implemented over SPIDER-ABS) with an input parameter of δ, the solution quality is at least δ 100 v[πroot+,∗ ], where v[πroot+,∗ ] denotes the optimal solution quality.",
                "Proof.",
                "We prove this proposition using mathematical induction on the depth of the DFS tree.",
                "Base case: depth = 1 (i.e. one node).",
                "Best response is computed by iterating through all policies, Πk.",
                "A policy,πk is pruned if δ 100 ˆv[πk, πk− ] < threshold.",
                "Thus the best response policy computed by PAX would be at least δ 100 times the optimal best response.",
                "Hence the proposition holds for the base case.",
                "Assumption: Proposition holds for d, where 1 ≤ depth ≤ d. We now have to prove that the proposition holds for d + 1.",
                "Without loss of generality, lets assume that the root node of this tree has k children.",
                "Each of this children is of depth ≤ d, and hence from the assumption, the solution quality in the kth child is at least δ 100 v[πk+,∗ , πk− ] for PAX.",
                "With SPIDER-ABS, a joint policy is pruned at the root agent if ˆv[πroot, πroot− ] < k v[πk+,∗ , πk− ].",
                "However with PAX, a joint policy is pruned if δ 100 ˆv[πroot, πroot− ] < k δ 100 v[πk+,∗ , πk− ] ⇒ ˆv[πroot, πroot− ] < k v[πk+,∗ , πk− ].",
                "Since the pruning condition at the root agent in PAX is the same as the one in SPIDER-ABS, there is no error introduced at the root agent and all the error is introduced in the children.",
                "Thus, overall solution quality is at least δ 100 of the optimal solution.",
                "Hence proved. 5.",
                "EXPERIMENTAL RESULTS All our experiments were conducted on the sensor network domain from Section 2.",
                "The five network configurations employed are shown in Figure 4.",
                "Algorithms that we experimented with are GOA, SPIDER, SPIDER-ABS, PAX and VAX.",
                "We compare against GOA because it is the only global optimal algorithm that considers more than two agents.",
                "We performed two sets of experiments: (i) firstly, we compared the run-time performance of the above algorithms and (ii) secondly, we experimented with PAX and VAX to study the tradeoff between run-time and solution quality.",
                "Experiments were terminated after 10000 seconds1 .",
                "Figure 5(a) provides run-time comparisons between the optimal algorithms GOA, SPIDER, SPIDER-Abs and the approximate algorithms, PAX ( of 30) and VAX(δ of 80).",
                "X-axis denotes the 1 Machine specs for all experiments: Intel Xeon 3.6 GHZ processor, 2GB RAM sensor network configuration used, while Y-axis indicates the runtime (on a log-scale).",
                "The time horizon of policy computation was 3.",
                "For each configuration (3-chain, 4-chain, 4-star and 5-star), there are five bars indicating the time taken by GOA, SPIDER, SPIDERAbs, PAX and VAX.",
                "GOA did not terminate within the time limit for 4-star and 5-star configurations.",
                "SPIDER-Abs dominated the SPIDER and GOA for all the configurations.",
                "For instance, in the 3chain configuration, SPIDER-ABS provides 230-fold speedup over GOA and 2-fold speedup over SPIDER and for the 4-chain configuration it provides 58-fold speedup over GOA and 2-fold speedup over SPIDER.",
                "The two approximation approaches, VAX and PAX provided further improvement in performance over SPIDER-Abs.",
                "For instance, in the 5-star configuration VAX provides a 15-fold speedup and PAX provides a 8-fold speedup over SPIDER-Abs.",
                "Figures 5(b) provides a comparison of the solution quality obtained using the different algorithms for the problems tested in Figure 5(a).",
                "X-axis denotes the sensor network configuration while Y-axis indicates the solution quality.",
                "Since GOA, SPIDER, and SPIDER-Abs are all global optimal algorithms, the solution quality is the same for all those algorithms.",
                "For 5-P configuration, the global optimal algorithms did not terminate within the limit of 10000 seconds, so the bar for optimal quality indicates an upper bound on the optimal solution quality.",
                "With both the approximations, we obtained a solution quality that was close to the optimal solution quality.",
                "In 3-chain and 4-star configurations, it is remarkable that both PAX and VAX obtained almost the same actual quality as the global optimal algorithms, despite the approximation parameter and δ.",
                "For other configurations as well, the loss in quality was less than 20% of the optimal solution quality.",
                "Figure 5(c) provides the time to solution with PAX (for varying epsilons).",
                "X-axis denotes the approximation parameter, δ (percentage to optimal) used, while Y-axis denotes the time taken to compute the solution (on a log-scale).",
                "The time horizon for all the configurations was 4.",
                "As δ was decreased from 70 to 30, the time to solution decreased drastically.",
                "For instance, in the 3-chain case there was a total speedup of 170-fold when the δ was changed from 70 to 30.",
                "Interestingly, even with a low δ of 30%, the actual solution quality remained equal to the one obtained at 70%.",
                "Figure 5(d) provides the time to solution for all the configurations with VAX (for varying epsilons).",
                "X-axis denotes the approximation parameter, used, while Y-axis denotes the time taken to compute the solution (on a log-scale).",
                "The time horizon for all the configurations was 4.",
                "As was increased, the time to solution decreased drastically.",
                "For instance, in the 4-star case there was a total speedup of 73-fold when the was changed from 60 to 140.",
                "Again, the actual solution quality did not change with varying epsilon.",
                "Figure 4: Sensor network configurations 828 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Figure 5: Comparison of GOA, SPIDER, SPIDER-Abs and VAX for T = 3 on (a) Runtime and (b) Solution quality; (c) Time to solution for PAX with varying percentage to optimal for T=4 (d) Time to solution for VAX with varying epsilon for T=4 6.",
                "SUMMARY AND RELATED WORK This paper presents four algorithms SPIDER, SPIDER-ABS, PAX and VAX that provide a novel combination of features for policy search in distributed POMDPs: (i) exploiting agent interaction structure given a network of agents (i.e. easier scale-up to larger number of agents); (ii) using branch and bound search with an MDP based heuristic function; (iii) utilizing abstraction to improve runtime performance without sacrificing solution quality; (iv) providing a priori percentage bounds on quality of solutions using PAX; and (v) providing expected value bounds on the quality of solutions using VAX.",
                "These features allow for systematic tradeoff of solution quality for run-time in networks of agents operating under uncertainty.",
                "Experimental results show orders of magnitude improvement in performance over previous global optimal algorithms.",
                "Researchers have typically employed two types of techniques for solving distributed POMDPs.",
                "The first set of techniques compute global optimal solutions.",
                "Hansen et al. [5] present an algorithm based on dynamic programming and iterated elimination of dominant policies, that provides optimal solutions for distributed POMDPs.",
                "Szer et al. [13] provide an optimal heuristic search method for solving Decentralized POMDPs.",
                "This algorithm is based on the combination of a classical heuristic search algorithm, A∗ and decentralized control theory.",
                "The key differences between SPIDER and MAA* are: (a) Enhancements to SPIDER (VAX and PAX) provide for quality guaranteed approximations, while MAA* is a global optimal algorithm and hence involves significant computational complexity; (b) Due to MAA*s inability to exploit interaction structure, it was illustrated only with two agents.",
                "However, SPIDER has been illustrated for networks of agents; and (c) SPIDER explores the joint policy one agent at a time, while MAA* expands it one time step at a time (simultaneously for all the agents).",
                "The second set of techniques seek approximate policies.",
                "EmeryMontemerlo et al. [4] approximate POSGs as a series of one-step Bayesian games using heuristics to approximate future value, trading off limited lookahead for computational efficiency, resulting in locally optimal policies (with respect to the selected heuristic).",
                "Nair et al. [9]s JESP algorithm uses dynamic programming to reach a local optimum solution for finite horizon decentralized POMDPs.",
                "Peshkin et al. [11] and Bernstein et al. [2] are examples of policy search techniques that search for locally optimal policies.",
                "Though all the above techniques improve the efficiency of policy computation considerably, they are unable to provide error bounds on the quality of the solution.",
                "This aspect of quality bounds differentiates SPIDER from all the above techniques.",
                "Acknowledgements.",
                "This material is based upon work supported by the Defense Advanced Research Projects Agency (DARPA), through the Department of the Interior, NBC, Acquisition Services Division under Contract No.",
                "NBCHD030010.",
                "The views and conclusions contained in this document are those of the authors, and should not be interpreted as representing the official policies, either expressed or implied, of the Defense Advanced Research Projects Agency or the U.S. Government. 7.",
                "REFERENCES [1] R. Becker, S. Zilberstein, V. Lesser, and C.V. Goldman.",
                "Solving transition independent decentralized Markov decision processes.",
                "JAIR, 22:423-455, 2004. [2] D. S. Bernstein, E.A.",
                "Hansen, and S. Zilberstein.",
                "Bounded policy iteration for decentralized POMDPs.",
                "In IJCAI, 2005. [3] D. S. Bernstein, S. Zilberstein, and N. Immerman.",
                "The complexity of decentralized control of MDPs.",
                "In UAI, 2000. [4] R. Emery-Montemerlo, G. Gordon, J. Schneider, and S. Thrun.",
                "Approximate solutions for partially observable stochastic games with common payoffs.",
                "In AAMAS, 2004. [5] E. Hansen, D. Bernstein, and S. Zilberstein.",
                "Dynamic programming for partially observable stochastic games.",
                "In AAAI, 2004. [6] V. Lesser, C. Ortiz, and M. Tambe.",
                "Distributed sensor nets: A multiagent perspective.",
                "Kluwer, 2003. [7] R. Maheswaran, M. Tambe, E. Bowring, J. Pearce, and P. Varakantham.",
                "Taking dcop to the real world : Efficient complete solutions for distributed event scheduling.",
                "In AAMAS, 2004. [8] P. J. Modi, W. Shen, M. Tambe, and M. Yokoo.",
                "An asynchronous complete method for distributed constraint optimization.",
                "In AAMAS, 2003. [9] R. Nair, D. Pynadath, M. Yokoo, M. Tambe, and S. Marsella.",
                "Taming decentralized POMDPs: Towards efficient policy computation for multiagent settings.",
                "In IJCAI, 2003. [10] R. Nair, P. Varakantham, M. Tambe, and M. Yokoo.",
                "Networked distributed POMDPs: A synthesis of distributed constraint optimization and POMDPs.",
                "In AAAI, 2005. [11] L. Peshkin, N. Meuleau, K.-E. Kim, and L. Kaelbling.",
                "Learning to cooperate via policy search.",
                "In UAI, 2000. [12] A. Petcu and B. Faltings.",
                "A scalable method for multiagent constraint optimization.",
                "In IJCAI, 2005. [13] D. Szer, F. Charpillet, and S. Zilberstein.",
                "MAA*: A heuristic search algorithm for solving decentralized POMDPs.",
                "In IJCAI, 2005.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 829"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [],
            "translated_text": "",
            "candidates": [],
            "error": []
        },
        "policy search": {
            "translated_key": "búsqueda de políticas",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Letting loose a SPIDER on a network of POMDPs: Generating quality guaranteed policies Pradeep Varakantham, Janusz Marecki, Yuichi Yabu∗ , Milind Tambe, Makoto Yokoo∗ University of Southern California, Los Angeles, CA 90089, {varakant, marecki, tambe}@usc.edu ∗ Dept.",
                "of Intelligent Systems, Kyushu University, Fukuoka, 812-8581 Japan, yokoo@is.kyushu-u.ac.jp ABSTRACT Distributed Partially Observable Markov Decision Problems (Distributed POMDPs) are a popular approach for modeling multi-agent systems acting in uncertain domains.",
                "Given the significant complexity of solving distributed POMDPs, particularly as we scale up the numbers of agents, one popular approach has focused on approximate solutions.",
                "Though this approach is efficient, the algorithms within this approach do not provide any guarantees on solution quality.",
                "A second less popular approach focuses on global optimality, but typical results are available only for two agents, and also at considerable computational cost.",
                "This paper overcomes the limitations of both these approaches by providing SPIDER, a novel combination of three key features for policy generation in distributed POMDPs: (i) it exploits agent interaction structure given a network of agents (i.e. allowing easier scale-up to larger number of agents); (ii) it uses a combination of heuristics to speedup <br>policy search</br>; and (iii) it allows quality guaranteed approximations, allowing a systematic tradeoff of solution quality for time.",
                "Experimental results show orders of magnitude improvement in performance when compared with previous global optimal algorithms.",
                "Categories and Subject Descriptors I.2.11 [Artificial Intelligence]: Distributed Artificial IntelligenceMulti-agent Systems General Terms Algorithms, Theory 1.",
                "INTRODUCTION Distributed Partially Observable Markov Decision Problems (Distributed POMDPs) are emerging as a popular approach for modeling sequential decision making in teams operating under uncertainty [9, 4, 1, 2, 13].",
                "The uncertainty arises on account of nondeterminism in the outcomes of actions and because the world state may only be partially (or incorrectly) observable.",
                "Unfortunately, as shown by Bernstein et al. [3], the problem of finding the optimal joint policy for general distributed POMDPs is NEXP-Complete.",
                "Researchers have attempted two different types of approaches towards solving these models.",
                "The first category consists of highly efficient approximate techniques, that may not reach globally optimal solutions [2, 9, 11].",
                "The key problem with these techniques has been their inability to provide any guarantees on the quality of the solution.",
                "In contrast, the second less popular category of approaches has focused on a global optimal result [13, 5, 10].",
                "Though these approaches obtain optimal solutions, they typically consider only two agents.",
                "Furthermore, they fail to exploit structure in the interactions of the agents and hence are severely hampered with respect to scalability when considering more than two agents.",
                "To address these problems with the existing approaches, we propose approximate techniques that provide guarantees on the quality of the solution while focussing on a network of more than two agents.",
                "We first propose the basic SPIDER (Search for Policies In Distributed EnviRonments) algorithm.",
                "There are two key novel features in SPIDER: (i) it is a branch and bound heuristic search technique that uses a MDP-based heuristic function to search for an optimal joint policy; (ii) it exploits network structure of agents by organizing agents into a Depth First Search (DFS) pseudo tree and takes advantage of the independence in the different branches of the DFS tree.",
                "We then provide three enhancements to improve the efficiency of the basic SPIDER algorithm while providing guarantees on the quality of the solution.",
                "The first enhancement uses abstractions for speedup, but does not sacrifice solution quality.",
                "In particular, it initially performs branch and bound search on abstract policies and then extends to complete policies.",
                "The second enhancement obtains speedups by sacrificing solution quality, but within an input parameter that provides the tolerable expected value difference from the optimal solution.",
                "The third enhancement is again based on bounding the search for efficiency, however with a tolerance parameter that is provided as a percentage of optimal.",
                "We experimented with the sensor network domain presented in Nair et al. [10], a domain representative of an important class of problems with networks of agents working in uncertain environments.",
                "In our experiments, we illustrate that SPIDER dominates an existing global optimal approach called GOA [10], the only known global optimal algorithm with demonstrated experimental results for more than two agents.",
                "Furthermore, we demonstrate that abstraction improves the performance of SPIDER significantly (while providing optimal solutions).",
                "We finally demonstrate a key feature of SPIDER: by utilizing the approximation enhancements it enables principled tradeoffs in run-time versus solution quality. 822 978-81-904262-7-5 (RPS) c 2007 IFAAMAS 2.",
                "DOMAIN: DISTRIBUTED SENSOR NETS Distributed sensor networks are a large, important class of domains that motivate our work.",
                "This paper focuses on a set of target tracking problems that arise in certain types of sensor networks [6] first introduced in [10].",
                "Figure 1 shows a specific problem instance within this type consisting of three sensors.",
                "Here, each sensor node can scan in one of four directions: North, South, East or West (see Figure 1).",
                "To track a target and obtain associated reward, two sensors with overlapping scanning areas must coordinate by scanning the same area simultaneously.",
                "In Figure 1, to track a target in Loc11, sensor1 needs to scan East and sensor2 needs to scan West simultaneously.",
                "Thus, sensors have to act in a coordinated fashion.",
                "We assume that there are two independent targets and that each targets movement is uncertain and unaffected by the sensor agents.",
                "Based on the area it is scanning, each sensor receives observations that can have false positives and false negatives.",
                "The sensors observations and transitions are independent of each others actions e.g.the observations that sensor1 receives are independent of sensor2s actions.",
                "Each agent incurs a cost for scanning whether the target is present or not, but no cost if it turns off.",
                "Given the sensors observational uncertainty, the targets uncertain transitions and the distributed nature of the sensor nodes, these sensor nets provide a useful domains for applying distributed POMDP models.",
                "Figure 1: A 3-chain sensor configuration 3.",
                "BACKGROUND 3.1 Model: Network Distributed POMDP The ND-POMDP model was introduced in [10], motivated by domains such as the sensor networks introduced in Section 2.",
                "It is defined as the tuple S, A, P, Ω, O, R, b , where S = ×1≤i≤nSi × Su is the set of world states.",
                "Si refers to the set of local states of agent i and Su is the set of unaffectable states.",
                "Unaffectable state refers to that part of the world state that cannot be affected by the agents actions, e.g. environmental factors like target locations that no agent can control.",
                "A = ×1≤i≤nAi is the set of joint actions, where Ai is the set of action for agent i. ND-POMDP assumes transition independence, where the transition function is defined as P(s, a, s ) = Pu(su, su) · 1≤i≤n Pi(si, su, ai, si), where a = a1, . . . , an is the joint action performed in state s = s1, . . . , sn, su and s = s1, . . . , sn, su is the resulting state.",
                "Ω = ×1≤i≤nΩi is the set of joint observations where Ωi is the set of observations for agents i. Observational independence is assumed in ND-POMDPs i.e., the joint observation function is defined as O(s, a, ω) = 1≤i≤n Oi(si, su, ai, ωi), where s = s1, . . . , sn, su is the world state that results from the agents performing a = a1, . . . , an in the previous state, and ω = ω1, . . . , ωn ∈ Ω is the observation received in state s. This implies that each agents observation depends only on the unaffectable state, its local action and on its resulting local state.",
                "The reward function, R, is defined as R(s, a) = l Rl(sl1, . . . , slr, su, al1, . . . , alr ), where each l could refer to any sub-group of agents and r = |l|.",
                "Based on the reward function, an interaction hypergraph is constructed.",
                "A hyper-link, l, exists between a subset of agents for all Rl that comprise R. The interaction hypergraph is defined as G = (Ag, E), where the agents, Ag, are the vertices and E = {l|l ⊆ Ag ∧ Rl is a component of R} are the edges.",
                "The initial belief state (distribution over the initial state), b, is defined as b(s) = bu(su) · 1≤i≤n bi(si), where bu and bi refer to the distribution over initial unaffectable state and agent is initial belief state, respectively.",
                "The goal in ND-POMDP is to compute the joint policy π = π1, . . . , πn that maximizes teams expected reward over a finite horizon T starting from the belief state b.",
                "An ND-POMDP is similar to an n-ary Distributed Constraint Optimization Problem (DCOP)[8, 12] where the variable at each node represents the policy selected by an individual agent, πi with the domain of the variable being the set of all local policies, Πi.",
                "The reward component Rl where |l| = 1 can be thought of as a local constraint while the reward component Rl where l > 1 corresponds to a non-local constraint in the constraint graph. 3.2 Algorithm: Global Optimal Algorithm (GOA) In previous work, GOA has been defined as a global optimal algorithm for ND-POMDPs [10].",
                "We will use GOA in our experimental comparisons, since GOA is a state-of-the-art global optimal algorithm, and in fact the only one with experimental results available for networks of more than two agents.",
                "GOA borrows from a global optimal DCOP algorithm called DPOP[12].",
                "GOAs message passing follows that of DPOP.",
                "The first phase is the UTIL propagation, where the utility messages, in this case values of policies, are passed up from the leaves to the root.",
                "Value for a policy at an agent is defined as the sum of best response values from its children and the joint policy reward associated with the parent policy.",
                "Thus, given a policy for a parent node, GOA requires an agent to iterate through all its policies, finding the best response policy and returning the value to the parent - while at the parent node, to find the best policy, an agent requires its children to return their best responses to each of its policies.",
                "This UTIL propagation process is repeated at each level in the tree, until the root exhausts all its policies.",
                "In the second phase of VALUE propagation, where the optimal policies are passed down from the root till the leaves.",
                "GOA takes advantage of the local interactions in the interaction graph, by pruning out unnecessary joint policy evaluations (associated with nodes not connected directly in the tree).",
                "Since the interaction graph captures all the reward interactions among agents and as this algorithm iterates through all the relevant joint policy evaluations, this algorithm yields a globally optimal solution. 4.",
                "SPIDER As mentioned in Section 3.1, an ND-POMDP can be treated as a DCOP, where the goal is to compute a joint policy that maximizes the overall joint reward.",
                "The brute-force technique for computing an optimal policy would be to examine the expected values for all possible joint policies.",
                "The key idea in SPIDER is to avoid computation of expected values for the entire space of joint policies, by utilizing upper bounds on the expected values of policies and the interaction structure of the agents.",
                "Akin to some of the algorithms for DCOP [8, 12], SPIDER has a pre-processing step that constructs a DFS tree corresponding to the given interaction structure.",
                "Note that these DFS trees are pseudo trees [12] that allow links between ancestors and children.",
                "We employ the Maximum Constrained Node (MCN) heuristic used in the DCOP algorithm, ADOPT [8], however other heuristics (such as MLSP heuristic from [7]) can also be employed.",
                "MCN heuristic tries to place agents with more number of constraints at the top of the tree.",
                "This tree governs how the search for the optimal joint polThe Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 823 icy proceeds in SPIDER.",
                "The algorithms presented in this paper are easily extendable to hyper-trees, however for expository purposes, we assume binary trees.",
                "SPIDER is an algorithm for centralized planning and distributed execution in distributed POMDPs.",
                "In this paper, we employ the following notation to denote policies and expected values: Ancestors(i) ⇒ agents from i to the root (not including i).",
                "Tree(i) ⇒ agents in the sub-tree (not including i) for which i is the root. πroot+ ⇒ joint policy of all agents. πi+ ⇒ joint policy of all agents in Tree(i) ∪ i. πi− ⇒ joint policy of agents that are in Ancestors(i). πi ⇒ policy of the ith agent. ˆv[πi, πi− ] ⇒ upper bound on the expected value for πi+ given πi and policies of ancestor agents i.e. πi− . ˆvj[πi, πi− ] ⇒ upper bound on the expected value for πi+ from the jth child. v[πi, πi− ] ⇒ expected value for πi given policies of ancestor agents, πi− . v[πi+ , πi− ] ⇒ expected value for πi+ given policies of ancestor agents, πi− . vj[πi+ , πi− ] ⇒ expected value for πi+ from the jth child.",
                "Figure 2: Execution of SPIDER, an example 4.1 Outline of SPIDER SPIDER is based on the idea of branch and bound search, where the nodes in the search tree represent partial/complete joint policies.",
                "Figure 2 shows an example search tree for the SPIDER algorithm, using an example of the three agent chain.",
                "Before SPIDER begins its search we create a DFS tree (i.e. pseudo tree) from the three agent chain, with the middle agent as the root of this tree.",
                "SPIDER exploits the structure of this DFS tree while engaging in its search.",
                "Note that in our example figure, each agent is assigned a policy with T=2.",
                "Thus, each rounded rectange (search tree node) indicates a partial/complete joint policy, a rectangle indicates an agent and the ovals internal to an agent show its policy.",
                "Heuristic or actual expected value for a joint policy is indicated in the top right corner of the rounded rectangle.",
                "If the number is italicized and underlined, it implies that the actual expected value of the joint policy is provided.",
                "SPIDER begins with no policy assigned to any of the agents (shown in the level 1 of the search tree).",
                "Level 2 of the search tree indicates that the joint policies are sorted based on upper bounds computed for root agents policies.",
                "Level 3 shows one SPIDER search node with a complete joint policy (a policy assigned to each of the agents).",
                "The expected value for this joint policy is used to prune out the nodes in level 2 (the ones with upper bounds < 234) When creating policies for each non-leaf agent i, SPIDER potentially performs two steps: 1.",
                "Obtaining upper bounds and sorting: In this step, agent i computes upper bounds on the expected values, ˆv[πi, πi− ] of the joint policies πi+ corresponding to each of its policy πi and fixed ancestor policies.",
                "An MDP based heuristic is used to compute these upper bounds on the expected values.",
                "Detailed description about this MDP heuristic is provided in Section 4.2.",
                "All policies of agent i, Πi are then sorted based on these upper bounds (also referred to as heuristic values henceforth) in descending order.",
                "Exploration of these policies (in step 2 below) are performed in this descending order.",
                "As indicated in the level 2 of the search tree (of Figure 2), all the joint policies are sorted based on the heuristic values, indicated in the top right corner of each joint policy.",
                "The intuition behind sorting and then exploring policies in descending order of upper bounds, is that the policies with higher upper bounds could yield joint policies with higher expected values. 2.",
                "Exploration and Pruning: Exploration implies computing the best response joint policy πi+,∗ corresponding to fixed ancestor policies of agent i, πi− .",
                "This is performed by iterating through all policies of agent i i.e.",
                "Πi and summing two quantities for each policy: (i) the best response for all of is children (obtained by performing steps 1 and 2 at each of the child nodes); (ii) the expected value obtained by i for fixed policies of ancestors.",
                "Thus, exploration of a policy πi yields actual expected value of a joint policy, πi+ represented as v[πi+ , πi− ].",
                "The policy with the highest expected value is the best response policy.",
                "Pruning refers to avoiding exploring all policies (or computing expected values) at agent i by using the current best expected value, vmax [πi+ , πi− ].",
                "Henceforth, this vmax [πi+ , πi− ] will be referred to as threshold.",
                "A policy, πi need not be explored if the upper bound for that policy, ˆv[πi, πi− ] is less than the threshold.",
                "This is because the expected value for the best joint policy attainable for that policy will be less than the threshold.",
                "On the other hand, when considering a leaf agent, SPIDER computes the best response policy (and consequently its expected value) corresponding to fixed policies of its ancestors, πi− .",
                "This is accomplished by computing expected values for each of the policies (corresponding to fixed policies of ancestors) and selecting the highest expected value policy.",
                "In Figure 2, SPIDER assigns best response policies to leaf agents at level 3.",
                "The policy for the left leaf agent is to perform action East at each time step in the policy, while the policy for the right leaf agent is to perform Off at each time step.",
                "These best response policies from the leaf agents yield an actual expected value of 234 for the complete joint policy.",
                "Algorithm 1 provides the pseudo code for SPIDER.",
                "This algorithm outputs the best joint policy, πi+,∗ (with an expected value greater than threshold) for the agents in Tree(i).",
                "Lines 3-8 compute the best response policy of a leaf agent i, while lines 9-23 computes the best response joint policy for agents in Tree(i).",
                "This best response computation for a non-leaf agent i includes: (a) Sorting of policies (in descending order) based on heuristic values on line 11; (b) Computing best response policies at each of the children for fixed policies of agent i in lines 16-20; and (c) Maintaining 824 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Algorithm 1 SPIDER(i, πi− , threshold) 1: πi+,∗ ← null 2: Πi ← GET-ALL-POLICIES (horizon, Ai, Ωi) 3: if IS-LEAF(i) then 4: for all πi ∈ Πi do 5: v[πi, πi−] ← JOINT-REWARD (πi, πi−) 6: if v[πi, πi−] > threshold then 7: πi+,∗ ← πi 8: threshold ← v[πi, πi−] 9: else 10: children ← CHILDREN (i) 11: ˆΠi ← UPPER-BOUND-SORT(i, Πi, πi−) 12: for all πi ∈ ˆΠi do 13: ˜πi+ ← πi 14: if ˆv[πi, πi−] < threshold then 15: Go to line 12 16: for all j ∈ children do 17: jThres ← threshold − v[πi, πi−]− Σk∈children,k=j ˆvk[πi, πi−] 18: πj+,∗ ← SPIDER(j, πi πi−, jThres) 19: ˜πi+ ← ˜πi+ πj+,∗ 20: ˆvj[πi, πi−] ← v[πj+,∗, πi πi−] 21: if v[˜πi+, πi−] > threshold then 22: threshold ← v[˜πi+, πi−] 23: πi+,∗ ← ˜πi+ 24: return πi+,∗ Algorithm 2 UPPER-BOUND-SORT(i, Πi, πi− ) 1: children ← CHILDREN (i) 2: ˆΠi ← null /* Stores the sorted list */ 3: for all πi ∈ Πi do 4: ˆv[πi, πi−] ← JOINT-REWARD (πi, πi−) 5: for all j ∈ children do 6: ˆvj[πi, πi−] ← UPPER-BOUND(i, j, πi πi−) 7: ˆv[πi, πi−] + ← ˆvj[πi, πi−] 8: ˆΠi ← INSERT-INTO-SORTED (πi, ˆΠi) 9: return ˆΠi best expected value, joint policy in lines 21-23.",
                "Algorithm 2 provides the pseudo code for sorting policies based on the upper bounds on the expected values of joint policies.",
                "Expected value for an agent i consists of two parts: value obtained from ancestors and value obtained from its children.",
                "Line 4 computes the expected value obtained from ancestors of the agent (using JOINT-REWARD function), while lines 5-7 compute the heuristic value from the children.",
                "The sum of these two parts yields an upper bound on the expected value for agent i, and line 8 of the algorithm sorts the policies based on these upper bounds. 4.2 MDP based heuristic function The heuristic function quickly provides an upper bound on the expected value obtainable from the agents in Tree(i).",
                "The subtree of agents is a distributed POMDP in itself and the idea here is to construct a centralized MDP corresponding to the (sub-tree) distributed POMDP and obtain the expected value of the optimal policy for this centralized MDP.",
                "To reiterate this in terms of the agents in DFS tree interaction structure, we assume full observability for the agents in Tree(i) and for fixed policies of the agents in {Ancestors(i) ∪ i}, we compute the joint value ˆv[πi+ , πi− ] .",
                "We use the following notation for presenting the equations for computing upper bounds/heuristic values (for agents i and k): Let Ei− denote the set of links between agents in {Ancestors(i)∪ i} and Tree(i), Ei+ denote the set of links between agents in Tree(i).",
                "Also, if l ∈ Ei− , then l1 is the agent in {Ancestors(i)∪ i} and l2 is the agent in Tree(i), that l connects together.",
                "We first compact the standard notation: ot k =Ok(st+1 k , st+1 u , πk(ωt k), ωt+1 k ) (1) pt k =Pk(st k, st u, πk(ωt k), st+1 k ) · ot k pt u =P(st u, st+1 u ) st l = st l1 , st l2 , st u ; ωt l = ωt l1 , ωt l2 rt l =Rl(st l , πl1 (ωt l1 ), πl2 (ωt l2 )) vt l =V t πl (st l , st u, ωt l1 , ωt l2 ) Depending on the location of agent k in the agent tree we have the following cases: IF k ∈ {Ancestors(i) ∪ i}, ˆpt k = pt k, (2) IF k ∈ Tree(i), ˆpt k = Pk(st k, st u, πk(ωt k), st+1 k ) IF l ∈ Ei− , ˆrt l = max {al2 } Rl(st l , πl1 (ωt l1 ), al2 ) IF l ∈ Ei+ , ˆrt l = max {al1 ,al2 } Rl(st l , al1 , al2 ) The value function for an agent i executing the joint policy πi+ at time η − 1 is provided by the equation: V η−1 πi+ (sη−1 , ωη−1 ) = l∈Ei− vη−1 l + l∈Ei+ vη−1 l (3) where vη−1 l = rη−1 l + ω η l ,sη pη−1 l1 pη−1 l2 pη−1 u vη l Algorithm 3 UPPER-BOUND (i, j, πj− ) 1: val ← 0 2: for all l ∈ Ej− ∪ Ej+ do 3: if l ∈ Ej− then πl1 ← φ 4: for all s0 l do 5: val + ← startBel[s0 l ]· UPPER-BOUND-TIME (i, s0 l , j, πl1 , ) 6: return val Algorithm 4 UPPER-BOUND-TIME (i, st l , j, πl1 , ωt l1 ) 1: maxV al ← −∞ 2: for all al1 , al2 do 3: if l ∈ Ei− and l ∈ Ej− then al1 ← πl1 (ωt l1 ) 4: val ← GET-REWARD(st l , al1 , al2 ) 5: if t < πi.horizon − 1 then 6: for all st+1 l , ωt+1 l1 do 7: futV al←pt u ˆpt l1 ˆpt l2 8: futV al ∗ ← UPPER-BOUND-TIME(st+1 l , j, πl1 , ωt l1 ωt+1 l1 ) 9: val + ← futV al 10: if val > maxV al then maxV al ← val 11: return maxV al Upper bound on the expected value for a link is computed by modifying the equation 3 to reflect the full observability assumption.",
                "This involves removing the observational probability term for agents in Tree(i) and maximizing the future value ˆvη l over the actions of those agents (in Tree(i)).",
                "Thus, the equation for the The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 825 computation of the upper bound on a link l, is as follows: IF l ∈ Ei− , ˆvη−1 l =ˆrη−1 l + max al2 ω η l1 ,s η l ˆpη−1 l1 ˆpη−1 l2 pη−1 u ˆvη l IF l ∈ Ei+ , ˆvη−1 l =ˆrη−1 l + max al1 ,al2 s η l ˆpη−1 l1 ˆpη−1 l2 pη−1 u ˆvη l Algorithm 3 and Algorithm 4 provide the algorithm for computing upper bound for child j of agent i, using the equations descirbed above.",
                "While Algorithm 4 computes the upper bound on a link given the starting state, Algorithm 3 sums the upper bound values computed over each of the links in Ei− ∪ Ei+ . 4.3 Abstraction Algorithm 5 SPIDER-ABS(i, πi− , threshold) 1: πi+,∗ ← null 2: Πi ← GET-POLICIES (<>, 1) 3: if IS-LEAF(i) then 4: for all πi ∈ Πi do 5: absHeuristic ← GET-ABS-HEURISTIC (πi, πi−) 6: absHeuristic ∗ ← (timeHorizon − πi.horizon) 7: if πi.horizon = timeHorizon and πi.absNodes = 0 then 8: v[πi, πi−] ← JOINT-REWARD (πi, πi−) 9: if v[πi, πi−] > threshold then 10: πi+,∗ ← πi; threshold ← v[πi, πi−] 11: else if v[πi, πi−] + absHeuristic > threshold then 12: ˆΠi ← EXTEND-POLICY (πi, πi.absNodes + 1) 13: Πi + ← INSERT-SORTED-POLICIES ( ˆΠi) 14: REMOVE(πi) 15: else 16: children ← CHILDREN (i) 17: Πi ← UPPER-BOUND-SORT(i, Πi, πi−) 18: for all πi ∈ Πi do 19: ˜πi+ ← πi 20: absHeuristic ← GET-ABS-HEURISTIC (πi, πi−) 21: absHeuristic ∗ ← (timeHorizon − πi.horizon) 22: if πi.horizon = timeHorizon and πi.absNodes = 0 then 23: if ˆv[πi, πi−] < threshold and πi.absNodes = 0 then 24: Go to line 19 25: for all j ∈ children do 26: jThres ← threshold − v[πi, πi−]− Σk∈children,k=j ˆvk[πi, πi−] 27: πj+,∗ ← SPIDER(j, πi πi−, jThres) 28: ˜πi+ ← ˜πi+ πj+,∗; ˆvj[πi, πi−] ← v[πj+,∗, πi πi−] 29: if v[˜πi+, πi−] > threshold then 30: threshold ← v[˜πi+, πi−]; πi+,∗ ← ˜πi+ 31: else if ˆv[πi+, πi−] + absHeuristic > threshold then 32: ˆΠi ← EXTEND-POLICY (πi, πi.absNodes + 1) 33: Πi + ← INSERT-SORTED-POLICIES (ˆΠi) 34: REMOVE(πi) 35: return πi+,∗ In SPIDER, the exploration/pruning phase can only begin after the heuristic (or upper bound) computation and sorting for the policies has ended.",
                "We provide an approach to possibly circumvent the exploration of a group of policies based on heuristic computation for one abstract policy, thus leading to an improvement in runtime performance (without loss in solution quality).",
                "The important steps in this technique are defining the abstract policy and how heuristic values are computated for the abstract policies.",
                "In this paper, we propose two types of abstraction: 1.",
                "Horizon Based Abstraction (HBA): Here, the abstract policy is defined as a shorter horizon policy.",
                "It represents a group of longer horizon policies that have the same actions as the abstract policy for times less than or equal to the horizon of the abstract policy.",
                "In Figure 3(a), a T=1 abstract policy that performs East action, represents a group of T=2 policies, that perform East in the first time step.",
                "For HBA, there are two parts to heuristic computation: (a) Computing the upper bound for the horizon of the abstract policy.",
                "This is same as the heuristic computation defined by the GETHEURISTIC() algorithm for SPIDER, however with a shorter time horizon (horizon of the abstract policy). (b) Computing the maximum possible reward that can be accumulated in one time step (using GET-ABS-HEURISTIC()) and multiplying it by the number of time steps to time horizon.",
                "This maximum possible reward (for one time step) is obtained by iterating through all the actions of all the agents in Tree(i) and computing the maximum joint reward for any joint action.",
                "Sum of (a) and (b) is the heuristic value for a HBA abstract policy. 2.",
                "Node Based Abstraction (NBA): Here an abstract policy is obtained by not associating actions to certain nodes of the policy tree.",
                "Unlike in HBA, this implies multiple levels of abstraction.",
                "This is illustrated in Figure 3(b), where there are T=2 policies that do not have an action for observation TP.",
                "These incomplete T=2 policies are abstractions for T=2 complete policies.",
                "Increased levels of abstraction leads to faster computation of a complete joint policy, πroot+ and also to shorter heuristic computation and exploration, pruning phases.",
                "For NBA, the heuristic computation is similar to that of a normal policy, except in cases where there is no action associated with policy nodes.",
                "In such cases, the immediate reward is taken as Rmax (maximum reward for any action).",
                "We combine both the abstraction techniques mentioned above into one technique, SPIDER-ABS.",
                "Algorithm 5 provides the algorithm for this abstraction technique.",
                "For computing optimal joint policy with SPIDER-ABS, a non-leaf agent i initially examines all abstract T=1 policies (line 2) and sorts them based on abstract policy heuristic computations (line 17).",
                "The abstraction horizon is gradually increased and these abstract policies are then explored in descending order of heuristic values and ones that have heuristic values less than the threshold are pruned (lines 23-24).",
                "Exploration in SPIDER-ABS has the same definition as in SPIDER if the policy being explored has a horizon of policy computation which is equal to the actual time horizon and if all the nodes of the policy have an action associated with them (lines 25-30).",
                "However, if those conditions are not met, then it is substituted by a group of policies that it represents (using EXTEND-POLICY () function) (lines 31-32).",
                "EXTEND-POLICY() function is also responsible for initializing the horizon and absNodes of a policy. absNodes represents the number of nodes at the last level in the policy tree, that do not have an action assigned to them.",
                "If πi.absNodes = |Ωi|πi.horizon−1 (i.e. total number of policy nodes possible at πi.horizon) , then πi.absNodes is set to zero and πi.horizon is increased by 1.",
                "Otherwise, πi.absNodes is increased by 1.",
                "Thus, this function combines both HBA and NBA by using the policy variables, horizon and absNodes.",
                "Before substituting the abstract policy with a group of policies, those policies are sorted based on heuristic values (line 33).",
                "Similar type of abstraction based best response computation is adopted at leaf agents (lines 3-14). 4.4 Value ApproXimation (VAX) In this section, we present an approximate enhancement to SPIDER called VAX.",
                "The input to this technique is an approximation parameter , which determines the difference from the optimal solution quality.",
                "This approximation parameter is used at each agent for pruning out joint policies.",
                "The pruning mechanism in SPIDER and SPIDER-Abs dictates that a joint policy be pruned only if the threshold is exactly greater than the heuristic value.",
                "However, the 826 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Figure 3: Example of abstraction for (a) HBA (Horizon Based Abstraction) and (b) NBA (Node Based Abstraction) idea in this technique is to prune out joint a policy if the following condition is satisfied: threshold + > ˆv[πi , πi− ].",
                "Apart from the pruning condition, VAX is the same as SPIDER/SPIDER-ABS.",
                "In the example of Figure 2, if the heuristic value for the second joint policy (or second search tree node) in level 2 were 238 instead of 232, then that policy could not be be pruned using SPIDER or SPIDER-Abs.",
                "However, in VAX with an approximation parameter of 5, the joint policy in consideration would also be pruned.",
                "This is because the threshold (234) at that juncture plus the approximation parameter (5), i.e. 239 would have been greater than the heuristic value for that joint policy (238).",
                "It can be noted from the example (just discussed) that this kind of pruning can lead to fewer explorations and hence lead to an improvement in the overall run-time performance.",
                "However, this can entail a sacrifice in the quality of the solution because this technique can prune out a candidate optimal solution.",
                "A bound on the error introduced by this approximate algorithm as a function of , is provided by Proposition 3. 4.5 Percentage ApproXimation (PAX) In this section, we present the second approximation enhancement over SPIDER called PAX.",
                "Input to this technique is a parameter, δ that represents the minimum percentage of the optimal solution quality that is desired.",
                "Output of this technique is a policy with an expected value that is at least δ% of the optimal solution quality.",
                "A policy is pruned if the following condition is satisfied: threshold > δ 100 ˆv[πi , πi− ].",
                "Like in VAX, the only difference between PAX and SPIDER/SPIDER-ABS is this pruning condition.",
                "Again in Figure 2, if the heuristic value for the second search tree node in level 2 were 238 instead of 232, then PAX with an input parameter of 98% would be able to prune that search tree node (since 98 100 ∗238 < 234).",
                "This type of pruning leads to fewer explorations and hence an improvement in run-time performance, while potentially leading to a loss in quality of the solution.",
                "Proposition 4 provides the bound on quality loss. 4.6 Theoretical Results PROPOSITION 1.",
                "Heuristic provided using the centralized MDP heuristic is admissible.",
                "Proof.",
                "For the value provided by the heuristic to be admissible, it should be an over estimate of the expected value for a joint policy.",
                "Thus, we need to show that: For l ∈ Ei+ ∪ Ei− : ˆvt l ≥ vt l (refer to notation in Section 4.2) We use mathematical induction on t to prove this.",
                "Base case: t = T − 1.",
                "Irrespective of whether l ∈ Ei− or l ∈ Ei+ , ˆrt l is computed by maximizing over all actions of the agents in Tree(i), while rt l is computed for fixed policies of the same agents.",
                "Hence, ˆrt l ≥ rt l and also ˆvt l ≥ vt l .",
                "Assumption: Proposition holds for t = η, where 1 ≤ η < T − 1.",
                "We now have to prove that the proposition holds for t = η − 1.",
                "We show the proof for l ∈ Ei− and similar reasoning can be adopted to prove for l ∈ Ei+ .",
                "The heuristic value function for l ∈ Ei− is provided by the following equation: ˆvη−1 l =ˆrη−1 l + max al2 ω η l1 ,s η l ˆpη−1 l1 ˆpη−1 l2 pη−1 u ˆvη l Rewriting the RHS and using Eqn 2 (in Section 4.2) =ˆrη−1 l + max al2 ω η l1 ,s η l pη−1 u pη−1 l1 ˆpη−1 l2 ˆvη l =ˆrη−1 l + ω η l1 ,s η l pη−1 u pη−1 l1 max al2 ˆpη−1 l2 ˆvη l Since maxal2 ˆpη−1 l2 ˆvη l ≥ ωl2 oη−1 l2 ˆpη−1 l2 ˆvη l and pη−1 l2 = oη−1 l2 ˆpη−1 l2 ≥ˆrη−1 l + ω η l1 ,s η l pη−1 u pη−1 l1 ωl2 pη−1 l2 ˆvη l Since ˆvη l ≥ vη l (from the assumption) ≥ˆrη−1 l + ω η l1 ,s η l pη−1 u pη−1 l1 ωl2 pη−1 l2 vη l Since ˆrη−1 l ≥ rη−1 l (by definition) ≥rη−1 l + ω η l1 ,s η l pη−1 u pη−1 l1 ωl2 pη−1 l2 vη l =rη−1 l + (ω η l ,s η l ) pη−1 u pη−1 l1 pη−1 l2 vη l = vη−1 l Thus proved.",
                "PROPOSITION 2.",
                "SPIDER provides an optimal solution.",
                "Proof.",
                "SPIDER examines all possible joint policies given the interaction structure of the agents.",
                "The only exception being when a joint policy is pruned based on the heuristic value.",
                "Thus, as long as a candidate optimal policy is not pruned, SPIDER will return an optimal policy.",
                "As proved in Proposition 1, the expected value for a joint policy is always an upper bound.",
                "Hence when a joint policy is pruned, it cannot be an optimal solution.",
                "PROPOSITION 3.",
                "Error bound on the solution quality for VAX (implemented over SPIDER-ABS) with an approximation parameter of is ρ , where ρ is the number of leaf nodes in the DFS tree.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 827 Proof.",
                "We prove this proposition using mathematical induction on the depth of the DFS tree.",
                "Base case: depth = 1 (i.e. one node).",
                "Best response is computed by iterating through all policies, Πk.",
                "A policy,πk is pruned if ˆv[πk, πk− ] < threshold + .",
                "Thus the best response policy computed by VAX would be at most away from the optimal best response.",
                "Hence the proposition holds for the base case.",
                "Assumption: Proposition holds for d, where 1 ≤ depth ≤ d. We now have to prove that the proposition holds for d + 1.",
                "Without loss of generality, lets assume that the root node of this tree has k children.",
                "Each of this children is of depth ≤ d, and hence from the assumption, the error introduced in kth child is ρk , where ρk is the number of leaf nodes in kth child of the root.",
                "Therefore, ρ = k ρk, where ρ is the number of leaf nodes in the tree.",
                "In SPIDER-ABS, threshold at the root agent, thresspider = k v[πk+ , πk− ].",
                "However, with VAX the threshold at the root agent will be (in the worst case), threshvax = k v[πk+ , πk− ]− k ρk .",
                "Hence, with VAX a joint policy is pruned at the root agent if ˆv[πroot, πroot− ] < threshvax + ⇒ ˆv[πroot, πroot− ] < threshspider − (( k ρk) − 1) ≤ threshspider − ( k ρk) ≤ threshspider − ρ .",
                "Hence proved.",
                "PROPOSITION 4.",
                "For PAX (implemented over SPIDER-ABS) with an input parameter of δ, the solution quality is at least δ 100 v[πroot+,∗ ], where v[πroot+,∗ ] denotes the optimal solution quality.",
                "Proof.",
                "We prove this proposition using mathematical induction on the depth of the DFS tree.",
                "Base case: depth = 1 (i.e. one node).",
                "Best response is computed by iterating through all policies, Πk.",
                "A policy,πk is pruned if δ 100 ˆv[πk, πk− ] < threshold.",
                "Thus the best response policy computed by PAX would be at least δ 100 times the optimal best response.",
                "Hence the proposition holds for the base case.",
                "Assumption: Proposition holds for d, where 1 ≤ depth ≤ d. We now have to prove that the proposition holds for d + 1.",
                "Without loss of generality, lets assume that the root node of this tree has k children.",
                "Each of this children is of depth ≤ d, and hence from the assumption, the solution quality in the kth child is at least δ 100 v[πk+,∗ , πk− ] for PAX.",
                "With SPIDER-ABS, a joint policy is pruned at the root agent if ˆv[πroot, πroot− ] < k v[πk+,∗ , πk− ].",
                "However with PAX, a joint policy is pruned if δ 100 ˆv[πroot, πroot− ] < k δ 100 v[πk+,∗ , πk− ] ⇒ ˆv[πroot, πroot− ] < k v[πk+,∗ , πk− ].",
                "Since the pruning condition at the root agent in PAX is the same as the one in SPIDER-ABS, there is no error introduced at the root agent and all the error is introduced in the children.",
                "Thus, overall solution quality is at least δ 100 of the optimal solution.",
                "Hence proved. 5.",
                "EXPERIMENTAL RESULTS All our experiments were conducted on the sensor network domain from Section 2.",
                "The five network configurations employed are shown in Figure 4.",
                "Algorithms that we experimented with are GOA, SPIDER, SPIDER-ABS, PAX and VAX.",
                "We compare against GOA because it is the only global optimal algorithm that considers more than two agents.",
                "We performed two sets of experiments: (i) firstly, we compared the run-time performance of the above algorithms and (ii) secondly, we experimented with PAX and VAX to study the tradeoff between run-time and solution quality.",
                "Experiments were terminated after 10000 seconds1 .",
                "Figure 5(a) provides run-time comparisons between the optimal algorithms GOA, SPIDER, SPIDER-Abs and the approximate algorithms, PAX ( of 30) and VAX(δ of 80).",
                "X-axis denotes the 1 Machine specs for all experiments: Intel Xeon 3.6 GHZ processor, 2GB RAM sensor network configuration used, while Y-axis indicates the runtime (on a log-scale).",
                "The time horizon of policy computation was 3.",
                "For each configuration (3-chain, 4-chain, 4-star and 5-star), there are five bars indicating the time taken by GOA, SPIDER, SPIDERAbs, PAX and VAX.",
                "GOA did not terminate within the time limit for 4-star and 5-star configurations.",
                "SPIDER-Abs dominated the SPIDER and GOA for all the configurations.",
                "For instance, in the 3chain configuration, SPIDER-ABS provides 230-fold speedup over GOA and 2-fold speedup over SPIDER and for the 4-chain configuration it provides 58-fold speedup over GOA and 2-fold speedup over SPIDER.",
                "The two approximation approaches, VAX and PAX provided further improvement in performance over SPIDER-Abs.",
                "For instance, in the 5-star configuration VAX provides a 15-fold speedup and PAX provides a 8-fold speedup over SPIDER-Abs.",
                "Figures 5(b) provides a comparison of the solution quality obtained using the different algorithms for the problems tested in Figure 5(a).",
                "X-axis denotes the sensor network configuration while Y-axis indicates the solution quality.",
                "Since GOA, SPIDER, and SPIDER-Abs are all global optimal algorithms, the solution quality is the same for all those algorithms.",
                "For 5-P configuration, the global optimal algorithms did not terminate within the limit of 10000 seconds, so the bar for optimal quality indicates an upper bound on the optimal solution quality.",
                "With both the approximations, we obtained a solution quality that was close to the optimal solution quality.",
                "In 3-chain and 4-star configurations, it is remarkable that both PAX and VAX obtained almost the same actual quality as the global optimal algorithms, despite the approximation parameter and δ.",
                "For other configurations as well, the loss in quality was less than 20% of the optimal solution quality.",
                "Figure 5(c) provides the time to solution with PAX (for varying epsilons).",
                "X-axis denotes the approximation parameter, δ (percentage to optimal) used, while Y-axis denotes the time taken to compute the solution (on a log-scale).",
                "The time horizon for all the configurations was 4.",
                "As δ was decreased from 70 to 30, the time to solution decreased drastically.",
                "For instance, in the 3-chain case there was a total speedup of 170-fold when the δ was changed from 70 to 30.",
                "Interestingly, even with a low δ of 30%, the actual solution quality remained equal to the one obtained at 70%.",
                "Figure 5(d) provides the time to solution for all the configurations with VAX (for varying epsilons).",
                "X-axis denotes the approximation parameter, used, while Y-axis denotes the time taken to compute the solution (on a log-scale).",
                "The time horizon for all the configurations was 4.",
                "As was increased, the time to solution decreased drastically.",
                "For instance, in the 4-star case there was a total speedup of 73-fold when the was changed from 60 to 140.",
                "Again, the actual solution quality did not change with varying epsilon.",
                "Figure 4: Sensor network configurations 828 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Figure 5: Comparison of GOA, SPIDER, SPIDER-Abs and VAX for T = 3 on (a) Runtime and (b) Solution quality; (c) Time to solution for PAX with varying percentage to optimal for T=4 (d) Time to solution for VAX with varying epsilon for T=4 6.",
                "SUMMARY AND RELATED WORK This paper presents four algorithms SPIDER, SPIDER-ABS, PAX and VAX that provide a novel combination of features for <br>policy search</br> in distributed POMDPs: (i) exploiting agent interaction structure given a network of agents (i.e. easier scale-up to larger number of agents); (ii) using branch and bound search with an MDP based heuristic function; (iii) utilizing abstraction to improve runtime performance without sacrificing solution quality; (iv) providing a priori percentage bounds on quality of solutions using PAX; and (v) providing expected value bounds on the quality of solutions using VAX.",
                "These features allow for systematic tradeoff of solution quality for run-time in networks of agents operating under uncertainty.",
                "Experimental results show orders of magnitude improvement in performance over previous global optimal algorithms.",
                "Researchers have typically employed two types of techniques for solving distributed POMDPs.",
                "The first set of techniques compute global optimal solutions.",
                "Hansen et al. [5] present an algorithm based on dynamic programming and iterated elimination of dominant policies, that provides optimal solutions for distributed POMDPs.",
                "Szer et al. [13] provide an optimal heuristic search method for solving Decentralized POMDPs.",
                "This algorithm is based on the combination of a classical heuristic search algorithm, A∗ and decentralized control theory.",
                "The key differences between SPIDER and MAA* are: (a) Enhancements to SPIDER (VAX and PAX) provide for quality guaranteed approximations, while MAA* is a global optimal algorithm and hence involves significant computational complexity; (b) Due to MAA*s inability to exploit interaction structure, it was illustrated only with two agents.",
                "However, SPIDER has been illustrated for networks of agents; and (c) SPIDER explores the joint policy one agent at a time, while MAA* expands it one time step at a time (simultaneously for all the agents).",
                "The second set of techniques seek approximate policies.",
                "EmeryMontemerlo et al. [4] approximate POSGs as a series of one-step Bayesian games using heuristics to approximate future value, trading off limited lookahead for computational efficiency, resulting in locally optimal policies (with respect to the selected heuristic).",
                "Nair et al. [9]s JESP algorithm uses dynamic programming to reach a local optimum solution for finite horizon decentralized POMDPs.",
                "Peshkin et al. [11] and Bernstein et al. [2] are examples of <br>policy search</br> techniques that search for locally optimal policies.",
                "Though all the above techniques improve the efficiency of policy computation considerably, they are unable to provide error bounds on the quality of the solution.",
                "This aspect of quality bounds differentiates SPIDER from all the above techniques.",
                "Acknowledgements.",
                "This material is based upon work supported by the Defense Advanced Research Projects Agency (DARPA), through the Department of the Interior, NBC, Acquisition Services Division under Contract No.",
                "NBCHD030010.",
                "The views and conclusions contained in this document are those of the authors, and should not be interpreted as representing the official policies, either expressed or implied, of the Defense Advanced Research Projects Agency or the U.S. Government. 7.",
                "REFERENCES [1] R. Becker, S. Zilberstein, V. Lesser, and C.V. Goldman.",
                "Solving transition independent decentralized Markov decision processes.",
                "JAIR, 22:423-455, 2004. [2] D. S. Bernstein, E.A.",
                "Hansen, and S. Zilberstein.",
                "Bounded policy iteration for decentralized POMDPs.",
                "In IJCAI, 2005. [3] D. S. Bernstein, S. Zilberstein, and N. Immerman.",
                "The complexity of decentralized control of MDPs.",
                "In UAI, 2000. [4] R. Emery-Montemerlo, G. Gordon, J. Schneider, and S. Thrun.",
                "Approximate solutions for partially observable stochastic games with common payoffs.",
                "In AAMAS, 2004. [5] E. Hansen, D. Bernstein, and S. Zilberstein.",
                "Dynamic programming for partially observable stochastic games.",
                "In AAAI, 2004. [6] V. Lesser, C. Ortiz, and M. Tambe.",
                "Distributed sensor nets: A multiagent perspective.",
                "Kluwer, 2003. [7] R. Maheswaran, M. Tambe, E. Bowring, J. Pearce, and P. Varakantham.",
                "Taking dcop to the real world : Efficient complete solutions for distributed event scheduling.",
                "In AAMAS, 2004. [8] P. J. Modi, W. Shen, M. Tambe, and M. Yokoo.",
                "An asynchronous complete method for distributed constraint optimization.",
                "In AAMAS, 2003. [9] R. Nair, D. Pynadath, M. Yokoo, M. Tambe, and S. Marsella.",
                "Taming decentralized POMDPs: Towards efficient policy computation for multiagent settings.",
                "In IJCAI, 2003. [10] R. Nair, P. Varakantham, M. Tambe, and M. Yokoo.",
                "Networked distributed POMDPs: A synthesis of distributed constraint optimization and POMDPs.",
                "In AAAI, 2005. [11] L. Peshkin, N. Meuleau, K.-E. Kim, and L. Kaelbling.",
                "Learning to cooperate via <br>policy search</br>.",
                "In UAI, 2000. [12] A. Petcu and B. Faltings.",
                "A scalable method for multiagent constraint optimization.",
                "In IJCAI, 2005. [13] D. Szer, F. Charpillet, and S. Zilberstein.",
                "MAA*: A heuristic search algorithm for solving decentralized POMDPs.",
                "In IJCAI, 2005.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 829"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Este documento supera las limitaciones de ambos enfoques al proporcionar araña, una combinación novedosa de tres características clave para la generación de políticas en POMDP distribuidos: (i) Explota la estructura de interacción del agente dada una red de agentes (es decir, permitiendo una escala más fácil a un número mayor a un número más grande.de agentes);(ii) utiliza una combinación de heurísticas para acelerar la \"búsqueda de políticas\";y (iii) permite aproximaciones garantizadas de calidad, lo que permite una compensación sistemática de calidad de solución para el tiempo.",
                "Resumen y trabajo relacionado Este documento presenta cuatro algoritmos Spider, Spider-ABS, Pax y Vax que proporcionan una nueva combinación de características para la \"búsqueda de políticas\" en POMDP distribuidos: (i) Estructura de interacción de agentes explotando dada una red de agentes (es decir, más fácil a escala de escala a escala-Pole a un mayor número de agentes);(ii) usar la búsqueda de rama y unión con una función heurística basada en MDP;(iii) utilizar la abstracción para mejorar el rendimiento del tiempo de ejecución sin sacrificar la calidad de la solución;(iv) proporcionar límites de porcentaje a priori en la calidad de las soluciones con PAX;y (v) proporcionar límites de valor esperados en la calidad de las soluciones utilizando VAX.",
                "Peshkin et al.[11] y Bernstein et al.[2] son ejemplos de técnicas de \"búsqueda de políticas\" que buscan políticas localmente óptimas.",
                "Aprender a cooperar a través de \"búsqueda de políticas\"."
            ],
            "translated_text": "",
            "candidates": [
                "búsqueda de políticas",
                "búsqueda de políticas",
                "búsqueda de políticas",
                "búsqueda de políticas",
                "búsqueda de políticas",
                "búsqueda de políticas",
                "búsqueda de políticas",
                "búsqueda de políticas"
            ],
            "error": []
        },
        "heuristic": {
            "translated_key": "",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Letting loose a SPIDER on a network of POMDPs: Generating quality guaranteed policies Pradeep Varakantham, Janusz Marecki, Yuichi Yabu∗ , Milind Tambe, Makoto Yokoo∗ University of Southern California, Los Angeles, CA 90089, {varakant, marecki, tambe}@usc.edu ∗ Dept.",
                "of Intelligent Systems, Kyushu University, Fukuoka, 812-8581 Japan, yokoo@is.kyushu-u.ac.jp ABSTRACT Distributed Partially Observable Markov Decision Problems (Distributed POMDPs) are a popular approach for modeling multi-agent systems acting in uncertain domains.",
                "Given the significant complexity of solving distributed POMDPs, particularly as we scale up the numbers of agents, one popular approach has focused on approximate solutions.",
                "Though this approach is efficient, the algorithms within this approach do not provide any guarantees on solution quality.",
                "A second less popular approach focuses on global optimality, but typical results are available only for two agents, and also at considerable computational cost.",
                "This paper overcomes the limitations of both these approaches by providing SPIDER, a novel combination of three key features for policy generation in distributed POMDPs: (i) it exploits agent interaction structure given a network of agents (i.e. allowing easier scale-up to larger number of agents); (ii) it uses a combination of heuristics to speedup policy search; and (iii) it allows quality guaranteed approximations, allowing a systematic tradeoff of solution quality for time.",
                "Experimental results show orders of magnitude improvement in performance when compared with previous global optimal algorithms.",
                "Categories and Subject Descriptors I.2.11 [Artificial Intelligence]: Distributed Artificial IntelligenceMulti-agent Systems General Terms Algorithms, Theory 1.",
                "INTRODUCTION Distributed Partially Observable Markov Decision Problems (Distributed POMDPs) are emerging as a popular approach for modeling sequential decision making in teams operating under uncertainty [9, 4, 1, 2, 13].",
                "The uncertainty arises on account of nondeterminism in the outcomes of actions and because the world state may only be partially (or incorrectly) observable.",
                "Unfortunately, as shown by Bernstein et al. [3], the problem of finding the optimal joint policy for general distributed POMDPs is NEXP-Complete.",
                "Researchers have attempted two different types of approaches towards solving these models.",
                "The first category consists of highly efficient approximate techniques, that may not reach globally optimal solutions [2, 9, 11].",
                "The key problem with these techniques has been their inability to provide any guarantees on the quality of the solution.",
                "In contrast, the second less popular category of approaches has focused on a global optimal result [13, 5, 10].",
                "Though these approaches obtain optimal solutions, they typically consider only two agents.",
                "Furthermore, they fail to exploit structure in the interactions of the agents and hence are severely hampered with respect to scalability when considering more than two agents.",
                "To address these problems with the existing approaches, we propose approximate techniques that provide guarantees on the quality of the solution while focussing on a network of more than two agents.",
                "We first propose the basic SPIDER (Search for Policies In Distributed EnviRonments) algorithm.",
                "There are two key novel features in SPIDER: (i) it is a branch and bound <br>heuristic</br> search technique that uses a MDP-based <br>heuristic</br> function to search for an optimal joint policy; (ii) it exploits network structure of agents by organizing agents into a Depth First Search (DFS) pseudo tree and takes advantage of the independence in the different branches of the DFS tree.",
                "We then provide three enhancements to improve the efficiency of the basic SPIDER algorithm while providing guarantees on the quality of the solution.",
                "The first enhancement uses abstractions for speedup, but does not sacrifice solution quality.",
                "In particular, it initially performs branch and bound search on abstract policies and then extends to complete policies.",
                "The second enhancement obtains speedups by sacrificing solution quality, but within an input parameter that provides the tolerable expected value difference from the optimal solution.",
                "The third enhancement is again based on bounding the search for efficiency, however with a tolerance parameter that is provided as a percentage of optimal.",
                "We experimented with the sensor network domain presented in Nair et al. [10], a domain representative of an important class of problems with networks of agents working in uncertain environments.",
                "In our experiments, we illustrate that SPIDER dominates an existing global optimal approach called GOA [10], the only known global optimal algorithm with demonstrated experimental results for more than two agents.",
                "Furthermore, we demonstrate that abstraction improves the performance of SPIDER significantly (while providing optimal solutions).",
                "We finally demonstrate a key feature of SPIDER: by utilizing the approximation enhancements it enables principled tradeoffs in run-time versus solution quality. 822 978-81-904262-7-5 (RPS) c 2007 IFAAMAS 2.",
                "DOMAIN: DISTRIBUTED SENSOR NETS Distributed sensor networks are a large, important class of domains that motivate our work.",
                "This paper focuses on a set of target tracking problems that arise in certain types of sensor networks [6] first introduced in [10].",
                "Figure 1 shows a specific problem instance within this type consisting of three sensors.",
                "Here, each sensor node can scan in one of four directions: North, South, East or West (see Figure 1).",
                "To track a target and obtain associated reward, two sensors with overlapping scanning areas must coordinate by scanning the same area simultaneously.",
                "In Figure 1, to track a target in Loc11, sensor1 needs to scan East and sensor2 needs to scan West simultaneously.",
                "Thus, sensors have to act in a coordinated fashion.",
                "We assume that there are two independent targets and that each targets movement is uncertain and unaffected by the sensor agents.",
                "Based on the area it is scanning, each sensor receives observations that can have false positives and false negatives.",
                "The sensors observations and transitions are independent of each others actions e.g.the observations that sensor1 receives are independent of sensor2s actions.",
                "Each agent incurs a cost for scanning whether the target is present or not, but no cost if it turns off.",
                "Given the sensors observational uncertainty, the targets uncertain transitions and the distributed nature of the sensor nodes, these sensor nets provide a useful domains for applying distributed POMDP models.",
                "Figure 1: A 3-chain sensor configuration 3.",
                "BACKGROUND 3.1 Model: Network Distributed POMDP The ND-POMDP model was introduced in [10], motivated by domains such as the sensor networks introduced in Section 2.",
                "It is defined as the tuple S, A, P, Ω, O, R, b , where S = ×1≤i≤nSi × Su is the set of world states.",
                "Si refers to the set of local states of agent i and Su is the set of unaffectable states.",
                "Unaffectable state refers to that part of the world state that cannot be affected by the agents actions, e.g. environmental factors like target locations that no agent can control.",
                "A = ×1≤i≤nAi is the set of joint actions, where Ai is the set of action for agent i. ND-POMDP assumes transition independence, where the transition function is defined as P(s, a, s ) = Pu(su, su) · 1≤i≤n Pi(si, su, ai, si), where a = a1, . . . , an is the joint action performed in state s = s1, . . . , sn, su and s = s1, . . . , sn, su is the resulting state.",
                "Ω = ×1≤i≤nΩi is the set of joint observations where Ωi is the set of observations for agents i. Observational independence is assumed in ND-POMDPs i.e., the joint observation function is defined as O(s, a, ω) = 1≤i≤n Oi(si, su, ai, ωi), where s = s1, . . . , sn, su is the world state that results from the agents performing a = a1, . . . , an in the previous state, and ω = ω1, . . . , ωn ∈ Ω is the observation received in state s. This implies that each agents observation depends only on the unaffectable state, its local action and on its resulting local state.",
                "The reward function, R, is defined as R(s, a) = l Rl(sl1, . . . , slr, su, al1, . . . , alr ), where each l could refer to any sub-group of agents and r = |l|.",
                "Based on the reward function, an interaction hypergraph is constructed.",
                "A hyper-link, l, exists between a subset of agents for all Rl that comprise R. The interaction hypergraph is defined as G = (Ag, E), where the agents, Ag, are the vertices and E = {l|l ⊆ Ag ∧ Rl is a component of R} are the edges.",
                "The initial belief state (distribution over the initial state), b, is defined as b(s) = bu(su) · 1≤i≤n bi(si), where bu and bi refer to the distribution over initial unaffectable state and agent is initial belief state, respectively.",
                "The goal in ND-POMDP is to compute the joint policy π = π1, . . . , πn that maximizes teams expected reward over a finite horizon T starting from the belief state b.",
                "An ND-POMDP is similar to an n-ary Distributed Constraint Optimization Problem (DCOP)[8, 12] where the variable at each node represents the policy selected by an individual agent, πi with the domain of the variable being the set of all local policies, Πi.",
                "The reward component Rl where |l| = 1 can be thought of as a local constraint while the reward component Rl where l > 1 corresponds to a non-local constraint in the constraint graph. 3.2 Algorithm: Global Optimal Algorithm (GOA) In previous work, GOA has been defined as a global optimal algorithm for ND-POMDPs [10].",
                "We will use GOA in our experimental comparisons, since GOA is a state-of-the-art global optimal algorithm, and in fact the only one with experimental results available for networks of more than two agents.",
                "GOA borrows from a global optimal DCOP algorithm called DPOP[12].",
                "GOAs message passing follows that of DPOP.",
                "The first phase is the UTIL propagation, where the utility messages, in this case values of policies, are passed up from the leaves to the root.",
                "Value for a policy at an agent is defined as the sum of best response values from its children and the joint policy reward associated with the parent policy.",
                "Thus, given a policy for a parent node, GOA requires an agent to iterate through all its policies, finding the best response policy and returning the value to the parent - while at the parent node, to find the best policy, an agent requires its children to return their best responses to each of its policies.",
                "This UTIL propagation process is repeated at each level in the tree, until the root exhausts all its policies.",
                "In the second phase of VALUE propagation, where the optimal policies are passed down from the root till the leaves.",
                "GOA takes advantage of the local interactions in the interaction graph, by pruning out unnecessary joint policy evaluations (associated with nodes not connected directly in the tree).",
                "Since the interaction graph captures all the reward interactions among agents and as this algorithm iterates through all the relevant joint policy evaluations, this algorithm yields a globally optimal solution. 4.",
                "SPIDER As mentioned in Section 3.1, an ND-POMDP can be treated as a DCOP, where the goal is to compute a joint policy that maximizes the overall joint reward.",
                "The brute-force technique for computing an optimal policy would be to examine the expected values for all possible joint policies.",
                "The key idea in SPIDER is to avoid computation of expected values for the entire space of joint policies, by utilizing upper bounds on the expected values of policies and the interaction structure of the agents.",
                "Akin to some of the algorithms for DCOP [8, 12], SPIDER has a pre-processing step that constructs a DFS tree corresponding to the given interaction structure.",
                "Note that these DFS trees are pseudo trees [12] that allow links between ancestors and children.",
                "We employ the Maximum Constrained Node (MCN) <br>heuristic</br> used in the DCOP algorithm, ADOPT [8], however other heuristics (such as MLSP <br>heuristic</br> from [7]) can also be employed.",
                "MCN <br>heuristic</br> tries to place agents with more number of constraints at the top of the tree.",
                "This tree governs how the search for the optimal joint polThe Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 823 icy proceeds in SPIDER.",
                "The algorithms presented in this paper are easily extendable to hyper-trees, however for expository purposes, we assume binary trees.",
                "SPIDER is an algorithm for centralized planning and distributed execution in distributed POMDPs.",
                "In this paper, we employ the following notation to denote policies and expected values: Ancestors(i) ⇒ agents from i to the root (not including i).",
                "Tree(i) ⇒ agents in the sub-tree (not including i) for which i is the root. πroot+ ⇒ joint policy of all agents. πi+ ⇒ joint policy of all agents in Tree(i) ∪ i. πi− ⇒ joint policy of agents that are in Ancestors(i). πi ⇒ policy of the ith agent. ˆv[πi, πi− ] ⇒ upper bound on the expected value for πi+ given πi and policies of ancestor agents i.e. πi− . ˆvj[πi, πi− ] ⇒ upper bound on the expected value for πi+ from the jth child. v[πi, πi− ] ⇒ expected value for πi given policies of ancestor agents, πi− . v[πi+ , πi− ] ⇒ expected value for πi+ given policies of ancestor agents, πi− . vj[πi+ , πi− ] ⇒ expected value for πi+ from the jth child.",
                "Figure 2: Execution of SPIDER, an example 4.1 Outline of SPIDER SPIDER is based on the idea of branch and bound search, where the nodes in the search tree represent partial/complete joint policies.",
                "Figure 2 shows an example search tree for the SPIDER algorithm, using an example of the three agent chain.",
                "Before SPIDER begins its search we create a DFS tree (i.e. pseudo tree) from the three agent chain, with the middle agent as the root of this tree.",
                "SPIDER exploits the structure of this DFS tree while engaging in its search.",
                "Note that in our example figure, each agent is assigned a policy with T=2.",
                "Thus, each rounded rectange (search tree node) indicates a partial/complete joint policy, a rectangle indicates an agent and the ovals internal to an agent show its policy.",
                "<br>heuristic</br> or actual expected value for a joint policy is indicated in the top right corner of the rounded rectangle.",
                "If the number is italicized and underlined, it implies that the actual expected value of the joint policy is provided.",
                "SPIDER begins with no policy assigned to any of the agents (shown in the level 1 of the search tree).",
                "Level 2 of the search tree indicates that the joint policies are sorted based on upper bounds computed for root agents policies.",
                "Level 3 shows one SPIDER search node with a complete joint policy (a policy assigned to each of the agents).",
                "The expected value for this joint policy is used to prune out the nodes in level 2 (the ones with upper bounds < 234) When creating policies for each non-leaf agent i, SPIDER potentially performs two steps: 1.",
                "Obtaining upper bounds and sorting: In this step, agent i computes upper bounds on the expected values, ˆv[πi, πi− ] of the joint policies πi+ corresponding to each of its policy πi and fixed ancestor policies.",
                "An MDP based <br>heuristic</br> is used to compute these upper bounds on the expected values.",
                "Detailed description about this MDP <br>heuristic</br> is provided in Section 4.2.",
                "All policies of agent i, Πi are then sorted based on these upper bounds (also referred to as <br>heuristic</br> values henceforth) in descending order.",
                "Exploration of these policies (in step 2 below) are performed in this descending order.",
                "As indicated in the level 2 of the search tree (of Figure 2), all the joint policies are sorted based on the <br>heuristic</br> values, indicated in the top right corner of each joint policy.",
                "The intuition behind sorting and then exploring policies in descending order of upper bounds, is that the policies with higher upper bounds could yield joint policies with higher expected values. 2.",
                "Exploration and Pruning: Exploration implies computing the best response joint policy πi+,∗ corresponding to fixed ancestor policies of agent i, πi− .",
                "This is performed by iterating through all policies of agent i i.e.",
                "Πi and summing two quantities for each policy: (i) the best response for all of is children (obtained by performing steps 1 and 2 at each of the child nodes); (ii) the expected value obtained by i for fixed policies of ancestors.",
                "Thus, exploration of a policy πi yields actual expected value of a joint policy, πi+ represented as v[πi+ , πi− ].",
                "The policy with the highest expected value is the best response policy.",
                "Pruning refers to avoiding exploring all policies (or computing expected values) at agent i by using the current best expected value, vmax [πi+ , πi− ].",
                "Henceforth, this vmax [πi+ , πi− ] will be referred to as threshold.",
                "A policy, πi need not be explored if the upper bound for that policy, ˆv[πi, πi− ] is less than the threshold.",
                "This is because the expected value for the best joint policy attainable for that policy will be less than the threshold.",
                "On the other hand, when considering a leaf agent, SPIDER computes the best response policy (and consequently its expected value) corresponding to fixed policies of its ancestors, πi− .",
                "This is accomplished by computing expected values for each of the policies (corresponding to fixed policies of ancestors) and selecting the highest expected value policy.",
                "In Figure 2, SPIDER assigns best response policies to leaf agents at level 3.",
                "The policy for the left leaf agent is to perform action East at each time step in the policy, while the policy for the right leaf agent is to perform Off at each time step.",
                "These best response policies from the leaf agents yield an actual expected value of 234 for the complete joint policy.",
                "Algorithm 1 provides the pseudo code for SPIDER.",
                "This algorithm outputs the best joint policy, πi+,∗ (with an expected value greater than threshold) for the agents in Tree(i).",
                "Lines 3-8 compute the best response policy of a leaf agent i, while lines 9-23 computes the best response joint policy for agents in Tree(i).",
                "This best response computation for a non-leaf agent i includes: (a) Sorting of policies (in descending order) based on <br>heuristic</br> values on line 11; (b) Computing best response policies at each of the children for fixed policies of agent i in lines 16-20; and (c) Maintaining 824 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Algorithm 1 SPIDER(i, πi− , threshold) 1: πi+,∗ ← null 2: Πi ← GET-ALL-POLICIES (horizon, Ai, Ωi) 3: if IS-LEAF(i) then 4: for all πi ∈ Πi do 5: v[πi, πi−] ← JOINT-REWARD (πi, πi−) 6: if v[πi, πi−] > threshold then 7: πi+,∗ ← πi 8: threshold ← v[πi, πi−] 9: else 10: children ← CHILDREN (i) 11: ˆΠi ← UPPER-BOUND-SORT(i, Πi, πi−) 12: for all πi ∈ ˆΠi do 13: ˜πi+ ← πi 14: if ˆv[πi, πi−] < threshold then 15: Go to line 12 16: for all j ∈ children do 17: jThres ← threshold − v[πi, πi−]− Σk∈children,k=j ˆvk[πi, πi−] 18: πj+,∗ ← SPIDER(j, πi πi−, jThres) 19: ˜πi+ ← ˜πi+ πj+,∗ 20: ˆvj[πi, πi−] ← v[πj+,∗, πi πi−] 21: if v[˜πi+, πi−] > threshold then 22: threshold ← v[˜πi+, πi−] 23: πi+,∗ ← ˜πi+ 24: return πi+,∗ Algorithm 2 UPPER-BOUND-SORT(i, Πi, πi− ) 1: children ← CHILDREN (i) 2: ˆΠi ← null /* Stores the sorted list */ 3: for all πi ∈ Πi do 4: ˆv[πi, πi−] ← JOINT-REWARD (πi, πi−) 5: for all j ∈ children do 6: ˆvj[πi, πi−] ← UPPER-BOUND(i, j, πi πi−) 7: ˆv[πi, πi−] + ← ˆvj[πi, πi−] 8: ˆΠi ← INSERT-INTO-SORTED (πi, ˆΠi) 9: return ˆΠi best expected value, joint policy in lines 21-23.",
                "Algorithm 2 provides the pseudo code for sorting policies based on the upper bounds on the expected values of joint policies.",
                "Expected value for an agent i consists of two parts: value obtained from ancestors and value obtained from its children.",
                "Line 4 computes the expected value obtained from ancestors of the agent (using JOINT-REWARD function), while lines 5-7 compute the <br>heuristic</br> value from the children.",
                "The sum of these two parts yields an upper bound on the expected value for agent i, and line 8 of the algorithm sorts the policies based on these upper bounds. 4.2 MDP based <br>heuristic</br> function The <br>heuristic</br> function quickly provides an upper bound on the expected value obtainable from the agents in Tree(i).",
                "The subtree of agents is a distributed POMDP in itself and the idea here is to construct a centralized MDP corresponding to the (sub-tree) distributed POMDP and obtain the expected value of the optimal policy for this centralized MDP.",
                "To reiterate this in terms of the agents in DFS tree interaction structure, we assume full observability for the agents in Tree(i) and for fixed policies of the agents in {Ancestors(i) ∪ i}, we compute the joint value ˆv[πi+ , πi− ] .",
                "We use the following notation for presenting the equations for computing upper bounds/<br>heuristic</br> values (for agents i and k): Let Ei− denote the set of links between agents in {Ancestors(i)∪ i} and Tree(i), Ei+ denote the set of links between agents in Tree(i).",
                "Also, if l ∈ Ei− , then l1 is the agent in {Ancestors(i)∪ i} and l2 is the agent in Tree(i), that l connects together.",
                "We first compact the standard notation: ot k =Ok(st+1 k , st+1 u , πk(ωt k), ωt+1 k ) (1) pt k =Pk(st k, st u, πk(ωt k), st+1 k ) · ot k pt u =P(st u, st+1 u ) st l = st l1 , st l2 , st u ; ωt l = ωt l1 , ωt l2 rt l =Rl(st l , πl1 (ωt l1 ), πl2 (ωt l2 )) vt l =V t πl (st l , st u, ωt l1 , ωt l2 ) Depending on the location of agent k in the agent tree we have the following cases: IF k ∈ {Ancestors(i) ∪ i}, ˆpt k = pt k, (2) IF k ∈ Tree(i), ˆpt k = Pk(st k, st u, πk(ωt k), st+1 k ) IF l ∈ Ei− , ˆrt l = max {al2 } Rl(st l , πl1 (ωt l1 ), al2 ) IF l ∈ Ei+ , ˆrt l = max {al1 ,al2 } Rl(st l , al1 , al2 ) The value function for an agent i executing the joint policy πi+ at time η − 1 is provided by the equation: V η−1 πi+ (sη−1 , ωη−1 ) = l∈Ei− vη−1 l + l∈Ei+ vη−1 l (3) where vη−1 l = rη−1 l + ω η l ,sη pη−1 l1 pη−1 l2 pη−1 u vη l Algorithm 3 UPPER-BOUND (i, j, πj− ) 1: val ← 0 2: for all l ∈ Ej− ∪ Ej+ do 3: if l ∈ Ej− then πl1 ← φ 4: for all s0 l do 5: val + ← startBel[s0 l ]· UPPER-BOUND-TIME (i, s0 l , j, πl1 , ) 6: return val Algorithm 4 UPPER-BOUND-TIME (i, st l , j, πl1 , ωt l1 ) 1: maxV al ← −∞ 2: for all al1 , al2 do 3: if l ∈ Ei− and l ∈ Ej− then al1 ← πl1 (ωt l1 ) 4: val ← GET-REWARD(st l , al1 , al2 ) 5: if t < πi.horizon − 1 then 6: for all st+1 l , ωt+1 l1 do 7: futV al←pt u ˆpt l1 ˆpt l2 8: futV al ∗ ← UPPER-BOUND-TIME(st+1 l , j, πl1 , ωt l1 ωt+1 l1 ) 9: val + ← futV al 10: if val > maxV al then maxV al ← val 11: return maxV al Upper bound on the expected value for a link is computed by modifying the equation 3 to reflect the full observability assumption.",
                "This involves removing the observational probability term for agents in Tree(i) and maximizing the future value ˆvη l over the actions of those agents (in Tree(i)).",
                "Thus, the equation for the The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 825 computation of the upper bound on a link l, is as follows: IF l ∈ Ei− , ˆvη−1 l =ˆrη−1 l + max al2 ω η l1 ,s η l ˆpη−1 l1 ˆpη−1 l2 pη−1 u ˆvη l IF l ∈ Ei+ , ˆvη−1 l =ˆrη−1 l + max al1 ,al2 s η l ˆpη−1 l1 ˆpη−1 l2 pη−1 u ˆvη l Algorithm 3 and Algorithm 4 provide the algorithm for computing upper bound for child j of agent i, using the equations descirbed above.",
                "While Algorithm 4 computes the upper bound on a link given the starting state, Algorithm 3 sums the upper bound values computed over each of the links in Ei− ∪ Ei+ . 4.3 Abstraction Algorithm 5 SPIDER-ABS(i, πi− , threshold) 1: πi+,∗ ← null 2: Πi ← GET-POLICIES (<>, 1) 3: if IS-LEAF(i) then 4: for all πi ∈ Πi do 5: absHeuristic ← GET-ABS-<br>heuristic</br> (πi, πi−) 6: absHeuristic ∗ ← (timeHorizon − πi.horizon) 7: if πi.horizon = timeHorizon and πi.absNodes = 0 then 8: v[πi, πi−] ← JOINT-REWARD (πi, πi−) 9: if v[πi, πi−] > threshold then 10: πi+,∗ ← πi; threshold ← v[πi, πi−] 11: else if v[πi, πi−] + absHeuristic > threshold then 12: ˆΠi ← EXTEND-POLICY (πi, πi.absNodes + 1) 13: Πi + ← INSERT-SORTED-POLICIES ( ˆΠi) 14: REMOVE(πi) 15: else 16: children ← CHILDREN (i) 17: Πi ← UPPER-BOUND-SORT(i, Πi, πi−) 18: for all πi ∈ Πi do 19: ˜πi+ ← πi 20: absHeuristic ← GET-ABS-<br>heuristic</br> (πi, πi−) 21: absHeuristic ∗ ← (timeHorizon − πi.horizon) 22: if πi.horizon = timeHorizon and πi.absNodes = 0 then 23: if ˆv[πi, πi−] < threshold and πi.absNodes = 0 then 24: Go to line 19 25: for all j ∈ children do 26: jThres ← threshold − v[πi, πi−]− Σk∈children,k=j ˆvk[πi, πi−] 27: πj+,∗ ← SPIDER(j, πi πi−, jThres) 28: ˜πi+ ← ˜πi+ πj+,∗; ˆvj[πi, πi−] ← v[πj+,∗, πi πi−] 29: if v[˜πi+, πi−] > threshold then 30: threshold ← v[˜πi+, πi−]; πi+,∗ ← ˜πi+ 31: else if ˆv[πi+, πi−] + absHeuristic > threshold then 32: ˆΠi ← EXTEND-POLICY (πi, πi.absNodes + 1) 33: Πi + ← INSERT-SORTED-POLICIES (ˆΠi) 34: REMOVE(πi) 35: return πi+,∗ In SPIDER, the exploration/pruning phase can only begin after the heuristic (or upper bound) computation and sorting for the policies has ended.",
                "We provide an approach to possibly circumvent the exploration of a group of policies based on <br>heuristic</br> computation for one abstract policy, thus leading to an improvement in runtime performance (without loss in solution quality).",
                "The important steps in this technique are defining the abstract policy and how <br>heuristic</br> values are computated for the abstract policies.",
                "In this paper, we propose two types of abstraction: 1.",
                "Horizon Based Abstraction (HBA): Here, the abstract policy is defined as a shorter horizon policy.",
                "It represents a group of longer horizon policies that have the same actions as the abstract policy for times less than or equal to the horizon of the abstract policy.",
                "In Figure 3(a), a T=1 abstract policy that performs East action, represents a group of T=2 policies, that perform East in the first time step.",
                "For HBA, there are two parts to <br>heuristic</br> computation: (a) Computing the upper bound for the horizon of the abstract policy.",
                "This is same as the <br>heuristic</br> computation defined by the GETHEURISTIC() algorithm for SPIDER, however with a shorter time horizon (horizon of the abstract policy). (b) Computing the maximum possible reward that can be accumulated in one time step (using GET-ABS-<br>heuristic</br>()) and multiplying it by the number of time steps to time horizon.",
                "This maximum possible reward (for one time step) is obtained by iterating through all the actions of all the agents in Tree(i) and computing the maximum joint reward for any joint action.",
                "Sum of (a) and (b) is the <br>heuristic</br> value for a HBA abstract policy. 2.",
                "Node Based Abstraction (NBA): Here an abstract policy is obtained by not associating actions to certain nodes of the policy tree.",
                "Unlike in HBA, this implies multiple levels of abstraction.",
                "This is illustrated in Figure 3(b), where there are T=2 policies that do not have an action for observation TP.",
                "These incomplete T=2 policies are abstractions for T=2 complete policies.",
                "Increased levels of abstraction leads to faster computation of a complete joint policy, πroot+ and also to shorter <br>heuristic</br> computation and exploration, pruning phases.",
                "For NBA, the <br>heuristic</br> computation is similar to that of a normal policy, except in cases where there is no action associated with policy nodes.",
                "In such cases, the immediate reward is taken as Rmax (maximum reward for any action).",
                "We combine both the abstraction techniques mentioned above into one technique, SPIDER-ABS.",
                "Algorithm 5 provides the algorithm for this abstraction technique.",
                "For computing optimal joint policy with SPIDER-ABS, a non-leaf agent i initially examines all abstract T=1 policies (line 2) and sorts them based on abstract policy <br>heuristic</br> computations (line 17).",
                "The abstraction horizon is gradually increased and these abstract policies are then explored in descending order of <br>heuristic</br> values and ones that have <br>heuristic</br> values less than the threshold are pruned (lines 23-24).",
                "Exploration in SPIDER-ABS has the same definition as in SPIDER if the policy being explored has a horizon of policy computation which is equal to the actual time horizon and if all the nodes of the policy have an action associated with them (lines 25-30).",
                "However, if those conditions are not met, then it is substituted by a group of policies that it represents (using EXTEND-POLICY () function) (lines 31-32).",
                "EXTEND-POLICY() function is also responsible for initializing the horizon and absNodes of a policy. absNodes represents the number of nodes at the last level in the policy tree, that do not have an action assigned to them.",
                "If πi.absNodes = |Ωi|πi.horizon−1 (i.e. total number of policy nodes possible at πi.horizon) , then πi.absNodes is set to zero and πi.horizon is increased by 1.",
                "Otherwise, πi.absNodes is increased by 1.",
                "Thus, this function combines both HBA and NBA by using the policy variables, horizon and absNodes.",
                "Before substituting the abstract policy with a group of policies, those policies are sorted based on <br>heuristic</br> values (line 33).",
                "Similar type of abstraction based best response computation is adopted at leaf agents (lines 3-14). 4.4 Value ApproXimation (VAX) In this section, we present an approximate enhancement to SPIDER called VAX.",
                "The input to this technique is an approximation parameter , which determines the difference from the optimal solution quality.",
                "This approximation parameter is used at each agent for pruning out joint policies.",
                "The pruning mechanism in SPIDER and SPIDER-Abs dictates that a joint policy be pruned only if the threshold is exactly greater than the <br>heuristic</br> value.",
                "However, the 826 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Figure 3: Example of abstraction for (a) HBA (Horizon Based Abstraction) and (b) NBA (Node Based Abstraction) idea in this technique is to prune out joint a policy if the following condition is satisfied: threshold + > ˆv[πi , πi− ].",
                "Apart from the pruning condition, VAX is the same as SPIDER/SPIDER-ABS.",
                "In the example of Figure 2, if the <br>heuristic</br> value for the second joint policy (or second search tree node) in level 2 were 238 instead of 232, then that policy could not be be pruned using SPIDER or SPIDER-Abs.",
                "However, in VAX with an approximation parameter of 5, the joint policy in consideration would also be pruned.",
                "This is because the threshold (234) at that juncture plus the approximation parameter (5), i.e. 239 would have been greater than the <br>heuristic</br> value for that joint policy (238).",
                "It can be noted from the example (just discussed) that this kind of pruning can lead to fewer explorations and hence lead to an improvement in the overall run-time performance.",
                "However, this can entail a sacrifice in the quality of the solution because this technique can prune out a candidate optimal solution.",
                "A bound on the error introduced by this approximate algorithm as a function of , is provided by Proposition 3. 4.5 Percentage ApproXimation (PAX) In this section, we present the second approximation enhancement over SPIDER called PAX.",
                "Input to this technique is a parameter, δ that represents the minimum percentage of the optimal solution quality that is desired.",
                "Output of this technique is a policy with an expected value that is at least δ% of the optimal solution quality.",
                "A policy is pruned if the following condition is satisfied: threshold > δ 100 ˆv[πi , πi− ].",
                "Like in VAX, the only difference between PAX and SPIDER/SPIDER-ABS is this pruning condition.",
                "Again in Figure 2, if the <br>heuristic</br> value for the second search tree node in level 2 were 238 instead of 232, then PAX with an input parameter of 98% would be able to prune that search tree node (since 98 100 ∗238 < 234).",
                "This type of pruning leads to fewer explorations and hence an improvement in run-time performance, while potentially leading to a loss in quality of the solution.",
                "Proposition 4 provides the bound on quality loss. 4.6 Theoretical Results PROPOSITION 1.",
                "<br>heuristic</br> provided using the centralized MDP <br>heuristic</br> is admissible.",
                "Proof.",
                "For the value provided by the <br>heuristic</br> to be admissible, it should be an over estimate of the expected value for a joint policy.",
                "Thus, we need to show that: For l ∈ Ei+ ∪ Ei− : ˆvt l ≥ vt l (refer to notation in Section 4.2) We use mathematical induction on t to prove this.",
                "Base case: t = T − 1.",
                "Irrespective of whether l ∈ Ei− or l ∈ Ei+ , ˆrt l is computed by maximizing over all actions of the agents in Tree(i), while rt l is computed for fixed policies of the same agents.",
                "Hence, ˆrt l ≥ rt l and also ˆvt l ≥ vt l .",
                "Assumption: Proposition holds for t = η, where 1 ≤ η < T − 1.",
                "We now have to prove that the proposition holds for t = η − 1.",
                "We show the proof for l ∈ Ei− and similar reasoning can be adopted to prove for l ∈ Ei+ .",
                "The <br>heuristic</br> value function for l ∈ Ei− is provided by the following equation: ˆvη−1 l =ˆrη−1 l + max al2 ω η l1 ,s η l ˆpη−1 l1 ˆpη−1 l2 pη−1 u ˆvη l Rewriting the RHS and using Eqn 2 (in Section 4.2) =ˆrη−1 l + max al2 ω η l1 ,s η l pη−1 u pη−1 l1 ˆpη−1 l2 ˆvη l =ˆrη−1 l + ω η l1 ,s η l pη−1 u pη−1 l1 max al2 ˆpη−1 l2 ˆvη l Since maxal2 ˆpη−1 l2 ˆvη l ≥ ωl2 oη−1 l2 ˆpη−1 l2 ˆvη l and pη−1 l2 = oη−1 l2 ˆpη−1 l2 ≥ˆrη−1 l + ω η l1 ,s η l pη−1 u pη−1 l1 ωl2 pη−1 l2 ˆvη l Since ˆvη l ≥ vη l (from the assumption) ≥ˆrη−1 l + ω η l1 ,s η l pη−1 u pη−1 l1 ωl2 pη−1 l2 vη l Since ˆrη−1 l ≥ rη−1 l (by definition) ≥rη−1 l + ω η l1 ,s η l pη−1 u pη−1 l1 ωl2 pη−1 l2 vη l =rη−1 l + (ω η l ,s η l ) pη−1 u pη−1 l1 pη−1 l2 vη l = vη−1 l Thus proved.",
                "PROPOSITION 2.",
                "SPIDER provides an optimal solution.",
                "Proof.",
                "SPIDER examines all possible joint policies given the interaction structure of the agents.",
                "The only exception being when a joint policy is pruned based on the <br>heuristic</br> value.",
                "Thus, as long as a candidate optimal policy is not pruned, SPIDER will return an optimal policy.",
                "As proved in Proposition 1, the expected value for a joint policy is always an upper bound.",
                "Hence when a joint policy is pruned, it cannot be an optimal solution.",
                "PROPOSITION 3.",
                "Error bound on the solution quality for VAX (implemented over SPIDER-ABS) with an approximation parameter of is ρ , where ρ is the number of leaf nodes in the DFS tree.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 827 Proof.",
                "We prove this proposition using mathematical induction on the depth of the DFS tree.",
                "Base case: depth = 1 (i.e. one node).",
                "Best response is computed by iterating through all policies, Πk.",
                "A policy,πk is pruned if ˆv[πk, πk− ] < threshold + .",
                "Thus the best response policy computed by VAX would be at most away from the optimal best response.",
                "Hence the proposition holds for the base case.",
                "Assumption: Proposition holds for d, where 1 ≤ depth ≤ d. We now have to prove that the proposition holds for d + 1.",
                "Without loss of generality, lets assume that the root node of this tree has k children.",
                "Each of this children is of depth ≤ d, and hence from the assumption, the error introduced in kth child is ρk , where ρk is the number of leaf nodes in kth child of the root.",
                "Therefore, ρ = k ρk, where ρ is the number of leaf nodes in the tree.",
                "In SPIDER-ABS, threshold at the root agent, thresspider = k v[πk+ , πk− ].",
                "However, with VAX the threshold at the root agent will be (in the worst case), threshvax = k v[πk+ , πk− ]− k ρk .",
                "Hence, with VAX a joint policy is pruned at the root agent if ˆv[πroot, πroot− ] < threshvax + ⇒ ˆv[πroot, πroot− ] < threshspider − (( k ρk) − 1) ≤ threshspider − ( k ρk) ≤ threshspider − ρ .",
                "Hence proved.",
                "PROPOSITION 4.",
                "For PAX (implemented over SPIDER-ABS) with an input parameter of δ, the solution quality is at least δ 100 v[πroot+,∗ ], where v[πroot+,∗ ] denotes the optimal solution quality.",
                "Proof.",
                "We prove this proposition using mathematical induction on the depth of the DFS tree.",
                "Base case: depth = 1 (i.e. one node).",
                "Best response is computed by iterating through all policies, Πk.",
                "A policy,πk is pruned if δ 100 ˆv[πk, πk− ] < threshold.",
                "Thus the best response policy computed by PAX would be at least δ 100 times the optimal best response.",
                "Hence the proposition holds for the base case.",
                "Assumption: Proposition holds for d, where 1 ≤ depth ≤ d. We now have to prove that the proposition holds for d + 1.",
                "Without loss of generality, lets assume that the root node of this tree has k children.",
                "Each of this children is of depth ≤ d, and hence from the assumption, the solution quality in the kth child is at least δ 100 v[πk+,∗ , πk− ] for PAX.",
                "With SPIDER-ABS, a joint policy is pruned at the root agent if ˆv[πroot, πroot− ] < k v[πk+,∗ , πk− ].",
                "However with PAX, a joint policy is pruned if δ 100 ˆv[πroot, πroot− ] < k δ 100 v[πk+,∗ , πk− ] ⇒ ˆv[πroot, πroot− ] < k v[πk+,∗ , πk− ].",
                "Since the pruning condition at the root agent in PAX is the same as the one in SPIDER-ABS, there is no error introduced at the root agent and all the error is introduced in the children.",
                "Thus, overall solution quality is at least δ 100 of the optimal solution.",
                "Hence proved. 5.",
                "EXPERIMENTAL RESULTS All our experiments were conducted on the sensor network domain from Section 2.",
                "The five network configurations employed are shown in Figure 4.",
                "Algorithms that we experimented with are GOA, SPIDER, SPIDER-ABS, PAX and VAX.",
                "We compare against GOA because it is the only global optimal algorithm that considers more than two agents.",
                "We performed two sets of experiments: (i) firstly, we compared the run-time performance of the above algorithms and (ii) secondly, we experimented with PAX and VAX to study the tradeoff between run-time and solution quality.",
                "Experiments were terminated after 10000 seconds1 .",
                "Figure 5(a) provides run-time comparisons between the optimal algorithms GOA, SPIDER, SPIDER-Abs and the approximate algorithms, PAX ( of 30) and VAX(δ of 80).",
                "X-axis denotes the 1 Machine specs for all experiments: Intel Xeon 3.6 GHZ processor, 2GB RAM sensor network configuration used, while Y-axis indicates the runtime (on a log-scale).",
                "The time horizon of policy computation was 3.",
                "For each configuration (3-chain, 4-chain, 4-star and 5-star), there are five bars indicating the time taken by GOA, SPIDER, SPIDERAbs, PAX and VAX.",
                "GOA did not terminate within the time limit for 4-star and 5-star configurations.",
                "SPIDER-Abs dominated the SPIDER and GOA for all the configurations.",
                "For instance, in the 3chain configuration, SPIDER-ABS provides 230-fold speedup over GOA and 2-fold speedup over SPIDER and for the 4-chain configuration it provides 58-fold speedup over GOA and 2-fold speedup over SPIDER.",
                "The two approximation approaches, VAX and PAX provided further improvement in performance over SPIDER-Abs.",
                "For instance, in the 5-star configuration VAX provides a 15-fold speedup and PAX provides a 8-fold speedup over SPIDER-Abs.",
                "Figures 5(b) provides a comparison of the solution quality obtained using the different algorithms for the problems tested in Figure 5(a).",
                "X-axis denotes the sensor network configuration while Y-axis indicates the solution quality.",
                "Since GOA, SPIDER, and SPIDER-Abs are all global optimal algorithms, the solution quality is the same for all those algorithms.",
                "For 5-P configuration, the global optimal algorithms did not terminate within the limit of 10000 seconds, so the bar for optimal quality indicates an upper bound on the optimal solution quality.",
                "With both the approximations, we obtained a solution quality that was close to the optimal solution quality.",
                "In 3-chain and 4-star configurations, it is remarkable that both PAX and VAX obtained almost the same actual quality as the global optimal algorithms, despite the approximation parameter and δ.",
                "For other configurations as well, the loss in quality was less than 20% of the optimal solution quality.",
                "Figure 5(c) provides the time to solution with PAX (for varying epsilons).",
                "X-axis denotes the approximation parameter, δ (percentage to optimal) used, while Y-axis denotes the time taken to compute the solution (on a log-scale).",
                "The time horizon for all the configurations was 4.",
                "As δ was decreased from 70 to 30, the time to solution decreased drastically.",
                "For instance, in the 3-chain case there was a total speedup of 170-fold when the δ was changed from 70 to 30.",
                "Interestingly, even with a low δ of 30%, the actual solution quality remained equal to the one obtained at 70%.",
                "Figure 5(d) provides the time to solution for all the configurations with VAX (for varying epsilons).",
                "X-axis denotes the approximation parameter, used, while Y-axis denotes the time taken to compute the solution (on a log-scale).",
                "The time horizon for all the configurations was 4.",
                "As was increased, the time to solution decreased drastically.",
                "For instance, in the 4-star case there was a total speedup of 73-fold when the was changed from 60 to 140.",
                "Again, the actual solution quality did not change with varying epsilon.",
                "Figure 4: Sensor network configurations 828 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Figure 5: Comparison of GOA, SPIDER, SPIDER-Abs and VAX for T = 3 on (a) Runtime and (b) Solution quality; (c) Time to solution for PAX with varying percentage to optimal for T=4 (d) Time to solution for VAX with varying epsilon for T=4 6.",
                "SUMMARY AND RELATED WORK This paper presents four algorithms SPIDER, SPIDER-ABS, PAX and VAX that provide a novel combination of features for policy search in distributed POMDPs: (i) exploiting agent interaction structure given a network of agents (i.e. easier scale-up to larger number of agents); (ii) using branch and bound search with an MDP based <br>heuristic</br> function; (iii) utilizing abstraction to improve runtime performance without sacrificing solution quality; (iv) providing a priori percentage bounds on quality of solutions using PAX; and (v) providing expected value bounds on the quality of solutions using VAX.",
                "These features allow for systematic tradeoff of solution quality for run-time in networks of agents operating under uncertainty.",
                "Experimental results show orders of magnitude improvement in performance over previous global optimal algorithms.",
                "Researchers have typically employed two types of techniques for solving distributed POMDPs.",
                "The first set of techniques compute global optimal solutions.",
                "Hansen et al. [5] present an algorithm based on dynamic programming and iterated elimination of dominant policies, that provides optimal solutions for distributed POMDPs.",
                "Szer et al. [13] provide an optimal <br>heuristic</br> search method for solving Decentralized POMDPs.",
                "This algorithm is based on the combination of a classical <br>heuristic</br> search algorithm, A∗ and decentralized control theory.",
                "The key differences between SPIDER and MAA* are: (a) Enhancements to SPIDER (VAX and PAX) provide for quality guaranteed approximations, while MAA* is a global optimal algorithm and hence involves significant computational complexity; (b) Due to MAA*s inability to exploit interaction structure, it was illustrated only with two agents.",
                "However, SPIDER has been illustrated for networks of agents; and (c) SPIDER explores the joint policy one agent at a time, while MAA* expands it one time step at a time (simultaneously for all the agents).",
                "The second set of techniques seek approximate policies.",
                "EmeryMontemerlo et al. [4] approximate POSGs as a series of one-step Bayesian games using heuristics to approximate future value, trading off limited lookahead for computational efficiency, resulting in locally optimal policies (with respect to the selected <br>heuristic</br>).",
                "Nair et al. [9]s JESP algorithm uses dynamic programming to reach a local optimum solution for finite horizon decentralized POMDPs.",
                "Peshkin et al. [11] and Bernstein et al. [2] are examples of policy search techniques that search for locally optimal policies.",
                "Though all the above techniques improve the efficiency of policy computation considerably, they are unable to provide error bounds on the quality of the solution.",
                "This aspect of quality bounds differentiates SPIDER from all the above techniques.",
                "Acknowledgements.",
                "This material is based upon work supported by the Defense Advanced Research Projects Agency (DARPA), through the Department of the Interior, NBC, Acquisition Services Division under Contract No.",
                "NBCHD030010.",
                "The views and conclusions contained in this document are those of the authors, and should not be interpreted as representing the official policies, either expressed or implied, of the Defense Advanced Research Projects Agency or the U.S. Government. 7.",
                "REFERENCES [1] R. Becker, S. Zilberstein, V. Lesser, and C.V. Goldman.",
                "Solving transition independent decentralized Markov decision processes.",
                "JAIR, 22:423-455, 2004. [2] D. S. Bernstein, E.A.",
                "Hansen, and S. Zilberstein.",
                "Bounded policy iteration for decentralized POMDPs.",
                "In IJCAI, 2005. [3] D. S. Bernstein, S. Zilberstein, and N. Immerman.",
                "The complexity of decentralized control of MDPs.",
                "In UAI, 2000. [4] R. Emery-Montemerlo, G. Gordon, J. Schneider, and S. Thrun.",
                "Approximate solutions for partially observable stochastic games with common payoffs.",
                "In AAMAS, 2004. [5] E. Hansen, D. Bernstein, and S. Zilberstein.",
                "Dynamic programming for partially observable stochastic games.",
                "In AAAI, 2004. [6] V. Lesser, C. Ortiz, and M. Tambe.",
                "Distributed sensor nets: A multiagent perspective.",
                "Kluwer, 2003. [7] R. Maheswaran, M. Tambe, E. Bowring, J. Pearce, and P. Varakantham.",
                "Taking dcop to the real world : Efficient complete solutions for distributed event scheduling.",
                "In AAMAS, 2004. [8] P. J. Modi, W. Shen, M. Tambe, and M. Yokoo.",
                "An asynchronous complete method for distributed constraint optimization.",
                "In AAMAS, 2003. [9] R. Nair, D. Pynadath, M. Yokoo, M. Tambe, and S. Marsella.",
                "Taming decentralized POMDPs: Towards efficient policy computation for multiagent settings.",
                "In IJCAI, 2003. [10] R. Nair, P. Varakantham, M. Tambe, and M. Yokoo.",
                "Networked distributed POMDPs: A synthesis of distributed constraint optimization and POMDPs.",
                "In AAAI, 2005. [11] L. Peshkin, N. Meuleau, K.-E. Kim, and L. Kaelbling.",
                "Learning to cooperate via policy search.",
                "In UAI, 2000. [12] A. Petcu and B. Faltings.",
                "A scalable method for multiagent constraint optimization.",
                "In IJCAI, 2005. [13] D. Szer, F. Charpillet, and S. Zilberstein.",
                "MAA*: A <br>heuristic</br> search algorithm for solving decentralized POMDPs.",
                "In IJCAI, 2005.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 829"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Hay dos características novedosas clave en Spider: (i) Es una rama y una técnica de búsqueda \"heurística\" unida que utiliza una función \"heurística\" basada en MDP para buscar una política conjunta óptima;(ii) Explota la estructura de red de los agentes organizando a los agentes en un pseudo árbol de búsqueda de profundidad (DFS) y aprovecha la independencia en las diferentes ramas del árbol DFS.",
                "Empleamos el nodo máximo restringido (MCN) \"heurístico\" utilizado en el algoritmo DCOP, adoptamos [8], sin embargo, también se pueden emplear otras heurísticas (como MLSP \"heurística\" de [7]).",
                "MCN \"Heuristic\" intenta colocar a los agentes con más cantidad de limitaciones en la parte superior del árbol.",
                "El valor \"heurístico\" o esperado real para una política conjunta se indica en la esquina superior derecha del rectángulo redondeado.",
                "Se utiliza una \"heurística\" basada en MDP para calcular estos límites superiores en los valores esperados.",
                "La descripción detallada sobre este MDP \"heurística\" se proporciona en la Sección 4.2.",
                "Todas las políticas del agente I, πi se clasifican en función de estos límites superiores (también denominados valores \"heurísticos\" en adelante) en orden descendente.",
                "Como se indica en el nivel 2 del árbol de búsqueda (de la Figura 2), todas las políticas conjuntas se clasifican en función de los valores \"heurísticos\", indicados en la esquina superior derecha de cada política articular.",
                "Este mejor cálculo de respuesta para un agente no hojado incluye: (a) clasificación de políticas (en orden descendente) basado en valores \"heurísticos\" en la línea 11;(b) calcular las mejores políticas de respuesta en cada uno de los niños para políticas fijas del agente I en las líneas 16-20;y (c) mantener 824 el sexto intl.",
                "La línea 4 calcula el valor esperado obtenido de los antepasados del agente (utilizando la función conjunta-recompensa), mientras que las líneas 5-7 calculan el valor \"heurístico\" de los niños."
            ],
            "translated_text": "",
            "candidates": [
                "heurístico",
                "heurística",
                "heurística",
                "heurístico",
                "heurístico",
                "heurística",
                "heurístico",
                "Heuristic",
                "heurístico",
                "heurístico",
                "heurístico",
                "heurística",
                "heurístico",
                "heurística",
                "heurístico",
                "heurísticos",
                "heurístico",
                "heurísticos",
                "heurístico",
                "heurísticos",
                "heurístico",
                "heurístico"
            ],
            "error": []
        },
        "quality guaranteed approximation": {
            "translated_key": "aproximación garantizada de calidad",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Letting loose a SPIDER on a network of POMDPs: Generating quality guaranteed policies Pradeep Varakantham, Janusz Marecki, Yuichi Yabu∗ , Milind Tambe, Makoto Yokoo∗ University of Southern California, Los Angeles, CA 90089, {varakant, marecki, tambe}@usc.edu ∗ Dept.",
                "of Intelligent Systems, Kyushu University, Fukuoka, 812-8581 Japan, yokoo@is.kyushu-u.ac.jp ABSTRACT Distributed Partially Observable Markov Decision Problems (Distributed POMDPs) are a popular approach for modeling multi-agent systems acting in uncertain domains.",
                "Given the significant complexity of solving distributed POMDPs, particularly as we scale up the numbers of agents, one popular approach has focused on approximate solutions.",
                "Though this approach is efficient, the algorithms within this approach do not provide any guarantees on solution quality.",
                "A second less popular approach focuses on global optimality, but typical results are available only for two agents, and also at considerable computational cost.",
                "This paper overcomes the limitations of both these approaches by providing SPIDER, a novel combination of three key features for policy generation in distributed POMDPs: (i) it exploits agent interaction structure given a network of agents (i.e. allowing easier scale-up to larger number of agents); (ii) it uses a combination of heuristics to speedup policy search; and (iii) it allows <br>quality guaranteed approximation</br>s, allowing a systematic tradeoff of solution quality for time.",
                "Experimental results show orders of magnitude improvement in performance when compared with previous global optimal algorithms.",
                "Categories and Subject Descriptors I.2.11 [Artificial Intelligence]: Distributed Artificial IntelligenceMulti-agent Systems General Terms Algorithms, Theory 1.",
                "INTRODUCTION Distributed Partially Observable Markov Decision Problems (Distributed POMDPs) are emerging as a popular approach for modeling sequential decision making in teams operating under uncertainty [9, 4, 1, 2, 13].",
                "The uncertainty arises on account of nondeterminism in the outcomes of actions and because the world state may only be partially (or incorrectly) observable.",
                "Unfortunately, as shown by Bernstein et al. [3], the problem of finding the optimal joint policy for general distributed POMDPs is NEXP-Complete.",
                "Researchers have attempted two different types of approaches towards solving these models.",
                "The first category consists of highly efficient approximate techniques, that may not reach globally optimal solutions [2, 9, 11].",
                "The key problem with these techniques has been their inability to provide any guarantees on the quality of the solution.",
                "In contrast, the second less popular category of approaches has focused on a global optimal result [13, 5, 10].",
                "Though these approaches obtain optimal solutions, they typically consider only two agents.",
                "Furthermore, they fail to exploit structure in the interactions of the agents and hence are severely hampered with respect to scalability when considering more than two agents.",
                "To address these problems with the existing approaches, we propose approximate techniques that provide guarantees on the quality of the solution while focussing on a network of more than two agents.",
                "We first propose the basic SPIDER (Search for Policies In Distributed EnviRonments) algorithm.",
                "There are two key novel features in SPIDER: (i) it is a branch and bound heuristic search technique that uses a MDP-based heuristic function to search for an optimal joint policy; (ii) it exploits network structure of agents by organizing agents into a Depth First Search (DFS) pseudo tree and takes advantage of the independence in the different branches of the DFS tree.",
                "We then provide three enhancements to improve the efficiency of the basic SPIDER algorithm while providing guarantees on the quality of the solution.",
                "The first enhancement uses abstractions for speedup, but does not sacrifice solution quality.",
                "In particular, it initially performs branch and bound search on abstract policies and then extends to complete policies.",
                "The second enhancement obtains speedups by sacrificing solution quality, but within an input parameter that provides the tolerable expected value difference from the optimal solution.",
                "The third enhancement is again based on bounding the search for efficiency, however with a tolerance parameter that is provided as a percentage of optimal.",
                "We experimented with the sensor network domain presented in Nair et al. [10], a domain representative of an important class of problems with networks of agents working in uncertain environments.",
                "In our experiments, we illustrate that SPIDER dominates an existing global optimal approach called GOA [10], the only known global optimal algorithm with demonstrated experimental results for more than two agents.",
                "Furthermore, we demonstrate that abstraction improves the performance of SPIDER significantly (while providing optimal solutions).",
                "We finally demonstrate a key feature of SPIDER: by utilizing the approximation enhancements it enables principled tradeoffs in run-time versus solution quality. 822 978-81-904262-7-5 (RPS) c 2007 IFAAMAS 2.",
                "DOMAIN: DISTRIBUTED SENSOR NETS Distributed sensor networks are a large, important class of domains that motivate our work.",
                "This paper focuses on a set of target tracking problems that arise in certain types of sensor networks [6] first introduced in [10].",
                "Figure 1 shows a specific problem instance within this type consisting of three sensors.",
                "Here, each sensor node can scan in one of four directions: North, South, East or West (see Figure 1).",
                "To track a target and obtain associated reward, two sensors with overlapping scanning areas must coordinate by scanning the same area simultaneously.",
                "In Figure 1, to track a target in Loc11, sensor1 needs to scan East and sensor2 needs to scan West simultaneously.",
                "Thus, sensors have to act in a coordinated fashion.",
                "We assume that there are two independent targets and that each targets movement is uncertain and unaffected by the sensor agents.",
                "Based on the area it is scanning, each sensor receives observations that can have false positives and false negatives.",
                "The sensors observations and transitions are independent of each others actions e.g.the observations that sensor1 receives are independent of sensor2s actions.",
                "Each agent incurs a cost for scanning whether the target is present or not, but no cost if it turns off.",
                "Given the sensors observational uncertainty, the targets uncertain transitions and the distributed nature of the sensor nodes, these sensor nets provide a useful domains for applying distributed POMDP models.",
                "Figure 1: A 3-chain sensor configuration 3.",
                "BACKGROUND 3.1 Model: Network Distributed POMDP The ND-POMDP model was introduced in [10], motivated by domains such as the sensor networks introduced in Section 2.",
                "It is defined as the tuple S, A, P, Ω, O, R, b , where S = ×1≤i≤nSi × Su is the set of world states.",
                "Si refers to the set of local states of agent i and Su is the set of unaffectable states.",
                "Unaffectable state refers to that part of the world state that cannot be affected by the agents actions, e.g. environmental factors like target locations that no agent can control.",
                "A = ×1≤i≤nAi is the set of joint actions, where Ai is the set of action for agent i. ND-POMDP assumes transition independence, where the transition function is defined as P(s, a, s ) = Pu(su, su) · 1≤i≤n Pi(si, su, ai, si), where a = a1, . . . , an is the joint action performed in state s = s1, . . . , sn, su and s = s1, . . . , sn, su is the resulting state.",
                "Ω = ×1≤i≤nΩi is the set of joint observations where Ωi is the set of observations for agents i. Observational independence is assumed in ND-POMDPs i.e., the joint observation function is defined as O(s, a, ω) = 1≤i≤n Oi(si, su, ai, ωi), where s = s1, . . . , sn, su is the world state that results from the agents performing a = a1, . . . , an in the previous state, and ω = ω1, . . . , ωn ∈ Ω is the observation received in state s. This implies that each agents observation depends only on the unaffectable state, its local action and on its resulting local state.",
                "The reward function, R, is defined as R(s, a) = l Rl(sl1, . . . , slr, su, al1, . . . , alr ), where each l could refer to any sub-group of agents and r = |l|.",
                "Based on the reward function, an interaction hypergraph is constructed.",
                "A hyper-link, l, exists between a subset of agents for all Rl that comprise R. The interaction hypergraph is defined as G = (Ag, E), where the agents, Ag, are the vertices and E = {l|l ⊆ Ag ∧ Rl is a component of R} are the edges.",
                "The initial belief state (distribution over the initial state), b, is defined as b(s) = bu(su) · 1≤i≤n bi(si), where bu and bi refer to the distribution over initial unaffectable state and agent is initial belief state, respectively.",
                "The goal in ND-POMDP is to compute the joint policy π = π1, . . . , πn that maximizes teams expected reward over a finite horizon T starting from the belief state b.",
                "An ND-POMDP is similar to an n-ary Distributed Constraint Optimization Problem (DCOP)[8, 12] where the variable at each node represents the policy selected by an individual agent, πi with the domain of the variable being the set of all local policies, Πi.",
                "The reward component Rl where |l| = 1 can be thought of as a local constraint while the reward component Rl where l > 1 corresponds to a non-local constraint in the constraint graph. 3.2 Algorithm: Global Optimal Algorithm (GOA) In previous work, GOA has been defined as a global optimal algorithm for ND-POMDPs [10].",
                "We will use GOA in our experimental comparisons, since GOA is a state-of-the-art global optimal algorithm, and in fact the only one with experimental results available for networks of more than two agents.",
                "GOA borrows from a global optimal DCOP algorithm called DPOP[12].",
                "GOAs message passing follows that of DPOP.",
                "The first phase is the UTIL propagation, where the utility messages, in this case values of policies, are passed up from the leaves to the root.",
                "Value for a policy at an agent is defined as the sum of best response values from its children and the joint policy reward associated with the parent policy.",
                "Thus, given a policy for a parent node, GOA requires an agent to iterate through all its policies, finding the best response policy and returning the value to the parent - while at the parent node, to find the best policy, an agent requires its children to return their best responses to each of its policies.",
                "This UTIL propagation process is repeated at each level in the tree, until the root exhausts all its policies.",
                "In the second phase of VALUE propagation, where the optimal policies are passed down from the root till the leaves.",
                "GOA takes advantage of the local interactions in the interaction graph, by pruning out unnecessary joint policy evaluations (associated with nodes not connected directly in the tree).",
                "Since the interaction graph captures all the reward interactions among agents and as this algorithm iterates through all the relevant joint policy evaluations, this algorithm yields a globally optimal solution. 4.",
                "SPIDER As mentioned in Section 3.1, an ND-POMDP can be treated as a DCOP, where the goal is to compute a joint policy that maximizes the overall joint reward.",
                "The brute-force technique for computing an optimal policy would be to examine the expected values for all possible joint policies.",
                "The key idea in SPIDER is to avoid computation of expected values for the entire space of joint policies, by utilizing upper bounds on the expected values of policies and the interaction structure of the agents.",
                "Akin to some of the algorithms for DCOP [8, 12], SPIDER has a pre-processing step that constructs a DFS tree corresponding to the given interaction structure.",
                "Note that these DFS trees are pseudo trees [12] that allow links between ancestors and children.",
                "We employ the Maximum Constrained Node (MCN) heuristic used in the DCOP algorithm, ADOPT [8], however other heuristics (such as MLSP heuristic from [7]) can also be employed.",
                "MCN heuristic tries to place agents with more number of constraints at the top of the tree.",
                "This tree governs how the search for the optimal joint polThe Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 823 icy proceeds in SPIDER.",
                "The algorithms presented in this paper are easily extendable to hyper-trees, however for expository purposes, we assume binary trees.",
                "SPIDER is an algorithm for centralized planning and distributed execution in distributed POMDPs.",
                "In this paper, we employ the following notation to denote policies and expected values: Ancestors(i) ⇒ agents from i to the root (not including i).",
                "Tree(i) ⇒ agents in the sub-tree (not including i) for which i is the root. πroot+ ⇒ joint policy of all agents. πi+ ⇒ joint policy of all agents in Tree(i) ∪ i. πi− ⇒ joint policy of agents that are in Ancestors(i). πi ⇒ policy of the ith agent. ˆv[πi, πi− ] ⇒ upper bound on the expected value for πi+ given πi and policies of ancestor agents i.e. πi− . ˆvj[πi, πi− ] ⇒ upper bound on the expected value for πi+ from the jth child. v[πi, πi− ] ⇒ expected value for πi given policies of ancestor agents, πi− . v[πi+ , πi− ] ⇒ expected value for πi+ given policies of ancestor agents, πi− . vj[πi+ , πi− ] ⇒ expected value for πi+ from the jth child.",
                "Figure 2: Execution of SPIDER, an example 4.1 Outline of SPIDER SPIDER is based on the idea of branch and bound search, where the nodes in the search tree represent partial/complete joint policies.",
                "Figure 2 shows an example search tree for the SPIDER algorithm, using an example of the three agent chain.",
                "Before SPIDER begins its search we create a DFS tree (i.e. pseudo tree) from the three agent chain, with the middle agent as the root of this tree.",
                "SPIDER exploits the structure of this DFS tree while engaging in its search.",
                "Note that in our example figure, each agent is assigned a policy with T=2.",
                "Thus, each rounded rectange (search tree node) indicates a partial/complete joint policy, a rectangle indicates an agent and the ovals internal to an agent show its policy.",
                "Heuristic or actual expected value for a joint policy is indicated in the top right corner of the rounded rectangle.",
                "If the number is italicized and underlined, it implies that the actual expected value of the joint policy is provided.",
                "SPIDER begins with no policy assigned to any of the agents (shown in the level 1 of the search tree).",
                "Level 2 of the search tree indicates that the joint policies are sorted based on upper bounds computed for root agents policies.",
                "Level 3 shows one SPIDER search node with a complete joint policy (a policy assigned to each of the agents).",
                "The expected value for this joint policy is used to prune out the nodes in level 2 (the ones with upper bounds < 234) When creating policies for each non-leaf agent i, SPIDER potentially performs two steps: 1.",
                "Obtaining upper bounds and sorting: In this step, agent i computes upper bounds on the expected values, ˆv[πi, πi− ] of the joint policies πi+ corresponding to each of its policy πi and fixed ancestor policies.",
                "An MDP based heuristic is used to compute these upper bounds on the expected values.",
                "Detailed description about this MDP heuristic is provided in Section 4.2.",
                "All policies of agent i, Πi are then sorted based on these upper bounds (also referred to as heuristic values henceforth) in descending order.",
                "Exploration of these policies (in step 2 below) are performed in this descending order.",
                "As indicated in the level 2 of the search tree (of Figure 2), all the joint policies are sorted based on the heuristic values, indicated in the top right corner of each joint policy.",
                "The intuition behind sorting and then exploring policies in descending order of upper bounds, is that the policies with higher upper bounds could yield joint policies with higher expected values. 2.",
                "Exploration and Pruning: Exploration implies computing the best response joint policy πi+,∗ corresponding to fixed ancestor policies of agent i, πi− .",
                "This is performed by iterating through all policies of agent i i.e.",
                "Πi and summing two quantities for each policy: (i) the best response for all of is children (obtained by performing steps 1 and 2 at each of the child nodes); (ii) the expected value obtained by i for fixed policies of ancestors.",
                "Thus, exploration of a policy πi yields actual expected value of a joint policy, πi+ represented as v[πi+ , πi− ].",
                "The policy with the highest expected value is the best response policy.",
                "Pruning refers to avoiding exploring all policies (or computing expected values) at agent i by using the current best expected value, vmax [πi+ , πi− ].",
                "Henceforth, this vmax [πi+ , πi− ] will be referred to as threshold.",
                "A policy, πi need not be explored if the upper bound for that policy, ˆv[πi, πi− ] is less than the threshold.",
                "This is because the expected value for the best joint policy attainable for that policy will be less than the threshold.",
                "On the other hand, when considering a leaf agent, SPIDER computes the best response policy (and consequently its expected value) corresponding to fixed policies of its ancestors, πi− .",
                "This is accomplished by computing expected values for each of the policies (corresponding to fixed policies of ancestors) and selecting the highest expected value policy.",
                "In Figure 2, SPIDER assigns best response policies to leaf agents at level 3.",
                "The policy for the left leaf agent is to perform action East at each time step in the policy, while the policy for the right leaf agent is to perform Off at each time step.",
                "These best response policies from the leaf agents yield an actual expected value of 234 for the complete joint policy.",
                "Algorithm 1 provides the pseudo code for SPIDER.",
                "This algorithm outputs the best joint policy, πi+,∗ (with an expected value greater than threshold) for the agents in Tree(i).",
                "Lines 3-8 compute the best response policy of a leaf agent i, while lines 9-23 computes the best response joint policy for agents in Tree(i).",
                "This best response computation for a non-leaf agent i includes: (a) Sorting of policies (in descending order) based on heuristic values on line 11; (b) Computing best response policies at each of the children for fixed policies of agent i in lines 16-20; and (c) Maintaining 824 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Algorithm 1 SPIDER(i, πi− , threshold) 1: πi+,∗ ← null 2: Πi ← GET-ALL-POLICIES (horizon, Ai, Ωi) 3: if IS-LEAF(i) then 4: for all πi ∈ Πi do 5: v[πi, πi−] ← JOINT-REWARD (πi, πi−) 6: if v[πi, πi−] > threshold then 7: πi+,∗ ← πi 8: threshold ← v[πi, πi−] 9: else 10: children ← CHILDREN (i) 11: ˆΠi ← UPPER-BOUND-SORT(i, Πi, πi−) 12: for all πi ∈ ˆΠi do 13: ˜πi+ ← πi 14: if ˆv[πi, πi−] < threshold then 15: Go to line 12 16: for all j ∈ children do 17: jThres ← threshold − v[πi, πi−]− Σk∈children,k=j ˆvk[πi, πi−] 18: πj+,∗ ← SPIDER(j, πi πi−, jThres) 19: ˜πi+ ← ˜πi+ πj+,∗ 20: ˆvj[πi, πi−] ← v[πj+,∗, πi πi−] 21: if v[˜πi+, πi−] > threshold then 22: threshold ← v[˜πi+, πi−] 23: πi+,∗ ← ˜πi+ 24: return πi+,∗ Algorithm 2 UPPER-BOUND-SORT(i, Πi, πi− ) 1: children ← CHILDREN (i) 2: ˆΠi ← null /* Stores the sorted list */ 3: for all πi ∈ Πi do 4: ˆv[πi, πi−] ← JOINT-REWARD (πi, πi−) 5: for all j ∈ children do 6: ˆvj[πi, πi−] ← UPPER-BOUND(i, j, πi πi−) 7: ˆv[πi, πi−] + ← ˆvj[πi, πi−] 8: ˆΠi ← INSERT-INTO-SORTED (πi, ˆΠi) 9: return ˆΠi best expected value, joint policy in lines 21-23.",
                "Algorithm 2 provides the pseudo code for sorting policies based on the upper bounds on the expected values of joint policies.",
                "Expected value for an agent i consists of two parts: value obtained from ancestors and value obtained from its children.",
                "Line 4 computes the expected value obtained from ancestors of the agent (using JOINT-REWARD function), while lines 5-7 compute the heuristic value from the children.",
                "The sum of these two parts yields an upper bound on the expected value for agent i, and line 8 of the algorithm sorts the policies based on these upper bounds. 4.2 MDP based heuristic function The heuristic function quickly provides an upper bound on the expected value obtainable from the agents in Tree(i).",
                "The subtree of agents is a distributed POMDP in itself and the idea here is to construct a centralized MDP corresponding to the (sub-tree) distributed POMDP and obtain the expected value of the optimal policy for this centralized MDP.",
                "To reiterate this in terms of the agents in DFS tree interaction structure, we assume full observability for the agents in Tree(i) and for fixed policies of the agents in {Ancestors(i) ∪ i}, we compute the joint value ˆv[πi+ , πi− ] .",
                "We use the following notation for presenting the equations for computing upper bounds/heuristic values (for agents i and k): Let Ei− denote the set of links between agents in {Ancestors(i)∪ i} and Tree(i), Ei+ denote the set of links between agents in Tree(i).",
                "Also, if l ∈ Ei− , then l1 is the agent in {Ancestors(i)∪ i} and l2 is the agent in Tree(i), that l connects together.",
                "We first compact the standard notation: ot k =Ok(st+1 k , st+1 u , πk(ωt k), ωt+1 k ) (1) pt k =Pk(st k, st u, πk(ωt k), st+1 k ) · ot k pt u =P(st u, st+1 u ) st l = st l1 , st l2 , st u ; ωt l = ωt l1 , ωt l2 rt l =Rl(st l , πl1 (ωt l1 ), πl2 (ωt l2 )) vt l =V t πl (st l , st u, ωt l1 , ωt l2 ) Depending on the location of agent k in the agent tree we have the following cases: IF k ∈ {Ancestors(i) ∪ i}, ˆpt k = pt k, (2) IF k ∈ Tree(i), ˆpt k = Pk(st k, st u, πk(ωt k), st+1 k ) IF l ∈ Ei− , ˆrt l = max {al2 } Rl(st l , πl1 (ωt l1 ), al2 ) IF l ∈ Ei+ , ˆrt l = max {al1 ,al2 } Rl(st l , al1 , al2 ) The value function for an agent i executing the joint policy πi+ at time η − 1 is provided by the equation: V η−1 πi+ (sη−1 , ωη−1 ) = l∈Ei− vη−1 l + l∈Ei+ vη−1 l (3) where vη−1 l = rη−1 l + ω η l ,sη pη−1 l1 pη−1 l2 pη−1 u vη l Algorithm 3 UPPER-BOUND (i, j, πj− ) 1: val ← 0 2: for all l ∈ Ej− ∪ Ej+ do 3: if l ∈ Ej− then πl1 ← φ 4: for all s0 l do 5: val + ← startBel[s0 l ]· UPPER-BOUND-TIME (i, s0 l , j, πl1 , ) 6: return val Algorithm 4 UPPER-BOUND-TIME (i, st l , j, πl1 , ωt l1 ) 1: maxV al ← −∞ 2: for all al1 , al2 do 3: if l ∈ Ei− and l ∈ Ej− then al1 ← πl1 (ωt l1 ) 4: val ← GET-REWARD(st l , al1 , al2 ) 5: if t < πi.horizon − 1 then 6: for all st+1 l , ωt+1 l1 do 7: futV al←pt u ˆpt l1 ˆpt l2 8: futV al ∗ ← UPPER-BOUND-TIME(st+1 l , j, πl1 , ωt l1 ωt+1 l1 ) 9: val + ← futV al 10: if val > maxV al then maxV al ← val 11: return maxV al Upper bound on the expected value for a link is computed by modifying the equation 3 to reflect the full observability assumption.",
                "This involves removing the observational probability term for agents in Tree(i) and maximizing the future value ˆvη l over the actions of those agents (in Tree(i)).",
                "Thus, the equation for the The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 825 computation of the upper bound on a link l, is as follows: IF l ∈ Ei− , ˆvη−1 l =ˆrη−1 l + max al2 ω η l1 ,s η l ˆpη−1 l1 ˆpη−1 l2 pη−1 u ˆvη l IF l ∈ Ei+ , ˆvη−1 l =ˆrη−1 l + max al1 ,al2 s η l ˆpη−1 l1 ˆpη−1 l2 pη−1 u ˆvη l Algorithm 3 and Algorithm 4 provide the algorithm for computing upper bound for child j of agent i, using the equations descirbed above.",
                "While Algorithm 4 computes the upper bound on a link given the starting state, Algorithm 3 sums the upper bound values computed over each of the links in Ei− ∪ Ei+ . 4.3 Abstraction Algorithm 5 SPIDER-ABS(i, πi− , threshold) 1: πi+,∗ ← null 2: Πi ← GET-POLICIES (<>, 1) 3: if IS-LEAF(i) then 4: for all πi ∈ Πi do 5: absHeuristic ← GET-ABS-HEURISTIC (πi, πi−) 6: absHeuristic ∗ ← (timeHorizon − πi.horizon) 7: if πi.horizon = timeHorizon and πi.absNodes = 0 then 8: v[πi, πi−] ← JOINT-REWARD (πi, πi−) 9: if v[πi, πi−] > threshold then 10: πi+,∗ ← πi; threshold ← v[πi, πi−] 11: else if v[πi, πi−] + absHeuristic > threshold then 12: ˆΠi ← EXTEND-POLICY (πi, πi.absNodes + 1) 13: Πi + ← INSERT-SORTED-POLICIES ( ˆΠi) 14: REMOVE(πi) 15: else 16: children ← CHILDREN (i) 17: Πi ← UPPER-BOUND-SORT(i, Πi, πi−) 18: for all πi ∈ Πi do 19: ˜πi+ ← πi 20: absHeuristic ← GET-ABS-HEURISTIC (πi, πi−) 21: absHeuristic ∗ ← (timeHorizon − πi.horizon) 22: if πi.horizon = timeHorizon and πi.absNodes = 0 then 23: if ˆv[πi, πi−] < threshold and πi.absNodes = 0 then 24: Go to line 19 25: for all j ∈ children do 26: jThres ← threshold − v[πi, πi−]− Σk∈children,k=j ˆvk[πi, πi−] 27: πj+,∗ ← SPIDER(j, πi πi−, jThres) 28: ˜πi+ ← ˜πi+ πj+,∗; ˆvj[πi, πi−] ← v[πj+,∗, πi πi−] 29: if v[˜πi+, πi−] > threshold then 30: threshold ← v[˜πi+, πi−]; πi+,∗ ← ˜πi+ 31: else if ˆv[πi+, πi−] + absHeuristic > threshold then 32: ˆΠi ← EXTEND-POLICY (πi, πi.absNodes + 1) 33: Πi + ← INSERT-SORTED-POLICIES (ˆΠi) 34: REMOVE(πi) 35: return πi+,∗ In SPIDER, the exploration/pruning phase can only begin after the heuristic (or upper bound) computation and sorting for the policies has ended.",
                "We provide an approach to possibly circumvent the exploration of a group of policies based on heuristic computation for one abstract policy, thus leading to an improvement in runtime performance (without loss in solution quality).",
                "The important steps in this technique are defining the abstract policy and how heuristic values are computated for the abstract policies.",
                "In this paper, we propose two types of abstraction: 1.",
                "Horizon Based Abstraction (HBA): Here, the abstract policy is defined as a shorter horizon policy.",
                "It represents a group of longer horizon policies that have the same actions as the abstract policy for times less than or equal to the horizon of the abstract policy.",
                "In Figure 3(a), a T=1 abstract policy that performs East action, represents a group of T=2 policies, that perform East in the first time step.",
                "For HBA, there are two parts to heuristic computation: (a) Computing the upper bound for the horizon of the abstract policy.",
                "This is same as the heuristic computation defined by the GETHEURISTIC() algorithm for SPIDER, however with a shorter time horizon (horizon of the abstract policy). (b) Computing the maximum possible reward that can be accumulated in one time step (using GET-ABS-HEURISTIC()) and multiplying it by the number of time steps to time horizon.",
                "This maximum possible reward (for one time step) is obtained by iterating through all the actions of all the agents in Tree(i) and computing the maximum joint reward for any joint action.",
                "Sum of (a) and (b) is the heuristic value for a HBA abstract policy. 2.",
                "Node Based Abstraction (NBA): Here an abstract policy is obtained by not associating actions to certain nodes of the policy tree.",
                "Unlike in HBA, this implies multiple levels of abstraction.",
                "This is illustrated in Figure 3(b), where there are T=2 policies that do not have an action for observation TP.",
                "These incomplete T=2 policies are abstractions for T=2 complete policies.",
                "Increased levels of abstraction leads to faster computation of a complete joint policy, πroot+ and also to shorter heuristic computation and exploration, pruning phases.",
                "For NBA, the heuristic computation is similar to that of a normal policy, except in cases where there is no action associated with policy nodes.",
                "In such cases, the immediate reward is taken as Rmax (maximum reward for any action).",
                "We combine both the abstraction techniques mentioned above into one technique, SPIDER-ABS.",
                "Algorithm 5 provides the algorithm for this abstraction technique.",
                "For computing optimal joint policy with SPIDER-ABS, a non-leaf agent i initially examines all abstract T=1 policies (line 2) and sorts them based on abstract policy heuristic computations (line 17).",
                "The abstraction horizon is gradually increased and these abstract policies are then explored in descending order of heuristic values and ones that have heuristic values less than the threshold are pruned (lines 23-24).",
                "Exploration in SPIDER-ABS has the same definition as in SPIDER if the policy being explored has a horizon of policy computation which is equal to the actual time horizon and if all the nodes of the policy have an action associated with them (lines 25-30).",
                "However, if those conditions are not met, then it is substituted by a group of policies that it represents (using EXTEND-POLICY () function) (lines 31-32).",
                "EXTEND-POLICY() function is also responsible for initializing the horizon and absNodes of a policy. absNodes represents the number of nodes at the last level in the policy tree, that do not have an action assigned to them.",
                "If πi.absNodes = |Ωi|πi.horizon−1 (i.e. total number of policy nodes possible at πi.horizon) , then πi.absNodes is set to zero and πi.horizon is increased by 1.",
                "Otherwise, πi.absNodes is increased by 1.",
                "Thus, this function combines both HBA and NBA by using the policy variables, horizon and absNodes.",
                "Before substituting the abstract policy with a group of policies, those policies are sorted based on heuristic values (line 33).",
                "Similar type of abstraction based best response computation is adopted at leaf agents (lines 3-14). 4.4 Value ApproXimation (VAX) In this section, we present an approximate enhancement to SPIDER called VAX.",
                "The input to this technique is an approximation parameter , which determines the difference from the optimal solution quality.",
                "This approximation parameter is used at each agent for pruning out joint policies.",
                "The pruning mechanism in SPIDER and SPIDER-Abs dictates that a joint policy be pruned only if the threshold is exactly greater than the heuristic value.",
                "However, the 826 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Figure 3: Example of abstraction for (a) HBA (Horizon Based Abstraction) and (b) NBA (Node Based Abstraction) idea in this technique is to prune out joint a policy if the following condition is satisfied: threshold + > ˆv[πi , πi− ].",
                "Apart from the pruning condition, VAX is the same as SPIDER/SPIDER-ABS.",
                "In the example of Figure 2, if the heuristic value for the second joint policy (or second search tree node) in level 2 were 238 instead of 232, then that policy could not be be pruned using SPIDER or SPIDER-Abs.",
                "However, in VAX with an approximation parameter of 5, the joint policy in consideration would also be pruned.",
                "This is because the threshold (234) at that juncture plus the approximation parameter (5), i.e. 239 would have been greater than the heuristic value for that joint policy (238).",
                "It can be noted from the example (just discussed) that this kind of pruning can lead to fewer explorations and hence lead to an improvement in the overall run-time performance.",
                "However, this can entail a sacrifice in the quality of the solution because this technique can prune out a candidate optimal solution.",
                "A bound on the error introduced by this approximate algorithm as a function of , is provided by Proposition 3. 4.5 Percentage ApproXimation (PAX) In this section, we present the second approximation enhancement over SPIDER called PAX.",
                "Input to this technique is a parameter, δ that represents the minimum percentage of the optimal solution quality that is desired.",
                "Output of this technique is a policy with an expected value that is at least δ% of the optimal solution quality.",
                "A policy is pruned if the following condition is satisfied: threshold > δ 100 ˆv[πi , πi− ].",
                "Like in VAX, the only difference between PAX and SPIDER/SPIDER-ABS is this pruning condition.",
                "Again in Figure 2, if the heuristic value for the second search tree node in level 2 were 238 instead of 232, then PAX with an input parameter of 98% would be able to prune that search tree node (since 98 100 ∗238 < 234).",
                "This type of pruning leads to fewer explorations and hence an improvement in run-time performance, while potentially leading to a loss in quality of the solution.",
                "Proposition 4 provides the bound on quality loss. 4.6 Theoretical Results PROPOSITION 1.",
                "Heuristic provided using the centralized MDP heuristic is admissible.",
                "Proof.",
                "For the value provided by the heuristic to be admissible, it should be an over estimate of the expected value for a joint policy.",
                "Thus, we need to show that: For l ∈ Ei+ ∪ Ei− : ˆvt l ≥ vt l (refer to notation in Section 4.2) We use mathematical induction on t to prove this.",
                "Base case: t = T − 1.",
                "Irrespective of whether l ∈ Ei− or l ∈ Ei+ , ˆrt l is computed by maximizing over all actions of the agents in Tree(i), while rt l is computed for fixed policies of the same agents.",
                "Hence, ˆrt l ≥ rt l and also ˆvt l ≥ vt l .",
                "Assumption: Proposition holds for t = η, where 1 ≤ η < T − 1.",
                "We now have to prove that the proposition holds for t = η − 1.",
                "We show the proof for l ∈ Ei− and similar reasoning can be adopted to prove for l ∈ Ei+ .",
                "The heuristic value function for l ∈ Ei− is provided by the following equation: ˆvη−1 l =ˆrη−1 l + max al2 ω η l1 ,s η l ˆpη−1 l1 ˆpη−1 l2 pη−1 u ˆvη l Rewriting the RHS and using Eqn 2 (in Section 4.2) =ˆrη−1 l + max al2 ω η l1 ,s η l pη−1 u pη−1 l1 ˆpη−1 l2 ˆvη l =ˆrη−1 l + ω η l1 ,s η l pη−1 u pη−1 l1 max al2 ˆpη−1 l2 ˆvη l Since maxal2 ˆpη−1 l2 ˆvη l ≥ ωl2 oη−1 l2 ˆpη−1 l2 ˆvη l and pη−1 l2 = oη−1 l2 ˆpη−1 l2 ≥ˆrη−1 l + ω η l1 ,s η l pη−1 u pη−1 l1 ωl2 pη−1 l2 ˆvη l Since ˆvη l ≥ vη l (from the assumption) ≥ˆrη−1 l + ω η l1 ,s η l pη−1 u pη−1 l1 ωl2 pη−1 l2 vη l Since ˆrη−1 l ≥ rη−1 l (by definition) ≥rη−1 l + ω η l1 ,s η l pη−1 u pη−1 l1 ωl2 pη−1 l2 vη l =rη−1 l + (ω η l ,s η l ) pη−1 u pη−1 l1 pη−1 l2 vη l = vη−1 l Thus proved.",
                "PROPOSITION 2.",
                "SPIDER provides an optimal solution.",
                "Proof.",
                "SPIDER examines all possible joint policies given the interaction structure of the agents.",
                "The only exception being when a joint policy is pruned based on the heuristic value.",
                "Thus, as long as a candidate optimal policy is not pruned, SPIDER will return an optimal policy.",
                "As proved in Proposition 1, the expected value for a joint policy is always an upper bound.",
                "Hence when a joint policy is pruned, it cannot be an optimal solution.",
                "PROPOSITION 3.",
                "Error bound on the solution quality for VAX (implemented over SPIDER-ABS) with an approximation parameter of is ρ , where ρ is the number of leaf nodes in the DFS tree.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 827 Proof.",
                "We prove this proposition using mathematical induction on the depth of the DFS tree.",
                "Base case: depth = 1 (i.e. one node).",
                "Best response is computed by iterating through all policies, Πk.",
                "A policy,πk is pruned if ˆv[πk, πk− ] < threshold + .",
                "Thus the best response policy computed by VAX would be at most away from the optimal best response.",
                "Hence the proposition holds for the base case.",
                "Assumption: Proposition holds for d, where 1 ≤ depth ≤ d. We now have to prove that the proposition holds for d + 1.",
                "Without loss of generality, lets assume that the root node of this tree has k children.",
                "Each of this children is of depth ≤ d, and hence from the assumption, the error introduced in kth child is ρk , where ρk is the number of leaf nodes in kth child of the root.",
                "Therefore, ρ = k ρk, where ρ is the number of leaf nodes in the tree.",
                "In SPIDER-ABS, threshold at the root agent, thresspider = k v[πk+ , πk− ].",
                "However, with VAX the threshold at the root agent will be (in the worst case), threshvax = k v[πk+ , πk− ]− k ρk .",
                "Hence, with VAX a joint policy is pruned at the root agent if ˆv[πroot, πroot− ] < threshvax + ⇒ ˆv[πroot, πroot− ] < threshspider − (( k ρk) − 1) ≤ threshspider − ( k ρk) ≤ threshspider − ρ .",
                "Hence proved.",
                "PROPOSITION 4.",
                "For PAX (implemented over SPIDER-ABS) with an input parameter of δ, the solution quality is at least δ 100 v[πroot+,∗ ], where v[πroot+,∗ ] denotes the optimal solution quality.",
                "Proof.",
                "We prove this proposition using mathematical induction on the depth of the DFS tree.",
                "Base case: depth = 1 (i.e. one node).",
                "Best response is computed by iterating through all policies, Πk.",
                "A policy,πk is pruned if δ 100 ˆv[πk, πk− ] < threshold.",
                "Thus the best response policy computed by PAX would be at least δ 100 times the optimal best response.",
                "Hence the proposition holds for the base case.",
                "Assumption: Proposition holds for d, where 1 ≤ depth ≤ d. We now have to prove that the proposition holds for d + 1.",
                "Without loss of generality, lets assume that the root node of this tree has k children.",
                "Each of this children is of depth ≤ d, and hence from the assumption, the solution quality in the kth child is at least δ 100 v[πk+,∗ , πk− ] for PAX.",
                "With SPIDER-ABS, a joint policy is pruned at the root agent if ˆv[πroot, πroot− ] < k v[πk+,∗ , πk− ].",
                "However with PAX, a joint policy is pruned if δ 100 ˆv[πroot, πroot− ] < k δ 100 v[πk+,∗ , πk− ] ⇒ ˆv[πroot, πroot− ] < k v[πk+,∗ , πk− ].",
                "Since the pruning condition at the root agent in PAX is the same as the one in SPIDER-ABS, there is no error introduced at the root agent and all the error is introduced in the children.",
                "Thus, overall solution quality is at least δ 100 of the optimal solution.",
                "Hence proved. 5.",
                "EXPERIMENTAL RESULTS All our experiments were conducted on the sensor network domain from Section 2.",
                "The five network configurations employed are shown in Figure 4.",
                "Algorithms that we experimented with are GOA, SPIDER, SPIDER-ABS, PAX and VAX.",
                "We compare against GOA because it is the only global optimal algorithm that considers more than two agents.",
                "We performed two sets of experiments: (i) firstly, we compared the run-time performance of the above algorithms and (ii) secondly, we experimented with PAX and VAX to study the tradeoff between run-time and solution quality.",
                "Experiments were terminated after 10000 seconds1 .",
                "Figure 5(a) provides run-time comparisons between the optimal algorithms GOA, SPIDER, SPIDER-Abs and the approximate algorithms, PAX ( of 30) and VAX(δ of 80).",
                "X-axis denotes the 1 Machine specs for all experiments: Intel Xeon 3.6 GHZ processor, 2GB RAM sensor network configuration used, while Y-axis indicates the runtime (on a log-scale).",
                "The time horizon of policy computation was 3.",
                "For each configuration (3-chain, 4-chain, 4-star and 5-star), there are five bars indicating the time taken by GOA, SPIDER, SPIDERAbs, PAX and VAX.",
                "GOA did not terminate within the time limit for 4-star and 5-star configurations.",
                "SPIDER-Abs dominated the SPIDER and GOA for all the configurations.",
                "For instance, in the 3chain configuration, SPIDER-ABS provides 230-fold speedup over GOA and 2-fold speedup over SPIDER and for the 4-chain configuration it provides 58-fold speedup over GOA and 2-fold speedup over SPIDER.",
                "The two approximation approaches, VAX and PAX provided further improvement in performance over SPIDER-Abs.",
                "For instance, in the 5-star configuration VAX provides a 15-fold speedup and PAX provides a 8-fold speedup over SPIDER-Abs.",
                "Figures 5(b) provides a comparison of the solution quality obtained using the different algorithms for the problems tested in Figure 5(a).",
                "X-axis denotes the sensor network configuration while Y-axis indicates the solution quality.",
                "Since GOA, SPIDER, and SPIDER-Abs are all global optimal algorithms, the solution quality is the same for all those algorithms.",
                "For 5-P configuration, the global optimal algorithms did not terminate within the limit of 10000 seconds, so the bar for optimal quality indicates an upper bound on the optimal solution quality.",
                "With both the approximations, we obtained a solution quality that was close to the optimal solution quality.",
                "In 3-chain and 4-star configurations, it is remarkable that both PAX and VAX obtained almost the same actual quality as the global optimal algorithms, despite the approximation parameter and δ.",
                "For other configurations as well, the loss in quality was less than 20% of the optimal solution quality.",
                "Figure 5(c) provides the time to solution with PAX (for varying epsilons).",
                "X-axis denotes the approximation parameter, δ (percentage to optimal) used, while Y-axis denotes the time taken to compute the solution (on a log-scale).",
                "The time horizon for all the configurations was 4.",
                "As δ was decreased from 70 to 30, the time to solution decreased drastically.",
                "For instance, in the 3-chain case there was a total speedup of 170-fold when the δ was changed from 70 to 30.",
                "Interestingly, even with a low δ of 30%, the actual solution quality remained equal to the one obtained at 70%.",
                "Figure 5(d) provides the time to solution for all the configurations with VAX (for varying epsilons).",
                "X-axis denotes the approximation parameter, used, while Y-axis denotes the time taken to compute the solution (on a log-scale).",
                "The time horizon for all the configurations was 4.",
                "As was increased, the time to solution decreased drastically.",
                "For instance, in the 4-star case there was a total speedup of 73-fold when the was changed from 60 to 140.",
                "Again, the actual solution quality did not change with varying epsilon.",
                "Figure 4: Sensor network configurations 828 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Figure 5: Comparison of GOA, SPIDER, SPIDER-Abs and VAX for T = 3 on (a) Runtime and (b) Solution quality; (c) Time to solution for PAX with varying percentage to optimal for T=4 (d) Time to solution for VAX with varying epsilon for T=4 6.",
                "SUMMARY AND RELATED WORK This paper presents four algorithms SPIDER, SPIDER-ABS, PAX and VAX that provide a novel combination of features for policy search in distributed POMDPs: (i) exploiting agent interaction structure given a network of agents (i.e. easier scale-up to larger number of agents); (ii) using branch and bound search with an MDP based heuristic function; (iii) utilizing abstraction to improve runtime performance without sacrificing solution quality; (iv) providing a priori percentage bounds on quality of solutions using PAX; and (v) providing expected value bounds on the quality of solutions using VAX.",
                "These features allow for systematic tradeoff of solution quality for run-time in networks of agents operating under uncertainty.",
                "Experimental results show orders of magnitude improvement in performance over previous global optimal algorithms.",
                "Researchers have typically employed two types of techniques for solving distributed POMDPs.",
                "The first set of techniques compute global optimal solutions.",
                "Hansen et al. [5] present an algorithm based on dynamic programming and iterated elimination of dominant policies, that provides optimal solutions for distributed POMDPs.",
                "Szer et al. [13] provide an optimal heuristic search method for solving Decentralized POMDPs.",
                "This algorithm is based on the combination of a classical heuristic search algorithm, A∗ and decentralized control theory.",
                "The key differences between SPIDER and MAA* are: (a) Enhancements to SPIDER (VAX and PAX) provide for <br>quality guaranteed approximation</br>s, while MAA* is a global optimal algorithm and hence involves significant computational complexity; (b) Due to MAA*s inability to exploit interaction structure, it was illustrated only with two agents.",
                "However, SPIDER has been illustrated for networks of agents; and (c) SPIDER explores the joint policy one agent at a time, while MAA* expands it one time step at a time (simultaneously for all the agents).",
                "The second set of techniques seek approximate policies.",
                "EmeryMontemerlo et al. [4] approximate POSGs as a series of one-step Bayesian games using heuristics to approximate future value, trading off limited lookahead for computational efficiency, resulting in locally optimal policies (with respect to the selected heuristic).",
                "Nair et al. [9]s JESP algorithm uses dynamic programming to reach a local optimum solution for finite horizon decentralized POMDPs.",
                "Peshkin et al. [11] and Bernstein et al. [2] are examples of policy search techniques that search for locally optimal policies.",
                "Though all the above techniques improve the efficiency of policy computation considerably, they are unable to provide error bounds on the quality of the solution.",
                "This aspect of quality bounds differentiates SPIDER from all the above techniques.",
                "Acknowledgements.",
                "This material is based upon work supported by the Defense Advanced Research Projects Agency (DARPA), through the Department of the Interior, NBC, Acquisition Services Division under Contract No.",
                "NBCHD030010.",
                "The views and conclusions contained in this document are those of the authors, and should not be interpreted as representing the official policies, either expressed or implied, of the Defense Advanced Research Projects Agency or the U.S. Government. 7.",
                "REFERENCES [1] R. Becker, S. Zilberstein, V. Lesser, and C.V. Goldman.",
                "Solving transition independent decentralized Markov decision processes.",
                "JAIR, 22:423-455, 2004. [2] D. S. Bernstein, E.A.",
                "Hansen, and S. Zilberstein.",
                "Bounded policy iteration for decentralized POMDPs.",
                "In IJCAI, 2005. [3] D. S. Bernstein, S. Zilberstein, and N. Immerman.",
                "The complexity of decentralized control of MDPs.",
                "In UAI, 2000. [4] R. Emery-Montemerlo, G. Gordon, J. Schneider, and S. Thrun.",
                "Approximate solutions for partially observable stochastic games with common payoffs.",
                "In AAMAS, 2004. [5] E. Hansen, D. Bernstein, and S. Zilberstein.",
                "Dynamic programming for partially observable stochastic games.",
                "In AAAI, 2004. [6] V. Lesser, C. Ortiz, and M. Tambe.",
                "Distributed sensor nets: A multiagent perspective.",
                "Kluwer, 2003. [7] R. Maheswaran, M. Tambe, E. Bowring, J. Pearce, and P. Varakantham.",
                "Taking dcop to the real world : Efficient complete solutions for distributed event scheduling.",
                "In AAMAS, 2004. [8] P. J. Modi, W. Shen, M. Tambe, and M. Yokoo.",
                "An asynchronous complete method for distributed constraint optimization.",
                "In AAMAS, 2003. [9] R. Nair, D. Pynadath, M. Yokoo, M. Tambe, and S. Marsella.",
                "Taming decentralized POMDPs: Towards efficient policy computation for multiagent settings.",
                "In IJCAI, 2003. [10] R. Nair, P. Varakantham, M. Tambe, and M. Yokoo.",
                "Networked distributed POMDPs: A synthesis of distributed constraint optimization and POMDPs.",
                "In AAAI, 2005. [11] L. Peshkin, N. Meuleau, K.-E. Kim, and L. Kaelbling.",
                "Learning to cooperate via policy search.",
                "In UAI, 2000. [12] A. Petcu and B. Faltings.",
                "A scalable method for multiagent constraint optimization.",
                "In IJCAI, 2005. [13] D. Szer, F. Charpillet, and S. Zilberstein.",
                "MAA*: A heuristic search algorithm for solving decentralized POMDPs.",
                "In IJCAI, 2005.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 829"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Este documento supera las limitaciones de ambos enfoques al proporcionar araña, una combinación novedosa de tres características clave para la generación de políticas en POMDP distribuidos: (i) Explota la estructura de interacción del agente dada una red de agentes (es decir, permitiendo una escala más fácil a un número mayor a un número más grande.de agentes);(ii) Utiliza una combinación de heurísticas para la búsqueda de políticas aceleradas;y (iii) Permite la \"aproximación garantizada de calidad\" s, lo que permite una compensación sistemática de calidad de solución para el tiempo.",
                "Las diferencias clave entre Spider y MAA* son: (a) Las mejoras de Spider (VAX y PAX) proporcionan una \"aproximación garantizada de calidad\", mientras que MAA* es un algoritmo óptimo global y, por lo tanto, implica una complejidad computacional significativa;(b) Debido a la incapacidad de Maa*para explotar la estructura de interacción, se ilustra solo con dos agentes."
            ],
            "translated_text": "",
            "candidates": [
                "aproximación garantizada de calidad",
                "aproximación garantizada de calidad",
                "aproximación garantizada de calidad",
                "aproximación garantizada de calidad"
            ],
            "error": []
        },
        "branch and bound heuristic search technique": {
            "translated_key": "",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Letting loose a SPIDER on a network of POMDPs: Generating quality guaranteed policies Pradeep Varakantham, Janusz Marecki, Yuichi Yabu∗ , Milind Tambe, Makoto Yokoo∗ University of Southern California, Los Angeles, CA 90089, {varakant, marecki, tambe}@usc.edu ∗ Dept.",
                "of Intelligent Systems, Kyushu University, Fukuoka, 812-8581 Japan, yokoo@is.kyushu-u.ac.jp ABSTRACT Distributed Partially Observable Markov Decision Problems (Distributed POMDPs) are a popular approach for modeling multi-agent systems acting in uncertain domains.",
                "Given the significant complexity of solving distributed POMDPs, particularly as we scale up the numbers of agents, one popular approach has focused on approximate solutions.",
                "Though this approach is efficient, the algorithms within this approach do not provide any guarantees on solution quality.",
                "A second less popular approach focuses on global optimality, but typical results are available only for two agents, and also at considerable computational cost.",
                "This paper overcomes the limitations of both these approaches by providing SPIDER, a novel combination of three key features for policy generation in distributed POMDPs: (i) it exploits agent interaction structure given a network of agents (i.e. allowing easier scale-up to larger number of agents); (ii) it uses a combination of heuristics to speedup policy search; and (iii) it allows quality guaranteed approximations, allowing a systematic tradeoff of solution quality for time.",
                "Experimental results show orders of magnitude improvement in performance when compared with previous global optimal algorithms.",
                "Categories and Subject Descriptors I.2.11 [Artificial Intelligence]: Distributed Artificial IntelligenceMulti-agent Systems General Terms Algorithms, Theory 1.",
                "INTRODUCTION Distributed Partially Observable Markov Decision Problems (Distributed POMDPs) are emerging as a popular approach for modeling sequential decision making in teams operating under uncertainty [9, 4, 1, 2, 13].",
                "The uncertainty arises on account of nondeterminism in the outcomes of actions and because the world state may only be partially (or incorrectly) observable.",
                "Unfortunately, as shown by Bernstein et al. [3], the problem of finding the optimal joint policy for general distributed POMDPs is NEXP-Complete.",
                "Researchers have attempted two different types of approaches towards solving these models.",
                "The first category consists of highly efficient approximate techniques, that may not reach globally optimal solutions [2, 9, 11].",
                "The key problem with these techniques has been their inability to provide any guarantees on the quality of the solution.",
                "In contrast, the second less popular category of approaches has focused on a global optimal result [13, 5, 10].",
                "Though these approaches obtain optimal solutions, they typically consider only two agents.",
                "Furthermore, they fail to exploit structure in the interactions of the agents and hence are severely hampered with respect to scalability when considering more than two agents.",
                "To address these problems with the existing approaches, we propose approximate techniques that provide guarantees on the quality of the solution while focussing on a network of more than two agents.",
                "We first propose the basic SPIDER (Search for Policies In Distributed EnviRonments) algorithm.",
                "There are two key novel features in SPIDER: (i) it is a <br>branch and bound heuristic search technique</br> that uses a MDP-based heuristic function to search for an optimal joint policy; (ii) it exploits network structure of agents by organizing agents into a Depth First Search (DFS) pseudo tree and takes advantage of the independence in the different branches of the DFS tree.",
                "We then provide three enhancements to improve the efficiency of the basic SPIDER algorithm while providing guarantees on the quality of the solution.",
                "The first enhancement uses abstractions for speedup, but does not sacrifice solution quality.",
                "In particular, it initially performs branch and bound search on abstract policies and then extends to complete policies.",
                "The second enhancement obtains speedups by sacrificing solution quality, but within an input parameter that provides the tolerable expected value difference from the optimal solution.",
                "The third enhancement is again based on bounding the search for efficiency, however with a tolerance parameter that is provided as a percentage of optimal.",
                "We experimented with the sensor network domain presented in Nair et al. [10], a domain representative of an important class of problems with networks of agents working in uncertain environments.",
                "In our experiments, we illustrate that SPIDER dominates an existing global optimal approach called GOA [10], the only known global optimal algorithm with demonstrated experimental results for more than two agents.",
                "Furthermore, we demonstrate that abstraction improves the performance of SPIDER significantly (while providing optimal solutions).",
                "We finally demonstrate a key feature of SPIDER: by utilizing the approximation enhancements it enables principled tradeoffs in run-time versus solution quality. 822 978-81-904262-7-5 (RPS) c 2007 IFAAMAS 2.",
                "DOMAIN: DISTRIBUTED SENSOR NETS Distributed sensor networks are a large, important class of domains that motivate our work.",
                "This paper focuses on a set of target tracking problems that arise in certain types of sensor networks [6] first introduced in [10].",
                "Figure 1 shows a specific problem instance within this type consisting of three sensors.",
                "Here, each sensor node can scan in one of four directions: North, South, East or West (see Figure 1).",
                "To track a target and obtain associated reward, two sensors with overlapping scanning areas must coordinate by scanning the same area simultaneously.",
                "In Figure 1, to track a target in Loc11, sensor1 needs to scan East and sensor2 needs to scan West simultaneously.",
                "Thus, sensors have to act in a coordinated fashion.",
                "We assume that there are two independent targets and that each targets movement is uncertain and unaffected by the sensor agents.",
                "Based on the area it is scanning, each sensor receives observations that can have false positives and false negatives.",
                "The sensors observations and transitions are independent of each others actions e.g.the observations that sensor1 receives are independent of sensor2s actions.",
                "Each agent incurs a cost for scanning whether the target is present or not, but no cost if it turns off.",
                "Given the sensors observational uncertainty, the targets uncertain transitions and the distributed nature of the sensor nodes, these sensor nets provide a useful domains for applying distributed POMDP models.",
                "Figure 1: A 3-chain sensor configuration 3.",
                "BACKGROUND 3.1 Model: Network Distributed POMDP The ND-POMDP model was introduced in [10], motivated by domains such as the sensor networks introduced in Section 2.",
                "It is defined as the tuple S, A, P, Ω, O, R, b , where S = ×1≤i≤nSi × Su is the set of world states.",
                "Si refers to the set of local states of agent i and Su is the set of unaffectable states.",
                "Unaffectable state refers to that part of the world state that cannot be affected by the agents actions, e.g. environmental factors like target locations that no agent can control.",
                "A = ×1≤i≤nAi is the set of joint actions, where Ai is the set of action for agent i. ND-POMDP assumes transition independence, where the transition function is defined as P(s, a, s ) = Pu(su, su) · 1≤i≤n Pi(si, su, ai, si), where a = a1, . . . , an is the joint action performed in state s = s1, . . . , sn, su and s = s1, . . . , sn, su is the resulting state.",
                "Ω = ×1≤i≤nΩi is the set of joint observations where Ωi is the set of observations for agents i. Observational independence is assumed in ND-POMDPs i.e., the joint observation function is defined as O(s, a, ω) = 1≤i≤n Oi(si, su, ai, ωi), where s = s1, . . . , sn, su is the world state that results from the agents performing a = a1, . . . , an in the previous state, and ω = ω1, . . . , ωn ∈ Ω is the observation received in state s. This implies that each agents observation depends only on the unaffectable state, its local action and on its resulting local state.",
                "The reward function, R, is defined as R(s, a) = l Rl(sl1, . . . , slr, su, al1, . . . , alr ), where each l could refer to any sub-group of agents and r = |l|.",
                "Based on the reward function, an interaction hypergraph is constructed.",
                "A hyper-link, l, exists between a subset of agents for all Rl that comprise R. The interaction hypergraph is defined as G = (Ag, E), where the agents, Ag, are the vertices and E = {l|l ⊆ Ag ∧ Rl is a component of R} are the edges.",
                "The initial belief state (distribution over the initial state), b, is defined as b(s) = bu(su) · 1≤i≤n bi(si), where bu and bi refer to the distribution over initial unaffectable state and agent is initial belief state, respectively.",
                "The goal in ND-POMDP is to compute the joint policy π = π1, . . . , πn that maximizes teams expected reward over a finite horizon T starting from the belief state b.",
                "An ND-POMDP is similar to an n-ary Distributed Constraint Optimization Problem (DCOP)[8, 12] where the variable at each node represents the policy selected by an individual agent, πi with the domain of the variable being the set of all local policies, Πi.",
                "The reward component Rl where |l| = 1 can be thought of as a local constraint while the reward component Rl where l > 1 corresponds to a non-local constraint in the constraint graph. 3.2 Algorithm: Global Optimal Algorithm (GOA) In previous work, GOA has been defined as a global optimal algorithm for ND-POMDPs [10].",
                "We will use GOA in our experimental comparisons, since GOA is a state-of-the-art global optimal algorithm, and in fact the only one with experimental results available for networks of more than two agents.",
                "GOA borrows from a global optimal DCOP algorithm called DPOP[12].",
                "GOAs message passing follows that of DPOP.",
                "The first phase is the UTIL propagation, where the utility messages, in this case values of policies, are passed up from the leaves to the root.",
                "Value for a policy at an agent is defined as the sum of best response values from its children and the joint policy reward associated with the parent policy.",
                "Thus, given a policy for a parent node, GOA requires an agent to iterate through all its policies, finding the best response policy and returning the value to the parent - while at the parent node, to find the best policy, an agent requires its children to return their best responses to each of its policies.",
                "This UTIL propagation process is repeated at each level in the tree, until the root exhausts all its policies.",
                "In the second phase of VALUE propagation, where the optimal policies are passed down from the root till the leaves.",
                "GOA takes advantage of the local interactions in the interaction graph, by pruning out unnecessary joint policy evaluations (associated with nodes not connected directly in the tree).",
                "Since the interaction graph captures all the reward interactions among agents and as this algorithm iterates through all the relevant joint policy evaluations, this algorithm yields a globally optimal solution. 4.",
                "SPIDER As mentioned in Section 3.1, an ND-POMDP can be treated as a DCOP, where the goal is to compute a joint policy that maximizes the overall joint reward.",
                "The brute-force technique for computing an optimal policy would be to examine the expected values for all possible joint policies.",
                "The key idea in SPIDER is to avoid computation of expected values for the entire space of joint policies, by utilizing upper bounds on the expected values of policies and the interaction structure of the agents.",
                "Akin to some of the algorithms for DCOP [8, 12], SPIDER has a pre-processing step that constructs a DFS tree corresponding to the given interaction structure.",
                "Note that these DFS trees are pseudo trees [12] that allow links between ancestors and children.",
                "We employ the Maximum Constrained Node (MCN) heuristic used in the DCOP algorithm, ADOPT [8], however other heuristics (such as MLSP heuristic from [7]) can also be employed.",
                "MCN heuristic tries to place agents with more number of constraints at the top of the tree.",
                "This tree governs how the search for the optimal joint polThe Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 823 icy proceeds in SPIDER.",
                "The algorithms presented in this paper are easily extendable to hyper-trees, however for expository purposes, we assume binary trees.",
                "SPIDER is an algorithm for centralized planning and distributed execution in distributed POMDPs.",
                "In this paper, we employ the following notation to denote policies and expected values: Ancestors(i) ⇒ agents from i to the root (not including i).",
                "Tree(i) ⇒ agents in the sub-tree (not including i) for which i is the root. πroot+ ⇒ joint policy of all agents. πi+ ⇒ joint policy of all agents in Tree(i) ∪ i. πi− ⇒ joint policy of agents that are in Ancestors(i). πi ⇒ policy of the ith agent. ˆv[πi, πi− ] ⇒ upper bound on the expected value for πi+ given πi and policies of ancestor agents i.e. πi− . ˆvj[πi, πi− ] ⇒ upper bound on the expected value for πi+ from the jth child. v[πi, πi− ] ⇒ expected value for πi given policies of ancestor agents, πi− . v[πi+ , πi− ] ⇒ expected value for πi+ given policies of ancestor agents, πi− . vj[πi+ , πi− ] ⇒ expected value for πi+ from the jth child.",
                "Figure 2: Execution of SPIDER, an example 4.1 Outline of SPIDER SPIDER is based on the idea of branch and bound search, where the nodes in the search tree represent partial/complete joint policies.",
                "Figure 2 shows an example search tree for the SPIDER algorithm, using an example of the three agent chain.",
                "Before SPIDER begins its search we create a DFS tree (i.e. pseudo tree) from the three agent chain, with the middle agent as the root of this tree.",
                "SPIDER exploits the structure of this DFS tree while engaging in its search.",
                "Note that in our example figure, each agent is assigned a policy with T=2.",
                "Thus, each rounded rectange (search tree node) indicates a partial/complete joint policy, a rectangle indicates an agent and the ovals internal to an agent show its policy.",
                "Heuristic or actual expected value for a joint policy is indicated in the top right corner of the rounded rectangle.",
                "If the number is italicized and underlined, it implies that the actual expected value of the joint policy is provided.",
                "SPIDER begins with no policy assigned to any of the agents (shown in the level 1 of the search tree).",
                "Level 2 of the search tree indicates that the joint policies are sorted based on upper bounds computed for root agents policies.",
                "Level 3 shows one SPIDER search node with a complete joint policy (a policy assigned to each of the agents).",
                "The expected value for this joint policy is used to prune out the nodes in level 2 (the ones with upper bounds < 234) When creating policies for each non-leaf agent i, SPIDER potentially performs two steps: 1.",
                "Obtaining upper bounds and sorting: In this step, agent i computes upper bounds on the expected values, ˆv[πi, πi− ] of the joint policies πi+ corresponding to each of its policy πi and fixed ancestor policies.",
                "An MDP based heuristic is used to compute these upper bounds on the expected values.",
                "Detailed description about this MDP heuristic is provided in Section 4.2.",
                "All policies of agent i, Πi are then sorted based on these upper bounds (also referred to as heuristic values henceforth) in descending order.",
                "Exploration of these policies (in step 2 below) are performed in this descending order.",
                "As indicated in the level 2 of the search tree (of Figure 2), all the joint policies are sorted based on the heuristic values, indicated in the top right corner of each joint policy.",
                "The intuition behind sorting and then exploring policies in descending order of upper bounds, is that the policies with higher upper bounds could yield joint policies with higher expected values. 2.",
                "Exploration and Pruning: Exploration implies computing the best response joint policy πi+,∗ corresponding to fixed ancestor policies of agent i, πi− .",
                "This is performed by iterating through all policies of agent i i.e.",
                "Πi and summing two quantities for each policy: (i) the best response for all of is children (obtained by performing steps 1 and 2 at each of the child nodes); (ii) the expected value obtained by i for fixed policies of ancestors.",
                "Thus, exploration of a policy πi yields actual expected value of a joint policy, πi+ represented as v[πi+ , πi− ].",
                "The policy with the highest expected value is the best response policy.",
                "Pruning refers to avoiding exploring all policies (or computing expected values) at agent i by using the current best expected value, vmax [πi+ , πi− ].",
                "Henceforth, this vmax [πi+ , πi− ] will be referred to as threshold.",
                "A policy, πi need not be explored if the upper bound for that policy, ˆv[πi, πi− ] is less than the threshold.",
                "This is because the expected value for the best joint policy attainable for that policy will be less than the threshold.",
                "On the other hand, when considering a leaf agent, SPIDER computes the best response policy (and consequently its expected value) corresponding to fixed policies of its ancestors, πi− .",
                "This is accomplished by computing expected values for each of the policies (corresponding to fixed policies of ancestors) and selecting the highest expected value policy.",
                "In Figure 2, SPIDER assigns best response policies to leaf agents at level 3.",
                "The policy for the left leaf agent is to perform action East at each time step in the policy, while the policy for the right leaf agent is to perform Off at each time step.",
                "These best response policies from the leaf agents yield an actual expected value of 234 for the complete joint policy.",
                "Algorithm 1 provides the pseudo code for SPIDER.",
                "This algorithm outputs the best joint policy, πi+,∗ (with an expected value greater than threshold) for the agents in Tree(i).",
                "Lines 3-8 compute the best response policy of a leaf agent i, while lines 9-23 computes the best response joint policy for agents in Tree(i).",
                "This best response computation for a non-leaf agent i includes: (a) Sorting of policies (in descending order) based on heuristic values on line 11; (b) Computing best response policies at each of the children for fixed policies of agent i in lines 16-20; and (c) Maintaining 824 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Algorithm 1 SPIDER(i, πi− , threshold) 1: πi+,∗ ← null 2: Πi ← GET-ALL-POLICIES (horizon, Ai, Ωi) 3: if IS-LEAF(i) then 4: for all πi ∈ Πi do 5: v[πi, πi−] ← JOINT-REWARD (πi, πi−) 6: if v[πi, πi−] > threshold then 7: πi+,∗ ← πi 8: threshold ← v[πi, πi−] 9: else 10: children ← CHILDREN (i) 11: ˆΠi ← UPPER-BOUND-SORT(i, Πi, πi−) 12: for all πi ∈ ˆΠi do 13: ˜πi+ ← πi 14: if ˆv[πi, πi−] < threshold then 15: Go to line 12 16: for all j ∈ children do 17: jThres ← threshold − v[πi, πi−]− Σk∈children,k=j ˆvk[πi, πi−] 18: πj+,∗ ← SPIDER(j, πi πi−, jThres) 19: ˜πi+ ← ˜πi+ πj+,∗ 20: ˆvj[πi, πi−] ← v[πj+,∗, πi πi−] 21: if v[˜πi+, πi−] > threshold then 22: threshold ← v[˜πi+, πi−] 23: πi+,∗ ← ˜πi+ 24: return πi+,∗ Algorithm 2 UPPER-BOUND-SORT(i, Πi, πi− ) 1: children ← CHILDREN (i) 2: ˆΠi ← null /* Stores the sorted list */ 3: for all πi ∈ Πi do 4: ˆv[πi, πi−] ← JOINT-REWARD (πi, πi−) 5: for all j ∈ children do 6: ˆvj[πi, πi−] ← UPPER-BOUND(i, j, πi πi−) 7: ˆv[πi, πi−] + ← ˆvj[πi, πi−] 8: ˆΠi ← INSERT-INTO-SORTED (πi, ˆΠi) 9: return ˆΠi best expected value, joint policy in lines 21-23.",
                "Algorithm 2 provides the pseudo code for sorting policies based on the upper bounds on the expected values of joint policies.",
                "Expected value for an agent i consists of two parts: value obtained from ancestors and value obtained from its children.",
                "Line 4 computes the expected value obtained from ancestors of the agent (using JOINT-REWARD function), while lines 5-7 compute the heuristic value from the children.",
                "The sum of these two parts yields an upper bound on the expected value for agent i, and line 8 of the algorithm sorts the policies based on these upper bounds. 4.2 MDP based heuristic function The heuristic function quickly provides an upper bound on the expected value obtainable from the agents in Tree(i).",
                "The subtree of agents is a distributed POMDP in itself and the idea here is to construct a centralized MDP corresponding to the (sub-tree) distributed POMDP and obtain the expected value of the optimal policy for this centralized MDP.",
                "To reiterate this in terms of the agents in DFS tree interaction structure, we assume full observability for the agents in Tree(i) and for fixed policies of the agents in {Ancestors(i) ∪ i}, we compute the joint value ˆv[πi+ , πi− ] .",
                "We use the following notation for presenting the equations for computing upper bounds/heuristic values (for agents i and k): Let Ei− denote the set of links between agents in {Ancestors(i)∪ i} and Tree(i), Ei+ denote the set of links between agents in Tree(i).",
                "Also, if l ∈ Ei− , then l1 is the agent in {Ancestors(i)∪ i} and l2 is the agent in Tree(i), that l connects together.",
                "We first compact the standard notation: ot k =Ok(st+1 k , st+1 u , πk(ωt k), ωt+1 k ) (1) pt k =Pk(st k, st u, πk(ωt k), st+1 k ) · ot k pt u =P(st u, st+1 u ) st l = st l1 , st l2 , st u ; ωt l = ωt l1 , ωt l2 rt l =Rl(st l , πl1 (ωt l1 ), πl2 (ωt l2 )) vt l =V t πl (st l , st u, ωt l1 , ωt l2 ) Depending on the location of agent k in the agent tree we have the following cases: IF k ∈ {Ancestors(i) ∪ i}, ˆpt k = pt k, (2) IF k ∈ Tree(i), ˆpt k = Pk(st k, st u, πk(ωt k), st+1 k ) IF l ∈ Ei− , ˆrt l = max {al2 } Rl(st l , πl1 (ωt l1 ), al2 ) IF l ∈ Ei+ , ˆrt l = max {al1 ,al2 } Rl(st l , al1 , al2 ) The value function for an agent i executing the joint policy πi+ at time η − 1 is provided by the equation: V η−1 πi+ (sη−1 , ωη−1 ) = l∈Ei− vη−1 l + l∈Ei+ vη−1 l (3) where vη−1 l = rη−1 l + ω η l ,sη pη−1 l1 pη−1 l2 pη−1 u vη l Algorithm 3 UPPER-BOUND (i, j, πj− ) 1: val ← 0 2: for all l ∈ Ej− ∪ Ej+ do 3: if l ∈ Ej− then πl1 ← φ 4: for all s0 l do 5: val + ← startBel[s0 l ]· UPPER-BOUND-TIME (i, s0 l , j, πl1 , ) 6: return val Algorithm 4 UPPER-BOUND-TIME (i, st l , j, πl1 , ωt l1 ) 1: maxV al ← −∞ 2: for all al1 , al2 do 3: if l ∈ Ei− and l ∈ Ej− then al1 ← πl1 (ωt l1 ) 4: val ← GET-REWARD(st l , al1 , al2 ) 5: if t < πi.horizon − 1 then 6: for all st+1 l , ωt+1 l1 do 7: futV al←pt u ˆpt l1 ˆpt l2 8: futV al ∗ ← UPPER-BOUND-TIME(st+1 l , j, πl1 , ωt l1 ωt+1 l1 ) 9: val + ← futV al 10: if val > maxV al then maxV al ← val 11: return maxV al Upper bound on the expected value for a link is computed by modifying the equation 3 to reflect the full observability assumption.",
                "This involves removing the observational probability term for agents in Tree(i) and maximizing the future value ˆvη l over the actions of those agents (in Tree(i)).",
                "Thus, the equation for the The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 825 computation of the upper bound on a link l, is as follows: IF l ∈ Ei− , ˆvη−1 l =ˆrη−1 l + max al2 ω η l1 ,s η l ˆpη−1 l1 ˆpη−1 l2 pη−1 u ˆvη l IF l ∈ Ei+ , ˆvη−1 l =ˆrη−1 l + max al1 ,al2 s η l ˆpη−1 l1 ˆpη−1 l2 pη−1 u ˆvη l Algorithm 3 and Algorithm 4 provide the algorithm for computing upper bound for child j of agent i, using the equations descirbed above.",
                "While Algorithm 4 computes the upper bound on a link given the starting state, Algorithm 3 sums the upper bound values computed over each of the links in Ei− ∪ Ei+ . 4.3 Abstraction Algorithm 5 SPIDER-ABS(i, πi− , threshold) 1: πi+,∗ ← null 2: Πi ← GET-POLICIES (<>, 1) 3: if IS-LEAF(i) then 4: for all πi ∈ Πi do 5: absHeuristic ← GET-ABS-HEURISTIC (πi, πi−) 6: absHeuristic ∗ ← (timeHorizon − πi.horizon) 7: if πi.horizon = timeHorizon and πi.absNodes = 0 then 8: v[πi, πi−] ← JOINT-REWARD (πi, πi−) 9: if v[πi, πi−] > threshold then 10: πi+,∗ ← πi; threshold ← v[πi, πi−] 11: else if v[πi, πi−] + absHeuristic > threshold then 12: ˆΠi ← EXTEND-POLICY (πi, πi.absNodes + 1) 13: Πi + ← INSERT-SORTED-POLICIES ( ˆΠi) 14: REMOVE(πi) 15: else 16: children ← CHILDREN (i) 17: Πi ← UPPER-BOUND-SORT(i, Πi, πi−) 18: for all πi ∈ Πi do 19: ˜πi+ ← πi 20: absHeuristic ← GET-ABS-HEURISTIC (πi, πi−) 21: absHeuristic ∗ ← (timeHorizon − πi.horizon) 22: if πi.horizon = timeHorizon and πi.absNodes = 0 then 23: if ˆv[πi, πi−] < threshold and πi.absNodes = 0 then 24: Go to line 19 25: for all j ∈ children do 26: jThres ← threshold − v[πi, πi−]− Σk∈children,k=j ˆvk[πi, πi−] 27: πj+,∗ ← SPIDER(j, πi πi−, jThres) 28: ˜πi+ ← ˜πi+ πj+,∗; ˆvj[πi, πi−] ← v[πj+,∗, πi πi−] 29: if v[˜πi+, πi−] > threshold then 30: threshold ← v[˜πi+, πi−]; πi+,∗ ← ˜πi+ 31: else if ˆv[πi+, πi−] + absHeuristic > threshold then 32: ˆΠi ← EXTEND-POLICY (πi, πi.absNodes + 1) 33: Πi + ← INSERT-SORTED-POLICIES (ˆΠi) 34: REMOVE(πi) 35: return πi+,∗ In SPIDER, the exploration/pruning phase can only begin after the heuristic (or upper bound) computation and sorting for the policies has ended.",
                "We provide an approach to possibly circumvent the exploration of a group of policies based on heuristic computation for one abstract policy, thus leading to an improvement in runtime performance (without loss in solution quality).",
                "The important steps in this technique are defining the abstract policy and how heuristic values are computated for the abstract policies.",
                "In this paper, we propose two types of abstraction: 1.",
                "Horizon Based Abstraction (HBA): Here, the abstract policy is defined as a shorter horizon policy.",
                "It represents a group of longer horizon policies that have the same actions as the abstract policy for times less than or equal to the horizon of the abstract policy.",
                "In Figure 3(a), a T=1 abstract policy that performs East action, represents a group of T=2 policies, that perform East in the first time step.",
                "For HBA, there are two parts to heuristic computation: (a) Computing the upper bound for the horizon of the abstract policy.",
                "This is same as the heuristic computation defined by the GETHEURISTIC() algorithm for SPIDER, however with a shorter time horizon (horizon of the abstract policy). (b) Computing the maximum possible reward that can be accumulated in one time step (using GET-ABS-HEURISTIC()) and multiplying it by the number of time steps to time horizon.",
                "This maximum possible reward (for one time step) is obtained by iterating through all the actions of all the agents in Tree(i) and computing the maximum joint reward for any joint action.",
                "Sum of (a) and (b) is the heuristic value for a HBA abstract policy. 2.",
                "Node Based Abstraction (NBA): Here an abstract policy is obtained by not associating actions to certain nodes of the policy tree.",
                "Unlike in HBA, this implies multiple levels of abstraction.",
                "This is illustrated in Figure 3(b), where there are T=2 policies that do not have an action for observation TP.",
                "These incomplete T=2 policies are abstractions for T=2 complete policies.",
                "Increased levels of abstraction leads to faster computation of a complete joint policy, πroot+ and also to shorter heuristic computation and exploration, pruning phases.",
                "For NBA, the heuristic computation is similar to that of a normal policy, except in cases where there is no action associated with policy nodes.",
                "In such cases, the immediate reward is taken as Rmax (maximum reward for any action).",
                "We combine both the abstraction techniques mentioned above into one technique, SPIDER-ABS.",
                "Algorithm 5 provides the algorithm for this abstraction technique.",
                "For computing optimal joint policy with SPIDER-ABS, a non-leaf agent i initially examines all abstract T=1 policies (line 2) and sorts them based on abstract policy heuristic computations (line 17).",
                "The abstraction horizon is gradually increased and these abstract policies are then explored in descending order of heuristic values and ones that have heuristic values less than the threshold are pruned (lines 23-24).",
                "Exploration in SPIDER-ABS has the same definition as in SPIDER if the policy being explored has a horizon of policy computation which is equal to the actual time horizon and if all the nodes of the policy have an action associated with them (lines 25-30).",
                "However, if those conditions are not met, then it is substituted by a group of policies that it represents (using EXTEND-POLICY () function) (lines 31-32).",
                "EXTEND-POLICY() function is also responsible for initializing the horizon and absNodes of a policy. absNodes represents the number of nodes at the last level in the policy tree, that do not have an action assigned to them.",
                "If πi.absNodes = |Ωi|πi.horizon−1 (i.e. total number of policy nodes possible at πi.horizon) , then πi.absNodes is set to zero and πi.horizon is increased by 1.",
                "Otherwise, πi.absNodes is increased by 1.",
                "Thus, this function combines both HBA and NBA by using the policy variables, horizon and absNodes.",
                "Before substituting the abstract policy with a group of policies, those policies are sorted based on heuristic values (line 33).",
                "Similar type of abstraction based best response computation is adopted at leaf agents (lines 3-14). 4.4 Value ApproXimation (VAX) In this section, we present an approximate enhancement to SPIDER called VAX.",
                "The input to this technique is an approximation parameter , which determines the difference from the optimal solution quality.",
                "This approximation parameter is used at each agent for pruning out joint policies.",
                "The pruning mechanism in SPIDER and SPIDER-Abs dictates that a joint policy be pruned only if the threshold is exactly greater than the heuristic value.",
                "However, the 826 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Figure 3: Example of abstraction for (a) HBA (Horizon Based Abstraction) and (b) NBA (Node Based Abstraction) idea in this technique is to prune out joint a policy if the following condition is satisfied: threshold + > ˆv[πi , πi− ].",
                "Apart from the pruning condition, VAX is the same as SPIDER/SPIDER-ABS.",
                "In the example of Figure 2, if the heuristic value for the second joint policy (or second search tree node) in level 2 were 238 instead of 232, then that policy could not be be pruned using SPIDER or SPIDER-Abs.",
                "However, in VAX with an approximation parameter of 5, the joint policy in consideration would also be pruned.",
                "This is because the threshold (234) at that juncture plus the approximation parameter (5), i.e. 239 would have been greater than the heuristic value for that joint policy (238).",
                "It can be noted from the example (just discussed) that this kind of pruning can lead to fewer explorations and hence lead to an improvement in the overall run-time performance.",
                "However, this can entail a sacrifice in the quality of the solution because this technique can prune out a candidate optimal solution.",
                "A bound on the error introduced by this approximate algorithm as a function of , is provided by Proposition 3. 4.5 Percentage ApproXimation (PAX) In this section, we present the second approximation enhancement over SPIDER called PAX.",
                "Input to this technique is a parameter, δ that represents the minimum percentage of the optimal solution quality that is desired.",
                "Output of this technique is a policy with an expected value that is at least δ% of the optimal solution quality.",
                "A policy is pruned if the following condition is satisfied: threshold > δ 100 ˆv[πi , πi− ].",
                "Like in VAX, the only difference between PAX and SPIDER/SPIDER-ABS is this pruning condition.",
                "Again in Figure 2, if the heuristic value for the second search tree node in level 2 were 238 instead of 232, then PAX with an input parameter of 98% would be able to prune that search tree node (since 98 100 ∗238 < 234).",
                "This type of pruning leads to fewer explorations and hence an improvement in run-time performance, while potentially leading to a loss in quality of the solution.",
                "Proposition 4 provides the bound on quality loss. 4.6 Theoretical Results PROPOSITION 1.",
                "Heuristic provided using the centralized MDP heuristic is admissible.",
                "Proof.",
                "For the value provided by the heuristic to be admissible, it should be an over estimate of the expected value for a joint policy.",
                "Thus, we need to show that: For l ∈ Ei+ ∪ Ei− : ˆvt l ≥ vt l (refer to notation in Section 4.2) We use mathematical induction on t to prove this.",
                "Base case: t = T − 1.",
                "Irrespective of whether l ∈ Ei− or l ∈ Ei+ , ˆrt l is computed by maximizing over all actions of the agents in Tree(i), while rt l is computed for fixed policies of the same agents.",
                "Hence, ˆrt l ≥ rt l and also ˆvt l ≥ vt l .",
                "Assumption: Proposition holds for t = η, where 1 ≤ η < T − 1.",
                "We now have to prove that the proposition holds for t = η − 1.",
                "We show the proof for l ∈ Ei− and similar reasoning can be adopted to prove for l ∈ Ei+ .",
                "The heuristic value function for l ∈ Ei− is provided by the following equation: ˆvη−1 l =ˆrη−1 l + max al2 ω η l1 ,s η l ˆpη−1 l1 ˆpη−1 l2 pη−1 u ˆvη l Rewriting the RHS and using Eqn 2 (in Section 4.2) =ˆrη−1 l + max al2 ω η l1 ,s η l pη−1 u pη−1 l1 ˆpη−1 l2 ˆvη l =ˆrη−1 l + ω η l1 ,s η l pη−1 u pη−1 l1 max al2 ˆpη−1 l2 ˆvη l Since maxal2 ˆpη−1 l2 ˆvη l ≥ ωl2 oη−1 l2 ˆpη−1 l2 ˆvη l and pη−1 l2 = oη−1 l2 ˆpη−1 l2 ≥ˆrη−1 l + ω η l1 ,s η l pη−1 u pη−1 l1 ωl2 pη−1 l2 ˆvη l Since ˆvη l ≥ vη l (from the assumption) ≥ˆrη−1 l + ω η l1 ,s η l pη−1 u pη−1 l1 ωl2 pη−1 l2 vη l Since ˆrη−1 l ≥ rη−1 l (by definition) ≥rη−1 l + ω η l1 ,s η l pη−1 u pη−1 l1 ωl2 pη−1 l2 vη l =rη−1 l + (ω η l ,s η l ) pη−1 u pη−1 l1 pη−1 l2 vη l = vη−1 l Thus proved.",
                "PROPOSITION 2.",
                "SPIDER provides an optimal solution.",
                "Proof.",
                "SPIDER examines all possible joint policies given the interaction structure of the agents.",
                "The only exception being when a joint policy is pruned based on the heuristic value.",
                "Thus, as long as a candidate optimal policy is not pruned, SPIDER will return an optimal policy.",
                "As proved in Proposition 1, the expected value for a joint policy is always an upper bound.",
                "Hence when a joint policy is pruned, it cannot be an optimal solution.",
                "PROPOSITION 3.",
                "Error bound on the solution quality for VAX (implemented over SPIDER-ABS) with an approximation parameter of is ρ , where ρ is the number of leaf nodes in the DFS tree.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 827 Proof.",
                "We prove this proposition using mathematical induction on the depth of the DFS tree.",
                "Base case: depth = 1 (i.e. one node).",
                "Best response is computed by iterating through all policies, Πk.",
                "A policy,πk is pruned if ˆv[πk, πk− ] < threshold + .",
                "Thus the best response policy computed by VAX would be at most away from the optimal best response.",
                "Hence the proposition holds for the base case.",
                "Assumption: Proposition holds for d, where 1 ≤ depth ≤ d. We now have to prove that the proposition holds for d + 1.",
                "Without loss of generality, lets assume that the root node of this tree has k children.",
                "Each of this children is of depth ≤ d, and hence from the assumption, the error introduced in kth child is ρk , where ρk is the number of leaf nodes in kth child of the root.",
                "Therefore, ρ = k ρk, where ρ is the number of leaf nodes in the tree.",
                "In SPIDER-ABS, threshold at the root agent, thresspider = k v[πk+ , πk− ].",
                "However, with VAX the threshold at the root agent will be (in the worst case), threshvax = k v[πk+ , πk− ]− k ρk .",
                "Hence, with VAX a joint policy is pruned at the root agent if ˆv[πroot, πroot− ] < threshvax + ⇒ ˆv[πroot, πroot− ] < threshspider − (( k ρk) − 1) ≤ threshspider − ( k ρk) ≤ threshspider − ρ .",
                "Hence proved.",
                "PROPOSITION 4.",
                "For PAX (implemented over SPIDER-ABS) with an input parameter of δ, the solution quality is at least δ 100 v[πroot+,∗ ], where v[πroot+,∗ ] denotes the optimal solution quality.",
                "Proof.",
                "We prove this proposition using mathematical induction on the depth of the DFS tree.",
                "Base case: depth = 1 (i.e. one node).",
                "Best response is computed by iterating through all policies, Πk.",
                "A policy,πk is pruned if δ 100 ˆv[πk, πk− ] < threshold.",
                "Thus the best response policy computed by PAX would be at least δ 100 times the optimal best response.",
                "Hence the proposition holds for the base case.",
                "Assumption: Proposition holds for d, where 1 ≤ depth ≤ d. We now have to prove that the proposition holds for d + 1.",
                "Without loss of generality, lets assume that the root node of this tree has k children.",
                "Each of this children is of depth ≤ d, and hence from the assumption, the solution quality in the kth child is at least δ 100 v[πk+,∗ , πk− ] for PAX.",
                "With SPIDER-ABS, a joint policy is pruned at the root agent if ˆv[πroot, πroot− ] < k v[πk+,∗ , πk− ].",
                "However with PAX, a joint policy is pruned if δ 100 ˆv[πroot, πroot− ] < k δ 100 v[πk+,∗ , πk− ] ⇒ ˆv[πroot, πroot− ] < k v[πk+,∗ , πk− ].",
                "Since the pruning condition at the root agent in PAX is the same as the one in SPIDER-ABS, there is no error introduced at the root agent and all the error is introduced in the children.",
                "Thus, overall solution quality is at least δ 100 of the optimal solution.",
                "Hence proved. 5.",
                "EXPERIMENTAL RESULTS All our experiments were conducted on the sensor network domain from Section 2.",
                "The five network configurations employed are shown in Figure 4.",
                "Algorithms that we experimented with are GOA, SPIDER, SPIDER-ABS, PAX and VAX.",
                "We compare against GOA because it is the only global optimal algorithm that considers more than two agents.",
                "We performed two sets of experiments: (i) firstly, we compared the run-time performance of the above algorithms and (ii) secondly, we experimented with PAX and VAX to study the tradeoff between run-time and solution quality.",
                "Experiments were terminated after 10000 seconds1 .",
                "Figure 5(a) provides run-time comparisons between the optimal algorithms GOA, SPIDER, SPIDER-Abs and the approximate algorithms, PAX ( of 30) and VAX(δ of 80).",
                "X-axis denotes the 1 Machine specs for all experiments: Intel Xeon 3.6 GHZ processor, 2GB RAM sensor network configuration used, while Y-axis indicates the runtime (on a log-scale).",
                "The time horizon of policy computation was 3.",
                "For each configuration (3-chain, 4-chain, 4-star and 5-star), there are five bars indicating the time taken by GOA, SPIDER, SPIDERAbs, PAX and VAX.",
                "GOA did not terminate within the time limit for 4-star and 5-star configurations.",
                "SPIDER-Abs dominated the SPIDER and GOA for all the configurations.",
                "For instance, in the 3chain configuration, SPIDER-ABS provides 230-fold speedup over GOA and 2-fold speedup over SPIDER and for the 4-chain configuration it provides 58-fold speedup over GOA and 2-fold speedup over SPIDER.",
                "The two approximation approaches, VAX and PAX provided further improvement in performance over SPIDER-Abs.",
                "For instance, in the 5-star configuration VAX provides a 15-fold speedup and PAX provides a 8-fold speedup over SPIDER-Abs.",
                "Figures 5(b) provides a comparison of the solution quality obtained using the different algorithms for the problems tested in Figure 5(a).",
                "X-axis denotes the sensor network configuration while Y-axis indicates the solution quality.",
                "Since GOA, SPIDER, and SPIDER-Abs are all global optimal algorithms, the solution quality is the same for all those algorithms.",
                "For 5-P configuration, the global optimal algorithms did not terminate within the limit of 10000 seconds, so the bar for optimal quality indicates an upper bound on the optimal solution quality.",
                "With both the approximations, we obtained a solution quality that was close to the optimal solution quality.",
                "In 3-chain and 4-star configurations, it is remarkable that both PAX and VAX obtained almost the same actual quality as the global optimal algorithms, despite the approximation parameter and δ.",
                "For other configurations as well, the loss in quality was less than 20% of the optimal solution quality.",
                "Figure 5(c) provides the time to solution with PAX (for varying epsilons).",
                "X-axis denotes the approximation parameter, δ (percentage to optimal) used, while Y-axis denotes the time taken to compute the solution (on a log-scale).",
                "The time horizon for all the configurations was 4.",
                "As δ was decreased from 70 to 30, the time to solution decreased drastically.",
                "For instance, in the 3-chain case there was a total speedup of 170-fold when the δ was changed from 70 to 30.",
                "Interestingly, even with a low δ of 30%, the actual solution quality remained equal to the one obtained at 70%.",
                "Figure 5(d) provides the time to solution for all the configurations with VAX (for varying epsilons).",
                "X-axis denotes the approximation parameter, used, while Y-axis denotes the time taken to compute the solution (on a log-scale).",
                "The time horizon for all the configurations was 4.",
                "As was increased, the time to solution decreased drastically.",
                "For instance, in the 4-star case there was a total speedup of 73-fold when the was changed from 60 to 140.",
                "Again, the actual solution quality did not change with varying epsilon.",
                "Figure 4: Sensor network configurations 828 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Figure 5: Comparison of GOA, SPIDER, SPIDER-Abs and VAX for T = 3 on (a) Runtime and (b) Solution quality; (c) Time to solution for PAX with varying percentage to optimal for T=4 (d) Time to solution for VAX with varying epsilon for T=4 6.",
                "SUMMARY AND RELATED WORK This paper presents four algorithms SPIDER, SPIDER-ABS, PAX and VAX that provide a novel combination of features for policy search in distributed POMDPs: (i) exploiting agent interaction structure given a network of agents (i.e. easier scale-up to larger number of agents); (ii) using branch and bound search with an MDP based heuristic function; (iii) utilizing abstraction to improve runtime performance without sacrificing solution quality; (iv) providing a priori percentage bounds on quality of solutions using PAX; and (v) providing expected value bounds on the quality of solutions using VAX.",
                "These features allow for systematic tradeoff of solution quality for run-time in networks of agents operating under uncertainty.",
                "Experimental results show orders of magnitude improvement in performance over previous global optimal algorithms.",
                "Researchers have typically employed two types of techniques for solving distributed POMDPs.",
                "The first set of techniques compute global optimal solutions.",
                "Hansen et al. [5] present an algorithm based on dynamic programming and iterated elimination of dominant policies, that provides optimal solutions for distributed POMDPs.",
                "Szer et al. [13] provide an optimal heuristic search method for solving Decentralized POMDPs.",
                "This algorithm is based on the combination of a classical heuristic search algorithm, A∗ and decentralized control theory.",
                "The key differences between SPIDER and MAA* are: (a) Enhancements to SPIDER (VAX and PAX) provide for quality guaranteed approximations, while MAA* is a global optimal algorithm and hence involves significant computational complexity; (b) Due to MAA*s inability to exploit interaction structure, it was illustrated only with two agents.",
                "However, SPIDER has been illustrated for networks of agents; and (c) SPIDER explores the joint policy one agent at a time, while MAA* expands it one time step at a time (simultaneously for all the agents).",
                "The second set of techniques seek approximate policies.",
                "EmeryMontemerlo et al. [4] approximate POSGs as a series of one-step Bayesian games using heuristics to approximate future value, trading off limited lookahead for computational efficiency, resulting in locally optimal policies (with respect to the selected heuristic).",
                "Nair et al. [9]s JESP algorithm uses dynamic programming to reach a local optimum solution for finite horizon decentralized POMDPs.",
                "Peshkin et al. [11] and Bernstein et al. [2] are examples of policy search techniques that search for locally optimal policies.",
                "Though all the above techniques improve the efficiency of policy computation considerably, they are unable to provide error bounds on the quality of the solution.",
                "This aspect of quality bounds differentiates SPIDER from all the above techniques.",
                "Acknowledgements.",
                "This material is based upon work supported by the Defense Advanced Research Projects Agency (DARPA), through the Department of the Interior, NBC, Acquisition Services Division under Contract No.",
                "NBCHD030010.",
                "The views and conclusions contained in this document are those of the authors, and should not be interpreted as representing the official policies, either expressed or implied, of the Defense Advanced Research Projects Agency or the U.S. Government. 7.",
                "REFERENCES [1] R. Becker, S. Zilberstein, V. Lesser, and C.V. Goldman.",
                "Solving transition independent decentralized Markov decision processes.",
                "JAIR, 22:423-455, 2004. [2] D. S. Bernstein, E.A.",
                "Hansen, and S. Zilberstein.",
                "Bounded policy iteration for decentralized POMDPs.",
                "In IJCAI, 2005. [3] D. S. Bernstein, S. Zilberstein, and N. Immerman.",
                "The complexity of decentralized control of MDPs.",
                "In UAI, 2000. [4] R. Emery-Montemerlo, G. Gordon, J. Schneider, and S. Thrun.",
                "Approximate solutions for partially observable stochastic games with common payoffs.",
                "In AAMAS, 2004. [5] E. Hansen, D. Bernstein, and S. Zilberstein.",
                "Dynamic programming for partially observable stochastic games.",
                "In AAAI, 2004. [6] V. Lesser, C. Ortiz, and M. Tambe.",
                "Distributed sensor nets: A multiagent perspective.",
                "Kluwer, 2003. [7] R. Maheswaran, M. Tambe, E. Bowring, J. Pearce, and P. Varakantham.",
                "Taking dcop to the real world : Efficient complete solutions for distributed event scheduling.",
                "In AAMAS, 2004. [8] P. J. Modi, W. Shen, M. Tambe, and M. Yokoo.",
                "An asynchronous complete method for distributed constraint optimization.",
                "In AAMAS, 2003. [9] R. Nair, D. Pynadath, M. Yokoo, M. Tambe, and S. Marsella.",
                "Taming decentralized POMDPs: Towards efficient policy computation for multiagent settings.",
                "In IJCAI, 2003. [10] R. Nair, P. Varakantham, M. Tambe, and M. Yokoo.",
                "Networked distributed POMDPs: A synthesis of distributed constraint optimization and POMDPs.",
                "In AAAI, 2005. [11] L. Peshkin, N. Meuleau, K.-E. Kim, and L. Kaelbling.",
                "Learning to cooperate via policy search.",
                "In UAI, 2000. [12] A. Petcu and B. Faltings.",
                "A scalable method for multiagent constraint optimization.",
                "In IJCAI, 2005. [13] D. Szer, F. Charpillet, and S. Zilberstein.",
                "MAA*: A heuristic search algorithm for solving decentralized POMDPs.",
                "In IJCAI, 2005.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 829"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Hay dos características novedosas clave en Spider: (i) Es una \"técnica de búsqueda heurística de rama y unida\" que utiliza una función heurística basada en MDP para buscar una política conjunta óptima;(ii) Explota la estructura de red de los agentes organizando a los agentes en un pseudo árbol de búsqueda de profundidad (DFS) y aprovecha la independencia en las diferentes ramas del árbol DFS."
            ],
            "translated_text": "",
            "candidates": [
                "Rama y técnica de búsqueda heurística de rama",
                "técnica de búsqueda heurística de rama y unida"
            ],
            "error": []
        },
        "heuristic function": {
            "translated_key": "",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Letting loose a SPIDER on a network of POMDPs: Generating quality guaranteed policies Pradeep Varakantham, Janusz Marecki, Yuichi Yabu∗ , Milind Tambe, Makoto Yokoo∗ University of Southern California, Los Angeles, CA 90089, {varakant, marecki, tambe}@usc.edu ∗ Dept.",
                "of Intelligent Systems, Kyushu University, Fukuoka, 812-8581 Japan, yokoo@is.kyushu-u.ac.jp ABSTRACT Distributed Partially Observable Markov Decision Problems (Distributed POMDPs) are a popular approach for modeling multi-agent systems acting in uncertain domains.",
                "Given the significant complexity of solving distributed POMDPs, particularly as we scale up the numbers of agents, one popular approach has focused on approximate solutions.",
                "Though this approach is efficient, the algorithms within this approach do not provide any guarantees on solution quality.",
                "A second less popular approach focuses on global optimality, but typical results are available only for two agents, and also at considerable computational cost.",
                "This paper overcomes the limitations of both these approaches by providing SPIDER, a novel combination of three key features for policy generation in distributed POMDPs: (i) it exploits agent interaction structure given a network of agents (i.e. allowing easier scale-up to larger number of agents); (ii) it uses a combination of heuristics to speedup policy search; and (iii) it allows quality guaranteed approximations, allowing a systematic tradeoff of solution quality for time.",
                "Experimental results show orders of magnitude improvement in performance when compared with previous global optimal algorithms.",
                "Categories and Subject Descriptors I.2.11 [Artificial Intelligence]: Distributed Artificial IntelligenceMulti-agent Systems General Terms Algorithms, Theory 1.",
                "INTRODUCTION Distributed Partially Observable Markov Decision Problems (Distributed POMDPs) are emerging as a popular approach for modeling sequential decision making in teams operating under uncertainty [9, 4, 1, 2, 13].",
                "The uncertainty arises on account of nondeterminism in the outcomes of actions and because the world state may only be partially (or incorrectly) observable.",
                "Unfortunately, as shown by Bernstein et al. [3], the problem of finding the optimal joint policy for general distributed POMDPs is NEXP-Complete.",
                "Researchers have attempted two different types of approaches towards solving these models.",
                "The first category consists of highly efficient approximate techniques, that may not reach globally optimal solutions [2, 9, 11].",
                "The key problem with these techniques has been their inability to provide any guarantees on the quality of the solution.",
                "In contrast, the second less popular category of approaches has focused on a global optimal result [13, 5, 10].",
                "Though these approaches obtain optimal solutions, they typically consider only two agents.",
                "Furthermore, they fail to exploit structure in the interactions of the agents and hence are severely hampered with respect to scalability when considering more than two agents.",
                "To address these problems with the existing approaches, we propose approximate techniques that provide guarantees on the quality of the solution while focussing on a network of more than two agents.",
                "We first propose the basic SPIDER (Search for Policies In Distributed EnviRonments) algorithm.",
                "There are two key novel features in SPIDER: (i) it is a branch and bound heuristic search technique that uses a MDP-based <br>heuristic function</br> to search for an optimal joint policy; (ii) it exploits network structure of agents by organizing agents into a Depth First Search (DFS) pseudo tree and takes advantage of the independence in the different branches of the DFS tree.",
                "We then provide three enhancements to improve the efficiency of the basic SPIDER algorithm while providing guarantees on the quality of the solution.",
                "The first enhancement uses abstractions for speedup, but does not sacrifice solution quality.",
                "In particular, it initially performs branch and bound search on abstract policies and then extends to complete policies.",
                "The second enhancement obtains speedups by sacrificing solution quality, but within an input parameter that provides the tolerable expected value difference from the optimal solution.",
                "The third enhancement is again based on bounding the search for efficiency, however with a tolerance parameter that is provided as a percentage of optimal.",
                "We experimented with the sensor network domain presented in Nair et al. [10], a domain representative of an important class of problems with networks of agents working in uncertain environments.",
                "In our experiments, we illustrate that SPIDER dominates an existing global optimal approach called GOA [10], the only known global optimal algorithm with demonstrated experimental results for more than two agents.",
                "Furthermore, we demonstrate that abstraction improves the performance of SPIDER significantly (while providing optimal solutions).",
                "We finally demonstrate a key feature of SPIDER: by utilizing the approximation enhancements it enables principled tradeoffs in run-time versus solution quality. 822 978-81-904262-7-5 (RPS) c 2007 IFAAMAS 2.",
                "DOMAIN: DISTRIBUTED SENSOR NETS Distributed sensor networks are a large, important class of domains that motivate our work.",
                "This paper focuses on a set of target tracking problems that arise in certain types of sensor networks [6] first introduced in [10].",
                "Figure 1 shows a specific problem instance within this type consisting of three sensors.",
                "Here, each sensor node can scan in one of four directions: North, South, East or West (see Figure 1).",
                "To track a target and obtain associated reward, two sensors with overlapping scanning areas must coordinate by scanning the same area simultaneously.",
                "In Figure 1, to track a target in Loc11, sensor1 needs to scan East and sensor2 needs to scan West simultaneously.",
                "Thus, sensors have to act in a coordinated fashion.",
                "We assume that there are two independent targets and that each targets movement is uncertain and unaffected by the sensor agents.",
                "Based on the area it is scanning, each sensor receives observations that can have false positives and false negatives.",
                "The sensors observations and transitions are independent of each others actions e.g.the observations that sensor1 receives are independent of sensor2s actions.",
                "Each agent incurs a cost for scanning whether the target is present or not, but no cost if it turns off.",
                "Given the sensors observational uncertainty, the targets uncertain transitions and the distributed nature of the sensor nodes, these sensor nets provide a useful domains for applying distributed POMDP models.",
                "Figure 1: A 3-chain sensor configuration 3.",
                "BACKGROUND 3.1 Model: Network Distributed POMDP The ND-POMDP model was introduced in [10], motivated by domains such as the sensor networks introduced in Section 2.",
                "It is defined as the tuple S, A, P, Ω, O, R, b , where S = ×1≤i≤nSi × Su is the set of world states.",
                "Si refers to the set of local states of agent i and Su is the set of unaffectable states.",
                "Unaffectable state refers to that part of the world state that cannot be affected by the agents actions, e.g. environmental factors like target locations that no agent can control.",
                "A = ×1≤i≤nAi is the set of joint actions, where Ai is the set of action for agent i. ND-POMDP assumes transition independence, where the transition function is defined as P(s, a, s ) = Pu(su, su) · 1≤i≤n Pi(si, su, ai, si), where a = a1, . . . , an is the joint action performed in state s = s1, . . . , sn, su and s = s1, . . . , sn, su is the resulting state.",
                "Ω = ×1≤i≤nΩi is the set of joint observations where Ωi is the set of observations for agents i. Observational independence is assumed in ND-POMDPs i.e., the joint observation function is defined as O(s, a, ω) = 1≤i≤n Oi(si, su, ai, ωi), where s = s1, . . . , sn, su is the world state that results from the agents performing a = a1, . . . , an in the previous state, and ω = ω1, . . . , ωn ∈ Ω is the observation received in state s. This implies that each agents observation depends only on the unaffectable state, its local action and on its resulting local state.",
                "The reward function, R, is defined as R(s, a) = l Rl(sl1, . . . , slr, su, al1, . . . , alr ), where each l could refer to any sub-group of agents and r = |l|.",
                "Based on the reward function, an interaction hypergraph is constructed.",
                "A hyper-link, l, exists between a subset of agents for all Rl that comprise R. The interaction hypergraph is defined as G = (Ag, E), where the agents, Ag, are the vertices and E = {l|l ⊆ Ag ∧ Rl is a component of R} are the edges.",
                "The initial belief state (distribution over the initial state), b, is defined as b(s) = bu(su) · 1≤i≤n bi(si), where bu and bi refer to the distribution over initial unaffectable state and agent is initial belief state, respectively.",
                "The goal in ND-POMDP is to compute the joint policy π = π1, . . . , πn that maximizes teams expected reward over a finite horizon T starting from the belief state b.",
                "An ND-POMDP is similar to an n-ary Distributed Constraint Optimization Problem (DCOP)[8, 12] where the variable at each node represents the policy selected by an individual agent, πi with the domain of the variable being the set of all local policies, Πi.",
                "The reward component Rl where |l| = 1 can be thought of as a local constraint while the reward component Rl where l > 1 corresponds to a non-local constraint in the constraint graph. 3.2 Algorithm: Global Optimal Algorithm (GOA) In previous work, GOA has been defined as a global optimal algorithm for ND-POMDPs [10].",
                "We will use GOA in our experimental comparisons, since GOA is a state-of-the-art global optimal algorithm, and in fact the only one with experimental results available for networks of more than two agents.",
                "GOA borrows from a global optimal DCOP algorithm called DPOP[12].",
                "GOAs message passing follows that of DPOP.",
                "The first phase is the UTIL propagation, where the utility messages, in this case values of policies, are passed up from the leaves to the root.",
                "Value for a policy at an agent is defined as the sum of best response values from its children and the joint policy reward associated with the parent policy.",
                "Thus, given a policy for a parent node, GOA requires an agent to iterate through all its policies, finding the best response policy and returning the value to the parent - while at the parent node, to find the best policy, an agent requires its children to return their best responses to each of its policies.",
                "This UTIL propagation process is repeated at each level in the tree, until the root exhausts all its policies.",
                "In the second phase of VALUE propagation, where the optimal policies are passed down from the root till the leaves.",
                "GOA takes advantage of the local interactions in the interaction graph, by pruning out unnecessary joint policy evaluations (associated with nodes not connected directly in the tree).",
                "Since the interaction graph captures all the reward interactions among agents and as this algorithm iterates through all the relevant joint policy evaluations, this algorithm yields a globally optimal solution. 4.",
                "SPIDER As mentioned in Section 3.1, an ND-POMDP can be treated as a DCOP, where the goal is to compute a joint policy that maximizes the overall joint reward.",
                "The brute-force technique for computing an optimal policy would be to examine the expected values for all possible joint policies.",
                "The key idea in SPIDER is to avoid computation of expected values for the entire space of joint policies, by utilizing upper bounds on the expected values of policies and the interaction structure of the agents.",
                "Akin to some of the algorithms for DCOP [8, 12], SPIDER has a pre-processing step that constructs a DFS tree corresponding to the given interaction structure.",
                "Note that these DFS trees are pseudo trees [12] that allow links between ancestors and children.",
                "We employ the Maximum Constrained Node (MCN) heuristic used in the DCOP algorithm, ADOPT [8], however other heuristics (such as MLSP heuristic from [7]) can also be employed.",
                "MCN heuristic tries to place agents with more number of constraints at the top of the tree.",
                "This tree governs how the search for the optimal joint polThe Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 823 icy proceeds in SPIDER.",
                "The algorithms presented in this paper are easily extendable to hyper-trees, however for expository purposes, we assume binary trees.",
                "SPIDER is an algorithm for centralized planning and distributed execution in distributed POMDPs.",
                "In this paper, we employ the following notation to denote policies and expected values: Ancestors(i) ⇒ agents from i to the root (not including i).",
                "Tree(i) ⇒ agents in the sub-tree (not including i) for which i is the root. πroot+ ⇒ joint policy of all agents. πi+ ⇒ joint policy of all agents in Tree(i) ∪ i. πi− ⇒ joint policy of agents that are in Ancestors(i). πi ⇒ policy of the ith agent. ˆv[πi, πi− ] ⇒ upper bound on the expected value for πi+ given πi and policies of ancestor agents i.e. πi− . ˆvj[πi, πi− ] ⇒ upper bound on the expected value for πi+ from the jth child. v[πi, πi− ] ⇒ expected value for πi given policies of ancestor agents, πi− . v[πi+ , πi− ] ⇒ expected value for πi+ given policies of ancestor agents, πi− . vj[πi+ , πi− ] ⇒ expected value for πi+ from the jth child.",
                "Figure 2: Execution of SPIDER, an example 4.1 Outline of SPIDER SPIDER is based on the idea of branch and bound search, where the nodes in the search tree represent partial/complete joint policies.",
                "Figure 2 shows an example search tree for the SPIDER algorithm, using an example of the three agent chain.",
                "Before SPIDER begins its search we create a DFS tree (i.e. pseudo tree) from the three agent chain, with the middle agent as the root of this tree.",
                "SPIDER exploits the structure of this DFS tree while engaging in its search.",
                "Note that in our example figure, each agent is assigned a policy with T=2.",
                "Thus, each rounded rectange (search tree node) indicates a partial/complete joint policy, a rectangle indicates an agent and the ovals internal to an agent show its policy.",
                "Heuristic or actual expected value for a joint policy is indicated in the top right corner of the rounded rectangle.",
                "If the number is italicized and underlined, it implies that the actual expected value of the joint policy is provided.",
                "SPIDER begins with no policy assigned to any of the agents (shown in the level 1 of the search tree).",
                "Level 2 of the search tree indicates that the joint policies are sorted based on upper bounds computed for root agents policies.",
                "Level 3 shows one SPIDER search node with a complete joint policy (a policy assigned to each of the agents).",
                "The expected value for this joint policy is used to prune out the nodes in level 2 (the ones with upper bounds < 234) When creating policies for each non-leaf agent i, SPIDER potentially performs two steps: 1.",
                "Obtaining upper bounds and sorting: In this step, agent i computes upper bounds on the expected values, ˆv[πi, πi− ] of the joint policies πi+ corresponding to each of its policy πi and fixed ancestor policies.",
                "An MDP based heuristic is used to compute these upper bounds on the expected values.",
                "Detailed description about this MDP heuristic is provided in Section 4.2.",
                "All policies of agent i, Πi are then sorted based on these upper bounds (also referred to as heuristic values henceforth) in descending order.",
                "Exploration of these policies (in step 2 below) are performed in this descending order.",
                "As indicated in the level 2 of the search tree (of Figure 2), all the joint policies are sorted based on the heuristic values, indicated in the top right corner of each joint policy.",
                "The intuition behind sorting and then exploring policies in descending order of upper bounds, is that the policies with higher upper bounds could yield joint policies with higher expected values. 2.",
                "Exploration and Pruning: Exploration implies computing the best response joint policy πi+,∗ corresponding to fixed ancestor policies of agent i, πi− .",
                "This is performed by iterating through all policies of agent i i.e.",
                "Πi and summing two quantities for each policy: (i) the best response for all of is children (obtained by performing steps 1 and 2 at each of the child nodes); (ii) the expected value obtained by i for fixed policies of ancestors.",
                "Thus, exploration of a policy πi yields actual expected value of a joint policy, πi+ represented as v[πi+ , πi− ].",
                "The policy with the highest expected value is the best response policy.",
                "Pruning refers to avoiding exploring all policies (or computing expected values) at agent i by using the current best expected value, vmax [πi+ , πi− ].",
                "Henceforth, this vmax [πi+ , πi− ] will be referred to as threshold.",
                "A policy, πi need not be explored if the upper bound for that policy, ˆv[πi, πi− ] is less than the threshold.",
                "This is because the expected value for the best joint policy attainable for that policy will be less than the threshold.",
                "On the other hand, when considering a leaf agent, SPIDER computes the best response policy (and consequently its expected value) corresponding to fixed policies of its ancestors, πi− .",
                "This is accomplished by computing expected values for each of the policies (corresponding to fixed policies of ancestors) and selecting the highest expected value policy.",
                "In Figure 2, SPIDER assigns best response policies to leaf agents at level 3.",
                "The policy for the left leaf agent is to perform action East at each time step in the policy, while the policy for the right leaf agent is to perform Off at each time step.",
                "These best response policies from the leaf agents yield an actual expected value of 234 for the complete joint policy.",
                "Algorithm 1 provides the pseudo code for SPIDER.",
                "This algorithm outputs the best joint policy, πi+,∗ (with an expected value greater than threshold) for the agents in Tree(i).",
                "Lines 3-8 compute the best response policy of a leaf agent i, while lines 9-23 computes the best response joint policy for agents in Tree(i).",
                "This best response computation for a non-leaf agent i includes: (a) Sorting of policies (in descending order) based on heuristic values on line 11; (b) Computing best response policies at each of the children for fixed policies of agent i in lines 16-20; and (c) Maintaining 824 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Algorithm 1 SPIDER(i, πi− , threshold) 1: πi+,∗ ← null 2: Πi ← GET-ALL-POLICIES (horizon, Ai, Ωi) 3: if IS-LEAF(i) then 4: for all πi ∈ Πi do 5: v[πi, πi−] ← JOINT-REWARD (πi, πi−) 6: if v[πi, πi−] > threshold then 7: πi+,∗ ← πi 8: threshold ← v[πi, πi−] 9: else 10: children ← CHILDREN (i) 11: ˆΠi ← UPPER-BOUND-SORT(i, Πi, πi−) 12: for all πi ∈ ˆΠi do 13: ˜πi+ ← πi 14: if ˆv[πi, πi−] < threshold then 15: Go to line 12 16: for all j ∈ children do 17: jThres ← threshold − v[πi, πi−]− Σk∈children,k=j ˆvk[πi, πi−] 18: πj+,∗ ← SPIDER(j, πi πi−, jThres) 19: ˜πi+ ← ˜πi+ πj+,∗ 20: ˆvj[πi, πi−] ← v[πj+,∗, πi πi−] 21: if v[˜πi+, πi−] > threshold then 22: threshold ← v[˜πi+, πi−] 23: πi+,∗ ← ˜πi+ 24: return πi+,∗ Algorithm 2 UPPER-BOUND-SORT(i, Πi, πi− ) 1: children ← CHILDREN (i) 2: ˆΠi ← null /* Stores the sorted list */ 3: for all πi ∈ Πi do 4: ˆv[πi, πi−] ← JOINT-REWARD (πi, πi−) 5: for all j ∈ children do 6: ˆvj[πi, πi−] ← UPPER-BOUND(i, j, πi πi−) 7: ˆv[πi, πi−] + ← ˆvj[πi, πi−] 8: ˆΠi ← INSERT-INTO-SORTED (πi, ˆΠi) 9: return ˆΠi best expected value, joint policy in lines 21-23.",
                "Algorithm 2 provides the pseudo code for sorting policies based on the upper bounds on the expected values of joint policies.",
                "Expected value for an agent i consists of two parts: value obtained from ancestors and value obtained from its children.",
                "Line 4 computes the expected value obtained from ancestors of the agent (using JOINT-REWARD function), while lines 5-7 compute the heuristic value from the children.",
                "The sum of these two parts yields an upper bound on the expected value for agent i, and line 8 of the algorithm sorts the policies based on these upper bounds. 4.2 MDP based <br>heuristic function</br> The <br>heuristic function</br> quickly provides an upper bound on the expected value obtainable from the agents in Tree(i).",
                "The subtree of agents is a distributed POMDP in itself and the idea here is to construct a centralized MDP corresponding to the (sub-tree) distributed POMDP and obtain the expected value of the optimal policy for this centralized MDP.",
                "To reiterate this in terms of the agents in DFS tree interaction structure, we assume full observability for the agents in Tree(i) and for fixed policies of the agents in {Ancestors(i) ∪ i}, we compute the joint value ˆv[πi+ , πi− ] .",
                "We use the following notation for presenting the equations for computing upper bounds/heuristic values (for agents i and k): Let Ei− denote the set of links between agents in {Ancestors(i)∪ i} and Tree(i), Ei+ denote the set of links between agents in Tree(i).",
                "Also, if l ∈ Ei− , then l1 is the agent in {Ancestors(i)∪ i} and l2 is the agent in Tree(i), that l connects together.",
                "We first compact the standard notation: ot k =Ok(st+1 k , st+1 u , πk(ωt k), ωt+1 k ) (1) pt k =Pk(st k, st u, πk(ωt k), st+1 k ) · ot k pt u =P(st u, st+1 u ) st l = st l1 , st l2 , st u ; ωt l = ωt l1 , ωt l2 rt l =Rl(st l , πl1 (ωt l1 ), πl2 (ωt l2 )) vt l =V t πl (st l , st u, ωt l1 , ωt l2 ) Depending on the location of agent k in the agent tree we have the following cases: IF k ∈ {Ancestors(i) ∪ i}, ˆpt k = pt k, (2) IF k ∈ Tree(i), ˆpt k = Pk(st k, st u, πk(ωt k), st+1 k ) IF l ∈ Ei− , ˆrt l = max {al2 } Rl(st l , πl1 (ωt l1 ), al2 ) IF l ∈ Ei+ , ˆrt l = max {al1 ,al2 } Rl(st l , al1 , al2 ) The value function for an agent i executing the joint policy πi+ at time η − 1 is provided by the equation: V η−1 πi+ (sη−1 , ωη−1 ) = l∈Ei− vη−1 l + l∈Ei+ vη−1 l (3) where vη−1 l = rη−1 l + ω η l ,sη pη−1 l1 pη−1 l2 pη−1 u vη l Algorithm 3 UPPER-BOUND (i, j, πj− ) 1: val ← 0 2: for all l ∈ Ej− ∪ Ej+ do 3: if l ∈ Ej− then πl1 ← φ 4: for all s0 l do 5: val + ← startBel[s0 l ]· UPPER-BOUND-TIME (i, s0 l , j, πl1 , ) 6: return val Algorithm 4 UPPER-BOUND-TIME (i, st l , j, πl1 , ωt l1 ) 1: maxV al ← −∞ 2: for all al1 , al2 do 3: if l ∈ Ei− and l ∈ Ej− then al1 ← πl1 (ωt l1 ) 4: val ← GET-REWARD(st l , al1 , al2 ) 5: if t < πi.horizon − 1 then 6: for all st+1 l , ωt+1 l1 do 7: futV al←pt u ˆpt l1 ˆpt l2 8: futV al ∗ ← UPPER-BOUND-TIME(st+1 l , j, πl1 , ωt l1 ωt+1 l1 ) 9: val + ← futV al 10: if val > maxV al then maxV al ← val 11: return maxV al Upper bound on the expected value for a link is computed by modifying the equation 3 to reflect the full observability assumption.",
                "This involves removing the observational probability term for agents in Tree(i) and maximizing the future value ˆvη l over the actions of those agents (in Tree(i)).",
                "Thus, the equation for the The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 825 computation of the upper bound on a link l, is as follows: IF l ∈ Ei− , ˆvη−1 l =ˆrη−1 l + max al2 ω η l1 ,s η l ˆpη−1 l1 ˆpη−1 l2 pη−1 u ˆvη l IF l ∈ Ei+ , ˆvη−1 l =ˆrη−1 l + max al1 ,al2 s η l ˆpη−1 l1 ˆpη−1 l2 pη−1 u ˆvη l Algorithm 3 and Algorithm 4 provide the algorithm for computing upper bound for child j of agent i, using the equations descirbed above.",
                "While Algorithm 4 computes the upper bound on a link given the starting state, Algorithm 3 sums the upper bound values computed over each of the links in Ei− ∪ Ei+ . 4.3 Abstraction Algorithm 5 SPIDER-ABS(i, πi− , threshold) 1: πi+,∗ ← null 2: Πi ← GET-POLICIES (<>, 1) 3: if IS-LEAF(i) then 4: for all πi ∈ Πi do 5: absHeuristic ← GET-ABS-HEURISTIC (πi, πi−) 6: absHeuristic ∗ ← (timeHorizon − πi.horizon) 7: if πi.horizon = timeHorizon and πi.absNodes = 0 then 8: v[πi, πi−] ← JOINT-REWARD (πi, πi−) 9: if v[πi, πi−] > threshold then 10: πi+,∗ ← πi; threshold ← v[πi, πi−] 11: else if v[πi, πi−] + absHeuristic > threshold then 12: ˆΠi ← EXTEND-POLICY (πi, πi.absNodes + 1) 13: Πi + ← INSERT-SORTED-POLICIES ( ˆΠi) 14: REMOVE(πi) 15: else 16: children ← CHILDREN (i) 17: Πi ← UPPER-BOUND-SORT(i, Πi, πi−) 18: for all πi ∈ Πi do 19: ˜πi+ ← πi 20: absHeuristic ← GET-ABS-HEURISTIC (πi, πi−) 21: absHeuristic ∗ ← (timeHorizon − πi.horizon) 22: if πi.horizon = timeHorizon and πi.absNodes = 0 then 23: if ˆv[πi, πi−] < threshold and πi.absNodes = 0 then 24: Go to line 19 25: for all j ∈ children do 26: jThres ← threshold − v[πi, πi−]− Σk∈children,k=j ˆvk[πi, πi−] 27: πj+,∗ ← SPIDER(j, πi πi−, jThres) 28: ˜πi+ ← ˜πi+ πj+,∗; ˆvj[πi, πi−] ← v[πj+,∗, πi πi−] 29: if v[˜πi+, πi−] > threshold then 30: threshold ← v[˜πi+, πi−]; πi+,∗ ← ˜πi+ 31: else if ˆv[πi+, πi−] + absHeuristic > threshold then 32: ˆΠi ← EXTEND-POLICY (πi, πi.absNodes + 1) 33: Πi + ← INSERT-SORTED-POLICIES (ˆΠi) 34: REMOVE(πi) 35: return πi+,∗ In SPIDER, the exploration/pruning phase can only begin after the heuristic (or upper bound) computation and sorting for the policies has ended.",
                "We provide an approach to possibly circumvent the exploration of a group of policies based on heuristic computation for one abstract policy, thus leading to an improvement in runtime performance (without loss in solution quality).",
                "The important steps in this technique are defining the abstract policy and how heuristic values are computated for the abstract policies.",
                "In this paper, we propose two types of abstraction: 1.",
                "Horizon Based Abstraction (HBA): Here, the abstract policy is defined as a shorter horizon policy.",
                "It represents a group of longer horizon policies that have the same actions as the abstract policy for times less than or equal to the horizon of the abstract policy.",
                "In Figure 3(a), a T=1 abstract policy that performs East action, represents a group of T=2 policies, that perform East in the first time step.",
                "For HBA, there are two parts to heuristic computation: (a) Computing the upper bound for the horizon of the abstract policy.",
                "This is same as the heuristic computation defined by the GETHEURISTIC() algorithm for SPIDER, however with a shorter time horizon (horizon of the abstract policy). (b) Computing the maximum possible reward that can be accumulated in one time step (using GET-ABS-HEURISTIC()) and multiplying it by the number of time steps to time horizon.",
                "This maximum possible reward (for one time step) is obtained by iterating through all the actions of all the agents in Tree(i) and computing the maximum joint reward for any joint action.",
                "Sum of (a) and (b) is the heuristic value for a HBA abstract policy. 2.",
                "Node Based Abstraction (NBA): Here an abstract policy is obtained by not associating actions to certain nodes of the policy tree.",
                "Unlike in HBA, this implies multiple levels of abstraction.",
                "This is illustrated in Figure 3(b), where there are T=2 policies that do not have an action for observation TP.",
                "These incomplete T=2 policies are abstractions for T=2 complete policies.",
                "Increased levels of abstraction leads to faster computation of a complete joint policy, πroot+ and also to shorter heuristic computation and exploration, pruning phases.",
                "For NBA, the heuristic computation is similar to that of a normal policy, except in cases where there is no action associated with policy nodes.",
                "In such cases, the immediate reward is taken as Rmax (maximum reward for any action).",
                "We combine both the abstraction techniques mentioned above into one technique, SPIDER-ABS.",
                "Algorithm 5 provides the algorithm for this abstraction technique.",
                "For computing optimal joint policy with SPIDER-ABS, a non-leaf agent i initially examines all abstract T=1 policies (line 2) and sorts them based on abstract policy heuristic computations (line 17).",
                "The abstraction horizon is gradually increased and these abstract policies are then explored in descending order of heuristic values and ones that have heuristic values less than the threshold are pruned (lines 23-24).",
                "Exploration in SPIDER-ABS has the same definition as in SPIDER if the policy being explored has a horizon of policy computation which is equal to the actual time horizon and if all the nodes of the policy have an action associated with them (lines 25-30).",
                "However, if those conditions are not met, then it is substituted by a group of policies that it represents (using EXTEND-POLICY () function) (lines 31-32).",
                "EXTEND-POLICY() function is also responsible for initializing the horizon and absNodes of a policy. absNodes represents the number of nodes at the last level in the policy tree, that do not have an action assigned to them.",
                "If πi.absNodes = |Ωi|πi.horizon−1 (i.e. total number of policy nodes possible at πi.horizon) , then πi.absNodes is set to zero and πi.horizon is increased by 1.",
                "Otherwise, πi.absNodes is increased by 1.",
                "Thus, this function combines both HBA and NBA by using the policy variables, horizon and absNodes.",
                "Before substituting the abstract policy with a group of policies, those policies are sorted based on heuristic values (line 33).",
                "Similar type of abstraction based best response computation is adopted at leaf agents (lines 3-14). 4.4 Value ApproXimation (VAX) In this section, we present an approximate enhancement to SPIDER called VAX.",
                "The input to this technique is an approximation parameter , which determines the difference from the optimal solution quality.",
                "This approximation parameter is used at each agent for pruning out joint policies.",
                "The pruning mechanism in SPIDER and SPIDER-Abs dictates that a joint policy be pruned only if the threshold is exactly greater than the heuristic value.",
                "However, the 826 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Figure 3: Example of abstraction for (a) HBA (Horizon Based Abstraction) and (b) NBA (Node Based Abstraction) idea in this technique is to prune out joint a policy if the following condition is satisfied: threshold + > ˆv[πi , πi− ].",
                "Apart from the pruning condition, VAX is the same as SPIDER/SPIDER-ABS.",
                "In the example of Figure 2, if the heuristic value for the second joint policy (or second search tree node) in level 2 were 238 instead of 232, then that policy could not be be pruned using SPIDER or SPIDER-Abs.",
                "However, in VAX with an approximation parameter of 5, the joint policy in consideration would also be pruned.",
                "This is because the threshold (234) at that juncture plus the approximation parameter (5), i.e. 239 would have been greater than the heuristic value for that joint policy (238).",
                "It can be noted from the example (just discussed) that this kind of pruning can lead to fewer explorations and hence lead to an improvement in the overall run-time performance.",
                "However, this can entail a sacrifice in the quality of the solution because this technique can prune out a candidate optimal solution.",
                "A bound on the error introduced by this approximate algorithm as a function of , is provided by Proposition 3. 4.5 Percentage ApproXimation (PAX) In this section, we present the second approximation enhancement over SPIDER called PAX.",
                "Input to this technique is a parameter, δ that represents the minimum percentage of the optimal solution quality that is desired.",
                "Output of this technique is a policy with an expected value that is at least δ% of the optimal solution quality.",
                "A policy is pruned if the following condition is satisfied: threshold > δ 100 ˆv[πi , πi− ].",
                "Like in VAX, the only difference between PAX and SPIDER/SPIDER-ABS is this pruning condition.",
                "Again in Figure 2, if the heuristic value for the second search tree node in level 2 were 238 instead of 232, then PAX with an input parameter of 98% would be able to prune that search tree node (since 98 100 ∗238 < 234).",
                "This type of pruning leads to fewer explorations and hence an improvement in run-time performance, while potentially leading to a loss in quality of the solution.",
                "Proposition 4 provides the bound on quality loss. 4.6 Theoretical Results PROPOSITION 1.",
                "Heuristic provided using the centralized MDP heuristic is admissible.",
                "Proof.",
                "For the value provided by the heuristic to be admissible, it should be an over estimate of the expected value for a joint policy.",
                "Thus, we need to show that: For l ∈ Ei+ ∪ Ei− : ˆvt l ≥ vt l (refer to notation in Section 4.2) We use mathematical induction on t to prove this.",
                "Base case: t = T − 1.",
                "Irrespective of whether l ∈ Ei− or l ∈ Ei+ , ˆrt l is computed by maximizing over all actions of the agents in Tree(i), while rt l is computed for fixed policies of the same agents.",
                "Hence, ˆrt l ≥ rt l and also ˆvt l ≥ vt l .",
                "Assumption: Proposition holds for t = η, where 1 ≤ η < T − 1.",
                "We now have to prove that the proposition holds for t = η − 1.",
                "We show the proof for l ∈ Ei− and similar reasoning can be adopted to prove for l ∈ Ei+ .",
                "The heuristic value function for l ∈ Ei− is provided by the following equation: ˆvη−1 l =ˆrη−1 l + max al2 ω η l1 ,s η l ˆpη−1 l1 ˆpη−1 l2 pη−1 u ˆvη l Rewriting the RHS and using Eqn 2 (in Section 4.2) =ˆrη−1 l + max al2 ω η l1 ,s η l pη−1 u pη−1 l1 ˆpη−1 l2 ˆvη l =ˆrη−1 l + ω η l1 ,s η l pη−1 u pη−1 l1 max al2 ˆpη−1 l2 ˆvη l Since maxal2 ˆpη−1 l2 ˆvη l ≥ ωl2 oη−1 l2 ˆpη−1 l2 ˆvη l and pη−1 l2 = oη−1 l2 ˆpη−1 l2 ≥ˆrη−1 l + ω η l1 ,s η l pη−1 u pη−1 l1 ωl2 pη−1 l2 ˆvη l Since ˆvη l ≥ vη l (from the assumption) ≥ˆrη−1 l + ω η l1 ,s η l pη−1 u pη−1 l1 ωl2 pη−1 l2 vη l Since ˆrη−1 l ≥ rη−1 l (by definition) ≥rη−1 l + ω η l1 ,s η l pη−1 u pη−1 l1 ωl2 pη−1 l2 vη l =rη−1 l + (ω η l ,s η l ) pη−1 u pη−1 l1 pη−1 l2 vη l = vη−1 l Thus proved.",
                "PROPOSITION 2.",
                "SPIDER provides an optimal solution.",
                "Proof.",
                "SPIDER examines all possible joint policies given the interaction structure of the agents.",
                "The only exception being when a joint policy is pruned based on the heuristic value.",
                "Thus, as long as a candidate optimal policy is not pruned, SPIDER will return an optimal policy.",
                "As proved in Proposition 1, the expected value for a joint policy is always an upper bound.",
                "Hence when a joint policy is pruned, it cannot be an optimal solution.",
                "PROPOSITION 3.",
                "Error bound on the solution quality for VAX (implemented over SPIDER-ABS) with an approximation parameter of is ρ , where ρ is the number of leaf nodes in the DFS tree.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 827 Proof.",
                "We prove this proposition using mathematical induction on the depth of the DFS tree.",
                "Base case: depth = 1 (i.e. one node).",
                "Best response is computed by iterating through all policies, Πk.",
                "A policy,πk is pruned if ˆv[πk, πk− ] < threshold + .",
                "Thus the best response policy computed by VAX would be at most away from the optimal best response.",
                "Hence the proposition holds for the base case.",
                "Assumption: Proposition holds for d, where 1 ≤ depth ≤ d. We now have to prove that the proposition holds for d + 1.",
                "Without loss of generality, lets assume that the root node of this tree has k children.",
                "Each of this children is of depth ≤ d, and hence from the assumption, the error introduced in kth child is ρk , where ρk is the number of leaf nodes in kth child of the root.",
                "Therefore, ρ = k ρk, where ρ is the number of leaf nodes in the tree.",
                "In SPIDER-ABS, threshold at the root agent, thresspider = k v[πk+ , πk− ].",
                "However, with VAX the threshold at the root agent will be (in the worst case), threshvax = k v[πk+ , πk− ]− k ρk .",
                "Hence, with VAX a joint policy is pruned at the root agent if ˆv[πroot, πroot− ] < threshvax + ⇒ ˆv[πroot, πroot− ] < threshspider − (( k ρk) − 1) ≤ threshspider − ( k ρk) ≤ threshspider − ρ .",
                "Hence proved.",
                "PROPOSITION 4.",
                "For PAX (implemented over SPIDER-ABS) with an input parameter of δ, the solution quality is at least δ 100 v[πroot+,∗ ], where v[πroot+,∗ ] denotes the optimal solution quality.",
                "Proof.",
                "We prove this proposition using mathematical induction on the depth of the DFS tree.",
                "Base case: depth = 1 (i.e. one node).",
                "Best response is computed by iterating through all policies, Πk.",
                "A policy,πk is pruned if δ 100 ˆv[πk, πk− ] < threshold.",
                "Thus the best response policy computed by PAX would be at least δ 100 times the optimal best response.",
                "Hence the proposition holds for the base case.",
                "Assumption: Proposition holds for d, where 1 ≤ depth ≤ d. We now have to prove that the proposition holds for d + 1.",
                "Without loss of generality, lets assume that the root node of this tree has k children.",
                "Each of this children is of depth ≤ d, and hence from the assumption, the solution quality in the kth child is at least δ 100 v[πk+,∗ , πk− ] for PAX.",
                "With SPIDER-ABS, a joint policy is pruned at the root agent if ˆv[πroot, πroot− ] < k v[πk+,∗ , πk− ].",
                "However with PAX, a joint policy is pruned if δ 100 ˆv[πroot, πroot− ] < k δ 100 v[πk+,∗ , πk− ] ⇒ ˆv[πroot, πroot− ] < k v[πk+,∗ , πk− ].",
                "Since the pruning condition at the root agent in PAX is the same as the one in SPIDER-ABS, there is no error introduced at the root agent and all the error is introduced in the children.",
                "Thus, overall solution quality is at least δ 100 of the optimal solution.",
                "Hence proved. 5.",
                "EXPERIMENTAL RESULTS All our experiments were conducted on the sensor network domain from Section 2.",
                "The five network configurations employed are shown in Figure 4.",
                "Algorithms that we experimented with are GOA, SPIDER, SPIDER-ABS, PAX and VAX.",
                "We compare against GOA because it is the only global optimal algorithm that considers more than two agents.",
                "We performed two sets of experiments: (i) firstly, we compared the run-time performance of the above algorithms and (ii) secondly, we experimented with PAX and VAX to study the tradeoff between run-time and solution quality.",
                "Experiments were terminated after 10000 seconds1 .",
                "Figure 5(a) provides run-time comparisons between the optimal algorithms GOA, SPIDER, SPIDER-Abs and the approximate algorithms, PAX ( of 30) and VAX(δ of 80).",
                "X-axis denotes the 1 Machine specs for all experiments: Intel Xeon 3.6 GHZ processor, 2GB RAM sensor network configuration used, while Y-axis indicates the runtime (on a log-scale).",
                "The time horizon of policy computation was 3.",
                "For each configuration (3-chain, 4-chain, 4-star and 5-star), there are five bars indicating the time taken by GOA, SPIDER, SPIDERAbs, PAX and VAX.",
                "GOA did not terminate within the time limit for 4-star and 5-star configurations.",
                "SPIDER-Abs dominated the SPIDER and GOA for all the configurations.",
                "For instance, in the 3chain configuration, SPIDER-ABS provides 230-fold speedup over GOA and 2-fold speedup over SPIDER and for the 4-chain configuration it provides 58-fold speedup over GOA and 2-fold speedup over SPIDER.",
                "The two approximation approaches, VAX and PAX provided further improvement in performance over SPIDER-Abs.",
                "For instance, in the 5-star configuration VAX provides a 15-fold speedup and PAX provides a 8-fold speedup over SPIDER-Abs.",
                "Figures 5(b) provides a comparison of the solution quality obtained using the different algorithms for the problems tested in Figure 5(a).",
                "X-axis denotes the sensor network configuration while Y-axis indicates the solution quality.",
                "Since GOA, SPIDER, and SPIDER-Abs are all global optimal algorithms, the solution quality is the same for all those algorithms.",
                "For 5-P configuration, the global optimal algorithms did not terminate within the limit of 10000 seconds, so the bar for optimal quality indicates an upper bound on the optimal solution quality.",
                "With both the approximations, we obtained a solution quality that was close to the optimal solution quality.",
                "In 3-chain and 4-star configurations, it is remarkable that both PAX and VAX obtained almost the same actual quality as the global optimal algorithms, despite the approximation parameter and δ.",
                "For other configurations as well, the loss in quality was less than 20% of the optimal solution quality.",
                "Figure 5(c) provides the time to solution with PAX (for varying epsilons).",
                "X-axis denotes the approximation parameter, δ (percentage to optimal) used, while Y-axis denotes the time taken to compute the solution (on a log-scale).",
                "The time horizon for all the configurations was 4.",
                "As δ was decreased from 70 to 30, the time to solution decreased drastically.",
                "For instance, in the 3-chain case there was a total speedup of 170-fold when the δ was changed from 70 to 30.",
                "Interestingly, even with a low δ of 30%, the actual solution quality remained equal to the one obtained at 70%.",
                "Figure 5(d) provides the time to solution for all the configurations with VAX (for varying epsilons).",
                "X-axis denotes the approximation parameter, used, while Y-axis denotes the time taken to compute the solution (on a log-scale).",
                "The time horizon for all the configurations was 4.",
                "As was increased, the time to solution decreased drastically.",
                "For instance, in the 4-star case there was a total speedup of 73-fold when the was changed from 60 to 140.",
                "Again, the actual solution quality did not change with varying epsilon.",
                "Figure 4: Sensor network configurations 828 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Figure 5: Comparison of GOA, SPIDER, SPIDER-Abs and VAX for T = 3 on (a) Runtime and (b) Solution quality; (c) Time to solution for PAX with varying percentage to optimal for T=4 (d) Time to solution for VAX with varying epsilon for T=4 6.",
                "SUMMARY AND RELATED WORK This paper presents four algorithms SPIDER, SPIDER-ABS, PAX and VAX that provide a novel combination of features for policy search in distributed POMDPs: (i) exploiting agent interaction structure given a network of agents (i.e. easier scale-up to larger number of agents); (ii) using branch and bound search with an MDP based <br>heuristic function</br>; (iii) utilizing abstraction to improve runtime performance without sacrificing solution quality; (iv) providing a priori percentage bounds on quality of solutions using PAX; and (v) providing expected value bounds on the quality of solutions using VAX.",
                "These features allow for systematic tradeoff of solution quality for run-time in networks of agents operating under uncertainty.",
                "Experimental results show orders of magnitude improvement in performance over previous global optimal algorithms.",
                "Researchers have typically employed two types of techniques for solving distributed POMDPs.",
                "The first set of techniques compute global optimal solutions.",
                "Hansen et al. [5] present an algorithm based on dynamic programming and iterated elimination of dominant policies, that provides optimal solutions for distributed POMDPs.",
                "Szer et al. [13] provide an optimal heuristic search method for solving Decentralized POMDPs.",
                "This algorithm is based on the combination of a classical heuristic search algorithm, A∗ and decentralized control theory.",
                "The key differences between SPIDER and MAA* are: (a) Enhancements to SPIDER (VAX and PAX) provide for quality guaranteed approximations, while MAA* is a global optimal algorithm and hence involves significant computational complexity; (b) Due to MAA*s inability to exploit interaction structure, it was illustrated only with two agents.",
                "However, SPIDER has been illustrated for networks of agents; and (c) SPIDER explores the joint policy one agent at a time, while MAA* expands it one time step at a time (simultaneously for all the agents).",
                "The second set of techniques seek approximate policies.",
                "EmeryMontemerlo et al. [4] approximate POSGs as a series of one-step Bayesian games using heuristics to approximate future value, trading off limited lookahead for computational efficiency, resulting in locally optimal policies (with respect to the selected heuristic).",
                "Nair et al. [9]s JESP algorithm uses dynamic programming to reach a local optimum solution for finite horizon decentralized POMDPs.",
                "Peshkin et al. [11] and Bernstein et al. [2] are examples of policy search techniques that search for locally optimal policies.",
                "Though all the above techniques improve the efficiency of policy computation considerably, they are unable to provide error bounds on the quality of the solution.",
                "This aspect of quality bounds differentiates SPIDER from all the above techniques.",
                "Acknowledgements.",
                "This material is based upon work supported by the Defense Advanced Research Projects Agency (DARPA), through the Department of the Interior, NBC, Acquisition Services Division under Contract No.",
                "NBCHD030010.",
                "The views and conclusions contained in this document are those of the authors, and should not be interpreted as representing the official policies, either expressed or implied, of the Defense Advanced Research Projects Agency or the U.S. Government. 7.",
                "REFERENCES [1] R. Becker, S. Zilberstein, V. Lesser, and C.V. Goldman.",
                "Solving transition independent decentralized Markov decision processes.",
                "JAIR, 22:423-455, 2004. [2] D. S. Bernstein, E.A.",
                "Hansen, and S. Zilberstein.",
                "Bounded policy iteration for decentralized POMDPs.",
                "In IJCAI, 2005. [3] D. S. Bernstein, S. Zilberstein, and N. Immerman.",
                "The complexity of decentralized control of MDPs.",
                "In UAI, 2000. [4] R. Emery-Montemerlo, G. Gordon, J. Schneider, and S. Thrun.",
                "Approximate solutions for partially observable stochastic games with common payoffs.",
                "In AAMAS, 2004. [5] E. Hansen, D. Bernstein, and S. Zilberstein.",
                "Dynamic programming for partially observable stochastic games.",
                "In AAAI, 2004. [6] V. Lesser, C. Ortiz, and M. Tambe.",
                "Distributed sensor nets: A multiagent perspective.",
                "Kluwer, 2003. [7] R. Maheswaran, M. Tambe, E. Bowring, J. Pearce, and P. Varakantham.",
                "Taking dcop to the real world : Efficient complete solutions for distributed event scheduling.",
                "In AAMAS, 2004. [8] P. J. Modi, W. Shen, M. Tambe, and M. Yokoo.",
                "An asynchronous complete method for distributed constraint optimization.",
                "In AAMAS, 2003. [9] R. Nair, D. Pynadath, M. Yokoo, M. Tambe, and S. Marsella.",
                "Taming decentralized POMDPs: Towards efficient policy computation for multiagent settings.",
                "In IJCAI, 2003. [10] R. Nair, P. Varakantham, M. Tambe, and M. Yokoo.",
                "Networked distributed POMDPs: A synthesis of distributed constraint optimization and POMDPs.",
                "In AAAI, 2005. [11] L. Peshkin, N. Meuleau, K.-E. Kim, and L. Kaelbling.",
                "Learning to cooperate via policy search.",
                "In UAI, 2000. [12] A. Petcu and B. Faltings.",
                "A scalable method for multiagent constraint optimization.",
                "In IJCAI, 2005. [13] D. Szer, F. Charpillet, and S. Zilberstein.",
                "MAA*: A heuristic search algorithm for solving decentralized POMDPs.",
                "In IJCAI, 2005.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 829"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Hay dos características novedosas clave en Spider: (i) Es una técnica de búsqueda heurística de rama y heurística que utiliza una \"función heurística\" basada en MDP para buscar una política conjunta óptima;(ii) Explota la estructura de red de los agentes organizando a los agentes en un pseudo árbol de búsqueda de profundidad (DFS) y aprovecha la independencia en las diferentes ramas del árbol DFS.",
                "La suma de estas dos partes produce un límite superior en el valor esperado para el Agente I, y la línea 8 del algoritmo clasifica las políticas basadas en estos límites superiores.4.2 La \"función heurística\" basada en MDP \"La\" función heurística \"proporciona rápidamente un límite superior en el valor esperado que se puede obtener de los agentes en el árbol (i).",
                "Resumen y trabajo relacionado Este documento presenta cuatro algoritmos Spider, Spider-ABS, Pax y Vax que proporcionan una combinación novedosa de características para la búsqueda de políticas en POMDP distribuidos: (i) Estructura de interacción de agentes de explotación dada una red de agentes (es decir, una escala más fácil de escalaa mayor número de agentes);(ii) usar la búsqueda de rama y unión con una \"función heurística\" basada en MDP;(iii) utilizar la abstracción para mejorar el rendimiento del tiempo de ejecución sin sacrificar la calidad de la solución;(iv) proporcionar límites de porcentaje a priori en la calidad de las soluciones con PAX;y (v) proporcionar límites de valor esperados en la calidad de las soluciones utilizando VAX."
            ],
            "translated_text": "",
            "candidates": [
                "función heurística",
                "función heurística",
                "función heurística",
                "función heurística",
                "La",
                "función heurística",
                "función heurística"
            ],
            "error": []
        },
        "optimal joint policy": {
            "translated_key": "Política conjunta óptima",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Letting loose a SPIDER on a network of POMDPs: Generating quality guaranteed policies Pradeep Varakantham, Janusz Marecki, Yuichi Yabu∗ , Milind Tambe, Makoto Yokoo∗ University of Southern California, Los Angeles, CA 90089, {varakant, marecki, tambe}@usc.edu ∗ Dept.",
                "of Intelligent Systems, Kyushu University, Fukuoka, 812-8581 Japan, yokoo@is.kyushu-u.ac.jp ABSTRACT Distributed Partially Observable Markov Decision Problems (Distributed POMDPs) are a popular approach for modeling multi-agent systems acting in uncertain domains.",
                "Given the significant complexity of solving distributed POMDPs, particularly as we scale up the numbers of agents, one popular approach has focused on approximate solutions.",
                "Though this approach is efficient, the algorithms within this approach do not provide any guarantees on solution quality.",
                "A second less popular approach focuses on global optimality, but typical results are available only for two agents, and also at considerable computational cost.",
                "This paper overcomes the limitations of both these approaches by providing SPIDER, a novel combination of three key features for policy generation in distributed POMDPs: (i) it exploits agent interaction structure given a network of agents (i.e. allowing easier scale-up to larger number of agents); (ii) it uses a combination of heuristics to speedup policy search; and (iii) it allows quality guaranteed approximations, allowing a systematic tradeoff of solution quality for time.",
                "Experimental results show orders of magnitude improvement in performance when compared with previous global optimal algorithms.",
                "Categories and Subject Descriptors I.2.11 [Artificial Intelligence]: Distributed Artificial IntelligenceMulti-agent Systems General Terms Algorithms, Theory 1.",
                "INTRODUCTION Distributed Partially Observable Markov Decision Problems (Distributed POMDPs) are emerging as a popular approach for modeling sequential decision making in teams operating under uncertainty [9, 4, 1, 2, 13].",
                "The uncertainty arises on account of nondeterminism in the outcomes of actions and because the world state may only be partially (or incorrectly) observable.",
                "Unfortunately, as shown by Bernstein et al. [3], the problem of finding the <br>optimal joint policy</br> for general distributed POMDPs is NEXP-Complete.",
                "Researchers have attempted two different types of approaches towards solving these models.",
                "The first category consists of highly efficient approximate techniques, that may not reach globally optimal solutions [2, 9, 11].",
                "The key problem with these techniques has been their inability to provide any guarantees on the quality of the solution.",
                "In contrast, the second less popular category of approaches has focused on a global optimal result [13, 5, 10].",
                "Though these approaches obtain optimal solutions, they typically consider only two agents.",
                "Furthermore, they fail to exploit structure in the interactions of the agents and hence are severely hampered with respect to scalability when considering more than two agents.",
                "To address these problems with the existing approaches, we propose approximate techniques that provide guarantees on the quality of the solution while focussing on a network of more than two agents.",
                "We first propose the basic SPIDER (Search for Policies In Distributed EnviRonments) algorithm.",
                "There are two key novel features in SPIDER: (i) it is a branch and bound heuristic search technique that uses a MDP-based heuristic function to search for an <br>optimal joint policy</br>; (ii) it exploits network structure of agents by organizing agents into a Depth First Search (DFS) pseudo tree and takes advantage of the independence in the different branches of the DFS tree.",
                "We then provide three enhancements to improve the efficiency of the basic SPIDER algorithm while providing guarantees on the quality of the solution.",
                "The first enhancement uses abstractions for speedup, but does not sacrifice solution quality.",
                "In particular, it initially performs branch and bound search on abstract policies and then extends to complete policies.",
                "The second enhancement obtains speedups by sacrificing solution quality, but within an input parameter that provides the tolerable expected value difference from the optimal solution.",
                "The third enhancement is again based on bounding the search for efficiency, however with a tolerance parameter that is provided as a percentage of optimal.",
                "We experimented with the sensor network domain presented in Nair et al. [10], a domain representative of an important class of problems with networks of agents working in uncertain environments.",
                "In our experiments, we illustrate that SPIDER dominates an existing global optimal approach called GOA [10], the only known global optimal algorithm with demonstrated experimental results for more than two agents.",
                "Furthermore, we demonstrate that abstraction improves the performance of SPIDER significantly (while providing optimal solutions).",
                "We finally demonstrate a key feature of SPIDER: by utilizing the approximation enhancements it enables principled tradeoffs in run-time versus solution quality. 822 978-81-904262-7-5 (RPS) c 2007 IFAAMAS 2.",
                "DOMAIN: DISTRIBUTED SENSOR NETS Distributed sensor networks are a large, important class of domains that motivate our work.",
                "This paper focuses on a set of target tracking problems that arise in certain types of sensor networks [6] first introduced in [10].",
                "Figure 1 shows a specific problem instance within this type consisting of three sensors.",
                "Here, each sensor node can scan in one of four directions: North, South, East or West (see Figure 1).",
                "To track a target and obtain associated reward, two sensors with overlapping scanning areas must coordinate by scanning the same area simultaneously.",
                "In Figure 1, to track a target in Loc11, sensor1 needs to scan East and sensor2 needs to scan West simultaneously.",
                "Thus, sensors have to act in a coordinated fashion.",
                "We assume that there are two independent targets and that each targets movement is uncertain and unaffected by the sensor agents.",
                "Based on the area it is scanning, each sensor receives observations that can have false positives and false negatives.",
                "The sensors observations and transitions are independent of each others actions e.g.the observations that sensor1 receives are independent of sensor2s actions.",
                "Each agent incurs a cost for scanning whether the target is present or not, but no cost if it turns off.",
                "Given the sensors observational uncertainty, the targets uncertain transitions and the distributed nature of the sensor nodes, these sensor nets provide a useful domains for applying distributed POMDP models.",
                "Figure 1: A 3-chain sensor configuration 3.",
                "BACKGROUND 3.1 Model: Network Distributed POMDP The ND-POMDP model was introduced in [10], motivated by domains such as the sensor networks introduced in Section 2.",
                "It is defined as the tuple S, A, P, Ω, O, R, b , where S = ×1≤i≤nSi × Su is the set of world states.",
                "Si refers to the set of local states of agent i and Su is the set of unaffectable states.",
                "Unaffectable state refers to that part of the world state that cannot be affected by the agents actions, e.g. environmental factors like target locations that no agent can control.",
                "A = ×1≤i≤nAi is the set of joint actions, where Ai is the set of action for agent i. ND-POMDP assumes transition independence, where the transition function is defined as P(s, a, s ) = Pu(su, su) · 1≤i≤n Pi(si, su, ai, si), where a = a1, . . . , an is the joint action performed in state s = s1, . . . , sn, su and s = s1, . . . , sn, su is the resulting state.",
                "Ω = ×1≤i≤nΩi is the set of joint observations where Ωi is the set of observations for agents i. Observational independence is assumed in ND-POMDPs i.e., the joint observation function is defined as O(s, a, ω) = 1≤i≤n Oi(si, su, ai, ωi), where s = s1, . . . , sn, su is the world state that results from the agents performing a = a1, . . . , an in the previous state, and ω = ω1, . . . , ωn ∈ Ω is the observation received in state s. This implies that each agents observation depends only on the unaffectable state, its local action and on its resulting local state.",
                "The reward function, R, is defined as R(s, a) = l Rl(sl1, . . . , slr, su, al1, . . . , alr ), where each l could refer to any sub-group of agents and r = |l|.",
                "Based on the reward function, an interaction hypergraph is constructed.",
                "A hyper-link, l, exists between a subset of agents for all Rl that comprise R. The interaction hypergraph is defined as G = (Ag, E), where the agents, Ag, are the vertices and E = {l|l ⊆ Ag ∧ Rl is a component of R} are the edges.",
                "The initial belief state (distribution over the initial state), b, is defined as b(s) = bu(su) · 1≤i≤n bi(si), where bu and bi refer to the distribution over initial unaffectable state and agent is initial belief state, respectively.",
                "The goal in ND-POMDP is to compute the joint policy π = π1, . . . , πn that maximizes teams expected reward over a finite horizon T starting from the belief state b.",
                "An ND-POMDP is similar to an n-ary Distributed Constraint Optimization Problem (DCOP)[8, 12] where the variable at each node represents the policy selected by an individual agent, πi with the domain of the variable being the set of all local policies, Πi.",
                "The reward component Rl where |l| = 1 can be thought of as a local constraint while the reward component Rl where l > 1 corresponds to a non-local constraint in the constraint graph. 3.2 Algorithm: Global Optimal Algorithm (GOA) In previous work, GOA has been defined as a global optimal algorithm for ND-POMDPs [10].",
                "We will use GOA in our experimental comparisons, since GOA is a state-of-the-art global optimal algorithm, and in fact the only one with experimental results available for networks of more than two agents.",
                "GOA borrows from a global optimal DCOP algorithm called DPOP[12].",
                "GOAs message passing follows that of DPOP.",
                "The first phase is the UTIL propagation, where the utility messages, in this case values of policies, are passed up from the leaves to the root.",
                "Value for a policy at an agent is defined as the sum of best response values from its children and the joint policy reward associated with the parent policy.",
                "Thus, given a policy for a parent node, GOA requires an agent to iterate through all its policies, finding the best response policy and returning the value to the parent - while at the parent node, to find the best policy, an agent requires its children to return their best responses to each of its policies.",
                "This UTIL propagation process is repeated at each level in the tree, until the root exhausts all its policies.",
                "In the second phase of VALUE propagation, where the optimal policies are passed down from the root till the leaves.",
                "GOA takes advantage of the local interactions in the interaction graph, by pruning out unnecessary joint policy evaluations (associated with nodes not connected directly in the tree).",
                "Since the interaction graph captures all the reward interactions among agents and as this algorithm iterates through all the relevant joint policy evaluations, this algorithm yields a globally optimal solution. 4.",
                "SPIDER As mentioned in Section 3.1, an ND-POMDP can be treated as a DCOP, where the goal is to compute a joint policy that maximizes the overall joint reward.",
                "The brute-force technique for computing an optimal policy would be to examine the expected values for all possible joint policies.",
                "The key idea in SPIDER is to avoid computation of expected values for the entire space of joint policies, by utilizing upper bounds on the expected values of policies and the interaction structure of the agents.",
                "Akin to some of the algorithms for DCOP [8, 12], SPIDER has a pre-processing step that constructs a DFS tree corresponding to the given interaction structure.",
                "Note that these DFS trees are pseudo trees [12] that allow links between ancestors and children.",
                "We employ the Maximum Constrained Node (MCN) heuristic used in the DCOP algorithm, ADOPT [8], however other heuristics (such as MLSP heuristic from [7]) can also be employed.",
                "MCN heuristic tries to place agents with more number of constraints at the top of the tree.",
                "This tree governs how the search for the optimal joint polThe Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 823 icy proceeds in SPIDER.",
                "The algorithms presented in this paper are easily extendable to hyper-trees, however for expository purposes, we assume binary trees.",
                "SPIDER is an algorithm for centralized planning and distributed execution in distributed POMDPs.",
                "In this paper, we employ the following notation to denote policies and expected values: Ancestors(i) ⇒ agents from i to the root (not including i).",
                "Tree(i) ⇒ agents in the sub-tree (not including i) for which i is the root. πroot+ ⇒ joint policy of all agents. πi+ ⇒ joint policy of all agents in Tree(i) ∪ i. πi− ⇒ joint policy of agents that are in Ancestors(i). πi ⇒ policy of the ith agent. ˆv[πi, πi− ] ⇒ upper bound on the expected value for πi+ given πi and policies of ancestor agents i.e. πi− . ˆvj[πi, πi− ] ⇒ upper bound on the expected value for πi+ from the jth child. v[πi, πi− ] ⇒ expected value for πi given policies of ancestor agents, πi− . v[πi+ , πi− ] ⇒ expected value for πi+ given policies of ancestor agents, πi− . vj[πi+ , πi− ] ⇒ expected value for πi+ from the jth child.",
                "Figure 2: Execution of SPIDER, an example 4.1 Outline of SPIDER SPIDER is based on the idea of branch and bound search, where the nodes in the search tree represent partial/complete joint policies.",
                "Figure 2 shows an example search tree for the SPIDER algorithm, using an example of the three agent chain.",
                "Before SPIDER begins its search we create a DFS tree (i.e. pseudo tree) from the three agent chain, with the middle agent as the root of this tree.",
                "SPIDER exploits the structure of this DFS tree while engaging in its search.",
                "Note that in our example figure, each agent is assigned a policy with T=2.",
                "Thus, each rounded rectange (search tree node) indicates a partial/complete joint policy, a rectangle indicates an agent and the ovals internal to an agent show its policy.",
                "Heuristic or actual expected value for a joint policy is indicated in the top right corner of the rounded rectangle.",
                "If the number is italicized and underlined, it implies that the actual expected value of the joint policy is provided.",
                "SPIDER begins with no policy assigned to any of the agents (shown in the level 1 of the search tree).",
                "Level 2 of the search tree indicates that the joint policies are sorted based on upper bounds computed for root agents policies.",
                "Level 3 shows one SPIDER search node with a complete joint policy (a policy assigned to each of the agents).",
                "The expected value for this joint policy is used to prune out the nodes in level 2 (the ones with upper bounds < 234) When creating policies for each non-leaf agent i, SPIDER potentially performs two steps: 1.",
                "Obtaining upper bounds and sorting: In this step, agent i computes upper bounds on the expected values, ˆv[πi, πi− ] of the joint policies πi+ corresponding to each of its policy πi and fixed ancestor policies.",
                "An MDP based heuristic is used to compute these upper bounds on the expected values.",
                "Detailed description about this MDP heuristic is provided in Section 4.2.",
                "All policies of agent i, Πi are then sorted based on these upper bounds (also referred to as heuristic values henceforth) in descending order.",
                "Exploration of these policies (in step 2 below) are performed in this descending order.",
                "As indicated in the level 2 of the search tree (of Figure 2), all the joint policies are sorted based on the heuristic values, indicated in the top right corner of each joint policy.",
                "The intuition behind sorting and then exploring policies in descending order of upper bounds, is that the policies with higher upper bounds could yield joint policies with higher expected values. 2.",
                "Exploration and Pruning: Exploration implies computing the best response joint policy πi+,∗ corresponding to fixed ancestor policies of agent i, πi− .",
                "This is performed by iterating through all policies of agent i i.e.",
                "Πi and summing two quantities for each policy: (i) the best response for all of is children (obtained by performing steps 1 and 2 at each of the child nodes); (ii) the expected value obtained by i for fixed policies of ancestors.",
                "Thus, exploration of a policy πi yields actual expected value of a joint policy, πi+ represented as v[πi+ , πi− ].",
                "The policy with the highest expected value is the best response policy.",
                "Pruning refers to avoiding exploring all policies (or computing expected values) at agent i by using the current best expected value, vmax [πi+ , πi− ].",
                "Henceforth, this vmax [πi+ , πi− ] will be referred to as threshold.",
                "A policy, πi need not be explored if the upper bound for that policy, ˆv[πi, πi− ] is less than the threshold.",
                "This is because the expected value for the best joint policy attainable for that policy will be less than the threshold.",
                "On the other hand, when considering a leaf agent, SPIDER computes the best response policy (and consequently its expected value) corresponding to fixed policies of its ancestors, πi− .",
                "This is accomplished by computing expected values for each of the policies (corresponding to fixed policies of ancestors) and selecting the highest expected value policy.",
                "In Figure 2, SPIDER assigns best response policies to leaf agents at level 3.",
                "The policy for the left leaf agent is to perform action East at each time step in the policy, while the policy for the right leaf agent is to perform Off at each time step.",
                "These best response policies from the leaf agents yield an actual expected value of 234 for the complete joint policy.",
                "Algorithm 1 provides the pseudo code for SPIDER.",
                "This algorithm outputs the best joint policy, πi+,∗ (with an expected value greater than threshold) for the agents in Tree(i).",
                "Lines 3-8 compute the best response policy of a leaf agent i, while lines 9-23 computes the best response joint policy for agents in Tree(i).",
                "This best response computation for a non-leaf agent i includes: (a) Sorting of policies (in descending order) based on heuristic values on line 11; (b) Computing best response policies at each of the children for fixed policies of agent i in lines 16-20; and (c) Maintaining 824 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Algorithm 1 SPIDER(i, πi− , threshold) 1: πi+,∗ ← null 2: Πi ← GET-ALL-POLICIES (horizon, Ai, Ωi) 3: if IS-LEAF(i) then 4: for all πi ∈ Πi do 5: v[πi, πi−] ← JOINT-REWARD (πi, πi−) 6: if v[πi, πi−] > threshold then 7: πi+,∗ ← πi 8: threshold ← v[πi, πi−] 9: else 10: children ← CHILDREN (i) 11: ˆΠi ← UPPER-BOUND-SORT(i, Πi, πi−) 12: for all πi ∈ ˆΠi do 13: ˜πi+ ← πi 14: if ˆv[πi, πi−] < threshold then 15: Go to line 12 16: for all j ∈ children do 17: jThres ← threshold − v[πi, πi−]− Σk∈children,k=j ˆvk[πi, πi−] 18: πj+,∗ ← SPIDER(j, πi πi−, jThres) 19: ˜πi+ ← ˜πi+ πj+,∗ 20: ˆvj[πi, πi−] ← v[πj+,∗, πi πi−] 21: if v[˜πi+, πi−] > threshold then 22: threshold ← v[˜πi+, πi−] 23: πi+,∗ ← ˜πi+ 24: return πi+,∗ Algorithm 2 UPPER-BOUND-SORT(i, Πi, πi− ) 1: children ← CHILDREN (i) 2: ˆΠi ← null /* Stores the sorted list */ 3: for all πi ∈ Πi do 4: ˆv[πi, πi−] ← JOINT-REWARD (πi, πi−) 5: for all j ∈ children do 6: ˆvj[πi, πi−] ← UPPER-BOUND(i, j, πi πi−) 7: ˆv[πi, πi−] + ← ˆvj[πi, πi−] 8: ˆΠi ← INSERT-INTO-SORTED (πi, ˆΠi) 9: return ˆΠi best expected value, joint policy in lines 21-23.",
                "Algorithm 2 provides the pseudo code for sorting policies based on the upper bounds on the expected values of joint policies.",
                "Expected value for an agent i consists of two parts: value obtained from ancestors and value obtained from its children.",
                "Line 4 computes the expected value obtained from ancestors of the agent (using JOINT-REWARD function), while lines 5-7 compute the heuristic value from the children.",
                "The sum of these two parts yields an upper bound on the expected value for agent i, and line 8 of the algorithm sorts the policies based on these upper bounds. 4.2 MDP based heuristic function The heuristic function quickly provides an upper bound on the expected value obtainable from the agents in Tree(i).",
                "The subtree of agents is a distributed POMDP in itself and the idea here is to construct a centralized MDP corresponding to the (sub-tree) distributed POMDP and obtain the expected value of the optimal policy for this centralized MDP.",
                "To reiterate this in terms of the agents in DFS tree interaction structure, we assume full observability for the agents in Tree(i) and for fixed policies of the agents in {Ancestors(i) ∪ i}, we compute the joint value ˆv[πi+ , πi− ] .",
                "We use the following notation for presenting the equations for computing upper bounds/heuristic values (for agents i and k): Let Ei− denote the set of links between agents in {Ancestors(i)∪ i} and Tree(i), Ei+ denote the set of links between agents in Tree(i).",
                "Also, if l ∈ Ei− , then l1 is the agent in {Ancestors(i)∪ i} and l2 is the agent in Tree(i), that l connects together.",
                "We first compact the standard notation: ot k =Ok(st+1 k , st+1 u , πk(ωt k), ωt+1 k ) (1) pt k =Pk(st k, st u, πk(ωt k), st+1 k ) · ot k pt u =P(st u, st+1 u ) st l = st l1 , st l2 , st u ; ωt l = ωt l1 , ωt l2 rt l =Rl(st l , πl1 (ωt l1 ), πl2 (ωt l2 )) vt l =V t πl (st l , st u, ωt l1 , ωt l2 ) Depending on the location of agent k in the agent tree we have the following cases: IF k ∈ {Ancestors(i) ∪ i}, ˆpt k = pt k, (2) IF k ∈ Tree(i), ˆpt k = Pk(st k, st u, πk(ωt k), st+1 k ) IF l ∈ Ei− , ˆrt l = max {al2 } Rl(st l , πl1 (ωt l1 ), al2 ) IF l ∈ Ei+ , ˆrt l = max {al1 ,al2 } Rl(st l , al1 , al2 ) The value function for an agent i executing the joint policy πi+ at time η − 1 is provided by the equation: V η−1 πi+ (sη−1 , ωη−1 ) = l∈Ei− vη−1 l + l∈Ei+ vη−1 l (3) where vη−1 l = rη−1 l + ω η l ,sη pη−1 l1 pη−1 l2 pη−1 u vη l Algorithm 3 UPPER-BOUND (i, j, πj− ) 1: val ← 0 2: for all l ∈ Ej− ∪ Ej+ do 3: if l ∈ Ej− then πl1 ← φ 4: for all s0 l do 5: val + ← startBel[s0 l ]· UPPER-BOUND-TIME (i, s0 l , j, πl1 , ) 6: return val Algorithm 4 UPPER-BOUND-TIME (i, st l , j, πl1 , ωt l1 ) 1: maxV al ← −∞ 2: for all al1 , al2 do 3: if l ∈ Ei− and l ∈ Ej− then al1 ← πl1 (ωt l1 ) 4: val ← GET-REWARD(st l , al1 , al2 ) 5: if t < πi.horizon − 1 then 6: for all st+1 l , ωt+1 l1 do 7: futV al←pt u ˆpt l1 ˆpt l2 8: futV al ∗ ← UPPER-BOUND-TIME(st+1 l , j, πl1 , ωt l1 ωt+1 l1 ) 9: val + ← futV al 10: if val > maxV al then maxV al ← val 11: return maxV al Upper bound on the expected value for a link is computed by modifying the equation 3 to reflect the full observability assumption.",
                "This involves removing the observational probability term for agents in Tree(i) and maximizing the future value ˆvη l over the actions of those agents (in Tree(i)).",
                "Thus, the equation for the The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 825 computation of the upper bound on a link l, is as follows: IF l ∈ Ei− , ˆvη−1 l =ˆrη−1 l + max al2 ω η l1 ,s η l ˆpη−1 l1 ˆpη−1 l2 pη−1 u ˆvη l IF l ∈ Ei+ , ˆvη−1 l =ˆrη−1 l + max al1 ,al2 s η l ˆpη−1 l1 ˆpη−1 l2 pη−1 u ˆvη l Algorithm 3 and Algorithm 4 provide the algorithm for computing upper bound for child j of agent i, using the equations descirbed above.",
                "While Algorithm 4 computes the upper bound on a link given the starting state, Algorithm 3 sums the upper bound values computed over each of the links in Ei− ∪ Ei+ . 4.3 Abstraction Algorithm 5 SPIDER-ABS(i, πi− , threshold) 1: πi+,∗ ← null 2: Πi ← GET-POLICIES (<>, 1) 3: if IS-LEAF(i) then 4: for all πi ∈ Πi do 5: absHeuristic ← GET-ABS-HEURISTIC (πi, πi−) 6: absHeuristic ∗ ← (timeHorizon − πi.horizon) 7: if πi.horizon = timeHorizon and πi.absNodes = 0 then 8: v[πi, πi−] ← JOINT-REWARD (πi, πi−) 9: if v[πi, πi−] > threshold then 10: πi+,∗ ← πi; threshold ← v[πi, πi−] 11: else if v[πi, πi−] + absHeuristic > threshold then 12: ˆΠi ← EXTEND-POLICY (πi, πi.absNodes + 1) 13: Πi + ← INSERT-SORTED-POLICIES ( ˆΠi) 14: REMOVE(πi) 15: else 16: children ← CHILDREN (i) 17: Πi ← UPPER-BOUND-SORT(i, Πi, πi−) 18: for all πi ∈ Πi do 19: ˜πi+ ← πi 20: absHeuristic ← GET-ABS-HEURISTIC (πi, πi−) 21: absHeuristic ∗ ← (timeHorizon − πi.horizon) 22: if πi.horizon = timeHorizon and πi.absNodes = 0 then 23: if ˆv[πi, πi−] < threshold and πi.absNodes = 0 then 24: Go to line 19 25: for all j ∈ children do 26: jThres ← threshold − v[πi, πi−]− Σk∈children,k=j ˆvk[πi, πi−] 27: πj+,∗ ← SPIDER(j, πi πi−, jThres) 28: ˜πi+ ← ˜πi+ πj+,∗; ˆvj[πi, πi−] ← v[πj+,∗, πi πi−] 29: if v[˜πi+, πi−] > threshold then 30: threshold ← v[˜πi+, πi−]; πi+,∗ ← ˜πi+ 31: else if ˆv[πi+, πi−] + absHeuristic > threshold then 32: ˆΠi ← EXTEND-POLICY (πi, πi.absNodes + 1) 33: Πi + ← INSERT-SORTED-POLICIES (ˆΠi) 34: REMOVE(πi) 35: return πi+,∗ In SPIDER, the exploration/pruning phase can only begin after the heuristic (or upper bound) computation and sorting for the policies has ended.",
                "We provide an approach to possibly circumvent the exploration of a group of policies based on heuristic computation for one abstract policy, thus leading to an improvement in runtime performance (without loss in solution quality).",
                "The important steps in this technique are defining the abstract policy and how heuristic values are computated for the abstract policies.",
                "In this paper, we propose two types of abstraction: 1.",
                "Horizon Based Abstraction (HBA): Here, the abstract policy is defined as a shorter horizon policy.",
                "It represents a group of longer horizon policies that have the same actions as the abstract policy for times less than or equal to the horizon of the abstract policy.",
                "In Figure 3(a), a T=1 abstract policy that performs East action, represents a group of T=2 policies, that perform East in the first time step.",
                "For HBA, there are two parts to heuristic computation: (a) Computing the upper bound for the horizon of the abstract policy.",
                "This is same as the heuristic computation defined by the GETHEURISTIC() algorithm for SPIDER, however with a shorter time horizon (horizon of the abstract policy). (b) Computing the maximum possible reward that can be accumulated in one time step (using GET-ABS-HEURISTIC()) and multiplying it by the number of time steps to time horizon.",
                "This maximum possible reward (for one time step) is obtained by iterating through all the actions of all the agents in Tree(i) and computing the maximum joint reward for any joint action.",
                "Sum of (a) and (b) is the heuristic value for a HBA abstract policy. 2.",
                "Node Based Abstraction (NBA): Here an abstract policy is obtained by not associating actions to certain nodes of the policy tree.",
                "Unlike in HBA, this implies multiple levels of abstraction.",
                "This is illustrated in Figure 3(b), where there are T=2 policies that do not have an action for observation TP.",
                "These incomplete T=2 policies are abstractions for T=2 complete policies.",
                "Increased levels of abstraction leads to faster computation of a complete joint policy, πroot+ and also to shorter heuristic computation and exploration, pruning phases.",
                "For NBA, the heuristic computation is similar to that of a normal policy, except in cases where there is no action associated with policy nodes.",
                "In such cases, the immediate reward is taken as Rmax (maximum reward for any action).",
                "We combine both the abstraction techniques mentioned above into one technique, SPIDER-ABS.",
                "Algorithm 5 provides the algorithm for this abstraction technique.",
                "For computing <br>optimal joint policy</br> with SPIDER-ABS, a non-leaf agent i initially examines all abstract T=1 policies (line 2) and sorts them based on abstract policy heuristic computations (line 17).",
                "The abstraction horizon is gradually increased and these abstract policies are then explored in descending order of heuristic values and ones that have heuristic values less than the threshold are pruned (lines 23-24).",
                "Exploration in SPIDER-ABS has the same definition as in SPIDER if the policy being explored has a horizon of policy computation which is equal to the actual time horizon and if all the nodes of the policy have an action associated with them (lines 25-30).",
                "However, if those conditions are not met, then it is substituted by a group of policies that it represents (using EXTEND-POLICY () function) (lines 31-32).",
                "EXTEND-POLICY() function is also responsible for initializing the horizon and absNodes of a policy. absNodes represents the number of nodes at the last level in the policy tree, that do not have an action assigned to them.",
                "If πi.absNodes = |Ωi|πi.horizon−1 (i.e. total number of policy nodes possible at πi.horizon) , then πi.absNodes is set to zero and πi.horizon is increased by 1.",
                "Otherwise, πi.absNodes is increased by 1.",
                "Thus, this function combines both HBA and NBA by using the policy variables, horizon and absNodes.",
                "Before substituting the abstract policy with a group of policies, those policies are sorted based on heuristic values (line 33).",
                "Similar type of abstraction based best response computation is adopted at leaf agents (lines 3-14). 4.4 Value ApproXimation (VAX) In this section, we present an approximate enhancement to SPIDER called VAX.",
                "The input to this technique is an approximation parameter , which determines the difference from the optimal solution quality.",
                "This approximation parameter is used at each agent for pruning out joint policies.",
                "The pruning mechanism in SPIDER and SPIDER-Abs dictates that a joint policy be pruned only if the threshold is exactly greater than the heuristic value.",
                "However, the 826 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Figure 3: Example of abstraction for (a) HBA (Horizon Based Abstraction) and (b) NBA (Node Based Abstraction) idea in this technique is to prune out joint a policy if the following condition is satisfied: threshold + > ˆv[πi , πi− ].",
                "Apart from the pruning condition, VAX is the same as SPIDER/SPIDER-ABS.",
                "In the example of Figure 2, if the heuristic value for the second joint policy (or second search tree node) in level 2 were 238 instead of 232, then that policy could not be be pruned using SPIDER or SPIDER-Abs.",
                "However, in VAX with an approximation parameter of 5, the joint policy in consideration would also be pruned.",
                "This is because the threshold (234) at that juncture plus the approximation parameter (5), i.e. 239 would have been greater than the heuristic value for that joint policy (238).",
                "It can be noted from the example (just discussed) that this kind of pruning can lead to fewer explorations and hence lead to an improvement in the overall run-time performance.",
                "However, this can entail a sacrifice in the quality of the solution because this technique can prune out a candidate optimal solution.",
                "A bound on the error introduced by this approximate algorithm as a function of , is provided by Proposition 3. 4.5 Percentage ApproXimation (PAX) In this section, we present the second approximation enhancement over SPIDER called PAX.",
                "Input to this technique is a parameter, δ that represents the minimum percentage of the optimal solution quality that is desired.",
                "Output of this technique is a policy with an expected value that is at least δ% of the optimal solution quality.",
                "A policy is pruned if the following condition is satisfied: threshold > δ 100 ˆv[πi , πi− ].",
                "Like in VAX, the only difference between PAX and SPIDER/SPIDER-ABS is this pruning condition.",
                "Again in Figure 2, if the heuristic value for the second search tree node in level 2 were 238 instead of 232, then PAX with an input parameter of 98% would be able to prune that search tree node (since 98 100 ∗238 < 234).",
                "This type of pruning leads to fewer explorations and hence an improvement in run-time performance, while potentially leading to a loss in quality of the solution.",
                "Proposition 4 provides the bound on quality loss. 4.6 Theoretical Results PROPOSITION 1.",
                "Heuristic provided using the centralized MDP heuristic is admissible.",
                "Proof.",
                "For the value provided by the heuristic to be admissible, it should be an over estimate of the expected value for a joint policy.",
                "Thus, we need to show that: For l ∈ Ei+ ∪ Ei− : ˆvt l ≥ vt l (refer to notation in Section 4.2) We use mathematical induction on t to prove this.",
                "Base case: t = T − 1.",
                "Irrespective of whether l ∈ Ei− or l ∈ Ei+ , ˆrt l is computed by maximizing over all actions of the agents in Tree(i), while rt l is computed for fixed policies of the same agents.",
                "Hence, ˆrt l ≥ rt l and also ˆvt l ≥ vt l .",
                "Assumption: Proposition holds for t = η, where 1 ≤ η < T − 1.",
                "We now have to prove that the proposition holds for t = η − 1.",
                "We show the proof for l ∈ Ei− and similar reasoning can be adopted to prove for l ∈ Ei+ .",
                "The heuristic value function for l ∈ Ei− is provided by the following equation: ˆvη−1 l =ˆrη−1 l + max al2 ω η l1 ,s η l ˆpη−1 l1 ˆpη−1 l2 pη−1 u ˆvη l Rewriting the RHS and using Eqn 2 (in Section 4.2) =ˆrη−1 l + max al2 ω η l1 ,s η l pη−1 u pη−1 l1 ˆpη−1 l2 ˆvη l =ˆrη−1 l + ω η l1 ,s η l pη−1 u pη−1 l1 max al2 ˆpη−1 l2 ˆvη l Since maxal2 ˆpη−1 l2 ˆvη l ≥ ωl2 oη−1 l2 ˆpη−1 l2 ˆvη l and pη−1 l2 = oη−1 l2 ˆpη−1 l2 ≥ˆrη−1 l + ω η l1 ,s η l pη−1 u pη−1 l1 ωl2 pη−1 l2 ˆvη l Since ˆvη l ≥ vη l (from the assumption) ≥ˆrη−1 l + ω η l1 ,s η l pη−1 u pη−1 l1 ωl2 pη−1 l2 vη l Since ˆrη−1 l ≥ rη−1 l (by definition) ≥rη−1 l + ω η l1 ,s η l pη−1 u pη−1 l1 ωl2 pη−1 l2 vη l =rη−1 l + (ω η l ,s η l ) pη−1 u pη−1 l1 pη−1 l2 vη l = vη−1 l Thus proved.",
                "PROPOSITION 2.",
                "SPIDER provides an optimal solution.",
                "Proof.",
                "SPIDER examines all possible joint policies given the interaction structure of the agents.",
                "The only exception being when a joint policy is pruned based on the heuristic value.",
                "Thus, as long as a candidate optimal policy is not pruned, SPIDER will return an optimal policy.",
                "As proved in Proposition 1, the expected value for a joint policy is always an upper bound.",
                "Hence when a joint policy is pruned, it cannot be an optimal solution.",
                "PROPOSITION 3.",
                "Error bound on the solution quality for VAX (implemented over SPIDER-ABS) with an approximation parameter of is ρ , where ρ is the number of leaf nodes in the DFS tree.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 827 Proof.",
                "We prove this proposition using mathematical induction on the depth of the DFS tree.",
                "Base case: depth = 1 (i.e. one node).",
                "Best response is computed by iterating through all policies, Πk.",
                "A policy,πk is pruned if ˆv[πk, πk− ] < threshold + .",
                "Thus the best response policy computed by VAX would be at most away from the optimal best response.",
                "Hence the proposition holds for the base case.",
                "Assumption: Proposition holds for d, where 1 ≤ depth ≤ d. We now have to prove that the proposition holds for d + 1.",
                "Without loss of generality, lets assume that the root node of this tree has k children.",
                "Each of this children is of depth ≤ d, and hence from the assumption, the error introduced in kth child is ρk , where ρk is the number of leaf nodes in kth child of the root.",
                "Therefore, ρ = k ρk, where ρ is the number of leaf nodes in the tree.",
                "In SPIDER-ABS, threshold at the root agent, thresspider = k v[πk+ , πk− ].",
                "However, with VAX the threshold at the root agent will be (in the worst case), threshvax = k v[πk+ , πk− ]− k ρk .",
                "Hence, with VAX a joint policy is pruned at the root agent if ˆv[πroot, πroot− ] < threshvax + ⇒ ˆv[πroot, πroot− ] < threshspider − (( k ρk) − 1) ≤ threshspider − ( k ρk) ≤ threshspider − ρ .",
                "Hence proved.",
                "PROPOSITION 4.",
                "For PAX (implemented over SPIDER-ABS) with an input parameter of δ, the solution quality is at least δ 100 v[πroot+,∗ ], where v[πroot+,∗ ] denotes the optimal solution quality.",
                "Proof.",
                "We prove this proposition using mathematical induction on the depth of the DFS tree.",
                "Base case: depth = 1 (i.e. one node).",
                "Best response is computed by iterating through all policies, Πk.",
                "A policy,πk is pruned if δ 100 ˆv[πk, πk− ] < threshold.",
                "Thus the best response policy computed by PAX would be at least δ 100 times the optimal best response.",
                "Hence the proposition holds for the base case.",
                "Assumption: Proposition holds for d, where 1 ≤ depth ≤ d. We now have to prove that the proposition holds for d + 1.",
                "Without loss of generality, lets assume that the root node of this tree has k children.",
                "Each of this children is of depth ≤ d, and hence from the assumption, the solution quality in the kth child is at least δ 100 v[πk+,∗ , πk− ] for PAX.",
                "With SPIDER-ABS, a joint policy is pruned at the root agent if ˆv[πroot, πroot− ] < k v[πk+,∗ , πk− ].",
                "However with PAX, a joint policy is pruned if δ 100 ˆv[πroot, πroot− ] < k δ 100 v[πk+,∗ , πk− ] ⇒ ˆv[πroot, πroot− ] < k v[πk+,∗ , πk− ].",
                "Since the pruning condition at the root agent in PAX is the same as the one in SPIDER-ABS, there is no error introduced at the root agent and all the error is introduced in the children.",
                "Thus, overall solution quality is at least δ 100 of the optimal solution.",
                "Hence proved. 5.",
                "EXPERIMENTAL RESULTS All our experiments were conducted on the sensor network domain from Section 2.",
                "The five network configurations employed are shown in Figure 4.",
                "Algorithms that we experimented with are GOA, SPIDER, SPIDER-ABS, PAX and VAX.",
                "We compare against GOA because it is the only global optimal algorithm that considers more than two agents.",
                "We performed two sets of experiments: (i) firstly, we compared the run-time performance of the above algorithms and (ii) secondly, we experimented with PAX and VAX to study the tradeoff between run-time and solution quality.",
                "Experiments were terminated after 10000 seconds1 .",
                "Figure 5(a) provides run-time comparisons between the optimal algorithms GOA, SPIDER, SPIDER-Abs and the approximate algorithms, PAX ( of 30) and VAX(δ of 80).",
                "X-axis denotes the 1 Machine specs for all experiments: Intel Xeon 3.6 GHZ processor, 2GB RAM sensor network configuration used, while Y-axis indicates the runtime (on a log-scale).",
                "The time horizon of policy computation was 3.",
                "For each configuration (3-chain, 4-chain, 4-star and 5-star), there are five bars indicating the time taken by GOA, SPIDER, SPIDERAbs, PAX and VAX.",
                "GOA did not terminate within the time limit for 4-star and 5-star configurations.",
                "SPIDER-Abs dominated the SPIDER and GOA for all the configurations.",
                "For instance, in the 3chain configuration, SPIDER-ABS provides 230-fold speedup over GOA and 2-fold speedup over SPIDER and for the 4-chain configuration it provides 58-fold speedup over GOA and 2-fold speedup over SPIDER.",
                "The two approximation approaches, VAX and PAX provided further improvement in performance over SPIDER-Abs.",
                "For instance, in the 5-star configuration VAX provides a 15-fold speedup and PAX provides a 8-fold speedup over SPIDER-Abs.",
                "Figures 5(b) provides a comparison of the solution quality obtained using the different algorithms for the problems tested in Figure 5(a).",
                "X-axis denotes the sensor network configuration while Y-axis indicates the solution quality.",
                "Since GOA, SPIDER, and SPIDER-Abs are all global optimal algorithms, the solution quality is the same for all those algorithms.",
                "For 5-P configuration, the global optimal algorithms did not terminate within the limit of 10000 seconds, so the bar for optimal quality indicates an upper bound on the optimal solution quality.",
                "With both the approximations, we obtained a solution quality that was close to the optimal solution quality.",
                "In 3-chain and 4-star configurations, it is remarkable that both PAX and VAX obtained almost the same actual quality as the global optimal algorithms, despite the approximation parameter and δ.",
                "For other configurations as well, the loss in quality was less than 20% of the optimal solution quality.",
                "Figure 5(c) provides the time to solution with PAX (for varying epsilons).",
                "X-axis denotes the approximation parameter, δ (percentage to optimal) used, while Y-axis denotes the time taken to compute the solution (on a log-scale).",
                "The time horizon for all the configurations was 4.",
                "As δ was decreased from 70 to 30, the time to solution decreased drastically.",
                "For instance, in the 3-chain case there was a total speedup of 170-fold when the δ was changed from 70 to 30.",
                "Interestingly, even with a low δ of 30%, the actual solution quality remained equal to the one obtained at 70%.",
                "Figure 5(d) provides the time to solution for all the configurations with VAX (for varying epsilons).",
                "X-axis denotes the approximation parameter, used, while Y-axis denotes the time taken to compute the solution (on a log-scale).",
                "The time horizon for all the configurations was 4.",
                "As was increased, the time to solution decreased drastically.",
                "For instance, in the 4-star case there was a total speedup of 73-fold when the was changed from 60 to 140.",
                "Again, the actual solution quality did not change with varying epsilon.",
                "Figure 4: Sensor network configurations 828 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Figure 5: Comparison of GOA, SPIDER, SPIDER-Abs and VAX for T = 3 on (a) Runtime and (b) Solution quality; (c) Time to solution for PAX with varying percentage to optimal for T=4 (d) Time to solution for VAX with varying epsilon for T=4 6.",
                "SUMMARY AND RELATED WORK This paper presents four algorithms SPIDER, SPIDER-ABS, PAX and VAX that provide a novel combination of features for policy search in distributed POMDPs: (i) exploiting agent interaction structure given a network of agents (i.e. easier scale-up to larger number of agents); (ii) using branch and bound search with an MDP based heuristic function; (iii) utilizing abstraction to improve runtime performance without sacrificing solution quality; (iv) providing a priori percentage bounds on quality of solutions using PAX; and (v) providing expected value bounds on the quality of solutions using VAX.",
                "These features allow for systematic tradeoff of solution quality for run-time in networks of agents operating under uncertainty.",
                "Experimental results show orders of magnitude improvement in performance over previous global optimal algorithms.",
                "Researchers have typically employed two types of techniques for solving distributed POMDPs.",
                "The first set of techniques compute global optimal solutions.",
                "Hansen et al. [5] present an algorithm based on dynamic programming and iterated elimination of dominant policies, that provides optimal solutions for distributed POMDPs.",
                "Szer et al. [13] provide an optimal heuristic search method for solving Decentralized POMDPs.",
                "This algorithm is based on the combination of a classical heuristic search algorithm, A∗ and decentralized control theory.",
                "The key differences between SPIDER and MAA* are: (a) Enhancements to SPIDER (VAX and PAX) provide for quality guaranteed approximations, while MAA* is a global optimal algorithm and hence involves significant computational complexity; (b) Due to MAA*s inability to exploit interaction structure, it was illustrated only with two agents.",
                "However, SPIDER has been illustrated for networks of agents; and (c) SPIDER explores the joint policy one agent at a time, while MAA* expands it one time step at a time (simultaneously for all the agents).",
                "The second set of techniques seek approximate policies.",
                "EmeryMontemerlo et al. [4] approximate POSGs as a series of one-step Bayesian games using heuristics to approximate future value, trading off limited lookahead for computational efficiency, resulting in locally optimal policies (with respect to the selected heuristic).",
                "Nair et al. [9]s JESP algorithm uses dynamic programming to reach a local optimum solution for finite horizon decentralized POMDPs.",
                "Peshkin et al. [11] and Bernstein et al. [2] are examples of policy search techniques that search for locally optimal policies.",
                "Though all the above techniques improve the efficiency of policy computation considerably, they are unable to provide error bounds on the quality of the solution.",
                "This aspect of quality bounds differentiates SPIDER from all the above techniques.",
                "Acknowledgements.",
                "This material is based upon work supported by the Defense Advanced Research Projects Agency (DARPA), through the Department of the Interior, NBC, Acquisition Services Division under Contract No.",
                "NBCHD030010.",
                "The views and conclusions contained in this document are those of the authors, and should not be interpreted as representing the official policies, either expressed or implied, of the Defense Advanced Research Projects Agency or the U.S. Government. 7.",
                "REFERENCES [1] R. Becker, S. Zilberstein, V. Lesser, and C.V. Goldman.",
                "Solving transition independent decentralized Markov decision processes.",
                "JAIR, 22:423-455, 2004. [2] D. S. Bernstein, E.A.",
                "Hansen, and S. Zilberstein.",
                "Bounded policy iteration for decentralized POMDPs.",
                "In IJCAI, 2005. [3] D. S. Bernstein, S. Zilberstein, and N. Immerman.",
                "The complexity of decentralized control of MDPs.",
                "In UAI, 2000. [4] R. Emery-Montemerlo, G. Gordon, J. Schneider, and S. Thrun.",
                "Approximate solutions for partially observable stochastic games with common payoffs.",
                "In AAMAS, 2004. [5] E. Hansen, D. Bernstein, and S. Zilberstein.",
                "Dynamic programming for partially observable stochastic games.",
                "In AAAI, 2004. [6] V. Lesser, C. Ortiz, and M. Tambe.",
                "Distributed sensor nets: A multiagent perspective.",
                "Kluwer, 2003. [7] R. Maheswaran, M. Tambe, E. Bowring, J. Pearce, and P. Varakantham.",
                "Taking dcop to the real world : Efficient complete solutions for distributed event scheduling.",
                "In AAMAS, 2004. [8] P. J. Modi, W. Shen, M. Tambe, and M. Yokoo.",
                "An asynchronous complete method for distributed constraint optimization.",
                "In AAMAS, 2003. [9] R. Nair, D. Pynadath, M. Yokoo, M. Tambe, and S. Marsella.",
                "Taming decentralized POMDPs: Towards efficient policy computation for multiagent settings.",
                "In IJCAI, 2003. [10] R. Nair, P. Varakantham, M. Tambe, and M. Yokoo.",
                "Networked distributed POMDPs: A synthesis of distributed constraint optimization and POMDPs.",
                "In AAAI, 2005. [11] L. Peshkin, N. Meuleau, K.-E. Kim, and L. Kaelbling.",
                "Learning to cooperate via policy search.",
                "In UAI, 2000. [12] A. Petcu and B. Faltings.",
                "A scalable method for multiagent constraint optimization.",
                "In IJCAI, 2005. [13] D. Szer, F. Charpillet, and S. Zilberstein.",
                "MAA*: A heuristic search algorithm for solving decentralized POMDPs.",
                "In IJCAI, 2005.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 829"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Desafortunadamente, como lo muestran Bernstein et al.[3], el problema de encontrar la \"política conjunta óptima\" para los POMDP distribuidos generales es NEXP-Completo.",
                "Hay dos características novedosas clave en Spider: (i) Es una rama y una técnica de búsqueda heurística vinculada que utiliza una función heurística basada en MDP para buscar una \"política conjunta óptima\";(ii) Explota la estructura de red de los agentes organizando a los agentes en un pseudo árbol de búsqueda de profundidad (DFS) y aprovecha la independencia en las diferentes ramas del árbol DFS.",
                "Para calcular la \"política conjunta óptima\" con Spider-ABS, un agente no hojado que inicialmente examina todas las políticas abstractas T = 1 (línea 2) y las clasifica en función de los cálculos heurísticos de políticas abstractas (línea 17)."
            ],
            "translated_text": "",
            "candidates": [
                "Política conjunta óptima",
                "política conjunta óptima",
                "Política conjunta óptima",
                "política conjunta óptima",
                "Política conjunta óptima",
                "política conjunta óptima"
            ],
            "error": []
        },
        "network structure": {
            "translated_key": "estructura de red",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Letting loose a SPIDER on a network of POMDPs: Generating quality guaranteed policies Pradeep Varakantham, Janusz Marecki, Yuichi Yabu∗ , Milind Tambe, Makoto Yokoo∗ University of Southern California, Los Angeles, CA 90089, {varakant, marecki, tambe}@usc.edu ∗ Dept.",
                "of Intelligent Systems, Kyushu University, Fukuoka, 812-8581 Japan, yokoo@is.kyushu-u.ac.jp ABSTRACT Distributed Partially Observable Markov Decision Problems (Distributed POMDPs) are a popular approach for modeling multi-agent systems acting in uncertain domains.",
                "Given the significant complexity of solving distributed POMDPs, particularly as we scale up the numbers of agents, one popular approach has focused on approximate solutions.",
                "Though this approach is efficient, the algorithms within this approach do not provide any guarantees on solution quality.",
                "A second less popular approach focuses on global optimality, but typical results are available only for two agents, and also at considerable computational cost.",
                "This paper overcomes the limitations of both these approaches by providing SPIDER, a novel combination of three key features for policy generation in distributed POMDPs: (i) it exploits agent interaction structure given a network of agents (i.e. allowing easier scale-up to larger number of agents); (ii) it uses a combination of heuristics to speedup policy search; and (iii) it allows quality guaranteed approximations, allowing a systematic tradeoff of solution quality for time.",
                "Experimental results show orders of magnitude improvement in performance when compared with previous global optimal algorithms.",
                "Categories and Subject Descriptors I.2.11 [Artificial Intelligence]: Distributed Artificial IntelligenceMulti-agent Systems General Terms Algorithms, Theory 1.",
                "INTRODUCTION Distributed Partially Observable Markov Decision Problems (Distributed POMDPs) are emerging as a popular approach for modeling sequential decision making in teams operating under uncertainty [9, 4, 1, 2, 13].",
                "The uncertainty arises on account of nondeterminism in the outcomes of actions and because the world state may only be partially (or incorrectly) observable.",
                "Unfortunately, as shown by Bernstein et al. [3], the problem of finding the optimal joint policy for general distributed POMDPs is NEXP-Complete.",
                "Researchers have attempted two different types of approaches towards solving these models.",
                "The first category consists of highly efficient approximate techniques, that may not reach globally optimal solutions [2, 9, 11].",
                "The key problem with these techniques has been their inability to provide any guarantees on the quality of the solution.",
                "In contrast, the second less popular category of approaches has focused on a global optimal result [13, 5, 10].",
                "Though these approaches obtain optimal solutions, they typically consider only two agents.",
                "Furthermore, they fail to exploit structure in the interactions of the agents and hence are severely hampered with respect to scalability when considering more than two agents.",
                "To address these problems with the existing approaches, we propose approximate techniques that provide guarantees on the quality of the solution while focussing on a network of more than two agents.",
                "We first propose the basic SPIDER (Search for Policies In Distributed EnviRonments) algorithm.",
                "There are two key novel features in SPIDER: (i) it is a branch and bound heuristic search technique that uses a MDP-based heuristic function to search for an optimal joint policy; (ii) it exploits <br>network structure</br> of agents by organizing agents into a Depth First Search (DFS) pseudo tree and takes advantage of the independence in the different branches of the DFS tree.",
                "We then provide three enhancements to improve the efficiency of the basic SPIDER algorithm while providing guarantees on the quality of the solution.",
                "The first enhancement uses abstractions for speedup, but does not sacrifice solution quality.",
                "In particular, it initially performs branch and bound search on abstract policies and then extends to complete policies.",
                "The second enhancement obtains speedups by sacrificing solution quality, but within an input parameter that provides the tolerable expected value difference from the optimal solution.",
                "The third enhancement is again based on bounding the search for efficiency, however with a tolerance parameter that is provided as a percentage of optimal.",
                "We experimented with the sensor network domain presented in Nair et al. [10], a domain representative of an important class of problems with networks of agents working in uncertain environments.",
                "In our experiments, we illustrate that SPIDER dominates an existing global optimal approach called GOA [10], the only known global optimal algorithm with demonstrated experimental results for more than two agents.",
                "Furthermore, we demonstrate that abstraction improves the performance of SPIDER significantly (while providing optimal solutions).",
                "We finally demonstrate a key feature of SPIDER: by utilizing the approximation enhancements it enables principled tradeoffs in run-time versus solution quality. 822 978-81-904262-7-5 (RPS) c 2007 IFAAMAS 2.",
                "DOMAIN: DISTRIBUTED SENSOR NETS Distributed sensor networks are a large, important class of domains that motivate our work.",
                "This paper focuses on a set of target tracking problems that arise in certain types of sensor networks [6] first introduced in [10].",
                "Figure 1 shows a specific problem instance within this type consisting of three sensors.",
                "Here, each sensor node can scan in one of four directions: North, South, East or West (see Figure 1).",
                "To track a target and obtain associated reward, two sensors with overlapping scanning areas must coordinate by scanning the same area simultaneously.",
                "In Figure 1, to track a target in Loc11, sensor1 needs to scan East and sensor2 needs to scan West simultaneously.",
                "Thus, sensors have to act in a coordinated fashion.",
                "We assume that there are two independent targets and that each targets movement is uncertain and unaffected by the sensor agents.",
                "Based on the area it is scanning, each sensor receives observations that can have false positives and false negatives.",
                "The sensors observations and transitions are independent of each others actions e.g.the observations that sensor1 receives are independent of sensor2s actions.",
                "Each agent incurs a cost for scanning whether the target is present or not, but no cost if it turns off.",
                "Given the sensors observational uncertainty, the targets uncertain transitions and the distributed nature of the sensor nodes, these sensor nets provide a useful domains for applying distributed POMDP models.",
                "Figure 1: A 3-chain sensor configuration 3.",
                "BACKGROUND 3.1 Model: Network Distributed POMDP The ND-POMDP model was introduced in [10], motivated by domains such as the sensor networks introduced in Section 2.",
                "It is defined as the tuple S, A, P, Ω, O, R, b , where S = ×1≤i≤nSi × Su is the set of world states.",
                "Si refers to the set of local states of agent i and Su is the set of unaffectable states.",
                "Unaffectable state refers to that part of the world state that cannot be affected by the agents actions, e.g. environmental factors like target locations that no agent can control.",
                "A = ×1≤i≤nAi is the set of joint actions, where Ai is the set of action for agent i. ND-POMDP assumes transition independence, where the transition function is defined as P(s, a, s ) = Pu(su, su) · 1≤i≤n Pi(si, su, ai, si), where a = a1, . . . , an is the joint action performed in state s = s1, . . . , sn, su and s = s1, . . . , sn, su is the resulting state.",
                "Ω = ×1≤i≤nΩi is the set of joint observations where Ωi is the set of observations for agents i. Observational independence is assumed in ND-POMDPs i.e., the joint observation function is defined as O(s, a, ω) = 1≤i≤n Oi(si, su, ai, ωi), where s = s1, . . . , sn, su is the world state that results from the agents performing a = a1, . . . , an in the previous state, and ω = ω1, . . . , ωn ∈ Ω is the observation received in state s. This implies that each agents observation depends only on the unaffectable state, its local action and on its resulting local state.",
                "The reward function, R, is defined as R(s, a) = l Rl(sl1, . . . , slr, su, al1, . . . , alr ), where each l could refer to any sub-group of agents and r = |l|.",
                "Based on the reward function, an interaction hypergraph is constructed.",
                "A hyper-link, l, exists between a subset of agents for all Rl that comprise R. The interaction hypergraph is defined as G = (Ag, E), where the agents, Ag, are the vertices and E = {l|l ⊆ Ag ∧ Rl is a component of R} are the edges.",
                "The initial belief state (distribution over the initial state), b, is defined as b(s) = bu(su) · 1≤i≤n bi(si), where bu and bi refer to the distribution over initial unaffectable state and agent is initial belief state, respectively.",
                "The goal in ND-POMDP is to compute the joint policy π = π1, . . . , πn that maximizes teams expected reward over a finite horizon T starting from the belief state b.",
                "An ND-POMDP is similar to an n-ary Distributed Constraint Optimization Problem (DCOP)[8, 12] where the variable at each node represents the policy selected by an individual agent, πi with the domain of the variable being the set of all local policies, Πi.",
                "The reward component Rl where |l| = 1 can be thought of as a local constraint while the reward component Rl where l > 1 corresponds to a non-local constraint in the constraint graph. 3.2 Algorithm: Global Optimal Algorithm (GOA) In previous work, GOA has been defined as a global optimal algorithm for ND-POMDPs [10].",
                "We will use GOA in our experimental comparisons, since GOA is a state-of-the-art global optimal algorithm, and in fact the only one with experimental results available for networks of more than two agents.",
                "GOA borrows from a global optimal DCOP algorithm called DPOP[12].",
                "GOAs message passing follows that of DPOP.",
                "The first phase is the UTIL propagation, where the utility messages, in this case values of policies, are passed up from the leaves to the root.",
                "Value for a policy at an agent is defined as the sum of best response values from its children and the joint policy reward associated with the parent policy.",
                "Thus, given a policy for a parent node, GOA requires an agent to iterate through all its policies, finding the best response policy and returning the value to the parent - while at the parent node, to find the best policy, an agent requires its children to return their best responses to each of its policies.",
                "This UTIL propagation process is repeated at each level in the tree, until the root exhausts all its policies.",
                "In the second phase of VALUE propagation, where the optimal policies are passed down from the root till the leaves.",
                "GOA takes advantage of the local interactions in the interaction graph, by pruning out unnecessary joint policy evaluations (associated with nodes not connected directly in the tree).",
                "Since the interaction graph captures all the reward interactions among agents and as this algorithm iterates through all the relevant joint policy evaluations, this algorithm yields a globally optimal solution. 4.",
                "SPIDER As mentioned in Section 3.1, an ND-POMDP can be treated as a DCOP, where the goal is to compute a joint policy that maximizes the overall joint reward.",
                "The brute-force technique for computing an optimal policy would be to examine the expected values for all possible joint policies.",
                "The key idea in SPIDER is to avoid computation of expected values for the entire space of joint policies, by utilizing upper bounds on the expected values of policies and the interaction structure of the agents.",
                "Akin to some of the algorithms for DCOP [8, 12], SPIDER has a pre-processing step that constructs a DFS tree corresponding to the given interaction structure.",
                "Note that these DFS trees are pseudo trees [12] that allow links between ancestors and children.",
                "We employ the Maximum Constrained Node (MCN) heuristic used in the DCOP algorithm, ADOPT [8], however other heuristics (such as MLSP heuristic from [7]) can also be employed.",
                "MCN heuristic tries to place agents with more number of constraints at the top of the tree.",
                "This tree governs how the search for the optimal joint polThe Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 823 icy proceeds in SPIDER.",
                "The algorithms presented in this paper are easily extendable to hyper-trees, however for expository purposes, we assume binary trees.",
                "SPIDER is an algorithm for centralized planning and distributed execution in distributed POMDPs.",
                "In this paper, we employ the following notation to denote policies and expected values: Ancestors(i) ⇒ agents from i to the root (not including i).",
                "Tree(i) ⇒ agents in the sub-tree (not including i) for which i is the root. πroot+ ⇒ joint policy of all agents. πi+ ⇒ joint policy of all agents in Tree(i) ∪ i. πi− ⇒ joint policy of agents that are in Ancestors(i). πi ⇒ policy of the ith agent. ˆv[πi, πi− ] ⇒ upper bound on the expected value for πi+ given πi and policies of ancestor agents i.e. πi− . ˆvj[πi, πi− ] ⇒ upper bound on the expected value for πi+ from the jth child. v[πi, πi− ] ⇒ expected value for πi given policies of ancestor agents, πi− . v[πi+ , πi− ] ⇒ expected value for πi+ given policies of ancestor agents, πi− . vj[πi+ , πi− ] ⇒ expected value for πi+ from the jth child.",
                "Figure 2: Execution of SPIDER, an example 4.1 Outline of SPIDER SPIDER is based on the idea of branch and bound search, where the nodes in the search tree represent partial/complete joint policies.",
                "Figure 2 shows an example search tree for the SPIDER algorithm, using an example of the three agent chain.",
                "Before SPIDER begins its search we create a DFS tree (i.e. pseudo tree) from the three agent chain, with the middle agent as the root of this tree.",
                "SPIDER exploits the structure of this DFS tree while engaging in its search.",
                "Note that in our example figure, each agent is assigned a policy with T=2.",
                "Thus, each rounded rectange (search tree node) indicates a partial/complete joint policy, a rectangle indicates an agent and the ovals internal to an agent show its policy.",
                "Heuristic or actual expected value for a joint policy is indicated in the top right corner of the rounded rectangle.",
                "If the number is italicized and underlined, it implies that the actual expected value of the joint policy is provided.",
                "SPIDER begins with no policy assigned to any of the agents (shown in the level 1 of the search tree).",
                "Level 2 of the search tree indicates that the joint policies are sorted based on upper bounds computed for root agents policies.",
                "Level 3 shows one SPIDER search node with a complete joint policy (a policy assigned to each of the agents).",
                "The expected value for this joint policy is used to prune out the nodes in level 2 (the ones with upper bounds < 234) When creating policies for each non-leaf agent i, SPIDER potentially performs two steps: 1.",
                "Obtaining upper bounds and sorting: In this step, agent i computes upper bounds on the expected values, ˆv[πi, πi− ] of the joint policies πi+ corresponding to each of its policy πi and fixed ancestor policies.",
                "An MDP based heuristic is used to compute these upper bounds on the expected values.",
                "Detailed description about this MDP heuristic is provided in Section 4.2.",
                "All policies of agent i, Πi are then sorted based on these upper bounds (also referred to as heuristic values henceforth) in descending order.",
                "Exploration of these policies (in step 2 below) are performed in this descending order.",
                "As indicated in the level 2 of the search tree (of Figure 2), all the joint policies are sorted based on the heuristic values, indicated in the top right corner of each joint policy.",
                "The intuition behind sorting and then exploring policies in descending order of upper bounds, is that the policies with higher upper bounds could yield joint policies with higher expected values. 2.",
                "Exploration and Pruning: Exploration implies computing the best response joint policy πi+,∗ corresponding to fixed ancestor policies of agent i, πi− .",
                "This is performed by iterating through all policies of agent i i.e.",
                "Πi and summing two quantities for each policy: (i) the best response for all of is children (obtained by performing steps 1 and 2 at each of the child nodes); (ii) the expected value obtained by i for fixed policies of ancestors.",
                "Thus, exploration of a policy πi yields actual expected value of a joint policy, πi+ represented as v[πi+ , πi− ].",
                "The policy with the highest expected value is the best response policy.",
                "Pruning refers to avoiding exploring all policies (or computing expected values) at agent i by using the current best expected value, vmax [πi+ , πi− ].",
                "Henceforth, this vmax [πi+ , πi− ] will be referred to as threshold.",
                "A policy, πi need not be explored if the upper bound for that policy, ˆv[πi, πi− ] is less than the threshold.",
                "This is because the expected value for the best joint policy attainable for that policy will be less than the threshold.",
                "On the other hand, when considering a leaf agent, SPIDER computes the best response policy (and consequently its expected value) corresponding to fixed policies of its ancestors, πi− .",
                "This is accomplished by computing expected values for each of the policies (corresponding to fixed policies of ancestors) and selecting the highest expected value policy.",
                "In Figure 2, SPIDER assigns best response policies to leaf agents at level 3.",
                "The policy for the left leaf agent is to perform action East at each time step in the policy, while the policy for the right leaf agent is to perform Off at each time step.",
                "These best response policies from the leaf agents yield an actual expected value of 234 for the complete joint policy.",
                "Algorithm 1 provides the pseudo code for SPIDER.",
                "This algorithm outputs the best joint policy, πi+,∗ (with an expected value greater than threshold) for the agents in Tree(i).",
                "Lines 3-8 compute the best response policy of a leaf agent i, while lines 9-23 computes the best response joint policy for agents in Tree(i).",
                "This best response computation for a non-leaf agent i includes: (a) Sorting of policies (in descending order) based on heuristic values on line 11; (b) Computing best response policies at each of the children for fixed policies of agent i in lines 16-20; and (c) Maintaining 824 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Algorithm 1 SPIDER(i, πi− , threshold) 1: πi+,∗ ← null 2: Πi ← GET-ALL-POLICIES (horizon, Ai, Ωi) 3: if IS-LEAF(i) then 4: for all πi ∈ Πi do 5: v[πi, πi−] ← JOINT-REWARD (πi, πi−) 6: if v[πi, πi−] > threshold then 7: πi+,∗ ← πi 8: threshold ← v[πi, πi−] 9: else 10: children ← CHILDREN (i) 11: ˆΠi ← UPPER-BOUND-SORT(i, Πi, πi−) 12: for all πi ∈ ˆΠi do 13: ˜πi+ ← πi 14: if ˆv[πi, πi−] < threshold then 15: Go to line 12 16: for all j ∈ children do 17: jThres ← threshold − v[πi, πi−]− Σk∈children,k=j ˆvk[πi, πi−] 18: πj+,∗ ← SPIDER(j, πi πi−, jThres) 19: ˜πi+ ← ˜πi+ πj+,∗ 20: ˆvj[πi, πi−] ← v[πj+,∗, πi πi−] 21: if v[˜πi+, πi−] > threshold then 22: threshold ← v[˜πi+, πi−] 23: πi+,∗ ← ˜πi+ 24: return πi+,∗ Algorithm 2 UPPER-BOUND-SORT(i, Πi, πi− ) 1: children ← CHILDREN (i) 2: ˆΠi ← null /* Stores the sorted list */ 3: for all πi ∈ Πi do 4: ˆv[πi, πi−] ← JOINT-REWARD (πi, πi−) 5: for all j ∈ children do 6: ˆvj[πi, πi−] ← UPPER-BOUND(i, j, πi πi−) 7: ˆv[πi, πi−] + ← ˆvj[πi, πi−] 8: ˆΠi ← INSERT-INTO-SORTED (πi, ˆΠi) 9: return ˆΠi best expected value, joint policy in lines 21-23.",
                "Algorithm 2 provides the pseudo code for sorting policies based on the upper bounds on the expected values of joint policies.",
                "Expected value for an agent i consists of two parts: value obtained from ancestors and value obtained from its children.",
                "Line 4 computes the expected value obtained from ancestors of the agent (using JOINT-REWARD function), while lines 5-7 compute the heuristic value from the children.",
                "The sum of these two parts yields an upper bound on the expected value for agent i, and line 8 of the algorithm sorts the policies based on these upper bounds. 4.2 MDP based heuristic function The heuristic function quickly provides an upper bound on the expected value obtainable from the agents in Tree(i).",
                "The subtree of agents is a distributed POMDP in itself and the idea here is to construct a centralized MDP corresponding to the (sub-tree) distributed POMDP and obtain the expected value of the optimal policy for this centralized MDP.",
                "To reiterate this in terms of the agents in DFS tree interaction structure, we assume full observability for the agents in Tree(i) and for fixed policies of the agents in {Ancestors(i) ∪ i}, we compute the joint value ˆv[πi+ , πi− ] .",
                "We use the following notation for presenting the equations for computing upper bounds/heuristic values (for agents i and k): Let Ei− denote the set of links between agents in {Ancestors(i)∪ i} and Tree(i), Ei+ denote the set of links between agents in Tree(i).",
                "Also, if l ∈ Ei− , then l1 is the agent in {Ancestors(i)∪ i} and l2 is the agent in Tree(i), that l connects together.",
                "We first compact the standard notation: ot k =Ok(st+1 k , st+1 u , πk(ωt k), ωt+1 k ) (1) pt k =Pk(st k, st u, πk(ωt k), st+1 k ) · ot k pt u =P(st u, st+1 u ) st l = st l1 , st l2 , st u ; ωt l = ωt l1 , ωt l2 rt l =Rl(st l , πl1 (ωt l1 ), πl2 (ωt l2 )) vt l =V t πl (st l , st u, ωt l1 , ωt l2 ) Depending on the location of agent k in the agent tree we have the following cases: IF k ∈ {Ancestors(i) ∪ i}, ˆpt k = pt k, (2) IF k ∈ Tree(i), ˆpt k = Pk(st k, st u, πk(ωt k), st+1 k ) IF l ∈ Ei− , ˆrt l = max {al2 } Rl(st l , πl1 (ωt l1 ), al2 ) IF l ∈ Ei+ , ˆrt l = max {al1 ,al2 } Rl(st l , al1 , al2 ) The value function for an agent i executing the joint policy πi+ at time η − 1 is provided by the equation: V η−1 πi+ (sη−1 , ωη−1 ) = l∈Ei− vη−1 l + l∈Ei+ vη−1 l (3) where vη−1 l = rη−1 l + ω η l ,sη pη−1 l1 pη−1 l2 pη−1 u vη l Algorithm 3 UPPER-BOUND (i, j, πj− ) 1: val ← 0 2: for all l ∈ Ej− ∪ Ej+ do 3: if l ∈ Ej− then πl1 ← φ 4: for all s0 l do 5: val + ← startBel[s0 l ]· UPPER-BOUND-TIME (i, s0 l , j, πl1 , ) 6: return val Algorithm 4 UPPER-BOUND-TIME (i, st l , j, πl1 , ωt l1 ) 1: maxV al ← −∞ 2: for all al1 , al2 do 3: if l ∈ Ei− and l ∈ Ej− then al1 ← πl1 (ωt l1 ) 4: val ← GET-REWARD(st l , al1 , al2 ) 5: if t < πi.horizon − 1 then 6: for all st+1 l , ωt+1 l1 do 7: futV al←pt u ˆpt l1 ˆpt l2 8: futV al ∗ ← UPPER-BOUND-TIME(st+1 l , j, πl1 , ωt l1 ωt+1 l1 ) 9: val + ← futV al 10: if val > maxV al then maxV al ← val 11: return maxV al Upper bound on the expected value for a link is computed by modifying the equation 3 to reflect the full observability assumption.",
                "This involves removing the observational probability term for agents in Tree(i) and maximizing the future value ˆvη l over the actions of those agents (in Tree(i)).",
                "Thus, the equation for the The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 825 computation of the upper bound on a link l, is as follows: IF l ∈ Ei− , ˆvη−1 l =ˆrη−1 l + max al2 ω η l1 ,s η l ˆpη−1 l1 ˆpη−1 l2 pη−1 u ˆvη l IF l ∈ Ei+ , ˆvη−1 l =ˆrη−1 l + max al1 ,al2 s η l ˆpη−1 l1 ˆpη−1 l2 pη−1 u ˆvη l Algorithm 3 and Algorithm 4 provide the algorithm for computing upper bound for child j of agent i, using the equations descirbed above.",
                "While Algorithm 4 computes the upper bound on a link given the starting state, Algorithm 3 sums the upper bound values computed over each of the links in Ei− ∪ Ei+ . 4.3 Abstraction Algorithm 5 SPIDER-ABS(i, πi− , threshold) 1: πi+,∗ ← null 2: Πi ← GET-POLICIES (<>, 1) 3: if IS-LEAF(i) then 4: for all πi ∈ Πi do 5: absHeuristic ← GET-ABS-HEURISTIC (πi, πi−) 6: absHeuristic ∗ ← (timeHorizon − πi.horizon) 7: if πi.horizon = timeHorizon and πi.absNodes = 0 then 8: v[πi, πi−] ← JOINT-REWARD (πi, πi−) 9: if v[πi, πi−] > threshold then 10: πi+,∗ ← πi; threshold ← v[πi, πi−] 11: else if v[πi, πi−] + absHeuristic > threshold then 12: ˆΠi ← EXTEND-POLICY (πi, πi.absNodes + 1) 13: Πi + ← INSERT-SORTED-POLICIES ( ˆΠi) 14: REMOVE(πi) 15: else 16: children ← CHILDREN (i) 17: Πi ← UPPER-BOUND-SORT(i, Πi, πi−) 18: for all πi ∈ Πi do 19: ˜πi+ ← πi 20: absHeuristic ← GET-ABS-HEURISTIC (πi, πi−) 21: absHeuristic ∗ ← (timeHorizon − πi.horizon) 22: if πi.horizon = timeHorizon and πi.absNodes = 0 then 23: if ˆv[πi, πi−] < threshold and πi.absNodes = 0 then 24: Go to line 19 25: for all j ∈ children do 26: jThres ← threshold − v[πi, πi−]− Σk∈children,k=j ˆvk[πi, πi−] 27: πj+,∗ ← SPIDER(j, πi πi−, jThres) 28: ˜πi+ ← ˜πi+ πj+,∗; ˆvj[πi, πi−] ← v[πj+,∗, πi πi−] 29: if v[˜πi+, πi−] > threshold then 30: threshold ← v[˜πi+, πi−]; πi+,∗ ← ˜πi+ 31: else if ˆv[πi+, πi−] + absHeuristic > threshold then 32: ˆΠi ← EXTEND-POLICY (πi, πi.absNodes + 1) 33: Πi + ← INSERT-SORTED-POLICIES (ˆΠi) 34: REMOVE(πi) 35: return πi+,∗ In SPIDER, the exploration/pruning phase can only begin after the heuristic (or upper bound) computation and sorting for the policies has ended.",
                "We provide an approach to possibly circumvent the exploration of a group of policies based on heuristic computation for one abstract policy, thus leading to an improvement in runtime performance (without loss in solution quality).",
                "The important steps in this technique are defining the abstract policy and how heuristic values are computated for the abstract policies.",
                "In this paper, we propose two types of abstraction: 1.",
                "Horizon Based Abstraction (HBA): Here, the abstract policy is defined as a shorter horizon policy.",
                "It represents a group of longer horizon policies that have the same actions as the abstract policy for times less than or equal to the horizon of the abstract policy.",
                "In Figure 3(a), a T=1 abstract policy that performs East action, represents a group of T=2 policies, that perform East in the first time step.",
                "For HBA, there are two parts to heuristic computation: (a) Computing the upper bound for the horizon of the abstract policy.",
                "This is same as the heuristic computation defined by the GETHEURISTIC() algorithm for SPIDER, however with a shorter time horizon (horizon of the abstract policy). (b) Computing the maximum possible reward that can be accumulated in one time step (using GET-ABS-HEURISTIC()) and multiplying it by the number of time steps to time horizon.",
                "This maximum possible reward (for one time step) is obtained by iterating through all the actions of all the agents in Tree(i) and computing the maximum joint reward for any joint action.",
                "Sum of (a) and (b) is the heuristic value for a HBA abstract policy. 2.",
                "Node Based Abstraction (NBA): Here an abstract policy is obtained by not associating actions to certain nodes of the policy tree.",
                "Unlike in HBA, this implies multiple levels of abstraction.",
                "This is illustrated in Figure 3(b), where there are T=2 policies that do not have an action for observation TP.",
                "These incomplete T=2 policies are abstractions for T=2 complete policies.",
                "Increased levels of abstraction leads to faster computation of a complete joint policy, πroot+ and also to shorter heuristic computation and exploration, pruning phases.",
                "For NBA, the heuristic computation is similar to that of a normal policy, except in cases where there is no action associated with policy nodes.",
                "In such cases, the immediate reward is taken as Rmax (maximum reward for any action).",
                "We combine both the abstraction techniques mentioned above into one technique, SPIDER-ABS.",
                "Algorithm 5 provides the algorithm for this abstraction technique.",
                "For computing optimal joint policy with SPIDER-ABS, a non-leaf agent i initially examines all abstract T=1 policies (line 2) and sorts them based on abstract policy heuristic computations (line 17).",
                "The abstraction horizon is gradually increased and these abstract policies are then explored in descending order of heuristic values and ones that have heuristic values less than the threshold are pruned (lines 23-24).",
                "Exploration in SPIDER-ABS has the same definition as in SPIDER if the policy being explored has a horizon of policy computation which is equal to the actual time horizon and if all the nodes of the policy have an action associated with them (lines 25-30).",
                "However, if those conditions are not met, then it is substituted by a group of policies that it represents (using EXTEND-POLICY () function) (lines 31-32).",
                "EXTEND-POLICY() function is also responsible for initializing the horizon and absNodes of a policy. absNodes represents the number of nodes at the last level in the policy tree, that do not have an action assigned to them.",
                "If πi.absNodes = |Ωi|πi.horizon−1 (i.e. total number of policy nodes possible at πi.horizon) , then πi.absNodes is set to zero and πi.horizon is increased by 1.",
                "Otherwise, πi.absNodes is increased by 1.",
                "Thus, this function combines both HBA and NBA by using the policy variables, horizon and absNodes.",
                "Before substituting the abstract policy with a group of policies, those policies are sorted based on heuristic values (line 33).",
                "Similar type of abstraction based best response computation is adopted at leaf agents (lines 3-14). 4.4 Value ApproXimation (VAX) In this section, we present an approximate enhancement to SPIDER called VAX.",
                "The input to this technique is an approximation parameter , which determines the difference from the optimal solution quality.",
                "This approximation parameter is used at each agent for pruning out joint policies.",
                "The pruning mechanism in SPIDER and SPIDER-Abs dictates that a joint policy be pruned only if the threshold is exactly greater than the heuristic value.",
                "However, the 826 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Figure 3: Example of abstraction for (a) HBA (Horizon Based Abstraction) and (b) NBA (Node Based Abstraction) idea in this technique is to prune out joint a policy if the following condition is satisfied: threshold + > ˆv[πi , πi− ].",
                "Apart from the pruning condition, VAX is the same as SPIDER/SPIDER-ABS.",
                "In the example of Figure 2, if the heuristic value for the second joint policy (or second search tree node) in level 2 were 238 instead of 232, then that policy could not be be pruned using SPIDER or SPIDER-Abs.",
                "However, in VAX with an approximation parameter of 5, the joint policy in consideration would also be pruned.",
                "This is because the threshold (234) at that juncture plus the approximation parameter (5), i.e. 239 would have been greater than the heuristic value for that joint policy (238).",
                "It can be noted from the example (just discussed) that this kind of pruning can lead to fewer explorations and hence lead to an improvement in the overall run-time performance.",
                "However, this can entail a sacrifice in the quality of the solution because this technique can prune out a candidate optimal solution.",
                "A bound on the error introduced by this approximate algorithm as a function of , is provided by Proposition 3. 4.5 Percentage ApproXimation (PAX) In this section, we present the second approximation enhancement over SPIDER called PAX.",
                "Input to this technique is a parameter, δ that represents the minimum percentage of the optimal solution quality that is desired.",
                "Output of this technique is a policy with an expected value that is at least δ% of the optimal solution quality.",
                "A policy is pruned if the following condition is satisfied: threshold > δ 100 ˆv[πi , πi− ].",
                "Like in VAX, the only difference between PAX and SPIDER/SPIDER-ABS is this pruning condition.",
                "Again in Figure 2, if the heuristic value for the second search tree node in level 2 were 238 instead of 232, then PAX with an input parameter of 98% would be able to prune that search tree node (since 98 100 ∗238 < 234).",
                "This type of pruning leads to fewer explorations and hence an improvement in run-time performance, while potentially leading to a loss in quality of the solution.",
                "Proposition 4 provides the bound on quality loss. 4.6 Theoretical Results PROPOSITION 1.",
                "Heuristic provided using the centralized MDP heuristic is admissible.",
                "Proof.",
                "For the value provided by the heuristic to be admissible, it should be an over estimate of the expected value for a joint policy.",
                "Thus, we need to show that: For l ∈ Ei+ ∪ Ei− : ˆvt l ≥ vt l (refer to notation in Section 4.2) We use mathematical induction on t to prove this.",
                "Base case: t = T − 1.",
                "Irrespective of whether l ∈ Ei− or l ∈ Ei+ , ˆrt l is computed by maximizing over all actions of the agents in Tree(i), while rt l is computed for fixed policies of the same agents.",
                "Hence, ˆrt l ≥ rt l and also ˆvt l ≥ vt l .",
                "Assumption: Proposition holds for t = η, where 1 ≤ η < T − 1.",
                "We now have to prove that the proposition holds for t = η − 1.",
                "We show the proof for l ∈ Ei− and similar reasoning can be adopted to prove for l ∈ Ei+ .",
                "The heuristic value function for l ∈ Ei− is provided by the following equation: ˆvη−1 l =ˆrη−1 l + max al2 ω η l1 ,s η l ˆpη−1 l1 ˆpη−1 l2 pη−1 u ˆvη l Rewriting the RHS and using Eqn 2 (in Section 4.2) =ˆrη−1 l + max al2 ω η l1 ,s η l pη−1 u pη−1 l1 ˆpη−1 l2 ˆvη l =ˆrη−1 l + ω η l1 ,s η l pη−1 u pη−1 l1 max al2 ˆpη−1 l2 ˆvη l Since maxal2 ˆpη−1 l2 ˆvη l ≥ ωl2 oη−1 l2 ˆpη−1 l2 ˆvη l and pη−1 l2 = oη−1 l2 ˆpη−1 l2 ≥ˆrη−1 l + ω η l1 ,s η l pη−1 u pη−1 l1 ωl2 pη−1 l2 ˆvη l Since ˆvη l ≥ vη l (from the assumption) ≥ˆrη−1 l + ω η l1 ,s η l pη−1 u pη−1 l1 ωl2 pη−1 l2 vη l Since ˆrη−1 l ≥ rη−1 l (by definition) ≥rη−1 l + ω η l1 ,s η l pη−1 u pη−1 l1 ωl2 pη−1 l2 vη l =rη−1 l + (ω η l ,s η l ) pη−1 u pη−1 l1 pη−1 l2 vη l = vη−1 l Thus proved.",
                "PROPOSITION 2.",
                "SPIDER provides an optimal solution.",
                "Proof.",
                "SPIDER examines all possible joint policies given the interaction structure of the agents.",
                "The only exception being when a joint policy is pruned based on the heuristic value.",
                "Thus, as long as a candidate optimal policy is not pruned, SPIDER will return an optimal policy.",
                "As proved in Proposition 1, the expected value for a joint policy is always an upper bound.",
                "Hence when a joint policy is pruned, it cannot be an optimal solution.",
                "PROPOSITION 3.",
                "Error bound on the solution quality for VAX (implemented over SPIDER-ABS) with an approximation parameter of is ρ , where ρ is the number of leaf nodes in the DFS tree.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 827 Proof.",
                "We prove this proposition using mathematical induction on the depth of the DFS tree.",
                "Base case: depth = 1 (i.e. one node).",
                "Best response is computed by iterating through all policies, Πk.",
                "A policy,πk is pruned if ˆv[πk, πk− ] < threshold + .",
                "Thus the best response policy computed by VAX would be at most away from the optimal best response.",
                "Hence the proposition holds for the base case.",
                "Assumption: Proposition holds for d, where 1 ≤ depth ≤ d. We now have to prove that the proposition holds for d + 1.",
                "Without loss of generality, lets assume that the root node of this tree has k children.",
                "Each of this children is of depth ≤ d, and hence from the assumption, the error introduced in kth child is ρk , where ρk is the number of leaf nodes in kth child of the root.",
                "Therefore, ρ = k ρk, where ρ is the number of leaf nodes in the tree.",
                "In SPIDER-ABS, threshold at the root agent, thresspider = k v[πk+ , πk− ].",
                "However, with VAX the threshold at the root agent will be (in the worst case), threshvax = k v[πk+ , πk− ]− k ρk .",
                "Hence, with VAX a joint policy is pruned at the root agent if ˆv[πroot, πroot− ] < threshvax + ⇒ ˆv[πroot, πroot− ] < threshspider − (( k ρk) − 1) ≤ threshspider − ( k ρk) ≤ threshspider − ρ .",
                "Hence proved.",
                "PROPOSITION 4.",
                "For PAX (implemented over SPIDER-ABS) with an input parameter of δ, the solution quality is at least δ 100 v[πroot+,∗ ], where v[πroot+,∗ ] denotes the optimal solution quality.",
                "Proof.",
                "We prove this proposition using mathematical induction on the depth of the DFS tree.",
                "Base case: depth = 1 (i.e. one node).",
                "Best response is computed by iterating through all policies, Πk.",
                "A policy,πk is pruned if δ 100 ˆv[πk, πk− ] < threshold.",
                "Thus the best response policy computed by PAX would be at least δ 100 times the optimal best response.",
                "Hence the proposition holds for the base case.",
                "Assumption: Proposition holds for d, where 1 ≤ depth ≤ d. We now have to prove that the proposition holds for d + 1.",
                "Without loss of generality, lets assume that the root node of this tree has k children.",
                "Each of this children is of depth ≤ d, and hence from the assumption, the solution quality in the kth child is at least δ 100 v[πk+,∗ , πk− ] for PAX.",
                "With SPIDER-ABS, a joint policy is pruned at the root agent if ˆv[πroot, πroot− ] < k v[πk+,∗ , πk− ].",
                "However with PAX, a joint policy is pruned if δ 100 ˆv[πroot, πroot− ] < k δ 100 v[πk+,∗ , πk− ] ⇒ ˆv[πroot, πroot− ] < k v[πk+,∗ , πk− ].",
                "Since the pruning condition at the root agent in PAX is the same as the one in SPIDER-ABS, there is no error introduced at the root agent and all the error is introduced in the children.",
                "Thus, overall solution quality is at least δ 100 of the optimal solution.",
                "Hence proved. 5.",
                "EXPERIMENTAL RESULTS All our experiments were conducted on the sensor network domain from Section 2.",
                "The five network configurations employed are shown in Figure 4.",
                "Algorithms that we experimented with are GOA, SPIDER, SPIDER-ABS, PAX and VAX.",
                "We compare against GOA because it is the only global optimal algorithm that considers more than two agents.",
                "We performed two sets of experiments: (i) firstly, we compared the run-time performance of the above algorithms and (ii) secondly, we experimented with PAX and VAX to study the tradeoff between run-time and solution quality.",
                "Experiments were terminated after 10000 seconds1 .",
                "Figure 5(a) provides run-time comparisons between the optimal algorithms GOA, SPIDER, SPIDER-Abs and the approximate algorithms, PAX ( of 30) and VAX(δ of 80).",
                "X-axis denotes the 1 Machine specs for all experiments: Intel Xeon 3.6 GHZ processor, 2GB RAM sensor network configuration used, while Y-axis indicates the runtime (on a log-scale).",
                "The time horizon of policy computation was 3.",
                "For each configuration (3-chain, 4-chain, 4-star and 5-star), there are five bars indicating the time taken by GOA, SPIDER, SPIDERAbs, PAX and VAX.",
                "GOA did not terminate within the time limit for 4-star and 5-star configurations.",
                "SPIDER-Abs dominated the SPIDER and GOA for all the configurations.",
                "For instance, in the 3chain configuration, SPIDER-ABS provides 230-fold speedup over GOA and 2-fold speedup over SPIDER and for the 4-chain configuration it provides 58-fold speedup over GOA and 2-fold speedup over SPIDER.",
                "The two approximation approaches, VAX and PAX provided further improvement in performance over SPIDER-Abs.",
                "For instance, in the 5-star configuration VAX provides a 15-fold speedup and PAX provides a 8-fold speedup over SPIDER-Abs.",
                "Figures 5(b) provides a comparison of the solution quality obtained using the different algorithms for the problems tested in Figure 5(a).",
                "X-axis denotes the sensor network configuration while Y-axis indicates the solution quality.",
                "Since GOA, SPIDER, and SPIDER-Abs are all global optimal algorithms, the solution quality is the same for all those algorithms.",
                "For 5-P configuration, the global optimal algorithms did not terminate within the limit of 10000 seconds, so the bar for optimal quality indicates an upper bound on the optimal solution quality.",
                "With both the approximations, we obtained a solution quality that was close to the optimal solution quality.",
                "In 3-chain and 4-star configurations, it is remarkable that both PAX and VAX obtained almost the same actual quality as the global optimal algorithms, despite the approximation parameter and δ.",
                "For other configurations as well, the loss in quality was less than 20% of the optimal solution quality.",
                "Figure 5(c) provides the time to solution with PAX (for varying epsilons).",
                "X-axis denotes the approximation parameter, δ (percentage to optimal) used, while Y-axis denotes the time taken to compute the solution (on a log-scale).",
                "The time horizon for all the configurations was 4.",
                "As δ was decreased from 70 to 30, the time to solution decreased drastically.",
                "For instance, in the 3-chain case there was a total speedup of 170-fold when the δ was changed from 70 to 30.",
                "Interestingly, even with a low δ of 30%, the actual solution quality remained equal to the one obtained at 70%.",
                "Figure 5(d) provides the time to solution for all the configurations with VAX (for varying epsilons).",
                "X-axis denotes the approximation parameter, used, while Y-axis denotes the time taken to compute the solution (on a log-scale).",
                "The time horizon for all the configurations was 4.",
                "As was increased, the time to solution decreased drastically.",
                "For instance, in the 4-star case there was a total speedup of 73-fold when the was changed from 60 to 140.",
                "Again, the actual solution quality did not change with varying epsilon.",
                "Figure 4: Sensor network configurations 828 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Figure 5: Comparison of GOA, SPIDER, SPIDER-Abs and VAX for T = 3 on (a) Runtime and (b) Solution quality; (c) Time to solution for PAX with varying percentage to optimal for T=4 (d) Time to solution for VAX with varying epsilon for T=4 6.",
                "SUMMARY AND RELATED WORK This paper presents four algorithms SPIDER, SPIDER-ABS, PAX and VAX that provide a novel combination of features for policy search in distributed POMDPs: (i) exploiting agent interaction structure given a network of agents (i.e. easier scale-up to larger number of agents); (ii) using branch and bound search with an MDP based heuristic function; (iii) utilizing abstraction to improve runtime performance without sacrificing solution quality; (iv) providing a priori percentage bounds on quality of solutions using PAX; and (v) providing expected value bounds on the quality of solutions using VAX.",
                "These features allow for systematic tradeoff of solution quality for run-time in networks of agents operating under uncertainty.",
                "Experimental results show orders of magnitude improvement in performance over previous global optimal algorithms.",
                "Researchers have typically employed two types of techniques for solving distributed POMDPs.",
                "The first set of techniques compute global optimal solutions.",
                "Hansen et al. [5] present an algorithm based on dynamic programming and iterated elimination of dominant policies, that provides optimal solutions for distributed POMDPs.",
                "Szer et al. [13] provide an optimal heuristic search method for solving Decentralized POMDPs.",
                "This algorithm is based on the combination of a classical heuristic search algorithm, A∗ and decentralized control theory.",
                "The key differences between SPIDER and MAA* are: (a) Enhancements to SPIDER (VAX and PAX) provide for quality guaranteed approximations, while MAA* is a global optimal algorithm and hence involves significant computational complexity; (b) Due to MAA*s inability to exploit interaction structure, it was illustrated only with two agents.",
                "However, SPIDER has been illustrated for networks of agents; and (c) SPIDER explores the joint policy one agent at a time, while MAA* expands it one time step at a time (simultaneously for all the agents).",
                "The second set of techniques seek approximate policies.",
                "EmeryMontemerlo et al. [4] approximate POSGs as a series of one-step Bayesian games using heuristics to approximate future value, trading off limited lookahead for computational efficiency, resulting in locally optimal policies (with respect to the selected heuristic).",
                "Nair et al. [9]s JESP algorithm uses dynamic programming to reach a local optimum solution for finite horizon decentralized POMDPs.",
                "Peshkin et al. [11] and Bernstein et al. [2] are examples of policy search techniques that search for locally optimal policies.",
                "Though all the above techniques improve the efficiency of policy computation considerably, they are unable to provide error bounds on the quality of the solution.",
                "This aspect of quality bounds differentiates SPIDER from all the above techniques.",
                "Acknowledgements.",
                "This material is based upon work supported by the Defense Advanced Research Projects Agency (DARPA), through the Department of the Interior, NBC, Acquisition Services Division under Contract No.",
                "NBCHD030010.",
                "The views and conclusions contained in this document are those of the authors, and should not be interpreted as representing the official policies, either expressed or implied, of the Defense Advanced Research Projects Agency or the U.S. Government. 7.",
                "REFERENCES [1] R. Becker, S. Zilberstein, V. Lesser, and C.V. Goldman.",
                "Solving transition independent decentralized Markov decision processes.",
                "JAIR, 22:423-455, 2004. [2] D. S. Bernstein, E.A.",
                "Hansen, and S. Zilberstein.",
                "Bounded policy iteration for decentralized POMDPs.",
                "In IJCAI, 2005. [3] D. S. Bernstein, S. Zilberstein, and N. Immerman.",
                "The complexity of decentralized control of MDPs.",
                "In UAI, 2000. [4] R. Emery-Montemerlo, G. Gordon, J. Schneider, and S. Thrun.",
                "Approximate solutions for partially observable stochastic games with common payoffs.",
                "In AAMAS, 2004. [5] E. Hansen, D. Bernstein, and S. Zilberstein.",
                "Dynamic programming for partially observable stochastic games.",
                "In AAAI, 2004. [6] V. Lesser, C. Ortiz, and M. Tambe.",
                "Distributed sensor nets: A multiagent perspective.",
                "Kluwer, 2003. [7] R. Maheswaran, M. Tambe, E. Bowring, J. Pearce, and P. Varakantham.",
                "Taking dcop to the real world : Efficient complete solutions for distributed event scheduling.",
                "In AAMAS, 2004. [8] P. J. Modi, W. Shen, M. Tambe, and M. Yokoo.",
                "An asynchronous complete method for distributed constraint optimization.",
                "In AAMAS, 2003. [9] R. Nair, D. Pynadath, M. Yokoo, M. Tambe, and S. Marsella.",
                "Taming decentralized POMDPs: Towards efficient policy computation for multiagent settings.",
                "In IJCAI, 2003. [10] R. Nair, P. Varakantham, M. Tambe, and M. Yokoo.",
                "Networked distributed POMDPs: A synthesis of distributed constraint optimization and POMDPs.",
                "In AAAI, 2005. [11] L. Peshkin, N. Meuleau, K.-E. Kim, and L. Kaelbling.",
                "Learning to cooperate via policy search.",
                "In UAI, 2000. [12] A. Petcu and B. Faltings.",
                "A scalable method for multiagent constraint optimization.",
                "In IJCAI, 2005. [13] D. Szer, F. Charpillet, and S. Zilberstein.",
                "MAA*: A heuristic search algorithm for solving decentralized POMDPs.",
                "In IJCAI, 2005.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 829"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Hay dos características novedosas clave en Spider: (i) Es una rama y una técnica de búsqueda heurística vinculada que utiliza una función heurística basada en MDP para buscar una política conjunta óptima;(ii) explota la \"estructura de red\" de los agentes organizando a los agentes en un pseudo árbol de búsqueda de profundidad (DFS) y aprovecha la independencia en las diferentes ramas del árbol DFS."
            ],
            "translated_text": "",
            "candidates": [
                "estructura de red",
                "estructura de red"
            ],
            "error": []
        },
        "depth first search": {
            "translated_key": "",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Letting loose a SPIDER on a network of POMDPs: Generating quality guaranteed policies Pradeep Varakantham, Janusz Marecki, Yuichi Yabu∗ , Milind Tambe, Makoto Yokoo∗ University of Southern California, Los Angeles, CA 90089, {varakant, marecki, tambe}@usc.edu ∗ Dept.",
                "of Intelligent Systems, Kyushu University, Fukuoka, 812-8581 Japan, yokoo@is.kyushu-u.ac.jp ABSTRACT Distributed Partially Observable Markov Decision Problems (Distributed POMDPs) are a popular approach for modeling multi-agent systems acting in uncertain domains.",
                "Given the significant complexity of solving distributed POMDPs, particularly as we scale up the numbers of agents, one popular approach has focused on approximate solutions.",
                "Though this approach is efficient, the algorithms within this approach do not provide any guarantees on solution quality.",
                "A second less popular approach focuses on global optimality, but typical results are available only for two agents, and also at considerable computational cost.",
                "This paper overcomes the limitations of both these approaches by providing SPIDER, a novel combination of three key features for policy generation in distributed POMDPs: (i) it exploits agent interaction structure given a network of agents (i.e. allowing easier scale-up to larger number of agents); (ii) it uses a combination of heuristics to speedup policy search; and (iii) it allows quality guaranteed approximations, allowing a systematic tradeoff of solution quality for time.",
                "Experimental results show orders of magnitude improvement in performance when compared with previous global optimal algorithms.",
                "Categories and Subject Descriptors I.2.11 [Artificial Intelligence]: Distributed Artificial IntelligenceMulti-agent Systems General Terms Algorithms, Theory 1.",
                "INTRODUCTION Distributed Partially Observable Markov Decision Problems (Distributed POMDPs) are emerging as a popular approach for modeling sequential decision making in teams operating under uncertainty [9, 4, 1, 2, 13].",
                "The uncertainty arises on account of nondeterminism in the outcomes of actions and because the world state may only be partially (or incorrectly) observable.",
                "Unfortunately, as shown by Bernstein et al. [3], the problem of finding the optimal joint policy for general distributed POMDPs is NEXP-Complete.",
                "Researchers have attempted two different types of approaches towards solving these models.",
                "The first category consists of highly efficient approximate techniques, that may not reach globally optimal solutions [2, 9, 11].",
                "The key problem with these techniques has been their inability to provide any guarantees on the quality of the solution.",
                "In contrast, the second less popular category of approaches has focused on a global optimal result [13, 5, 10].",
                "Though these approaches obtain optimal solutions, they typically consider only two agents.",
                "Furthermore, they fail to exploit structure in the interactions of the agents and hence are severely hampered with respect to scalability when considering more than two agents.",
                "To address these problems with the existing approaches, we propose approximate techniques that provide guarantees on the quality of the solution while focussing on a network of more than two agents.",
                "We first propose the basic SPIDER (Search for Policies In Distributed EnviRonments) algorithm.",
                "There are two key novel features in SPIDER: (i) it is a branch and bound heuristic search technique that uses a MDP-based heuristic function to search for an optimal joint policy; (ii) it exploits network structure of agents by organizing agents into a <br>depth first search</br> (DFS) pseudo tree and takes advantage of the independence in the different branches of the DFS tree.",
                "We then provide three enhancements to improve the efficiency of the basic SPIDER algorithm while providing guarantees on the quality of the solution.",
                "The first enhancement uses abstractions for speedup, but does not sacrifice solution quality.",
                "In particular, it initially performs branch and bound search on abstract policies and then extends to complete policies.",
                "The second enhancement obtains speedups by sacrificing solution quality, but within an input parameter that provides the tolerable expected value difference from the optimal solution.",
                "The third enhancement is again based on bounding the search for efficiency, however with a tolerance parameter that is provided as a percentage of optimal.",
                "We experimented with the sensor network domain presented in Nair et al. [10], a domain representative of an important class of problems with networks of agents working in uncertain environments.",
                "In our experiments, we illustrate that SPIDER dominates an existing global optimal approach called GOA [10], the only known global optimal algorithm with demonstrated experimental results for more than two agents.",
                "Furthermore, we demonstrate that abstraction improves the performance of SPIDER significantly (while providing optimal solutions).",
                "We finally demonstrate a key feature of SPIDER: by utilizing the approximation enhancements it enables principled tradeoffs in run-time versus solution quality. 822 978-81-904262-7-5 (RPS) c 2007 IFAAMAS 2.",
                "DOMAIN: DISTRIBUTED SENSOR NETS Distributed sensor networks are a large, important class of domains that motivate our work.",
                "This paper focuses on a set of target tracking problems that arise in certain types of sensor networks [6] first introduced in [10].",
                "Figure 1 shows a specific problem instance within this type consisting of three sensors.",
                "Here, each sensor node can scan in one of four directions: North, South, East or West (see Figure 1).",
                "To track a target and obtain associated reward, two sensors with overlapping scanning areas must coordinate by scanning the same area simultaneously.",
                "In Figure 1, to track a target in Loc11, sensor1 needs to scan East and sensor2 needs to scan West simultaneously.",
                "Thus, sensors have to act in a coordinated fashion.",
                "We assume that there are two independent targets and that each targets movement is uncertain and unaffected by the sensor agents.",
                "Based on the area it is scanning, each sensor receives observations that can have false positives and false negatives.",
                "The sensors observations and transitions are independent of each others actions e.g.the observations that sensor1 receives are independent of sensor2s actions.",
                "Each agent incurs a cost for scanning whether the target is present or not, but no cost if it turns off.",
                "Given the sensors observational uncertainty, the targets uncertain transitions and the distributed nature of the sensor nodes, these sensor nets provide a useful domains for applying distributed POMDP models.",
                "Figure 1: A 3-chain sensor configuration 3.",
                "BACKGROUND 3.1 Model: Network Distributed POMDP The ND-POMDP model was introduced in [10], motivated by domains such as the sensor networks introduced in Section 2.",
                "It is defined as the tuple S, A, P, Ω, O, R, b , where S = ×1≤i≤nSi × Su is the set of world states.",
                "Si refers to the set of local states of agent i and Su is the set of unaffectable states.",
                "Unaffectable state refers to that part of the world state that cannot be affected by the agents actions, e.g. environmental factors like target locations that no agent can control.",
                "A = ×1≤i≤nAi is the set of joint actions, where Ai is the set of action for agent i. ND-POMDP assumes transition independence, where the transition function is defined as P(s, a, s ) = Pu(su, su) · 1≤i≤n Pi(si, su, ai, si), where a = a1, . . . , an is the joint action performed in state s = s1, . . . , sn, su and s = s1, . . . , sn, su is the resulting state.",
                "Ω = ×1≤i≤nΩi is the set of joint observations where Ωi is the set of observations for agents i. Observational independence is assumed in ND-POMDPs i.e., the joint observation function is defined as O(s, a, ω) = 1≤i≤n Oi(si, su, ai, ωi), where s = s1, . . . , sn, su is the world state that results from the agents performing a = a1, . . . , an in the previous state, and ω = ω1, . . . , ωn ∈ Ω is the observation received in state s. This implies that each agents observation depends only on the unaffectable state, its local action and on its resulting local state.",
                "The reward function, R, is defined as R(s, a) = l Rl(sl1, . . . , slr, su, al1, . . . , alr ), where each l could refer to any sub-group of agents and r = |l|.",
                "Based on the reward function, an interaction hypergraph is constructed.",
                "A hyper-link, l, exists between a subset of agents for all Rl that comprise R. The interaction hypergraph is defined as G = (Ag, E), where the agents, Ag, are the vertices and E = {l|l ⊆ Ag ∧ Rl is a component of R} are the edges.",
                "The initial belief state (distribution over the initial state), b, is defined as b(s) = bu(su) · 1≤i≤n bi(si), where bu and bi refer to the distribution over initial unaffectable state and agent is initial belief state, respectively.",
                "The goal in ND-POMDP is to compute the joint policy π = π1, . . . , πn that maximizes teams expected reward over a finite horizon T starting from the belief state b.",
                "An ND-POMDP is similar to an n-ary Distributed Constraint Optimization Problem (DCOP)[8, 12] where the variable at each node represents the policy selected by an individual agent, πi with the domain of the variable being the set of all local policies, Πi.",
                "The reward component Rl where |l| = 1 can be thought of as a local constraint while the reward component Rl where l > 1 corresponds to a non-local constraint in the constraint graph. 3.2 Algorithm: Global Optimal Algorithm (GOA) In previous work, GOA has been defined as a global optimal algorithm for ND-POMDPs [10].",
                "We will use GOA in our experimental comparisons, since GOA is a state-of-the-art global optimal algorithm, and in fact the only one with experimental results available for networks of more than two agents.",
                "GOA borrows from a global optimal DCOP algorithm called DPOP[12].",
                "GOAs message passing follows that of DPOP.",
                "The first phase is the UTIL propagation, where the utility messages, in this case values of policies, are passed up from the leaves to the root.",
                "Value for a policy at an agent is defined as the sum of best response values from its children and the joint policy reward associated with the parent policy.",
                "Thus, given a policy for a parent node, GOA requires an agent to iterate through all its policies, finding the best response policy and returning the value to the parent - while at the parent node, to find the best policy, an agent requires its children to return their best responses to each of its policies.",
                "This UTIL propagation process is repeated at each level in the tree, until the root exhausts all its policies.",
                "In the second phase of VALUE propagation, where the optimal policies are passed down from the root till the leaves.",
                "GOA takes advantage of the local interactions in the interaction graph, by pruning out unnecessary joint policy evaluations (associated with nodes not connected directly in the tree).",
                "Since the interaction graph captures all the reward interactions among agents and as this algorithm iterates through all the relevant joint policy evaluations, this algorithm yields a globally optimal solution. 4.",
                "SPIDER As mentioned in Section 3.1, an ND-POMDP can be treated as a DCOP, where the goal is to compute a joint policy that maximizes the overall joint reward.",
                "The brute-force technique for computing an optimal policy would be to examine the expected values for all possible joint policies.",
                "The key idea in SPIDER is to avoid computation of expected values for the entire space of joint policies, by utilizing upper bounds on the expected values of policies and the interaction structure of the agents.",
                "Akin to some of the algorithms for DCOP [8, 12], SPIDER has a pre-processing step that constructs a DFS tree corresponding to the given interaction structure.",
                "Note that these DFS trees are pseudo trees [12] that allow links between ancestors and children.",
                "We employ the Maximum Constrained Node (MCN) heuristic used in the DCOP algorithm, ADOPT [8], however other heuristics (such as MLSP heuristic from [7]) can also be employed.",
                "MCN heuristic tries to place agents with more number of constraints at the top of the tree.",
                "This tree governs how the search for the optimal joint polThe Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 823 icy proceeds in SPIDER.",
                "The algorithms presented in this paper are easily extendable to hyper-trees, however for expository purposes, we assume binary trees.",
                "SPIDER is an algorithm for centralized planning and distributed execution in distributed POMDPs.",
                "In this paper, we employ the following notation to denote policies and expected values: Ancestors(i) ⇒ agents from i to the root (not including i).",
                "Tree(i) ⇒ agents in the sub-tree (not including i) for which i is the root. πroot+ ⇒ joint policy of all agents. πi+ ⇒ joint policy of all agents in Tree(i) ∪ i. πi− ⇒ joint policy of agents that are in Ancestors(i). πi ⇒ policy of the ith agent. ˆv[πi, πi− ] ⇒ upper bound on the expected value for πi+ given πi and policies of ancestor agents i.e. πi− . ˆvj[πi, πi− ] ⇒ upper bound on the expected value for πi+ from the jth child. v[πi, πi− ] ⇒ expected value for πi given policies of ancestor agents, πi− . v[πi+ , πi− ] ⇒ expected value for πi+ given policies of ancestor agents, πi− . vj[πi+ , πi− ] ⇒ expected value for πi+ from the jth child.",
                "Figure 2: Execution of SPIDER, an example 4.1 Outline of SPIDER SPIDER is based on the idea of branch and bound search, where the nodes in the search tree represent partial/complete joint policies.",
                "Figure 2 shows an example search tree for the SPIDER algorithm, using an example of the three agent chain.",
                "Before SPIDER begins its search we create a DFS tree (i.e. pseudo tree) from the three agent chain, with the middle agent as the root of this tree.",
                "SPIDER exploits the structure of this DFS tree while engaging in its search.",
                "Note that in our example figure, each agent is assigned a policy with T=2.",
                "Thus, each rounded rectange (search tree node) indicates a partial/complete joint policy, a rectangle indicates an agent and the ovals internal to an agent show its policy.",
                "Heuristic or actual expected value for a joint policy is indicated in the top right corner of the rounded rectangle.",
                "If the number is italicized and underlined, it implies that the actual expected value of the joint policy is provided.",
                "SPIDER begins with no policy assigned to any of the agents (shown in the level 1 of the search tree).",
                "Level 2 of the search tree indicates that the joint policies are sorted based on upper bounds computed for root agents policies.",
                "Level 3 shows one SPIDER search node with a complete joint policy (a policy assigned to each of the agents).",
                "The expected value for this joint policy is used to prune out the nodes in level 2 (the ones with upper bounds < 234) When creating policies for each non-leaf agent i, SPIDER potentially performs two steps: 1.",
                "Obtaining upper bounds and sorting: In this step, agent i computes upper bounds on the expected values, ˆv[πi, πi− ] of the joint policies πi+ corresponding to each of its policy πi and fixed ancestor policies.",
                "An MDP based heuristic is used to compute these upper bounds on the expected values.",
                "Detailed description about this MDP heuristic is provided in Section 4.2.",
                "All policies of agent i, Πi are then sorted based on these upper bounds (also referred to as heuristic values henceforth) in descending order.",
                "Exploration of these policies (in step 2 below) are performed in this descending order.",
                "As indicated in the level 2 of the search tree (of Figure 2), all the joint policies are sorted based on the heuristic values, indicated in the top right corner of each joint policy.",
                "The intuition behind sorting and then exploring policies in descending order of upper bounds, is that the policies with higher upper bounds could yield joint policies with higher expected values. 2.",
                "Exploration and Pruning: Exploration implies computing the best response joint policy πi+,∗ corresponding to fixed ancestor policies of agent i, πi− .",
                "This is performed by iterating through all policies of agent i i.e.",
                "Πi and summing two quantities for each policy: (i) the best response for all of is children (obtained by performing steps 1 and 2 at each of the child nodes); (ii) the expected value obtained by i for fixed policies of ancestors.",
                "Thus, exploration of a policy πi yields actual expected value of a joint policy, πi+ represented as v[πi+ , πi− ].",
                "The policy with the highest expected value is the best response policy.",
                "Pruning refers to avoiding exploring all policies (or computing expected values) at agent i by using the current best expected value, vmax [πi+ , πi− ].",
                "Henceforth, this vmax [πi+ , πi− ] will be referred to as threshold.",
                "A policy, πi need not be explored if the upper bound for that policy, ˆv[πi, πi− ] is less than the threshold.",
                "This is because the expected value for the best joint policy attainable for that policy will be less than the threshold.",
                "On the other hand, when considering a leaf agent, SPIDER computes the best response policy (and consequently its expected value) corresponding to fixed policies of its ancestors, πi− .",
                "This is accomplished by computing expected values for each of the policies (corresponding to fixed policies of ancestors) and selecting the highest expected value policy.",
                "In Figure 2, SPIDER assigns best response policies to leaf agents at level 3.",
                "The policy for the left leaf agent is to perform action East at each time step in the policy, while the policy for the right leaf agent is to perform Off at each time step.",
                "These best response policies from the leaf agents yield an actual expected value of 234 for the complete joint policy.",
                "Algorithm 1 provides the pseudo code for SPIDER.",
                "This algorithm outputs the best joint policy, πi+,∗ (with an expected value greater than threshold) for the agents in Tree(i).",
                "Lines 3-8 compute the best response policy of a leaf agent i, while lines 9-23 computes the best response joint policy for agents in Tree(i).",
                "This best response computation for a non-leaf agent i includes: (a) Sorting of policies (in descending order) based on heuristic values on line 11; (b) Computing best response policies at each of the children for fixed policies of agent i in lines 16-20; and (c) Maintaining 824 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Algorithm 1 SPIDER(i, πi− , threshold) 1: πi+,∗ ← null 2: Πi ← GET-ALL-POLICIES (horizon, Ai, Ωi) 3: if IS-LEAF(i) then 4: for all πi ∈ Πi do 5: v[πi, πi−] ← JOINT-REWARD (πi, πi−) 6: if v[πi, πi−] > threshold then 7: πi+,∗ ← πi 8: threshold ← v[πi, πi−] 9: else 10: children ← CHILDREN (i) 11: ˆΠi ← UPPER-BOUND-SORT(i, Πi, πi−) 12: for all πi ∈ ˆΠi do 13: ˜πi+ ← πi 14: if ˆv[πi, πi−] < threshold then 15: Go to line 12 16: for all j ∈ children do 17: jThres ← threshold − v[πi, πi−]− Σk∈children,k=j ˆvk[πi, πi−] 18: πj+,∗ ← SPIDER(j, πi πi−, jThres) 19: ˜πi+ ← ˜πi+ πj+,∗ 20: ˆvj[πi, πi−] ← v[πj+,∗, πi πi−] 21: if v[˜πi+, πi−] > threshold then 22: threshold ← v[˜πi+, πi−] 23: πi+,∗ ← ˜πi+ 24: return πi+,∗ Algorithm 2 UPPER-BOUND-SORT(i, Πi, πi− ) 1: children ← CHILDREN (i) 2: ˆΠi ← null /* Stores the sorted list */ 3: for all πi ∈ Πi do 4: ˆv[πi, πi−] ← JOINT-REWARD (πi, πi−) 5: for all j ∈ children do 6: ˆvj[πi, πi−] ← UPPER-BOUND(i, j, πi πi−) 7: ˆv[πi, πi−] + ← ˆvj[πi, πi−] 8: ˆΠi ← INSERT-INTO-SORTED (πi, ˆΠi) 9: return ˆΠi best expected value, joint policy in lines 21-23.",
                "Algorithm 2 provides the pseudo code for sorting policies based on the upper bounds on the expected values of joint policies.",
                "Expected value for an agent i consists of two parts: value obtained from ancestors and value obtained from its children.",
                "Line 4 computes the expected value obtained from ancestors of the agent (using JOINT-REWARD function), while lines 5-7 compute the heuristic value from the children.",
                "The sum of these two parts yields an upper bound on the expected value for agent i, and line 8 of the algorithm sorts the policies based on these upper bounds. 4.2 MDP based heuristic function The heuristic function quickly provides an upper bound on the expected value obtainable from the agents in Tree(i).",
                "The subtree of agents is a distributed POMDP in itself and the idea here is to construct a centralized MDP corresponding to the (sub-tree) distributed POMDP and obtain the expected value of the optimal policy for this centralized MDP.",
                "To reiterate this in terms of the agents in DFS tree interaction structure, we assume full observability for the agents in Tree(i) and for fixed policies of the agents in {Ancestors(i) ∪ i}, we compute the joint value ˆv[πi+ , πi− ] .",
                "We use the following notation for presenting the equations for computing upper bounds/heuristic values (for agents i and k): Let Ei− denote the set of links between agents in {Ancestors(i)∪ i} and Tree(i), Ei+ denote the set of links between agents in Tree(i).",
                "Also, if l ∈ Ei− , then l1 is the agent in {Ancestors(i)∪ i} and l2 is the agent in Tree(i), that l connects together.",
                "We first compact the standard notation: ot k =Ok(st+1 k , st+1 u , πk(ωt k), ωt+1 k ) (1) pt k =Pk(st k, st u, πk(ωt k), st+1 k ) · ot k pt u =P(st u, st+1 u ) st l = st l1 , st l2 , st u ; ωt l = ωt l1 , ωt l2 rt l =Rl(st l , πl1 (ωt l1 ), πl2 (ωt l2 )) vt l =V t πl (st l , st u, ωt l1 , ωt l2 ) Depending on the location of agent k in the agent tree we have the following cases: IF k ∈ {Ancestors(i) ∪ i}, ˆpt k = pt k, (2) IF k ∈ Tree(i), ˆpt k = Pk(st k, st u, πk(ωt k), st+1 k ) IF l ∈ Ei− , ˆrt l = max {al2 } Rl(st l , πl1 (ωt l1 ), al2 ) IF l ∈ Ei+ , ˆrt l = max {al1 ,al2 } Rl(st l , al1 , al2 ) The value function for an agent i executing the joint policy πi+ at time η − 1 is provided by the equation: V η−1 πi+ (sη−1 , ωη−1 ) = l∈Ei− vη−1 l + l∈Ei+ vη−1 l (3) where vη−1 l = rη−1 l + ω η l ,sη pη−1 l1 pη−1 l2 pη−1 u vη l Algorithm 3 UPPER-BOUND (i, j, πj− ) 1: val ← 0 2: for all l ∈ Ej− ∪ Ej+ do 3: if l ∈ Ej− then πl1 ← φ 4: for all s0 l do 5: val + ← startBel[s0 l ]· UPPER-BOUND-TIME (i, s0 l , j, πl1 , ) 6: return val Algorithm 4 UPPER-BOUND-TIME (i, st l , j, πl1 , ωt l1 ) 1: maxV al ← −∞ 2: for all al1 , al2 do 3: if l ∈ Ei− and l ∈ Ej− then al1 ← πl1 (ωt l1 ) 4: val ← GET-REWARD(st l , al1 , al2 ) 5: if t < πi.horizon − 1 then 6: for all st+1 l , ωt+1 l1 do 7: futV al←pt u ˆpt l1 ˆpt l2 8: futV al ∗ ← UPPER-BOUND-TIME(st+1 l , j, πl1 , ωt l1 ωt+1 l1 ) 9: val + ← futV al 10: if val > maxV al then maxV al ← val 11: return maxV al Upper bound on the expected value for a link is computed by modifying the equation 3 to reflect the full observability assumption.",
                "This involves removing the observational probability term for agents in Tree(i) and maximizing the future value ˆvη l over the actions of those agents (in Tree(i)).",
                "Thus, the equation for the The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 825 computation of the upper bound on a link l, is as follows: IF l ∈ Ei− , ˆvη−1 l =ˆrη−1 l + max al2 ω η l1 ,s η l ˆpη−1 l1 ˆpη−1 l2 pη−1 u ˆvη l IF l ∈ Ei+ , ˆvη−1 l =ˆrη−1 l + max al1 ,al2 s η l ˆpη−1 l1 ˆpη−1 l2 pη−1 u ˆvη l Algorithm 3 and Algorithm 4 provide the algorithm for computing upper bound for child j of agent i, using the equations descirbed above.",
                "While Algorithm 4 computes the upper bound on a link given the starting state, Algorithm 3 sums the upper bound values computed over each of the links in Ei− ∪ Ei+ . 4.3 Abstraction Algorithm 5 SPIDER-ABS(i, πi− , threshold) 1: πi+,∗ ← null 2: Πi ← GET-POLICIES (<>, 1) 3: if IS-LEAF(i) then 4: for all πi ∈ Πi do 5: absHeuristic ← GET-ABS-HEURISTIC (πi, πi−) 6: absHeuristic ∗ ← (timeHorizon − πi.horizon) 7: if πi.horizon = timeHorizon and πi.absNodes = 0 then 8: v[πi, πi−] ← JOINT-REWARD (πi, πi−) 9: if v[πi, πi−] > threshold then 10: πi+,∗ ← πi; threshold ← v[πi, πi−] 11: else if v[πi, πi−] + absHeuristic > threshold then 12: ˆΠi ← EXTEND-POLICY (πi, πi.absNodes + 1) 13: Πi + ← INSERT-SORTED-POLICIES ( ˆΠi) 14: REMOVE(πi) 15: else 16: children ← CHILDREN (i) 17: Πi ← UPPER-BOUND-SORT(i, Πi, πi−) 18: for all πi ∈ Πi do 19: ˜πi+ ← πi 20: absHeuristic ← GET-ABS-HEURISTIC (πi, πi−) 21: absHeuristic ∗ ← (timeHorizon − πi.horizon) 22: if πi.horizon = timeHorizon and πi.absNodes = 0 then 23: if ˆv[πi, πi−] < threshold and πi.absNodes = 0 then 24: Go to line 19 25: for all j ∈ children do 26: jThres ← threshold − v[πi, πi−]− Σk∈children,k=j ˆvk[πi, πi−] 27: πj+,∗ ← SPIDER(j, πi πi−, jThres) 28: ˜πi+ ← ˜πi+ πj+,∗; ˆvj[πi, πi−] ← v[πj+,∗, πi πi−] 29: if v[˜πi+, πi−] > threshold then 30: threshold ← v[˜πi+, πi−]; πi+,∗ ← ˜πi+ 31: else if ˆv[πi+, πi−] + absHeuristic > threshold then 32: ˆΠi ← EXTEND-POLICY (πi, πi.absNodes + 1) 33: Πi + ← INSERT-SORTED-POLICIES (ˆΠi) 34: REMOVE(πi) 35: return πi+,∗ In SPIDER, the exploration/pruning phase can only begin after the heuristic (or upper bound) computation and sorting for the policies has ended.",
                "We provide an approach to possibly circumvent the exploration of a group of policies based on heuristic computation for one abstract policy, thus leading to an improvement in runtime performance (without loss in solution quality).",
                "The important steps in this technique are defining the abstract policy and how heuristic values are computated for the abstract policies.",
                "In this paper, we propose two types of abstraction: 1.",
                "Horizon Based Abstraction (HBA): Here, the abstract policy is defined as a shorter horizon policy.",
                "It represents a group of longer horizon policies that have the same actions as the abstract policy for times less than or equal to the horizon of the abstract policy.",
                "In Figure 3(a), a T=1 abstract policy that performs East action, represents a group of T=2 policies, that perform East in the first time step.",
                "For HBA, there are two parts to heuristic computation: (a) Computing the upper bound for the horizon of the abstract policy.",
                "This is same as the heuristic computation defined by the GETHEURISTIC() algorithm for SPIDER, however with a shorter time horizon (horizon of the abstract policy). (b) Computing the maximum possible reward that can be accumulated in one time step (using GET-ABS-HEURISTIC()) and multiplying it by the number of time steps to time horizon.",
                "This maximum possible reward (for one time step) is obtained by iterating through all the actions of all the agents in Tree(i) and computing the maximum joint reward for any joint action.",
                "Sum of (a) and (b) is the heuristic value for a HBA abstract policy. 2.",
                "Node Based Abstraction (NBA): Here an abstract policy is obtained by not associating actions to certain nodes of the policy tree.",
                "Unlike in HBA, this implies multiple levels of abstraction.",
                "This is illustrated in Figure 3(b), where there are T=2 policies that do not have an action for observation TP.",
                "These incomplete T=2 policies are abstractions for T=2 complete policies.",
                "Increased levels of abstraction leads to faster computation of a complete joint policy, πroot+ and also to shorter heuristic computation and exploration, pruning phases.",
                "For NBA, the heuristic computation is similar to that of a normal policy, except in cases where there is no action associated with policy nodes.",
                "In such cases, the immediate reward is taken as Rmax (maximum reward for any action).",
                "We combine both the abstraction techniques mentioned above into one technique, SPIDER-ABS.",
                "Algorithm 5 provides the algorithm for this abstraction technique.",
                "For computing optimal joint policy with SPIDER-ABS, a non-leaf agent i initially examines all abstract T=1 policies (line 2) and sorts them based on abstract policy heuristic computations (line 17).",
                "The abstraction horizon is gradually increased and these abstract policies are then explored in descending order of heuristic values and ones that have heuristic values less than the threshold are pruned (lines 23-24).",
                "Exploration in SPIDER-ABS has the same definition as in SPIDER if the policy being explored has a horizon of policy computation which is equal to the actual time horizon and if all the nodes of the policy have an action associated with them (lines 25-30).",
                "However, if those conditions are not met, then it is substituted by a group of policies that it represents (using EXTEND-POLICY () function) (lines 31-32).",
                "EXTEND-POLICY() function is also responsible for initializing the horizon and absNodes of a policy. absNodes represents the number of nodes at the last level in the policy tree, that do not have an action assigned to them.",
                "If πi.absNodes = |Ωi|πi.horizon−1 (i.e. total number of policy nodes possible at πi.horizon) , then πi.absNodes is set to zero and πi.horizon is increased by 1.",
                "Otherwise, πi.absNodes is increased by 1.",
                "Thus, this function combines both HBA and NBA by using the policy variables, horizon and absNodes.",
                "Before substituting the abstract policy with a group of policies, those policies are sorted based on heuristic values (line 33).",
                "Similar type of abstraction based best response computation is adopted at leaf agents (lines 3-14). 4.4 Value ApproXimation (VAX) In this section, we present an approximate enhancement to SPIDER called VAX.",
                "The input to this technique is an approximation parameter , which determines the difference from the optimal solution quality.",
                "This approximation parameter is used at each agent for pruning out joint policies.",
                "The pruning mechanism in SPIDER and SPIDER-Abs dictates that a joint policy be pruned only if the threshold is exactly greater than the heuristic value.",
                "However, the 826 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Figure 3: Example of abstraction for (a) HBA (Horizon Based Abstraction) and (b) NBA (Node Based Abstraction) idea in this technique is to prune out joint a policy if the following condition is satisfied: threshold + > ˆv[πi , πi− ].",
                "Apart from the pruning condition, VAX is the same as SPIDER/SPIDER-ABS.",
                "In the example of Figure 2, if the heuristic value for the second joint policy (or second search tree node) in level 2 were 238 instead of 232, then that policy could not be be pruned using SPIDER or SPIDER-Abs.",
                "However, in VAX with an approximation parameter of 5, the joint policy in consideration would also be pruned.",
                "This is because the threshold (234) at that juncture plus the approximation parameter (5), i.e. 239 would have been greater than the heuristic value for that joint policy (238).",
                "It can be noted from the example (just discussed) that this kind of pruning can lead to fewer explorations and hence lead to an improvement in the overall run-time performance.",
                "However, this can entail a sacrifice in the quality of the solution because this technique can prune out a candidate optimal solution.",
                "A bound on the error introduced by this approximate algorithm as a function of , is provided by Proposition 3. 4.5 Percentage ApproXimation (PAX) In this section, we present the second approximation enhancement over SPIDER called PAX.",
                "Input to this technique is a parameter, δ that represents the minimum percentage of the optimal solution quality that is desired.",
                "Output of this technique is a policy with an expected value that is at least δ% of the optimal solution quality.",
                "A policy is pruned if the following condition is satisfied: threshold > δ 100 ˆv[πi , πi− ].",
                "Like in VAX, the only difference between PAX and SPIDER/SPIDER-ABS is this pruning condition.",
                "Again in Figure 2, if the heuristic value for the second search tree node in level 2 were 238 instead of 232, then PAX with an input parameter of 98% would be able to prune that search tree node (since 98 100 ∗238 < 234).",
                "This type of pruning leads to fewer explorations and hence an improvement in run-time performance, while potentially leading to a loss in quality of the solution.",
                "Proposition 4 provides the bound on quality loss. 4.6 Theoretical Results PROPOSITION 1.",
                "Heuristic provided using the centralized MDP heuristic is admissible.",
                "Proof.",
                "For the value provided by the heuristic to be admissible, it should be an over estimate of the expected value for a joint policy.",
                "Thus, we need to show that: For l ∈ Ei+ ∪ Ei− : ˆvt l ≥ vt l (refer to notation in Section 4.2) We use mathematical induction on t to prove this.",
                "Base case: t = T − 1.",
                "Irrespective of whether l ∈ Ei− or l ∈ Ei+ , ˆrt l is computed by maximizing over all actions of the agents in Tree(i), while rt l is computed for fixed policies of the same agents.",
                "Hence, ˆrt l ≥ rt l and also ˆvt l ≥ vt l .",
                "Assumption: Proposition holds for t = η, where 1 ≤ η < T − 1.",
                "We now have to prove that the proposition holds for t = η − 1.",
                "We show the proof for l ∈ Ei− and similar reasoning can be adopted to prove for l ∈ Ei+ .",
                "The heuristic value function for l ∈ Ei− is provided by the following equation: ˆvη−1 l =ˆrη−1 l + max al2 ω η l1 ,s η l ˆpη−1 l1 ˆpη−1 l2 pη−1 u ˆvη l Rewriting the RHS and using Eqn 2 (in Section 4.2) =ˆrη−1 l + max al2 ω η l1 ,s η l pη−1 u pη−1 l1 ˆpη−1 l2 ˆvη l =ˆrη−1 l + ω η l1 ,s η l pη−1 u pη−1 l1 max al2 ˆpη−1 l2 ˆvη l Since maxal2 ˆpη−1 l2 ˆvη l ≥ ωl2 oη−1 l2 ˆpη−1 l2 ˆvη l and pη−1 l2 = oη−1 l2 ˆpη−1 l2 ≥ˆrη−1 l + ω η l1 ,s η l pη−1 u pη−1 l1 ωl2 pη−1 l2 ˆvη l Since ˆvη l ≥ vη l (from the assumption) ≥ˆrη−1 l + ω η l1 ,s η l pη−1 u pη−1 l1 ωl2 pη−1 l2 vη l Since ˆrη−1 l ≥ rη−1 l (by definition) ≥rη−1 l + ω η l1 ,s η l pη−1 u pη−1 l1 ωl2 pη−1 l2 vη l =rη−1 l + (ω η l ,s η l ) pη−1 u pη−1 l1 pη−1 l2 vη l = vη−1 l Thus proved.",
                "PROPOSITION 2.",
                "SPIDER provides an optimal solution.",
                "Proof.",
                "SPIDER examines all possible joint policies given the interaction structure of the agents.",
                "The only exception being when a joint policy is pruned based on the heuristic value.",
                "Thus, as long as a candidate optimal policy is not pruned, SPIDER will return an optimal policy.",
                "As proved in Proposition 1, the expected value for a joint policy is always an upper bound.",
                "Hence when a joint policy is pruned, it cannot be an optimal solution.",
                "PROPOSITION 3.",
                "Error bound on the solution quality for VAX (implemented over SPIDER-ABS) with an approximation parameter of is ρ , where ρ is the number of leaf nodes in the DFS tree.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 827 Proof.",
                "We prove this proposition using mathematical induction on the depth of the DFS tree.",
                "Base case: depth = 1 (i.e. one node).",
                "Best response is computed by iterating through all policies, Πk.",
                "A policy,πk is pruned if ˆv[πk, πk− ] < threshold + .",
                "Thus the best response policy computed by VAX would be at most away from the optimal best response.",
                "Hence the proposition holds for the base case.",
                "Assumption: Proposition holds for d, where 1 ≤ depth ≤ d. We now have to prove that the proposition holds for d + 1.",
                "Without loss of generality, lets assume that the root node of this tree has k children.",
                "Each of this children is of depth ≤ d, and hence from the assumption, the error introduced in kth child is ρk , where ρk is the number of leaf nodes in kth child of the root.",
                "Therefore, ρ = k ρk, where ρ is the number of leaf nodes in the tree.",
                "In SPIDER-ABS, threshold at the root agent, thresspider = k v[πk+ , πk− ].",
                "However, with VAX the threshold at the root agent will be (in the worst case), threshvax = k v[πk+ , πk− ]− k ρk .",
                "Hence, with VAX a joint policy is pruned at the root agent if ˆv[πroot, πroot− ] < threshvax + ⇒ ˆv[πroot, πroot− ] < threshspider − (( k ρk) − 1) ≤ threshspider − ( k ρk) ≤ threshspider − ρ .",
                "Hence proved.",
                "PROPOSITION 4.",
                "For PAX (implemented over SPIDER-ABS) with an input parameter of δ, the solution quality is at least δ 100 v[πroot+,∗ ], where v[πroot+,∗ ] denotes the optimal solution quality.",
                "Proof.",
                "We prove this proposition using mathematical induction on the depth of the DFS tree.",
                "Base case: depth = 1 (i.e. one node).",
                "Best response is computed by iterating through all policies, Πk.",
                "A policy,πk is pruned if δ 100 ˆv[πk, πk− ] < threshold.",
                "Thus the best response policy computed by PAX would be at least δ 100 times the optimal best response.",
                "Hence the proposition holds for the base case.",
                "Assumption: Proposition holds for d, where 1 ≤ depth ≤ d. We now have to prove that the proposition holds for d + 1.",
                "Without loss of generality, lets assume that the root node of this tree has k children.",
                "Each of this children is of depth ≤ d, and hence from the assumption, the solution quality in the kth child is at least δ 100 v[πk+,∗ , πk− ] for PAX.",
                "With SPIDER-ABS, a joint policy is pruned at the root agent if ˆv[πroot, πroot− ] < k v[πk+,∗ , πk− ].",
                "However with PAX, a joint policy is pruned if δ 100 ˆv[πroot, πroot− ] < k δ 100 v[πk+,∗ , πk− ] ⇒ ˆv[πroot, πroot− ] < k v[πk+,∗ , πk− ].",
                "Since the pruning condition at the root agent in PAX is the same as the one in SPIDER-ABS, there is no error introduced at the root agent and all the error is introduced in the children.",
                "Thus, overall solution quality is at least δ 100 of the optimal solution.",
                "Hence proved. 5.",
                "EXPERIMENTAL RESULTS All our experiments were conducted on the sensor network domain from Section 2.",
                "The five network configurations employed are shown in Figure 4.",
                "Algorithms that we experimented with are GOA, SPIDER, SPIDER-ABS, PAX and VAX.",
                "We compare against GOA because it is the only global optimal algorithm that considers more than two agents.",
                "We performed two sets of experiments: (i) firstly, we compared the run-time performance of the above algorithms and (ii) secondly, we experimented with PAX and VAX to study the tradeoff between run-time and solution quality.",
                "Experiments were terminated after 10000 seconds1 .",
                "Figure 5(a) provides run-time comparisons between the optimal algorithms GOA, SPIDER, SPIDER-Abs and the approximate algorithms, PAX ( of 30) and VAX(δ of 80).",
                "X-axis denotes the 1 Machine specs for all experiments: Intel Xeon 3.6 GHZ processor, 2GB RAM sensor network configuration used, while Y-axis indicates the runtime (on a log-scale).",
                "The time horizon of policy computation was 3.",
                "For each configuration (3-chain, 4-chain, 4-star and 5-star), there are five bars indicating the time taken by GOA, SPIDER, SPIDERAbs, PAX and VAX.",
                "GOA did not terminate within the time limit for 4-star and 5-star configurations.",
                "SPIDER-Abs dominated the SPIDER and GOA for all the configurations.",
                "For instance, in the 3chain configuration, SPIDER-ABS provides 230-fold speedup over GOA and 2-fold speedup over SPIDER and for the 4-chain configuration it provides 58-fold speedup over GOA and 2-fold speedup over SPIDER.",
                "The two approximation approaches, VAX and PAX provided further improvement in performance over SPIDER-Abs.",
                "For instance, in the 5-star configuration VAX provides a 15-fold speedup and PAX provides a 8-fold speedup over SPIDER-Abs.",
                "Figures 5(b) provides a comparison of the solution quality obtained using the different algorithms for the problems tested in Figure 5(a).",
                "X-axis denotes the sensor network configuration while Y-axis indicates the solution quality.",
                "Since GOA, SPIDER, and SPIDER-Abs are all global optimal algorithms, the solution quality is the same for all those algorithms.",
                "For 5-P configuration, the global optimal algorithms did not terminate within the limit of 10000 seconds, so the bar for optimal quality indicates an upper bound on the optimal solution quality.",
                "With both the approximations, we obtained a solution quality that was close to the optimal solution quality.",
                "In 3-chain and 4-star configurations, it is remarkable that both PAX and VAX obtained almost the same actual quality as the global optimal algorithms, despite the approximation parameter and δ.",
                "For other configurations as well, the loss in quality was less than 20% of the optimal solution quality.",
                "Figure 5(c) provides the time to solution with PAX (for varying epsilons).",
                "X-axis denotes the approximation parameter, δ (percentage to optimal) used, while Y-axis denotes the time taken to compute the solution (on a log-scale).",
                "The time horizon for all the configurations was 4.",
                "As δ was decreased from 70 to 30, the time to solution decreased drastically.",
                "For instance, in the 3-chain case there was a total speedup of 170-fold when the δ was changed from 70 to 30.",
                "Interestingly, even with a low δ of 30%, the actual solution quality remained equal to the one obtained at 70%.",
                "Figure 5(d) provides the time to solution for all the configurations with VAX (for varying epsilons).",
                "X-axis denotes the approximation parameter, used, while Y-axis denotes the time taken to compute the solution (on a log-scale).",
                "The time horizon for all the configurations was 4.",
                "As was increased, the time to solution decreased drastically.",
                "For instance, in the 4-star case there was a total speedup of 73-fold when the was changed from 60 to 140.",
                "Again, the actual solution quality did not change with varying epsilon.",
                "Figure 4: Sensor network configurations 828 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Figure 5: Comparison of GOA, SPIDER, SPIDER-Abs and VAX for T = 3 on (a) Runtime and (b) Solution quality; (c) Time to solution for PAX with varying percentage to optimal for T=4 (d) Time to solution for VAX with varying epsilon for T=4 6.",
                "SUMMARY AND RELATED WORK This paper presents four algorithms SPIDER, SPIDER-ABS, PAX and VAX that provide a novel combination of features for policy search in distributed POMDPs: (i) exploiting agent interaction structure given a network of agents (i.e. easier scale-up to larger number of agents); (ii) using branch and bound search with an MDP based heuristic function; (iii) utilizing abstraction to improve runtime performance without sacrificing solution quality; (iv) providing a priori percentage bounds on quality of solutions using PAX; and (v) providing expected value bounds on the quality of solutions using VAX.",
                "These features allow for systematic tradeoff of solution quality for run-time in networks of agents operating under uncertainty.",
                "Experimental results show orders of magnitude improvement in performance over previous global optimal algorithms.",
                "Researchers have typically employed two types of techniques for solving distributed POMDPs.",
                "The first set of techniques compute global optimal solutions.",
                "Hansen et al. [5] present an algorithm based on dynamic programming and iterated elimination of dominant policies, that provides optimal solutions for distributed POMDPs.",
                "Szer et al. [13] provide an optimal heuristic search method for solving Decentralized POMDPs.",
                "This algorithm is based on the combination of a classical heuristic search algorithm, A∗ and decentralized control theory.",
                "The key differences between SPIDER and MAA* are: (a) Enhancements to SPIDER (VAX and PAX) provide for quality guaranteed approximations, while MAA* is a global optimal algorithm and hence involves significant computational complexity; (b) Due to MAA*s inability to exploit interaction structure, it was illustrated only with two agents.",
                "However, SPIDER has been illustrated for networks of agents; and (c) SPIDER explores the joint policy one agent at a time, while MAA* expands it one time step at a time (simultaneously for all the agents).",
                "The second set of techniques seek approximate policies.",
                "EmeryMontemerlo et al. [4] approximate POSGs as a series of one-step Bayesian games using heuristics to approximate future value, trading off limited lookahead for computational efficiency, resulting in locally optimal policies (with respect to the selected heuristic).",
                "Nair et al. [9]s JESP algorithm uses dynamic programming to reach a local optimum solution for finite horizon decentralized POMDPs.",
                "Peshkin et al. [11] and Bernstein et al. [2] are examples of policy search techniques that search for locally optimal policies.",
                "Though all the above techniques improve the efficiency of policy computation considerably, they are unable to provide error bounds on the quality of the solution.",
                "This aspect of quality bounds differentiates SPIDER from all the above techniques.",
                "Acknowledgements.",
                "This material is based upon work supported by the Defense Advanced Research Projects Agency (DARPA), through the Department of the Interior, NBC, Acquisition Services Division under Contract No.",
                "NBCHD030010.",
                "The views and conclusions contained in this document are those of the authors, and should not be interpreted as representing the official policies, either expressed or implied, of the Defense Advanced Research Projects Agency or the U.S. Government. 7.",
                "REFERENCES [1] R. Becker, S. Zilberstein, V. Lesser, and C.V. Goldman.",
                "Solving transition independent decentralized Markov decision processes.",
                "JAIR, 22:423-455, 2004. [2] D. S. Bernstein, E.A.",
                "Hansen, and S. Zilberstein.",
                "Bounded policy iteration for decentralized POMDPs.",
                "In IJCAI, 2005. [3] D. S. Bernstein, S. Zilberstein, and N. Immerman.",
                "The complexity of decentralized control of MDPs.",
                "In UAI, 2000. [4] R. Emery-Montemerlo, G. Gordon, J. Schneider, and S. Thrun.",
                "Approximate solutions for partially observable stochastic games with common payoffs.",
                "In AAMAS, 2004. [5] E. Hansen, D. Bernstein, and S. Zilberstein.",
                "Dynamic programming for partially observable stochastic games.",
                "In AAAI, 2004. [6] V. Lesser, C. Ortiz, and M. Tambe.",
                "Distributed sensor nets: A multiagent perspective.",
                "Kluwer, 2003. [7] R. Maheswaran, M. Tambe, E. Bowring, J. Pearce, and P. Varakantham.",
                "Taking dcop to the real world : Efficient complete solutions for distributed event scheduling.",
                "In AAMAS, 2004. [8] P. J. Modi, W. Shen, M. Tambe, and M. Yokoo.",
                "An asynchronous complete method for distributed constraint optimization.",
                "In AAMAS, 2003. [9] R. Nair, D. Pynadath, M. Yokoo, M. Tambe, and S. Marsella.",
                "Taming decentralized POMDPs: Towards efficient policy computation for multiagent settings.",
                "In IJCAI, 2003. [10] R. Nair, P. Varakantham, M. Tambe, and M. Yokoo.",
                "Networked distributed POMDPs: A synthesis of distributed constraint optimization and POMDPs.",
                "In AAAI, 2005. [11] L. Peshkin, N. Meuleau, K.-E. Kim, and L. Kaelbling.",
                "Learning to cooperate via policy search.",
                "In UAI, 2000. [12] A. Petcu and B. Faltings.",
                "A scalable method for multiagent constraint optimization.",
                "In IJCAI, 2005. [13] D. Szer, F. Charpillet, and S. Zilberstein.",
                "MAA*: A heuristic search algorithm for solving decentralized POMDPs.",
                "In IJCAI, 2005.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 829"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Hay dos características novedosas clave en Spider: (i) Es una rama y una técnica de búsqueda heurística vinculada que utiliza una función heurística basada en MDP para buscar una política conjunta óptima;(ii) Explota la estructura de red de los agentes organizando a los agentes en un pseudo árbol de \"Primera búsqueda de profundidad\" (DFS) y aprovecha la independencia en las diferentes ramas del árbol DFS."
            ],
            "translated_text": "",
            "candidates": [
                "profundidad Primera búsqueda",
                "Primera búsqueda de profundidad"
            ],
            "error": []
        },
        "distributed sensor network": {
            "translated_key": "red de sensores distribuidos",
            "is_in_text": false,
            "original_annotated_sentences": [
                "Letting loose a SPIDER on a network of POMDPs: Generating quality guaranteed policies Pradeep Varakantham, Janusz Marecki, Yuichi Yabu∗ , Milind Tambe, Makoto Yokoo∗ University of Southern California, Los Angeles, CA 90089, {varakant, marecki, tambe}@usc.edu ∗ Dept.",
                "of Intelligent Systems, Kyushu University, Fukuoka, 812-8581 Japan, yokoo@is.kyushu-u.ac.jp ABSTRACT Distributed Partially Observable Markov Decision Problems (Distributed POMDPs) are a popular approach for modeling multi-agent systems acting in uncertain domains.",
                "Given the significant complexity of solving distributed POMDPs, particularly as we scale up the numbers of agents, one popular approach has focused on approximate solutions.",
                "Though this approach is efficient, the algorithms within this approach do not provide any guarantees on solution quality.",
                "A second less popular approach focuses on global optimality, but typical results are available only for two agents, and also at considerable computational cost.",
                "This paper overcomes the limitations of both these approaches by providing SPIDER, a novel combination of three key features for policy generation in distributed POMDPs: (i) it exploits agent interaction structure given a network of agents (i.e. allowing easier scale-up to larger number of agents); (ii) it uses a combination of heuristics to speedup policy search; and (iii) it allows quality guaranteed approximations, allowing a systematic tradeoff of solution quality for time.",
                "Experimental results show orders of magnitude improvement in performance when compared with previous global optimal algorithms.",
                "Categories and Subject Descriptors I.2.11 [Artificial Intelligence]: Distributed Artificial IntelligenceMulti-agent Systems General Terms Algorithms, Theory 1.",
                "INTRODUCTION Distributed Partially Observable Markov Decision Problems (Distributed POMDPs) are emerging as a popular approach for modeling sequential decision making in teams operating under uncertainty [9, 4, 1, 2, 13].",
                "The uncertainty arises on account of nondeterminism in the outcomes of actions and because the world state may only be partially (or incorrectly) observable.",
                "Unfortunately, as shown by Bernstein et al. [3], the problem of finding the optimal joint policy for general distributed POMDPs is NEXP-Complete.",
                "Researchers have attempted two different types of approaches towards solving these models.",
                "The first category consists of highly efficient approximate techniques, that may not reach globally optimal solutions [2, 9, 11].",
                "The key problem with these techniques has been their inability to provide any guarantees on the quality of the solution.",
                "In contrast, the second less popular category of approaches has focused on a global optimal result [13, 5, 10].",
                "Though these approaches obtain optimal solutions, they typically consider only two agents.",
                "Furthermore, they fail to exploit structure in the interactions of the agents and hence are severely hampered with respect to scalability when considering more than two agents.",
                "To address these problems with the existing approaches, we propose approximate techniques that provide guarantees on the quality of the solution while focussing on a network of more than two agents.",
                "We first propose the basic SPIDER (Search for Policies In Distributed EnviRonments) algorithm.",
                "There are two key novel features in SPIDER: (i) it is a branch and bound heuristic search technique that uses a MDP-based heuristic function to search for an optimal joint policy; (ii) it exploits network structure of agents by organizing agents into a Depth First Search (DFS) pseudo tree and takes advantage of the independence in the different branches of the DFS tree.",
                "We then provide three enhancements to improve the efficiency of the basic SPIDER algorithm while providing guarantees on the quality of the solution.",
                "The first enhancement uses abstractions for speedup, but does not sacrifice solution quality.",
                "In particular, it initially performs branch and bound search on abstract policies and then extends to complete policies.",
                "The second enhancement obtains speedups by sacrificing solution quality, but within an input parameter that provides the tolerable expected value difference from the optimal solution.",
                "The third enhancement is again based on bounding the search for efficiency, however with a tolerance parameter that is provided as a percentage of optimal.",
                "We experimented with the sensor network domain presented in Nair et al. [10], a domain representative of an important class of problems with networks of agents working in uncertain environments.",
                "In our experiments, we illustrate that SPIDER dominates an existing global optimal approach called GOA [10], the only known global optimal algorithm with demonstrated experimental results for more than two agents.",
                "Furthermore, we demonstrate that abstraction improves the performance of SPIDER significantly (while providing optimal solutions).",
                "We finally demonstrate a key feature of SPIDER: by utilizing the approximation enhancements it enables principled tradeoffs in run-time versus solution quality. 822 978-81-904262-7-5 (RPS) c 2007 IFAAMAS 2.",
                "DOMAIN: DISTRIBUTED SENSOR NETS Distributed sensor networks are a large, important class of domains that motivate our work.",
                "This paper focuses on a set of target tracking problems that arise in certain types of sensor networks [6] first introduced in [10].",
                "Figure 1 shows a specific problem instance within this type consisting of three sensors.",
                "Here, each sensor node can scan in one of four directions: North, South, East or West (see Figure 1).",
                "To track a target and obtain associated reward, two sensors with overlapping scanning areas must coordinate by scanning the same area simultaneously.",
                "In Figure 1, to track a target in Loc11, sensor1 needs to scan East and sensor2 needs to scan West simultaneously.",
                "Thus, sensors have to act in a coordinated fashion.",
                "We assume that there are two independent targets and that each targets movement is uncertain and unaffected by the sensor agents.",
                "Based on the area it is scanning, each sensor receives observations that can have false positives and false negatives.",
                "The sensors observations and transitions are independent of each others actions e.g.the observations that sensor1 receives are independent of sensor2s actions.",
                "Each agent incurs a cost for scanning whether the target is present or not, but no cost if it turns off.",
                "Given the sensors observational uncertainty, the targets uncertain transitions and the distributed nature of the sensor nodes, these sensor nets provide a useful domains for applying distributed POMDP models.",
                "Figure 1: A 3-chain sensor configuration 3.",
                "BACKGROUND 3.1 Model: Network Distributed POMDP The ND-POMDP model was introduced in [10], motivated by domains such as the sensor networks introduced in Section 2.",
                "It is defined as the tuple S, A, P, Ω, O, R, b , where S = ×1≤i≤nSi × Su is the set of world states.",
                "Si refers to the set of local states of agent i and Su is the set of unaffectable states.",
                "Unaffectable state refers to that part of the world state that cannot be affected by the agents actions, e.g. environmental factors like target locations that no agent can control.",
                "A = ×1≤i≤nAi is the set of joint actions, where Ai is the set of action for agent i. ND-POMDP assumes transition independence, where the transition function is defined as P(s, a, s ) = Pu(su, su) · 1≤i≤n Pi(si, su, ai, si), where a = a1, . . . , an is the joint action performed in state s = s1, . . . , sn, su and s = s1, . . . , sn, su is the resulting state.",
                "Ω = ×1≤i≤nΩi is the set of joint observations where Ωi is the set of observations for agents i. Observational independence is assumed in ND-POMDPs i.e., the joint observation function is defined as O(s, a, ω) = 1≤i≤n Oi(si, su, ai, ωi), where s = s1, . . . , sn, su is the world state that results from the agents performing a = a1, . . . , an in the previous state, and ω = ω1, . . . , ωn ∈ Ω is the observation received in state s. This implies that each agents observation depends only on the unaffectable state, its local action and on its resulting local state.",
                "The reward function, R, is defined as R(s, a) = l Rl(sl1, . . . , slr, su, al1, . . . , alr ), where each l could refer to any sub-group of agents and r = |l|.",
                "Based on the reward function, an interaction hypergraph is constructed.",
                "A hyper-link, l, exists between a subset of agents for all Rl that comprise R. The interaction hypergraph is defined as G = (Ag, E), where the agents, Ag, are the vertices and E = {l|l ⊆ Ag ∧ Rl is a component of R} are the edges.",
                "The initial belief state (distribution over the initial state), b, is defined as b(s) = bu(su) · 1≤i≤n bi(si), where bu and bi refer to the distribution over initial unaffectable state and agent is initial belief state, respectively.",
                "The goal in ND-POMDP is to compute the joint policy π = π1, . . . , πn that maximizes teams expected reward over a finite horizon T starting from the belief state b.",
                "An ND-POMDP is similar to an n-ary Distributed Constraint Optimization Problem (DCOP)[8, 12] where the variable at each node represents the policy selected by an individual agent, πi with the domain of the variable being the set of all local policies, Πi.",
                "The reward component Rl where |l| = 1 can be thought of as a local constraint while the reward component Rl where l > 1 corresponds to a non-local constraint in the constraint graph. 3.2 Algorithm: Global Optimal Algorithm (GOA) In previous work, GOA has been defined as a global optimal algorithm for ND-POMDPs [10].",
                "We will use GOA in our experimental comparisons, since GOA is a state-of-the-art global optimal algorithm, and in fact the only one with experimental results available for networks of more than two agents.",
                "GOA borrows from a global optimal DCOP algorithm called DPOP[12].",
                "GOAs message passing follows that of DPOP.",
                "The first phase is the UTIL propagation, where the utility messages, in this case values of policies, are passed up from the leaves to the root.",
                "Value for a policy at an agent is defined as the sum of best response values from its children and the joint policy reward associated with the parent policy.",
                "Thus, given a policy for a parent node, GOA requires an agent to iterate through all its policies, finding the best response policy and returning the value to the parent - while at the parent node, to find the best policy, an agent requires its children to return their best responses to each of its policies.",
                "This UTIL propagation process is repeated at each level in the tree, until the root exhausts all its policies.",
                "In the second phase of VALUE propagation, where the optimal policies are passed down from the root till the leaves.",
                "GOA takes advantage of the local interactions in the interaction graph, by pruning out unnecessary joint policy evaluations (associated with nodes not connected directly in the tree).",
                "Since the interaction graph captures all the reward interactions among agents and as this algorithm iterates through all the relevant joint policy evaluations, this algorithm yields a globally optimal solution. 4.",
                "SPIDER As mentioned in Section 3.1, an ND-POMDP can be treated as a DCOP, where the goal is to compute a joint policy that maximizes the overall joint reward.",
                "The brute-force technique for computing an optimal policy would be to examine the expected values for all possible joint policies.",
                "The key idea in SPIDER is to avoid computation of expected values for the entire space of joint policies, by utilizing upper bounds on the expected values of policies and the interaction structure of the agents.",
                "Akin to some of the algorithms for DCOP [8, 12], SPIDER has a pre-processing step that constructs a DFS tree corresponding to the given interaction structure.",
                "Note that these DFS trees are pseudo trees [12] that allow links between ancestors and children.",
                "We employ the Maximum Constrained Node (MCN) heuristic used in the DCOP algorithm, ADOPT [8], however other heuristics (such as MLSP heuristic from [7]) can also be employed.",
                "MCN heuristic tries to place agents with more number of constraints at the top of the tree.",
                "This tree governs how the search for the optimal joint polThe Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 823 icy proceeds in SPIDER.",
                "The algorithms presented in this paper are easily extendable to hyper-trees, however for expository purposes, we assume binary trees.",
                "SPIDER is an algorithm for centralized planning and distributed execution in distributed POMDPs.",
                "In this paper, we employ the following notation to denote policies and expected values: Ancestors(i) ⇒ agents from i to the root (not including i).",
                "Tree(i) ⇒ agents in the sub-tree (not including i) for which i is the root. πroot+ ⇒ joint policy of all agents. πi+ ⇒ joint policy of all agents in Tree(i) ∪ i. πi− ⇒ joint policy of agents that are in Ancestors(i). πi ⇒ policy of the ith agent. ˆv[πi, πi− ] ⇒ upper bound on the expected value for πi+ given πi and policies of ancestor agents i.e. πi− . ˆvj[πi, πi− ] ⇒ upper bound on the expected value for πi+ from the jth child. v[πi, πi− ] ⇒ expected value for πi given policies of ancestor agents, πi− . v[πi+ , πi− ] ⇒ expected value for πi+ given policies of ancestor agents, πi− . vj[πi+ , πi− ] ⇒ expected value for πi+ from the jth child.",
                "Figure 2: Execution of SPIDER, an example 4.1 Outline of SPIDER SPIDER is based on the idea of branch and bound search, where the nodes in the search tree represent partial/complete joint policies.",
                "Figure 2 shows an example search tree for the SPIDER algorithm, using an example of the three agent chain.",
                "Before SPIDER begins its search we create a DFS tree (i.e. pseudo tree) from the three agent chain, with the middle agent as the root of this tree.",
                "SPIDER exploits the structure of this DFS tree while engaging in its search.",
                "Note that in our example figure, each agent is assigned a policy with T=2.",
                "Thus, each rounded rectange (search tree node) indicates a partial/complete joint policy, a rectangle indicates an agent and the ovals internal to an agent show its policy.",
                "Heuristic or actual expected value for a joint policy is indicated in the top right corner of the rounded rectangle.",
                "If the number is italicized and underlined, it implies that the actual expected value of the joint policy is provided.",
                "SPIDER begins with no policy assigned to any of the agents (shown in the level 1 of the search tree).",
                "Level 2 of the search tree indicates that the joint policies are sorted based on upper bounds computed for root agents policies.",
                "Level 3 shows one SPIDER search node with a complete joint policy (a policy assigned to each of the agents).",
                "The expected value for this joint policy is used to prune out the nodes in level 2 (the ones with upper bounds < 234) When creating policies for each non-leaf agent i, SPIDER potentially performs two steps: 1.",
                "Obtaining upper bounds and sorting: In this step, agent i computes upper bounds on the expected values, ˆv[πi, πi− ] of the joint policies πi+ corresponding to each of its policy πi and fixed ancestor policies.",
                "An MDP based heuristic is used to compute these upper bounds on the expected values.",
                "Detailed description about this MDP heuristic is provided in Section 4.2.",
                "All policies of agent i, Πi are then sorted based on these upper bounds (also referred to as heuristic values henceforth) in descending order.",
                "Exploration of these policies (in step 2 below) are performed in this descending order.",
                "As indicated in the level 2 of the search tree (of Figure 2), all the joint policies are sorted based on the heuristic values, indicated in the top right corner of each joint policy.",
                "The intuition behind sorting and then exploring policies in descending order of upper bounds, is that the policies with higher upper bounds could yield joint policies with higher expected values. 2.",
                "Exploration and Pruning: Exploration implies computing the best response joint policy πi+,∗ corresponding to fixed ancestor policies of agent i, πi− .",
                "This is performed by iterating through all policies of agent i i.e.",
                "Πi and summing two quantities for each policy: (i) the best response for all of is children (obtained by performing steps 1 and 2 at each of the child nodes); (ii) the expected value obtained by i for fixed policies of ancestors.",
                "Thus, exploration of a policy πi yields actual expected value of a joint policy, πi+ represented as v[πi+ , πi− ].",
                "The policy with the highest expected value is the best response policy.",
                "Pruning refers to avoiding exploring all policies (or computing expected values) at agent i by using the current best expected value, vmax [πi+ , πi− ].",
                "Henceforth, this vmax [πi+ , πi− ] will be referred to as threshold.",
                "A policy, πi need not be explored if the upper bound for that policy, ˆv[πi, πi− ] is less than the threshold.",
                "This is because the expected value for the best joint policy attainable for that policy will be less than the threshold.",
                "On the other hand, when considering a leaf agent, SPIDER computes the best response policy (and consequently its expected value) corresponding to fixed policies of its ancestors, πi− .",
                "This is accomplished by computing expected values for each of the policies (corresponding to fixed policies of ancestors) and selecting the highest expected value policy.",
                "In Figure 2, SPIDER assigns best response policies to leaf agents at level 3.",
                "The policy for the left leaf agent is to perform action East at each time step in the policy, while the policy for the right leaf agent is to perform Off at each time step.",
                "These best response policies from the leaf agents yield an actual expected value of 234 for the complete joint policy.",
                "Algorithm 1 provides the pseudo code for SPIDER.",
                "This algorithm outputs the best joint policy, πi+,∗ (with an expected value greater than threshold) for the agents in Tree(i).",
                "Lines 3-8 compute the best response policy of a leaf agent i, while lines 9-23 computes the best response joint policy for agents in Tree(i).",
                "This best response computation for a non-leaf agent i includes: (a) Sorting of policies (in descending order) based on heuristic values on line 11; (b) Computing best response policies at each of the children for fixed policies of agent i in lines 16-20; and (c) Maintaining 824 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Algorithm 1 SPIDER(i, πi− , threshold) 1: πi+,∗ ← null 2: Πi ← GET-ALL-POLICIES (horizon, Ai, Ωi) 3: if IS-LEAF(i) then 4: for all πi ∈ Πi do 5: v[πi, πi−] ← JOINT-REWARD (πi, πi−) 6: if v[πi, πi−] > threshold then 7: πi+,∗ ← πi 8: threshold ← v[πi, πi−] 9: else 10: children ← CHILDREN (i) 11: ˆΠi ← UPPER-BOUND-SORT(i, Πi, πi−) 12: for all πi ∈ ˆΠi do 13: ˜πi+ ← πi 14: if ˆv[πi, πi−] < threshold then 15: Go to line 12 16: for all j ∈ children do 17: jThres ← threshold − v[πi, πi−]− Σk∈children,k=j ˆvk[πi, πi−] 18: πj+,∗ ← SPIDER(j, πi πi−, jThres) 19: ˜πi+ ← ˜πi+ πj+,∗ 20: ˆvj[πi, πi−] ← v[πj+,∗, πi πi−] 21: if v[˜πi+, πi−] > threshold then 22: threshold ← v[˜πi+, πi−] 23: πi+,∗ ← ˜πi+ 24: return πi+,∗ Algorithm 2 UPPER-BOUND-SORT(i, Πi, πi− ) 1: children ← CHILDREN (i) 2: ˆΠi ← null /* Stores the sorted list */ 3: for all πi ∈ Πi do 4: ˆv[πi, πi−] ← JOINT-REWARD (πi, πi−) 5: for all j ∈ children do 6: ˆvj[πi, πi−] ← UPPER-BOUND(i, j, πi πi−) 7: ˆv[πi, πi−] + ← ˆvj[πi, πi−] 8: ˆΠi ← INSERT-INTO-SORTED (πi, ˆΠi) 9: return ˆΠi best expected value, joint policy in lines 21-23.",
                "Algorithm 2 provides the pseudo code for sorting policies based on the upper bounds on the expected values of joint policies.",
                "Expected value for an agent i consists of two parts: value obtained from ancestors and value obtained from its children.",
                "Line 4 computes the expected value obtained from ancestors of the agent (using JOINT-REWARD function), while lines 5-7 compute the heuristic value from the children.",
                "The sum of these two parts yields an upper bound on the expected value for agent i, and line 8 of the algorithm sorts the policies based on these upper bounds. 4.2 MDP based heuristic function The heuristic function quickly provides an upper bound on the expected value obtainable from the agents in Tree(i).",
                "The subtree of agents is a distributed POMDP in itself and the idea here is to construct a centralized MDP corresponding to the (sub-tree) distributed POMDP and obtain the expected value of the optimal policy for this centralized MDP.",
                "To reiterate this in terms of the agents in DFS tree interaction structure, we assume full observability for the agents in Tree(i) and for fixed policies of the agents in {Ancestors(i) ∪ i}, we compute the joint value ˆv[πi+ , πi− ] .",
                "We use the following notation for presenting the equations for computing upper bounds/heuristic values (for agents i and k): Let Ei− denote the set of links between agents in {Ancestors(i)∪ i} and Tree(i), Ei+ denote the set of links between agents in Tree(i).",
                "Also, if l ∈ Ei− , then l1 is the agent in {Ancestors(i)∪ i} and l2 is the agent in Tree(i), that l connects together.",
                "We first compact the standard notation: ot k =Ok(st+1 k , st+1 u , πk(ωt k), ωt+1 k ) (1) pt k =Pk(st k, st u, πk(ωt k), st+1 k ) · ot k pt u =P(st u, st+1 u ) st l = st l1 , st l2 , st u ; ωt l = ωt l1 , ωt l2 rt l =Rl(st l , πl1 (ωt l1 ), πl2 (ωt l2 )) vt l =V t πl (st l , st u, ωt l1 , ωt l2 ) Depending on the location of agent k in the agent tree we have the following cases: IF k ∈ {Ancestors(i) ∪ i}, ˆpt k = pt k, (2) IF k ∈ Tree(i), ˆpt k = Pk(st k, st u, πk(ωt k), st+1 k ) IF l ∈ Ei− , ˆrt l = max {al2 } Rl(st l , πl1 (ωt l1 ), al2 ) IF l ∈ Ei+ , ˆrt l = max {al1 ,al2 } Rl(st l , al1 , al2 ) The value function for an agent i executing the joint policy πi+ at time η − 1 is provided by the equation: V η−1 πi+ (sη−1 , ωη−1 ) = l∈Ei− vη−1 l + l∈Ei+ vη−1 l (3) where vη−1 l = rη−1 l + ω η l ,sη pη−1 l1 pη−1 l2 pη−1 u vη l Algorithm 3 UPPER-BOUND (i, j, πj− ) 1: val ← 0 2: for all l ∈ Ej− ∪ Ej+ do 3: if l ∈ Ej− then πl1 ← φ 4: for all s0 l do 5: val + ← startBel[s0 l ]· UPPER-BOUND-TIME (i, s0 l , j, πl1 , ) 6: return val Algorithm 4 UPPER-BOUND-TIME (i, st l , j, πl1 , ωt l1 ) 1: maxV al ← −∞ 2: for all al1 , al2 do 3: if l ∈ Ei− and l ∈ Ej− then al1 ← πl1 (ωt l1 ) 4: val ← GET-REWARD(st l , al1 , al2 ) 5: if t < πi.horizon − 1 then 6: for all st+1 l , ωt+1 l1 do 7: futV al←pt u ˆpt l1 ˆpt l2 8: futV al ∗ ← UPPER-BOUND-TIME(st+1 l , j, πl1 , ωt l1 ωt+1 l1 ) 9: val + ← futV al 10: if val > maxV al then maxV al ← val 11: return maxV al Upper bound on the expected value for a link is computed by modifying the equation 3 to reflect the full observability assumption.",
                "This involves removing the observational probability term for agents in Tree(i) and maximizing the future value ˆvη l over the actions of those agents (in Tree(i)).",
                "Thus, the equation for the The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 825 computation of the upper bound on a link l, is as follows: IF l ∈ Ei− , ˆvη−1 l =ˆrη−1 l + max al2 ω η l1 ,s η l ˆpη−1 l1 ˆpη−1 l2 pη−1 u ˆvη l IF l ∈ Ei+ , ˆvη−1 l =ˆrη−1 l + max al1 ,al2 s η l ˆpη−1 l1 ˆpη−1 l2 pη−1 u ˆvη l Algorithm 3 and Algorithm 4 provide the algorithm for computing upper bound for child j of agent i, using the equations descirbed above.",
                "While Algorithm 4 computes the upper bound on a link given the starting state, Algorithm 3 sums the upper bound values computed over each of the links in Ei− ∪ Ei+ . 4.3 Abstraction Algorithm 5 SPIDER-ABS(i, πi− , threshold) 1: πi+,∗ ← null 2: Πi ← GET-POLICIES (<>, 1) 3: if IS-LEAF(i) then 4: for all πi ∈ Πi do 5: absHeuristic ← GET-ABS-HEURISTIC (πi, πi−) 6: absHeuristic ∗ ← (timeHorizon − πi.horizon) 7: if πi.horizon = timeHorizon and πi.absNodes = 0 then 8: v[πi, πi−] ← JOINT-REWARD (πi, πi−) 9: if v[πi, πi−] > threshold then 10: πi+,∗ ← πi; threshold ← v[πi, πi−] 11: else if v[πi, πi−] + absHeuristic > threshold then 12: ˆΠi ← EXTEND-POLICY (πi, πi.absNodes + 1) 13: Πi + ← INSERT-SORTED-POLICIES ( ˆΠi) 14: REMOVE(πi) 15: else 16: children ← CHILDREN (i) 17: Πi ← UPPER-BOUND-SORT(i, Πi, πi−) 18: for all πi ∈ Πi do 19: ˜πi+ ← πi 20: absHeuristic ← GET-ABS-HEURISTIC (πi, πi−) 21: absHeuristic ∗ ← (timeHorizon − πi.horizon) 22: if πi.horizon = timeHorizon and πi.absNodes = 0 then 23: if ˆv[πi, πi−] < threshold and πi.absNodes = 0 then 24: Go to line 19 25: for all j ∈ children do 26: jThres ← threshold − v[πi, πi−]− Σk∈children,k=j ˆvk[πi, πi−] 27: πj+,∗ ← SPIDER(j, πi πi−, jThres) 28: ˜πi+ ← ˜πi+ πj+,∗; ˆvj[πi, πi−] ← v[πj+,∗, πi πi−] 29: if v[˜πi+, πi−] > threshold then 30: threshold ← v[˜πi+, πi−]; πi+,∗ ← ˜πi+ 31: else if ˆv[πi+, πi−] + absHeuristic > threshold then 32: ˆΠi ← EXTEND-POLICY (πi, πi.absNodes + 1) 33: Πi + ← INSERT-SORTED-POLICIES (ˆΠi) 34: REMOVE(πi) 35: return πi+,∗ In SPIDER, the exploration/pruning phase can only begin after the heuristic (or upper bound) computation and sorting for the policies has ended.",
                "We provide an approach to possibly circumvent the exploration of a group of policies based on heuristic computation for one abstract policy, thus leading to an improvement in runtime performance (without loss in solution quality).",
                "The important steps in this technique are defining the abstract policy and how heuristic values are computated for the abstract policies.",
                "In this paper, we propose two types of abstraction: 1.",
                "Horizon Based Abstraction (HBA): Here, the abstract policy is defined as a shorter horizon policy.",
                "It represents a group of longer horizon policies that have the same actions as the abstract policy for times less than or equal to the horizon of the abstract policy.",
                "In Figure 3(a), a T=1 abstract policy that performs East action, represents a group of T=2 policies, that perform East in the first time step.",
                "For HBA, there are two parts to heuristic computation: (a) Computing the upper bound for the horizon of the abstract policy.",
                "This is same as the heuristic computation defined by the GETHEURISTIC() algorithm for SPIDER, however with a shorter time horizon (horizon of the abstract policy). (b) Computing the maximum possible reward that can be accumulated in one time step (using GET-ABS-HEURISTIC()) and multiplying it by the number of time steps to time horizon.",
                "This maximum possible reward (for one time step) is obtained by iterating through all the actions of all the agents in Tree(i) and computing the maximum joint reward for any joint action.",
                "Sum of (a) and (b) is the heuristic value for a HBA abstract policy. 2.",
                "Node Based Abstraction (NBA): Here an abstract policy is obtained by not associating actions to certain nodes of the policy tree.",
                "Unlike in HBA, this implies multiple levels of abstraction.",
                "This is illustrated in Figure 3(b), where there are T=2 policies that do not have an action for observation TP.",
                "These incomplete T=2 policies are abstractions for T=2 complete policies.",
                "Increased levels of abstraction leads to faster computation of a complete joint policy, πroot+ and also to shorter heuristic computation and exploration, pruning phases.",
                "For NBA, the heuristic computation is similar to that of a normal policy, except in cases where there is no action associated with policy nodes.",
                "In such cases, the immediate reward is taken as Rmax (maximum reward for any action).",
                "We combine both the abstraction techniques mentioned above into one technique, SPIDER-ABS.",
                "Algorithm 5 provides the algorithm for this abstraction technique.",
                "For computing optimal joint policy with SPIDER-ABS, a non-leaf agent i initially examines all abstract T=1 policies (line 2) and sorts them based on abstract policy heuristic computations (line 17).",
                "The abstraction horizon is gradually increased and these abstract policies are then explored in descending order of heuristic values and ones that have heuristic values less than the threshold are pruned (lines 23-24).",
                "Exploration in SPIDER-ABS has the same definition as in SPIDER if the policy being explored has a horizon of policy computation which is equal to the actual time horizon and if all the nodes of the policy have an action associated with them (lines 25-30).",
                "However, if those conditions are not met, then it is substituted by a group of policies that it represents (using EXTEND-POLICY () function) (lines 31-32).",
                "EXTEND-POLICY() function is also responsible for initializing the horizon and absNodes of a policy. absNodes represents the number of nodes at the last level in the policy tree, that do not have an action assigned to them.",
                "If πi.absNodes = |Ωi|πi.horizon−1 (i.e. total number of policy nodes possible at πi.horizon) , then πi.absNodes is set to zero and πi.horizon is increased by 1.",
                "Otherwise, πi.absNodes is increased by 1.",
                "Thus, this function combines both HBA and NBA by using the policy variables, horizon and absNodes.",
                "Before substituting the abstract policy with a group of policies, those policies are sorted based on heuristic values (line 33).",
                "Similar type of abstraction based best response computation is adopted at leaf agents (lines 3-14). 4.4 Value ApproXimation (VAX) In this section, we present an approximate enhancement to SPIDER called VAX.",
                "The input to this technique is an approximation parameter , which determines the difference from the optimal solution quality.",
                "This approximation parameter is used at each agent for pruning out joint policies.",
                "The pruning mechanism in SPIDER and SPIDER-Abs dictates that a joint policy be pruned only if the threshold is exactly greater than the heuristic value.",
                "However, the 826 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Figure 3: Example of abstraction for (a) HBA (Horizon Based Abstraction) and (b) NBA (Node Based Abstraction) idea in this technique is to prune out joint a policy if the following condition is satisfied: threshold + > ˆv[πi , πi− ].",
                "Apart from the pruning condition, VAX is the same as SPIDER/SPIDER-ABS.",
                "In the example of Figure 2, if the heuristic value for the second joint policy (or second search tree node) in level 2 were 238 instead of 232, then that policy could not be be pruned using SPIDER or SPIDER-Abs.",
                "However, in VAX with an approximation parameter of 5, the joint policy in consideration would also be pruned.",
                "This is because the threshold (234) at that juncture plus the approximation parameter (5), i.e. 239 would have been greater than the heuristic value for that joint policy (238).",
                "It can be noted from the example (just discussed) that this kind of pruning can lead to fewer explorations and hence lead to an improvement in the overall run-time performance.",
                "However, this can entail a sacrifice in the quality of the solution because this technique can prune out a candidate optimal solution.",
                "A bound on the error introduced by this approximate algorithm as a function of , is provided by Proposition 3. 4.5 Percentage ApproXimation (PAX) In this section, we present the second approximation enhancement over SPIDER called PAX.",
                "Input to this technique is a parameter, δ that represents the minimum percentage of the optimal solution quality that is desired.",
                "Output of this technique is a policy with an expected value that is at least δ% of the optimal solution quality.",
                "A policy is pruned if the following condition is satisfied: threshold > δ 100 ˆv[πi , πi− ].",
                "Like in VAX, the only difference between PAX and SPIDER/SPIDER-ABS is this pruning condition.",
                "Again in Figure 2, if the heuristic value for the second search tree node in level 2 were 238 instead of 232, then PAX with an input parameter of 98% would be able to prune that search tree node (since 98 100 ∗238 < 234).",
                "This type of pruning leads to fewer explorations and hence an improvement in run-time performance, while potentially leading to a loss in quality of the solution.",
                "Proposition 4 provides the bound on quality loss. 4.6 Theoretical Results PROPOSITION 1.",
                "Heuristic provided using the centralized MDP heuristic is admissible.",
                "Proof.",
                "For the value provided by the heuristic to be admissible, it should be an over estimate of the expected value for a joint policy.",
                "Thus, we need to show that: For l ∈ Ei+ ∪ Ei− : ˆvt l ≥ vt l (refer to notation in Section 4.2) We use mathematical induction on t to prove this.",
                "Base case: t = T − 1.",
                "Irrespective of whether l ∈ Ei− or l ∈ Ei+ , ˆrt l is computed by maximizing over all actions of the agents in Tree(i), while rt l is computed for fixed policies of the same agents.",
                "Hence, ˆrt l ≥ rt l and also ˆvt l ≥ vt l .",
                "Assumption: Proposition holds for t = η, where 1 ≤ η < T − 1.",
                "We now have to prove that the proposition holds for t = η − 1.",
                "We show the proof for l ∈ Ei− and similar reasoning can be adopted to prove for l ∈ Ei+ .",
                "The heuristic value function for l ∈ Ei− is provided by the following equation: ˆvη−1 l =ˆrη−1 l + max al2 ω η l1 ,s η l ˆpη−1 l1 ˆpη−1 l2 pη−1 u ˆvη l Rewriting the RHS and using Eqn 2 (in Section 4.2) =ˆrη−1 l + max al2 ω η l1 ,s η l pη−1 u pη−1 l1 ˆpη−1 l2 ˆvη l =ˆrη−1 l + ω η l1 ,s η l pη−1 u pη−1 l1 max al2 ˆpη−1 l2 ˆvη l Since maxal2 ˆpη−1 l2 ˆvη l ≥ ωl2 oη−1 l2 ˆpη−1 l2 ˆvη l and pη−1 l2 = oη−1 l2 ˆpη−1 l2 ≥ˆrη−1 l + ω η l1 ,s η l pη−1 u pη−1 l1 ωl2 pη−1 l2 ˆvη l Since ˆvη l ≥ vη l (from the assumption) ≥ˆrη−1 l + ω η l1 ,s η l pη−1 u pη−1 l1 ωl2 pη−1 l2 vη l Since ˆrη−1 l ≥ rη−1 l (by definition) ≥rη−1 l + ω η l1 ,s η l pη−1 u pη−1 l1 ωl2 pη−1 l2 vη l =rη−1 l + (ω η l ,s η l ) pη−1 u pη−1 l1 pη−1 l2 vη l = vη−1 l Thus proved.",
                "PROPOSITION 2.",
                "SPIDER provides an optimal solution.",
                "Proof.",
                "SPIDER examines all possible joint policies given the interaction structure of the agents.",
                "The only exception being when a joint policy is pruned based on the heuristic value.",
                "Thus, as long as a candidate optimal policy is not pruned, SPIDER will return an optimal policy.",
                "As proved in Proposition 1, the expected value for a joint policy is always an upper bound.",
                "Hence when a joint policy is pruned, it cannot be an optimal solution.",
                "PROPOSITION 3.",
                "Error bound on the solution quality for VAX (implemented over SPIDER-ABS) with an approximation parameter of is ρ , where ρ is the number of leaf nodes in the DFS tree.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 827 Proof.",
                "We prove this proposition using mathematical induction on the depth of the DFS tree.",
                "Base case: depth = 1 (i.e. one node).",
                "Best response is computed by iterating through all policies, Πk.",
                "A policy,πk is pruned if ˆv[πk, πk− ] < threshold + .",
                "Thus the best response policy computed by VAX would be at most away from the optimal best response.",
                "Hence the proposition holds for the base case.",
                "Assumption: Proposition holds for d, where 1 ≤ depth ≤ d. We now have to prove that the proposition holds for d + 1.",
                "Without loss of generality, lets assume that the root node of this tree has k children.",
                "Each of this children is of depth ≤ d, and hence from the assumption, the error introduced in kth child is ρk , where ρk is the number of leaf nodes in kth child of the root.",
                "Therefore, ρ = k ρk, where ρ is the number of leaf nodes in the tree.",
                "In SPIDER-ABS, threshold at the root agent, thresspider = k v[πk+ , πk− ].",
                "However, with VAX the threshold at the root agent will be (in the worst case), threshvax = k v[πk+ , πk− ]− k ρk .",
                "Hence, with VAX a joint policy is pruned at the root agent if ˆv[πroot, πroot− ] < threshvax + ⇒ ˆv[πroot, πroot− ] < threshspider − (( k ρk) − 1) ≤ threshspider − ( k ρk) ≤ threshspider − ρ .",
                "Hence proved.",
                "PROPOSITION 4.",
                "For PAX (implemented over SPIDER-ABS) with an input parameter of δ, the solution quality is at least δ 100 v[πroot+,∗ ], where v[πroot+,∗ ] denotes the optimal solution quality.",
                "Proof.",
                "We prove this proposition using mathematical induction on the depth of the DFS tree.",
                "Base case: depth = 1 (i.e. one node).",
                "Best response is computed by iterating through all policies, Πk.",
                "A policy,πk is pruned if δ 100 ˆv[πk, πk− ] < threshold.",
                "Thus the best response policy computed by PAX would be at least δ 100 times the optimal best response.",
                "Hence the proposition holds for the base case.",
                "Assumption: Proposition holds for d, where 1 ≤ depth ≤ d. We now have to prove that the proposition holds for d + 1.",
                "Without loss of generality, lets assume that the root node of this tree has k children.",
                "Each of this children is of depth ≤ d, and hence from the assumption, the solution quality in the kth child is at least δ 100 v[πk+,∗ , πk− ] for PAX.",
                "With SPIDER-ABS, a joint policy is pruned at the root agent if ˆv[πroot, πroot− ] < k v[πk+,∗ , πk− ].",
                "However with PAX, a joint policy is pruned if δ 100 ˆv[πroot, πroot− ] < k δ 100 v[πk+,∗ , πk− ] ⇒ ˆv[πroot, πroot− ] < k v[πk+,∗ , πk− ].",
                "Since the pruning condition at the root agent in PAX is the same as the one in SPIDER-ABS, there is no error introduced at the root agent and all the error is introduced in the children.",
                "Thus, overall solution quality is at least δ 100 of the optimal solution.",
                "Hence proved. 5.",
                "EXPERIMENTAL RESULTS All our experiments were conducted on the sensor network domain from Section 2.",
                "The five network configurations employed are shown in Figure 4.",
                "Algorithms that we experimented with are GOA, SPIDER, SPIDER-ABS, PAX and VAX.",
                "We compare against GOA because it is the only global optimal algorithm that considers more than two agents.",
                "We performed two sets of experiments: (i) firstly, we compared the run-time performance of the above algorithms and (ii) secondly, we experimented with PAX and VAX to study the tradeoff between run-time and solution quality.",
                "Experiments were terminated after 10000 seconds1 .",
                "Figure 5(a) provides run-time comparisons between the optimal algorithms GOA, SPIDER, SPIDER-Abs and the approximate algorithms, PAX ( of 30) and VAX(δ of 80).",
                "X-axis denotes the 1 Machine specs for all experiments: Intel Xeon 3.6 GHZ processor, 2GB RAM sensor network configuration used, while Y-axis indicates the runtime (on a log-scale).",
                "The time horizon of policy computation was 3.",
                "For each configuration (3-chain, 4-chain, 4-star and 5-star), there are five bars indicating the time taken by GOA, SPIDER, SPIDERAbs, PAX and VAX.",
                "GOA did not terminate within the time limit for 4-star and 5-star configurations.",
                "SPIDER-Abs dominated the SPIDER and GOA for all the configurations.",
                "For instance, in the 3chain configuration, SPIDER-ABS provides 230-fold speedup over GOA and 2-fold speedup over SPIDER and for the 4-chain configuration it provides 58-fold speedup over GOA and 2-fold speedup over SPIDER.",
                "The two approximation approaches, VAX and PAX provided further improvement in performance over SPIDER-Abs.",
                "For instance, in the 5-star configuration VAX provides a 15-fold speedup and PAX provides a 8-fold speedup over SPIDER-Abs.",
                "Figures 5(b) provides a comparison of the solution quality obtained using the different algorithms for the problems tested in Figure 5(a).",
                "X-axis denotes the sensor network configuration while Y-axis indicates the solution quality.",
                "Since GOA, SPIDER, and SPIDER-Abs are all global optimal algorithms, the solution quality is the same for all those algorithms.",
                "For 5-P configuration, the global optimal algorithms did not terminate within the limit of 10000 seconds, so the bar for optimal quality indicates an upper bound on the optimal solution quality.",
                "With both the approximations, we obtained a solution quality that was close to the optimal solution quality.",
                "In 3-chain and 4-star configurations, it is remarkable that both PAX and VAX obtained almost the same actual quality as the global optimal algorithms, despite the approximation parameter and δ.",
                "For other configurations as well, the loss in quality was less than 20% of the optimal solution quality.",
                "Figure 5(c) provides the time to solution with PAX (for varying epsilons).",
                "X-axis denotes the approximation parameter, δ (percentage to optimal) used, while Y-axis denotes the time taken to compute the solution (on a log-scale).",
                "The time horizon for all the configurations was 4.",
                "As δ was decreased from 70 to 30, the time to solution decreased drastically.",
                "For instance, in the 3-chain case there was a total speedup of 170-fold when the δ was changed from 70 to 30.",
                "Interestingly, even with a low δ of 30%, the actual solution quality remained equal to the one obtained at 70%.",
                "Figure 5(d) provides the time to solution for all the configurations with VAX (for varying epsilons).",
                "X-axis denotes the approximation parameter, used, while Y-axis denotes the time taken to compute the solution (on a log-scale).",
                "The time horizon for all the configurations was 4.",
                "As was increased, the time to solution decreased drastically.",
                "For instance, in the 4-star case there was a total speedup of 73-fold when the was changed from 60 to 140.",
                "Again, the actual solution quality did not change with varying epsilon.",
                "Figure 4: Sensor network configurations 828 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Figure 5: Comparison of GOA, SPIDER, SPIDER-Abs and VAX for T = 3 on (a) Runtime and (b) Solution quality; (c) Time to solution for PAX with varying percentage to optimal for T=4 (d) Time to solution for VAX with varying epsilon for T=4 6.",
                "SUMMARY AND RELATED WORK This paper presents four algorithms SPIDER, SPIDER-ABS, PAX and VAX that provide a novel combination of features for policy search in distributed POMDPs: (i) exploiting agent interaction structure given a network of agents (i.e. easier scale-up to larger number of agents); (ii) using branch and bound search with an MDP based heuristic function; (iii) utilizing abstraction to improve runtime performance without sacrificing solution quality; (iv) providing a priori percentage bounds on quality of solutions using PAX; and (v) providing expected value bounds on the quality of solutions using VAX.",
                "These features allow for systematic tradeoff of solution quality for run-time in networks of agents operating under uncertainty.",
                "Experimental results show orders of magnitude improvement in performance over previous global optimal algorithms.",
                "Researchers have typically employed two types of techniques for solving distributed POMDPs.",
                "The first set of techniques compute global optimal solutions.",
                "Hansen et al. [5] present an algorithm based on dynamic programming and iterated elimination of dominant policies, that provides optimal solutions for distributed POMDPs.",
                "Szer et al. [13] provide an optimal heuristic search method for solving Decentralized POMDPs.",
                "This algorithm is based on the combination of a classical heuristic search algorithm, A∗ and decentralized control theory.",
                "The key differences between SPIDER and MAA* are: (a) Enhancements to SPIDER (VAX and PAX) provide for quality guaranteed approximations, while MAA* is a global optimal algorithm and hence involves significant computational complexity; (b) Due to MAA*s inability to exploit interaction structure, it was illustrated only with two agents.",
                "However, SPIDER has been illustrated for networks of agents; and (c) SPIDER explores the joint policy one agent at a time, while MAA* expands it one time step at a time (simultaneously for all the agents).",
                "The second set of techniques seek approximate policies.",
                "EmeryMontemerlo et al. [4] approximate POSGs as a series of one-step Bayesian games using heuristics to approximate future value, trading off limited lookahead for computational efficiency, resulting in locally optimal policies (with respect to the selected heuristic).",
                "Nair et al. [9]s JESP algorithm uses dynamic programming to reach a local optimum solution for finite horizon decentralized POMDPs.",
                "Peshkin et al. [11] and Bernstein et al. [2] are examples of policy search techniques that search for locally optimal policies.",
                "Though all the above techniques improve the efficiency of policy computation considerably, they are unable to provide error bounds on the quality of the solution.",
                "This aspect of quality bounds differentiates SPIDER from all the above techniques.",
                "Acknowledgements.",
                "This material is based upon work supported by the Defense Advanced Research Projects Agency (DARPA), through the Department of the Interior, NBC, Acquisition Services Division under Contract No.",
                "NBCHD030010.",
                "The views and conclusions contained in this document are those of the authors, and should not be interpreted as representing the official policies, either expressed or implied, of the Defense Advanced Research Projects Agency or the U.S. Government. 7.",
                "REFERENCES [1] R. Becker, S. Zilberstein, V. Lesser, and C.V. Goldman.",
                "Solving transition independent decentralized Markov decision processes.",
                "JAIR, 22:423-455, 2004. [2] D. S. Bernstein, E.A.",
                "Hansen, and S. Zilberstein.",
                "Bounded policy iteration for decentralized POMDPs.",
                "In IJCAI, 2005. [3] D. S. Bernstein, S. Zilberstein, and N. Immerman.",
                "The complexity of decentralized control of MDPs.",
                "In UAI, 2000. [4] R. Emery-Montemerlo, G. Gordon, J. Schneider, and S. Thrun.",
                "Approximate solutions for partially observable stochastic games with common payoffs.",
                "In AAMAS, 2004. [5] E. Hansen, D. Bernstein, and S. Zilberstein.",
                "Dynamic programming for partially observable stochastic games.",
                "In AAAI, 2004. [6] V. Lesser, C. Ortiz, and M. Tambe.",
                "Distributed sensor nets: A multiagent perspective.",
                "Kluwer, 2003. [7] R. Maheswaran, M. Tambe, E. Bowring, J. Pearce, and P. Varakantham.",
                "Taking dcop to the real world : Efficient complete solutions for distributed event scheduling.",
                "In AAMAS, 2004. [8] P. J. Modi, W. Shen, M. Tambe, and M. Yokoo.",
                "An asynchronous complete method for distributed constraint optimization.",
                "In AAMAS, 2003. [9] R. Nair, D. Pynadath, M. Yokoo, M. Tambe, and S. Marsella.",
                "Taming decentralized POMDPs: Towards efficient policy computation for multiagent settings.",
                "In IJCAI, 2003. [10] R. Nair, P. Varakantham, M. Tambe, and M. Yokoo.",
                "Networked distributed POMDPs: A synthesis of distributed constraint optimization and POMDPs.",
                "In AAAI, 2005. [11] L. Peshkin, N. Meuleau, K.-E. Kim, and L. Kaelbling.",
                "Learning to cooperate via policy search.",
                "In UAI, 2000. [12] A. Petcu and B. Faltings.",
                "A scalable method for multiagent constraint optimization.",
                "In IJCAI, 2005. [13] D. Szer, F. Charpillet, and S. Zilberstein.",
                "MAA*: A heuristic search algorithm for solving decentralized POMDPs.",
                "In IJCAI, 2005.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 829"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [],
            "translated_text": "",
            "candidates": [],
            "error": []
        },
        "overall joint reward": {
            "translated_key": "",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Letting loose a SPIDER on a network of POMDPs: Generating quality guaranteed policies Pradeep Varakantham, Janusz Marecki, Yuichi Yabu∗ , Milind Tambe, Makoto Yokoo∗ University of Southern California, Los Angeles, CA 90089, {varakant, marecki, tambe}@usc.edu ∗ Dept.",
                "of Intelligent Systems, Kyushu University, Fukuoka, 812-8581 Japan, yokoo@is.kyushu-u.ac.jp ABSTRACT Distributed Partially Observable Markov Decision Problems (Distributed POMDPs) are a popular approach for modeling multi-agent systems acting in uncertain domains.",
                "Given the significant complexity of solving distributed POMDPs, particularly as we scale up the numbers of agents, one popular approach has focused on approximate solutions.",
                "Though this approach is efficient, the algorithms within this approach do not provide any guarantees on solution quality.",
                "A second less popular approach focuses on global optimality, but typical results are available only for two agents, and also at considerable computational cost.",
                "This paper overcomes the limitations of both these approaches by providing SPIDER, a novel combination of three key features for policy generation in distributed POMDPs: (i) it exploits agent interaction structure given a network of agents (i.e. allowing easier scale-up to larger number of agents); (ii) it uses a combination of heuristics to speedup policy search; and (iii) it allows quality guaranteed approximations, allowing a systematic tradeoff of solution quality for time.",
                "Experimental results show orders of magnitude improvement in performance when compared with previous global optimal algorithms.",
                "Categories and Subject Descriptors I.2.11 [Artificial Intelligence]: Distributed Artificial IntelligenceMulti-agent Systems General Terms Algorithms, Theory 1.",
                "INTRODUCTION Distributed Partially Observable Markov Decision Problems (Distributed POMDPs) are emerging as a popular approach for modeling sequential decision making in teams operating under uncertainty [9, 4, 1, 2, 13].",
                "The uncertainty arises on account of nondeterminism in the outcomes of actions and because the world state may only be partially (or incorrectly) observable.",
                "Unfortunately, as shown by Bernstein et al. [3], the problem of finding the optimal joint policy for general distributed POMDPs is NEXP-Complete.",
                "Researchers have attempted two different types of approaches towards solving these models.",
                "The first category consists of highly efficient approximate techniques, that may not reach globally optimal solutions [2, 9, 11].",
                "The key problem with these techniques has been their inability to provide any guarantees on the quality of the solution.",
                "In contrast, the second less popular category of approaches has focused on a global optimal result [13, 5, 10].",
                "Though these approaches obtain optimal solutions, they typically consider only two agents.",
                "Furthermore, they fail to exploit structure in the interactions of the agents and hence are severely hampered with respect to scalability when considering more than two agents.",
                "To address these problems with the existing approaches, we propose approximate techniques that provide guarantees on the quality of the solution while focussing on a network of more than two agents.",
                "We first propose the basic SPIDER (Search for Policies In Distributed EnviRonments) algorithm.",
                "There are two key novel features in SPIDER: (i) it is a branch and bound heuristic search technique that uses a MDP-based heuristic function to search for an optimal joint policy; (ii) it exploits network structure of agents by organizing agents into a Depth First Search (DFS) pseudo tree and takes advantage of the independence in the different branches of the DFS tree.",
                "We then provide three enhancements to improve the efficiency of the basic SPIDER algorithm while providing guarantees on the quality of the solution.",
                "The first enhancement uses abstractions for speedup, but does not sacrifice solution quality.",
                "In particular, it initially performs branch and bound search on abstract policies and then extends to complete policies.",
                "The second enhancement obtains speedups by sacrificing solution quality, but within an input parameter that provides the tolerable expected value difference from the optimal solution.",
                "The third enhancement is again based on bounding the search for efficiency, however with a tolerance parameter that is provided as a percentage of optimal.",
                "We experimented with the sensor network domain presented in Nair et al. [10], a domain representative of an important class of problems with networks of agents working in uncertain environments.",
                "In our experiments, we illustrate that SPIDER dominates an existing global optimal approach called GOA [10], the only known global optimal algorithm with demonstrated experimental results for more than two agents.",
                "Furthermore, we demonstrate that abstraction improves the performance of SPIDER significantly (while providing optimal solutions).",
                "We finally demonstrate a key feature of SPIDER: by utilizing the approximation enhancements it enables principled tradeoffs in run-time versus solution quality. 822 978-81-904262-7-5 (RPS) c 2007 IFAAMAS 2.",
                "DOMAIN: DISTRIBUTED SENSOR NETS Distributed sensor networks are a large, important class of domains that motivate our work.",
                "This paper focuses on a set of target tracking problems that arise in certain types of sensor networks [6] first introduced in [10].",
                "Figure 1 shows a specific problem instance within this type consisting of three sensors.",
                "Here, each sensor node can scan in one of four directions: North, South, East or West (see Figure 1).",
                "To track a target and obtain associated reward, two sensors with overlapping scanning areas must coordinate by scanning the same area simultaneously.",
                "In Figure 1, to track a target in Loc11, sensor1 needs to scan East and sensor2 needs to scan West simultaneously.",
                "Thus, sensors have to act in a coordinated fashion.",
                "We assume that there are two independent targets and that each targets movement is uncertain and unaffected by the sensor agents.",
                "Based on the area it is scanning, each sensor receives observations that can have false positives and false negatives.",
                "The sensors observations and transitions are independent of each others actions e.g.the observations that sensor1 receives are independent of sensor2s actions.",
                "Each agent incurs a cost for scanning whether the target is present or not, but no cost if it turns off.",
                "Given the sensors observational uncertainty, the targets uncertain transitions and the distributed nature of the sensor nodes, these sensor nets provide a useful domains for applying distributed POMDP models.",
                "Figure 1: A 3-chain sensor configuration 3.",
                "BACKGROUND 3.1 Model: Network Distributed POMDP The ND-POMDP model was introduced in [10], motivated by domains such as the sensor networks introduced in Section 2.",
                "It is defined as the tuple S, A, P, Ω, O, R, b , where S = ×1≤i≤nSi × Su is the set of world states.",
                "Si refers to the set of local states of agent i and Su is the set of unaffectable states.",
                "Unaffectable state refers to that part of the world state that cannot be affected by the agents actions, e.g. environmental factors like target locations that no agent can control.",
                "A = ×1≤i≤nAi is the set of joint actions, where Ai is the set of action for agent i. ND-POMDP assumes transition independence, where the transition function is defined as P(s, a, s ) = Pu(su, su) · 1≤i≤n Pi(si, su, ai, si), where a = a1, . . . , an is the joint action performed in state s = s1, . . . , sn, su and s = s1, . . . , sn, su is the resulting state.",
                "Ω = ×1≤i≤nΩi is the set of joint observations where Ωi is the set of observations for agents i. Observational independence is assumed in ND-POMDPs i.e., the joint observation function is defined as O(s, a, ω) = 1≤i≤n Oi(si, su, ai, ωi), where s = s1, . . . , sn, su is the world state that results from the agents performing a = a1, . . . , an in the previous state, and ω = ω1, . . . , ωn ∈ Ω is the observation received in state s. This implies that each agents observation depends only on the unaffectable state, its local action and on its resulting local state.",
                "The reward function, R, is defined as R(s, a) = l Rl(sl1, . . . , slr, su, al1, . . . , alr ), where each l could refer to any sub-group of agents and r = |l|.",
                "Based on the reward function, an interaction hypergraph is constructed.",
                "A hyper-link, l, exists between a subset of agents for all Rl that comprise R. The interaction hypergraph is defined as G = (Ag, E), where the agents, Ag, are the vertices and E = {l|l ⊆ Ag ∧ Rl is a component of R} are the edges.",
                "The initial belief state (distribution over the initial state), b, is defined as b(s) = bu(su) · 1≤i≤n bi(si), where bu and bi refer to the distribution over initial unaffectable state and agent is initial belief state, respectively.",
                "The goal in ND-POMDP is to compute the joint policy π = π1, . . . , πn that maximizes teams expected reward over a finite horizon T starting from the belief state b.",
                "An ND-POMDP is similar to an n-ary Distributed Constraint Optimization Problem (DCOP)[8, 12] where the variable at each node represents the policy selected by an individual agent, πi with the domain of the variable being the set of all local policies, Πi.",
                "The reward component Rl where |l| = 1 can be thought of as a local constraint while the reward component Rl where l > 1 corresponds to a non-local constraint in the constraint graph. 3.2 Algorithm: Global Optimal Algorithm (GOA) In previous work, GOA has been defined as a global optimal algorithm for ND-POMDPs [10].",
                "We will use GOA in our experimental comparisons, since GOA is a state-of-the-art global optimal algorithm, and in fact the only one with experimental results available for networks of more than two agents.",
                "GOA borrows from a global optimal DCOP algorithm called DPOP[12].",
                "GOAs message passing follows that of DPOP.",
                "The first phase is the UTIL propagation, where the utility messages, in this case values of policies, are passed up from the leaves to the root.",
                "Value for a policy at an agent is defined as the sum of best response values from its children and the joint policy reward associated with the parent policy.",
                "Thus, given a policy for a parent node, GOA requires an agent to iterate through all its policies, finding the best response policy and returning the value to the parent - while at the parent node, to find the best policy, an agent requires its children to return their best responses to each of its policies.",
                "This UTIL propagation process is repeated at each level in the tree, until the root exhausts all its policies.",
                "In the second phase of VALUE propagation, where the optimal policies are passed down from the root till the leaves.",
                "GOA takes advantage of the local interactions in the interaction graph, by pruning out unnecessary joint policy evaluations (associated with nodes not connected directly in the tree).",
                "Since the interaction graph captures all the reward interactions among agents and as this algorithm iterates through all the relevant joint policy evaluations, this algorithm yields a globally optimal solution. 4.",
                "SPIDER As mentioned in Section 3.1, an ND-POMDP can be treated as a DCOP, where the goal is to compute a joint policy that maximizes the <br>overall joint reward</br>.",
                "The brute-force technique for computing an optimal policy would be to examine the expected values for all possible joint policies.",
                "The key idea in SPIDER is to avoid computation of expected values for the entire space of joint policies, by utilizing upper bounds on the expected values of policies and the interaction structure of the agents.",
                "Akin to some of the algorithms for DCOP [8, 12], SPIDER has a pre-processing step that constructs a DFS tree corresponding to the given interaction structure.",
                "Note that these DFS trees are pseudo trees [12] that allow links between ancestors and children.",
                "We employ the Maximum Constrained Node (MCN) heuristic used in the DCOP algorithm, ADOPT [8], however other heuristics (such as MLSP heuristic from [7]) can also be employed.",
                "MCN heuristic tries to place agents with more number of constraints at the top of the tree.",
                "This tree governs how the search for the optimal joint polThe Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 823 icy proceeds in SPIDER.",
                "The algorithms presented in this paper are easily extendable to hyper-trees, however for expository purposes, we assume binary trees.",
                "SPIDER is an algorithm for centralized planning and distributed execution in distributed POMDPs.",
                "In this paper, we employ the following notation to denote policies and expected values: Ancestors(i) ⇒ agents from i to the root (not including i).",
                "Tree(i) ⇒ agents in the sub-tree (not including i) for which i is the root. πroot+ ⇒ joint policy of all agents. πi+ ⇒ joint policy of all agents in Tree(i) ∪ i. πi− ⇒ joint policy of agents that are in Ancestors(i). πi ⇒ policy of the ith agent. ˆv[πi, πi− ] ⇒ upper bound on the expected value for πi+ given πi and policies of ancestor agents i.e. πi− . ˆvj[πi, πi− ] ⇒ upper bound on the expected value for πi+ from the jth child. v[πi, πi− ] ⇒ expected value for πi given policies of ancestor agents, πi− . v[πi+ , πi− ] ⇒ expected value for πi+ given policies of ancestor agents, πi− . vj[πi+ , πi− ] ⇒ expected value for πi+ from the jth child.",
                "Figure 2: Execution of SPIDER, an example 4.1 Outline of SPIDER SPIDER is based on the idea of branch and bound search, where the nodes in the search tree represent partial/complete joint policies.",
                "Figure 2 shows an example search tree for the SPIDER algorithm, using an example of the three agent chain.",
                "Before SPIDER begins its search we create a DFS tree (i.e. pseudo tree) from the three agent chain, with the middle agent as the root of this tree.",
                "SPIDER exploits the structure of this DFS tree while engaging in its search.",
                "Note that in our example figure, each agent is assigned a policy with T=2.",
                "Thus, each rounded rectange (search tree node) indicates a partial/complete joint policy, a rectangle indicates an agent and the ovals internal to an agent show its policy.",
                "Heuristic or actual expected value for a joint policy is indicated in the top right corner of the rounded rectangle.",
                "If the number is italicized and underlined, it implies that the actual expected value of the joint policy is provided.",
                "SPIDER begins with no policy assigned to any of the agents (shown in the level 1 of the search tree).",
                "Level 2 of the search tree indicates that the joint policies are sorted based on upper bounds computed for root agents policies.",
                "Level 3 shows one SPIDER search node with a complete joint policy (a policy assigned to each of the agents).",
                "The expected value for this joint policy is used to prune out the nodes in level 2 (the ones with upper bounds < 234) When creating policies for each non-leaf agent i, SPIDER potentially performs two steps: 1.",
                "Obtaining upper bounds and sorting: In this step, agent i computes upper bounds on the expected values, ˆv[πi, πi− ] of the joint policies πi+ corresponding to each of its policy πi and fixed ancestor policies.",
                "An MDP based heuristic is used to compute these upper bounds on the expected values.",
                "Detailed description about this MDP heuristic is provided in Section 4.2.",
                "All policies of agent i, Πi are then sorted based on these upper bounds (also referred to as heuristic values henceforth) in descending order.",
                "Exploration of these policies (in step 2 below) are performed in this descending order.",
                "As indicated in the level 2 of the search tree (of Figure 2), all the joint policies are sorted based on the heuristic values, indicated in the top right corner of each joint policy.",
                "The intuition behind sorting and then exploring policies in descending order of upper bounds, is that the policies with higher upper bounds could yield joint policies with higher expected values. 2.",
                "Exploration and Pruning: Exploration implies computing the best response joint policy πi+,∗ corresponding to fixed ancestor policies of agent i, πi− .",
                "This is performed by iterating through all policies of agent i i.e.",
                "Πi and summing two quantities for each policy: (i) the best response for all of is children (obtained by performing steps 1 and 2 at each of the child nodes); (ii) the expected value obtained by i for fixed policies of ancestors.",
                "Thus, exploration of a policy πi yields actual expected value of a joint policy, πi+ represented as v[πi+ , πi− ].",
                "The policy with the highest expected value is the best response policy.",
                "Pruning refers to avoiding exploring all policies (or computing expected values) at agent i by using the current best expected value, vmax [πi+ , πi− ].",
                "Henceforth, this vmax [πi+ , πi− ] will be referred to as threshold.",
                "A policy, πi need not be explored if the upper bound for that policy, ˆv[πi, πi− ] is less than the threshold.",
                "This is because the expected value for the best joint policy attainable for that policy will be less than the threshold.",
                "On the other hand, when considering a leaf agent, SPIDER computes the best response policy (and consequently its expected value) corresponding to fixed policies of its ancestors, πi− .",
                "This is accomplished by computing expected values for each of the policies (corresponding to fixed policies of ancestors) and selecting the highest expected value policy.",
                "In Figure 2, SPIDER assigns best response policies to leaf agents at level 3.",
                "The policy for the left leaf agent is to perform action East at each time step in the policy, while the policy for the right leaf agent is to perform Off at each time step.",
                "These best response policies from the leaf agents yield an actual expected value of 234 for the complete joint policy.",
                "Algorithm 1 provides the pseudo code for SPIDER.",
                "This algorithm outputs the best joint policy, πi+,∗ (with an expected value greater than threshold) for the agents in Tree(i).",
                "Lines 3-8 compute the best response policy of a leaf agent i, while lines 9-23 computes the best response joint policy for agents in Tree(i).",
                "This best response computation for a non-leaf agent i includes: (a) Sorting of policies (in descending order) based on heuristic values on line 11; (b) Computing best response policies at each of the children for fixed policies of agent i in lines 16-20; and (c) Maintaining 824 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Algorithm 1 SPIDER(i, πi− , threshold) 1: πi+,∗ ← null 2: Πi ← GET-ALL-POLICIES (horizon, Ai, Ωi) 3: if IS-LEAF(i) then 4: for all πi ∈ Πi do 5: v[πi, πi−] ← JOINT-REWARD (πi, πi−) 6: if v[πi, πi−] > threshold then 7: πi+,∗ ← πi 8: threshold ← v[πi, πi−] 9: else 10: children ← CHILDREN (i) 11: ˆΠi ← UPPER-BOUND-SORT(i, Πi, πi−) 12: for all πi ∈ ˆΠi do 13: ˜πi+ ← πi 14: if ˆv[πi, πi−] < threshold then 15: Go to line 12 16: for all j ∈ children do 17: jThres ← threshold − v[πi, πi−]− Σk∈children,k=j ˆvk[πi, πi−] 18: πj+,∗ ← SPIDER(j, πi πi−, jThres) 19: ˜πi+ ← ˜πi+ πj+,∗ 20: ˆvj[πi, πi−] ← v[πj+,∗, πi πi−] 21: if v[˜πi+, πi−] > threshold then 22: threshold ← v[˜πi+, πi−] 23: πi+,∗ ← ˜πi+ 24: return πi+,∗ Algorithm 2 UPPER-BOUND-SORT(i, Πi, πi− ) 1: children ← CHILDREN (i) 2: ˆΠi ← null /* Stores the sorted list */ 3: for all πi ∈ Πi do 4: ˆv[πi, πi−] ← JOINT-REWARD (πi, πi−) 5: for all j ∈ children do 6: ˆvj[πi, πi−] ← UPPER-BOUND(i, j, πi πi−) 7: ˆv[πi, πi−] + ← ˆvj[πi, πi−] 8: ˆΠi ← INSERT-INTO-SORTED (πi, ˆΠi) 9: return ˆΠi best expected value, joint policy in lines 21-23.",
                "Algorithm 2 provides the pseudo code for sorting policies based on the upper bounds on the expected values of joint policies.",
                "Expected value for an agent i consists of two parts: value obtained from ancestors and value obtained from its children.",
                "Line 4 computes the expected value obtained from ancestors of the agent (using JOINT-REWARD function), while lines 5-7 compute the heuristic value from the children.",
                "The sum of these two parts yields an upper bound on the expected value for agent i, and line 8 of the algorithm sorts the policies based on these upper bounds. 4.2 MDP based heuristic function The heuristic function quickly provides an upper bound on the expected value obtainable from the agents in Tree(i).",
                "The subtree of agents is a distributed POMDP in itself and the idea here is to construct a centralized MDP corresponding to the (sub-tree) distributed POMDP and obtain the expected value of the optimal policy for this centralized MDP.",
                "To reiterate this in terms of the agents in DFS tree interaction structure, we assume full observability for the agents in Tree(i) and for fixed policies of the agents in {Ancestors(i) ∪ i}, we compute the joint value ˆv[πi+ , πi− ] .",
                "We use the following notation for presenting the equations for computing upper bounds/heuristic values (for agents i and k): Let Ei− denote the set of links between agents in {Ancestors(i)∪ i} and Tree(i), Ei+ denote the set of links between agents in Tree(i).",
                "Also, if l ∈ Ei− , then l1 is the agent in {Ancestors(i)∪ i} and l2 is the agent in Tree(i), that l connects together.",
                "We first compact the standard notation: ot k =Ok(st+1 k , st+1 u , πk(ωt k), ωt+1 k ) (1) pt k =Pk(st k, st u, πk(ωt k), st+1 k ) · ot k pt u =P(st u, st+1 u ) st l = st l1 , st l2 , st u ; ωt l = ωt l1 , ωt l2 rt l =Rl(st l , πl1 (ωt l1 ), πl2 (ωt l2 )) vt l =V t πl (st l , st u, ωt l1 , ωt l2 ) Depending on the location of agent k in the agent tree we have the following cases: IF k ∈ {Ancestors(i) ∪ i}, ˆpt k = pt k, (2) IF k ∈ Tree(i), ˆpt k = Pk(st k, st u, πk(ωt k), st+1 k ) IF l ∈ Ei− , ˆrt l = max {al2 } Rl(st l , πl1 (ωt l1 ), al2 ) IF l ∈ Ei+ , ˆrt l = max {al1 ,al2 } Rl(st l , al1 , al2 ) The value function for an agent i executing the joint policy πi+ at time η − 1 is provided by the equation: V η−1 πi+ (sη−1 , ωη−1 ) = l∈Ei− vη−1 l + l∈Ei+ vη−1 l (3) where vη−1 l = rη−1 l + ω η l ,sη pη−1 l1 pη−1 l2 pη−1 u vη l Algorithm 3 UPPER-BOUND (i, j, πj− ) 1: val ← 0 2: for all l ∈ Ej− ∪ Ej+ do 3: if l ∈ Ej− then πl1 ← φ 4: for all s0 l do 5: val + ← startBel[s0 l ]· UPPER-BOUND-TIME (i, s0 l , j, πl1 , ) 6: return val Algorithm 4 UPPER-BOUND-TIME (i, st l , j, πl1 , ωt l1 ) 1: maxV al ← −∞ 2: for all al1 , al2 do 3: if l ∈ Ei− and l ∈ Ej− then al1 ← πl1 (ωt l1 ) 4: val ← GET-REWARD(st l , al1 , al2 ) 5: if t < πi.horizon − 1 then 6: for all st+1 l , ωt+1 l1 do 7: futV al←pt u ˆpt l1 ˆpt l2 8: futV al ∗ ← UPPER-BOUND-TIME(st+1 l , j, πl1 , ωt l1 ωt+1 l1 ) 9: val + ← futV al 10: if val > maxV al then maxV al ← val 11: return maxV al Upper bound on the expected value for a link is computed by modifying the equation 3 to reflect the full observability assumption.",
                "This involves removing the observational probability term for agents in Tree(i) and maximizing the future value ˆvη l over the actions of those agents (in Tree(i)).",
                "Thus, the equation for the The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 825 computation of the upper bound on a link l, is as follows: IF l ∈ Ei− , ˆvη−1 l =ˆrη−1 l + max al2 ω η l1 ,s η l ˆpη−1 l1 ˆpη−1 l2 pη−1 u ˆvη l IF l ∈ Ei+ , ˆvη−1 l =ˆrη−1 l + max al1 ,al2 s η l ˆpη−1 l1 ˆpη−1 l2 pη−1 u ˆvη l Algorithm 3 and Algorithm 4 provide the algorithm for computing upper bound for child j of agent i, using the equations descirbed above.",
                "While Algorithm 4 computes the upper bound on a link given the starting state, Algorithm 3 sums the upper bound values computed over each of the links in Ei− ∪ Ei+ . 4.3 Abstraction Algorithm 5 SPIDER-ABS(i, πi− , threshold) 1: πi+,∗ ← null 2: Πi ← GET-POLICIES (<>, 1) 3: if IS-LEAF(i) then 4: for all πi ∈ Πi do 5: absHeuristic ← GET-ABS-HEURISTIC (πi, πi−) 6: absHeuristic ∗ ← (timeHorizon − πi.horizon) 7: if πi.horizon = timeHorizon and πi.absNodes = 0 then 8: v[πi, πi−] ← JOINT-REWARD (πi, πi−) 9: if v[πi, πi−] > threshold then 10: πi+,∗ ← πi; threshold ← v[πi, πi−] 11: else if v[πi, πi−] + absHeuristic > threshold then 12: ˆΠi ← EXTEND-POLICY (πi, πi.absNodes + 1) 13: Πi + ← INSERT-SORTED-POLICIES ( ˆΠi) 14: REMOVE(πi) 15: else 16: children ← CHILDREN (i) 17: Πi ← UPPER-BOUND-SORT(i, Πi, πi−) 18: for all πi ∈ Πi do 19: ˜πi+ ← πi 20: absHeuristic ← GET-ABS-HEURISTIC (πi, πi−) 21: absHeuristic ∗ ← (timeHorizon − πi.horizon) 22: if πi.horizon = timeHorizon and πi.absNodes = 0 then 23: if ˆv[πi, πi−] < threshold and πi.absNodes = 0 then 24: Go to line 19 25: for all j ∈ children do 26: jThres ← threshold − v[πi, πi−]− Σk∈children,k=j ˆvk[πi, πi−] 27: πj+,∗ ← SPIDER(j, πi πi−, jThres) 28: ˜πi+ ← ˜πi+ πj+,∗; ˆvj[πi, πi−] ← v[πj+,∗, πi πi−] 29: if v[˜πi+, πi−] > threshold then 30: threshold ← v[˜πi+, πi−]; πi+,∗ ← ˜πi+ 31: else if ˆv[πi+, πi−] + absHeuristic > threshold then 32: ˆΠi ← EXTEND-POLICY (πi, πi.absNodes + 1) 33: Πi + ← INSERT-SORTED-POLICIES (ˆΠi) 34: REMOVE(πi) 35: return πi+,∗ In SPIDER, the exploration/pruning phase can only begin after the heuristic (or upper bound) computation and sorting for the policies has ended.",
                "We provide an approach to possibly circumvent the exploration of a group of policies based on heuristic computation for one abstract policy, thus leading to an improvement in runtime performance (without loss in solution quality).",
                "The important steps in this technique are defining the abstract policy and how heuristic values are computated for the abstract policies.",
                "In this paper, we propose two types of abstraction: 1.",
                "Horizon Based Abstraction (HBA): Here, the abstract policy is defined as a shorter horizon policy.",
                "It represents a group of longer horizon policies that have the same actions as the abstract policy for times less than or equal to the horizon of the abstract policy.",
                "In Figure 3(a), a T=1 abstract policy that performs East action, represents a group of T=2 policies, that perform East in the first time step.",
                "For HBA, there are two parts to heuristic computation: (a) Computing the upper bound for the horizon of the abstract policy.",
                "This is same as the heuristic computation defined by the GETHEURISTIC() algorithm for SPIDER, however with a shorter time horizon (horizon of the abstract policy). (b) Computing the maximum possible reward that can be accumulated in one time step (using GET-ABS-HEURISTIC()) and multiplying it by the number of time steps to time horizon.",
                "This maximum possible reward (for one time step) is obtained by iterating through all the actions of all the agents in Tree(i) and computing the maximum joint reward for any joint action.",
                "Sum of (a) and (b) is the heuristic value for a HBA abstract policy. 2.",
                "Node Based Abstraction (NBA): Here an abstract policy is obtained by not associating actions to certain nodes of the policy tree.",
                "Unlike in HBA, this implies multiple levels of abstraction.",
                "This is illustrated in Figure 3(b), where there are T=2 policies that do not have an action for observation TP.",
                "These incomplete T=2 policies are abstractions for T=2 complete policies.",
                "Increased levels of abstraction leads to faster computation of a complete joint policy, πroot+ and also to shorter heuristic computation and exploration, pruning phases.",
                "For NBA, the heuristic computation is similar to that of a normal policy, except in cases where there is no action associated with policy nodes.",
                "In such cases, the immediate reward is taken as Rmax (maximum reward for any action).",
                "We combine both the abstraction techniques mentioned above into one technique, SPIDER-ABS.",
                "Algorithm 5 provides the algorithm for this abstraction technique.",
                "For computing optimal joint policy with SPIDER-ABS, a non-leaf agent i initially examines all abstract T=1 policies (line 2) and sorts them based on abstract policy heuristic computations (line 17).",
                "The abstraction horizon is gradually increased and these abstract policies are then explored in descending order of heuristic values and ones that have heuristic values less than the threshold are pruned (lines 23-24).",
                "Exploration in SPIDER-ABS has the same definition as in SPIDER if the policy being explored has a horizon of policy computation which is equal to the actual time horizon and if all the nodes of the policy have an action associated with them (lines 25-30).",
                "However, if those conditions are not met, then it is substituted by a group of policies that it represents (using EXTEND-POLICY () function) (lines 31-32).",
                "EXTEND-POLICY() function is also responsible for initializing the horizon and absNodes of a policy. absNodes represents the number of nodes at the last level in the policy tree, that do not have an action assigned to them.",
                "If πi.absNodes = |Ωi|πi.horizon−1 (i.e. total number of policy nodes possible at πi.horizon) , then πi.absNodes is set to zero and πi.horizon is increased by 1.",
                "Otherwise, πi.absNodes is increased by 1.",
                "Thus, this function combines both HBA and NBA by using the policy variables, horizon and absNodes.",
                "Before substituting the abstract policy with a group of policies, those policies are sorted based on heuristic values (line 33).",
                "Similar type of abstraction based best response computation is adopted at leaf agents (lines 3-14). 4.4 Value ApproXimation (VAX) In this section, we present an approximate enhancement to SPIDER called VAX.",
                "The input to this technique is an approximation parameter , which determines the difference from the optimal solution quality.",
                "This approximation parameter is used at each agent for pruning out joint policies.",
                "The pruning mechanism in SPIDER and SPIDER-Abs dictates that a joint policy be pruned only if the threshold is exactly greater than the heuristic value.",
                "However, the 826 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Figure 3: Example of abstraction for (a) HBA (Horizon Based Abstraction) and (b) NBA (Node Based Abstraction) idea in this technique is to prune out joint a policy if the following condition is satisfied: threshold + > ˆv[πi , πi− ].",
                "Apart from the pruning condition, VAX is the same as SPIDER/SPIDER-ABS.",
                "In the example of Figure 2, if the heuristic value for the second joint policy (or second search tree node) in level 2 were 238 instead of 232, then that policy could not be be pruned using SPIDER or SPIDER-Abs.",
                "However, in VAX with an approximation parameter of 5, the joint policy in consideration would also be pruned.",
                "This is because the threshold (234) at that juncture plus the approximation parameter (5), i.e. 239 would have been greater than the heuristic value for that joint policy (238).",
                "It can be noted from the example (just discussed) that this kind of pruning can lead to fewer explorations and hence lead to an improvement in the overall run-time performance.",
                "However, this can entail a sacrifice in the quality of the solution because this technique can prune out a candidate optimal solution.",
                "A bound on the error introduced by this approximate algorithm as a function of , is provided by Proposition 3. 4.5 Percentage ApproXimation (PAX) In this section, we present the second approximation enhancement over SPIDER called PAX.",
                "Input to this technique is a parameter, δ that represents the minimum percentage of the optimal solution quality that is desired.",
                "Output of this technique is a policy with an expected value that is at least δ% of the optimal solution quality.",
                "A policy is pruned if the following condition is satisfied: threshold > δ 100 ˆv[πi , πi− ].",
                "Like in VAX, the only difference between PAX and SPIDER/SPIDER-ABS is this pruning condition.",
                "Again in Figure 2, if the heuristic value for the second search tree node in level 2 were 238 instead of 232, then PAX with an input parameter of 98% would be able to prune that search tree node (since 98 100 ∗238 < 234).",
                "This type of pruning leads to fewer explorations and hence an improvement in run-time performance, while potentially leading to a loss in quality of the solution.",
                "Proposition 4 provides the bound on quality loss. 4.6 Theoretical Results PROPOSITION 1.",
                "Heuristic provided using the centralized MDP heuristic is admissible.",
                "Proof.",
                "For the value provided by the heuristic to be admissible, it should be an over estimate of the expected value for a joint policy.",
                "Thus, we need to show that: For l ∈ Ei+ ∪ Ei− : ˆvt l ≥ vt l (refer to notation in Section 4.2) We use mathematical induction on t to prove this.",
                "Base case: t = T − 1.",
                "Irrespective of whether l ∈ Ei− or l ∈ Ei+ , ˆrt l is computed by maximizing over all actions of the agents in Tree(i), while rt l is computed for fixed policies of the same agents.",
                "Hence, ˆrt l ≥ rt l and also ˆvt l ≥ vt l .",
                "Assumption: Proposition holds for t = η, where 1 ≤ η < T − 1.",
                "We now have to prove that the proposition holds for t = η − 1.",
                "We show the proof for l ∈ Ei− and similar reasoning can be adopted to prove for l ∈ Ei+ .",
                "The heuristic value function for l ∈ Ei− is provided by the following equation: ˆvη−1 l =ˆrη−1 l + max al2 ω η l1 ,s η l ˆpη−1 l1 ˆpη−1 l2 pη−1 u ˆvη l Rewriting the RHS and using Eqn 2 (in Section 4.2) =ˆrη−1 l + max al2 ω η l1 ,s η l pη−1 u pη−1 l1 ˆpη−1 l2 ˆvη l =ˆrη−1 l + ω η l1 ,s η l pη−1 u pη−1 l1 max al2 ˆpη−1 l2 ˆvη l Since maxal2 ˆpη−1 l2 ˆvη l ≥ ωl2 oη−1 l2 ˆpη−1 l2 ˆvη l and pη−1 l2 = oη−1 l2 ˆpη−1 l2 ≥ˆrη−1 l + ω η l1 ,s η l pη−1 u pη−1 l1 ωl2 pη−1 l2 ˆvη l Since ˆvη l ≥ vη l (from the assumption) ≥ˆrη−1 l + ω η l1 ,s η l pη−1 u pη−1 l1 ωl2 pη−1 l2 vη l Since ˆrη−1 l ≥ rη−1 l (by definition) ≥rη−1 l + ω η l1 ,s η l pη−1 u pη−1 l1 ωl2 pη−1 l2 vη l =rη−1 l + (ω η l ,s η l ) pη−1 u pη−1 l1 pη−1 l2 vη l = vη−1 l Thus proved.",
                "PROPOSITION 2.",
                "SPIDER provides an optimal solution.",
                "Proof.",
                "SPIDER examines all possible joint policies given the interaction structure of the agents.",
                "The only exception being when a joint policy is pruned based on the heuristic value.",
                "Thus, as long as a candidate optimal policy is not pruned, SPIDER will return an optimal policy.",
                "As proved in Proposition 1, the expected value for a joint policy is always an upper bound.",
                "Hence when a joint policy is pruned, it cannot be an optimal solution.",
                "PROPOSITION 3.",
                "Error bound on the solution quality for VAX (implemented over SPIDER-ABS) with an approximation parameter of is ρ , where ρ is the number of leaf nodes in the DFS tree.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 827 Proof.",
                "We prove this proposition using mathematical induction on the depth of the DFS tree.",
                "Base case: depth = 1 (i.e. one node).",
                "Best response is computed by iterating through all policies, Πk.",
                "A policy,πk is pruned if ˆv[πk, πk− ] < threshold + .",
                "Thus the best response policy computed by VAX would be at most away from the optimal best response.",
                "Hence the proposition holds for the base case.",
                "Assumption: Proposition holds for d, where 1 ≤ depth ≤ d. We now have to prove that the proposition holds for d + 1.",
                "Without loss of generality, lets assume that the root node of this tree has k children.",
                "Each of this children is of depth ≤ d, and hence from the assumption, the error introduced in kth child is ρk , where ρk is the number of leaf nodes in kth child of the root.",
                "Therefore, ρ = k ρk, where ρ is the number of leaf nodes in the tree.",
                "In SPIDER-ABS, threshold at the root agent, thresspider = k v[πk+ , πk− ].",
                "However, with VAX the threshold at the root agent will be (in the worst case), threshvax = k v[πk+ , πk− ]− k ρk .",
                "Hence, with VAX a joint policy is pruned at the root agent if ˆv[πroot, πroot− ] < threshvax + ⇒ ˆv[πroot, πroot− ] < threshspider − (( k ρk) − 1) ≤ threshspider − ( k ρk) ≤ threshspider − ρ .",
                "Hence proved.",
                "PROPOSITION 4.",
                "For PAX (implemented over SPIDER-ABS) with an input parameter of δ, the solution quality is at least δ 100 v[πroot+,∗ ], where v[πroot+,∗ ] denotes the optimal solution quality.",
                "Proof.",
                "We prove this proposition using mathematical induction on the depth of the DFS tree.",
                "Base case: depth = 1 (i.e. one node).",
                "Best response is computed by iterating through all policies, Πk.",
                "A policy,πk is pruned if δ 100 ˆv[πk, πk− ] < threshold.",
                "Thus the best response policy computed by PAX would be at least δ 100 times the optimal best response.",
                "Hence the proposition holds for the base case.",
                "Assumption: Proposition holds for d, where 1 ≤ depth ≤ d. We now have to prove that the proposition holds for d + 1.",
                "Without loss of generality, lets assume that the root node of this tree has k children.",
                "Each of this children is of depth ≤ d, and hence from the assumption, the solution quality in the kth child is at least δ 100 v[πk+,∗ , πk− ] for PAX.",
                "With SPIDER-ABS, a joint policy is pruned at the root agent if ˆv[πroot, πroot− ] < k v[πk+,∗ , πk− ].",
                "However with PAX, a joint policy is pruned if δ 100 ˆv[πroot, πroot− ] < k δ 100 v[πk+,∗ , πk− ] ⇒ ˆv[πroot, πroot− ] < k v[πk+,∗ , πk− ].",
                "Since the pruning condition at the root agent in PAX is the same as the one in SPIDER-ABS, there is no error introduced at the root agent and all the error is introduced in the children.",
                "Thus, overall solution quality is at least δ 100 of the optimal solution.",
                "Hence proved. 5.",
                "EXPERIMENTAL RESULTS All our experiments were conducted on the sensor network domain from Section 2.",
                "The five network configurations employed are shown in Figure 4.",
                "Algorithms that we experimented with are GOA, SPIDER, SPIDER-ABS, PAX and VAX.",
                "We compare against GOA because it is the only global optimal algorithm that considers more than two agents.",
                "We performed two sets of experiments: (i) firstly, we compared the run-time performance of the above algorithms and (ii) secondly, we experimented with PAX and VAX to study the tradeoff between run-time and solution quality.",
                "Experiments were terminated after 10000 seconds1 .",
                "Figure 5(a) provides run-time comparisons between the optimal algorithms GOA, SPIDER, SPIDER-Abs and the approximate algorithms, PAX ( of 30) and VAX(δ of 80).",
                "X-axis denotes the 1 Machine specs for all experiments: Intel Xeon 3.6 GHZ processor, 2GB RAM sensor network configuration used, while Y-axis indicates the runtime (on a log-scale).",
                "The time horizon of policy computation was 3.",
                "For each configuration (3-chain, 4-chain, 4-star and 5-star), there are five bars indicating the time taken by GOA, SPIDER, SPIDERAbs, PAX and VAX.",
                "GOA did not terminate within the time limit for 4-star and 5-star configurations.",
                "SPIDER-Abs dominated the SPIDER and GOA for all the configurations.",
                "For instance, in the 3chain configuration, SPIDER-ABS provides 230-fold speedup over GOA and 2-fold speedup over SPIDER and for the 4-chain configuration it provides 58-fold speedup over GOA and 2-fold speedup over SPIDER.",
                "The two approximation approaches, VAX and PAX provided further improvement in performance over SPIDER-Abs.",
                "For instance, in the 5-star configuration VAX provides a 15-fold speedup and PAX provides a 8-fold speedup over SPIDER-Abs.",
                "Figures 5(b) provides a comparison of the solution quality obtained using the different algorithms for the problems tested in Figure 5(a).",
                "X-axis denotes the sensor network configuration while Y-axis indicates the solution quality.",
                "Since GOA, SPIDER, and SPIDER-Abs are all global optimal algorithms, the solution quality is the same for all those algorithms.",
                "For 5-P configuration, the global optimal algorithms did not terminate within the limit of 10000 seconds, so the bar for optimal quality indicates an upper bound on the optimal solution quality.",
                "With both the approximations, we obtained a solution quality that was close to the optimal solution quality.",
                "In 3-chain and 4-star configurations, it is remarkable that both PAX and VAX obtained almost the same actual quality as the global optimal algorithms, despite the approximation parameter and δ.",
                "For other configurations as well, the loss in quality was less than 20% of the optimal solution quality.",
                "Figure 5(c) provides the time to solution with PAX (for varying epsilons).",
                "X-axis denotes the approximation parameter, δ (percentage to optimal) used, while Y-axis denotes the time taken to compute the solution (on a log-scale).",
                "The time horizon for all the configurations was 4.",
                "As δ was decreased from 70 to 30, the time to solution decreased drastically.",
                "For instance, in the 3-chain case there was a total speedup of 170-fold when the δ was changed from 70 to 30.",
                "Interestingly, even with a low δ of 30%, the actual solution quality remained equal to the one obtained at 70%.",
                "Figure 5(d) provides the time to solution for all the configurations with VAX (for varying epsilons).",
                "X-axis denotes the approximation parameter, used, while Y-axis denotes the time taken to compute the solution (on a log-scale).",
                "The time horizon for all the configurations was 4.",
                "As was increased, the time to solution decreased drastically.",
                "For instance, in the 4-star case there was a total speedup of 73-fold when the was changed from 60 to 140.",
                "Again, the actual solution quality did not change with varying epsilon.",
                "Figure 4: Sensor network configurations 828 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Figure 5: Comparison of GOA, SPIDER, SPIDER-Abs and VAX for T = 3 on (a) Runtime and (b) Solution quality; (c) Time to solution for PAX with varying percentage to optimal for T=4 (d) Time to solution for VAX with varying epsilon for T=4 6.",
                "SUMMARY AND RELATED WORK This paper presents four algorithms SPIDER, SPIDER-ABS, PAX and VAX that provide a novel combination of features for policy search in distributed POMDPs: (i) exploiting agent interaction structure given a network of agents (i.e. easier scale-up to larger number of agents); (ii) using branch and bound search with an MDP based heuristic function; (iii) utilizing abstraction to improve runtime performance without sacrificing solution quality; (iv) providing a priori percentage bounds on quality of solutions using PAX; and (v) providing expected value bounds on the quality of solutions using VAX.",
                "These features allow for systematic tradeoff of solution quality for run-time in networks of agents operating under uncertainty.",
                "Experimental results show orders of magnitude improvement in performance over previous global optimal algorithms.",
                "Researchers have typically employed two types of techniques for solving distributed POMDPs.",
                "The first set of techniques compute global optimal solutions.",
                "Hansen et al. [5] present an algorithm based on dynamic programming and iterated elimination of dominant policies, that provides optimal solutions for distributed POMDPs.",
                "Szer et al. [13] provide an optimal heuristic search method for solving Decentralized POMDPs.",
                "This algorithm is based on the combination of a classical heuristic search algorithm, A∗ and decentralized control theory.",
                "The key differences between SPIDER and MAA* are: (a) Enhancements to SPIDER (VAX and PAX) provide for quality guaranteed approximations, while MAA* is a global optimal algorithm and hence involves significant computational complexity; (b) Due to MAA*s inability to exploit interaction structure, it was illustrated only with two agents.",
                "However, SPIDER has been illustrated for networks of agents; and (c) SPIDER explores the joint policy one agent at a time, while MAA* expands it one time step at a time (simultaneously for all the agents).",
                "The second set of techniques seek approximate policies.",
                "EmeryMontemerlo et al. [4] approximate POSGs as a series of one-step Bayesian games using heuristics to approximate future value, trading off limited lookahead for computational efficiency, resulting in locally optimal policies (with respect to the selected heuristic).",
                "Nair et al. [9]s JESP algorithm uses dynamic programming to reach a local optimum solution for finite horizon decentralized POMDPs.",
                "Peshkin et al. [11] and Bernstein et al. [2] are examples of policy search techniques that search for locally optimal policies.",
                "Though all the above techniques improve the efficiency of policy computation considerably, they are unable to provide error bounds on the quality of the solution.",
                "This aspect of quality bounds differentiates SPIDER from all the above techniques.",
                "Acknowledgements.",
                "This material is based upon work supported by the Defense Advanced Research Projects Agency (DARPA), through the Department of the Interior, NBC, Acquisition Services Division under Contract No.",
                "NBCHD030010.",
                "The views and conclusions contained in this document are those of the authors, and should not be interpreted as representing the official policies, either expressed or implied, of the Defense Advanced Research Projects Agency or the U.S. Government. 7.",
                "REFERENCES [1] R. Becker, S. Zilberstein, V. Lesser, and C.V. Goldman.",
                "Solving transition independent decentralized Markov decision processes.",
                "JAIR, 22:423-455, 2004. [2] D. S. Bernstein, E.A.",
                "Hansen, and S. Zilberstein.",
                "Bounded policy iteration for decentralized POMDPs.",
                "In IJCAI, 2005. [3] D. S. Bernstein, S. Zilberstein, and N. Immerman.",
                "The complexity of decentralized control of MDPs.",
                "In UAI, 2000. [4] R. Emery-Montemerlo, G. Gordon, J. Schneider, and S. Thrun.",
                "Approximate solutions for partially observable stochastic games with common payoffs.",
                "In AAMAS, 2004. [5] E. Hansen, D. Bernstein, and S. Zilberstein.",
                "Dynamic programming for partially observable stochastic games.",
                "In AAAI, 2004. [6] V. Lesser, C. Ortiz, and M. Tambe.",
                "Distributed sensor nets: A multiagent perspective.",
                "Kluwer, 2003. [7] R. Maheswaran, M. Tambe, E. Bowring, J. Pearce, and P. Varakantham.",
                "Taking dcop to the real world : Efficient complete solutions for distributed event scheduling.",
                "In AAMAS, 2004. [8] P. J. Modi, W. Shen, M. Tambe, and M. Yokoo.",
                "An asynchronous complete method for distributed constraint optimization.",
                "In AAMAS, 2003. [9] R. Nair, D. Pynadath, M. Yokoo, M. Tambe, and S. Marsella.",
                "Taming decentralized POMDPs: Towards efficient policy computation for multiagent settings.",
                "In IJCAI, 2003. [10] R. Nair, P. Varakantham, M. Tambe, and M. Yokoo.",
                "Networked distributed POMDPs: A synthesis of distributed constraint optimization and POMDPs.",
                "In AAAI, 2005. [11] L. Peshkin, N. Meuleau, K.-E. Kim, and L. Kaelbling.",
                "Learning to cooperate via policy search.",
                "In UAI, 2000. [12] A. Petcu and B. Faltings.",
                "A scalable method for multiagent constraint optimization.",
                "In IJCAI, 2005. [13] D. Szer, F. Charpillet, and S. Zilberstein.",
                "MAA*: A heuristic search algorithm for solving decentralized POMDPs.",
                "In IJCAI, 2005.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 829"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Spider como se menciona en la Sección 3.1, un ND-POMDP puede tratarse como un DCOP, donde el objetivo es calcular una política conjunta que maximice la \"recompensa general conjunta\"."
            ],
            "translated_text": "",
            "candidates": [
                "Recompensa conjunta general",
                "recompensa general conjunta"
            ],
            "error": []
        },
        "maximum constrained node": {
            "translated_key": "nodo máximo restringido",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Letting loose a SPIDER on a network of POMDPs: Generating quality guaranteed policies Pradeep Varakantham, Janusz Marecki, Yuichi Yabu∗ , Milind Tambe, Makoto Yokoo∗ University of Southern California, Los Angeles, CA 90089, {varakant, marecki, tambe}@usc.edu ∗ Dept.",
                "of Intelligent Systems, Kyushu University, Fukuoka, 812-8581 Japan, yokoo@is.kyushu-u.ac.jp ABSTRACT Distributed Partially Observable Markov Decision Problems (Distributed POMDPs) are a popular approach for modeling multi-agent systems acting in uncertain domains.",
                "Given the significant complexity of solving distributed POMDPs, particularly as we scale up the numbers of agents, one popular approach has focused on approximate solutions.",
                "Though this approach is efficient, the algorithms within this approach do not provide any guarantees on solution quality.",
                "A second less popular approach focuses on global optimality, but typical results are available only for two agents, and also at considerable computational cost.",
                "This paper overcomes the limitations of both these approaches by providing SPIDER, a novel combination of three key features for policy generation in distributed POMDPs: (i) it exploits agent interaction structure given a network of agents (i.e. allowing easier scale-up to larger number of agents); (ii) it uses a combination of heuristics to speedup policy search; and (iii) it allows quality guaranteed approximations, allowing a systematic tradeoff of solution quality for time.",
                "Experimental results show orders of magnitude improvement in performance when compared with previous global optimal algorithms.",
                "Categories and Subject Descriptors I.2.11 [Artificial Intelligence]: Distributed Artificial IntelligenceMulti-agent Systems General Terms Algorithms, Theory 1.",
                "INTRODUCTION Distributed Partially Observable Markov Decision Problems (Distributed POMDPs) are emerging as a popular approach for modeling sequential decision making in teams operating under uncertainty [9, 4, 1, 2, 13].",
                "The uncertainty arises on account of nondeterminism in the outcomes of actions and because the world state may only be partially (or incorrectly) observable.",
                "Unfortunately, as shown by Bernstein et al. [3], the problem of finding the optimal joint policy for general distributed POMDPs is NEXP-Complete.",
                "Researchers have attempted two different types of approaches towards solving these models.",
                "The first category consists of highly efficient approximate techniques, that may not reach globally optimal solutions [2, 9, 11].",
                "The key problem with these techniques has been their inability to provide any guarantees on the quality of the solution.",
                "In contrast, the second less popular category of approaches has focused on a global optimal result [13, 5, 10].",
                "Though these approaches obtain optimal solutions, they typically consider only two agents.",
                "Furthermore, they fail to exploit structure in the interactions of the agents and hence are severely hampered with respect to scalability when considering more than two agents.",
                "To address these problems with the existing approaches, we propose approximate techniques that provide guarantees on the quality of the solution while focussing on a network of more than two agents.",
                "We first propose the basic SPIDER (Search for Policies In Distributed EnviRonments) algorithm.",
                "There are two key novel features in SPIDER: (i) it is a branch and bound heuristic search technique that uses a MDP-based heuristic function to search for an optimal joint policy; (ii) it exploits network structure of agents by organizing agents into a Depth First Search (DFS) pseudo tree and takes advantage of the independence in the different branches of the DFS tree.",
                "We then provide three enhancements to improve the efficiency of the basic SPIDER algorithm while providing guarantees on the quality of the solution.",
                "The first enhancement uses abstractions for speedup, but does not sacrifice solution quality.",
                "In particular, it initially performs branch and bound search on abstract policies and then extends to complete policies.",
                "The second enhancement obtains speedups by sacrificing solution quality, but within an input parameter that provides the tolerable expected value difference from the optimal solution.",
                "The third enhancement is again based on bounding the search for efficiency, however with a tolerance parameter that is provided as a percentage of optimal.",
                "We experimented with the sensor network domain presented in Nair et al. [10], a domain representative of an important class of problems with networks of agents working in uncertain environments.",
                "In our experiments, we illustrate that SPIDER dominates an existing global optimal approach called GOA [10], the only known global optimal algorithm with demonstrated experimental results for more than two agents.",
                "Furthermore, we demonstrate that abstraction improves the performance of SPIDER significantly (while providing optimal solutions).",
                "We finally demonstrate a key feature of SPIDER: by utilizing the approximation enhancements it enables principled tradeoffs in run-time versus solution quality. 822 978-81-904262-7-5 (RPS) c 2007 IFAAMAS 2.",
                "DOMAIN: DISTRIBUTED SENSOR NETS Distributed sensor networks are a large, important class of domains that motivate our work.",
                "This paper focuses on a set of target tracking problems that arise in certain types of sensor networks [6] first introduced in [10].",
                "Figure 1 shows a specific problem instance within this type consisting of three sensors.",
                "Here, each sensor node can scan in one of four directions: North, South, East or West (see Figure 1).",
                "To track a target and obtain associated reward, two sensors with overlapping scanning areas must coordinate by scanning the same area simultaneously.",
                "In Figure 1, to track a target in Loc11, sensor1 needs to scan East and sensor2 needs to scan West simultaneously.",
                "Thus, sensors have to act in a coordinated fashion.",
                "We assume that there are two independent targets and that each targets movement is uncertain and unaffected by the sensor agents.",
                "Based on the area it is scanning, each sensor receives observations that can have false positives and false negatives.",
                "The sensors observations and transitions are independent of each others actions e.g.the observations that sensor1 receives are independent of sensor2s actions.",
                "Each agent incurs a cost for scanning whether the target is present or not, but no cost if it turns off.",
                "Given the sensors observational uncertainty, the targets uncertain transitions and the distributed nature of the sensor nodes, these sensor nets provide a useful domains for applying distributed POMDP models.",
                "Figure 1: A 3-chain sensor configuration 3.",
                "BACKGROUND 3.1 Model: Network Distributed POMDP The ND-POMDP model was introduced in [10], motivated by domains such as the sensor networks introduced in Section 2.",
                "It is defined as the tuple S, A, P, Ω, O, R, b , where S = ×1≤i≤nSi × Su is the set of world states.",
                "Si refers to the set of local states of agent i and Su is the set of unaffectable states.",
                "Unaffectable state refers to that part of the world state that cannot be affected by the agents actions, e.g. environmental factors like target locations that no agent can control.",
                "A = ×1≤i≤nAi is the set of joint actions, where Ai is the set of action for agent i. ND-POMDP assumes transition independence, where the transition function is defined as P(s, a, s ) = Pu(su, su) · 1≤i≤n Pi(si, su, ai, si), where a = a1, . . . , an is the joint action performed in state s = s1, . . . , sn, su and s = s1, . . . , sn, su is the resulting state.",
                "Ω = ×1≤i≤nΩi is the set of joint observations where Ωi is the set of observations for agents i. Observational independence is assumed in ND-POMDPs i.e., the joint observation function is defined as O(s, a, ω) = 1≤i≤n Oi(si, su, ai, ωi), where s = s1, . . . , sn, su is the world state that results from the agents performing a = a1, . . . , an in the previous state, and ω = ω1, . . . , ωn ∈ Ω is the observation received in state s. This implies that each agents observation depends only on the unaffectable state, its local action and on its resulting local state.",
                "The reward function, R, is defined as R(s, a) = l Rl(sl1, . . . , slr, su, al1, . . . , alr ), where each l could refer to any sub-group of agents and r = |l|.",
                "Based on the reward function, an interaction hypergraph is constructed.",
                "A hyper-link, l, exists between a subset of agents for all Rl that comprise R. The interaction hypergraph is defined as G = (Ag, E), where the agents, Ag, are the vertices and E = {l|l ⊆ Ag ∧ Rl is a component of R} are the edges.",
                "The initial belief state (distribution over the initial state), b, is defined as b(s) = bu(su) · 1≤i≤n bi(si), where bu and bi refer to the distribution over initial unaffectable state and agent is initial belief state, respectively.",
                "The goal in ND-POMDP is to compute the joint policy π = π1, . . . , πn that maximizes teams expected reward over a finite horizon T starting from the belief state b.",
                "An ND-POMDP is similar to an n-ary Distributed Constraint Optimization Problem (DCOP)[8, 12] where the variable at each node represents the policy selected by an individual agent, πi with the domain of the variable being the set of all local policies, Πi.",
                "The reward component Rl where |l| = 1 can be thought of as a local constraint while the reward component Rl where l > 1 corresponds to a non-local constraint in the constraint graph. 3.2 Algorithm: Global Optimal Algorithm (GOA) In previous work, GOA has been defined as a global optimal algorithm for ND-POMDPs [10].",
                "We will use GOA in our experimental comparisons, since GOA is a state-of-the-art global optimal algorithm, and in fact the only one with experimental results available for networks of more than two agents.",
                "GOA borrows from a global optimal DCOP algorithm called DPOP[12].",
                "GOAs message passing follows that of DPOP.",
                "The first phase is the UTIL propagation, where the utility messages, in this case values of policies, are passed up from the leaves to the root.",
                "Value for a policy at an agent is defined as the sum of best response values from its children and the joint policy reward associated with the parent policy.",
                "Thus, given a policy for a parent node, GOA requires an agent to iterate through all its policies, finding the best response policy and returning the value to the parent - while at the parent node, to find the best policy, an agent requires its children to return their best responses to each of its policies.",
                "This UTIL propagation process is repeated at each level in the tree, until the root exhausts all its policies.",
                "In the second phase of VALUE propagation, where the optimal policies are passed down from the root till the leaves.",
                "GOA takes advantage of the local interactions in the interaction graph, by pruning out unnecessary joint policy evaluations (associated with nodes not connected directly in the tree).",
                "Since the interaction graph captures all the reward interactions among agents and as this algorithm iterates through all the relevant joint policy evaluations, this algorithm yields a globally optimal solution. 4.",
                "SPIDER As mentioned in Section 3.1, an ND-POMDP can be treated as a DCOP, where the goal is to compute a joint policy that maximizes the overall joint reward.",
                "The brute-force technique for computing an optimal policy would be to examine the expected values for all possible joint policies.",
                "The key idea in SPIDER is to avoid computation of expected values for the entire space of joint policies, by utilizing upper bounds on the expected values of policies and the interaction structure of the agents.",
                "Akin to some of the algorithms for DCOP [8, 12], SPIDER has a pre-processing step that constructs a DFS tree corresponding to the given interaction structure.",
                "Note that these DFS trees are pseudo trees [12] that allow links between ancestors and children.",
                "We employ the <br>maximum constrained node</br> (MCN) heuristic used in the DCOP algorithm, ADOPT [8], however other heuristics (such as MLSP heuristic from [7]) can also be employed.",
                "MCN heuristic tries to place agents with more number of constraints at the top of the tree.",
                "This tree governs how the search for the optimal joint polThe Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 823 icy proceeds in SPIDER.",
                "The algorithms presented in this paper are easily extendable to hyper-trees, however for expository purposes, we assume binary trees.",
                "SPIDER is an algorithm for centralized planning and distributed execution in distributed POMDPs.",
                "In this paper, we employ the following notation to denote policies and expected values: Ancestors(i) ⇒ agents from i to the root (not including i).",
                "Tree(i) ⇒ agents in the sub-tree (not including i) for which i is the root. πroot+ ⇒ joint policy of all agents. πi+ ⇒ joint policy of all agents in Tree(i) ∪ i. πi− ⇒ joint policy of agents that are in Ancestors(i). πi ⇒ policy of the ith agent. ˆv[πi, πi− ] ⇒ upper bound on the expected value for πi+ given πi and policies of ancestor agents i.e. πi− . ˆvj[πi, πi− ] ⇒ upper bound on the expected value for πi+ from the jth child. v[πi, πi− ] ⇒ expected value for πi given policies of ancestor agents, πi− . v[πi+ , πi− ] ⇒ expected value for πi+ given policies of ancestor agents, πi− . vj[πi+ , πi− ] ⇒ expected value for πi+ from the jth child.",
                "Figure 2: Execution of SPIDER, an example 4.1 Outline of SPIDER SPIDER is based on the idea of branch and bound search, where the nodes in the search tree represent partial/complete joint policies.",
                "Figure 2 shows an example search tree for the SPIDER algorithm, using an example of the three agent chain.",
                "Before SPIDER begins its search we create a DFS tree (i.e. pseudo tree) from the three agent chain, with the middle agent as the root of this tree.",
                "SPIDER exploits the structure of this DFS tree while engaging in its search.",
                "Note that in our example figure, each agent is assigned a policy with T=2.",
                "Thus, each rounded rectange (search tree node) indicates a partial/complete joint policy, a rectangle indicates an agent and the ovals internal to an agent show its policy.",
                "Heuristic or actual expected value for a joint policy is indicated in the top right corner of the rounded rectangle.",
                "If the number is italicized and underlined, it implies that the actual expected value of the joint policy is provided.",
                "SPIDER begins with no policy assigned to any of the agents (shown in the level 1 of the search tree).",
                "Level 2 of the search tree indicates that the joint policies are sorted based on upper bounds computed for root agents policies.",
                "Level 3 shows one SPIDER search node with a complete joint policy (a policy assigned to each of the agents).",
                "The expected value for this joint policy is used to prune out the nodes in level 2 (the ones with upper bounds < 234) When creating policies for each non-leaf agent i, SPIDER potentially performs two steps: 1.",
                "Obtaining upper bounds and sorting: In this step, agent i computes upper bounds on the expected values, ˆv[πi, πi− ] of the joint policies πi+ corresponding to each of its policy πi and fixed ancestor policies.",
                "An MDP based heuristic is used to compute these upper bounds on the expected values.",
                "Detailed description about this MDP heuristic is provided in Section 4.2.",
                "All policies of agent i, Πi are then sorted based on these upper bounds (also referred to as heuristic values henceforth) in descending order.",
                "Exploration of these policies (in step 2 below) are performed in this descending order.",
                "As indicated in the level 2 of the search tree (of Figure 2), all the joint policies are sorted based on the heuristic values, indicated in the top right corner of each joint policy.",
                "The intuition behind sorting and then exploring policies in descending order of upper bounds, is that the policies with higher upper bounds could yield joint policies with higher expected values. 2.",
                "Exploration and Pruning: Exploration implies computing the best response joint policy πi+,∗ corresponding to fixed ancestor policies of agent i, πi− .",
                "This is performed by iterating through all policies of agent i i.e.",
                "Πi and summing two quantities for each policy: (i) the best response for all of is children (obtained by performing steps 1 and 2 at each of the child nodes); (ii) the expected value obtained by i for fixed policies of ancestors.",
                "Thus, exploration of a policy πi yields actual expected value of a joint policy, πi+ represented as v[πi+ , πi− ].",
                "The policy with the highest expected value is the best response policy.",
                "Pruning refers to avoiding exploring all policies (or computing expected values) at agent i by using the current best expected value, vmax [πi+ , πi− ].",
                "Henceforth, this vmax [πi+ , πi− ] will be referred to as threshold.",
                "A policy, πi need not be explored if the upper bound for that policy, ˆv[πi, πi− ] is less than the threshold.",
                "This is because the expected value for the best joint policy attainable for that policy will be less than the threshold.",
                "On the other hand, when considering a leaf agent, SPIDER computes the best response policy (and consequently its expected value) corresponding to fixed policies of its ancestors, πi− .",
                "This is accomplished by computing expected values for each of the policies (corresponding to fixed policies of ancestors) and selecting the highest expected value policy.",
                "In Figure 2, SPIDER assigns best response policies to leaf agents at level 3.",
                "The policy for the left leaf agent is to perform action East at each time step in the policy, while the policy for the right leaf agent is to perform Off at each time step.",
                "These best response policies from the leaf agents yield an actual expected value of 234 for the complete joint policy.",
                "Algorithm 1 provides the pseudo code for SPIDER.",
                "This algorithm outputs the best joint policy, πi+,∗ (with an expected value greater than threshold) for the agents in Tree(i).",
                "Lines 3-8 compute the best response policy of a leaf agent i, while lines 9-23 computes the best response joint policy for agents in Tree(i).",
                "This best response computation for a non-leaf agent i includes: (a) Sorting of policies (in descending order) based on heuristic values on line 11; (b) Computing best response policies at each of the children for fixed policies of agent i in lines 16-20; and (c) Maintaining 824 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Algorithm 1 SPIDER(i, πi− , threshold) 1: πi+,∗ ← null 2: Πi ← GET-ALL-POLICIES (horizon, Ai, Ωi) 3: if IS-LEAF(i) then 4: for all πi ∈ Πi do 5: v[πi, πi−] ← JOINT-REWARD (πi, πi−) 6: if v[πi, πi−] > threshold then 7: πi+,∗ ← πi 8: threshold ← v[πi, πi−] 9: else 10: children ← CHILDREN (i) 11: ˆΠi ← UPPER-BOUND-SORT(i, Πi, πi−) 12: for all πi ∈ ˆΠi do 13: ˜πi+ ← πi 14: if ˆv[πi, πi−] < threshold then 15: Go to line 12 16: for all j ∈ children do 17: jThres ← threshold − v[πi, πi−]− Σk∈children,k=j ˆvk[πi, πi−] 18: πj+,∗ ← SPIDER(j, πi πi−, jThres) 19: ˜πi+ ← ˜πi+ πj+,∗ 20: ˆvj[πi, πi−] ← v[πj+,∗, πi πi−] 21: if v[˜πi+, πi−] > threshold then 22: threshold ← v[˜πi+, πi−] 23: πi+,∗ ← ˜πi+ 24: return πi+,∗ Algorithm 2 UPPER-BOUND-SORT(i, Πi, πi− ) 1: children ← CHILDREN (i) 2: ˆΠi ← null /* Stores the sorted list */ 3: for all πi ∈ Πi do 4: ˆv[πi, πi−] ← JOINT-REWARD (πi, πi−) 5: for all j ∈ children do 6: ˆvj[πi, πi−] ← UPPER-BOUND(i, j, πi πi−) 7: ˆv[πi, πi−] + ← ˆvj[πi, πi−] 8: ˆΠi ← INSERT-INTO-SORTED (πi, ˆΠi) 9: return ˆΠi best expected value, joint policy in lines 21-23.",
                "Algorithm 2 provides the pseudo code for sorting policies based on the upper bounds on the expected values of joint policies.",
                "Expected value for an agent i consists of two parts: value obtained from ancestors and value obtained from its children.",
                "Line 4 computes the expected value obtained from ancestors of the agent (using JOINT-REWARD function), while lines 5-7 compute the heuristic value from the children.",
                "The sum of these two parts yields an upper bound on the expected value for agent i, and line 8 of the algorithm sorts the policies based on these upper bounds. 4.2 MDP based heuristic function The heuristic function quickly provides an upper bound on the expected value obtainable from the agents in Tree(i).",
                "The subtree of agents is a distributed POMDP in itself and the idea here is to construct a centralized MDP corresponding to the (sub-tree) distributed POMDP and obtain the expected value of the optimal policy for this centralized MDP.",
                "To reiterate this in terms of the agents in DFS tree interaction structure, we assume full observability for the agents in Tree(i) and for fixed policies of the agents in {Ancestors(i) ∪ i}, we compute the joint value ˆv[πi+ , πi− ] .",
                "We use the following notation for presenting the equations for computing upper bounds/heuristic values (for agents i and k): Let Ei− denote the set of links between agents in {Ancestors(i)∪ i} and Tree(i), Ei+ denote the set of links between agents in Tree(i).",
                "Also, if l ∈ Ei− , then l1 is the agent in {Ancestors(i)∪ i} and l2 is the agent in Tree(i), that l connects together.",
                "We first compact the standard notation: ot k =Ok(st+1 k , st+1 u , πk(ωt k), ωt+1 k ) (1) pt k =Pk(st k, st u, πk(ωt k), st+1 k ) · ot k pt u =P(st u, st+1 u ) st l = st l1 , st l2 , st u ; ωt l = ωt l1 , ωt l2 rt l =Rl(st l , πl1 (ωt l1 ), πl2 (ωt l2 )) vt l =V t πl (st l , st u, ωt l1 , ωt l2 ) Depending on the location of agent k in the agent tree we have the following cases: IF k ∈ {Ancestors(i) ∪ i}, ˆpt k = pt k, (2) IF k ∈ Tree(i), ˆpt k = Pk(st k, st u, πk(ωt k), st+1 k ) IF l ∈ Ei− , ˆrt l = max {al2 } Rl(st l , πl1 (ωt l1 ), al2 ) IF l ∈ Ei+ , ˆrt l = max {al1 ,al2 } Rl(st l , al1 , al2 ) The value function for an agent i executing the joint policy πi+ at time η − 1 is provided by the equation: V η−1 πi+ (sη−1 , ωη−1 ) = l∈Ei− vη−1 l + l∈Ei+ vη−1 l (3) where vη−1 l = rη−1 l + ω η l ,sη pη−1 l1 pη−1 l2 pη−1 u vη l Algorithm 3 UPPER-BOUND (i, j, πj− ) 1: val ← 0 2: for all l ∈ Ej− ∪ Ej+ do 3: if l ∈ Ej− then πl1 ← φ 4: for all s0 l do 5: val + ← startBel[s0 l ]· UPPER-BOUND-TIME (i, s0 l , j, πl1 , ) 6: return val Algorithm 4 UPPER-BOUND-TIME (i, st l , j, πl1 , ωt l1 ) 1: maxV al ← −∞ 2: for all al1 , al2 do 3: if l ∈ Ei− and l ∈ Ej− then al1 ← πl1 (ωt l1 ) 4: val ← GET-REWARD(st l , al1 , al2 ) 5: if t < πi.horizon − 1 then 6: for all st+1 l , ωt+1 l1 do 7: futV al←pt u ˆpt l1 ˆpt l2 8: futV al ∗ ← UPPER-BOUND-TIME(st+1 l , j, πl1 , ωt l1 ωt+1 l1 ) 9: val + ← futV al 10: if val > maxV al then maxV al ← val 11: return maxV al Upper bound on the expected value for a link is computed by modifying the equation 3 to reflect the full observability assumption.",
                "This involves removing the observational probability term for agents in Tree(i) and maximizing the future value ˆvη l over the actions of those agents (in Tree(i)).",
                "Thus, the equation for the The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 825 computation of the upper bound on a link l, is as follows: IF l ∈ Ei− , ˆvη−1 l =ˆrη−1 l + max al2 ω η l1 ,s η l ˆpη−1 l1 ˆpη−1 l2 pη−1 u ˆvη l IF l ∈ Ei+ , ˆvη−1 l =ˆrη−1 l + max al1 ,al2 s η l ˆpη−1 l1 ˆpη−1 l2 pη−1 u ˆvη l Algorithm 3 and Algorithm 4 provide the algorithm for computing upper bound for child j of agent i, using the equations descirbed above.",
                "While Algorithm 4 computes the upper bound on a link given the starting state, Algorithm 3 sums the upper bound values computed over each of the links in Ei− ∪ Ei+ . 4.3 Abstraction Algorithm 5 SPIDER-ABS(i, πi− , threshold) 1: πi+,∗ ← null 2: Πi ← GET-POLICIES (<>, 1) 3: if IS-LEAF(i) then 4: for all πi ∈ Πi do 5: absHeuristic ← GET-ABS-HEURISTIC (πi, πi−) 6: absHeuristic ∗ ← (timeHorizon − πi.horizon) 7: if πi.horizon = timeHorizon and πi.absNodes = 0 then 8: v[πi, πi−] ← JOINT-REWARD (πi, πi−) 9: if v[πi, πi−] > threshold then 10: πi+,∗ ← πi; threshold ← v[πi, πi−] 11: else if v[πi, πi−] + absHeuristic > threshold then 12: ˆΠi ← EXTEND-POLICY (πi, πi.absNodes + 1) 13: Πi + ← INSERT-SORTED-POLICIES ( ˆΠi) 14: REMOVE(πi) 15: else 16: children ← CHILDREN (i) 17: Πi ← UPPER-BOUND-SORT(i, Πi, πi−) 18: for all πi ∈ Πi do 19: ˜πi+ ← πi 20: absHeuristic ← GET-ABS-HEURISTIC (πi, πi−) 21: absHeuristic ∗ ← (timeHorizon − πi.horizon) 22: if πi.horizon = timeHorizon and πi.absNodes = 0 then 23: if ˆv[πi, πi−] < threshold and πi.absNodes = 0 then 24: Go to line 19 25: for all j ∈ children do 26: jThres ← threshold − v[πi, πi−]− Σk∈children,k=j ˆvk[πi, πi−] 27: πj+,∗ ← SPIDER(j, πi πi−, jThres) 28: ˜πi+ ← ˜πi+ πj+,∗; ˆvj[πi, πi−] ← v[πj+,∗, πi πi−] 29: if v[˜πi+, πi−] > threshold then 30: threshold ← v[˜πi+, πi−]; πi+,∗ ← ˜πi+ 31: else if ˆv[πi+, πi−] + absHeuristic > threshold then 32: ˆΠi ← EXTEND-POLICY (πi, πi.absNodes + 1) 33: Πi + ← INSERT-SORTED-POLICIES (ˆΠi) 34: REMOVE(πi) 35: return πi+,∗ In SPIDER, the exploration/pruning phase can only begin after the heuristic (or upper bound) computation and sorting for the policies has ended.",
                "We provide an approach to possibly circumvent the exploration of a group of policies based on heuristic computation for one abstract policy, thus leading to an improvement in runtime performance (without loss in solution quality).",
                "The important steps in this technique are defining the abstract policy and how heuristic values are computated for the abstract policies.",
                "In this paper, we propose two types of abstraction: 1.",
                "Horizon Based Abstraction (HBA): Here, the abstract policy is defined as a shorter horizon policy.",
                "It represents a group of longer horizon policies that have the same actions as the abstract policy for times less than or equal to the horizon of the abstract policy.",
                "In Figure 3(a), a T=1 abstract policy that performs East action, represents a group of T=2 policies, that perform East in the first time step.",
                "For HBA, there are two parts to heuristic computation: (a) Computing the upper bound for the horizon of the abstract policy.",
                "This is same as the heuristic computation defined by the GETHEURISTIC() algorithm for SPIDER, however with a shorter time horizon (horizon of the abstract policy). (b) Computing the maximum possible reward that can be accumulated in one time step (using GET-ABS-HEURISTIC()) and multiplying it by the number of time steps to time horizon.",
                "This maximum possible reward (for one time step) is obtained by iterating through all the actions of all the agents in Tree(i) and computing the maximum joint reward for any joint action.",
                "Sum of (a) and (b) is the heuristic value for a HBA abstract policy. 2.",
                "Node Based Abstraction (NBA): Here an abstract policy is obtained by not associating actions to certain nodes of the policy tree.",
                "Unlike in HBA, this implies multiple levels of abstraction.",
                "This is illustrated in Figure 3(b), where there are T=2 policies that do not have an action for observation TP.",
                "These incomplete T=2 policies are abstractions for T=2 complete policies.",
                "Increased levels of abstraction leads to faster computation of a complete joint policy, πroot+ and also to shorter heuristic computation and exploration, pruning phases.",
                "For NBA, the heuristic computation is similar to that of a normal policy, except in cases where there is no action associated with policy nodes.",
                "In such cases, the immediate reward is taken as Rmax (maximum reward for any action).",
                "We combine both the abstraction techniques mentioned above into one technique, SPIDER-ABS.",
                "Algorithm 5 provides the algorithm for this abstraction technique.",
                "For computing optimal joint policy with SPIDER-ABS, a non-leaf agent i initially examines all abstract T=1 policies (line 2) and sorts them based on abstract policy heuristic computations (line 17).",
                "The abstraction horizon is gradually increased and these abstract policies are then explored in descending order of heuristic values and ones that have heuristic values less than the threshold are pruned (lines 23-24).",
                "Exploration in SPIDER-ABS has the same definition as in SPIDER if the policy being explored has a horizon of policy computation which is equal to the actual time horizon and if all the nodes of the policy have an action associated with them (lines 25-30).",
                "However, if those conditions are not met, then it is substituted by a group of policies that it represents (using EXTEND-POLICY () function) (lines 31-32).",
                "EXTEND-POLICY() function is also responsible for initializing the horizon and absNodes of a policy. absNodes represents the number of nodes at the last level in the policy tree, that do not have an action assigned to them.",
                "If πi.absNodes = |Ωi|πi.horizon−1 (i.e. total number of policy nodes possible at πi.horizon) , then πi.absNodes is set to zero and πi.horizon is increased by 1.",
                "Otherwise, πi.absNodes is increased by 1.",
                "Thus, this function combines both HBA and NBA by using the policy variables, horizon and absNodes.",
                "Before substituting the abstract policy with a group of policies, those policies are sorted based on heuristic values (line 33).",
                "Similar type of abstraction based best response computation is adopted at leaf agents (lines 3-14). 4.4 Value ApproXimation (VAX) In this section, we present an approximate enhancement to SPIDER called VAX.",
                "The input to this technique is an approximation parameter , which determines the difference from the optimal solution quality.",
                "This approximation parameter is used at each agent for pruning out joint policies.",
                "The pruning mechanism in SPIDER and SPIDER-Abs dictates that a joint policy be pruned only if the threshold is exactly greater than the heuristic value.",
                "However, the 826 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Figure 3: Example of abstraction for (a) HBA (Horizon Based Abstraction) and (b) NBA (Node Based Abstraction) idea in this technique is to prune out joint a policy if the following condition is satisfied: threshold + > ˆv[πi , πi− ].",
                "Apart from the pruning condition, VAX is the same as SPIDER/SPIDER-ABS.",
                "In the example of Figure 2, if the heuristic value for the second joint policy (or second search tree node) in level 2 were 238 instead of 232, then that policy could not be be pruned using SPIDER or SPIDER-Abs.",
                "However, in VAX with an approximation parameter of 5, the joint policy in consideration would also be pruned.",
                "This is because the threshold (234) at that juncture plus the approximation parameter (5), i.e. 239 would have been greater than the heuristic value for that joint policy (238).",
                "It can be noted from the example (just discussed) that this kind of pruning can lead to fewer explorations and hence lead to an improvement in the overall run-time performance.",
                "However, this can entail a sacrifice in the quality of the solution because this technique can prune out a candidate optimal solution.",
                "A bound on the error introduced by this approximate algorithm as a function of , is provided by Proposition 3. 4.5 Percentage ApproXimation (PAX) In this section, we present the second approximation enhancement over SPIDER called PAX.",
                "Input to this technique is a parameter, δ that represents the minimum percentage of the optimal solution quality that is desired.",
                "Output of this technique is a policy with an expected value that is at least δ% of the optimal solution quality.",
                "A policy is pruned if the following condition is satisfied: threshold > δ 100 ˆv[πi , πi− ].",
                "Like in VAX, the only difference between PAX and SPIDER/SPIDER-ABS is this pruning condition.",
                "Again in Figure 2, if the heuristic value for the second search tree node in level 2 were 238 instead of 232, then PAX with an input parameter of 98% would be able to prune that search tree node (since 98 100 ∗238 < 234).",
                "This type of pruning leads to fewer explorations and hence an improvement in run-time performance, while potentially leading to a loss in quality of the solution.",
                "Proposition 4 provides the bound on quality loss. 4.6 Theoretical Results PROPOSITION 1.",
                "Heuristic provided using the centralized MDP heuristic is admissible.",
                "Proof.",
                "For the value provided by the heuristic to be admissible, it should be an over estimate of the expected value for a joint policy.",
                "Thus, we need to show that: For l ∈ Ei+ ∪ Ei− : ˆvt l ≥ vt l (refer to notation in Section 4.2) We use mathematical induction on t to prove this.",
                "Base case: t = T − 1.",
                "Irrespective of whether l ∈ Ei− or l ∈ Ei+ , ˆrt l is computed by maximizing over all actions of the agents in Tree(i), while rt l is computed for fixed policies of the same agents.",
                "Hence, ˆrt l ≥ rt l and also ˆvt l ≥ vt l .",
                "Assumption: Proposition holds for t = η, where 1 ≤ η < T − 1.",
                "We now have to prove that the proposition holds for t = η − 1.",
                "We show the proof for l ∈ Ei− and similar reasoning can be adopted to prove for l ∈ Ei+ .",
                "The heuristic value function for l ∈ Ei− is provided by the following equation: ˆvη−1 l =ˆrη−1 l + max al2 ω η l1 ,s η l ˆpη−1 l1 ˆpη−1 l2 pη−1 u ˆvη l Rewriting the RHS and using Eqn 2 (in Section 4.2) =ˆrη−1 l + max al2 ω η l1 ,s η l pη−1 u pη−1 l1 ˆpη−1 l2 ˆvη l =ˆrη−1 l + ω η l1 ,s η l pη−1 u pη−1 l1 max al2 ˆpη−1 l2 ˆvη l Since maxal2 ˆpη−1 l2 ˆvη l ≥ ωl2 oη−1 l2 ˆpη−1 l2 ˆvη l and pη−1 l2 = oη−1 l2 ˆpη−1 l2 ≥ˆrη−1 l + ω η l1 ,s η l pη−1 u pη−1 l1 ωl2 pη−1 l2 ˆvη l Since ˆvη l ≥ vη l (from the assumption) ≥ˆrη−1 l + ω η l1 ,s η l pη−1 u pη−1 l1 ωl2 pη−1 l2 vη l Since ˆrη−1 l ≥ rη−1 l (by definition) ≥rη−1 l + ω η l1 ,s η l pη−1 u pη−1 l1 ωl2 pη−1 l2 vη l =rη−1 l + (ω η l ,s η l ) pη−1 u pη−1 l1 pη−1 l2 vη l = vη−1 l Thus proved.",
                "PROPOSITION 2.",
                "SPIDER provides an optimal solution.",
                "Proof.",
                "SPIDER examines all possible joint policies given the interaction structure of the agents.",
                "The only exception being when a joint policy is pruned based on the heuristic value.",
                "Thus, as long as a candidate optimal policy is not pruned, SPIDER will return an optimal policy.",
                "As proved in Proposition 1, the expected value for a joint policy is always an upper bound.",
                "Hence when a joint policy is pruned, it cannot be an optimal solution.",
                "PROPOSITION 3.",
                "Error bound on the solution quality for VAX (implemented over SPIDER-ABS) with an approximation parameter of is ρ , where ρ is the number of leaf nodes in the DFS tree.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 827 Proof.",
                "We prove this proposition using mathematical induction on the depth of the DFS tree.",
                "Base case: depth = 1 (i.e. one node).",
                "Best response is computed by iterating through all policies, Πk.",
                "A policy,πk is pruned if ˆv[πk, πk− ] < threshold + .",
                "Thus the best response policy computed by VAX would be at most away from the optimal best response.",
                "Hence the proposition holds for the base case.",
                "Assumption: Proposition holds for d, where 1 ≤ depth ≤ d. We now have to prove that the proposition holds for d + 1.",
                "Without loss of generality, lets assume that the root node of this tree has k children.",
                "Each of this children is of depth ≤ d, and hence from the assumption, the error introduced in kth child is ρk , where ρk is the number of leaf nodes in kth child of the root.",
                "Therefore, ρ = k ρk, where ρ is the number of leaf nodes in the tree.",
                "In SPIDER-ABS, threshold at the root agent, thresspider = k v[πk+ , πk− ].",
                "However, with VAX the threshold at the root agent will be (in the worst case), threshvax = k v[πk+ , πk− ]− k ρk .",
                "Hence, with VAX a joint policy is pruned at the root agent if ˆv[πroot, πroot− ] < threshvax + ⇒ ˆv[πroot, πroot− ] < threshspider − (( k ρk) − 1) ≤ threshspider − ( k ρk) ≤ threshspider − ρ .",
                "Hence proved.",
                "PROPOSITION 4.",
                "For PAX (implemented over SPIDER-ABS) with an input parameter of δ, the solution quality is at least δ 100 v[πroot+,∗ ], where v[πroot+,∗ ] denotes the optimal solution quality.",
                "Proof.",
                "We prove this proposition using mathematical induction on the depth of the DFS tree.",
                "Base case: depth = 1 (i.e. one node).",
                "Best response is computed by iterating through all policies, Πk.",
                "A policy,πk is pruned if δ 100 ˆv[πk, πk− ] < threshold.",
                "Thus the best response policy computed by PAX would be at least δ 100 times the optimal best response.",
                "Hence the proposition holds for the base case.",
                "Assumption: Proposition holds for d, where 1 ≤ depth ≤ d. We now have to prove that the proposition holds for d + 1.",
                "Without loss of generality, lets assume that the root node of this tree has k children.",
                "Each of this children is of depth ≤ d, and hence from the assumption, the solution quality in the kth child is at least δ 100 v[πk+,∗ , πk− ] for PAX.",
                "With SPIDER-ABS, a joint policy is pruned at the root agent if ˆv[πroot, πroot− ] < k v[πk+,∗ , πk− ].",
                "However with PAX, a joint policy is pruned if δ 100 ˆv[πroot, πroot− ] < k δ 100 v[πk+,∗ , πk− ] ⇒ ˆv[πroot, πroot− ] < k v[πk+,∗ , πk− ].",
                "Since the pruning condition at the root agent in PAX is the same as the one in SPIDER-ABS, there is no error introduced at the root agent and all the error is introduced in the children.",
                "Thus, overall solution quality is at least δ 100 of the optimal solution.",
                "Hence proved. 5.",
                "EXPERIMENTAL RESULTS All our experiments were conducted on the sensor network domain from Section 2.",
                "The five network configurations employed are shown in Figure 4.",
                "Algorithms that we experimented with are GOA, SPIDER, SPIDER-ABS, PAX and VAX.",
                "We compare against GOA because it is the only global optimal algorithm that considers more than two agents.",
                "We performed two sets of experiments: (i) firstly, we compared the run-time performance of the above algorithms and (ii) secondly, we experimented with PAX and VAX to study the tradeoff between run-time and solution quality.",
                "Experiments were terminated after 10000 seconds1 .",
                "Figure 5(a) provides run-time comparisons between the optimal algorithms GOA, SPIDER, SPIDER-Abs and the approximate algorithms, PAX ( of 30) and VAX(δ of 80).",
                "X-axis denotes the 1 Machine specs for all experiments: Intel Xeon 3.6 GHZ processor, 2GB RAM sensor network configuration used, while Y-axis indicates the runtime (on a log-scale).",
                "The time horizon of policy computation was 3.",
                "For each configuration (3-chain, 4-chain, 4-star and 5-star), there are five bars indicating the time taken by GOA, SPIDER, SPIDERAbs, PAX and VAX.",
                "GOA did not terminate within the time limit for 4-star and 5-star configurations.",
                "SPIDER-Abs dominated the SPIDER and GOA for all the configurations.",
                "For instance, in the 3chain configuration, SPIDER-ABS provides 230-fold speedup over GOA and 2-fold speedup over SPIDER and for the 4-chain configuration it provides 58-fold speedup over GOA and 2-fold speedup over SPIDER.",
                "The two approximation approaches, VAX and PAX provided further improvement in performance over SPIDER-Abs.",
                "For instance, in the 5-star configuration VAX provides a 15-fold speedup and PAX provides a 8-fold speedup over SPIDER-Abs.",
                "Figures 5(b) provides a comparison of the solution quality obtained using the different algorithms for the problems tested in Figure 5(a).",
                "X-axis denotes the sensor network configuration while Y-axis indicates the solution quality.",
                "Since GOA, SPIDER, and SPIDER-Abs are all global optimal algorithms, the solution quality is the same for all those algorithms.",
                "For 5-P configuration, the global optimal algorithms did not terminate within the limit of 10000 seconds, so the bar for optimal quality indicates an upper bound on the optimal solution quality.",
                "With both the approximations, we obtained a solution quality that was close to the optimal solution quality.",
                "In 3-chain and 4-star configurations, it is remarkable that both PAX and VAX obtained almost the same actual quality as the global optimal algorithms, despite the approximation parameter and δ.",
                "For other configurations as well, the loss in quality was less than 20% of the optimal solution quality.",
                "Figure 5(c) provides the time to solution with PAX (for varying epsilons).",
                "X-axis denotes the approximation parameter, δ (percentage to optimal) used, while Y-axis denotes the time taken to compute the solution (on a log-scale).",
                "The time horizon for all the configurations was 4.",
                "As δ was decreased from 70 to 30, the time to solution decreased drastically.",
                "For instance, in the 3-chain case there was a total speedup of 170-fold when the δ was changed from 70 to 30.",
                "Interestingly, even with a low δ of 30%, the actual solution quality remained equal to the one obtained at 70%.",
                "Figure 5(d) provides the time to solution for all the configurations with VAX (for varying epsilons).",
                "X-axis denotes the approximation parameter, used, while Y-axis denotes the time taken to compute the solution (on a log-scale).",
                "The time horizon for all the configurations was 4.",
                "As was increased, the time to solution decreased drastically.",
                "For instance, in the 4-star case there was a total speedup of 73-fold when the was changed from 60 to 140.",
                "Again, the actual solution quality did not change with varying epsilon.",
                "Figure 4: Sensor network configurations 828 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Figure 5: Comparison of GOA, SPIDER, SPIDER-Abs and VAX for T = 3 on (a) Runtime and (b) Solution quality; (c) Time to solution for PAX with varying percentage to optimal for T=4 (d) Time to solution for VAX with varying epsilon for T=4 6.",
                "SUMMARY AND RELATED WORK This paper presents four algorithms SPIDER, SPIDER-ABS, PAX and VAX that provide a novel combination of features for policy search in distributed POMDPs: (i) exploiting agent interaction structure given a network of agents (i.e. easier scale-up to larger number of agents); (ii) using branch and bound search with an MDP based heuristic function; (iii) utilizing abstraction to improve runtime performance without sacrificing solution quality; (iv) providing a priori percentage bounds on quality of solutions using PAX; and (v) providing expected value bounds on the quality of solutions using VAX.",
                "These features allow for systematic tradeoff of solution quality for run-time in networks of agents operating under uncertainty.",
                "Experimental results show orders of magnitude improvement in performance over previous global optimal algorithms.",
                "Researchers have typically employed two types of techniques for solving distributed POMDPs.",
                "The first set of techniques compute global optimal solutions.",
                "Hansen et al. [5] present an algorithm based on dynamic programming and iterated elimination of dominant policies, that provides optimal solutions for distributed POMDPs.",
                "Szer et al. [13] provide an optimal heuristic search method for solving Decentralized POMDPs.",
                "This algorithm is based on the combination of a classical heuristic search algorithm, A∗ and decentralized control theory.",
                "The key differences between SPIDER and MAA* are: (a) Enhancements to SPIDER (VAX and PAX) provide for quality guaranteed approximations, while MAA* is a global optimal algorithm and hence involves significant computational complexity; (b) Due to MAA*s inability to exploit interaction structure, it was illustrated only with two agents.",
                "However, SPIDER has been illustrated for networks of agents; and (c) SPIDER explores the joint policy one agent at a time, while MAA* expands it one time step at a time (simultaneously for all the agents).",
                "The second set of techniques seek approximate policies.",
                "EmeryMontemerlo et al. [4] approximate POSGs as a series of one-step Bayesian games using heuristics to approximate future value, trading off limited lookahead for computational efficiency, resulting in locally optimal policies (with respect to the selected heuristic).",
                "Nair et al. [9]s JESP algorithm uses dynamic programming to reach a local optimum solution for finite horizon decentralized POMDPs.",
                "Peshkin et al. [11] and Bernstein et al. [2] are examples of policy search techniques that search for locally optimal policies.",
                "Though all the above techniques improve the efficiency of policy computation considerably, they are unable to provide error bounds on the quality of the solution.",
                "This aspect of quality bounds differentiates SPIDER from all the above techniques.",
                "Acknowledgements.",
                "This material is based upon work supported by the Defense Advanced Research Projects Agency (DARPA), through the Department of the Interior, NBC, Acquisition Services Division under Contract No.",
                "NBCHD030010.",
                "The views and conclusions contained in this document are those of the authors, and should not be interpreted as representing the official policies, either expressed or implied, of the Defense Advanced Research Projects Agency or the U.S. Government. 7.",
                "REFERENCES [1] R. Becker, S. Zilberstein, V. Lesser, and C.V. Goldman.",
                "Solving transition independent decentralized Markov decision processes.",
                "JAIR, 22:423-455, 2004. [2] D. S. Bernstein, E.A.",
                "Hansen, and S. Zilberstein.",
                "Bounded policy iteration for decentralized POMDPs.",
                "In IJCAI, 2005. [3] D. S. Bernstein, S. Zilberstein, and N. Immerman.",
                "The complexity of decentralized control of MDPs.",
                "In UAI, 2000. [4] R. Emery-Montemerlo, G. Gordon, J. Schneider, and S. Thrun.",
                "Approximate solutions for partially observable stochastic games with common payoffs.",
                "In AAMAS, 2004. [5] E. Hansen, D. Bernstein, and S. Zilberstein.",
                "Dynamic programming for partially observable stochastic games.",
                "In AAAI, 2004. [6] V. Lesser, C. Ortiz, and M. Tambe.",
                "Distributed sensor nets: A multiagent perspective.",
                "Kluwer, 2003. [7] R. Maheswaran, M. Tambe, E. Bowring, J. Pearce, and P. Varakantham.",
                "Taking dcop to the real world : Efficient complete solutions for distributed event scheduling.",
                "In AAMAS, 2004. [8] P. J. Modi, W. Shen, M. Tambe, and M. Yokoo.",
                "An asynchronous complete method for distributed constraint optimization.",
                "In AAMAS, 2003. [9] R. Nair, D. Pynadath, M. Yokoo, M. Tambe, and S. Marsella.",
                "Taming decentralized POMDPs: Towards efficient policy computation for multiagent settings.",
                "In IJCAI, 2003. [10] R. Nair, P. Varakantham, M. Tambe, and M. Yokoo.",
                "Networked distributed POMDPs: A synthesis of distributed constraint optimization and POMDPs.",
                "In AAAI, 2005. [11] L. Peshkin, N. Meuleau, K.-E. Kim, and L. Kaelbling.",
                "Learning to cooperate via policy search.",
                "In UAI, 2000. [12] A. Petcu and B. Faltings.",
                "A scalable method for multiagent constraint optimization.",
                "In IJCAI, 2005. [13] D. Szer, F. Charpillet, and S. Zilberstein.",
                "MAA*: A heuristic search algorithm for solving decentralized POMDPs.",
                "In IJCAI, 2005.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 829"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Empleamos el \"nodo máximo restringido\" (MCN) heurístico utilizado en el algoritmo DCOP, adoptamos [8], sin embargo, también se pueden emplear otras heurísticas (como la heurística MLSP de [7])."
            ],
            "translated_text": "",
            "candidates": [
                "nodo máximo restringido",
                "nodo máximo restringido"
            ],
            "error": []
        },
        "partially observable markov decision process": {
            "translated_key": "Proceso de decisión de Markov parcialmente observable",
            "is_in_text": false,
            "original_annotated_sentences": [
                "Letting loose a SPIDER on a network of POMDPs: Generating quality guaranteed policies Pradeep Varakantham, Janusz Marecki, Yuichi Yabu∗ , Milind Tambe, Makoto Yokoo∗ University of Southern California, Los Angeles, CA 90089, {varakant, marecki, tambe}@usc.edu ∗ Dept.",
                "of Intelligent Systems, Kyushu University, Fukuoka, 812-8581 Japan, yokoo@is.kyushu-u.ac.jp ABSTRACT Distributed Partially Observable Markov Decision Problems (Distributed POMDPs) are a popular approach for modeling multi-agent systems acting in uncertain domains.",
                "Given the significant complexity of solving distributed POMDPs, particularly as we scale up the numbers of agents, one popular approach has focused on approximate solutions.",
                "Though this approach is efficient, the algorithms within this approach do not provide any guarantees on solution quality.",
                "A second less popular approach focuses on global optimality, but typical results are available only for two agents, and also at considerable computational cost.",
                "This paper overcomes the limitations of both these approaches by providing SPIDER, a novel combination of three key features for policy generation in distributed POMDPs: (i) it exploits agent interaction structure given a network of agents (i.e. allowing easier scale-up to larger number of agents); (ii) it uses a combination of heuristics to speedup policy search; and (iii) it allows quality guaranteed approximations, allowing a systematic tradeoff of solution quality for time.",
                "Experimental results show orders of magnitude improvement in performance when compared with previous global optimal algorithms.",
                "Categories and Subject Descriptors I.2.11 [Artificial Intelligence]: Distributed Artificial IntelligenceMulti-agent Systems General Terms Algorithms, Theory 1.",
                "INTRODUCTION Distributed Partially Observable Markov Decision Problems (Distributed POMDPs) are emerging as a popular approach for modeling sequential decision making in teams operating under uncertainty [9, 4, 1, 2, 13].",
                "The uncertainty arises on account of nondeterminism in the outcomes of actions and because the world state may only be partially (or incorrectly) observable.",
                "Unfortunately, as shown by Bernstein et al. [3], the problem of finding the optimal joint policy for general distributed POMDPs is NEXP-Complete.",
                "Researchers have attempted two different types of approaches towards solving these models.",
                "The first category consists of highly efficient approximate techniques, that may not reach globally optimal solutions [2, 9, 11].",
                "The key problem with these techniques has been their inability to provide any guarantees on the quality of the solution.",
                "In contrast, the second less popular category of approaches has focused on a global optimal result [13, 5, 10].",
                "Though these approaches obtain optimal solutions, they typically consider only two agents.",
                "Furthermore, they fail to exploit structure in the interactions of the agents and hence are severely hampered with respect to scalability when considering more than two agents.",
                "To address these problems with the existing approaches, we propose approximate techniques that provide guarantees on the quality of the solution while focussing on a network of more than two agents.",
                "We first propose the basic SPIDER (Search for Policies In Distributed EnviRonments) algorithm.",
                "There are two key novel features in SPIDER: (i) it is a branch and bound heuristic search technique that uses a MDP-based heuristic function to search for an optimal joint policy; (ii) it exploits network structure of agents by organizing agents into a Depth First Search (DFS) pseudo tree and takes advantage of the independence in the different branches of the DFS tree.",
                "We then provide three enhancements to improve the efficiency of the basic SPIDER algorithm while providing guarantees on the quality of the solution.",
                "The first enhancement uses abstractions for speedup, but does not sacrifice solution quality.",
                "In particular, it initially performs branch and bound search on abstract policies and then extends to complete policies.",
                "The second enhancement obtains speedups by sacrificing solution quality, but within an input parameter that provides the tolerable expected value difference from the optimal solution.",
                "The third enhancement is again based on bounding the search for efficiency, however with a tolerance parameter that is provided as a percentage of optimal.",
                "We experimented with the sensor network domain presented in Nair et al. [10], a domain representative of an important class of problems with networks of agents working in uncertain environments.",
                "In our experiments, we illustrate that SPIDER dominates an existing global optimal approach called GOA [10], the only known global optimal algorithm with demonstrated experimental results for more than two agents.",
                "Furthermore, we demonstrate that abstraction improves the performance of SPIDER significantly (while providing optimal solutions).",
                "We finally demonstrate a key feature of SPIDER: by utilizing the approximation enhancements it enables principled tradeoffs in run-time versus solution quality. 822 978-81-904262-7-5 (RPS) c 2007 IFAAMAS 2.",
                "DOMAIN: DISTRIBUTED SENSOR NETS Distributed sensor networks are a large, important class of domains that motivate our work.",
                "This paper focuses on a set of target tracking problems that arise in certain types of sensor networks [6] first introduced in [10].",
                "Figure 1 shows a specific problem instance within this type consisting of three sensors.",
                "Here, each sensor node can scan in one of four directions: North, South, East or West (see Figure 1).",
                "To track a target and obtain associated reward, two sensors with overlapping scanning areas must coordinate by scanning the same area simultaneously.",
                "In Figure 1, to track a target in Loc11, sensor1 needs to scan East and sensor2 needs to scan West simultaneously.",
                "Thus, sensors have to act in a coordinated fashion.",
                "We assume that there are two independent targets and that each targets movement is uncertain and unaffected by the sensor agents.",
                "Based on the area it is scanning, each sensor receives observations that can have false positives and false negatives.",
                "The sensors observations and transitions are independent of each others actions e.g.the observations that sensor1 receives are independent of sensor2s actions.",
                "Each agent incurs a cost for scanning whether the target is present or not, but no cost if it turns off.",
                "Given the sensors observational uncertainty, the targets uncertain transitions and the distributed nature of the sensor nodes, these sensor nets provide a useful domains for applying distributed POMDP models.",
                "Figure 1: A 3-chain sensor configuration 3.",
                "BACKGROUND 3.1 Model: Network Distributed POMDP The ND-POMDP model was introduced in [10], motivated by domains such as the sensor networks introduced in Section 2.",
                "It is defined as the tuple S, A, P, Ω, O, R, b , where S = ×1≤i≤nSi × Su is the set of world states.",
                "Si refers to the set of local states of agent i and Su is the set of unaffectable states.",
                "Unaffectable state refers to that part of the world state that cannot be affected by the agents actions, e.g. environmental factors like target locations that no agent can control.",
                "A = ×1≤i≤nAi is the set of joint actions, where Ai is the set of action for agent i. ND-POMDP assumes transition independence, where the transition function is defined as P(s, a, s ) = Pu(su, su) · 1≤i≤n Pi(si, su, ai, si), where a = a1, . . . , an is the joint action performed in state s = s1, . . . , sn, su and s = s1, . . . , sn, su is the resulting state.",
                "Ω = ×1≤i≤nΩi is the set of joint observations where Ωi is the set of observations for agents i. Observational independence is assumed in ND-POMDPs i.e., the joint observation function is defined as O(s, a, ω) = 1≤i≤n Oi(si, su, ai, ωi), where s = s1, . . . , sn, su is the world state that results from the agents performing a = a1, . . . , an in the previous state, and ω = ω1, . . . , ωn ∈ Ω is the observation received in state s. This implies that each agents observation depends only on the unaffectable state, its local action and on its resulting local state.",
                "The reward function, R, is defined as R(s, a) = l Rl(sl1, . . . , slr, su, al1, . . . , alr ), where each l could refer to any sub-group of agents and r = |l|.",
                "Based on the reward function, an interaction hypergraph is constructed.",
                "A hyper-link, l, exists between a subset of agents for all Rl that comprise R. The interaction hypergraph is defined as G = (Ag, E), where the agents, Ag, are the vertices and E = {l|l ⊆ Ag ∧ Rl is a component of R} are the edges.",
                "The initial belief state (distribution over the initial state), b, is defined as b(s) = bu(su) · 1≤i≤n bi(si), where bu and bi refer to the distribution over initial unaffectable state and agent is initial belief state, respectively.",
                "The goal in ND-POMDP is to compute the joint policy π = π1, . . . , πn that maximizes teams expected reward over a finite horizon T starting from the belief state b.",
                "An ND-POMDP is similar to an n-ary Distributed Constraint Optimization Problem (DCOP)[8, 12] where the variable at each node represents the policy selected by an individual agent, πi with the domain of the variable being the set of all local policies, Πi.",
                "The reward component Rl where |l| = 1 can be thought of as a local constraint while the reward component Rl where l > 1 corresponds to a non-local constraint in the constraint graph. 3.2 Algorithm: Global Optimal Algorithm (GOA) In previous work, GOA has been defined as a global optimal algorithm for ND-POMDPs [10].",
                "We will use GOA in our experimental comparisons, since GOA is a state-of-the-art global optimal algorithm, and in fact the only one with experimental results available for networks of more than two agents.",
                "GOA borrows from a global optimal DCOP algorithm called DPOP[12].",
                "GOAs message passing follows that of DPOP.",
                "The first phase is the UTIL propagation, where the utility messages, in this case values of policies, are passed up from the leaves to the root.",
                "Value for a policy at an agent is defined as the sum of best response values from its children and the joint policy reward associated with the parent policy.",
                "Thus, given a policy for a parent node, GOA requires an agent to iterate through all its policies, finding the best response policy and returning the value to the parent - while at the parent node, to find the best policy, an agent requires its children to return their best responses to each of its policies.",
                "This UTIL propagation process is repeated at each level in the tree, until the root exhausts all its policies.",
                "In the second phase of VALUE propagation, where the optimal policies are passed down from the root till the leaves.",
                "GOA takes advantage of the local interactions in the interaction graph, by pruning out unnecessary joint policy evaluations (associated with nodes not connected directly in the tree).",
                "Since the interaction graph captures all the reward interactions among agents and as this algorithm iterates through all the relevant joint policy evaluations, this algorithm yields a globally optimal solution. 4.",
                "SPIDER As mentioned in Section 3.1, an ND-POMDP can be treated as a DCOP, where the goal is to compute a joint policy that maximizes the overall joint reward.",
                "The brute-force technique for computing an optimal policy would be to examine the expected values for all possible joint policies.",
                "The key idea in SPIDER is to avoid computation of expected values for the entire space of joint policies, by utilizing upper bounds on the expected values of policies and the interaction structure of the agents.",
                "Akin to some of the algorithms for DCOP [8, 12], SPIDER has a pre-processing step that constructs a DFS tree corresponding to the given interaction structure.",
                "Note that these DFS trees are pseudo trees [12] that allow links between ancestors and children.",
                "We employ the Maximum Constrained Node (MCN) heuristic used in the DCOP algorithm, ADOPT [8], however other heuristics (such as MLSP heuristic from [7]) can also be employed.",
                "MCN heuristic tries to place agents with more number of constraints at the top of the tree.",
                "This tree governs how the search for the optimal joint polThe Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 823 icy proceeds in SPIDER.",
                "The algorithms presented in this paper are easily extendable to hyper-trees, however for expository purposes, we assume binary trees.",
                "SPIDER is an algorithm for centralized planning and distributed execution in distributed POMDPs.",
                "In this paper, we employ the following notation to denote policies and expected values: Ancestors(i) ⇒ agents from i to the root (not including i).",
                "Tree(i) ⇒ agents in the sub-tree (not including i) for which i is the root. πroot+ ⇒ joint policy of all agents. πi+ ⇒ joint policy of all agents in Tree(i) ∪ i. πi− ⇒ joint policy of agents that are in Ancestors(i). πi ⇒ policy of the ith agent. ˆv[πi, πi− ] ⇒ upper bound on the expected value for πi+ given πi and policies of ancestor agents i.e. πi− . ˆvj[πi, πi− ] ⇒ upper bound on the expected value for πi+ from the jth child. v[πi, πi− ] ⇒ expected value for πi given policies of ancestor agents, πi− . v[πi+ , πi− ] ⇒ expected value for πi+ given policies of ancestor agents, πi− . vj[πi+ , πi− ] ⇒ expected value for πi+ from the jth child.",
                "Figure 2: Execution of SPIDER, an example 4.1 Outline of SPIDER SPIDER is based on the idea of branch and bound search, where the nodes in the search tree represent partial/complete joint policies.",
                "Figure 2 shows an example search tree for the SPIDER algorithm, using an example of the three agent chain.",
                "Before SPIDER begins its search we create a DFS tree (i.e. pseudo tree) from the three agent chain, with the middle agent as the root of this tree.",
                "SPIDER exploits the structure of this DFS tree while engaging in its search.",
                "Note that in our example figure, each agent is assigned a policy with T=2.",
                "Thus, each rounded rectange (search tree node) indicates a partial/complete joint policy, a rectangle indicates an agent and the ovals internal to an agent show its policy.",
                "Heuristic or actual expected value for a joint policy is indicated in the top right corner of the rounded rectangle.",
                "If the number is italicized and underlined, it implies that the actual expected value of the joint policy is provided.",
                "SPIDER begins with no policy assigned to any of the agents (shown in the level 1 of the search tree).",
                "Level 2 of the search tree indicates that the joint policies are sorted based on upper bounds computed for root agents policies.",
                "Level 3 shows one SPIDER search node with a complete joint policy (a policy assigned to each of the agents).",
                "The expected value for this joint policy is used to prune out the nodes in level 2 (the ones with upper bounds < 234) When creating policies for each non-leaf agent i, SPIDER potentially performs two steps: 1.",
                "Obtaining upper bounds and sorting: In this step, agent i computes upper bounds on the expected values, ˆv[πi, πi− ] of the joint policies πi+ corresponding to each of its policy πi and fixed ancestor policies.",
                "An MDP based heuristic is used to compute these upper bounds on the expected values.",
                "Detailed description about this MDP heuristic is provided in Section 4.2.",
                "All policies of agent i, Πi are then sorted based on these upper bounds (also referred to as heuristic values henceforth) in descending order.",
                "Exploration of these policies (in step 2 below) are performed in this descending order.",
                "As indicated in the level 2 of the search tree (of Figure 2), all the joint policies are sorted based on the heuristic values, indicated in the top right corner of each joint policy.",
                "The intuition behind sorting and then exploring policies in descending order of upper bounds, is that the policies with higher upper bounds could yield joint policies with higher expected values. 2.",
                "Exploration and Pruning: Exploration implies computing the best response joint policy πi+,∗ corresponding to fixed ancestor policies of agent i, πi− .",
                "This is performed by iterating through all policies of agent i i.e.",
                "Πi and summing two quantities for each policy: (i) the best response for all of is children (obtained by performing steps 1 and 2 at each of the child nodes); (ii) the expected value obtained by i for fixed policies of ancestors.",
                "Thus, exploration of a policy πi yields actual expected value of a joint policy, πi+ represented as v[πi+ , πi− ].",
                "The policy with the highest expected value is the best response policy.",
                "Pruning refers to avoiding exploring all policies (or computing expected values) at agent i by using the current best expected value, vmax [πi+ , πi− ].",
                "Henceforth, this vmax [πi+ , πi− ] will be referred to as threshold.",
                "A policy, πi need not be explored if the upper bound for that policy, ˆv[πi, πi− ] is less than the threshold.",
                "This is because the expected value for the best joint policy attainable for that policy will be less than the threshold.",
                "On the other hand, when considering a leaf agent, SPIDER computes the best response policy (and consequently its expected value) corresponding to fixed policies of its ancestors, πi− .",
                "This is accomplished by computing expected values for each of the policies (corresponding to fixed policies of ancestors) and selecting the highest expected value policy.",
                "In Figure 2, SPIDER assigns best response policies to leaf agents at level 3.",
                "The policy for the left leaf agent is to perform action East at each time step in the policy, while the policy for the right leaf agent is to perform Off at each time step.",
                "These best response policies from the leaf agents yield an actual expected value of 234 for the complete joint policy.",
                "Algorithm 1 provides the pseudo code for SPIDER.",
                "This algorithm outputs the best joint policy, πi+,∗ (with an expected value greater than threshold) for the agents in Tree(i).",
                "Lines 3-8 compute the best response policy of a leaf agent i, while lines 9-23 computes the best response joint policy for agents in Tree(i).",
                "This best response computation for a non-leaf agent i includes: (a) Sorting of policies (in descending order) based on heuristic values on line 11; (b) Computing best response policies at each of the children for fixed policies of agent i in lines 16-20; and (c) Maintaining 824 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Algorithm 1 SPIDER(i, πi− , threshold) 1: πi+,∗ ← null 2: Πi ← GET-ALL-POLICIES (horizon, Ai, Ωi) 3: if IS-LEAF(i) then 4: for all πi ∈ Πi do 5: v[πi, πi−] ← JOINT-REWARD (πi, πi−) 6: if v[πi, πi−] > threshold then 7: πi+,∗ ← πi 8: threshold ← v[πi, πi−] 9: else 10: children ← CHILDREN (i) 11: ˆΠi ← UPPER-BOUND-SORT(i, Πi, πi−) 12: for all πi ∈ ˆΠi do 13: ˜πi+ ← πi 14: if ˆv[πi, πi−] < threshold then 15: Go to line 12 16: for all j ∈ children do 17: jThres ← threshold − v[πi, πi−]− Σk∈children,k=j ˆvk[πi, πi−] 18: πj+,∗ ← SPIDER(j, πi πi−, jThres) 19: ˜πi+ ← ˜πi+ πj+,∗ 20: ˆvj[πi, πi−] ← v[πj+,∗, πi πi−] 21: if v[˜πi+, πi−] > threshold then 22: threshold ← v[˜πi+, πi−] 23: πi+,∗ ← ˜πi+ 24: return πi+,∗ Algorithm 2 UPPER-BOUND-SORT(i, Πi, πi− ) 1: children ← CHILDREN (i) 2: ˆΠi ← null /* Stores the sorted list */ 3: for all πi ∈ Πi do 4: ˆv[πi, πi−] ← JOINT-REWARD (πi, πi−) 5: for all j ∈ children do 6: ˆvj[πi, πi−] ← UPPER-BOUND(i, j, πi πi−) 7: ˆv[πi, πi−] + ← ˆvj[πi, πi−] 8: ˆΠi ← INSERT-INTO-SORTED (πi, ˆΠi) 9: return ˆΠi best expected value, joint policy in lines 21-23.",
                "Algorithm 2 provides the pseudo code for sorting policies based on the upper bounds on the expected values of joint policies.",
                "Expected value for an agent i consists of two parts: value obtained from ancestors and value obtained from its children.",
                "Line 4 computes the expected value obtained from ancestors of the agent (using JOINT-REWARD function), while lines 5-7 compute the heuristic value from the children.",
                "The sum of these two parts yields an upper bound on the expected value for agent i, and line 8 of the algorithm sorts the policies based on these upper bounds. 4.2 MDP based heuristic function The heuristic function quickly provides an upper bound on the expected value obtainable from the agents in Tree(i).",
                "The subtree of agents is a distributed POMDP in itself and the idea here is to construct a centralized MDP corresponding to the (sub-tree) distributed POMDP and obtain the expected value of the optimal policy for this centralized MDP.",
                "To reiterate this in terms of the agents in DFS tree interaction structure, we assume full observability for the agents in Tree(i) and for fixed policies of the agents in {Ancestors(i) ∪ i}, we compute the joint value ˆv[πi+ , πi− ] .",
                "We use the following notation for presenting the equations for computing upper bounds/heuristic values (for agents i and k): Let Ei− denote the set of links between agents in {Ancestors(i)∪ i} and Tree(i), Ei+ denote the set of links between agents in Tree(i).",
                "Also, if l ∈ Ei− , then l1 is the agent in {Ancestors(i)∪ i} and l2 is the agent in Tree(i), that l connects together.",
                "We first compact the standard notation: ot k =Ok(st+1 k , st+1 u , πk(ωt k), ωt+1 k ) (1) pt k =Pk(st k, st u, πk(ωt k), st+1 k ) · ot k pt u =P(st u, st+1 u ) st l = st l1 , st l2 , st u ; ωt l = ωt l1 , ωt l2 rt l =Rl(st l , πl1 (ωt l1 ), πl2 (ωt l2 )) vt l =V t πl (st l , st u, ωt l1 , ωt l2 ) Depending on the location of agent k in the agent tree we have the following cases: IF k ∈ {Ancestors(i) ∪ i}, ˆpt k = pt k, (2) IF k ∈ Tree(i), ˆpt k = Pk(st k, st u, πk(ωt k), st+1 k ) IF l ∈ Ei− , ˆrt l = max {al2 } Rl(st l , πl1 (ωt l1 ), al2 ) IF l ∈ Ei+ , ˆrt l = max {al1 ,al2 } Rl(st l , al1 , al2 ) The value function for an agent i executing the joint policy πi+ at time η − 1 is provided by the equation: V η−1 πi+ (sη−1 , ωη−1 ) = l∈Ei− vη−1 l + l∈Ei+ vη−1 l (3) where vη−1 l = rη−1 l + ω η l ,sη pη−1 l1 pη−1 l2 pη−1 u vη l Algorithm 3 UPPER-BOUND (i, j, πj− ) 1: val ← 0 2: for all l ∈ Ej− ∪ Ej+ do 3: if l ∈ Ej− then πl1 ← φ 4: for all s0 l do 5: val + ← startBel[s0 l ]· UPPER-BOUND-TIME (i, s0 l , j, πl1 , ) 6: return val Algorithm 4 UPPER-BOUND-TIME (i, st l , j, πl1 , ωt l1 ) 1: maxV al ← −∞ 2: for all al1 , al2 do 3: if l ∈ Ei− and l ∈ Ej− then al1 ← πl1 (ωt l1 ) 4: val ← GET-REWARD(st l , al1 , al2 ) 5: if t < πi.horizon − 1 then 6: for all st+1 l , ωt+1 l1 do 7: futV al←pt u ˆpt l1 ˆpt l2 8: futV al ∗ ← UPPER-BOUND-TIME(st+1 l , j, πl1 , ωt l1 ωt+1 l1 ) 9: val + ← futV al 10: if val > maxV al then maxV al ← val 11: return maxV al Upper bound on the expected value for a link is computed by modifying the equation 3 to reflect the full observability assumption.",
                "This involves removing the observational probability term for agents in Tree(i) and maximizing the future value ˆvη l over the actions of those agents (in Tree(i)).",
                "Thus, the equation for the The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 825 computation of the upper bound on a link l, is as follows: IF l ∈ Ei− , ˆvη−1 l =ˆrη−1 l + max al2 ω η l1 ,s η l ˆpη−1 l1 ˆpη−1 l2 pη−1 u ˆvη l IF l ∈ Ei+ , ˆvη−1 l =ˆrη−1 l + max al1 ,al2 s η l ˆpη−1 l1 ˆpη−1 l2 pη−1 u ˆvη l Algorithm 3 and Algorithm 4 provide the algorithm for computing upper bound for child j of agent i, using the equations descirbed above.",
                "While Algorithm 4 computes the upper bound on a link given the starting state, Algorithm 3 sums the upper bound values computed over each of the links in Ei− ∪ Ei+ . 4.3 Abstraction Algorithm 5 SPIDER-ABS(i, πi− , threshold) 1: πi+,∗ ← null 2: Πi ← GET-POLICIES (<>, 1) 3: if IS-LEAF(i) then 4: for all πi ∈ Πi do 5: absHeuristic ← GET-ABS-HEURISTIC (πi, πi−) 6: absHeuristic ∗ ← (timeHorizon − πi.horizon) 7: if πi.horizon = timeHorizon and πi.absNodes = 0 then 8: v[πi, πi−] ← JOINT-REWARD (πi, πi−) 9: if v[πi, πi−] > threshold then 10: πi+,∗ ← πi; threshold ← v[πi, πi−] 11: else if v[πi, πi−] + absHeuristic > threshold then 12: ˆΠi ← EXTEND-POLICY (πi, πi.absNodes + 1) 13: Πi + ← INSERT-SORTED-POLICIES ( ˆΠi) 14: REMOVE(πi) 15: else 16: children ← CHILDREN (i) 17: Πi ← UPPER-BOUND-SORT(i, Πi, πi−) 18: for all πi ∈ Πi do 19: ˜πi+ ← πi 20: absHeuristic ← GET-ABS-HEURISTIC (πi, πi−) 21: absHeuristic ∗ ← (timeHorizon − πi.horizon) 22: if πi.horizon = timeHorizon and πi.absNodes = 0 then 23: if ˆv[πi, πi−] < threshold and πi.absNodes = 0 then 24: Go to line 19 25: for all j ∈ children do 26: jThres ← threshold − v[πi, πi−]− Σk∈children,k=j ˆvk[πi, πi−] 27: πj+,∗ ← SPIDER(j, πi πi−, jThres) 28: ˜πi+ ← ˜πi+ πj+,∗; ˆvj[πi, πi−] ← v[πj+,∗, πi πi−] 29: if v[˜πi+, πi−] > threshold then 30: threshold ← v[˜πi+, πi−]; πi+,∗ ← ˜πi+ 31: else if ˆv[πi+, πi−] + absHeuristic > threshold then 32: ˆΠi ← EXTEND-POLICY (πi, πi.absNodes + 1) 33: Πi + ← INSERT-SORTED-POLICIES (ˆΠi) 34: REMOVE(πi) 35: return πi+,∗ In SPIDER, the exploration/pruning phase can only begin after the heuristic (or upper bound) computation and sorting for the policies has ended.",
                "We provide an approach to possibly circumvent the exploration of a group of policies based on heuristic computation for one abstract policy, thus leading to an improvement in runtime performance (without loss in solution quality).",
                "The important steps in this technique are defining the abstract policy and how heuristic values are computated for the abstract policies.",
                "In this paper, we propose two types of abstraction: 1.",
                "Horizon Based Abstraction (HBA): Here, the abstract policy is defined as a shorter horizon policy.",
                "It represents a group of longer horizon policies that have the same actions as the abstract policy for times less than or equal to the horizon of the abstract policy.",
                "In Figure 3(a), a T=1 abstract policy that performs East action, represents a group of T=2 policies, that perform East in the first time step.",
                "For HBA, there are two parts to heuristic computation: (a) Computing the upper bound for the horizon of the abstract policy.",
                "This is same as the heuristic computation defined by the GETHEURISTIC() algorithm for SPIDER, however with a shorter time horizon (horizon of the abstract policy). (b) Computing the maximum possible reward that can be accumulated in one time step (using GET-ABS-HEURISTIC()) and multiplying it by the number of time steps to time horizon.",
                "This maximum possible reward (for one time step) is obtained by iterating through all the actions of all the agents in Tree(i) and computing the maximum joint reward for any joint action.",
                "Sum of (a) and (b) is the heuristic value for a HBA abstract policy. 2.",
                "Node Based Abstraction (NBA): Here an abstract policy is obtained by not associating actions to certain nodes of the policy tree.",
                "Unlike in HBA, this implies multiple levels of abstraction.",
                "This is illustrated in Figure 3(b), where there are T=2 policies that do not have an action for observation TP.",
                "These incomplete T=2 policies are abstractions for T=2 complete policies.",
                "Increased levels of abstraction leads to faster computation of a complete joint policy, πroot+ and also to shorter heuristic computation and exploration, pruning phases.",
                "For NBA, the heuristic computation is similar to that of a normal policy, except in cases where there is no action associated with policy nodes.",
                "In such cases, the immediate reward is taken as Rmax (maximum reward for any action).",
                "We combine both the abstraction techniques mentioned above into one technique, SPIDER-ABS.",
                "Algorithm 5 provides the algorithm for this abstraction technique.",
                "For computing optimal joint policy with SPIDER-ABS, a non-leaf agent i initially examines all abstract T=1 policies (line 2) and sorts them based on abstract policy heuristic computations (line 17).",
                "The abstraction horizon is gradually increased and these abstract policies are then explored in descending order of heuristic values and ones that have heuristic values less than the threshold are pruned (lines 23-24).",
                "Exploration in SPIDER-ABS has the same definition as in SPIDER if the policy being explored has a horizon of policy computation which is equal to the actual time horizon and if all the nodes of the policy have an action associated with them (lines 25-30).",
                "However, if those conditions are not met, then it is substituted by a group of policies that it represents (using EXTEND-POLICY () function) (lines 31-32).",
                "EXTEND-POLICY() function is also responsible for initializing the horizon and absNodes of a policy. absNodes represents the number of nodes at the last level in the policy tree, that do not have an action assigned to them.",
                "If πi.absNodes = |Ωi|πi.horizon−1 (i.e. total number of policy nodes possible at πi.horizon) , then πi.absNodes is set to zero and πi.horizon is increased by 1.",
                "Otherwise, πi.absNodes is increased by 1.",
                "Thus, this function combines both HBA and NBA by using the policy variables, horizon and absNodes.",
                "Before substituting the abstract policy with a group of policies, those policies are sorted based on heuristic values (line 33).",
                "Similar type of abstraction based best response computation is adopted at leaf agents (lines 3-14). 4.4 Value ApproXimation (VAX) In this section, we present an approximate enhancement to SPIDER called VAX.",
                "The input to this technique is an approximation parameter , which determines the difference from the optimal solution quality.",
                "This approximation parameter is used at each agent for pruning out joint policies.",
                "The pruning mechanism in SPIDER and SPIDER-Abs dictates that a joint policy be pruned only if the threshold is exactly greater than the heuristic value.",
                "However, the 826 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Figure 3: Example of abstraction for (a) HBA (Horizon Based Abstraction) and (b) NBA (Node Based Abstraction) idea in this technique is to prune out joint a policy if the following condition is satisfied: threshold + > ˆv[πi , πi− ].",
                "Apart from the pruning condition, VAX is the same as SPIDER/SPIDER-ABS.",
                "In the example of Figure 2, if the heuristic value for the second joint policy (or second search tree node) in level 2 were 238 instead of 232, then that policy could not be be pruned using SPIDER or SPIDER-Abs.",
                "However, in VAX with an approximation parameter of 5, the joint policy in consideration would also be pruned.",
                "This is because the threshold (234) at that juncture plus the approximation parameter (5), i.e. 239 would have been greater than the heuristic value for that joint policy (238).",
                "It can be noted from the example (just discussed) that this kind of pruning can lead to fewer explorations and hence lead to an improvement in the overall run-time performance.",
                "However, this can entail a sacrifice in the quality of the solution because this technique can prune out a candidate optimal solution.",
                "A bound on the error introduced by this approximate algorithm as a function of , is provided by Proposition 3. 4.5 Percentage ApproXimation (PAX) In this section, we present the second approximation enhancement over SPIDER called PAX.",
                "Input to this technique is a parameter, δ that represents the minimum percentage of the optimal solution quality that is desired.",
                "Output of this technique is a policy with an expected value that is at least δ% of the optimal solution quality.",
                "A policy is pruned if the following condition is satisfied: threshold > δ 100 ˆv[πi , πi− ].",
                "Like in VAX, the only difference between PAX and SPIDER/SPIDER-ABS is this pruning condition.",
                "Again in Figure 2, if the heuristic value for the second search tree node in level 2 were 238 instead of 232, then PAX with an input parameter of 98% would be able to prune that search tree node (since 98 100 ∗238 < 234).",
                "This type of pruning leads to fewer explorations and hence an improvement in run-time performance, while potentially leading to a loss in quality of the solution.",
                "Proposition 4 provides the bound on quality loss. 4.6 Theoretical Results PROPOSITION 1.",
                "Heuristic provided using the centralized MDP heuristic is admissible.",
                "Proof.",
                "For the value provided by the heuristic to be admissible, it should be an over estimate of the expected value for a joint policy.",
                "Thus, we need to show that: For l ∈ Ei+ ∪ Ei− : ˆvt l ≥ vt l (refer to notation in Section 4.2) We use mathematical induction on t to prove this.",
                "Base case: t = T − 1.",
                "Irrespective of whether l ∈ Ei− or l ∈ Ei+ , ˆrt l is computed by maximizing over all actions of the agents in Tree(i), while rt l is computed for fixed policies of the same agents.",
                "Hence, ˆrt l ≥ rt l and also ˆvt l ≥ vt l .",
                "Assumption: Proposition holds for t = η, where 1 ≤ η < T − 1.",
                "We now have to prove that the proposition holds for t = η − 1.",
                "We show the proof for l ∈ Ei− and similar reasoning can be adopted to prove for l ∈ Ei+ .",
                "The heuristic value function for l ∈ Ei− is provided by the following equation: ˆvη−1 l =ˆrη−1 l + max al2 ω η l1 ,s η l ˆpη−1 l1 ˆpη−1 l2 pη−1 u ˆvη l Rewriting the RHS and using Eqn 2 (in Section 4.2) =ˆrη−1 l + max al2 ω η l1 ,s η l pη−1 u pη−1 l1 ˆpη−1 l2 ˆvη l =ˆrη−1 l + ω η l1 ,s η l pη−1 u pη−1 l1 max al2 ˆpη−1 l2 ˆvη l Since maxal2 ˆpη−1 l2 ˆvη l ≥ ωl2 oη−1 l2 ˆpη−1 l2 ˆvη l and pη−1 l2 = oη−1 l2 ˆpη−1 l2 ≥ˆrη−1 l + ω η l1 ,s η l pη−1 u pη−1 l1 ωl2 pη−1 l2 ˆvη l Since ˆvη l ≥ vη l (from the assumption) ≥ˆrη−1 l + ω η l1 ,s η l pη−1 u pη−1 l1 ωl2 pη−1 l2 vη l Since ˆrη−1 l ≥ rη−1 l (by definition) ≥rη−1 l + ω η l1 ,s η l pη−1 u pη−1 l1 ωl2 pη−1 l2 vη l =rη−1 l + (ω η l ,s η l ) pη−1 u pη−1 l1 pη−1 l2 vη l = vη−1 l Thus proved.",
                "PROPOSITION 2.",
                "SPIDER provides an optimal solution.",
                "Proof.",
                "SPIDER examines all possible joint policies given the interaction structure of the agents.",
                "The only exception being when a joint policy is pruned based on the heuristic value.",
                "Thus, as long as a candidate optimal policy is not pruned, SPIDER will return an optimal policy.",
                "As proved in Proposition 1, the expected value for a joint policy is always an upper bound.",
                "Hence when a joint policy is pruned, it cannot be an optimal solution.",
                "PROPOSITION 3.",
                "Error bound on the solution quality for VAX (implemented over SPIDER-ABS) with an approximation parameter of is ρ , where ρ is the number of leaf nodes in the DFS tree.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 827 Proof.",
                "We prove this proposition using mathematical induction on the depth of the DFS tree.",
                "Base case: depth = 1 (i.e. one node).",
                "Best response is computed by iterating through all policies, Πk.",
                "A policy,πk is pruned if ˆv[πk, πk− ] < threshold + .",
                "Thus the best response policy computed by VAX would be at most away from the optimal best response.",
                "Hence the proposition holds for the base case.",
                "Assumption: Proposition holds for d, where 1 ≤ depth ≤ d. We now have to prove that the proposition holds for d + 1.",
                "Without loss of generality, lets assume that the root node of this tree has k children.",
                "Each of this children is of depth ≤ d, and hence from the assumption, the error introduced in kth child is ρk , where ρk is the number of leaf nodes in kth child of the root.",
                "Therefore, ρ = k ρk, where ρ is the number of leaf nodes in the tree.",
                "In SPIDER-ABS, threshold at the root agent, thresspider = k v[πk+ , πk− ].",
                "However, with VAX the threshold at the root agent will be (in the worst case), threshvax = k v[πk+ , πk− ]− k ρk .",
                "Hence, with VAX a joint policy is pruned at the root agent if ˆv[πroot, πroot− ] < threshvax + ⇒ ˆv[πroot, πroot− ] < threshspider − (( k ρk) − 1) ≤ threshspider − ( k ρk) ≤ threshspider − ρ .",
                "Hence proved.",
                "PROPOSITION 4.",
                "For PAX (implemented over SPIDER-ABS) with an input parameter of δ, the solution quality is at least δ 100 v[πroot+,∗ ], where v[πroot+,∗ ] denotes the optimal solution quality.",
                "Proof.",
                "We prove this proposition using mathematical induction on the depth of the DFS tree.",
                "Base case: depth = 1 (i.e. one node).",
                "Best response is computed by iterating through all policies, Πk.",
                "A policy,πk is pruned if δ 100 ˆv[πk, πk− ] < threshold.",
                "Thus the best response policy computed by PAX would be at least δ 100 times the optimal best response.",
                "Hence the proposition holds for the base case.",
                "Assumption: Proposition holds for d, where 1 ≤ depth ≤ d. We now have to prove that the proposition holds for d + 1.",
                "Without loss of generality, lets assume that the root node of this tree has k children.",
                "Each of this children is of depth ≤ d, and hence from the assumption, the solution quality in the kth child is at least δ 100 v[πk+,∗ , πk− ] for PAX.",
                "With SPIDER-ABS, a joint policy is pruned at the root agent if ˆv[πroot, πroot− ] < k v[πk+,∗ , πk− ].",
                "However with PAX, a joint policy is pruned if δ 100 ˆv[πroot, πroot− ] < k δ 100 v[πk+,∗ , πk− ] ⇒ ˆv[πroot, πroot− ] < k v[πk+,∗ , πk− ].",
                "Since the pruning condition at the root agent in PAX is the same as the one in SPIDER-ABS, there is no error introduced at the root agent and all the error is introduced in the children.",
                "Thus, overall solution quality is at least δ 100 of the optimal solution.",
                "Hence proved. 5.",
                "EXPERIMENTAL RESULTS All our experiments were conducted on the sensor network domain from Section 2.",
                "The five network configurations employed are shown in Figure 4.",
                "Algorithms that we experimented with are GOA, SPIDER, SPIDER-ABS, PAX and VAX.",
                "We compare against GOA because it is the only global optimal algorithm that considers more than two agents.",
                "We performed two sets of experiments: (i) firstly, we compared the run-time performance of the above algorithms and (ii) secondly, we experimented with PAX and VAX to study the tradeoff between run-time and solution quality.",
                "Experiments were terminated after 10000 seconds1 .",
                "Figure 5(a) provides run-time comparisons between the optimal algorithms GOA, SPIDER, SPIDER-Abs and the approximate algorithms, PAX ( of 30) and VAX(δ of 80).",
                "X-axis denotes the 1 Machine specs for all experiments: Intel Xeon 3.6 GHZ processor, 2GB RAM sensor network configuration used, while Y-axis indicates the runtime (on a log-scale).",
                "The time horizon of policy computation was 3.",
                "For each configuration (3-chain, 4-chain, 4-star and 5-star), there are five bars indicating the time taken by GOA, SPIDER, SPIDERAbs, PAX and VAX.",
                "GOA did not terminate within the time limit for 4-star and 5-star configurations.",
                "SPIDER-Abs dominated the SPIDER and GOA for all the configurations.",
                "For instance, in the 3chain configuration, SPIDER-ABS provides 230-fold speedup over GOA and 2-fold speedup over SPIDER and for the 4-chain configuration it provides 58-fold speedup over GOA and 2-fold speedup over SPIDER.",
                "The two approximation approaches, VAX and PAX provided further improvement in performance over SPIDER-Abs.",
                "For instance, in the 5-star configuration VAX provides a 15-fold speedup and PAX provides a 8-fold speedup over SPIDER-Abs.",
                "Figures 5(b) provides a comparison of the solution quality obtained using the different algorithms for the problems tested in Figure 5(a).",
                "X-axis denotes the sensor network configuration while Y-axis indicates the solution quality.",
                "Since GOA, SPIDER, and SPIDER-Abs are all global optimal algorithms, the solution quality is the same for all those algorithms.",
                "For 5-P configuration, the global optimal algorithms did not terminate within the limit of 10000 seconds, so the bar for optimal quality indicates an upper bound on the optimal solution quality.",
                "With both the approximations, we obtained a solution quality that was close to the optimal solution quality.",
                "In 3-chain and 4-star configurations, it is remarkable that both PAX and VAX obtained almost the same actual quality as the global optimal algorithms, despite the approximation parameter and δ.",
                "For other configurations as well, the loss in quality was less than 20% of the optimal solution quality.",
                "Figure 5(c) provides the time to solution with PAX (for varying epsilons).",
                "X-axis denotes the approximation parameter, δ (percentage to optimal) used, while Y-axis denotes the time taken to compute the solution (on a log-scale).",
                "The time horizon for all the configurations was 4.",
                "As δ was decreased from 70 to 30, the time to solution decreased drastically.",
                "For instance, in the 3-chain case there was a total speedup of 170-fold when the δ was changed from 70 to 30.",
                "Interestingly, even with a low δ of 30%, the actual solution quality remained equal to the one obtained at 70%.",
                "Figure 5(d) provides the time to solution for all the configurations with VAX (for varying epsilons).",
                "X-axis denotes the approximation parameter, used, while Y-axis denotes the time taken to compute the solution (on a log-scale).",
                "The time horizon for all the configurations was 4.",
                "As was increased, the time to solution decreased drastically.",
                "For instance, in the 4-star case there was a total speedup of 73-fold when the was changed from 60 to 140.",
                "Again, the actual solution quality did not change with varying epsilon.",
                "Figure 4: Sensor network configurations 828 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Figure 5: Comparison of GOA, SPIDER, SPIDER-Abs and VAX for T = 3 on (a) Runtime and (b) Solution quality; (c) Time to solution for PAX with varying percentage to optimal for T=4 (d) Time to solution for VAX with varying epsilon for T=4 6.",
                "SUMMARY AND RELATED WORK This paper presents four algorithms SPIDER, SPIDER-ABS, PAX and VAX that provide a novel combination of features for policy search in distributed POMDPs: (i) exploiting agent interaction structure given a network of agents (i.e. easier scale-up to larger number of agents); (ii) using branch and bound search with an MDP based heuristic function; (iii) utilizing abstraction to improve runtime performance without sacrificing solution quality; (iv) providing a priori percentage bounds on quality of solutions using PAX; and (v) providing expected value bounds on the quality of solutions using VAX.",
                "These features allow for systematic tradeoff of solution quality for run-time in networks of agents operating under uncertainty.",
                "Experimental results show orders of magnitude improvement in performance over previous global optimal algorithms.",
                "Researchers have typically employed two types of techniques for solving distributed POMDPs.",
                "The first set of techniques compute global optimal solutions.",
                "Hansen et al. [5] present an algorithm based on dynamic programming and iterated elimination of dominant policies, that provides optimal solutions for distributed POMDPs.",
                "Szer et al. [13] provide an optimal heuristic search method for solving Decentralized POMDPs.",
                "This algorithm is based on the combination of a classical heuristic search algorithm, A∗ and decentralized control theory.",
                "The key differences between SPIDER and MAA* are: (a) Enhancements to SPIDER (VAX and PAX) provide for quality guaranteed approximations, while MAA* is a global optimal algorithm and hence involves significant computational complexity; (b) Due to MAA*s inability to exploit interaction structure, it was illustrated only with two agents.",
                "However, SPIDER has been illustrated for networks of agents; and (c) SPIDER explores the joint policy one agent at a time, while MAA* expands it one time step at a time (simultaneously for all the agents).",
                "The second set of techniques seek approximate policies.",
                "EmeryMontemerlo et al. [4] approximate POSGs as a series of one-step Bayesian games using heuristics to approximate future value, trading off limited lookahead for computational efficiency, resulting in locally optimal policies (with respect to the selected heuristic).",
                "Nair et al. [9]s JESP algorithm uses dynamic programming to reach a local optimum solution for finite horizon decentralized POMDPs.",
                "Peshkin et al. [11] and Bernstein et al. [2] are examples of policy search techniques that search for locally optimal policies.",
                "Though all the above techniques improve the efficiency of policy computation considerably, they are unable to provide error bounds on the quality of the solution.",
                "This aspect of quality bounds differentiates SPIDER from all the above techniques.",
                "Acknowledgements.",
                "This material is based upon work supported by the Defense Advanced Research Projects Agency (DARPA), through the Department of the Interior, NBC, Acquisition Services Division under Contract No.",
                "NBCHD030010.",
                "The views and conclusions contained in this document are those of the authors, and should not be interpreted as representing the official policies, either expressed or implied, of the Defense Advanced Research Projects Agency or the U.S. Government. 7.",
                "REFERENCES [1] R. Becker, S. Zilberstein, V. Lesser, and C.V. Goldman.",
                "Solving transition independent decentralized Markov decision processes.",
                "JAIR, 22:423-455, 2004. [2] D. S. Bernstein, E.A.",
                "Hansen, and S. Zilberstein.",
                "Bounded policy iteration for decentralized POMDPs.",
                "In IJCAI, 2005. [3] D. S. Bernstein, S. Zilberstein, and N. Immerman.",
                "The complexity of decentralized control of MDPs.",
                "In UAI, 2000. [4] R. Emery-Montemerlo, G. Gordon, J. Schneider, and S. Thrun.",
                "Approximate solutions for partially observable stochastic games with common payoffs.",
                "In AAMAS, 2004. [5] E. Hansen, D. Bernstein, and S. Zilberstein.",
                "Dynamic programming for partially observable stochastic games.",
                "In AAAI, 2004. [6] V. Lesser, C. Ortiz, and M. Tambe.",
                "Distributed sensor nets: A multiagent perspective.",
                "Kluwer, 2003. [7] R. Maheswaran, M. Tambe, E. Bowring, J. Pearce, and P. Varakantham.",
                "Taking dcop to the real world : Efficient complete solutions for distributed event scheduling.",
                "In AAMAS, 2004. [8] P. J. Modi, W. Shen, M. Tambe, and M. Yokoo.",
                "An asynchronous complete method for distributed constraint optimization.",
                "In AAMAS, 2003. [9] R. Nair, D. Pynadath, M. Yokoo, M. Tambe, and S. Marsella.",
                "Taming decentralized POMDPs: Towards efficient policy computation for multiagent settings.",
                "In IJCAI, 2003. [10] R. Nair, P. Varakantham, M. Tambe, and M. Yokoo.",
                "Networked distributed POMDPs: A synthesis of distributed constraint optimization and POMDPs.",
                "In AAAI, 2005. [11] L. Peshkin, N. Meuleau, K.-E. Kim, and L. Kaelbling.",
                "Learning to cooperate via policy search.",
                "In UAI, 2000. [12] A. Petcu and B. Faltings.",
                "A scalable method for multiagent constraint optimization.",
                "In IJCAI, 2005. [13] D. Szer, F. Charpillet, and S. Zilberstein.",
                "MAA*: A heuristic search algorithm for solving decentralized POMDPs.",
                "In IJCAI, 2005.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 829"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [],
            "translated_text": "",
            "candidates": [],
            "error": []
        },
        "pomdp": {
            "translated_key": "pomdp",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Letting loose a SPIDER on a network of POMDPs: Generating quality guaranteed policies Pradeep Varakantham, Janusz Marecki, Yuichi Yabu∗ , Milind Tambe, Makoto Yokoo∗ University of Southern California, Los Angeles, CA 90089, {varakant, marecki, tambe}@usc.edu ∗ Dept.",
                "of Intelligent Systems, Kyushu University, Fukuoka, 812-8581 Japan, yokoo@is.kyushu-u.ac.jp ABSTRACT Distributed Partially Observable Markov Decision Problems (Distributed POMDPs) are a popular approach for modeling multi-agent systems acting in uncertain domains.",
                "Given the significant complexity of solving distributed POMDPs, particularly as we scale up the numbers of agents, one popular approach has focused on approximate solutions.",
                "Though this approach is efficient, the algorithms within this approach do not provide any guarantees on solution quality.",
                "A second less popular approach focuses on global optimality, but typical results are available only for two agents, and also at considerable computational cost.",
                "This paper overcomes the limitations of both these approaches by providing SPIDER, a novel combination of three key features for policy generation in distributed POMDPs: (i) it exploits agent interaction structure given a network of agents (i.e. allowing easier scale-up to larger number of agents); (ii) it uses a combination of heuristics to speedup policy search; and (iii) it allows quality guaranteed approximations, allowing a systematic tradeoff of solution quality for time.",
                "Experimental results show orders of magnitude improvement in performance when compared with previous global optimal algorithms.",
                "Categories and Subject Descriptors I.2.11 [Artificial Intelligence]: Distributed Artificial IntelligenceMulti-agent Systems General Terms Algorithms, Theory 1.",
                "INTRODUCTION Distributed Partially Observable Markov Decision Problems (Distributed POMDPs) are emerging as a popular approach for modeling sequential decision making in teams operating under uncertainty [9, 4, 1, 2, 13].",
                "The uncertainty arises on account of nondeterminism in the outcomes of actions and because the world state may only be partially (or incorrectly) observable.",
                "Unfortunately, as shown by Bernstein et al. [3], the problem of finding the optimal joint policy for general distributed POMDPs is NEXP-Complete.",
                "Researchers have attempted two different types of approaches towards solving these models.",
                "The first category consists of highly efficient approximate techniques, that may not reach globally optimal solutions [2, 9, 11].",
                "The key problem with these techniques has been their inability to provide any guarantees on the quality of the solution.",
                "In contrast, the second less popular category of approaches has focused on a global optimal result [13, 5, 10].",
                "Though these approaches obtain optimal solutions, they typically consider only two agents.",
                "Furthermore, they fail to exploit structure in the interactions of the agents and hence are severely hampered with respect to scalability when considering more than two agents.",
                "To address these problems with the existing approaches, we propose approximate techniques that provide guarantees on the quality of the solution while focussing on a network of more than two agents.",
                "We first propose the basic SPIDER (Search for Policies In Distributed EnviRonments) algorithm.",
                "There are two key novel features in SPIDER: (i) it is a branch and bound heuristic search technique that uses a MDP-based heuristic function to search for an optimal joint policy; (ii) it exploits network structure of agents by organizing agents into a Depth First Search (DFS) pseudo tree and takes advantage of the independence in the different branches of the DFS tree.",
                "We then provide three enhancements to improve the efficiency of the basic SPIDER algorithm while providing guarantees on the quality of the solution.",
                "The first enhancement uses abstractions for speedup, but does not sacrifice solution quality.",
                "In particular, it initially performs branch and bound search on abstract policies and then extends to complete policies.",
                "The second enhancement obtains speedups by sacrificing solution quality, but within an input parameter that provides the tolerable expected value difference from the optimal solution.",
                "The third enhancement is again based on bounding the search for efficiency, however with a tolerance parameter that is provided as a percentage of optimal.",
                "We experimented with the sensor network domain presented in Nair et al. [10], a domain representative of an important class of problems with networks of agents working in uncertain environments.",
                "In our experiments, we illustrate that SPIDER dominates an existing global optimal approach called GOA [10], the only known global optimal algorithm with demonstrated experimental results for more than two agents.",
                "Furthermore, we demonstrate that abstraction improves the performance of SPIDER significantly (while providing optimal solutions).",
                "We finally demonstrate a key feature of SPIDER: by utilizing the approximation enhancements it enables principled tradeoffs in run-time versus solution quality. 822 978-81-904262-7-5 (RPS) c 2007 IFAAMAS 2.",
                "DOMAIN: DISTRIBUTED SENSOR NETS Distributed sensor networks are a large, important class of domains that motivate our work.",
                "This paper focuses on a set of target tracking problems that arise in certain types of sensor networks [6] first introduced in [10].",
                "Figure 1 shows a specific problem instance within this type consisting of three sensors.",
                "Here, each sensor node can scan in one of four directions: North, South, East or West (see Figure 1).",
                "To track a target and obtain associated reward, two sensors with overlapping scanning areas must coordinate by scanning the same area simultaneously.",
                "In Figure 1, to track a target in Loc11, sensor1 needs to scan East and sensor2 needs to scan West simultaneously.",
                "Thus, sensors have to act in a coordinated fashion.",
                "We assume that there are two independent targets and that each targets movement is uncertain and unaffected by the sensor agents.",
                "Based on the area it is scanning, each sensor receives observations that can have false positives and false negatives.",
                "The sensors observations and transitions are independent of each others actions e.g.the observations that sensor1 receives are independent of sensor2s actions.",
                "Each agent incurs a cost for scanning whether the target is present or not, but no cost if it turns off.",
                "Given the sensors observational uncertainty, the targets uncertain transitions and the distributed nature of the sensor nodes, these sensor nets provide a useful domains for applying distributed <br>pomdp</br> models.",
                "Figure 1: A 3-chain sensor configuration 3.",
                "BACKGROUND 3.1 Model: Network Distributed <br>pomdp</br> The ND-<br>pomdp</br> model was introduced in [10], motivated by domains such as the sensor networks introduced in Section 2.",
                "It is defined as the tuple S, A, P, Ω, O, R, b , where S = ×1≤i≤nSi × Su is the set of world states.",
                "Si refers to the set of local states of agent i and Su is the set of unaffectable states.",
                "Unaffectable state refers to that part of the world state that cannot be affected by the agents actions, e.g. environmental factors like target locations that no agent can control.",
                "A = ×1≤i≤nAi is the set of joint actions, where Ai is the set of action for agent i. ND-<br>pomdp</br> assumes transition independence, where the transition function is defined as P(s, a, s ) = Pu(su, su) · 1≤i≤n Pi(si, su, ai, si), where a = a1, . . . , an is the joint action performed in state s = s1, . . . , sn, su and s = s1, . . . , sn, su is the resulting state.",
                "Ω = ×1≤i≤nΩi is the set of joint observations where Ωi is the set of observations for agents i. Observational independence is assumed in ND-POMDPs i.e., the joint observation function is defined as O(s, a, ω) = 1≤i≤n Oi(si, su, ai, ωi), where s = s1, . . . , sn, su is the world state that results from the agents performing a = a1, . . . , an in the previous state, and ω = ω1, . . . , ωn ∈ Ω is the observation received in state s. This implies that each agents observation depends only on the unaffectable state, its local action and on its resulting local state.",
                "The reward function, R, is defined as R(s, a) = l Rl(sl1, . . . , slr, su, al1, . . . , alr ), where each l could refer to any sub-group of agents and r = |l|.",
                "Based on the reward function, an interaction hypergraph is constructed.",
                "A hyper-link, l, exists between a subset of agents for all Rl that comprise R. The interaction hypergraph is defined as G = (Ag, E), where the agents, Ag, are the vertices and E = {l|l ⊆ Ag ∧ Rl is a component of R} are the edges.",
                "The initial belief state (distribution over the initial state), b, is defined as b(s) = bu(su) · 1≤i≤n bi(si), where bu and bi refer to the distribution over initial unaffectable state and agent is initial belief state, respectively.",
                "The goal in ND-<br>pomdp</br> is to compute the joint policy π = π1, . . . , πn that maximizes teams expected reward over a finite horizon T starting from the belief state b.",
                "An ND-<br>pomdp</br> is similar to an n-ary Distributed Constraint Optimization Problem (DCOP)[8, 12] where the variable at each node represents the policy selected by an individual agent, πi with the domain of the variable being the set of all local policies, Πi.",
                "The reward component Rl where |l| = 1 can be thought of as a local constraint while the reward component Rl where l > 1 corresponds to a non-local constraint in the constraint graph. 3.2 Algorithm: Global Optimal Algorithm (GOA) In previous work, GOA has been defined as a global optimal algorithm for ND-POMDPs [10].",
                "We will use GOA in our experimental comparisons, since GOA is a state-of-the-art global optimal algorithm, and in fact the only one with experimental results available for networks of more than two agents.",
                "GOA borrows from a global optimal DCOP algorithm called DPOP[12].",
                "GOAs message passing follows that of DPOP.",
                "The first phase is the UTIL propagation, where the utility messages, in this case values of policies, are passed up from the leaves to the root.",
                "Value for a policy at an agent is defined as the sum of best response values from its children and the joint policy reward associated with the parent policy.",
                "Thus, given a policy for a parent node, GOA requires an agent to iterate through all its policies, finding the best response policy and returning the value to the parent - while at the parent node, to find the best policy, an agent requires its children to return their best responses to each of its policies.",
                "This UTIL propagation process is repeated at each level in the tree, until the root exhausts all its policies.",
                "In the second phase of VALUE propagation, where the optimal policies are passed down from the root till the leaves.",
                "GOA takes advantage of the local interactions in the interaction graph, by pruning out unnecessary joint policy evaluations (associated with nodes not connected directly in the tree).",
                "Since the interaction graph captures all the reward interactions among agents and as this algorithm iterates through all the relevant joint policy evaluations, this algorithm yields a globally optimal solution. 4.",
                "SPIDER As mentioned in Section 3.1, an ND-<br>pomdp</br> can be treated as a DCOP, where the goal is to compute a joint policy that maximizes the overall joint reward.",
                "The brute-force technique for computing an optimal policy would be to examine the expected values for all possible joint policies.",
                "The key idea in SPIDER is to avoid computation of expected values for the entire space of joint policies, by utilizing upper bounds on the expected values of policies and the interaction structure of the agents.",
                "Akin to some of the algorithms for DCOP [8, 12], SPIDER has a pre-processing step that constructs a DFS tree corresponding to the given interaction structure.",
                "Note that these DFS trees are pseudo trees [12] that allow links between ancestors and children.",
                "We employ the Maximum Constrained Node (MCN) heuristic used in the DCOP algorithm, ADOPT [8], however other heuristics (such as MLSP heuristic from [7]) can also be employed.",
                "MCN heuristic tries to place agents with more number of constraints at the top of the tree.",
                "This tree governs how the search for the optimal joint polThe Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 823 icy proceeds in SPIDER.",
                "The algorithms presented in this paper are easily extendable to hyper-trees, however for expository purposes, we assume binary trees.",
                "SPIDER is an algorithm for centralized planning and distributed execution in distributed POMDPs.",
                "In this paper, we employ the following notation to denote policies and expected values: Ancestors(i) ⇒ agents from i to the root (not including i).",
                "Tree(i) ⇒ agents in the sub-tree (not including i) for which i is the root. πroot+ ⇒ joint policy of all agents. πi+ ⇒ joint policy of all agents in Tree(i) ∪ i. πi− ⇒ joint policy of agents that are in Ancestors(i). πi ⇒ policy of the ith agent. ˆv[πi, πi− ] ⇒ upper bound on the expected value for πi+ given πi and policies of ancestor agents i.e. πi− . ˆvj[πi, πi− ] ⇒ upper bound on the expected value for πi+ from the jth child. v[πi, πi− ] ⇒ expected value for πi given policies of ancestor agents, πi− . v[πi+ , πi− ] ⇒ expected value for πi+ given policies of ancestor agents, πi− . vj[πi+ , πi− ] ⇒ expected value for πi+ from the jth child.",
                "Figure 2: Execution of SPIDER, an example 4.1 Outline of SPIDER SPIDER is based on the idea of branch and bound search, where the nodes in the search tree represent partial/complete joint policies.",
                "Figure 2 shows an example search tree for the SPIDER algorithm, using an example of the three agent chain.",
                "Before SPIDER begins its search we create a DFS tree (i.e. pseudo tree) from the three agent chain, with the middle agent as the root of this tree.",
                "SPIDER exploits the structure of this DFS tree while engaging in its search.",
                "Note that in our example figure, each agent is assigned a policy with T=2.",
                "Thus, each rounded rectange (search tree node) indicates a partial/complete joint policy, a rectangle indicates an agent and the ovals internal to an agent show its policy.",
                "Heuristic or actual expected value for a joint policy is indicated in the top right corner of the rounded rectangle.",
                "If the number is italicized and underlined, it implies that the actual expected value of the joint policy is provided.",
                "SPIDER begins with no policy assigned to any of the agents (shown in the level 1 of the search tree).",
                "Level 2 of the search tree indicates that the joint policies are sorted based on upper bounds computed for root agents policies.",
                "Level 3 shows one SPIDER search node with a complete joint policy (a policy assigned to each of the agents).",
                "The expected value for this joint policy is used to prune out the nodes in level 2 (the ones with upper bounds < 234) When creating policies for each non-leaf agent i, SPIDER potentially performs two steps: 1.",
                "Obtaining upper bounds and sorting: In this step, agent i computes upper bounds on the expected values, ˆv[πi, πi− ] of the joint policies πi+ corresponding to each of its policy πi and fixed ancestor policies.",
                "An MDP based heuristic is used to compute these upper bounds on the expected values.",
                "Detailed description about this MDP heuristic is provided in Section 4.2.",
                "All policies of agent i, Πi are then sorted based on these upper bounds (also referred to as heuristic values henceforth) in descending order.",
                "Exploration of these policies (in step 2 below) are performed in this descending order.",
                "As indicated in the level 2 of the search tree (of Figure 2), all the joint policies are sorted based on the heuristic values, indicated in the top right corner of each joint policy.",
                "The intuition behind sorting and then exploring policies in descending order of upper bounds, is that the policies with higher upper bounds could yield joint policies with higher expected values. 2.",
                "Exploration and Pruning: Exploration implies computing the best response joint policy πi+,∗ corresponding to fixed ancestor policies of agent i, πi− .",
                "This is performed by iterating through all policies of agent i i.e.",
                "Πi and summing two quantities for each policy: (i) the best response for all of is children (obtained by performing steps 1 and 2 at each of the child nodes); (ii) the expected value obtained by i for fixed policies of ancestors.",
                "Thus, exploration of a policy πi yields actual expected value of a joint policy, πi+ represented as v[πi+ , πi− ].",
                "The policy with the highest expected value is the best response policy.",
                "Pruning refers to avoiding exploring all policies (or computing expected values) at agent i by using the current best expected value, vmax [πi+ , πi− ].",
                "Henceforth, this vmax [πi+ , πi− ] will be referred to as threshold.",
                "A policy, πi need not be explored if the upper bound for that policy, ˆv[πi, πi− ] is less than the threshold.",
                "This is because the expected value for the best joint policy attainable for that policy will be less than the threshold.",
                "On the other hand, when considering a leaf agent, SPIDER computes the best response policy (and consequently its expected value) corresponding to fixed policies of its ancestors, πi− .",
                "This is accomplished by computing expected values for each of the policies (corresponding to fixed policies of ancestors) and selecting the highest expected value policy.",
                "In Figure 2, SPIDER assigns best response policies to leaf agents at level 3.",
                "The policy for the left leaf agent is to perform action East at each time step in the policy, while the policy for the right leaf agent is to perform Off at each time step.",
                "These best response policies from the leaf agents yield an actual expected value of 234 for the complete joint policy.",
                "Algorithm 1 provides the pseudo code for SPIDER.",
                "This algorithm outputs the best joint policy, πi+,∗ (with an expected value greater than threshold) for the agents in Tree(i).",
                "Lines 3-8 compute the best response policy of a leaf agent i, while lines 9-23 computes the best response joint policy for agents in Tree(i).",
                "This best response computation for a non-leaf agent i includes: (a) Sorting of policies (in descending order) based on heuristic values on line 11; (b) Computing best response policies at each of the children for fixed policies of agent i in lines 16-20; and (c) Maintaining 824 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Algorithm 1 SPIDER(i, πi− , threshold) 1: πi+,∗ ← null 2: Πi ← GET-ALL-POLICIES (horizon, Ai, Ωi) 3: if IS-LEAF(i) then 4: for all πi ∈ Πi do 5: v[πi, πi−] ← JOINT-REWARD (πi, πi−) 6: if v[πi, πi−] > threshold then 7: πi+,∗ ← πi 8: threshold ← v[πi, πi−] 9: else 10: children ← CHILDREN (i) 11: ˆΠi ← UPPER-BOUND-SORT(i, Πi, πi−) 12: for all πi ∈ ˆΠi do 13: ˜πi+ ← πi 14: if ˆv[πi, πi−] < threshold then 15: Go to line 12 16: for all j ∈ children do 17: jThres ← threshold − v[πi, πi−]− Σk∈children,k=j ˆvk[πi, πi−] 18: πj+,∗ ← SPIDER(j, πi πi−, jThres) 19: ˜πi+ ← ˜πi+ πj+,∗ 20: ˆvj[πi, πi−] ← v[πj+,∗, πi πi−] 21: if v[˜πi+, πi−] > threshold then 22: threshold ← v[˜πi+, πi−] 23: πi+,∗ ← ˜πi+ 24: return πi+,∗ Algorithm 2 UPPER-BOUND-SORT(i, Πi, πi− ) 1: children ← CHILDREN (i) 2: ˆΠi ← null /* Stores the sorted list */ 3: for all πi ∈ Πi do 4: ˆv[πi, πi−] ← JOINT-REWARD (πi, πi−) 5: for all j ∈ children do 6: ˆvj[πi, πi−] ← UPPER-BOUND(i, j, πi πi−) 7: ˆv[πi, πi−] + ← ˆvj[πi, πi−] 8: ˆΠi ← INSERT-INTO-SORTED (πi, ˆΠi) 9: return ˆΠi best expected value, joint policy in lines 21-23.",
                "Algorithm 2 provides the pseudo code for sorting policies based on the upper bounds on the expected values of joint policies.",
                "Expected value for an agent i consists of two parts: value obtained from ancestors and value obtained from its children.",
                "Line 4 computes the expected value obtained from ancestors of the agent (using JOINT-REWARD function), while lines 5-7 compute the heuristic value from the children.",
                "The sum of these two parts yields an upper bound on the expected value for agent i, and line 8 of the algorithm sorts the policies based on these upper bounds. 4.2 MDP based heuristic function The heuristic function quickly provides an upper bound on the expected value obtainable from the agents in Tree(i).",
                "The subtree of agents is a distributed <br>pomdp</br> in itself and the idea here is to construct a centralized MDP corresponding to the (sub-tree) distributed <br>pomdp</br> and obtain the expected value of the optimal policy for this centralized MDP.",
                "To reiterate this in terms of the agents in DFS tree interaction structure, we assume full observability for the agents in Tree(i) and for fixed policies of the agents in {Ancestors(i) ∪ i}, we compute the joint value ˆv[πi+ , πi− ] .",
                "We use the following notation for presenting the equations for computing upper bounds/heuristic values (for agents i and k): Let Ei− denote the set of links between agents in {Ancestors(i)∪ i} and Tree(i), Ei+ denote the set of links between agents in Tree(i).",
                "Also, if l ∈ Ei− , then l1 is the agent in {Ancestors(i)∪ i} and l2 is the agent in Tree(i), that l connects together.",
                "We first compact the standard notation: ot k =Ok(st+1 k , st+1 u , πk(ωt k), ωt+1 k ) (1) pt k =Pk(st k, st u, πk(ωt k), st+1 k ) · ot k pt u =P(st u, st+1 u ) st l = st l1 , st l2 , st u ; ωt l = ωt l1 , ωt l2 rt l =Rl(st l , πl1 (ωt l1 ), πl2 (ωt l2 )) vt l =V t πl (st l , st u, ωt l1 , ωt l2 ) Depending on the location of agent k in the agent tree we have the following cases: IF k ∈ {Ancestors(i) ∪ i}, ˆpt k = pt k, (2) IF k ∈ Tree(i), ˆpt k = Pk(st k, st u, πk(ωt k), st+1 k ) IF l ∈ Ei− , ˆrt l = max {al2 } Rl(st l , πl1 (ωt l1 ), al2 ) IF l ∈ Ei+ , ˆrt l = max {al1 ,al2 } Rl(st l , al1 , al2 ) The value function for an agent i executing the joint policy πi+ at time η − 1 is provided by the equation: V η−1 πi+ (sη−1 , ωη−1 ) = l∈Ei− vη−1 l + l∈Ei+ vη−1 l (3) where vη−1 l = rη−1 l + ω η l ,sη pη−1 l1 pη−1 l2 pη−1 u vη l Algorithm 3 UPPER-BOUND (i, j, πj− ) 1: val ← 0 2: for all l ∈ Ej− ∪ Ej+ do 3: if l ∈ Ej− then πl1 ← φ 4: for all s0 l do 5: val + ← startBel[s0 l ]· UPPER-BOUND-TIME (i, s0 l , j, πl1 , ) 6: return val Algorithm 4 UPPER-BOUND-TIME (i, st l , j, πl1 , ωt l1 ) 1: maxV al ← −∞ 2: for all al1 , al2 do 3: if l ∈ Ei− and l ∈ Ej− then al1 ← πl1 (ωt l1 ) 4: val ← GET-REWARD(st l , al1 , al2 ) 5: if t < πi.horizon − 1 then 6: for all st+1 l , ωt+1 l1 do 7: futV al←pt u ˆpt l1 ˆpt l2 8: futV al ∗ ← UPPER-BOUND-TIME(st+1 l , j, πl1 , ωt l1 ωt+1 l1 ) 9: val + ← futV al 10: if val > maxV al then maxV al ← val 11: return maxV al Upper bound on the expected value for a link is computed by modifying the equation 3 to reflect the full observability assumption.",
                "This involves removing the observational probability term for agents in Tree(i) and maximizing the future value ˆvη l over the actions of those agents (in Tree(i)).",
                "Thus, the equation for the The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 825 computation of the upper bound on a link l, is as follows: IF l ∈ Ei− , ˆvη−1 l =ˆrη−1 l + max al2 ω η l1 ,s η l ˆpη−1 l1 ˆpη−1 l2 pη−1 u ˆvη l IF l ∈ Ei+ , ˆvη−1 l =ˆrη−1 l + max al1 ,al2 s η l ˆpη−1 l1 ˆpη−1 l2 pη−1 u ˆvη l Algorithm 3 and Algorithm 4 provide the algorithm for computing upper bound for child j of agent i, using the equations descirbed above.",
                "While Algorithm 4 computes the upper bound on a link given the starting state, Algorithm 3 sums the upper bound values computed over each of the links in Ei− ∪ Ei+ . 4.3 Abstraction Algorithm 5 SPIDER-ABS(i, πi− , threshold) 1: πi+,∗ ← null 2: Πi ← GET-POLICIES (<>, 1) 3: if IS-LEAF(i) then 4: for all πi ∈ Πi do 5: absHeuristic ← GET-ABS-HEURISTIC (πi, πi−) 6: absHeuristic ∗ ← (timeHorizon − πi.horizon) 7: if πi.horizon = timeHorizon and πi.absNodes = 0 then 8: v[πi, πi−] ← JOINT-REWARD (πi, πi−) 9: if v[πi, πi−] > threshold then 10: πi+,∗ ← πi; threshold ← v[πi, πi−] 11: else if v[πi, πi−] + absHeuristic > threshold then 12: ˆΠi ← EXTEND-POLICY (πi, πi.absNodes + 1) 13: Πi + ← INSERT-SORTED-POLICIES ( ˆΠi) 14: REMOVE(πi) 15: else 16: children ← CHILDREN (i) 17: Πi ← UPPER-BOUND-SORT(i, Πi, πi−) 18: for all πi ∈ Πi do 19: ˜πi+ ← πi 20: absHeuristic ← GET-ABS-HEURISTIC (πi, πi−) 21: absHeuristic ∗ ← (timeHorizon − πi.horizon) 22: if πi.horizon = timeHorizon and πi.absNodes = 0 then 23: if ˆv[πi, πi−] < threshold and πi.absNodes = 0 then 24: Go to line 19 25: for all j ∈ children do 26: jThres ← threshold − v[πi, πi−]− Σk∈children,k=j ˆvk[πi, πi−] 27: πj+,∗ ← SPIDER(j, πi πi−, jThres) 28: ˜πi+ ← ˜πi+ πj+,∗; ˆvj[πi, πi−] ← v[πj+,∗, πi πi−] 29: if v[˜πi+, πi−] > threshold then 30: threshold ← v[˜πi+, πi−]; πi+,∗ ← ˜πi+ 31: else if ˆv[πi+, πi−] + absHeuristic > threshold then 32: ˆΠi ← EXTEND-POLICY (πi, πi.absNodes + 1) 33: Πi + ← INSERT-SORTED-POLICIES (ˆΠi) 34: REMOVE(πi) 35: return πi+,∗ In SPIDER, the exploration/pruning phase can only begin after the heuristic (or upper bound) computation and sorting for the policies has ended.",
                "We provide an approach to possibly circumvent the exploration of a group of policies based on heuristic computation for one abstract policy, thus leading to an improvement in runtime performance (without loss in solution quality).",
                "The important steps in this technique are defining the abstract policy and how heuristic values are computated for the abstract policies.",
                "In this paper, we propose two types of abstraction: 1.",
                "Horizon Based Abstraction (HBA): Here, the abstract policy is defined as a shorter horizon policy.",
                "It represents a group of longer horizon policies that have the same actions as the abstract policy for times less than or equal to the horizon of the abstract policy.",
                "In Figure 3(a), a T=1 abstract policy that performs East action, represents a group of T=2 policies, that perform East in the first time step.",
                "For HBA, there are two parts to heuristic computation: (a) Computing the upper bound for the horizon of the abstract policy.",
                "This is same as the heuristic computation defined by the GETHEURISTIC() algorithm for SPIDER, however with a shorter time horizon (horizon of the abstract policy). (b) Computing the maximum possible reward that can be accumulated in one time step (using GET-ABS-HEURISTIC()) and multiplying it by the number of time steps to time horizon.",
                "This maximum possible reward (for one time step) is obtained by iterating through all the actions of all the agents in Tree(i) and computing the maximum joint reward for any joint action.",
                "Sum of (a) and (b) is the heuristic value for a HBA abstract policy. 2.",
                "Node Based Abstraction (NBA): Here an abstract policy is obtained by not associating actions to certain nodes of the policy tree.",
                "Unlike in HBA, this implies multiple levels of abstraction.",
                "This is illustrated in Figure 3(b), where there are T=2 policies that do not have an action for observation TP.",
                "These incomplete T=2 policies are abstractions for T=2 complete policies.",
                "Increased levels of abstraction leads to faster computation of a complete joint policy, πroot+ and also to shorter heuristic computation and exploration, pruning phases.",
                "For NBA, the heuristic computation is similar to that of a normal policy, except in cases where there is no action associated with policy nodes.",
                "In such cases, the immediate reward is taken as Rmax (maximum reward for any action).",
                "We combine both the abstraction techniques mentioned above into one technique, SPIDER-ABS.",
                "Algorithm 5 provides the algorithm for this abstraction technique.",
                "For computing optimal joint policy with SPIDER-ABS, a non-leaf agent i initially examines all abstract T=1 policies (line 2) and sorts them based on abstract policy heuristic computations (line 17).",
                "The abstraction horizon is gradually increased and these abstract policies are then explored in descending order of heuristic values and ones that have heuristic values less than the threshold are pruned (lines 23-24).",
                "Exploration in SPIDER-ABS has the same definition as in SPIDER if the policy being explored has a horizon of policy computation which is equal to the actual time horizon and if all the nodes of the policy have an action associated with them (lines 25-30).",
                "However, if those conditions are not met, then it is substituted by a group of policies that it represents (using EXTEND-POLICY () function) (lines 31-32).",
                "EXTEND-POLICY() function is also responsible for initializing the horizon and absNodes of a policy. absNodes represents the number of nodes at the last level in the policy tree, that do not have an action assigned to them.",
                "If πi.absNodes = |Ωi|πi.horizon−1 (i.e. total number of policy nodes possible at πi.horizon) , then πi.absNodes is set to zero and πi.horizon is increased by 1.",
                "Otherwise, πi.absNodes is increased by 1.",
                "Thus, this function combines both HBA and NBA by using the policy variables, horizon and absNodes.",
                "Before substituting the abstract policy with a group of policies, those policies are sorted based on heuristic values (line 33).",
                "Similar type of abstraction based best response computation is adopted at leaf agents (lines 3-14). 4.4 Value ApproXimation (VAX) In this section, we present an approximate enhancement to SPIDER called VAX.",
                "The input to this technique is an approximation parameter , which determines the difference from the optimal solution quality.",
                "This approximation parameter is used at each agent for pruning out joint policies.",
                "The pruning mechanism in SPIDER and SPIDER-Abs dictates that a joint policy be pruned only if the threshold is exactly greater than the heuristic value.",
                "However, the 826 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Figure 3: Example of abstraction for (a) HBA (Horizon Based Abstraction) and (b) NBA (Node Based Abstraction) idea in this technique is to prune out joint a policy if the following condition is satisfied: threshold + > ˆv[πi , πi− ].",
                "Apart from the pruning condition, VAX is the same as SPIDER/SPIDER-ABS.",
                "In the example of Figure 2, if the heuristic value for the second joint policy (or second search tree node) in level 2 were 238 instead of 232, then that policy could not be be pruned using SPIDER or SPIDER-Abs.",
                "However, in VAX with an approximation parameter of 5, the joint policy in consideration would also be pruned.",
                "This is because the threshold (234) at that juncture plus the approximation parameter (5), i.e. 239 would have been greater than the heuristic value for that joint policy (238).",
                "It can be noted from the example (just discussed) that this kind of pruning can lead to fewer explorations and hence lead to an improvement in the overall run-time performance.",
                "However, this can entail a sacrifice in the quality of the solution because this technique can prune out a candidate optimal solution.",
                "A bound on the error introduced by this approximate algorithm as a function of , is provided by Proposition 3. 4.5 Percentage ApproXimation (PAX) In this section, we present the second approximation enhancement over SPIDER called PAX.",
                "Input to this technique is a parameter, δ that represents the minimum percentage of the optimal solution quality that is desired.",
                "Output of this technique is a policy with an expected value that is at least δ% of the optimal solution quality.",
                "A policy is pruned if the following condition is satisfied: threshold > δ 100 ˆv[πi , πi− ].",
                "Like in VAX, the only difference between PAX and SPIDER/SPIDER-ABS is this pruning condition.",
                "Again in Figure 2, if the heuristic value for the second search tree node in level 2 were 238 instead of 232, then PAX with an input parameter of 98% would be able to prune that search tree node (since 98 100 ∗238 < 234).",
                "This type of pruning leads to fewer explorations and hence an improvement in run-time performance, while potentially leading to a loss in quality of the solution.",
                "Proposition 4 provides the bound on quality loss. 4.6 Theoretical Results PROPOSITION 1.",
                "Heuristic provided using the centralized MDP heuristic is admissible.",
                "Proof.",
                "For the value provided by the heuristic to be admissible, it should be an over estimate of the expected value for a joint policy.",
                "Thus, we need to show that: For l ∈ Ei+ ∪ Ei− : ˆvt l ≥ vt l (refer to notation in Section 4.2) We use mathematical induction on t to prove this.",
                "Base case: t = T − 1.",
                "Irrespective of whether l ∈ Ei− or l ∈ Ei+ , ˆrt l is computed by maximizing over all actions of the agents in Tree(i), while rt l is computed for fixed policies of the same agents.",
                "Hence, ˆrt l ≥ rt l and also ˆvt l ≥ vt l .",
                "Assumption: Proposition holds for t = η, where 1 ≤ η < T − 1.",
                "We now have to prove that the proposition holds for t = η − 1.",
                "We show the proof for l ∈ Ei− and similar reasoning can be adopted to prove for l ∈ Ei+ .",
                "The heuristic value function for l ∈ Ei− is provided by the following equation: ˆvη−1 l =ˆrη−1 l + max al2 ω η l1 ,s η l ˆpη−1 l1 ˆpη−1 l2 pη−1 u ˆvη l Rewriting the RHS and using Eqn 2 (in Section 4.2) =ˆrη−1 l + max al2 ω η l1 ,s η l pη−1 u pη−1 l1 ˆpη−1 l2 ˆvη l =ˆrη−1 l + ω η l1 ,s η l pη−1 u pη−1 l1 max al2 ˆpη−1 l2 ˆvη l Since maxal2 ˆpη−1 l2 ˆvη l ≥ ωl2 oη−1 l2 ˆpη−1 l2 ˆvη l and pη−1 l2 = oη−1 l2 ˆpη−1 l2 ≥ˆrη−1 l + ω η l1 ,s η l pη−1 u pη−1 l1 ωl2 pη−1 l2 ˆvη l Since ˆvη l ≥ vη l (from the assumption) ≥ˆrη−1 l + ω η l1 ,s η l pη−1 u pη−1 l1 ωl2 pη−1 l2 vη l Since ˆrη−1 l ≥ rη−1 l (by definition) ≥rη−1 l + ω η l1 ,s η l pη−1 u pη−1 l1 ωl2 pη−1 l2 vη l =rη−1 l + (ω η l ,s η l ) pη−1 u pη−1 l1 pη−1 l2 vη l = vη−1 l Thus proved.",
                "PROPOSITION 2.",
                "SPIDER provides an optimal solution.",
                "Proof.",
                "SPIDER examines all possible joint policies given the interaction structure of the agents.",
                "The only exception being when a joint policy is pruned based on the heuristic value.",
                "Thus, as long as a candidate optimal policy is not pruned, SPIDER will return an optimal policy.",
                "As proved in Proposition 1, the expected value for a joint policy is always an upper bound.",
                "Hence when a joint policy is pruned, it cannot be an optimal solution.",
                "PROPOSITION 3.",
                "Error bound on the solution quality for VAX (implemented over SPIDER-ABS) with an approximation parameter of is ρ , where ρ is the number of leaf nodes in the DFS tree.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 827 Proof.",
                "We prove this proposition using mathematical induction on the depth of the DFS tree.",
                "Base case: depth = 1 (i.e. one node).",
                "Best response is computed by iterating through all policies, Πk.",
                "A policy,πk is pruned if ˆv[πk, πk− ] < threshold + .",
                "Thus the best response policy computed by VAX would be at most away from the optimal best response.",
                "Hence the proposition holds for the base case.",
                "Assumption: Proposition holds for d, where 1 ≤ depth ≤ d. We now have to prove that the proposition holds for d + 1.",
                "Without loss of generality, lets assume that the root node of this tree has k children.",
                "Each of this children is of depth ≤ d, and hence from the assumption, the error introduced in kth child is ρk , where ρk is the number of leaf nodes in kth child of the root.",
                "Therefore, ρ = k ρk, where ρ is the number of leaf nodes in the tree.",
                "In SPIDER-ABS, threshold at the root agent, thresspider = k v[πk+ , πk− ].",
                "However, with VAX the threshold at the root agent will be (in the worst case), threshvax = k v[πk+ , πk− ]− k ρk .",
                "Hence, with VAX a joint policy is pruned at the root agent if ˆv[πroot, πroot− ] < threshvax + ⇒ ˆv[πroot, πroot− ] < threshspider − (( k ρk) − 1) ≤ threshspider − ( k ρk) ≤ threshspider − ρ .",
                "Hence proved.",
                "PROPOSITION 4.",
                "For PAX (implemented over SPIDER-ABS) with an input parameter of δ, the solution quality is at least δ 100 v[πroot+,∗ ], where v[πroot+,∗ ] denotes the optimal solution quality.",
                "Proof.",
                "We prove this proposition using mathematical induction on the depth of the DFS tree.",
                "Base case: depth = 1 (i.e. one node).",
                "Best response is computed by iterating through all policies, Πk.",
                "A policy,πk is pruned if δ 100 ˆv[πk, πk− ] < threshold.",
                "Thus the best response policy computed by PAX would be at least δ 100 times the optimal best response.",
                "Hence the proposition holds for the base case.",
                "Assumption: Proposition holds for d, where 1 ≤ depth ≤ d. We now have to prove that the proposition holds for d + 1.",
                "Without loss of generality, lets assume that the root node of this tree has k children.",
                "Each of this children is of depth ≤ d, and hence from the assumption, the solution quality in the kth child is at least δ 100 v[πk+,∗ , πk− ] for PAX.",
                "With SPIDER-ABS, a joint policy is pruned at the root agent if ˆv[πroot, πroot− ] < k v[πk+,∗ , πk− ].",
                "However with PAX, a joint policy is pruned if δ 100 ˆv[πroot, πroot− ] < k δ 100 v[πk+,∗ , πk− ] ⇒ ˆv[πroot, πroot− ] < k v[πk+,∗ , πk− ].",
                "Since the pruning condition at the root agent in PAX is the same as the one in SPIDER-ABS, there is no error introduced at the root agent and all the error is introduced in the children.",
                "Thus, overall solution quality is at least δ 100 of the optimal solution.",
                "Hence proved. 5.",
                "EXPERIMENTAL RESULTS All our experiments were conducted on the sensor network domain from Section 2.",
                "The five network configurations employed are shown in Figure 4.",
                "Algorithms that we experimented with are GOA, SPIDER, SPIDER-ABS, PAX and VAX.",
                "We compare against GOA because it is the only global optimal algorithm that considers more than two agents.",
                "We performed two sets of experiments: (i) firstly, we compared the run-time performance of the above algorithms and (ii) secondly, we experimented with PAX and VAX to study the tradeoff between run-time and solution quality.",
                "Experiments were terminated after 10000 seconds1 .",
                "Figure 5(a) provides run-time comparisons between the optimal algorithms GOA, SPIDER, SPIDER-Abs and the approximate algorithms, PAX ( of 30) and VAX(δ of 80).",
                "X-axis denotes the 1 Machine specs for all experiments: Intel Xeon 3.6 GHZ processor, 2GB RAM sensor network configuration used, while Y-axis indicates the runtime (on a log-scale).",
                "The time horizon of policy computation was 3.",
                "For each configuration (3-chain, 4-chain, 4-star and 5-star), there are five bars indicating the time taken by GOA, SPIDER, SPIDERAbs, PAX and VAX.",
                "GOA did not terminate within the time limit for 4-star and 5-star configurations.",
                "SPIDER-Abs dominated the SPIDER and GOA for all the configurations.",
                "For instance, in the 3chain configuration, SPIDER-ABS provides 230-fold speedup over GOA and 2-fold speedup over SPIDER and for the 4-chain configuration it provides 58-fold speedup over GOA and 2-fold speedup over SPIDER.",
                "The two approximation approaches, VAX and PAX provided further improvement in performance over SPIDER-Abs.",
                "For instance, in the 5-star configuration VAX provides a 15-fold speedup and PAX provides a 8-fold speedup over SPIDER-Abs.",
                "Figures 5(b) provides a comparison of the solution quality obtained using the different algorithms for the problems tested in Figure 5(a).",
                "X-axis denotes the sensor network configuration while Y-axis indicates the solution quality.",
                "Since GOA, SPIDER, and SPIDER-Abs are all global optimal algorithms, the solution quality is the same for all those algorithms.",
                "For 5-P configuration, the global optimal algorithms did not terminate within the limit of 10000 seconds, so the bar for optimal quality indicates an upper bound on the optimal solution quality.",
                "With both the approximations, we obtained a solution quality that was close to the optimal solution quality.",
                "In 3-chain and 4-star configurations, it is remarkable that both PAX and VAX obtained almost the same actual quality as the global optimal algorithms, despite the approximation parameter and δ.",
                "For other configurations as well, the loss in quality was less than 20% of the optimal solution quality.",
                "Figure 5(c) provides the time to solution with PAX (for varying epsilons).",
                "X-axis denotes the approximation parameter, δ (percentage to optimal) used, while Y-axis denotes the time taken to compute the solution (on a log-scale).",
                "The time horizon for all the configurations was 4.",
                "As δ was decreased from 70 to 30, the time to solution decreased drastically.",
                "For instance, in the 3-chain case there was a total speedup of 170-fold when the δ was changed from 70 to 30.",
                "Interestingly, even with a low δ of 30%, the actual solution quality remained equal to the one obtained at 70%.",
                "Figure 5(d) provides the time to solution for all the configurations with VAX (for varying epsilons).",
                "X-axis denotes the approximation parameter, used, while Y-axis denotes the time taken to compute the solution (on a log-scale).",
                "The time horizon for all the configurations was 4.",
                "As was increased, the time to solution decreased drastically.",
                "For instance, in the 4-star case there was a total speedup of 73-fold when the was changed from 60 to 140.",
                "Again, the actual solution quality did not change with varying epsilon.",
                "Figure 4: Sensor network configurations 828 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Figure 5: Comparison of GOA, SPIDER, SPIDER-Abs and VAX for T = 3 on (a) Runtime and (b) Solution quality; (c) Time to solution for PAX with varying percentage to optimal for T=4 (d) Time to solution for VAX with varying epsilon for T=4 6.",
                "SUMMARY AND RELATED WORK This paper presents four algorithms SPIDER, SPIDER-ABS, PAX and VAX that provide a novel combination of features for policy search in distributed POMDPs: (i) exploiting agent interaction structure given a network of agents (i.e. easier scale-up to larger number of agents); (ii) using branch and bound search with an MDP based heuristic function; (iii) utilizing abstraction to improve runtime performance without sacrificing solution quality; (iv) providing a priori percentage bounds on quality of solutions using PAX; and (v) providing expected value bounds on the quality of solutions using VAX.",
                "These features allow for systematic tradeoff of solution quality for run-time in networks of agents operating under uncertainty.",
                "Experimental results show orders of magnitude improvement in performance over previous global optimal algorithms.",
                "Researchers have typically employed two types of techniques for solving distributed POMDPs.",
                "The first set of techniques compute global optimal solutions.",
                "Hansen et al. [5] present an algorithm based on dynamic programming and iterated elimination of dominant policies, that provides optimal solutions for distributed POMDPs.",
                "Szer et al. [13] provide an optimal heuristic search method for solving Decentralized POMDPs.",
                "This algorithm is based on the combination of a classical heuristic search algorithm, A∗ and decentralized control theory.",
                "The key differences between SPIDER and MAA* are: (a) Enhancements to SPIDER (VAX and PAX) provide for quality guaranteed approximations, while MAA* is a global optimal algorithm and hence involves significant computational complexity; (b) Due to MAA*s inability to exploit interaction structure, it was illustrated only with two agents.",
                "However, SPIDER has been illustrated for networks of agents; and (c) SPIDER explores the joint policy one agent at a time, while MAA* expands it one time step at a time (simultaneously for all the agents).",
                "The second set of techniques seek approximate policies.",
                "EmeryMontemerlo et al. [4] approximate POSGs as a series of one-step Bayesian games using heuristics to approximate future value, trading off limited lookahead for computational efficiency, resulting in locally optimal policies (with respect to the selected heuristic).",
                "Nair et al. [9]s JESP algorithm uses dynamic programming to reach a local optimum solution for finite horizon decentralized POMDPs.",
                "Peshkin et al. [11] and Bernstein et al. [2] are examples of policy search techniques that search for locally optimal policies.",
                "Though all the above techniques improve the efficiency of policy computation considerably, they are unable to provide error bounds on the quality of the solution.",
                "This aspect of quality bounds differentiates SPIDER from all the above techniques.",
                "Acknowledgements.",
                "This material is based upon work supported by the Defense Advanced Research Projects Agency (DARPA), through the Department of the Interior, NBC, Acquisition Services Division under Contract No.",
                "NBCHD030010.",
                "The views and conclusions contained in this document are those of the authors, and should not be interpreted as representing the official policies, either expressed or implied, of the Defense Advanced Research Projects Agency or the U.S. Government. 7.",
                "REFERENCES [1] R. Becker, S. Zilberstein, V. Lesser, and C.V. Goldman.",
                "Solving transition independent decentralized Markov decision processes.",
                "JAIR, 22:423-455, 2004. [2] D. S. Bernstein, E.A.",
                "Hansen, and S. Zilberstein.",
                "Bounded policy iteration for decentralized POMDPs.",
                "In IJCAI, 2005. [3] D. S. Bernstein, S. Zilberstein, and N. Immerman.",
                "The complexity of decentralized control of MDPs.",
                "In UAI, 2000. [4] R. Emery-Montemerlo, G. Gordon, J. Schneider, and S. Thrun.",
                "Approximate solutions for partially observable stochastic games with common payoffs.",
                "In AAMAS, 2004. [5] E. Hansen, D. Bernstein, and S. Zilberstein.",
                "Dynamic programming for partially observable stochastic games.",
                "In AAAI, 2004. [6] V. Lesser, C. Ortiz, and M. Tambe.",
                "Distributed sensor nets: A multiagent perspective.",
                "Kluwer, 2003. [7] R. Maheswaran, M. Tambe, E. Bowring, J. Pearce, and P. Varakantham.",
                "Taking dcop to the real world : Efficient complete solutions for distributed event scheduling.",
                "In AAMAS, 2004. [8] P. J. Modi, W. Shen, M. Tambe, and M. Yokoo.",
                "An asynchronous complete method for distributed constraint optimization.",
                "In AAMAS, 2003. [9] R. Nair, D. Pynadath, M. Yokoo, M. Tambe, and S. Marsella.",
                "Taming decentralized POMDPs: Towards efficient policy computation for multiagent settings.",
                "In IJCAI, 2003. [10] R. Nair, P. Varakantham, M. Tambe, and M. Yokoo.",
                "Networked distributed POMDPs: A synthesis of distributed constraint optimization and POMDPs.",
                "In AAAI, 2005. [11] L. Peshkin, N. Meuleau, K.-E. Kim, and L. Kaelbling.",
                "Learning to cooperate via policy search.",
                "In UAI, 2000. [12] A. Petcu and B. Faltings.",
                "A scalable method for multiagent constraint optimization.",
                "In IJCAI, 2005. [13] D. Szer, F. Charpillet, and S. Zilberstein.",
                "MAA*: A heuristic search algorithm for solving decentralized POMDPs.",
                "In IJCAI, 2005.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 829"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Dada la incertidumbre observacional de los sensores, los objetivos de las transiciones inciertas y la naturaleza distribuida de los nodos del sensor, estas redes de sensores proporcionan un dominio útil para aplicar modelos \"POMDP\" distribuidos.",
                "Modelo de fondo 3.1: El modelo \"POMDP\" ND- \"POMDP\" distribuido por la red se introdujo en [10], motivado por dominios como las redes de sensores introducidas en la Sección 2.",
                "A = × 1≤i≤nai es el conjunto de acciones conjuntas, donde AI es el conjunto de acción para el agente i.Nd- \"POMDP\" supone la independencia de la transición, donde la función de transición se define como p (s, a, s) = pu (su, su) · 1≤i≤n pi (Si, Su, Ai, Si), donde A= a1 ,..., an es la acción conjunta realizada en el estado S = S1 ,..., Sn, Su y S = S1 ,..., Sn, Su es el estado resultante.",
                "El objetivo en ND- \"POMDP\" es calcular la política conjunta π = π1 ,..., πn que maximiza la recompensa esperada de los equipos sobre un horizonte finito t a partir del estado de creencia b.",
                "Un ND- \"POMDP\" es similar a un problema de optimización de restricciones distribuidas N-ARY (DCOP) [8, 12] donde la variable en cada nodo representa la política seleccionada por un agente individual, πi con el dominio de la variable siendo el conjunto del conjuntoDe todas las políticas locales, πi.",
                "La araña como se menciona en la Sección 3.1, un ND- \"POMDP\" puede tratarse como un DCOP, donde el objetivo es calcular una política conjunta que maximice la recompensa conjunta general.",
                "El subárbol de los agentes es un \"POMDP\" distribuido en sí mismo y la idea aquí es construir un MDP centralizado correspondiente al (sub-árbol) \"POMDP\" distribuido y obtener el valor esperado de la política óptima para este MDP centralizado."
            ],
            "translated_text": "",
            "candidates": [
                "pomdp",
                "POMDP",
                "POMDP",
                "POMDP",
                "POMDP",
                "pomdp",
                "POMDP",
                "pomdp",
                "POMDP",
                "pomdp",
                "POMDP",
                "pomdp",
                "POMDP",
                "pomdp",
                "POMDP",
                "POMDP"
            ],
            "error": []
        },
        "distribute pomdp": {
            "translated_key": "Distribuir POMDP",
            "is_in_text": false,
            "original_annotated_sentences": [
                "Letting loose a SPIDER on a network of POMDPs: Generating quality guaranteed policies Pradeep Varakantham, Janusz Marecki, Yuichi Yabu∗ , Milind Tambe, Makoto Yokoo∗ University of Southern California, Los Angeles, CA 90089, {varakant, marecki, tambe}@usc.edu ∗ Dept.",
                "of Intelligent Systems, Kyushu University, Fukuoka, 812-8581 Japan, yokoo@is.kyushu-u.ac.jp ABSTRACT Distributed Partially Observable Markov Decision Problems (Distributed POMDPs) are a popular approach for modeling multi-agent systems acting in uncertain domains.",
                "Given the significant complexity of solving distributed POMDPs, particularly as we scale up the numbers of agents, one popular approach has focused on approximate solutions.",
                "Though this approach is efficient, the algorithms within this approach do not provide any guarantees on solution quality.",
                "A second less popular approach focuses on global optimality, but typical results are available only for two agents, and also at considerable computational cost.",
                "This paper overcomes the limitations of both these approaches by providing SPIDER, a novel combination of three key features for policy generation in distributed POMDPs: (i) it exploits agent interaction structure given a network of agents (i.e. allowing easier scale-up to larger number of agents); (ii) it uses a combination of heuristics to speedup policy search; and (iii) it allows quality guaranteed approximations, allowing a systematic tradeoff of solution quality for time.",
                "Experimental results show orders of magnitude improvement in performance when compared with previous global optimal algorithms.",
                "Categories and Subject Descriptors I.2.11 [Artificial Intelligence]: Distributed Artificial IntelligenceMulti-agent Systems General Terms Algorithms, Theory 1.",
                "INTRODUCTION Distributed Partially Observable Markov Decision Problems (Distributed POMDPs) are emerging as a popular approach for modeling sequential decision making in teams operating under uncertainty [9, 4, 1, 2, 13].",
                "The uncertainty arises on account of nondeterminism in the outcomes of actions and because the world state may only be partially (or incorrectly) observable.",
                "Unfortunately, as shown by Bernstein et al. [3], the problem of finding the optimal joint policy for general distributed POMDPs is NEXP-Complete.",
                "Researchers have attempted two different types of approaches towards solving these models.",
                "The first category consists of highly efficient approximate techniques, that may not reach globally optimal solutions [2, 9, 11].",
                "The key problem with these techniques has been their inability to provide any guarantees on the quality of the solution.",
                "In contrast, the second less popular category of approaches has focused on a global optimal result [13, 5, 10].",
                "Though these approaches obtain optimal solutions, they typically consider only two agents.",
                "Furthermore, they fail to exploit structure in the interactions of the agents and hence are severely hampered with respect to scalability when considering more than two agents.",
                "To address these problems with the existing approaches, we propose approximate techniques that provide guarantees on the quality of the solution while focussing on a network of more than two agents.",
                "We first propose the basic SPIDER (Search for Policies In Distributed EnviRonments) algorithm.",
                "There are two key novel features in SPIDER: (i) it is a branch and bound heuristic search technique that uses a MDP-based heuristic function to search for an optimal joint policy; (ii) it exploits network structure of agents by organizing agents into a Depth First Search (DFS) pseudo tree and takes advantage of the independence in the different branches of the DFS tree.",
                "We then provide three enhancements to improve the efficiency of the basic SPIDER algorithm while providing guarantees on the quality of the solution.",
                "The first enhancement uses abstractions for speedup, but does not sacrifice solution quality.",
                "In particular, it initially performs branch and bound search on abstract policies and then extends to complete policies.",
                "The second enhancement obtains speedups by sacrificing solution quality, but within an input parameter that provides the tolerable expected value difference from the optimal solution.",
                "The third enhancement is again based on bounding the search for efficiency, however with a tolerance parameter that is provided as a percentage of optimal.",
                "We experimented with the sensor network domain presented in Nair et al. [10], a domain representative of an important class of problems with networks of agents working in uncertain environments.",
                "In our experiments, we illustrate that SPIDER dominates an existing global optimal approach called GOA [10], the only known global optimal algorithm with demonstrated experimental results for more than two agents.",
                "Furthermore, we demonstrate that abstraction improves the performance of SPIDER significantly (while providing optimal solutions).",
                "We finally demonstrate a key feature of SPIDER: by utilizing the approximation enhancements it enables principled tradeoffs in run-time versus solution quality. 822 978-81-904262-7-5 (RPS) c 2007 IFAAMAS 2.",
                "DOMAIN: DISTRIBUTED SENSOR NETS Distributed sensor networks are a large, important class of domains that motivate our work.",
                "This paper focuses on a set of target tracking problems that arise in certain types of sensor networks [6] first introduced in [10].",
                "Figure 1 shows a specific problem instance within this type consisting of three sensors.",
                "Here, each sensor node can scan in one of four directions: North, South, East or West (see Figure 1).",
                "To track a target and obtain associated reward, two sensors with overlapping scanning areas must coordinate by scanning the same area simultaneously.",
                "In Figure 1, to track a target in Loc11, sensor1 needs to scan East and sensor2 needs to scan West simultaneously.",
                "Thus, sensors have to act in a coordinated fashion.",
                "We assume that there are two independent targets and that each targets movement is uncertain and unaffected by the sensor agents.",
                "Based on the area it is scanning, each sensor receives observations that can have false positives and false negatives.",
                "The sensors observations and transitions are independent of each others actions e.g.the observations that sensor1 receives are independent of sensor2s actions.",
                "Each agent incurs a cost for scanning whether the target is present or not, but no cost if it turns off.",
                "Given the sensors observational uncertainty, the targets uncertain transitions and the distributed nature of the sensor nodes, these sensor nets provide a useful domains for applying distributed POMDP models.",
                "Figure 1: A 3-chain sensor configuration 3.",
                "BACKGROUND 3.1 Model: Network Distributed POMDP The ND-POMDP model was introduced in [10], motivated by domains such as the sensor networks introduced in Section 2.",
                "It is defined as the tuple S, A, P, Ω, O, R, b , where S = ×1≤i≤nSi × Su is the set of world states.",
                "Si refers to the set of local states of agent i and Su is the set of unaffectable states.",
                "Unaffectable state refers to that part of the world state that cannot be affected by the agents actions, e.g. environmental factors like target locations that no agent can control.",
                "A = ×1≤i≤nAi is the set of joint actions, where Ai is the set of action for agent i. ND-POMDP assumes transition independence, where the transition function is defined as P(s, a, s ) = Pu(su, su) · 1≤i≤n Pi(si, su, ai, si), where a = a1, . . . , an is the joint action performed in state s = s1, . . . , sn, su and s = s1, . . . , sn, su is the resulting state.",
                "Ω = ×1≤i≤nΩi is the set of joint observations where Ωi is the set of observations for agents i. Observational independence is assumed in ND-POMDPs i.e., the joint observation function is defined as O(s, a, ω) = 1≤i≤n Oi(si, su, ai, ωi), where s = s1, . . . , sn, su is the world state that results from the agents performing a = a1, . . . , an in the previous state, and ω = ω1, . . . , ωn ∈ Ω is the observation received in state s. This implies that each agents observation depends only on the unaffectable state, its local action and on its resulting local state.",
                "The reward function, R, is defined as R(s, a) = l Rl(sl1, . . . , slr, su, al1, . . . , alr ), where each l could refer to any sub-group of agents and r = |l|.",
                "Based on the reward function, an interaction hypergraph is constructed.",
                "A hyper-link, l, exists between a subset of agents for all Rl that comprise R. The interaction hypergraph is defined as G = (Ag, E), where the agents, Ag, are the vertices and E = {l|l ⊆ Ag ∧ Rl is a component of R} are the edges.",
                "The initial belief state (distribution over the initial state), b, is defined as b(s) = bu(su) · 1≤i≤n bi(si), where bu and bi refer to the distribution over initial unaffectable state and agent is initial belief state, respectively.",
                "The goal in ND-POMDP is to compute the joint policy π = π1, . . . , πn that maximizes teams expected reward over a finite horizon T starting from the belief state b.",
                "An ND-POMDP is similar to an n-ary Distributed Constraint Optimization Problem (DCOP)[8, 12] where the variable at each node represents the policy selected by an individual agent, πi with the domain of the variable being the set of all local policies, Πi.",
                "The reward component Rl where |l| = 1 can be thought of as a local constraint while the reward component Rl where l > 1 corresponds to a non-local constraint in the constraint graph. 3.2 Algorithm: Global Optimal Algorithm (GOA) In previous work, GOA has been defined as a global optimal algorithm for ND-POMDPs [10].",
                "We will use GOA in our experimental comparisons, since GOA is a state-of-the-art global optimal algorithm, and in fact the only one with experimental results available for networks of more than two agents.",
                "GOA borrows from a global optimal DCOP algorithm called DPOP[12].",
                "GOAs message passing follows that of DPOP.",
                "The first phase is the UTIL propagation, where the utility messages, in this case values of policies, are passed up from the leaves to the root.",
                "Value for a policy at an agent is defined as the sum of best response values from its children and the joint policy reward associated with the parent policy.",
                "Thus, given a policy for a parent node, GOA requires an agent to iterate through all its policies, finding the best response policy and returning the value to the parent - while at the parent node, to find the best policy, an agent requires its children to return their best responses to each of its policies.",
                "This UTIL propagation process is repeated at each level in the tree, until the root exhausts all its policies.",
                "In the second phase of VALUE propagation, where the optimal policies are passed down from the root till the leaves.",
                "GOA takes advantage of the local interactions in the interaction graph, by pruning out unnecessary joint policy evaluations (associated with nodes not connected directly in the tree).",
                "Since the interaction graph captures all the reward interactions among agents and as this algorithm iterates through all the relevant joint policy evaluations, this algorithm yields a globally optimal solution. 4.",
                "SPIDER As mentioned in Section 3.1, an ND-POMDP can be treated as a DCOP, where the goal is to compute a joint policy that maximizes the overall joint reward.",
                "The brute-force technique for computing an optimal policy would be to examine the expected values for all possible joint policies.",
                "The key idea in SPIDER is to avoid computation of expected values for the entire space of joint policies, by utilizing upper bounds on the expected values of policies and the interaction structure of the agents.",
                "Akin to some of the algorithms for DCOP [8, 12], SPIDER has a pre-processing step that constructs a DFS tree corresponding to the given interaction structure.",
                "Note that these DFS trees are pseudo trees [12] that allow links between ancestors and children.",
                "We employ the Maximum Constrained Node (MCN) heuristic used in the DCOP algorithm, ADOPT [8], however other heuristics (such as MLSP heuristic from [7]) can also be employed.",
                "MCN heuristic tries to place agents with more number of constraints at the top of the tree.",
                "This tree governs how the search for the optimal joint polThe Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 823 icy proceeds in SPIDER.",
                "The algorithms presented in this paper are easily extendable to hyper-trees, however for expository purposes, we assume binary trees.",
                "SPIDER is an algorithm for centralized planning and distributed execution in distributed POMDPs.",
                "In this paper, we employ the following notation to denote policies and expected values: Ancestors(i) ⇒ agents from i to the root (not including i).",
                "Tree(i) ⇒ agents in the sub-tree (not including i) for which i is the root. πroot+ ⇒ joint policy of all agents. πi+ ⇒ joint policy of all agents in Tree(i) ∪ i. πi− ⇒ joint policy of agents that are in Ancestors(i). πi ⇒ policy of the ith agent. ˆv[πi, πi− ] ⇒ upper bound on the expected value for πi+ given πi and policies of ancestor agents i.e. πi− . ˆvj[πi, πi− ] ⇒ upper bound on the expected value for πi+ from the jth child. v[πi, πi− ] ⇒ expected value for πi given policies of ancestor agents, πi− . v[πi+ , πi− ] ⇒ expected value for πi+ given policies of ancestor agents, πi− . vj[πi+ , πi− ] ⇒ expected value for πi+ from the jth child.",
                "Figure 2: Execution of SPIDER, an example 4.1 Outline of SPIDER SPIDER is based on the idea of branch and bound search, where the nodes in the search tree represent partial/complete joint policies.",
                "Figure 2 shows an example search tree for the SPIDER algorithm, using an example of the three agent chain.",
                "Before SPIDER begins its search we create a DFS tree (i.e. pseudo tree) from the three agent chain, with the middle agent as the root of this tree.",
                "SPIDER exploits the structure of this DFS tree while engaging in its search.",
                "Note that in our example figure, each agent is assigned a policy with T=2.",
                "Thus, each rounded rectange (search tree node) indicates a partial/complete joint policy, a rectangle indicates an agent and the ovals internal to an agent show its policy.",
                "Heuristic or actual expected value for a joint policy is indicated in the top right corner of the rounded rectangle.",
                "If the number is italicized and underlined, it implies that the actual expected value of the joint policy is provided.",
                "SPIDER begins with no policy assigned to any of the agents (shown in the level 1 of the search tree).",
                "Level 2 of the search tree indicates that the joint policies are sorted based on upper bounds computed for root agents policies.",
                "Level 3 shows one SPIDER search node with a complete joint policy (a policy assigned to each of the agents).",
                "The expected value for this joint policy is used to prune out the nodes in level 2 (the ones with upper bounds < 234) When creating policies for each non-leaf agent i, SPIDER potentially performs two steps: 1.",
                "Obtaining upper bounds and sorting: In this step, agent i computes upper bounds on the expected values, ˆv[πi, πi− ] of the joint policies πi+ corresponding to each of its policy πi and fixed ancestor policies.",
                "An MDP based heuristic is used to compute these upper bounds on the expected values.",
                "Detailed description about this MDP heuristic is provided in Section 4.2.",
                "All policies of agent i, Πi are then sorted based on these upper bounds (also referred to as heuristic values henceforth) in descending order.",
                "Exploration of these policies (in step 2 below) are performed in this descending order.",
                "As indicated in the level 2 of the search tree (of Figure 2), all the joint policies are sorted based on the heuristic values, indicated in the top right corner of each joint policy.",
                "The intuition behind sorting and then exploring policies in descending order of upper bounds, is that the policies with higher upper bounds could yield joint policies with higher expected values. 2.",
                "Exploration and Pruning: Exploration implies computing the best response joint policy πi+,∗ corresponding to fixed ancestor policies of agent i, πi− .",
                "This is performed by iterating through all policies of agent i i.e.",
                "Πi and summing two quantities for each policy: (i) the best response for all of is children (obtained by performing steps 1 and 2 at each of the child nodes); (ii) the expected value obtained by i for fixed policies of ancestors.",
                "Thus, exploration of a policy πi yields actual expected value of a joint policy, πi+ represented as v[πi+ , πi− ].",
                "The policy with the highest expected value is the best response policy.",
                "Pruning refers to avoiding exploring all policies (or computing expected values) at agent i by using the current best expected value, vmax [πi+ , πi− ].",
                "Henceforth, this vmax [πi+ , πi− ] will be referred to as threshold.",
                "A policy, πi need not be explored if the upper bound for that policy, ˆv[πi, πi− ] is less than the threshold.",
                "This is because the expected value for the best joint policy attainable for that policy will be less than the threshold.",
                "On the other hand, when considering a leaf agent, SPIDER computes the best response policy (and consequently its expected value) corresponding to fixed policies of its ancestors, πi− .",
                "This is accomplished by computing expected values for each of the policies (corresponding to fixed policies of ancestors) and selecting the highest expected value policy.",
                "In Figure 2, SPIDER assigns best response policies to leaf agents at level 3.",
                "The policy for the left leaf agent is to perform action East at each time step in the policy, while the policy for the right leaf agent is to perform Off at each time step.",
                "These best response policies from the leaf agents yield an actual expected value of 234 for the complete joint policy.",
                "Algorithm 1 provides the pseudo code for SPIDER.",
                "This algorithm outputs the best joint policy, πi+,∗ (with an expected value greater than threshold) for the agents in Tree(i).",
                "Lines 3-8 compute the best response policy of a leaf agent i, while lines 9-23 computes the best response joint policy for agents in Tree(i).",
                "This best response computation for a non-leaf agent i includes: (a) Sorting of policies (in descending order) based on heuristic values on line 11; (b) Computing best response policies at each of the children for fixed policies of agent i in lines 16-20; and (c) Maintaining 824 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Algorithm 1 SPIDER(i, πi− , threshold) 1: πi+,∗ ← null 2: Πi ← GET-ALL-POLICIES (horizon, Ai, Ωi) 3: if IS-LEAF(i) then 4: for all πi ∈ Πi do 5: v[πi, πi−] ← JOINT-REWARD (πi, πi−) 6: if v[πi, πi−] > threshold then 7: πi+,∗ ← πi 8: threshold ← v[πi, πi−] 9: else 10: children ← CHILDREN (i) 11: ˆΠi ← UPPER-BOUND-SORT(i, Πi, πi−) 12: for all πi ∈ ˆΠi do 13: ˜πi+ ← πi 14: if ˆv[πi, πi−] < threshold then 15: Go to line 12 16: for all j ∈ children do 17: jThres ← threshold − v[πi, πi−]− Σk∈children,k=j ˆvk[πi, πi−] 18: πj+,∗ ← SPIDER(j, πi πi−, jThres) 19: ˜πi+ ← ˜πi+ πj+,∗ 20: ˆvj[πi, πi−] ← v[πj+,∗, πi πi−] 21: if v[˜πi+, πi−] > threshold then 22: threshold ← v[˜πi+, πi−] 23: πi+,∗ ← ˜πi+ 24: return πi+,∗ Algorithm 2 UPPER-BOUND-SORT(i, Πi, πi− ) 1: children ← CHILDREN (i) 2: ˆΠi ← null /* Stores the sorted list */ 3: for all πi ∈ Πi do 4: ˆv[πi, πi−] ← JOINT-REWARD (πi, πi−) 5: for all j ∈ children do 6: ˆvj[πi, πi−] ← UPPER-BOUND(i, j, πi πi−) 7: ˆv[πi, πi−] + ← ˆvj[πi, πi−] 8: ˆΠi ← INSERT-INTO-SORTED (πi, ˆΠi) 9: return ˆΠi best expected value, joint policy in lines 21-23.",
                "Algorithm 2 provides the pseudo code for sorting policies based on the upper bounds on the expected values of joint policies.",
                "Expected value for an agent i consists of two parts: value obtained from ancestors and value obtained from its children.",
                "Line 4 computes the expected value obtained from ancestors of the agent (using JOINT-REWARD function), while lines 5-7 compute the heuristic value from the children.",
                "The sum of these two parts yields an upper bound on the expected value for agent i, and line 8 of the algorithm sorts the policies based on these upper bounds. 4.2 MDP based heuristic function The heuristic function quickly provides an upper bound on the expected value obtainable from the agents in Tree(i).",
                "The subtree of agents is a distributed POMDP in itself and the idea here is to construct a centralized MDP corresponding to the (sub-tree) distributed POMDP and obtain the expected value of the optimal policy for this centralized MDP.",
                "To reiterate this in terms of the agents in DFS tree interaction structure, we assume full observability for the agents in Tree(i) and for fixed policies of the agents in {Ancestors(i) ∪ i}, we compute the joint value ˆv[πi+ , πi− ] .",
                "We use the following notation for presenting the equations for computing upper bounds/heuristic values (for agents i and k): Let Ei− denote the set of links between agents in {Ancestors(i)∪ i} and Tree(i), Ei+ denote the set of links between agents in Tree(i).",
                "Also, if l ∈ Ei− , then l1 is the agent in {Ancestors(i)∪ i} and l2 is the agent in Tree(i), that l connects together.",
                "We first compact the standard notation: ot k =Ok(st+1 k , st+1 u , πk(ωt k), ωt+1 k ) (1) pt k =Pk(st k, st u, πk(ωt k), st+1 k ) · ot k pt u =P(st u, st+1 u ) st l = st l1 , st l2 , st u ; ωt l = ωt l1 , ωt l2 rt l =Rl(st l , πl1 (ωt l1 ), πl2 (ωt l2 )) vt l =V t πl (st l , st u, ωt l1 , ωt l2 ) Depending on the location of agent k in the agent tree we have the following cases: IF k ∈ {Ancestors(i) ∪ i}, ˆpt k = pt k, (2) IF k ∈ Tree(i), ˆpt k = Pk(st k, st u, πk(ωt k), st+1 k ) IF l ∈ Ei− , ˆrt l = max {al2 } Rl(st l , πl1 (ωt l1 ), al2 ) IF l ∈ Ei+ , ˆrt l = max {al1 ,al2 } Rl(st l , al1 , al2 ) The value function for an agent i executing the joint policy πi+ at time η − 1 is provided by the equation: V η−1 πi+ (sη−1 , ωη−1 ) = l∈Ei− vη−1 l + l∈Ei+ vη−1 l (3) where vη−1 l = rη−1 l + ω η l ,sη pη−1 l1 pη−1 l2 pη−1 u vη l Algorithm 3 UPPER-BOUND (i, j, πj− ) 1: val ← 0 2: for all l ∈ Ej− ∪ Ej+ do 3: if l ∈ Ej− then πl1 ← φ 4: for all s0 l do 5: val + ← startBel[s0 l ]· UPPER-BOUND-TIME (i, s0 l , j, πl1 , ) 6: return val Algorithm 4 UPPER-BOUND-TIME (i, st l , j, πl1 , ωt l1 ) 1: maxV al ← −∞ 2: for all al1 , al2 do 3: if l ∈ Ei− and l ∈ Ej− then al1 ← πl1 (ωt l1 ) 4: val ← GET-REWARD(st l , al1 , al2 ) 5: if t < πi.horizon − 1 then 6: for all st+1 l , ωt+1 l1 do 7: futV al←pt u ˆpt l1 ˆpt l2 8: futV al ∗ ← UPPER-BOUND-TIME(st+1 l , j, πl1 , ωt l1 ωt+1 l1 ) 9: val + ← futV al 10: if val > maxV al then maxV al ← val 11: return maxV al Upper bound on the expected value for a link is computed by modifying the equation 3 to reflect the full observability assumption.",
                "This involves removing the observational probability term for agents in Tree(i) and maximizing the future value ˆvη l over the actions of those agents (in Tree(i)).",
                "Thus, the equation for the The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 825 computation of the upper bound on a link l, is as follows: IF l ∈ Ei− , ˆvη−1 l =ˆrη−1 l + max al2 ω η l1 ,s η l ˆpη−1 l1 ˆpη−1 l2 pη−1 u ˆvη l IF l ∈ Ei+ , ˆvη−1 l =ˆrη−1 l + max al1 ,al2 s η l ˆpη−1 l1 ˆpη−1 l2 pη−1 u ˆvη l Algorithm 3 and Algorithm 4 provide the algorithm for computing upper bound for child j of agent i, using the equations descirbed above.",
                "While Algorithm 4 computes the upper bound on a link given the starting state, Algorithm 3 sums the upper bound values computed over each of the links in Ei− ∪ Ei+ . 4.3 Abstraction Algorithm 5 SPIDER-ABS(i, πi− , threshold) 1: πi+,∗ ← null 2: Πi ← GET-POLICIES (<>, 1) 3: if IS-LEAF(i) then 4: for all πi ∈ Πi do 5: absHeuristic ← GET-ABS-HEURISTIC (πi, πi−) 6: absHeuristic ∗ ← (timeHorizon − πi.horizon) 7: if πi.horizon = timeHorizon and πi.absNodes = 0 then 8: v[πi, πi−] ← JOINT-REWARD (πi, πi−) 9: if v[πi, πi−] > threshold then 10: πi+,∗ ← πi; threshold ← v[πi, πi−] 11: else if v[πi, πi−] + absHeuristic > threshold then 12: ˆΠi ← EXTEND-POLICY (πi, πi.absNodes + 1) 13: Πi + ← INSERT-SORTED-POLICIES ( ˆΠi) 14: REMOVE(πi) 15: else 16: children ← CHILDREN (i) 17: Πi ← UPPER-BOUND-SORT(i, Πi, πi−) 18: for all πi ∈ Πi do 19: ˜πi+ ← πi 20: absHeuristic ← GET-ABS-HEURISTIC (πi, πi−) 21: absHeuristic ∗ ← (timeHorizon − πi.horizon) 22: if πi.horizon = timeHorizon and πi.absNodes = 0 then 23: if ˆv[πi, πi−] < threshold and πi.absNodes = 0 then 24: Go to line 19 25: for all j ∈ children do 26: jThres ← threshold − v[πi, πi−]− Σk∈children,k=j ˆvk[πi, πi−] 27: πj+,∗ ← SPIDER(j, πi πi−, jThres) 28: ˜πi+ ← ˜πi+ πj+,∗; ˆvj[πi, πi−] ← v[πj+,∗, πi πi−] 29: if v[˜πi+, πi−] > threshold then 30: threshold ← v[˜πi+, πi−]; πi+,∗ ← ˜πi+ 31: else if ˆv[πi+, πi−] + absHeuristic > threshold then 32: ˆΠi ← EXTEND-POLICY (πi, πi.absNodes + 1) 33: Πi + ← INSERT-SORTED-POLICIES (ˆΠi) 34: REMOVE(πi) 35: return πi+,∗ In SPIDER, the exploration/pruning phase can only begin after the heuristic (or upper bound) computation and sorting for the policies has ended.",
                "We provide an approach to possibly circumvent the exploration of a group of policies based on heuristic computation for one abstract policy, thus leading to an improvement in runtime performance (without loss in solution quality).",
                "The important steps in this technique are defining the abstract policy and how heuristic values are computated for the abstract policies.",
                "In this paper, we propose two types of abstraction: 1.",
                "Horizon Based Abstraction (HBA): Here, the abstract policy is defined as a shorter horizon policy.",
                "It represents a group of longer horizon policies that have the same actions as the abstract policy for times less than or equal to the horizon of the abstract policy.",
                "In Figure 3(a), a T=1 abstract policy that performs East action, represents a group of T=2 policies, that perform East in the first time step.",
                "For HBA, there are two parts to heuristic computation: (a) Computing the upper bound for the horizon of the abstract policy.",
                "This is same as the heuristic computation defined by the GETHEURISTIC() algorithm for SPIDER, however with a shorter time horizon (horizon of the abstract policy). (b) Computing the maximum possible reward that can be accumulated in one time step (using GET-ABS-HEURISTIC()) and multiplying it by the number of time steps to time horizon.",
                "This maximum possible reward (for one time step) is obtained by iterating through all the actions of all the agents in Tree(i) and computing the maximum joint reward for any joint action.",
                "Sum of (a) and (b) is the heuristic value for a HBA abstract policy. 2.",
                "Node Based Abstraction (NBA): Here an abstract policy is obtained by not associating actions to certain nodes of the policy tree.",
                "Unlike in HBA, this implies multiple levels of abstraction.",
                "This is illustrated in Figure 3(b), where there are T=2 policies that do not have an action for observation TP.",
                "These incomplete T=2 policies are abstractions for T=2 complete policies.",
                "Increased levels of abstraction leads to faster computation of a complete joint policy, πroot+ and also to shorter heuristic computation and exploration, pruning phases.",
                "For NBA, the heuristic computation is similar to that of a normal policy, except in cases where there is no action associated with policy nodes.",
                "In such cases, the immediate reward is taken as Rmax (maximum reward for any action).",
                "We combine both the abstraction techniques mentioned above into one technique, SPIDER-ABS.",
                "Algorithm 5 provides the algorithm for this abstraction technique.",
                "For computing optimal joint policy with SPIDER-ABS, a non-leaf agent i initially examines all abstract T=1 policies (line 2) and sorts them based on abstract policy heuristic computations (line 17).",
                "The abstraction horizon is gradually increased and these abstract policies are then explored in descending order of heuristic values and ones that have heuristic values less than the threshold are pruned (lines 23-24).",
                "Exploration in SPIDER-ABS has the same definition as in SPIDER if the policy being explored has a horizon of policy computation which is equal to the actual time horizon and if all the nodes of the policy have an action associated with them (lines 25-30).",
                "However, if those conditions are not met, then it is substituted by a group of policies that it represents (using EXTEND-POLICY () function) (lines 31-32).",
                "EXTEND-POLICY() function is also responsible for initializing the horizon and absNodes of a policy. absNodes represents the number of nodes at the last level in the policy tree, that do not have an action assigned to them.",
                "If πi.absNodes = |Ωi|πi.horizon−1 (i.e. total number of policy nodes possible at πi.horizon) , then πi.absNodes is set to zero and πi.horizon is increased by 1.",
                "Otherwise, πi.absNodes is increased by 1.",
                "Thus, this function combines both HBA and NBA by using the policy variables, horizon and absNodes.",
                "Before substituting the abstract policy with a group of policies, those policies are sorted based on heuristic values (line 33).",
                "Similar type of abstraction based best response computation is adopted at leaf agents (lines 3-14). 4.4 Value ApproXimation (VAX) In this section, we present an approximate enhancement to SPIDER called VAX.",
                "The input to this technique is an approximation parameter , which determines the difference from the optimal solution quality.",
                "This approximation parameter is used at each agent for pruning out joint policies.",
                "The pruning mechanism in SPIDER and SPIDER-Abs dictates that a joint policy be pruned only if the threshold is exactly greater than the heuristic value.",
                "However, the 826 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Figure 3: Example of abstraction for (a) HBA (Horizon Based Abstraction) and (b) NBA (Node Based Abstraction) idea in this technique is to prune out joint a policy if the following condition is satisfied: threshold + > ˆv[πi , πi− ].",
                "Apart from the pruning condition, VAX is the same as SPIDER/SPIDER-ABS.",
                "In the example of Figure 2, if the heuristic value for the second joint policy (or second search tree node) in level 2 were 238 instead of 232, then that policy could not be be pruned using SPIDER or SPIDER-Abs.",
                "However, in VAX with an approximation parameter of 5, the joint policy in consideration would also be pruned.",
                "This is because the threshold (234) at that juncture plus the approximation parameter (5), i.e. 239 would have been greater than the heuristic value for that joint policy (238).",
                "It can be noted from the example (just discussed) that this kind of pruning can lead to fewer explorations and hence lead to an improvement in the overall run-time performance.",
                "However, this can entail a sacrifice in the quality of the solution because this technique can prune out a candidate optimal solution.",
                "A bound on the error introduced by this approximate algorithm as a function of , is provided by Proposition 3. 4.5 Percentage ApproXimation (PAX) In this section, we present the second approximation enhancement over SPIDER called PAX.",
                "Input to this technique is a parameter, δ that represents the minimum percentage of the optimal solution quality that is desired.",
                "Output of this technique is a policy with an expected value that is at least δ% of the optimal solution quality.",
                "A policy is pruned if the following condition is satisfied: threshold > δ 100 ˆv[πi , πi− ].",
                "Like in VAX, the only difference between PAX and SPIDER/SPIDER-ABS is this pruning condition.",
                "Again in Figure 2, if the heuristic value for the second search tree node in level 2 were 238 instead of 232, then PAX with an input parameter of 98% would be able to prune that search tree node (since 98 100 ∗238 < 234).",
                "This type of pruning leads to fewer explorations and hence an improvement in run-time performance, while potentially leading to a loss in quality of the solution.",
                "Proposition 4 provides the bound on quality loss. 4.6 Theoretical Results PROPOSITION 1.",
                "Heuristic provided using the centralized MDP heuristic is admissible.",
                "Proof.",
                "For the value provided by the heuristic to be admissible, it should be an over estimate of the expected value for a joint policy.",
                "Thus, we need to show that: For l ∈ Ei+ ∪ Ei− : ˆvt l ≥ vt l (refer to notation in Section 4.2) We use mathematical induction on t to prove this.",
                "Base case: t = T − 1.",
                "Irrespective of whether l ∈ Ei− or l ∈ Ei+ , ˆrt l is computed by maximizing over all actions of the agents in Tree(i), while rt l is computed for fixed policies of the same agents.",
                "Hence, ˆrt l ≥ rt l and also ˆvt l ≥ vt l .",
                "Assumption: Proposition holds for t = η, where 1 ≤ η < T − 1.",
                "We now have to prove that the proposition holds for t = η − 1.",
                "We show the proof for l ∈ Ei− and similar reasoning can be adopted to prove for l ∈ Ei+ .",
                "The heuristic value function for l ∈ Ei− is provided by the following equation: ˆvη−1 l =ˆrη−1 l + max al2 ω η l1 ,s η l ˆpη−1 l1 ˆpη−1 l2 pη−1 u ˆvη l Rewriting the RHS and using Eqn 2 (in Section 4.2) =ˆrη−1 l + max al2 ω η l1 ,s η l pη−1 u pη−1 l1 ˆpη−1 l2 ˆvη l =ˆrη−1 l + ω η l1 ,s η l pη−1 u pη−1 l1 max al2 ˆpη−1 l2 ˆvη l Since maxal2 ˆpη−1 l2 ˆvη l ≥ ωl2 oη−1 l2 ˆpη−1 l2 ˆvη l and pη−1 l2 = oη−1 l2 ˆpη−1 l2 ≥ˆrη−1 l + ω η l1 ,s η l pη−1 u pη−1 l1 ωl2 pη−1 l2 ˆvη l Since ˆvη l ≥ vη l (from the assumption) ≥ˆrη−1 l + ω η l1 ,s η l pη−1 u pη−1 l1 ωl2 pη−1 l2 vη l Since ˆrη−1 l ≥ rη−1 l (by definition) ≥rη−1 l + ω η l1 ,s η l pη−1 u pη−1 l1 ωl2 pη−1 l2 vη l =rη−1 l + (ω η l ,s η l ) pη−1 u pη−1 l1 pη−1 l2 vη l = vη−1 l Thus proved.",
                "PROPOSITION 2.",
                "SPIDER provides an optimal solution.",
                "Proof.",
                "SPIDER examines all possible joint policies given the interaction structure of the agents.",
                "The only exception being when a joint policy is pruned based on the heuristic value.",
                "Thus, as long as a candidate optimal policy is not pruned, SPIDER will return an optimal policy.",
                "As proved in Proposition 1, the expected value for a joint policy is always an upper bound.",
                "Hence when a joint policy is pruned, it cannot be an optimal solution.",
                "PROPOSITION 3.",
                "Error bound on the solution quality for VAX (implemented over SPIDER-ABS) with an approximation parameter of is ρ , where ρ is the number of leaf nodes in the DFS tree.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 827 Proof.",
                "We prove this proposition using mathematical induction on the depth of the DFS tree.",
                "Base case: depth = 1 (i.e. one node).",
                "Best response is computed by iterating through all policies, Πk.",
                "A policy,πk is pruned if ˆv[πk, πk− ] < threshold + .",
                "Thus the best response policy computed by VAX would be at most away from the optimal best response.",
                "Hence the proposition holds for the base case.",
                "Assumption: Proposition holds for d, where 1 ≤ depth ≤ d. We now have to prove that the proposition holds for d + 1.",
                "Without loss of generality, lets assume that the root node of this tree has k children.",
                "Each of this children is of depth ≤ d, and hence from the assumption, the error introduced in kth child is ρk , where ρk is the number of leaf nodes in kth child of the root.",
                "Therefore, ρ = k ρk, where ρ is the number of leaf nodes in the tree.",
                "In SPIDER-ABS, threshold at the root agent, thresspider = k v[πk+ , πk− ].",
                "However, with VAX the threshold at the root agent will be (in the worst case), threshvax = k v[πk+ , πk− ]− k ρk .",
                "Hence, with VAX a joint policy is pruned at the root agent if ˆv[πroot, πroot− ] < threshvax + ⇒ ˆv[πroot, πroot− ] < threshspider − (( k ρk) − 1) ≤ threshspider − ( k ρk) ≤ threshspider − ρ .",
                "Hence proved.",
                "PROPOSITION 4.",
                "For PAX (implemented over SPIDER-ABS) with an input parameter of δ, the solution quality is at least δ 100 v[πroot+,∗ ], where v[πroot+,∗ ] denotes the optimal solution quality.",
                "Proof.",
                "We prove this proposition using mathematical induction on the depth of the DFS tree.",
                "Base case: depth = 1 (i.e. one node).",
                "Best response is computed by iterating through all policies, Πk.",
                "A policy,πk is pruned if δ 100 ˆv[πk, πk− ] < threshold.",
                "Thus the best response policy computed by PAX would be at least δ 100 times the optimal best response.",
                "Hence the proposition holds for the base case.",
                "Assumption: Proposition holds for d, where 1 ≤ depth ≤ d. We now have to prove that the proposition holds for d + 1.",
                "Without loss of generality, lets assume that the root node of this tree has k children.",
                "Each of this children is of depth ≤ d, and hence from the assumption, the solution quality in the kth child is at least δ 100 v[πk+,∗ , πk− ] for PAX.",
                "With SPIDER-ABS, a joint policy is pruned at the root agent if ˆv[πroot, πroot− ] < k v[πk+,∗ , πk− ].",
                "However with PAX, a joint policy is pruned if δ 100 ˆv[πroot, πroot− ] < k δ 100 v[πk+,∗ , πk− ] ⇒ ˆv[πroot, πroot− ] < k v[πk+,∗ , πk− ].",
                "Since the pruning condition at the root agent in PAX is the same as the one in SPIDER-ABS, there is no error introduced at the root agent and all the error is introduced in the children.",
                "Thus, overall solution quality is at least δ 100 of the optimal solution.",
                "Hence proved. 5.",
                "EXPERIMENTAL RESULTS All our experiments were conducted on the sensor network domain from Section 2.",
                "The five network configurations employed are shown in Figure 4.",
                "Algorithms that we experimented with are GOA, SPIDER, SPIDER-ABS, PAX and VAX.",
                "We compare against GOA because it is the only global optimal algorithm that considers more than two agents.",
                "We performed two sets of experiments: (i) firstly, we compared the run-time performance of the above algorithms and (ii) secondly, we experimented with PAX and VAX to study the tradeoff between run-time and solution quality.",
                "Experiments were terminated after 10000 seconds1 .",
                "Figure 5(a) provides run-time comparisons between the optimal algorithms GOA, SPIDER, SPIDER-Abs and the approximate algorithms, PAX ( of 30) and VAX(δ of 80).",
                "X-axis denotes the 1 Machine specs for all experiments: Intel Xeon 3.6 GHZ processor, 2GB RAM sensor network configuration used, while Y-axis indicates the runtime (on a log-scale).",
                "The time horizon of policy computation was 3.",
                "For each configuration (3-chain, 4-chain, 4-star and 5-star), there are five bars indicating the time taken by GOA, SPIDER, SPIDERAbs, PAX and VAX.",
                "GOA did not terminate within the time limit for 4-star and 5-star configurations.",
                "SPIDER-Abs dominated the SPIDER and GOA for all the configurations.",
                "For instance, in the 3chain configuration, SPIDER-ABS provides 230-fold speedup over GOA and 2-fold speedup over SPIDER and for the 4-chain configuration it provides 58-fold speedup over GOA and 2-fold speedup over SPIDER.",
                "The two approximation approaches, VAX and PAX provided further improvement in performance over SPIDER-Abs.",
                "For instance, in the 5-star configuration VAX provides a 15-fold speedup and PAX provides a 8-fold speedup over SPIDER-Abs.",
                "Figures 5(b) provides a comparison of the solution quality obtained using the different algorithms for the problems tested in Figure 5(a).",
                "X-axis denotes the sensor network configuration while Y-axis indicates the solution quality.",
                "Since GOA, SPIDER, and SPIDER-Abs are all global optimal algorithms, the solution quality is the same for all those algorithms.",
                "For 5-P configuration, the global optimal algorithms did not terminate within the limit of 10000 seconds, so the bar for optimal quality indicates an upper bound on the optimal solution quality.",
                "With both the approximations, we obtained a solution quality that was close to the optimal solution quality.",
                "In 3-chain and 4-star configurations, it is remarkable that both PAX and VAX obtained almost the same actual quality as the global optimal algorithms, despite the approximation parameter and δ.",
                "For other configurations as well, the loss in quality was less than 20% of the optimal solution quality.",
                "Figure 5(c) provides the time to solution with PAX (for varying epsilons).",
                "X-axis denotes the approximation parameter, δ (percentage to optimal) used, while Y-axis denotes the time taken to compute the solution (on a log-scale).",
                "The time horizon for all the configurations was 4.",
                "As δ was decreased from 70 to 30, the time to solution decreased drastically.",
                "For instance, in the 3-chain case there was a total speedup of 170-fold when the δ was changed from 70 to 30.",
                "Interestingly, even with a low δ of 30%, the actual solution quality remained equal to the one obtained at 70%.",
                "Figure 5(d) provides the time to solution for all the configurations with VAX (for varying epsilons).",
                "X-axis denotes the approximation parameter, used, while Y-axis denotes the time taken to compute the solution (on a log-scale).",
                "The time horizon for all the configurations was 4.",
                "As was increased, the time to solution decreased drastically.",
                "For instance, in the 4-star case there was a total speedup of 73-fold when the was changed from 60 to 140.",
                "Again, the actual solution quality did not change with varying epsilon.",
                "Figure 4: Sensor network configurations 828 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Figure 5: Comparison of GOA, SPIDER, SPIDER-Abs and VAX for T = 3 on (a) Runtime and (b) Solution quality; (c) Time to solution for PAX with varying percentage to optimal for T=4 (d) Time to solution for VAX with varying epsilon for T=4 6.",
                "SUMMARY AND RELATED WORK This paper presents four algorithms SPIDER, SPIDER-ABS, PAX and VAX that provide a novel combination of features for policy search in distributed POMDPs: (i) exploiting agent interaction structure given a network of agents (i.e. easier scale-up to larger number of agents); (ii) using branch and bound search with an MDP based heuristic function; (iii) utilizing abstraction to improve runtime performance without sacrificing solution quality; (iv) providing a priori percentage bounds on quality of solutions using PAX; and (v) providing expected value bounds on the quality of solutions using VAX.",
                "These features allow for systematic tradeoff of solution quality for run-time in networks of agents operating under uncertainty.",
                "Experimental results show orders of magnitude improvement in performance over previous global optimal algorithms.",
                "Researchers have typically employed two types of techniques for solving distributed POMDPs.",
                "The first set of techniques compute global optimal solutions.",
                "Hansen et al. [5] present an algorithm based on dynamic programming and iterated elimination of dominant policies, that provides optimal solutions for distributed POMDPs.",
                "Szer et al. [13] provide an optimal heuristic search method for solving Decentralized POMDPs.",
                "This algorithm is based on the combination of a classical heuristic search algorithm, A∗ and decentralized control theory.",
                "The key differences between SPIDER and MAA* are: (a) Enhancements to SPIDER (VAX and PAX) provide for quality guaranteed approximations, while MAA* is a global optimal algorithm and hence involves significant computational complexity; (b) Due to MAA*s inability to exploit interaction structure, it was illustrated only with two agents.",
                "However, SPIDER has been illustrated for networks of agents; and (c) SPIDER explores the joint policy one agent at a time, while MAA* expands it one time step at a time (simultaneously for all the agents).",
                "The second set of techniques seek approximate policies.",
                "EmeryMontemerlo et al. [4] approximate POSGs as a series of one-step Bayesian games using heuristics to approximate future value, trading off limited lookahead for computational efficiency, resulting in locally optimal policies (with respect to the selected heuristic).",
                "Nair et al. [9]s JESP algorithm uses dynamic programming to reach a local optimum solution for finite horizon decentralized POMDPs.",
                "Peshkin et al. [11] and Bernstein et al. [2] are examples of policy search techniques that search for locally optimal policies.",
                "Though all the above techniques improve the efficiency of policy computation considerably, they are unable to provide error bounds on the quality of the solution.",
                "This aspect of quality bounds differentiates SPIDER from all the above techniques.",
                "Acknowledgements.",
                "This material is based upon work supported by the Defense Advanced Research Projects Agency (DARPA), through the Department of the Interior, NBC, Acquisition Services Division under Contract No.",
                "NBCHD030010.",
                "The views and conclusions contained in this document are those of the authors, and should not be interpreted as representing the official policies, either expressed or implied, of the Defense Advanced Research Projects Agency or the U.S. Government. 7.",
                "REFERENCES [1] R. Becker, S. Zilberstein, V. Lesser, and C.V. Goldman.",
                "Solving transition independent decentralized Markov decision processes.",
                "JAIR, 22:423-455, 2004. [2] D. S. Bernstein, E.A.",
                "Hansen, and S. Zilberstein.",
                "Bounded policy iteration for decentralized POMDPs.",
                "In IJCAI, 2005. [3] D. S. Bernstein, S. Zilberstein, and N. Immerman.",
                "The complexity of decentralized control of MDPs.",
                "In UAI, 2000. [4] R. Emery-Montemerlo, G. Gordon, J. Schneider, and S. Thrun.",
                "Approximate solutions for partially observable stochastic games with common payoffs.",
                "In AAMAS, 2004. [5] E. Hansen, D. Bernstein, and S. Zilberstein.",
                "Dynamic programming for partially observable stochastic games.",
                "In AAAI, 2004. [6] V. Lesser, C. Ortiz, and M. Tambe.",
                "Distributed sensor nets: A multiagent perspective.",
                "Kluwer, 2003. [7] R. Maheswaran, M. Tambe, E. Bowring, J. Pearce, and P. Varakantham.",
                "Taking dcop to the real world : Efficient complete solutions for distributed event scheduling.",
                "In AAMAS, 2004. [8] P. J. Modi, W. Shen, M. Tambe, and M. Yokoo.",
                "An asynchronous complete method for distributed constraint optimization.",
                "In AAMAS, 2003. [9] R. Nair, D. Pynadath, M. Yokoo, M. Tambe, and S. Marsella.",
                "Taming decentralized POMDPs: Towards efficient policy computation for multiagent settings.",
                "In IJCAI, 2003. [10] R. Nair, P. Varakantham, M. Tambe, and M. Yokoo.",
                "Networked distributed POMDPs: A synthesis of distributed constraint optimization and POMDPs.",
                "In AAAI, 2005. [11] L. Peshkin, N. Meuleau, K.-E. Kim, and L. Kaelbling.",
                "Learning to cooperate via policy search.",
                "In UAI, 2000. [12] A. Petcu and B. Faltings.",
                "A scalable method for multiagent constraint optimization.",
                "In IJCAI, 2005. [13] D. Szer, F. Charpillet, and S. Zilberstein.",
                "MAA*: A heuristic search algorithm for solving decentralized POMDPs.",
                "In IJCAI, 2005.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 829"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [],
            "translated_text": "",
            "candidates": [],
            "error": []
        },
        "globally optimal solution": {
            "translated_key": "",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Letting loose a SPIDER on a network of POMDPs: Generating quality guaranteed policies Pradeep Varakantham, Janusz Marecki, Yuichi Yabu∗ , Milind Tambe, Makoto Yokoo∗ University of Southern California, Los Angeles, CA 90089, {varakant, marecki, tambe}@usc.edu ∗ Dept.",
                "of Intelligent Systems, Kyushu University, Fukuoka, 812-8581 Japan, yokoo@is.kyushu-u.ac.jp ABSTRACT Distributed Partially Observable Markov Decision Problems (Distributed POMDPs) are a popular approach for modeling multi-agent systems acting in uncertain domains.",
                "Given the significant complexity of solving distributed POMDPs, particularly as we scale up the numbers of agents, one popular approach has focused on approximate solutions.",
                "Though this approach is efficient, the algorithms within this approach do not provide any guarantees on solution quality.",
                "A second less popular approach focuses on global optimality, but typical results are available only for two agents, and also at considerable computational cost.",
                "This paper overcomes the limitations of both these approaches by providing SPIDER, a novel combination of three key features for policy generation in distributed POMDPs: (i) it exploits agent interaction structure given a network of agents (i.e. allowing easier scale-up to larger number of agents); (ii) it uses a combination of heuristics to speedup policy search; and (iii) it allows quality guaranteed approximations, allowing a systematic tradeoff of solution quality for time.",
                "Experimental results show orders of magnitude improvement in performance when compared with previous global optimal algorithms.",
                "Categories and Subject Descriptors I.2.11 [Artificial Intelligence]: Distributed Artificial IntelligenceMulti-agent Systems General Terms Algorithms, Theory 1.",
                "INTRODUCTION Distributed Partially Observable Markov Decision Problems (Distributed POMDPs) are emerging as a popular approach for modeling sequential decision making in teams operating under uncertainty [9, 4, 1, 2, 13].",
                "The uncertainty arises on account of nondeterminism in the outcomes of actions and because the world state may only be partially (or incorrectly) observable.",
                "Unfortunately, as shown by Bernstein et al. [3], the problem of finding the optimal joint policy for general distributed POMDPs is NEXP-Complete.",
                "Researchers have attempted two different types of approaches towards solving these models.",
                "The first category consists of highly efficient approximate techniques, that may not reach globally optimal solutions [2, 9, 11].",
                "The key problem with these techniques has been their inability to provide any guarantees on the quality of the solution.",
                "In contrast, the second less popular category of approaches has focused on a global optimal result [13, 5, 10].",
                "Though these approaches obtain optimal solutions, they typically consider only two agents.",
                "Furthermore, they fail to exploit structure in the interactions of the agents and hence are severely hampered with respect to scalability when considering more than two agents.",
                "To address these problems with the existing approaches, we propose approximate techniques that provide guarantees on the quality of the solution while focussing on a network of more than two agents.",
                "We first propose the basic SPIDER (Search for Policies In Distributed EnviRonments) algorithm.",
                "There are two key novel features in SPIDER: (i) it is a branch and bound heuristic search technique that uses a MDP-based heuristic function to search for an optimal joint policy; (ii) it exploits network structure of agents by organizing agents into a Depth First Search (DFS) pseudo tree and takes advantage of the independence in the different branches of the DFS tree.",
                "We then provide three enhancements to improve the efficiency of the basic SPIDER algorithm while providing guarantees on the quality of the solution.",
                "The first enhancement uses abstractions for speedup, but does not sacrifice solution quality.",
                "In particular, it initially performs branch and bound search on abstract policies and then extends to complete policies.",
                "The second enhancement obtains speedups by sacrificing solution quality, but within an input parameter that provides the tolerable expected value difference from the optimal solution.",
                "The third enhancement is again based on bounding the search for efficiency, however with a tolerance parameter that is provided as a percentage of optimal.",
                "We experimented with the sensor network domain presented in Nair et al. [10], a domain representative of an important class of problems with networks of agents working in uncertain environments.",
                "In our experiments, we illustrate that SPIDER dominates an existing global optimal approach called GOA [10], the only known global optimal algorithm with demonstrated experimental results for more than two agents.",
                "Furthermore, we demonstrate that abstraction improves the performance of SPIDER significantly (while providing optimal solutions).",
                "We finally demonstrate a key feature of SPIDER: by utilizing the approximation enhancements it enables principled tradeoffs in run-time versus solution quality. 822 978-81-904262-7-5 (RPS) c 2007 IFAAMAS 2.",
                "DOMAIN: DISTRIBUTED SENSOR NETS Distributed sensor networks are a large, important class of domains that motivate our work.",
                "This paper focuses on a set of target tracking problems that arise in certain types of sensor networks [6] first introduced in [10].",
                "Figure 1 shows a specific problem instance within this type consisting of three sensors.",
                "Here, each sensor node can scan in one of four directions: North, South, East or West (see Figure 1).",
                "To track a target and obtain associated reward, two sensors with overlapping scanning areas must coordinate by scanning the same area simultaneously.",
                "In Figure 1, to track a target in Loc11, sensor1 needs to scan East and sensor2 needs to scan West simultaneously.",
                "Thus, sensors have to act in a coordinated fashion.",
                "We assume that there are two independent targets and that each targets movement is uncertain and unaffected by the sensor agents.",
                "Based on the area it is scanning, each sensor receives observations that can have false positives and false negatives.",
                "The sensors observations and transitions are independent of each others actions e.g.the observations that sensor1 receives are independent of sensor2s actions.",
                "Each agent incurs a cost for scanning whether the target is present or not, but no cost if it turns off.",
                "Given the sensors observational uncertainty, the targets uncertain transitions and the distributed nature of the sensor nodes, these sensor nets provide a useful domains for applying distributed POMDP models.",
                "Figure 1: A 3-chain sensor configuration 3.",
                "BACKGROUND 3.1 Model: Network Distributed POMDP The ND-POMDP model was introduced in [10], motivated by domains such as the sensor networks introduced in Section 2.",
                "It is defined as the tuple S, A, P, Ω, O, R, b , where S = ×1≤i≤nSi × Su is the set of world states.",
                "Si refers to the set of local states of agent i and Su is the set of unaffectable states.",
                "Unaffectable state refers to that part of the world state that cannot be affected by the agents actions, e.g. environmental factors like target locations that no agent can control.",
                "A = ×1≤i≤nAi is the set of joint actions, where Ai is the set of action for agent i. ND-POMDP assumes transition independence, where the transition function is defined as P(s, a, s ) = Pu(su, su) · 1≤i≤n Pi(si, su, ai, si), where a = a1, . . . , an is the joint action performed in state s = s1, . . . , sn, su and s = s1, . . . , sn, su is the resulting state.",
                "Ω = ×1≤i≤nΩi is the set of joint observations where Ωi is the set of observations for agents i. Observational independence is assumed in ND-POMDPs i.e., the joint observation function is defined as O(s, a, ω) = 1≤i≤n Oi(si, su, ai, ωi), where s = s1, . . . , sn, su is the world state that results from the agents performing a = a1, . . . , an in the previous state, and ω = ω1, . . . , ωn ∈ Ω is the observation received in state s. This implies that each agents observation depends only on the unaffectable state, its local action and on its resulting local state.",
                "The reward function, R, is defined as R(s, a) = l Rl(sl1, . . . , slr, su, al1, . . . , alr ), where each l could refer to any sub-group of agents and r = |l|.",
                "Based on the reward function, an interaction hypergraph is constructed.",
                "A hyper-link, l, exists between a subset of agents for all Rl that comprise R. The interaction hypergraph is defined as G = (Ag, E), where the agents, Ag, are the vertices and E = {l|l ⊆ Ag ∧ Rl is a component of R} are the edges.",
                "The initial belief state (distribution over the initial state), b, is defined as b(s) = bu(su) · 1≤i≤n bi(si), where bu and bi refer to the distribution over initial unaffectable state and agent is initial belief state, respectively.",
                "The goal in ND-POMDP is to compute the joint policy π = π1, . . . , πn that maximizes teams expected reward over a finite horizon T starting from the belief state b.",
                "An ND-POMDP is similar to an n-ary Distributed Constraint Optimization Problem (DCOP)[8, 12] where the variable at each node represents the policy selected by an individual agent, πi with the domain of the variable being the set of all local policies, Πi.",
                "The reward component Rl where |l| = 1 can be thought of as a local constraint while the reward component Rl where l > 1 corresponds to a non-local constraint in the constraint graph. 3.2 Algorithm: Global Optimal Algorithm (GOA) In previous work, GOA has been defined as a global optimal algorithm for ND-POMDPs [10].",
                "We will use GOA in our experimental comparisons, since GOA is a state-of-the-art global optimal algorithm, and in fact the only one with experimental results available for networks of more than two agents.",
                "GOA borrows from a global optimal DCOP algorithm called DPOP[12].",
                "GOAs message passing follows that of DPOP.",
                "The first phase is the UTIL propagation, where the utility messages, in this case values of policies, are passed up from the leaves to the root.",
                "Value for a policy at an agent is defined as the sum of best response values from its children and the joint policy reward associated with the parent policy.",
                "Thus, given a policy for a parent node, GOA requires an agent to iterate through all its policies, finding the best response policy and returning the value to the parent - while at the parent node, to find the best policy, an agent requires its children to return their best responses to each of its policies.",
                "This UTIL propagation process is repeated at each level in the tree, until the root exhausts all its policies.",
                "In the second phase of VALUE propagation, where the optimal policies are passed down from the root till the leaves.",
                "GOA takes advantage of the local interactions in the interaction graph, by pruning out unnecessary joint policy evaluations (associated with nodes not connected directly in the tree).",
                "Since the interaction graph captures all the reward interactions among agents and as this algorithm iterates through all the relevant joint policy evaluations, this algorithm yields a <br>globally optimal solution</br>. 4.",
                "SPIDER As mentioned in Section 3.1, an ND-POMDP can be treated as a DCOP, where the goal is to compute a joint policy that maximizes the overall joint reward.",
                "The brute-force technique for computing an optimal policy would be to examine the expected values for all possible joint policies.",
                "The key idea in SPIDER is to avoid computation of expected values for the entire space of joint policies, by utilizing upper bounds on the expected values of policies and the interaction structure of the agents.",
                "Akin to some of the algorithms for DCOP [8, 12], SPIDER has a pre-processing step that constructs a DFS tree corresponding to the given interaction structure.",
                "Note that these DFS trees are pseudo trees [12] that allow links between ancestors and children.",
                "We employ the Maximum Constrained Node (MCN) heuristic used in the DCOP algorithm, ADOPT [8], however other heuristics (such as MLSP heuristic from [7]) can also be employed.",
                "MCN heuristic tries to place agents with more number of constraints at the top of the tree.",
                "This tree governs how the search for the optimal joint polThe Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 823 icy proceeds in SPIDER.",
                "The algorithms presented in this paper are easily extendable to hyper-trees, however for expository purposes, we assume binary trees.",
                "SPIDER is an algorithm for centralized planning and distributed execution in distributed POMDPs.",
                "In this paper, we employ the following notation to denote policies and expected values: Ancestors(i) ⇒ agents from i to the root (not including i).",
                "Tree(i) ⇒ agents in the sub-tree (not including i) for which i is the root. πroot+ ⇒ joint policy of all agents. πi+ ⇒ joint policy of all agents in Tree(i) ∪ i. πi− ⇒ joint policy of agents that are in Ancestors(i). πi ⇒ policy of the ith agent. ˆv[πi, πi− ] ⇒ upper bound on the expected value for πi+ given πi and policies of ancestor agents i.e. πi− . ˆvj[πi, πi− ] ⇒ upper bound on the expected value for πi+ from the jth child. v[πi, πi− ] ⇒ expected value for πi given policies of ancestor agents, πi− . v[πi+ , πi− ] ⇒ expected value for πi+ given policies of ancestor agents, πi− . vj[πi+ , πi− ] ⇒ expected value for πi+ from the jth child.",
                "Figure 2: Execution of SPIDER, an example 4.1 Outline of SPIDER SPIDER is based on the idea of branch and bound search, where the nodes in the search tree represent partial/complete joint policies.",
                "Figure 2 shows an example search tree for the SPIDER algorithm, using an example of the three agent chain.",
                "Before SPIDER begins its search we create a DFS tree (i.e. pseudo tree) from the three agent chain, with the middle agent as the root of this tree.",
                "SPIDER exploits the structure of this DFS tree while engaging in its search.",
                "Note that in our example figure, each agent is assigned a policy with T=2.",
                "Thus, each rounded rectange (search tree node) indicates a partial/complete joint policy, a rectangle indicates an agent and the ovals internal to an agent show its policy.",
                "Heuristic or actual expected value for a joint policy is indicated in the top right corner of the rounded rectangle.",
                "If the number is italicized and underlined, it implies that the actual expected value of the joint policy is provided.",
                "SPIDER begins with no policy assigned to any of the agents (shown in the level 1 of the search tree).",
                "Level 2 of the search tree indicates that the joint policies are sorted based on upper bounds computed for root agents policies.",
                "Level 3 shows one SPIDER search node with a complete joint policy (a policy assigned to each of the agents).",
                "The expected value for this joint policy is used to prune out the nodes in level 2 (the ones with upper bounds < 234) When creating policies for each non-leaf agent i, SPIDER potentially performs two steps: 1.",
                "Obtaining upper bounds and sorting: In this step, agent i computes upper bounds on the expected values, ˆv[πi, πi− ] of the joint policies πi+ corresponding to each of its policy πi and fixed ancestor policies.",
                "An MDP based heuristic is used to compute these upper bounds on the expected values.",
                "Detailed description about this MDP heuristic is provided in Section 4.2.",
                "All policies of agent i, Πi are then sorted based on these upper bounds (also referred to as heuristic values henceforth) in descending order.",
                "Exploration of these policies (in step 2 below) are performed in this descending order.",
                "As indicated in the level 2 of the search tree (of Figure 2), all the joint policies are sorted based on the heuristic values, indicated in the top right corner of each joint policy.",
                "The intuition behind sorting and then exploring policies in descending order of upper bounds, is that the policies with higher upper bounds could yield joint policies with higher expected values. 2.",
                "Exploration and Pruning: Exploration implies computing the best response joint policy πi+,∗ corresponding to fixed ancestor policies of agent i, πi− .",
                "This is performed by iterating through all policies of agent i i.e.",
                "Πi and summing two quantities for each policy: (i) the best response for all of is children (obtained by performing steps 1 and 2 at each of the child nodes); (ii) the expected value obtained by i for fixed policies of ancestors.",
                "Thus, exploration of a policy πi yields actual expected value of a joint policy, πi+ represented as v[πi+ , πi− ].",
                "The policy with the highest expected value is the best response policy.",
                "Pruning refers to avoiding exploring all policies (or computing expected values) at agent i by using the current best expected value, vmax [πi+ , πi− ].",
                "Henceforth, this vmax [πi+ , πi− ] will be referred to as threshold.",
                "A policy, πi need not be explored if the upper bound for that policy, ˆv[πi, πi− ] is less than the threshold.",
                "This is because the expected value for the best joint policy attainable for that policy will be less than the threshold.",
                "On the other hand, when considering a leaf agent, SPIDER computes the best response policy (and consequently its expected value) corresponding to fixed policies of its ancestors, πi− .",
                "This is accomplished by computing expected values for each of the policies (corresponding to fixed policies of ancestors) and selecting the highest expected value policy.",
                "In Figure 2, SPIDER assigns best response policies to leaf agents at level 3.",
                "The policy for the left leaf agent is to perform action East at each time step in the policy, while the policy for the right leaf agent is to perform Off at each time step.",
                "These best response policies from the leaf agents yield an actual expected value of 234 for the complete joint policy.",
                "Algorithm 1 provides the pseudo code for SPIDER.",
                "This algorithm outputs the best joint policy, πi+,∗ (with an expected value greater than threshold) for the agents in Tree(i).",
                "Lines 3-8 compute the best response policy of a leaf agent i, while lines 9-23 computes the best response joint policy for agents in Tree(i).",
                "This best response computation for a non-leaf agent i includes: (a) Sorting of policies (in descending order) based on heuristic values on line 11; (b) Computing best response policies at each of the children for fixed policies of agent i in lines 16-20; and (c) Maintaining 824 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Algorithm 1 SPIDER(i, πi− , threshold) 1: πi+,∗ ← null 2: Πi ← GET-ALL-POLICIES (horizon, Ai, Ωi) 3: if IS-LEAF(i) then 4: for all πi ∈ Πi do 5: v[πi, πi−] ← JOINT-REWARD (πi, πi−) 6: if v[πi, πi−] > threshold then 7: πi+,∗ ← πi 8: threshold ← v[πi, πi−] 9: else 10: children ← CHILDREN (i) 11: ˆΠi ← UPPER-BOUND-SORT(i, Πi, πi−) 12: for all πi ∈ ˆΠi do 13: ˜πi+ ← πi 14: if ˆv[πi, πi−] < threshold then 15: Go to line 12 16: for all j ∈ children do 17: jThres ← threshold − v[πi, πi−]− Σk∈children,k=j ˆvk[πi, πi−] 18: πj+,∗ ← SPIDER(j, πi πi−, jThres) 19: ˜πi+ ← ˜πi+ πj+,∗ 20: ˆvj[πi, πi−] ← v[πj+,∗, πi πi−] 21: if v[˜πi+, πi−] > threshold then 22: threshold ← v[˜πi+, πi−] 23: πi+,∗ ← ˜πi+ 24: return πi+,∗ Algorithm 2 UPPER-BOUND-SORT(i, Πi, πi− ) 1: children ← CHILDREN (i) 2: ˆΠi ← null /* Stores the sorted list */ 3: for all πi ∈ Πi do 4: ˆv[πi, πi−] ← JOINT-REWARD (πi, πi−) 5: for all j ∈ children do 6: ˆvj[πi, πi−] ← UPPER-BOUND(i, j, πi πi−) 7: ˆv[πi, πi−] + ← ˆvj[πi, πi−] 8: ˆΠi ← INSERT-INTO-SORTED (πi, ˆΠi) 9: return ˆΠi best expected value, joint policy in lines 21-23.",
                "Algorithm 2 provides the pseudo code for sorting policies based on the upper bounds on the expected values of joint policies.",
                "Expected value for an agent i consists of two parts: value obtained from ancestors and value obtained from its children.",
                "Line 4 computes the expected value obtained from ancestors of the agent (using JOINT-REWARD function), while lines 5-7 compute the heuristic value from the children.",
                "The sum of these two parts yields an upper bound on the expected value for agent i, and line 8 of the algorithm sorts the policies based on these upper bounds. 4.2 MDP based heuristic function The heuristic function quickly provides an upper bound on the expected value obtainable from the agents in Tree(i).",
                "The subtree of agents is a distributed POMDP in itself and the idea here is to construct a centralized MDP corresponding to the (sub-tree) distributed POMDP and obtain the expected value of the optimal policy for this centralized MDP.",
                "To reiterate this in terms of the agents in DFS tree interaction structure, we assume full observability for the agents in Tree(i) and for fixed policies of the agents in {Ancestors(i) ∪ i}, we compute the joint value ˆv[πi+ , πi− ] .",
                "We use the following notation for presenting the equations for computing upper bounds/heuristic values (for agents i and k): Let Ei− denote the set of links between agents in {Ancestors(i)∪ i} and Tree(i), Ei+ denote the set of links between agents in Tree(i).",
                "Also, if l ∈ Ei− , then l1 is the agent in {Ancestors(i)∪ i} and l2 is the agent in Tree(i), that l connects together.",
                "We first compact the standard notation: ot k =Ok(st+1 k , st+1 u , πk(ωt k), ωt+1 k ) (1) pt k =Pk(st k, st u, πk(ωt k), st+1 k ) · ot k pt u =P(st u, st+1 u ) st l = st l1 , st l2 , st u ; ωt l = ωt l1 , ωt l2 rt l =Rl(st l , πl1 (ωt l1 ), πl2 (ωt l2 )) vt l =V t πl (st l , st u, ωt l1 , ωt l2 ) Depending on the location of agent k in the agent tree we have the following cases: IF k ∈ {Ancestors(i) ∪ i}, ˆpt k = pt k, (2) IF k ∈ Tree(i), ˆpt k = Pk(st k, st u, πk(ωt k), st+1 k ) IF l ∈ Ei− , ˆrt l = max {al2 } Rl(st l , πl1 (ωt l1 ), al2 ) IF l ∈ Ei+ , ˆrt l = max {al1 ,al2 } Rl(st l , al1 , al2 ) The value function for an agent i executing the joint policy πi+ at time η − 1 is provided by the equation: V η−1 πi+ (sη−1 , ωη−1 ) = l∈Ei− vη−1 l + l∈Ei+ vη−1 l (3) where vη−1 l = rη−1 l + ω η l ,sη pη−1 l1 pη−1 l2 pη−1 u vη l Algorithm 3 UPPER-BOUND (i, j, πj− ) 1: val ← 0 2: for all l ∈ Ej− ∪ Ej+ do 3: if l ∈ Ej− then πl1 ← φ 4: for all s0 l do 5: val + ← startBel[s0 l ]· UPPER-BOUND-TIME (i, s0 l , j, πl1 , ) 6: return val Algorithm 4 UPPER-BOUND-TIME (i, st l , j, πl1 , ωt l1 ) 1: maxV al ← −∞ 2: for all al1 , al2 do 3: if l ∈ Ei− and l ∈ Ej− then al1 ← πl1 (ωt l1 ) 4: val ← GET-REWARD(st l , al1 , al2 ) 5: if t < πi.horizon − 1 then 6: for all st+1 l , ωt+1 l1 do 7: futV al←pt u ˆpt l1 ˆpt l2 8: futV al ∗ ← UPPER-BOUND-TIME(st+1 l , j, πl1 , ωt l1 ωt+1 l1 ) 9: val + ← futV al 10: if val > maxV al then maxV al ← val 11: return maxV al Upper bound on the expected value for a link is computed by modifying the equation 3 to reflect the full observability assumption.",
                "This involves removing the observational probability term for agents in Tree(i) and maximizing the future value ˆvη l over the actions of those agents (in Tree(i)).",
                "Thus, the equation for the The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 825 computation of the upper bound on a link l, is as follows: IF l ∈ Ei− , ˆvη−1 l =ˆrη−1 l + max al2 ω η l1 ,s η l ˆpη−1 l1 ˆpη−1 l2 pη−1 u ˆvη l IF l ∈ Ei+ , ˆvη−1 l =ˆrη−1 l + max al1 ,al2 s η l ˆpη−1 l1 ˆpη−1 l2 pη−1 u ˆvη l Algorithm 3 and Algorithm 4 provide the algorithm for computing upper bound for child j of agent i, using the equations descirbed above.",
                "While Algorithm 4 computes the upper bound on a link given the starting state, Algorithm 3 sums the upper bound values computed over each of the links in Ei− ∪ Ei+ . 4.3 Abstraction Algorithm 5 SPIDER-ABS(i, πi− , threshold) 1: πi+,∗ ← null 2: Πi ← GET-POLICIES (<>, 1) 3: if IS-LEAF(i) then 4: for all πi ∈ Πi do 5: absHeuristic ← GET-ABS-HEURISTIC (πi, πi−) 6: absHeuristic ∗ ← (timeHorizon − πi.horizon) 7: if πi.horizon = timeHorizon and πi.absNodes = 0 then 8: v[πi, πi−] ← JOINT-REWARD (πi, πi−) 9: if v[πi, πi−] > threshold then 10: πi+,∗ ← πi; threshold ← v[πi, πi−] 11: else if v[πi, πi−] + absHeuristic > threshold then 12: ˆΠi ← EXTEND-POLICY (πi, πi.absNodes + 1) 13: Πi + ← INSERT-SORTED-POLICIES ( ˆΠi) 14: REMOVE(πi) 15: else 16: children ← CHILDREN (i) 17: Πi ← UPPER-BOUND-SORT(i, Πi, πi−) 18: for all πi ∈ Πi do 19: ˜πi+ ← πi 20: absHeuristic ← GET-ABS-HEURISTIC (πi, πi−) 21: absHeuristic ∗ ← (timeHorizon − πi.horizon) 22: if πi.horizon = timeHorizon and πi.absNodes = 0 then 23: if ˆv[πi, πi−] < threshold and πi.absNodes = 0 then 24: Go to line 19 25: for all j ∈ children do 26: jThres ← threshold − v[πi, πi−]− Σk∈children,k=j ˆvk[πi, πi−] 27: πj+,∗ ← SPIDER(j, πi πi−, jThres) 28: ˜πi+ ← ˜πi+ πj+,∗; ˆvj[πi, πi−] ← v[πj+,∗, πi πi−] 29: if v[˜πi+, πi−] > threshold then 30: threshold ← v[˜πi+, πi−]; πi+,∗ ← ˜πi+ 31: else if ˆv[πi+, πi−] + absHeuristic > threshold then 32: ˆΠi ← EXTEND-POLICY (πi, πi.absNodes + 1) 33: Πi + ← INSERT-SORTED-POLICIES (ˆΠi) 34: REMOVE(πi) 35: return πi+,∗ In SPIDER, the exploration/pruning phase can only begin after the heuristic (or upper bound) computation and sorting for the policies has ended.",
                "We provide an approach to possibly circumvent the exploration of a group of policies based on heuristic computation for one abstract policy, thus leading to an improvement in runtime performance (without loss in solution quality).",
                "The important steps in this technique are defining the abstract policy and how heuristic values are computated for the abstract policies.",
                "In this paper, we propose two types of abstraction: 1.",
                "Horizon Based Abstraction (HBA): Here, the abstract policy is defined as a shorter horizon policy.",
                "It represents a group of longer horizon policies that have the same actions as the abstract policy for times less than or equal to the horizon of the abstract policy.",
                "In Figure 3(a), a T=1 abstract policy that performs East action, represents a group of T=2 policies, that perform East in the first time step.",
                "For HBA, there are two parts to heuristic computation: (a) Computing the upper bound for the horizon of the abstract policy.",
                "This is same as the heuristic computation defined by the GETHEURISTIC() algorithm for SPIDER, however with a shorter time horizon (horizon of the abstract policy). (b) Computing the maximum possible reward that can be accumulated in one time step (using GET-ABS-HEURISTIC()) and multiplying it by the number of time steps to time horizon.",
                "This maximum possible reward (for one time step) is obtained by iterating through all the actions of all the agents in Tree(i) and computing the maximum joint reward for any joint action.",
                "Sum of (a) and (b) is the heuristic value for a HBA abstract policy. 2.",
                "Node Based Abstraction (NBA): Here an abstract policy is obtained by not associating actions to certain nodes of the policy tree.",
                "Unlike in HBA, this implies multiple levels of abstraction.",
                "This is illustrated in Figure 3(b), where there are T=2 policies that do not have an action for observation TP.",
                "These incomplete T=2 policies are abstractions for T=2 complete policies.",
                "Increased levels of abstraction leads to faster computation of a complete joint policy, πroot+ and also to shorter heuristic computation and exploration, pruning phases.",
                "For NBA, the heuristic computation is similar to that of a normal policy, except in cases where there is no action associated with policy nodes.",
                "In such cases, the immediate reward is taken as Rmax (maximum reward for any action).",
                "We combine both the abstraction techniques mentioned above into one technique, SPIDER-ABS.",
                "Algorithm 5 provides the algorithm for this abstraction technique.",
                "For computing optimal joint policy with SPIDER-ABS, a non-leaf agent i initially examines all abstract T=1 policies (line 2) and sorts them based on abstract policy heuristic computations (line 17).",
                "The abstraction horizon is gradually increased and these abstract policies are then explored in descending order of heuristic values and ones that have heuristic values less than the threshold are pruned (lines 23-24).",
                "Exploration in SPIDER-ABS has the same definition as in SPIDER if the policy being explored has a horizon of policy computation which is equal to the actual time horizon and if all the nodes of the policy have an action associated with them (lines 25-30).",
                "However, if those conditions are not met, then it is substituted by a group of policies that it represents (using EXTEND-POLICY () function) (lines 31-32).",
                "EXTEND-POLICY() function is also responsible for initializing the horizon and absNodes of a policy. absNodes represents the number of nodes at the last level in the policy tree, that do not have an action assigned to them.",
                "If πi.absNodes = |Ωi|πi.horizon−1 (i.e. total number of policy nodes possible at πi.horizon) , then πi.absNodes is set to zero and πi.horizon is increased by 1.",
                "Otherwise, πi.absNodes is increased by 1.",
                "Thus, this function combines both HBA and NBA by using the policy variables, horizon and absNodes.",
                "Before substituting the abstract policy with a group of policies, those policies are sorted based on heuristic values (line 33).",
                "Similar type of abstraction based best response computation is adopted at leaf agents (lines 3-14). 4.4 Value ApproXimation (VAX) In this section, we present an approximate enhancement to SPIDER called VAX.",
                "The input to this technique is an approximation parameter , which determines the difference from the optimal solution quality.",
                "This approximation parameter is used at each agent for pruning out joint policies.",
                "The pruning mechanism in SPIDER and SPIDER-Abs dictates that a joint policy be pruned only if the threshold is exactly greater than the heuristic value.",
                "However, the 826 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Figure 3: Example of abstraction for (a) HBA (Horizon Based Abstraction) and (b) NBA (Node Based Abstraction) idea in this technique is to prune out joint a policy if the following condition is satisfied: threshold + > ˆv[πi , πi− ].",
                "Apart from the pruning condition, VAX is the same as SPIDER/SPIDER-ABS.",
                "In the example of Figure 2, if the heuristic value for the second joint policy (or second search tree node) in level 2 were 238 instead of 232, then that policy could not be be pruned using SPIDER or SPIDER-Abs.",
                "However, in VAX with an approximation parameter of 5, the joint policy in consideration would also be pruned.",
                "This is because the threshold (234) at that juncture plus the approximation parameter (5), i.e. 239 would have been greater than the heuristic value for that joint policy (238).",
                "It can be noted from the example (just discussed) that this kind of pruning can lead to fewer explorations and hence lead to an improvement in the overall run-time performance.",
                "However, this can entail a sacrifice in the quality of the solution because this technique can prune out a candidate optimal solution.",
                "A bound on the error introduced by this approximate algorithm as a function of , is provided by Proposition 3. 4.5 Percentage ApproXimation (PAX) In this section, we present the second approximation enhancement over SPIDER called PAX.",
                "Input to this technique is a parameter, δ that represents the minimum percentage of the optimal solution quality that is desired.",
                "Output of this technique is a policy with an expected value that is at least δ% of the optimal solution quality.",
                "A policy is pruned if the following condition is satisfied: threshold > δ 100 ˆv[πi , πi− ].",
                "Like in VAX, the only difference between PAX and SPIDER/SPIDER-ABS is this pruning condition.",
                "Again in Figure 2, if the heuristic value for the second search tree node in level 2 were 238 instead of 232, then PAX with an input parameter of 98% would be able to prune that search tree node (since 98 100 ∗238 < 234).",
                "This type of pruning leads to fewer explorations and hence an improvement in run-time performance, while potentially leading to a loss in quality of the solution.",
                "Proposition 4 provides the bound on quality loss. 4.6 Theoretical Results PROPOSITION 1.",
                "Heuristic provided using the centralized MDP heuristic is admissible.",
                "Proof.",
                "For the value provided by the heuristic to be admissible, it should be an over estimate of the expected value for a joint policy.",
                "Thus, we need to show that: For l ∈ Ei+ ∪ Ei− : ˆvt l ≥ vt l (refer to notation in Section 4.2) We use mathematical induction on t to prove this.",
                "Base case: t = T − 1.",
                "Irrespective of whether l ∈ Ei− or l ∈ Ei+ , ˆrt l is computed by maximizing over all actions of the agents in Tree(i), while rt l is computed for fixed policies of the same agents.",
                "Hence, ˆrt l ≥ rt l and also ˆvt l ≥ vt l .",
                "Assumption: Proposition holds for t = η, where 1 ≤ η < T − 1.",
                "We now have to prove that the proposition holds for t = η − 1.",
                "We show the proof for l ∈ Ei− and similar reasoning can be adopted to prove for l ∈ Ei+ .",
                "The heuristic value function for l ∈ Ei− is provided by the following equation: ˆvη−1 l =ˆrη−1 l + max al2 ω η l1 ,s η l ˆpη−1 l1 ˆpη−1 l2 pη−1 u ˆvη l Rewriting the RHS and using Eqn 2 (in Section 4.2) =ˆrη−1 l + max al2 ω η l1 ,s η l pη−1 u pη−1 l1 ˆpη−1 l2 ˆvη l =ˆrη−1 l + ω η l1 ,s η l pη−1 u pη−1 l1 max al2 ˆpη−1 l2 ˆvη l Since maxal2 ˆpη−1 l2 ˆvη l ≥ ωl2 oη−1 l2 ˆpη−1 l2 ˆvη l and pη−1 l2 = oη−1 l2 ˆpη−1 l2 ≥ˆrη−1 l + ω η l1 ,s η l pη−1 u pη−1 l1 ωl2 pη−1 l2 ˆvη l Since ˆvη l ≥ vη l (from the assumption) ≥ˆrη−1 l + ω η l1 ,s η l pη−1 u pη−1 l1 ωl2 pη−1 l2 vη l Since ˆrη−1 l ≥ rη−1 l (by definition) ≥rη−1 l + ω η l1 ,s η l pη−1 u pη−1 l1 ωl2 pη−1 l2 vη l =rη−1 l + (ω η l ,s η l ) pη−1 u pη−1 l1 pη−1 l2 vη l = vη−1 l Thus proved.",
                "PROPOSITION 2.",
                "SPIDER provides an optimal solution.",
                "Proof.",
                "SPIDER examines all possible joint policies given the interaction structure of the agents.",
                "The only exception being when a joint policy is pruned based on the heuristic value.",
                "Thus, as long as a candidate optimal policy is not pruned, SPIDER will return an optimal policy.",
                "As proved in Proposition 1, the expected value for a joint policy is always an upper bound.",
                "Hence when a joint policy is pruned, it cannot be an optimal solution.",
                "PROPOSITION 3.",
                "Error bound on the solution quality for VAX (implemented over SPIDER-ABS) with an approximation parameter of is ρ , where ρ is the number of leaf nodes in the DFS tree.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 827 Proof.",
                "We prove this proposition using mathematical induction on the depth of the DFS tree.",
                "Base case: depth = 1 (i.e. one node).",
                "Best response is computed by iterating through all policies, Πk.",
                "A policy,πk is pruned if ˆv[πk, πk− ] < threshold + .",
                "Thus the best response policy computed by VAX would be at most away from the optimal best response.",
                "Hence the proposition holds for the base case.",
                "Assumption: Proposition holds for d, where 1 ≤ depth ≤ d. We now have to prove that the proposition holds for d + 1.",
                "Without loss of generality, lets assume that the root node of this tree has k children.",
                "Each of this children is of depth ≤ d, and hence from the assumption, the error introduced in kth child is ρk , where ρk is the number of leaf nodes in kth child of the root.",
                "Therefore, ρ = k ρk, where ρ is the number of leaf nodes in the tree.",
                "In SPIDER-ABS, threshold at the root agent, thresspider = k v[πk+ , πk− ].",
                "However, with VAX the threshold at the root agent will be (in the worst case), threshvax = k v[πk+ , πk− ]− k ρk .",
                "Hence, with VAX a joint policy is pruned at the root agent if ˆv[πroot, πroot− ] < threshvax + ⇒ ˆv[πroot, πroot− ] < threshspider − (( k ρk) − 1) ≤ threshspider − ( k ρk) ≤ threshspider − ρ .",
                "Hence proved.",
                "PROPOSITION 4.",
                "For PAX (implemented over SPIDER-ABS) with an input parameter of δ, the solution quality is at least δ 100 v[πroot+,∗ ], where v[πroot+,∗ ] denotes the optimal solution quality.",
                "Proof.",
                "We prove this proposition using mathematical induction on the depth of the DFS tree.",
                "Base case: depth = 1 (i.e. one node).",
                "Best response is computed by iterating through all policies, Πk.",
                "A policy,πk is pruned if δ 100 ˆv[πk, πk− ] < threshold.",
                "Thus the best response policy computed by PAX would be at least δ 100 times the optimal best response.",
                "Hence the proposition holds for the base case.",
                "Assumption: Proposition holds for d, where 1 ≤ depth ≤ d. We now have to prove that the proposition holds for d + 1.",
                "Without loss of generality, lets assume that the root node of this tree has k children.",
                "Each of this children is of depth ≤ d, and hence from the assumption, the solution quality in the kth child is at least δ 100 v[πk+,∗ , πk− ] for PAX.",
                "With SPIDER-ABS, a joint policy is pruned at the root agent if ˆv[πroot, πroot− ] < k v[πk+,∗ , πk− ].",
                "However with PAX, a joint policy is pruned if δ 100 ˆv[πroot, πroot− ] < k δ 100 v[πk+,∗ , πk− ] ⇒ ˆv[πroot, πroot− ] < k v[πk+,∗ , πk− ].",
                "Since the pruning condition at the root agent in PAX is the same as the one in SPIDER-ABS, there is no error introduced at the root agent and all the error is introduced in the children.",
                "Thus, overall solution quality is at least δ 100 of the optimal solution.",
                "Hence proved. 5.",
                "EXPERIMENTAL RESULTS All our experiments were conducted on the sensor network domain from Section 2.",
                "The five network configurations employed are shown in Figure 4.",
                "Algorithms that we experimented with are GOA, SPIDER, SPIDER-ABS, PAX and VAX.",
                "We compare against GOA because it is the only global optimal algorithm that considers more than two agents.",
                "We performed two sets of experiments: (i) firstly, we compared the run-time performance of the above algorithms and (ii) secondly, we experimented with PAX and VAX to study the tradeoff between run-time and solution quality.",
                "Experiments were terminated after 10000 seconds1 .",
                "Figure 5(a) provides run-time comparisons between the optimal algorithms GOA, SPIDER, SPIDER-Abs and the approximate algorithms, PAX ( of 30) and VAX(δ of 80).",
                "X-axis denotes the 1 Machine specs for all experiments: Intel Xeon 3.6 GHZ processor, 2GB RAM sensor network configuration used, while Y-axis indicates the runtime (on a log-scale).",
                "The time horizon of policy computation was 3.",
                "For each configuration (3-chain, 4-chain, 4-star and 5-star), there are five bars indicating the time taken by GOA, SPIDER, SPIDERAbs, PAX and VAX.",
                "GOA did not terminate within the time limit for 4-star and 5-star configurations.",
                "SPIDER-Abs dominated the SPIDER and GOA for all the configurations.",
                "For instance, in the 3chain configuration, SPIDER-ABS provides 230-fold speedup over GOA and 2-fold speedup over SPIDER and for the 4-chain configuration it provides 58-fold speedup over GOA and 2-fold speedup over SPIDER.",
                "The two approximation approaches, VAX and PAX provided further improvement in performance over SPIDER-Abs.",
                "For instance, in the 5-star configuration VAX provides a 15-fold speedup and PAX provides a 8-fold speedup over SPIDER-Abs.",
                "Figures 5(b) provides a comparison of the solution quality obtained using the different algorithms for the problems tested in Figure 5(a).",
                "X-axis denotes the sensor network configuration while Y-axis indicates the solution quality.",
                "Since GOA, SPIDER, and SPIDER-Abs are all global optimal algorithms, the solution quality is the same for all those algorithms.",
                "For 5-P configuration, the global optimal algorithms did not terminate within the limit of 10000 seconds, so the bar for optimal quality indicates an upper bound on the optimal solution quality.",
                "With both the approximations, we obtained a solution quality that was close to the optimal solution quality.",
                "In 3-chain and 4-star configurations, it is remarkable that both PAX and VAX obtained almost the same actual quality as the global optimal algorithms, despite the approximation parameter and δ.",
                "For other configurations as well, the loss in quality was less than 20% of the optimal solution quality.",
                "Figure 5(c) provides the time to solution with PAX (for varying epsilons).",
                "X-axis denotes the approximation parameter, δ (percentage to optimal) used, while Y-axis denotes the time taken to compute the solution (on a log-scale).",
                "The time horizon for all the configurations was 4.",
                "As δ was decreased from 70 to 30, the time to solution decreased drastically.",
                "For instance, in the 3-chain case there was a total speedup of 170-fold when the δ was changed from 70 to 30.",
                "Interestingly, even with a low δ of 30%, the actual solution quality remained equal to the one obtained at 70%.",
                "Figure 5(d) provides the time to solution for all the configurations with VAX (for varying epsilons).",
                "X-axis denotes the approximation parameter, used, while Y-axis denotes the time taken to compute the solution (on a log-scale).",
                "The time horizon for all the configurations was 4.",
                "As was increased, the time to solution decreased drastically.",
                "For instance, in the 4-star case there was a total speedup of 73-fold when the was changed from 60 to 140.",
                "Again, the actual solution quality did not change with varying epsilon.",
                "Figure 4: Sensor network configurations 828 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Figure 5: Comparison of GOA, SPIDER, SPIDER-Abs and VAX for T = 3 on (a) Runtime and (b) Solution quality; (c) Time to solution for PAX with varying percentage to optimal for T=4 (d) Time to solution for VAX with varying epsilon for T=4 6.",
                "SUMMARY AND RELATED WORK This paper presents four algorithms SPIDER, SPIDER-ABS, PAX and VAX that provide a novel combination of features for policy search in distributed POMDPs: (i) exploiting agent interaction structure given a network of agents (i.e. easier scale-up to larger number of agents); (ii) using branch and bound search with an MDP based heuristic function; (iii) utilizing abstraction to improve runtime performance without sacrificing solution quality; (iv) providing a priori percentage bounds on quality of solutions using PAX; and (v) providing expected value bounds on the quality of solutions using VAX.",
                "These features allow for systematic tradeoff of solution quality for run-time in networks of agents operating under uncertainty.",
                "Experimental results show orders of magnitude improvement in performance over previous global optimal algorithms.",
                "Researchers have typically employed two types of techniques for solving distributed POMDPs.",
                "The first set of techniques compute global optimal solutions.",
                "Hansen et al. [5] present an algorithm based on dynamic programming and iterated elimination of dominant policies, that provides optimal solutions for distributed POMDPs.",
                "Szer et al. [13] provide an optimal heuristic search method for solving Decentralized POMDPs.",
                "This algorithm is based on the combination of a classical heuristic search algorithm, A∗ and decentralized control theory.",
                "The key differences between SPIDER and MAA* are: (a) Enhancements to SPIDER (VAX and PAX) provide for quality guaranteed approximations, while MAA* is a global optimal algorithm and hence involves significant computational complexity; (b) Due to MAA*s inability to exploit interaction structure, it was illustrated only with two agents.",
                "However, SPIDER has been illustrated for networks of agents; and (c) SPIDER explores the joint policy one agent at a time, while MAA* expands it one time step at a time (simultaneously for all the agents).",
                "The second set of techniques seek approximate policies.",
                "EmeryMontemerlo et al. [4] approximate POSGs as a series of one-step Bayesian games using heuristics to approximate future value, trading off limited lookahead for computational efficiency, resulting in locally optimal policies (with respect to the selected heuristic).",
                "Nair et al. [9]s JESP algorithm uses dynamic programming to reach a local optimum solution for finite horizon decentralized POMDPs.",
                "Peshkin et al. [11] and Bernstein et al. [2] are examples of policy search techniques that search for locally optimal policies.",
                "Though all the above techniques improve the efficiency of policy computation considerably, they are unable to provide error bounds on the quality of the solution.",
                "This aspect of quality bounds differentiates SPIDER from all the above techniques.",
                "Acknowledgements.",
                "This material is based upon work supported by the Defense Advanced Research Projects Agency (DARPA), through the Department of the Interior, NBC, Acquisition Services Division under Contract No.",
                "NBCHD030010.",
                "The views and conclusions contained in this document are those of the authors, and should not be interpreted as representing the official policies, either expressed or implied, of the Defense Advanced Research Projects Agency or the U.S. Government. 7.",
                "REFERENCES [1] R. Becker, S. Zilberstein, V. Lesser, and C.V. Goldman.",
                "Solving transition independent decentralized Markov decision processes.",
                "JAIR, 22:423-455, 2004. [2] D. S. Bernstein, E.A.",
                "Hansen, and S. Zilberstein.",
                "Bounded policy iteration for decentralized POMDPs.",
                "In IJCAI, 2005. [3] D. S. Bernstein, S. Zilberstein, and N. Immerman.",
                "The complexity of decentralized control of MDPs.",
                "In UAI, 2000. [4] R. Emery-Montemerlo, G. Gordon, J. Schneider, and S. Thrun.",
                "Approximate solutions for partially observable stochastic games with common payoffs.",
                "In AAMAS, 2004. [5] E. Hansen, D. Bernstein, and S. Zilberstein.",
                "Dynamic programming for partially observable stochastic games.",
                "In AAAI, 2004. [6] V. Lesser, C. Ortiz, and M. Tambe.",
                "Distributed sensor nets: A multiagent perspective.",
                "Kluwer, 2003. [7] R. Maheswaran, M. Tambe, E. Bowring, J. Pearce, and P. Varakantham.",
                "Taking dcop to the real world : Efficient complete solutions for distributed event scheduling.",
                "In AAMAS, 2004. [8] P. J. Modi, W. Shen, M. Tambe, and M. Yokoo.",
                "An asynchronous complete method for distributed constraint optimization.",
                "In AAMAS, 2003. [9] R. Nair, D. Pynadath, M. Yokoo, M. Tambe, and S. Marsella.",
                "Taming decentralized POMDPs: Towards efficient policy computation for multiagent settings.",
                "In IJCAI, 2003. [10] R. Nair, P. Varakantham, M. Tambe, and M. Yokoo.",
                "Networked distributed POMDPs: A synthesis of distributed constraint optimization and POMDPs.",
                "In AAAI, 2005. [11] L. Peshkin, N. Meuleau, K.-E. Kim, and L. Kaelbling.",
                "Learning to cooperate via policy search.",
                "In UAI, 2000. [12] A. Petcu and B. Faltings.",
                "A scalable method for multiagent constraint optimization.",
                "In IJCAI, 2005. [13] D. Szer, F. Charpillet, and S. Zilberstein.",
                "MAA*: A heuristic search algorithm for solving decentralized POMDPs.",
                "In IJCAI, 2005.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 829"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Dado que el gráfico de interacción captura todas las interacciones de recompensa entre los agentes y, como este algoritmo itera a través de todas las evaluaciones de políticas conjuntas relevantes, este algoritmo produce una \"solución globalmente óptima\".4."
            ],
            "translated_text": "",
            "candidates": [
                "Solución óptima globalmente",
                "solución globalmente óptima"
            ],
            "error": []
        }
    }
}