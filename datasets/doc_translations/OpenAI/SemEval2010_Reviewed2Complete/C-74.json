{
    "id": "C-74",
    "original_text": "Adapting Asynchronous Messaging Middleware to ad-hoc Networking Mirco Musolesi Dept. of Computer Science, University College London Gower Street, London WC1E 6BT, United Kingdom m.musolesi@cs.ucl.ac.uk Cecilia Mascolo Dept. of Computer Science, University College London Gower Street, London WC1E 6BT, United Kingdom c.mascolo@cs.ucl.ac.uk Stephen Hailes Dept. of Computer Science, University College London Gower Street, London WC1E 6BT, United Kingdom s.hailes@cs.ucl.ac.uk ABSTRACT The characteristics of mobile environments, with the possibility of frequent disconnections and fluctuating bandwidth, have forced a rethink of traditional middleware. In particular, the synchronous communication paradigms often employed in standard middleware do not appear to be particularly suited to ad-hoc environments, in which not even the intermittent availability of a backbone network can be assumed. Instead, asynchronous communication seems to be a generally more suitable paradigm for such environments. Message oriented middleware for traditional systems has been developed and used to provide an asynchronous paradigm of communication for distributed systems, and, recently, also for some specific mobile computing systems. In this paper, we present our experience in designing, implementing and evaluating EMMA (Epidemic Messaging Middleware for ad-hoc networks), an adaptation of Java Message Service (JMS) for mobile ad-hoc environments. We discuss in detail the design challenges and some possible solutions, showing a concrete example of the feasibility and suitability of the application of the asynchronous paradigm in this setting and outlining a research roadmap for the coming years. Categories and Subject Descriptors C.2.4 [Computer-Communication Networks]: Distributed Systems-Distributed Applications; C.2.1 [Network Architecture and Design]: Wireless Communication General Terms DESIGN, ALGORITHMS 1. INTRODUCTION With the increasing popularity of mobile devices and their widespread adoption, there is a clear need to allow the development of a broad spectrum of applications that operate effectively over such an environment. Unfortunately, this is far from simple: mobile devices are increasingly heterogeneous in terms of processing capabilities, memory size, battery capacity, and network interfaces. Each such configuration has substantially different characteristics that are both statically different - for example, there is a major difference in capability between a Berkeley mote and an 802.11g-equipped laptop - and that vary dynamically, as in situations of fluctuating bandwidth and intermittent connectivity. Mobile ad hoc environments have an additional element of complexity in that they are entirely decentralised. In order to craft applications for such complex environments, an appropriate form of middleware is essential if cost effective development is to be achieved. In this paper, we examine one of the foundational aspects of middleware for mobile ad-hoc environments: that of the communication primitives. Traditionally, the most frequently used middleware primitives for communication assume the simultaneous presence of both end points on a network, since the stability and pervasiveness of the networking infrastructure is not an unreasonable assumption for most wired environments. In other words, most communication paradigms are synchronous: object oriented middleware such as CORBA and Java RMI are typical examples of middleware based on synchronous communication. In recent years, there has been growing interest in platforms based on asynchronous communication paradigms, such as publish-subscribe systems [6]: these have been exploited very successfully where there is application level asynchronicity. From a Gartner Market Report [7]: Given messageoriented-middlewares (MOM) popularity, scalability, flexibility, and affinity with mobile and wireless architectures, by 2004, MOM will emerge as the dominant form of communication middleware for linking mobile and enterprise applications (0.7 probability).... Moreover, in mobile ad-hoc systems, the likelihood of network fragmentation means that synchronous communication may in any case be impracticable, giving situations in which delay tolerant asynchronous traffic is the only form of traffic that could be supported. 121 Middleware 2004 Companion Middleware for mobile ad-hoc environments must therefore support semi-synchronous or completely asynchronous communication primitives if it is to avoid substantial limitations to its utility. Aside from the intellectual challenge in supporting this model, this work is also interesting because there are a number of practical application domains in allowing inter-community communication in undeveloped areas of the globe. Thus, for example, projects that have been carried out to help populations that live in remote places of the globe such as Lapland [3] or in poor areas that lack fixed connectivity infrastructure [9]. There have been attempts to provide mobile middleware with these properties, including STEAM, LIME, XMIDDLE, Bayou (see [11] for a more complete review of mobile middleware). These models differ quite considerably from the existing traditional middleware in terms of primitives provided. Furthermore, some of them fail in providing a solution for the true ad-hoc scenarios. If the projected success of MOM becomes anything like a reality, there will be many programmers with experience of it. The ideal solution to the problem of middleware for ad-hoc systems is, then, to allow programmers to utilise the same paradigms and models presented by common forms of MOM and to ensure that these paradigms are supportable within the mobile environment. This approach has clear advantages in allowing applications developed on standard middleware platforms to be easily deployed on mobile devices. Indeed, some research has already led to the adaptation of traditional middleware platforms to mobile settings, mainly to provide integration between mobile devices and existing fixed networks in a nomadic (i.e., mixed) environment [4]. With respect to message oriented middleware, the current implementations, however, either assume the existence of a backbone network to which the mobile hosts connect from time to time while roaming [10], or assume that nodes are always somehow reachable through a path [18]. No adaptation to heterogeneous or completely ad-hoc scenarios, with frequent disconnection and periodically isolated clouds of hosts, has been attempted. In the remainder of this paper we describe an initial attempt to adapt message oriented middleware to suit mobile and, more specifically, mobile ad-hoc networks. In our case, we elected to examine JMS, as one of the most widely known MOM systems. In the latter part of this paper, we explore the limitations of our results and describe the plans we have to take the work further. 2. MESSAGE ORIENTED MIDDLEWARE AND JAVA MESSAGE SERVICE (JMS) Message-oriented middleware systems support communication between distributed components via message-passing: the sender sends a message to identified queues, which usually reside on a server. A receiver retrieves the message from the queue at a different time and may acknowledge the reply using the same asynchronous mechanism. Message-oriented middleware thus supports asynchronous communication in a very natural way, achieving de-coupling of senders and receivers. A sender is able to continue processing as soon as the middleware has accepted the message; eventually, the receiver will send an acknowledgment message and the sender will be able to collect it at a convenient time. However, given the way they are implemented, these middleware systems usually require resource-rich devices, especially in terms of memory and disk space, where persistent queues of messages that have been received but not yet processed, are stored. Sun Java Message Service [5], IBM WebSphere MQ [6], Microsoft MSMQ [12] are examples of very successful message-oriented middleware for traditional distributed systems. The Java Messaging Service (JMS) is a collection of interfaces for asynchronous communication between distributed components. It provides a common way for Java programs to create, send and receive messages. JMS users are usually referred to as clients. The JMS specification further defines providers as the components in charge of implementing the messaging system and providing the administrative and control functionality (i.e., persistence and reliability) required by the system. Clients can send and receive messages, asynchronously, through the JMS provider, which is in charge of the delivery and, possibly, of the persistence of the messages. There are two types of communication supported: point to point and publish-subscribe models. In the point to point model, hosts send messages to queues. Receivers can be registered with some specific queues, and can asynchronously retrieve the messages and then acknowledge them. The publish-subscribe model is based on the use of topics that can be subscribed to by clients. Messages are sent to topics by other clients and are then received in an asynchronous mode by all the subscribed clients. Clients learn about the available topics and queues through Java Naming and Directory Interface (JNDI) [14]. Queues and topics are created by an administrator on the provider and are registered with the JNDI interface for look-up. In the next section, we introduce the challenges of mobile networks, and show how JMS can be adapted to cope with these requirements. 3. JMS FOR MOBILE COMPUTING Mobile networks vary very widely in their characteristics, from nomadic networks in which modes relocate whilst offline through to ad-hoc networks in which modes move freely and in which there is no infrastructure. Mobile ad-hoc networks are most generally applicable in situations where survivability and instant deployability are key: most notably in military applications and disaster relief. In between these two types of mobile networks, there are, however, a number of possible heterogeneous combinations, where nomadic and ad-hoc paradigms are used to interconnect totally unwired areas to more structured networks (such as a LAN or the Internet). Whilst the JMS specification has been extensively implemented and used in traditional distributed systems, adaptations for mobile environments have been proposed only recently. The challenges of porting JMS to mobile settings are considerable; however, in view of its widespread acceptance and use, there are considerable advantages in allowing the adaptation of existing applications to mobile environments and in allowing the interoperation of applications in the wired and wireless regions of a network. In [10], JMS was adapted to a nomadic mobile setting, where mobile hosts can be JMS clients and communicate through the JMS provider that, however, sits on a backbone network, providing reliability and persistence. The client prototype presented in [10] is very lightweight, due to the delegation of all the heavyweight functionality to the Middleware for Pervasive and ad-hoc Computing 122 provider on the wired network. However, this approach is somewhat limited in terms of widespread applicability and scalability as a consequence of the concentration of functionality in the wired portion of the network. If JMS is to be adapted to completely ad-hoc environments, where no fixed infrastructure is available, and where nodes change location and status very dynamically, more issues must be taken into consideration. Firstly, discovery needs to use a resilient but distributed model: in this extremely dynamic environment, static solutions are unacceptable. As discussed in Section 2, a JMS administrator defines queues and topics on the provider. Clients can then learn about them using the Java Naming and Directory Interface (JNDI). However, due to the way JNDI is designed, a JNDI node (or more than one) needs to be in reach in order to obtain a binding of a name to an address (i.e., knowing where a specific queue/topic is). In mobile ad-hoc environments, the discovery process cannot assume the existence of a fixed set of discovery servers that are always reachable, as this would not match the dynamicity of ad-hoc networks. Secondly, a JMS Provider, as suggested by the JMS specification, also needs to be reachable by each node in the network, in order to communicate. This assumes a very centralised architecture, which again does not match the requirements of a mobile ad-hoc setting, in which nodes may be moving and sparse: a more distributed and dynamic solution is needed. Persistence is, however, essential functionality in asynchronous communication environments as hosts are, by definition, connected at different times. In the following section, we will discuss our experience in designing and implementing JMS for mobile ad-hoc networks. 4. JMSFOR MOBILE ad-hoc NETWORKS 4.1 Adaptation of JMS for Mobile ad-hoc Networks Developing applications for mobile networks is yet more challenging: in addition to the same considerations as for infrastructured wireless environments, such as the limited device capabilities and power constraints, there are issues of rate of change of network connectivity, and the lack of a static routing infrastructure. Consequently, we now describe an initial attempt to adapt the JMS specification to target the particular requirements related to ad-hoc scenarios. As discussed in Section 3, a JMS application can use either the point to point and the publish-subscribe styles of messaging. Point to Point Model The point to point model is based on the concept of queues, that are used to enable asynchronous communication between the producer of a message and possible different consumers. In our solution, the location of queues is determined by a negotiation process that is application dependent. For example, let us suppose that it is possible to know a priori, or it is possible to determine dynamically, that a certain host is the receiver of the most part of messages sent to a particular queue. In this case, the optimum location of the queue may well be on this particular host. In general, it is worth noting that, according to the JMS specification and suggested design patterns, it is common and preferable for a client to have all of its messages delivered to a single queue. Queues are advertised periodically to the hosts that are within transmission range or that are reachable by means of the underlying synchronous communication protocol, if provided. It is important to note that, at the middleware level, it is logically irrelevant whether or not the network layer implements some form of ad-hoc routing (though considerably more efficient if it does); the middleware only considers information about which nodes are actively reachable at any point in time. The hosts that receive advertisement messages add entries to their JNDI registry. Each entry is characterized by a lease (a mechanism similar to that present in Jini [15]). A lease represents the time of validity of a particular entry. If a lease is not refreshed (i.e, its life is not extended), it can expire and, consequently, the entry is deleted from the registry. In other words, the host assumes that the queue will be unreachable from that point in time. This may be caused, for example, if a host storing the queue becomes unreachable. A host that initiates a discovery process will find the topics and the queues present in its connected portion of the network in a straightforward manner. In order to deliver a message to a host that is not currently in reach1 , we use an asynchronous epidemic routing protocol that will be discussed in detail in Section 4.2. If two hosts are in the same cloud (i.e., a connected path exists between them), but no synchronous protocol is available, the messages are sent using the epidemic protocol. In this case, the delivery latency will be low as a result of the rapidity of propagation of the infection in the connected cloud (see also the simulation results in Section 5). Given the existence of an epidemic protocol, the discovery mechanism consists of advertising the queues to the hosts that are currently unreachable using analogous mechanisms. Publish-Subscribe Model In the publish-subscribe model, some of the hosts are similarly designated to hold topics and store subscriptions, as before. Topics are advertised through the registry in the same way as are queues, and a client wishing to subscribe to a topic must register with the client holding the topic. When a client wishes to send a message to the topic list, it sends it to the topic holder (in the same way as it would send a message to a queue). The topic holder then forwards the message to all subscribers, using the synchronous protocol if possible, the epidemic protocol otherwise. It is worth noting that we use a single message with multiple recipients, instead of multiple messages with multiple recipients. When a message is delivered to one of the subscribers, this recipient is deleted from the list. In order to delete the other possible replicas, we employ acknowledgment messages (discussed in Section 4.4), returned in the same way as a normal message. We have also adapted the concepts of durable and non durable subscriptions for ad-hoc settings. In fixed platforms, durable subscriptions are maintained during the disconnections of the clients, whether these are intentional or are the result of failures. In traditional systems, while a durable subscriber is disconnected from the server, it is responsible for storing messages. When the durable subscriber reconnects, the server sends it all unexpired messages. The problem is that, in our scenario, disconnections are the norm 1 In theory, it is not possible to send a message to a peer that has never been reachable in the past, since there can be no entry present in the registry. However, to overcome this possible limitation, we provide a primitive through which information can be added to the registry without using the normal channels. 123 Middleware 2004 Companion rather than the exception. In other words, we cannot consider disconnections as failures. For these reasons, we adopt a slightly different semantics. With respect to durable subscriptions, if a subscriber becomes disconnected, notifications are not stored but are sent using the epidemic protocol rather than the synchronous protocol. In other words, durable notifications remain valid during the possible disconnections of the subscriber. On the other hand, if a non-durable subscriber becomes disconnected, its subscription is deleted; in other words, during disconnections, notifications are not sent using the epidemic protocol but exploit only the synchronous protocol. If the topic becomes accessible to this host again, it must make another subscription in order to receive the notifications. Unsubscription messages are delivered in the same way as are subscription messages. It is important to note that durable subscribers have explicitly to unsubscribe from a topic in order to stop the notification process; however, all durable subscriptions have a predefined expiration time in order to cope with the cases of subscribers that do not meet again because of their movements or failures. This feature is clearly provided to limit the number of the unnecessary messages sent around the network. 4.2 Message Delivery using Epidemic Routing In this section, we examine one possible mechanism that will allow the delivery of messages in a partially connected network. The mechanism we discuss is intended for the purposes of demonstrating feasibility; more efficient communication mechanisms for this environment are themselves complex, and are the subject of another paper [13]. The asynchronous message delivery described above is based on a typical pure epidemic-style routing protocol [16]. A message that needs to be sent is replicated on each host in reach. In this way, copies of the messages are quickly spread through connected networks, like an infection. If a host becomes connected to another cloud of mobile nodes, during its movement, the message spreads through this collection of hosts. Epidemic-style replication of data and messages has been exploited in the past in many fields starting with the distributed database systems area [2]. Within epidemic routing, each host maintains a buffer containing the messages that it has created and the replicas of the messages generated by the other hosts. To improve the performance, a hash-table indexes the content of the buffer. When two hosts connect, the host with the smaller identifier initiates a so-called anti-entropy session, sending a list containing the unique identifiers of the messages that it currently stores. The other host evaluates this list and sends back a list containing the identifiers it is storing that are not present in the other host, together with the messages that the other does not have. The host that has started the session receives the list and, in the same way, sends the messages that are not present in the other host. Should buffer overflow occur, messages are dropped. The reliability offered by this protocol is typically best effort, since there is no guarantee that a message will eventually be delivered to its recipient. Clearly, the delivery ratio of the protocol increases proportionally to the maximum allowed delay time and the buffer size in each host (interesting simulation results may be found in [16]). 4.3 Adaptation of the JMS Message Model In this section, we will analyse the aspects of our adaptation of the specification related to the so-called JMS Message Model [5]. According to this, JMS messages are characterised by some properties defined using the header field, which contains values that are used by both clients and providers for their delivery. The aspects discussed in the remainder of this section are valid for both models (point to point and publish-subscribe). A JMS message can be persistent or non-persistent. According to the JMS specification, persistent messages must be delivered with a higher degree of reliability than the nonpersistent ones. However, it is worth noting that it is not possible to ensure once-and-only-once reliability for persistent messages as defined in the specification, since, as we discussed in the previous subsection, the underlying epidemic protocol can guarantee only best-effort delivery. However, clients maintain a list of the identifiers of the recently received messages to avoid the delivery of message duplicates. In other words, we provide the applications with at-mostonce reliability for both types of messages. In order to implement different levels of reliability, EMMA treats persistent and non-persistent messages differently, during the execution of the anti-entropy epidemic protocol. Since the message buffer space is limited, persistent messages are preferentially replicated using the available free space. If this is insufficient and non-persistent messages are present in the buffer, these are replaced. Only the successful deliveries of the persistent messages are notified to the senders. According to the JMS specification, it is possible to assign a priority to each message. The messages with higher priorities are delivered in a preferential way. As discussed above, persistent messages are prioritised above the non-persistent ones. Further selection is based on their priorities. Messages with higher priorities are treated in a preferential way. In fact, if there is not enough space to replicate all the persistent messages, a mechanism based on priorities is used to delete and replicate non-persistent messages (and, if necessary, persistent messages). Messages are deleted from the buffers using the expiration time value that can be set by senders. This is a way to free space in the buffers (one preferentially deletes older messages in cases of conflict); to eliminate stale replicas in the system; and to limit the time for which destinations must hold message identifiers to dispose of duplicates. 4.4 Reliability and Acknowledgment Mechanisms As already discussed, at-most-once message delivery is the best that can be achieved in terms of delivery semantics in partially connected ad-hoc settings. However, it is possible to improve the reliability of the system with efficient acknowledgment mechanisms. EMMA provides a mechanism for failure notification to applications if the acknowledgment is not received within a given timeout (that can be configured by application developers). This mechanism is the one that distinguishes the delivery of persistent and non-persistent messages in our JMS implementation: the deliveries of the former are notified to the senders, whereas the latter are not. We use acknowledgment messages not only to inform senders about the successful delivery of messages but also to delete the replicas of the delivered messages that are still present in the network. Each host maintains a list of the messages Middleware for Pervasive and ad-hoc Computing 124 successfully delivered that is updated as part of the normal process of information exchange between the hosts. The lists are exchanged during the first steps of the anti-entropic epidemic protocol with a certain predefined frequency. In the case of messages with multiple recipients, a list of the actual recipients is also stored. When a host receives the list, it checks its message buffer and updates it according to the following rules: (1) if a message has a single recipient and it has been delivered, it is deleted from the buffer; (2) if a message has multiple recipients, the identifiers of the delivered hosts are deleted from the associated list of recipients. If the resulting length of the list of recipients is zero, the message is deleted from the buffer. These lists have, clearly, finite dimensions and are implemented as circular queues. This simple mechanism, together with the use of expiration timestamps, guarantees that the old acknowledgment notifications are deleted from the system after a limited period of time. In order to improve the reliability of EMMA, a design mechanism for intelligent replication of queues and topics based on the context information could be developed. However this is not yet part of the current architecture of EMMA. 5. IMPLEMENTATION AND PRELIMINARY EVALUATION We implemented a prototype of our platform using the J2ME Personal Profile. The size of the executable is about 250KB including the JMS 1.1 jar file; this is a perfectly acceptable figure given the available memory of the current mobile devices on the market. We tested our prototype on HP IPaq PDAs running Linux, interconnected with WaveLan, and on a number of laptops with the same network interface. We also evaluated the middleware platform using the OMNET++ discrete event simulator [17] in order to explore a range of mobile scenarios that incorporated a more realistic number of hosts than was achievable experimentally. More specifically, we assessed the performance of the system in terms of delivery ratio and average delay, varying the density of population and the buffer size, and using persistent and non-persistent messages with different priorities. The simulation results show that the EMMAs performance, in terms of delivery ratio and delay of persistent messages with higher priorities, is good. In general, it is evident that the delivery ratio is strongly related to the correct dimensioning of the buffers to the maximum acceptable delay. Moreover, the epidemic algorithms are able to guarantee a high delivery ratio if one evaluates performance over a time interval sufficient for the dissemination of the replicas of messages (i.e., the infection spreading) in a large portion of the ad-hoc network. One consequence of the dimensioning problem is that scalability may be seriously impacted in peer-to-peer middleware for mobile computing due to the resource poverty of the devices (limited memory to store temporarily messages) and the number of possible interconnections in ad-hoc settings. What is worse is that common forms of commercial and social organisation (six degrees of separation) mean that even modest TTL values on messages will lead to widespread flooding of epidemic messages. This problem arises because of the lack of intelligence in the epidemic protocol, and can be addressed by selecting carrier nodes for messages with greater care. The details of this process are, however, outside the scope of this paper (but may be found in [13]) and do not affect the foundation on which the EMMA middleware is based: the ability to deliver messages asynchronously. 6. CRITICAL VIEW OF THE STATE OF THE ART The design of middleware platforms for mobile computing requires researchers to answer new and fundamentally different questions; simply assuming the presence of wired portions of the network on which centralised functionality can reside is not generalisable. Thus, it is necessary to investigate novel design principles and to devise architectural patterns that differ from those traditionally exploited in the design of middleware for fixed systems. As an example, consider the recent cross-layering trend in ad-hoc networking [1]. This is a way of re-thinking software systems design, explicitly abandoning the classical forms of layering, since, although this separation of concerns afford portability, it does so at the expense of potential efficiency gains. We believe that it is possible to view our approach as an instance of cross-layering. In fact, we have added the epidemic network protocol at middleware level and, at the same time, we have used the existing synchronous network protocol if present both in delivering messages (traditional layering) and in informing the middleware about when messages may be delivered by revealing details of the forwarding tables (layer violation). For this reason, we prefer to consider them jointly as the communication layer of our platform together providing more efficient message delivery. Another interesting aspect is the exploitation of context and system information to improve the performance of mobile middleware platforms. Again, as a result of adopting a cross-layering methodology, we are able to build systems that gather information from the underlying operating system and communication components in order to allow for adaptation of behaviour. We can summarise this conceptual design approach by saying that middleware platforms must be not only context-aware (i.e., they should be able to extract and analyse information from the surrounding context) but also system-aware (i.e., they should be able to gather information from the software and hardware components of the mobile system). A number of middleware systems have been developed to support ad-hoc networking with the use of asynchronous communication (such as LIME, XMIDDLE, STEAM [11]). In particular, the STEAM platform is an interesting example of event-based middleware for ad-hoc networks, providing location-aware message delivery and an effective solution for event filtering. A discussion of JMS, and its mobile realisation, has already been conducted in Sections 4 and 2. The Swiss company Softwired has developed the first JMS middleware for mobile computing, called iBus Mobile [10]. The main components of this typically infrastructure-based architecture are the JMS provider, the so-called mobile JMS gateway, which is deployed on a fixed host and a lightweight JMS client library. The gateway is used for the communication between the application server and mobile hosts. The gateway is seen by the JMS provider as a normal JMS client. The JMS provider can be any JMS-enabled application server, such as BEA Weblogic. Pronto [19] is an example of mid125 Middleware 2004 Companion dleware system based on messaging that is specifically designed for mobile environments. The platform is composed of three classes of components: mobile clients implementing the JMS specification, gateways that control traffic, guaranteeing efficiency and possible user customizations using different plug-ins and JMS servers. Different configurations of these components are possible; with respect to mobile ad hoc networks applications, the most interesting is Serverless JMS. The aim of this configuration is to adapt JMS to a decentralized model. The publish-subscribe model exploits the efficiency and the scalability of the underlying IP multicast protocol. Unreliable and reliable message delivery services are provided: reliability is provided through a negative acknowledgment-based protocol. Pronto represents a good solution for infrastructure-based mobile networks but it does not adequately target ad-hoc settings, since mobile nodes rely on fixed servers for the exchange of messages. Other MOM implemented for mobile environments exist; however, they are usually straightforward extensions of existing middleware [8]. The only implementation of MOM specifically designed for mobile ad-hoc networks was developed at the University of Newcastle [18]. This work is again a JMS adaptation; the focus of that implementation is on group communication and the use of application level routing algorithms for topic delivery of messages. However, there are a number of differences in the focus of our work. The importance that we attribute to disconnections makes persistence a vital requirement for any middleware that needs to be used in mobile ad-hoc networks. The authors of [18] signal persistence as possible future work, not considering the fact that routing a message to a non-connected host will result in delivery failure. This is a remarkable limitation in mobile settings where unpredictable disconnections are the norm rather than the exception. 7. ROADMAP AND CONCLUSIONS Asynchronous communication is a useful communication paradigm for mobile ad-hoc networks, as hosts are allowed to come, go and pick up messages when convenient, also taking account of their resource availability (e.g., power, connectivity levels). In this paper we have described the state of the art in terms of MOM for mobile systems. We have also shown a proof of concept adaptation of JMS to the extreme scenario of partially connected mobile ad-hoc networks. We have described and discussed the characteristics and differences of our solution with respect to traditional JMS implementations and the existing adaptations for mobile settings. However, trade-offs between application-level routing and resource usage should also be investigated, as mobile devices are commonly power/resource scarce. A key limitation of this work is the poorly performing epidemic algorithm and an important advance in the practicability of this work requires an algorithm that better balances the needs of efficiency and message delivery probability. We are currently working on algorithms and protocols that, exploiting probabilistic and statistical techniques on the basis of small amounts of exchanged information, are able to improve considerably the efficiency in terms of resources (memory, bandwidth, etc) and the reliability of our middleware platform [13]. One futuristic research development, which may take these ideas of adaptation of messaging middleware for mobile environments further is the introduction of more mobility oriented communication extensions, for instance the support of geocast (i.e., the ability to send messages to specific geographical areas). 8. REFERENCES [1] M. Conti, G. Maselli, G. Turi, and S. Giordano. Cross-layering in Mobile ad-hoc Network Design. IEEE Computer, 37(2):48-51, February 2004. [2] A. Demers, D. Greene, C. Hauser, W. Irish, J. Larson, S. Shenker, H. Sturgis, D. Swinehart, and D. Terry. Epidemic Algorithms for Replicated Database Maintenance. In Sixth Symposium on Principles of Distributed Computing, pages 1-12, August 1987. [3] A. Doria, M. Uden, and D. P. Pandey. Providing connectivity to the Saami nomadic community. In Proceedings of the Second International Conference on Open Collaborative Design for Sustainable Innovation, December 2002. [4] M. Haahr, R. Cunningham, and V. Cahill. Supporting CORBA applications in a Mobile Environment. In 5th International Conference on Mobile Computing and Networking (MOBICOM99), pages 36-47. ACM, August 1999. [5] M. Hapner, R. Burridge, R. Sharma, J. Fialli, and K. Stout. Java Message Service Specification Version 1.1. Sun Microsystems, Inc., April 2002. http://java.sun.com/products/jms/. [6] J. Hart. WebSphere MQ: Connecting your applications without complex programming. IBM WebSphere Software White Papers, 2003. [7] S. Hayward and M. Pezzini. Marrying Middleware and Mobile Computing. Gartner Group Research Report, September 2001. [8] IBM. WebSphere MQ EveryPlace Version 2.0, November 2002. http://www-3.ibm.com/software/integration/wmqe/. [9] ITU. Connecting remote communities. Documents of the World Summit on Information Society, 2003. http://www.itu.int/osg/spu/wsis-themes. [10] S. Maffeis. Introducing Wireless JMS. Softwired AG, www.sofwired-inc.com, 2002. [11] C. Mascolo, L. Capra, and W. Emmerich. Middleware for Mobile Computing. In E. Gregori, G. Anastasi, and S. Basagni, editors, Advanced Lectures on Networking, volume 2497 of Lecture Notes in Computer Science, pages 20-58. Springer Verlag, 2002. [12] Microsoft. Microsoft Message Queuing (MSMQ) Version 2.0 Documentation. [13] M. Musolesi, S. Hailes, and C. Mascolo. Adaptive routing for intermittently connected mobile ad-hoc networks. Technical report, UCL-CS Research Note, July 2004. Submitted for Publication. [14] Sun Microsystems. Java Naming and Directory Interface (JNDI) Documentation Version 1.2. 2003. http://java.sun.com/products/jndi/. [15] Sun Microsystems. Jini Specification Version 2.0, 2003. http://java.sun.com/products/jini/. [16] A. Vahdat and D. Becker. Epidemic routing for Partially Connected ad-hoc Networks. Technical Report CS-2000-06, Department of Computer Science, Duke University, 2000. [17] A. Vargas. The OMNeT++ discrete event simulation system. In Proceedings of the European Simulation Multiconference (ESM2001), Prague, June 2001. [18] E. Vollset, D. Ingham, and P. Ezhilchelvan. JMS on Mobile ad-hoc Networks. In Personal Wireless Communications (PWC), pages 40-52, Venice, September 2003. [19] E. Yoneki and J. Bacon. Pronto: Mobilegateway with publish-subscribe paradigm over wireless network. Technical Report 559, University of Cambridge, Computer Laboratory, February 2003. Middleware for Pervasive and ad-hoc Computing 126",
    "original_translation": "Adaptando Middleware de Mensajería Asincrónica a Redes Ad-hoc Mirco Musolesi Dept. Las características de los entornos móviles, con la posibilidad de desconexiones frecuentes y ancho de banda fluctuante, han obligado a replantear el middleware tradicional. En particular, los paradigmas de comunicación síncrona a menudo empleados en middleware estándar no parecen ser particularmente adecuados para entornos ad-hoc, en los que ni siquiera se puede asumir la disponibilidad intermitente de una red troncal. En cambio, la comunicación asincrónica parece ser un paradigma generalmente más adecuado para este tipo de entornos. Se ha desarrollado y utilizado middleware orientado a mensajes para sistemas tradicionales con el fin de proporcionar un paradigma de comunicación asíncrona para sistemas distribuidos, y, recientemente, también para algunos sistemas específicos de computación móvil. En este artículo, presentamos nuestra experiencia en el diseño, implementación y evaluación de EMMA (Middleware de Mensajería Epidémica para redes ad-hoc), una adaptación del Servicio de Mensajes Java (JMS) para entornos móviles ad-hoc. Discutimos en detalle los desafíos de diseño y algunas posibles soluciones, mostrando un ejemplo concreto de la viabilidad y adecuación de la aplicación del paradigma asíncrono en este contexto y delineando un plan de investigación para los próximos años. Categorías y Descriptores de Asignaturas C.2.4 [Redes de Computadoras-Comunicación]: Sistemas Distribuidos-Aplicaciones Distribuidas; C.2.1 [Arquitectura y Diseño de Redes]: Comunicación Inalámbrica Términos Generales DISEÑO, ALGORITMOS 1. INTRODUCCIÓN Con la creciente popularidad de los dispositivos móviles y su amplia adopción, existe una clara necesidad de permitir el desarrollo de un amplio espectro de aplicaciones que operen de manera efectiva en dicho entorno. Lamentablemente, esto está lejos de ser simple: los dispositivos móviles son cada vez más heterogéneos en cuanto a capacidades de procesamiento, tamaño de memoria, capacidad de batería e interfaces de red. Cada una de estas configuraciones tiene características sustancialmente diferentes que son estáticamente distintas, por ejemplo, hay una gran diferencia en la capacidad entre un mote de Berkeley y un portátil equipado con 802.11g, y que varían dinámicamente, como en situaciones de ancho de banda fluctuante y conectividad intermitente. Los entornos móviles ad hoc tienen un elemento adicional de complejidad en que son completamente descentralizados. Para poder desarrollar aplicaciones para entornos tan complejos, es esencial contar con una forma adecuada de middleware si se busca lograr un desarrollo rentable. En este artículo, examinamos uno de los aspectos fundamentales de middleware para entornos móviles ad-hoc: el de los primitivos de comunicación. Tradicionalmente, los primitivos de middleware más utilizados para la comunicación asumen la presencia simultánea de ambos puntos finales en una red, ya que la estabilidad y la ubicuidad de la infraestructura de redes no es una suposición irrazonable para la mayoría de los entornos cableados. En otras palabras, la mayoría de los paradigmas de comunicación son síncronos: middleware orientado a objetos como CORBA y Java RMI son ejemplos típicos de middleware basado en comunicación síncrona. En los últimos años, ha habido un creciente interés en plataformas basadas en paradigmas de comunicación asincrónica, como los sistemas de publicación-suscripción: estos han sido explotados con mucho éxito donde existe asincronía a nivel de aplicación. De acuerdo con un informe de mercado de Gartner [7]: Dada la popularidad, escalabilidad, flexibilidad y afinidad con arquitecturas móviles e inalámbricas de los middlewares orientados a mensajes (MOM), para el año 2004, es probable que MOM se convierta en la forma dominante de middleware de comunicación para vincular aplicaciones móviles y empresariales (probabilidad del 0.7)... Además, en sistemas ad-hoc móviles, la probabilidad de fragmentación de la red significa que la comunicación síncrona puede resultar impracticable en cualquier caso, lo que da lugar a situaciones en las que el tráfico asincrónico tolerante a retrasos es la única forma de tráfico que podría ser admitida. El middleware para entornos ad-hoc móviles debe, por lo tanto, admitir primitivas de comunicación semi-síncronas o completamente asíncronas si se quiere evitar limitaciones sustanciales en su utilidad. Además del desafío intelectual que implica apoyar este modelo, este trabajo también es interesante porque existen varios ámbitos de aplicación práctica al permitir la comunicación entre comunidades en áreas subdesarrolladas del mundo. Por lo tanto, por ejemplo, proyectos que se han llevado a cabo para ayudar a poblaciones que viven en lugares remotos del mundo como Laponia o en áreas pobres que carecen de infraestructura de conectividad fija. Ha habido intentos de proporcionar middleware móvil con estas propiedades, incluyendo STEAM, LIME, XMIDDLE, Bayou (consulte [11] para una revisión más completa del middleware móvil). Estos modelos difieren considerablemente de los middleware tradicionales existentes en cuanto a los primitivos proporcionados. Además, algunos de ellos fallan en proporcionar una solución para los verdaderos escenarios ad-hoc. Si el éxito proyectado de MOM se convierte en algo parecido a la realidad, habrá muchos programadores con experiencia en ello. La solución ideal al problema del middleware para sistemas ad-hoc es, entonces, permitir a los programadores utilizar los mismos paradigmas y modelos presentados por formas comunes de MOM y asegurar que estos paradigmas sean soportables dentro del entorno móvil. Este enfoque tiene claras ventajas al permitir que las aplicaciones desarrolladas en plataformas de middleware estándar se desplieguen fácilmente en dispositivos móviles. De hecho, algunas investigaciones ya han llevado a la adaptación de plataformas de middleware tradicionales a entornos móviles, principalmente para proporcionar integración entre dispositivos móviles y redes fijas existentes en un entorno nómada (es decir, mixto) [4]. En lo que respecta al middleware orientado a mensajes, las implementaciones actuales, sin embargo, asumen la existencia de una red troncal a la que los hosts móviles se conectan de vez en cuando mientras están en itinerancia [10], o asumen que los nodos siempre son de alguna manera accesibles a través de un camino [18]. No se ha intentado ninguna adaptación a escenarios heterogéneos o completamente ad hoc, con desconexiones frecuentes y nubes periódicamente aisladas de hosts. En el resto de este documento describimos un intento inicial de adaptar middleware orientado a mensajes para que se ajuste a dispositivos móviles y, más específicamente, a redes móviles ad-hoc. En nuestro caso, elegimos examinar JMS, como uno de los sistemas MOM más conocidos. En la última parte de este documento, exploramos las limitaciones de nuestros resultados y describimos los planes que tenemos para llevar a cabo el trabajo más adelante. Los sistemas de middleware orientados a mensajes y el Servicio de Mensajes de Java (JMS) admiten la comunicación entre componentes distribuidos a través del paso de mensajes: el remitente envía un mensaje a colas identificadas, que generalmente residen en un servidor. Un receptor recupera el mensaje de la cola en un momento diferente y puede confirmar la respuesta utilizando el mismo mecanismo asíncrono. La middleware orientada a mensajes soporta la comunicación asíncrona de una manera muy natural, logrando el desacoplamiento de emisores y receptores. Un remitente puede continuar procesando tan pronto como el middleware haya aceptado el mensaje; eventualmente, el receptor enviará un mensaje de confirmación y el remitente podrá recogerlo en un momento conveniente. Sin embargo, dado la forma en que están implementados, estos sistemas de middleware suelen requerir dispositivos con recursos abundantes, especialmente en términos de memoria y espacio en disco, donde se almacenan colas persistentes de mensajes que han sido recibidos pero aún no procesados. Sun Java Message Service [5], IBM WebSphere MQ [6], Microsoft MSMQ [12] son ejemplos de middleware orientado a mensajes muy exitosos para sistemas distribuidos tradicionales. El Servicio de Mensajería de Java (JMS) es una colección de interfaces para la comunicación asincrónica entre componentes distribuidos. Proporciona una forma común para que los programas de Java creen, envíen y reciban mensajes. Los usuarios de JMS suelen ser referidos como clientes. La especificación JMS define además a los proveedores como los componentes encargados de implementar el sistema de mensajería y proporcionar la funcionalidad administrativa y de control (es decir, persistencia y confiabilidad) requerida por el sistema. Los clientes pueden enviar y recibir mensajes, de forma asincrónica, a través del proveedor JMS, que se encarga de la entrega y, posiblemente, de la persistencia de los mensajes. Hay dos tipos de comunicación admitidos: modelos punto a punto y de publicación-suscripción. En el modelo punto a punto, los hosts envían mensajes a colas. Los receptores pueden ser registrados con algunas colas específicas, y pueden recuperar los mensajes de forma asíncrona para luego confirmar su recepción. El modelo de publicación-suscripción se basa en el uso de temas a los que los clientes pueden suscribirse. Los mensajes son enviados a los temas por otros clientes y luego son recibidos de forma asíncrona por todos los clientes suscritos. Los clientes aprenden sobre los temas y colas disponibles a través de la Interfaz de Nombres y Directorios de Java (JNDI) [14]. Las colas y los temas son creados por un administrador en el proveedor y se registran con la interfaz JNDI para su búsqueda. En la siguiente sección, presentamos los desafíos de las redes móviles y mostramos cómo JMS puede adaptarse para cumplir con estos requisitos. 3. JMS PARA COMPUTACIÓN MÓVIL Las redes móviles varían mucho en sus características, desde redes nómadas en las que los nodos se desplazan mientras están desconectados, hasta redes ad-hoc en las que los nodos se mueven libremente y no hay infraestructura. Las redes móviles ad-hoc son más comúnmente aplicables en situaciones donde la supervivencia y la capacidad de despliegue instantáneo son clave: especialmente en aplicaciones militares y de ayuda en casos de desastre. Entre estos dos tipos de redes móviles, sin embargo, existen una serie de posibles combinaciones heterogéneas, donde se utilizan paradigmas nómadas y ad-hoc para interconectar áreas totalmente inalámbricas con redes más estructuradas (como una LAN o Internet). Si bien la especificación JMS ha sido ampliamente implementada y utilizada en sistemas distribuidos tradicionales, las adaptaciones para entornos móviles han sido propuestas recientemente. Los desafíos de adaptar JMS a entornos móviles son considerables; sin embargo, dada su amplia aceptación y uso, existen ventajas considerables al permitir la adaptación de aplicaciones existentes a entornos móviles y al permitir la interoperabilidad de aplicaciones en las regiones cableadas e inalámbricas de una red. En [10], JMS se adaptó a un entorno móvil nómada, donde los hosts móviles pueden ser clientes de JMS y comunicarse a través del proveedor de JMS que, sin embargo, se encuentra en una red troncal, proporcionando fiabilidad y persistencia. El prototipo del cliente presentado en [10] es muy ligero, debido a la delegación de toda la funcionalidad pesada al proveedor Middleware para Computación Pervasive y ad-hoc 122 en la red cableada. Sin embargo, este enfoque es algo limitado en términos de aplicabilidad generalizada y escalabilidad como consecuencia de la concentración de funcionalidad en la parte cableada de la red. Si se quiere adaptar JMS a entornos completamente ad hoc, donde no haya infraestructura fija disponible y donde los nodos cambien de ubicación y estado de forma muy dinámica, se deben tener en cuenta más problemas. En primer lugar, el descubrimiento necesita utilizar un modelo resiliente pero distribuido: en este entorno extremadamente dinámico, las soluciones estáticas son inaceptables. Como se discute en la Sección 2, un administrador de JMS define colas y temas en el proveedor. Los clientes pueden entonces aprender sobre ellos utilizando la Interfaz de Nombres y Directorios de Java (JNDI). Sin embargo, debido a la forma en que está diseñado JNDI, es necesario que un nodo de JNDI (o más de uno) esté al alcance para obtener una vinculación de un nombre a una dirección (es decir, saber dónde se encuentra una cola o un tema específico). En entornos móviles ad-hoc, el proceso de descubrimiento no puede asumir la existencia de un conjunto fijo de servidores de descubrimiento que siempre sean accesibles, ya que esto no coincidiría con la dinámica de las redes ad-hoc. En segundo lugar, un Proveedor de JMS, como sugiere la especificación de JMS, también debe ser accesible para cada nodo en la red, para poder comunicarse. Esto asume una arquitectura muy centralizada, que nuevamente no coincide con los requisitos de un entorno ad-hoc móvil, en el que los nodos pueden estar en movimiento y dispersos: se necesita una solución más distribuida y dinámica. La persistencia es, sin embargo, una funcionalidad esencial en entornos de comunicación asincrónica, ya que los hosts están, por definición, conectados en momentos diferentes. En la siguiente sección, discutiremos nuestra experiencia en el diseño e implementación de JMS para redes móviles ad-hoc. 4. El desarrollo de aplicaciones para redes móviles es aún más desafiante: además de las mismas consideraciones que para entornos inalámbricos infraestructurados, como las limitadas capacidades de los dispositivos y las restricciones de energía, existen problemas relacionados con la velocidad de cambio de la conectividad de la red y la falta de una infraestructura de enrutamiento estática. En consecuencia, ahora describimos un intento inicial de adaptar la especificación JMS para satisfacer los requisitos particulares relacionados con escenarios ad-hoc. Como se discute en la Sección 3, una aplicación JMS puede utilizar tanto el estilo de mensajería punto a punto como el de publicación-suscripción. Modelo de punto a punto. El modelo de punto a punto se basa en el concepto de colas, que se utilizan para habilitar la comunicación asincrónica entre el productor de un mensaje y posibles consumidores diferentes. En nuestra solución, la ubicación de las colas se determina mediante un proceso de negociación que depende de la aplicación. Por ejemplo, supongamos que es posible saber a priori, o es posible determinar dinámicamente, que cierto host es el receptor de la mayor parte de los mensajes enviados a una cola particular. En este caso, la ubicación óptima de la cola bien podría estar en este host en particular. En general, vale la pena señalar que, según la especificación de JMS y los patrones de diseño sugeridos, es común y preferible que un cliente tenga todos sus mensajes entregados a una sola cola. Las colas se anuncian periódicamente a los anfitriones que se encuentran dentro del rango de transmisión o que son alcanzables mediante el protocolo de comunicación síncrona subyacente, si se proporciona. Es importante tener en cuenta que, a nivel de middleware, es lógicamente irrelevante si la capa de red implementa alguna forma de enrutamiento ad-hoc (aunque considerablemente más eficiente si lo hace); el middleware solo considera información sobre qué nodos son accesibles activamente en cualquier momento. Los hosts que reciben mensajes publicitarios agregan entradas a su registro JNDI. Cada entrada se caracteriza por un arrendamiento (un mecanismo similar al presente en Jini [15]). Un contrato de arrendamiento representa el tiempo de validez de una entrada particular. Si un arrendamiento no se renueva (es decir, su vida no se extiende), puede vencer y, en consecuencia, la entrada se elimina del registro. En otras palabras, el anfitrión asume que la cola será inaccesible a partir de ese momento. Esto puede ser causado, por ejemplo, si un host que almacena la cola se vuelve inaccesible. Un host que inicia un proceso de descubrimiento encontrará los temas y las colas presentes en su porción conectada de la red de manera directa. Para enviar un mensaje a un anfitrión que actualmente no está al alcance, utilizamos un protocolo de enrutamiento de epidemia asíncrono que se discutirá en detalle en la Sección 4.2. Si dos hosts están en la misma nube (es decir, existe un camino conectado entre ellos), pero no hay disponible un protocolo síncrono, los mensajes se envían utilizando el protocolo epidémico. En este caso, la latencia de entrega será baja como resultado de la rapidez de propagación de la infección en la nube conectada (ver también los resultados de la simulación en la Sección 5). Dado la existencia de un protocolo de epidemia, el mecanismo de descubrimiento consiste en publicitar las colas a los hosts que actualmente son inalcanzables utilizando mecanismos análogos. En el modelo de publicación-suscripción, algunos de los hosts son designados de manera similar para mantener temas y almacenar suscripciones, como antes. Los temas se anuncian a través del registro de la misma manera que las colas, y un cliente que desee suscribirse a un tema debe registrarse con el cliente que tiene el tema. Cuando un cliente desea enviar un mensaje a la lista de temas, lo envía al titular del tema (de la misma manera que enviaría un mensaje a una cola). El titular del tema luego reenvía el mensaje a todos los suscriptores, utilizando el protocolo síncrono si es posible, de lo contrario el protocolo epidémico. Vale la pena señalar que utilizamos un único mensaje con múltiples destinatarios, en lugar de múltiples mensajes con múltiples destinatarios. Cuando un mensaje es entregado a uno de los suscriptores, este destinatario es eliminado de la lista. Para eliminar las posibles réplicas restantes, empleamos mensajes de acuse de recibo (discutidos en la Sección 4.4), devueltos de la misma manera que un mensaje normal. También hemos adaptado los conceptos de suscripciones duraderas y no duraderas para entornos ad-hoc. En las plataformas fijas, las suscripciones duraderas se mantienen durante las desconexiones de los clientes, ya sean intencionales o resultado de fallas. En los sistemas tradicionales, cuando un suscriptor duradero se desconecta del servidor, es responsable de almacenar los mensajes. Cuando el suscriptor duradero se reconecta, el servidor le envía todos los mensajes no caducados. El problema es que, en nuestro escenario, las desconexiones son la norma. En teoría, no es posible enviar un mensaje a un par que nunca ha sido alcanzable en el pasado, ya que no puede haber ninguna entrada presente en el registro. Sin embargo, para superar esta posible limitación, proporcionamos un mecanismo a través del cual la información puede ser añadida al registro sin utilizar los canales normales. 123 Middleware 2004 Companion en lugar de la excepción. En otras palabras, no podemos considerar las desconexiones como fallos. Por estas razones, adoptamos una semántica ligeramente diferente. En lo que respecta a las suscripciones duraderas, si un suscriptor se desconecta, las notificaciones no se almacenan, sino que se envían utilizando el protocolo epidémico en lugar del protocolo síncrono. En otras palabras, las notificaciones duraderas siguen siendo válidas durante las posibles desconexiones del suscriptor. Por otro lado, si un suscriptor no duradero se desconecta, su suscripción se elimina; en otras palabras, durante las desconexiones, las notificaciones no se envían utilizando el protocolo epidémico, sino que solo se aprovecha el protocolo síncrono. Si el tema vuelve a estar accesible para este anfitrión, deberá realizar otra suscripción para recibir las notificaciones. Los mensajes de baja se entregan de la misma manera que los mensajes de suscripción. Es importante tener en cuenta que los suscriptores duraderos deben darse de baja explícitamente de un tema para detener el proceso de notificación; sin embargo, todas las suscripciones duraderas tienen un tiempo de expiración predefinido para hacer frente a los casos de suscriptores que no vuelven a conectarse debido a sus movimientos o fallos. Esta característica se proporciona claramente para limitar el número de mensajes innecesarios enviados por la red. 4.2 Entrega de mensajes utilizando enrutamiento epidémico En esta sección, examinamos un mecanismo posible que permitirá la entrega de mensajes en una red parcialmente conectada. El mecanismo que discutimos está destinado a demostrar viabilidad; los mecanismos de comunicación más eficientes para este entorno son complejos por sí mismos y son el tema de otro artículo [13]. La entrega de mensajes asincrónica descrita anteriormente se basa en un protocolo de enrutamiento de estilo epidémico puro típico [16]. Un mensaje que necesita ser enviado se replica en cada host al alcance. De esta manera, las copias de los mensajes se propagan rápidamente a través de redes conectadas, como una infección. Si un anfitrión se conecta a otra nube de nodos móviles durante su movimiento, el mensaje se propaga a través de esta colección de anfitriones. La replicación de datos y mensajes en estilo epidémico ha sido explotada en el pasado en muchos campos, comenzando por el área de sistemas de bases de datos distribuidas [2]. Dentro del enrutamiento epidémico, cada anfitrión mantiene un búfer que contiene los mensajes que ha creado y las réplicas de los mensajes generados por los otros anfitriones. Para mejorar el rendimiento, una tabla hash indexa el contenido del búfer. Cuando dos anfitriones se conectan, el anfitrión con el identificador más pequeño inicia una sesión de anti-entropía, enviando una lista que contiene los identificadores únicos de los mensajes que actualmente almacena. El otro anfitrión evalúa esta lista y envía de vuelta una lista que contiene los identificadores que está almacenando y que no están presentes en el otro anfitrión, junto con los mensajes que el otro no tiene. El anfitrión que ha iniciado la sesión recibe la lista y, de la misma manera, envía los mensajes que no están presentes en el otro anfitrión. En caso de producirse un desbordamiento de búfer, los mensajes se descartan. La fiabilidad ofrecida por este protocolo es generalmente de mejor esfuerzo, ya que no hay garantía de que un mensaje finalmente sea entregado a su destinatario. Claramente, la proporción de entrega del protocolo aumenta proporcionalmente al tiempo máximo de retraso permitido y al tamaño del búfer en cada host (pueden encontrarse resultados interesantes de simulación en [16]). 4.3 Adaptación del Modelo de Mensajes JMS En esta sección, analizaremos los aspectos de nuestra adaptación de la especificación relacionados con el llamado Modelo de Mensajes JMS [5]. Según esto, los mensajes JMS se caracterizan por algunas propiedades definidas utilizando el campo de encabezado, que contiene valores que son utilizados tanto por los clientes como por los proveedores para su entrega. Los aspectos discutidos en el resto de esta sección son válidos para ambos modelos (punto a punto y publicar-suscribir). Un mensaje JMS puede ser persistente o no persistente. Según la especificación de JMS, los mensajes persistentes deben entregarse con un grado de confiabilidad mayor que los no persistentes. Sin embargo, vale la pena señalar que no es posible garantizar la fiabilidad de una sola vez para mensajes persistentes según lo definido en la especificación, ya que, como discutimos en la subsección anterior, el protocolo epidémico subyacente solo puede garantizar la entrega de mejor esfuerzo. Sin embargo, los clientes mantienen una lista de los identificadores de los mensajes recibidos recientemente para evitar la entrega de mensajes duplicados. En otras palabras, proporcionamos a las aplicaciones una fiabilidad inmediata para ambos tipos de mensajes. Para implementar diferentes niveles de confiabilidad, EMMA trata de manera diferente los mensajes persistentes y no persistentes durante la ejecución del protocolo epidémico de anti-entropía. Dado que el espacio del búfer de mensajes es limitado, los mensajes persistentes se replican preferentemente utilizando el espacio libre disponible. Si esto es insuficiente y hay mensajes no persistentes presentes en el búfer, estos son reemplazados. Solo se notifican a los remitentes las entregas exitosas de los mensajes persistentes. Según la especificación de JMS, es posible asignar una prioridad a cada mensaje. Los mensajes con prioridades más altas se entregan de manera preferencial. Como se discutió anteriormente, los mensajes persistentes tienen prioridad sobre los no persistentes. La selección adicional se basa en sus prioridades. Los mensajes con prioridades más altas son tratados de manera preferencial. De hecho, si no hay suficiente espacio para replicar todos los mensajes persistentes, se utiliza un mecanismo basado en prioridades para eliminar y replicar los mensajes no persistentes (y, si es necesario, los mensajes persistentes). Los mensajes se eliminan de los buffers utilizando el valor de tiempo de expiración que puede ser establecido por los remitentes. Esta es una forma de liberar espacio en los búferes (se eliminan preferentemente los mensajes más antiguos en casos de conflicto); para eliminar réplicas obsoletas en el sistema; y para limitar el tiempo durante el cual los destinos deben mantener los identificadores de mensajes para desechar duplicados. Mecanismos de fiabilidad y de acuse de recibo Como ya se discutió, la entrega de mensajes como máximo una vez es lo mejor que se puede lograr en términos de semántica de entrega en entornos ad-hoc parcialmente conectados. Sin embargo, es posible mejorar la confiabilidad del sistema con mecanismos de acuse de recibo eficientes. EMMA proporciona un mecanismo de notificación de fallos a las aplicaciones si no se recibe el acuse de recibo dentro de un tiempo límite dado (que puede ser configurado por los desarrolladores de aplicaciones). Este mecanismo es el que distingue la entrega de mensajes persistentes y no persistentes en nuestra implementación de JMS: las entregas de los primeros son notificadas a los remitentes, mientras que los de los segundos no lo son. Utilizamos mensajes de acuse de recibo no solo para informar a los remitentes sobre la entrega exitosa de los mensajes, sino también para eliminar las réplicas de los mensajes entregados que aún están presentes en la red. Cada anfitrión mantiene una lista de los mensajes Middleware para la Computación Pervasiva y Ad-hoc 124 entregados con éxito que se actualiza como parte del proceso normal de intercambio de información entre los anfitriones. Las listas se intercambian durante los primeros pasos del protocolo de epidemia anti-entropía con una frecuencia predefinida. En el caso de mensajes con múltiples destinatarios, también se almacena una lista de los destinatarios reales. Cuando un anfitrión recibe la lista, verifica su búfer de mensajes y lo actualiza de acuerdo con las siguientes reglas: (1) si un mensaje tiene un único destinatario y ha sido entregado, se elimina del búfer; (2) si un mensaje tiene múltiples destinatarios, se eliminan los identificadores de los anfitriones a los que se ha entregado de la lista de destinatarios asociada. Si la longitud resultante de la lista de destinatarios es cero, el mensaje se elimina del búfer. Estas listas tienen, claramente, dimensiones finitas y se implementan como colas circulares. Este mecanismo simple, junto con el uso de marcas de tiempo de expiración, garantiza que las antiguas notificaciones de acuse de recibo sean eliminadas del sistema después de un período de tiempo limitado. Para mejorar la confiabilidad de EMMA, se podría desarrollar un mecanismo de diseño para la replicación inteligente de colas y temas basado en la información de contexto. Sin embargo, esto aún no forma parte de la arquitectura actual de EMMA. 5. IMPLEMENTACIÓN Y EVALUACIÓN PRELIMINAR Implementamos un prototipo de nuestra plataforma utilizando el Perfil Personal J2ME. El tamaño del ejecutable es de aproximadamente 250KB, incluido el archivo jar de JMS 1.1; esta es una cifra perfectamente aceptable dada la memoria disponible de los dispositivos móviles actuales en el mercado. Probamos nuestro prototipo en PDAs HP iPaq con Linux, interconectados con WaveLan, y en varios laptops con la misma interfaz de red. También evaluamos la plataforma de middleware utilizando el simulador de eventos discretos OMNET++ [17] para explorar una variedad de escenarios móviles que incorporaban un número más realista de hosts que el que se podía lograr experimentalmente. Más específicamente, evaluamos el rendimiento del sistema en términos de ratio de entrega y retraso promedio, variando la densidad de población y el tamaño del búfer, y utilizando mensajes persistentes y no persistentes con diferentes prioridades. Los resultados de la simulación muestran que el rendimiento de EMMAs, en términos de ratio de entrega y retraso de mensajes persistentes con prioridades más altas, es bueno. En general, es evidente que la proporción de entrega está fuertemente relacionada con el dimensionamiento correcto de los búferes para el retraso máximo aceptable. Además, los algoritmos epidémicos son capaces de garantizar una alta tasa de entrega si se evalúa el rendimiento durante un intervalo de tiempo suficiente para la difusión de las réplicas de los mensajes (es decir, la propagación de la infección) en una gran parte de la red ad-hoc. Una consecuencia del problema de dimensionamiento es que la escalabilidad puede verse seriamente afectada en middleware peer-to-peer para computación móvil debido a la escasez de recursos de los dispositivos (memoria limitada para almacenar temporalmente mensajes) y al número de posibles interconexiones en entornos ad-hoc. Lo peor es que las formas comunes de organización comercial y social (seis grados de separación) significan que incluso valores modestos de TTL en los mensajes provocarán una difusión generalizada de mensajes epidémicos. Este problema surge debido a la falta de inteligencia en el protocolo de la epidemia, y puede ser abordado seleccionando nodos portadores para los mensajes con mayor cuidado. Sin embargo, los detalles de este proceso están fuera del alcance de este documento (pero pueden encontrarse en [13]) y no afectan la base en la que se basa el middleware EMMA: la capacidad de entregar mensajes de forma asincrónica. 6. VISIÓN CRÍTICA DEL ESTADO DEL ARTE El diseño de plataformas de middleware para la computación móvil requiere que los investigadores respondan a preguntas nuevas y fundamentalmente diferentes; simplemente asumir la presencia de porciones cableadas de la red en las que pueda residir la funcionalidad centralizada no es generalizable. Por lo tanto, es necesario investigar nuevos principios de diseño y idear patrones arquitectónicos que difieran de los tradicionalmente utilizados en el diseño de middleware para sistemas fijos. Como ejemplo, considera la reciente tendencia de superposición de capas en redes ad-hoc [1]. Esta es una forma de replantear el diseño de sistemas de software, abandonando explícitamente las formas clásicas de estratificación, ya que, aunque esta separación de preocupaciones permite la portabilidad, lo hace a expensas de posibles ganancias de eficiencia. Creemos que es posible ver nuestro enfoque como una instancia de superposición de capas. De hecho, hemos añadido el protocolo de red epidémica a nivel de middleware y, al mismo tiempo, hemos utilizado el protocolo de red síncrono existente si está presente tanto en la entrega de mensajes (capas tradicionales) como en informar al middleware sobre cuándo pueden entregarse los mensajes revelando detalles de las tablas de reenvío (violación de capas). Por esta razón, preferimos considerarlos conjuntamente como la capa de comunicación de nuestra plataforma, proporcionando juntos una entrega de mensajes más eficiente. Otro aspecto interesante es la explotación del contexto y la información del sistema para mejorar el rendimiento de las plataformas de middleware móvil. Una vez más, como resultado de adoptar una metodología de capas cruzadas, podemos construir sistemas que recopilan información del sistema operativo subyacente y los componentes de comunicación para permitir la adaptación del comportamiento. Podemos resumir este enfoque de diseño conceptual diciendo que las plataformas de middleware deben ser no solo conscientes del contexto (es decir, deben ser capaces de extraer y analizar información del contexto circundante) sino también conscientes del sistema (es decir, deben ser capaces de recopilar información de los componentes de software y hardware del sistema móvil). Se han desarrollado varios sistemas de middleware para admitir redes ad hoc con el uso de comunicación asíncrona (como LIME, XMIDDLE, STEAM [11]). En particular, la plataforma STEAM es un ejemplo interesante de middleware basado en eventos para redes ad hoc, que proporciona entrega de mensajes con conciencia de ubicación y una solución efectiva para el filtrado de eventos. Una discusión sobre JMS, y su realización móvil, ya ha sido realizada en las Secciones 4 y 2. La empresa suiza Softwired ha desarrollado el primer middleware JMS para computación móvil, llamado iBus Mobile [10]. Los componentes principales de esta arquitectura típicamente basada en infraestructura son el proveedor de JMS, la llamada puerta de enlace móvil de JMS, que se despliega en un host fijo y una biblioteca de cliente JMS ligera. El gateway se utiliza para la comunicación entre el servidor de aplicaciones y los dispositivos móviles. El proveedor JMS ve la pasarela como un cliente JMS normal. El proveedor JMS puede ser cualquier servidor de aplicaciones habilitado para JMS, como BEA Weblogic. Pronto [19] es un ejemplo de un sistema de middleware basado en mensajería, diseñado específicamente para entornos móviles. La plataforma está compuesta por tres clases de componentes: clientes móviles que implementan la especificación JMS, pasarelas que controlan el tráfico, garantizando eficiencia y posibles personalizaciones de usuario utilizando diferentes complementos y servidores JMS. Diferentes configuraciones de estos componentes son posibles; con respecto a las aplicaciones de redes móviles ad hoc, la más interesante es Serverless JMS. El objetivo de esta configuración es adaptar JMS a un modelo descentralizado. El modelo de publicación-suscripción explota la eficiencia y la escalabilidad del protocolo de multidifusión IP subyacente. Se proporcionan servicios de entrega de mensajes poco confiables y confiables: la confiabilidad se logra a través de un protocolo basado en acuse de recibo negativo. Pronto representa una buena solución para redes móviles basadas en infraestructura, pero no se dirige adecuadamente a entornos ad-hoc, ya que los nodos móviles dependen de servidores fijos para el intercambio de mensajes. Existen otras MOM implementadas para entornos móviles; sin embargo, suelen ser extensiones sencillas de middleware existente [8]. La única implementación de MOM específicamente diseñada para redes móviles ad-hoc fue desarrollada en la Universidad de Newcastle [18]. Este trabajo es nuevamente una adaptación de JMS; el enfoque de esa implementación se centra en la comunicación de grupo y el uso de algoritmos de enrutamiento a nivel de aplicación para la entrega de mensajes por tema. Sin embargo, hay una serie de diferencias en el enfoque de nuestro trabajo. La importancia que atribuimos a las desconexiones hace que la persistencia sea un requisito vital para cualquier middleware que necesite ser utilizado en redes móviles ad-hoc. Los autores de [18] señalan la persistencia como un posible trabajo futuro, sin considerar el hecho de que enrutar un mensaje a un host no conectado resultará en un fallo de entrega. Esta es una limitación notable en entornos móviles donde las desconexiones impredecibles son la norma en lugar de la excepción. 7. MAPA Y CONCLUSIONES La comunicación asincrónica es un paradigma de comunicación útil para las redes móviles ad-hoc, ya que permite a los hosts llegar, irse y recoger mensajes cuando sea conveniente, teniendo en cuenta también la disponibilidad de sus recursos (por ejemplo, energía, niveles de conectividad). En este artículo hemos descrito el estado del arte en términos de MOM para sistemas móviles. También hemos demostrado una adaptación de prueba de concepto de JMS al escenario extremo de redes móviles ad-hoc parcialmente conectadas. Hemos descrito y discutido las características y diferencias de nuestra solución con respecto a las implementaciones tradicionales de JMS y las adaptaciones existentes para entornos móviles. Sin embargo, también se deben investigar los compromisos entre el enrutamiento a nivel de aplicación y el uso de recursos, ya que los dispositivos móviles suelen tener escasez de energía/recursos. Una limitación clave de este trabajo es el algoritmo epidémico que tiene un rendimiento deficiente y un avance importante en la practicabilidad de este trabajo requiere un algoritmo que equilibre mejor las necesidades de eficiencia y probabilidad de entrega de mensajes. Actualmente estamos trabajando en algoritmos y protocolos que, aprovechando técnicas probabilísticas y estadísticas sobre la base de pequeñas cantidades de información intercambiada, son capaces de mejorar considerablemente la eficiencia en términos de recursos (memoria, ancho de banda, etc.) y la confiabilidad de nuestra plataforma de middleware [13]. Un desarrollo de investigación futurista, que podría llevar estas ideas de adaptación de middleware de mensajería para entornos móviles más allá, es la introducción de extensiones de comunicación más orientadas a la movilidad, como el soporte de geocast (es decir, la capacidad de enviar mensajes a áreas geográficas específicas). REFERENCIAS [1] M. Conti, G. Maselli, G. Turi y S. Giordano. Diseño de redes móviles ad-hoc con interconexión de capas. IEEE Computer, 37(2):48-51, febrero de 2004. [2] A. Demers, D. Greene, C. Hauser, W. Irish, J. Larson, S. Shenker, H. Sturgis, D. Swinehart y D. Terry. Algoritmos de epidemia para el mantenimiento de bases de datos replicadas. En el Sexto Simposio sobre Principios de Computación Distribuida, páginas 1-12, agosto de 1987. [3] A. Doria, M. Uden y D. P. Pandey. Proporcionando conectividad a la comunidad nómada Saami. En Actas de la Segunda Conferencia Internacional sobre Diseño Colaborativo Abierto para la Innovación Sostenible, diciembre de 2002. [4] M. Haahr, R. Cunningham y V. Cahill. Aplicaciones CORBA en un entorno móvil. En la 5ª Conferencia Internacional sobre Computación y Redes Móviles (MOBICOM99), páginas 36-47. ACM, agosto de 1999. [5] M. Hapner, R. Burridge, R. Sharma, J. Fialli y K. Stout. Especificación del Servicio de Mensajes Java Versión 1.1. Sun Microsystems, Inc., abril de 2002. http://java.sun.com/products/jms/. [6] J. Hart. WebSphere MQ: Conectando sus aplicaciones sin programación compleja. IBM WebSphere Software White Papers, 2003. [7] S. Hayward y M. Pezzini. Casando Middleware y Computación Móvil. Informe de investigación del Grupo Gartner, septiembre de 2001. [8] IBM. WebSphere MQ EveryPlace Versión 2.0, noviembre de 2002. http://www-3.ibm.com/software/integration/wmqe/. [9] UIT. Conectando comunidades remotas. Documentos de la Cumbre Mundial sobre la Sociedad de la Información, 2003. http://www.itu.int/osg/spu/wsis-themes. [10] S. Maffeis. Presentando JMS inalámbrico. Softwired AG, www.sofwired-inc.com, 2002. [11] C. Mascolo, L. Capra y W. Emmerich. Middleware para Computación Móvil. En E. Gregori, G. Anastasi y S. Basagni, editores, Conferencias Avanzadas sobre Redes, volumen 2497 de las Notas de Conferencias en Ciencias de la Computación, páginas 20-58. Springer Verlag, 2002. [12] Microsoft. \n\nSpringer Verlag, 2002. [12] Microsoft. Documentación de Microsoft Message Queuing (MSMQ) Versión 2.0. [13] M. Musolesi, S. Hailes y C. Mascolo. Enrutamiento adaptativo para redes ad-hoc móviles intermitentemente conectadas. Informe técnico, Nota de Investigación UCL-CS, julio de 2004. Enviado para su publicación. [14] Sun Microsystems. Documentación de Java Naming and Directory Interface (JNDI) Versión 1.2. 2003. http://java.sun.com/products/jndi/. [15] Sun Microsystems. Especificación de Jini Versión 2.0, 2003. http://java.sun.com/products/jini/. [16] A. Vahdat y D. Becker. Enrutamiento epidémico para redes ad-hoc parcialmente conectadas. Informe técnico CS-2000-06, Departamento de Ciencias de la Computación, Universidad de Duke, 2000. [17] A. Vargas. El sistema de simulación de eventos discretos OMNeT++. En Actas de la Multiconferencia Europea de Simulación (ESM2001), Praga, junio de 2001. [18] E. Vollset, D. Ingham y P. Ezhilchelvan. JMS en redes móviles ad-hoc. En Comunicaciones Inalámbricas Personales (PWC), páginas 40-52, Venecia, septiembre de 2003. [19] E. Yoneki y J. Bacon. Pronto: Mobilegateway con paradigma de publicación-suscripción sobre red inalámbrica. Informe Técnico 559, Universidad de Cambridge, Laboratorio de Computación, febrero de 2003. Middleware para Computación Pervasive y ad-hoc 126",
    "original_sentences": [
        "Adapting Asynchronous Messaging Middleware to ad-hoc Networking Mirco Musolesi Dept.",
        "of Computer Science, University College London Gower Street, London WC1E 6BT, United Kingdom m.musolesi@cs.ucl.ac.uk Cecilia Mascolo Dept. of Computer Science, University College London Gower Street, London WC1E 6BT, United Kingdom c.mascolo@cs.ucl.ac.uk Stephen Hailes Dept. of Computer Science, University College London Gower Street, London WC1E 6BT, United Kingdom s.hailes@cs.ucl.ac.uk ABSTRACT The characteristics of mobile environments, with the possibility of frequent disconnections and fluctuating bandwidth, have forced a rethink of traditional middleware.",
        "In particular, the synchronous communication paradigms often employed in standard middleware do not appear to be particularly suited to ad-hoc environments, in which not even the intermittent availability of a backbone network can be assumed.",
        "Instead, asynchronous communication seems to be a generally more suitable paradigm for such environments.",
        "Message oriented middleware for traditional systems has been developed and used to provide an asynchronous paradigm of communication for distributed systems, and, recently, also for some specific mobile computing systems.",
        "In this paper, we present our experience in designing, implementing and evaluating EMMA (Epidemic Messaging Middleware for ad-hoc networks), an adaptation of Java Message Service (JMS) for mobile ad-hoc environments.",
        "We discuss in detail the design challenges and some possible solutions, showing a concrete example of the feasibility and suitability of the application of the asynchronous paradigm in this setting and outlining a research roadmap for the coming years.",
        "Categories and Subject Descriptors C.2.4 [Computer-Communication Networks]: Distributed Systems-Distributed Applications; C.2.1 [Network Architecture and Design]: Wireless Communication General Terms DESIGN, ALGORITHMS 1.",
        "INTRODUCTION With the increasing popularity of mobile devices and their widespread adoption, there is a clear need to allow the development of a broad spectrum of applications that operate effectively over such an environment.",
        "Unfortunately, this is far from simple: mobile devices are increasingly heterogeneous in terms of processing capabilities, memory size, battery capacity, and network interfaces.",
        "Each such configuration has substantially different characteristics that are both statically different - for example, there is a major difference in capability between a Berkeley mote and an 802.11g-equipped laptop - and that vary dynamically, as in situations of fluctuating bandwidth and intermittent connectivity.",
        "Mobile ad hoc environments have an additional element of complexity in that they are entirely decentralised.",
        "In order to craft applications for such complex environments, an appropriate form of middleware is essential if cost effective development is to be achieved.",
        "In this paper, we examine one of the foundational aspects of middleware for mobile ad-hoc environments: that of the communication primitives.",
        "Traditionally, the most frequently used middleware primitives for communication assume the simultaneous presence of both end points on a network, since the stability and pervasiveness of the networking infrastructure is not an unreasonable assumption for most wired environments.",
        "In other words, most communication paradigms are synchronous: object oriented middleware such as CORBA and Java RMI are typical examples of middleware based on synchronous communication.",
        "In recent years, there has been growing interest in platforms based on asynchronous communication paradigms, such as publish-subscribe systems [6]: these have been exploited very successfully where there is application level asynchronicity.",
        "From a Gartner Market Report [7]: Given messageoriented-middlewares (MOM) popularity, scalability, flexibility, and affinity with mobile and wireless architectures, by 2004, MOM will emerge as the dominant form of communication middleware for linking mobile and enterprise applications (0.7 probability)....",
        "Moreover, in mobile ad-hoc systems, the likelihood of network fragmentation means that synchronous communication may in any case be impracticable, giving situations in which delay tolerant asynchronous traffic is the only form of traffic that could be supported. 121 Middleware 2004 Companion Middleware for mobile ad-hoc environments must therefore support semi-synchronous or completely asynchronous communication primitives if it is to avoid substantial limitations to its utility.",
        "Aside from the intellectual challenge in supporting this model, this work is also interesting because there are a number of practical application domains in allowing inter-community communication in undeveloped areas of the globe.",
        "Thus, for example, projects that have been carried out to help populations that live in remote places of the globe such as Lapland [3] or in poor areas that lack fixed connectivity infrastructure [9].",
        "There have been attempts to provide mobile middleware with these properties, including STEAM, LIME, XMIDDLE, Bayou (see [11] for a more complete review of mobile middleware).",
        "These models differ quite considerably from the existing traditional middleware in terms of primitives provided.",
        "Furthermore, some of them fail in providing a solution for the true ad-hoc scenarios.",
        "If the projected success of MOM becomes anything like a reality, there will be many programmers with experience of it.",
        "The ideal solution to the problem of middleware for ad-hoc systems is, then, to allow programmers to utilise the same paradigms and models presented by common forms of MOM and to ensure that these paradigms are supportable within the mobile environment.",
        "This approach has clear advantages in allowing applications developed on standard middleware platforms to be easily deployed on mobile devices.",
        "Indeed, some research has already led to the adaptation of traditional middleware platforms to mobile settings, mainly to provide integration between mobile devices and existing fixed networks in a nomadic (i.e., mixed) environment [4].",
        "With respect to message oriented middleware, the current implementations, however, either assume the existence of a backbone network to which the mobile hosts connect from time to time while roaming [10], or assume that nodes are always somehow reachable through a path [18].",
        "No adaptation to heterogeneous or completely ad-hoc scenarios, with frequent disconnection and periodically isolated clouds of hosts, has been attempted.",
        "In the remainder of this paper we describe an initial attempt to adapt message oriented middleware to suit mobile and, more specifically, mobile ad-hoc networks.",
        "In our case, we elected to examine JMS, as one of the most widely known MOM systems.",
        "In the latter part of this paper, we explore the limitations of our results and describe the plans we have to take the work further. 2.",
        "MESSAGE ORIENTED MIDDLEWARE AND JAVA MESSAGE SERVICE (JMS) Message-oriented middleware systems support communication between distributed components via message-passing: the sender sends a message to identified queues, which usually reside on a server.",
        "A receiver retrieves the message from the queue at a different time and may acknowledge the reply using the same asynchronous mechanism.",
        "Message-oriented middleware thus supports asynchronous communication in a very natural way, achieving de-coupling of senders and receivers.",
        "A sender is able to continue processing as soon as the middleware has accepted the message; eventually, the receiver will send an acknowledgment message and the sender will be able to collect it at a convenient time.",
        "However, given the way they are implemented, these middleware systems usually require resource-rich devices, especially in terms of memory and disk space, where persistent queues of messages that have been received but not yet processed, are stored.",
        "Sun Java Message Service [5], IBM WebSphere MQ [6], Microsoft MSMQ [12] are examples of very successful message-oriented middleware for traditional distributed systems.",
        "The Java Messaging Service (JMS) is a collection of interfaces for asynchronous communication between distributed components.",
        "It provides a common way for Java programs to create, send and receive messages.",
        "JMS users are usually referred to as clients.",
        "The JMS specification further defines providers as the components in charge of implementing the messaging system and providing the administrative and control functionality (i.e., persistence and reliability) required by the system.",
        "Clients can send and receive messages, asynchronously, through the JMS provider, which is in charge of the delivery and, possibly, of the persistence of the messages.",
        "There are two types of communication supported: point to point and publish-subscribe models.",
        "In the point to point model, hosts send messages to queues.",
        "Receivers can be registered with some specific queues, and can asynchronously retrieve the messages and then acknowledge them.",
        "The publish-subscribe model is based on the use of topics that can be subscribed to by clients.",
        "Messages are sent to topics by other clients and are then received in an asynchronous mode by all the subscribed clients.",
        "Clients learn about the available topics and queues through Java Naming and Directory Interface (JNDI) [14].",
        "Queues and topics are created by an administrator on the provider and are registered with the JNDI interface for look-up.",
        "In the next section, we introduce the challenges of mobile networks, and show how JMS can be adapted to cope with these requirements. 3.",
        "JMS FOR MOBILE COMPUTING Mobile networks vary very widely in their characteristics, from nomadic networks in which modes relocate whilst offline through to ad-hoc networks in which modes move freely and in which there is no infrastructure.",
        "Mobile ad-hoc networks are most generally applicable in situations where survivability and instant deployability are key: most notably in military applications and disaster relief.",
        "In between these two types of mobile networks, there are, however, a number of possible heterogeneous combinations, where nomadic and ad-hoc paradigms are used to interconnect totally unwired areas to more structured networks (such as a LAN or the Internet).",
        "Whilst the JMS specification has been extensively implemented and used in traditional distributed systems, adaptations for mobile environments have been proposed only recently.",
        "The challenges of porting JMS to mobile settings are considerable; however, in view of its widespread acceptance and use, there are considerable advantages in allowing the adaptation of existing applications to mobile environments and in allowing the interoperation of applications in the wired and wireless regions of a network.",
        "In [10], JMS was adapted to a nomadic mobile setting, where mobile hosts can be JMS clients and communicate through the JMS provider that, however, sits on a backbone network, providing reliability and persistence.",
        "The client prototype presented in [10] is very lightweight, due to the delegation of all the heavyweight functionality to the Middleware for Pervasive and ad-hoc Computing 122 provider on the wired network.",
        "However, this approach is somewhat limited in terms of widespread applicability and scalability as a consequence of the concentration of functionality in the wired portion of the network.",
        "If JMS is to be adapted to completely ad-hoc environments, where no fixed infrastructure is available, and where nodes change location and status very dynamically, more issues must be taken into consideration.",
        "Firstly, discovery needs to use a resilient but distributed model: in this extremely dynamic environment, static solutions are unacceptable.",
        "As discussed in Section 2, a JMS administrator defines queues and topics on the provider.",
        "Clients can then learn about them using the Java Naming and Directory Interface (JNDI).",
        "However, due to the way JNDI is designed, a JNDI node (or more than one) needs to be in reach in order to obtain a binding of a name to an address (i.e., knowing where a specific queue/topic is).",
        "In mobile ad-hoc environments, the discovery process cannot assume the existence of a fixed set of discovery servers that are always reachable, as this would not match the dynamicity of ad-hoc networks.",
        "Secondly, a JMS Provider, as suggested by the JMS specification, also needs to be reachable by each node in the network, in order to communicate.",
        "This assumes a very centralised architecture, which again does not match the requirements of a mobile ad-hoc setting, in which nodes may be moving and sparse: a more distributed and dynamic solution is needed.",
        "Persistence is, however, essential functionality in asynchronous communication environments as hosts are, by definition, connected at different times.",
        "In the following section, we will discuss our experience in designing and implementing JMS for mobile ad-hoc networks. 4.",
        "JMSFOR MOBILE ad-hoc NETWORKS 4.1 Adaptation of JMS for Mobile ad-hoc Networks Developing applications for mobile networks is yet more challenging: in addition to the same considerations as for infrastructured wireless environments, such as the limited device capabilities and power constraints, there are issues of rate of change of network connectivity, and the lack of a static routing infrastructure.",
        "Consequently, we now describe an initial attempt to adapt the JMS specification to target the particular requirements related to ad-hoc scenarios.",
        "As discussed in Section 3, a JMS application can use either the point to point and the publish-subscribe styles of messaging.",
        "Point to Point Model The point to point model is based on the concept of queues, that are used to enable asynchronous communication between the producer of a message and possible different consumers.",
        "In our solution, the location of queues is determined by a negotiation process that is application dependent.",
        "For example, let us suppose that it is possible to know a priori, or it is possible to determine dynamically, that a certain host is the receiver of the most part of messages sent to a particular queue.",
        "In this case, the optimum location of the queue may well be on this particular host.",
        "In general, it is worth noting that, according to the JMS specification and suggested design patterns, it is common and preferable for a client to have all of its messages delivered to a single queue.",
        "Queues are advertised periodically to the hosts that are within transmission range or that are reachable by means of the underlying synchronous communication protocol, if provided.",
        "It is important to note that, at the middleware level, it is logically irrelevant whether or not the network layer implements some form of ad-hoc routing (though considerably more efficient if it does); the middleware only considers information about which nodes are actively reachable at any point in time.",
        "The hosts that receive advertisement messages add entries to their JNDI registry.",
        "Each entry is characterized by a lease (a mechanism similar to that present in Jini [15]).",
        "A lease represents the time of validity of a particular entry.",
        "If a lease is not refreshed (i.e, its life is not extended), it can expire and, consequently, the entry is deleted from the registry.",
        "In other words, the host assumes that the queue will be unreachable from that point in time.",
        "This may be caused, for example, if a host storing the queue becomes unreachable.",
        "A host that initiates a discovery process will find the topics and the queues present in its connected portion of the network in a straightforward manner.",
        "In order to deliver a message to a host that is not currently in reach1 , we use an asynchronous epidemic routing protocol that will be discussed in detail in Section 4.2.",
        "If two hosts are in the same cloud (i.e., a connected path exists between them), but no synchronous protocol is available, the messages are sent using the epidemic protocol.",
        "In this case, the delivery latency will be low as a result of the rapidity of propagation of the infection in the connected cloud (see also the simulation results in Section 5).",
        "Given the existence of an epidemic protocol, the discovery mechanism consists of advertising the queues to the hosts that are currently unreachable using analogous mechanisms.",
        "Publish-Subscribe Model In the publish-subscribe model, some of the hosts are similarly designated to hold topics and store subscriptions, as before.",
        "Topics are advertised through the registry in the same way as are queues, and a client wishing to subscribe to a topic must register with the client holding the topic.",
        "When a client wishes to send a message to the topic list, it sends it to the topic holder (in the same way as it would send a message to a queue).",
        "The topic holder then forwards the message to all subscribers, using the synchronous protocol if possible, the epidemic protocol otherwise.",
        "It is worth noting that we use a single message with multiple recipients, instead of multiple messages with multiple recipients.",
        "When a message is delivered to one of the subscribers, this recipient is deleted from the list.",
        "In order to delete the other possible replicas, we employ acknowledgment messages (discussed in Section 4.4), returned in the same way as a normal message.",
        "We have also adapted the concepts of durable and non durable subscriptions for ad-hoc settings.",
        "In fixed platforms, durable subscriptions are maintained during the disconnections of the clients, whether these are intentional or are the result of failures.",
        "In traditional systems, while a durable subscriber is disconnected from the server, it is responsible for storing messages.",
        "When the durable subscriber reconnects, the server sends it all unexpired messages.",
        "The problem is that, in our scenario, disconnections are the norm 1 In theory, it is not possible to send a message to a peer that has never been reachable in the past, since there can be no entry present in the registry.",
        "However, to overcome this possible limitation, we provide a primitive through which information can be added to the registry without using the normal channels. 123 Middleware 2004 Companion rather than the exception.",
        "In other words, we cannot consider disconnections as failures.",
        "For these reasons, we adopt a slightly different semantics.",
        "With respect to durable subscriptions, if a subscriber becomes disconnected, notifications are not stored but are sent using the epidemic protocol rather than the synchronous protocol.",
        "In other words, durable notifications remain valid during the possible disconnections of the subscriber.",
        "On the other hand, if a non-durable subscriber becomes disconnected, its subscription is deleted; in other words, during disconnections, notifications are not sent using the epidemic protocol but exploit only the synchronous protocol.",
        "If the topic becomes accessible to this host again, it must make another subscription in order to receive the notifications.",
        "Unsubscription messages are delivered in the same way as are subscription messages.",
        "It is important to note that durable subscribers have explicitly to unsubscribe from a topic in order to stop the notification process; however, all durable subscriptions have a predefined expiration time in order to cope with the cases of subscribers that do not meet again because of their movements or failures.",
        "This feature is clearly provided to limit the number of the unnecessary messages sent around the network. 4.2 Message Delivery using Epidemic Routing In this section, we examine one possible mechanism that will allow the delivery of messages in a partially connected network.",
        "The mechanism we discuss is intended for the purposes of demonstrating feasibility; more efficient communication mechanisms for this environment are themselves complex, and are the subject of another paper [13].",
        "The asynchronous message delivery described above is based on a typical pure epidemic-style routing protocol [16].",
        "A message that needs to be sent is replicated on each host in reach.",
        "In this way, copies of the messages are quickly spread through connected networks, like an infection.",
        "If a host becomes connected to another cloud of mobile nodes, during its movement, the message spreads through this collection of hosts.",
        "Epidemic-style replication of data and messages has been exploited in the past in many fields starting with the distributed database systems area [2].",
        "Within epidemic routing, each host maintains a buffer containing the messages that it has created and the replicas of the messages generated by the other hosts.",
        "To improve the performance, a hash-table indexes the content of the buffer.",
        "When two hosts connect, the host with the smaller identifier initiates a so-called anti-entropy session, sending a list containing the unique identifiers of the messages that it currently stores.",
        "The other host evaluates this list and sends back a list containing the identifiers it is storing that are not present in the other host, together with the messages that the other does not have.",
        "The host that has started the session receives the list and, in the same way, sends the messages that are not present in the other host.",
        "Should buffer overflow occur, messages are dropped.",
        "The reliability offered by this protocol is typically best effort, since there is no guarantee that a message will eventually be delivered to its recipient.",
        "Clearly, the delivery ratio of the protocol increases proportionally to the maximum allowed delay time and the buffer size in each host (interesting simulation results may be found in [16]). 4.3 Adaptation of the JMS Message Model In this section, we will analyse the aspects of our adaptation of the specification related to the so-called JMS Message Model [5].",
        "According to this, JMS messages are characterised by some properties defined using the header field, which contains values that are used by both clients and providers for their delivery.",
        "The aspects discussed in the remainder of this section are valid for both models (point to point and publish-subscribe).",
        "A JMS message can be persistent or non-persistent.",
        "According to the JMS specification, persistent messages must be delivered with a higher degree of reliability than the nonpersistent ones.",
        "However, it is worth noting that it is not possible to ensure once-and-only-once reliability for persistent messages as defined in the specification, since, as we discussed in the previous subsection, the underlying epidemic protocol can guarantee only best-effort delivery.",
        "However, clients maintain a list of the identifiers of the recently received messages to avoid the delivery of message duplicates.",
        "In other words, we provide the applications with at-mostonce reliability for both types of messages.",
        "In order to implement different levels of reliability, EMMA treats persistent and non-persistent messages differently, during the execution of the anti-entropy epidemic protocol.",
        "Since the message buffer space is limited, persistent messages are preferentially replicated using the available free space.",
        "If this is insufficient and non-persistent messages are present in the buffer, these are replaced.",
        "Only the successful deliveries of the persistent messages are notified to the senders.",
        "According to the JMS specification, it is possible to assign a priority to each message.",
        "The messages with higher priorities are delivered in a preferential way.",
        "As discussed above, persistent messages are prioritised above the non-persistent ones.",
        "Further selection is based on their priorities.",
        "Messages with higher priorities are treated in a preferential way.",
        "In fact, if there is not enough space to replicate all the persistent messages, a mechanism based on priorities is used to delete and replicate non-persistent messages (and, if necessary, persistent messages).",
        "Messages are deleted from the buffers using the expiration time value that can be set by senders.",
        "This is a way to free space in the buffers (one preferentially deletes older messages in cases of conflict); to eliminate stale replicas in the system; and to limit the time for which destinations must hold message identifiers to dispose of duplicates. 4.4 Reliability and Acknowledgment Mechanisms As already discussed, at-most-once message delivery is the best that can be achieved in terms of delivery semantics in partially connected ad-hoc settings.",
        "However, it is possible to improve the reliability of the system with efficient acknowledgment mechanisms.",
        "EMMA provides a mechanism for failure notification to applications if the acknowledgment is not received within a given timeout (that can be configured by application developers).",
        "This mechanism is the one that distinguishes the delivery of persistent and non-persistent messages in our JMS implementation: the deliveries of the former are notified to the senders, whereas the latter are not.",
        "We use acknowledgment messages not only to inform senders about the successful delivery of messages but also to delete the replicas of the delivered messages that are still present in the network.",
        "Each host maintains a list of the messages Middleware for Pervasive and ad-hoc Computing 124 successfully delivered that is updated as part of the normal process of information exchange between the hosts.",
        "The lists are exchanged during the first steps of the anti-entropic epidemic protocol with a certain predefined frequency.",
        "In the case of messages with multiple recipients, a list of the actual recipients is also stored.",
        "When a host receives the list, it checks its message buffer and updates it according to the following rules: (1) if a message has a single recipient and it has been delivered, it is deleted from the buffer; (2) if a message has multiple recipients, the identifiers of the delivered hosts are deleted from the associated list of recipients.",
        "If the resulting length of the list of recipients is zero, the message is deleted from the buffer.",
        "These lists have, clearly, finite dimensions and are implemented as circular queues.",
        "This simple mechanism, together with the use of expiration timestamps, guarantees that the old acknowledgment notifications are deleted from the system after a limited period of time.",
        "In order to improve the reliability of EMMA, a design mechanism for intelligent replication of queues and topics based on the context information could be developed.",
        "However this is not yet part of the current architecture of EMMA. 5.",
        "IMPLEMENTATION AND PRELIMINARY EVALUATION We implemented a prototype of our platform using the J2ME Personal Profile.",
        "The size of the executable is about 250KB including the JMS 1.1 jar file; this is a perfectly acceptable figure given the available memory of the current mobile devices on the market.",
        "We tested our prototype on HP IPaq PDAs running Linux, interconnected with WaveLan, and on a number of laptops with the same network interface.",
        "We also evaluated the middleware platform using the OMNET++ discrete event simulator [17] in order to explore a range of mobile scenarios that incorporated a more realistic number of hosts than was achievable experimentally.",
        "More specifically, we assessed the performance of the system in terms of delivery ratio and average delay, varying the density of population and the buffer size, and using persistent and non-persistent messages with different priorities.",
        "The simulation results show that the EMMAs performance, in terms of delivery ratio and delay of persistent messages with higher priorities, is good.",
        "In general, it is evident that the delivery ratio is strongly related to the correct dimensioning of the buffers to the maximum acceptable delay.",
        "Moreover, the epidemic algorithms are able to guarantee a high delivery ratio if one evaluates performance over a time interval sufficient for the dissemination of the replicas of messages (i.e., the infection spreading) in a large portion of the ad-hoc network.",
        "One consequence of the dimensioning problem is that scalability may be seriously impacted in peer-to-peer middleware for mobile computing due to the resource poverty of the devices (limited memory to store temporarily messages) and the number of possible interconnections in ad-hoc settings.",
        "What is worse is that common forms of commercial and social organisation (six degrees of separation) mean that even modest TTL values on messages will lead to widespread flooding of epidemic messages.",
        "This problem arises because of the lack of intelligence in the epidemic protocol, and can be addressed by selecting carrier nodes for messages with greater care.",
        "The details of this process are, however, outside the scope of this paper (but may be found in [13]) and do not affect the foundation on which the EMMA middleware is based: the ability to deliver messages asynchronously. 6.",
        "CRITICAL VIEW OF THE STATE OF THE ART The design of middleware platforms for mobile computing requires researchers to answer new and fundamentally different questions; simply assuming the presence of wired portions of the network on which centralised functionality can reside is not generalisable.",
        "Thus, it is necessary to investigate novel design principles and to devise architectural patterns that differ from those traditionally exploited in the design of middleware for fixed systems.",
        "As an example, consider the recent cross-layering trend in ad-hoc networking [1].",
        "This is a way of re-thinking software systems design, explicitly abandoning the classical forms of layering, since, although this separation of concerns afford portability, it does so at the expense of potential efficiency gains.",
        "We believe that it is possible to view our approach as an instance of cross-layering.",
        "In fact, we have added the epidemic network protocol at middleware level and, at the same time, we have used the existing synchronous network protocol if present both in delivering messages (traditional layering) and in informing the middleware about when messages may be delivered by revealing details of the forwarding tables (layer violation).",
        "For this reason, we prefer to consider them jointly as the communication layer of our platform together providing more efficient message delivery.",
        "Another interesting aspect is the exploitation of context and system information to improve the performance of mobile middleware platforms.",
        "Again, as a result of adopting a cross-layering methodology, we are able to build systems that gather information from the underlying operating system and communication components in order to allow for adaptation of behaviour.",
        "We can summarise this conceptual design approach by saying that middleware platforms must be not only context-aware (i.e., they should be able to extract and analyse information from the surrounding context) but also system-aware (i.e., they should be able to gather information from the software and hardware components of the mobile system).",
        "A number of middleware systems have been developed to support ad-hoc networking with the use of asynchronous communication (such as LIME, XMIDDLE, STEAM [11]).",
        "In particular, the STEAM platform is an interesting example of event-based middleware for ad-hoc networks, providing location-aware message delivery and an effective solution for event filtering.",
        "A discussion of JMS, and its mobile realisation, has already been conducted in Sections 4 and 2.",
        "The Swiss company Softwired has developed the first JMS middleware for mobile computing, called iBus Mobile [10].",
        "The main components of this typically infrastructure-based architecture are the JMS provider, the so-called mobile JMS gateway, which is deployed on a fixed host and a lightweight JMS client library.",
        "The gateway is used for the communication between the application server and mobile hosts.",
        "The gateway is seen by the JMS provider as a normal JMS client.",
        "The JMS provider can be any JMS-enabled application server, such as BEA Weblogic.",
        "Pronto [19] is an example of mid125 Middleware 2004 Companion dleware system based on messaging that is specifically designed for mobile environments.",
        "The platform is composed of three classes of components: mobile clients implementing the JMS specification, gateways that control traffic, guaranteeing efficiency and possible user customizations using different plug-ins and JMS servers.",
        "Different configurations of these components are possible; with respect to mobile ad hoc networks applications, the most interesting is Serverless JMS.",
        "The aim of this configuration is to adapt JMS to a decentralized model.",
        "The publish-subscribe model exploits the efficiency and the scalability of the underlying IP multicast protocol.",
        "Unreliable and reliable message delivery services are provided: reliability is provided through a negative acknowledgment-based protocol.",
        "Pronto represents a good solution for infrastructure-based mobile networks but it does not adequately target ad-hoc settings, since mobile nodes rely on fixed servers for the exchange of messages.",
        "Other MOM implemented for mobile environments exist; however, they are usually straightforward extensions of existing middleware [8].",
        "The only implementation of MOM specifically designed for mobile ad-hoc networks was developed at the University of Newcastle [18].",
        "This work is again a JMS adaptation; the focus of that implementation is on group communication and the use of application level routing algorithms for topic delivery of messages.",
        "However, there are a number of differences in the focus of our work.",
        "The importance that we attribute to disconnections makes persistence a vital requirement for any middleware that needs to be used in mobile ad-hoc networks.",
        "The authors of [18] signal persistence as possible future work, not considering the fact that routing a message to a non-connected host will result in delivery failure.",
        "This is a remarkable limitation in mobile settings where unpredictable disconnections are the norm rather than the exception. 7.",
        "ROADMAP AND CONCLUSIONS Asynchronous communication is a useful communication paradigm for mobile ad-hoc networks, as hosts are allowed to come, go and pick up messages when convenient, also taking account of their resource availability (e.g., power, connectivity levels).",
        "In this paper we have described the state of the art in terms of MOM for mobile systems.",
        "We have also shown a proof of concept adaptation of JMS to the extreme scenario of partially connected mobile ad-hoc networks.",
        "We have described and discussed the characteristics and differences of our solution with respect to traditional JMS implementations and the existing adaptations for mobile settings.",
        "However, trade-offs between application-level routing and resource usage should also be investigated, as mobile devices are commonly power/resource scarce.",
        "A key limitation of this work is the poorly performing epidemic algorithm and an important advance in the practicability of this work requires an algorithm that better balances the needs of efficiency and message delivery probability.",
        "We are currently working on algorithms and protocols that, exploiting probabilistic and statistical techniques on the basis of small amounts of exchanged information, are able to improve considerably the efficiency in terms of resources (memory, bandwidth, etc) and the reliability of our middleware platform [13].",
        "One futuristic research development, which may take these ideas of adaptation of messaging middleware for mobile environments further is the introduction of more mobility oriented communication extensions, for instance the support of geocast (i.e., the ability to send messages to specific geographical areas). 8.",
        "REFERENCES [1] M. Conti, G. Maselli, G. Turi, and S. Giordano.",
        "Cross-layering in Mobile ad-hoc Network Design.",
        "IEEE Computer, 37(2):48-51, February 2004. [2] A. Demers, D. Greene, C. Hauser, W. Irish, J. Larson, S. Shenker, H. Sturgis, D. Swinehart, and D. Terry.",
        "Epidemic Algorithms for Replicated Database Maintenance.",
        "In Sixth Symposium on Principles of Distributed Computing, pages 1-12, August 1987. [3] A. Doria, M. Uden, and D. P. Pandey.",
        "Providing connectivity to the Saami nomadic community.",
        "In Proceedings of the Second International Conference on Open Collaborative Design for Sustainable Innovation, December 2002. [4] M. Haahr, R. Cunningham, and V. Cahill.",
        "Supporting CORBA applications in a Mobile Environment.",
        "In 5th International Conference on Mobile Computing and Networking (MOBICOM99), pages 36-47.",
        "ACM, August 1999. [5] M. Hapner, R. Burridge, R. Sharma, J. Fialli, and K. Stout.",
        "Java Message Service Specification Version 1.1.",
        "Sun Microsystems, Inc., April 2002. http://java.sun.com/products/jms/. [6] J. Hart.",
        "WebSphere MQ: Connecting your applications without complex programming.",
        "IBM WebSphere Software White Papers, 2003. [7] S. Hayward and M. Pezzini.",
        "Marrying Middleware and Mobile Computing.",
        "Gartner Group Research Report, September 2001. [8] IBM.",
        "WebSphere MQ EveryPlace Version 2.0, November 2002. http://www-3.ibm.com/software/integration/wmqe/. [9] ITU.",
        "Connecting remote communities.",
        "Documents of the World Summit on Information Society, 2003. http://www.itu.int/osg/spu/wsis-themes. [10] S. Maffeis.",
        "Introducing Wireless JMS.",
        "Softwired AG, www.sofwired-inc.com, 2002. [11] C. Mascolo, L. Capra, and W. Emmerich.",
        "Middleware for Mobile Computing.",
        "In E. Gregori, G. Anastasi, and S. Basagni, editors, Advanced Lectures on Networking, volume 2497 of Lecture Notes in Computer Science, pages 20-58.",
        "Springer Verlag, 2002. [12] Microsoft.",
        "Microsoft Message Queuing (MSMQ) Version 2.0 Documentation. [13] M. Musolesi, S. Hailes, and C. Mascolo.",
        "Adaptive routing for intermittently connected mobile ad-hoc networks.",
        "Technical report, UCL-CS Research Note, July 2004.",
        "Submitted for Publication. [14] Sun Microsystems.",
        "Java Naming and Directory Interface (JNDI) Documentation Version 1.2. 2003. http://java.sun.com/products/jndi/. [15] Sun Microsystems.",
        "Jini Specification Version 2.0, 2003. http://java.sun.com/products/jini/. [16] A. Vahdat and D. Becker.",
        "Epidemic routing for Partially Connected ad-hoc Networks.",
        "Technical Report CS-2000-06, Department of Computer Science, Duke University, 2000. [17] A. Vargas.",
        "The OMNeT++ discrete event simulation system.",
        "In Proceedings of the European Simulation Multiconference (ESM2001), Prague, June 2001. [18] E. Vollset, D. Ingham, and P. Ezhilchelvan.",
        "JMS on Mobile ad-hoc Networks.",
        "In Personal Wireless Communications (PWC), pages 40-52, Venice, September 2003. [19] E. Yoneki and J. Bacon.",
        "Pronto: Mobilegateway with publish-subscribe paradigm over wireless network.",
        "Technical Report 559, University of Cambridge, Computer Laboratory, February 2003.",
        "Middleware for Pervasive and ad-hoc Computing 126"
    ],
    "translated_text_sentences": [
        "Adaptando Middleware de Mensajería Asincrónica a Redes Ad-hoc Mirco Musolesi Dept.",
        "Las características de los entornos móviles, con la posibilidad de desconexiones frecuentes y ancho de banda fluctuante, han obligado a replantear el middleware tradicional.",
        "En particular, los paradigmas de comunicación síncrona a menudo empleados en middleware estándar no parecen ser particularmente adecuados para entornos ad-hoc, en los que ni siquiera se puede asumir la disponibilidad intermitente de una red troncal.",
        "En cambio, la comunicación asincrónica parece ser un paradigma generalmente más adecuado para este tipo de entornos.",
        "Se ha desarrollado y utilizado middleware orientado a mensajes para sistemas tradicionales con el fin de proporcionar un paradigma de comunicación asíncrona para sistemas distribuidos, y, recientemente, también para algunos sistemas específicos de computación móvil.",
        "En este artículo, presentamos nuestra experiencia en el diseño, implementación y evaluación de EMMA (Middleware de Mensajería Epidémica para redes ad-hoc), una adaptación del Servicio de Mensajes Java (JMS) para entornos móviles ad-hoc.",
        "Discutimos en detalle los desafíos de diseño y algunas posibles soluciones, mostrando un ejemplo concreto de la viabilidad y adecuación de la aplicación del paradigma asíncrono en este contexto y delineando un plan de investigación para los próximos años.",
        "Categorías y Descriptores de Asignaturas C.2.4 [Redes de Computadoras-Comunicación]: Sistemas Distribuidos-Aplicaciones Distribuidas; C.2.1 [Arquitectura y Diseño de Redes]: Comunicación Inalámbrica Términos Generales DISEÑO, ALGORITMOS 1.",
        "INTRODUCCIÓN Con la creciente popularidad de los dispositivos móviles y su amplia adopción, existe una clara necesidad de permitir el desarrollo de un amplio espectro de aplicaciones que operen de manera efectiva en dicho entorno.",
        "Lamentablemente, esto está lejos de ser simple: los dispositivos móviles son cada vez más heterogéneos en cuanto a capacidades de procesamiento, tamaño de memoria, capacidad de batería e interfaces de red.",
        "Cada una de estas configuraciones tiene características sustancialmente diferentes que son estáticamente distintas, por ejemplo, hay una gran diferencia en la capacidad entre un mote de Berkeley y un portátil equipado con 802.11g, y que varían dinámicamente, como en situaciones de ancho de banda fluctuante y conectividad intermitente.",
        "Los entornos móviles ad hoc tienen un elemento adicional de complejidad en que son completamente descentralizados.",
        "Para poder desarrollar aplicaciones para entornos tan complejos, es esencial contar con una forma adecuada de middleware si se busca lograr un desarrollo rentable.",
        "En este artículo, examinamos uno de los aspectos fundamentales de middleware para entornos móviles ad-hoc: el de los primitivos de comunicación.",
        "Tradicionalmente, los primitivos de middleware más utilizados para la comunicación asumen la presencia simultánea de ambos puntos finales en una red, ya que la estabilidad y la ubicuidad de la infraestructura de redes no es una suposición irrazonable para la mayoría de los entornos cableados.",
        "En otras palabras, la mayoría de los paradigmas de comunicación son síncronos: middleware orientado a objetos como CORBA y Java RMI son ejemplos típicos de middleware basado en comunicación síncrona.",
        "En los últimos años, ha habido un creciente interés en plataformas basadas en paradigmas de comunicación asincrónica, como los sistemas de publicación-suscripción: estos han sido explotados con mucho éxito donde existe asincronía a nivel de aplicación.",
        "De acuerdo con un informe de mercado de Gartner [7]: Dada la popularidad, escalabilidad, flexibilidad y afinidad con arquitecturas móviles e inalámbricas de los middlewares orientados a mensajes (MOM), para el año 2004, es probable que MOM se convierta en la forma dominante de middleware de comunicación para vincular aplicaciones móviles y empresariales (probabilidad del 0.7)...",
        "Además, en sistemas ad-hoc móviles, la probabilidad de fragmentación de la red significa que la comunicación síncrona puede resultar impracticable en cualquier caso, lo que da lugar a situaciones en las que el tráfico asincrónico tolerante a retrasos es la única forma de tráfico que podría ser admitida. El middleware para entornos ad-hoc móviles debe, por lo tanto, admitir primitivas de comunicación semi-síncronas o completamente asíncronas si se quiere evitar limitaciones sustanciales en su utilidad.",
        "Además del desafío intelectual que implica apoyar este modelo, este trabajo también es interesante porque existen varios ámbitos de aplicación práctica al permitir la comunicación entre comunidades en áreas subdesarrolladas del mundo.",
        "Por lo tanto, por ejemplo, proyectos que se han llevado a cabo para ayudar a poblaciones que viven en lugares remotos del mundo como Laponia o en áreas pobres que carecen de infraestructura de conectividad fija.",
        "Ha habido intentos de proporcionar middleware móvil con estas propiedades, incluyendo STEAM, LIME, XMIDDLE, Bayou (consulte [11] para una revisión más completa del middleware móvil).",
        "Estos modelos difieren considerablemente de los middleware tradicionales existentes en cuanto a los primitivos proporcionados.",
        "Además, algunos de ellos fallan en proporcionar una solución para los verdaderos escenarios ad-hoc.",
        "Si el éxito proyectado de MOM se convierte en algo parecido a la realidad, habrá muchos programadores con experiencia en ello.",
        "La solución ideal al problema del middleware para sistemas ad-hoc es, entonces, permitir a los programadores utilizar los mismos paradigmas y modelos presentados por formas comunes de MOM y asegurar que estos paradigmas sean soportables dentro del entorno móvil.",
        "Este enfoque tiene claras ventajas al permitir que las aplicaciones desarrolladas en plataformas de middleware estándar se desplieguen fácilmente en dispositivos móviles.",
        "De hecho, algunas investigaciones ya han llevado a la adaptación de plataformas de middleware tradicionales a entornos móviles, principalmente para proporcionar integración entre dispositivos móviles y redes fijas existentes en un entorno nómada (es decir, mixto) [4].",
        "En lo que respecta al middleware orientado a mensajes, las implementaciones actuales, sin embargo, asumen la existencia de una red troncal a la que los hosts móviles se conectan de vez en cuando mientras están en itinerancia [10], o asumen que los nodos siempre son de alguna manera accesibles a través de un camino [18].",
        "No se ha intentado ninguna adaptación a escenarios heterogéneos o completamente ad hoc, con desconexiones frecuentes y nubes periódicamente aisladas de hosts.",
        "En el resto de este documento describimos un intento inicial de adaptar middleware orientado a mensajes para que se ajuste a dispositivos móviles y, más específicamente, a redes móviles ad-hoc.",
        "En nuestro caso, elegimos examinar JMS, como uno de los sistemas MOM más conocidos.",
        "En la última parte de este documento, exploramos las limitaciones de nuestros resultados y describimos los planes que tenemos para llevar a cabo el trabajo más adelante.",
        "Los sistemas de middleware orientados a mensajes y el Servicio de Mensajes de Java (JMS) admiten la comunicación entre componentes distribuidos a través del paso de mensajes: el remitente envía un mensaje a colas identificadas, que generalmente residen en un servidor.",
        "Un receptor recupera el mensaje de la cola en un momento diferente y puede confirmar la respuesta utilizando el mismo mecanismo asíncrono.",
        "La middleware orientada a mensajes soporta la comunicación asíncrona de una manera muy natural, logrando el desacoplamiento de emisores y receptores.",
        "Un remitente puede continuar procesando tan pronto como el middleware haya aceptado el mensaje; eventualmente, el receptor enviará un mensaje de confirmación y el remitente podrá recogerlo en un momento conveniente.",
        "Sin embargo, dado la forma en que están implementados, estos sistemas de middleware suelen requerir dispositivos con recursos abundantes, especialmente en términos de memoria y espacio en disco, donde se almacenan colas persistentes de mensajes que han sido recibidos pero aún no procesados.",
        "Sun Java Message Service [5], IBM WebSphere MQ [6], Microsoft MSMQ [12] son ejemplos de middleware orientado a mensajes muy exitosos para sistemas distribuidos tradicionales.",
        "El Servicio de Mensajería de Java (JMS) es una colección de interfaces para la comunicación asincrónica entre componentes distribuidos.",
        "Proporciona una forma común para que los programas de Java creen, envíen y reciban mensajes.",
        "Los usuarios de JMS suelen ser referidos como clientes.",
        "La especificación JMS define además a los proveedores como los componentes encargados de implementar el sistema de mensajería y proporcionar la funcionalidad administrativa y de control (es decir, persistencia y confiabilidad) requerida por el sistema.",
        "Los clientes pueden enviar y recibir mensajes, de forma asincrónica, a través del proveedor JMS, que se encarga de la entrega y, posiblemente, de la persistencia de los mensajes.",
        "Hay dos tipos de comunicación admitidos: modelos punto a punto y de publicación-suscripción.",
        "En el modelo punto a punto, los hosts envían mensajes a colas.",
        "Los receptores pueden ser registrados con algunas colas específicas, y pueden recuperar los mensajes de forma asíncrona para luego confirmar su recepción.",
        "El modelo de publicación-suscripción se basa en el uso de temas a los que los clientes pueden suscribirse.",
        "Los mensajes son enviados a los temas por otros clientes y luego son recibidos de forma asíncrona por todos los clientes suscritos.",
        "Los clientes aprenden sobre los temas y colas disponibles a través de la Interfaz de Nombres y Directorios de Java (JNDI) [14].",
        "Las colas y los temas son creados por un administrador en el proveedor y se registran con la interfaz JNDI para su búsqueda.",
        "En la siguiente sección, presentamos los desafíos de las redes móviles y mostramos cómo JMS puede adaptarse para cumplir con estos requisitos. 3.",
        "JMS PARA COMPUTACIÓN MÓVIL Las redes móviles varían mucho en sus características, desde redes nómadas en las que los nodos se desplazan mientras están desconectados, hasta redes ad-hoc en las que los nodos se mueven libremente y no hay infraestructura.",
        "Las redes móviles ad-hoc son más comúnmente aplicables en situaciones donde la supervivencia y la capacidad de despliegue instantáneo son clave: especialmente en aplicaciones militares y de ayuda en casos de desastre.",
        "Entre estos dos tipos de redes móviles, sin embargo, existen una serie de posibles combinaciones heterogéneas, donde se utilizan paradigmas nómadas y ad-hoc para interconectar áreas totalmente inalámbricas con redes más estructuradas (como una LAN o Internet).",
        "Si bien la especificación JMS ha sido ampliamente implementada y utilizada en sistemas distribuidos tradicionales, las adaptaciones para entornos móviles han sido propuestas recientemente.",
        "Los desafíos de adaptar JMS a entornos móviles son considerables; sin embargo, dada su amplia aceptación y uso, existen ventajas considerables al permitir la adaptación de aplicaciones existentes a entornos móviles y al permitir la interoperabilidad de aplicaciones en las regiones cableadas e inalámbricas de una red.",
        "En [10], JMS se adaptó a un entorno móvil nómada, donde los hosts móviles pueden ser clientes de JMS y comunicarse a través del proveedor de JMS que, sin embargo, se encuentra en una red troncal, proporcionando fiabilidad y persistencia.",
        "El prototipo del cliente presentado en [10] es muy ligero, debido a la delegación de toda la funcionalidad pesada al proveedor Middleware para Computación Pervasive y ad-hoc 122 en la red cableada.",
        "Sin embargo, este enfoque es algo limitado en términos de aplicabilidad generalizada y escalabilidad como consecuencia de la concentración de funcionalidad en la parte cableada de la red.",
        "Si se quiere adaptar JMS a entornos completamente ad hoc, donde no haya infraestructura fija disponible y donde los nodos cambien de ubicación y estado de forma muy dinámica, se deben tener en cuenta más problemas.",
        "En primer lugar, el descubrimiento necesita utilizar un modelo resiliente pero distribuido: en este entorno extremadamente dinámico, las soluciones estáticas son inaceptables.",
        "Como se discute en la Sección 2, un administrador de JMS define colas y temas en el proveedor.",
        "Los clientes pueden entonces aprender sobre ellos utilizando la Interfaz de Nombres y Directorios de Java (JNDI).",
        "Sin embargo, debido a la forma en que está diseñado JNDI, es necesario que un nodo de JNDI (o más de uno) esté al alcance para obtener una vinculación de un nombre a una dirección (es decir, saber dónde se encuentra una cola o un tema específico).",
        "En entornos móviles ad-hoc, el proceso de descubrimiento no puede asumir la existencia de un conjunto fijo de servidores de descubrimiento que siempre sean accesibles, ya que esto no coincidiría con la dinámica de las redes ad-hoc.",
        "En segundo lugar, un Proveedor de JMS, como sugiere la especificación de JMS, también debe ser accesible para cada nodo en la red, para poder comunicarse.",
        "Esto asume una arquitectura muy centralizada, que nuevamente no coincide con los requisitos de un entorno ad-hoc móvil, en el que los nodos pueden estar en movimiento y dispersos: se necesita una solución más distribuida y dinámica.",
        "La persistencia es, sin embargo, una funcionalidad esencial en entornos de comunicación asincrónica, ya que los hosts están, por definición, conectados en momentos diferentes.",
        "En la siguiente sección, discutiremos nuestra experiencia en el diseño e implementación de JMS para redes móviles ad-hoc. 4.",
        "El desarrollo de aplicaciones para redes móviles es aún más desafiante: además de las mismas consideraciones que para entornos inalámbricos infraestructurados, como las limitadas capacidades de los dispositivos y las restricciones de energía, existen problemas relacionados con la velocidad de cambio de la conectividad de la red y la falta de una infraestructura de enrutamiento estática.",
        "En consecuencia, ahora describimos un intento inicial de adaptar la especificación JMS para satisfacer los requisitos particulares relacionados con escenarios ad-hoc.",
        "Como se discute en la Sección 3, una aplicación JMS puede utilizar tanto el estilo de mensajería punto a punto como el de publicación-suscripción.",
        "Modelo de punto a punto. El modelo de punto a punto se basa en el concepto de colas, que se utilizan para habilitar la comunicación asincrónica entre el productor de un mensaje y posibles consumidores diferentes.",
        "En nuestra solución, la ubicación de las colas se determina mediante un proceso de negociación que depende de la aplicación.",
        "Por ejemplo, supongamos que es posible saber a priori, o es posible determinar dinámicamente, que cierto host es el receptor de la mayor parte de los mensajes enviados a una cola particular.",
        "En este caso, la ubicación óptima de la cola bien podría estar en este host en particular.",
        "En general, vale la pena señalar que, según la especificación de JMS y los patrones de diseño sugeridos, es común y preferible que un cliente tenga todos sus mensajes entregados a una sola cola.",
        "Las colas se anuncian periódicamente a los anfitriones que se encuentran dentro del rango de transmisión o que son alcanzables mediante el protocolo de comunicación síncrona subyacente, si se proporciona.",
        "Es importante tener en cuenta que, a nivel de middleware, es lógicamente irrelevante si la capa de red implementa alguna forma de enrutamiento ad-hoc (aunque considerablemente más eficiente si lo hace); el middleware solo considera información sobre qué nodos son accesibles activamente en cualquier momento.",
        "Los hosts que reciben mensajes publicitarios agregan entradas a su registro JNDI.",
        "Cada entrada se caracteriza por un arrendamiento (un mecanismo similar al presente en Jini [15]).",
        "Un contrato de arrendamiento representa el tiempo de validez de una entrada particular.",
        "Si un arrendamiento no se renueva (es decir, su vida no se extiende), puede vencer y, en consecuencia, la entrada se elimina del registro.",
        "En otras palabras, el anfitrión asume que la cola será inaccesible a partir de ese momento.",
        "Esto puede ser causado, por ejemplo, si un host que almacena la cola se vuelve inaccesible.",
        "Un host que inicia un proceso de descubrimiento encontrará los temas y las colas presentes en su porción conectada de la red de manera directa.",
        "Para enviar un mensaje a un anfitrión que actualmente no está al alcance, utilizamos un protocolo de enrutamiento de epidemia asíncrono que se discutirá en detalle en la Sección 4.2.",
        "Si dos hosts están en la misma nube (es decir, existe un camino conectado entre ellos), pero no hay disponible un protocolo síncrono, los mensajes se envían utilizando el protocolo epidémico.",
        "En este caso, la latencia de entrega será baja como resultado de la rapidez de propagación de la infección en la nube conectada (ver también los resultados de la simulación en la Sección 5).",
        "Dado la existencia de un protocolo de epidemia, el mecanismo de descubrimiento consiste en publicitar las colas a los hosts que actualmente son inalcanzables utilizando mecanismos análogos.",
        "En el modelo de publicación-suscripción, algunos de los hosts son designados de manera similar para mantener temas y almacenar suscripciones, como antes.",
        "Los temas se anuncian a través del registro de la misma manera que las colas, y un cliente que desee suscribirse a un tema debe registrarse con el cliente que tiene el tema.",
        "Cuando un cliente desea enviar un mensaje a la lista de temas, lo envía al titular del tema (de la misma manera que enviaría un mensaje a una cola).",
        "El titular del tema luego reenvía el mensaje a todos los suscriptores, utilizando el protocolo síncrono si es posible, de lo contrario el protocolo epidémico.",
        "Vale la pena señalar que utilizamos un único mensaje con múltiples destinatarios, en lugar de múltiples mensajes con múltiples destinatarios.",
        "Cuando un mensaje es entregado a uno de los suscriptores, este destinatario es eliminado de la lista.",
        "Para eliminar las posibles réplicas restantes, empleamos mensajes de acuse de recibo (discutidos en la Sección 4.4), devueltos de la misma manera que un mensaje normal.",
        "También hemos adaptado los conceptos de suscripciones duraderas y no duraderas para entornos ad-hoc.",
        "En las plataformas fijas, las suscripciones duraderas se mantienen durante las desconexiones de los clientes, ya sean intencionales o resultado de fallas.",
        "En los sistemas tradicionales, cuando un suscriptor duradero se desconecta del servidor, es responsable de almacenar los mensajes.",
        "Cuando el suscriptor duradero se reconecta, el servidor le envía todos los mensajes no caducados.",
        "El problema es que, en nuestro escenario, las desconexiones son la norma. En teoría, no es posible enviar un mensaje a un par que nunca ha sido alcanzable en el pasado, ya que no puede haber ninguna entrada presente en el registro.",
        "Sin embargo, para superar esta posible limitación, proporcionamos un mecanismo a través del cual la información puede ser añadida al registro sin utilizar los canales normales. 123 Middleware 2004 Companion en lugar de la excepción.",
        "En otras palabras, no podemos considerar las desconexiones como fallos.",
        "Por estas razones, adoptamos una semántica ligeramente diferente.",
        "En lo que respecta a las suscripciones duraderas, si un suscriptor se desconecta, las notificaciones no se almacenan, sino que se envían utilizando el protocolo epidémico en lugar del protocolo síncrono.",
        "En otras palabras, las notificaciones duraderas siguen siendo válidas durante las posibles desconexiones del suscriptor.",
        "Por otro lado, si un suscriptor no duradero se desconecta, su suscripción se elimina; en otras palabras, durante las desconexiones, las notificaciones no se envían utilizando el protocolo epidémico, sino que solo se aprovecha el protocolo síncrono.",
        "Si el tema vuelve a estar accesible para este anfitrión, deberá realizar otra suscripción para recibir las notificaciones.",
        "Los mensajes de baja se entregan de la misma manera que los mensajes de suscripción.",
        "Es importante tener en cuenta que los suscriptores duraderos deben darse de baja explícitamente de un tema para detener el proceso de notificación; sin embargo, todas las suscripciones duraderas tienen un tiempo de expiración predefinido para hacer frente a los casos de suscriptores que no vuelven a conectarse debido a sus movimientos o fallos.",
        "Esta característica se proporciona claramente para limitar el número de mensajes innecesarios enviados por la red. 4.2 Entrega de mensajes utilizando enrutamiento epidémico En esta sección, examinamos un mecanismo posible que permitirá la entrega de mensajes en una red parcialmente conectada.",
        "El mecanismo que discutimos está destinado a demostrar viabilidad; los mecanismos de comunicación más eficientes para este entorno son complejos por sí mismos y son el tema de otro artículo [13].",
        "La entrega de mensajes asincrónica descrita anteriormente se basa en un protocolo de enrutamiento de estilo epidémico puro típico [16].",
        "Un mensaje que necesita ser enviado se replica en cada host al alcance.",
        "De esta manera, las copias de los mensajes se propagan rápidamente a través de redes conectadas, como una infección.",
        "Si un anfitrión se conecta a otra nube de nodos móviles durante su movimiento, el mensaje se propaga a través de esta colección de anfitriones.",
        "La replicación de datos y mensajes en estilo epidémico ha sido explotada en el pasado en muchos campos, comenzando por el área de sistemas de bases de datos distribuidas [2].",
        "Dentro del enrutamiento epidémico, cada anfitrión mantiene un búfer que contiene los mensajes que ha creado y las réplicas de los mensajes generados por los otros anfitriones.",
        "Para mejorar el rendimiento, una tabla hash indexa el contenido del búfer.",
        "Cuando dos anfitriones se conectan, el anfitrión con el identificador más pequeño inicia una sesión de anti-entropía, enviando una lista que contiene los identificadores únicos de los mensajes que actualmente almacena.",
        "El otro anfitrión evalúa esta lista y envía de vuelta una lista que contiene los identificadores que está almacenando y que no están presentes en el otro anfitrión, junto con los mensajes que el otro no tiene.",
        "El anfitrión que ha iniciado la sesión recibe la lista y, de la misma manera, envía los mensajes que no están presentes en el otro anfitrión.",
        "En caso de producirse un desbordamiento de búfer, los mensajes se descartan.",
        "La fiabilidad ofrecida por este protocolo es generalmente de mejor esfuerzo, ya que no hay garantía de que un mensaje finalmente sea entregado a su destinatario.",
        "Claramente, la proporción de entrega del protocolo aumenta proporcionalmente al tiempo máximo de retraso permitido y al tamaño del búfer en cada host (pueden encontrarse resultados interesantes de simulación en [16]). 4.3 Adaptación del Modelo de Mensajes JMS En esta sección, analizaremos los aspectos de nuestra adaptación de la especificación relacionados con el llamado Modelo de Mensajes JMS [5].",
        "Según esto, los mensajes JMS se caracterizan por algunas propiedades definidas utilizando el campo de encabezado, que contiene valores que son utilizados tanto por los clientes como por los proveedores para su entrega.",
        "Los aspectos discutidos en el resto de esta sección son válidos para ambos modelos (punto a punto y publicar-suscribir).",
        "Un mensaje JMS puede ser persistente o no persistente.",
        "Según la especificación de JMS, los mensajes persistentes deben entregarse con un grado de confiabilidad mayor que los no persistentes.",
        "Sin embargo, vale la pena señalar que no es posible garantizar la fiabilidad de una sola vez para mensajes persistentes según lo definido en la especificación, ya que, como discutimos en la subsección anterior, el protocolo epidémico subyacente solo puede garantizar la entrega de mejor esfuerzo.",
        "Sin embargo, los clientes mantienen una lista de los identificadores de los mensajes recibidos recientemente para evitar la entrega de mensajes duplicados.",
        "En otras palabras, proporcionamos a las aplicaciones una fiabilidad inmediata para ambos tipos de mensajes.",
        "Para implementar diferentes niveles de confiabilidad, EMMA trata de manera diferente los mensajes persistentes y no persistentes durante la ejecución del protocolo epidémico de anti-entropía.",
        "Dado que el espacio del búfer de mensajes es limitado, los mensajes persistentes se replican preferentemente utilizando el espacio libre disponible.",
        "Si esto es insuficiente y hay mensajes no persistentes presentes en el búfer, estos son reemplazados.",
        "Solo se notifican a los remitentes las entregas exitosas de los mensajes persistentes.",
        "Según la especificación de JMS, es posible asignar una prioridad a cada mensaje.",
        "Los mensajes con prioridades más altas se entregan de manera preferencial.",
        "Como se discutió anteriormente, los mensajes persistentes tienen prioridad sobre los no persistentes.",
        "La selección adicional se basa en sus prioridades.",
        "Los mensajes con prioridades más altas son tratados de manera preferencial.",
        "De hecho, si no hay suficiente espacio para replicar todos los mensajes persistentes, se utiliza un mecanismo basado en prioridades para eliminar y replicar los mensajes no persistentes (y, si es necesario, los mensajes persistentes).",
        "Los mensajes se eliminan de los buffers utilizando el valor de tiempo de expiración que puede ser establecido por los remitentes.",
        "Esta es una forma de liberar espacio en los búferes (se eliminan preferentemente los mensajes más antiguos en casos de conflicto); para eliminar réplicas obsoletas en el sistema; y para limitar el tiempo durante el cual los destinos deben mantener los identificadores de mensajes para desechar duplicados. Mecanismos de fiabilidad y de acuse de recibo Como ya se discutió, la entrega de mensajes como máximo una vez es lo mejor que se puede lograr en términos de semántica de entrega en entornos ad-hoc parcialmente conectados.",
        "Sin embargo, es posible mejorar la confiabilidad del sistema con mecanismos de acuse de recibo eficientes.",
        "EMMA proporciona un mecanismo de notificación de fallos a las aplicaciones si no se recibe el acuse de recibo dentro de un tiempo límite dado (que puede ser configurado por los desarrolladores de aplicaciones).",
        "Este mecanismo es el que distingue la entrega de mensajes persistentes y no persistentes en nuestra implementación de JMS: las entregas de los primeros son notificadas a los remitentes, mientras que los de los segundos no lo son.",
        "Utilizamos mensajes de acuse de recibo no solo para informar a los remitentes sobre la entrega exitosa de los mensajes, sino también para eliminar las réplicas de los mensajes entregados que aún están presentes en la red.",
        "Cada anfitrión mantiene una lista de los mensajes Middleware para la Computación Pervasiva y Ad-hoc 124 entregados con éxito que se actualiza como parte del proceso normal de intercambio de información entre los anfitriones.",
        "Las listas se intercambian durante los primeros pasos del protocolo de epidemia anti-entropía con una frecuencia predefinida.",
        "En el caso de mensajes con múltiples destinatarios, también se almacena una lista de los destinatarios reales.",
        "Cuando un anfitrión recibe la lista, verifica su búfer de mensajes y lo actualiza de acuerdo con las siguientes reglas: (1) si un mensaje tiene un único destinatario y ha sido entregado, se elimina del búfer; (2) si un mensaje tiene múltiples destinatarios, se eliminan los identificadores de los anfitriones a los que se ha entregado de la lista de destinatarios asociada.",
        "Si la longitud resultante de la lista de destinatarios es cero, el mensaje se elimina del búfer.",
        "Estas listas tienen, claramente, dimensiones finitas y se implementan como colas circulares.",
        "Este mecanismo simple, junto con el uso de marcas de tiempo de expiración, garantiza que las antiguas notificaciones de acuse de recibo sean eliminadas del sistema después de un período de tiempo limitado.",
        "Para mejorar la confiabilidad de EMMA, se podría desarrollar un mecanismo de diseño para la replicación inteligente de colas y temas basado en la información de contexto.",
        "Sin embargo, esto aún no forma parte de la arquitectura actual de EMMA. 5.",
        "IMPLEMENTACIÓN Y EVALUACIÓN PRELIMINAR Implementamos un prototipo de nuestra plataforma utilizando el Perfil Personal J2ME.",
        "El tamaño del ejecutable es de aproximadamente 250KB, incluido el archivo jar de JMS 1.1; esta es una cifra perfectamente aceptable dada la memoria disponible de los dispositivos móviles actuales en el mercado.",
        "Probamos nuestro prototipo en PDAs HP iPaq con Linux, interconectados con WaveLan, y en varios laptops con la misma interfaz de red.",
        "También evaluamos la plataforma de middleware utilizando el simulador de eventos discretos OMNET++ [17] para explorar una variedad de escenarios móviles que incorporaban un número más realista de hosts que el que se podía lograr experimentalmente.",
        "Más específicamente, evaluamos el rendimiento del sistema en términos de ratio de entrega y retraso promedio, variando la densidad de población y el tamaño del búfer, y utilizando mensajes persistentes y no persistentes con diferentes prioridades.",
        "Los resultados de la simulación muestran que el rendimiento de EMMAs, en términos de ratio de entrega y retraso de mensajes persistentes con prioridades más altas, es bueno.",
        "En general, es evidente que la proporción de entrega está fuertemente relacionada con el dimensionamiento correcto de los búferes para el retraso máximo aceptable.",
        "Además, los algoritmos epidémicos son capaces de garantizar una alta tasa de entrega si se evalúa el rendimiento durante un intervalo de tiempo suficiente para la difusión de las réplicas de los mensajes (es decir, la propagación de la infección) en una gran parte de la red ad-hoc.",
        "Una consecuencia del problema de dimensionamiento es que la escalabilidad puede verse seriamente afectada en middleware peer-to-peer para computación móvil debido a la escasez de recursos de los dispositivos (memoria limitada para almacenar temporalmente mensajes) y al número de posibles interconexiones en entornos ad-hoc.",
        "Lo peor es que las formas comunes de organización comercial y social (seis grados de separación) significan que incluso valores modestos de TTL en los mensajes provocarán una difusión generalizada de mensajes epidémicos.",
        "Este problema surge debido a la falta de inteligencia en el protocolo de la epidemia, y puede ser abordado seleccionando nodos portadores para los mensajes con mayor cuidado.",
        "Sin embargo, los detalles de este proceso están fuera del alcance de este documento (pero pueden encontrarse en [13]) y no afectan la base en la que se basa el middleware EMMA: la capacidad de entregar mensajes de forma asincrónica. 6.",
        "VISIÓN CRÍTICA DEL ESTADO DEL ARTE El diseño de plataformas de middleware para la computación móvil requiere que los investigadores respondan a preguntas nuevas y fundamentalmente diferentes; simplemente asumir la presencia de porciones cableadas de la red en las que pueda residir la funcionalidad centralizada no es generalizable.",
        "Por lo tanto, es necesario investigar nuevos principios de diseño y idear patrones arquitectónicos que difieran de los tradicionalmente utilizados en el diseño de middleware para sistemas fijos.",
        "Como ejemplo, considera la reciente tendencia de superposición de capas en redes ad-hoc [1].",
        "Esta es una forma de replantear el diseño de sistemas de software, abandonando explícitamente las formas clásicas de estratificación, ya que, aunque esta separación de preocupaciones permite la portabilidad, lo hace a expensas de posibles ganancias de eficiencia.",
        "Creemos que es posible ver nuestro enfoque como una instancia de superposición de capas.",
        "De hecho, hemos añadido el protocolo de red epidémica a nivel de middleware y, al mismo tiempo, hemos utilizado el protocolo de red síncrono existente si está presente tanto en la entrega de mensajes (capas tradicionales) como en informar al middleware sobre cuándo pueden entregarse los mensajes revelando detalles de las tablas de reenvío (violación de capas).",
        "Por esta razón, preferimos considerarlos conjuntamente como la capa de comunicación de nuestra plataforma, proporcionando juntos una entrega de mensajes más eficiente.",
        "Otro aspecto interesante es la explotación del contexto y la información del sistema para mejorar el rendimiento de las plataformas de middleware móvil.",
        "Una vez más, como resultado de adoptar una metodología de capas cruzadas, podemos construir sistemas que recopilan información del sistema operativo subyacente y los componentes de comunicación para permitir la adaptación del comportamiento.",
        "Podemos resumir este enfoque de diseño conceptual diciendo que las plataformas de middleware deben ser no solo conscientes del contexto (es decir, deben ser capaces de extraer y analizar información del contexto circundante) sino también conscientes del sistema (es decir, deben ser capaces de recopilar información de los componentes de software y hardware del sistema móvil).",
        "Se han desarrollado varios sistemas de middleware para admitir redes ad hoc con el uso de comunicación asíncrona (como LIME, XMIDDLE, STEAM [11]).",
        "En particular, la plataforma STEAM es un ejemplo interesante de middleware basado en eventos para redes ad hoc, que proporciona entrega de mensajes con conciencia de ubicación y una solución efectiva para el filtrado de eventos.",
        "Una discusión sobre JMS, y su realización móvil, ya ha sido realizada en las Secciones 4 y 2.",
        "La empresa suiza Softwired ha desarrollado el primer middleware JMS para computación móvil, llamado iBus Mobile [10].",
        "Los componentes principales de esta arquitectura típicamente basada en infraestructura son el proveedor de JMS, la llamada puerta de enlace móvil de JMS, que se despliega en un host fijo y una biblioteca de cliente JMS ligera.",
        "El gateway se utiliza para la comunicación entre el servidor de aplicaciones y los dispositivos móviles.",
        "El proveedor JMS ve la pasarela como un cliente JMS normal.",
        "El proveedor JMS puede ser cualquier servidor de aplicaciones habilitado para JMS, como BEA Weblogic.",
        "Pronto [19] es un ejemplo de un sistema de middleware basado en mensajería, diseñado específicamente para entornos móviles.",
        "La plataforma está compuesta por tres clases de componentes: clientes móviles que implementan la especificación JMS, pasarelas que controlan el tráfico, garantizando eficiencia y posibles personalizaciones de usuario utilizando diferentes complementos y servidores JMS.",
        "Diferentes configuraciones de estos componentes son posibles; con respecto a las aplicaciones de redes móviles ad hoc, la más interesante es Serverless JMS.",
        "El objetivo de esta configuración es adaptar JMS a un modelo descentralizado.",
        "El modelo de publicación-suscripción explota la eficiencia y la escalabilidad del protocolo de multidifusión IP subyacente.",
        "Se proporcionan servicios de entrega de mensajes poco confiables y confiables: la confiabilidad se logra a través de un protocolo basado en acuse de recibo negativo.",
        "Pronto representa una buena solución para redes móviles basadas en infraestructura, pero no se dirige adecuadamente a entornos ad-hoc, ya que los nodos móviles dependen de servidores fijos para el intercambio de mensajes.",
        "Existen otras MOM implementadas para entornos móviles; sin embargo, suelen ser extensiones sencillas de middleware existente [8].",
        "La única implementación de MOM específicamente diseñada para redes móviles ad-hoc fue desarrollada en la Universidad de Newcastle [18].",
        "Este trabajo es nuevamente una adaptación de JMS; el enfoque de esa implementación se centra en la comunicación de grupo y el uso de algoritmos de enrutamiento a nivel de aplicación para la entrega de mensajes por tema.",
        "Sin embargo, hay una serie de diferencias en el enfoque de nuestro trabajo.",
        "La importancia que atribuimos a las desconexiones hace que la persistencia sea un requisito vital para cualquier middleware que necesite ser utilizado en redes móviles ad-hoc.",
        "Los autores de [18] señalan la persistencia como un posible trabajo futuro, sin considerar el hecho de que enrutar un mensaje a un host no conectado resultará en un fallo de entrega.",
        "Esta es una limitación notable en entornos móviles donde las desconexiones impredecibles son la norma en lugar de la excepción. 7.",
        "MAPA Y CONCLUSIONES La comunicación asincrónica es un paradigma de comunicación útil para las redes móviles ad-hoc, ya que permite a los hosts llegar, irse y recoger mensajes cuando sea conveniente, teniendo en cuenta también la disponibilidad de sus recursos (por ejemplo, energía, niveles de conectividad).",
        "En este artículo hemos descrito el estado del arte en términos de MOM para sistemas móviles.",
        "También hemos demostrado una adaptación de prueba de concepto de JMS al escenario extremo de redes móviles ad-hoc parcialmente conectadas.",
        "Hemos descrito y discutido las características y diferencias de nuestra solución con respecto a las implementaciones tradicionales de JMS y las adaptaciones existentes para entornos móviles.",
        "Sin embargo, también se deben investigar los compromisos entre el enrutamiento a nivel de aplicación y el uso de recursos, ya que los dispositivos móviles suelen tener escasez de energía/recursos.",
        "Una limitación clave de este trabajo es el algoritmo epidémico que tiene un rendimiento deficiente y un avance importante en la practicabilidad de este trabajo requiere un algoritmo que equilibre mejor las necesidades de eficiencia y probabilidad de entrega de mensajes.",
        "Actualmente estamos trabajando en algoritmos y protocolos que, aprovechando técnicas probabilísticas y estadísticas sobre la base de pequeñas cantidades de información intercambiada, son capaces de mejorar considerablemente la eficiencia en términos de recursos (memoria, ancho de banda, etc.) y la confiabilidad de nuestra plataforma de middleware [13].",
        "Un desarrollo de investigación futurista, que podría llevar estas ideas de adaptación de middleware de mensajería para entornos móviles más allá, es la introducción de extensiones de comunicación más orientadas a la movilidad, como el soporte de geocast (es decir, la capacidad de enviar mensajes a áreas geográficas específicas).",
        "REFERENCIAS [1] M. Conti, G. Maselli, G. Turi y S. Giordano.",
        "Diseño de redes móviles ad-hoc con interconexión de capas.",
        "IEEE Computer, 37(2):48-51, febrero de 2004. [2] A. Demers, D. Greene, C. Hauser, W. Irish, J. Larson, S. Shenker, H. Sturgis, D. Swinehart y D. Terry.",
        "Algoritmos de epidemia para el mantenimiento de bases de datos replicadas.",
        "En el Sexto Simposio sobre Principios de Computación Distribuida, páginas 1-12, agosto de 1987. [3] A. Doria, M. Uden y D. P. Pandey.",
        "Proporcionando conectividad a la comunidad nómada Saami.",
        "En Actas de la Segunda Conferencia Internacional sobre Diseño Colaborativo Abierto para la Innovación Sostenible, diciembre de 2002. [4] M. Haahr, R. Cunningham y V. Cahill.",
        "Aplicaciones CORBA en un entorno móvil.",
        "En la 5ª Conferencia Internacional sobre Computación y Redes Móviles (MOBICOM99), páginas 36-47.",
        "ACM, agosto de 1999. [5] M. Hapner, R. Burridge, R. Sharma, J. Fialli y K. Stout.",
        "Especificación del Servicio de Mensajes Java Versión 1.1.",
        "Sun Microsystems, Inc., abril de 2002. http://java.sun.com/products/jms/. [6] J. Hart.",
        "WebSphere MQ: Conectando sus aplicaciones sin programación compleja.",
        "IBM WebSphere Software White Papers, 2003. [7] S. Hayward y M. Pezzini.",
        "Casando Middleware y Computación Móvil.",
        "Informe de investigación del Grupo Gartner, septiembre de 2001. [8] IBM.",
        "WebSphere MQ EveryPlace Versión 2.0, noviembre de 2002. http://www-3.ibm.com/software/integration/wmqe/. [9] UIT.",
        "Conectando comunidades remotas.",
        "Documentos de la Cumbre Mundial sobre la Sociedad de la Información, 2003. http://www.itu.int/osg/spu/wsis-themes. [10] S. Maffeis.",
        "Presentando JMS inalámbrico.",
        "Softwired AG, www.sofwired-inc.com, 2002. [11] C. Mascolo, L. Capra y W. Emmerich.",
        "Middleware para Computación Móvil.",
        "En E. Gregori, G. Anastasi y S. Basagni, editores, Conferencias Avanzadas sobre Redes, volumen 2497 de las Notas de Conferencias en Ciencias de la Computación, páginas 20-58.",
        "Springer Verlag, 2002. [12] Microsoft. \n\nSpringer Verlag, 2002. [12] Microsoft.",
        "Documentación de Microsoft Message Queuing (MSMQ) Versión 2.0. [13] M. Musolesi, S. Hailes y C. Mascolo.",
        "Enrutamiento adaptativo para redes ad-hoc móviles intermitentemente conectadas.",
        "Informe técnico, Nota de Investigación UCL-CS, julio de 2004.",
        "Enviado para su publicación. [14] Sun Microsystems.",
        "Documentación de Java Naming and Directory Interface (JNDI) Versión 1.2. 2003. http://java.sun.com/products/jndi/. [15] Sun Microsystems.",
        "Especificación de Jini Versión 2.0, 2003. http://java.sun.com/products/jini/. [16] A. Vahdat y D. Becker.",
        "Enrutamiento epidémico para redes ad-hoc parcialmente conectadas.",
        "Informe técnico CS-2000-06, Departamento de Ciencias de la Computación, Universidad de Duke, 2000. [17] A. Vargas.",
        "El sistema de simulación de eventos discretos OMNeT++.",
        "En Actas de la Multiconferencia Europea de Simulación (ESM2001), Praga, junio de 2001. [18] E. Vollset, D. Ingham y P. Ezhilchelvan.",
        "JMS en redes móviles ad-hoc.",
        "En Comunicaciones Inalámbricas Personales (PWC), páginas 40-52, Venecia, septiembre de 2003. [19] E. Yoneki y J. Bacon.",
        "Pronto: Mobilegateway con paradigma de publicación-suscripción sobre red inalámbrica.",
        "Informe Técnico 559, Universidad de Cambridge, Laboratorio de Computación, febrero de 2003.",
        "Middleware para Computación Pervasive y ad-hoc 126"
    ],
    "error_count": 2,
    "keys": {
        "asynchronous messaging middleware": {
            "translated_key": "Middleware de Mensajería Asincrónica",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Adapting <br>asynchronous messaging middleware</br> to ad-hoc Networking Mirco Musolesi Dept.",
                "of Computer Science, University College London Gower Street, London WC1E 6BT, United Kingdom m.musolesi@cs.ucl.ac.uk Cecilia Mascolo Dept. of Computer Science, University College London Gower Street, London WC1E 6BT, United Kingdom c.mascolo@cs.ucl.ac.uk Stephen Hailes Dept. of Computer Science, University College London Gower Street, London WC1E 6BT, United Kingdom s.hailes@cs.ucl.ac.uk ABSTRACT The characteristics of mobile environments, with the possibility of frequent disconnections and fluctuating bandwidth, have forced a rethink of traditional middleware.",
                "In particular, the synchronous communication paradigms often employed in standard middleware do not appear to be particularly suited to ad-hoc environments, in which not even the intermittent availability of a backbone network can be assumed.",
                "Instead, asynchronous communication seems to be a generally more suitable paradigm for such environments.",
                "Message oriented middleware for traditional systems has been developed and used to provide an asynchronous paradigm of communication for distributed systems, and, recently, also for some specific mobile computing systems.",
                "In this paper, we present our experience in designing, implementing and evaluating EMMA (Epidemic Messaging Middleware for ad-hoc networks), an adaptation of Java Message Service (JMS) for mobile ad-hoc environments.",
                "We discuss in detail the design challenges and some possible solutions, showing a concrete example of the feasibility and suitability of the application of the asynchronous paradigm in this setting and outlining a research roadmap for the coming years.",
                "Categories and Subject Descriptors C.2.4 [Computer-Communication Networks]: Distributed Systems-Distributed Applications; C.2.1 [Network Architecture and Design]: Wireless Communication General Terms DESIGN, ALGORITHMS 1.",
                "INTRODUCTION With the increasing popularity of mobile devices and their widespread adoption, there is a clear need to allow the development of a broad spectrum of applications that operate effectively over such an environment.",
                "Unfortunately, this is far from simple: mobile devices are increasingly heterogeneous in terms of processing capabilities, memory size, battery capacity, and network interfaces.",
                "Each such configuration has substantially different characteristics that are both statically different - for example, there is a major difference in capability between a Berkeley mote and an 802.11g-equipped laptop - and that vary dynamically, as in situations of fluctuating bandwidth and intermittent connectivity.",
                "Mobile ad hoc environments have an additional element of complexity in that they are entirely decentralised.",
                "In order to craft applications for such complex environments, an appropriate form of middleware is essential if cost effective development is to be achieved.",
                "In this paper, we examine one of the foundational aspects of middleware for mobile ad-hoc environments: that of the communication primitives.",
                "Traditionally, the most frequently used middleware primitives for communication assume the simultaneous presence of both end points on a network, since the stability and pervasiveness of the networking infrastructure is not an unreasonable assumption for most wired environments.",
                "In other words, most communication paradigms are synchronous: object oriented middleware such as CORBA and Java RMI are typical examples of middleware based on synchronous communication.",
                "In recent years, there has been growing interest in platforms based on asynchronous communication paradigms, such as publish-subscribe systems [6]: these have been exploited very successfully where there is application level asynchronicity.",
                "From a Gartner Market Report [7]: Given messageoriented-middlewares (MOM) popularity, scalability, flexibility, and affinity with mobile and wireless architectures, by 2004, MOM will emerge as the dominant form of communication middleware for linking mobile and enterprise applications (0.7 probability)....",
                "Moreover, in mobile ad-hoc systems, the likelihood of network fragmentation means that synchronous communication may in any case be impracticable, giving situations in which delay tolerant asynchronous traffic is the only form of traffic that could be supported. 121 Middleware 2004 Companion Middleware for mobile ad-hoc environments must therefore support semi-synchronous or completely asynchronous communication primitives if it is to avoid substantial limitations to its utility.",
                "Aside from the intellectual challenge in supporting this model, this work is also interesting because there are a number of practical application domains in allowing inter-community communication in undeveloped areas of the globe.",
                "Thus, for example, projects that have been carried out to help populations that live in remote places of the globe such as Lapland [3] or in poor areas that lack fixed connectivity infrastructure [9].",
                "There have been attempts to provide mobile middleware with these properties, including STEAM, LIME, XMIDDLE, Bayou (see [11] for a more complete review of mobile middleware).",
                "These models differ quite considerably from the existing traditional middleware in terms of primitives provided.",
                "Furthermore, some of them fail in providing a solution for the true ad-hoc scenarios.",
                "If the projected success of MOM becomes anything like a reality, there will be many programmers with experience of it.",
                "The ideal solution to the problem of middleware for ad-hoc systems is, then, to allow programmers to utilise the same paradigms and models presented by common forms of MOM and to ensure that these paradigms are supportable within the mobile environment.",
                "This approach has clear advantages in allowing applications developed on standard middleware platforms to be easily deployed on mobile devices.",
                "Indeed, some research has already led to the adaptation of traditional middleware platforms to mobile settings, mainly to provide integration between mobile devices and existing fixed networks in a nomadic (i.e., mixed) environment [4].",
                "With respect to message oriented middleware, the current implementations, however, either assume the existence of a backbone network to which the mobile hosts connect from time to time while roaming [10], or assume that nodes are always somehow reachable through a path [18].",
                "No adaptation to heterogeneous or completely ad-hoc scenarios, with frequent disconnection and periodically isolated clouds of hosts, has been attempted.",
                "In the remainder of this paper we describe an initial attempt to adapt message oriented middleware to suit mobile and, more specifically, mobile ad-hoc networks.",
                "In our case, we elected to examine JMS, as one of the most widely known MOM systems.",
                "In the latter part of this paper, we explore the limitations of our results and describe the plans we have to take the work further. 2.",
                "MESSAGE ORIENTED MIDDLEWARE AND JAVA MESSAGE SERVICE (JMS) Message-oriented middleware systems support communication between distributed components via message-passing: the sender sends a message to identified queues, which usually reside on a server.",
                "A receiver retrieves the message from the queue at a different time and may acknowledge the reply using the same asynchronous mechanism.",
                "Message-oriented middleware thus supports asynchronous communication in a very natural way, achieving de-coupling of senders and receivers.",
                "A sender is able to continue processing as soon as the middleware has accepted the message; eventually, the receiver will send an acknowledgment message and the sender will be able to collect it at a convenient time.",
                "However, given the way they are implemented, these middleware systems usually require resource-rich devices, especially in terms of memory and disk space, where persistent queues of messages that have been received but not yet processed, are stored.",
                "Sun Java Message Service [5], IBM WebSphere MQ [6], Microsoft MSMQ [12] are examples of very successful message-oriented middleware for traditional distributed systems.",
                "The Java Messaging Service (JMS) is a collection of interfaces for asynchronous communication between distributed components.",
                "It provides a common way for Java programs to create, send and receive messages.",
                "JMS users are usually referred to as clients.",
                "The JMS specification further defines providers as the components in charge of implementing the messaging system and providing the administrative and control functionality (i.e., persistence and reliability) required by the system.",
                "Clients can send and receive messages, asynchronously, through the JMS provider, which is in charge of the delivery and, possibly, of the persistence of the messages.",
                "There are two types of communication supported: point to point and publish-subscribe models.",
                "In the point to point model, hosts send messages to queues.",
                "Receivers can be registered with some specific queues, and can asynchronously retrieve the messages and then acknowledge them.",
                "The publish-subscribe model is based on the use of topics that can be subscribed to by clients.",
                "Messages are sent to topics by other clients and are then received in an asynchronous mode by all the subscribed clients.",
                "Clients learn about the available topics and queues through Java Naming and Directory Interface (JNDI) [14].",
                "Queues and topics are created by an administrator on the provider and are registered with the JNDI interface for look-up.",
                "In the next section, we introduce the challenges of mobile networks, and show how JMS can be adapted to cope with these requirements. 3.",
                "JMS FOR MOBILE COMPUTING Mobile networks vary very widely in their characteristics, from nomadic networks in which modes relocate whilst offline through to ad-hoc networks in which modes move freely and in which there is no infrastructure.",
                "Mobile ad-hoc networks are most generally applicable in situations where survivability and instant deployability are key: most notably in military applications and disaster relief.",
                "In between these two types of mobile networks, there are, however, a number of possible heterogeneous combinations, where nomadic and ad-hoc paradigms are used to interconnect totally unwired areas to more structured networks (such as a LAN or the Internet).",
                "Whilst the JMS specification has been extensively implemented and used in traditional distributed systems, adaptations for mobile environments have been proposed only recently.",
                "The challenges of porting JMS to mobile settings are considerable; however, in view of its widespread acceptance and use, there are considerable advantages in allowing the adaptation of existing applications to mobile environments and in allowing the interoperation of applications in the wired and wireless regions of a network.",
                "In [10], JMS was adapted to a nomadic mobile setting, where mobile hosts can be JMS clients and communicate through the JMS provider that, however, sits on a backbone network, providing reliability and persistence.",
                "The client prototype presented in [10] is very lightweight, due to the delegation of all the heavyweight functionality to the Middleware for Pervasive and ad-hoc Computing 122 provider on the wired network.",
                "However, this approach is somewhat limited in terms of widespread applicability and scalability as a consequence of the concentration of functionality in the wired portion of the network.",
                "If JMS is to be adapted to completely ad-hoc environments, where no fixed infrastructure is available, and where nodes change location and status very dynamically, more issues must be taken into consideration.",
                "Firstly, discovery needs to use a resilient but distributed model: in this extremely dynamic environment, static solutions are unacceptable.",
                "As discussed in Section 2, a JMS administrator defines queues and topics on the provider.",
                "Clients can then learn about them using the Java Naming and Directory Interface (JNDI).",
                "However, due to the way JNDI is designed, a JNDI node (or more than one) needs to be in reach in order to obtain a binding of a name to an address (i.e., knowing where a specific queue/topic is).",
                "In mobile ad-hoc environments, the discovery process cannot assume the existence of a fixed set of discovery servers that are always reachable, as this would not match the dynamicity of ad-hoc networks.",
                "Secondly, a JMS Provider, as suggested by the JMS specification, also needs to be reachable by each node in the network, in order to communicate.",
                "This assumes a very centralised architecture, which again does not match the requirements of a mobile ad-hoc setting, in which nodes may be moving and sparse: a more distributed and dynamic solution is needed.",
                "Persistence is, however, essential functionality in asynchronous communication environments as hosts are, by definition, connected at different times.",
                "In the following section, we will discuss our experience in designing and implementing JMS for mobile ad-hoc networks. 4.",
                "JMSFOR MOBILE ad-hoc NETWORKS 4.1 Adaptation of JMS for Mobile ad-hoc Networks Developing applications for mobile networks is yet more challenging: in addition to the same considerations as for infrastructured wireless environments, such as the limited device capabilities and power constraints, there are issues of rate of change of network connectivity, and the lack of a static routing infrastructure.",
                "Consequently, we now describe an initial attempt to adapt the JMS specification to target the particular requirements related to ad-hoc scenarios.",
                "As discussed in Section 3, a JMS application can use either the point to point and the publish-subscribe styles of messaging.",
                "Point to Point Model The point to point model is based on the concept of queues, that are used to enable asynchronous communication between the producer of a message and possible different consumers.",
                "In our solution, the location of queues is determined by a negotiation process that is application dependent.",
                "For example, let us suppose that it is possible to know a priori, or it is possible to determine dynamically, that a certain host is the receiver of the most part of messages sent to a particular queue.",
                "In this case, the optimum location of the queue may well be on this particular host.",
                "In general, it is worth noting that, according to the JMS specification and suggested design patterns, it is common and preferable for a client to have all of its messages delivered to a single queue.",
                "Queues are advertised periodically to the hosts that are within transmission range or that are reachable by means of the underlying synchronous communication protocol, if provided.",
                "It is important to note that, at the middleware level, it is logically irrelevant whether or not the network layer implements some form of ad-hoc routing (though considerably more efficient if it does); the middleware only considers information about which nodes are actively reachable at any point in time.",
                "The hosts that receive advertisement messages add entries to their JNDI registry.",
                "Each entry is characterized by a lease (a mechanism similar to that present in Jini [15]).",
                "A lease represents the time of validity of a particular entry.",
                "If a lease is not refreshed (i.e, its life is not extended), it can expire and, consequently, the entry is deleted from the registry.",
                "In other words, the host assumes that the queue will be unreachable from that point in time.",
                "This may be caused, for example, if a host storing the queue becomes unreachable.",
                "A host that initiates a discovery process will find the topics and the queues present in its connected portion of the network in a straightforward manner.",
                "In order to deliver a message to a host that is not currently in reach1 , we use an asynchronous epidemic routing protocol that will be discussed in detail in Section 4.2.",
                "If two hosts are in the same cloud (i.e., a connected path exists between them), but no synchronous protocol is available, the messages are sent using the epidemic protocol.",
                "In this case, the delivery latency will be low as a result of the rapidity of propagation of the infection in the connected cloud (see also the simulation results in Section 5).",
                "Given the existence of an epidemic protocol, the discovery mechanism consists of advertising the queues to the hosts that are currently unreachable using analogous mechanisms.",
                "Publish-Subscribe Model In the publish-subscribe model, some of the hosts are similarly designated to hold topics and store subscriptions, as before.",
                "Topics are advertised through the registry in the same way as are queues, and a client wishing to subscribe to a topic must register with the client holding the topic.",
                "When a client wishes to send a message to the topic list, it sends it to the topic holder (in the same way as it would send a message to a queue).",
                "The topic holder then forwards the message to all subscribers, using the synchronous protocol if possible, the epidemic protocol otherwise.",
                "It is worth noting that we use a single message with multiple recipients, instead of multiple messages with multiple recipients.",
                "When a message is delivered to one of the subscribers, this recipient is deleted from the list.",
                "In order to delete the other possible replicas, we employ acknowledgment messages (discussed in Section 4.4), returned in the same way as a normal message.",
                "We have also adapted the concepts of durable and non durable subscriptions for ad-hoc settings.",
                "In fixed platforms, durable subscriptions are maintained during the disconnections of the clients, whether these are intentional or are the result of failures.",
                "In traditional systems, while a durable subscriber is disconnected from the server, it is responsible for storing messages.",
                "When the durable subscriber reconnects, the server sends it all unexpired messages.",
                "The problem is that, in our scenario, disconnections are the norm 1 In theory, it is not possible to send a message to a peer that has never been reachable in the past, since there can be no entry present in the registry.",
                "However, to overcome this possible limitation, we provide a primitive through which information can be added to the registry without using the normal channels. 123 Middleware 2004 Companion rather than the exception.",
                "In other words, we cannot consider disconnections as failures.",
                "For these reasons, we adopt a slightly different semantics.",
                "With respect to durable subscriptions, if a subscriber becomes disconnected, notifications are not stored but are sent using the epidemic protocol rather than the synchronous protocol.",
                "In other words, durable notifications remain valid during the possible disconnections of the subscriber.",
                "On the other hand, if a non-durable subscriber becomes disconnected, its subscription is deleted; in other words, during disconnections, notifications are not sent using the epidemic protocol but exploit only the synchronous protocol.",
                "If the topic becomes accessible to this host again, it must make another subscription in order to receive the notifications.",
                "Unsubscription messages are delivered in the same way as are subscription messages.",
                "It is important to note that durable subscribers have explicitly to unsubscribe from a topic in order to stop the notification process; however, all durable subscriptions have a predefined expiration time in order to cope with the cases of subscribers that do not meet again because of their movements or failures.",
                "This feature is clearly provided to limit the number of the unnecessary messages sent around the network. 4.2 Message Delivery using Epidemic Routing In this section, we examine one possible mechanism that will allow the delivery of messages in a partially connected network.",
                "The mechanism we discuss is intended for the purposes of demonstrating feasibility; more efficient communication mechanisms for this environment are themselves complex, and are the subject of another paper [13].",
                "The asynchronous message delivery described above is based on a typical pure epidemic-style routing protocol [16].",
                "A message that needs to be sent is replicated on each host in reach.",
                "In this way, copies of the messages are quickly spread through connected networks, like an infection.",
                "If a host becomes connected to another cloud of mobile nodes, during its movement, the message spreads through this collection of hosts.",
                "Epidemic-style replication of data and messages has been exploited in the past in many fields starting with the distributed database systems area [2].",
                "Within epidemic routing, each host maintains a buffer containing the messages that it has created and the replicas of the messages generated by the other hosts.",
                "To improve the performance, a hash-table indexes the content of the buffer.",
                "When two hosts connect, the host with the smaller identifier initiates a so-called anti-entropy session, sending a list containing the unique identifiers of the messages that it currently stores.",
                "The other host evaluates this list and sends back a list containing the identifiers it is storing that are not present in the other host, together with the messages that the other does not have.",
                "The host that has started the session receives the list and, in the same way, sends the messages that are not present in the other host.",
                "Should buffer overflow occur, messages are dropped.",
                "The reliability offered by this protocol is typically best effort, since there is no guarantee that a message will eventually be delivered to its recipient.",
                "Clearly, the delivery ratio of the protocol increases proportionally to the maximum allowed delay time and the buffer size in each host (interesting simulation results may be found in [16]). 4.3 Adaptation of the JMS Message Model In this section, we will analyse the aspects of our adaptation of the specification related to the so-called JMS Message Model [5].",
                "According to this, JMS messages are characterised by some properties defined using the header field, which contains values that are used by both clients and providers for their delivery.",
                "The aspects discussed in the remainder of this section are valid for both models (point to point and publish-subscribe).",
                "A JMS message can be persistent or non-persistent.",
                "According to the JMS specification, persistent messages must be delivered with a higher degree of reliability than the nonpersistent ones.",
                "However, it is worth noting that it is not possible to ensure once-and-only-once reliability for persistent messages as defined in the specification, since, as we discussed in the previous subsection, the underlying epidemic protocol can guarantee only best-effort delivery.",
                "However, clients maintain a list of the identifiers of the recently received messages to avoid the delivery of message duplicates.",
                "In other words, we provide the applications with at-mostonce reliability for both types of messages.",
                "In order to implement different levels of reliability, EMMA treats persistent and non-persistent messages differently, during the execution of the anti-entropy epidemic protocol.",
                "Since the message buffer space is limited, persistent messages are preferentially replicated using the available free space.",
                "If this is insufficient and non-persistent messages are present in the buffer, these are replaced.",
                "Only the successful deliveries of the persistent messages are notified to the senders.",
                "According to the JMS specification, it is possible to assign a priority to each message.",
                "The messages with higher priorities are delivered in a preferential way.",
                "As discussed above, persistent messages are prioritised above the non-persistent ones.",
                "Further selection is based on their priorities.",
                "Messages with higher priorities are treated in a preferential way.",
                "In fact, if there is not enough space to replicate all the persistent messages, a mechanism based on priorities is used to delete and replicate non-persistent messages (and, if necessary, persistent messages).",
                "Messages are deleted from the buffers using the expiration time value that can be set by senders.",
                "This is a way to free space in the buffers (one preferentially deletes older messages in cases of conflict); to eliminate stale replicas in the system; and to limit the time for which destinations must hold message identifiers to dispose of duplicates. 4.4 Reliability and Acknowledgment Mechanisms As already discussed, at-most-once message delivery is the best that can be achieved in terms of delivery semantics in partially connected ad-hoc settings.",
                "However, it is possible to improve the reliability of the system with efficient acknowledgment mechanisms.",
                "EMMA provides a mechanism for failure notification to applications if the acknowledgment is not received within a given timeout (that can be configured by application developers).",
                "This mechanism is the one that distinguishes the delivery of persistent and non-persistent messages in our JMS implementation: the deliveries of the former are notified to the senders, whereas the latter are not.",
                "We use acknowledgment messages not only to inform senders about the successful delivery of messages but also to delete the replicas of the delivered messages that are still present in the network.",
                "Each host maintains a list of the messages Middleware for Pervasive and ad-hoc Computing 124 successfully delivered that is updated as part of the normal process of information exchange between the hosts.",
                "The lists are exchanged during the first steps of the anti-entropic epidemic protocol with a certain predefined frequency.",
                "In the case of messages with multiple recipients, a list of the actual recipients is also stored.",
                "When a host receives the list, it checks its message buffer and updates it according to the following rules: (1) if a message has a single recipient and it has been delivered, it is deleted from the buffer; (2) if a message has multiple recipients, the identifiers of the delivered hosts are deleted from the associated list of recipients.",
                "If the resulting length of the list of recipients is zero, the message is deleted from the buffer.",
                "These lists have, clearly, finite dimensions and are implemented as circular queues.",
                "This simple mechanism, together with the use of expiration timestamps, guarantees that the old acknowledgment notifications are deleted from the system after a limited period of time.",
                "In order to improve the reliability of EMMA, a design mechanism for intelligent replication of queues and topics based on the context information could be developed.",
                "However this is not yet part of the current architecture of EMMA. 5.",
                "IMPLEMENTATION AND PRELIMINARY EVALUATION We implemented a prototype of our platform using the J2ME Personal Profile.",
                "The size of the executable is about 250KB including the JMS 1.1 jar file; this is a perfectly acceptable figure given the available memory of the current mobile devices on the market.",
                "We tested our prototype on HP IPaq PDAs running Linux, interconnected with WaveLan, and on a number of laptops with the same network interface.",
                "We also evaluated the middleware platform using the OMNET++ discrete event simulator [17] in order to explore a range of mobile scenarios that incorporated a more realistic number of hosts than was achievable experimentally.",
                "More specifically, we assessed the performance of the system in terms of delivery ratio and average delay, varying the density of population and the buffer size, and using persistent and non-persistent messages with different priorities.",
                "The simulation results show that the EMMAs performance, in terms of delivery ratio and delay of persistent messages with higher priorities, is good.",
                "In general, it is evident that the delivery ratio is strongly related to the correct dimensioning of the buffers to the maximum acceptable delay.",
                "Moreover, the epidemic algorithms are able to guarantee a high delivery ratio if one evaluates performance over a time interval sufficient for the dissemination of the replicas of messages (i.e., the infection spreading) in a large portion of the ad-hoc network.",
                "One consequence of the dimensioning problem is that scalability may be seriously impacted in peer-to-peer middleware for mobile computing due to the resource poverty of the devices (limited memory to store temporarily messages) and the number of possible interconnections in ad-hoc settings.",
                "What is worse is that common forms of commercial and social organisation (six degrees of separation) mean that even modest TTL values on messages will lead to widespread flooding of epidemic messages.",
                "This problem arises because of the lack of intelligence in the epidemic protocol, and can be addressed by selecting carrier nodes for messages with greater care.",
                "The details of this process are, however, outside the scope of this paper (but may be found in [13]) and do not affect the foundation on which the EMMA middleware is based: the ability to deliver messages asynchronously. 6.",
                "CRITICAL VIEW OF THE STATE OF THE ART The design of middleware platforms for mobile computing requires researchers to answer new and fundamentally different questions; simply assuming the presence of wired portions of the network on which centralised functionality can reside is not generalisable.",
                "Thus, it is necessary to investigate novel design principles and to devise architectural patterns that differ from those traditionally exploited in the design of middleware for fixed systems.",
                "As an example, consider the recent cross-layering trend in ad-hoc networking [1].",
                "This is a way of re-thinking software systems design, explicitly abandoning the classical forms of layering, since, although this separation of concerns afford portability, it does so at the expense of potential efficiency gains.",
                "We believe that it is possible to view our approach as an instance of cross-layering.",
                "In fact, we have added the epidemic network protocol at middleware level and, at the same time, we have used the existing synchronous network protocol if present both in delivering messages (traditional layering) and in informing the middleware about when messages may be delivered by revealing details of the forwarding tables (layer violation).",
                "For this reason, we prefer to consider them jointly as the communication layer of our platform together providing more efficient message delivery.",
                "Another interesting aspect is the exploitation of context and system information to improve the performance of mobile middleware platforms.",
                "Again, as a result of adopting a cross-layering methodology, we are able to build systems that gather information from the underlying operating system and communication components in order to allow for adaptation of behaviour.",
                "We can summarise this conceptual design approach by saying that middleware platforms must be not only context-aware (i.e., they should be able to extract and analyse information from the surrounding context) but also system-aware (i.e., they should be able to gather information from the software and hardware components of the mobile system).",
                "A number of middleware systems have been developed to support ad-hoc networking with the use of asynchronous communication (such as LIME, XMIDDLE, STEAM [11]).",
                "In particular, the STEAM platform is an interesting example of event-based middleware for ad-hoc networks, providing location-aware message delivery and an effective solution for event filtering.",
                "A discussion of JMS, and its mobile realisation, has already been conducted in Sections 4 and 2.",
                "The Swiss company Softwired has developed the first JMS middleware for mobile computing, called iBus Mobile [10].",
                "The main components of this typically infrastructure-based architecture are the JMS provider, the so-called mobile JMS gateway, which is deployed on a fixed host and a lightweight JMS client library.",
                "The gateway is used for the communication between the application server and mobile hosts.",
                "The gateway is seen by the JMS provider as a normal JMS client.",
                "The JMS provider can be any JMS-enabled application server, such as BEA Weblogic.",
                "Pronto [19] is an example of mid125 Middleware 2004 Companion dleware system based on messaging that is specifically designed for mobile environments.",
                "The platform is composed of three classes of components: mobile clients implementing the JMS specification, gateways that control traffic, guaranteeing efficiency and possible user customizations using different plug-ins and JMS servers.",
                "Different configurations of these components are possible; with respect to mobile ad hoc networks applications, the most interesting is Serverless JMS.",
                "The aim of this configuration is to adapt JMS to a decentralized model.",
                "The publish-subscribe model exploits the efficiency and the scalability of the underlying IP multicast protocol.",
                "Unreliable and reliable message delivery services are provided: reliability is provided through a negative acknowledgment-based protocol.",
                "Pronto represents a good solution for infrastructure-based mobile networks but it does not adequately target ad-hoc settings, since mobile nodes rely on fixed servers for the exchange of messages.",
                "Other MOM implemented for mobile environments exist; however, they are usually straightforward extensions of existing middleware [8].",
                "The only implementation of MOM specifically designed for mobile ad-hoc networks was developed at the University of Newcastle [18].",
                "This work is again a JMS adaptation; the focus of that implementation is on group communication and the use of application level routing algorithms for topic delivery of messages.",
                "However, there are a number of differences in the focus of our work.",
                "The importance that we attribute to disconnections makes persistence a vital requirement for any middleware that needs to be used in mobile ad-hoc networks.",
                "The authors of [18] signal persistence as possible future work, not considering the fact that routing a message to a non-connected host will result in delivery failure.",
                "This is a remarkable limitation in mobile settings where unpredictable disconnections are the norm rather than the exception. 7.",
                "ROADMAP AND CONCLUSIONS Asynchronous communication is a useful communication paradigm for mobile ad-hoc networks, as hosts are allowed to come, go and pick up messages when convenient, also taking account of their resource availability (e.g., power, connectivity levels).",
                "In this paper we have described the state of the art in terms of MOM for mobile systems.",
                "We have also shown a proof of concept adaptation of JMS to the extreme scenario of partially connected mobile ad-hoc networks.",
                "We have described and discussed the characteristics and differences of our solution with respect to traditional JMS implementations and the existing adaptations for mobile settings.",
                "However, trade-offs between application-level routing and resource usage should also be investigated, as mobile devices are commonly power/resource scarce.",
                "A key limitation of this work is the poorly performing epidemic algorithm and an important advance in the practicability of this work requires an algorithm that better balances the needs of efficiency and message delivery probability.",
                "We are currently working on algorithms and protocols that, exploiting probabilistic and statistical techniques on the basis of small amounts of exchanged information, are able to improve considerably the efficiency in terms of resources (memory, bandwidth, etc) and the reliability of our middleware platform [13].",
                "One futuristic research development, which may take these ideas of adaptation of messaging middleware for mobile environments further is the introduction of more mobility oriented communication extensions, for instance the support of geocast (i.e., the ability to send messages to specific geographical areas). 8.",
                "REFERENCES [1] M. Conti, G. Maselli, G. Turi, and S. Giordano.",
                "Cross-layering in Mobile ad-hoc Network Design.",
                "IEEE Computer, 37(2):48-51, February 2004. [2] A. Demers, D. Greene, C. Hauser, W. Irish, J. Larson, S. Shenker, H. Sturgis, D. Swinehart, and D. Terry.",
                "Epidemic Algorithms for Replicated Database Maintenance.",
                "In Sixth Symposium on Principles of Distributed Computing, pages 1-12, August 1987. [3] A. Doria, M. Uden, and D. P. Pandey.",
                "Providing connectivity to the Saami nomadic community.",
                "In Proceedings of the Second International Conference on Open Collaborative Design for Sustainable Innovation, December 2002. [4] M. Haahr, R. Cunningham, and V. Cahill.",
                "Supporting CORBA applications in a Mobile Environment.",
                "In 5th International Conference on Mobile Computing and Networking (MOBICOM99), pages 36-47.",
                "ACM, August 1999. [5] M. Hapner, R. Burridge, R. Sharma, J. Fialli, and K. Stout.",
                "Java Message Service Specification Version 1.1.",
                "Sun Microsystems, Inc., April 2002. http://java.sun.com/products/jms/. [6] J. Hart.",
                "WebSphere MQ: Connecting your applications without complex programming.",
                "IBM WebSphere Software White Papers, 2003. [7] S. Hayward and M. Pezzini.",
                "Marrying Middleware and Mobile Computing.",
                "Gartner Group Research Report, September 2001. [8] IBM.",
                "WebSphere MQ EveryPlace Version 2.0, November 2002. http://www-3.ibm.com/software/integration/wmqe/. [9] ITU.",
                "Connecting remote communities.",
                "Documents of the World Summit on Information Society, 2003. http://www.itu.int/osg/spu/wsis-themes. [10] S. Maffeis.",
                "Introducing Wireless JMS.",
                "Softwired AG, www.sofwired-inc.com, 2002. [11] C. Mascolo, L. Capra, and W. Emmerich.",
                "Middleware for Mobile Computing.",
                "In E. Gregori, G. Anastasi, and S. Basagni, editors, Advanced Lectures on Networking, volume 2497 of Lecture Notes in Computer Science, pages 20-58.",
                "Springer Verlag, 2002. [12] Microsoft.",
                "Microsoft Message Queuing (MSMQ) Version 2.0 Documentation. [13] M. Musolesi, S. Hailes, and C. Mascolo.",
                "Adaptive routing for intermittently connected mobile ad-hoc networks.",
                "Technical report, UCL-CS Research Note, July 2004.",
                "Submitted for Publication. [14] Sun Microsystems.",
                "Java Naming and Directory Interface (JNDI) Documentation Version 1.2. 2003. http://java.sun.com/products/jndi/. [15] Sun Microsystems.",
                "Jini Specification Version 2.0, 2003. http://java.sun.com/products/jini/. [16] A. Vahdat and D. Becker.",
                "Epidemic routing for Partially Connected ad-hoc Networks.",
                "Technical Report CS-2000-06, Department of Computer Science, Duke University, 2000. [17] A. Vargas.",
                "The OMNeT++ discrete event simulation system.",
                "In Proceedings of the European Simulation Multiconference (ESM2001), Prague, June 2001. [18] E. Vollset, D. Ingham, and P. Ezhilchelvan.",
                "JMS on Mobile ad-hoc Networks.",
                "In Personal Wireless Communications (PWC), pages 40-52, Venice, September 2003. [19] E. Yoneki and J. Bacon.",
                "Pronto: Mobilegateway with publish-subscribe paradigm over wireless network.",
                "Technical Report 559, University of Cambridge, Computer Laboratory, February 2003.",
                "Middleware for Pervasive and ad-hoc Computing 126"
            ],
            "original_annotated_samples": [
                "Adapting <br>asynchronous messaging middleware</br> to ad-hoc Networking Mirco Musolesi Dept."
            ],
            "translated_annotated_samples": [
                "Adaptando <br>Middleware de Mensajería Asincrónica</br> a Redes Ad-hoc Mirco Musolesi Dept."
            ],
            "translated_text": "Adaptando <br>Middleware de Mensajería Asincrónica</br> a Redes Ad-hoc Mirco Musolesi Dept. Las características de los entornos móviles, con la posibilidad de desconexiones frecuentes y ancho de banda fluctuante, han obligado a replantear el middleware tradicional. En particular, los paradigmas de comunicación síncrona a menudo empleados en middleware estándar no parecen ser particularmente adecuados para entornos ad-hoc, en los que ni siquiera se puede asumir la disponibilidad intermitente de una red troncal. En cambio, la comunicación asincrónica parece ser un paradigma generalmente más adecuado para este tipo de entornos. Se ha desarrollado y utilizado middleware orientado a mensajes para sistemas tradicionales con el fin de proporcionar un paradigma de comunicación asíncrona para sistemas distribuidos, y, recientemente, también para algunos sistemas específicos de computación móvil. En este artículo, presentamos nuestra experiencia en el diseño, implementación y evaluación de EMMA (Middleware de Mensajería Epidémica para redes ad-hoc), una adaptación del Servicio de Mensajes Java (JMS) para entornos móviles ad-hoc. Discutimos en detalle los desafíos de diseño y algunas posibles soluciones, mostrando un ejemplo concreto de la viabilidad y adecuación de la aplicación del paradigma asíncrono en este contexto y delineando un plan de investigación para los próximos años. Categorías y Descriptores de Asignaturas C.2.4 [Redes de Computadoras-Comunicación]: Sistemas Distribuidos-Aplicaciones Distribuidas; C.2.1 [Arquitectura y Diseño de Redes]: Comunicación Inalámbrica Términos Generales DISEÑO, ALGORITMOS 1. INTRODUCCIÓN Con la creciente popularidad de los dispositivos móviles y su amplia adopción, existe una clara necesidad de permitir el desarrollo de un amplio espectro de aplicaciones que operen de manera efectiva en dicho entorno. Lamentablemente, esto está lejos de ser simple: los dispositivos móviles son cada vez más heterogéneos en cuanto a capacidades de procesamiento, tamaño de memoria, capacidad de batería e interfaces de red. Cada una de estas configuraciones tiene características sustancialmente diferentes que son estáticamente distintas, por ejemplo, hay una gran diferencia en la capacidad entre un mote de Berkeley y un portátil equipado con 802.11g, y que varían dinámicamente, como en situaciones de ancho de banda fluctuante y conectividad intermitente. Los entornos móviles ad hoc tienen un elemento adicional de complejidad en que son completamente descentralizados. Para poder desarrollar aplicaciones para entornos tan complejos, es esencial contar con una forma adecuada de middleware si se busca lograr un desarrollo rentable. En este artículo, examinamos uno de los aspectos fundamentales de middleware para entornos móviles ad-hoc: el de los primitivos de comunicación. Tradicionalmente, los primitivos de middleware más utilizados para la comunicación asumen la presencia simultánea de ambos puntos finales en una red, ya que la estabilidad y la ubicuidad de la infraestructura de redes no es una suposición irrazonable para la mayoría de los entornos cableados. En otras palabras, la mayoría de los paradigmas de comunicación son síncronos: middleware orientado a objetos como CORBA y Java RMI son ejemplos típicos de middleware basado en comunicación síncrona. En los últimos años, ha habido un creciente interés en plataformas basadas en paradigmas de comunicación asincrónica, como los sistemas de publicación-suscripción: estos han sido explotados con mucho éxito donde existe asincronía a nivel de aplicación. De acuerdo con un informe de mercado de Gartner [7]: Dada la popularidad, escalabilidad, flexibilidad y afinidad con arquitecturas móviles e inalámbricas de los middlewares orientados a mensajes (MOM), para el año 2004, es probable que MOM se convierta en la forma dominante de middleware de comunicación para vincular aplicaciones móviles y empresariales (probabilidad del 0.7)... Además, en sistemas ad-hoc móviles, la probabilidad de fragmentación de la red significa que la comunicación síncrona puede resultar impracticable en cualquier caso, lo que da lugar a situaciones en las que el tráfico asincrónico tolerante a retrasos es la única forma de tráfico que podría ser admitida. El middleware para entornos ad-hoc móviles debe, por lo tanto, admitir primitivas de comunicación semi-síncronas o completamente asíncronas si se quiere evitar limitaciones sustanciales en su utilidad. Además del desafío intelectual que implica apoyar este modelo, este trabajo también es interesante porque existen varios ámbitos de aplicación práctica al permitir la comunicación entre comunidades en áreas subdesarrolladas del mundo. Por lo tanto, por ejemplo, proyectos que se han llevado a cabo para ayudar a poblaciones que viven en lugares remotos del mundo como Laponia o en áreas pobres que carecen de infraestructura de conectividad fija. Ha habido intentos de proporcionar middleware móvil con estas propiedades, incluyendo STEAM, LIME, XMIDDLE, Bayou (consulte [11] para una revisión más completa del middleware móvil). Estos modelos difieren considerablemente de los middleware tradicionales existentes en cuanto a los primitivos proporcionados. Además, algunos de ellos fallan en proporcionar una solución para los verdaderos escenarios ad-hoc. Si el éxito proyectado de MOM se convierte en algo parecido a la realidad, habrá muchos programadores con experiencia en ello. La solución ideal al problema del middleware para sistemas ad-hoc es, entonces, permitir a los programadores utilizar los mismos paradigmas y modelos presentados por formas comunes de MOM y asegurar que estos paradigmas sean soportables dentro del entorno móvil. Este enfoque tiene claras ventajas al permitir que las aplicaciones desarrolladas en plataformas de middleware estándar se desplieguen fácilmente en dispositivos móviles. De hecho, algunas investigaciones ya han llevado a la adaptación de plataformas de middleware tradicionales a entornos móviles, principalmente para proporcionar integración entre dispositivos móviles y redes fijas existentes en un entorno nómada (es decir, mixto) [4]. En lo que respecta al middleware orientado a mensajes, las implementaciones actuales, sin embargo, asumen la existencia de una red troncal a la que los hosts móviles se conectan de vez en cuando mientras están en itinerancia [10], o asumen que los nodos siempre son de alguna manera accesibles a través de un camino [18]. No se ha intentado ninguna adaptación a escenarios heterogéneos o completamente ad hoc, con desconexiones frecuentes y nubes periódicamente aisladas de hosts. En el resto de este documento describimos un intento inicial de adaptar middleware orientado a mensajes para que se ajuste a dispositivos móviles y, más específicamente, a redes móviles ad-hoc. En nuestro caso, elegimos examinar JMS, como uno de los sistemas MOM más conocidos. En la última parte de este documento, exploramos las limitaciones de nuestros resultados y describimos los planes que tenemos para llevar a cabo el trabajo más adelante. Los sistemas de middleware orientados a mensajes y el Servicio de Mensajes de Java (JMS) admiten la comunicación entre componentes distribuidos a través del paso de mensajes: el remitente envía un mensaje a colas identificadas, que generalmente residen en un servidor. Un receptor recupera el mensaje de la cola en un momento diferente y puede confirmar la respuesta utilizando el mismo mecanismo asíncrono. La middleware orientada a mensajes soporta la comunicación asíncrona de una manera muy natural, logrando el desacoplamiento de emisores y receptores. Un remitente puede continuar procesando tan pronto como el middleware haya aceptado el mensaje; eventualmente, el receptor enviará un mensaje de confirmación y el remitente podrá recogerlo en un momento conveniente. Sin embargo, dado la forma en que están implementados, estos sistemas de middleware suelen requerir dispositivos con recursos abundantes, especialmente en términos de memoria y espacio en disco, donde se almacenan colas persistentes de mensajes que han sido recibidos pero aún no procesados. Sun Java Message Service [5], IBM WebSphere MQ [6], Microsoft MSMQ [12] son ejemplos de middleware orientado a mensajes muy exitosos para sistemas distribuidos tradicionales. El Servicio de Mensajería de Java (JMS) es una colección de interfaces para la comunicación asincrónica entre componentes distribuidos. Proporciona una forma común para que los programas de Java creen, envíen y reciban mensajes. Los usuarios de JMS suelen ser referidos como clientes. La especificación JMS define además a los proveedores como los componentes encargados de implementar el sistema de mensajería y proporcionar la funcionalidad administrativa y de control (es decir, persistencia y confiabilidad) requerida por el sistema. Los clientes pueden enviar y recibir mensajes, de forma asincrónica, a través del proveedor JMS, que se encarga de la entrega y, posiblemente, de la persistencia de los mensajes. Hay dos tipos de comunicación admitidos: modelos punto a punto y de publicación-suscripción. En el modelo punto a punto, los hosts envían mensajes a colas. Los receptores pueden ser registrados con algunas colas específicas, y pueden recuperar los mensajes de forma asíncrona para luego confirmar su recepción. El modelo de publicación-suscripción se basa en el uso de temas a los que los clientes pueden suscribirse. Los mensajes son enviados a los temas por otros clientes y luego son recibidos de forma asíncrona por todos los clientes suscritos. Los clientes aprenden sobre los temas y colas disponibles a través de la Interfaz de Nombres y Directorios de Java (JNDI) [14]. Las colas y los temas son creados por un administrador en el proveedor y se registran con la interfaz JNDI para su búsqueda. En la siguiente sección, presentamos los desafíos de las redes móviles y mostramos cómo JMS puede adaptarse para cumplir con estos requisitos. 3. JMS PARA COMPUTACIÓN MÓVIL Las redes móviles varían mucho en sus características, desde redes nómadas en las que los nodos se desplazan mientras están desconectados, hasta redes ad-hoc en las que los nodos se mueven libremente y no hay infraestructura. Las redes móviles ad-hoc son más comúnmente aplicables en situaciones donde la supervivencia y la capacidad de despliegue instantáneo son clave: especialmente en aplicaciones militares y de ayuda en casos de desastre. Entre estos dos tipos de redes móviles, sin embargo, existen una serie de posibles combinaciones heterogéneas, donde se utilizan paradigmas nómadas y ad-hoc para interconectar áreas totalmente inalámbricas con redes más estructuradas (como una LAN o Internet). Si bien la especificación JMS ha sido ampliamente implementada y utilizada en sistemas distribuidos tradicionales, las adaptaciones para entornos móviles han sido propuestas recientemente. Los desafíos de adaptar JMS a entornos móviles son considerables; sin embargo, dada su amplia aceptación y uso, existen ventajas considerables al permitir la adaptación de aplicaciones existentes a entornos móviles y al permitir la interoperabilidad de aplicaciones en las regiones cableadas e inalámbricas de una red. En [10], JMS se adaptó a un entorno móvil nómada, donde los hosts móviles pueden ser clientes de JMS y comunicarse a través del proveedor de JMS que, sin embargo, se encuentra en una red troncal, proporcionando fiabilidad y persistencia. El prototipo del cliente presentado en [10] es muy ligero, debido a la delegación de toda la funcionalidad pesada al proveedor Middleware para Computación Pervasive y ad-hoc 122 en la red cableada. Sin embargo, este enfoque es algo limitado en términos de aplicabilidad generalizada y escalabilidad como consecuencia de la concentración de funcionalidad en la parte cableada de la red. Si se quiere adaptar JMS a entornos completamente ad hoc, donde no haya infraestructura fija disponible y donde los nodos cambien de ubicación y estado de forma muy dinámica, se deben tener en cuenta más problemas. En primer lugar, el descubrimiento necesita utilizar un modelo resiliente pero distribuido: en este entorno extremadamente dinámico, las soluciones estáticas son inaceptables. Como se discute en la Sección 2, un administrador de JMS define colas y temas en el proveedor. Los clientes pueden entonces aprender sobre ellos utilizando la Interfaz de Nombres y Directorios de Java (JNDI). Sin embargo, debido a la forma en que está diseñado JNDI, es necesario que un nodo de JNDI (o más de uno) esté al alcance para obtener una vinculación de un nombre a una dirección (es decir, saber dónde se encuentra una cola o un tema específico). En entornos móviles ad-hoc, el proceso de descubrimiento no puede asumir la existencia de un conjunto fijo de servidores de descubrimiento que siempre sean accesibles, ya que esto no coincidiría con la dinámica de las redes ad-hoc. En segundo lugar, un Proveedor de JMS, como sugiere la especificación de JMS, también debe ser accesible para cada nodo en la red, para poder comunicarse. Esto asume una arquitectura muy centralizada, que nuevamente no coincide con los requisitos de un entorno ad-hoc móvil, en el que los nodos pueden estar en movimiento y dispersos: se necesita una solución más distribuida y dinámica. La persistencia es, sin embargo, una funcionalidad esencial en entornos de comunicación asincrónica, ya que los hosts están, por definición, conectados en momentos diferentes. En la siguiente sección, discutiremos nuestra experiencia en el diseño e implementación de JMS para redes móviles ad-hoc. 4. El desarrollo de aplicaciones para redes móviles es aún más desafiante: además de las mismas consideraciones que para entornos inalámbricos infraestructurados, como las limitadas capacidades de los dispositivos y las restricciones de energía, existen problemas relacionados con la velocidad de cambio de la conectividad de la red y la falta de una infraestructura de enrutamiento estática. En consecuencia, ahora describimos un intento inicial de adaptar la especificación JMS para satisfacer los requisitos particulares relacionados con escenarios ad-hoc. Como se discute en la Sección 3, una aplicación JMS puede utilizar tanto el estilo de mensajería punto a punto como el de publicación-suscripción. Modelo de punto a punto. El modelo de punto a punto se basa en el concepto de colas, que se utilizan para habilitar la comunicación asincrónica entre el productor de un mensaje y posibles consumidores diferentes. En nuestra solución, la ubicación de las colas se determina mediante un proceso de negociación que depende de la aplicación. Por ejemplo, supongamos que es posible saber a priori, o es posible determinar dinámicamente, que cierto host es el receptor de la mayor parte de los mensajes enviados a una cola particular. En este caso, la ubicación óptima de la cola bien podría estar en este host en particular. En general, vale la pena señalar que, según la especificación de JMS y los patrones de diseño sugeridos, es común y preferible que un cliente tenga todos sus mensajes entregados a una sola cola. Las colas se anuncian periódicamente a los anfitriones que se encuentran dentro del rango de transmisión o que son alcanzables mediante el protocolo de comunicación síncrona subyacente, si se proporciona. Es importante tener en cuenta que, a nivel de middleware, es lógicamente irrelevante si la capa de red implementa alguna forma de enrutamiento ad-hoc (aunque considerablemente más eficiente si lo hace); el middleware solo considera información sobre qué nodos son accesibles activamente en cualquier momento. Los hosts que reciben mensajes publicitarios agregan entradas a su registro JNDI. Cada entrada se caracteriza por un arrendamiento (un mecanismo similar al presente en Jini [15]). Un contrato de arrendamiento representa el tiempo de validez de una entrada particular. Si un arrendamiento no se renueva (es decir, su vida no se extiende), puede vencer y, en consecuencia, la entrada se elimina del registro. En otras palabras, el anfitrión asume que la cola será inaccesible a partir de ese momento. Esto puede ser causado, por ejemplo, si un host que almacena la cola se vuelve inaccesible. Un host que inicia un proceso de descubrimiento encontrará los temas y las colas presentes en su porción conectada de la red de manera directa. Para enviar un mensaje a un anfitrión que actualmente no está al alcance, utilizamos un protocolo de enrutamiento de epidemia asíncrono que se discutirá en detalle en la Sección 4.2. Si dos hosts están en la misma nube (es decir, existe un camino conectado entre ellos), pero no hay disponible un protocolo síncrono, los mensajes se envían utilizando el protocolo epidémico. En este caso, la latencia de entrega será baja como resultado de la rapidez de propagación de la infección en la nube conectada (ver también los resultados de la simulación en la Sección 5). Dado la existencia de un protocolo de epidemia, el mecanismo de descubrimiento consiste en publicitar las colas a los hosts que actualmente son inalcanzables utilizando mecanismos análogos. En el modelo de publicación-suscripción, algunos de los hosts son designados de manera similar para mantener temas y almacenar suscripciones, como antes. Los temas se anuncian a través del registro de la misma manera que las colas, y un cliente que desee suscribirse a un tema debe registrarse con el cliente que tiene el tema. Cuando un cliente desea enviar un mensaje a la lista de temas, lo envía al titular del tema (de la misma manera que enviaría un mensaje a una cola). El titular del tema luego reenvía el mensaje a todos los suscriptores, utilizando el protocolo síncrono si es posible, de lo contrario el protocolo epidémico. Vale la pena señalar que utilizamos un único mensaje con múltiples destinatarios, en lugar de múltiples mensajes con múltiples destinatarios. Cuando un mensaje es entregado a uno de los suscriptores, este destinatario es eliminado de la lista. Para eliminar las posibles réplicas restantes, empleamos mensajes de acuse de recibo (discutidos en la Sección 4.4), devueltos de la misma manera que un mensaje normal. También hemos adaptado los conceptos de suscripciones duraderas y no duraderas para entornos ad-hoc. En las plataformas fijas, las suscripciones duraderas se mantienen durante las desconexiones de los clientes, ya sean intencionales o resultado de fallas. En los sistemas tradicionales, cuando un suscriptor duradero se desconecta del servidor, es responsable de almacenar los mensajes. Cuando el suscriptor duradero se reconecta, el servidor le envía todos los mensajes no caducados. El problema es que, en nuestro escenario, las desconexiones son la norma. En teoría, no es posible enviar un mensaje a un par que nunca ha sido alcanzable en el pasado, ya que no puede haber ninguna entrada presente en el registro. Sin embargo, para superar esta posible limitación, proporcionamos un mecanismo a través del cual la información puede ser añadida al registro sin utilizar los canales normales. 123 Middleware 2004 Companion en lugar de la excepción. En otras palabras, no podemos considerar las desconexiones como fallos. Por estas razones, adoptamos una semántica ligeramente diferente. En lo que respecta a las suscripciones duraderas, si un suscriptor se desconecta, las notificaciones no se almacenan, sino que se envían utilizando el protocolo epidémico en lugar del protocolo síncrono. En otras palabras, las notificaciones duraderas siguen siendo válidas durante las posibles desconexiones del suscriptor. Por otro lado, si un suscriptor no duradero se desconecta, su suscripción se elimina; en otras palabras, durante las desconexiones, las notificaciones no se envían utilizando el protocolo epidémico, sino que solo se aprovecha el protocolo síncrono. Si el tema vuelve a estar accesible para este anfitrión, deberá realizar otra suscripción para recibir las notificaciones. Los mensajes de baja se entregan de la misma manera que los mensajes de suscripción. Es importante tener en cuenta que los suscriptores duraderos deben darse de baja explícitamente de un tema para detener el proceso de notificación; sin embargo, todas las suscripciones duraderas tienen un tiempo de expiración predefinido para hacer frente a los casos de suscriptores que no vuelven a conectarse debido a sus movimientos o fallos. Esta característica se proporciona claramente para limitar el número de mensajes innecesarios enviados por la red. 4.2 Entrega de mensajes utilizando enrutamiento epidémico En esta sección, examinamos un mecanismo posible que permitirá la entrega de mensajes en una red parcialmente conectada. El mecanismo que discutimos está destinado a demostrar viabilidad; los mecanismos de comunicación más eficientes para este entorno son complejos por sí mismos y son el tema de otro artículo [13]. La entrega de mensajes asincrónica descrita anteriormente se basa en un protocolo de enrutamiento de estilo epidémico puro típico [16]. Un mensaje que necesita ser enviado se replica en cada host al alcance. De esta manera, las copias de los mensajes se propagan rápidamente a través de redes conectadas, como una infección. Si un anfitrión se conecta a otra nube de nodos móviles durante su movimiento, el mensaje se propaga a través de esta colección de anfitriones. La replicación de datos y mensajes en estilo epidémico ha sido explotada en el pasado en muchos campos, comenzando por el área de sistemas de bases de datos distribuidas [2]. Dentro del enrutamiento epidémico, cada anfitrión mantiene un búfer que contiene los mensajes que ha creado y las réplicas de los mensajes generados por los otros anfitriones. Para mejorar el rendimiento, una tabla hash indexa el contenido del búfer. Cuando dos anfitriones se conectan, el anfitrión con el identificador más pequeño inicia una sesión de anti-entropía, enviando una lista que contiene los identificadores únicos de los mensajes que actualmente almacena. El otro anfitrión evalúa esta lista y envía de vuelta una lista que contiene los identificadores que está almacenando y que no están presentes en el otro anfitrión, junto con los mensajes que el otro no tiene. El anfitrión que ha iniciado la sesión recibe la lista y, de la misma manera, envía los mensajes que no están presentes en el otro anfitrión. En caso de producirse un desbordamiento de búfer, los mensajes se descartan. La fiabilidad ofrecida por este protocolo es generalmente de mejor esfuerzo, ya que no hay garantía de que un mensaje finalmente sea entregado a su destinatario. Claramente, la proporción de entrega del protocolo aumenta proporcionalmente al tiempo máximo de retraso permitido y al tamaño del búfer en cada host (pueden encontrarse resultados interesantes de simulación en [16]). 4.3 Adaptación del Modelo de Mensajes JMS En esta sección, analizaremos los aspectos de nuestra adaptación de la especificación relacionados con el llamado Modelo de Mensajes JMS [5]. Según esto, los mensajes JMS se caracterizan por algunas propiedades definidas utilizando el campo de encabezado, que contiene valores que son utilizados tanto por los clientes como por los proveedores para su entrega. Los aspectos discutidos en el resto de esta sección son válidos para ambos modelos (punto a punto y publicar-suscribir). Un mensaje JMS puede ser persistente o no persistente. Según la especificación de JMS, los mensajes persistentes deben entregarse con un grado de confiabilidad mayor que los no persistentes. Sin embargo, vale la pena señalar que no es posible garantizar la fiabilidad de una sola vez para mensajes persistentes según lo definido en la especificación, ya que, como discutimos en la subsección anterior, el protocolo epidémico subyacente solo puede garantizar la entrega de mejor esfuerzo. Sin embargo, los clientes mantienen una lista de los identificadores de los mensajes recibidos recientemente para evitar la entrega de mensajes duplicados. En otras palabras, proporcionamos a las aplicaciones una fiabilidad inmediata para ambos tipos de mensajes. Para implementar diferentes niveles de confiabilidad, EMMA trata de manera diferente los mensajes persistentes y no persistentes durante la ejecución del protocolo epidémico de anti-entropía. Dado que el espacio del búfer de mensajes es limitado, los mensajes persistentes se replican preferentemente utilizando el espacio libre disponible. Si esto es insuficiente y hay mensajes no persistentes presentes en el búfer, estos son reemplazados. Solo se notifican a los remitentes las entregas exitosas de los mensajes persistentes. Según la especificación de JMS, es posible asignar una prioridad a cada mensaje. Los mensajes con prioridades más altas se entregan de manera preferencial. Como se discutió anteriormente, los mensajes persistentes tienen prioridad sobre los no persistentes. La selección adicional se basa en sus prioridades. Los mensajes con prioridades más altas son tratados de manera preferencial. De hecho, si no hay suficiente espacio para replicar todos los mensajes persistentes, se utiliza un mecanismo basado en prioridades para eliminar y replicar los mensajes no persistentes (y, si es necesario, los mensajes persistentes). Los mensajes se eliminan de los buffers utilizando el valor de tiempo de expiración que puede ser establecido por los remitentes. Esta es una forma de liberar espacio en los búferes (se eliminan preferentemente los mensajes más antiguos en casos de conflicto); para eliminar réplicas obsoletas en el sistema; y para limitar el tiempo durante el cual los destinos deben mantener los identificadores de mensajes para desechar duplicados. Mecanismos de fiabilidad y de acuse de recibo Como ya se discutió, la entrega de mensajes como máximo una vez es lo mejor que se puede lograr en términos de semántica de entrega en entornos ad-hoc parcialmente conectados. Sin embargo, es posible mejorar la confiabilidad del sistema con mecanismos de acuse de recibo eficientes. EMMA proporciona un mecanismo de notificación de fallos a las aplicaciones si no se recibe el acuse de recibo dentro de un tiempo límite dado (que puede ser configurado por los desarrolladores de aplicaciones). Este mecanismo es el que distingue la entrega de mensajes persistentes y no persistentes en nuestra implementación de JMS: las entregas de los primeros son notificadas a los remitentes, mientras que los de los segundos no lo son. Utilizamos mensajes de acuse de recibo no solo para informar a los remitentes sobre la entrega exitosa de los mensajes, sino también para eliminar las réplicas de los mensajes entregados que aún están presentes en la red. Cada anfitrión mantiene una lista de los mensajes Middleware para la Computación Pervasiva y Ad-hoc 124 entregados con éxito que se actualiza como parte del proceso normal de intercambio de información entre los anfitriones. Las listas se intercambian durante los primeros pasos del protocolo de epidemia anti-entropía con una frecuencia predefinida. En el caso de mensajes con múltiples destinatarios, también se almacena una lista de los destinatarios reales. Cuando un anfitrión recibe la lista, verifica su búfer de mensajes y lo actualiza de acuerdo con las siguientes reglas: (1) si un mensaje tiene un único destinatario y ha sido entregado, se elimina del búfer; (2) si un mensaje tiene múltiples destinatarios, se eliminan los identificadores de los anfitriones a los que se ha entregado de la lista de destinatarios asociada. Si la longitud resultante de la lista de destinatarios es cero, el mensaje se elimina del búfer. Estas listas tienen, claramente, dimensiones finitas y se implementan como colas circulares. Este mecanismo simple, junto con el uso de marcas de tiempo de expiración, garantiza que las antiguas notificaciones de acuse de recibo sean eliminadas del sistema después de un período de tiempo limitado. Para mejorar la confiabilidad de EMMA, se podría desarrollar un mecanismo de diseño para la replicación inteligente de colas y temas basado en la información de contexto. Sin embargo, esto aún no forma parte de la arquitectura actual de EMMA. 5. IMPLEMENTACIÓN Y EVALUACIÓN PRELIMINAR Implementamos un prototipo de nuestra plataforma utilizando el Perfil Personal J2ME. El tamaño del ejecutable es de aproximadamente 250KB, incluido el archivo jar de JMS 1.1; esta es una cifra perfectamente aceptable dada la memoria disponible de los dispositivos móviles actuales en el mercado. Probamos nuestro prototipo en PDAs HP iPaq con Linux, interconectados con WaveLan, y en varios laptops con la misma interfaz de red. También evaluamos la plataforma de middleware utilizando el simulador de eventos discretos OMNET++ [17] para explorar una variedad de escenarios móviles que incorporaban un número más realista de hosts que el que se podía lograr experimentalmente. Más específicamente, evaluamos el rendimiento del sistema en términos de ratio de entrega y retraso promedio, variando la densidad de población y el tamaño del búfer, y utilizando mensajes persistentes y no persistentes con diferentes prioridades. Los resultados de la simulación muestran que el rendimiento de EMMAs, en términos de ratio de entrega y retraso de mensajes persistentes con prioridades más altas, es bueno. En general, es evidente que la proporción de entrega está fuertemente relacionada con el dimensionamiento correcto de los búferes para el retraso máximo aceptable. Además, los algoritmos epidémicos son capaces de garantizar una alta tasa de entrega si se evalúa el rendimiento durante un intervalo de tiempo suficiente para la difusión de las réplicas de los mensajes (es decir, la propagación de la infección) en una gran parte de la red ad-hoc. Una consecuencia del problema de dimensionamiento es que la escalabilidad puede verse seriamente afectada en middleware peer-to-peer para computación móvil debido a la escasez de recursos de los dispositivos (memoria limitada para almacenar temporalmente mensajes) y al número de posibles interconexiones en entornos ad-hoc. Lo peor es que las formas comunes de organización comercial y social (seis grados de separación) significan que incluso valores modestos de TTL en los mensajes provocarán una difusión generalizada de mensajes epidémicos. Este problema surge debido a la falta de inteligencia en el protocolo de la epidemia, y puede ser abordado seleccionando nodos portadores para los mensajes con mayor cuidado. Sin embargo, los detalles de este proceso están fuera del alcance de este documento (pero pueden encontrarse en [13]) y no afectan la base en la que se basa el middleware EMMA: la capacidad de entregar mensajes de forma asincrónica. 6. VISIÓN CRÍTICA DEL ESTADO DEL ARTE El diseño de plataformas de middleware para la computación móvil requiere que los investigadores respondan a preguntas nuevas y fundamentalmente diferentes; simplemente asumir la presencia de porciones cableadas de la red en las que pueda residir la funcionalidad centralizada no es generalizable. Por lo tanto, es necesario investigar nuevos principios de diseño y idear patrones arquitectónicos que difieran de los tradicionalmente utilizados en el diseño de middleware para sistemas fijos. Como ejemplo, considera la reciente tendencia de superposición de capas en redes ad-hoc [1]. Esta es una forma de replantear el diseño de sistemas de software, abandonando explícitamente las formas clásicas de estratificación, ya que, aunque esta separación de preocupaciones permite la portabilidad, lo hace a expensas de posibles ganancias de eficiencia. Creemos que es posible ver nuestro enfoque como una instancia de superposición de capas. De hecho, hemos añadido el protocolo de red epidémica a nivel de middleware y, al mismo tiempo, hemos utilizado el protocolo de red síncrono existente si está presente tanto en la entrega de mensajes (capas tradicionales) como en informar al middleware sobre cuándo pueden entregarse los mensajes revelando detalles de las tablas de reenvío (violación de capas). Por esta razón, preferimos considerarlos conjuntamente como la capa de comunicación de nuestra plataforma, proporcionando juntos una entrega de mensajes más eficiente. Otro aspecto interesante es la explotación del contexto y la información del sistema para mejorar el rendimiento de las plataformas de middleware móvil. Una vez más, como resultado de adoptar una metodología de capas cruzadas, podemos construir sistemas que recopilan información del sistema operativo subyacente y los componentes de comunicación para permitir la adaptación del comportamiento. Podemos resumir este enfoque de diseño conceptual diciendo que las plataformas de middleware deben ser no solo conscientes del contexto (es decir, deben ser capaces de extraer y analizar información del contexto circundante) sino también conscientes del sistema (es decir, deben ser capaces de recopilar información de los componentes de software y hardware del sistema móvil). Se han desarrollado varios sistemas de middleware para admitir redes ad hoc con el uso de comunicación asíncrona (como LIME, XMIDDLE, STEAM [11]). En particular, la plataforma STEAM es un ejemplo interesante de middleware basado en eventos para redes ad hoc, que proporciona entrega de mensajes con conciencia de ubicación y una solución efectiva para el filtrado de eventos. Una discusión sobre JMS, y su realización móvil, ya ha sido realizada en las Secciones 4 y 2. La empresa suiza Softwired ha desarrollado el primer middleware JMS para computación móvil, llamado iBus Mobile [10]. Los componentes principales de esta arquitectura típicamente basada en infraestructura son el proveedor de JMS, la llamada puerta de enlace móvil de JMS, que se despliega en un host fijo y una biblioteca de cliente JMS ligera. El gateway se utiliza para la comunicación entre el servidor de aplicaciones y los dispositivos móviles. El proveedor JMS ve la pasarela como un cliente JMS normal. El proveedor JMS puede ser cualquier servidor de aplicaciones habilitado para JMS, como BEA Weblogic. Pronto [19] es un ejemplo de un sistema de middleware basado en mensajería, diseñado específicamente para entornos móviles. La plataforma está compuesta por tres clases de componentes: clientes móviles que implementan la especificación JMS, pasarelas que controlan el tráfico, garantizando eficiencia y posibles personalizaciones de usuario utilizando diferentes complementos y servidores JMS. Diferentes configuraciones de estos componentes son posibles; con respecto a las aplicaciones de redes móviles ad hoc, la más interesante es Serverless JMS. El objetivo de esta configuración es adaptar JMS a un modelo descentralizado. El modelo de publicación-suscripción explota la eficiencia y la escalabilidad del protocolo de multidifusión IP subyacente. Se proporcionan servicios de entrega de mensajes poco confiables y confiables: la confiabilidad se logra a través de un protocolo basado en acuse de recibo negativo. Pronto representa una buena solución para redes móviles basadas en infraestructura, pero no se dirige adecuadamente a entornos ad-hoc, ya que los nodos móviles dependen de servidores fijos para el intercambio de mensajes. Existen otras MOM implementadas para entornos móviles; sin embargo, suelen ser extensiones sencillas de middleware existente [8]. La única implementación de MOM específicamente diseñada para redes móviles ad-hoc fue desarrollada en la Universidad de Newcastle [18]. Este trabajo es nuevamente una adaptación de JMS; el enfoque de esa implementación se centra en la comunicación de grupo y el uso de algoritmos de enrutamiento a nivel de aplicación para la entrega de mensajes por tema. Sin embargo, hay una serie de diferencias en el enfoque de nuestro trabajo. La importancia que atribuimos a las desconexiones hace que la persistencia sea un requisito vital para cualquier middleware que necesite ser utilizado en redes móviles ad-hoc. Los autores de [18] señalan la persistencia como un posible trabajo futuro, sin considerar el hecho de que enrutar un mensaje a un host no conectado resultará en un fallo de entrega. Esta es una limitación notable en entornos móviles donde las desconexiones impredecibles son la norma en lugar de la excepción. 7. MAPA Y CONCLUSIONES La comunicación asincrónica es un paradigma de comunicación útil para las redes móviles ad-hoc, ya que permite a los hosts llegar, irse y recoger mensajes cuando sea conveniente, teniendo en cuenta también la disponibilidad de sus recursos (por ejemplo, energía, niveles de conectividad). En este artículo hemos descrito el estado del arte en términos de MOM para sistemas móviles. También hemos demostrado una adaptación de prueba de concepto de JMS al escenario extremo de redes móviles ad-hoc parcialmente conectadas. Hemos descrito y discutido las características y diferencias de nuestra solución con respecto a las implementaciones tradicionales de JMS y las adaptaciones existentes para entornos móviles. Sin embargo, también se deben investigar los compromisos entre el enrutamiento a nivel de aplicación y el uso de recursos, ya que los dispositivos móviles suelen tener escasez de energía/recursos. Una limitación clave de este trabajo es el algoritmo epidémico que tiene un rendimiento deficiente y un avance importante en la practicabilidad de este trabajo requiere un algoritmo que equilibre mejor las necesidades de eficiencia y probabilidad de entrega de mensajes. Actualmente estamos trabajando en algoritmos y protocolos que, aprovechando técnicas probabilísticas y estadísticas sobre la base de pequeñas cantidades de información intercambiada, son capaces de mejorar considerablemente la eficiencia en términos de recursos (memoria, ancho de banda, etc.) y la confiabilidad de nuestra plataforma de middleware [13]. Un desarrollo de investigación futurista, que podría llevar estas ideas de adaptación de middleware de mensajería para entornos móviles más allá, es la introducción de extensiones de comunicación más orientadas a la movilidad, como el soporte de geocast (es decir, la capacidad de enviar mensajes a áreas geográficas específicas). REFERENCIAS [1] M. Conti, G. Maselli, G. Turi y S. Giordano. Diseño de redes móviles ad-hoc con interconexión de capas. IEEE Computer, 37(2):48-51, febrero de 2004. [2] A. Demers, D. Greene, C. Hauser, W. Irish, J. Larson, S. Shenker, H. Sturgis, D. Swinehart y D. Terry. Algoritmos de epidemia para el mantenimiento de bases de datos replicadas. En el Sexto Simposio sobre Principios de Computación Distribuida, páginas 1-12, agosto de 1987. [3] A. Doria, M. Uden y D. P. Pandey. Proporcionando conectividad a la comunidad nómada Saami. En Actas de la Segunda Conferencia Internacional sobre Diseño Colaborativo Abierto para la Innovación Sostenible, diciembre de 2002. [4] M. Haahr, R. Cunningham y V. Cahill. Aplicaciones CORBA en un entorno móvil. En la 5ª Conferencia Internacional sobre Computación y Redes Móviles (MOBICOM99), páginas 36-47. ACM, agosto de 1999. [5] M. Hapner, R. Burridge, R. Sharma, J. Fialli y K. Stout. Especificación del Servicio de Mensajes Java Versión 1.1. Sun Microsystems, Inc., abril de 2002. http://java.sun.com/products/jms/. [6] J. Hart. WebSphere MQ: Conectando sus aplicaciones sin programación compleja. IBM WebSphere Software White Papers, 2003. [7] S. Hayward y M. Pezzini. Casando Middleware y Computación Móvil. Informe de investigación del Grupo Gartner, septiembre de 2001. [8] IBM. WebSphere MQ EveryPlace Versión 2.0, noviembre de 2002. http://www-3.ibm.com/software/integration/wmqe/. [9] UIT. Conectando comunidades remotas. Documentos de la Cumbre Mundial sobre la Sociedad de la Información, 2003. http://www.itu.int/osg/spu/wsis-themes. [10] S. Maffeis. Presentando JMS inalámbrico. Softwired AG, www.sofwired-inc.com, 2002. [11] C. Mascolo, L. Capra y W. Emmerich. Middleware para Computación Móvil. En E. Gregori, G. Anastasi y S. Basagni, editores, Conferencias Avanzadas sobre Redes, volumen 2497 de las Notas de Conferencias en Ciencias de la Computación, páginas 20-58. Springer Verlag, 2002. [12] Microsoft. \n\nSpringer Verlag, 2002. [12] Microsoft. Documentación de Microsoft Message Queuing (MSMQ) Versión 2.0. [13] M. Musolesi, S. Hailes y C. Mascolo. Enrutamiento adaptativo para redes ad-hoc móviles intermitentemente conectadas. Informe técnico, Nota de Investigación UCL-CS, julio de 2004. Enviado para su publicación. [14] Sun Microsystems. Documentación de Java Naming and Directory Interface (JNDI) Versión 1.2. 2003. http://java.sun.com/products/jndi/. [15] Sun Microsystems. Especificación de Jini Versión 2.0, 2003. http://java.sun.com/products/jini/. [16] A. Vahdat y D. Becker. Enrutamiento epidémico para redes ad-hoc parcialmente conectadas. Informe técnico CS-2000-06, Departamento de Ciencias de la Computación, Universidad de Duke, 2000. [17] A. Vargas. El sistema de simulación de eventos discretos OMNeT++. En Actas de la Multiconferencia Europea de Simulación (ESM2001), Praga, junio de 2001. [18] E. Vollset, D. Ingham y P. Ezhilchelvan. JMS en redes móviles ad-hoc. En Comunicaciones Inalámbricas Personales (PWC), páginas 40-52, Venecia, septiembre de 2003. [19] E. Yoneki y J. Bacon. Pronto: Mobilegateway con paradigma de publicación-suscripción sobre red inalámbrica. Informe Técnico 559, Universidad de Cambridge, Laboratorio de Computación, febrero de 2003. Middleware para Computación Pervasive y ad-hoc 126 ",
            "candidates": [],
            "error": [
                [
                    ""
                ]
            ]
        },
        "mobile ad-hoc environment": {
            "translated_key": "entornos móviles ad-hoc",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Adapting Asynchronous Messaging Middleware to ad-hoc Networking Mirco Musolesi Dept.",
                "of Computer Science, University College London Gower Street, London WC1E 6BT, United Kingdom m.musolesi@cs.ucl.ac.uk Cecilia Mascolo Dept. of Computer Science, University College London Gower Street, London WC1E 6BT, United Kingdom c.mascolo@cs.ucl.ac.uk Stephen Hailes Dept. of Computer Science, University College London Gower Street, London WC1E 6BT, United Kingdom s.hailes@cs.ucl.ac.uk ABSTRACT The characteristics of mobile environments, with the possibility of frequent disconnections and fluctuating bandwidth, have forced a rethink of traditional middleware.",
                "In particular, the synchronous communication paradigms often employed in standard middleware do not appear to be particularly suited to ad-hoc environments, in which not even the intermittent availability of a backbone network can be assumed.",
                "Instead, asynchronous communication seems to be a generally more suitable paradigm for such environments.",
                "Message oriented middleware for traditional systems has been developed and used to provide an asynchronous paradigm of communication for distributed systems, and, recently, also for some specific mobile computing systems.",
                "In this paper, we present our experience in designing, implementing and evaluating EMMA (Epidemic Messaging Middleware for ad-hoc networks), an adaptation of Java Message Service (JMS) for <br>mobile ad-hoc environment</br>s.",
                "We discuss in detail the design challenges and some possible solutions, showing a concrete example of the feasibility and suitability of the application of the asynchronous paradigm in this setting and outlining a research roadmap for the coming years.",
                "Categories and Subject Descriptors C.2.4 [Computer-Communication Networks]: Distributed Systems-Distributed Applications; C.2.1 [Network Architecture and Design]: Wireless Communication General Terms DESIGN, ALGORITHMS 1.",
                "INTRODUCTION With the increasing popularity of mobile devices and their widespread adoption, there is a clear need to allow the development of a broad spectrum of applications that operate effectively over such an environment.",
                "Unfortunately, this is far from simple: mobile devices are increasingly heterogeneous in terms of processing capabilities, memory size, battery capacity, and network interfaces.",
                "Each such configuration has substantially different characteristics that are both statically different - for example, there is a major difference in capability between a Berkeley mote and an 802.11g-equipped laptop - and that vary dynamically, as in situations of fluctuating bandwidth and intermittent connectivity.",
                "Mobile ad hoc environments have an additional element of complexity in that they are entirely decentralised.",
                "In order to craft applications for such complex environments, an appropriate form of middleware is essential if cost effective development is to be achieved.",
                "In this paper, we examine one of the foundational aspects of middleware for <br>mobile ad-hoc environment</br>s: that of the communication primitives.",
                "Traditionally, the most frequently used middleware primitives for communication assume the simultaneous presence of both end points on a network, since the stability and pervasiveness of the networking infrastructure is not an unreasonable assumption for most wired environments.",
                "In other words, most communication paradigms are synchronous: object oriented middleware such as CORBA and Java RMI are typical examples of middleware based on synchronous communication.",
                "In recent years, there has been growing interest in platforms based on asynchronous communication paradigms, such as publish-subscribe systems [6]: these have been exploited very successfully where there is application level asynchronicity.",
                "From a Gartner Market Report [7]: Given messageoriented-middlewares (MOM) popularity, scalability, flexibility, and affinity with mobile and wireless architectures, by 2004, MOM will emerge as the dominant form of communication middleware for linking mobile and enterprise applications (0.7 probability)....",
                "Moreover, in mobile ad-hoc systems, the likelihood of network fragmentation means that synchronous communication may in any case be impracticable, giving situations in which delay tolerant asynchronous traffic is the only form of traffic that could be supported. 121 Middleware 2004 Companion Middleware for <br>mobile ad-hoc environment</br>s must therefore support semi-synchronous or completely asynchronous communication primitives if it is to avoid substantial limitations to its utility.",
                "Aside from the intellectual challenge in supporting this model, this work is also interesting because there are a number of practical application domains in allowing inter-community communication in undeveloped areas of the globe.",
                "Thus, for example, projects that have been carried out to help populations that live in remote places of the globe such as Lapland [3] or in poor areas that lack fixed connectivity infrastructure [9].",
                "There have been attempts to provide mobile middleware with these properties, including STEAM, LIME, XMIDDLE, Bayou (see [11] for a more complete review of mobile middleware).",
                "These models differ quite considerably from the existing traditional middleware in terms of primitives provided.",
                "Furthermore, some of them fail in providing a solution for the true ad-hoc scenarios.",
                "If the projected success of MOM becomes anything like a reality, there will be many programmers with experience of it.",
                "The ideal solution to the problem of middleware for ad-hoc systems is, then, to allow programmers to utilise the same paradigms and models presented by common forms of MOM and to ensure that these paradigms are supportable within the mobile environment.",
                "This approach has clear advantages in allowing applications developed on standard middleware platforms to be easily deployed on mobile devices.",
                "Indeed, some research has already led to the adaptation of traditional middleware platforms to mobile settings, mainly to provide integration between mobile devices and existing fixed networks in a nomadic (i.e., mixed) environment [4].",
                "With respect to message oriented middleware, the current implementations, however, either assume the existence of a backbone network to which the mobile hosts connect from time to time while roaming [10], or assume that nodes are always somehow reachable through a path [18].",
                "No adaptation to heterogeneous or completely ad-hoc scenarios, with frequent disconnection and periodically isolated clouds of hosts, has been attempted.",
                "In the remainder of this paper we describe an initial attempt to adapt message oriented middleware to suit mobile and, more specifically, mobile ad-hoc networks.",
                "In our case, we elected to examine JMS, as one of the most widely known MOM systems.",
                "In the latter part of this paper, we explore the limitations of our results and describe the plans we have to take the work further. 2.",
                "MESSAGE ORIENTED MIDDLEWARE AND JAVA MESSAGE SERVICE (JMS) Message-oriented middleware systems support communication between distributed components via message-passing: the sender sends a message to identified queues, which usually reside on a server.",
                "A receiver retrieves the message from the queue at a different time and may acknowledge the reply using the same asynchronous mechanism.",
                "Message-oriented middleware thus supports asynchronous communication in a very natural way, achieving de-coupling of senders and receivers.",
                "A sender is able to continue processing as soon as the middleware has accepted the message; eventually, the receiver will send an acknowledgment message and the sender will be able to collect it at a convenient time.",
                "However, given the way they are implemented, these middleware systems usually require resource-rich devices, especially in terms of memory and disk space, where persistent queues of messages that have been received but not yet processed, are stored.",
                "Sun Java Message Service [5], IBM WebSphere MQ [6], Microsoft MSMQ [12] are examples of very successful message-oriented middleware for traditional distributed systems.",
                "The Java Messaging Service (JMS) is a collection of interfaces for asynchronous communication between distributed components.",
                "It provides a common way for Java programs to create, send and receive messages.",
                "JMS users are usually referred to as clients.",
                "The JMS specification further defines providers as the components in charge of implementing the messaging system and providing the administrative and control functionality (i.e., persistence and reliability) required by the system.",
                "Clients can send and receive messages, asynchronously, through the JMS provider, which is in charge of the delivery and, possibly, of the persistence of the messages.",
                "There are two types of communication supported: point to point and publish-subscribe models.",
                "In the point to point model, hosts send messages to queues.",
                "Receivers can be registered with some specific queues, and can asynchronously retrieve the messages and then acknowledge them.",
                "The publish-subscribe model is based on the use of topics that can be subscribed to by clients.",
                "Messages are sent to topics by other clients and are then received in an asynchronous mode by all the subscribed clients.",
                "Clients learn about the available topics and queues through Java Naming and Directory Interface (JNDI) [14].",
                "Queues and topics are created by an administrator on the provider and are registered with the JNDI interface for look-up.",
                "In the next section, we introduce the challenges of mobile networks, and show how JMS can be adapted to cope with these requirements. 3.",
                "JMS FOR MOBILE COMPUTING Mobile networks vary very widely in their characteristics, from nomadic networks in which modes relocate whilst offline through to ad-hoc networks in which modes move freely and in which there is no infrastructure.",
                "Mobile ad-hoc networks are most generally applicable in situations where survivability and instant deployability are key: most notably in military applications and disaster relief.",
                "In between these two types of mobile networks, there are, however, a number of possible heterogeneous combinations, where nomadic and ad-hoc paradigms are used to interconnect totally unwired areas to more structured networks (such as a LAN or the Internet).",
                "Whilst the JMS specification has been extensively implemented and used in traditional distributed systems, adaptations for mobile environments have been proposed only recently.",
                "The challenges of porting JMS to mobile settings are considerable; however, in view of its widespread acceptance and use, there are considerable advantages in allowing the adaptation of existing applications to mobile environments and in allowing the interoperation of applications in the wired and wireless regions of a network.",
                "In [10], JMS was adapted to a nomadic mobile setting, where mobile hosts can be JMS clients and communicate through the JMS provider that, however, sits on a backbone network, providing reliability and persistence.",
                "The client prototype presented in [10] is very lightweight, due to the delegation of all the heavyweight functionality to the Middleware for Pervasive and ad-hoc Computing 122 provider on the wired network.",
                "However, this approach is somewhat limited in terms of widespread applicability and scalability as a consequence of the concentration of functionality in the wired portion of the network.",
                "If JMS is to be adapted to completely ad-hoc environments, where no fixed infrastructure is available, and where nodes change location and status very dynamically, more issues must be taken into consideration.",
                "Firstly, discovery needs to use a resilient but distributed model: in this extremely dynamic environment, static solutions are unacceptable.",
                "As discussed in Section 2, a JMS administrator defines queues and topics on the provider.",
                "Clients can then learn about them using the Java Naming and Directory Interface (JNDI).",
                "However, due to the way JNDI is designed, a JNDI node (or more than one) needs to be in reach in order to obtain a binding of a name to an address (i.e., knowing where a specific queue/topic is).",
                "In <br>mobile ad-hoc environment</br>s, the discovery process cannot assume the existence of a fixed set of discovery servers that are always reachable, as this would not match the dynamicity of ad-hoc networks.",
                "Secondly, a JMS Provider, as suggested by the JMS specification, also needs to be reachable by each node in the network, in order to communicate.",
                "This assumes a very centralised architecture, which again does not match the requirements of a mobile ad-hoc setting, in which nodes may be moving and sparse: a more distributed and dynamic solution is needed.",
                "Persistence is, however, essential functionality in asynchronous communication environments as hosts are, by definition, connected at different times.",
                "In the following section, we will discuss our experience in designing and implementing JMS for mobile ad-hoc networks. 4.",
                "JMSFOR MOBILE ad-hoc NETWORKS 4.1 Adaptation of JMS for Mobile ad-hoc Networks Developing applications for mobile networks is yet more challenging: in addition to the same considerations as for infrastructured wireless environments, such as the limited device capabilities and power constraints, there are issues of rate of change of network connectivity, and the lack of a static routing infrastructure.",
                "Consequently, we now describe an initial attempt to adapt the JMS specification to target the particular requirements related to ad-hoc scenarios.",
                "As discussed in Section 3, a JMS application can use either the point to point and the publish-subscribe styles of messaging.",
                "Point to Point Model The point to point model is based on the concept of queues, that are used to enable asynchronous communication between the producer of a message and possible different consumers.",
                "In our solution, the location of queues is determined by a negotiation process that is application dependent.",
                "For example, let us suppose that it is possible to know a priori, or it is possible to determine dynamically, that a certain host is the receiver of the most part of messages sent to a particular queue.",
                "In this case, the optimum location of the queue may well be on this particular host.",
                "In general, it is worth noting that, according to the JMS specification and suggested design patterns, it is common and preferable for a client to have all of its messages delivered to a single queue.",
                "Queues are advertised periodically to the hosts that are within transmission range or that are reachable by means of the underlying synchronous communication protocol, if provided.",
                "It is important to note that, at the middleware level, it is logically irrelevant whether or not the network layer implements some form of ad-hoc routing (though considerably more efficient if it does); the middleware only considers information about which nodes are actively reachable at any point in time.",
                "The hosts that receive advertisement messages add entries to their JNDI registry.",
                "Each entry is characterized by a lease (a mechanism similar to that present in Jini [15]).",
                "A lease represents the time of validity of a particular entry.",
                "If a lease is not refreshed (i.e, its life is not extended), it can expire and, consequently, the entry is deleted from the registry.",
                "In other words, the host assumes that the queue will be unreachable from that point in time.",
                "This may be caused, for example, if a host storing the queue becomes unreachable.",
                "A host that initiates a discovery process will find the topics and the queues present in its connected portion of the network in a straightforward manner.",
                "In order to deliver a message to a host that is not currently in reach1 , we use an asynchronous epidemic routing protocol that will be discussed in detail in Section 4.2.",
                "If two hosts are in the same cloud (i.e., a connected path exists between them), but no synchronous protocol is available, the messages are sent using the epidemic protocol.",
                "In this case, the delivery latency will be low as a result of the rapidity of propagation of the infection in the connected cloud (see also the simulation results in Section 5).",
                "Given the existence of an epidemic protocol, the discovery mechanism consists of advertising the queues to the hosts that are currently unreachable using analogous mechanisms.",
                "Publish-Subscribe Model In the publish-subscribe model, some of the hosts are similarly designated to hold topics and store subscriptions, as before.",
                "Topics are advertised through the registry in the same way as are queues, and a client wishing to subscribe to a topic must register with the client holding the topic.",
                "When a client wishes to send a message to the topic list, it sends it to the topic holder (in the same way as it would send a message to a queue).",
                "The topic holder then forwards the message to all subscribers, using the synchronous protocol if possible, the epidemic protocol otherwise.",
                "It is worth noting that we use a single message with multiple recipients, instead of multiple messages with multiple recipients.",
                "When a message is delivered to one of the subscribers, this recipient is deleted from the list.",
                "In order to delete the other possible replicas, we employ acknowledgment messages (discussed in Section 4.4), returned in the same way as a normal message.",
                "We have also adapted the concepts of durable and non durable subscriptions for ad-hoc settings.",
                "In fixed platforms, durable subscriptions are maintained during the disconnections of the clients, whether these are intentional or are the result of failures.",
                "In traditional systems, while a durable subscriber is disconnected from the server, it is responsible for storing messages.",
                "When the durable subscriber reconnects, the server sends it all unexpired messages.",
                "The problem is that, in our scenario, disconnections are the norm 1 In theory, it is not possible to send a message to a peer that has never been reachable in the past, since there can be no entry present in the registry.",
                "However, to overcome this possible limitation, we provide a primitive through which information can be added to the registry without using the normal channels. 123 Middleware 2004 Companion rather than the exception.",
                "In other words, we cannot consider disconnections as failures.",
                "For these reasons, we adopt a slightly different semantics.",
                "With respect to durable subscriptions, if a subscriber becomes disconnected, notifications are not stored but are sent using the epidemic protocol rather than the synchronous protocol.",
                "In other words, durable notifications remain valid during the possible disconnections of the subscriber.",
                "On the other hand, if a non-durable subscriber becomes disconnected, its subscription is deleted; in other words, during disconnections, notifications are not sent using the epidemic protocol but exploit only the synchronous protocol.",
                "If the topic becomes accessible to this host again, it must make another subscription in order to receive the notifications.",
                "Unsubscription messages are delivered in the same way as are subscription messages.",
                "It is important to note that durable subscribers have explicitly to unsubscribe from a topic in order to stop the notification process; however, all durable subscriptions have a predefined expiration time in order to cope with the cases of subscribers that do not meet again because of their movements or failures.",
                "This feature is clearly provided to limit the number of the unnecessary messages sent around the network. 4.2 Message Delivery using Epidemic Routing In this section, we examine one possible mechanism that will allow the delivery of messages in a partially connected network.",
                "The mechanism we discuss is intended for the purposes of demonstrating feasibility; more efficient communication mechanisms for this environment are themselves complex, and are the subject of another paper [13].",
                "The asynchronous message delivery described above is based on a typical pure epidemic-style routing protocol [16].",
                "A message that needs to be sent is replicated on each host in reach.",
                "In this way, copies of the messages are quickly spread through connected networks, like an infection.",
                "If a host becomes connected to another cloud of mobile nodes, during its movement, the message spreads through this collection of hosts.",
                "Epidemic-style replication of data and messages has been exploited in the past in many fields starting with the distributed database systems area [2].",
                "Within epidemic routing, each host maintains a buffer containing the messages that it has created and the replicas of the messages generated by the other hosts.",
                "To improve the performance, a hash-table indexes the content of the buffer.",
                "When two hosts connect, the host with the smaller identifier initiates a so-called anti-entropy session, sending a list containing the unique identifiers of the messages that it currently stores.",
                "The other host evaluates this list and sends back a list containing the identifiers it is storing that are not present in the other host, together with the messages that the other does not have.",
                "The host that has started the session receives the list and, in the same way, sends the messages that are not present in the other host.",
                "Should buffer overflow occur, messages are dropped.",
                "The reliability offered by this protocol is typically best effort, since there is no guarantee that a message will eventually be delivered to its recipient.",
                "Clearly, the delivery ratio of the protocol increases proportionally to the maximum allowed delay time and the buffer size in each host (interesting simulation results may be found in [16]). 4.3 Adaptation of the JMS Message Model In this section, we will analyse the aspects of our adaptation of the specification related to the so-called JMS Message Model [5].",
                "According to this, JMS messages are characterised by some properties defined using the header field, which contains values that are used by both clients and providers for their delivery.",
                "The aspects discussed in the remainder of this section are valid for both models (point to point and publish-subscribe).",
                "A JMS message can be persistent or non-persistent.",
                "According to the JMS specification, persistent messages must be delivered with a higher degree of reliability than the nonpersistent ones.",
                "However, it is worth noting that it is not possible to ensure once-and-only-once reliability for persistent messages as defined in the specification, since, as we discussed in the previous subsection, the underlying epidemic protocol can guarantee only best-effort delivery.",
                "However, clients maintain a list of the identifiers of the recently received messages to avoid the delivery of message duplicates.",
                "In other words, we provide the applications with at-mostonce reliability for both types of messages.",
                "In order to implement different levels of reliability, EMMA treats persistent and non-persistent messages differently, during the execution of the anti-entropy epidemic protocol.",
                "Since the message buffer space is limited, persistent messages are preferentially replicated using the available free space.",
                "If this is insufficient and non-persistent messages are present in the buffer, these are replaced.",
                "Only the successful deliveries of the persistent messages are notified to the senders.",
                "According to the JMS specification, it is possible to assign a priority to each message.",
                "The messages with higher priorities are delivered in a preferential way.",
                "As discussed above, persistent messages are prioritised above the non-persistent ones.",
                "Further selection is based on their priorities.",
                "Messages with higher priorities are treated in a preferential way.",
                "In fact, if there is not enough space to replicate all the persistent messages, a mechanism based on priorities is used to delete and replicate non-persistent messages (and, if necessary, persistent messages).",
                "Messages are deleted from the buffers using the expiration time value that can be set by senders.",
                "This is a way to free space in the buffers (one preferentially deletes older messages in cases of conflict); to eliminate stale replicas in the system; and to limit the time for which destinations must hold message identifiers to dispose of duplicates. 4.4 Reliability and Acknowledgment Mechanisms As already discussed, at-most-once message delivery is the best that can be achieved in terms of delivery semantics in partially connected ad-hoc settings.",
                "However, it is possible to improve the reliability of the system with efficient acknowledgment mechanisms.",
                "EMMA provides a mechanism for failure notification to applications if the acknowledgment is not received within a given timeout (that can be configured by application developers).",
                "This mechanism is the one that distinguishes the delivery of persistent and non-persistent messages in our JMS implementation: the deliveries of the former are notified to the senders, whereas the latter are not.",
                "We use acknowledgment messages not only to inform senders about the successful delivery of messages but also to delete the replicas of the delivered messages that are still present in the network.",
                "Each host maintains a list of the messages Middleware for Pervasive and ad-hoc Computing 124 successfully delivered that is updated as part of the normal process of information exchange between the hosts.",
                "The lists are exchanged during the first steps of the anti-entropic epidemic protocol with a certain predefined frequency.",
                "In the case of messages with multiple recipients, a list of the actual recipients is also stored.",
                "When a host receives the list, it checks its message buffer and updates it according to the following rules: (1) if a message has a single recipient and it has been delivered, it is deleted from the buffer; (2) if a message has multiple recipients, the identifiers of the delivered hosts are deleted from the associated list of recipients.",
                "If the resulting length of the list of recipients is zero, the message is deleted from the buffer.",
                "These lists have, clearly, finite dimensions and are implemented as circular queues.",
                "This simple mechanism, together with the use of expiration timestamps, guarantees that the old acknowledgment notifications are deleted from the system after a limited period of time.",
                "In order to improve the reliability of EMMA, a design mechanism for intelligent replication of queues and topics based on the context information could be developed.",
                "However this is not yet part of the current architecture of EMMA. 5.",
                "IMPLEMENTATION AND PRELIMINARY EVALUATION We implemented a prototype of our platform using the J2ME Personal Profile.",
                "The size of the executable is about 250KB including the JMS 1.1 jar file; this is a perfectly acceptable figure given the available memory of the current mobile devices on the market.",
                "We tested our prototype on HP IPaq PDAs running Linux, interconnected with WaveLan, and on a number of laptops with the same network interface.",
                "We also evaluated the middleware platform using the OMNET++ discrete event simulator [17] in order to explore a range of mobile scenarios that incorporated a more realistic number of hosts than was achievable experimentally.",
                "More specifically, we assessed the performance of the system in terms of delivery ratio and average delay, varying the density of population and the buffer size, and using persistent and non-persistent messages with different priorities.",
                "The simulation results show that the EMMAs performance, in terms of delivery ratio and delay of persistent messages with higher priorities, is good.",
                "In general, it is evident that the delivery ratio is strongly related to the correct dimensioning of the buffers to the maximum acceptable delay.",
                "Moreover, the epidemic algorithms are able to guarantee a high delivery ratio if one evaluates performance over a time interval sufficient for the dissemination of the replicas of messages (i.e., the infection spreading) in a large portion of the ad-hoc network.",
                "One consequence of the dimensioning problem is that scalability may be seriously impacted in peer-to-peer middleware for mobile computing due to the resource poverty of the devices (limited memory to store temporarily messages) and the number of possible interconnections in ad-hoc settings.",
                "What is worse is that common forms of commercial and social organisation (six degrees of separation) mean that even modest TTL values on messages will lead to widespread flooding of epidemic messages.",
                "This problem arises because of the lack of intelligence in the epidemic protocol, and can be addressed by selecting carrier nodes for messages with greater care.",
                "The details of this process are, however, outside the scope of this paper (but may be found in [13]) and do not affect the foundation on which the EMMA middleware is based: the ability to deliver messages asynchronously. 6.",
                "CRITICAL VIEW OF THE STATE OF THE ART The design of middleware platforms for mobile computing requires researchers to answer new and fundamentally different questions; simply assuming the presence of wired portions of the network on which centralised functionality can reside is not generalisable.",
                "Thus, it is necessary to investigate novel design principles and to devise architectural patterns that differ from those traditionally exploited in the design of middleware for fixed systems.",
                "As an example, consider the recent cross-layering trend in ad-hoc networking [1].",
                "This is a way of re-thinking software systems design, explicitly abandoning the classical forms of layering, since, although this separation of concerns afford portability, it does so at the expense of potential efficiency gains.",
                "We believe that it is possible to view our approach as an instance of cross-layering.",
                "In fact, we have added the epidemic network protocol at middleware level and, at the same time, we have used the existing synchronous network protocol if present both in delivering messages (traditional layering) and in informing the middleware about when messages may be delivered by revealing details of the forwarding tables (layer violation).",
                "For this reason, we prefer to consider them jointly as the communication layer of our platform together providing more efficient message delivery.",
                "Another interesting aspect is the exploitation of context and system information to improve the performance of mobile middleware platforms.",
                "Again, as a result of adopting a cross-layering methodology, we are able to build systems that gather information from the underlying operating system and communication components in order to allow for adaptation of behaviour.",
                "We can summarise this conceptual design approach by saying that middleware platforms must be not only context-aware (i.e., they should be able to extract and analyse information from the surrounding context) but also system-aware (i.e., they should be able to gather information from the software and hardware components of the mobile system).",
                "A number of middleware systems have been developed to support ad-hoc networking with the use of asynchronous communication (such as LIME, XMIDDLE, STEAM [11]).",
                "In particular, the STEAM platform is an interesting example of event-based middleware for ad-hoc networks, providing location-aware message delivery and an effective solution for event filtering.",
                "A discussion of JMS, and its mobile realisation, has already been conducted in Sections 4 and 2.",
                "The Swiss company Softwired has developed the first JMS middleware for mobile computing, called iBus Mobile [10].",
                "The main components of this typically infrastructure-based architecture are the JMS provider, the so-called mobile JMS gateway, which is deployed on a fixed host and a lightweight JMS client library.",
                "The gateway is used for the communication between the application server and mobile hosts.",
                "The gateway is seen by the JMS provider as a normal JMS client.",
                "The JMS provider can be any JMS-enabled application server, such as BEA Weblogic.",
                "Pronto [19] is an example of mid125 Middleware 2004 Companion dleware system based on messaging that is specifically designed for mobile environments.",
                "The platform is composed of three classes of components: mobile clients implementing the JMS specification, gateways that control traffic, guaranteeing efficiency and possible user customizations using different plug-ins and JMS servers.",
                "Different configurations of these components are possible; with respect to mobile ad hoc networks applications, the most interesting is Serverless JMS.",
                "The aim of this configuration is to adapt JMS to a decentralized model.",
                "The publish-subscribe model exploits the efficiency and the scalability of the underlying IP multicast protocol.",
                "Unreliable and reliable message delivery services are provided: reliability is provided through a negative acknowledgment-based protocol.",
                "Pronto represents a good solution for infrastructure-based mobile networks but it does not adequately target ad-hoc settings, since mobile nodes rely on fixed servers for the exchange of messages.",
                "Other MOM implemented for mobile environments exist; however, they are usually straightforward extensions of existing middleware [8].",
                "The only implementation of MOM specifically designed for mobile ad-hoc networks was developed at the University of Newcastle [18].",
                "This work is again a JMS adaptation; the focus of that implementation is on group communication and the use of application level routing algorithms for topic delivery of messages.",
                "However, there are a number of differences in the focus of our work.",
                "The importance that we attribute to disconnections makes persistence a vital requirement for any middleware that needs to be used in mobile ad-hoc networks.",
                "The authors of [18] signal persistence as possible future work, not considering the fact that routing a message to a non-connected host will result in delivery failure.",
                "This is a remarkable limitation in mobile settings where unpredictable disconnections are the norm rather than the exception. 7.",
                "ROADMAP AND CONCLUSIONS Asynchronous communication is a useful communication paradigm for mobile ad-hoc networks, as hosts are allowed to come, go and pick up messages when convenient, also taking account of their resource availability (e.g., power, connectivity levels).",
                "In this paper we have described the state of the art in terms of MOM for mobile systems.",
                "We have also shown a proof of concept adaptation of JMS to the extreme scenario of partially connected mobile ad-hoc networks.",
                "We have described and discussed the characteristics and differences of our solution with respect to traditional JMS implementations and the existing adaptations for mobile settings.",
                "However, trade-offs between application-level routing and resource usage should also be investigated, as mobile devices are commonly power/resource scarce.",
                "A key limitation of this work is the poorly performing epidemic algorithm and an important advance in the practicability of this work requires an algorithm that better balances the needs of efficiency and message delivery probability.",
                "We are currently working on algorithms and protocols that, exploiting probabilistic and statistical techniques on the basis of small amounts of exchanged information, are able to improve considerably the efficiency in terms of resources (memory, bandwidth, etc) and the reliability of our middleware platform [13].",
                "One futuristic research development, which may take these ideas of adaptation of messaging middleware for mobile environments further is the introduction of more mobility oriented communication extensions, for instance the support of geocast (i.e., the ability to send messages to specific geographical areas). 8.",
                "REFERENCES [1] M. Conti, G. Maselli, G. Turi, and S. Giordano.",
                "Cross-layering in Mobile ad-hoc Network Design.",
                "IEEE Computer, 37(2):48-51, February 2004. [2] A. Demers, D. Greene, C. Hauser, W. Irish, J. Larson, S. Shenker, H. Sturgis, D. Swinehart, and D. Terry.",
                "Epidemic Algorithms for Replicated Database Maintenance.",
                "In Sixth Symposium on Principles of Distributed Computing, pages 1-12, August 1987. [3] A. Doria, M. Uden, and D. P. Pandey.",
                "Providing connectivity to the Saami nomadic community.",
                "In Proceedings of the Second International Conference on Open Collaborative Design for Sustainable Innovation, December 2002. [4] M. Haahr, R. Cunningham, and V. Cahill.",
                "Supporting CORBA applications in a Mobile Environment.",
                "In 5th International Conference on Mobile Computing and Networking (MOBICOM99), pages 36-47.",
                "ACM, August 1999. [5] M. Hapner, R. Burridge, R. Sharma, J. Fialli, and K. Stout.",
                "Java Message Service Specification Version 1.1.",
                "Sun Microsystems, Inc., April 2002. http://java.sun.com/products/jms/. [6] J. Hart.",
                "WebSphere MQ: Connecting your applications without complex programming.",
                "IBM WebSphere Software White Papers, 2003. [7] S. Hayward and M. Pezzini.",
                "Marrying Middleware and Mobile Computing.",
                "Gartner Group Research Report, September 2001. [8] IBM.",
                "WebSphere MQ EveryPlace Version 2.0, November 2002. http://www-3.ibm.com/software/integration/wmqe/. [9] ITU.",
                "Connecting remote communities.",
                "Documents of the World Summit on Information Society, 2003. http://www.itu.int/osg/spu/wsis-themes. [10] S. Maffeis.",
                "Introducing Wireless JMS.",
                "Softwired AG, www.sofwired-inc.com, 2002. [11] C. Mascolo, L. Capra, and W. Emmerich.",
                "Middleware for Mobile Computing.",
                "In E. Gregori, G. Anastasi, and S. Basagni, editors, Advanced Lectures on Networking, volume 2497 of Lecture Notes in Computer Science, pages 20-58.",
                "Springer Verlag, 2002. [12] Microsoft.",
                "Microsoft Message Queuing (MSMQ) Version 2.0 Documentation. [13] M. Musolesi, S. Hailes, and C. Mascolo.",
                "Adaptive routing for intermittently connected mobile ad-hoc networks.",
                "Technical report, UCL-CS Research Note, July 2004.",
                "Submitted for Publication. [14] Sun Microsystems.",
                "Java Naming and Directory Interface (JNDI) Documentation Version 1.2. 2003. http://java.sun.com/products/jndi/. [15] Sun Microsystems.",
                "Jini Specification Version 2.0, 2003. http://java.sun.com/products/jini/. [16] A. Vahdat and D. Becker.",
                "Epidemic routing for Partially Connected ad-hoc Networks.",
                "Technical Report CS-2000-06, Department of Computer Science, Duke University, 2000. [17] A. Vargas.",
                "The OMNeT++ discrete event simulation system.",
                "In Proceedings of the European Simulation Multiconference (ESM2001), Prague, June 2001. [18] E. Vollset, D. Ingham, and P. Ezhilchelvan.",
                "JMS on Mobile ad-hoc Networks.",
                "In Personal Wireless Communications (PWC), pages 40-52, Venice, September 2003. [19] E. Yoneki and J. Bacon.",
                "Pronto: Mobilegateway with publish-subscribe paradigm over wireless network.",
                "Technical Report 559, University of Cambridge, Computer Laboratory, February 2003.",
                "Middleware for Pervasive and ad-hoc Computing 126"
            ],
            "original_annotated_samples": [
                "In this paper, we present our experience in designing, implementing and evaluating EMMA (Epidemic Messaging Middleware for ad-hoc networks), an adaptation of Java Message Service (JMS) for <br>mobile ad-hoc environment</br>s.",
                "In this paper, we examine one of the foundational aspects of middleware for <br>mobile ad-hoc environment</br>s: that of the communication primitives.",
                "Moreover, in mobile ad-hoc systems, the likelihood of network fragmentation means that synchronous communication may in any case be impracticable, giving situations in which delay tolerant asynchronous traffic is the only form of traffic that could be supported. 121 Middleware 2004 Companion Middleware for <br>mobile ad-hoc environment</br>s must therefore support semi-synchronous or completely asynchronous communication primitives if it is to avoid substantial limitations to its utility.",
                "In <br>mobile ad-hoc environment</br>s, the discovery process cannot assume the existence of a fixed set of discovery servers that are always reachable, as this would not match the dynamicity of ad-hoc networks."
            ],
            "translated_annotated_samples": [
                "En este artículo, presentamos nuestra experiencia en el diseño, implementación y evaluación de EMMA (Middleware de Mensajería Epidémica para redes ad-hoc), una adaptación del Servicio de Mensajes Java (JMS) para <br>entornos móviles ad-hoc</br>.",
                "En este artículo, examinamos uno de los aspectos fundamentales de middleware para <br>entornos móviles ad-hoc</br>: el de los primitivos de comunicación.",
                "Además, en sistemas ad-hoc móviles, la probabilidad de fragmentación de la red significa que la comunicación síncrona puede resultar impracticable en cualquier caso, lo que da lugar a situaciones en las que el tráfico asincrónico tolerante a retrasos es la única forma de tráfico que podría ser admitida. El middleware para <br>entornos ad-hoc móviles</br> debe, por lo tanto, admitir primitivas de comunicación semi-síncronas o completamente asíncronas si se quiere evitar limitaciones sustanciales en su utilidad.",
                "En <br>entornos móviles ad-hoc</br>, el proceso de descubrimiento no puede asumir la existencia de un conjunto fijo de servidores de descubrimiento que siempre sean accesibles, ya que esto no coincidiría con la dinámica de las redes ad-hoc."
            ],
            "translated_text": "Adaptando Middleware de Mensajería Asincrónica a Redes Ad-hoc Mirco Musolesi Dept. Las características de los entornos móviles, con la posibilidad de desconexiones frecuentes y ancho de banda fluctuante, han obligado a replantear el middleware tradicional. En particular, los paradigmas de comunicación síncrona a menudo empleados en middleware estándar no parecen ser particularmente adecuados para entornos ad-hoc, en los que ni siquiera se puede asumir la disponibilidad intermitente de una red troncal. En cambio, la comunicación asincrónica parece ser un paradigma generalmente más adecuado para este tipo de entornos. Se ha desarrollado y utilizado middleware orientado a mensajes para sistemas tradicionales con el fin de proporcionar un paradigma de comunicación asíncrona para sistemas distribuidos, y, recientemente, también para algunos sistemas específicos de computación móvil. En este artículo, presentamos nuestra experiencia en el diseño, implementación y evaluación de EMMA (Middleware de Mensajería Epidémica para redes ad-hoc), una adaptación del Servicio de Mensajes Java (JMS) para <br>entornos móviles ad-hoc</br>. Discutimos en detalle los desafíos de diseño y algunas posibles soluciones, mostrando un ejemplo concreto de la viabilidad y adecuación de la aplicación del paradigma asíncrono en este contexto y delineando un plan de investigación para los próximos años. Categorías y Descriptores de Asignaturas C.2.4 [Redes de Computadoras-Comunicación]: Sistemas Distribuidos-Aplicaciones Distribuidas; C.2.1 [Arquitectura y Diseño de Redes]: Comunicación Inalámbrica Términos Generales DISEÑO, ALGORITMOS 1. INTRODUCCIÓN Con la creciente popularidad de los dispositivos móviles y su amplia adopción, existe una clara necesidad de permitir el desarrollo de un amplio espectro de aplicaciones que operen de manera efectiva en dicho entorno. Lamentablemente, esto está lejos de ser simple: los dispositivos móviles son cada vez más heterogéneos en cuanto a capacidades de procesamiento, tamaño de memoria, capacidad de batería e interfaces de red. Cada una de estas configuraciones tiene características sustancialmente diferentes que son estáticamente distintas, por ejemplo, hay una gran diferencia en la capacidad entre un mote de Berkeley y un portátil equipado con 802.11g, y que varían dinámicamente, como en situaciones de ancho de banda fluctuante y conectividad intermitente. Los entornos móviles ad hoc tienen un elemento adicional de complejidad en que son completamente descentralizados. Para poder desarrollar aplicaciones para entornos tan complejos, es esencial contar con una forma adecuada de middleware si se busca lograr un desarrollo rentable. En este artículo, examinamos uno de los aspectos fundamentales de middleware para <br>entornos móviles ad-hoc</br>: el de los primitivos de comunicación. Tradicionalmente, los primitivos de middleware más utilizados para la comunicación asumen la presencia simultánea de ambos puntos finales en una red, ya que la estabilidad y la ubicuidad de la infraestructura de redes no es una suposición irrazonable para la mayoría de los entornos cableados. En otras palabras, la mayoría de los paradigmas de comunicación son síncronos: middleware orientado a objetos como CORBA y Java RMI son ejemplos típicos de middleware basado en comunicación síncrona. En los últimos años, ha habido un creciente interés en plataformas basadas en paradigmas de comunicación asincrónica, como los sistemas de publicación-suscripción: estos han sido explotados con mucho éxito donde existe asincronía a nivel de aplicación. De acuerdo con un informe de mercado de Gartner [7]: Dada la popularidad, escalabilidad, flexibilidad y afinidad con arquitecturas móviles e inalámbricas de los middlewares orientados a mensajes (MOM), para el año 2004, es probable que MOM se convierta en la forma dominante de middleware de comunicación para vincular aplicaciones móviles y empresariales (probabilidad del 0.7)... Además, en sistemas ad-hoc móviles, la probabilidad de fragmentación de la red significa que la comunicación síncrona puede resultar impracticable en cualquier caso, lo que da lugar a situaciones en las que el tráfico asincrónico tolerante a retrasos es la única forma de tráfico que podría ser admitida. El middleware para <br>entornos ad-hoc móviles</br> debe, por lo tanto, admitir primitivas de comunicación semi-síncronas o completamente asíncronas si se quiere evitar limitaciones sustanciales en su utilidad. Además del desafío intelectual que implica apoyar este modelo, este trabajo también es interesante porque existen varios ámbitos de aplicación práctica al permitir la comunicación entre comunidades en áreas subdesarrolladas del mundo. Por lo tanto, por ejemplo, proyectos que se han llevado a cabo para ayudar a poblaciones que viven en lugares remotos del mundo como Laponia o en áreas pobres que carecen de infraestructura de conectividad fija. Ha habido intentos de proporcionar middleware móvil con estas propiedades, incluyendo STEAM, LIME, XMIDDLE, Bayou (consulte [11] para una revisión más completa del middleware móvil). Estos modelos difieren considerablemente de los middleware tradicionales existentes en cuanto a los primitivos proporcionados. Además, algunos de ellos fallan en proporcionar una solución para los verdaderos escenarios ad-hoc. Si el éxito proyectado de MOM se convierte en algo parecido a la realidad, habrá muchos programadores con experiencia en ello. La solución ideal al problema del middleware para sistemas ad-hoc es, entonces, permitir a los programadores utilizar los mismos paradigmas y modelos presentados por formas comunes de MOM y asegurar que estos paradigmas sean soportables dentro del entorno móvil. Este enfoque tiene claras ventajas al permitir que las aplicaciones desarrolladas en plataformas de middleware estándar se desplieguen fácilmente en dispositivos móviles. De hecho, algunas investigaciones ya han llevado a la adaptación de plataformas de middleware tradicionales a entornos móviles, principalmente para proporcionar integración entre dispositivos móviles y redes fijas existentes en un entorno nómada (es decir, mixto) [4]. En lo que respecta al middleware orientado a mensajes, las implementaciones actuales, sin embargo, asumen la existencia de una red troncal a la que los hosts móviles se conectan de vez en cuando mientras están en itinerancia [10], o asumen que los nodos siempre son de alguna manera accesibles a través de un camino [18]. No se ha intentado ninguna adaptación a escenarios heterogéneos o completamente ad hoc, con desconexiones frecuentes y nubes periódicamente aisladas de hosts. En el resto de este documento describimos un intento inicial de adaptar middleware orientado a mensajes para que se ajuste a dispositivos móviles y, más específicamente, a redes móviles ad-hoc. En nuestro caso, elegimos examinar JMS, como uno de los sistemas MOM más conocidos. En la última parte de este documento, exploramos las limitaciones de nuestros resultados y describimos los planes que tenemos para llevar a cabo el trabajo más adelante. Los sistemas de middleware orientados a mensajes y el Servicio de Mensajes de Java (JMS) admiten la comunicación entre componentes distribuidos a través del paso de mensajes: el remitente envía un mensaje a colas identificadas, que generalmente residen en un servidor. Un receptor recupera el mensaje de la cola en un momento diferente y puede confirmar la respuesta utilizando el mismo mecanismo asíncrono. La middleware orientada a mensajes soporta la comunicación asíncrona de una manera muy natural, logrando el desacoplamiento de emisores y receptores. Un remitente puede continuar procesando tan pronto como el middleware haya aceptado el mensaje; eventualmente, el receptor enviará un mensaje de confirmación y el remitente podrá recogerlo en un momento conveniente. Sin embargo, dado la forma en que están implementados, estos sistemas de middleware suelen requerir dispositivos con recursos abundantes, especialmente en términos de memoria y espacio en disco, donde se almacenan colas persistentes de mensajes que han sido recibidos pero aún no procesados. Sun Java Message Service [5], IBM WebSphere MQ [6], Microsoft MSMQ [12] son ejemplos de middleware orientado a mensajes muy exitosos para sistemas distribuidos tradicionales. El Servicio de Mensajería de Java (JMS) es una colección de interfaces para la comunicación asincrónica entre componentes distribuidos. Proporciona una forma común para que los programas de Java creen, envíen y reciban mensajes. Los usuarios de JMS suelen ser referidos como clientes. La especificación JMS define además a los proveedores como los componentes encargados de implementar el sistema de mensajería y proporcionar la funcionalidad administrativa y de control (es decir, persistencia y confiabilidad) requerida por el sistema. Los clientes pueden enviar y recibir mensajes, de forma asincrónica, a través del proveedor JMS, que se encarga de la entrega y, posiblemente, de la persistencia de los mensajes. Hay dos tipos de comunicación admitidos: modelos punto a punto y de publicación-suscripción. En el modelo punto a punto, los hosts envían mensajes a colas. Los receptores pueden ser registrados con algunas colas específicas, y pueden recuperar los mensajes de forma asíncrona para luego confirmar su recepción. El modelo de publicación-suscripción se basa en el uso de temas a los que los clientes pueden suscribirse. Los mensajes son enviados a los temas por otros clientes y luego son recibidos de forma asíncrona por todos los clientes suscritos. Los clientes aprenden sobre los temas y colas disponibles a través de la Interfaz de Nombres y Directorios de Java (JNDI) [14]. Las colas y los temas son creados por un administrador en el proveedor y se registran con la interfaz JNDI para su búsqueda. En la siguiente sección, presentamos los desafíos de las redes móviles y mostramos cómo JMS puede adaptarse para cumplir con estos requisitos. 3. JMS PARA COMPUTACIÓN MÓVIL Las redes móviles varían mucho en sus características, desde redes nómadas en las que los nodos se desplazan mientras están desconectados, hasta redes ad-hoc en las que los nodos se mueven libremente y no hay infraestructura. Las redes móviles ad-hoc son más comúnmente aplicables en situaciones donde la supervivencia y la capacidad de despliegue instantáneo son clave: especialmente en aplicaciones militares y de ayuda en casos de desastre. Entre estos dos tipos de redes móviles, sin embargo, existen una serie de posibles combinaciones heterogéneas, donde se utilizan paradigmas nómadas y ad-hoc para interconectar áreas totalmente inalámbricas con redes más estructuradas (como una LAN o Internet). Si bien la especificación JMS ha sido ampliamente implementada y utilizada en sistemas distribuidos tradicionales, las adaptaciones para entornos móviles han sido propuestas recientemente. Los desafíos de adaptar JMS a entornos móviles son considerables; sin embargo, dada su amplia aceptación y uso, existen ventajas considerables al permitir la adaptación de aplicaciones existentes a entornos móviles y al permitir la interoperabilidad de aplicaciones en las regiones cableadas e inalámbricas de una red. En [10], JMS se adaptó a un entorno móvil nómada, donde los hosts móviles pueden ser clientes de JMS y comunicarse a través del proveedor de JMS que, sin embargo, se encuentra en una red troncal, proporcionando fiabilidad y persistencia. El prototipo del cliente presentado en [10] es muy ligero, debido a la delegación de toda la funcionalidad pesada al proveedor Middleware para Computación Pervasive y ad-hoc 122 en la red cableada. Sin embargo, este enfoque es algo limitado en términos de aplicabilidad generalizada y escalabilidad como consecuencia de la concentración de funcionalidad en la parte cableada de la red. Si se quiere adaptar JMS a entornos completamente ad hoc, donde no haya infraestructura fija disponible y donde los nodos cambien de ubicación y estado de forma muy dinámica, se deben tener en cuenta más problemas. En primer lugar, el descubrimiento necesita utilizar un modelo resiliente pero distribuido: en este entorno extremadamente dinámico, las soluciones estáticas son inaceptables. Como se discute en la Sección 2, un administrador de JMS define colas y temas en el proveedor. Los clientes pueden entonces aprender sobre ellos utilizando la Interfaz de Nombres y Directorios de Java (JNDI). Sin embargo, debido a la forma en que está diseñado JNDI, es necesario que un nodo de JNDI (o más de uno) esté al alcance para obtener una vinculación de un nombre a una dirección (es decir, saber dónde se encuentra una cola o un tema específico). En <br>entornos móviles ad-hoc</br>, el proceso de descubrimiento no puede asumir la existencia de un conjunto fijo de servidores de descubrimiento que siempre sean accesibles, ya que esto no coincidiría con la dinámica de las redes ad-hoc. En segundo lugar, un Proveedor de JMS, como sugiere la especificación de JMS, también debe ser accesible para cada nodo en la red, para poder comunicarse. Esto asume una arquitectura muy centralizada, que nuevamente no coincide con los requisitos de un entorno ad-hoc móvil, en el que los nodos pueden estar en movimiento y dispersos: se necesita una solución más distribuida y dinámica. La persistencia es, sin embargo, una funcionalidad esencial en entornos de comunicación asincrónica, ya que los hosts están, por definición, conectados en momentos diferentes. En la siguiente sección, discutiremos nuestra experiencia en el diseño e implementación de JMS para redes móviles ad-hoc. 4. El desarrollo de aplicaciones para redes móviles es aún más desafiante: además de las mismas consideraciones que para entornos inalámbricos infraestructurados, como las limitadas capacidades de los dispositivos y las restricciones de energía, existen problemas relacionados con la velocidad de cambio de la conectividad de la red y la falta de una infraestructura de enrutamiento estática. En consecuencia, ahora describimos un intento inicial de adaptar la especificación JMS para satisfacer los requisitos particulares relacionados con escenarios ad-hoc. Como se discute en la Sección 3, una aplicación JMS puede utilizar tanto el estilo de mensajería punto a punto como el de publicación-suscripción. Modelo de punto a punto. El modelo de punto a punto se basa en el concepto de colas, que se utilizan para habilitar la comunicación asincrónica entre el productor de un mensaje y posibles consumidores diferentes. En nuestra solución, la ubicación de las colas se determina mediante un proceso de negociación que depende de la aplicación. Por ejemplo, supongamos que es posible saber a priori, o es posible determinar dinámicamente, que cierto host es el receptor de la mayor parte de los mensajes enviados a una cola particular. En este caso, la ubicación óptima de la cola bien podría estar en este host en particular. En general, vale la pena señalar que, según la especificación de JMS y los patrones de diseño sugeridos, es común y preferible que un cliente tenga todos sus mensajes entregados a una sola cola. Las colas se anuncian periódicamente a los anfitriones que se encuentran dentro del rango de transmisión o que son alcanzables mediante el protocolo de comunicación síncrona subyacente, si se proporciona. Es importante tener en cuenta que, a nivel de middleware, es lógicamente irrelevante si la capa de red implementa alguna forma de enrutamiento ad-hoc (aunque considerablemente más eficiente si lo hace); el middleware solo considera información sobre qué nodos son accesibles activamente en cualquier momento. Los hosts que reciben mensajes publicitarios agregan entradas a su registro JNDI. Cada entrada se caracteriza por un arrendamiento (un mecanismo similar al presente en Jini [15]). Un contrato de arrendamiento representa el tiempo de validez de una entrada particular. Si un arrendamiento no se renueva (es decir, su vida no se extiende), puede vencer y, en consecuencia, la entrada se elimina del registro. En otras palabras, el anfitrión asume que la cola será inaccesible a partir de ese momento. Esto puede ser causado, por ejemplo, si un host que almacena la cola se vuelve inaccesible. Un host que inicia un proceso de descubrimiento encontrará los temas y las colas presentes en su porción conectada de la red de manera directa. Para enviar un mensaje a un anfitrión que actualmente no está al alcance, utilizamos un protocolo de enrutamiento de epidemia asíncrono que se discutirá en detalle en la Sección 4.2. Si dos hosts están en la misma nube (es decir, existe un camino conectado entre ellos), pero no hay disponible un protocolo síncrono, los mensajes se envían utilizando el protocolo epidémico. En este caso, la latencia de entrega será baja como resultado de la rapidez de propagación de la infección en la nube conectada (ver también los resultados de la simulación en la Sección 5). Dado la existencia de un protocolo de epidemia, el mecanismo de descubrimiento consiste en publicitar las colas a los hosts que actualmente son inalcanzables utilizando mecanismos análogos. En el modelo de publicación-suscripción, algunos de los hosts son designados de manera similar para mantener temas y almacenar suscripciones, como antes. Los temas se anuncian a través del registro de la misma manera que las colas, y un cliente que desee suscribirse a un tema debe registrarse con el cliente que tiene el tema. Cuando un cliente desea enviar un mensaje a la lista de temas, lo envía al titular del tema (de la misma manera que enviaría un mensaje a una cola). El titular del tema luego reenvía el mensaje a todos los suscriptores, utilizando el protocolo síncrono si es posible, de lo contrario el protocolo epidémico. Vale la pena señalar que utilizamos un único mensaje con múltiples destinatarios, en lugar de múltiples mensajes con múltiples destinatarios. Cuando un mensaje es entregado a uno de los suscriptores, este destinatario es eliminado de la lista. Para eliminar las posibles réplicas restantes, empleamos mensajes de acuse de recibo (discutidos en la Sección 4.4), devueltos de la misma manera que un mensaje normal. También hemos adaptado los conceptos de suscripciones duraderas y no duraderas para entornos ad-hoc. En las plataformas fijas, las suscripciones duraderas se mantienen durante las desconexiones de los clientes, ya sean intencionales o resultado de fallas. En los sistemas tradicionales, cuando un suscriptor duradero se desconecta del servidor, es responsable de almacenar los mensajes. Cuando el suscriptor duradero se reconecta, el servidor le envía todos los mensajes no caducados. El problema es que, en nuestro escenario, las desconexiones son la norma. En teoría, no es posible enviar un mensaje a un par que nunca ha sido alcanzable en el pasado, ya que no puede haber ninguna entrada presente en el registro. Sin embargo, para superar esta posible limitación, proporcionamos un mecanismo a través del cual la información puede ser añadida al registro sin utilizar los canales normales. 123 Middleware 2004 Companion en lugar de la excepción. En otras palabras, no podemos considerar las desconexiones como fallos. Por estas razones, adoptamos una semántica ligeramente diferente. En lo que respecta a las suscripciones duraderas, si un suscriptor se desconecta, las notificaciones no se almacenan, sino que se envían utilizando el protocolo epidémico en lugar del protocolo síncrono. En otras palabras, las notificaciones duraderas siguen siendo válidas durante las posibles desconexiones del suscriptor. Por otro lado, si un suscriptor no duradero se desconecta, su suscripción se elimina; en otras palabras, durante las desconexiones, las notificaciones no se envían utilizando el protocolo epidémico, sino que solo se aprovecha el protocolo síncrono. Si el tema vuelve a estar accesible para este anfitrión, deberá realizar otra suscripción para recibir las notificaciones. Los mensajes de baja se entregan de la misma manera que los mensajes de suscripción. Es importante tener en cuenta que los suscriptores duraderos deben darse de baja explícitamente de un tema para detener el proceso de notificación; sin embargo, todas las suscripciones duraderas tienen un tiempo de expiración predefinido para hacer frente a los casos de suscriptores que no vuelven a conectarse debido a sus movimientos o fallos. Esta característica se proporciona claramente para limitar el número de mensajes innecesarios enviados por la red. 4.2 Entrega de mensajes utilizando enrutamiento epidémico En esta sección, examinamos un mecanismo posible que permitirá la entrega de mensajes en una red parcialmente conectada. El mecanismo que discutimos está destinado a demostrar viabilidad; los mecanismos de comunicación más eficientes para este entorno son complejos por sí mismos y son el tema de otro artículo [13]. La entrega de mensajes asincrónica descrita anteriormente se basa en un protocolo de enrutamiento de estilo epidémico puro típico [16]. Un mensaje que necesita ser enviado se replica en cada host al alcance. De esta manera, las copias de los mensajes se propagan rápidamente a través de redes conectadas, como una infección. Si un anfitrión se conecta a otra nube de nodos móviles durante su movimiento, el mensaje se propaga a través de esta colección de anfitriones. La replicación de datos y mensajes en estilo epidémico ha sido explotada en el pasado en muchos campos, comenzando por el área de sistemas de bases de datos distribuidas [2]. Dentro del enrutamiento epidémico, cada anfitrión mantiene un búfer que contiene los mensajes que ha creado y las réplicas de los mensajes generados por los otros anfitriones. Para mejorar el rendimiento, una tabla hash indexa el contenido del búfer. Cuando dos anfitriones se conectan, el anfitrión con el identificador más pequeño inicia una sesión de anti-entropía, enviando una lista que contiene los identificadores únicos de los mensajes que actualmente almacena. El otro anfitrión evalúa esta lista y envía de vuelta una lista que contiene los identificadores que está almacenando y que no están presentes en el otro anfitrión, junto con los mensajes que el otro no tiene. El anfitrión que ha iniciado la sesión recibe la lista y, de la misma manera, envía los mensajes que no están presentes en el otro anfitrión. En caso de producirse un desbordamiento de búfer, los mensajes se descartan. La fiabilidad ofrecida por este protocolo es generalmente de mejor esfuerzo, ya que no hay garantía de que un mensaje finalmente sea entregado a su destinatario. Claramente, la proporción de entrega del protocolo aumenta proporcionalmente al tiempo máximo de retraso permitido y al tamaño del búfer en cada host (pueden encontrarse resultados interesantes de simulación en [16]). 4.3 Adaptación del Modelo de Mensajes JMS En esta sección, analizaremos los aspectos de nuestra adaptación de la especificación relacionados con el llamado Modelo de Mensajes JMS [5]. Según esto, los mensajes JMS se caracterizan por algunas propiedades definidas utilizando el campo de encabezado, que contiene valores que son utilizados tanto por los clientes como por los proveedores para su entrega. Los aspectos discutidos en el resto de esta sección son válidos para ambos modelos (punto a punto y publicar-suscribir). Un mensaje JMS puede ser persistente o no persistente. Según la especificación de JMS, los mensajes persistentes deben entregarse con un grado de confiabilidad mayor que los no persistentes. Sin embargo, vale la pena señalar que no es posible garantizar la fiabilidad de una sola vez para mensajes persistentes según lo definido en la especificación, ya que, como discutimos en la subsección anterior, el protocolo epidémico subyacente solo puede garantizar la entrega de mejor esfuerzo. Sin embargo, los clientes mantienen una lista de los identificadores de los mensajes recibidos recientemente para evitar la entrega de mensajes duplicados. En otras palabras, proporcionamos a las aplicaciones una fiabilidad inmediata para ambos tipos de mensajes. Para implementar diferentes niveles de confiabilidad, EMMA trata de manera diferente los mensajes persistentes y no persistentes durante la ejecución del protocolo epidémico de anti-entropía. Dado que el espacio del búfer de mensajes es limitado, los mensajes persistentes se replican preferentemente utilizando el espacio libre disponible. Si esto es insuficiente y hay mensajes no persistentes presentes en el búfer, estos son reemplazados. Solo se notifican a los remitentes las entregas exitosas de los mensajes persistentes. Según la especificación de JMS, es posible asignar una prioridad a cada mensaje. Los mensajes con prioridades más altas se entregan de manera preferencial. Como se discutió anteriormente, los mensajes persistentes tienen prioridad sobre los no persistentes. La selección adicional se basa en sus prioridades. Los mensajes con prioridades más altas son tratados de manera preferencial. De hecho, si no hay suficiente espacio para replicar todos los mensajes persistentes, se utiliza un mecanismo basado en prioridades para eliminar y replicar los mensajes no persistentes (y, si es necesario, los mensajes persistentes). Los mensajes se eliminan de los buffers utilizando el valor de tiempo de expiración que puede ser establecido por los remitentes. Esta es una forma de liberar espacio en los búferes (se eliminan preferentemente los mensajes más antiguos en casos de conflicto); para eliminar réplicas obsoletas en el sistema; y para limitar el tiempo durante el cual los destinos deben mantener los identificadores de mensajes para desechar duplicados. Mecanismos de fiabilidad y de acuse de recibo Como ya se discutió, la entrega de mensajes como máximo una vez es lo mejor que se puede lograr en términos de semántica de entrega en entornos ad-hoc parcialmente conectados. Sin embargo, es posible mejorar la confiabilidad del sistema con mecanismos de acuse de recibo eficientes. EMMA proporciona un mecanismo de notificación de fallos a las aplicaciones si no se recibe el acuse de recibo dentro de un tiempo límite dado (que puede ser configurado por los desarrolladores de aplicaciones). Este mecanismo es el que distingue la entrega de mensajes persistentes y no persistentes en nuestra implementación de JMS: las entregas de los primeros son notificadas a los remitentes, mientras que los de los segundos no lo son. Utilizamos mensajes de acuse de recibo no solo para informar a los remitentes sobre la entrega exitosa de los mensajes, sino también para eliminar las réplicas de los mensajes entregados que aún están presentes en la red. Cada anfitrión mantiene una lista de los mensajes Middleware para la Computación Pervasiva y Ad-hoc 124 entregados con éxito que se actualiza como parte del proceso normal de intercambio de información entre los anfitriones. Las listas se intercambian durante los primeros pasos del protocolo de epidemia anti-entropía con una frecuencia predefinida. En el caso de mensajes con múltiples destinatarios, también se almacena una lista de los destinatarios reales. Cuando un anfitrión recibe la lista, verifica su búfer de mensajes y lo actualiza de acuerdo con las siguientes reglas: (1) si un mensaje tiene un único destinatario y ha sido entregado, se elimina del búfer; (2) si un mensaje tiene múltiples destinatarios, se eliminan los identificadores de los anfitriones a los que se ha entregado de la lista de destinatarios asociada. Si la longitud resultante de la lista de destinatarios es cero, el mensaje se elimina del búfer. Estas listas tienen, claramente, dimensiones finitas y se implementan como colas circulares. Este mecanismo simple, junto con el uso de marcas de tiempo de expiración, garantiza que las antiguas notificaciones de acuse de recibo sean eliminadas del sistema después de un período de tiempo limitado. Para mejorar la confiabilidad de EMMA, se podría desarrollar un mecanismo de diseño para la replicación inteligente de colas y temas basado en la información de contexto. Sin embargo, esto aún no forma parte de la arquitectura actual de EMMA. 5. IMPLEMENTACIÓN Y EVALUACIÓN PRELIMINAR Implementamos un prototipo de nuestra plataforma utilizando el Perfil Personal J2ME. El tamaño del ejecutable es de aproximadamente 250KB, incluido el archivo jar de JMS 1.1; esta es una cifra perfectamente aceptable dada la memoria disponible de los dispositivos móviles actuales en el mercado. Probamos nuestro prototipo en PDAs HP iPaq con Linux, interconectados con WaveLan, y en varios laptops con la misma interfaz de red. También evaluamos la plataforma de middleware utilizando el simulador de eventos discretos OMNET++ [17] para explorar una variedad de escenarios móviles que incorporaban un número más realista de hosts que el que se podía lograr experimentalmente. Más específicamente, evaluamos el rendimiento del sistema en términos de ratio de entrega y retraso promedio, variando la densidad de población y el tamaño del búfer, y utilizando mensajes persistentes y no persistentes con diferentes prioridades. Los resultados de la simulación muestran que el rendimiento de EMMAs, en términos de ratio de entrega y retraso de mensajes persistentes con prioridades más altas, es bueno. En general, es evidente que la proporción de entrega está fuertemente relacionada con el dimensionamiento correcto de los búferes para el retraso máximo aceptable. Además, los algoritmos epidémicos son capaces de garantizar una alta tasa de entrega si se evalúa el rendimiento durante un intervalo de tiempo suficiente para la difusión de las réplicas de los mensajes (es decir, la propagación de la infección) en una gran parte de la red ad-hoc. Una consecuencia del problema de dimensionamiento es que la escalabilidad puede verse seriamente afectada en middleware peer-to-peer para computación móvil debido a la escasez de recursos de los dispositivos (memoria limitada para almacenar temporalmente mensajes) y al número de posibles interconexiones en entornos ad-hoc. Lo peor es que las formas comunes de organización comercial y social (seis grados de separación) significan que incluso valores modestos de TTL en los mensajes provocarán una difusión generalizada de mensajes epidémicos. Este problema surge debido a la falta de inteligencia en el protocolo de la epidemia, y puede ser abordado seleccionando nodos portadores para los mensajes con mayor cuidado. Sin embargo, los detalles de este proceso están fuera del alcance de este documento (pero pueden encontrarse en [13]) y no afectan la base en la que se basa el middleware EMMA: la capacidad de entregar mensajes de forma asincrónica. 6. VISIÓN CRÍTICA DEL ESTADO DEL ARTE El diseño de plataformas de middleware para la computación móvil requiere que los investigadores respondan a preguntas nuevas y fundamentalmente diferentes; simplemente asumir la presencia de porciones cableadas de la red en las que pueda residir la funcionalidad centralizada no es generalizable. Por lo tanto, es necesario investigar nuevos principios de diseño y idear patrones arquitectónicos que difieran de los tradicionalmente utilizados en el diseño de middleware para sistemas fijos. Como ejemplo, considera la reciente tendencia de superposición de capas en redes ad-hoc [1]. Esta es una forma de replantear el diseño de sistemas de software, abandonando explícitamente las formas clásicas de estratificación, ya que, aunque esta separación de preocupaciones permite la portabilidad, lo hace a expensas de posibles ganancias de eficiencia. Creemos que es posible ver nuestro enfoque como una instancia de superposición de capas. De hecho, hemos añadido el protocolo de red epidémica a nivel de middleware y, al mismo tiempo, hemos utilizado el protocolo de red síncrono existente si está presente tanto en la entrega de mensajes (capas tradicionales) como en informar al middleware sobre cuándo pueden entregarse los mensajes revelando detalles de las tablas de reenvío (violación de capas). Por esta razón, preferimos considerarlos conjuntamente como la capa de comunicación de nuestra plataforma, proporcionando juntos una entrega de mensajes más eficiente. Otro aspecto interesante es la explotación del contexto y la información del sistema para mejorar el rendimiento de las plataformas de middleware móvil. Una vez más, como resultado de adoptar una metodología de capas cruzadas, podemos construir sistemas que recopilan información del sistema operativo subyacente y los componentes de comunicación para permitir la adaptación del comportamiento. Podemos resumir este enfoque de diseño conceptual diciendo que las plataformas de middleware deben ser no solo conscientes del contexto (es decir, deben ser capaces de extraer y analizar información del contexto circundante) sino también conscientes del sistema (es decir, deben ser capaces de recopilar información de los componentes de software y hardware del sistema móvil). Se han desarrollado varios sistemas de middleware para admitir redes ad hoc con el uso de comunicación asíncrona (como LIME, XMIDDLE, STEAM [11]). En particular, la plataforma STEAM es un ejemplo interesante de middleware basado en eventos para redes ad hoc, que proporciona entrega de mensajes con conciencia de ubicación y una solución efectiva para el filtrado de eventos. Una discusión sobre JMS, y su realización móvil, ya ha sido realizada en las Secciones 4 y 2. La empresa suiza Softwired ha desarrollado el primer middleware JMS para computación móvil, llamado iBus Mobile [10]. Los componentes principales de esta arquitectura típicamente basada en infraestructura son el proveedor de JMS, la llamada puerta de enlace móvil de JMS, que se despliega en un host fijo y una biblioteca de cliente JMS ligera. El gateway se utiliza para la comunicación entre el servidor de aplicaciones y los dispositivos móviles. El proveedor JMS ve la pasarela como un cliente JMS normal. El proveedor JMS puede ser cualquier servidor de aplicaciones habilitado para JMS, como BEA Weblogic. Pronto [19] es un ejemplo de un sistema de middleware basado en mensajería, diseñado específicamente para entornos móviles. La plataforma está compuesta por tres clases de componentes: clientes móviles que implementan la especificación JMS, pasarelas que controlan el tráfico, garantizando eficiencia y posibles personalizaciones de usuario utilizando diferentes complementos y servidores JMS. Diferentes configuraciones de estos componentes son posibles; con respecto a las aplicaciones de redes móviles ad hoc, la más interesante es Serverless JMS. El objetivo de esta configuración es adaptar JMS a un modelo descentralizado. El modelo de publicación-suscripción explota la eficiencia y la escalabilidad del protocolo de multidifusión IP subyacente. Se proporcionan servicios de entrega de mensajes poco confiables y confiables: la confiabilidad se logra a través de un protocolo basado en acuse de recibo negativo. Pronto representa una buena solución para redes móviles basadas en infraestructura, pero no se dirige adecuadamente a entornos ad-hoc, ya que los nodos móviles dependen de servidores fijos para el intercambio de mensajes. Existen otras MOM implementadas para entornos móviles; sin embargo, suelen ser extensiones sencillas de middleware existente [8]. La única implementación de MOM específicamente diseñada para redes móviles ad-hoc fue desarrollada en la Universidad de Newcastle [18]. Este trabajo es nuevamente una adaptación de JMS; el enfoque de esa implementación se centra en la comunicación de grupo y el uso de algoritmos de enrutamiento a nivel de aplicación para la entrega de mensajes por tema. Sin embargo, hay una serie de diferencias en el enfoque de nuestro trabajo. La importancia que atribuimos a las desconexiones hace que la persistencia sea un requisito vital para cualquier middleware que necesite ser utilizado en redes móviles ad-hoc. Los autores de [18] señalan la persistencia como un posible trabajo futuro, sin considerar el hecho de que enrutar un mensaje a un host no conectado resultará en un fallo de entrega. Esta es una limitación notable en entornos móviles donde las desconexiones impredecibles son la norma en lugar de la excepción. 7. MAPA Y CONCLUSIONES La comunicación asincrónica es un paradigma de comunicación útil para las redes móviles ad-hoc, ya que permite a los hosts llegar, irse y recoger mensajes cuando sea conveniente, teniendo en cuenta también la disponibilidad de sus recursos (por ejemplo, energía, niveles de conectividad). En este artículo hemos descrito el estado del arte en términos de MOM para sistemas móviles. También hemos demostrado una adaptación de prueba de concepto de JMS al escenario extremo de redes móviles ad-hoc parcialmente conectadas. Hemos descrito y discutido las características y diferencias de nuestra solución con respecto a las implementaciones tradicionales de JMS y las adaptaciones existentes para entornos móviles. Sin embargo, también se deben investigar los compromisos entre el enrutamiento a nivel de aplicación y el uso de recursos, ya que los dispositivos móviles suelen tener escasez de energía/recursos. Una limitación clave de este trabajo es el algoritmo epidémico que tiene un rendimiento deficiente y un avance importante en la practicabilidad de este trabajo requiere un algoritmo que equilibre mejor las necesidades de eficiencia y probabilidad de entrega de mensajes. Actualmente estamos trabajando en algoritmos y protocolos que, aprovechando técnicas probabilísticas y estadísticas sobre la base de pequeñas cantidades de información intercambiada, son capaces de mejorar considerablemente la eficiencia en términos de recursos (memoria, ancho de banda, etc.) y la confiabilidad de nuestra plataforma de middleware [13]. Un desarrollo de investigación futurista, que podría llevar estas ideas de adaptación de middleware de mensajería para entornos móviles más allá, es la introducción de extensiones de comunicación más orientadas a la movilidad, como el soporte de geocast (es decir, la capacidad de enviar mensajes a áreas geográficas específicas). REFERENCIAS [1] M. Conti, G. Maselli, G. Turi y S. Giordano. Diseño de redes móviles ad-hoc con interconexión de capas. IEEE Computer, 37(2):48-51, febrero de 2004. [2] A. Demers, D. Greene, C. Hauser, W. Irish, J. Larson, S. Shenker, H. Sturgis, D. Swinehart y D. Terry. Algoritmos de epidemia para el mantenimiento de bases de datos replicadas. En el Sexto Simposio sobre Principios de Computación Distribuida, páginas 1-12, agosto de 1987. [3] A. Doria, M. Uden y D. P. Pandey. Proporcionando conectividad a la comunidad nómada Saami. En Actas de la Segunda Conferencia Internacional sobre Diseño Colaborativo Abierto para la Innovación Sostenible, diciembre de 2002. [4] M. Haahr, R. Cunningham y V. Cahill. Aplicaciones CORBA en un entorno móvil. En la 5ª Conferencia Internacional sobre Computación y Redes Móviles (MOBICOM99), páginas 36-47. ACM, agosto de 1999. [5] M. Hapner, R. Burridge, R. Sharma, J. Fialli y K. Stout. Especificación del Servicio de Mensajes Java Versión 1.1. Sun Microsystems, Inc., abril de 2002. http://java.sun.com/products/jms/. [6] J. Hart. WebSphere MQ: Conectando sus aplicaciones sin programación compleja. IBM WebSphere Software White Papers, 2003. [7] S. Hayward y M. Pezzini. Casando Middleware y Computación Móvil. Informe de investigación del Grupo Gartner, septiembre de 2001. [8] IBM. WebSphere MQ EveryPlace Versión 2.0, noviembre de 2002. http://www-3.ibm.com/software/integration/wmqe/. [9] UIT. Conectando comunidades remotas. Documentos de la Cumbre Mundial sobre la Sociedad de la Información, 2003. http://www.itu.int/osg/spu/wsis-themes. [10] S. Maffeis. Presentando JMS inalámbrico. Softwired AG, www.sofwired-inc.com, 2002. [11] C. Mascolo, L. Capra y W. Emmerich. Middleware para Computación Móvil. En E. Gregori, G. Anastasi y S. Basagni, editores, Conferencias Avanzadas sobre Redes, volumen 2497 de las Notas de Conferencias en Ciencias de la Computación, páginas 20-58. Springer Verlag, 2002. [12] Microsoft. \n\nSpringer Verlag, 2002. [12] Microsoft. Documentación de Microsoft Message Queuing (MSMQ) Versión 2.0. [13] M. Musolesi, S. Hailes y C. Mascolo. Enrutamiento adaptativo para redes ad-hoc móviles intermitentemente conectadas. Informe técnico, Nota de Investigación UCL-CS, julio de 2004. Enviado para su publicación. [14] Sun Microsystems. Documentación de Java Naming and Directory Interface (JNDI) Versión 1.2. 2003. http://java.sun.com/products/jndi/. [15] Sun Microsystems. Especificación de Jini Versión 2.0, 2003. http://java.sun.com/products/jini/. [16] A. Vahdat y D. Becker. Enrutamiento epidémico para redes ad-hoc parcialmente conectadas. Informe técnico CS-2000-06, Departamento de Ciencias de la Computación, Universidad de Duke, 2000. [17] A. Vargas. El sistema de simulación de eventos discretos OMNeT++. En Actas de la Multiconferencia Europea de Simulación (ESM2001), Praga, junio de 2001. [18] E. Vollset, D. Ingham y P. Ezhilchelvan. JMS en redes móviles ad-hoc. En Comunicaciones Inalámbricas Personales (PWC), páginas 40-52, Venecia, septiembre de 2003. [19] E. Yoneki y J. Bacon. Pronto: Mobilegateway con paradigma de publicación-suscripción sobre red inalámbrica. Informe Técnico 559, Universidad de Cambridge, Laboratorio de Computación, febrero de 2003. Middleware para Computación Pervasive y ad-hoc 126 ",
            "candidates": [],
            "error": [
                [
                    "entornos móviles ad-hoc",
                    "entornos móviles ad-hoc",
                    "entornos ad-hoc móviles",
                    "entornos móviles ad-hoc"
                ]
            ]
        },
        "epidemic messaging middleware": {
            "translated_key": "Middleware de Mensajería Epidémica",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Adapting Asynchronous Messaging Middleware to ad-hoc Networking Mirco Musolesi Dept.",
                "of Computer Science, University College London Gower Street, London WC1E 6BT, United Kingdom m.musolesi@cs.ucl.ac.uk Cecilia Mascolo Dept. of Computer Science, University College London Gower Street, London WC1E 6BT, United Kingdom c.mascolo@cs.ucl.ac.uk Stephen Hailes Dept. of Computer Science, University College London Gower Street, London WC1E 6BT, United Kingdom s.hailes@cs.ucl.ac.uk ABSTRACT The characteristics of mobile environments, with the possibility of frequent disconnections and fluctuating bandwidth, have forced a rethink of traditional middleware.",
                "In particular, the synchronous communication paradigms often employed in standard middleware do not appear to be particularly suited to ad-hoc environments, in which not even the intermittent availability of a backbone network can be assumed.",
                "Instead, asynchronous communication seems to be a generally more suitable paradigm for such environments.",
                "Message oriented middleware for traditional systems has been developed and used to provide an asynchronous paradigm of communication for distributed systems, and, recently, also for some specific mobile computing systems.",
                "In this paper, we present our experience in designing, implementing and evaluating EMMA (<br>epidemic messaging middleware</br> for ad-hoc networks), an adaptation of Java Message Service (JMS) for mobile ad-hoc environments.",
                "We discuss in detail the design challenges and some possible solutions, showing a concrete example of the feasibility and suitability of the application of the asynchronous paradigm in this setting and outlining a research roadmap for the coming years.",
                "Categories and Subject Descriptors C.2.4 [Computer-Communication Networks]: Distributed Systems-Distributed Applications; C.2.1 [Network Architecture and Design]: Wireless Communication General Terms DESIGN, ALGORITHMS 1.",
                "INTRODUCTION With the increasing popularity of mobile devices and their widespread adoption, there is a clear need to allow the development of a broad spectrum of applications that operate effectively over such an environment.",
                "Unfortunately, this is far from simple: mobile devices are increasingly heterogeneous in terms of processing capabilities, memory size, battery capacity, and network interfaces.",
                "Each such configuration has substantially different characteristics that are both statically different - for example, there is a major difference in capability between a Berkeley mote and an 802.11g-equipped laptop - and that vary dynamically, as in situations of fluctuating bandwidth and intermittent connectivity.",
                "Mobile ad hoc environments have an additional element of complexity in that they are entirely decentralised.",
                "In order to craft applications for such complex environments, an appropriate form of middleware is essential if cost effective development is to be achieved.",
                "In this paper, we examine one of the foundational aspects of middleware for mobile ad-hoc environments: that of the communication primitives.",
                "Traditionally, the most frequently used middleware primitives for communication assume the simultaneous presence of both end points on a network, since the stability and pervasiveness of the networking infrastructure is not an unreasonable assumption for most wired environments.",
                "In other words, most communication paradigms are synchronous: object oriented middleware such as CORBA and Java RMI are typical examples of middleware based on synchronous communication.",
                "In recent years, there has been growing interest in platforms based on asynchronous communication paradigms, such as publish-subscribe systems [6]: these have been exploited very successfully where there is application level asynchronicity.",
                "From a Gartner Market Report [7]: Given messageoriented-middlewares (MOM) popularity, scalability, flexibility, and affinity with mobile and wireless architectures, by 2004, MOM will emerge as the dominant form of communication middleware for linking mobile and enterprise applications (0.7 probability)....",
                "Moreover, in mobile ad-hoc systems, the likelihood of network fragmentation means that synchronous communication may in any case be impracticable, giving situations in which delay tolerant asynchronous traffic is the only form of traffic that could be supported. 121 Middleware 2004 Companion Middleware for mobile ad-hoc environments must therefore support semi-synchronous or completely asynchronous communication primitives if it is to avoid substantial limitations to its utility.",
                "Aside from the intellectual challenge in supporting this model, this work is also interesting because there are a number of practical application domains in allowing inter-community communication in undeveloped areas of the globe.",
                "Thus, for example, projects that have been carried out to help populations that live in remote places of the globe such as Lapland [3] or in poor areas that lack fixed connectivity infrastructure [9].",
                "There have been attempts to provide mobile middleware with these properties, including STEAM, LIME, XMIDDLE, Bayou (see [11] for a more complete review of mobile middleware).",
                "These models differ quite considerably from the existing traditional middleware in terms of primitives provided.",
                "Furthermore, some of them fail in providing a solution for the true ad-hoc scenarios.",
                "If the projected success of MOM becomes anything like a reality, there will be many programmers with experience of it.",
                "The ideal solution to the problem of middleware for ad-hoc systems is, then, to allow programmers to utilise the same paradigms and models presented by common forms of MOM and to ensure that these paradigms are supportable within the mobile environment.",
                "This approach has clear advantages in allowing applications developed on standard middleware platforms to be easily deployed on mobile devices.",
                "Indeed, some research has already led to the adaptation of traditional middleware platforms to mobile settings, mainly to provide integration between mobile devices and existing fixed networks in a nomadic (i.e., mixed) environment [4].",
                "With respect to message oriented middleware, the current implementations, however, either assume the existence of a backbone network to which the mobile hosts connect from time to time while roaming [10], or assume that nodes are always somehow reachable through a path [18].",
                "No adaptation to heterogeneous or completely ad-hoc scenarios, with frequent disconnection and periodically isolated clouds of hosts, has been attempted.",
                "In the remainder of this paper we describe an initial attempt to adapt message oriented middleware to suit mobile and, more specifically, mobile ad-hoc networks.",
                "In our case, we elected to examine JMS, as one of the most widely known MOM systems.",
                "In the latter part of this paper, we explore the limitations of our results and describe the plans we have to take the work further. 2.",
                "MESSAGE ORIENTED MIDDLEWARE AND JAVA MESSAGE SERVICE (JMS) Message-oriented middleware systems support communication between distributed components via message-passing: the sender sends a message to identified queues, which usually reside on a server.",
                "A receiver retrieves the message from the queue at a different time and may acknowledge the reply using the same asynchronous mechanism.",
                "Message-oriented middleware thus supports asynchronous communication in a very natural way, achieving de-coupling of senders and receivers.",
                "A sender is able to continue processing as soon as the middleware has accepted the message; eventually, the receiver will send an acknowledgment message and the sender will be able to collect it at a convenient time.",
                "However, given the way they are implemented, these middleware systems usually require resource-rich devices, especially in terms of memory and disk space, where persistent queues of messages that have been received but not yet processed, are stored.",
                "Sun Java Message Service [5], IBM WebSphere MQ [6], Microsoft MSMQ [12] are examples of very successful message-oriented middleware for traditional distributed systems.",
                "The Java Messaging Service (JMS) is a collection of interfaces for asynchronous communication between distributed components.",
                "It provides a common way for Java programs to create, send and receive messages.",
                "JMS users are usually referred to as clients.",
                "The JMS specification further defines providers as the components in charge of implementing the messaging system and providing the administrative and control functionality (i.e., persistence and reliability) required by the system.",
                "Clients can send and receive messages, asynchronously, through the JMS provider, which is in charge of the delivery and, possibly, of the persistence of the messages.",
                "There are two types of communication supported: point to point and publish-subscribe models.",
                "In the point to point model, hosts send messages to queues.",
                "Receivers can be registered with some specific queues, and can asynchronously retrieve the messages and then acknowledge them.",
                "The publish-subscribe model is based on the use of topics that can be subscribed to by clients.",
                "Messages are sent to topics by other clients and are then received in an asynchronous mode by all the subscribed clients.",
                "Clients learn about the available topics and queues through Java Naming and Directory Interface (JNDI) [14].",
                "Queues and topics are created by an administrator on the provider and are registered with the JNDI interface for look-up.",
                "In the next section, we introduce the challenges of mobile networks, and show how JMS can be adapted to cope with these requirements. 3.",
                "JMS FOR MOBILE COMPUTING Mobile networks vary very widely in their characteristics, from nomadic networks in which modes relocate whilst offline through to ad-hoc networks in which modes move freely and in which there is no infrastructure.",
                "Mobile ad-hoc networks are most generally applicable in situations where survivability and instant deployability are key: most notably in military applications and disaster relief.",
                "In between these two types of mobile networks, there are, however, a number of possible heterogeneous combinations, where nomadic and ad-hoc paradigms are used to interconnect totally unwired areas to more structured networks (such as a LAN or the Internet).",
                "Whilst the JMS specification has been extensively implemented and used in traditional distributed systems, adaptations for mobile environments have been proposed only recently.",
                "The challenges of porting JMS to mobile settings are considerable; however, in view of its widespread acceptance and use, there are considerable advantages in allowing the adaptation of existing applications to mobile environments and in allowing the interoperation of applications in the wired and wireless regions of a network.",
                "In [10], JMS was adapted to a nomadic mobile setting, where mobile hosts can be JMS clients and communicate through the JMS provider that, however, sits on a backbone network, providing reliability and persistence.",
                "The client prototype presented in [10] is very lightweight, due to the delegation of all the heavyweight functionality to the Middleware for Pervasive and ad-hoc Computing 122 provider on the wired network.",
                "However, this approach is somewhat limited in terms of widespread applicability and scalability as a consequence of the concentration of functionality in the wired portion of the network.",
                "If JMS is to be adapted to completely ad-hoc environments, where no fixed infrastructure is available, and where nodes change location and status very dynamically, more issues must be taken into consideration.",
                "Firstly, discovery needs to use a resilient but distributed model: in this extremely dynamic environment, static solutions are unacceptable.",
                "As discussed in Section 2, a JMS administrator defines queues and topics on the provider.",
                "Clients can then learn about them using the Java Naming and Directory Interface (JNDI).",
                "However, due to the way JNDI is designed, a JNDI node (or more than one) needs to be in reach in order to obtain a binding of a name to an address (i.e., knowing where a specific queue/topic is).",
                "In mobile ad-hoc environments, the discovery process cannot assume the existence of a fixed set of discovery servers that are always reachable, as this would not match the dynamicity of ad-hoc networks.",
                "Secondly, a JMS Provider, as suggested by the JMS specification, also needs to be reachable by each node in the network, in order to communicate.",
                "This assumes a very centralised architecture, which again does not match the requirements of a mobile ad-hoc setting, in which nodes may be moving and sparse: a more distributed and dynamic solution is needed.",
                "Persistence is, however, essential functionality in asynchronous communication environments as hosts are, by definition, connected at different times.",
                "In the following section, we will discuss our experience in designing and implementing JMS for mobile ad-hoc networks. 4.",
                "JMSFOR MOBILE ad-hoc NETWORKS 4.1 Adaptation of JMS for Mobile ad-hoc Networks Developing applications for mobile networks is yet more challenging: in addition to the same considerations as for infrastructured wireless environments, such as the limited device capabilities and power constraints, there are issues of rate of change of network connectivity, and the lack of a static routing infrastructure.",
                "Consequently, we now describe an initial attempt to adapt the JMS specification to target the particular requirements related to ad-hoc scenarios.",
                "As discussed in Section 3, a JMS application can use either the point to point and the publish-subscribe styles of messaging.",
                "Point to Point Model The point to point model is based on the concept of queues, that are used to enable asynchronous communication between the producer of a message and possible different consumers.",
                "In our solution, the location of queues is determined by a negotiation process that is application dependent.",
                "For example, let us suppose that it is possible to know a priori, or it is possible to determine dynamically, that a certain host is the receiver of the most part of messages sent to a particular queue.",
                "In this case, the optimum location of the queue may well be on this particular host.",
                "In general, it is worth noting that, according to the JMS specification and suggested design patterns, it is common and preferable for a client to have all of its messages delivered to a single queue.",
                "Queues are advertised periodically to the hosts that are within transmission range or that are reachable by means of the underlying synchronous communication protocol, if provided.",
                "It is important to note that, at the middleware level, it is logically irrelevant whether or not the network layer implements some form of ad-hoc routing (though considerably more efficient if it does); the middleware only considers information about which nodes are actively reachable at any point in time.",
                "The hosts that receive advertisement messages add entries to their JNDI registry.",
                "Each entry is characterized by a lease (a mechanism similar to that present in Jini [15]).",
                "A lease represents the time of validity of a particular entry.",
                "If a lease is not refreshed (i.e, its life is not extended), it can expire and, consequently, the entry is deleted from the registry.",
                "In other words, the host assumes that the queue will be unreachable from that point in time.",
                "This may be caused, for example, if a host storing the queue becomes unreachable.",
                "A host that initiates a discovery process will find the topics and the queues present in its connected portion of the network in a straightforward manner.",
                "In order to deliver a message to a host that is not currently in reach1 , we use an asynchronous epidemic routing protocol that will be discussed in detail in Section 4.2.",
                "If two hosts are in the same cloud (i.e., a connected path exists between them), but no synchronous protocol is available, the messages are sent using the epidemic protocol.",
                "In this case, the delivery latency will be low as a result of the rapidity of propagation of the infection in the connected cloud (see also the simulation results in Section 5).",
                "Given the existence of an epidemic protocol, the discovery mechanism consists of advertising the queues to the hosts that are currently unreachable using analogous mechanisms.",
                "Publish-Subscribe Model In the publish-subscribe model, some of the hosts are similarly designated to hold topics and store subscriptions, as before.",
                "Topics are advertised through the registry in the same way as are queues, and a client wishing to subscribe to a topic must register with the client holding the topic.",
                "When a client wishes to send a message to the topic list, it sends it to the topic holder (in the same way as it would send a message to a queue).",
                "The topic holder then forwards the message to all subscribers, using the synchronous protocol if possible, the epidemic protocol otherwise.",
                "It is worth noting that we use a single message with multiple recipients, instead of multiple messages with multiple recipients.",
                "When a message is delivered to one of the subscribers, this recipient is deleted from the list.",
                "In order to delete the other possible replicas, we employ acknowledgment messages (discussed in Section 4.4), returned in the same way as a normal message.",
                "We have also adapted the concepts of durable and non durable subscriptions for ad-hoc settings.",
                "In fixed platforms, durable subscriptions are maintained during the disconnections of the clients, whether these are intentional or are the result of failures.",
                "In traditional systems, while a durable subscriber is disconnected from the server, it is responsible for storing messages.",
                "When the durable subscriber reconnects, the server sends it all unexpired messages.",
                "The problem is that, in our scenario, disconnections are the norm 1 In theory, it is not possible to send a message to a peer that has never been reachable in the past, since there can be no entry present in the registry.",
                "However, to overcome this possible limitation, we provide a primitive through which information can be added to the registry without using the normal channels. 123 Middleware 2004 Companion rather than the exception.",
                "In other words, we cannot consider disconnections as failures.",
                "For these reasons, we adopt a slightly different semantics.",
                "With respect to durable subscriptions, if a subscriber becomes disconnected, notifications are not stored but are sent using the epidemic protocol rather than the synchronous protocol.",
                "In other words, durable notifications remain valid during the possible disconnections of the subscriber.",
                "On the other hand, if a non-durable subscriber becomes disconnected, its subscription is deleted; in other words, during disconnections, notifications are not sent using the epidemic protocol but exploit only the synchronous protocol.",
                "If the topic becomes accessible to this host again, it must make another subscription in order to receive the notifications.",
                "Unsubscription messages are delivered in the same way as are subscription messages.",
                "It is important to note that durable subscribers have explicitly to unsubscribe from a topic in order to stop the notification process; however, all durable subscriptions have a predefined expiration time in order to cope with the cases of subscribers that do not meet again because of their movements or failures.",
                "This feature is clearly provided to limit the number of the unnecessary messages sent around the network. 4.2 Message Delivery using Epidemic Routing In this section, we examine one possible mechanism that will allow the delivery of messages in a partially connected network.",
                "The mechanism we discuss is intended for the purposes of demonstrating feasibility; more efficient communication mechanisms for this environment are themselves complex, and are the subject of another paper [13].",
                "The asynchronous message delivery described above is based on a typical pure epidemic-style routing protocol [16].",
                "A message that needs to be sent is replicated on each host in reach.",
                "In this way, copies of the messages are quickly spread through connected networks, like an infection.",
                "If a host becomes connected to another cloud of mobile nodes, during its movement, the message spreads through this collection of hosts.",
                "Epidemic-style replication of data and messages has been exploited in the past in many fields starting with the distributed database systems area [2].",
                "Within epidemic routing, each host maintains a buffer containing the messages that it has created and the replicas of the messages generated by the other hosts.",
                "To improve the performance, a hash-table indexes the content of the buffer.",
                "When two hosts connect, the host with the smaller identifier initiates a so-called anti-entropy session, sending a list containing the unique identifiers of the messages that it currently stores.",
                "The other host evaluates this list and sends back a list containing the identifiers it is storing that are not present in the other host, together with the messages that the other does not have.",
                "The host that has started the session receives the list and, in the same way, sends the messages that are not present in the other host.",
                "Should buffer overflow occur, messages are dropped.",
                "The reliability offered by this protocol is typically best effort, since there is no guarantee that a message will eventually be delivered to its recipient.",
                "Clearly, the delivery ratio of the protocol increases proportionally to the maximum allowed delay time and the buffer size in each host (interesting simulation results may be found in [16]). 4.3 Adaptation of the JMS Message Model In this section, we will analyse the aspects of our adaptation of the specification related to the so-called JMS Message Model [5].",
                "According to this, JMS messages are characterised by some properties defined using the header field, which contains values that are used by both clients and providers for their delivery.",
                "The aspects discussed in the remainder of this section are valid for both models (point to point and publish-subscribe).",
                "A JMS message can be persistent or non-persistent.",
                "According to the JMS specification, persistent messages must be delivered with a higher degree of reliability than the nonpersistent ones.",
                "However, it is worth noting that it is not possible to ensure once-and-only-once reliability for persistent messages as defined in the specification, since, as we discussed in the previous subsection, the underlying epidemic protocol can guarantee only best-effort delivery.",
                "However, clients maintain a list of the identifiers of the recently received messages to avoid the delivery of message duplicates.",
                "In other words, we provide the applications with at-mostonce reliability for both types of messages.",
                "In order to implement different levels of reliability, EMMA treats persistent and non-persistent messages differently, during the execution of the anti-entropy epidemic protocol.",
                "Since the message buffer space is limited, persistent messages are preferentially replicated using the available free space.",
                "If this is insufficient and non-persistent messages are present in the buffer, these are replaced.",
                "Only the successful deliveries of the persistent messages are notified to the senders.",
                "According to the JMS specification, it is possible to assign a priority to each message.",
                "The messages with higher priorities are delivered in a preferential way.",
                "As discussed above, persistent messages are prioritised above the non-persistent ones.",
                "Further selection is based on their priorities.",
                "Messages with higher priorities are treated in a preferential way.",
                "In fact, if there is not enough space to replicate all the persistent messages, a mechanism based on priorities is used to delete and replicate non-persistent messages (and, if necessary, persistent messages).",
                "Messages are deleted from the buffers using the expiration time value that can be set by senders.",
                "This is a way to free space in the buffers (one preferentially deletes older messages in cases of conflict); to eliminate stale replicas in the system; and to limit the time for which destinations must hold message identifiers to dispose of duplicates. 4.4 Reliability and Acknowledgment Mechanisms As already discussed, at-most-once message delivery is the best that can be achieved in terms of delivery semantics in partially connected ad-hoc settings.",
                "However, it is possible to improve the reliability of the system with efficient acknowledgment mechanisms.",
                "EMMA provides a mechanism for failure notification to applications if the acknowledgment is not received within a given timeout (that can be configured by application developers).",
                "This mechanism is the one that distinguishes the delivery of persistent and non-persistent messages in our JMS implementation: the deliveries of the former are notified to the senders, whereas the latter are not.",
                "We use acknowledgment messages not only to inform senders about the successful delivery of messages but also to delete the replicas of the delivered messages that are still present in the network.",
                "Each host maintains a list of the messages Middleware for Pervasive and ad-hoc Computing 124 successfully delivered that is updated as part of the normal process of information exchange between the hosts.",
                "The lists are exchanged during the first steps of the anti-entropic epidemic protocol with a certain predefined frequency.",
                "In the case of messages with multiple recipients, a list of the actual recipients is also stored.",
                "When a host receives the list, it checks its message buffer and updates it according to the following rules: (1) if a message has a single recipient and it has been delivered, it is deleted from the buffer; (2) if a message has multiple recipients, the identifiers of the delivered hosts are deleted from the associated list of recipients.",
                "If the resulting length of the list of recipients is zero, the message is deleted from the buffer.",
                "These lists have, clearly, finite dimensions and are implemented as circular queues.",
                "This simple mechanism, together with the use of expiration timestamps, guarantees that the old acknowledgment notifications are deleted from the system after a limited period of time.",
                "In order to improve the reliability of EMMA, a design mechanism for intelligent replication of queues and topics based on the context information could be developed.",
                "However this is not yet part of the current architecture of EMMA. 5.",
                "IMPLEMENTATION AND PRELIMINARY EVALUATION We implemented a prototype of our platform using the J2ME Personal Profile.",
                "The size of the executable is about 250KB including the JMS 1.1 jar file; this is a perfectly acceptable figure given the available memory of the current mobile devices on the market.",
                "We tested our prototype on HP IPaq PDAs running Linux, interconnected with WaveLan, and on a number of laptops with the same network interface.",
                "We also evaluated the middleware platform using the OMNET++ discrete event simulator [17] in order to explore a range of mobile scenarios that incorporated a more realistic number of hosts than was achievable experimentally.",
                "More specifically, we assessed the performance of the system in terms of delivery ratio and average delay, varying the density of population and the buffer size, and using persistent and non-persistent messages with different priorities.",
                "The simulation results show that the EMMAs performance, in terms of delivery ratio and delay of persistent messages with higher priorities, is good.",
                "In general, it is evident that the delivery ratio is strongly related to the correct dimensioning of the buffers to the maximum acceptable delay.",
                "Moreover, the epidemic algorithms are able to guarantee a high delivery ratio if one evaluates performance over a time interval sufficient for the dissemination of the replicas of messages (i.e., the infection spreading) in a large portion of the ad-hoc network.",
                "One consequence of the dimensioning problem is that scalability may be seriously impacted in peer-to-peer middleware for mobile computing due to the resource poverty of the devices (limited memory to store temporarily messages) and the number of possible interconnections in ad-hoc settings.",
                "What is worse is that common forms of commercial and social organisation (six degrees of separation) mean that even modest TTL values on messages will lead to widespread flooding of epidemic messages.",
                "This problem arises because of the lack of intelligence in the epidemic protocol, and can be addressed by selecting carrier nodes for messages with greater care.",
                "The details of this process are, however, outside the scope of this paper (but may be found in [13]) and do not affect the foundation on which the EMMA middleware is based: the ability to deliver messages asynchronously. 6.",
                "CRITICAL VIEW OF THE STATE OF THE ART The design of middleware platforms for mobile computing requires researchers to answer new and fundamentally different questions; simply assuming the presence of wired portions of the network on which centralised functionality can reside is not generalisable.",
                "Thus, it is necessary to investigate novel design principles and to devise architectural patterns that differ from those traditionally exploited in the design of middleware for fixed systems.",
                "As an example, consider the recent cross-layering trend in ad-hoc networking [1].",
                "This is a way of re-thinking software systems design, explicitly abandoning the classical forms of layering, since, although this separation of concerns afford portability, it does so at the expense of potential efficiency gains.",
                "We believe that it is possible to view our approach as an instance of cross-layering.",
                "In fact, we have added the epidemic network protocol at middleware level and, at the same time, we have used the existing synchronous network protocol if present both in delivering messages (traditional layering) and in informing the middleware about when messages may be delivered by revealing details of the forwarding tables (layer violation).",
                "For this reason, we prefer to consider them jointly as the communication layer of our platform together providing more efficient message delivery.",
                "Another interesting aspect is the exploitation of context and system information to improve the performance of mobile middleware platforms.",
                "Again, as a result of adopting a cross-layering methodology, we are able to build systems that gather information from the underlying operating system and communication components in order to allow for adaptation of behaviour.",
                "We can summarise this conceptual design approach by saying that middleware platforms must be not only context-aware (i.e., they should be able to extract and analyse information from the surrounding context) but also system-aware (i.e., they should be able to gather information from the software and hardware components of the mobile system).",
                "A number of middleware systems have been developed to support ad-hoc networking with the use of asynchronous communication (such as LIME, XMIDDLE, STEAM [11]).",
                "In particular, the STEAM platform is an interesting example of event-based middleware for ad-hoc networks, providing location-aware message delivery and an effective solution for event filtering.",
                "A discussion of JMS, and its mobile realisation, has already been conducted in Sections 4 and 2.",
                "The Swiss company Softwired has developed the first JMS middleware for mobile computing, called iBus Mobile [10].",
                "The main components of this typically infrastructure-based architecture are the JMS provider, the so-called mobile JMS gateway, which is deployed on a fixed host and a lightweight JMS client library.",
                "The gateway is used for the communication between the application server and mobile hosts.",
                "The gateway is seen by the JMS provider as a normal JMS client.",
                "The JMS provider can be any JMS-enabled application server, such as BEA Weblogic.",
                "Pronto [19] is an example of mid125 Middleware 2004 Companion dleware system based on messaging that is specifically designed for mobile environments.",
                "The platform is composed of three classes of components: mobile clients implementing the JMS specification, gateways that control traffic, guaranteeing efficiency and possible user customizations using different plug-ins and JMS servers.",
                "Different configurations of these components are possible; with respect to mobile ad hoc networks applications, the most interesting is Serverless JMS.",
                "The aim of this configuration is to adapt JMS to a decentralized model.",
                "The publish-subscribe model exploits the efficiency and the scalability of the underlying IP multicast protocol.",
                "Unreliable and reliable message delivery services are provided: reliability is provided through a negative acknowledgment-based protocol.",
                "Pronto represents a good solution for infrastructure-based mobile networks but it does not adequately target ad-hoc settings, since mobile nodes rely on fixed servers for the exchange of messages.",
                "Other MOM implemented for mobile environments exist; however, they are usually straightforward extensions of existing middleware [8].",
                "The only implementation of MOM specifically designed for mobile ad-hoc networks was developed at the University of Newcastle [18].",
                "This work is again a JMS adaptation; the focus of that implementation is on group communication and the use of application level routing algorithms for topic delivery of messages.",
                "However, there are a number of differences in the focus of our work.",
                "The importance that we attribute to disconnections makes persistence a vital requirement for any middleware that needs to be used in mobile ad-hoc networks.",
                "The authors of [18] signal persistence as possible future work, not considering the fact that routing a message to a non-connected host will result in delivery failure.",
                "This is a remarkable limitation in mobile settings where unpredictable disconnections are the norm rather than the exception. 7.",
                "ROADMAP AND CONCLUSIONS Asynchronous communication is a useful communication paradigm for mobile ad-hoc networks, as hosts are allowed to come, go and pick up messages when convenient, also taking account of their resource availability (e.g., power, connectivity levels).",
                "In this paper we have described the state of the art in terms of MOM for mobile systems.",
                "We have also shown a proof of concept adaptation of JMS to the extreme scenario of partially connected mobile ad-hoc networks.",
                "We have described and discussed the characteristics and differences of our solution with respect to traditional JMS implementations and the existing adaptations for mobile settings.",
                "However, trade-offs between application-level routing and resource usage should also be investigated, as mobile devices are commonly power/resource scarce.",
                "A key limitation of this work is the poorly performing epidemic algorithm and an important advance in the practicability of this work requires an algorithm that better balances the needs of efficiency and message delivery probability.",
                "We are currently working on algorithms and protocols that, exploiting probabilistic and statistical techniques on the basis of small amounts of exchanged information, are able to improve considerably the efficiency in terms of resources (memory, bandwidth, etc) and the reliability of our middleware platform [13].",
                "One futuristic research development, which may take these ideas of adaptation of messaging middleware for mobile environments further is the introduction of more mobility oriented communication extensions, for instance the support of geocast (i.e., the ability to send messages to specific geographical areas). 8.",
                "REFERENCES [1] M. Conti, G. Maselli, G. Turi, and S. Giordano.",
                "Cross-layering in Mobile ad-hoc Network Design.",
                "IEEE Computer, 37(2):48-51, February 2004. [2] A. Demers, D. Greene, C. Hauser, W. Irish, J. Larson, S. Shenker, H. Sturgis, D. Swinehart, and D. Terry.",
                "Epidemic Algorithms for Replicated Database Maintenance.",
                "In Sixth Symposium on Principles of Distributed Computing, pages 1-12, August 1987. [3] A. Doria, M. Uden, and D. P. Pandey.",
                "Providing connectivity to the Saami nomadic community.",
                "In Proceedings of the Second International Conference on Open Collaborative Design for Sustainable Innovation, December 2002. [4] M. Haahr, R. Cunningham, and V. Cahill.",
                "Supporting CORBA applications in a Mobile Environment.",
                "In 5th International Conference on Mobile Computing and Networking (MOBICOM99), pages 36-47.",
                "ACM, August 1999. [5] M. Hapner, R. Burridge, R. Sharma, J. Fialli, and K. Stout.",
                "Java Message Service Specification Version 1.1.",
                "Sun Microsystems, Inc., April 2002. http://java.sun.com/products/jms/. [6] J. Hart.",
                "WebSphere MQ: Connecting your applications without complex programming.",
                "IBM WebSphere Software White Papers, 2003. [7] S. Hayward and M. Pezzini.",
                "Marrying Middleware and Mobile Computing.",
                "Gartner Group Research Report, September 2001. [8] IBM.",
                "WebSphere MQ EveryPlace Version 2.0, November 2002. http://www-3.ibm.com/software/integration/wmqe/. [9] ITU.",
                "Connecting remote communities.",
                "Documents of the World Summit on Information Society, 2003. http://www.itu.int/osg/spu/wsis-themes. [10] S. Maffeis.",
                "Introducing Wireless JMS.",
                "Softwired AG, www.sofwired-inc.com, 2002. [11] C. Mascolo, L. Capra, and W. Emmerich.",
                "Middleware for Mobile Computing.",
                "In E. Gregori, G. Anastasi, and S. Basagni, editors, Advanced Lectures on Networking, volume 2497 of Lecture Notes in Computer Science, pages 20-58.",
                "Springer Verlag, 2002. [12] Microsoft.",
                "Microsoft Message Queuing (MSMQ) Version 2.0 Documentation. [13] M. Musolesi, S. Hailes, and C. Mascolo.",
                "Adaptive routing for intermittently connected mobile ad-hoc networks.",
                "Technical report, UCL-CS Research Note, July 2004.",
                "Submitted for Publication. [14] Sun Microsystems.",
                "Java Naming and Directory Interface (JNDI) Documentation Version 1.2. 2003. http://java.sun.com/products/jndi/. [15] Sun Microsystems.",
                "Jini Specification Version 2.0, 2003. http://java.sun.com/products/jini/. [16] A. Vahdat and D. Becker.",
                "Epidemic routing for Partially Connected ad-hoc Networks.",
                "Technical Report CS-2000-06, Department of Computer Science, Duke University, 2000. [17] A. Vargas.",
                "The OMNeT++ discrete event simulation system.",
                "In Proceedings of the European Simulation Multiconference (ESM2001), Prague, June 2001. [18] E. Vollset, D. Ingham, and P. Ezhilchelvan.",
                "JMS on Mobile ad-hoc Networks.",
                "In Personal Wireless Communications (PWC), pages 40-52, Venice, September 2003. [19] E. Yoneki and J. Bacon.",
                "Pronto: Mobilegateway with publish-subscribe paradigm over wireless network.",
                "Technical Report 559, University of Cambridge, Computer Laboratory, February 2003.",
                "Middleware for Pervasive and ad-hoc Computing 126"
            ],
            "original_annotated_samples": [
                "In this paper, we present our experience in designing, implementing and evaluating EMMA (<br>epidemic messaging middleware</br> for ad-hoc networks), an adaptation of Java Message Service (JMS) for mobile ad-hoc environments."
            ],
            "translated_annotated_samples": [
                "En este artículo, presentamos nuestra experiencia en el diseño, implementación y evaluación de EMMA (<br>Middleware de Mensajería Epidémica</br> para redes ad-hoc), una adaptación del Servicio de Mensajes Java (JMS) para entornos móviles ad-hoc."
            ],
            "translated_text": "Adaptando Middleware de Mensajería Asincrónica a Redes Ad-hoc Mirco Musolesi Dept. Las características de los entornos móviles, con la posibilidad de desconexiones frecuentes y ancho de banda fluctuante, han obligado a replantear el middleware tradicional. En particular, los paradigmas de comunicación síncrona a menudo empleados en middleware estándar no parecen ser particularmente adecuados para entornos ad-hoc, en los que ni siquiera se puede asumir la disponibilidad intermitente de una red troncal. En cambio, la comunicación asincrónica parece ser un paradigma generalmente más adecuado para este tipo de entornos. Se ha desarrollado y utilizado middleware orientado a mensajes para sistemas tradicionales con el fin de proporcionar un paradigma de comunicación asíncrona para sistemas distribuidos, y, recientemente, también para algunos sistemas específicos de computación móvil. En este artículo, presentamos nuestra experiencia en el diseño, implementación y evaluación de EMMA (<br>Middleware de Mensajería Epidémica</br> para redes ad-hoc), una adaptación del Servicio de Mensajes Java (JMS) para entornos móviles ad-hoc. Discutimos en detalle los desafíos de diseño y algunas posibles soluciones, mostrando un ejemplo concreto de la viabilidad y adecuación de la aplicación del paradigma asíncrono en este contexto y delineando un plan de investigación para los próximos años. Categorías y Descriptores de Asignaturas C.2.4 [Redes de Computadoras-Comunicación]: Sistemas Distribuidos-Aplicaciones Distribuidas; C.2.1 [Arquitectura y Diseño de Redes]: Comunicación Inalámbrica Términos Generales DISEÑO, ALGORITMOS 1. INTRODUCCIÓN Con la creciente popularidad de los dispositivos móviles y su amplia adopción, existe una clara necesidad de permitir el desarrollo de un amplio espectro de aplicaciones que operen de manera efectiva en dicho entorno. Lamentablemente, esto está lejos de ser simple: los dispositivos móviles son cada vez más heterogéneos en cuanto a capacidades de procesamiento, tamaño de memoria, capacidad de batería e interfaces de red. Cada una de estas configuraciones tiene características sustancialmente diferentes que son estáticamente distintas, por ejemplo, hay una gran diferencia en la capacidad entre un mote de Berkeley y un portátil equipado con 802.11g, y que varían dinámicamente, como en situaciones de ancho de banda fluctuante y conectividad intermitente. Los entornos móviles ad hoc tienen un elemento adicional de complejidad en que son completamente descentralizados. Para poder desarrollar aplicaciones para entornos tan complejos, es esencial contar con una forma adecuada de middleware si se busca lograr un desarrollo rentable. En este artículo, examinamos uno de los aspectos fundamentales de middleware para entornos móviles ad-hoc: el de los primitivos de comunicación. Tradicionalmente, los primitivos de middleware más utilizados para la comunicación asumen la presencia simultánea de ambos puntos finales en una red, ya que la estabilidad y la ubicuidad de la infraestructura de redes no es una suposición irrazonable para la mayoría de los entornos cableados. En otras palabras, la mayoría de los paradigmas de comunicación son síncronos: middleware orientado a objetos como CORBA y Java RMI son ejemplos típicos de middleware basado en comunicación síncrona. En los últimos años, ha habido un creciente interés en plataformas basadas en paradigmas de comunicación asincrónica, como los sistemas de publicación-suscripción: estos han sido explotados con mucho éxito donde existe asincronía a nivel de aplicación. De acuerdo con un informe de mercado de Gartner [7]: Dada la popularidad, escalabilidad, flexibilidad y afinidad con arquitecturas móviles e inalámbricas de los middlewares orientados a mensajes (MOM), para el año 2004, es probable que MOM se convierta en la forma dominante de middleware de comunicación para vincular aplicaciones móviles y empresariales (probabilidad del 0.7)... Además, en sistemas ad-hoc móviles, la probabilidad de fragmentación de la red significa que la comunicación síncrona puede resultar impracticable en cualquier caso, lo que da lugar a situaciones en las que el tráfico asincrónico tolerante a retrasos es la única forma de tráfico que podría ser admitida. El middleware para entornos ad-hoc móviles debe, por lo tanto, admitir primitivas de comunicación semi-síncronas o completamente asíncronas si se quiere evitar limitaciones sustanciales en su utilidad. Además del desafío intelectual que implica apoyar este modelo, este trabajo también es interesante porque existen varios ámbitos de aplicación práctica al permitir la comunicación entre comunidades en áreas subdesarrolladas del mundo. Por lo tanto, por ejemplo, proyectos que se han llevado a cabo para ayudar a poblaciones que viven en lugares remotos del mundo como Laponia o en áreas pobres que carecen de infraestructura de conectividad fija. Ha habido intentos de proporcionar middleware móvil con estas propiedades, incluyendo STEAM, LIME, XMIDDLE, Bayou (consulte [11] para una revisión más completa del middleware móvil). Estos modelos difieren considerablemente de los middleware tradicionales existentes en cuanto a los primitivos proporcionados. Además, algunos de ellos fallan en proporcionar una solución para los verdaderos escenarios ad-hoc. Si el éxito proyectado de MOM se convierte en algo parecido a la realidad, habrá muchos programadores con experiencia en ello. La solución ideal al problema del middleware para sistemas ad-hoc es, entonces, permitir a los programadores utilizar los mismos paradigmas y modelos presentados por formas comunes de MOM y asegurar que estos paradigmas sean soportables dentro del entorno móvil. Este enfoque tiene claras ventajas al permitir que las aplicaciones desarrolladas en plataformas de middleware estándar se desplieguen fácilmente en dispositivos móviles. De hecho, algunas investigaciones ya han llevado a la adaptación de plataformas de middleware tradicionales a entornos móviles, principalmente para proporcionar integración entre dispositivos móviles y redes fijas existentes en un entorno nómada (es decir, mixto) [4]. En lo que respecta al middleware orientado a mensajes, las implementaciones actuales, sin embargo, asumen la existencia de una red troncal a la que los hosts móviles se conectan de vez en cuando mientras están en itinerancia [10], o asumen que los nodos siempre son de alguna manera accesibles a través de un camino [18]. No se ha intentado ninguna adaptación a escenarios heterogéneos o completamente ad hoc, con desconexiones frecuentes y nubes periódicamente aisladas de hosts. En el resto de este documento describimos un intento inicial de adaptar middleware orientado a mensajes para que se ajuste a dispositivos móviles y, más específicamente, a redes móviles ad-hoc. En nuestro caso, elegimos examinar JMS, como uno de los sistemas MOM más conocidos. En la última parte de este documento, exploramos las limitaciones de nuestros resultados y describimos los planes que tenemos para llevar a cabo el trabajo más adelante. Los sistemas de middleware orientados a mensajes y el Servicio de Mensajes de Java (JMS) admiten la comunicación entre componentes distribuidos a través del paso de mensajes: el remitente envía un mensaje a colas identificadas, que generalmente residen en un servidor. Un receptor recupera el mensaje de la cola en un momento diferente y puede confirmar la respuesta utilizando el mismo mecanismo asíncrono. La middleware orientada a mensajes soporta la comunicación asíncrona de una manera muy natural, logrando el desacoplamiento de emisores y receptores. Un remitente puede continuar procesando tan pronto como el middleware haya aceptado el mensaje; eventualmente, el receptor enviará un mensaje de confirmación y el remitente podrá recogerlo en un momento conveniente. Sin embargo, dado la forma en que están implementados, estos sistemas de middleware suelen requerir dispositivos con recursos abundantes, especialmente en términos de memoria y espacio en disco, donde se almacenan colas persistentes de mensajes que han sido recibidos pero aún no procesados. Sun Java Message Service [5], IBM WebSphere MQ [6], Microsoft MSMQ [12] son ejemplos de middleware orientado a mensajes muy exitosos para sistemas distribuidos tradicionales. El Servicio de Mensajería de Java (JMS) es una colección de interfaces para la comunicación asincrónica entre componentes distribuidos. Proporciona una forma común para que los programas de Java creen, envíen y reciban mensajes. Los usuarios de JMS suelen ser referidos como clientes. La especificación JMS define además a los proveedores como los componentes encargados de implementar el sistema de mensajería y proporcionar la funcionalidad administrativa y de control (es decir, persistencia y confiabilidad) requerida por el sistema. Los clientes pueden enviar y recibir mensajes, de forma asincrónica, a través del proveedor JMS, que se encarga de la entrega y, posiblemente, de la persistencia de los mensajes. Hay dos tipos de comunicación admitidos: modelos punto a punto y de publicación-suscripción. En el modelo punto a punto, los hosts envían mensajes a colas. Los receptores pueden ser registrados con algunas colas específicas, y pueden recuperar los mensajes de forma asíncrona para luego confirmar su recepción. El modelo de publicación-suscripción se basa en el uso de temas a los que los clientes pueden suscribirse. Los mensajes son enviados a los temas por otros clientes y luego son recibidos de forma asíncrona por todos los clientes suscritos. Los clientes aprenden sobre los temas y colas disponibles a través de la Interfaz de Nombres y Directorios de Java (JNDI) [14]. Las colas y los temas son creados por un administrador en el proveedor y se registran con la interfaz JNDI para su búsqueda. En la siguiente sección, presentamos los desafíos de las redes móviles y mostramos cómo JMS puede adaptarse para cumplir con estos requisitos. 3. JMS PARA COMPUTACIÓN MÓVIL Las redes móviles varían mucho en sus características, desde redes nómadas en las que los nodos se desplazan mientras están desconectados, hasta redes ad-hoc en las que los nodos se mueven libremente y no hay infraestructura. Las redes móviles ad-hoc son más comúnmente aplicables en situaciones donde la supervivencia y la capacidad de despliegue instantáneo son clave: especialmente en aplicaciones militares y de ayuda en casos de desastre. Entre estos dos tipos de redes móviles, sin embargo, existen una serie de posibles combinaciones heterogéneas, donde se utilizan paradigmas nómadas y ad-hoc para interconectar áreas totalmente inalámbricas con redes más estructuradas (como una LAN o Internet). Si bien la especificación JMS ha sido ampliamente implementada y utilizada en sistemas distribuidos tradicionales, las adaptaciones para entornos móviles han sido propuestas recientemente. Los desafíos de adaptar JMS a entornos móviles son considerables; sin embargo, dada su amplia aceptación y uso, existen ventajas considerables al permitir la adaptación de aplicaciones existentes a entornos móviles y al permitir la interoperabilidad de aplicaciones en las regiones cableadas e inalámbricas de una red. En [10], JMS se adaptó a un entorno móvil nómada, donde los hosts móviles pueden ser clientes de JMS y comunicarse a través del proveedor de JMS que, sin embargo, se encuentra en una red troncal, proporcionando fiabilidad y persistencia. El prototipo del cliente presentado en [10] es muy ligero, debido a la delegación de toda la funcionalidad pesada al proveedor Middleware para Computación Pervasive y ad-hoc 122 en la red cableada. Sin embargo, este enfoque es algo limitado en términos de aplicabilidad generalizada y escalabilidad como consecuencia de la concentración de funcionalidad en la parte cableada de la red. Si se quiere adaptar JMS a entornos completamente ad hoc, donde no haya infraestructura fija disponible y donde los nodos cambien de ubicación y estado de forma muy dinámica, se deben tener en cuenta más problemas. En primer lugar, el descubrimiento necesita utilizar un modelo resiliente pero distribuido: en este entorno extremadamente dinámico, las soluciones estáticas son inaceptables. Como se discute en la Sección 2, un administrador de JMS define colas y temas en el proveedor. Los clientes pueden entonces aprender sobre ellos utilizando la Interfaz de Nombres y Directorios de Java (JNDI). Sin embargo, debido a la forma en que está diseñado JNDI, es necesario que un nodo de JNDI (o más de uno) esté al alcance para obtener una vinculación de un nombre a una dirección (es decir, saber dónde se encuentra una cola o un tema específico). En entornos móviles ad-hoc, el proceso de descubrimiento no puede asumir la existencia de un conjunto fijo de servidores de descubrimiento que siempre sean accesibles, ya que esto no coincidiría con la dinámica de las redes ad-hoc. En segundo lugar, un Proveedor de JMS, como sugiere la especificación de JMS, también debe ser accesible para cada nodo en la red, para poder comunicarse. Esto asume una arquitectura muy centralizada, que nuevamente no coincide con los requisitos de un entorno ad-hoc móvil, en el que los nodos pueden estar en movimiento y dispersos: se necesita una solución más distribuida y dinámica. La persistencia es, sin embargo, una funcionalidad esencial en entornos de comunicación asincrónica, ya que los hosts están, por definición, conectados en momentos diferentes. En la siguiente sección, discutiremos nuestra experiencia en el diseño e implementación de JMS para redes móviles ad-hoc. 4. El desarrollo de aplicaciones para redes móviles es aún más desafiante: además de las mismas consideraciones que para entornos inalámbricos infraestructurados, como las limitadas capacidades de los dispositivos y las restricciones de energía, existen problemas relacionados con la velocidad de cambio de la conectividad de la red y la falta de una infraestructura de enrutamiento estática. En consecuencia, ahora describimos un intento inicial de adaptar la especificación JMS para satisfacer los requisitos particulares relacionados con escenarios ad-hoc. Como se discute en la Sección 3, una aplicación JMS puede utilizar tanto el estilo de mensajería punto a punto como el de publicación-suscripción. Modelo de punto a punto. El modelo de punto a punto se basa en el concepto de colas, que se utilizan para habilitar la comunicación asincrónica entre el productor de un mensaje y posibles consumidores diferentes. En nuestra solución, la ubicación de las colas se determina mediante un proceso de negociación que depende de la aplicación. Por ejemplo, supongamos que es posible saber a priori, o es posible determinar dinámicamente, que cierto host es el receptor de la mayor parte de los mensajes enviados a una cola particular. En este caso, la ubicación óptima de la cola bien podría estar en este host en particular. En general, vale la pena señalar que, según la especificación de JMS y los patrones de diseño sugeridos, es común y preferible que un cliente tenga todos sus mensajes entregados a una sola cola. Las colas se anuncian periódicamente a los anfitriones que se encuentran dentro del rango de transmisión o que son alcanzables mediante el protocolo de comunicación síncrona subyacente, si se proporciona. Es importante tener en cuenta que, a nivel de middleware, es lógicamente irrelevante si la capa de red implementa alguna forma de enrutamiento ad-hoc (aunque considerablemente más eficiente si lo hace); el middleware solo considera información sobre qué nodos son accesibles activamente en cualquier momento. Los hosts que reciben mensajes publicitarios agregan entradas a su registro JNDI. Cada entrada se caracteriza por un arrendamiento (un mecanismo similar al presente en Jini [15]). Un contrato de arrendamiento representa el tiempo de validez de una entrada particular. Si un arrendamiento no se renueva (es decir, su vida no se extiende), puede vencer y, en consecuencia, la entrada se elimina del registro. En otras palabras, el anfitrión asume que la cola será inaccesible a partir de ese momento. Esto puede ser causado, por ejemplo, si un host que almacena la cola se vuelve inaccesible. Un host que inicia un proceso de descubrimiento encontrará los temas y las colas presentes en su porción conectada de la red de manera directa. Para enviar un mensaje a un anfitrión que actualmente no está al alcance, utilizamos un protocolo de enrutamiento de epidemia asíncrono que se discutirá en detalle en la Sección 4.2. Si dos hosts están en la misma nube (es decir, existe un camino conectado entre ellos), pero no hay disponible un protocolo síncrono, los mensajes se envían utilizando el protocolo epidémico. En este caso, la latencia de entrega será baja como resultado de la rapidez de propagación de la infección en la nube conectada (ver también los resultados de la simulación en la Sección 5). Dado la existencia de un protocolo de epidemia, el mecanismo de descubrimiento consiste en publicitar las colas a los hosts que actualmente son inalcanzables utilizando mecanismos análogos. En el modelo de publicación-suscripción, algunos de los hosts son designados de manera similar para mantener temas y almacenar suscripciones, como antes. Los temas se anuncian a través del registro de la misma manera que las colas, y un cliente que desee suscribirse a un tema debe registrarse con el cliente que tiene el tema. Cuando un cliente desea enviar un mensaje a la lista de temas, lo envía al titular del tema (de la misma manera que enviaría un mensaje a una cola). El titular del tema luego reenvía el mensaje a todos los suscriptores, utilizando el protocolo síncrono si es posible, de lo contrario el protocolo epidémico. Vale la pena señalar que utilizamos un único mensaje con múltiples destinatarios, en lugar de múltiples mensajes con múltiples destinatarios. Cuando un mensaje es entregado a uno de los suscriptores, este destinatario es eliminado de la lista. Para eliminar las posibles réplicas restantes, empleamos mensajes de acuse de recibo (discutidos en la Sección 4.4), devueltos de la misma manera que un mensaje normal. También hemos adaptado los conceptos de suscripciones duraderas y no duraderas para entornos ad-hoc. En las plataformas fijas, las suscripciones duraderas se mantienen durante las desconexiones de los clientes, ya sean intencionales o resultado de fallas. En los sistemas tradicionales, cuando un suscriptor duradero se desconecta del servidor, es responsable de almacenar los mensajes. Cuando el suscriptor duradero se reconecta, el servidor le envía todos los mensajes no caducados. El problema es que, en nuestro escenario, las desconexiones son la norma. En teoría, no es posible enviar un mensaje a un par que nunca ha sido alcanzable en el pasado, ya que no puede haber ninguna entrada presente en el registro. Sin embargo, para superar esta posible limitación, proporcionamos un mecanismo a través del cual la información puede ser añadida al registro sin utilizar los canales normales. 123 Middleware 2004 Companion en lugar de la excepción. En otras palabras, no podemos considerar las desconexiones como fallos. Por estas razones, adoptamos una semántica ligeramente diferente. En lo que respecta a las suscripciones duraderas, si un suscriptor se desconecta, las notificaciones no se almacenan, sino que se envían utilizando el protocolo epidémico en lugar del protocolo síncrono. En otras palabras, las notificaciones duraderas siguen siendo válidas durante las posibles desconexiones del suscriptor. Por otro lado, si un suscriptor no duradero se desconecta, su suscripción se elimina; en otras palabras, durante las desconexiones, las notificaciones no se envían utilizando el protocolo epidémico, sino que solo se aprovecha el protocolo síncrono. Si el tema vuelve a estar accesible para este anfitrión, deberá realizar otra suscripción para recibir las notificaciones. Los mensajes de baja se entregan de la misma manera que los mensajes de suscripción. Es importante tener en cuenta que los suscriptores duraderos deben darse de baja explícitamente de un tema para detener el proceso de notificación; sin embargo, todas las suscripciones duraderas tienen un tiempo de expiración predefinido para hacer frente a los casos de suscriptores que no vuelven a conectarse debido a sus movimientos o fallos. Esta característica se proporciona claramente para limitar el número de mensajes innecesarios enviados por la red. 4.2 Entrega de mensajes utilizando enrutamiento epidémico En esta sección, examinamos un mecanismo posible que permitirá la entrega de mensajes en una red parcialmente conectada. El mecanismo que discutimos está destinado a demostrar viabilidad; los mecanismos de comunicación más eficientes para este entorno son complejos por sí mismos y son el tema de otro artículo [13]. La entrega de mensajes asincrónica descrita anteriormente se basa en un protocolo de enrutamiento de estilo epidémico puro típico [16]. Un mensaje que necesita ser enviado se replica en cada host al alcance. De esta manera, las copias de los mensajes se propagan rápidamente a través de redes conectadas, como una infección. Si un anfitrión se conecta a otra nube de nodos móviles durante su movimiento, el mensaje se propaga a través de esta colección de anfitriones. La replicación de datos y mensajes en estilo epidémico ha sido explotada en el pasado en muchos campos, comenzando por el área de sistemas de bases de datos distribuidas [2]. Dentro del enrutamiento epidémico, cada anfitrión mantiene un búfer que contiene los mensajes que ha creado y las réplicas de los mensajes generados por los otros anfitriones. Para mejorar el rendimiento, una tabla hash indexa el contenido del búfer. Cuando dos anfitriones se conectan, el anfitrión con el identificador más pequeño inicia una sesión de anti-entropía, enviando una lista que contiene los identificadores únicos de los mensajes que actualmente almacena. El otro anfitrión evalúa esta lista y envía de vuelta una lista que contiene los identificadores que está almacenando y que no están presentes en el otro anfitrión, junto con los mensajes que el otro no tiene. El anfitrión que ha iniciado la sesión recibe la lista y, de la misma manera, envía los mensajes que no están presentes en el otro anfitrión. En caso de producirse un desbordamiento de búfer, los mensajes se descartan. La fiabilidad ofrecida por este protocolo es generalmente de mejor esfuerzo, ya que no hay garantía de que un mensaje finalmente sea entregado a su destinatario. Claramente, la proporción de entrega del protocolo aumenta proporcionalmente al tiempo máximo de retraso permitido y al tamaño del búfer en cada host (pueden encontrarse resultados interesantes de simulación en [16]). 4.3 Adaptación del Modelo de Mensajes JMS En esta sección, analizaremos los aspectos de nuestra adaptación de la especificación relacionados con el llamado Modelo de Mensajes JMS [5]. Según esto, los mensajes JMS se caracterizan por algunas propiedades definidas utilizando el campo de encabezado, que contiene valores que son utilizados tanto por los clientes como por los proveedores para su entrega. Los aspectos discutidos en el resto de esta sección son válidos para ambos modelos (punto a punto y publicar-suscribir). Un mensaje JMS puede ser persistente o no persistente. Según la especificación de JMS, los mensajes persistentes deben entregarse con un grado de confiabilidad mayor que los no persistentes. Sin embargo, vale la pena señalar que no es posible garantizar la fiabilidad de una sola vez para mensajes persistentes según lo definido en la especificación, ya que, como discutimos en la subsección anterior, el protocolo epidémico subyacente solo puede garantizar la entrega de mejor esfuerzo. Sin embargo, los clientes mantienen una lista de los identificadores de los mensajes recibidos recientemente para evitar la entrega de mensajes duplicados. En otras palabras, proporcionamos a las aplicaciones una fiabilidad inmediata para ambos tipos de mensajes. Para implementar diferentes niveles de confiabilidad, EMMA trata de manera diferente los mensajes persistentes y no persistentes durante la ejecución del protocolo epidémico de anti-entropía. Dado que el espacio del búfer de mensajes es limitado, los mensajes persistentes se replican preferentemente utilizando el espacio libre disponible. Si esto es insuficiente y hay mensajes no persistentes presentes en el búfer, estos son reemplazados. Solo se notifican a los remitentes las entregas exitosas de los mensajes persistentes. Según la especificación de JMS, es posible asignar una prioridad a cada mensaje. Los mensajes con prioridades más altas se entregan de manera preferencial. Como se discutió anteriormente, los mensajes persistentes tienen prioridad sobre los no persistentes. La selección adicional se basa en sus prioridades. Los mensajes con prioridades más altas son tratados de manera preferencial. De hecho, si no hay suficiente espacio para replicar todos los mensajes persistentes, se utiliza un mecanismo basado en prioridades para eliminar y replicar los mensajes no persistentes (y, si es necesario, los mensajes persistentes). Los mensajes se eliminan de los buffers utilizando el valor de tiempo de expiración que puede ser establecido por los remitentes. Esta es una forma de liberar espacio en los búferes (se eliminan preferentemente los mensajes más antiguos en casos de conflicto); para eliminar réplicas obsoletas en el sistema; y para limitar el tiempo durante el cual los destinos deben mantener los identificadores de mensajes para desechar duplicados. Mecanismos de fiabilidad y de acuse de recibo Como ya se discutió, la entrega de mensajes como máximo una vez es lo mejor que se puede lograr en términos de semántica de entrega en entornos ad-hoc parcialmente conectados. Sin embargo, es posible mejorar la confiabilidad del sistema con mecanismos de acuse de recibo eficientes. EMMA proporciona un mecanismo de notificación de fallos a las aplicaciones si no se recibe el acuse de recibo dentro de un tiempo límite dado (que puede ser configurado por los desarrolladores de aplicaciones). Este mecanismo es el que distingue la entrega de mensajes persistentes y no persistentes en nuestra implementación de JMS: las entregas de los primeros son notificadas a los remitentes, mientras que los de los segundos no lo son. Utilizamos mensajes de acuse de recibo no solo para informar a los remitentes sobre la entrega exitosa de los mensajes, sino también para eliminar las réplicas de los mensajes entregados que aún están presentes en la red. Cada anfitrión mantiene una lista de los mensajes Middleware para la Computación Pervasiva y Ad-hoc 124 entregados con éxito que se actualiza como parte del proceso normal de intercambio de información entre los anfitriones. Las listas se intercambian durante los primeros pasos del protocolo de epidemia anti-entropía con una frecuencia predefinida. En el caso de mensajes con múltiples destinatarios, también se almacena una lista de los destinatarios reales. Cuando un anfitrión recibe la lista, verifica su búfer de mensajes y lo actualiza de acuerdo con las siguientes reglas: (1) si un mensaje tiene un único destinatario y ha sido entregado, se elimina del búfer; (2) si un mensaje tiene múltiples destinatarios, se eliminan los identificadores de los anfitriones a los que se ha entregado de la lista de destinatarios asociada. Si la longitud resultante de la lista de destinatarios es cero, el mensaje se elimina del búfer. Estas listas tienen, claramente, dimensiones finitas y se implementan como colas circulares. Este mecanismo simple, junto con el uso de marcas de tiempo de expiración, garantiza que las antiguas notificaciones de acuse de recibo sean eliminadas del sistema después de un período de tiempo limitado. Para mejorar la confiabilidad de EMMA, se podría desarrollar un mecanismo de diseño para la replicación inteligente de colas y temas basado en la información de contexto. Sin embargo, esto aún no forma parte de la arquitectura actual de EMMA. 5. IMPLEMENTACIÓN Y EVALUACIÓN PRELIMINAR Implementamos un prototipo de nuestra plataforma utilizando el Perfil Personal J2ME. El tamaño del ejecutable es de aproximadamente 250KB, incluido el archivo jar de JMS 1.1; esta es una cifra perfectamente aceptable dada la memoria disponible de los dispositivos móviles actuales en el mercado. Probamos nuestro prototipo en PDAs HP iPaq con Linux, interconectados con WaveLan, y en varios laptops con la misma interfaz de red. También evaluamos la plataforma de middleware utilizando el simulador de eventos discretos OMNET++ [17] para explorar una variedad de escenarios móviles que incorporaban un número más realista de hosts que el que se podía lograr experimentalmente. Más específicamente, evaluamos el rendimiento del sistema en términos de ratio de entrega y retraso promedio, variando la densidad de población y el tamaño del búfer, y utilizando mensajes persistentes y no persistentes con diferentes prioridades. Los resultados de la simulación muestran que el rendimiento de EMMAs, en términos de ratio de entrega y retraso de mensajes persistentes con prioridades más altas, es bueno. En general, es evidente que la proporción de entrega está fuertemente relacionada con el dimensionamiento correcto de los búferes para el retraso máximo aceptable. Además, los algoritmos epidémicos son capaces de garantizar una alta tasa de entrega si se evalúa el rendimiento durante un intervalo de tiempo suficiente para la difusión de las réplicas de los mensajes (es decir, la propagación de la infección) en una gran parte de la red ad-hoc. Una consecuencia del problema de dimensionamiento es que la escalabilidad puede verse seriamente afectada en middleware peer-to-peer para computación móvil debido a la escasez de recursos de los dispositivos (memoria limitada para almacenar temporalmente mensajes) y al número de posibles interconexiones en entornos ad-hoc. Lo peor es que las formas comunes de organización comercial y social (seis grados de separación) significan que incluso valores modestos de TTL en los mensajes provocarán una difusión generalizada de mensajes epidémicos. Este problema surge debido a la falta de inteligencia en el protocolo de la epidemia, y puede ser abordado seleccionando nodos portadores para los mensajes con mayor cuidado. Sin embargo, los detalles de este proceso están fuera del alcance de este documento (pero pueden encontrarse en [13]) y no afectan la base en la que se basa el middleware EMMA: la capacidad de entregar mensajes de forma asincrónica. 6. VISIÓN CRÍTICA DEL ESTADO DEL ARTE El diseño de plataformas de middleware para la computación móvil requiere que los investigadores respondan a preguntas nuevas y fundamentalmente diferentes; simplemente asumir la presencia de porciones cableadas de la red en las que pueda residir la funcionalidad centralizada no es generalizable. Por lo tanto, es necesario investigar nuevos principios de diseño y idear patrones arquitectónicos que difieran de los tradicionalmente utilizados en el diseño de middleware para sistemas fijos. Como ejemplo, considera la reciente tendencia de superposición de capas en redes ad-hoc [1]. Esta es una forma de replantear el diseño de sistemas de software, abandonando explícitamente las formas clásicas de estratificación, ya que, aunque esta separación de preocupaciones permite la portabilidad, lo hace a expensas de posibles ganancias de eficiencia. Creemos que es posible ver nuestro enfoque como una instancia de superposición de capas. De hecho, hemos añadido el protocolo de red epidémica a nivel de middleware y, al mismo tiempo, hemos utilizado el protocolo de red síncrono existente si está presente tanto en la entrega de mensajes (capas tradicionales) como en informar al middleware sobre cuándo pueden entregarse los mensajes revelando detalles de las tablas de reenvío (violación de capas). Por esta razón, preferimos considerarlos conjuntamente como la capa de comunicación de nuestra plataforma, proporcionando juntos una entrega de mensajes más eficiente. Otro aspecto interesante es la explotación del contexto y la información del sistema para mejorar el rendimiento de las plataformas de middleware móvil. Una vez más, como resultado de adoptar una metodología de capas cruzadas, podemos construir sistemas que recopilan información del sistema operativo subyacente y los componentes de comunicación para permitir la adaptación del comportamiento. Podemos resumir este enfoque de diseño conceptual diciendo que las plataformas de middleware deben ser no solo conscientes del contexto (es decir, deben ser capaces de extraer y analizar información del contexto circundante) sino también conscientes del sistema (es decir, deben ser capaces de recopilar información de los componentes de software y hardware del sistema móvil). Se han desarrollado varios sistemas de middleware para admitir redes ad hoc con el uso de comunicación asíncrona (como LIME, XMIDDLE, STEAM [11]). En particular, la plataforma STEAM es un ejemplo interesante de middleware basado en eventos para redes ad hoc, que proporciona entrega de mensajes con conciencia de ubicación y una solución efectiva para el filtrado de eventos. Una discusión sobre JMS, y su realización móvil, ya ha sido realizada en las Secciones 4 y 2. La empresa suiza Softwired ha desarrollado el primer middleware JMS para computación móvil, llamado iBus Mobile [10]. Los componentes principales de esta arquitectura típicamente basada en infraestructura son el proveedor de JMS, la llamada puerta de enlace móvil de JMS, que se despliega en un host fijo y una biblioteca de cliente JMS ligera. El gateway se utiliza para la comunicación entre el servidor de aplicaciones y los dispositivos móviles. El proveedor JMS ve la pasarela como un cliente JMS normal. El proveedor JMS puede ser cualquier servidor de aplicaciones habilitado para JMS, como BEA Weblogic. Pronto [19] es un ejemplo de un sistema de middleware basado en mensajería, diseñado específicamente para entornos móviles. La plataforma está compuesta por tres clases de componentes: clientes móviles que implementan la especificación JMS, pasarelas que controlan el tráfico, garantizando eficiencia y posibles personalizaciones de usuario utilizando diferentes complementos y servidores JMS. Diferentes configuraciones de estos componentes son posibles; con respecto a las aplicaciones de redes móviles ad hoc, la más interesante es Serverless JMS. El objetivo de esta configuración es adaptar JMS a un modelo descentralizado. El modelo de publicación-suscripción explota la eficiencia y la escalabilidad del protocolo de multidifusión IP subyacente. Se proporcionan servicios de entrega de mensajes poco confiables y confiables: la confiabilidad se logra a través de un protocolo basado en acuse de recibo negativo. Pronto representa una buena solución para redes móviles basadas en infraestructura, pero no se dirige adecuadamente a entornos ad-hoc, ya que los nodos móviles dependen de servidores fijos para el intercambio de mensajes. Existen otras MOM implementadas para entornos móviles; sin embargo, suelen ser extensiones sencillas de middleware existente [8]. La única implementación de MOM específicamente diseñada para redes móviles ad-hoc fue desarrollada en la Universidad de Newcastle [18]. Este trabajo es nuevamente una adaptación de JMS; el enfoque de esa implementación se centra en la comunicación de grupo y el uso de algoritmos de enrutamiento a nivel de aplicación para la entrega de mensajes por tema. Sin embargo, hay una serie de diferencias en el enfoque de nuestro trabajo. La importancia que atribuimos a las desconexiones hace que la persistencia sea un requisito vital para cualquier middleware que necesite ser utilizado en redes móviles ad-hoc. Los autores de [18] señalan la persistencia como un posible trabajo futuro, sin considerar el hecho de que enrutar un mensaje a un host no conectado resultará en un fallo de entrega. Esta es una limitación notable en entornos móviles donde las desconexiones impredecibles son la norma en lugar de la excepción. 7. MAPA Y CONCLUSIONES La comunicación asincrónica es un paradigma de comunicación útil para las redes móviles ad-hoc, ya que permite a los hosts llegar, irse y recoger mensajes cuando sea conveniente, teniendo en cuenta también la disponibilidad de sus recursos (por ejemplo, energía, niveles de conectividad). En este artículo hemos descrito el estado del arte en términos de MOM para sistemas móviles. También hemos demostrado una adaptación de prueba de concepto de JMS al escenario extremo de redes móviles ad-hoc parcialmente conectadas. Hemos descrito y discutido las características y diferencias de nuestra solución con respecto a las implementaciones tradicionales de JMS y las adaptaciones existentes para entornos móviles. Sin embargo, también se deben investigar los compromisos entre el enrutamiento a nivel de aplicación y el uso de recursos, ya que los dispositivos móviles suelen tener escasez de energía/recursos. Una limitación clave de este trabajo es el algoritmo epidémico que tiene un rendimiento deficiente y un avance importante en la practicabilidad de este trabajo requiere un algoritmo que equilibre mejor las necesidades de eficiencia y probabilidad de entrega de mensajes. Actualmente estamos trabajando en algoritmos y protocolos que, aprovechando técnicas probabilísticas y estadísticas sobre la base de pequeñas cantidades de información intercambiada, son capaces de mejorar considerablemente la eficiencia en términos de recursos (memoria, ancho de banda, etc.) y la confiabilidad de nuestra plataforma de middleware [13]. Un desarrollo de investigación futurista, que podría llevar estas ideas de adaptación de middleware de mensajería para entornos móviles más allá, es la introducción de extensiones de comunicación más orientadas a la movilidad, como el soporte de geocast (es decir, la capacidad de enviar mensajes a áreas geográficas específicas). REFERENCIAS [1] M. Conti, G. Maselli, G. Turi y S. Giordano. Diseño de redes móviles ad-hoc con interconexión de capas. IEEE Computer, 37(2):48-51, febrero de 2004. [2] A. Demers, D. Greene, C. Hauser, W. Irish, J. Larson, S. Shenker, H. Sturgis, D. Swinehart y D. Terry. Algoritmos de epidemia para el mantenimiento de bases de datos replicadas. En el Sexto Simposio sobre Principios de Computación Distribuida, páginas 1-12, agosto de 1987. [3] A. Doria, M. Uden y D. P. Pandey. Proporcionando conectividad a la comunidad nómada Saami. En Actas de la Segunda Conferencia Internacional sobre Diseño Colaborativo Abierto para la Innovación Sostenible, diciembre de 2002. [4] M. Haahr, R. Cunningham y V. Cahill. Aplicaciones CORBA en un entorno móvil. En la 5ª Conferencia Internacional sobre Computación y Redes Móviles (MOBICOM99), páginas 36-47. ACM, agosto de 1999. [5] M. Hapner, R. Burridge, R. Sharma, J. Fialli y K. Stout. Especificación del Servicio de Mensajes Java Versión 1.1. Sun Microsystems, Inc., abril de 2002. http://java.sun.com/products/jms/. [6] J. Hart. WebSphere MQ: Conectando sus aplicaciones sin programación compleja. IBM WebSphere Software White Papers, 2003. [7] S. Hayward y M. Pezzini. Casando Middleware y Computación Móvil. Informe de investigación del Grupo Gartner, septiembre de 2001. [8] IBM. WebSphere MQ EveryPlace Versión 2.0, noviembre de 2002. http://www-3.ibm.com/software/integration/wmqe/. [9] UIT. Conectando comunidades remotas. Documentos de la Cumbre Mundial sobre la Sociedad de la Información, 2003. http://www.itu.int/osg/spu/wsis-themes. [10] S. Maffeis. Presentando JMS inalámbrico. Softwired AG, www.sofwired-inc.com, 2002. [11] C. Mascolo, L. Capra y W. Emmerich. Middleware para Computación Móvil. En E. Gregori, G. Anastasi y S. Basagni, editores, Conferencias Avanzadas sobre Redes, volumen 2497 de las Notas de Conferencias en Ciencias de la Computación, páginas 20-58. Springer Verlag, 2002. [12] Microsoft. \n\nSpringer Verlag, 2002. [12] Microsoft. Documentación de Microsoft Message Queuing (MSMQ) Versión 2.0. [13] M. Musolesi, S. Hailes y C. Mascolo. Enrutamiento adaptativo para redes ad-hoc móviles intermitentemente conectadas. Informe técnico, Nota de Investigación UCL-CS, julio de 2004. Enviado para su publicación. [14] Sun Microsystems. Documentación de Java Naming and Directory Interface (JNDI) Versión 1.2. 2003. http://java.sun.com/products/jndi/. [15] Sun Microsystems. Especificación de Jini Versión 2.0, 2003. http://java.sun.com/products/jini/. [16] A. Vahdat y D. Becker. Enrutamiento epidémico para redes ad-hoc parcialmente conectadas. Informe técnico CS-2000-06, Departamento de Ciencias de la Computación, Universidad de Duke, 2000. [17] A. Vargas. El sistema de simulación de eventos discretos OMNeT++. En Actas de la Multiconferencia Europea de Simulación (ESM2001), Praga, junio de 2001. [18] E. Vollset, D. Ingham y P. Ezhilchelvan. JMS en redes móviles ad-hoc. En Comunicaciones Inalámbricas Personales (PWC), páginas 40-52, Venecia, septiembre de 2003. [19] E. Yoneki y J. Bacon. Pronto: Mobilegateway con paradigma de publicación-suscripción sobre red inalámbrica. Informe Técnico 559, Universidad de Cambridge, Laboratorio de Computación, febrero de 2003. Middleware para Computación Pervasive y ad-hoc 126 ",
            "candidates": [],
            "error": [
                [
                    ""
                ]
            ]
        },
        "message-oriented middleware": {
            "translated_key": "middleware orientada a mensajes",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Adapting Asynchronous Messaging Middleware to ad-hoc Networking Mirco Musolesi Dept.",
                "of Computer Science, University College London Gower Street, London WC1E 6BT, United Kingdom m.musolesi@cs.ucl.ac.uk Cecilia Mascolo Dept. of Computer Science, University College London Gower Street, London WC1E 6BT, United Kingdom c.mascolo@cs.ucl.ac.uk Stephen Hailes Dept. of Computer Science, University College London Gower Street, London WC1E 6BT, United Kingdom s.hailes@cs.ucl.ac.uk ABSTRACT The characteristics of mobile environments, with the possibility of frequent disconnections and fluctuating bandwidth, have forced a rethink of traditional middleware.",
                "In particular, the synchronous communication paradigms often employed in standard middleware do not appear to be particularly suited to ad-hoc environments, in which not even the intermittent availability of a backbone network can be assumed.",
                "Instead, asynchronous communication seems to be a generally more suitable paradigm for such environments.",
                "Message oriented middleware for traditional systems has been developed and used to provide an asynchronous paradigm of communication for distributed systems, and, recently, also for some specific mobile computing systems.",
                "In this paper, we present our experience in designing, implementing and evaluating EMMA (Epidemic Messaging Middleware for ad-hoc networks), an adaptation of Java Message Service (JMS) for mobile ad-hoc environments.",
                "We discuss in detail the design challenges and some possible solutions, showing a concrete example of the feasibility and suitability of the application of the asynchronous paradigm in this setting and outlining a research roadmap for the coming years.",
                "Categories and Subject Descriptors C.2.4 [Computer-Communication Networks]: Distributed Systems-Distributed Applications; C.2.1 [Network Architecture and Design]: Wireless Communication General Terms DESIGN, ALGORITHMS 1.",
                "INTRODUCTION With the increasing popularity of mobile devices and their widespread adoption, there is a clear need to allow the development of a broad spectrum of applications that operate effectively over such an environment.",
                "Unfortunately, this is far from simple: mobile devices are increasingly heterogeneous in terms of processing capabilities, memory size, battery capacity, and network interfaces.",
                "Each such configuration has substantially different characteristics that are both statically different - for example, there is a major difference in capability between a Berkeley mote and an 802.11g-equipped laptop - and that vary dynamically, as in situations of fluctuating bandwidth and intermittent connectivity.",
                "Mobile ad hoc environments have an additional element of complexity in that they are entirely decentralised.",
                "In order to craft applications for such complex environments, an appropriate form of middleware is essential if cost effective development is to be achieved.",
                "In this paper, we examine one of the foundational aspects of middleware for mobile ad-hoc environments: that of the communication primitives.",
                "Traditionally, the most frequently used middleware primitives for communication assume the simultaneous presence of both end points on a network, since the stability and pervasiveness of the networking infrastructure is not an unreasonable assumption for most wired environments.",
                "In other words, most communication paradigms are synchronous: object oriented middleware such as CORBA and Java RMI are typical examples of middleware based on synchronous communication.",
                "In recent years, there has been growing interest in platforms based on asynchronous communication paradigms, such as publish-subscribe systems [6]: these have been exploited very successfully where there is application level asynchronicity.",
                "From a Gartner Market Report [7]: Given messageoriented-middlewares (MOM) popularity, scalability, flexibility, and affinity with mobile and wireless architectures, by 2004, MOM will emerge as the dominant form of communication middleware for linking mobile and enterprise applications (0.7 probability)....",
                "Moreover, in mobile ad-hoc systems, the likelihood of network fragmentation means that synchronous communication may in any case be impracticable, giving situations in which delay tolerant asynchronous traffic is the only form of traffic that could be supported. 121 Middleware 2004 Companion Middleware for mobile ad-hoc environments must therefore support semi-synchronous or completely asynchronous communication primitives if it is to avoid substantial limitations to its utility.",
                "Aside from the intellectual challenge in supporting this model, this work is also interesting because there are a number of practical application domains in allowing inter-community communication in undeveloped areas of the globe.",
                "Thus, for example, projects that have been carried out to help populations that live in remote places of the globe such as Lapland [3] or in poor areas that lack fixed connectivity infrastructure [9].",
                "There have been attempts to provide mobile middleware with these properties, including STEAM, LIME, XMIDDLE, Bayou (see [11] for a more complete review of mobile middleware).",
                "These models differ quite considerably from the existing traditional middleware in terms of primitives provided.",
                "Furthermore, some of them fail in providing a solution for the true ad-hoc scenarios.",
                "If the projected success of MOM becomes anything like a reality, there will be many programmers with experience of it.",
                "The ideal solution to the problem of middleware for ad-hoc systems is, then, to allow programmers to utilise the same paradigms and models presented by common forms of MOM and to ensure that these paradigms are supportable within the mobile environment.",
                "This approach has clear advantages in allowing applications developed on standard middleware platforms to be easily deployed on mobile devices.",
                "Indeed, some research has already led to the adaptation of traditional middleware platforms to mobile settings, mainly to provide integration between mobile devices and existing fixed networks in a nomadic (i.e., mixed) environment [4].",
                "With respect to message oriented middleware, the current implementations, however, either assume the existence of a backbone network to which the mobile hosts connect from time to time while roaming [10], or assume that nodes are always somehow reachable through a path [18].",
                "No adaptation to heterogeneous or completely ad-hoc scenarios, with frequent disconnection and periodically isolated clouds of hosts, has been attempted.",
                "In the remainder of this paper we describe an initial attempt to adapt message oriented middleware to suit mobile and, more specifically, mobile ad-hoc networks.",
                "In our case, we elected to examine JMS, as one of the most widely known MOM systems.",
                "In the latter part of this paper, we explore the limitations of our results and describe the plans we have to take the work further. 2.",
                "MESSAGE ORIENTED MIDDLEWARE AND JAVA MESSAGE SERVICE (JMS) <br>message-oriented middleware</br> systems support communication between distributed components via message-passing: the sender sends a message to identified queues, which usually reside on a server.",
                "A receiver retrieves the message from the queue at a different time and may acknowledge the reply using the same asynchronous mechanism.",
                "<br>message-oriented middleware</br> thus supports asynchronous communication in a very natural way, achieving de-coupling of senders and receivers.",
                "A sender is able to continue processing as soon as the middleware has accepted the message; eventually, the receiver will send an acknowledgment message and the sender will be able to collect it at a convenient time.",
                "However, given the way they are implemented, these middleware systems usually require resource-rich devices, especially in terms of memory and disk space, where persistent queues of messages that have been received but not yet processed, are stored.",
                "Sun Java Message Service [5], IBM WebSphere MQ [6], Microsoft MSMQ [12] are examples of very successful <br>message-oriented middleware</br> for traditional distributed systems.",
                "The Java Messaging Service (JMS) is a collection of interfaces for asynchronous communication between distributed components.",
                "It provides a common way for Java programs to create, send and receive messages.",
                "JMS users are usually referred to as clients.",
                "The JMS specification further defines providers as the components in charge of implementing the messaging system and providing the administrative and control functionality (i.e., persistence and reliability) required by the system.",
                "Clients can send and receive messages, asynchronously, through the JMS provider, which is in charge of the delivery and, possibly, of the persistence of the messages.",
                "There are two types of communication supported: point to point and publish-subscribe models.",
                "In the point to point model, hosts send messages to queues.",
                "Receivers can be registered with some specific queues, and can asynchronously retrieve the messages and then acknowledge them.",
                "The publish-subscribe model is based on the use of topics that can be subscribed to by clients.",
                "Messages are sent to topics by other clients and are then received in an asynchronous mode by all the subscribed clients.",
                "Clients learn about the available topics and queues through Java Naming and Directory Interface (JNDI) [14].",
                "Queues and topics are created by an administrator on the provider and are registered with the JNDI interface for look-up.",
                "In the next section, we introduce the challenges of mobile networks, and show how JMS can be adapted to cope with these requirements. 3.",
                "JMS FOR MOBILE COMPUTING Mobile networks vary very widely in their characteristics, from nomadic networks in which modes relocate whilst offline through to ad-hoc networks in which modes move freely and in which there is no infrastructure.",
                "Mobile ad-hoc networks are most generally applicable in situations where survivability and instant deployability are key: most notably in military applications and disaster relief.",
                "In between these two types of mobile networks, there are, however, a number of possible heterogeneous combinations, where nomadic and ad-hoc paradigms are used to interconnect totally unwired areas to more structured networks (such as a LAN or the Internet).",
                "Whilst the JMS specification has been extensively implemented and used in traditional distributed systems, adaptations for mobile environments have been proposed only recently.",
                "The challenges of porting JMS to mobile settings are considerable; however, in view of its widespread acceptance and use, there are considerable advantages in allowing the adaptation of existing applications to mobile environments and in allowing the interoperation of applications in the wired and wireless regions of a network.",
                "In [10], JMS was adapted to a nomadic mobile setting, where mobile hosts can be JMS clients and communicate through the JMS provider that, however, sits on a backbone network, providing reliability and persistence.",
                "The client prototype presented in [10] is very lightweight, due to the delegation of all the heavyweight functionality to the Middleware for Pervasive and ad-hoc Computing 122 provider on the wired network.",
                "However, this approach is somewhat limited in terms of widespread applicability and scalability as a consequence of the concentration of functionality in the wired portion of the network.",
                "If JMS is to be adapted to completely ad-hoc environments, where no fixed infrastructure is available, and where nodes change location and status very dynamically, more issues must be taken into consideration.",
                "Firstly, discovery needs to use a resilient but distributed model: in this extremely dynamic environment, static solutions are unacceptable.",
                "As discussed in Section 2, a JMS administrator defines queues and topics on the provider.",
                "Clients can then learn about them using the Java Naming and Directory Interface (JNDI).",
                "However, due to the way JNDI is designed, a JNDI node (or more than one) needs to be in reach in order to obtain a binding of a name to an address (i.e., knowing where a specific queue/topic is).",
                "In mobile ad-hoc environments, the discovery process cannot assume the existence of a fixed set of discovery servers that are always reachable, as this would not match the dynamicity of ad-hoc networks.",
                "Secondly, a JMS Provider, as suggested by the JMS specification, also needs to be reachable by each node in the network, in order to communicate.",
                "This assumes a very centralised architecture, which again does not match the requirements of a mobile ad-hoc setting, in which nodes may be moving and sparse: a more distributed and dynamic solution is needed.",
                "Persistence is, however, essential functionality in asynchronous communication environments as hosts are, by definition, connected at different times.",
                "In the following section, we will discuss our experience in designing and implementing JMS for mobile ad-hoc networks. 4.",
                "JMSFOR MOBILE ad-hoc NETWORKS 4.1 Adaptation of JMS for Mobile ad-hoc Networks Developing applications for mobile networks is yet more challenging: in addition to the same considerations as for infrastructured wireless environments, such as the limited device capabilities and power constraints, there are issues of rate of change of network connectivity, and the lack of a static routing infrastructure.",
                "Consequently, we now describe an initial attempt to adapt the JMS specification to target the particular requirements related to ad-hoc scenarios.",
                "As discussed in Section 3, a JMS application can use either the point to point and the publish-subscribe styles of messaging.",
                "Point to Point Model The point to point model is based on the concept of queues, that are used to enable asynchronous communication between the producer of a message and possible different consumers.",
                "In our solution, the location of queues is determined by a negotiation process that is application dependent.",
                "For example, let us suppose that it is possible to know a priori, or it is possible to determine dynamically, that a certain host is the receiver of the most part of messages sent to a particular queue.",
                "In this case, the optimum location of the queue may well be on this particular host.",
                "In general, it is worth noting that, according to the JMS specification and suggested design patterns, it is common and preferable for a client to have all of its messages delivered to a single queue.",
                "Queues are advertised periodically to the hosts that are within transmission range or that are reachable by means of the underlying synchronous communication protocol, if provided.",
                "It is important to note that, at the middleware level, it is logically irrelevant whether or not the network layer implements some form of ad-hoc routing (though considerably more efficient if it does); the middleware only considers information about which nodes are actively reachable at any point in time.",
                "The hosts that receive advertisement messages add entries to their JNDI registry.",
                "Each entry is characterized by a lease (a mechanism similar to that present in Jini [15]).",
                "A lease represents the time of validity of a particular entry.",
                "If a lease is not refreshed (i.e, its life is not extended), it can expire and, consequently, the entry is deleted from the registry.",
                "In other words, the host assumes that the queue will be unreachable from that point in time.",
                "This may be caused, for example, if a host storing the queue becomes unreachable.",
                "A host that initiates a discovery process will find the topics and the queues present in its connected portion of the network in a straightforward manner.",
                "In order to deliver a message to a host that is not currently in reach1 , we use an asynchronous epidemic routing protocol that will be discussed in detail in Section 4.2.",
                "If two hosts are in the same cloud (i.e., a connected path exists between them), but no synchronous protocol is available, the messages are sent using the epidemic protocol.",
                "In this case, the delivery latency will be low as a result of the rapidity of propagation of the infection in the connected cloud (see also the simulation results in Section 5).",
                "Given the existence of an epidemic protocol, the discovery mechanism consists of advertising the queues to the hosts that are currently unreachable using analogous mechanisms.",
                "Publish-Subscribe Model In the publish-subscribe model, some of the hosts are similarly designated to hold topics and store subscriptions, as before.",
                "Topics are advertised through the registry in the same way as are queues, and a client wishing to subscribe to a topic must register with the client holding the topic.",
                "When a client wishes to send a message to the topic list, it sends it to the topic holder (in the same way as it would send a message to a queue).",
                "The topic holder then forwards the message to all subscribers, using the synchronous protocol if possible, the epidemic protocol otherwise.",
                "It is worth noting that we use a single message with multiple recipients, instead of multiple messages with multiple recipients.",
                "When a message is delivered to one of the subscribers, this recipient is deleted from the list.",
                "In order to delete the other possible replicas, we employ acknowledgment messages (discussed in Section 4.4), returned in the same way as a normal message.",
                "We have also adapted the concepts of durable and non durable subscriptions for ad-hoc settings.",
                "In fixed platforms, durable subscriptions are maintained during the disconnections of the clients, whether these are intentional or are the result of failures.",
                "In traditional systems, while a durable subscriber is disconnected from the server, it is responsible for storing messages.",
                "When the durable subscriber reconnects, the server sends it all unexpired messages.",
                "The problem is that, in our scenario, disconnections are the norm 1 In theory, it is not possible to send a message to a peer that has never been reachable in the past, since there can be no entry present in the registry.",
                "However, to overcome this possible limitation, we provide a primitive through which information can be added to the registry without using the normal channels. 123 Middleware 2004 Companion rather than the exception.",
                "In other words, we cannot consider disconnections as failures.",
                "For these reasons, we adopt a slightly different semantics.",
                "With respect to durable subscriptions, if a subscriber becomes disconnected, notifications are not stored but are sent using the epidemic protocol rather than the synchronous protocol.",
                "In other words, durable notifications remain valid during the possible disconnections of the subscriber.",
                "On the other hand, if a non-durable subscriber becomes disconnected, its subscription is deleted; in other words, during disconnections, notifications are not sent using the epidemic protocol but exploit only the synchronous protocol.",
                "If the topic becomes accessible to this host again, it must make another subscription in order to receive the notifications.",
                "Unsubscription messages are delivered in the same way as are subscription messages.",
                "It is important to note that durable subscribers have explicitly to unsubscribe from a topic in order to stop the notification process; however, all durable subscriptions have a predefined expiration time in order to cope with the cases of subscribers that do not meet again because of their movements or failures.",
                "This feature is clearly provided to limit the number of the unnecessary messages sent around the network. 4.2 Message Delivery using Epidemic Routing In this section, we examine one possible mechanism that will allow the delivery of messages in a partially connected network.",
                "The mechanism we discuss is intended for the purposes of demonstrating feasibility; more efficient communication mechanisms for this environment are themselves complex, and are the subject of another paper [13].",
                "The asynchronous message delivery described above is based on a typical pure epidemic-style routing protocol [16].",
                "A message that needs to be sent is replicated on each host in reach.",
                "In this way, copies of the messages are quickly spread through connected networks, like an infection.",
                "If a host becomes connected to another cloud of mobile nodes, during its movement, the message spreads through this collection of hosts.",
                "Epidemic-style replication of data and messages has been exploited in the past in many fields starting with the distributed database systems area [2].",
                "Within epidemic routing, each host maintains a buffer containing the messages that it has created and the replicas of the messages generated by the other hosts.",
                "To improve the performance, a hash-table indexes the content of the buffer.",
                "When two hosts connect, the host with the smaller identifier initiates a so-called anti-entropy session, sending a list containing the unique identifiers of the messages that it currently stores.",
                "The other host evaluates this list and sends back a list containing the identifiers it is storing that are not present in the other host, together with the messages that the other does not have.",
                "The host that has started the session receives the list and, in the same way, sends the messages that are not present in the other host.",
                "Should buffer overflow occur, messages are dropped.",
                "The reliability offered by this protocol is typically best effort, since there is no guarantee that a message will eventually be delivered to its recipient.",
                "Clearly, the delivery ratio of the protocol increases proportionally to the maximum allowed delay time and the buffer size in each host (interesting simulation results may be found in [16]). 4.3 Adaptation of the JMS Message Model In this section, we will analyse the aspects of our adaptation of the specification related to the so-called JMS Message Model [5].",
                "According to this, JMS messages are characterised by some properties defined using the header field, which contains values that are used by both clients and providers for their delivery.",
                "The aspects discussed in the remainder of this section are valid for both models (point to point and publish-subscribe).",
                "A JMS message can be persistent or non-persistent.",
                "According to the JMS specification, persistent messages must be delivered with a higher degree of reliability than the nonpersistent ones.",
                "However, it is worth noting that it is not possible to ensure once-and-only-once reliability for persistent messages as defined in the specification, since, as we discussed in the previous subsection, the underlying epidemic protocol can guarantee only best-effort delivery.",
                "However, clients maintain a list of the identifiers of the recently received messages to avoid the delivery of message duplicates.",
                "In other words, we provide the applications with at-mostonce reliability for both types of messages.",
                "In order to implement different levels of reliability, EMMA treats persistent and non-persistent messages differently, during the execution of the anti-entropy epidemic protocol.",
                "Since the message buffer space is limited, persistent messages are preferentially replicated using the available free space.",
                "If this is insufficient and non-persistent messages are present in the buffer, these are replaced.",
                "Only the successful deliveries of the persistent messages are notified to the senders.",
                "According to the JMS specification, it is possible to assign a priority to each message.",
                "The messages with higher priorities are delivered in a preferential way.",
                "As discussed above, persistent messages are prioritised above the non-persistent ones.",
                "Further selection is based on their priorities.",
                "Messages with higher priorities are treated in a preferential way.",
                "In fact, if there is not enough space to replicate all the persistent messages, a mechanism based on priorities is used to delete and replicate non-persistent messages (and, if necessary, persistent messages).",
                "Messages are deleted from the buffers using the expiration time value that can be set by senders.",
                "This is a way to free space in the buffers (one preferentially deletes older messages in cases of conflict); to eliminate stale replicas in the system; and to limit the time for which destinations must hold message identifiers to dispose of duplicates. 4.4 Reliability and Acknowledgment Mechanisms As already discussed, at-most-once message delivery is the best that can be achieved in terms of delivery semantics in partially connected ad-hoc settings.",
                "However, it is possible to improve the reliability of the system with efficient acknowledgment mechanisms.",
                "EMMA provides a mechanism for failure notification to applications if the acknowledgment is not received within a given timeout (that can be configured by application developers).",
                "This mechanism is the one that distinguishes the delivery of persistent and non-persistent messages in our JMS implementation: the deliveries of the former are notified to the senders, whereas the latter are not.",
                "We use acknowledgment messages not only to inform senders about the successful delivery of messages but also to delete the replicas of the delivered messages that are still present in the network.",
                "Each host maintains a list of the messages Middleware for Pervasive and ad-hoc Computing 124 successfully delivered that is updated as part of the normal process of information exchange between the hosts.",
                "The lists are exchanged during the first steps of the anti-entropic epidemic protocol with a certain predefined frequency.",
                "In the case of messages with multiple recipients, a list of the actual recipients is also stored.",
                "When a host receives the list, it checks its message buffer and updates it according to the following rules: (1) if a message has a single recipient and it has been delivered, it is deleted from the buffer; (2) if a message has multiple recipients, the identifiers of the delivered hosts are deleted from the associated list of recipients.",
                "If the resulting length of the list of recipients is zero, the message is deleted from the buffer.",
                "These lists have, clearly, finite dimensions and are implemented as circular queues.",
                "This simple mechanism, together with the use of expiration timestamps, guarantees that the old acknowledgment notifications are deleted from the system after a limited period of time.",
                "In order to improve the reliability of EMMA, a design mechanism for intelligent replication of queues and topics based on the context information could be developed.",
                "However this is not yet part of the current architecture of EMMA. 5.",
                "IMPLEMENTATION AND PRELIMINARY EVALUATION We implemented a prototype of our platform using the J2ME Personal Profile.",
                "The size of the executable is about 250KB including the JMS 1.1 jar file; this is a perfectly acceptable figure given the available memory of the current mobile devices on the market.",
                "We tested our prototype on HP IPaq PDAs running Linux, interconnected with WaveLan, and on a number of laptops with the same network interface.",
                "We also evaluated the middleware platform using the OMNET++ discrete event simulator [17] in order to explore a range of mobile scenarios that incorporated a more realistic number of hosts than was achievable experimentally.",
                "More specifically, we assessed the performance of the system in terms of delivery ratio and average delay, varying the density of population and the buffer size, and using persistent and non-persistent messages with different priorities.",
                "The simulation results show that the EMMAs performance, in terms of delivery ratio and delay of persistent messages with higher priorities, is good.",
                "In general, it is evident that the delivery ratio is strongly related to the correct dimensioning of the buffers to the maximum acceptable delay.",
                "Moreover, the epidemic algorithms are able to guarantee a high delivery ratio if one evaluates performance over a time interval sufficient for the dissemination of the replicas of messages (i.e., the infection spreading) in a large portion of the ad-hoc network.",
                "One consequence of the dimensioning problem is that scalability may be seriously impacted in peer-to-peer middleware for mobile computing due to the resource poverty of the devices (limited memory to store temporarily messages) and the number of possible interconnections in ad-hoc settings.",
                "What is worse is that common forms of commercial and social organisation (six degrees of separation) mean that even modest TTL values on messages will lead to widespread flooding of epidemic messages.",
                "This problem arises because of the lack of intelligence in the epidemic protocol, and can be addressed by selecting carrier nodes for messages with greater care.",
                "The details of this process are, however, outside the scope of this paper (but may be found in [13]) and do not affect the foundation on which the EMMA middleware is based: the ability to deliver messages asynchronously. 6.",
                "CRITICAL VIEW OF THE STATE OF THE ART The design of middleware platforms for mobile computing requires researchers to answer new and fundamentally different questions; simply assuming the presence of wired portions of the network on which centralised functionality can reside is not generalisable.",
                "Thus, it is necessary to investigate novel design principles and to devise architectural patterns that differ from those traditionally exploited in the design of middleware for fixed systems.",
                "As an example, consider the recent cross-layering trend in ad-hoc networking [1].",
                "This is a way of re-thinking software systems design, explicitly abandoning the classical forms of layering, since, although this separation of concerns afford portability, it does so at the expense of potential efficiency gains.",
                "We believe that it is possible to view our approach as an instance of cross-layering.",
                "In fact, we have added the epidemic network protocol at middleware level and, at the same time, we have used the existing synchronous network protocol if present both in delivering messages (traditional layering) and in informing the middleware about when messages may be delivered by revealing details of the forwarding tables (layer violation).",
                "For this reason, we prefer to consider them jointly as the communication layer of our platform together providing more efficient message delivery.",
                "Another interesting aspect is the exploitation of context and system information to improve the performance of mobile middleware platforms.",
                "Again, as a result of adopting a cross-layering methodology, we are able to build systems that gather information from the underlying operating system and communication components in order to allow for adaptation of behaviour.",
                "We can summarise this conceptual design approach by saying that middleware platforms must be not only context-aware (i.e., they should be able to extract and analyse information from the surrounding context) but also system-aware (i.e., they should be able to gather information from the software and hardware components of the mobile system).",
                "A number of middleware systems have been developed to support ad-hoc networking with the use of asynchronous communication (such as LIME, XMIDDLE, STEAM [11]).",
                "In particular, the STEAM platform is an interesting example of event-based middleware for ad-hoc networks, providing location-aware message delivery and an effective solution for event filtering.",
                "A discussion of JMS, and its mobile realisation, has already been conducted in Sections 4 and 2.",
                "The Swiss company Softwired has developed the first JMS middleware for mobile computing, called iBus Mobile [10].",
                "The main components of this typically infrastructure-based architecture are the JMS provider, the so-called mobile JMS gateway, which is deployed on a fixed host and a lightweight JMS client library.",
                "The gateway is used for the communication between the application server and mobile hosts.",
                "The gateway is seen by the JMS provider as a normal JMS client.",
                "The JMS provider can be any JMS-enabled application server, such as BEA Weblogic.",
                "Pronto [19] is an example of mid125 Middleware 2004 Companion dleware system based on messaging that is specifically designed for mobile environments.",
                "The platform is composed of three classes of components: mobile clients implementing the JMS specification, gateways that control traffic, guaranteeing efficiency and possible user customizations using different plug-ins and JMS servers.",
                "Different configurations of these components are possible; with respect to mobile ad hoc networks applications, the most interesting is Serverless JMS.",
                "The aim of this configuration is to adapt JMS to a decentralized model.",
                "The publish-subscribe model exploits the efficiency and the scalability of the underlying IP multicast protocol.",
                "Unreliable and reliable message delivery services are provided: reliability is provided through a negative acknowledgment-based protocol.",
                "Pronto represents a good solution for infrastructure-based mobile networks but it does not adequately target ad-hoc settings, since mobile nodes rely on fixed servers for the exchange of messages.",
                "Other MOM implemented for mobile environments exist; however, they are usually straightforward extensions of existing middleware [8].",
                "The only implementation of MOM specifically designed for mobile ad-hoc networks was developed at the University of Newcastle [18].",
                "This work is again a JMS adaptation; the focus of that implementation is on group communication and the use of application level routing algorithms for topic delivery of messages.",
                "However, there are a number of differences in the focus of our work.",
                "The importance that we attribute to disconnections makes persistence a vital requirement for any middleware that needs to be used in mobile ad-hoc networks.",
                "The authors of [18] signal persistence as possible future work, not considering the fact that routing a message to a non-connected host will result in delivery failure.",
                "This is a remarkable limitation in mobile settings where unpredictable disconnections are the norm rather than the exception. 7.",
                "ROADMAP AND CONCLUSIONS Asynchronous communication is a useful communication paradigm for mobile ad-hoc networks, as hosts are allowed to come, go and pick up messages when convenient, also taking account of their resource availability (e.g., power, connectivity levels).",
                "In this paper we have described the state of the art in terms of MOM for mobile systems.",
                "We have also shown a proof of concept adaptation of JMS to the extreme scenario of partially connected mobile ad-hoc networks.",
                "We have described and discussed the characteristics and differences of our solution with respect to traditional JMS implementations and the existing adaptations for mobile settings.",
                "However, trade-offs between application-level routing and resource usage should also be investigated, as mobile devices are commonly power/resource scarce.",
                "A key limitation of this work is the poorly performing epidemic algorithm and an important advance in the practicability of this work requires an algorithm that better balances the needs of efficiency and message delivery probability.",
                "We are currently working on algorithms and protocols that, exploiting probabilistic and statistical techniques on the basis of small amounts of exchanged information, are able to improve considerably the efficiency in terms of resources (memory, bandwidth, etc) and the reliability of our middleware platform [13].",
                "One futuristic research development, which may take these ideas of adaptation of messaging middleware for mobile environments further is the introduction of more mobility oriented communication extensions, for instance the support of geocast (i.e., the ability to send messages to specific geographical areas). 8.",
                "REFERENCES [1] M. Conti, G. Maselli, G. Turi, and S. Giordano.",
                "Cross-layering in Mobile ad-hoc Network Design.",
                "IEEE Computer, 37(2):48-51, February 2004. [2] A. Demers, D. Greene, C. Hauser, W. Irish, J. Larson, S. Shenker, H. Sturgis, D. Swinehart, and D. Terry.",
                "Epidemic Algorithms for Replicated Database Maintenance.",
                "In Sixth Symposium on Principles of Distributed Computing, pages 1-12, August 1987. [3] A. Doria, M. Uden, and D. P. Pandey.",
                "Providing connectivity to the Saami nomadic community.",
                "In Proceedings of the Second International Conference on Open Collaborative Design for Sustainable Innovation, December 2002. [4] M. Haahr, R. Cunningham, and V. Cahill.",
                "Supporting CORBA applications in a Mobile Environment.",
                "In 5th International Conference on Mobile Computing and Networking (MOBICOM99), pages 36-47.",
                "ACM, August 1999. [5] M. Hapner, R. Burridge, R. Sharma, J. Fialli, and K. Stout.",
                "Java Message Service Specification Version 1.1.",
                "Sun Microsystems, Inc., April 2002. http://java.sun.com/products/jms/. [6] J. Hart.",
                "WebSphere MQ: Connecting your applications without complex programming.",
                "IBM WebSphere Software White Papers, 2003. [7] S. Hayward and M. Pezzini.",
                "Marrying Middleware and Mobile Computing.",
                "Gartner Group Research Report, September 2001. [8] IBM.",
                "WebSphere MQ EveryPlace Version 2.0, November 2002. http://www-3.ibm.com/software/integration/wmqe/. [9] ITU.",
                "Connecting remote communities.",
                "Documents of the World Summit on Information Society, 2003. http://www.itu.int/osg/spu/wsis-themes. [10] S. Maffeis.",
                "Introducing Wireless JMS.",
                "Softwired AG, www.sofwired-inc.com, 2002. [11] C. Mascolo, L. Capra, and W. Emmerich.",
                "Middleware for Mobile Computing.",
                "In E. Gregori, G. Anastasi, and S. Basagni, editors, Advanced Lectures on Networking, volume 2497 of Lecture Notes in Computer Science, pages 20-58.",
                "Springer Verlag, 2002. [12] Microsoft.",
                "Microsoft Message Queuing (MSMQ) Version 2.0 Documentation. [13] M. Musolesi, S. Hailes, and C. Mascolo.",
                "Adaptive routing for intermittently connected mobile ad-hoc networks.",
                "Technical report, UCL-CS Research Note, July 2004.",
                "Submitted for Publication. [14] Sun Microsystems.",
                "Java Naming and Directory Interface (JNDI) Documentation Version 1.2. 2003. http://java.sun.com/products/jndi/. [15] Sun Microsystems.",
                "Jini Specification Version 2.0, 2003. http://java.sun.com/products/jini/. [16] A. Vahdat and D. Becker.",
                "Epidemic routing for Partially Connected ad-hoc Networks.",
                "Technical Report CS-2000-06, Department of Computer Science, Duke University, 2000. [17] A. Vargas.",
                "The OMNeT++ discrete event simulation system.",
                "In Proceedings of the European Simulation Multiconference (ESM2001), Prague, June 2001. [18] E. Vollset, D. Ingham, and P. Ezhilchelvan.",
                "JMS on Mobile ad-hoc Networks.",
                "In Personal Wireless Communications (PWC), pages 40-52, Venice, September 2003. [19] E. Yoneki and J. Bacon.",
                "Pronto: Mobilegateway with publish-subscribe paradigm over wireless network.",
                "Technical Report 559, University of Cambridge, Computer Laboratory, February 2003.",
                "Middleware for Pervasive and ad-hoc Computing 126"
            ],
            "original_annotated_samples": [
                "MESSAGE ORIENTED MIDDLEWARE AND JAVA MESSAGE SERVICE (JMS) <br>message-oriented middleware</br> systems support communication between distributed components via message-passing: the sender sends a message to identified queues, which usually reside on a server.",
                "<br>message-oriented middleware</br> thus supports asynchronous communication in a very natural way, achieving de-coupling of senders and receivers.",
                "Sun Java Message Service [5], IBM WebSphere MQ [6], Microsoft MSMQ [12] are examples of very successful <br>message-oriented middleware</br> for traditional distributed systems."
            ],
            "translated_annotated_samples": [
                "Los sistemas de middleware orientados a mensajes y el Servicio de Mensajes de Java (JMS) admiten la comunicación entre componentes distribuidos a través del paso de mensajes: el remitente envía un mensaje a colas identificadas, que generalmente residen en un servidor.",
                "La <br>middleware orientada a mensajes</br> soporta la comunicación asíncrona de una manera muy natural, logrando el desacoplamiento de emisores y receptores.",
                "Sun Java Message Service [5], IBM WebSphere MQ [6], Microsoft MSMQ [12] son ejemplos de <br>middleware orientado a mensajes</br> muy exitosos para sistemas distribuidos tradicionales."
            ],
            "translated_text": "Adaptando Middleware de Mensajería Asincrónica a Redes Ad-hoc Mirco Musolesi Dept. Las características de los entornos móviles, con la posibilidad de desconexiones frecuentes y ancho de banda fluctuante, han obligado a replantear el middleware tradicional. En particular, los paradigmas de comunicación síncrona a menudo empleados en middleware estándar no parecen ser particularmente adecuados para entornos ad-hoc, en los que ni siquiera se puede asumir la disponibilidad intermitente de una red troncal. En cambio, la comunicación asincrónica parece ser un paradigma generalmente más adecuado para este tipo de entornos. Se ha desarrollado y utilizado middleware orientado a mensajes para sistemas tradicionales con el fin de proporcionar un paradigma de comunicación asíncrona para sistemas distribuidos, y, recientemente, también para algunos sistemas específicos de computación móvil. En este artículo, presentamos nuestra experiencia en el diseño, implementación y evaluación de EMMA (Middleware de Mensajería Epidémica para redes ad-hoc), una adaptación del Servicio de Mensajes Java (JMS) para entornos móviles ad-hoc. Discutimos en detalle los desafíos de diseño y algunas posibles soluciones, mostrando un ejemplo concreto de la viabilidad y adecuación de la aplicación del paradigma asíncrono en este contexto y delineando un plan de investigación para los próximos años. Categorías y Descriptores de Asignaturas C.2.4 [Redes de Computadoras-Comunicación]: Sistemas Distribuidos-Aplicaciones Distribuidas; C.2.1 [Arquitectura y Diseño de Redes]: Comunicación Inalámbrica Términos Generales DISEÑO, ALGORITMOS 1. INTRODUCCIÓN Con la creciente popularidad de los dispositivos móviles y su amplia adopción, existe una clara necesidad de permitir el desarrollo de un amplio espectro de aplicaciones que operen de manera efectiva en dicho entorno. Lamentablemente, esto está lejos de ser simple: los dispositivos móviles son cada vez más heterogéneos en cuanto a capacidades de procesamiento, tamaño de memoria, capacidad de batería e interfaces de red. Cada una de estas configuraciones tiene características sustancialmente diferentes que son estáticamente distintas, por ejemplo, hay una gran diferencia en la capacidad entre un mote de Berkeley y un portátil equipado con 802.11g, y que varían dinámicamente, como en situaciones de ancho de banda fluctuante y conectividad intermitente. Los entornos móviles ad hoc tienen un elemento adicional de complejidad en que son completamente descentralizados. Para poder desarrollar aplicaciones para entornos tan complejos, es esencial contar con una forma adecuada de middleware si se busca lograr un desarrollo rentable. En este artículo, examinamos uno de los aspectos fundamentales de middleware para entornos móviles ad-hoc: el de los primitivos de comunicación. Tradicionalmente, los primitivos de middleware más utilizados para la comunicación asumen la presencia simultánea de ambos puntos finales en una red, ya que la estabilidad y la ubicuidad de la infraestructura de redes no es una suposición irrazonable para la mayoría de los entornos cableados. En otras palabras, la mayoría de los paradigmas de comunicación son síncronos: middleware orientado a objetos como CORBA y Java RMI son ejemplos típicos de middleware basado en comunicación síncrona. En los últimos años, ha habido un creciente interés en plataformas basadas en paradigmas de comunicación asincrónica, como los sistemas de publicación-suscripción: estos han sido explotados con mucho éxito donde existe asincronía a nivel de aplicación. De acuerdo con un informe de mercado de Gartner [7]: Dada la popularidad, escalabilidad, flexibilidad y afinidad con arquitecturas móviles e inalámbricas de los middlewares orientados a mensajes (MOM), para el año 2004, es probable que MOM se convierta en la forma dominante de middleware de comunicación para vincular aplicaciones móviles y empresariales (probabilidad del 0.7)... Además, en sistemas ad-hoc móviles, la probabilidad de fragmentación de la red significa que la comunicación síncrona puede resultar impracticable en cualquier caso, lo que da lugar a situaciones en las que el tráfico asincrónico tolerante a retrasos es la única forma de tráfico que podría ser admitida. El middleware para entornos ad-hoc móviles debe, por lo tanto, admitir primitivas de comunicación semi-síncronas o completamente asíncronas si se quiere evitar limitaciones sustanciales en su utilidad. Además del desafío intelectual que implica apoyar este modelo, este trabajo también es interesante porque existen varios ámbitos de aplicación práctica al permitir la comunicación entre comunidades en áreas subdesarrolladas del mundo. Por lo tanto, por ejemplo, proyectos que se han llevado a cabo para ayudar a poblaciones que viven en lugares remotos del mundo como Laponia o en áreas pobres que carecen de infraestructura de conectividad fija. Ha habido intentos de proporcionar middleware móvil con estas propiedades, incluyendo STEAM, LIME, XMIDDLE, Bayou (consulte [11] para una revisión más completa del middleware móvil). Estos modelos difieren considerablemente de los middleware tradicionales existentes en cuanto a los primitivos proporcionados. Además, algunos de ellos fallan en proporcionar una solución para los verdaderos escenarios ad-hoc. Si el éxito proyectado de MOM se convierte en algo parecido a la realidad, habrá muchos programadores con experiencia en ello. La solución ideal al problema del middleware para sistemas ad-hoc es, entonces, permitir a los programadores utilizar los mismos paradigmas y modelos presentados por formas comunes de MOM y asegurar que estos paradigmas sean soportables dentro del entorno móvil. Este enfoque tiene claras ventajas al permitir que las aplicaciones desarrolladas en plataformas de middleware estándar se desplieguen fácilmente en dispositivos móviles. De hecho, algunas investigaciones ya han llevado a la adaptación de plataformas de middleware tradicionales a entornos móviles, principalmente para proporcionar integración entre dispositivos móviles y redes fijas existentes en un entorno nómada (es decir, mixto) [4]. En lo que respecta al middleware orientado a mensajes, las implementaciones actuales, sin embargo, asumen la existencia de una red troncal a la que los hosts móviles se conectan de vez en cuando mientras están en itinerancia [10], o asumen que los nodos siempre son de alguna manera accesibles a través de un camino [18]. No se ha intentado ninguna adaptación a escenarios heterogéneos o completamente ad hoc, con desconexiones frecuentes y nubes periódicamente aisladas de hosts. En el resto de este documento describimos un intento inicial de adaptar middleware orientado a mensajes para que se ajuste a dispositivos móviles y, más específicamente, a redes móviles ad-hoc. En nuestro caso, elegimos examinar JMS, como uno de los sistemas MOM más conocidos. En la última parte de este documento, exploramos las limitaciones de nuestros resultados y describimos los planes que tenemos para llevar a cabo el trabajo más adelante. Los sistemas de middleware orientados a mensajes y el Servicio de Mensajes de Java (JMS) admiten la comunicación entre componentes distribuidos a través del paso de mensajes: el remitente envía un mensaje a colas identificadas, que generalmente residen en un servidor. Un receptor recupera el mensaje de la cola en un momento diferente y puede confirmar la respuesta utilizando el mismo mecanismo asíncrono. La <br>middleware orientada a mensajes</br> soporta la comunicación asíncrona de una manera muy natural, logrando el desacoplamiento de emisores y receptores. Un remitente puede continuar procesando tan pronto como el middleware haya aceptado el mensaje; eventualmente, el receptor enviará un mensaje de confirmación y el remitente podrá recogerlo en un momento conveniente. Sin embargo, dado la forma en que están implementados, estos sistemas de middleware suelen requerir dispositivos con recursos abundantes, especialmente en términos de memoria y espacio en disco, donde se almacenan colas persistentes de mensajes que han sido recibidos pero aún no procesados. Sun Java Message Service [5], IBM WebSphere MQ [6], Microsoft MSMQ [12] son ejemplos de <br>middleware orientado a mensajes</br> muy exitosos para sistemas distribuidos tradicionales. El Servicio de Mensajería de Java (JMS) es una colección de interfaces para la comunicación asincrónica entre componentes distribuidos. Proporciona una forma común para que los programas de Java creen, envíen y reciban mensajes. Los usuarios de JMS suelen ser referidos como clientes. La especificación JMS define además a los proveedores como los componentes encargados de implementar el sistema de mensajería y proporcionar la funcionalidad administrativa y de control (es decir, persistencia y confiabilidad) requerida por el sistema. Los clientes pueden enviar y recibir mensajes, de forma asincrónica, a través del proveedor JMS, que se encarga de la entrega y, posiblemente, de la persistencia de los mensajes. Hay dos tipos de comunicación admitidos: modelos punto a punto y de publicación-suscripción. En el modelo punto a punto, los hosts envían mensajes a colas. Los receptores pueden ser registrados con algunas colas específicas, y pueden recuperar los mensajes de forma asíncrona para luego confirmar su recepción. El modelo de publicación-suscripción se basa en el uso de temas a los que los clientes pueden suscribirse. Los mensajes son enviados a los temas por otros clientes y luego son recibidos de forma asíncrona por todos los clientes suscritos. Los clientes aprenden sobre los temas y colas disponibles a través de la Interfaz de Nombres y Directorios de Java (JNDI) [14]. Las colas y los temas son creados por un administrador en el proveedor y se registran con la interfaz JNDI para su búsqueda. En la siguiente sección, presentamos los desafíos de las redes móviles y mostramos cómo JMS puede adaptarse para cumplir con estos requisitos. 3. JMS PARA COMPUTACIÓN MÓVIL Las redes móviles varían mucho en sus características, desde redes nómadas en las que los nodos se desplazan mientras están desconectados, hasta redes ad-hoc en las que los nodos se mueven libremente y no hay infraestructura. Las redes móviles ad-hoc son más comúnmente aplicables en situaciones donde la supervivencia y la capacidad de despliegue instantáneo son clave: especialmente en aplicaciones militares y de ayuda en casos de desastre. Entre estos dos tipos de redes móviles, sin embargo, existen una serie de posibles combinaciones heterogéneas, donde se utilizan paradigmas nómadas y ad-hoc para interconectar áreas totalmente inalámbricas con redes más estructuradas (como una LAN o Internet). Si bien la especificación JMS ha sido ampliamente implementada y utilizada en sistemas distribuidos tradicionales, las adaptaciones para entornos móviles han sido propuestas recientemente. Los desafíos de adaptar JMS a entornos móviles son considerables; sin embargo, dada su amplia aceptación y uso, existen ventajas considerables al permitir la adaptación de aplicaciones existentes a entornos móviles y al permitir la interoperabilidad de aplicaciones en las regiones cableadas e inalámbricas de una red. En [10], JMS se adaptó a un entorno móvil nómada, donde los hosts móviles pueden ser clientes de JMS y comunicarse a través del proveedor de JMS que, sin embargo, se encuentra en una red troncal, proporcionando fiabilidad y persistencia. El prototipo del cliente presentado en [10] es muy ligero, debido a la delegación de toda la funcionalidad pesada al proveedor Middleware para Computación Pervasive y ad-hoc 122 en la red cableada. Sin embargo, este enfoque es algo limitado en términos de aplicabilidad generalizada y escalabilidad como consecuencia de la concentración de funcionalidad en la parte cableada de la red. Si se quiere adaptar JMS a entornos completamente ad hoc, donde no haya infraestructura fija disponible y donde los nodos cambien de ubicación y estado de forma muy dinámica, se deben tener en cuenta más problemas. En primer lugar, el descubrimiento necesita utilizar un modelo resiliente pero distribuido: en este entorno extremadamente dinámico, las soluciones estáticas son inaceptables. Como se discute en la Sección 2, un administrador de JMS define colas y temas en el proveedor. Los clientes pueden entonces aprender sobre ellos utilizando la Interfaz de Nombres y Directorios de Java (JNDI). Sin embargo, debido a la forma en que está diseñado JNDI, es necesario que un nodo de JNDI (o más de uno) esté al alcance para obtener una vinculación de un nombre a una dirección (es decir, saber dónde se encuentra una cola o un tema específico). En entornos móviles ad-hoc, el proceso de descubrimiento no puede asumir la existencia de un conjunto fijo de servidores de descubrimiento que siempre sean accesibles, ya que esto no coincidiría con la dinámica de las redes ad-hoc. En segundo lugar, un Proveedor de JMS, como sugiere la especificación de JMS, también debe ser accesible para cada nodo en la red, para poder comunicarse. Esto asume una arquitectura muy centralizada, que nuevamente no coincide con los requisitos de un entorno ad-hoc móvil, en el que los nodos pueden estar en movimiento y dispersos: se necesita una solución más distribuida y dinámica. La persistencia es, sin embargo, una funcionalidad esencial en entornos de comunicación asincrónica, ya que los hosts están, por definición, conectados en momentos diferentes. En la siguiente sección, discutiremos nuestra experiencia en el diseño e implementación de JMS para redes móviles ad-hoc. 4. El desarrollo de aplicaciones para redes móviles es aún más desafiante: además de las mismas consideraciones que para entornos inalámbricos infraestructurados, como las limitadas capacidades de los dispositivos y las restricciones de energía, existen problemas relacionados con la velocidad de cambio de la conectividad de la red y la falta de una infraestructura de enrutamiento estática. En consecuencia, ahora describimos un intento inicial de adaptar la especificación JMS para satisfacer los requisitos particulares relacionados con escenarios ad-hoc. Como se discute en la Sección 3, una aplicación JMS puede utilizar tanto el estilo de mensajería punto a punto como el de publicación-suscripción. Modelo de punto a punto. El modelo de punto a punto se basa en el concepto de colas, que se utilizan para habilitar la comunicación asincrónica entre el productor de un mensaje y posibles consumidores diferentes. En nuestra solución, la ubicación de las colas se determina mediante un proceso de negociación que depende de la aplicación. Por ejemplo, supongamos que es posible saber a priori, o es posible determinar dinámicamente, que cierto host es el receptor de la mayor parte de los mensajes enviados a una cola particular. En este caso, la ubicación óptima de la cola bien podría estar en este host en particular. En general, vale la pena señalar que, según la especificación de JMS y los patrones de diseño sugeridos, es común y preferible que un cliente tenga todos sus mensajes entregados a una sola cola. Las colas se anuncian periódicamente a los anfitriones que se encuentran dentro del rango de transmisión o que son alcanzables mediante el protocolo de comunicación síncrona subyacente, si se proporciona. Es importante tener en cuenta que, a nivel de middleware, es lógicamente irrelevante si la capa de red implementa alguna forma de enrutamiento ad-hoc (aunque considerablemente más eficiente si lo hace); el middleware solo considera información sobre qué nodos son accesibles activamente en cualquier momento. Los hosts que reciben mensajes publicitarios agregan entradas a su registro JNDI. Cada entrada se caracteriza por un arrendamiento (un mecanismo similar al presente en Jini [15]). Un contrato de arrendamiento representa el tiempo de validez de una entrada particular. Si un arrendamiento no se renueva (es decir, su vida no se extiende), puede vencer y, en consecuencia, la entrada se elimina del registro. En otras palabras, el anfitrión asume que la cola será inaccesible a partir de ese momento. Esto puede ser causado, por ejemplo, si un host que almacena la cola se vuelve inaccesible. Un host que inicia un proceso de descubrimiento encontrará los temas y las colas presentes en su porción conectada de la red de manera directa. Para enviar un mensaje a un anfitrión que actualmente no está al alcance, utilizamos un protocolo de enrutamiento de epidemia asíncrono que se discutirá en detalle en la Sección 4.2. Si dos hosts están en la misma nube (es decir, existe un camino conectado entre ellos), pero no hay disponible un protocolo síncrono, los mensajes se envían utilizando el protocolo epidémico. En este caso, la latencia de entrega será baja como resultado de la rapidez de propagación de la infección en la nube conectada (ver también los resultados de la simulación en la Sección 5). Dado la existencia de un protocolo de epidemia, el mecanismo de descubrimiento consiste en publicitar las colas a los hosts que actualmente son inalcanzables utilizando mecanismos análogos. En el modelo de publicación-suscripción, algunos de los hosts son designados de manera similar para mantener temas y almacenar suscripciones, como antes. Los temas se anuncian a través del registro de la misma manera que las colas, y un cliente que desee suscribirse a un tema debe registrarse con el cliente que tiene el tema. Cuando un cliente desea enviar un mensaje a la lista de temas, lo envía al titular del tema (de la misma manera que enviaría un mensaje a una cola). El titular del tema luego reenvía el mensaje a todos los suscriptores, utilizando el protocolo síncrono si es posible, de lo contrario el protocolo epidémico. Vale la pena señalar que utilizamos un único mensaje con múltiples destinatarios, en lugar de múltiples mensajes con múltiples destinatarios. Cuando un mensaje es entregado a uno de los suscriptores, este destinatario es eliminado de la lista. Para eliminar las posibles réplicas restantes, empleamos mensajes de acuse de recibo (discutidos en la Sección 4.4), devueltos de la misma manera que un mensaje normal. También hemos adaptado los conceptos de suscripciones duraderas y no duraderas para entornos ad-hoc. En las plataformas fijas, las suscripciones duraderas se mantienen durante las desconexiones de los clientes, ya sean intencionales o resultado de fallas. En los sistemas tradicionales, cuando un suscriptor duradero se desconecta del servidor, es responsable de almacenar los mensajes. Cuando el suscriptor duradero se reconecta, el servidor le envía todos los mensajes no caducados. El problema es que, en nuestro escenario, las desconexiones son la norma. En teoría, no es posible enviar un mensaje a un par que nunca ha sido alcanzable en el pasado, ya que no puede haber ninguna entrada presente en el registro. Sin embargo, para superar esta posible limitación, proporcionamos un mecanismo a través del cual la información puede ser añadida al registro sin utilizar los canales normales. 123 Middleware 2004 Companion en lugar de la excepción. En otras palabras, no podemos considerar las desconexiones como fallos. Por estas razones, adoptamos una semántica ligeramente diferente. En lo que respecta a las suscripciones duraderas, si un suscriptor se desconecta, las notificaciones no se almacenan, sino que se envían utilizando el protocolo epidémico en lugar del protocolo síncrono. En otras palabras, las notificaciones duraderas siguen siendo válidas durante las posibles desconexiones del suscriptor. Por otro lado, si un suscriptor no duradero se desconecta, su suscripción se elimina; en otras palabras, durante las desconexiones, las notificaciones no se envían utilizando el protocolo epidémico, sino que solo se aprovecha el protocolo síncrono. Si el tema vuelve a estar accesible para este anfitrión, deberá realizar otra suscripción para recibir las notificaciones. Los mensajes de baja se entregan de la misma manera que los mensajes de suscripción. Es importante tener en cuenta que los suscriptores duraderos deben darse de baja explícitamente de un tema para detener el proceso de notificación; sin embargo, todas las suscripciones duraderas tienen un tiempo de expiración predefinido para hacer frente a los casos de suscriptores que no vuelven a conectarse debido a sus movimientos o fallos. Esta característica se proporciona claramente para limitar el número de mensajes innecesarios enviados por la red. 4.2 Entrega de mensajes utilizando enrutamiento epidémico En esta sección, examinamos un mecanismo posible que permitirá la entrega de mensajes en una red parcialmente conectada. El mecanismo que discutimos está destinado a demostrar viabilidad; los mecanismos de comunicación más eficientes para este entorno son complejos por sí mismos y son el tema de otro artículo [13]. La entrega de mensajes asincrónica descrita anteriormente se basa en un protocolo de enrutamiento de estilo epidémico puro típico [16]. Un mensaje que necesita ser enviado se replica en cada host al alcance. De esta manera, las copias de los mensajes se propagan rápidamente a través de redes conectadas, como una infección. Si un anfitrión se conecta a otra nube de nodos móviles durante su movimiento, el mensaje se propaga a través de esta colección de anfitriones. La replicación de datos y mensajes en estilo epidémico ha sido explotada en el pasado en muchos campos, comenzando por el área de sistemas de bases de datos distribuidas [2]. Dentro del enrutamiento epidémico, cada anfitrión mantiene un búfer que contiene los mensajes que ha creado y las réplicas de los mensajes generados por los otros anfitriones. Para mejorar el rendimiento, una tabla hash indexa el contenido del búfer. Cuando dos anfitriones se conectan, el anfitrión con el identificador más pequeño inicia una sesión de anti-entropía, enviando una lista que contiene los identificadores únicos de los mensajes que actualmente almacena. El otro anfitrión evalúa esta lista y envía de vuelta una lista que contiene los identificadores que está almacenando y que no están presentes en el otro anfitrión, junto con los mensajes que el otro no tiene. El anfitrión que ha iniciado la sesión recibe la lista y, de la misma manera, envía los mensajes que no están presentes en el otro anfitrión. En caso de producirse un desbordamiento de búfer, los mensajes se descartan. La fiabilidad ofrecida por este protocolo es generalmente de mejor esfuerzo, ya que no hay garantía de que un mensaje finalmente sea entregado a su destinatario. Claramente, la proporción de entrega del protocolo aumenta proporcionalmente al tiempo máximo de retraso permitido y al tamaño del búfer en cada host (pueden encontrarse resultados interesantes de simulación en [16]). 4.3 Adaptación del Modelo de Mensajes JMS En esta sección, analizaremos los aspectos de nuestra adaptación de la especificación relacionados con el llamado Modelo de Mensajes JMS [5]. Según esto, los mensajes JMS se caracterizan por algunas propiedades definidas utilizando el campo de encabezado, que contiene valores que son utilizados tanto por los clientes como por los proveedores para su entrega. Los aspectos discutidos en el resto de esta sección son válidos para ambos modelos (punto a punto y publicar-suscribir). Un mensaje JMS puede ser persistente o no persistente. Según la especificación de JMS, los mensajes persistentes deben entregarse con un grado de confiabilidad mayor que los no persistentes. Sin embargo, vale la pena señalar que no es posible garantizar la fiabilidad de una sola vez para mensajes persistentes según lo definido en la especificación, ya que, como discutimos en la subsección anterior, el protocolo epidémico subyacente solo puede garantizar la entrega de mejor esfuerzo. Sin embargo, los clientes mantienen una lista de los identificadores de los mensajes recibidos recientemente para evitar la entrega de mensajes duplicados. En otras palabras, proporcionamos a las aplicaciones una fiabilidad inmediata para ambos tipos de mensajes. Para implementar diferentes niveles de confiabilidad, EMMA trata de manera diferente los mensajes persistentes y no persistentes durante la ejecución del protocolo epidémico de anti-entropía. Dado que el espacio del búfer de mensajes es limitado, los mensajes persistentes se replican preferentemente utilizando el espacio libre disponible. Si esto es insuficiente y hay mensajes no persistentes presentes en el búfer, estos son reemplazados. Solo se notifican a los remitentes las entregas exitosas de los mensajes persistentes. Según la especificación de JMS, es posible asignar una prioridad a cada mensaje. Los mensajes con prioridades más altas se entregan de manera preferencial. Como se discutió anteriormente, los mensajes persistentes tienen prioridad sobre los no persistentes. La selección adicional se basa en sus prioridades. Los mensajes con prioridades más altas son tratados de manera preferencial. De hecho, si no hay suficiente espacio para replicar todos los mensajes persistentes, se utiliza un mecanismo basado en prioridades para eliminar y replicar los mensajes no persistentes (y, si es necesario, los mensajes persistentes). Los mensajes se eliminan de los buffers utilizando el valor de tiempo de expiración que puede ser establecido por los remitentes. Esta es una forma de liberar espacio en los búferes (se eliminan preferentemente los mensajes más antiguos en casos de conflicto); para eliminar réplicas obsoletas en el sistema; y para limitar el tiempo durante el cual los destinos deben mantener los identificadores de mensajes para desechar duplicados. Mecanismos de fiabilidad y de acuse de recibo Como ya se discutió, la entrega de mensajes como máximo una vez es lo mejor que se puede lograr en términos de semántica de entrega en entornos ad-hoc parcialmente conectados. Sin embargo, es posible mejorar la confiabilidad del sistema con mecanismos de acuse de recibo eficientes. EMMA proporciona un mecanismo de notificación de fallos a las aplicaciones si no se recibe el acuse de recibo dentro de un tiempo límite dado (que puede ser configurado por los desarrolladores de aplicaciones). Este mecanismo es el que distingue la entrega de mensajes persistentes y no persistentes en nuestra implementación de JMS: las entregas de los primeros son notificadas a los remitentes, mientras que los de los segundos no lo son. Utilizamos mensajes de acuse de recibo no solo para informar a los remitentes sobre la entrega exitosa de los mensajes, sino también para eliminar las réplicas de los mensajes entregados que aún están presentes en la red. Cada anfitrión mantiene una lista de los mensajes Middleware para la Computación Pervasiva y Ad-hoc 124 entregados con éxito que se actualiza como parte del proceso normal de intercambio de información entre los anfitriones. Las listas se intercambian durante los primeros pasos del protocolo de epidemia anti-entropía con una frecuencia predefinida. En el caso de mensajes con múltiples destinatarios, también se almacena una lista de los destinatarios reales. Cuando un anfitrión recibe la lista, verifica su búfer de mensajes y lo actualiza de acuerdo con las siguientes reglas: (1) si un mensaje tiene un único destinatario y ha sido entregado, se elimina del búfer; (2) si un mensaje tiene múltiples destinatarios, se eliminan los identificadores de los anfitriones a los que se ha entregado de la lista de destinatarios asociada. Si la longitud resultante de la lista de destinatarios es cero, el mensaje se elimina del búfer. Estas listas tienen, claramente, dimensiones finitas y se implementan como colas circulares. Este mecanismo simple, junto con el uso de marcas de tiempo de expiración, garantiza que las antiguas notificaciones de acuse de recibo sean eliminadas del sistema después de un período de tiempo limitado. Para mejorar la confiabilidad de EMMA, se podría desarrollar un mecanismo de diseño para la replicación inteligente de colas y temas basado en la información de contexto. Sin embargo, esto aún no forma parte de la arquitectura actual de EMMA. 5. IMPLEMENTACIÓN Y EVALUACIÓN PRELIMINAR Implementamos un prototipo de nuestra plataforma utilizando el Perfil Personal J2ME. El tamaño del ejecutable es de aproximadamente 250KB, incluido el archivo jar de JMS 1.1; esta es una cifra perfectamente aceptable dada la memoria disponible de los dispositivos móviles actuales en el mercado. Probamos nuestro prototipo en PDAs HP iPaq con Linux, interconectados con WaveLan, y en varios laptops con la misma interfaz de red. También evaluamos la plataforma de middleware utilizando el simulador de eventos discretos OMNET++ [17] para explorar una variedad de escenarios móviles que incorporaban un número más realista de hosts que el que se podía lograr experimentalmente. Más específicamente, evaluamos el rendimiento del sistema en términos de ratio de entrega y retraso promedio, variando la densidad de población y el tamaño del búfer, y utilizando mensajes persistentes y no persistentes con diferentes prioridades. Los resultados de la simulación muestran que el rendimiento de EMMAs, en términos de ratio de entrega y retraso de mensajes persistentes con prioridades más altas, es bueno. En general, es evidente que la proporción de entrega está fuertemente relacionada con el dimensionamiento correcto de los búferes para el retraso máximo aceptable. Además, los algoritmos epidémicos son capaces de garantizar una alta tasa de entrega si se evalúa el rendimiento durante un intervalo de tiempo suficiente para la difusión de las réplicas de los mensajes (es decir, la propagación de la infección) en una gran parte de la red ad-hoc. Una consecuencia del problema de dimensionamiento es que la escalabilidad puede verse seriamente afectada en middleware peer-to-peer para computación móvil debido a la escasez de recursos de los dispositivos (memoria limitada para almacenar temporalmente mensajes) y al número de posibles interconexiones en entornos ad-hoc. Lo peor es que las formas comunes de organización comercial y social (seis grados de separación) significan que incluso valores modestos de TTL en los mensajes provocarán una difusión generalizada de mensajes epidémicos. Este problema surge debido a la falta de inteligencia en el protocolo de la epidemia, y puede ser abordado seleccionando nodos portadores para los mensajes con mayor cuidado. Sin embargo, los detalles de este proceso están fuera del alcance de este documento (pero pueden encontrarse en [13]) y no afectan la base en la que se basa el middleware EMMA: la capacidad de entregar mensajes de forma asincrónica. 6. VISIÓN CRÍTICA DEL ESTADO DEL ARTE El diseño de plataformas de middleware para la computación móvil requiere que los investigadores respondan a preguntas nuevas y fundamentalmente diferentes; simplemente asumir la presencia de porciones cableadas de la red en las que pueda residir la funcionalidad centralizada no es generalizable. Por lo tanto, es necesario investigar nuevos principios de diseño y idear patrones arquitectónicos que difieran de los tradicionalmente utilizados en el diseño de middleware para sistemas fijos. Como ejemplo, considera la reciente tendencia de superposición de capas en redes ad-hoc [1]. Esta es una forma de replantear el diseño de sistemas de software, abandonando explícitamente las formas clásicas de estratificación, ya que, aunque esta separación de preocupaciones permite la portabilidad, lo hace a expensas de posibles ganancias de eficiencia. Creemos que es posible ver nuestro enfoque como una instancia de superposición de capas. De hecho, hemos añadido el protocolo de red epidémica a nivel de middleware y, al mismo tiempo, hemos utilizado el protocolo de red síncrono existente si está presente tanto en la entrega de mensajes (capas tradicionales) como en informar al middleware sobre cuándo pueden entregarse los mensajes revelando detalles de las tablas de reenvío (violación de capas). Por esta razón, preferimos considerarlos conjuntamente como la capa de comunicación de nuestra plataforma, proporcionando juntos una entrega de mensajes más eficiente. Otro aspecto interesante es la explotación del contexto y la información del sistema para mejorar el rendimiento de las plataformas de middleware móvil. Una vez más, como resultado de adoptar una metodología de capas cruzadas, podemos construir sistemas que recopilan información del sistema operativo subyacente y los componentes de comunicación para permitir la adaptación del comportamiento. Podemos resumir este enfoque de diseño conceptual diciendo que las plataformas de middleware deben ser no solo conscientes del contexto (es decir, deben ser capaces de extraer y analizar información del contexto circundante) sino también conscientes del sistema (es decir, deben ser capaces de recopilar información de los componentes de software y hardware del sistema móvil). Se han desarrollado varios sistemas de middleware para admitir redes ad hoc con el uso de comunicación asíncrona (como LIME, XMIDDLE, STEAM [11]). En particular, la plataforma STEAM es un ejemplo interesante de middleware basado en eventos para redes ad hoc, que proporciona entrega de mensajes con conciencia de ubicación y una solución efectiva para el filtrado de eventos. Una discusión sobre JMS, y su realización móvil, ya ha sido realizada en las Secciones 4 y 2. La empresa suiza Softwired ha desarrollado el primer middleware JMS para computación móvil, llamado iBus Mobile [10]. Los componentes principales de esta arquitectura típicamente basada en infraestructura son el proveedor de JMS, la llamada puerta de enlace móvil de JMS, que se despliega en un host fijo y una biblioteca de cliente JMS ligera. El gateway se utiliza para la comunicación entre el servidor de aplicaciones y los dispositivos móviles. El proveedor JMS ve la pasarela como un cliente JMS normal. El proveedor JMS puede ser cualquier servidor de aplicaciones habilitado para JMS, como BEA Weblogic. Pronto [19] es un ejemplo de un sistema de middleware basado en mensajería, diseñado específicamente para entornos móviles. La plataforma está compuesta por tres clases de componentes: clientes móviles que implementan la especificación JMS, pasarelas que controlan el tráfico, garantizando eficiencia y posibles personalizaciones de usuario utilizando diferentes complementos y servidores JMS. Diferentes configuraciones de estos componentes son posibles; con respecto a las aplicaciones de redes móviles ad hoc, la más interesante es Serverless JMS. El objetivo de esta configuración es adaptar JMS a un modelo descentralizado. El modelo de publicación-suscripción explota la eficiencia y la escalabilidad del protocolo de multidifusión IP subyacente. Se proporcionan servicios de entrega de mensajes poco confiables y confiables: la confiabilidad se logra a través de un protocolo basado en acuse de recibo negativo. Pronto representa una buena solución para redes móviles basadas en infraestructura, pero no se dirige adecuadamente a entornos ad-hoc, ya que los nodos móviles dependen de servidores fijos para el intercambio de mensajes. Existen otras MOM implementadas para entornos móviles; sin embargo, suelen ser extensiones sencillas de middleware existente [8]. La única implementación de MOM específicamente diseñada para redes móviles ad-hoc fue desarrollada en la Universidad de Newcastle [18]. Este trabajo es nuevamente una adaptación de JMS; el enfoque de esa implementación se centra en la comunicación de grupo y el uso de algoritmos de enrutamiento a nivel de aplicación para la entrega de mensajes por tema. Sin embargo, hay una serie de diferencias en el enfoque de nuestro trabajo. La importancia que atribuimos a las desconexiones hace que la persistencia sea un requisito vital para cualquier middleware que necesite ser utilizado en redes móviles ad-hoc. Los autores de [18] señalan la persistencia como un posible trabajo futuro, sin considerar el hecho de que enrutar un mensaje a un host no conectado resultará en un fallo de entrega. Esta es una limitación notable en entornos móviles donde las desconexiones impredecibles son la norma en lugar de la excepción. 7. MAPA Y CONCLUSIONES La comunicación asincrónica es un paradigma de comunicación útil para las redes móviles ad-hoc, ya que permite a los hosts llegar, irse y recoger mensajes cuando sea conveniente, teniendo en cuenta también la disponibilidad de sus recursos (por ejemplo, energía, niveles de conectividad). En este artículo hemos descrito el estado del arte en términos de MOM para sistemas móviles. También hemos demostrado una adaptación de prueba de concepto de JMS al escenario extremo de redes móviles ad-hoc parcialmente conectadas. Hemos descrito y discutido las características y diferencias de nuestra solución con respecto a las implementaciones tradicionales de JMS y las adaptaciones existentes para entornos móviles. Sin embargo, también se deben investigar los compromisos entre el enrutamiento a nivel de aplicación y el uso de recursos, ya que los dispositivos móviles suelen tener escasez de energía/recursos. Una limitación clave de este trabajo es el algoritmo epidémico que tiene un rendimiento deficiente y un avance importante en la practicabilidad de este trabajo requiere un algoritmo que equilibre mejor las necesidades de eficiencia y probabilidad de entrega de mensajes. Actualmente estamos trabajando en algoritmos y protocolos que, aprovechando técnicas probabilísticas y estadísticas sobre la base de pequeñas cantidades de información intercambiada, son capaces de mejorar considerablemente la eficiencia en términos de recursos (memoria, ancho de banda, etc.) y la confiabilidad de nuestra plataforma de middleware [13]. Un desarrollo de investigación futurista, que podría llevar estas ideas de adaptación de middleware de mensajería para entornos móviles más allá, es la introducción de extensiones de comunicación más orientadas a la movilidad, como el soporte de geocast (es decir, la capacidad de enviar mensajes a áreas geográficas específicas). REFERENCIAS [1] M. Conti, G. Maselli, G. Turi y S. Giordano. Diseño de redes móviles ad-hoc con interconexión de capas. IEEE Computer, 37(2):48-51, febrero de 2004. [2] A. Demers, D. Greene, C. Hauser, W. Irish, J. Larson, S. Shenker, H. Sturgis, D. Swinehart y D. Terry. Algoritmos de epidemia para el mantenimiento de bases de datos replicadas. En el Sexto Simposio sobre Principios de Computación Distribuida, páginas 1-12, agosto de 1987. [3] A. Doria, M. Uden y D. P. Pandey. Proporcionando conectividad a la comunidad nómada Saami. En Actas de la Segunda Conferencia Internacional sobre Diseño Colaborativo Abierto para la Innovación Sostenible, diciembre de 2002. [4] M. Haahr, R. Cunningham y V. Cahill. Aplicaciones CORBA en un entorno móvil. En la 5ª Conferencia Internacional sobre Computación y Redes Móviles (MOBICOM99), páginas 36-47. ACM, agosto de 1999. [5] M. Hapner, R. Burridge, R. Sharma, J. Fialli y K. Stout. Especificación del Servicio de Mensajes Java Versión 1.1. Sun Microsystems, Inc., abril de 2002. http://java.sun.com/products/jms/. [6] J. Hart. WebSphere MQ: Conectando sus aplicaciones sin programación compleja. IBM WebSphere Software White Papers, 2003. [7] S. Hayward y M. Pezzini. Casando Middleware y Computación Móvil. Informe de investigación del Grupo Gartner, septiembre de 2001. [8] IBM. WebSphere MQ EveryPlace Versión 2.0, noviembre de 2002. http://www-3.ibm.com/software/integration/wmqe/. [9] UIT. Conectando comunidades remotas. Documentos de la Cumbre Mundial sobre la Sociedad de la Información, 2003. http://www.itu.int/osg/spu/wsis-themes. [10] S. Maffeis. Presentando JMS inalámbrico. Softwired AG, www.sofwired-inc.com, 2002. [11] C. Mascolo, L. Capra y W. Emmerich. Middleware para Computación Móvil. En E. Gregori, G. Anastasi y S. Basagni, editores, Conferencias Avanzadas sobre Redes, volumen 2497 de las Notas de Conferencias en Ciencias de la Computación, páginas 20-58. Springer Verlag, 2002. [12] Microsoft. \n\nSpringer Verlag, 2002. [12] Microsoft. Documentación de Microsoft Message Queuing (MSMQ) Versión 2.0. [13] M. Musolesi, S. Hailes y C. Mascolo. Enrutamiento adaptativo para redes ad-hoc móviles intermitentemente conectadas. Informe técnico, Nota de Investigación UCL-CS, julio de 2004. Enviado para su publicación. [14] Sun Microsystems. Documentación de Java Naming and Directory Interface (JNDI) Versión 1.2. 2003. http://java.sun.com/products/jndi/. [15] Sun Microsystems. Especificación de Jini Versión 2.0, 2003. http://java.sun.com/products/jini/. [16] A. Vahdat y D. Becker. Enrutamiento epidémico para redes ad-hoc parcialmente conectadas. Informe técnico CS-2000-06, Departamento de Ciencias de la Computación, Universidad de Duke, 2000. [17] A. Vargas. El sistema de simulación de eventos discretos OMNeT++. En Actas de la Multiconferencia Europea de Simulación (ESM2001), Praga, junio de 2001. [18] E. Vollset, D. Ingham y P. Ezhilchelvan. JMS en redes móviles ad-hoc. En Comunicaciones Inalámbricas Personales (PWC), páginas 40-52, Venecia, septiembre de 2003. [19] E. Yoneki y J. Bacon. Pronto: Mobilegateway con paradigma de publicación-suscripción sobre red inalámbrica. Informe Técnico 559, Universidad de Cambridge, Laboratorio de Computación, febrero de 2003. Middleware para Computación Pervasive y ad-hoc 126 ",
            "candidates": [],
            "error": [
                [
                    "middleware orientada a mensajes",
                    "middleware orientado a mensajes"
                ]
            ]
        },
        "java messaging service": {
            "translated_key": "Servicio de Mensajería de Java",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Adapting Asynchronous Messaging Middleware to ad-hoc Networking Mirco Musolesi Dept.",
                "of Computer Science, University College London Gower Street, London WC1E 6BT, United Kingdom m.musolesi@cs.ucl.ac.uk Cecilia Mascolo Dept. of Computer Science, University College London Gower Street, London WC1E 6BT, United Kingdom c.mascolo@cs.ucl.ac.uk Stephen Hailes Dept. of Computer Science, University College London Gower Street, London WC1E 6BT, United Kingdom s.hailes@cs.ucl.ac.uk ABSTRACT The characteristics of mobile environments, with the possibility of frequent disconnections and fluctuating bandwidth, have forced a rethink of traditional middleware.",
                "In particular, the synchronous communication paradigms often employed in standard middleware do not appear to be particularly suited to ad-hoc environments, in which not even the intermittent availability of a backbone network can be assumed.",
                "Instead, asynchronous communication seems to be a generally more suitable paradigm for such environments.",
                "Message oriented middleware for traditional systems has been developed and used to provide an asynchronous paradigm of communication for distributed systems, and, recently, also for some specific mobile computing systems.",
                "In this paper, we present our experience in designing, implementing and evaluating EMMA (Epidemic Messaging Middleware for ad-hoc networks), an adaptation of Java Message Service (JMS) for mobile ad-hoc environments.",
                "We discuss in detail the design challenges and some possible solutions, showing a concrete example of the feasibility and suitability of the application of the asynchronous paradigm in this setting and outlining a research roadmap for the coming years.",
                "Categories and Subject Descriptors C.2.4 [Computer-Communication Networks]: Distributed Systems-Distributed Applications; C.2.1 [Network Architecture and Design]: Wireless Communication General Terms DESIGN, ALGORITHMS 1.",
                "INTRODUCTION With the increasing popularity of mobile devices and their widespread adoption, there is a clear need to allow the development of a broad spectrum of applications that operate effectively over such an environment.",
                "Unfortunately, this is far from simple: mobile devices are increasingly heterogeneous in terms of processing capabilities, memory size, battery capacity, and network interfaces.",
                "Each such configuration has substantially different characteristics that are both statically different - for example, there is a major difference in capability between a Berkeley mote and an 802.11g-equipped laptop - and that vary dynamically, as in situations of fluctuating bandwidth and intermittent connectivity.",
                "Mobile ad hoc environments have an additional element of complexity in that they are entirely decentralised.",
                "In order to craft applications for such complex environments, an appropriate form of middleware is essential if cost effective development is to be achieved.",
                "In this paper, we examine one of the foundational aspects of middleware for mobile ad-hoc environments: that of the communication primitives.",
                "Traditionally, the most frequently used middleware primitives for communication assume the simultaneous presence of both end points on a network, since the stability and pervasiveness of the networking infrastructure is not an unreasonable assumption for most wired environments.",
                "In other words, most communication paradigms are synchronous: object oriented middleware such as CORBA and Java RMI are typical examples of middleware based on synchronous communication.",
                "In recent years, there has been growing interest in platforms based on asynchronous communication paradigms, such as publish-subscribe systems [6]: these have been exploited very successfully where there is application level asynchronicity.",
                "From a Gartner Market Report [7]: Given messageoriented-middlewares (MOM) popularity, scalability, flexibility, and affinity with mobile and wireless architectures, by 2004, MOM will emerge as the dominant form of communication middleware for linking mobile and enterprise applications (0.7 probability)....",
                "Moreover, in mobile ad-hoc systems, the likelihood of network fragmentation means that synchronous communication may in any case be impracticable, giving situations in which delay tolerant asynchronous traffic is the only form of traffic that could be supported. 121 Middleware 2004 Companion Middleware for mobile ad-hoc environments must therefore support semi-synchronous or completely asynchronous communication primitives if it is to avoid substantial limitations to its utility.",
                "Aside from the intellectual challenge in supporting this model, this work is also interesting because there are a number of practical application domains in allowing inter-community communication in undeveloped areas of the globe.",
                "Thus, for example, projects that have been carried out to help populations that live in remote places of the globe such as Lapland [3] or in poor areas that lack fixed connectivity infrastructure [9].",
                "There have been attempts to provide mobile middleware with these properties, including STEAM, LIME, XMIDDLE, Bayou (see [11] for a more complete review of mobile middleware).",
                "These models differ quite considerably from the existing traditional middleware in terms of primitives provided.",
                "Furthermore, some of them fail in providing a solution for the true ad-hoc scenarios.",
                "If the projected success of MOM becomes anything like a reality, there will be many programmers with experience of it.",
                "The ideal solution to the problem of middleware for ad-hoc systems is, then, to allow programmers to utilise the same paradigms and models presented by common forms of MOM and to ensure that these paradigms are supportable within the mobile environment.",
                "This approach has clear advantages in allowing applications developed on standard middleware platforms to be easily deployed on mobile devices.",
                "Indeed, some research has already led to the adaptation of traditional middleware platforms to mobile settings, mainly to provide integration between mobile devices and existing fixed networks in a nomadic (i.e., mixed) environment [4].",
                "With respect to message oriented middleware, the current implementations, however, either assume the existence of a backbone network to which the mobile hosts connect from time to time while roaming [10], or assume that nodes are always somehow reachable through a path [18].",
                "No adaptation to heterogeneous or completely ad-hoc scenarios, with frequent disconnection and periodically isolated clouds of hosts, has been attempted.",
                "In the remainder of this paper we describe an initial attempt to adapt message oriented middleware to suit mobile and, more specifically, mobile ad-hoc networks.",
                "In our case, we elected to examine JMS, as one of the most widely known MOM systems.",
                "In the latter part of this paper, we explore the limitations of our results and describe the plans we have to take the work further. 2.",
                "MESSAGE ORIENTED MIDDLEWARE AND JAVA MESSAGE SERVICE (JMS) Message-oriented middleware systems support communication between distributed components via message-passing: the sender sends a message to identified queues, which usually reside on a server.",
                "A receiver retrieves the message from the queue at a different time and may acknowledge the reply using the same asynchronous mechanism.",
                "Message-oriented middleware thus supports asynchronous communication in a very natural way, achieving de-coupling of senders and receivers.",
                "A sender is able to continue processing as soon as the middleware has accepted the message; eventually, the receiver will send an acknowledgment message and the sender will be able to collect it at a convenient time.",
                "However, given the way they are implemented, these middleware systems usually require resource-rich devices, especially in terms of memory and disk space, where persistent queues of messages that have been received but not yet processed, are stored.",
                "Sun Java Message Service [5], IBM WebSphere MQ [6], Microsoft MSMQ [12] are examples of very successful message-oriented middleware for traditional distributed systems.",
                "The <br>java messaging service</br> (JMS) is a collection of interfaces for asynchronous communication between distributed components.",
                "It provides a common way for Java programs to create, send and receive messages.",
                "JMS users are usually referred to as clients.",
                "The JMS specification further defines providers as the components in charge of implementing the messaging system and providing the administrative and control functionality (i.e., persistence and reliability) required by the system.",
                "Clients can send and receive messages, asynchronously, through the JMS provider, which is in charge of the delivery and, possibly, of the persistence of the messages.",
                "There are two types of communication supported: point to point and publish-subscribe models.",
                "In the point to point model, hosts send messages to queues.",
                "Receivers can be registered with some specific queues, and can asynchronously retrieve the messages and then acknowledge them.",
                "The publish-subscribe model is based on the use of topics that can be subscribed to by clients.",
                "Messages are sent to topics by other clients and are then received in an asynchronous mode by all the subscribed clients.",
                "Clients learn about the available topics and queues through Java Naming and Directory Interface (JNDI) [14].",
                "Queues and topics are created by an administrator on the provider and are registered with the JNDI interface for look-up.",
                "In the next section, we introduce the challenges of mobile networks, and show how JMS can be adapted to cope with these requirements. 3.",
                "JMS FOR MOBILE COMPUTING Mobile networks vary very widely in their characteristics, from nomadic networks in which modes relocate whilst offline through to ad-hoc networks in which modes move freely and in which there is no infrastructure.",
                "Mobile ad-hoc networks are most generally applicable in situations where survivability and instant deployability are key: most notably in military applications and disaster relief.",
                "In between these two types of mobile networks, there are, however, a number of possible heterogeneous combinations, where nomadic and ad-hoc paradigms are used to interconnect totally unwired areas to more structured networks (such as a LAN or the Internet).",
                "Whilst the JMS specification has been extensively implemented and used in traditional distributed systems, adaptations for mobile environments have been proposed only recently.",
                "The challenges of porting JMS to mobile settings are considerable; however, in view of its widespread acceptance and use, there are considerable advantages in allowing the adaptation of existing applications to mobile environments and in allowing the interoperation of applications in the wired and wireless regions of a network.",
                "In [10], JMS was adapted to a nomadic mobile setting, where mobile hosts can be JMS clients and communicate through the JMS provider that, however, sits on a backbone network, providing reliability and persistence.",
                "The client prototype presented in [10] is very lightweight, due to the delegation of all the heavyweight functionality to the Middleware for Pervasive and ad-hoc Computing 122 provider on the wired network.",
                "However, this approach is somewhat limited in terms of widespread applicability and scalability as a consequence of the concentration of functionality in the wired portion of the network.",
                "If JMS is to be adapted to completely ad-hoc environments, where no fixed infrastructure is available, and where nodes change location and status very dynamically, more issues must be taken into consideration.",
                "Firstly, discovery needs to use a resilient but distributed model: in this extremely dynamic environment, static solutions are unacceptable.",
                "As discussed in Section 2, a JMS administrator defines queues and topics on the provider.",
                "Clients can then learn about them using the Java Naming and Directory Interface (JNDI).",
                "However, due to the way JNDI is designed, a JNDI node (or more than one) needs to be in reach in order to obtain a binding of a name to an address (i.e., knowing where a specific queue/topic is).",
                "In mobile ad-hoc environments, the discovery process cannot assume the existence of a fixed set of discovery servers that are always reachable, as this would not match the dynamicity of ad-hoc networks.",
                "Secondly, a JMS Provider, as suggested by the JMS specification, also needs to be reachable by each node in the network, in order to communicate.",
                "This assumes a very centralised architecture, which again does not match the requirements of a mobile ad-hoc setting, in which nodes may be moving and sparse: a more distributed and dynamic solution is needed.",
                "Persistence is, however, essential functionality in asynchronous communication environments as hosts are, by definition, connected at different times.",
                "In the following section, we will discuss our experience in designing and implementing JMS for mobile ad-hoc networks. 4.",
                "JMSFOR MOBILE ad-hoc NETWORKS 4.1 Adaptation of JMS for Mobile ad-hoc Networks Developing applications for mobile networks is yet more challenging: in addition to the same considerations as for infrastructured wireless environments, such as the limited device capabilities and power constraints, there are issues of rate of change of network connectivity, and the lack of a static routing infrastructure.",
                "Consequently, we now describe an initial attempt to adapt the JMS specification to target the particular requirements related to ad-hoc scenarios.",
                "As discussed in Section 3, a JMS application can use either the point to point and the publish-subscribe styles of messaging.",
                "Point to Point Model The point to point model is based on the concept of queues, that are used to enable asynchronous communication between the producer of a message and possible different consumers.",
                "In our solution, the location of queues is determined by a negotiation process that is application dependent.",
                "For example, let us suppose that it is possible to know a priori, or it is possible to determine dynamically, that a certain host is the receiver of the most part of messages sent to a particular queue.",
                "In this case, the optimum location of the queue may well be on this particular host.",
                "In general, it is worth noting that, according to the JMS specification and suggested design patterns, it is common and preferable for a client to have all of its messages delivered to a single queue.",
                "Queues are advertised periodically to the hosts that are within transmission range or that are reachable by means of the underlying synchronous communication protocol, if provided.",
                "It is important to note that, at the middleware level, it is logically irrelevant whether or not the network layer implements some form of ad-hoc routing (though considerably more efficient if it does); the middleware only considers information about which nodes are actively reachable at any point in time.",
                "The hosts that receive advertisement messages add entries to their JNDI registry.",
                "Each entry is characterized by a lease (a mechanism similar to that present in Jini [15]).",
                "A lease represents the time of validity of a particular entry.",
                "If a lease is not refreshed (i.e, its life is not extended), it can expire and, consequently, the entry is deleted from the registry.",
                "In other words, the host assumes that the queue will be unreachable from that point in time.",
                "This may be caused, for example, if a host storing the queue becomes unreachable.",
                "A host that initiates a discovery process will find the topics and the queues present in its connected portion of the network in a straightforward manner.",
                "In order to deliver a message to a host that is not currently in reach1 , we use an asynchronous epidemic routing protocol that will be discussed in detail in Section 4.2.",
                "If two hosts are in the same cloud (i.e., a connected path exists between them), but no synchronous protocol is available, the messages are sent using the epidemic protocol.",
                "In this case, the delivery latency will be low as a result of the rapidity of propagation of the infection in the connected cloud (see also the simulation results in Section 5).",
                "Given the existence of an epidemic protocol, the discovery mechanism consists of advertising the queues to the hosts that are currently unreachable using analogous mechanisms.",
                "Publish-Subscribe Model In the publish-subscribe model, some of the hosts are similarly designated to hold topics and store subscriptions, as before.",
                "Topics are advertised through the registry in the same way as are queues, and a client wishing to subscribe to a topic must register with the client holding the topic.",
                "When a client wishes to send a message to the topic list, it sends it to the topic holder (in the same way as it would send a message to a queue).",
                "The topic holder then forwards the message to all subscribers, using the synchronous protocol if possible, the epidemic protocol otherwise.",
                "It is worth noting that we use a single message with multiple recipients, instead of multiple messages with multiple recipients.",
                "When a message is delivered to one of the subscribers, this recipient is deleted from the list.",
                "In order to delete the other possible replicas, we employ acknowledgment messages (discussed in Section 4.4), returned in the same way as a normal message.",
                "We have also adapted the concepts of durable and non durable subscriptions for ad-hoc settings.",
                "In fixed platforms, durable subscriptions are maintained during the disconnections of the clients, whether these are intentional or are the result of failures.",
                "In traditional systems, while a durable subscriber is disconnected from the server, it is responsible for storing messages.",
                "When the durable subscriber reconnects, the server sends it all unexpired messages.",
                "The problem is that, in our scenario, disconnections are the norm 1 In theory, it is not possible to send a message to a peer that has never been reachable in the past, since there can be no entry present in the registry.",
                "However, to overcome this possible limitation, we provide a primitive through which information can be added to the registry without using the normal channels. 123 Middleware 2004 Companion rather than the exception.",
                "In other words, we cannot consider disconnections as failures.",
                "For these reasons, we adopt a slightly different semantics.",
                "With respect to durable subscriptions, if a subscriber becomes disconnected, notifications are not stored but are sent using the epidemic protocol rather than the synchronous protocol.",
                "In other words, durable notifications remain valid during the possible disconnections of the subscriber.",
                "On the other hand, if a non-durable subscriber becomes disconnected, its subscription is deleted; in other words, during disconnections, notifications are not sent using the epidemic protocol but exploit only the synchronous protocol.",
                "If the topic becomes accessible to this host again, it must make another subscription in order to receive the notifications.",
                "Unsubscription messages are delivered in the same way as are subscription messages.",
                "It is important to note that durable subscribers have explicitly to unsubscribe from a topic in order to stop the notification process; however, all durable subscriptions have a predefined expiration time in order to cope with the cases of subscribers that do not meet again because of their movements or failures.",
                "This feature is clearly provided to limit the number of the unnecessary messages sent around the network. 4.2 Message Delivery using Epidemic Routing In this section, we examine one possible mechanism that will allow the delivery of messages in a partially connected network.",
                "The mechanism we discuss is intended for the purposes of demonstrating feasibility; more efficient communication mechanisms for this environment are themselves complex, and are the subject of another paper [13].",
                "The asynchronous message delivery described above is based on a typical pure epidemic-style routing protocol [16].",
                "A message that needs to be sent is replicated on each host in reach.",
                "In this way, copies of the messages are quickly spread through connected networks, like an infection.",
                "If a host becomes connected to another cloud of mobile nodes, during its movement, the message spreads through this collection of hosts.",
                "Epidemic-style replication of data and messages has been exploited in the past in many fields starting with the distributed database systems area [2].",
                "Within epidemic routing, each host maintains a buffer containing the messages that it has created and the replicas of the messages generated by the other hosts.",
                "To improve the performance, a hash-table indexes the content of the buffer.",
                "When two hosts connect, the host with the smaller identifier initiates a so-called anti-entropy session, sending a list containing the unique identifiers of the messages that it currently stores.",
                "The other host evaluates this list and sends back a list containing the identifiers it is storing that are not present in the other host, together with the messages that the other does not have.",
                "The host that has started the session receives the list and, in the same way, sends the messages that are not present in the other host.",
                "Should buffer overflow occur, messages are dropped.",
                "The reliability offered by this protocol is typically best effort, since there is no guarantee that a message will eventually be delivered to its recipient.",
                "Clearly, the delivery ratio of the protocol increases proportionally to the maximum allowed delay time and the buffer size in each host (interesting simulation results may be found in [16]). 4.3 Adaptation of the JMS Message Model In this section, we will analyse the aspects of our adaptation of the specification related to the so-called JMS Message Model [5].",
                "According to this, JMS messages are characterised by some properties defined using the header field, which contains values that are used by both clients and providers for their delivery.",
                "The aspects discussed in the remainder of this section are valid for both models (point to point and publish-subscribe).",
                "A JMS message can be persistent or non-persistent.",
                "According to the JMS specification, persistent messages must be delivered with a higher degree of reliability than the nonpersistent ones.",
                "However, it is worth noting that it is not possible to ensure once-and-only-once reliability for persistent messages as defined in the specification, since, as we discussed in the previous subsection, the underlying epidemic protocol can guarantee only best-effort delivery.",
                "However, clients maintain a list of the identifiers of the recently received messages to avoid the delivery of message duplicates.",
                "In other words, we provide the applications with at-mostonce reliability for both types of messages.",
                "In order to implement different levels of reliability, EMMA treats persistent and non-persistent messages differently, during the execution of the anti-entropy epidemic protocol.",
                "Since the message buffer space is limited, persistent messages are preferentially replicated using the available free space.",
                "If this is insufficient and non-persistent messages are present in the buffer, these are replaced.",
                "Only the successful deliveries of the persistent messages are notified to the senders.",
                "According to the JMS specification, it is possible to assign a priority to each message.",
                "The messages with higher priorities are delivered in a preferential way.",
                "As discussed above, persistent messages are prioritised above the non-persistent ones.",
                "Further selection is based on their priorities.",
                "Messages with higher priorities are treated in a preferential way.",
                "In fact, if there is not enough space to replicate all the persistent messages, a mechanism based on priorities is used to delete and replicate non-persistent messages (and, if necessary, persistent messages).",
                "Messages are deleted from the buffers using the expiration time value that can be set by senders.",
                "This is a way to free space in the buffers (one preferentially deletes older messages in cases of conflict); to eliminate stale replicas in the system; and to limit the time for which destinations must hold message identifiers to dispose of duplicates. 4.4 Reliability and Acknowledgment Mechanisms As already discussed, at-most-once message delivery is the best that can be achieved in terms of delivery semantics in partially connected ad-hoc settings.",
                "However, it is possible to improve the reliability of the system with efficient acknowledgment mechanisms.",
                "EMMA provides a mechanism for failure notification to applications if the acknowledgment is not received within a given timeout (that can be configured by application developers).",
                "This mechanism is the one that distinguishes the delivery of persistent and non-persistent messages in our JMS implementation: the deliveries of the former are notified to the senders, whereas the latter are not.",
                "We use acknowledgment messages not only to inform senders about the successful delivery of messages but also to delete the replicas of the delivered messages that are still present in the network.",
                "Each host maintains a list of the messages Middleware for Pervasive and ad-hoc Computing 124 successfully delivered that is updated as part of the normal process of information exchange between the hosts.",
                "The lists are exchanged during the first steps of the anti-entropic epidemic protocol with a certain predefined frequency.",
                "In the case of messages with multiple recipients, a list of the actual recipients is also stored.",
                "When a host receives the list, it checks its message buffer and updates it according to the following rules: (1) if a message has a single recipient and it has been delivered, it is deleted from the buffer; (2) if a message has multiple recipients, the identifiers of the delivered hosts are deleted from the associated list of recipients.",
                "If the resulting length of the list of recipients is zero, the message is deleted from the buffer.",
                "These lists have, clearly, finite dimensions and are implemented as circular queues.",
                "This simple mechanism, together with the use of expiration timestamps, guarantees that the old acknowledgment notifications are deleted from the system after a limited period of time.",
                "In order to improve the reliability of EMMA, a design mechanism for intelligent replication of queues and topics based on the context information could be developed.",
                "However this is not yet part of the current architecture of EMMA. 5.",
                "IMPLEMENTATION AND PRELIMINARY EVALUATION We implemented a prototype of our platform using the J2ME Personal Profile.",
                "The size of the executable is about 250KB including the JMS 1.1 jar file; this is a perfectly acceptable figure given the available memory of the current mobile devices on the market.",
                "We tested our prototype on HP IPaq PDAs running Linux, interconnected with WaveLan, and on a number of laptops with the same network interface.",
                "We also evaluated the middleware platform using the OMNET++ discrete event simulator [17] in order to explore a range of mobile scenarios that incorporated a more realistic number of hosts than was achievable experimentally.",
                "More specifically, we assessed the performance of the system in terms of delivery ratio and average delay, varying the density of population and the buffer size, and using persistent and non-persistent messages with different priorities.",
                "The simulation results show that the EMMAs performance, in terms of delivery ratio and delay of persistent messages with higher priorities, is good.",
                "In general, it is evident that the delivery ratio is strongly related to the correct dimensioning of the buffers to the maximum acceptable delay.",
                "Moreover, the epidemic algorithms are able to guarantee a high delivery ratio if one evaluates performance over a time interval sufficient for the dissemination of the replicas of messages (i.e., the infection spreading) in a large portion of the ad-hoc network.",
                "One consequence of the dimensioning problem is that scalability may be seriously impacted in peer-to-peer middleware for mobile computing due to the resource poverty of the devices (limited memory to store temporarily messages) and the number of possible interconnections in ad-hoc settings.",
                "What is worse is that common forms of commercial and social organisation (six degrees of separation) mean that even modest TTL values on messages will lead to widespread flooding of epidemic messages.",
                "This problem arises because of the lack of intelligence in the epidemic protocol, and can be addressed by selecting carrier nodes for messages with greater care.",
                "The details of this process are, however, outside the scope of this paper (but may be found in [13]) and do not affect the foundation on which the EMMA middleware is based: the ability to deliver messages asynchronously. 6.",
                "CRITICAL VIEW OF THE STATE OF THE ART The design of middleware platforms for mobile computing requires researchers to answer new and fundamentally different questions; simply assuming the presence of wired portions of the network on which centralised functionality can reside is not generalisable.",
                "Thus, it is necessary to investigate novel design principles and to devise architectural patterns that differ from those traditionally exploited in the design of middleware for fixed systems.",
                "As an example, consider the recent cross-layering trend in ad-hoc networking [1].",
                "This is a way of re-thinking software systems design, explicitly abandoning the classical forms of layering, since, although this separation of concerns afford portability, it does so at the expense of potential efficiency gains.",
                "We believe that it is possible to view our approach as an instance of cross-layering.",
                "In fact, we have added the epidemic network protocol at middleware level and, at the same time, we have used the existing synchronous network protocol if present both in delivering messages (traditional layering) and in informing the middleware about when messages may be delivered by revealing details of the forwarding tables (layer violation).",
                "For this reason, we prefer to consider them jointly as the communication layer of our platform together providing more efficient message delivery.",
                "Another interesting aspect is the exploitation of context and system information to improve the performance of mobile middleware platforms.",
                "Again, as a result of adopting a cross-layering methodology, we are able to build systems that gather information from the underlying operating system and communication components in order to allow for adaptation of behaviour.",
                "We can summarise this conceptual design approach by saying that middleware platforms must be not only context-aware (i.e., they should be able to extract and analyse information from the surrounding context) but also system-aware (i.e., they should be able to gather information from the software and hardware components of the mobile system).",
                "A number of middleware systems have been developed to support ad-hoc networking with the use of asynchronous communication (such as LIME, XMIDDLE, STEAM [11]).",
                "In particular, the STEAM platform is an interesting example of event-based middleware for ad-hoc networks, providing location-aware message delivery and an effective solution for event filtering.",
                "A discussion of JMS, and its mobile realisation, has already been conducted in Sections 4 and 2.",
                "The Swiss company Softwired has developed the first JMS middleware for mobile computing, called iBus Mobile [10].",
                "The main components of this typically infrastructure-based architecture are the JMS provider, the so-called mobile JMS gateway, which is deployed on a fixed host and a lightweight JMS client library.",
                "The gateway is used for the communication between the application server and mobile hosts.",
                "The gateway is seen by the JMS provider as a normal JMS client.",
                "The JMS provider can be any JMS-enabled application server, such as BEA Weblogic.",
                "Pronto [19] is an example of mid125 Middleware 2004 Companion dleware system based on messaging that is specifically designed for mobile environments.",
                "The platform is composed of three classes of components: mobile clients implementing the JMS specification, gateways that control traffic, guaranteeing efficiency and possible user customizations using different plug-ins and JMS servers.",
                "Different configurations of these components are possible; with respect to mobile ad hoc networks applications, the most interesting is Serverless JMS.",
                "The aim of this configuration is to adapt JMS to a decentralized model.",
                "The publish-subscribe model exploits the efficiency and the scalability of the underlying IP multicast protocol.",
                "Unreliable and reliable message delivery services are provided: reliability is provided through a negative acknowledgment-based protocol.",
                "Pronto represents a good solution for infrastructure-based mobile networks but it does not adequately target ad-hoc settings, since mobile nodes rely on fixed servers for the exchange of messages.",
                "Other MOM implemented for mobile environments exist; however, they are usually straightforward extensions of existing middleware [8].",
                "The only implementation of MOM specifically designed for mobile ad-hoc networks was developed at the University of Newcastle [18].",
                "This work is again a JMS adaptation; the focus of that implementation is on group communication and the use of application level routing algorithms for topic delivery of messages.",
                "However, there are a number of differences in the focus of our work.",
                "The importance that we attribute to disconnections makes persistence a vital requirement for any middleware that needs to be used in mobile ad-hoc networks.",
                "The authors of [18] signal persistence as possible future work, not considering the fact that routing a message to a non-connected host will result in delivery failure.",
                "This is a remarkable limitation in mobile settings where unpredictable disconnections are the norm rather than the exception. 7.",
                "ROADMAP AND CONCLUSIONS Asynchronous communication is a useful communication paradigm for mobile ad-hoc networks, as hosts are allowed to come, go and pick up messages when convenient, also taking account of their resource availability (e.g., power, connectivity levels).",
                "In this paper we have described the state of the art in terms of MOM for mobile systems.",
                "We have also shown a proof of concept adaptation of JMS to the extreme scenario of partially connected mobile ad-hoc networks.",
                "We have described and discussed the characteristics and differences of our solution with respect to traditional JMS implementations and the existing adaptations for mobile settings.",
                "However, trade-offs between application-level routing and resource usage should also be investigated, as mobile devices are commonly power/resource scarce.",
                "A key limitation of this work is the poorly performing epidemic algorithm and an important advance in the practicability of this work requires an algorithm that better balances the needs of efficiency and message delivery probability.",
                "We are currently working on algorithms and protocols that, exploiting probabilistic and statistical techniques on the basis of small amounts of exchanged information, are able to improve considerably the efficiency in terms of resources (memory, bandwidth, etc) and the reliability of our middleware platform [13].",
                "One futuristic research development, which may take these ideas of adaptation of messaging middleware for mobile environments further is the introduction of more mobility oriented communication extensions, for instance the support of geocast (i.e., the ability to send messages to specific geographical areas). 8.",
                "REFERENCES [1] M. Conti, G. Maselli, G. Turi, and S. Giordano.",
                "Cross-layering in Mobile ad-hoc Network Design.",
                "IEEE Computer, 37(2):48-51, February 2004. [2] A. Demers, D. Greene, C. Hauser, W. Irish, J. Larson, S. Shenker, H. Sturgis, D. Swinehart, and D. Terry.",
                "Epidemic Algorithms for Replicated Database Maintenance.",
                "In Sixth Symposium on Principles of Distributed Computing, pages 1-12, August 1987. [3] A. Doria, M. Uden, and D. P. Pandey.",
                "Providing connectivity to the Saami nomadic community.",
                "In Proceedings of the Second International Conference on Open Collaborative Design for Sustainable Innovation, December 2002. [4] M. Haahr, R. Cunningham, and V. Cahill.",
                "Supporting CORBA applications in a Mobile Environment.",
                "In 5th International Conference on Mobile Computing and Networking (MOBICOM99), pages 36-47.",
                "ACM, August 1999. [5] M. Hapner, R. Burridge, R. Sharma, J. Fialli, and K. Stout.",
                "Java Message Service Specification Version 1.1.",
                "Sun Microsystems, Inc., April 2002. http://java.sun.com/products/jms/. [6] J. Hart.",
                "WebSphere MQ: Connecting your applications without complex programming.",
                "IBM WebSphere Software White Papers, 2003. [7] S. Hayward and M. Pezzini.",
                "Marrying Middleware and Mobile Computing.",
                "Gartner Group Research Report, September 2001. [8] IBM.",
                "WebSphere MQ EveryPlace Version 2.0, November 2002. http://www-3.ibm.com/software/integration/wmqe/. [9] ITU.",
                "Connecting remote communities.",
                "Documents of the World Summit on Information Society, 2003. http://www.itu.int/osg/spu/wsis-themes. [10] S. Maffeis.",
                "Introducing Wireless JMS.",
                "Softwired AG, www.sofwired-inc.com, 2002. [11] C. Mascolo, L. Capra, and W. Emmerich.",
                "Middleware for Mobile Computing.",
                "In E. Gregori, G. Anastasi, and S. Basagni, editors, Advanced Lectures on Networking, volume 2497 of Lecture Notes in Computer Science, pages 20-58.",
                "Springer Verlag, 2002. [12] Microsoft.",
                "Microsoft Message Queuing (MSMQ) Version 2.0 Documentation. [13] M. Musolesi, S. Hailes, and C. Mascolo.",
                "Adaptive routing for intermittently connected mobile ad-hoc networks.",
                "Technical report, UCL-CS Research Note, July 2004.",
                "Submitted for Publication. [14] Sun Microsystems.",
                "Java Naming and Directory Interface (JNDI) Documentation Version 1.2. 2003. http://java.sun.com/products/jndi/. [15] Sun Microsystems.",
                "Jini Specification Version 2.0, 2003. http://java.sun.com/products/jini/. [16] A. Vahdat and D. Becker.",
                "Epidemic routing for Partially Connected ad-hoc Networks.",
                "Technical Report CS-2000-06, Department of Computer Science, Duke University, 2000. [17] A. Vargas.",
                "The OMNeT++ discrete event simulation system.",
                "In Proceedings of the European Simulation Multiconference (ESM2001), Prague, June 2001. [18] E. Vollset, D. Ingham, and P. Ezhilchelvan.",
                "JMS on Mobile ad-hoc Networks.",
                "In Personal Wireless Communications (PWC), pages 40-52, Venice, September 2003. [19] E. Yoneki and J. Bacon.",
                "Pronto: Mobilegateway with publish-subscribe paradigm over wireless network.",
                "Technical Report 559, University of Cambridge, Computer Laboratory, February 2003.",
                "Middleware for Pervasive and ad-hoc Computing 126"
            ],
            "original_annotated_samples": [
                "The <br>java messaging service</br> (JMS) is a collection of interfaces for asynchronous communication between distributed components."
            ],
            "translated_annotated_samples": [
                "El <br>Servicio de Mensajería de Java</br> (JMS) es una colección de interfaces para la comunicación asincrónica entre componentes distribuidos."
            ],
            "translated_text": "Adaptando Middleware de Mensajería Asincrónica a Redes Ad-hoc Mirco Musolesi Dept. Las características de los entornos móviles, con la posibilidad de desconexiones frecuentes y ancho de banda fluctuante, han obligado a replantear el middleware tradicional. En particular, los paradigmas de comunicación síncrona a menudo empleados en middleware estándar no parecen ser particularmente adecuados para entornos ad-hoc, en los que ni siquiera se puede asumir la disponibilidad intermitente de una red troncal. En cambio, la comunicación asincrónica parece ser un paradigma generalmente más adecuado para este tipo de entornos. Se ha desarrollado y utilizado middleware orientado a mensajes para sistemas tradicionales con el fin de proporcionar un paradigma de comunicación asíncrona para sistemas distribuidos, y, recientemente, también para algunos sistemas específicos de computación móvil. En este artículo, presentamos nuestra experiencia en el diseño, implementación y evaluación de EMMA (Middleware de Mensajería Epidémica para redes ad-hoc), una adaptación del Servicio de Mensajes Java (JMS) para entornos móviles ad-hoc. Discutimos en detalle los desafíos de diseño y algunas posibles soluciones, mostrando un ejemplo concreto de la viabilidad y adecuación de la aplicación del paradigma asíncrono en este contexto y delineando un plan de investigación para los próximos años. Categorías y Descriptores de Asignaturas C.2.4 [Redes de Computadoras-Comunicación]: Sistemas Distribuidos-Aplicaciones Distribuidas; C.2.1 [Arquitectura y Diseño de Redes]: Comunicación Inalámbrica Términos Generales DISEÑO, ALGORITMOS 1. INTRODUCCIÓN Con la creciente popularidad de los dispositivos móviles y su amplia adopción, existe una clara necesidad de permitir el desarrollo de un amplio espectro de aplicaciones que operen de manera efectiva en dicho entorno. Lamentablemente, esto está lejos de ser simple: los dispositivos móviles son cada vez más heterogéneos en cuanto a capacidades de procesamiento, tamaño de memoria, capacidad de batería e interfaces de red. Cada una de estas configuraciones tiene características sustancialmente diferentes que son estáticamente distintas, por ejemplo, hay una gran diferencia en la capacidad entre un mote de Berkeley y un portátil equipado con 802.11g, y que varían dinámicamente, como en situaciones de ancho de banda fluctuante y conectividad intermitente. Los entornos móviles ad hoc tienen un elemento adicional de complejidad en que son completamente descentralizados. Para poder desarrollar aplicaciones para entornos tan complejos, es esencial contar con una forma adecuada de middleware si se busca lograr un desarrollo rentable. En este artículo, examinamos uno de los aspectos fundamentales de middleware para entornos móviles ad-hoc: el de los primitivos de comunicación. Tradicionalmente, los primitivos de middleware más utilizados para la comunicación asumen la presencia simultánea de ambos puntos finales en una red, ya que la estabilidad y la ubicuidad de la infraestructura de redes no es una suposición irrazonable para la mayoría de los entornos cableados. En otras palabras, la mayoría de los paradigmas de comunicación son síncronos: middleware orientado a objetos como CORBA y Java RMI son ejemplos típicos de middleware basado en comunicación síncrona. En los últimos años, ha habido un creciente interés en plataformas basadas en paradigmas de comunicación asincrónica, como los sistemas de publicación-suscripción: estos han sido explotados con mucho éxito donde existe asincronía a nivel de aplicación. De acuerdo con un informe de mercado de Gartner [7]: Dada la popularidad, escalabilidad, flexibilidad y afinidad con arquitecturas móviles e inalámbricas de los middlewares orientados a mensajes (MOM), para el año 2004, es probable que MOM se convierta en la forma dominante de middleware de comunicación para vincular aplicaciones móviles y empresariales (probabilidad del 0.7)... Además, en sistemas ad-hoc móviles, la probabilidad de fragmentación de la red significa que la comunicación síncrona puede resultar impracticable en cualquier caso, lo que da lugar a situaciones en las que el tráfico asincrónico tolerante a retrasos es la única forma de tráfico que podría ser admitida. El middleware para entornos ad-hoc móviles debe, por lo tanto, admitir primitivas de comunicación semi-síncronas o completamente asíncronas si se quiere evitar limitaciones sustanciales en su utilidad. Además del desafío intelectual que implica apoyar este modelo, este trabajo también es interesante porque existen varios ámbitos de aplicación práctica al permitir la comunicación entre comunidades en áreas subdesarrolladas del mundo. Por lo tanto, por ejemplo, proyectos que se han llevado a cabo para ayudar a poblaciones que viven en lugares remotos del mundo como Laponia o en áreas pobres que carecen de infraestructura de conectividad fija. Ha habido intentos de proporcionar middleware móvil con estas propiedades, incluyendo STEAM, LIME, XMIDDLE, Bayou (consulte [11] para una revisión más completa del middleware móvil). Estos modelos difieren considerablemente de los middleware tradicionales existentes en cuanto a los primitivos proporcionados. Además, algunos de ellos fallan en proporcionar una solución para los verdaderos escenarios ad-hoc. Si el éxito proyectado de MOM se convierte en algo parecido a la realidad, habrá muchos programadores con experiencia en ello. La solución ideal al problema del middleware para sistemas ad-hoc es, entonces, permitir a los programadores utilizar los mismos paradigmas y modelos presentados por formas comunes de MOM y asegurar que estos paradigmas sean soportables dentro del entorno móvil. Este enfoque tiene claras ventajas al permitir que las aplicaciones desarrolladas en plataformas de middleware estándar se desplieguen fácilmente en dispositivos móviles. De hecho, algunas investigaciones ya han llevado a la adaptación de plataformas de middleware tradicionales a entornos móviles, principalmente para proporcionar integración entre dispositivos móviles y redes fijas existentes en un entorno nómada (es decir, mixto) [4]. En lo que respecta al middleware orientado a mensajes, las implementaciones actuales, sin embargo, asumen la existencia de una red troncal a la que los hosts móviles se conectan de vez en cuando mientras están en itinerancia [10], o asumen que los nodos siempre son de alguna manera accesibles a través de un camino [18]. No se ha intentado ninguna adaptación a escenarios heterogéneos o completamente ad hoc, con desconexiones frecuentes y nubes periódicamente aisladas de hosts. En el resto de este documento describimos un intento inicial de adaptar middleware orientado a mensajes para que se ajuste a dispositivos móviles y, más específicamente, a redes móviles ad-hoc. En nuestro caso, elegimos examinar JMS, como uno de los sistemas MOM más conocidos. En la última parte de este documento, exploramos las limitaciones de nuestros resultados y describimos los planes que tenemos para llevar a cabo el trabajo más adelante. Los sistemas de middleware orientados a mensajes y el Servicio de Mensajes de Java (JMS) admiten la comunicación entre componentes distribuidos a través del paso de mensajes: el remitente envía un mensaje a colas identificadas, que generalmente residen en un servidor. Un receptor recupera el mensaje de la cola en un momento diferente y puede confirmar la respuesta utilizando el mismo mecanismo asíncrono. La middleware orientada a mensajes soporta la comunicación asíncrona de una manera muy natural, logrando el desacoplamiento de emisores y receptores. Un remitente puede continuar procesando tan pronto como el middleware haya aceptado el mensaje; eventualmente, el receptor enviará un mensaje de confirmación y el remitente podrá recogerlo en un momento conveniente. Sin embargo, dado la forma en que están implementados, estos sistemas de middleware suelen requerir dispositivos con recursos abundantes, especialmente en términos de memoria y espacio en disco, donde se almacenan colas persistentes de mensajes que han sido recibidos pero aún no procesados. Sun Java Message Service [5], IBM WebSphere MQ [6], Microsoft MSMQ [12] son ejemplos de middleware orientado a mensajes muy exitosos para sistemas distribuidos tradicionales. El <br>Servicio de Mensajería de Java</br> (JMS) es una colección de interfaces para la comunicación asincrónica entre componentes distribuidos. Proporciona una forma común para que los programas de Java creen, envíen y reciban mensajes. Los usuarios de JMS suelen ser referidos como clientes. La especificación JMS define además a los proveedores como los componentes encargados de implementar el sistema de mensajería y proporcionar la funcionalidad administrativa y de control (es decir, persistencia y confiabilidad) requerida por el sistema. Los clientes pueden enviar y recibir mensajes, de forma asincrónica, a través del proveedor JMS, que se encarga de la entrega y, posiblemente, de la persistencia de los mensajes. Hay dos tipos de comunicación admitidos: modelos punto a punto y de publicación-suscripción. En el modelo punto a punto, los hosts envían mensajes a colas. Los receptores pueden ser registrados con algunas colas específicas, y pueden recuperar los mensajes de forma asíncrona para luego confirmar su recepción. El modelo de publicación-suscripción se basa en el uso de temas a los que los clientes pueden suscribirse. Los mensajes son enviados a los temas por otros clientes y luego son recibidos de forma asíncrona por todos los clientes suscritos. Los clientes aprenden sobre los temas y colas disponibles a través de la Interfaz de Nombres y Directorios de Java (JNDI) [14]. Las colas y los temas son creados por un administrador en el proveedor y se registran con la interfaz JNDI para su búsqueda. En la siguiente sección, presentamos los desafíos de las redes móviles y mostramos cómo JMS puede adaptarse para cumplir con estos requisitos. 3. JMS PARA COMPUTACIÓN MÓVIL Las redes móviles varían mucho en sus características, desde redes nómadas en las que los nodos se desplazan mientras están desconectados, hasta redes ad-hoc en las que los nodos se mueven libremente y no hay infraestructura. Las redes móviles ad-hoc son más comúnmente aplicables en situaciones donde la supervivencia y la capacidad de despliegue instantáneo son clave: especialmente en aplicaciones militares y de ayuda en casos de desastre. Entre estos dos tipos de redes móviles, sin embargo, existen una serie de posibles combinaciones heterogéneas, donde se utilizan paradigmas nómadas y ad-hoc para interconectar áreas totalmente inalámbricas con redes más estructuradas (como una LAN o Internet). Si bien la especificación JMS ha sido ampliamente implementada y utilizada en sistemas distribuidos tradicionales, las adaptaciones para entornos móviles han sido propuestas recientemente. Los desafíos de adaptar JMS a entornos móviles son considerables; sin embargo, dada su amplia aceptación y uso, existen ventajas considerables al permitir la adaptación de aplicaciones existentes a entornos móviles y al permitir la interoperabilidad de aplicaciones en las regiones cableadas e inalámbricas de una red. En [10], JMS se adaptó a un entorno móvil nómada, donde los hosts móviles pueden ser clientes de JMS y comunicarse a través del proveedor de JMS que, sin embargo, se encuentra en una red troncal, proporcionando fiabilidad y persistencia. El prototipo del cliente presentado en [10] es muy ligero, debido a la delegación de toda la funcionalidad pesada al proveedor Middleware para Computación Pervasive y ad-hoc 122 en la red cableada. Sin embargo, este enfoque es algo limitado en términos de aplicabilidad generalizada y escalabilidad como consecuencia de la concentración de funcionalidad en la parte cableada de la red. Si se quiere adaptar JMS a entornos completamente ad hoc, donde no haya infraestructura fija disponible y donde los nodos cambien de ubicación y estado de forma muy dinámica, se deben tener en cuenta más problemas. En primer lugar, el descubrimiento necesita utilizar un modelo resiliente pero distribuido: en este entorno extremadamente dinámico, las soluciones estáticas son inaceptables. Como se discute en la Sección 2, un administrador de JMS define colas y temas en el proveedor. Los clientes pueden entonces aprender sobre ellos utilizando la Interfaz de Nombres y Directorios de Java (JNDI). Sin embargo, debido a la forma en que está diseñado JNDI, es necesario que un nodo de JNDI (o más de uno) esté al alcance para obtener una vinculación de un nombre a una dirección (es decir, saber dónde se encuentra una cola o un tema específico). En entornos móviles ad-hoc, el proceso de descubrimiento no puede asumir la existencia de un conjunto fijo de servidores de descubrimiento que siempre sean accesibles, ya que esto no coincidiría con la dinámica de las redes ad-hoc. En segundo lugar, un Proveedor de JMS, como sugiere la especificación de JMS, también debe ser accesible para cada nodo en la red, para poder comunicarse. Esto asume una arquitectura muy centralizada, que nuevamente no coincide con los requisitos de un entorno ad-hoc móvil, en el que los nodos pueden estar en movimiento y dispersos: se necesita una solución más distribuida y dinámica. La persistencia es, sin embargo, una funcionalidad esencial en entornos de comunicación asincrónica, ya que los hosts están, por definición, conectados en momentos diferentes. En la siguiente sección, discutiremos nuestra experiencia en el diseño e implementación de JMS para redes móviles ad-hoc. 4. El desarrollo de aplicaciones para redes móviles es aún más desafiante: además de las mismas consideraciones que para entornos inalámbricos infraestructurados, como las limitadas capacidades de los dispositivos y las restricciones de energía, existen problemas relacionados con la velocidad de cambio de la conectividad de la red y la falta de una infraestructura de enrutamiento estática. En consecuencia, ahora describimos un intento inicial de adaptar la especificación JMS para satisfacer los requisitos particulares relacionados con escenarios ad-hoc. Como se discute en la Sección 3, una aplicación JMS puede utilizar tanto el estilo de mensajería punto a punto como el de publicación-suscripción. Modelo de punto a punto. El modelo de punto a punto se basa en el concepto de colas, que se utilizan para habilitar la comunicación asincrónica entre el productor de un mensaje y posibles consumidores diferentes. En nuestra solución, la ubicación de las colas se determina mediante un proceso de negociación que depende de la aplicación. Por ejemplo, supongamos que es posible saber a priori, o es posible determinar dinámicamente, que cierto host es el receptor de la mayor parte de los mensajes enviados a una cola particular. En este caso, la ubicación óptima de la cola bien podría estar en este host en particular. En general, vale la pena señalar que, según la especificación de JMS y los patrones de diseño sugeridos, es común y preferible que un cliente tenga todos sus mensajes entregados a una sola cola. Las colas se anuncian periódicamente a los anfitriones que se encuentran dentro del rango de transmisión o que son alcanzables mediante el protocolo de comunicación síncrona subyacente, si se proporciona. Es importante tener en cuenta que, a nivel de middleware, es lógicamente irrelevante si la capa de red implementa alguna forma de enrutamiento ad-hoc (aunque considerablemente más eficiente si lo hace); el middleware solo considera información sobre qué nodos son accesibles activamente en cualquier momento. Los hosts que reciben mensajes publicitarios agregan entradas a su registro JNDI. Cada entrada se caracteriza por un arrendamiento (un mecanismo similar al presente en Jini [15]). Un contrato de arrendamiento representa el tiempo de validez de una entrada particular. Si un arrendamiento no se renueva (es decir, su vida no se extiende), puede vencer y, en consecuencia, la entrada se elimina del registro. En otras palabras, el anfitrión asume que la cola será inaccesible a partir de ese momento. Esto puede ser causado, por ejemplo, si un host que almacena la cola se vuelve inaccesible. Un host que inicia un proceso de descubrimiento encontrará los temas y las colas presentes en su porción conectada de la red de manera directa. Para enviar un mensaje a un anfitrión que actualmente no está al alcance, utilizamos un protocolo de enrutamiento de epidemia asíncrono que se discutirá en detalle en la Sección 4.2. Si dos hosts están en la misma nube (es decir, existe un camino conectado entre ellos), pero no hay disponible un protocolo síncrono, los mensajes se envían utilizando el protocolo epidémico. En este caso, la latencia de entrega será baja como resultado de la rapidez de propagación de la infección en la nube conectada (ver también los resultados de la simulación en la Sección 5). Dado la existencia de un protocolo de epidemia, el mecanismo de descubrimiento consiste en publicitar las colas a los hosts que actualmente son inalcanzables utilizando mecanismos análogos. En el modelo de publicación-suscripción, algunos de los hosts son designados de manera similar para mantener temas y almacenar suscripciones, como antes. Los temas se anuncian a través del registro de la misma manera que las colas, y un cliente que desee suscribirse a un tema debe registrarse con el cliente que tiene el tema. Cuando un cliente desea enviar un mensaje a la lista de temas, lo envía al titular del tema (de la misma manera que enviaría un mensaje a una cola). El titular del tema luego reenvía el mensaje a todos los suscriptores, utilizando el protocolo síncrono si es posible, de lo contrario el protocolo epidémico. Vale la pena señalar que utilizamos un único mensaje con múltiples destinatarios, en lugar de múltiples mensajes con múltiples destinatarios. Cuando un mensaje es entregado a uno de los suscriptores, este destinatario es eliminado de la lista. Para eliminar las posibles réplicas restantes, empleamos mensajes de acuse de recibo (discutidos en la Sección 4.4), devueltos de la misma manera que un mensaje normal. También hemos adaptado los conceptos de suscripciones duraderas y no duraderas para entornos ad-hoc. En las plataformas fijas, las suscripciones duraderas se mantienen durante las desconexiones de los clientes, ya sean intencionales o resultado de fallas. En los sistemas tradicionales, cuando un suscriptor duradero se desconecta del servidor, es responsable de almacenar los mensajes. Cuando el suscriptor duradero se reconecta, el servidor le envía todos los mensajes no caducados. El problema es que, en nuestro escenario, las desconexiones son la norma. En teoría, no es posible enviar un mensaje a un par que nunca ha sido alcanzable en el pasado, ya que no puede haber ninguna entrada presente en el registro. Sin embargo, para superar esta posible limitación, proporcionamos un mecanismo a través del cual la información puede ser añadida al registro sin utilizar los canales normales. 123 Middleware 2004 Companion en lugar de la excepción. En otras palabras, no podemos considerar las desconexiones como fallos. Por estas razones, adoptamos una semántica ligeramente diferente. En lo que respecta a las suscripciones duraderas, si un suscriptor se desconecta, las notificaciones no se almacenan, sino que se envían utilizando el protocolo epidémico en lugar del protocolo síncrono. En otras palabras, las notificaciones duraderas siguen siendo válidas durante las posibles desconexiones del suscriptor. Por otro lado, si un suscriptor no duradero se desconecta, su suscripción se elimina; en otras palabras, durante las desconexiones, las notificaciones no se envían utilizando el protocolo epidémico, sino que solo se aprovecha el protocolo síncrono. Si el tema vuelve a estar accesible para este anfitrión, deberá realizar otra suscripción para recibir las notificaciones. Los mensajes de baja se entregan de la misma manera que los mensajes de suscripción. Es importante tener en cuenta que los suscriptores duraderos deben darse de baja explícitamente de un tema para detener el proceso de notificación; sin embargo, todas las suscripciones duraderas tienen un tiempo de expiración predefinido para hacer frente a los casos de suscriptores que no vuelven a conectarse debido a sus movimientos o fallos. Esta característica se proporciona claramente para limitar el número de mensajes innecesarios enviados por la red. 4.2 Entrega de mensajes utilizando enrutamiento epidémico En esta sección, examinamos un mecanismo posible que permitirá la entrega de mensajes en una red parcialmente conectada. El mecanismo que discutimos está destinado a demostrar viabilidad; los mecanismos de comunicación más eficientes para este entorno son complejos por sí mismos y son el tema de otro artículo [13]. La entrega de mensajes asincrónica descrita anteriormente se basa en un protocolo de enrutamiento de estilo epidémico puro típico [16]. Un mensaje que necesita ser enviado se replica en cada host al alcance. De esta manera, las copias de los mensajes se propagan rápidamente a través de redes conectadas, como una infección. Si un anfitrión se conecta a otra nube de nodos móviles durante su movimiento, el mensaje se propaga a través de esta colección de anfitriones. La replicación de datos y mensajes en estilo epidémico ha sido explotada en el pasado en muchos campos, comenzando por el área de sistemas de bases de datos distribuidas [2]. Dentro del enrutamiento epidémico, cada anfitrión mantiene un búfer que contiene los mensajes que ha creado y las réplicas de los mensajes generados por los otros anfitriones. Para mejorar el rendimiento, una tabla hash indexa el contenido del búfer. Cuando dos anfitriones se conectan, el anfitrión con el identificador más pequeño inicia una sesión de anti-entropía, enviando una lista que contiene los identificadores únicos de los mensajes que actualmente almacena. El otro anfitrión evalúa esta lista y envía de vuelta una lista que contiene los identificadores que está almacenando y que no están presentes en el otro anfitrión, junto con los mensajes que el otro no tiene. El anfitrión que ha iniciado la sesión recibe la lista y, de la misma manera, envía los mensajes que no están presentes en el otro anfitrión. En caso de producirse un desbordamiento de búfer, los mensajes se descartan. La fiabilidad ofrecida por este protocolo es generalmente de mejor esfuerzo, ya que no hay garantía de que un mensaje finalmente sea entregado a su destinatario. Claramente, la proporción de entrega del protocolo aumenta proporcionalmente al tiempo máximo de retraso permitido y al tamaño del búfer en cada host (pueden encontrarse resultados interesantes de simulación en [16]). 4.3 Adaptación del Modelo de Mensajes JMS En esta sección, analizaremos los aspectos de nuestra adaptación de la especificación relacionados con el llamado Modelo de Mensajes JMS [5]. Según esto, los mensajes JMS se caracterizan por algunas propiedades definidas utilizando el campo de encabezado, que contiene valores que son utilizados tanto por los clientes como por los proveedores para su entrega. Los aspectos discutidos en el resto de esta sección son válidos para ambos modelos (punto a punto y publicar-suscribir). Un mensaje JMS puede ser persistente o no persistente. Según la especificación de JMS, los mensajes persistentes deben entregarse con un grado de confiabilidad mayor que los no persistentes. Sin embargo, vale la pena señalar que no es posible garantizar la fiabilidad de una sola vez para mensajes persistentes según lo definido en la especificación, ya que, como discutimos en la subsección anterior, el protocolo epidémico subyacente solo puede garantizar la entrega de mejor esfuerzo. Sin embargo, los clientes mantienen una lista de los identificadores de los mensajes recibidos recientemente para evitar la entrega de mensajes duplicados. En otras palabras, proporcionamos a las aplicaciones una fiabilidad inmediata para ambos tipos de mensajes. Para implementar diferentes niveles de confiabilidad, EMMA trata de manera diferente los mensajes persistentes y no persistentes durante la ejecución del protocolo epidémico de anti-entropía. Dado que el espacio del búfer de mensajes es limitado, los mensajes persistentes se replican preferentemente utilizando el espacio libre disponible. Si esto es insuficiente y hay mensajes no persistentes presentes en el búfer, estos son reemplazados. Solo se notifican a los remitentes las entregas exitosas de los mensajes persistentes. Según la especificación de JMS, es posible asignar una prioridad a cada mensaje. Los mensajes con prioridades más altas se entregan de manera preferencial. Como se discutió anteriormente, los mensajes persistentes tienen prioridad sobre los no persistentes. La selección adicional se basa en sus prioridades. Los mensajes con prioridades más altas son tratados de manera preferencial. De hecho, si no hay suficiente espacio para replicar todos los mensajes persistentes, se utiliza un mecanismo basado en prioridades para eliminar y replicar los mensajes no persistentes (y, si es necesario, los mensajes persistentes). Los mensajes se eliminan de los buffers utilizando el valor de tiempo de expiración que puede ser establecido por los remitentes. Esta es una forma de liberar espacio en los búferes (se eliminan preferentemente los mensajes más antiguos en casos de conflicto); para eliminar réplicas obsoletas en el sistema; y para limitar el tiempo durante el cual los destinos deben mantener los identificadores de mensajes para desechar duplicados. Mecanismos de fiabilidad y de acuse de recibo Como ya se discutió, la entrega de mensajes como máximo una vez es lo mejor que se puede lograr en términos de semántica de entrega en entornos ad-hoc parcialmente conectados. Sin embargo, es posible mejorar la confiabilidad del sistema con mecanismos de acuse de recibo eficientes. EMMA proporciona un mecanismo de notificación de fallos a las aplicaciones si no se recibe el acuse de recibo dentro de un tiempo límite dado (que puede ser configurado por los desarrolladores de aplicaciones). Este mecanismo es el que distingue la entrega de mensajes persistentes y no persistentes en nuestra implementación de JMS: las entregas de los primeros son notificadas a los remitentes, mientras que los de los segundos no lo son. Utilizamos mensajes de acuse de recibo no solo para informar a los remitentes sobre la entrega exitosa de los mensajes, sino también para eliminar las réplicas de los mensajes entregados que aún están presentes en la red. Cada anfitrión mantiene una lista de los mensajes Middleware para la Computación Pervasiva y Ad-hoc 124 entregados con éxito que se actualiza como parte del proceso normal de intercambio de información entre los anfitriones. Las listas se intercambian durante los primeros pasos del protocolo de epidemia anti-entropía con una frecuencia predefinida. En el caso de mensajes con múltiples destinatarios, también se almacena una lista de los destinatarios reales. Cuando un anfitrión recibe la lista, verifica su búfer de mensajes y lo actualiza de acuerdo con las siguientes reglas: (1) si un mensaje tiene un único destinatario y ha sido entregado, se elimina del búfer; (2) si un mensaje tiene múltiples destinatarios, se eliminan los identificadores de los anfitriones a los que se ha entregado de la lista de destinatarios asociada. Si la longitud resultante de la lista de destinatarios es cero, el mensaje se elimina del búfer. Estas listas tienen, claramente, dimensiones finitas y se implementan como colas circulares. Este mecanismo simple, junto con el uso de marcas de tiempo de expiración, garantiza que las antiguas notificaciones de acuse de recibo sean eliminadas del sistema después de un período de tiempo limitado. Para mejorar la confiabilidad de EMMA, se podría desarrollar un mecanismo de diseño para la replicación inteligente de colas y temas basado en la información de contexto. Sin embargo, esto aún no forma parte de la arquitectura actual de EMMA. 5. IMPLEMENTACIÓN Y EVALUACIÓN PRELIMINAR Implementamos un prototipo de nuestra plataforma utilizando el Perfil Personal J2ME. El tamaño del ejecutable es de aproximadamente 250KB, incluido el archivo jar de JMS 1.1; esta es una cifra perfectamente aceptable dada la memoria disponible de los dispositivos móviles actuales en el mercado. Probamos nuestro prototipo en PDAs HP iPaq con Linux, interconectados con WaveLan, y en varios laptops con la misma interfaz de red. También evaluamos la plataforma de middleware utilizando el simulador de eventos discretos OMNET++ [17] para explorar una variedad de escenarios móviles que incorporaban un número más realista de hosts que el que se podía lograr experimentalmente. Más específicamente, evaluamos el rendimiento del sistema en términos de ratio de entrega y retraso promedio, variando la densidad de población y el tamaño del búfer, y utilizando mensajes persistentes y no persistentes con diferentes prioridades. Los resultados de la simulación muestran que el rendimiento de EMMAs, en términos de ratio de entrega y retraso de mensajes persistentes con prioridades más altas, es bueno. En general, es evidente que la proporción de entrega está fuertemente relacionada con el dimensionamiento correcto de los búferes para el retraso máximo aceptable. Además, los algoritmos epidémicos son capaces de garantizar una alta tasa de entrega si se evalúa el rendimiento durante un intervalo de tiempo suficiente para la difusión de las réplicas de los mensajes (es decir, la propagación de la infección) en una gran parte de la red ad-hoc. Una consecuencia del problema de dimensionamiento es que la escalabilidad puede verse seriamente afectada en middleware peer-to-peer para computación móvil debido a la escasez de recursos de los dispositivos (memoria limitada para almacenar temporalmente mensajes) y al número de posibles interconexiones en entornos ad-hoc. Lo peor es que las formas comunes de organización comercial y social (seis grados de separación) significan que incluso valores modestos de TTL en los mensajes provocarán una difusión generalizada de mensajes epidémicos. Este problema surge debido a la falta de inteligencia en el protocolo de la epidemia, y puede ser abordado seleccionando nodos portadores para los mensajes con mayor cuidado. Sin embargo, los detalles de este proceso están fuera del alcance de este documento (pero pueden encontrarse en [13]) y no afectan la base en la que se basa el middleware EMMA: la capacidad de entregar mensajes de forma asincrónica. 6. VISIÓN CRÍTICA DEL ESTADO DEL ARTE El diseño de plataformas de middleware para la computación móvil requiere que los investigadores respondan a preguntas nuevas y fundamentalmente diferentes; simplemente asumir la presencia de porciones cableadas de la red en las que pueda residir la funcionalidad centralizada no es generalizable. Por lo tanto, es necesario investigar nuevos principios de diseño y idear patrones arquitectónicos que difieran de los tradicionalmente utilizados en el diseño de middleware para sistemas fijos. Como ejemplo, considera la reciente tendencia de superposición de capas en redes ad-hoc [1]. Esta es una forma de replantear el diseño de sistemas de software, abandonando explícitamente las formas clásicas de estratificación, ya que, aunque esta separación de preocupaciones permite la portabilidad, lo hace a expensas de posibles ganancias de eficiencia. Creemos que es posible ver nuestro enfoque como una instancia de superposición de capas. De hecho, hemos añadido el protocolo de red epidémica a nivel de middleware y, al mismo tiempo, hemos utilizado el protocolo de red síncrono existente si está presente tanto en la entrega de mensajes (capas tradicionales) como en informar al middleware sobre cuándo pueden entregarse los mensajes revelando detalles de las tablas de reenvío (violación de capas). Por esta razón, preferimos considerarlos conjuntamente como la capa de comunicación de nuestra plataforma, proporcionando juntos una entrega de mensajes más eficiente. Otro aspecto interesante es la explotación del contexto y la información del sistema para mejorar el rendimiento de las plataformas de middleware móvil. Una vez más, como resultado de adoptar una metodología de capas cruzadas, podemos construir sistemas que recopilan información del sistema operativo subyacente y los componentes de comunicación para permitir la adaptación del comportamiento. Podemos resumir este enfoque de diseño conceptual diciendo que las plataformas de middleware deben ser no solo conscientes del contexto (es decir, deben ser capaces de extraer y analizar información del contexto circundante) sino también conscientes del sistema (es decir, deben ser capaces de recopilar información de los componentes de software y hardware del sistema móvil). Se han desarrollado varios sistemas de middleware para admitir redes ad hoc con el uso de comunicación asíncrona (como LIME, XMIDDLE, STEAM [11]). En particular, la plataforma STEAM es un ejemplo interesante de middleware basado en eventos para redes ad hoc, que proporciona entrega de mensajes con conciencia de ubicación y una solución efectiva para el filtrado de eventos. Una discusión sobre JMS, y su realización móvil, ya ha sido realizada en las Secciones 4 y 2. La empresa suiza Softwired ha desarrollado el primer middleware JMS para computación móvil, llamado iBus Mobile [10]. Los componentes principales de esta arquitectura típicamente basada en infraestructura son el proveedor de JMS, la llamada puerta de enlace móvil de JMS, que se despliega en un host fijo y una biblioteca de cliente JMS ligera. El gateway se utiliza para la comunicación entre el servidor de aplicaciones y los dispositivos móviles. El proveedor JMS ve la pasarela como un cliente JMS normal. El proveedor JMS puede ser cualquier servidor de aplicaciones habilitado para JMS, como BEA Weblogic. Pronto [19] es un ejemplo de un sistema de middleware basado en mensajería, diseñado específicamente para entornos móviles. La plataforma está compuesta por tres clases de componentes: clientes móviles que implementan la especificación JMS, pasarelas que controlan el tráfico, garantizando eficiencia y posibles personalizaciones de usuario utilizando diferentes complementos y servidores JMS. Diferentes configuraciones de estos componentes son posibles; con respecto a las aplicaciones de redes móviles ad hoc, la más interesante es Serverless JMS. El objetivo de esta configuración es adaptar JMS a un modelo descentralizado. El modelo de publicación-suscripción explota la eficiencia y la escalabilidad del protocolo de multidifusión IP subyacente. Se proporcionan servicios de entrega de mensajes poco confiables y confiables: la confiabilidad se logra a través de un protocolo basado en acuse de recibo negativo. Pronto representa una buena solución para redes móviles basadas en infraestructura, pero no se dirige adecuadamente a entornos ad-hoc, ya que los nodos móviles dependen de servidores fijos para el intercambio de mensajes. Existen otras MOM implementadas para entornos móviles; sin embargo, suelen ser extensiones sencillas de middleware existente [8]. La única implementación de MOM específicamente diseñada para redes móviles ad-hoc fue desarrollada en la Universidad de Newcastle [18]. Este trabajo es nuevamente una adaptación de JMS; el enfoque de esa implementación se centra en la comunicación de grupo y el uso de algoritmos de enrutamiento a nivel de aplicación para la entrega de mensajes por tema. Sin embargo, hay una serie de diferencias en el enfoque de nuestro trabajo. La importancia que atribuimos a las desconexiones hace que la persistencia sea un requisito vital para cualquier middleware que necesite ser utilizado en redes móviles ad-hoc. Los autores de [18] señalan la persistencia como un posible trabajo futuro, sin considerar el hecho de que enrutar un mensaje a un host no conectado resultará en un fallo de entrega. Esta es una limitación notable en entornos móviles donde las desconexiones impredecibles son la norma en lugar de la excepción. 7. MAPA Y CONCLUSIONES La comunicación asincrónica es un paradigma de comunicación útil para las redes móviles ad-hoc, ya que permite a los hosts llegar, irse y recoger mensajes cuando sea conveniente, teniendo en cuenta también la disponibilidad de sus recursos (por ejemplo, energía, niveles de conectividad). En este artículo hemos descrito el estado del arte en términos de MOM para sistemas móviles. También hemos demostrado una adaptación de prueba de concepto de JMS al escenario extremo de redes móviles ad-hoc parcialmente conectadas. Hemos descrito y discutido las características y diferencias de nuestra solución con respecto a las implementaciones tradicionales de JMS y las adaptaciones existentes para entornos móviles. Sin embargo, también se deben investigar los compromisos entre el enrutamiento a nivel de aplicación y el uso de recursos, ya que los dispositivos móviles suelen tener escasez de energía/recursos. Una limitación clave de este trabajo es el algoritmo epidémico que tiene un rendimiento deficiente y un avance importante en la practicabilidad de este trabajo requiere un algoritmo que equilibre mejor las necesidades de eficiencia y probabilidad de entrega de mensajes. Actualmente estamos trabajando en algoritmos y protocolos que, aprovechando técnicas probabilísticas y estadísticas sobre la base de pequeñas cantidades de información intercambiada, son capaces de mejorar considerablemente la eficiencia en términos de recursos (memoria, ancho de banda, etc.) y la confiabilidad de nuestra plataforma de middleware [13]. Un desarrollo de investigación futurista, que podría llevar estas ideas de adaptación de middleware de mensajería para entornos móviles más allá, es la introducción de extensiones de comunicación más orientadas a la movilidad, como el soporte de geocast (es decir, la capacidad de enviar mensajes a áreas geográficas específicas). REFERENCIAS [1] M. Conti, G. Maselli, G. Turi y S. Giordano. Diseño de redes móviles ad-hoc con interconexión de capas. IEEE Computer, 37(2):48-51, febrero de 2004. [2] A. Demers, D. Greene, C. Hauser, W. Irish, J. Larson, S. Shenker, H. Sturgis, D. Swinehart y D. Terry. Algoritmos de epidemia para el mantenimiento de bases de datos replicadas. En el Sexto Simposio sobre Principios de Computación Distribuida, páginas 1-12, agosto de 1987. [3] A. Doria, M. Uden y D. P. Pandey. Proporcionando conectividad a la comunidad nómada Saami. En Actas de la Segunda Conferencia Internacional sobre Diseño Colaborativo Abierto para la Innovación Sostenible, diciembre de 2002. [4] M. Haahr, R. Cunningham y V. Cahill. Aplicaciones CORBA en un entorno móvil. En la 5ª Conferencia Internacional sobre Computación y Redes Móviles (MOBICOM99), páginas 36-47. ACM, agosto de 1999. [5] M. Hapner, R. Burridge, R. Sharma, J. Fialli y K. Stout. Especificación del Servicio de Mensajes Java Versión 1.1. Sun Microsystems, Inc., abril de 2002. http://java.sun.com/products/jms/. [6] J. Hart. WebSphere MQ: Conectando sus aplicaciones sin programación compleja. IBM WebSphere Software White Papers, 2003. [7] S. Hayward y M. Pezzini. Casando Middleware y Computación Móvil. Informe de investigación del Grupo Gartner, septiembre de 2001. [8] IBM. WebSphere MQ EveryPlace Versión 2.0, noviembre de 2002. http://www-3.ibm.com/software/integration/wmqe/. [9] UIT. Conectando comunidades remotas. Documentos de la Cumbre Mundial sobre la Sociedad de la Información, 2003. http://www.itu.int/osg/spu/wsis-themes. [10] S. Maffeis. Presentando JMS inalámbrico. Softwired AG, www.sofwired-inc.com, 2002. [11] C. Mascolo, L. Capra y W. Emmerich. Middleware para Computación Móvil. En E. Gregori, G. Anastasi y S. Basagni, editores, Conferencias Avanzadas sobre Redes, volumen 2497 de las Notas de Conferencias en Ciencias de la Computación, páginas 20-58. Springer Verlag, 2002. [12] Microsoft. \n\nSpringer Verlag, 2002. [12] Microsoft. Documentación de Microsoft Message Queuing (MSMQ) Versión 2.0. [13] M. Musolesi, S. Hailes y C. Mascolo. Enrutamiento adaptativo para redes ad-hoc móviles intermitentemente conectadas. Informe técnico, Nota de Investigación UCL-CS, julio de 2004. Enviado para su publicación. [14] Sun Microsystems. Documentación de Java Naming and Directory Interface (JNDI) Versión 1.2. 2003. http://java.sun.com/products/jndi/. [15] Sun Microsystems. Especificación de Jini Versión 2.0, 2003. http://java.sun.com/products/jini/. [16] A. Vahdat y D. Becker. Enrutamiento epidémico para redes ad-hoc parcialmente conectadas. Informe técnico CS-2000-06, Departamento de Ciencias de la Computación, Universidad de Duke, 2000. [17] A. Vargas. El sistema de simulación de eventos discretos OMNeT++. En Actas de la Multiconferencia Europea de Simulación (ESM2001), Praga, junio de 2001. [18] E. Vollset, D. Ingham y P. Ezhilchelvan. JMS en redes móviles ad-hoc. En Comunicaciones Inalámbricas Personales (PWC), páginas 40-52, Venecia, septiembre de 2003. [19] E. Yoneki y J. Bacon. Pronto: Mobilegateway con paradigma de publicación-suscripción sobre red inalámbrica. Informe Técnico 559, Universidad de Cambridge, Laboratorio de Computación, febrero de 2003. Middleware para Computación Pervasive y ad-hoc 126 ",
            "candidates": [],
            "error": [
                [
                    ""
                ]
            ]
        },
        "asynchronous communication": {
            "translated_key": "comunicación asincrónica",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Adapting Asynchronous Messaging Middleware to ad-hoc Networking Mirco Musolesi Dept.",
                "of Computer Science, University College London Gower Street, London WC1E 6BT, United Kingdom m.musolesi@cs.ucl.ac.uk Cecilia Mascolo Dept. of Computer Science, University College London Gower Street, London WC1E 6BT, United Kingdom c.mascolo@cs.ucl.ac.uk Stephen Hailes Dept. of Computer Science, University College London Gower Street, London WC1E 6BT, United Kingdom s.hailes@cs.ucl.ac.uk ABSTRACT The characteristics of mobile environments, with the possibility of frequent disconnections and fluctuating bandwidth, have forced a rethink of traditional middleware.",
                "In particular, the synchronous communication paradigms often employed in standard middleware do not appear to be particularly suited to ad-hoc environments, in which not even the intermittent availability of a backbone network can be assumed.",
                "Instead, <br>asynchronous communication</br> seems to be a generally more suitable paradigm for such environments.",
                "Message oriented middleware for traditional systems has been developed and used to provide an asynchronous paradigm of communication for distributed systems, and, recently, also for some specific mobile computing systems.",
                "In this paper, we present our experience in designing, implementing and evaluating EMMA (Epidemic Messaging Middleware for ad-hoc networks), an adaptation of Java Message Service (JMS) for mobile ad-hoc environments.",
                "We discuss in detail the design challenges and some possible solutions, showing a concrete example of the feasibility and suitability of the application of the asynchronous paradigm in this setting and outlining a research roadmap for the coming years.",
                "Categories and Subject Descriptors C.2.4 [Computer-Communication Networks]: Distributed Systems-Distributed Applications; C.2.1 [Network Architecture and Design]: Wireless Communication General Terms DESIGN, ALGORITHMS 1.",
                "INTRODUCTION With the increasing popularity of mobile devices and their widespread adoption, there is a clear need to allow the development of a broad spectrum of applications that operate effectively over such an environment.",
                "Unfortunately, this is far from simple: mobile devices are increasingly heterogeneous in terms of processing capabilities, memory size, battery capacity, and network interfaces.",
                "Each such configuration has substantially different characteristics that are both statically different - for example, there is a major difference in capability between a Berkeley mote and an 802.11g-equipped laptop - and that vary dynamically, as in situations of fluctuating bandwidth and intermittent connectivity.",
                "Mobile ad hoc environments have an additional element of complexity in that they are entirely decentralised.",
                "In order to craft applications for such complex environments, an appropriate form of middleware is essential if cost effective development is to be achieved.",
                "In this paper, we examine one of the foundational aspects of middleware for mobile ad-hoc environments: that of the communication primitives.",
                "Traditionally, the most frequently used middleware primitives for communication assume the simultaneous presence of both end points on a network, since the stability and pervasiveness of the networking infrastructure is not an unreasonable assumption for most wired environments.",
                "In other words, most communication paradigms are synchronous: object oriented middleware such as CORBA and Java RMI are typical examples of middleware based on synchronous communication.",
                "In recent years, there has been growing interest in platforms based on <br>asynchronous communication</br> paradigms, such as publish-subscribe systems [6]: these have been exploited very successfully where there is application level asynchronicity.",
                "From a Gartner Market Report [7]: Given messageoriented-middlewares (MOM) popularity, scalability, flexibility, and affinity with mobile and wireless architectures, by 2004, MOM will emerge as the dominant form of communication middleware for linking mobile and enterprise applications (0.7 probability)....",
                "Moreover, in mobile ad-hoc systems, the likelihood of network fragmentation means that synchronous communication may in any case be impracticable, giving situations in which delay tolerant asynchronous traffic is the only form of traffic that could be supported. 121 Middleware 2004 Companion Middleware for mobile ad-hoc environments must therefore support semi-synchronous or completely <br>asynchronous communication</br> primitives if it is to avoid substantial limitations to its utility.",
                "Aside from the intellectual challenge in supporting this model, this work is also interesting because there are a number of practical application domains in allowing inter-community communication in undeveloped areas of the globe.",
                "Thus, for example, projects that have been carried out to help populations that live in remote places of the globe such as Lapland [3] or in poor areas that lack fixed connectivity infrastructure [9].",
                "There have been attempts to provide mobile middleware with these properties, including STEAM, LIME, XMIDDLE, Bayou (see [11] for a more complete review of mobile middleware).",
                "These models differ quite considerably from the existing traditional middleware in terms of primitives provided.",
                "Furthermore, some of them fail in providing a solution for the true ad-hoc scenarios.",
                "If the projected success of MOM becomes anything like a reality, there will be many programmers with experience of it.",
                "The ideal solution to the problem of middleware for ad-hoc systems is, then, to allow programmers to utilise the same paradigms and models presented by common forms of MOM and to ensure that these paradigms are supportable within the mobile environment.",
                "This approach has clear advantages in allowing applications developed on standard middleware platforms to be easily deployed on mobile devices.",
                "Indeed, some research has already led to the adaptation of traditional middleware platforms to mobile settings, mainly to provide integration between mobile devices and existing fixed networks in a nomadic (i.e., mixed) environment [4].",
                "With respect to message oriented middleware, the current implementations, however, either assume the existence of a backbone network to which the mobile hosts connect from time to time while roaming [10], or assume that nodes are always somehow reachable through a path [18].",
                "No adaptation to heterogeneous or completely ad-hoc scenarios, with frequent disconnection and periodically isolated clouds of hosts, has been attempted.",
                "In the remainder of this paper we describe an initial attempt to adapt message oriented middleware to suit mobile and, more specifically, mobile ad-hoc networks.",
                "In our case, we elected to examine JMS, as one of the most widely known MOM systems.",
                "In the latter part of this paper, we explore the limitations of our results and describe the plans we have to take the work further. 2.",
                "MESSAGE ORIENTED MIDDLEWARE AND JAVA MESSAGE SERVICE (JMS) Message-oriented middleware systems support communication between distributed components via message-passing: the sender sends a message to identified queues, which usually reside on a server.",
                "A receiver retrieves the message from the queue at a different time and may acknowledge the reply using the same asynchronous mechanism.",
                "Message-oriented middleware thus supports <br>asynchronous communication</br> in a very natural way, achieving de-coupling of senders and receivers.",
                "A sender is able to continue processing as soon as the middleware has accepted the message; eventually, the receiver will send an acknowledgment message and the sender will be able to collect it at a convenient time.",
                "However, given the way they are implemented, these middleware systems usually require resource-rich devices, especially in terms of memory and disk space, where persistent queues of messages that have been received but not yet processed, are stored.",
                "Sun Java Message Service [5], IBM WebSphere MQ [6], Microsoft MSMQ [12] are examples of very successful message-oriented middleware for traditional distributed systems.",
                "The Java Messaging Service (JMS) is a collection of interfaces for <br>asynchronous communication</br> between distributed components.",
                "It provides a common way for Java programs to create, send and receive messages.",
                "JMS users are usually referred to as clients.",
                "The JMS specification further defines providers as the components in charge of implementing the messaging system and providing the administrative and control functionality (i.e., persistence and reliability) required by the system.",
                "Clients can send and receive messages, asynchronously, through the JMS provider, which is in charge of the delivery and, possibly, of the persistence of the messages.",
                "There are two types of communication supported: point to point and publish-subscribe models.",
                "In the point to point model, hosts send messages to queues.",
                "Receivers can be registered with some specific queues, and can asynchronously retrieve the messages and then acknowledge them.",
                "The publish-subscribe model is based on the use of topics that can be subscribed to by clients.",
                "Messages are sent to topics by other clients and are then received in an asynchronous mode by all the subscribed clients.",
                "Clients learn about the available topics and queues through Java Naming and Directory Interface (JNDI) [14].",
                "Queues and topics are created by an administrator on the provider and are registered with the JNDI interface for look-up.",
                "In the next section, we introduce the challenges of mobile networks, and show how JMS can be adapted to cope with these requirements. 3.",
                "JMS FOR MOBILE COMPUTING Mobile networks vary very widely in their characteristics, from nomadic networks in which modes relocate whilst offline through to ad-hoc networks in which modes move freely and in which there is no infrastructure.",
                "Mobile ad-hoc networks are most generally applicable in situations where survivability and instant deployability are key: most notably in military applications and disaster relief.",
                "In between these two types of mobile networks, there are, however, a number of possible heterogeneous combinations, where nomadic and ad-hoc paradigms are used to interconnect totally unwired areas to more structured networks (such as a LAN or the Internet).",
                "Whilst the JMS specification has been extensively implemented and used in traditional distributed systems, adaptations for mobile environments have been proposed only recently.",
                "The challenges of porting JMS to mobile settings are considerable; however, in view of its widespread acceptance and use, there are considerable advantages in allowing the adaptation of existing applications to mobile environments and in allowing the interoperation of applications in the wired and wireless regions of a network.",
                "In [10], JMS was adapted to a nomadic mobile setting, where mobile hosts can be JMS clients and communicate through the JMS provider that, however, sits on a backbone network, providing reliability and persistence.",
                "The client prototype presented in [10] is very lightweight, due to the delegation of all the heavyweight functionality to the Middleware for Pervasive and ad-hoc Computing 122 provider on the wired network.",
                "However, this approach is somewhat limited in terms of widespread applicability and scalability as a consequence of the concentration of functionality in the wired portion of the network.",
                "If JMS is to be adapted to completely ad-hoc environments, where no fixed infrastructure is available, and where nodes change location and status very dynamically, more issues must be taken into consideration.",
                "Firstly, discovery needs to use a resilient but distributed model: in this extremely dynamic environment, static solutions are unacceptable.",
                "As discussed in Section 2, a JMS administrator defines queues and topics on the provider.",
                "Clients can then learn about them using the Java Naming and Directory Interface (JNDI).",
                "However, due to the way JNDI is designed, a JNDI node (or more than one) needs to be in reach in order to obtain a binding of a name to an address (i.e., knowing where a specific queue/topic is).",
                "In mobile ad-hoc environments, the discovery process cannot assume the existence of a fixed set of discovery servers that are always reachable, as this would not match the dynamicity of ad-hoc networks.",
                "Secondly, a JMS Provider, as suggested by the JMS specification, also needs to be reachable by each node in the network, in order to communicate.",
                "This assumes a very centralised architecture, which again does not match the requirements of a mobile ad-hoc setting, in which nodes may be moving and sparse: a more distributed and dynamic solution is needed.",
                "Persistence is, however, essential functionality in <br>asynchronous communication</br> environments as hosts are, by definition, connected at different times.",
                "In the following section, we will discuss our experience in designing and implementing JMS for mobile ad-hoc networks. 4.",
                "JMSFOR MOBILE ad-hoc NETWORKS 4.1 Adaptation of JMS for Mobile ad-hoc Networks Developing applications for mobile networks is yet more challenging: in addition to the same considerations as for infrastructured wireless environments, such as the limited device capabilities and power constraints, there are issues of rate of change of network connectivity, and the lack of a static routing infrastructure.",
                "Consequently, we now describe an initial attempt to adapt the JMS specification to target the particular requirements related to ad-hoc scenarios.",
                "As discussed in Section 3, a JMS application can use either the point to point and the publish-subscribe styles of messaging.",
                "Point to Point Model The point to point model is based on the concept of queues, that are used to enable <br>asynchronous communication</br> between the producer of a message and possible different consumers.",
                "In our solution, the location of queues is determined by a negotiation process that is application dependent.",
                "For example, let us suppose that it is possible to know a priori, or it is possible to determine dynamically, that a certain host is the receiver of the most part of messages sent to a particular queue.",
                "In this case, the optimum location of the queue may well be on this particular host.",
                "In general, it is worth noting that, according to the JMS specification and suggested design patterns, it is common and preferable for a client to have all of its messages delivered to a single queue.",
                "Queues are advertised periodically to the hosts that are within transmission range or that are reachable by means of the underlying synchronous communication protocol, if provided.",
                "It is important to note that, at the middleware level, it is logically irrelevant whether or not the network layer implements some form of ad-hoc routing (though considerably more efficient if it does); the middleware only considers information about which nodes are actively reachable at any point in time.",
                "The hosts that receive advertisement messages add entries to their JNDI registry.",
                "Each entry is characterized by a lease (a mechanism similar to that present in Jini [15]).",
                "A lease represents the time of validity of a particular entry.",
                "If a lease is not refreshed (i.e, its life is not extended), it can expire and, consequently, the entry is deleted from the registry.",
                "In other words, the host assumes that the queue will be unreachable from that point in time.",
                "This may be caused, for example, if a host storing the queue becomes unreachable.",
                "A host that initiates a discovery process will find the topics and the queues present in its connected portion of the network in a straightforward manner.",
                "In order to deliver a message to a host that is not currently in reach1 , we use an asynchronous epidemic routing protocol that will be discussed in detail in Section 4.2.",
                "If two hosts are in the same cloud (i.e., a connected path exists between them), but no synchronous protocol is available, the messages are sent using the epidemic protocol.",
                "In this case, the delivery latency will be low as a result of the rapidity of propagation of the infection in the connected cloud (see also the simulation results in Section 5).",
                "Given the existence of an epidemic protocol, the discovery mechanism consists of advertising the queues to the hosts that are currently unreachable using analogous mechanisms.",
                "Publish-Subscribe Model In the publish-subscribe model, some of the hosts are similarly designated to hold topics and store subscriptions, as before.",
                "Topics are advertised through the registry in the same way as are queues, and a client wishing to subscribe to a topic must register with the client holding the topic.",
                "When a client wishes to send a message to the topic list, it sends it to the topic holder (in the same way as it would send a message to a queue).",
                "The topic holder then forwards the message to all subscribers, using the synchronous protocol if possible, the epidemic protocol otherwise.",
                "It is worth noting that we use a single message with multiple recipients, instead of multiple messages with multiple recipients.",
                "When a message is delivered to one of the subscribers, this recipient is deleted from the list.",
                "In order to delete the other possible replicas, we employ acknowledgment messages (discussed in Section 4.4), returned in the same way as a normal message.",
                "We have also adapted the concepts of durable and non durable subscriptions for ad-hoc settings.",
                "In fixed platforms, durable subscriptions are maintained during the disconnections of the clients, whether these are intentional or are the result of failures.",
                "In traditional systems, while a durable subscriber is disconnected from the server, it is responsible for storing messages.",
                "When the durable subscriber reconnects, the server sends it all unexpired messages.",
                "The problem is that, in our scenario, disconnections are the norm 1 In theory, it is not possible to send a message to a peer that has never been reachable in the past, since there can be no entry present in the registry.",
                "However, to overcome this possible limitation, we provide a primitive through which information can be added to the registry without using the normal channels. 123 Middleware 2004 Companion rather than the exception.",
                "In other words, we cannot consider disconnections as failures.",
                "For these reasons, we adopt a slightly different semantics.",
                "With respect to durable subscriptions, if a subscriber becomes disconnected, notifications are not stored but are sent using the epidemic protocol rather than the synchronous protocol.",
                "In other words, durable notifications remain valid during the possible disconnections of the subscriber.",
                "On the other hand, if a non-durable subscriber becomes disconnected, its subscription is deleted; in other words, during disconnections, notifications are not sent using the epidemic protocol but exploit only the synchronous protocol.",
                "If the topic becomes accessible to this host again, it must make another subscription in order to receive the notifications.",
                "Unsubscription messages are delivered in the same way as are subscription messages.",
                "It is important to note that durable subscribers have explicitly to unsubscribe from a topic in order to stop the notification process; however, all durable subscriptions have a predefined expiration time in order to cope with the cases of subscribers that do not meet again because of their movements or failures.",
                "This feature is clearly provided to limit the number of the unnecessary messages sent around the network. 4.2 Message Delivery using Epidemic Routing In this section, we examine one possible mechanism that will allow the delivery of messages in a partially connected network.",
                "The mechanism we discuss is intended for the purposes of demonstrating feasibility; more efficient communication mechanisms for this environment are themselves complex, and are the subject of another paper [13].",
                "The asynchronous message delivery described above is based on a typical pure epidemic-style routing protocol [16].",
                "A message that needs to be sent is replicated on each host in reach.",
                "In this way, copies of the messages are quickly spread through connected networks, like an infection.",
                "If a host becomes connected to another cloud of mobile nodes, during its movement, the message spreads through this collection of hosts.",
                "Epidemic-style replication of data and messages has been exploited in the past in many fields starting with the distributed database systems area [2].",
                "Within epidemic routing, each host maintains a buffer containing the messages that it has created and the replicas of the messages generated by the other hosts.",
                "To improve the performance, a hash-table indexes the content of the buffer.",
                "When two hosts connect, the host with the smaller identifier initiates a so-called anti-entropy session, sending a list containing the unique identifiers of the messages that it currently stores.",
                "The other host evaluates this list and sends back a list containing the identifiers it is storing that are not present in the other host, together with the messages that the other does not have.",
                "The host that has started the session receives the list and, in the same way, sends the messages that are not present in the other host.",
                "Should buffer overflow occur, messages are dropped.",
                "The reliability offered by this protocol is typically best effort, since there is no guarantee that a message will eventually be delivered to its recipient.",
                "Clearly, the delivery ratio of the protocol increases proportionally to the maximum allowed delay time and the buffer size in each host (interesting simulation results may be found in [16]). 4.3 Adaptation of the JMS Message Model In this section, we will analyse the aspects of our adaptation of the specification related to the so-called JMS Message Model [5].",
                "According to this, JMS messages are characterised by some properties defined using the header field, which contains values that are used by both clients and providers for their delivery.",
                "The aspects discussed in the remainder of this section are valid for both models (point to point and publish-subscribe).",
                "A JMS message can be persistent or non-persistent.",
                "According to the JMS specification, persistent messages must be delivered with a higher degree of reliability than the nonpersistent ones.",
                "However, it is worth noting that it is not possible to ensure once-and-only-once reliability for persistent messages as defined in the specification, since, as we discussed in the previous subsection, the underlying epidemic protocol can guarantee only best-effort delivery.",
                "However, clients maintain a list of the identifiers of the recently received messages to avoid the delivery of message duplicates.",
                "In other words, we provide the applications with at-mostonce reliability for both types of messages.",
                "In order to implement different levels of reliability, EMMA treats persistent and non-persistent messages differently, during the execution of the anti-entropy epidemic protocol.",
                "Since the message buffer space is limited, persistent messages are preferentially replicated using the available free space.",
                "If this is insufficient and non-persistent messages are present in the buffer, these are replaced.",
                "Only the successful deliveries of the persistent messages are notified to the senders.",
                "According to the JMS specification, it is possible to assign a priority to each message.",
                "The messages with higher priorities are delivered in a preferential way.",
                "As discussed above, persistent messages are prioritised above the non-persistent ones.",
                "Further selection is based on their priorities.",
                "Messages with higher priorities are treated in a preferential way.",
                "In fact, if there is not enough space to replicate all the persistent messages, a mechanism based on priorities is used to delete and replicate non-persistent messages (and, if necessary, persistent messages).",
                "Messages are deleted from the buffers using the expiration time value that can be set by senders.",
                "This is a way to free space in the buffers (one preferentially deletes older messages in cases of conflict); to eliminate stale replicas in the system; and to limit the time for which destinations must hold message identifiers to dispose of duplicates. 4.4 Reliability and Acknowledgment Mechanisms As already discussed, at-most-once message delivery is the best that can be achieved in terms of delivery semantics in partially connected ad-hoc settings.",
                "However, it is possible to improve the reliability of the system with efficient acknowledgment mechanisms.",
                "EMMA provides a mechanism for failure notification to applications if the acknowledgment is not received within a given timeout (that can be configured by application developers).",
                "This mechanism is the one that distinguishes the delivery of persistent and non-persistent messages in our JMS implementation: the deliveries of the former are notified to the senders, whereas the latter are not.",
                "We use acknowledgment messages not only to inform senders about the successful delivery of messages but also to delete the replicas of the delivered messages that are still present in the network.",
                "Each host maintains a list of the messages Middleware for Pervasive and ad-hoc Computing 124 successfully delivered that is updated as part of the normal process of information exchange between the hosts.",
                "The lists are exchanged during the first steps of the anti-entropic epidemic protocol with a certain predefined frequency.",
                "In the case of messages with multiple recipients, a list of the actual recipients is also stored.",
                "When a host receives the list, it checks its message buffer and updates it according to the following rules: (1) if a message has a single recipient and it has been delivered, it is deleted from the buffer; (2) if a message has multiple recipients, the identifiers of the delivered hosts are deleted from the associated list of recipients.",
                "If the resulting length of the list of recipients is zero, the message is deleted from the buffer.",
                "These lists have, clearly, finite dimensions and are implemented as circular queues.",
                "This simple mechanism, together with the use of expiration timestamps, guarantees that the old acknowledgment notifications are deleted from the system after a limited period of time.",
                "In order to improve the reliability of EMMA, a design mechanism for intelligent replication of queues and topics based on the context information could be developed.",
                "However this is not yet part of the current architecture of EMMA. 5.",
                "IMPLEMENTATION AND PRELIMINARY EVALUATION We implemented a prototype of our platform using the J2ME Personal Profile.",
                "The size of the executable is about 250KB including the JMS 1.1 jar file; this is a perfectly acceptable figure given the available memory of the current mobile devices on the market.",
                "We tested our prototype on HP IPaq PDAs running Linux, interconnected with WaveLan, and on a number of laptops with the same network interface.",
                "We also evaluated the middleware platform using the OMNET++ discrete event simulator [17] in order to explore a range of mobile scenarios that incorporated a more realistic number of hosts than was achievable experimentally.",
                "More specifically, we assessed the performance of the system in terms of delivery ratio and average delay, varying the density of population and the buffer size, and using persistent and non-persistent messages with different priorities.",
                "The simulation results show that the EMMAs performance, in terms of delivery ratio and delay of persistent messages with higher priorities, is good.",
                "In general, it is evident that the delivery ratio is strongly related to the correct dimensioning of the buffers to the maximum acceptable delay.",
                "Moreover, the epidemic algorithms are able to guarantee a high delivery ratio if one evaluates performance over a time interval sufficient for the dissemination of the replicas of messages (i.e., the infection spreading) in a large portion of the ad-hoc network.",
                "One consequence of the dimensioning problem is that scalability may be seriously impacted in peer-to-peer middleware for mobile computing due to the resource poverty of the devices (limited memory to store temporarily messages) and the number of possible interconnections in ad-hoc settings.",
                "What is worse is that common forms of commercial and social organisation (six degrees of separation) mean that even modest TTL values on messages will lead to widespread flooding of epidemic messages.",
                "This problem arises because of the lack of intelligence in the epidemic protocol, and can be addressed by selecting carrier nodes for messages with greater care.",
                "The details of this process are, however, outside the scope of this paper (but may be found in [13]) and do not affect the foundation on which the EMMA middleware is based: the ability to deliver messages asynchronously. 6.",
                "CRITICAL VIEW OF THE STATE OF THE ART The design of middleware platforms for mobile computing requires researchers to answer new and fundamentally different questions; simply assuming the presence of wired portions of the network on which centralised functionality can reside is not generalisable.",
                "Thus, it is necessary to investigate novel design principles and to devise architectural patterns that differ from those traditionally exploited in the design of middleware for fixed systems.",
                "As an example, consider the recent cross-layering trend in ad-hoc networking [1].",
                "This is a way of re-thinking software systems design, explicitly abandoning the classical forms of layering, since, although this separation of concerns afford portability, it does so at the expense of potential efficiency gains.",
                "We believe that it is possible to view our approach as an instance of cross-layering.",
                "In fact, we have added the epidemic network protocol at middleware level and, at the same time, we have used the existing synchronous network protocol if present both in delivering messages (traditional layering) and in informing the middleware about when messages may be delivered by revealing details of the forwarding tables (layer violation).",
                "For this reason, we prefer to consider them jointly as the communication layer of our platform together providing more efficient message delivery.",
                "Another interesting aspect is the exploitation of context and system information to improve the performance of mobile middleware platforms.",
                "Again, as a result of adopting a cross-layering methodology, we are able to build systems that gather information from the underlying operating system and communication components in order to allow for adaptation of behaviour.",
                "We can summarise this conceptual design approach by saying that middleware platforms must be not only context-aware (i.e., they should be able to extract and analyse information from the surrounding context) but also system-aware (i.e., they should be able to gather information from the software and hardware components of the mobile system).",
                "A number of middleware systems have been developed to support ad-hoc networking with the use of <br>asynchronous communication</br> (such as LIME, XMIDDLE, STEAM [11]).",
                "In particular, the STEAM platform is an interesting example of event-based middleware for ad-hoc networks, providing location-aware message delivery and an effective solution for event filtering.",
                "A discussion of JMS, and its mobile realisation, has already been conducted in Sections 4 and 2.",
                "The Swiss company Softwired has developed the first JMS middleware for mobile computing, called iBus Mobile [10].",
                "The main components of this typically infrastructure-based architecture are the JMS provider, the so-called mobile JMS gateway, which is deployed on a fixed host and a lightweight JMS client library.",
                "The gateway is used for the communication between the application server and mobile hosts.",
                "The gateway is seen by the JMS provider as a normal JMS client.",
                "The JMS provider can be any JMS-enabled application server, such as BEA Weblogic.",
                "Pronto [19] is an example of mid125 Middleware 2004 Companion dleware system based on messaging that is specifically designed for mobile environments.",
                "The platform is composed of three classes of components: mobile clients implementing the JMS specification, gateways that control traffic, guaranteeing efficiency and possible user customizations using different plug-ins and JMS servers.",
                "Different configurations of these components are possible; with respect to mobile ad hoc networks applications, the most interesting is Serverless JMS.",
                "The aim of this configuration is to adapt JMS to a decentralized model.",
                "The publish-subscribe model exploits the efficiency and the scalability of the underlying IP multicast protocol.",
                "Unreliable and reliable message delivery services are provided: reliability is provided through a negative acknowledgment-based protocol.",
                "Pronto represents a good solution for infrastructure-based mobile networks but it does not adequately target ad-hoc settings, since mobile nodes rely on fixed servers for the exchange of messages.",
                "Other MOM implemented for mobile environments exist; however, they are usually straightforward extensions of existing middleware [8].",
                "The only implementation of MOM specifically designed for mobile ad-hoc networks was developed at the University of Newcastle [18].",
                "This work is again a JMS adaptation; the focus of that implementation is on group communication and the use of application level routing algorithms for topic delivery of messages.",
                "However, there are a number of differences in the focus of our work.",
                "The importance that we attribute to disconnections makes persistence a vital requirement for any middleware that needs to be used in mobile ad-hoc networks.",
                "The authors of [18] signal persistence as possible future work, not considering the fact that routing a message to a non-connected host will result in delivery failure.",
                "This is a remarkable limitation in mobile settings where unpredictable disconnections are the norm rather than the exception. 7.",
                "ROADMAP AND CONCLUSIONS <br>asynchronous communication</br> is a useful communication paradigm for mobile ad-hoc networks, as hosts are allowed to come, go and pick up messages when convenient, also taking account of their resource availability (e.g., power, connectivity levels).",
                "In this paper we have described the state of the art in terms of MOM for mobile systems.",
                "We have also shown a proof of concept adaptation of JMS to the extreme scenario of partially connected mobile ad-hoc networks.",
                "We have described and discussed the characteristics and differences of our solution with respect to traditional JMS implementations and the existing adaptations for mobile settings.",
                "However, trade-offs between application-level routing and resource usage should also be investigated, as mobile devices are commonly power/resource scarce.",
                "A key limitation of this work is the poorly performing epidemic algorithm and an important advance in the practicability of this work requires an algorithm that better balances the needs of efficiency and message delivery probability.",
                "We are currently working on algorithms and protocols that, exploiting probabilistic and statistical techniques on the basis of small amounts of exchanged information, are able to improve considerably the efficiency in terms of resources (memory, bandwidth, etc) and the reliability of our middleware platform [13].",
                "One futuristic research development, which may take these ideas of adaptation of messaging middleware for mobile environments further is the introduction of more mobility oriented communication extensions, for instance the support of geocast (i.e., the ability to send messages to specific geographical areas). 8.",
                "REFERENCES [1] M. Conti, G. Maselli, G. Turi, and S. Giordano.",
                "Cross-layering in Mobile ad-hoc Network Design.",
                "IEEE Computer, 37(2):48-51, February 2004. [2] A. Demers, D. Greene, C. Hauser, W. Irish, J. Larson, S. Shenker, H. Sturgis, D. Swinehart, and D. Terry.",
                "Epidemic Algorithms for Replicated Database Maintenance.",
                "In Sixth Symposium on Principles of Distributed Computing, pages 1-12, August 1987. [3] A. Doria, M. Uden, and D. P. Pandey.",
                "Providing connectivity to the Saami nomadic community.",
                "In Proceedings of the Second International Conference on Open Collaborative Design for Sustainable Innovation, December 2002. [4] M. Haahr, R. Cunningham, and V. Cahill.",
                "Supporting CORBA applications in a Mobile Environment.",
                "In 5th International Conference on Mobile Computing and Networking (MOBICOM99), pages 36-47.",
                "ACM, August 1999. [5] M. Hapner, R. Burridge, R. Sharma, J. Fialli, and K. Stout.",
                "Java Message Service Specification Version 1.1.",
                "Sun Microsystems, Inc., April 2002. http://java.sun.com/products/jms/. [6] J. Hart.",
                "WebSphere MQ: Connecting your applications without complex programming.",
                "IBM WebSphere Software White Papers, 2003. [7] S. Hayward and M. Pezzini.",
                "Marrying Middleware and Mobile Computing.",
                "Gartner Group Research Report, September 2001. [8] IBM.",
                "WebSphere MQ EveryPlace Version 2.0, November 2002. http://www-3.ibm.com/software/integration/wmqe/. [9] ITU.",
                "Connecting remote communities.",
                "Documents of the World Summit on Information Society, 2003. http://www.itu.int/osg/spu/wsis-themes. [10] S. Maffeis.",
                "Introducing Wireless JMS.",
                "Softwired AG, www.sofwired-inc.com, 2002. [11] C. Mascolo, L. Capra, and W. Emmerich.",
                "Middleware for Mobile Computing.",
                "In E. Gregori, G. Anastasi, and S. Basagni, editors, Advanced Lectures on Networking, volume 2497 of Lecture Notes in Computer Science, pages 20-58.",
                "Springer Verlag, 2002. [12] Microsoft.",
                "Microsoft Message Queuing (MSMQ) Version 2.0 Documentation. [13] M. Musolesi, S. Hailes, and C. Mascolo.",
                "Adaptive routing for intermittently connected mobile ad-hoc networks.",
                "Technical report, UCL-CS Research Note, July 2004.",
                "Submitted for Publication. [14] Sun Microsystems.",
                "Java Naming and Directory Interface (JNDI) Documentation Version 1.2. 2003. http://java.sun.com/products/jndi/. [15] Sun Microsystems.",
                "Jini Specification Version 2.0, 2003. http://java.sun.com/products/jini/. [16] A. Vahdat and D. Becker.",
                "Epidemic routing for Partially Connected ad-hoc Networks.",
                "Technical Report CS-2000-06, Department of Computer Science, Duke University, 2000. [17] A. Vargas.",
                "The OMNeT++ discrete event simulation system.",
                "In Proceedings of the European Simulation Multiconference (ESM2001), Prague, June 2001. [18] E. Vollset, D. Ingham, and P. Ezhilchelvan.",
                "JMS on Mobile ad-hoc Networks.",
                "In Personal Wireless Communications (PWC), pages 40-52, Venice, September 2003. [19] E. Yoneki and J. Bacon.",
                "Pronto: Mobilegateway with publish-subscribe paradigm over wireless network.",
                "Technical Report 559, University of Cambridge, Computer Laboratory, February 2003.",
                "Middleware for Pervasive and ad-hoc Computing 126"
            ],
            "original_annotated_samples": [
                "Instead, <br>asynchronous communication</br> seems to be a generally more suitable paradigm for such environments.",
                "In recent years, there has been growing interest in platforms based on <br>asynchronous communication</br> paradigms, such as publish-subscribe systems [6]: these have been exploited very successfully where there is application level asynchronicity.",
                "Moreover, in mobile ad-hoc systems, the likelihood of network fragmentation means that synchronous communication may in any case be impracticable, giving situations in which delay tolerant asynchronous traffic is the only form of traffic that could be supported. 121 Middleware 2004 Companion Middleware for mobile ad-hoc environments must therefore support semi-synchronous or completely <br>asynchronous communication</br> primitives if it is to avoid substantial limitations to its utility.",
                "Message-oriented middleware thus supports <br>asynchronous communication</br> in a very natural way, achieving de-coupling of senders and receivers.",
                "The Java Messaging Service (JMS) is a collection of interfaces for <br>asynchronous communication</br> between distributed components."
            ],
            "translated_annotated_samples": [
                "En cambio, la <br>comunicación asincrónica</br> parece ser un paradigma generalmente más adecuado para este tipo de entornos.",
                "En los últimos años, ha habido un creciente interés en plataformas basadas en paradigmas de <br>comunicación asincrónica</br>, como los sistemas de publicación-suscripción: estos han sido explotados con mucho éxito donde existe asincronía a nivel de aplicación.",
                "Además, en sistemas ad-hoc móviles, la probabilidad de fragmentación de la red significa que la comunicación síncrona puede resultar impracticable en cualquier caso, lo que da lugar a situaciones en las que el tráfico asincrónico tolerante a retrasos es la única forma de tráfico que podría ser admitida. El middleware para entornos ad-hoc móviles debe, por lo tanto, admitir primitivas de comunicación semi-síncronas o <br>completamente asíncronas</br> si se quiere evitar limitaciones sustanciales en su utilidad.",
                "La middleware orientada a mensajes soporta la <br>comunicación asíncrona</br> de una manera muy natural, logrando el desacoplamiento de emisores y receptores.",
                "El Servicio de Mensajería de Java (JMS) es una colección de interfaces para la <br>comunicación asincrónica</br> entre componentes distribuidos."
            ],
            "translated_text": "Adaptando Middleware de Mensajería Asincrónica a Redes Ad-hoc Mirco Musolesi Dept. Las características de los entornos móviles, con la posibilidad de desconexiones frecuentes y ancho de banda fluctuante, han obligado a replantear el middleware tradicional. En particular, los paradigmas de comunicación síncrona a menudo empleados en middleware estándar no parecen ser particularmente adecuados para entornos ad-hoc, en los que ni siquiera se puede asumir la disponibilidad intermitente de una red troncal. En cambio, la <br>comunicación asincrónica</br> parece ser un paradigma generalmente más adecuado para este tipo de entornos. Se ha desarrollado y utilizado middleware orientado a mensajes para sistemas tradicionales con el fin de proporcionar un paradigma de comunicación asíncrona para sistemas distribuidos, y, recientemente, también para algunos sistemas específicos de computación móvil. En este artículo, presentamos nuestra experiencia en el diseño, implementación y evaluación de EMMA (Middleware de Mensajería Epidémica para redes ad-hoc), una adaptación del Servicio de Mensajes Java (JMS) para entornos móviles ad-hoc. Discutimos en detalle los desafíos de diseño y algunas posibles soluciones, mostrando un ejemplo concreto de la viabilidad y adecuación de la aplicación del paradigma asíncrono en este contexto y delineando un plan de investigación para los próximos años. Categorías y Descriptores de Asignaturas C.2.4 [Redes de Computadoras-Comunicación]: Sistemas Distribuidos-Aplicaciones Distribuidas; C.2.1 [Arquitectura y Diseño de Redes]: Comunicación Inalámbrica Términos Generales DISEÑO, ALGORITMOS 1. INTRODUCCIÓN Con la creciente popularidad de los dispositivos móviles y su amplia adopción, existe una clara necesidad de permitir el desarrollo de un amplio espectro de aplicaciones que operen de manera efectiva en dicho entorno. Lamentablemente, esto está lejos de ser simple: los dispositivos móviles son cada vez más heterogéneos en cuanto a capacidades de procesamiento, tamaño de memoria, capacidad de batería e interfaces de red. Cada una de estas configuraciones tiene características sustancialmente diferentes que son estáticamente distintas, por ejemplo, hay una gran diferencia en la capacidad entre un mote de Berkeley y un portátil equipado con 802.11g, y que varían dinámicamente, como en situaciones de ancho de banda fluctuante y conectividad intermitente. Los entornos móviles ad hoc tienen un elemento adicional de complejidad en que son completamente descentralizados. Para poder desarrollar aplicaciones para entornos tan complejos, es esencial contar con una forma adecuada de middleware si se busca lograr un desarrollo rentable. En este artículo, examinamos uno de los aspectos fundamentales de middleware para entornos móviles ad-hoc: el de los primitivos de comunicación. Tradicionalmente, los primitivos de middleware más utilizados para la comunicación asumen la presencia simultánea de ambos puntos finales en una red, ya que la estabilidad y la ubicuidad de la infraestructura de redes no es una suposición irrazonable para la mayoría de los entornos cableados. En otras palabras, la mayoría de los paradigmas de comunicación son síncronos: middleware orientado a objetos como CORBA y Java RMI son ejemplos típicos de middleware basado en comunicación síncrona. En los últimos años, ha habido un creciente interés en plataformas basadas en paradigmas de <br>comunicación asincrónica</br>, como los sistemas de publicación-suscripción: estos han sido explotados con mucho éxito donde existe asincronía a nivel de aplicación. De acuerdo con un informe de mercado de Gartner [7]: Dada la popularidad, escalabilidad, flexibilidad y afinidad con arquitecturas móviles e inalámbricas de los middlewares orientados a mensajes (MOM), para el año 2004, es probable que MOM se convierta en la forma dominante de middleware de comunicación para vincular aplicaciones móviles y empresariales (probabilidad del 0.7)... Además, en sistemas ad-hoc móviles, la probabilidad de fragmentación de la red significa que la comunicación síncrona puede resultar impracticable en cualquier caso, lo que da lugar a situaciones en las que el tráfico asincrónico tolerante a retrasos es la única forma de tráfico que podría ser admitida. El middleware para entornos ad-hoc móviles debe, por lo tanto, admitir primitivas de comunicación semi-síncronas o <br>completamente asíncronas</br> si se quiere evitar limitaciones sustanciales en su utilidad. Además del desafío intelectual que implica apoyar este modelo, este trabajo también es interesante porque existen varios ámbitos de aplicación práctica al permitir la comunicación entre comunidades en áreas subdesarrolladas del mundo. Por lo tanto, por ejemplo, proyectos que se han llevado a cabo para ayudar a poblaciones que viven en lugares remotos del mundo como Laponia o en áreas pobres que carecen de infraestructura de conectividad fija. Ha habido intentos de proporcionar middleware móvil con estas propiedades, incluyendo STEAM, LIME, XMIDDLE, Bayou (consulte [11] para una revisión más completa del middleware móvil). Estos modelos difieren considerablemente de los middleware tradicionales existentes en cuanto a los primitivos proporcionados. Además, algunos de ellos fallan en proporcionar una solución para los verdaderos escenarios ad-hoc. Si el éxito proyectado de MOM se convierte en algo parecido a la realidad, habrá muchos programadores con experiencia en ello. La solución ideal al problema del middleware para sistemas ad-hoc es, entonces, permitir a los programadores utilizar los mismos paradigmas y modelos presentados por formas comunes de MOM y asegurar que estos paradigmas sean soportables dentro del entorno móvil. Este enfoque tiene claras ventajas al permitir que las aplicaciones desarrolladas en plataformas de middleware estándar se desplieguen fácilmente en dispositivos móviles. De hecho, algunas investigaciones ya han llevado a la adaptación de plataformas de middleware tradicionales a entornos móviles, principalmente para proporcionar integración entre dispositivos móviles y redes fijas existentes en un entorno nómada (es decir, mixto) [4]. En lo que respecta al middleware orientado a mensajes, las implementaciones actuales, sin embargo, asumen la existencia de una red troncal a la que los hosts móviles se conectan de vez en cuando mientras están en itinerancia [10], o asumen que los nodos siempre son de alguna manera accesibles a través de un camino [18]. No se ha intentado ninguna adaptación a escenarios heterogéneos o completamente ad hoc, con desconexiones frecuentes y nubes periódicamente aisladas de hosts. En el resto de este documento describimos un intento inicial de adaptar middleware orientado a mensajes para que se ajuste a dispositivos móviles y, más específicamente, a redes móviles ad-hoc. En nuestro caso, elegimos examinar JMS, como uno de los sistemas MOM más conocidos. En la última parte de este documento, exploramos las limitaciones de nuestros resultados y describimos los planes que tenemos para llevar a cabo el trabajo más adelante. Los sistemas de middleware orientados a mensajes y el Servicio de Mensajes de Java (JMS) admiten la comunicación entre componentes distribuidos a través del paso de mensajes: el remitente envía un mensaje a colas identificadas, que generalmente residen en un servidor. Un receptor recupera el mensaje de la cola en un momento diferente y puede confirmar la respuesta utilizando el mismo mecanismo asíncrono. La middleware orientada a mensajes soporta la <br>comunicación asíncrona</br> de una manera muy natural, logrando el desacoplamiento de emisores y receptores. Un remitente puede continuar procesando tan pronto como el middleware haya aceptado el mensaje; eventualmente, el receptor enviará un mensaje de confirmación y el remitente podrá recogerlo en un momento conveniente. Sin embargo, dado la forma en que están implementados, estos sistemas de middleware suelen requerir dispositivos con recursos abundantes, especialmente en términos de memoria y espacio en disco, donde se almacenan colas persistentes de mensajes que han sido recibidos pero aún no procesados. Sun Java Message Service [5], IBM WebSphere MQ [6], Microsoft MSMQ [12] son ejemplos de middleware orientado a mensajes muy exitosos para sistemas distribuidos tradicionales. El Servicio de Mensajería de Java (JMS) es una colección de interfaces para la <br>comunicación asincrónica</br> entre componentes distribuidos. ",
            "candidates": [],
            "error": [
                [
                    "comunicación asincrónica",
                    "comunicación asincrónica",
                    "completamente asíncronas",
                    "comunicación asíncrona",
                    "comunicación asincrónica"
                ]
            ]
        },
        "epidemic protocol": {
            "translated_key": "protocolo epidémico",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Adapting Asynchronous Messaging Middleware to ad-hoc Networking Mirco Musolesi Dept.",
                "of Computer Science, University College London Gower Street, London WC1E 6BT, United Kingdom m.musolesi@cs.ucl.ac.uk Cecilia Mascolo Dept. of Computer Science, University College London Gower Street, London WC1E 6BT, United Kingdom c.mascolo@cs.ucl.ac.uk Stephen Hailes Dept. of Computer Science, University College London Gower Street, London WC1E 6BT, United Kingdom s.hailes@cs.ucl.ac.uk ABSTRACT The characteristics of mobile environments, with the possibility of frequent disconnections and fluctuating bandwidth, have forced a rethink of traditional middleware.",
                "In particular, the synchronous communication paradigms often employed in standard middleware do not appear to be particularly suited to ad-hoc environments, in which not even the intermittent availability of a backbone network can be assumed.",
                "Instead, asynchronous communication seems to be a generally more suitable paradigm for such environments.",
                "Message oriented middleware for traditional systems has been developed and used to provide an asynchronous paradigm of communication for distributed systems, and, recently, also for some specific mobile computing systems.",
                "In this paper, we present our experience in designing, implementing and evaluating EMMA (Epidemic Messaging Middleware for ad-hoc networks), an adaptation of Java Message Service (JMS) for mobile ad-hoc environments.",
                "We discuss in detail the design challenges and some possible solutions, showing a concrete example of the feasibility and suitability of the application of the asynchronous paradigm in this setting and outlining a research roadmap for the coming years.",
                "Categories and Subject Descriptors C.2.4 [Computer-Communication Networks]: Distributed Systems-Distributed Applications; C.2.1 [Network Architecture and Design]: Wireless Communication General Terms DESIGN, ALGORITHMS 1.",
                "INTRODUCTION With the increasing popularity of mobile devices and their widespread adoption, there is a clear need to allow the development of a broad spectrum of applications that operate effectively over such an environment.",
                "Unfortunately, this is far from simple: mobile devices are increasingly heterogeneous in terms of processing capabilities, memory size, battery capacity, and network interfaces.",
                "Each such configuration has substantially different characteristics that are both statically different - for example, there is a major difference in capability between a Berkeley mote and an 802.11g-equipped laptop - and that vary dynamically, as in situations of fluctuating bandwidth and intermittent connectivity.",
                "Mobile ad hoc environments have an additional element of complexity in that they are entirely decentralised.",
                "In order to craft applications for such complex environments, an appropriate form of middleware is essential if cost effective development is to be achieved.",
                "In this paper, we examine one of the foundational aspects of middleware for mobile ad-hoc environments: that of the communication primitives.",
                "Traditionally, the most frequently used middleware primitives for communication assume the simultaneous presence of both end points on a network, since the stability and pervasiveness of the networking infrastructure is not an unreasonable assumption for most wired environments.",
                "In other words, most communication paradigms are synchronous: object oriented middleware such as CORBA and Java RMI are typical examples of middleware based on synchronous communication.",
                "In recent years, there has been growing interest in platforms based on asynchronous communication paradigms, such as publish-subscribe systems [6]: these have been exploited very successfully where there is application level asynchronicity.",
                "From a Gartner Market Report [7]: Given messageoriented-middlewares (MOM) popularity, scalability, flexibility, and affinity with mobile and wireless architectures, by 2004, MOM will emerge as the dominant form of communication middleware for linking mobile and enterprise applications (0.7 probability)....",
                "Moreover, in mobile ad-hoc systems, the likelihood of network fragmentation means that synchronous communication may in any case be impracticable, giving situations in which delay tolerant asynchronous traffic is the only form of traffic that could be supported. 121 Middleware 2004 Companion Middleware for mobile ad-hoc environments must therefore support semi-synchronous or completely asynchronous communication primitives if it is to avoid substantial limitations to its utility.",
                "Aside from the intellectual challenge in supporting this model, this work is also interesting because there are a number of practical application domains in allowing inter-community communication in undeveloped areas of the globe.",
                "Thus, for example, projects that have been carried out to help populations that live in remote places of the globe such as Lapland [3] or in poor areas that lack fixed connectivity infrastructure [9].",
                "There have been attempts to provide mobile middleware with these properties, including STEAM, LIME, XMIDDLE, Bayou (see [11] for a more complete review of mobile middleware).",
                "These models differ quite considerably from the existing traditional middleware in terms of primitives provided.",
                "Furthermore, some of them fail in providing a solution for the true ad-hoc scenarios.",
                "If the projected success of MOM becomes anything like a reality, there will be many programmers with experience of it.",
                "The ideal solution to the problem of middleware for ad-hoc systems is, then, to allow programmers to utilise the same paradigms and models presented by common forms of MOM and to ensure that these paradigms are supportable within the mobile environment.",
                "This approach has clear advantages in allowing applications developed on standard middleware platforms to be easily deployed on mobile devices.",
                "Indeed, some research has already led to the adaptation of traditional middleware platforms to mobile settings, mainly to provide integration between mobile devices and existing fixed networks in a nomadic (i.e., mixed) environment [4].",
                "With respect to message oriented middleware, the current implementations, however, either assume the existence of a backbone network to which the mobile hosts connect from time to time while roaming [10], or assume that nodes are always somehow reachable through a path [18].",
                "No adaptation to heterogeneous or completely ad-hoc scenarios, with frequent disconnection and periodically isolated clouds of hosts, has been attempted.",
                "In the remainder of this paper we describe an initial attempt to adapt message oriented middleware to suit mobile and, more specifically, mobile ad-hoc networks.",
                "In our case, we elected to examine JMS, as one of the most widely known MOM systems.",
                "In the latter part of this paper, we explore the limitations of our results and describe the plans we have to take the work further. 2.",
                "MESSAGE ORIENTED MIDDLEWARE AND JAVA MESSAGE SERVICE (JMS) Message-oriented middleware systems support communication between distributed components via message-passing: the sender sends a message to identified queues, which usually reside on a server.",
                "A receiver retrieves the message from the queue at a different time and may acknowledge the reply using the same asynchronous mechanism.",
                "Message-oriented middleware thus supports asynchronous communication in a very natural way, achieving de-coupling of senders and receivers.",
                "A sender is able to continue processing as soon as the middleware has accepted the message; eventually, the receiver will send an acknowledgment message and the sender will be able to collect it at a convenient time.",
                "However, given the way they are implemented, these middleware systems usually require resource-rich devices, especially in terms of memory and disk space, where persistent queues of messages that have been received but not yet processed, are stored.",
                "Sun Java Message Service [5], IBM WebSphere MQ [6], Microsoft MSMQ [12] are examples of very successful message-oriented middleware for traditional distributed systems.",
                "The Java Messaging Service (JMS) is a collection of interfaces for asynchronous communication between distributed components.",
                "It provides a common way for Java programs to create, send and receive messages.",
                "JMS users are usually referred to as clients.",
                "The JMS specification further defines providers as the components in charge of implementing the messaging system and providing the administrative and control functionality (i.e., persistence and reliability) required by the system.",
                "Clients can send and receive messages, asynchronously, through the JMS provider, which is in charge of the delivery and, possibly, of the persistence of the messages.",
                "There are two types of communication supported: point to point and publish-subscribe models.",
                "In the point to point model, hosts send messages to queues.",
                "Receivers can be registered with some specific queues, and can asynchronously retrieve the messages and then acknowledge them.",
                "The publish-subscribe model is based on the use of topics that can be subscribed to by clients.",
                "Messages are sent to topics by other clients and are then received in an asynchronous mode by all the subscribed clients.",
                "Clients learn about the available topics and queues through Java Naming and Directory Interface (JNDI) [14].",
                "Queues and topics are created by an administrator on the provider and are registered with the JNDI interface for look-up.",
                "In the next section, we introduce the challenges of mobile networks, and show how JMS can be adapted to cope with these requirements. 3.",
                "JMS FOR MOBILE COMPUTING Mobile networks vary very widely in their characteristics, from nomadic networks in which modes relocate whilst offline through to ad-hoc networks in which modes move freely and in which there is no infrastructure.",
                "Mobile ad-hoc networks are most generally applicable in situations where survivability and instant deployability are key: most notably in military applications and disaster relief.",
                "In between these two types of mobile networks, there are, however, a number of possible heterogeneous combinations, where nomadic and ad-hoc paradigms are used to interconnect totally unwired areas to more structured networks (such as a LAN or the Internet).",
                "Whilst the JMS specification has been extensively implemented and used in traditional distributed systems, adaptations for mobile environments have been proposed only recently.",
                "The challenges of porting JMS to mobile settings are considerable; however, in view of its widespread acceptance and use, there are considerable advantages in allowing the adaptation of existing applications to mobile environments and in allowing the interoperation of applications in the wired and wireless regions of a network.",
                "In [10], JMS was adapted to a nomadic mobile setting, where mobile hosts can be JMS clients and communicate through the JMS provider that, however, sits on a backbone network, providing reliability and persistence.",
                "The client prototype presented in [10] is very lightweight, due to the delegation of all the heavyweight functionality to the Middleware for Pervasive and ad-hoc Computing 122 provider on the wired network.",
                "However, this approach is somewhat limited in terms of widespread applicability and scalability as a consequence of the concentration of functionality in the wired portion of the network.",
                "If JMS is to be adapted to completely ad-hoc environments, where no fixed infrastructure is available, and where nodes change location and status very dynamically, more issues must be taken into consideration.",
                "Firstly, discovery needs to use a resilient but distributed model: in this extremely dynamic environment, static solutions are unacceptable.",
                "As discussed in Section 2, a JMS administrator defines queues and topics on the provider.",
                "Clients can then learn about them using the Java Naming and Directory Interface (JNDI).",
                "However, due to the way JNDI is designed, a JNDI node (or more than one) needs to be in reach in order to obtain a binding of a name to an address (i.e., knowing where a specific queue/topic is).",
                "In mobile ad-hoc environments, the discovery process cannot assume the existence of a fixed set of discovery servers that are always reachable, as this would not match the dynamicity of ad-hoc networks.",
                "Secondly, a JMS Provider, as suggested by the JMS specification, also needs to be reachable by each node in the network, in order to communicate.",
                "This assumes a very centralised architecture, which again does not match the requirements of a mobile ad-hoc setting, in which nodes may be moving and sparse: a more distributed and dynamic solution is needed.",
                "Persistence is, however, essential functionality in asynchronous communication environments as hosts are, by definition, connected at different times.",
                "In the following section, we will discuss our experience in designing and implementing JMS for mobile ad-hoc networks. 4.",
                "JMSFOR MOBILE ad-hoc NETWORKS 4.1 Adaptation of JMS for Mobile ad-hoc Networks Developing applications for mobile networks is yet more challenging: in addition to the same considerations as for infrastructured wireless environments, such as the limited device capabilities and power constraints, there are issues of rate of change of network connectivity, and the lack of a static routing infrastructure.",
                "Consequently, we now describe an initial attempt to adapt the JMS specification to target the particular requirements related to ad-hoc scenarios.",
                "As discussed in Section 3, a JMS application can use either the point to point and the publish-subscribe styles of messaging.",
                "Point to Point Model The point to point model is based on the concept of queues, that are used to enable asynchronous communication between the producer of a message and possible different consumers.",
                "In our solution, the location of queues is determined by a negotiation process that is application dependent.",
                "For example, let us suppose that it is possible to know a priori, or it is possible to determine dynamically, that a certain host is the receiver of the most part of messages sent to a particular queue.",
                "In this case, the optimum location of the queue may well be on this particular host.",
                "In general, it is worth noting that, according to the JMS specification and suggested design patterns, it is common and preferable for a client to have all of its messages delivered to a single queue.",
                "Queues are advertised periodically to the hosts that are within transmission range or that are reachable by means of the underlying synchronous communication protocol, if provided.",
                "It is important to note that, at the middleware level, it is logically irrelevant whether or not the network layer implements some form of ad-hoc routing (though considerably more efficient if it does); the middleware only considers information about which nodes are actively reachable at any point in time.",
                "The hosts that receive advertisement messages add entries to their JNDI registry.",
                "Each entry is characterized by a lease (a mechanism similar to that present in Jini [15]).",
                "A lease represents the time of validity of a particular entry.",
                "If a lease is not refreshed (i.e, its life is not extended), it can expire and, consequently, the entry is deleted from the registry.",
                "In other words, the host assumes that the queue will be unreachable from that point in time.",
                "This may be caused, for example, if a host storing the queue becomes unreachable.",
                "A host that initiates a discovery process will find the topics and the queues present in its connected portion of the network in a straightforward manner.",
                "In order to deliver a message to a host that is not currently in reach1 , we use an asynchronous epidemic routing protocol that will be discussed in detail in Section 4.2.",
                "If two hosts are in the same cloud (i.e., a connected path exists between them), but no synchronous protocol is available, the messages are sent using the <br>epidemic protocol</br>.",
                "In this case, the delivery latency will be low as a result of the rapidity of propagation of the infection in the connected cloud (see also the simulation results in Section 5).",
                "Given the existence of an <br>epidemic protocol</br>, the discovery mechanism consists of advertising the queues to the hosts that are currently unreachable using analogous mechanisms.",
                "Publish-Subscribe Model In the publish-subscribe model, some of the hosts are similarly designated to hold topics and store subscriptions, as before.",
                "Topics are advertised through the registry in the same way as are queues, and a client wishing to subscribe to a topic must register with the client holding the topic.",
                "When a client wishes to send a message to the topic list, it sends it to the topic holder (in the same way as it would send a message to a queue).",
                "The topic holder then forwards the message to all subscribers, using the synchronous protocol if possible, the <br>epidemic protocol</br> otherwise.",
                "It is worth noting that we use a single message with multiple recipients, instead of multiple messages with multiple recipients.",
                "When a message is delivered to one of the subscribers, this recipient is deleted from the list.",
                "In order to delete the other possible replicas, we employ acknowledgment messages (discussed in Section 4.4), returned in the same way as a normal message.",
                "We have also adapted the concepts of durable and non durable subscriptions for ad-hoc settings.",
                "In fixed platforms, durable subscriptions are maintained during the disconnections of the clients, whether these are intentional or are the result of failures.",
                "In traditional systems, while a durable subscriber is disconnected from the server, it is responsible for storing messages.",
                "When the durable subscriber reconnects, the server sends it all unexpired messages.",
                "The problem is that, in our scenario, disconnections are the norm 1 In theory, it is not possible to send a message to a peer that has never been reachable in the past, since there can be no entry present in the registry.",
                "However, to overcome this possible limitation, we provide a primitive through which information can be added to the registry without using the normal channels. 123 Middleware 2004 Companion rather than the exception.",
                "In other words, we cannot consider disconnections as failures.",
                "For these reasons, we adopt a slightly different semantics.",
                "With respect to durable subscriptions, if a subscriber becomes disconnected, notifications are not stored but are sent using the <br>epidemic protocol</br> rather than the synchronous protocol.",
                "In other words, durable notifications remain valid during the possible disconnections of the subscriber.",
                "On the other hand, if a non-durable subscriber becomes disconnected, its subscription is deleted; in other words, during disconnections, notifications are not sent using the <br>epidemic protocol</br> but exploit only the synchronous protocol.",
                "If the topic becomes accessible to this host again, it must make another subscription in order to receive the notifications.",
                "Unsubscription messages are delivered in the same way as are subscription messages.",
                "It is important to note that durable subscribers have explicitly to unsubscribe from a topic in order to stop the notification process; however, all durable subscriptions have a predefined expiration time in order to cope with the cases of subscribers that do not meet again because of their movements or failures.",
                "This feature is clearly provided to limit the number of the unnecessary messages sent around the network. 4.2 Message Delivery using Epidemic Routing In this section, we examine one possible mechanism that will allow the delivery of messages in a partially connected network.",
                "The mechanism we discuss is intended for the purposes of demonstrating feasibility; more efficient communication mechanisms for this environment are themselves complex, and are the subject of another paper [13].",
                "The asynchronous message delivery described above is based on a typical pure epidemic-style routing protocol [16].",
                "A message that needs to be sent is replicated on each host in reach.",
                "In this way, copies of the messages are quickly spread through connected networks, like an infection.",
                "If a host becomes connected to another cloud of mobile nodes, during its movement, the message spreads through this collection of hosts.",
                "Epidemic-style replication of data and messages has been exploited in the past in many fields starting with the distributed database systems area [2].",
                "Within epidemic routing, each host maintains a buffer containing the messages that it has created and the replicas of the messages generated by the other hosts.",
                "To improve the performance, a hash-table indexes the content of the buffer.",
                "When two hosts connect, the host with the smaller identifier initiates a so-called anti-entropy session, sending a list containing the unique identifiers of the messages that it currently stores.",
                "The other host evaluates this list and sends back a list containing the identifiers it is storing that are not present in the other host, together with the messages that the other does not have.",
                "The host that has started the session receives the list and, in the same way, sends the messages that are not present in the other host.",
                "Should buffer overflow occur, messages are dropped.",
                "The reliability offered by this protocol is typically best effort, since there is no guarantee that a message will eventually be delivered to its recipient.",
                "Clearly, the delivery ratio of the protocol increases proportionally to the maximum allowed delay time and the buffer size in each host (interesting simulation results may be found in [16]). 4.3 Adaptation of the JMS Message Model In this section, we will analyse the aspects of our adaptation of the specification related to the so-called JMS Message Model [5].",
                "According to this, JMS messages are characterised by some properties defined using the header field, which contains values that are used by both clients and providers for their delivery.",
                "The aspects discussed in the remainder of this section are valid for both models (point to point and publish-subscribe).",
                "A JMS message can be persistent or non-persistent.",
                "According to the JMS specification, persistent messages must be delivered with a higher degree of reliability than the nonpersistent ones.",
                "However, it is worth noting that it is not possible to ensure once-and-only-once reliability for persistent messages as defined in the specification, since, as we discussed in the previous subsection, the underlying <br>epidemic protocol</br> can guarantee only best-effort delivery.",
                "However, clients maintain a list of the identifiers of the recently received messages to avoid the delivery of message duplicates.",
                "In other words, we provide the applications with at-mostonce reliability for both types of messages.",
                "In order to implement different levels of reliability, EMMA treats persistent and non-persistent messages differently, during the execution of the anti-entropy <br>epidemic protocol</br>.",
                "Since the message buffer space is limited, persistent messages are preferentially replicated using the available free space.",
                "If this is insufficient and non-persistent messages are present in the buffer, these are replaced.",
                "Only the successful deliveries of the persistent messages are notified to the senders.",
                "According to the JMS specification, it is possible to assign a priority to each message.",
                "The messages with higher priorities are delivered in a preferential way.",
                "As discussed above, persistent messages are prioritised above the non-persistent ones.",
                "Further selection is based on their priorities.",
                "Messages with higher priorities are treated in a preferential way.",
                "In fact, if there is not enough space to replicate all the persistent messages, a mechanism based on priorities is used to delete and replicate non-persistent messages (and, if necessary, persistent messages).",
                "Messages are deleted from the buffers using the expiration time value that can be set by senders.",
                "This is a way to free space in the buffers (one preferentially deletes older messages in cases of conflict); to eliminate stale replicas in the system; and to limit the time for which destinations must hold message identifiers to dispose of duplicates. 4.4 Reliability and Acknowledgment Mechanisms As already discussed, at-most-once message delivery is the best that can be achieved in terms of delivery semantics in partially connected ad-hoc settings.",
                "However, it is possible to improve the reliability of the system with efficient acknowledgment mechanisms.",
                "EMMA provides a mechanism for failure notification to applications if the acknowledgment is not received within a given timeout (that can be configured by application developers).",
                "This mechanism is the one that distinguishes the delivery of persistent and non-persistent messages in our JMS implementation: the deliveries of the former are notified to the senders, whereas the latter are not.",
                "We use acknowledgment messages not only to inform senders about the successful delivery of messages but also to delete the replicas of the delivered messages that are still present in the network.",
                "Each host maintains a list of the messages Middleware for Pervasive and ad-hoc Computing 124 successfully delivered that is updated as part of the normal process of information exchange between the hosts.",
                "The lists are exchanged during the first steps of the anti-entropic <br>epidemic protocol</br> with a certain predefined frequency.",
                "In the case of messages with multiple recipients, a list of the actual recipients is also stored.",
                "When a host receives the list, it checks its message buffer and updates it according to the following rules: (1) if a message has a single recipient and it has been delivered, it is deleted from the buffer; (2) if a message has multiple recipients, the identifiers of the delivered hosts are deleted from the associated list of recipients.",
                "If the resulting length of the list of recipients is zero, the message is deleted from the buffer.",
                "These lists have, clearly, finite dimensions and are implemented as circular queues.",
                "This simple mechanism, together with the use of expiration timestamps, guarantees that the old acknowledgment notifications are deleted from the system after a limited period of time.",
                "In order to improve the reliability of EMMA, a design mechanism for intelligent replication of queues and topics based on the context information could be developed.",
                "However this is not yet part of the current architecture of EMMA. 5.",
                "IMPLEMENTATION AND PRELIMINARY EVALUATION We implemented a prototype of our platform using the J2ME Personal Profile.",
                "The size of the executable is about 250KB including the JMS 1.1 jar file; this is a perfectly acceptable figure given the available memory of the current mobile devices on the market.",
                "We tested our prototype on HP IPaq PDAs running Linux, interconnected with WaveLan, and on a number of laptops with the same network interface.",
                "We also evaluated the middleware platform using the OMNET++ discrete event simulator [17] in order to explore a range of mobile scenarios that incorporated a more realistic number of hosts than was achievable experimentally.",
                "More specifically, we assessed the performance of the system in terms of delivery ratio and average delay, varying the density of population and the buffer size, and using persistent and non-persistent messages with different priorities.",
                "The simulation results show that the EMMAs performance, in terms of delivery ratio and delay of persistent messages with higher priorities, is good.",
                "In general, it is evident that the delivery ratio is strongly related to the correct dimensioning of the buffers to the maximum acceptable delay.",
                "Moreover, the epidemic algorithms are able to guarantee a high delivery ratio if one evaluates performance over a time interval sufficient for the dissemination of the replicas of messages (i.e., the infection spreading) in a large portion of the ad-hoc network.",
                "One consequence of the dimensioning problem is that scalability may be seriously impacted in peer-to-peer middleware for mobile computing due to the resource poverty of the devices (limited memory to store temporarily messages) and the number of possible interconnections in ad-hoc settings.",
                "What is worse is that common forms of commercial and social organisation (six degrees of separation) mean that even modest TTL values on messages will lead to widespread flooding of epidemic messages.",
                "This problem arises because of the lack of intelligence in the <br>epidemic protocol</br>, and can be addressed by selecting carrier nodes for messages with greater care.",
                "The details of this process are, however, outside the scope of this paper (but may be found in [13]) and do not affect the foundation on which the EMMA middleware is based: the ability to deliver messages asynchronously. 6.",
                "CRITICAL VIEW OF THE STATE OF THE ART The design of middleware platforms for mobile computing requires researchers to answer new and fundamentally different questions; simply assuming the presence of wired portions of the network on which centralised functionality can reside is not generalisable.",
                "Thus, it is necessary to investigate novel design principles and to devise architectural patterns that differ from those traditionally exploited in the design of middleware for fixed systems.",
                "As an example, consider the recent cross-layering trend in ad-hoc networking [1].",
                "This is a way of re-thinking software systems design, explicitly abandoning the classical forms of layering, since, although this separation of concerns afford portability, it does so at the expense of potential efficiency gains.",
                "We believe that it is possible to view our approach as an instance of cross-layering.",
                "In fact, we have added the epidemic network protocol at middleware level and, at the same time, we have used the existing synchronous network protocol if present both in delivering messages (traditional layering) and in informing the middleware about when messages may be delivered by revealing details of the forwarding tables (layer violation).",
                "For this reason, we prefer to consider them jointly as the communication layer of our platform together providing more efficient message delivery.",
                "Another interesting aspect is the exploitation of context and system information to improve the performance of mobile middleware platforms.",
                "Again, as a result of adopting a cross-layering methodology, we are able to build systems that gather information from the underlying operating system and communication components in order to allow for adaptation of behaviour.",
                "We can summarise this conceptual design approach by saying that middleware platforms must be not only context-aware (i.e., they should be able to extract and analyse information from the surrounding context) but also system-aware (i.e., they should be able to gather information from the software and hardware components of the mobile system).",
                "A number of middleware systems have been developed to support ad-hoc networking with the use of asynchronous communication (such as LIME, XMIDDLE, STEAM [11]).",
                "In particular, the STEAM platform is an interesting example of event-based middleware for ad-hoc networks, providing location-aware message delivery and an effective solution for event filtering.",
                "A discussion of JMS, and its mobile realisation, has already been conducted in Sections 4 and 2.",
                "The Swiss company Softwired has developed the first JMS middleware for mobile computing, called iBus Mobile [10].",
                "The main components of this typically infrastructure-based architecture are the JMS provider, the so-called mobile JMS gateway, which is deployed on a fixed host and a lightweight JMS client library.",
                "The gateway is used for the communication between the application server and mobile hosts.",
                "The gateway is seen by the JMS provider as a normal JMS client.",
                "The JMS provider can be any JMS-enabled application server, such as BEA Weblogic.",
                "Pronto [19] is an example of mid125 Middleware 2004 Companion dleware system based on messaging that is specifically designed for mobile environments.",
                "The platform is composed of three classes of components: mobile clients implementing the JMS specification, gateways that control traffic, guaranteeing efficiency and possible user customizations using different plug-ins and JMS servers.",
                "Different configurations of these components are possible; with respect to mobile ad hoc networks applications, the most interesting is Serverless JMS.",
                "The aim of this configuration is to adapt JMS to a decentralized model.",
                "The publish-subscribe model exploits the efficiency and the scalability of the underlying IP multicast protocol.",
                "Unreliable and reliable message delivery services are provided: reliability is provided through a negative acknowledgment-based protocol.",
                "Pronto represents a good solution for infrastructure-based mobile networks but it does not adequately target ad-hoc settings, since mobile nodes rely on fixed servers for the exchange of messages.",
                "Other MOM implemented for mobile environments exist; however, they are usually straightforward extensions of existing middleware [8].",
                "The only implementation of MOM specifically designed for mobile ad-hoc networks was developed at the University of Newcastle [18].",
                "This work is again a JMS adaptation; the focus of that implementation is on group communication and the use of application level routing algorithms for topic delivery of messages.",
                "However, there are a number of differences in the focus of our work.",
                "The importance that we attribute to disconnections makes persistence a vital requirement for any middleware that needs to be used in mobile ad-hoc networks.",
                "The authors of [18] signal persistence as possible future work, not considering the fact that routing a message to a non-connected host will result in delivery failure.",
                "This is a remarkable limitation in mobile settings where unpredictable disconnections are the norm rather than the exception. 7.",
                "ROADMAP AND CONCLUSIONS Asynchronous communication is a useful communication paradigm for mobile ad-hoc networks, as hosts are allowed to come, go and pick up messages when convenient, also taking account of their resource availability (e.g., power, connectivity levels).",
                "In this paper we have described the state of the art in terms of MOM for mobile systems.",
                "We have also shown a proof of concept adaptation of JMS to the extreme scenario of partially connected mobile ad-hoc networks.",
                "We have described and discussed the characteristics and differences of our solution with respect to traditional JMS implementations and the existing adaptations for mobile settings.",
                "However, trade-offs between application-level routing and resource usage should also be investigated, as mobile devices are commonly power/resource scarce.",
                "A key limitation of this work is the poorly performing epidemic algorithm and an important advance in the practicability of this work requires an algorithm that better balances the needs of efficiency and message delivery probability.",
                "We are currently working on algorithms and protocols that, exploiting probabilistic and statistical techniques on the basis of small amounts of exchanged information, are able to improve considerably the efficiency in terms of resources (memory, bandwidth, etc) and the reliability of our middleware platform [13].",
                "One futuristic research development, which may take these ideas of adaptation of messaging middleware for mobile environments further is the introduction of more mobility oriented communication extensions, for instance the support of geocast (i.e., the ability to send messages to specific geographical areas). 8.",
                "REFERENCES [1] M. Conti, G. Maselli, G. Turi, and S. Giordano.",
                "Cross-layering in Mobile ad-hoc Network Design.",
                "IEEE Computer, 37(2):48-51, February 2004. [2] A. Demers, D. Greene, C. Hauser, W. Irish, J. Larson, S. Shenker, H. Sturgis, D. Swinehart, and D. Terry.",
                "Epidemic Algorithms for Replicated Database Maintenance.",
                "In Sixth Symposium on Principles of Distributed Computing, pages 1-12, August 1987. [3] A. Doria, M. Uden, and D. P. Pandey.",
                "Providing connectivity to the Saami nomadic community.",
                "In Proceedings of the Second International Conference on Open Collaborative Design for Sustainable Innovation, December 2002. [4] M. Haahr, R. Cunningham, and V. Cahill.",
                "Supporting CORBA applications in a Mobile Environment.",
                "In 5th International Conference on Mobile Computing and Networking (MOBICOM99), pages 36-47.",
                "ACM, August 1999. [5] M. Hapner, R. Burridge, R. Sharma, J. Fialli, and K. Stout.",
                "Java Message Service Specification Version 1.1.",
                "Sun Microsystems, Inc., April 2002. http://java.sun.com/products/jms/. [6] J. Hart.",
                "WebSphere MQ: Connecting your applications without complex programming.",
                "IBM WebSphere Software White Papers, 2003. [7] S. Hayward and M. Pezzini.",
                "Marrying Middleware and Mobile Computing.",
                "Gartner Group Research Report, September 2001. [8] IBM.",
                "WebSphere MQ EveryPlace Version 2.0, November 2002. http://www-3.ibm.com/software/integration/wmqe/. [9] ITU.",
                "Connecting remote communities.",
                "Documents of the World Summit on Information Society, 2003. http://www.itu.int/osg/spu/wsis-themes. [10] S. Maffeis.",
                "Introducing Wireless JMS.",
                "Softwired AG, www.sofwired-inc.com, 2002. [11] C. Mascolo, L. Capra, and W. Emmerich.",
                "Middleware for Mobile Computing.",
                "In E. Gregori, G. Anastasi, and S. Basagni, editors, Advanced Lectures on Networking, volume 2497 of Lecture Notes in Computer Science, pages 20-58.",
                "Springer Verlag, 2002. [12] Microsoft.",
                "Microsoft Message Queuing (MSMQ) Version 2.0 Documentation. [13] M. Musolesi, S. Hailes, and C. Mascolo.",
                "Adaptive routing for intermittently connected mobile ad-hoc networks.",
                "Technical report, UCL-CS Research Note, July 2004.",
                "Submitted for Publication. [14] Sun Microsystems.",
                "Java Naming and Directory Interface (JNDI) Documentation Version 1.2. 2003. http://java.sun.com/products/jndi/. [15] Sun Microsystems.",
                "Jini Specification Version 2.0, 2003. http://java.sun.com/products/jini/. [16] A. Vahdat and D. Becker.",
                "Epidemic routing for Partially Connected ad-hoc Networks.",
                "Technical Report CS-2000-06, Department of Computer Science, Duke University, 2000. [17] A. Vargas.",
                "The OMNeT++ discrete event simulation system.",
                "In Proceedings of the European Simulation Multiconference (ESM2001), Prague, June 2001. [18] E. Vollset, D. Ingham, and P. Ezhilchelvan.",
                "JMS on Mobile ad-hoc Networks.",
                "In Personal Wireless Communications (PWC), pages 40-52, Venice, September 2003. [19] E. Yoneki and J. Bacon.",
                "Pronto: Mobilegateway with publish-subscribe paradigm over wireless network.",
                "Technical Report 559, University of Cambridge, Computer Laboratory, February 2003.",
                "Middleware for Pervasive and ad-hoc Computing 126"
            ],
            "original_annotated_samples": [
                "If two hosts are in the same cloud (i.e., a connected path exists between them), but no synchronous protocol is available, the messages are sent using the <br>epidemic protocol</br>.",
                "Given the existence of an <br>epidemic protocol</br>, the discovery mechanism consists of advertising the queues to the hosts that are currently unreachable using analogous mechanisms.",
                "The topic holder then forwards the message to all subscribers, using the synchronous protocol if possible, the <br>epidemic protocol</br> otherwise.",
                "With respect to durable subscriptions, if a subscriber becomes disconnected, notifications are not stored but are sent using the <br>epidemic protocol</br> rather than the synchronous protocol.",
                "On the other hand, if a non-durable subscriber becomes disconnected, its subscription is deleted; in other words, during disconnections, notifications are not sent using the <br>epidemic protocol</br> but exploit only the synchronous protocol."
            ],
            "translated_annotated_samples": [
                "Si dos hosts están en la misma nube (es decir, existe un camino conectado entre ellos), pero no hay disponible un protocolo síncrono, los mensajes se envían utilizando el <br>protocolo epidémico</br>.",
                "Dado la existencia de un <br>protocolo de epidemia</br>, el mecanismo de descubrimiento consiste en publicitar las colas a los hosts que actualmente son inalcanzables utilizando mecanismos análogos.",
                "El titular del tema luego reenvía el mensaje a todos los suscriptores, utilizando el protocolo síncrono si es posible, de lo contrario el <br>protocolo epidémico</br>.",
                "En lo que respecta a las suscripciones duraderas, si un suscriptor se desconecta, las notificaciones no se almacenan, sino que se envían utilizando el <br>protocolo epidémico</br> en lugar del protocolo síncrono.",
                "Por otro lado, si un suscriptor no duradero se desconecta, su suscripción se elimina; en otras palabras, durante las desconexiones, las notificaciones no se envían utilizando el <br>protocolo epidémico</br>, sino que solo se aprovecha el protocolo síncrono."
            ],
            "translated_text": "Adaptando Middleware de Mensajería Asincrónica a Redes Ad-hoc Mirco Musolesi Dept. Las características de los entornos móviles, con la posibilidad de desconexiones frecuentes y ancho de banda fluctuante, han obligado a replantear el middleware tradicional. En particular, los paradigmas de comunicación síncrona a menudo empleados en middleware estándar no parecen ser particularmente adecuados para entornos ad-hoc, en los que ni siquiera se puede asumir la disponibilidad intermitente de una red troncal. En cambio, la comunicación asincrónica parece ser un paradigma generalmente más adecuado para este tipo de entornos. Se ha desarrollado y utilizado middleware orientado a mensajes para sistemas tradicionales con el fin de proporcionar un paradigma de comunicación asíncrona para sistemas distribuidos, y, recientemente, también para algunos sistemas específicos de computación móvil. En este artículo, presentamos nuestra experiencia en el diseño, implementación y evaluación de EMMA (Middleware de Mensajería Epidémica para redes ad-hoc), una adaptación del Servicio de Mensajes Java (JMS) para entornos móviles ad-hoc. Discutimos en detalle los desafíos de diseño y algunas posibles soluciones, mostrando un ejemplo concreto de la viabilidad y adecuación de la aplicación del paradigma asíncrono en este contexto y delineando un plan de investigación para los próximos años. Categorías y Descriptores de Asignaturas C.2.4 [Redes de Computadoras-Comunicación]: Sistemas Distribuidos-Aplicaciones Distribuidas; C.2.1 [Arquitectura y Diseño de Redes]: Comunicación Inalámbrica Términos Generales DISEÑO, ALGORITMOS 1. INTRODUCCIÓN Con la creciente popularidad de los dispositivos móviles y su amplia adopción, existe una clara necesidad de permitir el desarrollo de un amplio espectro de aplicaciones que operen de manera efectiva en dicho entorno. Lamentablemente, esto está lejos de ser simple: los dispositivos móviles son cada vez más heterogéneos en cuanto a capacidades de procesamiento, tamaño de memoria, capacidad de batería e interfaces de red. Cada una de estas configuraciones tiene características sustancialmente diferentes que son estáticamente distintas, por ejemplo, hay una gran diferencia en la capacidad entre un mote de Berkeley y un portátil equipado con 802.11g, y que varían dinámicamente, como en situaciones de ancho de banda fluctuante y conectividad intermitente. Los entornos móviles ad hoc tienen un elemento adicional de complejidad en que son completamente descentralizados. Para poder desarrollar aplicaciones para entornos tan complejos, es esencial contar con una forma adecuada de middleware si se busca lograr un desarrollo rentable. En este artículo, examinamos uno de los aspectos fundamentales de middleware para entornos móviles ad-hoc: el de los primitivos de comunicación. Tradicionalmente, los primitivos de middleware más utilizados para la comunicación asumen la presencia simultánea de ambos puntos finales en una red, ya que la estabilidad y la ubicuidad de la infraestructura de redes no es una suposición irrazonable para la mayoría de los entornos cableados. En otras palabras, la mayoría de los paradigmas de comunicación son síncronos: middleware orientado a objetos como CORBA y Java RMI son ejemplos típicos de middleware basado en comunicación síncrona. En los últimos años, ha habido un creciente interés en plataformas basadas en paradigmas de comunicación asincrónica, como los sistemas de publicación-suscripción: estos han sido explotados con mucho éxito donde existe asincronía a nivel de aplicación. De acuerdo con un informe de mercado de Gartner [7]: Dada la popularidad, escalabilidad, flexibilidad y afinidad con arquitecturas móviles e inalámbricas de los middlewares orientados a mensajes (MOM), para el año 2004, es probable que MOM se convierta en la forma dominante de middleware de comunicación para vincular aplicaciones móviles y empresariales (probabilidad del 0.7)... Además, en sistemas ad-hoc móviles, la probabilidad de fragmentación de la red significa que la comunicación síncrona puede resultar impracticable en cualquier caso, lo que da lugar a situaciones en las que el tráfico asincrónico tolerante a retrasos es la única forma de tráfico que podría ser admitida. El middleware para entornos ad-hoc móviles debe, por lo tanto, admitir primitivas de comunicación semi-síncronas o completamente asíncronas si se quiere evitar limitaciones sustanciales en su utilidad. Además del desafío intelectual que implica apoyar este modelo, este trabajo también es interesante porque existen varios ámbitos de aplicación práctica al permitir la comunicación entre comunidades en áreas subdesarrolladas del mundo. Por lo tanto, por ejemplo, proyectos que se han llevado a cabo para ayudar a poblaciones que viven en lugares remotos del mundo como Laponia o en áreas pobres que carecen de infraestructura de conectividad fija. Ha habido intentos de proporcionar middleware móvil con estas propiedades, incluyendo STEAM, LIME, XMIDDLE, Bayou (consulte [11] para una revisión más completa del middleware móvil). Estos modelos difieren considerablemente de los middleware tradicionales existentes en cuanto a los primitivos proporcionados. Además, algunos de ellos fallan en proporcionar una solución para los verdaderos escenarios ad-hoc. Si el éxito proyectado de MOM se convierte en algo parecido a la realidad, habrá muchos programadores con experiencia en ello. La solución ideal al problema del middleware para sistemas ad-hoc es, entonces, permitir a los programadores utilizar los mismos paradigmas y modelos presentados por formas comunes de MOM y asegurar que estos paradigmas sean soportables dentro del entorno móvil. Este enfoque tiene claras ventajas al permitir que las aplicaciones desarrolladas en plataformas de middleware estándar se desplieguen fácilmente en dispositivos móviles. De hecho, algunas investigaciones ya han llevado a la adaptación de plataformas de middleware tradicionales a entornos móviles, principalmente para proporcionar integración entre dispositivos móviles y redes fijas existentes en un entorno nómada (es decir, mixto) [4]. En lo que respecta al middleware orientado a mensajes, las implementaciones actuales, sin embargo, asumen la existencia de una red troncal a la que los hosts móviles se conectan de vez en cuando mientras están en itinerancia [10], o asumen que los nodos siempre son de alguna manera accesibles a través de un camino [18]. No se ha intentado ninguna adaptación a escenarios heterogéneos o completamente ad hoc, con desconexiones frecuentes y nubes periódicamente aisladas de hosts. En el resto de este documento describimos un intento inicial de adaptar middleware orientado a mensajes para que se ajuste a dispositivos móviles y, más específicamente, a redes móviles ad-hoc. En nuestro caso, elegimos examinar JMS, como uno de los sistemas MOM más conocidos. En la última parte de este documento, exploramos las limitaciones de nuestros resultados y describimos los planes que tenemos para llevar a cabo el trabajo más adelante. Los sistemas de middleware orientados a mensajes y el Servicio de Mensajes de Java (JMS) admiten la comunicación entre componentes distribuidos a través del paso de mensajes: el remitente envía un mensaje a colas identificadas, que generalmente residen en un servidor. Un receptor recupera el mensaje de la cola en un momento diferente y puede confirmar la respuesta utilizando el mismo mecanismo asíncrono. La middleware orientada a mensajes soporta la comunicación asíncrona de una manera muy natural, logrando el desacoplamiento de emisores y receptores. Un remitente puede continuar procesando tan pronto como el middleware haya aceptado el mensaje; eventualmente, el receptor enviará un mensaje de confirmación y el remitente podrá recogerlo en un momento conveniente. Sin embargo, dado la forma en que están implementados, estos sistemas de middleware suelen requerir dispositivos con recursos abundantes, especialmente en términos de memoria y espacio en disco, donde se almacenan colas persistentes de mensajes que han sido recibidos pero aún no procesados. Sun Java Message Service [5], IBM WebSphere MQ [6], Microsoft MSMQ [12] son ejemplos de middleware orientado a mensajes muy exitosos para sistemas distribuidos tradicionales. El Servicio de Mensajería de Java (JMS) es una colección de interfaces para la comunicación asincrónica entre componentes distribuidos. Proporciona una forma común para que los programas de Java creen, envíen y reciban mensajes. Los usuarios de JMS suelen ser referidos como clientes. La especificación JMS define además a los proveedores como los componentes encargados de implementar el sistema de mensajería y proporcionar la funcionalidad administrativa y de control (es decir, persistencia y confiabilidad) requerida por el sistema. Los clientes pueden enviar y recibir mensajes, de forma asincrónica, a través del proveedor JMS, que se encarga de la entrega y, posiblemente, de la persistencia de los mensajes. Hay dos tipos de comunicación admitidos: modelos punto a punto y de publicación-suscripción. En el modelo punto a punto, los hosts envían mensajes a colas. Los receptores pueden ser registrados con algunas colas específicas, y pueden recuperar los mensajes de forma asíncrona para luego confirmar su recepción. El modelo de publicación-suscripción se basa en el uso de temas a los que los clientes pueden suscribirse. Los mensajes son enviados a los temas por otros clientes y luego son recibidos de forma asíncrona por todos los clientes suscritos. Los clientes aprenden sobre los temas y colas disponibles a través de la Interfaz de Nombres y Directorios de Java (JNDI) [14]. Las colas y los temas son creados por un administrador en el proveedor y se registran con la interfaz JNDI para su búsqueda. En la siguiente sección, presentamos los desafíos de las redes móviles y mostramos cómo JMS puede adaptarse para cumplir con estos requisitos. 3. JMS PARA COMPUTACIÓN MÓVIL Las redes móviles varían mucho en sus características, desde redes nómadas en las que los nodos se desplazan mientras están desconectados, hasta redes ad-hoc en las que los nodos se mueven libremente y no hay infraestructura. Las redes móviles ad-hoc son más comúnmente aplicables en situaciones donde la supervivencia y la capacidad de despliegue instantáneo son clave: especialmente en aplicaciones militares y de ayuda en casos de desastre. Entre estos dos tipos de redes móviles, sin embargo, existen una serie de posibles combinaciones heterogéneas, donde se utilizan paradigmas nómadas y ad-hoc para interconectar áreas totalmente inalámbricas con redes más estructuradas (como una LAN o Internet). Si bien la especificación JMS ha sido ampliamente implementada y utilizada en sistemas distribuidos tradicionales, las adaptaciones para entornos móviles han sido propuestas recientemente. Los desafíos de adaptar JMS a entornos móviles son considerables; sin embargo, dada su amplia aceptación y uso, existen ventajas considerables al permitir la adaptación de aplicaciones existentes a entornos móviles y al permitir la interoperabilidad de aplicaciones en las regiones cableadas e inalámbricas de una red. En [10], JMS se adaptó a un entorno móvil nómada, donde los hosts móviles pueden ser clientes de JMS y comunicarse a través del proveedor de JMS que, sin embargo, se encuentra en una red troncal, proporcionando fiabilidad y persistencia. El prototipo del cliente presentado en [10] es muy ligero, debido a la delegación de toda la funcionalidad pesada al proveedor Middleware para Computación Pervasive y ad-hoc 122 en la red cableada. Sin embargo, este enfoque es algo limitado en términos de aplicabilidad generalizada y escalabilidad como consecuencia de la concentración de funcionalidad en la parte cableada de la red. Si se quiere adaptar JMS a entornos completamente ad hoc, donde no haya infraestructura fija disponible y donde los nodos cambien de ubicación y estado de forma muy dinámica, se deben tener en cuenta más problemas. En primer lugar, el descubrimiento necesita utilizar un modelo resiliente pero distribuido: en este entorno extremadamente dinámico, las soluciones estáticas son inaceptables. Como se discute en la Sección 2, un administrador de JMS define colas y temas en el proveedor. Los clientes pueden entonces aprender sobre ellos utilizando la Interfaz de Nombres y Directorios de Java (JNDI). Sin embargo, debido a la forma en que está diseñado JNDI, es necesario que un nodo de JNDI (o más de uno) esté al alcance para obtener una vinculación de un nombre a una dirección (es decir, saber dónde se encuentra una cola o un tema específico). En entornos móviles ad-hoc, el proceso de descubrimiento no puede asumir la existencia de un conjunto fijo de servidores de descubrimiento que siempre sean accesibles, ya que esto no coincidiría con la dinámica de las redes ad-hoc. En segundo lugar, un Proveedor de JMS, como sugiere la especificación de JMS, también debe ser accesible para cada nodo en la red, para poder comunicarse. Esto asume una arquitectura muy centralizada, que nuevamente no coincide con los requisitos de un entorno ad-hoc móvil, en el que los nodos pueden estar en movimiento y dispersos: se necesita una solución más distribuida y dinámica. La persistencia es, sin embargo, una funcionalidad esencial en entornos de comunicación asincrónica, ya que los hosts están, por definición, conectados en momentos diferentes. En la siguiente sección, discutiremos nuestra experiencia en el diseño e implementación de JMS para redes móviles ad-hoc. 4. El desarrollo de aplicaciones para redes móviles es aún más desafiante: además de las mismas consideraciones que para entornos inalámbricos infraestructurados, como las limitadas capacidades de los dispositivos y las restricciones de energía, existen problemas relacionados con la velocidad de cambio de la conectividad de la red y la falta de una infraestructura de enrutamiento estática. En consecuencia, ahora describimos un intento inicial de adaptar la especificación JMS para satisfacer los requisitos particulares relacionados con escenarios ad-hoc. Como se discute en la Sección 3, una aplicación JMS puede utilizar tanto el estilo de mensajería punto a punto como el de publicación-suscripción. Modelo de punto a punto. El modelo de punto a punto se basa en el concepto de colas, que se utilizan para habilitar la comunicación asincrónica entre el productor de un mensaje y posibles consumidores diferentes. En nuestra solución, la ubicación de las colas se determina mediante un proceso de negociación que depende de la aplicación. Por ejemplo, supongamos que es posible saber a priori, o es posible determinar dinámicamente, que cierto host es el receptor de la mayor parte de los mensajes enviados a una cola particular. En este caso, la ubicación óptima de la cola bien podría estar en este host en particular. En general, vale la pena señalar que, según la especificación de JMS y los patrones de diseño sugeridos, es común y preferible que un cliente tenga todos sus mensajes entregados a una sola cola. Las colas se anuncian periódicamente a los anfitriones que se encuentran dentro del rango de transmisión o que son alcanzables mediante el protocolo de comunicación síncrona subyacente, si se proporciona. Es importante tener en cuenta que, a nivel de middleware, es lógicamente irrelevante si la capa de red implementa alguna forma de enrutamiento ad-hoc (aunque considerablemente más eficiente si lo hace); el middleware solo considera información sobre qué nodos son accesibles activamente en cualquier momento. Los hosts que reciben mensajes publicitarios agregan entradas a su registro JNDI. Cada entrada se caracteriza por un arrendamiento (un mecanismo similar al presente en Jini [15]). Un contrato de arrendamiento representa el tiempo de validez de una entrada particular. Si un arrendamiento no se renueva (es decir, su vida no se extiende), puede vencer y, en consecuencia, la entrada se elimina del registro. En otras palabras, el anfitrión asume que la cola será inaccesible a partir de ese momento. Esto puede ser causado, por ejemplo, si un host que almacena la cola se vuelve inaccesible. Un host que inicia un proceso de descubrimiento encontrará los temas y las colas presentes en su porción conectada de la red de manera directa. Para enviar un mensaje a un anfitrión que actualmente no está al alcance, utilizamos un protocolo de enrutamiento de epidemia asíncrono que se discutirá en detalle en la Sección 4.2. Si dos hosts están en la misma nube (es decir, existe un camino conectado entre ellos), pero no hay disponible un protocolo síncrono, los mensajes se envían utilizando el <br>protocolo epidémico</br>. En este caso, la latencia de entrega será baja como resultado de la rapidez de propagación de la infección en la nube conectada (ver también los resultados de la simulación en la Sección 5). Dado la existencia de un <br>protocolo de epidemia</br>, el mecanismo de descubrimiento consiste en publicitar las colas a los hosts que actualmente son inalcanzables utilizando mecanismos análogos. En el modelo de publicación-suscripción, algunos de los hosts son designados de manera similar para mantener temas y almacenar suscripciones, como antes. Los temas se anuncian a través del registro de la misma manera que las colas, y un cliente que desee suscribirse a un tema debe registrarse con el cliente que tiene el tema. Cuando un cliente desea enviar un mensaje a la lista de temas, lo envía al titular del tema (de la misma manera que enviaría un mensaje a una cola). El titular del tema luego reenvía el mensaje a todos los suscriptores, utilizando el protocolo síncrono si es posible, de lo contrario el <br>protocolo epidémico</br>. Vale la pena señalar que utilizamos un único mensaje con múltiples destinatarios, en lugar de múltiples mensajes con múltiples destinatarios. Cuando un mensaje es entregado a uno de los suscriptores, este destinatario es eliminado de la lista. Para eliminar las posibles réplicas restantes, empleamos mensajes de acuse de recibo (discutidos en la Sección 4.4), devueltos de la misma manera que un mensaje normal. También hemos adaptado los conceptos de suscripciones duraderas y no duraderas para entornos ad-hoc. En las plataformas fijas, las suscripciones duraderas se mantienen durante las desconexiones de los clientes, ya sean intencionales o resultado de fallas. En los sistemas tradicionales, cuando un suscriptor duradero se desconecta del servidor, es responsable de almacenar los mensajes. Cuando el suscriptor duradero se reconecta, el servidor le envía todos los mensajes no caducados. El problema es que, en nuestro escenario, las desconexiones son la norma. En teoría, no es posible enviar un mensaje a un par que nunca ha sido alcanzable en el pasado, ya que no puede haber ninguna entrada presente en el registro. Sin embargo, para superar esta posible limitación, proporcionamos un mecanismo a través del cual la información puede ser añadida al registro sin utilizar los canales normales. 123 Middleware 2004 Companion en lugar de la excepción. En otras palabras, no podemos considerar las desconexiones como fallos. Por estas razones, adoptamos una semántica ligeramente diferente. En lo que respecta a las suscripciones duraderas, si un suscriptor se desconecta, las notificaciones no se almacenan, sino que se envían utilizando el <br>protocolo epidémico</br> en lugar del protocolo síncrono. En otras palabras, las notificaciones duraderas siguen siendo válidas durante las posibles desconexiones del suscriptor. Por otro lado, si un suscriptor no duradero se desconecta, su suscripción se elimina; en otras palabras, durante las desconexiones, las notificaciones no se envían utilizando el <br>protocolo epidémico</br>, sino que solo se aprovecha el protocolo síncrono. ",
            "candidates": [],
            "error": [
                [
                    "protocolo epidémico",
                    "protocolo de epidemia",
                    "protocolo epidémico",
                    "protocolo epidémico",
                    "protocolo epidémico"
                ]
            ]
        },
        "cross-layering": {
            "translated_key": "superposición de capas",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Adapting Asynchronous Messaging Middleware to ad-hoc Networking Mirco Musolesi Dept.",
                "of Computer Science, University College London Gower Street, London WC1E 6BT, United Kingdom m.musolesi@cs.ucl.ac.uk Cecilia Mascolo Dept. of Computer Science, University College London Gower Street, London WC1E 6BT, United Kingdom c.mascolo@cs.ucl.ac.uk Stephen Hailes Dept. of Computer Science, University College London Gower Street, London WC1E 6BT, United Kingdom s.hailes@cs.ucl.ac.uk ABSTRACT The characteristics of mobile environments, with the possibility of frequent disconnections and fluctuating bandwidth, have forced a rethink of traditional middleware.",
                "In particular, the synchronous communication paradigms often employed in standard middleware do not appear to be particularly suited to ad-hoc environments, in which not even the intermittent availability of a backbone network can be assumed.",
                "Instead, asynchronous communication seems to be a generally more suitable paradigm for such environments.",
                "Message oriented middleware for traditional systems has been developed and used to provide an asynchronous paradigm of communication for distributed systems, and, recently, also for some specific mobile computing systems.",
                "In this paper, we present our experience in designing, implementing and evaluating EMMA (Epidemic Messaging Middleware for ad-hoc networks), an adaptation of Java Message Service (JMS) for mobile ad-hoc environments.",
                "We discuss in detail the design challenges and some possible solutions, showing a concrete example of the feasibility and suitability of the application of the asynchronous paradigm in this setting and outlining a research roadmap for the coming years.",
                "Categories and Subject Descriptors C.2.4 [Computer-Communication Networks]: Distributed Systems-Distributed Applications; C.2.1 [Network Architecture and Design]: Wireless Communication General Terms DESIGN, ALGORITHMS 1.",
                "INTRODUCTION With the increasing popularity of mobile devices and their widespread adoption, there is a clear need to allow the development of a broad spectrum of applications that operate effectively over such an environment.",
                "Unfortunately, this is far from simple: mobile devices are increasingly heterogeneous in terms of processing capabilities, memory size, battery capacity, and network interfaces.",
                "Each such configuration has substantially different characteristics that are both statically different - for example, there is a major difference in capability between a Berkeley mote and an 802.11g-equipped laptop - and that vary dynamically, as in situations of fluctuating bandwidth and intermittent connectivity.",
                "Mobile ad hoc environments have an additional element of complexity in that they are entirely decentralised.",
                "In order to craft applications for such complex environments, an appropriate form of middleware is essential if cost effective development is to be achieved.",
                "In this paper, we examine one of the foundational aspects of middleware for mobile ad-hoc environments: that of the communication primitives.",
                "Traditionally, the most frequently used middleware primitives for communication assume the simultaneous presence of both end points on a network, since the stability and pervasiveness of the networking infrastructure is not an unreasonable assumption for most wired environments.",
                "In other words, most communication paradigms are synchronous: object oriented middleware such as CORBA and Java RMI are typical examples of middleware based on synchronous communication.",
                "In recent years, there has been growing interest in platforms based on asynchronous communication paradigms, such as publish-subscribe systems [6]: these have been exploited very successfully where there is application level asynchronicity.",
                "From a Gartner Market Report [7]: Given messageoriented-middlewares (MOM) popularity, scalability, flexibility, and affinity with mobile and wireless architectures, by 2004, MOM will emerge as the dominant form of communication middleware for linking mobile and enterprise applications (0.7 probability)....",
                "Moreover, in mobile ad-hoc systems, the likelihood of network fragmentation means that synchronous communication may in any case be impracticable, giving situations in which delay tolerant asynchronous traffic is the only form of traffic that could be supported. 121 Middleware 2004 Companion Middleware for mobile ad-hoc environments must therefore support semi-synchronous or completely asynchronous communication primitives if it is to avoid substantial limitations to its utility.",
                "Aside from the intellectual challenge in supporting this model, this work is also interesting because there are a number of practical application domains in allowing inter-community communication in undeveloped areas of the globe.",
                "Thus, for example, projects that have been carried out to help populations that live in remote places of the globe such as Lapland [3] or in poor areas that lack fixed connectivity infrastructure [9].",
                "There have been attempts to provide mobile middleware with these properties, including STEAM, LIME, XMIDDLE, Bayou (see [11] for a more complete review of mobile middleware).",
                "These models differ quite considerably from the existing traditional middleware in terms of primitives provided.",
                "Furthermore, some of them fail in providing a solution for the true ad-hoc scenarios.",
                "If the projected success of MOM becomes anything like a reality, there will be many programmers with experience of it.",
                "The ideal solution to the problem of middleware for ad-hoc systems is, then, to allow programmers to utilise the same paradigms and models presented by common forms of MOM and to ensure that these paradigms are supportable within the mobile environment.",
                "This approach has clear advantages in allowing applications developed on standard middleware platforms to be easily deployed on mobile devices.",
                "Indeed, some research has already led to the adaptation of traditional middleware platforms to mobile settings, mainly to provide integration between mobile devices and existing fixed networks in a nomadic (i.e., mixed) environment [4].",
                "With respect to message oriented middleware, the current implementations, however, either assume the existence of a backbone network to which the mobile hosts connect from time to time while roaming [10], or assume that nodes are always somehow reachable through a path [18].",
                "No adaptation to heterogeneous or completely ad-hoc scenarios, with frequent disconnection and periodically isolated clouds of hosts, has been attempted.",
                "In the remainder of this paper we describe an initial attempt to adapt message oriented middleware to suit mobile and, more specifically, mobile ad-hoc networks.",
                "In our case, we elected to examine JMS, as one of the most widely known MOM systems.",
                "In the latter part of this paper, we explore the limitations of our results and describe the plans we have to take the work further. 2.",
                "MESSAGE ORIENTED MIDDLEWARE AND JAVA MESSAGE SERVICE (JMS) Message-oriented middleware systems support communication between distributed components via message-passing: the sender sends a message to identified queues, which usually reside on a server.",
                "A receiver retrieves the message from the queue at a different time and may acknowledge the reply using the same asynchronous mechanism.",
                "Message-oriented middleware thus supports asynchronous communication in a very natural way, achieving de-coupling of senders and receivers.",
                "A sender is able to continue processing as soon as the middleware has accepted the message; eventually, the receiver will send an acknowledgment message and the sender will be able to collect it at a convenient time.",
                "However, given the way they are implemented, these middleware systems usually require resource-rich devices, especially in terms of memory and disk space, where persistent queues of messages that have been received but not yet processed, are stored.",
                "Sun Java Message Service [5], IBM WebSphere MQ [6], Microsoft MSMQ [12] are examples of very successful message-oriented middleware for traditional distributed systems.",
                "The Java Messaging Service (JMS) is a collection of interfaces for asynchronous communication between distributed components.",
                "It provides a common way for Java programs to create, send and receive messages.",
                "JMS users are usually referred to as clients.",
                "The JMS specification further defines providers as the components in charge of implementing the messaging system and providing the administrative and control functionality (i.e., persistence and reliability) required by the system.",
                "Clients can send and receive messages, asynchronously, through the JMS provider, which is in charge of the delivery and, possibly, of the persistence of the messages.",
                "There are two types of communication supported: point to point and publish-subscribe models.",
                "In the point to point model, hosts send messages to queues.",
                "Receivers can be registered with some specific queues, and can asynchronously retrieve the messages and then acknowledge them.",
                "The publish-subscribe model is based on the use of topics that can be subscribed to by clients.",
                "Messages are sent to topics by other clients and are then received in an asynchronous mode by all the subscribed clients.",
                "Clients learn about the available topics and queues through Java Naming and Directory Interface (JNDI) [14].",
                "Queues and topics are created by an administrator on the provider and are registered with the JNDI interface for look-up.",
                "In the next section, we introduce the challenges of mobile networks, and show how JMS can be adapted to cope with these requirements. 3.",
                "JMS FOR MOBILE COMPUTING Mobile networks vary very widely in their characteristics, from nomadic networks in which modes relocate whilst offline through to ad-hoc networks in which modes move freely and in which there is no infrastructure.",
                "Mobile ad-hoc networks are most generally applicable in situations where survivability and instant deployability are key: most notably in military applications and disaster relief.",
                "In between these two types of mobile networks, there are, however, a number of possible heterogeneous combinations, where nomadic and ad-hoc paradigms are used to interconnect totally unwired areas to more structured networks (such as a LAN or the Internet).",
                "Whilst the JMS specification has been extensively implemented and used in traditional distributed systems, adaptations for mobile environments have been proposed only recently.",
                "The challenges of porting JMS to mobile settings are considerable; however, in view of its widespread acceptance and use, there are considerable advantages in allowing the adaptation of existing applications to mobile environments and in allowing the interoperation of applications in the wired and wireless regions of a network.",
                "In [10], JMS was adapted to a nomadic mobile setting, where mobile hosts can be JMS clients and communicate through the JMS provider that, however, sits on a backbone network, providing reliability and persistence.",
                "The client prototype presented in [10] is very lightweight, due to the delegation of all the heavyweight functionality to the Middleware for Pervasive and ad-hoc Computing 122 provider on the wired network.",
                "However, this approach is somewhat limited in terms of widespread applicability and scalability as a consequence of the concentration of functionality in the wired portion of the network.",
                "If JMS is to be adapted to completely ad-hoc environments, where no fixed infrastructure is available, and where nodes change location and status very dynamically, more issues must be taken into consideration.",
                "Firstly, discovery needs to use a resilient but distributed model: in this extremely dynamic environment, static solutions are unacceptable.",
                "As discussed in Section 2, a JMS administrator defines queues and topics on the provider.",
                "Clients can then learn about them using the Java Naming and Directory Interface (JNDI).",
                "However, due to the way JNDI is designed, a JNDI node (or more than one) needs to be in reach in order to obtain a binding of a name to an address (i.e., knowing where a specific queue/topic is).",
                "In mobile ad-hoc environments, the discovery process cannot assume the existence of a fixed set of discovery servers that are always reachable, as this would not match the dynamicity of ad-hoc networks.",
                "Secondly, a JMS Provider, as suggested by the JMS specification, also needs to be reachable by each node in the network, in order to communicate.",
                "This assumes a very centralised architecture, which again does not match the requirements of a mobile ad-hoc setting, in which nodes may be moving and sparse: a more distributed and dynamic solution is needed.",
                "Persistence is, however, essential functionality in asynchronous communication environments as hosts are, by definition, connected at different times.",
                "In the following section, we will discuss our experience in designing and implementing JMS for mobile ad-hoc networks. 4.",
                "JMSFOR MOBILE ad-hoc NETWORKS 4.1 Adaptation of JMS for Mobile ad-hoc Networks Developing applications for mobile networks is yet more challenging: in addition to the same considerations as for infrastructured wireless environments, such as the limited device capabilities and power constraints, there are issues of rate of change of network connectivity, and the lack of a static routing infrastructure.",
                "Consequently, we now describe an initial attempt to adapt the JMS specification to target the particular requirements related to ad-hoc scenarios.",
                "As discussed in Section 3, a JMS application can use either the point to point and the publish-subscribe styles of messaging.",
                "Point to Point Model The point to point model is based on the concept of queues, that are used to enable asynchronous communication between the producer of a message and possible different consumers.",
                "In our solution, the location of queues is determined by a negotiation process that is application dependent.",
                "For example, let us suppose that it is possible to know a priori, or it is possible to determine dynamically, that a certain host is the receiver of the most part of messages sent to a particular queue.",
                "In this case, the optimum location of the queue may well be on this particular host.",
                "In general, it is worth noting that, according to the JMS specification and suggested design patterns, it is common and preferable for a client to have all of its messages delivered to a single queue.",
                "Queues are advertised periodically to the hosts that are within transmission range or that are reachable by means of the underlying synchronous communication protocol, if provided.",
                "It is important to note that, at the middleware level, it is logically irrelevant whether or not the network layer implements some form of ad-hoc routing (though considerably more efficient if it does); the middleware only considers information about which nodes are actively reachable at any point in time.",
                "The hosts that receive advertisement messages add entries to their JNDI registry.",
                "Each entry is characterized by a lease (a mechanism similar to that present in Jini [15]).",
                "A lease represents the time of validity of a particular entry.",
                "If a lease is not refreshed (i.e, its life is not extended), it can expire and, consequently, the entry is deleted from the registry.",
                "In other words, the host assumes that the queue will be unreachable from that point in time.",
                "This may be caused, for example, if a host storing the queue becomes unreachable.",
                "A host that initiates a discovery process will find the topics and the queues present in its connected portion of the network in a straightforward manner.",
                "In order to deliver a message to a host that is not currently in reach1 , we use an asynchronous epidemic routing protocol that will be discussed in detail in Section 4.2.",
                "If two hosts are in the same cloud (i.e., a connected path exists between them), but no synchronous protocol is available, the messages are sent using the epidemic protocol.",
                "In this case, the delivery latency will be low as a result of the rapidity of propagation of the infection in the connected cloud (see also the simulation results in Section 5).",
                "Given the existence of an epidemic protocol, the discovery mechanism consists of advertising the queues to the hosts that are currently unreachable using analogous mechanisms.",
                "Publish-Subscribe Model In the publish-subscribe model, some of the hosts are similarly designated to hold topics and store subscriptions, as before.",
                "Topics are advertised through the registry in the same way as are queues, and a client wishing to subscribe to a topic must register with the client holding the topic.",
                "When a client wishes to send a message to the topic list, it sends it to the topic holder (in the same way as it would send a message to a queue).",
                "The topic holder then forwards the message to all subscribers, using the synchronous protocol if possible, the epidemic protocol otherwise.",
                "It is worth noting that we use a single message with multiple recipients, instead of multiple messages with multiple recipients.",
                "When a message is delivered to one of the subscribers, this recipient is deleted from the list.",
                "In order to delete the other possible replicas, we employ acknowledgment messages (discussed in Section 4.4), returned in the same way as a normal message.",
                "We have also adapted the concepts of durable and non durable subscriptions for ad-hoc settings.",
                "In fixed platforms, durable subscriptions are maintained during the disconnections of the clients, whether these are intentional or are the result of failures.",
                "In traditional systems, while a durable subscriber is disconnected from the server, it is responsible for storing messages.",
                "When the durable subscriber reconnects, the server sends it all unexpired messages.",
                "The problem is that, in our scenario, disconnections are the norm 1 In theory, it is not possible to send a message to a peer that has never been reachable in the past, since there can be no entry present in the registry.",
                "However, to overcome this possible limitation, we provide a primitive through which information can be added to the registry without using the normal channels. 123 Middleware 2004 Companion rather than the exception.",
                "In other words, we cannot consider disconnections as failures.",
                "For these reasons, we adopt a slightly different semantics.",
                "With respect to durable subscriptions, if a subscriber becomes disconnected, notifications are not stored but are sent using the epidemic protocol rather than the synchronous protocol.",
                "In other words, durable notifications remain valid during the possible disconnections of the subscriber.",
                "On the other hand, if a non-durable subscriber becomes disconnected, its subscription is deleted; in other words, during disconnections, notifications are not sent using the epidemic protocol but exploit only the synchronous protocol.",
                "If the topic becomes accessible to this host again, it must make another subscription in order to receive the notifications.",
                "Unsubscription messages are delivered in the same way as are subscription messages.",
                "It is important to note that durable subscribers have explicitly to unsubscribe from a topic in order to stop the notification process; however, all durable subscriptions have a predefined expiration time in order to cope with the cases of subscribers that do not meet again because of their movements or failures.",
                "This feature is clearly provided to limit the number of the unnecessary messages sent around the network. 4.2 Message Delivery using Epidemic Routing In this section, we examine one possible mechanism that will allow the delivery of messages in a partially connected network.",
                "The mechanism we discuss is intended for the purposes of demonstrating feasibility; more efficient communication mechanisms for this environment are themselves complex, and are the subject of another paper [13].",
                "The asynchronous message delivery described above is based on a typical pure epidemic-style routing protocol [16].",
                "A message that needs to be sent is replicated on each host in reach.",
                "In this way, copies of the messages are quickly spread through connected networks, like an infection.",
                "If a host becomes connected to another cloud of mobile nodes, during its movement, the message spreads through this collection of hosts.",
                "Epidemic-style replication of data and messages has been exploited in the past in many fields starting with the distributed database systems area [2].",
                "Within epidemic routing, each host maintains a buffer containing the messages that it has created and the replicas of the messages generated by the other hosts.",
                "To improve the performance, a hash-table indexes the content of the buffer.",
                "When two hosts connect, the host with the smaller identifier initiates a so-called anti-entropy session, sending a list containing the unique identifiers of the messages that it currently stores.",
                "The other host evaluates this list and sends back a list containing the identifiers it is storing that are not present in the other host, together with the messages that the other does not have.",
                "The host that has started the session receives the list and, in the same way, sends the messages that are not present in the other host.",
                "Should buffer overflow occur, messages are dropped.",
                "The reliability offered by this protocol is typically best effort, since there is no guarantee that a message will eventually be delivered to its recipient.",
                "Clearly, the delivery ratio of the protocol increases proportionally to the maximum allowed delay time and the buffer size in each host (interesting simulation results may be found in [16]). 4.3 Adaptation of the JMS Message Model In this section, we will analyse the aspects of our adaptation of the specification related to the so-called JMS Message Model [5].",
                "According to this, JMS messages are characterised by some properties defined using the header field, which contains values that are used by both clients and providers for their delivery.",
                "The aspects discussed in the remainder of this section are valid for both models (point to point and publish-subscribe).",
                "A JMS message can be persistent or non-persistent.",
                "According to the JMS specification, persistent messages must be delivered with a higher degree of reliability than the nonpersistent ones.",
                "However, it is worth noting that it is not possible to ensure once-and-only-once reliability for persistent messages as defined in the specification, since, as we discussed in the previous subsection, the underlying epidemic protocol can guarantee only best-effort delivery.",
                "However, clients maintain a list of the identifiers of the recently received messages to avoid the delivery of message duplicates.",
                "In other words, we provide the applications with at-mostonce reliability for both types of messages.",
                "In order to implement different levels of reliability, EMMA treats persistent and non-persistent messages differently, during the execution of the anti-entropy epidemic protocol.",
                "Since the message buffer space is limited, persistent messages are preferentially replicated using the available free space.",
                "If this is insufficient and non-persistent messages are present in the buffer, these are replaced.",
                "Only the successful deliveries of the persistent messages are notified to the senders.",
                "According to the JMS specification, it is possible to assign a priority to each message.",
                "The messages with higher priorities are delivered in a preferential way.",
                "As discussed above, persistent messages are prioritised above the non-persistent ones.",
                "Further selection is based on their priorities.",
                "Messages with higher priorities are treated in a preferential way.",
                "In fact, if there is not enough space to replicate all the persistent messages, a mechanism based on priorities is used to delete and replicate non-persistent messages (and, if necessary, persistent messages).",
                "Messages are deleted from the buffers using the expiration time value that can be set by senders.",
                "This is a way to free space in the buffers (one preferentially deletes older messages in cases of conflict); to eliminate stale replicas in the system; and to limit the time for which destinations must hold message identifiers to dispose of duplicates. 4.4 Reliability and Acknowledgment Mechanisms As already discussed, at-most-once message delivery is the best that can be achieved in terms of delivery semantics in partially connected ad-hoc settings.",
                "However, it is possible to improve the reliability of the system with efficient acknowledgment mechanisms.",
                "EMMA provides a mechanism for failure notification to applications if the acknowledgment is not received within a given timeout (that can be configured by application developers).",
                "This mechanism is the one that distinguishes the delivery of persistent and non-persistent messages in our JMS implementation: the deliveries of the former are notified to the senders, whereas the latter are not.",
                "We use acknowledgment messages not only to inform senders about the successful delivery of messages but also to delete the replicas of the delivered messages that are still present in the network.",
                "Each host maintains a list of the messages Middleware for Pervasive and ad-hoc Computing 124 successfully delivered that is updated as part of the normal process of information exchange between the hosts.",
                "The lists are exchanged during the first steps of the anti-entropic epidemic protocol with a certain predefined frequency.",
                "In the case of messages with multiple recipients, a list of the actual recipients is also stored.",
                "When a host receives the list, it checks its message buffer and updates it according to the following rules: (1) if a message has a single recipient and it has been delivered, it is deleted from the buffer; (2) if a message has multiple recipients, the identifiers of the delivered hosts are deleted from the associated list of recipients.",
                "If the resulting length of the list of recipients is zero, the message is deleted from the buffer.",
                "These lists have, clearly, finite dimensions and are implemented as circular queues.",
                "This simple mechanism, together with the use of expiration timestamps, guarantees that the old acknowledgment notifications are deleted from the system after a limited period of time.",
                "In order to improve the reliability of EMMA, a design mechanism for intelligent replication of queues and topics based on the context information could be developed.",
                "However this is not yet part of the current architecture of EMMA. 5.",
                "IMPLEMENTATION AND PRELIMINARY EVALUATION We implemented a prototype of our platform using the J2ME Personal Profile.",
                "The size of the executable is about 250KB including the JMS 1.1 jar file; this is a perfectly acceptable figure given the available memory of the current mobile devices on the market.",
                "We tested our prototype on HP IPaq PDAs running Linux, interconnected with WaveLan, and on a number of laptops with the same network interface.",
                "We also evaluated the middleware platform using the OMNET++ discrete event simulator [17] in order to explore a range of mobile scenarios that incorporated a more realistic number of hosts than was achievable experimentally.",
                "More specifically, we assessed the performance of the system in terms of delivery ratio and average delay, varying the density of population and the buffer size, and using persistent and non-persistent messages with different priorities.",
                "The simulation results show that the EMMAs performance, in terms of delivery ratio and delay of persistent messages with higher priorities, is good.",
                "In general, it is evident that the delivery ratio is strongly related to the correct dimensioning of the buffers to the maximum acceptable delay.",
                "Moreover, the epidemic algorithms are able to guarantee a high delivery ratio if one evaluates performance over a time interval sufficient for the dissemination of the replicas of messages (i.e., the infection spreading) in a large portion of the ad-hoc network.",
                "One consequence of the dimensioning problem is that scalability may be seriously impacted in peer-to-peer middleware for mobile computing due to the resource poverty of the devices (limited memory to store temporarily messages) and the number of possible interconnections in ad-hoc settings.",
                "What is worse is that common forms of commercial and social organisation (six degrees of separation) mean that even modest TTL values on messages will lead to widespread flooding of epidemic messages.",
                "This problem arises because of the lack of intelligence in the epidemic protocol, and can be addressed by selecting carrier nodes for messages with greater care.",
                "The details of this process are, however, outside the scope of this paper (but may be found in [13]) and do not affect the foundation on which the EMMA middleware is based: the ability to deliver messages asynchronously. 6.",
                "CRITICAL VIEW OF THE STATE OF THE ART The design of middleware platforms for mobile computing requires researchers to answer new and fundamentally different questions; simply assuming the presence of wired portions of the network on which centralised functionality can reside is not generalisable.",
                "Thus, it is necessary to investigate novel design principles and to devise architectural patterns that differ from those traditionally exploited in the design of middleware for fixed systems.",
                "As an example, consider the recent <br>cross-layering</br> trend in ad-hoc networking [1].",
                "This is a way of re-thinking software systems design, explicitly abandoning the classical forms of layering, since, although this separation of concerns afford portability, it does so at the expense of potential efficiency gains.",
                "We believe that it is possible to view our approach as an instance of <br>cross-layering</br>.",
                "In fact, we have added the epidemic network protocol at middleware level and, at the same time, we have used the existing synchronous network protocol if present both in delivering messages (traditional layering) and in informing the middleware about when messages may be delivered by revealing details of the forwarding tables (layer violation).",
                "For this reason, we prefer to consider them jointly as the communication layer of our platform together providing more efficient message delivery.",
                "Another interesting aspect is the exploitation of context and system information to improve the performance of mobile middleware platforms.",
                "Again, as a result of adopting a <br>cross-layering</br> methodology, we are able to build systems that gather information from the underlying operating system and communication components in order to allow for adaptation of behaviour.",
                "We can summarise this conceptual design approach by saying that middleware platforms must be not only context-aware (i.e., they should be able to extract and analyse information from the surrounding context) but also system-aware (i.e., they should be able to gather information from the software and hardware components of the mobile system).",
                "A number of middleware systems have been developed to support ad-hoc networking with the use of asynchronous communication (such as LIME, XMIDDLE, STEAM [11]).",
                "In particular, the STEAM platform is an interesting example of event-based middleware for ad-hoc networks, providing location-aware message delivery and an effective solution for event filtering.",
                "A discussion of JMS, and its mobile realisation, has already been conducted in Sections 4 and 2.",
                "The Swiss company Softwired has developed the first JMS middleware for mobile computing, called iBus Mobile [10].",
                "The main components of this typically infrastructure-based architecture are the JMS provider, the so-called mobile JMS gateway, which is deployed on a fixed host and a lightweight JMS client library.",
                "The gateway is used for the communication between the application server and mobile hosts.",
                "The gateway is seen by the JMS provider as a normal JMS client.",
                "The JMS provider can be any JMS-enabled application server, such as BEA Weblogic.",
                "Pronto [19] is an example of mid125 Middleware 2004 Companion dleware system based on messaging that is specifically designed for mobile environments.",
                "The platform is composed of three classes of components: mobile clients implementing the JMS specification, gateways that control traffic, guaranteeing efficiency and possible user customizations using different plug-ins and JMS servers.",
                "Different configurations of these components are possible; with respect to mobile ad hoc networks applications, the most interesting is Serverless JMS.",
                "The aim of this configuration is to adapt JMS to a decentralized model.",
                "The publish-subscribe model exploits the efficiency and the scalability of the underlying IP multicast protocol.",
                "Unreliable and reliable message delivery services are provided: reliability is provided through a negative acknowledgment-based protocol.",
                "Pronto represents a good solution for infrastructure-based mobile networks but it does not adequately target ad-hoc settings, since mobile nodes rely on fixed servers for the exchange of messages.",
                "Other MOM implemented for mobile environments exist; however, they are usually straightforward extensions of existing middleware [8].",
                "The only implementation of MOM specifically designed for mobile ad-hoc networks was developed at the University of Newcastle [18].",
                "This work is again a JMS adaptation; the focus of that implementation is on group communication and the use of application level routing algorithms for topic delivery of messages.",
                "However, there are a number of differences in the focus of our work.",
                "The importance that we attribute to disconnections makes persistence a vital requirement for any middleware that needs to be used in mobile ad-hoc networks.",
                "The authors of [18] signal persistence as possible future work, not considering the fact that routing a message to a non-connected host will result in delivery failure.",
                "This is a remarkable limitation in mobile settings where unpredictable disconnections are the norm rather than the exception. 7.",
                "ROADMAP AND CONCLUSIONS Asynchronous communication is a useful communication paradigm for mobile ad-hoc networks, as hosts are allowed to come, go and pick up messages when convenient, also taking account of their resource availability (e.g., power, connectivity levels).",
                "In this paper we have described the state of the art in terms of MOM for mobile systems.",
                "We have also shown a proof of concept adaptation of JMS to the extreme scenario of partially connected mobile ad-hoc networks.",
                "We have described and discussed the characteristics and differences of our solution with respect to traditional JMS implementations and the existing adaptations for mobile settings.",
                "However, trade-offs between application-level routing and resource usage should also be investigated, as mobile devices are commonly power/resource scarce.",
                "A key limitation of this work is the poorly performing epidemic algorithm and an important advance in the practicability of this work requires an algorithm that better balances the needs of efficiency and message delivery probability.",
                "We are currently working on algorithms and protocols that, exploiting probabilistic and statistical techniques on the basis of small amounts of exchanged information, are able to improve considerably the efficiency in terms of resources (memory, bandwidth, etc) and the reliability of our middleware platform [13].",
                "One futuristic research development, which may take these ideas of adaptation of messaging middleware for mobile environments further is the introduction of more mobility oriented communication extensions, for instance the support of geocast (i.e., the ability to send messages to specific geographical areas). 8.",
                "REFERENCES [1] M. Conti, G. Maselli, G. Turi, and S. Giordano.",
                "<br>cross-layering</br> in Mobile ad-hoc Network Design.",
                "IEEE Computer, 37(2):48-51, February 2004. [2] A. Demers, D. Greene, C. Hauser, W. Irish, J. Larson, S. Shenker, H. Sturgis, D. Swinehart, and D. Terry.",
                "Epidemic Algorithms for Replicated Database Maintenance.",
                "In Sixth Symposium on Principles of Distributed Computing, pages 1-12, August 1987. [3] A. Doria, M. Uden, and D. P. Pandey.",
                "Providing connectivity to the Saami nomadic community.",
                "In Proceedings of the Second International Conference on Open Collaborative Design for Sustainable Innovation, December 2002. [4] M. Haahr, R. Cunningham, and V. Cahill.",
                "Supporting CORBA applications in a Mobile Environment.",
                "In 5th International Conference on Mobile Computing and Networking (MOBICOM99), pages 36-47.",
                "ACM, August 1999. [5] M. Hapner, R. Burridge, R. Sharma, J. Fialli, and K. Stout.",
                "Java Message Service Specification Version 1.1.",
                "Sun Microsystems, Inc., April 2002. http://java.sun.com/products/jms/. [6] J. Hart.",
                "WebSphere MQ: Connecting your applications without complex programming.",
                "IBM WebSphere Software White Papers, 2003. [7] S. Hayward and M. Pezzini.",
                "Marrying Middleware and Mobile Computing.",
                "Gartner Group Research Report, September 2001. [8] IBM.",
                "WebSphere MQ EveryPlace Version 2.0, November 2002. http://www-3.ibm.com/software/integration/wmqe/. [9] ITU.",
                "Connecting remote communities.",
                "Documents of the World Summit on Information Society, 2003. http://www.itu.int/osg/spu/wsis-themes. [10] S. Maffeis.",
                "Introducing Wireless JMS.",
                "Softwired AG, www.sofwired-inc.com, 2002. [11] C. Mascolo, L. Capra, and W. Emmerich.",
                "Middleware for Mobile Computing.",
                "In E. Gregori, G. Anastasi, and S. Basagni, editors, Advanced Lectures on Networking, volume 2497 of Lecture Notes in Computer Science, pages 20-58.",
                "Springer Verlag, 2002. [12] Microsoft.",
                "Microsoft Message Queuing (MSMQ) Version 2.0 Documentation. [13] M. Musolesi, S. Hailes, and C. Mascolo.",
                "Adaptive routing for intermittently connected mobile ad-hoc networks.",
                "Technical report, UCL-CS Research Note, July 2004.",
                "Submitted for Publication. [14] Sun Microsystems.",
                "Java Naming and Directory Interface (JNDI) Documentation Version 1.2. 2003. http://java.sun.com/products/jndi/. [15] Sun Microsystems.",
                "Jini Specification Version 2.0, 2003. http://java.sun.com/products/jini/. [16] A. Vahdat and D. Becker.",
                "Epidemic routing for Partially Connected ad-hoc Networks.",
                "Technical Report CS-2000-06, Department of Computer Science, Duke University, 2000. [17] A. Vargas.",
                "The OMNeT++ discrete event simulation system.",
                "In Proceedings of the European Simulation Multiconference (ESM2001), Prague, June 2001. [18] E. Vollset, D. Ingham, and P. Ezhilchelvan.",
                "JMS on Mobile ad-hoc Networks.",
                "In Personal Wireless Communications (PWC), pages 40-52, Venice, September 2003. [19] E. Yoneki and J. Bacon.",
                "Pronto: Mobilegateway with publish-subscribe paradigm over wireless network.",
                "Technical Report 559, University of Cambridge, Computer Laboratory, February 2003.",
                "Middleware for Pervasive and ad-hoc Computing 126"
            ],
            "original_annotated_samples": [
                "As an example, consider the recent <br>cross-layering</br> trend in ad-hoc networking [1].",
                "We believe that it is possible to view our approach as an instance of <br>cross-layering</br>.",
                "Again, as a result of adopting a <br>cross-layering</br> methodology, we are able to build systems that gather information from the underlying operating system and communication components in order to allow for adaptation of behaviour.",
                "<br>cross-layering</br> in Mobile ad-hoc Network Design."
            ],
            "translated_annotated_samples": [
                "Como ejemplo, considera la reciente tendencia de <br>superposición de capas</br> en redes ad-hoc [1].",
                "Creemos que es posible ver nuestro enfoque como una instancia de <br>superposición de capas</br>.",
                "Una vez más, como resultado de adoptar una <br>metodología de capas cruzadas</br>, podemos construir sistemas que recopilan información del sistema operativo subyacente y los componentes de comunicación para permitir la adaptación del comportamiento.",
                "Diseño de redes móviles ad-hoc con <br>interconexión de capas</br>."
            ],
            "translated_text": "Adaptando Middleware de Mensajería Asincrónica a Redes Ad-hoc Mirco Musolesi Dept. Las características de los entornos móviles, con la posibilidad de desconexiones frecuentes y ancho de banda fluctuante, han obligado a replantear el middleware tradicional. En particular, los paradigmas de comunicación síncrona a menudo empleados en middleware estándar no parecen ser particularmente adecuados para entornos ad-hoc, en los que ni siquiera se puede asumir la disponibilidad intermitente de una red troncal. En cambio, la comunicación asincrónica parece ser un paradigma generalmente más adecuado para este tipo de entornos. Se ha desarrollado y utilizado middleware orientado a mensajes para sistemas tradicionales con el fin de proporcionar un paradigma de comunicación asíncrona para sistemas distribuidos, y, recientemente, también para algunos sistemas específicos de computación móvil. En este artículo, presentamos nuestra experiencia en el diseño, implementación y evaluación de EMMA (Middleware de Mensajería Epidémica para redes ad-hoc), una adaptación del Servicio de Mensajes Java (JMS) para entornos móviles ad-hoc. Discutimos en detalle los desafíos de diseño y algunas posibles soluciones, mostrando un ejemplo concreto de la viabilidad y adecuación de la aplicación del paradigma asíncrono en este contexto y delineando un plan de investigación para los próximos años. Categorías y Descriptores de Asignaturas C.2.4 [Redes de Computadoras-Comunicación]: Sistemas Distribuidos-Aplicaciones Distribuidas; C.2.1 [Arquitectura y Diseño de Redes]: Comunicación Inalámbrica Términos Generales DISEÑO, ALGORITMOS 1. INTRODUCCIÓN Con la creciente popularidad de los dispositivos móviles y su amplia adopción, existe una clara necesidad de permitir el desarrollo de un amplio espectro de aplicaciones que operen de manera efectiva en dicho entorno. Lamentablemente, esto está lejos de ser simple: los dispositivos móviles son cada vez más heterogéneos en cuanto a capacidades de procesamiento, tamaño de memoria, capacidad de batería e interfaces de red. Cada una de estas configuraciones tiene características sustancialmente diferentes que son estáticamente distintas, por ejemplo, hay una gran diferencia en la capacidad entre un mote de Berkeley y un portátil equipado con 802.11g, y que varían dinámicamente, como en situaciones de ancho de banda fluctuante y conectividad intermitente. Los entornos móviles ad hoc tienen un elemento adicional de complejidad en que son completamente descentralizados. Para poder desarrollar aplicaciones para entornos tan complejos, es esencial contar con una forma adecuada de middleware si se busca lograr un desarrollo rentable. En este artículo, examinamos uno de los aspectos fundamentales de middleware para entornos móviles ad-hoc: el de los primitivos de comunicación. Tradicionalmente, los primitivos de middleware más utilizados para la comunicación asumen la presencia simultánea de ambos puntos finales en una red, ya que la estabilidad y la ubicuidad de la infraestructura de redes no es una suposición irrazonable para la mayoría de los entornos cableados. En otras palabras, la mayoría de los paradigmas de comunicación son síncronos: middleware orientado a objetos como CORBA y Java RMI son ejemplos típicos de middleware basado en comunicación síncrona. En los últimos años, ha habido un creciente interés en plataformas basadas en paradigmas de comunicación asincrónica, como los sistemas de publicación-suscripción: estos han sido explotados con mucho éxito donde existe asincronía a nivel de aplicación. De acuerdo con un informe de mercado de Gartner [7]: Dada la popularidad, escalabilidad, flexibilidad y afinidad con arquitecturas móviles e inalámbricas de los middlewares orientados a mensajes (MOM), para el año 2004, es probable que MOM se convierta en la forma dominante de middleware de comunicación para vincular aplicaciones móviles y empresariales (probabilidad del 0.7)... Además, en sistemas ad-hoc móviles, la probabilidad de fragmentación de la red significa que la comunicación síncrona puede resultar impracticable en cualquier caso, lo que da lugar a situaciones en las que el tráfico asincrónico tolerante a retrasos es la única forma de tráfico que podría ser admitida. El middleware para entornos ad-hoc móviles debe, por lo tanto, admitir primitivas de comunicación semi-síncronas o completamente asíncronas si se quiere evitar limitaciones sustanciales en su utilidad. Además del desafío intelectual que implica apoyar este modelo, este trabajo también es interesante porque existen varios ámbitos de aplicación práctica al permitir la comunicación entre comunidades en áreas subdesarrolladas del mundo. Por lo tanto, por ejemplo, proyectos que se han llevado a cabo para ayudar a poblaciones que viven en lugares remotos del mundo como Laponia o en áreas pobres que carecen de infraestructura de conectividad fija. Ha habido intentos de proporcionar middleware móvil con estas propiedades, incluyendo STEAM, LIME, XMIDDLE, Bayou (consulte [11] para una revisión más completa del middleware móvil). Estos modelos difieren considerablemente de los middleware tradicionales existentes en cuanto a los primitivos proporcionados. Además, algunos de ellos fallan en proporcionar una solución para los verdaderos escenarios ad-hoc. Si el éxito proyectado de MOM se convierte en algo parecido a la realidad, habrá muchos programadores con experiencia en ello. La solución ideal al problema del middleware para sistemas ad-hoc es, entonces, permitir a los programadores utilizar los mismos paradigmas y modelos presentados por formas comunes de MOM y asegurar que estos paradigmas sean soportables dentro del entorno móvil. Este enfoque tiene claras ventajas al permitir que las aplicaciones desarrolladas en plataformas de middleware estándar se desplieguen fácilmente en dispositivos móviles. De hecho, algunas investigaciones ya han llevado a la adaptación de plataformas de middleware tradicionales a entornos móviles, principalmente para proporcionar integración entre dispositivos móviles y redes fijas existentes en un entorno nómada (es decir, mixto) [4]. En lo que respecta al middleware orientado a mensajes, las implementaciones actuales, sin embargo, asumen la existencia de una red troncal a la que los hosts móviles se conectan de vez en cuando mientras están en itinerancia [10], o asumen que los nodos siempre son de alguna manera accesibles a través de un camino [18]. No se ha intentado ninguna adaptación a escenarios heterogéneos o completamente ad hoc, con desconexiones frecuentes y nubes periódicamente aisladas de hosts. En el resto de este documento describimos un intento inicial de adaptar middleware orientado a mensajes para que se ajuste a dispositivos móviles y, más específicamente, a redes móviles ad-hoc. En nuestro caso, elegimos examinar JMS, como uno de los sistemas MOM más conocidos. En la última parte de este documento, exploramos las limitaciones de nuestros resultados y describimos los planes que tenemos para llevar a cabo el trabajo más adelante. Los sistemas de middleware orientados a mensajes y el Servicio de Mensajes de Java (JMS) admiten la comunicación entre componentes distribuidos a través del paso de mensajes: el remitente envía un mensaje a colas identificadas, que generalmente residen en un servidor. Un receptor recupera el mensaje de la cola en un momento diferente y puede confirmar la respuesta utilizando el mismo mecanismo asíncrono. La middleware orientada a mensajes soporta la comunicación asíncrona de una manera muy natural, logrando el desacoplamiento de emisores y receptores. Un remitente puede continuar procesando tan pronto como el middleware haya aceptado el mensaje; eventualmente, el receptor enviará un mensaje de confirmación y el remitente podrá recogerlo en un momento conveniente. Sin embargo, dado la forma en que están implementados, estos sistemas de middleware suelen requerir dispositivos con recursos abundantes, especialmente en términos de memoria y espacio en disco, donde se almacenan colas persistentes de mensajes que han sido recibidos pero aún no procesados. Sun Java Message Service [5], IBM WebSphere MQ [6], Microsoft MSMQ [12] son ejemplos de middleware orientado a mensajes muy exitosos para sistemas distribuidos tradicionales. El Servicio de Mensajería de Java (JMS) es una colección de interfaces para la comunicación asincrónica entre componentes distribuidos. Proporciona una forma común para que los programas de Java creen, envíen y reciban mensajes. Los usuarios de JMS suelen ser referidos como clientes. La especificación JMS define además a los proveedores como los componentes encargados de implementar el sistema de mensajería y proporcionar la funcionalidad administrativa y de control (es decir, persistencia y confiabilidad) requerida por el sistema. Los clientes pueden enviar y recibir mensajes, de forma asincrónica, a través del proveedor JMS, que se encarga de la entrega y, posiblemente, de la persistencia de los mensajes. Hay dos tipos de comunicación admitidos: modelos punto a punto y de publicación-suscripción. En el modelo punto a punto, los hosts envían mensajes a colas. Los receptores pueden ser registrados con algunas colas específicas, y pueden recuperar los mensajes de forma asíncrona para luego confirmar su recepción. El modelo de publicación-suscripción se basa en el uso de temas a los que los clientes pueden suscribirse. Los mensajes son enviados a los temas por otros clientes y luego son recibidos de forma asíncrona por todos los clientes suscritos. Los clientes aprenden sobre los temas y colas disponibles a través de la Interfaz de Nombres y Directorios de Java (JNDI) [14]. Las colas y los temas son creados por un administrador en el proveedor y se registran con la interfaz JNDI para su búsqueda. En la siguiente sección, presentamos los desafíos de las redes móviles y mostramos cómo JMS puede adaptarse para cumplir con estos requisitos. 3. JMS PARA COMPUTACIÓN MÓVIL Las redes móviles varían mucho en sus características, desde redes nómadas en las que los nodos se desplazan mientras están desconectados, hasta redes ad-hoc en las que los nodos se mueven libremente y no hay infraestructura. Las redes móviles ad-hoc son más comúnmente aplicables en situaciones donde la supervivencia y la capacidad de despliegue instantáneo son clave: especialmente en aplicaciones militares y de ayuda en casos de desastre. Entre estos dos tipos de redes móviles, sin embargo, existen una serie de posibles combinaciones heterogéneas, donde se utilizan paradigmas nómadas y ad-hoc para interconectar áreas totalmente inalámbricas con redes más estructuradas (como una LAN o Internet). Si bien la especificación JMS ha sido ampliamente implementada y utilizada en sistemas distribuidos tradicionales, las adaptaciones para entornos móviles han sido propuestas recientemente. Los desafíos de adaptar JMS a entornos móviles son considerables; sin embargo, dada su amplia aceptación y uso, existen ventajas considerables al permitir la adaptación de aplicaciones existentes a entornos móviles y al permitir la interoperabilidad de aplicaciones en las regiones cableadas e inalámbricas de una red. En [10], JMS se adaptó a un entorno móvil nómada, donde los hosts móviles pueden ser clientes de JMS y comunicarse a través del proveedor de JMS que, sin embargo, se encuentra en una red troncal, proporcionando fiabilidad y persistencia. El prototipo del cliente presentado en [10] es muy ligero, debido a la delegación de toda la funcionalidad pesada al proveedor Middleware para Computación Pervasive y ad-hoc 122 en la red cableada. Sin embargo, este enfoque es algo limitado en términos de aplicabilidad generalizada y escalabilidad como consecuencia de la concentración de funcionalidad en la parte cableada de la red. Si se quiere adaptar JMS a entornos completamente ad hoc, donde no haya infraestructura fija disponible y donde los nodos cambien de ubicación y estado de forma muy dinámica, se deben tener en cuenta más problemas. En primer lugar, el descubrimiento necesita utilizar un modelo resiliente pero distribuido: en este entorno extremadamente dinámico, las soluciones estáticas son inaceptables. Como se discute en la Sección 2, un administrador de JMS define colas y temas en el proveedor. Los clientes pueden entonces aprender sobre ellos utilizando la Interfaz de Nombres y Directorios de Java (JNDI). Sin embargo, debido a la forma en que está diseñado JNDI, es necesario que un nodo de JNDI (o más de uno) esté al alcance para obtener una vinculación de un nombre a una dirección (es decir, saber dónde se encuentra una cola o un tema específico). En entornos móviles ad-hoc, el proceso de descubrimiento no puede asumir la existencia de un conjunto fijo de servidores de descubrimiento que siempre sean accesibles, ya que esto no coincidiría con la dinámica de las redes ad-hoc. En segundo lugar, un Proveedor de JMS, como sugiere la especificación de JMS, también debe ser accesible para cada nodo en la red, para poder comunicarse. Esto asume una arquitectura muy centralizada, que nuevamente no coincide con los requisitos de un entorno ad-hoc móvil, en el que los nodos pueden estar en movimiento y dispersos: se necesita una solución más distribuida y dinámica. La persistencia es, sin embargo, una funcionalidad esencial en entornos de comunicación asincrónica, ya que los hosts están, por definición, conectados en momentos diferentes. En la siguiente sección, discutiremos nuestra experiencia en el diseño e implementación de JMS para redes móviles ad-hoc. 4. El desarrollo de aplicaciones para redes móviles es aún más desafiante: además de las mismas consideraciones que para entornos inalámbricos infraestructurados, como las limitadas capacidades de los dispositivos y las restricciones de energía, existen problemas relacionados con la velocidad de cambio de la conectividad de la red y la falta de una infraestructura de enrutamiento estática. En consecuencia, ahora describimos un intento inicial de adaptar la especificación JMS para satisfacer los requisitos particulares relacionados con escenarios ad-hoc. Como se discute en la Sección 3, una aplicación JMS puede utilizar tanto el estilo de mensajería punto a punto como el de publicación-suscripción. Modelo de punto a punto. El modelo de punto a punto se basa en el concepto de colas, que se utilizan para habilitar la comunicación asincrónica entre el productor de un mensaje y posibles consumidores diferentes. En nuestra solución, la ubicación de las colas se determina mediante un proceso de negociación que depende de la aplicación. Por ejemplo, supongamos que es posible saber a priori, o es posible determinar dinámicamente, que cierto host es el receptor de la mayor parte de los mensajes enviados a una cola particular. En este caso, la ubicación óptima de la cola bien podría estar en este host en particular. En general, vale la pena señalar que, según la especificación de JMS y los patrones de diseño sugeridos, es común y preferible que un cliente tenga todos sus mensajes entregados a una sola cola. Las colas se anuncian periódicamente a los anfitriones que se encuentran dentro del rango de transmisión o que son alcanzables mediante el protocolo de comunicación síncrona subyacente, si se proporciona. Es importante tener en cuenta que, a nivel de middleware, es lógicamente irrelevante si la capa de red implementa alguna forma de enrutamiento ad-hoc (aunque considerablemente más eficiente si lo hace); el middleware solo considera información sobre qué nodos son accesibles activamente en cualquier momento. Los hosts que reciben mensajes publicitarios agregan entradas a su registro JNDI. Cada entrada se caracteriza por un arrendamiento (un mecanismo similar al presente en Jini [15]). Un contrato de arrendamiento representa el tiempo de validez de una entrada particular. Si un arrendamiento no se renueva (es decir, su vida no se extiende), puede vencer y, en consecuencia, la entrada se elimina del registro. En otras palabras, el anfitrión asume que la cola será inaccesible a partir de ese momento. Esto puede ser causado, por ejemplo, si un host que almacena la cola se vuelve inaccesible. Un host que inicia un proceso de descubrimiento encontrará los temas y las colas presentes en su porción conectada de la red de manera directa. Para enviar un mensaje a un anfitrión que actualmente no está al alcance, utilizamos un protocolo de enrutamiento de epidemia asíncrono que se discutirá en detalle en la Sección 4.2. Si dos hosts están en la misma nube (es decir, existe un camino conectado entre ellos), pero no hay disponible un protocolo síncrono, los mensajes se envían utilizando el protocolo epidémico. En este caso, la latencia de entrega será baja como resultado de la rapidez de propagación de la infección en la nube conectada (ver también los resultados de la simulación en la Sección 5). Dado la existencia de un protocolo de epidemia, el mecanismo de descubrimiento consiste en publicitar las colas a los hosts que actualmente son inalcanzables utilizando mecanismos análogos. En el modelo de publicación-suscripción, algunos de los hosts son designados de manera similar para mantener temas y almacenar suscripciones, como antes. Los temas se anuncian a través del registro de la misma manera que las colas, y un cliente que desee suscribirse a un tema debe registrarse con el cliente que tiene el tema. Cuando un cliente desea enviar un mensaje a la lista de temas, lo envía al titular del tema (de la misma manera que enviaría un mensaje a una cola). El titular del tema luego reenvía el mensaje a todos los suscriptores, utilizando el protocolo síncrono si es posible, de lo contrario el protocolo epidémico. Vale la pena señalar que utilizamos un único mensaje con múltiples destinatarios, en lugar de múltiples mensajes con múltiples destinatarios. Cuando un mensaje es entregado a uno de los suscriptores, este destinatario es eliminado de la lista. Para eliminar las posibles réplicas restantes, empleamos mensajes de acuse de recibo (discutidos en la Sección 4.4), devueltos de la misma manera que un mensaje normal. También hemos adaptado los conceptos de suscripciones duraderas y no duraderas para entornos ad-hoc. En las plataformas fijas, las suscripciones duraderas se mantienen durante las desconexiones de los clientes, ya sean intencionales o resultado de fallas. En los sistemas tradicionales, cuando un suscriptor duradero se desconecta del servidor, es responsable de almacenar los mensajes. Cuando el suscriptor duradero se reconecta, el servidor le envía todos los mensajes no caducados. El problema es que, en nuestro escenario, las desconexiones son la norma. En teoría, no es posible enviar un mensaje a un par que nunca ha sido alcanzable en el pasado, ya que no puede haber ninguna entrada presente en el registro. Sin embargo, para superar esta posible limitación, proporcionamos un mecanismo a través del cual la información puede ser añadida al registro sin utilizar los canales normales. 123 Middleware 2004 Companion en lugar de la excepción. En otras palabras, no podemos considerar las desconexiones como fallos. Por estas razones, adoptamos una semántica ligeramente diferente. En lo que respecta a las suscripciones duraderas, si un suscriptor se desconecta, las notificaciones no se almacenan, sino que se envían utilizando el protocolo epidémico en lugar del protocolo síncrono. En otras palabras, las notificaciones duraderas siguen siendo válidas durante las posibles desconexiones del suscriptor. Por otro lado, si un suscriptor no duradero se desconecta, su suscripción se elimina; en otras palabras, durante las desconexiones, las notificaciones no se envían utilizando el protocolo epidémico, sino que solo se aprovecha el protocolo síncrono. Si el tema vuelve a estar accesible para este anfitrión, deberá realizar otra suscripción para recibir las notificaciones. Los mensajes de baja se entregan de la misma manera que los mensajes de suscripción. Es importante tener en cuenta que los suscriptores duraderos deben darse de baja explícitamente de un tema para detener el proceso de notificación; sin embargo, todas las suscripciones duraderas tienen un tiempo de expiración predefinido para hacer frente a los casos de suscriptores que no vuelven a conectarse debido a sus movimientos o fallos. Esta característica se proporciona claramente para limitar el número de mensajes innecesarios enviados por la red. 4.2 Entrega de mensajes utilizando enrutamiento epidémico En esta sección, examinamos un mecanismo posible que permitirá la entrega de mensajes en una red parcialmente conectada. El mecanismo que discutimos está destinado a demostrar viabilidad; los mecanismos de comunicación más eficientes para este entorno son complejos por sí mismos y son el tema de otro artículo [13]. La entrega de mensajes asincrónica descrita anteriormente se basa en un protocolo de enrutamiento de estilo epidémico puro típico [16]. Un mensaje que necesita ser enviado se replica en cada host al alcance. De esta manera, las copias de los mensajes se propagan rápidamente a través de redes conectadas, como una infección. Si un anfitrión se conecta a otra nube de nodos móviles durante su movimiento, el mensaje se propaga a través de esta colección de anfitriones. La replicación de datos y mensajes en estilo epidémico ha sido explotada en el pasado en muchos campos, comenzando por el área de sistemas de bases de datos distribuidas [2]. Dentro del enrutamiento epidémico, cada anfitrión mantiene un búfer que contiene los mensajes que ha creado y las réplicas de los mensajes generados por los otros anfitriones. Para mejorar el rendimiento, una tabla hash indexa el contenido del búfer. Cuando dos anfitriones se conectan, el anfitrión con el identificador más pequeño inicia una sesión de anti-entropía, enviando una lista que contiene los identificadores únicos de los mensajes que actualmente almacena. El otro anfitrión evalúa esta lista y envía de vuelta una lista que contiene los identificadores que está almacenando y que no están presentes en el otro anfitrión, junto con los mensajes que el otro no tiene. El anfitrión que ha iniciado la sesión recibe la lista y, de la misma manera, envía los mensajes que no están presentes en el otro anfitrión. En caso de producirse un desbordamiento de búfer, los mensajes se descartan. La fiabilidad ofrecida por este protocolo es generalmente de mejor esfuerzo, ya que no hay garantía de que un mensaje finalmente sea entregado a su destinatario. Claramente, la proporción de entrega del protocolo aumenta proporcionalmente al tiempo máximo de retraso permitido y al tamaño del búfer en cada host (pueden encontrarse resultados interesantes de simulación en [16]). 4.3 Adaptación del Modelo de Mensajes JMS En esta sección, analizaremos los aspectos de nuestra adaptación de la especificación relacionados con el llamado Modelo de Mensajes JMS [5]. Según esto, los mensajes JMS se caracterizan por algunas propiedades definidas utilizando el campo de encabezado, que contiene valores que son utilizados tanto por los clientes como por los proveedores para su entrega. Los aspectos discutidos en el resto de esta sección son válidos para ambos modelos (punto a punto y publicar-suscribir). Un mensaje JMS puede ser persistente o no persistente. Según la especificación de JMS, los mensajes persistentes deben entregarse con un grado de confiabilidad mayor que los no persistentes. Sin embargo, vale la pena señalar que no es posible garantizar la fiabilidad de una sola vez para mensajes persistentes según lo definido en la especificación, ya que, como discutimos en la subsección anterior, el protocolo epidémico subyacente solo puede garantizar la entrega de mejor esfuerzo. Sin embargo, los clientes mantienen una lista de los identificadores de los mensajes recibidos recientemente para evitar la entrega de mensajes duplicados. En otras palabras, proporcionamos a las aplicaciones una fiabilidad inmediata para ambos tipos de mensajes. Para implementar diferentes niveles de confiabilidad, EMMA trata de manera diferente los mensajes persistentes y no persistentes durante la ejecución del protocolo epidémico de anti-entropía. Dado que el espacio del búfer de mensajes es limitado, los mensajes persistentes se replican preferentemente utilizando el espacio libre disponible. Si esto es insuficiente y hay mensajes no persistentes presentes en el búfer, estos son reemplazados. Solo se notifican a los remitentes las entregas exitosas de los mensajes persistentes. Según la especificación de JMS, es posible asignar una prioridad a cada mensaje. Los mensajes con prioridades más altas se entregan de manera preferencial. Como se discutió anteriormente, los mensajes persistentes tienen prioridad sobre los no persistentes. La selección adicional se basa en sus prioridades. Los mensajes con prioridades más altas son tratados de manera preferencial. De hecho, si no hay suficiente espacio para replicar todos los mensajes persistentes, se utiliza un mecanismo basado en prioridades para eliminar y replicar los mensajes no persistentes (y, si es necesario, los mensajes persistentes). Los mensajes se eliminan de los buffers utilizando el valor de tiempo de expiración que puede ser establecido por los remitentes. Esta es una forma de liberar espacio en los búferes (se eliminan preferentemente los mensajes más antiguos en casos de conflicto); para eliminar réplicas obsoletas en el sistema; y para limitar el tiempo durante el cual los destinos deben mantener los identificadores de mensajes para desechar duplicados. Mecanismos de fiabilidad y de acuse de recibo Como ya se discutió, la entrega de mensajes como máximo una vez es lo mejor que se puede lograr en términos de semántica de entrega en entornos ad-hoc parcialmente conectados. Sin embargo, es posible mejorar la confiabilidad del sistema con mecanismos de acuse de recibo eficientes. EMMA proporciona un mecanismo de notificación de fallos a las aplicaciones si no se recibe el acuse de recibo dentro de un tiempo límite dado (que puede ser configurado por los desarrolladores de aplicaciones). Este mecanismo es el que distingue la entrega de mensajes persistentes y no persistentes en nuestra implementación de JMS: las entregas de los primeros son notificadas a los remitentes, mientras que los de los segundos no lo son. Utilizamos mensajes de acuse de recibo no solo para informar a los remitentes sobre la entrega exitosa de los mensajes, sino también para eliminar las réplicas de los mensajes entregados que aún están presentes en la red. Cada anfitrión mantiene una lista de los mensajes Middleware para la Computación Pervasiva y Ad-hoc 124 entregados con éxito que se actualiza como parte del proceso normal de intercambio de información entre los anfitriones. Las listas se intercambian durante los primeros pasos del protocolo de epidemia anti-entropía con una frecuencia predefinida. En el caso de mensajes con múltiples destinatarios, también se almacena una lista de los destinatarios reales. Cuando un anfitrión recibe la lista, verifica su búfer de mensajes y lo actualiza de acuerdo con las siguientes reglas: (1) si un mensaje tiene un único destinatario y ha sido entregado, se elimina del búfer; (2) si un mensaje tiene múltiples destinatarios, se eliminan los identificadores de los anfitriones a los que se ha entregado de la lista de destinatarios asociada. Si la longitud resultante de la lista de destinatarios es cero, el mensaje se elimina del búfer. Estas listas tienen, claramente, dimensiones finitas y se implementan como colas circulares. Este mecanismo simple, junto con el uso de marcas de tiempo de expiración, garantiza que las antiguas notificaciones de acuse de recibo sean eliminadas del sistema después de un período de tiempo limitado. Para mejorar la confiabilidad de EMMA, se podría desarrollar un mecanismo de diseño para la replicación inteligente de colas y temas basado en la información de contexto. Sin embargo, esto aún no forma parte de la arquitectura actual de EMMA. 5. IMPLEMENTACIÓN Y EVALUACIÓN PRELIMINAR Implementamos un prototipo de nuestra plataforma utilizando el Perfil Personal J2ME. El tamaño del ejecutable es de aproximadamente 250KB, incluido el archivo jar de JMS 1.1; esta es una cifra perfectamente aceptable dada la memoria disponible de los dispositivos móviles actuales en el mercado. Probamos nuestro prototipo en PDAs HP iPaq con Linux, interconectados con WaveLan, y en varios laptops con la misma interfaz de red. También evaluamos la plataforma de middleware utilizando el simulador de eventos discretos OMNET++ [17] para explorar una variedad de escenarios móviles que incorporaban un número más realista de hosts que el que se podía lograr experimentalmente. Más específicamente, evaluamos el rendimiento del sistema en términos de ratio de entrega y retraso promedio, variando la densidad de población y el tamaño del búfer, y utilizando mensajes persistentes y no persistentes con diferentes prioridades. Los resultados de la simulación muestran que el rendimiento de EMMAs, en términos de ratio de entrega y retraso de mensajes persistentes con prioridades más altas, es bueno. En general, es evidente que la proporción de entrega está fuertemente relacionada con el dimensionamiento correcto de los búferes para el retraso máximo aceptable. Además, los algoritmos epidémicos son capaces de garantizar una alta tasa de entrega si se evalúa el rendimiento durante un intervalo de tiempo suficiente para la difusión de las réplicas de los mensajes (es decir, la propagación de la infección) en una gran parte de la red ad-hoc. Una consecuencia del problema de dimensionamiento es que la escalabilidad puede verse seriamente afectada en middleware peer-to-peer para computación móvil debido a la escasez de recursos de los dispositivos (memoria limitada para almacenar temporalmente mensajes) y al número de posibles interconexiones en entornos ad-hoc. Lo peor es que las formas comunes de organización comercial y social (seis grados de separación) significan que incluso valores modestos de TTL en los mensajes provocarán una difusión generalizada de mensajes epidémicos. Este problema surge debido a la falta de inteligencia en el protocolo de la epidemia, y puede ser abordado seleccionando nodos portadores para los mensajes con mayor cuidado. Sin embargo, los detalles de este proceso están fuera del alcance de este documento (pero pueden encontrarse en [13]) y no afectan la base en la que se basa el middleware EMMA: la capacidad de entregar mensajes de forma asincrónica. 6. VISIÓN CRÍTICA DEL ESTADO DEL ARTE El diseño de plataformas de middleware para la computación móvil requiere que los investigadores respondan a preguntas nuevas y fundamentalmente diferentes; simplemente asumir la presencia de porciones cableadas de la red en las que pueda residir la funcionalidad centralizada no es generalizable. Por lo tanto, es necesario investigar nuevos principios de diseño y idear patrones arquitectónicos que difieran de los tradicionalmente utilizados en el diseño de middleware para sistemas fijos. Como ejemplo, considera la reciente tendencia de <br>superposición de capas</br> en redes ad-hoc [1]. Esta es una forma de replantear el diseño de sistemas de software, abandonando explícitamente las formas clásicas de estratificación, ya que, aunque esta separación de preocupaciones permite la portabilidad, lo hace a expensas de posibles ganancias de eficiencia. Creemos que es posible ver nuestro enfoque como una instancia de <br>superposición de capas</br>. De hecho, hemos añadido el protocolo de red epidémica a nivel de middleware y, al mismo tiempo, hemos utilizado el protocolo de red síncrono existente si está presente tanto en la entrega de mensajes (capas tradicionales) como en informar al middleware sobre cuándo pueden entregarse los mensajes revelando detalles de las tablas de reenvío (violación de capas). Por esta razón, preferimos considerarlos conjuntamente como la capa de comunicación de nuestra plataforma, proporcionando juntos una entrega de mensajes más eficiente. Otro aspecto interesante es la explotación del contexto y la información del sistema para mejorar el rendimiento de las plataformas de middleware móvil. Una vez más, como resultado de adoptar una <br>metodología de capas cruzadas</br>, podemos construir sistemas que recopilan información del sistema operativo subyacente y los componentes de comunicación para permitir la adaptación del comportamiento. Podemos resumir este enfoque de diseño conceptual diciendo que las plataformas de middleware deben ser no solo conscientes del contexto (es decir, deben ser capaces de extraer y analizar información del contexto circundante) sino también conscientes del sistema (es decir, deben ser capaces de recopilar información de los componentes de software y hardware del sistema móvil). Se han desarrollado varios sistemas de middleware para admitir redes ad hoc con el uso de comunicación asíncrona (como LIME, XMIDDLE, STEAM [11]). En particular, la plataforma STEAM es un ejemplo interesante de middleware basado en eventos para redes ad hoc, que proporciona entrega de mensajes con conciencia de ubicación y una solución efectiva para el filtrado de eventos. Una discusión sobre JMS, y su realización móvil, ya ha sido realizada en las Secciones 4 y 2. La empresa suiza Softwired ha desarrollado el primer middleware JMS para computación móvil, llamado iBus Mobile [10]. Los componentes principales de esta arquitectura típicamente basada en infraestructura son el proveedor de JMS, la llamada puerta de enlace móvil de JMS, que se despliega en un host fijo y una biblioteca de cliente JMS ligera. El gateway se utiliza para la comunicación entre el servidor de aplicaciones y los dispositivos móviles. El proveedor JMS ve la pasarela como un cliente JMS normal. El proveedor JMS puede ser cualquier servidor de aplicaciones habilitado para JMS, como BEA Weblogic. Pronto [19] es un ejemplo de un sistema de middleware basado en mensajería, diseñado específicamente para entornos móviles. La plataforma está compuesta por tres clases de componentes: clientes móviles que implementan la especificación JMS, pasarelas que controlan el tráfico, garantizando eficiencia y posibles personalizaciones de usuario utilizando diferentes complementos y servidores JMS. Diferentes configuraciones de estos componentes son posibles; con respecto a las aplicaciones de redes móviles ad hoc, la más interesante es Serverless JMS. El objetivo de esta configuración es adaptar JMS a un modelo descentralizado. El modelo de publicación-suscripción explota la eficiencia y la escalabilidad del protocolo de multidifusión IP subyacente. Se proporcionan servicios de entrega de mensajes poco confiables y confiables: la confiabilidad se logra a través de un protocolo basado en acuse de recibo negativo. Pronto representa una buena solución para redes móviles basadas en infraestructura, pero no se dirige adecuadamente a entornos ad-hoc, ya que los nodos móviles dependen de servidores fijos para el intercambio de mensajes. Existen otras MOM implementadas para entornos móviles; sin embargo, suelen ser extensiones sencillas de middleware existente [8]. La única implementación de MOM específicamente diseñada para redes móviles ad-hoc fue desarrollada en la Universidad de Newcastle [18]. Este trabajo es nuevamente una adaptación de JMS; el enfoque de esa implementación se centra en la comunicación de grupo y el uso de algoritmos de enrutamiento a nivel de aplicación para la entrega de mensajes por tema. Sin embargo, hay una serie de diferencias en el enfoque de nuestro trabajo. La importancia que atribuimos a las desconexiones hace que la persistencia sea un requisito vital para cualquier middleware que necesite ser utilizado en redes móviles ad-hoc. Los autores de [18] señalan la persistencia como un posible trabajo futuro, sin considerar el hecho de que enrutar un mensaje a un host no conectado resultará en un fallo de entrega. Esta es una limitación notable en entornos móviles donde las desconexiones impredecibles son la norma en lugar de la excepción. 7. MAPA Y CONCLUSIONES La comunicación asincrónica es un paradigma de comunicación útil para las redes móviles ad-hoc, ya que permite a los hosts llegar, irse y recoger mensajes cuando sea conveniente, teniendo en cuenta también la disponibilidad de sus recursos (por ejemplo, energía, niveles de conectividad). En este artículo hemos descrito el estado del arte en términos de MOM para sistemas móviles. También hemos demostrado una adaptación de prueba de concepto de JMS al escenario extremo de redes móviles ad-hoc parcialmente conectadas. Hemos descrito y discutido las características y diferencias de nuestra solución con respecto a las implementaciones tradicionales de JMS y las adaptaciones existentes para entornos móviles. Sin embargo, también se deben investigar los compromisos entre el enrutamiento a nivel de aplicación y el uso de recursos, ya que los dispositivos móviles suelen tener escasez de energía/recursos. Una limitación clave de este trabajo es el algoritmo epidémico que tiene un rendimiento deficiente y un avance importante en la practicabilidad de este trabajo requiere un algoritmo que equilibre mejor las necesidades de eficiencia y probabilidad de entrega de mensajes. Actualmente estamos trabajando en algoritmos y protocolos que, aprovechando técnicas probabilísticas y estadísticas sobre la base de pequeñas cantidades de información intercambiada, son capaces de mejorar considerablemente la eficiencia en términos de recursos (memoria, ancho de banda, etc.) y la confiabilidad de nuestra plataforma de middleware [13]. Un desarrollo de investigación futurista, que podría llevar estas ideas de adaptación de middleware de mensajería para entornos móviles más allá, es la introducción de extensiones de comunicación más orientadas a la movilidad, como el soporte de geocast (es decir, la capacidad de enviar mensajes a áreas geográficas específicas). REFERENCIAS [1] M. Conti, G. Maselli, G. Turi y S. Giordano. Diseño de redes móviles ad-hoc con <br>interconexión de capas</br>. IEEE Computer, 37(2):48-51, febrero de 2004. [2] A. Demers, D. Greene, C. Hauser, W. Irish, J. Larson, S. Shenker, H. Sturgis, D. Swinehart y D. Terry. Algoritmos de epidemia para el mantenimiento de bases de datos replicadas. En el Sexto Simposio sobre Principios de Computación Distribuida, páginas 1-12, agosto de 1987. [3] A. Doria, M. Uden y D. P. Pandey. Proporcionando conectividad a la comunidad nómada Saami. En Actas de la Segunda Conferencia Internacional sobre Diseño Colaborativo Abierto para la Innovación Sostenible, diciembre de 2002. [4] M. Haahr, R. Cunningham y V. Cahill. Aplicaciones CORBA en un entorno móvil. En la 5ª Conferencia Internacional sobre Computación y Redes Móviles (MOBICOM99), páginas 36-47. ACM, agosto de 1999. [5] M. Hapner, R. Burridge, R. Sharma, J. Fialli y K. Stout. Especificación del Servicio de Mensajes Java Versión 1.1. Sun Microsystems, Inc., abril de 2002. http://java.sun.com/products/jms/. [6] J. Hart. WebSphere MQ: Conectando sus aplicaciones sin programación compleja. IBM WebSphere Software White Papers, 2003. [7] S. Hayward y M. Pezzini. Casando Middleware y Computación Móvil. Informe de investigación del Grupo Gartner, septiembre de 2001. [8] IBM. WebSphere MQ EveryPlace Versión 2.0, noviembre de 2002. http://www-3.ibm.com/software/integration/wmqe/. [9] UIT. Conectando comunidades remotas. Documentos de la Cumbre Mundial sobre la Sociedad de la Información, 2003. http://www.itu.int/osg/spu/wsis-themes. [10] S. Maffeis. Presentando JMS inalámbrico. Softwired AG, www.sofwired-inc.com, 2002. [11] C. Mascolo, L. Capra y W. Emmerich. Middleware para Computación Móvil. En E. Gregori, G. Anastasi y S. Basagni, editores, Conferencias Avanzadas sobre Redes, volumen 2497 de las Notas de Conferencias en Ciencias de la Computación, páginas 20-58. Springer Verlag, 2002. [12] Microsoft. \n\nSpringer Verlag, 2002. [12] Microsoft. Documentación de Microsoft Message Queuing (MSMQ) Versión 2.0. [13] M. Musolesi, S. Hailes y C. Mascolo. Enrutamiento adaptativo para redes ad-hoc móviles intermitentemente conectadas. Informe técnico, Nota de Investigación UCL-CS, julio de 2004. Enviado para su publicación. [14] Sun Microsystems. Documentación de Java Naming and Directory Interface (JNDI) Versión 1.2. 2003. http://java.sun.com/products/jndi/. [15] Sun Microsystems. Especificación de Jini Versión 2.0, 2003. http://java.sun.com/products/jini/. [16] A. Vahdat y D. Becker. Enrutamiento epidémico para redes ad-hoc parcialmente conectadas. Informe técnico CS-2000-06, Departamento de Ciencias de la Computación, Universidad de Duke, 2000. [17] A. Vargas. El sistema de simulación de eventos discretos OMNeT++. En Actas de la Multiconferencia Europea de Simulación (ESM2001), Praga, junio de 2001. [18] E. Vollset, D. Ingham y P. Ezhilchelvan. JMS en redes móviles ad-hoc. En Comunicaciones Inalámbricas Personales (PWC), páginas 40-52, Venecia, septiembre de 2003. [19] E. Yoneki y J. Bacon. Pronto: Mobilegateway con paradigma de publicación-suscripción sobre red inalámbrica. Informe Técnico 559, Universidad de Cambridge, Laboratorio de Computación, febrero de 2003. Middleware para Computación Pervasive y ad-hoc 126 ",
            "candidates": [],
            "error": [
                [
                    "superposición de capas",
                    "superposición de capas",
                    "metodología de capas cruzadas",
                    "interconexión de capas"
                ]
            ]
        },
        "application level routing": {
            "translated_key": "enrutamiento a nivel de aplicación",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Adapting Asynchronous Messaging Middleware to ad-hoc Networking Mirco Musolesi Dept.",
                "of Computer Science, University College London Gower Street, London WC1E 6BT, United Kingdom m.musolesi@cs.ucl.ac.uk Cecilia Mascolo Dept. of Computer Science, University College London Gower Street, London WC1E 6BT, United Kingdom c.mascolo@cs.ucl.ac.uk Stephen Hailes Dept. of Computer Science, University College London Gower Street, London WC1E 6BT, United Kingdom s.hailes@cs.ucl.ac.uk ABSTRACT The characteristics of mobile environments, with the possibility of frequent disconnections and fluctuating bandwidth, have forced a rethink of traditional middleware.",
                "In particular, the synchronous communication paradigms often employed in standard middleware do not appear to be particularly suited to ad-hoc environments, in which not even the intermittent availability of a backbone network can be assumed.",
                "Instead, asynchronous communication seems to be a generally more suitable paradigm for such environments.",
                "Message oriented middleware for traditional systems has been developed and used to provide an asynchronous paradigm of communication for distributed systems, and, recently, also for some specific mobile computing systems.",
                "In this paper, we present our experience in designing, implementing and evaluating EMMA (Epidemic Messaging Middleware for ad-hoc networks), an adaptation of Java Message Service (JMS) for mobile ad-hoc environments.",
                "We discuss in detail the design challenges and some possible solutions, showing a concrete example of the feasibility and suitability of the application of the asynchronous paradigm in this setting and outlining a research roadmap for the coming years.",
                "Categories and Subject Descriptors C.2.4 [Computer-Communication Networks]: Distributed Systems-Distributed Applications; C.2.1 [Network Architecture and Design]: Wireless Communication General Terms DESIGN, ALGORITHMS 1.",
                "INTRODUCTION With the increasing popularity of mobile devices and their widespread adoption, there is a clear need to allow the development of a broad spectrum of applications that operate effectively over such an environment.",
                "Unfortunately, this is far from simple: mobile devices are increasingly heterogeneous in terms of processing capabilities, memory size, battery capacity, and network interfaces.",
                "Each such configuration has substantially different characteristics that are both statically different - for example, there is a major difference in capability between a Berkeley mote and an 802.11g-equipped laptop - and that vary dynamically, as in situations of fluctuating bandwidth and intermittent connectivity.",
                "Mobile ad hoc environments have an additional element of complexity in that they are entirely decentralised.",
                "In order to craft applications for such complex environments, an appropriate form of middleware is essential if cost effective development is to be achieved.",
                "In this paper, we examine one of the foundational aspects of middleware for mobile ad-hoc environments: that of the communication primitives.",
                "Traditionally, the most frequently used middleware primitives for communication assume the simultaneous presence of both end points on a network, since the stability and pervasiveness of the networking infrastructure is not an unreasonable assumption for most wired environments.",
                "In other words, most communication paradigms are synchronous: object oriented middleware such as CORBA and Java RMI are typical examples of middleware based on synchronous communication.",
                "In recent years, there has been growing interest in platforms based on asynchronous communication paradigms, such as publish-subscribe systems [6]: these have been exploited very successfully where there is application level asynchronicity.",
                "From a Gartner Market Report [7]: Given messageoriented-middlewares (MOM) popularity, scalability, flexibility, and affinity with mobile and wireless architectures, by 2004, MOM will emerge as the dominant form of communication middleware for linking mobile and enterprise applications (0.7 probability)....",
                "Moreover, in mobile ad-hoc systems, the likelihood of network fragmentation means that synchronous communication may in any case be impracticable, giving situations in which delay tolerant asynchronous traffic is the only form of traffic that could be supported. 121 Middleware 2004 Companion Middleware for mobile ad-hoc environments must therefore support semi-synchronous or completely asynchronous communication primitives if it is to avoid substantial limitations to its utility.",
                "Aside from the intellectual challenge in supporting this model, this work is also interesting because there are a number of practical application domains in allowing inter-community communication in undeveloped areas of the globe.",
                "Thus, for example, projects that have been carried out to help populations that live in remote places of the globe such as Lapland [3] or in poor areas that lack fixed connectivity infrastructure [9].",
                "There have been attempts to provide mobile middleware with these properties, including STEAM, LIME, XMIDDLE, Bayou (see [11] for a more complete review of mobile middleware).",
                "These models differ quite considerably from the existing traditional middleware in terms of primitives provided.",
                "Furthermore, some of them fail in providing a solution for the true ad-hoc scenarios.",
                "If the projected success of MOM becomes anything like a reality, there will be many programmers with experience of it.",
                "The ideal solution to the problem of middleware for ad-hoc systems is, then, to allow programmers to utilise the same paradigms and models presented by common forms of MOM and to ensure that these paradigms are supportable within the mobile environment.",
                "This approach has clear advantages in allowing applications developed on standard middleware platforms to be easily deployed on mobile devices.",
                "Indeed, some research has already led to the adaptation of traditional middleware platforms to mobile settings, mainly to provide integration between mobile devices and existing fixed networks in a nomadic (i.e., mixed) environment [4].",
                "With respect to message oriented middleware, the current implementations, however, either assume the existence of a backbone network to which the mobile hosts connect from time to time while roaming [10], or assume that nodes are always somehow reachable through a path [18].",
                "No adaptation to heterogeneous or completely ad-hoc scenarios, with frequent disconnection and periodically isolated clouds of hosts, has been attempted.",
                "In the remainder of this paper we describe an initial attempt to adapt message oriented middleware to suit mobile and, more specifically, mobile ad-hoc networks.",
                "In our case, we elected to examine JMS, as one of the most widely known MOM systems.",
                "In the latter part of this paper, we explore the limitations of our results and describe the plans we have to take the work further. 2.",
                "MESSAGE ORIENTED MIDDLEWARE AND JAVA MESSAGE SERVICE (JMS) Message-oriented middleware systems support communication between distributed components via message-passing: the sender sends a message to identified queues, which usually reside on a server.",
                "A receiver retrieves the message from the queue at a different time and may acknowledge the reply using the same asynchronous mechanism.",
                "Message-oriented middleware thus supports asynchronous communication in a very natural way, achieving de-coupling of senders and receivers.",
                "A sender is able to continue processing as soon as the middleware has accepted the message; eventually, the receiver will send an acknowledgment message and the sender will be able to collect it at a convenient time.",
                "However, given the way they are implemented, these middleware systems usually require resource-rich devices, especially in terms of memory and disk space, where persistent queues of messages that have been received but not yet processed, are stored.",
                "Sun Java Message Service [5], IBM WebSphere MQ [6], Microsoft MSMQ [12] are examples of very successful message-oriented middleware for traditional distributed systems.",
                "The Java Messaging Service (JMS) is a collection of interfaces for asynchronous communication between distributed components.",
                "It provides a common way for Java programs to create, send and receive messages.",
                "JMS users are usually referred to as clients.",
                "The JMS specification further defines providers as the components in charge of implementing the messaging system and providing the administrative and control functionality (i.e., persistence and reliability) required by the system.",
                "Clients can send and receive messages, asynchronously, through the JMS provider, which is in charge of the delivery and, possibly, of the persistence of the messages.",
                "There are two types of communication supported: point to point and publish-subscribe models.",
                "In the point to point model, hosts send messages to queues.",
                "Receivers can be registered with some specific queues, and can asynchronously retrieve the messages and then acknowledge them.",
                "The publish-subscribe model is based on the use of topics that can be subscribed to by clients.",
                "Messages are sent to topics by other clients and are then received in an asynchronous mode by all the subscribed clients.",
                "Clients learn about the available topics and queues through Java Naming and Directory Interface (JNDI) [14].",
                "Queues and topics are created by an administrator on the provider and are registered with the JNDI interface for look-up.",
                "In the next section, we introduce the challenges of mobile networks, and show how JMS can be adapted to cope with these requirements. 3.",
                "JMS FOR MOBILE COMPUTING Mobile networks vary very widely in their characteristics, from nomadic networks in which modes relocate whilst offline through to ad-hoc networks in which modes move freely and in which there is no infrastructure.",
                "Mobile ad-hoc networks are most generally applicable in situations where survivability and instant deployability are key: most notably in military applications and disaster relief.",
                "In between these two types of mobile networks, there are, however, a number of possible heterogeneous combinations, where nomadic and ad-hoc paradigms are used to interconnect totally unwired areas to more structured networks (such as a LAN or the Internet).",
                "Whilst the JMS specification has been extensively implemented and used in traditional distributed systems, adaptations for mobile environments have been proposed only recently.",
                "The challenges of porting JMS to mobile settings are considerable; however, in view of its widespread acceptance and use, there are considerable advantages in allowing the adaptation of existing applications to mobile environments and in allowing the interoperation of applications in the wired and wireless regions of a network.",
                "In [10], JMS was adapted to a nomadic mobile setting, where mobile hosts can be JMS clients and communicate through the JMS provider that, however, sits on a backbone network, providing reliability and persistence.",
                "The client prototype presented in [10] is very lightweight, due to the delegation of all the heavyweight functionality to the Middleware for Pervasive and ad-hoc Computing 122 provider on the wired network.",
                "However, this approach is somewhat limited in terms of widespread applicability and scalability as a consequence of the concentration of functionality in the wired portion of the network.",
                "If JMS is to be adapted to completely ad-hoc environments, where no fixed infrastructure is available, and where nodes change location and status very dynamically, more issues must be taken into consideration.",
                "Firstly, discovery needs to use a resilient but distributed model: in this extremely dynamic environment, static solutions are unacceptable.",
                "As discussed in Section 2, a JMS administrator defines queues and topics on the provider.",
                "Clients can then learn about them using the Java Naming and Directory Interface (JNDI).",
                "However, due to the way JNDI is designed, a JNDI node (or more than one) needs to be in reach in order to obtain a binding of a name to an address (i.e., knowing where a specific queue/topic is).",
                "In mobile ad-hoc environments, the discovery process cannot assume the existence of a fixed set of discovery servers that are always reachable, as this would not match the dynamicity of ad-hoc networks.",
                "Secondly, a JMS Provider, as suggested by the JMS specification, also needs to be reachable by each node in the network, in order to communicate.",
                "This assumes a very centralised architecture, which again does not match the requirements of a mobile ad-hoc setting, in which nodes may be moving and sparse: a more distributed and dynamic solution is needed.",
                "Persistence is, however, essential functionality in asynchronous communication environments as hosts are, by definition, connected at different times.",
                "In the following section, we will discuss our experience in designing and implementing JMS for mobile ad-hoc networks. 4.",
                "JMSFOR MOBILE ad-hoc NETWORKS 4.1 Adaptation of JMS for Mobile ad-hoc Networks Developing applications for mobile networks is yet more challenging: in addition to the same considerations as for infrastructured wireless environments, such as the limited device capabilities and power constraints, there are issues of rate of change of network connectivity, and the lack of a static routing infrastructure.",
                "Consequently, we now describe an initial attempt to adapt the JMS specification to target the particular requirements related to ad-hoc scenarios.",
                "As discussed in Section 3, a JMS application can use either the point to point and the publish-subscribe styles of messaging.",
                "Point to Point Model The point to point model is based on the concept of queues, that are used to enable asynchronous communication between the producer of a message and possible different consumers.",
                "In our solution, the location of queues is determined by a negotiation process that is application dependent.",
                "For example, let us suppose that it is possible to know a priori, or it is possible to determine dynamically, that a certain host is the receiver of the most part of messages sent to a particular queue.",
                "In this case, the optimum location of the queue may well be on this particular host.",
                "In general, it is worth noting that, according to the JMS specification and suggested design patterns, it is common and preferable for a client to have all of its messages delivered to a single queue.",
                "Queues are advertised periodically to the hosts that are within transmission range or that are reachable by means of the underlying synchronous communication protocol, if provided.",
                "It is important to note that, at the middleware level, it is logically irrelevant whether or not the network layer implements some form of ad-hoc routing (though considerably more efficient if it does); the middleware only considers information about which nodes are actively reachable at any point in time.",
                "The hosts that receive advertisement messages add entries to their JNDI registry.",
                "Each entry is characterized by a lease (a mechanism similar to that present in Jini [15]).",
                "A lease represents the time of validity of a particular entry.",
                "If a lease is not refreshed (i.e, its life is not extended), it can expire and, consequently, the entry is deleted from the registry.",
                "In other words, the host assumes that the queue will be unreachable from that point in time.",
                "This may be caused, for example, if a host storing the queue becomes unreachable.",
                "A host that initiates a discovery process will find the topics and the queues present in its connected portion of the network in a straightforward manner.",
                "In order to deliver a message to a host that is not currently in reach1 , we use an asynchronous epidemic routing protocol that will be discussed in detail in Section 4.2.",
                "If two hosts are in the same cloud (i.e., a connected path exists between them), but no synchronous protocol is available, the messages are sent using the epidemic protocol.",
                "In this case, the delivery latency will be low as a result of the rapidity of propagation of the infection in the connected cloud (see also the simulation results in Section 5).",
                "Given the existence of an epidemic protocol, the discovery mechanism consists of advertising the queues to the hosts that are currently unreachable using analogous mechanisms.",
                "Publish-Subscribe Model In the publish-subscribe model, some of the hosts are similarly designated to hold topics and store subscriptions, as before.",
                "Topics are advertised through the registry in the same way as are queues, and a client wishing to subscribe to a topic must register with the client holding the topic.",
                "When a client wishes to send a message to the topic list, it sends it to the topic holder (in the same way as it would send a message to a queue).",
                "The topic holder then forwards the message to all subscribers, using the synchronous protocol if possible, the epidemic protocol otherwise.",
                "It is worth noting that we use a single message with multiple recipients, instead of multiple messages with multiple recipients.",
                "When a message is delivered to one of the subscribers, this recipient is deleted from the list.",
                "In order to delete the other possible replicas, we employ acknowledgment messages (discussed in Section 4.4), returned in the same way as a normal message.",
                "We have also adapted the concepts of durable and non durable subscriptions for ad-hoc settings.",
                "In fixed platforms, durable subscriptions are maintained during the disconnections of the clients, whether these are intentional or are the result of failures.",
                "In traditional systems, while a durable subscriber is disconnected from the server, it is responsible for storing messages.",
                "When the durable subscriber reconnects, the server sends it all unexpired messages.",
                "The problem is that, in our scenario, disconnections are the norm 1 In theory, it is not possible to send a message to a peer that has never been reachable in the past, since there can be no entry present in the registry.",
                "However, to overcome this possible limitation, we provide a primitive through which information can be added to the registry without using the normal channels. 123 Middleware 2004 Companion rather than the exception.",
                "In other words, we cannot consider disconnections as failures.",
                "For these reasons, we adopt a slightly different semantics.",
                "With respect to durable subscriptions, if a subscriber becomes disconnected, notifications are not stored but are sent using the epidemic protocol rather than the synchronous protocol.",
                "In other words, durable notifications remain valid during the possible disconnections of the subscriber.",
                "On the other hand, if a non-durable subscriber becomes disconnected, its subscription is deleted; in other words, during disconnections, notifications are not sent using the epidemic protocol but exploit only the synchronous protocol.",
                "If the topic becomes accessible to this host again, it must make another subscription in order to receive the notifications.",
                "Unsubscription messages are delivered in the same way as are subscription messages.",
                "It is important to note that durable subscribers have explicitly to unsubscribe from a topic in order to stop the notification process; however, all durable subscriptions have a predefined expiration time in order to cope with the cases of subscribers that do not meet again because of their movements or failures.",
                "This feature is clearly provided to limit the number of the unnecessary messages sent around the network. 4.2 Message Delivery using Epidemic Routing In this section, we examine one possible mechanism that will allow the delivery of messages in a partially connected network.",
                "The mechanism we discuss is intended for the purposes of demonstrating feasibility; more efficient communication mechanisms for this environment are themselves complex, and are the subject of another paper [13].",
                "The asynchronous message delivery described above is based on a typical pure epidemic-style routing protocol [16].",
                "A message that needs to be sent is replicated on each host in reach.",
                "In this way, copies of the messages are quickly spread through connected networks, like an infection.",
                "If a host becomes connected to another cloud of mobile nodes, during its movement, the message spreads through this collection of hosts.",
                "Epidemic-style replication of data and messages has been exploited in the past in many fields starting with the distributed database systems area [2].",
                "Within epidemic routing, each host maintains a buffer containing the messages that it has created and the replicas of the messages generated by the other hosts.",
                "To improve the performance, a hash-table indexes the content of the buffer.",
                "When two hosts connect, the host with the smaller identifier initiates a so-called anti-entropy session, sending a list containing the unique identifiers of the messages that it currently stores.",
                "The other host evaluates this list and sends back a list containing the identifiers it is storing that are not present in the other host, together with the messages that the other does not have.",
                "The host that has started the session receives the list and, in the same way, sends the messages that are not present in the other host.",
                "Should buffer overflow occur, messages are dropped.",
                "The reliability offered by this protocol is typically best effort, since there is no guarantee that a message will eventually be delivered to its recipient.",
                "Clearly, the delivery ratio of the protocol increases proportionally to the maximum allowed delay time and the buffer size in each host (interesting simulation results may be found in [16]). 4.3 Adaptation of the JMS Message Model In this section, we will analyse the aspects of our adaptation of the specification related to the so-called JMS Message Model [5].",
                "According to this, JMS messages are characterised by some properties defined using the header field, which contains values that are used by both clients and providers for their delivery.",
                "The aspects discussed in the remainder of this section are valid for both models (point to point and publish-subscribe).",
                "A JMS message can be persistent or non-persistent.",
                "According to the JMS specification, persistent messages must be delivered with a higher degree of reliability than the nonpersistent ones.",
                "However, it is worth noting that it is not possible to ensure once-and-only-once reliability for persistent messages as defined in the specification, since, as we discussed in the previous subsection, the underlying epidemic protocol can guarantee only best-effort delivery.",
                "However, clients maintain a list of the identifiers of the recently received messages to avoid the delivery of message duplicates.",
                "In other words, we provide the applications with at-mostonce reliability for both types of messages.",
                "In order to implement different levels of reliability, EMMA treats persistent and non-persistent messages differently, during the execution of the anti-entropy epidemic protocol.",
                "Since the message buffer space is limited, persistent messages are preferentially replicated using the available free space.",
                "If this is insufficient and non-persistent messages are present in the buffer, these are replaced.",
                "Only the successful deliveries of the persistent messages are notified to the senders.",
                "According to the JMS specification, it is possible to assign a priority to each message.",
                "The messages with higher priorities are delivered in a preferential way.",
                "As discussed above, persistent messages are prioritised above the non-persistent ones.",
                "Further selection is based on their priorities.",
                "Messages with higher priorities are treated in a preferential way.",
                "In fact, if there is not enough space to replicate all the persistent messages, a mechanism based on priorities is used to delete and replicate non-persistent messages (and, if necessary, persistent messages).",
                "Messages are deleted from the buffers using the expiration time value that can be set by senders.",
                "This is a way to free space in the buffers (one preferentially deletes older messages in cases of conflict); to eliminate stale replicas in the system; and to limit the time for which destinations must hold message identifiers to dispose of duplicates. 4.4 Reliability and Acknowledgment Mechanisms As already discussed, at-most-once message delivery is the best that can be achieved in terms of delivery semantics in partially connected ad-hoc settings.",
                "However, it is possible to improve the reliability of the system with efficient acknowledgment mechanisms.",
                "EMMA provides a mechanism for failure notification to applications if the acknowledgment is not received within a given timeout (that can be configured by application developers).",
                "This mechanism is the one that distinguishes the delivery of persistent and non-persistent messages in our JMS implementation: the deliveries of the former are notified to the senders, whereas the latter are not.",
                "We use acknowledgment messages not only to inform senders about the successful delivery of messages but also to delete the replicas of the delivered messages that are still present in the network.",
                "Each host maintains a list of the messages Middleware for Pervasive and ad-hoc Computing 124 successfully delivered that is updated as part of the normal process of information exchange between the hosts.",
                "The lists are exchanged during the first steps of the anti-entropic epidemic protocol with a certain predefined frequency.",
                "In the case of messages with multiple recipients, a list of the actual recipients is also stored.",
                "When a host receives the list, it checks its message buffer and updates it according to the following rules: (1) if a message has a single recipient and it has been delivered, it is deleted from the buffer; (2) if a message has multiple recipients, the identifiers of the delivered hosts are deleted from the associated list of recipients.",
                "If the resulting length of the list of recipients is zero, the message is deleted from the buffer.",
                "These lists have, clearly, finite dimensions and are implemented as circular queues.",
                "This simple mechanism, together with the use of expiration timestamps, guarantees that the old acknowledgment notifications are deleted from the system after a limited period of time.",
                "In order to improve the reliability of EMMA, a design mechanism for intelligent replication of queues and topics based on the context information could be developed.",
                "However this is not yet part of the current architecture of EMMA. 5.",
                "IMPLEMENTATION AND PRELIMINARY EVALUATION We implemented a prototype of our platform using the J2ME Personal Profile.",
                "The size of the executable is about 250KB including the JMS 1.1 jar file; this is a perfectly acceptable figure given the available memory of the current mobile devices on the market.",
                "We tested our prototype on HP IPaq PDAs running Linux, interconnected with WaveLan, and on a number of laptops with the same network interface.",
                "We also evaluated the middleware platform using the OMNET++ discrete event simulator [17] in order to explore a range of mobile scenarios that incorporated a more realistic number of hosts than was achievable experimentally.",
                "More specifically, we assessed the performance of the system in terms of delivery ratio and average delay, varying the density of population and the buffer size, and using persistent and non-persistent messages with different priorities.",
                "The simulation results show that the EMMAs performance, in terms of delivery ratio and delay of persistent messages with higher priorities, is good.",
                "In general, it is evident that the delivery ratio is strongly related to the correct dimensioning of the buffers to the maximum acceptable delay.",
                "Moreover, the epidemic algorithms are able to guarantee a high delivery ratio if one evaluates performance over a time interval sufficient for the dissemination of the replicas of messages (i.e., the infection spreading) in a large portion of the ad-hoc network.",
                "One consequence of the dimensioning problem is that scalability may be seriously impacted in peer-to-peer middleware for mobile computing due to the resource poverty of the devices (limited memory to store temporarily messages) and the number of possible interconnections in ad-hoc settings.",
                "What is worse is that common forms of commercial and social organisation (six degrees of separation) mean that even modest TTL values on messages will lead to widespread flooding of epidemic messages.",
                "This problem arises because of the lack of intelligence in the epidemic protocol, and can be addressed by selecting carrier nodes for messages with greater care.",
                "The details of this process are, however, outside the scope of this paper (but may be found in [13]) and do not affect the foundation on which the EMMA middleware is based: the ability to deliver messages asynchronously. 6.",
                "CRITICAL VIEW OF THE STATE OF THE ART The design of middleware platforms for mobile computing requires researchers to answer new and fundamentally different questions; simply assuming the presence of wired portions of the network on which centralised functionality can reside is not generalisable.",
                "Thus, it is necessary to investigate novel design principles and to devise architectural patterns that differ from those traditionally exploited in the design of middleware for fixed systems.",
                "As an example, consider the recent cross-layering trend in ad-hoc networking [1].",
                "This is a way of re-thinking software systems design, explicitly abandoning the classical forms of layering, since, although this separation of concerns afford portability, it does so at the expense of potential efficiency gains.",
                "We believe that it is possible to view our approach as an instance of cross-layering.",
                "In fact, we have added the epidemic network protocol at middleware level and, at the same time, we have used the existing synchronous network protocol if present both in delivering messages (traditional layering) and in informing the middleware about when messages may be delivered by revealing details of the forwarding tables (layer violation).",
                "For this reason, we prefer to consider them jointly as the communication layer of our platform together providing more efficient message delivery.",
                "Another interesting aspect is the exploitation of context and system information to improve the performance of mobile middleware platforms.",
                "Again, as a result of adopting a cross-layering methodology, we are able to build systems that gather information from the underlying operating system and communication components in order to allow for adaptation of behaviour.",
                "We can summarise this conceptual design approach by saying that middleware platforms must be not only context-aware (i.e., they should be able to extract and analyse information from the surrounding context) but also system-aware (i.e., they should be able to gather information from the software and hardware components of the mobile system).",
                "A number of middleware systems have been developed to support ad-hoc networking with the use of asynchronous communication (such as LIME, XMIDDLE, STEAM [11]).",
                "In particular, the STEAM platform is an interesting example of event-based middleware for ad-hoc networks, providing location-aware message delivery and an effective solution for event filtering.",
                "A discussion of JMS, and its mobile realisation, has already been conducted in Sections 4 and 2.",
                "The Swiss company Softwired has developed the first JMS middleware for mobile computing, called iBus Mobile [10].",
                "The main components of this typically infrastructure-based architecture are the JMS provider, the so-called mobile JMS gateway, which is deployed on a fixed host and a lightweight JMS client library.",
                "The gateway is used for the communication between the application server and mobile hosts.",
                "The gateway is seen by the JMS provider as a normal JMS client.",
                "The JMS provider can be any JMS-enabled application server, such as BEA Weblogic.",
                "Pronto [19] is an example of mid125 Middleware 2004 Companion dleware system based on messaging that is specifically designed for mobile environments.",
                "The platform is composed of three classes of components: mobile clients implementing the JMS specification, gateways that control traffic, guaranteeing efficiency and possible user customizations using different plug-ins and JMS servers.",
                "Different configurations of these components are possible; with respect to mobile ad hoc networks applications, the most interesting is Serverless JMS.",
                "The aim of this configuration is to adapt JMS to a decentralized model.",
                "The publish-subscribe model exploits the efficiency and the scalability of the underlying IP multicast protocol.",
                "Unreliable and reliable message delivery services are provided: reliability is provided through a negative acknowledgment-based protocol.",
                "Pronto represents a good solution for infrastructure-based mobile networks but it does not adequately target ad-hoc settings, since mobile nodes rely on fixed servers for the exchange of messages.",
                "Other MOM implemented for mobile environments exist; however, they are usually straightforward extensions of existing middleware [8].",
                "The only implementation of MOM specifically designed for mobile ad-hoc networks was developed at the University of Newcastle [18].",
                "This work is again a JMS adaptation; the focus of that implementation is on group communication and the use of <br>application level routing</br> algorithms for topic delivery of messages.",
                "However, there are a number of differences in the focus of our work.",
                "The importance that we attribute to disconnections makes persistence a vital requirement for any middleware that needs to be used in mobile ad-hoc networks.",
                "The authors of [18] signal persistence as possible future work, not considering the fact that routing a message to a non-connected host will result in delivery failure.",
                "This is a remarkable limitation in mobile settings where unpredictable disconnections are the norm rather than the exception. 7.",
                "ROADMAP AND CONCLUSIONS Asynchronous communication is a useful communication paradigm for mobile ad-hoc networks, as hosts are allowed to come, go and pick up messages when convenient, also taking account of their resource availability (e.g., power, connectivity levels).",
                "In this paper we have described the state of the art in terms of MOM for mobile systems.",
                "We have also shown a proof of concept adaptation of JMS to the extreme scenario of partially connected mobile ad-hoc networks.",
                "We have described and discussed the characteristics and differences of our solution with respect to traditional JMS implementations and the existing adaptations for mobile settings.",
                "However, trade-offs between application-level routing and resource usage should also be investigated, as mobile devices are commonly power/resource scarce.",
                "A key limitation of this work is the poorly performing epidemic algorithm and an important advance in the practicability of this work requires an algorithm that better balances the needs of efficiency and message delivery probability.",
                "We are currently working on algorithms and protocols that, exploiting probabilistic and statistical techniques on the basis of small amounts of exchanged information, are able to improve considerably the efficiency in terms of resources (memory, bandwidth, etc) and the reliability of our middleware platform [13].",
                "One futuristic research development, which may take these ideas of adaptation of messaging middleware for mobile environments further is the introduction of more mobility oriented communication extensions, for instance the support of geocast (i.e., the ability to send messages to specific geographical areas). 8.",
                "REFERENCES [1] M. Conti, G. Maselli, G. Turi, and S. Giordano.",
                "Cross-layering in Mobile ad-hoc Network Design.",
                "IEEE Computer, 37(2):48-51, February 2004. [2] A. Demers, D. Greene, C. Hauser, W. Irish, J. Larson, S. Shenker, H. Sturgis, D. Swinehart, and D. Terry.",
                "Epidemic Algorithms for Replicated Database Maintenance.",
                "In Sixth Symposium on Principles of Distributed Computing, pages 1-12, August 1987. [3] A. Doria, M. Uden, and D. P. Pandey.",
                "Providing connectivity to the Saami nomadic community.",
                "In Proceedings of the Second International Conference on Open Collaborative Design for Sustainable Innovation, December 2002. [4] M. Haahr, R. Cunningham, and V. Cahill.",
                "Supporting CORBA applications in a Mobile Environment.",
                "In 5th International Conference on Mobile Computing and Networking (MOBICOM99), pages 36-47.",
                "ACM, August 1999. [5] M. Hapner, R. Burridge, R. Sharma, J. Fialli, and K. Stout.",
                "Java Message Service Specification Version 1.1.",
                "Sun Microsystems, Inc., April 2002. http://java.sun.com/products/jms/. [6] J. Hart.",
                "WebSphere MQ: Connecting your applications without complex programming.",
                "IBM WebSphere Software White Papers, 2003. [7] S. Hayward and M. Pezzini.",
                "Marrying Middleware and Mobile Computing.",
                "Gartner Group Research Report, September 2001. [8] IBM.",
                "WebSphere MQ EveryPlace Version 2.0, November 2002. http://www-3.ibm.com/software/integration/wmqe/. [9] ITU.",
                "Connecting remote communities.",
                "Documents of the World Summit on Information Society, 2003. http://www.itu.int/osg/spu/wsis-themes. [10] S. Maffeis.",
                "Introducing Wireless JMS.",
                "Softwired AG, www.sofwired-inc.com, 2002. [11] C. Mascolo, L. Capra, and W. Emmerich.",
                "Middleware for Mobile Computing.",
                "In E. Gregori, G. Anastasi, and S. Basagni, editors, Advanced Lectures on Networking, volume 2497 of Lecture Notes in Computer Science, pages 20-58.",
                "Springer Verlag, 2002. [12] Microsoft.",
                "Microsoft Message Queuing (MSMQ) Version 2.0 Documentation. [13] M. Musolesi, S. Hailes, and C. Mascolo.",
                "Adaptive routing for intermittently connected mobile ad-hoc networks.",
                "Technical report, UCL-CS Research Note, July 2004.",
                "Submitted for Publication. [14] Sun Microsystems.",
                "Java Naming and Directory Interface (JNDI) Documentation Version 1.2. 2003. http://java.sun.com/products/jndi/. [15] Sun Microsystems.",
                "Jini Specification Version 2.0, 2003. http://java.sun.com/products/jini/. [16] A. Vahdat and D. Becker.",
                "Epidemic routing for Partially Connected ad-hoc Networks.",
                "Technical Report CS-2000-06, Department of Computer Science, Duke University, 2000. [17] A. Vargas.",
                "The OMNeT++ discrete event simulation system.",
                "In Proceedings of the European Simulation Multiconference (ESM2001), Prague, June 2001. [18] E. Vollset, D. Ingham, and P. Ezhilchelvan.",
                "JMS on Mobile ad-hoc Networks.",
                "In Personal Wireless Communications (PWC), pages 40-52, Venice, September 2003. [19] E. Yoneki and J. Bacon.",
                "Pronto: Mobilegateway with publish-subscribe paradigm over wireless network.",
                "Technical Report 559, University of Cambridge, Computer Laboratory, February 2003.",
                "Middleware for Pervasive and ad-hoc Computing 126"
            ],
            "original_annotated_samples": [
                "This work is again a JMS adaptation; the focus of that implementation is on group communication and the use of <br>application level routing</br> algorithms for topic delivery of messages."
            ],
            "translated_annotated_samples": [
                "Este trabajo es nuevamente una adaptación de JMS; el enfoque de esa implementación se centra en la comunicación de grupo y el uso de algoritmos de <br>enrutamiento a nivel de aplicación</br> para la entrega de mensajes por tema."
            ],
            "translated_text": "Adaptando Middleware de Mensajería Asincrónica a Redes Ad-hoc Mirco Musolesi Dept. Las características de los entornos móviles, con la posibilidad de desconexiones frecuentes y ancho de banda fluctuante, han obligado a replantear el middleware tradicional. En particular, los paradigmas de comunicación síncrona a menudo empleados en middleware estándar no parecen ser particularmente adecuados para entornos ad-hoc, en los que ni siquiera se puede asumir la disponibilidad intermitente de una red troncal. En cambio, la comunicación asincrónica parece ser un paradigma generalmente más adecuado para este tipo de entornos. Se ha desarrollado y utilizado middleware orientado a mensajes para sistemas tradicionales con el fin de proporcionar un paradigma de comunicación asíncrona para sistemas distribuidos, y, recientemente, también para algunos sistemas específicos de computación móvil. En este artículo, presentamos nuestra experiencia en el diseño, implementación y evaluación de EMMA (Middleware de Mensajería Epidémica para redes ad-hoc), una adaptación del Servicio de Mensajes Java (JMS) para entornos móviles ad-hoc. Discutimos en detalle los desafíos de diseño y algunas posibles soluciones, mostrando un ejemplo concreto de la viabilidad y adecuación de la aplicación del paradigma asíncrono en este contexto y delineando un plan de investigación para los próximos años. Categorías y Descriptores de Asignaturas C.2.4 [Redes de Computadoras-Comunicación]: Sistemas Distribuidos-Aplicaciones Distribuidas; C.2.1 [Arquitectura y Diseño de Redes]: Comunicación Inalámbrica Términos Generales DISEÑO, ALGORITMOS 1. INTRODUCCIÓN Con la creciente popularidad de los dispositivos móviles y su amplia adopción, existe una clara necesidad de permitir el desarrollo de un amplio espectro de aplicaciones que operen de manera efectiva en dicho entorno. Lamentablemente, esto está lejos de ser simple: los dispositivos móviles son cada vez más heterogéneos en cuanto a capacidades de procesamiento, tamaño de memoria, capacidad de batería e interfaces de red. Cada una de estas configuraciones tiene características sustancialmente diferentes que son estáticamente distintas, por ejemplo, hay una gran diferencia en la capacidad entre un mote de Berkeley y un portátil equipado con 802.11g, y que varían dinámicamente, como en situaciones de ancho de banda fluctuante y conectividad intermitente. Los entornos móviles ad hoc tienen un elemento adicional de complejidad en que son completamente descentralizados. Para poder desarrollar aplicaciones para entornos tan complejos, es esencial contar con una forma adecuada de middleware si se busca lograr un desarrollo rentable. En este artículo, examinamos uno de los aspectos fundamentales de middleware para entornos móviles ad-hoc: el de los primitivos de comunicación. Tradicionalmente, los primitivos de middleware más utilizados para la comunicación asumen la presencia simultánea de ambos puntos finales en una red, ya que la estabilidad y la ubicuidad de la infraestructura de redes no es una suposición irrazonable para la mayoría de los entornos cableados. En otras palabras, la mayoría de los paradigmas de comunicación son síncronos: middleware orientado a objetos como CORBA y Java RMI son ejemplos típicos de middleware basado en comunicación síncrona. En los últimos años, ha habido un creciente interés en plataformas basadas en paradigmas de comunicación asincrónica, como los sistemas de publicación-suscripción: estos han sido explotados con mucho éxito donde existe asincronía a nivel de aplicación. De acuerdo con un informe de mercado de Gartner [7]: Dada la popularidad, escalabilidad, flexibilidad y afinidad con arquitecturas móviles e inalámbricas de los middlewares orientados a mensajes (MOM), para el año 2004, es probable que MOM se convierta en la forma dominante de middleware de comunicación para vincular aplicaciones móviles y empresariales (probabilidad del 0.7)... Además, en sistemas ad-hoc móviles, la probabilidad de fragmentación de la red significa que la comunicación síncrona puede resultar impracticable en cualquier caso, lo que da lugar a situaciones en las que el tráfico asincrónico tolerante a retrasos es la única forma de tráfico que podría ser admitida. El middleware para entornos ad-hoc móviles debe, por lo tanto, admitir primitivas de comunicación semi-síncronas o completamente asíncronas si se quiere evitar limitaciones sustanciales en su utilidad. Además del desafío intelectual que implica apoyar este modelo, este trabajo también es interesante porque existen varios ámbitos de aplicación práctica al permitir la comunicación entre comunidades en áreas subdesarrolladas del mundo. Por lo tanto, por ejemplo, proyectos que se han llevado a cabo para ayudar a poblaciones que viven en lugares remotos del mundo como Laponia o en áreas pobres que carecen de infraestructura de conectividad fija. Ha habido intentos de proporcionar middleware móvil con estas propiedades, incluyendo STEAM, LIME, XMIDDLE, Bayou (consulte [11] para una revisión más completa del middleware móvil). Estos modelos difieren considerablemente de los middleware tradicionales existentes en cuanto a los primitivos proporcionados. Además, algunos de ellos fallan en proporcionar una solución para los verdaderos escenarios ad-hoc. Si el éxito proyectado de MOM se convierte en algo parecido a la realidad, habrá muchos programadores con experiencia en ello. La solución ideal al problema del middleware para sistemas ad-hoc es, entonces, permitir a los programadores utilizar los mismos paradigmas y modelos presentados por formas comunes de MOM y asegurar que estos paradigmas sean soportables dentro del entorno móvil. Este enfoque tiene claras ventajas al permitir que las aplicaciones desarrolladas en plataformas de middleware estándar se desplieguen fácilmente en dispositivos móviles. De hecho, algunas investigaciones ya han llevado a la adaptación de plataformas de middleware tradicionales a entornos móviles, principalmente para proporcionar integración entre dispositivos móviles y redes fijas existentes en un entorno nómada (es decir, mixto) [4]. En lo que respecta al middleware orientado a mensajes, las implementaciones actuales, sin embargo, asumen la existencia de una red troncal a la que los hosts móviles se conectan de vez en cuando mientras están en itinerancia [10], o asumen que los nodos siempre son de alguna manera accesibles a través de un camino [18]. No se ha intentado ninguna adaptación a escenarios heterogéneos o completamente ad hoc, con desconexiones frecuentes y nubes periódicamente aisladas de hosts. En el resto de este documento describimos un intento inicial de adaptar middleware orientado a mensajes para que se ajuste a dispositivos móviles y, más específicamente, a redes móviles ad-hoc. En nuestro caso, elegimos examinar JMS, como uno de los sistemas MOM más conocidos. En la última parte de este documento, exploramos las limitaciones de nuestros resultados y describimos los planes que tenemos para llevar a cabo el trabajo más adelante. Los sistemas de middleware orientados a mensajes y el Servicio de Mensajes de Java (JMS) admiten la comunicación entre componentes distribuidos a través del paso de mensajes: el remitente envía un mensaje a colas identificadas, que generalmente residen en un servidor. Un receptor recupera el mensaje de la cola en un momento diferente y puede confirmar la respuesta utilizando el mismo mecanismo asíncrono. La middleware orientada a mensajes soporta la comunicación asíncrona de una manera muy natural, logrando el desacoplamiento de emisores y receptores. Un remitente puede continuar procesando tan pronto como el middleware haya aceptado el mensaje; eventualmente, el receptor enviará un mensaje de confirmación y el remitente podrá recogerlo en un momento conveniente. Sin embargo, dado la forma en que están implementados, estos sistemas de middleware suelen requerir dispositivos con recursos abundantes, especialmente en términos de memoria y espacio en disco, donde se almacenan colas persistentes de mensajes que han sido recibidos pero aún no procesados. Sun Java Message Service [5], IBM WebSphere MQ [6], Microsoft MSMQ [12] son ejemplos de middleware orientado a mensajes muy exitosos para sistemas distribuidos tradicionales. El Servicio de Mensajería de Java (JMS) es una colección de interfaces para la comunicación asincrónica entre componentes distribuidos. Proporciona una forma común para que los programas de Java creen, envíen y reciban mensajes. Los usuarios de JMS suelen ser referidos como clientes. La especificación JMS define además a los proveedores como los componentes encargados de implementar el sistema de mensajería y proporcionar la funcionalidad administrativa y de control (es decir, persistencia y confiabilidad) requerida por el sistema. Los clientes pueden enviar y recibir mensajes, de forma asincrónica, a través del proveedor JMS, que se encarga de la entrega y, posiblemente, de la persistencia de los mensajes. Hay dos tipos de comunicación admitidos: modelos punto a punto y de publicación-suscripción. En el modelo punto a punto, los hosts envían mensajes a colas. Los receptores pueden ser registrados con algunas colas específicas, y pueden recuperar los mensajes de forma asíncrona para luego confirmar su recepción. El modelo de publicación-suscripción se basa en el uso de temas a los que los clientes pueden suscribirse. Los mensajes son enviados a los temas por otros clientes y luego son recibidos de forma asíncrona por todos los clientes suscritos. Los clientes aprenden sobre los temas y colas disponibles a través de la Interfaz de Nombres y Directorios de Java (JNDI) [14]. Las colas y los temas son creados por un administrador en el proveedor y se registran con la interfaz JNDI para su búsqueda. En la siguiente sección, presentamos los desafíos de las redes móviles y mostramos cómo JMS puede adaptarse para cumplir con estos requisitos. 3. JMS PARA COMPUTACIÓN MÓVIL Las redes móviles varían mucho en sus características, desde redes nómadas en las que los nodos se desplazan mientras están desconectados, hasta redes ad-hoc en las que los nodos se mueven libremente y no hay infraestructura. Las redes móviles ad-hoc son más comúnmente aplicables en situaciones donde la supervivencia y la capacidad de despliegue instantáneo son clave: especialmente en aplicaciones militares y de ayuda en casos de desastre. Entre estos dos tipos de redes móviles, sin embargo, existen una serie de posibles combinaciones heterogéneas, donde se utilizan paradigmas nómadas y ad-hoc para interconectar áreas totalmente inalámbricas con redes más estructuradas (como una LAN o Internet). Si bien la especificación JMS ha sido ampliamente implementada y utilizada en sistemas distribuidos tradicionales, las adaptaciones para entornos móviles han sido propuestas recientemente. Los desafíos de adaptar JMS a entornos móviles son considerables; sin embargo, dada su amplia aceptación y uso, existen ventajas considerables al permitir la adaptación de aplicaciones existentes a entornos móviles y al permitir la interoperabilidad de aplicaciones en las regiones cableadas e inalámbricas de una red. En [10], JMS se adaptó a un entorno móvil nómada, donde los hosts móviles pueden ser clientes de JMS y comunicarse a través del proveedor de JMS que, sin embargo, se encuentra en una red troncal, proporcionando fiabilidad y persistencia. El prototipo del cliente presentado en [10] es muy ligero, debido a la delegación de toda la funcionalidad pesada al proveedor Middleware para Computación Pervasive y ad-hoc 122 en la red cableada. Sin embargo, este enfoque es algo limitado en términos de aplicabilidad generalizada y escalabilidad como consecuencia de la concentración de funcionalidad en la parte cableada de la red. Si se quiere adaptar JMS a entornos completamente ad hoc, donde no haya infraestructura fija disponible y donde los nodos cambien de ubicación y estado de forma muy dinámica, se deben tener en cuenta más problemas. En primer lugar, el descubrimiento necesita utilizar un modelo resiliente pero distribuido: en este entorno extremadamente dinámico, las soluciones estáticas son inaceptables. Como se discute en la Sección 2, un administrador de JMS define colas y temas en el proveedor. Los clientes pueden entonces aprender sobre ellos utilizando la Interfaz de Nombres y Directorios de Java (JNDI). Sin embargo, debido a la forma en que está diseñado JNDI, es necesario que un nodo de JNDI (o más de uno) esté al alcance para obtener una vinculación de un nombre a una dirección (es decir, saber dónde se encuentra una cola o un tema específico). En entornos móviles ad-hoc, el proceso de descubrimiento no puede asumir la existencia de un conjunto fijo de servidores de descubrimiento que siempre sean accesibles, ya que esto no coincidiría con la dinámica de las redes ad-hoc. En segundo lugar, un Proveedor de JMS, como sugiere la especificación de JMS, también debe ser accesible para cada nodo en la red, para poder comunicarse. Esto asume una arquitectura muy centralizada, que nuevamente no coincide con los requisitos de un entorno ad-hoc móvil, en el que los nodos pueden estar en movimiento y dispersos: se necesita una solución más distribuida y dinámica. La persistencia es, sin embargo, una funcionalidad esencial en entornos de comunicación asincrónica, ya que los hosts están, por definición, conectados en momentos diferentes. En la siguiente sección, discutiremos nuestra experiencia en el diseño e implementación de JMS para redes móviles ad-hoc. 4. El desarrollo de aplicaciones para redes móviles es aún más desafiante: además de las mismas consideraciones que para entornos inalámbricos infraestructurados, como las limitadas capacidades de los dispositivos y las restricciones de energía, existen problemas relacionados con la velocidad de cambio de la conectividad de la red y la falta de una infraestructura de enrutamiento estática. En consecuencia, ahora describimos un intento inicial de adaptar la especificación JMS para satisfacer los requisitos particulares relacionados con escenarios ad-hoc. Como se discute en la Sección 3, una aplicación JMS puede utilizar tanto el estilo de mensajería punto a punto como el de publicación-suscripción. Modelo de punto a punto. El modelo de punto a punto se basa en el concepto de colas, que se utilizan para habilitar la comunicación asincrónica entre el productor de un mensaje y posibles consumidores diferentes. En nuestra solución, la ubicación de las colas se determina mediante un proceso de negociación que depende de la aplicación. Por ejemplo, supongamos que es posible saber a priori, o es posible determinar dinámicamente, que cierto host es el receptor de la mayor parte de los mensajes enviados a una cola particular. En este caso, la ubicación óptima de la cola bien podría estar en este host en particular. En general, vale la pena señalar que, según la especificación de JMS y los patrones de diseño sugeridos, es común y preferible que un cliente tenga todos sus mensajes entregados a una sola cola. Las colas se anuncian periódicamente a los anfitriones que se encuentran dentro del rango de transmisión o que son alcanzables mediante el protocolo de comunicación síncrona subyacente, si se proporciona. Es importante tener en cuenta que, a nivel de middleware, es lógicamente irrelevante si la capa de red implementa alguna forma de enrutamiento ad-hoc (aunque considerablemente más eficiente si lo hace); el middleware solo considera información sobre qué nodos son accesibles activamente en cualquier momento. Los hosts que reciben mensajes publicitarios agregan entradas a su registro JNDI. Cada entrada se caracteriza por un arrendamiento (un mecanismo similar al presente en Jini [15]). Un contrato de arrendamiento representa el tiempo de validez de una entrada particular. Si un arrendamiento no se renueva (es decir, su vida no se extiende), puede vencer y, en consecuencia, la entrada se elimina del registro. En otras palabras, el anfitrión asume que la cola será inaccesible a partir de ese momento. Esto puede ser causado, por ejemplo, si un host que almacena la cola se vuelve inaccesible. Un host que inicia un proceso de descubrimiento encontrará los temas y las colas presentes en su porción conectada de la red de manera directa. Para enviar un mensaje a un anfitrión que actualmente no está al alcance, utilizamos un protocolo de enrutamiento de epidemia asíncrono que se discutirá en detalle en la Sección 4.2. Si dos hosts están en la misma nube (es decir, existe un camino conectado entre ellos), pero no hay disponible un protocolo síncrono, los mensajes se envían utilizando el protocolo epidémico. En este caso, la latencia de entrega será baja como resultado de la rapidez de propagación de la infección en la nube conectada (ver también los resultados de la simulación en la Sección 5). Dado la existencia de un protocolo de epidemia, el mecanismo de descubrimiento consiste en publicitar las colas a los hosts que actualmente son inalcanzables utilizando mecanismos análogos. En el modelo de publicación-suscripción, algunos de los hosts son designados de manera similar para mantener temas y almacenar suscripciones, como antes. Los temas se anuncian a través del registro de la misma manera que las colas, y un cliente que desee suscribirse a un tema debe registrarse con el cliente que tiene el tema. Cuando un cliente desea enviar un mensaje a la lista de temas, lo envía al titular del tema (de la misma manera que enviaría un mensaje a una cola). El titular del tema luego reenvía el mensaje a todos los suscriptores, utilizando el protocolo síncrono si es posible, de lo contrario el protocolo epidémico. Vale la pena señalar que utilizamos un único mensaje con múltiples destinatarios, en lugar de múltiples mensajes con múltiples destinatarios. Cuando un mensaje es entregado a uno de los suscriptores, este destinatario es eliminado de la lista. Para eliminar las posibles réplicas restantes, empleamos mensajes de acuse de recibo (discutidos en la Sección 4.4), devueltos de la misma manera que un mensaje normal. También hemos adaptado los conceptos de suscripciones duraderas y no duraderas para entornos ad-hoc. En las plataformas fijas, las suscripciones duraderas se mantienen durante las desconexiones de los clientes, ya sean intencionales o resultado de fallas. En los sistemas tradicionales, cuando un suscriptor duradero se desconecta del servidor, es responsable de almacenar los mensajes. Cuando el suscriptor duradero se reconecta, el servidor le envía todos los mensajes no caducados. El problema es que, en nuestro escenario, las desconexiones son la norma. En teoría, no es posible enviar un mensaje a un par que nunca ha sido alcanzable en el pasado, ya que no puede haber ninguna entrada presente en el registro. Sin embargo, para superar esta posible limitación, proporcionamos un mecanismo a través del cual la información puede ser añadida al registro sin utilizar los canales normales. 123 Middleware 2004 Companion en lugar de la excepción. En otras palabras, no podemos considerar las desconexiones como fallos. Por estas razones, adoptamos una semántica ligeramente diferente. En lo que respecta a las suscripciones duraderas, si un suscriptor se desconecta, las notificaciones no se almacenan, sino que se envían utilizando el protocolo epidémico en lugar del protocolo síncrono. En otras palabras, las notificaciones duraderas siguen siendo válidas durante las posibles desconexiones del suscriptor. Por otro lado, si un suscriptor no duradero se desconecta, su suscripción se elimina; en otras palabras, durante las desconexiones, las notificaciones no se envían utilizando el protocolo epidémico, sino que solo se aprovecha el protocolo síncrono. Si el tema vuelve a estar accesible para este anfitrión, deberá realizar otra suscripción para recibir las notificaciones. Los mensajes de baja se entregan de la misma manera que los mensajes de suscripción. Es importante tener en cuenta que los suscriptores duraderos deben darse de baja explícitamente de un tema para detener el proceso de notificación; sin embargo, todas las suscripciones duraderas tienen un tiempo de expiración predefinido para hacer frente a los casos de suscriptores que no vuelven a conectarse debido a sus movimientos o fallos. Esta característica se proporciona claramente para limitar el número de mensajes innecesarios enviados por la red. 4.2 Entrega de mensajes utilizando enrutamiento epidémico En esta sección, examinamos un mecanismo posible que permitirá la entrega de mensajes en una red parcialmente conectada. El mecanismo que discutimos está destinado a demostrar viabilidad; los mecanismos de comunicación más eficientes para este entorno son complejos por sí mismos y son el tema de otro artículo [13]. La entrega de mensajes asincrónica descrita anteriormente se basa en un protocolo de enrutamiento de estilo epidémico puro típico [16]. Un mensaje que necesita ser enviado se replica en cada host al alcance. De esta manera, las copias de los mensajes se propagan rápidamente a través de redes conectadas, como una infección. Si un anfitrión se conecta a otra nube de nodos móviles durante su movimiento, el mensaje se propaga a través de esta colección de anfitriones. La replicación de datos y mensajes en estilo epidémico ha sido explotada en el pasado en muchos campos, comenzando por el área de sistemas de bases de datos distribuidas [2]. Dentro del enrutamiento epidémico, cada anfitrión mantiene un búfer que contiene los mensajes que ha creado y las réplicas de los mensajes generados por los otros anfitriones. Para mejorar el rendimiento, una tabla hash indexa el contenido del búfer. Cuando dos anfitriones se conectan, el anfitrión con el identificador más pequeño inicia una sesión de anti-entropía, enviando una lista que contiene los identificadores únicos de los mensajes que actualmente almacena. El otro anfitrión evalúa esta lista y envía de vuelta una lista que contiene los identificadores que está almacenando y que no están presentes en el otro anfitrión, junto con los mensajes que el otro no tiene. El anfitrión que ha iniciado la sesión recibe la lista y, de la misma manera, envía los mensajes que no están presentes en el otro anfitrión. En caso de producirse un desbordamiento de búfer, los mensajes se descartan. La fiabilidad ofrecida por este protocolo es generalmente de mejor esfuerzo, ya que no hay garantía de que un mensaje finalmente sea entregado a su destinatario. Claramente, la proporción de entrega del protocolo aumenta proporcionalmente al tiempo máximo de retraso permitido y al tamaño del búfer en cada host (pueden encontrarse resultados interesantes de simulación en [16]). 4.3 Adaptación del Modelo de Mensajes JMS En esta sección, analizaremos los aspectos de nuestra adaptación de la especificación relacionados con el llamado Modelo de Mensajes JMS [5]. Según esto, los mensajes JMS se caracterizan por algunas propiedades definidas utilizando el campo de encabezado, que contiene valores que son utilizados tanto por los clientes como por los proveedores para su entrega. Los aspectos discutidos en el resto de esta sección son válidos para ambos modelos (punto a punto y publicar-suscribir). Un mensaje JMS puede ser persistente o no persistente. Según la especificación de JMS, los mensajes persistentes deben entregarse con un grado de confiabilidad mayor que los no persistentes. Sin embargo, vale la pena señalar que no es posible garantizar la fiabilidad de una sola vez para mensajes persistentes según lo definido en la especificación, ya que, como discutimos en la subsección anterior, el protocolo epidémico subyacente solo puede garantizar la entrega de mejor esfuerzo. Sin embargo, los clientes mantienen una lista de los identificadores de los mensajes recibidos recientemente para evitar la entrega de mensajes duplicados. En otras palabras, proporcionamos a las aplicaciones una fiabilidad inmediata para ambos tipos de mensajes. Para implementar diferentes niveles de confiabilidad, EMMA trata de manera diferente los mensajes persistentes y no persistentes durante la ejecución del protocolo epidémico de anti-entropía. Dado que el espacio del búfer de mensajes es limitado, los mensajes persistentes se replican preferentemente utilizando el espacio libre disponible. Si esto es insuficiente y hay mensajes no persistentes presentes en el búfer, estos son reemplazados. Solo se notifican a los remitentes las entregas exitosas de los mensajes persistentes. Según la especificación de JMS, es posible asignar una prioridad a cada mensaje. Los mensajes con prioridades más altas se entregan de manera preferencial. Como se discutió anteriormente, los mensajes persistentes tienen prioridad sobre los no persistentes. La selección adicional se basa en sus prioridades. Los mensajes con prioridades más altas son tratados de manera preferencial. De hecho, si no hay suficiente espacio para replicar todos los mensajes persistentes, se utiliza un mecanismo basado en prioridades para eliminar y replicar los mensajes no persistentes (y, si es necesario, los mensajes persistentes). Los mensajes se eliminan de los buffers utilizando el valor de tiempo de expiración que puede ser establecido por los remitentes. Esta es una forma de liberar espacio en los búferes (se eliminan preferentemente los mensajes más antiguos en casos de conflicto); para eliminar réplicas obsoletas en el sistema; y para limitar el tiempo durante el cual los destinos deben mantener los identificadores de mensajes para desechar duplicados. Mecanismos de fiabilidad y de acuse de recibo Como ya se discutió, la entrega de mensajes como máximo una vez es lo mejor que se puede lograr en términos de semántica de entrega en entornos ad-hoc parcialmente conectados. Sin embargo, es posible mejorar la confiabilidad del sistema con mecanismos de acuse de recibo eficientes. EMMA proporciona un mecanismo de notificación de fallos a las aplicaciones si no se recibe el acuse de recibo dentro de un tiempo límite dado (que puede ser configurado por los desarrolladores de aplicaciones). Este mecanismo es el que distingue la entrega de mensajes persistentes y no persistentes en nuestra implementación de JMS: las entregas de los primeros son notificadas a los remitentes, mientras que los de los segundos no lo son. Utilizamos mensajes de acuse de recibo no solo para informar a los remitentes sobre la entrega exitosa de los mensajes, sino también para eliminar las réplicas de los mensajes entregados que aún están presentes en la red. Cada anfitrión mantiene una lista de los mensajes Middleware para la Computación Pervasiva y Ad-hoc 124 entregados con éxito que se actualiza como parte del proceso normal de intercambio de información entre los anfitriones. Las listas se intercambian durante los primeros pasos del protocolo de epidemia anti-entropía con una frecuencia predefinida. En el caso de mensajes con múltiples destinatarios, también se almacena una lista de los destinatarios reales. Cuando un anfitrión recibe la lista, verifica su búfer de mensajes y lo actualiza de acuerdo con las siguientes reglas: (1) si un mensaje tiene un único destinatario y ha sido entregado, se elimina del búfer; (2) si un mensaje tiene múltiples destinatarios, se eliminan los identificadores de los anfitriones a los que se ha entregado de la lista de destinatarios asociada. Si la longitud resultante de la lista de destinatarios es cero, el mensaje se elimina del búfer. Estas listas tienen, claramente, dimensiones finitas y se implementan como colas circulares. Este mecanismo simple, junto con el uso de marcas de tiempo de expiración, garantiza que las antiguas notificaciones de acuse de recibo sean eliminadas del sistema después de un período de tiempo limitado. Para mejorar la confiabilidad de EMMA, se podría desarrollar un mecanismo de diseño para la replicación inteligente de colas y temas basado en la información de contexto. Sin embargo, esto aún no forma parte de la arquitectura actual de EMMA. 5. IMPLEMENTACIÓN Y EVALUACIÓN PRELIMINAR Implementamos un prototipo de nuestra plataforma utilizando el Perfil Personal J2ME. El tamaño del ejecutable es de aproximadamente 250KB, incluido el archivo jar de JMS 1.1; esta es una cifra perfectamente aceptable dada la memoria disponible de los dispositivos móviles actuales en el mercado. Probamos nuestro prototipo en PDAs HP iPaq con Linux, interconectados con WaveLan, y en varios laptops con la misma interfaz de red. También evaluamos la plataforma de middleware utilizando el simulador de eventos discretos OMNET++ [17] para explorar una variedad de escenarios móviles que incorporaban un número más realista de hosts que el que se podía lograr experimentalmente. Más específicamente, evaluamos el rendimiento del sistema en términos de ratio de entrega y retraso promedio, variando la densidad de población y el tamaño del búfer, y utilizando mensajes persistentes y no persistentes con diferentes prioridades. Los resultados de la simulación muestran que el rendimiento de EMMAs, en términos de ratio de entrega y retraso de mensajes persistentes con prioridades más altas, es bueno. En general, es evidente que la proporción de entrega está fuertemente relacionada con el dimensionamiento correcto de los búferes para el retraso máximo aceptable. Además, los algoritmos epidémicos son capaces de garantizar una alta tasa de entrega si se evalúa el rendimiento durante un intervalo de tiempo suficiente para la difusión de las réplicas de los mensajes (es decir, la propagación de la infección) en una gran parte de la red ad-hoc. Una consecuencia del problema de dimensionamiento es que la escalabilidad puede verse seriamente afectada en middleware peer-to-peer para computación móvil debido a la escasez de recursos de los dispositivos (memoria limitada para almacenar temporalmente mensajes) y al número de posibles interconexiones en entornos ad-hoc. Lo peor es que las formas comunes de organización comercial y social (seis grados de separación) significan que incluso valores modestos de TTL en los mensajes provocarán una difusión generalizada de mensajes epidémicos. Este problema surge debido a la falta de inteligencia en el protocolo de la epidemia, y puede ser abordado seleccionando nodos portadores para los mensajes con mayor cuidado. Sin embargo, los detalles de este proceso están fuera del alcance de este documento (pero pueden encontrarse en [13]) y no afectan la base en la que se basa el middleware EMMA: la capacidad de entregar mensajes de forma asincrónica. 6. VISIÓN CRÍTICA DEL ESTADO DEL ARTE El diseño de plataformas de middleware para la computación móvil requiere que los investigadores respondan a preguntas nuevas y fundamentalmente diferentes; simplemente asumir la presencia de porciones cableadas de la red en las que pueda residir la funcionalidad centralizada no es generalizable. Por lo tanto, es necesario investigar nuevos principios de diseño y idear patrones arquitectónicos que difieran de los tradicionalmente utilizados en el diseño de middleware para sistemas fijos. Como ejemplo, considera la reciente tendencia de superposición de capas en redes ad-hoc [1]. Esta es una forma de replantear el diseño de sistemas de software, abandonando explícitamente las formas clásicas de estratificación, ya que, aunque esta separación de preocupaciones permite la portabilidad, lo hace a expensas de posibles ganancias de eficiencia. Creemos que es posible ver nuestro enfoque como una instancia de superposición de capas. De hecho, hemos añadido el protocolo de red epidémica a nivel de middleware y, al mismo tiempo, hemos utilizado el protocolo de red síncrono existente si está presente tanto en la entrega de mensajes (capas tradicionales) como en informar al middleware sobre cuándo pueden entregarse los mensajes revelando detalles de las tablas de reenvío (violación de capas). Por esta razón, preferimos considerarlos conjuntamente como la capa de comunicación de nuestra plataforma, proporcionando juntos una entrega de mensajes más eficiente. Otro aspecto interesante es la explotación del contexto y la información del sistema para mejorar el rendimiento de las plataformas de middleware móvil. Una vez más, como resultado de adoptar una metodología de capas cruzadas, podemos construir sistemas que recopilan información del sistema operativo subyacente y los componentes de comunicación para permitir la adaptación del comportamiento. Podemos resumir este enfoque de diseño conceptual diciendo que las plataformas de middleware deben ser no solo conscientes del contexto (es decir, deben ser capaces de extraer y analizar información del contexto circundante) sino también conscientes del sistema (es decir, deben ser capaces de recopilar información de los componentes de software y hardware del sistema móvil). Se han desarrollado varios sistemas de middleware para admitir redes ad hoc con el uso de comunicación asíncrona (como LIME, XMIDDLE, STEAM [11]). En particular, la plataforma STEAM es un ejemplo interesante de middleware basado en eventos para redes ad hoc, que proporciona entrega de mensajes con conciencia de ubicación y una solución efectiva para el filtrado de eventos. Una discusión sobre JMS, y su realización móvil, ya ha sido realizada en las Secciones 4 y 2. La empresa suiza Softwired ha desarrollado el primer middleware JMS para computación móvil, llamado iBus Mobile [10]. Los componentes principales de esta arquitectura típicamente basada en infraestructura son el proveedor de JMS, la llamada puerta de enlace móvil de JMS, que se despliega en un host fijo y una biblioteca de cliente JMS ligera. El gateway se utiliza para la comunicación entre el servidor de aplicaciones y los dispositivos móviles. El proveedor JMS ve la pasarela como un cliente JMS normal. El proveedor JMS puede ser cualquier servidor de aplicaciones habilitado para JMS, como BEA Weblogic. Pronto [19] es un ejemplo de un sistema de middleware basado en mensajería, diseñado específicamente para entornos móviles. La plataforma está compuesta por tres clases de componentes: clientes móviles que implementan la especificación JMS, pasarelas que controlan el tráfico, garantizando eficiencia y posibles personalizaciones de usuario utilizando diferentes complementos y servidores JMS. Diferentes configuraciones de estos componentes son posibles; con respecto a las aplicaciones de redes móviles ad hoc, la más interesante es Serverless JMS. El objetivo de esta configuración es adaptar JMS a un modelo descentralizado. El modelo de publicación-suscripción explota la eficiencia y la escalabilidad del protocolo de multidifusión IP subyacente. Se proporcionan servicios de entrega de mensajes poco confiables y confiables: la confiabilidad se logra a través de un protocolo basado en acuse de recibo negativo. Pronto representa una buena solución para redes móviles basadas en infraestructura, pero no se dirige adecuadamente a entornos ad-hoc, ya que los nodos móviles dependen de servidores fijos para el intercambio de mensajes. Existen otras MOM implementadas para entornos móviles; sin embargo, suelen ser extensiones sencillas de middleware existente [8]. La única implementación de MOM específicamente diseñada para redes móviles ad-hoc fue desarrollada en la Universidad de Newcastle [18]. Este trabajo es nuevamente una adaptación de JMS; el enfoque de esa implementación se centra en la comunicación de grupo y el uso de algoritmos de <br>enrutamiento a nivel de aplicación</br> para la entrega de mensajes por tema. Sin embargo, hay una serie de diferencias en el enfoque de nuestro trabajo. La importancia que atribuimos a las desconexiones hace que la persistencia sea un requisito vital para cualquier middleware que necesite ser utilizado en redes móviles ad-hoc. Los autores de [18] señalan la persistencia como un posible trabajo futuro, sin considerar el hecho de que enrutar un mensaje a un host no conectado resultará en un fallo de entrega. Esta es una limitación notable en entornos móviles donde las desconexiones impredecibles son la norma en lugar de la excepción. 7. MAPA Y CONCLUSIONES La comunicación asincrónica es un paradigma de comunicación útil para las redes móviles ad-hoc, ya que permite a los hosts llegar, irse y recoger mensajes cuando sea conveniente, teniendo en cuenta también la disponibilidad de sus recursos (por ejemplo, energía, niveles de conectividad). En este artículo hemos descrito el estado del arte en términos de MOM para sistemas móviles. También hemos demostrado una adaptación de prueba de concepto de JMS al escenario extremo de redes móviles ad-hoc parcialmente conectadas. Hemos descrito y discutido las características y diferencias de nuestra solución con respecto a las implementaciones tradicionales de JMS y las adaptaciones existentes para entornos móviles. Sin embargo, también se deben investigar los compromisos entre el enrutamiento a nivel de aplicación y el uso de recursos, ya que los dispositivos móviles suelen tener escasez de energía/recursos. Una limitación clave de este trabajo es el algoritmo epidémico que tiene un rendimiento deficiente y un avance importante en la practicabilidad de este trabajo requiere un algoritmo que equilibre mejor las necesidades de eficiencia y probabilidad de entrega de mensajes. Actualmente estamos trabajando en algoritmos y protocolos que, aprovechando técnicas probabilísticas y estadísticas sobre la base de pequeñas cantidades de información intercambiada, son capaces de mejorar considerablemente la eficiencia en términos de recursos (memoria, ancho de banda, etc.) y la confiabilidad de nuestra plataforma de middleware [13]. Un desarrollo de investigación futurista, que podría llevar estas ideas de adaptación de middleware de mensajería para entornos móviles más allá, es la introducción de extensiones de comunicación más orientadas a la movilidad, como el soporte de geocast (es decir, la capacidad de enviar mensajes a áreas geográficas específicas). REFERENCIAS [1] M. Conti, G. Maselli, G. Turi y S. Giordano. Diseño de redes móviles ad-hoc con interconexión de capas. IEEE Computer, 37(2):48-51, febrero de 2004. [2] A. Demers, D. Greene, C. Hauser, W. Irish, J. Larson, S. Shenker, H. Sturgis, D. Swinehart y D. Terry. Algoritmos de epidemia para el mantenimiento de bases de datos replicadas. En el Sexto Simposio sobre Principios de Computación Distribuida, páginas 1-12, agosto de 1987. [3] A. Doria, M. Uden y D. P. Pandey. Proporcionando conectividad a la comunidad nómada Saami. En Actas de la Segunda Conferencia Internacional sobre Diseño Colaborativo Abierto para la Innovación Sostenible, diciembre de 2002. [4] M. Haahr, R. Cunningham y V. Cahill. Aplicaciones CORBA en un entorno móvil. En la 5ª Conferencia Internacional sobre Computación y Redes Móviles (MOBICOM99), páginas 36-47. ACM, agosto de 1999. [5] M. Hapner, R. Burridge, R. Sharma, J. Fialli y K. Stout. Especificación del Servicio de Mensajes Java Versión 1.1. Sun Microsystems, Inc., abril de 2002. http://java.sun.com/products/jms/. [6] J. Hart. WebSphere MQ: Conectando sus aplicaciones sin programación compleja. IBM WebSphere Software White Papers, 2003. [7] S. Hayward y M. Pezzini. Casando Middleware y Computación Móvil. Informe de investigación del Grupo Gartner, septiembre de 2001. [8] IBM. WebSphere MQ EveryPlace Versión 2.0, noviembre de 2002. http://www-3.ibm.com/software/integration/wmqe/. [9] UIT. Conectando comunidades remotas. Documentos de la Cumbre Mundial sobre la Sociedad de la Información, 2003. http://www.itu.int/osg/spu/wsis-themes. [10] S. Maffeis. Presentando JMS inalámbrico. Softwired AG, www.sofwired-inc.com, 2002. [11] C. Mascolo, L. Capra y W. Emmerich. Middleware para Computación Móvil. En E. Gregori, G. Anastasi y S. Basagni, editores, Conferencias Avanzadas sobre Redes, volumen 2497 de las Notas de Conferencias en Ciencias de la Computación, páginas 20-58. Springer Verlag, 2002. [12] Microsoft. \n\nSpringer Verlag, 2002. [12] Microsoft. Documentación de Microsoft Message Queuing (MSMQ) Versión 2.0. [13] M. Musolesi, S. Hailes y C. Mascolo. Enrutamiento adaptativo para redes ad-hoc móviles intermitentemente conectadas. Informe técnico, Nota de Investigación UCL-CS, julio de 2004. Enviado para su publicación. [14] Sun Microsystems. Documentación de Java Naming and Directory Interface (JNDI) Versión 1.2. 2003. http://java.sun.com/products/jndi/. [15] Sun Microsystems. Especificación de Jini Versión 2.0, 2003. http://java.sun.com/products/jini/. [16] A. Vahdat y D. Becker. Enrutamiento epidémico para redes ad-hoc parcialmente conectadas. Informe técnico CS-2000-06, Departamento de Ciencias de la Computación, Universidad de Duke, 2000. [17] A. Vargas. El sistema de simulación de eventos discretos OMNeT++. En Actas de la Multiconferencia Europea de Simulación (ESM2001), Praga, junio de 2001. [18] E. Vollset, D. Ingham y P. Ezhilchelvan. JMS en redes móviles ad-hoc. En Comunicaciones Inalámbricas Personales (PWC), páginas 40-52, Venecia, septiembre de 2003. [19] E. Yoneki y J. Bacon. Pronto: Mobilegateway con paradigma de publicación-suscripción sobre red inalámbrica. Informe Técnico 559, Universidad de Cambridge, Laboratorio de Computación, febrero de 2003. Middleware para Computación Pervasive y ad-hoc 126 ",
            "candidates": [],
            "error": [
                [
                    ""
                ]
            ]
        },
        "group communication": {
            "translated_key": "comunicación de grupo",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Adapting Asynchronous Messaging Middleware to ad-hoc Networking Mirco Musolesi Dept.",
                "of Computer Science, University College London Gower Street, London WC1E 6BT, United Kingdom m.musolesi@cs.ucl.ac.uk Cecilia Mascolo Dept. of Computer Science, University College London Gower Street, London WC1E 6BT, United Kingdom c.mascolo@cs.ucl.ac.uk Stephen Hailes Dept. of Computer Science, University College London Gower Street, London WC1E 6BT, United Kingdom s.hailes@cs.ucl.ac.uk ABSTRACT The characteristics of mobile environments, with the possibility of frequent disconnections and fluctuating bandwidth, have forced a rethink of traditional middleware.",
                "In particular, the synchronous communication paradigms often employed in standard middleware do not appear to be particularly suited to ad-hoc environments, in which not even the intermittent availability of a backbone network can be assumed.",
                "Instead, asynchronous communication seems to be a generally more suitable paradigm for such environments.",
                "Message oriented middleware for traditional systems has been developed and used to provide an asynchronous paradigm of communication for distributed systems, and, recently, also for some specific mobile computing systems.",
                "In this paper, we present our experience in designing, implementing and evaluating EMMA (Epidemic Messaging Middleware for ad-hoc networks), an adaptation of Java Message Service (JMS) for mobile ad-hoc environments.",
                "We discuss in detail the design challenges and some possible solutions, showing a concrete example of the feasibility and suitability of the application of the asynchronous paradigm in this setting and outlining a research roadmap for the coming years.",
                "Categories and Subject Descriptors C.2.4 [Computer-Communication Networks]: Distributed Systems-Distributed Applications; C.2.1 [Network Architecture and Design]: Wireless Communication General Terms DESIGN, ALGORITHMS 1.",
                "INTRODUCTION With the increasing popularity of mobile devices and their widespread adoption, there is a clear need to allow the development of a broad spectrum of applications that operate effectively over such an environment.",
                "Unfortunately, this is far from simple: mobile devices are increasingly heterogeneous in terms of processing capabilities, memory size, battery capacity, and network interfaces.",
                "Each such configuration has substantially different characteristics that are both statically different - for example, there is a major difference in capability between a Berkeley mote and an 802.11g-equipped laptop - and that vary dynamically, as in situations of fluctuating bandwidth and intermittent connectivity.",
                "Mobile ad hoc environments have an additional element of complexity in that they are entirely decentralised.",
                "In order to craft applications for such complex environments, an appropriate form of middleware is essential if cost effective development is to be achieved.",
                "In this paper, we examine one of the foundational aspects of middleware for mobile ad-hoc environments: that of the communication primitives.",
                "Traditionally, the most frequently used middleware primitives for communication assume the simultaneous presence of both end points on a network, since the stability and pervasiveness of the networking infrastructure is not an unreasonable assumption for most wired environments.",
                "In other words, most communication paradigms are synchronous: object oriented middleware such as CORBA and Java RMI are typical examples of middleware based on synchronous communication.",
                "In recent years, there has been growing interest in platforms based on asynchronous communication paradigms, such as publish-subscribe systems [6]: these have been exploited very successfully where there is application level asynchronicity.",
                "From a Gartner Market Report [7]: Given messageoriented-middlewares (MOM) popularity, scalability, flexibility, and affinity with mobile and wireless architectures, by 2004, MOM will emerge as the dominant form of communication middleware for linking mobile and enterprise applications (0.7 probability)....",
                "Moreover, in mobile ad-hoc systems, the likelihood of network fragmentation means that synchronous communication may in any case be impracticable, giving situations in which delay tolerant asynchronous traffic is the only form of traffic that could be supported. 121 Middleware 2004 Companion Middleware for mobile ad-hoc environments must therefore support semi-synchronous or completely asynchronous communication primitives if it is to avoid substantial limitations to its utility.",
                "Aside from the intellectual challenge in supporting this model, this work is also interesting because there are a number of practical application domains in allowing inter-community communication in undeveloped areas of the globe.",
                "Thus, for example, projects that have been carried out to help populations that live in remote places of the globe such as Lapland [3] or in poor areas that lack fixed connectivity infrastructure [9].",
                "There have been attempts to provide mobile middleware with these properties, including STEAM, LIME, XMIDDLE, Bayou (see [11] for a more complete review of mobile middleware).",
                "These models differ quite considerably from the existing traditional middleware in terms of primitives provided.",
                "Furthermore, some of them fail in providing a solution for the true ad-hoc scenarios.",
                "If the projected success of MOM becomes anything like a reality, there will be many programmers with experience of it.",
                "The ideal solution to the problem of middleware for ad-hoc systems is, then, to allow programmers to utilise the same paradigms and models presented by common forms of MOM and to ensure that these paradigms are supportable within the mobile environment.",
                "This approach has clear advantages in allowing applications developed on standard middleware platforms to be easily deployed on mobile devices.",
                "Indeed, some research has already led to the adaptation of traditional middleware platforms to mobile settings, mainly to provide integration between mobile devices and existing fixed networks in a nomadic (i.e., mixed) environment [4].",
                "With respect to message oriented middleware, the current implementations, however, either assume the existence of a backbone network to which the mobile hosts connect from time to time while roaming [10], or assume that nodes are always somehow reachable through a path [18].",
                "No adaptation to heterogeneous or completely ad-hoc scenarios, with frequent disconnection and periodically isolated clouds of hosts, has been attempted.",
                "In the remainder of this paper we describe an initial attempt to adapt message oriented middleware to suit mobile and, more specifically, mobile ad-hoc networks.",
                "In our case, we elected to examine JMS, as one of the most widely known MOM systems.",
                "In the latter part of this paper, we explore the limitations of our results and describe the plans we have to take the work further. 2.",
                "MESSAGE ORIENTED MIDDLEWARE AND JAVA MESSAGE SERVICE (JMS) Message-oriented middleware systems support communication between distributed components via message-passing: the sender sends a message to identified queues, which usually reside on a server.",
                "A receiver retrieves the message from the queue at a different time and may acknowledge the reply using the same asynchronous mechanism.",
                "Message-oriented middleware thus supports asynchronous communication in a very natural way, achieving de-coupling of senders and receivers.",
                "A sender is able to continue processing as soon as the middleware has accepted the message; eventually, the receiver will send an acknowledgment message and the sender will be able to collect it at a convenient time.",
                "However, given the way they are implemented, these middleware systems usually require resource-rich devices, especially in terms of memory and disk space, where persistent queues of messages that have been received but not yet processed, are stored.",
                "Sun Java Message Service [5], IBM WebSphere MQ [6], Microsoft MSMQ [12] are examples of very successful message-oriented middleware for traditional distributed systems.",
                "The Java Messaging Service (JMS) is a collection of interfaces for asynchronous communication between distributed components.",
                "It provides a common way for Java programs to create, send and receive messages.",
                "JMS users are usually referred to as clients.",
                "The JMS specification further defines providers as the components in charge of implementing the messaging system and providing the administrative and control functionality (i.e., persistence and reliability) required by the system.",
                "Clients can send and receive messages, asynchronously, through the JMS provider, which is in charge of the delivery and, possibly, of the persistence of the messages.",
                "There are two types of communication supported: point to point and publish-subscribe models.",
                "In the point to point model, hosts send messages to queues.",
                "Receivers can be registered with some specific queues, and can asynchronously retrieve the messages and then acknowledge them.",
                "The publish-subscribe model is based on the use of topics that can be subscribed to by clients.",
                "Messages are sent to topics by other clients and are then received in an asynchronous mode by all the subscribed clients.",
                "Clients learn about the available topics and queues through Java Naming and Directory Interface (JNDI) [14].",
                "Queues and topics are created by an administrator on the provider and are registered with the JNDI interface for look-up.",
                "In the next section, we introduce the challenges of mobile networks, and show how JMS can be adapted to cope with these requirements. 3.",
                "JMS FOR MOBILE COMPUTING Mobile networks vary very widely in their characteristics, from nomadic networks in which modes relocate whilst offline through to ad-hoc networks in which modes move freely and in which there is no infrastructure.",
                "Mobile ad-hoc networks are most generally applicable in situations where survivability and instant deployability are key: most notably in military applications and disaster relief.",
                "In between these two types of mobile networks, there are, however, a number of possible heterogeneous combinations, where nomadic and ad-hoc paradigms are used to interconnect totally unwired areas to more structured networks (such as a LAN or the Internet).",
                "Whilst the JMS specification has been extensively implemented and used in traditional distributed systems, adaptations for mobile environments have been proposed only recently.",
                "The challenges of porting JMS to mobile settings are considerable; however, in view of its widespread acceptance and use, there are considerable advantages in allowing the adaptation of existing applications to mobile environments and in allowing the interoperation of applications in the wired and wireless regions of a network.",
                "In [10], JMS was adapted to a nomadic mobile setting, where mobile hosts can be JMS clients and communicate through the JMS provider that, however, sits on a backbone network, providing reliability and persistence.",
                "The client prototype presented in [10] is very lightweight, due to the delegation of all the heavyweight functionality to the Middleware for Pervasive and ad-hoc Computing 122 provider on the wired network.",
                "However, this approach is somewhat limited in terms of widespread applicability and scalability as a consequence of the concentration of functionality in the wired portion of the network.",
                "If JMS is to be adapted to completely ad-hoc environments, where no fixed infrastructure is available, and where nodes change location and status very dynamically, more issues must be taken into consideration.",
                "Firstly, discovery needs to use a resilient but distributed model: in this extremely dynamic environment, static solutions are unacceptable.",
                "As discussed in Section 2, a JMS administrator defines queues and topics on the provider.",
                "Clients can then learn about them using the Java Naming and Directory Interface (JNDI).",
                "However, due to the way JNDI is designed, a JNDI node (or more than one) needs to be in reach in order to obtain a binding of a name to an address (i.e., knowing where a specific queue/topic is).",
                "In mobile ad-hoc environments, the discovery process cannot assume the existence of a fixed set of discovery servers that are always reachable, as this would not match the dynamicity of ad-hoc networks.",
                "Secondly, a JMS Provider, as suggested by the JMS specification, also needs to be reachable by each node in the network, in order to communicate.",
                "This assumes a very centralised architecture, which again does not match the requirements of a mobile ad-hoc setting, in which nodes may be moving and sparse: a more distributed and dynamic solution is needed.",
                "Persistence is, however, essential functionality in asynchronous communication environments as hosts are, by definition, connected at different times.",
                "In the following section, we will discuss our experience in designing and implementing JMS for mobile ad-hoc networks. 4.",
                "JMSFOR MOBILE ad-hoc NETWORKS 4.1 Adaptation of JMS for Mobile ad-hoc Networks Developing applications for mobile networks is yet more challenging: in addition to the same considerations as for infrastructured wireless environments, such as the limited device capabilities and power constraints, there are issues of rate of change of network connectivity, and the lack of a static routing infrastructure.",
                "Consequently, we now describe an initial attempt to adapt the JMS specification to target the particular requirements related to ad-hoc scenarios.",
                "As discussed in Section 3, a JMS application can use either the point to point and the publish-subscribe styles of messaging.",
                "Point to Point Model The point to point model is based on the concept of queues, that are used to enable asynchronous communication between the producer of a message and possible different consumers.",
                "In our solution, the location of queues is determined by a negotiation process that is application dependent.",
                "For example, let us suppose that it is possible to know a priori, or it is possible to determine dynamically, that a certain host is the receiver of the most part of messages sent to a particular queue.",
                "In this case, the optimum location of the queue may well be on this particular host.",
                "In general, it is worth noting that, according to the JMS specification and suggested design patterns, it is common and preferable for a client to have all of its messages delivered to a single queue.",
                "Queues are advertised periodically to the hosts that are within transmission range or that are reachable by means of the underlying synchronous communication protocol, if provided.",
                "It is important to note that, at the middleware level, it is logically irrelevant whether or not the network layer implements some form of ad-hoc routing (though considerably more efficient if it does); the middleware only considers information about which nodes are actively reachable at any point in time.",
                "The hosts that receive advertisement messages add entries to their JNDI registry.",
                "Each entry is characterized by a lease (a mechanism similar to that present in Jini [15]).",
                "A lease represents the time of validity of a particular entry.",
                "If a lease is not refreshed (i.e, its life is not extended), it can expire and, consequently, the entry is deleted from the registry.",
                "In other words, the host assumes that the queue will be unreachable from that point in time.",
                "This may be caused, for example, if a host storing the queue becomes unreachable.",
                "A host that initiates a discovery process will find the topics and the queues present in its connected portion of the network in a straightforward manner.",
                "In order to deliver a message to a host that is not currently in reach1 , we use an asynchronous epidemic routing protocol that will be discussed in detail in Section 4.2.",
                "If two hosts are in the same cloud (i.e., a connected path exists between them), but no synchronous protocol is available, the messages are sent using the epidemic protocol.",
                "In this case, the delivery latency will be low as a result of the rapidity of propagation of the infection in the connected cloud (see also the simulation results in Section 5).",
                "Given the existence of an epidemic protocol, the discovery mechanism consists of advertising the queues to the hosts that are currently unreachable using analogous mechanisms.",
                "Publish-Subscribe Model In the publish-subscribe model, some of the hosts are similarly designated to hold topics and store subscriptions, as before.",
                "Topics are advertised through the registry in the same way as are queues, and a client wishing to subscribe to a topic must register with the client holding the topic.",
                "When a client wishes to send a message to the topic list, it sends it to the topic holder (in the same way as it would send a message to a queue).",
                "The topic holder then forwards the message to all subscribers, using the synchronous protocol if possible, the epidemic protocol otherwise.",
                "It is worth noting that we use a single message with multiple recipients, instead of multiple messages with multiple recipients.",
                "When a message is delivered to one of the subscribers, this recipient is deleted from the list.",
                "In order to delete the other possible replicas, we employ acknowledgment messages (discussed in Section 4.4), returned in the same way as a normal message.",
                "We have also adapted the concepts of durable and non durable subscriptions for ad-hoc settings.",
                "In fixed platforms, durable subscriptions are maintained during the disconnections of the clients, whether these are intentional or are the result of failures.",
                "In traditional systems, while a durable subscriber is disconnected from the server, it is responsible for storing messages.",
                "When the durable subscriber reconnects, the server sends it all unexpired messages.",
                "The problem is that, in our scenario, disconnections are the norm 1 In theory, it is not possible to send a message to a peer that has never been reachable in the past, since there can be no entry present in the registry.",
                "However, to overcome this possible limitation, we provide a primitive through which information can be added to the registry without using the normal channels. 123 Middleware 2004 Companion rather than the exception.",
                "In other words, we cannot consider disconnections as failures.",
                "For these reasons, we adopt a slightly different semantics.",
                "With respect to durable subscriptions, if a subscriber becomes disconnected, notifications are not stored but are sent using the epidemic protocol rather than the synchronous protocol.",
                "In other words, durable notifications remain valid during the possible disconnections of the subscriber.",
                "On the other hand, if a non-durable subscriber becomes disconnected, its subscription is deleted; in other words, during disconnections, notifications are not sent using the epidemic protocol but exploit only the synchronous protocol.",
                "If the topic becomes accessible to this host again, it must make another subscription in order to receive the notifications.",
                "Unsubscription messages are delivered in the same way as are subscription messages.",
                "It is important to note that durable subscribers have explicitly to unsubscribe from a topic in order to stop the notification process; however, all durable subscriptions have a predefined expiration time in order to cope with the cases of subscribers that do not meet again because of their movements or failures.",
                "This feature is clearly provided to limit the number of the unnecessary messages sent around the network. 4.2 Message Delivery using Epidemic Routing In this section, we examine one possible mechanism that will allow the delivery of messages in a partially connected network.",
                "The mechanism we discuss is intended for the purposes of demonstrating feasibility; more efficient communication mechanisms for this environment are themselves complex, and are the subject of another paper [13].",
                "The asynchronous message delivery described above is based on a typical pure epidemic-style routing protocol [16].",
                "A message that needs to be sent is replicated on each host in reach.",
                "In this way, copies of the messages are quickly spread through connected networks, like an infection.",
                "If a host becomes connected to another cloud of mobile nodes, during its movement, the message spreads through this collection of hosts.",
                "Epidemic-style replication of data and messages has been exploited in the past in many fields starting with the distributed database systems area [2].",
                "Within epidemic routing, each host maintains a buffer containing the messages that it has created and the replicas of the messages generated by the other hosts.",
                "To improve the performance, a hash-table indexes the content of the buffer.",
                "When two hosts connect, the host with the smaller identifier initiates a so-called anti-entropy session, sending a list containing the unique identifiers of the messages that it currently stores.",
                "The other host evaluates this list and sends back a list containing the identifiers it is storing that are not present in the other host, together with the messages that the other does not have.",
                "The host that has started the session receives the list and, in the same way, sends the messages that are not present in the other host.",
                "Should buffer overflow occur, messages are dropped.",
                "The reliability offered by this protocol is typically best effort, since there is no guarantee that a message will eventually be delivered to its recipient.",
                "Clearly, the delivery ratio of the protocol increases proportionally to the maximum allowed delay time and the buffer size in each host (interesting simulation results may be found in [16]). 4.3 Adaptation of the JMS Message Model In this section, we will analyse the aspects of our adaptation of the specification related to the so-called JMS Message Model [5].",
                "According to this, JMS messages are characterised by some properties defined using the header field, which contains values that are used by both clients and providers for their delivery.",
                "The aspects discussed in the remainder of this section are valid for both models (point to point and publish-subscribe).",
                "A JMS message can be persistent or non-persistent.",
                "According to the JMS specification, persistent messages must be delivered with a higher degree of reliability than the nonpersistent ones.",
                "However, it is worth noting that it is not possible to ensure once-and-only-once reliability for persistent messages as defined in the specification, since, as we discussed in the previous subsection, the underlying epidemic protocol can guarantee only best-effort delivery.",
                "However, clients maintain a list of the identifiers of the recently received messages to avoid the delivery of message duplicates.",
                "In other words, we provide the applications with at-mostonce reliability for both types of messages.",
                "In order to implement different levels of reliability, EMMA treats persistent and non-persistent messages differently, during the execution of the anti-entropy epidemic protocol.",
                "Since the message buffer space is limited, persistent messages are preferentially replicated using the available free space.",
                "If this is insufficient and non-persistent messages are present in the buffer, these are replaced.",
                "Only the successful deliveries of the persistent messages are notified to the senders.",
                "According to the JMS specification, it is possible to assign a priority to each message.",
                "The messages with higher priorities are delivered in a preferential way.",
                "As discussed above, persistent messages are prioritised above the non-persistent ones.",
                "Further selection is based on their priorities.",
                "Messages with higher priorities are treated in a preferential way.",
                "In fact, if there is not enough space to replicate all the persistent messages, a mechanism based on priorities is used to delete and replicate non-persistent messages (and, if necessary, persistent messages).",
                "Messages are deleted from the buffers using the expiration time value that can be set by senders.",
                "This is a way to free space in the buffers (one preferentially deletes older messages in cases of conflict); to eliminate stale replicas in the system; and to limit the time for which destinations must hold message identifiers to dispose of duplicates. 4.4 Reliability and Acknowledgment Mechanisms As already discussed, at-most-once message delivery is the best that can be achieved in terms of delivery semantics in partially connected ad-hoc settings.",
                "However, it is possible to improve the reliability of the system with efficient acknowledgment mechanisms.",
                "EMMA provides a mechanism for failure notification to applications if the acknowledgment is not received within a given timeout (that can be configured by application developers).",
                "This mechanism is the one that distinguishes the delivery of persistent and non-persistent messages in our JMS implementation: the deliveries of the former are notified to the senders, whereas the latter are not.",
                "We use acknowledgment messages not only to inform senders about the successful delivery of messages but also to delete the replicas of the delivered messages that are still present in the network.",
                "Each host maintains a list of the messages Middleware for Pervasive and ad-hoc Computing 124 successfully delivered that is updated as part of the normal process of information exchange between the hosts.",
                "The lists are exchanged during the first steps of the anti-entropic epidemic protocol with a certain predefined frequency.",
                "In the case of messages with multiple recipients, a list of the actual recipients is also stored.",
                "When a host receives the list, it checks its message buffer and updates it according to the following rules: (1) if a message has a single recipient and it has been delivered, it is deleted from the buffer; (2) if a message has multiple recipients, the identifiers of the delivered hosts are deleted from the associated list of recipients.",
                "If the resulting length of the list of recipients is zero, the message is deleted from the buffer.",
                "These lists have, clearly, finite dimensions and are implemented as circular queues.",
                "This simple mechanism, together with the use of expiration timestamps, guarantees that the old acknowledgment notifications are deleted from the system after a limited period of time.",
                "In order to improve the reliability of EMMA, a design mechanism for intelligent replication of queues and topics based on the context information could be developed.",
                "However this is not yet part of the current architecture of EMMA. 5.",
                "IMPLEMENTATION AND PRELIMINARY EVALUATION We implemented a prototype of our platform using the J2ME Personal Profile.",
                "The size of the executable is about 250KB including the JMS 1.1 jar file; this is a perfectly acceptable figure given the available memory of the current mobile devices on the market.",
                "We tested our prototype on HP IPaq PDAs running Linux, interconnected with WaveLan, and on a number of laptops with the same network interface.",
                "We also evaluated the middleware platform using the OMNET++ discrete event simulator [17] in order to explore a range of mobile scenarios that incorporated a more realistic number of hosts than was achievable experimentally.",
                "More specifically, we assessed the performance of the system in terms of delivery ratio and average delay, varying the density of population and the buffer size, and using persistent and non-persistent messages with different priorities.",
                "The simulation results show that the EMMAs performance, in terms of delivery ratio and delay of persistent messages with higher priorities, is good.",
                "In general, it is evident that the delivery ratio is strongly related to the correct dimensioning of the buffers to the maximum acceptable delay.",
                "Moreover, the epidemic algorithms are able to guarantee a high delivery ratio if one evaluates performance over a time interval sufficient for the dissemination of the replicas of messages (i.e., the infection spreading) in a large portion of the ad-hoc network.",
                "One consequence of the dimensioning problem is that scalability may be seriously impacted in peer-to-peer middleware for mobile computing due to the resource poverty of the devices (limited memory to store temporarily messages) and the number of possible interconnections in ad-hoc settings.",
                "What is worse is that common forms of commercial and social organisation (six degrees of separation) mean that even modest TTL values on messages will lead to widespread flooding of epidemic messages.",
                "This problem arises because of the lack of intelligence in the epidemic protocol, and can be addressed by selecting carrier nodes for messages with greater care.",
                "The details of this process are, however, outside the scope of this paper (but may be found in [13]) and do not affect the foundation on which the EMMA middleware is based: the ability to deliver messages asynchronously. 6.",
                "CRITICAL VIEW OF THE STATE OF THE ART The design of middleware platforms for mobile computing requires researchers to answer new and fundamentally different questions; simply assuming the presence of wired portions of the network on which centralised functionality can reside is not generalisable.",
                "Thus, it is necessary to investigate novel design principles and to devise architectural patterns that differ from those traditionally exploited in the design of middleware for fixed systems.",
                "As an example, consider the recent cross-layering trend in ad-hoc networking [1].",
                "This is a way of re-thinking software systems design, explicitly abandoning the classical forms of layering, since, although this separation of concerns afford portability, it does so at the expense of potential efficiency gains.",
                "We believe that it is possible to view our approach as an instance of cross-layering.",
                "In fact, we have added the epidemic network protocol at middleware level and, at the same time, we have used the existing synchronous network protocol if present both in delivering messages (traditional layering) and in informing the middleware about when messages may be delivered by revealing details of the forwarding tables (layer violation).",
                "For this reason, we prefer to consider them jointly as the communication layer of our platform together providing more efficient message delivery.",
                "Another interesting aspect is the exploitation of context and system information to improve the performance of mobile middleware platforms.",
                "Again, as a result of adopting a cross-layering methodology, we are able to build systems that gather information from the underlying operating system and communication components in order to allow for adaptation of behaviour.",
                "We can summarise this conceptual design approach by saying that middleware platforms must be not only context-aware (i.e., they should be able to extract and analyse information from the surrounding context) but also system-aware (i.e., they should be able to gather information from the software and hardware components of the mobile system).",
                "A number of middleware systems have been developed to support ad-hoc networking with the use of asynchronous communication (such as LIME, XMIDDLE, STEAM [11]).",
                "In particular, the STEAM platform is an interesting example of event-based middleware for ad-hoc networks, providing location-aware message delivery and an effective solution for event filtering.",
                "A discussion of JMS, and its mobile realisation, has already been conducted in Sections 4 and 2.",
                "The Swiss company Softwired has developed the first JMS middleware for mobile computing, called iBus Mobile [10].",
                "The main components of this typically infrastructure-based architecture are the JMS provider, the so-called mobile JMS gateway, which is deployed on a fixed host and a lightweight JMS client library.",
                "The gateway is used for the communication between the application server and mobile hosts.",
                "The gateway is seen by the JMS provider as a normal JMS client.",
                "The JMS provider can be any JMS-enabled application server, such as BEA Weblogic.",
                "Pronto [19] is an example of mid125 Middleware 2004 Companion dleware system based on messaging that is specifically designed for mobile environments.",
                "The platform is composed of three classes of components: mobile clients implementing the JMS specification, gateways that control traffic, guaranteeing efficiency and possible user customizations using different plug-ins and JMS servers.",
                "Different configurations of these components are possible; with respect to mobile ad hoc networks applications, the most interesting is Serverless JMS.",
                "The aim of this configuration is to adapt JMS to a decentralized model.",
                "The publish-subscribe model exploits the efficiency and the scalability of the underlying IP multicast protocol.",
                "Unreliable and reliable message delivery services are provided: reliability is provided through a negative acknowledgment-based protocol.",
                "Pronto represents a good solution for infrastructure-based mobile networks but it does not adequately target ad-hoc settings, since mobile nodes rely on fixed servers for the exchange of messages.",
                "Other MOM implemented for mobile environments exist; however, they are usually straightforward extensions of existing middleware [8].",
                "The only implementation of MOM specifically designed for mobile ad-hoc networks was developed at the University of Newcastle [18].",
                "This work is again a JMS adaptation; the focus of that implementation is on <br>group communication</br> and the use of application level routing algorithms for topic delivery of messages.",
                "However, there are a number of differences in the focus of our work.",
                "The importance that we attribute to disconnections makes persistence a vital requirement for any middleware that needs to be used in mobile ad-hoc networks.",
                "The authors of [18] signal persistence as possible future work, not considering the fact that routing a message to a non-connected host will result in delivery failure.",
                "This is a remarkable limitation in mobile settings where unpredictable disconnections are the norm rather than the exception. 7.",
                "ROADMAP AND CONCLUSIONS Asynchronous communication is a useful communication paradigm for mobile ad-hoc networks, as hosts are allowed to come, go and pick up messages when convenient, also taking account of their resource availability (e.g., power, connectivity levels).",
                "In this paper we have described the state of the art in terms of MOM for mobile systems.",
                "We have also shown a proof of concept adaptation of JMS to the extreme scenario of partially connected mobile ad-hoc networks.",
                "We have described and discussed the characteristics and differences of our solution with respect to traditional JMS implementations and the existing adaptations for mobile settings.",
                "However, trade-offs between application-level routing and resource usage should also be investigated, as mobile devices are commonly power/resource scarce.",
                "A key limitation of this work is the poorly performing epidemic algorithm and an important advance in the practicability of this work requires an algorithm that better balances the needs of efficiency and message delivery probability.",
                "We are currently working on algorithms and protocols that, exploiting probabilistic and statistical techniques on the basis of small amounts of exchanged information, are able to improve considerably the efficiency in terms of resources (memory, bandwidth, etc) and the reliability of our middleware platform [13].",
                "One futuristic research development, which may take these ideas of adaptation of messaging middleware for mobile environments further is the introduction of more mobility oriented communication extensions, for instance the support of geocast (i.e., the ability to send messages to specific geographical areas). 8.",
                "REFERENCES [1] M. Conti, G. Maselli, G. Turi, and S. Giordano.",
                "Cross-layering in Mobile ad-hoc Network Design.",
                "IEEE Computer, 37(2):48-51, February 2004. [2] A. Demers, D. Greene, C. Hauser, W. Irish, J. Larson, S. Shenker, H. Sturgis, D. Swinehart, and D. Terry.",
                "Epidemic Algorithms for Replicated Database Maintenance.",
                "In Sixth Symposium on Principles of Distributed Computing, pages 1-12, August 1987. [3] A. Doria, M. Uden, and D. P. Pandey.",
                "Providing connectivity to the Saami nomadic community.",
                "In Proceedings of the Second International Conference on Open Collaborative Design for Sustainable Innovation, December 2002. [4] M. Haahr, R. Cunningham, and V. Cahill.",
                "Supporting CORBA applications in a Mobile Environment.",
                "In 5th International Conference on Mobile Computing and Networking (MOBICOM99), pages 36-47.",
                "ACM, August 1999. [5] M. Hapner, R. Burridge, R. Sharma, J. Fialli, and K. Stout.",
                "Java Message Service Specification Version 1.1.",
                "Sun Microsystems, Inc., April 2002. http://java.sun.com/products/jms/. [6] J. Hart.",
                "WebSphere MQ: Connecting your applications without complex programming.",
                "IBM WebSphere Software White Papers, 2003. [7] S. Hayward and M. Pezzini.",
                "Marrying Middleware and Mobile Computing.",
                "Gartner Group Research Report, September 2001. [8] IBM.",
                "WebSphere MQ EveryPlace Version 2.0, November 2002. http://www-3.ibm.com/software/integration/wmqe/. [9] ITU.",
                "Connecting remote communities.",
                "Documents of the World Summit on Information Society, 2003. http://www.itu.int/osg/spu/wsis-themes. [10] S. Maffeis.",
                "Introducing Wireless JMS.",
                "Softwired AG, www.sofwired-inc.com, 2002. [11] C. Mascolo, L. Capra, and W. Emmerich.",
                "Middleware for Mobile Computing.",
                "In E. Gregori, G. Anastasi, and S. Basagni, editors, Advanced Lectures on Networking, volume 2497 of Lecture Notes in Computer Science, pages 20-58.",
                "Springer Verlag, 2002. [12] Microsoft.",
                "Microsoft Message Queuing (MSMQ) Version 2.0 Documentation. [13] M. Musolesi, S. Hailes, and C. Mascolo.",
                "Adaptive routing for intermittently connected mobile ad-hoc networks.",
                "Technical report, UCL-CS Research Note, July 2004.",
                "Submitted for Publication. [14] Sun Microsystems.",
                "Java Naming and Directory Interface (JNDI) Documentation Version 1.2. 2003. http://java.sun.com/products/jndi/. [15] Sun Microsystems.",
                "Jini Specification Version 2.0, 2003. http://java.sun.com/products/jini/. [16] A. Vahdat and D. Becker.",
                "Epidemic routing for Partially Connected ad-hoc Networks.",
                "Technical Report CS-2000-06, Department of Computer Science, Duke University, 2000. [17] A. Vargas.",
                "The OMNeT++ discrete event simulation system.",
                "In Proceedings of the European Simulation Multiconference (ESM2001), Prague, June 2001. [18] E. Vollset, D. Ingham, and P. Ezhilchelvan.",
                "JMS on Mobile ad-hoc Networks.",
                "In Personal Wireless Communications (PWC), pages 40-52, Venice, September 2003. [19] E. Yoneki and J. Bacon.",
                "Pronto: Mobilegateway with publish-subscribe paradigm over wireless network.",
                "Technical Report 559, University of Cambridge, Computer Laboratory, February 2003.",
                "Middleware for Pervasive and ad-hoc Computing 126"
            ],
            "original_annotated_samples": [
                "This work is again a JMS adaptation; the focus of that implementation is on <br>group communication</br> and the use of application level routing algorithms for topic delivery of messages."
            ],
            "translated_annotated_samples": [
                "Este trabajo es nuevamente una adaptación de JMS; el enfoque de esa implementación se centra en la <br>comunicación de grupo</br> y el uso de algoritmos de enrutamiento a nivel de aplicación para la entrega de mensajes por tema."
            ],
            "translated_text": "Adaptando Middleware de Mensajería Asincrónica a Redes Ad-hoc Mirco Musolesi Dept. Las características de los entornos móviles, con la posibilidad de desconexiones frecuentes y ancho de banda fluctuante, han obligado a replantear el middleware tradicional. En particular, los paradigmas de comunicación síncrona a menudo empleados en middleware estándar no parecen ser particularmente adecuados para entornos ad-hoc, en los que ni siquiera se puede asumir la disponibilidad intermitente de una red troncal. En cambio, la comunicación asincrónica parece ser un paradigma generalmente más adecuado para este tipo de entornos. Se ha desarrollado y utilizado middleware orientado a mensajes para sistemas tradicionales con el fin de proporcionar un paradigma de comunicación asíncrona para sistemas distribuidos, y, recientemente, también para algunos sistemas específicos de computación móvil. En este artículo, presentamos nuestra experiencia en el diseño, implementación y evaluación de EMMA (Middleware de Mensajería Epidémica para redes ad-hoc), una adaptación del Servicio de Mensajes Java (JMS) para entornos móviles ad-hoc. Discutimos en detalle los desafíos de diseño y algunas posibles soluciones, mostrando un ejemplo concreto de la viabilidad y adecuación de la aplicación del paradigma asíncrono en este contexto y delineando un plan de investigación para los próximos años. Categorías y Descriptores de Asignaturas C.2.4 [Redes de Computadoras-Comunicación]: Sistemas Distribuidos-Aplicaciones Distribuidas; C.2.1 [Arquitectura y Diseño de Redes]: Comunicación Inalámbrica Términos Generales DISEÑO, ALGORITMOS 1. INTRODUCCIÓN Con la creciente popularidad de los dispositivos móviles y su amplia adopción, existe una clara necesidad de permitir el desarrollo de un amplio espectro de aplicaciones que operen de manera efectiva en dicho entorno. Lamentablemente, esto está lejos de ser simple: los dispositivos móviles son cada vez más heterogéneos en cuanto a capacidades de procesamiento, tamaño de memoria, capacidad de batería e interfaces de red. Cada una de estas configuraciones tiene características sustancialmente diferentes que son estáticamente distintas, por ejemplo, hay una gran diferencia en la capacidad entre un mote de Berkeley y un portátil equipado con 802.11g, y que varían dinámicamente, como en situaciones de ancho de banda fluctuante y conectividad intermitente. Los entornos móviles ad hoc tienen un elemento adicional de complejidad en que son completamente descentralizados. Para poder desarrollar aplicaciones para entornos tan complejos, es esencial contar con una forma adecuada de middleware si se busca lograr un desarrollo rentable. En este artículo, examinamos uno de los aspectos fundamentales de middleware para entornos móviles ad-hoc: el de los primitivos de comunicación. Tradicionalmente, los primitivos de middleware más utilizados para la comunicación asumen la presencia simultánea de ambos puntos finales en una red, ya que la estabilidad y la ubicuidad de la infraestructura de redes no es una suposición irrazonable para la mayoría de los entornos cableados. En otras palabras, la mayoría de los paradigmas de comunicación son síncronos: middleware orientado a objetos como CORBA y Java RMI son ejemplos típicos de middleware basado en comunicación síncrona. En los últimos años, ha habido un creciente interés en plataformas basadas en paradigmas de comunicación asincrónica, como los sistemas de publicación-suscripción: estos han sido explotados con mucho éxito donde existe asincronía a nivel de aplicación. De acuerdo con un informe de mercado de Gartner [7]: Dada la popularidad, escalabilidad, flexibilidad y afinidad con arquitecturas móviles e inalámbricas de los middlewares orientados a mensajes (MOM), para el año 2004, es probable que MOM se convierta en la forma dominante de middleware de comunicación para vincular aplicaciones móviles y empresariales (probabilidad del 0.7)... Además, en sistemas ad-hoc móviles, la probabilidad de fragmentación de la red significa que la comunicación síncrona puede resultar impracticable en cualquier caso, lo que da lugar a situaciones en las que el tráfico asincrónico tolerante a retrasos es la única forma de tráfico que podría ser admitida. El middleware para entornos ad-hoc móviles debe, por lo tanto, admitir primitivas de comunicación semi-síncronas o completamente asíncronas si se quiere evitar limitaciones sustanciales en su utilidad. Además del desafío intelectual que implica apoyar este modelo, este trabajo también es interesante porque existen varios ámbitos de aplicación práctica al permitir la comunicación entre comunidades en áreas subdesarrolladas del mundo. Por lo tanto, por ejemplo, proyectos que se han llevado a cabo para ayudar a poblaciones que viven en lugares remotos del mundo como Laponia o en áreas pobres que carecen de infraestructura de conectividad fija. Ha habido intentos de proporcionar middleware móvil con estas propiedades, incluyendo STEAM, LIME, XMIDDLE, Bayou (consulte [11] para una revisión más completa del middleware móvil). Estos modelos difieren considerablemente de los middleware tradicionales existentes en cuanto a los primitivos proporcionados. Además, algunos de ellos fallan en proporcionar una solución para los verdaderos escenarios ad-hoc. Si el éxito proyectado de MOM se convierte en algo parecido a la realidad, habrá muchos programadores con experiencia en ello. La solución ideal al problema del middleware para sistemas ad-hoc es, entonces, permitir a los programadores utilizar los mismos paradigmas y modelos presentados por formas comunes de MOM y asegurar que estos paradigmas sean soportables dentro del entorno móvil. Este enfoque tiene claras ventajas al permitir que las aplicaciones desarrolladas en plataformas de middleware estándar se desplieguen fácilmente en dispositivos móviles. De hecho, algunas investigaciones ya han llevado a la adaptación de plataformas de middleware tradicionales a entornos móviles, principalmente para proporcionar integración entre dispositivos móviles y redes fijas existentes en un entorno nómada (es decir, mixto) [4]. En lo que respecta al middleware orientado a mensajes, las implementaciones actuales, sin embargo, asumen la existencia de una red troncal a la que los hosts móviles se conectan de vez en cuando mientras están en itinerancia [10], o asumen que los nodos siempre son de alguna manera accesibles a través de un camino [18]. No se ha intentado ninguna adaptación a escenarios heterogéneos o completamente ad hoc, con desconexiones frecuentes y nubes periódicamente aisladas de hosts. En el resto de este documento describimos un intento inicial de adaptar middleware orientado a mensajes para que se ajuste a dispositivos móviles y, más específicamente, a redes móviles ad-hoc. En nuestro caso, elegimos examinar JMS, como uno de los sistemas MOM más conocidos. En la última parte de este documento, exploramos las limitaciones de nuestros resultados y describimos los planes que tenemos para llevar a cabo el trabajo más adelante. Los sistemas de middleware orientados a mensajes y el Servicio de Mensajes de Java (JMS) admiten la comunicación entre componentes distribuidos a través del paso de mensajes: el remitente envía un mensaje a colas identificadas, que generalmente residen en un servidor. Un receptor recupera el mensaje de la cola en un momento diferente y puede confirmar la respuesta utilizando el mismo mecanismo asíncrono. La middleware orientada a mensajes soporta la comunicación asíncrona de una manera muy natural, logrando el desacoplamiento de emisores y receptores. Un remitente puede continuar procesando tan pronto como el middleware haya aceptado el mensaje; eventualmente, el receptor enviará un mensaje de confirmación y el remitente podrá recogerlo en un momento conveniente. Sin embargo, dado la forma en que están implementados, estos sistemas de middleware suelen requerir dispositivos con recursos abundantes, especialmente en términos de memoria y espacio en disco, donde se almacenan colas persistentes de mensajes que han sido recibidos pero aún no procesados. Sun Java Message Service [5], IBM WebSphere MQ [6], Microsoft MSMQ [12] son ejemplos de middleware orientado a mensajes muy exitosos para sistemas distribuidos tradicionales. El Servicio de Mensajería de Java (JMS) es una colección de interfaces para la comunicación asincrónica entre componentes distribuidos. Proporciona una forma común para que los programas de Java creen, envíen y reciban mensajes. Los usuarios de JMS suelen ser referidos como clientes. La especificación JMS define además a los proveedores como los componentes encargados de implementar el sistema de mensajería y proporcionar la funcionalidad administrativa y de control (es decir, persistencia y confiabilidad) requerida por el sistema. Los clientes pueden enviar y recibir mensajes, de forma asincrónica, a través del proveedor JMS, que se encarga de la entrega y, posiblemente, de la persistencia de los mensajes. Hay dos tipos de comunicación admitidos: modelos punto a punto y de publicación-suscripción. En el modelo punto a punto, los hosts envían mensajes a colas. Los receptores pueden ser registrados con algunas colas específicas, y pueden recuperar los mensajes de forma asíncrona para luego confirmar su recepción. El modelo de publicación-suscripción se basa en el uso de temas a los que los clientes pueden suscribirse. Los mensajes son enviados a los temas por otros clientes y luego son recibidos de forma asíncrona por todos los clientes suscritos. Los clientes aprenden sobre los temas y colas disponibles a través de la Interfaz de Nombres y Directorios de Java (JNDI) [14]. Las colas y los temas son creados por un administrador en el proveedor y se registran con la interfaz JNDI para su búsqueda. En la siguiente sección, presentamos los desafíos de las redes móviles y mostramos cómo JMS puede adaptarse para cumplir con estos requisitos. 3. JMS PARA COMPUTACIÓN MÓVIL Las redes móviles varían mucho en sus características, desde redes nómadas en las que los nodos se desplazan mientras están desconectados, hasta redes ad-hoc en las que los nodos se mueven libremente y no hay infraestructura. Las redes móviles ad-hoc son más comúnmente aplicables en situaciones donde la supervivencia y la capacidad de despliegue instantáneo son clave: especialmente en aplicaciones militares y de ayuda en casos de desastre. Entre estos dos tipos de redes móviles, sin embargo, existen una serie de posibles combinaciones heterogéneas, donde se utilizan paradigmas nómadas y ad-hoc para interconectar áreas totalmente inalámbricas con redes más estructuradas (como una LAN o Internet). Si bien la especificación JMS ha sido ampliamente implementada y utilizada en sistemas distribuidos tradicionales, las adaptaciones para entornos móviles han sido propuestas recientemente. Los desafíos de adaptar JMS a entornos móviles son considerables; sin embargo, dada su amplia aceptación y uso, existen ventajas considerables al permitir la adaptación de aplicaciones existentes a entornos móviles y al permitir la interoperabilidad de aplicaciones en las regiones cableadas e inalámbricas de una red. En [10], JMS se adaptó a un entorno móvil nómada, donde los hosts móviles pueden ser clientes de JMS y comunicarse a través del proveedor de JMS que, sin embargo, se encuentra en una red troncal, proporcionando fiabilidad y persistencia. El prototipo del cliente presentado en [10] es muy ligero, debido a la delegación de toda la funcionalidad pesada al proveedor Middleware para Computación Pervasive y ad-hoc 122 en la red cableada. Sin embargo, este enfoque es algo limitado en términos de aplicabilidad generalizada y escalabilidad como consecuencia de la concentración de funcionalidad en la parte cableada de la red. Si se quiere adaptar JMS a entornos completamente ad hoc, donde no haya infraestructura fija disponible y donde los nodos cambien de ubicación y estado de forma muy dinámica, se deben tener en cuenta más problemas. En primer lugar, el descubrimiento necesita utilizar un modelo resiliente pero distribuido: en este entorno extremadamente dinámico, las soluciones estáticas son inaceptables. Como se discute en la Sección 2, un administrador de JMS define colas y temas en el proveedor. Los clientes pueden entonces aprender sobre ellos utilizando la Interfaz de Nombres y Directorios de Java (JNDI). Sin embargo, debido a la forma en que está diseñado JNDI, es necesario que un nodo de JNDI (o más de uno) esté al alcance para obtener una vinculación de un nombre a una dirección (es decir, saber dónde se encuentra una cola o un tema específico). En entornos móviles ad-hoc, el proceso de descubrimiento no puede asumir la existencia de un conjunto fijo de servidores de descubrimiento que siempre sean accesibles, ya que esto no coincidiría con la dinámica de las redes ad-hoc. En segundo lugar, un Proveedor de JMS, como sugiere la especificación de JMS, también debe ser accesible para cada nodo en la red, para poder comunicarse. Esto asume una arquitectura muy centralizada, que nuevamente no coincide con los requisitos de un entorno ad-hoc móvil, en el que los nodos pueden estar en movimiento y dispersos: se necesita una solución más distribuida y dinámica. La persistencia es, sin embargo, una funcionalidad esencial en entornos de comunicación asincrónica, ya que los hosts están, por definición, conectados en momentos diferentes. En la siguiente sección, discutiremos nuestra experiencia en el diseño e implementación de JMS para redes móviles ad-hoc. 4. El desarrollo de aplicaciones para redes móviles es aún más desafiante: además de las mismas consideraciones que para entornos inalámbricos infraestructurados, como las limitadas capacidades de los dispositivos y las restricciones de energía, existen problemas relacionados con la velocidad de cambio de la conectividad de la red y la falta de una infraestructura de enrutamiento estática. En consecuencia, ahora describimos un intento inicial de adaptar la especificación JMS para satisfacer los requisitos particulares relacionados con escenarios ad-hoc. Como se discute en la Sección 3, una aplicación JMS puede utilizar tanto el estilo de mensajería punto a punto como el de publicación-suscripción. Modelo de punto a punto. El modelo de punto a punto se basa en el concepto de colas, que se utilizan para habilitar la comunicación asincrónica entre el productor de un mensaje y posibles consumidores diferentes. En nuestra solución, la ubicación de las colas se determina mediante un proceso de negociación que depende de la aplicación. Por ejemplo, supongamos que es posible saber a priori, o es posible determinar dinámicamente, que cierto host es el receptor de la mayor parte de los mensajes enviados a una cola particular. En este caso, la ubicación óptima de la cola bien podría estar en este host en particular. En general, vale la pena señalar que, según la especificación de JMS y los patrones de diseño sugeridos, es común y preferible que un cliente tenga todos sus mensajes entregados a una sola cola. Las colas se anuncian periódicamente a los anfitriones que se encuentran dentro del rango de transmisión o que son alcanzables mediante el protocolo de comunicación síncrona subyacente, si se proporciona. Es importante tener en cuenta que, a nivel de middleware, es lógicamente irrelevante si la capa de red implementa alguna forma de enrutamiento ad-hoc (aunque considerablemente más eficiente si lo hace); el middleware solo considera información sobre qué nodos son accesibles activamente en cualquier momento. Los hosts que reciben mensajes publicitarios agregan entradas a su registro JNDI. Cada entrada se caracteriza por un arrendamiento (un mecanismo similar al presente en Jini [15]). Un contrato de arrendamiento representa el tiempo de validez de una entrada particular. Si un arrendamiento no se renueva (es decir, su vida no se extiende), puede vencer y, en consecuencia, la entrada se elimina del registro. En otras palabras, el anfitrión asume que la cola será inaccesible a partir de ese momento. Esto puede ser causado, por ejemplo, si un host que almacena la cola se vuelve inaccesible. Un host que inicia un proceso de descubrimiento encontrará los temas y las colas presentes en su porción conectada de la red de manera directa. Para enviar un mensaje a un anfitrión que actualmente no está al alcance, utilizamos un protocolo de enrutamiento de epidemia asíncrono que se discutirá en detalle en la Sección 4.2. Si dos hosts están en la misma nube (es decir, existe un camino conectado entre ellos), pero no hay disponible un protocolo síncrono, los mensajes se envían utilizando el protocolo epidémico. En este caso, la latencia de entrega será baja como resultado de la rapidez de propagación de la infección en la nube conectada (ver también los resultados de la simulación en la Sección 5). Dado la existencia de un protocolo de epidemia, el mecanismo de descubrimiento consiste en publicitar las colas a los hosts que actualmente son inalcanzables utilizando mecanismos análogos. En el modelo de publicación-suscripción, algunos de los hosts son designados de manera similar para mantener temas y almacenar suscripciones, como antes. Los temas se anuncian a través del registro de la misma manera que las colas, y un cliente que desee suscribirse a un tema debe registrarse con el cliente que tiene el tema. Cuando un cliente desea enviar un mensaje a la lista de temas, lo envía al titular del tema (de la misma manera que enviaría un mensaje a una cola). El titular del tema luego reenvía el mensaje a todos los suscriptores, utilizando el protocolo síncrono si es posible, de lo contrario el protocolo epidémico. Vale la pena señalar que utilizamos un único mensaje con múltiples destinatarios, en lugar de múltiples mensajes con múltiples destinatarios. Cuando un mensaje es entregado a uno de los suscriptores, este destinatario es eliminado de la lista. Para eliminar las posibles réplicas restantes, empleamos mensajes de acuse de recibo (discutidos en la Sección 4.4), devueltos de la misma manera que un mensaje normal. También hemos adaptado los conceptos de suscripciones duraderas y no duraderas para entornos ad-hoc. En las plataformas fijas, las suscripciones duraderas se mantienen durante las desconexiones de los clientes, ya sean intencionales o resultado de fallas. En los sistemas tradicionales, cuando un suscriptor duradero se desconecta del servidor, es responsable de almacenar los mensajes. Cuando el suscriptor duradero se reconecta, el servidor le envía todos los mensajes no caducados. El problema es que, en nuestro escenario, las desconexiones son la norma. En teoría, no es posible enviar un mensaje a un par que nunca ha sido alcanzable en el pasado, ya que no puede haber ninguna entrada presente en el registro. Sin embargo, para superar esta posible limitación, proporcionamos un mecanismo a través del cual la información puede ser añadida al registro sin utilizar los canales normales. 123 Middleware 2004 Companion en lugar de la excepción. En otras palabras, no podemos considerar las desconexiones como fallos. Por estas razones, adoptamos una semántica ligeramente diferente. En lo que respecta a las suscripciones duraderas, si un suscriptor se desconecta, las notificaciones no se almacenan, sino que se envían utilizando el protocolo epidémico en lugar del protocolo síncrono. En otras palabras, las notificaciones duraderas siguen siendo válidas durante las posibles desconexiones del suscriptor. Por otro lado, si un suscriptor no duradero se desconecta, su suscripción se elimina; en otras palabras, durante las desconexiones, las notificaciones no se envían utilizando el protocolo epidémico, sino que solo se aprovecha el protocolo síncrono. Si el tema vuelve a estar accesible para este anfitrión, deberá realizar otra suscripción para recibir las notificaciones. Los mensajes de baja se entregan de la misma manera que los mensajes de suscripción. Es importante tener en cuenta que los suscriptores duraderos deben darse de baja explícitamente de un tema para detener el proceso de notificación; sin embargo, todas las suscripciones duraderas tienen un tiempo de expiración predefinido para hacer frente a los casos de suscriptores que no vuelven a conectarse debido a sus movimientos o fallos. Esta característica se proporciona claramente para limitar el número de mensajes innecesarios enviados por la red. 4.2 Entrega de mensajes utilizando enrutamiento epidémico En esta sección, examinamos un mecanismo posible que permitirá la entrega de mensajes en una red parcialmente conectada. El mecanismo que discutimos está destinado a demostrar viabilidad; los mecanismos de comunicación más eficientes para este entorno son complejos por sí mismos y son el tema de otro artículo [13]. La entrega de mensajes asincrónica descrita anteriormente se basa en un protocolo de enrutamiento de estilo epidémico puro típico [16]. Un mensaje que necesita ser enviado se replica en cada host al alcance. De esta manera, las copias de los mensajes se propagan rápidamente a través de redes conectadas, como una infección. Si un anfitrión se conecta a otra nube de nodos móviles durante su movimiento, el mensaje se propaga a través de esta colección de anfitriones. La replicación de datos y mensajes en estilo epidémico ha sido explotada en el pasado en muchos campos, comenzando por el área de sistemas de bases de datos distribuidas [2]. Dentro del enrutamiento epidémico, cada anfitrión mantiene un búfer que contiene los mensajes que ha creado y las réplicas de los mensajes generados por los otros anfitriones. Para mejorar el rendimiento, una tabla hash indexa el contenido del búfer. Cuando dos anfitriones se conectan, el anfitrión con el identificador más pequeño inicia una sesión de anti-entropía, enviando una lista que contiene los identificadores únicos de los mensajes que actualmente almacena. El otro anfitrión evalúa esta lista y envía de vuelta una lista que contiene los identificadores que está almacenando y que no están presentes en el otro anfitrión, junto con los mensajes que el otro no tiene. El anfitrión que ha iniciado la sesión recibe la lista y, de la misma manera, envía los mensajes que no están presentes en el otro anfitrión. En caso de producirse un desbordamiento de búfer, los mensajes se descartan. La fiabilidad ofrecida por este protocolo es generalmente de mejor esfuerzo, ya que no hay garantía de que un mensaje finalmente sea entregado a su destinatario. Claramente, la proporción de entrega del protocolo aumenta proporcionalmente al tiempo máximo de retraso permitido y al tamaño del búfer en cada host (pueden encontrarse resultados interesantes de simulación en [16]). 4.3 Adaptación del Modelo de Mensajes JMS En esta sección, analizaremos los aspectos de nuestra adaptación de la especificación relacionados con el llamado Modelo de Mensajes JMS [5]. Según esto, los mensajes JMS se caracterizan por algunas propiedades definidas utilizando el campo de encabezado, que contiene valores que son utilizados tanto por los clientes como por los proveedores para su entrega. Los aspectos discutidos en el resto de esta sección son válidos para ambos modelos (punto a punto y publicar-suscribir). Un mensaje JMS puede ser persistente o no persistente. Según la especificación de JMS, los mensajes persistentes deben entregarse con un grado de confiabilidad mayor que los no persistentes. Sin embargo, vale la pena señalar que no es posible garantizar la fiabilidad de una sola vez para mensajes persistentes según lo definido en la especificación, ya que, como discutimos en la subsección anterior, el protocolo epidémico subyacente solo puede garantizar la entrega de mejor esfuerzo. Sin embargo, los clientes mantienen una lista de los identificadores de los mensajes recibidos recientemente para evitar la entrega de mensajes duplicados. En otras palabras, proporcionamos a las aplicaciones una fiabilidad inmediata para ambos tipos de mensajes. Para implementar diferentes niveles de confiabilidad, EMMA trata de manera diferente los mensajes persistentes y no persistentes durante la ejecución del protocolo epidémico de anti-entropía. Dado que el espacio del búfer de mensajes es limitado, los mensajes persistentes se replican preferentemente utilizando el espacio libre disponible. Si esto es insuficiente y hay mensajes no persistentes presentes en el búfer, estos son reemplazados. Solo se notifican a los remitentes las entregas exitosas de los mensajes persistentes. Según la especificación de JMS, es posible asignar una prioridad a cada mensaje. Los mensajes con prioridades más altas se entregan de manera preferencial. Como se discutió anteriormente, los mensajes persistentes tienen prioridad sobre los no persistentes. La selección adicional se basa en sus prioridades. Los mensajes con prioridades más altas son tratados de manera preferencial. De hecho, si no hay suficiente espacio para replicar todos los mensajes persistentes, se utiliza un mecanismo basado en prioridades para eliminar y replicar los mensajes no persistentes (y, si es necesario, los mensajes persistentes). Los mensajes se eliminan de los buffers utilizando el valor de tiempo de expiración que puede ser establecido por los remitentes. Esta es una forma de liberar espacio en los búferes (se eliminan preferentemente los mensajes más antiguos en casos de conflicto); para eliminar réplicas obsoletas en el sistema; y para limitar el tiempo durante el cual los destinos deben mantener los identificadores de mensajes para desechar duplicados. Mecanismos de fiabilidad y de acuse de recibo Como ya se discutió, la entrega de mensajes como máximo una vez es lo mejor que se puede lograr en términos de semántica de entrega en entornos ad-hoc parcialmente conectados. Sin embargo, es posible mejorar la confiabilidad del sistema con mecanismos de acuse de recibo eficientes. EMMA proporciona un mecanismo de notificación de fallos a las aplicaciones si no se recibe el acuse de recibo dentro de un tiempo límite dado (que puede ser configurado por los desarrolladores de aplicaciones). Este mecanismo es el que distingue la entrega de mensajes persistentes y no persistentes en nuestra implementación de JMS: las entregas de los primeros son notificadas a los remitentes, mientras que los de los segundos no lo son. Utilizamos mensajes de acuse de recibo no solo para informar a los remitentes sobre la entrega exitosa de los mensajes, sino también para eliminar las réplicas de los mensajes entregados que aún están presentes en la red. Cada anfitrión mantiene una lista de los mensajes Middleware para la Computación Pervasiva y Ad-hoc 124 entregados con éxito que se actualiza como parte del proceso normal de intercambio de información entre los anfitriones. Las listas se intercambian durante los primeros pasos del protocolo de epidemia anti-entropía con una frecuencia predefinida. En el caso de mensajes con múltiples destinatarios, también se almacena una lista de los destinatarios reales. Cuando un anfitrión recibe la lista, verifica su búfer de mensajes y lo actualiza de acuerdo con las siguientes reglas: (1) si un mensaje tiene un único destinatario y ha sido entregado, se elimina del búfer; (2) si un mensaje tiene múltiples destinatarios, se eliminan los identificadores de los anfitriones a los que se ha entregado de la lista de destinatarios asociada. Si la longitud resultante de la lista de destinatarios es cero, el mensaje se elimina del búfer. Estas listas tienen, claramente, dimensiones finitas y se implementan como colas circulares. Este mecanismo simple, junto con el uso de marcas de tiempo de expiración, garantiza que las antiguas notificaciones de acuse de recibo sean eliminadas del sistema después de un período de tiempo limitado. Para mejorar la confiabilidad de EMMA, se podría desarrollar un mecanismo de diseño para la replicación inteligente de colas y temas basado en la información de contexto. Sin embargo, esto aún no forma parte de la arquitectura actual de EMMA. 5. IMPLEMENTACIÓN Y EVALUACIÓN PRELIMINAR Implementamos un prototipo de nuestra plataforma utilizando el Perfil Personal J2ME. El tamaño del ejecutable es de aproximadamente 250KB, incluido el archivo jar de JMS 1.1; esta es una cifra perfectamente aceptable dada la memoria disponible de los dispositivos móviles actuales en el mercado. Probamos nuestro prototipo en PDAs HP iPaq con Linux, interconectados con WaveLan, y en varios laptops con la misma interfaz de red. También evaluamos la plataforma de middleware utilizando el simulador de eventos discretos OMNET++ [17] para explorar una variedad de escenarios móviles que incorporaban un número más realista de hosts que el que se podía lograr experimentalmente. Más específicamente, evaluamos el rendimiento del sistema en términos de ratio de entrega y retraso promedio, variando la densidad de población y el tamaño del búfer, y utilizando mensajes persistentes y no persistentes con diferentes prioridades. Los resultados de la simulación muestran que el rendimiento de EMMAs, en términos de ratio de entrega y retraso de mensajes persistentes con prioridades más altas, es bueno. En general, es evidente que la proporción de entrega está fuertemente relacionada con el dimensionamiento correcto de los búferes para el retraso máximo aceptable. Además, los algoritmos epidémicos son capaces de garantizar una alta tasa de entrega si se evalúa el rendimiento durante un intervalo de tiempo suficiente para la difusión de las réplicas de los mensajes (es decir, la propagación de la infección) en una gran parte de la red ad-hoc. Una consecuencia del problema de dimensionamiento es que la escalabilidad puede verse seriamente afectada en middleware peer-to-peer para computación móvil debido a la escasez de recursos de los dispositivos (memoria limitada para almacenar temporalmente mensajes) y al número de posibles interconexiones en entornos ad-hoc. Lo peor es que las formas comunes de organización comercial y social (seis grados de separación) significan que incluso valores modestos de TTL en los mensajes provocarán una difusión generalizada de mensajes epidémicos. Este problema surge debido a la falta de inteligencia en el protocolo de la epidemia, y puede ser abordado seleccionando nodos portadores para los mensajes con mayor cuidado. Sin embargo, los detalles de este proceso están fuera del alcance de este documento (pero pueden encontrarse en [13]) y no afectan la base en la que se basa el middleware EMMA: la capacidad de entregar mensajes de forma asincrónica. 6. VISIÓN CRÍTICA DEL ESTADO DEL ARTE El diseño de plataformas de middleware para la computación móvil requiere que los investigadores respondan a preguntas nuevas y fundamentalmente diferentes; simplemente asumir la presencia de porciones cableadas de la red en las que pueda residir la funcionalidad centralizada no es generalizable. Por lo tanto, es necesario investigar nuevos principios de diseño y idear patrones arquitectónicos que difieran de los tradicionalmente utilizados en el diseño de middleware para sistemas fijos. Como ejemplo, considera la reciente tendencia de superposición de capas en redes ad-hoc [1]. Esta es una forma de replantear el diseño de sistemas de software, abandonando explícitamente las formas clásicas de estratificación, ya que, aunque esta separación de preocupaciones permite la portabilidad, lo hace a expensas de posibles ganancias de eficiencia. Creemos que es posible ver nuestro enfoque como una instancia de superposición de capas. De hecho, hemos añadido el protocolo de red epidémica a nivel de middleware y, al mismo tiempo, hemos utilizado el protocolo de red síncrono existente si está presente tanto en la entrega de mensajes (capas tradicionales) como en informar al middleware sobre cuándo pueden entregarse los mensajes revelando detalles de las tablas de reenvío (violación de capas). Por esta razón, preferimos considerarlos conjuntamente como la capa de comunicación de nuestra plataforma, proporcionando juntos una entrega de mensajes más eficiente. Otro aspecto interesante es la explotación del contexto y la información del sistema para mejorar el rendimiento de las plataformas de middleware móvil. Una vez más, como resultado de adoptar una metodología de capas cruzadas, podemos construir sistemas que recopilan información del sistema operativo subyacente y los componentes de comunicación para permitir la adaptación del comportamiento. Podemos resumir este enfoque de diseño conceptual diciendo que las plataformas de middleware deben ser no solo conscientes del contexto (es decir, deben ser capaces de extraer y analizar información del contexto circundante) sino también conscientes del sistema (es decir, deben ser capaces de recopilar información de los componentes de software y hardware del sistema móvil). Se han desarrollado varios sistemas de middleware para admitir redes ad hoc con el uso de comunicación asíncrona (como LIME, XMIDDLE, STEAM [11]). En particular, la plataforma STEAM es un ejemplo interesante de middleware basado en eventos para redes ad hoc, que proporciona entrega de mensajes con conciencia de ubicación y una solución efectiva para el filtrado de eventos. Una discusión sobre JMS, y su realización móvil, ya ha sido realizada en las Secciones 4 y 2. La empresa suiza Softwired ha desarrollado el primer middleware JMS para computación móvil, llamado iBus Mobile [10]. Los componentes principales de esta arquitectura típicamente basada en infraestructura son el proveedor de JMS, la llamada puerta de enlace móvil de JMS, que se despliega en un host fijo y una biblioteca de cliente JMS ligera. El gateway se utiliza para la comunicación entre el servidor de aplicaciones y los dispositivos móviles. El proveedor JMS ve la pasarela como un cliente JMS normal. El proveedor JMS puede ser cualquier servidor de aplicaciones habilitado para JMS, como BEA Weblogic. Pronto [19] es un ejemplo de un sistema de middleware basado en mensajería, diseñado específicamente para entornos móviles. La plataforma está compuesta por tres clases de componentes: clientes móviles que implementan la especificación JMS, pasarelas que controlan el tráfico, garantizando eficiencia y posibles personalizaciones de usuario utilizando diferentes complementos y servidores JMS. Diferentes configuraciones de estos componentes son posibles; con respecto a las aplicaciones de redes móviles ad hoc, la más interesante es Serverless JMS. El objetivo de esta configuración es adaptar JMS a un modelo descentralizado. El modelo de publicación-suscripción explota la eficiencia y la escalabilidad del protocolo de multidifusión IP subyacente. Se proporcionan servicios de entrega de mensajes poco confiables y confiables: la confiabilidad se logra a través de un protocolo basado en acuse de recibo negativo. Pronto representa una buena solución para redes móviles basadas en infraestructura, pero no se dirige adecuadamente a entornos ad-hoc, ya que los nodos móviles dependen de servidores fijos para el intercambio de mensajes. Existen otras MOM implementadas para entornos móviles; sin embargo, suelen ser extensiones sencillas de middleware existente [8]. La única implementación de MOM específicamente diseñada para redes móviles ad-hoc fue desarrollada en la Universidad de Newcastle [18]. Este trabajo es nuevamente una adaptación de JMS; el enfoque de esa implementación se centra en la <br>comunicación de grupo</br> y el uso de algoritmos de enrutamiento a nivel de aplicación para la entrega de mensajes por tema. Sin embargo, hay una serie de diferencias en el enfoque de nuestro trabajo. La importancia que atribuimos a las desconexiones hace que la persistencia sea un requisito vital para cualquier middleware que necesite ser utilizado en redes móviles ad-hoc. Los autores de [18] señalan la persistencia como un posible trabajo futuro, sin considerar el hecho de que enrutar un mensaje a un host no conectado resultará en un fallo de entrega. Esta es una limitación notable en entornos móviles donde las desconexiones impredecibles son la norma en lugar de la excepción. 7. MAPA Y CONCLUSIONES La comunicación asincrónica es un paradigma de comunicación útil para las redes móviles ad-hoc, ya que permite a los hosts llegar, irse y recoger mensajes cuando sea conveniente, teniendo en cuenta también la disponibilidad de sus recursos (por ejemplo, energía, niveles de conectividad). En este artículo hemos descrito el estado del arte en términos de MOM para sistemas móviles. También hemos demostrado una adaptación de prueba de concepto de JMS al escenario extremo de redes móviles ad-hoc parcialmente conectadas. Hemos descrito y discutido las características y diferencias de nuestra solución con respecto a las implementaciones tradicionales de JMS y las adaptaciones existentes para entornos móviles. Sin embargo, también se deben investigar los compromisos entre el enrutamiento a nivel de aplicación y el uso de recursos, ya que los dispositivos móviles suelen tener escasez de energía/recursos. Una limitación clave de este trabajo es el algoritmo epidémico que tiene un rendimiento deficiente y un avance importante en la practicabilidad de este trabajo requiere un algoritmo que equilibre mejor las necesidades de eficiencia y probabilidad de entrega de mensajes. Actualmente estamos trabajando en algoritmos y protocolos que, aprovechando técnicas probabilísticas y estadísticas sobre la base de pequeñas cantidades de información intercambiada, son capaces de mejorar considerablemente la eficiencia en términos de recursos (memoria, ancho de banda, etc.) y la confiabilidad de nuestra plataforma de middleware [13]. Un desarrollo de investigación futurista, que podría llevar estas ideas de adaptación de middleware de mensajería para entornos móviles más allá, es la introducción de extensiones de comunicación más orientadas a la movilidad, como el soporte de geocast (es decir, la capacidad de enviar mensajes a áreas geográficas específicas). REFERENCIAS [1] M. Conti, G. Maselli, G. Turi y S. Giordano. Diseño de redes móviles ad-hoc con interconexión de capas. IEEE Computer, 37(2):48-51, febrero de 2004. [2] A. Demers, D. Greene, C. Hauser, W. Irish, J. Larson, S. Shenker, H. Sturgis, D. Swinehart y D. Terry. Algoritmos de epidemia para el mantenimiento de bases de datos replicadas. En el Sexto Simposio sobre Principios de Computación Distribuida, páginas 1-12, agosto de 1987. [3] A. Doria, M. Uden y D. P. Pandey. Proporcionando conectividad a la comunidad nómada Saami. En Actas de la Segunda Conferencia Internacional sobre Diseño Colaborativo Abierto para la Innovación Sostenible, diciembre de 2002. [4] M. Haahr, R. Cunningham y V. Cahill. Aplicaciones CORBA en un entorno móvil. En la 5ª Conferencia Internacional sobre Computación y Redes Móviles (MOBICOM99), páginas 36-47. ACM, agosto de 1999. [5] M. Hapner, R. Burridge, R. Sharma, J. Fialli y K. Stout. Especificación del Servicio de Mensajes Java Versión 1.1. Sun Microsystems, Inc., abril de 2002. http://java.sun.com/products/jms/. [6] J. Hart. WebSphere MQ: Conectando sus aplicaciones sin programación compleja. IBM WebSphere Software White Papers, 2003. [7] S. Hayward y M. Pezzini. Casando Middleware y Computación Móvil. Informe de investigación del Grupo Gartner, septiembre de 2001. [8] IBM. WebSphere MQ EveryPlace Versión 2.0, noviembre de 2002. http://www-3.ibm.com/software/integration/wmqe/. [9] UIT. Conectando comunidades remotas. Documentos de la Cumbre Mundial sobre la Sociedad de la Información, 2003. http://www.itu.int/osg/spu/wsis-themes. [10] S. Maffeis. Presentando JMS inalámbrico. Softwired AG, www.sofwired-inc.com, 2002. [11] C. Mascolo, L. Capra y W. Emmerich. Middleware para Computación Móvil. En E. Gregori, G. Anastasi y S. Basagni, editores, Conferencias Avanzadas sobre Redes, volumen 2497 de las Notas de Conferencias en Ciencias de la Computación, páginas 20-58. Springer Verlag, 2002. [12] Microsoft. \n\nSpringer Verlag, 2002. [12] Microsoft. Documentación de Microsoft Message Queuing (MSMQ) Versión 2.0. [13] M. Musolesi, S. Hailes y C. Mascolo. Enrutamiento adaptativo para redes ad-hoc móviles intermitentemente conectadas. Informe técnico, Nota de Investigación UCL-CS, julio de 2004. Enviado para su publicación. [14] Sun Microsystems. Documentación de Java Naming and Directory Interface (JNDI) Versión 1.2. 2003. http://java.sun.com/products/jndi/. [15] Sun Microsystems. Especificación de Jini Versión 2.0, 2003. http://java.sun.com/products/jini/. [16] A. Vahdat y D. Becker. Enrutamiento epidémico para redes ad-hoc parcialmente conectadas. Informe técnico CS-2000-06, Departamento de Ciencias de la Computación, Universidad de Duke, 2000. [17] A. Vargas. El sistema de simulación de eventos discretos OMNeT++. En Actas de la Multiconferencia Europea de Simulación (ESM2001), Praga, junio de 2001. [18] E. Vollset, D. Ingham y P. Ezhilchelvan. JMS en redes móviles ad-hoc. En Comunicaciones Inalámbricas Personales (PWC), páginas 40-52, Venecia, septiembre de 2003. [19] E. Yoneki y J. Bacon. Pronto: Mobilegateway con paradigma de publicación-suscripción sobre red inalámbrica. Informe Técnico 559, Universidad de Cambridge, Laboratorio de Computación, febrero de 2003. Middleware para Computación Pervasive y ad-hoc 126 ",
            "candidates": [],
            "error": [
                [
                    ""
                ]
            ]
        },
        "message orient middleware": {
            "translated_key": "middleware orientado a mensajes",
            "is_in_text": false,
            "original_annotated_sentences": [
                "Adapting Asynchronous Messaging Middleware to ad-hoc Networking Mirco Musolesi Dept.",
                "of Computer Science, University College London Gower Street, London WC1E 6BT, United Kingdom m.musolesi@cs.ucl.ac.uk Cecilia Mascolo Dept. of Computer Science, University College London Gower Street, London WC1E 6BT, United Kingdom c.mascolo@cs.ucl.ac.uk Stephen Hailes Dept. of Computer Science, University College London Gower Street, London WC1E 6BT, United Kingdom s.hailes@cs.ucl.ac.uk ABSTRACT The characteristics of mobile environments, with the possibility of frequent disconnections and fluctuating bandwidth, have forced a rethink of traditional middleware.",
                "In particular, the synchronous communication paradigms often employed in standard middleware do not appear to be particularly suited to ad-hoc environments, in which not even the intermittent availability of a backbone network can be assumed.",
                "Instead, asynchronous communication seems to be a generally more suitable paradigm for such environments.",
                "Message oriented middleware for traditional systems has been developed and used to provide an asynchronous paradigm of communication for distributed systems, and, recently, also for some specific mobile computing systems.",
                "In this paper, we present our experience in designing, implementing and evaluating EMMA (Epidemic Messaging Middleware for ad-hoc networks), an adaptation of Java Message Service (JMS) for mobile ad-hoc environments.",
                "We discuss in detail the design challenges and some possible solutions, showing a concrete example of the feasibility and suitability of the application of the asynchronous paradigm in this setting and outlining a research roadmap for the coming years.",
                "Categories and Subject Descriptors C.2.4 [Computer-Communication Networks]: Distributed Systems-Distributed Applications; C.2.1 [Network Architecture and Design]: Wireless Communication General Terms DESIGN, ALGORITHMS 1.",
                "INTRODUCTION With the increasing popularity of mobile devices and their widespread adoption, there is a clear need to allow the development of a broad spectrum of applications that operate effectively over such an environment.",
                "Unfortunately, this is far from simple: mobile devices are increasingly heterogeneous in terms of processing capabilities, memory size, battery capacity, and network interfaces.",
                "Each such configuration has substantially different characteristics that are both statically different - for example, there is a major difference in capability between a Berkeley mote and an 802.11g-equipped laptop - and that vary dynamically, as in situations of fluctuating bandwidth and intermittent connectivity.",
                "Mobile ad hoc environments have an additional element of complexity in that they are entirely decentralised.",
                "In order to craft applications for such complex environments, an appropriate form of middleware is essential if cost effective development is to be achieved.",
                "In this paper, we examine one of the foundational aspects of middleware for mobile ad-hoc environments: that of the communication primitives.",
                "Traditionally, the most frequently used middleware primitives for communication assume the simultaneous presence of both end points on a network, since the stability and pervasiveness of the networking infrastructure is not an unreasonable assumption for most wired environments.",
                "In other words, most communication paradigms are synchronous: object oriented middleware such as CORBA and Java RMI are typical examples of middleware based on synchronous communication.",
                "In recent years, there has been growing interest in platforms based on asynchronous communication paradigms, such as publish-subscribe systems [6]: these have been exploited very successfully where there is application level asynchronicity.",
                "From a Gartner Market Report [7]: Given messageoriented-middlewares (MOM) popularity, scalability, flexibility, and affinity with mobile and wireless architectures, by 2004, MOM will emerge as the dominant form of communication middleware for linking mobile and enterprise applications (0.7 probability)....",
                "Moreover, in mobile ad-hoc systems, the likelihood of network fragmentation means that synchronous communication may in any case be impracticable, giving situations in which delay tolerant asynchronous traffic is the only form of traffic that could be supported. 121 Middleware 2004 Companion Middleware for mobile ad-hoc environments must therefore support semi-synchronous or completely asynchronous communication primitives if it is to avoid substantial limitations to its utility.",
                "Aside from the intellectual challenge in supporting this model, this work is also interesting because there are a number of practical application domains in allowing inter-community communication in undeveloped areas of the globe.",
                "Thus, for example, projects that have been carried out to help populations that live in remote places of the globe such as Lapland [3] or in poor areas that lack fixed connectivity infrastructure [9].",
                "There have been attempts to provide mobile middleware with these properties, including STEAM, LIME, XMIDDLE, Bayou (see [11] for a more complete review of mobile middleware).",
                "These models differ quite considerably from the existing traditional middleware in terms of primitives provided.",
                "Furthermore, some of them fail in providing a solution for the true ad-hoc scenarios.",
                "If the projected success of MOM becomes anything like a reality, there will be many programmers with experience of it.",
                "The ideal solution to the problem of middleware for ad-hoc systems is, then, to allow programmers to utilise the same paradigms and models presented by common forms of MOM and to ensure that these paradigms are supportable within the mobile environment.",
                "This approach has clear advantages in allowing applications developed on standard middleware platforms to be easily deployed on mobile devices.",
                "Indeed, some research has already led to the adaptation of traditional middleware platforms to mobile settings, mainly to provide integration between mobile devices and existing fixed networks in a nomadic (i.e., mixed) environment [4].",
                "With respect to message oriented middleware, the current implementations, however, either assume the existence of a backbone network to which the mobile hosts connect from time to time while roaming [10], or assume that nodes are always somehow reachable through a path [18].",
                "No adaptation to heterogeneous or completely ad-hoc scenarios, with frequent disconnection and periodically isolated clouds of hosts, has been attempted.",
                "In the remainder of this paper we describe an initial attempt to adapt message oriented middleware to suit mobile and, more specifically, mobile ad-hoc networks.",
                "In our case, we elected to examine JMS, as one of the most widely known MOM systems.",
                "In the latter part of this paper, we explore the limitations of our results and describe the plans we have to take the work further. 2.",
                "MESSAGE ORIENTED MIDDLEWARE AND JAVA MESSAGE SERVICE (JMS) Message-oriented middleware systems support communication between distributed components via message-passing: the sender sends a message to identified queues, which usually reside on a server.",
                "A receiver retrieves the message from the queue at a different time and may acknowledge the reply using the same asynchronous mechanism.",
                "Message-oriented middleware thus supports asynchronous communication in a very natural way, achieving de-coupling of senders and receivers.",
                "A sender is able to continue processing as soon as the middleware has accepted the message; eventually, the receiver will send an acknowledgment message and the sender will be able to collect it at a convenient time.",
                "However, given the way they are implemented, these middleware systems usually require resource-rich devices, especially in terms of memory and disk space, where persistent queues of messages that have been received but not yet processed, are stored.",
                "Sun Java Message Service [5], IBM WebSphere MQ [6], Microsoft MSMQ [12] are examples of very successful message-oriented middleware for traditional distributed systems.",
                "The Java Messaging Service (JMS) is a collection of interfaces for asynchronous communication between distributed components.",
                "It provides a common way for Java programs to create, send and receive messages.",
                "JMS users are usually referred to as clients.",
                "The JMS specification further defines providers as the components in charge of implementing the messaging system and providing the administrative and control functionality (i.e., persistence and reliability) required by the system.",
                "Clients can send and receive messages, asynchronously, through the JMS provider, which is in charge of the delivery and, possibly, of the persistence of the messages.",
                "There are two types of communication supported: point to point and publish-subscribe models.",
                "In the point to point model, hosts send messages to queues.",
                "Receivers can be registered with some specific queues, and can asynchronously retrieve the messages and then acknowledge them.",
                "The publish-subscribe model is based on the use of topics that can be subscribed to by clients.",
                "Messages are sent to topics by other clients and are then received in an asynchronous mode by all the subscribed clients.",
                "Clients learn about the available topics and queues through Java Naming and Directory Interface (JNDI) [14].",
                "Queues and topics are created by an administrator on the provider and are registered with the JNDI interface for look-up.",
                "In the next section, we introduce the challenges of mobile networks, and show how JMS can be adapted to cope with these requirements. 3.",
                "JMS FOR MOBILE COMPUTING Mobile networks vary very widely in their characteristics, from nomadic networks in which modes relocate whilst offline through to ad-hoc networks in which modes move freely and in which there is no infrastructure.",
                "Mobile ad-hoc networks are most generally applicable in situations where survivability and instant deployability are key: most notably in military applications and disaster relief.",
                "In between these two types of mobile networks, there are, however, a number of possible heterogeneous combinations, where nomadic and ad-hoc paradigms are used to interconnect totally unwired areas to more structured networks (such as a LAN or the Internet).",
                "Whilst the JMS specification has been extensively implemented and used in traditional distributed systems, adaptations for mobile environments have been proposed only recently.",
                "The challenges of porting JMS to mobile settings are considerable; however, in view of its widespread acceptance and use, there are considerable advantages in allowing the adaptation of existing applications to mobile environments and in allowing the interoperation of applications in the wired and wireless regions of a network.",
                "In [10], JMS was adapted to a nomadic mobile setting, where mobile hosts can be JMS clients and communicate through the JMS provider that, however, sits on a backbone network, providing reliability and persistence.",
                "The client prototype presented in [10] is very lightweight, due to the delegation of all the heavyweight functionality to the Middleware for Pervasive and ad-hoc Computing 122 provider on the wired network.",
                "However, this approach is somewhat limited in terms of widespread applicability and scalability as a consequence of the concentration of functionality in the wired portion of the network.",
                "If JMS is to be adapted to completely ad-hoc environments, where no fixed infrastructure is available, and where nodes change location and status very dynamically, more issues must be taken into consideration.",
                "Firstly, discovery needs to use a resilient but distributed model: in this extremely dynamic environment, static solutions are unacceptable.",
                "As discussed in Section 2, a JMS administrator defines queues and topics on the provider.",
                "Clients can then learn about them using the Java Naming and Directory Interface (JNDI).",
                "However, due to the way JNDI is designed, a JNDI node (or more than one) needs to be in reach in order to obtain a binding of a name to an address (i.e., knowing where a specific queue/topic is).",
                "In mobile ad-hoc environments, the discovery process cannot assume the existence of a fixed set of discovery servers that are always reachable, as this would not match the dynamicity of ad-hoc networks.",
                "Secondly, a JMS Provider, as suggested by the JMS specification, also needs to be reachable by each node in the network, in order to communicate.",
                "This assumes a very centralised architecture, which again does not match the requirements of a mobile ad-hoc setting, in which nodes may be moving and sparse: a more distributed and dynamic solution is needed.",
                "Persistence is, however, essential functionality in asynchronous communication environments as hosts are, by definition, connected at different times.",
                "In the following section, we will discuss our experience in designing and implementing JMS for mobile ad-hoc networks. 4.",
                "JMSFOR MOBILE ad-hoc NETWORKS 4.1 Adaptation of JMS for Mobile ad-hoc Networks Developing applications for mobile networks is yet more challenging: in addition to the same considerations as for infrastructured wireless environments, such as the limited device capabilities and power constraints, there are issues of rate of change of network connectivity, and the lack of a static routing infrastructure.",
                "Consequently, we now describe an initial attempt to adapt the JMS specification to target the particular requirements related to ad-hoc scenarios.",
                "As discussed in Section 3, a JMS application can use either the point to point and the publish-subscribe styles of messaging.",
                "Point to Point Model The point to point model is based on the concept of queues, that are used to enable asynchronous communication between the producer of a message and possible different consumers.",
                "In our solution, the location of queues is determined by a negotiation process that is application dependent.",
                "For example, let us suppose that it is possible to know a priori, or it is possible to determine dynamically, that a certain host is the receiver of the most part of messages sent to a particular queue.",
                "In this case, the optimum location of the queue may well be on this particular host.",
                "In general, it is worth noting that, according to the JMS specification and suggested design patterns, it is common and preferable for a client to have all of its messages delivered to a single queue.",
                "Queues are advertised periodically to the hosts that are within transmission range or that are reachable by means of the underlying synchronous communication protocol, if provided.",
                "It is important to note that, at the middleware level, it is logically irrelevant whether or not the network layer implements some form of ad-hoc routing (though considerably more efficient if it does); the middleware only considers information about which nodes are actively reachable at any point in time.",
                "The hosts that receive advertisement messages add entries to their JNDI registry.",
                "Each entry is characterized by a lease (a mechanism similar to that present in Jini [15]).",
                "A lease represents the time of validity of a particular entry.",
                "If a lease is not refreshed (i.e, its life is not extended), it can expire and, consequently, the entry is deleted from the registry.",
                "In other words, the host assumes that the queue will be unreachable from that point in time.",
                "This may be caused, for example, if a host storing the queue becomes unreachable.",
                "A host that initiates a discovery process will find the topics and the queues present in its connected portion of the network in a straightforward manner.",
                "In order to deliver a message to a host that is not currently in reach1 , we use an asynchronous epidemic routing protocol that will be discussed in detail in Section 4.2.",
                "If two hosts are in the same cloud (i.e., a connected path exists between them), but no synchronous protocol is available, the messages are sent using the epidemic protocol.",
                "In this case, the delivery latency will be low as a result of the rapidity of propagation of the infection in the connected cloud (see also the simulation results in Section 5).",
                "Given the existence of an epidemic protocol, the discovery mechanism consists of advertising the queues to the hosts that are currently unreachable using analogous mechanisms.",
                "Publish-Subscribe Model In the publish-subscribe model, some of the hosts are similarly designated to hold topics and store subscriptions, as before.",
                "Topics are advertised through the registry in the same way as are queues, and a client wishing to subscribe to a topic must register with the client holding the topic.",
                "When a client wishes to send a message to the topic list, it sends it to the topic holder (in the same way as it would send a message to a queue).",
                "The topic holder then forwards the message to all subscribers, using the synchronous protocol if possible, the epidemic protocol otherwise.",
                "It is worth noting that we use a single message with multiple recipients, instead of multiple messages with multiple recipients.",
                "When a message is delivered to one of the subscribers, this recipient is deleted from the list.",
                "In order to delete the other possible replicas, we employ acknowledgment messages (discussed in Section 4.4), returned in the same way as a normal message.",
                "We have also adapted the concepts of durable and non durable subscriptions for ad-hoc settings.",
                "In fixed platforms, durable subscriptions are maintained during the disconnections of the clients, whether these are intentional or are the result of failures.",
                "In traditional systems, while a durable subscriber is disconnected from the server, it is responsible for storing messages.",
                "When the durable subscriber reconnects, the server sends it all unexpired messages.",
                "The problem is that, in our scenario, disconnections are the norm 1 In theory, it is not possible to send a message to a peer that has never been reachable in the past, since there can be no entry present in the registry.",
                "However, to overcome this possible limitation, we provide a primitive through which information can be added to the registry without using the normal channels. 123 Middleware 2004 Companion rather than the exception.",
                "In other words, we cannot consider disconnections as failures.",
                "For these reasons, we adopt a slightly different semantics.",
                "With respect to durable subscriptions, if a subscriber becomes disconnected, notifications are not stored but are sent using the epidemic protocol rather than the synchronous protocol.",
                "In other words, durable notifications remain valid during the possible disconnections of the subscriber.",
                "On the other hand, if a non-durable subscriber becomes disconnected, its subscription is deleted; in other words, during disconnections, notifications are not sent using the epidemic protocol but exploit only the synchronous protocol.",
                "If the topic becomes accessible to this host again, it must make another subscription in order to receive the notifications.",
                "Unsubscription messages are delivered in the same way as are subscription messages.",
                "It is important to note that durable subscribers have explicitly to unsubscribe from a topic in order to stop the notification process; however, all durable subscriptions have a predefined expiration time in order to cope with the cases of subscribers that do not meet again because of their movements or failures.",
                "This feature is clearly provided to limit the number of the unnecessary messages sent around the network. 4.2 Message Delivery using Epidemic Routing In this section, we examine one possible mechanism that will allow the delivery of messages in a partially connected network.",
                "The mechanism we discuss is intended for the purposes of demonstrating feasibility; more efficient communication mechanisms for this environment are themselves complex, and are the subject of another paper [13].",
                "The asynchronous message delivery described above is based on a typical pure epidemic-style routing protocol [16].",
                "A message that needs to be sent is replicated on each host in reach.",
                "In this way, copies of the messages are quickly spread through connected networks, like an infection.",
                "If a host becomes connected to another cloud of mobile nodes, during its movement, the message spreads through this collection of hosts.",
                "Epidemic-style replication of data and messages has been exploited in the past in many fields starting with the distributed database systems area [2].",
                "Within epidemic routing, each host maintains a buffer containing the messages that it has created and the replicas of the messages generated by the other hosts.",
                "To improve the performance, a hash-table indexes the content of the buffer.",
                "When two hosts connect, the host with the smaller identifier initiates a so-called anti-entropy session, sending a list containing the unique identifiers of the messages that it currently stores.",
                "The other host evaluates this list and sends back a list containing the identifiers it is storing that are not present in the other host, together with the messages that the other does not have.",
                "The host that has started the session receives the list and, in the same way, sends the messages that are not present in the other host.",
                "Should buffer overflow occur, messages are dropped.",
                "The reliability offered by this protocol is typically best effort, since there is no guarantee that a message will eventually be delivered to its recipient.",
                "Clearly, the delivery ratio of the protocol increases proportionally to the maximum allowed delay time and the buffer size in each host (interesting simulation results may be found in [16]). 4.3 Adaptation of the JMS Message Model In this section, we will analyse the aspects of our adaptation of the specification related to the so-called JMS Message Model [5].",
                "According to this, JMS messages are characterised by some properties defined using the header field, which contains values that are used by both clients and providers for their delivery.",
                "The aspects discussed in the remainder of this section are valid for both models (point to point and publish-subscribe).",
                "A JMS message can be persistent or non-persistent.",
                "According to the JMS specification, persistent messages must be delivered with a higher degree of reliability than the nonpersistent ones.",
                "However, it is worth noting that it is not possible to ensure once-and-only-once reliability for persistent messages as defined in the specification, since, as we discussed in the previous subsection, the underlying epidemic protocol can guarantee only best-effort delivery.",
                "However, clients maintain a list of the identifiers of the recently received messages to avoid the delivery of message duplicates.",
                "In other words, we provide the applications with at-mostonce reliability for both types of messages.",
                "In order to implement different levels of reliability, EMMA treats persistent and non-persistent messages differently, during the execution of the anti-entropy epidemic protocol.",
                "Since the message buffer space is limited, persistent messages are preferentially replicated using the available free space.",
                "If this is insufficient and non-persistent messages are present in the buffer, these are replaced.",
                "Only the successful deliveries of the persistent messages are notified to the senders.",
                "According to the JMS specification, it is possible to assign a priority to each message.",
                "The messages with higher priorities are delivered in a preferential way.",
                "As discussed above, persistent messages are prioritised above the non-persistent ones.",
                "Further selection is based on their priorities.",
                "Messages with higher priorities are treated in a preferential way.",
                "In fact, if there is not enough space to replicate all the persistent messages, a mechanism based on priorities is used to delete and replicate non-persistent messages (and, if necessary, persistent messages).",
                "Messages are deleted from the buffers using the expiration time value that can be set by senders.",
                "This is a way to free space in the buffers (one preferentially deletes older messages in cases of conflict); to eliminate stale replicas in the system; and to limit the time for which destinations must hold message identifiers to dispose of duplicates. 4.4 Reliability and Acknowledgment Mechanisms As already discussed, at-most-once message delivery is the best that can be achieved in terms of delivery semantics in partially connected ad-hoc settings.",
                "However, it is possible to improve the reliability of the system with efficient acknowledgment mechanisms.",
                "EMMA provides a mechanism for failure notification to applications if the acknowledgment is not received within a given timeout (that can be configured by application developers).",
                "This mechanism is the one that distinguishes the delivery of persistent and non-persistent messages in our JMS implementation: the deliveries of the former are notified to the senders, whereas the latter are not.",
                "We use acknowledgment messages not only to inform senders about the successful delivery of messages but also to delete the replicas of the delivered messages that are still present in the network.",
                "Each host maintains a list of the messages Middleware for Pervasive and ad-hoc Computing 124 successfully delivered that is updated as part of the normal process of information exchange between the hosts.",
                "The lists are exchanged during the first steps of the anti-entropic epidemic protocol with a certain predefined frequency.",
                "In the case of messages with multiple recipients, a list of the actual recipients is also stored.",
                "When a host receives the list, it checks its message buffer and updates it according to the following rules: (1) if a message has a single recipient and it has been delivered, it is deleted from the buffer; (2) if a message has multiple recipients, the identifiers of the delivered hosts are deleted from the associated list of recipients.",
                "If the resulting length of the list of recipients is zero, the message is deleted from the buffer.",
                "These lists have, clearly, finite dimensions and are implemented as circular queues.",
                "This simple mechanism, together with the use of expiration timestamps, guarantees that the old acknowledgment notifications are deleted from the system after a limited period of time.",
                "In order to improve the reliability of EMMA, a design mechanism for intelligent replication of queues and topics based on the context information could be developed.",
                "However this is not yet part of the current architecture of EMMA. 5.",
                "IMPLEMENTATION AND PRELIMINARY EVALUATION We implemented a prototype of our platform using the J2ME Personal Profile.",
                "The size of the executable is about 250KB including the JMS 1.1 jar file; this is a perfectly acceptable figure given the available memory of the current mobile devices on the market.",
                "We tested our prototype on HP IPaq PDAs running Linux, interconnected with WaveLan, and on a number of laptops with the same network interface.",
                "We also evaluated the middleware platform using the OMNET++ discrete event simulator [17] in order to explore a range of mobile scenarios that incorporated a more realistic number of hosts than was achievable experimentally.",
                "More specifically, we assessed the performance of the system in terms of delivery ratio and average delay, varying the density of population and the buffer size, and using persistent and non-persistent messages with different priorities.",
                "The simulation results show that the EMMAs performance, in terms of delivery ratio and delay of persistent messages with higher priorities, is good.",
                "In general, it is evident that the delivery ratio is strongly related to the correct dimensioning of the buffers to the maximum acceptable delay.",
                "Moreover, the epidemic algorithms are able to guarantee a high delivery ratio if one evaluates performance over a time interval sufficient for the dissemination of the replicas of messages (i.e., the infection spreading) in a large portion of the ad-hoc network.",
                "One consequence of the dimensioning problem is that scalability may be seriously impacted in peer-to-peer middleware for mobile computing due to the resource poverty of the devices (limited memory to store temporarily messages) and the number of possible interconnections in ad-hoc settings.",
                "What is worse is that common forms of commercial and social organisation (six degrees of separation) mean that even modest TTL values on messages will lead to widespread flooding of epidemic messages.",
                "This problem arises because of the lack of intelligence in the epidemic protocol, and can be addressed by selecting carrier nodes for messages with greater care.",
                "The details of this process are, however, outside the scope of this paper (but may be found in [13]) and do not affect the foundation on which the EMMA middleware is based: the ability to deliver messages asynchronously. 6.",
                "CRITICAL VIEW OF THE STATE OF THE ART The design of middleware platforms for mobile computing requires researchers to answer new and fundamentally different questions; simply assuming the presence of wired portions of the network on which centralised functionality can reside is not generalisable.",
                "Thus, it is necessary to investigate novel design principles and to devise architectural patterns that differ from those traditionally exploited in the design of middleware for fixed systems.",
                "As an example, consider the recent cross-layering trend in ad-hoc networking [1].",
                "This is a way of re-thinking software systems design, explicitly abandoning the classical forms of layering, since, although this separation of concerns afford portability, it does so at the expense of potential efficiency gains.",
                "We believe that it is possible to view our approach as an instance of cross-layering.",
                "In fact, we have added the epidemic network protocol at middleware level and, at the same time, we have used the existing synchronous network protocol if present both in delivering messages (traditional layering) and in informing the middleware about when messages may be delivered by revealing details of the forwarding tables (layer violation).",
                "For this reason, we prefer to consider them jointly as the communication layer of our platform together providing more efficient message delivery.",
                "Another interesting aspect is the exploitation of context and system information to improve the performance of mobile middleware platforms.",
                "Again, as a result of adopting a cross-layering methodology, we are able to build systems that gather information from the underlying operating system and communication components in order to allow for adaptation of behaviour.",
                "We can summarise this conceptual design approach by saying that middleware platforms must be not only context-aware (i.e., they should be able to extract and analyse information from the surrounding context) but also system-aware (i.e., they should be able to gather information from the software and hardware components of the mobile system).",
                "A number of middleware systems have been developed to support ad-hoc networking with the use of asynchronous communication (such as LIME, XMIDDLE, STEAM [11]).",
                "In particular, the STEAM platform is an interesting example of event-based middleware for ad-hoc networks, providing location-aware message delivery and an effective solution for event filtering.",
                "A discussion of JMS, and its mobile realisation, has already been conducted in Sections 4 and 2.",
                "The Swiss company Softwired has developed the first JMS middleware for mobile computing, called iBus Mobile [10].",
                "The main components of this typically infrastructure-based architecture are the JMS provider, the so-called mobile JMS gateway, which is deployed on a fixed host and a lightweight JMS client library.",
                "The gateway is used for the communication between the application server and mobile hosts.",
                "The gateway is seen by the JMS provider as a normal JMS client.",
                "The JMS provider can be any JMS-enabled application server, such as BEA Weblogic.",
                "Pronto [19] is an example of mid125 Middleware 2004 Companion dleware system based on messaging that is specifically designed for mobile environments.",
                "The platform is composed of three classes of components: mobile clients implementing the JMS specification, gateways that control traffic, guaranteeing efficiency and possible user customizations using different plug-ins and JMS servers.",
                "Different configurations of these components are possible; with respect to mobile ad hoc networks applications, the most interesting is Serverless JMS.",
                "The aim of this configuration is to adapt JMS to a decentralized model.",
                "The publish-subscribe model exploits the efficiency and the scalability of the underlying IP multicast protocol.",
                "Unreliable and reliable message delivery services are provided: reliability is provided through a negative acknowledgment-based protocol.",
                "Pronto represents a good solution for infrastructure-based mobile networks but it does not adequately target ad-hoc settings, since mobile nodes rely on fixed servers for the exchange of messages.",
                "Other MOM implemented for mobile environments exist; however, they are usually straightforward extensions of existing middleware [8].",
                "The only implementation of MOM specifically designed for mobile ad-hoc networks was developed at the University of Newcastle [18].",
                "This work is again a JMS adaptation; the focus of that implementation is on group communication and the use of application level routing algorithms for topic delivery of messages.",
                "However, there are a number of differences in the focus of our work.",
                "The importance that we attribute to disconnections makes persistence a vital requirement for any middleware that needs to be used in mobile ad-hoc networks.",
                "The authors of [18] signal persistence as possible future work, not considering the fact that routing a message to a non-connected host will result in delivery failure.",
                "This is a remarkable limitation in mobile settings where unpredictable disconnections are the norm rather than the exception. 7.",
                "ROADMAP AND CONCLUSIONS Asynchronous communication is a useful communication paradigm for mobile ad-hoc networks, as hosts are allowed to come, go and pick up messages when convenient, also taking account of their resource availability (e.g., power, connectivity levels).",
                "In this paper we have described the state of the art in terms of MOM for mobile systems.",
                "We have also shown a proof of concept adaptation of JMS to the extreme scenario of partially connected mobile ad-hoc networks.",
                "We have described and discussed the characteristics and differences of our solution with respect to traditional JMS implementations and the existing adaptations for mobile settings.",
                "However, trade-offs between application-level routing and resource usage should also be investigated, as mobile devices are commonly power/resource scarce.",
                "A key limitation of this work is the poorly performing epidemic algorithm and an important advance in the practicability of this work requires an algorithm that better balances the needs of efficiency and message delivery probability.",
                "We are currently working on algorithms and protocols that, exploiting probabilistic and statistical techniques on the basis of small amounts of exchanged information, are able to improve considerably the efficiency in terms of resources (memory, bandwidth, etc) and the reliability of our middleware platform [13].",
                "One futuristic research development, which may take these ideas of adaptation of messaging middleware for mobile environments further is the introduction of more mobility oriented communication extensions, for instance the support of geocast (i.e., the ability to send messages to specific geographical areas). 8.",
                "REFERENCES [1] M. Conti, G. Maselli, G. Turi, and S. Giordano.",
                "Cross-layering in Mobile ad-hoc Network Design.",
                "IEEE Computer, 37(2):48-51, February 2004. [2] A. Demers, D. Greene, C. Hauser, W. Irish, J. Larson, S. Shenker, H. Sturgis, D. Swinehart, and D. Terry.",
                "Epidemic Algorithms for Replicated Database Maintenance.",
                "In Sixth Symposium on Principles of Distributed Computing, pages 1-12, August 1987. [3] A. Doria, M. Uden, and D. P. Pandey.",
                "Providing connectivity to the Saami nomadic community.",
                "In Proceedings of the Second International Conference on Open Collaborative Design for Sustainable Innovation, December 2002. [4] M. Haahr, R. Cunningham, and V. Cahill.",
                "Supporting CORBA applications in a Mobile Environment.",
                "In 5th International Conference on Mobile Computing and Networking (MOBICOM99), pages 36-47.",
                "ACM, August 1999. [5] M. Hapner, R. Burridge, R. Sharma, J. Fialli, and K. Stout.",
                "Java Message Service Specification Version 1.1.",
                "Sun Microsystems, Inc., April 2002. http://java.sun.com/products/jms/. [6] J. Hart.",
                "WebSphere MQ: Connecting your applications without complex programming.",
                "IBM WebSphere Software White Papers, 2003. [7] S. Hayward and M. Pezzini.",
                "Marrying Middleware and Mobile Computing.",
                "Gartner Group Research Report, September 2001. [8] IBM.",
                "WebSphere MQ EveryPlace Version 2.0, November 2002. http://www-3.ibm.com/software/integration/wmqe/. [9] ITU.",
                "Connecting remote communities.",
                "Documents of the World Summit on Information Society, 2003. http://www.itu.int/osg/spu/wsis-themes. [10] S. Maffeis.",
                "Introducing Wireless JMS.",
                "Softwired AG, www.sofwired-inc.com, 2002. [11] C. Mascolo, L. Capra, and W. Emmerich.",
                "Middleware for Mobile Computing.",
                "In E. Gregori, G. Anastasi, and S. Basagni, editors, Advanced Lectures on Networking, volume 2497 of Lecture Notes in Computer Science, pages 20-58.",
                "Springer Verlag, 2002. [12] Microsoft.",
                "Microsoft Message Queuing (MSMQ) Version 2.0 Documentation. [13] M. Musolesi, S. Hailes, and C. Mascolo.",
                "Adaptive routing for intermittently connected mobile ad-hoc networks.",
                "Technical report, UCL-CS Research Note, July 2004.",
                "Submitted for Publication. [14] Sun Microsystems.",
                "Java Naming and Directory Interface (JNDI) Documentation Version 1.2. 2003. http://java.sun.com/products/jndi/. [15] Sun Microsystems.",
                "Jini Specification Version 2.0, 2003. http://java.sun.com/products/jini/. [16] A. Vahdat and D. Becker.",
                "Epidemic routing for Partially Connected ad-hoc Networks.",
                "Technical Report CS-2000-06, Department of Computer Science, Duke University, 2000. [17] A. Vargas.",
                "The OMNeT++ discrete event simulation system.",
                "In Proceedings of the European Simulation Multiconference (ESM2001), Prague, June 2001. [18] E. Vollset, D. Ingham, and P. Ezhilchelvan.",
                "JMS on Mobile ad-hoc Networks.",
                "In Personal Wireless Communications (PWC), pages 40-52, Venice, September 2003. [19] E. Yoneki and J. Bacon.",
                "Pronto: Mobilegateway with publish-subscribe paradigm over wireless network.",
                "Technical Report 559, University of Cambridge, Computer Laboratory, February 2003.",
                "Middleware for Pervasive and ad-hoc Computing 126"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [],
            "translated_text": "",
            "candidates": [],
            "error": [
                []
            ]
        },
        "middleware for mobile computing": {
            "translated_key": "middleware para computación móvil",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Adapting Asynchronous Messaging Middleware to ad-hoc Networking Mirco Musolesi Dept.",
                "of Computer Science, University College London Gower Street, London WC1E 6BT, United Kingdom m.musolesi@cs.ucl.ac.uk Cecilia Mascolo Dept. of Computer Science, University College London Gower Street, London WC1E 6BT, United Kingdom c.mascolo@cs.ucl.ac.uk Stephen Hailes Dept. of Computer Science, University College London Gower Street, London WC1E 6BT, United Kingdom s.hailes@cs.ucl.ac.uk ABSTRACT The characteristics of mobile environments, with the possibility of frequent disconnections and fluctuating bandwidth, have forced a rethink of traditional middleware.",
                "In particular, the synchronous communication paradigms often employed in standard middleware do not appear to be particularly suited to ad-hoc environments, in which not even the intermittent availability of a backbone network can be assumed.",
                "Instead, asynchronous communication seems to be a generally more suitable paradigm for such environments.",
                "Message oriented middleware for traditional systems has been developed and used to provide an asynchronous paradigm of communication for distributed systems, and, recently, also for some specific mobile computing systems.",
                "In this paper, we present our experience in designing, implementing and evaluating EMMA (Epidemic Messaging Middleware for ad-hoc networks), an adaptation of Java Message Service (JMS) for mobile ad-hoc environments.",
                "We discuss in detail the design challenges and some possible solutions, showing a concrete example of the feasibility and suitability of the application of the asynchronous paradigm in this setting and outlining a research roadmap for the coming years.",
                "Categories and Subject Descriptors C.2.4 [Computer-Communication Networks]: Distributed Systems-Distributed Applications; C.2.1 [Network Architecture and Design]: Wireless Communication General Terms DESIGN, ALGORITHMS 1.",
                "INTRODUCTION With the increasing popularity of mobile devices and their widespread adoption, there is a clear need to allow the development of a broad spectrum of applications that operate effectively over such an environment.",
                "Unfortunately, this is far from simple: mobile devices are increasingly heterogeneous in terms of processing capabilities, memory size, battery capacity, and network interfaces.",
                "Each such configuration has substantially different characteristics that are both statically different - for example, there is a major difference in capability between a Berkeley mote and an 802.11g-equipped laptop - and that vary dynamically, as in situations of fluctuating bandwidth and intermittent connectivity.",
                "Mobile ad hoc environments have an additional element of complexity in that they are entirely decentralised.",
                "In order to craft applications for such complex environments, an appropriate form of middleware is essential if cost effective development is to be achieved.",
                "In this paper, we examine one of the foundational aspects of middleware for mobile ad-hoc environments: that of the communication primitives.",
                "Traditionally, the most frequently used middleware primitives for communication assume the simultaneous presence of both end points on a network, since the stability and pervasiveness of the networking infrastructure is not an unreasonable assumption for most wired environments.",
                "In other words, most communication paradigms are synchronous: object oriented middleware such as CORBA and Java RMI are typical examples of middleware based on synchronous communication.",
                "In recent years, there has been growing interest in platforms based on asynchronous communication paradigms, such as publish-subscribe systems [6]: these have been exploited very successfully where there is application level asynchronicity.",
                "From a Gartner Market Report [7]: Given messageoriented-middlewares (MOM) popularity, scalability, flexibility, and affinity with mobile and wireless architectures, by 2004, MOM will emerge as the dominant form of communication middleware for linking mobile and enterprise applications (0.7 probability)....",
                "Moreover, in mobile ad-hoc systems, the likelihood of network fragmentation means that synchronous communication may in any case be impracticable, giving situations in which delay tolerant asynchronous traffic is the only form of traffic that could be supported. 121 Middleware 2004 Companion Middleware for mobile ad-hoc environments must therefore support semi-synchronous or completely asynchronous communication primitives if it is to avoid substantial limitations to its utility.",
                "Aside from the intellectual challenge in supporting this model, this work is also interesting because there are a number of practical application domains in allowing inter-community communication in undeveloped areas of the globe.",
                "Thus, for example, projects that have been carried out to help populations that live in remote places of the globe such as Lapland [3] or in poor areas that lack fixed connectivity infrastructure [9].",
                "There have been attempts to provide mobile middleware with these properties, including STEAM, LIME, XMIDDLE, Bayou (see [11] for a more complete review of mobile middleware).",
                "These models differ quite considerably from the existing traditional middleware in terms of primitives provided.",
                "Furthermore, some of them fail in providing a solution for the true ad-hoc scenarios.",
                "If the projected success of MOM becomes anything like a reality, there will be many programmers with experience of it.",
                "The ideal solution to the problem of middleware for ad-hoc systems is, then, to allow programmers to utilise the same paradigms and models presented by common forms of MOM and to ensure that these paradigms are supportable within the mobile environment.",
                "This approach has clear advantages in allowing applications developed on standard middleware platforms to be easily deployed on mobile devices.",
                "Indeed, some research has already led to the adaptation of traditional middleware platforms to mobile settings, mainly to provide integration between mobile devices and existing fixed networks in a nomadic (i.e., mixed) environment [4].",
                "With respect to message oriented middleware, the current implementations, however, either assume the existence of a backbone network to which the mobile hosts connect from time to time while roaming [10], or assume that nodes are always somehow reachable through a path [18].",
                "No adaptation to heterogeneous or completely ad-hoc scenarios, with frequent disconnection and periodically isolated clouds of hosts, has been attempted.",
                "In the remainder of this paper we describe an initial attempt to adapt message oriented middleware to suit mobile and, more specifically, mobile ad-hoc networks.",
                "In our case, we elected to examine JMS, as one of the most widely known MOM systems.",
                "In the latter part of this paper, we explore the limitations of our results and describe the plans we have to take the work further. 2.",
                "MESSAGE ORIENTED MIDDLEWARE AND JAVA MESSAGE SERVICE (JMS) Message-oriented middleware systems support communication between distributed components via message-passing: the sender sends a message to identified queues, which usually reside on a server.",
                "A receiver retrieves the message from the queue at a different time and may acknowledge the reply using the same asynchronous mechanism.",
                "Message-oriented middleware thus supports asynchronous communication in a very natural way, achieving de-coupling of senders and receivers.",
                "A sender is able to continue processing as soon as the middleware has accepted the message; eventually, the receiver will send an acknowledgment message and the sender will be able to collect it at a convenient time.",
                "However, given the way they are implemented, these middleware systems usually require resource-rich devices, especially in terms of memory and disk space, where persistent queues of messages that have been received but not yet processed, are stored.",
                "Sun Java Message Service [5], IBM WebSphere MQ [6], Microsoft MSMQ [12] are examples of very successful message-oriented middleware for traditional distributed systems.",
                "The Java Messaging Service (JMS) is a collection of interfaces for asynchronous communication between distributed components.",
                "It provides a common way for Java programs to create, send and receive messages.",
                "JMS users are usually referred to as clients.",
                "The JMS specification further defines providers as the components in charge of implementing the messaging system and providing the administrative and control functionality (i.e., persistence and reliability) required by the system.",
                "Clients can send and receive messages, asynchronously, through the JMS provider, which is in charge of the delivery and, possibly, of the persistence of the messages.",
                "There are two types of communication supported: point to point and publish-subscribe models.",
                "In the point to point model, hosts send messages to queues.",
                "Receivers can be registered with some specific queues, and can asynchronously retrieve the messages and then acknowledge them.",
                "The publish-subscribe model is based on the use of topics that can be subscribed to by clients.",
                "Messages are sent to topics by other clients and are then received in an asynchronous mode by all the subscribed clients.",
                "Clients learn about the available topics and queues through Java Naming and Directory Interface (JNDI) [14].",
                "Queues and topics are created by an administrator on the provider and are registered with the JNDI interface for look-up.",
                "In the next section, we introduce the challenges of mobile networks, and show how JMS can be adapted to cope with these requirements. 3.",
                "JMS FOR MOBILE COMPUTING Mobile networks vary very widely in their characteristics, from nomadic networks in which modes relocate whilst offline through to ad-hoc networks in which modes move freely and in which there is no infrastructure.",
                "Mobile ad-hoc networks are most generally applicable in situations where survivability and instant deployability are key: most notably in military applications and disaster relief.",
                "In between these two types of mobile networks, there are, however, a number of possible heterogeneous combinations, where nomadic and ad-hoc paradigms are used to interconnect totally unwired areas to more structured networks (such as a LAN or the Internet).",
                "Whilst the JMS specification has been extensively implemented and used in traditional distributed systems, adaptations for mobile environments have been proposed only recently.",
                "The challenges of porting JMS to mobile settings are considerable; however, in view of its widespread acceptance and use, there are considerable advantages in allowing the adaptation of existing applications to mobile environments and in allowing the interoperation of applications in the wired and wireless regions of a network.",
                "In [10], JMS was adapted to a nomadic mobile setting, where mobile hosts can be JMS clients and communicate through the JMS provider that, however, sits on a backbone network, providing reliability and persistence.",
                "The client prototype presented in [10] is very lightweight, due to the delegation of all the heavyweight functionality to the Middleware for Pervasive and ad-hoc Computing 122 provider on the wired network.",
                "However, this approach is somewhat limited in terms of widespread applicability and scalability as a consequence of the concentration of functionality in the wired portion of the network.",
                "If JMS is to be adapted to completely ad-hoc environments, where no fixed infrastructure is available, and where nodes change location and status very dynamically, more issues must be taken into consideration.",
                "Firstly, discovery needs to use a resilient but distributed model: in this extremely dynamic environment, static solutions are unacceptable.",
                "As discussed in Section 2, a JMS administrator defines queues and topics on the provider.",
                "Clients can then learn about them using the Java Naming and Directory Interface (JNDI).",
                "However, due to the way JNDI is designed, a JNDI node (or more than one) needs to be in reach in order to obtain a binding of a name to an address (i.e., knowing where a specific queue/topic is).",
                "In mobile ad-hoc environments, the discovery process cannot assume the existence of a fixed set of discovery servers that are always reachable, as this would not match the dynamicity of ad-hoc networks.",
                "Secondly, a JMS Provider, as suggested by the JMS specification, also needs to be reachable by each node in the network, in order to communicate.",
                "This assumes a very centralised architecture, which again does not match the requirements of a mobile ad-hoc setting, in which nodes may be moving and sparse: a more distributed and dynamic solution is needed.",
                "Persistence is, however, essential functionality in asynchronous communication environments as hosts are, by definition, connected at different times.",
                "In the following section, we will discuss our experience in designing and implementing JMS for mobile ad-hoc networks. 4.",
                "JMSFOR MOBILE ad-hoc NETWORKS 4.1 Adaptation of JMS for Mobile ad-hoc Networks Developing applications for mobile networks is yet more challenging: in addition to the same considerations as for infrastructured wireless environments, such as the limited device capabilities and power constraints, there are issues of rate of change of network connectivity, and the lack of a static routing infrastructure.",
                "Consequently, we now describe an initial attempt to adapt the JMS specification to target the particular requirements related to ad-hoc scenarios.",
                "As discussed in Section 3, a JMS application can use either the point to point and the publish-subscribe styles of messaging.",
                "Point to Point Model The point to point model is based on the concept of queues, that are used to enable asynchronous communication between the producer of a message and possible different consumers.",
                "In our solution, the location of queues is determined by a negotiation process that is application dependent.",
                "For example, let us suppose that it is possible to know a priori, or it is possible to determine dynamically, that a certain host is the receiver of the most part of messages sent to a particular queue.",
                "In this case, the optimum location of the queue may well be on this particular host.",
                "In general, it is worth noting that, according to the JMS specification and suggested design patterns, it is common and preferable for a client to have all of its messages delivered to a single queue.",
                "Queues are advertised periodically to the hosts that are within transmission range or that are reachable by means of the underlying synchronous communication protocol, if provided.",
                "It is important to note that, at the middleware level, it is logically irrelevant whether or not the network layer implements some form of ad-hoc routing (though considerably more efficient if it does); the middleware only considers information about which nodes are actively reachable at any point in time.",
                "The hosts that receive advertisement messages add entries to their JNDI registry.",
                "Each entry is characterized by a lease (a mechanism similar to that present in Jini [15]).",
                "A lease represents the time of validity of a particular entry.",
                "If a lease is not refreshed (i.e, its life is not extended), it can expire and, consequently, the entry is deleted from the registry.",
                "In other words, the host assumes that the queue will be unreachable from that point in time.",
                "This may be caused, for example, if a host storing the queue becomes unreachable.",
                "A host that initiates a discovery process will find the topics and the queues present in its connected portion of the network in a straightforward manner.",
                "In order to deliver a message to a host that is not currently in reach1 , we use an asynchronous epidemic routing protocol that will be discussed in detail in Section 4.2.",
                "If two hosts are in the same cloud (i.e., a connected path exists between them), but no synchronous protocol is available, the messages are sent using the epidemic protocol.",
                "In this case, the delivery latency will be low as a result of the rapidity of propagation of the infection in the connected cloud (see also the simulation results in Section 5).",
                "Given the existence of an epidemic protocol, the discovery mechanism consists of advertising the queues to the hosts that are currently unreachable using analogous mechanisms.",
                "Publish-Subscribe Model In the publish-subscribe model, some of the hosts are similarly designated to hold topics and store subscriptions, as before.",
                "Topics are advertised through the registry in the same way as are queues, and a client wishing to subscribe to a topic must register with the client holding the topic.",
                "When a client wishes to send a message to the topic list, it sends it to the topic holder (in the same way as it would send a message to a queue).",
                "The topic holder then forwards the message to all subscribers, using the synchronous protocol if possible, the epidemic protocol otherwise.",
                "It is worth noting that we use a single message with multiple recipients, instead of multiple messages with multiple recipients.",
                "When a message is delivered to one of the subscribers, this recipient is deleted from the list.",
                "In order to delete the other possible replicas, we employ acknowledgment messages (discussed in Section 4.4), returned in the same way as a normal message.",
                "We have also adapted the concepts of durable and non durable subscriptions for ad-hoc settings.",
                "In fixed platforms, durable subscriptions are maintained during the disconnections of the clients, whether these are intentional or are the result of failures.",
                "In traditional systems, while a durable subscriber is disconnected from the server, it is responsible for storing messages.",
                "When the durable subscriber reconnects, the server sends it all unexpired messages.",
                "The problem is that, in our scenario, disconnections are the norm 1 In theory, it is not possible to send a message to a peer that has never been reachable in the past, since there can be no entry present in the registry.",
                "However, to overcome this possible limitation, we provide a primitive through which information can be added to the registry without using the normal channels. 123 Middleware 2004 Companion rather than the exception.",
                "In other words, we cannot consider disconnections as failures.",
                "For these reasons, we adopt a slightly different semantics.",
                "With respect to durable subscriptions, if a subscriber becomes disconnected, notifications are not stored but are sent using the epidemic protocol rather than the synchronous protocol.",
                "In other words, durable notifications remain valid during the possible disconnections of the subscriber.",
                "On the other hand, if a non-durable subscriber becomes disconnected, its subscription is deleted; in other words, during disconnections, notifications are not sent using the epidemic protocol but exploit only the synchronous protocol.",
                "If the topic becomes accessible to this host again, it must make another subscription in order to receive the notifications.",
                "Unsubscription messages are delivered in the same way as are subscription messages.",
                "It is important to note that durable subscribers have explicitly to unsubscribe from a topic in order to stop the notification process; however, all durable subscriptions have a predefined expiration time in order to cope with the cases of subscribers that do not meet again because of their movements or failures.",
                "This feature is clearly provided to limit the number of the unnecessary messages sent around the network. 4.2 Message Delivery using Epidemic Routing In this section, we examine one possible mechanism that will allow the delivery of messages in a partially connected network.",
                "The mechanism we discuss is intended for the purposes of demonstrating feasibility; more efficient communication mechanisms for this environment are themselves complex, and are the subject of another paper [13].",
                "The asynchronous message delivery described above is based on a typical pure epidemic-style routing protocol [16].",
                "A message that needs to be sent is replicated on each host in reach.",
                "In this way, copies of the messages are quickly spread through connected networks, like an infection.",
                "If a host becomes connected to another cloud of mobile nodes, during its movement, the message spreads through this collection of hosts.",
                "Epidemic-style replication of data and messages has been exploited in the past in many fields starting with the distributed database systems area [2].",
                "Within epidemic routing, each host maintains a buffer containing the messages that it has created and the replicas of the messages generated by the other hosts.",
                "To improve the performance, a hash-table indexes the content of the buffer.",
                "When two hosts connect, the host with the smaller identifier initiates a so-called anti-entropy session, sending a list containing the unique identifiers of the messages that it currently stores.",
                "The other host evaluates this list and sends back a list containing the identifiers it is storing that are not present in the other host, together with the messages that the other does not have.",
                "The host that has started the session receives the list and, in the same way, sends the messages that are not present in the other host.",
                "Should buffer overflow occur, messages are dropped.",
                "The reliability offered by this protocol is typically best effort, since there is no guarantee that a message will eventually be delivered to its recipient.",
                "Clearly, the delivery ratio of the protocol increases proportionally to the maximum allowed delay time and the buffer size in each host (interesting simulation results may be found in [16]). 4.3 Adaptation of the JMS Message Model In this section, we will analyse the aspects of our adaptation of the specification related to the so-called JMS Message Model [5].",
                "According to this, JMS messages are characterised by some properties defined using the header field, which contains values that are used by both clients and providers for their delivery.",
                "The aspects discussed in the remainder of this section are valid for both models (point to point and publish-subscribe).",
                "A JMS message can be persistent or non-persistent.",
                "According to the JMS specification, persistent messages must be delivered with a higher degree of reliability than the nonpersistent ones.",
                "However, it is worth noting that it is not possible to ensure once-and-only-once reliability for persistent messages as defined in the specification, since, as we discussed in the previous subsection, the underlying epidemic protocol can guarantee only best-effort delivery.",
                "However, clients maintain a list of the identifiers of the recently received messages to avoid the delivery of message duplicates.",
                "In other words, we provide the applications with at-mostonce reliability for both types of messages.",
                "In order to implement different levels of reliability, EMMA treats persistent and non-persistent messages differently, during the execution of the anti-entropy epidemic protocol.",
                "Since the message buffer space is limited, persistent messages are preferentially replicated using the available free space.",
                "If this is insufficient and non-persistent messages are present in the buffer, these are replaced.",
                "Only the successful deliveries of the persistent messages are notified to the senders.",
                "According to the JMS specification, it is possible to assign a priority to each message.",
                "The messages with higher priorities are delivered in a preferential way.",
                "As discussed above, persistent messages are prioritised above the non-persistent ones.",
                "Further selection is based on their priorities.",
                "Messages with higher priorities are treated in a preferential way.",
                "In fact, if there is not enough space to replicate all the persistent messages, a mechanism based on priorities is used to delete and replicate non-persistent messages (and, if necessary, persistent messages).",
                "Messages are deleted from the buffers using the expiration time value that can be set by senders.",
                "This is a way to free space in the buffers (one preferentially deletes older messages in cases of conflict); to eliminate stale replicas in the system; and to limit the time for which destinations must hold message identifiers to dispose of duplicates. 4.4 Reliability and Acknowledgment Mechanisms As already discussed, at-most-once message delivery is the best that can be achieved in terms of delivery semantics in partially connected ad-hoc settings.",
                "However, it is possible to improve the reliability of the system with efficient acknowledgment mechanisms.",
                "EMMA provides a mechanism for failure notification to applications if the acknowledgment is not received within a given timeout (that can be configured by application developers).",
                "This mechanism is the one that distinguishes the delivery of persistent and non-persistent messages in our JMS implementation: the deliveries of the former are notified to the senders, whereas the latter are not.",
                "We use acknowledgment messages not only to inform senders about the successful delivery of messages but also to delete the replicas of the delivered messages that are still present in the network.",
                "Each host maintains a list of the messages Middleware for Pervasive and ad-hoc Computing 124 successfully delivered that is updated as part of the normal process of information exchange between the hosts.",
                "The lists are exchanged during the first steps of the anti-entropic epidemic protocol with a certain predefined frequency.",
                "In the case of messages with multiple recipients, a list of the actual recipients is also stored.",
                "When a host receives the list, it checks its message buffer and updates it according to the following rules: (1) if a message has a single recipient and it has been delivered, it is deleted from the buffer; (2) if a message has multiple recipients, the identifiers of the delivered hosts are deleted from the associated list of recipients.",
                "If the resulting length of the list of recipients is zero, the message is deleted from the buffer.",
                "These lists have, clearly, finite dimensions and are implemented as circular queues.",
                "This simple mechanism, together with the use of expiration timestamps, guarantees that the old acknowledgment notifications are deleted from the system after a limited period of time.",
                "In order to improve the reliability of EMMA, a design mechanism for intelligent replication of queues and topics based on the context information could be developed.",
                "However this is not yet part of the current architecture of EMMA. 5.",
                "IMPLEMENTATION AND PRELIMINARY EVALUATION We implemented a prototype of our platform using the J2ME Personal Profile.",
                "The size of the executable is about 250KB including the JMS 1.1 jar file; this is a perfectly acceptable figure given the available memory of the current mobile devices on the market.",
                "We tested our prototype on HP IPaq PDAs running Linux, interconnected with WaveLan, and on a number of laptops with the same network interface.",
                "We also evaluated the middleware platform using the OMNET++ discrete event simulator [17] in order to explore a range of mobile scenarios that incorporated a more realistic number of hosts than was achievable experimentally.",
                "More specifically, we assessed the performance of the system in terms of delivery ratio and average delay, varying the density of population and the buffer size, and using persistent and non-persistent messages with different priorities.",
                "The simulation results show that the EMMAs performance, in terms of delivery ratio and delay of persistent messages with higher priorities, is good.",
                "In general, it is evident that the delivery ratio is strongly related to the correct dimensioning of the buffers to the maximum acceptable delay.",
                "Moreover, the epidemic algorithms are able to guarantee a high delivery ratio if one evaluates performance over a time interval sufficient for the dissemination of the replicas of messages (i.e., the infection spreading) in a large portion of the ad-hoc network.",
                "One consequence of the dimensioning problem is that scalability may be seriously impacted in peer-to-peer <br>middleware for mobile computing</br> due to the resource poverty of the devices (limited memory to store temporarily messages) and the number of possible interconnections in ad-hoc settings.",
                "What is worse is that common forms of commercial and social organisation (six degrees of separation) mean that even modest TTL values on messages will lead to widespread flooding of epidemic messages.",
                "This problem arises because of the lack of intelligence in the epidemic protocol, and can be addressed by selecting carrier nodes for messages with greater care.",
                "The details of this process are, however, outside the scope of this paper (but may be found in [13]) and do not affect the foundation on which the EMMA middleware is based: the ability to deliver messages asynchronously. 6.",
                "CRITICAL VIEW OF THE STATE OF THE ART The design of middleware platforms for mobile computing requires researchers to answer new and fundamentally different questions; simply assuming the presence of wired portions of the network on which centralised functionality can reside is not generalisable.",
                "Thus, it is necessary to investigate novel design principles and to devise architectural patterns that differ from those traditionally exploited in the design of middleware for fixed systems.",
                "As an example, consider the recent cross-layering trend in ad-hoc networking [1].",
                "This is a way of re-thinking software systems design, explicitly abandoning the classical forms of layering, since, although this separation of concerns afford portability, it does so at the expense of potential efficiency gains.",
                "We believe that it is possible to view our approach as an instance of cross-layering.",
                "In fact, we have added the epidemic network protocol at middleware level and, at the same time, we have used the existing synchronous network protocol if present both in delivering messages (traditional layering) and in informing the middleware about when messages may be delivered by revealing details of the forwarding tables (layer violation).",
                "For this reason, we prefer to consider them jointly as the communication layer of our platform together providing more efficient message delivery.",
                "Another interesting aspect is the exploitation of context and system information to improve the performance of mobile middleware platforms.",
                "Again, as a result of adopting a cross-layering methodology, we are able to build systems that gather information from the underlying operating system and communication components in order to allow for adaptation of behaviour.",
                "We can summarise this conceptual design approach by saying that middleware platforms must be not only context-aware (i.e., they should be able to extract and analyse information from the surrounding context) but also system-aware (i.e., they should be able to gather information from the software and hardware components of the mobile system).",
                "A number of middleware systems have been developed to support ad-hoc networking with the use of asynchronous communication (such as LIME, XMIDDLE, STEAM [11]).",
                "In particular, the STEAM platform is an interesting example of event-based middleware for ad-hoc networks, providing location-aware message delivery and an effective solution for event filtering.",
                "A discussion of JMS, and its mobile realisation, has already been conducted in Sections 4 and 2.",
                "The Swiss company Softwired has developed the first JMS <br>middleware for mobile computing</br>, called iBus Mobile [10].",
                "The main components of this typically infrastructure-based architecture are the JMS provider, the so-called mobile JMS gateway, which is deployed on a fixed host and a lightweight JMS client library.",
                "The gateway is used for the communication between the application server and mobile hosts.",
                "The gateway is seen by the JMS provider as a normal JMS client.",
                "The JMS provider can be any JMS-enabled application server, such as BEA Weblogic.",
                "Pronto [19] is an example of mid125 Middleware 2004 Companion dleware system based on messaging that is specifically designed for mobile environments.",
                "The platform is composed of three classes of components: mobile clients implementing the JMS specification, gateways that control traffic, guaranteeing efficiency and possible user customizations using different plug-ins and JMS servers.",
                "Different configurations of these components are possible; with respect to mobile ad hoc networks applications, the most interesting is Serverless JMS.",
                "The aim of this configuration is to adapt JMS to a decentralized model.",
                "The publish-subscribe model exploits the efficiency and the scalability of the underlying IP multicast protocol.",
                "Unreliable and reliable message delivery services are provided: reliability is provided through a negative acknowledgment-based protocol.",
                "Pronto represents a good solution for infrastructure-based mobile networks but it does not adequately target ad-hoc settings, since mobile nodes rely on fixed servers for the exchange of messages.",
                "Other MOM implemented for mobile environments exist; however, they are usually straightforward extensions of existing middleware [8].",
                "The only implementation of MOM specifically designed for mobile ad-hoc networks was developed at the University of Newcastle [18].",
                "This work is again a JMS adaptation; the focus of that implementation is on group communication and the use of application level routing algorithms for topic delivery of messages.",
                "However, there are a number of differences in the focus of our work.",
                "The importance that we attribute to disconnections makes persistence a vital requirement for any middleware that needs to be used in mobile ad-hoc networks.",
                "The authors of [18] signal persistence as possible future work, not considering the fact that routing a message to a non-connected host will result in delivery failure.",
                "This is a remarkable limitation in mobile settings where unpredictable disconnections are the norm rather than the exception. 7.",
                "ROADMAP AND CONCLUSIONS Asynchronous communication is a useful communication paradigm for mobile ad-hoc networks, as hosts are allowed to come, go and pick up messages when convenient, also taking account of their resource availability (e.g., power, connectivity levels).",
                "In this paper we have described the state of the art in terms of MOM for mobile systems.",
                "We have also shown a proof of concept adaptation of JMS to the extreme scenario of partially connected mobile ad-hoc networks.",
                "We have described and discussed the characteristics and differences of our solution with respect to traditional JMS implementations and the existing adaptations for mobile settings.",
                "However, trade-offs between application-level routing and resource usage should also be investigated, as mobile devices are commonly power/resource scarce.",
                "A key limitation of this work is the poorly performing epidemic algorithm and an important advance in the practicability of this work requires an algorithm that better balances the needs of efficiency and message delivery probability.",
                "We are currently working on algorithms and protocols that, exploiting probabilistic and statistical techniques on the basis of small amounts of exchanged information, are able to improve considerably the efficiency in terms of resources (memory, bandwidth, etc) and the reliability of our middleware platform [13].",
                "One futuristic research development, which may take these ideas of adaptation of messaging middleware for mobile environments further is the introduction of more mobility oriented communication extensions, for instance the support of geocast (i.e., the ability to send messages to specific geographical areas). 8.",
                "REFERENCES [1] M. Conti, G. Maselli, G. Turi, and S. Giordano.",
                "Cross-layering in Mobile ad-hoc Network Design.",
                "IEEE Computer, 37(2):48-51, February 2004. [2] A. Demers, D. Greene, C. Hauser, W. Irish, J. Larson, S. Shenker, H. Sturgis, D. Swinehart, and D. Terry.",
                "Epidemic Algorithms for Replicated Database Maintenance.",
                "In Sixth Symposium on Principles of Distributed Computing, pages 1-12, August 1987. [3] A. Doria, M. Uden, and D. P. Pandey.",
                "Providing connectivity to the Saami nomadic community.",
                "In Proceedings of the Second International Conference on Open Collaborative Design for Sustainable Innovation, December 2002. [4] M. Haahr, R. Cunningham, and V. Cahill.",
                "Supporting CORBA applications in a Mobile Environment.",
                "In 5th International Conference on Mobile Computing and Networking (MOBICOM99), pages 36-47.",
                "ACM, August 1999. [5] M. Hapner, R. Burridge, R. Sharma, J. Fialli, and K. Stout.",
                "Java Message Service Specification Version 1.1.",
                "Sun Microsystems, Inc., April 2002. http://java.sun.com/products/jms/. [6] J. Hart.",
                "WebSphere MQ: Connecting your applications without complex programming.",
                "IBM WebSphere Software White Papers, 2003. [7] S. Hayward and M. Pezzini.",
                "Marrying Middleware and Mobile Computing.",
                "Gartner Group Research Report, September 2001. [8] IBM.",
                "WebSphere MQ EveryPlace Version 2.0, November 2002. http://www-3.ibm.com/software/integration/wmqe/. [9] ITU.",
                "Connecting remote communities.",
                "Documents of the World Summit on Information Society, 2003. http://www.itu.int/osg/spu/wsis-themes. [10] S. Maffeis.",
                "Introducing Wireless JMS.",
                "Softwired AG, www.sofwired-inc.com, 2002. [11] C. Mascolo, L. Capra, and W. Emmerich.",
                "<br>middleware for mobile computing</br>.",
                "In E. Gregori, G. Anastasi, and S. Basagni, editors, Advanced Lectures on Networking, volume 2497 of Lecture Notes in Computer Science, pages 20-58.",
                "Springer Verlag, 2002. [12] Microsoft.",
                "Microsoft Message Queuing (MSMQ) Version 2.0 Documentation. [13] M. Musolesi, S. Hailes, and C. Mascolo.",
                "Adaptive routing for intermittently connected mobile ad-hoc networks.",
                "Technical report, UCL-CS Research Note, July 2004.",
                "Submitted for Publication. [14] Sun Microsystems.",
                "Java Naming and Directory Interface (JNDI) Documentation Version 1.2. 2003. http://java.sun.com/products/jndi/. [15] Sun Microsystems.",
                "Jini Specification Version 2.0, 2003. http://java.sun.com/products/jini/. [16] A. Vahdat and D. Becker.",
                "Epidemic routing for Partially Connected ad-hoc Networks.",
                "Technical Report CS-2000-06, Department of Computer Science, Duke University, 2000. [17] A. Vargas.",
                "The OMNeT++ discrete event simulation system.",
                "In Proceedings of the European Simulation Multiconference (ESM2001), Prague, June 2001. [18] E. Vollset, D. Ingham, and P. Ezhilchelvan.",
                "JMS on Mobile ad-hoc Networks.",
                "In Personal Wireless Communications (PWC), pages 40-52, Venice, September 2003. [19] E. Yoneki and J. Bacon.",
                "Pronto: Mobilegateway with publish-subscribe paradigm over wireless network.",
                "Technical Report 559, University of Cambridge, Computer Laboratory, February 2003.",
                "Middleware for Pervasive and ad-hoc Computing 126"
            ],
            "original_annotated_samples": [
                "One consequence of the dimensioning problem is that scalability may be seriously impacted in peer-to-peer <br>middleware for mobile computing</br> due to the resource poverty of the devices (limited memory to store temporarily messages) and the number of possible interconnections in ad-hoc settings.",
                "The Swiss company Softwired has developed the first JMS <br>middleware for mobile computing</br>, called iBus Mobile [10].",
                "<br>middleware for mobile computing</br>."
            ],
            "translated_annotated_samples": [
                "Una consecuencia del problema de dimensionamiento es que la escalabilidad puede verse seriamente afectada en middleware peer-to-peer para computación móvil debido a la escasez de recursos de los dispositivos (memoria limitada para almacenar temporalmente mensajes) y al número de posibles interconexiones en entornos ad-hoc.",
                "La empresa suiza Softwired ha desarrollado el primer middleware JMS para computación móvil, llamado iBus Mobile [10].",
                "Middleware para Computación Móvil."
            ],
            "translated_text": "Adaptando Middleware de Mensajería Asincrónica a Redes Ad-hoc Mirco Musolesi Dept. Las características de los entornos móviles, con la posibilidad de desconexiones frecuentes y ancho de banda fluctuante, han obligado a replantear el middleware tradicional. En particular, los paradigmas de comunicación síncrona a menudo empleados en middleware estándar no parecen ser particularmente adecuados para entornos ad-hoc, en los que ni siquiera se puede asumir la disponibilidad intermitente de una red troncal. En cambio, la comunicación asincrónica parece ser un paradigma generalmente más adecuado para este tipo de entornos. Se ha desarrollado y utilizado middleware orientado a mensajes para sistemas tradicionales con el fin de proporcionar un paradigma de comunicación asíncrona para sistemas distribuidos, y, recientemente, también para algunos sistemas específicos de computación móvil. En este artículo, presentamos nuestra experiencia en el diseño, implementación y evaluación de EMMA (Middleware de Mensajería Epidémica para redes ad-hoc), una adaptación del Servicio de Mensajes Java (JMS) para entornos móviles ad-hoc. Discutimos en detalle los desafíos de diseño y algunas posibles soluciones, mostrando un ejemplo concreto de la viabilidad y adecuación de la aplicación del paradigma asíncrono en este contexto y delineando un plan de investigación para los próximos años. Categorías y Descriptores de Asignaturas C.2.4 [Redes de Computadoras-Comunicación]: Sistemas Distribuidos-Aplicaciones Distribuidas; C.2.1 [Arquitectura y Diseño de Redes]: Comunicación Inalámbrica Términos Generales DISEÑO, ALGORITMOS 1. INTRODUCCIÓN Con la creciente popularidad de los dispositivos móviles y su amplia adopción, existe una clara necesidad de permitir el desarrollo de un amplio espectro de aplicaciones que operen de manera efectiva en dicho entorno. Lamentablemente, esto está lejos de ser simple: los dispositivos móviles son cada vez más heterogéneos en cuanto a capacidades de procesamiento, tamaño de memoria, capacidad de batería e interfaces de red. Cada una de estas configuraciones tiene características sustancialmente diferentes que son estáticamente distintas, por ejemplo, hay una gran diferencia en la capacidad entre un mote de Berkeley y un portátil equipado con 802.11g, y que varían dinámicamente, como en situaciones de ancho de banda fluctuante y conectividad intermitente. Los entornos móviles ad hoc tienen un elemento adicional de complejidad en que son completamente descentralizados. Para poder desarrollar aplicaciones para entornos tan complejos, es esencial contar con una forma adecuada de middleware si se busca lograr un desarrollo rentable. En este artículo, examinamos uno de los aspectos fundamentales de middleware para entornos móviles ad-hoc: el de los primitivos de comunicación. Tradicionalmente, los primitivos de middleware más utilizados para la comunicación asumen la presencia simultánea de ambos puntos finales en una red, ya que la estabilidad y la ubicuidad de la infraestructura de redes no es una suposición irrazonable para la mayoría de los entornos cableados. En otras palabras, la mayoría de los paradigmas de comunicación son síncronos: middleware orientado a objetos como CORBA y Java RMI son ejemplos típicos de middleware basado en comunicación síncrona. En los últimos años, ha habido un creciente interés en plataformas basadas en paradigmas de comunicación asincrónica, como los sistemas de publicación-suscripción: estos han sido explotados con mucho éxito donde existe asincronía a nivel de aplicación. De acuerdo con un informe de mercado de Gartner [7]: Dada la popularidad, escalabilidad, flexibilidad y afinidad con arquitecturas móviles e inalámbricas de los middlewares orientados a mensajes (MOM), para el año 2004, es probable que MOM se convierta en la forma dominante de middleware de comunicación para vincular aplicaciones móviles y empresariales (probabilidad del 0.7)... Además, en sistemas ad-hoc móviles, la probabilidad de fragmentación de la red significa que la comunicación síncrona puede resultar impracticable en cualquier caso, lo que da lugar a situaciones en las que el tráfico asincrónico tolerante a retrasos es la única forma de tráfico que podría ser admitida. El middleware para entornos ad-hoc móviles debe, por lo tanto, admitir primitivas de comunicación semi-síncronas o completamente asíncronas si se quiere evitar limitaciones sustanciales en su utilidad. Además del desafío intelectual que implica apoyar este modelo, este trabajo también es interesante porque existen varios ámbitos de aplicación práctica al permitir la comunicación entre comunidades en áreas subdesarrolladas del mundo. Por lo tanto, por ejemplo, proyectos que se han llevado a cabo para ayudar a poblaciones que viven en lugares remotos del mundo como Laponia o en áreas pobres que carecen de infraestructura de conectividad fija. Ha habido intentos de proporcionar middleware móvil con estas propiedades, incluyendo STEAM, LIME, XMIDDLE, Bayou (consulte [11] para una revisión más completa del middleware móvil). Estos modelos difieren considerablemente de los middleware tradicionales existentes en cuanto a los primitivos proporcionados. Además, algunos de ellos fallan en proporcionar una solución para los verdaderos escenarios ad-hoc. Si el éxito proyectado de MOM se convierte en algo parecido a la realidad, habrá muchos programadores con experiencia en ello. La solución ideal al problema del middleware para sistemas ad-hoc es, entonces, permitir a los programadores utilizar los mismos paradigmas y modelos presentados por formas comunes de MOM y asegurar que estos paradigmas sean soportables dentro del entorno móvil. Este enfoque tiene claras ventajas al permitir que las aplicaciones desarrolladas en plataformas de middleware estándar se desplieguen fácilmente en dispositivos móviles. De hecho, algunas investigaciones ya han llevado a la adaptación de plataformas de middleware tradicionales a entornos móviles, principalmente para proporcionar integración entre dispositivos móviles y redes fijas existentes en un entorno nómada (es decir, mixto) [4]. En lo que respecta al middleware orientado a mensajes, las implementaciones actuales, sin embargo, asumen la existencia de una red troncal a la que los hosts móviles se conectan de vez en cuando mientras están en itinerancia [10], o asumen que los nodos siempre son de alguna manera accesibles a través de un camino [18]. No se ha intentado ninguna adaptación a escenarios heterogéneos o completamente ad hoc, con desconexiones frecuentes y nubes periódicamente aisladas de hosts. En el resto de este documento describimos un intento inicial de adaptar middleware orientado a mensajes para que se ajuste a dispositivos móviles y, más específicamente, a redes móviles ad-hoc. En nuestro caso, elegimos examinar JMS, como uno de los sistemas MOM más conocidos. En la última parte de este documento, exploramos las limitaciones de nuestros resultados y describimos los planes que tenemos para llevar a cabo el trabajo más adelante. Los sistemas de middleware orientados a mensajes y el Servicio de Mensajes de Java (JMS) admiten la comunicación entre componentes distribuidos a través del paso de mensajes: el remitente envía un mensaje a colas identificadas, que generalmente residen en un servidor. Un receptor recupera el mensaje de la cola en un momento diferente y puede confirmar la respuesta utilizando el mismo mecanismo asíncrono. La middleware orientada a mensajes soporta la comunicación asíncrona de una manera muy natural, logrando el desacoplamiento de emisores y receptores. Un remitente puede continuar procesando tan pronto como el middleware haya aceptado el mensaje; eventualmente, el receptor enviará un mensaje de confirmación y el remitente podrá recogerlo en un momento conveniente. Sin embargo, dado la forma en que están implementados, estos sistemas de middleware suelen requerir dispositivos con recursos abundantes, especialmente en términos de memoria y espacio en disco, donde se almacenan colas persistentes de mensajes que han sido recibidos pero aún no procesados. Sun Java Message Service [5], IBM WebSphere MQ [6], Microsoft MSMQ [12] son ejemplos de middleware orientado a mensajes muy exitosos para sistemas distribuidos tradicionales. El Servicio de Mensajería de Java (JMS) es una colección de interfaces para la comunicación asincrónica entre componentes distribuidos. Proporciona una forma común para que los programas de Java creen, envíen y reciban mensajes. Los usuarios de JMS suelen ser referidos como clientes. La especificación JMS define además a los proveedores como los componentes encargados de implementar el sistema de mensajería y proporcionar la funcionalidad administrativa y de control (es decir, persistencia y confiabilidad) requerida por el sistema. Los clientes pueden enviar y recibir mensajes, de forma asincrónica, a través del proveedor JMS, que se encarga de la entrega y, posiblemente, de la persistencia de los mensajes. Hay dos tipos de comunicación admitidos: modelos punto a punto y de publicación-suscripción. En el modelo punto a punto, los hosts envían mensajes a colas. Los receptores pueden ser registrados con algunas colas específicas, y pueden recuperar los mensajes de forma asíncrona para luego confirmar su recepción. El modelo de publicación-suscripción se basa en el uso de temas a los que los clientes pueden suscribirse. Los mensajes son enviados a los temas por otros clientes y luego son recibidos de forma asíncrona por todos los clientes suscritos. Los clientes aprenden sobre los temas y colas disponibles a través de la Interfaz de Nombres y Directorios de Java (JNDI) [14]. Las colas y los temas son creados por un administrador en el proveedor y se registran con la interfaz JNDI para su búsqueda. En la siguiente sección, presentamos los desafíos de las redes móviles y mostramos cómo JMS puede adaptarse para cumplir con estos requisitos. 3. JMS PARA COMPUTACIÓN MÓVIL Las redes móviles varían mucho en sus características, desde redes nómadas en las que los nodos se desplazan mientras están desconectados, hasta redes ad-hoc en las que los nodos se mueven libremente y no hay infraestructura. Las redes móviles ad-hoc son más comúnmente aplicables en situaciones donde la supervivencia y la capacidad de despliegue instantáneo son clave: especialmente en aplicaciones militares y de ayuda en casos de desastre. Entre estos dos tipos de redes móviles, sin embargo, existen una serie de posibles combinaciones heterogéneas, donde se utilizan paradigmas nómadas y ad-hoc para interconectar áreas totalmente inalámbricas con redes más estructuradas (como una LAN o Internet). Si bien la especificación JMS ha sido ampliamente implementada y utilizada en sistemas distribuidos tradicionales, las adaptaciones para entornos móviles han sido propuestas recientemente. Los desafíos de adaptar JMS a entornos móviles son considerables; sin embargo, dada su amplia aceptación y uso, existen ventajas considerables al permitir la adaptación de aplicaciones existentes a entornos móviles y al permitir la interoperabilidad de aplicaciones en las regiones cableadas e inalámbricas de una red. En [10], JMS se adaptó a un entorno móvil nómada, donde los hosts móviles pueden ser clientes de JMS y comunicarse a través del proveedor de JMS que, sin embargo, se encuentra en una red troncal, proporcionando fiabilidad y persistencia. El prototipo del cliente presentado en [10] es muy ligero, debido a la delegación de toda la funcionalidad pesada al proveedor Middleware para Computación Pervasive y ad-hoc 122 en la red cableada. Sin embargo, este enfoque es algo limitado en términos de aplicabilidad generalizada y escalabilidad como consecuencia de la concentración de funcionalidad en la parte cableada de la red. Si se quiere adaptar JMS a entornos completamente ad hoc, donde no haya infraestructura fija disponible y donde los nodos cambien de ubicación y estado de forma muy dinámica, se deben tener en cuenta más problemas. En primer lugar, el descubrimiento necesita utilizar un modelo resiliente pero distribuido: en este entorno extremadamente dinámico, las soluciones estáticas son inaceptables. Como se discute en la Sección 2, un administrador de JMS define colas y temas en el proveedor. Los clientes pueden entonces aprender sobre ellos utilizando la Interfaz de Nombres y Directorios de Java (JNDI). Sin embargo, debido a la forma en que está diseñado JNDI, es necesario que un nodo de JNDI (o más de uno) esté al alcance para obtener una vinculación de un nombre a una dirección (es decir, saber dónde se encuentra una cola o un tema específico). En entornos móviles ad-hoc, el proceso de descubrimiento no puede asumir la existencia de un conjunto fijo de servidores de descubrimiento que siempre sean accesibles, ya que esto no coincidiría con la dinámica de las redes ad-hoc. En segundo lugar, un Proveedor de JMS, como sugiere la especificación de JMS, también debe ser accesible para cada nodo en la red, para poder comunicarse. Esto asume una arquitectura muy centralizada, que nuevamente no coincide con los requisitos de un entorno ad-hoc móvil, en el que los nodos pueden estar en movimiento y dispersos: se necesita una solución más distribuida y dinámica. La persistencia es, sin embargo, una funcionalidad esencial en entornos de comunicación asincrónica, ya que los hosts están, por definición, conectados en momentos diferentes. En la siguiente sección, discutiremos nuestra experiencia en el diseño e implementación de JMS para redes móviles ad-hoc. 4. El desarrollo de aplicaciones para redes móviles es aún más desafiante: además de las mismas consideraciones que para entornos inalámbricos infraestructurados, como las limitadas capacidades de los dispositivos y las restricciones de energía, existen problemas relacionados con la velocidad de cambio de la conectividad de la red y la falta de una infraestructura de enrutamiento estática. En consecuencia, ahora describimos un intento inicial de adaptar la especificación JMS para satisfacer los requisitos particulares relacionados con escenarios ad-hoc. Como se discute en la Sección 3, una aplicación JMS puede utilizar tanto el estilo de mensajería punto a punto como el de publicación-suscripción. Modelo de punto a punto. El modelo de punto a punto se basa en el concepto de colas, que se utilizan para habilitar la comunicación asincrónica entre el productor de un mensaje y posibles consumidores diferentes. En nuestra solución, la ubicación de las colas se determina mediante un proceso de negociación que depende de la aplicación. Por ejemplo, supongamos que es posible saber a priori, o es posible determinar dinámicamente, que cierto host es el receptor de la mayor parte de los mensajes enviados a una cola particular. En este caso, la ubicación óptima de la cola bien podría estar en este host en particular. En general, vale la pena señalar que, según la especificación de JMS y los patrones de diseño sugeridos, es común y preferible que un cliente tenga todos sus mensajes entregados a una sola cola. Las colas se anuncian periódicamente a los anfitriones que se encuentran dentro del rango de transmisión o que son alcanzables mediante el protocolo de comunicación síncrona subyacente, si se proporciona. Es importante tener en cuenta que, a nivel de middleware, es lógicamente irrelevante si la capa de red implementa alguna forma de enrutamiento ad-hoc (aunque considerablemente más eficiente si lo hace); el middleware solo considera información sobre qué nodos son accesibles activamente en cualquier momento. Los hosts que reciben mensajes publicitarios agregan entradas a su registro JNDI. Cada entrada se caracteriza por un arrendamiento (un mecanismo similar al presente en Jini [15]). Un contrato de arrendamiento representa el tiempo de validez de una entrada particular. Si un arrendamiento no se renueva (es decir, su vida no se extiende), puede vencer y, en consecuencia, la entrada se elimina del registro. En otras palabras, el anfitrión asume que la cola será inaccesible a partir de ese momento. Esto puede ser causado, por ejemplo, si un host que almacena la cola se vuelve inaccesible. Un host que inicia un proceso de descubrimiento encontrará los temas y las colas presentes en su porción conectada de la red de manera directa. Para enviar un mensaje a un anfitrión que actualmente no está al alcance, utilizamos un protocolo de enrutamiento de epidemia asíncrono que se discutirá en detalle en la Sección 4.2. Si dos hosts están en la misma nube (es decir, existe un camino conectado entre ellos), pero no hay disponible un protocolo síncrono, los mensajes se envían utilizando el protocolo epidémico. En este caso, la latencia de entrega será baja como resultado de la rapidez de propagación de la infección en la nube conectada (ver también los resultados de la simulación en la Sección 5). Dado la existencia de un protocolo de epidemia, el mecanismo de descubrimiento consiste en publicitar las colas a los hosts que actualmente son inalcanzables utilizando mecanismos análogos. En el modelo de publicación-suscripción, algunos de los hosts son designados de manera similar para mantener temas y almacenar suscripciones, como antes. Los temas se anuncian a través del registro de la misma manera que las colas, y un cliente que desee suscribirse a un tema debe registrarse con el cliente que tiene el tema. Cuando un cliente desea enviar un mensaje a la lista de temas, lo envía al titular del tema (de la misma manera que enviaría un mensaje a una cola). El titular del tema luego reenvía el mensaje a todos los suscriptores, utilizando el protocolo síncrono si es posible, de lo contrario el protocolo epidémico. Vale la pena señalar que utilizamos un único mensaje con múltiples destinatarios, en lugar de múltiples mensajes con múltiples destinatarios. Cuando un mensaje es entregado a uno de los suscriptores, este destinatario es eliminado de la lista. Para eliminar las posibles réplicas restantes, empleamos mensajes de acuse de recibo (discutidos en la Sección 4.4), devueltos de la misma manera que un mensaje normal. También hemos adaptado los conceptos de suscripciones duraderas y no duraderas para entornos ad-hoc. En las plataformas fijas, las suscripciones duraderas se mantienen durante las desconexiones de los clientes, ya sean intencionales o resultado de fallas. En los sistemas tradicionales, cuando un suscriptor duradero se desconecta del servidor, es responsable de almacenar los mensajes. Cuando el suscriptor duradero se reconecta, el servidor le envía todos los mensajes no caducados. El problema es que, en nuestro escenario, las desconexiones son la norma. En teoría, no es posible enviar un mensaje a un par que nunca ha sido alcanzable en el pasado, ya que no puede haber ninguna entrada presente en el registro. Sin embargo, para superar esta posible limitación, proporcionamos un mecanismo a través del cual la información puede ser añadida al registro sin utilizar los canales normales. 123 Middleware 2004 Companion en lugar de la excepción. En otras palabras, no podemos considerar las desconexiones como fallos. Por estas razones, adoptamos una semántica ligeramente diferente. En lo que respecta a las suscripciones duraderas, si un suscriptor se desconecta, las notificaciones no se almacenan, sino que se envían utilizando el protocolo epidémico en lugar del protocolo síncrono. En otras palabras, las notificaciones duraderas siguen siendo válidas durante las posibles desconexiones del suscriptor. Por otro lado, si un suscriptor no duradero se desconecta, su suscripción se elimina; en otras palabras, durante las desconexiones, las notificaciones no se envían utilizando el protocolo epidémico, sino que solo se aprovecha el protocolo síncrono. Si el tema vuelve a estar accesible para este anfitrión, deberá realizar otra suscripción para recibir las notificaciones. Los mensajes de baja se entregan de la misma manera que los mensajes de suscripción. Es importante tener en cuenta que los suscriptores duraderos deben darse de baja explícitamente de un tema para detener el proceso de notificación; sin embargo, todas las suscripciones duraderas tienen un tiempo de expiración predefinido para hacer frente a los casos de suscriptores que no vuelven a conectarse debido a sus movimientos o fallos. Esta característica se proporciona claramente para limitar el número de mensajes innecesarios enviados por la red. 4.2 Entrega de mensajes utilizando enrutamiento epidémico En esta sección, examinamos un mecanismo posible que permitirá la entrega de mensajes en una red parcialmente conectada. El mecanismo que discutimos está destinado a demostrar viabilidad; los mecanismos de comunicación más eficientes para este entorno son complejos por sí mismos y son el tema de otro artículo [13]. La entrega de mensajes asincrónica descrita anteriormente se basa en un protocolo de enrutamiento de estilo epidémico puro típico [16]. Un mensaje que necesita ser enviado se replica en cada host al alcance. De esta manera, las copias de los mensajes se propagan rápidamente a través de redes conectadas, como una infección. Si un anfitrión se conecta a otra nube de nodos móviles durante su movimiento, el mensaje se propaga a través de esta colección de anfitriones. La replicación de datos y mensajes en estilo epidémico ha sido explotada en el pasado en muchos campos, comenzando por el área de sistemas de bases de datos distribuidas [2]. Dentro del enrutamiento epidémico, cada anfitrión mantiene un búfer que contiene los mensajes que ha creado y las réplicas de los mensajes generados por los otros anfitriones. Para mejorar el rendimiento, una tabla hash indexa el contenido del búfer. Cuando dos anfitriones se conectan, el anfitrión con el identificador más pequeño inicia una sesión de anti-entropía, enviando una lista que contiene los identificadores únicos de los mensajes que actualmente almacena. El otro anfitrión evalúa esta lista y envía de vuelta una lista que contiene los identificadores que está almacenando y que no están presentes en el otro anfitrión, junto con los mensajes que el otro no tiene. El anfitrión que ha iniciado la sesión recibe la lista y, de la misma manera, envía los mensajes que no están presentes en el otro anfitrión. En caso de producirse un desbordamiento de búfer, los mensajes se descartan. La fiabilidad ofrecida por este protocolo es generalmente de mejor esfuerzo, ya que no hay garantía de que un mensaje finalmente sea entregado a su destinatario. Claramente, la proporción de entrega del protocolo aumenta proporcionalmente al tiempo máximo de retraso permitido y al tamaño del búfer en cada host (pueden encontrarse resultados interesantes de simulación en [16]). 4.3 Adaptación del Modelo de Mensajes JMS En esta sección, analizaremos los aspectos de nuestra adaptación de la especificación relacionados con el llamado Modelo de Mensajes JMS [5]. Según esto, los mensajes JMS se caracterizan por algunas propiedades definidas utilizando el campo de encabezado, que contiene valores que son utilizados tanto por los clientes como por los proveedores para su entrega. Los aspectos discutidos en el resto de esta sección son válidos para ambos modelos (punto a punto y publicar-suscribir). Un mensaje JMS puede ser persistente o no persistente. Según la especificación de JMS, los mensajes persistentes deben entregarse con un grado de confiabilidad mayor que los no persistentes. Sin embargo, vale la pena señalar que no es posible garantizar la fiabilidad de una sola vez para mensajes persistentes según lo definido en la especificación, ya que, como discutimos en la subsección anterior, el protocolo epidémico subyacente solo puede garantizar la entrega de mejor esfuerzo. Sin embargo, los clientes mantienen una lista de los identificadores de los mensajes recibidos recientemente para evitar la entrega de mensajes duplicados. En otras palabras, proporcionamos a las aplicaciones una fiabilidad inmediata para ambos tipos de mensajes. Para implementar diferentes niveles de confiabilidad, EMMA trata de manera diferente los mensajes persistentes y no persistentes durante la ejecución del protocolo epidémico de anti-entropía. Dado que el espacio del búfer de mensajes es limitado, los mensajes persistentes se replican preferentemente utilizando el espacio libre disponible. Si esto es insuficiente y hay mensajes no persistentes presentes en el búfer, estos son reemplazados. Solo se notifican a los remitentes las entregas exitosas de los mensajes persistentes. Según la especificación de JMS, es posible asignar una prioridad a cada mensaje. Los mensajes con prioridades más altas se entregan de manera preferencial. Como se discutió anteriormente, los mensajes persistentes tienen prioridad sobre los no persistentes. La selección adicional se basa en sus prioridades. Los mensajes con prioridades más altas son tratados de manera preferencial. De hecho, si no hay suficiente espacio para replicar todos los mensajes persistentes, se utiliza un mecanismo basado en prioridades para eliminar y replicar los mensajes no persistentes (y, si es necesario, los mensajes persistentes). Los mensajes se eliminan de los buffers utilizando el valor de tiempo de expiración que puede ser establecido por los remitentes. Esta es una forma de liberar espacio en los búferes (se eliminan preferentemente los mensajes más antiguos en casos de conflicto); para eliminar réplicas obsoletas en el sistema; y para limitar el tiempo durante el cual los destinos deben mantener los identificadores de mensajes para desechar duplicados. Mecanismos de fiabilidad y de acuse de recibo Como ya se discutió, la entrega de mensajes como máximo una vez es lo mejor que se puede lograr en términos de semántica de entrega en entornos ad-hoc parcialmente conectados. Sin embargo, es posible mejorar la confiabilidad del sistema con mecanismos de acuse de recibo eficientes. EMMA proporciona un mecanismo de notificación de fallos a las aplicaciones si no se recibe el acuse de recibo dentro de un tiempo límite dado (que puede ser configurado por los desarrolladores de aplicaciones). Este mecanismo es el que distingue la entrega de mensajes persistentes y no persistentes en nuestra implementación de JMS: las entregas de los primeros son notificadas a los remitentes, mientras que los de los segundos no lo son. Utilizamos mensajes de acuse de recibo no solo para informar a los remitentes sobre la entrega exitosa de los mensajes, sino también para eliminar las réplicas de los mensajes entregados que aún están presentes en la red. Cada anfitrión mantiene una lista de los mensajes Middleware para la Computación Pervasiva y Ad-hoc 124 entregados con éxito que se actualiza como parte del proceso normal de intercambio de información entre los anfitriones. Las listas se intercambian durante los primeros pasos del protocolo de epidemia anti-entropía con una frecuencia predefinida. En el caso de mensajes con múltiples destinatarios, también se almacena una lista de los destinatarios reales. Cuando un anfitrión recibe la lista, verifica su búfer de mensajes y lo actualiza de acuerdo con las siguientes reglas: (1) si un mensaje tiene un único destinatario y ha sido entregado, se elimina del búfer; (2) si un mensaje tiene múltiples destinatarios, se eliminan los identificadores de los anfitriones a los que se ha entregado de la lista de destinatarios asociada. Si la longitud resultante de la lista de destinatarios es cero, el mensaje se elimina del búfer. Estas listas tienen, claramente, dimensiones finitas y se implementan como colas circulares. Este mecanismo simple, junto con el uso de marcas de tiempo de expiración, garantiza que las antiguas notificaciones de acuse de recibo sean eliminadas del sistema después de un período de tiempo limitado. Para mejorar la confiabilidad de EMMA, se podría desarrollar un mecanismo de diseño para la replicación inteligente de colas y temas basado en la información de contexto. Sin embargo, esto aún no forma parte de la arquitectura actual de EMMA. 5. IMPLEMENTACIÓN Y EVALUACIÓN PRELIMINAR Implementamos un prototipo de nuestra plataforma utilizando el Perfil Personal J2ME. El tamaño del ejecutable es de aproximadamente 250KB, incluido el archivo jar de JMS 1.1; esta es una cifra perfectamente aceptable dada la memoria disponible de los dispositivos móviles actuales en el mercado. Probamos nuestro prototipo en PDAs HP iPaq con Linux, interconectados con WaveLan, y en varios laptops con la misma interfaz de red. También evaluamos la plataforma de middleware utilizando el simulador de eventos discretos OMNET++ [17] para explorar una variedad de escenarios móviles que incorporaban un número más realista de hosts que el que se podía lograr experimentalmente. Más específicamente, evaluamos el rendimiento del sistema en términos de ratio de entrega y retraso promedio, variando la densidad de población y el tamaño del búfer, y utilizando mensajes persistentes y no persistentes con diferentes prioridades. Los resultados de la simulación muestran que el rendimiento de EMMAs, en términos de ratio de entrega y retraso de mensajes persistentes con prioridades más altas, es bueno. En general, es evidente que la proporción de entrega está fuertemente relacionada con el dimensionamiento correcto de los búferes para el retraso máximo aceptable. Además, los algoritmos epidémicos son capaces de garantizar una alta tasa de entrega si se evalúa el rendimiento durante un intervalo de tiempo suficiente para la difusión de las réplicas de los mensajes (es decir, la propagación de la infección) en una gran parte de la red ad-hoc. Una consecuencia del problema de dimensionamiento es que la escalabilidad puede verse seriamente afectada en middleware peer-to-peer para computación móvil debido a la escasez de recursos de los dispositivos (memoria limitada para almacenar temporalmente mensajes) y al número de posibles interconexiones en entornos ad-hoc. Lo peor es que las formas comunes de organización comercial y social (seis grados de separación) significan que incluso valores modestos de TTL en los mensajes provocarán una difusión generalizada de mensajes epidémicos. Este problema surge debido a la falta de inteligencia en el protocolo de la epidemia, y puede ser abordado seleccionando nodos portadores para los mensajes con mayor cuidado. Sin embargo, los detalles de este proceso están fuera del alcance de este documento (pero pueden encontrarse en [13]) y no afectan la base en la que se basa el middleware EMMA: la capacidad de entregar mensajes de forma asincrónica. 6. VISIÓN CRÍTICA DEL ESTADO DEL ARTE El diseño de plataformas de middleware para la computación móvil requiere que los investigadores respondan a preguntas nuevas y fundamentalmente diferentes; simplemente asumir la presencia de porciones cableadas de la red en las que pueda residir la funcionalidad centralizada no es generalizable. Por lo tanto, es necesario investigar nuevos principios de diseño y idear patrones arquitectónicos que difieran de los tradicionalmente utilizados en el diseño de middleware para sistemas fijos. Como ejemplo, considera la reciente tendencia de superposición de capas en redes ad-hoc [1]. Esta es una forma de replantear el diseño de sistemas de software, abandonando explícitamente las formas clásicas de estratificación, ya que, aunque esta separación de preocupaciones permite la portabilidad, lo hace a expensas de posibles ganancias de eficiencia. Creemos que es posible ver nuestro enfoque como una instancia de superposición de capas. De hecho, hemos añadido el protocolo de red epidémica a nivel de middleware y, al mismo tiempo, hemos utilizado el protocolo de red síncrono existente si está presente tanto en la entrega de mensajes (capas tradicionales) como en informar al middleware sobre cuándo pueden entregarse los mensajes revelando detalles de las tablas de reenvío (violación de capas). Por esta razón, preferimos considerarlos conjuntamente como la capa de comunicación de nuestra plataforma, proporcionando juntos una entrega de mensajes más eficiente. Otro aspecto interesante es la explotación del contexto y la información del sistema para mejorar el rendimiento de las plataformas de middleware móvil. Una vez más, como resultado de adoptar una metodología de capas cruzadas, podemos construir sistemas que recopilan información del sistema operativo subyacente y los componentes de comunicación para permitir la adaptación del comportamiento. Podemos resumir este enfoque de diseño conceptual diciendo que las plataformas de middleware deben ser no solo conscientes del contexto (es decir, deben ser capaces de extraer y analizar información del contexto circundante) sino también conscientes del sistema (es decir, deben ser capaces de recopilar información de los componentes de software y hardware del sistema móvil). Se han desarrollado varios sistemas de middleware para admitir redes ad hoc con el uso de comunicación asíncrona (como LIME, XMIDDLE, STEAM [11]). En particular, la plataforma STEAM es un ejemplo interesante de middleware basado en eventos para redes ad hoc, que proporciona entrega de mensajes con conciencia de ubicación y una solución efectiva para el filtrado de eventos. Una discusión sobre JMS, y su realización móvil, ya ha sido realizada en las Secciones 4 y 2. La empresa suiza Softwired ha desarrollado el primer middleware JMS para computación móvil, llamado iBus Mobile [10]. Los componentes principales de esta arquitectura típicamente basada en infraestructura son el proveedor de JMS, la llamada puerta de enlace móvil de JMS, que se despliega en un host fijo y una biblioteca de cliente JMS ligera. El gateway se utiliza para la comunicación entre el servidor de aplicaciones y los dispositivos móviles. El proveedor JMS ve la pasarela como un cliente JMS normal. El proveedor JMS puede ser cualquier servidor de aplicaciones habilitado para JMS, como BEA Weblogic. Pronto [19] es un ejemplo de un sistema de middleware basado en mensajería, diseñado específicamente para entornos móviles. La plataforma está compuesta por tres clases de componentes: clientes móviles que implementan la especificación JMS, pasarelas que controlan el tráfico, garantizando eficiencia y posibles personalizaciones de usuario utilizando diferentes complementos y servidores JMS. Diferentes configuraciones de estos componentes son posibles; con respecto a las aplicaciones de redes móviles ad hoc, la más interesante es Serverless JMS. El objetivo de esta configuración es adaptar JMS a un modelo descentralizado. El modelo de publicación-suscripción explota la eficiencia y la escalabilidad del protocolo de multidifusión IP subyacente. Se proporcionan servicios de entrega de mensajes poco confiables y confiables: la confiabilidad se logra a través de un protocolo basado en acuse de recibo negativo. Pronto representa una buena solución para redes móviles basadas en infraestructura, pero no se dirige adecuadamente a entornos ad-hoc, ya que los nodos móviles dependen de servidores fijos para el intercambio de mensajes. Existen otras MOM implementadas para entornos móviles; sin embargo, suelen ser extensiones sencillas de middleware existente [8]. La única implementación de MOM específicamente diseñada para redes móviles ad-hoc fue desarrollada en la Universidad de Newcastle [18]. Este trabajo es nuevamente una adaptación de JMS; el enfoque de esa implementación se centra en la comunicación de grupo y el uso de algoritmos de enrutamiento a nivel de aplicación para la entrega de mensajes por tema. Sin embargo, hay una serie de diferencias en el enfoque de nuestro trabajo. La importancia que atribuimos a las desconexiones hace que la persistencia sea un requisito vital para cualquier middleware que necesite ser utilizado en redes móviles ad-hoc. Los autores de [18] señalan la persistencia como un posible trabajo futuro, sin considerar el hecho de que enrutar un mensaje a un host no conectado resultará en un fallo de entrega. Esta es una limitación notable en entornos móviles donde las desconexiones impredecibles son la norma en lugar de la excepción. 7. MAPA Y CONCLUSIONES La comunicación asincrónica es un paradigma de comunicación útil para las redes móviles ad-hoc, ya que permite a los hosts llegar, irse y recoger mensajes cuando sea conveniente, teniendo en cuenta también la disponibilidad de sus recursos (por ejemplo, energía, niveles de conectividad). En este artículo hemos descrito el estado del arte en términos de MOM para sistemas móviles. También hemos demostrado una adaptación de prueba de concepto de JMS al escenario extremo de redes móviles ad-hoc parcialmente conectadas. Hemos descrito y discutido las características y diferencias de nuestra solución con respecto a las implementaciones tradicionales de JMS y las adaptaciones existentes para entornos móviles. Sin embargo, también se deben investigar los compromisos entre el enrutamiento a nivel de aplicación y el uso de recursos, ya que los dispositivos móviles suelen tener escasez de energía/recursos. Una limitación clave de este trabajo es el algoritmo epidémico que tiene un rendimiento deficiente y un avance importante en la practicabilidad de este trabajo requiere un algoritmo que equilibre mejor las necesidades de eficiencia y probabilidad de entrega de mensajes. Actualmente estamos trabajando en algoritmos y protocolos que, aprovechando técnicas probabilísticas y estadísticas sobre la base de pequeñas cantidades de información intercambiada, son capaces de mejorar considerablemente la eficiencia en términos de recursos (memoria, ancho de banda, etc.) y la confiabilidad de nuestra plataforma de middleware [13]. Un desarrollo de investigación futurista, que podría llevar estas ideas de adaptación de middleware de mensajería para entornos móviles más allá, es la introducción de extensiones de comunicación más orientadas a la movilidad, como el soporte de geocast (es decir, la capacidad de enviar mensajes a áreas geográficas específicas). REFERENCIAS [1] M. Conti, G. Maselli, G. Turi y S. Giordano. Diseño de redes móviles ad-hoc con interconexión de capas. IEEE Computer, 37(2):48-51, febrero de 2004. [2] A. Demers, D. Greene, C. Hauser, W. Irish, J. Larson, S. Shenker, H. Sturgis, D. Swinehart y D. Terry. Algoritmos de epidemia para el mantenimiento de bases de datos replicadas. En el Sexto Simposio sobre Principios de Computación Distribuida, páginas 1-12, agosto de 1987. [3] A. Doria, M. Uden y D. P. Pandey. Proporcionando conectividad a la comunidad nómada Saami. En Actas de la Segunda Conferencia Internacional sobre Diseño Colaborativo Abierto para la Innovación Sostenible, diciembre de 2002. [4] M. Haahr, R. Cunningham y V. Cahill. Aplicaciones CORBA en un entorno móvil. En la 5ª Conferencia Internacional sobre Computación y Redes Móviles (MOBICOM99), páginas 36-47. ACM, agosto de 1999. [5] M. Hapner, R. Burridge, R. Sharma, J. Fialli y K. Stout. Especificación del Servicio de Mensajes Java Versión 1.1. Sun Microsystems, Inc., abril de 2002. http://java.sun.com/products/jms/. [6] J. Hart. WebSphere MQ: Conectando sus aplicaciones sin programación compleja. IBM WebSphere Software White Papers, 2003. [7] S. Hayward y M. Pezzini. Casando Middleware y Computación Móvil. Informe de investigación del Grupo Gartner, septiembre de 2001. [8] IBM. WebSphere MQ EveryPlace Versión 2.0, noviembre de 2002. http://www-3.ibm.com/software/integration/wmqe/. [9] UIT. Conectando comunidades remotas. Documentos de la Cumbre Mundial sobre la Sociedad de la Información, 2003. http://www.itu.int/osg/spu/wsis-themes. [10] S. Maffeis. Presentando JMS inalámbrico. Softwired AG, www.sofwired-inc.com, 2002. [11] C. Mascolo, L. Capra y W. Emmerich. Middleware para Computación Móvil. En E. Gregori, G. Anastasi y S. Basagni, editores, Conferencias Avanzadas sobre Redes, volumen 2497 de las Notas de Conferencias en Ciencias de la Computación, páginas 20-58. Springer Verlag, 2002. [12] Microsoft. \n\nSpringer Verlag, 2002. [12] Microsoft. Documentación de Microsoft Message Queuing (MSMQ) Versión 2.0. [13] M. Musolesi, S. Hailes y C. Mascolo. Enrutamiento adaptativo para redes ad-hoc móviles intermitentemente conectadas. Informe técnico, Nota de Investigación UCL-CS, julio de 2004. Enviado para su publicación. [14] Sun Microsystems. Documentación de Java Naming and Directory Interface (JNDI) Versión 1.2. 2003. http://java.sun.com/products/jndi/. [15] Sun Microsystems. Especificación de Jini Versión 2.0, 2003. http://java.sun.com/products/jini/. [16] A. Vahdat y D. Becker. Enrutamiento epidémico para redes ad-hoc parcialmente conectadas. Informe técnico CS-2000-06, Departamento de Ciencias de la Computación, Universidad de Duke, 2000. [17] A. Vargas. El sistema de simulación de eventos discretos OMNeT++. En Actas de la Multiconferencia Europea de Simulación (ESM2001), Praga, junio de 2001. [18] E. Vollset, D. Ingham y P. Ezhilchelvan. JMS en redes móviles ad-hoc. En Comunicaciones Inalámbricas Personales (PWC), páginas 40-52, Venecia, septiembre de 2003. [19] E. Yoneki y J. Bacon. Pronto: Mobilegateway con paradigma de publicación-suscripción sobre red inalámbrica. Informe Técnico 559, Universidad de Cambridge, Laboratorio de Computación, febrero de 2003. Middleware para Computación Pervasive y ad-hoc 126 ",
            "candidates": [],
            "error": [
                []
            ]
        },
        "mobile ad-hoc network": {
            "translated_key": "redes móviles ad-hoc",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Adapting Asynchronous Messaging Middleware to ad-hoc Networking Mirco Musolesi Dept.",
                "of Computer Science, University College London Gower Street, London WC1E 6BT, United Kingdom m.musolesi@cs.ucl.ac.uk Cecilia Mascolo Dept. of Computer Science, University College London Gower Street, London WC1E 6BT, United Kingdom c.mascolo@cs.ucl.ac.uk Stephen Hailes Dept. of Computer Science, University College London Gower Street, London WC1E 6BT, United Kingdom s.hailes@cs.ucl.ac.uk ABSTRACT The characteristics of mobile environments, with the possibility of frequent disconnections and fluctuating bandwidth, have forced a rethink of traditional middleware.",
                "In particular, the synchronous communication paradigms often employed in standard middleware do not appear to be particularly suited to ad-hoc environments, in which not even the intermittent availability of a backbone network can be assumed.",
                "Instead, asynchronous communication seems to be a generally more suitable paradigm for such environments.",
                "Message oriented middleware for traditional systems has been developed and used to provide an asynchronous paradigm of communication for distributed systems, and, recently, also for some specific mobile computing systems.",
                "In this paper, we present our experience in designing, implementing and evaluating EMMA (Epidemic Messaging Middleware for ad-hoc networks), an adaptation of Java Message Service (JMS) for mobile ad-hoc environments.",
                "We discuss in detail the design challenges and some possible solutions, showing a concrete example of the feasibility and suitability of the application of the asynchronous paradigm in this setting and outlining a research roadmap for the coming years.",
                "Categories and Subject Descriptors C.2.4 [Computer-Communication Networks]: Distributed Systems-Distributed Applications; C.2.1 [Network Architecture and Design]: Wireless Communication General Terms DESIGN, ALGORITHMS 1.",
                "INTRODUCTION With the increasing popularity of mobile devices and their widespread adoption, there is a clear need to allow the development of a broad spectrum of applications that operate effectively over such an environment.",
                "Unfortunately, this is far from simple: mobile devices are increasingly heterogeneous in terms of processing capabilities, memory size, battery capacity, and network interfaces.",
                "Each such configuration has substantially different characteristics that are both statically different - for example, there is a major difference in capability between a Berkeley mote and an 802.11g-equipped laptop - and that vary dynamically, as in situations of fluctuating bandwidth and intermittent connectivity.",
                "Mobile ad hoc environments have an additional element of complexity in that they are entirely decentralised.",
                "In order to craft applications for such complex environments, an appropriate form of middleware is essential if cost effective development is to be achieved.",
                "In this paper, we examine one of the foundational aspects of middleware for mobile ad-hoc environments: that of the communication primitives.",
                "Traditionally, the most frequently used middleware primitives for communication assume the simultaneous presence of both end points on a network, since the stability and pervasiveness of the networking infrastructure is not an unreasonable assumption for most wired environments.",
                "In other words, most communication paradigms are synchronous: object oriented middleware such as CORBA and Java RMI are typical examples of middleware based on synchronous communication.",
                "In recent years, there has been growing interest in platforms based on asynchronous communication paradigms, such as publish-subscribe systems [6]: these have been exploited very successfully where there is application level asynchronicity.",
                "From a Gartner Market Report [7]: Given messageoriented-middlewares (MOM) popularity, scalability, flexibility, and affinity with mobile and wireless architectures, by 2004, MOM will emerge as the dominant form of communication middleware for linking mobile and enterprise applications (0.7 probability)....",
                "Moreover, in mobile ad-hoc systems, the likelihood of network fragmentation means that synchronous communication may in any case be impracticable, giving situations in which delay tolerant asynchronous traffic is the only form of traffic that could be supported. 121 Middleware 2004 Companion Middleware for mobile ad-hoc environments must therefore support semi-synchronous or completely asynchronous communication primitives if it is to avoid substantial limitations to its utility.",
                "Aside from the intellectual challenge in supporting this model, this work is also interesting because there are a number of practical application domains in allowing inter-community communication in undeveloped areas of the globe.",
                "Thus, for example, projects that have been carried out to help populations that live in remote places of the globe such as Lapland [3] or in poor areas that lack fixed connectivity infrastructure [9].",
                "There have been attempts to provide mobile middleware with these properties, including STEAM, LIME, XMIDDLE, Bayou (see [11] for a more complete review of mobile middleware).",
                "These models differ quite considerably from the existing traditional middleware in terms of primitives provided.",
                "Furthermore, some of them fail in providing a solution for the true ad-hoc scenarios.",
                "If the projected success of MOM becomes anything like a reality, there will be many programmers with experience of it.",
                "The ideal solution to the problem of middleware for ad-hoc systems is, then, to allow programmers to utilise the same paradigms and models presented by common forms of MOM and to ensure that these paradigms are supportable within the mobile environment.",
                "This approach has clear advantages in allowing applications developed on standard middleware platforms to be easily deployed on mobile devices.",
                "Indeed, some research has already led to the adaptation of traditional middleware platforms to mobile settings, mainly to provide integration between mobile devices and existing fixed networks in a nomadic (i.e., mixed) environment [4].",
                "With respect to message oriented middleware, the current implementations, however, either assume the existence of a backbone network to which the mobile hosts connect from time to time while roaming [10], or assume that nodes are always somehow reachable through a path [18].",
                "No adaptation to heterogeneous or completely ad-hoc scenarios, with frequent disconnection and periodically isolated clouds of hosts, has been attempted.",
                "In the remainder of this paper we describe an initial attempt to adapt message oriented middleware to suit mobile and, more specifically, mobile ad-hoc networks.",
                "In our case, we elected to examine JMS, as one of the most widely known MOM systems.",
                "In the latter part of this paper, we explore the limitations of our results and describe the plans we have to take the work further. 2.",
                "MESSAGE ORIENTED MIDDLEWARE AND JAVA MESSAGE SERVICE (JMS) Message-oriented middleware systems support communication between distributed components via message-passing: the sender sends a message to identified queues, which usually reside on a server.",
                "A receiver retrieves the message from the queue at a different time and may acknowledge the reply using the same asynchronous mechanism.",
                "Message-oriented middleware thus supports asynchronous communication in a very natural way, achieving de-coupling of senders and receivers.",
                "A sender is able to continue processing as soon as the middleware has accepted the message; eventually, the receiver will send an acknowledgment message and the sender will be able to collect it at a convenient time.",
                "However, given the way they are implemented, these middleware systems usually require resource-rich devices, especially in terms of memory and disk space, where persistent queues of messages that have been received but not yet processed, are stored.",
                "Sun Java Message Service [5], IBM WebSphere MQ [6], Microsoft MSMQ [12] are examples of very successful message-oriented middleware for traditional distributed systems.",
                "The Java Messaging Service (JMS) is a collection of interfaces for asynchronous communication between distributed components.",
                "It provides a common way for Java programs to create, send and receive messages.",
                "JMS users are usually referred to as clients.",
                "The JMS specification further defines providers as the components in charge of implementing the messaging system and providing the administrative and control functionality (i.e., persistence and reliability) required by the system.",
                "Clients can send and receive messages, asynchronously, through the JMS provider, which is in charge of the delivery and, possibly, of the persistence of the messages.",
                "There are two types of communication supported: point to point and publish-subscribe models.",
                "In the point to point model, hosts send messages to queues.",
                "Receivers can be registered with some specific queues, and can asynchronously retrieve the messages and then acknowledge them.",
                "The publish-subscribe model is based on the use of topics that can be subscribed to by clients.",
                "Messages are sent to topics by other clients and are then received in an asynchronous mode by all the subscribed clients.",
                "Clients learn about the available topics and queues through Java Naming and Directory Interface (JNDI) [14].",
                "Queues and topics are created by an administrator on the provider and are registered with the JNDI interface for look-up.",
                "In the next section, we introduce the challenges of mobile networks, and show how JMS can be adapted to cope with these requirements. 3.",
                "JMS FOR MOBILE COMPUTING Mobile networks vary very widely in their characteristics, from nomadic networks in which modes relocate whilst offline through to ad-hoc networks in which modes move freely and in which there is no infrastructure.",
                "Mobile ad-hoc networks are most generally applicable in situations where survivability and instant deployability are key: most notably in military applications and disaster relief.",
                "In between these two types of mobile networks, there are, however, a number of possible heterogeneous combinations, where nomadic and ad-hoc paradigms are used to interconnect totally unwired areas to more structured networks (such as a LAN or the Internet).",
                "Whilst the JMS specification has been extensively implemented and used in traditional distributed systems, adaptations for mobile environments have been proposed only recently.",
                "The challenges of porting JMS to mobile settings are considerable; however, in view of its widespread acceptance and use, there are considerable advantages in allowing the adaptation of existing applications to mobile environments and in allowing the interoperation of applications in the wired and wireless regions of a network.",
                "In [10], JMS was adapted to a nomadic mobile setting, where mobile hosts can be JMS clients and communicate through the JMS provider that, however, sits on a backbone network, providing reliability and persistence.",
                "The client prototype presented in [10] is very lightweight, due to the delegation of all the heavyweight functionality to the Middleware for Pervasive and ad-hoc Computing 122 provider on the wired network.",
                "However, this approach is somewhat limited in terms of widespread applicability and scalability as a consequence of the concentration of functionality in the wired portion of the network.",
                "If JMS is to be adapted to completely ad-hoc environments, where no fixed infrastructure is available, and where nodes change location and status very dynamically, more issues must be taken into consideration.",
                "Firstly, discovery needs to use a resilient but distributed model: in this extremely dynamic environment, static solutions are unacceptable.",
                "As discussed in Section 2, a JMS administrator defines queues and topics on the provider.",
                "Clients can then learn about them using the Java Naming and Directory Interface (JNDI).",
                "However, due to the way JNDI is designed, a JNDI node (or more than one) needs to be in reach in order to obtain a binding of a name to an address (i.e., knowing where a specific queue/topic is).",
                "In mobile ad-hoc environments, the discovery process cannot assume the existence of a fixed set of discovery servers that are always reachable, as this would not match the dynamicity of ad-hoc networks.",
                "Secondly, a JMS Provider, as suggested by the JMS specification, also needs to be reachable by each node in the network, in order to communicate.",
                "This assumes a very centralised architecture, which again does not match the requirements of a mobile ad-hoc setting, in which nodes may be moving and sparse: a more distributed and dynamic solution is needed.",
                "Persistence is, however, essential functionality in asynchronous communication environments as hosts are, by definition, connected at different times.",
                "In the following section, we will discuss our experience in designing and implementing JMS for mobile ad-hoc networks. 4.",
                "JMSFOR MOBILE ad-hoc NETWORKS 4.1 Adaptation of JMS for Mobile ad-hoc Networks Developing applications for mobile networks is yet more challenging: in addition to the same considerations as for infrastructured wireless environments, such as the limited device capabilities and power constraints, there are issues of rate of change of network connectivity, and the lack of a static routing infrastructure.",
                "Consequently, we now describe an initial attempt to adapt the JMS specification to target the particular requirements related to ad-hoc scenarios.",
                "As discussed in Section 3, a JMS application can use either the point to point and the publish-subscribe styles of messaging.",
                "Point to Point Model The point to point model is based on the concept of queues, that are used to enable asynchronous communication between the producer of a message and possible different consumers.",
                "In our solution, the location of queues is determined by a negotiation process that is application dependent.",
                "For example, let us suppose that it is possible to know a priori, or it is possible to determine dynamically, that a certain host is the receiver of the most part of messages sent to a particular queue.",
                "In this case, the optimum location of the queue may well be on this particular host.",
                "In general, it is worth noting that, according to the JMS specification and suggested design patterns, it is common and preferable for a client to have all of its messages delivered to a single queue.",
                "Queues are advertised periodically to the hosts that are within transmission range or that are reachable by means of the underlying synchronous communication protocol, if provided.",
                "It is important to note that, at the middleware level, it is logically irrelevant whether or not the network layer implements some form of ad-hoc routing (though considerably more efficient if it does); the middleware only considers information about which nodes are actively reachable at any point in time.",
                "The hosts that receive advertisement messages add entries to their JNDI registry.",
                "Each entry is characterized by a lease (a mechanism similar to that present in Jini [15]).",
                "A lease represents the time of validity of a particular entry.",
                "If a lease is not refreshed (i.e, its life is not extended), it can expire and, consequently, the entry is deleted from the registry.",
                "In other words, the host assumes that the queue will be unreachable from that point in time.",
                "This may be caused, for example, if a host storing the queue becomes unreachable.",
                "A host that initiates a discovery process will find the topics and the queues present in its connected portion of the network in a straightforward manner.",
                "In order to deliver a message to a host that is not currently in reach1 , we use an asynchronous epidemic routing protocol that will be discussed in detail in Section 4.2.",
                "If two hosts are in the same cloud (i.e., a connected path exists between them), but no synchronous protocol is available, the messages are sent using the epidemic protocol.",
                "In this case, the delivery latency will be low as a result of the rapidity of propagation of the infection in the connected cloud (see also the simulation results in Section 5).",
                "Given the existence of an epidemic protocol, the discovery mechanism consists of advertising the queues to the hosts that are currently unreachable using analogous mechanisms.",
                "Publish-Subscribe Model In the publish-subscribe model, some of the hosts are similarly designated to hold topics and store subscriptions, as before.",
                "Topics are advertised through the registry in the same way as are queues, and a client wishing to subscribe to a topic must register with the client holding the topic.",
                "When a client wishes to send a message to the topic list, it sends it to the topic holder (in the same way as it would send a message to a queue).",
                "The topic holder then forwards the message to all subscribers, using the synchronous protocol if possible, the epidemic protocol otherwise.",
                "It is worth noting that we use a single message with multiple recipients, instead of multiple messages with multiple recipients.",
                "When a message is delivered to one of the subscribers, this recipient is deleted from the list.",
                "In order to delete the other possible replicas, we employ acknowledgment messages (discussed in Section 4.4), returned in the same way as a normal message.",
                "We have also adapted the concepts of durable and non durable subscriptions for ad-hoc settings.",
                "In fixed platforms, durable subscriptions are maintained during the disconnections of the clients, whether these are intentional or are the result of failures.",
                "In traditional systems, while a durable subscriber is disconnected from the server, it is responsible for storing messages.",
                "When the durable subscriber reconnects, the server sends it all unexpired messages.",
                "The problem is that, in our scenario, disconnections are the norm 1 In theory, it is not possible to send a message to a peer that has never been reachable in the past, since there can be no entry present in the registry.",
                "However, to overcome this possible limitation, we provide a primitive through which information can be added to the registry without using the normal channels. 123 Middleware 2004 Companion rather than the exception.",
                "In other words, we cannot consider disconnections as failures.",
                "For these reasons, we adopt a slightly different semantics.",
                "With respect to durable subscriptions, if a subscriber becomes disconnected, notifications are not stored but are sent using the epidemic protocol rather than the synchronous protocol.",
                "In other words, durable notifications remain valid during the possible disconnections of the subscriber.",
                "On the other hand, if a non-durable subscriber becomes disconnected, its subscription is deleted; in other words, during disconnections, notifications are not sent using the epidemic protocol but exploit only the synchronous protocol.",
                "If the topic becomes accessible to this host again, it must make another subscription in order to receive the notifications.",
                "Unsubscription messages are delivered in the same way as are subscription messages.",
                "It is important to note that durable subscribers have explicitly to unsubscribe from a topic in order to stop the notification process; however, all durable subscriptions have a predefined expiration time in order to cope with the cases of subscribers that do not meet again because of their movements or failures.",
                "This feature is clearly provided to limit the number of the unnecessary messages sent around the network. 4.2 Message Delivery using Epidemic Routing In this section, we examine one possible mechanism that will allow the delivery of messages in a partially connected network.",
                "The mechanism we discuss is intended for the purposes of demonstrating feasibility; more efficient communication mechanisms for this environment are themselves complex, and are the subject of another paper [13].",
                "The asynchronous message delivery described above is based on a typical pure epidemic-style routing protocol [16].",
                "A message that needs to be sent is replicated on each host in reach.",
                "In this way, copies of the messages are quickly spread through connected networks, like an infection.",
                "If a host becomes connected to another cloud of mobile nodes, during its movement, the message spreads through this collection of hosts.",
                "Epidemic-style replication of data and messages has been exploited in the past in many fields starting with the distributed database systems area [2].",
                "Within epidemic routing, each host maintains a buffer containing the messages that it has created and the replicas of the messages generated by the other hosts.",
                "To improve the performance, a hash-table indexes the content of the buffer.",
                "When two hosts connect, the host with the smaller identifier initiates a so-called anti-entropy session, sending a list containing the unique identifiers of the messages that it currently stores.",
                "The other host evaluates this list and sends back a list containing the identifiers it is storing that are not present in the other host, together with the messages that the other does not have.",
                "The host that has started the session receives the list and, in the same way, sends the messages that are not present in the other host.",
                "Should buffer overflow occur, messages are dropped.",
                "The reliability offered by this protocol is typically best effort, since there is no guarantee that a message will eventually be delivered to its recipient.",
                "Clearly, the delivery ratio of the protocol increases proportionally to the maximum allowed delay time and the buffer size in each host (interesting simulation results may be found in [16]). 4.3 Adaptation of the JMS Message Model In this section, we will analyse the aspects of our adaptation of the specification related to the so-called JMS Message Model [5].",
                "According to this, JMS messages are characterised by some properties defined using the header field, which contains values that are used by both clients and providers for their delivery.",
                "The aspects discussed in the remainder of this section are valid for both models (point to point and publish-subscribe).",
                "A JMS message can be persistent or non-persistent.",
                "According to the JMS specification, persistent messages must be delivered with a higher degree of reliability than the nonpersistent ones.",
                "However, it is worth noting that it is not possible to ensure once-and-only-once reliability for persistent messages as defined in the specification, since, as we discussed in the previous subsection, the underlying epidemic protocol can guarantee only best-effort delivery.",
                "However, clients maintain a list of the identifiers of the recently received messages to avoid the delivery of message duplicates.",
                "In other words, we provide the applications with at-mostonce reliability for both types of messages.",
                "In order to implement different levels of reliability, EMMA treats persistent and non-persistent messages differently, during the execution of the anti-entropy epidemic protocol.",
                "Since the message buffer space is limited, persistent messages are preferentially replicated using the available free space.",
                "If this is insufficient and non-persistent messages are present in the buffer, these are replaced.",
                "Only the successful deliveries of the persistent messages are notified to the senders.",
                "According to the JMS specification, it is possible to assign a priority to each message.",
                "The messages with higher priorities are delivered in a preferential way.",
                "As discussed above, persistent messages are prioritised above the non-persistent ones.",
                "Further selection is based on their priorities.",
                "Messages with higher priorities are treated in a preferential way.",
                "In fact, if there is not enough space to replicate all the persistent messages, a mechanism based on priorities is used to delete and replicate non-persistent messages (and, if necessary, persistent messages).",
                "Messages are deleted from the buffers using the expiration time value that can be set by senders.",
                "This is a way to free space in the buffers (one preferentially deletes older messages in cases of conflict); to eliminate stale replicas in the system; and to limit the time for which destinations must hold message identifiers to dispose of duplicates. 4.4 Reliability and Acknowledgment Mechanisms As already discussed, at-most-once message delivery is the best that can be achieved in terms of delivery semantics in partially connected ad-hoc settings.",
                "However, it is possible to improve the reliability of the system with efficient acknowledgment mechanisms.",
                "EMMA provides a mechanism for failure notification to applications if the acknowledgment is not received within a given timeout (that can be configured by application developers).",
                "This mechanism is the one that distinguishes the delivery of persistent and non-persistent messages in our JMS implementation: the deliveries of the former are notified to the senders, whereas the latter are not.",
                "We use acknowledgment messages not only to inform senders about the successful delivery of messages but also to delete the replicas of the delivered messages that are still present in the network.",
                "Each host maintains a list of the messages Middleware for Pervasive and ad-hoc Computing 124 successfully delivered that is updated as part of the normal process of information exchange between the hosts.",
                "The lists are exchanged during the first steps of the anti-entropic epidemic protocol with a certain predefined frequency.",
                "In the case of messages with multiple recipients, a list of the actual recipients is also stored.",
                "When a host receives the list, it checks its message buffer and updates it according to the following rules: (1) if a message has a single recipient and it has been delivered, it is deleted from the buffer; (2) if a message has multiple recipients, the identifiers of the delivered hosts are deleted from the associated list of recipients.",
                "If the resulting length of the list of recipients is zero, the message is deleted from the buffer.",
                "These lists have, clearly, finite dimensions and are implemented as circular queues.",
                "This simple mechanism, together with the use of expiration timestamps, guarantees that the old acknowledgment notifications are deleted from the system after a limited period of time.",
                "In order to improve the reliability of EMMA, a design mechanism for intelligent replication of queues and topics based on the context information could be developed.",
                "However this is not yet part of the current architecture of EMMA. 5.",
                "IMPLEMENTATION AND PRELIMINARY EVALUATION We implemented a prototype of our platform using the J2ME Personal Profile.",
                "The size of the executable is about 250KB including the JMS 1.1 jar file; this is a perfectly acceptable figure given the available memory of the current mobile devices on the market.",
                "We tested our prototype on HP IPaq PDAs running Linux, interconnected with WaveLan, and on a number of laptops with the same network interface.",
                "We also evaluated the middleware platform using the OMNET++ discrete event simulator [17] in order to explore a range of mobile scenarios that incorporated a more realistic number of hosts than was achievable experimentally.",
                "More specifically, we assessed the performance of the system in terms of delivery ratio and average delay, varying the density of population and the buffer size, and using persistent and non-persistent messages with different priorities.",
                "The simulation results show that the EMMAs performance, in terms of delivery ratio and delay of persistent messages with higher priorities, is good.",
                "In general, it is evident that the delivery ratio is strongly related to the correct dimensioning of the buffers to the maximum acceptable delay.",
                "Moreover, the epidemic algorithms are able to guarantee a high delivery ratio if one evaluates performance over a time interval sufficient for the dissemination of the replicas of messages (i.e., the infection spreading) in a large portion of the ad-hoc network.",
                "One consequence of the dimensioning problem is that scalability may be seriously impacted in peer-to-peer middleware for mobile computing due to the resource poverty of the devices (limited memory to store temporarily messages) and the number of possible interconnections in ad-hoc settings.",
                "What is worse is that common forms of commercial and social organisation (six degrees of separation) mean that even modest TTL values on messages will lead to widespread flooding of epidemic messages.",
                "This problem arises because of the lack of intelligence in the epidemic protocol, and can be addressed by selecting carrier nodes for messages with greater care.",
                "The details of this process are, however, outside the scope of this paper (but may be found in [13]) and do not affect the foundation on which the EMMA middleware is based: the ability to deliver messages asynchronously. 6.",
                "CRITICAL VIEW OF THE STATE OF THE ART The design of middleware platforms for mobile computing requires researchers to answer new and fundamentally different questions; simply assuming the presence of wired portions of the network on which centralised functionality can reside is not generalisable.",
                "Thus, it is necessary to investigate novel design principles and to devise architectural patterns that differ from those traditionally exploited in the design of middleware for fixed systems.",
                "As an example, consider the recent cross-layering trend in ad-hoc networking [1].",
                "This is a way of re-thinking software systems design, explicitly abandoning the classical forms of layering, since, although this separation of concerns afford portability, it does so at the expense of potential efficiency gains.",
                "We believe that it is possible to view our approach as an instance of cross-layering.",
                "In fact, we have added the epidemic network protocol at middleware level and, at the same time, we have used the existing synchronous network protocol if present both in delivering messages (traditional layering) and in informing the middleware about when messages may be delivered by revealing details of the forwarding tables (layer violation).",
                "For this reason, we prefer to consider them jointly as the communication layer of our platform together providing more efficient message delivery.",
                "Another interesting aspect is the exploitation of context and system information to improve the performance of mobile middleware platforms.",
                "Again, as a result of adopting a cross-layering methodology, we are able to build systems that gather information from the underlying operating system and communication components in order to allow for adaptation of behaviour.",
                "We can summarise this conceptual design approach by saying that middleware platforms must be not only context-aware (i.e., they should be able to extract and analyse information from the surrounding context) but also system-aware (i.e., they should be able to gather information from the software and hardware components of the mobile system).",
                "A number of middleware systems have been developed to support ad-hoc networking with the use of asynchronous communication (such as LIME, XMIDDLE, STEAM [11]).",
                "In particular, the STEAM platform is an interesting example of event-based middleware for ad-hoc networks, providing location-aware message delivery and an effective solution for event filtering.",
                "A discussion of JMS, and its mobile realisation, has already been conducted in Sections 4 and 2.",
                "The Swiss company Softwired has developed the first JMS middleware for mobile computing, called iBus Mobile [10].",
                "The main components of this typically infrastructure-based architecture are the JMS provider, the so-called mobile JMS gateway, which is deployed on a fixed host and a lightweight JMS client library.",
                "The gateway is used for the communication between the application server and mobile hosts.",
                "The gateway is seen by the JMS provider as a normal JMS client.",
                "The JMS provider can be any JMS-enabled application server, such as BEA Weblogic.",
                "Pronto [19] is an example of mid125 Middleware 2004 Companion dleware system based on messaging that is specifically designed for mobile environments.",
                "The platform is composed of three classes of components: mobile clients implementing the JMS specification, gateways that control traffic, guaranteeing efficiency and possible user customizations using different plug-ins and JMS servers.",
                "Different configurations of these components are possible; with respect to mobile ad hoc networks applications, the most interesting is Serverless JMS.",
                "The aim of this configuration is to adapt JMS to a decentralized model.",
                "The publish-subscribe model exploits the efficiency and the scalability of the underlying IP multicast protocol.",
                "Unreliable and reliable message delivery services are provided: reliability is provided through a negative acknowledgment-based protocol.",
                "Pronto represents a good solution for infrastructure-based mobile networks but it does not adequately target ad-hoc settings, since mobile nodes rely on fixed servers for the exchange of messages.",
                "Other MOM implemented for mobile environments exist; however, they are usually straightforward extensions of existing middleware [8].",
                "The only implementation of MOM specifically designed for mobile ad-hoc networks was developed at the University of Newcastle [18].",
                "This work is again a JMS adaptation; the focus of that implementation is on group communication and the use of application level routing algorithms for topic delivery of messages.",
                "However, there are a number of differences in the focus of our work.",
                "The importance that we attribute to disconnections makes persistence a vital requirement for any middleware that needs to be used in mobile ad-hoc networks.",
                "The authors of [18] signal persistence as possible future work, not considering the fact that routing a message to a non-connected host will result in delivery failure.",
                "This is a remarkable limitation in mobile settings where unpredictable disconnections are the norm rather than the exception. 7.",
                "ROADMAP AND CONCLUSIONS Asynchronous communication is a useful communication paradigm for mobile ad-hoc networks, as hosts are allowed to come, go and pick up messages when convenient, also taking account of their resource availability (e.g., power, connectivity levels).",
                "In this paper we have described the state of the art in terms of MOM for mobile systems.",
                "We have also shown a proof of concept adaptation of JMS to the extreme scenario of partially connected mobile ad-hoc networks.",
                "We have described and discussed the characteristics and differences of our solution with respect to traditional JMS implementations and the existing adaptations for mobile settings.",
                "However, trade-offs between application-level routing and resource usage should also be investigated, as mobile devices are commonly power/resource scarce.",
                "A key limitation of this work is the poorly performing epidemic algorithm and an important advance in the practicability of this work requires an algorithm that better balances the needs of efficiency and message delivery probability.",
                "We are currently working on algorithms and protocols that, exploiting probabilistic and statistical techniques on the basis of small amounts of exchanged information, are able to improve considerably the efficiency in terms of resources (memory, bandwidth, etc) and the reliability of our middleware platform [13].",
                "One futuristic research development, which may take these ideas of adaptation of messaging middleware for mobile environments further is the introduction of more mobility oriented communication extensions, for instance the support of geocast (i.e., the ability to send messages to specific geographical areas). 8.",
                "REFERENCES [1] M. Conti, G. Maselli, G. Turi, and S. Giordano.",
                "Cross-layering in <br>mobile ad-hoc network</br> Design.",
                "IEEE Computer, 37(2):48-51, February 2004. [2] A. Demers, D. Greene, C. Hauser, W. Irish, J. Larson, S. Shenker, H. Sturgis, D. Swinehart, and D. Terry.",
                "Epidemic Algorithms for Replicated Database Maintenance.",
                "In Sixth Symposium on Principles of Distributed Computing, pages 1-12, August 1987. [3] A. Doria, M. Uden, and D. P. Pandey.",
                "Providing connectivity to the Saami nomadic community.",
                "In Proceedings of the Second International Conference on Open Collaborative Design for Sustainable Innovation, December 2002. [4] M. Haahr, R. Cunningham, and V. Cahill.",
                "Supporting CORBA applications in a Mobile Environment.",
                "In 5th International Conference on Mobile Computing and Networking (MOBICOM99), pages 36-47.",
                "ACM, August 1999. [5] M. Hapner, R. Burridge, R. Sharma, J. Fialli, and K. Stout.",
                "Java Message Service Specification Version 1.1.",
                "Sun Microsystems, Inc., April 2002. http://java.sun.com/products/jms/. [6] J. Hart.",
                "WebSphere MQ: Connecting your applications without complex programming.",
                "IBM WebSphere Software White Papers, 2003. [7] S. Hayward and M. Pezzini.",
                "Marrying Middleware and Mobile Computing.",
                "Gartner Group Research Report, September 2001. [8] IBM.",
                "WebSphere MQ EveryPlace Version 2.0, November 2002. http://www-3.ibm.com/software/integration/wmqe/. [9] ITU.",
                "Connecting remote communities.",
                "Documents of the World Summit on Information Society, 2003. http://www.itu.int/osg/spu/wsis-themes. [10] S. Maffeis.",
                "Introducing Wireless JMS.",
                "Softwired AG, www.sofwired-inc.com, 2002. [11] C. Mascolo, L. Capra, and W. Emmerich.",
                "Middleware for Mobile Computing.",
                "In E. Gregori, G. Anastasi, and S. Basagni, editors, Advanced Lectures on Networking, volume 2497 of Lecture Notes in Computer Science, pages 20-58.",
                "Springer Verlag, 2002. [12] Microsoft.",
                "Microsoft Message Queuing (MSMQ) Version 2.0 Documentation. [13] M. Musolesi, S. Hailes, and C. Mascolo.",
                "Adaptive routing for intermittently connected mobile ad-hoc networks.",
                "Technical report, UCL-CS Research Note, July 2004.",
                "Submitted for Publication. [14] Sun Microsystems.",
                "Java Naming and Directory Interface (JNDI) Documentation Version 1.2. 2003. http://java.sun.com/products/jndi/. [15] Sun Microsystems.",
                "Jini Specification Version 2.0, 2003. http://java.sun.com/products/jini/. [16] A. Vahdat and D. Becker.",
                "Epidemic routing for Partially Connected ad-hoc Networks.",
                "Technical Report CS-2000-06, Department of Computer Science, Duke University, 2000. [17] A. Vargas.",
                "The OMNeT++ discrete event simulation system.",
                "In Proceedings of the European Simulation Multiconference (ESM2001), Prague, June 2001. [18] E. Vollset, D. Ingham, and P. Ezhilchelvan.",
                "JMS on Mobile ad-hoc Networks.",
                "In Personal Wireless Communications (PWC), pages 40-52, Venice, September 2003. [19] E. Yoneki and J. Bacon.",
                "Pronto: Mobilegateway with publish-subscribe paradigm over wireless network.",
                "Technical Report 559, University of Cambridge, Computer Laboratory, February 2003.",
                "Middleware for Pervasive and ad-hoc Computing 126"
            ],
            "original_annotated_samples": [
                "Cross-layering in <br>mobile ad-hoc network</br> Design."
            ],
            "translated_annotated_samples": [
                "Diseño de <br>redes móviles ad-hoc</br> con interconexión de capas."
            ],
            "translated_text": "Adaptando Middleware de Mensajería Asincrónica a Redes Ad-hoc Mirco Musolesi Dept. Las características de los entornos móviles, con la posibilidad de desconexiones frecuentes y ancho de banda fluctuante, han obligado a replantear el middleware tradicional. En particular, los paradigmas de comunicación síncrona a menudo empleados en middleware estándar no parecen ser particularmente adecuados para entornos ad-hoc, en los que ni siquiera se puede asumir la disponibilidad intermitente de una red troncal. En cambio, la comunicación asincrónica parece ser un paradigma generalmente más adecuado para este tipo de entornos. Se ha desarrollado y utilizado middleware orientado a mensajes para sistemas tradicionales con el fin de proporcionar un paradigma de comunicación asíncrona para sistemas distribuidos, y, recientemente, también para algunos sistemas específicos de computación móvil. En este artículo, presentamos nuestra experiencia en el diseño, implementación y evaluación de EMMA (Middleware de Mensajería Epidémica para redes ad-hoc), una adaptación del Servicio de Mensajes Java (JMS) para entornos móviles ad-hoc. Discutimos en detalle los desafíos de diseño y algunas posibles soluciones, mostrando un ejemplo concreto de la viabilidad y adecuación de la aplicación del paradigma asíncrono en este contexto y delineando un plan de investigación para los próximos años. Categorías y Descriptores de Asignaturas C.2.4 [Redes de Computadoras-Comunicación]: Sistemas Distribuidos-Aplicaciones Distribuidas; C.2.1 [Arquitectura y Diseño de Redes]: Comunicación Inalámbrica Términos Generales DISEÑO, ALGORITMOS 1. INTRODUCCIÓN Con la creciente popularidad de los dispositivos móviles y su amplia adopción, existe una clara necesidad de permitir el desarrollo de un amplio espectro de aplicaciones que operen de manera efectiva en dicho entorno. Lamentablemente, esto está lejos de ser simple: los dispositivos móviles son cada vez más heterogéneos en cuanto a capacidades de procesamiento, tamaño de memoria, capacidad de batería e interfaces de red. Cada una de estas configuraciones tiene características sustancialmente diferentes que son estáticamente distintas, por ejemplo, hay una gran diferencia en la capacidad entre un mote de Berkeley y un portátil equipado con 802.11g, y que varían dinámicamente, como en situaciones de ancho de banda fluctuante y conectividad intermitente. Los entornos móviles ad hoc tienen un elemento adicional de complejidad en que son completamente descentralizados. Para poder desarrollar aplicaciones para entornos tan complejos, es esencial contar con una forma adecuada de middleware si se busca lograr un desarrollo rentable. En este artículo, examinamos uno de los aspectos fundamentales de middleware para entornos móviles ad-hoc: el de los primitivos de comunicación. Tradicionalmente, los primitivos de middleware más utilizados para la comunicación asumen la presencia simultánea de ambos puntos finales en una red, ya que la estabilidad y la ubicuidad de la infraestructura de redes no es una suposición irrazonable para la mayoría de los entornos cableados. En otras palabras, la mayoría de los paradigmas de comunicación son síncronos: middleware orientado a objetos como CORBA y Java RMI son ejemplos típicos de middleware basado en comunicación síncrona. En los últimos años, ha habido un creciente interés en plataformas basadas en paradigmas de comunicación asincrónica, como los sistemas de publicación-suscripción: estos han sido explotados con mucho éxito donde existe asincronía a nivel de aplicación. De acuerdo con un informe de mercado de Gartner [7]: Dada la popularidad, escalabilidad, flexibilidad y afinidad con arquitecturas móviles e inalámbricas de los middlewares orientados a mensajes (MOM), para el año 2004, es probable que MOM se convierta en la forma dominante de middleware de comunicación para vincular aplicaciones móviles y empresariales (probabilidad del 0.7)... Además, en sistemas ad-hoc móviles, la probabilidad de fragmentación de la red significa que la comunicación síncrona puede resultar impracticable en cualquier caso, lo que da lugar a situaciones en las que el tráfico asincrónico tolerante a retrasos es la única forma de tráfico que podría ser admitida. El middleware para entornos ad-hoc móviles debe, por lo tanto, admitir primitivas de comunicación semi-síncronas o completamente asíncronas si se quiere evitar limitaciones sustanciales en su utilidad. Además del desafío intelectual que implica apoyar este modelo, este trabajo también es interesante porque existen varios ámbitos de aplicación práctica al permitir la comunicación entre comunidades en áreas subdesarrolladas del mundo. Por lo tanto, por ejemplo, proyectos que se han llevado a cabo para ayudar a poblaciones que viven en lugares remotos del mundo como Laponia o en áreas pobres que carecen de infraestructura de conectividad fija. Ha habido intentos de proporcionar middleware móvil con estas propiedades, incluyendo STEAM, LIME, XMIDDLE, Bayou (consulte [11] para una revisión más completa del middleware móvil). Estos modelos difieren considerablemente de los middleware tradicionales existentes en cuanto a los primitivos proporcionados. Además, algunos de ellos fallan en proporcionar una solución para los verdaderos escenarios ad-hoc. Si el éxito proyectado de MOM se convierte en algo parecido a la realidad, habrá muchos programadores con experiencia en ello. La solución ideal al problema del middleware para sistemas ad-hoc es, entonces, permitir a los programadores utilizar los mismos paradigmas y modelos presentados por formas comunes de MOM y asegurar que estos paradigmas sean soportables dentro del entorno móvil. Este enfoque tiene claras ventajas al permitir que las aplicaciones desarrolladas en plataformas de middleware estándar se desplieguen fácilmente en dispositivos móviles. De hecho, algunas investigaciones ya han llevado a la adaptación de plataformas de middleware tradicionales a entornos móviles, principalmente para proporcionar integración entre dispositivos móviles y redes fijas existentes en un entorno nómada (es decir, mixto) [4]. En lo que respecta al middleware orientado a mensajes, las implementaciones actuales, sin embargo, asumen la existencia de una red troncal a la que los hosts móviles se conectan de vez en cuando mientras están en itinerancia [10], o asumen que los nodos siempre son de alguna manera accesibles a través de un camino [18]. No se ha intentado ninguna adaptación a escenarios heterogéneos o completamente ad hoc, con desconexiones frecuentes y nubes periódicamente aisladas de hosts. En el resto de este documento describimos un intento inicial de adaptar middleware orientado a mensajes para que se ajuste a dispositivos móviles y, más específicamente, a redes móviles ad-hoc. En nuestro caso, elegimos examinar JMS, como uno de los sistemas MOM más conocidos. En la última parte de este documento, exploramos las limitaciones de nuestros resultados y describimos los planes que tenemos para llevar a cabo el trabajo más adelante. Los sistemas de middleware orientados a mensajes y el Servicio de Mensajes de Java (JMS) admiten la comunicación entre componentes distribuidos a través del paso de mensajes: el remitente envía un mensaje a colas identificadas, que generalmente residen en un servidor. Un receptor recupera el mensaje de la cola en un momento diferente y puede confirmar la respuesta utilizando el mismo mecanismo asíncrono. La middleware orientada a mensajes soporta la comunicación asíncrona de una manera muy natural, logrando el desacoplamiento de emisores y receptores. Un remitente puede continuar procesando tan pronto como el middleware haya aceptado el mensaje; eventualmente, el receptor enviará un mensaje de confirmación y el remitente podrá recogerlo en un momento conveniente. Sin embargo, dado la forma en que están implementados, estos sistemas de middleware suelen requerir dispositivos con recursos abundantes, especialmente en términos de memoria y espacio en disco, donde se almacenan colas persistentes de mensajes que han sido recibidos pero aún no procesados. Sun Java Message Service [5], IBM WebSphere MQ [6], Microsoft MSMQ [12] son ejemplos de middleware orientado a mensajes muy exitosos para sistemas distribuidos tradicionales. El Servicio de Mensajería de Java (JMS) es una colección de interfaces para la comunicación asincrónica entre componentes distribuidos. Proporciona una forma común para que los programas de Java creen, envíen y reciban mensajes. Los usuarios de JMS suelen ser referidos como clientes. La especificación JMS define además a los proveedores como los componentes encargados de implementar el sistema de mensajería y proporcionar la funcionalidad administrativa y de control (es decir, persistencia y confiabilidad) requerida por el sistema. Los clientes pueden enviar y recibir mensajes, de forma asincrónica, a través del proveedor JMS, que se encarga de la entrega y, posiblemente, de la persistencia de los mensajes. Hay dos tipos de comunicación admitidos: modelos punto a punto y de publicación-suscripción. En el modelo punto a punto, los hosts envían mensajes a colas. Los receptores pueden ser registrados con algunas colas específicas, y pueden recuperar los mensajes de forma asíncrona para luego confirmar su recepción. El modelo de publicación-suscripción se basa en el uso de temas a los que los clientes pueden suscribirse. Los mensajes son enviados a los temas por otros clientes y luego son recibidos de forma asíncrona por todos los clientes suscritos. Los clientes aprenden sobre los temas y colas disponibles a través de la Interfaz de Nombres y Directorios de Java (JNDI) [14]. Las colas y los temas son creados por un administrador en el proveedor y se registran con la interfaz JNDI para su búsqueda. En la siguiente sección, presentamos los desafíos de las redes móviles y mostramos cómo JMS puede adaptarse para cumplir con estos requisitos. 3. JMS PARA COMPUTACIÓN MÓVIL Las redes móviles varían mucho en sus características, desde redes nómadas en las que los nodos se desplazan mientras están desconectados, hasta redes ad-hoc en las que los nodos se mueven libremente y no hay infraestructura. Las redes móviles ad-hoc son más comúnmente aplicables en situaciones donde la supervivencia y la capacidad de despliegue instantáneo son clave: especialmente en aplicaciones militares y de ayuda en casos de desastre. Entre estos dos tipos de redes móviles, sin embargo, existen una serie de posibles combinaciones heterogéneas, donde se utilizan paradigmas nómadas y ad-hoc para interconectar áreas totalmente inalámbricas con redes más estructuradas (como una LAN o Internet). Si bien la especificación JMS ha sido ampliamente implementada y utilizada en sistemas distribuidos tradicionales, las adaptaciones para entornos móviles han sido propuestas recientemente. Los desafíos de adaptar JMS a entornos móviles son considerables; sin embargo, dada su amplia aceptación y uso, existen ventajas considerables al permitir la adaptación de aplicaciones existentes a entornos móviles y al permitir la interoperabilidad de aplicaciones en las regiones cableadas e inalámbricas de una red. En [10], JMS se adaptó a un entorno móvil nómada, donde los hosts móviles pueden ser clientes de JMS y comunicarse a través del proveedor de JMS que, sin embargo, se encuentra en una red troncal, proporcionando fiabilidad y persistencia. El prototipo del cliente presentado en [10] es muy ligero, debido a la delegación de toda la funcionalidad pesada al proveedor Middleware para Computación Pervasive y ad-hoc 122 en la red cableada. Sin embargo, este enfoque es algo limitado en términos de aplicabilidad generalizada y escalabilidad como consecuencia de la concentración de funcionalidad en la parte cableada de la red. Si se quiere adaptar JMS a entornos completamente ad hoc, donde no haya infraestructura fija disponible y donde los nodos cambien de ubicación y estado de forma muy dinámica, se deben tener en cuenta más problemas. En primer lugar, el descubrimiento necesita utilizar un modelo resiliente pero distribuido: en este entorno extremadamente dinámico, las soluciones estáticas son inaceptables. Como se discute en la Sección 2, un administrador de JMS define colas y temas en el proveedor. Los clientes pueden entonces aprender sobre ellos utilizando la Interfaz de Nombres y Directorios de Java (JNDI). Sin embargo, debido a la forma en que está diseñado JNDI, es necesario que un nodo de JNDI (o más de uno) esté al alcance para obtener una vinculación de un nombre a una dirección (es decir, saber dónde se encuentra una cola o un tema específico). En entornos móviles ad-hoc, el proceso de descubrimiento no puede asumir la existencia de un conjunto fijo de servidores de descubrimiento que siempre sean accesibles, ya que esto no coincidiría con la dinámica de las redes ad-hoc. En segundo lugar, un Proveedor de JMS, como sugiere la especificación de JMS, también debe ser accesible para cada nodo en la red, para poder comunicarse. Esto asume una arquitectura muy centralizada, que nuevamente no coincide con los requisitos de un entorno ad-hoc móvil, en el que los nodos pueden estar en movimiento y dispersos: se necesita una solución más distribuida y dinámica. La persistencia es, sin embargo, una funcionalidad esencial en entornos de comunicación asincrónica, ya que los hosts están, por definición, conectados en momentos diferentes. En la siguiente sección, discutiremos nuestra experiencia en el diseño e implementación de JMS para redes móviles ad-hoc. 4. El desarrollo de aplicaciones para redes móviles es aún más desafiante: además de las mismas consideraciones que para entornos inalámbricos infraestructurados, como las limitadas capacidades de los dispositivos y las restricciones de energía, existen problemas relacionados con la velocidad de cambio de la conectividad de la red y la falta de una infraestructura de enrutamiento estática. En consecuencia, ahora describimos un intento inicial de adaptar la especificación JMS para satisfacer los requisitos particulares relacionados con escenarios ad-hoc. Como se discute en la Sección 3, una aplicación JMS puede utilizar tanto el estilo de mensajería punto a punto como el de publicación-suscripción. Modelo de punto a punto. El modelo de punto a punto se basa en el concepto de colas, que se utilizan para habilitar la comunicación asincrónica entre el productor de un mensaje y posibles consumidores diferentes. En nuestra solución, la ubicación de las colas se determina mediante un proceso de negociación que depende de la aplicación. Por ejemplo, supongamos que es posible saber a priori, o es posible determinar dinámicamente, que cierto host es el receptor de la mayor parte de los mensajes enviados a una cola particular. En este caso, la ubicación óptima de la cola bien podría estar en este host en particular. En general, vale la pena señalar que, según la especificación de JMS y los patrones de diseño sugeridos, es común y preferible que un cliente tenga todos sus mensajes entregados a una sola cola. Las colas se anuncian periódicamente a los anfitriones que se encuentran dentro del rango de transmisión o que son alcanzables mediante el protocolo de comunicación síncrona subyacente, si se proporciona. Es importante tener en cuenta que, a nivel de middleware, es lógicamente irrelevante si la capa de red implementa alguna forma de enrutamiento ad-hoc (aunque considerablemente más eficiente si lo hace); el middleware solo considera información sobre qué nodos son accesibles activamente en cualquier momento. Los hosts que reciben mensajes publicitarios agregan entradas a su registro JNDI. Cada entrada se caracteriza por un arrendamiento (un mecanismo similar al presente en Jini [15]). Un contrato de arrendamiento representa el tiempo de validez de una entrada particular. Si un arrendamiento no se renueva (es decir, su vida no se extiende), puede vencer y, en consecuencia, la entrada se elimina del registro. En otras palabras, el anfitrión asume que la cola será inaccesible a partir de ese momento. Esto puede ser causado, por ejemplo, si un host que almacena la cola se vuelve inaccesible. Un host que inicia un proceso de descubrimiento encontrará los temas y las colas presentes en su porción conectada de la red de manera directa. Para enviar un mensaje a un anfitrión que actualmente no está al alcance, utilizamos un protocolo de enrutamiento de epidemia asíncrono que se discutirá en detalle en la Sección 4.2. Si dos hosts están en la misma nube (es decir, existe un camino conectado entre ellos), pero no hay disponible un protocolo síncrono, los mensajes se envían utilizando el protocolo epidémico. En este caso, la latencia de entrega será baja como resultado de la rapidez de propagación de la infección en la nube conectada (ver también los resultados de la simulación en la Sección 5). Dado la existencia de un protocolo de epidemia, el mecanismo de descubrimiento consiste en publicitar las colas a los hosts que actualmente son inalcanzables utilizando mecanismos análogos. En el modelo de publicación-suscripción, algunos de los hosts son designados de manera similar para mantener temas y almacenar suscripciones, como antes. Los temas se anuncian a través del registro de la misma manera que las colas, y un cliente que desee suscribirse a un tema debe registrarse con el cliente que tiene el tema. Cuando un cliente desea enviar un mensaje a la lista de temas, lo envía al titular del tema (de la misma manera que enviaría un mensaje a una cola). El titular del tema luego reenvía el mensaje a todos los suscriptores, utilizando el protocolo síncrono si es posible, de lo contrario el protocolo epidémico. Vale la pena señalar que utilizamos un único mensaje con múltiples destinatarios, en lugar de múltiples mensajes con múltiples destinatarios. Cuando un mensaje es entregado a uno de los suscriptores, este destinatario es eliminado de la lista. Para eliminar las posibles réplicas restantes, empleamos mensajes de acuse de recibo (discutidos en la Sección 4.4), devueltos de la misma manera que un mensaje normal. También hemos adaptado los conceptos de suscripciones duraderas y no duraderas para entornos ad-hoc. En las plataformas fijas, las suscripciones duraderas se mantienen durante las desconexiones de los clientes, ya sean intencionales o resultado de fallas. En los sistemas tradicionales, cuando un suscriptor duradero se desconecta del servidor, es responsable de almacenar los mensajes. Cuando el suscriptor duradero se reconecta, el servidor le envía todos los mensajes no caducados. El problema es que, en nuestro escenario, las desconexiones son la norma. En teoría, no es posible enviar un mensaje a un par que nunca ha sido alcanzable en el pasado, ya que no puede haber ninguna entrada presente en el registro. Sin embargo, para superar esta posible limitación, proporcionamos un mecanismo a través del cual la información puede ser añadida al registro sin utilizar los canales normales. 123 Middleware 2004 Companion en lugar de la excepción. En otras palabras, no podemos considerar las desconexiones como fallos. Por estas razones, adoptamos una semántica ligeramente diferente. En lo que respecta a las suscripciones duraderas, si un suscriptor se desconecta, las notificaciones no se almacenan, sino que se envían utilizando el protocolo epidémico en lugar del protocolo síncrono. En otras palabras, las notificaciones duraderas siguen siendo válidas durante las posibles desconexiones del suscriptor. Por otro lado, si un suscriptor no duradero se desconecta, su suscripción se elimina; en otras palabras, durante las desconexiones, las notificaciones no se envían utilizando el protocolo epidémico, sino que solo se aprovecha el protocolo síncrono. Si el tema vuelve a estar accesible para este anfitrión, deberá realizar otra suscripción para recibir las notificaciones. Los mensajes de baja se entregan de la misma manera que los mensajes de suscripción. Es importante tener en cuenta que los suscriptores duraderos deben darse de baja explícitamente de un tema para detener el proceso de notificación; sin embargo, todas las suscripciones duraderas tienen un tiempo de expiración predefinido para hacer frente a los casos de suscriptores que no vuelven a conectarse debido a sus movimientos o fallos. Esta característica se proporciona claramente para limitar el número de mensajes innecesarios enviados por la red. 4.2 Entrega de mensajes utilizando enrutamiento epidémico En esta sección, examinamos un mecanismo posible que permitirá la entrega de mensajes en una red parcialmente conectada. El mecanismo que discutimos está destinado a demostrar viabilidad; los mecanismos de comunicación más eficientes para este entorno son complejos por sí mismos y son el tema de otro artículo [13]. La entrega de mensajes asincrónica descrita anteriormente se basa en un protocolo de enrutamiento de estilo epidémico puro típico [16]. Un mensaje que necesita ser enviado se replica en cada host al alcance. De esta manera, las copias de los mensajes se propagan rápidamente a través de redes conectadas, como una infección. Si un anfitrión se conecta a otra nube de nodos móviles durante su movimiento, el mensaje se propaga a través de esta colección de anfitriones. La replicación de datos y mensajes en estilo epidémico ha sido explotada en el pasado en muchos campos, comenzando por el área de sistemas de bases de datos distribuidas [2]. Dentro del enrutamiento epidémico, cada anfitrión mantiene un búfer que contiene los mensajes que ha creado y las réplicas de los mensajes generados por los otros anfitriones. Para mejorar el rendimiento, una tabla hash indexa el contenido del búfer. Cuando dos anfitriones se conectan, el anfitrión con el identificador más pequeño inicia una sesión de anti-entropía, enviando una lista que contiene los identificadores únicos de los mensajes que actualmente almacena. El otro anfitrión evalúa esta lista y envía de vuelta una lista que contiene los identificadores que está almacenando y que no están presentes en el otro anfitrión, junto con los mensajes que el otro no tiene. El anfitrión que ha iniciado la sesión recibe la lista y, de la misma manera, envía los mensajes que no están presentes en el otro anfitrión. En caso de producirse un desbordamiento de búfer, los mensajes se descartan. La fiabilidad ofrecida por este protocolo es generalmente de mejor esfuerzo, ya que no hay garantía de que un mensaje finalmente sea entregado a su destinatario. Claramente, la proporción de entrega del protocolo aumenta proporcionalmente al tiempo máximo de retraso permitido y al tamaño del búfer en cada host (pueden encontrarse resultados interesantes de simulación en [16]). 4.3 Adaptación del Modelo de Mensajes JMS En esta sección, analizaremos los aspectos de nuestra adaptación de la especificación relacionados con el llamado Modelo de Mensajes JMS [5]. Según esto, los mensajes JMS se caracterizan por algunas propiedades definidas utilizando el campo de encabezado, que contiene valores que son utilizados tanto por los clientes como por los proveedores para su entrega. Los aspectos discutidos en el resto de esta sección son válidos para ambos modelos (punto a punto y publicar-suscribir). Un mensaje JMS puede ser persistente o no persistente. Según la especificación de JMS, los mensajes persistentes deben entregarse con un grado de confiabilidad mayor que los no persistentes. Sin embargo, vale la pena señalar que no es posible garantizar la fiabilidad de una sola vez para mensajes persistentes según lo definido en la especificación, ya que, como discutimos en la subsección anterior, el protocolo epidémico subyacente solo puede garantizar la entrega de mejor esfuerzo. Sin embargo, los clientes mantienen una lista de los identificadores de los mensajes recibidos recientemente para evitar la entrega de mensajes duplicados. En otras palabras, proporcionamos a las aplicaciones una fiabilidad inmediata para ambos tipos de mensajes. Para implementar diferentes niveles de confiabilidad, EMMA trata de manera diferente los mensajes persistentes y no persistentes durante la ejecución del protocolo epidémico de anti-entropía. Dado que el espacio del búfer de mensajes es limitado, los mensajes persistentes se replican preferentemente utilizando el espacio libre disponible. Si esto es insuficiente y hay mensajes no persistentes presentes en el búfer, estos son reemplazados. Solo se notifican a los remitentes las entregas exitosas de los mensajes persistentes. Según la especificación de JMS, es posible asignar una prioridad a cada mensaje. Los mensajes con prioridades más altas se entregan de manera preferencial. Como se discutió anteriormente, los mensajes persistentes tienen prioridad sobre los no persistentes. La selección adicional se basa en sus prioridades. Los mensajes con prioridades más altas son tratados de manera preferencial. De hecho, si no hay suficiente espacio para replicar todos los mensajes persistentes, se utiliza un mecanismo basado en prioridades para eliminar y replicar los mensajes no persistentes (y, si es necesario, los mensajes persistentes). Los mensajes se eliminan de los buffers utilizando el valor de tiempo de expiración que puede ser establecido por los remitentes. Esta es una forma de liberar espacio en los búferes (se eliminan preferentemente los mensajes más antiguos en casos de conflicto); para eliminar réplicas obsoletas en el sistema; y para limitar el tiempo durante el cual los destinos deben mantener los identificadores de mensajes para desechar duplicados. Mecanismos de fiabilidad y de acuse de recibo Como ya se discutió, la entrega de mensajes como máximo una vez es lo mejor que se puede lograr en términos de semántica de entrega en entornos ad-hoc parcialmente conectados. Sin embargo, es posible mejorar la confiabilidad del sistema con mecanismos de acuse de recibo eficientes. EMMA proporciona un mecanismo de notificación de fallos a las aplicaciones si no se recibe el acuse de recibo dentro de un tiempo límite dado (que puede ser configurado por los desarrolladores de aplicaciones). Este mecanismo es el que distingue la entrega de mensajes persistentes y no persistentes en nuestra implementación de JMS: las entregas de los primeros son notificadas a los remitentes, mientras que los de los segundos no lo son. Utilizamos mensajes de acuse de recibo no solo para informar a los remitentes sobre la entrega exitosa de los mensajes, sino también para eliminar las réplicas de los mensajes entregados que aún están presentes en la red. Cada anfitrión mantiene una lista de los mensajes Middleware para la Computación Pervasiva y Ad-hoc 124 entregados con éxito que se actualiza como parte del proceso normal de intercambio de información entre los anfitriones. Las listas se intercambian durante los primeros pasos del protocolo de epidemia anti-entropía con una frecuencia predefinida. En el caso de mensajes con múltiples destinatarios, también se almacena una lista de los destinatarios reales. Cuando un anfitrión recibe la lista, verifica su búfer de mensajes y lo actualiza de acuerdo con las siguientes reglas: (1) si un mensaje tiene un único destinatario y ha sido entregado, se elimina del búfer; (2) si un mensaje tiene múltiples destinatarios, se eliminan los identificadores de los anfitriones a los que se ha entregado de la lista de destinatarios asociada. Si la longitud resultante de la lista de destinatarios es cero, el mensaje se elimina del búfer. Estas listas tienen, claramente, dimensiones finitas y se implementan como colas circulares. Este mecanismo simple, junto con el uso de marcas de tiempo de expiración, garantiza que las antiguas notificaciones de acuse de recibo sean eliminadas del sistema después de un período de tiempo limitado. Para mejorar la confiabilidad de EMMA, se podría desarrollar un mecanismo de diseño para la replicación inteligente de colas y temas basado en la información de contexto. Sin embargo, esto aún no forma parte de la arquitectura actual de EMMA. 5. IMPLEMENTACIÓN Y EVALUACIÓN PRELIMINAR Implementamos un prototipo de nuestra plataforma utilizando el Perfil Personal J2ME. El tamaño del ejecutable es de aproximadamente 250KB, incluido el archivo jar de JMS 1.1; esta es una cifra perfectamente aceptable dada la memoria disponible de los dispositivos móviles actuales en el mercado. Probamos nuestro prototipo en PDAs HP iPaq con Linux, interconectados con WaveLan, y en varios laptops con la misma interfaz de red. También evaluamos la plataforma de middleware utilizando el simulador de eventos discretos OMNET++ [17] para explorar una variedad de escenarios móviles que incorporaban un número más realista de hosts que el que se podía lograr experimentalmente. Más específicamente, evaluamos el rendimiento del sistema en términos de ratio de entrega y retraso promedio, variando la densidad de población y el tamaño del búfer, y utilizando mensajes persistentes y no persistentes con diferentes prioridades. Los resultados de la simulación muestran que el rendimiento de EMMAs, en términos de ratio de entrega y retraso de mensajes persistentes con prioridades más altas, es bueno. En general, es evidente que la proporción de entrega está fuertemente relacionada con el dimensionamiento correcto de los búferes para el retraso máximo aceptable. Además, los algoritmos epidémicos son capaces de garantizar una alta tasa de entrega si se evalúa el rendimiento durante un intervalo de tiempo suficiente para la difusión de las réplicas de los mensajes (es decir, la propagación de la infección) en una gran parte de la red ad-hoc. Una consecuencia del problema de dimensionamiento es que la escalabilidad puede verse seriamente afectada en middleware peer-to-peer para computación móvil debido a la escasez de recursos de los dispositivos (memoria limitada para almacenar temporalmente mensajes) y al número de posibles interconexiones en entornos ad-hoc. Lo peor es que las formas comunes de organización comercial y social (seis grados de separación) significan que incluso valores modestos de TTL en los mensajes provocarán una difusión generalizada de mensajes epidémicos. Este problema surge debido a la falta de inteligencia en el protocolo de la epidemia, y puede ser abordado seleccionando nodos portadores para los mensajes con mayor cuidado. Sin embargo, los detalles de este proceso están fuera del alcance de este documento (pero pueden encontrarse en [13]) y no afectan la base en la que se basa el middleware EMMA: la capacidad de entregar mensajes de forma asincrónica. 6. VISIÓN CRÍTICA DEL ESTADO DEL ARTE El diseño de plataformas de middleware para la computación móvil requiere que los investigadores respondan a preguntas nuevas y fundamentalmente diferentes; simplemente asumir la presencia de porciones cableadas de la red en las que pueda residir la funcionalidad centralizada no es generalizable. Por lo tanto, es necesario investigar nuevos principios de diseño y idear patrones arquitectónicos que difieran de los tradicionalmente utilizados en el diseño de middleware para sistemas fijos. Como ejemplo, considera la reciente tendencia de superposición de capas en redes ad-hoc [1]. Esta es una forma de replantear el diseño de sistemas de software, abandonando explícitamente las formas clásicas de estratificación, ya que, aunque esta separación de preocupaciones permite la portabilidad, lo hace a expensas de posibles ganancias de eficiencia. Creemos que es posible ver nuestro enfoque como una instancia de superposición de capas. De hecho, hemos añadido el protocolo de red epidémica a nivel de middleware y, al mismo tiempo, hemos utilizado el protocolo de red síncrono existente si está presente tanto en la entrega de mensajes (capas tradicionales) como en informar al middleware sobre cuándo pueden entregarse los mensajes revelando detalles de las tablas de reenvío (violación de capas). Por esta razón, preferimos considerarlos conjuntamente como la capa de comunicación de nuestra plataforma, proporcionando juntos una entrega de mensajes más eficiente. Otro aspecto interesante es la explotación del contexto y la información del sistema para mejorar el rendimiento de las plataformas de middleware móvil. Una vez más, como resultado de adoptar una metodología de capas cruzadas, podemos construir sistemas que recopilan información del sistema operativo subyacente y los componentes de comunicación para permitir la adaptación del comportamiento. Podemos resumir este enfoque de diseño conceptual diciendo que las plataformas de middleware deben ser no solo conscientes del contexto (es decir, deben ser capaces de extraer y analizar información del contexto circundante) sino también conscientes del sistema (es decir, deben ser capaces de recopilar información de los componentes de software y hardware del sistema móvil). Se han desarrollado varios sistemas de middleware para admitir redes ad hoc con el uso de comunicación asíncrona (como LIME, XMIDDLE, STEAM [11]). En particular, la plataforma STEAM es un ejemplo interesante de middleware basado en eventos para redes ad hoc, que proporciona entrega de mensajes con conciencia de ubicación y una solución efectiva para el filtrado de eventos. Una discusión sobre JMS, y su realización móvil, ya ha sido realizada en las Secciones 4 y 2. La empresa suiza Softwired ha desarrollado el primer middleware JMS para computación móvil, llamado iBus Mobile [10]. Los componentes principales de esta arquitectura típicamente basada en infraestructura son el proveedor de JMS, la llamada puerta de enlace móvil de JMS, que se despliega en un host fijo y una biblioteca de cliente JMS ligera. El gateway se utiliza para la comunicación entre el servidor de aplicaciones y los dispositivos móviles. El proveedor JMS ve la pasarela como un cliente JMS normal. El proveedor JMS puede ser cualquier servidor de aplicaciones habilitado para JMS, como BEA Weblogic. Pronto [19] es un ejemplo de un sistema de middleware basado en mensajería, diseñado específicamente para entornos móviles. La plataforma está compuesta por tres clases de componentes: clientes móviles que implementan la especificación JMS, pasarelas que controlan el tráfico, garantizando eficiencia y posibles personalizaciones de usuario utilizando diferentes complementos y servidores JMS. Diferentes configuraciones de estos componentes son posibles; con respecto a las aplicaciones de redes móviles ad hoc, la más interesante es Serverless JMS. El objetivo de esta configuración es adaptar JMS a un modelo descentralizado. El modelo de publicación-suscripción explota la eficiencia y la escalabilidad del protocolo de multidifusión IP subyacente. Se proporcionan servicios de entrega de mensajes poco confiables y confiables: la confiabilidad se logra a través de un protocolo basado en acuse de recibo negativo. Pronto representa una buena solución para redes móviles basadas en infraestructura, pero no se dirige adecuadamente a entornos ad-hoc, ya que los nodos móviles dependen de servidores fijos para el intercambio de mensajes. Existen otras MOM implementadas para entornos móviles; sin embargo, suelen ser extensiones sencillas de middleware existente [8]. La única implementación de MOM específicamente diseñada para redes móviles ad-hoc fue desarrollada en la Universidad de Newcastle [18]. Este trabajo es nuevamente una adaptación de JMS; el enfoque de esa implementación se centra en la comunicación de grupo y el uso de algoritmos de enrutamiento a nivel de aplicación para la entrega de mensajes por tema. Sin embargo, hay una serie de diferencias en el enfoque de nuestro trabajo. La importancia que atribuimos a las desconexiones hace que la persistencia sea un requisito vital para cualquier middleware que necesite ser utilizado en redes móviles ad-hoc. Los autores de [18] señalan la persistencia como un posible trabajo futuro, sin considerar el hecho de que enrutar un mensaje a un host no conectado resultará en un fallo de entrega. Esta es una limitación notable en entornos móviles donde las desconexiones impredecibles son la norma en lugar de la excepción. 7. MAPA Y CONCLUSIONES La comunicación asincrónica es un paradigma de comunicación útil para las redes móviles ad-hoc, ya que permite a los hosts llegar, irse y recoger mensajes cuando sea conveniente, teniendo en cuenta también la disponibilidad de sus recursos (por ejemplo, energía, niveles de conectividad). En este artículo hemos descrito el estado del arte en términos de MOM para sistemas móviles. También hemos demostrado una adaptación de prueba de concepto de JMS al escenario extremo de redes móviles ad-hoc parcialmente conectadas. Hemos descrito y discutido las características y diferencias de nuestra solución con respecto a las implementaciones tradicionales de JMS y las adaptaciones existentes para entornos móviles. Sin embargo, también se deben investigar los compromisos entre el enrutamiento a nivel de aplicación y el uso de recursos, ya que los dispositivos móviles suelen tener escasez de energía/recursos. Una limitación clave de este trabajo es el algoritmo epidémico que tiene un rendimiento deficiente y un avance importante en la practicabilidad de este trabajo requiere un algoritmo que equilibre mejor las necesidades de eficiencia y probabilidad de entrega de mensajes. Actualmente estamos trabajando en algoritmos y protocolos que, aprovechando técnicas probabilísticas y estadísticas sobre la base de pequeñas cantidades de información intercambiada, son capaces de mejorar considerablemente la eficiencia en términos de recursos (memoria, ancho de banda, etc.) y la confiabilidad de nuestra plataforma de middleware [13]. Un desarrollo de investigación futurista, que podría llevar estas ideas de adaptación de middleware de mensajería para entornos móviles más allá, es la introducción de extensiones de comunicación más orientadas a la movilidad, como el soporte de geocast (es decir, la capacidad de enviar mensajes a áreas geográficas específicas). REFERENCIAS [1] M. Conti, G. Maselli, G. Turi y S. Giordano. Diseño de <br>redes móviles ad-hoc</br> con interconexión de capas. IEEE Computer, 37(2):48-51, febrero de 2004. [2] A. Demers, D. Greene, C. Hauser, W. Irish, J. Larson, S. Shenker, H. Sturgis, D. Swinehart y D. Terry. Algoritmos de epidemia para el mantenimiento de bases de datos replicadas. En el Sexto Simposio sobre Principios de Computación Distribuida, páginas 1-12, agosto de 1987. [3] A. Doria, M. Uden y D. P. Pandey. Proporcionando conectividad a la comunidad nómada Saami. En Actas de la Segunda Conferencia Internacional sobre Diseño Colaborativo Abierto para la Innovación Sostenible, diciembre de 2002. [4] M. Haahr, R. Cunningham y V. Cahill. Aplicaciones CORBA en un entorno móvil. En la 5ª Conferencia Internacional sobre Computación y Redes Móviles (MOBICOM99), páginas 36-47. ACM, agosto de 1999. [5] M. Hapner, R. Burridge, R. Sharma, J. Fialli y K. Stout. Especificación del Servicio de Mensajes Java Versión 1.1. Sun Microsystems, Inc., abril de 2002. http://java.sun.com/products/jms/. [6] J. Hart. WebSphere MQ: Conectando sus aplicaciones sin programación compleja. IBM WebSphere Software White Papers, 2003. [7] S. Hayward y M. Pezzini. Casando Middleware y Computación Móvil. Informe de investigación del Grupo Gartner, septiembre de 2001. [8] IBM. WebSphere MQ EveryPlace Versión 2.0, noviembre de 2002. http://www-3.ibm.com/software/integration/wmqe/. [9] UIT. Conectando comunidades remotas. Documentos de la Cumbre Mundial sobre la Sociedad de la Información, 2003. http://www.itu.int/osg/spu/wsis-themes. [10] S. Maffeis. Presentando JMS inalámbrico. Softwired AG, www.sofwired-inc.com, 2002. [11] C. Mascolo, L. Capra y W. Emmerich. Middleware para Computación Móvil. En E. Gregori, G. Anastasi y S. Basagni, editores, Conferencias Avanzadas sobre Redes, volumen 2497 de las Notas de Conferencias en Ciencias de la Computación, páginas 20-58. Springer Verlag, 2002. [12] Microsoft. \n\nSpringer Verlag, 2002. [12] Microsoft. Documentación de Microsoft Message Queuing (MSMQ) Versión 2.0. [13] M. Musolesi, S. Hailes y C. Mascolo. Enrutamiento adaptativo para redes ad-hoc móviles intermitentemente conectadas. Informe técnico, Nota de Investigación UCL-CS, julio de 2004. Enviado para su publicación. [14] Sun Microsystems. Documentación de Java Naming and Directory Interface (JNDI) Versión 1.2. 2003. http://java.sun.com/products/jndi/. [15] Sun Microsystems. Especificación de Jini Versión 2.0, 2003. http://java.sun.com/products/jini/. [16] A. Vahdat y D. Becker. Enrutamiento epidémico para redes ad-hoc parcialmente conectadas. Informe técnico CS-2000-06, Departamento de Ciencias de la Computación, Universidad de Duke, 2000. [17] A. Vargas. El sistema de simulación de eventos discretos OMNeT++. En Actas de la Multiconferencia Europea de Simulación (ESM2001), Praga, junio de 2001. [18] E. Vollset, D. Ingham y P. Ezhilchelvan. JMS en redes móviles ad-hoc. En Comunicaciones Inalámbricas Personales (PWC), páginas 40-52, Venecia, septiembre de 2003. [19] E. Yoneki y J. Bacon. Pronto: Mobilegateway con paradigma de publicación-suscripción sobre red inalámbrica. Informe Técnico 559, Universidad de Cambridge, Laboratorio de Computación, febrero de 2003. Middleware para Computación Pervasive y ad-hoc 126 ",
            "candidates": [],
            "error": [
                [
                    ""
                ]
            ]
        },
        "context awareness": {
            "translated_key": "Conciencia del contexto",
            "is_in_text": false,
            "original_annotated_sentences": [
                "Adapting Asynchronous Messaging Middleware to ad-hoc Networking Mirco Musolesi Dept.",
                "of Computer Science, University College London Gower Street, London WC1E 6BT, United Kingdom m.musolesi@cs.ucl.ac.uk Cecilia Mascolo Dept. of Computer Science, University College London Gower Street, London WC1E 6BT, United Kingdom c.mascolo@cs.ucl.ac.uk Stephen Hailes Dept. of Computer Science, University College London Gower Street, London WC1E 6BT, United Kingdom s.hailes@cs.ucl.ac.uk ABSTRACT The characteristics of mobile environments, with the possibility of frequent disconnections and fluctuating bandwidth, have forced a rethink of traditional middleware.",
                "In particular, the synchronous communication paradigms often employed in standard middleware do not appear to be particularly suited to ad-hoc environments, in which not even the intermittent availability of a backbone network can be assumed.",
                "Instead, asynchronous communication seems to be a generally more suitable paradigm for such environments.",
                "Message oriented middleware for traditional systems has been developed and used to provide an asynchronous paradigm of communication for distributed systems, and, recently, also for some specific mobile computing systems.",
                "In this paper, we present our experience in designing, implementing and evaluating EMMA (Epidemic Messaging Middleware for ad-hoc networks), an adaptation of Java Message Service (JMS) for mobile ad-hoc environments.",
                "We discuss in detail the design challenges and some possible solutions, showing a concrete example of the feasibility and suitability of the application of the asynchronous paradigm in this setting and outlining a research roadmap for the coming years.",
                "Categories and Subject Descriptors C.2.4 [Computer-Communication Networks]: Distributed Systems-Distributed Applications; C.2.1 [Network Architecture and Design]: Wireless Communication General Terms DESIGN, ALGORITHMS 1.",
                "INTRODUCTION With the increasing popularity of mobile devices and their widespread adoption, there is a clear need to allow the development of a broad spectrum of applications that operate effectively over such an environment.",
                "Unfortunately, this is far from simple: mobile devices are increasingly heterogeneous in terms of processing capabilities, memory size, battery capacity, and network interfaces.",
                "Each such configuration has substantially different characteristics that are both statically different - for example, there is a major difference in capability between a Berkeley mote and an 802.11g-equipped laptop - and that vary dynamically, as in situations of fluctuating bandwidth and intermittent connectivity.",
                "Mobile ad hoc environments have an additional element of complexity in that they are entirely decentralised.",
                "In order to craft applications for such complex environments, an appropriate form of middleware is essential if cost effective development is to be achieved.",
                "In this paper, we examine one of the foundational aspects of middleware for mobile ad-hoc environments: that of the communication primitives.",
                "Traditionally, the most frequently used middleware primitives for communication assume the simultaneous presence of both end points on a network, since the stability and pervasiveness of the networking infrastructure is not an unreasonable assumption for most wired environments.",
                "In other words, most communication paradigms are synchronous: object oriented middleware such as CORBA and Java RMI are typical examples of middleware based on synchronous communication.",
                "In recent years, there has been growing interest in platforms based on asynchronous communication paradigms, such as publish-subscribe systems [6]: these have been exploited very successfully where there is application level asynchronicity.",
                "From a Gartner Market Report [7]: Given messageoriented-middlewares (MOM) popularity, scalability, flexibility, and affinity with mobile and wireless architectures, by 2004, MOM will emerge as the dominant form of communication middleware for linking mobile and enterprise applications (0.7 probability)....",
                "Moreover, in mobile ad-hoc systems, the likelihood of network fragmentation means that synchronous communication may in any case be impracticable, giving situations in which delay tolerant asynchronous traffic is the only form of traffic that could be supported. 121 Middleware 2004 Companion Middleware for mobile ad-hoc environments must therefore support semi-synchronous or completely asynchronous communication primitives if it is to avoid substantial limitations to its utility.",
                "Aside from the intellectual challenge in supporting this model, this work is also interesting because there are a number of practical application domains in allowing inter-community communication in undeveloped areas of the globe.",
                "Thus, for example, projects that have been carried out to help populations that live in remote places of the globe such as Lapland [3] or in poor areas that lack fixed connectivity infrastructure [9].",
                "There have been attempts to provide mobile middleware with these properties, including STEAM, LIME, XMIDDLE, Bayou (see [11] for a more complete review of mobile middleware).",
                "These models differ quite considerably from the existing traditional middleware in terms of primitives provided.",
                "Furthermore, some of them fail in providing a solution for the true ad-hoc scenarios.",
                "If the projected success of MOM becomes anything like a reality, there will be many programmers with experience of it.",
                "The ideal solution to the problem of middleware for ad-hoc systems is, then, to allow programmers to utilise the same paradigms and models presented by common forms of MOM and to ensure that these paradigms are supportable within the mobile environment.",
                "This approach has clear advantages in allowing applications developed on standard middleware platforms to be easily deployed on mobile devices.",
                "Indeed, some research has already led to the adaptation of traditional middleware platforms to mobile settings, mainly to provide integration between mobile devices and existing fixed networks in a nomadic (i.e., mixed) environment [4].",
                "With respect to message oriented middleware, the current implementations, however, either assume the existence of a backbone network to which the mobile hosts connect from time to time while roaming [10], or assume that nodes are always somehow reachable through a path [18].",
                "No adaptation to heterogeneous or completely ad-hoc scenarios, with frequent disconnection and periodically isolated clouds of hosts, has been attempted.",
                "In the remainder of this paper we describe an initial attempt to adapt message oriented middleware to suit mobile and, more specifically, mobile ad-hoc networks.",
                "In our case, we elected to examine JMS, as one of the most widely known MOM systems.",
                "In the latter part of this paper, we explore the limitations of our results and describe the plans we have to take the work further. 2.",
                "MESSAGE ORIENTED MIDDLEWARE AND JAVA MESSAGE SERVICE (JMS) Message-oriented middleware systems support communication between distributed components via message-passing: the sender sends a message to identified queues, which usually reside on a server.",
                "A receiver retrieves the message from the queue at a different time and may acknowledge the reply using the same asynchronous mechanism.",
                "Message-oriented middleware thus supports asynchronous communication in a very natural way, achieving de-coupling of senders and receivers.",
                "A sender is able to continue processing as soon as the middleware has accepted the message; eventually, the receiver will send an acknowledgment message and the sender will be able to collect it at a convenient time.",
                "However, given the way they are implemented, these middleware systems usually require resource-rich devices, especially in terms of memory and disk space, where persistent queues of messages that have been received but not yet processed, are stored.",
                "Sun Java Message Service [5], IBM WebSphere MQ [6], Microsoft MSMQ [12] are examples of very successful message-oriented middleware for traditional distributed systems.",
                "The Java Messaging Service (JMS) is a collection of interfaces for asynchronous communication between distributed components.",
                "It provides a common way for Java programs to create, send and receive messages.",
                "JMS users are usually referred to as clients.",
                "The JMS specification further defines providers as the components in charge of implementing the messaging system and providing the administrative and control functionality (i.e., persistence and reliability) required by the system.",
                "Clients can send and receive messages, asynchronously, through the JMS provider, which is in charge of the delivery and, possibly, of the persistence of the messages.",
                "There are two types of communication supported: point to point and publish-subscribe models.",
                "In the point to point model, hosts send messages to queues.",
                "Receivers can be registered with some specific queues, and can asynchronously retrieve the messages and then acknowledge them.",
                "The publish-subscribe model is based on the use of topics that can be subscribed to by clients.",
                "Messages are sent to topics by other clients and are then received in an asynchronous mode by all the subscribed clients.",
                "Clients learn about the available topics and queues through Java Naming and Directory Interface (JNDI) [14].",
                "Queues and topics are created by an administrator on the provider and are registered with the JNDI interface for look-up.",
                "In the next section, we introduce the challenges of mobile networks, and show how JMS can be adapted to cope with these requirements. 3.",
                "JMS FOR MOBILE COMPUTING Mobile networks vary very widely in their characteristics, from nomadic networks in which modes relocate whilst offline through to ad-hoc networks in which modes move freely and in which there is no infrastructure.",
                "Mobile ad-hoc networks are most generally applicable in situations where survivability and instant deployability are key: most notably in military applications and disaster relief.",
                "In between these two types of mobile networks, there are, however, a number of possible heterogeneous combinations, where nomadic and ad-hoc paradigms are used to interconnect totally unwired areas to more structured networks (such as a LAN or the Internet).",
                "Whilst the JMS specification has been extensively implemented and used in traditional distributed systems, adaptations for mobile environments have been proposed only recently.",
                "The challenges of porting JMS to mobile settings are considerable; however, in view of its widespread acceptance and use, there are considerable advantages in allowing the adaptation of existing applications to mobile environments and in allowing the interoperation of applications in the wired and wireless regions of a network.",
                "In [10], JMS was adapted to a nomadic mobile setting, where mobile hosts can be JMS clients and communicate through the JMS provider that, however, sits on a backbone network, providing reliability and persistence.",
                "The client prototype presented in [10] is very lightweight, due to the delegation of all the heavyweight functionality to the Middleware for Pervasive and ad-hoc Computing 122 provider on the wired network.",
                "However, this approach is somewhat limited in terms of widespread applicability and scalability as a consequence of the concentration of functionality in the wired portion of the network.",
                "If JMS is to be adapted to completely ad-hoc environments, where no fixed infrastructure is available, and where nodes change location and status very dynamically, more issues must be taken into consideration.",
                "Firstly, discovery needs to use a resilient but distributed model: in this extremely dynamic environment, static solutions are unacceptable.",
                "As discussed in Section 2, a JMS administrator defines queues and topics on the provider.",
                "Clients can then learn about them using the Java Naming and Directory Interface (JNDI).",
                "However, due to the way JNDI is designed, a JNDI node (or more than one) needs to be in reach in order to obtain a binding of a name to an address (i.e., knowing where a specific queue/topic is).",
                "In mobile ad-hoc environments, the discovery process cannot assume the existence of a fixed set of discovery servers that are always reachable, as this would not match the dynamicity of ad-hoc networks.",
                "Secondly, a JMS Provider, as suggested by the JMS specification, also needs to be reachable by each node in the network, in order to communicate.",
                "This assumes a very centralised architecture, which again does not match the requirements of a mobile ad-hoc setting, in which nodes may be moving and sparse: a more distributed and dynamic solution is needed.",
                "Persistence is, however, essential functionality in asynchronous communication environments as hosts are, by definition, connected at different times.",
                "In the following section, we will discuss our experience in designing and implementing JMS for mobile ad-hoc networks. 4.",
                "JMSFOR MOBILE ad-hoc NETWORKS 4.1 Adaptation of JMS for Mobile ad-hoc Networks Developing applications for mobile networks is yet more challenging: in addition to the same considerations as for infrastructured wireless environments, such as the limited device capabilities and power constraints, there are issues of rate of change of network connectivity, and the lack of a static routing infrastructure.",
                "Consequently, we now describe an initial attempt to adapt the JMS specification to target the particular requirements related to ad-hoc scenarios.",
                "As discussed in Section 3, a JMS application can use either the point to point and the publish-subscribe styles of messaging.",
                "Point to Point Model The point to point model is based on the concept of queues, that are used to enable asynchronous communication between the producer of a message and possible different consumers.",
                "In our solution, the location of queues is determined by a negotiation process that is application dependent.",
                "For example, let us suppose that it is possible to know a priori, or it is possible to determine dynamically, that a certain host is the receiver of the most part of messages sent to a particular queue.",
                "In this case, the optimum location of the queue may well be on this particular host.",
                "In general, it is worth noting that, according to the JMS specification and suggested design patterns, it is common and preferable for a client to have all of its messages delivered to a single queue.",
                "Queues are advertised periodically to the hosts that are within transmission range or that are reachable by means of the underlying synchronous communication protocol, if provided.",
                "It is important to note that, at the middleware level, it is logically irrelevant whether or not the network layer implements some form of ad-hoc routing (though considerably more efficient if it does); the middleware only considers information about which nodes are actively reachable at any point in time.",
                "The hosts that receive advertisement messages add entries to their JNDI registry.",
                "Each entry is characterized by a lease (a mechanism similar to that present in Jini [15]).",
                "A lease represents the time of validity of a particular entry.",
                "If a lease is not refreshed (i.e, its life is not extended), it can expire and, consequently, the entry is deleted from the registry.",
                "In other words, the host assumes that the queue will be unreachable from that point in time.",
                "This may be caused, for example, if a host storing the queue becomes unreachable.",
                "A host that initiates a discovery process will find the topics and the queues present in its connected portion of the network in a straightforward manner.",
                "In order to deliver a message to a host that is not currently in reach1 , we use an asynchronous epidemic routing protocol that will be discussed in detail in Section 4.2.",
                "If two hosts are in the same cloud (i.e., a connected path exists between them), but no synchronous protocol is available, the messages are sent using the epidemic protocol.",
                "In this case, the delivery latency will be low as a result of the rapidity of propagation of the infection in the connected cloud (see also the simulation results in Section 5).",
                "Given the existence of an epidemic protocol, the discovery mechanism consists of advertising the queues to the hosts that are currently unreachable using analogous mechanisms.",
                "Publish-Subscribe Model In the publish-subscribe model, some of the hosts are similarly designated to hold topics and store subscriptions, as before.",
                "Topics are advertised through the registry in the same way as are queues, and a client wishing to subscribe to a topic must register with the client holding the topic.",
                "When a client wishes to send a message to the topic list, it sends it to the topic holder (in the same way as it would send a message to a queue).",
                "The topic holder then forwards the message to all subscribers, using the synchronous protocol if possible, the epidemic protocol otherwise.",
                "It is worth noting that we use a single message with multiple recipients, instead of multiple messages with multiple recipients.",
                "When a message is delivered to one of the subscribers, this recipient is deleted from the list.",
                "In order to delete the other possible replicas, we employ acknowledgment messages (discussed in Section 4.4), returned in the same way as a normal message.",
                "We have also adapted the concepts of durable and non durable subscriptions for ad-hoc settings.",
                "In fixed platforms, durable subscriptions are maintained during the disconnections of the clients, whether these are intentional or are the result of failures.",
                "In traditional systems, while a durable subscriber is disconnected from the server, it is responsible for storing messages.",
                "When the durable subscriber reconnects, the server sends it all unexpired messages.",
                "The problem is that, in our scenario, disconnections are the norm 1 In theory, it is not possible to send a message to a peer that has never been reachable in the past, since there can be no entry present in the registry.",
                "However, to overcome this possible limitation, we provide a primitive through which information can be added to the registry without using the normal channels. 123 Middleware 2004 Companion rather than the exception.",
                "In other words, we cannot consider disconnections as failures.",
                "For these reasons, we adopt a slightly different semantics.",
                "With respect to durable subscriptions, if a subscriber becomes disconnected, notifications are not stored but are sent using the epidemic protocol rather than the synchronous protocol.",
                "In other words, durable notifications remain valid during the possible disconnections of the subscriber.",
                "On the other hand, if a non-durable subscriber becomes disconnected, its subscription is deleted; in other words, during disconnections, notifications are not sent using the epidemic protocol but exploit only the synchronous protocol.",
                "If the topic becomes accessible to this host again, it must make another subscription in order to receive the notifications.",
                "Unsubscription messages are delivered in the same way as are subscription messages.",
                "It is important to note that durable subscribers have explicitly to unsubscribe from a topic in order to stop the notification process; however, all durable subscriptions have a predefined expiration time in order to cope with the cases of subscribers that do not meet again because of their movements or failures.",
                "This feature is clearly provided to limit the number of the unnecessary messages sent around the network. 4.2 Message Delivery using Epidemic Routing In this section, we examine one possible mechanism that will allow the delivery of messages in a partially connected network.",
                "The mechanism we discuss is intended for the purposes of demonstrating feasibility; more efficient communication mechanisms for this environment are themselves complex, and are the subject of another paper [13].",
                "The asynchronous message delivery described above is based on a typical pure epidemic-style routing protocol [16].",
                "A message that needs to be sent is replicated on each host in reach.",
                "In this way, copies of the messages are quickly spread through connected networks, like an infection.",
                "If a host becomes connected to another cloud of mobile nodes, during its movement, the message spreads through this collection of hosts.",
                "Epidemic-style replication of data and messages has been exploited in the past in many fields starting with the distributed database systems area [2].",
                "Within epidemic routing, each host maintains a buffer containing the messages that it has created and the replicas of the messages generated by the other hosts.",
                "To improve the performance, a hash-table indexes the content of the buffer.",
                "When two hosts connect, the host with the smaller identifier initiates a so-called anti-entropy session, sending a list containing the unique identifiers of the messages that it currently stores.",
                "The other host evaluates this list and sends back a list containing the identifiers it is storing that are not present in the other host, together with the messages that the other does not have.",
                "The host that has started the session receives the list and, in the same way, sends the messages that are not present in the other host.",
                "Should buffer overflow occur, messages are dropped.",
                "The reliability offered by this protocol is typically best effort, since there is no guarantee that a message will eventually be delivered to its recipient.",
                "Clearly, the delivery ratio of the protocol increases proportionally to the maximum allowed delay time and the buffer size in each host (interesting simulation results may be found in [16]). 4.3 Adaptation of the JMS Message Model In this section, we will analyse the aspects of our adaptation of the specification related to the so-called JMS Message Model [5].",
                "According to this, JMS messages are characterised by some properties defined using the header field, which contains values that are used by both clients and providers for their delivery.",
                "The aspects discussed in the remainder of this section are valid for both models (point to point and publish-subscribe).",
                "A JMS message can be persistent or non-persistent.",
                "According to the JMS specification, persistent messages must be delivered with a higher degree of reliability than the nonpersistent ones.",
                "However, it is worth noting that it is not possible to ensure once-and-only-once reliability for persistent messages as defined in the specification, since, as we discussed in the previous subsection, the underlying epidemic protocol can guarantee only best-effort delivery.",
                "However, clients maintain a list of the identifiers of the recently received messages to avoid the delivery of message duplicates.",
                "In other words, we provide the applications with at-mostonce reliability for both types of messages.",
                "In order to implement different levels of reliability, EMMA treats persistent and non-persistent messages differently, during the execution of the anti-entropy epidemic protocol.",
                "Since the message buffer space is limited, persistent messages are preferentially replicated using the available free space.",
                "If this is insufficient and non-persistent messages are present in the buffer, these are replaced.",
                "Only the successful deliveries of the persistent messages are notified to the senders.",
                "According to the JMS specification, it is possible to assign a priority to each message.",
                "The messages with higher priorities are delivered in a preferential way.",
                "As discussed above, persistent messages are prioritised above the non-persistent ones.",
                "Further selection is based on their priorities.",
                "Messages with higher priorities are treated in a preferential way.",
                "In fact, if there is not enough space to replicate all the persistent messages, a mechanism based on priorities is used to delete and replicate non-persistent messages (and, if necessary, persistent messages).",
                "Messages are deleted from the buffers using the expiration time value that can be set by senders.",
                "This is a way to free space in the buffers (one preferentially deletes older messages in cases of conflict); to eliminate stale replicas in the system; and to limit the time for which destinations must hold message identifiers to dispose of duplicates. 4.4 Reliability and Acknowledgment Mechanisms As already discussed, at-most-once message delivery is the best that can be achieved in terms of delivery semantics in partially connected ad-hoc settings.",
                "However, it is possible to improve the reliability of the system with efficient acknowledgment mechanisms.",
                "EMMA provides a mechanism for failure notification to applications if the acknowledgment is not received within a given timeout (that can be configured by application developers).",
                "This mechanism is the one that distinguishes the delivery of persistent and non-persistent messages in our JMS implementation: the deliveries of the former are notified to the senders, whereas the latter are not.",
                "We use acknowledgment messages not only to inform senders about the successful delivery of messages but also to delete the replicas of the delivered messages that are still present in the network.",
                "Each host maintains a list of the messages Middleware for Pervasive and ad-hoc Computing 124 successfully delivered that is updated as part of the normal process of information exchange between the hosts.",
                "The lists are exchanged during the first steps of the anti-entropic epidemic protocol with a certain predefined frequency.",
                "In the case of messages with multiple recipients, a list of the actual recipients is also stored.",
                "When a host receives the list, it checks its message buffer and updates it according to the following rules: (1) if a message has a single recipient and it has been delivered, it is deleted from the buffer; (2) if a message has multiple recipients, the identifiers of the delivered hosts are deleted from the associated list of recipients.",
                "If the resulting length of the list of recipients is zero, the message is deleted from the buffer.",
                "These lists have, clearly, finite dimensions and are implemented as circular queues.",
                "This simple mechanism, together with the use of expiration timestamps, guarantees that the old acknowledgment notifications are deleted from the system after a limited period of time.",
                "In order to improve the reliability of EMMA, a design mechanism for intelligent replication of queues and topics based on the context information could be developed.",
                "However this is not yet part of the current architecture of EMMA. 5.",
                "IMPLEMENTATION AND PRELIMINARY EVALUATION We implemented a prototype of our platform using the J2ME Personal Profile.",
                "The size of the executable is about 250KB including the JMS 1.1 jar file; this is a perfectly acceptable figure given the available memory of the current mobile devices on the market.",
                "We tested our prototype on HP IPaq PDAs running Linux, interconnected with WaveLan, and on a number of laptops with the same network interface.",
                "We also evaluated the middleware platform using the OMNET++ discrete event simulator [17] in order to explore a range of mobile scenarios that incorporated a more realistic number of hosts than was achievable experimentally.",
                "More specifically, we assessed the performance of the system in terms of delivery ratio and average delay, varying the density of population and the buffer size, and using persistent and non-persistent messages with different priorities.",
                "The simulation results show that the EMMAs performance, in terms of delivery ratio and delay of persistent messages with higher priorities, is good.",
                "In general, it is evident that the delivery ratio is strongly related to the correct dimensioning of the buffers to the maximum acceptable delay.",
                "Moreover, the epidemic algorithms are able to guarantee a high delivery ratio if one evaluates performance over a time interval sufficient for the dissemination of the replicas of messages (i.e., the infection spreading) in a large portion of the ad-hoc network.",
                "One consequence of the dimensioning problem is that scalability may be seriously impacted in peer-to-peer middleware for mobile computing due to the resource poverty of the devices (limited memory to store temporarily messages) and the number of possible interconnections in ad-hoc settings.",
                "What is worse is that common forms of commercial and social organisation (six degrees of separation) mean that even modest TTL values on messages will lead to widespread flooding of epidemic messages.",
                "This problem arises because of the lack of intelligence in the epidemic protocol, and can be addressed by selecting carrier nodes for messages with greater care.",
                "The details of this process are, however, outside the scope of this paper (but may be found in [13]) and do not affect the foundation on which the EMMA middleware is based: the ability to deliver messages asynchronously. 6.",
                "CRITICAL VIEW OF THE STATE OF THE ART The design of middleware platforms for mobile computing requires researchers to answer new and fundamentally different questions; simply assuming the presence of wired portions of the network on which centralised functionality can reside is not generalisable.",
                "Thus, it is necessary to investigate novel design principles and to devise architectural patterns that differ from those traditionally exploited in the design of middleware for fixed systems.",
                "As an example, consider the recent cross-layering trend in ad-hoc networking [1].",
                "This is a way of re-thinking software systems design, explicitly abandoning the classical forms of layering, since, although this separation of concerns afford portability, it does so at the expense of potential efficiency gains.",
                "We believe that it is possible to view our approach as an instance of cross-layering.",
                "In fact, we have added the epidemic network protocol at middleware level and, at the same time, we have used the existing synchronous network protocol if present both in delivering messages (traditional layering) and in informing the middleware about when messages may be delivered by revealing details of the forwarding tables (layer violation).",
                "For this reason, we prefer to consider them jointly as the communication layer of our platform together providing more efficient message delivery.",
                "Another interesting aspect is the exploitation of context and system information to improve the performance of mobile middleware platforms.",
                "Again, as a result of adopting a cross-layering methodology, we are able to build systems that gather information from the underlying operating system and communication components in order to allow for adaptation of behaviour.",
                "We can summarise this conceptual design approach by saying that middleware platforms must be not only context-aware (i.e., they should be able to extract and analyse information from the surrounding context) but also system-aware (i.e., they should be able to gather information from the software and hardware components of the mobile system).",
                "A number of middleware systems have been developed to support ad-hoc networking with the use of asynchronous communication (such as LIME, XMIDDLE, STEAM [11]).",
                "In particular, the STEAM platform is an interesting example of event-based middleware for ad-hoc networks, providing location-aware message delivery and an effective solution for event filtering.",
                "A discussion of JMS, and its mobile realisation, has already been conducted in Sections 4 and 2.",
                "The Swiss company Softwired has developed the first JMS middleware for mobile computing, called iBus Mobile [10].",
                "The main components of this typically infrastructure-based architecture are the JMS provider, the so-called mobile JMS gateway, which is deployed on a fixed host and a lightweight JMS client library.",
                "The gateway is used for the communication between the application server and mobile hosts.",
                "The gateway is seen by the JMS provider as a normal JMS client.",
                "The JMS provider can be any JMS-enabled application server, such as BEA Weblogic.",
                "Pronto [19] is an example of mid125 Middleware 2004 Companion dleware system based on messaging that is specifically designed for mobile environments.",
                "The platform is composed of three classes of components: mobile clients implementing the JMS specification, gateways that control traffic, guaranteeing efficiency and possible user customizations using different plug-ins and JMS servers.",
                "Different configurations of these components are possible; with respect to mobile ad hoc networks applications, the most interesting is Serverless JMS.",
                "The aim of this configuration is to adapt JMS to a decentralized model.",
                "The publish-subscribe model exploits the efficiency and the scalability of the underlying IP multicast protocol.",
                "Unreliable and reliable message delivery services are provided: reliability is provided through a negative acknowledgment-based protocol.",
                "Pronto represents a good solution for infrastructure-based mobile networks but it does not adequately target ad-hoc settings, since mobile nodes rely on fixed servers for the exchange of messages.",
                "Other MOM implemented for mobile environments exist; however, they are usually straightforward extensions of existing middleware [8].",
                "The only implementation of MOM specifically designed for mobile ad-hoc networks was developed at the University of Newcastle [18].",
                "This work is again a JMS adaptation; the focus of that implementation is on group communication and the use of application level routing algorithms for topic delivery of messages.",
                "However, there are a number of differences in the focus of our work.",
                "The importance that we attribute to disconnections makes persistence a vital requirement for any middleware that needs to be used in mobile ad-hoc networks.",
                "The authors of [18] signal persistence as possible future work, not considering the fact that routing a message to a non-connected host will result in delivery failure.",
                "This is a remarkable limitation in mobile settings where unpredictable disconnections are the norm rather than the exception. 7.",
                "ROADMAP AND CONCLUSIONS Asynchronous communication is a useful communication paradigm for mobile ad-hoc networks, as hosts are allowed to come, go and pick up messages when convenient, also taking account of their resource availability (e.g., power, connectivity levels).",
                "In this paper we have described the state of the art in terms of MOM for mobile systems.",
                "We have also shown a proof of concept adaptation of JMS to the extreme scenario of partially connected mobile ad-hoc networks.",
                "We have described and discussed the characteristics and differences of our solution with respect to traditional JMS implementations and the existing adaptations for mobile settings.",
                "However, trade-offs between application-level routing and resource usage should also be investigated, as mobile devices are commonly power/resource scarce.",
                "A key limitation of this work is the poorly performing epidemic algorithm and an important advance in the practicability of this work requires an algorithm that better balances the needs of efficiency and message delivery probability.",
                "We are currently working on algorithms and protocols that, exploiting probabilistic and statistical techniques on the basis of small amounts of exchanged information, are able to improve considerably the efficiency in terms of resources (memory, bandwidth, etc) and the reliability of our middleware platform [13].",
                "One futuristic research development, which may take these ideas of adaptation of messaging middleware for mobile environments further is the introduction of more mobility oriented communication extensions, for instance the support of geocast (i.e., the ability to send messages to specific geographical areas). 8.",
                "REFERENCES [1] M. Conti, G. Maselli, G. Turi, and S. Giordano.",
                "Cross-layering in Mobile ad-hoc Network Design.",
                "IEEE Computer, 37(2):48-51, February 2004. [2] A. Demers, D. Greene, C. Hauser, W. Irish, J. Larson, S. Shenker, H. Sturgis, D. Swinehart, and D. Terry.",
                "Epidemic Algorithms for Replicated Database Maintenance.",
                "In Sixth Symposium on Principles of Distributed Computing, pages 1-12, August 1987. [3] A. Doria, M. Uden, and D. P. Pandey.",
                "Providing connectivity to the Saami nomadic community.",
                "In Proceedings of the Second International Conference on Open Collaborative Design for Sustainable Innovation, December 2002. [4] M. Haahr, R. Cunningham, and V. Cahill.",
                "Supporting CORBA applications in a Mobile Environment.",
                "In 5th International Conference on Mobile Computing and Networking (MOBICOM99), pages 36-47.",
                "ACM, August 1999. [5] M. Hapner, R. Burridge, R. Sharma, J. Fialli, and K. Stout.",
                "Java Message Service Specification Version 1.1.",
                "Sun Microsystems, Inc., April 2002. http://java.sun.com/products/jms/. [6] J. Hart.",
                "WebSphere MQ: Connecting your applications without complex programming.",
                "IBM WebSphere Software White Papers, 2003. [7] S. Hayward and M. Pezzini.",
                "Marrying Middleware and Mobile Computing.",
                "Gartner Group Research Report, September 2001. [8] IBM.",
                "WebSphere MQ EveryPlace Version 2.0, November 2002. http://www-3.ibm.com/software/integration/wmqe/. [9] ITU.",
                "Connecting remote communities.",
                "Documents of the World Summit on Information Society, 2003. http://www.itu.int/osg/spu/wsis-themes. [10] S. Maffeis.",
                "Introducing Wireless JMS.",
                "Softwired AG, www.sofwired-inc.com, 2002. [11] C. Mascolo, L. Capra, and W. Emmerich.",
                "Middleware for Mobile Computing.",
                "In E. Gregori, G. Anastasi, and S. Basagni, editors, Advanced Lectures on Networking, volume 2497 of Lecture Notes in Computer Science, pages 20-58.",
                "Springer Verlag, 2002. [12] Microsoft.",
                "Microsoft Message Queuing (MSMQ) Version 2.0 Documentation. [13] M. Musolesi, S. Hailes, and C. Mascolo.",
                "Adaptive routing for intermittently connected mobile ad-hoc networks.",
                "Technical report, UCL-CS Research Note, July 2004.",
                "Submitted for Publication. [14] Sun Microsystems.",
                "Java Naming and Directory Interface (JNDI) Documentation Version 1.2. 2003. http://java.sun.com/products/jndi/. [15] Sun Microsystems.",
                "Jini Specification Version 2.0, 2003. http://java.sun.com/products/jini/. [16] A. Vahdat and D. Becker.",
                "Epidemic routing for Partially Connected ad-hoc Networks.",
                "Technical Report CS-2000-06, Department of Computer Science, Duke University, 2000. [17] A. Vargas.",
                "The OMNeT++ discrete event simulation system.",
                "In Proceedings of the European Simulation Multiconference (ESM2001), Prague, June 2001. [18] E. Vollset, D. Ingham, and P. Ezhilchelvan.",
                "JMS on Mobile ad-hoc Networks.",
                "In Personal Wireless Communications (PWC), pages 40-52, Venice, September 2003. [19] E. Yoneki and J. Bacon.",
                "Pronto: Mobilegateway with publish-subscribe paradigm over wireless network.",
                "Technical Report 559, University of Cambridge, Computer Laboratory, February 2003.",
                "Middleware for Pervasive and ad-hoc Computing 126"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [],
            "translated_text": "",
            "candidates": [],
            "error": [
                []
            ]
        }
    }
}