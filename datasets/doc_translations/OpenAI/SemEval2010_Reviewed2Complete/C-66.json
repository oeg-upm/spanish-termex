{
    "id": "C-66",
    "original_text": "Heuristics-Based Scheduling of Composite Web Service Workloads Thomas Phan Wen-Syan Li IBM Almaden Research Center 650 Harry Rd. San Jose, CA 95120 {phantom,wsl}@us.ibm.com ABSTRACT Web services can be aggregated to create composite workflows that provide streamlined functionality for human users or other systems. Although industry standards and recent research have sought to define best practices and to improve end-to-end workflow composition, one area that has not fully been explored is the scheduling of a workflows web service requests to actual service provisioning in a multi-tiered, multi-organisation environment. This issue is relevant to modern business scenarios where business processes within a workflow must complete within QoS-defined limits. Because these business processes are web service consumers, service requests must be mapped and scheduled across multiple web service providers, each with its own negotiated service level agreement. In this paper we provide heuristics for scheduling service requests from multiple business process workflows to web service providers such that a business value metric across all workflows is maximised. We show that a genetic search algorithm is appropriate to perform this scheduling, and through experimentation we show that our algorithm scales well up to a thousand workflows and produces better mappings than traditional approaches. Categories and Subject Descriptors C.2.4 [Computer-Communication Networks]: Distributed Systems-distributed applications; D.2.8 [Software Engineering]: Metrics-complexity measures, performance measures 1. INTRODUCTION Web services can be composed into workflows to provide streamlined end-to-end functionality for human users or other systems. Although previous research efforts have looked at ways to intelligently automate the composition of web services into workflows (e.g. [1, 9]), an important remaining problem is the assignment of web service requests to the underlying web service providers in a multi-tiered runtime scenario within constraints. In this paper we address this scheduling problem and examine means to manage a large number of business process workflows in a scalable manner. The problem of scheduling web service requests to providers is relevant to modern business domains that depend on multi-tiered service provisioning. Consider the example shown in Figure 1 that illustrates our problem space. Workflows comprise multiple related business processes that are web service consumers; here we assume that the workflows represent requested service from customers or automated systems and that the workflow has already been composed with an existing choreography toolkit. These workflows are then submitted to a portal (not shown) that acts as a scheduling agent between the web service consumers and the web service providers. In this example, a workflow could represent the actions needed to instantiate a vacation itinerary, where one business process requests booking an airline ticket, another business process requests a hotel room, and so forth. Each of these requests target a particular service type (e.g. airline reservations, hotel reservations, car reservations, etc.), and for each service type, there are multiple instances of service providers that publish a web service interface. An important challenge is that the workflows must meet some quality-of-service (QoS) metric, such as end-to-end completion time of all its business processes, and that meeting or failing this goal results in the assignment of a quantitative business value metric for the workflow; intuitively, it is desired that all workflows meet their respective QoS goals. We further leverage the notion that QoS service agreements are generally agreed-upon between the web service providers and the scheduling agent such that the providers advertise some level of guaranteed QoS to the scheduler based upon runtime conditions such as turnaround time and maximum available concurrency. The resulting problem is then to schedule and assign the business processes requests for service types to one of the service providers for that type. The scheduling must be done such that the aggregate business value across all the workflows is maximised. In Section 3 we state the scenario as a combinatorial problem and utilise a genetic search algorithm [5] to find the best assignment of web service requests to providers. This approach converges towards an assignment that maximises the overall business value for all the workflows. In Section 4 we show through experimentation that this search heuristic finds better assignments than other algorithms (greedy, round-robin, and proportional). Further, this approach allows us to scale the number of simultaneous workflows (up to one thousand workflows in our experiments) and yet still find effective schedules. 2. RELATED WORK In the context of service assignment and scheduling, [11] maps web service calls to potential servers using linear programming, but their work is concerned with mapping only single workflows; our principal focus is on scalably scheduling multiple workflows (up 30 Service Type SuperHotels.com Business Process Business Process Workflow ... Business Process Business Process ... HostileHostels.com IncredibleInns.com Business Process Business Process Business Process ... Business Process Service Provider SkyHighAirlines.com SuperCrazyFlights.com Business Process . . . . . . Advertised QoS Service Agreement CarRentalService.com Figure 1: An example scenario demonstrating the interaction between business processes in workflows and web service providers. Each business process accesses a service type and is then mapped to a service provider for that type. to one thousand as we show later) using different business metrics and a search heuristic. [10] presents a dynamic provisioning approach that uses both predictive and reactive techniques for multi-tiered Internet application delivery. However, the provisioning techniques do not consider the challenges faced when there are alternative query execution plans and replicated data sources. [8] presents a feedback-based scheduling mechanism for multi-tiered systems with back-end databases, but unlike our work, it assumes a tighter coupling between the various components of the system. Our work also builds upon prior scheduling research. The classic job-shop scheduling problem, shown to be NP-complete [4] [3], is similar to ours in that tasks within a job must be scheduled onto machinery (c.f. our scenario is that business processes within a workflow must be scheduled onto web service providers). The salient differences are that the machines can process only one job at a time (we assume servers can multi-task but with degraded performance and a maximum concurrency level), tasks within a job cannot simultaneously run on different machines (we assume business processes can be assigned to any available server), and the principal metric of performance is the makespan, which is the time for the last task among all the jobs to complete (and as we show later, optimising on the makespan is insufficient for scheduling the business processes, necessitating different metrics). 3. DESIGN In this section we describe our model and discuss how we can find scheduling assignments using a genetic search algorithm. 3.1 Model We base our model on the simplified scenario shown in Figure 1. Specifically, we assume that users or automated systems request the execution of a workflow. The workflows comprise business processes, each of which makes one web service invocation to a service type. Further, business processes have an ordering in the workflow. The arrangement and execution of the business processes and the data flow between them are all managed by a composition or choreography tool (e.g. [1, 9]). Although composition languages can use sophisticated flow-control mechanisms such as conditional branches, for simplicity we assume the processes execute sequentially in a given order. This scenario can be naturally extended to more complex relationships that can be expressed in BPEL [7], which defines how business processes interact, messages are exchanged, activities are ordered, and exceptions are handled. Due to space constraints, we focus on the problem space presented here and will extend our model to more advanced deployment scenarios in the future. Each workflow has a QoS requirement to complete within a specified number of time units (e.g. on the order of seconds, as detailed in the Experiments section). Upon completion (or failure), the workflow is assigned a business value. We extended this approach further and considered different types of workflow completion in order to model differentiated QoS levels that can be applied by businesses (for example, to provide tiered customer service). We say that a workflow is successful if it completes within its QoS requirement, acceptable if it completes within a constant factor κ 31 of its QoS bound (in our experiments we chose κ=3), or failing if it finishes beyond κ times its QoS bound. For each category, a business value score is assigned to the workflow, with the successful category assigned the highest positive score, followed by acceptable and then failing. The business value point distribution is non-uniform across workflows, further modelling cases where some workflows are of higher priority than others. Each service type is implemented by a number of different service providers. We assume that the providers make service level agreements (SLAs) to guarantee a level of performance defined by the completion time for completing a web service invocation. Although SLAs can be complex, in this paper we assume for simplicity that the guarantees can take the form of a linear performance degradation under load. This guarantee is defined by several parameters: α is the expected completion time (for example, on the order of seconds) if the assigned workload of web service requests is less than or equal to β, the maximum concurrency, and if the workload is higher than β, the expected completion for a workload of size ω is α+ γ(ω − β) where γ is a fractional coefficient. In our experiments we vary α, β, and γ with different distributions. Ideally, all workflows would be able to finish within their QoS limits and thus maximise the aggregate business value across all workflows. However, because we model service providers with degrading performance under load, not all workflows will achieve their QoS limit: it may easily be the case that business processes are assigned to providers who are overloaded and cannot complete within the respective workflows QoS limit. The key research problem, then, is to assign the business processes to the web service providers with the goal of optimising on the aggregate business value of all workflows. Given that the scope of the optimisation is the entire set of workflows, it may be that the best scheduling assignments may result in some workflows having to fail in order for more workflows to succeed. This intuitive observation suggests that traditional scheduling approaches such as round-robin or proportional assignments will not fare well, which is what we observe and discuss in Section 4. On the other hand, an exhaustive search of all the possible assignments will find the best schedule, but the computational complexity is prohibitively high. Suppose there are W workflows with an average of B business processes per workflow. Further, in the worst case each business process requests one service type, for which there are P providers. There are thus W · PB combinations to explore to find the optimal assignments of business processes to providers. Even for small configurations (e.g. W =10, B=5, P=10), the computational time for exhaustive search is significant, and in our work we look to scale these parameters. In the next subsection, discuss how a genetic search algorithm can be used to converge toward the optimum scheduling assignments. 3.2 Genetic algorithm Given an exponential search space of business process assignments to web service providers, the problem is to find the optimal assignment that produces the overall highest aggregate business value across all workflows. To explore the solution space, we use a genetic algorithm (GA) search heuristic that simulates Darwinian natural selection by having members of a population compete to survive in order to pass their genetic chromosomes onto the next generation; after successive generations, there is a tendency for the chromosomes to converge toward the best combination [5] [6]. Although other search heuristics exist that can solve optimization problems (e.g. simulated annealing or steepest-ascent hillclimbing), the business process scheduling problem fits well with a GA because potential solutions can be represented in a matrix form and allows us to use prior research in effective GA chromosome recombination to form new members of the population (e.g. [2]). 0 1 2 3 4 0 1 2 0 2 1 1 0 1 0 1 0 2 1 2 0 0 1 Figure 2: An example chromosome representing a scheduling assignment of (workflow,service type) → service provider. Each row represents a workflow, and each column represents a service type. For example, here there are 3 workflows (0 to 2) and 5 service types (0 to 4). In workflow 0, any request for service type 3 goes to provider 2. Note that the service provider identifier is within a range limited to its service type (i.e. its column), so the 2 listed for service type 3 is a different server from server 2 in other columns. Chromosome representation of a solution. In Figure 2 we show an example chromosome that encodes one scheduling assignment. The representation is a 2-dimensional matrix that maps {workflow, service type} to a service provider. For a business process in workflow i and utilising service type j, the (i, j)th entry in the table is the identifier for the service provider to which the business process is assigned. Note that the service provider identifier is within a range limited to its service type. GA execution. A GA proceeds as follows. Initially a random set of chromosomes is created for the population. The chromosomes are evaluated (hashed) to some metric, and the best ones are chosen to be parents. In our problem, the evaluation produces the net business value across all workflows after executing all business processes once they are assigned to their respective service providers according to the mapping in the chromosome. The parents recombine to produce children, simulating sexual crossover, and occasionally a mutation may arise which produces new characteristics that were not available in either parent. The principal idea is that we would like the children to be different from the parents (in order to explore more of the solution space) yet not too different (in order to contain the portions of the chromosome that result in good scheduling assignments). Note that finding the global optimum is not guaranteed because the recombination and mutation are stochastic. GA recombination and mutation. As mentioned, the chromosomes are 2-dimensional matrices that represent scheduling assignments. To simulate sexual recombination of two chromosomes to produce a new child chromosome, we applied a one-point crossover scheme twice (once along each dimension). The crossover is best explained by analogy to Cartesian space as follows. A random point is chosen in the matrix to be coordinate (0, 0). Matrix elements from quadrants II and IV from the first parent and elements from quadrants I and III from the second parent are used to create the new child. This approach follows GA best practices by keeping contiguous chromosome segments together as they are transmitted from parent to child. The uni-chromosome mutation scheme randomly changes one of the service provider assignments to another provider within the available range. Other recombination and mutation schemes are an area of research in the GA community, and we look to explore new operators in future work. GA evaluation function. An important GA component is the evaluation function. Given a particular chromosome representing one scheduling mapping, the function deterministically calculates the net business value across all workloads. The business processes in each workload are assigned to service providers, and each providers completion time is calculated based on the service agreement guarantee using the parameters mentioned in Section 3.1, namely the unloaded completion time α, the maximum concur32 rency β, and a coefficient γ that controls the linear performance degradation under heavy load. Note that the evaluation function can be easily replaced if desired; for example, other evaluation functions can model different service provider guarantees or parallel workflows. 4. EXPERIMENTS AND RESULTS In this section we show the benefit of using our GA-based scheduler. Because we wanted to scale the scenarios up to a large number of workflows (up to 1000 in our experiments), we implemented a simulation program that allowed us to vary parameters and to measure the results with different metrics. The simulator was written in standard C++ and was run on a Linux (Fedora Core) desktop computer running at 2.8 GHz with 1GB of RAM. We compared our algorithm against alternative candidates: • A well-known round-robin algorithm that assigns each business process in circular fashion to the service providers for a particular service type. This approach provides the simplest scheme for load-balancing. • A random-proportional algorithm that proportionally assigns business processes to the service providers; that is, for a given service type, the service providers are ranked by their guaranteed completion time, and business processes are assigned proportionally to the providers based on their completion time. (We also tried a proportionality scheme based on both the completion times and maximum concurrency but attained the same results, so only the former schemes results are shown here.) • A strawman greedy algorithm that always assigns business processes to the service provider that has the fastest guaranteed completion time. This algorithm represents a naive approach based on greedy, local observations of each workflow without taking into consideration all workflows. In the experiments that follow, all results were averaged across 20 trials, and to help normalise the effects of randomisation used during the GA, each trial started by reading in pre-initialised data from disk. In Table 1 we list our experimental parameters. In Figure 3 we show the results of running our GA against the three candidate alternatives. The x-axis shows the number for workflows scaled up to 1000, and the y-axis shows the aggregate business value for all workflows. As can be seen, the GA consistently produces the highest business value even as the number of workflows grows; at 1000 workflows, the GA produces a 115% improvement over the next-best alternative. (Note that although we are optimising against the business value metric we defined earlier, genetic algorithms are able to converge towards the optimal value of any metric, as long as the evaluation function can consistently measure a chromosomes value with that metric.) As expected, the greedy algorithm performs very poorly because it does the worst job at balancing load: all business processes for a given service type are assigned to only one server (the one advertised to have the fastest completion time), and as more business processes arrive, the providers performance degrades linearly. The round-robin scheme is initially outperformed by the randomproportional scheme up to around 120 workflows (as shown in the magnified graph of Figure 4), but as the number of workflows increases, the round-robin scheme consistently wins over randomproportional. The reason is that although the random-proportional scheme assigns business processes to providers proportionally according to the advertised completion times (which is a measure of the power of the service provider), even the best providers will eventually reach a real-world maximum concurrency for the large -2000 -1000 0 1000 2000 3000 4000 5000 6000 7000 0 200 400 600 800 1000 Aggregatebusinessvalueacrossallworkflows Total number of workflows Business value scores of scheduling algorithms Genetic algorithm Round robin Random proportional Greedy Figure 3: Net business value scores of different scheduling algorithms. -500 0 500 1000 1500 2000 2500 3000 3500 4000 0 50 100 150 200Aggregatebusinessvalueacrossallworkflows Total number of workflows Business value scores of scheduling algorithms Genetic algorithm Round robin Random proportional Greedy Figure 4: Magnification of the left-most region in Figure 3. number of workflows that we are considering. For a very large number of workflows, the round-robin scheme is able to better balance the load across all service providers. To better understand the behaviour resulting from the scheduling assignments, we show the workflow completion results in Figures 5, 6, and 7 for 100, 500, and 900 workflows, respectively. These figures show the percentage of workflows that are successful (can complete with their QoS limit), acceptable (can complete within κ=3 times their QoS limit), and failed (cannot complete within κ=3 times their QoS limit). The GA consistently produces the highest percentage of successful workflows (resulting in higher business values for the aggregate set of workflows). Further, the round-robin scheme produces better results than the random-proportional for a large number of workflows but does not perform as well as the GA. In Figure 8 we graph the makespan resulting from the same experiments above. Makespan is a traditional metric from the job scheduling community measuring elapsed time for the last job to complete. While useful, it does not capture the high-level business value metric that we are optimising against. Indeed, the makespan is oblivious to the fact that we provide multiple levels of completion (successful, acceptable, and failed) and assign business value scores accordingly. For completeness, we note that the GA provides the fastest makespan, but it is matched by the round robin algorithm. The GA produces better business values (as shown in Figure 3) because it is able to search the solution space to find better mappings that produce more successful workflows (as shown in Figures 5 to 7). We also looked at the effect of the scheduling algorithms on balancing the load. Figure 9 shows the percentage of services providers that were accessed while the workflows ran. As expected, the greedy algorithm always hits one service provider; on the other hand, the round-robin algorithm is the fastest to spread the business 33 Experimental parameter Comment Workflows 5 to 1000 Business processes per workflow uniform random: 1 - 10 Service types 10 Service providers per service type uniform random: 1 - 10 Workflow QoS goal uniform random: 10-30 seconds Service provider completion time (α) uniform random: 1 - 12 seconds Service provider maximum concurrency (β) uniform random: 1 - 12 Service provider degradation coefficient (γ) uniform random: 0.1 - 0.9 Business value for successful workflows uniform random: 10 - 50 points Business value for acceptable workflows uniform random: 0 - 10 points Business value for failed workflows uniform random: -10 - 0 points GA: number of parents 20 GA: number of children 80 GA: number of generations 1000 Table 1: Experimental parameters Failed Acceptable (completed but not within QoS) Successful (completed within QoS) 0% 20% 40% 60% 80% 100% RoundRobinRandProportionalGreedyGeneticAlg Percentageofallworkflows Workflow behaviour, 100 workflows Figure 5: Workflow behaviour for 100 workflows. Failed Acceptable (completed but not within QoS) Successful (completed within QoS) 0% 20% 40% 60% 80% 100% RoundRobinRandProportionalGreedyGeneticAlg Percentageofallworkflows Workflow behaviour, 500 workflows Figure 6: Workflow behaviour for 500 workflows. Failed Acceptable (completed but not within QoS) Successful (completed within QoS) 0% 20% 40% 60% 80% 100% RoundRobinRandProportionalGreedyGeneticAlg Percentageofallworkflows Workflow behaviour, 500 workflows Figure 7: Workflow behaviour for 900 workflows. 0 50 100 150 200 250 300 0 200 400 600 800 1000 Makespan[seconds] Number of workflows Maximum completion time for all workflows Genetic algorithm Round robin Random proportional Greedy Figure 8: Maximum completion time for all workflows. This value is the makespan metric used in traditional scheduling research. Although useful, the makespan does not take into consideration the business value scoring in our problem domain. processes. Figure 10 is the percentage of accessed service providers (that is, the percentage of service providers represented in Figure 9) that had more assigned business processes than their advertised maximum concurrency. For example, in the greedy algorithm only one service provider is utilised, and this one provider quickly becomes saturated. On the other hand, the random-proportional algorithm uses many service providers, but because business processes are proportionally assigned with more assignments going to the better providers, there is a tendency for a smaller percentage of providers to become saturated. For completeness, we show the performance of the genetic algorithm itself in Figure 11. The algorithm scales linearly with an increasing number of workflows. We note that the round-robin, random-proportional, and greedy algorithms all finished within 1 second even for the largest workflow configuration. However, we feel that the benefit of finding much higher business value scores justifies the running time of the GA; further we would expect that the running time will improve with both software tuning as well as with a computer faster than our off-the-shelf PC. 5. CONCLUSION Business processes within workflows can be orchestrated to access web services. In this paper we looked at multi-tiered service provisioning where web service requests to service types can be mapped to different service providers. The resulting problem is that in order to support a very large number of workflows, the assignment of business process to web service provider must be intelligent. We used a business value metric to measure the be34 0 0.2 0.4 0.6 0.8 1 0 200 400 600 800 1000 Percentageofallserviceproviders Number of workflows Service providers utilised Genetic algorithm Round robin Random proportional Greedy Figure 9: The percentage of service providers utilized during workload executions. The Greedy algorithm always hits the one service provider, while the Round Robin algorithm spreads requests evenly across the providers. 0 0.2 0.4 0.6 0.8 1 0 200 400 600 800 1000 Percentageofallserviceproviders Number of workflows Service providers saturated Genetic algorithm Round robin Random proportional Greedy Figure 10: The percentage of service providers that are saturated among those providers who were utilized (that is, percentage of the service providers represented in Figure 9). A saturated service provider is one whose workload is greater that its advertised maximum concurrency. 0 5 10 15 20 25 0 200 400 600 800 1000 Runningtimeinseconds Total number of workflows Running time of genetic algorithm GA running time Figure 11: Running time of the genetic algorithm. haviour of workflows meeting or failing QoS values, and we optimised our scheduling to maximise the aggregate business value across all workflows. Since the solution space of scheduler mappings is exponential, we used a genetic search algorithm to search the space and converge toward the best schedule. With a default configuration for all parameters and using our business value scoring, the GA produced up to 115% business value improvement over the next best algorithm. Finally, because a genetic algorithm will converge towards the optimal value using any metric (even other than the business value metric we used), we believe our approach has strong potential for continuing work. In future work, we look to acquire real-world traces of web service instances in order to get better estimates of service agreement guarantees, although we expect that such guarantees between the providers and their consumers are not generally available to the public. We will also look at other QoS metrics such as CPU and I/O usage. For example, we can analyse transfer costs with varying bandwidth, latency, data size, and data distribution. Further, we hope to improve our genetic algorithm and compare it to more scheduler alternatives. Finally, since our work is complementary to existing work in web services choreography (because we rely on pre-configured workflows), we look to integrate our approach with available web service workflow systems expressed in BPEL. 6. REFERENCES [1] A. Ankolekar, et al. DAML-S: Semantic Markup For Web Services, In Proc. of the Intl Semantic Web Working Symposium, 2001. [2] L. Davis. Job Shop Scheduling with Genetic Algorithms, In Proc. of the Intl Conference on Genetic Algorithms, 1985. [3] H.-L. Fang, P. Ross, and D. Corne. A Promising Genetic Algorithm Approach to Job-Shop Scheduling, Rescheduling, and Open-Shop Scheduling Problems , In Proc. on the 5th Intl Conference on Genetic Algorithms, 1993. [4] M. Gary and D. Johnson. Computers and Intractability: A Guide to the Theory of NP-Completeness, Freeman, 1979. [5] J. Holland. Adaptation in Natural and Artificial Systems: An Introductory Analysis with Applications to Biology, Control, and Artificial Intelligence, MIT Press, 1992. [6] D. Goldberg. Genetic Algorithms in Search, Optimization and Machine Learning, Kluwer Academic Publishers, 1989. [7] Business Processes in a Web Services World, www-128.ibm.com/developerworks/ webservices/library/ws-bpelwp/. [8] G. Soundararajan, K. Manassiev, J. Chen, A. Goel, and C. Amza. Back-end Databases in Shared Dynamic Content Server Clusters, In Proc. of the IEEE Intl Conference on Autonomic Computing, 2005. [9] B. Srivastava and J. Koehler. Web Service Composition Current Solutions and Open Problems, ICAP, 2003. [10] B. Urgaonkar, P. Shenoy, A. Chandra, and P. Goyal. Dynamic Provisioning of Multi-Tier Internet Applications, In Proc. of the IEEE Intl Conference on Autonomic Computing, 2005. [11] L. Zeng, B. Benatallah, M. Dumas, J. Kalagnanam, and Q. Sheng. Quality Driven Web Services Composition, In Proc. of the WWW Conference, 2003. 35",
    "original_translation": "Programación basada en heurísticas de cargas de trabajo de servicios web compuestos Thomas Phan Wen-Syan Li Centro de Investigación IBM Almaden 650 Harry Rd. Los servicios web pueden ser agregados para crear flujos de trabajo compuestos que proporcionen funcionalidad simplificada para usuarios humanos u otros sistemas. Aunque los estándares de la industria y la investigación reciente han buscado definir las mejores prácticas y mejorar la composición del flujo de trabajo de extremo a extremo, un área que no ha sido completamente explorada es la programación de las solicitudes de servicios web de los flujos de trabajo para la provisión real de servicios en un entorno multinivel y multiorganizacional. Este problema es relevante para los escenarios empresariales modernos donde los procesos comerciales dentro de un flujo de trabajo deben completarse dentro de los límites definidos por la calidad de servicio (QoS). Debido a que estos procesos comerciales son consumidores de servicios web, las solicitudes de servicio deben ser mapeadas y programadas entre múltiples proveedores de servicios web, cada uno con su propio acuerdo de nivel de servicio negociado. En este documento proporcionamos heurísticas para programar solicitudes de servicio de múltiples flujos de trabajo de procesos comerciales a proveedores de servicios web de manera que se maximice una métrica de valor comercial en todos los flujos de trabajo. Mostramos que un algoritmo de búsqueda genética es apropiado para realizar esta programación, y a través de experimentación demostramos que nuestro algoritmo escala bien hasta mil flujos de trabajo y produce mejores asignaciones que enfoques tradicionales. Categorías y Descriptores de Asignaturas C.2.4 [Redes de Computadoras-Comunicación]: Sistemas Distribuidos-aplicaciones distribuidas; D.2.8 [Ingeniería de Software]: Métricas-medidas de complejidad, medidas de rendimiento 1. INTRODUCCIÓN Los servicios web pueden ser compuestos en flujos de trabajo para proporcionar funcionalidad integrada de principio a fin para usuarios humanos u otros sistemas. Aunque los esfuerzos de investigación previos han examinado formas de automatizar de manera inteligente la composición de servicios web en flujos de trabajo (por ejemplo, [1, 9]), un problema importante que aún persiste es la asignación de solicitudes de servicios web a los proveedores de servicios web subyacentes en un escenario de tiempo de ejecución multinivel dentro de ciertas restricciones. En este documento abordamos este problema de programación y examinamos medios para gestionar un gran número de flujos de trabajo de procesos comerciales de manera escalable. El problema de programar solicitudes de servicios web a proveedores es relevante para los dominios comerciales modernos que dependen de la provisión de servicios de múltiples niveles. Considera el ejemplo mostrado en la Figura 1 que ilustra nuestro espacio de problemas. Los flujos de trabajo comprenden múltiples procesos comerciales relacionados que son consumidores de servicios web; aquí asumimos que los flujos de trabajo representan servicios solicitados por clientes o sistemas automatizados y que el flujo de trabajo ya ha sido compuesto con una herramienta de coreografía existente. Estos flujos de trabajo son luego enviados a un portal (no mostrado) que actúa como un agente de programación entre los consumidores del servicio web y los proveedores del servicio web. En este ejemplo, un flujo de trabajo podría representar las acciones necesarias para crear un itinerario de vacaciones, donde un proceso empresarial solicita la reserva de un boleto de avión, otro proceso empresarial solicita una habitación de hotel, y así sucesivamente. Cada una de estas solicitudes apunta a un tipo de servicio en particular (por ejemplo, reservas de aerolíneas, reservas de hoteles, reservas de autos, etc.), y para cada tipo de servicio, hay múltiples instancias de proveedores de servicios que publican una interfaz de servicio web. Un desafío importante es que los flujos de trabajo deben cumplir con alguna métrica de calidad de servicio (QoS), como el tiempo de finalización de extremo a extremo de todos sus procesos comerciales, y que cumplir o no con este objetivo resulta en la asignación de una métrica de valor comercial cuantitativo para el flujo de trabajo; intuitivamente, se desea que todos los flujos de trabajo cumplan con sus respectivos objetivos de QoS. Además, aprovechamos la idea de que los acuerdos de servicio de QoS suelen ser acordados entre los proveedores de servicios web y el agente de programación de tal manera que los proveedores anuncian un cierto nivel de QoS garantizado al programador en función de condiciones de tiempo de respuesta y concurrencia máxima disponible. El problema resultante es entonces programar y asignar las solicitudes de procesos comerciales para tipos de servicio a uno de los proveedores de servicios para ese tipo. La programación debe realizarse de tal manera que se maximice el valor comercial agregado en todos los flujos de trabajo. En la Sección 3 planteamos el escenario como un problema combinatorio y utilizamos un algoritmo de búsqueda genética [5] para encontrar la mejor asignación de solicitudes de servicios web a proveedores. Este enfoque converge hacia una asignación que maximiza el valor comercial general para todos los flujos de trabajo. En la Sección 4 mostramos a través de experimentación que esta heurística de búsqueda encuentra asignaciones mejores que otros algoritmos (codicioso, round-robin y proporcional). Además, este enfoque nos permite escalar el número de flujos de trabajo simultáneos (hasta mil flujos de trabajo en nuestros experimentos) y aún así encontrar horarios efectivos. 2. TRABAJO RELACIONADO En el contexto de asignación y programación de servicios, [11] mapea llamadas de servicios web a servidores potenciales utilizando programación lineal, pero su trabajo se centra en mapear solo flujos de trabajo individuales; nuestro enfoque principal está en programar de manera escalable múltiples flujos de trabajo (hasta 30 tipos de servicios SuperHotels.com Proceso de Negocio Proceso de Negocio Flujo de Trabajo ... Proceso de Negocio Proceso de Negocio ... HostileHostels.com IncredibleInns.com Proceso de Negocio Proceso de Negocio Proceso de Negocio ... Proceso de Negocio Proveedor de Servicios SkyHighAirlines.com SuperCrazyFlights.com Proceso de Negocio . . . . . . Acuerdo de Servicio de Calidad de Servicio (QoS) Publicitado CarRentalService.com Figura 1: Un escenario de ejemplo que muestra la interacción entre procesos comerciales en flujos de trabajo y proveedores de servicios web. Cada proceso empresarial accede a un tipo de servicio y luego se asigna a un proveedor de servicios para ese tipo, a uno mil como mostraremos más adelante, utilizando diferentes métricas empresariales y una heurística de búsqueda. [10] presenta un enfoque de aprovisionamiento dinámico que utiliza técnicas predictivas y reactivas para la entrega de aplicaciones de Internet multinivel. Sin embargo, las técnicas de aprovisionamiento no consideran los desafíos enfrentados cuando hay planes alternativos de ejecución de consultas y fuentes de datos replicadas. [8] presenta un mecanismo de programación basado en retroalimentación para sistemas multinivel con bases de datos de back-end, pero a diferencia de nuestro trabajo, asume un acoplamiento más estrecho entre los diversos componentes del sistema. Nuestro trabajo también se basa en investigaciones previas sobre programación. El problema clásico de programación de talleres, demostrado como NP-completo [4] [3], es similar al nuestro en el sentido de que las tareas dentro de un trabajo deben ser programadas en maquinaria (cf. nuestro escenario es que los procesos comerciales dentro de un flujo de trabajo deben ser programados en proveedores de servicios web). Las diferencias más destacadas son que las máquinas solo pueden procesar un trabajo a la vez (asumimos que los servidores pueden realizar múltiples tareas pero con un rendimiento degradado y un nivel máximo de concurrencia), las tareas dentro de un trabajo no pueden ejecutarse simultáneamente en diferentes máquinas (asumimos que los procesos comerciales pueden asignarse a cualquier servidor disponible), y la métrica principal de rendimiento es el makespan, que es el tiempo que tarda la última tarea de todos los trabajos en completarse (y como mostraremos más adelante, optimizar el makespan no es suficiente para programar los procesos comerciales, lo que requiere diferentes métricas). 3. En esta sección describimos nuestro modelo y discutimos cómo podemos encontrar asignaciones de programación utilizando un algoritmo de búsqueda genética. 3.1 Modelo Basamos nuestro modelo en el escenario simplificado mostrado en la Figura 1. Específicamente, asumimos que los usuarios o sistemas automatizados solicitan la ejecución de un flujo de trabajo. Los flujos de trabajo comprenden procesos comerciales, cada uno de los cuales realiza una invocación de servicio web a un tipo de servicio. Además, los procesos comerciales tienen un orden en el flujo de trabajo. La disposición y ejecución de los procesos comerciales y el flujo de datos entre ellos son gestionados por una herramienta de composición o coreografía (por ejemplo, [1, 9]). Aunque los lenguajes de composición pueden utilizar mecanismos sofisticados de control de flujo como ramas condicionales, para simplificar asumimos que los procesos se ejecutan secuencialmente en un orden dado. Este escenario puede ser extendido de forma natural a relaciones más complejas que pueden ser expresadas en BPEL [7], el cual define cómo interactúan los procesos de negocio, se intercambian mensajes, se ordenan actividades y se manejan excepciones. Debido a limitaciones de espacio, nos enfocamos en el espacio de problemas presentado aquí y extenderemos nuestro modelo a escenarios de implementación más avanzados en el futuro. Cada flujo de trabajo tiene un requisito de calidad de servicio (QoS) que debe completarse dentro de un número específico de unidades de tiempo (por ejemplo, del orden de segundos, como se detalla en la sección de Experimentos). Una vez completado (o fallido), se asigna un valor comercial al flujo de trabajo. Extendimos este enfoque aún más y consideramos diferentes tipos de finalización de flujo de trabajo para modelar niveles diferenciados de QoS que pueden ser aplicados por las empresas (por ejemplo, para proporcionar servicios al cliente escalonados). Decimos que un flujo de trabajo es exitoso si se completa dentro de su requisito de QoS, aceptable si se completa dentro de un factor constante κ 31 de su límite de QoS (en nuestros experimentos elegimos κ=3), o fallido si termina más allá de κ veces su límite de QoS. Para cada categoría, se asigna un puntaje de valor comercial al flujo de trabajo, siendo la categoría exitosa la que recibe la puntuación positiva más alta, seguida por la aceptable y luego la fallida. La distribución de puntos de valor empresarial no es uniforme en los flujos de trabajo, lo que modela casos en los que algunos flujos de trabajo tienen mayor prioridad que otros. Cada tipo de servicio es implementado por varios proveedores de servicios diferentes. Suponemos que los proveedores hacen acuerdos de nivel de servicio (SLAs) para garantizar un nivel de rendimiento definido por el tiempo de finalización de una invocación de servicio web. Aunque los Acuerdos de Nivel de Servicio (SLAs) pueden ser complejos, en este documento asumimos, para simplificar, que las garantías pueden adoptar la forma de una degradación lineal del rendimiento bajo carga. Esta garantía está definida por varios parámetros: α es el tiempo de finalización esperado (por ejemplo, del orden de segundos) si la carga de trabajo asignada de las solicitudes de servicio web es menor o igual a β, la concurrencia máxima, y si la carga de trabajo es mayor que β, la finalización esperada para una carga de trabajo de tamaño ω es α + γ(ω − β) donde γ es un coeficiente fraccional. En nuestros experimentos variamos α, β y γ con diferentes distribuciones. Idealmente, todos los flujos de trabajo podrían finalizar dentro de sus límites de calidad de servicio (QoS) y, por lo tanto, maximizar el valor empresarial agregado en todos los flujos de trabajo. Sin embargo, debido a que modelamos a los proveedores de servicios con un rendimiento degradante bajo carga, no todos los flujos de trabajo alcanzarán su límite de calidad de servicio (QoS): fácilmente puede darse el caso de que los procesos comerciales sean asignados a proveedores que están sobrecargados y no pueden completarse dentro del límite de calidad de servicio respectivo de los flujos de trabajo. El problema clave de investigación, entonces, es asignar los procesos comerciales a los proveedores de servicios web con el objetivo de optimizar el valor comercial agregado de todos los flujos de trabajo. Dado que el alcance de la optimización es el conjunto completo de flujos de trabajo, puede ser que las mejores asignaciones de programación resulten en que algunos flujos de trabajo tengan que fallar para que otros tengan éxito. Esta observación intuitiva sugiere que enfoques de programación tradicionales como el round-robin o asignaciones proporcionales no funcionarán bien, lo cual es lo que observamos y discutimos en la Sección 4. Por otro lado, una búsqueda exhaustiva de todas las posibles asignaciones encontrará el mejor horario, pero la complejidad computacional es prohibitivamente alta. Supongamos que hay W flujos de trabajo con un promedio de B procesos de negocio por flujo de trabajo. Además, en el peor de los casos, cada proceso empresarial solicita un tipo de servicio, para el cual hay P proveedores. Por lo tanto, hay W · PB combinaciones para explorar y encontrar las asignaciones óptimas de procesos comerciales a proveedores. Incluso para configuraciones pequeñas (por ejemplo, Dado que (W=10, B=5, P=10), el tiempo computacional para la búsqueda exhaustiva es significativo, y en nuestro trabajo buscamos ajustar estos parámetros. En la siguiente subsección, discuta cómo se puede utilizar un algoritmo de búsqueda genética para converger hacia las asignaciones de programación óptimas. 3.2 Algoritmo genético Dado un espacio de búsqueda exponencial de asignaciones de procesos comerciales a proveedores de servicios web, el problema es encontrar la asignación óptima que produzca el valor comercial agregado más alto en general en todos los flujos de trabajo. Para explorar el espacio de soluciones, utilizamos un algoritmo genético (GA) que simula la selección natural darwiniana al hacer que los miembros de una población compitan por sobrevivir para transmitir sus cromosomas genéticos a la siguiente generación; después de generaciones sucesivas, hay una tendencia a que los cromosomas converjan hacia la mejor combinación. Aunque existen otras heurísticas de búsqueda que pueden resolver problemas de optimización (por ejemplo, recocido simulado o escalada de colina más empinada), el problema de programación de procesos empresariales se adapta bien a un AG porque las soluciones potenciales pueden representarse en forma de matriz y nos permite utilizar investigaciones previas en la recombinación efectiva de cromosomas de AG para formar nuevos miembros de la población (por ejemplo, [2]). 0 1 2 3 4 0 1 2 0 2 1 1 0 1 0 1 0 2 1 2 0 0 1 Figura 2: Un ejemplo de cromosoma que representa una asignación de programación de (flujo de trabajo, tipo de servicio) → proveedor de servicios. Cada fila representa un flujo de trabajo, y cada columna representa un tipo de servicio. Por ejemplo, aquí hay 3 flujos de trabajo (0 a 2) y 5 tipos de servicio (0 a 4). En el flujo de trabajo 0, cualquier solicitud de tipo de servicio 3 se dirige al proveedor 2. Ten en cuenta que el identificador del proveedor de servicios se encuentra dentro de un rango limitado a su tipo de servicio (es decir, su columna), por lo que el 2 listado para el tipo de servicio 3 es un servidor diferente al servidor 2 en otras columnas. Representación cromosómica de una solución. En la Figura 2 mostramos un ejemplo de cromosoma que codifica una asignación de programación. La representación es una matriz bidimensional que mapea {flujo de trabajo, tipo de servicio} a un proveedor de servicios. Para un proceso de negocio en el flujo de trabajo i y utilizando el tipo de servicio j, la entrada (i, j)-ésima en la tabla es el identificador del proveedor de servicios al que se asigna el proceso de negocio. Ten en cuenta que el identificador del proveedor de servicios se encuentra dentro de un rango limitado a su tipo de servicio. Ejecución de GA. Un algoritmo genético procede de la siguiente manera. Inicialmente se crea un conjunto aleatorio de cromosomas para la población. Los cromosomas son evaluados (hasheados) según alguna métrica, y los mejores son elegidos para ser padres. En nuestro problema, la evaluación produce el valor neto del negocio en todos los flujos de trabajo después de ejecutar todos los procesos comerciales una vez que se asignan a sus respectivos proveedores de servicios de acuerdo con el mapeo en el cromosoma. Los padres se recombinan para producir hijos, simulando un cruce sexual, y ocasionalmente puede surgir una mutación que produce nuevas características que no estaban disponibles en ninguno de los padres. La idea principal es que nos gustaría que los niños fueran diferentes de los padres (para explorar más del espacio de soluciones) pero no demasiado diferentes (para contener las porciones del cromosoma que resultan en asignaciones de programación exitosas). Ten en cuenta que encontrar el óptimo global no está garantizado debido a que la recombinación y la mutación son estocásticas. Recombinación y mutación de ADN. Como se mencionó, los cromosomas son matrices bidimensionales que representan asignaciones de horarios. Para simular la recombinación sexual de dos cromosomas para producir un nuevo cromosoma hijo, aplicamos un esquema de cruce de un punto dos veces (una vez a lo largo de cada dimensión). El cruce se explica mejor por analogía al espacio cartesiano de la siguiente manera. Se elige un punto al azar en la matriz para que sea la coordenada (0, 0). Los elementos de la matriz de los cuadrantes II y IV del primer progenitor y los elementos de los cuadrantes I y III del segundo progenitor se utilizan para crear el nuevo hijo. Este enfoque sigue las mejores prácticas de los algoritmos genéticos al mantener juntos los segmentos cromosómicos contiguos a medida que se transmiten de padre a hijo. El esquema de mutación de uni-cromosoma cambia aleatoriamente una de las asignaciones de proveedor de servicios a otro proveedor dentro del rango disponible. Otros esquemas de recombinación y mutación son un área de investigación en la comunidad de AG, y buscamos explorar nuevos operadores en trabajos futuros. Función de evaluación de GA. Un componente importante de los algoritmos genéticos es la función de evaluación. Dada una cromosoma particular que representa un mapeo de programación, la función calcula de manera determinista el valor neto del negocio en todas las cargas de trabajo. Los procesos comerciales en cada carga de trabajo se asignan a proveedores de servicios, y el tiempo de finalización de cada proveedor se calcula en función de la garantía del acuerdo de servicio utilizando los parámetros mencionados en la Sección 3.1, a saber, el tiempo de finalización sin carga α, la máxima concurrencia β y un coeficiente γ que controla la degradación del rendimiento lineal bajo carga pesada. Ten en cuenta que la función de evaluación puede ser fácilmente reemplazada si se desea; por ejemplo, otras funciones de evaluación pueden modelar diferentes garantías de proveedores de servicios o flujos de trabajo paralelos. 4. EXPERIMENTOS Y RESULTADOS En esta sección mostramos el beneficio de utilizar nuestro planificador basado en algoritmos genéticos. Debido a que queríamos escalar los escenarios a un gran número de flujos de trabajo (hasta 1000 en nuestros experimentos), implementamos un programa de simulación que nos permitió variar parámetros y medir los resultados con diferentes métricas. El simulador fue escrito en C++ estándar y se ejecutó en un ordenador de escritorio Linux (Fedora Core) con una velocidad de 2.8 GHz y 1GB de RAM. Comparamos nuestro algoritmo con candidatos alternativos: • Un algoritmo de round-robin bien conocido que asigna cada proceso comercial de forma circular a los proveedores de servicios para un tipo de servicio en particular. Este enfoque proporciona el esquema más simple para el equilibrio de carga. • Un algoritmo aleatorio-proporcional que asigna proporcionalmente los procesos comerciales a los proveedores de servicios; es decir, para un tipo de servicio dado, los proveedores de servicios se clasifican según su tiempo de finalización garantizado, y los procesos comerciales se asignan proporcionalmente a los proveedores en función de su tiempo de finalización. (También probamos un esquema de proporcionalidad basado tanto en los tiempos de finalización como en la concurrencia máxima, pero obtuvimos los mismos resultados, por lo que solo se muestran los resultados de los esquemas anteriores aquí.) • Un algoritmo codicioso de hombre de paja que siempre asigna los procesos comerciales al proveedor de servicios que tiene el tiempo de finalización garantizado más rápido. Este algoritmo representa un enfoque ingenuo basado en observaciones avaras y locales de cada flujo de trabajo sin tener en cuenta todos los flujos de trabajo. En los experimentos que siguen, todos los resultados fueron promediados a lo largo de 20 pruebas, y para ayudar a normalizar los efectos de la aleatorización utilizada durante el AG, cada prueba comenzó leyendo datos preinicializados desde el disco. En la Tabla 1 enumeramos nuestros parámetros experimentales. En la Figura 3 mostramos los resultados de ejecutar nuestro AG contra las tres alternativas candidatas. El eje x muestra el número de flujos de trabajo escalado a 1000, y el eje y muestra el valor comercial agregado de todos los flujos de trabajo. Como se puede ver, el algoritmo genético produce consistentemente el mayor valor comercial incluso a medida que aumenta el número de flujos de trabajo; con 1000 flujos de trabajo, el algoritmo genético produce una mejora del 115% sobre la siguiente mejor alternativa. (Tenga en cuenta que aunque estamos optimizando en función de la métrica de valor comercial que definimos anteriormente, los algoritmos genéticos pueden converger hacia el valor óptimo de cualquier métrica, siempre y cuando la función de evaluación pueda medir de manera consistente el valor de un cromosoma con esa métrica). Como era de esperar, el algoritmo codicioso tiene un rendimiento muy pobre porque hace el peor trabajo en equilibrar la carga: todos los procesos comerciales de un tipo de servicio dado se asignan a un solo servidor (el que se anuncia como el que tiene el tiempo de finalización más rápido), y a medida que llegan más procesos comerciales, el rendimiento de los proveedores se degrada linealmente. El esquema de round-robin es inicialmente superado por el esquema proporcional aleatorio hasta alrededor de 120 flujos de trabajo (como se muestra en el gráfico ampliado de la Figura 4), pero a medida que aumenta el número de flujos de trabajo, el esquema de round-robin gana consistentemente sobre el proporcional aleatorio. La razón es que aunque el esquema aleatorio-proporcional asigna procesos comerciales a proveedores proporcionalmente según los tiempos de finalización anunciados (que es una medida del poder del proveedor de servicios), incluso los mejores proveedores eventualmente alcanzarán una concurrencia máxima del mundo real para la gran cantidad de flujos de trabajo que estamos considerando. Para un número muy grande de flujos de trabajo, el esquema de round-robin es capaz de equilibrar mejor la carga entre todos los proveedores de servicios. Para comprender mejor el comportamiento resultante de las asignaciones de programación, mostramos los resultados de finalización del flujo de trabajo en las Figuras 5, 6 y 7 para 100, 500 y 900 flujos de trabajo, respectivamente. Estas cifras muestran el porcentaje de flujos de trabajo que son exitosos (pueden completarse dentro de su límite de QoS), aceptables (pueden completarse dentro de κ=3 veces su límite de QoS) y fallidos (no pueden completarse dentro de κ=3 veces su límite de QoS). El GA produce consistentemente el mayor porcentaje de flujos de trabajo exitosos (lo que resulta en valores comerciales más altos para el conjunto agregado de flujos de trabajo). Además, el esquema de round-robin produce mejores resultados que el proporcional-aleatorio para un gran número de flujos de trabajo, pero no tiene un rendimiento tan bueno como el algoritmo genético. En la Figura 8 graficamos el makespan resultante de los mismos experimentos anteriores. Makespan es una métrica tradicional de la comunidad de programación de trabajos que mide el tiempo transcurrido para que se complete el último trabajo. Aunque útil, no captura la métrica de valor empresarial de alto nivel contra la que estamos optimizando. De hecho, el makespan no tiene en cuenta el hecho de que proporcionamos múltiples niveles de finalización (exitoso, aceptable y fallido) y asignamos puntajes de valor comercial en consecuencia. Para completar, señalamos que el algoritmo genético proporciona el makespan más rápido, pero es igualado por el algoritmo de round robin. El algoritmo genético produce mejores valores comerciales (como se muestra en la Figura 3) porque es capaz de explorar el espacio de soluciones para encontrar mejores asignaciones que generen flujos de trabajo más exitosos (como se muestra en las Figuras 5 a 7). También analizamos el efecto de los algoritmos de programación en el equilibrio de la carga. La Figura 9 muestra el porcentaje de proveedores de servicios que fueron accedidos mientras se ejecutaban los flujos de trabajo. Como era de esperar, el algoritmo codicioso siempre elige a un proveedor de servicios; por otro lado, el algoritmo de round-robin es el más rápido para distribuir el negocio. 33 Parámetro experimental Comentario Flujos de trabajo 5 a 1000 Procesos de negocio por flujo de trabajo aleatorio uniforme: 1 - 10 Tipos de servicio 10 Proveedores de servicios por tipo de servicio aleatorio uniforme: 1 - 10 Objetivo de QoS del flujo de trabajo aleatorio uniforme: 10-30 segundos Tiempo de finalización del proveedor de servicios (α) aleatorio uniforme: 1 - 12 segundos Máxima concurrencia del proveedor de servicios (β) aleatorio uniforme: 1 - 12 Coeficiente de degradación del proveedor de servicios (γ) aleatorio uniforme: 0.1 - 0.9 Valor de negocio para flujos de trabajo exitosos aleatorio uniforme: 10 - 50 puntos Valor de negocio para flujos de trabajo aceptables aleatorio uniforme: 0 - 10 puntos Valor de negocio para flujos de trabajo fallidos aleatorio uniforme: -10 - 0 puntos GA: número de padres 20 GA: número de hijos 80 GA: número de generaciones 1000 Tabla 1: Parámetros experimentales Fallido Aceptable (completado pero no dentro de QoS) Exitoso (completado dentro de QoS) 0% 20% 40% 60% 80% 100% RoundRobinRandProportionalGreedyGeneticAlg Porcentaje de todos los flujos de trabajo Comportamiento del flujo de trabajo, 100 flujos de trabajo Figura 5: Comportamiento del flujo de trabajo para 100 flujos de trabajo. Fracaso Aceptable (completado pero no dentro de QoS) Exitoso (completado dentro de QoS) 0% 20% 40% 60% 80% 100% RoundRobinRandProportionalGreedyGeneticAlg Porcentaje de todos los flujos de trabajo Comportamiento del flujo de trabajo, 500 flujos de trabajo Figura 6: Comportamiento del flujo de trabajo para 500 flujos de trabajo. Fracaso Aceptable (completado pero no dentro de QoS) Exitoso (completado dentro de QoS) 0% 20% 40% 60% 80% 100% RoundRobinRandProportionalGreedyGeneticAlg Porcentaje de todos los flujos de trabajo Comportamiento del flujo de trabajo, 500 flujos de trabajo Figura 7: Comportamiento del flujo de trabajo para 900 flujos de trabajo. 0 50 100 150 200 250 300 0 200 400 600 800 1000 Tiempo total [segundos] Número de flujos de trabajo Tiempo máximo de finalización para todos los flujos de trabajo Algoritmo genético Round robin Proporcional aleatorio Codicioso Figura 8: Tiempo máximo de finalización para todos los flujos de trabajo. Este valor es la métrica makespan utilizada en la investigación de programación tradicional. Aunque útil, el makespan no tiene en cuenta la puntuación del valor comercial en nuestro dominio de problemas. La Figura 10 muestra el porcentaje de proveedores de servicios accedidos (es decir, el porcentaje de proveedores de servicios representados en la Figura 9) que tenían más procesos comerciales asignados que su concurrencia máxima anunciada. Por ejemplo, en el algoritmo voraz solo se utiliza un proveedor de servicios, y este proveedor se satura rápidamente. Por otro lado, el algoritmo aleatorio-proporcional utiliza muchos proveedores de servicios, pero debido a que los procesos comerciales se asignan de manera proporcional con más asignaciones yendo a los mejores proveedores, hay una tendencia a que un menor porcentaje de proveedores se saturen. Para completitud, mostramos el rendimiento del algoritmo genético en sí mismo en la Figura 11. El algoritmo escala linealmente con un aumento en el número de flujos de trabajo. Observamos que los algoritmos round-robin, random-proportional y greedy terminaron en menos de 1 segundo incluso para la configuración de flujo de trabajo más grande. Sin embargo, consideramos que el beneficio de encontrar puntajes de valor empresarial mucho más altos justifica el tiempo de ejecución del algoritmo genético; además, esperaríamos que el tiempo de ejecución mejore tanto con la optimización del software como con un ordenador más rápido que nuestro PC estándar. CONCLUSIÓN Los procesos comerciales dentro de los flujos de trabajo pueden ser orquestados para acceder a servicios web. En este artículo estudiamos la provisión de servicios de múltiples niveles, donde las solicitudes de servicios web a tipos de servicios pueden ser asignadas a diferentes proveedores de servicios. El problema resultante es que para poder soportar un gran número de flujos de trabajo, la asignación de procesos de negocio a proveedores de servicios web debe ser inteligente. Utilizamos una métrica de valor empresarial para medir el 0.2 0.4 0.6 0.8 1 0 200 400 600 800 1000 Porcentaje de todos los proveedores de servicios Número de flujos de trabajo Proveedores de servicios utilizados Algoritmo genético Round robin Proporcional aleatorio Ávido Figura 9: El porcentaje de proveedores de servicios utilizados durante las ejecuciones de carga de trabajo. El algoritmo Greedy siempre elige al mismo proveedor de servicios, mientras que el algoritmo Round Robin distribuye las solicitudes de manera uniforme entre los proveedores. 0 0.2 0.4 0.6 0.8 1 0 200 400 600 800 1000 Porcentaje de todos los proveedores de servicios Número de flujos de trabajo Proveedores saturados Algoritmo genético Round robin Proporcional aleatorio Greedy Figura 10: El porcentaje de proveedores de servicios que están saturados entre aquellos proveedores que fueron utilizados (es decir, el porcentaje de proveedores de servicios representados en la Figura 9). Un proveedor de servicios saturado es aquel cuya carga de trabajo es mayor que su concurrencia máxima anunciada. Dado que el espacio de soluciones de los mapeos de programación es exponencial, utilizamos un algoritmo de búsqueda genética para explorar el espacio y converger hacia el mejor horario. Con una configuración predeterminada para todos los parámetros y utilizando nuestra puntuación de valor empresarial, el GA produjo hasta un 115% de mejora en el valor empresarial sobre el siguiente mejor algoritmo. Finalmente, debido a que un algoritmo genético convergerá hacia el valor óptimo utilizando cualquier métrica (incluso diferente a la métrica de valor empresarial que utilizamos), creemos que nuestro enfoque tiene un fuerte potencial para trabajos futuros. En trabajos futuros, buscamos adquirir trazas del mundo real de instancias de servicios web para obtener mejores estimaciones de las garantías de acuerdo de servicio, aunque esperamos que tales garantías entre los proveedores y sus consumidores no estén generalmente disponibles para el público. También analizaremos otras métricas de calidad de servicio (QoS) como el uso de CPU y E/S. Por ejemplo, podemos analizar los costos de transferencia con diferentes anchos de banda, latencia, tamaño de datos y distribución de datos. Además, esperamos mejorar nuestro algoritmo genético y compararlo con más alternativas de programación. Finalmente, dado que nuestro trabajo es complementario al trabajo existente en coreografía de servicios web (porque dependemos de flujos de trabajo preconfigurados), buscamos integrar nuestro enfoque con los sistemas de flujo de trabajo de servicios web disponibles expresados en BPEL. 6. REFERENCIAS [1] A. Ankolekar, et al. DAML-S: Marcado Semántico para Servicios Web, En Proc. del Simposio Internacional de Trabajo de la Web Semántica, 2001. [2] L. Davis. Programación de taller con algoritmos genéticos, En Proc. de la Conferencia Internacional sobre Algoritmos Genéticos, 1985. [3] H.-L. Fang, P. Ross y D. Corne. Un Enfoque Prometedor de Algoritmo Genético para Problemas de Programación de Taller de Trabajo, Re-programación y Programación de Taller Abierto, En Actas de la 5ta Conferencia Internacional sobre Algoritmos Genéticos, 1993. [4] M. Gary y D. Johnson. Computadoras e Intractabilidad: Una Guía de la Teoría de NP-Completitud, Freeman, 1979. [5] J. Holland. Adaptación en Sistemas Naturales y Artificiales: Un Análisis Introductorio con Aplicaciones a la Biología, Control e Inteligencia Artificial, MIT Press, 1992. [6] D. Goldberg. Algoritmos Genéticos en Búsqueda, Optimización y Aprendizaje Automático, Kluwer Academic Publishers, 1989. [7] Procesos de Negocio en un Mundo de Servicios Web, www-128.ibm.com/developerworks/webservices/library/ws-bpelwp/. [8] G. Soundararajan, K. Manassiev, J. Chen, A. Goel y C. Amza. Bases de datos de back-end en clústeres de servidores de contenido dinámico compartido, En Proc. de la Conferencia Internacional de Computación Autónoma de IEEE, 2005. [9] B. Srivastava y J. Koehler. Composición de Servicios Web: Soluciones Actuales y Problemas Abiertos, ICAP, 2003. [10] B. Urgaonkar, P. Shenoy, A. Chandra y P. Goyal. Provisión dinámica de aplicaciones de Internet de múltiples niveles, En Proc. de la Conferencia Internacional de IEEE sobre Computación Autónoma, 2005. [11] L. Zeng, B. Benatallah, M. Dumas, J. Kalagnanam y Q. Sheng. Composición de Servicios Web Impulsada por la Calidad, En Proc. de la Conferencia WWW, 2003. 35",
    "original_sentences": [
        "Heuristics-Based Scheduling of Composite Web Service Workloads Thomas Phan Wen-Syan Li IBM Almaden Research Center 650 Harry Rd.",
        "San Jose, CA 95120 {phantom,wsl}@us.ibm.com ABSTRACT Web services can be aggregated to create composite workflows that provide streamlined functionality for human users or other systems.",
        "Although industry standards and recent research have sought to define best practices and to improve end-to-end workflow composition, one area that has not fully been explored is the scheduling of a workflows web service requests to actual service provisioning in a multi-tiered, multi-organisation environment.",
        "This issue is relevant to modern business scenarios where business processes within a workflow must complete within QoS-defined limits.",
        "Because these business processes are web service consumers, service requests must be mapped and scheduled across multiple web service providers, each with its own negotiated service level agreement.",
        "In this paper we provide heuristics for scheduling service requests from multiple business process workflows to web service providers such that a business value metric across all workflows is maximised.",
        "We show that a genetic search algorithm is appropriate to perform this scheduling, and through experimentation we show that our algorithm scales well up to a thousand workflows and produces better mappings than traditional approaches.",
        "Categories and Subject Descriptors C.2.4 [Computer-Communication Networks]: Distributed Systems-distributed applications; D.2.8 [Software Engineering]: Metrics-complexity measures, performance measures 1.",
        "INTRODUCTION Web services can be composed into workflows to provide streamlined end-to-end functionality for human users or other systems.",
        "Although previous research efforts have looked at ways to intelligently automate the composition of web services into workflows (e.g. [1, 9]), an important remaining problem is the assignment of web service requests to the underlying web service providers in a multi-tiered runtime scenario within constraints.",
        "In this paper we address this scheduling problem and examine means to manage a large number of business process workflows in a scalable manner.",
        "The problem of scheduling web service requests to providers is relevant to modern business domains that depend on multi-tiered service provisioning.",
        "Consider the example shown in Figure 1 that illustrates our problem space.",
        "Workflows comprise multiple related business processes that are web service consumers; here we assume that the workflows represent requested service from customers or automated systems and that the workflow has already been composed with an existing choreography toolkit.",
        "These workflows are then submitted to a portal (not shown) that acts as a scheduling agent between the web service consumers and the web service providers.",
        "In this example, a workflow could represent the actions needed to instantiate a vacation itinerary, where one business process requests booking an airline ticket, another business process requests a hotel room, and so forth.",
        "Each of these requests target a particular service type (e.g. airline reservations, hotel reservations, car reservations, etc. ), and for each service type, there are multiple instances of service providers that publish a web service interface.",
        "An important challenge is that the workflows must meet some quality-of-service (QoS) metric, such as end-to-end completion time of all its business processes, and that meeting or failing this goal results in the assignment of a quantitative business value metric for the workflow; intuitively, it is desired that all workflows meet their respective QoS goals.",
        "We further leverage the notion that QoS service agreements are generally agreed-upon between the web service providers and the scheduling agent such that the providers advertise some level of guaranteed QoS to the scheduler based upon runtime conditions such as turnaround time and maximum available concurrency.",
        "The resulting problem is then to schedule and assign the business processes requests for service types to one of the service providers for that type.",
        "The scheduling must be done such that the aggregate business value across all the workflows is maximised.",
        "In Section 3 we state the scenario as a combinatorial problem and utilise a genetic search algorithm [5] to find the best assignment of web service requests to providers.",
        "This approach converges towards an assignment that maximises the overall business value for all the workflows.",
        "In Section 4 we show through experimentation that this search heuristic finds better assignments than other algorithms (greedy, round-robin, and proportional).",
        "Further, this approach allows us to scale the number of simultaneous workflows (up to one thousand workflows in our experiments) and yet still find effective schedules. 2.",
        "RELATED WORK In the context of service assignment and scheduling, [11] maps web service calls to potential servers using linear programming, but their work is concerned with mapping only single workflows; our principal focus is on scalably scheduling multiple workflows (up 30 Service Type SuperHotels.com Business Process Business Process Workflow ... Business Process Business Process ... HostileHostels.com IncredibleInns.com Business Process Business Process Business Process ... Business Process Service Provider SkyHighAirlines.com SuperCrazyFlights.com Business Process . . . . . .",
        "Advertised QoS Service Agreement CarRentalService.com Figure 1: An example scenario demonstrating the interaction between business processes in workflows and web service providers.",
        "Each business process accesses a service type and is then mapped to a service provider for that type. to one thousand as we show later) using different business metrics and a search heuristic. [10] presents a dynamic provisioning approach that uses both predictive and reactive techniques for multi-tiered Internet application delivery.",
        "However, the provisioning techniques do not consider the challenges faced when there are alternative query execution plans and replicated data sources. [8] presents a feedback-based scheduling mechanism for multi-tiered systems with back-end databases, but unlike our work, it assumes a tighter coupling between the various components of the system.",
        "Our work also builds upon prior scheduling research.",
        "The classic job-shop scheduling problem, shown to be NP-complete [4] [3], is similar to ours in that tasks within a job must be scheduled onto machinery (c.f. our scenario is that business processes within a workflow must be scheduled onto web service providers).",
        "The salient differences are that the machines can process only one job at a time (we assume servers can multi-task but with degraded performance and a maximum concurrency level), tasks within a job cannot simultaneously run on different machines (we assume business processes can be assigned to any available server), and the principal metric of performance is the makespan, which is the time for the last task among all the jobs to complete (and as we show later, optimising on the makespan is insufficient for scheduling the business processes, necessitating different metrics). 3.",
        "DESIGN In this section we describe our model and discuss how we can find scheduling assignments using a genetic search algorithm. 3.1 Model We base our model on the simplified scenario shown in Figure 1.",
        "Specifically, we assume that users or automated systems request the execution of a workflow.",
        "The workflows comprise business processes, each of which makes one web service invocation to a service type.",
        "Further, business processes have an ordering in the workflow.",
        "The arrangement and execution of the business processes and the data flow between them are all managed by a composition or choreography tool (e.g. [1, 9]).",
        "Although composition languages can use sophisticated flow-control mechanisms such as conditional branches, for simplicity we assume the processes execute sequentially in a given order.",
        "This scenario can be naturally extended to more complex relationships that can be expressed in BPEL [7], which defines how business processes interact, messages are exchanged, activities are ordered, and exceptions are handled.",
        "Due to space constraints, we focus on the problem space presented here and will extend our model to more advanced deployment scenarios in the future.",
        "Each workflow has a QoS requirement to complete within a specified number of time units (e.g. on the order of seconds, as detailed in the Experiments section).",
        "Upon completion (or failure), the workflow is assigned a business value.",
        "We extended this approach further and considered different types of workflow completion in order to model differentiated QoS levels that can be applied by businesses (for example, to provide tiered customer service).",
        "We say that a workflow is successful if it completes within its QoS requirement, acceptable if it completes within a constant factor κ 31 of its QoS bound (in our experiments we chose κ=3), or failing if it finishes beyond κ times its QoS bound.",
        "For each category, a business value score is assigned to the workflow, with the successful category assigned the highest positive score, followed by acceptable and then failing.",
        "The business value point distribution is non-uniform across workflows, further modelling cases where some workflows are of higher priority than others.",
        "Each service type is implemented by a number of different service providers.",
        "We assume that the providers make service level agreements (SLAs) to guarantee a level of performance defined by the completion time for completing a web service invocation.",
        "Although SLAs can be complex, in this paper we assume for simplicity that the guarantees can take the form of a linear performance degradation under load.",
        "This guarantee is defined by several parameters: α is the expected completion time (for example, on the order of seconds) if the assigned workload of web service requests is less than or equal to β, the maximum concurrency, and if the workload is higher than β, the expected completion for a workload of size ω is α+ γ(ω − β) where γ is a fractional coefficient.",
        "In our experiments we vary α, β, and γ with different distributions.",
        "Ideally, all workflows would be able to finish within their QoS limits and thus maximise the aggregate business value across all workflows.",
        "However, because we model service providers with degrading performance under load, not all workflows will achieve their QoS limit: it may easily be the case that business processes are assigned to providers who are overloaded and cannot complete within the respective workflows QoS limit.",
        "The key research problem, then, is to assign the business processes to the web service providers with the goal of optimising on the aggregate business value of all workflows.",
        "Given that the scope of the optimisation is the entire set of workflows, it may be that the best scheduling assignments may result in some workflows having to fail in order for more workflows to succeed.",
        "This intuitive observation suggests that traditional scheduling approaches such as round-robin or proportional assignments will not fare well, which is what we observe and discuss in Section 4.",
        "On the other hand, an exhaustive search of all the possible assignments will find the best schedule, but the computational complexity is prohibitively high.",
        "Suppose there are W workflows with an average of B business processes per workflow.",
        "Further, in the worst case each business process requests one service type, for which there are P providers.",
        "There are thus W · PB combinations to explore to find the optimal assignments of business processes to providers.",
        "Even for small configurations (e.g.",
        "W =10, B=5, P=10), the computational time for exhaustive search is significant, and in our work we look to scale these parameters.",
        "In the next subsection, discuss how a genetic search algorithm can be used to converge toward the optimum scheduling assignments. 3.2 Genetic algorithm Given an exponential search space of business process assignments to web service providers, the problem is to find the optimal assignment that produces the overall highest aggregate business value across all workflows.",
        "To explore the solution space, we use a genetic algorithm (GA) search heuristic that simulates Darwinian natural selection by having members of a population compete to survive in order to pass their genetic chromosomes onto the next generation; after successive generations, there is a tendency for the chromosomes to converge toward the best combination [5] [6].",
        "Although other search heuristics exist that can solve optimization problems (e.g. simulated annealing or steepest-ascent hillclimbing), the business process scheduling problem fits well with a GA because potential solutions can be represented in a matrix form and allows us to use prior research in effective GA chromosome recombination to form new members of the population (e.g. [2]). 0 1 2 3 4 0 1 2 0 2 1 1 0 1 0 1 0 2 1 2 0 0 1 Figure 2: An example chromosome representing a scheduling assignment of (workflow,service type) → service provider.",
        "Each row represents a workflow, and each column represents a service type.",
        "For example, here there are 3 workflows (0 to 2) and 5 service types (0 to 4).",
        "In workflow 0, any request for service type 3 goes to provider 2.",
        "Note that the service provider identifier is within a range limited to its service type (i.e. its column), so the 2 listed for service type 3 is a different server from server 2 in other columns.",
        "Chromosome representation of a solution.",
        "In Figure 2 we show an example chromosome that encodes one scheduling assignment.",
        "The representation is a 2-dimensional matrix that maps {workflow, service type} to a service provider.",
        "For a business process in workflow i and utilising service type j, the (i, j)th entry in the table is the identifier for the service provider to which the business process is assigned.",
        "Note that the service provider identifier is within a range limited to its service type.",
        "GA execution.",
        "A GA proceeds as follows.",
        "Initially a random set of chromosomes is created for the population.",
        "The chromosomes are evaluated (hashed) to some metric, and the best ones are chosen to be parents.",
        "In our problem, the evaluation produces the net business value across all workflows after executing all business processes once they are assigned to their respective service providers according to the mapping in the chromosome.",
        "The parents recombine to produce children, simulating sexual crossover, and occasionally a mutation may arise which produces new characteristics that were not available in either parent.",
        "The principal idea is that we would like the children to be different from the parents (in order to explore more of the solution space) yet not too different (in order to contain the portions of the chromosome that result in good scheduling assignments).",
        "Note that finding the global optimum is not guaranteed because the recombination and mutation are stochastic.",
        "GA recombination and mutation.",
        "As mentioned, the chromosomes are 2-dimensional matrices that represent scheduling assignments.",
        "To simulate sexual recombination of two chromosomes to produce a new child chromosome, we applied a one-point crossover scheme twice (once along each dimension).",
        "The crossover is best explained by analogy to Cartesian space as follows.",
        "A random point is chosen in the matrix to be coordinate (0, 0).",
        "Matrix elements from quadrants II and IV from the first parent and elements from quadrants I and III from the second parent are used to create the new child.",
        "This approach follows GA best practices by keeping contiguous chromosome segments together as they are transmitted from parent to child.",
        "The uni-chromosome mutation scheme randomly changes one of the service provider assignments to another provider within the available range.",
        "Other recombination and mutation schemes are an area of research in the GA community, and we look to explore new operators in future work.",
        "GA evaluation function.",
        "An important GA component is the evaluation function.",
        "Given a particular chromosome representing one scheduling mapping, the function deterministically calculates the net business value across all workloads.",
        "The business processes in each workload are assigned to service providers, and each providers completion time is calculated based on the service agreement guarantee using the parameters mentioned in Section 3.1, namely the unloaded completion time α, the maximum concur32 rency β, and a coefficient γ that controls the linear performance degradation under heavy load.",
        "Note that the evaluation function can be easily replaced if desired; for example, other evaluation functions can model different service provider guarantees or parallel workflows. 4.",
        "EXPERIMENTS AND RESULTS In this section we show the benefit of using our GA-based scheduler.",
        "Because we wanted to scale the scenarios up to a large number of workflows (up to 1000 in our experiments), we implemented a simulation program that allowed us to vary parameters and to measure the results with different metrics.",
        "The simulator was written in standard C++ and was run on a Linux (Fedora Core) desktop computer running at 2.8 GHz with 1GB of RAM.",
        "We compared our algorithm against alternative candidates: • A well-known round-robin algorithm that assigns each business process in circular fashion to the service providers for a particular service type.",
        "This approach provides the simplest scheme for load-balancing. • A random-proportional algorithm that proportionally assigns business processes to the service providers; that is, for a given service type, the service providers are ranked by their guaranteed completion time, and business processes are assigned proportionally to the providers based on their completion time. (We also tried a proportionality scheme based on both the completion times and maximum concurrency but attained the same results, so only the former schemes results are shown here.) • A strawman greedy algorithm that always assigns business processes to the service provider that has the fastest guaranteed completion time.",
        "This algorithm represents a naive approach based on greedy, local observations of each workflow without taking into consideration all workflows.",
        "In the experiments that follow, all results were averaged across 20 trials, and to help normalise the effects of randomisation used during the GA, each trial started by reading in pre-initialised data from disk.",
        "In Table 1 we list our experimental parameters.",
        "In Figure 3 we show the results of running our GA against the three candidate alternatives.",
        "The x-axis shows the number for workflows scaled up to 1000, and the y-axis shows the aggregate business value for all workflows.",
        "As can be seen, the GA consistently produces the highest business value even as the number of workflows grows; at 1000 workflows, the GA produces a 115% improvement over the next-best alternative. (Note that although we are optimising against the business value metric we defined earlier, genetic algorithms are able to converge towards the optimal value of any metric, as long as the evaluation function can consistently measure a chromosomes value with that metric.)",
        "As expected, the greedy algorithm performs very poorly because it does the worst job at balancing load: all business processes for a given service type are assigned to only one server (the one advertised to have the fastest completion time), and as more business processes arrive, the providers performance degrades linearly.",
        "The round-robin scheme is initially outperformed by the randomproportional scheme up to around 120 workflows (as shown in the magnified graph of Figure 4), but as the number of workflows increases, the round-robin scheme consistently wins over randomproportional.",
        "The reason is that although the random-proportional scheme assigns business processes to providers proportionally according to the advertised completion times (which is a measure of the power of the service provider), even the best providers will eventually reach a real-world maximum concurrency for the large -2000 -1000 0 1000 2000 3000 4000 5000 6000 7000 0 200 400 600 800 1000 Aggregatebusinessvalueacrossallworkflows Total number of workflows Business value scores of scheduling algorithms Genetic algorithm Round robin Random proportional Greedy Figure 3: Net business value scores of different scheduling algorithms. -500 0 500 1000 1500 2000 2500 3000 3500 4000 0 50 100 150 200Aggregatebusinessvalueacrossallworkflows Total number of workflows Business value scores of scheduling algorithms Genetic algorithm Round robin Random proportional Greedy Figure 4: Magnification of the left-most region in Figure 3. number of workflows that we are considering.",
        "For a very large number of workflows, the round-robin scheme is able to better balance the load across all service providers.",
        "To better understand the behaviour resulting from the scheduling assignments, we show the workflow completion results in Figures 5, 6, and 7 for 100, 500, and 900 workflows, respectively.",
        "These figures show the percentage of workflows that are successful (can complete with their QoS limit), acceptable (can complete within κ=3 times their QoS limit), and failed (cannot complete within κ=3 times their QoS limit).",
        "The GA consistently produces the highest percentage of successful workflows (resulting in higher business values for the aggregate set of workflows).",
        "Further, the round-robin scheme produces better results than the random-proportional for a large number of workflows but does not perform as well as the GA.",
        "In Figure 8 we graph the makespan resulting from the same experiments above.",
        "Makespan is a traditional metric from the job scheduling community measuring elapsed time for the last job to complete.",
        "While useful, it does not capture the high-level business value metric that we are optimising against.",
        "Indeed, the makespan is oblivious to the fact that we provide multiple levels of completion (successful, acceptable, and failed) and assign business value scores accordingly.",
        "For completeness, we note that the GA provides the fastest makespan, but it is matched by the round robin algorithm.",
        "The GA produces better business values (as shown in Figure 3) because it is able to search the solution space to find better mappings that produce more successful workflows (as shown in Figures 5 to 7).",
        "We also looked at the effect of the scheduling algorithms on balancing the load.",
        "Figure 9 shows the percentage of services providers that were accessed while the workflows ran.",
        "As expected, the greedy algorithm always hits one service provider; on the other hand, the round-robin algorithm is the fastest to spread the business 33 Experimental parameter Comment Workflows 5 to 1000 Business processes per workflow uniform random: 1 - 10 Service types 10 Service providers per service type uniform random: 1 - 10 Workflow QoS goal uniform random: 10-30 seconds Service provider completion time (α) uniform random: 1 - 12 seconds Service provider maximum concurrency (β) uniform random: 1 - 12 Service provider degradation coefficient (γ) uniform random: 0.1 - 0.9 Business value for successful workflows uniform random: 10 - 50 points Business value for acceptable workflows uniform random: 0 - 10 points Business value for failed workflows uniform random: -10 - 0 points GA: number of parents 20 GA: number of children 80 GA: number of generations 1000 Table 1: Experimental parameters Failed Acceptable (completed but not within QoS) Successful (completed within QoS) 0% 20% 40% 60% 80% 100% RoundRobinRandProportionalGreedyGeneticAlg Percentageofallworkflows Workflow behaviour, 100 workflows Figure 5: Workflow behaviour for 100 workflows.",
        "Failed Acceptable (completed but not within QoS) Successful (completed within QoS) 0% 20% 40% 60% 80% 100% RoundRobinRandProportionalGreedyGeneticAlg Percentageofallworkflows Workflow behaviour, 500 workflows Figure 6: Workflow behaviour for 500 workflows.",
        "Failed Acceptable (completed but not within QoS) Successful (completed within QoS) 0% 20% 40% 60% 80% 100% RoundRobinRandProportionalGreedyGeneticAlg Percentageofallworkflows Workflow behaviour, 500 workflows Figure 7: Workflow behaviour for 900 workflows. 0 50 100 150 200 250 300 0 200 400 600 800 1000 Makespan[seconds] Number of workflows Maximum completion time for all workflows Genetic algorithm Round robin Random proportional Greedy Figure 8: Maximum completion time for all workflows.",
        "This value is the makespan metric used in traditional scheduling research.",
        "Although useful, the makespan does not take into consideration the business value scoring in our problem domain. processes.",
        "Figure 10 is the percentage of accessed service providers (that is, the percentage of service providers represented in Figure 9) that had more assigned business processes than their advertised maximum concurrency.",
        "For example, in the greedy algorithm only one service provider is utilised, and this one provider quickly becomes saturated.",
        "On the other hand, the random-proportional algorithm uses many service providers, but because business processes are proportionally assigned with more assignments going to the better providers, there is a tendency for a smaller percentage of providers to become saturated.",
        "For completeness, we show the performance of the genetic algorithm itself in Figure 11.",
        "The algorithm scales linearly with an increasing number of workflows.",
        "We note that the round-robin, random-proportional, and greedy algorithms all finished within 1 second even for the largest workflow configuration.",
        "However, we feel that the benefit of finding much higher business value scores justifies the running time of the GA; further we would expect that the running time will improve with both software tuning as well as with a computer faster than our off-the-shelf PC. 5.",
        "CONCLUSION Business processes within workflows can be orchestrated to access web services.",
        "In this paper we looked at multi-tiered service provisioning where web service requests to service types can be mapped to different service providers.",
        "The resulting problem is that in order to support a very large number of workflows, the assignment of business process to web service provider must be intelligent.",
        "We used a business value metric to measure the be34 0 0.2 0.4 0.6 0.8 1 0 200 400 600 800 1000 Percentageofallserviceproviders Number of workflows Service providers utilised Genetic algorithm Round robin Random proportional Greedy Figure 9: The percentage of service providers utilized during workload executions.",
        "The Greedy algorithm always hits the one service provider, while the Round Robin algorithm spreads requests evenly across the providers. 0 0.2 0.4 0.6 0.8 1 0 200 400 600 800 1000 Percentageofallserviceproviders Number of workflows Service providers saturated Genetic algorithm Round robin Random proportional Greedy Figure 10: The percentage of service providers that are saturated among those providers who were utilized (that is, percentage of the service providers represented in Figure 9).",
        "A saturated service provider is one whose workload is greater that its advertised maximum concurrency. 0 5 10 15 20 25 0 200 400 600 800 1000 Runningtimeinseconds Total number of workflows Running time of genetic algorithm GA running time Figure 11: Running time of the genetic algorithm. haviour of workflows meeting or failing QoS values, and we optimised our scheduling to maximise the aggregate business value across all workflows.",
        "Since the solution space of scheduler mappings is exponential, we used a genetic search algorithm to search the space and converge toward the best schedule.",
        "With a default configuration for all parameters and using our business value scoring, the GA produced up to 115% business value improvement over the next best algorithm.",
        "Finally, because a genetic algorithm will converge towards the optimal value using any metric (even other than the business value metric we used), we believe our approach has strong potential for continuing work.",
        "In future work, we look to acquire real-world traces of web service instances in order to get better estimates of service agreement guarantees, although we expect that such guarantees between the providers and their consumers are not generally available to the public.",
        "We will also look at other QoS metrics such as CPU and I/O usage.",
        "For example, we can analyse transfer costs with varying bandwidth, latency, data size, and data distribution.",
        "Further, we hope to improve our genetic algorithm and compare it to more scheduler alternatives.",
        "Finally, since our work is complementary to existing work in web services choreography (because we rely on pre-configured workflows), we look to integrate our approach with available web service workflow systems expressed in BPEL. 6.",
        "REFERENCES [1] A. Ankolekar, et al.",
        "DAML-S: Semantic Markup For Web Services, In Proc. of the Intl Semantic Web Working Symposium, 2001. [2] L. Davis.",
        "Job Shop Scheduling with Genetic Algorithms, In Proc. of the Intl Conference on Genetic Algorithms, 1985. [3] H.-L. Fang, P. Ross, and D. Corne.",
        "A Promising Genetic Algorithm Approach to Job-Shop Scheduling, Rescheduling, and Open-Shop Scheduling Problems , In Proc. on the 5th Intl Conference on Genetic Algorithms, 1993. [4] M. Gary and D. Johnson.",
        "Computers and Intractability: A Guide to the Theory of NP-Completeness, Freeman, 1979. [5] J. Holland.",
        "Adaptation in Natural and Artificial Systems: An Introductory Analysis with Applications to Biology, Control, and Artificial Intelligence, MIT Press, 1992. [6] D. Goldberg.",
        "Genetic Algorithms in Search, Optimization and Machine Learning, Kluwer Academic Publishers, 1989. [7] Business Processes in a Web Services World, www-128.ibm.com/developerworks/ webservices/library/ws-bpelwp/. [8] G. Soundararajan, K. Manassiev, J. Chen, A. Goel, and C. Amza.",
        "Back-end Databases in Shared Dynamic Content Server Clusters, In Proc. of the IEEE Intl Conference on Autonomic Computing, 2005. [9] B. Srivastava and J. Koehler.",
        "Web Service Composition Current Solutions and Open Problems, ICAP, 2003. [10] B. Urgaonkar, P. Shenoy, A. Chandra, and P. Goyal.",
        "Dynamic Provisioning of Multi-Tier Internet Applications, In Proc. of the IEEE Intl Conference on Autonomic Computing, 2005. [11] L. Zeng, B. Benatallah, M. Dumas, J. Kalagnanam, and Q. Sheng.",
        "Quality Driven Web Services Composition, In Proc. of the WWW Conference, 2003. 35"
    ],
    "translated_text_sentences": [
        "Programación basada en heurísticas de cargas de trabajo de servicios web compuestos Thomas Phan Wen-Syan Li Centro de Investigación IBM Almaden 650 Harry Rd.",
        "Los servicios web pueden ser agregados para crear flujos de trabajo compuestos que proporcionen funcionalidad simplificada para usuarios humanos u otros sistemas.",
        "Aunque los estándares de la industria y la investigación reciente han buscado definir las mejores prácticas y mejorar la composición del flujo de trabajo de extremo a extremo, un área que no ha sido completamente explorada es la programación de las solicitudes de servicios web de los flujos de trabajo para la provisión real de servicios en un entorno multinivel y multiorganizacional.",
        "Este problema es relevante para los escenarios empresariales modernos donde los procesos comerciales dentro de un flujo de trabajo deben completarse dentro de los límites definidos por la calidad de servicio (QoS).",
        "Debido a que estos procesos comerciales son consumidores de servicios web, las solicitudes de servicio deben ser mapeadas y programadas entre múltiples proveedores de servicios web, cada uno con su propio acuerdo de nivel de servicio negociado.",
        "En este documento proporcionamos heurísticas para programar solicitudes de servicio de múltiples flujos de trabajo de procesos comerciales a proveedores de servicios web de manera que se maximice una métrica de valor comercial en todos los flujos de trabajo.",
        "Mostramos que un algoritmo de búsqueda genética es apropiado para realizar esta programación, y a través de experimentación demostramos que nuestro algoritmo escala bien hasta mil flujos de trabajo y produce mejores asignaciones que enfoques tradicionales.",
        "Categorías y Descriptores de Asignaturas C.2.4 [Redes de Computadoras-Comunicación]: Sistemas Distribuidos-aplicaciones distribuidas; D.2.8 [Ingeniería de Software]: Métricas-medidas de complejidad, medidas de rendimiento 1.",
        "INTRODUCCIÓN Los servicios web pueden ser compuestos en flujos de trabajo para proporcionar funcionalidad integrada de principio a fin para usuarios humanos u otros sistemas.",
        "Aunque los esfuerzos de investigación previos han examinado formas de automatizar de manera inteligente la composición de servicios web en flujos de trabajo (por ejemplo, [1, 9]), un problema importante que aún persiste es la asignación de solicitudes de servicios web a los proveedores de servicios web subyacentes en un escenario de tiempo de ejecución multinivel dentro de ciertas restricciones.",
        "En este documento abordamos este problema de programación y examinamos medios para gestionar un gran número de flujos de trabajo de procesos comerciales de manera escalable.",
        "El problema de programar solicitudes de servicios web a proveedores es relevante para los dominios comerciales modernos que dependen de la provisión de servicios de múltiples niveles.",
        "Considera el ejemplo mostrado en la Figura 1 que ilustra nuestro espacio de problemas.",
        "Los flujos de trabajo comprenden múltiples procesos comerciales relacionados que son consumidores de servicios web; aquí asumimos que los flujos de trabajo representan servicios solicitados por clientes o sistemas automatizados y que el flujo de trabajo ya ha sido compuesto con una herramienta de coreografía existente.",
        "Estos flujos de trabajo son luego enviados a un portal (no mostrado) que actúa como un agente de programación entre los consumidores del servicio web y los proveedores del servicio web.",
        "En este ejemplo, un flujo de trabajo podría representar las acciones necesarias para crear un itinerario de vacaciones, donde un proceso empresarial solicita la reserva de un boleto de avión, otro proceso empresarial solicita una habitación de hotel, y así sucesivamente.",
        "Cada una de estas solicitudes apunta a un tipo de servicio en particular (por ejemplo, reservas de aerolíneas, reservas de hoteles, reservas de autos, etc.), y para cada tipo de servicio, hay múltiples instancias de proveedores de servicios que publican una interfaz de servicio web.",
        "Un desafío importante es que los flujos de trabajo deben cumplir con alguna métrica de calidad de servicio (QoS), como el tiempo de finalización de extremo a extremo de todos sus procesos comerciales, y que cumplir o no con este objetivo resulta en la asignación de una métrica de valor comercial cuantitativo para el flujo de trabajo; intuitivamente, se desea que todos los flujos de trabajo cumplan con sus respectivos objetivos de QoS.",
        "Además, aprovechamos la idea de que los acuerdos de servicio de QoS suelen ser acordados entre los proveedores de servicios web y el agente de programación de tal manera que los proveedores anuncian un cierto nivel de QoS garantizado al programador en función de condiciones de tiempo de respuesta y concurrencia máxima disponible.",
        "El problema resultante es entonces programar y asignar las solicitudes de procesos comerciales para tipos de servicio a uno de los proveedores de servicios para ese tipo.",
        "La programación debe realizarse de tal manera que se maximice el valor comercial agregado en todos los flujos de trabajo.",
        "En la Sección 3 planteamos el escenario como un problema combinatorio y utilizamos un algoritmo de búsqueda genética [5] para encontrar la mejor asignación de solicitudes de servicios web a proveedores.",
        "Este enfoque converge hacia una asignación que maximiza el valor comercial general para todos los flujos de trabajo.",
        "En la Sección 4 mostramos a través de experimentación que esta heurística de búsqueda encuentra asignaciones mejores que otros algoritmos (codicioso, round-robin y proporcional).",
        "Además, este enfoque nos permite escalar el número de flujos de trabajo simultáneos (hasta mil flujos de trabajo en nuestros experimentos) y aún así encontrar horarios efectivos. 2.",
        "TRABAJO RELACIONADO En el contexto de asignación y programación de servicios, [11] mapea llamadas de servicios web a servidores potenciales utilizando programación lineal, pero su trabajo se centra en mapear solo flujos de trabajo individuales; nuestro enfoque principal está en programar de manera escalable múltiples flujos de trabajo (hasta 30 tipos de servicios SuperHotels.com Proceso de Negocio Proceso de Negocio Flujo de Trabajo ... Proceso de Negocio Proceso de Negocio ... HostileHostels.com IncredibleInns.com Proceso de Negocio Proceso de Negocio Proceso de Negocio ... Proceso de Negocio Proveedor de Servicios SkyHighAirlines.com SuperCrazyFlights.com Proceso de Negocio . . . . . .",
        "Acuerdo de Servicio de Calidad de Servicio (QoS) Publicitado CarRentalService.com Figura 1: Un escenario de ejemplo que muestra la interacción entre procesos comerciales en flujos de trabajo y proveedores de servicios web.",
        "Cada proceso empresarial accede a un tipo de servicio y luego se asigna a un proveedor de servicios para ese tipo, a uno mil como mostraremos más adelante, utilizando diferentes métricas empresariales y una heurística de búsqueda. [10] presenta un enfoque de aprovisionamiento dinámico que utiliza técnicas predictivas y reactivas para la entrega de aplicaciones de Internet multinivel.",
        "Sin embargo, las técnicas de aprovisionamiento no consideran los desafíos enfrentados cuando hay planes alternativos de ejecución de consultas y fuentes de datos replicadas. [8] presenta un mecanismo de programación basado en retroalimentación para sistemas multinivel con bases de datos de back-end, pero a diferencia de nuestro trabajo, asume un acoplamiento más estrecho entre los diversos componentes del sistema.",
        "Nuestro trabajo también se basa en investigaciones previas sobre programación.",
        "El problema clásico de programación de talleres, demostrado como NP-completo [4] [3], es similar al nuestro en el sentido de que las tareas dentro de un trabajo deben ser programadas en maquinaria (cf. nuestro escenario es que los procesos comerciales dentro de un flujo de trabajo deben ser programados en proveedores de servicios web).",
        "Las diferencias más destacadas son que las máquinas solo pueden procesar un trabajo a la vez (asumimos que los servidores pueden realizar múltiples tareas pero con un rendimiento degradado y un nivel máximo de concurrencia), las tareas dentro de un trabajo no pueden ejecutarse simultáneamente en diferentes máquinas (asumimos que los procesos comerciales pueden asignarse a cualquier servidor disponible), y la métrica principal de rendimiento es el makespan, que es el tiempo que tarda la última tarea de todos los trabajos en completarse (y como mostraremos más adelante, optimizar el makespan no es suficiente para programar los procesos comerciales, lo que requiere diferentes métricas). 3.",
        "En esta sección describimos nuestro modelo y discutimos cómo podemos encontrar asignaciones de programación utilizando un algoritmo de búsqueda genética. 3.1 Modelo Basamos nuestro modelo en el escenario simplificado mostrado en la Figura 1.",
        "Específicamente, asumimos que los usuarios o sistemas automatizados solicitan la ejecución de un flujo de trabajo.",
        "Los flujos de trabajo comprenden procesos comerciales, cada uno de los cuales realiza una invocación de servicio web a un tipo de servicio.",
        "Además, los procesos comerciales tienen un orden en el flujo de trabajo.",
        "La disposición y ejecución de los procesos comerciales y el flujo de datos entre ellos son gestionados por una herramienta de composición o coreografía (por ejemplo, [1, 9]).",
        "Aunque los lenguajes de composición pueden utilizar mecanismos sofisticados de control de flujo como ramas condicionales, para simplificar asumimos que los procesos se ejecutan secuencialmente en un orden dado.",
        "Este escenario puede ser extendido de forma natural a relaciones más complejas que pueden ser expresadas en BPEL [7], el cual define cómo interactúan los procesos de negocio, se intercambian mensajes, se ordenan actividades y se manejan excepciones.",
        "Debido a limitaciones de espacio, nos enfocamos en el espacio de problemas presentado aquí y extenderemos nuestro modelo a escenarios de implementación más avanzados en el futuro.",
        "Cada flujo de trabajo tiene un requisito de calidad de servicio (QoS) que debe completarse dentro de un número específico de unidades de tiempo (por ejemplo, del orden de segundos, como se detalla en la sección de Experimentos).",
        "Una vez completado (o fallido), se asigna un valor comercial al flujo de trabajo.",
        "Extendimos este enfoque aún más y consideramos diferentes tipos de finalización de flujo de trabajo para modelar niveles diferenciados de QoS que pueden ser aplicados por las empresas (por ejemplo, para proporcionar servicios al cliente escalonados).",
        "Decimos que un flujo de trabajo es exitoso si se completa dentro de su requisito de QoS, aceptable si se completa dentro de un factor constante κ 31 de su límite de QoS (en nuestros experimentos elegimos κ=3), o fallido si termina más allá de κ veces su límite de QoS.",
        "Para cada categoría, se asigna un puntaje de valor comercial al flujo de trabajo, siendo la categoría exitosa la que recibe la puntuación positiva más alta, seguida por la aceptable y luego la fallida.",
        "La distribución de puntos de valor empresarial no es uniforme en los flujos de trabajo, lo que modela casos en los que algunos flujos de trabajo tienen mayor prioridad que otros.",
        "Cada tipo de servicio es implementado por varios proveedores de servicios diferentes.",
        "Suponemos que los proveedores hacen acuerdos de nivel de servicio (SLAs) para garantizar un nivel de rendimiento definido por el tiempo de finalización de una invocación de servicio web.",
        "Aunque los Acuerdos de Nivel de Servicio (SLAs) pueden ser complejos, en este documento asumimos, para simplificar, que las garantías pueden adoptar la forma de una degradación lineal del rendimiento bajo carga.",
        "Esta garantía está definida por varios parámetros: α es el tiempo de finalización esperado (por ejemplo, del orden de segundos) si la carga de trabajo asignada de las solicitudes de servicio web es menor o igual a β, la concurrencia máxima, y si la carga de trabajo es mayor que β, la finalización esperada para una carga de trabajo de tamaño ω es α + γ(ω − β) donde γ es un coeficiente fraccional.",
        "En nuestros experimentos variamos α, β y γ con diferentes distribuciones.",
        "Idealmente, todos los flujos de trabajo podrían finalizar dentro de sus límites de calidad de servicio (QoS) y, por lo tanto, maximizar el valor empresarial agregado en todos los flujos de trabajo.",
        "Sin embargo, debido a que modelamos a los proveedores de servicios con un rendimiento degradante bajo carga, no todos los flujos de trabajo alcanzarán su límite de calidad de servicio (QoS): fácilmente puede darse el caso de que los procesos comerciales sean asignados a proveedores que están sobrecargados y no pueden completarse dentro del límite de calidad de servicio respectivo de los flujos de trabajo.",
        "El problema clave de investigación, entonces, es asignar los procesos comerciales a los proveedores de servicios web con el objetivo de optimizar el valor comercial agregado de todos los flujos de trabajo.",
        "Dado que el alcance de la optimización es el conjunto completo de flujos de trabajo, puede ser que las mejores asignaciones de programación resulten en que algunos flujos de trabajo tengan que fallar para que otros tengan éxito.",
        "Esta observación intuitiva sugiere que enfoques de programación tradicionales como el round-robin o asignaciones proporcionales no funcionarán bien, lo cual es lo que observamos y discutimos en la Sección 4.",
        "Por otro lado, una búsqueda exhaustiva de todas las posibles asignaciones encontrará el mejor horario, pero la complejidad computacional es prohibitivamente alta.",
        "Supongamos que hay W flujos de trabajo con un promedio de B procesos de negocio por flujo de trabajo.",
        "Además, en el peor de los casos, cada proceso empresarial solicita un tipo de servicio, para el cual hay P proveedores.",
        "Por lo tanto, hay W · PB combinaciones para explorar y encontrar las asignaciones óptimas de procesos comerciales a proveedores.",
        "Incluso para configuraciones pequeñas (por ejemplo,",
        "Dado que (W=10, B=5, P=10), el tiempo computacional para la búsqueda exhaustiva es significativo, y en nuestro trabajo buscamos ajustar estos parámetros.",
        "En la siguiente subsección, discuta cómo se puede utilizar un algoritmo de búsqueda genética para converger hacia las asignaciones de programación óptimas. 3.2 Algoritmo genético Dado un espacio de búsqueda exponencial de asignaciones de procesos comerciales a proveedores de servicios web, el problema es encontrar la asignación óptima que produzca el valor comercial agregado más alto en general en todos los flujos de trabajo.",
        "Para explorar el espacio de soluciones, utilizamos un algoritmo genético (GA) que simula la selección natural darwiniana al hacer que los miembros de una población compitan por sobrevivir para transmitir sus cromosomas genéticos a la siguiente generación; después de generaciones sucesivas, hay una tendencia a que los cromosomas converjan hacia la mejor combinación.",
        "Aunque existen otras heurísticas de búsqueda que pueden resolver problemas de optimización (por ejemplo, recocido simulado o escalada de colina más empinada), el problema de programación de procesos empresariales se adapta bien a un AG porque las soluciones potenciales pueden representarse en forma de matriz y nos permite utilizar investigaciones previas en la recombinación efectiva de cromosomas de AG para formar nuevos miembros de la población (por ejemplo, [2]). 0 1 2 3 4 0 1 2 0 2 1 1 0 1 0 1 0 2 1 2 0 0 1 Figura 2: Un ejemplo de cromosoma que representa una asignación de programación de (flujo de trabajo, tipo de servicio) → proveedor de servicios.",
        "Cada fila representa un flujo de trabajo, y cada columna representa un tipo de servicio.",
        "Por ejemplo, aquí hay 3 flujos de trabajo (0 a 2) y 5 tipos de servicio (0 a 4).",
        "En el flujo de trabajo 0, cualquier solicitud de tipo de servicio 3 se dirige al proveedor 2.",
        "Ten en cuenta que el identificador del proveedor de servicios se encuentra dentro de un rango limitado a su tipo de servicio (es decir, su columna), por lo que el 2 listado para el tipo de servicio 3 es un servidor diferente al servidor 2 en otras columnas.",
        "Representación cromosómica de una solución.",
        "En la Figura 2 mostramos un ejemplo de cromosoma que codifica una asignación de programación.",
        "La representación es una matriz bidimensional que mapea {flujo de trabajo, tipo de servicio} a un proveedor de servicios.",
        "Para un proceso de negocio en el flujo de trabajo i y utilizando el tipo de servicio j, la entrada (i, j)-ésima en la tabla es el identificador del proveedor de servicios al que se asigna el proceso de negocio.",
        "Ten en cuenta que el identificador del proveedor de servicios se encuentra dentro de un rango limitado a su tipo de servicio.",
        "Ejecución de GA.",
        "Un algoritmo genético procede de la siguiente manera.",
        "Inicialmente se crea un conjunto aleatorio de cromosomas para la población.",
        "Los cromosomas son evaluados (hasheados) según alguna métrica, y los mejores son elegidos para ser padres.",
        "En nuestro problema, la evaluación produce el valor neto del negocio en todos los flujos de trabajo después de ejecutar todos los procesos comerciales una vez que se asignan a sus respectivos proveedores de servicios de acuerdo con el mapeo en el cromosoma.",
        "Los padres se recombinan para producir hijos, simulando un cruce sexual, y ocasionalmente puede surgir una mutación que produce nuevas características que no estaban disponibles en ninguno de los padres.",
        "La idea principal es que nos gustaría que los niños fueran diferentes de los padres (para explorar más del espacio de soluciones) pero no demasiado diferentes (para contener las porciones del cromosoma que resultan en asignaciones de programación exitosas).",
        "Ten en cuenta que encontrar el óptimo global no está garantizado debido a que la recombinación y la mutación son estocásticas.",
        "Recombinación y mutación de ADN.",
        "Como se mencionó, los cromosomas son matrices bidimensionales que representan asignaciones de horarios.",
        "Para simular la recombinación sexual de dos cromosomas para producir un nuevo cromosoma hijo, aplicamos un esquema de cruce de un punto dos veces (una vez a lo largo de cada dimensión).",
        "El cruce se explica mejor por analogía al espacio cartesiano de la siguiente manera.",
        "Se elige un punto al azar en la matriz para que sea la coordenada (0, 0).",
        "Los elementos de la matriz de los cuadrantes II y IV del primer progenitor y los elementos de los cuadrantes I y III del segundo progenitor se utilizan para crear el nuevo hijo.",
        "Este enfoque sigue las mejores prácticas de los algoritmos genéticos al mantener juntos los segmentos cromosómicos contiguos a medida que se transmiten de padre a hijo.",
        "El esquema de mutación de uni-cromosoma cambia aleatoriamente una de las asignaciones de proveedor de servicios a otro proveedor dentro del rango disponible.",
        "Otros esquemas de recombinación y mutación son un área de investigación en la comunidad de AG, y buscamos explorar nuevos operadores en trabajos futuros.",
        "Función de evaluación de GA.",
        "Un componente importante de los algoritmos genéticos es la función de evaluación.",
        "Dada una cromosoma particular que representa un mapeo de programación, la función calcula de manera determinista el valor neto del negocio en todas las cargas de trabajo.",
        "Los procesos comerciales en cada carga de trabajo se asignan a proveedores de servicios, y el tiempo de finalización de cada proveedor se calcula en función de la garantía del acuerdo de servicio utilizando los parámetros mencionados en la Sección 3.1, a saber, el tiempo de finalización sin carga α, la máxima concurrencia β y un coeficiente γ que controla la degradación del rendimiento lineal bajo carga pesada.",
        "Ten en cuenta que la función de evaluación puede ser fácilmente reemplazada si se desea; por ejemplo, otras funciones de evaluación pueden modelar diferentes garantías de proveedores de servicios o flujos de trabajo paralelos. 4.",
        "EXPERIMENTOS Y RESULTADOS En esta sección mostramos el beneficio de utilizar nuestro planificador basado en algoritmos genéticos.",
        "Debido a que queríamos escalar los escenarios a un gran número de flujos de trabajo (hasta 1000 en nuestros experimentos), implementamos un programa de simulación que nos permitió variar parámetros y medir los resultados con diferentes métricas.",
        "El simulador fue escrito en C++ estándar y se ejecutó en un ordenador de escritorio Linux (Fedora Core) con una velocidad de 2.8 GHz y 1GB de RAM.",
        "Comparamos nuestro algoritmo con candidatos alternativos: • Un algoritmo de round-robin bien conocido que asigna cada proceso comercial de forma circular a los proveedores de servicios para un tipo de servicio en particular.",
        "Este enfoque proporciona el esquema más simple para el equilibrio de carga. • Un algoritmo aleatorio-proporcional que asigna proporcionalmente los procesos comerciales a los proveedores de servicios; es decir, para un tipo de servicio dado, los proveedores de servicios se clasifican según su tiempo de finalización garantizado, y los procesos comerciales se asignan proporcionalmente a los proveedores en función de su tiempo de finalización. (También probamos un esquema de proporcionalidad basado tanto en los tiempos de finalización como en la concurrencia máxima, pero obtuvimos los mismos resultados, por lo que solo se muestran los resultados de los esquemas anteriores aquí.) • Un algoritmo codicioso de hombre de paja que siempre asigna los procesos comerciales al proveedor de servicios que tiene el tiempo de finalización garantizado más rápido.",
        "Este algoritmo representa un enfoque ingenuo basado en observaciones avaras y locales de cada flujo de trabajo sin tener en cuenta todos los flujos de trabajo.",
        "En los experimentos que siguen, todos los resultados fueron promediados a lo largo de 20 pruebas, y para ayudar a normalizar los efectos de la aleatorización utilizada durante el AG, cada prueba comenzó leyendo datos preinicializados desde el disco.",
        "En la Tabla 1 enumeramos nuestros parámetros experimentales.",
        "En la Figura 3 mostramos los resultados de ejecutar nuestro AG contra las tres alternativas candidatas.",
        "El eje x muestra el número de flujos de trabajo escalado a 1000, y el eje y muestra el valor comercial agregado de todos los flujos de trabajo.",
        "Como se puede ver, el algoritmo genético produce consistentemente el mayor valor comercial incluso a medida que aumenta el número de flujos de trabajo; con 1000 flujos de trabajo, el algoritmo genético produce una mejora del 115% sobre la siguiente mejor alternativa. (Tenga en cuenta que aunque estamos optimizando en función de la métrica de valor comercial que definimos anteriormente, los algoritmos genéticos pueden converger hacia el valor óptimo de cualquier métrica, siempre y cuando la función de evaluación pueda medir de manera consistente el valor de un cromosoma con esa métrica).",
        "Como era de esperar, el algoritmo codicioso tiene un rendimiento muy pobre porque hace el peor trabajo en equilibrar la carga: todos los procesos comerciales de un tipo de servicio dado se asignan a un solo servidor (el que se anuncia como el que tiene el tiempo de finalización más rápido), y a medida que llegan más procesos comerciales, el rendimiento de los proveedores se degrada linealmente.",
        "El esquema de round-robin es inicialmente superado por el esquema proporcional aleatorio hasta alrededor de 120 flujos de trabajo (como se muestra en el gráfico ampliado de la Figura 4), pero a medida que aumenta el número de flujos de trabajo, el esquema de round-robin gana consistentemente sobre el proporcional aleatorio.",
        "La razón es que aunque el esquema aleatorio-proporcional asigna procesos comerciales a proveedores proporcionalmente según los tiempos de finalización anunciados (que es una medida del poder del proveedor de servicios), incluso los mejores proveedores eventualmente alcanzarán una concurrencia máxima del mundo real para la gran cantidad de flujos de trabajo que estamos considerando.",
        "Para un número muy grande de flujos de trabajo, el esquema de round-robin es capaz de equilibrar mejor la carga entre todos los proveedores de servicios.",
        "Para comprender mejor el comportamiento resultante de las asignaciones de programación, mostramos los resultados de finalización del flujo de trabajo en las Figuras 5, 6 y 7 para 100, 500 y 900 flujos de trabajo, respectivamente.",
        "Estas cifras muestran el porcentaje de flujos de trabajo que son exitosos (pueden completarse dentro de su límite de QoS), aceptables (pueden completarse dentro de κ=3 veces su límite de QoS) y fallidos (no pueden completarse dentro de κ=3 veces su límite de QoS).",
        "El GA produce consistentemente el mayor porcentaje de flujos de trabajo exitosos (lo que resulta en valores comerciales más altos para el conjunto agregado de flujos de trabajo).",
        "Además, el esquema de round-robin produce mejores resultados que el proporcional-aleatorio para un gran número de flujos de trabajo, pero no tiene un rendimiento tan bueno como el algoritmo genético.",
        "En la Figura 8 graficamos el makespan resultante de los mismos experimentos anteriores.",
        "Makespan es una métrica tradicional de la comunidad de programación de trabajos que mide el tiempo transcurrido para que se complete el último trabajo.",
        "Aunque útil, no captura la métrica de valor empresarial de alto nivel contra la que estamos optimizando.",
        "De hecho, el makespan no tiene en cuenta el hecho de que proporcionamos múltiples niveles de finalización (exitoso, aceptable y fallido) y asignamos puntajes de valor comercial en consecuencia.",
        "Para completar, señalamos que el algoritmo genético proporciona el makespan más rápido, pero es igualado por el algoritmo de round robin.",
        "El algoritmo genético produce mejores valores comerciales (como se muestra en la Figura 3) porque es capaz de explorar el espacio de soluciones para encontrar mejores asignaciones que generen flujos de trabajo más exitosos (como se muestra en las Figuras 5 a 7).",
        "También analizamos el efecto de los algoritmos de programación en el equilibrio de la carga.",
        "La Figura 9 muestra el porcentaje de proveedores de servicios que fueron accedidos mientras se ejecutaban los flujos de trabajo.",
        "Como era de esperar, el algoritmo codicioso siempre elige a un proveedor de servicios; por otro lado, el algoritmo de round-robin es el más rápido para distribuir el negocio. 33 Parámetro experimental Comentario Flujos de trabajo 5 a 1000 Procesos de negocio por flujo de trabajo aleatorio uniforme: 1 - 10 Tipos de servicio 10 Proveedores de servicios por tipo de servicio aleatorio uniforme: 1 - 10 Objetivo de QoS del flujo de trabajo aleatorio uniforme: 10-30 segundos Tiempo de finalización del proveedor de servicios (α) aleatorio uniforme: 1 - 12 segundos Máxima concurrencia del proveedor de servicios (β) aleatorio uniforme: 1 - 12 Coeficiente de degradación del proveedor de servicios (γ) aleatorio uniforme: 0.1 - 0.9 Valor de negocio para flujos de trabajo exitosos aleatorio uniforme: 10 - 50 puntos Valor de negocio para flujos de trabajo aceptables aleatorio uniforme: 0 - 10 puntos Valor de negocio para flujos de trabajo fallidos aleatorio uniforme: -10 - 0 puntos GA: número de padres 20 GA: número de hijos 80 GA: número de generaciones 1000 Tabla 1: Parámetros experimentales Fallido Aceptable (completado pero no dentro de QoS) Exitoso (completado dentro de QoS) 0% 20% 40% 60% 80% 100% RoundRobinRandProportionalGreedyGeneticAlg Porcentaje de todos los flujos de trabajo Comportamiento del flujo de trabajo, 100 flujos de trabajo Figura 5: Comportamiento del flujo de trabajo para 100 flujos de trabajo.",
        "Fracaso Aceptable (completado pero no dentro de QoS) Exitoso (completado dentro de QoS) 0% 20% 40% 60% 80% 100% RoundRobinRandProportionalGreedyGeneticAlg Porcentaje de todos los flujos de trabajo Comportamiento del flujo de trabajo, 500 flujos de trabajo Figura 6: Comportamiento del flujo de trabajo para 500 flujos de trabajo.",
        "Fracaso Aceptable (completado pero no dentro de QoS) Exitoso (completado dentro de QoS) 0% 20% 40% 60% 80% 100% RoundRobinRandProportionalGreedyGeneticAlg Porcentaje de todos los flujos de trabajo Comportamiento del flujo de trabajo, 500 flujos de trabajo Figura 7: Comportamiento del flujo de trabajo para 900 flujos de trabajo. 0 50 100 150 200 250 300 0 200 400 600 800 1000 Tiempo total [segundos] Número de flujos de trabajo Tiempo máximo de finalización para todos los flujos de trabajo Algoritmo genético Round robin Proporcional aleatorio Codicioso Figura 8: Tiempo máximo de finalización para todos los flujos de trabajo.",
        "Este valor es la métrica makespan utilizada en la investigación de programación tradicional.",
        "Aunque útil, el makespan no tiene en cuenta la puntuación del valor comercial en nuestro dominio de problemas.",
        "La Figura 10 muestra el porcentaje de proveedores de servicios accedidos (es decir, el porcentaje de proveedores de servicios representados en la Figura 9) que tenían más procesos comerciales asignados que su concurrencia máxima anunciada.",
        "Por ejemplo, en el algoritmo voraz solo se utiliza un proveedor de servicios, y este proveedor se satura rápidamente.",
        "Por otro lado, el algoritmo aleatorio-proporcional utiliza muchos proveedores de servicios, pero debido a que los procesos comerciales se asignan de manera proporcional con más asignaciones yendo a los mejores proveedores, hay una tendencia a que un menor porcentaje de proveedores se saturen.",
        "Para completitud, mostramos el rendimiento del algoritmo genético en sí mismo en la Figura 11.",
        "El algoritmo escala linealmente con un aumento en el número de flujos de trabajo.",
        "Observamos que los algoritmos round-robin, random-proportional y greedy terminaron en menos de 1 segundo incluso para la configuración de flujo de trabajo más grande.",
        "Sin embargo, consideramos que el beneficio de encontrar puntajes de valor empresarial mucho más altos justifica el tiempo de ejecución del algoritmo genético; además, esperaríamos que el tiempo de ejecución mejore tanto con la optimización del software como con un ordenador más rápido que nuestro PC estándar.",
        "CONCLUSIÓN Los procesos comerciales dentro de los flujos de trabajo pueden ser orquestados para acceder a servicios web.",
        "En este artículo estudiamos la provisión de servicios de múltiples niveles, donde las solicitudes de servicios web a tipos de servicios pueden ser asignadas a diferentes proveedores de servicios.",
        "El problema resultante es que para poder soportar un gran número de flujos de trabajo, la asignación de procesos de negocio a proveedores de servicios web debe ser inteligente.",
        "Utilizamos una métrica de valor empresarial para medir el 0.2 0.4 0.6 0.8 1 0 200 400 600 800 1000 Porcentaje de todos los proveedores de servicios Número de flujos de trabajo Proveedores de servicios utilizados Algoritmo genético Round robin Proporcional aleatorio Ávido Figura 9: El porcentaje de proveedores de servicios utilizados durante las ejecuciones de carga de trabajo.",
        "El algoritmo Greedy siempre elige al mismo proveedor de servicios, mientras que el algoritmo Round Robin distribuye las solicitudes de manera uniforme entre los proveedores. 0 0.2 0.4 0.6 0.8 1 0 200 400 600 800 1000 Porcentaje de todos los proveedores de servicios Número de flujos de trabajo Proveedores saturados Algoritmo genético Round robin Proporcional aleatorio Greedy Figura 10: El porcentaje de proveedores de servicios que están saturados entre aquellos proveedores que fueron utilizados (es decir, el porcentaje de proveedores de servicios representados en la Figura 9).",
        "Un proveedor de servicios saturado es aquel cuya carga de trabajo es mayor que su concurrencia máxima anunciada.",
        "Dado que el espacio de soluciones de los mapeos de programación es exponencial, utilizamos un algoritmo de búsqueda genética para explorar el espacio y converger hacia el mejor horario.",
        "Con una configuración predeterminada para todos los parámetros y utilizando nuestra puntuación de valor empresarial, el GA produjo hasta un 115% de mejora en el valor empresarial sobre el siguiente mejor algoritmo.",
        "Finalmente, debido a que un algoritmo genético convergerá hacia el valor óptimo utilizando cualquier métrica (incluso diferente a la métrica de valor empresarial que utilizamos), creemos que nuestro enfoque tiene un fuerte potencial para trabajos futuros.",
        "En trabajos futuros, buscamos adquirir trazas del mundo real de instancias de servicios web para obtener mejores estimaciones de las garantías de acuerdo de servicio, aunque esperamos que tales garantías entre los proveedores y sus consumidores no estén generalmente disponibles para el público.",
        "También analizaremos otras métricas de calidad de servicio (QoS) como el uso de CPU y E/S.",
        "Por ejemplo, podemos analizar los costos de transferencia con diferentes anchos de banda, latencia, tamaño de datos y distribución de datos.",
        "Además, esperamos mejorar nuestro algoritmo genético y compararlo con más alternativas de programación.",
        "Finalmente, dado que nuestro trabajo es complementario al trabajo existente en coreografía de servicios web (porque dependemos de flujos de trabajo preconfigurados), buscamos integrar nuestro enfoque con los sistemas de flujo de trabajo de servicios web disponibles expresados en BPEL. 6.",
        "REFERENCIAS [1] A. Ankolekar, et al.",
        "DAML-S: Marcado Semántico para Servicios Web, En Proc. del Simposio Internacional de Trabajo de la Web Semántica, 2001. [2] L. Davis.",
        "Programación de taller con algoritmos genéticos, En Proc. de la Conferencia Internacional sobre Algoritmos Genéticos, 1985. [3] H.-L. Fang, P. Ross y D. Corne.",
        "Un Enfoque Prometedor de Algoritmo Genético para Problemas de Programación de Taller de Trabajo, Re-programación y Programación de Taller Abierto, En Actas de la 5ta Conferencia Internacional sobre Algoritmos Genéticos, 1993. [4] M. Gary y D. Johnson.",
        "Computadoras e Intractabilidad: Una Guía de la Teoría de NP-Completitud, Freeman, 1979. [5] J. Holland.",
        "Adaptación en Sistemas Naturales y Artificiales: Un Análisis Introductorio con Aplicaciones a la Biología, Control e Inteligencia Artificial, MIT Press, 1992. [6] D. Goldberg.",
        "Algoritmos Genéticos en Búsqueda, Optimización y Aprendizaje Automático, Kluwer Academic Publishers, 1989. [7] Procesos de Negocio en un Mundo de Servicios Web, www-128.ibm.com/developerworks/webservices/library/ws-bpelwp/. [8] G. Soundararajan, K. Manassiev, J. Chen, A. Goel y C. Amza.",
        "Bases de datos de back-end en clústeres de servidores de contenido dinámico compartido, En Proc. de la Conferencia Internacional de Computación Autónoma de IEEE, 2005. [9] B. Srivastava y J. Koehler.",
        "Composición de Servicios Web: Soluciones Actuales y Problemas Abiertos, ICAP, 2003. [10] B. Urgaonkar, P. Shenoy, A. Chandra y P. Goyal.",
        "Provisión dinámica de aplicaciones de Internet de múltiples niveles, En Proc. de la Conferencia Internacional de IEEE sobre Computación Autónoma, 2005. [11] L. Zeng, B. Benatallah, M. Dumas, J. Kalagnanam y Q. Sheng.",
        "Composición de Servicios Web Impulsada por la Calidad, En Proc. de la Conferencia WWW, 2003. 35"
    ],
    "error_count": 3,
    "keys": {
        "streamlined functionality": {
            "translated_key": "funcionalidad simplificada",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Heuristics-Based Scheduling of Composite Web Service Workloads Thomas Phan Wen-Syan Li IBM Almaden Research Center 650 Harry Rd.",
                "San Jose, CA 95120 {phantom,wsl}@us.ibm.com ABSTRACT Web services can be aggregated to create composite workflows that provide <br>streamlined functionality</br> for human users or other systems.",
                "Although industry standards and recent research have sought to define best practices and to improve end-to-end workflow composition, one area that has not fully been explored is the scheduling of a workflows web service requests to actual service provisioning in a multi-tiered, multi-organisation environment.",
                "This issue is relevant to modern business scenarios where business processes within a workflow must complete within QoS-defined limits.",
                "Because these business processes are web service consumers, service requests must be mapped and scheduled across multiple web service providers, each with its own negotiated service level agreement.",
                "In this paper we provide heuristics for scheduling service requests from multiple business process workflows to web service providers such that a business value metric across all workflows is maximised.",
                "We show that a genetic search algorithm is appropriate to perform this scheduling, and through experimentation we show that our algorithm scales well up to a thousand workflows and produces better mappings than traditional approaches.",
                "Categories and Subject Descriptors C.2.4 [Computer-Communication Networks]: Distributed Systems-distributed applications; D.2.8 [Software Engineering]: Metrics-complexity measures, performance measures 1.",
                "INTRODUCTION Web services can be composed into workflows to provide streamlined end-to-end functionality for human users or other systems.",
                "Although previous research efforts have looked at ways to intelligently automate the composition of web services into workflows (e.g. [1, 9]), an important remaining problem is the assignment of web service requests to the underlying web service providers in a multi-tiered runtime scenario within constraints.",
                "In this paper we address this scheduling problem and examine means to manage a large number of business process workflows in a scalable manner.",
                "The problem of scheduling web service requests to providers is relevant to modern business domains that depend on multi-tiered service provisioning.",
                "Consider the example shown in Figure 1 that illustrates our problem space.",
                "Workflows comprise multiple related business processes that are web service consumers; here we assume that the workflows represent requested service from customers or automated systems and that the workflow has already been composed with an existing choreography toolkit.",
                "These workflows are then submitted to a portal (not shown) that acts as a scheduling agent between the web service consumers and the web service providers.",
                "In this example, a workflow could represent the actions needed to instantiate a vacation itinerary, where one business process requests booking an airline ticket, another business process requests a hotel room, and so forth.",
                "Each of these requests target a particular service type (e.g. airline reservations, hotel reservations, car reservations, etc. ), and for each service type, there are multiple instances of service providers that publish a web service interface.",
                "An important challenge is that the workflows must meet some quality-of-service (QoS) metric, such as end-to-end completion time of all its business processes, and that meeting or failing this goal results in the assignment of a quantitative business value metric for the workflow; intuitively, it is desired that all workflows meet their respective QoS goals.",
                "We further leverage the notion that QoS service agreements are generally agreed-upon between the web service providers and the scheduling agent such that the providers advertise some level of guaranteed QoS to the scheduler based upon runtime conditions such as turnaround time and maximum available concurrency.",
                "The resulting problem is then to schedule and assign the business processes requests for service types to one of the service providers for that type.",
                "The scheduling must be done such that the aggregate business value across all the workflows is maximised.",
                "In Section 3 we state the scenario as a combinatorial problem and utilise a genetic search algorithm [5] to find the best assignment of web service requests to providers.",
                "This approach converges towards an assignment that maximises the overall business value for all the workflows.",
                "In Section 4 we show through experimentation that this search heuristic finds better assignments than other algorithms (greedy, round-robin, and proportional).",
                "Further, this approach allows us to scale the number of simultaneous workflows (up to one thousand workflows in our experiments) and yet still find effective schedules. 2.",
                "RELATED WORK In the context of service assignment and scheduling, [11] maps web service calls to potential servers using linear programming, but their work is concerned with mapping only single workflows; our principal focus is on scalably scheduling multiple workflows (up 30 Service Type SuperHotels.com Business Process Business Process Workflow ... Business Process Business Process ... HostileHostels.com IncredibleInns.com Business Process Business Process Business Process ... Business Process Service Provider SkyHighAirlines.com SuperCrazyFlights.com Business Process . . . . . .",
                "Advertised QoS Service Agreement CarRentalService.com Figure 1: An example scenario demonstrating the interaction between business processes in workflows and web service providers.",
                "Each business process accesses a service type and is then mapped to a service provider for that type. to one thousand as we show later) using different business metrics and a search heuristic. [10] presents a dynamic provisioning approach that uses both predictive and reactive techniques for multi-tiered Internet application delivery.",
                "However, the provisioning techniques do not consider the challenges faced when there are alternative query execution plans and replicated data sources. [8] presents a feedback-based scheduling mechanism for multi-tiered systems with back-end databases, but unlike our work, it assumes a tighter coupling between the various components of the system.",
                "Our work also builds upon prior scheduling research.",
                "The classic job-shop scheduling problem, shown to be NP-complete [4] [3], is similar to ours in that tasks within a job must be scheduled onto machinery (c.f. our scenario is that business processes within a workflow must be scheduled onto web service providers).",
                "The salient differences are that the machines can process only one job at a time (we assume servers can multi-task but with degraded performance and a maximum concurrency level), tasks within a job cannot simultaneously run on different machines (we assume business processes can be assigned to any available server), and the principal metric of performance is the makespan, which is the time for the last task among all the jobs to complete (and as we show later, optimising on the makespan is insufficient for scheduling the business processes, necessitating different metrics). 3.",
                "DESIGN In this section we describe our model and discuss how we can find scheduling assignments using a genetic search algorithm. 3.1 Model We base our model on the simplified scenario shown in Figure 1.",
                "Specifically, we assume that users or automated systems request the execution of a workflow.",
                "The workflows comprise business processes, each of which makes one web service invocation to a service type.",
                "Further, business processes have an ordering in the workflow.",
                "The arrangement and execution of the business processes and the data flow between them are all managed by a composition or choreography tool (e.g. [1, 9]).",
                "Although composition languages can use sophisticated flow-control mechanisms such as conditional branches, for simplicity we assume the processes execute sequentially in a given order.",
                "This scenario can be naturally extended to more complex relationships that can be expressed in BPEL [7], which defines how business processes interact, messages are exchanged, activities are ordered, and exceptions are handled.",
                "Due to space constraints, we focus on the problem space presented here and will extend our model to more advanced deployment scenarios in the future.",
                "Each workflow has a QoS requirement to complete within a specified number of time units (e.g. on the order of seconds, as detailed in the Experiments section).",
                "Upon completion (or failure), the workflow is assigned a business value.",
                "We extended this approach further and considered different types of workflow completion in order to model differentiated QoS levels that can be applied by businesses (for example, to provide tiered customer service).",
                "We say that a workflow is successful if it completes within its QoS requirement, acceptable if it completes within a constant factor κ 31 of its QoS bound (in our experiments we chose κ=3), or failing if it finishes beyond κ times its QoS bound.",
                "For each category, a business value score is assigned to the workflow, with the successful category assigned the highest positive score, followed by acceptable and then failing.",
                "The business value point distribution is non-uniform across workflows, further modelling cases where some workflows are of higher priority than others.",
                "Each service type is implemented by a number of different service providers.",
                "We assume that the providers make service level agreements (SLAs) to guarantee a level of performance defined by the completion time for completing a web service invocation.",
                "Although SLAs can be complex, in this paper we assume for simplicity that the guarantees can take the form of a linear performance degradation under load.",
                "This guarantee is defined by several parameters: α is the expected completion time (for example, on the order of seconds) if the assigned workload of web service requests is less than or equal to β, the maximum concurrency, and if the workload is higher than β, the expected completion for a workload of size ω is α+ γ(ω − β) where γ is a fractional coefficient.",
                "In our experiments we vary α, β, and γ with different distributions.",
                "Ideally, all workflows would be able to finish within their QoS limits and thus maximise the aggregate business value across all workflows.",
                "However, because we model service providers with degrading performance under load, not all workflows will achieve their QoS limit: it may easily be the case that business processes are assigned to providers who are overloaded and cannot complete within the respective workflows QoS limit.",
                "The key research problem, then, is to assign the business processes to the web service providers with the goal of optimising on the aggregate business value of all workflows.",
                "Given that the scope of the optimisation is the entire set of workflows, it may be that the best scheduling assignments may result in some workflows having to fail in order for more workflows to succeed.",
                "This intuitive observation suggests that traditional scheduling approaches such as round-robin or proportional assignments will not fare well, which is what we observe and discuss in Section 4.",
                "On the other hand, an exhaustive search of all the possible assignments will find the best schedule, but the computational complexity is prohibitively high.",
                "Suppose there are W workflows with an average of B business processes per workflow.",
                "Further, in the worst case each business process requests one service type, for which there are P providers.",
                "There are thus W · PB combinations to explore to find the optimal assignments of business processes to providers.",
                "Even for small configurations (e.g.",
                "W =10, B=5, P=10), the computational time for exhaustive search is significant, and in our work we look to scale these parameters.",
                "In the next subsection, discuss how a genetic search algorithm can be used to converge toward the optimum scheduling assignments. 3.2 Genetic algorithm Given an exponential search space of business process assignments to web service providers, the problem is to find the optimal assignment that produces the overall highest aggregate business value across all workflows.",
                "To explore the solution space, we use a genetic algorithm (GA) search heuristic that simulates Darwinian natural selection by having members of a population compete to survive in order to pass their genetic chromosomes onto the next generation; after successive generations, there is a tendency for the chromosomes to converge toward the best combination [5] [6].",
                "Although other search heuristics exist that can solve optimization problems (e.g. simulated annealing or steepest-ascent hillclimbing), the business process scheduling problem fits well with a GA because potential solutions can be represented in a matrix form and allows us to use prior research in effective GA chromosome recombination to form new members of the population (e.g. [2]). 0 1 2 3 4 0 1 2 0 2 1 1 0 1 0 1 0 2 1 2 0 0 1 Figure 2: An example chromosome representing a scheduling assignment of (workflow,service type) → service provider.",
                "Each row represents a workflow, and each column represents a service type.",
                "For example, here there are 3 workflows (0 to 2) and 5 service types (0 to 4).",
                "In workflow 0, any request for service type 3 goes to provider 2.",
                "Note that the service provider identifier is within a range limited to its service type (i.e. its column), so the 2 listed for service type 3 is a different server from server 2 in other columns.",
                "Chromosome representation of a solution.",
                "In Figure 2 we show an example chromosome that encodes one scheduling assignment.",
                "The representation is a 2-dimensional matrix that maps {workflow, service type} to a service provider.",
                "For a business process in workflow i and utilising service type j, the (i, j)th entry in the table is the identifier for the service provider to which the business process is assigned.",
                "Note that the service provider identifier is within a range limited to its service type.",
                "GA execution.",
                "A GA proceeds as follows.",
                "Initially a random set of chromosomes is created for the population.",
                "The chromosomes are evaluated (hashed) to some metric, and the best ones are chosen to be parents.",
                "In our problem, the evaluation produces the net business value across all workflows after executing all business processes once they are assigned to their respective service providers according to the mapping in the chromosome.",
                "The parents recombine to produce children, simulating sexual crossover, and occasionally a mutation may arise which produces new characteristics that were not available in either parent.",
                "The principal idea is that we would like the children to be different from the parents (in order to explore more of the solution space) yet not too different (in order to contain the portions of the chromosome that result in good scheduling assignments).",
                "Note that finding the global optimum is not guaranteed because the recombination and mutation are stochastic.",
                "GA recombination and mutation.",
                "As mentioned, the chromosomes are 2-dimensional matrices that represent scheduling assignments.",
                "To simulate sexual recombination of two chromosomes to produce a new child chromosome, we applied a one-point crossover scheme twice (once along each dimension).",
                "The crossover is best explained by analogy to Cartesian space as follows.",
                "A random point is chosen in the matrix to be coordinate (0, 0).",
                "Matrix elements from quadrants II and IV from the first parent and elements from quadrants I and III from the second parent are used to create the new child.",
                "This approach follows GA best practices by keeping contiguous chromosome segments together as they are transmitted from parent to child.",
                "The uni-chromosome mutation scheme randomly changes one of the service provider assignments to another provider within the available range.",
                "Other recombination and mutation schemes are an area of research in the GA community, and we look to explore new operators in future work.",
                "GA evaluation function.",
                "An important GA component is the evaluation function.",
                "Given a particular chromosome representing one scheduling mapping, the function deterministically calculates the net business value across all workloads.",
                "The business processes in each workload are assigned to service providers, and each providers completion time is calculated based on the service agreement guarantee using the parameters mentioned in Section 3.1, namely the unloaded completion time α, the maximum concur32 rency β, and a coefficient γ that controls the linear performance degradation under heavy load.",
                "Note that the evaluation function can be easily replaced if desired; for example, other evaluation functions can model different service provider guarantees or parallel workflows. 4.",
                "EXPERIMENTS AND RESULTS In this section we show the benefit of using our GA-based scheduler.",
                "Because we wanted to scale the scenarios up to a large number of workflows (up to 1000 in our experiments), we implemented a simulation program that allowed us to vary parameters and to measure the results with different metrics.",
                "The simulator was written in standard C++ and was run on a Linux (Fedora Core) desktop computer running at 2.8 GHz with 1GB of RAM.",
                "We compared our algorithm against alternative candidates: • A well-known round-robin algorithm that assigns each business process in circular fashion to the service providers for a particular service type.",
                "This approach provides the simplest scheme for load-balancing. • A random-proportional algorithm that proportionally assigns business processes to the service providers; that is, for a given service type, the service providers are ranked by their guaranteed completion time, and business processes are assigned proportionally to the providers based on their completion time. (We also tried a proportionality scheme based on both the completion times and maximum concurrency but attained the same results, so only the former schemes results are shown here.) • A strawman greedy algorithm that always assigns business processes to the service provider that has the fastest guaranteed completion time.",
                "This algorithm represents a naive approach based on greedy, local observations of each workflow without taking into consideration all workflows.",
                "In the experiments that follow, all results were averaged across 20 trials, and to help normalise the effects of randomisation used during the GA, each trial started by reading in pre-initialised data from disk.",
                "In Table 1 we list our experimental parameters.",
                "In Figure 3 we show the results of running our GA against the three candidate alternatives.",
                "The x-axis shows the number for workflows scaled up to 1000, and the y-axis shows the aggregate business value for all workflows.",
                "As can be seen, the GA consistently produces the highest business value even as the number of workflows grows; at 1000 workflows, the GA produces a 115% improvement over the next-best alternative. (Note that although we are optimising against the business value metric we defined earlier, genetic algorithms are able to converge towards the optimal value of any metric, as long as the evaluation function can consistently measure a chromosomes value with that metric.)",
                "As expected, the greedy algorithm performs very poorly because it does the worst job at balancing load: all business processes for a given service type are assigned to only one server (the one advertised to have the fastest completion time), and as more business processes arrive, the providers performance degrades linearly.",
                "The round-robin scheme is initially outperformed by the randomproportional scheme up to around 120 workflows (as shown in the magnified graph of Figure 4), but as the number of workflows increases, the round-robin scheme consistently wins over randomproportional.",
                "The reason is that although the random-proportional scheme assigns business processes to providers proportionally according to the advertised completion times (which is a measure of the power of the service provider), even the best providers will eventually reach a real-world maximum concurrency for the large -2000 -1000 0 1000 2000 3000 4000 5000 6000 7000 0 200 400 600 800 1000 Aggregatebusinessvalueacrossallworkflows Total number of workflows Business value scores of scheduling algorithms Genetic algorithm Round robin Random proportional Greedy Figure 3: Net business value scores of different scheduling algorithms. -500 0 500 1000 1500 2000 2500 3000 3500 4000 0 50 100 150 200Aggregatebusinessvalueacrossallworkflows Total number of workflows Business value scores of scheduling algorithms Genetic algorithm Round robin Random proportional Greedy Figure 4: Magnification of the left-most region in Figure 3. number of workflows that we are considering.",
                "For a very large number of workflows, the round-robin scheme is able to better balance the load across all service providers.",
                "To better understand the behaviour resulting from the scheduling assignments, we show the workflow completion results in Figures 5, 6, and 7 for 100, 500, and 900 workflows, respectively.",
                "These figures show the percentage of workflows that are successful (can complete with their QoS limit), acceptable (can complete within κ=3 times their QoS limit), and failed (cannot complete within κ=3 times their QoS limit).",
                "The GA consistently produces the highest percentage of successful workflows (resulting in higher business values for the aggregate set of workflows).",
                "Further, the round-robin scheme produces better results than the random-proportional for a large number of workflows but does not perform as well as the GA.",
                "In Figure 8 we graph the makespan resulting from the same experiments above.",
                "Makespan is a traditional metric from the job scheduling community measuring elapsed time for the last job to complete.",
                "While useful, it does not capture the high-level business value metric that we are optimising against.",
                "Indeed, the makespan is oblivious to the fact that we provide multiple levels of completion (successful, acceptable, and failed) and assign business value scores accordingly.",
                "For completeness, we note that the GA provides the fastest makespan, but it is matched by the round robin algorithm.",
                "The GA produces better business values (as shown in Figure 3) because it is able to search the solution space to find better mappings that produce more successful workflows (as shown in Figures 5 to 7).",
                "We also looked at the effect of the scheduling algorithms on balancing the load.",
                "Figure 9 shows the percentage of services providers that were accessed while the workflows ran.",
                "As expected, the greedy algorithm always hits one service provider; on the other hand, the round-robin algorithm is the fastest to spread the business 33 Experimental parameter Comment Workflows 5 to 1000 Business processes per workflow uniform random: 1 - 10 Service types 10 Service providers per service type uniform random: 1 - 10 Workflow QoS goal uniform random: 10-30 seconds Service provider completion time (α) uniform random: 1 - 12 seconds Service provider maximum concurrency (β) uniform random: 1 - 12 Service provider degradation coefficient (γ) uniform random: 0.1 - 0.9 Business value for successful workflows uniform random: 10 - 50 points Business value for acceptable workflows uniform random: 0 - 10 points Business value for failed workflows uniform random: -10 - 0 points GA: number of parents 20 GA: number of children 80 GA: number of generations 1000 Table 1: Experimental parameters Failed Acceptable (completed but not within QoS) Successful (completed within QoS) 0% 20% 40% 60% 80% 100% RoundRobinRandProportionalGreedyGeneticAlg Percentageofallworkflows Workflow behaviour, 100 workflows Figure 5: Workflow behaviour for 100 workflows.",
                "Failed Acceptable (completed but not within QoS) Successful (completed within QoS) 0% 20% 40% 60% 80% 100% RoundRobinRandProportionalGreedyGeneticAlg Percentageofallworkflows Workflow behaviour, 500 workflows Figure 6: Workflow behaviour for 500 workflows.",
                "Failed Acceptable (completed but not within QoS) Successful (completed within QoS) 0% 20% 40% 60% 80% 100% RoundRobinRandProportionalGreedyGeneticAlg Percentageofallworkflows Workflow behaviour, 500 workflows Figure 7: Workflow behaviour for 900 workflows. 0 50 100 150 200 250 300 0 200 400 600 800 1000 Makespan[seconds] Number of workflows Maximum completion time for all workflows Genetic algorithm Round robin Random proportional Greedy Figure 8: Maximum completion time for all workflows.",
                "This value is the makespan metric used in traditional scheduling research.",
                "Although useful, the makespan does not take into consideration the business value scoring in our problem domain. processes.",
                "Figure 10 is the percentage of accessed service providers (that is, the percentage of service providers represented in Figure 9) that had more assigned business processes than their advertised maximum concurrency.",
                "For example, in the greedy algorithm only one service provider is utilised, and this one provider quickly becomes saturated.",
                "On the other hand, the random-proportional algorithm uses many service providers, but because business processes are proportionally assigned with more assignments going to the better providers, there is a tendency for a smaller percentage of providers to become saturated.",
                "For completeness, we show the performance of the genetic algorithm itself in Figure 11.",
                "The algorithm scales linearly with an increasing number of workflows.",
                "We note that the round-robin, random-proportional, and greedy algorithms all finished within 1 second even for the largest workflow configuration.",
                "However, we feel that the benefit of finding much higher business value scores justifies the running time of the GA; further we would expect that the running time will improve with both software tuning as well as with a computer faster than our off-the-shelf PC. 5.",
                "CONCLUSION Business processes within workflows can be orchestrated to access web services.",
                "In this paper we looked at multi-tiered service provisioning where web service requests to service types can be mapped to different service providers.",
                "The resulting problem is that in order to support a very large number of workflows, the assignment of business process to web service provider must be intelligent.",
                "We used a business value metric to measure the be34 0 0.2 0.4 0.6 0.8 1 0 200 400 600 800 1000 Percentageofallserviceproviders Number of workflows Service providers utilised Genetic algorithm Round robin Random proportional Greedy Figure 9: The percentage of service providers utilized during workload executions.",
                "The Greedy algorithm always hits the one service provider, while the Round Robin algorithm spreads requests evenly across the providers. 0 0.2 0.4 0.6 0.8 1 0 200 400 600 800 1000 Percentageofallserviceproviders Number of workflows Service providers saturated Genetic algorithm Round robin Random proportional Greedy Figure 10: The percentage of service providers that are saturated among those providers who were utilized (that is, percentage of the service providers represented in Figure 9).",
                "A saturated service provider is one whose workload is greater that its advertised maximum concurrency. 0 5 10 15 20 25 0 200 400 600 800 1000 Runningtimeinseconds Total number of workflows Running time of genetic algorithm GA running time Figure 11: Running time of the genetic algorithm. haviour of workflows meeting or failing QoS values, and we optimised our scheduling to maximise the aggregate business value across all workflows.",
                "Since the solution space of scheduler mappings is exponential, we used a genetic search algorithm to search the space and converge toward the best schedule.",
                "With a default configuration for all parameters and using our business value scoring, the GA produced up to 115% business value improvement over the next best algorithm.",
                "Finally, because a genetic algorithm will converge towards the optimal value using any metric (even other than the business value metric we used), we believe our approach has strong potential for continuing work.",
                "In future work, we look to acquire real-world traces of web service instances in order to get better estimates of service agreement guarantees, although we expect that such guarantees between the providers and their consumers are not generally available to the public.",
                "We will also look at other QoS metrics such as CPU and I/O usage.",
                "For example, we can analyse transfer costs with varying bandwidth, latency, data size, and data distribution.",
                "Further, we hope to improve our genetic algorithm and compare it to more scheduler alternatives.",
                "Finally, since our work is complementary to existing work in web services choreography (because we rely on pre-configured workflows), we look to integrate our approach with available web service workflow systems expressed in BPEL. 6.",
                "REFERENCES [1] A. Ankolekar, et al.",
                "DAML-S: Semantic Markup For Web Services, In Proc. of the Intl Semantic Web Working Symposium, 2001. [2] L. Davis.",
                "Job Shop Scheduling with Genetic Algorithms, In Proc. of the Intl Conference on Genetic Algorithms, 1985. [3] H.-L. Fang, P. Ross, and D. Corne.",
                "A Promising Genetic Algorithm Approach to Job-Shop Scheduling, Rescheduling, and Open-Shop Scheduling Problems , In Proc. on the 5th Intl Conference on Genetic Algorithms, 1993. [4] M. Gary and D. Johnson.",
                "Computers and Intractability: A Guide to the Theory of NP-Completeness, Freeman, 1979. [5] J. Holland.",
                "Adaptation in Natural and Artificial Systems: An Introductory Analysis with Applications to Biology, Control, and Artificial Intelligence, MIT Press, 1992. [6] D. Goldberg.",
                "Genetic Algorithms in Search, Optimization and Machine Learning, Kluwer Academic Publishers, 1989. [7] Business Processes in a Web Services World, www-128.ibm.com/developerworks/ webservices/library/ws-bpelwp/. [8] G. Soundararajan, K. Manassiev, J. Chen, A. Goel, and C. Amza.",
                "Back-end Databases in Shared Dynamic Content Server Clusters, In Proc. of the IEEE Intl Conference on Autonomic Computing, 2005. [9] B. Srivastava and J. Koehler.",
                "Web Service Composition Current Solutions and Open Problems, ICAP, 2003. [10] B. Urgaonkar, P. Shenoy, A. Chandra, and P. Goyal.",
                "Dynamic Provisioning of Multi-Tier Internet Applications, In Proc. of the IEEE Intl Conference on Autonomic Computing, 2005. [11] L. Zeng, B. Benatallah, M. Dumas, J. Kalagnanam, and Q. Sheng.",
                "Quality Driven Web Services Composition, In Proc. of the WWW Conference, 2003. 35"
            ],
            "original_annotated_samples": [
                "San Jose, CA 95120 {phantom,wsl}@us.ibm.com ABSTRACT Web services can be aggregated to create composite workflows that provide <br>streamlined functionality</br> for human users or other systems."
            ],
            "translated_annotated_samples": [
                "Los servicios web pueden ser agregados para crear flujos de trabajo compuestos que proporcionen <br>funcionalidad simplificada</br> para usuarios humanos u otros sistemas."
            ],
            "translated_text": "Programación basada en heurísticas de cargas de trabajo de servicios web compuestos Thomas Phan Wen-Syan Li Centro de Investigación IBM Almaden 650 Harry Rd. Los servicios web pueden ser agregados para crear flujos de trabajo compuestos que proporcionen <br>funcionalidad simplificada</br> para usuarios humanos u otros sistemas. Aunque los estándares de la industria y la investigación reciente han buscado definir las mejores prácticas y mejorar la composición del flujo de trabajo de extremo a extremo, un área que no ha sido completamente explorada es la programación de las solicitudes de servicios web de los flujos de trabajo para la provisión real de servicios en un entorno multinivel y multiorganizacional. Este problema es relevante para los escenarios empresariales modernos donde los procesos comerciales dentro de un flujo de trabajo deben completarse dentro de los límites definidos por la calidad de servicio (QoS). Debido a que estos procesos comerciales son consumidores de servicios web, las solicitudes de servicio deben ser mapeadas y programadas entre múltiples proveedores de servicios web, cada uno con su propio acuerdo de nivel de servicio negociado. En este documento proporcionamos heurísticas para programar solicitudes de servicio de múltiples flujos de trabajo de procesos comerciales a proveedores de servicios web de manera que se maximice una métrica de valor comercial en todos los flujos de trabajo. Mostramos que un algoritmo de búsqueda genética es apropiado para realizar esta programación, y a través de experimentación demostramos que nuestro algoritmo escala bien hasta mil flujos de trabajo y produce mejores asignaciones que enfoques tradicionales. Categorías y Descriptores de Asignaturas C.2.4 [Redes de Computadoras-Comunicación]: Sistemas Distribuidos-aplicaciones distribuidas; D.2.8 [Ingeniería de Software]: Métricas-medidas de complejidad, medidas de rendimiento 1. INTRODUCCIÓN Los servicios web pueden ser compuestos en flujos de trabajo para proporcionar funcionalidad integrada de principio a fin para usuarios humanos u otros sistemas. Aunque los esfuerzos de investigación previos han examinado formas de automatizar de manera inteligente la composición de servicios web en flujos de trabajo (por ejemplo, [1, 9]), un problema importante que aún persiste es la asignación de solicitudes de servicios web a los proveedores de servicios web subyacentes en un escenario de tiempo de ejecución multinivel dentro de ciertas restricciones. En este documento abordamos este problema de programación y examinamos medios para gestionar un gran número de flujos de trabajo de procesos comerciales de manera escalable. El problema de programar solicitudes de servicios web a proveedores es relevante para los dominios comerciales modernos que dependen de la provisión de servicios de múltiples niveles. Considera el ejemplo mostrado en la Figura 1 que ilustra nuestro espacio de problemas. Los flujos de trabajo comprenden múltiples procesos comerciales relacionados que son consumidores de servicios web; aquí asumimos que los flujos de trabajo representan servicios solicitados por clientes o sistemas automatizados y que el flujo de trabajo ya ha sido compuesto con una herramienta de coreografía existente. Estos flujos de trabajo son luego enviados a un portal (no mostrado) que actúa como un agente de programación entre los consumidores del servicio web y los proveedores del servicio web. En este ejemplo, un flujo de trabajo podría representar las acciones necesarias para crear un itinerario de vacaciones, donde un proceso empresarial solicita la reserva de un boleto de avión, otro proceso empresarial solicita una habitación de hotel, y así sucesivamente. Cada una de estas solicitudes apunta a un tipo de servicio en particular (por ejemplo, reservas de aerolíneas, reservas de hoteles, reservas de autos, etc.), y para cada tipo de servicio, hay múltiples instancias de proveedores de servicios que publican una interfaz de servicio web. Un desafío importante es que los flujos de trabajo deben cumplir con alguna métrica de calidad de servicio (QoS), como el tiempo de finalización de extremo a extremo de todos sus procesos comerciales, y que cumplir o no con este objetivo resulta en la asignación de una métrica de valor comercial cuantitativo para el flujo de trabajo; intuitivamente, se desea que todos los flujos de trabajo cumplan con sus respectivos objetivos de QoS. Además, aprovechamos la idea de que los acuerdos de servicio de QoS suelen ser acordados entre los proveedores de servicios web y el agente de programación de tal manera que los proveedores anuncian un cierto nivel de QoS garantizado al programador en función de condiciones de tiempo de respuesta y concurrencia máxima disponible. El problema resultante es entonces programar y asignar las solicitudes de procesos comerciales para tipos de servicio a uno de los proveedores de servicios para ese tipo. La programación debe realizarse de tal manera que se maximice el valor comercial agregado en todos los flujos de trabajo. En la Sección 3 planteamos el escenario como un problema combinatorio y utilizamos un algoritmo de búsqueda genética [5] para encontrar la mejor asignación de solicitudes de servicios web a proveedores. Este enfoque converge hacia una asignación que maximiza el valor comercial general para todos los flujos de trabajo. En la Sección 4 mostramos a través de experimentación que esta heurística de búsqueda encuentra asignaciones mejores que otros algoritmos (codicioso, round-robin y proporcional). Además, este enfoque nos permite escalar el número de flujos de trabajo simultáneos (hasta mil flujos de trabajo en nuestros experimentos) y aún así encontrar horarios efectivos. 2. TRABAJO RELACIONADO En el contexto de asignación y programación de servicios, [11] mapea llamadas de servicios web a servidores potenciales utilizando programación lineal, pero su trabajo se centra en mapear solo flujos de trabajo individuales; nuestro enfoque principal está en programar de manera escalable múltiples flujos de trabajo (hasta 30 tipos de servicios SuperHotels.com Proceso de Negocio Proceso de Negocio Flujo de Trabajo ... Proceso de Negocio Proceso de Negocio ... HostileHostels.com IncredibleInns.com Proceso de Negocio Proceso de Negocio Proceso de Negocio ... Proceso de Negocio Proveedor de Servicios SkyHighAirlines.com SuperCrazyFlights.com Proceso de Negocio . . . . . . Acuerdo de Servicio de Calidad de Servicio (QoS) Publicitado CarRentalService.com Figura 1: Un escenario de ejemplo que muestra la interacción entre procesos comerciales en flujos de trabajo y proveedores de servicios web. Cada proceso empresarial accede a un tipo de servicio y luego se asigna a un proveedor de servicios para ese tipo, a uno mil como mostraremos más adelante, utilizando diferentes métricas empresariales y una heurística de búsqueda. [10] presenta un enfoque de aprovisionamiento dinámico que utiliza técnicas predictivas y reactivas para la entrega de aplicaciones de Internet multinivel. Sin embargo, las técnicas de aprovisionamiento no consideran los desafíos enfrentados cuando hay planes alternativos de ejecución de consultas y fuentes de datos replicadas. [8] presenta un mecanismo de programación basado en retroalimentación para sistemas multinivel con bases de datos de back-end, pero a diferencia de nuestro trabajo, asume un acoplamiento más estrecho entre los diversos componentes del sistema. Nuestro trabajo también se basa en investigaciones previas sobre programación. El problema clásico de programación de talleres, demostrado como NP-completo [4] [3], es similar al nuestro en el sentido de que las tareas dentro de un trabajo deben ser programadas en maquinaria (cf. nuestro escenario es que los procesos comerciales dentro de un flujo de trabajo deben ser programados en proveedores de servicios web). Las diferencias más destacadas son que las máquinas solo pueden procesar un trabajo a la vez (asumimos que los servidores pueden realizar múltiples tareas pero con un rendimiento degradado y un nivel máximo de concurrencia), las tareas dentro de un trabajo no pueden ejecutarse simultáneamente en diferentes máquinas (asumimos que los procesos comerciales pueden asignarse a cualquier servidor disponible), y la métrica principal de rendimiento es el makespan, que es el tiempo que tarda la última tarea de todos los trabajos en completarse (y como mostraremos más adelante, optimizar el makespan no es suficiente para programar los procesos comerciales, lo que requiere diferentes métricas). 3. En esta sección describimos nuestro modelo y discutimos cómo podemos encontrar asignaciones de programación utilizando un algoritmo de búsqueda genética. 3.1 Modelo Basamos nuestro modelo en el escenario simplificado mostrado en la Figura 1. Específicamente, asumimos que los usuarios o sistemas automatizados solicitan la ejecución de un flujo de trabajo. Los flujos de trabajo comprenden procesos comerciales, cada uno de los cuales realiza una invocación de servicio web a un tipo de servicio. Además, los procesos comerciales tienen un orden en el flujo de trabajo. La disposición y ejecución de los procesos comerciales y el flujo de datos entre ellos son gestionados por una herramienta de composición o coreografía (por ejemplo, [1, 9]). Aunque los lenguajes de composición pueden utilizar mecanismos sofisticados de control de flujo como ramas condicionales, para simplificar asumimos que los procesos se ejecutan secuencialmente en un orden dado. Este escenario puede ser extendido de forma natural a relaciones más complejas que pueden ser expresadas en BPEL [7], el cual define cómo interactúan los procesos de negocio, se intercambian mensajes, se ordenan actividades y se manejan excepciones. Debido a limitaciones de espacio, nos enfocamos en el espacio de problemas presentado aquí y extenderemos nuestro modelo a escenarios de implementación más avanzados en el futuro. Cada flujo de trabajo tiene un requisito de calidad de servicio (QoS) que debe completarse dentro de un número específico de unidades de tiempo (por ejemplo, del orden de segundos, como se detalla en la sección de Experimentos). Una vez completado (o fallido), se asigna un valor comercial al flujo de trabajo. Extendimos este enfoque aún más y consideramos diferentes tipos de finalización de flujo de trabajo para modelar niveles diferenciados de QoS que pueden ser aplicados por las empresas (por ejemplo, para proporcionar servicios al cliente escalonados). Decimos que un flujo de trabajo es exitoso si se completa dentro de su requisito de QoS, aceptable si se completa dentro de un factor constante κ 31 de su límite de QoS (en nuestros experimentos elegimos κ=3), o fallido si termina más allá de κ veces su límite de QoS. Para cada categoría, se asigna un puntaje de valor comercial al flujo de trabajo, siendo la categoría exitosa la que recibe la puntuación positiva más alta, seguida por la aceptable y luego la fallida. La distribución de puntos de valor empresarial no es uniforme en los flujos de trabajo, lo que modela casos en los que algunos flujos de trabajo tienen mayor prioridad que otros. Cada tipo de servicio es implementado por varios proveedores de servicios diferentes. Suponemos que los proveedores hacen acuerdos de nivel de servicio (SLAs) para garantizar un nivel de rendimiento definido por el tiempo de finalización de una invocación de servicio web. Aunque los Acuerdos de Nivel de Servicio (SLAs) pueden ser complejos, en este documento asumimos, para simplificar, que las garantías pueden adoptar la forma de una degradación lineal del rendimiento bajo carga. Esta garantía está definida por varios parámetros: α es el tiempo de finalización esperado (por ejemplo, del orden de segundos) si la carga de trabajo asignada de las solicitudes de servicio web es menor o igual a β, la concurrencia máxima, y si la carga de trabajo es mayor que β, la finalización esperada para una carga de trabajo de tamaño ω es α + γ(ω − β) donde γ es un coeficiente fraccional. En nuestros experimentos variamos α, β y γ con diferentes distribuciones. Idealmente, todos los flujos de trabajo podrían finalizar dentro de sus límites de calidad de servicio (QoS) y, por lo tanto, maximizar el valor empresarial agregado en todos los flujos de trabajo. Sin embargo, debido a que modelamos a los proveedores de servicios con un rendimiento degradante bajo carga, no todos los flujos de trabajo alcanzarán su límite de calidad de servicio (QoS): fácilmente puede darse el caso de que los procesos comerciales sean asignados a proveedores que están sobrecargados y no pueden completarse dentro del límite de calidad de servicio respectivo de los flujos de trabajo. El problema clave de investigación, entonces, es asignar los procesos comerciales a los proveedores de servicios web con el objetivo de optimizar el valor comercial agregado de todos los flujos de trabajo. Dado que el alcance de la optimización es el conjunto completo de flujos de trabajo, puede ser que las mejores asignaciones de programación resulten en que algunos flujos de trabajo tengan que fallar para que otros tengan éxito. Esta observación intuitiva sugiere que enfoques de programación tradicionales como el round-robin o asignaciones proporcionales no funcionarán bien, lo cual es lo que observamos y discutimos en la Sección 4. Por otro lado, una búsqueda exhaustiva de todas las posibles asignaciones encontrará el mejor horario, pero la complejidad computacional es prohibitivamente alta. Supongamos que hay W flujos de trabajo con un promedio de B procesos de negocio por flujo de trabajo. Además, en el peor de los casos, cada proceso empresarial solicita un tipo de servicio, para el cual hay P proveedores. Por lo tanto, hay W · PB combinaciones para explorar y encontrar las asignaciones óptimas de procesos comerciales a proveedores. Incluso para configuraciones pequeñas (por ejemplo, Dado que (W=10, B=5, P=10), el tiempo computacional para la búsqueda exhaustiva es significativo, y en nuestro trabajo buscamos ajustar estos parámetros. En la siguiente subsección, discuta cómo se puede utilizar un algoritmo de búsqueda genética para converger hacia las asignaciones de programación óptimas. 3.2 Algoritmo genético Dado un espacio de búsqueda exponencial de asignaciones de procesos comerciales a proveedores de servicios web, el problema es encontrar la asignación óptima que produzca el valor comercial agregado más alto en general en todos los flujos de trabajo. Para explorar el espacio de soluciones, utilizamos un algoritmo genético (GA) que simula la selección natural darwiniana al hacer que los miembros de una población compitan por sobrevivir para transmitir sus cromosomas genéticos a la siguiente generación; después de generaciones sucesivas, hay una tendencia a que los cromosomas converjan hacia la mejor combinación. Aunque existen otras heurísticas de búsqueda que pueden resolver problemas de optimización (por ejemplo, recocido simulado o escalada de colina más empinada), el problema de programación de procesos empresariales se adapta bien a un AG porque las soluciones potenciales pueden representarse en forma de matriz y nos permite utilizar investigaciones previas en la recombinación efectiva de cromosomas de AG para formar nuevos miembros de la población (por ejemplo, [2]). 0 1 2 3 4 0 1 2 0 2 1 1 0 1 0 1 0 2 1 2 0 0 1 Figura 2: Un ejemplo de cromosoma que representa una asignación de programación de (flujo de trabajo, tipo de servicio) → proveedor de servicios. Cada fila representa un flujo de trabajo, y cada columna representa un tipo de servicio. Por ejemplo, aquí hay 3 flujos de trabajo (0 a 2) y 5 tipos de servicio (0 a 4). En el flujo de trabajo 0, cualquier solicitud de tipo de servicio 3 se dirige al proveedor 2. Ten en cuenta que el identificador del proveedor de servicios se encuentra dentro de un rango limitado a su tipo de servicio (es decir, su columna), por lo que el 2 listado para el tipo de servicio 3 es un servidor diferente al servidor 2 en otras columnas. Representación cromosómica de una solución. En la Figura 2 mostramos un ejemplo de cromosoma que codifica una asignación de programación. La representación es una matriz bidimensional que mapea {flujo de trabajo, tipo de servicio} a un proveedor de servicios. Para un proceso de negocio en el flujo de trabajo i y utilizando el tipo de servicio j, la entrada (i, j)-ésima en la tabla es el identificador del proveedor de servicios al que se asigna el proceso de negocio. Ten en cuenta que el identificador del proveedor de servicios se encuentra dentro de un rango limitado a su tipo de servicio. Ejecución de GA. Un algoritmo genético procede de la siguiente manera. Inicialmente se crea un conjunto aleatorio de cromosomas para la población. Los cromosomas son evaluados (hasheados) según alguna métrica, y los mejores son elegidos para ser padres. En nuestro problema, la evaluación produce el valor neto del negocio en todos los flujos de trabajo después de ejecutar todos los procesos comerciales una vez que se asignan a sus respectivos proveedores de servicios de acuerdo con el mapeo en el cromosoma. Los padres se recombinan para producir hijos, simulando un cruce sexual, y ocasionalmente puede surgir una mutación que produce nuevas características que no estaban disponibles en ninguno de los padres. La idea principal es que nos gustaría que los niños fueran diferentes de los padres (para explorar más del espacio de soluciones) pero no demasiado diferentes (para contener las porciones del cromosoma que resultan en asignaciones de programación exitosas). Ten en cuenta que encontrar el óptimo global no está garantizado debido a que la recombinación y la mutación son estocásticas. Recombinación y mutación de ADN. Como se mencionó, los cromosomas son matrices bidimensionales que representan asignaciones de horarios. Para simular la recombinación sexual de dos cromosomas para producir un nuevo cromosoma hijo, aplicamos un esquema de cruce de un punto dos veces (una vez a lo largo de cada dimensión). El cruce se explica mejor por analogía al espacio cartesiano de la siguiente manera. Se elige un punto al azar en la matriz para que sea la coordenada (0, 0). Los elementos de la matriz de los cuadrantes II y IV del primer progenitor y los elementos de los cuadrantes I y III del segundo progenitor se utilizan para crear el nuevo hijo. Este enfoque sigue las mejores prácticas de los algoritmos genéticos al mantener juntos los segmentos cromosómicos contiguos a medida que se transmiten de padre a hijo. El esquema de mutación de uni-cromosoma cambia aleatoriamente una de las asignaciones de proveedor de servicios a otro proveedor dentro del rango disponible. Otros esquemas de recombinación y mutación son un área de investigación en la comunidad de AG, y buscamos explorar nuevos operadores en trabajos futuros. Función de evaluación de GA. Un componente importante de los algoritmos genéticos es la función de evaluación. Dada una cromosoma particular que representa un mapeo de programación, la función calcula de manera determinista el valor neto del negocio en todas las cargas de trabajo. Los procesos comerciales en cada carga de trabajo se asignan a proveedores de servicios, y el tiempo de finalización de cada proveedor se calcula en función de la garantía del acuerdo de servicio utilizando los parámetros mencionados en la Sección 3.1, a saber, el tiempo de finalización sin carga α, la máxima concurrencia β y un coeficiente γ que controla la degradación del rendimiento lineal bajo carga pesada. Ten en cuenta que la función de evaluación puede ser fácilmente reemplazada si se desea; por ejemplo, otras funciones de evaluación pueden modelar diferentes garantías de proveedores de servicios o flujos de trabajo paralelos. 4. EXPERIMENTOS Y RESULTADOS En esta sección mostramos el beneficio de utilizar nuestro planificador basado en algoritmos genéticos. Debido a que queríamos escalar los escenarios a un gran número de flujos de trabajo (hasta 1000 en nuestros experimentos), implementamos un programa de simulación que nos permitió variar parámetros y medir los resultados con diferentes métricas. El simulador fue escrito en C++ estándar y se ejecutó en un ordenador de escritorio Linux (Fedora Core) con una velocidad de 2.8 GHz y 1GB de RAM. Comparamos nuestro algoritmo con candidatos alternativos: • Un algoritmo de round-robin bien conocido que asigna cada proceso comercial de forma circular a los proveedores de servicios para un tipo de servicio en particular. Este enfoque proporciona el esquema más simple para el equilibrio de carga. • Un algoritmo aleatorio-proporcional que asigna proporcionalmente los procesos comerciales a los proveedores de servicios; es decir, para un tipo de servicio dado, los proveedores de servicios se clasifican según su tiempo de finalización garantizado, y los procesos comerciales se asignan proporcionalmente a los proveedores en función de su tiempo de finalización. (También probamos un esquema de proporcionalidad basado tanto en los tiempos de finalización como en la concurrencia máxima, pero obtuvimos los mismos resultados, por lo que solo se muestran los resultados de los esquemas anteriores aquí.) • Un algoritmo codicioso de hombre de paja que siempre asigna los procesos comerciales al proveedor de servicios que tiene el tiempo de finalización garantizado más rápido. Este algoritmo representa un enfoque ingenuo basado en observaciones avaras y locales de cada flujo de trabajo sin tener en cuenta todos los flujos de trabajo. En los experimentos que siguen, todos los resultados fueron promediados a lo largo de 20 pruebas, y para ayudar a normalizar los efectos de la aleatorización utilizada durante el AG, cada prueba comenzó leyendo datos preinicializados desde el disco. En la Tabla 1 enumeramos nuestros parámetros experimentales. En la Figura 3 mostramos los resultados de ejecutar nuestro AG contra las tres alternativas candidatas. El eje x muestra el número de flujos de trabajo escalado a 1000, y el eje y muestra el valor comercial agregado de todos los flujos de trabajo. Como se puede ver, el algoritmo genético produce consistentemente el mayor valor comercial incluso a medida que aumenta el número de flujos de trabajo; con 1000 flujos de trabajo, el algoritmo genético produce una mejora del 115% sobre la siguiente mejor alternativa. (Tenga en cuenta que aunque estamos optimizando en función de la métrica de valor comercial que definimos anteriormente, los algoritmos genéticos pueden converger hacia el valor óptimo de cualquier métrica, siempre y cuando la función de evaluación pueda medir de manera consistente el valor de un cromosoma con esa métrica). Como era de esperar, el algoritmo codicioso tiene un rendimiento muy pobre porque hace el peor trabajo en equilibrar la carga: todos los procesos comerciales de un tipo de servicio dado se asignan a un solo servidor (el que se anuncia como el que tiene el tiempo de finalización más rápido), y a medida que llegan más procesos comerciales, el rendimiento de los proveedores se degrada linealmente. El esquema de round-robin es inicialmente superado por el esquema proporcional aleatorio hasta alrededor de 120 flujos de trabajo (como se muestra en el gráfico ampliado de la Figura 4), pero a medida que aumenta el número de flujos de trabajo, el esquema de round-robin gana consistentemente sobre el proporcional aleatorio. La razón es que aunque el esquema aleatorio-proporcional asigna procesos comerciales a proveedores proporcionalmente según los tiempos de finalización anunciados (que es una medida del poder del proveedor de servicios), incluso los mejores proveedores eventualmente alcanzarán una concurrencia máxima del mundo real para la gran cantidad de flujos de trabajo que estamos considerando. Para un número muy grande de flujos de trabajo, el esquema de round-robin es capaz de equilibrar mejor la carga entre todos los proveedores de servicios. Para comprender mejor el comportamiento resultante de las asignaciones de programación, mostramos los resultados de finalización del flujo de trabajo en las Figuras 5, 6 y 7 para 100, 500 y 900 flujos de trabajo, respectivamente. Estas cifras muestran el porcentaje de flujos de trabajo que son exitosos (pueden completarse dentro de su límite de QoS), aceptables (pueden completarse dentro de κ=3 veces su límite de QoS) y fallidos (no pueden completarse dentro de κ=3 veces su límite de QoS). El GA produce consistentemente el mayor porcentaje de flujos de trabajo exitosos (lo que resulta en valores comerciales más altos para el conjunto agregado de flujos de trabajo). Además, el esquema de round-robin produce mejores resultados que el proporcional-aleatorio para un gran número de flujos de trabajo, pero no tiene un rendimiento tan bueno como el algoritmo genético. En la Figura 8 graficamos el makespan resultante de los mismos experimentos anteriores. Makespan es una métrica tradicional de la comunidad de programación de trabajos que mide el tiempo transcurrido para que se complete el último trabajo. Aunque útil, no captura la métrica de valor empresarial de alto nivel contra la que estamos optimizando. De hecho, el makespan no tiene en cuenta el hecho de que proporcionamos múltiples niveles de finalización (exitoso, aceptable y fallido) y asignamos puntajes de valor comercial en consecuencia. Para completar, señalamos que el algoritmo genético proporciona el makespan más rápido, pero es igualado por el algoritmo de round robin. El algoritmo genético produce mejores valores comerciales (como se muestra en la Figura 3) porque es capaz de explorar el espacio de soluciones para encontrar mejores asignaciones que generen flujos de trabajo más exitosos (como se muestra en las Figuras 5 a 7). También analizamos el efecto de los algoritmos de programación en el equilibrio de la carga. La Figura 9 muestra el porcentaje de proveedores de servicios que fueron accedidos mientras se ejecutaban los flujos de trabajo. Como era de esperar, el algoritmo codicioso siempre elige a un proveedor de servicios; por otro lado, el algoritmo de round-robin es el más rápido para distribuir el negocio. 33 Parámetro experimental Comentario Flujos de trabajo 5 a 1000 Procesos de negocio por flujo de trabajo aleatorio uniforme: 1 - 10 Tipos de servicio 10 Proveedores de servicios por tipo de servicio aleatorio uniforme: 1 - 10 Objetivo de QoS del flujo de trabajo aleatorio uniforme: 10-30 segundos Tiempo de finalización del proveedor de servicios (α) aleatorio uniforme: 1 - 12 segundos Máxima concurrencia del proveedor de servicios (β) aleatorio uniforme: 1 - 12 Coeficiente de degradación del proveedor de servicios (γ) aleatorio uniforme: 0.1 - 0.9 Valor de negocio para flujos de trabajo exitosos aleatorio uniforme: 10 - 50 puntos Valor de negocio para flujos de trabajo aceptables aleatorio uniforme: 0 - 10 puntos Valor de negocio para flujos de trabajo fallidos aleatorio uniforme: -10 - 0 puntos GA: número de padres 20 GA: número de hijos 80 GA: número de generaciones 1000 Tabla 1: Parámetros experimentales Fallido Aceptable (completado pero no dentro de QoS) Exitoso (completado dentro de QoS) 0% 20% 40% 60% 80% 100% RoundRobinRandProportionalGreedyGeneticAlg Porcentaje de todos los flujos de trabajo Comportamiento del flujo de trabajo, 100 flujos de trabajo Figura 5: Comportamiento del flujo de trabajo para 100 flujos de trabajo. Fracaso Aceptable (completado pero no dentro de QoS) Exitoso (completado dentro de QoS) 0% 20% 40% 60% 80% 100% RoundRobinRandProportionalGreedyGeneticAlg Porcentaje de todos los flujos de trabajo Comportamiento del flujo de trabajo, 500 flujos de trabajo Figura 6: Comportamiento del flujo de trabajo para 500 flujos de trabajo. Fracaso Aceptable (completado pero no dentro de QoS) Exitoso (completado dentro de QoS) 0% 20% 40% 60% 80% 100% RoundRobinRandProportionalGreedyGeneticAlg Porcentaje de todos los flujos de trabajo Comportamiento del flujo de trabajo, 500 flujos de trabajo Figura 7: Comportamiento del flujo de trabajo para 900 flujos de trabajo. 0 50 100 150 200 250 300 0 200 400 600 800 1000 Tiempo total [segundos] Número de flujos de trabajo Tiempo máximo de finalización para todos los flujos de trabajo Algoritmo genético Round robin Proporcional aleatorio Codicioso Figura 8: Tiempo máximo de finalización para todos los flujos de trabajo. Este valor es la métrica makespan utilizada en la investigación de programación tradicional. Aunque útil, el makespan no tiene en cuenta la puntuación del valor comercial en nuestro dominio de problemas. La Figura 10 muestra el porcentaje de proveedores de servicios accedidos (es decir, el porcentaje de proveedores de servicios representados en la Figura 9) que tenían más procesos comerciales asignados que su concurrencia máxima anunciada. Por ejemplo, en el algoritmo voraz solo se utiliza un proveedor de servicios, y este proveedor se satura rápidamente. Por otro lado, el algoritmo aleatorio-proporcional utiliza muchos proveedores de servicios, pero debido a que los procesos comerciales se asignan de manera proporcional con más asignaciones yendo a los mejores proveedores, hay una tendencia a que un menor porcentaje de proveedores se saturen. Para completitud, mostramos el rendimiento del algoritmo genético en sí mismo en la Figura 11. El algoritmo escala linealmente con un aumento en el número de flujos de trabajo. Observamos que los algoritmos round-robin, random-proportional y greedy terminaron en menos de 1 segundo incluso para la configuración de flujo de trabajo más grande. Sin embargo, consideramos que el beneficio de encontrar puntajes de valor empresarial mucho más altos justifica el tiempo de ejecución del algoritmo genético; además, esperaríamos que el tiempo de ejecución mejore tanto con la optimización del software como con un ordenador más rápido que nuestro PC estándar. CONCLUSIÓN Los procesos comerciales dentro de los flujos de trabajo pueden ser orquestados para acceder a servicios web. En este artículo estudiamos la provisión de servicios de múltiples niveles, donde las solicitudes de servicios web a tipos de servicios pueden ser asignadas a diferentes proveedores de servicios. El problema resultante es que para poder soportar un gran número de flujos de trabajo, la asignación de procesos de negocio a proveedores de servicios web debe ser inteligente. Utilizamos una métrica de valor empresarial para medir el 0.2 0.4 0.6 0.8 1 0 200 400 600 800 1000 Porcentaje de todos los proveedores de servicios Número de flujos de trabajo Proveedores de servicios utilizados Algoritmo genético Round robin Proporcional aleatorio Ávido Figura 9: El porcentaje de proveedores de servicios utilizados durante las ejecuciones de carga de trabajo. El algoritmo Greedy siempre elige al mismo proveedor de servicios, mientras que el algoritmo Round Robin distribuye las solicitudes de manera uniforme entre los proveedores. 0 0.2 0.4 0.6 0.8 1 0 200 400 600 800 1000 Porcentaje de todos los proveedores de servicios Número de flujos de trabajo Proveedores saturados Algoritmo genético Round robin Proporcional aleatorio Greedy Figura 10: El porcentaje de proveedores de servicios que están saturados entre aquellos proveedores que fueron utilizados (es decir, el porcentaje de proveedores de servicios representados en la Figura 9). Un proveedor de servicios saturado es aquel cuya carga de trabajo es mayor que su concurrencia máxima anunciada. Dado que el espacio de soluciones de los mapeos de programación es exponencial, utilizamos un algoritmo de búsqueda genética para explorar el espacio y converger hacia el mejor horario. Con una configuración predeterminada para todos los parámetros y utilizando nuestra puntuación de valor empresarial, el GA produjo hasta un 115% de mejora en el valor empresarial sobre el siguiente mejor algoritmo. Finalmente, debido a que un algoritmo genético convergerá hacia el valor óptimo utilizando cualquier métrica (incluso diferente a la métrica de valor empresarial que utilizamos), creemos que nuestro enfoque tiene un fuerte potencial para trabajos futuros. En trabajos futuros, buscamos adquirir trazas del mundo real de instancias de servicios web para obtener mejores estimaciones de las garantías de acuerdo de servicio, aunque esperamos que tales garantías entre los proveedores y sus consumidores no estén generalmente disponibles para el público. También analizaremos otras métricas de calidad de servicio (QoS) como el uso de CPU y E/S. Por ejemplo, podemos analizar los costos de transferencia con diferentes anchos de banda, latencia, tamaño de datos y distribución de datos. Además, esperamos mejorar nuestro algoritmo genético y compararlo con más alternativas de programación. Finalmente, dado que nuestro trabajo es complementario al trabajo existente en coreografía de servicios web (porque dependemos de flujos de trabajo preconfigurados), buscamos integrar nuestro enfoque con los sistemas de flujo de trabajo de servicios web disponibles expresados en BPEL. 6. REFERENCIAS [1] A. Ankolekar, et al. DAML-S: Marcado Semántico para Servicios Web, En Proc. del Simposio Internacional de Trabajo de la Web Semántica, 2001. [2] L. Davis. Programación de taller con algoritmos genéticos, En Proc. de la Conferencia Internacional sobre Algoritmos Genéticos, 1985. [3] H.-L. Fang, P. Ross y D. Corne. Un Enfoque Prometedor de Algoritmo Genético para Problemas de Programación de Taller de Trabajo, Re-programación y Programación de Taller Abierto, En Actas de la 5ta Conferencia Internacional sobre Algoritmos Genéticos, 1993. [4] M. Gary y D. Johnson. Computadoras e Intractabilidad: Una Guía de la Teoría de NP-Completitud, Freeman, 1979. [5] J. Holland. Adaptación en Sistemas Naturales y Artificiales: Un Análisis Introductorio con Aplicaciones a la Biología, Control e Inteligencia Artificial, MIT Press, 1992. [6] D. Goldberg. Algoritmos Genéticos en Búsqueda, Optimización y Aprendizaje Automático, Kluwer Academic Publishers, 1989. [7] Procesos de Negocio en un Mundo de Servicios Web, www-128.ibm.com/developerworks/webservices/library/ws-bpelwp/. [8] G. Soundararajan, K. Manassiev, J. Chen, A. Goel y C. Amza. Bases de datos de back-end en clústeres de servidores de contenido dinámico compartido, En Proc. de la Conferencia Internacional de Computación Autónoma de IEEE, 2005. [9] B. Srivastava y J. Koehler. Composición de Servicios Web: Soluciones Actuales y Problemas Abiertos, ICAP, 2003. [10] B. Urgaonkar, P. Shenoy, A. Chandra y P. Goyal. Provisión dinámica de aplicaciones de Internet de múltiples niveles, En Proc. de la Conferencia Internacional de IEEE sobre Computación Autónoma, 2005. [11] L. Zeng, B. Benatallah, M. Dumas, J. Kalagnanam y Q. Sheng. Composición de Servicios Web Impulsada por la Calidad, En Proc. de la Conferencia WWW, 2003. 35 ",
            "candidates": [],
            "error": [
                [
                    ""
                ]
            ]
        },
        "end-to-end workflow composition": {
            "translated_key": "composición del flujo de trabajo de extremo a extremo",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Heuristics-Based Scheduling of Composite Web Service Workloads Thomas Phan Wen-Syan Li IBM Almaden Research Center 650 Harry Rd.",
                "San Jose, CA 95120 {phantom,wsl}@us.ibm.com ABSTRACT Web services can be aggregated to create composite workflows that provide streamlined functionality for human users or other systems.",
                "Although industry standards and recent research have sought to define best practices and to improve <br>end-to-end workflow composition</br>, one area that has not fully been explored is the scheduling of a workflows web service requests to actual service provisioning in a multi-tiered, multi-organisation environment.",
                "This issue is relevant to modern business scenarios where business processes within a workflow must complete within QoS-defined limits.",
                "Because these business processes are web service consumers, service requests must be mapped and scheduled across multiple web service providers, each with its own negotiated service level agreement.",
                "In this paper we provide heuristics for scheduling service requests from multiple business process workflows to web service providers such that a business value metric across all workflows is maximised.",
                "We show that a genetic search algorithm is appropriate to perform this scheduling, and through experimentation we show that our algorithm scales well up to a thousand workflows and produces better mappings than traditional approaches.",
                "Categories and Subject Descriptors C.2.4 [Computer-Communication Networks]: Distributed Systems-distributed applications; D.2.8 [Software Engineering]: Metrics-complexity measures, performance measures 1.",
                "INTRODUCTION Web services can be composed into workflows to provide streamlined end-to-end functionality for human users or other systems.",
                "Although previous research efforts have looked at ways to intelligently automate the composition of web services into workflows (e.g. [1, 9]), an important remaining problem is the assignment of web service requests to the underlying web service providers in a multi-tiered runtime scenario within constraints.",
                "In this paper we address this scheduling problem and examine means to manage a large number of business process workflows in a scalable manner.",
                "The problem of scheduling web service requests to providers is relevant to modern business domains that depend on multi-tiered service provisioning.",
                "Consider the example shown in Figure 1 that illustrates our problem space.",
                "Workflows comprise multiple related business processes that are web service consumers; here we assume that the workflows represent requested service from customers or automated systems and that the workflow has already been composed with an existing choreography toolkit.",
                "These workflows are then submitted to a portal (not shown) that acts as a scheduling agent between the web service consumers and the web service providers.",
                "In this example, a workflow could represent the actions needed to instantiate a vacation itinerary, where one business process requests booking an airline ticket, another business process requests a hotel room, and so forth.",
                "Each of these requests target a particular service type (e.g. airline reservations, hotel reservations, car reservations, etc. ), and for each service type, there are multiple instances of service providers that publish a web service interface.",
                "An important challenge is that the workflows must meet some quality-of-service (QoS) metric, such as end-to-end completion time of all its business processes, and that meeting or failing this goal results in the assignment of a quantitative business value metric for the workflow; intuitively, it is desired that all workflows meet their respective QoS goals.",
                "We further leverage the notion that QoS service agreements are generally agreed-upon between the web service providers and the scheduling agent such that the providers advertise some level of guaranteed QoS to the scheduler based upon runtime conditions such as turnaround time and maximum available concurrency.",
                "The resulting problem is then to schedule and assign the business processes requests for service types to one of the service providers for that type.",
                "The scheduling must be done such that the aggregate business value across all the workflows is maximised.",
                "In Section 3 we state the scenario as a combinatorial problem and utilise a genetic search algorithm [5] to find the best assignment of web service requests to providers.",
                "This approach converges towards an assignment that maximises the overall business value for all the workflows.",
                "In Section 4 we show through experimentation that this search heuristic finds better assignments than other algorithms (greedy, round-robin, and proportional).",
                "Further, this approach allows us to scale the number of simultaneous workflows (up to one thousand workflows in our experiments) and yet still find effective schedules. 2.",
                "RELATED WORK In the context of service assignment and scheduling, [11] maps web service calls to potential servers using linear programming, but their work is concerned with mapping only single workflows; our principal focus is on scalably scheduling multiple workflows (up 30 Service Type SuperHotels.com Business Process Business Process Workflow ... Business Process Business Process ... HostileHostels.com IncredibleInns.com Business Process Business Process Business Process ... Business Process Service Provider SkyHighAirlines.com SuperCrazyFlights.com Business Process . . . . . .",
                "Advertised QoS Service Agreement CarRentalService.com Figure 1: An example scenario demonstrating the interaction between business processes in workflows and web service providers.",
                "Each business process accesses a service type and is then mapped to a service provider for that type. to one thousand as we show later) using different business metrics and a search heuristic. [10] presents a dynamic provisioning approach that uses both predictive and reactive techniques for multi-tiered Internet application delivery.",
                "However, the provisioning techniques do not consider the challenges faced when there are alternative query execution plans and replicated data sources. [8] presents a feedback-based scheduling mechanism for multi-tiered systems with back-end databases, but unlike our work, it assumes a tighter coupling between the various components of the system.",
                "Our work also builds upon prior scheduling research.",
                "The classic job-shop scheduling problem, shown to be NP-complete [4] [3], is similar to ours in that tasks within a job must be scheduled onto machinery (c.f. our scenario is that business processes within a workflow must be scheduled onto web service providers).",
                "The salient differences are that the machines can process only one job at a time (we assume servers can multi-task but with degraded performance and a maximum concurrency level), tasks within a job cannot simultaneously run on different machines (we assume business processes can be assigned to any available server), and the principal metric of performance is the makespan, which is the time for the last task among all the jobs to complete (and as we show later, optimising on the makespan is insufficient for scheduling the business processes, necessitating different metrics). 3.",
                "DESIGN In this section we describe our model and discuss how we can find scheduling assignments using a genetic search algorithm. 3.1 Model We base our model on the simplified scenario shown in Figure 1.",
                "Specifically, we assume that users or automated systems request the execution of a workflow.",
                "The workflows comprise business processes, each of which makes one web service invocation to a service type.",
                "Further, business processes have an ordering in the workflow.",
                "The arrangement and execution of the business processes and the data flow between them are all managed by a composition or choreography tool (e.g. [1, 9]).",
                "Although composition languages can use sophisticated flow-control mechanisms such as conditional branches, for simplicity we assume the processes execute sequentially in a given order.",
                "This scenario can be naturally extended to more complex relationships that can be expressed in BPEL [7], which defines how business processes interact, messages are exchanged, activities are ordered, and exceptions are handled.",
                "Due to space constraints, we focus on the problem space presented here and will extend our model to more advanced deployment scenarios in the future.",
                "Each workflow has a QoS requirement to complete within a specified number of time units (e.g. on the order of seconds, as detailed in the Experiments section).",
                "Upon completion (or failure), the workflow is assigned a business value.",
                "We extended this approach further and considered different types of workflow completion in order to model differentiated QoS levels that can be applied by businesses (for example, to provide tiered customer service).",
                "We say that a workflow is successful if it completes within its QoS requirement, acceptable if it completes within a constant factor κ 31 of its QoS bound (in our experiments we chose κ=3), or failing if it finishes beyond κ times its QoS bound.",
                "For each category, a business value score is assigned to the workflow, with the successful category assigned the highest positive score, followed by acceptable and then failing.",
                "The business value point distribution is non-uniform across workflows, further modelling cases where some workflows are of higher priority than others.",
                "Each service type is implemented by a number of different service providers.",
                "We assume that the providers make service level agreements (SLAs) to guarantee a level of performance defined by the completion time for completing a web service invocation.",
                "Although SLAs can be complex, in this paper we assume for simplicity that the guarantees can take the form of a linear performance degradation under load.",
                "This guarantee is defined by several parameters: α is the expected completion time (for example, on the order of seconds) if the assigned workload of web service requests is less than or equal to β, the maximum concurrency, and if the workload is higher than β, the expected completion for a workload of size ω is α+ γ(ω − β) where γ is a fractional coefficient.",
                "In our experiments we vary α, β, and γ with different distributions.",
                "Ideally, all workflows would be able to finish within their QoS limits and thus maximise the aggregate business value across all workflows.",
                "However, because we model service providers with degrading performance under load, not all workflows will achieve their QoS limit: it may easily be the case that business processes are assigned to providers who are overloaded and cannot complete within the respective workflows QoS limit.",
                "The key research problem, then, is to assign the business processes to the web service providers with the goal of optimising on the aggregate business value of all workflows.",
                "Given that the scope of the optimisation is the entire set of workflows, it may be that the best scheduling assignments may result in some workflows having to fail in order for more workflows to succeed.",
                "This intuitive observation suggests that traditional scheduling approaches such as round-robin or proportional assignments will not fare well, which is what we observe and discuss in Section 4.",
                "On the other hand, an exhaustive search of all the possible assignments will find the best schedule, but the computational complexity is prohibitively high.",
                "Suppose there are W workflows with an average of B business processes per workflow.",
                "Further, in the worst case each business process requests one service type, for which there are P providers.",
                "There are thus W · PB combinations to explore to find the optimal assignments of business processes to providers.",
                "Even for small configurations (e.g.",
                "W =10, B=5, P=10), the computational time for exhaustive search is significant, and in our work we look to scale these parameters.",
                "In the next subsection, discuss how a genetic search algorithm can be used to converge toward the optimum scheduling assignments. 3.2 Genetic algorithm Given an exponential search space of business process assignments to web service providers, the problem is to find the optimal assignment that produces the overall highest aggregate business value across all workflows.",
                "To explore the solution space, we use a genetic algorithm (GA) search heuristic that simulates Darwinian natural selection by having members of a population compete to survive in order to pass their genetic chromosomes onto the next generation; after successive generations, there is a tendency for the chromosomes to converge toward the best combination [5] [6].",
                "Although other search heuristics exist that can solve optimization problems (e.g. simulated annealing or steepest-ascent hillclimbing), the business process scheduling problem fits well with a GA because potential solutions can be represented in a matrix form and allows us to use prior research in effective GA chromosome recombination to form new members of the population (e.g. [2]). 0 1 2 3 4 0 1 2 0 2 1 1 0 1 0 1 0 2 1 2 0 0 1 Figure 2: An example chromosome representing a scheduling assignment of (workflow,service type) → service provider.",
                "Each row represents a workflow, and each column represents a service type.",
                "For example, here there are 3 workflows (0 to 2) and 5 service types (0 to 4).",
                "In workflow 0, any request for service type 3 goes to provider 2.",
                "Note that the service provider identifier is within a range limited to its service type (i.e. its column), so the 2 listed for service type 3 is a different server from server 2 in other columns.",
                "Chromosome representation of a solution.",
                "In Figure 2 we show an example chromosome that encodes one scheduling assignment.",
                "The representation is a 2-dimensional matrix that maps {workflow, service type} to a service provider.",
                "For a business process in workflow i and utilising service type j, the (i, j)th entry in the table is the identifier for the service provider to which the business process is assigned.",
                "Note that the service provider identifier is within a range limited to its service type.",
                "GA execution.",
                "A GA proceeds as follows.",
                "Initially a random set of chromosomes is created for the population.",
                "The chromosomes are evaluated (hashed) to some metric, and the best ones are chosen to be parents.",
                "In our problem, the evaluation produces the net business value across all workflows after executing all business processes once they are assigned to their respective service providers according to the mapping in the chromosome.",
                "The parents recombine to produce children, simulating sexual crossover, and occasionally a mutation may arise which produces new characteristics that were not available in either parent.",
                "The principal idea is that we would like the children to be different from the parents (in order to explore more of the solution space) yet not too different (in order to contain the portions of the chromosome that result in good scheduling assignments).",
                "Note that finding the global optimum is not guaranteed because the recombination and mutation are stochastic.",
                "GA recombination and mutation.",
                "As mentioned, the chromosomes are 2-dimensional matrices that represent scheduling assignments.",
                "To simulate sexual recombination of two chromosomes to produce a new child chromosome, we applied a one-point crossover scheme twice (once along each dimension).",
                "The crossover is best explained by analogy to Cartesian space as follows.",
                "A random point is chosen in the matrix to be coordinate (0, 0).",
                "Matrix elements from quadrants II and IV from the first parent and elements from quadrants I and III from the second parent are used to create the new child.",
                "This approach follows GA best practices by keeping contiguous chromosome segments together as they are transmitted from parent to child.",
                "The uni-chromosome mutation scheme randomly changes one of the service provider assignments to another provider within the available range.",
                "Other recombination and mutation schemes are an area of research in the GA community, and we look to explore new operators in future work.",
                "GA evaluation function.",
                "An important GA component is the evaluation function.",
                "Given a particular chromosome representing one scheduling mapping, the function deterministically calculates the net business value across all workloads.",
                "The business processes in each workload are assigned to service providers, and each providers completion time is calculated based on the service agreement guarantee using the parameters mentioned in Section 3.1, namely the unloaded completion time α, the maximum concur32 rency β, and a coefficient γ that controls the linear performance degradation under heavy load.",
                "Note that the evaluation function can be easily replaced if desired; for example, other evaluation functions can model different service provider guarantees or parallel workflows. 4.",
                "EXPERIMENTS AND RESULTS In this section we show the benefit of using our GA-based scheduler.",
                "Because we wanted to scale the scenarios up to a large number of workflows (up to 1000 in our experiments), we implemented a simulation program that allowed us to vary parameters and to measure the results with different metrics.",
                "The simulator was written in standard C++ and was run on a Linux (Fedora Core) desktop computer running at 2.8 GHz with 1GB of RAM.",
                "We compared our algorithm against alternative candidates: • A well-known round-robin algorithm that assigns each business process in circular fashion to the service providers for a particular service type.",
                "This approach provides the simplest scheme for load-balancing. • A random-proportional algorithm that proportionally assigns business processes to the service providers; that is, for a given service type, the service providers are ranked by their guaranteed completion time, and business processes are assigned proportionally to the providers based on their completion time. (We also tried a proportionality scheme based on both the completion times and maximum concurrency but attained the same results, so only the former schemes results are shown here.) • A strawman greedy algorithm that always assigns business processes to the service provider that has the fastest guaranteed completion time.",
                "This algorithm represents a naive approach based on greedy, local observations of each workflow without taking into consideration all workflows.",
                "In the experiments that follow, all results were averaged across 20 trials, and to help normalise the effects of randomisation used during the GA, each trial started by reading in pre-initialised data from disk.",
                "In Table 1 we list our experimental parameters.",
                "In Figure 3 we show the results of running our GA against the three candidate alternatives.",
                "The x-axis shows the number for workflows scaled up to 1000, and the y-axis shows the aggregate business value for all workflows.",
                "As can be seen, the GA consistently produces the highest business value even as the number of workflows grows; at 1000 workflows, the GA produces a 115% improvement over the next-best alternative. (Note that although we are optimising against the business value metric we defined earlier, genetic algorithms are able to converge towards the optimal value of any metric, as long as the evaluation function can consistently measure a chromosomes value with that metric.)",
                "As expected, the greedy algorithm performs very poorly because it does the worst job at balancing load: all business processes for a given service type are assigned to only one server (the one advertised to have the fastest completion time), and as more business processes arrive, the providers performance degrades linearly.",
                "The round-robin scheme is initially outperformed by the randomproportional scheme up to around 120 workflows (as shown in the magnified graph of Figure 4), but as the number of workflows increases, the round-robin scheme consistently wins over randomproportional.",
                "The reason is that although the random-proportional scheme assigns business processes to providers proportionally according to the advertised completion times (which is a measure of the power of the service provider), even the best providers will eventually reach a real-world maximum concurrency for the large -2000 -1000 0 1000 2000 3000 4000 5000 6000 7000 0 200 400 600 800 1000 Aggregatebusinessvalueacrossallworkflows Total number of workflows Business value scores of scheduling algorithms Genetic algorithm Round robin Random proportional Greedy Figure 3: Net business value scores of different scheduling algorithms. -500 0 500 1000 1500 2000 2500 3000 3500 4000 0 50 100 150 200Aggregatebusinessvalueacrossallworkflows Total number of workflows Business value scores of scheduling algorithms Genetic algorithm Round robin Random proportional Greedy Figure 4: Magnification of the left-most region in Figure 3. number of workflows that we are considering.",
                "For a very large number of workflows, the round-robin scheme is able to better balance the load across all service providers.",
                "To better understand the behaviour resulting from the scheduling assignments, we show the workflow completion results in Figures 5, 6, and 7 for 100, 500, and 900 workflows, respectively.",
                "These figures show the percentage of workflows that are successful (can complete with their QoS limit), acceptable (can complete within κ=3 times their QoS limit), and failed (cannot complete within κ=3 times their QoS limit).",
                "The GA consistently produces the highest percentage of successful workflows (resulting in higher business values for the aggregate set of workflows).",
                "Further, the round-robin scheme produces better results than the random-proportional for a large number of workflows but does not perform as well as the GA.",
                "In Figure 8 we graph the makespan resulting from the same experiments above.",
                "Makespan is a traditional metric from the job scheduling community measuring elapsed time for the last job to complete.",
                "While useful, it does not capture the high-level business value metric that we are optimising against.",
                "Indeed, the makespan is oblivious to the fact that we provide multiple levels of completion (successful, acceptable, and failed) and assign business value scores accordingly.",
                "For completeness, we note that the GA provides the fastest makespan, but it is matched by the round robin algorithm.",
                "The GA produces better business values (as shown in Figure 3) because it is able to search the solution space to find better mappings that produce more successful workflows (as shown in Figures 5 to 7).",
                "We also looked at the effect of the scheduling algorithms on balancing the load.",
                "Figure 9 shows the percentage of services providers that were accessed while the workflows ran.",
                "As expected, the greedy algorithm always hits one service provider; on the other hand, the round-robin algorithm is the fastest to spread the business 33 Experimental parameter Comment Workflows 5 to 1000 Business processes per workflow uniform random: 1 - 10 Service types 10 Service providers per service type uniform random: 1 - 10 Workflow QoS goal uniform random: 10-30 seconds Service provider completion time (α) uniform random: 1 - 12 seconds Service provider maximum concurrency (β) uniform random: 1 - 12 Service provider degradation coefficient (γ) uniform random: 0.1 - 0.9 Business value for successful workflows uniform random: 10 - 50 points Business value for acceptable workflows uniform random: 0 - 10 points Business value for failed workflows uniform random: -10 - 0 points GA: number of parents 20 GA: number of children 80 GA: number of generations 1000 Table 1: Experimental parameters Failed Acceptable (completed but not within QoS) Successful (completed within QoS) 0% 20% 40% 60% 80% 100% RoundRobinRandProportionalGreedyGeneticAlg Percentageofallworkflows Workflow behaviour, 100 workflows Figure 5: Workflow behaviour for 100 workflows.",
                "Failed Acceptable (completed but not within QoS) Successful (completed within QoS) 0% 20% 40% 60% 80% 100% RoundRobinRandProportionalGreedyGeneticAlg Percentageofallworkflows Workflow behaviour, 500 workflows Figure 6: Workflow behaviour for 500 workflows.",
                "Failed Acceptable (completed but not within QoS) Successful (completed within QoS) 0% 20% 40% 60% 80% 100% RoundRobinRandProportionalGreedyGeneticAlg Percentageofallworkflows Workflow behaviour, 500 workflows Figure 7: Workflow behaviour for 900 workflows. 0 50 100 150 200 250 300 0 200 400 600 800 1000 Makespan[seconds] Number of workflows Maximum completion time for all workflows Genetic algorithm Round robin Random proportional Greedy Figure 8: Maximum completion time for all workflows.",
                "This value is the makespan metric used in traditional scheduling research.",
                "Although useful, the makespan does not take into consideration the business value scoring in our problem domain. processes.",
                "Figure 10 is the percentage of accessed service providers (that is, the percentage of service providers represented in Figure 9) that had more assigned business processes than their advertised maximum concurrency.",
                "For example, in the greedy algorithm only one service provider is utilised, and this one provider quickly becomes saturated.",
                "On the other hand, the random-proportional algorithm uses many service providers, but because business processes are proportionally assigned with more assignments going to the better providers, there is a tendency for a smaller percentage of providers to become saturated.",
                "For completeness, we show the performance of the genetic algorithm itself in Figure 11.",
                "The algorithm scales linearly with an increasing number of workflows.",
                "We note that the round-robin, random-proportional, and greedy algorithms all finished within 1 second even for the largest workflow configuration.",
                "However, we feel that the benefit of finding much higher business value scores justifies the running time of the GA; further we would expect that the running time will improve with both software tuning as well as with a computer faster than our off-the-shelf PC. 5.",
                "CONCLUSION Business processes within workflows can be orchestrated to access web services.",
                "In this paper we looked at multi-tiered service provisioning where web service requests to service types can be mapped to different service providers.",
                "The resulting problem is that in order to support a very large number of workflows, the assignment of business process to web service provider must be intelligent.",
                "We used a business value metric to measure the be34 0 0.2 0.4 0.6 0.8 1 0 200 400 600 800 1000 Percentageofallserviceproviders Number of workflows Service providers utilised Genetic algorithm Round robin Random proportional Greedy Figure 9: The percentage of service providers utilized during workload executions.",
                "The Greedy algorithm always hits the one service provider, while the Round Robin algorithm spreads requests evenly across the providers. 0 0.2 0.4 0.6 0.8 1 0 200 400 600 800 1000 Percentageofallserviceproviders Number of workflows Service providers saturated Genetic algorithm Round robin Random proportional Greedy Figure 10: The percentage of service providers that are saturated among those providers who were utilized (that is, percentage of the service providers represented in Figure 9).",
                "A saturated service provider is one whose workload is greater that its advertised maximum concurrency. 0 5 10 15 20 25 0 200 400 600 800 1000 Runningtimeinseconds Total number of workflows Running time of genetic algorithm GA running time Figure 11: Running time of the genetic algorithm. haviour of workflows meeting or failing QoS values, and we optimised our scheduling to maximise the aggregate business value across all workflows.",
                "Since the solution space of scheduler mappings is exponential, we used a genetic search algorithm to search the space and converge toward the best schedule.",
                "With a default configuration for all parameters and using our business value scoring, the GA produced up to 115% business value improvement over the next best algorithm.",
                "Finally, because a genetic algorithm will converge towards the optimal value using any metric (even other than the business value metric we used), we believe our approach has strong potential for continuing work.",
                "In future work, we look to acquire real-world traces of web service instances in order to get better estimates of service agreement guarantees, although we expect that such guarantees between the providers and their consumers are not generally available to the public.",
                "We will also look at other QoS metrics such as CPU and I/O usage.",
                "For example, we can analyse transfer costs with varying bandwidth, latency, data size, and data distribution.",
                "Further, we hope to improve our genetic algorithm and compare it to more scheduler alternatives.",
                "Finally, since our work is complementary to existing work in web services choreography (because we rely on pre-configured workflows), we look to integrate our approach with available web service workflow systems expressed in BPEL. 6.",
                "REFERENCES [1] A. Ankolekar, et al.",
                "DAML-S: Semantic Markup For Web Services, In Proc. of the Intl Semantic Web Working Symposium, 2001. [2] L. Davis.",
                "Job Shop Scheduling with Genetic Algorithms, In Proc. of the Intl Conference on Genetic Algorithms, 1985. [3] H.-L. Fang, P. Ross, and D. Corne.",
                "A Promising Genetic Algorithm Approach to Job-Shop Scheduling, Rescheduling, and Open-Shop Scheduling Problems , In Proc. on the 5th Intl Conference on Genetic Algorithms, 1993. [4] M. Gary and D. Johnson.",
                "Computers and Intractability: A Guide to the Theory of NP-Completeness, Freeman, 1979. [5] J. Holland.",
                "Adaptation in Natural and Artificial Systems: An Introductory Analysis with Applications to Biology, Control, and Artificial Intelligence, MIT Press, 1992. [6] D. Goldberg.",
                "Genetic Algorithms in Search, Optimization and Machine Learning, Kluwer Academic Publishers, 1989. [7] Business Processes in a Web Services World, www-128.ibm.com/developerworks/ webservices/library/ws-bpelwp/. [8] G. Soundararajan, K. Manassiev, J. Chen, A. Goel, and C. Amza.",
                "Back-end Databases in Shared Dynamic Content Server Clusters, In Proc. of the IEEE Intl Conference on Autonomic Computing, 2005. [9] B. Srivastava and J. Koehler.",
                "Web Service Composition Current Solutions and Open Problems, ICAP, 2003. [10] B. Urgaonkar, P. Shenoy, A. Chandra, and P. Goyal.",
                "Dynamic Provisioning of Multi-Tier Internet Applications, In Proc. of the IEEE Intl Conference on Autonomic Computing, 2005. [11] L. Zeng, B. Benatallah, M. Dumas, J. Kalagnanam, and Q. Sheng.",
                "Quality Driven Web Services Composition, In Proc. of the WWW Conference, 2003. 35"
            ],
            "original_annotated_samples": [
                "Although industry standards and recent research have sought to define best practices and to improve <br>end-to-end workflow composition</br>, one area that has not fully been explored is the scheduling of a workflows web service requests to actual service provisioning in a multi-tiered, multi-organisation environment."
            ],
            "translated_annotated_samples": [
                "Aunque los estándares de la industria y la investigación reciente han buscado definir las mejores prácticas y mejorar la <br>composición del flujo de trabajo de extremo a extremo</br>, un área que no ha sido completamente explorada es la programación de las solicitudes de servicios web de los flujos de trabajo para la provisión real de servicios en un entorno multinivel y multiorganizacional."
            ],
            "translated_text": "Programación basada en heurísticas de cargas de trabajo de servicios web compuestos Thomas Phan Wen-Syan Li Centro de Investigación IBM Almaden 650 Harry Rd. Los servicios web pueden ser agregados para crear flujos de trabajo compuestos que proporcionen funcionalidad simplificada para usuarios humanos u otros sistemas. Aunque los estándares de la industria y la investigación reciente han buscado definir las mejores prácticas y mejorar la <br>composición del flujo de trabajo de extremo a extremo</br>, un área que no ha sido completamente explorada es la programación de las solicitudes de servicios web de los flujos de trabajo para la provisión real de servicios en un entorno multinivel y multiorganizacional. Este problema es relevante para los escenarios empresariales modernos donde los procesos comerciales dentro de un flujo de trabajo deben completarse dentro de los límites definidos por la calidad de servicio (QoS). Debido a que estos procesos comerciales son consumidores de servicios web, las solicitudes de servicio deben ser mapeadas y programadas entre múltiples proveedores de servicios web, cada uno con su propio acuerdo de nivel de servicio negociado. En este documento proporcionamos heurísticas para programar solicitudes de servicio de múltiples flujos de trabajo de procesos comerciales a proveedores de servicios web de manera que se maximice una métrica de valor comercial en todos los flujos de trabajo. Mostramos que un algoritmo de búsqueda genética es apropiado para realizar esta programación, y a través de experimentación demostramos que nuestro algoritmo escala bien hasta mil flujos de trabajo y produce mejores asignaciones que enfoques tradicionales. Categorías y Descriptores de Asignaturas C.2.4 [Redes de Computadoras-Comunicación]: Sistemas Distribuidos-aplicaciones distribuidas; D.2.8 [Ingeniería de Software]: Métricas-medidas de complejidad, medidas de rendimiento 1. INTRODUCCIÓN Los servicios web pueden ser compuestos en flujos de trabajo para proporcionar funcionalidad integrada de principio a fin para usuarios humanos u otros sistemas. Aunque los esfuerzos de investigación previos han examinado formas de automatizar de manera inteligente la composición de servicios web en flujos de trabajo (por ejemplo, [1, 9]), un problema importante que aún persiste es la asignación de solicitudes de servicios web a los proveedores de servicios web subyacentes en un escenario de tiempo de ejecución multinivel dentro de ciertas restricciones. En este documento abordamos este problema de programación y examinamos medios para gestionar un gran número de flujos de trabajo de procesos comerciales de manera escalable. El problema de programar solicitudes de servicios web a proveedores es relevante para los dominios comerciales modernos que dependen de la provisión de servicios de múltiples niveles. Considera el ejemplo mostrado en la Figura 1 que ilustra nuestro espacio de problemas. Los flujos de trabajo comprenden múltiples procesos comerciales relacionados que son consumidores de servicios web; aquí asumimos que los flujos de trabajo representan servicios solicitados por clientes o sistemas automatizados y que el flujo de trabajo ya ha sido compuesto con una herramienta de coreografía existente. Estos flujos de trabajo son luego enviados a un portal (no mostrado) que actúa como un agente de programación entre los consumidores del servicio web y los proveedores del servicio web. En este ejemplo, un flujo de trabajo podría representar las acciones necesarias para crear un itinerario de vacaciones, donde un proceso empresarial solicita la reserva de un boleto de avión, otro proceso empresarial solicita una habitación de hotel, y así sucesivamente. Cada una de estas solicitudes apunta a un tipo de servicio en particular (por ejemplo, reservas de aerolíneas, reservas de hoteles, reservas de autos, etc.), y para cada tipo de servicio, hay múltiples instancias de proveedores de servicios que publican una interfaz de servicio web. Un desafío importante es que los flujos de trabajo deben cumplir con alguna métrica de calidad de servicio (QoS), como el tiempo de finalización de extremo a extremo de todos sus procesos comerciales, y que cumplir o no con este objetivo resulta en la asignación de una métrica de valor comercial cuantitativo para el flujo de trabajo; intuitivamente, se desea que todos los flujos de trabajo cumplan con sus respectivos objetivos de QoS. Además, aprovechamos la idea de que los acuerdos de servicio de QoS suelen ser acordados entre los proveedores de servicios web y el agente de programación de tal manera que los proveedores anuncian un cierto nivel de QoS garantizado al programador en función de condiciones de tiempo de respuesta y concurrencia máxima disponible. El problema resultante es entonces programar y asignar las solicitudes de procesos comerciales para tipos de servicio a uno de los proveedores de servicios para ese tipo. La programación debe realizarse de tal manera que se maximice el valor comercial agregado en todos los flujos de trabajo. En la Sección 3 planteamos el escenario como un problema combinatorio y utilizamos un algoritmo de búsqueda genética [5] para encontrar la mejor asignación de solicitudes de servicios web a proveedores. Este enfoque converge hacia una asignación que maximiza el valor comercial general para todos los flujos de trabajo. En la Sección 4 mostramos a través de experimentación que esta heurística de búsqueda encuentra asignaciones mejores que otros algoritmos (codicioso, round-robin y proporcional). Además, este enfoque nos permite escalar el número de flujos de trabajo simultáneos (hasta mil flujos de trabajo en nuestros experimentos) y aún así encontrar horarios efectivos. 2. TRABAJO RELACIONADO En el contexto de asignación y programación de servicios, [11] mapea llamadas de servicios web a servidores potenciales utilizando programación lineal, pero su trabajo se centra en mapear solo flujos de trabajo individuales; nuestro enfoque principal está en programar de manera escalable múltiples flujos de trabajo (hasta 30 tipos de servicios SuperHotels.com Proceso de Negocio Proceso de Negocio Flujo de Trabajo ... Proceso de Negocio Proceso de Negocio ... HostileHostels.com IncredibleInns.com Proceso de Negocio Proceso de Negocio Proceso de Negocio ... Proceso de Negocio Proveedor de Servicios SkyHighAirlines.com SuperCrazyFlights.com Proceso de Negocio . . . . . . Acuerdo de Servicio de Calidad de Servicio (QoS) Publicitado CarRentalService.com Figura 1: Un escenario de ejemplo que muestra la interacción entre procesos comerciales en flujos de trabajo y proveedores de servicios web. Cada proceso empresarial accede a un tipo de servicio y luego se asigna a un proveedor de servicios para ese tipo, a uno mil como mostraremos más adelante, utilizando diferentes métricas empresariales y una heurística de búsqueda. [10] presenta un enfoque de aprovisionamiento dinámico que utiliza técnicas predictivas y reactivas para la entrega de aplicaciones de Internet multinivel. Sin embargo, las técnicas de aprovisionamiento no consideran los desafíos enfrentados cuando hay planes alternativos de ejecución de consultas y fuentes de datos replicadas. [8] presenta un mecanismo de programación basado en retroalimentación para sistemas multinivel con bases de datos de back-end, pero a diferencia de nuestro trabajo, asume un acoplamiento más estrecho entre los diversos componentes del sistema. Nuestro trabajo también se basa en investigaciones previas sobre programación. El problema clásico de programación de talleres, demostrado como NP-completo [4] [3], es similar al nuestro en el sentido de que las tareas dentro de un trabajo deben ser programadas en maquinaria (cf. nuestro escenario es que los procesos comerciales dentro de un flujo de trabajo deben ser programados en proveedores de servicios web). Las diferencias más destacadas son que las máquinas solo pueden procesar un trabajo a la vez (asumimos que los servidores pueden realizar múltiples tareas pero con un rendimiento degradado y un nivel máximo de concurrencia), las tareas dentro de un trabajo no pueden ejecutarse simultáneamente en diferentes máquinas (asumimos que los procesos comerciales pueden asignarse a cualquier servidor disponible), y la métrica principal de rendimiento es el makespan, que es el tiempo que tarda la última tarea de todos los trabajos en completarse (y como mostraremos más adelante, optimizar el makespan no es suficiente para programar los procesos comerciales, lo que requiere diferentes métricas). 3. En esta sección describimos nuestro modelo y discutimos cómo podemos encontrar asignaciones de programación utilizando un algoritmo de búsqueda genética. 3.1 Modelo Basamos nuestro modelo en el escenario simplificado mostrado en la Figura 1. Específicamente, asumimos que los usuarios o sistemas automatizados solicitan la ejecución de un flujo de trabajo. Los flujos de trabajo comprenden procesos comerciales, cada uno de los cuales realiza una invocación de servicio web a un tipo de servicio. Además, los procesos comerciales tienen un orden en el flujo de trabajo. La disposición y ejecución de los procesos comerciales y el flujo de datos entre ellos son gestionados por una herramienta de composición o coreografía (por ejemplo, [1, 9]). Aunque los lenguajes de composición pueden utilizar mecanismos sofisticados de control de flujo como ramas condicionales, para simplificar asumimos que los procesos se ejecutan secuencialmente en un orden dado. Este escenario puede ser extendido de forma natural a relaciones más complejas que pueden ser expresadas en BPEL [7], el cual define cómo interactúan los procesos de negocio, se intercambian mensajes, se ordenan actividades y se manejan excepciones. Debido a limitaciones de espacio, nos enfocamos en el espacio de problemas presentado aquí y extenderemos nuestro modelo a escenarios de implementación más avanzados en el futuro. Cada flujo de trabajo tiene un requisito de calidad de servicio (QoS) que debe completarse dentro de un número específico de unidades de tiempo (por ejemplo, del orden de segundos, como se detalla en la sección de Experimentos). Una vez completado (o fallido), se asigna un valor comercial al flujo de trabajo. Extendimos este enfoque aún más y consideramos diferentes tipos de finalización de flujo de trabajo para modelar niveles diferenciados de QoS que pueden ser aplicados por las empresas (por ejemplo, para proporcionar servicios al cliente escalonados). Decimos que un flujo de trabajo es exitoso si se completa dentro de su requisito de QoS, aceptable si se completa dentro de un factor constante κ 31 de su límite de QoS (en nuestros experimentos elegimos κ=3), o fallido si termina más allá de κ veces su límite de QoS. Para cada categoría, se asigna un puntaje de valor comercial al flujo de trabajo, siendo la categoría exitosa la que recibe la puntuación positiva más alta, seguida por la aceptable y luego la fallida. La distribución de puntos de valor empresarial no es uniforme en los flujos de trabajo, lo que modela casos en los que algunos flujos de trabajo tienen mayor prioridad que otros. Cada tipo de servicio es implementado por varios proveedores de servicios diferentes. Suponemos que los proveedores hacen acuerdos de nivel de servicio (SLAs) para garantizar un nivel de rendimiento definido por el tiempo de finalización de una invocación de servicio web. Aunque los Acuerdos de Nivel de Servicio (SLAs) pueden ser complejos, en este documento asumimos, para simplificar, que las garantías pueden adoptar la forma de una degradación lineal del rendimiento bajo carga. Esta garantía está definida por varios parámetros: α es el tiempo de finalización esperado (por ejemplo, del orden de segundos) si la carga de trabajo asignada de las solicitudes de servicio web es menor o igual a β, la concurrencia máxima, y si la carga de trabajo es mayor que β, la finalización esperada para una carga de trabajo de tamaño ω es α + γ(ω − β) donde γ es un coeficiente fraccional. En nuestros experimentos variamos α, β y γ con diferentes distribuciones. Idealmente, todos los flujos de trabajo podrían finalizar dentro de sus límites de calidad de servicio (QoS) y, por lo tanto, maximizar el valor empresarial agregado en todos los flujos de trabajo. Sin embargo, debido a que modelamos a los proveedores de servicios con un rendimiento degradante bajo carga, no todos los flujos de trabajo alcanzarán su límite de calidad de servicio (QoS): fácilmente puede darse el caso de que los procesos comerciales sean asignados a proveedores que están sobrecargados y no pueden completarse dentro del límite de calidad de servicio respectivo de los flujos de trabajo. El problema clave de investigación, entonces, es asignar los procesos comerciales a los proveedores de servicios web con el objetivo de optimizar el valor comercial agregado de todos los flujos de trabajo. Dado que el alcance de la optimización es el conjunto completo de flujos de trabajo, puede ser que las mejores asignaciones de programación resulten en que algunos flujos de trabajo tengan que fallar para que otros tengan éxito. Esta observación intuitiva sugiere que enfoques de programación tradicionales como el round-robin o asignaciones proporcionales no funcionarán bien, lo cual es lo que observamos y discutimos en la Sección 4. Por otro lado, una búsqueda exhaustiva de todas las posibles asignaciones encontrará el mejor horario, pero la complejidad computacional es prohibitivamente alta. Supongamos que hay W flujos de trabajo con un promedio de B procesos de negocio por flujo de trabajo. Además, en el peor de los casos, cada proceso empresarial solicita un tipo de servicio, para el cual hay P proveedores. Por lo tanto, hay W · PB combinaciones para explorar y encontrar las asignaciones óptimas de procesos comerciales a proveedores. Incluso para configuraciones pequeñas (por ejemplo, Dado que (W=10, B=5, P=10), el tiempo computacional para la búsqueda exhaustiva es significativo, y en nuestro trabajo buscamos ajustar estos parámetros. En la siguiente subsección, discuta cómo se puede utilizar un algoritmo de búsqueda genética para converger hacia las asignaciones de programación óptimas. 3.2 Algoritmo genético Dado un espacio de búsqueda exponencial de asignaciones de procesos comerciales a proveedores de servicios web, el problema es encontrar la asignación óptima que produzca el valor comercial agregado más alto en general en todos los flujos de trabajo. Para explorar el espacio de soluciones, utilizamos un algoritmo genético (GA) que simula la selección natural darwiniana al hacer que los miembros de una población compitan por sobrevivir para transmitir sus cromosomas genéticos a la siguiente generación; después de generaciones sucesivas, hay una tendencia a que los cromosomas converjan hacia la mejor combinación. Aunque existen otras heurísticas de búsqueda que pueden resolver problemas de optimización (por ejemplo, recocido simulado o escalada de colina más empinada), el problema de programación de procesos empresariales se adapta bien a un AG porque las soluciones potenciales pueden representarse en forma de matriz y nos permite utilizar investigaciones previas en la recombinación efectiva de cromosomas de AG para formar nuevos miembros de la población (por ejemplo, [2]). 0 1 2 3 4 0 1 2 0 2 1 1 0 1 0 1 0 2 1 2 0 0 1 Figura 2: Un ejemplo de cromosoma que representa una asignación de programación de (flujo de trabajo, tipo de servicio) → proveedor de servicios. Cada fila representa un flujo de trabajo, y cada columna representa un tipo de servicio. Por ejemplo, aquí hay 3 flujos de trabajo (0 a 2) y 5 tipos de servicio (0 a 4). En el flujo de trabajo 0, cualquier solicitud de tipo de servicio 3 se dirige al proveedor 2. Ten en cuenta que el identificador del proveedor de servicios se encuentra dentro de un rango limitado a su tipo de servicio (es decir, su columna), por lo que el 2 listado para el tipo de servicio 3 es un servidor diferente al servidor 2 en otras columnas. Representación cromosómica de una solución. En la Figura 2 mostramos un ejemplo de cromosoma que codifica una asignación de programación. La representación es una matriz bidimensional que mapea {flujo de trabajo, tipo de servicio} a un proveedor de servicios. Para un proceso de negocio en el flujo de trabajo i y utilizando el tipo de servicio j, la entrada (i, j)-ésima en la tabla es el identificador del proveedor de servicios al que se asigna el proceso de negocio. Ten en cuenta que el identificador del proveedor de servicios se encuentra dentro de un rango limitado a su tipo de servicio. Ejecución de GA. Un algoritmo genético procede de la siguiente manera. Inicialmente se crea un conjunto aleatorio de cromosomas para la población. Los cromosomas son evaluados (hasheados) según alguna métrica, y los mejores son elegidos para ser padres. En nuestro problema, la evaluación produce el valor neto del negocio en todos los flujos de trabajo después de ejecutar todos los procesos comerciales una vez que se asignan a sus respectivos proveedores de servicios de acuerdo con el mapeo en el cromosoma. Los padres se recombinan para producir hijos, simulando un cruce sexual, y ocasionalmente puede surgir una mutación que produce nuevas características que no estaban disponibles en ninguno de los padres. La idea principal es que nos gustaría que los niños fueran diferentes de los padres (para explorar más del espacio de soluciones) pero no demasiado diferentes (para contener las porciones del cromosoma que resultan en asignaciones de programación exitosas). Ten en cuenta que encontrar el óptimo global no está garantizado debido a que la recombinación y la mutación son estocásticas. Recombinación y mutación de ADN. Como se mencionó, los cromosomas son matrices bidimensionales que representan asignaciones de horarios. Para simular la recombinación sexual de dos cromosomas para producir un nuevo cromosoma hijo, aplicamos un esquema de cruce de un punto dos veces (una vez a lo largo de cada dimensión). El cruce se explica mejor por analogía al espacio cartesiano de la siguiente manera. Se elige un punto al azar en la matriz para que sea la coordenada (0, 0). Los elementos de la matriz de los cuadrantes II y IV del primer progenitor y los elementos de los cuadrantes I y III del segundo progenitor se utilizan para crear el nuevo hijo. Este enfoque sigue las mejores prácticas de los algoritmos genéticos al mantener juntos los segmentos cromosómicos contiguos a medida que se transmiten de padre a hijo. El esquema de mutación de uni-cromosoma cambia aleatoriamente una de las asignaciones de proveedor de servicios a otro proveedor dentro del rango disponible. Otros esquemas de recombinación y mutación son un área de investigación en la comunidad de AG, y buscamos explorar nuevos operadores en trabajos futuros. Función de evaluación de GA. Un componente importante de los algoritmos genéticos es la función de evaluación. Dada una cromosoma particular que representa un mapeo de programación, la función calcula de manera determinista el valor neto del negocio en todas las cargas de trabajo. Los procesos comerciales en cada carga de trabajo se asignan a proveedores de servicios, y el tiempo de finalización de cada proveedor se calcula en función de la garantía del acuerdo de servicio utilizando los parámetros mencionados en la Sección 3.1, a saber, el tiempo de finalización sin carga α, la máxima concurrencia β y un coeficiente γ que controla la degradación del rendimiento lineal bajo carga pesada. Ten en cuenta que la función de evaluación puede ser fácilmente reemplazada si se desea; por ejemplo, otras funciones de evaluación pueden modelar diferentes garantías de proveedores de servicios o flujos de trabajo paralelos. 4. EXPERIMENTOS Y RESULTADOS En esta sección mostramos el beneficio de utilizar nuestro planificador basado en algoritmos genéticos. Debido a que queríamos escalar los escenarios a un gran número de flujos de trabajo (hasta 1000 en nuestros experimentos), implementamos un programa de simulación que nos permitió variar parámetros y medir los resultados con diferentes métricas. El simulador fue escrito en C++ estándar y se ejecutó en un ordenador de escritorio Linux (Fedora Core) con una velocidad de 2.8 GHz y 1GB de RAM. Comparamos nuestro algoritmo con candidatos alternativos: • Un algoritmo de round-robin bien conocido que asigna cada proceso comercial de forma circular a los proveedores de servicios para un tipo de servicio en particular. Este enfoque proporciona el esquema más simple para el equilibrio de carga. • Un algoritmo aleatorio-proporcional que asigna proporcionalmente los procesos comerciales a los proveedores de servicios; es decir, para un tipo de servicio dado, los proveedores de servicios se clasifican según su tiempo de finalización garantizado, y los procesos comerciales se asignan proporcionalmente a los proveedores en función de su tiempo de finalización. (También probamos un esquema de proporcionalidad basado tanto en los tiempos de finalización como en la concurrencia máxima, pero obtuvimos los mismos resultados, por lo que solo se muestran los resultados de los esquemas anteriores aquí.) • Un algoritmo codicioso de hombre de paja que siempre asigna los procesos comerciales al proveedor de servicios que tiene el tiempo de finalización garantizado más rápido. Este algoritmo representa un enfoque ingenuo basado en observaciones avaras y locales de cada flujo de trabajo sin tener en cuenta todos los flujos de trabajo. En los experimentos que siguen, todos los resultados fueron promediados a lo largo de 20 pruebas, y para ayudar a normalizar los efectos de la aleatorización utilizada durante el AG, cada prueba comenzó leyendo datos preinicializados desde el disco. En la Tabla 1 enumeramos nuestros parámetros experimentales. En la Figura 3 mostramos los resultados de ejecutar nuestro AG contra las tres alternativas candidatas. El eje x muestra el número de flujos de trabajo escalado a 1000, y el eje y muestra el valor comercial agregado de todos los flujos de trabajo. Como se puede ver, el algoritmo genético produce consistentemente el mayor valor comercial incluso a medida que aumenta el número de flujos de trabajo; con 1000 flujos de trabajo, el algoritmo genético produce una mejora del 115% sobre la siguiente mejor alternativa. (Tenga en cuenta que aunque estamos optimizando en función de la métrica de valor comercial que definimos anteriormente, los algoritmos genéticos pueden converger hacia el valor óptimo de cualquier métrica, siempre y cuando la función de evaluación pueda medir de manera consistente el valor de un cromosoma con esa métrica). Como era de esperar, el algoritmo codicioso tiene un rendimiento muy pobre porque hace el peor trabajo en equilibrar la carga: todos los procesos comerciales de un tipo de servicio dado se asignan a un solo servidor (el que se anuncia como el que tiene el tiempo de finalización más rápido), y a medida que llegan más procesos comerciales, el rendimiento de los proveedores se degrada linealmente. El esquema de round-robin es inicialmente superado por el esquema proporcional aleatorio hasta alrededor de 120 flujos de trabajo (como se muestra en el gráfico ampliado de la Figura 4), pero a medida que aumenta el número de flujos de trabajo, el esquema de round-robin gana consistentemente sobre el proporcional aleatorio. La razón es que aunque el esquema aleatorio-proporcional asigna procesos comerciales a proveedores proporcionalmente según los tiempos de finalización anunciados (que es una medida del poder del proveedor de servicios), incluso los mejores proveedores eventualmente alcanzarán una concurrencia máxima del mundo real para la gran cantidad de flujos de trabajo que estamos considerando. Para un número muy grande de flujos de trabajo, el esquema de round-robin es capaz de equilibrar mejor la carga entre todos los proveedores de servicios. Para comprender mejor el comportamiento resultante de las asignaciones de programación, mostramos los resultados de finalización del flujo de trabajo en las Figuras 5, 6 y 7 para 100, 500 y 900 flujos de trabajo, respectivamente. Estas cifras muestran el porcentaje de flujos de trabajo que son exitosos (pueden completarse dentro de su límite de QoS), aceptables (pueden completarse dentro de κ=3 veces su límite de QoS) y fallidos (no pueden completarse dentro de κ=3 veces su límite de QoS). El GA produce consistentemente el mayor porcentaje de flujos de trabajo exitosos (lo que resulta en valores comerciales más altos para el conjunto agregado de flujos de trabajo). Además, el esquema de round-robin produce mejores resultados que el proporcional-aleatorio para un gran número de flujos de trabajo, pero no tiene un rendimiento tan bueno como el algoritmo genético. En la Figura 8 graficamos el makespan resultante de los mismos experimentos anteriores. Makespan es una métrica tradicional de la comunidad de programación de trabajos que mide el tiempo transcurrido para que se complete el último trabajo. Aunque útil, no captura la métrica de valor empresarial de alto nivel contra la que estamos optimizando. De hecho, el makespan no tiene en cuenta el hecho de que proporcionamos múltiples niveles de finalización (exitoso, aceptable y fallido) y asignamos puntajes de valor comercial en consecuencia. Para completar, señalamos que el algoritmo genético proporciona el makespan más rápido, pero es igualado por el algoritmo de round robin. El algoritmo genético produce mejores valores comerciales (como se muestra en la Figura 3) porque es capaz de explorar el espacio de soluciones para encontrar mejores asignaciones que generen flujos de trabajo más exitosos (como se muestra en las Figuras 5 a 7). También analizamos el efecto de los algoritmos de programación en el equilibrio de la carga. La Figura 9 muestra el porcentaje de proveedores de servicios que fueron accedidos mientras se ejecutaban los flujos de trabajo. Como era de esperar, el algoritmo codicioso siempre elige a un proveedor de servicios; por otro lado, el algoritmo de round-robin es el más rápido para distribuir el negocio. 33 Parámetro experimental Comentario Flujos de trabajo 5 a 1000 Procesos de negocio por flujo de trabajo aleatorio uniforme: 1 - 10 Tipos de servicio 10 Proveedores de servicios por tipo de servicio aleatorio uniforme: 1 - 10 Objetivo de QoS del flujo de trabajo aleatorio uniforme: 10-30 segundos Tiempo de finalización del proveedor de servicios (α) aleatorio uniforme: 1 - 12 segundos Máxima concurrencia del proveedor de servicios (β) aleatorio uniforme: 1 - 12 Coeficiente de degradación del proveedor de servicios (γ) aleatorio uniforme: 0.1 - 0.9 Valor de negocio para flujos de trabajo exitosos aleatorio uniforme: 10 - 50 puntos Valor de negocio para flujos de trabajo aceptables aleatorio uniforme: 0 - 10 puntos Valor de negocio para flujos de trabajo fallidos aleatorio uniforme: -10 - 0 puntos GA: número de padres 20 GA: número de hijos 80 GA: número de generaciones 1000 Tabla 1: Parámetros experimentales Fallido Aceptable (completado pero no dentro de QoS) Exitoso (completado dentro de QoS) 0% 20% 40% 60% 80% 100% RoundRobinRandProportionalGreedyGeneticAlg Porcentaje de todos los flujos de trabajo Comportamiento del flujo de trabajo, 100 flujos de trabajo Figura 5: Comportamiento del flujo de trabajo para 100 flujos de trabajo. Fracaso Aceptable (completado pero no dentro de QoS) Exitoso (completado dentro de QoS) 0% 20% 40% 60% 80% 100% RoundRobinRandProportionalGreedyGeneticAlg Porcentaje de todos los flujos de trabajo Comportamiento del flujo de trabajo, 500 flujos de trabajo Figura 6: Comportamiento del flujo de trabajo para 500 flujos de trabajo. Fracaso Aceptable (completado pero no dentro de QoS) Exitoso (completado dentro de QoS) 0% 20% 40% 60% 80% 100% RoundRobinRandProportionalGreedyGeneticAlg Porcentaje de todos los flujos de trabajo Comportamiento del flujo de trabajo, 500 flujos de trabajo Figura 7: Comportamiento del flujo de trabajo para 900 flujos de trabajo. 0 50 100 150 200 250 300 0 200 400 600 800 1000 Tiempo total [segundos] Número de flujos de trabajo Tiempo máximo de finalización para todos los flujos de trabajo Algoritmo genético Round robin Proporcional aleatorio Codicioso Figura 8: Tiempo máximo de finalización para todos los flujos de trabajo. Este valor es la métrica makespan utilizada en la investigación de programación tradicional. Aunque útil, el makespan no tiene en cuenta la puntuación del valor comercial en nuestro dominio de problemas. La Figura 10 muestra el porcentaje de proveedores de servicios accedidos (es decir, el porcentaje de proveedores de servicios representados en la Figura 9) que tenían más procesos comerciales asignados que su concurrencia máxima anunciada. Por ejemplo, en el algoritmo voraz solo se utiliza un proveedor de servicios, y este proveedor se satura rápidamente. Por otro lado, el algoritmo aleatorio-proporcional utiliza muchos proveedores de servicios, pero debido a que los procesos comerciales se asignan de manera proporcional con más asignaciones yendo a los mejores proveedores, hay una tendencia a que un menor porcentaje de proveedores se saturen. Para completitud, mostramos el rendimiento del algoritmo genético en sí mismo en la Figura 11. El algoritmo escala linealmente con un aumento en el número de flujos de trabajo. Observamos que los algoritmos round-robin, random-proportional y greedy terminaron en menos de 1 segundo incluso para la configuración de flujo de trabajo más grande. Sin embargo, consideramos que el beneficio de encontrar puntajes de valor empresarial mucho más altos justifica el tiempo de ejecución del algoritmo genético; además, esperaríamos que el tiempo de ejecución mejore tanto con la optimización del software como con un ordenador más rápido que nuestro PC estándar. CONCLUSIÓN Los procesos comerciales dentro de los flujos de trabajo pueden ser orquestados para acceder a servicios web. En este artículo estudiamos la provisión de servicios de múltiples niveles, donde las solicitudes de servicios web a tipos de servicios pueden ser asignadas a diferentes proveedores de servicios. El problema resultante es que para poder soportar un gran número de flujos de trabajo, la asignación de procesos de negocio a proveedores de servicios web debe ser inteligente. Utilizamos una métrica de valor empresarial para medir el 0.2 0.4 0.6 0.8 1 0 200 400 600 800 1000 Porcentaje de todos los proveedores de servicios Número de flujos de trabajo Proveedores de servicios utilizados Algoritmo genético Round robin Proporcional aleatorio Ávido Figura 9: El porcentaje de proveedores de servicios utilizados durante las ejecuciones de carga de trabajo. El algoritmo Greedy siempre elige al mismo proveedor de servicios, mientras que el algoritmo Round Robin distribuye las solicitudes de manera uniforme entre los proveedores. 0 0.2 0.4 0.6 0.8 1 0 200 400 600 800 1000 Porcentaje de todos los proveedores de servicios Número de flujos de trabajo Proveedores saturados Algoritmo genético Round robin Proporcional aleatorio Greedy Figura 10: El porcentaje de proveedores de servicios que están saturados entre aquellos proveedores que fueron utilizados (es decir, el porcentaje de proveedores de servicios representados en la Figura 9). Un proveedor de servicios saturado es aquel cuya carga de trabajo es mayor que su concurrencia máxima anunciada. Dado que el espacio de soluciones de los mapeos de programación es exponencial, utilizamos un algoritmo de búsqueda genética para explorar el espacio y converger hacia el mejor horario. Con una configuración predeterminada para todos los parámetros y utilizando nuestra puntuación de valor empresarial, el GA produjo hasta un 115% de mejora en el valor empresarial sobre el siguiente mejor algoritmo. Finalmente, debido a que un algoritmo genético convergerá hacia el valor óptimo utilizando cualquier métrica (incluso diferente a la métrica de valor empresarial que utilizamos), creemos que nuestro enfoque tiene un fuerte potencial para trabajos futuros. En trabajos futuros, buscamos adquirir trazas del mundo real de instancias de servicios web para obtener mejores estimaciones de las garantías de acuerdo de servicio, aunque esperamos que tales garantías entre los proveedores y sus consumidores no estén generalmente disponibles para el público. También analizaremos otras métricas de calidad de servicio (QoS) como el uso de CPU y E/S. Por ejemplo, podemos analizar los costos de transferencia con diferentes anchos de banda, latencia, tamaño de datos y distribución de datos. Además, esperamos mejorar nuestro algoritmo genético y compararlo con más alternativas de programación. Finalmente, dado que nuestro trabajo es complementario al trabajo existente en coreografía de servicios web (porque dependemos de flujos de trabajo preconfigurados), buscamos integrar nuestro enfoque con los sistemas de flujo de trabajo de servicios web disponibles expresados en BPEL. 6. REFERENCIAS [1] A. Ankolekar, et al. DAML-S: Marcado Semántico para Servicios Web, En Proc. del Simposio Internacional de Trabajo de la Web Semántica, 2001. [2] L. Davis. Programación de taller con algoritmos genéticos, En Proc. de la Conferencia Internacional sobre Algoritmos Genéticos, 1985. [3] H.-L. Fang, P. Ross y D. Corne. Un Enfoque Prometedor de Algoritmo Genético para Problemas de Programación de Taller de Trabajo, Re-programación y Programación de Taller Abierto, En Actas de la 5ta Conferencia Internacional sobre Algoritmos Genéticos, 1993. [4] M. Gary y D. Johnson. Computadoras e Intractabilidad: Una Guía de la Teoría de NP-Completitud, Freeman, 1979. [5] J. Holland. Adaptación en Sistemas Naturales y Artificiales: Un Análisis Introductorio con Aplicaciones a la Biología, Control e Inteligencia Artificial, MIT Press, 1992. [6] D. Goldberg. Algoritmos Genéticos en Búsqueda, Optimización y Aprendizaje Automático, Kluwer Academic Publishers, 1989. [7] Procesos de Negocio en un Mundo de Servicios Web, www-128.ibm.com/developerworks/webservices/library/ws-bpelwp/. [8] G. Soundararajan, K. Manassiev, J. Chen, A. Goel y C. Amza. Bases de datos de back-end en clústeres de servidores de contenido dinámico compartido, En Proc. de la Conferencia Internacional de Computación Autónoma de IEEE, 2005. [9] B. Srivastava y J. Koehler. Composición de Servicios Web: Soluciones Actuales y Problemas Abiertos, ICAP, 2003. [10] B. Urgaonkar, P. Shenoy, A. Chandra y P. Goyal. Provisión dinámica de aplicaciones de Internet de múltiples niveles, En Proc. de la Conferencia Internacional de IEEE sobre Computación Autónoma, 2005. [11] L. Zeng, B. Benatallah, M. Dumas, J. Kalagnanam y Q. Sheng. Composición de Servicios Web Impulsada por la Calidad, En Proc. de la Conferencia WWW, 2003. 35 ",
            "candidates": [],
            "error": [
                [
                    ""
                ]
            ]
        },
        "scheduling agent": {
            "translated_key": "agente de programación",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Heuristics-Based Scheduling of Composite Web Service Workloads Thomas Phan Wen-Syan Li IBM Almaden Research Center 650 Harry Rd.",
                "San Jose, CA 95120 {phantom,wsl}@us.ibm.com ABSTRACT Web services can be aggregated to create composite workflows that provide streamlined functionality for human users or other systems.",
                "Although industry standards and recent research have sought to define best practices and to improve end-to-end workflow composition, one area that has not fully been explored is the scheduling of a workflows web service requests to actual service provisioning in a multi-tiered, multi-organisation environment.",
                "This issue is relevant to modern business scenarios where business processes within a workflow must complete within QoS-defined limits.",
                "Because these business processes are web service consumers, service requests must be mapped and scheduled across multiple web service providers, each with its own negotiated service level agreement.",
                "In this paper we provide heuristics for scheduling service requests from multiple business process workflows to web service providers such that a business value metric across all workflows is maximised.",
                "We show that a genetic search algorithm is appropriate to perform this scheduling, and through experimentation we show that our algorithm scales well up to a thousand workflows and produces better mappings than traditional approaches.",
                "Categories and Subject Descriptors C.2.4 [Computer-Communication Networks]: Distributed Systems-distributed applications; D.2.8 [Software Engineering]: Metrics-complexity measures, performance measures 1.",
                "INTRODUCTION Web services can be composed into workflows to provide streamlined end-to-end functionality for human users or other systems.",
                "Although previous research efforts have looked at ways to intelligently automate the composition of web services into workflows (e.g. [1, 9]), an important remaining problem is the assignment of web service requests to the underlying web service providers in a multi-tiered runtime scenario within constraints.",
                "In this paper we address this scheduling problem and examine means to manage a large number of business process workflows in a scalable manner.",
                "The problem of scheduling web service requests to providers is relevant to modern business domains that depend on multi-tiered service provisioning.",
                "Consider the example shown in Figure 1 that illustrates our problem space.",
                "Workflows comprise multiple related business processes that are web service consumers; here we assume that the workflows represent requested service from customers or automated systems and that the workflow has already been composed with an existing choreography toolkit.",
                "These workflows are then submitted to a portal (not shown) that acts as a <br>scheduling agent</br> between the web service consumers and the web service providers.",
                "In this example, a workflow could represent the actions needed to instantiate a vacation itinerary, where one business process requests booking an airline ticket, another business process requests a hotel room, and so forth.",
                "Each of these requests target a particular service type (e.g. airline reservations, hotel reservations, car reservations, etc. ), and for each service type, there are multiple instances of service providers that publish a web service interface.",
                "An important challenge is that the workflows must meet some quality-of-service (QoS) metric, such as end-to-end completion time of all its business processes, and that meeting or failing this goal results in the assignment of a quantitative business value metric for the workflow; intuitively, it is desired that all workflows meet their respective QoS goals.",
                "We further leverage the notion that QoS service agreements are generally agreed-upon between the web service providers and the <br>scheduling agent</br> such that the providers advertise some level of guaranteed QoS to the scheduler based upon runtime conditions such as turnaround time and maximum available concurrency.",
                "The resulting problem is then to schedule and assign the business processes requests for service types to one of the service providers for that type.",
                "The scheduling must be done such that the aggregate business value across all the workflows is maximised.",
                "In Section 3 we state the scenario as a combinatorial problem and utilise a genetic search algorithm [5] to find the best assignment of web service requests to providers.",
                "This approach converges towards an assignment that maximises the overall business value for all the workflows.",
                "In Section 4 we show through experimentation that this search heuristic finds better assignments than other algorithms (greedy, round-robin, and proportional).",
                "Further, this approach allows us to scale the number of simultaneous workflows (up to one thousand workflows in our experiments) and yet still find effective schedules. 2.",
                "RELATED WORK In the context of service assignment and scheduling, [11] maps web service calls to potential servers using linear programming, but their work is concerned with mapping only single workflows; our principal focus is on scalably scheduling multiple workflows (up 30 Service Type SuperHotels.com Business Process Business Process Workflow ... Business Process Business Process ... HostileHostels.com IncredibleInns.com Business Process Business Process Business Process ... Business Process Service Provider SkyHighAirlines.com SuperCrazyFlights.com Business Process . . . . . .",
                "Advertised QoS Service Agreement CarRentalService.com Figure 1: An example scenario demonstrating the interaction between business processes in workflows and web service providers.",
                "Each business process accesses a service type and is then mapped to a service provider for that type. to one thousand as we show later) using different business metrics and a search heuristic. [10] presents a dynamic provisioning approach that uses both predictive and reactive techniques for multi-tiered Internet application delivery.",
                "However, the provisioning techniques do not consider the challenges faced when there are alternative query execution plans and replicated data sources. [8] presents a feedback-based scheduling mechanism for multi-tiered systems with back-end databases, but unlike our work, it assumes a tighter coupling between the various components of the system.",
                "Our work also builds upon prior scheduling research.",
                "The classic job-shop scheduling problem, shown to be NP-complete [4] [3], is similar to ours in that tasks within a job must be scheduled onto machinery (c.f. our scenario is that business processes within a workflow must be scheduled onto web service providers).",
                "The salient differences are that the machines can process only one job at a time (we assume servers can multi-task but with degraded performance and a maximum concurrency level), tasks within a job cannot simultaneously run on different machines (we assume business processes can be assigned to any available server), and the principal metric of performance is the makespan, which is the time for the last task among all the jobs to complete (and as we show later, optimising on the makespan is insufficient for scheduling the business processes, necessitating different metrics). 3.",
                "DESIGN In this section we describe our model and discuss how we can find scheduling assignments using a genetic search algorithm. 3.1 Model We base our model on the simplified scenario shown in Figure 1.",
                "Specifically, we assume that users or automated systems request the execution of a workflow.",
                "The workflows comprise business processes, each of which makes one web service invocation to a service type.",
                "Further, business processes have an ordering in the workflow.",
                "The arrangement and execution of the business processes and the data flow between them are all managed by a composition or choreography tool (e.g. [1, 9]).",
                "Although composition languages can use sophisticated flow-control mechanisms such as conditional branches, for simplicity we assume the processes execute sequentially in a given order.",
                "This scenario can be naturally extended to more complex relationships that can be expressed in BPEL [7], which defines how business processes interact, messages are exchanged, activities are ordered, and exceptions are handled.",
                "Due to space constraints, we focus on the problem space presented here and will extend our model to more advanced deployment scenarios in the future.",
                "Each workflow has a QoS requirement to complete within a specified number of time units (e.g. on the order of seconds, as detailed in the Experiments section).",
                "Upon completion (or failure), the workflow is assigned a business value.",
                "We extended this approach further and considered different types of workflow completion in order to model differentiated QoS levels that can be applied by businesses (for example, to provide tiered customer service).",
                "We say that a workflow is successful if it completes within its QoS requirement, acceptable if it completes within a constant factor κ 31 of its QoS bound (in our experiments we chose κ=3), or failing if it finishes beyond κ times its QoS bound.",
                "For each category, a business value score is assigned to the workflow, with the successful category assigned the highest positive score, followed by acceptable and then failing.",
                "The business value point distribution is non-uniform across workflows, further modelling cases where some workflows are of higher priority than others.",
                "Each service type is implemented by a number of different service providers.",
                "We assume that the providers make service level agreements (SLAs) to guarantee a level of performance defined by the completion time for completing a web service invocation.",
                "Although SLAs can be complex, in this paper we assume for simplicity that the guarantees can take the form of a linear performance degradation under load.",
                "This guarantee is defined by several parameters: α is the expected completion time (for example, on the order of seconds) if the assigned workload of web service requests is less than or equal to β, the maximum concurrency, and if the workload is higher than β, the expected completion for a workload of size ω is α+ γ(ω − β) where γ is a fractional coefficient.",
                "In our experiments we vary α, β, and γ with different distributions.",
                "Ideally, all workflows would be able to finish within their QoS limits and thus maximise the aggregate business value across all workflows.",
                "However, because we model service providers with degrading performance under load, not all workflows will achieve their QoS limit: it may easily be the case that business processes are assigned to providers who are overloaded and cannot complete within the respective workflows QoS limit.",
                "The key research problem, then, is to assign the business processes to the web service providers with the goal of optimising on the aggregate business value of all workflows.",
                "Given that the scope of the optimisation is the entire set of workflows, it may be that the best scheduling assignments may result in some workflows having to fail in order for more workflows to succeed.",
                "This intuitive observation suggests that traditional scheduling approaches such as round-robin or proportional assignments will not fare well, which is what we observe and discuss in Section 4.",
                "On the other hand, an exhaustive search of all the possible assignments will find the best schedule, but the computational complexity is prohibitively high.",
                "Suppose there are W workflows with an average of B business processes per workflow.",
                "Further, in the worst case each business process requests one service type, for which there are P providers.",
                "There are thus W · PB combinations to explore to find the optimal assignments of business processes to providers.",
                "Even for small configurations (e.g.",
                "W =10, B=5, P=10), the computational time for exhaustive search is significant, and in our work we look to scale these parameters.",
                "In the next subsection, discuss how a genetic search algorithm can be used to converge toward the optimum scheduling assignments. 3.2 Genetic algorithm Given an exponential search space of business process assignments to web service providers, the problem is to find the optimal assignment that produces the overall highest aggregate business value across all workflows.",
                "To explore the solution space, we use a genetic algorithm (GA) search heuristic that simulates Darwinian natural selection by having members of a population compete to survive in order to pass their genetic chromosomes onto the next generation; after successive generations, there is a tendency for the chromosomes to converge toward the best combination [5] [6].",
                "Although other search heuristics exist that can solve optimization problems (e.g. simulated annealing or steepest-ascent hillclimbing), the business process scheduling problem fits well with a GA because potential solutions can be represented in a matrix form and allows us to use prior research in effective GA chromosome recombination to form new members of the population (e.g. [2]). 0 1 2 3 4 0 1 2 0 2 1 1 0 1 0 1 0 2 1 2 0 0 1 Figure 2: An example chromosome representing a scheduling assignment of (workflow,service type) → service provider.",
                "Each row represents a workflow, and each column represents a service type.",
                "For example, here there are 3 workflows (0 to 2) and 5 service types (0 to 4).",
                "In workflow 0, any request for service type 3 goes to provider 2.",
                "Note that the service provider identifier is within a range limited to its service type (i.e. its column), so the 2 listed for service type 3 is a different server from server 2 in other columns.",
                "Chromosome representation of a solution.",
                "In Figure 2 we show an example chromosome that encodes one scheduling assignment.",
                "The representation is a 2-dimensional matrix that maps {workflow, service type} to a service provider.",
                "For a business process in workflow i and utilising service type j, the (i, j)th entry in the table is the identifier for the service provider to which the business process is assigned.",
                "Note that the service provider identifier is within a range limited to its service type.",
                "GA execution.",
                "A GA proceeds as follows.",
                "Initially a random set of chromosomes is created for the population.",
                "The chromosomes are evaluated (hashed) to some metric, and the best ones are chosen to be parents.",
                "In our problem, the evaluation produces the net business value across all workflows after executing all business processes once they are assigned to their respective service providers according to the mapping in the chromosome.",
                "The parents recombine to produce children, simulating sexual crossover, and occasionally a mutation may arise which produces new characteristics that were not available in either parent.",
                "The principal idea is that we would like the children to be different from the parents (in order to explore more of the solution space) yet not too different (in order to contain the portions of the chromosome that result in good scheduling assignments).",
                "Note that finding the global optimum is not guaranteed because the recombination and mutation are stochastic.",
                "GA recombination and mutation.",
                "As mentioned, the chromosomes are 2-dimensional matrices that represent scheduling assignments.",
                "To simulate sexual recombination of two chromosomes to produce a new child chromosome, we applied a one-point crossover scheme twice (once along each dimension).",
                "The crossover is best explained by analogy to Cartesian space as follows.",
                "A random point is chosen in the matrix to be coordinate (0, 0).",
                "Matrix elements from quadrants II and IV from the first parent and elements from quadrants I and III from the second parent are used to create the new child.",
                "This approach follows GA best practices by keeping contiguous chromosome segments together as they are transmitted from parent to child.",
                "The uni-chromosome mutation scheme randomly changes one of the service provider assignments to another provider within the available range.",
                "Other recombination and mutation schemes are an area of research in the GA community, and we look to explore new operators in future work.",
                "GA evaluation function.",
                "An important GA component is the evaluation function.",
                "Given a particular chromosome representing one scheduling mapping, the function deterministically calculates the net business value across all workloads.",
                "The business processes in each workload are assigned to service providers, and each providers completion time is calculated based on the service agreement guarantee using the parameters mentioned in Section 3.1, namely the unloaded completion time α, the maximum concur32 rency β, and a coefficient γ that controls the linear performance degradation under heavy load.",
                "Note that the evaluation function can be easily replaced if desired; for example, other evaluation functions can model different service provider guarantees or parallel workflows. 4.",
                "EXPERIMENTS AND RESULTS In this section we show the benefit of using our GA-based scheduler.",
                "Because we wanted to scale the scenarios up to a large number of workflows (up to 1000 in our experiments), we implemented a simulation program that allowed us to vary parameters and to measure the results with different metrics.",
                "The simulator was written in standard C++ and was run on a Linux (Fedora Core) desktop computer running at 2.8 GHz with 1GB of RAM.",
                "We compared our algorithm against alternative candidates: • A well-known round-robin algorithm that assigns each business process in circular fashion to the service providers for a particular service type.",
                "This approach provides the simplest scheme for load-balancing. • A random-proportional algorithm that proportionally assigns business processes to the service providers; that is, for a given service type, the service providers are ranked by their guaranteed completion time, and business processes are assigned proportionally to the providers based on their completion time. (We also tried a proportionality scheme based on both the completion times and maximum concurrency but attained the same results, so only the former schemes results are shown here.) • A strawman greedy algorithm that always assigns business processes to the service provider that has the fastest guaranteed completion time.",
                "This algorithm represents a naive approach based on greedy, local observations of each workflow without taking into consideration all workflows.",
                "In the experiments that follow, all results were averaged across 20 trials, and to help normalise the effects of randomisation used during the GA, each trial started by reading in pre-initialised data from disk.",
                "In Table 1 we list our experimental parameters.",
                "In Figure 3 we show the results of running our GA against the three candidate alternatives.",
                "The x-axis shows the number for workflows scaled up to 1000, and the y-axis shows the aggregate business value for all workflows.",
                "As can be seen, the GA consistently produces the highest business value even as the number of workflows grows; at 1000 workflows, the GA produces a 115% improvement over the next-best alternative. (Note that although we are optimising against the business value metric we defined earlier, genetic algorithms are able to converge towards the optimal value of any metric, as long as the evaluation function can consistently measure a chromosomes value with that metric.)",
                "As expected, the greedy algorithm performs very poorly because it does the worst job at balancing load: all business processes for a given service type are assigned to only one server (the one advertised to have the fastest completion time), and as more business processes arrive, the providers performance degrades linearly.",
                "The round-robin scheme is initially outperformed by the randomproportional scheme up to around 120 workflows (as shown in the magnified graph of Figure 4), but as the number of workflows increases, the round-robin scheme consistently wins over randomproportional.",
                "The reason is that although the random-proportional scheme assigns business processes to providers proportionally according to the advertised completion times (which is a measure of the power of the service provider), even the best providers will eventually reach a real-world maximum concurrency for the large -2000 -1000 0 1000 2000 3000 4000 5000 6000 7000 0 200 400 600 800 1000 Aggregatebusinessvalueacrossallworkflows Total number of workflows Business value scores of scheduling algorithms Genetic algorithm Round robin Random proportional Greedy Figure 3: Net business value scores of different scheduling algorithms. -500 0 500 1000 1500 2000 2500 3000 3500 4000 0 50 100 150 200Aggregatebusinessvalueacrossallworkflows Total number of workflows Business value scores of scheduling algorithms Genetic algorithm Round robin Random proportional Greedy Figure 4: Magnification of the left-most region in Figure 3. number of workflows that we are considering.",
                "For a very large number of workflows, the round-robin scheme is able to better balance the load across all service providers.",
                "To better understand the behaviour resulting from the scheduling assignments, we show the workflow completion results in Figures 5, 6, and 7 for 100, 500, and 900 workflows, respectively.",
                "These figures show the percentage of workflows that are successful (can complete with their QoS limit), acceptable (can complete within κ=3 times their QoS limit), and failed (cannot complete within κ=3 times their QoS limit).",
                "The GA consistently produces the highest percentage of successful workflows (resulting in higher business values for the aggregate set of workflows).",
                "Further, the round-robin scheme produces better results than the random-proportional for a large number of workflows but does not perform as well as the GA.",
                "In Figure 8 we graph the makespan resulting from the same experiments above.",
                "Makespan is a traditional metric from the job scheduling community measuring elapsed time for the last job to complete.",
                "While useful, it does not capture the high-level business value metric that we are optimising against.",
                "Indeed, the makespan is oblivious to the fact that we provide multiple levels of completion (successful, acceptable, and failed) and assign business value scores accordingly.",
                "For completeness, we note that the GA provides the fastest makespan, but it is matched by the round robin algorithm.",
                "The GA produces better business values (as shown in Figure 3) because it is able to search the solution space to find better mappings that produce more successful workflows (as shown in Figures 5 to 7).",
                "We also looked at the effect of the scheduling algorithms on balancing the load.",
                "Figure 9 shows the percentage of services providers that were accessed while the workflows ran.",
                "As expected, the greedy algorithm always hits one service provider; on the other hand, the round-robin algorithm is the fastest to spread the business 33 Experimental parameter Comment Workflows 5 to 1000 Business processes per workflow uniform random: 1 - 10 Service types 10 Service providers per service type uniform random: 1 - 10 Workflow QoS goal uniform random: 10-30 seconds Service provider completion time (α) uniform random: 1 - 12 seconds Service provider maximum concurrency (β) uniform random: 1 - 12 Service provider degradation coefficient (γ) uniform random: 0.1 - 0.9 Business value for successful workflows uniform random: 10 - 50 points Business value for acceptable workflows uniform random: 0 - 10 points Business value for failed workflows uniform random: -10 - 0 points GA: number of parents 20 GA: number of children 80 GA: number of generations 1000 Table 1: Experimental parameters Failed Acceptable (completed but not within QoS) Successful (completed within QoS) 0% 20% 40% 60% 80% 100% RoundRobinRandProportionalGreedyGeneticAlg Percentageofallworkflows Workflow behaviour, 100 workflows Figure 5: Workflow behaviour for 100 workflows.",
                "Failed Acceptable (completed but not within QoS) Successful (completed within QoS) 0% 20% 40% 60% 80% 100% RoundRobinRandProportionalGreedyGeneticAlg Percentageofallworkflows Workflow behaviour, 500 workflows Figure 6: Workflow behaviour for 500 workflows.",
                "Failed Acceptable (completed but not within QoS) Successful (completed within QoS) 0% 20% 40% 60% 80% 100% RoundRobinRandProportionalGreedyGeneticAlg Percentageofallworkflows Workflow behaviour, 500 workflows Figure 7: Workflow behaviour for 900 workflows. 0 50 100 150 200 250 300 0 200 400 600 800 1000 Makespan[seconds] Number of workflows Maximum completion time for all workflows Genetic algorithm Round robin Random proportional Greedy Figure 8: Maximum completion time for all workflows.",
                "This value is the makespan metric used in traditional scheduling research.",
                "Although useful, the makespan does not take into consideration the business value scoring in our problem domain. processes.",
                "Figure 10 is the percentage of accessed service providers (that is, the percentage of service providers represented in Figure 9) that had more assigned business processes than their advertised maximum concurrency.",
                "For example, in the greedy algorithm only one service provider is utilised, and this one provider quickly becomes saturated.",
                "On the other hand, the random-proportional algorithm uses many service providers, but because business processes are proportionally assigned with more assignments going to the better providers, there is a tendency for a smaller percentage of providers to become saturated.",
                "For completeness, we show the performance of the genetic algorithm itself in Figure 11.",
                "The algorithm scales linearly with an increasing number of workflows.",
                "We note that the round-robin, random-proportional, and greedy algorithms all finished within 1 second even for the largest workflow configuration.",
                "However, we feel that the benefit of finding much higher business value scores justifies the running time of the GA; further we would expect that the running time will improve with both software tuning as well as with a computer faster than our off-the-shelf PC. 5.",
                "CONCLUSION Business processes within workflows can be orchestrated to access web services.",
                "In this paper we looked at multi-tiered service provisioning where web service requests to service types can be mapped to different service providers.",
                "The resulting problem is that in order to support a very large number of workflows, the assignment of business process to web service provider must be intelligent.",
                "We used a business value metric to measure the be34 0 0.2 0.4 0.6 0.8 1 0 200 400 600 800 1000 Percentageofallserviceproviders Number of workflows Service providers utilised Genetic algorithm Round robin Random proportional Greedy Figure 9: The percentage of service providers utilized during workload executions.",
                "The Greedy algorithm always hits the one service provider, while the Round Robin algorithm spreads requests evenly across the providers. 0 0.2 0.4 0.6 0.8 1 0 200 400 600 800 1000 Percentageofallserviceproviders Number of workflows Service providers saturated Genetic algorithm Round robin Random proportional Greedy Figure 10: The percentage of service providers that are saturated among those providers who were utilized (that is, percentage of the service providers represented in Figure 9).",
                "A saturated service provider is one whose workload is greater that its advertised maximum concurrency. 0 5 10 15 20 25 0 200 400 600 800 1000 Runningtimeinseconds Total number of workflows Running time of genetic algorithm GA running time Figure 11: Running time of the genetic algorithm. haviour of workflows meeting or failing QoS values, and we optimised our scheduling to maximise the aggregate business value across all workflows.",
                "Since the solution space of scheduler mappings is exponential, we used a genetic search algorithm to search the space and converge toward the best schedule.",
                "With a default configuration for all parameters and using our business value scoring, the GA produced up to 115% business value improvement over the next best algorithm.",
                "Finally, because a genetic algorithm will converge towards the optimal value using any metric (even other than the business value metric we used), we believe our approach has strong potential for continuing work.",
                "In future work, we look to acquire real-world traces of web service instances in order to get better estimates of service agreement guarantees, although we expect that such guarantees between the providers and their consumers are not generally available to the public.",
                "We will also look at other QoS metrics such as CPU and I/O usage.",
                "For example, we can analyse transfer costs with varying bandwidth, latency, data size, and data distribution.",
                "Further, we hope to improve our genetic algorithm and compare it to more scheduler alternatives.",
                "Finally, since our work is complementary to existing work in web services choreography (because we rely on pre-configured workflows), we look to integrate our approach with available web service workflow systems expressed in BPEL. 6.",
                "REFERENCES [1] A. Ankolekar, et al.",
                "DAML-S: Semantic Markup For Web Services, In Proc. of the Intl Semantic Web Working Symposium, 2001. [2] L. Davis.",
                "Job Shop Scheduling with Genetic Algorithms, In Proc. of the Intl Conference on Genetic Algorithms, 1985. [3] H.-L. Fang, P. Ross, and D. Corne.",
                "A Promising Genetic Algorithm Approach to Job-Shop Scheduling, Rescheduling, and Open-Shop Scheduling Problems , In Proc. on the 5th Intl Conference on Genetic Algorithms, 1993. [4] M. Gary and D. Johnson.",
                "Computers and Intractability: A Guide to the Theory of NP-Completeness, Freeman, 1979. [5] J. Holland.",
                "Adaptation in Natural and Artificial Systems: An Introductory Analysis with Applications to Biology, Control, and Artificial Intelligence, MIT Press, 1992. [6] D. Goldberg.",
                "Genetic Algorithms in Search, Optimization and Machine Learning, Kluwer Academic Publishers, 1989. [7] Business Processes in a Web Services World, www-128.ibm.com/developerworks/ webservices/library/ws-bpelwp/. [8] G. Soundararajan, K. Manassiev, J. Chen, A. Goel, and C. Amza.",
                "Back-end Databases in Shared Dynamic Content Server Clusters, In Proc. of the IEEE Intl Conference on Autonomic Computing, 2005. [9] B. Srivastava and J. Koehler.",
                "Web Service Composition Current Solutions and Open Problems, ICAP, 2003. [10] B. Urgaonkar, P. Shenoy, A. Chandra, and P. Goyal.",
                "Dynamic Provisioning of Multi-Tier Internet Applications, In Proc. of the IEEE Intl Conference on Autonomic Computing, 2005. [11] L. Zeng, B. Benatallah, M. Dumas, J. Kalagnanam, and Q. Sheng.",
                "Quality Driven Web Services Composition, In Proc. of the WWW Conference, 2003. 35"
            ],
            "original_annotated_samples": [
                "These workflows are then submitted to a portal (not shown) that acts as a <br>scheduling agent</br> between the web service consumers and the web service providers.",
                "We further leverage the notion that QoS service agreements are generally agreed-upon between the web service providers and the <br>scheduling agent</br> such that the providers advertise some level of guaranteed QoS to the scheduler based upon runtime conditions such as turnaround time and maximum available concurrency."
            ],
            "translated_annotated_samples": [
                "Estos flujos de trabajo son luego enviados a un portal (no mostrado) que actúa como un <br>agente de programación</br> entre los consumidores del servicio web y los proveedores del servicio web.",
                "Además, aprovechamos la idea de que los acuerdos de servicio de QoS suelen ser acordados entre los proveedores de servicios web y el <br>agente de programación</br> de tal manera que los proveedores anuncian un cierto nivel de QoS garantizado al programador en función de condiciones de tiempo de respuesta y concurrencia máxima disponible."
            ],
            "translated_text": "Programación basada en heurísticas de cargas de trabajo de servicios web compuestos Thomas Phan Wen-Syan Li Centro de Investigación IBM Almaden 650 Harry Rd. Los servicios web pueden ser agregados para crear flujos de trabajo compuestos que proporcionen funcionalidad simplificada para usuarios humanos u otros sistemas. Aunque los estándares de la industria y la investigación reciente han buscado definir las mejores prácticas y mejorar la composición del flujo de trabajo de extremo a extremo, un área que no ha sido completamente explorada es la programación de las solicitudes de servicios web de los flujos de trabajo para la provisión real de servicios en un entorno multinivel y multiorganizacional. Este problema es relevante para los escenarios empresariales modernos donde los procesos comerciales dentro de un flujo de trabajo deben completarse dentro de los límites definidos por la calidad de servicio (QoS). Debido a que estos procesos comerciales son consumidores de servicios web, las solicitudes de servicio deben ser mapeadas y programadas entre múltiples proveedores de servicios web, cada uno con su propio acuerdo de nivel de servicio negociado. En este documento proporcionamos heurísticas para programar solicitudes de servicio de múltiples flujos de trabajo de procesos comerciales a proveedores de servicios web de manera que se maximice una métrica de valor comercial en todos los flujos de trabajo. Mostramos que un algoritmo de búsqueda genética es apropiado para realizar esta programación, y a través de experimentación demostramos que nuestro algoritmo escala bien hasta mil flujos de trabajo y produce mejores asignaciones que enfoques tradicionales. Categorías y Descriptores de Asignaturas C.2.4 [Redes de Computadoras-Comunicación]: Sistemas Distribuidos-aplicaciones distribuidas; D.2.8 [Ingeniería de Software]: Métricas-medidas de complejidad, medidas de rendimiento 1. INTRODUCCIÓN Los servicios web pueden ser compuestos en flujos de trabajo para proporcionar funcionalidad integrada de principio a fin para usuarios humanos u otros sistemas. Aunque los esfuerzos de investigación previos han examinado formas de automatizar de manera inteligente la composición de servicios web en flujos de trabajo (por ejemplo, [1, 9]), un problema importante que aún persiste es la asignación de solicitudes de servicios web a los proveedores de servicios web subyacentes en un escenario de tiempo de ejecución multinivel dentro de ciertas restricciones. En este documento abordamos este problema de programación y examinamos medios para gestionar un gran número de flujos de trabajo de procesos comerciales de manera escalable. El problema de programar solicitudes de servicios web a proveedores es relevante para los dominios comerciales modernos que dependen de la provisión de servicios de múltiples niveles. Considera el ejemplo mostrado en la Figura 1 que ilustra nuestro espacio de problemas. Los flujos de trabajo comprenden múltiples procesos comerciales relacionados que son consumidores de servicios web; aquí asumimos que los flujos de trabajo representan servicios solicitados por clientes o sistemas automatizados y que el flujo de trabajo ya ha sido compuesto con una herramienta de coreografía existente. Estos flujos de trabajo son luego enviados a un portal (no mostrado) que actúa como un <br>agente de programación</br> entre los consumidores del servicio web y los proveedores del servicio web. En este ejemplo, un flujo de trabajo podría representar las acciones necesarias para crear un itinerario de vacaciones, donde un proceso empresarial solicita la reserva de un boleto de avión, otro proceso empresarial solicita una habitación de hotel, y así sucesivamente. Cada una de estas solicitudes apunta a un tipo de servicio en particular (por ejemplo, reservas de aerolíneas, reservas de hoteles, reservas de autos, etc.), y para cada tipo de servicio, hay múltiples instancias de proveedores de servicios que publican una interfaz de servicio web. Un desafío importante es que los flujos de trabajo deben cumplir con alguna métrica de calidad de servicio (QoS), como el tiempo de finalización de extremo a extremo de todos sus procesos comerciales, y que cumplir o no con este objetivo resulta en la asignación de una métrica de valor comercial cuantitativo para el flujo de trabajo; intuitivamente, se desea que todos los flujos de trabajo cumplan con sus respectivos objetivos de QoS. Además, aprovechamos la idea de que los acuerdos de servicio de QoS suelen ser acordados entre los proveedores de servicios web y el <br>agente de programación</br> de tal manera que los proveedores anuncian un cierto nivel de QoS garantizado al programador en función de condiciones de tiempo de respuesta y concurrencia máxima disponible. El problema resultante es entonces programar y asignar las solicitudes de procesos comerciales para tipos de servicio a uno de los proveedores de servicios para ese tipo. La programación debe realizarse de tal manera que se maximice el valor comercial agregado en todos los flujos de trabajo. En la Sección 3 planteamos el escenario como un problema combinatorio y utilizamos un algoritmo de búsqueda genética [5] para encontrar la mejor asignación de solicitudes de servicios web a proveedores. Este enfoque converge hacia una asignación que maximiza el valor comercial general para todos los flujos de trabajo. En la Sección 4 mostramos a través de experimentación que esta heurística de búsqueda encuentra asignaciones mejores que otros algoritmos (codicioso, round-robin y proporcional). Además, este enfoque nos permite escalar el número de flujos de trabajo simultáneos (hasta mil flujos de trabajo en nuestros experimentos) y aún así encontrar horarios efectivos. 2. TRABAJO RELACIONADO En el contexto de asignación y programación de servicios, [11] mapea llamadas de servicios web a servidores potenciales utilizando programación lineal, pero su trabajo se centra en mapear solo flujos de trabajo individuales; nuestro enfoque principal está en programar de manera escalable múltiples flujos de trabajo (hasta 30 tipos de servicios SuperHotels.com Proceso de Negocio Proceso de Negocio Flujo de Trabajo ... Proceso de Negocio Proceso de Negocio ... HostileHostels.com IncredibleInns.com Proceso de Negocio Proceso de Negocio Proceso de Negocio ... Proceso de Negocio Proveedor de Servicios SkyHighAirlines.com SuperCrazyFlights.com Proceso de Negocio . . . . . . Acuerdo de Servicio de Calidad de Servicio (QoS) Publicitado CarRentalService.com Figura 1: Un escenario de ejemplo que muestra la interacción entre procesos comerciales en flujos de trabajo y proveedores de servicios web. Cada proceso empresarial accede a un tipo de servicio y luego se asigna a un proveedor de servicios para ese tipo, a uno mil como mostraremos más adelante, utilizando diferentes métricas empresariales y una heurística de búsqueda. [10] presenta un enfoque de aprovisionamiento dinámico que utiliza técnicas predictivas y reactivas para la entrega de aplicaciones de Internet multinivel. Sin embargo, las técnicas de aprovisionamiento no consideran los desafíos enfrentados cuando hay planes alternativos de ejecución de consultas y fuentes de datos replicadas. [8] presenta un mecanismo de programación basado en retroalimentación para sistemas multinivel con bases de datos de back-end, pero a diferencia de nuestro trabajo, asume un acoplamiento más estrecho entre los diversos componentes del sistema. Nuestro trabajo también se basa en investigaciones previas sobre programación. El problema clásico de programación de talleres, demostrado como NP-completo [4] [3], es similar al nuestro en el sentido de que las tareas dentro de un trabajo deben ser programadas en maquinaria (cf. nuestro escenario es que los procesos comerciales dentro de un flujo de trabajo deben ser programados en proveedores de servicios web). Las diferencias más destacadas son que las máquinas solo pueden procesar un trabajo a la vez (asumimos que los servidores pueden realizar múltiples tareas pero con un rendimiento degradado y un nivel máximo de concurrencia), las tareas dentro de un trabajo no pueden ejecutarse simultáneamente en diferentes máquinas (asumimos que los procesos comerciales pueden asignarse a cualquier servidor disponible), y la métrica principal de rendimiento es el makespan, que es el tiempo que tarda la última tarea de todos los trabajos en completarse (y como mostraremos más adelante, optimizar el makespan no es suficiente para programar los procesos comerciales, lo que requiere diferentes métricas). 3. En esta sección describimos nuestro modelo y discutimos cómo podemos encontrar asignaciones de programación utilizando un algoritmo de búsqueda genética. 3.1 Modelo Basamos nuestro modelo en el escenario simplificado mostrado en la Figura 1. Específicamente, asumimos que los usuarios o sistemas automatizados solicitan la ejecución de un flujo de trabajo. Los flujos de trabajo comprenden procesos comerciales, cada uno de los cuales realiza una invocación de servicio web a un tipo de servicio. Además, los procesos comerciales tienen un orden en el flujo de trabajo. La disposición y ejecución de los procesos comerciales y el flujo de datos entre ellos son gestionados por una herramienta de composición o coreografía (por ejemplo, [1, 9]). Aunque los lenguajes de composición pueden utilizar mecanismos sofisticados de control de flujo como ramas condicionales, para simplificar asumimos que los procesos se ejecutan secuencialmente en un orden dado. Este escenario puede ser extendido de forma natural a relaciones más complejas que pueden ser expresadas en BPEL [7], el cual define cómo interactúan los procesos de negocio, se intercambian mensajes, se ordenan actividades y se manejan excepciones. Debido a limitaciones de espacio, nos enfocamos en el espacio de problemas presentado aquí y extenderemos nuestro modelo a escenarios de implementación más avanzados en el futuro. Cada flujo de trabajo tiene un requisito de calidad de servicio (QoS) que debe completarse dentro de un número específico de unidades de tiempo (por ejemplo, del orden de segundos, como se detalla en la sección de Experimentos). Una vez completado (o fallido), se asigna un valor comercial al flujo de trabajo. Extendimos este enfoque aún más y consideramos diferentes tipos de finalización de flujo de trabajo para modelar niveles diferenciados de QoS que pueden ser aplicados por las empresas (por ejemplo, para proporcionar servicios al cliente escalonados). Decimos que un flujo de trabajo es exitoso si se completa dentro de su requisito de QoS, aceptable si se completa dentro de un factor constante κ 31 de su límite de QoS (en nuestros experimentos elegimos κ=3), o fallido si termina más allá de κ veces su límite de QoS. Para cada categoría, se asigna un puntaje de valor comercial al flujo de trabajo, siendo la categoría exitosa la que recibe la puntuación positiva más alta, seguida por la aceptable y luego la fallida. La distribución de puntos de valor empresarial no es uniforme en los flujos de trabajo, lo que modela casos en los que algunos flujos de trabajo tienen mayor prioridad que otros. Cada tipo de servicio es implementado por varios proveedores de servicios diferentes. Suponemos que los proveedores hacen acuerdos de nivel de servicio (SLAs) para garantizar un nivel de rendimiento definido por el tiempo de finalización de una invocación de servicio web. Aunque los Acuerdos de Nivel de Servicio (SLAs) pueden ser complejos, en este documento asumimos, para simplificar, que las garantías pueden adoptar la forma de una degradación lineal del rendimiento bajo carga. Esta garantía está definida por varios parámetros: α es el tiempo de finalización esperado (por ejemplo, del orden de segundos) si la carga de trabajo asignada de las solicitudes de servicio web es menor o igual a β, la concurrencia máxima, y si la carga de trabajo es mayor que β, la finalización esperada para una carga de trabajo de tamaño ω es α + γ(ω − β) donde γ es un coeficiente fraccional. En nuestros experimentos variamos α, β y γ con diferentes distribuciones. Idealmente, todos los flujos de trabajo podrían finalizar dentro de sus límites de calidad de servicio (QoS) y, por lo tanto, maximizar el valor empresarial agregado en todos los flujos de trabajo. Sin embargo, debido a que modelamos a los proveedores de servicios con un rendimiento degradante bajo carga, no todos los flujos de trabajo alcanzarán su límite de calidad de servicio (QoS): fácilmente puede darse el caso de que los procesos comerciales sean asignados a proveedores que están sobrecargados y no pueden completarse dentro del límite de calidad de servicio respectivo de los flujos de trabajo. El problema clave de investigación, entonces, es asignar los procesos comerciales a los proveedores de servicios web con el objetivo de optimizar el valor comercial agregado de todos los flujos de trabajo. Dado que el alcance de la optimización es el conjunto completo de flujos de trabajo, puede ser que las mejores asignaciones de programación resulten en que algunos flujos de trabajo tengan que fallar para que otros tengan éxito. Esta observación intuitiva sugiere que enfoques de programación tradicionales como el round-robin o asignaciones proporcionales no funcionarán bien, lo cual es lo que observamos y discutimos en la Sección 4. Por otro lado, una búsqueda exhaustiva de todas las posibles asignaciones encontrará el mejor horario, pero la complejidad computacional es prohibitivamente alta. Supongamos que hay W flujos de trabajo con un promedio de B procesos de negocio por flujo de trabajo. Además, en el peor de los casos, cada proceso empresarial solicita un tipo de servicio, para el cual hay P proveedores. Por lo tanto, hay W · PB combinaciones para explorar y encontrar las asignaciones óptimas de procesos comerciales a proveedores. Incluso para configuraciones pequeñas (por ejemplo, Dado que (W=10, B=5, P=10), el tiempo computacional para la búsqueda exhaustiva es significativo, y en nuestro trabajo buscamos ajustar estos parámetros. En la siguiente subsección, discuta cómo se puede utilizar un algoritmo de búsqueda genética para converger hacia las asignaciones de programación óptimas. 3.2 Algoritmo genético Dado un espacio de búsqueda exponencial de asignaciones de procesos comerciales a proveedores de servicios web, el problema es encontrar la asignación óptima que produzca el valor comercial agregado más alto en general en todos los flujos de trabajo. Para explorar el espacio de soluciones, utilizamos un algoritmo genético (GA) que simula la selección natural darwiniana al hacer que los miembros de una población compitan por sobrevivir para transmitir sus cromosomas genéticos a la siguiente generación; después de generaciones sucesivas, hay una tendencia a que los cromosomas converjan hacia la mejor combinación. Aunque existen otras heurísticas de búsqueda que pueden resolver problemas de optimización (por ejemplo, recocido simulado o escalada de colina más empinada), el problema de programación de procesos empresariales se adapta bien a un AG porque las soluciones potenciales pueden representarse en forma de matriz y nos permite utilizar investigaciones previas en la recombinación efectiva de cromosomas de AG para formar nuevos miembros de la población (por ejemplo, [2]). 0 1 2 3 4 0 1 2 0 2 1 1 0 1 0 1 0 2 1 2 0 0 1 Figura 2: Un ejemplo de cromosoma que representa una asignación de programación de (flujo de trabajo, tipo de servicio) → proveedor de servicios. Cada fila representa un flujo de trabajo, y cada columna representa un tipo de servicio. Por ejemplo, aquí hay 3 flujos de trabajo (0 a 2) y 5 tipos de servicio (0 a 4). En el flujo de trabajo 0, cualquier solicitud de tipo de servicio 3 se dirige al proveedor 2. Ten en cuenta que el identificador del proveedor de servicios se encuentra dentro de un rango limitado a su tipo de servicio (es decir, su columna), por lo que el 2 listado para el tipo de servicio 3 es un servidor diferente al servidor 2 en otras columnas. Representación cromosómica de una solución. En la Figura 2 mostramos un ejemplo de cromosoma que codifica una asignación de programación. La representación es una matriz bidimensional que mapea {flujo de trabajo, tipo de servicio} a un proveedor de servicios. Para un proceso de negocio en el flujo de trabajo i y utilizando el tipo de servicio j, la entrada (i, j)-ésima en la tabla es el identificador del proveedor de servicios al que se asigna el proceso de negocio. Ten en cuenta que el identificador del proveedor de servicios se encuentra dentro de un rango limitado a su tipo de servicio. Ejecución de GA. Un algoritmo genético procede de la siguiente manera. Inicialmente se crea un conjunto aleatorio de cromosomas para la población. Los cromosomas son evaluados (hasheados) según alguna métrica, y los mejores son elegidos para ser padres. En nuestro problema, la evaluación produce el valor neto del negocio en todos los flujos de trabajo después de ejecutar todos los procesos comerciales una vez que se asignan a sus respectivos proveedores de servicios de acuerdo con el mapeo en el cromosoma. Los padres se recombinan para producir hijos, simulando un cruce sexual, y ocasionalmente puede surgir una mutación que produce nuevas características que no estaban disponibles en ninguno de los padres. La idea principal es que nos gustaría que los niños fueran diferentes de los padres (para explorar más del espacio de soluciones) pero no demasiado diferentes (para contener las porciones del cromosoma que resultan en asignaciones de programación exitosas). Ten en cuenta que encontrar el óptimo global no está garantizado debido a que la recombinación y la mutación son estocásticas. Recombinación y mutación de ADN. Como se mencionó, los cromosomas son matrices bidimensionales que representan asignaciones de horarios. Para simular la recombinación sexual de dos cromosomas para producir un nuevo cromosoma hijo, aplicamos un esquema de cruce de un punto dos veces (una vez a lo largo de cada dimensión). El cruce se explica mejor por analogía al espacio cartesiano de la siguiente manera. Se elige un punto al azar en la matriz para que sea la coordenada (0, 0). Los elementos de la matriz de los cuadrantes II y IV del primer progenitor y los elementos de los cuadrantes I y III del segundo progenitor se utilizan para crear el nuevo hijo. Este enfoque sigue las mejores prácticas de los algoritmos genéticos al mantener juntos los segmentos cromosómicos contiguos a medida que se transmiten de padre a hijo. El esquema de mutación de uni-cromosoma cambia aleatoriamente una de las asignaciones de proveedor de servicios a otro proveedor dentro del rango disponible. Otros esquemas de recombinación y mutación son un área de investigación en la comunidad de AG, y buscamos explorar nuevos operadores en trabajos futuros. Función de evaluación de GA. Un componente importante de los algoritmos genéticos es la función de evaluación. Dada una cromosoma particular que representa un mapeo de programación, la función calcula de manera determinista el valor neto del negocio en todas las cargas de trabajo. Los procesos comerciales en cada carga de trabajo se asignan a proveedores de servicios, y el tiempo de finalización de cada proveedor se calcula en función de la garantía del acuerdo de servicio utilizando los parámetros mencionados en la Sección 3.1, a saber, el tiempo de finalización sin carga α, la máxima concurrencia β y un coeficiente γ que controla la degradación del rendimiento lineal bajo carga pesada. Ten en cuenta que la función de evaluación puede ser fácilmente reemplazada si se desea; por ejemplo, otras funciones de evaluación pueden modelar diferentes garantías de proveedores de servicios o flujos de trabajo paralelos. 4. EXPERIMENTOS Y RESULTADOS En esta sección mostramos el beneficio de utilizar nuestro planificador basado en algoritmos genéticos. Debido a que queríamos escalar los escenarios a un gran número de flujos de trabajo (hasta 1000 en nuestros experimentos), implementamos un programa de simulación que nos permitió variar parámetros y medir los resultados con diferentes métricas. El simulador fue escrito en C++ estándar y se ejecutó en un ordenador de escritorio Linux (Fedora Core) con una velocidad de 2.8 GHz y 1GB de RAM. Comparamos nuestro algoritmo con candidatos alternativos: • Un algoritmo de round-robin bien conocido que asigna cada proceso comercial de forma circular a los proveedores de servicios para un tipo de servicio en particular. Este enfoque proporciona el esquema más simple para el equilibrio de carga. • Un algoritmo aleatorio-proporcional que asigna proporcionalmente los procesos comerciales a los proveedores de servicios; es decir, para un tipo de servicio dado, los proveedores de servicios se clasifican según su tiempo de finalización garantizado, y los procesos comerciales se asignan proporcionalmente a los proveedores en función de su tiempo de finalización. (También probamos un esquema de proporcionalidad basado tanto en los tiempos de finalización como en la concurrencia máxima, pero obtuvimos los mismos resultados, por lo que solo se muestran los resultados de los esquemas anteriores aquí.) • Un algoritmo codicioso de hombre de paja que siempre asigna los procesos comerciales al proveedor de servicios que tiene el tiempo de finalización garantizado más rápido. Este algoritmo representa un enfoque ingenuo basado en observaciones avaras y locales de cada flujo de trabajo sin tener en cuenta todos los flujos de trabajo. En los experimentos que siguen, todos los resultados fueron promediados a lo largo de 20 pruebas, y para ayudar a normalizar los efectos de la aleatorización utilizada durante el AG, cada prueba comenzó leyendo datos preinicializados desde el disco. En la Tabla 1 enumeramos nuestros parámetros experimentales. En la Figura 3 mostramos los resultados de ejecutar nuestro AG contra las tres alternativas candidatas. El eje x muestra el número de flujos de trabajo escalado a 1000, y el eje y muestra el valor comercial agregado de todos los flujos de trabajo. Como se puede ver, el algoritmo genético produce consistentemente el mayor valor comercial incluso a medida que aumenta el número de flujos de trabajo; con 1000 flujos de trabajo, el algoritmo genético produce una mejora del 115% sobre la siguiente mejor alternativa. (Tenga en cuenta que aunque estamos optimizando en función de la métrica de valor comercial que definimos anteriormente, los algoritmos genéticos pueden converger hacia el valor óptimo de cualquier métrica, siempre y cuando la función de evaluación pueda medir de manera consistente el valor de un cromosoma con esa métrica). Como era de esperar, el algoritmo codicioso tiene un rendimiento muy pobre porque hace el peor trabajo en equilibrar la carga: todos los procesos comerciales de un tipo de servicio dado se asignan a un solo servidor (el que se anuncia como el que tiene el tiempo de finalización más rápido), y a medida que llegan más procesos comerciales, el rendimiento de los proveedores se degrada linealmente. El esquema de round-robin es inicialmente superado por el esquema proporcional aleatorio hasta alrededor de 120 flujos de trabajo (como se muestra en el gráfico ampliado de la Figura 4), pero a medida que aumenta el número de flujos de trabajo, el esquema de round-robin gana consistentemente sobre el proporcional aleatorio. La razón es que aunque el esquema aleatorio-proporcional asigna procesos comerciales a proveedores proporcionalmente según los tiempos de finalización anunciados (que es una medida del poder del proveedor de servicios), incluso los mejores proveedores eventualmente alcanzarán una concurrencia máxima del mundo real para la gran cantidad de flujos de trabajo que estamos considerando. Para un número muy grande de flujos de trabajo, el esquema de round-robin es capaz de equilibrar mejor la carga entre todos los proveedores de servicios. Para comprender mejor el comportamiento resultante de las asignaciones de programación, mostramos los resultados de finalización del flujo de trabajo en las Figuras 5, 6 y 7 para 100, 500 y 900 flujos de trabajo, respectivamente. Estas cifras muestran el porcentaje de flujos de trabajo que son exitosos (pueden completarse dentro de su límite de QoS), aceptables (pueden completarse dentro de κ=3 veces su límite de QoS) y fallidos (no pueden completarse dentro de κ=3 veces su límite de QoS). El GA produce consistentemente el mayor porcentaje de flujos de trabajo exitosos (lo que resulta en valores comerciales más altos para el conjunto agregado de flujos de trabajo). Además, el esquema de round-robin produce mejores resultados que el proporcional-aleatorio para un gran número de flujos de trabajo, pero no tiene un rendimiento tan bueno como el algoritmo genético. En la Figura 8 graficamos el makespan resultante de los mismos experimentos anteriores. Makespan es una métrica tradicional de la comunidad de programación de trabajos que mide el tiempo transcurrido para que se complete el último trabajo. Aunque útil, no captura la métrica de valor empresarial de alto nivel contra la que estamos optimizando. De hecho, el makespan no tiene en cuenta el hecho de que proporcionamos múltiples niveles de finalización (exitoso, aceptable y fallido) y asignamos puntajes de valor comercial en consecuencia. Para completar, señalamos que el algoritmo genético proporciona el makespan más rápido, pero es igualado por el algoritmo de round robin. El algoritmo genético produce mejores valores comerciales (como se muestra en la Figura 3) porque es capaz de explorar el espacio de soluciones para encontrar mejores asignaciones que generen flujos de trabajo más exitosos (como se muestra en las Figuras 5 a 7). También analizamos el efecto de los algoritmos de programación en el equilibrio de la carga. La Figura 9 muestra el porcentaje de proveedores de servicios que fueron accedidos mientras se ejecutaban los flujos de trabajo. Como era de esperar, el algoritmo codicioso siempre elige a un proveedor de servicios; por otro lado, el algoritmo de round-robin es el más rápido para distribuir el negocio. 33 Parámetro experimental Comentario Flujos de trabajo 5 a 1000 Procesos de negocio por flujo de trabajo aleatorio uniforme: 1 - 10 Tipos de servicio 10 Proveedores de servicios por tipo de servicio aleatorio uniforme: 1 - 10 Objetivo de QoS del flujo de trabajo aleatorio uniforme: 10-30 segundos Tiempo de finalización del proveedor de servicios (α) aleatorio uniforme: 1 - 12 segundos Máxima concurrencia del proveedor de servicios (β) aleatorio uniforme: 1 - 12 Coeficiente de degradación del proveedor de servicios (γ) aleatorio uniforme: 0.1 - 0.9 Valor de negocio para flujos de trabajo exitosos aleatorio uniforme: 10 - 50 puntos Valor de negocio para flujos de trabajo aceptables aleatorio uniforme: 0 - 10 puntos Valor de negocio para flujos de trabajo fallidos aleatorio uniforme: -10 - 0 puntos GA: número de padres 20 GA: número de hijos 80 GA: número de generaciones 1000 Tabla 1: Parámetros experimentales Fallido Aceptable (completado pero no dentro de QoS) Exitoso (completado dentro de QoS) 0% 20% 40% 60% 80% 100% RoundRobinRandProportionalGreedyGeneticAlg Porcentaje de todos los flujos de trabajo Comportamiento del flujo de trabajo, 100 flujos de trabajo Figura 5: Comportamiento del flujo de trabajo para 100 flujos de trabajo. Fracaso Aceptable (completado pero no dentro de QoS) Exitoso (completado dentro de QoS) 0% 20% 40% 60% 80% 100% RoundRobinRandProportionalGreedyGeneticAlg Porcentaje de todos los flujos de trabajo Comportamiento del flujo de trabajo, 500 flujos de trabajo Figura 6: Comportamiento del flujo de trabajo para 500 flujos de trabajo. Fracaso Aceptable (completado pero no dentro de QoS) Exitoso (completado dentro de QoS) 0% 20% 40% 60% 80% 100% RoundRobinRandProportionalGreedyGeneticAlg Porcentaje de todos los flujos de trabajo Comportamiento del flujo de trabajo, 500 flujos de trabajo Figura 7: Comportamiento del flujo de trabajo para 900 flujos de trabajo. 0 50 100 150 200 250 300 0 200 400 600 800 1000 Tiempo total [segundos] Número de flujos de trabajo Tiempo máximo de finalización para todos los flujos de trabajo Algoritmo genético Round robin Proporcional aleatorio Codicioso Figura 8: Tiempo máximo de finalización para todos los flujos de trabajo. Este valor es la métrica makespan utilizada en la investigación de programación tradicional. Aunque útil, el makespan no tiene en cuenta la puntuación del valor comercial en nuestro dominio de problemas. La Figura 10 muestra el porcentaje de proveedores de servicios accedidos (es decir, el porcentaje de proveedores de servicios representados en la Figura 9) que tenían más procesos comerciales asignados que su concurrencia máxima anunciada. Por ejemplo, en el algoritmo voraz solo se utiliza un proveedor de servicios, y este proveedor se satura rápidamente. Por otro lado, el algoritmo aleatorio-proporcional utiliza muchos proveedores de servicios, pero debido a que los procesos comerciales se asignan de manera proporcional con más asignaciones yendo a los mejores proveedores, hay una tendencia a que un menor porcentaje de proveedores se saturen. Para completitud, mostramos el rendimiento del algoritmo genético en sí mismo en la Figura 11. El algoritmo escala linealmente con un aumento en el número de flujos de trabajo. Observamos que los algoritmos round-robin, random-proportional y greedy terminaron en menos de 1 segundo incluso para la configuración de flujo de trabajo más grande. Sin embargo, consideramos que el beneficio de encontrar puntajes de valor empresarial mucho más altos justifica el tiempo de ejecución del algoritmo genético; además, esperaríamos que el tiempo de ejecución mejore tanto con la optimización del software como con un ordenador más rápido que nuestro PC estándar. CONCLUSIÓN Los procesos comerciales dentro de los flujos de trabajo pueden ser orquestados para acceder a servicios web. En este artículo estudiamos la provisión de servicios de múltiples niveles, donde las solicitudes de servicios web a tipos de servicios pueden ser asignadas a diferentes proveedores de servicios. El problema resultante es que para poder soportar un gran número de flujos de trabajo, la asignación de procesos de negocio a proveedores de servicios web debe ser inteligente. Utilizamos una métrica de valor empresarial para medir el 0.2 0.4 0.6 0.8 1 0 200 400 600 800 1000 Porcentaje de todos los proveedores de servicios Número de flujos de trabajo Proveedores de servicios utilizados Algoritmo genético Round robin Proporcional aleatorio Ávido Figura 9: El porcentaje de proveedores de servicios utilizados durante las ejecuciones de carga de trabajo. El algoritmo Greedy siempre elige al mismo proveedor de servicios, mientras que el algoritmo Round Robin distribuye las solicitudes de manera uniforme entre los proveedores. 0 0.2 0.4 0.6 0.8 1 0 200 400 600 800 1000 Porcentaje de todos los proveedores de servicios Número de flujos de trabajo Proveedores saturados Algoritmo genético Round robin Proporcional aleatorio Greedy Figura 10: El porcentaje de proveedores de servicios que están saturados entre aquellos proveedores que fueron utilizados (es decir, el porcentaje de proveedores de servicios representados en la Figura 9). Un proveedor de servicios saturado es aquel cuya carga de trabajo es mayor que su concurrencia máxima anunciada. Dado que el espacio de soluciones de los mapeos de programación es exponencial, utilizamos un algoritmo de búsqueda genética para explorar el espacio y converger hacia el mejor horario. Con una configuración predeterminada para todos los parámetros y utilizando nuestra puntuación de valor empresarial, el GA produjo hasta un 115% de mejora en el valor empresarial sobre el siguiente mejor algoritmo. Finalmente, debido a que un algoritmo genético convergerá hacia el valor óptimo utilizando cualquier métrica (incluso diferente a la métrica de valor empresarial que utilizamos), creemos que nuestro enfoque tiene un fuerte potencial para trabajos futuros. En trabajos futuros, buscamos adquirir trazas del mundo real de instancias de servicios web para obtener mejores estimaciones de las garantías de acuerdo de servicio, aunque esperamos que tales garantías entre los proveedores y sus consumidores no estén generalmente disponibles para el público. También analizaremos otras métricas de calidad de servicio (QoS) como el uso de CPU y E/S. Por ejemplo, podemos analizar los costos de transferencia con diferentes anchos de banda, latencia, tamaño de datos y distribución de datos. Además, esperamos mejorar nuestro algoritmo genético y compararlo con más alternativas de programación. Finalmente, dado que nuestro trabajo es complementario al trabajo existente en coreografía de servicios web (porque dependemos de flujos de trabajo preconfigurados), buscamos integrar nuestro enfoque con los sistemas de flujo de trabajo de servicios web disponibles expresados en BPEL. 6. REFERENCIAS [1] A. Ankolekar, et al. DAML-S: Marcado Semántico para Servicios Web, En Proc. del Simposio Internacional de Trabajo de la Web Semántica, 2001. [2] L. Davis. Programación de taller con algoritmos genéticos, En Proc. de la Conferencia Internacional sobre Algoritmos Genéticos, 1985. [3] H.-L. Fang, P. Ross y D. Corne. Un Enfoque Prometedor de Algoritmo Genético para Problemas de Programación de Taller de Trabajo, Re-programación y Programación de Taller Abierto, En Actas de la 5ta Conferencia Internacional sobre Algoritmos Genéticos, 1993. [4] M. Gary y D. Johnson. Computadoras e Intractabilidad: Una Guía de la Teoría de NP-Completitud, Freeman, 1979. [5] J. Holland. Adaptación en Sistemas Naturales y Artificiales: Un Análisis Introductorio con Aplicaciones a la Biología, Control e Inteligencia Artificial, MIT Press, 1992. [6] D. Goldberg. Algoritmos Genéticos en Búsqueda, Optimización y Aprendizaje Automático, Kluwer Academic Publishers, 1989. [7] Procesos de Negocio en un Mundo de Servicios Web, www-128.ibm.com/developerworks/webservices/library/ws-bpelwp/. [8] G. Soundararajan, K. Manassiev, J. Chen, A. Goel y C. Amza. Bases de datos de back-end en clústeres de servidores de contenido dinámico compartido, En Proc. de la Conferencia Internacional de Computación Autónoma de IEEE, 2005. [9] B. Srivastava y J. Koehler. Composición de Servicios Web: Soluciones Actuales y Problemas Abiertos, ICAP, 2003. [10] B. Urgaonkar, P. Shenoy, A. Chandra y P. Goyal. Provisión dinámica de aplicaciones de Internet de múltiples niveles, En Proc. de la Conferencia Internacional de IEEE sobre Computación Autónoma, 2005. [11] L. Zeng, B. Benatallah, M. Dumas, J. Kalagnanam y Q. Sheng. Composición de Servicios Web Impulsada por la Calidad, En Proc. de la Conferencia WWW, 2003. 35 ",
            "candidates": [],
            "error": [
                [
                    ""
                ]
            ]
        },
        "service request": {
            "translated_key": "solicitudes de servicios web",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Heuristics-Based Scheduling of Composite Web Service Workloads Thomas Phan Wen-Syan Li IBM Almaden Research Center 650 Harry Rd.",
                "San Jose, CA 95120 {phantom,wsl}@us.ibm.com ABSTRACT Web services can be aggregated to create composite workflows that provide streamlined functionality for human users or other systems.",
                "Although industry standards and recent research have sought to define best practices and to improve end-to-end workflow composition, one area that has not fully been explored is the scheduling of a workflows web <br>service request</br>s to actual service provisioning in a multi-tiered, multi-organisation environment.",
                "This issue is relevant to modern business scenarios where business processes within a workflow must complete within QoS-defined limits.",
                "Because these business processes are web service consumers, <br>service request</br>s must be mapped and scheduled across multiple web service providers, each with its own negotiated service level agreement.",
                "In this paper we provide heuristics for scheduling <br>service request</br>s from multiple business process workflows to web service providers such that a business value metric across all workflows is maximised.",
                "We show that a genetic search algorithm is appropriate to perform this scheduling, and through experimentation we show that our algorithm scales well up to a thousand workflows and produces better mappings than traditional approaches.",
                "Categories and Subject Descriptors C.2.4 [Computer-Communication Networks]: Distributed Systems-distributed applications; D.2.8 [Software Engineering]: Metrics-complexity measures, performance measures 1.",
                "INTRODUCTION Web services can be composed into workflows to provide streamlined end-to-end functionality for human users or other systems.",
                "Although previous research efforts have looked at ways to intelligently automate the composition of web services into workflows (e.g. [1, 9]), an important remaining problem is the assignment of web <br>service request</br>s to the underlying web service providers in a multi-tiered runtime scenario within constraints.",
                "In this paper we address this scheduling problem and examine means to manage a large number of business process workflows in a scalable manner.",
                "The problem of scheduling web <br>service request</br>s to providers is relevant to modern business domains that depend on multi-tiered service provisioning.",
                "Consider the example shown in Figure 1 that illustrates our problem space.",
                "Workflows comprise multiple related business processes that are web service consumers; here we assume that the workflows represent requested service from customers or automated systems and that the workflow has already been composed with an existing choreography toolkit.",
                "These workflows are then submitted to a portal (not shown) that acts as a scheduling agent between the web service consumers and the web service providers.",
                "In this example, a workflow could represent the actions needed to instantiate a vacation itinerary, where one business process requests booking an airline ticket, another business process requests a hotel room, and so forth.",
                "Each of these requests target a particular service type (e.g. airline reservations, hotel reservations, car reservations, etc. ), and for each service type, there are multiple instances of service providers that publish a web service interface.",
                "An important challenge is that the workflows must meet some quality-of-service (QoS) metric, such as end-to-end completion time of all its business processes, and that meeting or failing this goal results in the assignment of a quantitative business value metric for the workflow; intuitively, it is desired that all workflows meet their respective QoS goals.",
                "We further leverage the notion that QoS service agreements are generally agreed-upon between the web service providers and the scheduling agent such that the providers advertise some level of guaranteed QoS to the scheduler based upon runtime conditions such as turnaround time and maximum available concurrency.",
                "The resulting problem is then to schedule and assign the business processes requests for service types to one of the service providers for that type.",
                "The scheduling must be done such that the aggregate business value across all the workflows is maximised.",
                "In Section 3 we state the scenario as a combinatorial problem and utilise a genetic search algorithm [5] to find the best assignment of web <br>service request</br>s to providers.",
                "This approach converges towards an assignment that maximises the overall business value for all the workflows.",
                "In Section 4 we show through experimentation that this search heuristic finds better assignments than other algorithms (greedy, round-robin, and proportional).",
                "Further, this approach allows us to scale the number of simultaneous workflows (up to one thousand workflows in our experiments) and yet still find effective schedules. 2.",
                "RELATED WORK In the context of service assignment and scheduling, [11] maps web service calls to potential servers using linear programming, but their work is concerned with mapping only single workflows; our principal focus is on scalably scheduling multiple workflows (up 30 Service Type SuperHotels.com Business Process Business Process Workflow ... Business Process Business Process ... HostileHostels.com IncredibleInns.com Business Process Business Process Business Process ... Business Process Service Provider SkyHighAirlines.com SuperCrazyFlights.com Business Process . . . . . .",
                "Advertised QoS Service Agreement CarRentalService.com Figure 1: An example scenario demonstrating the interaction between business processes in workflows and web service providers.",
                "Each business process accesses a service type and is then mapped to a service provider for that type. to one thousand as we show later) using different business metrics and a search heuristic. [10] presents a dynamic provisioning approach that uses both predictive and reactive techniques for multi-tiered Internet application delivery.",
                "However, the provisioning techniques do not consider the challenges faced when there are alternative query execution plans and replicated data sources. [8] presents a feedback-based scheduling mechanism for multi-tiered systems with back-end databases, but unlike our work, it assumes a tighter coupling between the various components of the system.",
                "Our work also builds upon prior scheduling research.",
                "The classic job-shop scheduling problem, shown to be NP-complete [4] [3], is similar to ours in that tasks within a job must be scheduled onto machinery (c.f. our scenario is that business processes within a workflow must be scheduled onto web service providers).",
                "The salient differences are that the machines can process only one job at a time (we assume servers can multi-task but with degraded performance and a maximum concurrency level), tasks within a job cannot simultaneously run on different machines (we assume business processes can be assigned to any available server), and the principal metric of performance is the makespan, which is the time for the last task among all the jobs to complete (and as we show later, optimising on the makespan is insufficient for scheduling the business processes, necessitating different metrics). 3.",
                "DESIGN In this section we describe our model and discuss how we can find scheduling assignments using a genetic search algorithm. 3.1 Model We base our model on the simplified scenario shown in Figure 1.",
                "Specifically, we assume that users or automated systems request the execution of a workflow.",
                "The workflows comprise business processes, each of which makes one web service invocation to a service type.",
                "Further, business processes have an ordering in the workflow.",
                "The arrangement and execution of the business processes and the data flow between them are all managed by a composition or choreography tool (e.g. [1, 9]).",
                "Although composition languages can use sophisticated flow-control mechanisms such as conditional branches, for simplicity we assume the processes execute sequentially in a given order.",
                "This scenario can be naturally extended to more complex relationships that can be expressed in BPEL [7], which defines how business processes interact, messages are exchanged, activities are ordered, and exceptions are handled.",
                "Due to space constraints, we focus on the problem space presented here and will extend our model to more advanced deployment scenarios in the future.",
                "Each workflow has a QoS requirement to complete within a specified number of time units (e.g. on the order of seconds, as detailed in the Experiments section).",
                "Upon completion (or failure), the workflow is assigned a business value.",
                "We extended this approach further and considered different types of workflow completion in order to model differentiated QoS levels that can be applied by businesses (for example, to provide tiered customer service).",
                "We say that a workflow is successful if it completes within its QoS requirement, acceptable if it completes within a constant factor κ 31 of its QoS bound (in our experiments we chose κ=3), or failing if it finishes beyond κ times its QoS bound.",
                "For each category, a business value score is assigned to the workflow, with the successful category assigned the highest positive score, followed by acceptable and then failing.",
                "The business value point distribution is non-uniform across workflows, further modelling cases where some workflows are of higher priority than others.",
                "Each service type is implemented by a number of different service providers.",
                "We assume that the providers make service level agreements (SLAs) to guarantee a level of performance defined by the completion time for completing a web service invocation.",
                "Although SLAs can be complex, in this paper we assume for simplicity that the guarantees can take the form of a linear performance degradation under load.",
                "This guarantee is defined by several parameters: α is the expected completion time (for example, on the order of seconds) if the assigned workload of web <br>service request</br>s is less than or equal to β, the maximum concurrency, and if the workload is higher than β, the expected completion for a workload of size ω is α+ γ(ω − β) where γ is a fractional coefficient.",
                "In our experiments we vary α, β, and γ with different distributions.",
                "Ideally, all workflows would be able to finish within their QoS limits and thus maximise the aggregate business value across all workflows.",
                "However, because we model service providers with degrading performance under load, not all workflows will achieve their QoS limit: it may easily be the case that business processes are assigned to providers who are overloaded and cannot complete within the respective workflows QoS limit.",
                "The key research problem, then, is to assign the business processes to the web service providers with the goal of optimising on the aggregate business value of all workflows.",
                "Given that the scope of the optimisation is the entire set of workflows, it may be that the best scheduling assignments may result in some workflows having to fail in order for more workflows to succeed.",
                "This intuitive observation suggests that traditional scheduling approaches such as round-robin or proportional assignments will not fare well, which is what we observe and discuss in Section 4.",
                "On the other hand, an exhaustive search of all the possible assignments will find the best schedule, but the computational complexity is prohibitively high.",
                "Suppose there are W workflows with an average of B business processes per workflow.",
                "Further, in the worst case each business process requests one service type, for which there are P providers.",
                "There are thus W · PB combinations to explore to find the optimal assignments of business processes to providers.",
                "Even for small configurations (e.g.",
                "W =10, B=5, P=10), the computational time for exhaustive search is significant, and in our work we look to scale these parameters.",
                "In the next subsection, discuss how a genetic search algorithm can be used to converge toward the optimum scheduling assignments. 3.2 Genetic algorithm Given an exponential search space of business process assignments to web service providers, the problem is to find the optimal assignment that produces the overall highest aggregate business value across all workflows.",
                "To explore the solution space, we use a genetic algorithm (GA) search heuristic that simulates Darwinian natural selection by having members of a population compete to survive in order to pass their genetic chromosomes onto the next generation; after successive generations, there is a tendency for the chromosomes to converge toward the best combination [5] [6].",
                "Although other search heuristics exist that can solve optimization problems (e.g. simulated annealing or steepest-ascent hillclimbing), the business process scheduling problem fits well with a GA because potential solutions can be represented in a matrix form and allows us to use prior research in effective GA chromosome recombination to form new members of the population (e.g. [2]). 0 1 2 3 4 0 1 2 0 2 1 1 0 1 0 1 0 2 1 2 0 0 1 Figure 2: An example chromosome representing a scheduling assignment of (workflow,service type) → service provider.",
                "Each row represents a workflow, and each column represents a service type.",
                "For example, here there are 3 workflows (0 to 2) and 5 service types (0 to 4).",
                "In workflow 0, any request for service type 3 goes to provider 2.",
                "Note that the service provider identifier is within a range limited to its service type (i.e. its column), so the 2 listed for service type 3 is a different server from server 2 in other columns.",
                "Chromosome representation of a solution.",
                "In Figure 2 we show an example chromosome that encodes one scheduling assignment.",
                "The representation is a 2-dimensional matrix that maps {workflow, service type} to a service provider.",
                "For a business process in workflow i and utilising service type j, the (i, j)th entry in the table is the identifier for the service provider to which the business process is assigned.",
                "Note that the service provider identifier is within a range limited to its service type.",
                "GA execution.",
                "A GA proceeds as follows.",
                "Initially a random set of chromosomes is created for the population.",
                "The chromosomes are evaluated (hashed) to some metric, and the best ones are chosen to be parents.",
                "In our problem, the evaluation produces the net business value across all workflows after executing all business processes once they are assigned to their respective service providers according to the mapping in the chromosome.",
                "The parents recombine to produce children, simulating sexual crossover, and occasionally a mutation may arise which produces new characteristics that were not available in either parent.",
                "The principal idea is that we would like the children to be different from the parents (in order to explore more of the solution space) yet not too different (in order to contain the portions of the chromosome that result in good scheduling assignments).",
                "Note that finding the global optimum is not guaranteed because the recombination and mutation are stochastic.",
                "GA recombination and mutation.",
                "As mentioned, the chromosomes are 2-dimensional matrices that represent scheduling assignments.",
                "To simulate sexual recombination of two chromosomes to produce a new child chromosome, we applied a one-point crossover scheme twice (once along each dimension).",
                "The crossover is best explained by analogy to Cartesian space as follows.",
                "A random point is chosen in the matrix to be coordinate (0, 0).",
                "Matrix elements from quadrants II and IV from the first parent and elements from quadrants I and III from the second parent are used to create the new child.",
                "This approach follows GA best practices by keeping contiguous chromosome segments together as they are transmitted from parent to child.",
                "The uni-chromosome mutation scheme randomly changes one of the service provider assignments to another provider within the available range.",
                "Other recombination and mutation schemes are an area of research in the GA community, and we look to explore new operators in future work.",
                "GA evaluation function.",
                "An important GA component is the evaluation function.",
                "Given a particular chromosome representing one scheduling mapping, the function deterministically calculates the net business value across all workloads.",
                "The business processes in each workload are assigned to service providers, and each providers completion time is calculated based on the service agreement guarantee using the parameters mentioned in Section 3.1, namely the unloaded completion time α, the maximum concur32 rency β, and a coefficient γ that controls the linear performance degradation under heavy load.",
                "Note that the evaluation function can be easily replaced if desired; for example, other evaluation functions can model different service provider guarantees or parallel workflows. 4.",
                "EXPERIMENTS AND RESULTS In this section we show the benefit of using our GA-based scheduler.",
                "Because we wanted to scale the scenarios up to a large number of workflows (up to 1000 in our experiments), we implemented a simulation program that allowed us to vary parameters and to measure the results with different metrics.",
                "The simulator was written in standard C++ and was run on a Linux (Fedora Core) desktop computer running at 2.8 GHz with 1GB of RAM.",
                "We compared our algorithm against alternative candidates: • A well-known round-robin algorithm that assigns each business process in circular fashion to the service providers for a particular service type.",
                "This approach provides the simplest scheme for load-balancing. • A random-proportional algorithm that proportionally assigns business processes to the service providers; that is, for a given service type, the service providers are ranked by their guaranteed completion time, and business processes are assigned proportionally to the providers based on their completion time. (We also tried a proportionality scheme based on both the completion times and maximum concurrency but attained the same results, so only the former schemes results are shown here.) • A strawman greedy algorithm that always assigns business processes to the service provider that has the fastest guaranteed completion time.",
                "This algorithm represents a naive approach based on greedy, local observations of each workflow without taking into consideration all workflows.",
                "In the experiments that follow, all results were averaged across 20 trials, and to help normalise the effects of randomisation used during the GA, each trial started by reading in pre-initialised data from disk.",
                "In Table 1 we list our experimental parameters.",
                "In Figure 3 we show the results of running our GA against the three candidate alternatives.",
                "The x-axis shows the number for workflows scaled up to 1000, and the y-axis shows the aggregate business value for all workflows.",
                "As can be seen, the GA consistently produces the highest business value even as the number of workflows grows; at 1000 workflows, the GA produces a 115% improvement over the next-best alternative. (Note that although we are optimising against the business value metric we defined earlier, genetic algorithms are able to converge towards the optimal value of any metric, as long as the evaluation function can consistently measure a chromosomes value with that metric.)",
                "As expected, the greedy algorithm performs very poorly because it does the worst job at balancing load: all business processes for a given service type are assigned to only one server (the one advertised to have the fastest completion time), and as more business processes arrive, the providers performance degrades linearly.",
                "The round-robin scheme is initially outperformed by the randomproportional scheme up to around 120 workflows (as shown in the magnified graph of Figure 4), but as the number of workflows increases, the round-robin scheme consistently wins over randomproportional.",
                "The reason is that although the random-proportional scheme assigns business processes to providers proportionally according to the advertised completion times (which is a measure of the power of the service provider), even the best providers will eventually reach a real-world maximum concurrency for the large -2000 -1000 0 1000 2000 3000 4000 5000 6000 7000 0 200 400 600 800 1000 Aggregatebusinessvalueacrossallworkflows Total number of workflows Business value scores of scheduling algorithms Genetic algorithm Round robin Random proportional Greedy Figure 3: Net business value scores of different scheduling algorithms. -500 0 500 1000 1500 2000 2500 3000 3500 4000 0 50 100 150 200Aggregatebusinessvalueacrossallworkflows Total number of workflows Business value scores of scheduling algorithms Genetic algorithm Round robin Random proportional Greedy Figure 4: Magnification of the left-most region in Figure 3. number of workflows that we are considering.",
                "For a very large number of workflows, the round-robin scheme is able to better balance the load across all service providers.",
                "To better understand the behaviour resulting from the scheduling assignments, we show the workflow completion results in Figures 5, 6, and 7 for 100, 500, and 900 workflows, respectively.",
                "These figures show the percentage of workflows that are successful (can complete with their QoS limit), acceptable (can complete within κ=3 times their QoS limit), and failed (cannot complete within κ=3 times their QoS limit).",
                "The GA consistently produces the highest percentage of successful workflows (resulting in higher business values for the aggregate set of workflows).",
                "Further, the round-robin scheme produces better results than the random-proportional for a large number of workflows but does not perform as well as the GA.",
                "In Figure 8 we graph the makespan resulting from the same experiments above.",
                "Makespan is a traditional metric from the job scheduling community measuring elapsed time for the last job to complete.",
                "While useful, it does not capture the high-level business value metric that we are optimising against.",
                "Indeed, the makespan is oblivious to the fact that we provide multiple levels of completion (successful, acceptable, and failed) and assign business value scores accordingly.",
                "For completeness, we note that the GA provides the fastest makespan, but it is matched by the round robin algorithm.",
                "The GA produces better business values (as shown in Figure 3) because it is able to search the solution space to find better mappings that produce more successful workflows (as shown in Figures 5 to 7).",
                "We also looked at the effect of the scheduling algorithms on balancing the load.",
                "Figure 9 shows the percentage of services providers that were accessed while the workflows ran.",
                "As expected, the greedy algorithm always hits one service provider; on the other hand, the round-robin algorithm is the fastest to spread the business 33 Experimental parameter Comment Workflows 5 to 1000 Business processes per workflow uniform random: 1 - 10 Service types 10 Service providers per service type uniform random: 1 - 10 Workflow QoS goal uniform random: 10-30 seconds Service provider completion time (α) uniform random: 1 - 12 seconds Service provider maximum concurrency (β) uniform random: 1 - 12 Service provider degradation coefficient (γ) uniform random: 0.1 - 0.9 Business value for successful workflows uniform random: 10 - 50 points Business value for acceptable workflows uniform random: 0 - 10 points Business value for failed workflows uniform random: -10 - 0 points GA: number of parents 20 GA: number of children 80 GA: number of generations 1000 Table 1: Experimental parameters Failed Acceptable (completed but not within QoS) Successful (completed within QoS) 0% 20% 40% 60% 80% 100% RoundRobinRandProportionalGreedyGeneticAlg Percentageofallworkflows Workflow behaviour, 100 workflows Figure 5: Workflow behaviour for 100 workflows.",
                "Failed Acceptable (completed but not within QoS) Successful (completed within QoS) 0% 20% 40% 60% 80% 100% RoundRobinRandProportionalGreedyGeneticAlg Percentageofallworkflows Workflow behaviour, 500 workflows Figure 6: Workflow behaviour for 500 workflows.",
                "Failed Acceptable (completed but not within QoS) Successful (completed within QoS) 0% 20% 40% 60% 80% 100% RoundRobinRandProportionalGreedyGeneticAlg Percentageofallworkflows Workflow behaviour, 500 workflows Figure 7: Workflow behaviour for 900 workflows. 0 50 100 150 200 250 300 0 200 400 600 800 1000 Makespan[seconds] Number of workflows Maximum completion time for all workflows Genetic algorithm Round robin Random proportional Greedy Figure 8: Maximum completion time for all workflows.",
                "This value is the makespan metric used in traditional scheduling research.",
                "Although useful, the makespan does not take into consideration the business value scoring in our problem domain. processes.",
                "Figure 10 is the percentage of accessed service providers (that is, the percentage of service providers represented in Figure 9) that had more assigned business processes than their advertised maximum concurrency.",
                "For example, in the greedy algorithm only one service provider is utilised, and this one provider quickly becomes saturated.",
                "On the other hand, the random-proportional algorithm uses many service providers, but because business processes are proportionally assigned with more assignments going to the better providers, there is a tendency for a smaller percentage of providers to become saturated.",
                "For completeness, we show the performance of the genetic algorithm itself in Figure 11.",
                "The algorithm scales linearly with an increasing number of workflows.",
                "We note that the round-robin, random-proportional, and greedy algorithms all finished within 1 second even for the largest workflow configuration.",
                "However, we feel that the benefit of finding much higher business value scores justifies the running time of the GA; further we would expect that the running time will improve with both software tuning as well as with a computer faster than our off-the-shelf PC. 5.",
                "CONCLUSION Business processes within workflows can be orchestrated to access web services.",
                "In this paper we looked at multi-tiered service provisioning where web <br>service request</br>s to service types can be mapped to different service providers.",
                "The resulting problem is that in order to support a very large number of workflows, the assignment of business process to web service provider must be intelligent.",
                "We used a business value metric to measure the be34 0 0.2 0.4 0.6 0.8 1 0 200 400 600 800 1000 Percentageofallserviceproviders Number of workflows Service providers utilised Genetic algorithm Round robin Random proportional Greedy Figure 9: The percentage of service providers utilized during workload executions.",
                "The Greedy algorithm always hits the one service provider, while the Round Robin algorithm spreads requests evenly across the providers. 0 0.2 0.4 0.6 0.8 1 0 200 400 600 800 1000 Percentageofallserviceproviders Number of workflows Service providers saturated Genetic algorithm Round robin Random proportional Greedy Figure 10: The percentage of service providers that are saturated among those providers who were utilized (that is, percentage of the service providers represented in Figure 9).",
                "A saturated service provider is one whose workload is greater that its advertised maximum concurrency. 0 5 10 15 20 25 0 200 400 600 800 1000 Runningtimeinseconds Total number of workflows Running time of genetic algorithm GA running time Figure 11: Running time of the genetic algorithm. haviour of workflows meeting or failing QoS values, and we optimised our scheduling to maximise the aggregate business value across all workflows.",
                "Since the solution space of scheduler mappings is exponential, we used a genetic search algorithm to search the space and converge toward the best schedule.",
                "With a default configuration for all parameters and using our business value scoring, the GA produced up to 115% business value improvement over the next best algorithm.",
                "Finally, because a genetic algorithm will converge towards the optimal value using any metric (even other than the business value metric we used), we believe our approach has strong potential for continuing work.",
                "In future work, we look to acquire real-world traces of web service instances in order to get better estimates of service agreement guarantees, although we expect that such guarantees between the providers and their consumers are not generally available to the public.",
                "We will also look at other QoS metrics such as CPU and I/O usage.",
                "For example, we can analyse transfer costs with varying bandwidth, latency, data size, and data distribution.",
                "Further, we hope to improve our genetic algorithm and compare it to more scheduler alternatives.",
                "Finally, since our work is complementary to existing work in web services choreography (because we rely on pre-configured workflows), we look to integrate our approach with available web service workflow systems expressed in BPEL. 6.",
                "REFERENCES [1] A. Ankolekar, et al.",
                "DAML-S: Semantic Markup For Web Services, In Proc. of the Intl Semantic Web Working Symposium, 2001. [2] L. Davis.",
                "Job Shop Scheduling with Genetic Algorithms, In Proc. of the Intl Conference on Genetic Algorithms, 1985. [3] H.-L. Fang, P. Ross, and D. Corne.",
                "A Promising Genetic Algorithm Approach to Job-Shop Scheduling, Rescheduling, and Open-Shop Scheduling Problems , In Proc. on the 5th Intl Conference on Genetic Algorithms, 1993. [4] M. Gary and D. Johnson.",
                "Computers and Intractability: A Guide to the Theory of NP-Completeness, Freeman, 1979. [5] J. Holland.",
                "Adaptation in Natural and Artificial Systems: An Introductory Analysis with Applications to Biology, Control, and Artificial Intelligence, MIT Press, 1992. [6] D. Goldberg.",
                "Genetic Algorithms in Search, Optimization and Machine Learning, Kluwer Academic Publishers, 1989. [7] Business Processes in a Web Services World, www-128.ibm.com/developerworks/ webservices/library/ws-bpelwp/. [8] G. Soundararajan, K. Manassiev, J. Chen, A. Goel, and C. Amza.",
                "Back-end Databases in Shared Dynamic Content Server Clusters, In Proc. of the IEEE Intl Conference on Autonomic Computing, 2005. [9] B. Srivastava and J. Koehler.",
                "Web Service Composition Current Solutions and Open Problems, ICAP, 2003. [10] B. Urgaonkar, P. Shenoy, A. Chandra, and P. Goyal.",
                "Dynamic Provisioning of Multi-Tier Internet Applications, In Proc. of the IEEE Intl Conference on Autonomic Computing, 2005. [11] L. Zeng, B. Benatallah, M. Dumas, J. Kalagnanam, and Q. Sheng.",
                "Quality Driven Web Services Composition, In Proc. of the WWW Conference, 2003. 35"
            ],
            "original_annotated_samples": [
                "Although industry standards and recent research have sought to define best practices and to improve end-to-end workflow composition, one area that has not fully been explored is the scheduling of a workflows web <br>service request</br>s to actual service provisioning in a multi-tiered, multi-organisation environment.",
                "Because these business processes are web service consumers, <br>service request</br>s must be mapped and scheduled across multiple web service providers, each with its own negotiated service level agreement.",
                "In this paper we provide heuristics for scheduling <br>service request</br>s from multiple business process workflows to web service providers such that a business value metric across all workflows is maximised.",
                "Although previous research efforts have looked at ways to intelligently automate the composition of web services into workflows (e.g. [1, 9]), an important remaining problem is the assignment of web <br>service request</br>s to the underlying web service providers in a multi-tiered runtime scenario within constraints.",
                "The problem of scheduling web <br>service request</br>s to providers is relevant to modern business domains that depend on multi-tiered service provisioning."
            ],
            "translated_annotated_samples": [
                "Aunque los estándares de la industria y la investigación reciente han buscado definir las mejores prácticas y mejorar la composición del flujo de trabajo de extremo a extremo, un área que no ha sido completamente explorada es la programación de las <br>solicitudes de servicios web</br> de los flujos de trabajo para la provisión real de servicios en un entorno multinivel y multiorganizacional.",
                "Debido a que estos procesos comerciales son consumidores de servicios web, las <br>solicitudes de servicio</br> deben ser mapeadas y programadas entre múltiples proveedores de servicios web, cada uno con su propio acuerdo de nivel de servicio negociado.",
                "En este documento proporcionamos heurísticas para programar <br>solicitudes de servicio</br> de múltiples flujos de trabajo de procesos comerciales a proveedores de servicios web de manera que se maximice una métrica de valor comercial en todos los flujos de trabajo.",
                "Aunque los esfuerzos de investigación previos han examinado formas de automatizar de manera inteligente la composición de servicios web en flujos de trabajo (por ejemplo, [1, 9]), un problema importante que aún persiste es la asignación de <br>solicitudes de servicios web</br> a los proveedores de servicios web subyacentes en un escenario de tiempo de ejecución multinivel dentro de ciertas restricciones.",
                "El problema de programar <br>solicitudes de servicios web</br> a proveedores es relevante para los dominios comerciales modernos que dependen de la provisión de servicios de múltiples niveles."
            ],
            "translated_text": "Programación basada en heurísticas de cargas de trabajo de servicios web compuestos Thomas Phan Wen-Syan Li Centro de Investigación IBM Almaden 650 Harry Rd. Los servicios web pueden ser agregados para crear flujos de trabajo compuestos que proporcionen funcionalidad simplificada para usuarios humanos u otros sistemas. Aunque los estándares de la industria y la investigación reciente han buscado definir las mejores prácticas y mejorar la composición del flujo de trabajo de extremo a extremo, un área que no ha sido completamente explorada es la programación de las <br>solicitudes de servicios web</br> de los flujos de trabajo para la provisión real de servicios en un entorno multinivel y multiorganizacional. Este problema es relevante para los escenarios empresariales modernos donde los procesos comerciales dentro de un flujo de trabajo deben completarse dentro de los límites definidos por la calidad de servicio (QoS). Debido a que estos procesos comerciales son consumidores de servicios web, las <br>solicitudes de servicio</br> deben ser mapeadas y programadas entre múltiples proveedores de servicios web, cada uno con su propio acuerdo de nivel de servicio negociado. En este documento proporcionamos heurísticas para programar <br>solicitudes de servicio</br> de múltiples flujos de trabajo de procesos comerciales a proveedores de servicios web de manera que se maximice una métrica de valor comercial en todos los flujos de trabajo. Mostramos que un algoritmo de búsqueda genética es apropiado para realizar esta programación, y a través de experimentación demostramos que nuestro algoritmo escala bien hasta mil flujos de trabajo y produce mejores asignaciones que enfoques tradicionales. Categorías y Descriptores de Asignaturas C.2.4 [Redes de Computadoras-Comunicación]: Sistemas Distribuidos-aplicaciones distribuidas; D.2.8 [Ingeniería de Software]: Métricas-medidas de complejidad, medidas de rendimiento 1. INTRODUCCIÓN Los servicios web pueden ser compuestos en flujos de trabajo para proporcionar funcionalidad integrada de principio a fin para usuarios humanos u otros sistemas. Aunque los esfuerzos de investigación previos han examinado formas de automatizar de manera inteligente la composición de servicios web en flujos de trabajo (por ejemplo, [1, 9]), un problema importante que aún persiste es la asignación de <br>solicitudes de servicios web</br> a los proveedores de servicios web subyacentes en un escenario de tiempo de ejecución multinivel dentro de ciertas restricciones. En este documento abordamos este problema de programación y examinamos medios para gestionar un gran número de flujos de trabajo de procesos comerciales de manera escalable. El problema de programar <br>solicitudes de servicios web</br> a proveedores es relevante para los dominios comerciales modernos que dependen de la provisión de servicios de múltiples niveles. ",
            "candidates": [],
            "error": [
                [
                    "solicitudes de servicios web",
                    "solicitudes de servicio",
                    "solicitudes de servicio",
                    "solicitudes de servicios web",
                    "solicitudes de servicios web"
                ]
            ]
        },
        "heuristic": {
            "translated_key": "heurística",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Heuristics-Based Scheduling of Composite Web Service Workloads Thomas Phan Wen-Syan Li IBM Almaden Research Center 650 Harry Rd.",
                "San Jose, CA 95120 {phantom,wsl}@us.ibm.com ABSTRACT Web services can be aggregated to create composite workflows that provide streamlined functionality for human users or other systems.",
                "Although industry standards and recent research have sought to define best practices and to improve end-to-end workflow composition, one area that has not fully been explored is the scheduling of a workflows web service requests to actual service provisioning in a multi-tiered, multi-organisation environment.",
                "This issue is relevant to modern business scenarios where business processes within a workflow must complete within QoS-defined limits.",
                "Because these business processes are web service consumers, service requests must be mapped and scheduled across multiple web service providers, each with its own negotiated service level agreement.",
                "In this paper we provide heuristics for scheduling service requests from multiple business process workflows to web service providers such that a business value metric across all workflows is maximised.",
                "We show that a genetic search algorithm is appropriate to perform this scheduling, and through experimentation we show that our algorithm scales well up to a thousand workflows and produces better mappings than traditional approaches.",
                "Categories and Subject Descriptors C.2.4 [Computer-Communication Networks]: Distributed Systems-distributed applications; D.2.8 [Software Engineering]: Metrics-complexity measures, performance measures 1.",
                "INTRODUCTION Web services can be composed into workflows to provide streamlined end-to-end functionality for human users or other systems.",
                "Although previous research efforts have looked at ways to intelligently automate the composition of web services into workflows (e.g. [1, 9]), an important remaining problem is the assignment of web service requests to the underlying web service providers in a multi-tiered runtime scenario within constraints.",
                "In this paper we address this scheduling problem and examine means to manage a large number of business process workflows in a scalable manner.",
                "The problem of scheduling web service requests to providers is relevant to modern business domains that depend on multi-tiered service provisioning.",
                "Consider the example shown in Figure 1 that illustrates our problem space.",
                "Workflows comprise multiple related business processes that are web service consumers; here we assume that the workflows represent requested service from customers or automated systems and that the workflow has already been composed with an existing choreography toolkit.",
                "These workflows are then submitted to a portal (not shown) that acts as a scheduling agent between the web service consumers and the web service providers.",
                "In this example, a workflow could represent the actions needed to instantiate a vacation itinerary, where one business process requests booking an airline ticket, another business process requests a hotel room, and so forth.",
                "Each of these requests target a particular service type (e.g. airline reservations, hotel reservations, car reservations, etc. ), and for each service type, there are multiple instances of service providers that publish a web service interface.",
                "An important challenge is that the workflows must meet some quality-of-service (QoS) metric, such as end-to-end completion time of all its business processes, and that meeting or failing this goal results in the assignment of a quantitative business value metric for the workflow; intuitively, it is desired that all workflows meet their respective QoS goals.",
                "We further leverage the notion that QoS service agreements are generally agreed-upon between the web service providers and the scheduling agent such that the providers advertise some level of guaranteed QoS to the scheduler based upon runtime conditions such as turnaround time and maximum available concurrency.",
                "The resulting problem is then to schedule and assign the business processes requests for service types to one of the service providers for that type.",
                "The scheduling must be done such that the aggregate business value across all the workflows is maximised.",
                "In Section 3 we state the scenario as a combinatorial problem and utilise a genetic search algorithm [5] to find the best assignment of web service requests to providers.",
                "This approach converges towards an assignment that maximises the overall business value for all the workflows.",
                "In Section 4 we show through experimentation that this search <br>heuristic</br> finds better assignments than other algorithms (greedy, round-robin, and proportional).",
                "Further, this approach allows us to scale the number of simultaneous workflows (up to one thousand workflows in our experiments) and yet still find effective schedules. 2.",
                "RELATED WORK In the context of service assignment and scheduling, [11] maps web service calls to potential servers using linear programming, but their work is concerned with mapping only single workflows; our principal focus is on scalably scheduling multiple workflows (up 30 Service Type SuperHotels.com Business Process Business Process Workflow ... Business Process Business Process ... HostileHostels.com IncredibleInns.com Business Process Business Process Business Process ... Business Process Service Provider SkyHighAirlines.com SuperCrazyFlights.com Business Process . . . . . .",
                "Advertised QoS Service Agreement CarRentalService.com Figure 1: An example scenario demonstrating the interaction between business processes in workflows and web service providers.",
                "Each business process accesses a service type and is then mapped to a service provider for that type. to one thousand as we show later) using different business metrics and a search <br>heuristic</br>. [10] presents a dynamic provisioning approach that uses both predictive and reactive techniques for multi-tiered Internet application delivery.",
                "However, the provisioning techniques do not consider the challenges faced when there are alternative query execution plans and replicated data sources. [8] presents a feedback-based scheduling mechanism for multi-tiered systems with back-end databases, but unlike our work, it assumes a tighter coupling between the various components of the system.",
                "Our work also builds upon prior scheduling research.",
                "The classic job-shop scheduling problem, shown to be NP-complete [4] [3], is similar to ours in that tasks within a job must be scheduled onto machinery (c.f. our scenario is that business processes within a workflow must be scheduled onto web service providers).",
                "The salient differences are that the machines can process only one job at a time (we assume servers can multi-task but with degraded performance and a maximum concurrency level), tasks within a job cannot simultaneously run on different machines (we assume business processes can be assigned to any available server), and the principal metric of performance is the makespan, which is the time for the last task among all the jobs to complete (and as we show later, optimising on the makespan is insufficient for scheduling the business processes, necessitating different metrics). 3.",
                "DESIGN In this section we describe our model and discuss how we can find scheduling assignments using a genetic search algorithm. 3.1 Model We base our model on the simplified scenario shown in Figure 1.",
                "Specifically, we assume that users or automated systems request the execution of a workflow.",
                "The workflows comprise business processes, each of which makes one web service invocation to a service type.",
                "Further, business processes have an ordering in the workflow.",
                "The arrangement and execution of the business processes and the data flow between them are all managed by a composition or choreography tool (e.g. [1, 9]).",
                "Although composition languages can use sophisticated flow-control mechanisms such as conditional branches, for simplicity we assume the processes execute sequentially in a given order.",
                "This scenario can be naturally extended to more complex relationships that can be expressed in BPEL [7], which defines how business processes interact, messages are exchanged, activities are ordered, and exceptions are handled.",
                "Due to space constraints, we focus on the problem space presented here and will extend our model to more advanced deployment scenarios in the future.",
                "Each workflow has a QoS requirement to complete within a specified number of time units (e.g. on the order of seconds, as detailed in the Experiments section).",
                "Upon completion (or failure), the workflow is assigned a business value.",
                "We extended this approach further and considered different types of workflow completion in order to model differentiated QoS levels that can be applied by businesses (for example, to provide tiered customer service).",
                "We say that a workflow is successful if it completes within its QoS requirement, acceptable if it completes within a constant factor κ 31 of its QoS bound (in our experiments we chose κ=3), or failing if it finishes beyond κ times its QoS bound.",
                "For each category, a business value score is assigned to the workflow, with the successful category assigned the highest positive score, followed by acceptable and then failing.",
                "The business value point distribution is non-uniform across workflows, further modelling cases where some workflows are of higher priority than others.",
                "Each service type is implemented by a number of different service providers.",
                "We assume that the providers make service level agreements (SLAs) to guarantee a level of performance defined by the completion time for completing a web service invocation.",
                "Although SLAs can be complex, in this paper we assume for simplicity that the guarantees can take the form of a linear performance degradation under load.",
                "This guarantee is defined by several parameters: α is the expected completion time (for example, on the order of seconds) if the assigned workload of web service requests is less than or equal to β, the maximum concurrency, and if the workload is higher than β, the expected completion for a workload of size ω is α+ γ(ω − β) where γ is a fractional coefficient.",
                "In our experiments we vary α, β, and γ with different distributions.",
                "Ideally, all workflows would be able to finish within their QoS limits and thus maximise the aggregate business value across all workflows.",
                "However, because we model service providers with degrading performance under load, not all workflows will achieve their QoS limit: it may easily be the case that business processes are assigned to providers who are overloaded and cannot complete within the respective workflows QoS limit.",
                "The key research problem, then, is to assign the business processes to the web service providers with the goal of optimising on the aggregate business value of all workflows.",
                "Given that the scope of the optimisation is the entire set of workflows, it may be that the best scheduling assignments may result in some workflows having to fail in order for more workflows to succeed.",
                "This intuitive observation suggests that traditional scheduling approaches such as round-robin or proportional assignments will not fare well, which is what we observe and discuss in Section 4.",
                "On the other hand, an exhaustive search of all the possible assignments will find the best schedule, but the computational complexity is prohibitively high.",
                "Suppose there are W workflows with an average of B business processes per workflow.",
                "Further, in the worst case each business process requests one service type, for which there are P providers.",
                "There are thus W · PB combinations to explore to find the optimal assignments of business processes to providers.",
                "Even for small configurations (e.g.",
                "W =10, B=5, P=10), the computational time for exhaustive search is significant, and in our work we look to scale these parameters.",
                "In the next subsection, discuss how a genetic search algorithm can be used to converge toward the optimum scheduling assignments. 3.2 Genetic algorithm Given an exponential search space of business process assignments to web service providers, the problem is to find the optimal assignment that produces the overall highest aggregate business value across all workflows.",
                "To explore the solution space, we use a genetic algorithm (GA) search <br>heuristic</br> that simulates Darwinian natural selection by having members of a population compete to survive in order to pass their genetic chromosomes onto the next generation; after successive generations, there is a tendency for the chromosomes to converge toward the best combination [5] [6].",
                "Although other search heuristics exist that can solve optimization problems (e.g. simulated annealing or steepest-ascent hillclimbing), the business process scheduling problem fits well with a GA because potential solutions can be represented in a matrix form and allows us to use prior research in effective GA chromosome recombination to form new members of the population (e.g. [2]). 0 1 2 3 4 0 1 2 0 2 1 1 0 1 0 1 0 2 1 2 0 0 1 Figure 2: An example chromosome representing a scheduling assignment of (workflow,service type) → service provider.",
                "Each row represents a workflow, and each column represents a service type.",
                "For example, here there are 3 workflows (0 to 2) and 5 service types (0 to 4).",
                "In workflow 0, any request for service type 3 goes to provider 2.",
                "Note that the service provider identifier is within a range limited to its service type (i.e. its column), so the 2 listed for service type 3 is a different server from server 2 in other columns.",
                "Chromosome representation of a solution.",
                "In Figure 2 we show an example chromosome that encodes one scheduling assignment.",
                "The representation is a 2-dimensional matrix that maps {workflow, service type} to a service provider.",
                "For a business process in workflow i and utilising service type j, the (i, j)th entry in the table is the identifier for the service provider to which the business process is assigned.",
                "Note that the service provider identifier is within a range limited to its service type.",
                "GA execution.",
                "A GA proceeds as follows.",
                "Initially a random set of chromosomes is created for the population.",
                "The chromosomes are evaluated (hashed) to some metric, and the best ones are chosen to be parents.",
                "In our problem, the evaluation produces the net business value across all workflows after executing all business processes once they are assigned to their respective service providers according to the mapping in the chromosome.",
                "The parents recombine to produce children, simulating sexual crossover, and occasionally a mutation may arise which produces new characteristics that were not available in either parent.",
                "The principal idea is that we would like the children to be different from the parents (in order to explore more of the solution space) yet not too different (in order to contain the portions of the chromosome that result in good scheduling assignments).",
                "Note that finding the global optimum is not guaranteed because the recombination and mutation are stochastic.",
                "GA recombination and mutation.",
                "As mentioned, the chromosomes are 2-dimensional matrices that represent scheduling assignments.",
                "To simulate sexual recombination of two chromosomes to produce a new child chromosome, we applied a one-point crossover scheme twice (once along each dimension).",
                "The crossover is best explained by analogy to Cartesian space as follows.",
                "A random point is chosen in the matrix to be coordinate (0, 0).",
                "Matrix elements from quadrants II and IV from the first parent and elements from quadrants I and III from the second parent are used to create the new child.",
                "This approach follows GA best practices by keeping contiguous chromosome segments together as they are transmitted from parent to child.",
                "The uni-chromosome mutation scheme randomly changes one of the service provider assignments to another provider within the available range.",
                "Other recombination and mutation schemes are an area of research in the GA community, and we look to explore new operators in future work.",
                "GA evaluation function.",
                "An important GA component is the evaluation function.",
                "Given a particular chromosome representing one scheduling mapping, the function deterministically calculates the net business value across all workloads.",
                "The business processes in each workload are assigned to service providers, and each providers completion time is calculated based on the service agreement guarantee using the parameters mentioned in Section 3.1, namely the unloaded completion time α, the maximum concur32 rency β, and a coefficient γ that controls the linear performance degradation under heavy load.",
                "Note that the evaluation function can be easily replaced if desired; for example, other evaluation functions can model different service provider guarantees or parallel workflows. 4.",
                "EXPERIMENTS AND RESULTS In this section we show the benefit of using our GA-based scheduler.",
                "Because we wanted to scale the scenarios up to a large number of workflows (up to 1000 in our experiments), we implemented a simulation program that allowed us to vary parameters and to measure the results with different metrics.",
                "The simulator was written in standard C++ and was run on a Linux (Fedora Core) desktop computer running at 2.8 GHz with 1GB of RAM.",
                "We compared our algorithm against alternative candidates: • A well-known round-robin algorithm that assigns each business process in circular fashion to the service providers for a particular service type.",
                "This approach provides the simplest scheme for load-balancing. • A random-proportional algorithm that proportionally assigns business processes to the service providers; that is, for a given service type, the service providers are ranked by their guaranteed completion time, and business processes are assigned proportionally to the providers based on their completion time. (We also tried a proportionality scheme based on both the completion times and maximum concurrency but attained the same results, so only the former schemes results are shown here.) • A strawman greedy algorithm that always assigns business processes to the service provider that has the fastest guaranteed completion time.",
                "This algorithm represents a naive approach based on greedy, local observations of each workflow without taking into consideration all workflows.",
                "In the experiments that follow, all results were averaged across 20 trials, and to help normalise the effects of randomisation used during the GA, each trial started by reading in pre-initialised data from disk.",
                "In Table 1 we list our experimental parameters.",
                "In Figure 3 we show the results of running our GA against the three candidate alternatives.",
                "The x-axis shows the number for workflows scaled up to 1000, and the y-axis shows the aggregate business value for all workflows.",
                "As can be seen, the GA consistently produces the highest business value even as the number of workflows grows; at 1000 workflows, the GA produces a 115% improvement over the next-best alternative. (Note that although we are optimising against the business value metric we defined earlier, genetic algorithms are able to converge towards the optimal value of any metric, as long as the evaluation function can consistently measure a chromosomes value with that metric.)",
                "As expected, the greedy algorithm performs very poorly because it does the worst job at balancing load: all business processes for a given service type are assigned to only one server (the one advertised to have the fastest completion time), and as more business processes arrive, the providers performance degrades linearly.",
                "The round-robin scheme is initially outperformed by the randomproportional scheme up to around 120 workflows (as shown in the magnified graph of Figure 4), but as the number of workflows increases, the round-robin scheme consistently wins over randomproportional.",
                "The reason is that although the random-proportional scheme assigns business processes to providers proportionally according to the advertised completion times (which is a measure of the power of the service provider), even the best providers will eventually reach a real-world maximum concurrency for the large -2000 -1000 0 1000 2000 3000 4000 5000 6000 7000 0 200 400 600 800 1000 Aggregatebusinessvalueacrossallworkflows Total number of workflows Business value scores of scheduling algorithms Genetic algorithm Round robin Random proportional Greedy Figure 3: Net business value scores of different scheduling algorithms. -500 0 500 1000 1500 2000 2500 3000 3500 4000 0 50 100 150 200Aggregatebusinessvalueacrossallworkflows Total number of workflows Business value scores of scheduling algorithms Genetic algorithm Round robin Random proportional Greedy Figure 4: Magnification of the left-most region in Figure 3. number of workflows that we are considering.",
                "For a very large number of workflows, the round-robin scheme is able to better balance the load across all service providers.",
                "To better understand the behaviour resulting from the scheduling assignments, we show the workflow completion results in Figures 5, 6, and 7 for 100, 500, and 900 workflows, respectively.",
                "These figures show the percentage of workflows that are successful (can complete with their QoS limit), acceptable (can complete within κ=3 times their QoS limit), and failed (cannot complete within κ=3 times their QoS limit).",
                "The GA consistently produces the highest percentage of successful workflows (resulting in higher business values for the aggregate set of workflows).",
                "Further, the round-robin scheme produces better results than the random-proportional for a large number of workflows but does not perform as well as the GA.",
                "In Figure 8 we graph the makespan resulting from the same experiments above.",
                "Makespan is a traditional metric from the job scheduling community measuring elapsed time for the last job to complete.",
                "While useful, it does not capture the high-level business value metric that we are optimising against.",
                "Indeed, the makespan is oblivious to the fact that we provide multiple levels of completion (successful, acceptable, and failed) and assign business value scores accordingly.",
                "For completeness, we note that the GA provides the fastest makespan, but it is matched by the round robin algorithm.",
                "The GA produces better business values (as shown in Figure 3) because it is able to search the solution space to find better mappings that produce more successful workflows (as shown in Figures 5 to 7).",
                "We also looked at the effect of the scheduling algorithms on balancing the load.",
                "Figure 9 shows the percentage of services providers that were accessed while the workflows ran.",
                "As expected, the greedy algorithm always hits one service provider; on the other hand, the round-robin algorithm is the fastest to spread the business 33 Experimental parameter Comment Workflows 5 to 1000 Business processes per workflow uniform random: 1 - 10 Service types 10 Service providers per service type uniform random: 1 - 10 Workflow QoS goal uniform random: 10-30 seconds Service provider completion time (α) uniform random: 1 - 12 seconds Service provider maximum concurrency (β) uniform random: 1 - 12 Service provider degradation coefficient (γ) uniform random: 0.1 - 0.9 Business value for successful workflows uniform random: 10 - 50 points Business value for acceptable workflows uniform random: 0 - 10 points Business value for failed workflows uniform random: -10 - 0 points GA: number of parents 20 GA: number of children 80 GA: number of generations 1000 Table 1: Experimental parameters Failed Acceptable (completed but not within QoS) Successful (completed within QoS) 0% 20% 40% 60% 80% 100% RoundRobinRandProportionalGreedyGeneticAlg Percentageofallworkflows Workflow behaviour, 100 workflows Figure 5: Workflow behaviour for 100 workflows.",
                "Failed Acceptable (completed but not within QoS) Successful (completed within QoS) 0% 20% 40% 60% 80% 100% RoundRobinRandProportionalGreedyGeneticAlg Percentageofallworkflows Workflow behaviour, 500 workflows Figure 6: Workflow behaviour for 500 workflows.",
                "Failed Acceptable (completed but not within QoS) Successful (completed within QoS) 0% 20% 40% 60% 80% 100% RoundRobinRandProportionalGreedyGeneticAlg Percentageofallworkflows Workflow behaviour, 500 workflows Figure 7: Workflow behaviour for 900 workflows. 0 50 100 150 200 250 300 0 200 400 600 800 1000 Makespan[seconds] Number of workflows Maximum completion time for all workflows Genetic algorithm Round robin Random proportional Greedy Figure 8: Maximum completion time for all workflows.",
                "This value is the makespan metric used in traditional scheduling research.",
                "Although useful, the makespan does not take into consideration the business value scoring in our problem domain. processes.",
                "Figure 10 is the percentage of accessed service providers (that is, the percentage of service providers represented in Figure 9) that had more assigned business processes than their advertised maximum concurrency.",
                "For example, in the greedy algorithm only one service provider is utilised, and this one provider quickly becomes saturated.",
                "On the other hand, the random-proportional algorithm uses many service providers, but because business processes are proportionally assigned with more assignments going to the better providers, there is a tendency for a smaller percentage of providers to become saturated.",
                "For completeness, we show the performance of the genetic algorithm itself in Figure 11.",
                "The algorithm scales linearly with an increasing number of workflows.",
                "We note that the round-robin, random-proportional, and greedy algorithms all finished within 1 second even for the largest workflow configuration.",
                "However, we feel that the benefit of finding much higher business value scores justifies the running time of the GA; further we would expect that the running time will improve with both software tuning as well as with a computer faster than our off-the-shelf PC. 5.",
                "CONCLUSION Business processes within workflows can be orchestrated to access web services.",
                "In this paper we looked at multi-tiered service provisioning where web service requests to service types can be mapped to different service providers.",
                "The resulting problem is that in order to support a very large number of workflows, the assignment of business process to web service provider must be intelligent.",
                "We used a business value metric to measure the be34 0 0.2 0.4 0.6 0.8 1 0 200 400 600 800 1000 Percentageofallserviceproviders Number of workflows Service providers utilised Genetic algorithm Round robin Random proportional Greedy Figure 9: The percentage of service providers utilized during workload executions.",
                "The Greedy algorithm always hits the one service provider, while the Round Robin algorithm spreads requests evenly across the providers. 0 0.2 0.4 0.6 0.8 1 0 200 400 600 800 1000 Percentageofallserviceproviders Number of workflows Service providers saturated Genetic algorithm Round robin Random proportional Greedy Figure 10: The percentage of service providers that are saturated among those providers who were utilized (that is, percentage of the service providers represented in Figure 9).",
                "A saturated service provider is one whose workload is greater that its advertised maximum concurrency. 0 5 10 15 20 25 0 200 400 600 800 1000 Runningtimeinseconds Total number of workflows Running time of genetic algorithm GA running time Figure 11: Running time of the genetic algorithm. haviour of workflows meeting or failing QoS values, and we optimised our scheduling to maximise the aggregate business value across all workflows.",
                "Since the solution space of scheduler mappings is exponential, we used a genetic search algorithm to search the space and converge toward the best schedule.",
                "With a default configuration for all parameters and using our business value scoring, the GA produced up to 115% business value improvement over the next best algorithm.",
                "Finally, because a genetic algorithm will converge towards the optimal value using any metric (even other than the business value metric we used), we believe our approach has strong potential for continuing work.",
                "In future work, we look to acquire real-world traces of web service instances in order to get better estimates of service agreement guarantees, although we expect that such guarantees between the providers and their consumers are not generally available to the public.",
                "We will also look at other QoS metrics such as CPU and I/O usage.",
                "For example, we can analyse transfer costs with varying bandwidth, latency, data size, and data distribution.",
                "Further, we hope to improve our genetic algorithm and compare it to more scheduler alternatives.",
                "Finally, since our work is complementary to existing work in web services choreography (because we rely on pre-configured workflows), we look to integrate our approach with available web service workflow systems expressed in BPEL. 6.",
                "REFERENCES [1] A. Ankolekar, et al.",
                "DAML-S: Semantic Markup For Web Services, In Proc. of the Intl Semantic Web Working Symposium, 2001. [2] L. Davis.",
                "Job Shop Scheduling with Genetic Algorithms, In Proc. of the Intl Conference on Genetic Algorithms, 1985. [3] H.-L. Fang, P. Ross, and D. Corne.",
                "A Promising Genetic Algorithm Approach to Job-Shop Scheduling, Rescheduling, and Open-Shop Scheduling Problems , In Proc. on the 5th Intl Conference on Genetic Algorithms, 1993. [4] M. Gary and D. Johnson.",
                "Computers and Intractability: A Guide to the Theory of NP-Completeness, Freeman, 1979. [5] J. Holland.",
                "Adaptation in Natural and Artificial Systems: An Introductory Analysis with Applications to Biology, Control, and Artificial Intelligence, MIT Press, 1992. [6] D. Goldberg.",
                "Genetic Algorithms in Search, Optimization and Machine Learning, Kluwer Academic Publishers, 1989. [7] Business Processes in a Web Services World, www-128.ibm.com/developerworks/ webservices/library/ws-bpelwp/. [8] G. Soundararajan, K. Manassiev, J. Chen, A. Goel, and C. Amza.",
                "Back-end Databases in Shared Dynamic Content Server Clusters, In Proc. of the IEEE Intl Conference on Autonomic Computing, 2005. [9] B. Srivastava and J. Koehler.",
                "Web Service Composition Current Solutions and Open Problems, ICAP, 2003. [10] B. Urgaonkar, P. Shenoy, A. Chandra, and P. Goyal.",
                "Dynamic Provisioning of Multi-Tier Internet Applications, In Proc. of the IEEE Intl Conference on Autonomic Computing, 2005. [11] L. Zeng, B. Benatallah, M. Dumas, J. Kalagnanam, and Q. Sheng.",
                "Quality Driven Web Services Composition, In Proc. of the WWW Conference, 2003. 35"
            ],
            "original_annotated_samples": [
                "In Section 4 we show through experimentation that this search <br>heuristic</br> finds better assignments than other algorithms (greedy, round-robin, and proportional).",
                "Each business process accesses a service type and is then mapped to a service provider for that type. to one thousand as we show later) using different business metrics and a search <br>heuristic</br>. [10] presents a dynamic provisioning approach that uses both predictive and reactive techniques for multi-tiered Internet application delivery.",
                "To explore the solution space, we use a genetic algorithm (GA) search <br>heuristic</br> that simulates Darwinian natural selection by having members of a population compete to survive in order to pass their genetic chromosomes onto the next generation; after successive generations, there is a tendency for the chromosomes to converge toward the best combination [5] [6]."
            ],
            "translated_annotated_samples": [
                "En la Sección 4 mostramos a través de experimentación que esta <br>heurística</br> de búsqueda encuentra asignaciones mejores que otros algoritmos (codicioso, round-robin y proporcional).",
                "Cada proceso empresarial accede a un tipo de servicio y luego se asigna a un proveedor de servicios para ese tipo, a uno mil como mostraremos más adelante, utilizando diferentes métricas empresariales y una <br>heurística de búsqueda</br>. [10] presenta un enfoque de aprovisionamiento dinámico que utiliza técnicas predictivas y reactivas para la entrega de aplicaciones de Internet multinivel.",
                "Para explorar el espacio de soluciones, utilizamos un algoritmo genético (GA) que simula la selección natural darwiniana al hacer que los miembros de una población compitan por sobrevivir para transmitir sus cromosomas genéticos a la siguiente generación; después de generaciones sucesivas, hay una tendencia a que los cromosomas converjan hacia la mejor combinación."
            ],
            "translated_text": "Programación basada en heurísticas de cargas de trabajo de servicios web compuestos Thomas Phan Wen-Syan Li Centro de Investigación IBM Almaden 650 Harry Rd. Los servicios web pueden ser agregados para crear flujos de trabajo compuestos que proporcionen funcionalidad simplificada para usuarios humanos u otros sistemas. Aunque los estándares de la industria y la investigación reciente han buscado definir las mejores prácticas y mejorar la composición del flujo de trabajo de extremo a extremo, un área que no ha sido completamente explorada es la programación de las solicitudes de servicios web de los flujos de trabajo para la provisión real de servicios en un entorno multinivel y multiorganizacional. Este problema es relevante para los escenarios empresariales modernos donde los procesos comerciales dentro de un flujo de trabajo deben completarse dentro de los límites definidos por la calidad de servicio (QoS). Debido a que estos procesos comerciales son consumidores de servicios web, las solicitudes de servicio deben ser mapeadas y programadas entre múltiples proveedores de servicios web, cada uno con su propio acuerdo de nivel de servicio negociado. En este documento proporcionamos heurísticas para programar solicitudes de servicio de múltiples flujos de trabajo de procesos comerciales a proveedores de servicios web de manera que se maximice una métrica de valor comercial en todos los flujos de trabajo. Mostramos que un algoritmo de búsqueda genética es apropiado para realizar esta programación, y a través de experimentación demostramos que nuestro algoritmo escala bien hasta mil flujos de trabajo y produce mejores asignaciones que enfoques tradicionales. Categorías y Descriptores de Asignaturas C.2.4 [Redes de Computadoras-Comunicación]: Sistemas Distribuidos-aplicaciones distribuidas; D.2.8 [Ingeniería de Software]: Métricas-medidas de complejidad, medidas de rendimiento 1. INTRODUCCIÓN Los servicios web pueden ser compuestos en flujos de trabajo para proporcionar funcionalidad integrada de principio a fin para usuarios humanos u otros sistemas. Aunque los esfuerzos de investigación previos han examinado formas de automatizar de manera inteligente la composición de servicios web en flujos de trabajo (por ejemplo, [1, 9]), un problema importante que aún persiste es la asignación de solicitudes de servicios web a los proveedores de servicios web subyacentes en un escenario de tiempo de ejecución multinivel dentro de ciertas restricciones. En este documento abordamos este problema de programación y examinamos medios para gestionar un gran número de flujos de trabajo de procesos comerciales de manera escalable. El problema de programar solicitudes de servicios web a proveedores es relevante para los dominios comerciales modernos que dependen de la provisión de servicios de múltiples niveles. Considera el ejemplo mostrado en la Figura 1 que ilustra nuestro espacio de problemas. Los flujos de trabajo comprenden múltiples procesos comerciales relacionados que son consumidores de servicios web; aquí asumimos que los flujos de trabajo representan servicios solicitados por clientes o sistemas automatizados y que el flujo de trabajo ya ha sido compuesto con una herramienta de coreografía existente. Estos flujos de trabajo son luego enviados a un portal (no mostrado) que actúa como un agente de programación entre los consumidores del servicio web y los proveedores del servicio web. En este ejemplo, un flujo de trabajo podría representar las acciones necesarias para crear un itinerario de vacaciones, donde un proceso empresarial solicita la reserva de un boleto de avión, otro proceso empresarial solicita una habitación de hotel, y así sucesivamente. Cada una de estas solicitudes apunta a un tipo de servicio en particular (por ejemplo, reservas de aerolíneas, reservas de hoteles, reservas de autos, etc.), y para cada tipo de servicio, hay múltiples instancias de proveedores de servicios que publican una interfaz de servicio web. Un desafío importante es que los flujos de trabajo deben cumplir con alguna métrica de calidad de servicio (QoS), como el tiempo de finalización de extremo a extremo de todos sus procesos comerciales, y que cumplir o no con este objetivo resulta en la asignación de una métrica de valor comercial cuantitativo para el flujo de trabajo; intuitivamente, se desea que todos los flujos de trabajo cumplan con sus respectivos objetivos de QoS. Además, aprovechamos la idea de que los acuerdos de servicio de QoS suelen ser acordados entre los proveedores de servicios web y el agente de programación de tal manera que los proveedores anuncian un cierto nivel de QoS garantizado al programador en función de condiciones de tiempo de respuesta y concurrencia máxima disponible. El problema resultante es entonces programar y asignar las solicitudes de procesos comerciales para tipos de servicio a uno de los proveedores de servicios para ese tipo. La programación debe realizarse de tal manera que se maximice el valor comercial agregado en todos los flujos de trabajo. En la Sección 3 planteamos el escenario como un problema combinatorio y utilizamos un algoritmo de búsqueda genética [5] para encontrar la mejor asignación de solicitudes de servicios web a proveedores. Este enfoque converge hacia una asignación que maximiza el valor comercial general para todos los flujos de trabajo. En la Sección 4 mostramos a través de experimentación que esta <br>heurística</br> de búsqueda encuentra asignaciones mejores que otros algoritmos (codicioso, round-robin y proporcional). Además, este enfoque nos permite escalar el número de flujos de trabajo simultáneos (hasta mil flujos de trabajo en nuestros experimentos) y aún así encontrar horarios efectivos. 2. TRABAJO RELACIONADO En el contexto de asignación y programación de servicios, [11] mapea llamadas de servicios web a servidores potenciales utilizando programación lineal, pero su trabajo se centra en mapear solo flujos de trabajo individuales; nuestro enfoque principal está en programar de manera escalable múltiples flujos de trabajo (hasta 30 tipos de servicios SuperHotels.com Proceso de Negocio Proceso de Negocio Flujo de Trabajo ... Proceso de Negocio Proceso de Negocio ... HostileHostels.com IncredibleInns.com Proceso de Negocio Proceso de Negocio Proceso de Negocio ... Proceso de Negocio Proveedor de Servicios SkyHighAirlines.com SuperCrazyFlights.com Proceso de Negocio . . . . . . Acuerdo de Servicio de Calidad de Servicio (QoS) Publicitado CarRentalService.com Figura 1: Un escenario de ejemplo que muestra la interacción entre procesos comerciales en flujos de trabajo y proveedores de servicios web. Cada proceso empresarial accede a un tipo de servicio y luego se asigna a un proveedor de servicios para ese tipo, a uno mil como mostraremos más adelante, utilizando diferentes métricas empresariales y una <br>heurística de búsqueda</br>. [10] presenta un enfoque de aprovisionamiento dinámico que utiliza técnicas predictivas y reactivas para la entrega de aplicaciones de Internet multinivel. Sin embargo, las técnicas de aprovisionamiento no consideran los desafíos enfrentados cuando hay planes alternativos de ejecución de consultas y fuentes de datos replicadas. [8] presenta un mecanismo de programación basado en retroalimentación para sistemas multinivel con bases de datos de back-end, pero a diferencia de nuestro trabajo, asume un acoplamiento más estrecho entre los diversos componentes del sistema. Nuestro trabajo también se basa en investigaciones previas sobre programación. El problema clásico de programación de talleres, demostrado como NP-completo [4] [3], es similar al nuestro en el sentido de que las tareas dentro de un trabajo deben ser programadas en maquinaria (cf. nuestro escenario es que los procesos comerciales dentro de un flujo de trabajo deben ser programados en proveedores de servicios web). Las diferencias más destacadas son que las máquinas solo pueden procesar un trabajo a la vez (asumimos que los servidores pueden realizar múltiples tareas pero con un rendimiento degradado y un nivel máximo de concurrencia), las tareas dentro de un trabajo no pueden ejecutarse simultáneamente en diferentes máquinas (asumimos que los procesos comerciales pueden asignarse a cualquier servidor disponible), y la métrica principal de rendimiento es el makespan, que es el tiempo que tarda la última tarea de todos los trabajos en completarse (y como mostraremos más adelante, optimizar el makespan no es suficiente para programar los procesos comerciales, lo que requiere diferentes métricas). 3. En esta sección describimos nuestro modelo y discutimos cómo podemos encontrar asignaciones de programación utilizando un algoritmo de búsqueda genética. 3.1 Modelo Basamos nuestro modelo en el escenario simplificado mostrado en la Figura 1. Específicamente, asumimos que los usuarios o sistemas automatizados solicitan la ejecución de un flujo de trabajo. Los flujos de trabajo comprenden procesos comerciales, cada uno de los cuales realiza una invocación de servicio web a un tipo de servicio. Además, los procesos comerciales tienen un orden en el flujo de trabajo. La disposición y ejecución de los procesos comerciales y el flujo de datos entre ellos son gestionados por una herramienta de composición o coreografía (por ejemplo, [1, 9]). Aunque los lenguajes de composición pueden utilizar mecanismos sofisticados de control de flujo como ramas condicionales, para simplificar asumimos que los procesos se ejecutan secuencialmente en un orden dado. Este escenario puede ser extendido de forma natural a relaciones más complejas que pueden ser expresadas en BPEL [7], el cual define cómo interactúan los procesos de negocio, se intercambian mensajes, se ordenan actividades y se manejan excepciones. Debido a limitaciones de espacio, nos enfocamos en el espacio de problemas presentado aquí y extenderemos nuestro modelo a escenarios de implementación más avanzados en el futuro. Cada flujo de trabajo tiene un requisito de calidad de servicio (QoS) que debe completarse dentro de un número específico de unidades de tiempo (por ejemplo, del orden de segundos, como se detalla en la sección de Experimentos). Una vez completado (o fallido), se asigna un valor comercial al flujo de trabajo. Extendimos este enfoque aún más y consideramos diferentes tipos de finalización de flujo de trabajo para modelar niveles diferenciados de QoS que pueden ser aplicados por las empresas (por ejemplo, para proporcionar servicios al cliente escalonados). Decimos que un flujo de trabajo es exitoso si se completa dentro de su requisito de QoS, aceptable si se completa dentro de un factor constante κ 31 de su límite de QoS (en nuestros experimentos elegimos κ=3), o fallido si termina más allá de κ veces su límite de QoS. Para cada categoría, se asigna un puntaje de valor comercial al flujo de trabajo, siendo la categoría exitosa la que recibe la puntuación positiva más alta, seguida por la aceptable y luego la fallida. La distribución de puntos de valor empresarial no es uniforme en los flujos de trabajo, lo que modela casos en los que algunos flujos de trabajo tienen mayor prioridad que otros. Cada tipo de servicio es implementado por varios proveedores de servicios diferentes. Suponemos que los proveedores hacen acuerdos de nivel de servicio (SLAs) para garantizar un nivel de rendimiento definido por el tiempo de finalización de una invocación de servicio web. Aunque los Acuerdos de Nivel de Servicio (SLAs) pueden ser complejos, en este documento asumimos, para simplificar, que las garantías pueden adoptar la forma de una degradación lineal del rendimiento bajo carga. Esta garantía está definida por varios parámetros: α es el tiempo de finalización esperado (por ejemplo, del orden de segundos) si la carga de trabajo asignada de las solicitudes de servicio web es menor o igual a β, la concurrencia máxima, y si la carga de trabajo es mayor que β, la finalización esperada para una carga de trabajo de tamaño ω es α + γ(ω − β) donde γ es un coeficiente fraccional. En nuestros experimentos variamos α, β y γ con diferentes distribuciones. Idealmente, todos los flujos de trabajo podrían finalizar dentro de sus límites de calidad de servicio (QoS) y, por lo tanto, maximizar el valor empresarial agregado en todos los flujos de trabajo. Sin embargo, debido a que modelamos a los proveedores de servicios con un rendimiento degradante bajo carga, no todos los flujos de trabajo alcanzarán su límite de calidad de servicio (QoS): fácilmente puede darse el caso de que los procesos comerciales sean asignados a proveedores que están sobrecargados y no pueden completarse dentro del límite de calidad de servicio respectivo de los flujos de trabajo. El problema clave de investigación, entonces, es asignar los procesos comerciales a los proveedores de servicios web con el objetivo de optimizar el valor comercial agregado de todos los flujos de trabajo. Dado que el alcance de la optimización es el conjunto completo de flujos de trabajo, puede ser que las mejores asignaciones de programación resulten en que algunos flujos de trabajo tengan que fallar para que otros tengan éxito. Esta observación intuitiva sugiere que enfoques de programación tradicionales como el round-robin o asignaciones proporcionales no funcionarán bien, lo cual es lo que observamos y discutimos en la Sección 4. Por otro lado, una búsqueda exhaustiva de todas las posibles asignaciones encontrará el mejor horario, pero la complejidad computacional es prohibitivamente alta. Supongamos que hay W flujos de trabajo con un promedio de B procesos de negocio por flujo de trabajo. Además, en el peor de los casos, cada proceso empresarial solicita un tipo de servicio, para el cual hay P proveedores. Por lo tanto, hay W · PB combinaciones para explorar y encontrar las asignaciones óptimas de procesos comerciales a proveedores. Incluso para configuraciones pequeñas (por ejemplo, Dado que (W=10, B=5, P=10), el tiempo computacional para la búsqueda exhaustiva es significativo, y en nuestro trabajo buscamos ajustar estos parámetros. En la siguiente subsección, discuta cómo se puede utilizar un algoritmo de búsqueda genética para converger hacia las asignaciones de programación óptimas. 3.2 Algoritmo genético Dado un espacio de búsqueda exponencial de asignaciones de procesos comerciales a proveedores de servicios web, el problema es encontrar la asignación óptima que produzca el valor comercial agregado más alto en general en todos los flujos de trabajo. Para explorar el espacio de soluciones, utilizamos un algoritmo genético (GA) que simula la selección natural darwiniana al hacer que los miembros de una población compitan por sobrevivir para transmitir sus cromosomas genéticos a la siguiente generación; después de generaciones sucesivas, hay una tendencia a que los cromosomas converjan hacia la mejor combinación. Aunque existen otras heurísticas de búsqueda que pueden resolver problemas de optimización (por ejemplo, recocido simulado o escalada de colina más empinada), el problema de programación de procesos empresariales se adapta bien a un AG porque las soluciones potenciales pueden representarse en forma de matriz y nos permite utilizar investigaciones previas en la recombinación efectiva de cromosomas de AG para formar nuevos miembros de la población (por ejemplo, [2]). 0 1 2 3 4 0 1 2 0 2 1 1 0 1 0 1 0 2 1 2 0 0 1 Figura 2: Un ejemplo de cromosoma que representa una asignación de programación de (flujo de trabajo, tipo de servicio) → proveedor de servicios. Cada fila representa un flujo de trabajo, y cada columna representa un tipo de servicio. Por ejemplo, aquí hay 3 flujos de trabajo (0 a 2) y 5 tipos de servicio (0 a 4). En el flujo de trabajo 0, cualquier solicitud de tipo de servicio 3 se dirige al proveedor 2. Ten en cuenta que el identificador del proveedor de servicios se encuentra dentro de un rango limitado a su tipo de servicio (es decir, su columna), por lo que el 2 listado para el tipo de servicio 3 es un servidor diferente al servidor 2 en otras columnas. Representación cromosómica de una solución. En la Figura 2 mostramos un ejemplo de cromosoma que codifica una asignación de programación. La representación es una matriz bidimensional que mapea {flujo de trabajo, tipo de servicio} a un proveedor de servicios. Para un proceso de negocio en el flujo de trabajo i y utilizando el tipo de servicio j, la entrada (i, j)-ésima en la tabla es el identificador del proveedor de servicios al que se asigna el proceso de negocio. Ten en cuenta que el identificador del proveedor de servicios se encuentra dentro de un rango limitado a su tipo de servicio. Ejecución de GA. Un algoritmo genético procede de la siguiente manera. Inicialmente se crea un conjunto aleatorio de cromosomas para la población. Los cromosomas son evaluados (hasheados) según alguna métrica, y los mejores son elegidos para ser padres. En nuestro problema, la evaluación produce el valor neto del negocio en todos los flujos de trabajo después de ejecutar todos los procesos comerciales una vez que se asignan a sus respectivos proveedores de servicios de acuerdo con el mapeo en el cromosoma. Los padres se recombinan para producir hijos, simulando un cruce sexual, y ocasionalmente puede surgir una mutación que produce nuevas características que no estaban disponibles en ninguno de los padres. La idea principal es que nos gustaría que los niños fueran diferentes de los padres (para explorar más del espacio de soluciones) pero no demasiado diferentes (para contener las porciones del cromosoma que resultan en asignaciones de programación exitosas). Ten en cuenta que encontrar el óptimo global no está garantizado debido a que la recombinación y la mutación son estocásticas. Recombinación y mutación de ADN. Como se mencionó, los cromosomas son matrices bidimensionales que representan asignaciones de horarios. Para simular la recombinación sexual de dos cromosomas para producir un nuevo cromosoma hijo, aplicamos un esquema de cruce de un punto dos veces (una vez a lo largo de cada dimensión). El cruce se explica mejor por analogía al espacio cartesiano de la siguiente manera. Se elige un punto al azar en la matriz para que sea la coordenada (0, 0). Los elementos de la matriz de los cuadrantes II y IV del primer progenitor y los elementos de los cuadrantes I y III del segundo progenitor se utilizan para crear el nuevo hijo. Este enfoque sigue las mejores prácticas de los algoritmos genéticos al mantener juntos los segmentos cromosómicos contiguos a medida que se transmiten de padre a hijo. El esquema de mutación de uni-cromosoma cambia aleatoriamente una de las asignaciones de proveedor de servicios a otro proveedor dentro del rango disponible. Otros esquemas de recombinación y mutación son un área de investigación en la comunidad de AG, y buscamos explorar nuevos operadores en trabajos futuros. Función de evaluación de GA. Un componente importante de los algoritmos genéticos es la función de evaluación. Dada una cromosoma particular que representa un mapeo de programación, la función calcula de manera determinista el valor neto del negocio en todas las cargas de trabajo. Los procesos comerciales en cada carga de trabajo se asignan a proveedores de servicios, y el tiempo de finalización de cada proveedor se calcula en función de la garantía del acuerdo de servicio utilizando los parámetros mencionados en la Sección 3.1, a saber, el tiempo de finalización sin carga α, la máxima concurrencia β y un coeficiente γ que controla la degradación del rendimiento lineal bajo carga pesada. Ten en cuenta que la función de evaluación puede ser fácilmente reemplazada si se desea; por ejemplo, otras funciones de evaluación pueden modelar diferentes garantías de proveedores de servicios o flujos de trabajo paralelos. 4. EXPERIMENTOS Y RESULTADOS En esta sección mostramos el beneficio de utilizar nuestro planificador basado en algoritmos genéticos. Debido a que queríamos escalar los escenarios a un gran número de flujos de trabajo (hasta 1000 en nuestros experimentos), implementamos un programa de simulación que nos permitió variar parámetros y medir los resultados con diferentes métricas. El simulador fue escrito en C++ estándar y se ejecutó en un ordenador de escritorio Linux (Fedora Core) con una velocidad de 2.8 GHz y 1GB de RAM. Comparamos nuestro algoritmo con candidatos alternativos: • Un algoritmo de round-robin bien conocido que asigna cada proceso comercial de forma circular a los proveedores de servicios para un tipo de servicio en particular. Este enfoque proporciona el esquema más simple para el equilibrio de carga. • Un algoritmo aleatorio-proporcional que asigna proporcionalmente los procesos comerciales a los proveedores de servicios; es decir, para un tipo de servicio dado, los proveedores de servicios se clasifican según su tiempo de finalización garantizado, y los procesos comerciales se asignan proporcionalmente a los proveedores en función de su tiempo de finalización. (También probamos un esquema de proporcionalidad basado tanto en los tiempos de finalización como en la concurrencia máxima, pero obtuvimos los mismos resultados, por lo que solo se muestran los resultados de los esquemas anteriores aquí.) • Un algoritmo codicioso de hombre de paja que siempre asigna los procesos comerciales al proveedor de servicios que tiene el tiempo de finalización garantizado más rápido. Este algoritmo representa un enfoque ingenuo basado en observaciones avaras y locales de cada flujo de trabajo sin tener en cuenta todos los flujos de trabajo. En los experimentos que siguen, todos los resultados fueron promediados a lo largo de 20 pruebas, y para ayudar a normalizar los efectos de la aleatorización utilizada durante el AG, cada prueba comenzó leyendo datos preinicializados desde el disco. En la Tabla 1 enumeramos nuestros parámetros experimentales. En la Figura 3 mostramos los resultados de ejecutar nuestro AG contra las tres alternativas candidatas. El eje x muestra el número de flujos de trabajo escalado a 1000, y el eje y muestra el valor comercial agregado de todos los flujos de trabajo. Como se puede ver, el algoritmo genético produce consistentemente el mayor valor comercial incluso a medida que aumenta el número de flujos de trabajo; con 1000 flujos de trabajo, el algoritmo genético produce una mejora del 115% sobre la siguiente mejor alternativa. (Tenga en cuenta que aunque estamos optimizando en función de la métrica de valor comercial que definimos anteriormente, los algoritmos genéticos pueden converger hacia el valor óptimo de cualquier métrica, siempre y cuando la función de evaluación pueda medir de manera consistente el valor de un cromosoma con esa métrica). Como era de esperar, el algoritmo codicioso tiene un rendimiento muy pobre porque hace el peor trabajo en equilibrar la carga: todos los procesos comerciales de un tipo de servicio dado se asignan a un solo servidor (el que se anuncia como el que tiene el tiempo de finalización más rápido), y a medida que llegan más procesos comerciales, el rendimiento de los proveedores se degrada linealmente. El esquema de round-robin es inicialmente superado por el esquema proporcional aleatorio hasta alrededor de 120 flujos de trabajo (como se muestra en el gráfico ampliado de la Figura 4), pero a medida que aumenta el número de flujos de trabajo, el esquema de round-robin gana consistentemente sobre el proporcional aleatorio. La razón es que aunque el esquema aleatorio-proporcional asigna procesos comerciales a proveedores proporcionalmente según los tiempos de finalización anunciados (que es una medida del poder del proveedor de servicios), incluso los mejores proveedores eventualmente alcanzarán una concurrencia máxima del mundo real para la gran cantidad de flujos de trabajo que estamos considerando. Para un número muy grande de flujos de trabajo, el esquema de round-robin es capaz de equilibrar mejor la carga entre todos los proveedores de servicios. Para comprender mejor el comportamiento resultante de las asignaciones de programación, mostramos los resultados de finalización del flujo de trabajo en las Figuras 5, 6 y 7 para 100, 500 y 900 flujos de trabajo, respectivamente. Estas cifras muestran el porcentaje de flujos de trabajo que son exitosos (pueden completarse dentro de su límite de QoS), aceptables (pueden completarse dentro de κ=3 veces su límite de QoS) y fallidos (no pueden completarse dentro de κ=3 veces su límite de QoS). El GA produce consistentemente el mayor porcentaje de flujos de trabajo exitosos (lo que resulta en valores comerciales más altos para el conjunto agregado de flujos de trabajo). Además, el esquema de round-robin produce mejores resultados que el proporcional-aleatorio para un gran número de flujos de trabajo, pero no tiene un rendimiento tan bueno como el algoritmo genético. En la Figura 8 graficamos el makespan resultante de los mismos experimentos anteriores. Makespan es una métrica tradicional de la comunidad de programación de trabajos que mide el tiempo transcurrido para que se complete el último trabajo. Aunque útil, no captura la métrica de valor empresarial de alto nivel contra la que estamos optimizando. De hecho, el makespan no tiene en cuenta el hecho de que proporcionamos múltiples niveles de finalización (exitoso, aceptable y fallido) y asignamos puntajes de valor comercial en consecuencia. Para completar, señalamos que el algoritmo genético proporciona el makespan más rápido, pero es igualado por el algoritmo de round robin. El algoritmo genético produce mejores valores comerciales (como se muestra en la Figura 3) porque es capaz de explorar el espacio de soluciones para encontrar mejores asignaciones que generen flujos de trabajo más exitosos (como se muestra en las Figuras 5 a 7). También analizamos el efecto de los algoritmos de programación en el equilibrio de la carga. La Figura 9 muestra el porcentaje de proveedores de servicios que fueron accedidos mientras se ejecutaban los flujos de trabajo. Como era de esperar, el algoritmo codicioso siempre elige a un proveedor de servicios; por otro lado, el algoritmo de round-robin es el más rápido para distribuir el negocio. 33 Parámetro experimental Comentario Flujos de trabajo 5 a 1000 Procesos de negocio por flujo de trabajo aleatorio uniforme: 1 - 10 Tipos de servicio 10 Proveedores de servicios por tipo de servicio aleatorio uniforme: 1 - 10 Objetivo de QoS del flujo de trabajo aleatorio uniforme: 10-30 segundos Tiempo de finalización del proveedor de servicios (α) aleatorio uniforme: 1 - 12 segundos Máxima concurrencia del proveedor de servicios (β) aleatorio uniforme: 1 - 12 Coeficiente de degradación del proveedor de servicios (γ) aleatorio uniforme: 0.1 - 0.9 Valor de negocio para flujos de trabajo exitosos aleatorio uniforme: 10 - 50 puntos Valor de negocio para flujos de trabajo aceptables aleatorio uniforme: 0 - 10 puntos Valor de negocio para flujos de trabajo fallidos aleatorio uniforme: -10 - 0 puntos GA: número de padres 20 GA: número de hijos 80 GA: número de generaciones 1000 Tabla 1: Parámetros experimentales Fallido Aceptable (completado pero no dentro de QoS) Exitoso (completado dentro de QoS) 0% 20% 40% 60% 80% 100% RoundRobinRandProportionalGreedyGeneticAlg Porcentaje de todos los flujos de trabajo Comportamiento del flujo de trabajo, 100 flujos de trabajo Figura 5: Comportamiento del flujo de trabajo para 100 flujos de trabajo. Fracaso Aceptable (completado pero no dentro de QoS) Exitoso (completado dentro de QoS) 0% 20% 40% 60% 80% 100% RoundRobinRandProportionalGreedyGeneticAlg Porcentaje de todos los flujos de trabajo Comportamiento del flujo de trabajo, 500 flujos de trabajo Figura 6: Comportamiento del flujo de trabajo para 500 flujos de trabajo. Fracaso Aceptable (completado pero no dentro de QoS) Exitoso (completado dentro de QoS) 0% 20% 40% 60% 80% 100% RoundRobinRandProportionalGreedyGeneticAlg Porcentaje de todos los flujos de trabajo Comportamiento del flujo de trabajo, 500 flujos de trabajo Figura 7: Comportamiento del flujo de trabajo para 900 flujos de trabajo. 0 50 100 150 200 250 300 0 200 400 600 800 1000 Tiempo total [segundos] Número de flujos de trabajo Tiempo máximo de finalización para todos los flujos de trabajo Algoritmo genético Round robin Proporcional aleatorio Codicioso Figura 8: Tiempo máximo de finalización para todos los flujos de trabajo. Este valor es la métrica makespan utilizada en la investigación de programación tradicional. Aunque útil, el makespan no tiene en cuenta la puntuación del valor comercial en nuestro dominio de problemas. La Figura 10 muestra el porcentaje de proveedores de servicios accedidos (es decir, el porcentaje de proveedores de servicios representados en la Figura 9) que tenían más procesos comerciales asignados que su concurrencia máxima anunciada. Por ejemplo, en el algoritmo voraz solo se utiliza un proveedor de servicios, y este proveedor se satura rápidamente. Por otro lado, el algoritmo aleatorio-proporcional utiliza muchos proveedores de servicios, pero debido a que los procesos comerciales se asignan de manera proporcional con más asignaciones yendo a los mejores proveedores, hay una tendencia a que un menor porcentaje de proveedores se saturen. Para completitud, mostramos el rendimiento del algoritmo genético en sí mismo en la Figura 11. El algoritmo escala linealmente con un aumento en el número de flujos de trabajo. Observamos que los algoritmos round-robin, random-proportional y greedy terminaron en menos de 1 segundo incluso para la configuración de flujo de trabajo más grande. Sin embargo, consideramos que el beneficio de encontrar puntajes de valor empresarial mucho más altos justifica el tiempo de ejecución del algoritmo genético; además, esperaríamos que el tiempo de ejecución mejore tanto con la optimización del software como con un ordenador más rápido que nuestro PC estándar. CONCLUSIÓN Los procesos comerciales dentro de los flujos de trabajo pueden ser orquestados para acceder a servicios web. En este artículo estudiamos la provisión de servicios de múltiples niveles, donde las solicitudes de servicios web a tipos de servicios pueden ser asignadas a diferentes proveedores de servicios. El problema resultante es que para poder soportar un gran número de flujos de trabajo, la asignación de procesos de negocio a proveedores de servicios web debe ser inteligente. Utilizamos una métrica de valor empresarial para medir el 0.2 0.4 0.6 0.8 1 0 200 400 600 800 1000 Porcentaje de todos los proveedores de servicios Número de flujos de trabajo Proveedores de servicios utilizados Algoritmo genético Round robin Proporcional aleatorio Ávido Figura 9: El porcentaje de proveedores de servicios utilizados durante las ejecuciones de carga de trabajo. El algoritmo Greedy siempre elige al mismo proveedor de servicios, mientras que el algoritmo Round Robin distribuye las solicitudes de manera uniforme entre los proveedores. 0 0.2 0.4 0.6 0.8 1 0 200 400 600 800 1000 Porcentaje de todos los proveedores de servicios Número de flujos de trabajo Proveedores saturados Algoritmo genético Round robin Proporcional aleatorio Greedy Figura 10: El porcentaje de proveedores de servicios que están saturados entre aquellos proveedores que fueron utilizados (es decir, el porcentaje de proveedores de servicios representados en la Figura 9). Un proveedor de servicios saturado es aquel cuya carga de trabajo es mayor que su concurrencia máxima anunciada. Dado que el espacio de soluciones de los mapeos de programación es exponencial, utilizamos un algoritmo de búsqueda genética para explorar el espacio y converger hacia el mejor horario. Con una configuración predeterminada para todos los parámetros y utilizando nuestra puntuación de valor empresarial, el GA produjo hasta un 115% de mejora en el valor empresarial sobre el siguiente mejor algoritmo. Finalmente, debido a que un algoritmo genético convergerá hacia el valor óptimo utilizando cualquier métrica (incluso diferente a la métrica de valor empresarial que utilizamos), creemos que nuestro enfoque tiene un fuerte potencial para trabajos futuros. En trabajos futuros, buscamos adquirir trazas del mundo real de instancias de servicios web para obtener mejores estimaciones de las garantías de acuerdo de servicio, aunque esperamos que tales garantías entre los proveedores y sus consumidores no estén generalmente disponibles para el público. También analizaremos otras métricas de calidad de servicio (QoS) como el uso de CPU y E/S. Por ejemplo, podemos analizar los costos de transferencia con diferentes anchos de banda, latencia, tamaño de datos y distribución de datos. Además, esperamos mejorar nuestro algoritmo genético y compararlo con más alternativas de programación. Finalmente, dado que nuestro trabajo es complementario al trabajo existente en coreografía de servicios web (porque dependemos de flujos de trabajo preconfigurados), buscamos integrar nuestro enfoque con los sistemas de flujo de trabajo de servicios web disponibles expresados en BPEL. 6. REFERENCIAS [1] A. Ankolekar, et al. DAML-S: Marcado Semántico para Servicios Web, En Proc. del Simposio Internacional de Trabajo de la Web Semántica, 2001. [2] L. Davis. Programación de taller con algoritmos genéticos, En Proc. de la Conferencia Internacional sobre Algoritmos Genéticos, 1985. [3] H.-L. Fang, P. Ross y D. Corne. Un Enfoque Prometedor de Algoritmo Genético para Problemas de Programación de Taller de Trabajo, Re-programación y Programación de Taller Abierto, En Actas de la 5ta Conferencia Internacional sobre Algoritmos Genéticos, 1993. [4] M. Gary y D. Johnson. Computadoras e Intractabilidad: Una Guía de la Teoría de NP-Completitud, Freeman, 1979. [5] J. Holland. Adaptación en Sistemas Naturales y Artificiales: Un Análisis Introductorio con Aplicaciones a la Biología, Control e Inteligencia Artificial, MIT Press, 1992. [6] D. Goldberg. Algoritmos Genéticos en Búsqueda, Optimización y Aprendizaje Automático, Kluwer Academic Publishers, 1989. [7] Procesos de Negocio en un Mundo de Servicios Web, www-128.ibm.com/developerworks/webservices/library/ws-bpelwp/. [8] G. Soundararajan, K. Manassiev, J. Chen, A. Goel y C. Amza. Bases de datos de back-end en clústeres de servidores de contenido dinámico compartido, En Proc. de la Conferencia Internacional de Computación Autónoma de IEEE, 2005. [9] B. Srivastava y J. Koehler. Composición de Servicios Web: Soluciones Actuales y Problemas Abiertos, ICAP, 2003. [10] B. Urgaonkar, P. Shenoy, A. Chandra y P. Goyal. Provisión dinámica de aplicaciones de Internet de múltiples niveles, En Proc. de la Conferencia Internacional de IEEE sobre Computación Autónoma, 2005. [11] L. Zeng, B. Benatallah, M. Dumas, J. Kalagnanam y Q. Sheng. Composición de Servicios Web Impulsada por la Calidad, En Proc. de la Conferencia WWW, 2003. 35 ",
            "candidates": [],
            "error": [
                [
                    "heurística",
                    "heurística de búsqueda"
                ]
            ]
        },
        "scheduling service": {
            "translated_key": "programar solicitudes de servicio",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Heuristics-Based Scheduling of Composite Web Service Workloads Thomas Phan Wen-Syan Li IBM Almaden Research Center 650 Harry Rd.",
                "San Jose, CA 95120 {phantom,wsl}@us.ibm.com ABSTRACT Web services can be aggregated to create composite workflows that provide streamlined functionality for human users or other systems.",
                "Although industry standards and recent research have sought to define best practices and to improve end-to-end workflow composition, one area that has not fully been explored is the scheduling of a workflows web service requests to actual service provisioning in a multi-tiered, multi-organisation environment.",
                "This issue is relevant to modern business scenarios where business processes within a workflow must complete within QoS-defined limits.",
                "Because these business processes are web service consumers, service requests must be mapped and scheduled across multiple web service providers, each with its own negotiated service level agreement.",
                "In this paper we provide heuristics for <br>scheduling service</br> requests from multiple business process workflows to web service providers such that a business value metric across all workflows is maximised.",
                "We show that a genetic search algorithm is appropriate to perform this scheduling, and through experimentation we show that our algorithm scales well up to a thousand workflows and produces better mappings than traditional approaches.",
                "Categories and Subject Descriptors C.2.4 [Computer-Communication Networks]: Distributed Systems-distributed applications; D.2.8 [Software Engineering]: Metrics-complexity measures, performance measures 1.",
                "INTRODUCTION Web services can be composed into workflows to provide streamlined end-to-end functionality for human users or other systems.",
                "Although previous research efforts have looked at ways to intelligently automate the composition of web services into workflows (e.g. [1, 9]), an important remaining problem is the assignment of web service requests to the underlying web service providers in a multi-tiered runtime scenario within constraints.",
                "In this paper we address this scheduling problem and examine means to manage a large number of business process workflows in a scalable manner.",
                "The problem of scheduling web service requests to providers is relevant to modern business domains that depend on multi-tiered service provisioning.",
                "Consider the example shown in Figure 1 that illustrates our problem space.",
                "Workflows comprise multiple related business processes that are web service consumers; here we assume that the workflows represent requested service from customers or automated systems and that the workflow has already been composed with an existing choreography toolkit.",
                "These workflows are then submitted to a portal (not shown) that acts as a scheduling agent between the web service consumers and the web service providers.",
                "In this example, a workflow could represent the actions needed to instantiate a vacation itinerary, where one business process requests booking an airline ticket, another business process requests a hotel room, and so forth.",
                "Each of these requests target a particular service type (e.g. airline reservations, hotel reservations, car reservations, etc. ), and for each service type, there are multiple instances of service providers that publish a web service interface.",
                "An important challenge is that the workflows must meet some quality-of-service (QoS) metric, such as end-to-end completion time of all its business processes, and that meeting or failing this goal results in the assignment of a quantitative business value metric for the workflow; intuitively, it is desired that all workflows meet their respective QoS goals.",
                "We further leverage the notion that QoS service agreements are generally agreed-upon between the web service providers and the scheduling agent such that the providers advertise some level of guaranteed QoS to the scheduler based upon runtime conditions such as turnaround time and maximum available concurrency.",
                "The resulting problem is then to schedule and assign the business processes requests for service types to one of the service providers for that type.",
                "The scheduling must be done such that the aggregate business value across all the workflows is maximised.",
                "In Section 3 we state the scenario as a combinatorial problem and utilise a genetic search algorithm [5] to find the best assignment of web service requests to providers.",
                "This approach converges towards an assignment that maximises the overall business value for all the workflows.",
                "In Section 4 we show through experimentation that this search heuristic finds better assignments than other algorithms (greedy, round-robin, and proportional).",
                "Further, this approach allows us to scale the number of simultaneous workflows (up to one thousand workflows in our experiments) and yet still find effective schedules. 2.",
                "RELATED WORK In the context of service assignment and scheduling, [11] maps web service calls to potential servers using linear programming, but their work is concerned with mapping only single workflows; our principal focus is on scalably scheduling multiple workflows (up 30 Service Type SuperHotels.com Business Process Business Process Workflow ... Business Process Business Process ... HostileHostels.com IncredibleInns.com Business Process Business Process Business Process ... Business Process Service Provider SkyHighAirlines.com SuperCrazyFlights.com Business Process . . . . . .",
                "Advertised QoS Service Agreement CarRentalService.com Figure 1: An example scenario demonstrating the interaction between business processes in workflows and web service providers.",
                "Each business process accesses a service type and is then mapped to a service provider for that type. to one thousand as we show later) using different business metrics and a search heuristic. [10] presents a dynamic provisioning approach that uses both predictive and reactive techniques for multi-tiered Internet application delivery.",
                "However, the provisioning techniques do not consider the challenges faced when there are alternative query execution plans and replicated data sources. [8] presents a feedback-based scheduling mechanism for multi-tiered systems with back-end databases, but unlike our work, it assumes a tighter coupling between the various components of the system.",
                "Our work also builds upon prior scheduling research.",
                "The classic job-shop scheduling problem, shown to be NP-complete [4] [3], is similar to ours in that tasks within a job must be scheduled onto machinery (c.f. our scenario is that business processes within a workflow must be scheduled onto web service providers).",
                "The salient differences are that the machines can process only one job at a time (we assume servers can multi-task but with degraded performance and a maximum concurrency level), tasks within a job cannot simultaneously run on different machines (we assume business processes can be assigned to any available server), and the principal metric of performance is the makespan, which is the time for the last task among all the jobs to complete (and as we show later, optimising on the makespan is insufficient for scheduling the business processes, necessitating different metrics). 3.",
                "DESIGN In this section we describe our model and discuss how we can find scheduling assignments using a genetic search algorithm. 3.1 Model We base our model on the simplified scenario shown in Figure 1.",
                "Specifically, we assume that users or automated systems request the execution of a workflow.",
                "The workflows comprise business processes, each of which makes one web service invocation to a service type.",
                "Further, business processes have an ordering in the workflow.",
                "The arrangement and execution of the business processes and the data flow between them are all managed by a composition or choreography tool (e.g. [1, 9]).",
                "Although composition languages can use sophisticated flow-control mechanisms such as conditional branches, for simplicity we assume the processes execute sequentially in a given order.",
                "This scenario can be naturally extended to more complex relationships that can be expressed in BPEL [7], which defines how business processes interact, messages are exchanged, activities are ordered, and exceptions are handled.",
                "Due to space constraints, we focus on the problem space presented here and will extend our model to more advanced deployment scenarios in the future.",
                "Each workflow has a QoS requirement to complete within a specified number of time units (e.g. on the order of seconds, as detailed in the Experiments section).",
                "Upon completion (or failure), the workflow is assigned a business value.",
                "We extended this approach further and considered different types of workflow completion in order to model differentiated QoS levels that can be applied by businesses (for example, to provide tiered customer service).",
                "We say that a workflow is successful if it completes within its QoS requirement, acceptable if it completes within a constant factor κ 31 of its QoS bound (in our experiments we chose κ=3), or failing if it finishes beyond κ times its QoS bound.",
                "For each category, a business value score is assigned to the workflow, with the successful category assigned the highest positive score, followed by acceptable and then failing.",
                "The business value point distribution is non-uniform across workflows, further modelling cases where some workflows are of higher priority than others.",
                "Each service type is implemented by a number of different service providers.",
                "We assume that the providers make service level agreements (SLAs) to guarantee a level of performance defined by the completion time for completing a web service invocation.",
                "Although SLAs can be complex, in this paper we assume for simplicity that the guarantees can take the form of a linear performance degradation under load.",
                "This guarantee is defined by several parameters: α is the expected completion time (for example, on the order of seconds) if the assigned workload of web service requests is less than or equal to β, the maximum concurrency, and if the workload is higher than β, the expected completion for a workload of size ω is α+ γ(ω − β) where γ is a fractional coefficient.",
                "In our experiments we vary α, β, and γ with different distributions.",
                "Ideally, all workflows would be able to finish within their QoS limits and thus maximise the aggregate business value across all workflows.",
                "However, because we model service providers with degrading performance under load, not all workflows will achieve their QoS limit: it may easily be the case that business processes are assigned to providers who are overloaded and cannot complete within the respective workflows QoS limit.",
                "The key research problem, then, is to assign the business processes to the web service providers with the goal of optimising on the aggregate business value of all workflows.",
                "Given that the scope of the optimisation is the entire set of workflows, it may be that the best scheduling assignments may result in some workflows having to fail in order for more workflows to succeed.",
                "This intuitive observation suggests that traditional scheduling approaches such as round-robin or proportional assignments will not fare well, which is what we observe and discuss in Section 4.",
                "On the other hand, an exhaustive search of all the possible assignments will find the best schedule, but the computational complexity is prohibitively high.",
                "Suppose there are W workflows with an average of B business processes per workflow.",
                "Further, in the worst case each business process requests one service type, for which there are P providers.",
                "There are thus W · PB combinations to explore to find the optimal assignments of business processes to providers.",
                "Even for small configurations (e.g.",
                "W =10, B=5, P=10), the computational time for exhaustive search is significant, and in our work we look to scale these parameters.",
                "In the next subsection, discuss how a genetic search algorithm can be used to converge toward the optimum scheduling assignments. 3.2 Genetic algorithm Given an exponential search space of business process assignments to web service providers, the problem is to find the optimal assignment that produces the overall highest aggregate business value across all workflows.",
                "To explore the solution space, we use a genetic algorithm (GA) search heuristic that simulates Darwinian natural selection by having members of a population compete to survive in order to pass their genetic chromosomes onto the next generation; after successive generations, there is a tendency for the chromosomes to converge toward the best combination [5] [6].",
                "Although other search heuristics exist that can solve optimization problems (e.g. simulated annealing or steepest-ascent hillclimbing), the business process scheduling problem fits well with a GA because potential solutions can be represented in a matrix form and allows us to use prior research in effective GA chromosome recombination to form new members of the population (e.g. [2]). 0 1 2 3 4 0 1 2 0 2 1 1 0 1 0 1 0 2 1 2 0 0 1 Figure 2: An example chromosome representing a scheduling assignment of (workflow,service type) → service provider.",
                "Each row represents a workflow, and each column represents a service type.",
                "For example, here there are 3 workflows (0 to 2) and 5 service types (0 to 4).",
                "In workflow 0, any request for service type 3 goes to provider 2.",
                "Note that the service provider identifier is within a range limited to its service type (i.e. its column), so the 2 listed for service type 3 is a different server from server 2 in other columns.",
                "Chromosome representation of a solution.",
                "In Figure 2 we show an example chromosome that encodes one scheduling assignment.",
                "The representation is a 2-dimensional matrix that maps {workflow, service type} to a service provider.",
                "For a business process in workflow i and utilising service type j, the (i, j)th entry in the table is the identifier for the service provider to which the business process is assigned.",
                "Note that the service provider identifier is within a range limited to its service type.",
                "GA execution.",
                "A GA proceeds as follows.",
                "Initially a random set of chromosomes is created for the population.",
                "The chromosomes are evaluated (hashed) to some metric, and the best ones are chosen to be parents.",
                "In our problem, the evaluation produces the net business value across all workflows after executing all business processes once they are assigned to their respective service providers according to the mapping in the chromosome.",
                "The parents recombine to produce children, simulating sexual crossover, and occasionally a mutation may arise which produces new characteristics that were not available in either parent.",
                "The principal idea is that we would like the children to be different from the parents (in order to explore more of the solution space) yet not too different (in order to contain the portions of the chromosome that result in good scheduling assignments).",
                "Note that finding the global optimum is not guaranteed because the recombination and mutation are stochastic.",
                "GA recombination and mutation.",
                "As mentioned, the chromosomes are 2-dimensional matrices that represent scheduling assignments.",
                "To simulate sexual recombination of two chromosomes to produce a new child chromosome, we applied a one-point crossover scheme twice (once along each dimension).",
                "The crossover is best explained by analogy to Cartesian space as follows.",
                "A random point is chosen in the matrix to be coordinate (0, 0).",
                "Matrix elements from quadrants II and IV from the first parent and elements from quadrants I and III from the second parent are used to create the new child.",
                "This approach follows GA best practices by keeping contiguous chromosome segments together as they are transmitted from parent to child.",
                "The uni-chromosome mutation scheme randomly changes one of the service provider assignments to another provider within the available range.",
                "Other recombination and mutation schemes are an area of research in the GA community, and we look to explore new operators in future work.",
                "GA evaluation function.",
                "An important GA component is the evaluation function.",
                "Given a particular chromosome representing one scheduling mapping, the function deterministically calculates the net business value across all workloads.",
                "The business processes in each workload are assigned to service providers, and each providers completion time is calculated based on the service agreement guarantee using the parameters mentioned in Section 3.1, namely the unloaded completion time α, the maximum concur32 rency β, and a coefficient γ that controls the linear performance degradation under heavy load.",
                "Note that the evaluation function can be easily replaced if desired; for example, other evaluation functions can model different service provider guarantees or parallel workflows. 4.",
                "EXPERIMENTS AND RESULTS In this section we show the benefit of using our GA-based scheduler.",
                "Because we wanted to scale the scenarios up to a large number of workflows (up to 1000 in our experiments), we implemented a simulation program that allowed us to vary parameters and to measure the results with different metrics.",
                "The simulator was written in standard C++ and was run on a Linux (Fedora Core) desktop computer running at 2.8 GHz with 1GB of RAM.",
                "We compared our algorithm against alternative candidates: • A well-known round-robin algorithm that assigns each business process in circular fashion to the service providers for a particular service type.",
                "This approach provides the simplest scheme for load-balancing. • A random-proportional algorithm that proportionally assigns business processes to the service providers; that is, for a given service type, the service providers are ranked by their guaranteed completion time, and business processes are assigned proportionally to the providers based on their completion time. (We also tried a proportionality scheme based on both the completion times and maximum concurrency but attained the same results, so only the former schemes results are shown here.) • A strawman greedy algorithm that always assigns business processes to the service provider that has the fastest guaranteed completion time.",
                "This algorithm represents a naive approach based on greedy, local observations of each workflow without taking into consideration all workflows.",
                "In the experiments that follow, all results were averaged across 20 trials, and to help normalise the effects of randomisation used during the GA, each trial started by reading in pre-initialised data from disk.",
                "In Table 1 we list our experimental parameters.",
                "In Figure 3 we show the results of running our GA against the three candidate alternatives.",
                "The x-axis shows the number for workflows scaled up to 1000, and the y-axis shows the aggregate business value for all workflows.",
                "As can be seen, the GA consistently produces the highest business value even as the number of workflows grows; at 1000 workflows, the GA produces a 115% improvement over the next-best alternative. (Note that although we are optimising against the business value metric we defined earlier, genetic algorithms are able to converge towards the optimal value of any metric, as long as the evaluation function can consistently measure a chromosomes value with that metric.)",
                "As expected, the greedy algorithm performs very poorly because it does the worst job at balancing load: all business processes for a given service type are assigned to only one server (the one advertised to have the fastest completion time), and as more business processes arrive, the providers performance degrades linearly.",
                "The round-robin scheme is initially outperformed by the randomproportional scheme up to around 120 workflows (as shown in the magnified graph of Figure 4), but as the number of workflows increases, the round-robin scheme consistently wins over randomproportional.",
                "The reason is that although the random-proportional scheme assigns business processes to providers proportionally according to the advertised completion times (which is a measure of the power of the service provider), even the best providers will eventually reach a real-world maximum concurrency for the large -2000 -1000 0 1000 2000 3000 4000 5000 6000 7000 0 200 400 600 800 1000 Aggregatebusinessvalueacrossallworkflows Total number of workflows Business value scores of scheduling algorithms Genetic algorithm Round robin Random proportional Greedy Figure 3: Net business value scores of different scheduling algorithms. -500 0 500 1000 1500 2000 2500 3000 3500 4000 0 50 100 150 200Aggregatebusinessvalueacrossallworkflows Total number of workflows Business value scores of scheduling algorithms Genetic algorithm Round robin Random proportional Greedy Figure 4: Magnification of the left-most region in Figure 3. number of workflows that we are considering.",
                "For a very large number of workflows, the round-robin scheme is able to better balance the load across all service providers.",
                "To better understand the behaviour resulting from the scheduling assignments, we show the workflow completion results in Figures 5, 6, and 7 for 100, 500, and 900 workflows, respectively.",
                "These figures show the percentage of workflows that are successful (can complete with their QoS limit), acceptable (can complete within κ=3 times their QoS limit), and failed (cannot complete within κ=3 times their QoS limit).",
                "The GA consistently produces the highest percentage of successful workflows (resulting in higher business values for the aggregate set of workflows).",
                "Further, the round-robin scheme produces better results than the random-proportional for a large number of workflows but does not perform as well as the GA.",
                "In Figure 8 we graph the makespan resulting from the same experiments above.",
                "Makespan is a traditional metric from the job scheduling community measuring elapsed time for the last job to complete.",
                "While useful, it does not capture the high-level business value metric that we are optimising against.",
                "Indeed, the makespan is oblivious to the fact that we provide multiple levels of completion (successful, acceptable, and failed) and assign business value scores accordingly.",
                "For completeness, we note that the GA provides the fastest makespan, but it is matched by the round robin algorithm.",
                "The GA produces better business values (as shown in Figure 3) because it is able to search the solution space to find better mappings that produce more successful workflows (as shown in Figures 5 to 7).",
                "We also looked at the effect of the scheduling algorithms on balancing the load.",
                "Figure 9 shows the percentage of services providers that were accessed while the workflows ran.",
                "As expected, the greedy algorithm always hits one service provider; on the other hand, the round-robin algorithm is the fastest to spread the business 33 Experimental parameter Comment Workflows 5 to 1000 Business processes per workflow uniform random: 1 - 10 Service types 10 Service providers per service type uniform random: 1 - 10 Workflow QoS goal uniform random: 10-30 seconds Service provider completion time (α) uniform random: 1 - 12 seconds Service provider maximum concurrency (β) uniform random: 1 - 12 Service provider degradation coefficient (γ) uniform random: 0.1 - 0.9 Business value for successful workflows uniform random: 10 - 50 points Business value for acceptable workflows uniform random: 0 - 10 points Business value for failed workflows uniform random: -10 - 0 points GA: number of parents 20 GA: number of children 80 GA: number of generations 1000 Table 1: Experimental parameters Failed Acceptable (completed but not within QoS) Successful (completed within QoS) 0% 20% 40% 60% 80% 100% RoundRobinRandProportionalGreedyGeneticAlg Percentageofallworkflows Workflow behaviour, 100 workflows Figure 5: Workflow behaviour for 100 workflows.",
                "Failed Acceptable (completed but not within QoS) Successful (completed within QoS) 0% 20% 40% 60% 80% 100% RoundRobinRandProportionalGreedyGeneticAlg Percentageofallworkflows Workflow behaviour, 500 workflows Figure 6: Workflow behaviour for 500 workflows.",
                "Failed Acceptable (completed but not within QoS) Successful (completed within QoS) 0% 20% 40% 60% 80% 100% RoundRobinRandProportionalGreedyGeneticAlg Percentageofallworkflows Workflow behaviour, 500 workflows Figure 7: Workflow behaviour for 900 workflows. 0 50 100 150 200 250 300 0 200 400 600 800 1000 Makespan[seconds] Number of workflows Maximum completion time for all workflows Genetic algorithm Round robin Random proportional Greedy Figure 8: Maximum completion time for all workflows.",
                "This value is the makespan metric used in traditional scheduling research.",
                "Although useful, the makespan does not take into consideration the business value scoring in our problem domain. processes.",
                "Figure 10 is the percentage of accessed service providers (that is, the percentage of service providers represented in Figure 9) that had more assigned business processes than their advertised maximum concurrency.",
                "For example, in the greedy algorithm only one service provider is utilised, and this one provider quickly becomes saturated.",
                "On the other hand, the random-proportional algorithm uses many service providers, but because business processes are proportionally assigned with more assignments going to the better providers, there is a tendency for a smaller percentage of providers to become saturated.",
                "For completeness, we show the performance of the genetic algorithm itself in Figure 11.",
                "The algorithm scales linearly with an increasing number of workflows.",
                "We note that the round-robin, random-proportional, and greedy algorithms all finished within 1 second even for the largest workflow configuration.",
                "However, we feel that the benefit of finding much higher business value scores justifies the running time of the GA; further we would expect that the running time will improve with both software tuning as well as with a computer faster than our off-the-shelf PC. 5.",
                "CONCLUSION Business processes within workflows can be orchestrated to access web services.",
                "In this paper we looked at multi-tiered service provisioning where web service requests to service types can be mapped to different service providers.",
                "The resulting problem is that in order to support a very large number of workflows, the assignment of business process to web service provider must be intelligent.",
                "We used a business value metric to measure the be34 0 0.2 0.4 0.6 0.8 1 0 200 400 600 800 1000 Percentageofallserviceproviders Number of workflows Service providers utilised Genetic algorithm Round robin Random proportional Greedy Figure 9: The percentage of service providers utilized during workload executions.",
                "The Greedy algorithm always hits the one service provider, while the Round Robin algorithm spreads requests evenly across the providers. 0 0.2 0.4 0.6 0.8 1 0 200 400 600 800 1000 Percentageofallserviceproviders Number of workflows Service providers saturated Genetic algorithm Round robin Random proportional Greedy Figure 10: The percentage of service providers that are saturated among those providers who were utilized (that is, percentage of the service providers represented in Figure 9).",
                "A saturated service provider is one whose workload is greater that its advertised maximum concurrency. 0 5 10 15 20 25 0 200 400 600 800 1000 Runningtimeinseconds Total number of workflows Running time of genetic algorithm GA running time Figure 11: Running time of the genetic algorithm. haviour of workflows meeting or failing QoS values, and we optimised our scheduling to maximise the aggregate business value across all workflows.",
                "Since the solution space of scheduler mappings is exponential, we used a genetic search algorithm to search the space and converge toward the best schedule.",
                "With a default configuration for all parameters and using our business value scoring, the GA produced up to 115% business value improvement over the next best algorithm.",
                "Finally, because a genetic algorithm will converge towards the optimal value using any metric (even other than the business value metric we used), we believe our approach has strong potential for continuing work.",
                "In future work, we look to acquire real-world traces of web service instances in order to get better estimates of service agreement guarantees, although we expect that such guarantees between the providers and their consumers are not generally available to the public.",
                "We will also look at other QoS metrics such as CPU and I/O usage.",
                "For example, we can analyse transfer costs with varying bandwidth, latency, data size, and data distribution.",
                "Further, we hope to improve our genetic algorithm and compare it to more scheduler alternatives.",
                "Finally, since our work is complementary to existing work in web services choreography (because we rely on pre-configured workflows), we look to integrate our approach with available web service workflow systems expressed in BPEL. 6.",
                "REFERENCES [1] A. Ankolekar, et al.",
                "DAML-S: Semantic Markup For Web Services, In Proc. of the Intl Semantic Web Working Symposium, 2001. [2] L. Davis.",
                "Job Shop Scheduling with Genetic Algorithms, In Proc. of the Intl Conference on Genetic Algorithms, 1985. [3] H.-L. Fang, P. Ross, and D. Corne.",
                "A Promising Genetic Algorithm Approach to Job-Shop Scheduling, Rescheduling, and Open-Shop Scheduling Problems , In Proc. on the 5th Intl Conference on Genetic Algorithms, 1993. [4] M. Gary and D. Johnson.",
                "Computers and Intractability: A Guide to the Theory of NP-Completeness, Freeman, 1979. [5] J. Holland.",
                "Adaptation in Natural and Artificial Systems: An Introductory Analysis with Applications to Biology, Control, and Artificial Intelligence, MIT Press, 1992. [6] D. Goldberg.",
                "Genetic Algorithms in Search, Optimization and Machine Learning, Kluwer Academic Publishers, 1989. [7] Business Processes in a Web Services World, www-128.ibm.com/developerworks/ webservices/library/ws-bpelwp/. [8] G. Soundararajan, K. Manassiev, J. Chen, A. Goel, and C. Amza.",
                "Back-end Databases in Shared Dynamic Content Server Clusters, In Proc. of the IEEE Intl Conference on Autonomic Computing, 2005. [9] B. Srivastava and J. Koehler.",
                "Web Service Composition Current Solutions and Open Problems, ICAP, 2003. [10] B. Urgaonkar, P. Shenoy, A. Chandra, and P. Goyal.",
                "Dynamic Provisioning of Multi-Tier Internet Applications, In Proc. of the IEEE Intl Conference on Autonomic Computing, 2005. [11] L. Zeng, B. Benatallah, M. Dumas, J. Kalagnanam, and Q. Sheng.",
                "Quality Driven Web Services Composition, In Proc. of the WWW Conference, 2003. 35"
            ],
            "original_annotated_samples": [
                "In this paper we provide heuristics for <br>scheduling service</br> requests from multiple business process workflows to web service providers such that a business value metric across all workflows is maximised."
            ],
            "translated_annotated_samples": [
                "En este documento proporcionamos heurísticas para <br>programar solicitudes de servicio</br> de múltiples flujos de trabajo de procesos comerciales a proveedores de servicios web de manera que se maximice una métrica de valor comercial en todos los flujos de trabajo."
            ],
            "translated_text": "Programación basada en heurísticas de cargas de trabajo de servicios web compuestos Thomas Phan Wen-Syan Li Centro de Investigación IBM Almaden 650 Harry Rd. Los servicios web pueden ser agregados para crear flujos de trabajo compuestos que proporcionen funcionalidad simplificada para usuarios humanos u otros sistemas. Aunque los estándares de la industria y la investigación reciente han buscado definir las mejores prácticas y mejorar la composición del flujo de trabajo de extremo a extremo, un área que no ha sido completamente explorada es la programación de las solicitudes de servicios web de los flujos de trabajo para la provisión real de servicios en un entorno multinivel y multiorganizacional. Este problema es relevante para los escenarios empresariales modernos donde los procesos comerciales dentro de un flujo de trabajo deben completarse dentro de los límites definidos por la calidad de servicio (QoS). Debido a que estos procesos comerciales son consumidores de servicios web, las solicitudes de servicio deben ser mapeadas y programadas entre múltiples proveedores de servicios web, cada uno con su propio acuerdo de nivel de servicio negociado. En este documento proporcionamos heurísticas para <br>programar solicitudes de servicio</br> de múltiples flujos de trabajo de procesos comerciales a proveedores de servicios web de manera que se maximice una métrica de valor comercial en todos los flujos de trabajo. Mostramos que un algoritmo de búsqueda genética es apropiado para realizar esta programación, y a través de experimentación demostramos que nuestro algoritmo escala bien hasta mil flujos de trabajo y produce mejores asignaciones que enfoques tradicionales. Categorías y Descriptores de Asignaturas C.2.4 [Redes de Computadoras-Comunicación]: Sistemas Distribuidos-aplicaciones distribuidas; D.2.8 [Ingeniería de Software]: Métricas-medidas de complejidad, medidas de rendimiento 1. INTRODUCCIÓN Los servicios web pueden ser compuestos en flujos de trabajo para proporcionar funcionalidad integrada de principio a fin para usuarios humanos u otros sistemas. Aunque los esfuerzos de investigación previos han examinado formas de automatizar de manera inteligente la composición de servicios web en flujos de trabajo (por ejemplo, [1, 9]), un problema importante que aún persiste es la asignación de solicitudes de servicios web a los proveedores de servicios web subyacentes en un escenario de tiempo de ejecución multinivel dentro de ciertas restricciones. En este documento abordamos este problema de programación y examinamos medios para gestionar un gran número de flujos de trabajo de procesos comerciales de manera escalable. El problema de programar solicitudes de servicios web a proveedores es relevante para los dominios comerciales modernos que dependen de la provisión de servicios de múltiples niveles. Considera el ejemplo mostrado en la Figura 1 que ilustra nuestro espacio de problemas. Los flujos de trabajo comprenden múltiples procesos comerciales relacionados que son consumidores de servicios web; aquí asumimos que los flujos de trabajo representan servicios solicitados por clientes o sistemas automatizados y que el flujo de trabajo ya ha sido compuesto con una herramienta de coreografía existente. Estos flujos de trabajo son luego enviados a un portal (no mostrado) que actúa como un agente de programación entre los consumidores del servicio web y los proveedores del servicio web. En este ejemplo, un flujo de trabajo podría representar las acciones necesarias para crear un itinerario de vacaciones, donde un proceso empresarial solicita la reserva de un boleto de avión, otro proceso empresarial solicita una habitación de hotel, y así sucesivamente. Cada una de estas solicitudes apunta a un tipo de servicio en particular (por ejemplo, reservas de aerolíneas, reservas de hoteles, reservas de autos, etc.), y para cada tipo de servicio, hay múltiples instancias de proveedores de servicios que publican una interfaz de servicio web. Un desafío importante es que los flujos de trabajo deben cumplir con alguna métrica de calidad de servicio (QoS), como el tiempo de finalización de extremo a extremo de todos sus procesos comerciales, y que cumplir o no con este objetivo resulta en la asignación de una métrica de valor comercial cuantitativo para el flujo de trabajo; intuitivamente, se desea que todos los flujos de trabajo cumplan con sus respectivos objetivos de QoS. Además, aprovechamos la idea de que los acuerdos de servicio de QoS suelen ser acordados entre los proveedores de servicios web y el agente de programación de tal manera que los proveedores anuncian un cierto nivel de QoS garantizado al programador en función de condiciones de tiempo de respuesta y concurrencia máxima disponible. El problema resultante es entonces programar y asignar las solicitudes de procesos comerciales para tipos de servicio a uno de los proveedores de servicios para ese tipo. La programación debe realizarse de tal manera que se maximice el valor comercial agregado en todos los flujos de trabajo. En la Sección 3 planteamos el escenario como un problema combinatorio y utilizamos un algoritmo de búsqueda genética [5] para encontrar la mejor asignación de solicitudes de servicios web a proveedores. Este enfoque converge hacia una asignación que maximiza el valor comercial general para todos los flujos de trabajo. En la Sección 4 mostramos a través de experimentación que esta heurística de búsqueda encuentra asignaciones mejores que otros algoritmos (codicioso, round-robin y proporcional). Además, este enfoque nos permite escalar el número de flujos de trabajo simultáneos (hasta mil flujos de trabajo en nuestros experimentos) y aún así encontrar horarios efectivos. 2. TRABAJO RELACIONADO En el contexto de asignación y programación de servicios, [11] mapea llamadas de servicios web a servidores potenciales utilizando programación lineal, pero su trabajo se centra en mapear solo flujos de trabajo individuales; nuestro enfoque principal está en programar de manera escalable múltiples flujos de trabajo (hasta 30 tipos de servicios SuperHotels.com Proceso de Negocio Proceso de Negocio Flujo de Trabajo ... Proceso de Negocio Proceso de Negocio ... HostileHostels.com IncredibleInns.com Proceso de Negocio Proceso de Negocio Proceso de Negocio ... Proceso de Negocio Proveedor de Servicios SkyHighAirlines.com SuperCrazyFlights.com Proceso de Negocio . . . . . . Acuerdo de Servicio de Calidad de Servicio (QoS) Publicitado CarRentalService.com Figura 1: Un escenario de ejemplo que muestra la interacción entre procesos comerciales en flujos de trabajo y proveedores de servicios web. Cada proceso empresarial accede a un tipo de servicio y luego se asigna a un proveedor de servicios para ese tipo, a uno mil como mostraremos más adelante, utilizando diferentes métricas empresariales y una heurística de búsqueda. [10] presenta un enfoque de aprovisionamiento dinámico que utiliza técnicas predictivas y reactivas para la entrega de aplicaciones de Internet multinivel. Sin embargo, las técnicas de aprovisionamiento no consideran los desafíos enfrentados cuando hay planes alternativos de ejecución de consultas y fuentes de datos replicadas. [8] presenta un mecanismo de programación basado en retroalimentación para sistemas multinivel con bases de datos de back-end, pero a diferencia de nuestro trabajo, asume un acoplamiento más estrecho entre los diversos componentes del sistema. Nuestro trabajo también se basa en investigaciones previas sobre programación. El problema clásico de programación de talleres, demostrado como NP-completo [4] [3], es similar al nuestro en el sentido de que las tareas dentro de un trabajo deben ser programadas en maquinaria (cf. nuestro escenario es que los procesos comerciales dentro de un flujo de trabajo deben ser programados en proveedores de servicios web). Las diferencias más destacadas son que las máquinas solo pueden procesar un trabajo a la vez (asumimos que los servidores pueden realizar múltiples tareas pero con un rendimiento degradado y un nivel máximo de concurrencia), las tareas dentro de un trabajo no pueden ejecutarse simultáneamente en diferentes máquinas (asumimos que los procesos comerciales pueden asignarse a cualquier servidor disponible), y la métrica principal de rendimiento es el makespan, que es el tiempo que tarda la última tarea de todos los trabajos en completarse (y como mostraremos más adelante, optimizar el makespan no es suficiente para programar los procesos comerciales, lo que requiere diferentes métricas). 3. En esta sección describimos nuestro modelo y discutimos cómo podemos encontrar asignaciones de programación utilizando un algoritmo de búsqueda genética. 3.1 Modelo Basamos nuestro modelo en el escenario simplificado mostrado en la Figura 1. Específicamente, asumimos que los usuarios o sistemas automatizados solicitan la ejecución de un flujo de trabajo. Los flujos de trabajo comprenden procesos comerciales, cada uno de los cuales realiza una invocación de servicio web a un tipo de servicio. Además, los procesos comerciales tienen un orden en el flujo de trabajo. La disposición y ejecución de los procesos comerciales y el flujo de datos entre ellos son gestionados por una herramienta de composición o coreografía (por ejemplo, [1, 9]). Aunque los lenguajes de composición pueden utilizar mecanismos sofisticados de control de flujo como ramas condicionales, para simplificar asumimos que los procesos se ejecutan secuencialmente en un orden dado. Este escenario puede ser extendido de forma natural a relaciones más complejas que pueden ser expresadas en BPEL [7], el cual define cómo interactúan los procesos de negocio, se intercambian mensajes, se ordenan actividades y se manejan excepciones. Debido a limitaciones de espacio, nos enfocamos en el espacio de problemas presentado aquí y extenderemos nuestro modelo a escenarios de implementación más avanzados en el futuro. Cada flujo de trabajo tiene un requisito de calidad de servicio (QoS) que debe completarse dentro de un número específico de unidades de tiempo (por ejemplo, del orden de segundos, como se detalla en la sección de Experimentos). Una vez completado (o fallido), se asigna un valor comercial al flujo de trabajo. Extendimos este enfoque aún más y consideramos diferentes tipos de finalización de flujo de trabajo para modelar niveles diferenciados de QoS que pueden ser aplicados por las empresas (por ejemplo, para proporcionar servicios al cliente escalonados). Decimos que un flujo de trabajo es exitoso si se completa dentro de su requisito de QoS, aceptable si se completa dentro de un factor constante κ 31 de su límite de QoS (en nuestros experimentos elegimos κ=3), o fallido si termina más allá de κ veces su límite de QoS. Para cada categoría, se asigna un puntaje de valor comercial al flujo de trabajo, siendo la categoría exitosa la que recibe la puntuación positiva más alta, seguida por la aceptable y luego la fallida. La distribución de puntos de valor empresarial no es uniforme en los flujos de trabajo, lo que modela casos en los que algunos flujos de trabajo tienen mayor prioridad que otros. Cada tipo de servicio es implementado por varios proveedores de servicios diferentes. Suponemos que los proveedores hacen acuerdos de nivel de servicio (SLAs) para garantizar un nivel de rendimiento definido por el tiempo de finalización de una invocación de servicio web. Aunque los Acuerdos de Nivel de Servicio (SLAs) pueden ser complejos, en este documento asumimos, para simplificar, que las garantías pueden adoptar la forma de una degradación lineal del rendimiento bajo carga. Esta garantía está definida por varios parámetros: α es el tiempo de finalización esperado (por ejemplo, del orden de segundos) si la carga de trabajo asignada de las solicitudes de servicio web es menor o igual a β, la concurrencia máxima, y si la carga de trabajo es mayor que β, la finalización esperada para una carga de trabajo de tamaño ω es α + γ(ω − β) donde γ es un coeficiente fraccional. En nuestros experimentos variamos α, β y γ con diferentes distribuciones. Idealmente, todos los flujos de trabajo podrían finalizar dentro de sus límites de calidad de servicio (QoS) y, por lo tanto, maximizar el valor empresarial agregado en todos los flujos de trabajo. Sin embargo, debido a que modelamos a los proveedores de servicios con un rendimiento degradante bajo carga, no todos los flujos de trabajo alcanzarán su límite de calidad de servicio (QoS): fácilmente puede darse el caso de que los procesos comerciales sean asignados a proveedores que están sobrecargados y no pueden completarse dentro del límite de calidad de servicio respectivo de los flujos de trabajo. El problema clave de investigación, entonces, es asignar los procesos comerciales a los proveedores de servicios web con el objetivo de optimizar el valor comercial agregado de todos los flujos de trabajo. Dado que el alcance de la optimización es el conjunto completo de flujos de trabajo, puede ser que las mejores asignaciones de programación resulten en que algunos flujos de trabajo tengan que fallar para que otros tengan éxito. Esta observación intuitiva sugiere que enfoques de programación tradicionales como el round-robin o asignaciones proporcionales no funcionarán bien, lo cual es lo que observamos y discutimos en la Sección 4. Por otro lado, una búsqueda exhaustiva de todas las posibles asignaciones encontrará el mejor horario, pero la complejidad computacional es prohibitivamente alta. Supongamos que hay W flujos de trabajo con un promedio de B procesos de negocio por flujo de trabajo. Además, en el peor de los casos, cada proceso empresarial solicita un tipo de servicio, para el cual hay P proveedores. Por lo tanto, hay W · PB combinaciones para explorar y encontrar las asignaciones óptimas de procesos comerciales a proveedores. Incluso para configuraciones pequeñas (por ejemplo, Dado que (W=10, B=5, P=10), el tiempo computacional para la búsqueda exhaustiva es significativo, y en nuestro trabajo buscamos ajustar estos parámetros. En la siguiente subsección, discuta cómo se puede utilizar un algoritmo de búsqueda genética para converger hacia las asignaciones de programación óptimas. 3.2 Algoritmo genético Dado un espacio de búsqueda exponencial de asignaciones de procesos comerciales a proveedores de servicios web, el problema es encontrar la asignación óptima que produzca el valor comercial agregado más alto en general en todos los flujos de trabajo. Para explorar el espacio de soluciones, utilizamos un algoritmo genético (GA) que simula la selección natural darwiniana al hacer que los miembros de una población compitan por sobrevivir para transmitir sus cromosomas genéticos a la siguiente generación; después de generaciones sucesivas, hay una tendencia a que los cromosomas converjan hacia la mejor combinación. Aunque existen otras heurísticas de búsqueda que pueden resolver problemas de optimización (por ejemplo, recocido simulado o escalada de colina más empinada), el problema de programación de procesos empresariales se adapta bien a un AG porque las soluciones potenciales pueden representarse en forma de matriz y nos permite utilizar investigaciones previas en la recombinación efectiva de cromosomas de AG para formar nuevos miembros de la población (por ejemplo, [2]). 0 1 2 3 4 0 1 2 0 2 1 1 0 1 0 1 0 2 1 2 0 0 1 Figura 2: Un ejemplo de cromosoma que representa una asignación de programación de (flujo de trabajo, tipo de servicio) → proveedor de servicios. Cada fila representa un flujo de trabajo, y cada columna representa un tipo de servicio. Por ejemplo, aquí hay 3 flujos de trabajo (0 a 2) y 5 tipos de servicio (0 a 4). En el flujo de trabajo 0, cualquier solicitud de tipo de servicio 3 se dirige al proveedor 2. Ten en cuenta que el identificador del proveedor de servicios se encuentra dentro de un rango limitado a su tipo de servicio (es decir, su columna), por lo que el 2 listado para el tipo de servicio 3 es un servidor diferente al servidor 2 en otras columnas. Representación cromosómica de una solución. En la Figura 2 mostramos un ejemplo de cromosoma que codifica una asignación de programación. La representación es una matriz bidimensional que mapea {flujo de trabajo, tipo de servicio} a un proveedor de servicios. Para un proceso de negocio en el flujo de trabajo i y utilizando el tipo de servicio j, la entrada (i, j)-ésima en la tabla es el identificador del proveedor de servicios al que se asigna el proceso de negocio. Ten en cuenta que el identificador del proveedor de servicios se encuentra dentro de un rango limitado a su tipo de servicio. Ejecución de GA. Un algoritmo genético procede de la siguiente manera. Inicialmente se crea un conjunto aleatorio de cromosomas para la población. Los cromosomas son evaluados (hasheados) según alguna métrica, y los mejores son elegidos para ser padres. En nuestro problema, la evaluación produce el valor neto del negocio en todos los flujos de trabajo después de ejecutar todos los procesos comerciales una vez que se asignan a sus respectivos proveedores de servicios de acuerdo con el mapeo en el cromosoma. Los padres se recombinan para producir hijos, simulando un cruce sexual, y ocasionalmente puede surgir una mutación que produce nuevas características que no estaban disponibles en ninguno de los padres. La idea principal es que nos gustaría que los niños fueran diferentes de los padres (para explorar más del espacio de soluciones) pero no demasiado diferentes (para contener las porciones del cromosoma que resultan en asignaciones de programación exitosas). Ten en cuenta que encontrar el óptimo global no está garantizado debido a que la recombinación y la mutación son estocásticas. Recombinación y mutación de ADN. Como se mencionó, los cromosomas son matrices bidimensionales que representan asignaciones de horarios. Para simular la recombinación sexual de dos cromosomas para producir un nuevo cromosoma hijo, aplicamos un esquema de cruce de un punto dos veces (una vez a lo largo de cada dimensión). El cruce se explica mejor por analogía al espacio cartesiano de la siguiente manera. Se elige un punto al azar en la matriz para que sea la coordenada (0, 0). Los elementos de la matriz de los cuadrantes II y IV del primer progenitor y los elementos de los cuadrantes I y III del segundo progenitor se utilizan para crear el nuevo hijo. Este enfoque sigue las mejores prácticas de los algoritmos genéticos al mantener juntos los segmentos cromosómicos contiguos a medida que se transmiten de padre a hijo. El esquema de mutación de uni-cromosoma cambia aleatoriamente una de las asignaciones de proveedor de servicios a otro proveedor dentro del rango disponible. Otros esquemas de recombinación y mutación son un área de investigación en la comunidad de AG, y buscamos explorar nuevos operadores en trabajos futuros. Función de evaluación de GA. Un componente importante de los algoritmos genéticos es la función de evaluación. Dada una cromosoma particular que representa un mapeo de programación, la función calcula de manera determinista el valor neto del negocio en todas las cargas de trabajo. Los procesos comerciales en cada carga de trabajo se asignan a proveedores de servicios, y el tiempo de finalización de cada proveedor se calcula en función de la garantía del acuerdo de servicio utilizando los parámetros mencionados en la Sección 3.1, a saber, el tiempo de finalización sin carga α, la máxima concurrencia β y un coeficiente γ que controla la degradación del rendimiento lineal bajo carga pesada. Ten en cuenta que la función de evaluación puede ser fácilmente reemplazada si se desea; por ejemplo, otras funciones de evaluación pueden modelar diferentes garantías de proveedores de servicios o flujos de trabajo paralelos. 4. EXPERIMENTOS Y RESULTADOS En esta sección mostramos el beneficio de utilizar nuestro planificador basado en algoritmos genéticos. Debido a que queríamos escalar los escenarios a un gran número de flujos de trabajo (hasta 1000 en nuestros experimentos), implementamos un programa de simulación que nos permitió variar parámetros y medir los resultados con diferentes métricas. El simulador fue escrito en C++ estándar y se ejecutó en un ordenador de escritorio Linux (Fedora Core) con una velocidad de 2.8 GHz y 1GB de RAM. Comparamos nuestro algoritmo con candidatos alternativos: • Un algoritmo de round-robin bien conocido que asigna cada proceso comercial de forma circular a los proveedores de servicios para un tipo de servicio en particular. Este enfoque proporciona el esquema más simple para el equilibrio de carga. • Un algoritmo aleatorio-proporcional que asigna proporcionalmente los procesos comerciales a los proveedores de servicios; es decir, para un tipo de servicio dado, los proveedores de servicios se clasifican según su tiempo de finalización garantizado, y los procesos comerciales se asignan proporcionalmente a los proveedores en función de su tiempo de finalización. (También probamos un esquema de proporcionalidad basado tanto en los tiempos de finalización como en la concurrencia máxima, pero obtuvimos los mismos resultados, por lo que solo se muestran los resultados de los esquemas anteriores aquí.) • Un algoritmo codicioso de hombre de paja que siempre asigna los procesos comerciales al proveedor de servicios que tiene el tiempo de finalización garantizado más rápido. Este algoritmo representa un enfoque ingenuo basado en observaciones avaras y locales de cada flujo de trabajo sin tener en cuenta todos los flujos de trabajo. En los experimentos que siguen, todos los resultados fueron promediados a lo largo de 20 pruebas, y para ayudar a normalizar los efectos de la aleatorización utilizada durante el AG, cada prueba comenzó leyendo datos preinicializados desde el disco. En la Tabla 1 enumeramos nuestros parámetros experimentales. En la Figura 3 mostramos los resultados de ejecutar nuestro AG contra las tres alternativas candidatas. El eje x muestra el número de flujos de trabajo escalado a 1000, y el eje y muestra el valor comercial agregado de todos los flujos de trabajo. Como se puede ver, el algoritmo genético produce consistentemente el mayor valor comercial incluso a medida que aumenta el número de flujos de trabajo; con 1000 flujos de trabajo, el algoritmo genético produce una mejora del 115% sobre la siguiente mejor alternativa. (Tenga en cuenta que aunque estamos optimizando en función de la métrica de valor comercial que definimos anteriormente, los algoritmos genéticos pueden converger hacia el valor óptimo de cualquier métrica, siempre y cuando la función de evaluación pueda medir de manera consistente el valor de un cromosoma con esa métrica). Como era de esperar, el algoritmo codicioso tiene un rendimiento muy pobre porque hace el peor trabajo en equilibrar la carga: todos los procesos comerciales de un tipo de servicio dado se asignan a un solo servidor (el que se anuncia como el que tiene el tiempo de finalización más rápido), y a medida que llegan más procesos comerciales, el rendimiento de los proveedores se degrada linealmente. El esquema de round-robin es inicialmente superado por el esquema proporcional aleatorio hasta alrededor de 120 flujos de trabajo (como se muestra en el gráfico ampliado de la Figura 4), pero a medida que aumenta el número de flujos de trabajo, el esquema de round-robin gana consistentemente sobre el proporcional aleatorio. La razón es que aunque el esquema aleatorio-proporcional asigna procesos comerciales a proveedores proporcionalmente según los tiempos de finalización anunciados (que es una medida del poder del proveedor de servicios), incluso los mejores proveedores eventualmente alcanzarán una concurrencia máxima del mundo real para la gran cantidad de flujos de trabajo que estamos considerando. Para un número muy grande de flujos de trabajo, el esquema de round-robin es capaz de equilibrar mejor la carga entre todos los proveedores de servicios. Para comprender mejor el comportamiento resultante de las asignaciones de programación, mostramos los resultados de finalización del flujo de trabajo en las Figuras 5, 6 y 7 para 100, 500 y 900 flujos de trabajo, respectivamente. Estas cifras muestran el porcentaje de flujos de trabajo que son exitosos (pueden completarse dentro de su límite de QoS), aceptables (pueden completarse dentro de κ=3 veces su límite de QoS) y fallidos (no pueden completarse dentro de κ=3 veces su límite de QoS). El GA produce consistentemente el mayor porcentaje de flujos de trabajo exitosos (lo que resulta en valores comerciales más altos para el conjunto agregado de flujos de trabajo). Además, el esquema de round-robin produce mejores resultados que el proporcional-aleatorio para un gran número de flujos de trabajo, pero no tiene un rendimiento tan bueno como el algoritmo genético. En la Figura 8 graficamos el makespan resultante de los mismos experimentos anteriores. Makespan es una métrica tradicional de la comunidad de programación de trabajos que mide el tiempo transcurrido para que se complete el último trabajo. Aunque útil, no captura la métrica de valor empresarial de alto nivel contra la que estamos optimizando. De hecho, el makespan no tiene en cuenta el hecho de que proporcionamos múltiples niveles de finalización (exitoso, aceptable y fallido) y asignamos puntajes de valor comercial en consecuencia. Para completar, señalamos que el algoritmo genético proporciona el makespan más rápido, pero es igualado por el algoritmo de round robin. El algoritmo genético produce mejores valores comerciales (como se muestra en la Figura 3) porque es capaz de explorar el espacio de soluciones para encontrar mejores asignaciones que generen flujos de trabajo más exitosos (como se muestra en las Figuras 5 a 7). También analizamos el efecto de los algoritmos de programación en el equilibrio de la carga. La Figura 9 muestra el porcentaje de proveedores de servicios que fueron accedidos mientras se ejecutaban los flujos de trabajo. Como era de esperar, el algoritmo codicioso siempre elige a un proveedor de servicios; por otro lado, el algoritmo de round-robin es el más rápido para distribuir el negocio. 33 Parámetro experimental Comentario Flujos de trabajo 5 a 1000 Procesos de negocio por flujo de trabajo aleatorio uniforme: 1 - 10 Tipos de servicio 10 Proveedores de servicios por tipo de servicio aleatorio uniforme: 1 - 10 Objetivo de QoS del flujo de trabajo aleatorio uniforme: 10-30 segundos Tiempo de finalización del proveedor de servicios (α) aleatorio uniforme: 1 - 12 segundos Máxima concurrencia del proveedor de servicios (β) aleatorio uniforme: 1 - 12 Coeficiente de degradación del proveedor de servicios (γ) aleatorio uniforme: 0.1 - 0.9 Valor de negocio para flujos de trabajo exitosos aleatorio uniforme: 10 - 50 puntos Valor de negocio para flujos de trabajo aceptables aleatorio uniforme: 0 - 10 puntos Valor de negocio para flujos de trabajo fallidos aleatorio uniforme: -10 - 0 puntos GA: número de padres 20 GA: número de hijos 80 GA: número de generaciones 1000 Tabla 1: Parámetros experimentales Fallido Aceptable (completado pero no dentro de QoS) Exitoso (completado dentro de QoS) 0% 20% 40% 60% 80% 100% RoundRobinRandProportionalGreedyGeneticAlg Porcentaje de todos los flujos de trabajo Comportamiento del flujo de trabajo, 100 flujos de trabajo Figura 5: Comportamiento del flujo de trabajo para 100 flujos de trabajo. Fracaso Aceptable (completado pero no dentro de QoS) Exitoso (completado dentro de QoS) 0% 20% 40% 60% 80% 100% RoundRobinRandProportionalGreedyGeneticAlg Porcentaje de todos los flujos de trabajo Comportamiento del flujo de trabajo, 500 flujos de trabajo Figura 6: Comportamiento del flujo de trabajo para 500 flujos de trabajo. Fracaso Aceptable (completado pero no dentro de QoS) Exitoso (completado dentro de QoS) 0% 20% 40% 60% 80% 100% RoundRobinRandProportionalGreedyGeneticAlg Porcentaje de todos los flujos de trabajo Comportamiento del flujo de trabajo, 500 flujos de trabajo Figura 7: Comportamiento del flujo de trabajo para 900 flujos de trabajo. 0 50 100 150 200 250 300 0 200 400 600 800 1000 Tiempo total [segundos] Número de flujos de trabajo Tiempo máximo de finalización para todos los flujos de trabajo Algoritmo genético Round robin Proporcional aleatorio Codicioso Figura 8: Tiempo máximo de finalización para todos los flujos de trabajo. Este valor es la métrica makespan utilizada en la investigación de programación tradicional. Aunque útil, el makespan no tiene en cuenta la puntuación del valor comercial en nuestro dominio de problemas. La Figura 10 muestra el porcentaje de proveedores de servicios accedidos (es decir, el porcentaje de proveedores de servicios representados en la Figura 9) que tenían más procesos comerciales asignados que su concurrencia máxima anunciada. Por ejemplo, en el algoritmo voraz solo se utiliza un proveedor de servicios, y este proveedor se satura rápidamente. Por otro lado, el algoritmo aleatorio-proporcional utiliza muchos proveedores de servicios, pero debido a que los procesos comerciales se asignan de manera proporcional con más asignaciones yendo a los mejores proveedores, hay una tendencia a que un menor porcentaje de proveedores se saturen. Para completitud, mostramos el rendimiento del algoritmo genético en sí mismo en la Figura 11. El algoritmo escala linealmente con un aumento en el número de flujos de trabajo. Observamos que los algoritmos round-robin, random-proportional y greedy terminaron en menos de 1 segundo incluso para la configuración de flujo de trabajo más grande. Sin embargo, consideramos que el beneficio de encontrar puntajes de valor empresarial mucho más altos justifica el tiempo de ejecución del algoritmo genético; además, esperaríamos que el tiempo de ejecución mejore tanto con la optimización del software como con un ordenador más rápido que nuestro PC estándar. CONCLUSIÓN Los procesos comerciales dentro de los flujos de trabajo pueden ser orquestados para acceder a servicios web. En este artículo estudiamos la provisión de servicios de múltiples niveles, donde las solicitudes de servicios web a tipos de servicios pueden ser asignadas a diferentes proveedores de servicios. El problema resultante es que para poder soportar un gran número de flujos de trabajo, la asignación de procesos de negocio a proveedores de servicios web debe ser inteligente. Utilizamos una métrica de valor empresarial para medir el 0.2 0.4 0.6 0.8 1 0 200 400 600 800 1000 Porcentaje de todos los proveedores de servicios Número de flujos de trabajo Proveedores de servicios utilizados Algoritmo genético Round robin Proporcional aleatorio Ávido Figura 9: El porcentaje de proveedores de servicios utilizados durante las ejecuciones de carga de trabajo. El algoritmo Greedy siempre elige al mismo proveedor de servicios, mientras que el algoritmo Round Robin distribuye las solicitudes de manera uniforme entre los proveedores. 0 0.2 0.4 0.6 0.8 1 0 200 400 600 800 1000 Porcentaje de todos los proveedores de servicios Número de flujos de trabajo Proveedores saturados Algoritmo genético Round robin Proporcional aleatorio Greedy Figura 10: El porcentaje de proveedores de servicios que están saturados entre aquellos proveedores que fueron utilizados (es decir, el porcentaje de proveedores de servicios representados en la Figura 9). Un proveedor de servicios saturado es aquel cuya carga de trabajo es mayor que su concurrencia máxima anunciada. Dado que el espacio de soluciones de los mapeos de programación es exponencial, utilizamos un algoritmo de búsqueda genética para explorar el espacio y converger hacia el mejor horario. Con una configuración predeterminada para todos los parámetros y utilizando nuestra puntuación de valor empresarial, el GA produjo hasta un 115% de mejora en el valor empresarial sobre el siguiente mejor algoritmo. Finalmente, debido a que un algoritmo genético convergerá hacia el valor óptimo utilizando cualquier métrica (incluso diferente a la métrica de valor empresarial que utilizamos), creemos que nuestro enfoque tiene un fuerte potencial para trabajos futuros. En trabajos futuros, buscamos adquirir trazas del mundo real de instancias de servicios web para obtener mejores estimaciones de las garantías de acuerdo de servicio, aunque esperamos que tales garantías entre los proveedores y sus consumidores no estén generalmente disponibles para el público. También analizaremos otras métricas de calidad de servicio (QoS) como el uso de CPU y E/S. Por ejemplo, podemos analizar los costos de transferencia con diferentes anchos de banda, latencia, tamaño de datos y distribución de datos. Además, esperamos mejorar nuestro algoritmo genético y compararlo con más alternativas de programación. Finalmente, dado que nuestro trabajo es complementario al trabajo existente en coreografía de servicios web (porque dependemos de flujos de trabajo preconfigurados), buscamos integrar nuestro enfoque con los sistemas de flujo de trabajo de servicios web disponibles expresados en BPEL. 6. REFERENCIAS [1] A. Ankolekar, et al. DAML-S: Marcado Semántico para Servicios Web, En Proc. del Simposio Internacional de Trabajo de la Web Semántica, 2001. [2] L. Davis. Programación de taller con algoritmos genéticos, En Proc. de la Conferencia Internacional sobre Algoritmos Genéticos, 1985. [3] H.-L. Fang, P. Ross y D. Corne. Un Enfoque Prometedor de Algoritmo Genético para Problemas de Programación de Taller de Trabajo, Re-programación y Programación de Taller Abierto, En Actas de la 5ta Conferencia Internacional sobre Algoritmos Genéticos, 1993. [4] M. Gary y D. Johnson. Computadoras e Intractabilidad: Una Guía de la Teoría de NP-Completitud, Freeman, 1979. [5] J. Holland. Adaptación en Sistemas Naturales y Artificiales: Un Análisis Introductorio con Aplicaciones a la Biología, Control e Inteligencia Artificial, MIT Press, 1992. [6] D. Goldberg. Algoritmos Genéticos en Búsqueda, Optimización y Aprendizaje Automático, Kluwer Academic Publishers, 1989. [7] Procesos de Negocio en un Mundo de Servicios Web, www-128.ibm.com/developerworks/webservices/library/ws-bpelwp/. [8] G. Soundararajan, K. Manassiev, J. Chen, A. Goel y C. Amza. Bases de datos de back-end en clústeres de servidores de contenido dinámico compartido, En Proc. de la Conferencia Internacional de Computación Autónoma de IEEE, 2005. [9] B. Srivastava y J. Koehler. Composición de Servicios Web: Soluciones Actuales y Problemas Abiertos, ICAP, 2003. [10] B. Urgaonkar, P. Shenoy, A. Chandra y P. Goyal. Provisión dinámica de aplicaciones de Internet de múltiples niveles, En Proc. de la Conferencia Internacional de IEEE sobre Computación Autónoma, 2005. [11] L. Zeng, B. Benatallah, M. Dumas, J. Kalagnanam y Q. Sheng. Composición de Servicios Web Impulsada por la Calidad, En Proc. de la Conferencia WWW, 2003. 35 ",
            "candidates": [],
            "error": [
                [
                    ""
                ]
            ]
        },
        "business process workflow": {
            "translated_key": "Proceso de Negocio",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Heuristics-Based Scheduling of Composite Web Service Workloads Thomas Phan Wen-Syan Li IBM Almaden Research Center 650 Harry Rd.",
                "San Jose, CA 95120 {phantom,wsl}@us.ibm.com ABSTRACT Web services can be aggregated to create composite workflows that provide streamlined functionality for human users or other systems.",
                "Although industry standards and recent research have sought to define best practices and to improve end-to-end workflow composition, one area that has not fully been explored is the scheduling of a workflows web service requests to actual service provisioning in a multi-tiered, multi-organisation environment.",
                "This issue is relevant to modern business scenarios where business processes within a workflow must complete within QoS-defined limits.",
                "Because these business processes are web service consumers, service requests must be mapped and scheduled across multiple web service providers, each with its own negotiated service level agreement.",
                "In this paper we provide heuristics for scheduling service requests from multiple business process workflows to web service providers such that a business value metric across all workflows is maximised.",
                "We show that a genetic search algorithm is appropriate to perform this scheduling, and through experimentation we show that our algorithm scales well up to a thousand workflows and produces better mappings than traditional approaches.",
                "Categories and Subject Descriptors C.2.4 [Computer-Communication Networks]: Distributed Systems-distributed applications; D.2.8 [Software Engineering]: Metrics-complexity measures, performance measures 1.",
                "INTRODUCTION Web services can be composed into workflows to provide streamlined end-to-end functionality for human users or other systems.",
                "Although previous research efforts have looked at ways to intelligently automate the composition of web services into workflows (e.g. [1, 9]), an important remaining problem is the assignment of web service requests to the underlying web service providers in a multi-tiered runtime scenario within constraints.",
                "In this paper we address this scheduling problem and examine means to manage a large number of business process workflows in a scalable manner.",
                "The problem of scheduling web service requests to providers is relevant to modern business domains that depend on multi-tiered service provisioning.",
                "Consider the example shown in Figure 1 that illustrates our problem space.",
                "Workflows comprise multiple related business processes that are web service consumers; here we assume that the workflows represent requested service from customers or automated systems and that the workflow has already been composed with an existing choreography toolkit.",
                "These workflows are then submitted to a portal (not shown) that acts as a scheduling agent between the web service consumers and the web service providers.",
                "In this example, a workflow could represent the actions needed to instantiate a vacation itinerary, where one business process requests booking an airline ticket, another business process requests a hotel room, and so forth.",
                "Each of these requests target a particular service type (e.g. airline reservations, hotel reservations, car reservations, etc. ), and for each service type, there are multiple instances of service providers that publish a web service interface.",
                "An important challenge is that the workflows must meet some quality-of-service (QoS) metric, such as end-to-end completion time of all its business processes, and that meeting or failing this goal results in the assignment of a quantitative business value metric for the workflow; intuitively, it is desired that all workflows meet their respective QoS goals.",
                "We further leverage the notion that QoS service agreements are generally agreed-upon between the web service providers and the scheduling agent such that the providers advertise some level of guaranteed QoS to the scheduler based upon runtime conditions such as turnaround time and maximum available concurrency.",
                "The resulting problem is then to schedule and assign the business processes requests for service types to one of the service providers for that type.",
                "The scheduling must be done such that the aggregate business value across all the workflows is maximised.",
                "In Section 3 we state the scenario as a combinatorial problem and utilise a genetic search algorithm [5] to find the best assignment of web service requests to providers.",
                "This approach converges towards an assignment that maximises the overall business value for all the workflows.",
                "In Section 4 we show through experimentation that this search heuristic finds better assignments than other algorithms (greedy, round-robin, and proportional).",
                "Further, this approach allows us to scale the number of simultaneous workflows (up to one thousand workflows in our experiments) and yet still find effective schedules. 2.",
                "RELATED WORK In the context of service assignment and scheduling, [11] maps web service calls to potential servers using linear programming, but their work is concerned with mapping only single workflows; our principal focus is on scalably scheduling multiple workflows (up 30 Service Type SuperHotels.com Business Process <br>business process workflow</br> ... Business Process Business Process ... HostileHostels.com IncredibleInns.com Business Process Business Process Business Process ... Business Process Service Provider SkyHighAirlines.com SuperCrazyFlights.com Business Process . . . . . .",
                "Advertised QoS Service Agreement CarRentalService.com Figure 1: An example scenario demonstrating the interaction between business processes in workflows and web service providers.",
                "Each business process accesses a service type and is then mapped to a service provider for that type. to one thousand as we show later) using different business metrics and a search heuristic. [10] presents a dynamic provisioning approach that uses both predictive and reactive techniques for multi-tiered Internet application delivery.",
                "However, the provisioning techniques do not consider the challenges faced when there are alternative query execution plans and replicated data sources. [8] presents a feedback-based scheduling mechanism for multi-tiered systems with back-end databases, but unlike our work, it assumes a tighter coupling between the various components of the system.",
                "Our work also builds upon prior scheduling research.",
                "The classic job-shop scheduling problem, shown to be NP-complete [4] [3], is similar to ours in that tasks within a job must be scheduled onto machinery (c.f. our scenario is that business processes within a workflow must be scheduled onto web service providers).",
                "The salient differences are that the machines can process only one job at a time (we assume servers can multi-task but with degraded performance and a maximum concurrency level), tasks within a job cannot simultaneously run on different machines (we assume business processes can be assigned to any available server), and the principal metric of performance is the makespan, which is the time for the last task among all the jobs to complete (and as we show later, optimising on the makespan is insufficient for scheduling the business processes, necessitating different metrics). 3.",
                "DESIGN In this section we describe our model and discuss how we can find scheduling assignments using a genetic search algorithm. 3.1 Model We base our model on the simplified scenario shown in Figure 1.",
                "Specifically, we assume that users or automated systems request the execution of a workflow.",
                "The workflows comprise business processes, each of which makes one web service invocation to a service type.",
                "Further, business processes have an ordering in the workflow.",
                "The arrangement and execution of the business processes and the data flow between them are all managed by a composition or choreography tool (e.g. [1, 9]).",
                "Although composition languages can use sophisticated flow-control mechanisms such as conditional branches, for simplicity we assume the processes execute sequentially in a given order.",
                "This scenario can be naturally extended to more complex relationships that can be expressed in BPEL [7], which defines how business processes interact, messages are exchanged, activities are ordered, and exceptions are handled.",
                "Due to space constraints, we focus on the problem space presented here and will extend our model to more advanced deployment scenarios in the future.",
                "Each workflow has a QoS requirement to complete within a specified number of time units (e.g. on the order of seconds, as detailed in the Experiments section).",
                "Upon completion (or failure), the workflow is assigned a business value.",
                "We extended this approach further and considered different types of workflow completion in order to model differentiated QoS levels that can be applied by businesses (for example, to provide tiered customer service).",
                "We say that a workflow is successful if it completes within its QoS requirement, acceptable if it completes within a constant factor κ 31 of its QoS bound (in our experiments we chose κ=3), or failing if it finishes beyond κ times its QoS bound.",
                "For each category, a business value score is assigned to the workflow, with the successful category assigned the highest positive score, followed by acceptable and then failing.",
                "The business value point distribution is non-uniform across workflows, further modelling cases where some workflows are of higher priority than others.",
                "Each service type is implemented by a number of different service providers.",
                "We assume that the providers make service level agreements (SLAs) to guarantee a level of performance defined by the completion time for completing a web service invocation.",
                "Although SLAs can be complex, in this paper we assume for simplicity that the guarantees can take the form of a linear performance degradation under load.",
                "This guarantee is defined by several parameters: α is the expected completion time (for example, on the order of seconds) if the assigned workload of web service requests is less than or equal to β, the maximum concurrency, and if the workload is higher than β, the expected completion for a workload of size ω is α+ γ(ω − β) where γ is a fractional coefficient.",
                "In our experiments we vary α, β, and γ with different distributions.",
                "Ideally, all workflows would be able to finish within their QoS limits and thus maximise the aggregate business value across all workflows.",
                "However, because we model service providers with degrading performance under load, not all workflows will achieve their QoS limit: it may easily be the case that business processes are assigned to providers who are overloaded and cannot complete within the respective workflows QoS limit.",
                "The key research problem, then, is to assign the business processes to the web service providers with the goal of optimising on the aggregate business value of all workflows.",
                "Given that the scope of the optimisation is the entire set of workflows, it may be that the best scheduling assignments may result in some workflows having to fail in order for more workflows to succeed.",
                "This intuitive observation suggests that traditional scheduling approaches such as round-robin or proportional assignments will not fare well, which is what we observe and discuss in Section 4.",
                "On the other hand, an exhaustive search of all the possible assignments will find the best schedule, but the computational complexity is prohibitively high.",
                "Suppose there are W workflows with an average of B business processes per workflow.",
                "Further, in the worst case each business process requests one service type, for which there are P providers.",
                "There are thus W · PB combinations to explore to find the optimal assignments of business processes to providers.",
                "Even for small configurations (e.g.",
                "W =10, B=5, P=10), the computational time for exhaustive search is significant, and in our work we look to scale these parameters.",
                "In the next subsection, discuss how a genetic search algorithm can be used to converge toward the optimum scheduling assignments. 3.2 Genetic algorithm Given an exponential search space of business process assignments to web service providers, the problem is to find the optimal assignment that produces the overall highest aggregate business value across all workflows.",
                "To explore the solution space, we use a genetic algorithm (GA) search heuristic that simulates Darwinian natural selection by having members of a population compete to survive in order to pass their genetic chromosomes onto the next generation; after successive generations, there is a tendency for the chromosomes to converge toward the best combination [5] [6].",
                "Although other search heuristics exist that can solve optimization problems (e.g. simulated annealing or steepest-ascent hillclimbing), the business process scheduling problem fits well with a GA because potential solutions can be represented in a matrix form and allows us to use prior research in effective GA chromosome recombination to form new members of the population (e.g. [2]). 0 1 2 3 4 0 1 2 0 2 1 1 0 1 0 1 0 2 1 2 0 0 1 Figure 2: An example chromosome representing a scheduling assignment of (workflow,service type) → service provider.",
                "Each row represents a workflow, and each column represents a service type.",
                "For example, here there are 3 workflows (0 to 2) and 5 service types (0 to 4).",
                "In workflow 0, any request for service type 3 goes to provider 2.",
                "Note that the service provider identifier is within a range limited to its service type (i.e. its column), so the 2 listed for service type 3 is a different server from server 2 in other columns.",
                "Chromosome representation of a solution.",
                "In Figure 2 we show an example chromosome that encodes one scheduling assignment.",
                "The representation is a 2-dimensional matrix that maps {workflow, service type} to a service provider.",
                "For a business process in workflow i and utilising service type j, the (i, j)th entry in the table is the identifier for the service provider to which the business process is assigned.",
                "Note that the service provider identifier is within a range limited to its service type.",
                "GA execution.",
                "A GA proceeds as follows.",
                "Initially a random set of chromosomes is created for the population.",
                "The chromosomes are evaluated (hashed) to some metric, and the best ones are chosen to be parents.",
                "In our problem, the evaluation produces the net business value across all workflows after executing all business processes once they are assigned to their respective service providers according to the mapping in the chromosome.",
                "The parents recombine to produce children, simulating sexual crossover, and occasionally a mutation may arise which produces new characteristics that were not available in either parent.",
                "The principal idea is that we would like the children to be different from the parents (in order to explore more of the solution space) yet not too different (in order to contain the portions of the chromosome that result in good scheduling assignments).",
                "Note that finding the global optimum is not guaranteed because the recombination and mutation are stochastic.",
                "GA recombination and mutation.",
                "As mentioned, the chromosomes are 2-dimensional matrices that represent scheduling assignments.",
                "To simulate sexual recombination of two chromosomes to produce a new child chromosome, we applied a one-point crossover scheme twice (once along each dimension).",
                "The crossover is best explained by analogy to Cartesian space as follows.",
                "A random point is chosen in the matrix to be coordinate (0, 0).",
                "Matrix elements from quadrants II and IV from the first parent and elements from quadrants I and III from the second parent are used to create the new child.",
                "This approach follows GA best practices by keeping contiguous chromosome segments together as they are transmitted from parent to child.",
                "The uni-chromosome mutation scheme randomly changes one of the service provider assignments to another provider within the available range.",
                "Other recombination and mutation schemes are an area of research in the GA community, and we look to explore new operators in future work.",
                "GA evaluation function.",
                "An important GA component is the evaluation function.",
                "Given a particular chromosome representing one scheduling mapping, the function deterministically calculates the net business value across all workloads.",
                "The business processes in each workload are assigned to service providers, and each providers completion time is calculated based on the service agreement guarantee using the parameters mentioned in Section 3.1, namely the unloaded completion time α, the maximum concur32 rency β, and a coefficient γ that controls the linear performance degradation under heavy load.",
                "Note that the evaluation function can be easily replaced if desired; for example, other evaluation functions can model different service provider guarantees or parallel workflows. 4.",
                "EXPERIMENTS AND RESULTS In this section we show the benefit of using our GA-based scheduler.",
                "Because we wanted to scale the scenarios up to a large number of workflows (up to 1000 in our experiments), we implemented a simulation program that allowed us to vary parameters and to measure the results with different metrics.",
                "The simulator was written in standard C++ and was run on a Linux (Fedora Core) desktop computer running at 2.8 GHz with 1GB of RAM.",
                "We compared our algorithm against alternative candidates: • A well-known round-robin algorithm that assigns each business process in circular fashion to the service providers for a particular service type.",
                "This approach provides the simplest scheme for load-balancing. • A random-proportional algorithm that proportionally assigns business processes to the service providers; that is, for a given service type, the service providers are ranked by their guaranteed completion time, and business processes are assigned proportionally to the providers based on their completion time. (We also tried a proportionality scheme based on both the completion times and maximum concurrency but attained the same results, so only the former schemes results are shown here.) • A strawman greedy algorithm that always assigns business processes to the service provider that has the fastest guaranteed completion time.",
                "This algorithm represents a naive approach based on greedy, local observations of each workflow without taking into consideration all workflows.",
                "In the experiments that follow, all results were averaged across 20 trials, and to help normalise the effects of randomisation used during the GA, each trial started by reading in pre-initialised data from disk.",
                "In Table 1 we list our experimental parameters.",
                "In Figure 3 we show the results of running our GA against the three candidate alternatives.",
                "The x-axis shows the number for workflows scaled up to 1000, and the y-axis shows the aggregate business value for all workflows.",
                "As can be seen, the GA consistently produces the highest business value even as the number of workflows grows; at 1000 workflows, the GA produces a 115% improvement over the next-best alternative. (Note that although we are optimising against the business value metric we defined earlier, genetic algorithms are able to converge towards the optimal value of any metric, as long as the evaluation function can consistently measure a chromosomes value with that metric.)",
                "As expected, the greedy algorithm performs very poorly because it does the worst job at balancing load: all business processes for a given service type are assigned to only one server (the one advertised to have the fastest completion time), and as more business processes arrive, the providers performance degrades linearly.",
                "The round-robin scheme is initially outperformed by the randomproportional scheme up to around 120 workflows (as shown in the magnified graph of Figure 4), but as the number of workflows increases, the round-robin scheme consistently wins over randomproportional.",
                "The reason is that although the random-proportional scheme assigns business processes to providers proportionally according to the advertised completion times (which is a measure of the power of the service provider), even the best providers will eventually reach a real-world maximum concurrency for the large -2000 -1000 0 1000 2000 3000 4000 5000 6000 7000 0 200 400 600 800 1000 Aggregatebusinessvalueacrossallworkflows Total number of workflows Business value scores of scheduling algorithms Genetic algorithm Round robin Random proportional Greedy Figure 3: Net business value scores of different scheduling algorithms. -500 0 500 1000 1500 2000 2500 3000 3500 4000 0 50 100 150 200Aggregatebusinessvalueacrossallworkflows Total number of workflows Business value scores of scheduling algorithms Genetic algorithm Round robin Random proportional Greedy Figure 4: Magnification of the left-most region in Figure 3. number of workflows that we are considering.",
                "For a very large number of workflows, the round-robin scheme is able to better balance the load across all service providers.",
                "To better understand the behaviour resulting from the scheduling assignments, we show the workflow completion results in Figures 5, 6, and 7 for 100, 500, and 900 workflows, respectively.",
                "These figures show the percentage of workflows that are successful (can complete with their QoS limit), acceptable (can complete within κ=3 times their QoS limit), and failed (cannot complete within κ=3 times their QoS limit).",
                "The GA consistently produces the highest percentage of successful workflows (resulting in higher business values for the aggregate set of workflows).",
                "Further, the round-robin scheme produces better results than the random-proportional for a large number of workflows but does not perform as well as the GA.",
                "In Figure 8 we graph the makespan resulting from the same experiments above.",
                "Makespan is a traditional metric from the job scheduling community measuring elapsed time for the last job to complete.",
                "While useful, it does not capture the high-level business value metric that we are optimising against.",
                "Indeed, the makespan is oblivious to the fact that we provide multiple levels of completion (successful, acceptable, and failed) and assign business value scores accordingly.",
                "For completeness, we note that the GA provides the fastest makespan, but it is matched by the round robin algorithm.",
                "The GA produces better business values (as shown in Figure 3) because it is able to search the solution space to find better mappings that produce more successful workflows (as shown in Figures 5 to 7).",
                "We also looked at the effect of the scheduling algorithms on balancing the load.",
                "Figure 9 shows the percentage of services providers that were accessed while the workflows ran.",
                "As expected, the greedy algorithm always hits one service provider; on the other hand, the round-robin algorithm is the fastest to spread the business 33 Experimental parameter Comment Workflows 5 to 1000 Business processes per workflow uniform random: 1 - 10 Service types 10 Service providers per service type uniform random: 1 - 10 Workflow QoS goal uniform random: 10-30 seconds Service provider completion time (α) uniform random: 1 - 12 seconds Service provider maximum concurrency (β) uniform random: 1 - 12 Service provider degradation coefficient (γ) uniform random: 0.1 - 0.9 Business value for successful workflows uniform random: 10 - 50 points Business value for acceptable workflows uniform random: 0 - 10 points Business value for failed workflows uniform random: -10 - 0 points GA: number of parents 20 GA: number of children 80 GA: number of generations 1000 Table 1: Experimental parameters Failed Acceptable (completed but not within QoS) Successful (completed within QoS) 0% 20% 40% 60% 80% 100% RoundRobinRandProportionalGreedyGeneticAlg Percentageofallworkflows Workflow behaviour, 100 workflows Figure 5: Workflow behaviour for 100 workflows.",
                "Failed Acceptable (completed but not within QoS) Successful (completed within QoS) 0% 20% 40% 60% 80% 100% RoundRobinRandProportionalGreedyGeneticAlg Percentageofallworkflows Workflow behaviour, 500 workflows Figure 6: Workflow behaviour for 500 workflows.",
                "Failed Acceptable (completed but not within QoS) Successful (completed within QoS) 0% 20% 40% 60% 80% 100% RoundRobinRandProportionalGreedyGeneticAlg Percentageofallworkflows Workflow behaviour, 500 workflows Figure 7: Workflow behaviour for 900 workflows. 0 50 100 150 200 250 300 0 200 400 600 800 1000 Makespan[seconds] Number of workflows Maximum completion time for all workflows Genetic algorithm Round robin Random proportional Greedy Figure 8: Maximum completion time for all workflows.",
                "This value is the makespan metric used in traditional scheduling research.",
                "Although useful, the makespan does not take into consideration the business value scoring in our problem domain. processes.",
                "Figure 10 is the percentage of accessed service providers (that is, the percentage of service providers represented in Figure 9) that had more assigned business processes than their advertised maximum concurrency.",
                "For example, in the greedy algorithm only one service provider is utilised, and this one provider quickly becomes saturated.",
                "On the other hand, the random-proportional algorithm uses many service providers, but because business processes are proportionally assigned with more assignments going to the better providers, there is a tendency for a smaller percentage of providers to become saturated.",
                "For completeness, we show the performance of the genetic algorithm itself in Figure 11.",
                "The algorithm scales linearly with an increasing number of workflows.",
                "We note that the round-robin, random-proportional, and greedy algorithms all finished within 1 second even for the largest workflow configuration.",
                "However, we feel that the benefit of finding much higher business value scores justifies the running time of the GA; further we would expect that the running time will improve with both software tuning as well as with a computer faster than our off-the-shelf PC. 5.",
                "CONCLUSION Business processes within workflows can be orchestrated to access web services.",
                "In this paper we looked at multi-tiered service provisioning where web service requests to service types can be mapped to different service providers.",
                "The resulting problem is that in order to support a very large number of workflows, the assignment of business process to web service provider must be intelligent.",
                "We used a business value metric to measure the be34 0 0.2 0.4 0.6 0.8 1 0 200 400 600 800 1000 Percentageofallserviceproviders Number of workflows Service providers utilised Genetic algorithm Round robin Random proportional Greedy Figure 9: The percentage of service providers utilized during workload executions.",
                "The Greedy algorithm always hits the one service provider, while the Round Robin algorithm spreads requests evenly across the providers. 0 0.2 0.4 0.6 0.8 1 0 200 400 600 800 1000 Percentageofallserviceproviders Number of workflows Service providers saturated Genetic algorithm Round robin Random proportional Greedy Figure 10: The percentage of service providers that are saturated among those providers who were utilized (that is, percentage of the service providers represented in Figure 9).",
                "A saturated service provider is one whose workload is greater that its advertised maximum concurrency. 0 5 10 15 20 25 0 200 400 600 800 1000 Runningtimeinseconds Total number of workflows Running time of genetic algorithm GA running time Figure 11: Running time of the genetic algorithm. haviour of workflows meeting or failing QoS values, and we optimised our scheduling to maximise the aggregate business value across all workflows.",
                "Since the solution space of scheduler mappings is exponential, we used a genetic search algorithm to search the space and converge toward the best schedule.",
                "With a default configuration for all parameters and using our business value scoring, the GA produced up to 115% business value improvement over the next best algorithm.",
                "Finally, because a genetic algorithm will converge towards the optimal value using any metric (even other than the business value metric we used), we believe our approach has strong potential for continuing work.",
                "In future work, we look to acquire real-world traces of web service instances in order to get better estimates of service agreement guarantees, although we expect that such guarantees between the providers and their consumers are not generally available to the public.",
                "We will also look at other QoS metrics such as CPU and I/O usage.",
                "For example, we can analyse transfer costs with varying bandwidth, latency, data size, and data distribution.",
                "Further, we hope to improve our genetic algorithm and compare it to more scheduler alternatives.",
                "Finally, since our work is complementary to existing work in web services choreography (because we rely on pre-configured workflows), we look to integrate our approach with available web service workflow systems expressed in BPEL. 6.",
                "REFERENCES [1] A. Ankolekar, et al.",
                "DAML-S: Semantic Markup For Web Services, In Proc. of the Intl Semantic Web Working Symposium, 2001. [2] L. Davis.",
                "Job Shop Scheduling with Genetic Algorithms, In Proc. of the Intl Conference on Genetic Algorithms, 1985. [3] H.-L. Fang, P. Ross, and D. Corne.",
                "A Promising Genetic Algorithm Approach to Job-Shop Scheduling, Rescheduling, and Open-Shop Scheduling Problems , In Proc. on the 5th Intl Conference on Genetic Algorithms, 1993. [4] M. Gary and D. Johnson.",
                "Computers and Intractability: A Guide to the Theory of NP-Completeness, Freeman, 1979. [5] J. Holland.",
                "Adaptation in Natural and Artificial Systems: An Introductory Analysis with Applications to Biology, Control, and Artificial Intelligence, MIT Press, 1992. [6] D. Goldberg.",
                "Genetic Algorithms in Search, Optimization and Machine Learning, Kluwer Academic Publishers, 1989. [7] Business Processes in a Web Services World, www-128.ibm.com/developerworks/ webservices/library/ws-bpelwp/. [8] G. Soundararajan, K. Manassiev, J. Chen, A. Goel, and C. Amza.",
                "Back-end Databases in Shared Dynamic Content Server Clusters, In Proc. of the IEEE Intl Conference on Autonomic Computing, 2005. [9] B. Srivastava and J. Koehler.",
                "Web Service Composition Current Solutions and Open Problems, ICAP, 2003. [10] B. Urgaonkar, P. Shenoy, A. Chandra, and P. Goyal.",
                "Dynamic Provisioning of Multi-Tier Internet Applications, In Proc. of the IEEE Intl Conference on Autonomic Computing, 2005. [11] L. Zeng, B. Benatallah, M. Dumas, J. Kalagnanam, and Q. Sheng.",
                "Quality Driven Web Services Composition, In Proc. of the WWW Conference, 2003. 35"
            ],
            "original_annotated_samples": [
                "RELATED WORK In the context of service assignment and scheduling, [11] maps web service calls to potential servers using linear programming, but their work is concerned with mapping only single workflows; our principal focus is on scalably scheduling multiple workflows (up 30 Service Type SuperHotels.com Business Process <br>business process workflow</br> ... Business Process Business Process ... HostileHostels.com IncredibleInns.com Business Process Business Process Business Process ... Business Process Service Provider SkyHighAirlines.com SuperCrazyFlights.com Business Process . . . . . ."
            ],
            "translated_annotated_samples": [
                "TRABAJO RELACIONADO En el contexto de asignación y programación de servicios, [11] mapea llamadas de servicios web a servidores potenciales utilizando programación lineal, pero su trabajo se centra en mapear solo flujos de trabajo individuales; nuestro enfoque principal está en programar de manera escalable múltiples flujos de trabajo (hasta 30 tipos de servicios SuperHotels.com <br>Proceso de Negocio</br> <br>Proceso de Negocio</br> Flujo de Trabajo ... Proceso de Negocio Proceso de Negocio ... HostileHostels.com IncredibleInns.com Proceso de Negocio Proceso de Negocio Proceso de Negocio ... Proceso de Negocio Proveedor de Servicios SkyHighAirlines.com SuperCrazyFlights.com Proceso de Negocio . . . . . ."
            ],
            "translated_text": "Programación basada en heurísticas de cargas de trabajo de servicios web compuestos Thomas Phan Wen-Syan Li Centro de Investigación IBM Almaden 650 Harry Rd. Los servicios web pueden ser agregados para crear flujos de trabajo compuestos que proporcionen funcionalidad simplificada para usuarios humanos u otros sistemas. Aunque los estándares de la industria y la investigación reciente han buscado definir las mejores prácticas y mejorar la composición del flujo de trabajo de extremo a extremo, un área que no ha sido completamente explorada es la programación de las solicitudes de servicios web de los flujos de trabajo para la provisión real de servicios en un entorno multinivel y multiorganizacional. Este problema es relevante para los escenarios empresariales modernos donde los procesos comerciales dentro de un flujo de trabajo deben completarse dentro de los límites definidos por la calidad de servicio (QoS). Debido a que estos procesos comerciales son consumidores de servicios web, las solicitudes de servicio deben ser mapeadas y programadas entre múltiples proveedores de servicios web, cada uno con su propio acuerdo de nivel de servicio negociado. En este documento proporcionamos heurísticas para programar solicitudes de servicio de múltiples flujos de trabajo de procesos comerciales a proveedores de servicios web de manera que se maximice una métrica de valor comercial en todos los flujos de trabajo. Mostramos que un algoritmo de búsqueda genética es apropiado para realizar esta programación, y a través de experimentación demostramos que nuestro algoritmo escala bien hasta mil flujos de trabajo y produce mejores asignaciones que enfoques tradicionales. Categorías y Descriptores de Asignaturas C.2.4 [Redes de Computadoras-Comunicación]: Sistemas Distribuidos-aplicaciones distribuidas; D.2.8 [Ingeniería de Software]: Métricas-medidas de complejidad, medidas de rendimiento 1. INTRODUCCIÓN Los servicios web pueden ser compuestos en flujos de trabajo para proporcionar funcionalidad integrada de principio a fin para usuarios humanos u otros sistemas. Aunque los esfuerzos de investigación previos han examinado formas de automatizar de manera inteligente la composición de servicios web en flujos de trabajo (por ejemplo, [1, 9]), un problema importante que aún persiste es la asignación de solicitudes de servicios web a los proveedores de servicios web subyacentes en un escenario de tiempo de ejecución multinivel dentro de ciertas restricciones. En este documento abordamos este problema de programación y examinamos medios para gestionar un gran número de flujos de trabajo de procesos comerciales de manera escalable. El problema de programar solicitudes de servicios web a proveedores es relevante para los dominios comerciales modernos que dependen de la provisión de servicios de múltiples niveles. Considera el ejemplo mostrado en la Figura 1 que ilustra nuestro espacio de problemas. Los flujos de trabajo comprenden múltiples procesos comerciales relacionados que son consumidores de servicios web; aquí asumimos que los flujos de trabajo representan servicios solicitados por clientes o sistemas automatizados y que el flujo de trabajo ya ha sido compuesto con una herramienta de coreografía existente. Estos flujos de trabajo son luego enviados a un portal (no mostrado) que actúa como un agente de programación entre los consumidores del servicio web y los proveedores del servicio web. En este ejemplo, un flujo de trabajo podría representar las acciones necesarias para crear un itinerario de vacaciones, donde un proceso empresarial solicita la reserva de un boleto de avión, otro proceso empresarial solicita una habitación de hotel, y así sucesivamente. Cada una de estas solicitudes apunta a un tipo de servicio en particular (por ejemplo, reservas de aerolíneas, reservas de hoteles, reservas de autos, etc.), y para cada tipo de servicio, hay múltiples instancias de proveedores de servicios que publican una interfaz de servicio web. Un desafío importante es que los flujos de trabajo deben cumplir con alguna métrica de calidad de servicio (QoS), como el tiempo de finalización de extremo a extremo de todos sus procesos comerciales, y que cumplir o no con este objetivo resulta en la asignación de una métrica de valor comercial cuantitativo para el flujo de trabajo; intuitivamente, se desea que todos los flujos de trabajo cumplan con sus respectivos objetivos de QoS. Además, aprovechamos la idea de que los acuerdos de servicio de QoS suelen ser acordados entre los proveedores de servicios web y el agente de programación de tal manera que los proveedores anuncian un cierto nivel de QoS garantizado al programador en función de condiciones de tiempo de respuesta y concurrencia máxima disponible. El problema resultante es entonces programar y asignar las solicitudes de procesos comerciales para tipos de servicio a uno de los proveedores de servicios para ese tipo. La programación debe realizarse de tal manera que se maximice el valor comercial agregado en todos los flujos de trabajo. En la Sección 3 planteamos el escenario como un problema combinatorio y utilizamos un algoritmo de búsqueda genética [5] para encontrar la mejor asignación de solicitudes de servicios web a proveedores. Este enfoque converge hacia una asignación que maximiza el valor comercial general para todos los flujos de trabajo. En la Sección 4 mostramos a través de experimentación que esta heurística de búsqueda encuentra asignaciones mejores que otros algoritmos (codicioso, round-robin y proporcional). Además, este enfoque nos permite escalar el número de flujos de trabajo simultáneos (hasta mil flujos de trabajo en nuestros experimentos) y aún así encontrar horarios efectivos. 2. TRABAJO RELACIONADO En el contexto de asignación y programación de servicios, [11] mapea llamadas de servicios web a servidores potenciales utilizando programación lineal, pero su trabajo se centra en mapear solo flujos de trabajo individuales; nuestro enfoque principal está en programar de manera escalable múltiples flujos de trabajo (hasta 30 tipos de servicios SuperHotels.com <br>Proceso de Negocio</br> <br>Proceso de Negocio</br> Flujo de Trabajo ... Proceso de Negocio Proceso de Negocio ... HostileHostels.com IncredibleInns.com Proceso de Negocio Proceso de Negocio Proceso de Negocio ... Proceso de Negocio Proveedor de Servicios SkyHighAirlines.com SuperCrazyFlights.com Proceso de Negocio . . . . . . Acuerdo de Servicio de Calidad de Servicio (QoS) Publicitado CarRentalService.com Figura 1: Un escenario de ejemplo que muestra la interacción entre procesos comerciales en flujos de trabajo y proveedores de servicios web. Cada proceso empresarial accede a un tipo de servicio y luego se asigna a un proveedor de servicios para ese tipo, a uno mil como mostraremos más adelante, utilizando diferentes métricas empresariales y una heurística de búsqueda. [10] presenta un enfoque de aprovisionamiento dinámico que utiliza técnicas predictivas y reactivas para la entrega de aplicaciones de Internet multinivel. Sin embargo, las técnicas de aprovisionamiento no consideran los desafíos enfrentados cuando hay planes alternativos de ejecución de consultas y fuentes de datos replicadas. [8] presenta un mecanismo de programación basado en retroalimentación para sistemas multinivel con bases de datos de back-end, pero a diferencia de nuestro trabajo, asume un acoplamiento más estrecho entre los diversos componentes del sistema. Nuestro trabajo también se basa en investigaciones previas sobre programación. El problema clásico de programación de talleres, demostrado como NP-completo [4] [3], es similar al nuestro en el sentido de que las tareas dentro de un trabajo deben ser programadas en maquinaria (cf. nuestro escenario es que los procesos comerciales dentro de un flujo de trabajo deben ser programados en proveedores de servicios web). Las diferencias más destacadas son que las máquinas solo pueden procesar un trabajo a la vez (asumimos que los servidores pueden realizar múltiples tareas pero con un rendimiento degradado y un nivel máximo de concurrencia), las tareas dentro de un trabajo no pueden ejecutarse simultáneamente en diferentes máquinas (asumimos que los procesos comerciales pueden asignarse a cualquier servidor disponible), y la métrica principal de rendimiento es el makespan, que es el tiempo que tarda la última tarea de todos los trabajos en completarse (y como mostraremos más adelante, optimizar el makespan no es suficiente para programar los procesos comerciales, lo que requiere diferentes métricas). 3. En esta sección describimos nuestro modelo y discutimos cómo podemos encontrar asignaciones de programación utilizando un algoritmo de búsqueda genética. 3.1 Modelo Basamos nuestro modelo en el escenario simplificado mostrado en la Figura 1. Específicamente, asumimos que los usuarios o sistemas automatizados solicitan la ejecución de un flujo de trabajo. Los flujos de trabajo comprenden procesos comerciales, cada uno de los cuales realiza una invocación de servicio web a un tipo de servicio. Además, los procesos comerciales tienen un orden en el flujo de trabajo. La disposición y ejecución de los procesos comerciales y el flujo de datos entre ellos son gestionados por una herramienta de composición o coreografía (por ejemplo, [1, 9]). Aunque los lenguajes de composición pueden utilizar mecanismos sofisticados de control de flujo como ramas condicionales, para simplificar asumimos que los procesos se ejecutan secuencialmente en un orden dado. Este escenario puede ser extendido de forma natural a relaciones más complejas que pueden ser expresadas en BPEL [7], el cual define cómo interactúan los procesos de negocio, se intercambian mensajes, se ordenan actividades y se manejan excepciones. Debido a limitaciones de espacio, nos enfocamos en el espacio de problemas presentado aquí y extenderemos nuestro modelo a escenarios de implementación más avanzados en el futuro. Cada flujo de trabajo tiene un requisito de calidad de servicio (QoS) que debe completarse dentro de un número específico de unidades de tiempo (por ejemplo, del orden de segundos, como se detalla en la sección de Experimentos). Una vez completado (o fallido), se asigna un valor comercial al flujo de trabajo. Extendimos este enfoque aún más y consideramos diferentes tipos de finalización de flujo de trabajo para modelar niveles diferenciados de QoS que pueden ser aplicados por las empresas (por ejemplo, para proporcionar servicios al cliente escalonados). Decimos que un flujo de trabajo es exitoso si se completa dentro de su requisito de QoS, aceptable si se completa dentro de un factor constante κ 31 de su límite de QoS (en nuestros experimentos elegimos κ=3), o fallido si termina más allá de κ veces su límite de QoS. Para cada categoría, se asigna un puntaje de valor comercial al flujo de trabajo, siendo la categoría exitosa la que recibe la puntuación positiva más alta, seguida por la aceptable y luego la fallida. La distribución de puntos de valor empresarial no es uniforme en los flujos de trabajo, lo que modela casos en los que algunos flujos de trabajo tienen mayor prioridad que otros. Cada tipo de servicio es implementado por varios proveedores de servicios diferentes. Suponemos que los proveedores hacen acuerdos de nivel de servicio (SLAs) para garantizar un nivel de rendimiento definido por el tiempo de finalización de una invocación de servicio web. Aunque los Acuerdos de Nivel de Servicio (SLAs) pueden ser complejos, en este documento asumimos, para simplificar, que las garantías pueden adoptar la forma de una degradación lineal del rendimiento bajo carga. Esta garantía está definida por varios parámetros: α es el tiempo de finalización esperado (por ejemplo, del orden de segundos) si la carga de trabajo asignada de las solicitudes de servicio web es menor o igual a β, la concurrencia máxima, y si la carga de trabajo es mayor que β, la finalización esperada para una carga de trabajo de tamaño ω es α + γ(ω − β) donde γ es un coeficiente fraccional. En nuestros experimentos variamos α, β y γ con diferentes distribuciones. Idealmente, todos los flujos de trabajo podrían finalizar dentro de sus límites de calidad de servicio (QoS) y, por lo tanto, maximizar el valor empresarial agregado en todos los flujos de trabajo. Sin embargo, debido a que modelamos a los proveedores de servicios con un rendimiento degradante bajo carga, no todos los flujos de trabajo alcanzarán su límite de calidad de servicio (QoS): fácilmente puede darse el caso de que los procesos comerciales sean asignados a proveedores que están sobrecargados y no pueden completarse dentro del límite de calidad de servicio respectivo de los flujos de trabajo. El problema clave de investigación, entonces, es asignar los procesos comerciales a los proveedores de servicios web con el objetivo de optimizar el valor comercial agregado de todos los flujos de trabajo. Dado que el alcance de la optimización es el conjunto completo de flujos de trabajo, puede ser que las mejores asignaciones de programación resulten en que algunos flujos de trabajo tengan que fallar para que otros tengan éxito. Esta observación intuitiva sugiere que enfoques de programación tradicionales como el round-robin o asignaciones proporcionales no funcionarán bien, lo cual es lo que observamos y discutimos en la Sección 4. Por otro lado, una búsqueda exhaustiva de todas las posibles asignaciones encontrará el mejor horario, pero la complejidad computacional es prohibitivamente alta. Supongamos que hay W flujos de trabajo con un promedio de B procesos de negocio por flujo de trabajo. Además, en el peor de los casos, cada proceso empresarial solicita un tipo de servicio, para el cual hay P proveedores. Por lo tanto, hay W · PB combinaciones para explorar y encontrar las asignaciones óptimas de procesos comerciales a proveedores. Incluso para configuraciones pequeñas (por ejemplo, Dado que (W=10, B=5, P=10), el tiempo computacional para la búsqueda exhaustiva es significativo, y en nuestro trabajo buscamos ajustar estos parámetros. En la siguiente subsección, discuta cómo se puede utilizar un algoritmo de búsqueda genética para converger hacia las asignaciones de programación óptimas. 3.2 Algoritmo genético Dado un espacio de búsqueda exponencial de asignaciones de procesos comerciales a proveedores de servicios web, el problema es encontrar la asignación óptima que produzca el valor comercial agregado más alto en general en todos los flujos de trabajo. Para explorar el espacio de soluciones, utilizamos un algoritmo genético (GA) que simula la selección natural darwiniana al hacer que los miembros de una población compitan por sobrevivir para transmitir sus cromosomas genéticos a la siguiente generación; después de generaciones sucesivas, hay una tendencia a que los cromosomas converjan hacia la mejor combinación. Aunque existen otras heurísticas de búsqueda que pueden resolver problemas de optimización (por ejemplo, recocido simulado o escalada de colina más empinada), el problema de programación de procesos empresariales se adapta bien a un AG porque las soluciones potenciales pueden representarse en forma de matriz y nos permite utilizar investigaciones previas en la recombinación efectiva de cromosomas de AG para formar nuevos miembros de la población (por ejemplo, [2]). 0 1 2 3 4 0 1 2 0 2 1 1 0 1 0 1 0 2 1 2 0 0 1 Figura 2: Un ejemplo de cromosoma que representa una asignación de programación de (flujo de trabajo, tipo de servicio) → proveedor de servicios. Cada fila representa un flujo de trabajo, y cada columna representa un tipo de servicio. Por ejemplo, aquí hay 3 flujos de trabajo (0 a 2) y 5 tipos de servicio (0 a 4). En el flujo de trabajo 0, cualquier solicitud de tipo de servicio 3 se dirige al proveedor 2. Ten en cuenta que el identificador del proveedor de servicios se encuentra dentro de un rango limitado a su tipo de servicio (es decir, su columna), por lo que el 2 listado para el tipo de servicio 3 es un servidor diferente al servidor 2 en otras columnas. Representación cromosómica de una solución. En la Figura 2 mostramos un ejemplo de cromosoma que codifica una asignación de programación. La representación es una matriz bidimensional que mapea {flujo de trabajo, tipo de servicio} a un proveedor de servicios. Para un proceso de negocio en el flujo de trabajo i y utilizando el tipo de servicio j, la entrada (i, j)-ésima en la tabla es el identificador del proveedor de servicios al que se asigna el proceso de negocio. Ten en cuenta que el identificador del proveedor de servicios se encuentra dentro de un rango limitado a su tipo de servicio. Ejecución de GA. Un algoritmo genético procede de la siguiente manera. Inicialmente se crea un conjunto aleatorio de cromosomas para la población. Los cromosomas son evaluados (hasheados) según alguna métrica, y los mejores son elegidos para ser padres. En nuestro problema, la evaluación produce el valor neto del negocio en todos los flujos de trabajo después de ejecutar todos los procesos comerciales una vez que se asignan a sus respectivos proveedores de servicios de acuerdo con el mapeo en el cromosoma. Los padres se recombinan para producir hijos, simulando un cruce sexual, y ocasionalmente puede surgir una mutación que produce nuevas características que no estaban disponibles en ninguno de los padres. La idea principal es que nos gustaría que los niños fueran diferentes de los padres (para explorar más del espacio de soluciones) pero no demasiado diferentes (para contener las porciones del cromosoma que resultan en asignaciones de programación exitosas). Ten en cuenta que encontrar el óptimo global no está garantizado debido a que la recombinación y la mutación son estocásticas. Recombinación y mutación de ADN. Como se mencionó, los cromosomas son matrices bidimensionales que representan asignaciones de horarios. Para simular la recombinación sexual de dos cromosomas para producir un nuevo cromosoma hijo, aplicamos un esquema de cruce de un punto dos veces (una vez a lo largo de cada dimensión). El cruce se explica mejor por analogía al espacio cartesiano de la siguiente manera. Se elige un punto al azar en la matriz para que sea la coordenada (0, 0). Los elementos de la matriz de los cuadrantes II y IV del primer progenitor y los elementos de los cuadrantes I y III del segundo progenitor se utilizan para crear el nuevo hijo. Este enfoque sigue las mejores prácticas de los algoritmos genéticos al mantener juntos los segmentos cromosómicos contiguos a medida que se transmiten de padre a hijo. El esquema de mutación de uni-cromosoma cambia aleatoriamente una de las asignaciones de proveedor de servicios a otro proveedor dentro del rango disponible. Otros esquemas de recombinación y mutación son un área de investigación en la comunidad de AG, y buscamos explorar nuevos operadores en trabajos futuros. Función de evaluación de GA. Un componente importante de los algoritmos genéticos es la función de evaluación. Dada una cromosoma particular que representa un mapeo de programación, la función calcula de manera determinista el valor neto del negocio en todas las cargas de trabajo. Los procesos comerciales en cada carga de trabajo se asignan a proveedores de servicios, y el tiempo de finalización de cada proveedor se calcula en función de la garantía del acuerdo de servicio utilizando los parámetros mencionados en la Sección 3.1, a saber, el tiempo de finalización sin carga α, la máxima concurrencia β y un coeficiente γ que controla la degradación del rendimiento lineal bajo carga pesada. Ten en cuenta que la función de evaluación puede ser fácilmente reemplazada si se desea; por ejemplo, otras funciones de evaluación pueden modelar diferentes garantías de proveedores de servicios o flujos de trabajo paralelos. 4. EXPERIMENTOS Y RESULTADOS En esta sección mostramos el beneficio de utilizar nuestro planificador basado en algoritmos genéticos. Debido a que queríamos escalar los escenarios a un gran número de flujos de trabajo (hasta 1000 en nuestros experimentos), implementamos un programa de simulación que nos permitió variar parámetros y medir los resultados con diferentes métricas. El simulador fue escrito en C++ estándar y se ejecutó en un ordenador de escritorio Linux (Fedora Core) con una velocidad de 2.8 GHz y 1GB de RAM. Comparamos nuestro algoritmo con candidatos alternativos: • Un algoritmo de round-robin bien conocido que asigna cada proceso comercial de forma circular a los proveedores de servicios para un tipo de servicio en particular. Este enfoque proporciona el esquema más simple para el equilibrio de carga. • Un algoritmo aleatorio-proporcional que asigna proporcionalmente los procesos comerciales a los proveedores de servicios; es decir, para un tipo de servicio dado, los proveedores de servicios se clasifican según su tiempo de finalización garantizado, y los procesos comerciales se asignan proporcionalmente a los proveedores en función de su tiempo de finalización. (También probamos un esquema de proporcionalidad basado tanto en los tiempos de finalización como en la concurrencia máxima, pero obtuvimos los mismos resultados, por lo que solo se muestran los resultados de los esquemas anteriores aquí.) • Un algoritmo codicioso de hombre de paja que siempre asigna los procesos comerciales al proveedor de servicios que tiene el tiempo de finalización garantizado más rápido. Este algoritmo representa un enfoque ingenuo basado en observaciones avaras y locales de cada flujo de trabajo sin tener en cuenta todos los flujos de trabajo. En los experimentos que siguen, todos los resultados fueron promediados a lo largo de 20 pruebas, y para ayudar a normalizar los efectos de la aleatorización utilizada durante el AG, cada prueba comenzó leyendo datos preinicializados desde el disco. En la Tabla 1 enumeramos nuestros parámetros experimentales. En la Figura 3 mostramos los resultados de ejecutar nuestro AG contra las tres alternativas candidatas. El eje x muestra el número de flujos de trabajo escalado a 1000, y el eje y muestra el valor comercial agregado de todos los flujos de trabajo. Como se puede ver, el algoritmo genético produce consistentemente el mayor valor comercial incluso a medida que aumenta el número de flujos de trabajo; con 1000 flujos de trabajo, el algoritmo genético produce una mejora del 115% sobre la siguiente mejor alternativa. (Tenga en cuenta que aunque estamos optimizando en función de la métrica de valor comercial que definimos anteriormente, los algoritmos genéticos pueden converger hacia el valor óptimo de cualquier métrica, siempre y cuando la función de evaluación pueda medir de manera consistente el valor de un cromosoma con esa métrica). Como era de esperar, el algoritmo codicioso tiene un rendimiento muy pobre porque hace el peor trabajo en equilibrar la carga: todos los procesos comerciales de un tipo de servicio dado se asignan a un solo servidor (el que se anuncia como el que tiene el tiempo de finalización más rápido), y a medida que llegan más procesos comerciales, el rendimiento de los proveedores se degrada linealmente. El esquema de round-robin es inicialmente superado por el esquema proporcional aleatorio hasta alrededor de 120 flujos de trabajo (como se muestra en el gráfico ampliado de la Figura 4), pero a medida que aumenta el número de flujos de trabajo, el esquema de round-robin gana consistentemente sobre el proporcional aleatorio. La razón es que aunque el esquema aleatorio-proporcional asigna procesos comerciales a proveedores proporcionalmente según los tiempos de finalización anunciados (que es una medida del poder del proveedor de servicios), incluso los mejores proveedores eventualmente alcanzarán una concurrencia máxima del mundo real para la gran cantidad de flujos de trabajo que estamos considerando. Para un número muy grande de flujos de trabajo, el esquema de round-robin es capaz de equilibrar mejor la carga entre todos los proveedores de servicios. Para comprender mejor el comportamiento resultante de las asignaciones de programación, mostramos los resultados de finalización del flujo de trabajo en las Figuras 5, 6 y 7 para 100, 500 y 900 flujos de trabajo, respectivamente. Estas cifras muestran el porcentaje de flujos de trabajo que son exitosos (pueden completarse dentro de su límite de QoS), aceptables (pueden completarse dentro de κ=3 veces su límite de QoS) y fallidos (no pueden completarse dentro de κ=3 veces su límite de QoS). El GA produce consistentemente el mayor porcentaje de flujos de trabajo exitosos (lo que resulta en valores comerciales más altos para el conjunto agregado de flujos de trabajo). Además, el esquema de round-robin produce mejores resultados que el proporcional-aleatorio para un gran número de flujos de trabajo, pero no tiene un rendimiento tan bueno como el algoritmo genético. En la Figura 8 graficamos el makespan resultante de los mismos experimentos anteriores. Makespan es una métrica tradicional de la comunidad de programación de trabajos que mide el tiempo transcurrido para que se complete el último trabajo. Aunque útil, no captura la métrica de valor empresarial de alto nivel contra la que estamos optimizando. De hecho, el makespan no tiene en cuenta el hecho de que proporcionamos múltiples niveles de finalización (exitoso, aceptable y fallido) y asignamos puntajes de valor comercial en consecuencia. Para completar, señalamos que el algoritmo genético proporciona el makespan más rápido, pero es igualado por el algoritmo de round robin. El algoritmo genético produce mejores valores comerciales (como se muestra en la Figura 3) porque es capaz de explorar el espacio de soluciones para encontrar mejores asignaciones que generen flujos de trabajo más exitosos (como se muestra en las Figuras 5 a 7). También analizamos el efecto de los algoritmos de programación en el equilibrio de la carga. La Figura 9 muestra el porcentaje de proveedores de servicios que fueron accedidos mientras se ejecutaban los flujos de trabajo. Como era de esperar, el algoritmo codicioso siempre elige a un proveedor de servicios; por otro lado, el algoritmo de round-robin es el más rápido para distribuir el negocio. 33 Parámetro experimental Comentario Flujos de trabajo 5 a 1000 Procesos de negocio por flujo de trabajo aleatorio uniforme: 1 - 10 Tipos de servicio 10 Proveedores de servicios por tipo de servicio aleatorio uniforme: 1 - 10 Objetivo de QoS del flujo de trabajo aleatorio uniforme: 10-30 segundos Tiempo de finalización del proveedor de servicios (α) aleatorio uniforme: 1 - 12 segundos Máxima concurrencia del proveedor de servicios (β) aleatorio uniforme: 1 - 12 Coeficiente de degradación del proveedor de servicios (γ) aleatorio uniforme: 0.1 - 0.9 Valor de negocio para flujos de trabajo exitosos aleatorio uniforme: 10 - 50 puntos Valor de negocio para flujos de trabajo aceptables aleatorio uniforme: 0 - 10 puntos Valor de negocio para flujos de trabajo fallidos aleatorio uniforme: -10 - 0 puntos GA: número de padres 20 GA: número de hijos 80 GA: número de generaciones 1000 Tabla 1: Parámetros experimentales Fallido Aceptable (completado pero no dentro de QoS) Exitoso (completado dentro de QoS) 0% 20% 40% 60% 80% 100% RoundRobinRandProportionalGreedyGeneticAlg Porcentaje de todos los flujos de trabajo Comportamiento del flujo de trabajo, 100 flujos de trabajo Figura 5: Comportamiento del flujo de trabajo para 100 flujos de trabajo. Fracaso Aceptable (completado pero no dentro de QoS) Exitoso (completado dentro de QoS) 0% 20% 40% 60% 80% 100% RoundRobinRandProportionalGreedyGeneticAlg Porcentaje de todos los flujos de trabajo Comportamiento del flujo de trabajo, 500 flujos de trabajo Figura 6: Comportamiento del flujo de trabajo para 500 flujos de trabajo. Fracaso Aceptable (completado pero no dentro de QoS) Exitoso (completado dentro de QoS) 0% 20% 40% 60% 80% 100% RoundRobinRandProportionalGreedyGeneticAlg Porcentaje de todos los flujos de trabajo Comportamiento del flujo de trabajo, 500 flujos de trabajo Figura 7: Comportamiento del flujo de trabajo para 900 flujos de trabajo. 0 50 100 150 200 250 300 0 200 400 600 800 1000 Tiempo total [segundos] Número de flujos de trabajo Tiempo máximo de finalización para todos los flujos de trabajo Algoritmo genético Round robin Proporcional aleatorio Codicioso Figura 8: Tiempo máximo de finalización para todos los flujos de trabajo. Este valor es la métrica makespan utilizada en la investigación de programación tradicional. Aunque útil, el makespan no tiene en cuenta la puntuación del valor comercial en nuestro dominio de problemas. La Figura 10 muestra el porcentaje de proveedores de servicios accedidos (es decir, el porcentaje de proveedores de servicios representados en la Figura 9) que tenían más procesos comerciales asignados que su concurrencia máxima anunciada. Por ejemplo, en el algoritmo voraz solo se utiliza un proveedor de servicios, y este proveedor se satura rápidamente. Por otro lado, el algoritmo aleatorio-proporcional utiliza muchos proveedores de servicios, pero debido a que los procesos comerciales se asignan de manera proporcional con más asignaciones yendo a los mejores proveedores, hay una tendencia a que un menor porcentaje de proveedores se saturen. Para completitud, mostramos el rendimiento del algoritmo genético en sí mismo en la Figura 11. El algoritmo escala linealmente con un aumento en el número de flujos de trabajo. Observamos que los algoritmos round-robin, random-proportional y greedy terminaron en menos de 1 segundo incluso para la configuración de flujo de trabajo más grande. Sin embargo, consideramos que el beneficio de encontrar puntajes de valor empresarial mucho más altos justifica el tiempo de ejecución del algoritmo genético; además, esperaríamos que el tiempo de ejecución mejore tanto con la optimización del software como con un ordenador más rápido que nuestro PC estándar. CONCLUSIÓN Los procesos comerciales dentro de los flujos de trabajo pueden ser orquestados para acceder a servicios web. En este artículo estudiamos la provisión de servicios de múltiples niveles, donde las solicitudes de servicios web a tipos de servicios pueden ser asignadas a diferentes proveedores de servicios. El problema resultante es que para poder soportar un gran número de flujos de trabajo, la asignación de procesos de negocio a proveedores de servicios web debe ser inteligente. Utilizamos una métrica de valor empresarial para medir el 0.2 0.4 0.6 0.8 1 0 200 400 600 800 1000 Porcentaje de todos los proveedores de servicios Número de flujos de trabajo Proveedores de servicios utilizados Algoritmo genético Round robin Proporcional aleatorio Ávido Figura 9: El porcentaje de proveedores de servicios utilizados durante las ejecuciones de carga de trabajo. El algoritmo Greedy siempre elige al mismo proveedor de servicios, mientras que el algoritmo Round Robin distribuye las solicitudes de manera uniforme entre los proveedores. 0 0.2 0.4 0.6 0.8 1 0 200 400 600 800 1000 Porcentaje de todos los proveedores de servicios Número de flujos de trabajo Proveedores saturados Algoritmo genético Round robin Proporcional aleatorio Greedy Figura 10: El porcentaje de proveedores de servicios que están saturados entre aquellos proveedores que fueron utilizados (es decir, el porcentaje de proveedores de servicios representados en la Figura 9). Un proveedor de servicios saturado es aquel cuya carga de trabajo es mayor que su concurrencia máxima anunciada. Dado que el espacio de soluciones de los mapeos de programación es exponencial, utilizamos un algoritmo de búsqueda genética para explorar el espacio y converger hacia el mejor horario. Con una configuración predeterminada para todos los parámetros y utilizando nuestra puntuación de valor empresarial, el GA produjo hasta un 115% de mejora en el valor empresarial sobre el siguiente mejor algoritmo. Finalmente, debido a que un algoritmo genético convergerá hacia el valor óptimo utilizando cualquier métrica (incluso diferente a la métrica de valor empresarial que utilizamos), creemos que nuestro enfoque tiene un fuerte potencial para trabajos futuros. En trabajos futuros, buscamos adquirir trazas del mundo real de instancias de servicios web para obtener mejores estimaciones de las garantías de acuerdo de servicio, aunque esperamos que tales garantías entre los proveedores y sus consumidores no estén generalmente disponibles para el público. También analizaremos otras métricas de calidad de servicio (QoS) como el uso de CPU y E/S. Por ejemplo, podemos analizar los costos de transferencia con diferentes anchos de banda, latencia, tamaño de datos y distribución de datos. Además, esperamos mejorar nuestro algoritmo genético y compararlo con más alternativas de programación. Finalmente, dado que nuestro trabajo es complementario al trabajo existente en coreografía de servicios web (porque dependemos de flujos de trabajo preconfigurados), buscamos integrar nuestro enfoque con los sistemas de flujo de trabajo de servicios web disponibles expresados en BPEL. 6. REFERENCIAS [1] A. Ankolekar, et al. DAML-S: Marcado Semántico para Servicios Web, En Proc. del Simposio Internacional de Trabajo de la Web Semántica, 2001. [2] L. Davis. Programación de taller con algoritmos genéticos, En Proc. de la Conferencia Internacional sobre Algoritmos Genéticos, 1985. [3] H.-L. Fang, P. Ross y D. Corne. Un Enfoque Prometedor de Algoritmo Genético para Problemas de Programación de Taller de Trabajo, Re-programación y Programación de Taller Abierto, En Actas de la 5ta Conferencia Internacional sobre Algoritmos Genéticos, 1993. [4] M. Gary y D. Johnson. Computadoras e Intractabilidad: Una Guía de la Teoría de NP-Completitud, Freeman, 1979. [5] J. Holland. Adaptación en Sistemas Naturales y Artificiales: Un Análisis Introductorio con Aplicaciones a la Biología, Control e Inteligencia Artificial, MIT Press, 1992. [6] D. Goldberg. Algoritmos Genéticos en Búsqueda, Optimización y Aprendizaje Automático, Kluwer Academic Publishers, 1989. [7] Procesos de Negocio en un Mundo de Servicios Web, www-128.ibm.com/developerworks/webservices/library/ws-bpelwp/. [8] G. Soundararajan, K. Manassiev, J. Chen, A. Goel y C. Amza. Bases de datos de back-end en clústeres de servidores de contenido dinámico compartido, En Proc. de la Conferencia Internacional de Computación Autónoma de IEEE, 2005. [9] B. Srivastava y J. Koehler. Composición de Servicios Web: Soluciones Actuales y Problemas Abiertos, ICAP, 2003. [10] B. Urgaonkar, P. Shenoy, A. Chandra y P. Goyal. Provisión dinámica de aplicaciones de Internet de múltiples niveles, En Proc. de la Conferencia Internacional de IEEE sobre Computación Autónoma, 2005. [11] L. Zeng, B. Benatallah, M. Dumas, J. Kalagnanam y Q. Sheng. Composición de Servicios Web Impulsada por la Calidad, En Proc. de la Conferencia WWW, 2003. 35 ",
            "candidates": [],
            "error": [
                [
                    ""
                ]
            ]
        },
        "business value metric": {
            "translated_key": "métrica de valor comercial",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Heuristics-Based Scheduling of Composite Web Service Workloads Thomas Phan Wen-Syan Li IBM Almaden Research Center 650 Harry Rd.",
                "San Jose, CA 95120 {phantom,wsl}@us.ibm.com ABSTRACT Web services can be aggregated to create composite workflows that provide streamlined functionality for human users or other systems.",
                "Although industry standards and recent research have sought to define best practices and to improve end-to-end workflow composition, one area that has not fully been explored is the scheduling of a workflows web service requests to actual service provisioning in a multi-tiered, multi-organisation environment.",
                "This issue is relevant to modern business scenarios where business processes within a workflow must complete within QoS-defined limits.",
                "Because these business processes are web service consumers, service requests must be mapped and scheduled across multiple web service providers, each with its own negotiated service level agreement.",
                "In this paper we provide heuristics for scheduling service requests from multiple business process workflows to web service providers such that a <br>business value metric</br> across all workflows is maximised.",
                "We show that a genetic search algorithm is appropriate to perform this scheduling, and through experimentation we show that our algorithm scales well up to a thousand workflows and produces better mappings than traditional approaches.",
                "Categories and Subject Descriptors C.2.4 [Computer-Communication Networks]: Distributed Systems-distributed applications; D.2.8 [Software Engineering]: Metrics-complexity measures, performance measures 1.",
                "INTRODUCTION Web services can be composed into workflows to provide streamlined end-to-end functionality for human users or other systems.",
                "Although previous research efforts have looked at ways to intelligently automate the composition of web services into workflows (e.g. [1, 9]), an important remaining problem is the assignment of web service requests to the underlying web service providers in a multi-tiered runtime scenario within constraints.",
                "In this paper we address this scheduling problem and examine means to manage a large number of business process workflows in a scalable manner.",
                "The problem of scheduling web service requests to providers is relevant to modern business domains that depend on multi-tiered service provisioning.",
                "Consider the example shown in Figure 1 that illustrates our problem space.",
                "Workflows comprise multiple related business processes that are web service consumers; here we assume that the workflows represent requested service from customers or automated systems and that the workflow has already been composed with an existing choreography toolkit.",
                "These workflows are then submitted to a portal (not shown) that acts as a scheduling agent between the web service consumers and the web service providers.",
                "In this example, a workflow could represent the actions needed to instantiate a vacation itinerary, where one business process requests booking an airline ticket, another business process requests a hotel room, and so forth.",
                "Each of these requests target a particular service type (e.g. airline reservations, hotel reservations, car reservations, etc. ), and for each service type, there are multiple instances of service providers that publish a web service interface.",
                "An important challenge is that the workflows must meet some quality-of-service (QoS) metric, such as end-to-end completion time of all its business processes, and that meeting or failing this goal results in the assignment of a quantitative <br>business value metric</br> for the workflow; intuitively, it is desired that all workflows meet their respective QoS goals.",
                "We further leverage the notion that QoS service agreements are generally agreed-upon between the web service providers and the scheduling agent such that the providers advertise some level of guaranteed QoS to the scheduler based upon runtime conditions such as turnaround time and maximum available concurrency.",
                "The resulting problem is then to schedule and assign the business processes requests for service types to one of the service providers for that type.",
                "The scheduling must be done such that the aggregate business value across all the workflows is maximised.",
                "In Section 3 we state the scenario as a combinatorial problem and utilise a genetic search algorithm [5] to find the best assignment of web service requests to providers.",
                "This approach converges towards an assignment that maximises the overall business value for all the workflows.",
                "In Section 4 we show through experimentation that this search heuristic finds better assignments than other algorithms (greedy, round-robin, and proportional).",
                "Further, this approach allows us to scale the number of simultaneous workflows (up to one thousand workflows in our experiments) and yet still find effective schedules. 2.",
                "RELATED WORK In the context of service assignment and scheduling, [11] maps web service calls to potential servers using linear programming, but their work is concerned with mapping only single workflows; our principal focus is on scalably scheduling multiple workflows (up 30 Service Type SuperHotels.com Business Process Business Process Workflow ... Business Process Business Process ... HostileHostels.com IncredibleInns.com Business Process Business Process Business Process ... Business Process Service Provider SkyHighAirlines.com SuperCrazyFlights.com Business Process . . . . . .",
                "Advertised QoS Service Agreement CarRentalService.com Figure 1: An example scenario demonstrating the interaction between business processes in workflows and web service providers.",
                "Each business process accesses a service type and is then mapped to a service provider for that type. to one thousand as we show later) using different business metrics and a search heuristic. [10] presents a dynamic provisioning approach that uses both predictive and reactive techniques for multi-tiered Internet application delivery.",
                "However, the provisioning techniques do not consider the challenges faced when there are alternative query execution plans and replicated data sources. [8] presents a feedback-based scheduling mechanism for multi-tiered systems with back-end databases, but unlike our work, it assumes a tighter coupling between the various components of the system.",
                "Our work also builds upon prior scheduling research.",
                "The classic job-shop scheduling problem, shown to be NP-complete [4] [3], is similar to ours in that tasks within a job must be scheduled onto machinery (c.f. our scenario is that business processes within a workflow must be scheduled onto web service providers).",
                "The salient differences are that the machines can process only one job at a time (we assume servers can multi-task but with degraded performance and a maximum concurrency level), tasks within a job cannot simultaneously run on different machines (we assume business processes can be assigned to any available server), and the principal metric of performance is the makespan, which is the time for the last task among all the jobs to complete (and as we show later, optimising on the makespan is insufficient for scheduling the business processes, necessitating different metrics). 3.",
                "DESIGN In this section we describe our model and discuss how we can find scheduling assignments using a genetic search algorithm. 3.1 Model We base our model on the simplified scenario shown in Figure 1.",
                "Specifically, we assume that users or automated systems request the execution of a workflow.",
                "The workflows comprise business processes, each of which makes one web service invocation to a service type.",
                "Further, business processes have an ordering in the workflow.",
                "The arrangement and execution of the business processes and the data flow between them are all managed by a composition or choreography tool (e.g. [1, 9]).",
                "Although composition languages can use sophisticated flow-control mechanisms such as conditional branches, for simplicity we assume the processes execute sequentially in a given order.",
                "This scenario can be naturally extended to more complex relationships that can be expressed in BPEL [7], which defines how business processes interact, messages are exchanged, activities are ordered, and exceptions are handled.",
                "Due to space constraints, we focus on the problem space presented here and will extend our model to more advanced deployment scenarios in the future.",
                "Each workflow has a QoS requirement to complete within a specified number of time units (e.g. on the order of seconds, as detailed in the Experiments section).",
                "Upon completion (or failure), the workflow is assigned a business value.",
                "We extended this approach further and considered different types of workflow completion in order to model differentiated QoS levels that can be applied by businesses (for example, to provide tiered customer service).",
                "We say that a workflow is successful if it completes within its QoS requirement, acceptable if it completes within a constant factor κ 31 of its QoS bound (in our experiments we chose κ=3), or failing if it finishes beyond κ times its QoS bound.",
                "For each category, a business value score is assigned to the workflow, with the successful category assigned the highest positive score, followed by acceptable and then failing.",
                "The business value point distribution is non-uniform across workflows, further modelling cases where some workflows are of higher priority than others.",
                "Each service type is implemented by a number of different service providers.",
                "We assume that the providers make service level agreements (SLAs) to guarantee a level of performance defined by the completion time for completing a web service invocation.",
                "Although SLAs can be complex, in this paper we assume for simplicity that the guarantees can take the form of a linear performance degradation under load.",
                "This guarantee is defined by several parameters: α is the expected completion time (for example, on the order of seconds) if the assigned workload of web service requests is less than or equal to β, the maximum concurrency, and if the workload is higher than β, the expected completion for a workload of size ω is α+ γ(ω − β) where γ is a fractional coefficient.",
                "In our experiments we vary α, β, and γ with different distributions.",
                "Ideally, all workflows would be able to finish within their QoS limits and thus maximise the aggregate business value across all workflows.",
                "However, because we model service providers with degrading performance under load, not all workflows will achieve their QoS limit: it may easily be the case that business processes are assigned to providers who are overloaded and cannot complete within the respective workflows QoS limit.",
                "The key research problem, then, is to assign the business processes to the web service providers with the goal of optimising on the aggregate business value of all workflows.",
                "Given that the scope of the optimisation is the entire set of workflows, it may be that the best scheduling assignments may result in some workflows having to fail in order for more workflows to succeed.",
                "This intuitive observation suggests that traditional scheduling approaches such as round-robin or proportional assignments will not fare well, which is what we observe and discuss in Section 4.",
                "On the other hand, an exhaustive search of all the possible assignments will find the best schedule, but the computational complexity is prohibitively high.",
                "Suppose there are W workflows with an average of B business processes per workflow.",
                "Further, in the worst case each business process requests one service type, for which there are P providers.",
                "There are thus W · PB combinations to explore to find the optimal assignments of business processes to providers.",
                "Even for small configurations (e.g.",
                "W =10, B=5, P=10), the computational time for exhaustive search is significant, and in our work we look to scale these parameters.",
                "In the next subsection, discuss how a genetic search algorithm can be used to converge toward the optimum scheduling assignments. 3.2 Genetic algorithm Given an exponential search space of business process assignments to web service providers, the problem is to find the optimal assignment that produces the overall highest aggregate business value across all workflows.",
                "To explore the solution space, we use a genetic algorithm (GA) search heuristic that simulates Darwinian natural selection by having members of a population compete to survive in order to pass their genetic chromosomes onto the next generation; after successive generations, there is a tendency for the chromosomes to converge toward the best combination [5] [6].",
                "Although other search heuristics exist that can solve optimization problems (e.g. simulated annealing or steepest-ascent hillclimbing), the business process scheduling problem fits well with a GA because potential solutions can be represented in a matrix form and allows us to use prior research in effective GA chromosome recombination to form new members of the population (e.g. [2]). 0 1 2 3 4 0 1 2 0 2 1 1 0 1 0 1 0 2 1 2 0 0 1 Figure 2: An example chromosome representing a scheduling assignment of (workflow,service type) → service provider.",
                "Each row represents a workflow, and each column represents a service type.",
                "For example, here there are 3 workflows (0 to 2) and 5 service types (0 to 4).",
                "In workflow 0, any request for service type 3 goes to provider 2.",
                "Note that the service provider identifier is within a range limited to its service type (i.e. its column), so the 2 listed for service type 3 is a different server from server 2 in other columns.",
                "Chromosome representation of a solution.",
                "In Figure 2 we show an example chromosome that encodes one scheduling assignment.",
                "The representation is a 2-dimensional matrix that maps {workflow, service type} to a service provider.",
                "For a business process in workflow i and utilising service type j, the (i, j)th entry in the table is the identifier for the service provider to which the business process is assigned.",
                "Note that the service provider identifier is within a range limited to its service type.",
                "GA execution.",
                "A GA proceeds as follows.",
                "Initially a random set of chromosomes is created for the population.",
                "The chromosomes are evaluated (hashed) to some metric, and the best ones are chosen to be parents.",
                "In our problem, the evaluation produces the net business value across all workflows after executing all business processes once they are assigned to their respective service providers according to the mapping in the chromosome.",
                "The parents recombine to produce children, simulating sexual crossover, and occasionally a mutation may arise which produces new characteristics that were not available in either parent.",
                "The principal idea is that we would like the children to be different from the parents (in order to explore more of the solution space) yet not too different (in order to contain the portions of the chromosome that result in good scheduling assignments).",
                "Note that finding the global optimum is not guaranteed because the recombination and mutation are stochastic.",
                "GA recombination and mutation.",
                "As mentioned, the chromosomes are 2-dimensional matrices that represent scheduling assignments.",
                "To simulate sexual recombination of two chromosomes to produce a new child chromosome, we applied a one-point crossover scheme twice (once along each dimension).",
                "The crossover is best explained by analogy to Cartesian space as follows.",
                "A random point is chosen in the matrix to be coordinate (0, 0).",
                "Matrix elements from quadrants II and IV from the first parent and elements from quadrants I and III from the second parent are used to create the new child.",
                "This approach follows GA best practices by keeping contiguous chromosome segments together as they are transmitted from parent to child.",
                "The uni-chromosome mutation scheme randomly changes one of the service provider assignments to another provider within the available range.",
                "Other recombination and mutation schemes are an area of research in the GA community, and we look to explore new operators in future work.",
                "GA evaluation function.",
                "An important GA component is the evaluation function.",
                "Given a particular chromosome representing one scheduling mapping, the function deterministically calculates the net business value across all workloads.",
                "The business processes in each workload are assigned to service providers, and each providers completion time is calculated based on the service agreement guarantee using the parameters mentioned in Section 3.1, namely the unloaded completion time α, the maximum concur32 rency β, and a coefficient γ that controls the linear performance degradation under heavy load.",
                "Note that the evaluation function can be easily replaced if desired; for example, other evaluation functions can model different service provider guarantees or parallel workflows. 4.",
                "EXPERIMENTS AND RESULTS In this section we show the benefit of using our GA-based scheduler.",
                "Because we wanted to scale the scenarios up to a large number of workflows (up to 1000 in our experiments), we implemented a simulation program that allowed us to vary parameters and to measure the results with different metrics.",
                "The simulator was written in standard C++ and was run on a Linux (Fedora Core) desktop computer running at 2.8 GHz with 1GB of RAM.",
                "We compared our algorithm against alternative candidates: • A well-known round-robin algorithm that assigns each business process in circular fashion to the service providers for a particular service type.",
                "This approach provides the simplest scheme for load-balancing. • A random-proportional algorithm that proportionally assigns business processes to the service providers; that is, for a given service type, the service providers are ranked by their guaranteed completion time, and business processes are assigned proportionally to the providers based on their completion time. (We also tried a proportionality scheme based on both the completion times and maximum concurrency but attained the same results, so only the former schemes results are shown here.) • A strawman greedy algorithm that always assigns business processes to the service provider that has the fastest guaranteed completion time.",
                "This algorithm represents a naive approach based on greedy, local observations of each workflow without taking into consideration all workflows.",
                "In the experiments that follow, all results were averaged across 20 trials, and to help normalise the effects of randomisation used during the GA, each trial started by reading in pre-initialised data from disk.",
                "In Table 1 we list our experimental parameters.",
                "In Figure 3 we show the results of running our GA against the three candidate alternatives.",
                "The x-axis shows the number for workflows scaled up to 1000, and the y-axis shows the aggregate business value for all workflows.",
                "As can be seen, the GA consistently produces the highest business value even as the number of workflows grows; at 1000 workflows, the GA produces a 115% improvement over the next-best alternative. (Note that although we are optimising against the <br>business value metric</br> we defined earlier, genetic algorithms are able to converge towards the optimal value of any metric, as long as the evaluation function can consistently measure a chromosomes value with that metric.)",
                "As expected, the greedy algorithm performs very poorly because it does the worst job at balancing load: all business processes for a given service type are assigned to only one server (the one advertised to have the fastest completion time), and as more business processes arrive, the providers performance degrades linearly.",
                "The round-robin scheme is initially outperformed by the randomproportional scheme up to around 120 workflows (as shown in the magnified graph of Figure 4), but as the number of workflows increases, the round-robin scheme consistently wins over randomproportional.",
                "The reason is that although the random-proportional scheme assigns business processes to providers proportionally according to the advertised completion times (which is a measure of the power of the service provider), even the best providers will eventually reach a real-world maximum concurrency for the large -2000 -1000 0 1000 2000 3000 4000 5000 6000 7000 0 200 400 600 800 1000 Aggregatebusinessvalueacrossallworkflows Total number of workflows Business value scores of scheduling algorithms Genetic algorithm Round robin Random proportional Greedy Figure 3: Net business value scores of different scheduling algorithms. -500 0 500 1000 1500 2000 2500 3000 3500 4000 0 50 100 150 200Aggregatebusinessvalueacrossallworkflows Total number of workflows Business value scores of scheduling algorithms Genetic algorithm Round robin Random proportional Greedy Figure 4: Magnification of the left-most region in Figure 3. number of workflows that we are considering.",
                "For a very large number of workflows, the round-robin scheme is able to better balance the load across all service providers.",
                "To better understand the behaviour resulting from the scheduling assignments, we show the workflow completion results in Figures 5, 6, and 7 for 100, 500, and 900 workflows, respectively.",
                "These figures show the percentage of workflows that are successful (can complete with their QoS limit), acceptable (can complete within κ=3 times their QoS limit), and failed (cannot complete within κ=3 times their QoS limit).",
                "The GA consistently produces the highest percentage of successful workflows (resulting in higher business values for the aggregate set of workflows).",
                "Further, the round-robin scheme produces better results than the random-proportional for a large number of workflows but does not perform as well as the GA.",
                "In Figure 8 we graph the makespan resulting from the same experiments above.",
                "Makespan is a traditional metric from the job scheduling community measuring elapsed time for the last job to complete.",
                "While useful, it does not capture the high-level <br>business value metric</br> that we are optimising against.",
                "Indeed, the makespan is oblivious to the fact that we provide multiple levels of completion (successful, acceptable, and failed) and assign business value scores accordingly.",
                "For completeness, we note that the GA provides the fastest makespan, but it is matched by the round robin algorithm.",
                "The GA produces better business values (as shown in Figure 3) because it is able to search the solution space to find better mappings that produce more successful workflows (as shown in Figures 5 to 7).",
                "We also looked at the effect of the scheduling algorithms on balancing the load.",
                "Figure 9 shows the percentage of services providers that were accessed while the workflows ran.",
                "As expected, the greedy algorithm always hits one service provider; on the other hand, the round-robin algorithm is the fastest to spread the business 33 Experimental parameter Comment Workflows 5 to 1000 Business processes per workflow uniform random: 1 - 10 Service types 10 Service providers per service type uniform random: 1 - 10 Workflow QoS goal uniform random: 10-30 seconds Service provider completion time (α) uniform random: 1 - 12 seconds Service provider maximum concurrency (β) uniform random: 1 - 12 Service provider degradation coefficient (γ) uniform random: 0.1 - 0.9 Business value for successful workflows uniform random: 10 - 50 points Business value for acceptable workflows uniform random: 0 - 10 points Business value for failed workflows uniform random: -10 - 0 points GA: number of parents 20 GA: number of children 80 GA: number of generations 1000 Table 1: Experimental parameters Failed Acceptable (completed but not within QoS) Successful (completed within QoS) 0% 20% 40% 60% 80% 100% RoundRobinRandProportionalGreedyGeneticAlg Percentageofallworkflows Workflow behaviour, 100 workflows Figure 5: Workflow behaviour for 100 workflows.",
                "Failed Acceptable (completed but not within QoS) Successful (completed within QoS) 0% 20% 40% 60% 80% 100% RoundRobinRandProportionalGreedyGeneticAlg Percentageofallworkflows Workflow behaviour, 500 workflows Figure 6: Workflow behaviour for 500 workflows.",
                "Failed Acceptable (completed but not within QoS) Successful (completed within QoS) 0% 20% 40% 60% 80% 100% RoundRobinRandProportionalGreedyGeneticAlg Percentageofallworkflows Workflow behaviour, 500 workflows Figure 7: Workflow behaviour for 900 workflows. 0 50 100 150 200 250 300 0 200 400 600 800 1000 Makespan[seconds] Number of workflows Maximum completion time for all workflows Genetic algorithm Round robin Random proportional Greedy Figure 8: Maximum completion time for all workflows.",
                "This value is the makespan metric used in traditional scheduling research.",
                "Although useful, the makespan does not take into consideration the business value scoring in our problem domain. processes.",
                "Figure 10 is the percentage of accessed service providers (that is, the percentage of service providers represented in Figure 9) that had more assigned business processes than their advertised maximum concurrency.",
                "For example, in the greedy algorithm only one service provider is utilised, and this one provider quickly becomes saturated.",
                "On the other hand, the random-proportional algorithm uses many service providers, but because business processes are proportionally assigned with more assignments going to the better providers, there is a tendency for a smaller percentage of providers to become saturated.",
                "For completeness, we show the performance of the genetic algorithm itself in Figure 11.",
                "The algorithm scales linearly with an increasing number of workflows.",
                "We note that the round-robin, random-proportional, and greedy algorithms all finished within 1 second even for the largest workflow configuration.",
                "However, we feel that the benefit of finding much higher business value scores justifies the running time of the GA; further we would expect that the running time will improve with both software tuning as well as with a computer faster than our off-the-shelf PC. 5.",
                "CONCLUSION Business processes within workflows can be orchestrated to access web services.",
                "In this paper we looked at multi-tiered service provisioning where web service requests to service types can be mapped to different service providers.",
                "The resulting problem is that in order to support a very large number of workflows, the assignment of business process to web service provider must be intelligent.",
                "We used a <br>business value metric</br> to measure the be34 0 0.2 0.4 0.6 0.8 1 0 200 400 600 800 1000 Percentageofallserviceproviders Number of workflows Service providers utilised Genetic algorithm Round robin Random proportional Greedy Figure 9: The percentage of service providers utilized during workload executions.",
                "The Greedy algorithm always hits the one service provider, while the Round Robin algorithm spreads requests evenly across the providers. 0 0.2 0.4 0.6 0.8 1 0 200 400 600 800 1000 Percentageofallserviceproviders Number of workflows Service providers saturated Genetic algorithm Round robin Random proportional Greedy Figure 10: The percentage of service providers that are saturated among those providers who were utilized (that is, percentage of the service providers represented in Figure 9).",
                "A saturated service provider is one whose workload is greater that its advertised maximum concurrency. 0 5 10 15 20 25 0 200 400 600 800 1000 Runningtimeinseconds Total number of workflows Running time of genetic algorithm GA running time Figure 11: Running time of the genetic algorithm. haviour of workflows meeting or failing QoS values, and we optimised our scheduling to maximise the aggregate business value across all workflows.",
                "Since the solution space of scheduler mappings is exponential, we used a genetic search algorithm to search the space and converge toward the best schedule.",
                "With a default configuration for all parameters and using our business value scoring, the GA produced up to 115% business value improvement over the next best algorithm.",
                "Finally, because a genetic algorithm will converge towards the optimal value using any metric (even other than the <br>business value metric</br> we used), we believe our approach has strong potential for continuing work.",
                "In future work, we look to acquire real-world traces of web service instances in order to get better estimates of service agreement guarantees, although we expect that such guarantees between the providers and their consumers are not generally available to the public.",
                "We will also look at other QoS metrics such as CPU and I/O usage.",
                "For example, we can analyse transfer costs with varying bandwidth, latency, data size, and data distribution.",
                "Further, we hope to improve our genetic algorithm and compare it to more scheduler alternatives.",
                "Finally, since our work is complementary to existing work in web services choreography (because we rely on pre-configured workflows), we look to integrate our approach with available web service workflow systems expressed in BPEL. 6.",
                "REFERENCES [1] A. Ankolekar, et al.",
                "DAML-S: Semantic Markup For Web Services, In Proc. of the Intl Semantic Web Working Symposium, 2001. [2] L. Davis.",
                "Job Shop Scheduling with Genetic Algorithms, In Proc. of the Intl Conference on Genetic Algorithms, 1985. [3] H.-L. Fang, P. Ross, and D. Corne.",
                "A Promising Genetic Algorithm Approach to Job-Shop Scheduling, Rescheduling, and Open-Shop Scheduling Problems , In Proc. on the 5th Intl Conference on Genetic Algorithms, 1993. [4] M. Gary and D. Johnson.",
                "Computers and Intractability: A Guide to the Theory of NP-Completeness, Freeman, 1979. [5] J. Holland.",
                "Adaptation in Natural and Artificial Systems: An Introductory Analysis with Applications to Biology, Control, and Artificial Intelligence, MIT Press, 1992. [6] D. Goldberg.",
                "Genetic Algorithms in Search, Optimization and Machine Learning, Kluwer Academic Publishers, 1989. [7] Business Processes in a Web Services World, www-128.ibm.com/developerworks/ webservices/library/ws-bpelwp/. [8] G. Soundararajan, K. Manassiev, J. Chen, A. Goel, and C. Amza.",
                "Back-end Databases in Shared Dynamic Content Server Clusters, In Proc. of the IEEE Intl Conference on Autonomic Computing, 2005. [9] B. Srivastava and J. Koehler.",
                "Web Service Composition Current Solutions and Open Problems, ICAP, 2003. [10] B. Urgaonkar, P. Shenoy, A. Chandra, and P. Goyal.",
                "Dynamic Provisioning of Multi-Tier Internet Applications, In Proc. of the IEEE Intl Conference on Autonomic Computing, 2005. [11] L. Zeng, B. Benatallah, M. Dumas, J. Kalagnanam, and Q. Sheng.",
                "Quality Driven Web Services Composition, In Proc. of the WWW Conference, 2003. 35"
            ],
            "original_annotated_samples": [
                "In this paper we provide heuristics for scheduling service requests from multiple business process workflows to web service providers such that a <br>business value metric</br> across all workflows is maximised.",
                "An important challenge is that the workflows must meet some quality-of-service (QoS) metric, such as end-to-end completion time of all its business processes, and that meeting or failing this goal results in the assignment of a quantitative <br>business value metric</br> for the workflow; intuitively, it is desired that all workflows meet their respective QoS goals.",
                "As can be seen, the GA consistently produces the highest business value even as the number of workflows grows; at 1000 workflows, the GA produces a 115% improvement over the next-best alternative. (Note that although we are optimising against the <br>business value metric</br> we defined earlier, genetic algorithms are able to converge towards the optimal value of any metric, as long as the evaluation function can consistently measure a chromosomes value with that metric.)",
                "While useful, it does not capture the high-level <br>business value metric</br> that we are optimising against.",
                "We used a <br>business value metric</br> to measure the be34 0 0.2 0.4 0.6 0.8 1 0 200 400 600 800 1000 Percentageofallserviceproviders Number of workflows Service providers utilised Genetic algorithm Round robin Random proportional Greedy Figure 9: The percentage of service providers utilized during workload executions."
            ],
            "translated_annotated_samples": [
                "En este documento proporcionamos heurísticas para programar solicitudes de servicio de múltiples flujos de trabajo de procesos comerciales a proveedores de servicios web de manera que se maximice una <br>métrica de valor comercial</br> en todos los flujos de trabajo.",
                "Un desafío importante es que los flujos de trabajo deben cumplir con alguna métrica de calidad de servicio (QoS), como el tiempo de finalización de extremo a extremo de todos sus procesos comerciales, y que cumplir o no con este objetivo resulta en la asignación de una <br>métrica de valor comercial</br> cuantitativo para el flujo de trabajo; intuitivamente, se desea que todos los flujos de trabajo cumplan con sus respectivos objetivos de QoS.",
                "Como se puede ver, el algoritmo genético produce consistentemente el mayor <br>valor comercial</br> incluso a medida que aumenta el número de flujos de trabajo; con 1000 flujos de trabajo, el algoritmo genético produce una mejora del 115% sobre la siguiente mejor alternativa. (Tenga en cuenta que aunque estamos optimizando en función de la métrica de <br>valor comercial</br> que definimos anteriormente, los algoritmos genéticos pueden converger hacia el valor óptimo de cualquier métrica, siempre y cuando la función de evaluación pueda medir de manera consistente el valor de un cromosoma con esa métrica).",
                "Aunque útil, no captura la <br>métrica de valor empresarial</br> de alto nivel contra la que estamos optimizando.",
                "Utilizamos una <br>métrica de valor empresarial</br> para medir el 0.2 0.4 0.6 0.8 1 0 200 400 600 800 1000 Porcentaje de todos los proveedores de servicios Número de flujos de trabajo Proveedores de servicios utilizados Algoritmo genético Round robin Proporcional aleatorio Ávido Figura 9: El porcentaje de proveedores de servicios utilizados durante las ejecuciones de carga de trabajo."
            ],
            "translated_text": "Programación basada en heurísticas de cargas de trabajo de servicios web compuestos Thomas Phan Wen-Syan Li Centro de Investigación IBM Almaden 650 Harry Rd. Los servicios web pueden ser agregados para crear flujos de trabajo compuestos que proporcionen funcionalidad simplificada para usuarios humanos u otros sistemas. Aunque los estándares de la industria y la investigación reciente han buscado definir las mejores prácticas y mejorar la composición del flujo de trabajo de extremo a extremo, un área que no ha sido completamente explorada es la programación de las solicitudes de servicios web de los flujos de trabajo para la provisión real de servicios en un entorno multinivel y multiorganizacional. Este problema es relevante para los escenarios empresariales modernos donde los procesos comerciales dentro de un flujo de trabajo deben completarse dentro de los límites definidos por la calidad de servicio (QoS). Debido a que estos procesos comerciales son consumidores de servicios web, las solicitudes de servicio deben ser mapeadas y programadas entre múltiples proveedores de servicios web, cada uno con su propio acuerdo de nivel de servicio negociado. En este documento proporcionamos heurísticas para programar solicitudes de servicio de múltiples flujos de trabajo de procesos comerciales a proveedores de servicios web de manera que se maximice una <br>métrica de valor comercial</br> en todos los flujos de trabajo. Mostramos que un algoritmo de búsqueda genética es apropiado para realizar esta programación, y a través de experimentación demostramos que nuestro algoritmo escala bien hasta mil flujos de trabajo y produce mejores asignaciones que enfoques tradicionales. Categorías y Descriptores de Asignaturas C.2.4 [Redes de Computadoras-Comunicación]: Sistemas Distribuidos-aplicaciones distribuidas; D.2.8 [Ingeniería de Software]: Métricas-medidas de complejidad, medidas de rendimiento 1. INTRODUCCIÓN Los servicios web pueden ser compuestos en flujos de trabajo para proporcionar funcionalidad integrada de principio a fin para usuarios humanos u otros sistemas. Aunque los esfuerzos de investigación previos han examinado formas de automatizar de manera inteligente la composición de servicios web en flujos de trabajo (por ejemplo, [1, 9]), un problema importante que aún persiste es la asignación de solicitudes de servicios web a los proveedores de servicios web subyacentes en un escenario de tiempo de ejecución multinivel dentro de ciertas restricciones. En este documento abordamos este problema de programación y examinamos medios para gestionar un gran número de flujos de trabajo de procesos comerciales de manera escalable. El problema de programar solicitudes de servicios web a proveedores es relevante para los dominios comerciales modernos que dependen de la provisión de servicios de múltiples niveles. Considera el ejemplo mostrado en la Figura 1 que ilustra nuestro espacio de problemas. Los flujos de trabajo comprenden múltiples procesos comerciales relacionados que son consumidores de servicios web; aquí asumimos que los flujos de trabajo representan servicios solicitados por clientes o sistemas automatizados y que el flujo de trabajo ya ha sido compuesto con una herramienta de coreografía existente. Estos flujos de trabajo son luego enviados a un portal (no mostrado) que actúa como un agente de programación entre los consumidores del servicio web y los proveedores del servicio web. En este ejemplo, un flujo de trabajo podría representar las acciones necesarias para crear un itinerario de vacaciones, donde un proceso empresarial solicita la reserva de un boleto de avión, otro proceso empresarial solicita una habitación de hotel, y así sucesivamente. Cada una de estas solicitudes apunta a un tipo de servicio en particular (por ejemplo, reservas de aerolíneas, reservas de hoteles, reservas de autos, etc.), y para cada tipo de servicio, hay múltiples instancias de proveedores de servicios que publican una interfaz de servicio web. Un desafío importante es que los flujos de trabajo deben cumplir con alguna métrica de calidad de servicio (QoS), como el tiempo de finalización de extremo a extremo de todos sus procesos comerciales, y que cumplir o no con este objetivo resulta en la asignación de una <br>métrica de valor comercial</br> cuantitativo para el flujo de trabajo; intuitivamente, se desea que todos los flujos de trabajo cumplan con sus respectivos objetivos de QoS. Además, aprovechamos la idea de que los acuerdos de servicio de QoS suelen ser acordados entre los proveedores de servicios web y el agente de programación de tal manera que los proveedores anuncian un cierto nivel de QoS garantizado al programador en función de condiciones de tiempo de respuesta y concurrencia máxima disponible. El problema resultante es entonces programar y asignar las solicitudes de procesos comerciales para tipos de servicio a uno de los proveedores de servicios para ese tipo. La programación debe realizarse de tal manera que se maximice el valor comercial agregado en todos los flujos de trabajo. En la Sección 3 planteamos el escenario como un problema combinatorio y utilizamos un algoritmo de búsqueda genética [5] para encontrar la mejor asignación de solicitudes de servicios web a proveedores. Este enfoque converge hacia una asignación que maximiza el valor comercial general para todos los flujos de trabajo. En la Sección 4 mostramos a través de experimentación que esta heurística de búsqueda encuentra asignaciones mejores que otros algoritmos (codicioso, round-robin y proporcional). Además, este enfoque nos permite escalar el número de flujos de trabajo simultáneos (hasta mil flujos de trabajo en nuestros experimentos) y aún así encontrar horarios efectivos. 2. TRABAJO RELACIONADO En el contexto de asignación y programación de servicios, [11] mapea llamadas de servicios web a servidores potenciales utilizando programación lineal, pero su trabajo se centra en mapear solo flujos de trabajo individuales; nuestro enfoque principal está en programar de manera escalable múltiples flujos de trabajo (hasta 30 tipos de servicios SuperHotels.com Proceso de Negocio Proceso de Negocio Flujo de Trabajo ... Proceso de Negocio Proceso de Negocio ... HostileHostels.com IncredibleInns.com Proceso de Negocio Proceso de Negocio Proceso de Negocio ... Proceso de Negocio Proveedor de Servicios SkyHighAirlines.com SuperCrazyFlights.com Proceso de Negocio . . . . . . Acuerdo de Servicio de Calidad de Servicio (QoS) Publicitado CarRentalService.com Figura 1: Un escenario de ejemplo que muestra la interacción entre procesos comerciales en flujos de trabajo y proveedores de servicios web. Cada proceso empresarial accede a un tipo de servicio y luego se asigna a un proveedor de servicios para ese tipo, a uno mil como mostraremos más adelante, utilizando diferentes métricas empresariales y una heurística de búsqueda. [10] presenta un enfoque de aprovisionamiento dinámico que utiliza técnicas predictivas y reactivas para la entrega de aplicaciones de Internet multinivel. Sin embargo, las técnicas de aprovisionamiento no consideran los desafíos enfrentados cuando hay planes alternativos de ejecución de consultas y fuentes de datos replicadas. [8] presenta un mecanismo de programación basado en retroalimentación para sistemas multinivel con bases de datos de back-end, pero a diferencia de nuestro trabajo, asume un acoplamiento más estrecho entre los diversos componentes del sistema. Nuestro trabajo también se basa en investigaciones previas sobre programación. El problema clásico de programación de talleres, demostrado como NP-completo [4] [3], es similar al nuestro en el sentido de que las tareas dentro de un trabajo deben ser programadas en maquinaria (cf. nuestro escenario es que los procesos comerciales dentro de un flujo de trabajo deben ser programados en proveedores de servicios web). Las diferencias más destacadas son que las máquinas solo pueden procesar un trabajo a la vez (asumimos que los servidores pueden realizar múltiples tareas pero con un rendimiento degradado y un nivel máximo de concurrencia), las tareas dentro de un trabajo no pueden ejecutarse simultáneamente en diferentes máquinas (asumimos que los procesos comerciales pueden asignarse a cualquier servidor disponible), y la métrica principal de rendimiento es el makespan, que es el tiempo que tarda la última tarea de todos los trabajos en completarse (y como mostraremos más adelante, optimizar el makespan no es suficiente para programar los procesos comerciales, lo que requiere diferentes métricas). 3. En esta sección describimos nuestro modelo y discutimos cómo podemos encontrar asignaciones de programación utilizando un algoritmo de búsqueda genética. 3.1 Modelo Basamos nuestro modelo en el escenario simplificado mostrado en la Figura 1. Específicamente, asumimos que los usuarios o sistemas automatizados solicitan la ejecución de un flujo de trabajo. Los flujos de trabajo comprenden procesos comerciales, cada uno de los cuales realiza una invocación de servicio web a un tipo de servicio. Además, los procesos comerciales tienen un orden en el flujo de trabajo. La disposición y ejecución de los procesos comerciales y el flujo de datos entre ellos son gestionados por una herramienta de composición o coreografía (por ejemplo, [1, 9]). Aunque los lenguajes de composición pueden utilizar mecanismos sofisticados de control de flujo como ramas condicionales, para simplificar asumimos que los procesos se ejecutan secuencialmente en un orden dado. Este escenario puede ser extendido de forma natural a relaciones más complejas que pueden ser expresadas en BPEL [7], el cual define cómo interactúan los procesos de negocio, se intercambian mensajes, se ordenan actividades y se manejan excepciones. Debido a limitaciones de espacio, nos enfocamos en el espacio de problemas presentado aquí y extenderemos nuestro modelo a escenarios de implementación más avanzados en el futuro. Cada flujo de trabajo tiene un requisito de calidad de servicio (QoS) que debe completarse dentro de un número específico de unidades de tiempo (por ejemplo, del orden de segundos, como se detalla en la sección de Experimentos). Una vez completado (o fallido), se asigna un valor comercial al flujo de trabajo. Extendimos este enfoque aún más y consideramos diferentes tipos de finalización de flujo de trabajo para modelar niveles diferenciados de QoS que pueden ser aplicados por las empresas (por ejemplo, para proporcionar servicios al cliente escalonados). Decimos que un flujo de trabajo es exitoso si se completa dentro de su requisito de QoS, aceptable si se completa dentro de un factor constante κ 31 de su límite de QoS (en nuestros experimentos elegimos κ=3), o fallido si termina más allá de κ veces su límite de QoS. Para cada categoría, se asigna un puntaje de valor comercial al flujo de trabajo, siendo la categoría exitosa la que recibe la puntuación positiva más alta, seguida por la aceptable y luego la fallida. La distribución de puntos de valor empresarial no es uniforme en los flujos de trabajo, lo que modela casos en los que algunos flujos de trabajo tienen mayor prioridad que otros. Cada tipo de servicio es implementado por varios proveedores de servicios diferentes. Suponemos que los proveedores hacen acuerdos de nivel de servicio (SLAs) para garantizar un nivel de rendimiento definido por el tiempo de finalización de una invocación de servicio web. Aunque los Acuerdos de Nivel de Servicio (SLAs) pueden ser complejos, en este documento asumimos, para simplificar, que las garantías pueden adoptar la forma de una degradación lineal del rendimiento bajo carga. Esta garantía está definida por varios parámetros: α es el tiempo de finalización esperado (por ejemplo, del orden de segundos) si la carga de trabajo asignada de las solicitudes de servicio web es menor o igual a β, la concurrencia máxima, y si la carga de trabajo es mayor que β, la finalización esperada para una carga de trabajo de tamaño ω es α + γ(ω − β) donde γ es un coeficiente fraccional. En nuestros experimentos variamos α, β y γ con diferentes distribuciones. Idealmente, todos los flujos de trabajo podrían finalizar dentro de sus límites de calidad de servicio (QoS) y, por lo tanto, maximizar el valor empresarial agregado en todos los flujos de trabajo. Sin embargo, debido a que modelamos a los proveedores de servicios con un rendimiento degradante bajo carga, no todos los flujos de trabajo alcanzarán su límite de calidad de servicio (QoS): fácilmente puede darse el caso de que los procesos comerciales sean asignados a proveedores que están sobrecargados y no pueden completarse dentro del límite de calidad de servicio respectivo de los flujos de trabajo. El problema clave de investigación, entonces, es asignar los procesos comerciales a los proveedores de servicios web con el objetivo de optimizar el valor comercial agregado de todos los flujos de trabajo. Dado que el alcance de la optimización es el conjunto completo de flujos de trabajo, puede ser que las mejores asignaciones de programación resulten en que algunos flujos de trabajo tengan que fallar para que otros tengan éxito. Esta observación intuitiva sugiere que enfoques de programación tradicionales como el round-robin o asignaciones proporcionales no funcionarán bien, lo cual es lo que observamos y discutimos en la Sección 4. Por otro lado, una búsqueda exhaustiva de todas las posibles asignaciones encontrará el mejor horario, pero la complejidad computacional es prohibitivamente alta. Supongamos que hay W flujos de trabajo con un promedio de B procesos de negocio por flujo de trabajo. Además, en el peor de los casos, cada proceso empresarial solicita un tipo de servicio, para el cual hay P proveedores. Por lo tanto, hay W · PB combinaciones para explorar y encontrar las asignaciones óptimas de procesos comerciales a proveedores. Incluso para configuraciones pequeñas (por ejemplo, Dado que (W=10, B=5, P=10), el tiempo computacional para la búsqueda exhaustiva es significativo, y en nuestro trabajo buscamos ajustar estos parámetros. En la siguiente subsección, discuta cómo se puede utilizar un algoritmo de búsqueda genética para converger hacia las asignaciones de programación óptimas. 3.2 Algoritmo genético Dado un espacio de búsqueda exponencial de asignaciones de procesos comerciales a proveedores de servicios web, el problema es encontrar la asignación óptima que produzca el valor comercial agregado más alto en general en todos los flujos de trabajo. Para explorar el espacio de soluciones, utilizamos un algoritmo genético (GA) que simula la selección natural darwiniana al hacer que los miembros de una población compitan por sobrevivir para transmitir sus cromosomas genéticos a la siguiente generación; después de generaciones sucesivas, hay una tendencia a que los cromosomas converjan hacia la mejor combinación. Aunque existen otras heurísticas de búsqueda que pueden resolver problemas de optimización (por ejemplo, recocido simulado o escalada de colina más empinada), el problema de programación de procesos empresariales se adapta bien a un AG porque las soluciones potenciales pueden representarse en forma de matriz y nos permite utilizar investigaciones previas en la recombinación efectiva de cromosomas de AG para formar nuevos miembros de la población (por ejemplo, [2]). 0 1 2 3 4 0 1 2 0 2 1 1 0 1 0 1 0 2 1 2 0 0 1 Figura 2: Un ejemplo de cromosoma que representa una asignación de programación de (flujo de trabajo, tipo de servicio) → proveedor de servicios. Cada fila representa un flujo de trabajo, y cada columna representa un tipo de servicio. Por ejemplo, aquí hay 3 flujos de trabajo (0 a 2) y 5 tipos de servicio (0 a 4). En el flujo de trabajo 0, cualquier solicitud de tipo de servicio 3 se dirige al proveedor 2. Ten en cuenta que el identificador del proveedor de servicios se encuentra dentro de un rango limitado a su tipo de servicio (es decir, su columna), por lo que el 2 listado para el tipo de servicio 3 es un servidor diferente al servidor 2 en otras columnas. Representación cromosómica de una solución. En la Figura 2 mostramos un ejemplo de cromosoma que codifica una asignación de programación. La representación es una matriz bidimensional que mapea {flujo de trabajo, tipo de servicio} a un proveedor de servicios. Para un proceso de negocio en el flujo de trabajo i y utilizando el tipo de servicio j, la entrada (i, j)-ésima en la tabla es el identificador del proveedor de servicios al que se asigna el proceso de negocio. Ten en cuenta que el identificador del proveedor de servicios se encuentra dentro de un rango limitado a su tipo de servicio. Ejecución de GA. Un algoritmo genético procede de la siguiente manera. Inicialmente se crea un conjunto aleatorio de cromosomas para la población. Los cromosomas son evaluados (hasheados) según alguna métrica, y los mejores son elegidos para ser padres. En nuestro problema, la evaluación produce el valor neto del negocio en todos los flujos de trabajo después de ejecutar todos los procesos comerciales una vez que se asignan a sus respectivos proveedores de servicios de acuerdo con el mapeo en el cromosoma. Los padres se recombinan para producir hijos, simulando un cruce sexual, y ocasionalmente puede surgir una mutación que produce nuevas características que no estaban disponibles en ninguno de los padres. La idea principal es que nos gustaría que los niños fueran diferentes de los padres (para explorar más del espacio de soluciones) pero no demasiado diferentes (para contener las porciones del cromosoma que resultan en asignaciones de programación exitosas). Ten en cuenta que encontrar el óptimo global no está garantizado debido a que la recombinación y la mutación son estocásticas. Recombinación y mutación de ADN. Como se mencionó, los cromosomas son matrices bidimensionales que representan asignaciones de horarios. Para simular la recombinación sexual de dos cromosomas para producir un nuevo cromosoma hijo, aplicamos un esquema de cruce de un punto dos veces (una vez a lo largo de cada dimensión). El cruce se explica mejor por analogía al espacio cartesiano de la siguiente manera. Se elige un punto al azar en la matriz para que sea la coordenada (0, 0). Los elementos de la matriz de los cuadrantes II y IV del primer progenitor y los elementos de los cuadrantes I y III del segundo progenitor se utilizan para crear el nuevo hijo. Este enfoque sigue las mejores prácticas de los algoritmos genéticos al mantener juntos los segmentos cromosómicos contiguos a medida que se transmiten de padre a hijo. El esquema de mutación de uni-cromosoma cambia aleatoriamente una de las asignaciones de proveedor de servicios a otro proveedor dentro del rango disponible. Otros esquemas de recombinación y mutación son un área de investigación en la comunidad de AG, y buscamos explorar nuevos operadores en trabajos futuros. Función de evaluación de GA. Un componente importante de los algoritmos genéticos es la función de evaluación. Dada una cromosoma particular que representa un mapeo de programación, la función calcula de manera determinista el valor neto del negocio en todas las cargas de trabajo. Los procesos comerciales en cada carga de trabajo se asignan a proveedores de servicios, y el tiempo de finalización de cada proveedor se calcula en función de la garantía del acuerdo de servicio utilizando los parámetros mencionados en la Sección 3.1, a saber, el tiempo de finalización sin carga α, la máxima concurrencia β y un coeficiente γ que controla la degradación del rendimiento lineal bajo carga pesada. Ten en cuenta que la función de evaluación puede ser fácilmente reemplazada si se desea; por ejemplo, otras funciones de evaluación pueden modelar diferentes garantías de proveedores de servicios o flujos de trabajo paralelos. 4. EXPERIMENTOS Y RESULTADOS En esta sección mostramos el beneficio de utilizar nuestro planificador basado en algoritmos genéticos. Debido a que queríamos escalar los escenarios a un gran número de flujos de trabajo (hasta 1000 en nuestros experimentos), implementamos un programa de simulación que nos permitió variar parámetros y medir los resultados con diferentes métricas. El simulador fue escrito en C++ estándar y se ejecutó en un ordenador de escritorio Linux (Fedora Core) con una velocidad de 2.8 GHz y 1GB de RAM. Comparamos nuestro algoritmo con candidatos alternativos: • Un algoritmo de round-robin bien conocido que asigna cada proceso comercial de forma circular a los proveedores de servicios para un tipo de servicio en particular. Este enfoque proporciona el esquema más simple para el equilibrio de carga. • Un algoritmo aleatorio-proporcional que asigna proporcionalmente los procesos comerciales a los proveedores de servicios; es decir, para un tipo de servicio dado, los proveedores de servicios se clasifican según su tiempo de finalización garantizado, y los procesos comerciales se asignan proporcionalmente a los proveedores en función de su tiempo de finalización. (También probamos un esquema de proporcionalidad basado tanto en los tiempos de finalización como en la concurrencia máxima, pero obtuvimos los mismos resultados, por lo que solo se muestran los resultados de los esquemas anteriores aquí.) • Un algoritmo codicioso de hombre de paja que siempre asigna los procesos comerciales al proveedor de servicios que tiene el tiempo de finalización garantizado más rápido. Este algoritmo representa un enfoque ingenuo basado en observaciones avaras y locales de cada flujo de trabajo sin tener en cuenta todos los flujos de trabajo. En los experimentos que siguen, todos los resultados fueron promediados a lo largo de 20 pruebas, y para ayudar a normalizar los efectos de la aleatorización utilizada durante el AG, cada prueba comenzó leyendo datos preinicializados desde el disco. En la Tabla 1 enumeramos nuestros parámetros experimentales. En la Figura 3 mostramos los resultados de ejecutar nuestro AG contra las tres alternativas candidatas. El eje x muestra el número de flujos de trabajo escalado a 1000, y el eje y muestra el valor comercial agregado de todos los flujos de trabajo. Como se puede ver, el algoritmo genético produce consistentemente el mayor <br>valor comercial</br> incluso a medida que aumenta el número de flujos de trabajo; con 1000 flujos de trabajo, el algoritmo genético produce una mejora del 115% sobre la siguiente mejor alternativa. (Tenga en cuenta que aunque estamos optimizando en función de la métrica de <br>valor comercial</br> que definimos anteriormente, los algoritmos genéticos pueden converger hacia el valor óptimo de cualquier métrica, siempre y cuando la función de evaluación pueda medir de manera consistente el valor de un cromosoma con esa métrica). Como era de esperar, el algoritmo codicioso tiene un rendimiento muy pobre porque hace el peor trabajo en equilibrar la carga: todos los procesos comerciales de un tipo de servicio dado se asignan a un solo servidor (el que se anuncia como el que tiene el tiempo de finalización más rápido), y a medida que llegan más procesos comerciales, el rendimiento de los proveedores se degrada linealmente. El esquema de round-robin es inicialmente superado por el esquema proporcional aleatorio hasta alrededor de 120 flujos de trabajo (como se muestra en el gráfico ampliado de la Figura 4), pero a medida que aumenta el número de flujos de trabajo, el esquema de round-robin gana consistentemente sobre el proporcional aleatorio. La razón es que aunque el esquema aleatorio-proporcional asigna procesos comerciales a proveedores proporcionalmente según los tiempos de finalización anunciados (que es una medida del poder del proveedor de servicios), incluso los mejores proveedores eventualmente alcanzarán una concurrencia máxima del mundo real para la gran cantidad de flujos de trabajo que estamos considerando. Para un número muy grande de flujos de trabajo, el esquema de round-robin es capaz de equilibrar mejor la carga entre todos los proveedores de servicios. Para comprender mejor el comportamiento resultante de las asignaciones de programación, mostramos los resultados de finalización del flujo de trabajo en las Figuras 5, 6 y 7 para 100, 500 y 900 flujos de trabajo, respectivamente. Estas cifras muestran el porcentaje de flujos de trabajo que son exitosos (pueden completarse dentro de su límite de QoS), aceptables (pueden completarse dentro de κ=3 veces su límite de QoS) y fallidos (no pueden completarse dentro de κ=3 veces su límite de QoS). El GA produce consistentemente el mayor porcentaje de flujos de trabajo exitosos (lo que resulta en valores comerciales más altos para el conjunto agregado de flujos de trabajo). Además, el esquema de round-robin produce mejores resultados que el proporcional-aleatorio para un gran número de flujos de trabajo, pero no tiene un rendimiento tan bueno como el algoritmo genético. En la Figura 8 graficamos el makespan resultante de los mismos experimentos anteriores. Makespan es una métrica tradicional de la comunidad de programación de trabajos que mide el tiempo transcurrido para que se complete el último trabajo. Aunque útil, no captura la <br>métrica de valor empresarial</br> de alto nivel contra la que estamos optimizando. De hecho, el makespan no tiene en cuenta el hecho de que proporcionamos múltiples niveles de finalización (exitoso, aceptable y fallido) y asignamos puntajes de valor comercial en consecuencia. Para completar, señalamos que el algoritmo genético proporciona el makespan más rápido, pero es igualado por el algoritmo de round robin. El algoritmo genético produce mejores valores comerciales (como se muestra en la Figura 3) porque es capaz de explorar el espacio de soluciones para encontrar mejores asignaciones que generen flujos de trabajo más exitosos (como se muestra en las Figuras 5 a 7). También analizamos el efecto de los algoritmos de programación en el equilibrio de la carga. La Figura 9 muestra el porcentaje de proveedores de servicios que fueron accedidos mientras se ejecutaban los flujos de trabajo. Como era de esperar, el algoritmo codicioso siempre elige a un proveedor de servicios; por otro lado, el algoritmo de round-robin es el más rápido para distribuir el negocio. 33 Parámetro experimental Comentario Flujos de trabajo 5 a 1000 Procesos de negocio por flujo de trabajo aleatorio uniforme: 1 - 10 Tipos de servicio 10 Proveedores de servicios por tipo de servicio aleatorio uniforme: 1 - 10 Objetivo de QoS del flujo de trabajo aleatorio uniforme: 10-30 segundos Tiempo de finalización del proveedor de servicios (α) aleatorio uniforme: 1 - 12 segundos Máxima concurrencia del proveedor de servicios (β) aleatorio uniforme: 1 - 12 Coeficiente de degradación del proveedor de servicios (γ) aleatorio uniforme: 0.1 - 0.9 Valor de negocio para flujos de trabajo exitosos aleatorio uniforme: 10 - 50 puntos Valor de negocio para flujos de trabajo aceptables aleatorio uniforme: 0 - 10 puntos Valor de negocio para flujos de trabajo fallidos aleatorio uniforme: -10 - 0 puntos GA: número de padres 20 GA: número de hijos 80 GA: número de generaciones 1000 Tabla 1: Parámetros experimentales Fallido Aceptable (completado pero no dentro de QoS) Exitoso (completado dentro de QoS) 0% 20% 40% 60% 80% 100% RoundRobinRandProportionalGreedyGeneticAlg Porcentaje de todos los flujos de trabajo Comportamiento del flujo de trabajo, 100 flujos de trabajo Figura 5: Comportamiento del flujo de trabajo para 100 flujos de trabajo. Fracaso Aceptable (completado pero no dentro de QoS) Exitoso (completado dentro de QoS) 0% 20% 40% 60% 80% 100% RoundRobinRandProportionalGreedyGeneticAlg Porcentaje de todos los flujos de trabajo Comportamiento del flujo de trabajo, 500 flujos de trabajo Figura 6: Comportamiento del flujo de trabajo para 500 flujos de trabajo. Fracaso Aceptable (completado pero no dentro de QoS) Exitoso (completado dentro de QoS) 0% 20% 40% 60% 80% 100% RoundRobinRandProportionalGreedyGeneticAlg Porcentaje de todos los flujos de trabajo Comportamiento del flujo de trabajo, 500 flujos de trabajo Figura 7: Comportamiento del flujo de trabajo para 900 flujos de trabajo. 0 50 100 150 200 250 300 0 200 400 600 800 1000 Tiempo total [segundos] Número de flujos de trabajo Tiempo máximo de finalización para todos los flujos de trabajo Algoritmo genético Round robin Proporcional aleatorio Codicioso Figura 8: Tiempo máximo de finalización para todos los flujos de trabajo. Este valor es la métrica makespan utilizada en la investigación de programación tradicional. Aunque útil, el makespan no tiene en cuenta la puntuación del valor comercial en nuestro dominio de problemas. La Figura 10 muestra el porcentaje de proveedores de servicios accedidos (es decir, el porcentaje de proveedores de servicios representados en la Figura 9) que tenían más procesos comerciales asignados que su concurrencia máxima anunciada. Por ejemplo, en el algoritmo voraz solo se utiliza un proveedor de servicios, y este proveedor se satura rápidamente. Por otro lado, el algoritmo aleatorio-proporcional utiliza muchos proveedores de servicios, pero debido a que los procesos comerciales se asignan de manera proporcional con más asignaciones yendo a los mejores proveedores, hay una tendencia a que un menor porcentaje de proveedores se saturen. Para completitud, mostramos el rendimiento del algoritmo genético en sí mismo en la Figura 11. El algoritmo escala linealmente con un aumento en el número de flujos de trabajo. Observamos que los algoritmos round-robin, random-proportional y greedy terminaron en menos de 1 segundo incluso para la configuración de flujo de trabajo más grande. Sin embargo, consideramos que el beneficio de encontrar puntajes de valor empresarial mucho más altos justifica el tiempo de ejecución del algoritmo genético; además, esperaríamos que el tiempo de ejecución mejore tanto con la optimización del software como con un ordenador más rápido que nuestro PC estándar. CONCLUSIÓN Los procesos comerciales dentro de los flujos de trabajo pueden ser orquestados para acceder a servicios web. En este artículo estudiamos la provisión de servicios de múltiples niveles, donde las solicitudes de servicios web a tipos de servicios pueden ser asignadas a diferentes proveedores de servicios. El problema resultante es que para poder soportar un gran número de flujos de trabajo, la asignación de procesos de negocio a proveedores de servicios web debe ser inteligente. Utilizamos una <br>métrica de valor empresarial</br> para medir el 0.2 0.4 0.6 0.8 1 0 200 400 600 800 1000 Porcentaje de todos los proveedores de servicios Número de flujos de trabajo Proveedores de servicios utilizados Algoritmo genético Round robin Proporcional aleatorio Ávido Figura 9: El porcentaje de proveedores de servicios utilizados durante las ejecuciones de carga de trabajo. ",
            "candidates": [],
            "error": [
                [
                    "métrica de valor comercial",
                    "métrica de valor comercial",
                    "valor comercial",
                    "valor comercial",
                    "métrica de valor empresarial",
                    "métrica de valor empresarial"
                ]
            ]
        },
        "multi-tiered system": {
            "translated_key": "sistemas multinivel",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Heuristics-Based Scheduling of Composite Web Service Workloads Thomas Phan Wen-Syan Li IBM Almaden Research Center 650 Harry Rd.",
                "San Jose, CA 95120 {phantom,wsl}@us.ibm.com ABSTRACT Web services can be aggregated to create composite workflows that provide streamlined functionality for human users or other systems.",
                "Although industry standards and recent research have sought to define best practices and to improve end-to-end workflow composition, one area that has not fully been explored is the scheduling of a workflows web service requests to actual service provisioning in a multi-tiered, multi-organisation environment.",
                "This issue is relevant to modern business scenarios where business processes within a workflow must complete within QoS-defined limits.",
                "Because these business processes are web service consumers, service requests must be mapped and scheduled across multiple web service providers, each with its own negotiated service level agreement.",
                "In this paper we provide heuristics for scheduling service requests from multiple business process workflows to web service providers such that a business value metric across all workflows is maximised.",
                "We show that a genetic search algorithm is appropriate to perform this scheduling, and through experimentation we show that our algorithm scales well up to a thousand workflows and produces better mappings than traditional approaches.",
                "Categories and Subject Descriptors C.2.4 [Computer-Communication Networks]: Distributed Systems-distributed applications; D.2.8 [Software Engineering]: Metrics-complexity measures, performance measures 1.",
                "INTRODUCTION Web services can be composed into workflows to provide streamlined end-to-end functionality for human users or other systems.",
                "Although previous research efforts have looked at ways to intelligently automate the composition of web services into workflows (e.g. [1, 9]), an important remaining problem is the assignment of web service requests to the underlying web service providers in a multi-tiered runtime scenario within constraints.",
                "In this paper we address this scheduling problem and examine means to manage a large number of business process workflows in a scalable manner.",
                "The problem of scheduling web service requests to providers is relevant to modern business domains that depend on multi-tiered service provisioning.",
                "Consider the example shown in Figure 1 that illustrates our problem space.",
                "Workflows comprise multiple related business processes that are web service consumers; here we assume that the workflows represent requested service from customers or automated systems and that the workflow has already been composed with an existing choreography toolkit.",
                "These workflows are then submitted to a portal (not shown) that acts as a scheduling agent between the web service consumers and the web service providers.",
                "In this example, a workflow could represent the actions needed to instantiate a vacation itinerary, where one business process requests booking an airline ticket, another business process requests a hotel room, and so forth.",
                "Each of these requests target a particular service type (e.g. airline reservations, hotel reservations, car reservations, etc. ), and for each service type, there are multiple instances of service providers that publish a web service interface.",
                "An important challenge is that the workflows must meet some quality-of-service (QoS) metric, such as end-to-end completion time of all its business processes, and that meeting or failing this goal results in the assignment of a quantitative business value metric for the workflow; intuitively, it is desired that all workflows meet their respective QoS goals.",
                "We further leverage the notion that QoS service agreements are generally agreed-upon between the web service providers and the scheduling agent such that the providers advertise some level of guaranteed QoS to the scheduler based upon runtime conditions such as turnaround time and maximum available concurrency.",
                "The resulting problem is then to schedule and assign the business processes requests for service types to one of the service providers for that type.",
                "The scheduling must be done such that the aggregate business value across all the workflows is maximised.",
                "In Section 3 we state the scenario as a combinatorial problem and utilise a genetic search algorithm [5] to find the best assignment of web service requests to providers.",
                "This approach converges towards an assignment that maximises the overall business value for all the workflows.",
                "In Section 4 we show through experimentation that this search heuristic finds better assignments than other algorithms (greedy, round-robin, and proportional).",
                "Further, this approach allows us to scale the number of simultaneous workflows (up to one thousand workflows in our experiments) and yet still find effective schedules. 2.",
                "RELATED WORK In the context of service assignment and scheduling, [11] maps web service calls to potential servers using linear programming, but their work is concerned with mapping only single workflows; our principal focus is on scalably scheduling multiple workflows (up 30 Service Type SuperHotels.com Business Process Business Process Workflow ... Business Process Business Process ... HostileHostels.com IncredibleInns.com Business Process Business Process Business Process ... Business Process Service Provider SkyHighAirlines.com SuperCrazyFlights.com Business Process . . . . . .",
                "Advertised QoS Service Agreement CarRentalService.com Figure 1: An example scenario demonstrating the interaction between business processes in workflows and web service providers.",
                "Each business process accesses a service type and is then mapped to a service provider for that type. to one thousand as we show later) using different business metrics and a search heuristic. [10] presents a dynamic provisioning approach that uses both predictive and reactive techniques for multi-tiered Internet application delivery.",
                "However, the provisioning techniques do not consider the challenges faced when there are alternative query execution plans and replicated data sources. [8] presents a feedback-based scheduling mechanism for <br>multi-tiered system</br>s with back-end databases, but unlike our work, it assumes a tighter coupling between the various components of the system.",
                "Our work also builds upon prior scheduling research.",
                "The classic job-shop scheduling problem, shown to be NP-complete [4] [3], is similar to ours in that tasks within a job must be scheduled onto machinery (c.f. our scenario is that business processes within a workflow must be scheduled onto web service providers).",
                "The salient differences are that the machines can process only one job at a time (we assume servers can multi-task but with degraded performance and a maximum concurrency level), tasks within a job cannot simultaneously run on different machines (we assume business processes can be assigned to any available server), and the principal metric of performance is the makespan, which is the time for the last task among all the jobs to complete (and as we show later, optimising on the makespan is insufficient for scheduling the business processes, necessitating different metrics). 3.",
                "DESIGN In this section we describe our model and discuss how we can find scheduling assignments using a genetic search algorithm. 3.1 Model We base our model on the simplified scenario shown in Figure 1.",
                "Specifically, we assume that users or automated systems request the execution of a workflow.",
                "The workflows comprise business processes, each of which makes one web service invocation to a service type.",
                "Further, business processes have an ordering in the workflow.",
                "The arrangement and execution of the business processes and the data flow between them are all managed by a composition or choreography tool (e.g. [1, 9]).",
                "Although composition languages can use sophisticated flow-control mechanisms such as conditional branches, for simplicity we assume the processes execute sequentially in a given order.",
                "This scenario can be naturally extended to more complex relationships that can be expressed in BPEL [7], which defines how business processes interact, messages are exchanged, activities are ordered, and exceptions are handled.",
                "Due to space constraints, we focus on the problem space presented here and will extend our model to more advanced deployment scenarios in the future.",
                "Each workflow has a QoS requirement to complete within a specified number of time units (e.g. on the order of seconds, as detailed in the Experiments section).",
                "Upon completion (or failure), the workflow is assigned a business value.",
                "We extended this approach further and considered different types of workflow completion in order to model differentiated QoS levels that can be applied by businesses (for example, to provide tiered customer service).",
                "We say that a workflow is successful if it completes within its QoS requirement, acceptable if it completes within a constant factor κ 31 of its QoS bound (in our experiments we chose κ=3), or failing if it finishes beyond κ times its QoS bound.",
                "For each category, a business value score is assigned to the workflow, with the successful category assigned the highest positive score, followed by acceptable and then failing.",
                "The business value point distribution is non-uniform across workflows, further modelling cases where some workflows are of higher priority than others.",
                "Each service type is implemented by a number of different service providers.",
                "We assume that the providers make service level agreements (SLAs) to guarantee a level of performance defined by the completion time for completing a web service invocation.",
                "Although SLAs can be complex, in this paper we assume for simplicity that the guarantees can take the form of a linear performance degradation under load.",
                "This guarantee is defined by several parameters: α is the expected completion time (for example, on the order of seconds) if the assigned workload of web service requests is less than or equal to β, the maximum concurrency, and if the workload is higher than β, the expected completion for a workload of size ω is α+ γ(ω − β) where γ is a fractional coefficient.",
                "In our experiments we vary α, β, and γ with different distributions.",
                "Ideally, all workflows would be able to finish within their QoS limits and thus maximise the aggregate business value across all workflows.",
                "However, because we model service providers with degrading performance under load, not all workflows will achieve their QoS limit: it may easily be the case that business processes are assigned to providers who are overloaded and cannot complete within the respective workflows QoS limit.",
                "The key research problem, then, is to assign the business processes to the web service providers with the goal of optimising on the aggregate business value of all workflows.",
                "Given that the scope of the optimisation is the entire set of workflows, it may be that the best scheduling assignments may result in some workflows having to fail in order for more workflows to succeed.",
                "This intuitive observation suggests that traditional scheduling approaches such as round-robin or proportional assignments will not fare well, which is what we observe and discuss in Section 4.",
                "On the other hand, an exhaustive search of all the possible assignments will find the best schedule, but the computational complexity is prohibitively high.",
                "Suppose there are W workflows with an average of B business processes per workflow.",
                "Further, in the worst case each business process requests one service type, for which there are P providers.",
                "There are thus W · PB combinations to explore to find the optimal assignments of business processes to providers.",
                "Even for small configurations (e.g.",
                "W =10, B=5, P=10), the computational time for exhaustive search is significant, and in our work we look to scale these parameters.",
                "In the next subsection, discuss how a genetic search algorithm can be used to converge toward the optimum scheduling assignments. 3.2 Genetic algorithm Given an exponential search space of business process assignments to web service providers, the problem is to find the optimal assignment that produces the overall highest aggregate business value across all workflows.",
                "To explore the solution space, we use a genetic algorithm (GA) search heuristic that simulates Darwinian natural selection by having members of a population compete to survive in order to pass their genetic chromosomes onto the next generation; after successive generations, there is a tendency for the chromosomes to converge toward the best combination [5] [6].",
                "Although other search heuristics exist that can solve optimization problems (e.g. simulated annealing or steepest-ascent hillclimbing), the business process scheduling problem fits well with a GA because potential solutions can be represented in a matrix form and allows us to use prior research in effective GA chromosome recombination to form new members of the population (e.g. [2]). 0 1 2 3 4 0 1 2 0 2 1 1 0 1 0 1 0 2 1 2 0 0 1 Figure 2: An example chromosome representing a scheduling assignment of (workflow,service type) → service provider.",
                "Each row represents a workflow, and each column represents a service type.",
                "For example, here there are 3 workflows (0 to 2) and 5 service types (0 to 4).",
                "In workflow 0, any request for service type 3 goes to provider 2.",
                "Note that the service provider identifier is within a range limited to its service type (i.e. its column), so the 2 listed for service type 3 is a different server from server 2 in other columns.",
                "Chromosome representation of a solution.",
                "In Figure 2 we show an example chromosome that encodes one scheduling assignment.",
                "The representation is a 2-dimensional matrix that maps {workflow, service type} to a service provider.",
                "For a business process in workflow i and utilising service type j, the (i, j)th entry in the table is the identifier for the service provider to which the business process is assigned.",
                "Note that the service provider identifier is within a range limited to its service type.",
                "GA execution.",
                "A GA proceeds as follows.",
                "Initially a random set of chromosomes is created for the population.",
                "The chromosomes are evaluated (hashed) to some metric, and the best ones are chosen to be parents.",
                "In our problem, the evaluation produces the net business value across all workflows after executing all business processes once they are assigned to their respective service providers according to the mapping in the chromosome.",
                "The parents recombine to produce children, simulating sexual crossover, and occasionally a mutation may arise which produces new characteristics that were not available in either parent.",
                "The principal idea is that we would like the children to be different from the parents (in order to explore more of the solution space) yet not too different (in order to contain the portions of the chromosome that result in good scheduling assignments).",
                "Note that finding the global optimum is not guaranteed because the recombination and mutation are stochastic.",
                "GA recombination and mutation.",
                "As mentioned, the chromosomes are 2-dimensional matrices that represent scheduling assignments.",
                "To simulate sexual recombination of two chromosomes to produce a new child chromosome, we applied a one-point crossover scheme twice (once along each dimension).",
                "The crossover is best explained by analogy to Cartesian space as follows.",
                "A random point is chosen in the matrix to be coordinate (0, 0).",
                "Matrix elements from quadrants II and IV from the first parent and elements from quadrants I and III from the second parent are used to create the new child.",
                "This approach follows GA best practices by keeping contiguous chromosome segments together as they are transmitted from parent to child.",
                "The uni-chromosome mutation scheme randomly changes one of the service provider assignments to another provider within the available range.",
                "Other recombination and mutation schemes are an area of research in the GA community, and we look to explore new operators in future work.",
                "GA evaluation function.",
                "An important GA component is the evaluation function.",
                "Given a particular chromosome representing one scheduling mapping, the function deterministically calculates the net business value across all workloads.",
                "The business processes in each workload are assigned to service providers, and each providers completion time is calculated based on the service agreement guarantee using the parameters mentioned in Section 3.1, namely the unloaded completion time α, the maximum concur32 rency β, and a coefficient γ that controls the linear performance degradation under heavy load.",
                "Note that the evaluation function can be easily replaced if desired; for example, other evaluation functions can model different service provider guarantees or parallel workflows. 4.",
                "EXPERIMENTS AND RESULTS In this section we show the benefit of using our GA-based scheduler.",
                "Because we wanted to scale the scenarios up to a large number of workflows (up to 1000 in our experiments), we implemented a simulation program that allowed us to vary parameters and to measure the results with different metrics.",
                "The simulator was written in standard C++ and was run on a Linux (Fedora Core) desktop computer running at 2.8 GHz with 1GB of RAM.",
                "We compared our algorithm against alternative candidates: • A well-known round-robin algorithm that assigns each business process in circular fashion to the service providers for a particular service type.",
                "This approach provides the simplest scheme for load-balancing. • A random-proportional algorithm that proportionally assigns business processes to the service providers; that is, for a given service type, the service providers are ranked by their guaranteed completion time, and business processes are assigned proportionally to the providers based on their completion time. (We also tried a proportionality scheme based on both the completion times and maximum concurrency but attained the same results, so only the former schemes results are shown here.) • A strawman greedy algorithm that always assigns business processes to the service provider that has the fastest guaranteed completion time.",
                "This algorithm represents a naive approach based on greedy, local observations of each workflow without taking into consideration all workflows.",
                "In the experiments that follow, all results were averaged across 20 trials, and to help normalise the effects of randomisation used during the GA, each trial started by reading in pre-initialised data from disk.",
                "In Table 1 we list our experimental parameters.",
                "In Figure 3 we show the results of running our GA against the three candidate alternatives.",
                "The x-axis shows the number for workflows scaled up to 1000, and the y-axis shows the aggregate business value for all workflows.",
                "As can be seen, the GA consistently produces the highest business value even as the number of workflows grows; at 1000 workflows, the GA produces a 115% improvement over the next-best alternative. (Note that although we are optimising against the business value metric we defined earlier, genetic algorithms are able to converge towards the optimal value of any metric, as long as the evaluation function can consistently measure a chromosomes value with that metric.)",
                "As expected, the greedy algorithm performs very poorly because it does the worst job at balancing load: all business processes for a given service type are assigned to only one server (the one advertised to have the fastest completion time), and as more business processes arrive, the providers performance degrades linearly.",
                "The round-robin scheme is initially outperformed by the randomproportional scheme up to around 120 workflows (as shown in the magnified graph of Figure 4), but as the number of workflows increases, the round-robin scheme consistently wins over randomproportional.",
                "The reason is that although the random-proportional scheme assigns business processes to providers proportionally according to the advertised completion times (which is a measure of the power of the service provider), even the best providers will eventually reach a real-world maximum concurrency for the large -2000 -1000 0 1000 2000 3000 4000 5000 6000 7000 0 200 400 600 800 1000 Aggregatebusinessvalueacrossallworkflows Total number of workflows Business value scores of scheduling algorithms Genetic algorithm Round robin Random proportional Greedy Figure 3: Net business value scores of different scheduling algorithms. -500 0 500 1000 1500 2000 2500 3000 3500 4000 0 50 100 150 200Aggregatebusinessvalueacrossallworkflows Total number of workflows Business value scores of scheduling algorithms Genetic algorithm Round robin Random proportional Greedy Figure 4: Magnification of the left-most region in Figure 3. number of workflows that we are considering.",
                "For a very large number of workflows, the round-robin scheme is able to better balance the load across all service providers.",
                "To better understand the behaviour resulting from the scheduling assignments, we show the workflow completion results in Figures 5, 6, and 7 for 100, 500, and 900 workflows, respectively.",
                "These figures show the percentage of workflows that are successful (can complete with their QoS limit), acceptable (can complete within κ=3 times their QoS limit), and failed (cannot complete within κ=3 times their QoS limit).",
                "The GA consistently produces the highest percentage of successful workflows (resulting in higher business values for the aggregate set of workflows).",
                "Further, the round-robin scheme produces better results than the random-proportional for a large number of workflows but does not perform as well as the GA.",
                "In Figure 8 we graph the makespan resulting from the same experiments above.",
                "Makespan is a traditional metric from the job scheduling community measuring elapsed time for the last job to complete.",
                "While useful, it does not capture the high-level business value metric that we are optimising against.",
                "Indeed, the makespan is oblivious to the fact that we provide multiple levels of completion (successful, acceptable, and failed) and assign business value scores accordingly.",
                "For completeness, we note that the GA provides the fastest makespan, but it is matched by the round robin algorithm.",
                "The GA produces better business values (as shown in Figure 3) because it is able to search the solution space to find better mappings that produce more successful workflows (as shown in Figures 5 to 7).",
                "We also looked at the effect of the scheduling algorithms on balancing the load.",
                "Figure 9 shows the percentage of services providers that were accessed while the workflows ran.",
                "As expected, the greedy algorithm always hits one service provider; on the other hand, the round-robin algorithm is the fastest to spread the business 33 Experimental parameter Comment Workflows 5 to 1000 Business processes per workflow uniform random: 1 - 10 Service types 10 Service providers per service type uniform random: 1 - 10 Workflow QoS goal uniform random: 10-30 seconds Service provider completion time (α) uniform random: 1 - 12 seconds Service provider maximum concurrency (β) uniform random: 1 - 12 Service provider degradation coefficient (γ) uniform random: 0.1 - 0.9 Business value for successful workflows uniform random: 10 - 50 points Business value for acceptable workflows uniform random: 0 - 10 points Business value for failed workflows uniform random: -10 - 0 points GA: number of parents 20 GA: number of children 80 GA: number of generations 1000 Table 1: Experimental parameters Failed Acceptable (completed but not within QoS) Successful (completed within QoS) 0% 20% 40% 60% 80% 100% RoundRobinRandProportionalGreedyGeneticAlg Percentageofallworkflows Workflow behaviour, 100 workflows Figure 5: Workflow behaviour for 100 workflows.",
                "Failed Acceptable (completed but not within QoS) Successful (completed within QoS) 0% 20% 40% 60% 80% 100% RoundRobinRandProportionalGreedyGeneticAlg Percentageofallworkflows Workflow behaviour, 500 workflows Figure 6: Workflow behaviour for 500 workflows.",
                "Failed Acceptable (completed but not within QoS) Successful (completed within QoS) 0% 20% 40% 60% 80% 100% RoundRobinRandProportionalGreedyGeneticAlg Percentageofallworkflows Workflow behaviour, 500 workflows Figure 7: Workflow behaviour for 900 workflows. 0 50 100 150 200 250 300 0 200 400 600 800 1000 Makespan[seconds] Number of workflows Maximum completion time for all workflows Genetic algorithm Round robin Random proportional Greedy Figure 8: Maximum completion time for all workflows.",
                "This value is the makespan metric used in traditional scheduling research.",
                "Although useful, the makespan does not take into consideration the business value scoring in our problem domain. processes.",
                "Figure 10 is the percentage of accessed service providers (that is, the percentage of service providers represented in Figure 9) that had more assigned business processes than their advertised maximum concurrency.",
                "For example, in the greedy algorithm only one service provider is utilised, and this one provider quickly becomes saturated.",
                "On the other hand, the random-proportional algorithm uses many service providers, but because business processes are proportionally assigned with more assignments going to the better providers, there is a tendency for a smaller percentage of providers to become saturated.",
                "For completeness, we show the performance of the genetic algorithm itself in Figure 11.",
                "The algorithm scales linearly with an increasing number of workflows.",
                "We note that the round-robin, random-proportional, and greedy algorithms all finished within 1 second even for the largest workflow configuration.",
                "However, we feel that the benefit of finding much higher business value scores justifies the running time of the GA; further we would expect that the running time will improve with both software tuning as well as with a computer faster than our off-the-shelf PC. 5.",
                "CONCLUSION Business processes within workflows can be orchestrated to access web services.",
                "In this paper we looked at multi-tiered service provisioning where web service requests to service types can be mapped to different service providers.",
                "The resulting problem is that in order to support a very large number of workflows, the assignment of business process to web service provider must be intelligent.",
                "We used a business value metric to measure the be34 0 0.2 0.4 0.6 0.8 1 0 200 400 600 800 1000 Percentageofallserviceproviders Number of workflows Service providers utilised Genetic algorithm Round robin Random proportional Greedy Figure 9: The percentage of service providers utilized during workload executions.",
                "The Greedy algorithm always hits the one service provider, while the Round Robin algorithm spreads requests evenly across the providers. 0 0.2 0.4 0.6 0.8 1 0 200 400 600 800 1000 Percentageofallserviceproviders Number of workflows Service providers saturated Genetic algorithm Round robin Random proportional Greedy Figure 10: The percentage of service providers that are saturated among those providers who were utilized (that is, percentage of the service providers represented in Figure 9).",
                "A saturated service provider is one whose workload is greater that its advertised maximum concurrency. 0 5 10 15 20 25 0 200 400 600 800 1000 Runningtimeinseconds Total number of workflows Running time of genetic algorithm GA running time Figure 11: Running time of the genetic algorithm. haviour of workflows meeting or failing QoS values, and we optimised our scheduling to maximise the aggregate business value across all workflows.",
                "Since the solution space of scheduler mappings is exponential, we used a genetic search algorithm to search the space and converge toward the best schedule.",
                "With a default configuration for all parameters and using our business value scoring, the GA produced up to 115% business value improvement over the next best algorithm.",
                "Finally, because a genetic algorithm will converge towards the optimal value using any metric (even other than the business value metric we used), we believe our approach has strong potential for continuing work.",
                "In future work, we look to acquire real-world traces of web service instances in order to get better estimates of service agreement guarantees, although we expect that such guarantees between the providers and their consumers are not generally available to the public.",
                "We will also look at other QoS metrics such as CPU and I/O usage.",
                "For example, we can analyse transfer costs with varying bandwidth, latency, data size, and data distribution.",
                "Further, we hope to improve our genetic algorithm and compare it to more scheduler alternatives.",
                "Finally, since our work is complementary to existing work in web services choreography (because we rely on pre-configured workflows), we look to integrate our approach with available web service workflow systems expressed in BPEL. 6.",
                "REFERENCES [1] A. Ankolekar, et al.",
                "DAML-S: Semantic Markup For Web Services, In Proc. of the Intl Semantic Web Working Symposium, 2001. [2] L. Davis.",
                "Job Shop Scheduling with Genetic Algorithms, In Proc. of the Intl Conference on Genetic Algorithms, 1985. [3] H.-L. Fang, P. Ross, and D. Corne.",
                "A Promising Genetic Algorithm Approach to Job-Shop Scheduling, Rescheduling, and Open-Shop Scheduling Problems , In Proc. on the 5th Intl Conference on Genetic Algorithms, 1993. [4] M. Gary and D. Johnson.",
                "Computers and Intractability: A Guide to the Theory of NP-Completeness, Freeman, 1979. [5] J. Holland.",
                "Adaptation in Natural and Artificial Systems: An Introductory Analysis with Applications to Biology, Control, and Artificial Intelligence, MIT Press, 1992. [6] D. Goldberg.",
                "Genetic Algorithms in Search, Optimization and Machine Learning, Kluwer Academic Publishers, 1989. [7] Business Processes in a Web Services World, www-128.ibm.com/developerworks/ webservices/library/ws-bpelwp/. [8] G. Soundararajan, K. Manassiev, J. Chen, A. Goel, and C. Amza.",
                "Back-end Databases in Shared Dynamic Content Server Clusters, In Proc. of the IEEE Intl Conference on Autonomic Computing, 2005. [9] B. Srivastava and J. Koehler.",
                "Web Service Composition Current Solutions and Open Problems, ICAP, 2003. [10] B. Urgaonkar, P. Shenoy, A. Chandra, and P. Goyal.",
                "Dynamic Provisioning of Multi-Tier Internet Applications, In Proc. of the IEEE Intl Conference on Autonomic Computing, 2005. [11] L. Zeng, B. Benatallah, M. Dumas, J. Kalagnanam, and Q. Sheng.",
                "Quality Driven Web Services Composition, In Proc. of the WWW Conference, 2003. 35"
            ],
            "original_annotated_samples": [
                "However, the provisioning techniques do not consider the challenges faced when there are alternative query execution plans and replicated data sources. [8] presents a feedback-based scheduling mechanism for <br>multi-tiered system</br>s with back-end databases, but unlike our work, it assumes a tighter coupling between the various components of the system."
            ],
            "translated_annotated_samples": [
                "Sin embargo, las técnicas de aprovisionamiento no consideran los desafíos enfrentados cuando hay planes alternativos de ejecución de consultas y fuentes de datos replicadas. [8] presenta un mecanismo de programación basado en retroalimentación para <br>sistemas multinivel</br> con bases de datos de back-end, pero a diferencia de nuestro trabajo, asume un acoplamiento más estrecho entre los diversos componentes del sistema."
            ],
            "translated_text": "Programación basada en heurísticas de cargas de trabajo de servicios web compuestos Thomas Phan Wen-Syan Li Centro de Investigación IBM Almaden 650 Harry Rd. Los servicios web pueden ser agregados para crear flujos de trabajo compuestos que proporcionen funcionalidad simplificada para usuarios humanos u otros sistemas. Aunque los estándares de la industria y la investigación reciente han buscado definir las mejores prácticas y mejorar la composición del flujo de trabajo de extremo a extremo, un área que no ha sido completamente explorada es la programación de las solicitudes de servicios web de los flujos de trabajo para la provisión real de servicios en un entorno multinivel y multiorganizacional. Este problema es relevante para los escenarios empresariales modernos donde los procesos comerciales dentro de un flujo de trabajo deben completarse dentro de los límites definidos por la calidad de servicio (QoS). Debido a que estos procesos comerciales son consumidores de servicios web, las solicitudes de servicio deben ser mapeadas y programadas entre múltiples proveedores de servicios web, cada uno con su propio acuerdo de nivel de servicio negociado. En este documento proporcionamos heurísticas para programar solicitudes de servicio de múltiples flujos de trabajo de procesos comerciales a proveedores de servicios web de manera que se maximice una métrica de valor comercial en todos los flujos de trabajo. Mostramos que un algoritmo de búsqueda genética es apropiado para realizar esta programación, y a través de experimentación demostramos que nuestro algoritmo escala bien hasta mil flujos de trabajo y produce mejores asignaciones que enfoques tradicionales. Categorías y Descriptores de Asignaturas C.2.4 [Redes de Computadoras-Comunicación]: Sistemas Distribuidos-aplicaciones distribuidas; D.2.8 [Ingeniería de Software]: Métricas-medidas de complejidad, medidas de rendimiento 1. INTRODUCCIÓN Los servicios web pueden ser compuestos en flujos de trabajo para proporcionar funcionalidad integrada de principio a fin para usuarios humanos u otros sistemas. Aunque los esfuerzos de investigación previos han examinado formas de automatizar de manera inteligente la composición de servicios web en flujos de trabajo (por ejemplo, [1, 9]), un problema importante que aún persiste es la asignación de solicitudes de servicios web a los proveedores de servicios web subyacentes en un escenario de tiempo de ejecución multinivel dentro de ciertas restricciones. En este documento abordamos este problema de programación y examinamos medios para gestionar un gran número de flujos de trabajo de procesos comerciales de manera escalable. El problema de programar solicitudes de servicios web a proveedores es relevante para los dominios comerciales modernos que dependen de la provisión de servicios de múltiples niveles. Considera el ejemplo mostrado en la Figura 1 que ilustra nuestro espacio de problemas. Los flujos de trabajo comprenden múltiples procesos comerciales relacionados que son consumidores de servicios web; aquí asumimos que los flujos de trabajo representan servicios solicitados por clientes o sistemas automatizados y que el flujo de trabajo ya ha sido compuesto con una herramienta de coreografía existente. Estos flujos de trabajo son luego enviados a un portal (no mostrado) que actúa como un agente de programación entre los consumidores del servicio web y los proveedores del servicio web. En este ejemplo, un flujo de trabajo podría representar las acciones necesarias para crear un itinerario de vacaciones, donde un proceso empresarial solicita la reserva de un boleto de avión, otro proceso empresarial solicita una habitación de hotel, y así sucesivamente. Cada una de estas solicitudes apunta a un tipo de servicio en particular (por ejemplo, reservas de aerolíneas, reservas de hoteles, reservas de autos, etc.), y para cada tipo de servicio, hay múltiples instancias de proveedores de servicios que publican una interfaz de servicio web. Un desafío importante es que los flujos de trabajo deben cumplir con alguna métrica de calidad de servicio (QoS), como el tiempo de finalización de extremo a extremo de todos sus procesos comerciales, y que cumplir o no con este objetivo resulta en la asignación de una métrica de valor comercial cuantitativo para el flujo de trabajo; intuitivamente, se desea que todos los flujos de trabajo cumplan con sus respectivos objetivos de QoS. Además, aprovechamos la idea de que los acuerdos de servicio de QoS suelen ser acordados entre los proveedores de servicios web y el agente de programación de tal manera que los proveedores anuncian un cierto nivel de QoS garantizado al programador en función de condiciones de tiempo de respuesta y concurrencia máxima disponible. El problema resultante es entonces programar y asignar las solicitudes de procesos comerciales para tipos de servicio a uno de los proveedores de servicios para ese tipo. La programación debe realizarse de tal manera que se maximice el valor comercial agregado en todos los flujos de trabajo. En la Sección 3 planteamos el escenario como un problema combinatorio y utilizamos un algoritmo de búsqueda genética [5] para encontrar la mejor asignación de solicitudes de servicios web a proveedores. Este enfoque converge hacia una asignación que maximiza el valor comercial general para todos los flujos de trabajo. En la Sección 4 mostramos a través de experimentación que esta heurística de búsqueda encuentra asignaciones mejores que otros algoritmos (codicioso, round-robin y proporcional). Además, este enfoque nos permite escalar el número de flujos de trabajo simultáneos (hasta mil flujos de trabajo en nuestros experimentos) y aún así encontrar horarios efectivos. 2. TRABAJO RELACIONADO En el contexto de asignación y programación de servicios, [11] mapea llamadas de servicios web a servidores potenciales utilizando programación lineal, pero su trabajo se centra en mapear solo flujos de trabajo individuales; nuestro enfoque principal está en programar de manera escalable múltiples flujos de trabajo (hasta 30 tipos de servicios SuperHotels.com Proceso de Negocio Proceso de Negocio Flujo de Trabajo ... Proceso de Negocio Proceso de Negocio ... HostileHostels.com IncredibleInns.com Proceso de Negocio Proceso de Negocio Proceso de Negocio ... Proceso de Negocio Proveedor de Servicios SkyHighAirlines.com SuperCrazyFlights.com Proceso de Negocio . . . . . . Acuerdo de Servicio de Calidad de Servicio (QoS) Publicitado CarRentalService.com Figura 1: Un escenario de ejemplo que muestra la interacción entre procesos comerciales en flujos de trabajo y proveedores de servicios web. Cada proceso empresarial accede a un tipo de servicio y luego se asigna a un proveedor de servicios para ese tipo, a uno mil como mostraremos más adelante, utilizando diferentes métricas empresariales y una heurística de búsqueda. [10] presenta un enfoque de aprovisionamiento dinámico que utiliza técnicas predictivas y reactivas para la entrega de aplicaciones de Internet multinivel. Sin embargo, las técnicas de aprovisionamiento no consideran los desafíos enfrentados cuando hay planes alternativos de ejecución de consultas y fuentes de datos replicadas. [8] presenta un mecanismo de programación basado en retroalimentación para <br>sistemas multinivel</br> con bases de datos de back-end, pero a diferencia de nuestro trabajo, asume un acoplamiento más estrecho entre los diversos componentes del sistema. Nuestro trabajo también se basa en investigaciones previas sobre programación. El problema clásico de programación de talleres, demostrado como NP-completo [4] [3], es similar al nuestro en el sentido de que las tareas dentro de un trabajo deben ser programadas en maquinaria (cf. nuestro escenario es que los procesos comerciales dentro de un flujo de trabajo deben ser programados en proveedores de servicios web). Las diferencias más destacadas son que las máquinas solo pueden procesar un trabajo a la vez (asumimos que los servidores pueden realizar múltiples tareas pero con un rendimiento degradado y un nivel máximo de concurrencia), las tareas dentro de un trabajo no pueden ejecutarse simultáneamente en diferentes máquinas (asumimos que los procesos comerciales pueden asignarse a cualquier servidor disponible), y la métrica principal de rendimiento es el makespan, que es el tiempo que tarda la última tarea de todos los trabajos en completarse (y como mostraremos más adelante, optimizar el makespan no es suficiente para programar los procesos comerciales, lo que requiere diferentes métricas). 3. En esta sección describimos nuestro modelo y discutimos cómo podemos encontrar asignaciones de programación utilizando un algoritmo de búsqueda genética. 3.1 Modelo Basamos nuestro modelo en el escenario simplificado mostrado en la Figura 1. Específicamente, asumimos que los usuarios o sistemas automatizados solicitan la ejecución de un flujo de trabajo. Los flujos de trabajo comprenden procesos comerciales, cada uno de los cuales realiza una invocación de servicio web a un tipo de servicio. Además, los procesos comerciales tienen un orden en el flujo de trabajo. La disposición y ejecución de los procesos comerciales y el flujo de datos entre ellos son gestionados por una herramienta de composición o coreografía (por ejemplo, [1, 9]). Aunque los lenguajes de composición pueden utilizar mecanismos sofisticados de control de flujo como ramas condicionales, para simplificar asumimos que los procesos se ejecutan secuencialmente en un orden dado. Este escenario puede ser extendido de forma natural a relaciones más complejas que pueden ser expresadas en BPEL [7], el cual define cómo interactúan los procesos de negocio, se intercambian mensajes, se ordenan actividades y se manejan excepciones. Debido a limitaciones de espacio, nos enfocamos en el espacio de problemas presentado aquí y extenderemos nuestro modelo a escenarios de implementación más avanzados en el futuro. Cada flujo de trabajo tiene un requisito de calidad de servicio (QoS) que debe completarse dentro de un número específico de unidades de tiempo (por ejemplo, del orden de segundos, como se detalla en la sección de Experimentos). Una vez completado (o fallido), se asigna un valor comercial al flujo de trabajo. Extendimos este enfoque aún más y consideramos diferentes tipos de finalización de flujo de trabajo para modelar niveles diferenciados de QoS que pueden ser aplicados por las empresas (por ejemplo, para proporcionar servicios al cliente escalonados). Decimos que un flujo de trabajo es exitoso si se completa dentro de su requisito de QoS, aceptable si se completa dentro de un factor constante κ 31 de su límite de QoS (en nuestros experimentos elegimos κ=3), o fallido si termina más allá de κ veces su límite de QoS. Para cada categoría, se asigna un puntaje de valor comercial al flujo de trabajo, siendo la categoría exitosa la que recibe la puntuación positiva más alta, seguida por la aceptable y luego la fallida. La distribución de puntos de valor empresarial no es uniforme en los flujos de trabajo, lo que modela casos en los que algunos flujos de trabajo tienen mayor prioridad que otros. Cada tipo de servicio es implementado por varios proveedores de servicios diferentes. Suponemos que los proveedores hacen acuerdos de nivel de servicio (SLAs) para garantizar un nivel de rendimiento definido por el tiempo de finalización de una invocación de servicio web. Aunque los Acuerdos de Nivel de Servicio (SLAs) pueden ser complejos, en este documento asumimos, para simplificar, que las garantías pueden adoptar la forma de una degradación lineal del rendimiento bajo carga. Esta garantía está definida por varios parámetros: α es el tiempo de finalización esperado (por ejemplo, del orden de segundos) si la carga de trabajo asignada de las solicitudes de servicio web es menor o igual a β, la concurrencia máxima, y si la carga de trabajo es mayor que β, la finalización esperada para una carga de trabajo de tamaño ω es α + γ(ω − β) donde γ es un coeficiente fraccional. En nuestros experimentos variamos α, β y γ con diferentes distribuciones. Idealmente, todos los flujos de trabajo podrían finalizar dentro de sus límites de calidad de servicio (QoS) y, por lo tanto, maximizar el valor empresarial agregado en todos los flujos de trabajo. Sin embargo, debido a que modelamos a los proveedores de servicios con un rendimiento degradante bajo carga, no todos los flujos de trabajo alcanzarán su límite de calidad de servicio (QoS): fácilmente puede darse el caso de que los procesos comerciales sean asignados a proveedores que están sobrecargados y no pueden completarse dentro del límite de calidad de servicio respectivo de los flujos de trabajo. El problema clave de investigación, entonces, es asignar los procesos comerciales a los proveedores de servicios web con el objetivo de optimizar el valor comercial agregado de todos los flujos de trabajo. Dado que el alcance de la optimización es el conjunto completo de flujos de trabajo, puede ser que las mejores asignaciones de programación resulten en que algunos flujos de trabajo tengan que fallar para que otros tengan éxito. Esta observación intuitiva sugiere que enfoques de programación tradicionales como el round-robin o asignaciones proporcionales no funcionarán bien, lo cual es lo que observamos y discutimos en la Sección 4. Por otro lado, una búsqueda exhaustiva de todas las posibles asignaciones encontrará el mejor horario, pero la complejidad computacional es prohibitivamente alta. Supongamos que hay W flujos de trabajo con un promedio de B procesos de negocio por flujo de trabajo. Además, en el peor de los casos, cada proceso empresarial solicita un tipo de servicio, para el cual hay P proveedores. Por lo tanto, hay W · PB combinaciones para explorar y encontrar las asignaciones óptimas de procesos comerciales a proveedores. Incluso para configuraciones pequeñas (por ejemplo, Dado que (W=10, B=5, P=10), el tiempo computacional para la búsqueda exhaustiva es significativo, y en nuestro trabajo buscamos ajustar estos parámetros. En la siguiente subsección, discuta cómo se puede utilizar un algoritmo de búsqueda genética para converger hacia las asignaciones de programación óptimas. 3.2 Algoritmo genético Dado un espacio de búsqueda exponencial de asignaciones de procesos comerciales a proveedores de servicios web, el problema es encontrar la asignación óptima que produzca el valor comercial agregado más alto en general en todos los flujos de trabajo. Para explorar el espacio de soluciones, utilizamos un algoritmo genético (GA) que simula la selección natural darwiniana al hacer que los miembros de una población compitan por sobrevivir para transmitir sus cromosomas genéticos a la siguiente generación; después de generaciones sucesivas, hay una tendencia a que los cromosomas converjan hacia la mejor combinación. Aunque existen otras heurísticas de búsqueda que pueden resolver problemas de optimización (por ejemplo, recocido simulado o escalada de colina más empinada), el problema de programación de procesos empresariales se adapta bien a un AG porque las soluciones potenciales pueden representarse en forma de matriz y nos permite utilizar investigaciones previas en la recombinación efectiva de cromosomas de AG para formar nuevos miembros de la población (por ejemplo, [2]). 0 1 2 3 4 0 1 2 0 2 1 1 0 1 0 1 0 2 1 2 0 0 1 Figura 2: Un ejemplo de cromosoma que representa una asignación de programación de (flujo de trabajo, tipo de servicio) → proveedor de servicios. Cada fila representa un flujo de trabajo, y cada columna representa un tipo de servicio. Por ejemplo, aquí hay 3 flujos de trabajo (0 a 2) y 5 tipos de servicio (0 a 4). En el flujo de trabajo 0, cualquier solicitud de tipo de servicio 3 se dirige al proveedor 2. Ten en cuenta que el identificador del proveedor de servicios se encuentra dentro de un rango limitado a su tipo de servicio (es decir, su columna), por lo que el 2 listado para el tipo de servicio 3 es un servidor diferente al servidor 2 en otras columnas. Representación cromosómica de una solución. En la Figura 2 mostramos un ejemplo de cromosoma que codifica una asignación de programación. La representación es una matriz bidimensional que mapea {flujo de trabajo, tipo de servicio} a un proveedor de servicios. Para un proceso de negocio en el flujo de trabajo i y utilizando el tipo de servicio j, la entrada (i, j)-ésima en la tabla es el identificador del proveedor de servicios al que se asigna el proceso de negocio. Ten en cuenta que el identificador del proveedor de servicios se encuentra dentro de un rango limitado a su tipo de servicio. Ejecución de GA. Un algoritmo genético procede de la siguiente manera. Inicialmente se crea un conjunto aleatorio de cromosomas para la población. Los cromosomas son evaluados (hasheados) según alguna métrica, y los mejores son elegidos para ser padres. En nuestro problema, la evaluación produce el valor neto del negocio en todos los flujos de trabajo después de ejecutar todos los procesos comerciales una vez que se asignan a sus respectivos proveedores de servicios de acuerdo con el mapeo en el cromosoma. Los padres se recombinan para producir hijos, simulando un cruce sexual, y ocasionalmente puede surgir una mutación que produce nuevas características que no estaban disponibles en ninguno de los padres. La idea principal es que nos gustaría que los niños fueran diferentes de los padres (para explorar más del espacio de soluciones) pero no demasiado diferentes (para contener las porciones del cromosoma que resultan en asignaciones de programación exitosas). Ten en cuenta que encontrar el óptimo global no está garantizado debido a que la recombinación y la mutación son estocásticas. Recombinación y mutación de ADN. Como se mencionó, los cromosomas son matrices bidimensionales que representan asignaciones de horarios. Para simular la recombinación sexual de dos cromosomas para producir un nuevo cromosoma hijo, aplicamos un esquema de cruce de un punto dos veces (una vez a lo largo de cada dimensión). El cruce se explica mejor por analogía al espacio cartesiano de la siguiente manera. Se elige un punto al azar en la matriz para que sea la coordenada (0, 0). Los elementos de la matriz de los cuadrantes II y IV del primer progenitor y los elementos de los cuadrantes I y III del segundo progenitor se utilizan para crear el nuevo hijo. Este enfoque sigue las mejores prácticas de los algoritmos genéticos al mantener juntos los segmentos cromosómicos contiguos a medida que se transmiten de padre a hijo. El esquema de mutación de uni-cromosoma cambia aleatoriamente una de las asignaciones de proveedor de servicios a otro proveedor dentro del rango disponible. Otros esquemas de recombinación y mutación son un área de investigación en la comunidad de AG, y buscamos explorar nuevos operadores en trabajos futuros. Función de evaluación de GA. Un componente importante de los algoritmos genéticos es la función de evaluación. Dada una cromosoma particular que representa un mapeo de programación, la función calcula de manera determinista el valor neto del negocio en todas las cargas de trabajo. Los procesos comerciales en cada carga de trabajo se asignan a proveedores de servicios, y el tiempo de finalización de cada proveedor se calcula en función de la garantía del acuerdo de servicio utilizando los parámetros mencionados en la Sección 3.1, a saber, el tiempo de finalización sin carga α, la máxima concurrencia β y un coeficiente γ que controla la degradación del rendimiento lineal bajo carga pesada. Ten en cuenta que la función de evaluación puede ser fácilmente reemplazada si se desea; por ejemplo, otras funciones de evaluación pueden modelar diferentes garantías de proveedores de servicios o flujos de trabajo paralelos. 4. EXPERIMENTOS Y RESULTADOS En esta sección mostramos el beneficio de utilizar nuestro planificador basado en algoritmos genéticos. Debido a que queríamos escalar los escenarios a un gran número de flujos de trabajo (hasta 1000 en nuestros experimentos), implementamos un programa de simulación que nos permitió variar parámetros y medir los resultados con diferentes métricas. El simulador fue escrito en C++ estándar y se ejecutó en un ordenador de escritorio Linux (Fedora Core) con una velocidad de 2.8 GHz y 1GB de RAM. Comparamos nuestro algoritmo con candidatos alternativos: • Un algoritmo de round-robin bien conocido que asigna cada proceso comercial de forma circular a los proveedores de servicios para un tipo de servicio en particular. Este enfoque proporciona el esquema más simple para el equilibrio de carga. • Un algoritmo aleatorio-proporcional que asigna proporcionalmente los procesos comerciales a los proveedores de servicios; es decir, para un tipo de servicio dado, los proveedores de servicios se clasifican según su tiempo de finalización garantizado, y los procesos comerciales se asignan proporcionalmente a los proveedores en función de su tiempo de finalización. (También probamos un esquema de proporcionalidad basado tanto en los tiempos de finalización como en la concurrencia máxima, pero obtuvimos los mismos resultados, por lo que solo se muestran los resultados de los esquemas anteriores aquí.) • Un algoritmo codicioso de hombre de paja que siempre asigna los procesos comerciales al proveedor de servicios que tiene el tiempo de finalización garantizado más rápido. Este algoritmo representa un enfoque ingenuo basado en observaciones avaras y locales de cada flujo de trabajo sin tener en cuenta todos los flujos de trabajo. En los experimentos que siguen, todos los resultados fueron promediados a lo largo de 20 pruebas, y para ayudar a normalizar los efectos de la aleatorización utilizada durante el AG, cada prueba comenzó leyendo datos preinicializados desde el disco. En la Tabla 1 enumeramos nuestros parámetros experimentales. En la Figura 3 mostramos los resultados de ejecutar nuestro AG contra las tres alternativas candidatas. El eje x muestra el número de flujos de trabajo escalado a 1000, y el eje y muestra el valor comercial agregado de todos los flujos de trabajo. Como se puede ver, el algoritmo genético produce consistentemente el mayor valor comercial incluso a medida que aumenta el número de flujos de trabajo; con 1000 flujos de trabajo, el algoritmo genético produce una mejora del 115% sobre la siguiente mejor alternativa. (Tenga en cuenta que aunque estamos optimizando en función de la métrica de valor comercial que definimos anteriormente, los algoritmos genéticos pueden converger hacia el valor óptimo de cualquier métrica, siempre y cuando la función de evaluación pueda medir de manera consistente el valor de un cromosoma con esa métrica). Como era de esperar, el algoritmo codicioso tiene un rendimiento muy pobre porque hace el peor trabajo en equilibrar la carga: todos los procesos comerciales de un tipo de servicio dado se asignan a un solo servidor (el que se anuncia como el que tiene el tiempo de finalización más rápido), y a medida que llegan más procesos comerciales, el rendimiento de los proveedores se degrada linealmente. El esquema de round-robin es inicialmente superado por el esquema proporcional aleatorio hasta alrededor de 120 flujos de trabajo (como se muestra en el gráfico ampliado de la Figura 4), pero a medida que aumenta el número de flujos de trabajo, el esquema de round-robin gana consistentemente sobre el proporcional aleatorio. La razón es que aunque el esquema aleatorio-proporcional asigna procesos comerciales a proveedores proporcionalmente según los tiempos de finalización anunciados (que es una medida del poder del proveedor de servicios), incluso los mejores proveedores eventualmente alcanzarán una concurrencia máxima del mundo real para la gran cantidad de flujos de trabajo que estamos considerando. Para un número muy grande de flujos de trabajo, el esquema de round-robin es capaz de equilibrar mejor la carga entre todos los proveedores de servicios. Para comprender mejor el comportamiento resultante de las asignaciones de programación, mostramos los resultados de finalización del flujo de trabajo en las Figuras 5, 6 y 7 para 100, 500 y 900 flujos de trabajo, respectivamente. Estas cifras muestran el porcentaje de flujos de trabajo que son exitosos (pueden completarse dentro de su límite de QoS), aceptables (pueden completarse dentro de κ=3 veces su límite de QoS) y fallidos (no pueden completarse dentro de κ=3 veces su límite de QoS). El GA produce consistentemente el mayor porcentaje de flujos de trabajo exitosos (lo que resulta en valores comerciales más altos para el conjunto agregado de flujos de trabajo). Además, el esquema de round-robin produce mejores resultados que el proporcional-aleatorio para un gran número de flujos de trabajo, pero no tiene un rendimiento tan bueno como el algoritmo genético. En la Figura 8 graficamos el makespan resultante de los mismos experimentos anteriores. Makespan es una métrica tradicional de la comunidad de programación de trabajos que mide el tiempo transcurrido para que se complete el último trabajo. Aunque útil, no captura la métrica de valor empresarial de alto nivel contra la que estamos optimizando. De hecho, el makespan no tiene en cuenta el hecho de que proporcionamos múltiples niveles de finalización (exitoso, aceptable y fallido) y asignamos puntajes de valor comercial en consecuencia. Para completar, señalamos que el algoritmo genético proporciona el makespan más rápido, pero es igualado por el algoritmo de round robin. El algoritmo genético produce mejores valores comerciales (como se muestra en la Figura 3) porque es capaz de explorar el espacio de soluciones para encontrar mejores asignaciones que generen flujos de trabajo más exitosos (como se muestra en las Figuras 5 a 7). También analizamos el efecto de los algoritmos de programación en el equilibrio de la carga. La Figura 9 muestra el porcentaje de proveedores de servicios que fueron accedidos mientras se ejecutaban los flujos de trabajo. Como era de esperar, el algoritmo codicioso siempre elige a un proveedor de servicios; por otro lado, el algoritmo de round-robin es el más rápido para distribuir el negocio. 33 Parámetro experimental Comentario Flujos de trabajo 5 a 1000 Procesos de negocio por flujo de trabajo aleatorio uniforme: 1 - 10 Tipos de servicio 10 Proveedores de servicios por tipo de servicio aleatorio uniforme: 1 - 10 Objetivo de QoS del flujo de trabajo aleatorio uniforme: 10-30 segundos Tiempo de finalización del proveedor de servicios (α) aleatorio uniforme: 1 - 12 segundos Máxima concurrencia del proveedor de servicios (β) aleatorio uniforme: 1 - 12 Coeficiente de degradación del proveedor de servicios (γ) aleatorio uniforme: 0.1 - 0.9 Valor de negocio para flujos de trabajo exitosos aleatorio uniforme: 10 - 50 puntos Valor de negocio para flujos de trabajo aceptables aleatorio uniforme: 0 - 10 puntos Valor de negocio para flujos de trabajo fallidos aleatorio uniforme: -10 - 0 puntos GA: número de padres 20 GA: número de hijos 80 GA: número de generaciones 1000 Tabla 1: Parámetros experimentales Fallido Aceptable (completado pero no dentro de QoS) Exitoso (completado dentro de QoS) 0% 20% 40% 60% 80% 100% RoundRobinRandProportionalGreedyGeneticAlg Porcentaje de todos los flujos de trabajo Comportamiento del flujo de trabajo, 100 flujos de trabajo Figura 5: Comportamiento del flujo de trabajo para 100 flujos de trabajo. Fracaso Aceptable (completado pero no dentro de QoS) Exitoso (completado dentro de QoS) 0% 20% 40% 60% 80% 100% RoundRobinRandProportionalGreedyGeneticAlg Porcentaje de todos los flujos de trabajo Comportamiento del flujo de trabajo, 500 flujos de trabajo Figura 6: Comportamiento del flujo de trabajo para 500 flujos de trabajo. Fracaso Aceptable (completado pero no dentro de QoS) Exitoso (completado dentro de QoS) 0% 20% 40% 60% 80% 100% RoundRobinRandProportionalGreedyGeneticAlg Porcentaje de todos los flujos de trabajo Comportamiento del flujo de trabajo, 500 flujos de trabajo Figura 7: Comportamiento del flujo de trabajo para 900 flujos de trabajo. 0 50 100 150 200 250 300 0 200 400 600 800 1000 Tiempo total [segundos] Número de flujos de trabajo Tiempo máximo de finalización para todos los flujos de trabajo Algoritmo genético Round robin Proporcional aleatorio Codicioso Figura 8: Tiempo máximo de finalización para todos los flujos de trabajo. Este valor es la métrica makespan utilizada en la investigación de programación tradicional. Aunque útil, el makespan no tiene en cuenta la puntuación del valor comercial en nuestro dominio de problemas. La Figura 10 muestra el porcentaje de proveedores de servicios accedidos (es decir, el porcentaje de proveedores de servicios representados en la Figura 9) que tenían más procesos comerciales asignados que su concurrencia máxima anunciada. Por ejemplo, en el algoritmo voraz solo se utiliza un proveedor de servicios, y este proveedor se satura rápidamente. Por otro lado, el algoritmo aleatorio-proporcional utiliza muchos proveedores de servicios, pero debido a que los procesos comerciales se asignan de manera proporcional con más asignaciones yendo a los mejores proveedores, hay una tendencia a que un menor porcentaje de proveedores se saturen. Para completitud, mostramos el rendimiento del algoritmo genético en sí mismo en la Figura 11. El algoritmo escala linealmente con un aumento en el número de flujos de trabajo. Observamos que los algoritmos round-robin, random-proportional y greedy terminaron en menos de 1 segundo incluso para la configuración de flujo de trabajo más grande. Sin embargo, consideramos que el beneficio de encontrar puntajes de valor empresarial mucho más altos justifica el tiempo de ejecución del algoritmo genético; además, esperaríamos que el tiempo de ejecución mejore tanto con la optimización del software como con un ordenador más rápido que nuestro PC estándar. CONCLUSIÓN Los procesos comerciales dentro de los flujos de trabajo pueden ser orquestados para acceder a servicios web. En este artículo estudiamos la provisión de servicios de múltiples niveles, donde las solicitudes de servicios web a tipos de servicios pueden ser asignadas a diferentes proveedores de servicios. El problema resultante es que para poder soportar un gran número de flujos de trabajo, la asignación de procesos de negocio a proveedores de servicios web debe ser inteligente. Utilizamos una métrica de valor empresarial para medir el 0.2 0.4 0.6 0.8 1 0 200 400 600 800 1000 Porcentaje de todos los proveedores de servicios Número de flujos de trabajo Proveedores de servicios utilizados Algoritmo genético Round robin Proporcional aleatorio Ávido Figura 9: El porcentaje de proveedores de servicios utilizados durante las ejecuciones de carga de trabajo. El algoritmo Greedy siempre elige al mismo proveedor de servicios, mientras que el algoritmo Round Robin distribuye las solicitudes de manera uniforme entre los proveedores. 0 0.2 0.4 0.6 0.8 1 0 200 400 600 800 1000 Porcentaje de todos los proveedores de servicios Número de flujos de trabajo Proveedores saturados Algoritmo genético Round robin Proporcional aleatorio Greedy Figura 10: El porcentaje de proveedores de servicios que están saturados entre aquellos proveedores que fueron utilizados (es decir, el porcentaje de proveedores de servicios representados en la Figura 9). Un proveedor de servicios saturado es aquel cuya carga de trabajo es mayor que su concurrencia máxima anunciada. Dado que el espacio de soluciones de los mapeos de programación es exponencial, utilizamos un algoritmo de búsqueda genética para explorar el espacio y converger hacia el mejor horario. Con una configuración predeterminada para todos los parámetros y utilizando nuestra puntuación de valor empresarial, el GA produjo hasta un 115% de mejora en el valor empresarial sobre el siguiente mejor algoritmo. Finalmente, debido a que un algoritmo genético convergerá hacia el valor óptimo utilizando cualquier métrica (incluso diferente a la métrica de valor empresarial que utilizamos), creemos que nuestro enfoque tiene un fuerte potencial para trabajos futuros. En trabajos futuros, buscamos adquirir trazas del mundo real de instancias de servicios web para obtener mejores estimaciones de las garantías de acuerdo de servicio, aunque esperamos que tales garantías entre los proveedores y sus consumidores no estén generalmente disponibles para el público. También analizaremos otras métricas de calidad de servicio (QoS) como el uso de CPU y E/S. Por ejemplo, podemos analizar los costos de transferencia con diferentes anchos de banda, latencia, tamaño de datos y distribución de datos. Además, esperamos mejorar nuestro algoritmo genético y compararlo con más alternativas de programación. Finalmente, dado que nuestro trabajo es complementario al trabajo existente en coreografía de servicios web (porque dependemos de flujos de trabajo preconfigurados), buscamos integrar nuestro enfoque con los sistemas de flujo de trabajo de servicios web disponibles expresados en BPEL. 6. REFERENCIAS [1] A. Ankolekar, et al. DAML-S: Marcado Semántico para Servicios Web, En Proc. del Simposio Internacional de Trabajo de la Web Semántica, 2001. [2] L. Davis. Programación de taller con algoritmos genéticos, En Proc. de la Conferencia Internacional sobre Algoritmos Genéticos, 1985. [3] H.-L. Fang, P. Ross y D. Corne. Un Enfoque Prometedor de Algoritmo Genético para Problemas de Programación de Taller de Trabajo, Re-programación y Programación de Taller Abierto, En Actas de la 5ta Conferencia Internacional sobre Algoritmos Genéticos, 1993. [4] M. Gary y D. Johnson. Computadoras e Intractabilidad: Una Guía de la Teoría de NP-Completitud, Freeman, 1979. [5] J. Holland. Adaptación en Sistemas Naturales y Artificiales: Un Análisis Introductorio con Aplicaciones a la Biología, Control e Inteligencia Artificial, MIT Press, 1992. [6] D. Goldberg. Algoritmos Genéticos en Búsqueda, Optimización y Aprendizaje Automático, Kluwer Academic Publishers, 1989. [7] Procesos de Negocio en un Mundo de Servicios Web, www-128.ibm.com/developerworks/webservices/library/ws-bpelwp/. [8] G. Soundararajan, K. Manassiev, J. Chen, A. Goel y C. Amza. Bases de datos de back-end en clústeres de servidores de contenido dinámico compartido, En Proc. de la Conferencia Internacional de Computación Autónoma de IEEE, 2005. [9] B. Srivastava y J. Koehler. Composición de Servicios Web: Soluciones Actuales y Problemas Abiertos, ICAP, 2003. [10] B. Urgaonkar, P. Shenoy, A. Chandra y P. Goyal. Provisión dinámica de aplicaciones de Internet de múltiples niveles, En Proc. de la Conferencia Internacional de IEEE sobre Computación Autónoma, 2005. [11] L. Zeng, B. Benatallah, M. Dumas, J. Kalagnanam y Q. Sheng. Composición de Servicios Web Impulsada por la Calidad, En Proc. de la Conferencia WWW, 2003. 35 ",
            "candidates": [],
            "error": [
                [
                    ""
                ]
            ]
        },
        "multi-organisation environment": {
            "translated_key": "entorno multinivel y multiorganizacional",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Heuristics-Based Scheduling of Composite Web Service Workloads Thomas Phan Wen-Syan Li IBM Almaden Research Center 650 Harry Rd.",
                "San Jose, CA 95120 {phantom,wsl}@us.ibm.com ABSTRACT Web services can be aggregated to create composite workflows that provide streamlined functionality for human users or other systems.",
                "Although industry standards and recent research have sought to define best practices and to improve end-to-end workflow composition, one area that has not fully been explored is the scheduling of a workflows web service requests to actual service provisioning in a multi-tiered, <br>multi-organisation environment</br>.",
                "This issue is relevant to modern business scenarios where business processes within a workflow must complete within QoS-defined limits.",
                "Because these business processes are web service consumers, service requests must be mapped and scheduled across multiple web service providers, each with its own negotiated service level agreement.",
                "In this paper we provide heuristics for scheduling service requests from multiple business process workflows to web service providers such that a business value metric across all workflows is maximised.",
                "We show that a genetic search algorithm is appropriate to perform this scheduling, and through experimentation we show that our algorithm scales well up to a thousand workflows and produces better mappings than traditional approaches.",
                "Categories and Subject Descriptors C.2.4 [Computer-Communication Networks]: Distributed Systems-distributed applications; D.2.8 [Software Engineering]: Metrics-complexity measures, performance measures 1.",
                "INTRODUCTION Web services can be composed into workflows to provide streamlined end-to-end functionality for human users or other systems.",
                "Although previous research efforts have looked at ways to intelligently automate the composition of web services into workflows (e.g. [1, 9]), an important remaining problem is the assignment of web service requests to the underlying web service providers in a multi-tiered runtime scenario within constraints.",
                "In this paper we address this scheduling problem and examine means to manage a large number of business process workflows in a scalable manner.",
                "The problem of scheduling web service requests to providers is relevant to modern business domains that depend on multi-tiered service provisioning.",
                "Consider the example shown in Figure 1 that illustrates our problem space.",
                "Workflows comprise multiple related business processes that are web service consumers; here we assume that the workflows represent requested service from customers or automated systems and that the workflow has already been composed with an existing choreography toolkit.",
                "These workflows are then submitted to a portal (not shown) that acts as a scheduling agent between the web service consumers and the web service providers.",
                "In this example, a workflow could represent the actions needed to instantiate a vacation itinerary, where one business process requests booking an airline ticket, another business process requests a hotel room, and so forth.",
                "Each of these requests target a particular service type (e.g. airline reservations, hotel reservations, car reservations, etc. ), and for each service type, there are multiple instances of service providers that publish a web service interface.",
                "An important challenge is that the workflows must meet some quality-of-service (QoS) metric, such as end-to-end completion time of all its business processes, and that meeting or failing this goal results in the assignment of a quantitative business value metric for the workflow; intuitively, it is desired that all workflows meet their respective QoS goals.",
                "We further leverage the notion that QoS service agreements are generally agreed-upon between the web service providers and the scheduling agent such that the providers advertise some level of guaranteed QoS to the scheduler based upon runtime conditions such as turnaround time and maximum available concurrency.",
                "The resulting problem is then to schedule and assign the business processes requests for service types to one of the service providers for that type.",
                "The scheduling must be done such that the aggregate business value across all the workflows is maximised.",
                "In Section 3 we state the scenario as a combinatorial problem and utilise a genetic search algorithm [5] to find the best assignment of web service requests to providers.",
                "This approach converges towards an assignment that maximises the overall business value for all the workflows.",
                "In Section 4 we show through experimentation that this search heuristic finds better assignments than other algorithms (greedy, round-robin, and proportional).",
                "Further, this approach allows us to scale the number of simultaneous workflows (up to one thousand workflows in our experiments) and yet still find effective schedules. 2.",
                "RELATED WORK In the context of service assignment and scheduling, [11] maps web service calls to potential servers using linear programming, but their work is concerned with mapping only single workflows; our principal focus is on scalably scheduling multiple workflows (up 30 Service Type SuperHotels.com Business Process Business Process Workflow ... Business Process Business Process ... HostileHostels.com IncredibleInns.com Business Process Business Process Business Process ... Business Process Service Provider SkyHighAirlines.com SuperCrazyFlights.com Business Process . . . . . .",
                "Advertised QoS Service Agreement CarRentalService.com Figure 1: An example scenario demonstrating the interaction between business processes in workflows and web service providers.",
                "Each business process accesses a service type and is then mapped to a service provider for that type. to one thousand as we show later) using different business metrics and a search heuristic. [10] presents a dynamic provisioning approach that uses both predictive and reactive techniques for multi-tiered Internet application delivery.",
                "However, the provisioning techniques do not consider the challenges faced when there are alternative query execution plans and replicated data sources. [8] presents a feedback-based scheduling mechanism for multi-tiered systems with back-end databases, but unlike our work, it assumes a tighter coupling between the various components of the system.",
                "Our work also builds upon prior scheduling research.",
                "The classic job-shop scheduling problem, shown to be NP-complete [4] [3], is similar to ours in that tasks within a job must be scheduled onto machinery (c.f. our scenario is that business processes within a workflow must be scheduled onto web service providers).",
                "The salient differences are that the machines can process only one job at a time (we assume servers can multi-task but with degraded performance and a maximum concurrency level), tasks within a job cannot simultaneously run on different machines (we assume business processes can be assigned to any available server), and the principal metric of performance is the makespan, which is the time for the last task among all the jobs to complete (and as we show later, optimising on the makespan is insufficient for scheduling the business processes, necessitating different metrics). 3.",
                "DESIGN In this section we describe our model and discuss how we can find scheduling assignments using a genetic search algorithm. 3.1 Model We base our model on the simplified scenario shown in Figure 1.",
                "Specifically, we assume that users or automated systems request the execution of a workflow.",
                "The workflows comprise business processes, each of which makes one web service invocation to a service type.",
                "Further, business processes have an ordering in the workflow.",
                "The arrangement and execution of the business processes and the data flow between them are all managed by a composition or choreography tool (e.g. [1, 9]).",
                "Although composition languages can use sophisticated flow-control mechanisms such as conditional branches, for simplicity we assume the processes execute sequentially in a given order.",
                "This scenario can be naturally extended to more complex relationships that can be expressed in BPEL [7], which defines how business processes interact, messages are exchanged, activities are ordered, and exceptions are handled.",
                "Due to space constraints, we focus on the problem space presented here and will extend our model to more advanced deployment scenarios in the future.",
                "Each workflow has a QoS requirement to complete within a specified number of time units (e.g. on the order of seconds, as detailed in the Experiments section).",
                "Upon completion (or failure), the workflow is assigned a business value.",
                "We extended this approach further and considered different types of workflow completion in order to model differentiated QoS levels that can be applied by businesses (for example, to provide tiered customer service).",
                "We say that a workflow is successful if it completes within its QoS requirement, acceptable if it completes within a constant factor κ 31 of its QoS bound (in our experiments we chose κ=3), or failing if it finishes beyond κ times its QoS bound.",
                "For each category, a business value score is assigned to the workflow, with the successful category assigned the highest positive score, followed by acceptable and then failing.",
                "The business value point distribution is non-uniform across workflows, further modelling cases where some workflows are of higher priority than others.",
                "Each service type is implemented by a number of different service providers.",
                "We assume that the providers make service level agreements (SLAs) to guarantee a level of performance defined by the completion time for completing a web service invocation.",
                "Although SLAs can be complex, in this paper we assume for simplicity that the guarantees can take the form of a linear performance degradation under load.",
                "This guarantee is defined by several parameters: α is the expected completion time (for example, on the order of seconds) if the assigned workload of web service requests is less than or equal to β, the maximum concurrency, and if the workload is higher than β, the expected completion for a workload of size ω is α+ γ(ω − β) where γ is a fractional coefficient.",
                "In our experiments we vary α, β, and γ with different distributions.",
                "Ideally, all workflows would be able to finish within their QoS limits and thus maximise the aggregate business value across all workflows.",
                "However, because we model service providers with degrading performance under load, not all workflows will achieve their QoS limit: it may easily be the case that business processes are assigned to providers who are overloaded and cannot complete within the respective workflows QoS limit.",
                "The key research problem, then, is to assign the business processes to the web service providers with the goal of optimising on the aggregate business value of all workflows.",
                "Given that the scope of the optimisation is the entire set of workflows, it may be that the best scheduling assignments may result in some workflows having to fail in order for more workflows to succeed.",
                "This intuitive observation suggests that traditional scheduling approaches such as round-robin or proportional assignments will not fare well, which is what we observe and discuss in Section 4.",
                "On the other hand, an exhaustive search of all the possible assignments will find the best schedule, but the computational complexity is prohibitively high.",
                "Suppose there are W workflows with an average of B business processes per workflow.",
                "Further, in the worst case each business process requests one service type, for which there are P providers.",
                "There are thus W · PB combinations to explore to find the optimal assignments of business processes to providers.",
                "Even for small configurations (e.g.",
                "W =10, B=5, P=10), the computational time for exhaustive search is significant, and in our work we look to scale these parameters.",
                "In the next subsection, discuss how a genetic search algorithm can be used to converge toward the optimum scheduling assignments. 3.2 Genetic algorithm Given an exponential search space of business process assignments to web service providers, the problem is to find the optimal assignment that produces the overall highest aggregate business value across all workflows.",
                "To explore the solution space, we use a genetic algorithm (GA) search heuristic that simulates Darwinian natural selection by having members of a population compete to survive in order to pass their genetic chromosomes onto the next generation; after successive generations, there is a tendency for the chromosomes to converge toward the best combination [5] [6].",
                "Although other search heuristics exist that can solve optimization problems (e.g. simulated annealing or steepest-ascent hillclimbing), the business process scheduling problem fits well with a GA because potential solutions can be represented in a matrix form and allows us to use prior research in effective GA chromosome recombination to form new members of the population (e.g. [2]). 0 1 2 3 4 0 1 2 0 2 1 1 0 1 0 1 0 2 1 2 0 0 1 Figure 2: An example chromosome representing a scheduling assignment of (workflow,service type) → service provider.",
                "Each row represents a workflow, and each column represents a service type.",
                "For example, here there are 3 workflows (0 to 2) and 5 service types (0 to 4).",
                "In workflow 0, any request for service type 3 goes to provider 2.",
                "Note that the service provider identifier is within a range limited to its service type (i.e. its column), so the 2 listed for service type 3 is a different server from server 2 in other columns.",
                "Chromosome representation of a solution.",
                "In Figure 2 we show an example chromosome that encodes one scheduling assignment.",
                "The representation is a 2-dimensional matrix that maps {workflow, service type} to a service provider.",
                "For a business process in workflow i and utilising service type j, the (i, j)th entry in the table is the identifier for the service provider to which the business process is assigned.",
                "Note that the service provider identifier is within a range limited to its service type.",
                "GA execution.",
                "A GA proceeds as follows.",
                "Initially a random set of chromosomes is created for the population.",
                "The chromosomes are evaluated (hashed) to some metric, and the best ones are chosen to be parents.",
                "In our problem, the evaluation produces the net business value across all workflows after executing all business processes once they are assigned to their respective service providers according to the mapping in the chromosome.",
                "The parents recombine to produce children, simulating sexual crossover, and occasionally a mutation may arise which produces new characteristics that were not available in either parent.",
                "The principal idea is that we would like the children to be different from the parents (in order to explore more of the solution space) yet not too different (in order to contain the portions of the chromosome that result in good scheduling assignments).",
                "Note that finding the global optimum is not guaranteed because the recombination and mutation are stochastic.",
                "GA recombination and mutation.",
                "As mentioned, the chromosomes are 2-dimensional matrices that represent scheduling assignments.",
                "To simulate sexual recombination of two chromosomes to produce a new child chromosome, we applied a one-point crossover scheme twice (once along each dimension).",
                "The crossover is best explained by analogy to Cartesian space as follows.",
                "A random point is chosen in the matrix to be coordinate (0, 0).",
                "Matrix elements from quadrants II and IV from the first parent and elements from quadrants I and III from the second parent are used to create the new child.",
                "This approach follows GA best practices by keeping contiguous chromosome segments together as they are transmitted from parent to child.",
                "The uni-chromosome mutation scheme randomly changes one of the service provider assignments to another provider within the available range.",
                "Other recombination and mutation schemes are an area of research in the GA community, and we look to explore new operators in future work.",
                "GA evaluation function.",
                "An important GA component is the evaluation function.",
                "Given a particular chromosome representing one scheduling mapping, the function deterministically calculates the net business value across all workloads.",
                "The business processes in each workload are assigned to service providers, and each providers completion time is calculated based on the service agreement guarantee using the parameters mentioned in Section 3.1, namely the unloaded completion time α, the maximum concur32 rency β, and a coefficient γ that controls the linear performance degradation under heavy load.",
                "Note that the evaluation function can be easily replaced if desired; for example, other evaluation functions can model different service provider guarantees or parallel workflows. 4.",
                "EXPERIMENTS AND RESULTS In this section we show the benefit of using our GA-based scheduler.",
                "Because we wanted to scale the scenarios up to a large number of workflows (up to 1000 in our experiments), we implemented a simulation program that allowed us to vary parameters and to measure the results with different metrics.",
                "The simulator was written in standard C++ and was run on a Linux (Fedora Core) desktop computer running at 2.8 GHz with 1GB of RAM.",
                "We compared our algorithm against alternative candidates: • A well-known round-robin algorithm that assigns each business process in circular fashion to the service providers for a particular service type.",
                "This approach provides the simplest scheme for load-balancing. • A random-proportional algorithm that proportionally assigns business processes to the service providers; that is, for a given service type, the service providers are ranked by their guaranteed completion time, and business processes are assigned proportionally to the providers based on their completion time. (We also tried a proportionality scheme based on both the completion times and maximum concurrency but attained the same results, so only the former schemes results are shown here.) • A strawman greedy algorithm that always assigns business processes to the service provider that has the fastest guaranteed completion time.",
                "This algorithm represents a naive approach based on greedy, local observations of each workflow without taking into consideration all workflows.",
                "In the experiments that follow, all results were averaged across 20 trials, and to help normalise the effects of randomisation used during the GA, each trial started by reading in pre-initialised data from disk.",
                "In Table 1 we list our experimental parameters.",
                "In Figure 3 we show the results of running our GA against the three candidate alternatives.",
                "The x-axis shows the number for workflows scaled up to 1000, and the y-axis shows the aggregate business value for all workflows.",
                "As can be seen, the GA consistently produces the highest business value even as the number of workflows grows; at 1000 workflows, the GA produces a 115% improvement over the next-best alternative. (Note that although we are optimising against the business value metric we defined earlier, genetic algorithms are able to converge towards the optimal value of any metric, as long as the evaluation function can consistently measure a chromosomes value with that metric.)",
                "As expected, the greedy algorithm performs very poorly because it does the worst job at balancing load: all business processes for a given service type are assigned to only one server (the one advertised to have the fastest completion time), and as more business processes arrive, the providers performance degrades linearly.",
                "The round-robin scheme is initially outperformed by the randomproportional scheme up to around 120 workflows (as shown in the magnified graph of Figure 4), but as the number of workflows increases, the round-robin scheme consistently wins over randomproportional.",
                "The reason is that although the random-proportional scheme assigns business processes to providers proportionally according to the advertised completion times (which is a measure of the power of the service provider), even the best providers will eventually reach a real-world maximum concurrency for the large -2000 -1000 0 1000 2000 3000 4000 5000 6000 7000 0 200 400 600 800 1000 Aggregatebusinessvalueacrossallworkflows Total number of workflows Business value scores of scheduling algorithms Genetic algorithm Round robin Random proportional Greedy Figure 3: Net business value scores of different scheduling algorithms. -500 0 500 1000 1500 2000 2500 3000 3500 4000 0 50 100 150 200Aggregatebusinessvalueacrossallworkflows Total number of workflows Business value scores of scheduling algorithms Genetic algorithm Round robin Random proportional Greedy Figure 4: Magnification of the left-most region in Figure 3. number of workflows that we are considering.",
                "For a very large number of workflows, the round-robin scheme is able to better balance the load across all service providers.",
                "To better understand the behaviour resulting from the scheduling assignments, we show the workflow completion results in Figures 5, 6, and 7 for 100, 500, and 900 workflows, respectively.",
                "These figures show the percentage of workflows that are successful (can complete with their QoS limit), acceptable (can complete within κ=3 times their QoS limit), and failed (cannot complete within κ=3 times their QoS limit).",
                "The GA consistently produces the highest percentage of successful workflows (resulting in higher business values for the aggregate set of workflows).",
                "Further, the round-robin scheme produces better results than the random-proportional for a large number of workflows but does not perform as well as the GA.",
                "In Figure 8 we graph the makespan resulting from the same experiments above.",
                "Makespan is a traditional metric from the job scheduling community measuring elapsed time for the last job to complete.",
                "While useful, it does not capture the high-level business value metric that we are optimising against.",
                "Indeed, the makespan is oblivious to the fact that we provide multiple levels of completion (successful, acceptable, and failed) and assign business value scores accordingly.",
                "For completeness, we note that the GA provides the fastest makespan, but it is matched by the round robin algorithm.",
                "The GA produces better business values (as shown in Figure 3) because it is able to search the solution space to find better mappings that produce more successful workflows (as shown in Figures 5 to 7).",
                "We also looked at the effect of the scheduling algorithms on balancing the load.",
                "Figure 9 shows the percentage of services providers that were accessed while the workflows ran.",
                "As expected, the greedy algorithm always hits one service provider; on the other hand, the round-robin algorithm is the fastest to spread the business 33 Experimental parameter Comment Workflows 5 to 1000 Business processes per workflow uniform random: 1 - 10 Service types 10 Service providers per service type uniform random: 1 - 10 Workflow QoS goal uniform random: 10-30 seconds Service provider completion time (α) uniform random: 1 - 12 seconds Service provider maximum concurrency (β) uniform random: 1 - 12 Service provider degradation coefficient (γ) uniform random: 0.1 - 0.9 Business value for successful workflows uniform random: 10 - 50 points Business value for acceptable workflows uniform random: 0 - 10 points Business value for failed workflows uniform random: -10 - 0 points GA: number of parents 20 GA: number of children 80 GA: number of generations 1000 Table 1: Experimental parameters Failed Acceptable (completed but not within QoS) Successful (completed within QoS) 0% 20% 40% 60% 80% 100% RoundRobinRandProportionalGreedyGeneticAlg Percentageofallworkflows Workflow behaviour, 100 workflows Figure 5: Workflow behaviour for 100 workflows.",
                "Failed Acceptable (completed but not within QoS) Successful (completed within QoS) 0% 20% 40% 60% 80% 100% RoundRobinRandProportionalGreedyGeneticAlg Percentageofallworkflows Workflow behaviour, 500 workflows Figure 6: Workflow behaviour for 500 workflows.",
                "Failed Acceptable (completed but not within QoS) Successful (completed within QoS) 0% 20% 40% 60% 80% 100% RoundRobinRandProportionalGreedyGeneticAlg Percentageofallworkflows Workflow behaviour, 500 workflows Figure 7: Workflow behaviour for 900 workflows. 0 50 100 150 200 250 300 0 200 400 600 800 1000 Makespan[seconds] Number of workflows Maximum completion time for all workflows Genetic algorithm Round robin Random proportional Greedy Figure 8: Maximum completion time for all workflows.",
                "This value is the makespan metric used in traditional scheduling research.",
                "Although useful, the makespan does not take into consideration the business value scoring in our problem domain. processes.",
                "Figure 10 is the percentage of accessed service providers (that is, the percentage of service providers represented in Figure 9) that had more assigned business processes than their advertised maximum concurrency.",
                "For example, in the greedy algorithm only one service provider is utilised, and this one provider quickly becomes saturated.",
                "On the other hand, the random-proportional algorithm uses many service providers, but because business processes are proportionally assigned with more assignments going to the better providers, there is a tendency for a smaller percentage of providers to become saturated.",
                "For completeness, we show the performance of the genetic algorithm itself in Figure 11.",
                "The algorithm scales linearly with an increasing number of workflows.",
                "We note that the round-robin, random-proportional, and greedy algorithms all finished within 1 second even for the largest workflow configuration.",
                "However, we feel that the benefit of finding much higher business value scores justifies the running time of the GA; further we would expect that the running time will improve with both software tuning as well as with a computer faster than our off-the-shelf PC. 5.",
                "CONCLUSION Business processes within workflows can be orchestrated to access web services.",
                "In this paper we looked at multi-tiered service provisioning where web service requests to service types can be mapped to different service providers.",
                "The resulting problem is that in order to support a very large number of workflows, the assignment of business process to web service provider must be intelligent.",
                "We used a business value metric to measure the be34 0 0.2 0.4 0.6 0.8 1 0 200 400 600 800 1000 Percentageofallserviceproviders Number of workflows Service providers utilised Genetic algorithm Round robin Random proportional Greedy Figure 9: The percentage of service providers utilized during workload executions.",
                "The Greedy algorithm always hits the one service provider, while the Round Robin algorithm spreads requests evenly across the providers. 0 0.2 0.4 0.6 0.8 1 0 200 400 600 800 1000 Percentageofallserviceproviders Number of workflows Service providers saturated Genetic algorithm Round robin Random proportional Greedy Figure 10: The percentage of service providers that are saturated among those providers who were utilized (that is, percentage of the service providers represented in Figure 9).",
                "A saturated service provider is one whose workload is greater that its advertised maximum concurrency. 0 5 10 15 20 25 0 200 400 600 800 1000 Runningtimeinseconds Total number of workflows Running time of genetic algorithm GA running time Figure 11: Running time of the genetic algorithm. haviour of workflows meeting or failing QoS values, and we optimised our scheduling to maximise the aggregate business value across all workflows.",
                "Since the solution space of scheduler mappings is exponential, we used a genetic search algorithm to search the space and converge toward the best schedule.",
                "With a default configuration for all parameters and using our business value scoring, the GA produced up to 115% business value improvement over the next best algorithm.",
                "Finally, because a genetic algorithm will converge towards the optimal value using any metric (even other than the business value metric we used), we believe our approach has strong potential for continuing work.",
                "In future work, we look to acquire real-world traces of web service instances in order to get better estimates of service agreement guarantees, although we expect that such guarantees between the providers and their consumers are not generally available to the public.",
                "We will also look at other QoS metrics such as CPU and I/O usage.",
                "For example, we can analyse transfer costs with varying bandwidth, latency, data size, and data distribution.",
                "Further, we hope to improve our genetic algorithm and compare it to more scheduler alternatives.",
                "Finally, since our work is complementary to existing work in web services choreography (because we rely on pre-configured workflows), we look to integrate our approach with available web service workflow systems expressed in BPEL. 6.",
                "REFERENCES [1] A. Ankolekar, et al.",
                "DAML-S: Semantic Markup For Web Services, In Proc. of the Intl Semantic Web Working Symposium, 2001. [2] L. Davis.",
                "Job Shop Scheduling with Genetic Algorithms, In Proc. of the Intl Conference on Genetic Algorithms, 1985. [3] H.-L. Fang, P. Ross, and D. Corne.",
                "A Promising Genetic Algorithm Approach to Job-Shop Scheduling, Rescheduling, and Open-Shop Scheduling Problems , In Proc. on the 5th Intl Conference on Genetic Algorithms, 1993. [4] M. Gary and D. Johnson.",
                "Computers and Intractability: A Guide to the Theory of NP-Completeness, Freeman, 1979. [5] J. Holland.",
                "Adaptation in Natural and Artificial Systems: An Introductory Analysis with Applications to Biology, Control, and Artificial Intelligence, MIT Press, 1992. [6] D. Goldberg.",
                "Genetic Algorithms in Search, Optimization and Machine Learning, Kluwer Academic Publishers, 1989. [7] Business Processes in a Web Services World, www-128.ibm.com/developerworks/ webservices/library/ws-bpelwp/. [8] G. Soundararajan, K. Manassiev, J. Chen, A. Goel, and C. Amza.",
                "Back-end Databases in Shared Dynamic Content Server Clusters, In Proc. of the IEEE Intl Conference on Autonomic Computing, 2005. [9] B. Srivastava and J. Koehler.",
                "Web Service Composition Current Solutions and Open Problems, ICAP, 2003. [10] B. Urgaonkar, P. Shenoy, A. Chandra, and P. Goyal.",
                "Dynamic Provisioning of Multi-Tier Internet Applications, In Proc. of the IEEE Intl Conference on Autonomic Computing, 2005. [11] L. Zeng, B. Benatallah, M. Dumas, J. Kalagnanam, and Q. Sheng.",
                "Quality Driven Web Services Composition, In Proc. of the WWW Conference, 2003. 35"
            ],
            "original_annotated_samples": [
                "Although industry standards and recent research have sought to define best practices and to improve end-to-end workflow composition, one area that has not fully been explored is the scheduling of a workflows web service requests to actual service provisioning in a multi-tiered, <br>multi-organisation environment</br>."
            ],
            "translated_annotated_samples": [
                "Aunque los estándares de la industria y la investigación reciente han buscado definir las mejores prácticas y mejorar la composición del flujo de trabajo de extremo a extremo, un área que no ha sido completamente explorada es la programación de las solicitudes de servicios web de los flujos de trabajo para la provisión real de servicios en un <br>entorno multinivel y multiorganizacional</br>."
            ],
            "translated_text": "Programación basada en heurísticas de cargas de trabajo de servicios web compuestos Thomas Phan Wen-Syan Li Centro de Investigación IBM Almaden 650 Harry Rd. Los servicios web pueden ser agregados para crear flujos de trabajo compuestos que proporcionen funcionalidad simplificada para usuarios humanos u otros sistemas. Aunque los estándares de la industria y la investigación reciente han buscado definir las mejores prácticas y mejorar la composición del flujo de trabajo de extremo a extremo, un área que no ha sido completamente explorada es la programación de las solicitudes de servicios web de los flujos de trabajo para la provisión real de servicios en un <br>entorno multinivel y multiorganizacional</br>. Este problema es relevante para los escenarios empresariales modernos donde los procesos comerciales dentro de un flujo de trabajo deben completarse dentro de los límites definidos por la calidad de servicio (QoS). Debido a que estos procesos comerciales son consumidores de servicios web, las solicitudes de servicio deben ser mapeadas y programadas entre múltiples proveedores de servicios web, cada uno con su propio acuerdo de nivel de servicio negociado. En este documento proporcionamos heurísticas para programar solicitudes de servicio de múltiples flujos de trabajo de procesos comerciales a proveedores de servicios web de manera que se maximice una métrica de valor comercial en todos los flujos de trabajo. Mostramos que un algoritmo de búsqueda genética es apropiado para realizar esta programación, y a través de experimentación demostramos que nuestro algoritmo escala bien hasta mil flujos de trabajo y produce mejores asignaciones que enfoques tradicionales. Categorías y Descriptores de Asignaturas C.2.4 [Redes de Computadoras-Comunicación]: Sistemas Distribuidos-aplicaciones distribuidas; D.2.8 [Ingeniería de Software]: Métricas-medidas de complejidad, medidas de rendimiento 1. INTRODUCCIÓN Los servicios web pueden ser compuestos en flujos de trabajo para proporcionar funcionalidad integrada de principio a fin para usuarios humanos u otros sistemas. Aunque los esfuerzos de investigación previos han examinado formas de automatizar de manera inteligente la composición de servicios web en flujos de trabajo (por ejemplo, [1, 9]), un problema importante que aún persiste es la asignación de solicitudes de servicios web a los proveedores de servicios web subyacentes en un escenario de tiempo de ejecución multinivel dentro de ciertas restricciones. En este documento abordamos este problema de programación y examinamos medios para gestionar un gran número de flujos de trabajo de procesos comerciales de manera escalable. El problema de programar solicitudes de servicios web a proveedores es relevante para los dominios comerciales modernos que dependen de la provisión de servicios de múltiples niveles. Considera el ejemplo mostrado en la Figura 1 que ilustra nuestro espacio de problemas. Los flujos de trabajo comprenden múltiples procesos comerciales relacionados que son consumidores de servicios web; aquí asumimos que los flujos de trabajo representan servicios solicitados por clientes o sistemas automatizados y que el flujo de trabajo ya ha sido compuesto con una herramienta de coreografía existente. Estos flujos de trabajo son luego enviados a un portal (no mostrado) que actúa como un agente de programación entre los consumidores del servicio web y los proveedores del servicio web. En este ejemplo, un flujo de trabajo podría representar las acciones necesarias para crear un itinerario de vacaciones, donde un proceso empresarial solicita la reserva de un boleto de avión, otro proceso empresarial solicita una habitación de hotel, y así sucesivamente. Cada una de estas solicitudes apunta a un tipo de servicio en particular (por ejemplo, reservas de aerolíneas, reservas de hoteles, reservas de autos, etc.), y para cada tipo de servicio, hay múltiples instancias de proveedores de servicios que publican una interfaz de servicio web. Un desafío importante es que los flujos de trabajo deben cumplir con alguna métrica de calidad de servicio (QoS), como el tiempo de finalización de extremo a extremo de todos sus procesos comerciales, y que cumplir o no con este objetivo resulta en la asignación de una métrica de valor comercial cuantitativo para el flujo de trabajo; intuitivamente, se desea que todos los flujos de trabajo cumplan con sus respectivos objetivos de QoS. Además, aprovechamos la idea de que los acuerdos de servicio de QoS suelen ser acordados entre los proveedores de servicios web y el agente de programación de tal manera que los proveedores anuncian un cierto nivel de QoS garantizado al programador en función de condiciones de tiempo de respuesta y concurrencia máxima disponible. El problema resultante es entonces programar y asignar las solicitudes de procesos comerciales para tipos de servicio a uno de los proveedores de servicios para ese tipo. La programación debe realizarse de tal manera que se maximice el valor comercial agregado en todos los flujos de trabajo. En la Sección 3 planteamos el escenario como un problema combinatorio y utilizamos un algoritmo de búsqueda genética [5] para encontrar la mejor asignación de solicitudes de servicios web a proveedores. Este enfoque converge hacia una asignación que maximiza el valor comercial general para todos los flujos de trabajo. En la Sección 4 mostramos a través de experimentación que esta heurística de búsqueda encuentra asignaciones mejores que otros algoritmos (codicioso, round-robin y proporcional). Además, este enfoque nos permite escalar el número de flujos de trabajo simultáneos (hasta mil flujos de trabajo en nuestros experimentos) y aún así encontrar horarios efectivos. 2. TRABAJO RELACIONADO En el contexto de asignación y programación de servicios, [11] mapea llamadas de servicios web a servidores potenciales utilizando programación lineal, pero su trabajo se centra en mapear solo flujos de trabajo individuales; nuestro enfoque principal está en programar de manera escalable múltiples flujos de trabajo (hasta 30 tipos de servicios SuperHotels.com Proceso de Negocio Proceso de Negocio Flujo de Trabajo ... Proceso de Negocio Proceso de Negocio ... HostileHostels.com IncredibleInns.com Proceso de Negocio Proceso de Negocio Proceso de Negocio ... Proceso de Negocio Proveedor de Servicios SkyHighAirlines.com SuperCrazyFlights.com Proceso de Negocio . . . . . . Acuerdo de Servicio de Calidad de Servicio (QoS) Publicitado CarRentalService.com Figura 1: Un escenario de ejemplo que muestra la interacción entre procesos comerciales en flujos de trabajo y proveedores de servicios web. Cada proceso empresarial accede a un tipo de servicio y luego se asigna a un proveedor de servicios para ese tipo, a uno mil como mostraremos más adelante, utilizando diferentes métricas empresariales y una heurística de búsqueda. [10] presenta un enfoque de aprovisionamiento dinámico que utiliza técnicas predictivas y reactivas para la entrega de aplicaciones de Internet multinivel. Sin embargo, las técnicas de aprovisionamiento no consideran los desafíos enfrentados cuando hay planes alternativos de ejecución de consultas y fuentes de datos replicadas. [8] presenta un mecanismo de programación basado en retroalimentación para sistemas multinivel con bases de datos de back-end, pero a diferencia de nuestro trabajo, asume un acoplamiento más estrecho entre los diversos componentes del sistema. Nuestro trabajo también se basa en investigaciones previas sobre programación. El problema clásico de programación de talleres, demostrado como NP-completo [4] [3], es similar al nuestro en el sentido de que las tareas dentro de un trabajo deben ser programadas en maquinaria (cf. nuestro escenario es que los procesos comerciales dentro de un flujo de trabajo deben ser programados en proveedores de servicios web). Las diferencias más destacadas son que las máquinas solo pueden procesar un trabajo a la vez (asumimos que los servidores pueden realizar múltiples tareas pero con un rendimiento degradado y un nivel máximo de concurrencia), las tareas dentro de un trabajo no pueden ejecutarse simultáneamente en diferentes máquinas (asumimos que los procesos comerciales pueden asignarse a cualquier servidor disponible), y la métrica principal de rendimiento es el makespan, que es el tiempo que tarda la última tarea de todos los trabajos en completarse (y como mostraremos más adelante, optimizar el makespan no es suficiente para programar los procesos comerciales, lo que requiere diferentes métricas). 3. En esta sección describimos nuestro modelo y discutimos cómo podemos encontrar asignaciones de programación utilizando un algoritmo de búsqueda genética. 3.1 Modelo Basamos nuestro modelo en el escenario simplificado mostrado en la Figura 1. Específicamente, asumimos que los usuarios o sistemas automatizados solicitan la ejecución de un flujo de trabajo. Los flujos de trabajo comprenden procesos comerciales, cada uno de los cuales realiza una invocación de servicio web a un tipo de servicio. Además, los procesos comerciales tienen un orden en el flujo de trabajo. La disposición y ejecución de los procesos comerciales y el flujo de datos entre ellos son gestionados por una herramienta de composición o coreografía (por ejemplo, [1, 9]). Aunque los lenguajes de composición pueden utilizar mecanismos sofisticados de control de flujo como ramas condicionales, para simplificar asumimos que los procesos se ejecutan secuencialmente en un orden dado. Este escenario puede ser extendido de forma natural a relaciones más complejas que pueden ser expresadas en BPEL [7], el cual define cómo interactúan los procesos de negocio, se intercambian mensajes, se ordenan actividades y se manejan excepciones. Debido a limitaciones de espacio, nos enfocamos en el espacio de problemas presentado aquí y extenderemos nuestro modelo a escenarios de implementación más avanzados en el futuro. Cada flujo de trabajo tiene un requisito de calidad de servicio (QoS) que debe completarse dentro de un número específico de unidades de tiempo (por ejemplo, del orden de segundos, como se detalla en la sección de Experimentos). Una vez completado (o fallido), se asigna un valor comercial al flujo de trabajo. Extendimos este enfoque aún más y consideramos diferentes tipos de finalización de flujo de trabajo para modelar niveles diferenciados de QoS que pueden ser aplicados por las empresas (por ejemplo, para proporcionar servicios al cliente escalonados). Decimos que un flujo de trabajo es exitoso si se completa dentro de su requisito de QoS, aceptable si se completa dentro de un factor constante κ 31 de su límite de QoS (en nuestros experimentos elegimos κ=3), o fallido si termina más allá de κ veces su límite de QoS. Para cada categoría, se asigna un puntaje de valor comercial al flujo de trabajo, siendo la categoría exitosa la que recibe la puntuación positiva más alta, seguida por la aceptable y luego la fallida. La distribución de puntos de valor empresarial no es uniforme en los flujos de trabajo, lo que modela casos en los que algunos flujos de trabajo tienen mayor prioridad que otros. Cada tipo de servicio es implementado por varios proveedores de servicios diferentes. Suponemos que los proveedores hacen acuerdos de nivel de servicio (SLAs) para garantizar un nivel de rendimiento definido por el tiempo de finalización de una invocación de servicio web. Aunque los Acuerdos de Nivel de Servicio (SLAs) pueden ser complejos, en este documento asumimos, para simplificar, que las garantías pueden adoptar la forma de una degradación lineal del rendimiento bajo carga. Esta garantía está definida por varios parámetros: α es el tiempo de finalización esperado (por ejemplo, del orden de segundos) si la carga de trabajo asignada de las solicitudes de servicio web es menor o igual a β, la concurrencia máxima, y si la carga de trabajo es mayor que β, la finalización esperada para una carga de trabajo de tamaño ω es α + γ(ω − β) donde γ es un coeficiente fraccional. En nuestros experimentos variamos α, β y γ con diferentes distribuciones. Idealmente, todos los flujos de trabajo podrían finalizar dentro de sus límites de calidad de servicio (QoS) y, por lo tanto, maximizar el valor empresarial agregado en todos los flujos de trabajo. Sin embargo, debido a que modelamos a los proveedores de servicios con un rendimiento degradante bajo carga, no todos los flujos de trabajo alcanzarán su límite de calidad de servicio (QoS): fácilmente puede darse el caso de que los procesos comerciales sean asignados a proveedores que están sobrecargados y no pueden completarse dentro del límite de calidad de servicio respectivo de los flujos de trabajo. El problema clave de investigación, entonces, es asignar los procesos comerciales a los proveedores de servicios web con el objetivo de optimizar el valor comercial agregado de todos los flujos de trabajo. Dado que el alcance de la optimización es el conjunto completo de flujos de trabajo, puede ser que las mejores asignaciones de programación resulten en que algunos flujos de trabajo tengan que fallar para que otros tengan éxito. Esta observación intuitiva sugiere que enfoques de programación tradicionales como el round-robin o asignaciones proporcionales no funcionarán bien, lo cual es lo que observamos y discutimos en la Sección 4. Por otro lado, una búsqueda exhaustiva de todas las posibles asignaciones encontrará el mejor horario, pero la complejidad computacional es prohibitivamente alta. Supongamos que hay W flujos de trabajo con un promedio de B procesos de negocio por flujo de trabajo. Además, en el peor de los casos, cada proceso empresarial solicita un tipo de servicio, para el cual hay P proveedores. Por lo tanto, hay W · PB combinaciones para explorar y encontrar las asignaciones óptimas de procesos comerciales a proveedores. Incluso para configuraciones pequeñas (por ejemplo, Dado que (W=10, B=5, P=10), el tiempo computacional para la búsqueda exhaustiva es significativo, y en nuestro trabajo buscamos ajustar estos parámetros. En la siguiente subsección, discuta cómo se puede utilizar un algoritmo de búsqueda genética para converger hacia las asignaciones de programación óptimas. 3.2 Algoritmo genético Dado un espacio de búsqueda exponencial de asignaciones de procesos comerciales a proveedores de servicios web, el problema es encontrar la asignación óptima que produzca el valor comercial agregado más alto en general en todos los flujos de trabajo. Para explorar el espacio de soluciones, utilizamos un algoritmo genético (GA) que simula la selección natural darwiniana al hacer que los miembros de una población compitan por sobrevivir para transmitir sus cromosomas genéticos a la siguiente generación; después de generaciones sucesivas, hay una tendencia a que los cromosomas converjan hacia la mejor combinación. Aunque existen otras heurísticas de búsqueda que pueden resolver problemas de optimización (por ejemplo, recocido simulado o escalada de colina más empinada), el problema de programación de procesos empresariales se adapta bien a un AG porque las soluciones potenciales pueden representarse en forma de matriz y nos permite utilizar investigaciones previas en la recombinación efectiva de cromosomas de AG para formar nuevos miembros de la población (por ejemplo, [2]). 0 1 2 3 4 0 1 2 0 2 1 1 0 1 0 1 0 2 1 2 0 0 1 Figura 2: Un ejemplo de cromosoma que representa una asignación de programación de (flujo de trabajo, tipo de servicio) → proveedor de servicios. Cada fila representa un flujo de trabajo, y cada columna representa un tipo de servicio. Por ejemplo, aquí hay 3 flujos de trabajo (0 a 2) y 5 tipos de servicio (0 a 4). En el flujo de trabajo 0, cualquier solicitud de tipo de servicio 3 se dirige al proveedor 2. Ten en cuenta que el identificador del proveedor de servicios se encuentra dentro de un rango limitado a su tipo de servicio (es decir, su columna), por lo que el 2 listado para el tipo de servicio 3 es un servidor diferente al servidor 2 en otras columnas. Representación cromosómica de una solución. En la Figura 2 mostramos un ejemplo de cromosoma que codifica una asignación de programación. La representación es una matriz bidimensional que mapea {flujo de trabajo, tipo de servicio} a un proveedor de servicios. Para un proceso de negocio en el flujo de trabajo i y utilizando el tipo de servicio j, la entrada (i, j)-ésima en la tabla es el identificador del proveedor de servicios al que se asigna el proceso de negocio. Ten en cuenta que el identificador del proveedor de servicios se encuentra dentro de un rango limitado a su tipo de servicio. Ejecución de GA. Un algoritmo genético procede de la siguiente manera. Inicialmente se crea un conjunto aleatorio de cromosomas para la población. Los cromosomas son evaluados (hasheados) según alguna métrica, y los mejores son elegidos para ser padres. En nuestro problema, la evaluación produce el valor neto del negocio en todos los flujos de trabajo después de ejecutar todos los procesos comerciales una vez que se asignan a sus respectivos proveedores de servicios de acuerdo con el mapeo en el cromosoma. Los padres se recombinan para producir hijos, simulando un cruce sexual, y ocasionalmente puede surgir una mutación que produce nuevas características que no estaban disponibles en ninguno de los padres. La idea principal es que nos gustaría que los niños fueran diferentes de los padres (para explorar más del espacio de soluciones) pero no demasiado diferentes (para contener las porciones del cromosoma que resultan en asignaciones de programación exitosas). Ten en cuenta que encontrar el óptimo global no está garantizado debido a que la recombinación y la mutación son estocásticas. Recombinación y mutación de ADN. Como se mencionó, los cromosomas son matrices bidimensionales que representan asignaciones de horarios. Para simular la recombinación sexual de dos cromosomas para producir un nuevo cromosoma hijo, aplicamos un esquema de cruce de un punto dos veces (una vez a lo largo de cada dimensión). El cruce se explica mejor por analogía al espacio cartesiano de la siguiente manera. Se elige un punto al azar en la matriz para que sea la coordenada (0, 0). Los elementos de la matriz de los cuadrantes II y IV del primer progenitor y los elementos de los cuadrantes I y III del segundo progenitor se utilizan para crear el nuevo hijo. Este enfoque sigue las mejores prácticas de los algoritmos genéticos al mantener juntos los segmentos cromosómicos contiguos a medida que se transmiten de padre a hijo. El esquema de mutación de uni-cromosoma cambia aleatoriamente una de las asignaciones de proveedor de servicios a otro proveedor dentro del rango disponible. Otros esquemas de recombinación y mutación son un área de investigación en la comunidad de AG, y buscamos explorar nuevos operadores en trabajos futuros. Función de evaluación de GA. Un componente importante de los algoritmos genéticos es la función de evaluación. Dada una cromosoma particular que representa un mapeo de programación, la función calcula de manera determinista el valor neto del negocio en todas las cargas de trabajo. Los procesos comerciales en cada carga de trabajo se asignan a proveedores de servicios, y el tiempo de finalización de cada proveedor se calcula en función de la garantía del acuerdo de servicio utilizando los parámetros mencionados en la Sección 3.1, a saber, el tiempo de finalización sin carga α, la máxima concurrencia β y un coeficiente γ que controla la degradación del rendimiento lineal bajo carga pesada. Ten en cuenta que la función de evaluación puede ser fácilmente reemplazada si se desea; por ejemplo, otras funciones de evaluación pueden modelar diferentes garantías de proveedores de servicios o flujos de trabajo paralelos. 4. EXPERIMENTOS Y RESULTADOS En esta sección mostramos el beneficio de utilizar nuestro planificador basado en algoritmos genéticos. Debido a que queríamos escalar los escenarios a un gran número de flujos de trabajo (hasta 1000 en nuestros experimentos), implementamos un programa de simulación que nos permitió variar parámetros y medir los resultados con diferentes métricas. El simulador fue escrito en C++ estándar y se ejecutó en un ordenador de escritorio Linux (Fedora Core) con una velocidad de 2.8 GHz y 1GB de RAM. Comparamos nuestro algoritmo con candidatos alternativos: • Un algoritmo de round-robin bien conocido que asigna cada proceso comercial de forma circular a los proveedores de servicios para un tipo de servicio en particular. Este enfoque proporciona el esquema más simple para el equilibrio de carga. • Un algoritmo aleatorio-proporcional que asigna proporcionalmente los procesos comerciales a los proveedores de servicios; es decir, para un tipo de servicio dado, los proveedores de servicios se clasifican según su tiempo de finalización garantizado, y los procesos comerciales se asignan proporcionalmente a los proveedores en función de su tiempo de finalización. (También probamos un esquema de proporcionalidad basado tanto en los tiempos de finalización como en la concurrencia máxima, pero obtuvimos los mismos resultados, por lo que solo se muestran los resultados de los esquemas anteriores aquí.) • Un algoritmo codicioso de hombre de paja que siempre asigna los procesos comerciales al proveedor de servicios que tiene el tiempo de finalización garantizado más rápido. Este algoritmo representa un enfoque ingenuo basado en observaciones avaras y locales de cada flujo de trabajo sin tener en cuenta todos los flujos de trabajo. En los experimentos que siguen, todos los resultados fueron promediados a lo largo de 20 pruebas, y para ayudar a normalizar los efectos de la aleatorización utilizada durante el AG, cada prueba comenzó leyendo datos preinicializados desde el disco. En la Tabla 1 enumeramos nuestros parámetros experimentales. En la Figura 3 mostramos los resultados de ejecutar nuestro AG contra las tres alternativas candidatas. El eje x muestra el número de flujos de trabajo escalado a 1000, y el eje y muestra el valor comercial agregado de todos los flujos de trabajo. Como se puede ver, el algoritmo genético produce consistentemente el mayor valor comercial incluso a medida que aumenta el número de flujos de trabajo; con 1000 flujos de trabajo, el algoritmo genético produce una mejora del 115% sobre la siguiente mejor alternativa. (Tenga en cuenta que aunque estamos optimizando en función de la métrica de valor comercial que definimos anteriormente, los algoritmos genéticos pueden converger hacia el valor óptimo de cualquier métrica, siempre y cuando la función de evaluación pueda medir de manera consistente el valor de un cromosoma con esa métrica). Como era de esperar, el algoritmo codicioso tiene un rendimiento muy pobre porque hace el peor trabajo en equilibrar la carga: todos los procesos comerciales de un tipo de servicio dado se asignan a un solo servidor (el que se anuncia como el que tiene el tiempo de finalización más rápido), y a medida que llegan más procesos comerciales, el rendimiento de los proveedores se degrada linealmente. El esquema de round-robin es inicialmente superado por el esquema proporcional aleatorio hasta alrededor de 120 flujos de trabajo (como se muestra en el gráfico ampliado de la Figura 4), pero a medida que aumenta el número de flujos de trabajo, el esquema de round-robin gana consistentemente sobre el proporcional aleatorio. La razón es que aunque el esquema aleatorio-proporcional asigna procesos comerciales a proveedores proporcionalmente según los tiempos de finalización anunciados (que es una medida del poder del proveedor de servicios), incluso los mejores proveedores eventualmente alcanzarán una concurrencia máxima del mundo real para la gran cantidad de flujos de trabajo que estamos considerando. Para un número muy grande de flujos de trabajo, el esquema de round-robin es capaz de equilibrar mejor la carga entre todos los proveedores de servicios. Para comprender mejor el comportamiento resultante de las asignaciones de programación, mostramos los resultados de finalización del flujo de trabajo en las Figuras 5, 6 y 7 para 100, 500 y 900 flujos de trabajo, respectivamente. Estas cifras muestran el porcentaje de flujos de trabajo que son exitosos (pueden completarse dentro de su límite de QoS), aceptables (pueden completarse dentro de κ=3 veces su límite de QoS) y fallidos (no pueden completarse dentro de κ=3 veces su límite de QoS). El GA produce consistentemente el mayor porcentaje de flujos de trabajo exitosos (lo que resulta en valores comerciales más altos para el conjunto agregado de flujos de trabajo). Además, el esquema de round-robin produce mejores resultados que el proporcional-aleatorio para un gran número de flujos de trabajo, pero no tiene un rendimiento tan bueno como el algoritmo genético. En la Figura 8 graficamos el makespan resultante de los mismos experimentos anteriores. Makespan es una métrica tradicional de la comunidad de programación de trabajos que mide el tiempo transcurrido para que se complete el último trabajo. Aunque útil, no captura la métrica de valor empresarial de alto nivel contra la que estamos optimizando. De hecho, el makespan no tiene en cuenta el hecho de que proporcionamos múltiples niveles de finalización (exitoso, aceptable y fallido) y asignamos puntajes de valor comercial en consecuencia. Para completar, señalamos que el algoritmo genético proporciona el makespan más rápido, pero es igualado por el algoritmo de round robin. El algoritmo genético produce mejores valores comerciales (como se muestra en la Figura 3) porque es capaz de explorar el espacio de soluciones para encontrar mejores asignaciones que generen flujos de trabajo más exitosos (como se muestra en las Figuras 5 a 7). También analizamos el efecto de los algoritmos de programación en el equilibrio de la carga. La Figura 9 muestra el porcentaje de proveedores de servicios que fueron accedidos mientras se ejecutaban los flujos de trabajo. Como era de esperar, el algoritmo codicioso siempre elige a un proveedor de servicios; por otro lado, el algoritmo de round-robin es el más rápido para distribuir el negocio. 33 Parámetro experimental Comentario Flujos de trabajo 5 a 1000 Procesos de negocio por flujo de trabajo aleatorio uniforme: 1 - 10 Tipos de servicio 10 Proveedores de servicios por tipo de servicio aleatorio uniforme: 1 - 10 Objetivo de QoS del flujo de trabajo aleatorio uniforme: 10-30 segundos Tiempo de finalización del proveedor de servicios (α) aleatorio uniforme: 1 - 12 segundos Máxima concurrencia del proveedor de servicios (β) aleatorio uniforme: 1 - 12 Coeficiente de degradación del proveedor de servicios (γ) aleatorio uniforme: 0.1 - 0.9 Valor de negocio para flujos de trabajo exitosos aleatorio uniforme: 10 - 50 puntos Valor de negocio para flujos de trabajo aceptables aleatorio uniforme: 0 - 10 puntos Valor de negocio para flujos de trabajo fallidos aleatorio uniforme: -10 - 0 puntos GA: número de padres 20 GA: número de hijos 80 GA: número de generaciones 1000 Tabla 1: Parámetros experimentales Fallido Aceptable (completado pero no dentro de QoS) Exitoso (completado dentro de QoS) 0% 20% 40% 60% 80% 100% RoundRobinRandProportionalGreedyGeneticAlg Porcentaje de todos los flujos de trabajo Comportamiento del flujo de trabajo, 100 flujos de trabajo Figura 5: Comportamiento del flujo de trabajo para 100 flujos de trabajo. Fracaso Aceptable (completado pero no dentro de QoS) Exitoso (completado dentro de QoS) 0% 20% 40% 60% 80% 100% RoundRobinRandProportionalGreedyGeneticAlg Porcentaje de todos los flujos de trabajo Comportamiento del flujo de trabajo, 500 flujos de trabajo Figura 6: Comportamiento del flujo de trabajo para 500 flujos de trabajo. Fracaso Aceptable (completado pero no dentro de QoS) Exitoso (completado dentro de QoS) 0% 20% 40% 60% 80% 100% RoundRobinRandProportionalGreedyGeneticAlg Porcentaje de todos los flujos de trabajo Comportamiento del flujo de trabajo, 500 flujos de trabajo Figura 7: Comportamiento del flujo de trabajo para 900 flujos de trabajo. 0 50 100 150 200 250 300 0 200 400 600 800 1000 Tiempo total [segundos] Número de flujos de trabajo Tiempo máximo de finalización para todos los flujos de trabajo Algoritmo genético Round robin Proporcional aleatorio Codicioso Figura 8: Tiempo máximo de finalización para todos los flujos de trabajo. Este valor es la métrica makespan utilizada en la investigación de programación tradicional. Aunque útil, el makespan no tiene en cuenta la puntuación del valor comercial en nuestro dominio de problemas. La Figura 10 muestra el porcentaje de proveedores de servicios accedidos (es decir, el porcentaje de proveedores de servicios representados en la Figura 9) que tenían más procesos comerciales asignados que su concurrencia máxima anunciada. Por ejemplo, en el algoritmo voraz solo se utiliza un proveedor de servicios, y este proveedor se satura rápidamente. Por otro lado, el algoritmo aleatorio-proporcional utiliza muchos proveedores de servicios, pero debido a que los procesos comerciales se asignan de manera proporcional con más asignaciones yendo a los mejores proveedores, hay una tendencia a que un menor porcentaje de proveedores se saturen. Para completitud, mostramos el rendimiento del algoritmo genético en sí mismo en la Figura 11. El algoritmo escala linealmente con un aumento en el número de flujos de trabajo. Observamos que los algoritmos round-robin, random-proportional y greedy terminaron en menos de 1 segundo incluso para la configuración de flujo de trabajo más grande. Sin embargo, consideramos que el beneficio de encontrar puntajes de valor empresarial mucho más altos justifica el tiempo de ejecución del algoritmo genético; además, esperaríamos que el tiempo de ejecución mejore tanto con la optimización del software como con un ordenador más rápido que nuestro PC estándar. CONCLUSIÓN Los procesos comerciales dentro de los flujos de trabajo pueden ser orquestados para acceder a servicios web. En este artículo estudiamos la provisión de servicios de múltiples niveles, donde las solicitudes de servicios web a tipos de servicios pueden ser asignadas a diferentes proveedores de servicios. El problema resultante es que para poder soportar un gran número de flujos de trabajo, la asignación de procesos de negocio a proveedores de servicios web debe ser inteligente. Utilizamos una métrica de valor empresarial para medir el 0.2 0.4 0.6 0.8 1 0 200 400 600 800 1000 Porcentaje de todos los proveedores de servicios Número de flujos de trabajo Proveedores de servicios utilizados Algoritmo genético Round robin Proporcional aleatorio Ávido Figura 9: El porcentaje de proveedores de servicios utilizados durante las ejecuciones de carga de trabajo. El algoritmo Greedy siempre elige al mismo proveedor de servicios, mientras que el algoritmo Round Robin distribuye las solicitudes de manera uniforme entre los proveedores. 0 0.2 0.4 0.6 0.8 1 0 200 400 600 800 1000 Porcentaje de todos los proveedores de servicios Número de flujos de trabajo Proveedores saturados Algoritmo genético Round robin Proporcional aleatorio Greedy Figura 10: El porcentaje de proveedores de servicios que están saturados entre aquellos proveedores que fueron utilizados (es decir, el porcentaje de proveedores de servicios representados en la Figura 9). Un proveedor de servicios saturado es aquel cuya carga de trabajo es mayor que su concurrencia máxima anunciada. Dado que el espacio de soluciones de los mapeos de programación es exponencial, utilizamos un algoritmo de búsqueda genética para explorar el espacio y converger hacia el mejor horario. Con una configuración predeterminada para todos los parámetros y utilizando nuestra puntuación de valor empresarial, el GA produjo hasta un 115% de mejora en el valor empresarial sobre el siguiente mejor algoritmo. Finalmente, debido a que un algoritmo genético convergerá hacia el valor óptimo utilizando cualquier métrica (incluso diferente a la métrica de valor empresarial que utilizamos), creemos que nuestro enfoque tiene un fuerte potencial para trabajos futuros. En trabajos futuros, buscamos adquirir trazas del mundo real de instancias de servicios web para obtener mejores estimaciones de las garantías de acuerdo de servicio, aunque esperamos que tales garantías entre los proveedores y sus consumidores no estén generalmente disponibles para el público. También analizaremos otras métricas de calidad de servicio (QoS) como el uso de CPU y E/S. Por ejemplo, podemos analizar los costos de transferencia con diferentes anchos de banda, latencia, tamaño de datos y distribución de datos. Además, esperamos mejorar nuestro algoritmo genético y compararlo con más alternativas de programación. Finalmente, dado que nuestro trabajo es complementario al trabajo existente en coreografía de servicios web (porque dependemos de flujos de trabajo preconfigurados), buscamos integrar nuestro enfoque con los sistemas de flujo de trabajo de servicios web disponibles expresados en BPEL. 6. REFERENCIAS [1] A. Ankolekar, et al. DAML-S: Marcado Semántico para Servicios Web, En Proc. del Simposio Internacional de Trabajo de la Web Semántica, 2001. [2] L. Davis. Programación de taller con algoritmos genéticos, En Proc. de la Conferencia Internacional sobre Algoritmos Genéticos, 1985. [3] H.-L. Fang, P. Ross y D. Corne. Un Enfoque Prometedor de Algoritmo Genético para Problemas de Programación de Taller de Trabajo, Re-programación y Programación de Taller Abierto, En Actas de la 5ta Conferencia Internacional sobre Algoritmos Genéticos, 1993. [4] M. Gary y D. Johnson. Computadoras e Intractabilidad: Una Guía de la Teoría de NP-Completitud, Freeman, 1979. [5] J. Holland. Adaptación en Sistemas Naturales y Artificiales: Un Análisis Introductorio con Aplicaciones a la Biología, Control e Inteligencia Artificial, MIT Press, 1992. [6] D. Goldberg. Algoritmos Genéticos en Búsqueda, Optimización y Aprendizaje Automático, Kluwer Academic Publishers, 1989. [7] Procesos de Negocio en un Mundo de Servicios Web, www-128.ibm.com/developerworks/webservices/library/ws-bpelwp/. [8] G. Soundararajan, K. Manassiev, J. Chen, A. Goel y C. Amza. Bases de datos de back-end en clústeres de servidores de contenido dinámico compartido, En Proc. de la Conferencia Internacional de Computación Autónoma de IEEE, 2005. [9] B. Srivastava y J. Koehler. Composición de Servicios Web: Soluciones Actuales y Problemas Abiertos, ICAP, 2003. [10] B. Urgaonkar, P. Shenoy, A. Chandra y P. Goyal. Provisión dinámica de aplicaciones de Internet de múltiples niveles, En Proc. de la Conferencia Internacional de IEEE sobre Computación Autónoma, 2005. [11] L. Zeng, B. Benatallah, M. Dumas, J. Kalagnanam y Q. Sheng. Composición de Servicios Web Impulsada por la Calidad, En Proc. de la Conferencia WWW, 2003. 35 ",
            "candidates": [],
            "error": [
                [
                    ""
                ]
            ]
        },
        "qos-defined limit": {
            "translated_key": "límite definido por QoS",
            "is_in_text": false,
            "original_annotated_sentences": [
                "Heuristics-Based Scheduling of Composite Web Service Workloads Thomas Phan Wen-Syan Li IBM Almaden Research Center 650 Harry Rd.",
                "San Jose, CA 95120 {phantom,wsl}@us.ibm.com ABSTRACT Web services can be aggregated to create composite workflows that provide streamlined functionality for human users or other systems.",
                "Although industry standards and recent research have sought to define best practices and to improve end-to-end workflow composition, one area that has not fully been explored is the scheduling of a workflows web service requests to actual service provisioning in a multi-tiered, multi-organisation environment.",
                "This issue is relevant to modern business scenarios where business processes within a workflow must complete within QoS-defined limits.",
                "Because these business processes are web service consumers, service requests must be mapped and scheduled across multiple web service providers, each with its own negotiated service level agreement.",
                "In this paper we provide heuristics for scheduling service requests from multiple business process workflows to web service providers such that a business value metric across all workflows is maximised.",
                "We show that a genetic search algorithm is appropriate to perform this scheduling, and through experimentation we show that our algorithm scales well up to a thousand workflows and produces better mappings than traditional approaches.",
                "Categories and Subject Descriptors C.2.4 [Computer-Communication Networks]: Distributed Systems-distributed applications; D.2.8 [Software Engineering]: Metrics-complexity measures, performance measures 1.",
                "INTRODUCTION Web services can be composed into workflows to provide streamlined end-to-end functionality for human users or other systems.",
                "Although previous research efforts have looked at ways to intelligently automate the composition of web services into workflows (e.g. [1, 9]), an important remaining problem is the assignment of web service requests to the underlying web service providers in a multi-tiered runtime scenario within constraints.",
                "In this paper we address this scheduling problem and examine means to manage a large number of business process workflows in a scalable manner.",
                "The problem of scheduling web service requests to providers is relevant to modern business domains that depend on multi-tiered service provisioning.",
                "Consider the example shown in Figure 1 that illustrates our problem space.",
                "Workflows comprise multiple related business processes that are web service consumers; here we assume that the workflows represent requested service from customers or automated systems and that the workflow has already been composed with an existing choreography toolkit.",
                "These workflows are then submitted to a portal (not shown) that acts as a scheduling agent between the web service consumers and the web service providers.",
                "In this example, a workflow could represent the actions needed to instantiate a vacation itinerary, where one business process requests booking an airline ticket, another business process requests a hotel room, and so forth.",
                "Each of these requests target a particular service type (e.g. airline reservations, hotel reservations, car reservations, etc. ), and for each service type, there are multiple instances of service providers that publish a web service interface.",
                "An important challenge is that the workflows must meet some quality-of-service (QoS) metric, such as end-to-end completion time of all its business processes, and that meeting or failing this goal results in the assignment of a quantitative business value metric for the workflow; intuitively, it is desired that all workflows meet their respective QoS goals.",
                "We further leverage the notion that QoS service agreements are generally agreed-upon between the web service providers and the scheduling agent such that the providers advertise some level of guaranteed QoS to the scheduler based upon runtime conditions such as turnaround time and maximum available concurrency.",
                "The resulting problem is then to schedule and assign the business processes requests for service types to one of the service providers for that type.",
                "The scheduling must be done such that the aggregate business value across all the workflows is maximised.",
                "In Section 3 we state the scenario as a combinatorial problem and utilise a genetic search algorithm [5] to find the best assignment of web service requests to providers.",
                "This approach converges towards an assignment that maximises the overall business value for all the workflows.",
                "In Section 4 we show through experimentation that this search heuristic finds better assignments than other algorithms (greedy, round-robin, and proportional).",
                "Further, this approach allows us to scale the number of simultaneous workflows (up to one thousand workflows in our experiments) and yet still find effective schedules. 2.",
                "RELATED WORK In the context of service assignment and scheduling, [11] maps web service calls to potential servers using linear programming, but their work is concerned with mapping only single workflows; our principal focus is on scalably scheduling multiple workflows (up 30 Service Type SuperHotels.com Business Process Business Process Workflow ... Business Process Business Process ... HostileHostels.com IncredibleInns.com Business Process Business Process Business Process ... Business Process Service Provider SkyHighAirlines.com SuperCrazyFlights.com Business Process . . . . . .",
                "Advertised QoS Service Agreement CarRentalService.com Figure 1: An example scenario demonstrating the interaction between business processes in workflows and web service providers.",
                "Each business process accesses a service type and is then mapped to a service provider for that type. to one thousand as we show later) using different business metrics and a search heuristic. [10] presents a dynamic provisioning approach that uses both predictive and reactive techniques for multi-tiered Internet application delivery.",
                "However, the provisioning techniques do not consider the challenges faced when there are alternative query execution plans and replicated data sources. [8] presents a feedback-based scheduling mechanism for multi-tiered systems with back-end databases, but unlike our work, it assumes a tighter coupling between the various components of the system.",
                "Our work also builds upon prior scheduling research.",
                "The classic job-shop scheduling problem, shown to be NP-complete [4] [3], is similar to ours in that tasks within a job must be scheduled onto machinery (c.f. our scenario is that business processes within a workflow must be scheduled onto web service providers).",
                "The salient differences are that the machines can process only one job at a time (we assume servers can multi-task but with degraded performance and a maximum concurrency level), tasks within a job cannot simultaneously run on different machines (we assume business processes can be assigned to any available server), and the principal metric of performance is the makespan, which is the time for the last task among all the jobs to complete (and as we show later, optimising on the makespan is insufficient for scheduling the business processes, necessitating different metrics). 3.",
                "DESIGN In this section we describe our model and discuss how we can find scheduling assignments using a genetic search algorithm. 3.1 Model We base our model on the simplified scenario shown in Figure 1.",
                "Specifically, we assume that users or automated systems request the execution of a workflow.",
                "The workflows comprise business processes, each of which makes one web service invocation to a service type.",
                "Further, business processes have an ordering in the workflow.",
                "The arrangement and execution of the business processes and the data flow between them are all managed by a composition or choreography tool (e.g. [1, 9]).",
                "Although composition languages can use sophisticated flow-control mechanisms such as conditional branches, for simplicity we assume the processes execute sequentially in a given order.",
                "This scenario can be naturally extended to more complex relationships that can be expressed in BPEL [7], which defines how business processes interact, messages are exchanged, activities are ordered, and exceptions are handled.",
                "Due to space constraints, we focus on the problem space presented here and will extend our model to more advanced deployment scenarios in the future.",
                "Each workflow has a QoS requirement to complete within a specified number of time units (e.g. on the order of seconds, as detailed in the Experiments section).",
                "Upon completion (or failure), the workflow is assigned a business value.",
                "We extended this approach further and considered different types of workflow completion in order to model differentiated QoS levels that can be applied by businesses (for example, to provide tiered customer service).",
                "We say that a workflow is successful if it completes within its QoS requirement, acceptable if it completes within a constant factor κ 31 of its QoS bound (in our experiments we chose κ=3), or failing if it finishes beyond κ times its QoS bound.",
                "For each category, a business value score is assigned to the workflow, with the successful category assigned the highest positive score, followed by acceptable and then failing.",
                "The business value point distribution is non-uniform across workflows, further modelling cases where some workflows are of higher priority than others.",
                "Each service type is implemented by a number of different service providers.",
                "We assume that the providers make service level agreements (SLAs) to guarantee a level of performance defined by the completion time for completing a web service invocation.",
                "Although SLAs can be complex, in this paper we assume for simplicity that the guarantees can take the form of a linear performance degradation under load.",
                "This guarantee is defined by several parameters: α is the expected completion time (for example, on the order of seconds) if the assigned workload of web service requests is less than or equal to β, the maximum concurrency, and if the workload is higher than β, the expected completion for a workload of size ω is α+ γ(ω − β) where γ is a fractional coefficient.",
                "In our experiments we vary α, β, and γ with different distributions.",
                "Ideally, all workflows would be able to finish within their QoS limits and thus maximise the aggregate business value across all workflows.",
                "However, because we model service providers with degrading performance under load, not all workflows will achieve their QoS limit: it may easily be the case that business processes are assigned to providers who are overloaded and cannot complete within the respective workflows QoS limit.",
                "The key research problem, then, is to assign the business processes to the web service providers with the goal of optimising on the aggregate business value of all workflows.",
                "Given that the scope of the optimisation is the entire set of workflows, it may be that the best scheduling assignments may result in some workflows having to fail in order for more workflows to succeed.",
                "This intuitive observation suggests that traditional scheduling approaches such as round-robin or proportional assignments will not fare well, which is what we observe and discuss in Section 4.",
                "On the other hand, an exhaustive search of all the possible assignments will find the best schedule, but the computational complexity is prohibitively high.",
                "Suppose there are W workflows with an average of B business processes per workflow.",
                "Further, in the worst case each business process requests one service type, for which there are P providers.",
                "There are thus W · PB combinations to explore to find the optimal assignments of business processes to providers.",
                "Even for small configurations (e.g.",
                "W =10, B=5, P=10), the computational time for exhaustive search is significant, and in our work we look to scale these parameters.",
                "In the next subsection, discuss how a genetic search algorithm can be used to converge toward the optimum scheduling assignments. 3.2 Genetic algorithm Given an exponential search space of business process assignments to web service providers, the problem is to find the optimal assignment that produces the overall highest aggregate business value across all workflows.",
                "To explore the solution space, we use a genetic algorithm (GA) search heuristic that simulates Darwinian natural selection by having members of a population compete to survive in order to pass their genetic chromosomes onto the next generation; after successive generations, there is a tendency for the chromosomes to converge toward the best combination [5] [6].",
                "Although other search heuristics exist that can solve optimization problems (e.g. simulated annealing or steepest-ascent hillclimbing), the business process scheduling problem fits well with a GA because potential solutions can be represented in a matrix form and allows us to use prior research in effective GA chromosome recombination to form new members of the population (e.g. [2]). 0 1 2 3 4 0 1 2 0 2 1 1 0 1 0 1 0 2 1 2 0 0 1 Figure 2: An example chromosome representing a scheduling assignment of (workflow,service type) → service provider.",
                "Each row represents a workflow, and each column represents a service type.",
                "For example, here there are 3 workflows (0 to 2) and 5 service types (0 to 4).",
                "In workflow 0, any request for service type 3 goes to provider 2.",
                "Note that the service provider identifier is within a range limited to its service type (i.e. its column), so the 2 listed for service type 3 is a different server from server 2 in other columns.",
                "Chromosome representation of a solution.",
                "In Figure 2 we show an example chromosome that encodes one scheduling assignment.",
                "The representation is a 2-dimensional matrix that maps {workflow, service type} to a service provider.",
                "For a business process in workflow i and utilising service type j, the (i, j)th entry in the table is the identifier for the service provider to which the business process is assigned.",
                "Note that the service provider identifier is within a range limited to its service type.",
                "GA execution.",
                "A GA proceeds as follows.",
                "Initially a random set of chromosomes is created for the population.",
                "The chromosomes are evaluated (hashed) to some metric, and the best ones are chosen to be parents.",
                "In our problem, the evaluation produces the net business value across all workflows after executing all business processes once they are assigned to their respective service providers according to the mapping in the chromosome.",
                "The parents recombine to produce children, simulating sexual crossover, and occasionally a mutation may arise which produces new characteristics that were not available in either parent.",
                "The principal idea is that we would like the children to be different from the parents (in order to explore more of the solution space) yet not too different (in order to contain the portions of the chromosome that result in good scheduling assignments).",
                "Note that finding the global optimum is not guaranteed because the recombination and mutation are stochastic.",
                "GA recombination and mutation.",
                "As mentioned, the chromosomes are 2-dimensional matrices that represent scheduling assignments.",
                "To simulate sexual recombination of two chromosomes to produce a new child chromosome, we applied a one-point crossover scheme twice (once along each dimension).",
                "The crossover is best explained by analogy to Cartesian space as follows.",
                "A random point is chosen in the matrix to be coordinate (0, 0).",
                "Matrix elements from quadrants II and IV from the first parent and elements from quadrants I and III from the second parent are used to create the new child.",
                "This approach follows GA best practices by keeping contiguous chromosome segments together as they are transmitted from parent to child.",
                "The uni-chromosome mutation scheme randomly changes one of the service provider assignments to another provider within the available range.",
                "Other recombination and mutation schemes are an area of research in the GA community, and we look to explore new operators in future work.",
                "GA evaluation function.",
                "An important GA component is the evaluation function.",
                "Given a particular chromosome representing one scheduling mapping, the function deterministically calculates the net business value across all workloads.",
                "The business processes in each workload are assigned to service providers, and each providers completion time is calculated based on the service agreement guarantee using the parameters mentioned in Section 3.1, namely the unloaded completion time α, the maximum concur32 rency β, and a coefficient γ that controls the linear performance degradation under heavy load.",
                "Note that the evaluation function can be easily replaced if desired; for example, other evaluation functions can model different service provider guarantees or parallel workflows. 4.",
                "EXPERIMENTS AND RESULTS In this section we show the benefit of using our GA-based scheduler.",
                "Because we wanted to scale the scenarios up to a large number of workflows (up to 1000 in our experiments), we implemented a simulation program that allowed us to vary parameters and to measure the results with different metrics.",
                "The simulator was written in standard C++ and was run on a Linux (Fedora Core) desktop computer running at 2.8 GHz with 1GB of RAM.",
                "We compared our algorithm against alternative candidates: • A well-known round-robin algorithm that assigns each business process in circular fashion to the service providers for a particular service type.",
                "This approach provides the simplest scheme for load-balancing. • A random-proportional algorithm that proportionally assigns business processes to the service providers; that is, for a given service type, the service providers are ranked by their guaranteed completion time, and business processes are assigned proportionally to the providers based on their completion time. (We also tried a proportionality scheme based on both the completion times and maximum concurrency but attained the same results, so only the former schemes results are shown here.) • A strawman greedy algorithm that always assigns business processes to the service provider that has the fastest guaranteed completion time.",
                "This algorithm represents a naive approach based on greedy, local observations of each workflow without taking into consideration all workflows.",
                "In the experiments that follow, all results were averaged across 20 trials, and to help normalise the effects of randomisation used during the GA, each trial started by reading in pre-initialised data from disk.",
                "In Table 1 we list our experimental parameters.",
                "In Figure 3 we show the results of running our GA against the three candidate alternatives.",
                "The x-axis shows the number for workflows scaled up to 1000, and the y-axis shows the aggregate business value for all workflows.",
                "As can be seen, the GA consistently produces the highest business value even as the number of workflows grows; at 1000 workflows, the GA produces a 115% improvement over the next-best alternative. (Note that although we are optimising against the business value metric we defined earlier, genetic algorithms are able to converge towards the optimal value of any metric, as long as the evaluation function can consistently measure a chromosomes value with that metric.)",
                "As expected, the greedy algorithm performs very poorly because it does the worst job at balancing load: all business processes for a given service type are assigned to only one server (the one advertised to have the fastest completion time), and as more business processes arrive, the providers performance degrades linearly.",
                "The round-robin scheme is initially outperformed by the randomproportional scheme up to around 120 workflows (as shown in the magnified graph of Figure 4), but as the number of workflows increases, the round-robin scheme consistently wins over randomproportional.",
                "The reason is that although the random-proportional scheme assigns business processes to providers proportionally according to the advertised completion times (which is a measure of the power of the service provider), even the best providers will eventually reach a real-world maximum concurrency for the large -2000 -1000 0 1000 2000 3000 4000 5000 6000 7000 0 200 400 600 800 1000 Aggregatebusinessvalueacrossallworkflows Total number of workflows Business value scores of scheduling algorithms Genetic algorithm Round robin Random proportional Greedy Figure 3: Net business value scores of different scheduling algorithms. -500 0 500 1000 1500 2000 2500 3000 3500 4000 0 50 100 150 200Aggregatebusinessvalueacrossallworkflows Total number of workflows Business value scores of scheduling algorithms Genetic algorithm Round robin Random proportional Greedy Figure 4: Magnification of the left-most region in Figure 3. number of workflows that we are considering.",
                "For a very large number of workflows, the round-robin scheme is able to better balance the load across all service providers.",
                "To better understand the behaviour resulting from the scheduling assignments, we show the workflow completion results in Figures 5, 6, and 7 for 100, 500, and 900 workflows, respectively.",
                "These figures show the percentage of workflows that are successful (can complete with their QoS limit), acceptable (can complete within κ=3 times their QoS limit), and failed (cannot complete within κ=3 times their QoS limit).",
                "The GA consistently produces the highest percentage of successful workflows (resulting in higher business values for the aggregate set of workflows).",
                "Further, the round-robin scheme produces better results than the random-proportional for a large number of workflows but does not perform as well as the GA.",
                "In Figure 8 we graph the makespan resulting from the same experiments above.",
                "Makespan is a traditional metric from the job scheduling community measuring elapsed time for the last job to complete.",
                "While useful, it does not capture the high-level business value metric that we are optimising against.",
                "Indeed, the makespan is oblivious to the fact that we provide multiple levels of completion (successful, acceptable, and failed) and assign business value scores accordingly.",
                "For completeness, we note that the GA provides the fastest makespan, but it is matched by the round robin algorithm.",
                "The GA produces better business values (as shown in Figure 3) because it is able to search the solution space to find better mappings that produce more successful workflows (as shown in Figures 5 to 7).",
                "We also looked at the effect of the scheduling algorithms on balancing the load.",
                "Figure 9 shows the percentage of services providers that were accessed while the workflows ran.",
                "As expected, the greedy algorithm always hits one service provider; on the other hand, the round-robin algorithm is the fastest to spread the business 33 Experimental parameter Comment Workflows 5 to 1000 Business processes per workflow uniform random: 1 - 10 Service types 10 Service providers per service type uniform random: 1 - 10 Workflow QoS goal uniform random: 10-30 seconds Service provider completion time (α) uniform random: 1 - 12 seconds Service provider maximum concurrency (β) uniform random: 1 - 12 Service provider degradation coefficient (γ) uniform random: 0.1 - 0.9 Business value for successful workflows uniform random: 10 - 50 points Business value for acceptable workflows uniform random: 0 - 10 points Business value for failed workflows uniform random: -10 - 0 points GA: number of parents 20 GA: number of children 80 GA: number of generations 1000 Table 1: Experimental parameters Failed Acceptable (completed but not within QoS) Successful (completed within QoS) 0% 20% 40% 60% 80% 100% RoundRobinRandProportionalGreedyGeneticAlg Percentageofallworkflows Workflow behaviour, 100 workflows Figure 5: Workflow behaviour for 100 workflows.",
                "Failed Acceptable (completed but not within QoS) Successful (completed within QoS) 0% 20% 40% 60% 80% 100% RoundRobinRandProportionalGreedyGeneticAlg Percentageofallworkflows Workflow behaviour, 500 workflows Figure 6: Workflow behaviour for 500 workflows.",
                "Failed Acceptable (completed but not within QoS) Successful (completed within QoS) 0% 20% 40% 60% 80% 100% RoundRobinRandProportionalGreedyGeneticAlg Percentageofallworkflows Workflow behaviour, 500 workflows Figure 7: Workflow behaviour for 900 workflows. 0 50 100 150 200 250 300 0 200 400 600 800 1000 Makespan[seconds] Number of workflows Maximum completion time for all workflows Genetic algorithm Round robin Random proportional Greedy Figure 8: Maximum completion time for all workflows.",
                "This value is the makespan metric used in traditional scheduling research.",
                "Although useful, the makespan does not take into consideration the business value scoring in our problem domain. processes.",
                "Figure 10 is the percentage of accessed service providers (that is, the percentage of service providers represented in Figure 9) that had more assigned business processes than their advertised maximum concurrency.",
                "For example, in the greedy algorithm only one service provider is utilised, and this one provider quickly becomes saturated.",
                "On the other hand, the random-proportional algorithm uses many service providers, but because business processes are proportionally assigned with more assignments going to the better providers, there is a tendency for a smaller percentage of providers to become saturated.",
                "For completeness, we show the performance of the genetic algorithm itself in Figure 11.",
                "The algorithm scales linearly with an increasing number of workflows.",
                "We note that the round-robin, random-proportional, and greedy algorithms all finished within 1 second even for the largest workflow configuration.",
                "However, we feel that the benefit of finding much higher business value scores justifies the running time of the GA; further we would expect that the running time will improve with both software tuning as well as with a computer faster than our off-the-shelf PC. 5.",
                "CONCLUSION Business processes within workflows can be orchestrated to access web services.",
                "In this paper we looked at multi-tiered service provisioning where web service requests to service types can be mapped to different service providers.",
                "The resulting problem is that in order to support a very large number of workflows, the assignment of business process to web service provider must be intelligent.",
                "We used a business value metric to measure the be34 0 0.2 0.4 0.6 0.8 1 0 200 400 600 800 1000 Percentageofallserviceproviders Number of workflows Service providers utilised Genetic algorithm Round robin Random proportional Greedy Figure 9: The percentage of service providers utilized during workload executions.",
                "The Greedy algorithm always hits the one service provider, while the Round Robin algorithm spreads requests evenly across the providers. 0 0.2 0.4 0.6 0.8 1 0 200 400 600 800 1000 Percentageofallserviceproviders Number of workflows Service providers saturated Genetic algorithm Round robin Random proportional Greedy Figure 10: The percentage of service providers that are saturated among those providers who were utilized (that is, percentage of the service providers represented in Figure 9).",
                "A saturated service provider is one whose workload is greater that its advertised maximum concurrency. 0 5 10 15 20 25 0 200 400 600 800 1000 Runningtimeinseconds Total number of workflows Running time of genetic algorithm GA running time Figure 11: Running time of the genetic algorithm. haviour of workflows meeting or failing QoS values, and we optimised our scheduling to maximise the aggregate business value across all workflows.",
                "Since the solution space of scheduler mappings is exponential, we used a genetic search algorithm to search the space and converge toward the best schedule.",
                "With a default configuration for all parameters and using our business value scoring, the GA produced up to 115% business value improvement over the next best algorithm.",
                "Finally, because a genetic algorithm will converge towards the optimal value using any metric (even other than the business value metric we used), we believe our approach has strong potential for continuing work.",
                "In future work, we look to acquire real-world traces of web service instances in order to get better estimates of service agreement guarantees, although we expect that such guarantees between the providers and their consumers are not generally available to the public.",
                "We will also look at other QoS metrics such as CPU and I/O usage.",
                "For example, we can analyse transfer costs with varying bandwidth, latency, data size, and data distribution.",
                "Further, we hope to improve our genetic algorithm and compare it to more scheduler alternatives.",
                "Finally, since our work is complementary to existing work in web services choreography (because we rely on pre-configured workflows), we look to integrate our approach with available web service workflow systems expressed in BPEL. 6.",
                "REFERENCES [1] A. Ankolekar, et al.",
                "DAML-S: Semantic Markup For Web Services, In Proc. of the Intl Semantic Web Working Symposium, 2001. [2] L. Davis.",
                "Job Shop Scheduling with Genetic Algorithms, In Proc. of the Intl Conference on Genetic Algorithms, 1985. [3] H.-L. Fang, P. Ross, and D. Corne.",
                "A Promising Genetic Algorithm Approach to Job-Shop Scheduling, Rescheduling, and Open-Shop Scheduling Problems , In Proc. on the 5th Intl Conference on Genetic Algorithms, 1993. [4] M. Gary and D. Johnson.",
                "Computers and Intractability: A Guide to the Theory of NP-Completeness, Freeman, 1979. [5] J. Holland.",
                "Adaptation in Natural and Artificial Systems: An Introductory Analysis with Applications to Biology, Control, and Artificial Intelligence, MIT Press, 1992. [6] D. Goldberg.",
                "Genetic Algorithms in Search, Optimization and Machine Learning, Kluwer Academic Publishers, 1989. [7] Business Processes in a Web Services World, www-128.ibm.com/developerworks/ webservices/library/ws-bpelwp/. [8] G. Soundararajan, K. Manassiev, J. Chen, A. Goel, and C. Amza.",
                "Back-end Databases in Shared Dynamic Content Server Clusters, In Proc. of the IEEE Intl Conference on Autonomic Computing, 2005. [9] B. Srivastava and J. Koehler.",
                "Web Service Composition Current Solutions and Open Problems, ICAP, 2003. [10] B. Urgaonkar, P. Shenoy, A. Chandra, and P. Goyal.",
                "Dynamic Provisioning of Multi-Tier Internet Applications, In Proc. of the IEEE Intl Conference on Autonomic Computing, 2005. [11] L. Zeng, B. Benatallah, M. Dumas, J. Kalagnanam, and Q. Sheng.",
                "Quality Driven Web Services Composition, In Proc. of the WWW Conference, 2003. 35"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [],
            "translated_text": "",
            "candidates": [],
            "error": [
                []
            ]
        },
        "web service": {
            "translated_key": "servicios web",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Heuristics-Based Scheduling of Composite <br>web service</br> Workloads Thomas Phan Wen-Syan Li IBM Almaden Research Center 650 Harry Rd.",
                "San Jose, CA 95120 {phantom,wsl}@us.ibm.com ABSTRACT Web services can be aggregated to create composite workflows that provide streamlined functionality for human users or other systems.",
                "Although industry standards and recent research have sought to define best practices and to improve end-to-end workflow composition, one area that has not fully been explored is the scheduling of a workflows <br>web service</br> requests to actual service provisioning in a multi-tiered, multi-organisation environment.",
                "This issue is relevant to modern business scenarios where business processes within a workflow must complete within QoS-defined limits.",
                "Because these business processes are <br>web service</br> consumers, service requests must be mapped and scheduled across multiple <br>web service</br> providers, each with its own negotiated service level agreement.",
                "In this paper we provide heuristics for scheduling service requests from multiple business process workflows to <br>web service</br> providers such that a business value metric across all workflows is maximised.",
                "We show that a genetic search algorithm is appropriate to perform this scheduling, and through experimentation we show that our algorithm scales well up to a thousand workflows and produces better mappings than traditional approaches.",
                "Categories and Subject Descriptors C.2.4 [Computer-Communication Networks]: Distributed Systems-distributed applications; D.2.8 [Software Engineering]: Metrics-complexity measures, performance measures 1.",
                "INTRODUCTION Web services can be composed into workflows to provide streamlined end-to-end functionality for human users or other systems.",
                "Although previous research efforts have looked at ways to intelligently automate the composition of web services into workflows (e.g. [1, 9]), an important remaining problem is the assignment of <br>web service</br> requests to the underlying <br>web service</br> providers in a multi-tiered runtime scenario within constraints.",
                "In this paper we address this scheduling problem and examine means to manage a large number of business process workflows in a scalable manner.",
                "The problem of scheduling <br>web service</br> requests to providers is relevant to modern business domains that depend on multi-tiered service provisioning.",
                "Consider the example shown in Figure 1 that illustrates our problem space.",
                "Workflows comprise multiple related business processes that are <br>web service</br> consumers; here we assume that the workflows represent requested service from customers or automated systems and that the workflow has already been composed with an existing choreography toolkit.",
                "These workflows are then submitted to a portal (not shown) that acts as a scheduling agent between the <br>web service</br> consumers and the <br>web service</br> providers.",
                "In this example, a workflow could represent the actions needed to instantiate a vacation itinerary, where one business process requests booking an airline ticket, another business process requests a hotel room, and so forth.",
                "Each of these requests target a particular service type (e.g. airline reservations, hotel reservations, car reservations, etc. ), and for each service type, there are multiple instances of service providers that publish a <br>web service</br> interface.",
                "An important challenge is that the workflows must meet some quality-of-service (QoS) metric, such as end-to-end completion time of all its business processes, and that meeting or failing this goal results in the assignment of a quantitative business value metric for the workflow; intuitively, it is desired that all workflows meet their respective QoS goals.",
                "We further leverage the notion that QoS service agreements are generally agreed-upon between the <br>web service</br> providers and the scheduling agent such that the providers advertise some level of guaranteed QoS to the scheduler based upon runtime conditions such as turnaround time and maximum available concurrency.",
                "The resulting problem is then to schedule and assign the business processes requests for service types to one of the service providers for that type.",
                "The scheduling must be done such that the aggregate business value across all the workflows is maximised.",
                "In Section 3 we state the scenario as a combinatorial problem and utilise a genetic search algorithm [5] to find the best assignment of <br>web service</br> requests to providers.",
                "This approach converges towards an assignment that maximises the overall business value for all the workflows.",
                "In Section 4 we show through experimentation that this search heuristic finds better assignments than other algorithms (greedy, round-robin, and proportional).",
                "Further, this approach allows us to scale the number of simultaneous workflows (up to one thousand workflows in our experiments) and yet still find effective schedules. 2.",
                "RELATED WORK In the context of service assignment and scheduling, [11] maps <br>web service</br> calls to potential servers using linear programming, but their work is concerned with mapping only single workflows; our principal focus is on scalably scheduling multiple workflows (up 30 Service Type SuperHotels.com Business Process Business Process Workflow ... Business Process Business Process ... HostileHostels.com IncredibleInns.com Business Process Business Process Business Process ... Business Process Service Provider SkyHighAirlines.com SuperCrazyFlights.com Business Process . . . . . .",
                "Advertised QoS Service Agreement CarRentalService.com Figure 1: An example scenario demonstrating the interaction between business processes in workflows and <br>web service</br> providers.",
                "Each business process accesses a service type and is then mapped to a service provider for that type. to one thousand as we show later) using different business metrics and a search heuristic. [10] presents a dynamic provisioning approach that uses both predictive and reactive techniques for multi-tiered Internet application delivery.",
                "However, the provisioning techniques do not consider the challenges faced when there are alternative query execution plans and replicated data sources. [8] presents a feedback-based scheduling mechanism for multi-tiered systems with back-end databases, but unlike our work, it assumes a tighter coupling between the various components of the system.",
                "Our work also builds upon prior scheduling research.",
                "The classic job-shop scheduling problem, shown to be NP-complete [4] [3], is similar to ours in that tasks within a job must be scheduled onto machinery (c.f. our scenario is that business processes within a workflow must be scheduled onto <br>web service</br> providers).",
                "The salient differences are that the machines can process only one job at a time (we assume servers can multi-task but with degraded performance and a maximum concurrency level), tasks within a job cannot simultaneously run on different machines (we assume business processes can be assigned to any available server), and the principal metric of performance is the makespan, which is the time for the last task among all the jobs to complete (and as we show later, optimising on the makespan is insufficient for scheduling the business processes, necessitating different metrics). 3.",
                "DESIGN In this section we describe our model and discuss how we can find scheduling assignments using a genetic search algorithm. 3.1 Model We base our model on the simplified scenario shown in Figure 1.",
                "Specifically, we assume that users or automated systems request the execution of a workflow.",
                "The workflows comprise business processes, each of which makes one <br>web service</br> invocation to a service type.",
                "Further, business processes have an ordering in the workflow.",
                "The arrangement and execution of the business processes and the data flow between them are all managed by a composition or choreography tool (e.g. [1, 9]).",
                "Although composition languages can use sophisticated flow-control mechanisms such as conditional branches, for simplicity we assume the processes execute sequentially in a given order.",
                "This scenario can be naturally extended to more complex relationships that can be expressed in BPEL [7], which defines how business processes interact, messages are exchanged, activities are ordered, and exceptions are handled.",
                "Due to space constraints, we focus on the problem space presented here and will extend our model to more advanced deployment scenarios in the future.",
                "Each workflow has a QoS requirement to complete within a specified number of time units (e.g. on the order of seconds, as detailed in the Experiments section).",
                "Upon completion (or failure), the workflow is assigned a business value.",
                "We extended this approach further and considered different types of workflow completion in order to model differentiated QoS levels that can be applied by businesses (for example, to provide tiered customer service).",
                "We say that a workflow is successful if it completes within its QoS requirement, acceptable if it completes within a constant factor κ 31 of its QoS bound (in our experiments we chose κ=3), or failing if it finishes beyond κ times its QoS bound.",
                "For each category, a business value score is assigned to the workflow, with the successful category assigned the highest positive score, followed by acceptable and then failing.",
                "The business value point distribution is non-uniform across workflows, further modelling cases where some workflows are of higher priority than others.",
                "Each service type is implemented by a number of different service providers.",
                "We assume that the providers make service level agreements (SLAs) to guarantee a level of performance defined by the completion time for completing a <br>web service</br> invocation.",
                "Although SLAs can be complex, in this paper we assume for simplicity that the guarantees can take the form of a linear performance degradation under load.",
                "This guarantee is defined by several parameters: α is the expected completion time (for example, on the order of seconds) if the assigned workload of <br>web service</br> requests is less than or equal to β, the maximum concurrency, and if the workload is higher than β, the expected completion for a workload of size ω is α+ γ(ω − β) where γ is a fractional coefficient.",
                "In our experiments we vary α, β, and γ with different distributions.",
                "Ideally, all workflows would be able to finish within their QoS limits and thus maximise the aggregate business value across all workflows.",
                "However, because we model service providers with degrading performance under load, not all workflows will achieve their QoS limit: it may easily be the case that business processes are assigned to providers who are overloaded and cannot complete within the respective workflows QoS limit.",
                "The key research problem, then, is to assign the business processes to the <br>web service</br> providers with the goal of optimising on the aggregate business value of all workflows.",
                "Given that the scope of the optimisation is the entire set of workflows, it may be that the best scheduling assignments may result in some workflows having to fail in order for more workflows to succeed.",
                "This intuitive observation suggests that traditional scheduling approaches such as round-robin or proportional assignments will not fare well, which is what we observe and discuss in Section 4.",
                "On the other hand, an exhaustive search of all the possible assignments will find the best schedule, but the computational complexity is prohibitively high.",
                "Suppose there are W workflows with an average of B business processes per workflow.",
                "Further, in the worst case each business process requests one service type, for which there are P providers.",
                "There are thus W · PB combinations to explore to find the optimal assignments of business processes to providers.",
                "Even for small configurations (e.g.",
                "W =10, B=5, P=10), the computational time for exhaustive search is significant, and in our work we look to scale these parameters.",
                "In the next subsection, discuss how a genetic search algorithm can be used to converge toward the optimum scheduling assignments. 3.2 Genetic algorithm Given an exponential search space of business process assignments to <br>web service</br> providers, the problem is to find the optimal assignment that produces the overall highest aggregate business value across all workflows.",
                "To explore the solution space, we use a genetic algorithm (GA) search heuristic that simulates Darwinian natural selection by having members of a population compete to survive in order to pass their genetic chromosomes onto the next generation; after successive generations, there is a tendency for the chromosomes to converge toward the best combination [5] [6].",
                "Although other search heuristics exist that can solve optimization problems (e.g. simulated annealing or steepest-ascent hillclimbing), the business process scheduling problem fits well with a GA because potential solutions can be represented in a matrix form and allows us to use prior research in effective GA chromosome recombination to form new members of the population (e.g. [2]). 0 1 2 3 4 0 1 2 0 2 1 1 0 1 0 1 0 2 1 2 0 0 1 Figure 2: An example chromosome representing a scheduling assignment of (workflow,service type) → service provider.",
                "Each row represents a workflow, and each column represents a service type.",
                "For example, here there are 3 workflows (0 to 2) and 5 service types (0 to 4).",
                "In workflow 0, any request for service type 3 goes to provider 2.",
                "Note that the service provider identifier is within a range limited to its service type (i.e. its column), so the 2 listed for service type 3 is a different server from server 2 in other columns.",
                "Chromosome representation of a solution.",
                "In Figure 2 we show an example chromosome that encodes one scheduling assignment.",
                "The representation is a 2-dimensional matrix that maps {workflow, service type} to a service provider.",
                "For a business process in workflow i and utilising service type j, the (i, j)th entry in the table is the identifier for the service provider to which the business process is assigned.",
                "Note that the service provider identifier is within a range limited to its service type.",
                "GA execution.",
                "A GA proceeds as follows.",
                "Initially a random set of chromosomes is created for the population.",
                "The chromosomes are evaluated (hashed) to some metric, and the best ones are chosen to be parents.",
                "In our problem, the evaluation produces the net business value across all workflows after executing all business processes once they are assigned to their respective service providers according to the mapping in the chromosome.",
                "The parents recombine to produce children, simulating sexual crossover, and occasionally a mutation may arise which produces new characteristics that were not available in either parent.",
                "The principal idea is that we would like the children to be different from the parents (in order to explore more of the solution space) yet not too different (in order to contain the portions of the chromosome that result in good scheduling assignments).",
                "Note that finding the global optimum is not guaranteed because the recombination and mutation are stochastic.",
                "GA recombination and mutation.",
                "As mentioned, the chromosomes are 2-dimensional matrices that represent scheduling assignments.",
                "To simulate sexual recombination of two chromosomes to produce a new child chromosome, we applied a one-point crossover scheme twice (once along each dimension).",
                "The crossover is best explained by analogy to Cartesian space as follows.",
                "A random point is chosen in the matrix to be coordinate (0, 0).",
                "Matrix elements from quadrants II and IV from the first parent and elements from quadrants I and III from the second parent are used to create the new child.",
                "This approach follows GA best practices by keeping contiguous chromosome segments together as they are transmitted from parent to child.",
                "The uni-chromosome mutation scheme randomly changes one of the service provider assignments to another provider within the available range.",
                "Other recombination and mutation schemes are an area of research in the GA community, and we look to explore new operators in future work.",
                "GA evaluation function.",
                "An important GA component is the evaluation function.",
                "Given a particular chromosome representing one scheduling mapping, the function deterministically calculates the net business value across all workloads.",
                "The business processes in each workload are assigned to service providers, and each providers completion time is calculated based on the service agreement guarantee using the parameters mentioned in Section 3.1, namely the unloaded completion time α, the maximum concur32 rency β, and a coefficient γ that controls the linear performance degradation under heavy load.",
                "Note that the evaluation function can be easily replaced if desired; for example, other evaluation functions can model different service provider guarantees or parallel workflows. 4.",
                "EXPERIMENTS AND RESULTS In this section we show the benefit of using our GA-based scheduler.",
                "Because we wanted to scale the scenarios up to a large number of workflows (up to 1000 in our experiments), we implemented a simulation program that allowed us to vary parameters and to measure the results with different metrics.",
                "The simulator was written in standard C++ and was run on a Linux (Fedora Core) desktop computer running at 2.8 GHz with 1GB of RAM.",
                "We compared our algorithm against alternative candidates: • A well-known round-robin algorithm that assigns each business process in circular fashion to the service providers for a particular service type.",
                "This approach provides the simplest scheme for load-balancing. • A random-proportional algorithm that proportionally assigns business processes to the service providers; that is, for a given service type, the service providers are ranked by their guaranteed completion time, and business processes are assigned proportionally to the providers based on their completion time. (We also tried a proportionality scheme based on both the completion times and maximum concurrency but attained the same results, so only the former schemes results are shown here.) • A strawman greedy algorithm that always assigns business processes to the service provider that has the fastest guaranteed completion time.",
                "This algorithm represents a naive approach based on greedy, local observations of each workflow without taking into consideration all workflows.",
                "In the experiments that follow, all results were averaged across 20 trials, and to help normalise the effects of randomisation used during the GA, each trial started by reading in pre-initialised data from disk.",
                "In Table 1 we list our experimental parameters.",
                "In Figure 3 we show the results of running our GA against the three candidate alternatives.",
                "The x-axis shows the number for workflows scaled up to 1000, and the y-axis shows the aggregate business value for all workflows.",
                "As can be seen, the GA consistently produces the highest business value even as the number of workflows grows; at 1000 workflows, the GA produces a 115% improvement over the next-best alternative. (Note that although we are optimising against the business value metric we defined earlier, genetic algorithms are able to converge towards the optimal value of any metric, as long as the evaluation function can consistently measure a chromosomes value with that metric.)",
                "As expected, the greedy algorithm performs very poorly because it does the worst job at balancing load: all business processes for a given service type are assigned to only one server (the one advertised to have the fastest completion time), and as more business processes arrive, the providers performance degrades linearly.",
                "The round-robin scheme is initially outperformed by the randomproportional scheme up to around 120 workflows (as shown in the magnified graph of Figure 4), but as the number of workflows increases, the round-robin scheme consistently wins over randomproportional.",
                "The reason is that although the random-proportional scheme assigns business processes to providers proportionally according to the advertised completion times (which is a measure of the power of the service provider), even the best providers will eventually reach a real-world maximum concurrency for the large -2000 -1000 0 1000 2000 3000 4000 5000 6000 7000 0 200 400 600 800 1000 Aggregatebusinessvalueacrossallworkflows Total number of workflows Business value scores of scheduling algorithms Genetic algorithm Round robin Random proportional Greedy Figure 3: Net business value scores of different scheduling algorithms. -500 0 500 1000 1500 2000 2500 3000 3500 4000 0 50 100 150 200Aggregatebusinessvalueacrossallworkflows Total number of workflows Business value scores of scheduling algorithms Genetic algorithm Round robin Random proportional Greedy Figure 4: Magnification of the left-most region in Figure 3. number of workflows that we are considering.",
                "For a very large number of workflows, the round-robin scheme is able to better balance the load across all service providers.",
                "To better understand the behaviour resulting from the scheduling assignments, we show the workflow completion results in Figures 5, 6, and 7 for 100, 500, and 900 workflows, respectively.",
                "These figures show the percentage of workflows that are successful (can complete with their QoS limit), acceptable (can complete within κ=3 times their QoS limit), and failed (cannot complete within κ=3 times their QoS limit).",
                "The GA consistently produces the highest percentage of successful workflows (resulting in higher business values for the aggregate set of workflows).",
                "Further, the round-robin scheme produces better results than the random-proportional for a large number of workflows but does not perform as well as the GA.",
                "In Figure 8 we graph the makespan resulting from the same experiments above.",
                "Makespan is a traditional metric from the job scheduling community measuring elapsed time for the last job to complete.",
                "While useful, it does not capture the high-level business value metric that we are optimising against.",
                "Indeed, the makespan is oblivious to the fact that we provide multiple levels of completion (successful, acceptable, and failed) and assign business value scores accordingly.",
                "For completeness, we note that the GA provides the fastest makespan, but it is matched by the round robin algorithm.",
                "The GA produces better business values (as shown in Figure 3) because it is able to search the solution space to find better mappings that produce more successful workflows (as shown in Figures 5 to 7).",
                "We also looked at the effect of the scheduling algorithms on balancing the load.",
                "Figure 9 shows the percentage of services providers that were accessed while the workflows ran.",
                "As expected, the greedy algorithm always hits one service provider; on the other hand, the round-robin algorithm is the fastest to spread the business 33 Experimental parameter Comment Workflows 5 to 1000 Business processes per workflow uniform random: 1 - 10 Service types 10 Service providers per service type uniform random: 1 - 10 Workflow QoS goal uniform random: 10-30 seconds Service provider completion time (α) uniform random: 1 - 12 seconds Service provider maximum concurrency (β) uniform random: 1 - 12 Service provider degradation coefficient (γ) uniform random: 0.1 - 0.9 Business value for successful workflows uniform random: 10 - 50 points Business value for acceptable workflows uniform random: 0 - 10 points Business value for failed workflows uniform random: -10 - 0 points GA: number of parents 20 GA: number of children 80 GA: number of generations 1000 Table 1: Experimental parameters Failed Acceptable (completed but not within QoS) Successful (completed within QoS) 0% 20% 40% 60% 80% 100% RoundRobinRandProportionalGreedyGeneticAlg Percentageofallworkflows Workflow behaviour, 100 workflows Figure 5: Workflow behaviour for 100 workflows.",
                "Failed Acceptable (completed but not within QoS) Successful (completed within QoS) 0% 20% 40% 60% 80% 100% RoundRobinRandProportionalGreedyGeneticAlg Percentageofallworkflows Workflow behaviour, 500 workflows Figure 6: Workflow behaviour for 500 workflows.",
                "Failed Acceptable (completed but not within QoS) Successful (completed within QoS) 0% 20% 40% 60% 80% 100% RoundRobinRandProportionalGreedyGeneticAlg Percentageofallworkflows Workflow behaviour, 500 workflows Figure 7: Workflow behaviour for 900 workflows. 0 50 100 150 200 250 300 0 200 400 600 800 1000 Makespan[seconds] Number of workflows Maximum completion time for all workflows Genetic algorithm Round robin Random proportional Greedy Figure 8: Maximum completion time for all workflows.",
                "This value is the makespan metric used in traditional scheduling research.",
                "Although useful, the makespan does not take into consideration the business value scoring in our problem domain. processes.",
                "Figure 10 is the percentage of accessed service providers (that is, the percentage of service providers represented in Figure 9) that had more assigned business processes than their advertised maximum concurrency.",
                "For example, in the greedy algorithm only one service provider is utilised, and this one provider quickly becomes saturated.",
                "On the other hand, the random-proportional algorithm uses many service providers, but because business processes are proportionally assigned with more assignments going to the better providers, there is a tendency for a smaller percentage of providers to become saturated.",
                "For completeness, we show the performance of the genetic algorithm itself in Figure 11.",
                "The algorithm scales linearly with an increasing number of workflows.",
                "We note that the round-robin, random-proportional, and greedy algorithms all finished within 1 second even for the largest workflow configuration.",
                "However, we feel that the benefit of finding much higher business value scores justifies the running time of the GA; further we would expect that the running time will improve with both software tuning as well as with a computer faster than our off-the-shelf PC. 5.",
                "CONCLUSION Business processes within workflows can be orchestrated to access web services.",
                "In this paper we looked at multi-tiered service provisioning where <br>web service</br> requests to service types can be mapped to different service providers.",
                "The resulting problem is that in order to support a very large number of workflows, the assignment of business process to <br>web service</br> provider must be intelligent.",
                "We used a business value metric to measure the be34 0 0.2 0.4 0.6 0.8 1 0 200 400 600 800 1000 Percentageofallserviceproviders Number of workflows Service providers utilised Genetic algorithm Round robin Random proportional Greedy Figure 9: The percentage of service providers utilized during workload executions.",
                "The Greedy algorithm always hits the one service provider, while the Round Robin algorithm spreads requests evenly across the providers. 0 0.2 0.4 0.6 0.8 1 0 200 400 600 800 1000 Percentageofallserviceproviders Number of workflows Service providers saturated Genetic algorithm Round robin Random proportional Greedy Figure 10: The percentage of service providers that are saturated among those providers who were utilized (that is, percentage of the service providers represented in Figure 9).",
                "A saturated service provider is one whose workload is greater that its advertised maximum concurrency. 0 5 10 15 20 25 0 200 400 600 800 1000 Runningtimeinseconds Total number of workflows Running time of genetic algorithm GA running time Figure 11: Running time of the genetic algorithm. haviour of workflows meeting or failing QoS values, and we optimised our scheduling to maximise the aggregate business value across all workflows.",
                "Since the solution space of scheduler mappings is exponential, we used a genetic search algorithm to search the space and converge toward the best schedule.",
                "With a default configuration for all parameters and using our business value scoring, the GA produced up to 115% business value improvement over the next best algorithm.",
                "Finally, because a genetic algorithm will converge towards the optimal value using any metric (even other than the business value metric we used), we believe our approach has strong potential for continuing work.",
                "In future work, we look to acquire real-world traces of <br>web service</br> instances in order to get better estimates of service agreement guarantees, although we expect that such guarantees between the providers and their consumers are not generally available to the public.",
                "We will also look at other QoS metrics such as CPU and I/O usage.",
                "For example, we can analyse transfer costs with varying bandwidth, latency, data size, and data distribution.",
                "Further, we hope to improve our genetic algorithm and compare it to more scheduler alternatives.",
                "Finally, since our work is complementary to existing work in web services choreography (because we rely on pre-configured workflows), we look to integrate our approach with available <br>web service</br> workflow systems expressed in BPEL. 6.",
                "REFERENCES [1] A. Ankolekar, et al.",
                "DAML-S: Semantic Markup For Web Services, In Proc. of the Intl Semantic Web Working Symposium, 2001. [2] L. Davis.",
                "Job Shop Scheduling with Genetic Algorithms, In Proc. of the Intl Conference on Genetic Algorithms, 1985. [3] H.-L. Fang, P. Ross, and D. Corne.",
                "A Promising Genetic Algorithm Approach to Job-Shop Scheduling, Rescheduling, and Open-Shop Scheduling Problems , In Proc. on the 5th Intl Conference on Genetic Algorithms, 1993. [4] M. Gary and D. Johnson.",
                "Computers and Intractability: A Guide to the Theory of NP-Completeness, Freeman, 1979. [5] J. Holland.",
                "Adaptation in Natural and Artificial Systems: An Introductory Analysis with Applications to Biology, Control, and Artificial Intelligence, MIT Press, 1992. [6] D. Goldberg.",
                "Genetic Algorithms in Search, Optimization and Machine Learning, Kluwer Academic Publishers, 1989. [7] Business Processes in a Web Services World, www-128.ibm.com/developerworks/ webservices/library/ws-bpelwp/. [8] G. Soundararajan, K. Manassiev, J. Chen, A. Goel, and C. Amza.",
                "Back-end Databases in Shared Dynamic Content Server Clusters, In Proc. of the IEEE Intl Conference on Autonomic Computing, 2005. [9] B. Srivastava and J. Koehler.",
                "<br>web service</br> Composition Current Solutions and Open Problems, ICAP, 2003. [10] B. Urgaonkar, P. Shenoy, A. Chandra, and P. Goyal.",
                "Dynamic Provisioning of Multi-Tier Internet Applications, In Proc. of the IEEE Intl Conference on Autonomic Computing, 2005. [11] L. Zeng, B. Benatallah, M. Dumas, J. Kalagnanam, and Q. Sheng.",
                "Quality Driven Web Services Composition, In Proc. of the WWW Conference, 2003. 35"
            ],
            "original_annotated_samples": [
                "Heuristics-Based Scheduling of Composite <br>web service</br> Workloads Thomas Phan Wen-Syan Li IBM Almaden Research Center 650 Harry Rd.",
                "Although industry standards and recent research have sought to define best practices and to improve end-to-end workflow composition, one area that has not fully been explored is the scheduling of a workflows <br>web service</br> requests to actual service provisioning in a multi-tiered, multi-organisation environment.",
                "Because these business processes are <br>web service</br> consumers, service requests must be mapped and scheduled across multiple <br>web service</br> providers, each with its own negotiated service level agreement.",
                "In this paper we provide heuristics for scheduling service requests from multiple business process workflows to <br>web service</br> providers such that a business value metric across all workflows is maximised.",
                "Although previous research efforts have looked at ways to intelligently automate the composition of web services into workflows (e.g. [1, 9]), an important remaining problem is the assignment of <br>web service</br> requests to the underlying <br>web service</br> providers in a multi-tiered runtime scenario within constraints."
            ],
            "translated_annotated_samples": [
                "Programación basada en heurísticas de cargas de trabajo de <br>servicios web</br> compuestos Thomas Phan Wen-Syan Li Centro de Investigación IBM Almaden 650 Harry Rd.",
                "Aunque los estándares de la industria y la investigación reciente han buscado definir las mejores prácticas y mejorar la composición del flujo de trabajo de extremo a extremo, un área que no ha sido completamente explorada es la programación de las solicitudes de <br>servicios web</br> de los flujos de trabajo para la provisión real de servicios en un entorno multinivel y multiorganizacional.",
                "Debido a que estos procesos comerciales son consumidores de <br>servicios web</br>, las solicitudes de servicio deben ser mapeadas y programadas entre múltiples proveedores de <br>servicios web</br>, cada uno con su propio acuerdo de nivel de servicio negociado.",
                "En este documento proporcionamos heurísticas para programar solicitudes de servicio de múltiples flujos de trabajo de procesos comerciales a proveedores de <br>servicios web</br> de manera que se maximice una métrica de valor comercial en todos los flujos de trabajo.",
                "Aunque los esfuerzos de investigación previos han examinado formas de automatizar de manera inteligente la composición de <br>servicios web</br> en flujos de trabajo (por ejemplo, [1, 9]), un problema importante que aún persiste es la asignación de solicitudes de <br>servicios web</br> a los proveedores de servicios web subyacentes en un escenario de tiempo de ejecución multinivel dentro de ciertas restricciones."
            ],
            "translated_text": "Programación basada en heurísticas de cargas de trabajo de <br>servicios web</br> compuestos Thomas Phan Wen-Syan Li Centro de Investigación IBM Almaden 650 Harry Rd. Los servicios web pueden ser agregados para crear flujos de trabajo compuestos que proporcionen funcionalidad simplificada para usuarios humanos u otros sistemas. Aunque los estándares de la industria y la investigación reciente han buscado definir las mejores prácticas y mejorar la composición del flujo de trabajo de extremo a extremo, un área que no ha sido completamente explorada es la programación de las solicitudes de <br>servicios web</br> de los flujos de trabajo para la provisión real de servicios en un entorno multinivel y multiorganizacional. Este problema es relevante para los escenarios empresariales modernos donde los procesos comerciales dentro de un flujo de trabajo deben completarse dentro de los límites definidos por la calidad de servicio (QoS). Debido a que estos procesos comerciales son consumidores de <br>servicios web</br>, las solicitudes de servicio deben ser mapeadas y programadas entre múltiples proveedores de <br>servicios web</br>, cada uno con su propio acuerdo de nivel de servicio negociado. En este documento proporcionamos heurísticas para programar solicitudes de servicio de múltiples flujos de trabajo de procesos comerciales a proveedores de <br>servicios web</br> de manera que se maximice una métrica de valor comercial en todos los flujos de trabajo. Mostramos que un algoritmo de búsqueda genética es apropiado para realizar esta programación, y a través de experimentación demostramos que nuestro algoritmo escala bien hasta mil flujos de trabajo y produce mejores asignaciones que enfoques tradicionales. Categorías y Descriptores de Asignaturas C.2.4 [Redes de Computadoras-Comunicación]: Sistemas Distribuidos-aplicaciones distribuidas; D.2.8 [Ingeniería de Software]: Métricas-medidas de complejidad, medidas de rendimiento 1. INTRODUCCIÓN Los servicios web pueden ser compuestos en flujos de trabajo para proporcionar funcionalidad integrada de principio a fin para usuarios humanos u otros sistemas. Aunque los esfuerzos de investigación previos han examinado formas de automatizar de manera inteligente la composición de <br>servicios web</br> en flujos de trabajo (por ejemplo, [1, 9]), un problema importante que aún persiste es la asignación de solicitudes de <br>servicios web</br> a los proveedores de servicios web subyacentes en un escenario de tiempo de ejecución multinivel dentro de ciertas restricciones. ",
            "candidates": [],
            "error": [
                [
                    ""
                ]
            ]
        },
        "qo": {
            "translated_key": "I'm sorry, but \"qo\" is not a sentence in English. Could you please provide a sentence for me to translate into Spanish?",
            "is_in_text": false,
            "original_annotated_sentences": [
                "Heuristics-Based Scheduling of Composite Web Service Workloads Thomas Phan Wen-Syan Li IBM Almaden Research Center 650 Harry Rd.",
                "San Jose, CA 95120 {phantom,wsl}@us.ibm.com ABSTRACT Web services can be aggregated to create composite workflows that provide streamlined functionality for human users or other systems.",
                "Although industry standards and recent research have sought to define best practices and to improve end-to-end workflow composition, one area that has not fully been explored is the scheduling of a workflows web service requests to actual service provisioning in a multi-tiered, multi-organisation environment.",
                "This issue is relevant to modern business scenarios where business processes within a workflow must complete within QoS-defined limits.",
                "Because these business processes are web service consumers, service requests must be mapped and scheduled across multiple web service providers, each with its own negotiated service level agreement.",
                "In this paper we provide heuristics for scheduling service requests from multiple business process workflows to web service providers such that a business value metric across all workflows is maximised.",
                "We show that a genetic search algorithm is appropriate to perform this scheduling, and through experimentation we show that our algorithm scales well up to a thousand workflows and produces better mappings than traditional approaches.",
                "Categories and Subject Descriptors C.2.4 [Computer-Communication Networks]: Distributed Systems-distributed applications; D.2.8 [Software Engineering]: Metrics-complexity measures, performance measures 1.",
                "INTRODUCTION Web services can be composed into workflows to provide streamlined end-to-end functionality for human users or other systems.",
                "Although previous research efforts have looked at ways to intelligently automate the composition of web services into workflows (e.g. [1, 9]), an important remaining problem is the assignment of web service requests to the underlying web service providers in a multi-tiered runtime scenario within constraints.",
                "In this paper we address this scheduling problem and examine means to manage a large number of business process workflows in a scalable manner.",
                "The problem of scheduling web service requests to providers is relevant to modern business domains that depend on multi-tiered service provisioning.",
                "Consider the example shown in Figure 1 that illustrates our problem space.",
                "Workflows comprise multiple related business processes that are web service consumers; here we assume that the workflows represent requested service from customers or automated systems and that the workflow has already been composed with an existing choreography toolkit.",
                "These workflows are then submitted to a portal (not shown) that acts as a scheduling agent between the web service consumers and the web service providers.",
                "In this example, a workflow could represent the actions needed to instantiate a vacation itinerary, where one business process requests booking an airline ticket, another business process requests a hotel room, and so forth.",
                "Each of these requests target a particular service type (e.g. airline reservations, hotel reservations, car reservations, etc. ), and for each service type, there are multiple instances of service providers that publish a web service interface.",
                "An important challenge is that the workflows must meet some quality-of-service (QoS) metric, such as end-to-end completion time of all its business processes, and that meeting or failing this goal results in the assignment of a quantitative business value metric for the workflow; intuitively, it is desired that all workflows meet their respective QoS goals.",
                "We further leverage the notion that QoS service agreements are generally agreed-upon between the web service providers and the scheduling agent such that the providers advertise some level of guaranteed QoS to the scheduler based upon runtime conditions such as turnaround time and maximum available concurrency.",
                "The resulting problem is then to schedule and assign the business processes requests for service types to one of the service providers for that type.",
                "The scheduling must be done such that the aggregate business value across all the workflows is maximised.",
                "In Section 3 we state the scenario as a combinatorial problem and utilise a genetic search algorithm [5] to find the best assignment of web service requests to providers.",
                "This approach converges towards an assignment that maximises the overall business value for all the workflows.",
                "In Section 4 we show through experimentation that this search heuristic finds better assignments than other algorithms (greedy, round-robin, and proportional).",
                "Further, this approach allows us to scale the number of simultaneous workflows (up to one thousand workflows in our experiments) and yet still find effective schedules. 2.",
                "RELATED WORK In the context of service assignment and scheduling, [11] maps web service calls to potential servers using linear programming, but their work is concerned with mapping only single workflows; our principal focus is on scalably scheduling multiple workflows (up 30 Service Type SuperHotels.com Business Process Business Process Workflow ... Business Process Business Process ... HostileHostels.com IncredibleInns.com Business Process Business Process Business Process ... Business Process Service Provider SkyHighAirlines.com SuperCrazyFlights.com Business Process . . . . . .",
                "Advertised QoS Service Agreement CarRentalService.com Figure 1: An example scenario demonstrating the interaction between business processes in workflows and web service providers.",
                "Each business process accesses a service type and is then mapped to a service provider for that type. to one thousand as we show later) using different business metrics and a search heuristic. [10] presents a dynamic provisioning approach that uses both predictive and reactive techniques for multi-tiered Internet application delivery.",
                "However, the provisioning techniques do not consider the challenges faced when there are alternative query execution plans and replicated data sources. [8] presents a feedback-based scheduling mechanism for multi-tiered systems with back-end databases, but unlike our work, it assumes a tighter coupling between the various components of the system.",
                "Our work also builds upon prior scheduling research.",
                "The classic job-shop scheduling problem, shown to be NP-complete [4] [3], is similar to ours in that tasks within a job must be scheduled onto machinery (c.f. our scenario is that business processes within a workflow must be scheduled onto web service providers).",
                "The salient differences are that the machines can process only one job at a time (we assume servers can multi-task but with degraded performance and a maximum concurrency level), tasks within a job cannot simultaneously run on different machines (we assume business processes can be assigned to any available server), and the principal metric of performance is the makespan, which is the time for the last task among all the jobs to complete (and as we show later, optimising on the makespan is insufficient for scheduling the business processes, necessitating different metrics). 3.",
                "DESIGN In this section we describe our model and discuss how we can find scheduling assignments using a genetic search algorithm. 3.1 Model We base our model on the simplified scenario shown in Figure 1.",
                "Specifically, we assume that users or automated systems request the execution of a workflow.",
                "The workflows comprise business processes, each of which makes one web service invocation to a service type.",
                "Further, business processes have an ordering in the workflow.",
                "The arrangement and execution of the business processes and the data flow between them are all managed by a composition or choreography tool (e.g. [1, 9]).",
                "Although composition languages can use sophisticated flow-control mechanisms such as conditional branches, for simplicity we assume the processes execute sequentially in a given order.",
                "This scenario can be naturally extended to more complex relationships that can be expressed in BPEL [7], which defines how business processes interact, messages are exchanged, activities are ordered, and exceptions are handled.",
                "Due to space constraints, we focus on the problem space presented here and will extend our model to more advanced deployment scenarios in the future.",
                "Each workflow has a QoS requirement to complete within a specified number of time units (e.g. on the order of seconds, as detailed in the Experiments section).",
                "Upon completion (or failure), the workflow is assigned a business value.",
                "We extended this approach further and considered different types of workflow completion in order to model differentiated QoS levels that can be applied by businesses (for example, to provide tiered customer service).",
                "We say that a workflow is successful if it completes within its QoS requirement, acceptable if it completes within a constant factor κ 31 of its QoS bound (in our experiments we chose κ=3), or failing if it finishes beyond κ times its QoS bound.",
                "For each category, a business value score is assigned to the workflow, with the successful category assigned the highest positive score, followed by acceptable and then failing.",
                "The business value point distribution is non-uniform across workflows, further modelling cases where some workflows are of higher priority than others.",
                "Each service type is implemented by a number of different service providers.",
                "We assume that the providers make service level agreements (SLAs) to guarantee a level of performance defined by the completion time for completing a web service invocation.",
                "Although SLAs can be complex, in this paper we assume for simplicity that the guarantees can take the form of a linear performance degradation under load.",
                "This guarantee is defined by several parameters: α is the expected completion time (for example, on the order of seconds) if the assigned workload of web service requests is less than or equal to β, the maximum concurrency, and if the workload is higher than β, the expected completion for a workload of size ω is α+ γ(ω − β) where γ is a fractional coefficient.",
                "In our experiments we vary α, β, and γ with different distributions.",
                "Ideally, all workflows would be able to finish within their QoS limits and thus maximise the aggregate business value across all workflows.",
                "However, because we model service providers with degrading performance under load, not all workflows will achieve their QoS limit: it may easily be the case that business processes are assigned to providers who are overloaded and cannot complete within the respective workflows QoS limit.",
                "The key research problem, then, is to assign the business processes to the web service providers with the goal of optimising on the aggregate business value of all workflows.",
                "Given that the scope of the optimisation is the entire set of workflows, it may be that the best scheduling assignments may result in some workflows having to fail in order for more workflows to succeed.",
                "This intuitive observation suggests that traditional scheduling approaches such as round-robin or proportional assignments will not fare well, which is what we observe and discuss in Section 4.",
                "On the other hand, an exhaustive search of all the possible assignments will find the best schedule, but the computational complexity is prohibitively high.",
                "Suppose there are W workflows with an average of B business processes per workflow.",
                "Further, in the worst case each business process requests one service type, for which there are P providers.",
                "There are thus W · PB combinations to explore to find the optimal assignments of business processes to providers.",
                "Even for small configurations (e.g.",
                "W =10, B=5, P=10), the computational time for exhaustive search is significant, and in our work we look to scale these parameters.",
                "In the next subsection, discuss how a genetic search algorithm can be used to converge toward the optimum scheduling assignments. 3.2 Genetic algorithm Given an exponential search space of business process assignments to web service providers, the problem is to find the optimal assignment that produces the overall highest aggregate business value across all workflows.",
                "To explore the solution space, we use a genetic algorithm (GA) search heuristic that simulates Darwinian natural selection by having members of a population compete to survive in order to pass their genetic chromosomes onto the next generation; after successive generations, there is a tendency for the chromosomes to converge toward the best combination [5] [6].",
                "Although other search heuristics exist that can solve optimization problems (e.g. simulated annealing or steepest-ascent hillclimbing), the business process scheduling problem fits well with a GA because potential solutions can be represented in a matrix form and allows us to use prior research in effective GA chromosome recombination to form new members of the population (e.g. [2]). 0 1 2 3 4 0 1 2 0 2 1 1 0 1 0 1 0 2 1 2 0 0 1 Figure 2: An example chromosome representing a scheduling assignment of (workflow,service type) → service provider.",
                "Each row represents a workflow, and each column represents a service type.",
                "For example, here there are 3 workflows (0 to 2) and 5 service types (0 to 4).",
                "In workflow 0, any request for service type 3 goes to provider 2.",
                "Note that the service provider identifier is within a range limited to its service type (i.e. its column), so the 2 listed for service type 3 is a different server from server 2 in other columns.",
                "Chromosome representation of a solution.",
                "In Figure 2 we show an example chromosome that encodes one scheduling assignment.",
                "The representation is a 2-dimensional matrix that maps {workflow, service type} to a service provider.",
                "For a business process in workflow i and utilising service type j, the (i, j)th entry in the table is the identifier for the service provider to which the business process is assigned.",
                "Note that the service provider identifier is within a range limited to its service type.",
                "GA execution.",
                "A GA proceeds as follows.",
                "Initially a random set of chromosomes is created for the population.",
                "The chromosomes are evaluated (hashed) to some metric, and the best ones are chosen to be parents.",
                "In our problem, the evaluation produces the net business value across all workflows after executing all business processes once they are assigned to their respective service providers according to the mapping in the chromosome.",
                "The parents recombine to produce children, simulating sexual crossover, and occasionally a mutation may arise which produces new characteristics that were not available in either parent.",
                "The principal idea is that we would like the children to be different from the parents (in order to explore more of the solution space) yet not too different (in order to contain the portions of the chromosome that result in good scheduling assignments).",
                "Note that finding the global optimum is not guaranteed because the recombination and mutation are stochastic.",
                "GA recombination and mutation.",
                "As mentioned, the chromosomes are 2-dimensional matrices that represent scheduling assignments.",
                "To simulate sexual recombination of two chromosomes to produce a new child chromosome, we applied a one-point crossover scheme twice (once along each dimension).",
                "The crossover is best explained by analogy to Cartesian space as follows.",
                "A random point is chosen in the matrix to be coordinate (0, 0).",
                "Matrix elements from quadrants II and IV from the first parent and elements from quadrants I and III from the second parent are used to create the new child.",
                "This approach follows GA best practices by keeping contiguous chromosome segments together as they are transmitted from parent to child.",
                "The uni-chromosome mutation scheme randomly changes one of the service provider assignments to another provider within the available range.",
                "Other recombination and mutation schemes are an area of research in the GA community, and we look to explore new operators in future work.",
                "GA evaluation function.",
                "An important GA component is the evaluation function.",
                "Given a particular chromosome representing one scheduling mapping, the function deterministically calculates the net business value across all workloads.",
                "The business processes in each workload are assigned to service providers, and each providers completion time is calculated based on the service agreement guarantee using the parameters mentioned in Section 3.1, namely the unloaded completion time α, the maximum concur32 rency β, and a coefficient γ that controls the linear performance degradation under heavy load.",
                "Note that the evaluation function can be easily replaced if desired; for example, other evaluation functions can model different service provider guarantees or parallel workflows. 4.",
                "EXPERIMENTS AND RESULTS In this section we show the benefit of using our GA-based scheduler.",
                "Because we wanted to scale the scenarios up to a large number of workflows (up to 1000 in our experiments), we implemented a simulation program that allowed us to vary parameters and to measure the results with different metrics.",
                "The simulator was written in standard C++ and was run on a Linux (Fedora Core) desktop computer running at 2.8 GHz with 1GB of RAM.",
                "We compared our algorithm against alternative candidates: • A well-known round-robin algorithm that assigns each business process in circular fashion to the service providers for a particular service type.",
                "This approach provides the simplest scheme for load-balancing. • A random-proportional algorithm that proportionally assigns business processes to the service providers; that is, for a given service type, the service providers are ranked by their guaranteed completion time, and business processes are assigned proportionally to the providers based on their completion time. (We also tried a proportionality scheme based on both the completion times and maximum concurrency but attained the same results, so only the former schemes results are shown here.) • A strawman greedy algorithm that always assigns business processes to the service provider that has the fastest guaranteed completion time.",
                "This algorithm represents a naive approach based on greedy, local observations of each workflow without taking into consideration all workflows.",
                "In the experiments that follow, all results were averaged across 20 trials, and to help normalise the effects of randomisation used during the GA, each trial started by reading in pre-initialised data from disk.",
                "In Table 1 we list our experimental parameters.",
                "In Figure 3 we show the results of running our GA against the three candidate alternatives.",
                "The x-axis shows the number for workflows scaled up to 1000, and the y-axis shows the aggregate business value for all workflows.",
                "As can be seen, the GA consistently produces the highest business value even as the number of workflows grows; at 1000 workflows, the GA produces a 115% improvement over the next-best alternative. (Note that although we are optimising against the business value metric we defined earlier, genetic algorithms are able to converge towards the optimal value of any metric, as long as the evaluation function can consistently measure a chromosomes value with that metric.)",
                "As expected, the greedy algorithm performs very poorly because it does the worst job at balancing load: all business processes for a given service type are assigned to only one server (the one advertised to have the fastest completion time), and as more business processes arrive, the providers performance degrades linearly.",
                "The round-robin scheme is initially outperformed by the randomproportional scheme up to around 120 workflows (as shown in the magnified graph of Figure 4), but as the number of workflows increases, the round-robin scheme consistently wins over randomproportional.",
                "The reason is that although the random-proportional scheme assigns business processes to providers proportionally according to the advertised completion times (which is a measure of the power of the service provider), even the best providers will eventually reach a real-world maximum concurrency for the large -2000 -1000 0 1000 2000 3000 4000 5000 6000 7000 0 200 400 600 800 1000 Aggregatebusinessvalueacrossallworkflows Total number of workflows Business value scores of scheduling algorithms Genetic algorithm Round robin Random proportional Greedy Figure 3: Net business value scores of different scheduling algorithms. -500 0 500 1000 1500 2000 2500 3000 3500 4000 0 50 100 150 200Aggregatebusinessvalueacrossallworkflows Total number of workflows Business value scores of scheduling algorithms Genetic algorithm Round robin Random proportional Greedy Figure 4: Magnification of the left-most region in Figure 3. number of workflows that we are considering.",
                "For a very large number of workflows, the round-robin scheme is able to better balance the load across all service providers.",
                "To better understand the behaviour resulting from the scheduling assignments, we show the workflow completion results in Figures 5, 6, and 7 for 100, 500, and 900 workflows, respectively.",
                "These figures show the percentage of workflows that are successful (can complete with their QoS limit), acceptable (can complete within κ=3 times their QoS limit), and failed (cannot complete within κ=3 times their QoS limit).",
                "The GA consistently produces the highest percentage of successful workflows (resulting in higher business values for the aggregate set of workflows).",
                "Further, the round-robin scheme produces better results than the random-proportional for a large number of workflows but does not perform as well as the GA.",
                "In Figure 8 we graph the makespan resulting from the same experiments above.",
                "Makespan is a traditional metric from the job scheduling community measuring elapsed time for the last job to complete.",
                "While useful, it does not capture the high-level business value metric that we are optimising against.",
                "Indeed, the makespan is oblivious to the fact that we provide multiple levels of completion (successful, acceptable, and failed) and assign business value scores accordingly.",
                "For completeness, we note that the GA provides the fastest makespan, but it is matched by the round robin algorithm.",
                "The GA produces better business values (as shown in Figure 3) because it is able to search the solution space to find better mappings that produce more successful workflows (as shown in Figures 5 to 7).",
                "We also looked at the effect of the scheduling algorithms on balancing the load.",
                "Figure 9 shows the percentage of services providers that were accessed while the workflows ran.",
                "As expected, the greedy algorithm always hits one service provider; on the other hand, the round-robin algorithm is the fastest to spread the business 33 Experimental parameter Comment Workflows 5 to 1000 Business processes per workflow uniform random: 1 - 10 Service types 10 Service providers per service type uniform random: 1 - 10 Workflow QoS goal uniform random: 10-30 seconds Service provider completion time (α) uniform random: 1 - 12 seconds Service provider maximum concurrency (β) uniform random: 1 - 12 Service provider degradation coefficient (γ) uniform random: 0.1 - 0.9 Business value for successful workflows uniform random: 10 - 50 points Business value for acceptable workflows uniform random: 0 - 10 points Business value for failed workflows uniform random: -10 - 0 points GA: number of parents 20 GA: number of children 80 GA: number of generations 1000 Table 1: Experimental parameters Failed Acceptable (completed but not within QoS) Successful (completed within QoS) 0% 20% 40% 60% 80% 100% RoundRobinRandProportionalGreedyGeneticAlg Percentageofallworkflows Workflow behaviour, 100 workflows Figure 5: Workflow behaviour for 100 workflows.",
                "Failed Acceptable (completed but not within QoS) Successful (completed within QoS) 0% 20% 40% 60% 80% 100% RoundRobinRandProportionalGreedyGeneticAlg Percentageofallworkflows Workflow behaviour, 500 workflows Figure 6: Workflow behaviour for 500 workflows.",
                "Failed Acceptable (completed but not within QoS) Successful (completed within QoS) 0% 20% 40% 60% 80% 100% RoundRobinRandProportionalGreedyGeneticAlg Percentageofallworkflows Workflow behaviour, 500 workflows Figure 7: Workflow behaviour for 900 workflows. 0 50 100 150 200 250 300 0 200 400 600 800 1000 Makespan[seconds] Number of workflows Maximum completion time for all workflows Genetic algorithm Round robin Random proportional Greedy Figure 8: Maximum completion time for all workflows.",
                "This value is the makespan metric used in traditional scheduling research.",
                "Although useful, the makespan does not take into consideration the business value scoring in our problem domain. processes.",
                "Figure 10 is the percentage of accessed service providers (that is, the percentage of service providers represented in Figure 9) that had more assigned business processes than their advertised maximum concurrency.",
                "For example, in the greedy algorithm only one service provider is utilised, and this one provider quickly becomes saturated.",
                "On the other hand, the random-proportional algorithm uses many service providers, but because business processes are proportionally assigned with more assignments going to the better providers, there is a tendency for a smaller percentage of providers to become saturated.",
                "For completeness, we show the performance of the genetic algorithm itself in Figure 11.",
                "The algorithm scales linearly with an increasing number of workflows.",
                "We note that the round-robin, random-proportional, and greedy algorithms all finished within 1 second even for the largest workflow configuration.",
                "However, we feel that the benefit of finding much higher business value scores justifies the running time of the GA; further we would expect that the running time will improve with both software tuning as well as with a computer faster than our off-the-shelf PC. 5.",
                "CONCLUSION Business processes within workflows can be orchestrated to access web services.",
                "In this paper we looked at multi-tiered service provisioning where web service requests to service types can be mapped to different service providers.",
                "The resulting problem is that in order to support a very large number of workflows, the assignment of business process to web service provider must be intelligent.",
                "We used a business value metric to measure the be34 0 0.2 0.4 0.6 0.8 1 0 200 400 600 800 1000 Percentageofallserviceproviders Number of workflows Service providers utilised Genetic algorithm Round robin Random proportional Greedy Figure 9: The percentage of service providers utilized during workload executions.",
                "The Greedy algorithm always hits the one service provider, while the Round Robin algorithm spreads requests evenly across the providers. 0 0.2 0.4 0.6 0.8 1 0 200 400 600 800 1000 Percentageofallserviceproviders Number of workflows Service providers saturated Genetic algorithm Round robin Random proportional Greedy Figure 10: The percentage of service providers that are saturated among those providers who were utilized (that is, percentage of the service providers represented in Figure 9).",
                "A saturated service provider is one whose workload is greater that its advertised maximum concurrency. 0 5 10 15 20 25 0 200 400 600 800 1000 Runningtimeinseconds Total number of workflows Running time of genetic algorithm GA running time Figure 11: Running time of the genetic algorithm. haviour of workflows meeting or failing QoS values, and we optimised our scheduling to maximise the aggregate business value across all workflows.",
                "Since the solution space of scheduler mappings is exponential, we used a genetic search algorithm to search the space and converge toward the best schedule.",
                "With a default configuration for all parameters and using our business value scoring, the GA produced up to 115% business value improvement over the next best algorithm.",
                "Finally, because a genetic algorithm will converge towards the optimal value using any metric (even other than the business value metric we used), we believe our approach has strong potential for continuing work.",
                "In future work, we look to acquire real-world traces of web service instances in order to get better estimates of service agreement guarantees, although we expect that such guarantees between the providers and their consumers are not generally available to the public.",
                "We will also look at other QoS metrics such as CPU and I/O usage.",
                "For example, we can analyse transfer costs with varying bandwidth, latency, data size, and data distribution.",
                "Further, we hope to improve our genetic algorithm and compare it to more scheduler alternatives.",
                "Finally, since our work is complementary to existing work in web services choreography (because we rely on pre-configured workflows), we look to integrate our approach with available web service workflow systems expressed in BPEL. 6.",
                "REFERENCES [1] A. Ankolekar, et al.",
                "DAML-S: Semantic Markup For Web Services, In Proc. of the Intl Semantic Web Working Symposium, 2001. [2] L. Davis.",
                "Job Shop Scheduling with Genetic Algorithms, In Proc. of the Intl Conference on Genetic Algorithms, 1985. [3] H.-L. Fang, P. Ross, and D. Corne.",
                "A Promising Genetic Algorithm Approach to Job-Shop Scheduling, Rescheduling, and Open-Shop Scheduling Problems , In Proc. on the 5th Intl Conference on Genetic Algorithms, 1993. [4] M. Gary and D. Johnson.",
                "Computers and Intractability: A Guide to the Theory of NP-Completeness, Freeman, 1979. [5] J. Holland.",
                "Adaptation in Natural and Artificial Systems: An Introductory Analysis with Applications to Biology, Control, and Artificial Intelligence, MIT Press, 1992. [6] D. Goldberg.",
                "Genetic Algorithms in Search, Optimization and Machine Learning, Kluwer Academic Publishers, 1989. [7] Business Processes in a Web Services World, www-128.ibm.com/developerworks/ webservices/library/ws-bpelwp/. [8] G. Soundararajan, K. Manassiev, J. Chen, A. Goel, and C. Amza.",
                "Back-end Databases in Shared Dynamic Content Server Clusters, In Proc. of the IEEE Intl Conference on Autonomic Computing, 2005. [9] B. Srivastava and J. Koehler.",
                "Web Service Composition Current Solutions and Open Problems, ICAP, 2003. [10] B. Urgaonkar, P. Shenoy, A. Chandra, and P. Goyal.",
                "Dynamic Provisioning of Multi-Tier Internet Applications, In Proc. of the IEEE Intl Conference on Autonomic Computing, 2005. [11] L. Zeng, B. Benatallah, M. Dumas, J. Kalagnanam, and Q. Sheng.",
                "Quality Driven Web Services Composition, In Proc. of the WWW Conference, 2003. 35"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [],
            "translated_text": "",
            "candidates": [],
            "error": [
                []
            ]
        },
        "workﬂows": {
            "translated_key": "flujos de trabajo",
            "is_in_text": false,
            "original_annotated_sentences": [
                "Heuristics-Based Scheduling of Composite Web Service Workloads Thomas Phan Wen-Syan Li IBM Almaden Research Center 650 Harry Rd.",
                "San Jose, CA 95120 {phantom,wsl}@us.ibm.com ABSTRACT Web services can be aggregated to create composite workflows that provide streamlined functionality for human users or other systems.",
                "Although industry standards and recent research have sought to define best practices and to improve end-to-end workflow composition, one area that has not fully been explored is the scheduling of a workflows web service requests to actual service provisioning in a multi-tiered, multi-organisation environment.",
                "This issue is relevant to modern business scenarios where business processes within a workflow must complete within QoS-defined limits.",
                "Because these business processes are web service consumers, service requests must be mapped and scheduled across multiple web service providers, each with its own negotiated service level agreement.",
                "In this paper we provide heuristics for scheduling service requests from multiple business process workflows to web service providers such that a business value metric across all workflows is maximised.",
                "We show that a genetic search algorithm is appropriate to perform this scheduling, and through experimentation we show that our algorithm scales well up to a thousand workflows and produces better mappings than traditional approaches.",
                "Categories and Subject Descriptors C.2.4 [Computer-Communication Networks]: Distributed Systems-distributed applications; D.2.8 [Software Engineering]: Metrics-complexity measures, performance measures 1.",
                "INTRODUCTION Web services can be composed into workflows to provide streamlined end-to-end functionality for human users or other systems.",
                "Although previous research efforts have looked at ways to intelligently automate the composition of web services into workflows (e.g. [1, 9]), an important remaining problem is the assignment of web service requests to the underlying web service providers in a multi-tiered runtime scenario within constraints.",
                "In this paper we address this scheduling problem and examine means to manage a large number of business process workflows in a scalable manner.",
                "The problem of scheduling web service requests to providers is relevant to modern business domains that depend on multi-tiered service provisioning.",
                "Consider the example shown in Figure 1 that illustrates our problem space.",
                "Workflows comprise multiple related business processes that are web service consumers; here we assume that the workflows represent requested service from customers or automated systems and that the workflow has already been composed with an existing choreography toolkit.",
                "These workflows are then submitted to a portal (not shown) that acts as a scheduling agent between the web service consumers and the web service providers.",
                "In this example, a workflow could represent the actions needed to instantiate a vacation itinerary, where one business process requests booking an airline ticket, another business process requests a hotel room, and so forth.",
                "Each of these requests target a particular service type (e.g. airline reservations, hotel reservations, car reservations, etc. ), and for each service type, there are multiple instances of service providers that publish a web service interface.",
                "An important challenge is that the workflows must meet some quality-of-service (QoS) metric, such as end-to-end completion time of all its business processes, and that meeting or failing this goal results in the assignment of a quantitative business value metric for the workflow; intuitively, it is desired that all workflows meet their respective QoS goals.",
                "We further leverage the notion that QoS service agreements are generally agreed-upon between the web service providers and the scheduling agent such that the providers advertise some level of guaranteed QoS to the scheduler based upon runtime conditions such as turnaround time and maximum available concurrency.",
                "The resulting problem is then to schedule and assign the business processes requests for service types to one of the service providers for that type.",
                "The scheduling must be done such that the aggregate business value across all the workflows is maximised.",
                "In Section 3 we state the scenario as a combinatorial problem and utilise a genetic search algorithm [5] to find the best assignment of web service requests to providers.",
                "This approach converges towards an assignment that maximises the overall business value for all the workflows.",
                "In Section 4 we show through experimentation that this search heuristic finds better assignments than other algorithms (greedy, round-robin, and proportional).",
                "Further, this approach allows us to scale the number of simultaneous workflows (up to one thousand workflows in our experiments) and yet still find effective schedules. 2.",
                "RELATED WORK In the context of service assignment and scheduling, [11] maps web service calls to potential servers using linear programming, but their work is concerned with mapping only single workflows; our principal focus is on scalably scheduling multiple workflows (up 30 Service Type SuperHotels.com Business Process Business Process Workflow ... Business Process Business Process ... HostileHostels.com IncredibleInns.com Business Process Business Process Business Process ... Business Process Service Provider SkyHighAirlines.com SuperCrazyFlights.com Business Process . . . . . .",
                "Advertised QoS Service Agreement CarRentalService.com Figure 1: An example scenario demonstrating the interaction between business processes in workflows and web service providers.",
                "Each business process accesses a service type and is then mapped to a service provider for that type. to one thousand as we show later) using different business metrics and a search heuristic. [10] presents a dynamic provisioning approach that uses both predictive and reactive techniques for multi-tiered Internet application delivery.",
                "However, the provisioning techniques do not consider the challenges faced when there are alternative query execution plans and replicated data sources. [8] presents a feedback-based scheduling mechanism for multi-tiered systems with back-end databases, but unlike our work, it assumes a tighter coupling between the various components of the system.",
                "Our work also builds upon prior scheduling research.",
                "The classic job-shop scheduling problem, shown to be NP-complete [4] [3], is similar to ours in that tasks within a job must be scheduled onto machinery (c.f. our scenario is that business processes within a workflow must be scheduled onto web service providers).",
                "The salient differences are that the machines can process only one job at a time (we assume servers can multi-task but with degraded performance and a maximum concurrency level), tasks within a job cannot simultaneously run on different machines (we assume business processes can be assigned to any available server), and the principal metric of performance is the makespan, which is the time for the last task among all the jobs to complete (and as we show later, optimising on the makespan is insufficient for scheduling the business processes, necessitating different metrics). 3.",
                "DESIGN In this section we describe our model and discuss how we can find scheduling assignments using a genetic search algorithm. 3.1 Model We base our model on the simplified scenario shown in Figure 1.",
                "Specifically, we assume that users or automated systems request the execution of a workflow.",
                "The workflows comprise business processes, each of which makes one web service invocation to a service type.",
                "Further, business processes have an ordering in the workflow.",
                "The arrangement and execution of the business processes and the data flow between them are all managed by a composition or choreography tool (e.g. [1, 9]).",
                "Although composition languages can use sophisticated flow-control mechanisms such as conditional branches, for simplicity we assume the processes execute sequentially in a given order.",
                "This scenario can be naturally extended to more complex relationships that can be expressed in BPEL [7], which defines how business processes interact, messages are exchanged, activities are ordered, and exceptions are handled.",
                "Due to space constraints, we focus on the problem space presented here and will extend our model to more advanced deployment scenarios in the future.",
                "Each workflow has a QoS requirement to complete within a specified number of time units (e.g. on the order of seconds, as detailed in the Experiments section).",
                "Upon completion (or failure), the workflow is assigned a business value.",
                "We extended this approach further and considered different types of workflow completion in order to model differentiated QoS levels that can be applied by businesses (for example, to provide tiered customer service).",
                "We say that a workflow is successful if it completes within its QoS requirement, acceptable if it completes within a constant factor κ 31 of its QoS bound (in our experiments we chose κ=3), or failing if it finishes beyond κ times its QoS bound.",
                "For each category, a business value score is assigned to the workflow, with the successful category assigned the highest positive score, followed by acceptable and then failing.",
                "The business value point distribution is non-uniform across workflows, further modelling cases where some workflows are of higher priority than others.",
                "Each service type is implemented by a number of different service providers.",
                "We assume that the providers make service level agreements (SLAs) to guarantee a level of performance defined by the completion time for completing a web service invocation.",
                "Although SLAs can be complex, in this paper we assume for simplicity that the guarantees can take the form of a linear performance degradation under load.",
                "This guarantee is defined by several parameters: α is the expected completion time (for example, on the order of seconds) if the assigned workload of web service requests is less than or equal to β, the maximum concurrency, and if the workload is higher than β, the expected completion for a workload of size ω is α+ γ(ω − β) where γ is a fractional coefficient.",
                "In our experiments we vary α, β, and γ with different distributions.",
                "Ideally, all workflows would be able to finish within their QoS limits and thus maximise the aggregate business value across all workflows.",
                "However, because we model service providers with degrading performance under load, not all workflows will achieve their QoS limit: it may easily be the case that business processes are assigned to providers who are overloaded and cannot complete within the respective workflows QoS limit.",
                "The key research problem, then, is to assign the business processes to the web service providers with the goal of optimising on the aggregate business value of all workflows.",
                "Given that the scope of the optimisation is the entire set of workflows, it may be that the best scheduling assignments may result in some workflows having to fail in order for more workflows to succeed.",
                "This intuitive observation suggests that traditional scheduling approaches such as round-robin or proportional assignments will not fare well, which is what we observe and discuss in Section 4.",
                "On the other hand, an exhaustive search of all the possible assignments will find the best schedule, but the computational complexity is prohibitively high.",
                "Suppose there are W workflows with an average of B business processes per workflow.",
                "Further, in the worst case each business process requests one service type, for which there are P providers.",
                "There are thus W · PB combinations to explore to find the optimal assignments of business processes to providers.",
                "Even for small configurations (e.g.",
                "W =10, B=5, P=10), the computational time for exhaustive search is significant, and in our work we look to scale these parameters.",
                "In the next subsection, discuss how a genetic search algorithm can be used to converge toward the optimum scheduling assignments. 3.2 Genetic algorithm Given an exponential search space of business process assignments to web service providers, the problem is to find the optimal assignment that produces the overall highest aggregate business value across all workflows.",
                "To explore the solution space, we use a genetic algorithm (GA) search heuristic that simulates Darwinian natural selection by having members of a population compete to survive in order to pass their genetic chromosomes onto the next generation; after successive generations, there is a tendency for the chromosomes to converge toward the best combination [5] [6].",
                "Although other search heuristics exist that can solve optimization problems (e.g. simulated annealing or steepest-ascent hillclimbing), the business process scheduling problem fits well with a GA because potential solutions can be represented in a matrix form and allows us to use prior research in effective GA chromosome recombination to form new members of the population (e.g. [2]). 0 1 2 3 4 0 1 2 0 2 1 1 0 1 0 1 0 2 1 2 0 0 1 Figure 2: An example chromosome representing a scheduling assignment of (workflow,service type) → service provider.",
                "Each row represents a workflow, and each column represents a service type.",
                "For example, here there are 3 workflows (0 to 2) and 5 service types (0 to 4).",
                "In workflow 0, any request for service type 3 goes to provider 2.",
                "Note that the service provider identifier is within a range limited to its service type (i.e. its column), so the 2 listed for service type 3 is a different server from server 2 in other columns.",
                "Chromosome representation of a solution.",
                "In Figure 2 we show an example chromosome that encodes one scheduling assignment.",
                "The representation is a 2-dimensional matrix that maps {workflow, service type} to a service provider.",
                "For a business process in workflow i and utilising service type j, the (i, j)th entry in the table is the identifier for the service provider to which the business process is assigned.",
                "Note that the service provider identifier is within a range limited to its service type.",
                "GA execution.",
                "A GA proceeds as follows.",
                "Initially a random set of chromosomes is created for the population.",
                "The chromosomes are evaluated (hashed) to some metric, and the best ones are chosen to be parents.",
                "In our problem, the evaluation produces the net business value across all workflows after executing all business processes once they are assigned to their respective service providers according to the mapping in the chromosome.",
                "The parents recombine to produce children, simulating sexual crossover, and occasionally a mutation may arise which produces new characteristics that were not available in either parent.",
                "The principal idea is that we would like the children to be different from the parents (in order to explore more of the solution space) yet not too different (in order to contain the portions of the chromosome that result in good scheduling assignments).",
                "Note that finding the global optimum is not guaranteed because the recombination and mutation are stochastic.",
                "GA recombination and mutation.",
                "As mentioned, the chromosomes are 2-dimensional matrices that represent scheduling assignments.",
                "To simulate sexual recombination of two chromosomes to produce a new child chromosome, we applied a one-point crossover scheme twice (once along each dimension).",
                "The crossover is best explained by analogy to Cartesian space as follows.",
                "A random point is chosen in the matrix to be coordinate (0, 0).",
                "Matrix elements from quadrants II and IV from the first parent and elements from quadrants I and III from the second parent are used to create the new child.",
                "This approach follows GA best practices by keeping contiguous chromosome segments together as they are transmitted from parent to child.",
                "The uni-chromosome mutation scheme randomly changes one of the service provider assignments to another provider within the available range.",
                "Other recombination and mutation schemes are an area of research in the GA community, and we look to explore new operators in future work.",
                "GA evaluation function.",
                "An important GA component is the evaluation function.",
                "Given a particular chromosome representing one scheduling mapping, the function deterministically calculates the net business value across all workloads.",
                "The business processes in each workload are assigned to service providers, and each providers completion time is calculated based on the service agreement guarantee using the parameters mentioned in Section 3.1, namely the unloaded completion time α, the maximum concur32 rency β, and a coefficient γ that controls the linear performance degradation under heavy load.",
                "Note that the evaluation function can be easily replaced if desired; for example, other evaluation functions can model different service provider guarantees or parallel workflows. 4.",
                "EXPERIMENTS AND RESULTS In this section we show the benefit of using our GA-based scheduler.",
                "Because we wanted to scale the scenarios up to a large number of workflows (up to 1000 in our experiments), we implemented a simulation program that allowed us to vary parameters and to measure the results with different metrics.",
                "The simulator was written in standard C++ and was run on a Linux (Fedora Core) desktop computer running at 2.8 GHz with 1GB of RAM.",
                "We compared our algorithm against alternative candidates: • A well-known round-robin algorithm that assigns each business process in circular fashion to the service providers for a particular service type.",
                "This approach provides the simplest scheme for load-balancing. • A random-proportional algorithm that proportionally assigns business processes to the service providers; that is, for a given service type, the service providers are ranked by their guaranteed completion time, and business processes are assigned proportionally to the providers based on their completion time. (We also tried a proportionality scheme based on both the completion times and maximum concurrency but attained the same results, so only the former schemes results are shown here.) • A strawman greedy algorithm that always assigns business processes to the service provider that has the fastest guaranteed completion time.",
                "This algorithm represents a naive approach based on greedy, local observations of each workflow without taking into consideration all workflows.",
                "In the experiments that follow, all results were averaged across 20 trials, and to help normalise the effects of randomisation used during the GA, each trial started by reading in pre-initialised data from disk.",
                "In Table 1 we list our experimental parameters.",
                "In Figure 3 we show the results of running our GA against the three candidate alternatives.",
                "The x-axis shows the number for workflows scaled up to 1000, and the y-axis shows the aggregate business value for all workflows.",
                "As can be seen, the GA consistently produces the highest business value even as the number of workflows grows; at 1000 workflows, the GA produces a 115% improvement over the next-best alternative. (Note that although we are optimising against the business value metric we defined earlier, genetic algorithms are able to converge towards the optimal value of any metric, as long as the evaluation function can consistently measure a chromosomes value with that metric.)",
                "As expected, the greedy algorithm performs very poorly because it does the worst job at balancing load: all business processes for a given service type are assigned to only one server (the one advertised to have the fastest completion time), and as more business processes arrive, the providers performance degrades linearly.",
                "The round-robin scheme is initially outperformed by the randomproportional scheme up to around 120 workflows (as shown in the magnified graph of Figure 4), but as the number of workflows increases, the round-robin scheme consistently wins over randomproportional.",
                "The reason is that although the random-proportional scheme assigns business processes to providers proportionally according to the advertised completion times (which is a measure of the power of the service provider), even the best providers will eventually reach a real-world maximum concurrency for the large -2000 -1000 0 1000 2000 3000 4000 5000 6000 7000 0 200 400 600 800 1000 Aggregatebusinessvalueacrossallworkflows Total number of workflows Business value scores of scheduling algorithms Genetic algorithm Round robin Random proportional Greedy Figure 3: Net business value scores of different scheduling algorithms. -500 0 500 1000 1500 2000 2500 3000 3500 4000 0 50 100 150 200Aggregatebusinessvalueacrossallworkflows Total number of workflows Business value scores of scheduling algorithms Genetic algorithm Round robin Random proportional Greedy Figure 4: Magnification of the left-most region in Figure 3. number of workflows that we are considering.",
                "For a very large number of workflows, the round-robin scheme is able to better balance the load across all service providers.",
                "To better understand the behaviour resulting from the scheduling assignments, we show the workflow completion results in Figures 5, 6, and 7 for 100, 500, and 900 workflows, respectively.",
                "These figures show the percentage of workflows that are successful (can complete with their QoS limit), acceptable (can complete within κ=3 times their QoS limit), and failed (cannot complete within κ=3 times their QoS limit).",
                "The GA consistently produces the highest percentage of successful workflows (resulting in higher business values for the aggregate set of workflows).",
                "Further, the round-robin scheme produces better results than the random-proportional for a large number of workflows but does not perform as well as the GA.",
                "In Figure 8 we graph the makespan resulting from the same experiments above.",
                "Makespan is a traditional metric from the job scheduling community measuring elapsed time for the last job to complete.",
                "While useful, it does not capture the high-level business value metric that we are optimising against.",
                "Indeed, the makespan is oblivious to the fact that we provide multiple levels of completion (successful, acceptable, and failed) and assign business value scores accordingly.",
                "For completeness, we note that the GA provides the fastest makespan, but it is matched by the round robin algorithm.",
                "The GA produces better business values (as shown in Figure 3) because it is able to search the solution space to find better mappings that produce more successful workflows (as shown in Figures 5 to 7).",
                "We also looked at the effect of the scheduling algorithms on balancing the load.",
                "Figure 9 shows the percentage of services providers that were accessed while the workflows ran.",
                "As expected, the greedy algorithm always hits one service provider; on the other hand, the round-robin algorithm is the fastest to spread the business 33 Experimental parameter Comment Workflows 5 to 1000 Business processes per workflow uniform random: 1 - 10 Service types 10 Service providers per service type uniform random: 1 - 10 Workflow QoS goal uniform random: 10-30 seconds Service provider completion time (α) uniform random: 1 - 12 seconds Service provider maximum concurrency (β) uniform random: 1 - 12 Service provider degradation coefficient (γ) uniform random: 0.1 - 0.9 Business value for successful workflows uniform random: 10 - 50 points Business value for acceptable workflows uniform random: 0 - 10 points Business value for failed workflows uniform random: -10 - 0 points GA: number of parents 20 GA: number of children 80 GA: number of generations 1000 Table 1: Experimental parameters Failed Acceptable (completed but not within QoS) Successful (completed within QoS) 0% 20% 40% 60% 80% 100% RoundRobinRandProportionalGreedyGeneticAlg Percentageofallworkflows Workflow behaviour, 100 workflows Figure 5: Workflow behaviour for 100 workflows.",
                "Failed Acceptable (completed but not within QoS) Successful (completed within QoS) 0% 20% 40% 60% 80% 100% RoundRobinRandProportionalGreedyGeneticAlg Percentageofallworkflows Workflow behaviour, 500 workflows Figure 6: Workflow behaviour for 500 workflows.",
                "Failed Acceptable (completed but not within QoS) Successful (completed within QoS) 0% 20% 40% 60% 80% 100% RoundRobinRandProportionalGreedyGeneticAlg Percentageofallworkflows Workflow behaviour, 500 workflows Figure 7: Workflow behaviour for 900 workflows. 0 50 100 150 200 250 300 0 200 400 600 800 1000 Makespan[seconds] Number of workflows Maximum completion time for all workflows Genetic algorithm Round robin Random proportional Greedy Figure 8: Maximum completion time for all workflows.",
                "This value is the makespan metric used in traditional scheduling research.",
                "Although useful, the makespan does not take into consideration the business value scoring in our problem domain. processes.",
                "Figure 10 is the percentage of accessed service providers (that is, the percentage of service providers represented in Figure 9) that had more assigned business processes than their advertised maximum concurrency.",
                "For example, in the greedy algorithm only one service provider is utilised, and this one provider quickly becomes saturated.",
                "On the other hand, the random-proportional algorithm uses many service providers, but because business processes are proportionally assigned with more assignments going to the better providers, there is a tendency for a smaller percentage of providers to become saturated.",
                "For completeness, we show the performance of the genetic algorithm itself in Figure 11.",
                "The algorithm scales linearly with an increasing number of workflows.",
                "We note that the round-robin, random-proportional, and greedy algorithms all finished within 1 second even for the largest workflow configuration.",
                "However, we feel that the benefit of finding much higher business value scores justifies the running time of the GA; further we would expect that the running time will improve with both software tuning as well as with a computer faster than our off-the-shelf PC. 5.",
                "CONCLUSION Business processes within workflows can be orchestrated to access web services.",
                "In this paper we looked at multi-tiered service provisioning where web service requests to service types can be mapped to different service providers.",
                "The resulting problem is that in order to support a very large number of workflows, the assignment of business process to web service provider must be intelligent.",
                "We used a business value metric to measure the be34 0 0.2 0.4 0.6 0.8 1 0 200 400 600 800 1000 Percentageofallserviceproviders Number of workflows Service providers utilised Genetic algorithm Round robin Random proportional Greedy Figure 9: The percentage of service providers utilized during workload executions.",
                "The Greedy algorithm always hits the one service provider, while the Round Robin algorithm spreads requests evenly across the providers. 0 0.2 0.4 0.6 0.8 1 0 200 400 600 800 1000 Percentageofallserviceproviders Number of workflows Service providers saturated Genetic algorithm Round robin Random proportional Greedy Figure 10: The percentage of service providers that are saturated among those providers who were utilized (that is, percentage of the service providers represented in Figure 9).",
                "A saturated service provider is one whose workload is greater that its advertised maximum concurrency. 0 5 10 15 20 25 0 200 400 600 800 1000 Runningtimeinseconds Total number of workflows Running time of genetic algorithm GA running time Figure 11: Running time of the genetic algorithm. haviour of workflows meeting or failing QoS values, and we optimised our scheduling to maximise the aggregate business value across all workflows.",
                "Since the solution space of scheduler mappings is exponential, we used a genetic search algorithm to search the space and converge toward the best schedule.",
                "With a default configuration for all parameters and using our business value scoring, the GA produced up to 115% business value improvement over the next best algorithm.",
                "Finally, because a genetic algorithm will converge towards the optimal value using any metric (even other than the business value metric we used), we believe our approach has strong potential for continuing work.",
                "In future work, we look to acquire real-world traces of web service instances in order to get better estimates of service agreement guarantees, although we expect that such guarantees between the providers and their consumers are not generally available to the public.",
                "We will also look at other QoS metrics such as CPU and I/O usage.",
                "For example, we can analyse transfer costs with varying bandwidth, latency, data size, and data distribution.",
                "Further, we hope to improve our genetic algorithm and compare it to more scheduler alternatives.",
                "Finally, since our work is complementary to existing work in web services choreography (because we rely on pre-configured workflows), we look to integrate our approach with available web service workflow systems expressed in BPEL. 6.",
                "REFERENCES [1] A. Ankolekar, et al.",
                "DAML-S: Semantic Markup For Web Services, In Proc. of the Intl Semantic Web Working Symposium, 2001. [2] L. Davis.",
                "Job Shop Scheduling with Genetic Algorithms, In Proc. of the Intl Conference on Genetic Algorithms, 1985. [3] H.-L. Fang, P. Ross, and D. Corne.",
                "A Promising Genetic Algorithm Approach to Job-Shop Scheduling, Rescheduling, and Open-Shop Scheduling Problems , In Proc. on the 5th Intl Conference on Genetic Algorithms, 1993. [4] M. Gary and D. Johnson.",
                "Computers and Intractability: A Guide to the Theory of NP-Completeness, Freeman, 1979. [5] J. Holland.",
                "Adaptation in Natural and Artificial Systems: An Introductory Analysis with Applications to Biology, Control, and Artificial Intelligence, MIT Press, 1992. [6] D. Goldberg.",
                "Genetic Algorithms in Search, Optimization and Machine Learning, Kluwer Academic Publishers, 1989. [7] Business Processes in a Web Services World, www-128.ibm.com/developerworks/ webservices/library/ws-bpelwp/. [8] G. Soundararajan, K. Manassiev, J. Chen, A. Goel, and C. Amza.",
                "Back-end Databases in Shared Dynamic Content Server Clusters, In Proc. of the IEEE Intl Conference on Autonomic Computing, 2005. [9] B. Srivastava and J. Koehler.",
                "Web Service Composition Current Solutions and Open Problems, ICAP, 2003. [10] B. Urgaonkar, P. Shenoy, A. Chandra, and P. Goyal.",
                "Dynamic Provisioning of Multi-Tier Internet Applications, In Proc. of the IEEE Intl Conference on Autonomic Computing, 2005. [11] L. Zeng, B. Benatallah, M. Dumas, J. Kalagnanam, and Q. Sheng.",
                "Quality Driven Web Services Composition, In Proc. of the WWW Conference, 2003. 35"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [],
            "translated_text": "",
            "candidates": [],
            "error": [
                []
            ]
        },
        "schedule": {
            "translated_key": "horario",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Heuristics-Based Scheduling of Composite Web Service Workloads Thomas Phan Wen-Syan Li IBM Almaden Research Center 650 Harry Rd.",
                "San Jose, CA 95120 {phantom,wsl}@us.ibm.com ABSTRACT Web services can be aggregated to create composite workflows that provide streamlined functionality for human users or other systems.",
                "Although industry standards and recent research have sought to define best practices and to improve end-to-end workflow composition, one area that has not fully been explored is the scheduling of a workflows web service requests to actual service provisioning in a multi-tiered, multi-organisation environment.",
                "This issue is relevant to modern business scenarios where business processes within a workflow must complete within QoS-defined limits.",
                "Because these business processes are web service consumers, service requests must be mapped and scheduled across multiple web service providers, each with its own negotiated service level agreement.",
                "In this paper we provide heuristics for scheduling service requests from multiple business process workflows to web service providers such that a business value metric across all workflows is maximised.",
                "We show that a genetic search algorithm is appropriate to perform this scheduling, and through experimentation we show that our algorithm scales well up to a thousand workflows and produces better mappings than traditional approaches.",
                "Categories and Subject Descriptors C.2.4 [Computer-Communication Networks]: Distributed Systems-distributed applications; D.2.8 [Software Engineering]: Metrics-complexity measures, performance measures 1.",
                "INTRODUCTION Web services can be composed into workflows to provide streamlined end-to-end functionality for human users or other systems.",
                "Although previous research efforts have looked at ways to intelligently automate the composition of web services into workflows (e.g. [1, 9]), an important remaining problem is the assignment of web service requests to the underlying web service providers in a multi-tiered runtime scenario within constraints.",
                "In this paper we address this scheduling problem and examine means to manage a large number of business process workflows in a scalable manner.",
                "The problem of scheduling web service requests to providers is relevant to modern business domains that depend on multi-tiered service provisioning.",
                "Consider the example shown in Figure 1 that illustrates our problem space.",
                "Workflows comprise multiple related business processes that are web service consumers; here we assume that the workflows represent requested service from customers or automated systems and that the workflow has already been composed with an existing choreography toolkit.",
                "These workflows are then submitted to a portal (not shown) that acts as a scheduling agent between the web service consumers and the web service providers.",
                "In this example, a workflow could represent the actions needed to instantiate a vacation itinerary, where one business process requests booking an airline ticket, another business process requests a hotel room, and so forth.",
                "Each of these requests target a particular service type (e.g. airline reservations, hotel reservations, car reservations, etc. ), and for each service type, there are multiple instances of service providers that publish a web service interface.",
                "An important challenge is that the workflows must meet some quality-of-service (QoS) metric, such as end-to-end completion time of all its business processes, and that meeting or failing this goal results in the assignment of a quantitative business value metric for the workflow; intuitively, it is desired that all workflows meet their respective QoS goals.",
                "We further leverage the notion that QoS service agreements are generally agreed-upon between the web service providers and the scheduling agent such that the providers advertise some level of guaranteed QoS to the scheduler based upon runtime conditions such as turnaround time and maximum available concurrency.",
                "The resulting problem is then to <br>schedule</br> and assign the business processes requests for service types to one of the service providers for that type.",
                "The scheduling must be done such that the aggregate business value across all the workflows is maximised.",
                "In Section 3 we state the scenario as a combinatorial problem and utilise a genetic search algorithm [5] to find the best assignment of web service requests to providers.",
                "This approach converges towards an assignment that maximises the overall business value for all the workflows.",
                "In Section 4 we show through experimentation that this search heuristic finds better assignments than other algorithms (greedy, round-robin, and proportional).",
                "Further, this approach allows us to scale the number of simultaneous workflows (up to one thousand workflows in our experiments) and yet still find effective schedules. 2.",
                "RELATED WORK In the context of service assignment and scheduling, [11] maps web service calls to potential servers using linear programming, but their work is concerned with mapping only single workflows; our principal focus is on scalably scheduling multiple workflows (up 30 Service Type SuperHotels.com Business Process Business Process Workflow ... Business Process Business Process ... HostileHostels.com IncredibleInns.com Business Process Business Process Business Process ... Business Process Service Provider SkyHighAirlines.com SuperCrazyFlights.com Business Process . . . . . .",
                "Advertised QoS Service Agreement CarRentalService.com Figure 1: An example scenario demonstrating the interaction between business processes in workflows and web service providers.",
                "Each business process accesses a service type and is then mapped to a service provider for that type. to one thousand as we show later) using different business metrics and a search heuristic. [10] presents a dynamic provisioning approach that uses both predictive and reactive techniques for multi-tiered Internet application delivery.",
                "However, the provisioning techniques do not consider the challenges faced when there are alternative query execution plans and replicated data sources. [8] presents a feedback-based scheduling mechanism for multi-tiered systems with back-end databases, but unlike our work, it assumes a tighter coupling between the various components of the system.",
                "Our work also builds upon prior scheduling research.",
                "The classic job-shop scheduling problem, shown to be NP-complete [4] [3], is similar to ours in that tasks within a job must be scheduled onto machinery (c.f. our scenario is that business processes within a workflow must be scheduled onto web service providers).",
                "The salient differences are that the machines can process only one job at a time (we assume servers can multi-task but with degraded performance and a maximum concurrency level), tasks within a job cannot simultaneously run on different machines (we assume business processes can be assigned to any available server), and the principal metric of performance is the makespan, which is the time for the last task among all the jobs to complete (and as we show later, optimising on the makespan is insufficient for scheduling the business processes, necessitating different metrics). 3.",
                "DESIGN In this section we describe our model and discuss how we can find scheduling assignments using a genetic search algorithm. 3.1 Model We base our model on the simplified scenario shown in Figure 1.",
                "Specifically, we assume that users or automated systems request the execution of a workflow.",
                "The workflows comprise business processes, each of which makes one web service invocation to a service type.",
                "Further, business processes have an ordering in the workflow.",
                "The arrangement and execution of the business processes and the data flow between them are all managed by a composition or choreography tool (e.g. [1, 9]).",
                "Although composition languages can use sophisticated flow-control mechanisms such as conditional branches, for simplicity we assume the processes execute sequentially in a given order.",
                "This scenario can be naturally extended to more complex relationships that can be expressed in BPEL [7], which defines how business processes interact, messages are exchanged, activities are ordered, and exceptions are handled.",
                "Due to space constraints, we focus on the problem space presented here and will extend our model to more advanced deployment scenarios in the future.",
                "Each workflow has a QoS requirement to complete within a specified number of time units (e.g. on the order of seconds, as detailed in the Experiments section).",
                "Upon completion (or failure), the workflow is assigned a business value.",
                "We extended this approach further and considered different types of workflow completion in order to model differentiated QoS levels that can be applied by businesses (for example, to provide tiered customer service).",
                "We say that a workflow is successful if it completes within its QoS requirement, acceptable if it completes within a constant factor κ 31 of its QoS bound (in our experiments we chose κ=3), or failing if it finishes beyond κ times its QoS bound.",
                "For each category, a business value score is assigned to the workflow, with the successful category assigned the highest positive score, followed by acceptable and then failing.",
                "The business value point distribution is non-uniform across workflows, further modelling cases where some workflows are of higher priority than others.",
                "Each service type is implemented by a number of different service providers.",
                "We assume that the providers make service level agreements (SLAs) to guarantee a level of performance defined by the completion time for completing a web service invocation.",
                "Although SLAs can be complex, in this paper we assume for simplicity that the guarantees can take the form of a linear performance degradation under load.",
                "This guarantee is defined by several parameters: α is the expected completion time (for example, on the order of seconds) if the assigned workload of web service requests is less than or equal to β, the maximum concurrency, and if the workload is higher than β, the expected completion for a workload of size ω is α+ γ(ω − β) where γ is a fractional coefficient.",
                "In our experiments we vary α, β, and γ with different distributions.",
                "Ideally, all workflows would be able to finish within their QoS limits and thus maximise the aggregate business value across all workflows.",
                "However, because we model service providers with degrading performance under load, not all workflows will achieve their QoS limit: it may easily be the case that business processes are assigned to providers who are overloaded and cannot complete within the respective workflows QoS limit.",
                "The key research problem, then, is to assign the business processes to the web service providers with the goal of optimising on the aggregate business value of all workflows.",
                "Given that the scope of the optimisation is the entire set of workflows, it may be that the best scheduling assignments may result in some workflows having to fail in order for more workflows to succeed.",
                "This intuitive observation suggests that traditional scheduling approaches such as round-robin or proportional assignments will not fare well, which is what we observe and discuss in Section 4.",
                "On the other hand, an exhaustive search of all the possible assignments will find the best <br>schedule</br>, but the computational complexity is prohibitively high.",
                "Suppose there are W workflows with an average of B business processes per workflow.",
                "Further, in the worst case each business process requests one service type, for which there are P providers.",
                "There are thus W · PB combinations to explore to find the optimal assignments of business processes to providers.",
                "Even for small configurations (e.g.",
                "W =10, B=5, P=10), the computational time for exhaustive search is significant, and in our work we look to scale these parameters.",
                "In the next subsection, discuss how a genetic search algorithm can be used to converge toward the optimum scheduling assignments. 3.2 Genetic algorithm Given an exponential search space of business process assignments to web service providers, the problem is to find the optimal assignment that produces the overall highest aggregate business value across all workflows.",
                "To explore the solution space, we use a genetic algorithm (GA) search heuristic that simulates Darwinian natural selection by having members of a population compete to survive in order to pass their genetic chromosomes onto the next generation; after successive generations, there is a tendency for the chromosomes to converge toward the best combination [5] [6].",
                "Although other search heuristics exist that can solve optimization problems (e.g. simulated annealing or steepest-ascent hillclimbing), the business process scheduling problem fits well with a GA because potential solutions can be represented in a matrix form and allows us to use prior research in effective GA chromosome recombination to form new members of the population (e.g. [2]). 0 1 2 3 4 0 1 2 0 2 1 1 0 1 0 1 0 2 1 2 0 0 1 Figure 2: An example chromosome representing a scheduling assignment of (workflow,service type) → service provider.",
                "Each row represents a workflow, and each column represents a service type.",
                "For example, here there are 3 workflows (0 to 2) and 5 service types (0 to 4).",
                "In workflow 0, any request for service type 3 goes to provider 2.",
                "Note that the service provider identifier is within a range limited to its service type (i.e. its column), so the 2 listed for service type 3 is a different server from server 2 in other columns.",
                "Chromosome representation of a solution.",
                "In Figure 2 we show an example chromosome that encodes one scheduling assignment.",
                "The representation is a 2-dimensional matrix that maps {workflow, service type} to a service provider.",
                "For a business process in workflow i and utilising service type j, the (i, j)th entry in the table is the identifier for the service provider to which the business process is assigned.",
                "Note that the service provider identifier is within a range limited to its service type.",
                "GA execution.",
                "A GA proceeds as follows.",
                "Initially a random set of chromosomes is created for the population.",
                "The chromosomes are evaluated (hashed) to some metric, and the best ones are chosen to be parents.",
                "In our problem, the evaluation produces the net business value across all workflows after executing all business processes once they are assigned to their respective service providers according to the mapping in the chromosome.",
                "The parents recombine to produce children, simulating sexual crossover, and occasionally a mutation may arise which produces new characteristics that were not available in either parent.",
                "The principal idea is that we would like the children to be different from the parents (in order to explore more of the solution space) yet not too different (in order to contain the portions of the chromosome that result in good scheduling assignments).",
                "Note that finding the global optimum is not guaranteed because the recombination and mutation are stochastic.",
                "GA recombination and mutation.",
                "As mentioned, the chromosomes are 2-dimensional matrices that represent scheduling assignments.",
                "To simulate sexual recombination of two chromosomes to produce a new child chromosome, we applied a one-point crossover scheme twice (once along each dimension).",
                "The crossover is best explained by analogy to Cartesian space as follows.",
                "A random point is chosen in the matrix to be coordinate (0, 0).",
                "Matrix elements from quadrants II and IV from the first parent and elements from quadrants I and III from the second parent are used to create the new child.",
                "This approach follows GA best practices by keeping contiguous chromosome segments together as they are transmitted from parent to child.",
                "The uni-chromosome mutation scheme randomly changes one of the service provider assignments to another provider within the available range.",
                "Other recombination and mutation schemes are an area of research in the GA community, and we look to explore new operators in future work.",
                "GA evaluation function.",
                "An important GA component is the evaluation function.",
                "Given a particular chromosome representing one scheduling mapping, the function deterministically calculates the net business value across all workloads.",
                "The business processes in each workload are assigned to service providers, and each providers completion time is calculated based on the service agreement guarantee using the parameters mentioned in Section 3.1, namely the unloaded completion time α, the maximum concur32 rency β, and a coefficient γ that controls the linear performance degradation under heavy load.",
                "Note that the evaluation function can be easily replaced if desired; for example, other evaluation functions can model different service provider guarantees or parallel workflows. 4.",
                "EXPERIMENTS AND RESULTS In this section we show the benefit of using our GA-based scheduler.",
                "Because we wanted to scale the scenarios up to a large number of workflows (up to 1000 in our experiments), we implemented a simulation program that allowed us to vary parameters and to measure the results with different metrics.",
                "The simulator was written in standard C++ and was run on a Linux (Fedora Core) desktop computer running at 2.8 GHz with 1GB of RAM.",
                "We compared our algorithm against alternative candidates: • A well-known round-robin algorithm that assigns each business process in circular fashion to the service providers for a particular service type.",
                "This approach provides the simplest scheme for load-balancing. • A random-proportional algorithm that proportionally assigns business processes to the service providers; that is, for a given service type, the service providers are ranked by their guaranteed completion time, and business processes are assigned proportionally to the providers based on their completion time. (We also tried a proportionality scheme based on both the completion times and maximum concurrency but attained the same results, so only the former schemes results are shown here.) • A strawman greedy algorithm that always assigns business processes to the service provider that has the fastest guaranteed completion time.",
                "This algorithm represents a naive approach based on greedy, local observations of each workflow without taking into consideration all workflows.",
                "In the experiments that follow, all results were averaged across 20 trials, and to help normalise the effects of randomisation used during the GA, each trial started by reading in pre-initialised data from disk.",
                "In Table 1 we list our experimental parameters.",
                "In Figure 3 we show the results of running our GA against the three candidate alternatives.",
                "The x-axis shows the number for workflows scaled up to 1000, and the y-axis shows the aggregate business value for all workflows.",
                "As can be seen, the GA consistently produces the highest business value even as the number of workflows grows; at 1000 workflows, the GA produces a 115% improvement over the next-best alternative. (Note that although we are optimising against the business value metric we defined earlier, genetic algorithms are able to converge towards the optimal value of any metric, as long as the evaluation function can consistently measure a chromosomes value with that metric.)",
                "As expected, the greedy algorithm performs very poorly because it does the worst job at balancing load: all business processes for a given service type are assigned to only one server (the one advertised to have the fastest completion time), and as more business processes arrive, the providers performance degrades linearly.",
                "The round-robin scheme is initially outperformed by the randomproportional scheme up to around 120 workflows (as shown in the magnified graph of Figure 4), but as the number of workflows increases, the round-robin scheme consistently wins over randomproportional.",
                "The reason is that although the random-proportional scheme assigns business processes to providers proportionally according to the advertised completion times (which is a measure of the power of the service provider), even the best providers will eventually reach a real-world maximum concurrency for the large -2000 -1000 0 1000 2000 3000 4000 5000 6000 7000 0 200 400 600 800 1000 Aggregatebusinessvalueacrossallworkflows Total number of workflows Business value scores of scheduling algorithms Genetic algorithm Round robin Random proportional Greedy Figure 3: Net business value scores of different scheduling algorithms. -500 0 500 1000 1500 2000 2500 3000 3500 4000 0 50 100 150 200Aggregatebusinessvalueacrossallworkflows Total number of workflows Business value scores of scheduling algorithms Genetic algorithm Round robin Random proportional Greedy Figure 4: Magnification of the left-most region in Figure 3. number of workflows that we are considering.",
                "For a very large number of workflows, the round-robin scheme is able to better balance the load across all service providers.",
                "To better understand the behaviour resulting from the scheduling assignments, we show the workflow completion results in Figures 5, 6, and 7 for 100, 500, and 900 workflows, respectively.",
                "These figures show the percentage of workflows that are successful (can complete with their QoS limit), acceptable (can complete within κ=3 times their QoS limit), and failed (cannot complete within κ=3 times their QoS limit).",
                "The GA consistently produces the highest percentage of successful workflows (resulting in higher business values for the aggregate set of workflows).",
                "Further, the round-robin scheme produces better results than the random-proportional for a large number of workflows but does not perform as well as the GA.",
                "In Figure 8 we graph the makespan resulting from the same experiments above.",
                "Makespan is a traditional metric from the job scheduling community measuring elapsed time for the last job to complete.",
                "While useful, it does not capture the high-level business value metric that we are optimising against.",
                "Indeed, the makespan is oblivious to the fact that we provide multiple levels of completion (successful, acceptable, and failed) and assign business value scores accordingly.",
                "For completeness, we note that the GA provides the fastest makespan, but it is matched by the round robin algorithm.",
                "The GA produces better business values (as shown in Figure 3) because it is able to search the solution space to find better mappings that produce more successful workflows (as shown in Figures 5 to 7).",
                "We also looked at the effect of the scheduling algorithms on balancing the load.",
                "Figure 9 shows the percentage of services providers that were accessed while the workflows ran.",
                "As expected, the greedy algorithm always hits one service provider; on the other hand, the round-robin algorithm is the fastest to spread the business 33 Experimental parameter Comment Workflows 5 to 1000 Business processes per workflow uniform random: 1 - 10 Service types 10 Service providers per service type uniform random: 1 - 10 Workflow QoS goal uniform random: 10-30 seconds Service provider completion time (α) uniform random: 1 - 12 seconds Service provider maximum concurrency (β) uniform random: 1 - 12 Service provider degradation coefficient (γ) uniform random: 0.1 - 0.9 Business value for successful workflows uniform random: 10 - 50 points Business value for acceptable workflows uniform random: 0 - 10 points Business value for failed workflows uniform random: -10 - 0 points GA: number of parents 20 GA: number of children 80 GA: number of generations 1000 Table 1: Experimental parameters Failed Acceptable (completed but not within QoS) Successful (completed within QoS) 0% 20% 40% 60% 80% 100% RoundRobinRandProportionalGreedyGeneticAlg Percentageofallworkflows Workflow behaviour, 100 workflows Figure 5: Workflow behaviour for 100 workflows.",
                "Failed Acceptable (completed but not within QoS) Successful (completed within QoS) 0% 20% 40% 60% 80% 100% RoundRobinRandProportionalGreedyGeneticAlg Percentageofallworkflows Workflow behaviour, 500 workflows Figure 6: Workflow behaviour for 500 workflows.",
                "Failed Acceptable (completed but not within QoS) Successful (completed within QoS) 0% 20% 40% 60% 80% 100% RoundRobinRandProportionalGreedyGeneticAlg Percentageofallworkflows Workflow behaviour, 500 workflows Figure 7: Workflow behaviour for 900 workflows. 0 50 100 150 200 250 300 0 200 400 600 800 1000 Makespan[seconds] Number of workflows Maximum completion time for all workflows Genetic algorithm Round robin Random proportional Greedy Figure 8: Maximum completion time for all workflows.",
                "This value is the makespan metric used in traditional scheduling research.",
                "Although useful, the makespan does not take into consideration the business value scoring in our problem domain. processes.",
                "Figure 10 is the percentage of accessed service providers (that is, the percentage of service providers represented in Figure 9) that had more assigned business processes than their advertised maximum concurrency.",
                "For example, in the greedy algorithm only one service provider is utilised, and this one provider quickly becomes saturated.",
                "On the other hand, the random-proportional algorithm uses many service providers, but because business processes are proportionally assigned with more assignments going to the better providers, there is a tendency for a smaller percentage of providers to become saturated.",
                "For completeness, we show the performance of the genetic algorithm itself in Figure 11.",
                "The algorithm scales linearly with an increasing number of workflows.",
                "We note that the round-robin, random-proportional, and greedy algorithms all finished within 1 second even for the largest workflow configuration.",
                "However, we feel that the benefit of finding much higher business value scores justifies the running time of the GA; further we would expect that the running time will improve with both software tuning as well as with a computer faster than our off-the-shelf PC. 5.",
                "CONCLUSION Business processes within workflows can be orchestrated to access web services.",
                "In this paper we looked at multi-tiered service provisioning where web service requests to service types can be mapped to different service providers.",
                "The resulting problem is that in order to support a very large number of workflows, the assignment of business process to web service provider must be intelligent.",
                "We used a business value metric to measure the be34 0 0.2 0.4 0.6 0.8 1 0 200 400 600 800 1000 Percentageofallserviceproviders Number of workflows Service providers utilised Genetic algorithm Round robin Random proportional Greedy Figure 9: The percentage of service providers utilized during workload executions.",
                "The Greedy algorithm always hits the one service provider, while the Round Robin algorithm spreads requests evenly across the providers. 0 0.2 0.4 0.6 0.8 1 0 200 400 600 800 1000 Percentageofallserviceproviders Number of workflows Service providers saturated Genetic algorithm Round robin Random proportional Greedy Figure 10: The percentage of service providers that are saturated among those providers who were utilized (that is, percentage of the service providers represented in Figure 9).",
                "A saturated service provider is one whose workload is greater that its advertised maximum concurrency. 0 5 10 15 20 25 0 200 400 600 800 1000 Runningtimeinseconds Total number of workflows Running time of genetic algorithm GA running time Figure 11: Running time of the genetic algorithm. haviour of workflows meeting or failing QoS values, and we optimised our scheduling to maximise the aggregate business value across all workflows.",
                "Since the solution space of scheduler mappings is exponential, we used a genetic search algorithm to search the space and converge toward the best <br>schedule</br>.",
                "With a default configuration for all parameters and using our business value scoring, the GA produced up to 115% business value improvement over the next best algorithm.",
                "Finally, because a genetic algorithm will converge towards the optimal value using any metric (even other than the business value metric we used), we believe our approach has strong potential for continuing work.",
                "In future work, we look to acquire real-world traces of web service instances in order to get better estimates of service agreement guarantees, although we expect that such guarantees between the providers and their consumers are not generally available to the public.",
                "We will also look at other QoS metrics such as CPU and I/O usage.",
                "For example, we can analyse transfer costs with varying bandwidth, latency, data size, and data distribution.",
                "Further, we hope to improve our genetic algorithm and compare it to more scheduler alternatives.",
                "Finally, since our work is complementary to existing work in web services choreography (because we rely on pre-configured workflows), we look to integrate our approach with available web service workflow systems expressed in BPEL. 6.",
                "REFERENCES [1] A. Ankolekar, et al.",
                "DAML-S: Semantic Markup For Web Services, In Proc. of the Intl Semantic Web Working Symposium, 2001. [2] L. Davis.",
                "Job Shop Scheduling with Genetic Algorithms, In Proc. of the Intl Conference on Genetic Algorithms, 1985. [3] H.-L. Fang, P. Ross, and D. Corne.",
                "A Promising Genetic Algorithm Approach to Job-Shop Scheduling, Rescheduling, and Open-Shop Scheduling Problems , In Proc. on the 5th Intl Conference on Genetic Algorithms, 1993. [4] M. Gary and D. Johnson.",
                "Computers and Intractability: A Guide to the Theory of NP-Completeness, Freeman, 1979. [5] J. Holland.",
                "Adaptation in Natural and Artificial Systems: An Introductory Analysis with Applications to Biology, Control, and Artificial Intelligence, MIT Press, 1992. [6] D. Goldberg.",
                "Genetic Algorithms in Search, Optimization and Machine Learning, Kluwer Academic Publishers, 1989. [7] Business Processes in a Web Services World, www-128.ibm.com/developerworks/ webservices/library/ws-bpelwp/. [8] G. Soundararajan, K. Manassiev, J. Chen, A. Goel, and C. Amza.",
                "Back-end Databases in Shared Dynamic Content Server Clusters, In Proc. of the IEEE Intl Conference on Autonomic Computing, 2005. [9] B. Srivastava and J. Koehler.",
                "Web Service Composition Current Solutions and Open Problems, ICAP, 2003. [10] B. Urgaonkar, P. Shenoy, A. Chandra, and P. Goyal.",
                "Dynamic Provisioning of Multi-Tier Internet Applications, In Proc. of the IEEE Intl Conference on Autonomic Computing, 2005. [11] L. Zeng, B. Benatallah, M. Dumas, J. Kalagnanam, and Q. Sheng.",
                "Quality Driven Web Services Composition, In Proc. of the WWW Conference, 2003. 35"
            ],
            "original_annotated_samples": [
                "The resulting problem is then to <br>schedule</br> and assign the business processes requests for service types to one of the service providers for that type.",
                "On the other hand, an exhaustive search of all the possible assignments will find the best <br>schedule</br>, but the computational complexity is prohibitively high.",
                "Since the solution space of scheduler mappings is exponential, we used a genetic search algorithm to search the space and converge toward the best <br>schedule</br>."
            ],
            "translated_annotated_samples": [
                "El problema resultante es entonces <br>programar</br> y asignar las solicitudes de procesos comerciales para tipos de servicio a uno de los proveedores de servicios para ese tipo.",
                "Por otro lado, una búsqueda exhaustiva de todas las posibles asignaciones encontrará el mejor <br>horario</br>, pero la complejidad computacional es prohibitivamente alta.",
                "Dado que el espacio de soluciones de los mapeos de programación es exponencial, utilizamos un algoritmo de búsqueda genética para explorar el espacio y converger hacia el mejor <br>horario</br>."
            ],
            "translated_text": "Programación basada en heurísticas de cargas de trabajo de servicios web compuestos Thomas Phan Wen-Syan Li Centro de Investigación IBM Almaden 650 Harry Rd. Los servicios web pueden ser agregados para crear flujos de trabajo compuestos que proporcionen funcionalidad simplificada para usuarios humanos u otros sistemas. Aunque los estándares de la industria y la investigación reciente han buscado definir las mejores prácticas y mejorar la composición del flujo de trabajo de extremo a extremo, un área que no ha sido completamente explorada es la programación de las solicitudes de servicios web de los flujos de trabajo para la provisión real de servicios en un entorno multinivel y multiorganizacional. Este problema es relevante para los escenarios empresariales modernos donde los procesos comerciales dentro de un flujo de trabajo deben completarse dentro de los límites definidos por la calidad de servicio (QoS). Debido a que estos procesos comerciales son consumidores de servicios web, las solicitudes de servicio deben ser mapeadas y programadas entre múltiples proveedores de servicios web, cada uno con su propio acuerdo de nivel de servicio negociado. En este documento proporcionamos heurísticas para programar solicitudes de servicio de múltiples flujos de trabajo de procesos comerciales a proveedores de servicios web de manera que se maximice una métrica de valor comercial en todos los flujos de trabajo. Mostramos que un algoritmo de búsqueda genética es apropiado para realizar esta programación, y a través de experimentación demostramos que nuestro algoritmo escala bien hasta mil flujos de trabajo y produce mejores asignaciones que enfoques tradicionales. Categorías y Descriptores de Asignaturas C.2.4 [Redes de Computadoras-Comunicación]: Sistemas Distribuidos-aplicaciones distribuidas; D.2.8 [Ingeniería de Software]: Métricas-medidas de complejidad, medidas de rendimiento 1. INTRODUCCIÓN Los servicios web pueden ser compuestos en flujos de trabajo para proporcionar funcionalidad integrada de principio a fin para usuarios humanos u otros sistemas. Aunque los esfuerzos de investigación previos han examinado formas de automatizar de manera inteligente la composición de servicios web en flujos de trabajo (por ejemplo, [1, 9]), un problema importante que aún persiste es la asignación de solicitudes de servicios web a los proveedores de servicios web subyacentes en un escenario de tiempo de ejecución multinivel dentro de ciertas restricciones. En este documento abordamos este problema de programación y examinamos medios para gestionar un gran número de flujos de trabajo de procesos comerciales de manera escalable. El problema de programar solicitudes de servicios web a proveedores es relevante para los dominios comerciales modernos que dependen de la provisión de servicios de múltiples niveles. Considera el ejemplo mostrado en la Figura 1 que ilustra nuestro espacio de problemas. Los flujos de trabajo comprenden múltiples procesos comerciales relacionados que son consumidores de servicios web; aquí asumimos que los flujos de trabajo representan servicios solicitados por clientes o sistemas automatizados y que el flujo de trabajo ya ha sido compuesto con una herramienta de coreografía existente. Estos flujos de trabajo son luego enviados a un portal (no mostrado) que actúa como un agente de programación entre los consumidores del servicio web y los proveedores del servicio web. En este ejemplo, un flujo de trabajo podría representar las acciones necesarias para crear un itinerario de vacaciones, donde un proceso empresarial solicita la reserva de un boleto de avión, otro proceso empresarial solicita una habitación de hotel, y así sucesivamente. Cada una de estas solicitudes apunta a un tipo de servicio en particular (por ejemplo, reservas de aerolíneas, reservas de hoteles, reservas de autos, etc.), y para cada tipo de servicio, hay múltiples instancias de proveedores de servicios que publican una interfaz de servicio web. Un desafío importante es que los flujos de trabajo deben cumplir con alguna métrica de calidad de servicio (QoS), como el tiempo de finalización de extremo a extremo de todos sus procesos comerciales, y que cumplir o no con este objetivo resulta en la asignación de una métrica de valor comercial cuantitativo para el flujo de trabajo; intuitivamente, se desea que todos los flujos de trabajo cumplan con sus respectivos objetivos de QoS. Además, aprovechamos la idea de que los acuerdos de servicio de QoS suelen ser acordados entre los proveedores de servicios web y el agente de programación de tal manera que los proveedores anuncian un cierto nivel de QoS garantizado al programador en función de condiciones de tiempo de respuesta y concurrencia máxima disponible. El problema resultante es entonces <br>programar</br> y asignar las solicitudes de procesos comerciales para tipos de servicio a uno de los proveedores de servicios para ese tipo. La programación debe realizarse de tal manera que se maximice el valor comercial agregado en todos los flujos de trabajo. En la Sección 3 planteamos el escenario como un problema combinatorio y utilizamos un algoritmo de búsqueda genética [5] para encontrar la mejor asignación de solicitudes de servicios web a proveedores. Este enfoque converge hacia una asignación que maximiza el valor comercial general para todos los flujos de trabajo. En la Sección 4 mostramos a través de experimentación que esta heurística de búsqueda encuentra asignaciones mejores que otros algoritmos (codicioso, round-robin y proporcional). Además, este enfoque nos permite escalar el número de flujos de trabajo simultáneos (hasta mil flujos de trabajo en nuestros experimentos) y aún así encontrar horarios efectivos. 2. TRABAJO RELACIONADO En el contexto de asignación y programación de servicios, [11] mapea llamadas de servicios web a servidores potenciales utilizando programación lineal, pero su trabajo se centra en mapear solo flujos de trabajo individuales; nuestro enfoque principal está en programar de manera escalable múltiples flujos de trabajo (hasta 30 tipos de servicios SuperHotels.com Proceso de Negocio Proceso de Negocio Flujo de Trabajo ... Proceso de Negocio Proceso de Negocio ... HostileHostels.com IncredibleInns.com Proceso de Negocio Proceso de Negocio Proceso de Negocio ... Proceso de Negocio Proveedor de Servicios SkyHighAirlines.com SuperCrazyFlights.com Proceso de Negocio . . . . . . Acuerdo de Servicio de Calidad de Servicio (QoS) Publicitado CarRentalService.com Figura 1: Un escenario de ejemplo que muestra la interacción entre procesos comerciales en flujos de trabajo y proveedores de servicios web. Cada proceso empresarial accede a un tipo de servicio y luego se asigna a un proveedor de servicios para ese tipo, a uno mil como mostraremos más adelante, utilizando diferentes métricas empresariales y una heurística de búsqueda. [10] presenta un enfoque de aprovisionamiento dinámico que utiliza técnicas predictivas y reactivas para la entrega de aplicaciones de Internet multinivel. Sin embargo, las técnicas de aprovisionamiento no consideran los desafíos enfrentados cuando hay planes alternativos de ejecución de consultas y fuentes de datos replicadas. [8] presenta un mecanismo de programación basado en retroalimentación para sistemas multinivel con bases de datos de back-end, pero a diferencia de nuestro trabajo, asume un acoplamiento más estrecho entre los diversos componentes del sistema. Nuestro trabajo también se basa en investigaciones previas sobre programación. El problema clásico de programación de talleres, demostrado como NP-completo [4] [3], es similar al nuestro en el sentido de que las tareas dentro de un trabajo deben ser programadas en maquinaria (cf. nuestro escenario es que los procesos comerciales dentro de un flujo de trabajo deben ser programados en proveedores de servicios web). Las diferencias más destacadas son que las máquinas solo pueden procesar un trabajo a la vez (asumimos que los servidores pueden realizar múltiples tareas pero con un rendimiento degradado y un nivel máximo de concurrencia), las tareas dentro de un trabajo no pueden ejecutarse simultáneamente en diferentes máquinas (asumimos que los procesos comerciales pueden asignarse a cualquier servidor disponible), y la métrica principal de rendimiento es el makespan, que es el tiempo que tarda la última tarea de todos los trabajos en completarse (y como mostraremos más adelante, optimizar el makespan no es suficiente para programar los procesos comerciales, lo que requiere diferentes métricas). 3. En esta sección describimos nuestro modelo y discutimos cómo podemos encontrar asignaciones de programación utilizando un algoritmo de búsqueda genética. 3.1 Modelo Basamos nuestro modelo en el escenario simplificado mostrado en la Figura 1. Específicamente, asumimos que los usuarios o sistemas automatizados solicitan la ejecución de un flujo de trabajo. Los flujos de trabajo comprenden procesos comerciales, cada uno de los cuales realiza una invocación de servicio web a un tipo de servicio. Además, los procesos comerciales tienen un orden en el flujo de trabajo. La disposición y ejecución de los procesos comerciales y el flujo de datos entre ellos son gestionados por una herramienta de composición o coreografía (por ejemplo, [1, 9]). Aunque los lenguajes de composición pueden utilizar mecanismos sofisticados de control de flujo como ramas condicionales, para simplificar asumimos que los procesos se ejecutan secuencialmente en un orden dado. Este escenario puede ser extendido de forma natural a relaciones más complejas que pueden ser expresadas en BPEL [7], el cual define cómo interactúan los procesos de negocio, se intercambian mensajes, se ordenan actividades y se manejan excepciones. Debido a limitaciones de espacio, nos enfocamos en el espacio de problemas presentado aquí y extenderemos nuestro modelo a escenarios de implementación más avanzados en el futuro. Cada flujo de trabajo tiene un requisito de calidad de servicio (QoS) que debe completarse dentro de un número específico de unidades de tiempo (por ejemplo, del orden de segundos, como se detalla en la sección de Experimentos). Una vez completado (o fallido), se asigna un valor comercial al flujo de trabajo. Extendimos este enfoque aún más y consideramos diferentes tipos de finalización de flujo de trabajo para modelar niveles diferenciados de QoS que pueden ser aplicados por las empresas (por ejemplo, para proporcionar servicios al cliente escalonados). Decimos que un flujo de trabajo es exitoso si se completa dentro de su requisito de QoS, aceptable si se completa dentro de un factor constante κ 31 de su límite de QoS (en nuestros experimentos elegimos κ=3), o fallido si termina más allá de κ veces su límite de QoS. Para cada categoría, se asigna un puntaje de valor comercial al flujo de trabajo, siendo la categoría exitosa la que recibe la puntuación positiva más alta, seguida por la aceptable y luego la fallida. La distribución de puntos de valor empresarial no es uniforme en los flujos de trabajo, lo que modela casos en los que algunos flujos de trabajo tienen mayor prioridad que otros. Cada tipo de servicio es implementado por varios proveedores de servicios diferentes. Suponemos que los proveedores hacen acuerdos de nivel de servicio (SLAs) para garantizar un nivel de rendimiento definido por el tiempo de finalización de una invocación de servicio web. Aunque los Acuerdos de Nivel de Servicio (SLAs) pueden ser complejos, en este documento asumimos, para simplificar, que las garantías pueden adoptar la forma de una degradación lineal del rendimiento bajo carga. Esta garantía está definida por varios parámetros: α es el tiempo de finalización esperado (por ejemplo, del orden de segundos) si la carga de trabajo asignada de las solicitudes de servicio web es menor o igual a β, la concurrencia máxima, y si la carga de trabajo es mayor que β, la finalización esperada para una carga de trabajo de tamaño ω es α + γ(ω − β) donde γ es un coeficiente fraccional. En nuestros experimentos variamos α, β y γ con diferentes distribuciones. Idealmente, todos los flujos de trabajo podrían finalizar dentro de sus límites de calidad de servicio (QoS) y, por lo tanto, maximizar el valor empresarial agregado en todos los flujos de trabajo. Sin embargo, debido a que modelamos a los proveedores de servicios con un rendimiento degradante bajo carga, no todos los flujos de trabajo alcanzarán su límite de calidad de servicio (QoS): fácilmente puede darse el caso de que los procesos comerciales sean asignados a proveedores que están sobrecargados y no pueden completarse dentro del límite de calidad de servicio respectivo de los flujos de trabajo. El problema clave de investigación, entonces, es asignar los procesos comerciales a los proveedores de servicios web con el objetivo de optimizar el valor comercial agregado de todos los flujos de trabajo. Dado que el alcance de la optimización es el conjunto completo de flujos de trabajo, puede ser que las mejores asignaciones de programación resulten en que algunos flujos de trabajo tengan que fallar para que otros tengan éxito. Esta observación intuitiva sugiere que enfoques de programación tradicionales como el round-robin o asignaciones proporcionales no funcionarán bien, lo cual es lo que observamos y discutimos en la Sección 4. Por otro lado, una búsqueda exhaustiva de todas las posibles asignaciones encontrará el mejor <br>horario</br>, pero la complejidad computacional es prohibitivamente alta. Supongamos que hay W flujos de trabajo con un promedio de B procesos de negocio por flujo de trabajo. Además, en el peor de los casos, cada proceso empresarial solicita un tipo de servicio, para el cual hay P proveedores. Por lo tanto, hay W · PB combinaciones para explorar y encontrar las asignaciones óptimas de procesos comerciales a proveedores. Incluso para configuraciones pequeñas (por ejemplo, Dado que (W=10, B=5, P=10), el tiempo computacional para la búsqueda exhaustiva es significativo, y en nuestro trabajo buscamos ajustar estos parámetros. En la siguiente subsección, discuta cómo se puede utilizar un algoritmo de búsqueda genética para converger hacia las asignaciones de programación óptimas. 3.2 Algoritmo genético Dado un espacio de búsqueda exponencial de asignaciones de procesos comerciales a proveedores de servicios web, el problema es encontrar la asignación óptima que produzca el valor comercial agregado más alto en general en todos los flujos de trabajo. Para explorar el espacio de soluciones, utilizamos un algoritmo genético (GA) que simula la selección natural darwiniana al hacer que los miembros de una población compitan por sobrevivir para transmitir sus cromosomas genéticos a la siguiente generación; después de generaciones sucesivas, hay una tendencia a que los cromosomas converjan hacia la mejor combinación. Aunque existen otras heurísticas de búsqueda que pueden resolver problemas de optimización (por ejemplo, recocido simulado o escalada de colina más empinada), el problema de programación de procesos empresariales se adapta bien a un AG porque las soluciones potenciales pueden representarse en forma de matriz y nos permite utilizar investigaciones previas en la recombinación efectiva de cromosomas de AG para formar nuevos miembros de la población (por ejemplo, [2]). 0 1 2 3 4 0 1 2 0 2 1 1 0 1 0 1 0 2 1 2 0 0 1 Figura 2: Un ejemplo de cromosoma que representa una asignación de programación de (flujo de trabajo, tipo de servicio) → proveedor de servicios. Cada fila representa un flujo de trabajo, y cada columna representa un tipo de servicio. Por ejemplo, aquí hay 3 flujos de trabajo (0 a 2) y 5 tipos de servicio (0 a 4). En el flujo de trabajo 0, cualquier solicitud de tipo de servicio 3 se dirige al proveedor 2. Ten en cuenta que el identificador del proveedor de servicios se encuentra dentro de un rango limitado a su tipo de servicio (es decir, su columna), por lo que el 2 listado para el tipo de servicio 3 es un servidor diferente al servidor 2 en otras columnas. Representación cromosómica de una solución. En la Figura 2 mostramos un ejemplo de cromosoma que codifica una asignación de programación. La representación es una matriz bidimensional que mapea {flujo de trabajo, tipo de servicio} a un proveedor de servicios. Para un proceso de negocio en el flujo de trabajo i y utilizando el tipo de servicio j, la entrada (i, j)-ésima en la tabla es el identificador del proveedor de servicios al que se asigna el proceso de negocio. Ten en cuenta que el identificador del proveedor de servicios se encuentra dentro de un rango limitado a su tipo de servicio. Ejecución de GA. Un algoritmo genético procede de la siguiente manera. Inicialmente se crea un conjunto aleatorio de cromosomas para la población. Los cromosomas son evaluados (hasheados) según alguna métrica, y los mejores son elegidos para ser padres. En nuestro problema, la evaluación produce el valor neto del negocio en todos los flujos de trabajo después de ejecutar todos los procesos comerciales una vez que se asignan a sus respectivos proveedores de servicios de acuerdo con el mapeo en el cromosoma. Los padres se recombinan para producir hijos, simulando un cruce sexual, y ocasionalmente puede surgir una mutación que produce nuevas características que no estaban disponibles en ninguno de los padres. La idea principal es que nos gustaría que los niños fueran diferentes de los padres (para explorar más del espacio de soluciones) pero no demasiado diferentes (para contener las porciones del cromosoma que resultan en asignaciones de programación exitosas). Ten en cuenta que encontrar el óptimo global no está garantizado debido a que la recombinación y la mutación son estocásticas. Recombinación y mutación de ADN. Como se mencionó, los cromosomas son matrices bidimensionales que representan asignaciones de horarios. Para simular la recombinación sexual de dos cromosomas para producir un nuevo cromosoma hijo, aplicamos un esquema de cruce de un punto dos veces (una vez a lo largo de cada dimensión). El cruce se explica mejor por analogía al espacio cartesiano de la siguiente manera. Se elige un punto al azar en la matriz para que sea la coordenada (0, 0). Los elementos de la matriz de los cuadrantes II y IV del primer progenitor y los elementos de los cuadrantes I y III del segundo progenitor se utilizan para crear el nuevo hijo. Este enfoque sigue las mejores prácticas de los algoritmos genéticos al mantener juntos los segmentos cromosómicos contiguos a medida que se transmiten de padre a hijo. El esquema de mutación de uni-cromosoma cambia aleatoriamente una de las asignaciones de proveedor de servicios a otro proveedor dentro del rango disponible. Otros esquemas de recombinación y mutación son un área de investigación en la comunidad de AG, y buscamos explorar nuevos operadores en trabajos futuros. Función de evaluación de GA. Un componente importante de los algoritmos genéticos es la función de evaluación. Dada una cromosoma particular que representa un mapeo de programación, la función calcula de manera determinista el valor neto del negocio en todas las cargas de trabajo. Los procesos comerciales en cada carga de trabajo se asignan a proveedores de servicios, y el tiempo de finalización de cada proveedor se calcula en función de la garantía del acuerdo de servicio utilizando los parámetros mencionados en la Sección 3.1, a saber, el tiempo de finalización sin carga α, la máxima concurrencia β y un coeficiente γ que controla la degradación del rendimiento lineal bajo carga pesada. Ten en cuenta que la función de evaluación puede ser fácilmente reemplazada si se desea; por ejemplo, otras funciones de evaluación pueden modelar diferentes garantías de proveedores de servicios o flujos de trabajo paralelos. 4. EXPERIMENTOS Y RESULTADOS En esta sección mostramos el beneficio de utilizar nuestro planificador basado en algoritmos genéticos. Debido a que queríamos escalar los escenarios a un gran número de flujos de trabajo (hasta 1000 en nuestros experimentos), implementamos un programa de simulación que nos permitió variar parámetros y medir los resultados con diferentes métricas. El simulador fue escrito en C++ estándar y se ejecutó en un ordenador de escritorio Linux (Fedora Core) con una velocidad de 2.8 GHz y 1GB de RAM. Comparamos nuestro algoritmo con candidatos alternativos: • Un algoritmo de round-robin bien conocido que asigna cada proceso comercial de forma circular a los proveedores de servicios para un tipo de servicio en particular. Este enfoque proporciona el esquema más simple para el equilibrio de carga. • Un algoritmo aleatorio-proporcional que asigna proporcionalmente los procesos comerciales a los proveedores de servicios; es decir, para un tipo de servicio dado, los proveedores de servicios se clasifican según su tiempo de finalización garantizado, y los procesos comerciales se asignan proporcionalmente a los proveedores en función de su tiempo de finalización. (También probamos un esquema de proporcionalidad basado tanto en los tiempos de finalización como en la concurrencia máxima, pero obtuvimos los mismos resultados, por lo que solo se muestran los resultados de los esquemas anteriores aquí.) • Un algoritmo codicioso de hombre de paja que siempre asigna los procesos comerciales al proveedor de servicios que tiene el tiempo de finalización garantizado más rápido. Este algoritmo representa un enfoque ingenuo basado en observaciones avaras y locales de cada flujo de trabajo sin tener en cuenta todos los flujos de trabajo. En los experimentos que siguen, todos los resultados fueron promediados a lo largo de 20 pruebas, y para ayudar a normalizar los efectos de la aleatorización utilizada durante el AG, cada prueba comenzó leyendo datos preinicializados desde el disco. En la Tabla 1 enumeramos nuestros parámetros experimentales. En la Figura 3 mostramos los resultados de ejecutar nuestro AG contra las tres alternativas candidatas. El eje x muestra el número de flujos de trabajo escalado a 1000, y el eje y muestra el valor comercial agregado de todos los flujos de trabajo. Como se puede ver, el algoritmo genético produce consistentemente el mayor valor comercial incluso a medida que aumenta el número de flujos de trabajo; con 1000 flujos de trabajo, el algoritmo genético produce una mejora del 115% sobre la siguiente mejor alternativa. (Tenga en cuenta que aunque estamos optimizando en función de la métrica de valor comercial que definimos anteriormente, los algoritmos genéticos pueden converger hacia el valor óptimo de cualquier métrica, siempre y cuando la función de evaluación pueda medir de manera consistente el valor de un cromosoma con esa métrica). Como era de esperar, el algoritmo codicioso tiene un rendimiento muy pobre porque hace el peor trabajo en equilibrar la carga: todos los procesos comerciales de un tipo de servicio dado se asignan a un solo servidor (el que se anuncia como el que tiene el tiempo de finalización más rápido), y a medida que llegan más procesos comerciales, el rendimiento de los proveedores se degrada linealmente. El esquema de round-robin es inicialmente superado por el esquema proporcional aleatorio hasta alrededor de 120 flujos de trabajo (como se muestra en el gráfico ampliado de la Figura 4), pero a medida que aumenta el número de flujos de trabajo, el esquema de round-robin gana consistentemente sobre el proporcional aleatorio. La razón es que aunque el esquema aleatorio-proporcional asigna procesos comerciales a proveedores proporcionalmente según los tiempos de finalización anunciados (que es una medida del poder del proveedor de servicios), incluso los mejores proveedores eventualmente alcanzarán una concurrencia máxima del mundo real para la gran cantidad de flujos de trabajo que estamos considerando. Para un número muy grande de flujos de trabajo, el esquema de round-robin es capaz de equilibrar mejor la carga entre todos los proveedores de servicios. Para comprender mejor el comportamiento resultante de las asignaciones de programación, mostramos los resultados de finalización del flujo de trabajo en las Figuras 5, 6 y 7 para 100, 500 y 900 flujos de trabajo, respectivamente. Estas cifras muestran el porcentaje de flujos de trabajo que son exitosos (pueden completarse dentro de su límite de QoS), aceptables (pueden completarse dentro de κ=3 veces su límite de QoS) y fallidos (no pueden completarse dentro de κ=3 veces su límite de QoS). El GA produce consistentemente el mayor porcentaje de flujos de trabajo exitosos (lo que resulta en valores comerciales más altos para el conjunto agregado de flujos de trabajo). Además, el esquema de round-robin produce mejores resultados que el proporcional-aleatorio para un gran número de flujos de trabajo, pero no tiene un rendimiento tan bueno como el algoritmo genético. En la Figura 8 graficamos el makespan resultante de los mismos experimentos anteriores. Makespan es una métrica tradicional de la comunidad de programación de trabajos que mide el tiempo transcurrido para que se complete el último trabajo. Aunque útil, no captura la métrica de valor empresarial de alto nivel contra la que estamos optimizando. De hecho, el makespan no tiene en cuenta el hecho de que proporcionamos múltiples niveles de finalización (exitoso, aceptable y fallido) y asignamos puntajes de valor comercial en consecuencia. Para completar, señalamos que el algoritmo genético proporciona el makespan más rápido, pero es igualado por el algoritmo de round robin. El algoritmo genético produce mejores valores comerciales (como se muestra en la Figura 3) porque es capaz de explorar el espacio de soluciones para encontrar mejores asignaciones que generen flujos de trabajo más exitosos (como se muestra en las Figuras 5 a 7). También analizamos el efecto de los algoritmos de programación en el equilibrio de la carga. La Figura 9 muestra el porcentaje de proveedores de servicios que fueron accedidos mientras se ejecutaban los flujos de trabajo. Como era de esperar, el algoritmo codicioso siempre elige a un proveedor de servicios; por otro lado, el algoritmo de round-robin es el más rápido para distribuir el negocio. 33 Parámetro experimental Comentario Flujos de trabajo 5 a 1000 Procesos de negocio por flujo de trabajo aleatorio uniforme: 1 - 10 Tipos de servicio 10 Proveedores de servicios por tipo de servicio aleatorio uniforme: 1 - 10 Objetivo de QoS del flujo de trabajo aleatorio uniforme: 10-30 segundos Tiempo de finalización del proveedor de servicios (α) aleatorio uniforme: 1 - 12 segundos Máxima concurrencia del proveedor de servicios (β) aleatorio uniforme: 1 - 12 Coeficiente de degradación del proveedor de servicios (γ) aleatorio uniforme: 0.1 - 0.9 Valor de negocio para flujos de trabajo exitosos aleatorio uniforme: 10 - 50 puntos Valor de negocio para flujos de trabajo aceptables aleatorio uniforme: 0 - 10 puntos Valor de negocio para flujos de trabajo fallidos aleatorio uniforme: -10 - 0 puntos GA: número de padres 20 GA: número de hijos 80 GA: número de generaciones 1000 Tabla 1: Parámetros experimentales Fallido Aceptable (completado pero no dentro de QoS) Exitoso (completado dentro de QoS) 0% 20% 40% 60% 80% 100% RoundRobinRandProportionalGreedyGeneticAlg Porcentaje de todos los flujos de trabajo Comportamiento del flujo de trabajo, 100 flujos de trabajo Figura 5: Comportamiento del flujo de trabajo para 100 flujos de trabajo. Fracaso Aceptable (completado pero no dentro de QoS) Exitoso (completado dentro de QoS) 0% 20% 40% 60% 80% 100% RoundRobinRandProportionalGreedyGeneticAlg Porcentaje de todos los flujos de trabajo Comportamiento del flujo de trabajo, 500 flujos de trabajo Figura 6: Comportamiento del flujo de trabajo para 500 flujos de trabajo. Fracaso Aceptable (completado pero no dentro de QoS) Exitoso (completado dentro de QoS) 0% 20% 40% 60% 80% 100% RoundRobinRandProportionalGreedyGeneticAlg Porcentaje de todos los flujos de trabajo Comportamiento del flujo de trabajo, 500 flujos de trabajo Figura 7: Comportamiento del flujo de trabajo para 900 flujos de trabajo. 0 50 100 150 200 250 300 0 200 400 600 800 1000 Tiempo total [segundos] Número de flujos de trabajo Tiempo máximo de finalización para todos los flujos de trabajo Algoritmo genético Round robin Proporcional aleatorio Codicioso Figura 8: Tiempo máximo de finalización para todos los flujos de trabajo. Este valor es la métrica makespan utilizada en la investigación de programación tradicional. Aunque útil, el makespan no tiene en cuenta la puntuación del valor comercial en nuestro dominio de problemas. La Figura 10 muestra el porcentaje de proveedores de servicios accedidos (es decir, el porcentaje de proveedores de servicios representados en la Figura 9) que tenían más procesos comerciales asignados que su concurrencia máxima anunciada. Por ejemplo, en el algoritmo voraz solo se utiliza un proveedor de servicios, y este proveedor se satura rápidamente. Por otro lado, el algoritmo aleatorio-proporcional utiliza muchos proveedores de servicios, pero debido a que los procesos comerciales se asignan de manera proporcional con más asignaciones yendo a los mejores proveedores, hay una tendencia a que un menor porcentaje de proveedores se saturen. Para completitud, mostramos el rendimiento del algoritmo genético en sí mismo en la Figura 11. El algoritmo escala linealmente con un aumento en el número de flujos de trabajo. Observamos que los algoritmos round-robin, random-proportional y greedy terminaron en menos de 1 segundo incluso para la configuración de flujo de trabajo más grande. Sin embargo, consideramos que el beneficio de encontrar puntajes de valor empresarial mucho más altos justifica el tiempo de ejecución del algoritmo genético; además, esperaríamos que el tiempo de ejecución mejore tanto con la optimización del software como con un ordenador más rápido que nuestro PC estándar. CONCLUSIÓN Los procesos comerciales dentro de los flujos de trabajo pueden ser orquestados para acceder a servicios web. En este artículo estudiamos la provisión de servicios de múltiples niveles, donde las solicitudes de servicios web a tipos de servicios pueden ser asignadas a diferentes proveedores de servicios. El problema resultante es que para poder soportar un gran número de flujos de trabajo, la asignación de procesos de negocio a proveedores de servicios web debe ser inteligente. Utilizamos una métrica de valor empresarial para medir el 0.2 0.4 0.6 0.8 1 0 200 400 600 800 1000 Porcentaje de todos los proveedores de servicios Número de flujos de trabajo Proveedores de servicios utilizados Algoritmo genético Round robin Proporcional aleatorio Ávido Figura 9: El porcentaje de proveedores de servicios utilizados durante las ejecuciones de carga de trabajo. El algoritmo Greedy siempre elige al mismo proveedor de servicios, mientras que el algoritmo Round Robin distribuye las solicitudes de manera uniforme entre los proveedores. 0 0.2 0.4 0.6 0.8 1 0 200 400 600 800 1000 Porcentaje de todos los proveedores de servicios Número de flujos de trabajo Proveedores saturados Algoritmo genético Round robin Proporcional aleatorio Greedy Figura 10: El porcentaje de proveedores de servicios que están saturados entre aquellos proveedores que fueron utilizados (es decir, el porcentaje de proveedores de servicios representados en la Figura 9). Un proveedor de servicios saturado es aquel cuya carga de trabajo es mayor que su concurrencia máxima anunciada. Dado que el espacio de soluciones de los mapeos de programación es exponencial, utilizamos un algoritmo de búsqueda genética para explorar el espacio y converger hacia el mejor <br>horario</br>. Con una configuración predeterminada para todos los parámetros y utilizando nuestra puntuación de valor empresarial, el GA produjo hasta un 115% de mejora en el valor empresarial sobre el siguiente mejor algoritmo. Finalmente, debido a que un algoritmo genético convergerá hacia el valor óptimo utilizando cualquier métrica (incluso diferente a la métrica de valor empresarial que utilizamos), creemos que nuestro enfoque tiene un fuerte potencial para trabajos futuros. En trabajos futuros, buscamos adquirir trazas del mundo real de instancias de servicios web para obtener mejores estimaciones de las garantías de acuerdo de servicio, aunque esperamos que tales garantías entre los proveedores y sus consumidores no estén generalmente disponibles para el público. También analizaremos otras métricas de calidad de servicio (QoS) como el uso de CPU y E/S. Por ejemplo, podemos analizar los costos de transferencia con diferentes anchos de banda, latencia, tamaño de datos y distribución de datos. Además, esperamos mejorar nuestro algoritmo genético y compararlo con más alternativas de programación. Finalmente, dado que nuestro trabajo es complementario al trabajo existente en coreografía de servicios web (porque dependemos de flujos de trabajo preconfigurados), buscamos integrar nuestro enfoque con los sistemas de flujo de trabajo de servicios web disponibles expresados en BPEL. 6. REFERENCIAS [1] A. Ankolekar, et al. DAML-S: Marcado Semántico para Servicios Web, En Proc. del Simposio Internacional de Trabajo de la Web Semántica, 2001. [2] L. Davis. Programación de taller con algoritmos genéticos, En Proc. de la Conferencia Internacional sobre Algoritmos Genéticos, 1985. [3] H.-L. Fang, P. Ross y D. Corne. Un Enfoque Prometedor de Algoritmo Genético para Problemas de Programación de Taller de Trabajo, Re-programación y Programación de Taller Abierto, En Actas de la 5ta Conferencia Internacional sobre Algoritmos Genéticos, 1993. [4] M. Gary y D. Johnson. Computadoras e Intractabilidad: Una Guía de la Teoría de NP-Completitud, Freeman, 1979. [5] J. Holland. Adaptación en Sistemas Naturales y Artificiales: Un Análisis Introductorio con Aplicaciones a la Biología, Control e Inteligencia Artificial, MIT Press, 1992. [6] D. Goldberg. Algoritmos Genéticos en Búsqueda, Optimización y Aprendizaje Automático, Kluwer Academic Publishers, 1989. [7] Procesos de Negocio en un Mundo de Servicios Web, www-128.ibm.com/developerworks/webservices/library/ws-bpelwp/. [8] G. Soundararajan, K. Manassiev, J. Chen, A. Goel y C. Amza. Bases de datos de back-end en clústeres de servidores de contenido dinámico compartido, En Proc. de la Conferencia Internacional de Computación Autónoma de IEEE, 2005. [9] B. Srivastava y J. Koehler. Composición de Servicios Web: Soluciones Actuales y Problemas Abiertos, ICAP, 2003. [10] B. Urgaonkar, P. Shenoy, A. Chandra y P. Goyal. Provisión dinámica de aplicaciones de Internet de múltiples niveles, En Proc. de la Conferencia Internacional de IEEE sobre Computación Autónoma, 2005. [11] L. Zeng, B. Benatallah, M. Dumas, J. Kalagnanam y Q. Sheng. Composición de Servicios Web Impulsada por la Calidad, En Proc. de la Conferencia WWW, 2003. 35 ",
            "candidates": [],
            "error": [
                [
                    "programar",
                    "horario",
                    "horario"
                ]
            ]
        }
    }
}