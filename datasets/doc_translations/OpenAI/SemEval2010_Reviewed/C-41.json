{
    "id": "C-41",
    "original_text": "Evaluating Adaptive Resource Management for Distributed Real-Time Embedded Systems Nishanth Shankaran, ∗ Xenofon Koutsoukos, Douglas C. Schmidt, and Aniruddha Gokhale Dept. of EECS, Vanderbilt University, Nashville ABSTRACT A challenging problem faced by researchers and developers of distributed real-time and embedded (DRE) systems is devising and implementing effective adaptive resource management strategies that can meet end-to-end quality of service (QoS) requirements in varying operational conditions. This paper presents two contributions to research in adaptive resource management for DRE systems. First, we describe the structure and functionality of the Hybrid Adaptive Resourcemanagement Middleware (HyARM), which provides adaptive resource management using hybrid control techniques for adapting to workload fluctuations and resource availability. Second, we evaluate the adaptive behavior of HyARM via experiments on a DRE multimedia system that distributes video in real-time. Our results indicate that HyARM yields predictable, stable, and high system performance, even in the face of fluctuating workload and resource availability. Categories and Subject Descriptors C.2.4 [Distributed Systems]: Distributed Applications; D.4.7 [Organization and Design]: Real-time Systems and Embedded Systems 1. INTRODUCTION Achieving end-to-end real-time quality of service (QoS) is particularly important for open distributed real-time and embedded (DRE) systems that face resource constraints, such as limited computing power and network bandwidth. Overutilization of these system resources can yield unpredictable and unstable behavior, whereas under-utilization can yield excessive system cost. A promising approach to meeting these end-to-end QoS requirements effectively, therefore, is to develop and apply adaptive middleware [10, 15], which is software whose functional and QoS-related properties can be modified either statically or dynamically. Static modifications are carried out to reduce footprint, leverage capabilities that exist in specific platforms, enable functional subsetting, and/or minimize hardware/software infrastructure dependencies. Objectives of dynamic modifications include optimizing system responses to changing environments or requirements, such as changing component interconnections, power-levels, CPU and network bandwidth availability, latency/jitter, and workload. In open DRE systems, adaptive middleware must make such modifications dependably, i.e., while meeting stringent end-to-end QoS requirements, which requires the specification and enforcement of upper and lower bounds on system resource utilization to ensure effective use of system resources. To meet these requirements, we have developed the Hybrid Adaptive Resource-management Middleware (HyARM), which is an open-source1 distributed resource management middleware. HyARM is based on hybrid control theoretic techniques [8], which provide a theoretical framework for designing control of complex system with both continuous and discrete dynamics. In our case study, which involves a distributed real-time video distribution system, the task of adaptive resource management is to control the utilization of the different resources, whose utilizations are described by continuous variables. We achieve this by adapting the resolution of the transmitted video, which is modeled as a continuous variable, and by changing the frame-rate and the compression, which are modeled by discrete actions. We have implemented HyARM atop The ACE ORB (TAO) [13], which is an implementation of the Real-time CORBA specification [12]. Our results show that (1) HyARM ensures effective system resource utilization and (2) end-to-end QoS requirements of higher priority applications are met, even in the face of fluctuations in workload. The remainder of the paper is organized as follows: Section 2 describes the architecture, functionality, and resource utilization model of our DRE multimedia system case study; Section 3 explains the structure and functionality of HyARM; Section 4 evaluates the adaptive behavior of HyARM via experiments on our multimedia system case study; Section 5 compares our research on HyARM with related work; and Section 6 presents concluding remarks. 1 The code and examples for HyARM are available at www. dre.vanderbilt.edu/∼nshankar/HyARM/. Article 7 2. CASE STUDY: DRE MULTIMEDIA SYSTEM This section describes the architecture and QoS requirements of our DRE multimedia system. 2.1 Multimedia System Architecture Wireless Link Wireless Link Wireless Link ` ` ` Physical Link Physical Link Physical Link Base Station End Receiver End Receiver End Receiver` Physical Link End Receiver UAV Camera Video Encoder Camera Video Encoder Camera Video Encoder UAV Camera Video Encoder Camera Video Encoder Camera Video Encoder UAV Camera Video Encoder Camera Video Encoder Camera Video Encoder Figure 1: DRE Multimedia System Architecture The architecture for our DRE multimedia system is shown in Figure 1 and consists of the following entities: (1)Data source (video capture by UAV), where video is captured (related to subject of interest) by camera(s) on each UAV, followed by encoding of raw video using a specific encoding scheme and transmitting the video to the next stage in the pipeline. (2)Data distributor (base station), where the video is processed to remove noise, followed by retransmission of the processed video to the next stage in the pipeline. (3) Sinks (command and control center), where the received video is again processed to remove noise, then decoded and finally rendered to end user via graphical displays. Significant improvements in video encoding/decoding and (de)compression techniques have been made as a result of recent advances in video encoding and compression techniques [14]. Common video compression schemes are MPEG1, MPEG-2, Real Video, and MPEG-4. Each compression scheme is characterized by its resource requirement, e.g., the computational power to (de)compress the video signal and the network bandwidth required to transmit the compressed video signal. Properties of the compressed video, such as resolution and frame-rate determine both the quality and the resource requirements of the video. Our multimedia system case study has the following endto-end real-time QoS requirements: (1) latency, (2) interframe delay (also know as jitter), (3) frame rate, and (4) picture resolution. These QoS requirements can be classified as being either hard or soft. Hard QoS requirements should be met by the underlying system at all times, whereas soft QoS requirements can be missed occasionally.2 For our case study, we treat QoS requirements such as latency and jitter as harder QoS requirements and strive to meet these requirements at all times. In contrast, we treat QoS requirements such as video frame rate and picture resolution as softer QoS requirements and modify these video properties adaptively to handle dynamic changes in resource availabil2 Although hard and soft are often portrayed as two discrete requirement sets, in practice they are usually two ends of a continuum ranging from softer to harder rather than two disjoint points. ity effectively. 2.2 DRE Multimedia System Rresources There are two primary types of resources in our DRE multimedia system: (1) processors that provide computational power available at the UAVs, base stations, and end receivers and (2) network links that provide communication bandwidth between UAVs, base stations, and end receivers. The computing power required by the video capture and encoding tasks depends on dynamic factors, such as speed of the UAV, speed of the subject (if the subject is mobile), and distance between UAV and the subject. The wireless network bandwidth available to transmit video captured by UAVs to base stations also depends on the wireless connectivity between the UAVs and the base station, which in-turn depend on dynamic factors such as the speed of the UAVs and the relative distance between UAVs and base stations. The bandwidth of the link between the base station and the end receiver is limited, but more stable than the bandwidth of the wireless network. Resource requirements and availability of resources are subjected to dynamic changes. Two classes of applications - QoS-enabled and best-effort - use the multimedia system infrastructure described above to transmit video to their respective receivers. QoS-enabled class of applications have higher priority over best-effort class of application. In our study, emergency response applications belong to QoS-enabled and surveillance applications belong to best-effort class. For example, since a stream from an emergency response application is of higher importance than a video stream from a surveillance application, it receives more resources end-to-end. Since resource availability significantly affects QoS, we use current resource utilization as the primary indicator of system performance. We refer to the current level of system resource utilization as the system condition. Based on this definition, we can classify system conditions as being either under, over, or effectively utilized. Under-utilization of system resources occurs when the current resource utilization is lower than the desired lower bound on resource utilization. In this system condition, residual system resources (i.e., network bandwidth and computational power) are available in large amounts after meeting end-to-end QoS requirements of applications. These residual resources can be used to increase the QoS of the applications. For example, residual CPU and network bandwidth can be used to deliver better quality video (e.g., with greater resolution and higher frame rate) to end receivers. Over-utilization of system resources occurs when the current resource utilization is higher than the desired upper bound on resource utilization. This condition can arise from loss of resources - network bandwidth and/or computing power at base station, end receiver or at UAV - or may be due to an increase in resource demands by applications. Over-utilization is generally undesirable since the quality of the received video (such as resolution and frame rate) and timeliness properties (such as latency and jitter) are degraded and may result in an unstable (and thus ineffective) system. Effective resource utilization is the desired system condition since it ensures that end-to-end QoS requirements of the UAV-based multimedia system are met and utilization of both system resources, i.e., network bandwidth and computational power, are within their desired utilization bounds. Article 7 Section 3 describes techniques we applied to achieve effective utilization, even in the face of fluctuating resource availability and/or demand. 3. OVERVIEW OF HYARM This section describes the architecture of the Hybrid Adaptive Resource-management Middleware (HyARM). HyARM ensures efficient and predictable system performance by providing adaptive resource management, including monitoring of system resources and enforcing bounds on application resource utilization. 3.1 HyARM Structure and Functionality Resource Utilization Legend Resource Allocation Application Parameters Figure 2: HyARM Architecture HyARM is composed of three types of entities shown in Figure 2 and described below: Resource monitors observe the overall resource utilization for each type of resource and resource utilization per application. In our multimedia system, there are resource monitors for CPU utilization and network bandwidth. CPU monitors observe the CPU resource utilization of UAVs, base station, and end receivers. Network bandwidth monitors observe the network resource utilization of (1) wireless network link between UAVs and the base station and (2) wired network link between the base station and end receivers. The central controller maintains the system resource utilization below a desired bound by (1) processing periodic updates it receives from resource monitors and (2) modifying the execution of applications accordingly, e.g., by using different execution algorithms or operating the application with increased/decreased QoS. This adaptation process ensures that system resources are utilized efficiently and end-to-end application QoS requirements are met. In our multimedia system, the HyARM controller determines the value of application parameters such as (1) video compression schemes, such as Real Video and MPEG-4, and/or (2) frame rate, and (3) picture resolution. From the perspective of hybrid control theoretic techniques [8], the different video compression schemes and frame rate form the discrete variables of application execution and picture resolution forms the continuous variables. Application adapters modify application execution according to parameters recommended by the controller and ensures that the operation of the application is in accordance with the recommended parameters. In the current mplementation of HyARM, the application adapter modifies the input parameters to the application that affect application QoS and resource utilization - compression scheme, frame rate, and picture resolution. In our future implementations, we plan to use resource reservation mechanisms such as Differentiated Service [7, 3] and Class-based Kernel Resource Management [4] to provision/reserve network and CPU resources. In our multimedia system, the application adapter ensures that the video is encoded at the recommended frame rate and resolution using the specified compression scheme. 3.2 Applying HyARM to the Multimedia System Case Study HyARM is built atop TAO [13], a widely used open-source implementation of Real-time CORBA [12]. HyARM can be applied to ensure efficient, predictable and adaptive resource management of any DRE system where resource availability and requirements are subject to dynamic change. Figure 3 shows the interaction of various parts of the DRE multimedia system developed with HyARM, TAO, and TAOs A/V Streaming Service. TAOs A/V Streaming service is an implementation of the CORBA A/V Streaming Service specification. TAOs A/V Streaming Service is a QoS-enabled video distribution service that can transfer video in real-time to one or more receivers. We use the A/V Streaming Service to transmit the video from the UAVs to the end receivers via the base station. Three entities of Receiver UAV TAO Resource Utilization HyARM Central Controller A/V Streaming Service : Sender MPEG1 MPEG4 Real Video HyARM Resource Monitor A/V Streaming Service : Receiver Compressed Video Compressed Video Application HyARM Application Adapter Remote Object Call Control Inputs Resource Utilization Resource Utilization / Control Inputs Control Inputs Legend Figure 3: Developing the DRE Multimedia System with HyARM HyARM, namely the resource monitors, central controller, and application adapters are built as CORBA servants, so they can be distributed throughout a DRE system. Resource monitors are remote CORBA objects that update the central controller periodically with the current resource utilization. Application adapters are collocated with applications since the two interact closely. As shown in Figure 3, UAVs compress the data using various compression schemes, such as MPEG1, MPEG4, and Real Video, and uses TAOs A/V streaming service to transmit the video to end receivers. HyARMs resource monitors continuously observe the system resource utilization and notify the central controller with the current utilization. 3 The interaction between the controller and the resource monitors uses the Observer pattern [5]. When the controller receives resource utilization updates from monitors, it computes the necessary modifications to application(s) parameters and notifies application adapter(s) via a remote operation call. Application adapter(s), that are collocated with the application, modify the input parameters to the application - in our case video encoder - to modify the application resource utilization and QoS. 3 The base station is not included in the figure since it only retransmits the video received from UAVs to end receivers. Article 7 4. PERFORMANCE RESULTS AND ANALYSIS This section first describes the testbed that provides the infrastructure for our DRE multimedia system, which was used to evaluate the performance of HyARM. We then describe our experiments and analyze the results obtained to empirically evaluate how HyARM behaves during underand over-utilization of system resources. 4.1 Overview of the Hardware and Software Testbed Our experiments were performed on the Emulab testbed at University of Utah. The hardware configuration consists of two nodes acting as UAVs, one acting as base station, and one as end receiver. Video from the two UAVs were transmitted to a base station via a LAN configured with the following properties: average packet loss ratio of 0.3 and bandwidth 1 Mbps. The network bandwidth was chosen to be 1 Mbps since each UAV in the DRE multimedia system is allocated 250 Kbps. These parameters were chosen to emulate an unreliable wireless network with limited bandwidth between the UAVs and the base station. From the base station, the video was retransmitted to the end receiver via a reliable wireline link of 10 Mbps bandwidth with no packet loss. The hardware configuration of all the nodes was chosen as follows: 600 MHz Intel Pentium III processor, 256 MB physical memory, 4 Intel EtherExpress Pro 10/100 Mbps Ethernet ports, and 13 GB hard drive. A real-time version of Linux - TimeSys Linux/NET 3.1.214 based on RedHat Linux 9was used as the operating system for all nodes. The following software packages were also used for our experiments: (1) Ffmpeg 0.4.9-pre1, which is an open-source library (http: //www.ffmpeg.sourceforge.net/download.php) that compresses video into MPEG-2, MPEG-4, Real Video, and many other video formats. (2) Iftop 0.16, which is an opensource library (http://www.ex-parrot.com/∼pdw/iftop/) we used for monitoring network activity and bandwidth utilization. (3) ACE 5.4.3 + TAO 1.4.3, which is an opensource (http://www.dre.vanderbilt.edu/TAO) implementation of the Real-time CORBA [12] specification upon which HyARM is built. TAO provides the CORBA Audio/Video (A/V) Streaming Service that we use to transmit the video from the UAVs to end receivers via the base station. 4.2 Experiment Configuration Our experiment consisted of two (emulated) UAVs that simultaneously send video to the base station using the experimentation setup described in Section 4.1. At the base station, video was retransmitted to the end receivers (without any modifications), where it was stored to a file. Each UAV hosted two applications, one QoS-enabled application (emergency response), and one best-effort application (surveillance). Within each UAV, computational power is shared between the applications, while the network bandwidth is shared among all applications. To evaluate the QoS provided by HyARM, we monitored CPU utilization at the two UAVs, and network bandwidth utilization between the UAV and the base station. CPU resource utilization was not monitored at the base station and the end receiver since they performed no computationallyintensive operations. The resource utilization of the 10 Mpbs physical link between the base station and the end receiver does not affect QoS of applications and is not monitored by HyARM since it is nearly 10 times the 1 MB bandwidth of the LAN between the UAVs and the base station. The experiment also monitors properties of the video that affect the QoS of the applications, such as latency, jitter, frame rate, and resolution. The set point on resource utilization for each resource was specified at 0.69, which is the upper bound typically recommended by scheduling techniques, such as rate monotonic algorithm [9]. Since studies [6] have shown that human eyes can perceive delays more than 200ms, we use this as the upper bound on jitter of the received video. QoS requirements for each class of application is specified during system initialization and is shown in Table 1. 4.3 Empirical Results and Analysis This section presents the results obtained from running the experiment described in Section 4.2 on our DRE multimedia system testbed. We used system resource utilization as a metric to evaluate the adaptive resource management capabilities of HyARM under varying input work loads. We also used application QoS as a metric to evaluate HyARMs capabilities to support end-to-end QoS requirements of the various classes of applications in the DRE multimedia system. We analyze these results to explain the significant differences in system performance and application QoS. Comparison of system performance is decomposed into comparison of resource utilization and application QoS. For system resource utilization, we compare (1) network bandwidth utilization of the local area network and (2) CPU utilization at the two UAV nodes. For application QoS, we compare mean values of video parameters, including (1) picture resolution, (2) frame rate, (3) latency, and (4) jitter. Comparison of resource utilization. Over-utilization of system resources in DRE systems can yield an unstable system. In contrast, under-utilization of system resources increases system cost. Figure 4 and Figure 5 compare the system resource utilization with and without HyARM. Figure 4 shows that HyARM maintains system utilization close to the desired utilization set point during fluctuation in input work load by transmitting video of higher (or lower) QoS for QoS-enabled (or best-effort) class of applications during over (or under) utilization of system resources. Figure 5 shows that without HyARM, network utilization was as high as 0.9 during increase in workload conditions, which is greater than the utilization set point of 0.7 by 0.2. As a result of over-utilization of resources, QoS of the received video, such as average latency and jitter, was affected significantly. Without HyARM, system resources were either under-utilized or over-utilized, both of which are undesirable. In contrast, with HyARM, system resource utilization is always close to the desired set point, even during fluctuations in application workload. During sudden fluctuation in application workload, system conditions may be temporarily undesirable, but are restored to the desired condition within several sampling periods. Temporary over-utilization of resources is permissible in our multimedia system since the quality of the video may be degraded for a short period of time, though application QoS will be degraded significantly if poor quality video is transmitted for a longer period of time. Comparison of application QoS. Figures 6, Figure 7, and Table 2 compare latency, jitter, resolution, and frameArticle 7 Class Resolution Frame Rate Latency (msec ) Jitter (msec) QoS Enabled 1024 x 768 25 200 200 Best-effort 320 x 240 15 300 250 Table 1: Application QoS Requirements Figure 4: Resource utilization with HyARM Figure 5: Resource utilization without HyARM rate of the received video, respectively. Table 2 shows that HyARM increases the resolution and frame video of QoSenabled applications, but decreases the resolution and frame rate of best effort applications. During over utilization of system resources, resolution and frame rate of lower priority applications are reduced to adapt to fluctuations in application workload and to maintain the utilization of resources at the specified set point. It can be seen from Figure 6 and Figure 7 that HyARM reduces the latency and jitter of the received video significantly. These figures show that the QoS of QoS-enabled applications is greatly improved by HyARM. Although application parameters, such as frame rate and resolutions, which affect the soft QoS requirements of best-effort applications may be compromised, the hard QoS requirements, such as latency and jitter, of all applications are met. HyARM responds to fluctuation in resource availability and/or demand by constant monitoring of resource utilization. As shown in Figure 4, when resources utilization increases above the desired set point, HyARM lowers the utilization by reducing the QoS of best-effort applications. This adaptation ensures that enough resources are available for QoS-enabled applications to meet their QoS needs. Figures 6 and 7 show that the values of latency and jitter of the received video of the system with HyARM are nearly half of the corresponding value of the system without HyARM. With HyARM, values of these parameters are well below the specified bounds, whereas without HyARM, these value are significantly above the specified bounds due to overutilization of the network bandwidth, which leads to network congestion and results in packet loss. HyARM avoids this by reducing video parameters such as resolution, frame-rate, and/or modifying the compression scheme used to compress the video. Our conclusions from analyzing the results described above are that applying adaptive middleware via hybrid control to DRE system helps to (1) improve application QoS, (2) increase system resource utilization, and (3) provide better predictability (lower latency and inter-frame delay) to QoSenabled applications. These improvements are achieved largely due to monitoring of system resource utilization, efficient system workload management, and adaptive resource provisioning by means of HyARMs network/CPU resource monitors, application adapter, and central controller, respectively. 5. RELATED WORK A number of control theoretic approaches have been applied to DRE systems recently. These techniques aid in overcoming limitations with traditional scheduling approaches that handle dynamic changes in resource availability poorly and result in a rigidly scheduled system that adapts poorly to change. A survey of these techniques is presented in [1]. One such approach is feedback control scheduling (FCS) [2, 11]. FCS algorithms dynamically adjust resource allocation by means of software feedback control loops. FCS algorithms are modeled and designed using rigorous controltheoretic methodologies. These algorithms provide robust and analytical performance assurances despite uncertainties in resource availability and/or demand. Although existing FCS algorithms have shown promise, these algorithms often assume that the system has continuous control variable(s) that can continuously be adjusted. While this assumption holds for certain classes of systems, there are many classes of DRE systems, such as avionics and total-ship computing environments that only support a finite a priori set of discrete configurations. The control variables in such systems are therefore intrinsically discrete. HyARM handles both continuous control variables, such as picture resolution, and discrete control variable, such as discrete set of frame rates. HyARM can therefore be applied to system that support continuous and/or discrete set of control variables. The DRE multimedia system as described in Section 2 is an example DRE system that offers both continuous (picture resolution) and discrete set (frame-rate) of control variables. These variables are modified by HyARM to achieve efficient resource utilization and improved application QoS. 6. CONCLUDING REMARKS Article 7 Figure 6: Comparison of Video Latency Figure 7: Comparison of Video Jitter Source Picture Size / Frame Rate With HyARM Without HyARM UAV1 QoS Enabled Application 1122 X 1496 / 25 960 X 720 / 20 UAV1 Best-effort Application 288 X 384 / 15 640 X 480 / 20 UAV2 QoS Enabled Application 1126 X 1496 / 25 960 X 720 / 20 UAV2 Best-effort Application 288 X 384 / 15 640 X 480 / 20 Table 2: Comparison of Video Quality Many distributed real-time and embedded (DRE) systems demand end-to-end quality of service (QoS) enforcement from their underlying platforms to operate correctly. These systems increasingly run in open environments, where resource availability is subject to dynamic change. To meet end-to-end QoS in dynamic environments, DRE systems can benefit from an adaptive middleware that monitors system resources, performs efficient application workload management, and enables efficient resource provisioning for executing applications. This paper described HyARM, an adaptive middleware, that provides effective resource management to DRE systems. HyARM employs hybrid control techniques to provide the adaptive middleware capabilities, such as resource monitoring and application adaptation that are key to providing the dynamic resource management capabilities for open DRE systems. We employed HyARM to a representative DRE multimedia system that is implemented using Real-time CORBA and CORBA A/V Streaming Service. We evaluated the performance of HyARM in a system composed of three distributed resources and two classes of applications with two applications each. Our empirical results indicate that HyARM ensures (1) efficient resource utilization by maintaining the resource utilization of system resources within the specified utilization bounds, (2) QoS requirements of QoS-enabled applications are met at all times. Overall, HyARM ensures efficient, predictable, and adaptive resource management for DRE systems. 7. REFERENCES [1] T. F. Abdelzaher, J. Stankovic, C. Lu, R. Zhang, and Y. Lu. Feddback Performance Control in Software Services. IEEE: Control Systems, 23(3), June 2003. [2] L. Abeni, L. Palopoli, G. Lipari, and J. Walpole. Analysis of a reservation-based feedback scheduler. In IEEE Real-Time Systems Symposium, Dec. 2002. [3] S. Blake, D. Black, M. Carlson, E. Davies, Z. Wang, and W. Weiss. An architecture for differentiated services. Network Information Center RFC 2475, Dec. 1998. [4] H. Franke, S. Nagar, C. Seetharaman, and V. Kashyap. Enabling Autonomic Workload Management in Linux. In Proceedings of the International Conference on Autonomic Computing (ICAC), New York, New York, May 2004. IEEE. [5] E. Gamma, R. Helm, R. Johnson, and J. Vlissides. Design Patterns: Elements of Reusable Object-Oriented Software. Addison-Wesley, Reading, MA, 1995. [6] G. Ghinea and J. P. Thomas. Qos impact on user perception and understanding of multimedia video clips. In MULTIMEDIA 98: Proceedings of the sixth ACM international conference on Multimedia, pages 49-54, Bristol, United Kingdom, 1998. ACM Press. [7] Internet Engineering Task Force. Differentiated Services Working Group (diffserv) Charter. www.ietf.org/html.charters/diffserv-charter.html, 2000. [8] X. Koutsoukos, R. Tekumalla, B. Natarajan, and C. Lu. Hybrid Supervisory Control of Real-Time Systems. In 11th IEEE Real-Time and Embedded Technology and Applications Symposium, San Francisco, California, Mar. 2005. [9] J. Lehoczky, L. Sha, and Y. Ding. The Rate Monotonic Scheduling Algorithm: Exact Characterization and Average Case Behavior. In Proceedings of the 10th IEEE Real-Time Systems Symposium (RTSS 1989), pages 166-171. IEEE Computer Society Press, 1989. [10] J. Loyall, J. Gossett, C. Gill, R. Schantz, J. Zinky, P. Pal, R. Shapiro, C. Rodrigues, M. Atighetchi, and D. Karr. Comparing and Contrasting Adaptive Middleware Support in Wide-Area and Embedded Distributed Object Applications. In Proceedings of the 21st International Conference on Distributed Computing Systems (ICDCS-21), pages 625-634. IEEE, Apr. 2001. [11] C. Lu, J. A. Stankovic, G. Tao, and S. H. Son. Feedback Control Real-Time Scheduling: Framework, Modeling, and Algorithms. Real-Time Systems Journal, 23(1/2):85-126, July 2002. [12] Object Management Group. Real-time CORBA Specification, OMG Document formal/02-08-02 edition, Aug. 2002. [13] D. C. Schmidt, D. L. Levine, and S. Mungee. The Design and Performance of Real-Time Object Request Brokers. Computer Communications, 21(4):294-324, Apr. 1998. [14] Thomas Sikora. Trends and Perspectives in Image and Video Coding. In Proceedings of the IEEE, Jan. 2005. [15] X. Wang, H.-M. Huang, V. Subramonian, C. Lu, and C. Gill. CAMRIT: Control-based Adaptive Middleware for Real-time Image Transmission. In Proc. of the 10th IEEE Real-Time and Embedded Tech. and Applications Symp. (RTAS), Toronto, Canada, May 2004. Article 7",
    "original_translation": "Evaluando la Gestión de Recursos Adaptativa para Sistemas Empotrados Distribuidos en Tiempo Real de Nishanth Shankaran, Xenofon Koutsoukos, Douglas C. Schmidt y Aniruddha Gokhale, Dept. de EECS, Universidad de Vanderbilt, Nashville RESUMEN Un problema desafiante enfrentado por investigadores y desarrolladores de sistemas distribuidos en tiempo real y embebidos (DRE) es idear e implementar estrategias efectivas de gestión adaptativa de recursos que puedan cumplir con los requisitos de calidad de servicio (QoS) de extremo a extremo en condiciones operativas variables. Este artículo presenta dos contribuciones a la investigación en gestión de recursos adaptativa para sistemas DRE. Primero, describimos la estructura y funcionalidad del Middleware de Gestión de Recursos Adaptativos Híbridos (HyARM), que proporciona gestión de recursos adaptativa utilizando técnicas de control híbridas para adaptarse a las fluctuaciones de carga de trabajo y disponibilidad de recursos. Segundo, evaluamos el comportamiento adaptativo de HyARM a través de experimentos en un sistema multimedia DRE que distribuye video en tiempo real. Nuestros resultados indican que HyARM produce un rendimiento del sistema predecible, estable y alto, incluso ante cargas de trabajo y disponibilidad de recursos fluctuantes. Categorías y Descriptores de Asignaturas C.2.4 [Sistemas Distribuidos]: Aplicaciones Distribuidas; D.4.7 [Organización y Diseño]: Sistemas en Tiempo Real y Sistemas Embebidos 1. INTRODUCCIÓN Lograr la calidad de servicio (QoS) en tiempo real de extremo a extremo es particularmente importante para sistemas distribuidos en tiempo real y embebidos (DRE) abiertos que enfrentan limitaciones de recursos, como potencia de cómputo limitada y ancho de banda de red. La sobreutilización de estos recursos del sistema puede generar un comportamiento impredecible e inestable, mientras que la subutilización puede resultar en un costo excesivo del sistema. Un enfoque prometedor para cumplir de manera efectiva con estos requisitos de calidad de servicio de extremo a extremo, por lo tanto, es desarrollar y aplicar middleware adaptativo [10, 15], que es un software cuyas propiedades funcionales y relacionadas con la calidad de servicio pueden ser modificadas estática o dinámicamente. Las modificaciones estáticas se realizan para reducir la huella, aprovechar las capacidades existentes en plataformas específicas, habilitar la selección funcional y/o minimizar las dependencias de infraestructura de hardware/software. Los objetivos de las modificaciones dinámicas incluyen optimizar las respuestas del sistema a entornos o requisitos cambiantes, como la modificación de interconexiones de componentes, niveles de potencia, disponibilidad de ancho de banda de CPU y red, latencia/jitter y carga de trabajo. En los sistemas DRE abiertos, el middleware adaptativo debe realizar modificaciones de manera confiable, es decir, cumpliendo con los estrictos requisitos de calidad de servicio de extremo a extremo, lo que requiere la especificación y aplicación de límites superiores e inferiores en la utilización de recursos del sistema para garantizar un uso efectivo de los recursos del sistema. Para cumplir con estos requisitos, hemos desarrollado el Middleware de Gestión de Recursos Híbrido Adaptativo (HyARM), que es un middleware de gestión de recursos distribuido de código abierto. HyARM se basa en técnicas híbridas de control teórico, las cuales proporcionan un marco teórico para diseñar el control de sistemas complejos con dinámicas tanto continuas como discretas. En nuestro estudio de caso, que implica un sistema distribuido de distribución de video en tiempo real, la tarea de gestión de recursos adaptativa consiste en controlar la utilización de los diferentes recursos, cuyas utilizaciones están descritas por variables continuas. Logramos esto adaptando la resolución del video transmitido, que se modela como una variable continua, y cambiando la velocidad de cuadros y la compresión, que se modelan mediante acciones discretas. Hemos implementado HyARM sobre el ORB ACE (TAO) [13], que es una implementación de la especificación CORBA en tiempo real [12]. Nuestros resultados muestran que (1) HyARM garantiza una utilización efectiva de los recursos del sistema y (2) se cumplen los requisitos de calidad de servicio de extremo a extremo de las aplicaciones de mayor prioridad, incluso ante fluctuaciones en la carga de trabajo. El resto del documento está organizado de la siguiente manera: la Sección 2 describe la arquitectura, funcionalidad y modelo de utilización de recursos de nuestro estudio de caso del sistema multimedia DRE; la Sección 3 explica la estructura y funcionalidad de HyARM; la Sección 4 evalúa el comportamiento adaptativo de HyARM a través de experimentos en nuestro estudio de caso del sistema multimedia; la Sección 5 compara nuestra investigación sobre HyARM con trabajos relacionados; y la Sección 6 presenta observaciones finales. El código y ejemplos de HyARM están disponibles en www.dre.vanderbilt.edu/∼nshankar/HyARM/. Artículo 7 2. ESTUDIO DE CASO: SISTEMA MULTIMEDIA DRE Esta sección describe la arquitectura y los requisitos de QoS de nuestro sistema multimedia DRE. 2.1 Arquitectura del Sistema Multimedia Enlace Inalámbrico Enlace Inalámbrico Enlace Inalámbrico ` ` ` Enlace Físico Enlace Físico Enlace Físico Estación Base Extremo Receptor Extremo Receptor Extremo Receptor` Enlace Físico Extremo Receptor Cámara UAV Codificador de Video Cámara Codificador de Video Cámara Codificador de Video Cámara UAV Codificador de Video Cámara Codificador de Video Cámara Codificador de Video Cámara UAV Codificador de Video Cámara Codificador de Video Cámara Codificador de Video Figura 1: Arquitectura del Sistema Multimedia DRE La arquitectura de nuestro sistema multimedia DRE se muestra en la Figura 1 y consta de las siguientes entidades: (1) Fuente de datos (captura de video por UAV), donde el video es capturado (relacionado con el tema de interés) por la(s) cámara(s) en cada UAV, seguido por la codificación del video crudo utilizando un esquema de codificación específico y transmitiendo el video a la siguiente etapa en la cadena de procesamiento. (2) Distribuidor de datos (estación base), donde el video es procesado para eliminar ruido, seguido por la retransmisión del video procesado a la siguiente etapa en la cadena de procesamiento. (3) Destinos (centro de comando y control), donde el video recibido es nuevamente procesado para eliminar ruido, luego decodificado y finalmente renderizado al usuario final a través de pantallas gráficas. Se han logrado mejoras significativas en las técnicas de codificación/decodificación y compresión (des) de video como resultado de los avances recientes en las técnicas de codificación y compresión de video [14]. Los esquemas comunes de compresión de video son MPEG1, MPEG-2, Real Video y MPEG-4. Cada esquema de compresión se caracteriza por sus requisitos de recursos, por ejemplo, la potencia computacional para (des)comprimir la señal de video y el ancho de banda de red necesario para transmitir la señal de video comprimida. Las propiedades del video comprimido, como la resolución y la velocidad de fotogramas, determinan tanto la calidad como los requisitos de recursos del video. Nuestro estudio de caso del sistema multimedia tiene los siguientes requisitos de calidad de servicio (QoS) en tiempo real de extremo a extremo: (1) latencia, (2) retardo entre cuadros (también conocido como jitter), (3) frecuencia de cuadros y (4) resolución de imagen. Estos requisitos de calidad de servicio (QoS) pueden clasificarse como duros o blandos. Los requisitos de QoS estrictos deben ser cumplidos por el sistema subyacente en todo momento, mientras que los requisitos de QoS flexibles pueden ser ocasionalmente incumplidos. Para nuestro estudio de caso, tratamos los requisitos de QoS como la latencia y la variabilidad de retardo como requisitos de QoS más estrictos y nos esforzamos por cumplir con estos requisitos en todo momento. Por el contrario, tratamos los requisitos de QoS como la tasa de cuadros de video y la resolución de imagen como requisitos de QoS más flexibles y modificamos estas propiedades de video de manera adaptativa para manejar los cambios dinámicos en la disponibilidad de recursos de manera efectiva. Aunque a menudo se presentan como dos conjuntos de requisitos discretos, en la práctica suelen ser dos extremos de un continuo que va desde más suave a más duro en lugar de dos puntos disjuntos. La potencia informática requerida por las tareas de captura y codificación de video depende de factores dinámicos, como la velocidad del UAV, la velocidad del sujeto (si el sujeto es móvil) y la distancia entre el UAV y el sujeto. La cantidad de ancho de banda de la red inalámbrica disponible para transmitir video capturado por UAVs a estaciones base también depende de la conectividad inalámbrica entre los UAVs y la estación base, que a su vez depende de factores dinámicos como la velocidad de los UAVs y la distancia relativa entre los UAVs y las estaciones base. El ancho de banda del enlace entre la estación base y el receptor final está limitado, pero es más estable que el ancho de banda de la red inalámbrica. Los requisitos de recursos y la disponibilidad de recursos están sujetos a cambios dinámicos. Dos clases de aplicaciones - habilitadas para QoS y de mejor esfuerzo - utilizan la infraestructura del sistema multimedia descrita anteriormente para transmitir video a sus respectivos receptores. Las aplicaciones de clase habilitada para QoS tienen mayor prioridad sobre las aplicaciones de clase de mejor esfuerzo. En nuestro estudio, las aplicaciones de respuesta de emergencia pertenecen a la clase habilitada para la calidad de servicio (QoS), y las aplicaciones de vigilancia pertenecen a la clase de mejor esfuerzo. Por ejemplo, dado que un flujo de datos de una aplicación de respuesta de emergencia es de mayor importancia que un flujo de video de una aplicación de vigilancia, recibe más recursos de extremo a extremo. Dado que la disponibilidad de recursos afecta significativamente la calidad de servicio, utilizamos la utilización actual de recursos como indicador principal del rendimiento del sistema. Nos referimos al nivel actual de utilización de recursos del sistema como la condición del sistema. Basándonos en esta definición, podemos clasificar las condiciones del sistema como estando subutilizadas, sobreutilizadas o utilizadas de manera efectiva. La subutilización de los recursos del sistema ocurre cuando la utilización actual de los recursos es menor que el límite inferior deseado de utilización de recursos. En este sistema, los recursos residuales del sistema (es decir, ancho de banda de red y potencia computacional) están disponibles en grandes cantidades después de cumplir con los requisitos de calidad de servicio de extremo a extremo de las aplicaciones. Estos recursos residuales se pueden utilizar para aumentar la calidad de servicio de las aplicaciones. Por ejemplo, la CPU residual y el ancho de banda de red pueden ser utilizados para entregar videos de mejor calidad (por ejemplo, con mayor resolución y mayor velocidad de cuadros) a los receptores finales. La sobreutilización de los recursos del sistema ocurre cuando la utilización actual de recursos es mayor que el límite superior deseado de utilización de recursos. Esta condición puede surgir por la pérdida de recursos - ancho de banda de red y/o potencia de cómputo en la estación base, receptor final o en el UAV - o puede ser debido a un aumento en las demandas de recursos por parte de las aplicaciones. La sobreutilización es generalmente indeseable ya que la calidad del video recibido (como la resolución y la velocidad de cuadros) y las propiedades de puntualidad (como la latencia y la fluctuación) se degradan y pueden resultar en un sistema inestable (y por lo tanto ineficaz). La utilización efectiva de recursos es la condición deseada del sistema, ya que garantiza que se cumplan los requisitos de calidad de servicio de extremo a extremo del sistema multimedia basado en UAV y que la utilización de los recursos del sistema, es decir, el ancho de banda de la red y la potencia computacional, se encuentren dentro de sus límites de utilización deseados. El artículo 7, sección 3 describe las técnicas que aplicamos para lograr una utilización efectiva, incluso ante la disponibilidad y/o demanda fluctuante de recursos. DESCRIPCIÓN DE HYARM Esta sección describe la arquitectura del Middleware de Gestión de Recursos Adaptativos Híbrido (HyARM). HyARM garantiza un rendimiento eficiente y predecible del sistema al proporcionar gestión adaptativa de recursos, que incluye la monitorización de los recursos del sistema y la imposición de límites en la utilización de recursos de las aplicaciones. 3.1 Estructura y Funcionalidad de HyARM Leyenda de Utilización de Recursos Asignación de Recursos Parámetros de Aplicación Figura 2: Arquitectura de HyARM HyARM está compuesto por tres tipos de entidades mostradas en la Figura 2 y descritas a continuación: Los monitores de recursos observan la utilización general de recursos para cada tipo de recurso y la utilización de recursos por aplicación. En nuestro sistema multimedia, hay monitores de recursos para la utilización de la CPU y el ancho de banda de la red. Los monitores de la CPU observan la utilización de recursos de la CPU de los UAV, la estación base y los receptores finales. Los monitores de ancho de banda de red observan la utilización de recursos de red de (1) el enlace de red inalámbrica entre los UAV y la estación base y (2) el enlace de red cableada entre la estación base y los receptores finales. El controlador central mantiene la utilización de recursos del sistema por debajo de un límite deseado mediante (1) el procesamiento de actualizaciones periódicas que recibe de los monitores de recursos y (2) modificando la ejecución de las aplicaciones en consecuencia, por ejemplo, utilizando diferentes algoritmos de ejecución u operando la aplicación con mayor/menor calidad de servicio (QoS). Este proceso de adaptación garantiza que los recursos del sistema se utilicen de manera eficiente y se cumplan los requisitos de calidad de servicio de la aplicación de extremo a extremo. En nuestro sistema multimedia, el controlador HyARM determina el valor de parámetros de la aplicación como (1) esquemas de compresión de video, como Real Video y MPEG-4, y/o (2) velocidad de cuadros, y (3) resolución de imagen. Desde la perspectiva de las técnicas híbridas de control teórico [8], los diferentes esquemas de compresión de video y la velocidad de cuadros forman las variables discretas de la ejecución de la aplicación, mientras que la resolución de imagen forma las variables continuas. Los adaptadores de aplicación modifican la ejecución de la aplicación de acuerdo con los parámetros recomendados por el controlador y garantizan que el funcionamiento de la aplicación esté de acuerdo con los parámetros recomendados. En la implementación actual de HyARM, el adaptador de la aplicación modifica los parámetros de entrada a la aplicación que afectan la calidad de servicio (QoS) de la aplicación y la utilización de recursos, como el esquema de compresión, la velocidad de fotogramas y la resolución de la imagen. En nuestras futuras implementaciones, planeamos utilizar mecanismos de reserva de recursos como Differentiated Service [7, 3] y Class-based Kernel Resource Management [4] para aprovisionar/reservar recursos de red y CPU. En nuestro sistema multimedia, el adaptador de la aplicación se asegura de que el video se codifique a la velocidad de cuadros y resolución recomendadas utilizando el esquema de compresión especificado. 3.2 Aplicando HyARM al Estudio de Caso del Sistema Multimedia. HyARM se construye sobre TAO [13], una implementación de código abierto ampliamente utilizada de CORBA en tiempo real [12]. HyARM se puede aplicar para garantizar una gestión eficiente, predecible y adaptable de recursos en cualquier sistema DRE donde la disponibilidad y los requisitos de recursos están sujetos a cambios dinámicos. La Figura 3 muestra la interacción de varias partes del sistema multimedia DRE desarrollado con HyARM, TAO y el Servicio de Streaming de Audio y Video de TAOs. El servicio de transmisión de audio/vídeo de TAO es una implementación de la especificación del Servicio de Transmisión de Audio/Vídeo de CORBA. El servicio de transmisión de audio y video de TAOs es un servicio de distribución de video habilitado para QoS que puede transferir video en tiempo real a uno o más receptores. Utilizamos el Servicio de Transmisión de Audio y Video para enviar el video desde los VANTs a los receptores finales a través de la estación base. Tres entidades del sistema multimedia DRE con HyARM, a saber, los monitores de recursos, el controlador central y los adaptadores de aplicaciones, están construidos como servidores CORBA, por lo que pueden distribuirse en todo el sistema DRE. Los monitores de recursos son objetos CORBA remotos que actualizan periódicamente al controlador central con la utilización actual de recursos. Los adaptadores de aplicaciones se ubican junto a las aplicaciones ya que ambas interactúan estrechamente. Como se muestra en la Figura 3, los UAV comprimen los datos utilizando varios esquemas de compresión, como MPEG1, MPEG4 y Real Video, y utilizan el servicio de transmisión de audio/vídeo de TAOs para enviar el video a los receptores finales. Los monitores de recursos de HyARMs observan continuamente la utilización de recursos del sistema y notifican al controlador central con la utilización actual. La interacción entre el controlador y los monitores de recursos utiliza el patrón Observer. Cuando el controlador recibe actualizaciones de utilización de recursos de los monitores, calcula las modificaciones necesarias a los parámetros de la(s) aplicación(es) y notifica al adaptador de la aplicación mediante una llamada de operación remota. Los adaptadores de aplicación, que están ubicados junto a la aplicación, modifican los parámetros de entrada de la aplicación, en nuestro caso el codificador de video, para modificar la utilización de recursos de la aplicación y la calidad de servicio. La estación base no está incluida en la figura ya que solo retransmite el video recibido de los UAV a los receptores finales. Artículo 7 4. RESULTADOS DE RENDIMIENTO Y ANÁLISIS Esta sección describe primero el banco de pruebas que proporciona la infraestructura para nuestro sistema multimedia DRE, que se utilizó para evaluar el rendimiento de HyARM. Luego describimos nuestros experimentos y analizamos los resultados obtenidos para evaluar empíricamente cómo se comporta HyARM durante la subutilización y sobreutilización de los recursos del sistema. 4.1 Descripción general del banco de pruebas de hardware y software Nuestros experimentos se realizaron en el banco de pruebas Emulab en la Universidad de Utah. La configuración de hardware consiste en dos nodos actuando como UAVs, uno actuando como estación base y otro como receptor final. El video de los dos UAV fue transmitido a una estación base a través de una LAN configurada con las siguientes propiedades: una relación promedio de pérdida de paquetes de 0.3 y un ancho de banda de 1 Mbps. El ancho de banda de la red se eligió para ser de 1 Mbps ya que a cada UAV en el sistema multimedia DRE se le asignan 250 Kbps. Estos parámetros fueron elegidos para emular una red inalámbrica poco confiable con ancho de banda limitado entre los UAVs y la estación base. Desde la estación base, el video fue retransmitido al receptor final a través de un enlace por cable confiable de 10 Mbps de ancho de banda sin pérdida de paquetes. La configuración de hardware de todos los nodos fue elegida de la siguiente manera: procesador Intel Pentium III de 600 MHz, 256 MB de memoria física, 4 puertos Ethernet Intel EtherExpress Pro de 10/100 Mbps y disco duro de 13 GB. Se utilizó una versión en tiempo real de Linux - TimeSys Linux/NET 3.1.214 basada en RedHat Linux 9 como sistema operativo para todos los nodos. Los siguientes paquetes de software también fueron utilizados para nuestros experimentos: (1) Ffmpeg 0.4.9-pre1, que es una biblioteca de código abierto (http://www.ffmpeg.sourceforge.net/download.php) que comprime video en formatos MPEG-2, MPEG-4, Real Video, y muchos otros formatos de video. (2) Iftop 0.16, que es una biblioteca de código abierto (http://www.ex-parrot.com/∼pdw/iftop/) que utilizamos para monitorear la actividad de red y la utilización del ancho de banda. (3) ACE 5.4.3 + TAO 1.4.3, que es una implementación de código abierto (http://www.dre.vanderbilt.edu/TAO) de la especificación CORBA en tiempo real [12] sobre la cual se construye HyARM. TAO proporciona el Servicio de Transmisión de Audio/Video (A/V) CORBA que utilizamos para transmitir el video desde los UAVs a los receptores finales a través de la estación base. Configuración del experimento Nuestro experimento consistió en dos UAVs (emulados) que enviaron video simultáneamente a la estación base utilizando la configuración experimental descrita en la Sección 4.1. En la estación base, el video fue retransmitido a los receptores finales (sin ninguna modificación), donde fue almacenado en un archivo. Cada UAV alojaba dos aplicaciones, una aplicación habilitada para QoS (respuesta de emergencia) y una aplicación de mejor esfuerzo (vigilancia). Dentro de cada UAV, el poder computacional se comparte entre las aplicaciones, mientras que el ancho de banda de la red se comparte entre todas las aplicaciones. Para evaluar la calidad de servicio proporcionada por HyARM, monitoreamos la utilización de la CPU en los dos UAV y la utilización del ancho de banda de la red entre el UAV y la estación base. La utilización de recursos de la CPU no se monitoreó en la estación base y en el receptor final, ya que no realizaron operaciones computacionalmente intensivas. La utilización de recursos del enlace físico de 10 Mbps entre la estación base y el receptor final no afecta la calidad de servicio de las aplicaciones y no es monitoreada por HyARM, ya que es casi 10 veces el ancho de banda de 1 MB de la LAN entre los UAV y la estación base. El experimento también monitorea propiedades del video que afectan la calidad de servicio de las aplicaciones, como la latencia, la variabilidad de retardo, la tasa de cuadros y la resolución. El punto de ajuste en la utilización de recursos para cada recurso se especificó en 0.69, que es el límite superior típicamente recomendado por técnicas de programación, como el algoritmo monótono de tasa [9]. Dado que los estudios [6] han demostrado que los ojos humanos pueden percibir retrasos de más de 200 ms, utilizamos esto como límite superior de la variabilidad en el video recibido. Los requisitos de QoS para cada clase de aplicación se especifican durante la inicialización del sistema y se muestran en la Tabla 1. 4.3 Resultados empíricos y análisis Esta sección presenta los resultados obtenidos al ejecutar el experimento descrito en la Sección 4.2 en nuestro banco de pruebas del sistema multimedia DRE. Utilizamos la utilización de recursos del sistema como métrica para evaluar las capacidades de gestión de recursos adaptativos de HyARM bajo cargas de trabajo de entrada variables. También utilizamos la calidad de servicio de la aplicación como métrica para evaluar las capacidades de HyARMs para satisfacer los requisitos de calidad de servicio de extremo a extremo de las diferentes clases de aplicaciones en el sistema multimedia DRE. Analizamos estos resultados para explicar las diferencias significativas en el rendimiento del sistema y la calidad de servicio de la aplicación. La comparación del rendimiento del sistema se descompone en la comparación de la utilización de recursos y la calidad de servicio de la aplicación. Para la utilización de recursos del sistema, comparamos (1) la utilización del ancho de banda de la red de área local y (2) la utilización de la CPU en los dos nodos UAV. Para la aplicación de QoS, comparamos los valores medios de los parámetros de video, incluyendo (1) resolución de imagen, (2) velocidad de cuadros, (3) latencia y (4) jitter. Comparación de la utilización de recursos. La sobreutilización de recursos del sistema en sistemas DRE puede generar un sistema inestable. Por el contrario, la subutilización de los recursos del sistema aumenta el costo del sistema. La Figura 4 y la Figura 5 comparan la utilización de recursos del sistema con y sin HyARM. La Figura 4 muestra que HyARM mantiene la utilización del sistema cerca del punto de ajuste de utilización deseado durante la fluctuación en la carga de trabajo de entrada al transmitir video de mayor (o menor) calidad de servicio para la clase de aplicaciones con calidad de servicio habilitada (o de mejor esfuerzo) durante la sobre (o sub) utilización de los recursos del sistema. La Figura 5 muestra que sin HyARM, la utilización de la red alcanzó hasta 0.9 durante el aumento de las condiciones de carga de trabajo, lo cual es mayor que el punto de ajuste de utilización de 0.7 en 0.2. Como resultado de la sobreutilización de recursos, la calidad de servicio (QoS) del video recibido, como la latencia promedio y el jitter, se vio afectada significativamente. Sin HyARM, los recursos del sistema estaban subutilizados o sobreutilizados, ambos de los cuales son indeseables. En contraste, con HyARM, la utilización de recursos del sistema siempre está cerca del punto de ajuste deseado, incluso durante las fluctuaciones en la carga de trabajo de la aplicación. Durante fluctuaciones repentinas en la carga de trabajo de la aplicación, las condiciones del sistema pueden ser temporalmente indeseables, pero se restauran a la condición deseada dentro de varios períodos de muestreo. La sobreutilización temporal de recursos es permisible en nuestro sistema multimedia, ya que la calidad del video puede degradarse por un corto período de tiempo, aunque la calidad del servicio de la aplicación se verá significativamente degradada si se transmite un video de baja calidad durante un período de tiempo más largo. Comparación de la calidad de servicio de la aplicación. Las Figuras 6, 7 y la Tabla 2 comparan la latencia, la variabilidad, la resolución y la velocidad de cuadro del video recibido, respectivamente. La Tabla 2 muestra que HyARM aumenta la resolución y la velocidad de cuadro de video de las aplicaciones habilitadas para QoS, pero disminuye la resolución y la velocidad de cuadro de las aplicaciones de mejor esfuerzo. Durante la sobreutilización de los recursos del sistema, la resolución y la velocidad de cuadros de las aplicaciones de menor prioridad se reducen para adaptarse a las fluctuaciones en la carga de trabajo de la aplicación y mantener la utilización de los recursos en el punto establecido especificado. Se puede observar en la Figura 6 y la Figura 7 que HyARM reduce significativamente la latencia y la variabilidad del video recibido. Estas cifras muestran que la calidad de servicio de las aplicaciones habilitadas para QoS se mejora considerablemente con HyARM. Aunque los parámetros de la aplicación, como la velocidad de cuadros y las resoluciones, que afectan los requisitos de QoS suave de las aplicaciones de mejor esfuerzo pueden verse comprometidos, se cumplen los requisitos de QoS estrictos, como la latencia y la variabilidad, de todas las aplicaciones. HyARM responde a las fluctuaciones en la disponibilidad de recursos y/o la demanda mediante el monitoreo constante de la utilización de recursos. Como se muestra en la Figura 4, cuando la utilización de recursos aumenta por encima del punto de ajuste deseado, HyARM reduce la utilización disminuyendo la calidad de servicio de las aplicaciones de mejor esfuerzo. Esta adaptación garantiza que haya suficientes recursos disponibles para que las aplicaciones habilitadas para QoS cumplan con sus necesidades de QoS. Las figuras 6 y 7 muestran que los valores de latencia y jitter del video recibido del sistema con HyARM son casi la mitad de los valores correspondientes del sistema sin HyARM. Con HyARM, los valores de estos parámetros están muy por debajo de los límites especificados, mientras que sin HyARM, estos valores están significativamente por encima de los límites especificados debido a la sobreutilización del ancho de banda de la red, lo que conduce a la congestión de la red y resulta en la pérdida de paquetes. HyARM evita esto reduciendo parámetros de video como la resolución, la velocidad de cuadros y/o modificando el esquema de compresión utilizado para comprimir el video. Nuestras conclusiones al analizar los resultados descritos anteriormente son que la aplicación de middleware adaptativo a través de control híbrido en sistemas DRE ayuda a (1) mejorar la calidad de servicio de la aplicación, (2) aumentar la utilización de recursos del sistema y (3) proporcionar una mejor previsibilidad (menor latencia y retraso entre fotogramas) a las aplicaciones habilitadas para calidad de servicio. Estas mejoras se logran en gran medida gracias al monitoreo de la utilización de recursos del sistema, la gestión eficiente de la carga de trabajo del sistema y la provisión adaptativa de recursos mediante los monitores de recursos de red/CPU de HyARMs, el adaptador de aplicaciones y el controlador central, respectivamente. TRABAJO RELACIONADO Recientemente se han aplicado varios enfoques teóricos de control a los sistemas DRE. Estas técnicas ayudan a superar las limitaciones de los enfoques de programación tradicionales que manejan mal los cambios dinámicos en la disponibilidad de recursos y resultan en un sistema programado rígidamente que se adapta mal a los cambios. Se presenta una encuesta de estas técnicas en [1]. Un enfoque de este tipo es la programación de control de retroalimentación (FCS) [2, 11]. Los algoritmos de FCS ajustan dinámicamente la asignación de recursos mediante bucles de control de retroalimentación de software. Los algoritmos de FCS se modelan y diseñan utilizando metodologías rigurosas de teoría de control. Estos algoritmos ofrecen garantías de rendimiento robusto y analítico a pesar de las incertidumbres en la disponibilidad de recursos y/o demanda. Aunque los algoritmos de FCS existentes han mostrado promesa, a menudo estos algoritmos asumen que el sistema tiene variable(s) de control continuas que pueden ajustarse continuamente. Si bien esta suposición es válida para ciertas clases de sistemas, existen muchas clases de sistemas DRE, como la aviónica y los entornos informáticos de barcos completos, que solo admiten un conjunto finito a priori de configuraciones discretas. Por lo tanto, las variables de control en tales sistemas son intrínsecamente discretas. HyARM maneja tanto variables de control continuas, como la resolución de la imagen, como variables de control discretas, como un conjunto discreto de velocidades de cuadro. HyARM puede aplicarse a sistemas que admiten un conjunto continuo y/o discreto de variables de control. El sistema multimedia DRE descrito en la Sección 2 es un ejemplo de sistema DRE que ofrece tanto variables de control continuas (resolución de imagen) como un conjunto discreto (velocidad de cuadros). Estas variables son modificadas por HyARM para lograr una utilización eficiente de recursos y una mejora en la calidad de servicio de la aplicación. CONCLUSIONES Artículo 7 Figura 6: Comparación de la latencia del video Figura 7: Comparación de la fluctuación del video Fuente Tamaño de imagen / Velocidad de cuadro Con HyARM Sin HyARM UAV1 Aplicación habilitada para QoS 1122 X 1496 / 25 960 X 720 / 20 UAV1 Aplicación de mejor esfuerzo 288 X 384 / 15 640 X 480 / 20 UAV2 Aplicación habilitada para QoS 1126 X 1496 / 25 960 X 720 / 20 UAV2 Aplicación de mejor esfuerzo 288 X 384 / 15 640 X 480 / 20 Tabla 2: Comparación de la calidad del video Muchos sistemas distribuidos en tiempo real y embebidos (DRE) demandan la aplicación correcta de la calidad de servicio (QoS) de extremo a extremo desde sus plataformas subyacentes para operar correctamente. Estos sistemas cada vez se ejecutan en entornos abiertos, donde la disponibilidad de recursos está sujeta a cambios dinámicos. Para cumplir con la calidad de servicio de extremo a extremo en entornos dinámicos, los sistemas DRE pueden beneficiarse de un middleware adaptativo que monitorea los recursos del sistema, realiza una gestión eficiente de la carga de trabajo de la aplicación y permite una provisión eficiente de recursos para la ejecución de aplicaciones. Este artículo describe HyARM, un middleware adaptativo que proporciona una gestión efectiva de recursos a los sistemas DRE. HyARM emplea técnicas de control híbrido para proporcionar las capacidades de middleware adaptativo, como el monitoreo de recursos y la adaptación de aplicaciones, que son clave para ofrecer las capacidades de gestión de recursos dinámicos para sistemas DRE abiertos. Empleamos HyARM en un sistema multimedia DRE representativo que está implementado utilizando CORBA en tiempo real y el Servicio de Transmisión de Audio/Vídeo de CORBA. Evaluamos el rendimiento de HyARM en un sistema compuesto por tres recursos distribuidos y dos clases de aplicaciones con dos aplicaciones cada una. Nuestros resultados empíricos indican que HyARM garantiza (1) la utilización eficiente de recursos al mantener la utilización de recursos del sistema dentro de los límites de utilización especificados, (2) los requisitos de calidad de servicio de las aplicaciones habilitadas para QoS se cumplen en todo momento. En general, HyARM garantiza una gestión eficiente, predecible y adaptable de recursos para sistemas DRE. REFERENCIAS [1] T. F. Abdelzaher, J. Stankovic, C. Lu, R. Zhang y Y. Lu. Control de rendimiento de retroalimentación en servicios de software. IEEE: Sistemas de Control, 23(3), junio de 2003. [2] L. Abeni, L. Palopoli, G. Lipari y J. Walpole. Análisis de un planificador de retroalimentación basado en reservas. En el Simposio de Sistemas en Tiempo Real de IEEE, Diciembre de 2002. [3] S. Blake, D. Black, M. Carlson, E. Davies, Z. Wang y W. Weiss. Una arquitectura para servicios diferenciados. Centro de Información de la Red RFC 2475, Dic. 1998. [4] H. Franke, S. Nagar, C. Seetharaman y V. Kashyap. Habilitando la Gestión Autonómica de la Carga de Trabajo en Linux. En Actas de la Conferencia Internacional sobre Computación Autónoma (ICAC), Nueva York, Nueva York, mayo de 2004. IEEE. [5] E. Gamma, R. Helm, R. Johnson, y J. Vlissides. Patrones de diseño: Elementos de software orientado a objetos reutilizable. Addison-Wesley, Reading, MA, 1995. [6] G. Ghinea y J. P. Thomas. Impacto de QoS en la percepción y comprensión del usuario de videoclips multimedia. En MULTIMEDIA 98: Actas de la sexta conferencia internacional de ACM sobre Multimedia, páginas 49-54, Bristol, Reino Unido, 1998. ACM Press. [7] Grupo de Trabajo de Ingeniería de Internet. Grupo de Trabajo de Servicios Diferenciados (diffserv) Carta. www.ietf.org/html.charters/diffserv-charter.html, 2000. [8] X. Koutsoukos, R. Tekumalla, B. Natarajan y C. Lu. Control híbrido supervisado de sistemas en tiempo real. En el 11º Simposio de Tecnología y Aplicaciones en Tiempo Real y Sistemas Empotrados de IEEE, San Francisco, California, Mar. 2005. [9] J. Lehoczky, L. Sha y Y. Ding. El algoritmo de programación Rate Monotonic: Caracterización exacta y comportamiento en casos promedio. En Actas del 10º Simposio de Sistemas en Tiempo Real de IEEE (RTSS 1989), páginas 166-171. IEEE Computer Society Press, 1989. [10] J. Loyall, J. Gossett, C. Gill, R. Schantz, J. Zinky, P. Pal, R. Shapiro, C. Rodrigues, M. Atighetchi, and D. Karr.\n\nIEEE Computer Society Press, 1989. [10] J. Loyall, J. Gossett, C. Gill, R. Schantz, J. Zinky, P. Pal, R. Shapiro, C. Rodrigues, M. Atighetchi y D. Karr. Comparando y contrastando el soporte de middleware adaptativo en aplicaciones de objetos distribuidos de área amplia y embebidos. En Actas de la 21ª Conferencia Internacional sobre Sistemas de Computación Distribuida (ICDCS-21), páginas 625-634. IEEE, Abr. 2001. [11] C. Lu, J. A. Stankovic, G. Tao y S. H. Son. Programación en tiempo real con control de retroalimentación: Marco, modelado y algoritmos. Revista de Sistemas en Tiempo Real, 23(1/2):85-126, julio de 2002. [12] Object Management Group. Especificación CORBA en tiempo real, documento formal/02-08-02 de OMG, edición de agosto de 2002. [13] D. C. Schmidt, D. L. Levine y S. Mungee. El diseño y rendimiento de los corredores de solicitudes de objetos en tiempo real. Comunicaciones de Computadoras, 21(4):294-324, Abr. 1998. [14] Thomas Sikora. Tendencias y perspectivas en codificación de imágenes y videos. En Actas del IEEE, enero de 2005. [15] X. Wang, H.-M. Huang, V. Subramonian, C. Lu y C. Gill. CAMRIT: Middleware Adaptativo Basado en Control para la Transmisión de Imágenes en Tiempo Real. En Actas del 10º Simposio de Tecnología y Aplicaciones en Tiempo Real y Sistemas Empotrados del IEEE (RTAS), Toronto, Canadá, mayo de 2004. Artículo 7",
    "original_sentences": [
        "Evaluating Adaptive Resource Management for Distributed Real-Time Embedded Systems Nishanth Shankaran, ∗ Xenofon Koutsoukos, Douglas C. Schmidt, and Aniruddha Gokhale Dept.",
        "of EECS, Vanderbilt University, Nashville ABSTRACT A challenging problem faced by researchers and developers of distributed real-time and embedded (DRE) systems is devising and implementing effective adaptive resource management strategies that can meet end-to-end quality of service (QoS) requirements in varying operational conditions.",
        "This paper presents two contributions to research in adaptive resource management for DRE systems.",
        "First, we describe the structure and functionality of the Hybrid Adaptive Resourcemanagement Middleware (HyARM), which provides adaptive resource management using hybrid control techniques for adapting to workload fluctuations and resource availability.",
        "Second, we evaluate the adaptive behavior of HyARM via experiments on a DRE multimedia system that distributes video in real-time.",
        "Our results indicate that HyARM yields predictable, stable, and high system performance, even in the face of fluctuating workload and resource availability.",
        "Categories and Subject Descriptors C.2.4 [Distributed Systems]: Distributed Applications; D.4.7 [Organization and Design]: Real-time Systems and Embedded Systems 1.",
        "INTRODUCTION Achieving end-to-end real-time quality of service (QoS) is particularly important for open distributed real-time and embedded (DRE) systems that face resource constraints, such as limited computing power and network bandwidth.",
        "Overutilization of these system resources can yield unpredictable and unstable behavior, whereas under-utilization can yield excessive system cost.",
        "A promising approach to meeting these end-to-end QoS requirements effectively, therefore, is to develop and apply adaptive middleware [10, 15], which is software whose functional and QoS-related properties can be modified either statically or dynamically.",
        "Static modifications are carried out to reduce footprint, leverage capabilities that exist in specific platforms, enable functional subsetting, and/or minimize hardware/software infrastructure dependencies.",
        "Objectives of dynamic modifications include optimizing system responses to changing environments or requirements, such as changing component interconnections, power-levels, CPU and network bandwidth availability, latency/jitter, and workload.",
        "In open DRE systems, adaptive middleware must make such modifications dependably, i.e., while meeting stringent end-to-end QoS requirements, which requires the specification and enforcement of upper and lower bounds on system resource utilization to ensure effective use of system resources.",
        "To meet these requirements, we have developed the Hybrid Adaptive Resource-management Middleware (HyARM), which is an open-source1 distributed resource management middleware.",
        "HyARM is based on hybrid control theoretic techniques [8], which provide a theoretical framework for designing control of complex system with both continuous and discrete dynamics.",
        "In our case study, which involves a distributed real-time video distribution system, the task of adaptive resource management is to control the utilization of the different resources, whose utilizations are described by continuous variables.",
        "We achieve this by adapting the resolution of the transmitted video, which is modeled as a continuous variable, and by changing the frame-rate and the compression, which are modeled by discrete actions.",
        "We have implemented HyARM atop The ACE ORB (TAO) [13], which is an implementation of the Real-time CORBA specification [12].",
        "Our results show that (1) HyARM ensures effective system resource utilization and (2) end-to-end QoS requirements of higher priority applications are met, even in the face of fluctuations in workload.",
        "The remainder of the paper is organized as follows: Section 2 describes the architecture, functionality, and resource utilization model of our DRE multimedia system case study; Section 3 explains the structure and functionality of HyARM; Section 4 evaluates the adaptive behavior of HyARM via experiments on our multimedia system case study; Section 5 compares our research on HyARM with related work; and Section 6 presents concluding remarks. 1 The code and examples for HyARM are available at www. dre.vanderbilt.edu/∼nshankar/HyARM/.",
        "Article 7 2.",
        "CASE STUDY: DRE MULTIMEDIA SYSTEM This section describes the architecture and QoS requirements of our DRE multimedia system. 2.1 Multimedia System Architecture Wireless Link Wireless Link Wireless Link ` ` ` Physical Link Physical Link Physical Link Base Station End Receiver End Receiver End Receiver` Physical Link End Receiver UAV Camera Video Encoder Camera Video Encoder Camera Video Encoder UAV Camera Video Encoder Camera Video Encoder Camera Video Encoder UAV Camera Video Encoder Camera Video Encoder Camera Video Encoder Figure 1: DRE Multimedia System Architecture The architecture for our DRE multimedia system is shown in Figure 1 and consists of the following entities: (1)Data source (video capture by UAV), where video is captured (related to subject of interest) by camera(s) on each UAV, followed by encoding of raw video using a specific encoding scheme and transmitting the video to the next stage in the pipeline. (2)Data distributor (base station), where the video is processed to remove noise, followed by retransmission of the processed video to the next stage in the pipeline. (3) Sinks (command and control center), where the received video is again processed to remove noise, then decoded and finally rendered to end user via graphical displays.",
        "Significant improvements in video encoding/decoding and (de)compression techniques have been made as a result of recent advances in video encoding and compression techniques [14].",
        "Common video compression schemes are MPEG1, MPEG-2, Real Video, and MPEG-4.",
        "Each compression scheme is characterized by its resource requirement, e.g., the computational power to (de)compress the video signal and the network bandwidth required to transmit the compressed video signal.",
        "Properties of the compressed video, such as resolution and frame-rate determine both the quality and the resource requirements of the video.",
        "Our multimedia system case study has the following endto-end real-time QoS requirements: (1) latency, (2) interframe delay (also know as jitter), (3) frame rate, and (4) picture resolution.",
        "These QoS requirements can be classified as being either hard or soft.",
        "Hard QoS requirements should be met by the underlying system at all times, whereas soft QoS requirements can be missed occasionally.2 For our case study, we treat QoS requirements such as latency and jitter as harder QoS requirements and strive to meet these requirements at all times.",
        "In contrast, we treat QoS requirements such as video frame rate and picture resolution as softer QoS requirements and modify these video properties adaptively to handle dynamic changes in resource availabil2 Although hard and soft are often portrayed as two discrete requirement sets, in practice they are usually two ends of a continuum ranging from softer to harder rather than two disjoint points. ity effectively. 2.2 DRE Multimedia System Rresources There are two primary types of resources in our DRE multimedia system: (1) processors that provide computational power available at the UAVs, base stations, and end receivers and (2) network links that provide communication bandwidth between UAVs, base stations, and end receivers.",
        "The computing power required by the video capture and encoding tasks depends on dynamic factors, such as speed of the UAV, speed of the subject (if the subject is mobile), and distance between UAV and the subject.",
        "The wireless network bandwidth available to transmit video captured by UAVs to base stations also depends on the wireless connectivity between the UAVs and the base station, which in-turn depend on dynamic factors such as the speed of the UAVs and the relative distance between UAVs and base stations.",
        "The bandwidth of the link between the base station and the end receiver is limited, but more stable than the bandwidth of the wireless network.",
        "Resource requirements and availability of resources are subjected to dynamic changes.",
        "Two classes of applications - QoS-enabled and best-effort - use the multimedia system infrastructure described above to transmit video to their respective receivers.",
        "QoS-enabled class of applications have higher priority over best-effort class of application.",
        "In our study, emergency response applications belong to QoS-enabled and surveillance applications belong to best-effort class.",
        "For example, since a stream from an emergency response application is of higher importance than a video stream from a surveillance application, it receives more resources end-to-end.",
        "Since resource availability significantly affects QoS, we use current resource utilization as the primary indicator of system performance.",
        "We refer to the current level of system resource utilization as the system condition.",
        "Based on this definition, we can classify system conditions as being either under, over, or effectively utilized.",
        "Under-utilization of system resources occurs when the current resource utilization is lower than the desired lower bound on resource utilization.",
        "In this system condition, residual system resources (i.e., network bandwidth and computational power) are available in large amounts after meeting end-to-end QoS requirements of applications.",
        "These residual resources can be used to increase the QoS of the applications.",
        "For example, residual CPU and network bandwidth can be used to deliver better quality video (e.g., with greater resolution and higher frame rate) to end receivers.",
        "Over-utilization of system resources occurs when the current resource utilization is higher than the desired upper bound on resource utilization.",
        "This condition can arise from loss of resources - network bandwidth and/or computing power at base station, end receiver or at UAV - or may be due to an increase in resource demands by applications.",
        "Over-utilization is generally undesirable since the quality of the received video (such as resolution and frame rate) and timeliness properties (such as latency and jitter) are degraded and may result in an unstable (and thus ineffective) system.",
        "Effective resource utilization is the desired system condition since it ensures that end-to-end QoS requirements of the UAV-based multimedia system are met and utilization of both system resources, i.e., network bandwidth and computational power, are within their desired utilization bounds.",
        "Article 7 Section 3 describes techniques we applied to achieve effective utilization, even in the face of fluctuating resource availability and/or demand. 3.",
        "OVERVIEW OF HYARM This section describes the architecture of the Hybrid Adaptive Resource-management Middleware (HyARM).",
        "HyARM ensures efficient and predictable system performance by providing adaptive resource management, including monitoring of system resources and enforcing bounds on application resource utilization. 3.1 HyARM Structure and Functionality Resource Utilization Legend Resource Allocation Application Parameters Figure 2: HyARM Architecture HyARM is composed of three types of entities shown in Figure 2 and described below: Resource monitors observe the overall resource utilization for each type of resource and resource utilization per application.",
        "In our multimedia system, there are resource monitors for CPU utilization and network bandwidth.",
        "CPU monitors observe the CPU resource utilization of UAVs, base station, and end receivers.",
        "Network bandwidth monitors observe the network resource utilization of (1) wireless network link between UAVs and the base station and (2) wired network link between the base station and end receivers.",
        "The central controller maintains the system resource utilization below a desired bound by (1) processing periodic updates it receives from resource monitors and (2) modifying the execution of applications accordingly, e.g., by using different execution algorithms or operating the application with increased/decreased QoS.",
        "This adaptation process ensures that system resources are utilized efficiently and end-to-end application QoS requirements are met.",
        "In our multimedia system, the HyARM controller determines the value of application parameters such as (1) video compression schemes, such as Real Video and MPEG-4, and/or (2) frame rate, and (3) picture resolution.",
        "From the perspective of hybrid control theoretic techniques [8], the different video compression schemes and frame rate form the discrete variables of application execution and picture resolution forms the continuous variables.",
        "Application adapters modify application execution according to parameters recommended by the controller and ensures that the operation of the application is in accordance with the recommended parameters.",
        "In the current mplementation of HyARM, the application adapter modifies the input parameters to the application that affect application QoS and resource utilization - compression scheme, frame rate, and picture resolution.",
        "In our future implementations, we plan to use resource reservation mechanisms such as Differentiated Service [7, 3] and Class-based Kernel Resource Management [4] to provision/reserve network and CPU resources.",
        "In our multimedia system, the application adapter ensures that the video is encoded at the recommended frame rate and resolution using the specified compression scheme. 3.2 Applying HyARM to the Multimedia System Case Study HyARM is built atop TAO [13], a widely used open-source implementation of Real-time CORBA [12].",
        "HyARM can be applied to ensure efficient, predictable and adaptive resource management of any DRE system where resource availability and requirements are subject to dynamic change.",
        "Figure 3 shows the interaction of various parts of the DRE multimedia system developed with HyARM, TAO, and TAOs A/V Streaming Service.",
        "TAOs A/V Streaming service is an implementation of the CORBA A/V Streaming Service specification.",
        "TAOs A/V Streaming Service is a QoS-enabled video distribution service that can transfer video in real-time to one or more receivers.",
        "We use the A/V Streaming Service to transmit the video from the UAVs to the end receivers via the base station.",
        "Three entities of Receiver UAV TAO Resource Utilization HyARM Central Controller A/V Streaming Service : Sender MPEG1 MPEG4 Real Video HyARM Resource Monitor A/V Streaming Service : Receiver Compressed Video Compressed Video Application HyARM Application Adapter Remote Object Call Control Inputs Resource Utilization Resource Utilization / Control Inputs Control Inputs Legend Figure 3: Developing the DRE Multimedia System with HyARM HyARM, namely the resource monitors, central controller, and application adapters are built as CORBA servants, so they can be distributed throughout a DRE system.",
        "Resource monitors are remote CORBA objects that update the central controller periodically with the current resource utilization.",
        "Application adapters are collocated with applications since the two interact closely.",
        "As shown in Figure 3, UAVs compress the data using various compression schemes, such as MPEG1, MPEG4, and Real Video, and uses TAOs A/V streaming service to transmit the video to end receivers.",
        "HyARMs resource monitors continuously observe the system resource utilization and notify the central controller with the current utilization. 3 The interaction between the controller and the resource monitors uses the Observer pattern [5].",
        "When the controller receives resource utilization updates from monitors, it computes the necessary modifications to application(s) parameters and notifies application adapter(s) via a remote operation call.",
        "Application adapter(s), that are collocated with the application, modify the input parameters to the application - in our case video encoder - to modify the application resource utilization and QoS. 3 The base station is not included in the figure since it only retransmits the video received from UAVs to end receivers.",
        "Article 7 4.",
        "PERFORMANCE RESULTS AND ANALYSIS This section first describes the testbed that provides the infrastructure for our DRE multimedia system, which was used to evaluate the performance of HyARM.",
        "We then describe our experiments and analyze the results obtained to empirically evaluate how HyARM behaves during underand over-utilization of system resources. 4.1 Overview of the Hardware and Software Testbed Our experiments were performed on the Emulab testbed at University of Utah.",
        "The hardware configuration consists of two nodes acting as UAVs, one acting as base station, and one as end receiver.",
        "Video from the two UAVs were transmitted to a base station via a LAN configured with the following properties: average packet loss ratio of 0.3 and bandwidth 1 Mbps.",
        "The network bandwidth was chosen to be 1 Mbps since each UAV in the DRE multimedia system is allocated 250 Kbps.",
        "These parameters were chosen to emulate an unreliable wireless network with limited bandwidth between the UAVs and the base station.",
        "From the base station, the video was retransmitted to the end receiver via a reliable wireline link of 10 Mbps bandwidth with no packet loss.",
        "The hardware configuration of all the nodes was chosen as follows: 600 MHz Intel Pentium III processor, 256 MB physical memory, 4 Intel EtherExpress Pro 10/100 Mbps Ethernet ports, and 13 GB hard drive.",
        "A real-time version of Linux - TimeSys Linux/NET 3.1.214 based on RedHat Linux 9was used as the operating system for all nodes.",
        "The following software packages were also used for our experiments: (1) Ffmpeg 0.4.9-pre1, which is an open-source library (http: //www.ffmpeg.sourceforge.net/download.php) that compresses video into MPEG-2, MPEG-4, Real Video, and many other video formats. (2) Iftop 0.16, which is an opensource library (http://www.ex-parrot.com/∼pdw/iftop/) we used for monitoring network activity and bandwidth utilization. (3) ACE 5.4.3 + TAO 1.4.3, which is an opensource (http://www.dre.vanderbilt.edu/TAO) implementation of the Real-time CORBA [12] specification upon which HyARM is built.",
        "TAO provides the CORBA Audio/Video (A/V) Streaming Service that we use to transmit the video from the UAVs to end receivers via the base station. 4.2 Experiment Configuration Our experiment consisted of two (emulated) UAVs that simultaneously send video to the base station using the experimentation setup described in Section 4.1.",
        "At the base station, video was retransmitted to the end receivers (without any modifications), where it was stored to a file.",
        "Each UAV hosted two applications, one QoS-enabled application (emergency response), and one best-effort application (surveillance).",
        "Within each UAV, computational power is shared between the applications, while the network bandwidth is shared among all applications.",
        "To evaluate the QoS provided by HyARM, we monitored CPU utilization at the two UAVs, and network bandwidth utilization between the UAV and the base station.",
        "CPU resource utilization was not monitored at the base station and the end receiver since they performed no computationallyintensive operations.",
        "The resource utilization of the 10 Mpbs physical link between the base station and the end receiver does not affect QoS of applications and is not monitored by HyARM since it is nearly 10 times the 1 MB bandwidth of the LAN between the UAVs and the base station.",
        "The experiment also monitors properties of the video that affect the QoS of the applications, such as latency, jitter, frame rate, and resolution.",
        "The set point on resource utilization for each resource was specified at 0.69, which is the upper bound typically recommended by scheduling techniques, such as rate monotonic algorithm [9].",
        "Since studies [6] have shown that human eyes can perceive delays more than 200ms, we use this as the upper bound on jitter of the received video.",
        "QoS requirements for each class of application is specified during system initialization and is shown in Table 1. 4.3 Empirical Results and Analysis This section presents the results obtained from running the experiment described in Section 4.2 on our DRE multimedia system testbed.",
        "We used system resource utilization as a metric to evaluate the adaptive resource management capabilities of HyARM under varying input work loads.",
        "We also used application QoS as a metric to evaluate HyARMs capabilities to support end-to-end QoS requirements of the various classes of applications in the DRE multimedia system.",
        "We analyze these results to explain the significant differences in system performance and application QoS.",
        "Comparison of system performance is decomposed into comparison of resource utilization and application QoS.",
        "For system resource utilization, we compare (1) network bandwidth utilization of the local area network and (2) CPU utilization at the two UAV nodes.",
        "For application QoS, we compare mean values of video parameters, including (1) picture resolution, (2) frame rate, (3) latency, and (4) jitter.",
        "Comparison of resource utilization.",
        "Over-utilization of system resources in DRE systems can yield an unstable system.",
        "In contrast, under-utilization of system resources increases system cost.",
        "Figure 4 and Figure 5 compare the system resource utilization with and without HyARM.",
        "Figure 4 shows that HyARM maintains system utilization close to the desired utilization set point during fluctuation in input work load by transmitting video of higher (or lower) QoS for QoS-enabled (or best-effort) class of applications during over (or under) utilization of system resources.",
        "Figure 5 shows that without HyARM, network utilization was as high as 0.9 during increase in workload conditions, which is greater than the utilization set point of 0.7 by 0.2.",
        "As a result of over-utilization of resources, QoS of the received video, such as average latency and jitter, was affected significantly.",
        "Without HyARM, system resources were either under-utilized or over-utilized, both of which are undesirable.",
        "In contrast, with HyARM, system resource utilization is always close to the desired set point, even during fluctuations in application workload.",
        "During sudden fluctuation in application workload, system conditions may be temporarily undesirable, but are restored to the desired condition within several sampling periods.",
        "Temporary over-utilization of resources is permissible in our multimedia system since the quality of the video may be degraded for a short period of time, though application QoS will be degraded significantly if poor quality video is transmitted for a longer period of time.",
        "Comparison of application QoS.",
        "Figures 6, Figure 7, and Table 2 compare latency, jitter, resolution, and frameArticle 7 Class Resolution Frame Rate Latency (msec ) Jitter (msec) QoS Enabled 1024 x 768 25 200 200 Best-effort 320 x 240 15 300 250 Table 1: Application QoS Requirements Figure 4: Resource utilization with HyARM Figure 5: Resource utilization without HyARM rate of the received video, respectively.",
        "Table 2 shows that HyARM increases the resolution and frame video of QoSenabled applications, but decreases the resolution and frame rate of best effort applications.",
        "During over utilization of system resources, resolution and frame rate of lower priority applications are reduced to adapt to fluctuations in application workload and to maintain the utilization of resources at the specified set point.",
        "It can be seen from Figure 6 and Figure 7 that HyARM reduces the latency and jitter of the received video significantly.",
        "These figures show that the QoS of QoS-enabled applications is greatly improved by HyARM.",
        "Although application parameters, such as frame rate and resolutions, which affect the soft QoS requirements of best-effort applications may be compromised, the hard QoS requirements, such as latency and jitter, of all applications are met.",
        "HyARM responds to fluctuation in resource availability and/or demand by constant monitoring of resource utilization.",
        "As shown in Figure 4, when resources utilization increases above the desired set point, HyARM lowers the utilization by reducing the QoS of best-effort applications.",
        "This adaptation ensures that enough resources are available for QoS-enabled applications to meet their QoS needs.",
        "Figures 6 and 7 show that the values of latency and jitter of the received video of the system with HyARM are nearly half of the corresponding value of the system without HyARM.",
        "With HyARM, values of these parameters are well below the specified bounds, whereas without HyARM, these value are significantly above the specified bounds due to overutilization of the network bandwidth, which leads to network congestion and results in packet loss.",
        "HyARM avoids this by reducing video parameters such as resolution, frame-rate, and/or modifying the compression scheme used to compress the video.",
        "Our conclusions from analyzing the results described above are that applying adaptive middleware via hybrid control to DRE system helps to (1) improve application QoS, (2) increase system resource utilization, and (3) provide better predictability (lower latency and inter-frame delay) to QoSenabled applications.",
        "These improvements are achieved largely due to monitoring of system resource utilization, efficient system workload management, and adaptive resource provisioning by means of HyARMs network/CPU resource monitors, application adapter, and central controller, respectively. 5.",
        "RELATED WORK A number of control theoretic approaches have been applied to DRE systems recently.",
        "These techniques aid in overcoming limitations with traditional scheduling approaches that handle dynamic changes in resource availability poorly and result in a rigidly scheduled system that adapts poorly to change.",
        "A survey of these techniques is presented in [1].",
        "One such approach is feedback control scheduling (FCS) [2, 11].",
        "FCS algorithms dynamically adjust resource allocation by means of software feedback control loops.",
        "FCS algorithms are modeled and designed using rigorous controltheoretic methodologies.",
        "These algorithms provide robust and analytical performance assurances despite uncertainties in resource availability and/or demand.",
        "Although existing FCS algorithms have shown promise, these algorithms often assume that the system has continuous control variable(s) that can continuously be adjusted.",
        "While this assumption holds for certain classes of systems, there are many classes of DRE systems, such as avionics and total-ship computing environments that only support a finite a priori set of discrete configurations.",
        "The control variables in such systems are therefore intrinsically discrete.",
        "HyARM handles both continuous control variables, such as picture resolution, and discrete control variable, such as discrete set of frame rates.",
        "HyARM can therefore be applied to system that support continuous and/or discrete set of control variables.",
        "The DRE multimedia system as described in Section 2 is an example DRE system that offers both continuous (picture resolution) and discrete set (frame-rate) of control variables.",
        "These variables are modified by HyARM to achieve efficient resource utilization and improved application QoS. 6.",
        "CONCLUDING REMARKS Article 7 Figure 6: Comparison of Video Latency Figure 7: Comparison of Video Jitter Source Picture Size / Frame Rate With HyARM Without HyARM UAV1 QoS Enabled Application 1122 X 1496 / 25 960 X 720 / 20 UAV1 Best-effort Application 288 X 384 / 15 640 X 480 / 20 UAV2 QoS Enabled Application 1126 X 1496 / 25 960 X 720 / 20 UAV2 Best-effort Application 288 X 384 / 15 640 X 480 / 20 Table 2: Comparison of Video Quality Many distributed real-time and embedded (DRE) systems demand end-to-end quality of service (QoS) enforcement from their underlying platforms to operate correctly.",
        "These systems increasingly run in open environments, where resource availability is subject to dynamic change.",
        "To meet end-to-end QoS in dynamic environments, DRE systems can benefit from an adaptive middleware that monitors system resources, performs efficient application workload management, and enables efficient resource provisioning for executing applications.",
        "This paper described HyARM, an adaptive middleware, that provides effective resource management to DRE systems.",
        "HyARM employs hybrid control techniques to provide the adaptive middleware capabilities, such as resource monitoring and application adaptation that are key to providing the dynamic resource management capabilities for open DRE systems.",
        "We employed HyARM to a representative DRE multimedia system that is implemented using Real-time CORBA and CORBA A/V Streaming Service.",
        "We evaluated the performance of HyARM in a system composed of three distributed resources and two classes of applications with two applications each.",
        "Our empirical results indicate that HyARM ensures (1) efficient resource utilization by maintaining the resource utilization of system resources within the specified utilization bounds, (2) QoS requirements of QoS-enabled applications are met at all times.",
        "Overall, HyARM ensures efficient, predictable, and adaptive resource management for DRE systems. 7.",
        "REFERENCES [1] T. F. Abdelzaher, J. Stankovic, C. Lu, R. Zhang, and Y. Lu.",
        "Feddback Performance Control in Software Services.",
        "IEEE: Control Systems, 23(3), June 2003. [2] L. Abeni, L. Palopoli, G. Lipari, and J. Walpole.",
        "Analysis of a reservation-based feedback scheduler.",
        "In IEEE Real-Time Systems Symposium, Dec. 2002. [3] S. Blake, D. Black, M. Carlson, E. Davies, Z. Wang, and W. Weiss.",
        "An architecture for differentiated services.",
        "Network Information Center RFC 2475, Dec. 1998. [4] H. Franke, S. Nagar, C. Seetharaman, and V. Kashyap.",
        "Enabling Autonomic Workload Management in Linux.",
        "In Proceedings of the International Conference on Autonomic Computing (ICAC), New York, New York, May 2004.",
        "IEEE. [5] E. Gamma, R. Helm, R. Johnson, and J. Vlissides.",
        "Design Patterns: Elements of Reusable Object-Oriented Software.",
        "Addison-Wesley, Reading, MA, 1995. [6] G. Ghinea and J. P. Thomas.",
        "Qos impact on user perception and understanding of multimedia video clips.",
        "In MULTIMEDIA 98: Proceedings of the sixth ACM international conference on Multimedia, pages 49-54, Bristol, United Kingdom, 1998.",
        "ACM Press. [7] Internet Engineering Task Force.",
        "Differentiated Services Working Group (diffserv) Charter. www.ietf.org/html.charters/diffserv-charter.html, 2000. [8] X. Koutsoukos, R. Tekumalla, B. Natarajan, and C. Lu.",
        "Hybrid Supervisory Control of Real-Time Systems.",
        "In 11th IEEE Real-Time and Embedded Technology and Applications Symposium, San Francisco, California, Mar. 2005. [9] J. Lehoczky, L. Sha, and Y. Ding.",
        "The Rate Monotonic Scheduling Algorithm: Exact Characterization and Average Case Behavior.",
        "In Proceedings of the 10th IEEE Real-Time Systems Symposium (RTSS 1989), pages 166-171.",
        "IEEE Computer Society Press, 1989. [10] J. Loyall, J. Gossett, C. Gill, R. Schantz, J. Zinky, P. Pal, R. Shapiro, C. Rodrigues, M. Atighetchi, and D. Karr.",
        "Comparing and Contrasting Adaptive Middleware Support in Wide-Area and Embedded Distributed Object Applications.",
        "In Proceedings of the 21st International Conference on Distributed Computing Systems (ICDCS-21), pages 625-634.",
        "IEEE, Apr. 2001. [11] C. Lu, J.",
        "A. Stankovic, G. Tao, and S. H. Son.",
        "Feedback Control Real-Time Scheduling: Framework, Modeling, and Algorithms.",
        "Real-Time Systems Journal, 23(1/2):85-126, July 2002. [12] Object Management Group.",
        "Real-time CORBA Specification, OMG Document formal/02-08-02 edition, Aug. 2002. [13] D. C. Schmidt, D. L. Levine, and S. Mungee.",
        "The Design and Performance of Real-Time Object Request Brokers.",
        "Computer Communications, 21(4):294-324, Apr. 1998. [14] Thomas Sikora.",
        "Trends and Perspectives in Image and Video Coding.",
        "In Proceedings of the IEEE, Jan. 2005. [15] X. Wang, H.-M. Huang, V. Subramonian, C. Lu, and C. Gill.",
        "CAMRIT: Control-based Adaptive Middleware for Real-time Image Transmission.",
        "In Proc. of the 10th IEEE Real-Time and Embedded Tech. and Applications Symp. (RTAS), Toronto, Canada, May 2004.",
        "Article 7"
    ],
    "translated_text_sentences": [
        "Evaluando la Gestión de Recursos Adaptativa para Sistemas Empotrados Distribuidos en Tiempo Real de Nishanth Shankaran, Xenofon Koutsoukos, Douglas C. Schmidt y Aniruddha Gokhale, Dept.",
        "de EECS, Universidad de Vanderbilt, Nashville RESUMEN Un problema desafiante enfrentado por investigadores y desarrolladores de sistemas distribuidos en tiempo real y embebidos (DRE) es idear e implementar estrategias efectivas de gestión adaptativa de recursos que puedan cumplir con los requisitos de calidad de servicio (QoS) de extremo a extremo en condiciones operativas variables.",
        "Este artículo presenta dos contribuciones a la investigación en gestión de recursos adaptativa para sistemas DRE.",
        "Primero, describimos la estructura y funcionalidad del Middleware de Gestión de Recursos Adaptativos Híbridos (HyARM), que proporciona gestión de recursos adaptativa utilizando técnicas de control híbridas para adaptarse a las fluctuaciones de carga de trabajo y disponibilidad de recursos.",
        "Segundo, evaluamos el comportamiento adaptativo de HyARM a través de experimentos en un sistema multimedia DRE que distribuye video en tiempo real.",
        "Nuestros resultados indican que HyARM produce un rendimiento del sistema predecible, estable y alto, incluso ante cargas de trabajo y disponibilidad de recursos fluctuantes.",
        "Categorías y Descriptores de Asignaturas C.2.4 [Sistemas Distribuidos]: Aplicaciones Distribuidas; D.4.7 [Organización y Diseño]: Sistemas en Tiempo Real y Sistemas Embebidos 1.",
        "INTRODUCCIÓN Lograr la calidad de servicio (QoS) en tiempo real de extremo a extremo es particularmente importante para sistemas distribuidos en tiempo real y embebidos (DRE) abiertos que enfrentan limitaciones de recursos, como potencia de cómputo limitada y ancho de banda de red.",
        "La sobreutilización de estos recursos del sistema puede generar un comportamiento impredecible e inestable, mientras que la subutilización puede resultar en un costo excesivo del sistema.",
        "Un enfoque prometedor para cumplir de manera efectiva con estos requisitos de calidad de servicio de extremo a extremo, por lo tanto, es desarrollar y aplicar middleware adaptativo [10, 15], que es un software cuyas propiedades funcionales y relacionadas con la calidad de servicio pueden ser modificadas estática o dinámicamente.",
        "Las modificaciones estáticas se realizan para reducir la huella, aprovechar las capacidades existentes en plataformas específicas, habilitar la selección funcional y/o minimizar las dependencias de infraestructura de hardware/software.",
        "Los objetivos de las modificaciones dinámicas incluyen optimizar las respuestas del sistema a entornos o requisitos cambiantes, como la modificación de interconexiones de componentes, niveles de potencia, disponibilidad de ancho de banda de CPU y red, latencia/jitter y carga de trabajo.",
        "En los sistemas DRE abiertos, el middleware adaptativo debe realizar modificaciones de manera confiable, es decir, cumpliendo con los estrictos requisitos de calidad de servicio de extremo a extremo, lo que requiere la especificación y aplicación de límites superiores e inferiores en la utilización de recursos del sistema para garantizar un uso efectivo de los recursos del sistema.",
        "Para cumplir con estos requisitos, hemos desarrollado el Middleware de Gestión de Recursos Híbrido Adaptativo (HyARM), que es un middleware de gestión de recursos distribuido de código abierto.",
        "HyARM se basa en técnicas híbridas de control teórico, las cuales proporcionan un marco teórico para diseñar el control de sistemas complejos con dinámicas tanto continuas como discretas.",
        "En nuestro estudio de caso, que implica un sistema distribuido de distribución de video en tiempo real, la tarea de gestión de recursos adaptativa consiste en controlar la utilización de los diferentes recursos, cuyas utilizaciones están descritas por variables continuas.",
        "Logramos esto adaptando la resolución del video transmitido, que se modela como una variable continua, y cambiando la velocidad de cuadros y la compresión, que se modelan mediante acciones discretas.",
        "Hemos implementado HyARM sobre el ORB ACE (TAO) [13], que es una implementación de la especificación CORBA en tiempo real [12].",
        "Nuestros resultados muestran que (1) HyARM garantiza una utilización efectiva de los recursos del sistema y (2) se cumplen los requisitos de calidad de servicio de extremo a extremo de las aplicaciones de mayor prioridad, incluso ante fluctuaciones en la carga de trabajo.",
        "El resto del documento está organizado de la siguiente manera: la Sección 2 describe la arquitectura, funcionalidad y modelo de utilización de recursos de nuestro estudio de caso del sistema multimedia DRE; la Sección 3 explica la estructura y funcionalidad de HyARM; la Sección 4 evalúa el comportamiento adaptativo de HyARM a través de experimentos en nuestro estudio de caso del sistema multimedia; la Sección 5 compara nuestra investigación sobre HyARM con trabajos relacionados; y la Sección 6 presenta observaciones finales. El código y ejemplos de HyARM están disponibles en www.dre.vanderbilt.edu/∼nshankar/HyARM/.",
        "Artículo 7 2.",
        "ESTUDIO DE CASO: SISTEMA MULTIMEDIA DRE Esta sección describe la arquitectura y los requisitos de QoS de nuestro sistema multimedia DRE. 2.1 Arquitectura del Sistema Multimedia Enlace Inalámbrico Enlace Inalámbrico Enlace Inalámbrico ` ` ` Enlace Físico Enlace Físico Enlace Físico Estación Base Extremo Receptor Extremo Receptor Extremo Receptor` Enlace Físico Extremo Receptor Cámara UAV Codificador de Video Cámara Codificador de Video Cámara Codificador de Video Cámara UAV Codificador de Video Cámara Codificador de Video Cámara Codificador de Video Cámara UAV Codificador de Video Cámara Codificador de Video Cámara Codificador de Video Figura 1: Arquitectura del Sistema Multimedia DRE La arquitectura de nuestro sistema multimedia DRE se muestra en la Figura 1 y consta de las siguientes entidades: (1) Fuente de datos (captura de video por UAV), donde el video es capturado (relacionado con el tema de interés) por la(s) cámara(s) en cada UAV, seguido por la codificación del video crudo utilizando un esquema de codificación específico y transmitiendo el video a la siguiente etapa en la cadena de procesamiento. (2) Distribuidor de datos (estación base), donde el video es procesado para eliminar ruido, seguido por la retransmisión del video procesado a la siguiente etapa en la cadena de procesamiento. (3) Destinos (centro de comando y control), donde el video recibido es nuevamente procesado para eliminar ruido, luego decodificado y finalmente renderizado al usuario final a través de pantallas gráficas.",
        "Se han logrado mejoras significativas en las técnicas de codificación/decodificación y compresión (des) de video como resultado de los avances recientes en las técnicas de codificación y compresión de video [14].",
        "Los esquemas comunes de compresión de video son MPEG1, MPEG-2, Real Video y MPEG-4.",
        "Cada esquema de compresión se caracteriza por sus requisitos de recursos, por ejemplo, la potencia computacional para (des)comprimir la señal de video y el ancho de banda de red necesario para transmitir la señal de video comprimida.",
        "Las propiedades del video comprimido, como la resolución y la velocidad de fotogramas, determinan tanto la calidad como los requisitos de recursos del video.",
        "Nuestro estudio de caso del sistema multimedia tiene los siguientes requisitos de calidad de servicio (QoS) en tiempo real de extremo a extremo: (1) latencia, (2) retardo entre cuadros (también conocido como jitter), (3) frecuencia de cuadros y (4) resolución de imagen.",
        "Estos requisitos de calidad de servicio (QoS) pueden clasificarse como duros o blandos.",
        "Los requisitos de QoS estrictos deben ser cumplidos por el sistema subyacente en todo momento, mientras que los requisitos de QoS flexibles pueden ser ocasionalmente incumplidos. Para nuestro estudio de caso, tratamos los requisitos de QoS como la latencia y la variabilidad de retardo como requisitos de QoS más estrictos y nos esforzamos por cumplir con estos requisitos en todo momento.",
        "Por el contrario, tratamos los requisitos de QoS como la tasa de cuadros de video y la resolución de imagen como requisitos de QoS más flexibles y modificamos estas propiedades de video de manera adaptativa para manejar los cambios dinámicos en la disponibilidad de recursos de manera efectiva. Aunque a menudo se presentan como dos conjuntos de requisitos discretos, en la práctica suelen ser dos extremos de un continuo que va desde más suave a más duro en lugar de dos puntos disjuntos.",
        "La potencia informática requerida por las tareas de captura y codificación de video depende de factores dinámicos, como la velocidad del UAV, la velocidad del sujeto (si el sujeto es móvil) y la distancia entre el UAV y el sujeto.",
        "La cantidad de ancho de banda de la red inalámbrica disponible para transmitir video capturado por UAVs a estaciones base también depende de la conectividad inalámbrica entre los UAVs y la estación base, que a su vez depende de factores dinámicos como la velocidad de los UAVs y la distancia relativa entre los UAVs y las estaciones base.",
        "El ancho de banda del enlace entre la estación base y el receptor final está limitado, pero es más estable que el ancho de banda de la red inalámbrica.",
        "Los requisitos de recursos y la disponibilidad de recursos están sujetos a cambios dinámicos.",
        "Dos clases de aplicaciones - habilitadas para QoS y de mejor esfuerzo - utilizan la infraestructura del sistema multimedia descrita anteriormente para transmitir video a sus respectivos receptores.",
        "Las aplicaciones de clase habilitada para QoS tienen mayor prioridad sobre las aplicaciones de clase de mejor esfuerzo.",
        "En nuestro estudio, las aplicaciones de respuesta de emergencia pertenecen a la clase habilitada para la calidad de servicio (QoS), y las aplicaciones de vigilancia pertenecen a la clase de mejor esfuerzo.",
        "Por ejemplo, dado que un flujo de datos de una aplicación de respuesta de emergencia es de mayor importancia que un flujo de video de una aplicación de vigilancia, recibe más recursos de extremo a extremo.",
        "Dado que la disponibilidad de recursos afecta significativamente la calidad de servicio, utilizamos la utilización actual de recursos como indicador principal del rendimiento del sistema.",
        "Nos referimos al nivel actual de utilización de recursos del sistema como la condición del sistema.",
        "Basándonos en esta definición, podemos clasificar las condiciones del sistema como estando subutilizadas, sobreutilizadas o utilizadas de manera efectiva.",
        "La subutilización de los recursos del sistema ocurre cuando la utilización actual de los recursos es menor que el límite inferior deseado de utilización de recursos.",
        "En este sistema, los recursos residuales del sistema (es decir, ancho de banda de red y potencia computacional) están disponibles en grandes cantidades después de cumplir con los requisitos de calidad de servicio de extremo a extremo de las aplicaciones.",
        "Estos recursos residuales se pueden utilizar para aumentar la calidad de servicio de las aplicaciones.",
        "Por ejemplo, la CPU residual y el ancho de banda de red pueden ser utilizados para entregar videos de mejor calidad (por ejemplo, con mayor resolución y mayor velocidad de cuadros) a los receptores finales.",
        "La sobreutilización de los recursos del sistema ocurre cuando la utilización actual de recursos es mayor que el límite superior deseado de utilización de recursos.",
        "Esta condición puede surgir por la pérdida de recursos - ancho de banda de red y/o potencia de cómputo en la estación base, receptor final o en el UAV - o puede ser debido a un aumento en las demandas de recursos por parte de las aplicaciones.",
        "La sobreutilización es generalmente indeseable ya que la calidad del video recibido (como la resolución y la velocidad de cuadros) y las propiedades de puntualidad (como la latencia y la fluctuación) se degradan y pueden resultar en un sistema inestable (y por lo tanto ineficaz).",
        "La utilización efectiva de recursos es la condición deseada del sistema, ya que garantiza que se cumplan los requisitos de calidad de servicio de extremo a extremo del sistema multimedia basado en UAV y que la utilización de los recursos del sistema, es decir, el ancho de banda de la red y la potencia computacional, se encuentren dentro de sus límites de utilización deseados.",
        "El artículo 7, sección 3 describe las técnicas que aplicamos para lograr una utilización efectiva, incluso ante la disponibilidad y/o demanda fluctuante de recursos.",
        "DESCRIPCIÓN DE HYARM Esta sección describe la arquitectura del Middleware de Gestión de Recursos Adaptativos Híbrido (HyARM).",
        "HyARM garantiza un rendimiento eficiente y predecible del sistema al proporcionar gestión adaptativa de recursos, que incluye la monitorización de los recursos del sistema y la imposición de límites en la utilización de recursos de las aplicaciones. 3.1 Estructura y Funcionalidad de HyARM Leyenda de Utilización de Recursos Asignación de Recursos Parámetros de Aplicación Figura 2: Arquitectura de HyARM HyARM está compuesto por tres tipos de entidades mostradas en la Figura 2 y descritas a continuación: Los monitores de recursos observan la utilización general de recursos para cada tipo de recurso y la utilización de recursos por aplicación.",
        "En nuestro sistema multimedia, hay monitores de recursos para la utilización de la CPU y el ancho de banda de la red.",
        "Los monitores de la CPU observan la utilización de recursos de la CPU de los UAV, la estación base y los receptores finales.",
        "Los monitores de ancho de banda de red observan la utilización de recursos de red de (1) el enlace de red inalámbrica entre los UAV y la estación base y (2) el enlace de red cableada entre la estación base y los receptores finales.",
        "El controlador central mantiene la utilización de recursos del sistema por debajo de un límite deseado mediante (1) el procesamiento de actualizaciones periódicas que recibe de los monitores de recursos y (2) modificando la ejecución de las aplicaciones en consecuencia, por ejemplo, utilizando diferentes algoritmos de ejecución u operando la aplicación con mayor/menor calidad de servicio (QoS).",
        "Este proceso de adaptación garantiza que los recursos del sistema se utilicen de manera eficiente y se cumplan los requisitos de calidad de servicio de la aplicación de extremo a extremo.",
        "En nuestro sistema multimedia, el controlador HyARM determina el valor de parámetros de la aplicación como (1) esquemas de compresión de video, como Real Video y MPEG-4, y/o (2) velocidad de cuadros, y (3) resolución de imagen.",
        "Desde la perspectiva de las técnicas híbridas de control teórico [8], los diferentes esquemas de compresión de video y la velocidad de cuadros forman las variables discretas de la ejecución de la aplicación, mientras que la resolución de imagen forma las variables continuas.",
        "Los adaptadores de aplicación modifican la ejecución de la aplicación de acuerdo con los parámetros recomendados por el controlador y garantizan que el funcionamiento de la aplicación esté de acuerdo con los parámetros recomendados.",
        "En la implementación actual de HyARM, el adaptador de la aplicación modifica los parámetros de entrada a la aplicación que afectan la calidad de servicio (QoS) de la aplicación y la utilización de recursos, como el esquema de compresión, la velocidad de fotogramas y la resolución de la imagen.",
        "En nuestras futuras implementaciones, planeamos utilizar mecanismos de reserva de recursos como Differentiated Service [7, 3] y Class-based Kernel Resource Management [4] para aprovisionar/reservar recursos de red y CPU.",
        "En nuestro sistema multimedia, el adaptador de la aplicación se asegura de que el video se codifique a la velocidad de cuadros y resolución recomendadas utilizando el esquema de compresión especificado. 3.2 Aplicando HyARM al Estudio de Caso del Sistema Multimedia. HyARM se construye sobre TAO [13], una implementación de código abierto ampliamente utilizada de CORBA en tiempo real [12].",
        "HyARM se puede aplicar para garantizar una gestión eficiente, predecible y adaptable de recursos en cualquier sistema DRE donde la disponibilidad y los requisitos de recursos están sujetos a cambios dinámicos.",
        "La Figura 3 muestra la interacción de varias partes del sistema multimedia DRE desarrollado con HyARM, TAO y el Servicio de Streaming de Audio y Video de TAOs.",
        "El servicio de transmisión de audio/vídeo de TAO es una implementación de la especificación del Servicio de Transmisión de Audio/Vídeo de CORBA.",
        "El servicio de transmisión de audio y video de TAOs es un servicio de distribución de video habilitado para QoS que puede transferir video en tiempo real a uno o más receptores.",
        "Utilizamos el Servicio de Transmisión de Audio y Video para enviar el video desde los VANTs a los receptores finales a través de la estación base.",
        "Tres entidades del sistema multimedia DRE con HyARM, a saber, los monitores de recursos, el controlador central y los adaptadores de aplicaciones, están construidos como servidores CORBA, por lo que pueden distribuirse en todo el sistema DRE.",
        "Los monitores de recursos son objetos CORBA remotos que actualizan periódicamente al controlador central con la utilización actual de recursos.",
        "Los adaptadores de aplicaciones se ubican junto a las aplicaciones ya que ambas interactúan estrechamente.",
        "Como se muestra en la Figura 3, los UAV comprimen los datos utilizando varios esquemas de compresión, como MPEG1, MPEG4 y Real Video, y utilizan el servicio de transmisión de audio/vídeo de TAOs para enviar el video a los receptores finales.",
        "Los monitores de recursos de HyARMs observan continuamente la utilización de recursos del sistema y notifican al controlador central con la utilización actual. La interacción entre el controlador y los monitores de recursos utiliza el patrón Observer.",
        "Cuando el controlador recibe actualizaciones de utilización de recursos de los monitores, calcula las modificaciones necesarias a los parámetros de la(s) aplicación(es) y notifica al adaptador de la aplicación mediante una llamada de operación remota.",
        "Los adaptadores de aplicación, que están ubicados junto a la aplicación, modifican los parámetros de entrada de la aplicación, en nuestro caso el codificador de video, para modificar la utilización de recursos de la aplicación y la calidad de servicio. La estación base no está incluida en la figura ya que solo retransmite el video recibido de los UAV a los receptores finales.",
        "Artículo 7 4.",
        "RESULTADOS DE RENDIMIENTO Y ANÁLISIS Esta sección describe primero el banco de pruebas que proporciona la infraestructura para nuestro sistema multimedia DRE, que se utilizó para evaluar el rendimiento de HyARM.",
        "Luego describimos nuestros experimentos y analizamos los resultados obtenidos para evaluar empíricamente cómo se comporta HyARM durante la subutilización y sobreutilización de los recursos del sistema. 4.1 Descripción general del banco de pruebas de hardware y software Nuestros experimentos se realizaron en el banco de pruebas Emulab en la Universidad de Utah.",
        "La configuración de hardware consiste en dos nodos actuando como UAVs, uno actuando como estación base y otro como receptor final.",
        "El video de los dos UAV fue transmitido a una estación base a través de una LAN configurada con las siguientes propiedades: una relación promedio de pérdida de paquetes de 0.3 y un ancho de banda de 1 Mbps.",
        "El ancho de banda de la red se eligió para ser de 1 Mbps ya que a cada UAV en el sistema multimedia DRE se le asignan 250 Kbps.",
        "Estos parámetros fueron elegidos para emular una red inalámbrica poco confiable con ancho de banda limitado entre los UAVs y la estación base.",
        "Desde la estación base, el video fue retransmitido al receptor final a través de un enlace por cable confiable de 10 Mbps de ancho de banda sin pérdida de paquetes.",
        "La configuración de hardware de todos los nodos fue elegida de la siguiente manera: procesador Intel Pentium III de 600 MHz, 256 MB de memoria física, 4 puertos Ethernet Intel EtherExpress Pro de 10/100 Mbps y disco duro de 13 GB.",
        "Se utilizó una versión en tiempo real de Linux - TimeSys Linux/NET 3.1.214 basada en RedHat Linux 9 como sistema operativo para todos los nodos.",
        "Los siguientes paquetes de software también fueron utilizados para nuestros experimentos: (1) Ffmpeg 0.4.9-pre1, que es una biblioteca de código abierto (http://www.ffmpeg.sourceforge.net/download.php) que comprime video en formatos MPEG-2, MPEG-4, Real Video, y muchos otros formatos de video. (2) Iftop 0.16, que es una biblioteca de código abierto (http://www.ex-parrot.com/∼pdw/iftop/) que utilizamos para monitorear la actividad de red y la utilización del ancho de banda. (3) ACE 5.4.3 + TAO 1.4.3, que es una implementación de código abierto (http://www.dre.vanderbilt.edu/TAO) de la especificación CORBA en tiempo real [12] sobre la cual se construye HyARM.",
        "TAO proporciona el Servicio de Transmisión de Audio/Video (A/V) CORBA que utilizamos para transmitir el video desde los UAVs a los receptores finales a través de la estación base. Configuración del experimento Nuestro experimento consistió en dos UAVs (emulados) que enviaron video simultáneamente a la estación base utilizando la configuración experimental descrita en la Sección 4.1.",
        "En la estación base, el video fue retransmitido a los receptores finales (sin ninguna modificación), donde fue almacenado en un archivo.",
        "Cada UAV alojaba dos aplicaciones, una aplicación habilitada para QoS (respuesta de emergencia) y una aplicación de mejor esfuerzo (vigilancia).",
        "Dentro de cada UAV, el poder computacional se comparte entre las aplicaciones, mientras que el ancho de banda de la red se comparte entre todas las aplicaciones.",
        "Para evaluar la calidad de servicio proporcionada por HyARM, monitoreamos la utilización de la CPU en los dos UAV y la utilización del ancho de banda de la red entre el UAV y la estación base.",
        "La utilización de recursos de la CPU no se monitoreó en la estación base y en el receptor final, ya que no realizaron operaciones computacionalmente intensivas.",
        "La utilización de recursos del enlace físico de 10 Mbps entre la estación base y el receptor final no afecta la calidad de servicio de las aplicaciones y no es monitoreada por HyARM, ya que es casi 10 veces el ancho de banda de 1 MB de la LAN entre los UAV y la estación base.",
        "El experimento también monitorea propiedades del video que afectan la calidad de servicio de las aplicaciones, como la latencia, la variabilidad de retardo, la tasa de cuadros y la resolución.",
        "El punto de ajuste en la utilización de recursos para cada recurso se especificó en 0.69, que es el límite superior típicamente recomendado por técnicas de programación, como el algoritmo monótono de tasa [9].",
        "Dado que los estudios [6] han demostrado que los ojos humanos pueden percibir retrasos de más de 200 ms, utilizamos esto como límite superior de la variabilidad en el video recibido.",
        "Los requisitos de QoS para cada clase de aplicación se especifican durante la inicialización del sistema y se muestran en la Tabla 1. 4.3 Resultados empíricos y análisis Esta sección presenta los resultados obtenidos al ejecutar el experimento descrito en la Sección 4.2 en nuestro banco de pruebas del sistema multimedia DRE.",
        "Utilizamos la utilización de recursos del sistema como métrica para evaluar las capacidades de gestión de recursos adaptativos de HyARM bajo cargas de trabajo de entrada variables.",
        "También utilizamos la calidad de servicio de la aplicación como métrica para evaluar las capacidades de HyARMs para satisfacer los requisitos de calidad de servicio de extremo a extremo de las diferentes clases de aplicaciones en el sistema multimedia DRE.",
        "Analizamos estos resultados para explicar las diferencias significativas en el rendimiento del sistema y la calidad de servicio de la aplicación.",
        "La comparación del rendimiento del sistema se descompone en la comparación de la utilización de recursos y la calidad de servicio de la aplicación.",
        "Para la utilización de recursos del sistema, comparamos (1) la utilización del ancho de banda de la red de área local y (2) la utilización de la CPU en los dos nodos UAV.",
        "Para la aplicación de QoS, comparamos los valores medios de los parámetros de video, incluyendo (1) resolución de imagen, (2) velocidad de cuadros, (3) latencia y (4) jitter.",
        "Comparación de la utilización de recursos.",
        "La sobreutilización de recursos del sistema en sistemas DRE puede generar un sistema inestable.",
        "Por el contrario, la subutilización de los recursos del sistema aumenta el costo del sistema.",
        "La Figura 4 y la Figura 5 comparan la utilización de recursos del sistema con y sin HyARM.",
        "La Figura 4 muestra que HyARM mantiene la utilización del sistema cerca del punto de ajuste de utilización deseado durante la fluctuación en la carga de trabajo de entrada al transmitir video de mayor (o menor) calidad de servicio para la clase de aplicaciones con calidad de servicio habilitada (o de mejor esfuerzo) durante la sobre (o sub) utilización de los recursos del sistema.",
        "La Figura 5 muestra que sin HyARM, la utilización de la red alcanzó hasta 0.9 durante el aumento de las condiciones de carga de trabajo, lo cual es mayor que el punto de ajuste de utilización de 0.7 en 0.2.",
        "Como resultado de la sobreutilización de recursos, la calidad de servicio (QoS) del video recibido, como la latencia promedio y el jitter, se vio afectada significativamente.",
        "Sin HyARM, los recursos del sistema estaban subutilizados o sobreutilizados, ambos de los cuales son indeseables.",
        "En contraste, con HyARM, la utilización de recursos del sistema siempre está cerca del punto de ajuste deseado, incluso durante las fluctuaciones en la carga de trabajo de la aplicación.",
        "Durante fluctuaciones repentinas en la carga de trabajo de la aplicación, las condiciones del sistema pueden ser temporalmente indeseables, pero se restauran a la condición deseada dentro de varios períodos de muestreo.",
        "La sobreutilización temporal de recursos es permisible en nuestro sistema multimedia, ya que la calidad del video puede degradarse por un corto período de tiempo, aunque la calidad del servicio de la aplicación se verá significativamente degradada si se transmite un video de baja calidad durante un período de tiempo más largo.",
        "Comparación de la calidad de servicio de la aplicación.",
        "Las Figuras 6, 7 y la Tabla 2 comparan la latencia, la variabilidad, la resolución y la velocidad de cuadro del video recibido, respectivamente.",
        "La Tabla 2 muestra que HyARM aumenta la resolución y la velocidad de cuadro de video de las aplicaciones habilitadas para QoS, pero disminuye la resolución y la velocidad de cuadro de las aplicaciones de mejor esfuerzo.",
        "Durante la sobreutilización de los recursos del sistema, la resolución y la velocidad de cuadros de las aplicaciones de menor prioridad se reducen para adaptarse a las fluctuaciones en la carga de trabajo de la aplicación y mantener la utilización de los recursos en el punto establecido especificado.",
        "Se puede observar en la Figura 6 y la Figura 7 que HyARM reduce significativamente la latencia y la variabilidad del video recibido.",
        "Estas cifras muestran que la calidad de servicio de las aplicaciones habilitadas para QoS se mejora considerablemente con HyARM.",
        "Aunque los parámetros de la aplicación, como la velocidad de cuadros y las resoluciones, que afectan los requisitos de QoS suave de las aplicaciones de mejor esfuerzo pueden verse comprometidos, se cumplen los requisitos de QoS estrictos, como la latencia y la variabilidad, de todas las aplicaciones.",
        "HyARM responde a las fluctuaciones en la disponibilidad de recursos y/o la demanda mediante el monitoreo constante de la utilización de recursos.",
        "Como se muestra en la Figura 4, cuando la utilización de recursos aumenta por encima del punto de ajuste deseado, HyARM reduce la utilización disminuyendo la calidad de servicio de las aplicaciones de mejor esfuerzo.",
        "Esta adaptación garantiza que haya suficientes recursos disponibles para que las aplicaciones habilitadas para QoS cumplan con sus necesidades de QoS.",
        "Las figuras 6 y 7 muestran que los valores de latencia y jitter del video recibido del sistema con HyARM son casi la mitad de los valores correspondientes del sistema sin HyARM.",
        "Con HyARM, los valores de estos parámetros están muy por debajo de los límites especificados, mientras que sin HyARM, estos valores están significativamente por encima de los límites especificados debido a la sobreutilización del ancho de banda de la red, lo que conduce a la congestión de la red y resulta en la pérdida de paquetes.",
        "HyARM evita esto reduciendo parámetros de video como la resolución, la velocidad de cuadros y/o modificando el esquema de compresión utilizado para comprimir el video.",
        "Nuestras conclusiones al analizar los resultados descritos anteriormente son que la aplicación de middleware adaptativo a través de control híbrido en sistemas DRE ayuda a (1) mejorar la calidad de servicio de la aplicación, (2) aumentar la utilización de recursos del sistema y (3) proporcionar una mejor previsibilidad (menor latencia y retraso entre fotogramas) a las aplicaciones habilitadas para calidad de servicio.",
        "Estas mejoras se logran en gran medida gracias al monitoreo de la utilización de recursos del sistema, la gestión eficiente de la carga de trabajo del sistema y la provisión adaptativa de recursos mediante los monitores de recursos de red/CPU de HyARMs, el adaptador de aplicaciones y el controlador central, respectivamente.",
        "TRABAJO RELACIONADO Recientemente se han aplicado varios enfoques teóricos de control a los sistemas DRE.",
        "Estas técnicas ayudan a superar las limitaciones de los enfoques de programación tradicionales que manejan mal los cambios dinámicos en la disponibilidad de recursos y resultan en un sistema programado rígidamente que se adapta mal a los cambios.",
        "Se presenta una encuesta de estas técnicas en [1].",
        "Un enfoque de este tipo es la programación de control de retroalimentación (FCS) [2, 11].",
        "Los algoritmos de FCS ajustan dinámicamente la asignación de recursos mediante bucles de control de retroalimentación de software.",
        "Los algoritmos de FCS se modelan y diseñan utilizando metodologías rigurosas de teoría de control.",
        "Estos algoritmos ofrecen garantías de rendimiento robusto y analítico a pesar de las incertidumbres en la disponibilidad de recursos y/o demanda.",
        "Aunque los algoritmos de FCS existentes han mostrado promesa, a menudo estos algoritmos asumen que el sistema tiene variable(s) de control continuas que pueden ajustarse continuamente.",
        "Si bien esta suposición es válida para ciertas clases de sistemas, existen muchas clases de sistemas DRE, como la aviónica y los entornos informáticos de barcos completos, que solo admiten un conjunto finito a priori de configuraciones discretas.",
        "Por lo tanto, las variables de control en tales sistemas son intrínsecamente discretas.",
        "HyARM maneja tanto variables de control continuas, como la resolución de la imagen, como variables de control discretas, como un conjunto discreto de velocidades de cuadro.",
        "HyARM puede aplicarse a sistemas que admiten un conjunto continuo y/o discreto de variables de control.",
        "El sistema multimedia DRE descrito en la Sección 2 es un ejemplo de sistema DRE que ofrece tanto variables de control continuas (resolución de imagen) como un conjunto discreto (velocidad de cuadros).",
        "Estas variables son modificadas por HyARM para lograr una utilización eficiente de recursos y una mejora en la calidad de servicio de la aplicación.",
        "CONCLUSIONES Artículo 7 Figura 6: Comparación de la latencia del video Figura 7: Comparación de la fluctuación del video Fuente Tamaño de imagen / Velocidad de cuadro Con HyARM Sin HyARM UAV1 Aplicación habilitada para QoS 1122 X 1496 / 25 960 X 720 / 20 UAV1 Aplicación de mejor esfuerzo 288 X 384 / 15 640 X 480 / 20 UAV2 Aplicación habilitada para QoS 1126 X 1496 / 25 960 X 720 / 20 UAV2 Aplicación de mejor esfuerzo 288 X 384 / 15 640 X 480 / 20 Tabla 2: Comparación de la calidad del video Muchos sistemas distribuidos en tiempo real y embebidos (DRE) demandan la aplicación correcta de la calidad de servicio (QoS) de extremo a extremo desde sus plataformas subyacentes para operar correctamente.",
        "Estos sistemas cada vez se ejecutan en entornos abiertos, donde la disponibilidad de recursos está sujeta a cambios dinámicos.",
        "Para cumplir con la calidad de servicio de extremo a extremo en entornos dinámicos, los sistemas DRE pueden beneficiarse de un middleware adaptativo que monitorea los recursos del sistema, realiza una gestión eficiente de la carga de trabajo de la aplicación y permite una provisión eficiente de recursos para la ejecución de aplicaciones.",
        "Este artículo describe HyARM, un middleware adaptativo que proporciona una gestión efectiva de recursos a los sistemas DRE.",
        "HyARM emplea técnicas de control híbrido para proporcionar las capacidades de middleware adaptativo, como el monitoreo de recursos y la adaptación de aplicaciones, que son clave para ofrecer las capacidades de gestión de recursos dinámicos para sistemas DRE abiertos.",
        "Empleamos HyARM en un sistema multimedia DRE representativo que está implementado utilizando CORBA en tiempo real y el Servicio de Transmisión de Audio/Vídeo de CORBA.",
        "Evaluamos el rendimiento de HyARM en un sistema compuesto por tres recursos distribuidos y dos clases de aplicaciones con dos aplicaciones cada una.",
        "Nuestros resultados empíricos indican que HyARM garantiza (1) la utilización eficiente de recursos al mantener la utilización de recursos del sistema dentro de los límites de utilización especificados, (2) los requisitos de calidad de servicio de las aplicaciones habilitadas para QoS se cumplen en todo momento.",
        "En general, HyARM garantiza una gestión eficiente, predecible y adaptable de recursos para sistemas DRE.",
        "REFERENCIAS [1] T. F. Abdelzaher, J. Stankovic, C. Lu, R. Zhang y Y. Lu.",
        "Control de rendimiento de retroalimentación en servicios de software.",
        "IEEE: Sistemas de Control, 23(3), junio de 2003. [2] L. Abeni, L. Palopoli, G. Lipari y J. Walpole.",
        "Análisis de un planificador de retroalimentación basado en reservas.",
        "En el Simposio de Sistemas en Tiempo Real de IEEE, Diciembre de 2002. [3] S. Blake, D. Black, M. Carlson, E. Davies, Z. Wang y W. Weiss.",
        "Una arquitectura para servicios diferenciados.",
        "Centro de Información de la Red RFC 2475, Dic. 1998. [4] H. Franke, S. Nagar, C. Seetharaman y V. Kashyap.",
        "Habilitando la Gestión Autonómica de la Carga de Trabajo en Linux.",
        "En Actas de la Conferencia Internacional sobre Computación Autónoma (ICAC), Nueva York, Nueva York, mayo de 2004.",
        "IEEE. [5] E. Gamma, R. Helm, R. Johnson, y J. Vlissides.",
        "Patrones de diseño: Elementos de software orientado a objetos reutilizable.",
        "Addison-Wesley, Reading, MA, 1995. [6] G. Ghinea y J. P. Thomas.",
        "Impacto de QoS en la percepción y comprensión del usuario de videoclips multimedia.",
        "En MULTIMEDIA 98: Actas de la sexta conferencia internacional de ACM sobre Multimedia, páginas 49-54, Bristol, Reino Unido, 1998.",
        "ACM Press. [7] Grupo de Trabajo de Ingeniería de Internet.",
        "Grupo de Trabajo de Servicios Diferenciados (diffserv) Carta. www.ietf.org/html.charters/diffserv-charter.html, 2000. [8] X. Koutsoukos, R. Tekumalla, B. Natarajan y C. Lu.",
        "Control híbrido supervisado de sistemas en tiempo real.",
        "En el 11º Simposio de Tecnología y Aplicaciones en Tiempo Real y Sistemas Empotrados de IEEE, San Francisco, California, Mar. 2005. [9] J. Lehoczky, L. Sha y Y. Ding.",
        "El algoritmo de programación Rate Monotonic: Caracterización exacta y comportamiento en casos promedio.",
        "En Actas del 10º Simposio de Sistemas en Tiempo Real de IEEE (RTSS 1989), páginas 166-171.",
        "IEEE Computer Society Press, 1989. [10] J. Loyall, J. Gossett, C. Gill, R. Schantz, J. Zinky, P. Pal, R. Shapiro, C. Rodrigues, M. Atighetchi, and D. Karr.\n\nIEEE Computer Society Press, 1989. [10] J. Loyall, J. Gossett, C. Gill, R. Schantz, J. Zinky, P. Pal, R. Shapiro, C. Rodrigues, M. Atighetchi y D. Karr.",
        "Comparando y contrastando el soporte de middleware adaptativo en aplicaciones de objetos distribuidos de área amplia y embebidos.",
        "En Actas de la 21ª Conferencia Internacional sobre Sistemas de Computación Distribuida (ICDCS-21), páginas 625-634.",
        "IEEE, Abr. 2001. [11] C. Lu, J.",
        "A. Stankovic, G. Tao y S. H. Son.",
        "Programación en tiempo real con control de retroalimentación: Marco, modelado y algoritmos.",
        "Revista de Sistemas en Tiempo Real, 23(1/2):85-126, julio de 2002. [12] Object Management Group.",
        "Especificación CORBA en tiempo real, documento formal/02-08-02 de OMG, edición de agosto de 2002. [13] D. C. Schmidt, D. L. Levine y S. Mungee.",
        "El diseño y rendimiento de los corredores de solicitudes de objetos en tiempo real.",
        "Comunicaciones de Computadoras, 21(4):294-324, Abr. 1998. [14] Thomas Sikora.",
        "Tendencias y perspectivas en codificación de imágenes y videos.",
        "En Actas del IEEE, enero de 2005. [15] X. Wang, H.-M. Huang, V. Subramonian, C. Lu y C. Gill.",
        "CAMRIT: Middleware Adaptativo Basado en Control para la Transmisión de Imágenes en Tiempo Real.",
        "En Actas del 10º Simposio de Tecnología y Aplicaciones en Tiempo Real y Sistemas Empotrados del IEEE (RTAS), Toronto, Canadá, mayo de 2004.",
        "Artículo 7"
    ],
    "error_count": 5,
    "keys": {
        "adaptive resource management": {
            "translated_key": "gestión adaptativa de recursos",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Evaluating <br>adaptive resource management</br> for Distributed Real-Time Embedded Systems Nishanth Shankaran, ∗ Xenofon Koutsoukos, Douglas C. Schmidt, and Aniruddha Gokhale Dept.",
                "of EECS, Vanderbilt University, Nashville ABSTRACT A challenging problem faced by researchers and developers of distributed real-time and embedded (DRE) systems is devising and implementing effective <br>adaptive resource management</br> strategies that can meet end-to-end quality of service (QoS) requirements in varying operational conditions.",
                "This paper presents two contributions to research in <br>adaptive resource management</br> for DRE systems.",
                "First, we describe the structure and functionality of the Hybrid Adaptive Resourcemanagement Middleware (HyARM), which provides <br>adaptive resource management</br> using hybrid control techniques for adapting to workload fluctuations and resource availability.",
                "Second, we evaluate the adaptive behavior of HyARM via experiments on a DRE multimedia system that distributes video in real-time.",
                "Our results indicate that HyARM yields predictable, stable, and high system performance, even in the face of fluctuating workload and resource availability.",
                "Categories and Subject Descriptors C.2.4 [Distributed Systems]: Distributed Applications; D.4.7 [Organization and Design]: Real-time Systems and Embedded Systems 1.",
                "INTRODUCTION Achieving end-to-end real-time quality of service (QoS) is particularly important for open distributed real-time and embedded (DRE) systems that face resource constraints, such as limited computing power and network bandwidth.",
                "Overutilization of these system resources can yield unpredictable and unstable behavior, whereas under-utilization can yield excessive system cost.",
                "A promising approach to meeting these end-to-end QoS requirements effectively, therefore, is to develop and apply adaptive middleware [10, 15], which is software whose functional and QoS-related properties can be modified either statically or dynamically.",
                "Static modifications are carried out to reduce footprint, leverage capabilities that exist in specific platforms, enable functional subsetting, and/or minimize hardware/software infrastructure dependencies.",
                "Objectives of dynamic modifications include optimizing system responses to changing environments or requirements, such as changing component interconnections, power-levels, CPU and network bandwidth availability, latency/jitter, and workload.",
                "In open DRE systems, adaptive middleware must make such modifications dependably, i.e., while meeting stringent end-to-end QoS requirements, which requires the specification and enforcement of upper and lower bounds on system resource utilization to ensure effective use of system resources.",
                "To meet these requirements, we have developed the Hybrid Adaptive Resource-management Middleware (HyARM), which is an open-source1 distributed resource management middleware.",
                "HyARM is based on hybrid control theoretic techniques [8], which provide a theoretical framework for designing control of complex system with both continuous and discrete dynamics.",
                "In our case study, which involves a distributed real-time video distribution system, the task of <br>adaptive resource management</br> is to control the utilization of the different resources, whose utilizations are described by continuous variables.",
                "We achieve this by adapting the resolution of the transmitted video, which is modeled as a continuous variable, and by changing the frame-rate and the compression, which are modeled by discrete actions.",
                "We have implemented HyARM atop The ACE ORB (TAO) [13], which is an implementation of the Real-time CORBA specification [12].",
                "Our results show that (1) HyARM ensures effective system resource utilization and (2) end-to-end QoS requirements of higher priority applications are met, even in the face of fluctuations in workload.",
                "The remainder of the paper is organized as follows: Section 2 describes the architecture, functionality, and resource utilization model of our DRE multimedia system case study; Section 3 explains the structure and functionality of HyARM; Section 4 evaluates the adaptive behavior of HyARM via experiments on our multimedia system case study; Section 5 compares our research on HyARM with related work; and Section 6 presents concluding remarks. 1 The code and examples for HyARM are available at www. dre.vanderbilt.edu/∼nshankar/HyARM/.",
                "Article 7 2.",
                "CASE STUDY: DRE MULTIMEDIA SYSTEM This section describes the architecture and QoS requirements of our DRE multimedia system. 2.1 Multimedia System Architecture Wireless Link Wireless Link Wireless Link ` ` ` Physical Link Physical Link Physical Link Base Station End Receiver End Receiver End Receiver` Physical Link End Receiver UAV Camera Video Encoder Camera Video Encoder Camera Video Encoder UAV Camera Video Encoder Camera Video Encoder Camera Video Encoder UAV Camera Video Encoder Camera Video Encoder Camera Video Encoder Figure 1: DRE Multimedia System Architecture The architecture for our DRE multimedia system is shown in Figure 1 and consists of the following entities: (1)Data source (video capture by UAV), where video is captured (related to subject of interest) by camera(s) on each UAV, followed by encoding of raw video using a specific encoding scheme and transmitting the video to the next stage in the pipeline. (2)Data distributor (base station), where the video is processed to remove noise, followed by retransmission of the processed video to the next stage in the pipeline. (3) Sinks (command and control center), where the received video is again processed to remove noise, then decoded and finally rendered to end user via graphical displays.",
                "Significant improvements in video encoding/decoding and (de)compression techniques have been made as a result of recent advances in video encoding and compression techniques [14].",
                "Common video compression schemes are MPEG1, MPEG-2, Real Video, and MPEG-4.",
                "Each compression scheme is characterized by its resource requirement, e.g., the computational power to (de)compress the video signal and the network bandwidth required to transmit the compressed video signal.",
                "Properties of the compressed video, such as resolution and frame-rate determine both the quality and the resource requirements of the video.",
                "Our multimedia system case study has the following endto-end real-time QoS requirements: (1) latency, (2) interframe delay (also know as jitter), (3) frame rate, and (4) picture resolution.",
                "These QoS requirements can be classified as being either hard or soft.",
                "Hard QoS requirements should be met by the underlying system at all times, whereas soft QoS requirements can be missed occasionally.2 For our case study, we treat QoS requirements such as latency and jitter as harder QoS requirements and strive to meet these requirements at all times.",
                "In contrast, we treat QoS requirements such as video frame rate and picture resolution as softer QoS requirements and modify these video properties adaptively to handle dynamic changes in resource availabil2 Although hard and soft are often portrayed as two discrete requirement sets, in practice they are usually two ends of a continuum ranging from softer to harder rather than two disjoint points. ity effectively. 2.2 DRE Multimedia System Rresources There are two primary types of resources in our DRE multimedia system: (1) processors that provide computational power available at the UAVs, base stations, and end receivers and (2) network links that provide communication bandwidth between UAVs, base stations, and end receivers.",
                "The computing power required by the video capture and encoding tasks depends on dynamic factors, such as speed of the UAV, speed of the subject (if the subject is mobile), and distance between UAV and the subject.",
                "The wireless network bandwidth available to transmit video captured by UAVs to base stations also depends on the wireless connectivity between the UAVs and the base station, which in-turn depend on dynamic factors such as the speed of the UAVs and the relative distance between UAVs and base stations.",
                "The bandwidth of the link between the base station and the end receiver is limited, but more stable than the bandwidth of the wireless network.",
                "Resource requirements and availability of resources are subjected to dynamic changes.",
                "Two classes of applications - QoS-enabled and best-effort - use the multimedia system infrastructure described above to transmit video to their respective receivers.",
                "QoS-enabled class of applications have higher priority over best-effort class of application.",
                "In our study, emergency response applications belong to QoS-enabled and surveillance applications belong to best-effort class.",
                "For example, since a stream from an emergency response application is of higher importance than a video stream from a surveillance application, it receives more resources end-to-end.",
                "Since resource availability significantly affects QoS, we use current resource utilization as the primary indicator of system performance.",
                "We refer to the current level of system resource utilization as the system condition.",
                "Based on this definition, we can classify system conditions as being either under, over, or effectively utilized.",
                "Under-utilization of system resources occurs when the current resource utilization is lower than the desired lower bound on resource utilization.",
                "In this system condition, residual system resources (i.e., network bandwidth and computational power) are available in large amounts after meeting end-to-end QoS requirements of applications.",
                "These residual resources can be used to increase the QoS of the applications.",
                "For example, residual CPU and network bandwidth can be used to deliver better quality video (e.g., with greater resolution and higher frame rate) to end receivers.",
                "Over-utilization of system resources occurs when the current resource utilization is higher than the desired upper bound on resource utilization.",
                "This condition can arise from loss of resources - network bandwidth and/or computing power at base station, end receiver or at UAV - or may be due to an increase in resource demands by applications.",
                "Over-utilization is generally undesirable since the quality of the received video (such as resolution and frame rate) and timeliness properties (such as latency and jitter) are degraded and may result in an unstable (and thus ineffective) system.",
                "Effective resource utilization is the desired system condition since it ensures that end-to-end QoS requirements of the UAV-based multimedia system are met and utilization of both system resources, i.e., network bandwidth and computational power, are within their desired utilization bounds.",
                "Article 7 Section 3 describes techniques we applied to achieve effective utilization, even in the face of fluctuating resource availability and/or demand. 3.",
                "OVERVIEW OF HYARM This section describes the architecture of the Hybrid Adaptive Resource-management Middleware (HyARM).",
                "HyARM ensures efficient and predictable system performance by providing <br>adaptive resource management</br>, including monitoring of system resources and enforcing bounds on application resource utilization. 3.1 HyARM Structure and Functionality Resource Utilization Legend Resource Allocation Application Parameters Figure 2: HyARM Architecture HyARM is composed of three types of entities shown in Figure 2 and described below: Resource monitors observe the overall resource utilization for each type of resource and resource utilization per application.",
                "In our multimedia system, there are resource monitors for CPU utilization and network bandwidth.",
                "CPU monitors observe the CPU resource utilization of UAVs, base station, and end receivers.",
                "Network bandwidth monitors observe the network resource utilization of (1) wireless network link between UAVs and the base station and (2) wired network link between the base station and end receivers.",
                "The central controller maintains the system resource utilization below a desired bound by (1) processing periodic updates it receives from resource monitors and (2) modifying the execution of applications accordingly, e.g., by using different execution algorithms or operating the application with increased/decreased QoS.",
                "This adaptation process ensures that system resources are utilized efficiently and end-to-end application QoS requirements are met.",
                "In our multimedia system, the HyARM controller determines the value of application parameters such as (1) video compression schemes, such as Real Video and MPEG-4, and/or (2) frame rate, and (3) picture resolution.",
                "From the perspective of hybrid control theoretic techniques [8], the different video compression schemes and frame rate form the discrete variables of application execution and picture resolution forms the continuous variables.",
                "Application adapters modify application execution according to parameters recommended by the controller and ensures that the operation of the application is in accordance with the recommended parameters.",
                "In the current mplementation of HyARM, the application adapter modifies the input parameters to the application that affect application QoS and resource utilization - compression scheme, frame rate, and picture resolution.",
                "In our future implementations, we plan to use resource reservation mechanisms such as Differentiated Service [7, 3] and Class-based Kernel Resource Management [4] to provision/reserve network and CPU resources.",
                "In our multimedia system, the application adapter ensures that the video is encoded at the recommended frame rate and resolution using the specified compression scheme. 3.2 Applying HyARM to the Multimedia System Case Study HyARM is built atop TAO [13], a widely used open-source implementation of Real-time CORBA [12].",
                "HyARM can be applied to ensure efficient, predictable and <br>adaptive resource management</br> of any DRE system where resource availability and requirements are subject to dynamic change.",
                "Figure 3 shows the interaction of various parts of the DRE multimedia system developed with HyARM, TAO, and TAOs A/V Streaming Service.",
                "TAOs A/V Streaming service is an implementation of the CORBA A/V Streaming Service specification.",
                "TAOs A/V Streaming Service is a QoS-enabled video distribution service that can transfer video in real-time to one or more receivers.",
                "We use the A/V Streaming Service to transmit the video from the UAVs to the end receivers via the base station.",
                "Three entities of Receiver UAV TAO Resource Utilization HyARM Central Controller A/V Streaming Service : Sender MPEG1 MPEG4 Real Video HyARM Resource Monitor A/V Streaming Service : Receiver Compressed Video Compressed Video Application HyARM Application Adapter Remote Object Call Control Inputs Resource Utilization Resource Utilization / Control Inputs Control Inputs Legend Figure 3: Developing the DRE Multimedia System with HyARM HyARM, namely the resource monitors, central controller, and application adapters are built as CORBA servants, so they can be distributed throughout a DRE system.",
                "Resource monitors are remote CORBA objects that update the central controller periodically with the current resource utilization.",
                "Application adapters are collocated with applications since the two interact closely.",
                "As shown in Figure 3, UAVs compress the data using various compression schemes, such as MPEG1, MPEG4, and Real Video, and uses TAOs A/V streaming service to transmit the video to end receivers.",
                "HyARMs resource monitors continuously observe the system resource utilization and notify the central controller with the current utilization. 3 The interaction between the controller and the resource monitors uses the Observer pattern [5].",
                "When the controller receives resource utilization updates from monitors, it computes the necessary modifications to application(s) parameters and notifies application adapter(s) via a remote operation call.",
                "Application adapter(s), that are collocated with the application, modify the input parameters to the application - in our case video encoder - to modify the application resource utilization and QoS. 3 The base station is not included in the figure since it only retransmits the video received from UAVs to end receivers.",
                "Article 7 4.",
                "PERFORMANCE RESULTS AND ANALYSIS This section first describes the testbed that provides the infrastructure for our DRE multimedia system, which was used to evaluate the performance of HyARM.",
                "We then describe our experiments and analyze the results obtained to empirically evaluate how HyARM behaves during underand over-utilization of system resources. 4.1 Overview of the Hardware and Software Testbed Our experiments were performed on the Emulab testbed at University of Utah.",
                "The hardware configuration consists of two nodes acting as UAVs, one acting as base station, and one as end receiver.",
                "Video from the two UAVs were transmitted to a base station via a LAN configured with the following properties: average packet loss ratio of 0.3 and bandwidth 1 Mbps.",
                "The network bandwidth was chosen to be 1 Mbps since each UAV in the DRE multimedia system is allocated 250 Kbps.",
                "These parameters were chosen to emulate an unreliable wireless network with limited bandwidth between the UAVs and the base station.",
                "From the base station, the video was retransmitted to the end receiver via a reliable wireline link of 10 Mbps bandwidth with no packet loss.",
                "The hardware configuration of all the nodes was chosen as follows: 600 MHz Intel Pentium III processor, 256 MB physical memory, 4 Intel EtherExpress Pro 10/100 Mbps Ethernet ports, and 13 GB hard drive.",
                "A real-time version of Linux - TimeSys Linux/NET 3.1.214 based on RedHat Linux 9was used as the operating system for all nodes.",
                "The following software packages were also used for our experiments: (1) Ffmpeg 0.4.9-pre1, which is an open-source library (http: //www.ffmpeg.sourceforge.net/download.php) that compresses video into MPEG-2, MPEG-4, Real Video, and many other video formats. (2) Iftop 0.16, which is an opensource library (http://www.ex-parrot.com/∼pdw/iftop/) we used for monitoring network activity and bandwidth utilization. (3) ACE 5.4.3 + TAO 1.4.3, which is an opensource (http://www.dre.vanderbilt.edu/TAO) implementation of the Real-time CORBA [12] specification upon which HyARM is built.",
                "TAO provides the CORBA Audio/Video (A/V) Streaming Service that we use to transmit the video from the UAVs to end receivers via the base station. 4.2 Experiment Configuration Our experiment consisted of two (emulated) UAVs that simultaneously send video to the base station using the experimentation setup described in Section 4.1.",
                "At the base station, video was retransmitted to the end receivers (without any modifications), where it was stored to a file.",
                "Each UAV hosted two applications, one QoS-enabled application (emergency response), and one best-effort application (surveillance).",
                "Within each UAV, computational power is shared between the applications, while the network bandwidth is shared among all applications.",
                "To evaluate the QoS provided by HyARM, we monitored CPU utilization at the two UAVs, and network bandwidth utilization between the UAV and the base station.",
                "CPU resource utilization was not monitored at the base station and the end receiver since they performed no computationallyintensive operations.",
                "The resource utilization of the 10 Mpbs physical link between the base station and the end receiver does not affect QoS of applications and is not monitored by HyARM since it is nearly 10 times the 1 MB bandwidth of the LAN between the UAVs and the base station.",
                "The experiment also monitors properties of the video that affect the QoS of the applications, such as latency, jitter, frame rate, and resolution.",
                "The set point on resource utilization for each resource was specified at 0.69, which is the upper bound typically recommended by scheduling techniques, such as rate monotonic algorithm [9].",
                "Since studies [6] have shown that human eyes can perceive delays more than 200ms, we use this as the upper bound on jitter of the received video.",
                "QoS requirements for each class of application is specified during system initialization and is shown in Table 1. 4.3 Empirical Results and Analysis This section presents the results obtained from running the experiment described in Section 4.2 on our DRE multimedia system testbed.",
                "We used system resource utilization as a metric to evaluate the <br>adaptive resource management</br> capabilities of HyARM under varying input work loads.",
                "We also used application QoS as a metric to evaluate HyARMs capabilities to support end-to-end QoS requirements of the various classes of applications in the DRE multimedia system.",
                "We analyze these results to explain the significant differences in system performance and application QoS.",
                "Comparison of system performance is decomposed into comparison of resource utilization and application QoS.",
                "For system resource utilization, we compare (1) network bandwidth utilization of the local area network and (2) CPU utilization at the two UAV nodes.",
                "For application QoS, we compare mean values of video parameters, including (1) picture resolution, (2) frame rate, (3) latency, and (4) jitter.",
                "Comparison of resource utilization.",
                "Over-utilization of system resources in DRE systems can yield an unstable system.",
                "In contrast, under-utilization of system resources increases system cost.",
                "Figure 4 and Figure 5 compare the system resource utilization with and without HyARM.",
                "Figure 4 shows that HyARM maintains system utilization close to the desired utilization set point during fluctuation in input work load by transmitting video of higher (or lower) QoS for QoS-enabled (or best-effort) class of applications during over (or under) utilization of system resources.",
                "Figure 5 shows that without HyARM, network utilization was as high as 0.9 during increase in workload conditions, which is greater than the utilization set point of 0.7 by 0.2.",
                "As a result of over-utilization of resources, QoS of the received video, such as average latency and jitter, was affected significantly.",
                "Without HyARM, system resources were either under-utilized or over-utilized, both of which are undesirable.",
                "In contrast, with HyARM, system resource utilization is always close to the desired set point, even during fluctuations in application workload.",
                "During sudden fluctuation in application workload, system conditions may be temporarily undesirable, but are restored to the desired condition within several sampling periods.",
                "Temporary over-utilization of resources is permissible in our multimedia system since the quality of the video may be degraded for a short period of time, though application QoS will be degraded significantly if poor quality video is transmitted for a longer period of time.",
                "Comparison of application QoS.",
                "Figures 6, Figure 7, and Table 2 compare latency, jitter, resolution, and frameArticle 7 Class Resolution Frame Rate Latency (msec ) Jitter (msec) QoS Enabled 1024 x 768 25 200 200 Best-effort 320 x 240 15 300 250 Table 1: Application QoS Requirements Figure 4: Resource utilization with HyARM Figure 5: Resource utilization without HyARM rate of the received video, respectively.",
                "Table 2 shows that HyARM increases the resolution and frame video of QoSenabled applications, but decreases the resolution and frame rate of best effort applications.",
                "During over utilization of system resources, resolution and frame rate of lower priority applications are reduced to adapt to fluctuations in application workload and to maintain the utilization of resources at the specified set point.",
                "It can be seen from Figure 6 and Figure 7 that HyARM reduces the latency and jitter of the received video significantly.",
                "These figures show that the QoS of QoS-enabled applications is greatly improved by HyARM.",
                "Although application parameters, such as frame rate and resolutions, which affect the soft QoS requirements of best-effort applications may be compromised, the hard QoS requirements, such as latency and jitter, of all applications are met.",
                "HyARM responds to fluctuation in resource availability and/or demand by constant monitoring of resource utilization.",
                "As shown in Figure 4, when resources utilization increases above the desired set point, HyARM lowers the utilization by reducing the QoS of best-effort applications.",
                "This adaptation ensures that enough resources are available for QoS-enabled applications to meet their QoS needs.",
                "Figures 6 and 7 show that the values of latency and jitter of the received video of the system with HyARM are nearly half of the corresponding value of the system without HyARM.",
                "With HyARM, values of these parameters are well below the specified bounds, whereas without HyARM, these value are significantly above the specified bounds due to overutilization of the network bandwidth, which leads to network congestion and results in packet loss.",
                "HyARM avoids this by reducing video parameters such as resolution, frame-rate, and/or modifying the compression scheme used to compress the video.",
                "Our conclusions from analyzing the results described above are that applying adaptive middleware via hybrid control to DRE system helps to (1) improve application QoS, (2) increase system resource utilization, and (3) provide better predictability (lower latency and inter-frame delay) to QoSenabled applications.",
                "These improvements are achieved largely due to monitoring of system resource utilization, efficient system workload management, and adaptive resource provisioning by means of HyARMs network/CPU resource monitors, application adapter, and central controller, respectively. 5.",
                "RELATED WORK A number of control theoretic approaches have been applied to DRE systems recently.",
                "These techniques aid in overcoming limitations with traditional scheduling approaches that handle dynamic changes in resource availability poorly and result in a rigidly scheduled system that adapts poorly to change.",
                "A survey of these techniques is presented in [1].",
                "One such approach is feedback control scheduling (FCS) [2, 11].",
                "FCS algorithms dynamically adjust resource allocation by means of software feedback control loops.",
                "FCS algorithms are modeled and designed using rigorous controltheoretic methodologies.",
                "These algorithms provide robust and analytical performance assurances despite uncertainties in resource availability and/or demand.",
                "Although existing FCS algorithms have shown promise, these algorithms often assume that the system has continuous control variable(s) that can continuously be adjusted.",
                "While this assumption holds for certain classes of systems, there are many classes of DRE systems, such as avionics and total-ship computing environments that only support a finite a priori set of discrete configurations.",
                "The control variables in such systems are therefore intrinsically discrete.",
                "HyARM handles both continuous control variables, such as picture resolution, and discrete control variable, such as discrete set of frame rates.",
                "HyARM can therefore be applied to system that support continuous and/or discrete set of control variables.",
                "The DRE multimedia system as described in Section 2 is an example DRE system that offers both continuous (picture resolution) and discrete set (frame-rate) of control variables.",
                "These variables are modified by HyARM to achieve efficient resource utilization and improved application QoS. 6.",
                "CONCLUDING REMARKS Article 7 Figure 6: Comparison of Video Latency Figure 7: Comparison of Video Jitter Source Picture Size / Frame Rate With HyARM Without HyARM UAV1 QoS Enabled Application 1122 X 1496 / 25 960 X 720 / 20 UAV1 Best-effort Application 288 X 384 / 15 640 X 480 / 20 UAV2 QoS Enabled Application 1126 X 1496 / 25 960 X 720 / 20 UAV2 Best-effort Application 288 X 384 / 15 640 X 480 / 20 Table 2: Comparison of Video Quality Many distributed real-time and embedded (DRE) systems demand end-to-end quality of service (QoS) enforcement from their underlying platforms to operate correctly.",
                "These systems increasingly run in open environments, where resource availability is subject to dynamic change.",
                "To meet end-to-end QoS in dynamic environments, DRE systems can benefit from an adaptive middleware that monitors system resources, performs efficient application workload management, and enables efficient resource provisioning for executing applications.",
                "This paper described HyARM, an adaptive middleware, that provides effective resource management to DRE systems.",
                "HyARM employs hybrid control techniques to provide the adaptive middleware capabilities, such as resource monitoring and application adaptation that are key to providing the dynamic resource management capabilities for open DRE systems.",
                "We employed HyARM to a representative DRE multimedia system that is implemented using Real-time CORBA and CORBA A/V Streaming Service.",
                "We evaluated the performance of HyARM in a system composed of three distributed resources and two classes of applications with two applications each.",
                "Our empirical results indicate that HyARM ensures (1) efficient resource utilization by maintaining the resource utilization of system resources within the specified utilization bounds, (2) QoS requirements of QoS-enabled applications are met at all times.",
                "Overall, HyARM ensures efficient, predictable, and <br>adaptive resource management</br> for DRE systems. 7.",
                "REFERENCES [1] T. F. Abdelzaher, J. Stankovic, C. Lu, R. Zhang, and Y. Lu.",
                "Feddback Performance Control in Software Services.",
                "IEEE: Control Systems, 23(3), June 2003. [2] L. Abeni, L. Palopoli, G. Lipari, and J. Walpole.",
                "Analysis of a reservation-based feedback scheduler.",
                "In IEEE Real-Time Systems Symposium, Dec. 2002. [3] S. Blake, D. Black, M. Carlson, E. Davies, Z. Wang, and W. Weiss.",
                "An architecture for differentiated services.",
                "Network Information Center RFC 2475, Dec. 1998. [4] H. Franke, S. Nagar, C. Seetharaman, and V. Kashyap.",
                "Enabling Autonomic Workload Management in Linux.",
                "In Proceedings of the International Conference on Autonomic Computing (ICAC), New York, New York, May 2004.",
                "IEEE. [5] E. Gamma, R. Helm, R. Johnson, and J. Vlissides.",
                "Design Patterns: Elements of Reusable Object-Oriented Software.",
                "Addison-Wesley, Reading, MA, 1995. [6] G. Ghinea and J. P. Thomas.",
                "Qos impact on user perception and understanding of multimedia video clips.",
                "In MULTIMEDIA 98: Proceedings of the sixth ACM international conference on Multimedia, pages 49-54, Bristol, United Kingdom, 1998.",
                "ACM Press. [7] Internet Engineering Task Force.",
                "Differentiated Services Working Group (diffserv) Charter. www.ietf.org/html.charters/diffserv-charter.html, 2000. [8] X. Koutsoukos, R. Tekumalla, B. Natarajan, and C. Lu.",
                "Hybrid Supervisory Control of Real-Time Systems.",
                "In 11th IEEE Real-Time and Embedded Technology and Applications Symposium, San Francisco, California, Mar. 2005. [9] J. Lehoczky, L. Sha, and Y. Ding.",
                "The Rate Monotonic Scheduling Algorithm: Exact Characterization and Average Case Behavior.",
                "In Proceedings of the 10th IEEE Real-Time Systems Symposium (RTSS 1989), pages 166-171.",
                "IEEE Computer Society Press, 1989. [10] J. Loyall, J. Gossett, C. Gill, R. Schantz, J. Zinky, P. Pal, R. Shapiro, C. Rodrigues, M. Atighetchi, and D. Karr.",
                "Comparing and Contrasting Adaptive Middleware Support in Wide-Area and Embedded Distributed Object Applications.",
                "In Proceedings of the 21st International Conference on Distributed Computing Systems (ICDCS-21), pages 625-634.",
                "IEEE, Apr. 2001. [11] C. Lu, J.",
                "A. Stankovic, G. Tao, and S. H. Son.",
                "Feedback Control Real-Time Scheduling: Framework, Modeling, and Algorithms.",
                "Real-Time Systems Journal, 23(1/2):85-126, July 2002. [12] Object Management Group.",
                "Real-time CORBA Specification, OMG Document formal/02-08-02 edition, Aug. 2002. [13] D. C. Schmidt, D. L. Levine, and S. Mungee.",
                "The Design and Performance of Real-Time Object Request Brokers.",
                "Computer Communications, 21(4):294-324, Apr. 1998. [14] Thomas Sikora.",
                "Trends and Perspectives in Image and Video Coding.",
                "In Proceedings of the IEEE, Jan. 2005. [15] X. Wang, H.-M. Huang, V. Subramonian, C. Lu, and C. Gill.",
                "CAMRIT: Control-based Adaptive Middleware for Real-time Image Transmission.",
                "In Proc. of the 10th IEEE Real-Time and Embedded Tech. and Applications Symp. (RTAS), Toronto, Canada, May 2004.",
                "Article 7"
            ],
            "original_annotated_samples": [
                "Evaluating <br>adaptive resource management</br> for Distributed Real-Time Embedded Systems Nishanth Shankaran, ∗ Xenofon Koutsoukos, Douglas C. Schmidt, and Aniruddha Gokhale Dept.",
                "of EECS, Vanderbilt University, Nashville ABSTRACT A challenging problem faced by researchers and developers of distributed real-time and embedded (DRE) systems is devising and implementing effective <br>adaptive resource management</br> strategies that can meet end-to-end quality of service (QoS) requirements in varying operational conditions.",
                "This paper presents two contributions to research in <br>adaptive resource management</br> for DRE systems.",
                "First, we describe the structure and functionality of the Hybrid Adaptive Resourcemanagement Middleware (HyARM), which provides <br>adaptive resource management</br> using hybrid control techniques for adapting to workload fluctuations and resource availability.",
                "In our case study, which involves a distributed real-time video distribution system, the task of <br>adaptive resource management</br> is to control the utilization of the different resources, whose utilizations are described by continuous variables."
            ],
            "translated_annotated_samples": [
                "Evaluando la <br>Gestión de Recursos Adaptativa</br> para Sistemas Empotrados Distribuidos en Tiempo Real de Nishanth Shankaran, Xenofon Koutsoukos, Douglas C. Schmidt y Aniruddha Gokhale, Dept.",
                "de EECS, Universidad de Vanderbilt, Nashville RESUMEN Un problema desafiante enfrentado por investigadores y desarrolladores de sistemas distribuidos en tiempo real y embebidos (DRE) es idear e implementar estrategias efectivas de <br>gestión adaptativa de recursos</br> que puedan cumplir con los requisitos de calidad de servicio (QoS) de extremo a extremo en condiciones operativas variables.",
                "Este artículo presenta dos contribuciones a la investigación en <br>gestión de recursos adaptativa</br> para sistemas DRE.",
                "Primero, describimos la estructura y funcionalidad del Middleware de Gestión de Recursos Adaptativos Híbridos (HyARM), que proporciona <br>gestión de recursos adaptativa</br> utilizando técnicas de control híbridas para adaptarse a las fluctuaciones de carga de trabajo y disponibilidad de recursos.",
                "En nuestro estudio de caso, que implica un sistema distribuido de distribución de video en tiempo real, la tarea de <br>gestión de recursos adaptativa</br> consiste en controlar la utilización de los diferentes recursos, cuyas utilizaciones están descritas por variables continuas."
            ],
            "translated_text": "Evaluando la <br>Gestión de Recursos Adaptativa</br> para Sistemas Empotrados Distribuidos en Tiempo Real de Nishanth Shankaran, Xenofon Koutsoukos, Douglas C. Schmidt y Aniruddha Gokhale, Dept. de EECS, Universidad de Vanderbilt, Nashville RESUMEN Un problema desafiante enfrentado por investigadores y desarrolladores de sistemas distribuidos en tiempo real y embebidos (DRE) es idear e implementar estrategias efectivas de <br>gestión adaptativa de recursos</br> que puedan cumplir con los requisitos de calidad de servicio (QoS) de extremo a extremo en condiciones operativas variables. Este artículo presenta dos contribuciones a la investigación en <br>gestión de recursos adaptativa</br> para sistemas DRE. Primero, describimos la estructura y funcionalidad del Middleware de Gestión de Recursos Adaptativos Híbridos (HyARM), que proporciona <br>gestión de recursos adaptativa</br> utilizando técnicas de control híbridas para adaptarse a las fluctuaciones de carga de trabajo y disponibilidad de recursos. Segundo, evaluamos el comportamiento adaptativo de HyARM a través de experimentos en un sistema multimedia DRE que distribuye video en tiempo real. Nuestros resultados indican que HyARM produce un rendimiento del sistema predecible, estable y alto, incluso ante cargas de trabajo y disponibilidad de recursos fluctuantes. Categorías y Descriptores de Asignaturas C.2.4 [Sistemas Distribuidos]: Aplicaciones Distribuidas; D.4.7 [Organización y Diseño]: Sistemas en Tiempo Real y Sistemas Embebidos 1. INTRODUCCIÓN Lograr la calidad de servicio (QoS) en tiempo real de extremo a extremo es particularmente importante para sistemas distribuidos en tiempo real y embebidos (DRE) abiertos que enfrentan limitaciones de recursos, como potencia de cómputo limitada y ancho de banda de red. La sobreutilización de estos recursos del sistema puede generar un comportamiento impredecible e inestable, mientras que la subutilización puede resultar en un costo excesivo del sistema. Un enfoque prometedor para cumplir de manera efectiva con estos requisitos de calidad de servicio de extremo a extremo, por lo tanto, es desarrollar y aplicar middleware adaptativo [10, 15], que es un software cuyas propiedades funcionales y relacionadas con la calidad de servicio pueden ser modificadas estática o dinámicamente. Las modificaciones estáticas se realizan para reducir la huella, aprovechar las capacidades existentes en plataformas específicas, habilitar la selección funcional y/o minimizar las dependencias de infraestructura de hardware/software. Los objetivos de las modificaciones dinámicas incluyen optimizar las respuestas del sistema a entornos o requisitos cambiantes, como la modificación de interconexiones de componentes, niveles de potencia, disponibilidad de ancho de banda de CPU y red, latencia/jitter y carga de trabajo. En los sistemas DRE abiertos, el middleware adaptativo debe realizar modificaciones de manera confiable, es decir, cumpliendo con los estrictos requisitos de calidad de servicio de extremo a extremo, lo que requiere la especificación y aplicación de límites superiores e inferiores en la utilización de recursos del sistema para garantizar un uso efectivo de los recursos del sistema. Para cumplir con estos requisitos, hemos desarrollado el Middleware de Gestión de Recursos Híbrido Adaptativo (HyARM), que es un middleware de gestión de recursos distribuido de código abierto. HyARM se basa en técnicas híbridas de control teórico, las cuales proporcionan un marco teórico para diseñar el control de sistemas complejos con dinámicas tanto continuas como discretas. En nuestro estudio de caso, que implica un sistema distribuido de distribución de video en tiempo real, la tarea de <br>gestión de recursos adaptativa</br> consiste en controlar la utilización de los diferentes recursos, cuyas utilizaciones están descritas por variables continuas. ",
            "candidates": [],
            "error": [
                [
                    "Gestión de Recursos Adaptativa",
                    "gestión adaptativa de recursos",
                    "gestión de recursos adaptativa",
                    "gestión de recursos adaptativa",
                    "gestión de recursos adaptativa"
                ]
            ]
        },
        "distributed real-time embedded system": {
            "translated_key": "sistema embebido distribuido en tiempo real",
            "is_in_text": false,
            "original_annotated_sentences": [
                "Evaluating Adaptive Resource Management for Distributed Real-Time Embedded Systems Nishanth Shankaran, ∗ Xenofon Koutsoukos, Douglas C. Schmidt, and Aniruddha Gokhale Dept.",
                "of EECS, Vanderbilt University, Nashville ABSTRACT A challenging problem faced by researchers and developers of distributed real-time and embedded (DRE) systems is devising and implementing effective adaptive resource management strategies that can meet end-to-end quality of service (QoS) requirements in varying operational conditions.",
                "This paper presents two contributions to research in adaptive resource management for DRE systems.",
                "First, we describe the structure and functionality of the Hybrid Adaptive Resourcemanagement Middleware (HyARM), which provides adaptive resource management using hybrid control techniques for adapting to workload fluctuations and resource availability.",
                "Second, we evaluate the adaptive behavior of HyARM via experiments on a DRE multimedia system that distributes video in real-time.",
                "Our results indicate that HyARM yields predictable, stable, and high system performance, even in the face of fluctuating workload and resource availability.",
                "Categories and Subject Descriptors C.2.4 [Distributed Systems]: Distributed Applications; D.4.7 [Organization and Design]: Real-time Systems and Embedded Systems 1.",
                "INTRODUCTION Achieving end-to-end real-time quality of service (QoS) is particularly important for open distributed real-time and embedded (DRE) systems that face resource constraints, such as limited computing power and network bandwidth.",
                "Overutilization of these system resources can yield unpredictable and unstable behavior, whereas under-utilization can yield excessive system cost.",
                "A promising approach to meeting these end-to-end QoS requirements effectively, therefore, is to develop and apply adaptive middleware [10, 15], which is software whose functional and QoS-related properties can be modified either statically or dynamically.",
                "Static modifications are carried out to reduce footprint, leverage capabilities that exist in specific platforms, enable functional subsetting, and/or minimize hardware/software infrastructure dependencies.",
                "Objectives of dynamic modifications include optimizing system responses to changing environments or requirements, such as changing component interconnections, power-levels, CPU and network bandwidth availability, latency/jitter, and workload.",
                "In open DRE systems, adaptive middleware must make such modifications dependably, i.e., while meeting stringent end-to-end QoS requirements, which requires the specification and enforcement of upper and lower bounds on system resource utilization to ensure effective use of system resources.",
                "To meet these requirements, we have developed the Hybrid Adaptive Resource-management Middleware (HyARM), which is an open-source1 distributed resource management middleware.",
                "HyARM is based on hybrid control theoretic techniques [8], which provide a theoretical framework for designing control of complex system with both continuous and discrete dynamics.",
                "In our case study, which involves a distributed real-time video distribution system, the task of adaptive resource management is to control the utilization of the different resources, whose utilizations are described by continuous variables.",
                "We achieve this by adapting the resolution of the transmitted video, which is modeled as a continuous variable, and by changing the frame-rate and the compression, which are modeled by discrete actions.",
                "We have implemented HyARM atop The ACE ORB (TAO) [13], which is an implementation of the Real-time CORBA specification [12].",
                "Our results show that (1) HyARM ensures effective system resource utilization and (2) end-to-end QoS requirements of higher priority applications are met, even in the face of fluctuations in workload.",
                "The remainder of the paper is organized as follows: Section 2 describes the architecture, functionality, and resource utilization model of our DRE multimedia system case study; Section 3 explains the structure and functionality of HyARM; Section 4 evaluates the adaptive behavior of HyARM via experiments on our multimedia system case study; Section 5 compares our research on HyARM with related work; and Section 6 presents concluding remarks. 1 The code and examples for HyARM are available at www. dre.vanderbilt.edu/∼nshankar/HyARM/.",
                "Article 7 2.",
                "CASE STUDY: DRE MULTIMEDIA SYSTEM This section describes the architecture and QoS requirements of our DRE multimedia system. 2.1 Multimedia System Architecture Wireless Link Wireless Link Wireless Link ` ` ` Physical Link Physical Link Physical Link Base Station End Receiver End Receiver End Receiver` Physical Link End Receiver UAV Camera Video Encoder Camera Video Encoder Camera Video Encoder UAV Camera Video Encoder Camera Video Encoder Camera Video Encoder UAV Camera Video Encoder Camera Video Encoder Camera Video Encoder Figure 1: DRE Multimedia System Architecture The architecture for our DRE multimedia system is shown in Figure 1 and consists of the following entities: (1)Data source (video capture by UAV), where video is captured (related to subject of interest) by camera(s) on each UAV, followed by encoding of raw video using a specific encoding scheme and transmitting the video to the next stage in the pipeline. (2)Data distributor (base station), where the video is processed to remove noise, followed by retransmission of the processed video to the next stage in the pipeline. (3) Sinks (command and control center), where the received video is again processed to remove noise, then decoded and finally rendered to end user via graphical displays.",
                "Significant improvements in video encoding/decoding and (de)compression techniques have been made as a result of recent advances in video encoding and compression techniques [14].",
                "Common video compression schemes are MPEG1, MPEG-2, Real Video, and MPEG-4.",
                "Each compression scheme is characterized by its resource requirement, e.g., the computational power to (de)compress the video signal and the network bandwidth required to transmit the compressed video signal.",
                "Properties of the compressed video, such as resolution and frame-rate determine both the quality and the resource requirements of the video.",
                "Our multimedia system case study has the following endto-end real-time QoS requirements: (1) latency, (2) interframe delay (also know as jitter), (3) frame rate, and (4) picture resolution.",
                "These QoS requirements can be classified as being either hard or soft.",
                "Hard QoS requirements should be met by the underlying system at all times, whereas soft QoS requirements can be missed occasionally.2 For our case study, we treat QoS requirements such as latency and jitter as harder QoS requirements and strive to meet these requirements at all times.",
                "In contrast, we treat QoS requirements such as video frame rate and picture resolution as softer QoS requirements and modify these video properties adaptively to handle dynamic changes in resource availabil2 Although hard and soft are often portrayed as two discrete requirement sets, in practice they are usually two ends of a continuum ranging from softer to harder rather than two disjoint points. ity effectively. 2.2 DRE Multimedia System Rresources There are two primary types of resources in our DRE multimedia system: (1) processors that provide computational power available at the UAVs, base stations, and end receivers and (2) network links that provide communication bandwidth between UAVs, base stations, and end receivers.",
                "The computing power required by the video capture and encoding tasks depends on dynamic factors, such as speed of the UAV, speed of the subject (if the subject is mobile), and distance between UAV and the subject.",
                "The wireless network bandwidth available to transmit video captured by UAVs to base stations also depends on the wireless connectivity between the UAVs and the base station, which in-turn depend on dynamic factors such as the speed of the UAVs and the relative distance between UAVs and base stations.",
                "The bandwidth of the link between the base station and the end receiver is limited, but more stable than the bandwidth of the wireless network.",
                "Resource requirements and availability of resources are subjected to dynamic changes.",
                "Two classes of applications - QoS-enabled and best-effort - use the multimedia system infrastructure described above to transmit video to their respective receivers.",
                "QoS-enabled class of applications have higher priority over best-effort class of application.",
                "In our study, emergency response applications belong to QoS-enabled and surveillance applications belong to best-effort class.",
                "For example, since a stream from an emergency response application is of higher importance than a video stream from a surveillance application, it receives more resources end-to-end.",
                "Since resource availability significantly affects QoS, we use current resource utilization as the primary indicator of system performance.",
                "We refer to the current level of system resource utilization as the system condition.",
                "Based on this definition, we can classify system conditions as being either under, over, or effectively utilized.",
                "Under-utilization of system resources occurs when the current resource utilization is lower than the desired lower bound on resource utilization.",
                "In this system condition, residual system resources (i.e., network bandwidth and computational power) are available in large amounts after meeting end-to-end QoS requirements of applications.",
                "These residual resources can be used to increase the QoS of the applications.",
                "For example, residual CPU and network bandwidth can be used to deliver better quality video (e.g., with greater resolution and higher frame rate) to end receivers.",
                "Over-utilization of system resources occurs when the current resource utilization is higher than the desired upper bound on resource utilization.",
                "This condition can arise from loss of resources - network bandwidth and/or computing power at base station, end receiver or at UAV - or may be due to an increase in resource demands by applications.",
                "Over-utilization is generally undesirable since the quality of the received video (such as resolution and frame rate) and timeliness properties (such as latency and jitter) are degraded and may result in an unstable (and thus ineffective) system.",
                "Effective resource utilization is the desired system condition since it ensures that end-to-end QoS requirements of the UAV-based multimedia system are met and utilization of both system resources, i.e., network bandwidth and computational power, are within their desired utilization bounds.",
                "Article 7 Section 3 describes techniques we applied to achieve effective utilization, even in the face of fluctuating resource availability and/or demand. 3.",
                "OVERVIEW OF HYARM This section describes the architecture of the Hybrid Adaptive Resource-management Middleware (HyARM).",
                "HyARM ensures efficient and predictable system performance by providing adaptive resource management, including monitoring of system resources and enforcing bounds on application resource utilization. 3.1 HyARM Structure and Functionality Resource Utilization Legend Resource Allocation Application Parameters Figure 2: HyARM Architecture HyARM is composed of three types of entities shown in Figure 2 and described below: Resource monitors observe the overall resource utilization for each type of resource and resource utilization per application.",
                "In our multimedia system, there are resource monitors for CPU utilization and network bandwidth.",
                "CPU monitors observe the CPU resource utilization of UAVs, base station, and end receivers.",
                "Network bandwidth monitors observe the network resource utilization of (1) wireless network link between UAVs and the base station and (2) wired network link between the base station and end receivers.",
                "The central controller maintains the system resource utilization below a desired bound by (1) processing periodic updates it receives from resource monitors and (2) modifying the execution of applications accordingly, e.g., by using different execution algorithms or operating the application with increased/decreased QoS.",
                "This adaptation process ensures that system resources are utilized efficiently and end-to-end application QoS requirements are met.",
                "In our multimedia system, the HyARM controller determines the value of application parameters such as (1) video compression schemes, such as Real Video and MPEG-4, and/or (2) frame rate, and (3) picture resolution.",
                "From the perspective of hybrid control theoretic techniques [8], the different video compression schemes and frame rate form the discrete variables of application execution and picture resolution forms the continuous variables.",
                "Application adapters modify application execution according to parameters recommended by the controller and ensures that the operation of the application is in accordance with the recommended parameters.",
                "In the current mplementation of HyARM, the application adapter modifies the input parameters to the application that affect application QoS and resource utilization - compression scheme, frame rate, and picture resolution.",
                "In our future implementations, we plan to use resource reservation mechanisms such as Differentiated Service [7, 3] and Class-based Kernel Resource Management [4] to provision/reserve network and CPU resources.",
                "In our multimedia system, the application adapter ensures that the video is encoded at the recommended frame rate and resolution using the specified compression scheme. 3.2 Applying HyARM to the Multimedia System Case Study HyARM is built atop TAO [13], a widely used open-source implementation of Real-time CORBA [12].",
                "HyARM can be applied to ensure efficient, predictable and adaptive resource management of any DRE system where resource availability and requirements are subject to dynamic change.",
                "Figure 3 shows the interaction of various parts of the DRE multimedia system developed with HyARM, TAO, and TAOs A/V Streaming Service.",
                "TAOs A/V Streaming service is an implementation of the CORBA A/V Streaming Service specification.",
                "TAOs A/V Streaming Service is a QoS-enabled video distribution service that can transfer video in real-time to one or more receivers.",
                "We use the A/V Streaming Service to transmit the video from the UAVs to the end receivers via the base station.",
                "Three entities of Receiver UAV TAO Resource Utilization HyARM Central Controller A/V Streaming Service : Sender MPEG1 MPEG4 Real Video HyARM Resource Monitor A/V Streaming Service : Receiver Compressed Video Compressed Video Application HyARM Application Adapter Remote Object Call Control Inputs Resource Utilization Resource Utilization / Control Inputs Control Inputs Legend Figure 3: Developing the DRE Multimedia System with HyARM HyARM, namely the resource monitors, central controller, and application adapters are built as CORBA servants, so they can be distributed throughout a DRE system.",
                "Resource monitors are remote CORBA objects that update the central controller periodically with the current resource utilization.",
                "Application adapters are collocated with applications since the two interact closely.",
                "As shown in Figure 3, UAVs compress the data using various compression schemes, such as MPEG1, MPEG4, and Real Video, and uses TAOs A/V streaming service to transmit the video to end receivers.",
                "HyARMs resource monitors continuously observe the system resource utilization and notify the central controller with the current utilization. 3 The interaction between the controller and the resource monitors uses the Observer pattern [5].",
                "When the controller receives resource utilization updates from monitors, it computes the necessary modifications to application(s) parameters and notifies application adapter(s) via a remote operation call.",
                "Application adapter(s), that are collocated with the application, modify the input parameters to the application - in our case video encoder - to modify the application resource utilization and QoS. 3 The base station is not included in the figure since it only retransmits the video received from UAVs to end receivers.",
                "Article 7 4.",
                "PERFORMANCE RESULTS AND ANALYSIS This section first describes the testbed that provides the infrastructure for our DRE multimedia system, which was used to evaluate the performance of HyARM.",
                "We then describe our experiments and analyze the results obtained to empirically evaluate how HyARM behaves during underand over-utilization of system resources. 4.1 Overview of the Hardware and Software Testbed Our experiments were performed on the Emulab testbed at University of Utah.",
                "The hardware configuration consists of two nodes acting as UAVs, one acting as base station, and one as end receiver.",
                "Video from the two UAVs were transmitted to a base station via a LAN configured with the following properties: average packet loss ratio of 0.3 and bandwidth 1 Mbps.",
                "The network bandwidth was chosen to be 1 Mbps since each UAV in the DRE multimedia system is allocated 250 Kbps.",
                "These parameters were chosen to emulate an unreliable wireless network with limited bandwidth between the UAVs and the base station.",
                "From the base station, the video was retransmitted to the end receiver via a reliable wireline link of 10 Mbps bandwidth with no packet loss.",
                "The hardware configuration of all the nodes was chosen as follows: 600 MHz Intel Pentium III processor, 256 MB physical memory, 4 Intel EtherExpress Pro 10/100 Mbps Ethernet ports, and 13 GB hard drive.",
                "A real-time version of Linux - TimeSys Linux/NET 3.1.214 based on RedHat Linux 9was used as the operating system for all nodes.",
                "The following software packages were also used for our experiments: (1) Ffmpeg 0.4.9-pre1, which is an open-source library (http: //www.ffmpeg.sourceforge.net/download.php) that compresses video into MPEG-2, MPEG-4, Real Video, and many other video formats. (2) Iftop 0.16, which is an opensource library (http://www.ex-parrot.com/∼pdw/iftop/) we used for monitoring network activity and bandwidth utilization. (3) ACE 5.4.3 + TAO 1.4.3, which is an opensource (http://www.dre.vanderbilt.edu/TAO) implementation of the Real-time CORBA [12] specification upon which HyARM is built.",
                "TAO provides the CORBA Audio/Video (A/V) Streaming Service that we use to transmit the video from the UAVs to end receivers via the base station. 4.2 Experiment Configuration Our experiment consisted of two (emulated) UAVs that simultaneously send video to the base station using the experimentation setup described in Section 4.1.",
                "At the base station, video was retransmitted to the end receivers (without any modifications), where it was stored to a file.",
                "Each UAV hosted two applications, one QoS-enabled application (emergency response), and one best-effort application (surveillance).",
                "Within each UAV, computational power is shared between the applications, while the network bandwidth is shared among all applications.",
                "To evaluate the QoS provided by HyARM, we monitored CPU utilization at the two UAVs, and network bandwidth utilization between the UAV and the base station.",
                "CPU resource utilization was not monitored at the base station and the end receiver since they performed no computationallyintensive operations.",
                "The resource utilization of the 10 Mpbs physical link between the base station and the end receiver does not affect QoS of applications and is not monitored by HyARM since it is nearly 10 times the 1 MB bandwidth of the LAN between the UAVs and the base station.",
                "The experiment also monitors properties of the video that affect the QoS of the applications, such as latency, jitter, frame rate, and resolution.",
                "The set point on resource utilization for each resource was specified at 0.69, which is the upper bound typically recommended by scheduling techniques, such as rate monotonic algorithm [9].",
                "Since studies [6] have shown that human eyes can perceive delays more than 200ms, we use this as the upper bound on jitter of the received video.",
                "QoS requirements for each class of application is specified during system initialization and is shown in Table 1. 4.3 Empirical Results and Analysis This section presents the results obtained from running the experiment described in Section 4.2 on our DRE multimedia system testbed.",
                "We used system resource utilization as a metric to evaluate the adaptive resource management capabilities of HyARM under varying input work loads.",
                "We also used application QoS as a metric to evaluate HyARMs capabilities to support end-to-end QoS requirements of the various classes of applications in the DRE multimedia system.",
                "We analyze these results to explain the significant differences in system performance and application QoS.",
                "Comparison of system performance is decomposed into comparison of resource utilization and application QoS.",
                "For system resource utilization, we compare (1) network bandwidth utilization of the local area network and (2) CPU utilization at the two UAV nodes.",
                "For application QoS, we compare mean values of video parameters, including (1) picture resolution, (2) frame rate, (3) latency, and (4) jitter.",
                "Comparison of resource utilization.",
                "Over-utilization of system resources in DRE systems can yield an unstable system.",
                "In contrast, under-utilization of system resources increases system cost.",
                "Figure 4 and Figure 5 compare the system resource utilization with and without HyARM.",
                "Figure 4 shows that HyARM maintains system utilization close to the desired utilization set point during fluctuation in input work load by transmitting video of higher (or lower) QoS for QoS-enabled (or best-effort) class of applications during over (or under) utilization of system resources.",
                "Figure 5 shows that without HyARM, network utilization was as high as 0.9 during increase in workload conditions, which is greater than the utilization set point of 0.7 by 0.2.",
                "As a result of over-utilization of resources, QoS of the received video, such as average latency and jitter, was affected significantly.",
                "Without HyARM, system resources were either under-utilized or over-utilized, both of which are undesirable.",
                "In contrast, with HyARM, system resource utilization is always close to the desired set point, even during fluctuations in application workload.",
                "During sudden fluctuation in application workload, system conditions may be temporarily undesirable, but are restored to the desired condition within several sampling periods.",
                "Temporary over-utilization of resources is permissible in our multimedia system since the quality of the video may be degraded for a short period of time, though application QoS will be degraded significantly if poor quality video is transmitted for a longer period of time.",
                "Comparison of application QoS.",
                "Figures 6, Figure 7, and Table 2 compare latency, jitter, resolution, and frameArticle 7 Class Resolution Frame Rate Latency (msec ) Jitter (msec) QoS Enabled 1024 x 768 25 200 200 Best-effort 320 x 240 15 300 250 Table 1: Application QoS Requirements Figure 4: Resource utilization with HyARM Figure 5: Resource utilization without HyARM rate of the received video, respectively.",
                "Table 2 shows that HyARM increases the resolution and frame video of QoSenabled applications, but decreases the resolution and frame rate of best effort applications.",
                "During over utilization of system resources, resolution and frame rate of lower priority applications are reduced to adapt to fluctuations in application workload and to maintain the utilization of resources at the specified set point.",
                "It can be seen from Figure 6 and Figure 7 that HyARM reduces the latency and jitter of the received video significantly.",
                "These figures show that the QoS of QoS-enabled applications is greatly improved by HyARM.",
                "Although application parameters, such as frame rate and resolutions, which affect the soft QoS requirements of best-effort applications may be compromised, the hard QoS requirements, such as latency and jitter, of all applications are met.",
                "HyARM responds to fluctuation in resource availability and/or demand by constant monitoring of resource utilization.",
                "As shown in Figure 4, when resources utilization increases above the desired set point, HyARM lowers the utilization by reducing the QoS of best-effort applications.",
                "This adaptation ensures that enough resources are available for QoS-enabled applications to meet their QoS needs.",
                "Figures 6 and 7 show that the values of latency and jitter of the received video of the system with HyARM are nearly half of the corresponding value of the system without HyARM.",
                "With HyARM, values of these parameters are well below the specified bounds, whereas without HyARM, these value are significantly above the specified bounds due to overutilization of the network bandwidth, which leads to network congestion and results in packet loss.",
                "HyARM avoids this by reducing video parameters such as resolution, frame-rate, and/or modifying the compression scheme used to compress the video.",
                "Our conclusions from analyzing the results described above are that applying adaptive middleware via hybrid control to DRE system helps to (1) improve application QoS, (2) increase system resource utilization, and (3) provide better predictability (lower latency and inter-frame delay) to QoSenabled applications.",
                "These improvements are achieved largely due to monitoring of system resource utilization, efficient system workload management, and adaptive resource provisioning by means of HyARMs network/CPU resource monitors, application adapter, and central controller, respectively. 5.",
                "RELATED WORK A number of control theoretic approaches have been applied to DRE systems recently.",
                "These techniques aid in overcoming limitations with traditional scheduling approaches that handle dynamic changes in resource availability poorly and result in a rigidly scheduled system that adapts poorly to change.",
                "A survey of these techniques is presented in [1].",
                "One such approach is feedback control scheduling (FCS) [2, 11].",
                "FCS algorithms dynamically adjust resource allocation by means of software feedback control loops.",
                "FCS algorithms are modeled and designed using rigorous controltheoretic methodologies.",
                "These algorithms provide robust and analytical performance assurances despite uncertainties in resource availability and/or demand.",
                "Although existing FCS algorithms have shown promise, these algorithms often assume that the system has continuous control variable(s) that can continuously be adjusted.",
                "While this assumption holds for certain classes of systems, there are many classes of DRE systems, such as avionics and total-ship computing environments that only support a finite a priori set of discrete configurations.",
                "The control variables in such systems are therefore intrinsically discrete.",
                "HyARM handles both continuous control variables, such as picture resolution, and discrete control variable, such as discrete set of frame rates.",
                "HyARM can therefore be applied to system that support continuous and/or discrete set of control variables.",
                "The DRE multimedia system as described in Section 2 is an example DRE system that offers both continuous (picture resolution) and discrete set (frame-rate) of control variables.",
                "These variables are modified by HyARM to achieve efficient resource utilization and improved application QoS. 6.",
                "CONCLUDING REMARKS Article 7 Figure 6: Comparison of Video Latency Figure 7: Comparison of Video Jitter Source Picture Size / Frame Rate With HyARM Without HyARM UAV1 QoS Enabled Application 1122 X 1496 / 25 960 X 720 / 20 UAV1 Best-effort Application 288 X 384 / 15 640 X 480 / 20 UAV2 QoS Enabled Application 1126 X 1496 / 25 960 X 720 / 20 UAV2 Best-effort Application 288 X 384 / 15 640 X 480 / 20 Table 2: Comparison of Video Quality Many distributed real-time and embedded (DRE) systems demand end-to-end quality of service (QoS) enforcement from their underlying platforms to operate correctly.",
                "These systems increasingly run in open environments, where resource availability is subject to dynamic change.",
                "To meet end-to-end QoS in dynamic environments, DRE systems can benefit from an adaptive middleware that monitors system resources, performs efficient application workload management, and enables efficient resource provisioning for executing applications.",
                "This paper described HyARM, an adaptive middleware, that provides effective resource management to DRE systems.",
                "HyARM employs hybrid control techniques to provide the adaptive middleware capabilities, such as resource monitoring and application adaptation that are key to providing the dynamic resource management capabilities for open DRE systems.",
                "We employed HyARM to a representative DRE multimedia system that is implemented using Real-time CORBA and CORBA A/V Streaming Service.",
                "We evaluated the performance of HyARM in a system composed of three distributed resources and two classes of applications with two applications each.",
                "Our empirical results indicate that HyARM ensures (1) efficient resource utilization by maintaining the resource utilization of system resources within the specified utilization bounds, (2) QoS requirements of QoS-enabled applications are met at all times.",
                "Overall, HyARM ensures efficient, predictable, and adaptive resource management for DRE systems. 7.",
                "REFERENCES [1] T. F. Abdelzaher, J. Stankovic, C. Lu, R. Zhang, and Y. Lu.",
                "Feddback Performance Control in Software Services.",
                "IEEE: Control Systems, 23(3), June 2003. [2] L. Abeni, L. Palopoli, G. Lipari, and J. Walpole.",
                "Analysis of a reservation-based feedback scheduler.",
                "In IEEE Real-Time Systems Symposium, Dec. 2002. [3] S. Blake, D. Black, M. Carlson, E. Davies, Z. Wang, and W. Weiss.",
                "An architecture for differentiated services.",
                "Network Information Center RFC 2475, Dec. 1998. [4] H. Franke, S. Nagar, C. Seetharaman, and V. Kashyap.",
                "Enabling Autonomic Workload Management in Linux.",
                "In Proceedings of the International Conference on Autonomic Computing (ICAC), New York, New York, May 2004.",
                "IEEE. [5] E. Gamma, R. Helm, R. Johnson, and J. Vlissides.",
                "Design Patterns: Elements of Reusable Object-Oriented Software.",
                "Addison-Wesley, Reading, MA, 1995. [6] G. Ghinea and J. P. Thomas.",
                "Qos impact on user perception and understanding of multimedia video clips.",
                "In MULTIMEDIA 98: Proceedings of the sixth ACM international conference on Multimedia, pages 49-54, Bristol, United Kingdom, 1998.",
                "ACM Press. [7] Internet Engineering Task Force.",
                "Differentiated Services Working Group (diffserv) Charter. www.ietf.org/html.charters/diffserv-charter.html, 2000. [8] X. Koutsoukos, R. Tekumalla, B. Natarajan, and C. Lu.",
                "Hybrid Supervisory Control of Real-Time Systems.",
                "In 11th IEEE Real-Time and Embedded Technology and Applications Symposium, San Francisco, California, Mar. 2005. [9] J. Lehoczky, L. Sha, and Y. Ding.",
                "The Rate Monotonic Scheduling Algorithm: Exact Characterization and Average Case Behavior.",
                "In Proceedings of the 10th IEEE Real-Time Systems Symposium (RTSS 1989), pages 166-171.",
                "IEEE Computer Society Press, 1989. [10] J. Loyall, J. Gossett, C. Gill, R. Schantz, J. Zinky, P. Pal, R. Shapiro, C. Rodrigues, M. Atighetchi, and D. Karr.",
                "Comparing and Contrasting Adaptive Middleware Support in Wide-Area and Embedded Distributed Object Applications.",
                "In Proceedings of the 21st International Conference on Distributed Computing Systems (ICDCS-21), pages 625-634.",
                "IEEE, Apr. 2001. [11] C. Lu, J.",
                "A. Stankovic, G. Tao, and S. H. Son.",
                "Feedback Control Real-Time Scheduling: Framework, Modeling, and Algorithms.",
                "Real-Time Systems Journal, 23(1/2):85-126, July 2002. [12] Object Management Group.",
                "Real-time CORBA Specification, OMG Document formal/02-08-02 edition, Aug. 2002. [13] D. C. Schmidt, D. L. Levine, and S. Mungee.",
                "The Design and Performance of Real-Time Object Request Brokers.",
                "Computer Communications, 21(4):294-324, Apr. 1998. [14] Thomas Sikora.",
                "Trends and Perspectives in Image and Video Coding.",
                "In Proceedings of the IEEE, Jan. 2005. [15] X. Wang, H.-M. Huang, V. Subramonian, C. Lu, and C. Gill.",
                "CAMRIT: Control-based Adaptive Middleware for Real-time Image Transmission.",
                "In Proc. of the 10th IEEE Real-Time and Embedded Tech. and Applications Symp. (RTAS), Toronto, Canada, May 2004.",
                "Article 7"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [],
            "translated_text": "",
            "candidates": [],
            "error": [
                []
            ]
        },
        "end-to-end quality of service": {
            "translated_key": "calidad de servicio (QoS) de extremo a extremo",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Evaluating Adaptive Resource Management for Distributed Real-Time Embedded Systems Nishanth Shankaran, ∗ Xenofon Koutsoukos, Douglas C. Schmidt, and Aniruddha Gokhale Dept.",
                "of EECS, Vanderbilt University, Nashville ABSTRACT A challenging problem faced by researchers and developers of distributed real-time and embedded (DRE) systems is devising and implementing effective adaptive resource management strategies that can meet <br>end-to-end quality of service</br> (QoS) requirements in varying operational conditions.",
                "This paper presents two contributions to research in adaptive resource management for DRE systems.",
                "First, we describe the structure and functionality of the Hybrid Adaptive Resourcemanagement Middleware (HyARM), which provides adaptive resource management using hybrid control techniques for adapting to workload fluctuations and resource availability.",
                "Second, we evaluate the adaptive behavior of HyARM via experiments on a DRE multimedia system that distributes video in real-time.",
                "Our results indicate that HyARM yields predictable, stable, and high system performance, even in the face of fluctuating workload and resource availability.",
                "Categories and Subject Descriptors C.2.4 [Distributed Systems]: Distributed Applications; D.4.7 [Organization and Design]: Real-time Systems and Embedded Systems 1.",
                "INTRODUCTION Achieving end-to-end real-time quality of service (QoS) is particularly important for open distributed real-time and embedded (DRE) systems that face resource constraints, such as limited computing power and network bandwidth.",
                "Overutilization of these system resources can yield unpredictable and unstable behavior, whereas under-utilization can yield excessive system cost.",
                "A promising approach to meeting these end-to-end QoS requirements effectively, therefore, is to develop and apply adaptive middleware [10, 15], which is software whose functional and QoS-related properties can be modified either statically or dynamically.",
                "Static modifications are carried out to reduce footprint, leverage capabilities that exist in specific platforms, enable functional subsetting, and/or minimize hardware/software infrastructure dependencies.",
                "Objectives of dynamic modifications include optimizing system responses to changing environments or requirements, such as changing component interconnections, power-levels, CPU and network bandwidth availability, latency/jitter, and workload.",
                "In open DRE systems, adaptive middleware must make such modifications dependably, i.e., while meeting stringent end-to-end QoS requirements, which requires the specification and enforcement of upper and lower bounds on system resource utilization to ensure effective use of system resources.",
                "To meet these requirements, we have developed the Hybrid Adaptive Resource-management Middleware (HyARM), which is an open-source1 distributed resource management middleware.",
                "HyARM is based on hybrid control theoretic techniques [8], which provide a theoretical framework for designing control of complex system with both continuous and discrete dynamics.",
                "In our case study, which involves a distributed real-time video distribution system, the task of adaptive resource management is to control the utilization of the different resources, whose utilizations are described by continuous variables.",
                "We achieve this by adapting the resolution of the transmitted video, which is modeled as a continuous variable, and by changing the frame-rate and the compression, which are modeled by discrete actions.",
                "We have implemented HyARM atop The ACE ORB (TAO) [13], which is an implementation of the Real-time CORBA specification [12].",
                "Our results show that (1) HyARM ensures effective system resource utilization and (2) end-to-end QoS requirements of higher priority applications are met, even in the face of fluctuations in workload.",
                "The remainder of the paper is organized as follows: Section 2 describes the architecture, functionality, and resource utilization model of our DRE multimedia system case study; Section 3 explains the structure and functionality of HyARM; Section 4 evaluates the adaptive behavior of HyARM via experiments on our multimedia system case study; Section 5 compares our research on HyARM with related work; and Section 6 presents concluding remarks. 1 The code and examples for HyARM are available at www. dre.vanderbilt.edu/∼nshankar/HyARM/.",
                "Article 7 2.",
                "CASE STUDY: DRE MULTIMEDIA SYSTEM This section describes the architecture and QoS requirements of our DRE multimedia system. 2.1 Multimedia System Architecture Wireless Link Wireless Link Wireless Link ` ` ` Physical Link Physical Link Physical Link Base Station End Receiver End Receiver End Receiver` Physical Link End Receiver UAV Camera Video Encoder Camera Video Encoder Camera Video Encoder UAV Camera Video Encoder Camera Video Encoder Camera Video Encoder UAV Camera Video Encoder Camera Video Encoder Camera Video Encoder Figure 1: DRE Multimedia System Architecture The architecture for our DRE multimedia system is shown in Figure 1 and consists of the following entities: (1)Data source (video capture by UAV), where video is captured (related to subject of interest) by camera(s) on each UAV, followed by encoding of raw video using a specific encoding scheme and transmitting the video to the next stage in the pipeline. (2)Data distributor (base station), where the video is processed to remove noise, followed by retransmission of the processed video to the next stage in the pipeline. (3) Sinks (command and control center), where the received video is again processed to remove noise, then decoded and finally rendered to end user via graphical displays.",
                "Significant improvements in video encoding/decoding and (de)compression techniques have been made as a result of recent advances in video encoding and compression techniques [14].",
                "Common video compression schemes are MPEG1, MPEG-2, Real Video, and MPEG-4.",
                "Each compression scheme is characterized by its resource requirement, e.g., the computational power to (de)compress the video signal and the network bandwidth required to transmit the compressed video signal.",
                "Properties of the compressed video, such as resolution and frame-rate determine both the quality and the resource requirements of the video.",
                "Our multimedia system case study has the following endto-end real-time QoS requirements: (1) latency, (2) interframe delay (also know as jitter), (3) frame rate, and (4) picture resolution.",
                "These QoS requirements can be classified as being either hard or soft.",
                "Hard QoS requirements should be met by the underlying system at all times, whereas soft QoS requirements can be missed occasionally.2 For our case study, we treat QoS requirements such as latency and jitter as harder QoS requirements and strive to meet these requirements at all times.",
                "In contrast, we treat QoS requirements such as video frame rate and picture resolution as softer QoS requirements and modify these video properties adaptively to handle dynamic changes in resource availabil2 Although hard and soft are often portrayed as two discrete requirement sets, in practice they are usually two ends of a continuum ranging from softer to harder rather than two disjoint points. ity effectively. 2.2 DRE Multimedia System Rresources There are two primary types of resources in our DRE multimedia system: (1) processors that provide computational power available at the UAVs, base stations, and end receivers and (2) network links that provide communication bandwidth between UAVs, base stations, and end receivers.",
                "The computing power required by the video capture and encoding tasks depends on dynamic factors, such as speed of the UAV, speed of the subject (if the subject is mobile), and distance between UAV and the subject.",
                "The wireless network bandwidth available to transmit video captured by UAVs to base stations also depends on the wireless connectivity between the UAVs and the base station, which in-turn depend on dynamic factors such as the speed of the UAVs and the relative distance between UAVs and base stations.",
                "The bandwidth of the link between the base station and the end receiver is limited, but more stable than the bandwidth of the wireless network.",
                "Resource requirements and availability of resources are subjected to dynamic changes.",
                "Two classes of applications - QoS-enabled and best-effort - use the multimedia system infrastructure described above to transmit video to their respective receivers.",
                "QoS-enabled class of applications have higher priority over best-effort class of application.",
                "In our study, emergency response applications belong to QoS-enabled and surveillance applications belong to best-effort class.",
                "For example, since a stream from an emergency response application is of higher importance than a video stream from a surveillance application, it receives more resources end-to-end.",
                "Since resource availability significantly affects QoS, we use current resource utilization as the primary indicator of system performance.",
                "We refer to the current level of system resource utilization as the system condition.",
                "Based on this definition, we can classify system conditions as being either under, over, or effectively utilized.",
                "Under-utilization of system resources occurs when the current resource utilization is lower than the desired lower bound on resource utilization.",
                "In this system condition, residual system resources (i.e., network bandwidth and computational power) are available in large amounts after meeting end-to-end QoS requirements of applications.",
                "These residual resources can be used to increase the QoS of the applications.",
                "For example, residual CPU and network bandwidth can be used to deliver better quality video (e.g., with greater resolution and higher frame rate) to end receivers.",
                "Over-utilization of system resources occurs when the current resource utilization is higher than the desired upper bound on resource utilization.",
                "This condition can arise from loss of resources - network bandwidth and/or computing power at base station, end receiver or at UAV - or may be due to an increase in resource demands by applications.",
                "Over-utilization is generally undesirable since the quality of the received video (such as resolution and frame rate) and timeliness properties (such as latency and jitter) are degraded and may result in an unstable (and thus ineffective) system.",
                "Effective resource utilization is the desired system condition since it ensures that end-to-end QoS requirements of the UAV-based multimedia system are met and utilization of both system resources, i.e., network bandwidth and computational power, are within their desired utilization bounds.",
                "Article 7 Section 3 describes techniques we applied to achieve effective utilization, even in the face of fluctuating resource availability and/or demand. 3.",
                "OVERVIEW OF HYARM This section describes the architecture of the Hybrid Adaptive Resource-management Middleware (HyARM).",
                "HyARM ensures efficient and predictable system performance by providing adaptive resource management, including monitoring of system resources and enforcing bounds on application resource utilization. 3.1 HyARM Structure and Functionality Resource Utilization Legend Resource Allocation Application Parameters Figure 2: HyARM Architecture HyARM is composed of three types of entities shown in Figure 2 and described below: Resource monitors observe the overall resource utilization for each type of resource and resource utilization per application.",
                "In our multimedia system, there are resource monitors for CPU utilization and network bandwidth.",
                "CPU monitors observe the CPU resource utilization of UAVs, base station, and end receivers.",
                "Network bandwidth monitors observe the network resource utilization of (1) wireless network link between UAVs and the base station and (2) wired network link between the base station and end receivers.",
                "The central controller maintains the system resource utilization below a desired bound by (1) processing periodic updates it receives from resource monitors and (2) modifying the execution of applications accordingly, e.g., by using different execution algorithms or operating the application with increased/decreased QoS.",
                "This adaptation process ensures that system resources are utilized efficiently and end-to-end application QoS requirements are met.",
                "In our multimedia system, the HyARM controller determines the value of application parameters such as (1) video compression schemes, such as Real Video and MPEG-4, and/or (2) frame rate, and (3) picture resolution.",
                "From the perspective of hybrid control theoretic techniques [8], the different video compression schemes and frame rate form the discrete variables of application execution and picture resolution forms the continuous variables.",
                "Application adapters modify application execution according to parameters recommended by the controller and ensures that the operation of the application is in accordance with the recommended parameters.",
                "In the current mplementation of HyARM, the application adapter modifies the input parameters to the application that affect application QoS and resource utilization - compression scheme, frame rate, and picture resolution.",
                "In our future implementations, we plan to use resource reservation mechanisms such as Differentiated Service [7, 3] and Class-based Kernel Resource Management [4] to provision/reserve network and CPU resources.",
                "In our multimedia system, the application adapter ensures that the video is encoded at the recommended frame rate and resolution using the specified compression scheme. 3.2 Applying HyARM to the Multimedia System Case Study HyARM is built atop TAO [13], a widely used open-source implementation of Real-time CORBA [12].",
                "HyARM can be applied to ensure efficient, predictable and adaptive resource management of any DRE system where resource availability and requirements are subject to dynamic change.",
                "Figure 3 shows the interaction of various parts of the DRE multimedia system developed with HyARM, TAO, and TAOs A/V Streaming Service.",
                "TAOs A/V Streaming service is an implementation of the CORBA A/V Streaming Service specification.",
                "TAOs A/V Streaming Service is a QoS-enabled video distribution service that can transfer video in real-time to one or more receivers.",
                "We use the A/V Streaming Service to transmit the video from the UAVs to the end receivers via the base station.",
                "Three entities of Receiver UAV TAO Resource Utilization HyARM Central Controller A/V Streaming Service : Sender MPEG1 MPEG4 Real Video HyARM Resource Monitor A/V Streaming Service : Receiver Compressed Video Compressed Video Application HyARM Application Adapter Remote Object Call Control Inputs Resource Utilization Resource Utilization / Control Inputs Control Inputs Legend Figure 3: Developing the DRE Multimedia System with HyARM HyARM, namely the resource monitors, central controller, and application adapters are built as CORBA servants, so they can be distributed throughout a DRE system.",
                "Resource monitors are remote CORBA objects that update the central controller periodically with the current resource utilization.",
                "Application adapters are collocated with applications since the two interact closely.",
                "As shown in Figure 3, UAVs compress the data using various compression schemes, such as MPEG1, MPEG4, and Real Video, and uses TAOs A/V streaming service to transmit the video to end receivers.",
                "HyARMs resource monitors continuously observe the system resource utilization and notify the central controller with the current utilization. 3 The interaction between the controller and the resource monitors uses the Observer pattern [5].",
                "When the controller receives resource utilization updates from monitors, it computes the necessary modifications to application(s) parameters and notifies application adapter(s) via a remote operation call.",
                "Application adapter(s), that are collocated with the application, modify the input parameters to the application - in our case video encoder - to modify the application resource utilization and QoS. 3 The base station is not included in the figure since it only retransmits the video received from UAVs to end receivers.",
                "Article 7 4.",
                "PERFORMANCE RESULTS AND ANALYSIS This section first describes the testbed that provides the infrastructure for our DRE multimedia system, which was used to evaluate the performance of HyARM.",
                "We then describe our experiments and analyze the results obtained to empirically evaluate how HyARM behaves during underand over-utilization of system resources. 4.1 Overview of the Hardware and Software Testbed Our experiments were performed on the Emulab testbed at University of Utah.",
                "The hardware configuration consists of two nodes acting as UAVs, one acting as base station, and one as end receiver.",
                "Video from the two UAVs were transmitted to a base station via a LAN configured with the following properties: average packet loss ratio of 0.3 and bandwidth 1 Mbps.",
                "The network bandwidth was chosen to be 1 Mbps since each UAV in the DRE multimedia system is allocated 250 Kbps.",
                "These parameters were chosen to emulate an unreliable wireless network with limited bandwidth between the UAVs and the base station.",
                "From the base station, the video was retransmitted to the end receiver via a reliable wireline link of 10 Mbps bandwidth with no packet loss.",
                "The hardware configuration of all the nodes was chosen as follows: 600 MHz Intel Pentium III processor, 256 MB physical memory, 4 Intel EtherExpress Pro 10/100 Mbps Ethernet ports, and 13 GB hard drive.",
                "A real-time version of Linux - TimeSys Linux/NET 3.1.214 based on RedHat Linux 9was used as the operating system for all nodes.",
                "The following software packages were also used for our experiments: (1) Ffmpeg 0.4.9-pre1, which is an open-source library (http: //www.ffmpeg.sourceforge.net/download.php) that compresses video into MPEG-2, MPEG-4, Real Video, and many other video formats. (2) Iftop 0.16, which is an opensource library (http://www.ex-parrot.com/∼pdw/iftop/) we used for monitoring network activity and bandwidth utilization. (3) ACE 5.4.3 + TAO 1.4.3, which is an opensource (http://www.dre.vanderbilt.edu/TAO) implementation of the Real-time CORBA [12] specification upon which HyARM is built.",
                "TAO provides the CORBA Audio/Video (A/V) Streaming Service that we use to transmit the video from the UAVs to end receivers via the base station. 4.2 Experiment Configuration Our experiment consisted of two (emulated) UAVs that simultaneously send video to the base station using the experimentation setup described in Section 4.1.",
                "At the base station, video was retransmitted to the end receivers (without any modifications), where it was stored to a file.",
                "Each UAV hosted two applications, one QoS-enabled application (emergency response), and one best-effort application (surveillance).",
                "Within each UAV, computational power is shared between the applications, while the network bandwidth is shared among all applications.",
                "To evaluate the QoS provided by HyARM, we monitored CPU utilization at the two UAVs, and network bandwidth utilization between the UAV and the base station.",
                "CPU resource utilization was not monitored at the base station and the end receiver since they performed no computationallyintensive operations.",
                "The resource utilization of the 10 Mpbs physical link between the base station and the end receiver does not affect QoS of applications and is not monitored by HyARM since it is nearly 10 times the 1 MB bandwidth of the LAN between the UAVs and the base station.",
                "The experiment also monitors properties of the video that affect the QoS of the applications, such as latency, jitter, frame rate, and resolution.",
                "The set point on resource utilization for each resource was specified at 0.69, which is the upper bound typically recommended by scheduling techniques, such as rate monotonic algorithm [9].",
                "Since studies [6] have shown that human eyes can perceive delays more than 200ms, we use this as the upper bound on jitter of the received video.",
                "QoS requirements for each class of application is specified during system initialization and is shown in Table 1. 4.3 Empirical Results and Analysis This section presents the results obtained from running the experiment described in Section 4.2 on our DRE multimedia system testbed.",
                "We used system resource utilization as a metric to evaluate the adaptive resource management capabilities of HyARM under varying input work loads.",
                "We also used application QoS as a metric to evaluate HyARMs capabilities to support end-to-end QoS requirements of the various classes of applications in the DRE multimedia system.",
                "We analyze these results to explain the significant differences in system performance and application QoS.",
                "Comparison of system performance is decomposed into comparison of resource utilization and application QoS.",
                "For system resource utilization, we compare (1) network bandwidth utilization of the local area network and (2) CPU utilization at the two UAV nodes.",
                "For application QoS, we compare mean values of video parameters, including (1) picture resolution, (2) frame rate, (3) latency, and (4) jitter.",
                "Comparison of resource utilization.",
                "Over-utilization of system resources in DRE systems can yield an unstable system.",
                "In contrast, under-utilization of system resources increases system cost.",
                "Figure 4 and Figure 5 compare the system resource utilization with and without HyARM.",
                "Figure 4 shows that HyARM maintains system utilization close to the desired utilization set point during fluctuation in input work load by transmitting video of higher (or lower) QoS for QoS-enabled (or best-effort) class of applications during over (or under) utilization of system resources.",
                "Figure 5 shows that without HyARM, network utilization was as high as 0.9 during increase in workload conditions, which is greater than the utilization set point of 0.7 by 0.2.",
                "As a result of over-utilization of resources, QoS of the received video, such as average latency and jitter, was affected significantly.",
                "Without HyARM, system resources were either under-utilized or over-utilized, both of which are undesirable.",
                "In contrast, with HyARM, system resource utilization is always close to the desired set point, even during fluctuations in application workload.",
                "During sudden fluctuation in application workload, system conditions may be temporarily undesirable, but are restored to the desired condition within several sampling periods.",
                "Temporary over-utilization of resources is permissible in our multimedia system since the quality of the video may be degraded for a short period of time, though application QoS will be degraded significantly if poor quality video is transmitted for a longer period of time.",
                "Comparison of application QoS.",
                "Figures 6, Figure 7, and Table 2 compare latency, jitter, resolution, and frameArticle 7 Class Resolution Frame Rate Latency (msec ) Jitter (msec) QoS Enabled 1024 x 768 25 200 200 Best-effort 320 x 240 15 300 250 Table 1: Application QoS Requirements Figure 4: Resource utilization with HyARM Figure 5: Resource utilization without HyARM rate of the received video, respectively.",
                "Table 2 shows that HyARM increases the resolution and frame video of QoSenabled applications, but decreases the resolution and frame rate of best effort applications.",
                "During over utilization of system resources, resolution and frame rate of lower priority applications are reduced to adapt to fluctuations in application workload and to maintain the utilization of resources at the specified set point.",
                "It can be seen from Figure 6 and Figure 7 that HyARM reduces the latency and jitter of the received video significantly.",
                "These figures show that the QoS of QoS-enabled applications is greatly improved by HyARM.",
                "Although application parameters, such as frame rate and resolutions, which affect the soft QoS requirements of best-effort applications may be compromised, the hard QoS requirements, such as latency and jitter, of all applications are met.",
                "HyARM responds to fluctuation in resource availability and/or demand by constant monitoring of resource utilization.",
                "As shown in Figure 4, when resources utilization increases above the desired set point, HyARM lowers the utilization by reducing the QoS of best-effort applications.",
                "This adaptation ensures that enough resources are available for QoS-enabled applications to meet their QoS needs.",
                "Figures 6 and 7 show that the values of latency and jitter of the received video of the system with HyARM are nearly half of the corresponding value of the system without HyARM.",
                "With HyARM, values of these parameters are well below the specified bounds, whereas without HyARM, these value are significantly above the specified bounds due to overutilization of the network bandwidth, which leads to network congestion and results in packet loss.",
                "HyARM avoids this by reducing video parameters such as resolution, frame-rate, and/or modifying the compression scheme used to compress the video.",
                "Our conclusions from analyzing the results described above are that applying adaptive middleware via hybrid control to DRE system helps to (1) improve application QoS, (2) increase system resource utilization, and (3) provide better predictability (lower latency and inter-frame delay) to QoSenabled applications.",
                "These improvements are achieved largely due to monitoring of system resource utilization, efficient system workload management, and adaptive resource provisioning by means of HyARMs network/CPU resource monitors, application adapter, and central controller, respectively. 5.",
                "RELATED WORK A number of control theoretic approaches have been applied to DRE systems recently.",
                "These techniques aid in overcoming limitations with traditional scheduling approaches that handle dynamic changes in resource availability poorly and result in a rigidly scheduled system that adapts poorly to change.",
                "A survey of these techniques is presented in [1].",
                "One such approach is feedback control scheduling (FCS) [2, 11].",
                "FCS algorithms dynamically adjust resource allocation by means of software feedback control loops.",
                "FCS algorithms are modeled and designed using rigorous controltheoretic methodologies.",
                "These algorithms provide robust and analytical performance assurances despite uncertainties in resource availability and/or demand.",
                "Although existing FCS algorithms have shown promise, these algorithms often assume that the system has continuous control variable(s) that can continuously be adjusted.",
                "While this assumption holds for certain classes of systems, there are many classes of DRE systems, such as avionics and total-ship computing environments that only support a finite a priori set of discrete configurations.",
                "The control variables in such systems are therefore intrinsically discrete.",
                "HyARM handles both continuous control variables, such as picture resolution, and discrete control variable, such as discrete set of frame rates.",
                "HyARM can therefore be applied to system that support continuous and/or discrete set of control variables.",
                "The DRE multimedia system as described in Section 2 is an example DRE system that offers both continuous (picture resolution) and discrete set (frame-rate) of control variables.",
                "These variables are modified by HyARM to achieve efficient resource utilization and improved application QoS. 6.",
                "CONCLUDING REMARKS Article 7 Figure 6: Comparison of Video Latency Figure 7: Comparison of Video Jitter Source Picture Size / Frame Rate With HyARM Without HyARM UAV1 QoS Enabled Application 1122 X 1496 / 25 960 X 720 / 20 UAV1 Best-effort Application 288 X 384 / 15 640 X 480 / 20 UAV2 QoS Enabled Application 1126 X 1496 / 25 960 X 720 / 20 UAV2 Best-effort Application 288 X 384 / 15 640 X 480 / 20 Table 2: Comparison of Video Quality Many distributed real-time and embedded (DRE) systems demand <br>end-to-end quality of service</br> (QoS) enforcement from their underlying platforms to operate correctly.",
                "These systems increasingly run in open environments, where resource availability is subject to dynamic change.",
                "To meet end-to-end QoS in dynamic environments, DRE systems can benefit from an adaptive middleware that monitors system resources, performs efficient application workload management, and enables efficient resource provisioning for executing applications.",
                "This paper described HyARM, an adaptive middleware, that provides effective resource management to DRE systems.",
                "HyARM employs hybrid control techniques to provide the adaptive middleware capabilities, such as resource monitoring and application adaptation that are key to providing the dynamic resource management capabilities for open DRE systems.",
                "We employed HyARM to a representative DRE multimedia system that is implemented using Real-time CORBA and CORBA A/V Streaming Service.",
                "We evaluated the performance of HyARM in a system composed of three distributed resources and two classes of applications with two applications each.",
                "Our empirical results indicate that HyARM ensures (1) efficient resource utilization by maintaining the resource utilization of system resources within the specified utilization bounds, (2) QoS requirements of QoS-enabled applications are met at all times.",
                "Overall, HyARM ensures efficient, predictable, and adaptive resource management for DRE systems. 7.",
                "REFERENCES [1] T. F. Abdelzaher, J. Stankovic, C. Lu, R. Zhang, and Y. Lu.",
                "Feddback Performance Control in Software Services.",
                "IEEE: Control Systems, 23(3), June 2003. [2] L. Abeni, L. Palopoli, G. Lipari, and J. Walpole.",
                "Analysis of a reservation-based feedback scheduler.",
                "In IEEE Real-Time Systems Symposium, Dec. 2002. [3] S. Blake, D. Black, M. Carlson, E. Davies, Z. Wang, and W. Weiss.",
                "An architecture for differentiated services.",
                "Network Information Center RFC 2475, Dec. 1998. [4] H. Franke, S. Nagar, C. Seetharaman, and V. Kashyap.",
                "Enabling Autonomic Workload Management in Linux.",
                "In Proceedings of the International Conference on Autonomic Computing (ICAC), New York, New York, May 2004.",
                "IEEE. [5] E. Gamma, R. Helm, R. Johnson, and J. Vlissides.",
                "Design Patterns: Elements of Reusable Object-Oriented Software.",
                "Addison-Wesley, Reading, MA, 1995. [6] G. Ghinea and J. P. Thomas.",
                "Qos impact on user perception and understanding of multimedia video clips.",
                "In MULTIMEDIA 98: Proceedings of the sixth ACM international conference on Multimedia, pages 49-54, Bristol, United Kingdom, 1998.",
                "ACM Press. [7] Internet Engineering Task Force.",
                "Differentiated Services Working Group (diffserv) Charter. www.ietf.org/html.charters/diffserv-charter.html, 2000. [8] X. Koutsoukos, R. Tekumalla, B. Natarajan, and C. Lu.",
                "Hybrid Supervisory Control of Real-Time Systems.",
                "In 11th IEEE Real-Time and Embedded Technology and Applications Symposium, San Francisco, California, Mar. 2005. [9] J. Lehoczky, L. Sha, and Y. Ding.",
                "The Rate Monotonic Scheduling Algorithm: Exact Characterization and Average Case Behavior.",
                "In Proceedings of the 10th IEEE Real-Time Systems Symposium (RTSS 1989), pages 166-171.",
                "IEEE Computer Society Press, 1989. [10] J. Loyall, J. Gossett, C. Gill, R. Schantz, J. Zinky, P. Pal, R. Shapiro, C. Rodrigues, M. Atighetchi, and D. Karr.",
                "Comparing and Contrasting Adaptive Middleware Support in Wide-Area and Embedded Distributed Object Applications.",
                "In Proceedings of the 21st International Conference on Distributed Computing Systems (ICDCS-21), pages 625-634.",
                "IEEE, Apr. 2001. [11] C. Lu, J.",
                "A. Stankovic, G. Tao, and S. H. Son.",
                "Feedback Control Real-Time Scheduling: Framework, Modeling, and Algorithms.",
                "Real-Time Systems Journal, 23(1/2):85-126, July 2002. [12] Object Management Group.",
                "Real-time CORBA Specification, OMG Document formal/02-08-02 edition, Aug. 2002. [13] D. C. Schmidt, D. L. Levine, and S. Mungee.",
                "The Design and Performance of Real-Time Object Request Brokers.",
                "Computer Communications, 21(4):294-324, Apr. 1998. [14] Thomas Sikora.",
                "Trends and Perspectives in Image and Video Coding.",
                "In Proceedings of the IEEE, Jan. 2005. [15] X. Wang, H.-M. Huang, V. Subramonian, C. Lu, and C. Gill.",
                "CAMRIT: Control-based Adaptive Middleware for Real-time Image Transmission.",
                "In Proc. of the 10th IEEE Real-Time and Embedded Tech. and Applications Symp. (RTAS), Toronto, Canada, May 2004.",
                "Article 7"
            ],
            "original_annotated_samples": [
                "of EECS, Vanderbilt University, Nashville ABSTRACT A challenging problem faced by researchers and developers of distributed real-time and embedded (DRE) systems is devising and implementing effective adaptive resource management strategies that can meet <br>end-to-end quality of service</br> (QoS) requirements in varying operational conditions.",
                "CONCLUDING REMARKS Article 7 Figure 6: Comparison of Video Latency Figure 7: Comparison of Video Jitter Source Picture Size / Frame Rate With HyARM Without HyARM UAV1 QoS Enabled Application 1122 X 1496 / 25 960 X 720 / 20 UAV1 Best-effort Application 288 X 384 / 15 640 X 480 / 20 UAV2 QoS Enabled Application 1126 X 1496 / 25 960 X 720 / 20 UAV2 Best-effort Application 288 X 384 / 15 640 X 480 / 20 Table 2: Comparison of Video Quality Many distributed real-time and embedded (DRE) systems demand <br>end-to-end quality of service</br> (QoS) enforcement from their underlying platforms to operate correctly."
            ],
            "translated_annotated_samples": [
                "de EECS, Universidad de Vanderbilt, Nashville RESUMEN Un problema desafiante enfrentado por investigadores y desarrolladores de sistemas distribuidos en tiempo real y embebidos (DRE) es idear e implementar estrategias efectivas de gestión adaptativa de recursos que puedan cumplir con los requisitos de <br>calidad de servicio (QoS) de extremo a extremo</br> en condiciones operativas variables.",
                "CONCLUSIONES Artículo 7 Figura 6: Comparación de la latencia del video Figura 7: Comparación de la fluctuación del video Fuente Tamaño de imagen / Velocidad de cuadro Con HyARM Sin HyARM UAV1 Aplicación habilitada para QoS 1122 X 1496 / 25 960 X 720 / 20 UAV1 Aplicación de mejor esfuerzo 288 X 384 / 15 640 X 480 / 20 UAV2 Aplicación habilitada para QoS 1126 X 1496 / 25 960 X 720 / 20 UAV2 Aplicación de mejor esfuerzo 288 X 384 / 15 640 X 480 / 20 Tabla 2: Comparación de la calidad del video Muchos sistemas distribuidos en tiempo real y embebidos (DRE) demandan la aplicación correcta de la <br>calidad de servicio (QoS) de extremo a extremo</br> desde sus plataformas subyacentes para operar correctamente."
            ],
            "translated_text": "Evaluando la Gestión de Recursos Adaptativa para Sistemas Empotrados Distribuidos en Tiempo Real de Nishanth Shankaran, Xenofon Koutsoukos, Douglas C. Schmidt y Aniruddha Gokhale, Dept. de EECS, Universidad de Vanderbilt, Nashville RESUMEN Un problema desafiante enfrentado por investigadores y desarrolladores de sistemas distribuidos en tiempo real y embebidos (DRE) es idear e implementar estrategias efectivas de gestión adaptativa de recursos que puedan cumplir con los requisitos de <br>calidad de servicio (QoS) de extremo a extremo</br> en condiciones operativas variables. Este artículo presenta dos contribuciones a la investigación en gestión de recursos adaptativa para sistemas DRE. Primero, describimos la estructura y funcionalidad del Middleware de Gestión de Recursos Adaptativos Híbridos (HyARM), que proporciona gestión de recursos adaptativa utilizando técnicas de control híbridas para adaptarse a las fluctuaciones de carga de trabajo y disponibilidad de recursos. Segundo, evaluamos el comportamiento adaptativo de HyARM a través de experimentos en un sistema multimedia DRE que distribuye video en tiempo real. Nuestros resultados indican que HyARM produce un rendimiento del sistema predecible, estable y alto, incluso ante cargas de trabajo y disponibilidad de recursos fluctuantes. Categorías y Descriptores de Asignaturas C.2.4 [Sistemas Distribuidos]: Aplicaciones Distribuidas; D.4.7 [Organización y Diseño]: Sistemas en Tiempo Real y Sistemas Embebidos 1. INTRODUCCIÓN Lograr la calidad de servicio (QoS) en tiempo real de extremo a extremo es particularmente importante para sistemas distribuidos en tiempo real y embebidos (DRE) abiertos que enfrentan limitaciones de recursos, como potencia de cómputo limitada y ancho de banda de red. La sobreutilización de estos recursos del sistema puede generar un comportamiento impredecible e inestable, mientras que la subutilización puede resultar en un costo excesivo del sistema. Un enfoque prometedor para cumplir de manera efectiva con estos requisitos de calidad de servicio de extremo a extremo, por lo tanto, es desarrollar y aplicar middleware adaptativo [10, 15], que es un software cuyas propiedades funcionales y relacionadas con la calidad de servicio pueden ser modificadas estática o dinámicamente. Las modificaciones estáticas se realizan para reducir la huella, aprovechar las capacidades existentes en plataformas específicas, habilitar la selección funcional y/o minimizar las dependencias de infraestructura de hardware/software. Los objetivos de las modificaciones dinámicas incluyen optimizar las respuestas del sistema a entornos o requisitos cambiantes, como la modificación de interconexiones de componentes, niveles de potencia, disponibilidad de ancho de banda de CPU y red, latencia/jitter y carga de trabajo. En los sistemas DRE abiertos, el middleware adaptativo debe realizar modificaciones de manera confiable, es decir, cumpliendo con los estrictos requisitos de calidad de servicio de extremo a extremo, lo que requiere la especificación y aplicación de límites superiores e inferiores en la utilización de recursos del sistema para garantizar un uso efectivo de los recursos del sistema. Para cumplir con estos requisitos, hemos desarrollado el Middleware de Gestión de Recursos Híbrido Adaptativo (HyARM), que es un middleware de gestión de recursos distribuido de código abierto. HyARM se basa en técnicas híbridas de control teórico, las cuales proporcionan un marco teórico para diseñar el control de sistemas complejos con dinámicas tanto continuas como discretas. En nuestro estudio de caso, que implica un sistema distribuido de distribución de video en tiempo real, la tarea de gestión de recursos adaptativa consiste en controlar la utilización de los diferentes recursos, cuyas utilizaciones están descritas por variables continuas. Logramos esto adaptando la resolución del video transmitido, que se modela como una variable continua, y cambiando la velocidad de cuadros y la compresión, que se modelan mediante acciones discretas. Hemos implementado HyARM sobre el ORB ACE (TAO) [13], que es una implementación de la especificación CORBA en tiempo real [12]. Nuestros resultados muestran que (1) HyARM garantiza una utilización efectiva de los recursos del sistema y (2) se cumplen los requisitos de calidad de servicio de extremo a extremo de las aplicaciones de mayor prioridad, incluso ante fluctuaciones en la carga de trabajo. El resto del documento está organizado de la siguiente manera: la Sección 2 describe la arquitectura, funcionalidad y modelo de utilización de recursos de nuestro estudio de caso del sistema multimedia DRE; la Sección 3 explica la estructura y funcionalidad de HyARM; la Sección 4 evalúa el comportamiento adaptativo de HyARM a través de experimentos en nuestro estudio de caso del sistema multimedia; la Sección 5 compara nuestra investigación sobre HyARM con trabajos relacionados; y la Sección 6 presenta observaciones finales. El código y ejemplos de HyARM están disponibles en www.dre.vanderbilt.edu/∼nshankar/HyARM/. Artículo 7 2. ESTUDIO DE CASO: SISTEMA MULTIMEDIA DRE Esta sección describe la arquitectura y los requisitos de QoS de nuestro sistema multimedia DRE. 2.1 Arquitectura del Sistema Multimedia Enlace Inalámbrico Enlace Inalámbrico Enlace Inalámbrico ` ` ` Enlace Físico Enlace Físico Enlace Físico Estación Base Extremo Receptor Extremo Receptor Extremo Receptor` Enlace Físico Extremo Receptor Cámara UAV Codificador de Video Cámara Codificador de Video Cámara Codificador de Video Cámara UAV Codificador de Video Cámara Codificador de Video Cámara Codificador de Video Cámara UAV Codificador de Video Cámara Codificador de Video Cámara Codificador de Video Figura 1: Arquitectura del Sistema Multimedia DRE La arquitectura de nuestro sistema multimedia DRE se muestra en la Figura 1 y consta de las siguientes entidades: (1) Fuente de datos (captura de video por UAV), donde el video es capturado (relacionado con el tema de interés) por la(s) cámara(s) en cada UAV, seguido por la codificación del video crudo utilizando un esquema de codificación específico y transmitiendo el video a la siguiente etapa en la cadena de procesamiento. (2) Distribuidor de datos (estación base), donde el video es procesado para eliminar ruido, seguido por la retransmisión del video procesado a la siguiente etapa en la cadena de procesamiento. (3) Destinos (centro de comando y control), donde el video recibido es nuevamente procesado para eliminar ruido, luego decodificado y finalmente renderizado al usuario final a través de pantallas gráficas. Se han logrado mejoras significativas en las técnicas de codificación/decodificación y compresión (des) de video como resultado de los avances recientes en las técnicas de codificación y compresión de video [14]. Los esquemas comunes de compresión de video son MPEG1, MPEG-2, Real Video y MPEG-4. Cada esquema de compresión se caracteriza por sus requisitos de recursos, por ejemplo, la potencia computacional para (des)comprimir la señal de video y el ancho de banda de red necesario para transmitir la señal de video comprimida. Las propiedades del video comprimido, como la resolución y la velocidad de fotogramas, determinan tanto la calidad como los requisitos de recursos del video. Nuestro estudio de caso del sistema multimedia tiene los siguientes requisitos de calidad de servicio (QoS) en tiempo real de extremo a extremo: (1) latencia, (2) retardo entre cuadros (también conocido como jitter), (3) frecuencia de cuadros y (4) resolución de imagen. Estos requisitos de calidad de servicio (QoS) pueden clasificarse como duros o blandos. Los requisitos de QoS estrictos deben ser cumplidos por el sistema subyacente en todo momento, mientras que los requisitos de QoS flexibles pueden ser ocasionalmente incumplidos. Para nuestro estudio de caso, tratamos los requisitos de QoS como la latencia y la variabilidad de retardo como requisitos de QoS más estrictos y nos esforzamos por cumplir con estos requisitos en todo momento. Por el contrario, tratamos los requisitos de QoS como la tasa de cuadros de video y la resolución de imagen como requisitos de QoS más flexibles y modificamos estas propiedades de video de manera adaptativa para manejar los cambios dinámicos en la disponibilidad de recursos de manera efectiva. Aunque a menudo se presentan como dos conjuntos de requisitos discretos, en la práctica suelen ser dos extremos de un continuo que va desde más suave a más duro en lugar de dos puntos disjuntos. La potencia informática requerida por las tareas de captura y codificación de video depende de factores dinámicos, como la velocidad del UAV, la velocidad del sujeto (si el sujeto es móvil) y la distancia entre el UAV y el sujeto. La cantidad de ancho de banda de la red inalámbrica disponible para transmitir video capturado por UAVs a estaciones base también depende de la conectividad inalámbrica entre los UAVs y la estación base, que a su vez depende de factores dinámicos como la velocidad de los UAVs y la distancia relativa entre los UAVs y las estaciones base. El ancho de banda del enlace entre la estación base y el receptor final está limitado, pero es más estable que el ancho de banda de la red inalámbrica. Los requisitos de recursos y la disponibilidad de recursos están sujetos a cambios dinámicos. Dos clases de aplicaciones - habilitadas para QoS y de mejor esfuerzo - utilizan la infraestructura del sistema multimedia descrita anteriormente para transmitir video a sus respectivos receptores. Las aplicaciones de clase habilitada para QoS tienen mayor prioridad sobre las aplicaciones de clase de mejor esfuerzo. En nuestro estudio, las aplicaciones de respuesta de emergencia pertenecen a la clase habilitada para la calidad de servicio (QoS), y las aplicaciones de vigilancia pertenecen a la clase de mejor esfuerzo. Por ejemplo, dado que un flujo de datos de una aplicación de respuesta de emergencia es de mayor importancia que un flujo de video de una aplicación de vigilancia, recibe más recursos de extremo a extremo. Dado que la disponibilidad de recursos afecta significativamente la calidad de servicio, utilizamos la utilización actual de recursos como indicador principal del rendimiento del sistema. Nos referimos al nivel actual de utilización de recursos del sistema como la condición del sistema. Basándonos en esta definición, podemos clasificar las condiciones del sistema como estando subutilizadas, sobreutilizadas o utilizadas de manera efectiva. La subutilización de los recursos del sistema ocurre cuando la utilización actual de los recursos es menor que el límite inferior deseado de utilización de recursos. En este sistema, los recursos residuales del sistema (es decir, ancho de banda de red y potencia computacional) están disponibles en grandes cantidades después de cumplir con los requisitos de calidad de servicio de extremo a extremo de las aplicaciones. Estos recursos residuales se pueden utilizar para aumentar la calidad de servicio de las aplicaciones. Por ejemplo, la CPU residual y el ancho de banda de red pueden ser utilizados para entregar videos de mejor calidad (por ejemplo, con mayor resolución y mayor velocidad de cuadros) a los receptores finales. La sobreutilización de los recursos del sistema ocurre cuando la utilización actual de recursos es mayor que el límite superior deseado de utilización de recursos. Esta condición puede surgir por la pérdida de recursos - ancho de banda de red y/o potencia de cómputo en la estación base, receptor final o en el UAV - o puede ser debido a un aumento en las demandas de recursos por parte de las aplicaciones. La sobreutilización es generalmente indeseable ya que la calidad del video recibido (como la resolución y la velocidad de cuadros) y las propiedades de puntualidad (como la latencia y la fluctuación) se degradan y pueden resultar en un sistema inestable (y por lo tanto ineficaz). La utilización efectiva de recursos es la condición deseada del sistema, ya que garantiza que se cumplan los requisitos de calidad de servicio de extremo a extremo del sistema multimedia basado en UAV y que la utilización de los recursos del sistema, es decir, el ancho de banda de la red y la potencia computacional, se encuentren dentro de sus límites de utilización deseados. El artículo 7, sección 3 describe las técnicas que aplicamos para lograr una utilización efectiva, incluso ante la disponibilidad y/o demanda fluctuante de recursos. DESCRIPCIÓN DE HYARM Esta sección describe la arquitectura del Middleware de Gestión de Recursos Adaptativos Híbrido (HyARM). HyARM garantiza un rendimiento eficiente y predecible del sistema al proporcionar gestión adaptativa de recursos, que incluye la monitorización de los recursos del sistema y la imposición de límites en la utilización de recursos de las aplicaciones. 3.1 Estructura y Funcionalidad de HyARM Leyenda de Utilización de Recursos Asignación de Recursos Parámetros de Aplicación Figura 2: Arquitectura de HyARM HyARM está compuesto por tres tipos de entidades mostradas en la Figura 2 y descritas a continuación: Los monitores de recursos observan la utilización general de recursos para cada tipo de recurso y la utilización de recursos por aplicación. En nuestro sistema multimedia, hay monitores de recursos para la utilización de la CPU y el ancho de banda de la red. Los monitores de la CPU observan la utilización de recursos de la CPU de los UAV, la estación base y los receptores finales. Los monitores de ancho de banda de red observan la utilización de recursos de red de (1) el enlace de red inalámbrica entre los UAV y la estación base y (2) el enlace de red cableada entre la estación base y los receptores finales. El controlador central mantiene la utilización de recursos del sistema por debajo de un límite deseado mediante (1) el procesamiento de actualizaciones periódicas que recibe de los monitores de recursos y (2) modificando la ejecución de las aplicaciones en consecuencia, por ejemplo, utilizando diferentes algoritmos de ejecución u operando la aplicación con mayor/menor calidad de servicio (QoS). Este proceso de adaptación garantiza que los recursos del sistema se utilicen de manera eficiente y se cumplan los requisitos de calidad de servicio de la aplicación de extremo a extremo. En nuestro sistema multimedia, el controlador HyARM determina el valor de parámetros de la aplicación como (1) esquemas de compresión de video, como Real Video y MPEG-4, y/o (2) velocidad de cuadros, y (3) resolución de imagen. Desde la perspectiva de las técnicas híbridas de control teórico [8], los diferentes esquemas de compresión de video y la velocidad de cuadros forman las variables discretas de la ejecución de la aplicación, mientras que la resolución de imagen forma las variables continuas. Los adaptadores de aplicación modifican la ejecución de la aplicación de acuerdo con los parámetros recomendados por el controlador y garantizan que el funcionamiento de la aplicación esté de acuerdo con los parámetros recomendados. En la implementación actual de HyARM, el adaptador de la aplicación modifica los parámetros de entrada a la aplicación que afectan la calidad de servicio (QoS) de la aplicación y la utilización de recursos, como el esquema de compresión, la velocidad de fotogramas y la resolución de la imagen. En nuestras futuras implementaciones, planeamos utilizar mecanismos de reserva de recursos como Differentiated Service [7, 3] y Class-based Kernel Resource Management [4] para aprovisionar/reservar recursos de red y CPU. En nuestro sistema multimedia, el adaptador de la aplicación se asegura de que el video se codifique a la velocidad de cuadros y resolución recomendadas utilizando el esquema de compresión especificado. 3.2 Aplicando HyARM al Estudio de Caso del Sistema Multimedia. HyARM se construye sobre TAO [13], una implementación de código abierto ampliamente utilizada de CORBA en tiempo real [12]. HyARM se puede aplicar para garantizar una gestión eficiente, predecible y adaptable de recursos en cualquier sistema DRE donde la disponibilidad y los requisitos de recursos están sujetos a cambios dinámicos. La Figura 3 muestra la interacción de varias partes del sistema multimedia DRE desarrollado con HyARM, TAO y el Servicio de Streaming de Audio y Video de TAOs. El servicio de transmisión de audio/vídeo de TAO es una implementación de la especificación del Servicio de Transmisión de Audio/Vídeo de CORBA. El servicio de transmisión de audio y video de TAOs es un servicio de distribución de video habilitado para QoS que puede transferir video en tiempo real a uno o más receptores. Utilizamos el Servicio de Transmisión de Audio y Video para enviar el video desde los VANTs a los receptores finales a través de la estación base. Tres entidades del sistema multimedia DRE con HyARM, a saber, los monitores de recursos, el controlador central y los adaptadores de aplicaciones, están construidos como servidores CORBA, por lo que pueden distribuirse en todo el sistema DRE. Los monitores de recursos son objetos CORBA remotos que actualizan periódicamente al controlador central con la utilización actual de recursos. Los adaptadores de aplicaciones se ubican junto a las aplicaciones ya que ambas interactúan estrechamente. Como se muestra en la Figura 3, los UAV comprimen los datos utilizando varios esquemas de compresión, como MPEG1, MPEG4 y Real Video, y utilizan el servicio de transmisión de audio/vídeo de TAOs para enviar el video a los receptores finales. Los monitores de recursos de HyARMs observan continuamente la utilización de recursos del sistema y notifican al controlador central con la utilización actual. La interacción entre el controlador y los monitores de recursos utiliza el patrón Observer. Cuando el controlador recibe actualizaciones de utilización de recursos de los monitores, calcula las modificaciones necesarias a los parámetros de la(s) aplicación(es) y notifica al adaptador de la aplicación mediante una llamada de operación remota. Los adaptadores de aplicación, que están ubicados junto a la aplicación, modifican los parámetros de entrada de la aplicación, en nuestro caso el codificador de video, para modificar la utilización de recursos de la aplicación y la calidad de servicio. La estación base no está incluida en la figura ya que solo retransmite el video recibido de los UAV a los receptores finales. Artículo 7 4. RESULTADOS DE RENDIMIENTO Y ANÁLISIS Esta sección describe primero el banco de pruebas que proporciona la infraestructura para nuestro sistema multimedia DRE, que se utilizó para evaluar el rendimiento de HyARM. Luego describimos nuestros experimentos y analizamos los resultados obtenidos para evaluar empíricamente cómo se comporta HyARM durante la subutilización y sobreutilización de los recursos del sistema. 4.1 Descripción general del banco de pruebas de hardware y software Nuestros experimentos se realizaron en el banco de pruebas Emulab en la Universidad de Utah. La configuración de hardware consiste en dos nodos actuando como UAVs, uno actuando como estación base y otro como receptor final. El video de los dos UAV fue transmitido a una estación base a través de una LAN configurada con las siguientes propiedades: una relación promedio de pérdida de paquetes de 0.3 y un ancho de banda de 1 Mbps. El ancho de banda de la red se eligió para ser de 1 Mbps ya que a cada UAV en el sistema multimedia DRE se le asignan 250 Kbps. Estos parámetros fueron elegidos para emular una red inalámbrica poco confiable con ancho de banda limitado entre los UAVs y la estación base. Desde la estación base, el video fue retransmitido al receptor final a través de un enlace por cable confiable de 10 Mbps de ancho de banda sin pérdida de paquetes. La configuración de hardware de todos los nodos fue elegida de la siguiente manera: procesador Intel Pentium III de 600 MHz, 256 MB de memoria física, 4 puertos Ethernet Intel EtherExpress Pro de 10/100 Mbps y disco duro de 13 GB. Se utilizó una versión en tiempo real de Linux - TimeSys Linux/NET 3.1.214 basada en RedHat Linux 9 como sistema operativo para todos los nodos. Los siguientes paquetes de software también fueron utilizados para nuestros experimentos: (1) Ffmpeg 0.4.9-pre1, que es una biblioteca de código abierto (http://www.ffmpeg.sourceforge.net/download.php) que comprime video en formatos MPEG-2, MPEG-4, Real Video, y muchos otros formatos de video. (2) Iftop 0.16, que es una biblioteca de código abierto (http://www.ex-parrot.com/∼pdw/iftop/) que utilizamos para monitorear la actividad de red y la utilización del ancho de banda. (3) ACE 5.4.3 + TAO 1.4.3, que es una implementación de código abierto (http://www.dre.vanderbilt.edu/TAO) de la especificación CORBA en tiempo real [12] sobre la cual se construye HyARM. TAO proporciona el Servicio de Transmisión de Audio/Video (A/V) CORBA que utilizamos para transmitir el video desde los UAVs a los receptores finales a través de la estación base. Configuración del experimento Nuestro experimento consistió en dos UAVs (emulados) que enviaron video simultáneamente a la estación base utilizando la configuración experimental descrita en la Sección 4.1. En la estación base, el video fue retransmitido a los receptores finales (sin ninguna modificación), donde fue almacenado en un archivo. Cada UAV alojaba dos aplicaciones, una aplicación habilitada para QoS (respuesta de emergencia) y una aplicación de mejor esfuerzo (vigilancia). Dentro de cada UAV, el poder computacional se comparte entre las aplicaciones, mientras que el ancho de banda de la red se comparte entre todas las aplicaciones. Para evaluar la calidad de servicio proporcionada por HyARM, monitoreamos la utilización de la CPU en los dos UAV y la utilización del ancho de banda de la red entre el UAV y la estación base. La utilización de recursos de la CPU no se monitoreó en la estación base y en el receptor final, ya que no realizaron operaciones computacionalmente intensivas. La utilización de recursos del enlace físico de 10 Mbps entre la estación base y el receptor final no afecta la calidad de servicio de las aplicaciones y no es monitoreada por HyARM, ya que es casi 10 veces el ancho de banda de 1 MB de la LAN entre los UAV y la estación base. El experimento también monitorea propiedades del video que afectan la calidad de servicio de las aplicaciones, como la latencia, la variabilidad de retardo, la tasa de cuadros y la resolución. El punto de ajuste en la utilización de recursos para cada recurso se especificó en 0.69, que es el límite superior típicamente recomendado por técnicas de programación, como el algoritmo monótono de tasa [9]. Dado que los estudios [6] han demostrado que los ojos humanos pueden percibir retrasos de más de 200 ms, utilizamos esto como límite superior de la variabilidad en el video recibido. Los requisitos de QoS para cada clase de aplicación se especifican durante la inicialización del sistema y se muestran en la Tabla 1. 4.3 Resultados empíricos y análisis Esta sección presenta los resultados obtenidos al ejecutar el experimento descrito en la Sección 4.2 en nuestro banco de pruebas del sistema multimedia DRE. Utilizamos la utilización de recursos del sistema como métrica para evaluar las capacidades de gestión de recursos adaptativos de HyARM bajo cargas de trabajo de entrada variables. También utilizamos la calidad de servicio de la aplicación como métrica para evaluar las capacidades de HyARMs para satisfacer los requisitos de calidad de servicio de extremo a extremo de las diferentes clases de aplicaciones en el sistema multimedia DRE. Analizamos estos resultados para explicar las diferencias significativas en el rendimiento del sistema y la calidad de servicio de la aplicación. La comparación del rendimiento del sistema se descompone en la comparación de la utilización de recursos y la calidad de servicio de la aplicación. Para la utilización de recursos del sistema, comparamos (1) la utilización del ancho de banda de la red de área local y (2) la utilización de la CPU en los dos nodos UAV. Para la aplicación de QoS, comparamos los valores medios de los parámetros de video, incluyendo (1) resolución de imagen, (2) velocidad de cuadros, (3) latencia y (4) jitter. Comparación de la utilización de recursos. La sobreutilización de recursos del sistema en sistemas DRE puede generar un sistema inestable. Por el contrario, la subutilización de los recursos del sistema aumenta el costo del sistema. La Figura 4 y la Figura 5 comparan la utilización de recursos del sistema con y sin HyARM. La Figura 4 muestra que HyARM mantiene la utilización del sistema cerca del punto de ajuste de utilización deseado durante la fluctuación en la carga de trabajo de entrada al transmitir video de mayor (o menor) calidad de servicio para la clase de aplicaciones con calidad de servicio habilitada (o de mejor esfuerzo) durante la sobre (o sub) utilización de los recursos del sistema. La Figura 5 muestra que sin HyARM, la utilización de la red alcanzó hasta 0.9 durante el aumento de las condiciones de carga de trabajo, lo cual es mayor que el punto de ajuste de utilización de 0.7 en 0.2. Como resultado de la sobreutilización de recursos, la calidad de servicio (QoS) del video recibido, como la latencia promedio y el jitter, se vio afectada significativamente. Sin HyARM, los recursos del sistema estaban subutilizados o sobreutilizados, ambos de los cuales son indeseables. En contraste, con HyARM, la utilización de recursos del sistema siempre está cerca del punto de ajuste deseado, incluso durante las fluctuaciones en la carga de trabajo de la aplicación. Durante fluctuaciones repentinas en la carga de trabajo de la aplicación, las condiciones del sistema pueden ser temporalmente indeseables, pero se restauran a la condición deseada dentro de varios períodos de muestreo. La sobreutilización temporal de recursos es permisible en nuestro sistema multimedia, ya que la calidad del video puede degradarse por un corto período de tiempo, aunque la calidad del servicio de la aplicación se verá significativamente degradada si se transmite un video de baja calidad durante un período de tiempo más largo. Comparación de la calidad de servicio de la aplicación. Las Figuras 6, 7 y la Tabla 2 comparan la latencia, la variabilidad, la resolución y la velocidad de cuadro del video recibido, respectivamente. La Tabla 2 muestra que HyARM aumenta la resolución y la velocidad de cuadro de video de las aplicaciones habilitadas para QoS, pero disminuye la resolución y la velocidad de cuadro de las aplicaciones de mejor esfuerzo. Durante la sobreutilización de los recursos del sistema, la resolución y la velocidad de cuadros de las aplicaciones de menor prioridad se reducen para adaptarse a las fluctuaciones en la carga de trabajo de la aplicación y mantener la utilización de los recursos en el punto establecido especificado. Se puede observar en la Figura 6 y la Figura 7 que HyARM reduce significativamente la latencia y la variabilidad del video recibido. Estas cifras muestran que la calidad de servicio de las aplicaciones habilitadas para QoS se mejora considerablemente con HyARM. Aunque los parámetros de la aplicación, como la velocidad de cuadros y las resoluciones, que afectan los requisitos de QoS suave de las aplicaciones de mejor esfuerzo pueden verse comprometidos, se cumplen los requisitos de QoS estrictos, como la latencia y la variabilidad, de todas las aplicaciones. HyARM responde a las fluctuaciones en la disponibilidad de recursos y/o la demanda mediante el monitoreo constante de la utilización de recursos. Como se muestra en la Figura 4, cuando la utilización de recursos aumenta por encima del punto de ajuste deseado, HyARM reduce la utilización disminuyendo la calidad de servicio de las aplicaciones de mejor esfuerzo. Esta adaptación garantiza que haya suficientes recursos disponibles para que las aplicaciones habilitadas para QoS cumplan con sus necesidades de QoS. Las figuras 6 y 7 muestran que los valores de latencia y jitter del video recibido del sistema con HyARM son casi la mitad de los valores correspondientes del sistema sin HyARM. Con HyARM, los valores de estos parámetros están muy por debajo de los límites especificados, mientras que sin HyARM, estos valores están significativamente por encima de los límites especificados debido a la sobreutilización del ancho de banda de la red, lo que conduce a la congestión de la red y resulta en la pérdida de paquetes. HyARM evita esto reduciendo parámetros de video como la resolución, la velocidad de cuadros y/o modificando el esquema de compresión utilizado para comprimir el video. Nuestras conclusiones al analizar los resultados descritos anteriormente son que la aplicación de middleware adaptativo a través de control híbrido en sistemas DRE ayuda a (1) mejorar la calidad de servicio de la aplicación, (2) aumentar la utilización de recursos del sistema y (3) proporcionar una mejor previsibilidad (menor latencia y retraso entre fotogramas) a las aplicaciones habilitadas para calidad de servicio. Estas mejoras se logran en gran medida gracias al monitoreo de la utilización de recursos del sistema, la gestión eficiente de la carga de trabajo del sistema y la provisión adaptativa de recursos mediante los monitores de recursos de red/CPU de HyARMs, el adaptador de aplicaciones y el controlador central, respectivamente. TRABAJO RELACIONADO Recientemente se han aplicado varios enfoques teóricos de control a los sistemas DRE. Estas técnicas ayudan a superar las limitaciones de los enfoques de programación tradicionales que manejan mal los cambios dinámicos en la disponibilidad de recursos y resultan en un sistema programado rígidamente que se adapta mal a los cambios. Se presenta una encuesta de estas técnicas en [1]. Un enfoque de este tipo es la programación de control de retroalimentación (FCS) [2, 11]. Los algoritmos de FCS ajustan dinámicamente la asignación de recursos mediante bucles de control de retroalimentación de software. Los algoritmos de FCS se modelan y diseñan utilizando metodologías rigurosas de teoría de control. Estos algoritmos ofrecen garantías de rendimiento robusto y analítico a pesar de las incertidumbres en la disponibilidad de recursos y/o demanda. Aunque los algoritmos de FCS existentes han mostrado promesa, a menudo estos algoritmos asumen que el sistema tiene variable(s) de control continuas que pueden ajustarse continuamente. Si bien esta suposición es válida para ciertas clases de sistemas, existen muchas clases de sistemas DRE, como la aviónica y los entornos informáticos de barcos completos, que solo admiten un conjunto finito a priori de configuraciones discretas. Por lo tanto, las variables de control en tales sistemas son intrínsecamente discretas. HyARM maneja tanto variables de control continuas, como la resolución de la imagen, como variables de control discretas, como un conjunto discreto de velocidades de cuadro. HyARM puede aplicarse a sistemas que admiten un conjunto continuo y/o discreto de variables de control. El sistema multimedia DRE descrito en la Sección 2 es un ejemplo de sistema DRE que ofrece tanto variables de control continuas (resolución de imagen) como un conjunto discreto (velocidad de cuadros). Estas variables son modificadas por HyARM para lograr una utilización eficiente de recursos y una mejora en la calidad de servicio de la aplicación. CONCLUSIONES Artículo 7 Figura 6: Comparación de la latencia del video Figura 7: Comparación de la fluctuación del video Fuente Tamaño de imagen / Velocidad de cuadro Con HyARM Sin HyARM UAV1 Aplicación habilitada para QoS 1122 X 1496 / 25 960 X 720 / 20 UAV1 Aplicación de mejor esfuerzo 288 X 384 / 15 640 X 480 / 20 UAV2 Aplicación habilitada para QoS 1126 X 1496 / 25 960 X 720 / 20 UAV2 Aplicación de mejor esfuerzo 288 X 384 / 15 640 X 480 / 20 Tabla 2: Comparación de la calidad del video Muchos sistemas distribuidos en tiempo real y embebidos (DRE) demandan la aplicación correcta de la <br>calidad de servicio (QoS) de extremo a extremo</br> desde sus plataformas subyacentes para operar correctamente. Estos sistemas cada vez se ejecutan en entornos abiertos, donde la disponibilidad de recursos está sujeta a cambios dinámicos. Para cumplir con la calidad de servicio de extremo a extremo en entornos dinámicos, los sistemas DRE pueden beneficiarse de un middleware adaptativo que monitorea los recursos del sistema, realiza una gestión eficiente de la carga de trabajo de la aplicación y permite una provisión eficiente de recursos para la ejecución de aplicaciones. Este artículo describe HyARM, un middleware adaptativo que proporciona una gestión efectiva de recursos a los sistemas DRE. HyARM emplea técnicas de control híbrido para proporcionar las capacidades de middleware adaptativo, como el monitoreo de recursos y la adaptación de aplicaciones, que son clave para ofrecer las capacidades de gestión de recursos dinámicos para sistemas DRE abiertos. Empleamos HyARM en un sistema multimedia DRE representativo que está implementado utilizando CORBA en tiempo real y el Servicio de Transmisión de Audio/Vídeo de CORBA. Evaluamos el rendimiento de HyARM en un sistema compuesto por tres recursos distribuidos y dos clases de aplicaciones con dos aplicaciones cada una. Nuestros resultados empíricos indican que HyARM garantiza (1) la utilización eficiente de recursos al mantener la utilización de recursos del sistema dentro de los límites de utilización especificados, (2) los requisitos de calidad de servicio de las aplicaciones habilitadas para QoS se cumplen en todo momento. En general, HyARM garantiza una gestión eficiente, predecible y adaptable de recursos para sistemas DRE. REFERENCIAS [1] T. F. Abdelzaher, J. Stankovic, C. Lu, R. Zhang y Y. Lu. Control de rendimiento de retroalimentación en servicios de software. IEEE: Sistemas de Control, 23(3), junio de 2003. [2] L. Abeni, L. Palopoli, G. Lipari y J. Walpole. Análisis de un planificador de retroalimentación basado en reservas. En el Simposio de Sistemas en Tiempo Real de IEEE, Diciembre de 2002. [3] S. Blake, D. Black, M. Carlson, E. Davies, Z. Wang y W. Weiss. Una arquitectura para servicios diferenciados. Centro de Información de la Red RFC 2475, Dic. 1998. [4] H. Franke, S. Nagar, C. Seetharaman y V. Kashyap. Habilitando la Gestión Autonómica de la Carga de Trabajo en Linux. En Actas de la Conferencia Internacional sobre Computación Autónoma (ICAC), Nueva York, Nueva York, mayo de 2004. IEEE. [5] E. Gamma, R. Helm, R. Johnson, y J. Vlissides. Patrones de diseño: Elementos de software orientado a objetos reutilizable. Addison-Wesley, Reading, MA, 1995. [6] G. Ghinea y J. P. Thomas. Impacto de QoS en la percepción y comprensión del usuario de videoclips multimedia. En MULTIMEDIA 98: Actas de la sexta conferencia internacional de ACM sobre Multimedia, páginas 49-54, Bristol, Reino Unido, 1998. ACM Press. [7] Grupo de Trabajo de Ingeniería de Internet. Grupo de Trabajo de Servicios Diferenciados (diffserv) Carta. www.ietf.org/html.charters/diffserv-charter.html, 2000. [8] X. Koutsoukos, R. Tekumalla, B. Natarajan y C. Lu. Control híbrido supervisado de sistemas en tiempo real. En el 11º Simposio de Tecnología y Aplicaciones en Tiempo Real y Sistemas Empotrados de IEEE, San Francisco, California, Mar. 2005. [9] J. Lehoczky, L. Sha y Y. Ding. El algoritmo de programación Rate Monotonic: Caracterización exacta y comportamiento en casos promedio. En Actas del 10º Simposio de Sistemas en Tiempo Real de IEEE (RTSS 1989), páginas 166-171. IEEE Computer Society Press, 1989. [10] J. Loyall, J. Gossett, C. Gill, R. Schantz, J. Zinky, P. Pal, R. Shapiro, C. Rodrigues, M. Atighetchi, and D. Karr.\n\nIEEE Computer Society Press, 1989. [10] J. Loyall, J. Gossett, C. Gill, R. Schantz, J. Zinky, P. Pal, R. Shapiro, C. Rodrigues, M. Atighetchi y D. Karr. Comparando y contrastando el soporte de middleware adaptativo en aplicaciones de objetos distribuidos de área amplia y embebidos. En Actas de la 21ª Conferencia Internacional sobre Sistemas de Computación Distribuida (ICDCS-21), páginas 625-634. IEEE, Abr. 2001. [11] C. Lu, J. A. Stankovic, G. Tao y S. H. Son. Programación en tiempo real con control de retroalimentación: Marco, modelado y algoritmos. Revista de Sistemas en Tiempo Real, 23(1/2):85-126, julio de 2002. [12] Object Management Group. Especificación CORBA en tiempo real, documento formal/02-08-02 de OMG, edición de agosto de 2002. [13] D. C. Schmidt, D. L. Levine y S. Mungee. El diseño y rendimiento de los corredores de solicitudes de objetos en tiempo real. Comunicaciones de Computadoras, 21(4):294-324, Abr. 1998. [14] Thomas Sikora. Tendencias y perspectivas en codificación de imágenes y videos. En Actas del IEEE, enero de 2005. [15] X. Wang, H.-M. Huang, V. Subramonian, C. Lu y C. Gill. CAMRIT: Middleware Adaptativo Basado en Control para la Transmisión de Imágenes en Tiempo Real. En Actas del 10º Simposio de Tecnología y Aplicaciones en Tiempo Real y Sistemas Empotrados del IEEE (RTAS), Toronto, Canadá, mayo de 2004. Artículo 7 ",
            "candidates": [],
            "error": [
                [
                    ""
                ]
            ]
        },
        "service end-to-end quality": {
            "translated_key": "calidad de servicio de extremo a extremo",
            "is_in_text": false,
            "original_annotated_sentences": [
                "Evaluating Adaptive Resource Management for Distributed Real-Time Embedded Systems Nishanth Shankaran, ∗ Xenofon Koutsoukos, Douglas C. Schmidt, and Aniruddha Gokhale Dept.",
                "of EECS, Vanderbilt University, Nashville ABSTRACT A challenging problem faced by researchers and developers of distributed real-time and embedded (DRE) systems is devising and implementing effective adaptive resource management strategies that can meet end-to-end quality of service (QoS) requirements in varying operational conditions.",
                "This paper presents two contributions to research in adaptive resource management for DRE systems.",
                "First, we describe the structure and functionality of the Hybrid Adaptive Resourcemanagement Middleware (HyARM), which provides adaptive resource management using hybrid control techniques for adapting to workload fluctuations and resource availability.",
                "Second, we evaluate the adaptive behavior of HyARM via experiments on a DRE multimedia system that distributes video in real-time.",
                "Our results indicate that HyARM yields predictable, stable, and high system performance, even in the face of fluctuating workload and resource availability.",
                "Categories and Subject Descriptors C.2.4 [Distributed Systems]: Distributed Applications; D.4.7 [Organization and Design]: Real-time Systems and Embedded Systems 1.",
                "INTRODUCTION Achieving end-to-end real-time quality of service (QoS) is particularly important for open distributed real-time and embedded (DRE) systems that face resource constraints, such as limited computing power and network bandwidth.",
                "Overutilization of these system resources can yield unpredictable and unstable behavior, whereas under-utilization can yield excessive system cost.",
                "A promising approach to meeting these end-to-end QoS requirements effectively, therefore, is to develop and apply adaptive middleware [10, 15], which is software whose functional and QoS-related properties can be modified either statically or dynamically.",
                "Static modifications are carried out to reduce footprint, leverage capabilities that exist in specific platforms, enable functional subsetting, and/or minimize hardware/software infrastructure dependencies.",
                "Objectives of dynamic modifications include optimizing system responses to changing environments or requirements, such as changing component interconnections, power-levels, CPU and network bandwidth availability, latency/jitter, and workload.",
                "In open DRE systems, adaptive middleware must make such modifications dependably, i.e., while meeting stringent end-to-end QoS requirements, which requires the specification and enforcement of upper and lower bounds on system resource utilization to ensure effective use of system resources.",
                "To meet these requirements, we have developed the Hybrid Adaptive Resource-management Middleware (HyARM), which is an open-source1 distributed resource management middleware.",
                "HyARM is based on hybrid control theoretic techniques [8], which provide a theoretical framework for designing control of complex system with both continuous and discrete dynamics.",
                "In our case study, which involves a distributed real-time video distribution system, the task of adaptive resource management is to control the utilization of the different resources, whose utilizations are described by continuous variables.",
                "We achieve this by adapting the resolution of the transmitted video, which is modeled as a continuous variable, and by changing the frame-rate and the compression, which are modeled by discrete actions.",
                "We have implemented HyARM atop The ACE ORB (TAO) [13], which is an implementation of the Real-time CORBA specification [12].",
                "Our results show that (1) HyARM ensures effective system resource utilization and (2) end-to-end QoS requirements of higher priority applications are met, even in the face of fluctuations in workload.",
                "The remainder of the paper is organized as follows: Section 2 describes the architecture, functionality, and resource utilization model of our DRE multimedia system case study; Section 3 explains the structure and functionality of HyARM; Section 4 evaluates the adaptive behavior of HyARM via experiments on our multimedia system case study; Section 5 compares our research on HyARM with related work; and Section 6 presents concluding remarks. 1 The code and examples for HyARM are available at www. dre.vanderbilt.edu/∼nshankar/HyARM/.",
                "Article 7 2.",
                "CASE STUDY: DRE MULTIMEDIA SYSTEM This section describes the architecture and QoS requirements of our DRE multimedia system. 2.1 Multimedia System Architecture Wireless Link Wireless Link Wireless Link ` ` ` Physical Link Physical Link Physical Link Base Station End Receiver End Receiver End Receiver` Physical Link End Receiver UAV Camera Video Encoder Camera Video Encoder Camera Video Encoder UAV Camera Video Encoder Camera Video Encoder Camera Video Encoder UAV Camera Video Encoder Camera Video Encoder Camera Video Encoder Figure 1: DRE Multimedia System Architecture The architecture for our DRE multimedia system is shown in Figure 1 and consists of the following entities: (1)Data source (video capture by UAV), where video is captured (related to subject of interest) by camera(s) on each UAV, followed by encoding of raw video using a specific encoding scheme and transmitting the video to the next stage in the pipeline. (2)Data distributor (base station), where the video is processed to remove noise, followed by retransmission of the processed video to the next stage in the pipeline. (3) Sinks (command and control center), where the received video is again processed to remove noise, then decoded and finally rendered to end user via graphical displays.",
                "Significant improvements in video encoding/decoding and (de)compression techniques have been made as a result of recent advances in video encoding and compression techniques [14].",
                "Common video compression schemes are MPEG1, MPEG-2, Real Video, and MPEG-4.",
                "Each compression scheme is characterized by its resource requirement, e.g., the computational power to (de)compress the video signal and the network bandwidth required to transmit the compressed video signal.",
                "Properties of the compressed video, such as resolution and frame-rate determine both the quality and the resource requirements of the video.",
                "Our multimedia system case study has the following endto-end real-time QoS requirements: (1) latency, (2) interframe delay (also know as jitter), (3) frame rate, and (4) picture resolution.",
                "These QoS requirements can be classified as being either hard or soft.",
                "Hard QoS requirements should be met by the underlying system at all times, whereas soft QoS requirements can be missed occasionally.2 For our case study, we treat QoS requirements such as latency and jitter as harder QoS requirements and strive to meet these requirements at all times.",
                "In contrast, we treat QoS requirements such as video frame rate and picture resolution as softer QoS requirements and modify these video properties adaptively to handle dynamic changes in resource availabil2 Although hard and soft are often portrayed as two discrete requirement sets, in practice they are usually two ends of a continuum ranging from softer to harder rather than two disjoint points. ity effectively. 2.2 DRE Multimedia System Rresources There are two primary types of resources in our DRE multimedia system: (1) processors that provide computational power available at the UAVs, base stations, and end receivers and (2) network links that provide communication bandwidth between UAVs, base stations, and end receivers.",
                "The computing power required by the video capture and encoding tasks depends on dynamic factors, such as speed of the UAV, speed of the subject (if the subject is mobile), and distance between UAV and the subject.",
                "The wireless network bandwidth available to transmit video captured by UAVs to base stations also depends on the wireless connectivity between the UAVs and the base station, which in-turn depend on dynamic factors such as the speed of the UAVs and the relative distance between UAVs and base stations.",
                "The bandwidth of the link between the base station and the end receiver is limited, but more stable than the bandwidth of the wireless network.",
                "Resource requirements and availability of resources are subjected to dynamic changes.",
                "Two classes of applications - QoS-enabled and best-effort - use the multimedia system infrastructure described above to transmit video to their respective receivers.",
                "QoS-enabled class of applications have higher priority over best-effort class of application.",
                "In our study, emergency response applications belong to QoS-enabled and surveillance applications belong to best-effort class.",
                "For example, since a stream from an emergency response application is of higher importance than a video stream from a surveillance application, it receives more resources end-to-end.",
                "Since resource availability significantly affects QoS, we use current resource utilization as the primary indicator of system performance.",
                "We refer to the current level of system resource utilization as the system condition.",
                "Based on this definition, we can classify system conditions as being either under, over, or effectively utilized.",
                "Under-utilization of system resources occurs when the current resource utilization is lower than the desired lower bound on resource utilization.",
                "In this system condition, residual system resources (i.e., network bandwidth and computational power) are available in large amounts after meeting end-to-end QoS requirements of applications.",
                "These residual resources can be used to increase the QoS of the applications.",
                "For example, residual CPU and network bandwidth can be used to deliver better quality video (e.g., with greater resolution and higher frame rate) to end receivers.",
                "Over-utilization of system resources occurs when the current resource utilization is higher than the desired upper bound on resource utilization.",
                "This condition can arise from loss of resources - network bandwidth and/or computing power at base station, end receiver or at UAV - or may be due to an increase in resource demands by applications.",
                "Over-utilization is generally undesirable since the quality of the received video (such as resolution and frame rate) and timeliness properties (such as latency and jitter) are degraded and may result in an unstable (and thus ineffective) system.",
                "Effective resource utilization is the desired system condition since it ensures that end-to-end QoS requirements of the UAV-based multimedia system are met and utilization of both system resources, i.e., network bandwidth and computational power, are within their desired utilization bounds.",
                "Article 7 Section 3 describes techniques we applied to achieve effective utilization, even in the face of fluctuating resource availability and/or demand. 3.",
                "OVERVIEW OF HYARM This section describes the architecture of the Hybrid Adaptive Resource-management Middleware (HyARM).",
                "HyARM ensures efficient and predictable system performance by providing adaptive resource management, including monitoring of system resources and enforcing bounds on application resource utilization. 3.1 HyARM Structure and Functionality Resource Utilization Legend Resource Allocation Application Parameters Figure 2: HyARM Architecture HyARM is composed of three types of entities shown in Figure 2 and described below: Resource monitors observe the overall resource utilization for each type of resource and resource utilization per application.",
                "In our multimedia system, there are resource monitors for CPU utilization and network bandwidth.",
                "CPU monitors observe the CPU resource utilization of UAVs, base station, and end receivers.",
                "Network bandwidth monitors observe the network resource utilization of (1) wireless network link between UAVs and the base station and (2) wired network link between the base station and end receivers.",
                "The central controller maintains the system resource utilization below a desired bound by (1) processing periodic updates it receives from resource monitors and (2) modifying the execution of applications accordingly, e.g., by using different execution algorithms or operating the application with increased/decreased QoS.",
                "This adaptation process ensures that system resources are utilized efficiently and end-to-end application QoS requirements are met.",
                "In our multimedia system, the HyARM controller determines the value of application parameters such as (1) video compression schemes, such as Real Video and MPEG-4, and/or (2) frame rate, and (3) picture resolution.",
                "From the perspective of hybrid control theoretic techniques [8], the different video compression schemes and frame rate form the discrete variables of application execution and picture resolution forms the continuous variables.",
                "Application adapters modify application execution according to parameters recommended by the controller and ensures that the operation of the application is in accordance with the recommended parameters.",
                "In the current mplementation of HyARM, the application adapter modifies the input parameters to the application that affect application QoS and resource utilization - compression scheme, frame rate, and picture resolution.",
                "In our future implementations, we plan to use resource reservation mechanisms such as Differentiated Service [7, 3] and Class-based Kernel Resource Management [4] to provision/reserve network and CPU resources.",
                "In our multimedia system, the application adapter ensures that the video is encoded at the recommended frame rate and resolution using the specified compression scheme. 3.2 Applying HyARM to the Multimedia System Case Study HyARM is built atop TAO [13], a widely used open-source implementation of Real-time CORBA [12].",
                "HyARM can be applied to ensure efficient, predictable and adaptive resource management of any DRE system where resource availability and requirements are subject to dynamic change.",
                "Figure 3 shows the interaction of various parts of the DRE multimedia system developed with HyARM, TAO, and TAOs A/V Streaming Service.",
                "TAOs A/V Streaming service is an implementation of the CORBA A/V Streaming Service specification.",
                "TAOs A/V Streaming Service is a QoS-enabled video distribution service that can transfer video in real-time to one or more receivers.",
                "We use the A/V Streaming Service to transmit the video from the UAVs to the end receivers via the base station.",
                "Three entities of Receiver UAV TAO Resource Utilization HyARM Central Controller A/V Streaming Service : Sender MPEG1 MPEG4 Real Video HyARM Resource Monitor A/V Streaming Service : Receiver Compressed Video Compressed Video Application HyARM Application Adapter Remote Object Call Control Inputs Resource Utilization Resource Utilization / Control Inputs Control Inputs Legend Figure 3: Developing the DRE Multimedia System with HyARM HyARM, namely the resource monitors, central controller, and application adapters are built as CORBA servants, so they can be distributed throughout a DRE system.",
                "Resource monitors are remote CORBA objects that update the central controller periodically with the current resource utilization.",
                "Application adapters are collocated with applications since the two interact closely.",
                "As shown in Figure 3, UAVs compress the data using various compression schemes, such as MPEG1, MPEG4, and Real Video, and uses TAOs A/V streaming service to transmit the video to end receivers.",
                "HyARMs resource monitors continuously observe the system resource utilization and notify the central controller with the current utilization. 3 The interaction between the controller and the resource monitors uses the Observer pattern [5].",
                "When the controller receives resource utilization updates from monitors, it computes the necessary modifications to application(s) parameters and notifies application adapter(s) via a remote operation call.",
                "Application adapter(s), that are collocated with the application, modify the input parameters to the application - in our case video encoder - to modify the application resource utilization and QoS. 3 The base station is not included in the figure since it only retransmits the video received from UAVs to end receivers.",
                "Article 7 4.",
                "PERFORMANCE RESULTS AND ANALYSIS This section first describes the testbed that provides the infrastructure for our DRE multimedia system, which was used to evaluate the performance of HyARM.",
                "We then describe our experiments and analyze the results obtained to empirically evaluate how HyARM behaves during underand over-utilization of system resources. 4.1 Overview of the Hardware and Software Testbed Our experiments were performed on the Emulab testbed at University of Utah.",
                "The hardware configuration consists of two nodes acting as UAVs, one acting as base station, and one as end receiver.",
                "Video from the two UAVs were transmitted to a base station via a LAN configured with the following properties: average packet loss ratio of 0.3 and bandwidth 1 Mbps.",
                "The network bandwidth was chosen to be 1 Mbps since each UAV in the DRE multimedia system is allocated 250 Kbps.",
                "These parameters were chosen to emulate an unreliable wireless network with limited bandwidth between the UAVs and the base station.",
                "From the base station, the video was retransmitted to the end receiver via a reliable wireline link of 10 Mbps bandwidth with no packet loss.",
                "The hardware configuration of all the nodes was chosen as follows: 600 MHz Intel Pentium III processor, 256 MB physical memory, 4 Intel EtherExpress Pro 10/100 Mbps Ethernet ports, and 13 GB hard drive.",
                "A real-time version of Linux - TimeSys Linux/NET 3.1.214 based on RedHat Linux 9was used as the operating system for all nodes.",
                "The following software packages were also used for our experiments: (1) Ffmpeg 0.4.9-pre1, which is an open-source library (http: //www.ffmpeg.sourceforge.net/download.php) that compresses video into MPEG-2, MPEG-4, Real Video, and many other video formats. (2) Iftop 0.16, which is an opensource library (http://www.ex-parrot.com/∼pdw/iftop/) we used for monitoring network activity and bandwidth utilization. (3) ACE 5.4.3 + TAO 1.4.3, which is an opensource (http://www.dre.vanderbilt.edu/TAO) implementation of the Real-time CORBA [12] specification upon which HyARM is built.",
                "TAO provides the CORBA Audio/Video (A/V) Streaming Service that we use to transmit the video from the UAVs to end receivers via the base station. 4.2 Experiment Configuration Our experiment consisted of two (emulated) UAVs that simultaneously send video to the base station using the experimentation setup described in Section 4.1.",
                "At the base station, video was retransmitted to the end receivers (without any modifications), where it was stored to a file.",
                "Each UAV hosted two applications, one QoS-enabled application (emergency response), and one best-effort application (surveillance).",
                "Within each UAV, computational power is shared between the applications, while the network bandwidth is shared among all applications.",
                "To evaluate the QoS provided by HyARM, we monitored CPU utilization at the two UAVs, and network bandwidth utilization between the UAV and the base station.",
                "CPU resource utilization was not monitored at the base station and the end receiver since they performed no computationallyintensive operations.",
                "The resource utilization of the 10 Mpbs physical link between the base station and the end receiver does not affect QoS of applications and is not monitored by HyARM since it is nearly 10 times the 1 MB bandwidth of the LAN between the UAVs and the base station.",
                "The experiment also monitors properties of the video that affect the QoS of the applications, such as latency, jitter, frame rate, and resolution.",
                "The set point on resource utilization for each resource was specified at 0.69, which is the upper bound typically recommended by scheduling techniques, such as rate monotonic algorithm [9].",
                "Since studies [6] have shown that human eyes can perceive delays more than 200ms, we use this as the upper bound on jitter of the received video.",
                "QoS requirements for each class of application is specified during system initialization and is shown in Table 1. 4.3 Empirical Results and Analysis This section presents the results obtained from running the experiment described in Section 4.2 on our DRE multimedia system testbed.",
                "We used system resource utilization as a metric to evaluate the adaptive resource management capabilities of HyARM under varying input work loads.",
                "We also used application QoS as a metric to evaluate HyARMs capabilities to support end-to-end QoS requirements of the various classes of applications in the DRE multimedia system.",
                "We analyze these results to explain the significant differences in system performance and application QoS.",
                "Comparison of system performance is decomposed into comparison of resource utilization and application QoS.",
                "For system resource utilization, we compare (1) network bandwidth utilization of the local area network and (2) CPU utilization at the two UAV nodes.",
                "For application QoS, we compare mean values of video parameters, including (1) picture resolution, (2) frame rate, (3) latency, and (4) jitter.",
                "Comparison of resource utilization.",
                "Over-utilization of system resources in DRE systems can yield an unstable system.",
                "In contrast, under-utilization of system resources increases system cost.",
                "Figure 4 and Figure 5 compare the system resource utilization with and without HyARM.",
                "Figure 4 shows that HyARM maintains system utilization close to the desired utilization set point during fluctuation in input work load by transmitting video of higher (or lower) QoS for QoS-enabled (or best-effort) class of applications during over (or under) utilization of system resources.",
                "Figure 5 shows that without HyARM, network utilization was as high as 0.9 during increase in workload conditions, which is greater than the utilization set point of 0.7 by 0.2.",
                "As a result of over-utilization of resources, QoS of the received video, such as average latency and jitter, was affected significantly.",
                "Without HyARM, system resources were either under-utilized or over-utilized, both of which are undesirable.",
                "In contrast, with HyARM, system resource utilization is always close to the desired set point, even during fluctuations in application workload.",
                "During sudden fluctuation in application workload, system conditions may be temporarily undesirable, but are restored to the desired condition within several sampling periods.",
                "Temporary over-utilization of resources is permissible in our multimedia system since the quality of the video may be degraded for a short period of time, though application QoS will be degraded significantly if poor quality video is transmitted for a longer period of time.",
                "Comparison of application QoS.",
                "Figures 6, Figure 7, and Table 2 compare latency, jitter, resolution, and frameArticle 7 Class Resolution Frame Rate Latency (msec ) Jitter (msec) QoS Enabled 1024 x 768 25 200 200 Best-effort 320 x 240 15 300 250 Table 1: Application QoS Requirements Figure 4: Resource utilization with HyARM Figure 5: Resource utilization without HyARM rate of the received video, respectively.",
                "Table 2 shows that HyARM increases the resolution and frame video of QoSenabled applications, but decreases the resolution and frame rate of best effort applications.",
                "During over utilization of system resources, resolution and frame rate of lower priority applications are reduced to adapt to fluctuations in application workload and to maintain the utilization of resources at the specified set point.",
                "It can be seen from Figure 6 and Figure 7 that HyARM reduces the latency and jitter of the received video significantly.",
                "These figures show that the QoS of QoS-enabled applications is greatly improved by HyARM.",
                "Although application parameters, such as frame rate and resolutions, which affect the soft QoS requirements of best-effort applications may be compromised, the hard QoS requirements, such as latency and jitter, of all applications are met.",
                "HyARM responds to fluctuation in resource availability and/or demand by constant monitoring of resource utilization.",
                "As shown in Figure 4, when resources utilization increases above the desired set point, HyARM lowers the utilization by reducing the QoS of best-effort applications.",
                "This adaptation ensures that enough resources are available for QoS-enabled applications to meet their QoS needs.",
                "Figures 6 and 7 show that the values of latency and jitter of the received video of the system with HyARM are nearly half of the corresponding value of the system without HyARM.",
                "With HyARM, values of these parameters are well below the specified bounds, whereas without HyARM, these value are significantly above the specified bounds due to overutilization of the network bandwidth, which leads to network congestion and results in packet loss.",
                "HyARM avoids this by reducing video parameters such as resolution, frame-rate, and/or modifying the compression scheme used to compress the video.",
                "Our conclusions from analyzing the results described above are that applying adaptive middleware via hybrid control to DRE system helps to (1) improve application QoS, (2) increase system resource utilization, and (3) provide better predictability (lower latency and inter-frame delay) to QoSenabled applications.",
                "These improvements are achieved largely due to monitoring of system resource utilization, efficient system workload management, and adaptive resource provisioning by means of HyARMs network/CPU resource monitors, application adapter, and central controller, respectively. 5.",
                "RELATED WORK A number of control theoretic approaches have been applied to DRE systems recently.",
                "These techniques aid in overcoming limitations with traditional scheduling approaches that handle dynamic changes in resource availability poorly and result in a rigidly scheduled system that adapts poorly to change.",
                "A survey of these techniques is presented in [1].",
                "One such approach is feedback control scheduling (FCS) [2, 11].",
                "FCS algorithms dynamically adjust resource allocation by means of software feedback control loops.",
                "FCS algorithms are modeled and designed using rigorous controltheoretic methodologies.",
                "These algorithms provide robust and analytical performance assurances despite uncertainties in resource availability and/or demand.",
                "Although existing FCS algorithms have shown promise, these algorithms often assume that the system has continuous control variable(s) that can continuously be adjusted.",
                "While this assumption holds for certain classes of systems, there are many classes of DRE systems, such as avionics and total-ship computing environments that only support a finite a priori set of discrete configurations.",
                "The control variables in such systems are therefore intrinsically discrete.",
                "HyARM handles both continuous control variables, such as picture resolution, and discrete control variable, such as discrete set of frame rates.",
                "HyARM can therefore be applied to system that support continuous and/or discrete set of control variables.",
                "The DRE multimedia system as described in Section 2 is an example DRE system that offers both continuous (picture resolution) and discrete set (frame-rate) of control variables.",
                "These variables are modified by HyARM to achieve efficient resource utilization and improved application QoS. 6.",
                "CONCLUDING REMARKS Article 7 Figure 6: Comparison of Video Latency Figure 7: Comparison of Video Jitter Source Picture Size / Frame Rate With HyARM Without HyARM UAV1 QoS Enabled Application 1122 X 1496 / 25 960 X 720 / 20 UAV1 Best-effort Application 288 X 384 / 15 640 X 480 / 20 UAV2 QoS Enabled Application 1126 X 1496 / 25 960 X 720 / 20 UAV2 Best-effort Application 288 X 384 / 15 640 X 480 / 20 Table 2: Comparison of Video Quality Many distributed real-time and embedded (DRE) systems demand end-to-end quality of service (QoS) enforcement from their underlying platforms to operate correctly.",
                "These systems increasingly run in open environments, where resource availability is subject to dynamic change.",
                "To meet end-to-end QoS in dynamic environments, DRE systems can benefit from an adaptive middleware that monitors system resources, performs efficient application workload management, and enables efficient resource provisioning for executing applications.",
                "This paper described HyARM, an adaptive middleware, that provides effective resource management to DRE systems.",
                "HyARM employs hybrid control techniques to provide the adaptive middleware capabilities, such as resource monitoring and application adaptation that are key to providing the dynamic resource management capabilities for open DRE systems.",
                "We employed HyARM to a representative DRE multimedia system that is implemented using Real-time CORBA and CORBA A/V Streaming Service.",
                "We evaluated the performance of HyARM in a system composed of three distributed resources and two classes of applications with two applications each.",
                "Our empirical results indicate that HyARM ensures (1) efficient resource utilization by maintaining the resource utilization of system resources within the specified utilization bounds, (2) QoS requirements of QoS-enabled applications are met at all times.",
                "Overall, HyARM ensures efficient, predictable, and adaptive resource management for DRE systems. 7.",
                "REFERENCES [1] T. F. Abdelzaher, J. Stankovic, C. Lu, R. Zhang, and Y. Lu.",
                "Feddback Performance Control in Software Services.",
                "IEEE: Control Systems, 23(3), June 2003. [2] L. Abeni, L. Palopoli, G. Lipari, and J. Walpole.",
                "Analysis of a reservation-based feedback scheduler.",
                "In IEEE Real-Time Systems Symposium, Dec. 2002. [3] S. Blake, D. Black, M. Carlson, E. Davies, Z. Wang, and W. Weiss.",
                "An architecture for differentiated services.",
                "Network Information Center RFC 2475, Dec. 1998. [4] H. Franke, S. Nagar, C. Seetharaman, and V. Kashyap.",
                "Enabling Autonomic Workload Management in Linux.",
                "In Proceedings of the International Conference on Autonomic Computing (ICAC), New York, New York, May 2004.",
                "IEEE. [5] E. Gamma, R. Helm, R. Johnson, and J. Vlissides.",
                "Design Patterns: Elements of Reusable Object-Oriented Software.",
                "Addison-Wesley, Reading, MA, 1995. [6] G. Ghinea and J. P. Thomas.",
                "Qos impact on user perception and understanding of multimedia video clips.",
                "In MULTIMEDIA 98: Proceedings of the sixth ACM international conference on Multimedia, pages 49-54, Bristol, United Kingdom, 1998.",
                "ACM Press. [7] Internet Engineering Task Force.",
                "Differentiated Services Working Group (diffserv) Charter. www.ietf.org/html.charters/diffserv-charter.html, 2000. [8] X. Koutsoukos, R. Tekumalla, B. Natarajan, and C. Lu.",
                "Hybrid Supervisory Control of Real-Time Systems.",
                "In 11th IEEE Real-Time and Embedded Technology and Applications Symposium, San Francisco, California, Mar. 2005. [9] J. Lehoczky, L. Sha, and Y. Ding.",
                "The Rate Monotonic Scheduling Algorithm: Exact Characterization and Average Case Behavior.",
                "In Proceedings of the 10th IEEE Real-Time Systems Symposium (RTSS 1989), pages 166-171.",
                "IEEE Computer Society Press, 1989. [10] J. Loyall, J. Gossett, C. Gill, R. Schantz, J. Zinky, P. Pal, R. Shapiro, C. Rodrigues, M. Atighetchi, and D. Karr.",
                "Comparing and Contrasting Adaptive Middleware Support in Wide-Area and Embedded Distributed Object Applications.",
                "In Proceedings of the 21st International Conference on Distributed Computing Systems (ICDCS-21), pages 625-634.",
                "IEEE, Apr. 2001. [11] C. Lu, J.",
                "A. Stankovic, G. Tao, and S. H. Son.",
                "Feedback Control Real-Time Scheduling: Framework, Modeling, and Algorithms.",
                "Real-Time Systems Journal, 23(1/2):85-126, July 2002. [12] Object Management Group.",
                "Real-time CORBA Specification, OMG Document formal/02-08-02 edition, Aug. 2002. [13] D. C. Schmidt, D. L. Levine, and S. Mungee.",
                "The Design and Performance of Real-Time Object Request Brokers.",
                "Computer Communications, 21(4):294-324, Apr. 1998. [14] Thomas Sikora.",
                "Trends and Perspectives in Image and Video Coding.",
                "In Proceedings of the IEEE, Jan. 2005. [15] X. Wang, H.-M. Huang, V. Subramonian, C. Lu, and C. Gill.",
                "CAMRIT: Control-based Adaptive Middleware for Real-time Image Transmission.",
                "In Proc. of the 10th IEEE Real-Time and Embedded Tech. and Applications Symp. (RTAS), Toronto, Canada, May 2004.",
                "Article 7"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [],
            "translated_text": "",
            "candidates": [],
            "error": [
                []
            ]
        },
        "hybrid adaptive resourcemanagement middleware": {
            "translated_key": "Middleware de Gestión de Recursos Adaptativos Híbridos",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Evaluating Adaptive Resource Management for Distributed Real-Time Embedded Systems Nishanth Shankaran, ∗ Xenofon Koutsoukos, Douglas C. Schmidt, and Aniruddha Gokhale Dept.",
                "of EECS, Vanderbilt University, Nashville ABSTRACT A challenging problem faced by researchers and developers of distributed real-time and embedded (DRE) systems is devising and implementing effective adaptive resource management strategies that can meet end-to-end quality of service (QoS) requirements in varying operational conditions.",
                "This paper presents two contributions to research in adaptive resource management for DRE systems.",
                "First, we describe the structure and functionality of the <br>hybrid adaptive resourcemanagement middleware</br> (HyARM), which provides adaptive resource management using hybrid control techniques for adapting to workload fluctuations and resource availability.",
                "Second, we evaluate the adaptive behavior of HyARM via experiments on a DRE multimedia system that distributes video in real-time.",
                "Our results indicate that HyARM yields predictable, stable, and high system performance, even in the face of fluctuating workload and resource availability.",
                "Categories and Subject Descriptors C.2.4 [Distributed Systems]: Distributed Applications; D.4.7 [Organization and Design]: Real-time Systems and Embedded Systems 1.",
                "INTRODUCTION Achieving end-to-end real-time quality of service (QoS) is particularly important for open distributed real-time and embedded (DRE) systems that face resource constraints, such as limited computing power and network bandwidth.",
                "Overutilization of these system resources can yield unpredictable and unstable behavior, whereas under-utilization can yield excessive system cost.",
                "A promising approach to meeting these end-to-end QoS requirements effectively, therefore, is to develop and apply adaptive middleware [10, 15], which is software whose functional and QoS-related properties can be modified either statically or dynamically.",
                "Static modifications are carried out to reduce footprint, leverage capabilities that exist in specific platforms, enable functional subsetting, and/or minimize hardware/software infrastructure dependencies.",
                "Objectives of dynamic modifications include optimizing system responses to changing environments or requirements, such as changing component interconnections, power-levels, CPU and network bandwidth availability, latency/jitter, and workload.",
                "In open DRE systems, adaptive middleware must make such modifications dependably, i.e., while meeting stringent end-to-end QoS requirements, which requires the specification and enforcement of upper and lower bounds on system resource utilization to ensure effective use of system resources.",
                "To meet these requirements, we have developed the Hybrid Adaptive Resource-management Middleware (HyARM), which is an open-source1 distributed resource management middleware.",
                "HyARM is based on hybrid control theoretic techniques [8], which provide a theoretical framework for designing control of complex system with both continuous and discrete dynamics.",
                "In our case study, which involves a distributed real-time video distribution system, the task of adaptive resource management is to control the utilization of the different resources, whose utilizations are described by continuous variables.",
                "We achieve this by adapting the resolution of the transmitted video, which is modeled as a continuous variable, and by changing the frame-rate and the compression, which are modeled by discrete actions.",
                "We have implemented HyARM atop The ACE ORB (TAO) [13], which is an implementation of the Real-time CORBA specification [12].",
                "Our results show that (1) HyARM ensures effective system resource utilization and (2) end-to-end QoS requirements of higher priority applications are met, even in the face of fluctuations in workload.",
                "The remainder of the paper is organized as follows: Section 2 describes the architecture, functionality, and resource utilization model of our DRE multimedia system case study; Section 3 explains the structure and functionality of HyARM; Section 4 evaluates the adaptive behavior of HyARM via experiments on our multimedia system case study; Section 5 compares our research on HyARM with related work; and Section 6 presents concluding remarks. 1 The code and examples for HyARM are available at www. dre.vanderbilt.edu/∼nshankar/HyARM/.",
                "Article 7 2.",
                "CASE STUDY: DRE MULTIMEDIA SYSTEM This section describes the architecture and QoS requirements of our DRE multimedia system. 2.1 Multimedia System Architecture Wireless Link Wireless Link Wireless Link ` ` ` Physical Link Physical Link Physical Link Base Station End Receiver End Receiver End Receiver` Physical Link End Receiver UAV Camera Video Encoder Camera Video Encoder Camera Video Encoder UAV Camera Video Encoder Camera Video Encoder Camera Video Encoder UAV Camera Video Encoder Camera Video Encoder Camera Video Encoder Figure 1: DRE Multimedia System Architecture The architecture for our DRE multimedia system is shown in Figure 1 and consists of the following entities: (1)Data source (video capture by UAV), where video is captured (related to subject of interest) by camera(s) on each UAV, followed by encoding of raw video using a specific encoding scheme and transmitting the video to the next stage in the pipeline. (2)Data distributor (base station), where the video is processed to remove noise, followed by retransmission of the processed video to the next stage in the pipeline. (3) Sinks (command and control center), where the received video is again processed to remove noise, then decoded and finally rendered to end user via graphical displays.",
                "Significant improvements in video encoding/decoding and (de)compression techniques have been made as a result of recent advances in video encoding and compression techniques [14].",
                "Common video compression schemes are MPEG1, MPEG-2, Real Video, and MPEG-4.",
                "Each compression scheme is characterized by its resource requirement, e.g., the computational power to (de)compress the video signal and the network bandwidth required to transmit the compressed video signal.",
                "Properties of the compressed video, such as resolution and frame-rate determine both the quality and the resource requirements of the video.",
                "Our multimedia system case study has the following endto-end real-time QoS requirements: (1) latency, (2) interframe delay (also know as jitter), (3) frame rate, and (4) picture resolution.",
                "These QoS requirements can be classified as being either hard or soft.",
                "Hard QoS requirements should be met by the underlying system at all times, whereas soft QoS requirements can be missed occasionally.2 For our case study, we treat QoS requirements such as latency and jitter as harder QoS requirements and strive to meet these requirements at all times.",
                "In contrast, we treat QoS requirements such as video frame rate and picture resolution as softer QoS requirements and modify these video properties adaptively to handle dynamic changes in resource availabil2 Although hard and soft are often portrayed as two discrete requirement sets, in practice they are usually two ends of a continuum ranging from softer to harder rather than two disjoint points. ity effectively. 2.2 DRE Multimedia System Rresources There are two primary types of resources in our DRE multimedia system: (1) processors that provide computational power available at the UAVs, base stations, and end receivers and (2) network links that provide communication bandwidth between UAVs, base stations, and end receivers.",
                "The computing power required by the video capture and encoding tasks depends on dynamic factors, such as speed of the UAV, speed of the subject (if the subject is mobile), and distance between UAV and the subject.",
                "The wireless network bandwidth available to transmit video captured by UAVs to base stations also depends on the wireless connectivity between the UAVs and the base station, which in-turn depend on dynamic factors such as the speed of the UAVs and the relative distance between UAVs and base stations.",
                "The bandwidth of the link between the base station and the end receiver is limited, but more stable than the bandwidth of the wireless network.",
                "Resource requirements and availability of resources are subjected to dynamic changes.",
                "Two classes of applications - QoS-enabled and best-effort - use the multimedia system infrastructure described above to transmit video to their respective receivers.",
                "QoS-enabled class of applications have higher priority over best-effort class of application.",
                "In our study, emergency response applications belong to QoS-enabled and surveillance applications belong to best-effort class.",
                "For example, since a stream from an emergency response application is of higher importance than a video stream from a surveillance application, it receives more resources end-to-end.",
                "Since resource availability significantly affects QoS, we use current resource utilization as the primary indicator of system performance.",
                "We refer to the current level of system resource utilization as the system condition.",
                "Based on this definition, we can classify system conditions as being either under, over, or effectively utilized.",
                "Under-utilization of system resources occurs when the current resource utilization is lower than the desired lower bound on resource utilization.",
                "In this system condition, residual system resources (i.e., network bandwidth and computational power) are available in large amounts after meeting end-to-end QoS requirements of applications.",
                "These residual resources can be used to increase the QoS of the applications.",
                "For example, residual CPU and network bandwidth can be used to deliver better quality video (e.g., with greater resolution and higher frame rate) to end receivers.",
                "Over-utilization of system resources occurs when the current resource utilization is higher than the desired upper bound on resource utilization.",
                "This condition can arise from loss of resources - network bandwidth and/or computing power at base station, end receiver or at UAV - or may be due to an increase in resource demands by applications.",
                "Over-utilization is generally undesirable since the quality of the received video (such as resolution and frame rate) and timeliness properties (such as latency and jitter) are degraded and may result in an unstable (and thus ineffective) system.",
                "Effective resource utilization is the desired system condition since it ensures that end-to-end QoS requirements of the UAV-based multimedia system are met and utilization of both system resources, i.e., network bandwidth and computational power, are within their desired utilization bounds.",
                "Article 7 Section 3 describes techniques we applied to achieve effective utilization, even in the face of fluctuating resource availability and/or demand. 3.",
                "OVERVIEW OF HYARM This section describes the architecture of the Hybrid Adaptive Resource-management Middleware (HyARM).",
                "HyARM ensures efficient and predictable system performance by providing adaptive resource management, including monitoring of system resources and enforcing bounds on application resource utilization. 3.1 HyARM Structure and Functionality Resource Utilization Legend Resource Allocation Application Parameters Figure 2: HyARM Architecture HyARM is composed of three types of entities shown in Figure 2 and described below: Resource monitors observe the overall resource utilization for each type of resource and resource utilization per application.",
                "In our multimedia system, there are resource monitors for CPU utilization and network bandwidth.",
                "CPU monitors observe the CPU resource utilization of UAVs, base station, and end receivers.",
                "Network bandwidth monitors observe the network resource utilization of (1) wireless network link between UAVs and the base station and (2) wired network link between the base station and end receivers.",
                "The central controller maintains the system resource utilization below a desired bound by (1) processing periodic updates it receives from resource monitors and (2) modifying the execution of applications accordingly, e.g., by using different execution algorithms or operating the application with increased/decreased QoS.",
                "This adaptation process ensures that system resources are utilized efficiently and end-to-end application QoS requirements are met.",
                "In our multimedia system, the HyARM controller determines the value of application parameters such as (1) video compression schemes, such as Real Video and MPEG-4, and/or (2) frame rate, and (3) picture resolution.",
                "From the perspective of hybrid control theoretic techniques [8], the different video compression schemes and frame rate form the discrete variables of application execution and picture resolution forms the continuous variables.",
                "Application adapters modify application execution according to parameters recommended by the controller and ensures that the operation of the application is in accordance with the recommended parameters.",
                "In the current mplementation of HyARM, the application adapter modifies the input parameters to the application that affect application QoS and resource utilization - compression scheme, frame rate, and picture resolution.",
                "In our future implementations, we plan to use resource reservation mechanisms such as Differentiated Service [7, 3] and Class-based Kernel Resource Management [4] to provision/reserve network and CPU resources.",
                "In our multimedia system, the application adapter ensures that the video is encoded at the recommended frame rate and resolution using the specified compression scheme. 3.2 Applying HyARM to the Multimedia System Case Study HyARM is built atop TAO [13], a widely used open-source implementation of Real-time CORBA [12].",
                "HyARM can be applied to ensure efficient, predictable and adaptive resource management of any DRE system where resource availability and requirements are subject to dynamic change.",
                "Figure 3 shows the interaction of various parts of the DRE multimedia system developed with HyARM, TAO, and TAOs A/V Streaming Service.",
                "TAOs A/V Streaming service is an implementation of the CORBA A/V Streaming Service specification.",
                "TAOs A/V Streaming Service is a QoS-enabled video distribution service that can transfer video in real-time to one or more receivers.",
                "We use the A/V Streaming Service to transmit the video from the UAVs to the end receivers via the base station.",
                "Three entities of Receiver UAV TAO Resource Utilization HyARM Central Controller A/V Streaming Service : Sender MPEG1 MPEG4 Real Video HyARM Resource Monitor A/V Streaming Service : Receiver Compressed Video Compressed Video Application HyARM Application Adapter Remote Object Call Control Inputs Resource Utilization Resource Utilization / Control Inputs Control Inputs Legend Figure 3: Developing the DRE Multimedia System with HyARM HyARM, namely the resource monitors, central controller, and application adapters are built as CORBA servants, so they can be distributed throughout a DRE system.",
                "Resource monitors are remote CORBA objects that update the central controller periodically with the current resource utilization.",
                "Application adapters are collocated with applications since the two interact closely.",
                "As shown in Figure 3, UAVs compress the data using various compression schemes, such as MPEG1, MPEG4, and Real Video, and uses TAOs A/V streaming service to transmit the video to end receivers.",
                "HyARMs resource monitors continuously observe the system resource utilization and notify the central controller with the current utilization. 3 The interaction between the controller and the resource monitors uses the Observer pattern [5].",
                "When the controller receives resource utilization updates from monitors, it computes the necessary modifications to application(s) parameters and notifies application adapter(s) via a remote operation call.",
                "Application adapter(s), that are collocated with the application, modify the input parameters to the application - in our case video encoder - to modify the application resource utilization and QoS. 3 The base station is not included in the figure since it only retransmits the video received from UAVs to end receivers.",
                "Article 7 4.",
                "PERFORMANCE RESULTS AND ANALYSIS This section first describes the testbed that provides the infrastructure for our DRE multimedia system, which was used to evaluate the performance of HyARM.",
                "We then describe our experiments and analyze the results obtained to empirically evaluate how HyARM behaves during underand over-utilization of system resources. 4.1 Overview of the Hardware and Software Testbed Our experiments were performed on the Emulab testbed at University of Utah.",
                "The hardware configuration consists of two nodes acting as UAVs, one acting as base station, and one as end receiver.",
                "Video from the two UAVs were transmitted to a base station via a LAN configured with the following properties: average packet loss ratio of 0.3 and bandwidth 1 Mbps.",
                "The network bandwidth was chosen to be 1 Mbps since each UAV in the DRE multimedia system is allocated 250 Kbps.",
                "These parameters were chosen to emulate an unreliable wireless network with limited bandwidth between the UAVs and the base station.",
                "From the base station, the video was retransmitted to the end receiver via a reliable wireline link of 10 Mbps bandwidth with no packet loss.",
                "The hardware configuration of all the nodes was chosen as follows: 600 MHz Intel Pentium III processor, 256 MB physical memory, 4 Intel EtherExpress Pro 10/100 Mbps Ethernet ports, and 13 GB hard drive.",
                "A real-time version of Linux - TimeSys Linux/NET 3.1.214 based on RedHat Linux 9was used as the operating system for all nodes.",
                "The following software packages were also used for our experiments: (1) Ffmpeg 0.4.9-pre1, which is an open-source library (http: //www.ffmpeg.sourceforge.net/download.php) that compresses video into MPEG-2, MPEG-4, Real Video, and many other video formats. (2) Iftop 0.16, which is an opensource library (http://www.ex-parrot.com/∼pdw/iftop/) we used for monitoring network activity and bandwidth utilization. (3) ACE 5.4.3 + TAO 1.4.3, which is an opensource (http://www.dre.vanderbilt.edu/TAO) implementation of the Real-time CORBA [12] specification upon which HyARM is built.",
                "TAO provides the CORBA Audio/Video (A/V) Streaming Service that we use to transmit the video from the UAVs to end receivers via the base station. 4.2 Experiment Configuration Our experiment consisted of two (emulated) UAVs that simultaneously send video to the base station using the experimentation setup described in Section 4.1.",
                "At the base station, video was retransmitted to the end receivers (without any modifications), where it was stored to a file.",
                "Each UAV hosted two applications, one QoS-enabled application (emergency response), and one best-effort application (surveillance).",
                "Within each UAV, computational power is shared between the applications, while the network bandwidth is shared among all applications.",
                "To evaluate the QoS provided by HyARM, we monitored CPU utilization at the two UAVs, and network bandwidth utilization between the UAV and the base station.",
                "CPU resource utilization was not monitored at the base station and the end receiver since they performed no computationallyintensive operations.",
                "The resource utilization of the 10 Mpbs physical link between the base station and the end receiver does not affect QoS of applications and is not monitored by HyARM since it is nearly 10 times the 1 MB bandwidth of the LAN between the UAVs and the base station.",
                "The experiment also monitors properties of the video that affect the QoS of the applications, such as latency, jitter, frame rate, and resolution.",
                "The set point on resource utilization for each resource was specified at 0.69, which is the upper bound typically recommended by scheduling techniques, such as rate monotonic algorithm [9].",
                "Since studies [6] have shown that human eyes can perceive delays more than 200ms, we use this as the upper bound on jitter of the received video.",
                "QoS requirements for each class of application is specified during system initialization and is shown in Table 1. 4.3 Empirical Results and Analysis This section presents the results obtained from running the experiment described in Section 4.2 on our DRE multimedia system testbed.",
                "We used system resource utilization as a metric to evaluate the adaptive resource management capabilities of HyARM under varying input work loads.",
                "We also used application QoS as a metric to evaluate HyARMs capabilities to support end-to-end QoS requirements of the various classes of applications in the DRE multimedia system.",
                "We analyze these results to explain the significant differences in system performance and application QoS.",
                "Comparison of system performance is decomposed into comparison of resource utilization and application QoS.",
                "For system resource utilization, we compare (1) network bandwidth utilization of the local area network and (2) CPU utilization at the two UAV nodes.",
                "For application QoS, we compare mean values of video parameters, including (1) picture resolution, (2) frame rate, (3) latency, and (4) jitter.",
                "Comparison of resource utilization.",
                "Over-utilization of system resources in DRE systems can yield an unstable system.",
                "In contrast, under-utilization of system resources increases system cost.",
                "Figure 4 and Figure 5 compare the system resource utilization with and without HyARM.",
                "Figure 4 shows that HyARM maintains system utilization close to the desired utilization set point during fluctuation in input work load by transmitting video of higher (or lower) QoS for QoS-enabled (or best-effort) class of applications during over (or under) utilization of system resources.",
                "Figure 5 shows that without HyARM, network utilization was as high as 0.9 during increase in workload conditions, which is greater than the utilization set point of 0.7 by 0.2.",
                "As a result of over-utilization of resources, QoS of the received video, such as average latency and jitter, was affected significantly.",
                "Without HyARM, system resources were either under-utilized or over-utilized, both of which are undesirable.",
                "In contrast, with HyARM, system resource utilization is always close to the desired set point, even during fluctuations in application workload.",
                "During sudden fluctuation in application workload, system conditions may be temporarily undesirable, but are restored to the desired condition within several sampling periods.",
                "Temporary over-utilization of resources is permissible in our multimedia system since the quality of the video may be degraded for a short period of time, though application QoS will be degraded significantly if poor quality video is transmitted for a longer period of time.",
                "Comparison of application QoS.",
                "Figures 6, Figure 7, and Table 2 compare latency, jitter, resolution, and frameArticle 7 Class Resolution Frame Rate Latency (msec ) Jitter (msec) QoS Enabled 1024 x 768 25 200 200 Best-effort 320 x 240 15 300 250 Table 1: Application QoS Requirements Figure 4: Resource utilization with HyARM Figure 5: Resource utilization without HyARM rate of the received video, respectively.",
                "Table 2 shows that HyARM increases the resolution and frame video of QoSenabled applications, but decreases the resolution and frame rate of best effort applications.",
                "During over utilization of system resources, resolution and frame rate of lower priority applications are reduced to adapt to fluctuations in application workload and to maintain the utilization of resources at the specified set point.",
                "It can be seen from Figure 6 and Figure 7 that HyARM reduces the latency and jitter of the received video significantly.",
                "These figures show that the QoS of QoS-enabled applications is greatly improved by HyARM.",
                "Although application parameters, such as frame rate and resolutions, which affect the soft QoS requirements of best-effort applications may be compromised, the hard QoS requirements, such as latency and jitter, of all applications are met.",
                "HyARM responds to fluctuation in resource availability and/or demand by constant monitoring of resource utilization.",
                "As shown in Figure 4, when resources utilization increases above the desired set point, HyARM lowers the utilization by reducing the QoS of best-effort applications.",
                "This adaptation ensures that enough resources are available for QoS-enabled applications to meet their QoS needs.",
                "Figures 6 and 7 show that the values of latency and jitter of the received video of the system with HyARM are nearly half of the corresponding value of the system without HyARM.",
                "With HyARM, values of these parameters are well below the specified bounds, whereas without HyARM, these value are significantly above the specified bounds due to overutilization of the network bandwidth, which leads to network congestion and results in packet loss.",
                "HyARM avoids this by reducing video parameters such as resolution, frame-rate, and/or modifying the compression scheme used to compress the video.",
                "Our conclusions from analyzing the results described above are that applying adaptive middleware via hybrid control to DRE system helps to (1) improve application QoS, (2) increase system resource utilization, and (3) provide better predictability (lower latency and inter-frame delay) to QoSenabled applications.",
                "These improvements are achieved largely due to monitoring of system resource utilization, efficient system workload management, and adaptive resource provisioning by means of HyARMs network/CPU resource monitors, application adapter, and central controller, respectively. 5.",
                "RELATED WORK A number of control theoretic approaches have been applied to DRE systems recently.",
                "These techniques aid in overcoming limitations with traditional scheduling approaches that handle dynamic changes in resource availability poorly and result in a rigidly scheduled system that adapts poorly to change.",
                "A survey of these techniques is presented in [1].",
                "One such approach is feedback control scheduling (FCS) [2, 11].",
                "FCS algorithms dynamically adjust resource allocation by means of software feedback control loops.",
                "FCS algorithms are modeled and designed using rigorous controltheoretic methodologies.",
                "These algorithms provide robust and analytical performance assurances despite uncertainties in resource availability and/or demand.",
                "Although existing FCS algorithms have shown promise, these algorithms often assume that the system has continuous control variable(s) that can continuously be adjusted.",
                "While this assumption holds for certain classes of systems, there are many classes of DRE systems, such as avionics and total-ship computing environments that only support a finite a priori set of discrete configurations.",
                "The control variables in such systems are therefore intrinsically discrete.",
                "HyARM handles both continuous control variables, such as picture resolution, and discrete control variable, such as discrete set of frame rates.",
                "HyARM can therefore be applied to system that support continuous and/or discrete set of control variables.",
                "The DRE multimedia system as described in Section 2 is an example DRE system that offers both continuous (picture resolution) and discrete set (frame-rate) of control variables.",
                "These variables are modified by HyARM to achieve efficient resource utilization and improved application QoS. 6.",
                "CONCLUDING REMARKS Article 7 Figure 6: Comparison of Video Latency Figure 7: Comparison of Video Jitter Source Picture Size / Frame Rate With HyARM Without HyARM UAV1 QoS Enabled Application 1122 X 1496 / 25 960 X 720 / 20 UAV1 Best-effort Application 288 X 384 / 15 640 X 480 / 20 UAV2 QoS Enabled Application 1126 X 1496 / 25 960 X 720 / 20 UAV2 Best-effort Application 288 X 384 / 15 640 X 480 / 20 Table 2: Comparison of Video Quality Many distributed real-time and embedded (DRE) systems demand end-to-end quality of service (QoS) enforcement from their underlying platforms to operate correctly.",
                "These systems increasingly run in open environments, where resource availability is subject to dynamic change.",
                "To meet end-to-end QoS in dynamic environments, DRE systems can benefit from an adaptive middleware that monitors system resources, performs efficient application workload management, and enables efficient resource provisioning for executing applications.",
                "This paper described HyARM, an adaptive middleware, that provides effective resource management to DRE systems.",
                "HyARM employs hybrid control techniques to provide the adaptive middleware capabilities, such as resource monitoring and application adaptation that are key to providing the dynamic resource management capabilities for open DRE systems.",
                "We employed HyARM to a representative DRE multimedia system that is implemented using Real-time CORBA and CORBA A/V Streaming Service.",
                "We evaluated the performance of HyARM in a system composed of three distributed resources and two classes of applications with two applications each.",
                "Our empirical results indicate that HyARM ensures (1) efficient resource utilization by maintaining the resource utilization of system resources within the specified utilization bounds, (2) QoS requirements of QoS-enabled applications are met at all times.",
                "Overall, HyARM ensures efficient, predictable, and adaptive resource management for DRE systems. 7.",
                "REFERENCES [1] T. F. Abdelzaher, J. Stankovic, C. Lu, R. Zhang, and Y. Lu.",
                "Feddback Performance Control in Software Services.",
                "IEEE: Control Systems, 23(3), June 2003. [2] L. Abeni, L. Palopoli, G. Lipari, and J. Walpole.",
                "Analysis of a reservation-based feedback scheduler.",
                "In IEEE Real-Time Systems Symposium, Dec. 2002. [3] S. Blake, D. Black, M. Carlson, E. Davies, Z. Wang, and W. Weiss.",
                "An architecture for differentiated services.",
                "Network Information Center RFC 2475, Dec. 1998. [4] H. Franke, S. Nagar, C. Seetharaman, and V. Kashyap.",
                "Enabling Autonomic Workload Management in Linux.",
                "In Proceedings of the International Conference on Autonomic Computing (ICAC), New York, New York, May 2004.",
                "IEEE. [5] E. Gamma, R. Helm, R. Johnson, and J. Vlissides.",
                "Design Patterns: Elements of Reusable Object-Oriented Software.",
                "Addison-Wesley, Reading, MA, 1995. [6] G. Ghinea and J. P. Thomas.",
                "Qos impact on user perception and understanding of multimedia video clips.",
                "In MULTIMEDIA 98: Proceedings of the sixth ACM international conference on Multimedia, pages 49-54, Bristol, United Kingdom, 1998.",
                "ACM Press. [7] Internet Engineering Task Force.",
                "Differentiated Services Working Group (diffserv) Charter. www.ietf.org/html.charters/diffserv-charter.html, 2000. [8] X. Koutsoukos, R. Tekumalla, B. Natarajan, and C. Lu.",
                "Hybrid Supervisory Control of Real-Time Systems.",
                "In 11th IEEE Real-Time and Embedded Technology and Applications Symposium, San Francisco, California, Mar. 2005. [9] J. Lehoczky, L. Sha, and Y. Ding.",
                "The Rate Monotonic Scheduling Algorithm: Exact Characterization and Average Case Behavior.",
                "In Proceedings of the 10th IEEE Real-Time Systems Symposium (RTSS 1989), pages 166-171.",
                "IEEE Computer Society Press, 1989. [10] J. Loyall, J. Gossett, C. Gill, R. Schantz, J. Zinky, P. Pal, R. Shapiro, C. Rodrigues, M. Atighetchi, and D. Karr.",
                "Comparing and Contrasting Adaptive Middleware Support in Wide-Area and Embedded Distributed Object Applications.",
                "In Proceedings of the 21st International Conference on Distributed Computing Systems (ICDCS-21), pages 625-634.",
                "IEEE, Apr. 2001. [11] C. Lu, J.",
                "A. Stankovic, G. Tao, and S. H. Son.",
                "Feedback Control Real-Time Scheduling: Framework, Modeling, and Algorithms.",
                "Real-Time Systems Journal, 23(1/2):85-126, July 2002. [12] Object Management Group.",
                "Real-time CORBA Specification, OMG Document formal/02-08-02 edition, Aug. 2002. [13] D. C. Schmidt, D. L. Levine, and S. Mungee.",
                "The Design and Performance of Real-Time Object Request Brokers.",
                "Computer Communications, 21(4):294-324, Apr. 1998. [14] Thomas Sikora.",
                "Trends and Perspectives in Image and Video Coding.",
                "In Proceedings of the IEEE, Jan. 2005. [15] X. Wang, H.-M. Huang, V. Subramonian, C. Lu, and C. Gill.",
                "CAMRIT: Control-based Adaptive Middleware for Real-time Image Transmission.",
                "In Proc. of the 10th IEEE Real-Time and Embedded Tech. and Applications Symp. (RTAS), Toronto, Canada, May 2004.",
                "Article 7"
            ],
            "original_annotated_samples": [
                "First, we describe the structure and functionality of the <br>hybrid adaptive resourcemanagement middleware</br> (HyARM), which provides adaptive resource management using hybrid control techniques for adapting to workload fluctuations and resource availability."
            ],
            "translated_annotated_samples": [
                "Primero, describimos la estructura y funcionalidad del <br>Middleware de Gestión de Recursos Adaptativos Híbridos</br> (HyARM), que proporciona gestión de recursos adaptativa utilizando técnicas de control híbridas para adaptarse a las fluctuaciones de carga de trabajo y disponibilidad de recursos."
            ],
            "translated_text": "Evaluando la Gestión de Recursos Adaptativa para Sistemas Empotrados Distribuidos en Tiempo Real de Nishanth Shankaran, Xenofon Koutsoukos, Douglas C. Schmidt y Aniruddha Gokhale, Dept. de EECS, Universidad de Vanderbilt, Nashville RESUMEN Un problema desafiante enfrentado por investigadores y desarrolladores de sistemas distribuidos en tiempo real y embebidos (DRE) es idear e implementar estrategias efectivas de gestión adaptativa de recursos que puedan cumplir con los requisitos de calidad de servicio (QoS) de extremo a extremo en condiciones operativas variables. Este artículo presenta dos contribuciones a la investigación en gestión de recursos adaptativa para sistemas DRE. Primero, describimos la estructura y funcionalidad del <br>Middleware de Gestión de Recursos Adaptativos Híbridos</br> (HyARM), que proporciona gestión de recursos adaptativa utilizando técnicas de control híbridas para adaptarse a las fluctuaciones de carga de trabajo y disponibilidad de recursos. Segundo, evaluamos el comportamiento adaptativo de HyARM a través de experimentos en un sistema multimedia DRE que distribuye video en tiempo real. Nuestros resultados indican que HyARM produce un rendimiento del sistema predecible, estable y alto, incluso ante cargas de trabajo y disponibilidad de recursos fluctuantes. Categorías y Descriptores de Asignaturas C.2.4 [Sistemas Distribuidos]: Aplicaciones Distribuidas; D.4.7 [Organización y Diseño]: Sistemas en Tiempo Real y Sistemas Embebidos 1. INTRODUCCIÓN Lograr la calidad de servicio (QoS) en tiempo real de extremo a extremo es particularmente importante para sistemas distribuidos en tiempo real y embebidos (DRE) abiertos que enfrentan limitaciones de recursos, como potencia de cómputo limitada y ancho de banda de red. La sobreutilización de estos recursos del sistema puede generar un comportamiento impredecible e inestable, mientras que la subutilización puede resultar en un costo excesivo del sistema. Un enfoque prometedor para cumplir de manera efectiva con estos requisitos de calidad de servicio de extremo a extremo, por lo tanto, es desarrollar y aplicar middleware adaptativo [10, 15], que es un software cuyas propiedades funcionales y relacionadas con la calidad de servicio pueden ser modificadas estática o dinámicamente. Las modificaciones estáticas se realizan para reducir la huella, aprovechar las capacidades existentes en plataformas específicas, habilitar la selección funcional y/o minimizar las dependencias de infraestructura de hardware/software. Los objetivos de las modificaciones dinámicas incluyen optimizar las respuestas del sistema a entornos o requisitos cambiantes, como la modificación de interconexiones de componentes, niveles de potencia, disponibilidad de ancho de banda de CPU y red, latencia/jitter y carga de trabajo. En los sistemas DRE abiertos, el middleware adaptativo debe realizar modificaciones de manera confiable, es decir, cumpliendo con los estrictos requisitos de calidad de servicio de extremo a extremo, lo que requiere la especificación y aplicación de límites superiores e inferiores en la utilización de recursos del sistema para garantizar un uso efectivo de los recursos del sistema. Para cumplir con estos requisitos, hemos desarrollado el Middleware de Gestión de Recursos Híbrido Adaptativo (HyARM), que es un middleware de gestión de recursos distribuido de código abierto. HyARM se basa en técnicas híbridas de control teórico, las cuales proporcionan un marco teórico para diseñar el control de sistemas complejos con dinámicas tanto continuas como discretas. En nuestro estudio de caso, que implica un sistema distribuido de distribución de video en tiempo real, la tarea de gestión de recursos adaptativa consiste en controlar la utilización de los diferentes recursos, cuyas utilizaciones están descritas por variables continuas. Logramos esto adaptando la resolución del video transmitido, que se modela como una variable continua, y cambiando la velocidad de cuadros y la compresión, que se modelan mediante acciones discretas. Hemos implementado HyARM sobre el ORB ACE (TAO) [13], que es una implementación de la especificación CORBA en tiempo real [12]. Nuestros resultados muestran que (1) HyARM garantiza una utilización efectiva de los recursos del sistema y (2) se cumplen los requisitos de calidad de servicio de extremo a extremo de las aplicaciones de mayor prioridad, incluso ante fluctuaciones en la carga de trabajo. El resto del documento está organizado de la siguiente manera: la Sección 2 describe la arquitectura, funcionalidad y modelo de utilización de recursos de nuestro estudio de caso del sistema multimedia DRE; la Sección 3 explica la estructura y funcionalidad de HyARM; la Sección 4 evalúa el comportamiento adaptativo de HyARM a través de experimentos en nuestro estudio de caso del sistema multimedia; la Sección 5 compara nuestra investigación sobre HyARM con trabajos relacionados; y la Sección 6 presenta observaciones finales. El código y ejemplos de HyARM están disponibles en www.dre.vanderbilt.edu/∼nshankar/HyARM/. Artículo 7 2. ESTUDIO DE CASO: SISTEMA MULTIMEDIA DRE Esta sección describe la arquitectura y los requisitos de QoS de nuestro sistema multimedia DRE. 2.1 Arquitectura del Sistema Multimedia Enlace Inalámbrico Enlace Inalámbrico Enlace Inalámbrico ` ` ` Enlace Físico Enlace Físico Enlace Físico Estación Base Extremo Receptor Extremo Receptor Extremo Receptor` Enlace Físico Extremo Receptor Cámara UAV Codificador de Video Cámara Codificador de Video Cámara Codificador de Video Cámara UAV Codificador de Video Cámara Codificador de Video Cámara Codificador de Video Cámara UAV Codificador de Video Cámara Codificador de Video Cámara Codificador de Video Figura 1: Arquitectura del Sistema Multimedia DRE La arquitectura de nuestro sistema multimedia DRE se muestra en la Figura 1 y consta de las siguientes entidades: (1) Fuente de datos (captura de video por UAV), donde el video es capturado (relacionado con el tema de interés) por la(s) cámara(s) en cada UAV, seguido por la codificación del video crudo utilizando un esquema de codificación específico y transmitiendo el video a la siguiente etapa en la cadena de procesamiento. (2) Distribuidor de datos (estación base), donde el video es procesado para eliminar ruido, seguido por la retransmisión del video procesado a la siguiente etapa en la cadena de procesamiento. (3) Destinos (centro de comando y control), donde el video recibido es nuevamente procesado para eliminar ruido, luego decodificado y finalmente renderizado al usuario final a través de pantallas gráficas. Se han logrado mejoras significativas en las técnicas de codificación/decodificación y compresión (des) de video como resultado de los avances recientes en las técnicas de codificación y compresión de video [14]. Los esquemas comunes de compresión de video son MPEG1, MPEG-2, Real Video y MPEG-4. Cada esquema de compresión se caracteriza por sus requisitos de recursos, por ejemplo, la potencia computacional para (des)comprimir la señal de video y el ancho de banda de red necesario para transmitir la señal de video comprimida. Las propiedades del video comprimido, como la resolución y la velocidad de fotogramas, determinan tanto la calidad como los requisitos de recursos del video. Nuestro estudio de caso del sistema multimedia tiene los siguientes requisitos de calidad de servicio (QoS) en tiempo real de extremo a extremo: (1) latencia, (2) retardo entre cuadros (también conocido como jitter), (3) frecuencia de cuadros y (4) resolución de imagen. Estos requisitos de calidad de servicio (QoS) pueden clasificarse como duros o blandos. Los requisitos de QoS estrictos deben ser cumplidos por el sistema subyacente en todo momento, mientras que los requisitos de QoS flexibles pueden ser ocasionalmente incumplidos. Para nuestro estudio de caso, tratamos los requisitos de QoS como la latencia y la variabilidad de retardo como requisitos de QoS más estrictos y nos esforzamos por cumplir con estos requisitos en todo momento. Por el contrario, tratamos los requisitos de QoS como la tasa de cuadros de video y la resolución de imagen como requisitos de QoS más flexibles y modificamos estas propiedades de video de manera adaptativa para manejar los cambios dinámicos en la disponibilidad de recursos de manera efectiva. Aunque a menudo se presentan como dos conjuntos de requisitos discretos, en la práctica suelen ser dos extremos de un continuo que va desde más suave a más duro en lugar de dos puntos disjuntos. La potencia informática requerida por las tareas de captura y codificación de video depende de factores dinámicos, como la velocidad del UAV, la velocidad del sujeto (si el sujeto es móvil) y la distancia entre el UAV y el sujeto. La cantidad de ancho de banda de la red inalámbrica disponible para transmitir video capturado por UAVs a estaciones base también depende de la conectividad inalámbrica entre los UAVs y la estación base, que a su vez depende de factores dinámicos como la velocidad de los UAVs y la distancia relativa entre los UAVs y las estaciones base. El ancho de banda del enlace entre la estación base y el receptor final está limitado, pero es más estable que el ancho de banda de la red inalámbrica. Los requisitos de recursos y la disponibilidad de recursos están sujetos a cambios dinámicos. Dos clases de aplicaciones - habilitadas para QoS y de mejor esfuerzo - utilizan la infraestructura del sistema multimedia descrita anteriormente para transmitir video a sus respectivos receptores. Las aplicaciones de clase habilitada para QoS tienen mayor prioridad sobre las aplicaciones de clase de mejor esfuerzo. En nuestro estudio, las aplicaciones de respuesta de emergencia pertenecen a la clase habilitada para la calidad de servicio (QoS), y las aplicaciones de vigilancia pertenecen a la clase de mejor esfuerzo. Por ejemplo, dado que un flujo de datos de una aplicación de respuesta de emergencia es de mayor importancia que un flujo de video de una aplicación de vigilancia, recibe más recursos de extremo a extremo. Dado que la disponibilidad de recursos afecta significativamente la calidad de servicio, utilizamos la utilización actual de recursos como indicador principal del rendimiento del sistema. Nos referimos al nivel actual de utilización de recursos del sistema como la condición del sistema. Basándonos en esta definición, podemos clasificar las condiciones del sistema como estando subutilizadas, sobreutilizadas o utilizadas de manera efectiva. La subutilización de los recursos del sistema ocurre cuando la utilización actual de los recursos es menor que el límite inferior deseado de utilización de recursos. En este sistema, los recursos residuales del sistema (es decir, ancho de banda de red y potencia computacional) están disponibles en grandes cantidades después de cumplir con los requisitos de calidad de servicio de extremo a extremo de las aplicaciones. Estos recursos residuales se pueden utilizar para aumentar la calidad de servicio de las aplicaciones. Por ejemplo, la CPU residual y el ancho de banda de red pueden ser utilizados para entregar videos de mejor calidad (por ejemplo, con mayor resolución y mayor velocidad de cuadros) a los receptores finales. La sobreutilización de los recursos del sistema ocurre cuando la utilización actual de recursos es mayor que el límite superior deseado de utilización de recursos. Esta condición puede surgir por la pérdida de recursos - ancho de banda de red y/o potencia de cómputo en la estación base, receptor final o en el UAV - o puede ser debido a un aumento en las demandas de recursos por parte de las aplicaciones. La sobreutilización es generalmente indeseable ya que la calidad del video recibido (como la resolución y la velocidad de cuadros) y las propiedades de puntualidad (como la latencia y la fluctuación) se degradan y pueden resultar en un sistema inestable (y por lo tanto ineficaz). La utilización efectiva de recursos es la condición deseada del sistema, ya que garantiza que se cumplan los requisitos de calidad de servicio de extremo a extremo del sistema multimedia basado en UAV y que la utilización de los recursos del sistema, es decir, el ancho de banda de la red y la potencia computacional, se encuentren dentro de sus límites de utilización deseados. El artículo 7, sección 3 describe las técnicas que aplicamos para lograr una utilización efectiva, incluso ante la disponibilidad y/o demanda fluctuante de recursos. DESCRIPCIÓN DE HYARM Esta sección describe la arquitectura del Middleware de Gestión de Recursos Adaptativos Híbrido (HyARM). HyARM garantiza un rendimiento eficiente y predecible del sistema al proporcionar gestión adaptativa de recursos, que incluye la monitorización de los recursos del sistema y la imposición de límites en la utilización de recursos de las aplicaciones. 3.1 Estructura y Funcionalidad de HyARM Leyenda de Utilización de Recursos Asignación de Recursos Parámetros de Aplicación Figura 2: Arquitectura de HyARM HyARM está compuesto por tres tipos de entidades mostradas en la Figura 2 y descritas a continuación: Los monitores de recursos observan la utilización general de recursos para cada tipo de recurso y la utilización de recursos por aplicación. En nuestro sistema multimedia, hay monitores de recursos para la utilización de la CPU y el ancho de banda de la red. Los monitores de la CPU observan la utilización de recursos de la CPU de los UAV, la estación base y los receptores finales. Los monitores de ancho de banda de red observan la utilización de recursos de red de (1) el enlace de red inalámbrica entre los UAV y la estación base y (2) el enlace de red cableada entre la estación base y los receptores finales. El controlador central mantiene la utilización de recursos del sistema por debajo de un límite deseado mediante (1) el procesamiento de actualizaciones periódicas que recibe de los monitores de recursos y (2) modificando la ejecución de las aplicaciones en consecuencia, por ejemplo, utilizando diferentes algoritmos de ejecución u operando la aplicación con mayor/menor calidad de servicio (QoS). Este proceso de adaptación garantiza que los recursos del sistema se utilicen de manera eficiente y se cumplan los requisitos de calidad de servicio de la aplicación de extremo a extremo. En nuestro sistema multimedia, el controlador HyARM determina el valor de parámetros de la aplicación como (1) esquemas de compresión de video, como Real Video y MPEG-4, y/o (2) velocidad de cuadros, y (3) resolución de imagen. Desde la perspectiva de las técnicas híbridas de control teórico [8], los diferentes esquemas de compresión de video y la velocidad de cuadros forman las variables discretas de la ejecución de la aplicación, mientras que la resolución de imagen forma las variables continuas. Los adaptadores de aplicación modifican la ejecución de la aplicación de acuerdo con los parámetros recomendados por el controlador y garantizan que el funcionamiento de la aplicación esté de acuerdo con los parámetros recomendados. En la implementación actual de HyARM, el adaptador de la aplicación modifica los parámetros de entrada a la aplicación que afectan la calidad de servicio (QoS) de la aplicación y la utilización de recursos, como el esquema de compresión, la velocidad de fotogramas y la resolución de la imagen. En nuestras futuras implementaciones, planeamos utilizar mecanismos de reserva de recursos como Differentiated Service [7, 3] y Class-based Kernel Resource Management [4] para aprovisionar/reservar recursos de red y CPU. En nuestro sistema multimedia, el adaptador de la aplicación se asegura de que el video se codifique a la velocidad de cuadros y resolución recomendadas utilizando el esquema de compresión especificado. 3.2 Aplicando HyARM al Estudio de Caso del Sistema Multimedia. HyARM se construye sobre TAO [13], una implementación de código abierto ampliamente utilizada de CORBA en tiempo real [12]. HyARM se puede aplicar para garantizar una gestión eficiente, predecible y adaptable de recursos en cualquier sistema DRE donde la disponibilidad y los requisitos de recursos están sujetos a cambios dinámicos. La Figura 3 muestra la interacción de varias partes del sistema multimedia DRE desarrollado con HyARM, TAO y el Servicio de Streaming de Audio y Video de TAOs. El servicio de transmisión de audio/vídeo de TAO es una implementación de la especificación del Servicio de Transmisión de Audio/Vídeo de CORBA. El servicio de transmisión de audio y video de TAOs es un servicio de distribución de video habilitado para QoS que puede transferir video en tiempo real a uno o más receptores. Utilizamos el Servicio de Transmisión de Audio y Video para enviar el video desde los VANTs a los receptores finales a través de la estación base. Tres entidades del sistema multimedia DRE con HyARM, a saber, los monitores de recursos, el controlador central y los adaptadores de aplicaciones, están construidos como servidores CORBA, por lo que pueden distribuirse en todo el sistema DRE. Los monitores de recursos son objetos CORBA remotos que actualizan periódicamente al controlador central con la utilización actual de recursos. Los adaptadores de aplicaciones se ubican junto a las aplicaciones ya que ambas interactúan estrechamente. Como se muestra en la Figura 3, los UAV comprimen los datos utilizando varios esquemas de compresión, como MPEG1, MPEG4 y Real Video, y utilizan el servicio de transmisión de audio/vídeo de TAOs para enviar el video a los receptores finales. Los monitores de recursos de HyARMs observan continuamente la utilización de recursos del sistema y notifican al controlador central con la utilización actual. La interacción entre el controlador y los monitores de recursos utiliza el patrón Observer. Cuando el controlador recibe actualizaciones de utilización de recursos de los monitores, calcula las modificaciones necesarias a los parámetros de la(s) aplicación(es) y notifica al adaptador de la aplicación mediante una llamada de operación remota. Los adaptadores de aplicación, que están ubicados junto a la aplicación, modifican los parámetros de entrada de la aplicación, en nuestro caso el codificador de video, para modificar la utilización de recursos de la aplicación y la calidad de servicio. La estación base no está incluida en la figura ya que solo retransmite el video recibido de los UAV a los receptores finales. Artículo 7 4. RESULTADOS DE RENDIMIENTO Y ANÁLISIS Esta sección describe primero el banco de pruebas que proporciona la infraestructura para nuestro sistema multimedia DRE, que se utilizó para evaluar el rendimiento de HyARM. Luego describimos nuestros experimentos y analizamos los resultados obtenidos para evaluar empíricamente cómo se comporta HyARM durante la subutilización y sobreutilización de los recursos del sistema. 4.1 Descripción general del banco de pruebas de hardware y software Nuestros experimentos se realizaron en el banco de pruebas Emulab en la Universidad de Utah. La configuración de hardware consiste en dos nodos actuando como UAVs, uno actuando como estación base y otro como receptor final. El video de los dos UAV fue transmitido a una estación base a través de una LAN configurada con las siguientes propiedades: una relación promedio de pérdida de paquetes de 0.3 y un ancho de banda de 1 Mbps. El ancho de banda de la red se eligió para ser de 1 Mbps ya que a cada UAV en el sistema multimedia DRE se le asignan 250 Kbps. Estos parámetros fueron elegidos para emular una red inalámbrica poco confiable con ancho de banda limitado entre los UAVs y la estación base. Desde la estación base, el video fue retransmitido al receptor final a través de un enlace por cable confiable de 10 Mbps de ancho de banda sin pérdida de paquetes. La configuración de hardware de todos los nodos fue elegida de la siguiente manera: procesador Intel Pentium III de 600 MHz, 256 MB de memoria física, 4 puertos Ethernet Intel EtherExpress Pro de 10/100 Mbps y disco duro de 13 GB. Se utilizó una versión en tiempo real de Linux - TimeSys Linux/NET 3.1.214 basada en RedHat Linux 9 como sistema operativo para todos los nodos. Los siguientes paquetes de software también fueron utilizados para nuestros experimentos: (1) Ffmpeg 0.4.9-pre1, que es una biblioteca de código abierto (http://www.ffmpeg.sourceforge.net/download.php) que comprime video en formatos MPEG-2, MPEG-4, Real Video, y muchos otros formatos de video. (2) Iftop 0.16, que es una biblioteca de código abierto (http://www.ex-parrot.com/∼pdw/iftop/) que utilizamos para monitorear la actividad de red y la utilización del ancho de banda. (3) ACE 5.4.3 + TAO 1.4.3, que es una implementación de código abierto (http://www.dre.vanderbilt.edu/TAO) de la especificación CORBA en tiempo real [12] sobre la cual se construye HyARM. TAO proporciona el Servicio de Transmisión de Audio/Video (A/V) CORBA que utilizamos para transmitir el video desde los UAVs a los receptores finales a través de la estación base. Configuración del experimento Nuestro experimento consistió en dos UAVs (emulados) que enviaron video simultáneamente a la estación base utilizando la configuración experimental descrita en la Sección 4.1. En la estación base, el video fue retransmitido a los receptores finales (sin ninguna modificación), donde fue almacenado en un archivo. Cada UAV alojaba dos aplicaciones, una aplicación habilitada para QoS (respuesta de emergencia) y una aplicación de mejor esfuerzo (vigilancia). Dentro de cada UAV, el poder computacional se comparte entre las aplicaciones, mientras que el ancho de banda de la red se comparte entre todas las aplicaciones. Para evaluar la calidad de servicio proporcionada por HyARM, monitoreamos la utilización de la CPU en los dos UAV y la utilización del ancho de banda de la red entre el UAV y la estación base. La utilización de recursos de la CPU no se monitoreó en la estación base y en el receptor final, ya que no realizaron operaciones computacionalmente intensivas. La utilización de recursos del enlace físico de 10 Mbps entre la estación base y el receptor final no afecta la calidad de servicio de las aplicaciones y no es monitoreada por HyARM, ya que es casi 10 veces el ancho de banda de 1 MB de la LAN entre los UAV y la estación base. El experimento también monitorea propiedades del video que afectan la calidad de servicio de las aplicaciones, como la latencia, la variabilidad de retardo, la tasa de cuadros y la resolución. El punto de ajuste en la utilización de recursos para cada recurso se especificó en 0.69, que es el límite superior típicamente recomendado por técnicas de programación, como el algoritmo monótono de tasa [9]. Dado que los estudios [6] han demostrado que los ojos humanos pueden percibir retrasos de más de 200 ms, utilizamos esto como límite superior de la variabilidad en el video recibido. Los requisitos de QoS para cada clase de aplicación se especifican durante la inicialización del sistema y se muestran en la Tabla 1. 4.3 Resultados empíricos y análisis Esta sección presenta los resultados obtenidos al ejecutar el experimento descrito en la Sección 4.2 en nuestro banco de pruebas del sistema multimedia DRE. Utilizamos la utilización de recursos del sistema como métrica para evaluar las capacidades de gestión de recursos adaptativos de HyARM bajo cargas de trabajo de entrada variables. También utilizamos la calidad de servicio de la aplicación como métrica para evaluar las capacidades de HyARMs para satisfacer los requisitos de calidad de servicio de extremo a extremo de las diferentes clases de aplicaciones en el sistema multimedia DRE. Analizamos estos resultados para explicar las diferencias significativas en el rendimiento del sistema y la calidad de servicio de la aplicación. La comparación del rendimiento del sistema se descompone en la comparación de la utilización de recursos y la calidad de servicio de la aplicación. Para la utilización de recursos del sistema, comparamos (1) la utilización del ancho de banda de la red de área local y (2) la utilización de la CPU en los dos nodos UAV. Para la aplicación de QoS, comparamos los valores medios de los parámetros de video, incluyendo (1) resolución de imagen, (2) velocidad de cuadros, (3) latencia y (4) jitter. Comparación de la utilización de recursos. La sobreutilización de recursos del sistema en sistemas DRE puede generar un sistema inestable. Por el contrario, la subutilización de los recursos del sistema aumenta el costo del sistema. La Figura 4 y la Figura 5 comparan la utilización de recursos del sistema con y sin HyARM. La Figura 4 muestra que HyARM mantiene la utilización del sistema cerca del punto de ajuste de utilización deseado durante la fluctuación en la carga de trabajo de entrada al transmitir video de mayor (o menor) calidad de servicio para la clase de aplicaciones con calidad de servicio habilitada (o de mejor esfuerzo) durante la sobre (o sub) utilización de los recursos del sistema. La Figura 5 muestra que sin HyARM, la utilización de la red alcanzó hasta 0.9 durante el aumento de las condiciones de carga de trabajo, lo cual es mayor que el punto de ajuste de utilización de 0.7 en 0.2. Como resultado de la sobreutilización de recursos, la calidad de servicio (QoS) del video recibido, como la latencia promedio y el jitter, se vio afectada significativamente. Sin HyARM, los recursos del sistema estaban subutilizados o sobreutilizados, ambos de los cuales son indeseables. En contraste, con HyARM, la utilización de recursos del sistema siempre está cerca del punto de ajuste deseado, incluso durante las fluctuaciones en la carga de trabajo de la aplicación. Durante fluctuaciones repentinas en la carga de trabajo de la aplicación, las condiciones del sistema pueden ser temporalmente indeseables, pero se restauran a la condición deseada dentro de varios períodos de muestreo. La sobreutilización temporal de recursos es permisible en nuestro sistema multimedia, ya que la calidad del video puede degradarse por un corto período de tiempo, aunque la calidad del servicio de la aplicación se verá significativamente degradada si se transmite un video de baja calidad durante un período de tiempo más largo. Comparación de la calidad de servicio de la aplicación. Las Figuras 6, 7 y la Tabla 2 comparan la latencia, la variabilidad, la resolución y la velocidad de cuadro del video recibido, respectivamente. La Tabla 2 muestra que HyARM aumenta la resolución y la velocidad de cuadro de video de las aplicaciones habilitadas para QoS, pero disminuye la resolución y la velocidad de cuadro de las aplicaciones de mejor esfuerzo. Durante la sobreutilización de los recursos del sistema, la resolución y la velocidad de cuadros de las aplicaciones de menor prioridad se reducen para adaptarse a las fluctuaciones en la carga de trabajo de la aplicación y mantener la utilización de los recursos en el punto establecido especificado. Se puede observar en la Figura 6 y la Figura 7 que HyARM reduce significativamente la latencia y la variabilidad del video recibido. Estas cifras muestran que la calidad de servicio de las aplicaciones habilitadas para QoS se mejora considerablemente con HyARM. Aunque los parámetros de la aplicación, como la velocidad de cuadros y las resoluciones, que afectan los requisitos de QoS suave de las aplicaciones de mejor esfuerzo pueden verse comprometidos, se cumplen los requisitos de QoS estrictos, como la latencia y la variabilidad, de todas las aplicaciones. HyARM responde a las fluctuaciones en la disponibilidad de recursos y/o la demanda mediante el monitoreo constante de la utilización de recursos. Como se muestra en la Figura 4, cuando la utilización de recursos aumenta por encima del punto de ajuste deseado, HyARM reduce la utilización disminuyendo la calidad de servicio de las aplicaciones de mejor esfuerzo. Esta adaptación garantiza que haya suficientes recursos disponibles para que las aplicaciones habilitadas para QoS cumplan con sus necesidades de QoS. Las figuras 6 y 7 muestran que los valores de latencia y jitter del video recibido del sistema con HyARM son casi la mitad de los valores correspondientes del sistema sin HyARM. Con HyARM, los valores de estos parámetros están muy por debajo de los límites especificados, mientras que sin HyARM, estos valores están significativamente por encima de los límites especificados debido a la sobreutilización del ancho de banda de la red, lo que conduce a la congestión de la red y resulta en la pérdida de paquetes. HyARM evita esto reduciendo parámetros de video como la resolución, la velocidad de cuadros y/o modificando el esquema de compresión utilizado para comprimir el video. Nuestras conclusiones al analizar los resultados descritos anteriormente son que la aplicación de middleware adaptativo a través de control híbrido en sistemas DRE ayuda a (1) mejorar la calidad de servicio de la aplicación, (2) aumentar la utilización de recursos del sistema y (3) proporcionar una mejor previsibilidad (menor latencia y retraso entre fotogramas) a las aplicaciones habilitadas para calidad de servicio. Estas mejoras se logran en gran medida gracias al monitoreo de la utilización de recursos del sistema, la gestión eficiente de la carga de trabajo del sistema y la provisión adaptativa de recursos mediante los monitores de recursos de red/CPU de HyARMs, el adaptador de aplicaciones y el controlador central, respectivamente. TRABAJO RELACIONADO Recientemente se han aplicado varios enfoques teóricos de control a los sistemas DRE. Estas técnicas ayudan a superar las limitaciones de los enfoques de programación tradicionales que manejan mal los cambios dinámicos en la disponibilidad de recursos y resultan en un sistema programado rígidamente que se adapta mal a los cambios. Se presenta una encuesta de estas técnicas en [1]. Un enfoque de este tipo es la programación de control de retroalimentación (FCS) [2, 11]. Los algoritmos de FCS ajustan dinámicamente la asignación de recursos mediante bucles de control de retroalimentación de software. Los algoritmos de FCS se modelan y diseñan utilizando metodologías rigurosas de teoría de control. Estos algoritmos ofrecen garantías de rendimiento robusto y analítico a pesar de las incertidumbres en la disponibilidad de recursos y/o demanda. Aunque los algoritmos de FCS existentes han mostrado promesa, a menudo estos algoritmos asumen que el sistema tiene variable(s) de control continuas que pueden ajustarse continuamente. Si bien esta suposición es válida para ciertas clases de sistemas, existen muchas clases de sistemas DRE, como la aviónica y los entornos informáticos de barcos completos, que solo admiten un conjunto finito a priori de configuraciones discretas. Por lo tanto, las variables de control en tales sistemas son intrínsecamente discretas. HyARM maneja tanto variables de control continuas, como la resolución de la imagen, como variables de control discretas, como un conjunto discreto de velocidades de cuadro. HyARM puede aplicarse a sistemas que admiten un conjunto continuo y/o discreto de variables de control. El sistema multimedia DRE descrito en la Sección 2 es un ejemplo de sistema DRE que ofrece tanto variables de control continuas (resolución de imagen) como un conjunto discreto (velocidad de cuadros). Estas variables son modificadas por HyARM para lograr una utilización eficiente de recursos y una mejora en la calidad de servicio de la aplicación. CONCLUSIONES Artículo 7 Figura 6: Comparación de la latencia del video Figura 7: Comparación de la fluctuación del video Fuente Tamaño de imagen / Velocidad de cuadro Con HyARM Sin HyARM UAV1 Aplicación habilitada para QoS 1122 X 1496 / 25 960 X 720 / 20 UAV1 Aplicación de mejor esfuerzo 288 X 384 / 15 640 X 480 / 20 UAV2 Aplicación habilitada para QoS 1126 X 1496 / 25 960 X 720 / 20 UAV2 Aplicación de mejor esfuerzo 288 X 384 / 15 640 X 480 / 20 Tabla 2: Comparación de la calidad del video Muchos sistemas distribuidos en tiempo real y embebidos (DRE) demandan la aplicación correcta de la calidad de servicio (QoS) de extremo a extremo desde sus plataformas subyacentes para operar correctamente. Estos sistemas cada vez se ejecutan en entornos abiertos, donde la disponibilidad de recursos está sujeta a cambios dinámicos. Para cumplir con la calidad de servicio de extremo a extremo en entornos dinámicos, los sistemas DRE pueden beneficiarse de un middleware adaptativo que monitorea los recursos del sistema, realiza una gestión eficiente de la carga de trabajo de la aplicación y permite una provisión eficiente de recursos para la ejecución de aplicaciones. Este artículo describe HyARM, un middleware adaptativo que proporciona una gestión efectiva de recursos a los sistemas DRE. HyARM emplea técnicas de control híbrido para proporcionar las capacidades de middleware adaptativo, como el monitoreo de recursos y la adaptación de aplicaciones, que son clave para ofrecer las capacidades de gestión de recursos dinámicos para sistemas DRE abiertos. Empleamos HyARM en un sistema multimedia DRE representativo que está implementado utilizando CORBA en tiempo real y el Servicio de Transmisión de Audio/Vídeo de CORBA. Evaluamos el rendimiento de HyARM en un sistema compuesto por tres recursos distribuidos y dos clases de aplicaciones con dos aplicaciones cada una. Nuestros resultados empíricos indican que HyARM garantiza (1) la utilización eficiente de recursos al mantener la utilización de recursos del sistema dentro de los límites de utilización especificados, (2) los requisitos de calidad de servicio de las aplicaciones habilitadas para QoS se cumplen en todo momento. En general, HyARM garantiza una gestión eficiente, predecible y adaptable de recursos para sistemas DRE. REFERENCIAS [1] T. F. Abdelzaher, J. Stankovic, C. Lu, R. Zhang y Y. Lu. Control de rendimiento de retroalimentación en servicios de software. IEEE: Sistemas de Control, 23(3), junio de 2003. [2] L. Abeni, L. Palopoli, G. Lipari y J. Walpole. Análisis de un planificador de retroalimentación basado en reservas. En el Simposio de Sistemas en Tiempo Real de IEEE, Diciembre de 2002. [3] S. Blake, D. Black, M. Carlson, E. Davies, Z. Wang y W. Weiss. Una arquitectura para servicios diferenciados. Centro de Información de la Red RFC 2475, Dic. 1998. [4] H. Franke, S. Nagar, C. Seetharaman y V. Kashyap. Habilitando la Gestión Autonómica de la Carga de Trabajo en Linux. En Actas de la Conferencia Internacional sobre Computación Autónoma (ICAC), Nueva York, Nueva York, mayo de 2004. IEEE. [5] E. Gamma, R. Helm, R. Johnson, y J. Vlissides. Patrones de diseño: Elementos de software orientado a objetos reutilizable. Addison-Wesley, Reading, MA, 1995. [6] G. Ghinea y J. P. Thomas. Impacto de QoS en la percepción y comprensión del usuario de videoclips multimedia. En MULTIMEDIA 98: Actas de la sexta conferencia internacional de ACM sobre Multimedia, páginas 49-54, Bristol, Reino Unido, 1998. ACM Press. [7] Grupo de Trabajo de Ingeniería de Internet. Grupo de Trabajo de Servicios Diferenciados (diffserv) Carta. www.ietf.org/html.charters/diffserv-charter.html, 2000. [8] X. Koutsoukos, R. Tekumalla, B. Natarajan y C. Lu. Control híbrido supervisado de sistemas en tiempo real. En el 11º Simposio de Tecnología y Aplicaciones en Tiempo Real y Sistemas Empotrados de IEEE, San Francisco, California, Mar. 2005. [9] J. Lehoczky, L. Sha y Y. Ding. El algoritmo de programación Rate Monotonic: Caracterización exacta y comportamiento en casos promedio. En Actas del 10º Simposio de Sistemas en Tiempo Real de IEEE (RTSS 1989), páginas 166-171. IEEE Computer Society Press, 1989. [10] J. Loyall, J. Gossett, C. Gill, R. Schantz, J. Zinky, P. Pal, R. Shapiro, C. Rodrigues, M. Atighetchi, and D. Karr.\n\nIEEE Computer Society Press, 1989. [10] J. Loyall, J. Gossett, C. Gill, R. Schantz, J. Zinky, P. Pal, R. Shapiro, C. Rodrigues, M. Atighetchi y D. Karr. Comparando y contrastando el soporte de middleware adaptativo en aplicaciones de objetos distribuidos de área amplia y embebidos. En Actas de la 21ª Conferencia Internacional sobre Sistemas de Computación Distribuida (ICDCS-21), páginas 625-634. IEEE, Abr. 2001. [11] C. Lu, J. A. Stankovic, G. Tao y S. H. Son. Programación en tiempo real con control de retroalimentación: Marco, modelado y algoritmos. Revista de Sistemas en Tiempo Real, 23(1/2):85-126, julio de 2002. [12] Object Management Group. Especificación CORBA en tiempo real, documento formal/02-08-02 de OMG, edición de agosto de 2002. [13] D. C. Schmidt, D. L. Levine y S. Mungee. El diseño y rendimiento de los corredores de solicitudes de objetos en tiempo real. Comunicaciones de Computadoras, 21(4):294-324, Abr. 1998. [14] Thomas Sikora. Tendencias y perspectivas en codificación de imágenes y videos. En Actas del IEEE, enero de 2005. [15] X. Wang, H.-M. Huang, V. Subramonian, C. Lu y C. Gill. CAMRIT: Middleware Adaptativo Basado en Control para la Transmisión de Imágenes en Tiempo Real. En Actas del 10º Simposio de Tecnología y Aplicaciones en Tiempo Real y Sistemas Empotrados del IEEE (RTAS), Toronto, Canadá, mayo de 2004. Artículo 7 ",
            "candidates": [],
            "error": [
                [
                    ""
                ]
            ]
        },
        "hybrid control technique": {
            "translated_key": "técnicas de control híbridas",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Evaluating Adaptive Resource Management for Distributed Real-Time Embedded Systems Nishanth Shankaran, ∗ Xenofon Koutsoukos, Douglas C. Schmidt, and Aniruddha Gokhale Dept.",
                "of EECS, Vanderbilt University, Nashville ABSTRACT A challenging problem faced by researchers and developers of distributed real-time and embedded (DRE) systems is devising and implementing effective adaptive resource management strategies that can meet end-to-end quality of service (QoS) requirements in varying operational conditions.",
                "This paper presents two contributions to research in adaptive resource management for DRE systems.",
                "First, we describe the structure and functionality of the Hybrid Adaptive Resourcemanagement Middleware (HyARM), which provides adaptive resource management using <br>hybrid control technique</br>s for adapting to workload fluctuations and resource availability.",
                "Second, we evaluate the adaptive behavior of HyARM via experiments on a DRE multimedia system that distributes video in real-time.",
                "Our results indicate that HyARM yields predictable, stable, and high system performance, even in the face of fluctuating workload and resource availability.",
                "Categories and Subject Descriptors C.2.4 [Distributed Systems]: Distributed Applications; D.4.7 [Organization and Design]: Real-time Systems and Embedded Systems 1.",
                "INTRODUCTION Achieving end-to-end real-time quality of service (QoS) is particularly important for open distributed real-time and embedded (DRE) systems that face resource constraints, such as limited computing power and network bandwidth.",
                "Overutilization of these system resources can yield unpredictable and unstable behavior, whereas under-utilization can yield excessive system cost.",
                "A promising approach to meeting these end-to-end QoS requirements effectively, therefore, is to develop and apply adaptive middleware [10, 15], which is software whose functional and QoS-related properties can be modified either statically or dynamically.",
                "Static modifications are carried out to reduce footprint, leverage capabilities that exist in specific platforms, enable functional subsetting, and/or minimize hardware/software infrastructure dependencies.",
                "Objectives of dynamic modifications include optimizing system responses to changing environments or requirements, such as changing component interconnections, power-levels, CPU and network bandwidth availability, latency/jitter, and workload.",
                "In open DRE systems, adaptive middleware must make such modifications dependably, i.e., while meeting stringent end-to-end QoS requirements, which requires the specification and enforcement of upper and lower bounds on system resource utilization to ensure effective use of system resources.",
                "To meet these requirements, we have developed the Hybrid Adaptive Resource-management Middleware (HyARM), which is an open-source1 distributed resource management middleware.",
                "HyARM is based on hybrid control theoretic techniques [8], which provide a theoretical framework for designing control of complex system with both continuous and discrete dynamics.",
                "In our case study, which involves a distributed real-time video distribution system, the task of adaptive resource management is to control the utilization of the different resources, whose utilizations are described by continuous variables.",
                "We achieve this by adapting the resolution of the transmitted video, which is modeled as a continuous variable, and by changing the frame-rate and the compression, which are modeled by discrete actions.",
                "We have implemented HyARM atop The ACE ORB (TAO) [13], which is an implementation of the Real-time CORBA specification [12].",
                "Our results show that (1) HyARM ensures effective system resource utilization and (2) end-to-end QoS requirements of higher priority applications are met, even in the face of fluctuations in workload.",
                "The remainder of the paper is organized as follows: Section 2 describes the architecture, functionality, and resource utilization model of our DRE multimedia system case study; Section 3 explains the structure and functionality of HyARM; Section 4 evaluates the adaptive behavior of HyARM via experiments on our multimedia system case study; Section 5 compares our research on HyARM with related work; and Section 6 presents concluding remarks. 1 The code and examples for HyARM are available at www. dre.vanderbilt.edu/∼nshankar/HyARM/.",
                "Article 7 2.",
                "CASE STUDY: DRE MULTIMEDIA SYSTEM This section describes the architecture and QoS requirements of our DRE multimedia system. 2.1 Multimedia System Architecture Wireless Link Wireless Link Wireless Link ` ` ` Physical Link Physical Link Physical Link Base Station End Receiver End Receiver End Receiver` Physical Link End Receiver UAV Camera Video Encoder Camera Video Encoder Camera Video Encoder UAV Camera Video Encoder Camera Video Encoder Camera Video Encoder UAV Camera Video Encoder Camera Video Encoder Camera Video Encoder Figure 1: DRE Multimedia System Architecture The architecture for our DRE multimedia system is shown in Figure 1 and consists of the following entities: (1)Data source (video capture by UAV), where video is captured (related to subject of interest) by camera(s) on each UAV, followed by encoding of raw video using a specific encoding scheme and transmitting the video to the next stage in the pipeline. (2)Data distributor (base station), where the video is processed to remove noise, followed by retransmission of the processed video to the next stage in the pipeline. (3) Sinks (command and control center), where the received video is again processed to remove noise, then decoded and finally rendered to end user via graphical displays.",
                "Significant improvements in video encoding/decoding and (de)compression techniques have been made as a result of recent advances in video encoding and compression techniques [14].",
                "Common video compression schemes are MPEG1, MPEG-2, Real Video, and MPEG-4.",
                "Each compression scheme is characterized by its resource requirement, e.g., the computational power to (de)compress the video signal and the network bandwidth required to transmit the compressed video signal.",
                "Properties of the compressed video, such as resolution and frame-rate determine both the quality and the resource requirements of the video.",
                "Our multimedia system case study has the following endto-end real-time QoS requirements: (1) latency, (2) interframe delay (also know as jitter), (3) frame rate, and (4) picture resolution.",
                "These QoS requirements can be classified as being either hard or soft.",
                "Hard QoS requirements should be met by the underlying system at all times, whereas soft QoS requirements can be missed occasionally.2 For our case study, we treat QoS requirements such as latency and jitter as harder QoS requirements and strive to meet these requirements at all times.",
                "In contrast, we treat QoS requirements such as video frame rate and picture resolution as softer QoS requirements and modify these video properties adaptively to handle dynamic changes in resource availabil2 Although hard and soft are often portrayed as two discrete requirement sets, in practice they are usually two ends of a continuum ranging from softer to harder rather than two disjoint points. ity effectively. 2.2 DRE Multimedia System Rresources There are two primary types of resources in our DRE multimedia system: (1) processors that provide computational power available at the UAVs, base stations, and end receivers and (2) network links that provide communication bandwidth between UAVs, base stations, and end receivers.",
                "The computing power required by the video capture and encoding tasks depends on dynamic factors, such as speed of the UAV, speed of the subject (if the subject is mobile), and distance between UAV and the subject.",
                "The wireless network bandwidth available to transmit video captured by UAVs to base stations also depends on the wireless connectivity between the UAVs and the base station, which in-turn depend on dynamic factors such as the speed of the UAVs and the relative distance between UAVs and base stations.",
                "The bandwidth of the link between the base station and the end receiver is limited, but more stable than the bandwidth of the wireless network.",
                "Resource requirements and availability of resources are subjected to dynamic changes.",
                "Two classes of applications - QoS-enabled and best-effort - use the multimedia system infrastructure described above to transmit video to their respective receivers.",
                "QoS-enabled class of applications have higher priority over best-effort class of application.",
                "In our study, emergency response applications belong to QoS-enabled and surveillance applications belong to best-effort class.",
                "For example, since a stream from an emergency response application is of higher importance than a video stream from a surveillance application, it receives more resources end-to-end.",
                "Since resource availability significantly affects QoS, we use current resource utilization as the primary indicator of system performance.",
                "We refer to the current level of system resource utilization as the system condition.",
                "Based on this definition, we can classify system conditions as being either under, over, or effectively utilized.",
                "Under-utilization of system resources occurs when the current resource utilization is lower than the desired lower bound on resource utilization.",
                "In this system condition, residual system resources (i.e., network bandwidth and computational power) are available in large amounts after meeting end-to-end QoS requirements of applications.",
                "These residual resources can be used to increase the QoS of the applications.",
                "For example, residual CPU and network bandwidth can be used to deliver better quality video (e.g., with greater resolution and higher frame rate) to end receivers.",
                "Over-utilization of system resources occurs when the current resource utilization is higher than the desired upper bound on resource utilization.",
                "This condition can arise from loss of resources - network bandwidth and/or computing power at base station, end receiver or at UAV - or may be due to an increase in resource demands by applications.",
                "Over-utilization is generally undesirable since the quality of the received video (such as resolution and frame rate) and timeliness properties (such as latency and jitter) are degraded and may result in an unstable (and thus ineffective) system.",
                "Effective resource utilization is the desired system condition since it ensures that end-to-end QoS requirements of the UAV-based multimedia system are met and utilization of both system resources, i.e., network bandwidth and computational power, are within their desired utilization bounds.",
                "Article 7 Section 3 describes techniques we applied to achieve effective utilization, even in the face of fluctuating resource availability and/or demand. 3.",
                "OVERVIEW OF HYARM This section describes the architecture of the Hybrid Adaptive Resource-management Middleware (HyARM).",
                "HyARM ensures efficient and predictable system performance by providing adaptive resource management, including monitoring of system resources and enforcing bounds on application resource utilization. 3.1 HyARM Structure and Functionality Resource Utilization Legend Resource Allocation Application Parameters Figure 2: HyARM Architecture HyARM is composed of three types of entities shown in Figure 2 and described below: Resource monitors observe the overall resource utilization for each type of resource and resource utilization per application.",
                "In our multimedia system, there are resource monitors for CPU utilization and network bandwidth.",
                "CPU monitors observe the CPU resource utilization of UAVs, base station, and end receivers.",
                "Network bandwidth monitors observe the network resource utilization of (1) wireless network link between UAVs and the base station and (2) wired network link between the base station and end receivers.",
                "The central controller maintains the system resource utilization below a desired bound by (1) processing periodic updates it receives from resource monitors and (2) modifying the execution of applications accordingly, e.g., by using different execution algorithms or operating the application with increased/decreased QoS.",
                "This adaptation process ensures that system resources are utilized efficiently and end-to-end application QoS requirements are met.",
                "In our multimedia system, the HyARM controller determines the value of application parameters such as (1) video compression schemes, such as Real Video and MPEG-4, and/or (2) frame rate, and (3) picture resolution.",
                "From the perspective of hybrid control theoretic techniques [8], the different video compression schemes and frame rate form the discrete variables of application execution and picture resolution forms the continuous variables.",
                "Application adapters modify application execution according to parameters recommended by the controller and ensures that the operation of the application is in accordance with the recommended parameters.",
                "In the current mplementation of HyARM, the application adapter modifies the input parameters to the application that affect application QoS and resource utilization - compression scheme, frame rate, and picture resolution.",
                "In our future implementations, we plan to use resource reservation mechanisms such as Differentiated Service [7, 3] and Class-based Kernel Resource Management [4] to provision/reserve network and CPU resources.",
                "In our multimedia system, the application adapter ensures that the video is encoded at the recommended frame rate and resolution using the specified compression scheme. 3.2 Applying HyARM to the Multimedia System Case Study HyARM is built atop TAO [13], a widely used open-source implementation of Real-time CORBA [12].",
                "HyARM can be applied to ensure efficient, predictable and adaptive resource management of any DRE system where resource availability and requirements are subject to dynamic change.",
                "Figure 3 shows the interaction of various parts of the DRE multimedia system developed with HyARM, TAO, and TAOs A/V Streaming Service.",
                "TAOs A/V Streaming service is an implementation of the CORBA A/V Streaming Service specification.",
                "TAOs A/V Streaming Service is a QoS-enabled video distribution service that can transfer video in real-time to one or more receivers.",
                "We use the A/V Streaming Service to transmit the video from the UAVs to the end receivers via the base station.",
                "Three entities of Receiver UAV TAO Resource Utilization HyARM Central Controller A/V Streaming Service : Sender MPEG1 MPEG4 Real Video HyARM Resource Monitor A/V Streaming Service : Receiver Compressed Video Compressed Video Application HyARM Application Adapter Remote Object Call Control Inputs Resource Utilization Resource Utilization / Control Inputs Control Inputs Legend Figure 3: Developing the DRE Multimedia System with HyARM HyARM, namely the resource monitors, central controller, and application adapters are built as CORBA servants, so they can be distributed throughout a DRE system.",
                "Resource monitors are remote CORBA objects that update the central controller periodically with the current resource utilization.",
                "Application adapters are collocated with applications since the two interact closely.",
                "As shown in Figure 3, UAVs compress the data using various compression schemes, such as MPEG1, MPEG4, and Real Video, and uses TAOs A/V streaming service to transmit the video to end receivers.",
                "HyARMs resource monitors continuously observe the system resource utilization and notify the central controller with the current utilization. 3 The interaction between the controller and the resource monitors uses the Observer pattern [5].",
                "When the controller receives resource utilization updates from monitors, it computes the necessary modifications to application(s) parameters and notifies application adapter(s) via a remote operation call.",
                "Application adapter(s), that are collocated with the application, modify the input parameters to the application - in our case video encoder - to modify the application resource utilization and QoS. 3 The base station is not included in the figure since it only retransmits the video received from UAVs to end receivers.",
                "Article 7 4.",
                "PERFORMANCE RESULTS AND ANALYSIS This section first describes the testbed that provides the infrastructure for our DRE multimedia system, which was used to evaluate the performance of HyARM.",
                "We then describe our experiments and analyze the results obtained to empirically evaluate how HyARM behaves during underand over-utilization of system resources. 4.1 Overview of the Hardware and Software Testbed Our experiments were performed on the Emulab testbed at University of Utah.",
                "The hardware configuration consists of two nodes acting as UAVs, one acting as base station, and one as end receiver.",
                "Video from the two UAVs were transmitted to a base station via a LAN configured with the following properties: average packet loss ratio of 0.3 and bandwidth 1 Mbps.",
                "The network bandwidth was chosen to be 1 Mbps since each UAV in the DRE multimedia system is allocated 250 Kbps.",
                "These parameters were chosen to emulate an unreliable wireless network with limited bandwidth between the UAVs and the base station.",
                "From the base station, the video was retransmitted to the end receiver via a reliable wireline link of 10 Mbps bandwidth with no packet loss.",
                "The hardware configuration of all the nodes was chosen as follows: 600 MHz Intel Pentium III processor, 256 MB physical memory, 4 Intel EtherExpress Pro 10/100 Mbps Ethernet ports, and 13 GB hard drive.",
                "A real-time version of Linux - TimeSys Linux/NET 3.1.214 based on RedHat Linux 9was used as the operating system for all nodes.",
                "The following software packages were also used for our experiments: (1) Ffmpeg 0.4.9-pre1, which is an open-source library (http: //www.ffmpeg.sourceforge.net/download.php) that compresses video into MPEG-2, MPEG-4, Real Video, and many other video formats. (2) Iftop 0.16, which is an opensource library (http://www.ex-parrot.com/∼pdw/iftop/) we used for monitoring network activity and bandwidth utilization. (3) ACE 5.4.3 + TAO 1.4.3, which is an opensource (http://www.dre.vanderbilt.edu/TAO) implementation of the Real-time CORBA [12] specification upon which HyARM is built.",
                "TAO provides the CORBA Audio/Video (A/V) Streaming Service that we use to transmit the video from the UAVs to end receivers via the base station. 4.2 Experiment Configuration Our experiment consisted of two (emulated) UAVs that simultaneously send video to the base station using the experimentation setup described in Section 4.1.",
                "At the base station, video was retransmitted to the end receivers (without any modifications), where it was stored to a file.",
                "Each UAV hosted two applications, one QoS-enabled application (emergency response), and one best-effort application (surveillance).",
                "Within each UAV, computational power is shared between the applications, while the network bandwidth is shared among all applications.",
                "To evaluate the QoS provided by HyARM, we monitored CPU utilization at the two UAVs, and network bandwidth utilization between the UAV and the base station.",
                "CPU resource utilization was not monitored at the base station and the end receiver since they performed no computationallyintensive operations.",
                "The resource utilization of the 10 Mpbs physical link between the base station and the end receiver does not affect QoS of applications and is not monitored by HyARM since it is nearly 10 times the 1 MB bandwidth of the LAN between the UAVs and the base station.",
                "The experiment also monitors properties of the video that affect the QoS of the applications, such as latency, jitter, frame rate, and resolution.",
                "The set point on resource utilization for each resource was specified at 0.69, which is the upper bound typically recommended by scheduling techniques, such as rate monotonic algorithm [9].",
                "Since studies [6] have shown that human eyes can perceive delays more than 200ms, we use this as the upper bound on jitter of the received video.",
                "QoS requirements for each class of application is specified during system initialization and is shown in Table 1. 4.3 Empirical Results and Analysis This section presents the results obtained from running the experiment described in Section 4.2 on our DRE multimedia system testbed.",
                "We used system resource utilization as a metric to evaluate the adaptive resource management capabilities of HyARM under varying input work loads.",
                "We also used application QoS as a metric to evaluate HyARMs capabilities to support end-to-end QoS requirements of the various classes of applications in the DRE multimedia system.",
                "We analyze these results to explain the significant differences in system performance and application QoS.",
                "Comparison of system performance is decomposed into comparison of resource utilization and application QoS.",
                "For system resource utilization, we compare (1) network bandwidth utilization of the local area network and (2) CPU utilization at the two UAV nodes.",
                "For application QoS, we compare mean values of video parameters, including (1) picture resolution, (2) frame rate, (3) latency, and (4) jitter.",
                "Comparison of resource utilization.",
                "Over-utilization of system resources in DRE systems can yield an unstable system.",
                "In contrast, under-utilization of system resources increases system cost.",
                "Figure 4 and Figure 5 compare the system resource utilization with and without HyARM.",
                "Figure 4 shows that HyARM maintains system utilization close to the desired utilization set point during fluctuation in input work load by transmitting video of higher (or lower) QoS for QoS-enabled (or best-effort) class of applications during over (or under) utilization of system resources.",
                "Figure 5 shows that without HyARM, network utilization was as high as 0.9 during increase in workload conditions, which is greater than the utilization set point of 0.7 by 0.2.",
                "As a result of over-utilization of resources, QoS of the received video, such as average latency and jitter, was affected significantly.",
                "Without HyARM, system resources were either under-utilized or over-utilized, both of which are undesirable.",
                "In contrast, with HyARM, system resource utilization is always close to the desired set point, even during fluctuations in application workload.",
                "During sudden fluctuation in application workload, system conditions may be temporarily undesirable, but are restored to the desired condition within several sampling periods.",
                "Temporary over-utilization of resources is permissible in our multimedia system since the quality of the video may be degraded for a short period of time, though application QoS will be degraded significantly if poor quality video is transmitted for a longer period of time.",
                "Comparison of application QoS.",
                "Figures 6, Figure 7, and Table 2 compare latency, jitter, resolution, and frameArticle 7 Class Resolution Frame Rate Latency (msec ) Jitter (msec) QoS Enabled 1024 x 768 25 200 200 Best-effort 320 x 240 15 300 250 Table 1: Application QoS Requirements Figure 4: Resource utilization with HyARM Figure 5: Resource utilization without HyARM rate of the received video, respectively.",
                "Table 2 shows that HyARM increases the resolution and frame video of QoSenabled applications, but decreases the resolution and frame rate of best effort applications.",
                "During over utilization of system resources, resolution and frame rate of lower priority applications are reduced to adapt to fluctuations in application workload and to maintain the utilization of resources at the specified set point.",
                "It can be seen from Figure 6 and Figure 7 that HyARM reduces the latency and jitter of the received video significantly.",
                "These figures show that the QoS of QoS-enabled applications is greatly improved by HyARM.",
                "Although application parameters, such as frame rate and resolutions, which affect the soft QoS requirements of best-effort applications may be compromised, the hard QoS requirements, such as latency and jitter, of all applications are met.",
                "HyARM responds to fluctuation in resource availability and/or demand by constant monitoring of resource utilization.",
                "As shown in Figure 4, when resources utilization increases above the desired set point, HyARM lowers the utilization by reducing the QoS of best-effort applications.",
                "This adaptation ensures that enough resources are available for QoS-enabled applications to meet their QoS needs.",
                "Figures 6 and 7 show that the values of latency and jitter of the received video of the system with HyARM are nearly half of the corresponding value of the system without HyARM.",
                "With HyARM, values of these parameters are well below the specified bounds, whereas without HyARM, these value are significantly above the specified bounds due to overutilization of the network bandwidth, which leads to network congestion and results in packet loss.",
                "HyARM avoids this by reducing video parameters such as resolution, frame-rate, and/or modifying the compression scheme used to compress the video.",
                "Our conclusions from analyzing the results described above are that applying adaptive middleware via hybrid control to DRE system helps to (1) improve application QoS, (2) increase system resource utilization, and (3) provide better predictability (lower latency and inter-frame delay) to QoSenabled applications.",
                "These improvements are achieved largely due to monitoring of system resource utilization, efficient system workload management, and adaptive resource provisioning by means of HyARMs network/CPU resource monitors, application adapter, and central controller, respectively. 5.",
                "RELATED WORK A number of control theoretic approaches have been applied to DRE systems recently.",
                "These techniques aid in overcoming limitations with traditional scheduling approaches that handle dynamic changes in resource availability poorly and result in a rigidly scheduled system that adapts poorly to change.",
                "A survey of these techniques is presented in [1].",
                "One such approach is feedback control scheduling (FCS) [2, 11].",
                "FCS algorithms dynamically adjust resource allocation by means of software feedback control loops.",
                "FCS algorithms are modeled and designed using rigorous controltheoretic methodologies.",
                "These algorithms provide robust and analytical performance assurances despite uncertainties in resource availability and/or demand.",
                "Although existing FCS algorithms have shown promise, these algorithms often assume that the system has continuous control variable(s) that can continuously be adjusted.",
                "While this assumption holds for certain classes of systems, there are many classes of DRE systems, such as avionics and total-ship computing environments that only support a finite a priori set of discrete configurations.",
                "The control variables in such systems are therefore intrinsically discrete.",
                "HyARM handles both continuous control variables, such as picture resolution, and discrete control variable, such as discrete set of frame rates.",
                "HyARM can therefore be applied to system that support continuous and/or discrete set of control variables.",
                "The DRE multimedia system as described in Section 2 is an example DRE system that offers both continuous (picture resolution) and discrete set (frame-rate) of control variables.",
                "These variables are modified by HyARM to achieve efficient resource utilization and improved application QoS. 6.",
                "CONCLUDING REMARKS Article 7 Figure 6: Comparison of Video Latency Figure 7: Comparison of Video Jitter Source Picture Size / Frame Rate With HyARM Without HyARM UAV1 QoS Enabled Application 1122 X 1496 / 25 960 X 720 / 20 UAV1 Best-effort Application 288 X 384 / 15 640 X 480 / 20 UAV2 QoS Enabled Application 1126 X 1496 / 25 960 X 720 / 20 UAV2 Best-effort Application 288 X 384 / 15 640 X 480 / 20 Table 2: Comparison of Video Quality Many distributed real-time and embedded (DRE) systems demand end-to-end quality of service (QoS) enforcement from their underlying platforms to operate correctly.",
                "These systems increasingly run in open environments, where resource availability is subject to dynamic change.",
                "To meet end-to-end QoS in dynamic environments, DRE systems can benefit from an adaptive middleware that monitors system resources, performs efficient application workload management, and enables efficient resource provisioning for executing applications.",
                "This paper described HyARM, an adaptive middleware, that provides effective resource management to DRE systems.",
                "HyARM employs <br>hybrid control technique</br>s to provide the adaptive middleware capabilities, such as resource monitoring and application adaptation that are key to providing the dynamic resource management capabilities for open DRE systems.",
                "We employed HyARM to a representative DRE multimedia system that is implemented using Real-time CORBA and CORBA A/V Streaming Service.",
                "We evaluated the performance of HyARM in a system composed of three distributed resources and two classes of applications with two applications each.",
                "Our empirical results indicate that HyARM ensures (1) efficient resource utilization by maintaining the resource utilization of system resources within the specified utilization bounds, (2) QoS requirements of QoS-enabled applications are met at all times.",
                "Overall, HyARM ensures efficient, predictable, and adaptive resource management for DRE systems. 7.",
                "REFERENCES [1] T. F. Abdelzaher, J. Stankovic, C. Lu, R. Zhang, and Y. Lu.",
                "Feddback Performance Control in Software Services.",
                "IEEE: Control Systems, 23(3), June 2003. [2] L. Abeni, L. Palopoli, G. Lipari, and J. Walpole.",
                "Analysis of a reservation-based feedback scheduler.",
                "In IEEE Real-Time Systems Symposium, Dec. 2002. [3] S. Blake, D. Black, M. Carlson, E. Davies, Z. Wang, and W. Weiss.",
                "An architecture for differentiated services.",
                "Network Information Center RFC 2475, Dec. 1998. [4] H. Franke, S. Nagar, C. Seetharaman, and V. Kashyap.",
                "Enabling Autonomic Workload Management in Linux.",
                "In Proceedings of the International Conference on Autonomic Computing (ICAC), New York, New York, May 2004.",
                "IEEE. [5] E. Gamma, R. Helm, R. Johnson, and J. Vlissides.",
                "Design Patterns: Elements of Reusable Object-Oriented Software.",
                "Addison-Wesley, Reading, MA, 1995. [6] G. Ghinea and J. P. Thomas.",
                "Qos impact on user perception and understanding of multimedia video clips.",
                "In MULTIMEDIA 98: Proceedings of the sixth ACM international conference on Multimedia, pages 49-54, Bristol, United Kingdom, 1998.",
                "ACM Press. [7] Internet Engineering Task Force.",
                "Differentiated Services Working Group (diffserv) Charter. www.ietf.org/html.charters/diffserv-charter.html, 2000. [8] X. Koutsoukos, R. Tekumalla, B. Natarajan, and C. Lu.",
                "Hybrid Supervisory Control of Real-Time Systems.",
                "In 11th IEEE Real-Time and Embedded Technology and Applications Symposium, San Francisco, California, Mar. 2005. [9] J. Lehoczky, L. Sha, and Y. Ding.",
                "The Rate Monotonic Scheduling Algorithm: Exact Characterization and Average Case Behavior.",
                "In Proceedings of the 10th IEEE Real-Time Systems Symposium (RTSS 1989), pages 166-171.",
                "IEEE Computer Society Press, 1989. [10] J. Loyall, J. Gossett, C. Gill, R. Schantz, J. Zinky, P. Pal, R. Shapiro, C. Rodrigues, M. Atighetchi, and D. Karr.",
                "Comparing and Contrasting Adaptive Middleware Support in Wide-Area and Embedded Distributed Object Applications.",
                "In Proceedings of the 21st International Conference on Distributed Computing Systems (ICDCS-21), pages 625-634.",
                "IEEE, Apr. 2001. [11] C. Lu, J.",
                "A. Stankovic, G. Tao, and S. H. Son.",
                "Feedback Control Real-Time Scheduling: Framework, Modeling, and Algorithms.",
                "Real-Time Systems Journal, 23(1/2):85-126, July 2002. [12] Object Management Group.",
                "Real-time CORBA Specification, OMG Document formal/02-08-02 edition, Aug. 2002. [13] D. C. Schmidt, D. L. Levine, and S. Mungee.",
                "The Design and Performance of Real-Time Object Request Brokers.",
                "Computer Communications, 21(4):294-324, Apr. 1998. [14] Thomas Sikora.",
                "Trends and Perspectives in Image and Video Coding.",
                "In Proceedings of the IEEE, Jan. 2005. [15] X. Wang, H.-M. Huang, V. Subramonian, C. Lu, and C. Gill.",
                "CAMRIT: Control-based Adaptive Middleware for Real-time Image Transmission.",
                "In Proc. of the 10th IEEE Real-Time and Embedded Tech. and Applications Symp. (RTAS), Toronto, Canada, May 2004.",
                "Article 7"
            ],
            "original_annotated_samples": [
                "First, we describe the structure and functionality of the Hybrid Adaptive Resourcemanagement Middleware (HyARM), which provides adaptive resource management using <br>hybrid control technique</br>s for adapting to workload fluctuations and resource availability.",
                "HyARM employs <br>hybrid control technique</br>s to provide the adaptive middleware capabilities, such as resource monitoring and application adaptation that are key to providing the dynamic resource management capabilities for open DRE systems."
            ],
            "translated_annotated_samples": [
                "Primero, describimos la estructura y funcionalidad del Middleware de Gestión de Recursos Adaptativos Híbridos (HyARM), que proporciona gestión de recursos adaptativa utilizando <br>técnicas de control híbridas</br> para adaptarse a las fluctuaciones de carga de trabajo y disponibilidad de recursos.",
                "HyARM emplea <br>técnicas de control híbrido</br> para proporcionar las capacidades de middleware adaptativo, como el monitoreo de recursos y la adaptación de aplicaciones, que son clave para ofrecer las capacidades de gestión de recursos dinámicos para sistemas DRE abiertos."
            ],
            "translated_text": "Evaluando la Gestión de Recursos Adaptativa para Sistemas Empotrados Distribuidos en Tiempo Real de Nishanth Shankaran, Xenofon Koutsoukos, Douglas C. Schmidt y Aniruddha Gokhale, Dept. de EECS, Universidad de Vanderbilt, Nashville RESUMEN Un problema desafiante enfrentado por investigadores y desarrolladores de sistemas distribuidos en tiempo real y embebidos (DRE) es idear e implementar estrategias efectivas de gestión adaptativa de recursos que puedan cumplir con los requisitos de calidad de servicio (QoS) de extremo a extremo en condiciones operativas variables. Este artículo presenta dos contribuciones a la investigación en gestión de recursos adaptativa para sistemas DRE. Primero, describimos la estructura y funcionalidad del Middleware de Gestión de Recursos Adaptativos Híbridos (HyARM), que proporciona gestión de recursos adaptativa utilizando <br>técnicas de control híbridas</br> para adaptarse a las fluctuaciones de carga de trabajo y disponibilidad de recursos. Segundo, evaluamos el comportamiento adaptativo de HyARM a través de experimentos en un sistema multimedia DRE que distribuye video en tiempo real. Nuestros resultados indican que HyARM produce un rendimiento del sistema predecible, estable y alto, incluso ante cargas de trabajo y disponibilidad de recursos fluctuantes. Categorías y Descriptores de Asignaturas C.2.4 [Sistemas Distribuidos]: Aplicaciones Distribuidas; D.4.7 [Organización y Diseño]: Sistemas en Tiempo Real y Sistemas Embebidos 1. INTRODUCCIÓN Lograr la calidad de servicio (QoS) en tiempo real de extremo a extremo es particularmente importante para sistemas distribuidos en tiempo real y embebidos (DRE) abiertos que enfrentan limitaciones de recursos, como potencia de cómputo limitada y ancho de banda de red. La sobreutilización de estos recursos del sistema puede generar un comportamiento impredecible e inestable, mientras que la subutilización puede resultar en un costo excesivo del sistema. Un enfoque prometedor para cumplir de manera efectiva con estos requisitos de calidad de servicio de extremo a extremo, por lo tanto, es desarrollar y aplicar middleware adaptativo [10, 15], que es un software cuyas propiedades funcionales y relacionadas con la calidad de servicio pueden ser modificadas estática o dinámicamente. Las modificaciones estáticas se realizan para reducir la huella, aprovechar las capacidades existentes en plataformas específicas, habilitar la selección funcional y/o minimizar las dependencias de infraestructura de hardware/software. Los objetivos de las modificaciones dinámicas incluyen optimizar las respuestas del sistema a entornos o requisitos cambiantes, como la modificación de interconexiones de componentes, niveles de potencia, disponibilidad de ancho de banda de CPU y red, latencia/jitter y carga de trabajo. En los sistemas DRE abiertos, el middleware adaptativo debe realizar modificaciones de manera confiable, es decir, cumpliendo con los estrictos requisitos de calidad de servicio de extremo a extremo, lo que requiere la especificación y aplicación de límites superiores e inferiores en la utilización de recursos del sistema para garantizar un uso efectivo de los recursos del sistema. Para cumplir con estos requisitos, hemos desarrollado el Middleware de Gestión de Recursos Híbrido Adaptativo (HyARM), que es un middleware de gestión de recursos distribuido de código abierto. HyARM se basa en técnicas híbridas de control teórico, las cuales proporcionan un marco teórico para diseñar el control de sistemas complejos con dinámicas tanto continuas como discretas. En nuestro estudio de caso, que implica un sistema distribuido de distribución de video en tiempo real, la tarea de gestión de recursos adaptativa consiste en controlar la utilización de los diferentes recursos, cuyas utilizaciones están descritas por variables continuas. Logramos esto adaptando la resolución del video transmitido, que se modela como una variable continua, y cambiando la velocidad de cuadros y la compresión, que se modelan mediante acciones discretas. Hemos implementado HyARM sobre el ORB ACE (TAO) [13], que es una implementación de la especificación CORBA en tiempo real [12]. Nuestros resultados muestran que (1) HyARM garantiza una utilización efectiva de los recursos del sistema y (2) se cumplen los requisitos de calidad de servicio de extremo a extremo de las aplicaciones de mayor prioridad, incluso ante fluctuaciones en la carga de trabajo. El resto del documento está organizado de la siguiente manera: la Sección 2 describe la arquitectura, funcionalidad y modelo de utilización de recursos de nuestro estudio de caso del sistema multimedia DRE; la Sección 3 explica la estructura y funcionalidad de HyARM; la Sección 4 evalúa el comportamiento adaptativo de HyARM a través de experimentos en nuestro estudio de caso del sistema multimedia; la Sección 5 compara nuestra investigación sobre HyARM con trabajos relacionados; y la Sección 6 presenta observaciones finales. El código y ejemplos de HyARM están disponibles en www.dre.vanderbilt.edu/∼nshankar/HyARM/. Artículo 7 2. ESTUDIO DE CASO: SISTEMA MULTIMEDIA DRE Esta sección describe la arquitectura y los requisitos de QoS de nuestro sistema multimedia DRE. 2.1 Arquitectura del Sistema Multimedia Enlace Inalámbrico Enlace Inalámbrico Enlace Inalámbrico ` ` ` Enlace Físico Enlace Físico Enlace Físico Estación Base Extremo Receptor Extremo Receptor Extremo Receptor` Enlace Físico Extremo Receptor Cámara UAV Codificador de Video Cámara Codificador de Video Cámara Codificador de Video Cámara UAV Codificador de Video Cámara Codificador de Video Cámara Codificador de Video Cámara UAV Codificador de Video Cámara Codificador de Video Cámara Codificador de Video Figura 1: Arquitectura del Sistema Multimedia DRE La arquitectura de nuestro sistema multimedia DRE se muestra en la Figura 1 y consta de las siguientes entidades: (1) Fuente de datos (captura de video por UAV), donde el video es capturado (relacionado con el tema de interés) por la(s) cámara(s) en cada UAV, seguido por la codificación del video crudo utilizando un esquema de codificación específico y transmitiendo el video a la siguiente etapa en la cadena de procesamiento. (2) Distribuidor de datos (estación base), donde el video es procesado para eliminar ruido, seguido por la retransmisión del video procesado a la siguiente etapa en la cadena de procesamiento. (3) Destinos (centro de comando y control), donde el video recibido es nuevamente procesado para eliminar ruido, luego decodificado y finalmente renderizado al usuario final a través de pantallas gráficas. Se han logrado mejoras significativas en las técnicas de codificación/decodificación y compresión (des) de video como resultado de los avances recientes en las técnicas de codificación y compresión de video [14]. Los esquemas comunes de compresión de video son MPEG1, MPEG-2, Real Video y MPEG-4. Cada esquema de compresión se caracteriza por sus requisitos de recursos, por ejemplo, la potencia computacional para (des)comprimir la señal de video y el ancho de banda de red necesario para transmitir la señal de video comprimida. Las propiedades del video comprimido, como la resolución y la velocidad de fotogramas, determinan tanto la calidad como los requisitos de recursos del video. Nuestro estudio de caso del sistema multimedia tiene los siguientes requisitos de calidad de servicio (QoS) en tiempo real de extremo a extremo: (1) latencia, (2) retardo entre cuadros (también conocido como jitter), (3) frecuencia de cuadros y (4) resolución de imagen. Estos requisitos de calidad de servicio (QoS) pueden clasificarse como duros o blandos. Los requisitos de QoS estrictos deben ser cumplidos por el sistema subyacente en todo momento, mientras que los requisitos de QoS flexibles pueden ser ocasionalmente incumplidos. Para nuestro estudio de caso, tratamos los requisitos de QoS como la latencia y la variabilidad de retardo como requisitos de QoS más estrictos y nos esforzamos por cumplir con estos requisitos en todo momento. Por el contrario, tratamos los requisitos de QoS como la tasa de cuadros de video y la resolución de imagen como requisitos de QoS más flexibles y modificamos estas propiedades de video de manera adaptativa para manejar los cambios dinámicos en la disponibilidad de recursos de manera efectiva. Aunque a menudo se presentan como dos conjuntos de requisitos discretos, en la práctica suelen ser dos extremos de un continuo que va desde más suave a más duro en lugar de dos puntos disjuntos. La potencia informática requerida por las tareas de captura y codificación de video depende de factores dinámicos, como la velocidad del UAV, la velocidad del sujeto (si el sujeto es móvil) y la distancia entre el UAV y el sujeto. La cantidad de ancho de banda de la red inalámbrica disponible para transmitir video capturado por UAVs a estaciones base también depende de la conectividad inalámbrica entre los UAVs y la estación base, que a su vez depende de factores dinámicos como la velocidad de los UAVs y la distancia relativa entre los UAVs y las estaciones base. El ancho de banda del enlace entre la estación base y el receptor final está limitado, pero es más estable que el ancho de banda de la red inalámbrica. Los requisitos de recursos y la disponibilidad de recursos están sujetos a cambios dinámicos. Dos clases de aplicaciones - habilitadas para QoS y de mejor esfuerzo - utilizan la infraestructura del sistema multimedia descrita anteriormente para transmitir video a sus respectivos receptores. Las aplicaciones de clase habilitada para QoS tienen mayor prioridad sobre las aplicaciones de clase de mejor esfuerzo. En nuestro estudio, las aplicaciones de respuesta de emergencia pertenecen a la clase habilitada para la calidad de servicio (QoS), y las aplicaciones de vigilancia pertenecen a la clase de mejor esfuerzo. Por ejemplo, dado que un flujo de datos de una aplicación de respuesta de emergencia es de mayor importancia que un flujo de video de una aplicación de vigilancia, recibe más recursos de extremo a extremo. Dado que la disponibilidad de recursos afecta significativamente la calidad de servicio, utilizamos la utilización actual de recursos como indicador principal del rendimiento del sistema. Nos referimos al nivel actual de utilización de recursos del sistema como la condición del sistema. Basándonos en esta definición, podemos clasificar las condiciones del sistema como estando subutilizadas, sobreutilizadas o utilizadas de manera efectiva. La subutilización de los recursos del sistema ocurre cuando la utilización actual de los recursos es menor que el límite inferior deseado de utilización de recursos. En este sistema, los recursos residuales del sistema (es decir, ancho de banda de red y potencia computacional) están disponibles en grandes cantidades después de cumplir con los requisitos de calidad de servicio de extremo a extremo de las aplicaciones. Estos recursos residuales se pueden utilizar para aumentar la calidad de servicio de las aplicaciones. Por ejemplo, la CPU residual y el ancho de banda de red pueden ser utilizados para entregar videos de mejor calidad (por ejemplo, con mayor resolución y mayor velocidad de cuadros) a los receptores finales. La sobreutilización de los recursos del sistema ocurre cuando la utilización actual de recursos es mayor que el límite superior deseado de utilización de recursos. Esta condición puede surgir por la pérdida de recursos - ancho de banda de red y/o potencia de cómputo en la estación base, receptor final o en el UAV - o puede ser debido a un aumento en las demandas de recursos por parte de las aplicaciones. La sobreutilización es generalmente indeseable ya que la calidad del video recibido (como la resolución y la velocidad de cuadros) y las propiedades de puntualidad (como la latencia y la fluctuación) se degradan y pueden resultar en un sistema inestable (y por lo tanto ineficaz). La utilización efectiva de recursos es la condición deseada del sistema, ya que garantiza que se cumplan los requisitos de calidad de servicio de extremo a extremo del sistema multimedia basado en UAV y que la utilización de los recursos del sistema, es decir, el ancho de banda de la red y la potencia computacional, se encuentren dentro de sus límites de utilización deseados. El artículo 7, sección 3 describe las técnicas que aplicamos para lograr una utilización efectiva, incluso ante la disponibilidad y/o demanda fluctuante de recursos. DESCRIPCIÓN DE HYARM Esta sección describe la arquitectura del Middleware de Gestión de Recursos Adaptativos Híbrido (HyARM). HyARM garantiza un rendimiento eficiente y predecible del sistema al proporcionar gestión adaptativa de recursos, que incluye la monitorización de los recursos del sistema y la imposición de límites en la utilización de recursos de las aplicaciones. 3.1 Estructura y Funcionalidad de HyARM Leyenda de Utilización de Recursos Asignación de Recursos Parámetros de Aplicación Figura 2: Arquitectura de HyARM HyARM está compuesto por tres tipos de entidades mostradas en la Figura 2 y descritas a continuación: Los monitores de recursos observan la utilización general de recursos para cada tipo de recurso y la utilización de recursos por aplicación. En nuestro sistema multimedia, hay monitores de recursos para la utilización de la CPU y el ancho de banda de la red. Los monitores de la CPU observan la utilización de recursos de la CPU de los UAV, la estación base y los receptores finales. Los monitores de ancho de banda de red observan la utilización de recursos de red de (1) el enlace de red inalámbrica entre los UAV y la estación base y (2) el enlace de red cableada entre la estación base y los receptores finales. El controlador central mantiene la utilización de recursos del sistema por debajo de un límite deseado mediante (1) el procesamiento de actualizaciones periódicas que recibe de los monitores de recursos y (2) modificando la ejecución de las aplicaciones en consecuencia, por ejemplo, utilizando diferentes algoritmos de ejecución u operando la aplicación con mayor/menor calidad de servicio (QoS). Este proceso de adaptación garantiza que los recursos del sistema se utilicen de manera eficiente y se cumplan los requisitos de calidad de servicio de la aplicación de extremo a extremo. En nuestro sistema multimedia, el controlador HyARM determina el valor de parámetros de la aplicación como (1) esquemas de compresión de video, como Real Video y MPEG-4, y/o (2) velocidad de cuadros, y (3) resolución de imagen. Desde la perspectiva de las técnicas híbridas de control teórico [8], los diferentes esquemas de compresión de video y la velocidad de cuadros forman las variables discretas de la ejecución de la aplicación, mientras que la resolución de imagen forma las variables continuas. Los adaptadores de aplicación modifican la ejecución de la aplicación de acuerdo con los parámetros recomendados por el controlador y garantizan que el funcionamiento de la aplicación esté de acuerdo con los parámetros recomendados. En la implementación actual de HyARM, el adaptador de la aplicación modifica los parámetros de entrada a la aplicación que afectan la calidad de servicio (QoS) de la aplicación y la utilización de recursos, como el esquema de compresión, la velocidad de fotogramas y la resolución de la imagen. En nuestras futuras implementaciones, planeamos utilizar mecanismos de reserva de recursos como Differentiated Service [7, 3] y Class-based Kernel Resource Management [4] para aprovisionar/reservar recursos de red y CPU. En nuestro sistema multimedia, el adaptador de la aplicación se asegura de que el video se codifique a la velocidad de cuadros y resolución recomendadas utilizando el esquema de compresión especificado. 3.2 Aplicando HyARM al Estudio de Caso del Sistema Multimedia. HyARM se construye sobre TAO [13], una implementación de código abierto ampliamente utilizada de CORBA en tiempo real [12]. HyARM se puede aplicar para garantizar una gestión eficiente, predecible y adaptable de recursos en cualquier sistema DRE donde la disponibilidad y los requisitos de recursos están sujetos a cambios dinámicos. La Figura 3 muestra la interacción de varias partes del sistema multimedia DRE desarrollado con HyARM, TAO y el Servicio de Streaming de Audio y Video de TAOs. El servicio de transmisión de audio/vídeo de TAO es una implementación de la especificación del Servicio de Transmisión de Audio/Vídeo de CORBA. El servicio de transmisión de audio y video de TAOs es un servicio de distribución de video habilitado para QoS que puede transferir video en tiempo real a uno o más receptores. Utilizamos el Servicio de Transmisión de Audio y Video para enviar el video desde los VANTs a los receptores finales a través de la estación base. Tres entidades del sistema multimedia DRE con HyARM, a saber, los monitores de recursos, el controlador central y los adaptadores de aplicaciones, están construidos como servidores CORBA, por lo que pueden distribuirse en todo el sistema DRE. Los monitores de recursos son objetos CORBA remotos que actualizan periódicamente al controlador central con la utilización actual de recursos. Los adaptadores de aplicaciones se ubican junto a las aplicaciones ya que ambas interactúan estrechamente. Como se muestra en la Figura 3, los UAV comprimen los datos utilizando varios esquemas de compresión, como MPEG1, MPEG4 y Real Video, y utilizan el servicio de transmisión de audio/vídeo de TAOs para enviar el video a los receptores finales. Los monitores de recursos de HyARMs observan continuamente la utilización de recursos del sistema y notifican al controlador central con la utilización actual. La interacción entre el controlador y los monitores de recursos utiliza el patrón Observer. Cuando el controlador recibe actualizaciones de utilización de recursos de los monitores, calcula las modificaciones necesarias a los parámetros de la(s) aplicación(es) y notifica al adaptador de la aplicación mediante una llamada de operación remota. Los adaptadores de aplicación, que están ubicados junto a la aplicación, modifican los parámetros de entrada de la aplicación, en nuestro caso el codificador de video, para modificar la utilización de recursos de la aplicación y la calidad de servicio. La estación base no está incluida en la figura ya que solo retransmite el video recibido de los UAV a los receptores finales. Artículo 7 4. RESULTADOS DE RENDIMIENTO Y ANÁLISIS Esta sección describe primero el banco de pruebas que proporciona la infraestructura para nuestro sistema multimedia DRE, que se utilizó para evaluar el rendimiento de HyARM. Luego describimos nuestros experimentos y analizamos los resultados obtenidos para evaluar empíricamente cómo se comporta HyARM durante la subutilización y sobreutilización de los recursos del sistema. 4.1 Descripción general del banco de pruebas de hardware y software Nuestros experimentos se realizaron en el banco de pruebas Emulab en la Universidad de Utah. La configuración de hardware consiste en dos nodos actuando como UAVs, uno actuando como estación base y otro como receptor final. El video de los dos UAV fue transmitido a una estación base a través de una LAN configurada con las siguientes propiedades: una relación promedio de pérdida de paquetes de 0.3 y un ancho de banda de 1 Mbps. El ancho de banda de la red se eligió para ser de 1 Mbps ya que a cada UAV en el sistema multimedia DRE se le asignan 250 Kbps. Estos parámetros fueron elegidos para emular una red inalámbrica poco confiable con ancho de banda limitado entre los UAVs y la estación base. Desde la estación base, el video fue retransmitido al receptor final a través de un enlace por cable confiable de 10 Mbps de ancho de banda sin pérdida de paquetes. La configuración de hardware de todos los nodos fue elegida de la siguiente manera: procesador Intel Pentium III de 600 MHz, 256 MB de memoria física, 4 puertos Ethernet Intel EtherExpress Pro de 10/100 Mbps y disco duro de 13 GB. Se utilizó una versión en tiempo real de Linux - TimeSys Linux/NET 3.1.214 basada en RedHat Linux 9 como sistema operativo para todos los nodos. Los siguientes paquetes de software también fueron utilizados para nuestros experimentos: (1) Ffmpeg 0.4.9-pre1, que es una biblioteca de código abierto (http://www.ffmpeg.sourceforge.net/download.php) que comprime video en formatos MPEG-2, MPEG-4, Real Video, y muchos otros formatos de video. (2) Iftop 0.16, que es una biblioteca de código abierto (http://www.ex-parrot.com/∼pdw/iftop/) que utilizamos para monitorear la actividad de red y la utilización del ancho de banda. (3) ACE 5.4.3 + TAO 1.4.3, que es una implementación de código abierto (http://www.dre.vanderbilt.edu/TAO) de la especificación CORBA en tiempo real [12] sobre la cual se construye HyARM. TAO proporciona el Servicio de Transmisión de Audio/Video (A/V) CORBA que utilizamos para transmitir el video desde los UAVs a los receptores finales a través de la estación base. Configuración del experimento Nuestro experimento consistió en dos UAVs (emulados) que enviaron video simultáneamente a la estación base utilizando la configuración experimental descrita en la Sección 4.1. En la estación base, el video fue retransmitido a los receptores finales (sin ninguna modificación), donde fue almacenado en un archivo. Cada UAV alojaba dos aplicaciones, una aplicación habilitada para QoS (respuesta de emergencia) y una aplicación de mejor esfuerzo (vigilancia). Dentro de cada UAV, el poder computacional se comparte entre las aplicaciones, mientras que el ancho de banda de la red se comparte entre todas las aplicaciones. Para evaluar la calidad de servicio proporcionada por HyARM, monitoreamos la utilización de la CPU en los dos UAV y la utilización del ancho de banda de la red entre el UAV y la estación base. La utilización de recursos de la CPU no se monitoreó en la estación base y en el receptor final, ya que no realizaron operaciones computacionalmente intensivas. La utilización de recursos del enlace físico de 10 Mbps entre la estación base y el receptor final no afecta la calidad de servicio de las aplicaciones y no es monitoreada por HyARM, ya que es casi 10 veces el ancho de banda de 1 MB de la LAN entre los UAV y la estación base. El experimento también monitorea propiedades del video que afectan la calidad de servicio de las aplicaciones, como la latencia, la variabilidad de retardo, la tasa de cuadros y la resolución. El punto de ajuste en la utilización de recursos para cada recurso se especificó en 0.69, que es el límite superior típicamente recomendado por técnicas de programación, como el algoritmo monótono de tasa [9]. Dado que los estudios [6] han demostrado que los ojos humanos pueden percibir retrasos de más de 200 ms, utilizamos esto como límite superior de la variabilidad en el video recibido. Los requisitos de QoS para cada clase de aplicación se especifican durante la inicialización del sistema y se muestran en la Tabla 1. 4.3 Resultados empíricos y análisis Esta sección presenta los resultados obtenidos al ejecutar el experimento descrito en la Sección 4.2 en nuestro banco de pruebas del sistema multimedia DRE. Utilizamos la utilización de recursos del sistema como métrica para evaluar las capacidades de gestión de recursos adaptativos de HyARM bajo cargas de trabajo de entrada variables. También utilizamos la calidad de servicio de la aplicación como métrica para evaluar las capacidades de HyARMs para satisfacer los requisitos de calidad de servicio de extremo a extremo de las diferentes clases de aplicaciones en el sistema multimedia DRE. Analizamos estos resultados para explicar las diferencias significativas en el rendimiento del sistema y la calidad de servicio de la aplicación. La comparación del rendimiento del sistema se descompone en la comparación de la utilización de recursos y la calidad de servicio de la aplicación. Para la utilización de recursos del sistema, comparamos (1) la utilización del ancho de banda de la red de área local y (2) la utilización de la CPU en los dos nodos UAV. Para la aplicación de QoS, comparamos los valores medios de los parámetros de video, incluyendo (1) resolución de imagen, (2) velocidad de cuadros, (3) latencia y (4) jitter. Comparación de la utilización de recursos. La sobreutilización de recursos del sistema en sistemas DRE puede generar un sistema inestable. Por el contrario, la subutilización de los recursos del sistema aumenta el costo del sistema. La Figura 4 y la Figura 5 comparan la utilización de recursos del sistema con y sin HyARM. La Figura 4 muestra que HyARM mantiene la utilización del sistema cerca del punto de ajuste de utilización deseado durante la fluctuación en la carga de trabajo de entrada al transmitir video de mayor (o menor) calidad de servicio para la clase de aplicaciones con calidad de servicio habilitada (o de mejor esfuerzo) durante la sobre (o sub) utilización de los recursos del sistema. La Figura 5 muestra que sin HyARM, la utilización de la red alcanzó hasta 0.9 durante el aumento de las condiciones de carga de trabajo, lo cual es mayor que el punto de ajuste de utilización de 0.7 en 0.2. Como resultado de la sobreutilización de recursos, la calidad de servicio (QoS) del video recibido, como la latencia promedio y el jitter, se vio afectada significativamente. Sin HyARM, los recursos del sistema estaban subutilizados o sobreutilizados, ambos de los cuales son indeseables. En contraste, con HyARM, la utilización de recursos del sistema siempre está cerca del punto de ajuste deseado, incluso durante las fluctuaciones en la carga de trabajo de la aplicación. Durante fluctuaciones repentinas en la carga de trabajo de la aplicación, las condiciones del sistema pueden ser temporalmente indeseables, pero se restauran a la condición deseada dentro de varios períodos de muestreo. La sobreutilización temporal de recursos es permisible en nuestro sistema multimedia, ya que la calidad del video puede degradarse por un corto período de tiempo, aunque la calidad del servicio de la aplicación se verá significativamente degradada si se transmite un video de baja calidad durante un período de tiempo más largo. Comparación de la calidad de servicio de la aplicación. Las Figuras 6, 7 y la Tabla 2 comparan la latencia, la variabilidad, la resolución y la velocidad de cuadro del video recibido, respectivamente. La Tabla 2 muestra que HyARM aumenta la resolución y la velocidad de cuadro de video de las aplicaciones habilitadas para QoS, pero disminuye la resolución y la velocidad de cuadro de las aplicaciones de mejor esfuerzo. Durante la sobreutilización de los recursos del sistema, la resolución y la velocidad de cuadros de las aplicaciones de menor prioridad se reducen para adaptarse a las fluctuaciones en la carga de trabajo de la aplicación y mantener la utilización de los recursos en el punto establecido especificado. Se puede observar en la Figura 6 y la Figura 7 que HyARM reduce significativamente la latencia y la variabilidad del video recibido. Estas cifras muestran que la calidad de servicio de las aplicaciones habilitadas para QoS se mejora considerablemente con HyARM. Aunque los parámetros de la aplicación, como la velocidad de cuadros y las resoluciones, que afectan los requisitos de QoS suave de las aplicaciones de mejor esfuerzo pueden verse comprometidos, se cumplen los requisitos de QoS estrictos, como la latencia y la variabilidad, de todas las aplicaciones. HyARM responde a las fluctuaciones en la disponibilidad de recursos y/o la demanda mediante el monitoreo constante de la utilización de recursos. Como se muestra en la Figura 4, cuando la utilización de recursos aumenta por encima del punto de ajuste deseado, HyARM reduce la utilización disminuyendo la calidad de servicio de las aplicaciones de mejor esfuerzo. Esta adaptación garantiza que haya suficientes recursos disponibles para que las aplicaciones habilitadas para QoS cumplan con sus necesidades de QoS. Las figuras 6 y 7 muestran que los valores de latencia y jitter del video recibido del sistema con HyARM son casi la mitad de los valores correspondientes del sistema sin HyARM. Con HyARM, los valores de estos parámetros están muy por debajo de los límites especificados, mientras que sin HyARM, estos valores están significativamente por encima de los límites especificados debido a la sobreutilización del ancho de banda de la red, lo que conduce a la congestión de la red y resulta en la pérdida de paquetes. HyARM evita esto reduciendo parámetros de video como la resolución, la velocidad de cuadros y/o modificando el esquema de compresión utilizado para comprimir el video. Nuestras conclusiones al analizar los resultados descritos anteriormente son que la aplicación de middleware adaptativo a través de control híbrido en sistemas DRE ayuda a (1) mejorar la calidad de servicio de la aplicación, (2) aumentar la utilización de recursos del sistema y (3) proporcionar una mejor previsibilidad (menor latencia y retraso entre fotogramas) a las aplicaciones habilitadas para calidad de servicio. Estas mejoras se logran en gran medida gracias al monitoreo de la utilización de recursos del sistema, la gestión eficiente de la carga de trabajo del sistema y la provisión adaptativa de recursos mediante los monitores de recursos de red/CPU de HyARMs, el adaptador de aplicaciones y el controlador central, respectivamente. TRABAJO RELACIONADO Recientemente se han aplicado varios enfoques teóricos de control a los sistemas DRE. Estas técnicas ayudan a superar las limitaciones de los enfoques de programación tradicionales que manejan mal los cambios dinámicos en la disponibilidad de recursos y resultan en un sistema programado rígidamente que se adapta mal a los cambios. Se presenta una encuesta de estas técnicas en [1]. Un enfoque de este tipo es la programación de control de retroalimentación (FCS) [2, 11]. Los algoritmos de FCS ajustan dinámicamente la asignación de recursos mediante bucles de control de retroalimentación de software. Los algoritmos de FCS se modelan y diseñan utilizando metodologías rigurosas de teoría de control. Estos algoritmos ofrecen garantías de rendimiento robusto y analítico a pesar de las incertidumbres en la disponibilidad de recursos y/o demanda. Aunque los algoritmos de FCS existentes han mostrado promesa, a menudo estos algoritmos asumen que el sistema tiene variable(s) de control continuas que pueden ajustarse continuamente. Si bien esta suposición es válida para ciertas clases de sistemas, existen muchas clases de sistemas DRE, como la aviónica y los entornos informáticos de barcos completos, que solo admiten un conjunto finito a priori de configuraciones discretas. Por lo tanto, las variables de control en tales sistemas son intrínsecamente discretas. HyARM maneja tanto variables de control continuas, como la resolución de la imagen, como variables de control discretas, como un conjunto discreto de velocidades de cuadro. HyARM puede aplicarse a sistemas que admiten un conjunto continuo y/o discreto de variables de control. El sistema multimedia DRE descrito en la Sección 2 es un ejemplo de sistema DRE que ofrece tanto variables de control continuas (resolución de imagen) como un conjunto discreto (velocidad de cuadros). Estas variables son modificadas por HyARM para lograr una utilización eficiente de recursos y una mejora en la calidad de servicio de la aplicación. CONCLUSIONES Artículo 7 Figura 6: Comparación de la latencia del video Figura 7: Comparación de la fluctuación del video Fuente Tamaño de imagen / Velocidad de cuadro Con HyARM Sin HyARM UAV1 Aplicación habilitada para QoS 1122 X 1496 / 25 960 X 720 / 20 UAV1 Aplicación de mejor esfuerzo 288 X 384 / 15 640 X 480 / 20 UAV2 Aplicación habilitada para QoS 1126 X 1496 / 25 960 X 720 / 20 UAV2 Aplicación de mejor esfuerzo 288 X 384 / 15 640 X 480 / 20 Tabla 2: Comparación de la calidad del video Muchos sistemas distribuidos en tiempo real y embebidos (DRE) demandan la aplicación correcta de la calidad de servicio (QoS) de extremo a extremo desde sus plataformas subyacentes para operar correctamente. Estos sistemas cada vez se ejecutan en entornos abiertos, donde la disponibilidad de recursos está sujeta a cambios dinámicos. Para cumplir con la calidad de servicio de extremo a extremo en entornos dinámicos, los sistemas DRE pueden beneficiarse de un middleware adaptativo que monitorea los recursos del sistema, realiza una gestión eficiente de la carga de trabajo de la aplicación y permite una provisión eficiente de recursos para la ejecución de aplicaciones. Este artículo describe HyARM, un middleware adaptativo que proporciona una gestión efectiva de recursos a los sistemas DRE. HyARM emplea <br>técnicas de control híbrido</br> para proporcionar las capacidades de middleware adaptativo, como el monitoreo de recursos y la adaptación de aplicaciones, que son clave para ofrecer las capacidades de gestión de recursos dinámicos para sistemas DRE abiertos. Empleamos HyARM en un sistema multimedia DRE representativo que está implementado utilizando CORBA en tiempo real y el Servicio de Transmisión de Audio/Vídeo de CORBA. Evaluamos el rendimiento de HyARM en un sistema compuesto por tres recursos distribuidos y dos clases de aplicaciones con dos aplicaciones cada una. Nuestros resultados empíricos indican que HyARM garantiza (1) la utilización eficiente de recursos al mantener la utilización de recursos del sistema dentro de los límites de utilización especificados, (2) los requisitos de calidad de servicio de las aplicaciones habilitadas para QoS se cumplen en todo momento. En general, HyARM garantiza una gestión eficiente, predecible y adaptable de recursos para sistemas DRE. REFERENCIAS [1] T. F. Abdelzaher, J. Stankovic, C. Lu, R. Zhang y Y. Lu. Control de rendimiento de retroalimentación en servicios de software. IEEE: Sistemas de Control, 23(3), junio de 2003. [2] L. Abeni, L. Palopoli, G. Lipari y J. Walpole. Análisis de un planificador de retroalimentación basado en reservas. En el Simposio de Sistemas en Tiempo Real de IEEE, Diciembre de 2002. [3] S. Blake, D. Black, M. Carlson, E. Davies, Z. Wang y W. Weiss. Una arquitectura para servicios diferenciados. Centro de Información de la Red RFC 2475, Dic. 1998. [4] H. Franke, S. Nagar, C. Seetharaman y V. Kashyap. Habilitando la Gestión Autonómica de la Carga de Trabajo en Linux. En Actas de la Conferencia Internacional sobre Computación Autónoma (ICAC), Nueva York, Nueva York, mayo de 2004. IEEE. [5] E. Gamma, R. Helm, R. Johnson, y J. Vlissides. Patrones de diseño: Elementos de software orientado a objetos reutilizable. Addison-Wesley, Reading, MA, 1995. [6] G. Ghinea y J. P. Thomas. Impacto de QoS en la percepción y comprensión del usuario de videoclips multimedia. En MULTIMEDIA 98: Actas de la sexta conferencia internacional de ACM sobre Multimedia, páginas 49-54, Bristol, Reino Unido, 1998. ACM Press. [7] Grupo de Trabajo de Ingeniería de Internet. Grupo de Trabajo de Servicios Diferenciados (diffserv) Carta. www.ietf.org/html.charters/diffserv-charter.html, 2000. [8] X. Koutsoukos, R. Tekumalla, B. Natarajan y C. Lu. Control híbrido supervisado de sistemas en tiempo real. En el 11º Simposio de Tecnología y Aplicaciones en Tiempo Real y Sistemas Empotrados de IEEE, San Francisco, California, Mar. 2005. [9] J. Lehoczky, L. Sha y Y. Ding. El algoritmo de programación Rate Monotonic: Caracterización exacta y comportamiento en casos promedio. En Actas del 10º Simposio de Sistemas en Tiempo Real de IEEE (RTSS 1989), páginas 166-171. IEEE Computer Society Press, 1989. [10] J. Loyall, J. Gossett, C. Gill, R. Schantz, J. Zinky, P. Pal, R. Shapiro, C. Rodrigues, M. Atighetchi, and D. Karr.\n\nIEEE Computer Society Press, 1989. [10] J. Loyall, J. Gossett, C. Gill, R. Schantz, J. Zinky, P. Pal, R. Shapiro, C. Rodrigues, M. Atighetchi y D. Karr. Comparando y contrastando el soporte de middleware adaptativo en aplicaciones de objetos distribuidos de área amplia y embebidos. En Actas de la 21ª Conferencia Internacional sobre Sistemas de Computación Distribuida (ICDCS-21), páginas 625-634. IEEE, Abr. 2001. [11] C. Lu, J. A. Stankovic, G. Tao y S. H. Son. Programación en tiempo real con control de retroalimentación: Marco, modelado y algoritmos. Revista de Sistemas en Tiempo Real, 23(1/2):85-126, julio de 2002. [12] Object Management Group. Especificación CORBA en tiempo real, documento formal/02-08-02 de OMG, edición de agosto de 2002. [13] D. C. Schmidt, D. L. Levine y S. Mungee. El diseño y rendimiento de los corredores de solicitudes de objetos en tiempo real. Comunicaciones de Computadoras, 21(4):294-324, Abr. 1998. [14] Thomas Sikora. Tendencias y perspectivas en codificación de imágenes y videos. En Actas del IEEE, enero de 2005. [15] X. Wang, H.-M. Huang, V. Subramonian, C. Lu y C. Gill. CAMRIT: Middleware Adaptativo Basado en Control para la Transmisión de Imágenes en Tiempo Real. En Actas del 10º Simposio de Tecnología y Aplicaciones en Tiempo Real y Sistemas Empotrados del IEEE (RTAS), Toronto, Canadá, mayo de 2004. Artículo 7 ",
            "candidates": [],
            "error": [
                [
                    "técnicas de control híbridas",
                    "técnicas de control híbrido"
                ]
            ]
        },
        "real-time video distribution system": {
            "translated_key": "sistema distribuido de distribución de video en tiempo real",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Evaluating Adaptive Resource Management for Distributed Real-Time Embedded Systems Nishanth Shankaran, ∗ Xenofon Koutsoukos, Douglas C. Schmidt, and Aniruddha Gokhale Dept.",
                "of EECS, Vanderbilt University, Nashville ABSTRACT A challenging problem faced by researchers and developers of distributed real-time and embedded (DRE) systems is devising and implementing effective adaptive resource management strategies that can meet end-to-end quality of service (QoS) requirements in varying operational conditions.",
                "This paper presents two contributions to research in adaptive resource management for DRE systems.",
                "First, we describe the structure and functionality of the Hybrid Adaptive Resourcemanagement Middleware (HyARM), which provides adaptive resource management using hybrid control techniques for adapting to workload fluctuations and resource availability.",
                "Second, we evaluate the adaptive behavior of HyARM via experiments on a DRE multimedia system that distributes video in real-time.",
                "Our results indicate that HyARM yields predictable, stable, and high system performance, even in the face of fluctuating workload and resource availability.",
                "Categories and Subject Descriptors C.2.4 [Distributed Systems]: Distributed Applications; D.4.7 [Organization and Design]: Real-time Systems and Embedded Systems 1.",
                "INTRODUCTION Achieving end-to-end real-time quality of service (QoS) is particularly important for open distributed real-time and embedded (DRE) systems that face resource constraints, such as limited computing power and network bandwidth.",
                "Overutilization of these system resources can yield unpredictable and unstable behavior, whereas under-utilization can yield excessive system cost.",
                "A promising approach to meeting these end-to-end QoS requirements effectively, therefore, is to develop and apply adaptive middleware [10, 15], which is software whose functional and QoS-related properties can be modified either statically or dynamically.",
                "Static modifications are carried out to reduce footprint, leverage capabilities that exist in specific platforms, enable functional subsetting, and/or minimize hardware/software infrastructure dependencies.",
                "Objectives of dynamic modifications include optimizing system responses to changing environments or requirements, such as changing component interconnections, power-levels, CPU and network bandwidth availability, latency/jitter, and workload.",
                "In open DRE systems, adaptive middleware must make such modifications dependably, i.e., while meeting stringent end-to-end QoS requirements, which requires the specification and enforcement of upper and lower bounds on system resource utilization to ensure effective use of system resources.",
                "To meet these requirements, we have developed the Hybrid Adaptive Resource-management Middleware (HyARM), which is an open-source1 distributed resource management middleware.",
                "HyARM is based on hybrid control theoretic techniques [8], which provide a theoretical framework for designing control of complex system with both continuous and discrete dynamics.",
                "In our case study, which involves a distributed <br>real-time video distribution system</br>, the task of adaptive resource management is to control the utilization of the different resources, whose utilizations are described by continuous variables.",
                "We achieve this by adapting the resolution of the transmitted video, which is modeled as a continuous variable, and by changing the frame-rate and the compression, which are modeled by discrete actions.",
                "We have implemented HyARM atop The ACE ORB (TAO) [13], which is an implementation of the Real-time CORBA specification [12].",
                "Our results show that (1) HyARM ensures effective system resource utilization and (2) end-to-end QoS requirements of higher priority applications are met, even in the face of fluctuations in workload.",
                "The remainder of the paper is organized as follows: Section 2 describes the architecture, functionality, and resource utilization model of our DRE multimedia system case study; Section 3 explains the structure and functionality of HyARM; Section 4 evaluates the adaptive behavior of HyARM via experiments on our multimedia system case study; Section 5 compares our research on HyARM with related work; and Section 6 presents concluding remarks. 1 The code and examples for HyARM are available at www. dre.vanderbilt.edu/∼nshankar/HyARM/.",
                "Article 7 2.",
                "CASE STUDY: DRE MULTIMEDIA SYSTEM This section describes the architecture and QoS requirements of our DRE multimedia system. 2.1 Multimedia System Architecture Wireless Link Wireless Link Wireless Link ` ` ` Physical Link Physical Link Physical Link Base Station End Receiver End Receiver End Receiver` Physical Link End Receiver UAV Camera Video Encoder Camera Video Encoder Camera Video Encoder UAV Camera Video Encoder Camera Video Encoder Camera Video Encoder UAV Camera Video Encoder Camera Video Encoder Camera Video Encoder Figure 1: DRE Multimedia System Architecture The architecture for our DRE multimedia system is shown in Figure 1 and consists of the following entities: (1)Data source (video capture by UAV), where video is captured (related to subject of interest) by camera(s) on each UAV, followed by encoding of raw video using a specific encoding scheme and transmitting the video to the next stage in the pipeline. (2)Data distributor (base station), where the video is processed to remove noise, followed by retransmission of the processed video to the next stage in the pipeline. (3) Sinks (command and control center), where the received video is again processed to remove noise, then decoded and finally rendered to end user via graphical displays.",
                "Significant improvements in video encoding/decoding and (de)compression techniques have been made as a result of recent advances in video encoding and compression techniques [14].",
                "Common video compression schemes are MPEG1, MPEG-2, Real Video, and MPEG-4.",
                "Each compression scheme is characterized by its resource requirement, e.g., the computational power to (de)compress the video signal and the network bandwidth required to transmit the compressed video signal.",
                "Properties of the compressed video, such as resolution and frame-rate determine both the quality and the resource requirements of the video.",
                "Our multimedia system case study has the following endto-end real-time QoS requirements: (1) latency, (2) interframe delay (also know as jitter), (3) frame rate, and (4) picture resolution.",
                "These QoS requirements can be classified as being either hard or soft.",
                "Hard QoS requirements should be met by the underlying system at all times, whereas soft QoS requirements can be missed occasionally.2 For our case study, we treat QoS requirements such as latency and jitter as harder QoS requirements and strive to meet these requirements at all times.",
                "In contrast, we treat QoS requirements such as video frame rate and picture resolution as softer QoS requirements and modify these video properties adaptively to handle dynamic changes in resource availabil2 Although hard and soft are often portrayed as two discrete requirement sets, in practice they are usually two ends of a continuum ranging from softer to harder rather than two disjoint points. ity effectively. 2.2 DRE Multimedia System Rresources There are two primary types of resources in our DRE multimedia system: (1) processors that provide computational power available at the UAVs, base stations, and end receivers and (2) network links that provide communication bandwidth between UAVs, base stations, and end receivers.",
                "The computing power required by the video capture and encoding tasks depends on dynamic factors, such as speed of the UAV, speed of the subject (if the subject is mobile), and distance between UAV and the subject.",
                "The wireless network bandwidth available to transmit video captured by UAVs to base stations also depends on the wireless connectivity between the UAVs and the base station, which in-turn depend on dynamic factors such as the speed of the UAVs and the relative distance between UAVs and base stations.",
                "The bandwidth of the link between the base station and the end receiver is limited, but more stable than the bandwidth of the wireless network.",
                "Resource requirements and availability of resources are subjected to dynamic changes.",
                "Two classes of applications - QoS-enabled and best-effort - use the multimedia system infrastructure described above to transmit video to their respective receivers.",
                "QoS-enabled class of applications have higher priority over best-effort class of application.",
                "In our study, emergency response applications belong to QoS-enabled and surveillance applications belong to best-effort class.",
                "For example, since a stream from an emergency response application is of higher importance than a video stream from a surveillance application, it receives more resources end-to-end.",
                "Since resource availability significantly affects QoS, we use current resource utilization as the primary indicator of system performance.",
                "We refer to the current level of system resource utilization as the system condition.",
                "Based on this definition, we can classify system conditions as being either under, over, or effectively utilized.",
                "Under-utilization of system resources occurs when the current resource utilization is lower than the desired lower bound on resource utilization.",
                "In this system condition, residual system resources (i.e., network bandwidth and computational power) are available in large amounts after meeting end-to-end QoS requirements of applications.",
                "These residual resources can be used to increase the QoS of the applications.",
                "For example, residual CPU and network bandwidth can be used to deliver better quality video (e.g., with greater resolution and higher frame rate) to end receivers.",
                "Over-utilization of system resources occurs when the current resource utilization is higher than the desired upper bound on resource utilization.",
                "This condition can arise from loss of resources - network bandwidth and/or computing power at base station, end receiver or at UAV - or may be due to an increase in resource demands by applications.",
                "Over-utilization is generally undesirable since the quality of the received video (such as resolution and frame rate) and timeliness properties (such as latency and jitter) are degraded and may result in an unstable (and thus ineffective) system.",
                "Effective resource utilization is the desired system condition since it ensures that end-to-end QoS requirements of the UAV-based multimedia system are met and utilization of both system resources, i.e., network bandwidth and computational power, are within their desired utilization bounds.",
                "Article 7 Section 3 describes techniques we applied to achieve effective utilization, even in the face of fluctuating resource availability and/or demand. 3.",
                "OVERVIEW OF HYARM This section describes the architecture of the Hybrid Adaptive Resource-management Middleware (HyARM).",
                "HyARM ensures efficient and predictable system performance by providing adaptive resource management, including monitoring of system resources and enforcing bounds on application resource utilization. 3.1 HyARM Structure and Functionality Resource Utilization Legend Resource Allocation Application Parameters Figure 2: HyARM Architecture HyARM is composed of three types of entities shown in Figure 2 and described below: Resource monitors observe the overall resource utilization for each type of resource and resource utilization per application.",
                "In our multimedia system, there are resource monitors for CPU utilization and network bandwidth.",
                "CPU monitors observe the CPU resource utilization of UAVs, base station, and end receivers.",
                "Network bandwidth monitors observe the network resource utilization of (1) wireless network link between UAVs and the base station and (2) wired network link between the base station and end receivers.",
                "The central controller maintains the system resource utilization below a desired bound by (1) processing periodic updates it receives from resource monitors and (2) modifying the execution of applications accordingly, e.g., by using different execution algorithms or operating the application with increased/decreased QoS.",
                "This adaptation process ensures that system resources are utilized efficiently and end-to-end application QoS requirements are met.",
                "In our multimedia system, the HyARM controller determines the value of application parameters such as (1) video compression schemes, such as Real Video and MPEG-4, and/or (2) frame rate, and (3) picture resolution.",
                "From the perspective of hybrid control theoretic techniques [8], the different video compression schemes and frame rate form the discrete variables of application execution and picture resolution forms the continuous variables.",
                "Application adapters modify application execution according to parameters recommended by the controller and ensures that the operation of the application is in accordance with the recommended parameters.",
                "In the current mplementation of HyARM, the application adapter modifies the input parameters to the application that affect application QoS and resource utilization - compression scheme, frame rate, and picture resolution.",
                "In our future implementations, we plan to use resource reservation mechanisms such as Differentiated Service [7, 3] and Class-based Kernel Resource Management [4] to provision/reserve network and CPU resources.",
                "In our multimedia system, the application adapter ensures that the video is encoded at the recommended frame rate and resolution using the specified compression scheme. 3.2 Applying HyARM to the Multimedia System Case Study HyARM is built atop TAO [13], a widely used open-source implementation of Real-time CORBA [12].",
                "HyARM can be applied to ensure efficient, predictable and adaptive resource management of any DRE system where resource availability and requirements are subject to dynamic change.",
                "Figure 3 shows the interaction of various parts of the DRE multimedia system developed with HyARM, TAO, and TAOs A/V Streaming Service.",
                "TAOs A/V Streaming service is an implementation of the CORBA A/V Streaming Service specification.",
                "TAOs A/V Streaming Service is a QoS-enabled video distribution service that can transfer video in real-time to one or more receivers.",
                "We use the A/V Streaming Service to transmit the video from the UAVs to the end receivers via the base station.",
                "Three entities of Receiver UAV TAO Resource Utilization HyARM Central Controller A/V Streaming Service : Sender MPEG1 MPEG4 Real Video HyARM Resource Monitor A/V Streaming Service : Receiver Compressed Video Compressed Video Application HyARM Application Adapter Remote Object Call Control Inputs Resource Utilization Resource Utilization / Control Inputs Control Inputs Legend Figure 3: Developing the DRE Multimedia System with HyARM HyARM, namely the resource monitors, central controller, and application adapters are built as CORBA servants, so they can be distributed throughout a DRE system.",
                "Resource monitors are remote CORBA objects that update the central controller periodically with the current resource utilization.",
                "Application adapters are collocated with applications since the two interact closely.",
                "As shown in Figure 3, UAVs compress the data using various compression schemes, such as MPEG1, MPEG4, and Real Video, and uses TAOs A/V streaming service to transmit the video to end receivers.",
                "HyARMs resource monitors continuously observe the system resource utilization and notify the central controller with the current utilization. 3 The interaction between the controller and the resource monitors uses the Observer pattern [5].",
                "When the controller receives resource utilization updates from monitors, it computes the necessary modifications to application(s) parameters and notifies application adapter(s) via a remote operation call.",
                "Application adapter(s), that are collocated with the application, modify the input parameters to the application - in our case video encoder - to modify the application resource utilization and QoS. 3 The base station is not included in the figure since it only retransmits the video received from UAVs to end receivers.",
                "Article 7 4.",
                "PERFORMANCE RESULTS AND ANALYSIS This section first describes the testbed that provides the infrastructure for our DRE multimedia system, which was used to evaluate the performance of HyARM.",
                "We then describe our experiments and analyze the results obtained to empirically evaluate how HyARM behaves during underand over-utilization of system resources. 4.1 Overview of the Hardware and Software Testbed Our experiments were performed on the Emulab testbed at University of Utah.",
                "The hardware configuration consists of two nodes acting as UAVs, one acting as base station, and one as end receiver.",
                "Video from the two UAVs were transmitted to a base station via a LAN configured with the following properties: average packet loss ratio of 0.3 and bandwidth 1 Mbps.",
                "The network bandwidth was chosen to be 1 Mbps since each UAV in the DRE multimedia system is allocated 250 Kbps.",
                "These parameters were chosen to emulate an unreliable wireless network with limited bandwidth between the UAVs and the base station.",
                "From the base station, the video was retransmitted to the end receiver via a reliable wireline link of 10 Mbps bandwidth with no packet loss.",
                "The hardware configuration of all the nodes was chosen as follows: 600 MHz Intel Pentium III processor, 256 MB physical memory, 4 Intel EtherExpress Pro 10/100 Mbps Ethernet ports, and 13 GB hard drive.",
                "A real-time version of Linux - TimeSys Linux/NET 3.1.214 based on RedHat Linux 9was used as the operating system for all nodes.",
                "The following software packages were also used for our experiments: (1) Ffmpeg 0.4.9-pre1, which is an open-source library (http: //www.ffmpeg.sourceforge.net/download.php) that compresses video into MPEG-2, MPEG-4, Real Video, and many other video formats. (2) Iftop 0.16, which is an opensource library (http://www.ex-parrot.com/∼pdw/iftop/) we used for monitoring network activity and bandwidth utilization. (3) ACE 5.4.3 + TAO 1.4.3, which is an opensource (http://www.dre.vanderbilt.edu/TAO) implementation of the Real-time CORBA [12] specification upon which HyARM is built.",
                "TAO provides the CORBA Audio/Video (A/V) Streaming Service that we use to transmit the video from the UAVs to end receivers via the base station. 4.2 Experiment Configuration Our experiment consisted of two (emulated) UAVs that simultaneously send video to the base station using the experimentation setup described in Section 4.1.",
                "At the base station, video was retransmitted to the end receivers (without any modifications), where it was stored to a file.",
                "Each UAV hosted two applications, one QoS-enabled application (emergency response), and one best-effort application (surveillance).",
                "Within each UAV, computational power is shared between the applications, while the network bandwidth is shared among all applications.",
                "To evaluate the QoS provided by HyARM, we monitored CPU utilization at the two UAVs, and network bandwidth utilization between the UAV and the base station.",
                "CPU resource utilization was not monitored at the base station and the end receiver since they performed no computationallyintensive operations.",
                "The resource utilization of the 10 Mpbs physical link between the base station and the end receiver does not affect QoS of applications and is not monitored by HyARM since it is nearly 10 times the 1 MB bandwidth of the LAN between the UAVs and the base station.",
                "The experiment also monitors properties of the video that affect the QoS of the applications, such as latency, jitter, frame rate, and resolution.",
                "The set point on resource utilization for each resource was specified at 0.69, which is the upper bound typically recommended by scheduling techniques, such as rate monotonic algorithm [9].",
                "Since studies [6] have shown that human eyes can perceive delays more than 200ms, we use this as the upper bound on jitter of the received video.",
                "QoS requirements for each class of application is specified during system initialization and is shown in Table 1. 4.3 Empirical Results and Analysis This section presents the results obtained from running the experiment described in Section 4.2 on our DRE multimedia system testbed.",
                "We used system resource utilization as a metric to evaluate the adaptive resource management capabilities of HyARM under varying input work loads.",
                "We also used application QoS as a metric to evaluate HyARMs capabilities to support end-to-end QoS requirements of the various classes of applications in the DRE multimedia system.",
                "We analyze these results to explain the significant differences in system performance and application QoS.",
                "Comparison of system performance is decomposed into comparison of resource utilization and application QoS.",
                "For system resource utilization, we compare (1) network bandwidth utilization of the local area network and (2) CPU utilization at the two UAV nodes.",
                "For application QoS, we compare mean values of video parameters, including (1) picture resolution, (2) frame rate, (3) latency, and (4) jitter.",
                "Comparison of resource utilization.",
                "Over-utilization of system resources in DRE systems can yield an unstable system.",
                "In contrast, under-utilization of system resources increases system cost.",
                "Figure 4 and Figure 5 compare the system resource utilization with and without HyARM.",
                "Figure 4 shows that HyARM maintains system utilization close to the desired utilization set point during fluctuation in input work load by transmitting video of higher (or lower) QoS for QoS-enabled (or best-effort) class of applications during over (or under) utilization of system resources.",
                "Figure 5 shows that without HyARM, network utilization was as high as 0.9 during increase in workload conditions, which is greater than the utilization set point of 0.7 by 0.2.",
                "As a result of over-utilization of resources, QoS of the received video, such as average latency and jitter, was affected significantly.",
                "Without HyARM, system resources were either under-utilized or over-utilized, both of which are undesirable.",
                "In contrast, with HyARM, system resource utilization is always close to the desired set point, even during fluctuations in application workload.",
                "During sudden fluctuation in application workload, system conditions may be temporarily undesirable, but are restored to the desired condition within several sampling periods.",
                "Temporary over-utilization of resources is permissible in our multimedia system since the quality of the video may be degraded for a short period of time, though application QoS will be degraded significantly if poor quality video is transmitted for a longer period of time.",
                "Comparison of application QoS.",
                "Figures 6, Figure 7, and Table 2 compare latency, jitter, resolution, and frameArticle 7 Class Resolution Frame Rate Latency (msec ) Jitter (msec) QoS Enabled 1024 x 768 25 200 200 Best-effort 320 x 240 15 300 250 Table 1: Application QoS Requirements Figure 4: Resource utilization with HyARM Figure 5: Resource utilization without HyARM rate of the received video, respectively.",
                "Table 2 shows that HyARM increases the resolution and frame video of QoSenabled applications, but decreases the resolution and frame rate of best effort applications.",
                "During over utilization of system resources, resolution and frame rate of lower priority applications are reduced to adapt to fluctuations in application workload and to maintain the utilization of resources at the specified set point.",
                "It can be seen from Figure 6 and Figure 7 that HyARM reduces the latency and jitter of the received video significantly.",
                "These figures show that the QoS of QoS-enabled applications is greatly improved by HyARM.",
                "Although application parameters, such as frame rate and resolutions, which affect the soft QoS requirements of best-effort applications may be compromised, the hard QoS requirements, such as latency and jitter, of all applications are met.",
                "HyARM responds to fluctuation in resource availability and/or demand by constant monitoring of resource utilization.",
                "As shown in Figure 4, when resources utilization increases above the desired set point, HyARM lowers the utilization by reducing the QoS of best-effort applications.",
                "This adaptation ensures that enough resources are available for QoS-enabled applications to meet their QoS needs.",
                "Figures 6 and 7 show that the values of latency and jitter of the received video of the system with HyARM are nearly half of the corresponding value of the system without HyARM.",
                "With HyARM, values of these parameters are well below the specified bounds, whereas without HyARM, these value are significantly above the specified bounds due to overutilization of the network bandwidth, which leads to network congestion and results in packet loss.",
                "HyARM avoids this by reducing video parameters such as resolution, frame-rate, and/or modifying the compression scheme used to compress the video.",
                "Our conclusions from analyzing the results described above are that applying adaptive middleware via hybrid control to DRE system helps to (1) improve application QoS, (2) increase system resource utilization, and (3) provide better predictability (lower latency and inter-frame delay) to QoSenabled applications.",
                "These improvements are achieved largely due to monitoring of system resource utilization, efficient system workload management, and adaptive resource provisioning by means of HyARMs network/CPU resource monitors, application adapter, and central controller, respectively. 5.",
                "RELATED WORK A number of control theoretic approaches have been applied to DRE systems recently.",
                "These techniques aid in overcoming limitations with traditional scheduling approaches that handle dynamic changes in resource availability poorly and result in a rigidly scheduled system that adapts poorly to change.",
                "A survey of these techniques is presented in [1].",
                "One such approach is feedback control scheduling (FCS) [2, 11].",
                "FCS algorithms dynamically adjust resource allocation by means of software feedback control loops.",
                "FCS algorithms are modeled and designed using rigorous controltheoretic methodologies.",
                "These algorithms provide robust and analytical performance assurances despite uncertainties in resource availability and/or demand.",
                "Although existing FCS algorithms have shown promise, these algorithms often assume that the system has continuous control variable(s) that can continuously be adjusted.",
                "While this assumption holds for certain classes of systems, there are many classes of DRE systems, such as avionics and total-ship computing environments that only support a finite a priori set of discrete configurations.",
                "The control variables in such systems are therefore intrinsically discrete.",
                "HyARM handles both continuous control variables, such as picture resolution, and discrete control variable, such as discrete set of frame rates.",
                "HyARM can therefore be applied to system that support continuous and/or discrete set of control variables.",
                "The DRE multimedia system as described in Section 2 is an example DRE system that offers both continuous (picture resolution) and discrete set (frame-rate) of control variables.",
                "These variables are modified by HyARM to achieve efficient resource utilization and improved application QoS. 6.",
                "CONCLUDING REMARKS Article 7 Figure 6: Comparison of Video Latency Figure 7: Comparison of Video Jitter Source Picture Size / Frame Rate With HyARM Without HyARM UAV1 QoS Enabled Application 1122 X 1496 / 25 960 X 720 / 20 UAV1 Best-effort Application 288 X 384 / 15 640 X 480 / 20 UAV2 QoS Enabled Application 1126 X 1496 / 25 960 X 720 / 20 UAV2 Best-effort Application 288 X 384 / 15 640 X 480 / 20 Table 2: Comparison of Video Quality Many distributed real-time and embedded (DRE) systems demand end-to-end quality of service (QoS) enforcement from their underlying platforms to operate correctly.",
                "These systems increasingly run in open environments, where resource availability is subject to dynamic change.",
                "To meet end-to-end QoS in dynamic environments, DRE systems can benefit from an adaptive middleware that monitors system resources, performs efficient application workload management, and enables efficient resource provisioning for executing applications.",
                "This paper described HyARM, an adaptive middleware, that provides effective resource management to DRE systems.",
                "HyARM employs hybrid control techniques to provide the adaptive middleware capabilities, such as resource monitoring and application adaptation that are key to providing the dynamic resource management capabilities for open DRE systems.",
                "We employed HyARM to a representative DRE multimedia system that is implemented using Real-time CORBA and CORBA A/V Streaming Service.",
                "We evaluated the performance of HyARM in a system composed of three distributed resources and two classes of applications with two applications each.",
                "Our empirical results indicate that HyARM ensures (1) efficient resource utilization by maintaining the resource utilization of system resources within the specified utilization bounds, (2) QoS requirements of QoS-enabled applications are met at all times.",
                "Overall, HyARM ensures efficient, predictable, and adaptive resource management for DRE systems. 7.",
                "REFERENCES [1] T. F. Abdelzaher, J. Stankovic, C. Lu, R. Zhang, and Y. Lu.",
                "Feddback Performance Control in Software Services.",
                "IEEE: Control Systems, 23(3), June 2003. [2] L. Abeni, L. Palopoli, G. Lipari, and J. Walpole.",
                "Analysis of a reservation-based feedback scheduler.",
                "In IEEE Real-Time Systems Symposium, Dec. 2002. [3] S. Blake, D. Black, M. Carlson, E. Davies, Z. Wang, and W. Weiss.",
                "An architecture for differentiated services.",
                "Network Information Center RFC 2475, Dec. 1998. [4] H. Franke, S. Nagar, C. Seetharaman, and V. Kashyap.",
                "Enabling Autonomic Workload Management in Linux.",
                "In Proceedings of the International Conference on Autonomic Computing (ICAC), New York, New York, May 2004.",
                "IEEE. [5] E. Gamma, R. Helm, R. Johnson, and J. Vlissides.",
                "Design Patterns: Elements of Reusable Object-Oriented Software.",
                "Addison-Wesley, Reading, MA, 1995. [6] G. Ghinea and J. P. Thomas.",
                "Qos impact on user perception and understanding of multimedia video clips.",
                "In MULTIMEDIA 98: Proceedings of the sixth ACM international conference on Multimedia, pages 49-54, Bristol, United Kingdom, 1998.",
                "ACM Press. [7] Internet Engineering Task Force.",
                "Differentiated Services Working Group (diffserv) Charter. www.ietf.org/html.charters/diffserv-charter.html, 2000. [8] X. Koutsoukos, R. Tekumalla, B. Natarajan, and C. Lu.",
                "Hybrid Supervisory Control of Real-Time Systems.",
                "In 11th IEEE Real-Time and Embedded Technology and Applications Symposium, San Francisco, California, Mar. 2005. [9] J. Lehoczky, L. Sha, and Y. Ding.",
                "The Rate Monotonic Scheduling Algorithm: Exact Characterization and Average Case Behavior.",
                "In Proceedings of the 10th IEEE Real-Time Systems Symposium (RTSS 1989), pages 166-171.",
                "IEEE Computer Society Press, 1989. [10] J. Loyall, J. Gossett, C. Gill, R. Schantz, J. Zinky, P. Pal, R. Shapiro, C. Rodrigues, M. Atighetchi, and D. Karr.",
                "Comparing and Contrasting Adaptive Middleware Support in Wide-Area and Embedded Distributed Object Applications.",
                "In Proceedings of the 21st International Conference on Distributed Computing Systems (ICDCS-21), pages 625-634.",
                "IEEE, Apr. 2001. [11] C. Lu, J.",
                "A. Stankovic, G. Tao, and S. H. Son.",
                "Feedback Control Real-Time Scheduling: Framework, Modeling, and Algorithms.",
                "Real-Time Systems Journal, 23(1/2):85-126, July 2002. [12] Object Management Group.",
                "Real-time CORBA Specification, OMG Document formal/02-08-02 edition, Aug. 2002. [13] D. C. Schmidt, D. L. Levine, and S. Mungee.",
                "The Design and Performance of Real-Time Object Request Brokers.",
                "Computer Communications, 21(4):294-324, Apr. 1998. [14] Thomas Sikora.",
                "Trends and Perspectives in Image and Video Coding.",
                "In Proceedings of the IEEE, Jan. 2005. [15] X. Wang, H.-M. Huang, V. Subramonian, C. Lu, and C. Gill.",
                "CAMRIT: Control-based Adaptive Middleware for Real-time Image Transmission.",
                "In Proc. of the 10th IEEE Real-Time and Embedded Tech. and Applications Symp. (RTAS), Toronto, Canada, May 2004.",
                "Article 7"
            ],
            "original_annotated_samples": [
                "In our case study, which involves a distributed <br>real-time video distribution system</br>, the task of adaptive resource management is to control the utilization of the different resources, whose utilizations are described by continuous variables."
            ],
            "translated_annotated_samples": [
                "En nuestro estudio de caso, que implica un <br>sistema distribuido de distribución de video en tiempo real</br>, la tarea de gestión de recursos adaptativa consiste en controlar la utilización de los diferentes recursos, cuyas utilizaciones están descritas por variables continuas."
            ],
            "translated_text": "Evaluando la Gestión de Recursos Adaptativa para Sistemas Empotrados Distribuidos en Tiempo Real de Nishanth Shankaran, Xenofon Koutsoukos, Douglas C. Schmidt y Aniruddha Gokhale, Dept. de EECS, Universidad de Vanderbilt, Nashville RESUMEN Un problema desafiante enfrentado por investigadores y desarrolladores de sistemas distribuidos en tiempo real y embebidos (DRE) es idear e implementar estrategias efectivas de gestión adaptativa de recursos que puedan cumplir con los requisitos de calidad de servicio (QoS) de extremo a extremo en condiciones operativas variables. Este artículo presenta dos contribuciones a la investigación en gestión de recursos adaptativa para sistemas DRE. Primero, describimos la estructura y funcionalidad del Middleware de Gestión de Recursos Adaptativos Híbridos (HyARM), que proporciona gestión de recursos adaptativa utilizando técnicas de control híbridas para adaptarse a las fluctuaciones de carga de trabajo y disponibilidad de recursos. Segundo, evaluamos el comportamiento adaptativo de HyARM a través de experimentos en un sistema multimedia DRE que distribuye video en tiempo real. Nuestros resultados indican que HyARM produce un rendimiento del sistema predecible, estable y alto, incluso ante cargas de trabajo y disponibilidad de recursos fluctuantes. Categorías y Descriptores de Asignaturas C.2.4 [Sistemas Distribuidos]: Aplicaciones Distribuidas; D.4.7 [Organización y Diseño]: Sistemas en Tiempo Real y Sistemas Embebidos 1. INTRODUCCIÓN Lograr la calidad de servicio (QoS) en tiempo real de extremo a extremo es particularmente importante para sistemas distribuidos en tiempo real y embebidos (DRE) abiertos que enfrentan limitaciones de recursos, como potencia de cómputo limitada y ancho de banda de red. La sobreutilización de estos recursos del sistema puede generar un comportamiento impredecible e inestable, mientras que la subutilización puede resultar en un costo excesivo del sistema. Un enfoque prometedor para cumplir de manera efectiva con estos requisitos de calidad de servicio de extremo a extremo, por lo tanto, es desarrollar y aplicar middleware adaptativo [10, 15], que es un software cuyas propiedades funcionales y relacionadas con la calidad de servicio pueden ser modificadas estática o dinámicamente. Las modificaciones estáticas se realizan para reducir la huella, aprovechar las capacidades existentes en plataformas específicas, habilitar la selección funcional y/o minimizar las dependencias de infraestructura de hardware/software. Los objetivos de las modificaciones dinámicas incluyen optimizar las respuestas del sistema a entornos o requisitos cambiantes, como la modificación de interconexiones de componentes, niveles de potencia, disponibilidad de ancho de banda de CPU y red, latencia/jitter y carga de trabajo. En los sistemas DRE abiertos, el middleware adaptativo debe realizar modificaciones de manera confiable, es decir, cumpliendo con los estrictos requisitos de calidad de servicio de extremo a extremo, lo que requiere la especificación y aplicación de límites superiores e inferiores en la utilización de recursos del sistema para garantizar un uso efectivo de los recursos del sistema. Para cumplir con estos requisitos, hemos desarrollado el Middleware de Gestión de Recursos Híbrido Adaptativo (HyARM), que es un middleware de gestión de recursos distribuido de código abierto. HyARM se basa en técnicas híbridas de control teórico, las cuales proporcionan un marco teórico para diseñar el control de sistemas complejos con dinámicas tanto continuas como discretas. En nuestro estudio de caso, que implica un <br>sistema distribuido de distribución de video en tiempo real</br>, la tarea de gestión de recursos adaptativa consiste en controlar la utilización de los diferentes recursos, cuyas utilizaciones están descritas por variables continuas. Logramos esto adaptando la resolución del video transmitido, que se modela como una variable continua, y cambiando la velocidad de cuadros y la compresión, que se modelan mediante acciones discretas. Hemos implementado HyARM sobre el ORB ACE (TAO) [13], que es una implementación de la especificación CORBA en tiempo real [12]. Nuestros resultados muestran que (1) HyARM garantiza una utilización efectiva de los recursos del sistema y (2) se cumplen los requisitos de calidad de servicio de extremo a extremo de las aplicaciones de mayor prioridad, incluso ante fluctuaciones en la carga de trabajo. El resto del documento está organizado de la siguiente manera: la Sección 2 describe la arquitectura, funcionalidad y modelo de utilización de recursos de nuestro estudio de caso del sistema multimedia DRE; la Sección 3 explica la estructura y funcionalidad de HyARM; la Sección 4 evalúa el comportamiento adaptativo de HyARM a través de experimentos en nuestro estudio de caso del sistema multimedia; la Sección 5 compara nuestra investigación sobre HyARM con trabajos relacionados; y la Sección 6 presenta observaciones finales. El código y ejemplos de HyARM están disponibles en www.dre.vanderbilt.edu/∼nshankar/HyARM/. Artículo 7 2. ESTUDIO DE CASO: SISTEMA MULTIMEDIA DRE Esta sección describe la arquitectura y los requisitos de QoS de nuestro sistema multimedia DRE. 2.1 Arquitectura del Sistema Multimedia Enlace Inalámbrico Enlace Inalámbrico Enlace Inalámbrico ` ` ` Enlace Físico Enlace Físico Enlace Físico Estación Base Extremo Receptor Extremo Receptor Extremo Receptor` Enlace Físico Extremo Receptor Cámara UAV Codificador de Video Cámara Codificador de Video Cámara Codificador de Video Cámara UAV Codificador de Video Cámara Codificador de Video Cámara Codificador de Video Cámara UAV Codificador de Video Cámara Codificador de Video Cámara Codificador de Video Figura 1: Arquitectura del Sistema Multimedia DRE La arquitectura de nuestro sistema multimedia DRE se muestra en la Figura 1 y consta de las siguientes entidades: (1) Fuente de datos (captura de video por UAV), donde el video es capturado (relacionado con el tema de interés) por la(s) cámara(s) en cada UAV, seguido por la codificación del video crudo utilizando un esquema de codificación específico y transmitiendo el video a la siguiente etapa en la cadena de procesamiento. (2) Distribuidor de datos (estación base), donde el video es procesado para eliminar ruido, seguido por la retransmisión del video procesado a la siguiente etapa en la cadena de procesamiento. (3) Destinos (centro de comando y control), donde el video recibido es nuevamente procesado para eliminar ruido, luego decodificado y finalmente renderizado al usuario final a través de pantallas gráficas. Se han logrado mejoras significativas en las técnicas de codificación/decodificación y compresión (des) de video como resultado de los avances recientes en las técnicas de codificación y compresión de video [14]. Los esquemas comunes de compresión de video son MPEG1, MPEG-2, Real Video y MPEG-4. Cada esquema de compresión se caracteriza por sus requisitos de recursos, por ejemplo, la potencia computacional para (des)comprimir la señal de video y el ancho de banda de red necesario para transmitir la señal de video comprimida. Las propiedades del video comprimido, como la resolución y la velocidad de fotogramas, determinan tanto la calidad como los requisitos de recursos del video. Nuestro estudio de caso del sistema multimedia tiene los siguientes requisitos de calidad de servicio (QoS) en tiempo real de extremo a extremo: (1) latencia, (2) retardo entre cuadros (también conocido como jitter), (3) frecuencia de cuadros y (4) resolución de imagen. Estos requisitos de calidad de servicio (QoS) pueden clasificarse como duros o blandos. Los requisitos de QoS estrictos deben ser cumplidos por el sistema subyacente en todo momento, mientras que los requisitos de QoS flexibles pueden ser ocasionalmente incumplidos. Para nuestro estudio de caso, tratamos los requisitos de QoS como la latencia y la variabilidad de retardo como requisitos de QoS más estrictos y nos esforzamos por cumplir con estos requisitos en todo momento. Por el contrario, tratamos los requisitos de QoS como la tasa de cuadros de video y la resolución de imagen como requisitos de QoS más flexibles y modificamos estas propiedades de video de manera adaptativa para manejar los cambios dinámicos en la disponibilidad de recursos de manera efectiva. Aunque a menudo se presentan como dos conjuntos de requisitos discretos, en la práctica suelen ser dos extremos de un continuo que va desde más suave a más duro en lugar de dos puntos disjuntos. La potencia informática requerida por las tareas de captura y codificación de video depende de factores dinámicos, como la velocidad del UAV, la velocidad del sujeto (si el sujeto es móvil) y la distancia entre el UAV y el sujeto. La cantidad de ancho de banda de la red inalámbrica disponible para transmitir video capturado por UAVs a estaciones base también depende de la conectividad inalámbrica entre los UAVs y la estación base, que a su vez depende de factores dinámicos como la velocidad de los UAVs y la distancia relativa entre los UAVs y las estaciones base. El ancho de banda del enlace entre la estación base y el receptor final está limitado, pero es más estable que el ancho de banda de la red inalámbrica. Los requisitos de recursos y la disponibilidad de recursos están sujetos a cambios dinámicos. Dos clases de aplicaciones - habilitadas para QoS y de mejor esfuerzo - utilizan la infraestructura del sistema multimedia descrita anteriormente para transmitir video a sus respectivos receptores. Las aplicaciones de clase habilitada para QoS tienen mayor prioridad sobre las aplicaciones de clase de mejor esfuerzo. En nuestro estudio, las aplicaciones de respuesta de emergencia pertenecen a la clase habilitada para la calidad de servicio (QoS), y las aplicaciones de vigilancia pertenecen a la clase de mejor esfuerzo. Por ejemplo, dado que un flujo de datos de una aplicación de respuesta de emergencia es de mayor importancia que un flujo de video de una aplicación de vigilancia, recibe más recursos de extremo a extremo. Dado que la disponibilidad de recursos afecta significativamente la calidad de servicio, utilizamos la utilización actual de recursos como indicador principal del rendimiento del sistema. Nos referimos al nivel actual de utilización de recursos del sistema como la condición del sistema. Basándonos en esta definición, podemos clasificar las condiciones del sistema como estando subutilizadas, sobreutilizadas o utilizadas de manera efectiva. La subutilización de los recursos del sistema ocurre cuando la utilización actual de los recursos es menor que el límite inferior deseado de utilización de recursos. En este sistema, los recursos residuales del sistema (es decir, ancho de banda de red y potencia computacional) están disponibles en grandes cantidades después de cumplir con los requisitos de calidad de servicio de extremo a extremo de las aplicaciones. Estos recursos residuales se pueden utilizar para aumentar la calidad de servicio de las aplicaciones. Por ejemplo, la CPU residual y el ancho de banda de red pueden ser utilizados para entregar videos de mejor calidad (por ejemplo, con mayor resolución y mayor velocidad de cuadros) a los receptores finales. La sobreutilización de los recursos del sistema ocurre cuando la utilización actual de recursos es mayor que el límite superior deseado de utilización de recursos. Esta condición puede surgir por la pérdida de recursos - ancho de banda de red y/o potencia de cómputo en la estación base, receptor final o en el UAV - o puede ser debido a un aumento en las demandas de recursos por parte de las aplicaciones. La sobreutilización es generalmente indeseable ya que la calidad del video recibido (como la resolución y la velocidad de cuadros) y las propiedades de puntualidad (como la latencia y la fluctuación) se degradan y pueden resultar en un sistema inestable (y por lo tanto ineficaz). La utilización efectiva de recursos es la condición deseada del sistema, ya que garantiza que se cumplan los requisitos de calidad de servicio de extremo a extremo del sistema multimedia basado en UAV y que la utilización de los recursos del sistema, es decir, el ancho de banda de la red y la potencia computacional, se encuentren dentro de sus límites de utilización deseados. El artículo 7, sección 3 describe las técnicas que aplicamos para lograr una utilización efectiva, incluso ante la disponibilidad y/o demanda fluctuante de recursos. DESCRIPCIÓN DE HYARM Esta sección describe la arquitectura del Middleware de Gestión de Recursos Adaptativos Híbrido (HyARM). HyARM garantiza un rendimiento eficiente y predecible del sistema al proporcionar gestión adaptativa de recursos, que incluye la monitorización de los recursos del sistema y la imposición de límites en la utilización de recursos de las aplicaciones. 3.1 Estructura y Funcionalidad de HyARM Leyenda de Utilización de Recursos Asignación de Recursos Parámetros de Aplicación Figura 2: Arquitectura de HyARM HyARM está compuesto por tres tipos de entidades mostradas en la Figura 2 y descritas a continuación: Los monitores de recursos observan la utilización general de recursos para cada tipo de recurso y la utilización de recursos por aplicación. En nuestro sistema multimedia, hay monitores de recursos para la utilización de la CPU y el ancho de banda de la red. Los monitores de la CPU observan la utilización de recursos de la CPU de los UAV, la estación base y los receptores finales. Los monitores de ancho de banda de red observan la utilización de recursos de red de (1) el enlace de red inalámbrica entre los UAV y la estación base y (2) el enlace de red cableada entre la estación base y los receptores finales. El controlador central mantiene la utilización de recursos del sistema por debajo de un límite deseado mediante (1) el procesamiento de actualizaciones periódicas que recibe de los monitores de recursos y (2) modificando la ejecución de las aplicaciones en consecuencia, por ejemplo, utilizando diferentes algoritmos de ejecución u operando la aplicación con mayor/menor calidad de servicio (QoS). Este proceso de adaptación garantiza que los recursos del sistema se utilicen de manera eficiente y se cumplan los requisitos de calidad de servicio de la aplicación de extremo a extremo. En nuestro sistema multimedia, el controlador HyARM determina el valor de parámetros de la aplicación como (1) esquemas de compresión de video, como Real Video y MPEG-4, y/o (2) velocidad de cuadros, y (3) resolución de imagen. Desde la perspectiva de las técnicas híbridas de control teórico [8], los diferentes esquemas de compresión de video y la velocidad de cuadros forman las variables discretas de la ejecución de la aplicación, mientras que la resolución de imagen forma las variables continuas. Los adaptadores de aplicación modifican la ejecución de la aplicación de acuerdo con los parámetros recomendados por el controlador y garantizan que el funcionamiento de la aplicación esté de acuerdo con los parámetros recomendados. En la implementación actual de HyARM, el adaptador de la aplicación modifica los parámetros de entrada a la aplicación que afectan la calidad de servicio (QoS) de la aplicación y la utilización de recursos, como el esquema de compresión, la velocidad de fotogramas y la resolución de la imagen. En nuestras futuras implementaciones, planeamos utilizar mecanismos de reserva de recursos como Differentiated Service [7, 3] y Class-based Kernel Resource Management [4] para aprovisionar/reservar recursos de red y CPU. En nuestro sistema multimedia, el adaptador de la aplicación se asegura de que el video se codifique a la velocidad de cuadros y resolución recomendadas utilizando el esquema de compresión especificado. 3.2 Aplicando HyARM al Estudio de Caso del Sistema Multimedia. HyARM se construye sobre TAO [13], una implementación de código abierto ampliamente utilizada de CORBA en tiempo real [12]. HyARM se puede aplicar para garantizar una gestión eficiente, predecible y adaptable de recursos en cualquier sistema DRE donde la disponibilidad y los requisitos de recursos están sujetos a cambios dinámicos. La Figura 3 muestra la interacción de varias partes del sistema multimedia DRE desarrollado con HyARM, TAO y el Servicio de Streaming de Audio y Video de TAOs. El servicio de transmisión de audio/vídeo de TAO es una implementación de la especificación del Servicio de Transmisión de Audio/Vídeo de CORBA. El servicio de transmisión de audio y video de TAOs es un servicio de distribución de video habilitado para QoS que puede transferir video en tiempo real a uno o más receptores. Utilizamos el Servicio de Transmisión de Audio y Video para enviar el video desde los VANTs a los receptores finales a través de la estación base. Tres entidades del sistema multimedia DRE con HyARM, a saber, los monitores de recursos, el controlador central y los adaptadores de aplicaciones, están construidos como servidores CORBA, por lo que pueden distribuirse en todo el sistema DRE. Los monitores de recursos son objetos CORBA remotos que actualizan periódicamente al controlador central con la utilización actual de recursos. Los adaptadores de aplicaciones se ubican junto a las aplicaciones ya que ambas interactúan estrechamente. Como se muestra en la Figura 3, los UAV comprimen los datos utilizando varios esquemas de compresión, como MPEG1, MPEG4 y Real Video, y utilizan el servicio de transmisión de audio/vídeo de TAOs para enviar el video a los receptores finales. Los monitores de recursos de HyARMs observan continuamente la utilización de recursos del sistema y notifican al controlador central con la utilización actual. La interacción entre el controlador y los monitores de recursos utiliza el patrón Observer. Cuando el controlador recibe actualizaciones de utilización de recursos de los monitores, calcula las modificaciones necesarias a los parámetros de la(s) aplicación(es) y notifica al adaptador de la aplicación mediante una llamada de operación remota. Los adaptadores de aplicación, que están ubicados junto a la aplicación, modifican los parámetros de entrada de la aplicación, en nuestro caso el codificador de video, para modificar la utilización de recursos de la aplicación y la calidad de servicio. La estación base no está incluida en la figura ya que solo retransmite el video recibido de los UAV a los receptores finales. Artículo 7 4. RESULTADOS DE RENDIMIENTO Y ANÁLISIS Esta sección describe primero el banco de pruebas que proporciona la infraestructura para nuestro sistema multimedia DRE, que se utilizó para evaluar el rendimiento de HyARM. Luego describimos nuestros experimentos y analizamos los resultados obtenidos para evaluar empíricamente cómo se comporta HyARM durante la subutilización y sobreutilización de los recursos del sistema. 4.1 Descripción general del banco de pruebas de hardware y software Nuestros experimentos se realizaron en el banco de pruebas Emulab en la Universidad de Utah. La configuración de hardware consiste en dos nodos actuando como UAVs, uno actuando como estación base y otro como receptor final. El video de los dos UAV fue transmitido a una estación base a través de una LAN configurada con las siguientes propiedades: una relación promedio de pérdida de paquetes de 0.3 y un ancho de banda de 1 Mbps. El ancho de banda de la red se eligió para ser de 1 Mbps ya que a cada UAV en el sistema multimedia DRE se le asignan 250 Kbps. Estos parámetros fueron elegidos para emular una red inalámbrica poco confiable con ancho de banda limitado entre los UAVs y la estación base. Desde la estación base, el video fue retransmitido al receptor final a través de un enlace por cable confiable de 10 Mbps de ancho de banda sin pérdida de paquetes. La configuración de hardware de todos los nodos fue elegida de la siguiente manera: procesador Intel Pentium III de 600 MHz, 256 MB de memoria física, 4 puertos Ethernet Intel EtherExpress Pro de 10/100 Mbps y disco duro de 13 GB. Se utilizó una versión en tiempo real de Linux - TimeSys Linux/NET 3.1.214 basada en RedHat Linux 9 como sistema operativo para todos los nodos. Los siguientes paquetes de software también fueron utilizados para nuestros experimentos: (1) Ffmpeg 0.4.9-pre1, que es una biblioteca de código abierto (http://www.ffmpeg.sourceforge.net/download.php) que comprime video en formatos MPEG-2, MPEG-4, Real Video, y muchos otros formatos de video. (2) Iftop 0.16, que es una biblioteca de código abierto (http://www.ex-parrot.com/∼pdw/iftop/) que utilizamos para monitorear la actividad de red y la utilización del ancho de banda. (3) ACE 5.4.3 + TAO 1.4.3, que es una implementación de código abierto (http://www.dre.vanderbilt.edu/TAO) de la especificación CORBA en tiempo real [12] sobre la cual se construye HyARM. TAO proporciona el Servicio de Transmisión de Audio/Video (A/V) CORBA que utilizamos para transmitir el video desde los UAVs a los receptores finales a través de la estación base. Configuración del experimento Nuestro experimento consistió en dos UAVs (emulados) que enviaron video simultáneamente a la estación base utilizando la configuración experimental descrita en la Sección 4.1. En la estación base, el video fue retransmitido a los receptores finales (sin ninguna modificación), donde fue almacenado en un archivo. Cada UAV alojaba dos aplicaciones, una aplicación habilitada para QoS (respuesta de emergencia) y una aplicación de mejor esfuerzo (vigilancia). Dentro de cada UAV, el poder computacional se comparte entre las aplicaciones, mientras que el ancho de banda de la red se comparte entre todas las aplicaciones. Para evaluar la calidad de servicio proporcionada por HyARM, monitoreamos la utilización de la CPU en los dos UAV y la utilización del ancho de banda de la red entre el UAV y la estación base. La utilización de recursos de la CPU no se monitoreó en la estación base y en el receptor final, ya que no realizaron operaciones computacionalmente intensivas. La utilización de recursos del enlace físico de 10 Mbps entre la estación base y el receptor final no afecta la calidad de servicio de las aplicaciones y no es monitoreada por HyARM, ya que es casi 10 veces el ancho de banda de 1 MB de la LAN entre los UAV y la estación base. El experimento también monitorea propiedades del video que afectan la calidad de servicio de las aplicaciones, como la latencia, la variabilidad de retardo, la tasa de cuadros y la resolución. El punto de ajuste en la utilización de recursos para cada recurso se especificó en 0.69, que es el límite superior típicamente recomendado por técnicas de programación, como el algoritmo monótono de tasa [9]. Dado que los estudios [6] han demostrado que los ojos humanos pueden percibir retrasos de más de 200 ms, utilizamos esto como límite superior de la variabilidad en el video recibido. Los requisitos de QoS para cada clase de aplicación se especifican durante la inicialización del sistema y se muestran en la Tabla 1. 4.3 Resultados empíricos y análisis Esta sección presenta los resultados obtenidos al ejecutar el experimento descrito en la Sección 4.2 en nuestro banco de pruebas del sistema multimedia DRE. Utilizamos la utilización de recursos del sistema como métrica para evaluar las capacidades de gestión de recursos adaptativos de HyARM bajo cargas de trabajo de entrada variables. También utilizamos la calidad de servicio de la aplicación como métrica para evaluar las capacidades de HyARMs para satisfacer los requisitos de calidad de servicio de extremo a extremo de las diferentes clases de aplicaciones en el sistema multimedia DRE. Analizamos estos resultados para explicar las diferencias significativas en el rendimiento del sistema y la calidad de servicio de la aplicación. La comparación del rendimiento del sistema se descompone en la comparación de la utilización de recursos y la calidad de servicio de la aplicación. Para la utilización de recursos del sistema, comparamos (1) la utilización del ancho de banda de la red de área local y (2) la utilización de la CPU en los dos nodos UAV. Para la aplicación de QoS, comparamos los valores medios de los parámetros de video, incluyendo (1) resolución de imagen, (2) velocidad de cuadros, (3) latencia y (4) jitter. Comparación de la utilización de recursos. La sobreutilización de recursos del sistema en sistemas DRE puede generar un sistema inestable. Por el contrario, la subutilización de los recursos del sistema aumenta el costo del sistema. La Figura 4 y la Figura 5 comparan la utilización de recursos del sistema con y sin HyARM. La Figura 4 muestra que HyARM mantiene la utilización del sistema cerca del punto de ajuste de utilización deseado durante la fluctuación en la carga de trabajo de entrada al transmitir video de mayor (o menor) calidad de servicio para la clase de aplicaciones con calidad de servicio habilitada (o de mejor esfuerzo) durante la sobre (o sub) utilización de los recursos del sistema. La Figura 5 muestra que sin HyARM, la utilización de la red alcanzó hasta 0.9 durante el aumento de las condiciones de carga de trabajo, lo cual es mayor que el punto de ajuste de utilización de 0.7 en 0.2. Como resultado de la sobreutilización de recursos, la calidad de servicio (QoS) del video recibido, como la latencia promedio y el jitter, se vio afectada significativamente. Sin HyARM, los recursos del sistema estaban subutilizados o sobreutilizados, ambos de los cuales son indeseables. En contraste, con HyARM, la utilización de recursos del sistema siempre está cerca del punto de ajuste deseado, incluso durante las fluctuaciones en la carga de trabajo de la aplicación. Durante fluctuaciones repentinas en la carga de trabajo de la aplicación, las condiciones del sistema pueden ser temporalmente indeseables, pero se restauran a la condición deseada dentro de varios períodos de muestreo. La sobreutilización temporal de recursos es permisible en nuestro sistema multimedia, ya que la calidad del video puede degradarse por un corto período de tiempo, aunque la calidad del servicio de la aplicación se verá significativamente degradada si se transmite un video de baja calidad durante un período de tiempo más largo. Comparación de la calidad de servicio de la aplicación. Las Figuras 6, 7 y la Tabla 2 comparan la latencia, la variabilidad, la resolución y la velocidad de cuadro del video recibido, respectivamente. La Tabla 2 muestra que HyARM aumenta la resolución y la velocidad de cuadro de video de las aplicaciones habilitadas para QoS, pero disminuye la resolución y la velocidad de cuadro de las aplicaciones de mejor esfuerzo. Durante la sobreutilización de los recursos del sistema, la resolución y la velocidad de cuadros de las aplicaciones de menor prioridad se reducen para adaptarse a las fluctuaciones en la carga de trabajo de la aplicación y mantener la utilización de los recursos en el punto establecido especificado. Se puede observar en la Figura 6 y la Figura 7 que HyARM reduce significativamente la latencia y la variabilidad del video recibido. Estas cifras muestran que la calidad de servicio de las aplicaciones habilitadas para QoS se mejora considerablemente con HyARM. Aunque los parámetros de la aplicación, como la velocidad de cuadros y las resoluciones, que afectan los requisitos de QoS suave de las aplicaciones de mejor esfuerzo pueden verse comprometidos, se cumplen los requisitos de QoS estrictos, como la latencia y la variabilidad, de todas las aplicaciones. HyARM responde a las fluctuaciones en la disponibilidad de recursos y/o la demanda mediante el monitoreo constante de la utilización de recursos. Como se muestra en la Figura 4, cuando la utilización de recursos aumenta por encima del punto de ajuste deseado, HyARM reduce la utilización disminuyendo la calidad de servicio de las aplicaciones de mejor esfuerzo. Esta adaptación garantiza que haya suficientes recursos disponibles para que las aplicaciones habilitadas para QoS cumplan con sus necesidades de QoS. Las figuras 6 y 7 muestran que los valores de latencia y jitter del video recibido del sistema con HyARM son casi la mitad de los valores correspondientes del sistema sin HyARM. Con HyARM, los valores de estos parámetros están muy por debajo de los límites especificados, mientras que sin HyARM, estos valores están significativamente por encima de los límites especificados debido a la sobreutilización del ancho de banda de la red, lo que conduce a la congestión de la red y resulta en la pérdida de paquetes. HyARM evita esto reduciendo parámetros de video como la resolución, la velocidad de cuadros y/o modificando el esquema de compresión utilizado para comprimir el video. Nuestras conclusiones al analizar los resultados descritos anteriormente son que la aplicación de middleware adaptativo a través de control híbrido en sistemas DRE ayuda a (1) mejorar la calidad de servicio de la aplicación, (2) aumentar la utilización de recursos del sistema y (3) proporcionar una mejor previsibilidad (menor latencia y retraso entre fotogramas) a las aplicaciones habilitadas para calidad de servicio. Estas mejoras se logran en gran medida gracias al monitoreo de la utilización de recursos del sistema, la gestión eficiente de la carga de trabajo del sistema y la provisión adaptativa de recursos mediante los monitores de recursos de red/CPU de HyARMs, el adaptador de aplicaciones y el controlador central, respectivamente. TRABAJO RELACIONADO Recientemente se han aplicado varios enfoques teóricos de control a los sistemas DRE. Estas técnicas ayudan a superar las limitaciones de los enfoques de programación tradicionales que manejan mal los cambios dinámicos en la disponibilidad de recursos y resultan en un sistema programado rígidamente que se adapta mal a los cambios. Se presenta una encuesta de estas técnicas en [1]. Un enfoque de este tipo es la programación de control de retroalimentación (FCS) [2, 11]. Los algoritmos de FCS ajustan dinámicamente la asignación de recursos mediante bucles de control de retroalimentación de software. Los algoritmos de FCS se modelan y diseñan utilizando metodologías rigurosas de teoría de control. Estos algoritmos ofrecen garantías de rendimiento robusto y analítico a pesar de las incertidumbres en la disponibilidad de recursos y/o demanda. Aunque los algoritmos de FCS existentes han mostrado promesa, a menudo estos algoritmos asumen que el sistema tiene variable(s) de control continuas que pueden ajustarse continuamente. Si bien esta suposición es válida para ciertas clases de sistemas, existen muchas clases de sistemas DRE, como la aviónica y los entornos informáticos de barcos completos, que solo admiten un conjunto finito a priori de configuraciones discretas. Por lo tanto, las variables de control en tales sistemas son intrínsecamente discretas. HyARM maneja tanto variables de control continuas, como la resolución de la imagen, como variables de control discretas, como un conjunto discreto de velocidades de cuadro. HyARM puede aplicarse a sistemas que admiten un conjunto continuo y/o discreto de variables de control. El sistema multimedia DRE descrito en la Sección 2 es un ejemplo de sistema DRE que ofrece tanto variables de control continuas (resolución de imagen) como un conjunto discreto (velocidad de cuadros). Estas variables son modificadas por HyARM para lograr una utilización eficiente de recursos y una mejora en la calidad de servicio de la aplicación. CONCLUSIONES Artículo 7 Figura 6: Comparación de la latencia del video Figura 7: Comparación de la fluctuación del video Fuente Tamaño de imagen / Velocidad de cuadro Con HyARM Sin HyARM UAV1 Aplicación habilitada para QoS 1122 X 1496 / 25 960 X 720 / 20 UAV1 Aplicación de mejor esfuerzo 288 X 384 / 15 640 X 480 / 20 UAV2 Aplicación habilitada para QoS 1126 X 1496 / 25 960 X 720 / 20 UAV2 Aplicación de mejor esfuerzo 288 X 384 / 15 640 X 480 / 20 Tabla 2: Comparación de la calidad del video Muchos sistemas distribuidos en tiempo real y embebidos (DRE) demandan la aplicación correcta de la calidad de servicio (QoS) de extremo a extremo desde sus plataformas subyacentes para operar correctamente. Estos sistemas cada vez se ejecutan en entornos abiertos, donde la disponibilidad de recursos está sujeta a cambios dinámicos. Para cumplir con la calidad de servicio de extremo a extremo en entornos dinámicos, los sistemas DRE pueden beneficiarse de un middleware adaptativo que monitorea los recursos del sistema, realiza una gestión eficiente de la carga de trabajo de la aplicación y permite una provisión eficiente de recursos para la ejecución de aplicaciones. Este artículo describe HyARM, un middleware adaptativo que proporciona una gestión efectiva de recursos a los sistemas DRE. HyARM emplea técnicas de control híbrido para proporcionar las capacidades de middleware adaptativo, como el monitoreo de recursos y la adaptación de aplicaciones, que son clave para ofrecer las capacidades de gestión de recursos dinámicos para sistemas DRE abiertos. Empleamos HyARM en un sistema multimedia DRE representativo que está implementado utilizando CORBA en tiempo real y el Servicio de Transmisión de Audio/Vídeo de CORBA. Evaluamos el rendimiento de HyARM en un sistema compuesto por tres recursos distribuidos y dos clases de aplicaciones con dos aplicaciones cada una. Nuestros resultados empíricos indican que HyARM garantiza (1) la utilización eficiente de recursos al mantener la utilización de recursos del sistema dentro de los límites de utilización especificados, (2) los requisitos de calidad de servicio de las aplicaciones habilitadas para QoS se cumplen en todo momento. En general, HyARM garantiza una gestión eficiente, predecible y adaptable de recursos para sistemas DRE. REFERENCIAS [1] T. F. Abdelzaher, J. Stankovic, C. Lu, R. Zhang y Y. Lu. Control de rendimiento de retroalimentación en servicios de software. IEEE: Sistemas de Control, 23(3), junio de 2003. [2] L. Abeni, L. Palopoli, G. Lipari y J. Walpole. Análisis de un planificador de retroalimentación basado en reservas. En el Simposio de Sistemas en Tiempo Real de IEEE, Diciembre de 2002. [3] S. Blake, D. Black, M. Carlson, E. Davies, Z. Wang y W. Weiss. Una arquitectura para servicios diferenciados. Centro de Información de la Red RFC 2475, Dic. 1998. [4] H. Franke, S. Nagar, C. Seetharaman y V. Kashyap. Habilitando la Gestión Autonómica de la Carga de Trabajo en Linux. En Actas de la Conferencia Internacional sobre Computación Autónoma (ICAC), Nueva York, Nueva York, mayo de 2004. IEEE. [5] E. Gamma, R. Helm, R. Johnson, y J. Vlissides. Patrones de diseño: Elementos de software orientado a objetos reutilizable. Addison-Wesley, Reading, MA, 1995. [6] G. Ghinea y J. P. Thomas. Impacto de QoS en la percepción y comprensión del usuario de videoclips multimedia. En MULTIMEDIA 98: Actas de la sexta conferencia internacional de ACM sobre Multimedia, páginas 49-54, Bristol, Reino Unido, 1998. ACM Press. [7] Grupo de Trabajo de Ingeniería de Internet. Grupo de Trabajo de Servicios Diferenciados (diffserv) Carta. www.ietf.org/html.charters/diffserv-charter.html, 2000. [8] X. Koutsoukos, R. Tekumalla, B. Natarajan y C. Lu. Control híbrido supervisado de sistemas en tiempo real. En el 11º Simposio de Tecnología y Aplicaciones en Tiempo Real y Sistemas Empotrados de IEEE, San Francisco, California, Mar. 2005. [9] J. Lehoczky, L. Sha y Y. Ding. El algoritmo de programación Rate Monotonic: Caracterización exacta y comportamiento en casos promedio. En Actas del 10º Simposio de Sistemas en Tiempo Real de IEEE (RTSS 1989), páginas 166-171. IEEE Computer Society Press, 1989. [10] J. Loyall, J. Gossett, C. Gill, R. Schantz, J. Zinky, P. Pal, R. Shapiro, C. Rodrigues, M. Atighetchi, and D. Karr.\n\nIEEE Computer Society Press, 1989. [10] J. Loyall, J. Gossett, C. Gill, R. Schantz, J. Zinky, P. Pal, R. Shapiro, C. Rodrigues, M. Atighetchi y D. Karr. Comparando y contrastando el soporte de middleware adaptativo en aplicaciones de objetos distribuidos de área amplia y embebidos. En Actas de la 21ª Conferencia Internacional sobre Sistemas de Computación Distribuida (ICDCS-21), páginas 625-634. IEEE, Abr. 2001. [11] C. Lu, J. A. Stankovic, G. Tao y S. H. Son. Programación en tiempo real con control de retroalimentación: Marco, modelado y algoritmos. Revista de Sistemas en Tiempo Real, 23(1/2):85-126, julio de 2002. [12] Object Management Group. Especificación CORBA en tiempo real, documento formal/02-08-02 de OMG, edición de agosto de 2002. [13] D. C. Schmidt, D. L. Levine y S. Mungee. El diseño y rendimiento de los corredores de solicitudes de objetos en tiempo real. Comunicaciones de Computadoras, 21(4):294-324, Abr. 1998. [14] Thomas Sikora. Tendencias y perspectivas en codificación de imágenes y videos. En Actas del IEEE, enero de 2005. [15] X. Wang, H.-M. Huang, V. Subramonian, C. Lu y C. Gill. CAMRIT: Middleware Adaptativo Basado en Control para la Transmisión de Imágenes en Tiempo Real. En Actas del 10º Simposio de Tecnología y Aplicaciones en Tiempo Real y Sistemas Empotrados del IEEE (RTAS), Toronto, Canadá, mayo de 2004. Artículo 7 ",
            "candidates": [],
            "error": [
                [
                    ""
                ]
            ]
        },
        "real-time corba specification": {
            "translated_key": "especificación CORBA en tiempo real",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Evaluating Adaptive Resource Management for Distributed Real-Time Embedded Systems Nishanth Shankaran, ∗ Xenofon Koutsoukos, Douglas C. Schmidt, and Aniruddha Gokhale Dept.",
                "of EECS, Vanderbilt University, Nashville ABSTRACT A challenging problem faced by researchers and developers of distributed real-time and embedded (DRE) systems is devising and implementing effective adaptive resource management strategies that can meet end-to-end quality of service (QoS) requirements in varying operational conditions.",
                "This paper presents two contributions to research in adaptive resource management for DRE systems.",
                "First, we describe the structure and functionality of the Hybrid Adaptive Resourcemanagement Middleware (HyARM), which provides adaptive resource management using hybrid control techniques for adapting to workload fluctuations and resource availability.",
                "Second, we evaluate the adaptive behavior of HyARM via experiments on a DRE multimedia system that distributes video in real-time.",
                "Our results indicate that HyARM yields predictable, stable, and high system performance, even in the face of fluctuating workload and resource availability.",
                "Categories and Subject Descriptors C.2.4 [Distributed Systems]: Distributed Applications; D.4.7 [Organization and Design]: Real-time Systems and Embedded Systems 1.",
                "INTRODUCTION Achieving end-to-end real-time quality of service (QoS) is particularly important for open distributed real-time and embedded (DRE) systems that face resource constraints, such as limited computing power and network bandwidth.",
                "Overutilization of these system resources can yield unpredictable and unstable behavior, whereas under-utilization can yield excessive system cost.",
                "A promising approach to meeting these end-to-end QoS requirements effectively, therefore, is to develop and apply adaptive middleware [10, 15], which is software whose functional and QoS-related properties can be modified either statically or dynamically.",
                "Static modifications are carried out to reduce footprint, leverage capabilities that exist in specific platforms, enable functional subsetting, and/or minimize hardware/software infrastructure dependencies.",
                "Objectives of dynamic modifications include optimizing system responses to changing environments or requirements, such as changing component interconnections, power-levels, CPU and network bandwidth availability, latency/jitter, and workload.",
                "In open DRE systems, adaptive middleware must make such modifications dependably, i.e., while meeting stringent end-to-end QoS requirements, which requires the specification and enforcement of upper and lower bounds on system resource utilization to ensure effective use of system resources.",
                "To meet these requirements, we have developed the Hybrid Adaptive Resource-management Middleware (HyARM), which is an open-source1 distributed resource management middleware.",
                "HyARM is based on hybrid control theoretic techniques [8], which provide a theoretical framework for designing control of complex system with both continuous and discrete dynamics.",
                "In our case study, which involves a distributed real-time video distribution system, the task of adaptive resource management is to control the utilization of the different resources, whose utilizations are described by continuous variables.",
                "We achieve this by adapting the resolution of the transmitted video, which is modeled as a continuous variable, and by changing the frame-rate and the compression, which are modeled by discrete actions.",
                "We have implemented HyARM atop The ACE ORB (TAO) [13], which is an implementation of the <br>real-time corba specification</br> [12].",
                "Our results show that (1) HyARM ensures effective system resource utilization and (2) end-to-end QoS requirements of higher priority applications are met, even in the face of fluctuations in workload.",
                "The remainder of the paper is organized as follows: Section 2 describes the architecture, functionality, and resource utilization model of our DRE multimedia system case study; Section 3 explains the structure and functionality of HyARM; Section 4 evaluates the adaptive behavior of HyARM via experiments on our multimedia system case study; Section 5 compares our research on HyARM with related work; and Section 6 presents concluding remarks. 1 The code and examples for HyARM are available at www. dre.vanderbilt.edu/∼nshankar/HyARM/.",
                "Article 7 2.",
                "CASE STUDY: DRE MULTIMEDIA SYSTEM This section describes the architecture and QoS requirements of our DRE multimedia system. 2.1 Multimedia System Architecture Wireless Link Wireless Link Wireless Link ` ` ` Physical Link Physical Link Physical Link Base Station End Receiver End Receiver End Receiver` Physical Link End Receiver UAV Camera Video Encoder Camera Video Encoder Camera Video Encoder UAV Camera Video Encoder Camera Video Encoder Camera Video Encoder UAV Camera Video Encoder Camera Video Encoder Camera Video Encoder Figure 1: DRE Multimedia System Architecture The architecture for our DRE multimedia system is shown in Figure 1 and consists of the following entities: (1)Data source (video capture by UAV), where video is captured (related to subject of interest) by camera(s) on each UAV, followed by encoding of raw video using a specific encoding scheme and transmitting the video to the next stage in the pipeline. (2)Data distributor (base station), where the video is processed to remove noise, followed by retransmission of the processed video to the next stage in the pipeline. (3) Sinks (command and control center), where the received video is again processed to remove noise, then decoded and finally rendered to end user via graphical displays.",
                "Significant improvements in video encoding/decoding and (de)compression techniques have been made as a result of recent advances in video encoding and compression techniques [14].",
                "Common video compression schemes are MPEG1, MPEG-2, Real Video, and MPEG-4.",
                "Each compression scheme is characterized by its resource requirement, e.g., the computational power to (de)compress the video signal and the network bandwidth required to transmit the compressed video signal.",
                "Properties of the compressed video, such as resolution and frame-rate determine both the quality and the resource requirements of the video.",
                "Our multimedia system case study has the following endto-end real-time QoS requirements: (1) latency, (2) interframe delay (also know as jitter), (3) frame rate, and (4) picture resolution.",
                "These QoS requirements can be classified as being either hard or soft.",
                "Hard QoS requirements should be met by the underlying system at all times, whereas soft QoS requirements can be missed occasionally.2 For our case study, we treat QoS requirements such as latency and jitter as harder QoS requirements and strive to meet these requirements at all times.",
                "In contrast, we treat QoS requirements such as video frame rate and picture resolution as softer QoS requirements and modify these video properties adaptively to handle dynamic changes in resource availabil2 Although hard and soft are often portrayed as two discrete requirement sets, in practice they are usually two ends of a continuum ranging from softer to harder rather than two disjoint points. ity effectively. 2.2 DRE Multimedia System Rresources There are two primary types of resources in our DRE multimedia system: (1) processors that provide computational power available at the UAVs, base stations, and end receivers and (2) network links that provide communication bandwidth between UAVs, base stations, and end receivers.",
                "The computing power required by the video capture and encoding tasks depends on dynamic factors, such as speed of the UAV, speed of the subject (if the subject is mobile), and distance between UAV and the subject.",
                "The wireless network bandwidth available to transmit video captured by UAVs to base stations also depends on the wireless connectivity between the UAVs and the base station, which in-turn depend on dynamic factors such as the speed of the UAVs and the relative distance between UAVs and base stations.",
                "The bandwidth of the link between the base station and the end receiver is limited, but more stable than the bandwidth of the wireless network.",
                "Resource requirements and availability of resources are subjected to dynamic changes.",
                "Two classes of applications - QoS-enabled and best-effort - use the multimedia system infrastructure described above to transmit video to their respective receivers.",
                "QoS-enabled class of applications have higher priority over best-effort class of application.",
                "In our study, emergency response applications belong to QoS-enabled and surveillance applications belong to best-effort class.",
                "For example, since a stream from an emergency response application is of higher importance than a video stream from a surveillance application, it receives more resources end-to-end.",
                "Since resource availability significantly affects QoS, we use current resource utilization as the primary indicator of system performance.",
                "We refer to the current level of system resource utilization as the system condition.",
                "Based on this definition, we can classify system conditions as being either under, over, or effectively utilized.",
                "Under-utilization of system resources occurs when the current resource utilization is lower than the desired lower bound on resource utilization.",
                "In this system condition, residual system resources (i.e., network bandwidth and computational power) are available in large amounts after meeting end-to-end QoS requirements of applications.",
                "These residual resources can be used to increase the QoS of the applications.",
                "For example, residual CPU and network bandwidth can be used to deliver better quality video (e.g., with greater resolution and higher frame rate) to end receivers.",
                "Over-utilization of system resources occurs when the current resource utilization is higher than the desired upper bound on resource utilization.",
                "This condition can arise from loss of resources - network bandwidth and/or computing power at base station, end receiver or at UAV - or may be due to an increase in resource demands by applications.",
                "Over-utilization is generally undesirable since the quality of the received video (such as resolution and frame rate) and timeliness properties (such as latency and jitter) are degraded and may result in an unstable (and thus ineffective) system.",
                "Effective resource utilization is the desired system condition since it ensures that end-to-end QoS requirements of the UAV-based multimedia system are met and utilization of both system resources, i.e., network bandwidth and computational power, are within their desired utilization bounds.",
                "Article 7 Section 3 describes techniques we applied to achieve effective utilization, even in the face of fluctuating resource availability and/or demand. 3.",
                "OVERVIEW OF HYARM This section describes the architecture of the Hybrid Adaptive Resource-management Middleware (HyARM).",
                "HyARM ensures efficient and predictable system performance by providing adaptive resource management, including monitoring of system resources and enforcing bounds on application resource utilization. 3.1 HyARM Structure and Functionality Resource Utilization Legend Resource Allocation Application Parameters Figure 2: HyARM Architecture HyARM is composed of three types of entities shown in Figure 2 and described below: Resource monitors observe the overall resource utilization for each type of resource and resource utilization per application.",
                "In our multimedia system, there are resource monitors for CPU utilization and network bandwidth.",
                "CPU monitors observe the CPU resource utilization of UAVs, base station, and end receivers.",
                "Network bandwidth monitors observe the network resource utilization of (1) wireless network link between UAVs and the base station and (2) wired network link between the base station and end receivers.",
                "The central controller maintains the system resource utilization below a desired bound by (1) processing periodic updates it receives from resource monitors and (2) modifying the execution of applications accordingly, e.g., by using different execution algorithms or operating the application with increased/decreased QoS.",
                "This adaptation process ensures that system resources are utilized efficiently and end-to-end application QoS requirements are met.",
                "In our multimedia system, the HyARM controller determines the value of application parameters such as (1) video compression schemes, such as Real Video and MPEG-4, and/or (2) frame rate, and (3) picture resolution.",
                "From the perspective of hybrid control theoretic techniques [8], the different video compression schemes and frame rate form the discrete variables of application execution and picture resolution forms the continuous variables.",
                "Application adapters modify application execution according to parameters recommended by the controller and ensures that the operation of the application is in accordance with the recommended parameters.",
                "In the current mplementation of HyARM, the application adapter modifies the input parameters to the application that affect application QoS and resource utilization - compression scheme, frame rate, and picture resolution.",
                "In our future implementations, we plan to use resource reservation mechanisms such as Differentiated Service [7, 3] and Class-based Kernel Resource Management [4] to provision/reserve network and CPU resources.",
                "In our multimedia system, the application adapter ensures that the video is encoded at the recommended frame rate and resolution using the specified compression scheme. 3.2 Applying HyARM to the Multimedia System Case Study HyARM is built atop TAO [13], a widely used open-source implementation of Real-time CORBA [12].",
                "HyARM can be applied to ensure efficient, predictable and adaptive resource management of any DRE system where resource availability and requirements are subject to dynamic change.",
                "Figure 3 shows the interaction of various parts of the DRE multimedia system developed with HyARM, TAO, and TAOs A/V Streaming Service.",
                "TAOs A/V Streaming service is an implementation of the CORBA A/V Streaming Service specification.",
                "TAOs A/V Streaming Service is a QoS-enabled video distribution service that can transfer video in real-time to one or more receivers.",
                "We use the A/V Streaming Service to transmit the video from the UAVs to the end receivers via the base station.",
                "Three entities of Receiver UAV TAO Resource Utilization HyARM Central Controller A/V Streaming Service : Sender MPEG1 MPEG4 Real Video HyARM Resource Monitor A/V Streaming Service : Receiver Compressed Video Compressed Video Application HyARM Application Adapter Remote Object Call Control Inputs Resource Utilization Resource Utilization / Control Inputs Control Inputs Legend Figure 3: Developing the DRE Multimedia System with HyARM HyARM, namely the resource monitors, central controller, and application adapters are built as CORBA servants, so they can be distributed throughout a DRE system.",
                "Resource monitors are remote CORBA objects that update the central controller periodically with the current resource utilization.",
                "Application adapters are collocated with applications since the two interact closely.",
                "As shown in Figure 3, UAVs compress the data using various compression schemes, such as MPEG1, MPEG4, and Real Video, and uses TAOs A/V streaming service to transmit the video to end receivers.",
                "HyARMs resource monitors continuously observe the system resource utilization and notify the central controller with the current utilization. 3 The interaction between the controller and the resource monitors uses the Observer pattern [5].",
                "When the controller receives resource utilization updates from monitors, it computes the necessary modifications to application(s) parameters and notifies application adapter(s) via a remote operation call.",
                "Application adapter(s), that are collocated with the application, modify the input parameters to the application - in our case video encoder - to modify the application resource utilization and QoS. 3 The base station is not included in the figure since it only retransmits the video received from UAVs to end receivers.",
                "Article 7 4.",
                "PERFORMANCE RESULTS AND ANALYSIS This section first describes the testbed that provides the infrastructure for our DRE multimedia system, which was used to evaluate the performance of HyARM.",
                "We then describe our experiments and analyze the results obtained to empirically evaluate how HyARM behaves during underand over-utilization of system resources. 4.1 Overview of the Hardware and Software Testbed Our experiments were performed on the Emulab testbed at University of Utah.",
                "The hardware configuration consists of two nodes acting as UAVs, one acting as base station, and one as end receiver.",
                "Video from the two UAVs were transmitted to a base station via a LAN configured with the following properties: average packet loss ratio of 0.3 and bandwidth 1 Mbps.",
                "The network bandwidth was chosen to be 1 Mbps since each UAV in the DRE multimedia system is allocated 250 Kbps.",
                "These parameters were chosen to emulate an unreliable wireless network with limited bandwidth between the UAVs and the base station.",
                "From the base station, the video was retransmitted to the end receiver via a reliable wireline link of 10 Mbps bandwidth with no packet loss.",
                "The hardware configuration of all the nodes was chosen as follows: 600 MHz Intel Pentium III processor, 256 MB physical memory, 4 Intel EtherExpress Pro 10/100 Mbps Ethernet ports, and 13 GB hard drive.",
                "A real-time version of Linux - TimeSys Linux/NET 3.1.214 based on RedHat Linux 9was used as the operating system for all nodes.",
                "The following software packages were also used for our experiments: (1) Ffmpeg 0.4.9-pre1, which is an open-source library (http: //www.ffmpeg.sourceforge.net/download.php) that compresses video into MPEG-2, MPEG-4, Real Video, and many other video formats. (2) Iftop 0.16, which is an opensource library (http://www.ex-parrot.com/∼pdw/iftop/) we used for monitoring network activity and bandwidth utilization. (3) ACE 5.4.3 + TAO 1.4.3, which is an opensource (http://www.dre.vanderbilt.edu/TAO) implementation of the Real-time CORBA [12] specification upon which HyARM is built.",
                "TAO provides the CORBA Audio/Video (A/V) Streaming Service that we use to transmit the video from the UAVs to end receivers via the base station. 4.2 Experiment Configuration Our experiment consisted of two (emulated) UAVs that simultaneously send video to the base station using the experimentation setup described in Section 4.1.",
                "At the base station, video was retransmitted to the end receivers (without any modifications), where it was stored to a file.",
                "Each UAV hosted two applications, one QoS-enabled application (emergency response), and one best-effort application (surveillance).",
                "Within each UAV, computational power is shared between the applications, while the network bandwidth is shared among all applications.",
                "To evaluate the QoS provided by HyARM, we monitored CPU utilization at the two UAVs, and network bandwidth utilization between the UAV and the base station.",
                "CPU resource utilization was not monitored at the base station and the end receiver since they performed no computationallyintensive operations.",
                "The resource utilization of the 10 Mpbs physical link between the base station and the end receiver does not affect QoS of applications and is not monitored by HyARM since it is nearly 10 times the 1 MB bandwidth of the LAN between the UAVs and the base station.",
                "The experiment also monitors properties of the video that affect the QoS of the applications, such as latency, jitter, frame rate, and resolution.",
                "The set point on resource utilization for each resource was specified at 0.69, which is the upper bound typically recommended by scheduling techniques, such as rate monotonic algorithm [9].",
                "Since studies [6] have shown that human eyes can perceive delays more than 200ms, we use this as the upper bound on jitter of the received video.",
                "QoS requirements for each class of application is specified during system initialization and is shown in Table 1. 4.3 Empirical Results and Analysis This section presents the results obtained from running the experiment described in Section 4.2 on our DRE multimedia system testbed.",
                "We used system resource utilization as a metric to evaluate the adaptive resource management capabilities of HyARM under varying input work loads.",
                "We also used application QoS as a metric to evaluate HyARMs capabilities to support end-to-end QoS requirements of the various classes of applications in the DRE multimedia system.",
                "We analyze these results to explain the significant differences in system performance and application QoS.",
                "Comparison of system performance is decomposed into comparison of resource utilization and application QoS.",
                "For system resource utilization, we compare (1) network bandwidth utilization of the local area network and (2) CPU utilization at the two UAV nodes.",
                "For application QoS, we compare mean values of video parameters, including (1) picture resolution, (2) frame rate, (3) latency, and (4) jitter.",
                "Comparison of resource utilization.",
                "Over-utilization of system resources in DRE systems can yield an unstable system.",
                "In contrast, under-utilization of system resources increases system cost.",
                "Figure 4 and Figure 5 compare the system resource utilization with and without HyARM.",
                "Figure 4 shows that HyARM maintains system utilization close to the desired utilization set point during fluctuation in input work load by transmitting video of higher (or lower) QoS for QoS-enabled (or best-effort) class of applications during over (or under) utilization of system resources.",
                "Figure 5 shows that without HyARM, network utilization was as high as 0.9 during increase in workload conditions, which is greater than the utilization set point of 0.7 by 0.2.",
                "As a result of over-utilization of resources, QoS of the received video, such as average latency and jitter, was affected significantly.",
                "Without HyARM, system resources were either under-utilized or over-utilized, both of which are undesirable.",
                "In contrast, with HyARM, system resource utilization is always close to the desired set point, even during fluctuations in application workload.",
                "During sudden fluctuation in application workload, system conditions may be temporarily undesirable, but are restored to the desired condition within several sampling periods.",
                "Temporary over-utilization of resources is permissible in our multimedia system since the quality of the video may be degraded for a short period of time, though application QoS will be degraded significantly if poor quality video is transmitted for a longer period of time.",
                "Comparison of application QoS.",
                "Figures 6, Figure 7, and Table 2 compare latency, jitter, resolution, and frameArticle 7 Class Resolution Frame Rate Latency (msec ) Jitter (msec) QoS Enabled 1024 x 768 25 200 200 Best-effort 320 x 240 15 300 250 Table 1: Application QoS Requirements Figure 4: Resource utilization with HyARM Figure 5: Resource utilization without HyARM rate of the received video, respectively.",
                "Table 2 shows that HyARM increases the resolution and frame video of QoSenabled applications, but decreases the resolution and frame rate of best effort applications.",
                "During over utilization of system resources, resolution and frame rate of lower priority applications are reduced to adapt to fluctuations in application workload and to maintain the utilization of resources at the specified set point.",
                "It can be seen from Figure 6 and Figure 7 that HyARM reduces the latency and jitter of the received video significantly.",
                "These figures show that the QoS of QoS-enabled applications is greatly improved by HyARM.",
                "Although application parameters, such as frame rate and resolutions, which affect the soft QoS requirements of best-effort applications may be compromised, the hard QoS requirements, such as latency and jitter, of all applications are met.",
                "HyARM responds to fluctuation in resource availability and/or demand by constant monitoring of resource utilization.",
                "As shown in Figure 4, when resources utilization increases above the desired set point, HyARM lowers the utilization by reducing the QoS of best-effort applications.",
                "This adaptation ensures that enough resources are available for QoS-enabled applications to meet their QoS needs.",
                "Figures 6 and 7 show that the values of latency and jitter of the received video of the system with HyARM are nearly half of the corresponding value of the system without HyARM.",
                "With HyARM, values of these parameters are well below the specified bounds, whereas without HyARM, these value are significantly above the specified bounds due to overutilization of the network bandwidth, which leads to network congestion and results in packet loss.",
                "HyARM avoids this by reducing video parameters such as resolution, frame-rate, and/or modifying the compression scheme used to compress the video.",
                "Our conclusions from analyzing the results described above are that applying adaptive middleware via hybrid control to DRE system helps to (1) improve application QoS, (2) increase system resource utilization, and (3) provide better predictability (lower latency and inter-frame delay) to QoSenabled applications.",
                "These improvements are achieved largely due to monitoring of system resource utilization, efficient system workload management, and adaptive resource provisioning by means of HyARMs network/CPU resource monitors, application adapter, and central controller, respectively. 5.",
                "RELATED WORK A number of control theoretic approaches have been applied to DRE systems recently.",
                "These techniques aid in overcoming limitations with traditional scheduling approaches that handle dynamic changes in resource availability poorly and result in a rigidly scheduled system that adapts poorly to change.",
                "A survey of these techniques is presented in [1].",
                "One such approach is feedback control scheduling (FCS) [2, 11].",
                "FCS algorithms dynamically adjust resource allocation by means of software feedback control loops.",
                "FCS algorithms are modeled and designed using rigorous controltheoretic methodologies.",
                "These algorithms provide robust and analytical performance assurances despite uncertainties in resource availability and/or demand.",
                "Although existing FCS algorithms have shown promise, these algorithms often assume that the system has continuous control variable(s) that can continuously be adjusted.",
                "While this assumption holds for certain classes of systems, there are many classes of DRE systems, such as avionics and total-ship computing environments that only support a finite a priori set of discrete configurations.",
                "The control variables in such systems are therefore intrinsically discrete.",
                "HyARM handles both continuous control variables, such as picture resolution, and discrete control variable, such as discrete set of frame rates.",
                "HyARM can therefore be applied to system that support continuous and/or discrete set of control variables.",
                "The DRE multimedia system as described in Section 2 is an example DRE system that offers both continuous (picture resolution) and discrete set (frame-rate) of control variables.",
                "These variables are modified by HyARM to achieve efficient resource utilization and improved application QoS. 6.",
                "CONCLUDING REMARKS Article 7 Figure 6: Comparison of Video Latency Figure 7: Comparison of Video Jitter Source Picture Size / Frame Rate With HyARM Without HyARM UAV1 QoS Enabled Application 1122 X 1496 / 25 960 X 720 / 20 UAV1 Best-effort Application 288 X 384 / 15 640 X 480 / 20 UAV2 QoS Enabled Application 1126 X 1496 / 25 960 X 720 / 20 UAV2 Best-effort Application 288 X 384 / 15 640 X 480 / 20 Table 2: Comparison of Video Quality Many distributed real-time and embedded (DRE) systems demand end-to-end quality of service (QoS) enforcement from their underlying platforms to operate correctly.",
                "These systems increasingly run in open environments, where resource availability is subject to dynamic change.",
                "To meet end-to-end QoS in dynamic environments, DRE systems can benefit from an adaptive middleware that monitors system resources, performs efficient application workload management, and enables efficient resource provisioning for executing applications.",
                "This paper described HyARM, an adaptive middleware, that provides effective resource management to DRE systems.",
                "HyARM employs hybrid control techniques to provide the adaptive middleware capabilities, such as resource monitoring and application adaptation that are key to providing the dynamic resource management capabilities for open DRE systems.",
                "We employed HyARM to a representative DRE multimedia system that is implemented using Real-time CORBA and CORBA A/V Streaming Service.",
                "We evaluated the performance of HyARM in a system composed of three distributed resources and two classes of applications with two applications each.",
                "Our empirical results indicate that HyARM ensures (1) efficient resource utilization by maintaining the resource utilization of system resources within the specified utilization bounds, (2) QoS requirements of QoS-enabled applications are met at all times.",
                "Overall, HyARM ensures efficient, predictable, and adaptive resource management for DRE systems. 7.",
                "REFERENCES [1] T. F. Abdelzaher, J. Stankovic, C. Lu, R. Zhang, and Y. Lu.",
                "Feddback Performance Control in Software Services.",
                "IEEE: Control Systems, 23(3), June 2003. [2] L. Abeni, L. Palopoli, G. Lipari, and J. Walpole.",
                "Analysis of a reservation-based feedback scheduler.",
                "In IEEE Real-Time Systems Symposium, Dec. 2002. [3] S. Blake, D. Black, M. Carlson, E. Davies, Z. Wang, and W. Weiss.",
                "An architecture for differentiated services.",
                "Network Information Center RFC 2475, Dec. 1998. [4] H. Franke, S. Nagar, C. Seetharaman, and V. Kashyap.",
                "Enabling Autonomic Workload Management in Linux.",
                "In Proceedings of the International Conference on Autonomic Computing (ICAC), New York, New York, May 2004.",
                "IEEE. [5] E. Gamma, R. Helm, R. Johnson, and J. Vlissides.",
                "Design Patterns: Elements of Reusable Object-Oriented Software.",
                "Addison-Wesley, Reading, MA, 1995. [6] G. Ghinea and J. P. Thomas.",
                "Qos impact on user perception and understanding of multimedia video clips.",
                "In MULTIMEDIA 98: Proceedings of the sixth ACM international conference on Multimedia, pages 49-54, Bristol, United Kingdom, 1998.",
                "ACM Press. [7] Internet Engineering Task Force.",
                "Differentiated Services Working Group (diffserv) Charter. www.ietf.org/html.charters/diffserv-charter.html, 2000. [8] X. Koutsoukos, R. Tekumalla, B. Natarajan, and C. Lu.",
                "Hybrid Supervisory Control of Real-Time Systems.",
                "In 11th IEEE Real-Time and Embedded Technology and Applications Symposium, San Francisco, California, Mar. 2005. [9] J. Lehoczky, L. Sha, and Y. Ding.",
                "The Rate Monotonic Scheduling Algorithm: Exact Characterization and Average Case Behavior.",
                "In Proceedings of the 10th IEEE Real-Time Systems Symposium (RTSS 1989), pages 166-171.",
                "IEEE Computer Society Press, 1989. [10] J. Loyall, J. Gossett, C. Gill, R. Schantz, J. Zinky, P. Pal, R. Shapiro, C. Rodrigues, M. Atighetchi, and D. Karr.",
                "Comparing and Contrasting Adaptive Middleware Support in Wide-Area and Embedded Distributed Object Applications.",
                "In Proceedings of the 21st International Conference on Distributed Computing Systems (ICDCS-21), pages 625-634.",
                "IEEE, Apr. 2001. [11] C. Lu, J.",
                "A. Stankovic, G. Tao, and S. H. Son.",
                "Feedback Control Real-Time Scheduling: Framework, Modeling, and Algorithms.",
                "Real-Time Systems Journal, 23(1/2):85-126, July 2002. [12] Object Management Group.",
                "<br>real-time corba specification</br>, OMG Document formal/02-08-02 edition, Aug. 2002. [13] D. C. Schmidt, D. L. Levine, and S. Mungee.",
                "The Design and Performance of Real-Time Object Request Brokers.",
                "Computer Communications, 21(4):294-324, Apr. 1998. [14] Thomas Sikora.",
                "Trends and Perspectives in Image and Video Coding.",
                "In Proceedings of the IEEE, Jan. 2005. [15] X. Wang, H.-M. Huang, V. Subramonian, C. Lu, and C. Gill.",
                "CAMRIT: Control-based Adaptive Middleware for Real-time Image Transmission.",
                "In Proc. of the 10th IEEE Real-Time and Embedded Tech. and Applications Symp. (RTAS), Toronto, Canada, May 2004.",
                "Article 7"
            ],
            "original_annotated_samples": [
                "We have implemented HyARM atop The ACE ORB (TAO) [13], which is an implementation of the <br>real-time corba specification</br> [12].",
                "<br>real-time corba specification</br>, OMG Document formal/02-08-02 edition, Aug. 2002. [13] D. C. Schmidt, D. L. Levine, and S. Mungee."
            ],
            "translated_annotated_samples": [
                "Hemos implementado HyARM sobre el ORB ACE (TAO) [13], que es una implementación de la <br>especificación CORBA en tiempo real</br> [12].",
                "Especificación CORBA en tiempo real, documento formal/02-08-02 de OMG, edición de agosto de 2002. [13] D. C. Schmidt, D. L. Levine y S. Mungee."
            ],
            "translated_text": "Evaluando la Gestión de Recursos Adaptativa para Sistemas Empotrados Distribuidos en Tiempo Real de Nishanth Shankaran, Xenofon Koutsoukos, Douglas C. Schmidt y Aniruddha Gokhale, Dept. de EECS, Universidad de Vanderbilt, Nashville RESUMEN Un problema desafiante enfrentado por investigadores y desarrolladores de sistemas distribuidos en tiempo real y embebidos (DRE) es idear e implementar estrategias efectivas de gestión adaptativa de recursos que puedan cumplir con los requisitos de calidad de servicio (QoS) de extremo a extremo en condiciones operativas variables. Este artículo presenta dos contribuciones a la investigación en gestión de recursos adaptativa para sistemas DRE. Primero, describimos la estructura y funcionalidad del Middleware de Gestión de Recursos Adaptativos Híbridos (HyARM), que proporciona gestión de recursos adaptativa utilizando técnicas de control híbridas para adaptarse a las fluctuaciones de carga de trabajo y disponibilidad de recursos. Segundo, evaluamos el comportamiento adaptativo de HyARM a través de experimentos en un sistema multimedia DRE que distribuye video en tiempo real. Nuestros resultados indican que HyARM produce un rendimiento del sistema predecible, estable y alto, incluso ante cargas de trabajo y disponibilidad de recursos fluctuantes. Categorías y Descriptores de Asignaturas C.2.4 [Sistemas Distribuidos]: Aplicaciones Distribuidas; D.4.7 [Organización y Diseño]: Sistemas en Tiempo Real y Sistemas Embebidos 1. INTRODUCCIÓN Lograr la calidad de servicio (QoS) en tiempo real de extremo a extremo es particularmente importante para sistemas distribuidos en tiempo real y embebidos (DRE) abiertos que enfrentan limitaciones de recursos, como potencia de cómputo limitada y ancho de banda de red. La sobreutilización de estos recursos del sistema puede generar un comportamiento impredecible e inestable, mientras que la subutilización puede resultar en un costo excesivo del sistema. Un enfoque prometedor para cumplir de manera efectiva con estos requisitos de calidad de servicio de extremo a extremo, por lo tanto, es desarrollar y aplicar middleware adaptativo [10, 15], que es un software cuyas propiedades funcionales y relacionadas con la calidad de servicio pueden ser modificadas estática o dinámicamente. Las modificaciones estáticas se realizan para reducir la huella, aprovechar las capacidades existentes en plataformas específicas, habilitar la selección funcional y/o minimizar las dependencias de infraestructura de hardware/software. Los objetivos de las modificaciones dinámicas incluyen optimizar las respuestas del sistema a entornos o requisitos cambiantes, como la modificación de interconexiones de componentes, niveles de potencia, disponibilidad de ancho de banda de CPU y red, latencia/jitter y carga de trabajo. En los sistemas DRE abiertos, el middleware adaptativo debe realizar modificaciones de manera confiable, es decir, cumpliendo con los estrictos requisitos de calidad de servicio de extremo a extremo, lo que requiere la especificación y aplicación de límites superiores e inferiores en la utilización de recursos del sistema para garantizar un uso efectivo de los recursos del sistema. Para cumplir con estos requisitos, hemos desarrollado el Middleware de Gestión de Recursos Híbrido Adaptativo (HyARM), que es un middleware de gestión de recursos distribuido de código abierto. HyARM se basa en técnicas híbridas de control teórico, las cuales proporcionan un marco teórico para diseñar el control de sistemas complejos con dinámicas tanto continuas como discretas. En nuestro estudio de caso, que implica un sistema distribuido de distribución de video en tiempo real, la tarea de gestión de recursos adaptativa consiste en controlar la utilización de los diferentes recursos, cuyas utilizaciones están descritas por variables continuas. Logramos esto adaptando la resolución del video transmitido, que se modela como una variable continua, y cambiando la velocidad de cuadros y la compresión, que se modelan mediante acciones discretas. Hemos implementado HyARM sobre el ORB ACE (TAO) [13], que es una implementación de la <br>especificación CORBA en tiempo real</br> [12]. Nuestros resultados muestran que (1) HyARM garantiza una utilización efectiva de los recursos del sistema y (2) se cumplen los requisitos de calidad de servicio de extremo a extremo de las aplicaciones de mayor prioridad, incluso ante fluctuaciones en la carga de trabajo. El resto del documento está organizado de la siguiente manera: la Sección 2 describe la arquitectura, funcionalidad y modelo de utilización de recursos de nuestro estudio de caso del sistema multimedia DRE; la Sección 3 explica la estructura y funcionalidad de HyARM; la Sección 4 evalúa el comportamiento adaptativo de HyARM a través de experimentos en nuestro estudio de caso del sistema multimedia; la Sección 5 compara nuestra investigación sobre HyARM con trabajos relacionados; y la Sección 6 presenta observaciones finales. El código y ejemplos de HyARM están disponibles en www.dre.vanderbilt.edu/∼nshankar/HyARM/. Artículo 7 2. ESTUDIO DE CASO: SISTEMA MULTIMEDIA DRE Esta sección describe la arquitectura y los requisitos de QoS de nuestro sistema multimedia DRE. 2.1 Arquitectura del Sistema Multimedia Enlace Inalámbrico Enlace Inalámbrico Enlace Inalámbrico ` ` ` Enlace Físico Enlace Físico Enlace Físico Estación Base Extremo Receptor Extremo Receptor Extremo Receptor` Enlace Físico Extremo Receptor Cámara UAV Codificador de Video Cámara Codificador de Video Cámara Codificador de Video Cámara UAV Codificador de Video Cámara Codificador de Video Cámara Codificador de Video Cámara UAV Codificador de Video Cámara Codificador de Video Cámara Codificador de Video Figura 1: Arquitectura del Sistema Multimedia DRE La arquitectura de nuestro sistema multimedia DRE se muestra en la Figura 1 y consta de las siguientes entidades: (1) Fuente de datos (captura de video por UAV), donde el video es capturado (relacionado con el tema de interés) por la(s) cámara(s) en cada UAV, seguido por la codificación del video crudo utilizando un esquema de codificación específico y transmitiendo el video a la siguiente etapa en la cadena de procesamiento. (2) Distribuidor de datos (estación base), donde el video es procesado para eliminar ruido, seguido por la retransmisión del video procesado a la siguiente etapa en la cadena de procesamiento. (3) Destinos (centro de comando y control), donde el video recibido es nuevamente procesado para eliminar ruido, luego decodificado y finalmente renderizado al usuario final a través de pantallas gráficas. Se han logrado mejoras significativas en las técnicas de codificación/decodificación y compresión (des) de video como resultado de los avances recientes en las técnicas de codificación y compresión de video [14]. Los esquemas comunes de compresión de video son MPEG1, MPEG-2, Real Video y MPEG-4. Cada esquema de compresión se caracteriza por sus requisitos de recursos, por ejemplo, la potencia computacional para (des)comprimir la señal de video y el ancho de banda de red necesario para transmitir la señal de video comprimida. Las propiedades del video comprimido, como la resolución y la velocidad de fotogramas, determinan tanto la calidad como los requisitos de recursos del video. Nuestro estudio de caso del sistema multimedia tiene los siguientes requisitos de calidad de servicio (QoS) en tiempo real de extremo a extremo: (1) latencia, (2) retardo entre cuadros (también conocido como jitter), (3) frecuencia de cuadros y (4) resolución de imagen. Estos requisitos de calidad de servicio (QoS) pueden clasificarse como duros o blandos. Los requisitos de QoS estrictos deben ser cumplidos por el sistema subyacente en todo momento, mientras que los requisitos de QoS flexibles pueden ser ocasionalmente incumplidos. Para nuestro estudio de caso, tratamos los requisitos de QoS como la latencia y la variabilidad de retardo como requisitos de QoS más estrictos y nos esforzamos por cumplir con estos requisitos en todo momento. Por el contrario, tratamos los requisitos de QoS como la tasa de cuadros de video y la resolución de imagen como requisitos de QoS más flexibles y modificamos estas propiedades de video de manera adaptativa para manejar los cambios dinámicos en la disponibilidad de recursos de manera efectiva. Aunque a menudo se presentan como dos conjuntos de requisitos discretos, en la práctica suelen ser dos extremos de un continuo que va desde más suave a más duro en lugar de dos puntos disjuntos. La potencia informática requerida por las tareas de captura y codificación de video depende de factores dinámicos, como la velocidad del UAV, la velocidad del sujeto (si el sujeto es móvil) y la distancia entre el UAV y el sujeto. La cantidad de ancho de banda de la red inalámbrica disponible para transmitir video capturado por UAVs a estaciones base también depende de la conectividad inalámbrica entre los UAVs y la estación base, que a su vez depende de factores dinámicos como la velocidad de los UAVs y la distancia relativa entre los UAVs y las estaciones base. El ancho de banda del enlace entre la estación base y el receptor final está limitado, pero es más estable que el ancho de banda de la red inalámbrica. Los requisitos de recursos y la disponibilidad de recursos están sujetos a cambios dinámicos. Dos clases de aplicaciones - habilitadas para QoS y de mejor esfuerzo - utilizan la infraestructura del sistema multimedia descrita anteriormente para transmitir video a sus respectivos receptores. Las aplicaciones de clase habilitada para QoS tienen mayor prioridad sobre las aplicaciones de clase de mejor esfuerzo. En nuestro estudio, las aplicaciones de respuesta de emergencia pertenecen a la clase habilitada para la calidad de servicio (QoS), y las aplicaciones de vigilancia pertenecen a la clase de mejor esfuerzo. Por ejemplo, dado que un flujo de datos de una aplicación de respuesta de emergencia es de mayor importancia que un flujo de video de una aplicación de vigilancia, recibe más recursos de extremo a extremo. Dado que la disponibilidad de recursos afecta significativamente la calidad de servicio, utilizamos la utilización actual de recursos como indicador principal del rendimiento del sistema. Nos referimos al nivel actual de utilización de recursos del sistema como la condición del sistema. Basándonos en esta definición, podemos clasificar las condiciones del sistema como estando subutilizadas, sobreutilizadas o utilizadas de manera efectiva. La subutilización de los recursos del sistema ocurre cuando la utilización actual de los recursos es menor que el límite inferior deseado de utilización de recursos. En este sistema, los recursos residuales del sistema (es decir, ancho de banda de red y potencia computacional) están disponibles en grandes cantidades después de cumplir con los requisitos de calidad de servicio de extremo a extremo de las aplicaciones. Estos recursos residuales se pueden utilizar para aumentar la calidad de servicio de las aplicaciones. Por ejemplo, la CPU residual y el ancho de banda de red pueden ser utilizados para entregar videos de mejor calidad (por ejemplo, con mayor resolución y mayor velocidad de cuadros) a los receptores finales. La sobreutilización de los recursos del sistema ocurre cuando la utilización actual de recursos es mayor que el límite superior deseado de utilización de recursos. Esta condición puede surgir por la pérdida de recursos - ancho de banda de red y/o potencia de cómputo en la estación base, receptor final o en el UAV - o puede ser debido a un aumento en las demandas de recursos por parte de las aplicaciones. La sobreutilización es generalmente indeseable ya que la calidad del video recibido (como la resolución y la velocidad de cuadros) y las propiedades de puntualidad (como la latencia y la fluctuación) se degradan y pueden resultar en un sistema inestable (y por lo tanto ineficaz). La utilización efectiva de recursos es la condición deseada del sistema, ya que garantiza que se cumplan los requisitos de calidad de servicio de extremo a extremo del sistema multimedia basado en UAV y que la utilización de los recursos del sistema, es decir, el ancho de banda de la red y la potencia computacional, se encuentren dentro de sus límites de utilización deseados. El artículo 7, sección 3 describe las técnicas que aplicamos para lograr una utilización efectiva, incluso ante la disponibilidad y/o demanda fluctuante de recursos. DESCRIPCIÓN DE HYARM Esta sección describe la arquitectura del Middleware de Gestión de Recursos Adaptativos Híbrido (HyARM). HyARM garantiza un rendimiento eficiente y predecible del sistema al proporcionar gestión adaptativa de recursos, que incluye la monitorización de los recursos del sistema y la imposición de límites en la utilización de recursos de las aplicaciones. 3.1 Estructura y Funcionalidad de HyARM Leyenda de Utilización de Recursos Asignación de Recursos Parámetros de Aplicación Figura 2: Arquitectura de HyARM HyARM está compuesto por tres tipos de entidades mostradas en la Figura 2 y descritas a continuación: Los monitores de recursos observan la utilización general de recursos para cada tipo de recurso y la utilización de recursos por aplicación. En nuestro sistema multimedia, hay monitores de recursos para la utilización de la CPU y el ancho de banda de la red. Los monitores de la CPU observan la utilización de recursos de la CPU de los UAV, la estación base y los receptores finales. Los monitores de ancho de banda de red observan la utilización de recursos de red de (1) el enlace de red inalámbrica entre los UAV y la estación base y (2) el enlace de red cableada entre la estación base y los receptores finales. El controlador central mantiene la utilización de recursos del sistema por debajo de un límite deseado mediante (1) el procesamiento de actualizaciones periódicas que recibe de los monitores de recursos y (2) modificando la ejecución de las aplicaciones en consecuencia, por ejemplo, utilizando diferentes algoritmos de ejecución u operando la aplicación con mayor/menor calidad de servicio (QoS). Este proceso de adaptación garantiza que los recursos del sistema se utilicen de manera eficiente y se cumplan los requisitos de calidad de servicio de la aplicación de extremo a extremo. En nuestro sistema multimedia, el controlador HyARM determina el valor de parámetros de la aplicación como (1) esquemas de compresión de video, como Real Video y MPEG-4, y/o (2) velocidad de cuadros, y (3) resolución de imagen. Desde la perspectiva de las técnicas híbridas de control teórico [8], los diferentes esquemas de compresión de video y la velocidad de cuadros forman las variables discretas de la ejecución de la aplicación, mientras que la resolución de imagen forma las variables continuas. Los adaptadores de aplicación modifican la ejecución de la aplicación de acuerdo con los parámetros recomendados por el controlador y garantizan que el funcionamiento de la aplicación esté de acuerdo con los parámetros recomendados. En la implementación actual de HyARM, el adaptador de la aplicación modifica los parámetros de entrada a la aplicación que afectan la calidad de servicio (QoS) de la aplicación y la utilización de recursos, como el esquema de compresión, la velocidad de fotogramas y la resolución de la imagen. En nuestras futuras implementaciones, planeamos utilizar mecanismos de reserva de recursos como Differentiated Service [7, 3] y Class-based Kernel Resource Management [4] para aprovisionar/reservar recursos de red y CPU. En nuestro sistema multimedia, el adaptador de la aplicación se asegura de que el video se codifique a la velocidad de cuadros y resolución recomendadas utilizando el esquema de compresión especificado. 3.2 Aplicando HyARM al Estudio de Caso del Sistema Multimedia. HyARM se construye sobre TAO [13], una implementación de código abierto ampliamente utilizada de CORBA en tiempo real [12]. HyARM se puede aplicar para garantizar una gestión eficiente, predecible y adaptable de recursos en cualquier sistema DRE donde la disponibilidad y los requisitos de recursos están sujetos a cambios dinámicos. La Figura 3 muestra la interacción de varias partes del sistema multimedia DRE desarrollado con HyARM, TAO y el Servicio de Streaming de Audio y Video de TAOs. El servicio de transmisión de audio/vídeo de TAO es una implementación de la especificación del Servicio de Transmisión de Audio/Vídeo de CORBA. El servicio de transmisión de audio y video de TAOs es un servicio de distribución de video habilitado para QoS que puede transferir video en tiempo real a uno o más receptores. Utilizamos el Servicio de Transmisión de Audio y Video para enviar el video desde los VANTs a los receptores finales a través de la estación base. Tres entidades del sistema multimedia DRE con HyARM, a saber, los monitores de recursos, el controlador central y los adaptadores de aplicaciones, están construidos como servidores CORBA, por lo que pueden distribuirse en todo el sistema DRE. Los monitores de recursos son objetos CORBA remotos que actualizan periódicamente al controlador central con la utilización actual de recursos. Los adaptadores de aplicaciones se ubican junto a las aplicaciones ya que ambas interactúan estrechamente. Como se muestra en la Figura 3, los UAV comprimen los datos utilizando varios esquemas de compresión, como MPEG1, MPEG4 y Real Video, y utilizan el servicio de transmisión de audio/vídeo de TAOs para enviar el video a los receptores finales. Los monitores de recursos de HyARMs observan continuamente la utilización de recursos del sistema y notifican al controlador central con la utilización actual. La interacción entre el controlador y los monitores de recursos utiliza el patrón Observer. Cuando el controlador recibe actualizaciones de utilización de recursos de los monitores, calcula las modificaciones necesarias a los parámetros de la(s) aplicación(es) y notifica al adaptador de la aplicación mediante una llamada de operación remota. Los adaptadores de aplicación, que están ubicados junto a la aplicación, modifican los parámetros de entrada de la aplicación, en nuestro caso el codificador de video, para modificar la utilización de recursos de la aplicación y la calidad de servicio. La estación base no está incluida en la figura ya que solo retransmite el video recibido de los UAV a los receptores finales. Artículo 7 4. RESULTADOS DE RENDIMIENTO Y ANÁLISIS Esta sección describe primero el banco de pruebas que proporciona la infraestructura para nuestro sistema multimedia DRE, que se utilizó para evaluar el rendimiento de HyARM. Luego describimos nuestros experimentos y analizamos los resultados obtenidos para evaluar empíricamente cómo se comporta HyARM durante la subutilización y sobreutilización de los recursos del sistema. 4.1 Descripción general del banco de pruebas de hardware y software Nuestros experimentos se realizaron en el banco de pruebas Emulab en la Universidad de Utah. La configuración de hardware consiste en dos nodos actuando como UAVs, uno actuando como estación base y otro como receptor final. El video de los dos UAV fue transmitido a una estación base a través de una LAN configurada con las siguientes propiedades: una relación promedio de pérdida de paquetes de 0.3 y un ancho de banda de 1 Mbps. El ancho de banda de la red se eligió para ser de 1 Mbps ya que a cada UAV en el sistema multimedia DRE se le asignan 250 Kbps. Estos parámetros fueron elegidos para emular una red inalámbrica poco confiable con ancho de banda limitado entre los UAVs y la estación base. Desde la estación base, el video fue retransmitido al receptor final a través de un enlace por cable confiable de 10 Mbps de ancho de banda sin pérdida de paquetes. La configuración de hardware de todos los nodos fue elegida de la siguiente manera: procesador Intel Pentium III de 600 MHz, 256 MB de memoria física, 4 puertos Ethernet Intel EtherExpress Pro de 10/100 Mbps y disco duro de 13 GB. Se utilizó una versión en tiempo real de Linux - TimeSys Linux/NET 3.1.214 basada en RedHat Linux 9 como sistema operativo para todos los nodos. Los siguientes paquetes de software también fueron utilizados para nuestros experimentos: (1) Ffmpeg 0.4.9-pre1, que es una biblioteca de código abierto (http://www.ffmpeg.sourceforge.net/download.php) que comprime video en formatos MPEG-2, MPEG-4, Real Video, y muchos otros formatos de video. (2) Iftop 0.16, que es una biblioteca de código abierto (http://www.ex-parrot.com/∼pdw/iftop/) que utilizamos para monitorear la actividad de red y la utilización del ancho de banda. (3) ACE 5.4.3 + TAO 1.4.3, que es una implementación de código abierto (http://www.dre.vanderbilt.edu/TAO) de la especificación CORBA en tiempo real [12] sobre la cual se construye HyARM. TAO proporciona el Servicio de Transmisión de Audio/Video (A/V) CORBA que utilizamos para transmitir el video desde los UAVs a los receptores finales a través de la estación base. Configuración del experimento Nuestro experimento consistió en dos UAVs (emulados) que enviaron video simultáneamente a la estación base utilizando la configuración experimental descrita en la Sección 4.1. En la estación base, el video fue retransmitido a los receptores finales (sin ninguna modificación), donde fue almacenado en un archivo. Cada UAV alojaba dos aplicaciones, una aplicación habilitada para QoS (respuesta de emergencia) y una aplicación de mejor esfuerzo (vigilancia). Dentro de cada UAV, el poder computacional se comparte entre las aplicaciones, mientras que el ancho de banda de la red se comparte entre todas las aplicaciones. Para evaluar la calidad de servicio proporcionada por HyARM, monitoreamos la utilización de la CPU en los dos UAV y la utilización del ancho de banda de la red entre el UAV y la estación base. La utilización de recursos de la CPU no se monitoreó en la estación base y en el receptor final, ya que no realizaron operaciones computacionalmente intensivas. La utilización de recursos del enlace físico de 10 Mbps entre la estación base y el receptor final no afecta la calidad de servicio de las aplicaciones y no es monitoreada por HyARM, ya que es casi 10 veces el ancho de banda de 1 MB de la LAN entre los UAV y la estación base. El experimento también monitorea propiedades del video que afectan la calidad de servicio de las aplicaciones, como la latencia, la variabilidad de retardo, la tasa de cuadros y la resolución. El punto de ajuste en la utilización de recursos para cada recurso se especificó en 0.69, que es el límite superior típicamente recomendado por técnicas de programación, como el algoritmo monótono de tasa [9]. Dado que los estudios [6] han demostrado que los ojos humanos pueden percibir retrasos de más de 200 ms, utilizamos esto como límite superior de la variabilidad en el video recibido. Los requisitos de QoS para cada clase de aplicación se especifican durante la inicialización del sistema y se muestran en la Tabla 1. 4.3 Resultados empíricos y análisis Esta sección presenta los resultados obtenidos al ejecutar el experimento descrito en la Sección 4.2 en nuestro banco de pruebas del sistema multimedia DRE. Utilizamos la utilización de recursos del sistema como métrica para evaluar las capacidades de gestión de recursos adaptativos de HyARM bajo cargas de trabajo de entrada variables. También utilizamos la calidad de servicio de la aplicación como métrica para evaluar las capacidades de HyARMs para satisfacer los requisitos de calidad de servicio de extremo a extremo de las diferentes clases de aplicaciones en el sistema multimedia DRE. Analizamos estos resultados para explicar las diferencias significativas en el rendimiento del sistema y la calidad de servicio de la aplicación. La comparación del rendimiento del sistema se descompone en la comparación de la utilización de recursos y la calidad de servicio de la aplicación. Para la utilización de recursos del sistema, comparamos (1) la utilización del ancho de banda de la red de área local y (2) la utilización de la CPU en los dos nodos UAV. Para la aplicación de QoS, comparamos los valores medios de los parámetros de video, incluyendo (1) resolución de imagen, (2) velocidad de cuadros, (3) latencia y (4) jitter. Comparación de la utilización de recursos. La sobreutilización de recursos del sistema en sistemas DRE puede generar un sistema inestable. Por el contrario, la subutilización de los recursos del sistema aumenta el costo del sistema. La Figura 4 y la Figura 5 comparan la utilización de recursos del sistema con y sin HyARM. La Figura 4 muestra que HyARM mantiene la utilización del sistema cerca del punto de ajuste de utilización deseado durante la fluctuación en la carga de trabajo de entrada al transmitir video de mayor (o menor) calidad de servicio para la clase de aplicaciones con calidad de servicio habilitada (o de mejor esfuerzo) durante la sobre (o sub) utilización de los recursos del sistema. La Figura 5 muestra que sin HyARM, la utilización de la red alcanzó hasta 0.9 durante el aumento de las condiciones de carga de trabajo, lo cual es mayor que el punto de ajuste de utilización de 0.7 en 0.2. Como resultado de la sobreutilización de recursos, la calidad de servicio (QoS) del video recibido, como la latencia promedio y el jitter, se vio afectada significativamente. Sin HyARM, los recursos del sistema estaban subutilizados o sobreutilizados, ambos de los cuales son indeseables. En contraste, con HyARM, la utilización de recursos del sistema siempre está cerca del punto de ajuste deseado, incluso durante las fluctuaciones en la carga de trabajo de la aplicación. Durante fluctuaciones repentinas en la carga de trabajo de la aplicación, las condiciones del sistema pueden ser temporalmente indeseables, pero se restauran a la condición deseada dentro de varios períodos de muestreo. La sobreutilización temporal de recursos es permisible en nuestro sistema multimedia, ya que la calidad del video puede degradarse por un corto período de tiempo, aunque la calidad del servicio de la aplicación se verá significativamente degradada si se transmite un video de baja calidad durante un período de tiempo más largo. Comparación de la calidad de servicio de la aplicación. Las Figuras 6, 7 y la Tabla 2 comparan la latencia, la variabilidad, la resolución y la velocidad de cuadro del video recibido, respectivamente. La Tabla 2 muestra que HyARM aumenta la resolución y la velocidad de cuadro de video de las aplicaciones habilitadas para QoS, pero disminuye la resolución y la velocidad de cuadro de las aplicaciones de mejor esfuerzo. Durante la sobreutilización de los recursos del sistema, la resolución y la velocidad de cuadros de las aplicaciones de menor prioridad se reducen para adaptarse a las fluctuaciones en la carga de trabajo de la aplicación y mantener la utilización de los recursos en el punto establecido especificado. Se puede observar en la Figura 6 y la Figura 7 que HyARM reduce significativamente la latencia y la variabilidad del video recibido. Estas cifras muestran que la calidad de servicio de las aplicaciones habilitadas para QoS se mejora considerablemente con HyARM. Aunque los parámetros de la aplicación, como la velocidad de cuadros y las resoluciones, que afectan los requisitos de QoS suave de las aplicaciones de mejor esfuerzo pueden verse comprometidos, se cumplen los requisitos de QoS estrictos, como la latencia y la variabilidad, de todas las aplicaciones. HyARM responde a las fluctuaciones en la disponibilidad de recursos y/o la demanda mediante el monitoreo constante de la utilización de recursos. Como se muestra en la Figura 4, cuando la utilización de recursos aumenta por encima del punto de ajuste deseado, HyARM reduce la utilización disminuyendo la calidad de servicio de las aplicaciones de mejor esfuerzo. Esta adaptación garantiza que haya suficientes recursos disponibles para que las aplicaciones habilitadas para QoS cumplan con sus necesidades de QoS. Las figuras 6 y 7 muestran que los valores de latencia y jitter del video recibido del sistema con HyARM son casi la mitad de los valores correspondientes del sistema sin HyARM. Con HyARM, los valores de estos parámetros están muy por debajo de los límites especificados, mientras que sin HyARM, estos valores están significativamente por encima de los límites especificados debido a la sobreutilización del ancho de banda de la red, lo que conduce a la congestión de la red y resulta en la pérdida de paquetes. HyARM evita esto reduciendo parámetros de video como la resolución, la velocidad de cuadros y/o modificando el esquema de compresión utilizado para comprimir el video. Nuestras conclusiones al analizar los resultados descritos anteriormente son que la aplicación de middleware adaptativo a través de control híbrido en sistemas DRE ayuda a (1) mejorar la calidad de servicio de la aplicación, (2) aumentar la utilización de recursos del sistema y (3) proporcionar una mejor previsibilidad (menor latencia y retraso entre fotogramas) a las aplicaciones habilitadas para calidad de servicio. Estas mejoras se logran en gran medida gracias al monitoreo de la utilización de recursos del sistema, la gestión eficiente de la carga de trabajo del sistema y la provisión adaptativa de recursos mediante los monitores de recursos de red/CPU de HyARMs, el adaptador de aplicaciones y el controlador central, respectivamente. TRABAJO RELACIONADO Recientemente se han aplicado varios enfoques teóricos de control a los sistemas DRE. Estas técnicas ayudan a superar las limitaciones de los enfoques de programación tradicionales que manejan mal los cambios dinámicos en la disponibilidad de recursos y resultan en un sistema programado rígidamente que se adapta mal a los cambios. Se presenta una encuesta de estas técnicas en [1]. Un enfoque de este tipo es la programación de control de retroalimentación (FCS) [2, 11]. Los algoritmos de FCS ajustan dinámicamente la asignación de recursos mediante bucles de control de retroalimentación de software. Los algoritmos de FCS se modelan y diseñan utilizando metodologías rigurosas de teoría de control. Estos algoritmos ofrecen garantías de rendimiento robusto y analítico a pesar de las incertidumbres en la disponibilidad de recursos y/o demanda. Aunque los algoritmos de FCS existentes han mostrado promesa, a menudo estos algoritmos asumen que el sistema tiene variable(s) de control continuas que pueden ajustarse continuamente. Si bien esta suposición es válida para ciertas clases de sistemas, existen muchas clases de sistemas DRE, como la aviónica y los entornos informáticos de barcos completos, que solo admiten un conjunto finito a priori de configuraciones discretas. Por lo tanto, las variables de control en tales sistemas son intrínsecamente discretas. HyARM maneja tanto variables de control continuas, como la resolución de la imagen, como variables de control discretas, como un conjunto discreto de velocidades de cuadro. HyARM puede aplicarse a sistemas que admiten un conjunto continuo y/o discreto de variables de control. El sistema multimedia DRE descrito en la Sección 2 es un ejemplo de sistema DRE que ofrece tanto variables de control continuas (resolución de imagen) como un conjunto discreto (velocidad de cuadros). Estas variables son modificadas por HyARM para lograr una utilización eficiente de recursos y una mejora en la calidad de servicio de la aplicación. CONCLUSIONES Artículo 7 Figura 6: Comparación de la latencia del video Figura 7: Comparación de la fluctuación del video Fuente Tamaño de imagen / Velocidad de cuadro Con HyARM Sin HyARM UAV1 Aplicación habilitada para QoS 1122 X 1496 / 25 960 X 720 / 20 UAV1 Aplicación de mejor esfuerzo 288 X 384 / 15 640 X 480 / 20 UAV2 Aplicación habilitada para QoS 1126 X 1496 / 25 960 X 720 / 20 UAV2 Aplicación de mejor esfuerzo 288 X 384 / 15 640 X 480 / 20 Tabla 2: Comparación de la calidad del video Muchos sistemas distribuidos en tiempo real y embebidos (DRE) demandan la aplicación correcta de la calidad de servicio (QoS) de extremo a extremo desde sus plataformas subyacentes para operar correctamente. Estos sistemas cada vez se ejecutan en entornos abiertos, donde la disponibilidad de recursos está sujeta a cambios dinámicos. Para cumplir con la calidad de servicio de extremo a extremo en entornos dinámicos, los sistemas DRE pueden beneficiarse de un middleware adaptativo que monitorea los recursos del sistema, realiza una gestión eficiente de la carga de trabajo de la aplicación y permite una provisión eficiente de recursos para la ejecución de aplicaciones. Este artículo describe HyARM, un middleware adaptativo que proporciona una gestión efectiva de recursos a los sistemas DRE. HyARM emplea técnicas de control híbrido para proporcionar las capacidades de middleware adaptativo, como el monitoreo de recursos y la adaptación de aplicaciones, que son clave para ofrecer las capacidades de gestión de recursos dinámicos para sistemas DRE abiertos. Empleamos HyARM en un sistema multimedia DRE representativo que está implementado utilizando CORBA en tiempo real y el Servicio de Transmisión de Audio/Vídeo de CORBA. Evaluamos el rendimiento de HyARM en un sistema compuesto por tres recursos distribuidos y dos clases de aplicaciones con dos aplicaciones cada una. Nuestros resultados empíricos indican que HyARM garantiza (1) la utilización eficiente de recursos al mantener la utilización de recursos del sistema dentro de los límites de utilización especificados, (2) los requisitos de calidad de servicio de las aplicaciones habilitadas para QoS se cumplen en todo momento. En general, HyARM garantiza una gestión eficiente, predecible y adaptable de recursos para sistemas DRE. REFERENCIAS [1] T. F. Abdelzaher, J. Stankovic, C. Lu, R. Zhang y Y. Lu. Control de rendimiento de retroalimentación en servicios de software. IEEE: Sistemas de Control, 23(3), junio de 2003. [2] L. Abeni, L. Palopoli, G. Lipari y J. Walpole. Análisis de un planificador de retroalimentación basado en reservas. En el Simposio de Sistemas en Tiempo Real de IEEE, Diciembre de 2002. [3] S. Blake, D. Black, M. Carlson, E. Davies, Z. Wang y W. Weiss. Una arquitectura para servicios diferenciados. Centro de Información de la Red RFC 2475, Dic. 1998. [4] H. Franke, S. Nagar, C. Seetharaman y V. Kashyap. Habilitando la Gestión Autonómica de la Carga de Trabajo en Linux. En Actas de la Conferencia Internacional sobre Computación Autónoma (ICAC), Nueva York, Nueva York, mayo de 2004. IEEE. [5] E. Gamma, R. Helm, R. Johnson, y J. Vlissides. Patrones de diseño: Elementos de software orientado a objetos reutilizable. Addison-Wesley, Reading, MA, 1995. [6] G. Ghinea y J. P. Thomas. Impacto de QoS en la percepción y comprensión del usuario de videoclips multimedia. En MULTIMEDIA 98: Actas de la sexta conferencia internacional de ACM sobre Multimedia, páginas 49-54, Bristol, Reino Unido, 1998. ACM Press. [7] Grupo de Trabajo de Ingeniería de Internet. Grupo de Trabajo de Servicios Diferenciados (diffserv) Carta. www.ietf.org/html.charters/diffserv-charter.html, 2000. [8] X. Koutsoukos, R. Tekumalla, B. Natarajan y C. Lu. Control híbrido supervisado de sistemas en tiempo real. En el 11º Simposio de Tecnología y Aplicaciones en Tiempo Real y Sistemas Empotrados de IEEE, San Francisco, California, Mar. 2005. [9] J. Lehoczky, L. Sha y Y. Ding. El algoritmo de programación Rate Monotonic: Caracterización exacta y comportamiento en casos promedio. En Actas del 10º Simposio de Sistemas en Tiempo Real de IEEE (RTSS 1989), páginas 166-171. IEEE Computer Society Press, 1989. [10] J. Loyall, J. Gossett, C. Gill, R. Schantz, J. Zinky, P. Pal, R. Shapiro, C. Rodrigues, M. Atighetchi, and D. Karr.\n\nIEEE Computer Society Press, 1989. [10] J. Loyall, J. Gossett, C. Gill, R. Schantz, J. Zinky, P. Pal, R. Shapiro, C. Rodrigues, M. Atighetchi y D. Karr. Comparando y contrastando el soporte de middleware adaptativo en aplicaciones de objetos distribuidos de área amplia y embebidos. En Actas de la 21ª Conferencia Internacional sobre Sistemas de Computación Distribuida (ICDCS-21), páginas 625-634. IEEE, Abr. 2001. [11] C. Lu, J. A. Stankovic, G. Tao y S. H. Son. Programación en tiempo real con control de retroalimentación: Marco, modelado y algoritmos. Revista de Sistemas en Tiempo Real, 23(1/2):85-126, julio de 2002. [12] Object Management Group. Especificación CORBA en tiempo real, documento formal/02-08-02 de OMG, edición de agosto de 2002. [13] D. C. Schmidt, D. L. Levine y S. Mungee. El diseño y rendimiento de los corredores de solicitudes de objetos en tiempo real. Comunicaciones de Computadoras, 21(4):294-324, Abr. 1998. [14] Thomas Sikora. Tendencias y perspectivas en codificación de imágenes y videos. En Actas del IEEE, enero de 2005. [15] X. Wang, H.-M. Huang, V. Subramonian, C. Lu y C. Gill. CAMRIT: Middleware Adaptativo Basado en Control para la Transmisión de Imágenes en Tiempo Real. En Actas del 10º Simposio de Tecnología y Aplicaciones en Tiempo Real y Sistemas Empotrados del IEEE (RTAS), Toronto, Canadá, mayo de 2004. Artículo 7 ",
            "candidates": [],
            "error": [
                [
                    ""
                ]
            ]
        },
        "video encoding/decoding": {
            "translated_key": "codificación/decodificación de vídeo",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Evaluating Adaptive Resource Management for Distributed Real-Time Embedded Systems Nishanth Shankaran, ∗ Xenofon Koutsoukos, Douglas C. Schmidt, and Aniruddha Gokhale Dept.",
                "of EECS, Vanderbilt University, Nashville ABSTRACT A challenging problem faced by researchers and developers of distributed real-time and embedded (DRE) systems is devising and implementing effective adaptive resource management strategies that can meet end-to-end quality of service (QoS) requirements in varying operational conditions.",
                "This paper presents two contributions to research in adaptive resource management for DRE systems.",
                "First, we describe the structure and functionality of the Hybrid Adaptive Resourcemanagement Middleware (HyARM), which provides adaptive resource management using hybrid control techniques for adapting to workload fluctuations and resource availability.",
                "Second, we evaluate the adaptive behavior of HyARM via experiments on a DRE multimedia system that distributes video in real-time.",
                "Our results indicate that HyARM yields predictable, stable, and high system performance, even in the face of fluctuating workload and resource availability.",
                "Categories and Subject Descriptors C.2.4 [Distributed Systems]: Distributed Applications; D.4.7 [Organization and Design]: Real-time Systems and Embedded Systems 1.",
                "INTRODUCTION Achieving end-to-end real-time quality of service (QoS) is particularly important for open distributed real-time and embedded (DRE) systems that face resource constraints, such as limited computing power and network bandwidth.",
                "Overutilization of these system resources can yield unpredictable and unstable behavior, whereas under-utilization can yield excessive system cost.",
                "A promising approach to meeting these end-to-end QoS requirements effectively, therefore, is to develop and apply adaptive middleware [10, 15], which is software whose functional and QoS-related properties can be modified either statically or dynamically.",
                "Static modifications are carried out to reduce footprint, leverage capabilities that exist in specific platforms, enable functional subsetting, and/or minimize hardware/software infrastructure dependencies.",
                "Objectives of dynamic modifications include optimizing system responses to changing environments or requirements, such as changing component interconnections, power-levels, CPU and network bandwidth availability, latency/jitter, and workload.",
                "In open DRE systems, adaptive middleware must make such modifications dependably, i.e., while meeting stringent end-to-end QoS requirements, which requires the specification and enforcement of upper and lower bounds on system resource utilization to ensure effective use of system resources.",
                "To meet these requirements, we have developed the Hybrid Adaptive Resource-management Middleware (HyARM), which is an open-source1 distributed resource management middleware.",
                "HyARM is based on hybrid control theoretic techniques [8], which provide a theoretical framework for designing control of complex system with both continuous and discrete dynamics.",
                "In our case study, which involves a distributed real-time video distribution system, the task of adaptive resource management is to control the utilization of the different resources, whose utilizations are described by continuous variables.",
                "We achieve this by adapting the resolution of the transmitted video, which is modeled as a continuous variable, and by changing the frame-rate and the compression, which are modeled by discrete actions.",
                "We have implemented HyARM atop The ACE ORB (TAO) [13], which is an implementation of the Real-time CORBA specification [12].",
                "Our results show that (1) HyARM ensures effective system resource utilization and (2) end-to-end QoS requirements of higher priority applications are met, even in the face of fluctuations in workload.",
                "The remainder of the paper is organized as follows: Section 2 describes the architecture, functionality, and resource utilization model of our DRE multimedia system case study; Section 3 explains the structure and functionality of HyARM; Section 4 evaluates the adaptive behavior of HyARM via experiments on our multimedia system case study; Section 5 compares our research on HyARM with related work; and Section 6 presents concluding remarks. 1 The code and examples for HyARM are available at www. dre.vanderbilt.edu/∼nshankar/HyARM/.",
                "Article 7 2.",
                "CASE STUDY: DRE MULTIMEDIA SYSTEM This section describes the architecture and QoS requirements of our DRE multimedia system. 2.1 Multimedia System Architecture Wireless Link Wireless Link Wireless Link ` ` ` Physical Link Physical Link Physical Link Base Station End Receiver End Receiver End Receiver` Physical Link End Receiver UAV Camera Video Encoder Camera Video Encoder Camera Video Encoder UAV Camera Video Encoder Camera Video Encoder Camera Video Encoder UAV Camera Video Encoder Camera Video Encoder Camera Video Encoder Figure 1: DRE Multimedia System Architecture The architecture for our DRE multimedia system is shown in Figure 1 and consists of the following entities: (1)Data source (video capture by UAV), where video is captured (related to subject of interest) by camera(s) on each UAV, followed by encoding of raw video using a specific encoding scheme and transmitting the video to the next stage in the pipeline. (2)Data distributor (base station), where the video is processed to remove noise, followed by retransmission of the processed video to the next stage in the pipeline. (3) Sinks (command and control center), where the received video is again processed to remove noise, then decoded and finally rendered to end user via graphical displays.",
                "Significant improvements in <br>video encoding/decoding</br> and (de)compression techniques have been made as a result of recent advances in video encoding and compression techniques [14].",
                "Common video compression schemes are MPEG1, MPEG-2, Real Video, and MPEG-4.",
                "Each compression scheme is characterized by its resource requirement, e.g., the computational power to (de)compress the video signal and the network bandwidth required to transmit the compressed video signal.",
                "Properties of the compressed video, such as resolution and frame-rate determine both the quality and the resource requirements of the video.",
                "Our multimedia system case study has the following endto-end real-time QoS requirements: (1) latency, (2) interframe delay (also know as jitter), (3) frame rate, and (4) picture resolution.",
                "These QoS requirements can be classified as being either hard or soft.",
                "Hard QoS requirements should be met by the underlying system at all times, whereas soft QoS requirements can be missed occasionally.2 For our case study, we treat QoS requirements such as latency and jitter as harder QoS requirements and strive to meet these requirements at all times.",
                "In contrast, we treat QoS requirements such as video frame rate and picture resolution as softer QoS requirements and modify these video properties adaptively to handle dynamic changes in resource availabil2 Although hard and soft are often portrayed as two discrete requirement sets, in practice they are usually two ends of a continuum ranging from softer to harder rather than two disjoint points. ity effectively. 2.2 DRE Multimedia System Rresources There are two primary types of resources in our DRE multimedia system: (1) processors that provide computational power available at the UAVs, base stations, and end receivers and (2) network links that provide communication bandwidth between UAVs, base stations, and end receivers.",
                "The computing power required by the video capture and encoding tasks depends on dynamic factors, such as speed of the UAV, speed of the subject (if the subject is mobile), and distance between UAV and the subject.",
                "The wireless network bandwidth available to transmit video captured by UAVs to base stations also depends on the wireless connectivity between the UAVs and the base station, which in-turn depend on dynamic factors such as the speed of the UAVs and the relative distance between UAVs and base stations.",
                "The bandwidth of the link between the base station and the end receiver is limited, but more stable than the bandwidth of the wireless network.",
                "Resource requirements and availability of resources are subjected to dynamic changes.",
                "Two classes of applications - QoS-enabled and best-effort - use the multimedia system infrastructure described above to transmit video to their respective receivers.",
                "QoS-enabled class of applications have higher priority over best-effort class of application.",
                "In our study, emergency response applications belong to QoS-enabled and surveillance applications belong to best-effort class.",
                "For example, since a stream from an emergency response application is of higher importance than a video stream from a surveillance application, it receives more resources end-to-end.",
                "Since resource availability significantly affects QoS, we use current resource utilization as the primary indicator of system performance.",
                "We refer to the current level of system resource utilization as the system condition.",
                "Based on this definition, we can classify system conditions as being either under, over, or effectively utilized.",
                "Under-utilization of system resources occurs when the current resource utilization is lower than the desired lower bound on resource utilization.",
                "In this system condition, residual system resources (i.e., network bandwidth and computational power) are available in large amounts after meeting end-to-end QoS requirements of applications.",
                "These residual resources can be used to increase the QoS of the applications.",
                "For example, residual CPU and network bandwidth can be used to deliver better quality video (e.g., with greater resolution and higher frame rate) to end receivers.",
                "Over-utilization of system resources occurs when the current resource utilization is higher than the desired upper bound on resource utilization.",
                "This condition can arise from loss of resources - network bandwidth and/or computing power at base station, end receiver or at UAV - or may be due to an increase in resource demands by applications.",
                "Over-utilization is generally undesirable since the quality of the received video (such as resolution and frame rate) and timeliness properties (such as latency and jitter) are degraded and may result in an unstable (and thus ineffective) system.",
                "Effective resource utilization is the desired system condition since it ensures that end-to-end QoS requirements of the UAV-based multimedia system are met and utilization of both system resources, i.e., network bandwidth and computational power, are within their desired utilization bounds.",
                "Article 7 Section 3 describes techniques we applied to achieve effective utilization, even in the face of fluctuating resource availability and/or demand. 3.",
                "OVERVIEW OF HYARM This section describes the architecture of the Hybrid Adaptive Resource-management Middleware (HyARM).",
                "HyARM ensures efficient and predictable system performance by providing adaptive resource management, including monitoring of system resources and enforcing bounds on application resource utilization. 3.1 HyARM Structure and Functionality Resource Utilization Legend Resource Allocation Application Parameters Figure 2: HyARM Architecture HyARM is composed of three types of entities shown in Figure 2 and described below: Resource monitors observe the overall resource utilization for each type of resource and resource utilization per application.",
                "In our multimedia system, there are resource monitors for CPU utilization and network bandwidth.",
                "CPU monitors observe the CPU resource utilization of UAVs, base station, and end receivers.",
                "Network bandwidth monitors observe the network resource utilization of (1) wireless network link between UAVs and the base station and (2) wired network link between the base station and end receivers.",
                "The central controller maintains the system resource utilization below a desired bound by (1) processing periodic updates it receives from resource monitors and (2) modifying the execution of applications accordingly, e.g., by using different execution algorithms or operating the application with increased/decreased QoS.",
                "This adaptation process ensures that system resources are utilized efficiently and end-to-end application QoS requirements are met.",
                "In our multimedia system, the HyARM controller determines the value of application parameters such as (1) video compression schemes, such as Real Video and MPEG-4, and/or (2) frame rate, and (3) picture resolution.",
                "From the perspective of hybrid control theoretic techniques [8], the different video compression schemes and frame rate form the discrete variables of application execution and picture resolution forms the continuous variables.",
                "Application adapters modify application execution according to parameters recommended by the controller and ensures that the operation of the application is in accordance with the recommended parameters.",
                "In the current mplementation of HyARM, the application adapter modifies the input parameters to the application that affect application QoS and resource utilization - compression scheme, frame rate, and picture resolution.",
                "In our future implementations, we plan to use resource reservation mechanisms such as Differentiated Service [7, 3] and Class-based Kernel Resource Management [4] to provision/reserve network and CPU resources.",
                "In our multimedia system, the application adapter ensures that the video is encoded at the recommended frame rate and resolution using the specified compression scheme. 3.2 Applying HyARM to the Multimedia System Case Study HyARM is built atop TAO [13], a widely used open-source implementation of Real-time CORBA [12].",
                "HyARM can be applied to ensure efficient, predictable and adaptive resource management of any DRE system where resource availability and requirements are subject to dynamic change.",
                "Figure 3 shows the interaction of various parts of the DRE multimedia system developed with HyARM, TAO, and TAOs A/V Streaming Service.",
                "TAOs A/V Streaming service is an implementation of the CORBA A/V Streaming Service specification.",
                "TAOs A/V Streaming Service is a QoS-enabled video distribution service that can transfer video in real-time to one or more receivers.",
                "We use the A/V Streaming Service to transmit the video from the UAVs to the end receivers via the base station.",
                "Three entities of Receiver UAV TAO Resource Utilization HyARM Central Controller A/V Streaming Service : Sender MPEG1 MPEG4 Real Video HyARM Resource Monitor A/V Streaming Service : Receiver Compressed Video Compressed Video Application HyARM Application Adapter Remote Object Call Control Inputs Resource Utilization Resource Utilization / Control Inputs Control Inputs Legend Figure 3: Developing the DRE Multimedia System with HyARM HyARM, namely the resource monitors, central controller, and application adapters are built as CORBA servants, so they can be distributed throughout a DRE system.",
                "Resource monitors are remote CORBA objects that update the central controller periodically with the current resource utilization.",
                "Application adapters are collocated with applications since the two interact closely.",
                "As shown in Figure 3, UAVs compress the data using various compression schemes, such as MPEG1, MPEG4, and Real Video, and uses TAOs A/V streaming service to transmit the video to end receivers.",
                "HyARMs resource monitors continuously observe the system resource utilization and notify the central controller with the current utilization. 3 The interaction between the controller and the resource monitors uses the Observer pattern [5].",
                "When the controller receives resource utilization updates from monitors, it computes the necessary modifications to application(s) parameters and notifies application adapter(s) via a remote operation call.",
                "Application adapter(s), that are collocated with the application, modify the input parameters to the application - in our case video encoder - to modify the application resource utilization and QoS. 3 The base station is not included in the figure since it only retransmits the video received from UAVs to end receivers.",
                "Article 7 4.",
                "PERFORMANCE RESULTS AND ANALYSIS This section first describes the testbed that provides the infrastructure for our DRE multimedia system, which was used to evaluate the performance of HyARM.",
                "We then describe our experiments and analyze the results obtained to empirically evaluate how HyARM behaves during underand over-utilization of system resources. 4.1 Overview of the Hardware and Software Testbed Our experiments were performed on the Emulab testbed at University of Utah.",
                "The hardware configuration consists of two nodes acting as UAVs, one acting as base station, and one as end receiver.",
                "Video from the two UAVs were transmitted to a base station via a LAN configured with the following properties: average packet loss ratio of 0.3 and bandwidth 1 Mbps.",
                "The network bandwidth was chosen to be 1 Mbps since each UAV in the DRE multimedia system is allocated 250 Kbps.",
                "These parameters were chosen to emulate an unreliable wireless network with limited bandwidth between the UAVs and the base station.",
                "From the base station, the video was retransmitted to the end receiver via a reliable wireline link of 10 Mbps bandwidth with no packet loss.",
                "The hardware configuration of all the nodes was chosen as follows: 600 MHz Intel Pentium III processor, 256 MB physical memory, 4 Intel EtherExpress Pro 10/100 Mbps Ethernet ports, and 13 GB hard drive.",
                "A real-time version of Linux - TimeSys Linux/NET 3.1.214 based on RedHat Linux 9was used as the operating system for all nodes.",
                "The following software packages were also used for our experiments: (1) Ffmpeg 0.4.9-pre1, which is an open-source library (http: //www.ffmpeg.sourceforge.net/download.php) that compresses video into MPEG-2, MPEG-4, Real Video, and many other video formats. (2) Iftop 0.16, which is an opensource library (http://www.ex-parrot.com/∼pdw/iftop/) we used for monitoring network activity and bandwidth utilization. (3) ACE 5.4.3 + TAO 1.4.3, which is an opensource (http://www.dre.vanderbilt.edu/TAO) implementation of the Real-time CORBA [12] specification upon which HyARM is built.",
                "TAO provides the CORBA Audio/Video (A/V) Streaming Service that we use to transmit the video from the UAVs to end receivers via the base station. 4.2 Experiment Configuration Our experiment consisted of two (emulated) UAVs that simultaneously send video to the base station using the experimentation setup described in Section 4.1.",
                "At the base station, video was retransmitted to the end receivers (without any modifications), where it was stored to a file.",
                "Each UAV hosted two applications, one QoS-enabled application (emergency response), and one best-effort application (surveillance).",
                "Within each UAV, computational power is shared between the applications, while the network bandwidth is shared among all applications.",
                "To evaluate the QoS provided by HyARM, we monitored CPU utilization at the two UAVs, and network bandwidth utilization between the UAV and the base station.",
                "CPU resource utilization was not monitored at the base station and the end receiver since they performed no computationallyintensive operations.",
                "The resource utilization of the 10 Mpbs physical link between the base station and the end receiver does not affect QoS of applications and is not monitored by HyARM since it is nearly 10 times the 1 MB bandwidth of the LAN between the UAVs and the base station.",
                "The experiment also monitors properties of the video that affect the QoS of the applications, such as latency, jitter, frame rate, and resolution.",
                "The set point on resource utilization for each resource was specified at 0.69, which is the upper bound typically recommended by scheduling techniques, such as rate monotonic algorithm [9].",
                "Since studies [6] have shown that human eyes can perceive delays more than 200ms, we use this as the upper bound on jitter of the received video.",
                "QoS requirements for each class of application is specified during system initialization and is shown in Table 1. 4.3 Empirical Results and Analysis This section presents the results obtained from running the experiment described in Section 4.2 on our DRE multimedia system testbed.",
                "We used system resource utilization as a metric to evaluate the adaptive resource management capabilities of HyARM under varying input work loads.",
                "We also used application QoS as a metric to evaluate HyARMs capabilities to support end-to-end QoS requirements of the various classes of applications in the DRE multimedia system.",
                "We analyze these results to explain the significant differences in system performance and application QoS.",
                "Comparison of system performance is decomposed into comparison of resource utilization and application QoS.",
                "For system resource utilization, we compare (1) network bandwidth utilization of the local area network and (2) CPU utilization at the two UAV nodes.",
                "For application QoS, we compare mean values of video parameters, including (1) picture resolution, (2) frame rate, (3) latency, and (4) jitter.",
                "Comparison of resource utilization.",
                "Over-utilization of system resources in DRE systems can yield an unstable system.",
                "In contrast, under-utilization of system resources increases system cost.",
                "Figure 4 and Figure 5 compare the system resource utilization with and without HyARM.",
                "Figure 4 shows that HyARM maintains system utilization close to the desired utilization set point during fluctuation in input work load by transmitting video of higher (or lower) QoS for QoS-enabled (or best-effort) class of applications during over (or under) utilization of system resources.",
                "Figure 5 shows that without HyARM, network utilization was as high as 0.9 during increase in workload conditions, which is greater than the utilization set point of 0.7 by 0.2.",
                "As a result of over-utilization of resources, QoS of the received video, such as average latency and jitter, was affected significantly.",
                "Without HyARM, system resources were either under-utilized or over-utilized, both of which are undesirable.",
                "In contrast, with HyARM, system resource utilization is always close to the desired set point, even during fluctuations in application workload.",
                "During sudden fluctuation in application workload, system conditions may be temporarily undesirable, but are restored to the desired condition within several sampling periods.",
                "Temporary over-utilization of resources is permissible in our multimedia system since the quality of the video may be degraded for a short period of time, though application QoS will be degraded significantly if poor quality video is transmitted for a longer period of time.",
                "Comparison of application QoS.",
                "Figures 6, Figure 7, and Table 2 compare latency, jitter, resolution, and frameArticle 7 Class Resolution Frame Rate Latency (msec ) Jitter (msec) QoS Enabled 1024 x 768 25 200 200 Best-effort 320 x 240 15 300 250 Table 1: Application QoS Requirements Figure 4: Resource utilization with HyARM Figure 5: Resource utilization without HyARM rate of the received video, respectively.",
                "Table 2 shows that HyARM increases the resolution and frame video of QoSenabled applications, but decreases the resolution and frame rate of best effort applications.",
                "During over utilization of system resources, resolution and frame rate of lower priority applications are reduced to adapt to fluctuations in application workload and to maintain the utilization of resources at the specified set point.",
                "It can be seen from Figure 6 and Figure 7 that HyARM reduces the latency and jitter of the received video significantly.",
                "These figures show that the QoS of QoS-enabled applications is greatly improved by HyARM.",
                "Although application parameters, such as frame rate and resolutions, which affect the soft QoS requirements of best-effort applications may be compromised, the hard QoS requirements, such as latency and jitter, of all applications are met.",
                "HyARM responds to fluctuation in resource availability and/or demand by constant monitoring of resource utilization.",
                "As shown in Figure 4, when resources utilization increases above the desired set point, HyARM lowers the utilization by reducing the QoS of best-effort applications.",
                "This adaptation ensures that enough resources are available for QoS-enabled applications to meet their QoS needs.",
                "Figures 6 and 7 show that the values of latency and jitter of the received video of the system with HyARM are nearly half of the corresponding value of the system without HyARM.",
                "With HyARM, values of these parameters are well below the specified bounds, whereas without HyARM, these value are significantly above the specified bounds due to overutilization of the network bandwidth, which leads to network congestion and results in packet loss.",
                "HyARM avoids this by reducing video parameters such as resolution, frame-rate, and/or modifying the compression scheme used to compress the video.",
                "Our conclusions from analyzing the results described above are that applying adaptive middleware via hybrid control to DRE system helps to (1) improve application QoS, (2) increase system resource utilization, and (3) provide better predictability (lower latency and inter-frame delay) to QoSenabled applications.",
                "These improvements are achieved largely due to monitoring of system resource utilization, efficient system workload management, and adaptive resource provisioning by means of HyARMs network/CPU resource monitors, application adapter, and central controller, respectively. 5.",
                "RELATED WORK A number of control theoretic approaches have been applied to DRE systems recently.",
                "These techniques aid in overcoming limitations with traditional scheduling approaches that handle dynamic changes in resource availability poorly and result in a rigidly scheduled system that adapts poorly to change.",
                "A survey of these techniques is presented in [1].",
                "One such approach is feedback control scheduling (FCS) [2, 11].",
                "FCS algorithms dynamically adjust resource allocation by means of software feedback control loops.",
                "FCS algorithms are modeled and designed using rigorous controltheoretic methodologies.",
                "These algorithms provide robust and analytical performance assurances despite uncertainties in resource availability and/or demand.",
                "Although existing FCS algorithms have shown promise, these algorithms often assume that the system has continuous control variable(s) that can continuously be adjusted.",
                "While this assumption holds for certain classes of systems, there are many classes of DRE systems, such as avionics and total-ship computing environments that only support a finite a priori set of discrete configurations.",
                "The control variables in such systems are therefore intrinsically discrete.",
                "HyARM handles both continuous control variables, such as picture resolution, and discrete control variable, such as discrete set of frame rates.",
                "HyARM can therefore be applied to system that support continuous and/or discrete set of control variables.",
                "The DRE multimedia system as described in Section 2 is an example DRE system that offers both continuous (picture resolution) and discrete set (frame-rate) of control variables.",
                "These variables are modified by HyARM to achieve efficient resource utilization and improved application QoS. 6.",
                "CONCLUDING REMARKS Article 7 Figure 6: Comparison of Video Latency Figure 7: Comparison of Video Jitter Source Picture Size / Frame Rate With HyARM Without HyARM UAV1 QoS Enabled Application 1122 X 1496 / 25 960 X 720 / 20 UAV1 Best-effort Application 288 X 384 / 15 640 X 480 / 20 UAV2 QoS Enabled Application 1126 X 1496 / 25 960 X 720 / 20 UAV2 Best-effort Application 288 X 384 / 15 640 X 480 / 20 Table 2: Comparison of Video Quality Many distributed real-time and embedded (DRE) systems demand end-to-end quality of service (QoS) enforcement from their underlying platforms to operate correctly.",
                "These systems increasingly run in open environments, where resource availability is subject to dynamic change.",
                "To meet end-to-end QoS in dynamic environments, DRE systems can benefit from an adaptive middleware that monitors system resources, performs efficient application workload management, and enables efficient resource provisioning for executing applications.",
                "This paper described HyARM, an adaptive middleware, that provides effective resource management to DRE systems.",
                "HyARM employs hybrid control techniques to provide the adaptive middleware capabilities, such as resource monitoring and application adaptation that are key to providing the dynamic resource management capabilities for open DRE systems.",
                "We employed HyARM to a representative DRE multimedia system that is implemented using Real-time CORBA and CORBA A/V Streaming Service.",
                "We evaluated the performance of HyARM in a system composed of three distributed resources and two classes of applications with two applications each.",
                "Our empirical results indicate that HyARM ensures (1) efficient resource utilization by maintaining the resource utilization of system resources within the specified utilization bounds, (2) QoS requirements of QoS-enabled applications are met at all times.",
                "Overall, HyARM ensures efficient, predictable, and adaptive resource management for DRE systems. 7.",
                "REFERENCES [1] T. F. Abdelzaher, J. Stankovic, C. Lu, R. Zhang, and Y. Lu.",
                "Feddback Performance Control in Software Services.",
                "IEEE: Control Systems, 23(3), June 2003. [2] L. Abeni, L. Palopoli, G. Lipari, and J. Walpole.",
                "Analysis of a reservation-based feedback scheduler.",
                "In IEEE Real-Time Systems Symposium, Dec. 2002. [3] S. Blake, D. Black, M. Carlson, E. Davies, Z. Wang, and W. Weiss.",
                "An architecture for differentiated services.",
                "Network Information Center RFC 2475, Dec. 1998. [4] H. Franke, S. Nagar, C. Seetharaman, and V. Kashyap.",
                "Enabling Autonomic Workload Management in Linux.",
                "In Proceedings of the International Conference on Autonomic Computing (ICAC), New York, New York, May 2004.",
                "IEEE. [5] E. Gamma, R. Helm, R. Johnson, and J. Vlissides.",
                "Design Patterns: Elements of Reusable Object-Oriented Software.",
                "Addison-Wesley, Reading, MA, 1995. [6] G. Ghinea and J. P. Thomas.",
                "Qos impact on user perception and understanding of multimedia video clips.",
                "In MULTIMEDIA 98: Proceedings of the sixth ACM international conference on Multimedia, pages 49-54, Bristol, United Kingdom, 1998.",
                "ACM Press. [7] Internet Engineering Task Force.",
                "Differentiated Services Working Group (diffserv) Charter. www.ietf.org/html.charters/diffserv-charter.html, 2000. [8] X. Koutsoukos, R. Tekumalla, B. Natarajan, and C. Lu.",
                "Hybrid Supervisory Control of Real-Time Systems.",
                "In 11th IEEE Real-Time and Embedded Technology and Applications Symposium, San Francisco, California, Mar. 2005. [9] J. Lehoczky, L. Sha, and Y. Ding.",
                "The Rate Monotonic Scheduling Algorithm: Exact Characterization and Average Case Behavior.",
                "In Proceedings of the 10th IEEE Real-Time Systems Symposium (RTSS 1989), pages 166-171.",
                "IEEE Computer Society Press, 1989. [10] J. Loyall, J. Gossett, C. Gill, R. Schantz, J. Zinky, P. Pal, R. Shapiro, C. Rodrigues, M. Atighetchi, and D. Karr.",
                "Comparing and Contrasting Adaptive Middleware Support in Wide-Area and Embedded Distributed Object Applications.",
                "In Proceedings of the 21st International Conference on Distributed Computing Systems (ICDCS-21), pages 625-634.",
                "IEEE, Apr. 2001. [11] C. Lu, J.",
                "A. Stankovic, G. Tao, and S. H. Son.",
                "Feedback Control Real-Time Scheduling: Framework, Modeling, and Algorithms.",
                "Real-Time Systems Journal, 23(1/2):85-126, July 2002. [12] Object Management Group.",
                "Real-time CORBA Specification, OMG Document formal/02-08-02 edition, Aug. 2002. [13] D. C. Schmidt, D. L. Levine, and S. Mungee.",
                "The Design and Performance of Real-Time Object Request Brokers.",
                "Computer Communications, 21(4):294-324, Apr. 1998. [14] Thomas Sikora.",
                "Trends and Perspectives in Image and Video Coding.",
                "In Proceedings of the IEEE, Jan. 2005. [15] X. Wang, H.-M. Huang, V. Subramonian, C. Lu, and C. Gill.",
                "CAMRIT: Control-based Adaptive Middleware for Real-time Image Transmission.",
                "In Proc. of the 10th IEEE Real-Time and Embedded Tech. and Applications Symp. (RTAS), Toronto, Canada, May 2004.",
                "Article 7"
            ],
            "original_annotated_samples": [
                "Significant improvements in <br>video encoding/decoding</br> and (de)compression techniques have been made as a result of recent advances in video encoding and compression techniques [14]."
            ],
            "translated_annotated_samples": [
                "Se han logrado mejoras significativas en las técnicas de codificación/decodificación y compresión (des) de video como resultado de los avances recientes en las técnicas de codificación y compresión de video [14]."
            ],
            "translated_text": "Evaluando la Gestión de Recursos Adaptativa para Sistemas Empotrados Distribuidos en Tiempo Real de Nishanth Shankaran, Xenofon Koutsoukos, Douglas C. Schmidt y Aniruddha Gokhale, Dept. de EECS, Universidad de Vanderbilt, Nashville RESUMEN Un problema desafiante enfrentado por investigadores y desarrolladores de sistemas distribuidos en tiempo real y embebidos (DRE) es idear e implementar estrategias efectivas de gestión adaptativa de recursos que puedan cumplir con los requisitos de calidad de servicio (QoS) de extremo a extremo en condiciones operativas variables. Este artículo presenta dos contribuciones a la investigación en gestión de recursos adaptativa para sistemas DRE. Primero, describimos la estructura y funcionalidad del Middleware de Gestión de Recursos Adaptativos Híbridos (HyARM), que proporciona gestión de recursos adaptativa utilizando técnicas de control híbridas para adaptarse a las fluctuaciones de carga de trabajo y disponibilidad de recursos. Segundo, evaluamos el comportamiento adaptativo de HyARM a través de experimentos en un sistema multimedia DRE que distribuye video en tiempo real. Nuestros resultados indican que HyARM produce un rendimiento del sistema predecible, estable y alto, incluso ante cargas de trabajo y disponibilidad de recursos fluctuantes. Categorías y Descriptores de Asignaturas C.2.4 [Sistemas Distribuidos]: Aplicaciones Distribuidas; D.4.7 [Organización y Diseño]: Sistemas en Tiempo Real y Sistemas Embebidos 1. INTRODUCCIÓN Lograr la calidad de servicio (QoS) en tiempo real de extremo a extremo es particularmente importante para sistemas distribuidos en tiempo real y embebidos (DRE) abiertos que enfrentan limitaciones de recursos, como potencia de cómputo limitada y ancho de banda de red. La sobreutilización de estos recursos del sistema puede generar un comportamiento impredecible e inestable, mientras que la subutilización puede resultar en un costo excesivo del sistema. Un enfoque prometedor para cumplir de manera efectiva con estos requisitos de calidad de servicio de extremo a extremo, por lo tanto, es desarrollar y aplicar middleware adaptativo [10, 15], que es un software cuyas propiedades funcionales y relacionadas con la calidad de servicio pueden ser modificadas estática o dinámicamente. Las modificaciones estáticas se realizan para reducir la huella, aprovechar las capacidades existentes en plataformas específicas, habilitar la selección funcional y/o minimizar las dependencias de infraestructura de hardware/software. Los objetivos de las modificaciones dinámicas incluyen optimizar las respuestas del sistema a entornos o requisitos cambiantes, como la modificación de interconexiones de componentes, niveles de potencia, disponibilidad de ancho de banda de CPU y red, latencia/jitter y carga de trabajo. En los sistemas DRE abiertos, el middleware adaptativo debe realizar modificaciones de manera confiable, es decir, cumpliendo con los estrictos requisitos de calidad de servicio de extremo a extremo, lo que requiere la especificación y aplicación de límites superiores e inferiores en la utilización de recursos del sistema para garantizar un uso efectivo de los recursos del sistema. Para cumplir con estos requisitos, hemos desarrollado el Middleware de Gestión de Recursos Híbrido Adaptativo (HyARM), que es un middleware de gestión de recursos distribuido de código abierto. HyARM se basa en técnicas híbridas de control teórico, las cuales proporcionan un marco teórico para diseñar el control de sistemas complejos con dinámicas tanto continuas como discretas. En nuestro estudio de caso, que implica un sistema distribuido de distribución de video en tiempo real, la tarea de gestión de recursos adaptativa consiste en controlar la utilización de los diferentes recursos, cuyas utilizaciones están descritas por variables continuas. Logramos esto adaptando la resolución del video transmitido, que se modela como una variable continua, y cambiando la velocidad de cuadros y la compresión, que se modelan mediante acciones discretas. Hemos implementado HyARM sobre el ORB ACE (TAO) [13], que es una implementación de la especificación CORBA en tiempo real [12]. Nuestros resultados muestran que (1) HyARM garantiza una utilización efectiva de los recursos del sistema y (2) se cumplen los requisitos de calidad de servicio de extremo a extremo de las aplicaciones de mayor prioridad, incluso ante fluctuaciones en la carga de trabajo. El resto del documento está organizado de la siguiente manera: la Sección 2 describe la arquitectura, funcionalidad y modelo de utilización de recursos de nuestro estudio de caso del sistema multimedia DRE; la Sección 3 explica la estructura y funcionalidad de HyARM; la Sección 4 evalúa el comportamiento adaptativo de HyARM a través de experimentos en nuestro estudio de caso del sistema multimedia; la Sección 5 compara nuestra investigación sobre HyARM con trabajos relacionados; y la Sección 6 presenta observaciones finales. El código y ejemplos de HyARM están disponibles en www.dre.vanderbilt.edu/∼nshankar/HyARM/. Artículo 7 2. ESTUDIO DE CASO: SISTEMA MULTIMEDIA DRE Esta sección describe la arquitectura y los requisitos de QoS de nuestro sistema multimedia DRE. 2.1 Arquitectura del Sistema Multimedia Enlace Inalámbrico Enlace Inalámbrico Enlace Inalámbrico ` ` ` Enlace Físico Enlace Físico Enlace Físico Estación Base Extremo Receptor Extremo Receptor Extremo Receptor` Enlace Físico Extremo Receptor Cámara UAV Codificador de Video Cámara Codificador de Video Cámara Codificador de Video Cámara UAV Codificador de Video Cámara Codificador de Video Cámara Codificador de Video Cámara UAV Codificador de Video Cámara Codificador de Video Cámara Codificador de Video Figura 1: Arquitectura del Sistema Multimedia DRE La arquitectura de nuestro sistema multimedia DRE se muestra en la Figura 1 y consta de las siguientes entidades: (1) Fuente de datos (captura de video por UAV), donde el video es capturado (relacionado con el tema de interés) por la(s) cámara(s) en cada UAV, seguido por la codificación del video crudo utilizando un esquema de codificación específico y transmitiendo el video a la siguiente etapa en la cadena de procesamiento. (2) Distribuidor de datos (estación base), donde el video es procesado para eliminar ruido, seguido por la retransmisión del video procesado a la siguiente etapa en la cadena de procesamiento. (3) Destinos (centro de comando y control), donde el video recibido es nuevamente procesado para eliminar ruido, luego decodificado y finalmente renderizado al usuario final a través de pantallas gráficas. Se han logrado mejoras significativas en las técnicas de codificación/decodificación y compresión (des) de video como resultado de los avances recientes en las técnicas de codificación y compresión de video [14]. Los esquemas comunes de compresión de video son MPEG1, MPEG-2, Real Video y MPEG-4. Cada esquema de compresión se caracteriza por sus requisitos de recursos, por ejemplo, la potencia computacional para (des)comprimir la señal de video y el ancho de banda de red necesario para transmitir la señal de video comprimida. Las propiedades del video comprimido, como la resolución y la velocidad de fotogramas, determinan tanto la calidad como los requisitos de recursos del video. Nuestro estudio de caso del sistema multimedia tiene los siguientes requisitos de calidad de servicio (QoS) en tiempo real de extremo a extremo: (1) latencia, (2) retardo entre cuadros (también conocido como jitter), (3) frecuencia de cuadros y (4) resolución de imagen. Estos requisitos de calidad de servicio (QoS) pueden clasificarse como duros o blandos. Los requisitos de QoS estrictos deben ser cumplidos por el sistema subyacente en todo momento, mientras que los requisitos de QoS flexibles pueden ser ocasionalmente incumplidos. Para nuestro estudio de caso, tratamos los requisitos de QoS como la latencia y la variabilidad de retardo como requisitos de QoS más estrictos y nos esforzamos por cumplir con estos requisitos en todo momento. Por el contrario, tratamos los requisitos de QoS como la tasa de cuadros de video y la resolución de imagen como requisitos de QoS más flexibles y modificamos estas propiedades de video de manera adaptativa para manejar los cambios dinámicos en la disponibilidad de recursos de manera efectiva. Aunque a menudo se presentan como dos conjuntos de requisitos discretos, en la práctica suelen ser dos extremos de un continuo que va desde más suave a más duro en lugar de dos puntos disjuntos. La potencia informática requerida por las tareas de captura y codificación de video depende de factores dinámicos, como la velocidad del UAV, la velocidad del sujeto (si el sujeto es móvil) y la distancia entre el UAV y el sujeto. La cantidad de ancho de banda de la red inalámbrica disponible para transmitir video capturado por UAVs a estaciones base también depende de la conectividad inalámbrica entre los UAVs y la estación base, que a su vez depende de factores dinámicos como la velocidad de los UAVs y la distancia relativa entre los UAVs y las estaciones base. El ancho de banda del enlace entre la estación base y el receptor final está limitado, pero es más estable que el ancho de banda de la red inalámbrica. Los requisitos de recursos y la disponibilidad de recursos están sujetos a cambios dinámicos. Dos clases de aplicaciones - habilitadas para QoS y de mejor esfuerzo - utilizan la infraestructura del sistema multimedia descrita anteriormente para transmitir video a sus respectivos receptores. Las aplicaciones de clase habilitada para QoS tienen mayor prioridad sobre las aplicaciones de clase de mejor esfuerzo. En nuestro estudio, las aplicaciones de respuesta de emergencia pertenecen a la clase habilitada para la calidad de servicio (QoS), y las aplicaciones de vigilancia pertenecen a la clase de mejor esfuerzo. Por ejemplo, dado que un flujo de datos de una aplicación de respuesta de emergencia es de mayor importancia que un flujo de video de una aplicación de vigilancia, recibe más recursos de extremo a extremo. Dado que la disponibilidad de recursos afecta significativamente la calidad de servicio, utilizamos la utilización actual de recursos como indicador principal del rendimiento del sistema. Nos referimos al nivel actual de utilización de recursos del sistema como la condición del sistema. Basándonos en esta definición, podemos clasificar las condiciones del sistema como estando subutilizadas, sobreutilizadas o utilizadas de manera efectiva. La subutilización de los recursos del sistema ocurre cuando la utilización actual de los recursos es menor que el límite inferior deseado de utilización de recursos. En este sistema, los recursos residuales del sistema (es decir, ancho de banda de red y potencia computacional) están disponibles en grandes cantidades después de cumplir con los requisitos de calidad de servicio de extremo a extremo de las aplicaciones. Estos recursos residuales se pueden utilizar para aumentar la calidad de servicio de las aplicaciones. Por ejemplo, la CPU residual y el ancho de banda de red pueden ser utilizados para entregar videos de mejor calidad (por ejemplo, con mayor resolución y mayor velocidad de cuadros) a los receptores finales. La sobreutilización de los recursos del sistema ocurre cuando la utilización actual de recursos es mayor que el límite superior deseado de utilización de recursos. Esta condición puede surgir por la pérdida de recursos - ancho de banda de red y/o potencia de cómputo en la estación base, receptor final o en el UAV - o puede ser debido a un aumento en las demandas de recursos por parte de las aplicaciones. La sobreutilización es generalmente indeseable ya que la calidad del video recibido (como la resolución y la velocidad de cuadros) y las propiedades de puntualidad (como la latencia y la fluctuación) se degradan y pueden resultar en un sistema inestable (y por lo tanto ineficaz). La utilización efectiva de recursos es la condición deseada del sistema, ya que garantiza que se cumplan los requisitos de calidad de servicio de extremo a extremo del sistema multimedia basado en UAV y que la utilización de los recursos del sistema, es decir, el ancho de banda de la red y la potencia computacional, se encuentren dentro de sus límites de utilización deseados. El artículo 7, sección 3 describe las técnicas que aplicamos para lograr una utilización efectiva, incluso ante la disponibilidad y/o demanda fluctuante de recursos. DESCRIPCIÓN DE HYARM Esta sección describe la arquitectura del Middleware de Gestión de Recursos Adaptativos Híbrido (HyARM). HyARM garantiza un rendimiento eficiente y predecible del sistema al proporcionar gestión adaptativa de recursos, que incluye la monitorización de los recursos del sistema y la imposición de límites en la utilización de recursos de las aplicaciones. 3.1 Estructura y Funcionalidad de HyARM Leyenda de Utilización de Recursos Asignación de Recursos Parámetros de Aplicación Figura 2: Arquitectura de HyARM HyARM está compuesto por tres tipos de entidades mostradas en la Figura 2 y descritas a continuación: Los monitores de recursos observan la utilización general de recursos para cada tipo de recurso y la utilización de recursos por aplicación. En nuestro sistema multimedia, hay monitores de recursos para la utilización de la CPU y el ancho de banda de la red. Los monitores de la CPU observan la utilización de recursos de la CPU de los UAV, la estación base y los receptores finales. Los monitores de ancho de banda de red observan la utilización de recursos de red de (1) el enlace de red inalámbrica entre los UAV y la estación base y (2) el enlace de red cableada entre la estación base y los receptores finales. El controlador central mantiene la utilización de recursos del sistema por debajo de un límite deseado mediante (1) el procesamiento de actualizaciones periódicas que recibe de los monitores de recursos y (2) modificando la ejecución de las aplicaciones en consecuencia, por ejemplo, utilizando diferentes algoritmos de ejecución u operando la aplicación con mayor/menor calidad de servicio (QoS). Este proceso de adaptación garantiza que los recursos del sistema se utilicen de manera eficiente y se cumplan los requisitos de calidad de servicio de la aplicación de extremo a extremo. En nuestro sistema multimedia, el controlador HyARM determina el valor de parámetros de la aplicación como (1) esquemas de compresión de video, como Real Video y MPEG-4, y/o (2) velocidad de cuadros, y (3) resolución de imagen. Desde la perspectiva de las técnicas híbridas de control teórico [8], los diferentes esquemas de compresión de video y la velocidad de cuadros forman las variables discretas de la ejecución de la aplicación, mientras que la resolución de imagen forma las variables continuas. Los adaptadores de aplicación modifican la ejecución de la aplicación de acuerdo con los parámetros recomendados por el controlador y garantizan que el funcionamiento de la aplicación esté de acuerdo con los parámetros recomendados. En la implementación actual de HyARM, el adaptador de la aplicación modifica los parámetros de entrada a la aplicación que afectan la calidad de servicio (QoS) de la aplicación y la utilización de recursos, como el esquema de compresión, la velocidad de fotogramas y la resolución de la imagen. En nuestras futuras implementaciones, planeamos utilizar mecanismos de reserva de recursos como Differentiated Service [7, 3] y Class-based Kernel Resource Management [4] para aprovisionar/reservar recursos de red y CPU. En nuestro sistema multimedia, el adaptador de la aplicación se asegura de que el video se codifique a la velocidad de cuadros y resolución recomendadas utilizando el esquema de compresión especificado. 3.2 Aplicando HyARM al Estudio de Caso del Sistema Multimedia. HyARM se construye sobre TAO [13], una implementación de código abierto ampliamente utilizada de CORBA en tiempo real [12]. HyARM se puede aplicar para garantizar una gestión eficiente, predecible y adaptable de recursos en cualquier sistema DRE donde la disponibilidad y los requisitos de recursos están sujetos a cambios dinámicos. La Figura 3 muestra la interacción de varias partes del sistema multimedia DRE desarrollado con HyARM, TAO y el Servicio de Streaming de Audio y Video de TAOs. El servicio de transmisión de audio/vídeo de TAO es una implementación de la especificación del Servicio de Transmisión de Audio/Vídeo de CORBA. El servicio de transmisión de audio y video de TAOs es un servicio de distribución de video habilitado para QoS que puede transferir video en tiempo real a uno o más receptores. Utilizamos el Servicio de Transmisión de Audio y Video para enviar el video desde los VANTs a los receptores finales a través de la estación base. Tres entidades del sistema multimedia DRE con HyARM, a saber, los monitores de recursos, el controlador central y los adaptadores de aplicaciones, están construidos como servidores CORBA, por lo que pueden distribuirse en todo el sistema DRE. Los monitores de recursos son objetos CORBA remotos que actualizan periódicamente al controlador central con la utilización actual de recursos. Los adaptadores de aplicaciones se ubican junto a las aplicaciones ya que ambas interactúan estrechamente. Como se muestra en la Figura 3, los UAV comprimen los datos utilizando varios esquemas de compresión, como MPEG1, MPEG4 y Real Video, y utilizan el servicio de transmisión de audio/vídeo de TAOs para enviar el video a los receptores finales. Los monitores de recursos de HyARMs observan continuamente la utilización de recursos del sistema y notifican al controlador central con la utilización actual. La interacción entre el controlador y los monitores de recursos utiliza el patrón Observer. Cuando el controlador recibe actualizaciones de utilización de recursos de los monitores, calcula las modificaciones necesarias a los parámetros de la(s) aplicación(es) y notifica al adaptador de la aplicación mediante una llamada de operación remota. Los adaptadores de aplicación, que están ubicados junto a la aplicación, modifican los parámetros de entrada de la aplicación, en nuestro caso el codificador de video, para modificar la utilización de recursos de la aplicación y la calidad de servicio. La estación base no está incluida en la figura ya que solo retransmite el video recibido de los UAV a los receptores finales. Artículo 7 4. RESULTADOS DE RENDIMIENTO Y ANÁLISIS Esta sección describe primero el banco de pruebas que proporciona la infraestructura para nuestro sistema multimedia DRE, que se utilizó para evaluar el rendimiento de HyARM. Luego describimos nuestros experimentos y analizamos los resultados obtenidos para evaluar empíricamente cómo se comporta HyARM durante la subutilización y sobreutilización de los recursos del sistema. 4.1 Descripción general del banco de pruebas de hardware y software Nuestros experimentos se realizaron en el banco de pruebas Emulab en la Universidad de Utah. La configuración de hardware consiste en dos nodos actuando como UAVs, uno actuando como estación base y otro como receptor final. El video de los dos UAV fue transmitido a una estación base a través de una LAN configurada con las siguientes propiedades: una relación promedio de pérdida de paquetes de 0.3 y un ancho de banda de 1 Mbps. El ancho de banda de la red se eligió para ser de 1 Mbps ya que a cada UAV en el sistema multimedia DRE se le asignan 250 Kbps. Estos parámetros fueron elegidos para emular una red inalámbrica poco confiable con ancho de banda limitado entre los UAVs y la estación base. Desde la estación base, el video fue retransmitido al receptor final a través de un enlace por cable confiable de 10 Mbps de ancho de banda sin pérdida de paquetes. La configuración de hardware de todos los nodos fue elegida de la siguiente manera: procesador Intel Pentium III de 600 MHz, 256 MB de memoria física, 4 puertos Ethernet Intel EtherExpress Pro de 10/100 Mbps y disco duro de 13 GB. Se utilizó una versión en tiempo real de Linux - TimeSys Linux/NET 3.1.214 basada en RedHat Linux 9 como sistema operativo para todos los nodos. Los siguientes paquetes de software también fueron utilizados para nuestros experimentos: (1) Ffmpeg 0.4.9-pre1, que es una biblioteca de código abierto (http://www.ffmpeg.sourceforge.net/download.php) que comprime video en formatos MPEG-2, MPEG-4, Real Video, y muchos otros formatos de video. (2) Iftop 0.16, que es una biblioteca de código abierto (http://www.ex-parrot.com/∼pdw/iftop/) que utilizamos para monitorear la actividad de red y la utilización del ancho de banda. (3) ACE 5.4.3 + TAO 1.4.3, que es una implementación de código abierto (http://www.dre.vanderbilt.edu/TAO) de la especificación CORBA en tiempo real [12] sobre la cual se construye HyARM. TAO proporciona el Servicio de Transmisión de Audio/Video (A/V) CORBA que utilizamos para transmitir el video desde los UAVs a los receptores finales a través de la estación base. Configuración del experimento Nuestro experimento consistió en dos UAVs (emulados) que enviaron video simultáneamente a la estación base utilizando la configuración experimental descrita en la Sección 4.1. En la estación base, el video fue retransmitido a los receptores finales (sin ninguna modificación), donde fue almacenado en un archivo. Cada UAV alojaba dos aplicaciones, una aplicación habilitada para QoS (respuesta de emergencia) y una aplicación de mejor esfuerzo (vigilancia). Dentro de cada UAV, el poder computacional se comparte entre las aplicaciones, mientras que el ancho de banda de la red se comparte entre todas las aplicaciones. Para evaluar la calidad de servicio proporcionada por HyARM, monitoreamos la utilización de la CPU en los dos UAV y la utilización del ancho de banda de la red entre el UAV y la estación base. La utilización de recursos de la CPU no se monitoreó en la estación base y en el receptor final, ya que no realizaron operaciones computacionalmente intensivas. La utilización de recursos del enlace físico de 10 Mbps entre la estación base y el receptor final no afecta la calidad de servicio de las aplicaciones y no es monitoreada por HyARM, ya que es casi 10 veces el ancho de banda de 1 MB de la LAN entre los UAV y la estación base. El experimento también monitorea propiedades del video que afectan la calidad de servicio de las aplicaciones, como la latencia, la variabilidad de retardo, la tasa de cuadros y la resolución. El punto de ajuste en la utilización de recursos para cada recurso se especificó en 0.69, que es el límite superior típicamente recomendado por técnicas de programación, como el algoritmo monótono de tasa [9]. Dado que los estudios [6] han demostrado que los ojos humanos pueden percibir retrasos de más de 200 ms, utilizamos esto como límite superior de la variabilidad en el video recibido. Los requisitos de QoS para cada clase de aplicación se especifican durante la inicialización del sistema y se muestran en la Tabla 1. 4.3 Resultados empíricos y análisis Esta sección presenta los resultados obtenidos al ejecutar el experimento descrito en la Sección 4.2 en nuestro banco de pruebas del sistema multimedia DRE. Utilizamos la utilización de recursos del sistema como métrica para evaluar las capacidades de gestión de recursos adaptativos de HyARM bajo cargas de trabajo de entrada variables. También utilizamos la calidad de servicio de la aplicación como métrica para evaluar las capacidades de HyARMs para satisfacer los requisitos de calidad de servicio de extremo a extremo de las diferentes clases de aplicaciones en el sistema multimedia DRE. Analizamos estos resultados para explicar las diferencias significativas en el rendimiento del sistema y la calidad de servicio de la aplicación. La comparación del rendimiento del sistema se descompone en la comparación de la utilización de recursos y la calidad de servicio de la aplicación. Para la utilización de recursos del sistema, comparamos (1) la utilización del ancho de banda de la red de área local y (2) la utilización de la CPU en los dos nodos UAV. Para la aplicación de QoS, comparamos los valores medios de los parámetros de video, incluyendo (1) resolución de imagen, (2) velocidad de cuadros, (3) latencia y (4) jitter. Comparación de la utilización de recursos. La sobreutilización de recursos del sistema en sistemas DRE puede generar un sistema inestable. Por el contrario, la subutilización de los recursos del sistema aumenta el costo del sistema. La Figura 4 y la Figura 5 comparan la utilización de recursos del sistema con y sin HyARM. La Figura 4 muestra que HyARM mantiene la utilización del sistema cerca del punto de ajuste de utilización deseado durante la fluctuación en la carga de trabajo de entrada al transmitir video de mayor (o menor) calidad de servicio para la clase de aplicaciones con calidad de servicio habilitada (o de mejor esfuerzo) durante la sobre (o sub) utilización de los recursos del sistema. La Figura 5 muestra que sin HyARM, la utilización de la red alcanzó hasta 0.9 durante el aumento de las condiciones de carga de trabajo, lo cual es mayor que el punto de ajuste de utilización de 0.7 en 0.2. Como resultado de la sobreutilización de recursos, la calidad de servicio (QoS) del video recibido, como la latencia promedio y el jitter, se vio afectada significativamente. Sin HyARM, los recursos del sistema estaban subutilizados o sobreutilizados, ambos de los cuales son indeseables. En contraste, con HyARM, la utilización de recursos del sistema siempre está cerca del punto de ajuste deseado, incluso durante las fluctuaciones en la carga de trabajo de la aplicación. Durante fluctuaciones repentinas en la carga de trabajo de la aplicación, las condiciones del sistema pueden ser temporalmente indeseables, pero se restauran a la condición deseada dentro de varios períodos de muestreo. La sobreutilización temporal de recursos es permisible en nuestro sistema multimedia, ya que la calidad del video puede degradarse por un corto período de tiempo, aunque la calidad del servicio de la aplicación se verá significativamente degradada si se transmite un video de baja calidad durante un período de tiempo más largo. Comparación de la calidad de servicio de la aplicación. Las Figuras 6, 7 y la Tabla 2 comparan la latencia, la variabilidad, la resolución y la velocidad de cuadro del video recibido, respectivamente. La Tabla 2 muestra que HyARM aumenta la resolución y la velocidad de cuadro de video de las aplicaciones habilitadas para QoS, pero disminuye la resolución y la velocidad de cuadro de las aplicaciones de mejor esfuerzo. Durante la sobreutilización de los recursos del sistema, la resolución y la velocidad de cuadros de las aplicaciones de menor prioridad se reducen para adaptarse a las fluctuaciones en la carga de trabajo de la aplicación y mantener la utilización de los recursos en el punto establecido especificado. Se puede observar en la Figura 6 y la Figura 7 que HyARM reduce significativamente la latencia y la variabilidad del video recibido. Estas cifras muestran que la calidad de servicio de las aplicaciones habilitadas para QoS se mejora considerablemente con HyARM. Aunque los parámetros de la aplicación, como la velocidad de cuadros y las resoluciones, que afectan los requisitos de QoS suave de las aplicaciones de mejor esfuerzo pueden verse comprometidos, se cumplen los requisitos de QoS estrictos, como la latencia y la variabilidad, de todas las aplicaciones. HyARM responde a las fluctuaciones en la disponibilidad de recursos y/o la demanda mediante el monitoreo constante de la utilización de recursos. Como se muestra en la Figura 4, cuando la utilización de recursos aumenta por encima del punto de ajuste deseado, HyARM reduce la utilización disminuyendo la calidad de servicio de las aplicaciones de mejor esfuerzo. Esta adaptación garantiza que haya suficientes recursos disponibles para que las aplicaciones habilitadas para QoS cumplan con sus necesidades de QoS. Las figuras 6 y 7 muestran que los valores de latencia y jitter del video recibido del sistema con HyARM son casi la mitad de los valores correspondientes del sistema sin HyARM. Con HyARM, los valores de estos parámetros están muy por debajo de los límites especificados, mientras que sin HyARM, estos valores están significativamente por encima de los límites especificados debido a la sobreutilización del ancho de banda de la red, lo que conduce a la congestión de la red y resulta en la pérdida de paquetes. HyARM evita esto reduciendo parámetros de video como la resolución, la velocidad de cuadros y/o modificando el esquema de compresión utilizado para comprimir el video. Nuestras conclusiones al analizar los resultados descritos anteriormente son que la aplicación de middleware adaptativo a través de control híbrido en sistemas DRE ayuda a (1) mejorar la calidad de servicio de la aplicación, (2) aumentar la utilización de recursos del sistema y (3) proporcionar una mejor previsibilidad (menor latencia y retraso entre fotogramas) a las aplicaciones habilitadas para calidad de servicio. Estas mejoras se logran en gran medida gracias al monitoreo de la utilización de recursos del sistema, la gestión eficiente de la carga de trabajo del sistema y la provisión adaptativa de recursos mediante los monitores de recursos de red/CPU de HyARMs, el adaptador de aplicaciones y el controlador central, respectivamente. TRABAJO RELACIONADO Recientemente se han aplicado varios enfoques teóricos de control a los sistemas DRE. Estas técnicas ayudan a superar las limitaciones de los enfoques de programación tradicionales que manejan mal los cambios dinámicos en la disponibilidad de recursos y resultan en un sistema programado rígidamente que se adapta mal a los cambios. Se presenta una encuesta de estas técnicas en [1]. Un enfoque de este tipo es la programación de control de retroalimentación (FCS) [2, 11]. Los algoritmos de FCS ajustan dinámicamente la asignación de recursos mediante bucles de control de retroalimentación de software. Los algoritmos de FCS se modelan y diseñan utilizando metodologías rigurosas de teoría de control. Estos algoritmos ofrecen garantías de rendimiento robusto y analítico a pesar de las incertidumbres en la disponibilidad de recursos y/o demanda. Aunque los algoritmos de FCS existentes han mostrado promesa, a menudo estos algoritmos asumen que el sistema tiene variable(s) de control continuas que pueden ajustarse continuamente. Si bien esta suposición es válida para ciertas clases de sistemas, existen muchas clases de sistemas DRE, como la aviónica y los entornos informáticos de barcos completos, que solo admiten un conjunto finito a priori de configuraciones discretas. Por lo tanto, las variables de control en tales sistemas son intrínsecamente discretas. HyARM maneja tanto variables de control continuas, como la resolución de la imagen, como variables de control discretas, como un conjunto discreto de velocidades de cuadro. HyARM puede aplicarse a sistemas que admiten un conjunto continuo y/o discreto de variables de control. El sistema multimedia DRE descrito en la Sección 2 es un ejemplo de sistema DRE que ofrece tanto variables de control continuas (resolución de imagen) como un conjunto discreto (velocidad de cuadros). Estas variables son modificadas por HyARM para lograr una utilización eficiente de recursos y una mejora en la calidad de servicio de la aplicación. CONCLUSIONES Artículo 7 Figura 6: Comparación de la latencia del video Figura 7: Comparación de la fluctuación del video Fuente Tamaño de imagen / Velocidad de cuadro Con HyARM Sin HyARM UAV1 Aplicación habilitada para QoS 1122 X 1496 / 25 960 X 720 / 20 UAV1 Aplicación de mejor esfuerzo 288 X 384 / 15 640 X 480 / 20 UAV2 Aplicación habilitada para QoS 1126 X 1496 / 25 960 X 720 / 20 UAV2 Aplicación de mejor esfuerzo 288 X 384 / 15 640 X 480 / 20 Tabla 2: Comparación de la calidad del video Muchos sistemas distribuidos en tiempo real y embebidos (DRE) demandan la aplicación correcta de la calidad de servicio (QoS) de extremo a extremo desde sus plataformas subyacentes para operar correctamente. Estos sistemas cada vez se ejecutan en entornos abiertos, donde la disponibilidad de recursos está sujeta a cambios dinámicos. Para cumplir con la calidad de servicio de extremo a extremo en entornos dinámicos, los sistemas DRE pueden beneficiarse de un middleware adaptativo que monitorea los recursos del sistema, realiza una gestión eficiente de la carga de trabajo de la aplicación y permite una provisión eficiente de recursos para la ejecución de aplicaciones. Este artículo describe HyARM, un middleware adaptativo que proporciona una gestión efectiva de recursos a los sistemas DRE. HyARM emplea técnicas de control híbrido para proporcionar las capacidades de middleware adaptativo, como el monitoreo de recursos y la adaptación de aplicaciones, que son clave para ofrecer las capacidades de gestión de recursos dinámicos para sistemas DRE abiertos. Empleamos HyARM en un sistema multimedia DRE representativo que está implementado utilizando CORBA en tiempo real y el Servicio de Transmisión de Audio/Vídeo de CORBA. Evaluamos el rendimiento de HyARM en un sistema compuesto por tres recursos distribuidos y dos clases de aplicaciones con dos aplicaciones cada una. Nuestros resultados empíricos indican que HyARM garantiza (1) la utilización eficiente de recursos al mantener la utilización de recursos del sistema dentro de los límites de utilización especificados, (2) los requisitos de calidad de servicio de las aplicaciones habilitadas para QoS se cumplen en todo momento. En general, HyARM garantiza una gestión eficiente, predecible y adaptable de recursos para sistemas DRE. REFERENCIAS [1] T. F. Abdelzaher, J. Stankovic, C. Lu, R. Zhang y Y. Lu. Control de rendimiento de retroalimentación en servicios de software. IEEE: Sistemas de Control, 23(3), junio de 2003. [2] L. Abeni, L. Palopoli, G. Lipari y J. Walpole. Análisis de un planificador de retroalimentación basado en reservas. En el Simposio de Sistemas en Tiempo Real de IEEE, Diciembre de 2002. [3] S. Blake, D. Black, M. Carlson, E. Davies, Z. Wang y W. Weiss. Una arquitectura para servicios diferenciados. Centro de Información de la Red RFC 2475, Dic. 1998. [4] H. Franke, S. Nagar, C. Seetharaman y V. Kashyap. Habilitando la Gestión Autonómica de la Carga de Trabajo en Linux. En Actas de la Conferencia Internacional sobre Computación Autónoma (ICAC), Nueva York, Nueva York, mayo de 2004. IEEE. [5] E. Gamma, R. Helm, R. Johnson, y J. Vlissides. Patrones de diseño: Elementos de software orientado a objetos reutilizable. Addison-Wesley, Reading, MA, 1995. [6] G. Ghinea y J. P. Thomas. Impacto de QoS en la percepción y comprensión del usuario de videoclips multimedia. En MULTIMEDIA 98: Actas de la sexta conferencia internacional de ACM sobre Multimedia, páginas 49-54, Bristol, Reino Unido, 1998. ACM Press. [7] Grupo de Trabajo de Ingeniería de Internet. Grupo de Trabajo de Servicios Diferenciados (diffserv) Carta. www.ietf.org/html.charters/diffserv-charter.html, 2000. [8] X. Koutsoukos, R. Tekumalla, B. Natarajan y C. Lu. Control híbrido supervisado de sistemas en tiempo real. En el 11º Simposio de Tecnología y Aplicaciones en Tiempo Real y Sistemas Empotrados de IEEE, San Francisco, California, Mar. 2005. [9] J. Lehoczky, L. Sha y Y. Ding. El algoritmo de programación Rate Monotonic: Caracterización exacta y comportamiento en casos promedio. En Actas del 10º Simposio de Sistemas en Tiempo Real de IEEE (RTSS 1989), páginas 166-171. IEEE Computer Society Press, 1989. [10] J. Loyall, J. Gossett, C. Gill, R. Schantz, J. Zinky, P. Pal, R. Shapiro, C. Rodrigues, M. Atighetchi, and D. Karr.\n\nIEEE Computer Society Press, 1989. [10] J. Loyall, J. Gossett, C. Gill, R. Schantz, J. Zinky, P. Pal, R. Shapiro, C. Rodrigues, M. Atighetchi y D. Karr. Comparando y contrastando el soporte de middleware adaptativo en aplicaciones de objetos distribuidos de área amplia y embebidos. En Actas de la 21ª Conferencia Internacional sobre Sistemas de Computación Distribuida (ICDCS-21), páginas 625-634. IEEE, Abr. 2001. [11] C. Lu, J. A. Stankovic, G. Tao y S. H. Son. Programación en tiempo real con control de retroalimentación: Marco, modelado y algoritmos. Revista de Sistemas en Tiempo Real, 23(1/2):85-126, julio de 2002. [12] Object Management Group. Especificación CORBA en tiempo real, documento formal/02-08-02 de OMG, edición de agosto de 2002. [13] D. C. Schmidt, D. L. Levine y S. Mungee. El diseño y rendimiento de los corredores de solicitudes de objetos en tiempo real. Comunicaciones de Computadoras, 21(4):294-324, Abr. 1998. [14] Thomas Sikora. Tendencias y perspectivas en codificación de imágenes y videos. En Actas del IEEE, enero de 2005. [15] X. Wang, H.-M. Huang, V. Subramonian, C. Lu y C. Gill. CAMRIT: Middleware Adaptativo Basado en Control para la Transmisión de Imágenes en Tiempo Real. En Actas del 10º Simposio de Tecnología y Aplicaciones en Tiempo Real y Sistemas Empotrados del IEEE (RTAS), Toronto, Canadá, mayo de 2004. Artículo 7 ",
            "candidates": [],
            "error": [
                []
            ]
        },
        "resource reservation mechanism": {
            "translated_key": "mecanismos de reserva de recursos",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Evaluating Adaptive Resource Management for Distributed Real-Time Embedded Systems Nishanth Shankaran, ∗ Xenofon Koutsoukos, Douglas C. Schmidt, and Aniruddha Gokhale Dept.",
                "of EECS, Vanderbilt University, Nashville ABSTRACT A challenging problem faced by researchers and developers of distributed real-time and embedded (DRE) systems is devising and implementing effective adaptive resource management strategies that can meet end-to-end quality of service (QoS) requirements in varying operational conditions.",
                "This paper presents two contributions to research in adaptive resource management for DRE systems.",
                "First, we describe the structure and functionality of the Hybrid Adaptive Resourcemanagement Middleware (HyARM), which provides adaptive resource management using hybrid control techniques for adapting to workload fluctuations and resource availability.",
                "Second, we evaluate the adaptive behavior of HyARM via experiments on a DRE multimedia system that distributes video in real-time.",
                "Our results indicate that HyARM yields predictable, stable, and high system performance, even in the face of fluctuating workload and resource availability.",
                "Categories and Subject Descriptors C.2.4 [Distributed Systems]: Distributed Applications; D.4.7 [Organization and Design]: Real-time Systems and Embedded Systems 1.",
                "INTRODUCTION Achieving end-to-end real-time quality of service (QoS) is particularly important for open distributed real-time and embedded (DRE) systems that face resource constraints, such as limited computing power and network bandwidth.",
                "Overutilization of these system resources can yield unpredictable and unstable behavior, whereas under-utilization can yield excessive system cost.",
                "A promising approach to meeting these end-to-end QoS requirements effectively, therefore, is to develop and apply adaptive middleware [10, 15], which is software whose functional and QoS-related properties can be modified either statically or dynamically.",
                "Static modifications are carried out to reduce footprint, leverage capabilities that exist in specific platforms, enable functional subsetting, and/or minimize hardware/software infrastructure dependencies.",
                "Objectives of dynamic modifications include optimizing system responses to changing environments or requirements, such as changing component interconnections, power-levels, CPU and network bandwidth availability, latency/jitter, and workload.",
                "In open DRE systems, adaptive middleware must make such modifications dependably, i.e., while meeting stringent end-to-end QoS requirements, which requires the specification and enforcement of upper and lower bounds on system resource utilization to ensure effective use of system resources.",
                "To meet these requirements, we have developed the Hybrid Adaptive Resource-management Middleware (HyARM), which is an open-source1 distributed resource management middleware.",
                "HyARM is based on hybrid control theoretic techniques [8], which provide a theoretical framework for designing control of complex system with both continuous and discrete dynamics.",
                "In our case study, which involves a distributed real-time video distribution system, the task of adaptive resource management is to control the utilization of the different resources, whose utilizations are described by continuous variables.",
                "We achieve this by adapting the resolution of the transmitted video, which is modeled as a continuous variable, and by changing the frame-rate and the compression, which are modeled by discrete actions.",
                "We have implemented HyARM atop The ACE ORB (TAO) [13], which is an implementation of the Real-time CORBA specification [12].",
                "Our results show that (1) HyARM ensures effective system resource utilization and (2) end-to-end QoS requirements of higher priority applications are met, even in the face of fluctuations in workload.",
                "The remainder of the paper is organized as follows: Section 2 describes the architecture, functionality, and resource utilization model of our DRE multimedia system case study; Section 3 explains the structure and functionality of HyARM; Section 4 evaluates the adaptive behavior of HyARM via experiments on our multimedia system case study; Section 5 compares our research on HyARM with related work; and Section 6 presents concluding remarks. 1 The code and examples for HyARM are available at www. dre.vanderbilt.edu/∼nshankar/HyARM/.",
                "Article 7 2.",
                "CASE STUDY: DRE MULTIMEDIA SYSTEM This section describes the architecture and QoS requirements of our DRE multimedia system. 2.1 Multimedia System Architecture Wireless Link Wireless Link Wireless Link ` ` ` Physical Link Physical Link Physical Link Base Station End Receiver End Receiver End Receiver` Physical Link End Receiver UAV Camera Video Encoder Camera Video Encoder Camera Video Encoder UAV Camera Video Encoder Camera Video Encoder Camera Video Encoder UAV Camera Video Encoder Camera Video Encoder Camera Video Encoder Figure 1: DRE Multimedia System Architecture The architecture for our DRE multimedia system is shown in Figure 1 and consists of the following entities: (1)Data source (video capture by UAV), where video is captured (related to subject of interest) by camera(s) on each UAV, followed by encoding of raw video using a specific encoding scheme and transmitting the video to the next stage in the pipeline. (2)Data distributor (base station), where the video is processed to remove noise, followed by retransmission of the processed video to the next stage in the pipeline. (3) Sinks (command and control center), where the received video is again processed to remove noise, then decoded and finally rendered to end user via graphical displays.",
                "Significant improvements in video encoding/decoding and (de)compression techniques have been made as a result of recent advances in video encoding and compression techniques [14].",
                "Common video compression schemes are MPEG1, MPEG-2, Real Video, and MPEG-4.",
                "Each compression scheme is characterized by its resource requirement, e.g., the computational power to (de)compress the video signal and the network bandwidth required to transmit the compressed video signal.",
                "Properties of the compressed video, such as resolution and frame-rate determine both the quality and the resource requirements of the video.",
                "Our multimedia system case study has the following endto-end real-time QoS requirements: (1) latency, (2) interframe delay (also know as jitter), (3) frame rate, and (4) picture resolution.",
                "These QoS requirements can be classified as being either hard or soft.",
                "Hard QoS requirements should be met by the underlying system at all times, whereas soft QoS requirements can be missed occasionally.2 For our case study, we treat QoS requirements such as latency and jitter as harder QoS requirements and strive to meet these requirements at all times.",
                "In contrast, we treat QoS requirements such as video frame rate and picture resolution as softer QoS requirements and modify these video properties adaptively to handle dynamic changes in resource availabil2 Although hard and soft are often portrayed as two discrete requirement sets, in practice they are usually two ends of a continuum ranging from softer to harder rather than two disjoint points. ity effectively. 2.2 DRE Multimedia System Rresources There are two primary types of resources in our DRE multimedia system: (1) processors that provide computational power available at the UAVs, base stations, and end receivers and (2) network links that provide communication bandwidth between UAVs, base stations, and end receivers.",
                "The computing power required by the video capture and encoding tasks depends on dynamic factors, such as speed of the UAV, speed of the subject (if the subject is mobile), and distance between UAV and the subject.",
                "The wireless network bandwidth available to transmit video captured by UAVs to base stations also depends on the wireless connectivity between the UAVs and the base station, which in-turn depend on dynamic factors such as the speed of the UAVs and the relative distance between UAVs and base stations.",
                "The bandwidth of the link between the base station and the end receiver is limited, but more stable than the bandwidth of the wireless network.",
                "Resource requirements and availability of resources are subjected to dynamic changes.",
                "Two classes of applications - QoS-enabled and best-effort - use the multimedia system infrastructure described above to transmit video to their respective receivers.",
                "QoS-enabled class of applications have higher priority over best-effort class of application.",
                "In our study, emergency response applications belong to QoS-enabled and surveillance applications belong to best-effort class.",
                "For example, since a stream from an emergency response application is of higher importance than a video stream from a surveillance application, it receives more resources end-to-end.",
                "Since resource availability significantly affects QoS, we use current resource utilization as the primary indicator of system performance.",
                "We refer to the current level of system resource utilization as the system condition.",
                "Based on this definition, we can classify system conditions as being either under, over, or effectively utilized.",
                "Under-utilization of system resources occurs when the current resource utilization is lower than the desired lower bound on resource utilization.",
                "In this system condition, residual system resources (i.e., network bandwidth and computational power) are available in large amounts after meeting end-to-end QoS requirements of applications.",
                "These residual resources can be used to increase the QoS of the applications.",
                "For example, residual CPU and network bandwidth can be used to deliver better quality video (e.g., with greater resolution and higher frame rate) to end receivers.",
                "Over-utilization of system resources occurs when the current resource utilization is higher than the desired upper bound on resource utilization.",
                "This condition can arise from loss of resources - network bandwidth and/or computing power at base station, end receiver or at UAV - or may be due to an increase in resource demands by applications.",
                "Over-utilization is generally undesirable since the quality of the received video (such as resolution and frame rate) and timeliness properties (such as latency and jitter) are degraded and may result in an unstable (and thus ineffective) system.",
                "Effective resource utilization is the desired system condition since it ensures that end-to-end QoS requirements of the UAV-based multimedia system are met and utilization of both system resources, i.e., network bandwidth and computational power, are within their desired utilization bounds.",
                "Article 7 Section 3 describes techniques we applied to achieve effective utilization, even in the face of fluctuating resource availability and/or demand. 3.",
                "OVERVIEW OF HYARM This section describes the architecture of the Hybrid Adaptive Resource-management Middleware (HyARM).",
                "HyARM ensures efficient and predictable system performance by providing adaptive resource management, including monitoring of system resources and enforcing bounds on application resource utilization. 3.1 HyARM Structure and Functionality Resource Utilization Legend Resource Allocation Application Parameters Figure 2: HyARM Architecture HyARM is composed of three types of entities shown in Figure 2 and described below: Resource monitors observe the overall resource utilization for each type of resource and resource utilization per application.",
                "In our multimedia system, there are resource monitors for CPU utilization and network bandwidth.",
                "CPU monitors observe the CPU resource utilization of UAVs, base station, and end receivers.",
                "Network bandwidth monitors observe the network resource utilization of (1) wireless network link between UAVs and the base station and (2) wired network link between the base station and end receivers.",
                "The central controller maintains the system resource utilization below a desired bound by (1) processing periodic updates it receives from resource monitors and (2) modifying the execution of applications accordingly, e.g., by using different execution algorithms or operating the application with increased/decreased QoS.",
                "This adaptation process ensures that system resources are utilized efficiently and end-to-end application QoS requirements are met.",
                "In our multimedia system, the HyARM controller determines the value of application parameters such as (1) video compression schemes, such as Real Video and MPEG-4, and/or (2) frame rate, and (3) picture resolution.",
                "From the perspective of hybrid control theoretic techniques [8], the different video compression schemes and frame rate form the discrete variables of application execution and picture resolution forms the continuous variables.",
                "Application adapters modify application execution according to parameters recommended by the controller and ensures that the operation of the application is in accordance with the recommended parameters.",
                "In the current mplementation of HyARM, the application adapter modifies the input parameters to the application that affect application QoS and resource utilization - compression scheme, frame rate, and picture resolution.",
                "In our future implementations, we plan to use <br>resource reservation mechanism</br>s such as Differentiated Service [7, 3] and Class-based Kernel Resource Management [4] to provision/reserve network and CPU resources.",
                "In our multimedia system, the application adapter ensures that the video is encoded at the recommended frame rate and resolution using the specified compression scheme. 3.2 Applying HyARM to the Multimedia System Case Study HyARM is built atop TAO [13], a widely used open-source implementation of Real-time CORBA [12].",
                "HyARM can be applied to ensure efficient, predictable and adaptive resource management of any DRE system where resource availability and requirements are subject to dynamic change.",
                "Figure 3 shows the interaction of various parts of the DRE multimedia system developed with HyARM, TAO, and TAOs A/V Streaming Service.",
                "TAOs A/V Streaming service is an implementation of the CORBA A/V Streaming Service specification.",
                "TAOs A/V Streaming Service is a QoS-enabled video distribution service that can transfer video in real-time to one or more receivers.",
                "We use the A/V Streaming Service to transmit the video from the UAVs to the end receivers via the base station.",
                "Three entities of Receiver UAV TAO Resource Utilization HyARM Central Controller A/V Streaming Service : Sender MPEG1 MPEG4 Real Video HyARM Resource Monitor A/V Streaming Service : Receiver Compressed Video Compressed Video Application HyARM Application Adapter Remote Object Call Control Inputs Resource Utilization Resource Utilization / Control Inputs Control Inputs Legend Figure 3: Developing the DRE Multimedia System with HyARM HyARM, namely the resource monitors, central controller, and application adapters are built as CORBA servants, so they can be distributed throughout a DRE system.",
                "Resource monitors are remote CORBA objects that update the central controller periodically with the current resource utilization.",
                "Application adapters are collocated with applications since the two interact closely.",
                "As shown in Figure 3, UAVs compress the data using various compression schemes, such as MPEG1, MPEG4, and Real Video, and uses TAOs A/V streaming service to transmit the video to end receivers.",
                "HyARMs resource monitors continuously observe the system resource utilization and notify the central controller with the current utilization. 3 The interaction between the controller and the resource monitors uses the Observer pattern [5].",
                "When the controller receives resource utilization updates from monitors, it computes the necessary modifications to application(s) parameters and notifies application adapter(s) via a remote operation call.",
                "Application adapter(s), that are collocated with the application, modify the input parameters to the application - in our case video encoder - to modify the application resource utilization and QoS. 3 The base station is not included in the figure since it only retransmits the video received from UAVs to end receivers.",
                "Article 7 4.",
                "PERFORMANCE RESULTS AND ANALYSIS This section first describes the testbed that provides the infrastructure for our DRE multimedia system, which was used to evaluate the performance of HyARM.",
                "We then describe our experiments and analyze the results obtained to empirically evaluate how HyARM behaves during underand over-utilization of system resources. 4.1 Overview of the Hardware and Software Testbed Our experiments were performed on the Emulab testbed at University of Utah.",
                "The hardware configuration consists of two nodes acting as UAVs, one acting as base station, and one as end receiver.",
                "Video from the two UAVs were transmitted to a base station via a LAN configured with the following properties: average packet loss ratio of 0.3 and bandwidth 1 Mbps.",
                "The network bandwidth was chosen to be 1 Mbps since each UAV in the DRE multimedia system is allocated 250 Kbps.",
                "These parameters were chosen to emulate an unreliable wireless network with limited bandwidth between the UAVs and the base station.",
                "From the base station, the video was retransmitted to the end receiver via a reliable wireline link of 10 Mbps bandwidth with no packet loss.",
                "The hardware configuration of all the nodes was chosen as follows: 600 MHz Intel Pentium III processor, 256 MB physical memory, 4 Intel EtherExpress Pro 10/100 Mbps Ethernet ports, and 13 GB hard drive.",
                "A real-time version of Linux - TimeSys Linux/NET 3.1.214 based on RedHat Linux 9was used as the operating system for all nodes.",
                "The following software packages were also used for our experiments: (1) Ffmpeg 0.4.9-pre1, which is an open-source library (http: //www.ffmpeg.sourceforge.net/download.php) that compresses video into MPEG-2, MPEG-4, Real Video, and many other video formats. (2) Iftop 0.16, which is an opensource library (http://www.ex-parrot.com/∼pdw/iftop/) we used for monitoring network activity and bandwidth utilization. (3) ACE 5.4.3 + TAO 1.4.3, which is an opensource (http://www.dre.vanderbilt.edu/TAO) implementation of the Real-time CORBA [12] specification upon which HyARM is built.",
                "TAO provides the CORBA Audio/Video (A/V) Streaming Service that we use to transmit the video from the UAVs to end receivers via the base station. 4.2 Experiment Configuration Our experiment consisted of two (emulated) UAVs that simultaneously send video to the base station using the experimentation setup described in Section 4.1.",
                "At the base station, video was retransmitted to the end receivers (without any modifications), where it was stored to a file.",
                "Each UAV hosted two applications, one QoS-enabled application (emergency response), and one best-effort application (surveillance).",
                "Within each UAV, computational power is shared between the applications, while the network bandwidth is shared among all applications.",
                "To evaluate the QoS provided by HyARM, we monitored CPU utilization at the two UAVs, and network bandwidth utilization between the UAV and the base station.",
                "CPU resource utilization was not monitored at the base station and the end receiver since they performed no computationallyintensive operations.",
                "The resource utilization of the 10 Mpbs physical link between the base station and the end receiver does not affect QoS of applications and is not monitored by HyARM since it is nearly 10 times the 1 MB bandwidth of the LAN between the UAVs and the base station.",
                "The experiment also monitors properties of the video that affect the QoS of the applications, such as latency, jitter, frame rate, and resolution.",
                "The set point on resource utilization for each resource was specified at 0.69, which is the upper bound typically recommended by scheduling techniques, such as rate monotonic algorithm [9].",
                "Since studies [6] have shown that human eyes can perceive delays more than 200ms, we use this as the upper bound on jitter of the received video.",
                "QoS requirements for each class of application is specified during system initialization and is shown in Table 1. 4.3 Empirical Results and Analysis This section presents the results obtained from running the experiment described in Section 4.2 on our DRE multimedia system testbed.",
                "We used system resource utilization as a metric to evaluate the adaptive resource management capabilities of HyARM under varying input work loads.",
                "We also used application QoS as a metric to evaluate HyARMs capabilities to support end-to-end QoS requirements of the various classes of applications in the DRE multimedia system.",
                "We analyze these results to explain the significant differences in system performance and application QoS.",
                "Comparison of system performance is decomposed into comparison of resource utilization and application QoS.",
                "For system resource utilization, we compare (1) network bandwidth utilization of the local area network and (2) CPU utilization at the two UAV nodes.",
                "For application QoS, we compare mean values of video parameters, including (1) picture resolution, (2) frame rate, (3) latency, and (4) jitter.",
                "Comparison of resource utilization.",
                "Over-utilization of system resources in DRE systems can yield an unstable system.",
                "In contrast, under-utilization of system resources increases system cost.",
                "Figure 4 and Figure 5 compare the system resource utilization with and without HyARM.",
                "Figure 4 shows that HyARM maintains system utilization close to the desired utilization set point during fluctuation in input work load by transmitting video of higher (or lower) QoS for QoS-enabled (or best-effort) class of applications during over (or under) utilization of system resources.",
                "Figure 5 shows that without HyARM, network utilization was as high as 0.9 during increase in workload conditions, which is greater than the utilization set point of 0.7 by 0.2.",
                "As a result of over-utilization of resources, QoS of the received video, such as average latency and jitter, was affected significantly.",
                "Without HyARM, system resources were either under-utilized or over-utilized, both of which are undesirable.",
                "In contrast, with HyARM, system resource utilization is always close to the desired set point, even during fluctuations in application workload.",
                "During sudden fluctuation in application workload, system conditions may be temporarily undesirable, but are restored to the desired condition within several sampling periods.",
                "Temporary over-utilization of resources is permissible in our multimedia system since the quality of the video may be degraded for a short period of time, though application QoS will be degraded significantly if poor quality video is transmitted for a longer period of time.",
                "Comparison of application QoS.",
                "Figures 6, Figure 7, and Table 2 compare latency, jitter, resolution, and frameArticle 7 Class Resolution Frame Rate Latency (msec ) Jitter (msec) QoS Enabled 1024 x 768 25 200 200 Best-effort 320 x 240 15 300 250 Table 1: Application QoS Requirements Figure 4: Resource utilization with HyARM Figure 5: Resource utilization without HyARM rate of the received video, respectively.",
                "Table 2 shows that HyARM increases the resolution and frame video of QoSenabled applications, but decreases the resolution and frame rate of best effort applications.",
                "During over utilization of system resources, resolution and frame rate of lower priority applications are reduced to adapt to fluctuations in application workload and to maintain the utilization of resources at the specified set point.",
                "It can be seen from Figure 6 and Figure 7 that HyARM reduces the latency and jitter of the received video significantly.",
                "These figures show that the QoS of QoS-enabled applications is greatly improved by HyARM.",
                "Although application parameters, such as frame rate and resolutions, which affect the soft QoS requirements of best-effort applications may be compromised, the hard QoS requirements, such as latency and jitter, of all applications are met.",
                "HyARM responds to fluctuation in resource availability and/or demand by constant monitoring of resource utilization.",
                "As shown in Figure 4, when resources utilization increases above the desired set point, HyARM lowers the utilization by reducing the QoS of best-effort applications.",
                "This adaptation ensures that enough resources are available for QoS-enabled applications to meet their QoS needs.",
                "Figures 6 and 7 show that the values of latency and jitter of the received video of the system with HyARM are nearly half of the corresponding value of the system without HyARM.",
                "With HyARM, values of these parameters are well below the specified bounds, whereas without HyARM, these value are significantly above the specified bounds due to overutilization of the network bandwidth, which leads to network congestion and results in packet loss.",
                "HyARM avoids this by reducing video parameters such as resolution, frame-rate, and/or modifying the compression scheme used to compress the video.",
                "Our conclusions from analyzing the results described above are that applying adaptive middleware via hybrid control to DRE system helps to (1) improve application QoS, (2) increase system resource utilization, and (3) provide better predictability (lower latency and inter-frame delay) to QoSenabled applications.",
                "These improvements are achieved largely due to monitoring of system resource utilization, efficient system workload management, and adaptive resource provisioning by means of HyARMs network/CPU resource monitors, application adapter, and central controller, respectively. 5.",
                "RELATED WORK A number of control theoretic approaches have been applied to DRE systems recently.",
                "These techniques aid in overcoming limitations with traditional scheduling approaches that handle dynamic changes in resource availability poorly and result in a rigidly scheduled system that adapts poorly to change.",
                "A survey of these techniques is presented in [1].",
                "One such approach is feedback control scheduling (FCS) [2, 11].",
                "FCS algorithms dynamically adjust resource allocation by means of software feedback control loops.",
                "FCS algorithms are modeled and designed using rigorous controltheoretic methodologies.",
                "These algorithms provide robust and analytical performance assurances despite uncertainties in resource availability and/or demand.",
                "Although existing FCS algorithms have shown promise, these algorithms often assume that the system has continuous control variable(s) that can continuously be adjusted.",
                "While this assumption holds for certain classes of systems, there are many classes of DRE systems, such as avionics and total-ship computing environments that only support a finite a priori set of discrete configurations.",
                "The control variables in such systems are therefore intrinsically discrete.",
                "HyARM handles both continuous control variables, such as picture resolution, and discrete control variable, such as discrete set of frame rates.",
                "HyARM can therefore be applied to system that support continuous and/or discrete set of control variables.",
                "The DRE multimedia system as described in Section 2 is an example DRE system that offers both continuous (picture resolution) and discrete set (frame-rate) of control variables.",
                "These variables are modified by HyARM to achieve efficient resource utilization and improved application QoS. 6.",
                "CONCLUDING REMARKS Article 7 Figure 6: Comparison of Video Latency Figure 7: Comparison of Video Jitter Source Picture Size / Frame Rate With HyARM Without HyARM UAV1 QoS Enabled Application 1122 X 1496 / 25 960 X 720 / 20 UAV1 Best-effort Application 288 X 384 / 15 640 X 480 / 20 UAV2 QoS Enabled Application 1126 X 1496 / 25 960 X 720 / 20 UAV2 Best-effort Application 288 X 384 / 15 640 X 480 / 20 Table 2: Comparison of Video Quality Many distributed real-time and embedded (DRE) systems demand end-to-end quality of service (QoS) enforcement from their underlying platforms to operate correctly.",
                "These systems increasingly run in open environments, where resource availability is subject to dynamic change.",
                "To meet end-to-end QoS in dynamic environments, DRE systems can benefit from an adaptive middleware that monitors system resources, performs efficient application workload management, and enables efficient resource provisioning for executing applications.",
                "This paper described HyARM, an adaptive middleware, that provides effective resource management to DRE systems.",
                "HyARM employs hybrid control techniques to provide the adaptive middleware capabilities, such as resource monitoring and application adaptation that are key to providing the dynamic resource management capabilities for open DRE systems.",
                "We employed HyARM to a representative DRE multimedia system that is implemented using Real-time CORBA and CORBA A/V Streaming Service.",
                "We evaluated the performance of HyARM in a system composed of three distributed resources and two classes of applications with two applications each.",
                "Our empirical results indicate that HyARM ensures (1) efficient resource utilization by maintaining the resource utilization of system resources within the specified utilization bounds, (2) QoS requirements of QoS-enabled applications are met at all times.",
                "Overall, HyARM ensures efficient, predictable, and adaptive resource management for DRE systems. 7.",
                "REFERENCES [1] T. F. Abdelzaher, J. Stankovic, C. Lu, R. Zhang, and Y. Lu.",
                "Feddback Performance Control in Software Services.",
                "IEEE: Control Systems, 23(3), June 2003. [2] L. Abeni, L. Palopoli, G. Lipari, and J. Walpole.",
                "Analysis of a reservation-based feedback scheduler.",
                "In IEEE Real-Time Systems Symposium, Dec. 2002. [3] S. Blake, D. Black, M. Carlson, E. Davies, Z. Wang, and W. Weiss.",
                "An architecture for differentiated services.",
                "Network Information Center RFC 2475, Dec. 1998. [4] H. Franke, S. Nagar, C. Seetharaman, and V. Kashyap.",
                "Enabling Autonomic Workload Management in Linux.",
                "In Proceedings of the International Conference on Autonomic Computing (ICAC), New York, New York, May 2004.",
                "IEEE. [5] E. Gamma, R. Helm, R. Johnson, and J. Vlissides.",
                "Design Patterns: Elements of Reusable Object-Oriented Software.",
                "Addison-Wesley, Reading, MA, 1995. [6] G. Ghinea and J. P. Thomas.",
                "Qos impact on user perception and understanding of multimedia video clips.",
                "In MULTIMEDIA 98: Proceedings of the sixth ACM international conference on Multimedia, pages 49-54, Bristol, United Kingdom, 1998.",
                "ACM Press. [7] Internet Engineering Task Force.",
                "Differentiated Services Working Group (diffserv) Charter. www.ietf.org/html.charters/diffserv-charter.html, 2000. [8] X. Koutsoukos, R. Tekumalla, B. Natarajan, and C. Lu.",
                "Hybrid Supervisory Control of Real-Time Systems.",
                "In 11th IEEE Real-Time and Embedded Technology and Applications Symposium, San Francisco, California, Mar. 2005. [9] J. Lehoczky, L. Sha, and Y. Ding.",
                "The Rate Monotonic Scheduling Algorithm: Exact Characterization and Average Case Behavior.",
                "In Proceedings of the 10th IEEE Real-Time Systems Symposium (RTSS 1989), pages 166-171.",
                "IEEE Computer Society Press, 1989. [10] J. Loyall, J. Gossett, C. Gill, R. Schantz, J. Zinky, P. Pal, R. Shapiro, C. Rodrigues, M. Atighetchi, and D. Karr.",
                "Comparing and Contrasting Adaptive Middleware Support in Wide-Area and Embedded Distributed Object Applications.",
                "In Proceedings of the 21st International Conference on Distributed Computing Systems (ICDCS-21), pages 625-634.",
                "IEEE, Apr. 2001. [11] C. Lu, J.",
                "A. Stankovic, G. Tao, and S. H. Son.",
                "Feedback Control Real-Time Scheduling: Framework, Modeling, and Algorithms.",
                "Real-Time Systems Journal, 23(1/2):85-126, July 2002. [12] Object Management Group.",
                "Real-time CORBA Specification, OMG Document formal/02-08-02 edition, Aug. 2002. [13] D. C. Schmidt, D. L. Levine, and S. Mungee.",
                "The Design and Performance of Real-Time Object Request Brokers.",
                "Computer Communications, 21(4):294-324, Apr. 1998. [14] Thomas Sikora.",
                "Trends and Perspectives in Image and Video Coding.",
                "In Proceedings of the IEEE, Jan. 2005. [15] X. Wang, H.-M. Huang, V. Subramonian, C. Lu, and C. Gill.",
                "CAMRIT: Control-based Adaptive Middleware for Real-time Image Transmission.",
                "In Proc. of the 10th IEEE Real-Time and Embedded Tech. and Applications Symp. (RTAS), Toronto, Canada, May 2004.",
                "Article 7"
            ],
            "original_annotated_samples": [
                "In our future implementations, we plan to use <br>resource reservation mechanism</br>s such as Differentiated Service [7, 3] and Class-based Kernel Resource Management [4] to provision/reserve network and CPU resources."
            ],
            "translated_annotated_samples": [
                "En nuestras futuras implementaciones, planeamos utilizar <br>mecanismos de reserva de recursos</br> como Differentiated Service [7, 3] y Class-based Kernel Resource Management [4] para aprovisionar/reservar recursos de red y CPU."
            ],
            "translated_text": "Evaluando la Gestión de Recursos Adaptativa para Sistemas Empotrados Distribuidos en Tiempo Real de Nishanth Shankaran, Xenofon Koutsoukos, Douglas C. Schmidt y Aniruddha Gokhale, Dept. de EECS, Universidad de Vanderbilt, Nashville RESUMEN Un problema desafiante enfrentado por investigadores y desarrolladores de sistemas distribuidos en tiempo real y embebidos (DRE) es idear e implementar estrategias efectivas de gestión adaptativa de recursos que puedan cumplir con los requisitos de calidad de servicio (QoS) de extremo a extremo en condiciones operativas variables. Este artículo presenta dos contribuciones a la investigación en gestión de recursos adaptativa para sistemas DRE. Primero, describimos la estructura y funcionalidad del Middleware de Gestión de Recursos Adaptativos Híbridos (HyARM), que proporciona gestión de recursos adaptativa utilizando técnicas de control híbridas para adaptarse a las fluctuaciones de carga de trabajo y disponibilidad de recursos. Segundo, evaluamos el comportamiento adaptativo de HyARM a través de experimentos en un sistema multimedia DRE que distribuye video en tiempo real. Nuestros resultados indican que HyARM produce un rendimiento del sistema predecible, estable y alto, incluso ante cargas de trabajo y disponibilidad de recursos fluctuantes. Categorías y Descriptores de Asignaturas C.2.4 [Sistemas Distribuidos]: Aplicaciones Distribuidas; D.4.7 [Organización y Diseño]: Sistemas en Tiempo Real y Sistemas Embebidos 1. INTRODUCCIÓN Lograr la calidad de servicio (QoS) en tiempo real de extremo a extremo es particularmente importante para sistemas distribuidos en tiempo real y embebidos (DRE) abiertos que enfrentan limitaciones de recursos, como potencia de cómputo limitada y ancho de banda de red. La sobreutilización de estos recursos del sistema puede generar un comportamiento impredecible e inestable, mientras que la subutilización puede resultar en un costo excesivo del sistema. Un enfoque prometedor para cumplir de manera efectiva con estos requisitos de calidad de servicio de extremo a extremo, por lo tanto, es desarrollar y aplicar middleware adaptativo [10, 15], que es un software cuyas propiedades funcionales y relacionadas con la calidad de servicio pueden ser modificadas estática o dinámicamente. Las modificaciones estáticas se realizan para reducir la huella, aprovechar las capacidades existentes en plataformas específicas, habilitar la selección funcional y/o minimizar las dependencias de infraestructura de hardware/software. Los objetivos de las modificaciones dinámicas incluyen optimizar las respuestas del sistema a entornos o requisitos cambiantes, como la modificación de interconexiones de componentes, niveles de potencia, disponibilidad de ancho de banda de CPU y red, latencia/jitter y carga de trabajo. En los sistemas DRE abiertos, el middleware adaptativo debe realizar modificaciones de manera confiable, es decir, cumpliendo con los estrictos requisitos de calidad de servicio de extremo a extremo, lo que requiere la especificación y aplicación de límites superiores e inferiores en la utilización de recursos del sistema para garantizar un uso efectivo de los recursos del sistema. Para cumplir con estos requisitos, hemos desarrollado el Middleware de Gestión de Recursos Híbrido Adaptativo (HyARM), que es un middleware de gestión de recursos distribuido de código abierto. HyARM se basa en técnicas híbridas de control teórico, las cuales proporcionan un marco teórico para diseñar el control de sistemas complejos con dinámicas tanto continuas como discretas. En nuestro estudio de caso, que implica un sistema distribuido de distribución de video en tiempo real, la tarea de gestión de recursos adaptativa consiste en controlar la utilización de los diferentes recursos, cuyas utilizaciones están descritas por variables continuas. Logramos esto adaptando la resolución del video transmitido, que se modela como una variable continua, y cambiando la velocidad de cuadros y la compresión, que se modelan mediante acciones discretas. Hemos implementado HyARM sobre el ORB ACE (TAO) [13], que es una implementación de la especificación CORBA en tiempo real [12]. Nuestros resultados muestran que (1) HyARM garantiza una utilización efectiva de los recursos del sistema y (2) se cumplen los requisitos de calidad de servicio de extremo a extremo de las aplicaciones de mayor prioridad, incluso ante fluctuaciones en la carga de trabajo. El resto del documento está organizado de la siguiente manera: la Sección 2 describe la arquitectura, funcionalidad y modelo de utilización de recursos de nuestro estudio de caso del sistema multimedia DRE; la Sección 3 explica la estructura y funcionalidad de HyARM; la Sección 4 evalúa el comportamiento adaptativo de HyARM a través de experimentos en nuestro estudio de caso del sistema multimedia; la Sección 5 compara nuestra investigación sobre HyARM con trabajos relacionados; y la Sección 6 presenta observaciones finales. El código y ejemplos de HyARM están disponibles en www.dre.vanderbilt.edu/∼nshankar/HyARM/. Artículo 7 2. ESTUDIO DE CASO: SISTEMA MULTIMEDIA DRE Esta sección describe la arquitectura y los requisitos de QoS de nuestro sistema multimedia DRE. 2.1 Arquitectura del Sistema Multimedia Enlace Inalámbrico Enlace Inalámbrico Enlace Inalámbrico ` ` ` Enlace Físico Enlace Físico Enlace Físico Estación Base Extremo Receptor Extremo Receptor Extremo Receptor` Enlace Físico Extremo Receptor Cámara UAV Codificador de Video Cámara Codificador de Video Cámara Codificador de Video Cámara UAV Codificador de Video Cámara Codificador de Video Cámara Codificador de Video Cámara UAV Codificador de Video Cámara Codificador de Video Cámara Codificador de Video Figura 1: Arquitectura del Sistema Multimedia DRE La arquitectura de nuestro sistema multimedia DRE se muestra en la Figura 1 y consta de las siguientes entidades: (1) Fuente de datos (captura de video por UAV), donde el video es capturado (relacionado con el tema de interés) por la(s) cámara(s) en cada UAV, seguido por la codificación del video crudo utilizando un esquema de codificación específico y transmitiendo el video a la siguiente etapa en la cadena de procesamiento. (2) Distribuidor de datos (estación base), donde el video es procesado para eliminar ruido, seguido por la retransmisión del video procesado a la siguiente etapa en la cadena de procesamiento. (3) Destinos (centro de comando y control), donde el video recibido es nuevamente procesado para eliminar ruido, luego decodificado y finalmente renderizado al usuario final a través de pantallas gráficas. Se han logrado mejoras significativas en las técnicas de codificación/decodificación y compresión (des) de video como resultado de los avances recientes en las técnicas de codificación y compresión de video [14]. Los esquemas comunes de compresión de video son MPEG1, MPEG-2, Real Video y MPEG-4. Cada esquema de compresión se caracteriza por sus requisitos de recursos, por ejemplo, la potencia computacional para (des)comprimir la señal de video y el ancho de banda de red necesario para transmitir la señal de video comprimida. Las propiedades del video comprimido, como la resolución y la velocidad de fotogramas, determinan tanto la calidad como los requisitos de recursos del video. Nuestro estudio de caso del sistema multimedia tiene los siguientes requisitos de calidad de servicio (QoS) en tiempo real de extremo a extremo: (1) latencia, (2) retardo entre cuadros (también conocido como jitter), (3) frecuencia de cuadros y (4) resolución de imagen. Estos requisitos de calidad de servicio (QoS) pueden clasificarse como duros o blandos. Los requisitos de QoS estrictos deben ser cumplidos por el sistema subyacente en todo momento, mientras que los requisitos de QoS flexibles pueden ser ocasionalmente incumplidos. Para nuestro estudio de caso, tratamos los requisitos de QoS como la latencia y la variabilidad de retardo como requisitos de QoS más estrictos y nos esforzamos por cumplir con estos requisitos en todo momento. Por el contrario, tratamos los requisitos de QoS como la tasa de cuadros de video y la resolución de imagen como requisitos de QoS más flexibles y modificamos estas propiedades de video de manera adaptativa para manejar los cambios dinámicos en la disponibilidad de recursos de manera efectiva. Aunque a menudo se presentan como dos conjuntos de requisitos discretos, en la práctica suelen ser dos extremos de un continuo que va desde más suave a más duro en lugar de dos puntos disjuntos. La potencia informática requerida por las tareas de captura y codificación de video depende de factores dinámicos, como la velocidad del UAV, la velocidad del sujeto (si el sujeto es móvil) y la distancia entre el UAV y el sujeto. La cantidad de ancho de banda de la red inalámbrica disponible para transmitir video capturado por UAVs a estaciones base también depende de la conectividad inalámbrica entre los UAVs y la estación base, que a su vez depende de factores dinámicos como la velocidad de los UAVs y la distancia relativa entre los UAVs y las estaciones base. El ancho de banda del enlace entre la estación base y el receptor final está limitado, pero es más estable que el ancho de banda de la red inalámbrica. Los requisitos de recursos y la disponibilidad de recursos están sujetos a cambios dinámicos. Dos clases de aplicaciones - habilitadas para QoS y de mejor esfuerzo - utilizan la infraestructura del sistema multimedia descrita anteriormente para transmitir video a sus respectivos receptores. Las aplicaciones de clase habilitada para QoS tienen mayor prioridad sobre las aplicaciones de clase de mejor esfuerzo. En nuestro estudio, las aplicaciones de respuesta de emergencia pertenecen a la clase habilitada para la calidad de servicio (QoS), y las aplicaciones de vigilancia pertenecen a la clase de mejor esfuerzo. Por ejemplo, dado que un flujo de datos de una aplicación de respuesta de emergencia es de mayor importancia que un flujo de video de una aplicación de vigilancia, recibe más recursos de extremo a extremo. Dado que la disponibilidad de recursos afecta significativamente la calidad de servicio, utilizamos la utilización actual de recursos como indicador principal del rendimiento del sistema. Nos referimos al nivel actual de utilización de recursos del sistema como la condición del sistema. Basándonos en esta definición, podemos clasificar las condiciones del sistema como estando subutilizadas, sobreutilizadas o utilizadas de manera efectiva. La subutilización de los recursos del sistema ocurre cuando la utilización actual de los recursos es menor que el límite inferior deseado de utilización de recursos. En este sistema, los recursos residuales del sistema (es decir, ancho de banda de red y potencia computacional) están disponibles en grandes cantidades después de cumplir con los requisitos de calidad de servicio de extremo a extremo de las aplicaciones. Estos recursos residuales se pueden utilizar para aumentar la calidad de servicio de las aplicaciones. Por ejemplo, la CPU residual y el ancho de banda de red pueden ser utilizados para entregar videos de mejor calidad (por ejemplo, con mayor resolución y mayor velocidad de cuadros) a los receptores finales. La sobreutilización de los recursos del sistema ocurre cuando la utilización actual de recursos es mayor que el límite superior deseado de utilización de recursos. Esta condición puede surgir por la pérdida de recursos - ancho de banda de red y/o potencia de cómputo en la estación base, receptor final o en el UAV - o puede ser debido a un aumento en las demandas de recursos por parte de las aplicaciones. La sobreutilización es generalmente indeseable ya que la calidad del video recibido (como la resolución y la velocidad de cuadros) y las propiedades de puntualidad (como la latencia y la fluctuación) se degradan y pueden resultar en un sistema inestable (y por lo tanto ineficaz). La utilización efectiva de recursos es la condición deseada del sistema, ya que garantiza que se cumplan los requisitos de calidad de servicio de extremo a extremo del sistema multimedia basado en UAV y que la utilización de los recursos del sistema, es decir, el ancho de banda de la red y la potencia computacional, se encuentren dentro de sus límites de utilización deseados. El artículo 7, sección 3 describe las técnicas que aplicamos para lograr una utilización efectiva, incluso ante la disponibilidad y/o demanda fluctuante de recursos. DESCRIPCIÓN DE HYARM Esta sección describe la arquitectura del Middleware de Gestión de Recursos Adaptativos Híbrido (HyARM). HyARM garantiza un rendimiento eficiente y predecible del sistema al proporcionar gestión adaptativa de recursos, que incluye la monitorización de los recursos del sistema y la imposición de límites en la utilización de recursos de las aplicaciones. 3.1 Estructura y Funcionalidad de HyARM Leyenda de Utilización de Recursos Asignación de Recursos Parámetros de Aplicación Figura 2: Arquitectura de HyARM HyARM está compuesto por tres tipos de entidades mostradas en la Figura 2 y descritas a continuación: Los monitores de recursos observan la utilización general de recursos para cada tipo de recurso y la utilización de recursos por aplicación. En nuestro sistema multimedia, hay monitores de recursos para la utilización de la CPU y el ancho de banda de la red. Los monitores de la CPU observan la utilización de recursos de la CPU de los UAV, la estación base y los receptores finales. Los monitores de ancho de banda de red observan la utilización de recursos de red de (1) el enlace de red inalámbrica entre los UAV y la estación base y (2) el enlace de red cableada entre la estación base y los receptores finales. El controlador central mantiene la utilización de recursos del sistema por debajo de un límite deseado mediante (1) el procesamiento de actualizaciones periódicas que recibe de los monitores de recursos y (2) modificando la ejecución de las aplicaciones en consecuencia, por ejemplo, utilizando diferentes algoritmos de ejecución u operando la aplicación con mayor/menor calidad de servicio (QoS). Este proceso de adaptación garantiza que los recursos del sistema se utilicen de manera eficiente y se cumplan los requisitos de calidad de servicio de la aplicación de extremo a extremo. En nuestro sistema multimedia, el controlador HyARM determina el valor de parámetros de la aplicación como (1) esquemas de compresión de video, como Real Video y MPEG-4, y/o (2) velocidad de cuadros, y (3) resolución de imagen. Desde la perspectiva de las técnicas híbridas de control teórico [8], los diferentes esquemas de compresión de video y la velocidad de cuadros forman las variables discretas de la ejecución de la aplicación, mientras que la resolución de imagen forma las variables continuas. Los adaptadores de aplicación modifican la ejecución de la aplicación de acuerdo con los parámetros recomendados por el controlador y garantizan que el funcionamiento de la aplicación esté de acuerdo con los parámetros recomendados. En la implementación actual de HyARM, el adaptador de la aplicación modifica los parámetros de entrada a la aplicación que afectan la calidad de servicio (QoS) de la aplicación y la utilización de recursos, como el esquema de compresión, la velocidad de fotogramas y la resolución de la imagen. En nuestras futuras implementaciones, planeamos utilizar <br>mecanismos de reserva de recursos</br> como Differentiated Service [7, 3] y Class-based Kernel Resource Management [4] para aprovisionar/reservar recursos de red y CPU. En nuestro sistema multimedia, el adaptador de la aplicación se asegura de que el video se codifique a la velocidad de cuadros y resolución recomendadas utilizando el esquema de compresión especificado. 3.2 Aplicando HyARM al Estudio de Caso del Sistema Multimedia. HyARM se construye sobre TAO [13], una implementación de código abierto ampliamente utilizada de CORBA en tiempo real [12]. HyARM se puede aplicar para garantizar una gestión eficiente, predecible y adaptable de recursos en cualquier sistema DRE donde la disponibilidad y los requisitos de recursos están sujetos a cambios dinámicos. La Figura 3 muestra la interacción de varias partes del sistema multimedia DRE desarrollado con HyARM, TAO y el Servicio de Streaming de Audio y Video de TAOs. El servicio de transmisión de audio/vídeo de TAO es una implementación de la especificación del Servicio de Transmisión de Audio/Vídeo de CORBA. El servicio de transmisión de audio y video de TAOs es un servicio de distribución de video habilitado para QoS que puede transferir video en tiempo real a uno o más receptores. Utilizamos el Servicio de Transmisión de Audio y Video para enviar el video desde los VANTs a los receptores finales a través de la estación base. Tres entidades del sistema multimedia DRE con HyARM, a saber, los monitores de recursos, el controlador central y los adaptadores de aplicaciones, están construidos como servidores CORBA, por lo que pueden distribuirse en todo el sistema DRE. Los monitores de recursos son objetos CORBA remotos que actualizan periódicamente al controlador central con la utilización actual de recursos. Los adaptadores de aplicaciones se ubican junto a las aplicaciones ya que ambas interactúan estrechamente. Como se muestra en la Figura 3, los UAV comprimen los datos utilizando varios esquemas de compresión, como MPEG1, MPEG4 y Real Video, y utilizan el servicio de transmisión de audio/vídeo de TAOs para enviar el video a los receptores finales. Los monitores de recursos de HyARMs observan continuamente la utilización de recursos del sistema y notifican al controlador central con la utilización actual. La interacción entre el controlador y los monitores de recursos utiliza el patrón Observer. Cuando el controlador recibe actualizaciones de utilización de recursos de los monitores, calcula las modificaciones necesarias a los parámetros de la(s) aplicación(es) y notifica al adaptador de la aplicación mediante una llamada de operación remota. Los adaptadores de aplicación, que están ubicados junto a la aplicación, modifican los parámetros de entrada de la aplicación, en nuestro caso el codificador de video, para modificar la utilización de recursos de la aplicación y la calidad de servicio. La estación base no está incluida en la figura ya que solo retransmite el video recibido de los UAV a los receptores finales. Artículo 7 4. RESULTADOS DE RENDIMIENTO Y ANÁLISIS Esta sección describe primero el banco de pruebas que proporciona la infraestructura para nuestro sistema multimedia DRE, que se utilizó para evaluar el rendimiento de HyARM. Luego describimos nuestros experimentos y analizamos los resultados obtenidos para evaluar empíricamente cómo se comporta HyARM durante la subutilización y sobreutilización de los recursos del sistema. 4.1 Descripción general del banco de pruebas de hardware y software Nuestros experimentos se realizaron en el banco de pruebas Emulab en la Universidad de Utah. La configuración de hardware consiste en dos nodos actuando como UAVs, uno actuando como estación base y otro como receptor final. El video de los dos UAV fue transmitido a una estación base a través de una LAN configurada con las siguientes propiedades: una relación promedio de pérdida de paquetes de 0.3 y un ancho de banda de 1 Mbps. El ancho de banda de la red se eligió para ser de 1 Mbps ya que a cada UAV en el sistema multimedia DRE se le asignan 250 Kbps. Estos parámetros fueron elegidos para emular una red inalámbrica poco confiable con ancho de banda limitado entre los UAVs y la estación base. Desde la estación base, el video fue retransmitido al receptor final a través de un enlace por cable confiable de 10 Mbps de ancho de banda sin pérdida de paquetes. La configuración de hardware de todos los nodos fue elegida de la siguiente manera: procesador Intel Pentium III de 600 MHz, 256 MB de memoria física, 4 puertos Ethernet Intel EtherExpress Pro de 10/100 Mbps y disco duro de 13 GB. Se utilizó una versión en tiempo real de Linux - TimeSys Linux/NET 3.1.214 basada en RedHat Linux 9 como sistema operativo para todos los nodos. Los siguientes paquetes de software también fueron utilizados para nuestros experimentos: (1) Ffmpeg 0.4.9-pre1, que es una biblioteca de código abierto (http://www.ffmpeg.sourceforge.net/download.php) que comprime video en formatos MPEG-2, MPEG-4, Real Video, y muchos otros formatos de video. (2) Iftop 0.16, que es una biblioteca de código abierto (http://www.ex-parrot.com/∼pdw/iftop/) que utilizamos para monitorear la actividad de red y la utilización del ancho de banda. (3) ACE 5.4.3 + TAO 1.4.3, que es una implementación de código abierto (http://www.dre.vanderbilt.edu/TAO) de la especificación CORBA en tiempo real [12] sobre la cual se construye HyARM. TAO proporciona el Servicio de Transmisión de Audio/Video (A/V) CORBA que utilizamos para transmitir el video desde los UAVs a los receptores finales a través de la estación base. Configuración del experimento Nuestro experimento consistió en dos UAVs (emulados) que enviaron video simultáneamente a la estación base utilizando la configuración experimental descrita en la Sección 4.1. En la estación base, el video fue retransmitido a los receptores finales (sin ninguna modificación), donde fue almacenado en un archivo. Cada UAV alojaba dos aplicaciones, una aplicación habilitada para QoS (respuesta de emergencia) y una aplicación de mejor esfuerzo (vigilancia). Dentro de cada UAV, el poder computacional se comparte entre las aplicaciones, mientras que el ancho de banda de la red se comparte entre todas las aplicaciones. Para evaluar la calidad de servicio proporcionada por HyARM, monitoreamos la utilización de la CPU en los dos UAV y la utilización del ancho de banda de la red entre el UAV y la estación base. La utilización de recursos de la CPU no se monitoreó en la estación base y en el receptor final, ya que no realizaron operaciones computacionalmente intensivas. La utilización de recursos del enlace físico de 10 Mbps entre la estación base y el receptor final no afecta la calidad de servicio de las aplicaciones y no es monitoreada por HyARM, ya que es casi 10 veces el ancho de banda de 1 MB de la LAN entre los UAV y la estación base. El experimento también monitorea propiedades del video que afectan la calidad de servicio de las aplicaciones, como la latencia, la variabilidad de retardo, la tasa de cuadros y la resolución. El punto de ajuste en la utilización de recursos para cada recurso se especificó en 0.69, que es el límite superior típicamente recomendado por técnicas de programación, como el algoritmo monótono de tasa [9]. Dado que los estudios [6] han demostrado que los ojos humanos pueden percibir retrasos de más de 200 ms, utilizamos esto como límite superior de la variabilidad en el video recibido. Los requisitos de QoS para cada clase de aplicación se especifican durante la inicialización del sistema y se muestran en la Tabla 1. 4.3 Resultados empíricos y análisis Esta sección presenta los resultados obtenidos al ejecutar el experimento descrito en la Sección 4.2 en nuestro banco de pruebas del sistema multimedia DRE. Utilizamos la utilización de recursos del sistema como métrica para evaluar las capacidades de gestión de recursos adaptativos de HyARM bajo cargas de trabajo de entrada variables. También utilizamos la calidad de servicio de la aplicación como métrica para evaluar las capacidades de HyARMs para satisfacer los requisitos de calidad de servicio de extremo a extremo de las diferentes clases de aplicaciones en el sistema multimedia DRE. Analizamos estos resultados para explicar las diferencias significativas en el rendimiento del sistema y la calidad de servicio de la aplicación. La comparación del rendimiento del sistema se descompone en la comparación de la utilización de recursos y la calidad de servicio de la aplicación. Para la utilización de recursos del sistema, comparamos (1) la utilización del ancho de banda de la red de área local y (2) la utilización de la CPU en los dos nodos UAV. Para la aplicación de QoS, comparamos los valores medios de los parámetros de video, incluyendo (1) resolución de imagen, (2) velocidad de cuadros, (3) latencia y (4) jitter. Comparación de la utilización de recursos. La sobreutilización de recursos del sistema en sistemas DRE puede generar un sistema inestable. Por el contrario, la subutilización de los recursos del sistema aumenta el costo del sistema. La Figura 4 y la Figura 5 comparan la utilización de recursos del sistema con y sin HyARM. La Figura 4 muestra que HyARM mantiene la utilización del sistema cerca del punto de ajuste de utilización deseado durante la fluctuación en la carga de trabajo de entrada al transmitir video de mayor (o menor) calidad de servicio para la clase de aplicaciones con calidad de servicio habilitada (o de mejor esfuerzo) durante la sobre (o sub) utilización de los recursos del sistema. La Figura 5 muestra que sin HyARM, la utilización de la red alcanzó hasta 0.9 durante el aumento de las condiciones de carga de trabajo, lo cual es mayor que el punto de ajuste de utilización de 0.7 en 0.2. Como resultado de la sobreutilización de recursos, la calidad de servicio (QoS) del video recibido, como la latencia promedio y el jitter, se vio afectada significativamente. Sin HyARM, los recursos del sistema estaban subutilizados o sobreutilizados, ambos de los cuales son indeseables. En contraste, con HyARM, la utilización de recursos del sistema siempre está cerca del punto de ajuste deseado, incluso durante las fluctuaciones en la carga de trabajo de la aplicación. Durante fluctuaciones repentinas en la carga de trabajo de la aplicación, las condiciones del sistema pueden ser temporalmente indeseables, pero se restauran a la condición deseada dentro de varios períodos de muestreo. La sobreutilización temporal de recursos es permisible en nuestro sistema multimedia, ya que la calidad del video puede degradarse por un corto período de tiempo, aunque la calidad del servicio de la aplicación se verá significativamente degradada si se transmite un video de baja calidad durante un período de tiempo más largo. Comparación de la calidad de servicio de la aplicación. Las Figuras 6, 7 y la Tabla 2 comparan la latencia, la variabilidad, la resolución y la velocidad de cuadro del video recibido, respectivamente. La Tabla 2 muestra que HyARM aumenta la resolución y la velocidad de cuadro de video de las aplicaciones habilitadas para QoS, pero disminuye la resolución y la velocidad de cuadro de las aplicaciones de mejor esfuerzo. Durante la sobreutilización de los recursos del sistema, la resolución y la velocidad de cuadros de las aplicaciones de menor prioridad se reducen para adaptarse a las fluctuaciones en la carga de trabajo de la aplicación y mantener la utilización de los recursos en el punto establecido especificado. Se puede observar en la Figura 6 y la Figura 7 que HyARM reduce significativamente la latencia y la variabilidad del video recibido. Estas cifras muestran que la calidad de servicio de las aplicaciones habilitadas para QoS se mejora considerablemente con HyARM. Aunque los parámetros de la aplicación, como la velocidad de cuadros y las resoluciones, que afectan los requisitos de QoS suave de las aplicaciones de mejor esfuerzo pueden verse comprometidos, se cumplen los requisitos de QoS estrictos, como la latencia y la variabilidad, de todas las aplicaciones. HyARM responde a las fluctuaciones en la disponibilidad de recursos y/o la demanda mediante el monitoreo constante de la utilización de recursos. Como se muestra en la Figura 4, cuando la utilización de recursos aumenta por encima del punto de ajuste deseado, HyARM reduce la utilización disminuyendo la calidad de servicio de las aplicaciones de mejor esfuerzo. Esta adaptación garantiza que haya suficientes recursos disponibles para que las aplicaciones habilitadas para QoS cumplan con sus necesidades de QoS. Las figuras 6 y 7 muestran que los valores de latencia y jitter del video recibido del sistema con HyARM son casi la mitad de los valores correspondientes del sistema sin HyARM. Con HyARM, los valores de estos parámetros están muy por debajo de los límites especificados, mientras que sin HyARM, estos valores están significativamente por encima de los límites especificados debido a la sobreutilización del ancho de banda de la red, lo que conduce a la congestión de la red y resulta en la pérdida de paquetes. HyARM evita esto reduciendo parámetros de video como la resolución, la velocidad de cuadros y/o modificando el esquema de compresión utilizado para comprimir el video. Nuestras conclusiones al analizar los resultados descritos anteriormente son que la aplicación de middleware adaptativo a través de control híbrido en sistemas DRE ayuda a (1) mejorar la calidad de servicio de la aplicación, (2) aumentar la utilización de recursos del sistema y (3) proporcionar una mejor previsibilidad (menor latencia y retraso entre fotogramas) a las aplicaciones habilitadas para calidad de servicio. Estas mejoras se logran en gran medida gracias al monitoreo de la utilización de recursos del sistema, la gestión eficiente de la carga de trabajo del sistema y la provisión adaptativa de recursos mediante los monitores de recursos de red/CPU de HyARMs, el adaptador de aplicaciones y el controlador central, respectivamente. TRABAJO RELACIONADO Recientemente se han aplicado varios enfoques teóricos de control a los sistemas DRE. Estas técnicas ayudan a superar las limitaciones de los enfoques de programación tradicionales que manejan mal los cambios dinámicos en la disponibilidad de recursos y resultan en un sistema programado rígidamente que se adapta mal a los cambios. Se presenta una encuesta de estas técnicas en [1]. Un enfoque de este tipo es la programación de control de retroalimentación (FCS) [2, 11]. Los algoritmos de FCS ajustan dinámicamente la asignación de recursos mediante bucles de control de retroalimentación de software. Los algoritmos de FCS se modelan y diseñan utilizando metodologías rigurosas de teoría de control. Estos algoritmos ofrecen garantías de rendimiento robusto y analítico a pesar de las incertidumbres en la disponibilidad de recursos y/o demanda. Aunque los algoritmos de FCS existentes han mostrado promesa, a menudo estos algoritmos asumen que el sistema tiene variable(s) de control continuas que pueden ajustarse continuamente. Si bien esta suposición es válida para ciertas clases de sistemas, existen muchas clases de sistemas DRE, como la aviónica y los entornos informáticos de barcos completos, que solo admiten un conjunto finito a priori de configuraciones discretas. Por lo tanto, las variables de control en tales sistemas son intrínsecamente discretas. HyARM maneja tanto variables de control continuas, como la resolución de la imagen, como variables de control discretas, como un conjunto discreto de velocidades de cuadro. HyARM puede aplicarse a sistemas que admiten un conjunto continuo y/o discreto de variables de control. El sistema multimedia DRE descrito en la Sección 2 es un ejemplo de sistema DRE que ofrece tanto variables de control continuas (resolución de imagen) como un conjunto discreto (velocidad de cuadros). Estas variables son modificadas por HyARM para lograr una utilización eficiente de recursos y una mejora en la calidad de servicio de la aplicación. CONCLUSIONES Artículo 7 Figura 6: Comparación de la latencia del video Figura 7: Comparación de la fluctuación del video Fuente Tamaño de imagen / Velocidad de cuadro Con HyARM Sin HyARM UAV1 Aplicación habilitada para QoS 1122 X 1496 / 25 960 X 720 / 20 UAV1 Aplicación de mejor esfuerzo 288 X 384 / 15 640 X 480 / 20 UAV2 Aplicación habilitada para QoS 1126 X 1496 / 25 960 X 720 / 20 UAV2 Aplicación de mejor esfuerzo 288 X 384 / 15 640 X 480 / 20 Tabla 2: Comparación de la calidad del video Muchos sistemas distribuidos en tiempo real y embebidos (DRE) demandan la aplicación correcta de la calidad de servicio (QoS) de extremo a extremo desde sus plataformas subyacentes para operar correctamente. Estos sistemas cada vez se ejecutan en entornos abiertos, donde la disponibilidad de recursos está sujeta a cambios dinámicos. Para cumplir con la calidad de servicio de extremo a extremo en entornos dinámicos, los sistemas DRE pueden beneficiarse de un middleware adaptativo que monitorea los recursos del sistema, realiza una gestión eficiente de la carga de trabajo de la aplicación y permite una provisión eficiente de recursos para la ejecución de aplicaciones. Este artículo describe HyARM, un middleware adaptativo que proporciona una gestión efectiva de recursos a los sistemas DRE. HyARM emplea técnicas de control híbrido para proporcionar las capacidades de middleware adaptativo, como el monitoreo de recursos y la adaptación de aplicaciones, que son clave para ofrecer las capacidades de gestión de recursos dinámicos para sistemas DRE abiertos. Empleamos HyARM en un sistema multimedia DRE representativo que está implementado utilizando CORBA en tiempo real y el Servicio de Transmisión de Audio/Vídeo de CORBA. Evaluamos el rendimiento de HyARM en un sistema compuesto por tres recursos distribuidos y dos clases de aplicaciones con dos aplicaciones cada una. Nuestros resultados empíricos indican que HyARM garantiza (1) la utilización eficiente de recursos al mantener la utilización de recursos del sistema dentro de los límites de utilización especificados, (2) los requisitos de calidad de servicio de las aplicaciones habilitadas para QoS se cumplen en todo momento. En general, HyARM garantiza una gestión eficiente, predecible y adaptable de recursos para sistemas DRE. REFERENCIAS [1] T. F. Abdelzaher, J. Stankovic, C. Lu, R. Zhang y Y. Lu. Control de rendimiento de retroalimentación en servicios de software. IEEE: Sistemas de Control, 23(3), junio de 2003. [2] L. Abeni, L. Palopoli, G. Lipari y J. Walpole. Análisis de un planificador de retroalimentación basado en reservas. En el Simposio de Sistemas en Tiempo Real de IEEE, Diciembre de 2002. [3] S. Blake, D. Black, M. Carlson, E. Davies, Z. Wang y W. Weiss. Una arquitectura para servicios diferenciados. Centro de Información de la Red RFC 2475, Dic. 1998. [4] H. Franke, S. Nagar, C. Seetharaman y V. Kashyap. Habilitando la Gestión Autonómica de la Carga de Trabajo en Linux. En Actas de la Conferencia Internacional sobre Computación Autónoma (ICAC), Nueva York, Nueva York, mayo de 2004. IEEE. [5] E. Gamma, R. Helm, R. Johnson, y J. Vlissides. Patrones de diseño: Elementos de software orientado a objetos reutilizable. Addison-Wesley, Reading, MA, 1995. [6] G. Ghinea y J. P. Thomas. Impacto de QoS en la percepción y comprensión del usuario de videoclips multimedia. En MULTIMEDIA 98: Actas de la sexta conferencia internacional de ACM sobre Multimedia, páginas 49-54, Bristol, Reino Unido, 1998. ACM Press. [7] Grupo de Trabajo de Ingeniería de Internet. Grupo de Trabajo de Servicios Diferenciados (diffserv) Carta. www.ietf.org/html.charters/diffserv-charter.html, 2000. [8] X. Koutsoukos, R. Tekumalla, B. Natarajan y C. Lu. Control híbrido supervisado de sistemas en tiempo real. En el 11º Simposio de Tecnología y Aplicaciones en Tiempo Real y Sistemas Empotrados de IEEE, San Francisco, California, Mar. 2005. [9] J. Lehoczky, L. Sha y Y. Ding. El algoritmo de programación Rate Monotonic: Caracterización exacta y comportamiento en casos promedio. En Actas del 10º Simposio de Sistemas en Tiempo Real de IEEE (RTSS 1989), páginas 166-171. IEEE Computer Society Press, 1989. [10] J. Loyall, J. Gossett, C. Gill, R. Schantz, J. Zinky, P. Pal, R. Shapiro, C. Rodrigues, M. Atighetchi, and D. Karr.\n\nIEEE Computer Society Press, 1989. [10] J. Loyall, J. Gossett, C. Gill, R. Schantz, J. Zinky, P. Pal, R. Shapiro, C. Rodrigues, M. Atighetchi y D. Karr. Comparando y contrastando el soporte de middleware adaptativo en aplicaciones de objetos distribuidos de área amplia y embebidos. En Actas de la 21ª Conferencia Internacional sobre Sistemas de Computación Distribuida (ICDCS-21), páginas 625-634. IEEE, Abr. 2001. [11] C. Lu, J. A. Stankovic, G. Tao y S. H. Son. Programación en tiempo real con control de retroalimentación: Marco, modelado y algoritmos. Revista de Sistemas en Tiempo Real, 23(1/2):85-126, julio de 2002. [12] Object Management Group. Especificación CORBA en tiempo real, documento formal/02-08-02 de OMG, edición de agosto de 2002. [13] D. C. Schmidt, D. L. Levine y S. Mungee. El diseño y rendimiento de los corredores de solicitudes de objetos en tiempo real. Comunicaciones de Computadoras, 21(4):294-324, Abr. 1998. [14] Thomas Sikora. Tendencias y perspectivas en codificación de imágenes y videos. En Actas del IEEE, enero de 2005. [15] X. Wang, H.-M. Huang, V. Subramonian, C. Lu y C. Gill. CAMRIT: Middleware Adaptativo Basado en Control para la Transmisión de Imágenes en Tiempo Real. En Actas del 10º Simposio de Tecnología y Aplicaciones en Tiempo Real y Sistemas Empotrados del IEEE (RTAS), Toronto, Canadá, mayo de 2004. Artículo 7 ",
            "candidates": [],
            "error": [
                [
                    ""
                ]
            ]
        },
        "dynamic environment": {
            "translated_key": "entornos dinámicos",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Evaluating Adaptive Resource Management for Distributed Real-Time Embedded Systems Nishanth Shankaran, ∗ Xenofon Koutsoukos, Douglas C. Schmidt, and Aniruddha Gokhale Dept.",
                "of EECS, Vanderbilt University, Nashville ABSTRACT A challenging problem faced by researchers and developers of distributed real-time and embedded (DRE) systems is devising and implementing effective adaptive resource management strategies that can meet end-to-end quality of service (QoS) requirements in varying operational conditions.",
                "This paper presents two contributions to research in adaptive resource management for DRE systems.",
                "First, we describe the structure and functionality of the Hybrid Adaptive Resourcemanagement Middleware (HyARM), which provides adaptive resource management using hybrid control techniques for adapting to workload fluctuations and resource availability.",
                "Second, we evaluate the adaptive behavior of HyARM via experiments on a DRE multimedia system that distributes video in real-time.",
                "Our results indicate that HyARM yields predictable, stable, and high system performance, even in the face of fluctuating workload and resource availability.",
                "Categories and Subject Descriptors C.2.4 [Distributed Systems]: Distributed Applications; D.4.7 [Organization and Design]: Real-time Systems and Embedded Systems 1.",
                "INTRODUCTION Achieving end-to-end real-time quality of service (QoS) is particularly important for open distributed real-time and embedded (DRE) systems that face resource constraints, such as limited computing power and network bandwidth.",
                "Overutilization of these system resources can yield unpredictable and unstable behavior, whereas under-utilization can yield excessive system cost.",
                "A promising approach to meeting these end-to-end QoS requirements effectively, therefore, is to develop and apply adaptive middleware [10, 15], which is software whose functional and QoS-related properties can be modified either statically or dynamically.",
                "Static modifications are carried out to reduce footprint, leverage capabilities that exist in specific platforms, enable functional subsetting, and/or minimize hardware/software infrastructure dependencies.",
                "Objectives of dynamic modifications include optimizing system responses to changing environments or requirements, such as changing component interconnections, power-levels, CPU and network bandwidth availability, latency/jitter, and workload.",
                "In open DRE systems, adaptive middleware must make such modifications dependably, i.e., while meeting stringent end-to-end QoS requirements, which requires the specification and enforcement of upper and lower bounds on system resource utilization to ensure effective use of system resources.",
                "To meet these requirements, we have developed the Hybrid Adaptive Resource-management Middleware (HyARM), which is an open-source1 distributed resource management middleware.",
                "HyARM is based on hybrid control theoretic techniques [8], which provide a theoretical framework for designing control of complex system with both continuous and discrete dynamics.",
                "In our case study, which involves a distributed real-time video distribution system, the task of adaptive resource management is to control the utilization of the different resources, whose utilizations are described by continuous variables.",
                "We achieve this by adapting the resolution of the transmitted video, which is modeled as a continuous variable, and by changing the frame-rate and the compression, which are modeled by discrete actions.",
                "We have implemented HyARM atop The ACE ORB (TAO) [13], which is an implementation of the Real-time CORBA specification [12].",
                "Our results show that (1) HyARM ensures effective system resource utilization and (2) end-to-end QoS requirements of higher priority applications are met, even in the face of fluctuations in workload.",
                "The remainder of the paper is organized as follows: Section 2 describes the architecture, functionality, and resource utilization model of our DRE multimedia system case study; Section 3 explains the structure and functionality of HyARM; Section 4 evaluates the adaptive behavior of HyARM via experiments on our multimedia system case study; Section 5 compares our research on HyARM with related work; and Section 6 presents concluding remarks. 1 The code and examples for HyARM are available at www. dre.vanderbilt.edu/∼nshankar/HyARM/.",
                "Article 7 2.",
                "CASE STUDY: DRE MULTIMEDIA SYSTEM This section describes the architecture and QoS requirements of our DRE multimedia system. 2.1 Multimedia System Architecture Wireless Link Wireless Link Wireless Link ` ` ` Physical Link Physical Link Physical Link Base Station End Receiver End Receiver End Receiver` Physical Link End Receiver UAV Camera Video Encoder Camera Video Encoder Camera Video Encoder UAV Camera Video Encoder Camera Video Encoder Camera Video Encoder UAV Camera Video Encoder Camera Video Encoder Camera Video Encoder Figure 1: DRE Multimedia System Architecture The architecture for our DRE multimedia system is shown in Figure 1 and consists of the following entities: (1)Data source (video capture by UAV), where video is captured (related to subject of interest) by camera(s) on each UAV, followed by encoding of raw video using a specific encoding scheme and transmitting the video to the next stage in the pipeline. (2)Data distributor (base station), where the video is processed to remove noise, followed by retransmission of the processed video to the next stage in the pipeline. (3) Sinks (command and control center), where the received video is again processed to remove noise, then decoded and finally rendered to end user via graphical displays.",
                "Significant improvements in video encoding/decoding and (de)compression techniques have been made as a result of recent advances in video encoding and compression techniques [14].",
                "Common video compression schemes are MPEG1, MPEG-2, Real Video, and MPEG-4.",
                "Each compression scheme is characterized by its resource requirement, e.g., the computational power to (de)compress the video signal and the network bandwidth required to transmit the compressed video signal.",
                "Properties of the compressed video, such as resolution and frame-rate determine both the quality and the resource requirements of the video.",
                "Our multimedia system case study has the following endto-end real-time QoS requirements: (1) latency, (2) interframe delay (also know as jitter), (3) frame rate, and (4) picture resolution.",
                "These QoS requirements can be classified as being either hard or soft.",
                "Hard QoS requirements should be met by the underlying system at all times, whereas soft QoS requirements can be missed occasionally.2 For our case study, we treat QoS requirements such as latency and jitter as harder QoS requirements and strive to meet these requirements at all times.",
                "In contrast, we treat QoS requirements such as video frame rate and picture resolution as softer QoS requirements and modify these video properties adaptively to handle dynamic changes in resource availabil2 Although hard and soft are often portrayed as two discrete requirement sets, in practice they are usually two ends of a continuum ranging from softer to harder rather than two disjoint points. ity effectively. 2.2 DRE Multimedia System Rresources There are two primary types of resources in our DRE multimedia system: (1) processors that provide computational power available at the UAVs, base stations, and end receivers and (2) network links that provide communication bandwidth between UAVs, base stations, and end receivers.",
                "The computing power required by the video capture and encoding tasks depends on dynamic factors, such as speed of the UAV, speed of the subject (if the subject is mobile), and distance between UAV and the subject.",
                "The wireless network bandwidth available to transmit video captured by UAVs to base stations also depends on the wireless connectivity between the UAVs and the base station, which in-turn depend on dynamic factors such as the speed of the UAVs and the relative distance between UAVs and base stations.",
                "The bandwidth of the link between the base station and the end receiver is limited, but more stable than the bandwidth of the wireless network.",
                "Resource requirements and availability of resources are subjected to dynamic changes.",
                "Two classes of applications - QoS-enabled and best-effort - use the multimedia system infrastructure described above to transmit video to their respective receivers.",
                "QoS-enabled class of applications have higher priority over best-effort class of application.",
                "In our study, emergency response applications belong to QoS-enabled and surveillance applications belong to best-effort class.",
                "For example, since a stream from an emergency response application is of higher importance than a video stream from a surveillance application, it receives more resources end-to-end.",
                "Since resource availability significantly affects QoS, we use current resource utilization as the primary indicator of system performance.",
                "We refer to the current level of system resource utilization as the system condition.",
                "Based on this definition, we can classify system conditions as being either under, over, or effectively utilized.",
                "Under-utilization of system resources occurs when the current resource utilization is lower than the desired lower bound on resource utilization.",
                "In this system condition, residual system resources (i.e., network bandwidth and computational power) are available in large amounts after meeting end-to-end QoS requirements of applications.",
                "These residual resources can be used to increase the QoS of the applications.",
                "For example, residual CPU and network bandwidth can be used to deliver better quality video (e.g., with greater resolution and higher frame rate) to end receivers.",
                "Over-utilization of system resources occurs when the current resource utilization is higher than the desired upper bound on resource utilization.",
                "This condition can arise from loss of resources - network bandwidth and/or computing power at base station, end receiver or at UAV - or may be due to an increase in resource demands by applications.",
                "Over-utilization is generally undesirable since the quality of the received video (such as resolution and frame rate) and timeliness properties (such as latency and jitter) are degraded and may result in an unstable (and thus ineffective) system.",
                "Effective resource utilization is the desired system condition since it ensures that end-to-end QoS requirements of the UAV-based multimedia system are met and utilization of both system resources, i.e., network bandwidth and computational power, are within their desired utilization bounds.",
                "Article 7 Section 3 describes techniques we applied to achieve effective utilization, even in the face of fluctuating resource availability and/or demand. 3.",
                "OVERVIEW OF HYARM This section describes the architecture of the Hybrid Adaptive Resource-management Middleware (HyARM).",
                "HyARM ensures efficient and predictable system performance by providing adaptive resource management, including monitoring of system resources and enforcing bounds on application resource utilization. 3.1 HyARM Structure and Functionality Resource Utilization Legend Resource Allocation Application Parameters Figure 2: HyARM Architecture HyARM is composed of three types of entities shown in Figure 2 and described below: Resource monitors observe the overall resource utilization for each type of resource and resource utilization per application.",
                "In our multimedia system, there are resource monitors for CPU utilization and network bandwidth.",
                "CPU monitors observe the CPU resource utilization of UAVs, base station, and end receivers.",
                "Network bandwidth monitors observe the network resource utilization of (1) wireless network link between UAVs and the base station and (2) wired network link between the base station and end receivers.",
                "The central controller maintains the system resource utilization below a desired bound by (1) processing periodic updates it receives from resource monitors and (2) modifying the execution of applications accordingly, e.g., by using different execution algorithms or operating the application with increased/decreased QoS.",
                "This adaptation process ensures that system resources are utilized efficiently and end-to-end application QoS requirements are met.",
                "In our multimedia system, the HyARM controller determines the value of application parameters such as (1) video compression schemes, such as Real Video and MPEG-4, and/or (2) frame rate, and (3) picture resolution.",
                "From the perspective of hybrid control theoretic techniques [8], the different video compression schemes and frame rate form the discrete variables of application execution and picture resolution forms the continuous variables.",
                "Application adapters modify application execution according to parameters recommended by the controller and ensures that the operation of the application is in accordance with the recommended parameters.",
                "In the current mplementation of HyARM, the application adapter modifies the input parameters to the application that affect application QoS and resource utilization - compression scheme, frame rate, and picture resolution.",
                "In our future implementations, we plan to use resource reservation mechanisms such as Differentiated Service [7, 3] and Class-based Kernel Resource Management [4] to provision/reserve network and CPU resources.",
                "In our multimedia system, the application adapter ensures that the video is encoded at the recommended frame rate and resolution using the specified compression scheme. 3.2 Applying HyARM to the Multimedia System Case Study HyARM is built atop TAO [13], a widely used open-source implementation of Real-time CORBA [12].",
                "HyARM can be applied to ensure efficient, predictable and adaptive resource management of any DRE system where resource availability and requirements are subject to dynamic change.",
                "Figure 3 shows the interaction of various parts of the DRE multimedia system developed with HyARM, TAO, and TAOs A/V Streaming Service.",
                "TAOs A/V Streaming service is an implementation of the CORBA A/V Streaming Service specification.",
                "TAOs A/V Streaming Service is a QoS-enabled video distribution service that can transfer video in real-time to one or more receivers.",
                "We use the A/V Streaming Service to transmit the video from the UAVs to the end receivers via the base station.",
                "Three entities of Receiver UAV TAO Resource Utilization HyARM Central Controller A/V Streaming Service : Sender MPEG1 MPEG4 Real Video HyARM Resource Monitor A/V Streaming Service : Receiver Compressed Video Compressed Video Application HyARM Application Adapter Remote Object Call Control Inputs Resource Utilization Resource Utilization / Control Inputs Control Inputs Legend Figure 3: Developing the DRE Multimedia System with HyARM HyARM, namely the resource monitors, central controller, and application adapters are built as CORBA servants, so they can be distributed throughout a DRE system.",
                "Resource monitors are remote CORBA objects that update the central controller periodically with the current resource utilization.",
                "Application adapters are collocated with applications since the two interact closely.",
                "As shown in Figure 3, UAVs compress the data using various compression schemes, such as MPEG1, MPEG4, and Real Video, and uses TAOs A/V streaming service to transmit the video to end receivers.",
                "HyARMs resource monitors continuously observe the system resource utilization and notify the central controller with the current utilization. 3 The interaction between the controller and the resource monitors uses the Observer pattern [5].",
                "When the controller receives resource utilization updates from monitors, it computes the necessary modifications to application(s) parameters and notifies application adapter(s) via a remote operation call.",
                "Application adapter(s), that are collocated with the application, modify the input parameters to the application - in our case video encoder - to modify the application resource utilization and QoS. 3 The base station is not included in the figure since it only retransmits the video received from UAVs to end receivers.",
                "Article 7 4.",
                "PERFORMANCE RESULTS AND ANALYSIS This section first describes the testbed that provides the infrastructure for our DRE multimedia system, which was used to evaluate the performance of HyARM.",
                "We then describe our experiments and analyze the results obtained to empirically evaluate how HyARM behaves during underand over-utilization of system resources. 4.1 Overview of the Hardware and Software Testbed Our experiments were performed on the Emulab testbed at University of Utah.",
                "The hardware configuration consists of two nodes acting as UAVs, one acting as base station, and one as end receiver.",
                "Video from the two UAVs were transmitted to a base station via a LAN configured with the following properties: average packet loss ratio of 0.3 and bandwidth 1 Mbps.",
                "The network bandwidth was chosen to be 1 Mbps since each UAV in the DRE multimedia system is allocated 250 Kbps.",
                "These parameters were chosen to emulate an unreliable wireless network with limited bandwidth between the UAVs and the base station.",
                "From the base station, the video was retransmitted to the end receiver via a reliable wireline link of 10 Mbps bandwidth with no packet loss.",
                "The hardware configuration of all the nodes was chosen as follows: 600 MHz Intel Pentium III processor, 256 MB physical memory, 4 Intel EtherExpress Pro 10/100 Mbps Ethernet ports, and 13 GB hard drive.",
                "A real-time version of Linux - TimeSys Linux/NET 3.1.214 based on RedHat Linux 9was used as the operating system for all nodes.",
                "The following software packages were also used for our experiments: (1) Ffmpeg 0.4.9-pre1, which is an open-source library (http: //www.ffmpeg.sourceforge.net/download.php) that compresses video into MPEG-2, MPEG-4, Real Video, and many other video formats. (2) Iftop 0.16, which is an opensource library (http://www.ex-parrot.com/∼pdw/iftop/) we used for monitoring network activity and bandwidth utilization. (3) ACE 5.4.3 + TAO 1.4.3, which is an opensource (http://www.dre.vanderbilt.edu/TAO) implementation of the Real-time CORBA [12] specification upon which HyARM is built.",
                "TAO provides the CORBA Audio/Video (A/V) Streaming Service that we use to transmit the video from the UAVs to end receivers via the base station. 4.2 Experiment Configuration Our experiment consisted of two (emulated) UAVs that simultaneously send video to the base station using the experimentation setup described in Section 4.1.",
                "At the base station, video was retransmitted to the end receivers (without any modifications), where it was stored to a file.",
                "Each UAV hosted two applications, one QoS-enabled application (emergency response), and one best-effort application (surveillance).",
                "Within each UAV, computational power is shared between the applications, while the network bandwidth is shared among all applications.",
                "To evaluate the QoS provided by HyARM, we monitored CPU utilization at the two UAVs, and network bandwidth utilization between the UAV and the base station.",
                "CPU resource utilization was not monitored at the base station and the end receiver since they performed no computationallyintensive operations.",
                "The resource utilization of the 10 Mpbs physical link between the base station and the end receiver does not affect QoS of applications and is not monitored by HyARM since it is nearly 10 times the 1 MB bandwidth of the LAN between the UAVs and the base station.",
                "The experiment also monitors properties of the video that affect the QoS of the applications, such as latency, jitter, frame rate, and resolution.",
                "The set point on resource utilization for each resource was specified at 0.69, which is the upper bound typically recommended by scheduling techniques, such as rate monotonic algorithm [9].",
                "Since studies [6] have shown that human eyes can perceive delays more than 200ms, we use this as the upper bound on jitter of the received video.",
                "QoS requirements for each class of application is specified during system initialization and is shown in Table 1. 4.3 Empirical Results and Analysis This section presents the results obtained from running the experiment described in Section 4.2 on our DRE multimedia system testbed.",
                "We used system resource utilization as a metric to evaluate the adaptive resource management capabilities of HyARM under varying input work loads.",
                "We also used application QoS as a metric to evaluate HyARMs capabilities to support end-to-end QoS requirements of the various classes of applications in the DRE multimedia system.",
                "We analyze these results to explain the significant differences in system performance and application QoS.",
                "Comparison of system performance is decomposed into comparison of resource utilization and application QoS.",
                "For system resource utilization, we compare (1) network bandwidth utilization of the local area network and (2) CPU utilization at the two UAV nodes.",
                "For application QoS, we compare mean values of video parameters, including (1) picture resolution, (2) frame rate, (3) latency, and (4) jitter.",
                "Comparison of resource utilization.",
                "Over-utilization of system resources in DRE systems can yield an unstable system.",
                "In contrast, under-utilization of system resources increases system cost.",
                "Figure 4 and Figure 5 compare the system resource utilization with and without HyARM.",
                "Figure 4 shows that HyARM maintains system utilization close to the desired utilization set point during fluctuation in input work load by transmitting video of higher (or lower) QoS for QoS-enabled (or best-effort) class of applications during over (or under) utilization of system resources.",
                "Figure 5 shows that without HyARM, network utilization was as high as 0.9 during increase in workload conditions, which is greater than the utilization set point of 0.7 by 0.2.",
                "As a result of over-utilization of resources, QoS of the received video, such as average latency and jitter, was affected significantly.",
                "Without HyARM, system resources were either under-utilized or over-utilized, both of which are undesirable.",
                "In contrast, with HyARM, system resource utilization is always close to the desired set point, even during fluctuations in application workload.",
                "During sudden fluctuation in application workload, system conditions may be temporarily undesirable, but are restored to the desired condition within several sampling periods.",
                "Temporary over-utilization of resources is permissible in our multimedia system since the quality of the video may be degraded for a short period of time, though application QoS will be degraded significantly if poor quality video is transmitted for a longer period of time.",
                "Comparison of application QoS.",
                "Figures 6, Figure 7, and Table 2 compare latency, jitter, resolution, and frameArticle 7 Class Resolution Frame Rate Latency (msec ) Jitter (msec) QoS Enabled 1024 x 768 25 200 200 Best-effort 320 x 240 15 300 250 Table 1: Application QoS Requirements Figure 4: Resource utilization with HyARM Figure 5: Resource utilization without HyARM rate of the received video, respectively.",
                "Table 2 shows that HyARM increases the resolution and frame video of QoSenabled applications, but decreases the resolution and frame rate of best effort applications.",
                "During over utilization of system resources, resolution and frame rate of lower priority applications are reduced to adapt to fluctuations in application workload and to maintain the utilization of resources at the specified set point.",
                "It can be seen from Figure 6 and Figure 7 that HyARM reduces the latency and jitter of the received video significantly.",
                "These figures show that the QoS of QoS-enabled applications is greatly improved by HyARM.",
                "Although application parameters, such as frame rate and resolutions, which affect the soft QoS requirements of best-effort applications may be compromised, the hard QoS requirements, such as latency and jitter, of all applications are met.",
                "HyARM responds to fluctuation in resource availability and/or demand by constant monitoring of resource utilization.",
                "As shown in Figure 4, when resources utilization increases above the desired set point, HyARM lowers the utilization by reducing the QoS of best-effort applications.",
                "This adaptation ensures that enough resources are available for QoS-enabled applications to meet their QoS needs.",
                "Figures 6 and 7 show that the values of latency and jitter of the received video of the system with HyARM are nearly half of the corresponding value of the system without HyARM.",
                "With HyARM, values of these parameters are well below the specified bounds, whereas without HyARM, these value are significantly above the specified bounds due to overutilization of the network bandwidth, which leads to network congestion and results in packet loss.",
                "HyARM avoids this by reducing video parameters such as resolution, frame-rate, and/or modifying the compression scheme used to compress the video.",
                "Our conclusions from analyzing the results described above are that applying adaptive middleware via hybrid control to DRE system helps to (1) improve application QoS, (2) increase system resource utilization, and (3) provide better predictability (lower latency and inter-frame delay) to QoSenabled applications.",
                "These improvements are achieved largely due to monitoring of system resource utilization, efficient system workload management, and adaptive resource provisioning by means of HyARMs network/CPU resource monitors, application adapter, and central controller, respectively. 5.",
                "RELATED WORK A number of control theoretic approaches have been applied to DRE systems recently.",
                "These techniques aid in overcoming limitations with traditional scheduling approaches that handle dynamic changes in resource availability poorly and result in a rigidly scheduled system that adapts poorly to change.",
                "A survey of these techniques is presented in [1].",
                "One such approach is feedback control scheduling (FCS) [2, 11].",
                "FCS algorithms dynamically adjust resource allocation by means of software feedback control loops.",
                "FCS algorithms are modeled and designed using rigorous controltheoretic methodologies.",
                "These algorithms provide robust and analytical performance assurances despite uncertainties in resource availability and/or demand.",
                "Although existing FCS algorithms have shown promise, these algorithms often assume that the system has continuous control variable(s) that can continuously be adjusted.",
                "While this assumption holds for certain classes of systems, there are many classes of DRE systems, such as avionics and total-ship computing environments that only support a finite a priori set of discrete configurations.",
                "The control variables in such systems are therefore intrinsically discrete.",
                "HyARM handles both continuous control variables, such as picture resolution, and discrete control variable, such as discrete set of frame rates.",
                "HyARM can therefore be applied to system that support continuous and/or discrete set of control variables.",
                "The DRE multimedia system as described in Section 2 is an example DRE system that offers both continuous (picture resolution) and discrete set (frame-rate) of control variables.",
                "These variables are modified by HyARM to achieve efficient resource utilization and improved application QoS. 6.",
                "CONCLUDING REMARKS Article 7 Figure 6: Comparison of Video Latency Figure 7: Comparison of Video Jitter Source Picture Size / Frame Rate With HyARM Without HyARM UAV1 QoS Enabled Application 1122 X 1496 / 25 960 X 720 / 20 UAV1 Best-effort Application 288 X 384 / 15 640 X 480 / 20 UAV2 QoS Enabled Application 1126 X 1496 / 25 960 X 720 / 20 UAV2 Best-effort Application 288 X 384 / 15 640 X 480 / 20 Table 2: Comparison of Video Quality Many distributed real-time and embedded (DRE) systems demand end-to-end quality of service (QoS) enforcement from their underlying platforms to operate correctly.",
                "These systems increasingly run in open environments, where resource availability is subject to dynamic change.",
                "To meet end-to-end QoS in <br>dynamic environment</br>s, DRE systems can benefit from an adaptive middleware that monitors system resources, performs efficient application workload management, and enables efficient resource provisioning for executing applications.",
                "This paper described HyARM, an adaptive middleware, that provides effective resource management to DRE systems.",
                "HyARM employs hybrid control techniques to provide the adaptive middleware capabilities, such as resource monitoring and application adaptation that are key to providing the dynamic resource management capabilities for open DRE systems.",
                "We employed HyARM to a representative DRE multimedia system that is implemented using Real-time CORBA and CORBA A/V Streaming Service.",
                "We evaluated the performance of HyARM in a system composed of three distributed resources and two classes of applications with two applications each.",
                "Our empirical results indicate that HyARM ensures (1) efficient resource utilization by maintaining the resource utilization of system resources within the specified utilization bounds, (2) QoS requirements of QoS-enabled applications are met at all times.",
                "Overall, HyARM ensures efficient, predictable, and adaptive resource management for DRE systems. 7.",
                "REFERENCES [1] T. F. Abdelzaher, J. Stankovic, C. Lu, R. Zhang, and Y. Lu.",
                "Feddback Performance Control in Software Services.",
                "IEEE: Control Systems, 23(3), June 2003. [2] L. Abeni, L. Palopoli, G. Lipari, and J. Walpole.",
                "Analysis of a reservation-based feedback scheduler.",
                "In IEEE Real-Time Systems Symposium, Dec. 2002. [3] S. Blake, D. Black, M. Carlson, E. Davies, Z. Wang, and W. Weiss.",
                "An architecture for differentiated services.",
                "Network Information Center RFC 2475, Dec. 1998. [4] H. Franke, S. Nagar, C. Seetharaman, and V. Kashyap.",
                "Enabling Autonomic Workload Management in Linux.",
                "In Proceedings of the International Conference on Autonomic Computing (ICAC), New York, New York, May 2004.",
                "IEEE. [5] E. Gamma, R. Helm, R. Johnson, and J. Vlissides.",
                "Design Patterns: Elements of Reusable Object-Oriented Software.",
                "Addison-Wesley, Reading, MA, 1995. [6] G. Ghinea and J. P. Thomas.",
                "Qos impact on user perception and understanding of multimedia video clips.",
                "In MULTIMEDIA 98: Proceedings of the sixth ACM international conference on Multimedia, pages 49-54, Bristol, United Kingdom, 1998.",
                "ACM Press. [7] Internet Engineering Task Force.",
                "Differentiated Services Working Group (diffserv) Charter. www.ietf.org/html.charters/diffserv-charter.html, 2000. [8] X. Koutsoukos, R. Tekumalla, B. Natarajan, and C. Lu.",
                "Hybrid Supervisory Control of Real-Time Systems.",
                "In 11th IEEE Real-Time and Embedded Technology and Applications Symposium, San Francisco, California, Mar. 2005. [9] J. Lehoczky, L. Sha, and Y. Ding.",
                "The Rate Monotonic Scheduling Algorithm: Exact Characterization and Average Case Behavior.",
                "In Proceedings of the 10th IEEE Real-Time Systems Symposium (RTSS 1989), pages 166-171.",
                "IEEE Computer Society Press, 1989. [10] J. Loyall, J. Gossett, C. Gill, R. Schantz, J. Zinky, P. Pal, R. Shapiro, C. Rodrigues, M. Atighetchi, and D. Karr.",
                "Comparing and Contrasting Adaptive Middleware Support in Wide-Area and Embedded Distributed Object Applications.",
                "In Proceedings of the 21st International Conference on Distributed Computing Systems (ICDCS-21), pages 625-634.",
                "IEEE, Apr. 2001. [11] C. Lu, J.",
                "A. Stankovic, G. Tao, and S. H. Son.",
                "Feedback Control Real-Time Scheduling: Framework, Modeling, and Algorithms.",
                "Real-Time Systems Journal, 23(1/2):85-126, July 2002. [12] Object Management Group.",
                "Real-time CORBA Specification, OMG Document formal/02-08-02 edition, Aug. 2002. [13] D. C. Schmidt, D. L. Levine, and S. Mungee.",
                "The Design and Performance of Real-Time Object Request Brokers.",
                "Computer Communications, 21(4):294-324, Apr. 1998. [14] Thomas Sikora.",
                "Trends and Perspectives in Image and Video Coding.",
                "In Proceedings of the IEEE, Jan. 2005. [15] X. Wang, H.-M. Huang, V. Subramonian, C. Lu, and C. Gill.",
                "CAMRIT: Control-based Adaptive Middleware for Real-time Image Transmission.",
                "In Proc. of the 10th IEEE Real-Time and Embedded Tech. and Applications Symp. (RTAS), Toronto, Canada, May 2004.",
                "Article 7"
            ],
            "original_annotated_samples": [
                "To meet end-to-end QoS in <br>dynamic environment</br>s, DRE systems can benefit from an adaptive middleware that monitors system resources, performs efficient application workload management, and enables efficient resource provisioning for executing applications."
            ],
            "translated_annotated_samples": [
                "Para cumplir con la calidad de servicio de extremo a extremo en <br>entornos dinámicos</br>, los sistemas DRE pueden beneficiarse de un middleware adaptativo que monitorea los recursos del sistema, realiza una gestión eficiente de la carga de trabajo de la aplicación y permite una provisión eficiente de recursos para la ejecución de aplicaciones."
            ],
            "translated_text": "Evaluando la Gestión de Recursos Adaptativa para Sistemas Empotrados Distribuidos en Tiempo Real de Nishanth Shankaran, Xenofon Koutsoukos, Douglas C. Schmidt y Aniruddha Gokhale, Dept. de EECS, Universidad de Vanderbilt, Nashville RESUMEN Un problema desafiante enfrentado por investigadores y desarrolladores de sistemas distribuidos en tiempo real y embebidos (DRE) es idear e implementar estrategias efectivas de gestión adaptativa de recursos que puedan cumplir con los requisitos de calidad de servicio (QoS) de extremo a extremo en condiciones operativas variables. Este artículo presenta dos contribuciones a la investigación en gestión de recursos adaptativa para sistemas DRE. Primero, describimos la estructura y funcionalidad del Middleware de Gestión de Recursos Adaptativos Híbridos (HyARM), que proporciona gestión de recursos adaptativa utilizando técnicas de control híbridas para adaptarse a las fluctuaciones de carga de trabajo y disponibilidad de recursos. Segundo, evaluamos el comportamiento adaptativo de HyARM a través de experimentos en un sistema multimedia DRE que distribuye video en tiempo real. Nuestros resultados indican que HyARM produce un rendimiento del sistema predecible, estable y alto, incluso ante cargas de trabajo y disponibilidad de recursos fluctuantes. Categorías y Descriptores de Asignaturas C.2.4 [Sistemas Distribuidos]: Aplicaciones Distribuidas; D.4.7 [Organización y Diseño]: Sistemas en Tiempo Real y Sistemas Embebidos 1. INTRODUCCIÓN Lograr la calidad de servicio (QoS) en tiempo real de extremo a extremo es particularmente importante para sistemas distribuidos en tiempo real y embebidos (DRE) abiertos que enfrentan limitaciones de recursos, como potencia de cómputo limitada y ancho de banda de red. La sobreutilización de estos recursos del sistema puede generar un comportamiento impredecible e inestable, mientras que la subutilización puede resultar en un costo excesivo del sistema. Un enfoque prometedor para cumplir de manera efectiva con estos requisitos de calidad de servicio de extremo a extremo, por lo tanto, es desarrollar y aplicar middleware adaptativo [10, 15], que es un software cuyas propiedades funcionales y relacionadas con la calidad de servicio pueden ser modificadas estática o dinámicamente. Las modificaciones estáticas se realizan para reducir la huella, aprovechar las capacidades existentes en plataformas específicas, habilitar la selección funcional y/o minimizar las dependencias de infraestructura de hardware/software. Los objetivos de las modificaciones dinámicas incluyen optimizar las respuestas del sistema a entornos o requisitos cambiantes, como la modificación de interconexiones de componentes, niveles de potencia, disponibilidad de ancho de banda de CPU y red, latencia/jitter y carga de trabajo. En los sistemas DRE abiertos, el middleware adaptativo debe realizar modificaciones de manera confiable, es decir, cumpliendo con los estrictos requisitos de calidad de servicio de extremo a extremo, lo que requiere la especificación y aplicación de límites superiores e inferiores en la utilización de recursos del sistema para garantizar un uso efectivo de los recursos del sistema. Para cumplir con estos requisitos, hemos desarrollado el Middleware de Gestión de Recursos Híbrido Adaptativo (HyARM), que es un middleware de gestión de recursos distribuido de código abierto. HyARM se basa en técnicas híbridas de control teórico, las cuales proporcionan un marco teórico para diseñar el control de sistemas complejos con dinámicas tanto continuas como discretas. En nuestro estudio de caso, que implica un sistema distribuido de distribución de video en tiempo real, la tarea de gestión de recursos adaptativa consiste en controlar la utilización de los diferentes recursos, cuyas utilizaciones están descritas por variables continuas. Logramos esto adaptando la resolución del video transmitido, que se modela como una variable continua, y cambiando la velocidad de cuadros y la compresión, que se modelan mediante acciones discretas. Hemos implementado HyARM sobre el ORB ACE (TAO) [13], que es una implementación de la especificación CORBA en tiempo real [12]. Nuestros resultados muestran que (1) HyARM garantiza una utilización efectiva de los recursos del sistema y (2) se cumplen los requisitos de calidad de servicio de extremo a extremo de las aplicaciones de mayor prioridad, incluso ante fluctuaciones en la carga de trabajo. El resto del documento está organizado de la siguiente manera: la Sección 2 describe la arquitectura, funcionalidad y modelo de utilización de recursos de nuestro estudio de caso del sistema multimedia DRE; la Sección 3 explica la estructura y funcionalidad de HyARM; la Sección 4 evalúa el comportamiento adaptativo de HyARM a través de experimentos en nuestro estudio de caso del sistema multimedia; la Sección 5 compara nuestra investigación sobre HyARM con trabajos relacionados; y la Sección 6 presenta observaciones finales. El código y ejemplos de HyARM están disponibles en www.dre.vanderbilt.edu/∼nshankar/HyARM/. Artículo 7 2. ESTUDIO DE CASO: SISTEMA MULTIMEDIA DRE Esta sección describe la arquitectura y los requisitos de QoS de nuestro sistema multimedia DRE. 2.1 Arquitectura del Sistema Multimedia Enlace Inalámbrico Enlace Inalámbrico Enlace Inalámbrico ` ` ` Enlace Físico Enlace Físico Enlace Físico Estación Base Extremo Receptor Extremo Receptor Extremo Receptor` Enlace Físico Extremo Receptor Cámara UAV Codificador de Video Cámara Codificador de Video Cámara Codificador de Video Cámara UAV Codificador de Video Cámara Codificador de Video Cámara Codificador de Video Cámara UAV Codificador de Video Cámara Codificador de Video Cámara Codificador de Video Figura 1: Arquitectura del Sistema Multimedia DRE La arquitectura de nuestro sistema multimedia DRE se muestra en la Figura 1 y consta de las siguientes entidades: (1) Fuente de datos (captura de video por UAV), donde el video es capturado (relacionado con el tema de interés) por la(s) cámara(s) en cada UAV, seguido por la codificación del video crudo utilizando un esquema de codificación específico y transmitiendo el video a la siguiente etapa en la cadena de procesamiento. (2) Distribuidor de datos (estación base), donde el video es procesado para eliminar ruido, seguido por la retransmisión del video procesado a la siguiente etapa en la cadena de procesamiento. (3) Destinos (centro de comando y control), donde el video recibido es nuevamente procesado para eliminar ruido, luego decodificado y finalmente renderizado al usuario final a través de pantallas gráficas. Se han logrado mejoras significativas en las técnicas de codificación/decodificación y compresión (des) de video como resultado de los avances recientes en las técnicas de codificación y compresión de video [14]. Los esquemas comunes de compresión de video son MPEG1, MPEG-2, Real Video y MPEG-4. Cada esquema de compresión se caracteriza por sus requisitos de recursos, por ejemplo, la potencia computacional para (des)comprimir la señal de video y el ancho de banda de red necesario para transmitir la señal de video comprimida. Las propiedades del video comprimido, como la resolución y la velocidad de fotogramas, determinan tanto la calidad como los requisitos de recursos del video. Nuestro estudio de caso del sistema multimedia tiene los siguientes requisitos de calidad de servicio (QoS) en tiempo real de extremo a extremo: (1) latencia, (2) retardo entre cuadros (también conocido como jitter), (3) frecuencia de cuadros y (4) resolución de imagen. Estos requisitos de calidad de servicio (QoS) pueden clasificarse como duros o blandos. Los requisitos de QoS estrictos deben ser cumplidos por el sistema subyacente en todo momento, mientras que los requisitos de QoS flexibles pueden ser ocasionalmente incumplidos. Para nuestro estudio de caso, tratamos los requisitos de QoS como la latencia y la variabilidad de retardo como requisitos de QoS más estrictos y nos esforzamos por cumplir con estos requisitos en todo momento. Por el contrario, tratamos los requisitos de QoS como la tasa de cuadros de video y la resolución de imagen como requisitos de QoS más flexibles y modificamos estas propiedades de video de manera adaptativa para manejar los cambios dinámicos en la disponibilidad de recursos de manera efectiva. Aunque a menudo se presentan como dos conjuntos de requisitos discretos, en la práctica suelen ser dos extremos de un continuo que va desde más suave a más duro en lugar de dos puntos disjuntos. La potencia informática requerida por las tareas de captura y codificación de video depende de factores dinámicos, como la velocidad del UAV, la velocidad del sujeto (si el sujeto es móvil) y la distancia entre el UAV y el sujeto. La cantidad de ancho de banda de la red inalámbrica disponible para transmitir video capturado por UAVs a estaciones base también depende de la conectividad inalámbrica entre los UAVs y la estación base, que a su vez depende de factores dinámicos como la velocidad de los UAVs y la distancia relativa entre los UAVs y las estaciones base. El ancho de banda del enlace entre la estación base y el receptor final está limitado, pero es más estable que el ancho de banda de la red inalámbrica. Los requisitos de recursos y la disponibilidad de recursos están sujetos a cambios dinámicos. Dos clases de aplicaciones - habilitadas para QoS y de mejor esfuerzo - utilizan la infraestructura del sistema multimedia descrita anteriormente para transmitir video a sus respectivos receptores. Las aplicaciones de clase habilitada para QoS tienen mayor prioridad sobre las aplicaciones de clase de mejor esfuerzo. En nuestro estudio, las aplicaciones de respuesta de emergencia pertenecen a la clase habilitada para la calidad de servicio (QoS), y las aplicaciones de vigilancia pertenecen a la clase de mejor esfuerzo. Por ejemplo, dado que un flujo de datos de una aplicación de respuesta de emergencia es de mayor importancia que un flujo de video de una aplicación de vigilancia, recibe más recursos de extremo a extremo. Dado que la disponibilidad de recursos afecta significativamente la calidad de servicio, utilizamos la utilización actual de recursos como indicador principal del rendimiento del sistema. Nos referimos al nivel actual de utilización de recursos del sistema como la condición del sistema. Basándonos en esta definición, podemos clasificar las condiciones del sistema como estando subutilizadas, sobreutilizadas o utilizadas de manera efectiva. La subutilización de los recursos del sistema ocurre cuando la utilización actual de los recursos es menor que el límite inferior deseado de utilización de recursos. En este sistema, los recursos residuales del sistema (es decir, ancho de banda de red y potencia computacional) están disponibles en grandes cantidades después de cumplir con los requisitos de calidad de servicio de extremo a extremo de las aplicaciones. Estos recursos residuales se pueden utilizar para aumentar la calidad de servicio de las aplicaciones. Por ejemplo, la CPU residual y el ancho de banda de red pueden ser utilizados para entregar videos de mejor calidad (por ejemplo, con mayor resolución y mayor velocidad de cuadros) a los receptores finales. La sobreutilización de los recursos del sistema ocurre cuando la utilización actual de recursos es mayor que el límite superior deseado de utilización de recursos. Esta condición puede surgir por la pérdida de recursos - ancho de banda de red y/o potencia de cómputo en la estación base, receptor final o en el UAV - o puede ser debido a un aumento en las demandas de recursos por parte de las aplicaciones. La sobreutilización es generalmente indeseable ya que la calidad del video recibido (como la resolución y la velocidad de cuadros) y las propiedades de puntualidad (como la latencia y la fluctuación) se degradan y pueden resultar en un sistema inestable (y por lo tanto ineficaz). La utilización efectiva de recursos es la condición deseada del sistema, ya que garantiza que se cumplan los requisitos de calidad de servicio de extremo a extremo del sistema multimedia basado en UAV y que la utilización de los recursos del sistema, es decir, el ancho de banda de la red y la potencia computacional, se encuentren dentro de sus límites de utilización deseados. El artículo 7, sección 3 describe las técnicas que aplicamos para lograr una utilización efectiva, incluso ante la disponibilidad y/o demanda fluctuante de recursos. DESCRIPCIÓN DE HYARM Esta sección describe la arquitectura del Middleware de Gestión de Recursos Adaptativos Híbrido (HyARM). HyARM garantiza un rendimiento eficiente y predecible del sistema al proporcionar gestión adaptativa de recursos, que incluye la monitorización de los recursos del sistema y la imposición de límites en la utilización de recursos de las aplicaciones. 3.1 Estructura y Funcionalidad de HyARM Leyenda de Utilización de Recursos Asignación de Recursos Parámetros de Aplicación Figura 2: Arquitectura de HyARM HyARM está compuesto por tres tipos de entidades mostradas en la Figura 2 y descritas a continuación: Los monitores de recursos observan la utilización general de recursos para cada tipo de recurso y la utilización de recursos por aplicación. En nuestro sistema multimedia, hay monitores de recursos para la utilización de la CPU y el ancho de banda de la red. Los monitores de la CPU observan la utilización de recursos de la CPU de los UAV, la estación base y los receptores finales. Los monitores de ancho de banda de red observan la utilización de recursos de red de (1) el enlace de red inalámbrica entre los UAV y la estación base y (2) el enlace de red cableada entre la estación base y los receptores finales. El controlador central mantiene la utilización de recursos del sistema por debajo de un límite deseado mediante (1) el procesamiento de actualizaciones periódicas que recibe de los monitores de recursos y (2) modificando la ejecución de las aplicaciones en consecuencia, por ejemplo, utilizando diferentes algoritmos de ejecución u operando la aplicación con mayor/menor calidad de servicio (QoS). Este proceso de adaptación garantiza que los recursos del sistema se utilicen de manera eficiente y se cumplan los requisitos de calidad de servicio de la aplicación de extremo a extremo. En nuestro sistema multimedia, el controlador HyARM determina el valor de parámetros de la aplicación como (1) esquemas de compresión de video, como Real Video y MPEG-4, y/o (2) velocidad de cuadros, y (3) resolución de imagen. Desde la perspectiva de las técnicas híbridas de control teórico [8], los diferentes esquemas de compresión de video y la velocidad de cuadros forman las variables discretas de la ejecución de la aplicación, mientras que la resolución de imagen forma las variables continuas. Los adaptadores de aplicación modifican la ejecución de la aplicación de acuerdo con los parámetros recomendados por el controlador y garantizan que el funcionamiento de la aplicación esté de acuerdo con los parámetros recomendados. En la implementación actual de HyARM, el adaptador de la aplicación modifica los parámetros de entrada a la aplicación que afectan la calidad de servicio (QoS) de la aplicación y la utilización de recursos, como el esquema de compresión, la velocidad de fotogramas y la resolución de la imagen. En nuestras futuras implementaciones, planeamos utilizar mecanismos de reserva de recursos como Differentiated Service [7, 3] y Class-based Kernel Resource Management [4] para aprovisionar/reservar recursos de red y CPU. En nuestro sistema multimedia, el adaptador de la aplicación se asegura de que el video se codifique a la velocidad de cuadros y resolución recomendadas utilizando el esquema de compresión especificado. 3.2 Aplicando HyARM al Estudio de Caso del Sistema Multimedia. HyARM se construye sobre TAO [13], una implementación de código abierto ampliamente utilizada de CORBA en tiempo real [12]. HyARM se puede aplicar para garantizar una gestión eficiente, predecible y adaptable de recursos en cualquier sistema DRE donde la disponibilidad y los requisitos de recursos están sujetos a cambios dinámicos. La Figura 3 muestra la interacción de varias partes del sistema multimedia DRE desarrollado con HyARM, TAO y el Servicio de Streaming de Audio y Video de TAOs. El servicio de transmisión de audio/vídeo de TAO es una implementación de la especificación del Servicio de Transmisión de Audio/Vídeo de CORBA. El servicio de transmisión de audio y video de TAOs es un servicio de distribución de video habilitado para QoS que puede transferir video en tiempo real a uno o más receptores. Utilizamos el Servicio de Transmisión de Audio y Video para enviar el video desde los VANTs a los receptores finales a través de la estación base. Tres entidades del sistema multimedia DRE con HyARM, a saber, los monitores de recursos, el controlador central y los adaptadores de aplicaciones, están construidos como servidores CORBA, por lo que pueden distribuirse en todo el sistema DRE. Los monitores de recursos son objetos CORBA remotos que actualizan periódicamente al controlador central con la utilización actual de recursos. Los adaptadores de aplicaciones se ubican junto a las aplicaciones ya que ambas interactúan estrechamente. Como se muestra en la Figura 3, los UAV comprimen los datos utilizando varios esquemas de compresión, como MPEG1, MPEG4 y Real Video, y utilizan el servicio de transmisión de audio/vídeo de TAOs para enviar el video a los receptores finales. Los monitores de recursos de HyARMs observan continuamente la utilización de recursos del sistema y notifican al controlador central con la utilización actual. La interacción entre el controlador y los monitores de recursos utiliza el patrón Observer. Cuando el controlador recibe actualizaciones de utilización de recursos de los monitores, calcula las modificaciones necesarias a los parámetros de la(s) aplicación(es) y notifica al adaptador de la aplicación mediante una llamada de operación remota. Los adaptadores de aplicación, que están ubicados junto a la aplicación, modifican los parámetros de entrada de la aplicación, en nuestro caso el codificador de video, para modificar la utilización de recursos de la aplicación y la calidad de servicio. La estación base no está incluida en la figura ya que solo retransmite el video recibido de los UAV a los receptores finales. Artículo 7 4. RESULTADOS DE RENDIMIENTO Y ANÁLISIS Esta sección describe primero el banco de pruebas que proporciona la infraestructura para nuestro sistema multimedia DRE, que se utilizó para evaluar el rendimiento de HyARM. Luego describimos nuestros experimentos y analizamos los resultados obtenidos para evaluar empíricamente cómo se comporta HyARM durante la subutilización y sobreutilización de los recursos del sistema. 4.1 Descripción general del banco de pruebas de hardware y software Nuestros experimentos se realizaron en el banco de pruebas Emulab en la Universidad de Utah. La configuración de hardware consiste en dos nodos actuando como UAVs, uno actuando como estación base y otro como receptor final. El video de los dos UAV fue transmitido a una estación base a través de una LAN configurada con las siguientes propiedades: una relación promedio de pérdida de paquetes de 0.3 y un ancho de banda de 1 Mbps. El ancho de banda de la red se eligió para ser de 1 Mbps ya que a cada UAV en el sistema multimedia DRE se le asignan 250 Kbps. Estos parámetros fueron elegidos para emular una red inalámbrica poco confiable con ancho de banda limitado entre los UAVs y la estación base. Desde la estación base, el video fue retransmitido al receptor final a través de un enlace por cable confiable de 10 Mbps de ancho de banda sin pérdida de paquetes. La configuración de hardware de todos los nodos fue elegida de la siguiente manera: procesador Intel Pentium III de 600 MHz, 256 MB de memoria física, 4 puertos Ethernet Intel EtherExpress Pro de 10/100 Mbps y disco duro de 13 GB. Se utilizó una versión en tiempo real de Linux - TimeSys Linux/NET 3.1.214 basada en RedHat Linux 9 como sistema operativo para todos los nodos. Los siguientes paquetes de software también fueron utilizados para nuestros experimentos: (1) Ffmpeg 0.4.9-pre1, que es una biblioteca de código abierto (http://www.ffmpeg.sourceforge.net/download.php) que comprime video en formatos MPEG-2, MPEG-4, Real Video, y muchos otros formatos de video. (2) Iftop 0.16, que es una biblioteca de código abierto (http://www.ex-parrot.com/∼pdw/iftop/) que utilizamos para monitorear la actividad de red y la utilización del ancho de banda. (3) ACE 5.4.3 + TAO 1.4.3, que es una implementación de código abierto (http://www.dre.vanderbilt.edu/TAO) de la especificación CORBA en tiempo real [12] sobre la cual se construye HyARM. TAO proporciona el Servicio de Transmisión de Audio/Video (A/V) CORBA que utilizamos para transmitir el video desde los UAVs a los receptores finales a través de la estación base. Configuración del experimento Nuestro experimento consistió en dos UAVs (emulados) que enviaron video simultáneamente a la estación base utilizando la configuración experimental descrita en la Sección 4.1. En la estación base, el video fue retransmitido a los receptores finales (sin ninguna modificación), donde fue almacenado en un archivo. Cada UAV alojaba dos aplicaciones, una aplicación habilitada para QoS (respuesta de emergencia) y una aplicación de mejor esfuerzo (vigilancia). Dentro de cada UAV, el poder computacional se comparte entre las aplicaciones, mientras que el ancho de banda de la red se comparte entre todas las aplicaciones. Para evaluar la calidad de servicio proporcionada por HyARM, monitoreamos la utilización de la CPU en los dos UAV y la utilización del ancho de banda de la red entre el UAV y la estación base. La utilización de recursos de la CPU no se monitoreó en la estación base y en el receptor final, ya que no realizaron operaciones computacionalmente intensivas. La utilización de recursos del enlace físico de 10 Mbps entre la estación base y el receptor final no afecta la calidad de servicio de las aplicaciones y no es monitoreada por HyARM, ya que es casi 10 veces el ancho de banda de 1 MB de la LAN entre los UAV y la estación base. El experimento también monitorea propiedades del video que afectan la calidad de servicio de las aplicaciones, como la latencia, la variabilidad de retardo, la tasa de cuadros y la resolución. El punto de ajuste en la utilización de recursos para cada recurso se especificó en 0.69, que es el límite superior típicamente recomendado por técnicas de programación, como el algoritmo monótono de tasa [9]. Dado que los estudios [6] han demostrado que los ojos humanos pueden percibir retrasos de más de 200 ms, utilizamos esto como límite superior de la variabilidad en el video recibido. Los requisitos de QoS para cada clase de aplicación se especifican durante la inicialización del sistema y se muestran en la Tabla 1. 4.3 Resultados empíricos y análisis Esta sección presenta los resultados obtenidos al ejecutar el experimento descrito en la Sección 4.2 en nuestro banco de pruebas del sistema multimedia DRE. Utilizamos la utilización de recursos del sistema como métrica para evaluar las capacidades de gestión de recursos adaptativos de HyARM bajo cargas de trabajo de entrada variables. También utilizamos la calidad de servicio de la aplicación como métrica para evaluar las capacidades de HyARMs para satisfacer los requisitos de calidad de servicio de extremo a extremo de las diferentes clases de aplicaciones en el sistema multimedia DRE. Analizamos estos resultados para explicar las diferencias significativas en el rendimiento del sistema y la calidad de servicio de la aplicación. La comparación del rendimiento del sistema se descompone en la comparación de la utilización de recursos y la calidad de servicio de la aplicación. Para la utilización de recursos del sistema, comparamos (1) la utilización del ancho de banda de la red de área local y (2) la utilización de la CPU en los dos nodos UAV. Para la aplicación de QoS, comparamos los valores medios de los parámetros de video, incluyendo (1) resolución de imagen, (2) velocidad de cuadros, (3) latencia y (4) jitter. Comparación de la utilización de recursos. La sobreutilización de recursos del sistema en sistemas DRE puede generar un sistema inestable. Por el contrario, la subutilización de los recursos del sistema aumenta el costo del sistema. La Figura 4 y la Figura 5 comparan la utilización de recursos del sistema con y sin HyARM. La Figura 4 muestra que HyARM mantiene la utilización del sistema cerca del punto de ajuste de utilización deseado durante la fluctuación en la carga de trabajo de entrada al transmitir video de mayor (o menor) calidad de servicio para la clase de aplicaciones con calidad de servicio habilitada (o de mejor esfuerzo) durante la sobre (o sub) utilización de los recursos del sistema. La Figura 5 muestra que sin HyARM, la utilización de la red alcanzó hasta 0.9 durante el aumento de las condiciones de carga de trabajo, lo cual es mayor que el punto de ajuste de utilización de 0.7 en 0.2. Como resultado de la sobreutilización de recursos, la calidad de servicio (QoS) del video recibido, como la latencia promedio y el jitter, se vio afectada significativamente. Sin HyARM, los recursos del sistema estaban subutilizados o sobreutilizados, ambos de los cuales son indeseables. En contraste, con HyARM, la utilización de recursos del sistema siempre está cerca del punto de ajuste deseado, incluso durante las fluctuaciones en la carga de trabajo de la aplicación. Durante fluctuaciones repentinas en la carga de trabajo de la aplicación, las condiciones del sistema pueden ser temporalmente indeseables, pero se restauran a la condición deseada dentro de varios períodos de muestreo. La sobreutilización temporal de recursos es permisible en nuestro sistema multimedia, ya que la calidad del video puede degradarse por un corto período de tiempo, aunque la calidad del servicio de la aplicación se verá significativamente degradada si se transmite un video de baja calidad durante un período de tiempo más largo. Comparación de la calidad de servicio de la aplicación. Las Figuras 6, 7 y la Tabla 2 comparan la latencia, la variabilidad, la resolución y la velocidad de cuadro del video recibido, respectivamente. La Tabla 2 muestra que HyARM aumenta la resolución y la velocidad de cuadro de video de las aplicaciones habilitadas para QoS, pero disminuye la resolución y la velocidad de cuadro de las aplicaciones de mejor esfuerzo. Durante la sobreutilización de los recursos del sistema, la resolución y la velocidad de cuadros de las aplicaciones de menor prioridad se reducen para adaptarse a las fluctuaciones en la carga de trabajo de la aplicación y mantener la utilización de los recursos en el punto establecido especificado. Se puede observar en la Figura 6 y la Figura 7 que HyARM reduce significativamente la latencia y la variabilidad del video recibido. Estas cifras muestran que la calidad de servicio de las aplicaciones habilitadas para QoS se mejora considerablemente con HyARM. Aunque los parámetros de la aplicación, como la velocidad de cuadros y las resoluciones, que afectan los requisitos de QoS suave de las aplicaciones de mejor esfuerzo pueden verse comprometidos, se cumplen los requisitos de QoS estrictos, como la latencia y la variabilidad, de todas las aplicaciones. HyARM responde a las fluctuaciones en la disponibilidad de recursos y/o la demanda mediante el monitoreo constante de la utilización de recursos. Como se muestra en la Figura 4, cuando la utilización de recursos aumenta por encima del punto de ajuste deseado, HyARM reduce la utilización disminuyendo la calidad de servicio de las aplicaciones de mejor esfuerzo. Esta adaptación garantiza que haya suficientes recursos disponibles para que las aplicaciones habilitadas para QoS cumplan con sus necesidades de QoS. Las figuras 6 y 7 muestran que los valores de latencia y jitter del video recibido del sistema con HyARM son casi la mitad de los valores correspondientes del sistema sin HyARM. Con HyARM, los valores de estos parámetros están muy por debajo de los límites especificados, mientras que sin HyARM, estos valores están significativamente por encima de los límites especificados debido a la sobreutilización del ancho de banda de la red, lo que conduce a la congestión de la red y resulta en la pérdida de paquetes. HyARM evita esto reduciendo parámetros de video como la resolución, la velocidad de cuadros y/o modificando el esquema de compresión utilizado para comprimir el video. Nuestras conclusiones al analizar los resultados descritos anteriormente son que la aplicación de middleware adaptativo a través de control híbrido en sistemas DRE ayuda a (1) mejorar la calidad de servicio de la aplicación, (2) aumentar la utilización de recursos del sistema y (3) proporcionar una mejor previsibilidad (menor latencia y retraso entre fotogramas) a las aplicaciones habilitadas para calidad de servicio. Estas mejoras se logran en gran medida gracias al monitoreo de la utilización de recursos del sistema, la gestión eficiente de la carga de trabajo del sistema y la provisión adaptativa de recursos mediante los monitores de recursos de red/CPU de HyARMs, el adaptador de aplicaciones y el controlador central, respectivamente. TRABAJO RELACIONADO Recientemente se han aplicado varios enfoques teóricos de control a los sistemas DRE. Estas técnicas ayudan a superar las limitaciones de los enfoques de programación tradicionales que manejan mal los cambios dinámicos en la disponibilidad de recursos y resultan en un sistema programado rígidamente que se adapta mal a los cambios. Se presenta una encuesta de estas técnicas en [1]. Un enfoque de este tipo es la programación de control de retroalimentación (FCS) [2, 11]. Los algoritmos de FCS ajustan dinámicamente la asignación de recursos mediante bucles de control de retroalimentación de software. Los algoritmos de FCS se modelan y diseñan utilizando metodologías rigurosas de teoría de control. Estos algoritmos ofrecen garantías de rendimiento robusto y analítico a pesar de las incertidumbres en la disponibilidad de recursos y/o demanda. Aunque los algoritmos de FCS existentes han mostrado promesa, a menudo estos algoritmos asumen que el sistema tiene variable(s) de control continuas que pueden ajustarse continuamente. Si bien esta suposición es válida para ciertas clases de sistemas, existen muchas clases de sistemas DRE, como la aviónica y los entornos informáticos de barcos completos, que solo admiten un conjunto finito a priori de configuraciones discretas. Por lo tanto, las variables de control en tales sistemas son intrínsecamente discretas. HyARM maneja tanto variables de control continuas, como la resolución de la imagen, como variables de control discretas, como un conjunto discreto de velocidades de cuadro. HyARM puede aplicarse a sistemas que admiten un conjunto continuo y/o discreto de variables de control. El sistema multimedia DRE descrito en la Sección 2 es un ejemplo de sistema DRE que ofrece tanto variables de control continuas (resolución de imagen) como un conjunto discreto (velocidad de cuadros). Estas variables son modificadas por HyARM para lograr una utilización eficiente de recursos y una mejora en la calidad de servicio de la aplicación. CONCLUSIONES Artículo 7 Figura 6: Comparación de la latencia del video Figura 7: Comparación de la fluctuación del video Fuente Tamaño de imagen / Velocidad de cuadro Con HyARM Sin HyARM UAV1 Aplicación habilitada para QoS 1122 X 1496 / 25 960 X 720 / 20 UAV1 Aplicación de mejor esfuerzo 288 X 384 / 15 640 X 480 / 20 UAV2 Aplicación habilitada para QoS 1126 X 1496 / 25 960 X 720 / 20 UAV2 Aplicación de mejor esfuerzo 288 X 384 / 15 640 X 480 / 20 Tabla 2: Comparación de la calidad del video Muchos sistemas distribuidos en tiempo real y embebidos (DRE) demandan la aplicación correcta de la calidad de servicio (QoS) de extremo a extremo desde sus plataformas subyacentes para operar correctamente. Estos sistemas cada vez se ejecutan en entornos abiertos, donde la disponibilidad de recursos está sujeta a cambios dinámicos. Para cumplir con la calidad de servicio de extremo a extremo en <br>entornos dinámicos</br>, los sistemas DRE pueden beneficiarse de un middleware adaptativo que monitorea los recursos del sistema, realiza una gestión eficiente de la carga de trabajo de la aplicación y permite una provisión eficiente de recursos para la ejecución de aplicaciones. Este artículo describe HyARM, un middleware adaptativo que proporciona una gestión efectiva de recursos a los sistemas DRE. HyARM emplea técnicas de control híbrido para proporcionar las capacidades de middleware adaptativo, como el monitoreo de recursos y la adaptación de aplicaciones, que son clave para ofrecer las capacidades de gestión de recursos dinámicos para sistemas DRE abiertos. Empleamos HyARM en un sistema multimedia DRE representativo que está implementado utilizando CORBA en tiempo real y el Servicio de Transmisión de Audio/Vídeo de CORBA. Evaluamos el rendimiento de HyARM en un sistema compuesto por tres recursos distribuidos y dos clases de aplicaciones con dos aplicaciones cada una. Nuestros resultados empíricos indican que HyARM garantiza (1) la utilización eficiente de recursos al mantener la utilización de recursos del sistema dentro de los límites de utilización especificados, (2) los requisitos de calidad de servicio de las aplicaciones habilitadas para QoS se cumplen en todo momento. En general, HyARM garantiza una gestión eficiente, predecible y adaptable de recursos para sistemas DRE. REFERENCIAS [1] T. F. Abdelzaher, J. Stankovic, C. Lu, R. Zhang y Y. Lu. Control de rendimiento de retroalimentación en servicios de software. IEEE: Sistemas de Control, 23(3), junio de 2003. [2] L. Abeni, L. Palopoli, G. Lipari y J. Walpole. Análisis de un planificador de retroalimentación basado en reservas. En el Simposio de Sistemas en Tiempo Real de IEEE, Diciembre de 2002. [3] S. Blake, D. Black, M. Carlson, E. Davies, Z. Wang y W. Weiss. Una arquitectura para servicios diferenciados. Centro de Información de la Red RFC 2475, Dic. 1998. [4] H. Franke, S. Nagar, C. Seetharaman y V. Kashyap. Habilitando la Gestión Autonómica de la Carga de Trabajo en Linux. En Actas de la Conferencia Internacional sobre Computación Autónoma (ICAC), Nueva York, Nueva York, mayo de 2004. IEEE. [5] E. Gamma, R. Helm, R. Johnson, y J. Vlissides. Patrones de diseño: Elementos de software orientado a objetos reutilizable. Addison-Wesley, Reading, MA, 1995. [6] G. Ghinea y J. P. Thomas. Impacto de QoS en la percepción y comprensión del usuario de videoclips multimedia. En MULTIMEDIA 98: Actas de la sexta conferencia internacional de ACM sobre Multimedia, páginas 49-54, Bristol, Reino Unido, 1998. ACM Press. [7] Grupo de Trabajo de Ingeniería de Internet. Grupo de Trabajo de Servicios Diferenciados (diffserv) Carta. www.ietf.org/html.charters/diffserv-charter.html, 2000. [8] X. Koutsoukos, R. Tekumalla, B. Natarajan y C. Lu. Control híbrido supervisado de sistemas en tiempo real. En el 11º Simposio de Tecnología y Aplicaciones en Tiempo Real y Sistemas Empotrados de IEEE, San Francisco, California, Mar. 2005. [9] J. Lehoczky, L. Sha y Y. Ding. El algoritmo de programación Rate Monotonic: Caracterización exacta y comportamiento en casos promedio. En Actas del 10º Simposio de Sistemas en Tiempo Real de IEEE (RTSS 1989), páginas 166-171. IEEE Computer Society Press, 1989. [10] J. Loyall, J. Gossett, C. Gill, R. Schantz, J. Zinky, P. Pal, R. Shapiro, C. Rodrigues, M. Atighetchi, and D. Karr.\n\nIEEE Computer Society Press, 1989. [10] J. Loyall, J. Gossett, C. Gill, R. Schantz, J. Zinky, P. Pal, R. Shapiro, C. Rodrigues, M. Atighetchi y D. Karr. Comparando y contrastando el soporte de middleware adaptativo en aplicaciones de objetos distribuidos de área amplia y embebidos. En Actas de la 21ª Conferencia Internacional sobre Sistemas de Computación Distribuida (ICDCS-21), páginas 625-634. IEEE, Abr. 2001. [11] C. Lu, J. A. Stankovic, G. Tao y S. H. Son. Programación en tiempo real con control de retroalimentación: Marco, modelado y algoritmos. Revista de Sistemas en Tiempo Real, 23(1/2):85-126, julio de 2002. [12] Object Management Group. Especificación CORBA en tiempo real, documento formal/02-08-02 de OMG, edición de agosto de 2002. [13] D. C. Schmidt, D. L. Levine y S. Mungee. El diseño y rendimiento de los corredores de solicitudes de objetos en tiempo real. Comunicaciones de Computadoras, 21(4):294-324, Abr. 1998. [14] Thomas Sikora. Tendencias y perspectivas en codificación de imágenes y videos. En Actas del IEEE, enero de 2005. [15] X. Wang, H.-M. Huang, V. Subramonian, C. Lu y C. Gill. CAMRIT: Middleware Adaptativo Basado en Control para la Transmisión de Imágenes en Tiempo Real. En Actas del 10º Simposio de Tecnología y Aplicaciones en Tiempo Real y Sistemas Empotrados del IEEE (RTAS), Toronto, Canadá, mayo de 2004. Artículo 7 ",
            "candidates": [],
            "error": [
                [
                    ""
                ]
            ]
        },
        "streaming service": {
            "translated_key": "Servicio de Streaming de Audio y Video",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Evaluating Adaptive Resource Management for Distributed Real-Time Embedded Systems Nishanth Shankaran, ∗ Xenofon Koutsoukos, Douglas C. Schmidt, and Aniruddha Gokhale Dept.",
                "of EECS, Vanderbilt University, Nashville ABSTRACT A challenging problem faced by researchers and developers of distributed real-time and embedded (DRE) systems is devising and implementing effective adaptive resource management strategies that can meet end-to-end quality of service (QoS) requirements in varying operational conditions.",
                "This paper presents two contributions to research in adaptive resource management for DRE systems.",
                "First, we describe the structure and functionality of the Hybrid Adaptive Resourcemanagement Middleware (HyARM), which provides adaptive resource management using hybrid control techniques for adapting to workload fluctuations and resource availability.",
                "Second, we evaluate the adaptive behavior of HyARM via experiments on a DRE multimedia system that distributes video in real-time.",
                "Our results indicate that HyARM yields predictable, stable, and high system performance, even in the face of fluctuating workload and resource availability.",
                "Categories and Subject Descriptors C.2.4 [Distributed Systems]: Distributed Applications; D.4.7 [Organization and Design]: Real-time Systems and Embedded Systems 1.",
                "INTRODUCTION Achieving end-to-end real-time quality of service (QoS) is particularly important for open distributed real-time and embedded (DRE) systems that face resource constraints, such as limited computing power and network bandwidth.",
                "Overutilization of these system resources can yield unpredictable and unstable behavior, whereas under-utilization can yield excessive system cost.",
                "A promising approach to meeting these end-to-end QoS requirements effectively, therefore, is to develop and apply adaptive middleware [10, 15], which is software whose functional and QoS-related properties can be modified either statically or dynamically.",
                "Static modifications are carried out to reduce footprint, leverage capabilities that exist in specific platforms, enable functional subsetting, and/or minimize hardware/software infrastructure dependencies.",
                "Objectives of dynamic modifications include optimizing system responses to changing environments or requirements, such as changing component interconnections, power-levels, CPU and network bandwidth availability, latency/jitter, and workload.",
                "In open DRE systems, adaptive middleware must make such modifications dependably, i.e., while meeting stringent end-to-end QoS requirements, which requires the specification and enforcement of upper and lower bounds on system resource utilization to ensure effective use of system resources.",
                "To meet these requirements, we have developed the Hybrid Adaptive Resource-management Middleware (HyARM), which is an open-source1 distributed resource management middleware.",
                "HyARM is based on hybrid control theoretic techniques [8], which provide a theoretical framework for designing control of complex system with both continuous and discrete dynamics.",
                "In our case study, which involves a distributed real-time video distribution system, the task of adaptive resource management is to control the utilization of the different resources, whose utilizations are described by continuous variables.",
                "We achieve this by adapting the resolution of the transmitted video, which is modeled as a continuous variable, and by changing the frame-rate and the compression, which are modeled by discrete actions.",
                "We have implemented HyARM atop The ACE ORB (TAO) [13], which is an implementation of the Real-time CORBA specification [12].",
                "Our results show that (1) HyARM ensures effective system resource utilization and (2) end-to-end QoS requirements of higher priority applications are met, even in the face of fluctuations in workload.",
                "The remainder of the paper is organized as follows: Section 2 describes the architecture, functionality, and resource utilization model of our DRE multimedia system case study; Section 3 explains the structure and functionality of HyARM; Section 4 evaluates the adaptive behavior of HyARM via experiments on our multimedia system case study; Section 5 compares our research on HyARM with related work; and Section 6 presents concluding remarks. 1 The code and examples for HyARM are available at www. dre.vanderbilt.edu/∼nshankar/HyARM/.",
                "Article 7 2.",
                "CASE STUDY: DRE MULTIMEDIA SYSTEM This section describes the architecture and QoS requirements of our DRE multimedia system. 2.1 Multimedia System Architecture Wireless Link Wireless Link Wireless Link ` ` ` Physical Link Physical Link Physical Link Base Station End Receiver End Receiver End Receiver` Physical Link End Receiver UAV Camera Video Encoder Camera Video Encoder Camera Video Encoder UAV Camera Video Encoder Camera Video Encoder Camera Video Encoder UAV Camera Video Encoder Camera Video Encoder Camera Video Encoder Figure 1: DRE Multimedia System Architecture The architecture for our DRE multimedia system is shown in Figure 1 and consists of the following entities: (1)Data source (video capture by UAV), where video is captured (related to subject of interest) by camera(s) on each UAV, followed by encoding of raw video using a specific encoding scheme and transmitting the video to the next stage in the pipeline. (2)Data distributor (base station), where the video is processed to remove noise, followed by retransmission of the processed video to the next stage in the pipeline. (3) Sinks (command and control center), where the received video is again processed to remove noise, then decoded and finally rendered to end user via graphical displays.",
                "Significant improvements in video encoding/decoding and (de)compression techniques have been made as a result of recent advances in video encoding and compression techniques [14].",
                "Common video compression schemes are MPEG1, MPEG-2, Real Video, and MPEG-4.",
                "Each compression scheme is characterized by its resource requirement, e.g., the computational power to (de)compress the video signal and the network bandwidth required to transmit the compressed video signal.",
                "Properties of the compressed video, such as resolution and frame-rate determine both the quality and the resource requirements of the video.",
                "Our multimedia system case study has the following endto-end real-time QoS requirements: (1) latency, (2) interframe delay (also know as jitter), (3) frame rate, and (4) picture resolution.",
                "These QoS requirements can be classified as being either hard or soft.",
                "Hard QoS requirements should be met by the underlying system at all times, whereas soft QoS requirements can be missed occasionally.2 For our case study, we treat QoS requirements such as latency and jitter as harder QoS requirements and strive to meet these requirements at all times.",
                "In contrast, we treat QoS requirements such as video frame rate and picture resolution as softer QoS requirements and modify these video properties adaptively to handle dynamic changes in resource availabil2 Although hard and soft are often portrayed as two discrete requirement sets, in practice they are usually two ends of a continuum ranging from softer to harder rather than two disjoint points. ity effectively. 2.2 DRE Multimedia System Rresources There are two primary types of resources in our DRE multimedia system: (1) processors that provide computational power available at the UAVs, base stations, and end receivers and (2) network links that provide communication bandwidth between UAVs, base stations, and end receivers.",
                "The computing power required by the video capture and encoding tasks depends on dynamic factors, such as speed of the UAV, speed of the subject (if the subject is mobile), and distance between UAV and the subject.",
                "The wireless network bandwidth available to transmit video captured by UAVs to base stations also depends on the wireless connectivity between the UAVs and the base station, which in-turn depend on dynamic factors such as the speed of the UAVs and the relative distance between UAVs and base stations.",
                "The bandwidth of the link between the base station and the end receiver is limited, but more stable than the bandwidth of the wireless network.",
                "Resource requirements and availability of resources are subjected to dynamic changes.",
                "Two classes of applications - QoS-enabled and best-effort - use the multimedia system infrastructure described above to transmit video to their respective receivers.",
                "QoS-enabled class of applications have higher priority over best-effort class of application.",
                "In our study, emergency response applications belong to QoS-enabled and surveillance applications belong to best-effort class.",
                "For example, since a stream from an emergency response application is of higher importance than a video stream from a surveillance application, it receives more resources end-to-end.",
                "Since resource availability significantly affects QoS, we use current resource utilization as the primary indicator of system performance.",
                "We refer to the current level of system resource utilization as the system condition.",
                "Based on this definition, we can classify system conditions as being either under, over, or effectively utilized.",
                "Under-utilization of system resources occurs when the current resource utilization is lower than the desired lower bound on resource utilization.",
                "In this system condition, residual system resources (i.e., network bandwidth and computational power) are available in large amounts after meeting end-to-end QoS requirements of applications.",
                "These residual resources can be used to increase the QoS of the applications.",
                "For example, residual CPU and network bandwidth can be used to deliver better quality video (e.g., with greater resolution and higher frame rate) to end receivers.",
                "Over-utilization of system resources occurs when the current resource utilization is higher than the desired upper bound on resource utilization.",
                "This condition can arise from loss of resources - network bandwidth and/or computing power at base station, end receiver or at UAV - or may be due to an increase in resource demands by applications.",
                "Over-utilization is generally undesirable since the quality of the received video (such as resolution and frame rate) and timeliness properties (such as latency and jitter) are degraded and may result in an unstable (and thus ineffective) system.",
                "Effective resource utilization is the desired system condition since it ensures that end-to-end QoS requirements of the UAV-based multimedia system are met and utilization of both system resources, i.e., network bandwidth and computational power, are within their desired utilization bounds.",
                "Article 7 Section 3 describes techniques we applied to achieve effective utilization, even in the face of fluctuating resource availability and/or demand. 3.",
                "OVERVIEW OF HYARM This section describes the architecture of the Hybrid Adaptive Resource-management Middleware (HyARM).",
                "HyARM ensures efficient and predictable system performance by providing adaptive resource management, including monitoring of system resources and enforcing bounds on application resource utilization. 3.1 HyARM Structure and Functionality Resource Utilization Legend Resource Allocation Application Parameters Figure 2: HyARM Architecture HyARM is composed of three types of entities shown in Figure 2 and described below: Resource monitors observe the overall resource utilization for each type of resource and resource utilization per application.",
                "In our multimedia system, there are resource monitors for CPU utilization and network bandwidth.",
                "CPU monitors observe the CPU resource utilization of UAVs, base station, and end receivers.",
                "Network bandwidth monitors observe the network resource utilization of (1) wireless network link between UAVs and the base station and (2) wired network link between the base station and end receivers.",
                "The central controller maintains the system resource utilization below a desired bound by (1) processing periodic updates it receives from resource monitors and (2) modifying the execution of applications accordingly, e.g., by using different execution algorithms or operating the application with increased/decreased QoS.",
                "This adaptation process ensures that system resources are utilized efficiently and end-to-end application QoS requirements are met.",
                "In our multimedia system, the HyARM controller determines the value of application parameters such as (1) video compression schemes, such as Real Video and MPEG-4, and/or (2) frame rate, and (3) picture resolution.",
                "From the perspective of hybrid control theoretic techniques [8], the different video compression schemes and frame rate form the discrete variables of application execution and picture resolution forms the continuous variables.",
                "Application adapters modify application execution according to parameters recommended by the controller and ensures that the operation of the application is in accordance with the recommended parameters.",
                "In the current mplementation of HyARM, the application adapter modifies the input parameters to the application that affect application QoS and resource utilization - compression scheme, frame rate, and picture resolution.",
                "In our future implementations, we plan to use resource reservation mechanisms such as Differentiated Service [7, 3] and Class-based Kernel Resource Management [4] to provision/reserve network and CPU resources.",
                "In our multimedia system, the application adapter ensures that the video is encoded at the recommended frame rate and resolution using the specified compression scheme. 3.2 Applying HyARM to the Multimedia System Case Study HyARM is built atop TAO [13], a widely used open-source implementation of Real-time CORBA [12].",
                "HyARM can be applied to ensure efficient, predictable and adaptive resource management of any DRE system where resource availability and requirements are subject to dynamic change.",
                "Figure 3 shows the interaction of various parts of the DRE multimedia system developed with HyARM, TAO, and TAOs A/V <br>streaming service</br>.",
                "TAOs A/V <br>streaming service</br> is an implementation of the CORBA A/V <br>streaming service</br> specification.",
                "TAOs A/V <br>streaming service</br> is a QoS-enabled video distribution service that can transfer video in real-time to one or more receivers.",
                "We use the A/V <br>streaming service</br> to transmit the video from the UAVs to the end receivers via the base station.",
                "Three entities of Receiver UAV TAO Resource Utilization HyARM Central Controller A/V <br>streaming service</br> : Sender MPEG1 MPEG4 Real Video HyARM Resource Monitor A/V <br>streaming service</br> : Receiver Compressed Video Compressed Video Application HyARM Application Adapter Remote Object Call Control Inputs Resource Utilization Resource Utilization / Control Inputs Control Inputs Legend Figure 3: Developing the DRE Multimedia System with HyARM HyARM, namely the resource monitors, central controller, and application adapters are built as CORBA servants, so they can be distributed throughout a DRE system.",
                "Resource monitors are remote CORBA objects that update the central controller periodically with the current resource utilization.",
                "Application adapters are collocated with applications since the two interact closely.",
                "As shown in Figure 3, UAVs compress the data using various compression schemes, such as MPEG1, MPEG4, and Real Video, and uses TAOs A/V <br>streaming service</br> to transmit the video to end receivers.",
                "HyARMs resource monitors continuously observe the system resource utilization and notify the central controller with the current utilization. 3 The interaction between the controller and the resource monitors uses the Observer pattern [5].",
                "When the controller receives resource utilization updates from monitors, it computes the necessary modifications to application(s) parameters and notifies application adapter(s) via a remote operation call.",
                "Application adapter(s), that are collocated with the application, modify the input parameters to the application - in our case video encoder - to modify the application resource utilization and QoS. 3 The base station is not included in the figure since it only retransmits the video received from UAVs to end receivers.",
                "Article 7 4.",
                "PERFORMANCE RESULTS AND ANALYSIS This section first describes the testbed that provides the infrastructure for our DRE multimedia system, which was used to evaluate the performance of HyARM.",
                "We then describe our experiments and analyze the results obtained to empirically evaluate how HyARM behaves during underand over-utilization of system resources. 4.1 Overview of the Hardware and Software Testbed Our experiments were performed on the Emulab testbed at University of Utah.",
                "The hardware configuration consists of two nodes acting as UAVs, one acting as base station, and one as end receiver.",
                "Video from the two UAVs were transmitted to a base station via a LAN configured with the following properties: average packet loss ratio of 0.3 and bandwidth 1 Mbps.",
                "The network bandwidth was chosen to be 1 Mbps since each UAV in the DRE multimedia system is allocated 250 Kbps.",
                "These parameters were chosen to emulate an unreliable wireless network with limited bandwidth between the UAVs and the base station.",
                "From the base station, the video was retransmitted to the end receiver via a reliable wireline link of 10 Mbps bandwidth with no packet loss.",
                "The hardware configuration of all the nodes was chosen as follows: 600 MHz Intel Pentium III processor, 256 MB physical memory, 4 Intel EtherExpress Pro 10/100 Mbps Ethernet ports, and 13 GB hard drive.",
                "A real-time version of Linux - TimeSys Linux/NET 3.1.214 based on RedHat Linux 9was used as the operating system for all nodes.",
                "The following software packages were also used for our experiments: (1) Ffmpeg 0.4.9-pre1, which is an open-source library (http: //www.ffmpeg.sourceforge.net/download.php) that compresses video into MPEG-2, MPEG-4, Real Video, and many other video formats. (2) Iftop 0.16, which is an opensource library (http://www.ex-parrot.com/∼pdw/iftop/) we used for monitoring network activity and bandwidth utilization. (3) ACE 5.4.3 + TAO 1.4.3, which is an opensource (http://www.dre.vanderbilt.edu/TAO) implementation of the Real-time CORBA [12] specification upon which HyARM is built.",
                "TAO provides the CORBA Audio/Video (A/V) <br>streaming service</br> that we use to transmit the video from the UAVs to end receivers via the base station. 4.2 Experiment Configuration Our experiment consisted of two (emulated) UAVs that simultaneously send video to the base station using the experimentation setup described in Section 4.1.",
                "At the base station, video was retransmitted to the end receivers (without any modifications), where it was stored to a file.",
                "Each UAV hosted two applications, one QoS-enabled application (emergency response), and one best-effort application (surveillance).",
                "Within each UAV, computational power is shared between the applications, while the network bandwidth is shared among all applications.",
                "To evaluate the QoS provided by HyARM, we monitored CPU utilization at the two UAVs, and network bandwidth utilization between the UAV and the base station.",
                "CPU resource utilization was not monitored at the base station and the end receiver since they performed no computationallyintensive operations.",
                "The resource utilization of the 10 Mpbs physical link between the base station and the end receiver does not affect QoS of applications and is not monitored by HyARM since it is nearly 10 times the 1 MB bandwidth of the LAN between the UAVs and the base station.",
                "The experiment also monitors properties of the video that affect the QoS of the applications, such as latency, jitter, frame rate, and resolution.",
                "The set point on resource utilization for each resource was specified at 0.69, which is the upper bound typically recommended by scheduling techniques, such as rate monotonic algorithm [9].",
                "Since studies [6] have shown that human eyes can perceive delays more than 200ms, we use this as the upper bound on jitter of the received video.",
                "QoS requirements for each class of application is specified during system initialization and is shown in Table 1. 4.3 Empirical Results and Analysis This section presents the results obtained from running the experiment described in Section 4.2 on our DRE multimedia system testbed.",
                "We used system resource utilization as a metric to evaluate the adaptive resource management capabilities of HyARM under varying input work loads.",
                "We also used application QoS as a metric to evaluate HyARMs capabilities to support end-to-end QoS requirements of the various classes of applications in the DRE multimedia system.",
                "We analyze these results to explain the significant differences in system performance and application QoS.",
                "Comparison of system performance is decomposed into comparison of resource utilization and application QoS.",
                "For system resource utilization, we compare (1) network bandwidth utilization of the local area network and (2) CPU utilization at the two UAV nodes.",
                "For application QoS, we compare mean values of video parameters, including (1) picture resolution, (2) frame rate, (3) latency, and (4) jitter.",
                "Comparison of resource utilization.",
                "Over-utilization of system resources in DRE systems can yield an unstable system.",
                "In contrast, under-utilization of system resources increases system cost.",
                "Figure 4 and Figure 5 compare the system resource utilization with and without HyARM.",
                "Figure 4 shows that HyARM maintains system utilization close to the desired utilization set point during fluctuation in input work load by transmitting video of higher (or lower) QoS for QoS-enabled (or best-effort) class of applications during over (or under) utilization of system resources.",
                "Figure 5 shows that without HyARM, network utilization was as high as 0.9 during increase in workload conditions, which is greater than the utilization set point of 0.7 by 0.2.",
                "As a result of over-utilization of resources, QoS of the received video, such as average latency and jitter, was affected significantly.",
                "Without HyARM, system resources were either under-utilized or over-utilized, both of which are undesirable.",
                "In contrast, with HyARM, system resource utilization is always close to the desired set point, even during fluctuations in application workload.",
                "During sudden fluctuation in application workload, system conditions may be temporarily undesirable, but are restored to the desired condition within several sampling periods.",
                "Temporary over-utilization of resources is permissible in our multimedia system since the quality of the video may be degraded for a short period of time, though application QoS will be degraded significantly if poor quality video is transmitted for a longer period of time.",
                "Comparison of application QoS.",
                "Figures 6, Figure 7, and Table 2 compare latency, jitter, resolution, and frameArticle 7 Class Resolution Frame Rate Latency (msec ) Jitter (msec) QoS Enabled 1024 x 768 25 200 200 Best-effort 320 x 240 15 300 250 Table 1: Application QoS Requirements Figure 4: Resource utilization with HyARM Figure 5: Resource utilization without HyARM rate of the received video, respectively.",
                "Table 2 shows that HyARM increases the resolution and frame video of QoSenabled applications, but decreases the resolution and frame rate of best effort applications.",
                "During over utilization of system resources, resolution and frame rate of lower priority applications are reduced to adapt to fluctuations in application workload and to maintain the utilization of resources at the specified set point.",
                "It can be seen from Figure 6 and Figure 7 that HyARM reduces the latency and jitter of the received video significantly.",
                "These figures show that the QoS of QoS-enabled applications is greatly improved by HyARM.",
                "Although application parameters, such as frame rate and resolutions, which affect the soft QoS requirements of best-effort applications may be compromised, the hard QoS requirements, such as latency and jitter, of all applications are met.",
                "HyARM responds to fluctuation in resource availability and/or demand by constant monitoring of resource utilization.",
                "As shown in Figure 4, when resources utilization increases above the desired set point, HyARM lowers the utilization by reducing the QoS of best-effort applications.",
                "This adaptation ensures that enough resources are available for QoS-enabled applications to meet their QoS needs.",
                "Figures 6 and 7 show that the values of latency and jitter of the received video of the system with HyARM are nearly half of the corresponding value of the system without HyARM.",
                "With HyARM, values of these parameters are well below the specified bounds, whereas without HyARM, these value are significantly above the specified bounds due to overutilization of the network bandwidth, which leads to network congestion and results in packet loss.",
                "HyARM avoids this by reducing video parameters such as resolution, frame-rate, and/or modifying the compression scheme used to compress the video.",
                "Our conclusions from analyzing the results described above are that applying adaptive middleware via hybrid control to DRE system helps to (1) improve application QoS, (2) increase system resource utilization, and (3) provide better predictability (lower latency and inter-frame delay) to QoSenabled applications.",
                "These improvements are achieved largely due to monitoring of system resource utilization, efficient system workload management, and adaptive resource provisioning by means of HyARMs network/CPU resource monitors, application adapter, and central controller, respectively. 5.",
                "RELATED WORK A number of control theoretic approaches have been applied to DRE systems recently.",
                "These techniques aid in overcoming limitations with traditional scheduling approaches that handle dynamic changes in resource availability poorly and result in a rigidly scheduled system that adapts poorly to change.",
                "A survey of these techniques is presented in [1].",
                "One such approach is feedback control scheduling (FCS) [2, 11].",
                "FCS algorithms dynamically adjust resource allocation by means of software feedback control loops.",
                "FCS algorithms are modeled and designed using rigorous controltheoretic methodologies.",
                "These algorithms provide robust and analytical performance assurances despite uncertainties in resource availability and/or demand.",
                "Although existing FCS algorithms have shown promise, these algorithms often assume that the system has continuous control variable(s) that can continuously be adjusted.",
                "While this assumption holds for certain classes of systems, there are many classes of DRE systems, such as avionics and total-ship computing environments that only support a finite a priori set of discrete configurations.",
                "The control variables in such systems are therefore intrinsically discrete.",
                "HyARM handles both continuous control variables, such as picture resolution, and discrete control variable, such as discrete set of frame rates.",
                "HyARM can therefore be applied to system that support continuous and/or discrete set of control variables.",
                "The DRE multimedia system as described in Section 2 is an example DRE system that offers both continuous (picture resolution) and discrete set (frame-rate) of control variables.",
                "These variables are modified by HyARM to achieve efficient resource utilization and improved application QoS. 6.",
                "CONCLUDING REMARKS Article 7 Figure 6: Comparison of Video Latency Figure 7: Comparison of Video Jitter Source Picture Size / Frame Rate With HyARM Without HyARM UAV1 QoS Enabled Application 1122 X 1496 / 25 960 X 720 / 20 UAV1 Best-effort Application 288 X 384 / 15 640 X 480 / 20 UAV2 QoS Enabled Application 1126 X 1496 / 25 960 X 720 / 20 UAV2 Best-effort Application 288 X 384 / 15 640 X 480 / 20 Table 2: Comparison of Video Quality Many distributed real-time and embedded (DRE) systems demand end-to-end quality of service (QoS) enforcement from their underlying platforms to operate correctly.",
                "These systems increasingly run in open environments, where resource availability is subject to dynamic change.",
                "To meet end-to-end QoS in dynamic environments, DRE systems can benefit from an adaptive middleware that monitors system resources, performs efficient application workload management, and enables efficient resource provisioning for executing applications.",
                "This paper described HyARM, an adaptive middleware, that provides effective resource management to DRE systems.",
                "HyARM employs hybrid control techniques to provide the adaptive middleware capabilities, such as resource monitoring and application adaptation that are key to providing the dynamic resource management capabilities for open DRE systems.",
                "We employed HyARM to a representative DRE multimedia system that is implemented using Real-time CORBA and CORBA A/V <br>streaming service</br>.",
                "We evaluated the performance of HyARM in a system composed of three distributed resources and two classes of applications with two applications each.",
                "Our empirical results indicate that HyARM ensures (1) efficient resource utilization by maintaining the resource utilization of system resources within the specified utilization bounds, (2) QoS requirements of QoS-enabled applications are met at all times.",
                "Overall, HyARM ensures efficient, predictable, and adaptive resource management for DRE systems. 7.",
                "REFERENCES [1] T. F. Abdelzaher, J. Stankovic, C. Lu, R. Zhang, and Y. Lu.",
                "Feddback Performance Control in Software Services.",
                "IEEE: Control Systems, 23(3), June 2003. [2] L. Abeni, L. Palopoli, G. Lipari, and J. Walpole.",
                "Analysis of a reservation-based feedback scheduler.",
                "In IEEE Real-Time Systems Symposium, Dec. 2002. [3] S. Blake, D. Black, M. Carlson, E. Davies, Z. Wang, and W. Weiss.",
                "An architecture for differentiated services.",
                "Network Information Center RFC 2475, Dec. 1998. [4] H. Franke, S. Nagar, C. Seetharaman, and V. Kashyap.",
                "Enabling Autonomic Workload Management in Linux.",
                "In Proceedings of the International Conference on Autonomic Computing (ICAC), New York, New York, May 2004.",
                "IEEE. [5] E. Gamma, R. Helm, R. Johnson, and J. Vlissides.",
                "Design Patterns: Elements of Reusable Object-Oriented Software.",
                "Addison-Wesley, Reading, MA, 1995. [6] G. Ghinea and J. P. Thomas.",
                "Qos impact on user perception and understanding of multimedia video clips.",
                "In MULTIMEDIA 98: Proceedings of the sixth ACM international conference on Multimedia, pages 49-54, Bristol, United Kingdom, 1998.",
                "ACM Press. [7] Internet Engineering Task Force.",
                "Differentiated Services Working Group (diffserv) Charter. www.ietf.org/html.charters/diffserv-charter.html, 2000. [8] X. Koutsoukos, R. Tekumalla, B. Natarajan, and C. Lu.",
                "Hybrid Supervisory Control of Real-Time Systems.",
                "In 11th IEEE Real-Time and Embedded Technology and Applications Symposium, San Francisco, California, Mar. 2005. [9] J. Lehoczky, L. Sha, and Y. Ding.",
                "The Rate Monotonic Scheduling Algorithm: Exact Characterization and Average Case Behavior.",
                "In Proceedings of the 10th IEEE Real-Time Systems Symposium (RTSS 1989), pages 166-171.",
                "IEEE Computer Society Press, 1989. [10] J. Loyall, J. Gossett, C. Gill, R. Schantz, J. Zinky, P. Pal, R. Shapiro, C. Rodrigues, M. Atighetchi, and D. Karr.",
                "Comparing and Contrasting Adaptive Middleware Support in Wide-Area and Embedded Distributed Object Applications.",
                "In Proceedings of the 21st International Conference on Distributed Computing Systems (ICDCS-21), pages 625-634.",
                "IEEE, Apr. 2001. [11] C. Lu, J.",
                "A. Stankovic, G. Tao, and S. H. Son.",
                "Feedback Control Real-Time Scheduling: Framework, Modeling, and Algorithms.",
                "Real-Time Systems Journal, 23(1/2):85-126, July 2002. [12] Object Management Group.",
                "Real-time CORBA Specification, OMG Document formal/02-08-02 edition, Aug. 2002. [13] D. C. Schmidt, D. L. Levine, and S. Mungee.",
                "The Design and Performance of Real-Time Object Request Brokers.",
                "Computer Communications, 21(4):294-324, Apr. 1998. [14] Thomas Sikora.",
                "Trends and Perspectives in Image and Video Coding.",
                "In Proceedings of the IEEE, Jan. 2005. [15] X. Wang, H.-M. Huang, V. Subramonian, C. Lu, and C. Gill.",
                "CAMRIT: Control-based Adaptive Middleware for Real-time Image Transmission.",
                "In Proc. of the 10th IEEE Real-Time and Embedded Tech. and Applications Symp. (RTAS), Toronto, Canada, May 2004.",
                "Article 7"
            ],
            "original_annotated_samples": [
                "Figure 3 shows the interaction of various parts of the DRE multimedia system developed with HyARM, TAO, and TAOs A/V <br>streaming service</br>.",
                "TAOs A/V <br>streaming service</br> is an implementation of the CORBA A/V <br>streaming service</br> specification.",
                "TAOs A/V <br>streaming service</br> is a QoS-enabled video distribution service that can transfer video in real-time to one or more receivers.",
                "We use the A/V <br>streaming service</br> to transmit the video from the UAVs to the end receivers via the base station.",
                "Three entities of Receiver UAV TAO Resource Utilization HyARM Central Controller A/V <br>streaming service</br> : Sender MPEG1 MPEG4 Real Video HyARM Resource Monitor A/V <br>streaming service</br> : Receiver Compressed Video Compressed Video Application HyARM Application Adapter Remote Object Call Control Inputs Resource Utilization Resource Utilization / Control Inputs Control Inputs Legend Figure 3: Developing the DRE Multimedia System with HyARM HyARM, namely the resource monitors, central controller, and application adapters are built as CORBA servants, so they can be distributed throughout a DRE system."
            ],
            "translated_annotated_samples": [
                "La Figura 3 muestra la interacción de varias partes del sistema multimedia DRE desarrollado con HyARM, TAO y el <br>Servicio de Streaming de Audio y Video</br> de TAOs.",
                "El <br>servicio de transmisión</br> de audio/vídeo de TAO es una implementación de la especificación del Servicio de Transmisión de Audio/Vídeo de CORBA.",
                "El <br>servicio de transmisión</br> de audio y video de TAOs es un servicio de distribución de video habilitado para QoS que puede transferir video en tiempo real a uno o más receptores.",
                "Utilizamos el <br>Servicio de Transmisión de Audio y Video</br> para enviar el video desde los VANTs a los receptores finales a través de la estación base.",
                "Tres entidades del sistema multimedia DRE con HyARM, a saber, los monitores de recursos, el controlador central y los adaptadores de aplicaciones, están construidos como servidores CORBA, por lo que pueden distribuirse en todo el sistema DRE."
            ],
            "translated_text": "Evaluando la Gestión de Recursos Adaptativa para Sistemas Empotrados Distribuidos en Tiempo Real de Nishanth Shankaran, Xenofon Koutsoukos, Douglas C. Schmidt y Aniruddha Gokhale, Dept. de EECS, Universidad de Vanderbilt, Nashville RESUMEN Un problema desafiante enfrentado por investigadores y desarrolladores de sistemas distribuidos en tiempo real y embebidos (DRE) es idear e implementar estrategias efectivas de gestión adaptativa de recursos que puedan cumplir con los requisitos de calidad de servicio (QoS) de extremo a extremo en condiciones operativas variables. Este artículo presenta dos contribuciones a la investigación en gestión de recursos adaptativa para sistemas DRE. Primero, describimos la estructura y funcionalidad del Middleware de Gestión de Recursos Adaptativos Híbridos (HyARM), que proporciona gestión de recursos adaptativa utilizando técnicas de control híbridas para adaptarse a las fluctuaciones de carga de trabajo y disponibilidad de recursos. Segundo, evaluamos el comportamiento adaptativo de HyARM a través de experimentos en un sistema multimedia DRE que distribuye video en tiempo real. Nuestros resultados indican que HyARM produce un rendimiento del sistema predecible, estable y alto, incluso ante cargas de trabajo y disponibilidad de recursos fluctuantes. Categorías y Descriptores de Asignaturas C.2.4 [Sistemas Distribuidos]: Aplicaciones Distribuidas; D.4.7 [Organización y Diseño]: Sistemas en Tiempo Real y Sistemas Embebidos 1. INTRODUCCIÓN Lograr la calidad de servicio (QoS) en tiempo real de extremo a extremo es particularmente importante para sistemas distribuidos en tiempo real y embebidos (DRE) abiertos que enfrentan limitaciones de recursos, como potencia de cómputo limitada y ancho de banda de red. La sobreutilización de estos recursos del sistema puede generar un comportamiento impredecible e inestable, mientras que la subutilización puede resultar en un costo excesivo del sistema. Un enfoque prometedor para cumplir de manera efectiva con estos requisitos de calidad de servicio de extremo a extremo, por lo tanto, es desarrollar y aplicar middleware adaptativo [10, 15], que es un software cuyas propiedades funcionales y relacionadas con la calidad de servicio pueden ser modificadas estática o dinámicamente. Las modificaciones estáticas se realizan para reducir la huella, aprovechar las capacidades existentes en plataformas específicas, habilitar la selección funcional y/o minimizar las dependencias de infraestructura de hardware/software. Los objetivos de las modificaciones dinámicas incluyen optimizar las respuestas del sistema a entornos o requisitos cambiantes, como la modificación de interconexiones de componentes, niveles de potencia, disponibilidad de ancho de banda de CPU y red, latencia/jitter y carga de trabajo. En los sistemas DRE abiertos, el middleware adaptativo debe realizar modificaciones de manera confiable, es decir, cumpliendo con los estrictos requisitos de calidad de servicio de extremo a extremo, lo que requiere la especificación y aplicación de límites superiores e inferiores en la utilización de recursos del sistema para garantizar un uso efectivo de los recursos del sistema. Para cumplir con estos requisitos, hemos desarrollado el Middleware de Gestión de Recursos Híbrido Adaptativo (HyARM), que es un middleware de gestión de recursos distribuido de código abierto. HyARM se basa en técnicas híbridas de control teórico, las cuales proporcionan un marco teórico para diseñar el control de sistemas complejos con dinámicas tanto continuas como discretas. En nuestro estudio de caso, que implica un sistema distribuido de distribución de video en tiempo real, la tarea de gestión de recursos adaptativa consiste en controlar la utilización de los diferentes recursos, cuyas utilizaciones están descritas por variables continuas. Logramos esto adaptando la resolución del video transmitido, que se modela como una variable continua, y cambiando la velocidad de cuadros y la compresión, que se modelan mediante acciones discretas. Hemos implementado HyARM sobre el ORB ACE (TAO) [13], que es una implementación de la especificación CORBA en tiempo real [12]. Nuestros resultados muestran que (1) HyARM garantiza una utilización efectiva de los recursos del sistema y (2) se cumplen los requisitos de calidad de servicio de extremo a extremo de las aplicaciones de mayor prioridad, incluso ante fluctuaciones en la carga de trabajo. El resto del documento está organizado de la siguiente manera: la Sección 2 describe la arquitectura, funcionalidad y modelo de utilización de recursos de nuestro estudio de caso del sistema multimedia DRE; la Sección 3 explica la estructura y funcionalidad de HyARM; la Sección 4 evalúa el comportamiento adaptativo de HyARM a través de experimentos en nuestro estudio de caso del sistema multimedia; la Sección 5 compara nuestra investigación sobre HyARM con trabajos relacionados; y la Sección 6 presenta observaciones finales. El código y ejemplos de HyARM están disponibles en www.dre.vanderbilt.edu/∼nshankar/HyARM/. Artículo 7 2. ESTUDIO DE CASO: SISTEMA MULTIMEDIA DRE Esta sección describe la arquitectura y los requisitos de QoS de nuestro sistema multimedia DRE. 2.1 Arquitectura del Sistema Multimedia Enlace Inalámbrico Enlace Inalámbrico Enlace Inalámbrico ` ` ` Enlace Físico Enlace Físico Enlace Físico Estación Base Extremo Receptor Extremo Receptor Extremo Receptor` Enlace Físico Extremo Receptor Cámara UAV Codificador de Video Cámara Codificador de Video Cámara Codificador de Video Cámara UAV Codificador de Video Cámara Codificador de Video Cámara Codificador de Video Cámara UAV Codificador de Video Cámara Codificador de Video Cámara Codificador de Video Figura 1: Arquitectura del Sistema Multimedia DRE La arquitectura de nuestro sistema multimedia DRE se muestra en la Figura 1 y consta de las siguientes entidades: (1) Fuente de datos (captura de video por UAV), donde el video es capturado (relacionado con el tema de interés) por la(s) cámara(s) en cada UAV, seguido por la codificación del video crudo utilizando un esquema de codificación específico y transmitiendo el video a la siguiente etapa en la cadena de procesamiento. (2) Distribuidor de datos (estación base), donde el video es procesado para eliminar ruido, seguido por la retransmisión del video procesado a la siguiente etapa en la cadena de procesamiento. (3) Destinos (centro de comando y control), donde el video recibido es nuevamente procesado para eliminar ruido, luego decodificado y finalmente renderizado al usuario final a través de pantallas gráficas. Se han logrado mejoras significativas en las técnicas de codificación/decodificación y compresión (des) de video como resultado de los avances recientes en las técnicas de codificación y compresión de video [14]. Los esquemas comunes de compresión de video son MPEG1, MPEG-2, Real Video y MPEG-4. Cada esquema de compresión se caracteriza por sus requisitos de recursos, por ejemplo, la potencia computacional para (des)comprimir la señal de video y el ancho de banda de red necesario para transmitir la señal de video comprimida. Las propiedades del video comprimido, como la resolución y la velocidad de fotogramas, determinan tanto la calidad como los requisitos de recursos del video. Nuestro estudio de caso del sistema multimedia tiene los siguientes requisitos de calidad de servicio (QoS) en tiempo real de extremo a extremo: (1) latencia, (2) retardo entre cuadros (también conocido como jitter), (3) frecuencia de cuadros y (4) resolución de imagen. Estos requisitos de calidad de servicio (QoS) pueden clasificarse como duros o blandos. Los requisitos de QoS estrictos deben ser cumplidos por el sistema subyacente en todo momento, mientras que los requisitos de QoS flexibles pueden ser ocasionalmente incumplidos. Para nuestro estudio de caso, tratamos los requisitos de QoS como la latencia y la variabilidad de retardo como requisitos de QoS más estrictos y nos esforzamos por cumplir con estos requisitos en todo momento. Por el contrario, tratamos los requisitos de QoS como la tasa de cuadros de video y la resolución de imagen como requisitos de QoS más flexibles y modificamos estas propiedades de video de manera adaptativa para manejar los cambios dinámicos en la disponibilidad de recursos de manera efectiva. Aunque a menudo se presentan como dos conjuntos de requisitos discretos, en la práctica suelen ser dos extremos de un continuo que va desde más suave a más duro en lugar de dos puntos disjuntos. La potencia informática requerida por las tareas de captura y codificación de video depende de factores dinámicos, como la velocidad del UAV, la velocidad del sujeto (si el sujeto es móvil) y la distancia entre el UAV y el sujeto. La cantidad de ancho de banda de la red inalámbrica disponible para transmitir video capturado por UAVs a estaciones base también depende de la conectividad inalámbrica entre los UAVs y la estación base, que a su vez depende de factores dinámicos como la velocidad de los UAVs y la distancia relativa entre los UAVs y las estaciones base. El ancho de banda del enlace entre la estación base y el receptor final está limitado, pero es más estable que el ancho de banda de la red inalámbrica. Los requisitos de recursos y la disponibilidad de recursos están sujetos a cambios dinámicos. Dos clases de aplicaciones - habilitadas para QoS y de mejor esfuerzo - utilizan la infraestructura del sistema multimedia descrita anteriormente para transmitir video a sus respectivos receptores. Las aplicaciones de clase habilitada para QoS tienen mayor prioridad sobre las aplicaciones de clase de mejor esfuerzo. En nuestro estudio, las aplicaciones de respuesta de emergencia pertenecen a la clase habilitada para la calidad de servicio (QoS), y las aplicaciones de vigilancia pertenecen a la clase de mejor esfuerzo. Por ejemplo, dado que un flujo de datos de una aplicación de respuesta de emergencia es de mayor importancia que un flujo de video de una aplicación de vigilancia, recibe más recursos de extremo a extremo. Dado que la disponibilidad de recursos afecta significativamente la calidad de servicio, utilizamos la utilización actual de recursos como indicador principal del rendimiento del sistema. Nos referimos al nivel actual de utilización de recursos del sistema como la condición del sistema. Basándonos en esta definición, podemos clasificar las condiciones del sistema como estando subutilizadas, sobreutilizadas o utilizadas de manera efectiva. La subutilización de los recursos del sistema ocurre cuando la utilización actual de los recursos es menor que el límite inferior deseado de utilización de recursos. En este sistema, los recursos residuales del sistema (es decir, ancho de banda de red y potencia computacional) están disponibles en grandes cantidades después de cumplir con los requisitos de calidad de servicio de extremo a extremo de las aplicaciones. Estos recursos residuales se pueden utilizar para aumentar la calidad de servicio de las aplicaciones. Por ejemplo, la CPU residual y el ancho de banda de red pueden ser utilizados para entregar videos de mejor calidad (por ejemplo, con mayor resolución y mayor velocidad de cuadros) a los receptores finales. La sobreutilización de los recursos del sistema ocurre cuando la utilización actual de recursos es mayor que el límite superior deseado de utilización de recursos. Esta condición puede surgir por la pérdida de recursos - ancho de banda de red y/o potencia de cómputo en la estación base, receptor final o en el UAV - o puede ser debido a un aumento en las demandas de recursos por parte de las aplicaciones. La sobreutilización es generalmente indeseable ya que la calidad del video recibido (como la resolución y la velocidad de cuadros) y las propiedades de puntualidad (como la latencia y la fluctuación) se degradan y pueden resultar en un sistema inestable (y por lo tanto ineficaz). La utilización efectiva de recursos es la condición deseada del sistema, ya que garantiza que se cumplan los requisitos de calidad de servicio de extremo a extremo del sistema multimedia basado en UAV y que la utilización de los recursos del sistema, es decir, el ancho de banda de la red y la potencia computacional, se encuentren dentro de sus límites de utilización deseados. El artículo 7, sección 3 describe las técnicas que aplicamos para lograr una utilización efectiva, incluso ante la disponibilidad y/o demanda fluctuante de recursos. DESCRIPCIÓN DE HYARM Esta sección describe la arquitectura del Middleware de Gestión de Recursos Adaptativos Híbrido (HyARM). HyARM garantiza un rendimiento eficiente y predecible del sistema al proporcionar gestión adaptativa de recursos, que incluye la monitorización de los recursos del sistema y la imposición de límites en la utilización de recursos de las aplicaciones. 3.1 Estructura y Funcionalidad de HyARM Leyenda de Utilización de Recursos Asignación de Recursos Parámetros de Aplicación Figura 2: Arquitectura de HyARM HyARM está compuesto por tres tipos de entidades mostradas en la Figura 2 y descritas a continuación: Los monitores de recursos observan la utilización general de recursos para cada tipo de recurso y la utilización de recursos por aplicación. En nuestro sistema multimedia, hay monitores de recursos para la utilización de la CPU y el ancho de banda de la red. Los monitores de la CPU observan la utilización de recursos de la CPU de los UAV, la estación base y los receptores finales. Los monitores de ancho de banda de red observan la utilización de recursos de red de (1) el enlace de red inalámbrica entre los UAV y la estación base y (2) el enlace de red cableada entre la estación base y los receptores finales. El controlador central mantiene la utilización de recursos del sistema por debajo de un límite deseado mediante (1) el procesamiento de actualizaciones periódicas que recibe de los monitores de recursos y (2) modificando la ejecución de las aplicaciones en consecuencia, por ejemplo, utilizando diferentes algoritmos de ejecución u operando la aplicación con mayor/menor calidad de servicio (QoS). Este proceso de adaptación garantiza que los recursos del sistema se utilicen de manera eficiente y se cumplan los requisitos de calidad de servicio de la aplicación de extremo a extremo. En nuestro sistema multimedia, el controlador HyARM determina el valor de parámetros de la aplicación como (1) esquemas de compresión de video, como Real Video y MPEG-4, y/o (2) velocidad de cuadros, y (3) resolución de imagen. Desde la perspectiva de las técnicas híbridas de control teórico [8], los diferentes esquemas de compresión de video y la velocidad de cuadros forman las variables discretas de la ejecución de la aplicación, mientras que la resolución de imagen forma las variables continuas. Los adaptadores de aplicación modifican la ejecución de la aplicación de acuerdo con los parámetros recomendados por el controlador y garantizan que el funcionamiento de la aplicación esté de acuerdo con los parámetros recomendados. En la implementación actual de HyARM, el adaptador de la aplicación modifica los parámetros de entrada a la aplicación que afectan la calidad de servicio (QoS) de la aplicación y la utilización de recursos, como el esquema de compresión, la velocidad de fotogramas y la resolución de la imagen. En nuestras futuras implementaciones, planeamos utilizar mecanismos de reserva de recursos como Differentiated Service [7, 3] y Class-based Kernel Resource Management [4] para aprovisionar/reservar recursos de red y CPU. En nuestro sistema multimedia, el adaptador de la aplicación se asegura de que el video se codifique a la velocidad de cuadros y resolución recomendadas utilizando el esquema de compresión especificado. 3.2 Aplicando HyARM al Estudio de Caso del Sistema Multimedia. HyARM se construye sobre TAO [13], una implementación de código abierto ampliamente utilizada de CORBA en tiempo real [12]. HyARM se puede aplicar para garantizar una gestión eficiente, predecible y adaptable de recursos en cualquier sistema DRE donde la disponibilidad y los requisitos de recursos están sujetos a cambios dinámicos. La Figura 3 muestra la interacción de varias partes del sistema multimedia DRE desarrollado con HyARM, TAO y el <br>Servicio de Streaming de Audio y Video</br> de TAOs. El <br>servicio de transmisión</br> de audio/vídeo de TAO es una implementación de la especificación del Servicio de Transmisión de Audio/Vídeo de CORBA. El <br>servicio de transmisión</br> de audio y video de TAOs es un servicio de distribución de video habilitado para QoS que puede transferir video en tiempo real a uno o más receptores. Utilizamos el <br>Servicio de Transmisión de Audio y Video</br> para enviar el video desde los VANTs a los receptores finales a través de la estación base. Tres entidades del sistema multimedia DRE con HyARM, a saber, los monitores de recursos, el controlador central y los adaptadores de aplicaciones, están construidos como servidores CORBA, por lo que pueden distribuirse en todo el sistema DRE. ",
            "candidates": [],
            "error": [
                [
                    "Servicio de Streaming de Audio y Video",
                    "servicio de transmisión",
                    "servicio de transmisión",
                    "Servicio de Transmisión de Audio y Video"
                ]
            ]
        },
        "distribute real-time embed system": {
            "translated_key": "distribuir sistema integrado en tiempo real",
            "is_in_text": false,
            "original_annotated_sentences": [
                "Evaluating Adaptive Resource Management for Distributed Real-Time Embedded Systems Nishanth Shankaran, ∗ Xenofon Koutsoukos, Douglas C. Schmidt, and Aniruddha Gokhale Dept.",
                "of EECS, Vanderbilt University, Nashville ABSTRACT A challenging problem faced by researchers and developers of distributed real-time and embedded (DRE) systems is devising and implementing effective adaptive resource management strategies that can meet end-to-end quality of service (QoS) requirements in varying operational conditions.",
                "This paper presents two contributions to research in adaptive resource management for DRE systems.",
                "First, we describe the structure and functionality of the Hybrid Adaptive Resourcemanagement Middleware (HyARM), which provides adaptive resource management using hybrid control techniques for adapting to workload fluctuations and resource availability.",
                "Second, we evaluate the adaptive behavior of HyARM via experiments on a DRE multimedia system that distributes video in real-time.",
                "Our results indicate that HyARM yields predictable, stable, and high system performance, even in the face of fluctuating workload and resource availability.",
                "Categories and Subject Descriptors C.2.4 [Distributed Systems]: Distributed Applications; D.4.7 [Organization and Design]: Real-time Systems and Embedded Systems 1.",
                "INTRODUCTION Achieving end-to-end real-time quality of service (QoS) is particularly important for open distributed real-time and embedded (DRE) systems that face resource constraints, such as limited computing power and network bandwidth.",
                "Overutilization of these system resources can yield unpredictable and unstable behavior, whereas under-utilization can yield excessive system cost.",
                "A promising approach to meeting these end-to-end QoS requirements effectively, therefore, is to develop and apply adaptive middleware [10, 15], which is software whose functional and QoS-related properties can be modified either statically or dynamically.",
                "Static modifications are carried out to reduce footprint, leverage capabilities that exist in specific platforms, enable functional subsetting, and/or minimize hardware/software infrastructure dependencies.",
                "Objectives of dynamic modifications include optimizing system responses to changing environments or requirements, such as changing component interconnections, power-levels, CPU and network bandwidth availability, latency/jitter, and workload.",
                "In open DRE systems, adaptive middleware must make such modifications dependably, i.e., while meeting stringent end-to-end QoS requirements, which requires the specification and enforcement of upper and lower bounds on system resource utilization to ensure effective use of system resources.",
                "To meet these requirements, we have developed the Hybrid Adaptive Resource-management Middleware (HyARM), which is an open-source1 distributed resource management middleware.",
                "HyARM is based on hybrid control theoretic techniques [8], which provide a theoretical framework for designing control of complex system with both continuous and discrete dynamics.",
                "In our case study, which involves a distributed real-time video distribution system, the task of adaptive resource management is to control the utilization of the different resources, whose utilizations are described by continuous variables.",
                "We achieve this by adapting the resolution of the transmitted video, which is modeled as a continuous variable, and by changing the frame-rate and the compression, which are modeled by discrete actions.",
                "We have implemented HyARM atop The ACE ORB (TAO) [13], which is an implementation of the Real-time CORBA specification [12].",
                "Our results show that (1) HyARM ensures effective system resource utilization and (2) end-to-end QoS requirements of higher priority applications are met, even in the face of fluctuations in workload.",
                "The remainder of the paper is organized as follows: Section 2 describes the architecture, functionality, and resource utilization model of our DRE multimedia system case study; Section 3 explains the structure and functionality of HyARM; Section 4 evaluates the adaptive behavior of HyARM via experiments on our multimedia system case study; Section 5 compares our research on HyARM with related work; and Section 6 presents concluding remarks. 1 The code and examples for HyARM are available at www. dre.vanderbilt.edu/∼nshankar/HyARM/.",
                "Article 7 2.",
                "CASE STUDY: DRE MULTIMEDIA SYSTEM This section describes the architecture and QoS requirements of our DRE multimedia system. 2.1 Multimedia System Architecture Wireless Link Wireless Link Wireless Link ` ` ` Physical Link Physical Link Physical Link Base Station End Receiver End Receiver End Receiver` Physical Link End Receiver UAV Camera Video Encoder Camera Video Encoder Camera Video Encoder UAV Camera Video Encoder Camera Video Encoder Camera Video Encoder UAV Camera Video Encoder Camera Video Encoder Camera Video Encoder Figure 1: DRE Multimedia System Architecture The architecture for our DRE multimedia system is shown in Figure 1 and consists of the following entities: (1)Data source (video capture by UAV), where video is captured (related to subject of interest) by camera(s) on each UAV, followed by encoding of raw video using a specific encoding scheme and transmitting the video to the next stage in the pipeline. (2)Data distributor (base station), where the video is processed to remove noise, followed by retransmission of the processed video to the next stage in the pipeline. (3) Sinks (command and control center), where the received video is again processed to remove noise, then decoded and finally rendered to end user via graphical displays.",
                "Significant improvements in video encoding/decoding and (de)compression techniques have been made as a result of recent advances in video encoding and compression techniques [14].",
                "Common video compression schemes are MPEG1, MPEG-2, Real Video, and MPEG-4.",
                "Each compression scheme is characterized by its resource requirement, e.g., the computational power to (de)compress the video signal and the network bandwidth required to transmit the compressed video signal.",
                "Properties of the compressed video, such as resolution and frame-rate determine both the quality and the resource requirements of the video.",
                "Our multimedia system case study has the following endto-end real-time QoS requirements: (1) latency, (2) interframe delay (also know as jitter), (3) frame rate, and (4) picture resolution.",
                "These QoS requirements can be classified as being either hard or soft.",
                "Hard QoS requirements should be met by the underlying system at all times, whereas soft QoS requirements can be missed occasionally.2 For our case study, we treat QoS requirements such as latency and jitter as harder QoS requirements and strive to meet these requirements at all times.",
                "In contrast, we treat QoS requirements such as video frame rate and picture resolution as softer QoS requirements and modify these video properties adaptively to handle dynamic changes in resource availabil2 Although hard and soft are often portrayed as two discrete requirement sets, in practice they are usually two ends of a continuum ranging from softer to harder rather than two disjoint points. ity effectively. 2.2 DRE Multimedia System Rresources There are two primary types of resources in our DRE multimedia system: (1) processors that provide computational power available at the UAVs, base stations, and end receivers and (2) network links that provide communication bandwidth between UAVs, base stations, and end receivers.",
                "The computing power required by the video capture and encoding tasks depends on dynamic factors, such as speed of the UAV, speed of the subject (if the subject is mobile), and distance between UAV and the subject.",
                "The wireless network bandwidth available to transmit video captured by UAVs to base stations also depends on the wireless connectivity between the UAVs and the base station, which in-turn depend on dynamic factors such as the speed of the UAVs and the relative distance between UAVs and base stations.",
                "The bandwidth of the link between the base station and the end receiver is limited, but more stable than the bandwidth of the wireless network.",
                "Resource requirements and availability of resources are subjected to dynamic changes.",
                "Two classes of applications - QoS-enabled and best-effort - use the multimedia system infrastructure described above to transmit video to their respective receivers.",
                "QoS-enabled class of applications have higher priority over best-effort class of application.",
                "In our study, emergency response applications belong to QoS-enabled and surveillance applications belong to best-effort class.",
                "For example, since a stream from an emergency response application is of higher importance than a video stream from a surveillance application, it receives more resources end-to-end.",
                "Since resource availability significantly affects QoS, we use current resource utilization as the primary indicator of system performance.",
                "We refer to the current level of system resource utilization as the system condition.",
                "Based on this definition, we can classify system conditions as being either under, over, or effectively utilized.",
                "Under-utilization of system resources occurs when the current resource utilization is lower than the desired lower bound on resource utilization.",
                "In this system condition, residual system resources (i.e., network bandwidth and computational power) are available in large amounts after meeting end-to-end QoS requirements of applications.",
                "These residual resources can be used to increase the QoS of the applications.",
                "For example, residual CPU and network bandwidth can be used to deliver better quality video (e.g., with greater resolution and higher frame rate) to end receivers.",
                "Over-utilization of system resources occurs when the current resource utilization is higher than the desired upper bound on resource utilization.",
                "This condition can arise from loss of resources - network bandwidth and/or computing power at base station, end receiver or at UAV - or may be due to an increase in resource demands by applications.",
                "Over-utilization is generally undesirable since the quality of the received video (such as resolution and frame rate) and timeliness properties (such as latency and jitter) are degraded and may result in an unstable (and thus ineffective) system.",
                "Effective resource utilization is the desired system condition since it ensures that end-to-end QoS requirements of the UAV-based multimedia system are met and utilization of both system resources, i.e., network bandwidth and computational power, are within their desired utilization bounds.",
                "Article 7 Section 3 describes techniques we applied to achieve effective utilization, even in the face of fluctuating resource availability and/or demand. 3.",
                "OVERVIEW OF HYARM This section describes the architecture of the Hybrid Adaptive Resource-management Middleware (HyARM).",
                "HyARM ensures efficient and predictable system performance by providing adaptive resource management, including monitoring of system resources and enforcing bounds on application resource utilization. 3.1 HyARM Structure and Functionality Resource Utilization Legend Resource Allocation Application Parameters Figure 2: HyARM Architecture HyARM is composed of three types of entities shown in Figure 2 and described below: Resource monitors observe the overall resource utilization for each type of resource and resource utilization per application.",
                "In our multimedia system, there are resource monitors for CPU utilization and network bandwidth.",
                "CPU monitors observe the CPU resource utilization of UAVs, base station, and end receivers.",
                "Network bandwidth monitors observe the network resource utilization of (1) wireless network link between UAVs and the base station and (2) wired network link between the base station and end receivers.",
                "The central controller maintains the system resource utilization below a desired bound by (1) processing periodic updates it receives from resource monitors and (2) modifying the execution of applications accordingly, e.g., by using different execution algorithms or operating the application with increased/decreased QoS.",
                "This adaptation process ensures that system resources are utilized efficiently and end-to-end application QoS requirements are met.",
                "In our multimedia system, the HyARM controller determines the value of application parameters such as (1) video compression schemes, such as Real Video and MPEG-4, and/or (2) frame rate, and (3) picture resolution.",
                "From the perspective of hybrid control theoretic techniques [8], the different video compression schemes and frame rate form the discrete variables of application execution and picture resolution forms the continuous variables.",
                "Application adapters modify application execution according to parameters recommended by the controller and ensures that the operation of the application is in accordance with the recommended parameters.",
                "In the current mplementation of HyARM, the application adapter modifies the input parameters to the application that affect application QoS and resource utilization - compression scheme, frame rate, and picture resolution.",
                "In our future implementations, we plan to use resource reservation mechanisms such as Differentiated Service [7, 3] and Class-based Kernel Resource Management [4] to provision/reserve network and CPU resources.",
                "In our multimedia system, the application adapter ensures that the video is encoded at the recommended frame rate and resolution using the specified compression scheme. 3.2 Applying HyARM to the Multimedia System Case Study HyARM is built atop TAO [13], a widely used open-source implementation of Real-time CORBA [12].",
                "HyARM can be applied to ensure efficient, predictable and adaptive resource management of any DRE system where resource availability and requirements are subject to dynamic change.",
                "Figure 3 shows the interaction of various parts of the DRE multimedia system developed with HyARM, TAO, and TAOs A/V Streaming Service.",
                "TAOs A/V Streaming service is an implementation of the CORBA A/V Streaming Service specification.",
                "TAOs A/V Streaming Service is a QoS-enabled video distribution service that can transfer video in real-time to one or more receivers.",
                "We use the A/V Streaming Service to transmit the video from the UAVs to the end receivers via the base station.",
                "Three entities of Receiver UAV TAO Resource Utilization HyARM Central Controller A/V Streaming Service : Sender MPEG1 MPEG4 Real Video HyARM Resource Monitor A/V Streaming Service : Receiver Compressed Video Compressed Video Application HyARM Application Adapter Remote Object Call Control Inputs Resource Utilization Resource Utilization / Control Inputs Control Inputs Legend Figure 3: Developing the DRE Multimedia System with HyARM HyARM, namely the resource monitors, central controller, and application adapters are built as CORBA servants, so they can be distributed throughout a DRE system.",
                "Resource monitors are remote CORBA objects that update the central controller periodically with the current resource utilization.",
                "Application adapters are collocated with applications since the two interact closely.",
                "As shown in Figure 3, UAVs compress the data using various compression schemes, such as MPEG1, MPEG4, and Real Video, and uses TAOs A/V streaming service to transmit the video to end receivers.",
                "HyARMs resource monitors continuously observe the system resource utilization and notify the central controller with the current utilization. 3 The interaction between the controller and the resource monitors uses the Observer pattern [5].",
                "When the controller receives resource utilization updates from monitors, it computes the necessary modifications to application(s) parameters and notifies application adapter(s) via a remote operation call.",
                "Application adapter(s), that are collocated with the application, modify the input parameters to the application - in our case video encoder - to modify the application resource utilization and QoS. 3 The base station is not included in the figure since it only retransmits the video received from UAVs to end receivers.",
                "Article 7 4.",
                "PERFORMANCE RESULTS AND ANALYSIS This section first describes the testbed that provides the infrastructure for our DRE multimedia system, which was used to evaluate the performance of HyARM.",
                "We then describe our experiments and analyze the results obtained to empirically evaluate how HyARM behaves during underand over-utilization of system resources. 4.1 Overview of the Hardware and Software Testbed Our experiments were performed on the Emulab testbed at University of Utah.",
                "The hardware configuration consists of two nodes acting as UAVs, one acting as base station, and one as end receiver.",
                "Video from the two UAVs were transmitted to a base station via a LAN configured with the following properties: average packet loss ratio of 0.3 and bandwidth 1 Mbps.",
                "The network bandwidth was chosen to be 1 Mbps since each UAV in the DRE multimedia system is allocated 250 Kbps.",
                "These parameters were chosen to emulate an unreliable wireless network with limited bandwidth between the UAVs and the base station.",
                "From the base station, the video was retransmitted to the end receiver via a reliable wireline link of 10 Mbps bandwidth with no packet loss.",
                "The hardware configuration of all the nodes was chosen as follows: 600 MHz Intel Pentium III processor, 256 MB physical memory, 4 Intel EtherExpress Pro 10/100 Mbps Ethernet ports, and 13 GB hard drive.",
                "A real-time version of Linux - TimeSys Linux/NET 3.1.214 based on RedHat Linux 9was used as the operating system for all nodes.",
                "The following software packages were also used for our experiments: (1) Ffmpeg 0.4.9-pre1, which is an open-source library (http: //www.ffmpeg.sourceforge.net/download.php) that compresses video into MPEG-2, MPEG-4, Real Video, and many other video formats. (2) Iftop 0.16, which is an opensource library (http://www.ex-parrot.com/∼pdw/iftop/) we used for monitoring network activity and bandwidth utilization. (3) ACE 5.4.3 + TAO 1.4.3, which is an opensource (http://www.dre.vanderbilt.edu/TAO) implementation of the Real-time CORBA [12] specification upon which HyARM is built.",
                "TAO provides the CORBA Audio/Video (A/V) Streaming Service that we use to transmit the video from the UAVs to end receivers via the base station. 4.2 Experiment Configuration Our experiment consisted of two (emulated) UAVs that simultaneously send video to the base station using the experimentation setup described in Section 4.1.",
                "At the base station, video was retransmitted to the end receivers (without any modifications), where it was stored to a file.",
                "Each UAV hosted two applications, one QoS-enabled application (emergency response), and one best-effort application (surveillance).",
                "Within each UAV, computational power is shared between the applications, while the network bandwidth is shared among all applications.",
                "To evaluate the QoS provided by HyARM, we monitored CPU utilization at the two UAVs, and network bandwidth utilization between the UAV and the base station.",
                "CPU resource utilization was not monitored at the base station and the end receiver since they performed no computationallyintensive operations.",
                "The resource utilization of the 10 Mpbs physical link between the base station and the end receiver does not affect QoS of applications and is not monitored by HyARM since it is nearly 10 times the 1 MB bandwidth of the LAN between the UAVs and the base station.",
                "The experiment also monitors properties of the video that affect the QoS of the applications, such as latency, jitter, frame rate, and resolution.",
                "The set point on resource utilization for each resource was specified at 0.69, which is the upper bound typically recommended by scheduling techniques, such as rate monotonic algorithm [9].",
                "Since studies [6] have shown that human eyes can perceive delays more than 200ms, we use this as the upper bound on jitter of the received video.",
                "QoS requirements for each class of application is specified during system initialization and is shown in Table 1. 4.3 Empirical Results and Analysis This section presents the results obtained from running the experiment described in Section 4.2 on our DRE multimedia system testbed.",
                "We used system resource utilization as a metric to evaluate the adaptive resource management capabilities of HyARM under varying input work loads.",
                "We also used application QoS as a metric to evaluate HyARMs capabilities to support end-to-end QoS requirements of the various classes of applications in the DRE multimedia system.",
                "We analyze these results to explain the significant differences in system performance and application QoS.",
                "Comparison of system performance is decomposed into comparison of resource utilization and application QoS.",
                "For system resource utilization, we compare (1) network bandwidth utilization of the local area network and (2) CPU utilization at the two UAV nodes.",
                "For application QoS, we compare mean values of video parameters, including (1) picture resolution, (2) frame rate, (3) latency, and (4) jitter.",
                "Comparison of resource utilization.",
                "Over-utilization of system resources in DRE systems can yield an unstable system.",
                "In contrast, under-utilization of system resources increases system cost.",
                "Figure 4 and Figure 5 compare the system resource utilization with and without HyARM.",
                "Figure 4 shows that HyARM maintains system utilization close to the desired utilization set point during fluctuation in input work load by transmitting video of higher (or lower) QoS for QoS-enabled (or best-effort) class of applications during over (or under) utilization of system resources.",
                "Figure 5 shows that without HyARM, network utilization was as high as 0.9 during increase in workload conditions, which is greater than the utilization set point of 0.7 by 0.2.",
                "As a result of over-utilization of resources, QoS of the received video, such as average latency and jitter, was affected significantly.",
                "Without HyARM, system resources were either under-utilized or over-utilized, both of which are undesirable.",
                "In contrast, with HyARM, system resource utilization is always close to the desired set point, even during fluctuations in application workload.",
                "During sudden fluctuation in application workload, system conditions may be temporarily undesirable, but are restored to the desired condition within several sampling periods.",
                "Temporary over-utilization of resources is permissible in our multimedia system since the quality of the video may be degraded for a short period of time, though application QoS will be degraded significantly if poor quality video is transmitted for a longer period of time.",
                "Comparison of application QoS.",
                "Figures 6, Figure 7, and Table 2 compare latency, jitter, resolution, and frameArticle 7 Class Resolution Frame Rate Latency (msec ) Jitter (msec) QoS Enabled 1024 x 768 25 200 200 Best-effort 320 x 240 15 300 250 Table 1: Application QoS Requirements Figure 4: Resource utilization with HyARM Figure 5: Resource utilization without HyARM rate of the received video, respectively.",
                "Table 2 shows that HyARM increases the resolution and frame video of QoSenabled applications, but decreases the resolution and frame rate of best effort applications.",
                "During over utilization of system resources, resolution and frame rate of lower priority applications are reduced to adapt to fluctuations in application workload and to maintain the utilization of resources at the specified set point.",
                "It can be seen from Figure 6 and Figure 7 that HyARM reduces the latency and jitter of the received video significantly.",
                "These figures show that the QoS of QoS-enabled applications is greatly improved by HyARM.",
                "Although application parameters, such as frame rate and resolutions, which affect the soft QoS requirements of best-effort applications may be compromised, the hard QoS requirements, such as latency and jitter, of all applications are met.",
                "HyARM responds to fluctuation in resource availability and/or demand by constant monitoring of resource utilization.",
                "As shown in Figure 4, when resources utilization increases above the desired set point, HyARM lowers the utilization by reducing the QoS of best-effort applications.",
                "This adaptation ensures that enough resources are available for QoS-enabled applications to meet their QoS needs.",
                "Figures 6 and 7 show that the values of latency and jitter of the received video of the system with HyARM are nearly half of the corresponding value of the system without HyARM.",
                "With HyARM, values of these parameters are well below the specified bounds, whereas without HyARM, these value are significantly above the specified bounds due to overutilization of the network bandwidth, which leads to network congestion and results in packet loss.",
                "HyARM avoids this by reducing video parameters such as resolution, frame-rate, and/or modifying the compression scheme used to compress the video.",
                "Our conclusions from analyzing the results described above are that applying adaptive middleware via hybrid control to DRE system helps to (1) improve application QoS, (2) increase system resource utilization, and (3) provide better predictability (lower latency and inter-frame delay) to QoSenabled applications.",
                "These improvements are achieved largely due to monitoring of system resource utilization, efficient system workload management, and adaptive resource provisioning by means of HyARMs network/CPU resource monitors, application adapter, and central controller, respectively. 5.",
                "RELATED WORK A number of control theoretic approaches have been applied to DRE systems recently.",
                "These techniques aid in overcoming limitations with traditional scheduling approaches that handle dynamic changes in resource availability poorly and result in a rigidly scheduled system that adapts poorly to change.",
                "A survey of these techniques is presented in [1].",
                "One such approach is feedback control scheduling (FCS) [2, 11].",
                "FCS algorithms dynamically adjust resource allocation by means of software feedback control loops.",
                "FCS algorithms are modeled and designed using rigorous controltheoretic methodologies.",
                "These algorithms provide robust and analytical performance assurances despite uncertainties in resource availability and/or demand.",
                "Although existing FCS algorithms have shown promise, these algorithms often assume that the system has continuous control variable(s) that can continuously be adjusted.",
                "While this assumption holds for certain classes of systems, there are many classes of DRE systems, such as avionics and total-ship computing environments that only support a finite a priori set of discrete configurations.",
                "The control variables in such systems are therefore intrinsically discrete.",
                "HyARM handles both continuous control variables, such as picture resolution, and discrete control variable, such as discrete set of frame rates.",
                "HyARM can therefore be applied to system that support continuous and/or discrete set of control variables.",
                "The DRE multimedia system as described in Section 2 is an example DRE system that offers both continuous (picture resolution) and discrete set (frame-rate) of control variables.",
                "These variables are modified by HyARM to achieve efficient resource utilization and improved application QoS. 6.",
                "CONCLUDING REMARKS Article 7 Figure 6: Comparison of Video Latency Figure 7: Comparison of Video Jitter Source Picture Size / Frame Rate With HyARM Without HyARM UAV1 QoS Enabled Application 1122 X 1496 / 25 960 X 720 / 20 UAV1 Best-effort Application 288 X 384 / 15 640 X 480 / 20 UAV2 QoS Enabled Application 1126 X 1496 / 25 960 X 720 / 20 UAV2 Best-effort Application 288 X 384 / 15 640 X 480 / 20 Table 2: Comparison of Video Quality Many distributed real-time and embedded (DRE) systems demand end-to-end quality of service (QoS) enforcement from their underlying platforms to operate correctly.",
                "These systems increasingly run in open environments, where resource availability is subject to dynamic change.",
                "To meet end-to-end QoS in dynamic environments, DRE systems can benefit from an adaptive middleware that monitors system resources, performs efficient application workload management, and enables efficient resource provisioning for executing applications.",
                "This paper described HyARM, an adaptive middleware, that provides effective resource management to DRE systems.",
                "HyARM employs hybrid control techniques to provide the adaptive middleware capabilities, such as resource monitoring and application adaptation that are key to providing the dynamic resource management capabilities for open DRE systems.",
                "We employed HyARM to a representative DRE multimedia system that is implemented using Real-time CORBA and CORBA A/V Streaming Service.",
                "We evaluated the performance of HyARM in a system composed of three distributed resources and two classes of applications with two applications each.",
                "Our empirical results indicate that HyARM ensures (1) efficient resource utilization by maintaining the resource utilization of system resources within the specified utilization bounds, (2) QoS requirements of QoS-enabled applications are met at all times.",
                "Overall, HyARM ensures efficient, predictable, and adaptive resource management for DRE systems. 7.",
                "REFERENCES [1] T. F. Abdelzaher, J. Stankovic, C. Lu, R. Zhang, and Y. Lu.",
                "Feddback Performance Control in Software Services.",
                "IEEE: Control Systems, 23(3), June 2003. [2] L. Abeni, L. Palopoli, G. Lipari, and J. Walpole.",
                "Analysis of a reservation-based feedback scheduler.",
                "In IEEE Real-Time Systems Symposium, Dec. 2002. [3] S. Blake, D. Black, M. Carlson, E. Davies, Z. Wang, and W. Weiss.",
                "An architecture for differentiated services.",
                "Network Information Center RFC 2475, Dec. 1998. [4] H. Franke, S. Nagar, C. Seetharaman, and V. Kashyap.",
                "Enabling Autonomic Workload Management in Linux.",
                "In Proceedings of the International Conference on Autonomic Computing (ICAC), New York, New York, May 2004.",
                "IEEE. [5] E. Gamma, R. Helm, R. Johnson, and J. Vlissides.",
                "Design Patterns: Elements of Reusable Object-Oriented Software.",
                "Addison-Wesley, Reading, MA, 1995. [6] G. Ghinea and J. P. Thomas.",
                "Qos impact on user perception and understanding of multimedia video clips.",
                "In MULTIMEDIA 98: Proceedings of the sixth ACM international conference on Multimedia, pages 49-54, Bristol, United Kingdom, 1998.",
                "ACM Press. [7] Internet Engineering Task Force.",
                "Differentiated Services Working Group (diffserv) Charter. www.ietf.org/html.charters/diffserv-charter.html, 2000. [8] X. Koutsoukos, R. Tekumalla, B. Natarajan, and C. Lu.",
                "Hybrid Supervisory Control of Real-Time Systems.",
                "In 11th IEEE Real-Time and Embedded Technology and Applications Symposium, San Francisco, California, Mar. 2005. [9] J. Lehoczky, L. Sha, and Y. Ding.",
                "The Rate Monotonic Scheduling Algorithm: Exact Characterization and Average Case Behavior.",
                "In Proceedings of the 10th IEEE Real-Time Systems Symposium (RTSS 1989), pages 166-171.",
                "IEEE Computer Society Press, 1989. [10] J. Loyall, J. Gossett, C. Gill, R. Schantz, J. Zinky, P. Pal, R. Shapiro, C. Rodrigues, M. Atighetchi, and D. Karr.",
                "Comparing and Contrasting Adaptive Middleware Support in Wide-Area and Embedded Distributed Object Applications.",
                "In Proceedings of the 21st International Conference on Distributed Computing Systems (ICDCS-21), pages 625-634.",
                "IEEE, Apr. 2001. [11] C. Lu, J.",
                "A. Stankovic, G. Tao, and S. H. Son.",
                "Feedback Control Real-Time Scheduling: Framework, Modeling, and Algorithms.",
                "Real-Time Systems Journal, 23(1/2):85-126, July 2002. [12] Object Management Group.",
                "Real-time CORBA Specification, OMG Document formal/02-08-02 edition, Aug. 2002. [13] D. C. Schmidt, D. L. Levine, and S. Mungee.",
                "The Design and Performance of Real-Time Object Request Brokers.",
                "Computer Communications, 21(4):294-324, Apr. 1998. [14] Thomas Sikora.",
                "Trends and Perspectives in Image and Video Coding.",
                "In Proceedings of the IEEE, Jan. 2005. [15] X. Wang, H.-M. Huang, V. Subramonian, C. Lu, and C. Gill.",
                "CAMRIT: Control-based Adaptive Middleware for Real-time Image Transmission.",
                "In Proc. of the 10th IEEE Real-Time and Embedded Tech. and Applications Symp. (RTAS), Toronto, Canada, May 2004.",
                "Article 7"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [],
            "translated_text": "",
            "candidates": [],
            "error": [
                []
            ]
        },
        "hybrid system": {
            "translated_key": "sistema híbrido",
            "is_in_text": false,
            "original_annotated_sentences": [
                "Evaluating Adaptive Resource Management for Distributed Real-Time Embedded Systems Nishanth Shankaran, ∗ Xenofon Koutsoukos, Douglas C. Schmidt, and Aniruddha Gokhale Dept.",
                "of EECS, Vanderbilt University, Nashville ABSTRACT A challenging problem faced by researchers and developers of distributed real-time and embedded (DRE) systems is devising and implementing effective adaptive resource management strategies that can meet end-to-end quality of service (QoS) requirements in varying operational conditions.",
                "This paper presents two contributions to research in adaptive resource management for DRE systems.",
                "First, we describe the structure and functionality of the Hybrid Adaptive Resourcemanagement Middleware (HyARM), which provides adaptive resource management using hybrid control techniques for adapting to workload fluctuations and resource availability.",
                "Second, we evaluate the adaptive behavior of HyARM via experiments on a DRE multimedia system that distributes video in real-time.",
                "Our results indicate that HyARM yields predictable, stable, and high system performance, even in the face of fluctuating workload and resource availability.",
                "Categories and Subject Descriptors C.2.4 [Distributed Systems]: Distributed Applications; D.4.7 [Organization and Design]: Real-time Systems and Embedded Systems 1.",
                "INTRODUCTION Achieving end-to-end real-time quality of service (QoS) is particularly important for open distributed real-time and embedded (DRE) systems that face resource constraints, such as limited computing power and network bandwidth.",
                "Overutilization of these system resources can yield unpredictable and unstable behavior, whereas under-utilization can yield excessive system cost.",
                "A promising approach to meeting these end-to-end QoS requirements effectively, therefore, is to develop and apply adaptive middleware [10, 15], which is software whose functional and QoS-related properties can be modified either statically or dynamically.",
                "Static modifications are carried out to reduce footprint, leverage capabilities that exist in specific platforms, enable functional subsetting, and/or minimize hardware/software infrastructure dependencies.",
                "Objectives of dynamic modifications include optimizing system responses to changing environments or requirements, such as changing component interconnections, power-levels, CPU and network bandwidth availability, latency/jitter, and workload.",
                "In open DRE systems, adaptive middleware must make such modifications dependably, i.e., while meeting stringent end-to-end QoS requirements, which requires the specification and enforcement of upper and lower bounds on system resource utilization to ensure effective use of system resources.",
                "To meet these requirements, we have developed the Hybrid Adaptive Resource-management Middleware (HyARM), which is an open-source1 distributed resource management middleware.",
                "HyARM is based on hybrid control theoretic techniques [8], which provide a theoretical framework for designing control of complex system with both continuous and discrete dynamics.",
                "In our case study, which involves a distributed real-time video distribution system, the task of adaptive resource management is to control the utilization of the different resources, whose utilizations are described by continuous variables.",
                "We achieve this by adapting the resolution of the transmitted video, which is modeled as a continuous variable, and by changing the frame-rate and the compression, which are modeled by discrete actions.",
                "We have implemented HyARM atop The ACE ORB (TAO) [13], which is an implementation of the Real-time CORBA specification [12].",
                "Our results show that (1) HyARM ensures effective system resource utilization and (2) end-to-end QoS requirements of higher priority applications are met, even in the face of fluctuations in workload.",
                "The remainder of the paper is organized as follows: Section 2 describes the architecture, functionality, and resource utilization model of our DRE multimedia system case study; Section 3 explains the structure and functionality of HyARM; Section 4 evaluates the adaptive behavior of HyARM via experiments on our multimedia system case study; Section 5 compares our research on HyARM with related work; and Section 6 presents concluding remarks. 1 The code and examples for HyARM are available at www. dre.vanderbilt.edu/∼nshankar/HyARM/.",
                "Article 7 2.",
                "CASE STUDY: DRE MULTIMEDIA SYSTEM This section describes the architecture and QoS requirements of our DRE multimedia system. 2.1 Multimedia System Architecture Wireless Link Wireless Link Wireless Link ` ` ` Physical Link Physical Link Physical Link Base Station End Receiver End Receiver End Receiver` Physical Link End Receiver UAV Camera Video Encoder Camera Video Encoder Camera Video Encoder UAV Camera Video Encoder Camera Video Encoder Camera Video Encoder UAV Camera Video Encoder Camera Video Encoder Camera Video Encoder Figure 1: DRE Multimedia System Architecture The architecture for our DRE multimedia system is shown in Figure 1 and consists of the following entities: (1)Data source (video capture by UAV), where video is captured (related to subject of interest) by camera(s) on each UAV, followed by encoding of raw video using a specific encoding scheme and transmitting the video to the next stage in the pipeline. (2)Data distributor (base station), where the video is processed to remove noise, followed by retransmission of the processed video to the next stage in the pipeline. (3) Sinks (command and control center), where the received video is again processed to remove noise, then decoded and finally rendered to end user via graphical displays.",
                "Significant improvements in video encoding/decoding and (de)compression techniques have been made as a result of recent advances in video encoding and compression techniques [14].",
                "Common video compression schemes are MPEG1, MPEG-2, Real Video, and MPEG-4.",
                "Each compression scheme is characterized by its resource requirement, e.g., the computational power to (de)compress the video signal and the network bandwidth required to transmit the compressed video signal.",
                "Properties of the compressed video, such as resolution and frame-rate determine both the quality and the resource requirements of the video.",
                "Our multimedia system case study has the following endto-end real-time QoS requirements: (1) latency, (2) interframe delay (also know as jitter), (3) frame rate, and (4) picture resolution.",
                "These QoS requirements can be classified as being either hard or soft.",
                "Hard QoS requirements should be met by the underlying system at all times, whereas soft QoS requirements can be missed occasionally.2 For our case study, we treat QoS requirements such as latency and jitter as harder QoS requirements and strive to meet these requirements at all times.",
                "In contrast, we treat QoS requirements such as video frame rate and picture resolution as softer QoS requirements and modify these video properties adaptively to handle dynamic changes in resource availabil2 Although hard and soft are often portrayed as two discrete requirement sets, in practice they are usually two ends of a continuum ranging from softer to harder rather than two disjoint points. ity effectively. 2.2 DRE Multimedia System Rresources There are two primary types of resources in our DRE multimedia system: (1) processors that provide computational power available at the UAVs, base stations, and end receivers and (2) network links that provide communication bandwidth between UAVs, base stations, and end receivers.",
                "The computing power required by the video capture and encoding tasks depends on dynamic factors, such as speed of the UAV, speed of the subject (if the subject is mobile), and distance between UAV and the subject.",
                "The wireless network bandwidth available to transmit video captured by UAVs to base stations also depends on the wireless connectivity between the UAVs and the base station, which in-turn depend on dynamic factors such as the speed of the UAVs and the relative distance between UAVs and base stations.",
                "The bandwidth of the link between the base station and the end receiver is limited, but more stable than the bandwidth of the wireless network.",
                "Resource requirements and availability of resources are subjected to dynamic changes.",
                "Two classes of applications - QoS-enabled and best-effort - use the multimedia system infrastructure described above to transmit video to their respective receivers.",
                "QoS-enabled class of applications have higher priority over best-effort class of application.",
                "In our study, emergency response applications belong to QoS-enabled and surveillance applications belong to best-effort class.",
                "For example, since a stream from an emergency response application is of higher importance than a video stream from a surveillance application, it receives more resources end-to-end.",
                "Since resource availability significantly affects QoS, we use current resource utilization as the primary indicator of system performance.",
                "We refer to the current level of system resource utilization as the system condition.",
                "Based on this definition, we can classify system conditions as being either under, over, or effectively utilized.",
                "Under-utilization of system resources occurs when the current resource utilization is lower than the desired lower bound on resource utilization.",
                "In this system condition, residual system resources (i.e., network bandwidth and computational power) are available in large amounts after meeting end-to-end QoS requirements of applications.",
                "These residual resources can be used to increase the QoS of the applications.",
                "For example, residual CPU and network bandwidth can be used to deliver better quality video (e.g., with greater resolution and higher frame rate) to end receivers.",
                "Over-utilization of system resources occurs when the current resource utilization is higher than the desired upper bound on resource utilization.",
                "This condition can arise from loss of resources - network bandwidth and/or computing power at base station, end receiver or at UAV - or may be due to an increase in resource demands by applications.",
                "Over-utilization is generally undesirable since the quality of the received video (such as resolution and frame rate) and timeliness properties (such as latency and jitter) are degraded and may result in an unstable (and thus ineffective) system.",
                "Effective resource utilization is the desired system condition since it ensures that end-to-end QoS requirements of the UAV-based multimedia system are met and utilization of both system resources, i.e., network bandwidth and computational power, are within their desired utilization bounds.",
                "Article 7 Section 3 describes techniques we applied to achieve effective utilization, even in the face of fluctuating resource availability and/or demand. 3.",
                "OVERVIEW OF HYARM This section describes the architecture of the Hybrid Adaptive Resource-management Middleware (HyARM).",
                "HyARM ensures efficient and predictable system performance by providing adaptive resource management, including monitoring of system resources and enforcing bounds on application resource utilization. 3.1 HyARM Structure and Functionality Resource Utilization Legend Resource Allocation Application Parameters Figure 2: HyARM Architecture HyARM is composed of three types of entities shown in Figure 2 and described below: Resource monitors observe the overall resource utilization for each type of resource and resource utilization per application.",
                "In our multimedia system, there are resource monitors for CPU utilization and network bandwidth.",
                "CPU monitors observe the CPU resource utilization of UAVs, base station, and end receivers.",
                "Network bandwidth monitors observe the network resource utilization of (1) wireless network link between UAVs and the base station and (2) wired network link between the base station and end receivers.",
                "The central controller maintains the system resource utilization below a desired bound by (1) processing periodic updates it receives from resource monitors and (2) modifying the execution of applications accordingly, e.g., by using different execution algorithms or operating the application with increased/decreased QoS.",
                "This adaptation process ensures that system resources are utilized efficiently and end-to-end application QoS requirements are met.",
                "In our multimedia system, the HyARM controller determines the value of application parameters such as (1) video compression schemes, such as Real Video and MPEG-4, and/or (2) frame rate, and (3) picture resolution.",
                "From the perspective of hybrid control theoretic techniques [8], the different video compression schemes and frame rate form the discrete variables of application execution and picture resolution forms the continuous variables.",
                "Application adapters modify application execution according to parameters recommended by the controller and ensures that the operation of the application is in accordance with the recommended parameters.",
                "In the current mplementation of HyARM, the application adapter modifies the input parameters to the application that affect application QoS and resource utilization - compression scheme, frame rate, and picture resolution.",
                "In our future implementations, we plan to use resource reservation mechanisms such as Differentiated Service [7, 3] and Class-based Kernel Resource Management [4] to provision/reserve network and CPU resources.",
                "In our multimedia system, the application adapter ensures that the video is encoded at the recommended frame rate and resolution using the specified compression scheme. 3.2 Applying HyARM to the Multimedia System Case Study HyARM is built atop TAO [13], a widely used open-source implementation of Real-time CORBA [12].",
                "HyARM can be applied to ensure efficient, predictable and adaptive resource management of any DRE system where resource availability and requirements are subject to dynamic change.",
                "Figure 3 shows the interaction of various parts of the DRE multimedia system developed with HyARM, TAO, and TAOs A/V Streaming Service.",
                "TAOs A/V Streaming service is an implementation of the CORBA A/V Streaming Service specification.",
                "TAOs A/V Streaming Service is a QoS-enabled video distribution service that can transfer video in real-time to one or more receivers.",
                "We use the A/V Streaming Service to transmit the video from the UAVs to the end receivers via the base station.",
                "Three entities of Receiver UAV TAO Resource Utilization HyARM Central Controller A/V Streaming Service : Sender MPEG1 MPEG4 Real Video HyARM Resource Monitor A/V Streaming Service : Receiver Compressed Video Compressed Video Application HyARM Application Adapter Remote Object Call Control Inputs Resource Utilization Resource Utilization / Control Inputs Control Inputs Legend Figure 3: Developing the DRE Multimedia System with HyARM HyARM, namely the resource monitors, central controller, and application adapters are built as CORBA servants, so they can be distributed throughout a DRE system.",
                "Resource monitors are remote CORBA objects that update the central controller periodically with the current resource utilization.",
                "Application adapters are collocated with applications since the two interact closely.",
                "As shown in Figure 3, UAVs compress the data using various compression schemes, such as MPEG1, MPEG4, and Real Video, and uses TAOs A/V streaming service to transmit the video to end receivers.",
                "HyARMs resource monitors continuously observe the system resource utilization and notify the central controller with the current utilization. 3 The interaction between the controller and the resource monitors uses the Observer pattern [5].",
                "When the controller receives resource utilization updates from monitors, it computes the necessary modifications to application(s) parameters and notifies application adapter(s) via a remote operation call.",
                "Application adapter(s), that are collocated with the application, modify the input parameters to the application - in our case video encoder - to modify the application resource utilization and QoS. 3 The base station is not included in the figure since it only retransmits the video received from UAVs to end receivers.",
                "Article 7 4.",
                "PERFORMANCE RESULTS AND ANALYSIS This section first describes the testbed that provides the infrastructure for our DRE multimedia system, which was used to evaluate the performance of HyARM.",
                "We then describe our experiments and analyze the results obtained to empirically evaluate how HyARM behaves during underand over-utilization of system resources. 4.1 Overview of the Hardware and Software Testbed Our experiments were performed on the Emulab testbed at University of Utah.",
                "The hardware configuration consists of two nodes acting as UAVs, one acting as base station, and one as end receiver.",
                "Video from the two UAVs were transmitted to a base station via a LAN configured with the following properties: average packet loss ratio of 0.3 and bandwidth 1 Mbps.",
                "The network bandwidth was chosen to be 1 Mbps since each UAV in the DRE multimedia system is allocated 250 Kbps.",
                "These parameters were chosen to emulate an unreliable wireless network with limited bandwidth between the UAVs and the base station.",
                "From the base station, the video was retransmitted to the end receiver via a reliable wireline link of 10 Mbps bandwidth with no packet loss.",
                "The hardware configuration of all the nodes was chosen as follows: 600 MHz Intel Pentium III processor, 256 MB physical memory, 4 Intel EtherExpress Pro 10/100 Mbps Ethernet ports, and 13 GB hard drive.",
                "A real-time version of Linux - TimeSys Linux/NET 3.1.214 based on RedHat Linux 9was used as the operating system for all nodes.",
                "The following software packages were also used for our experiments: (1) Ffmpeg 0.4.9-pre1, which is an open-source library (http: //www.ffmpeg.sourceforge.net/download.php) that compresses video into MPEG-2, MPEG-4, Real Video, and many other video formats. (2) Iftop 0.16, which is an opensource library (http://www.ex-parrot.com/∼pdw/iftop/) we used for monitoring network activity and bandwidth utilization. (3) ACE 5.4.3 + TAO 1.4.3, which is an opensource (http://www.dre.vanderbilt.edu/TAO) implementation of the Real-time CORBA [12] specification upon which HyARM is built.",
                "TAO provides the CORBA Audio/Video (A/V) Streaming Service that we use to transmit the video from the UAVs to end receivers via the base station. 4.2 Experiment Configuration Our experiment consisted of two (emulated) UAVs that simultaneously send video to the base station using the experimentation setup described in Section 4.1.",
                "At the base station, video was retransmitted to the end receivers (without any modifications), where it was stored to a file.",
                "Each UAV hosted two applications, one QoS-enabled application (emergency response), and one best-effort application (surveillance).",
                "Within each UAV, computational power is shared between the applications, while the network bandwidth is shared among all applications.",
                "To evaluate the QoS provided by HyARM, we monitored CPU utilization at the two UAVs, and network bandwidth utilization between the UAV and the base station.",
                "CPU resource utilization was not monitored at the base station and the end receiver since they performed no computationallyintensive operations.",
                "The resource utilization of the 10 Mpbs physical link between the base station and the end receiver does not affect QoS of applications and is not monitored by HyARM since it is nearly 10 times the 1 MB bandwidth of the LAN between the UAVs and the base station.",
                "The experiment also monitors properties of the video that affect the QoS of the applications, such as latency, jitter, frame rate, and resolution.",
                "The set point on resource utilization for each resource was specified at 0.69, which is the upper bound typically recommended by scheduling techniques, such as rate monotonic algorithm [9].",
                "Since studies [6] have shown that human eyes can perceive delays more than 200ms, we use this as the upper bound on jitter of the received video.",
                "QoS requirements for each class of application is specified during system initialization and is shown in Table 1. 4.3 Empirical Results and Analysis This section presents the results obtained from running the experiment described in Section 4.2 on our DRE multimedia system testbed.",
                "We used system resource utilization as a metric to evaluate the adaptive resource management capabilities of HyARM under varying input work loads.",
                "We also used application QoS as a metric to evaluate HyARMs capabilities to support end-to-end QoS requirements of the various classes of applications in the DRE multimedia system.",
                "We analyze these results to explain the significant differences in system performance and application QoS.",
                "Comparison of system performance is decomposed into comparison of resource utilization and application QoS.",
                "For system resource utilization, we compare (1) network bandwidth utilization of the local area network and (2) CPU utilization at the two UAV nodes.",
                "For application QoS, we compare mean values of video parameters, including (1) picture resolution, (2) frame rate, (3) latency, and (4) jitter.",
                "Comparison of resource utilization.",
                "Over-utilization of system resources in DRE systems can yield an unstable system.",
                "In contrast, under-utilization of system resources increases system cost.",
                "Figure 4 and Figure 5 compare the system resource utilization with and without HyARM.",
                "Figure 4 shows that HyARM maintains system utilization close to the desired utilization set point during fluctuation in input work load by transmitting video of higher (or lower) QoS for QoS-enabled (or best-effort) class of applications during over (or under) utilization of system resources.",
                "Figure 5 shows that without HyARM, network utilization was as high as 0.9 during increase in workload conditions, which is greater than the utilization set point of 0.7 by 0.2.",
                "As a result of over-utilization of resources, QoS of the received video, such as average latency and jitter, was affected significantly.",
                "Without HyARM, system resources were either under-utilized or over-utilized, both of which are undesirable.",
                "In contrast, with HyARM, system resource utilization is always close to the desired set point, even during fluctuations in application workload.",
                "During sudden fluctuation in application workload, system conditions may be temporarily undesirable, but are restored to the desired condition within several sampling periods.",
                "Temporary over-utilization of resources is permissible in our multimedia system since the quality of the video may be degraded for a short period of time, though application QoS will be degraded significantly if poor quality video is transmitted for a longer period of time.",
                "Comparison of application QoS.",
                "Figures 6, Figure 7, and Table 2 compare latency, jitter, resolution, and frameArticle 7 Class Resolution Frame Rate Latency (msec ) Jitter (msec) QoS Enabled 1024 x 768 25 200 200 Best-effort 320 x 240 15 300 250 Table 1: Application QoS Requirements Figure 4: Resource utilization with HyARM Figure 5: Resource utilization without HyARM rate of the received video, respectively.",
                "Table 2 shows that HyARM increases the resolution and frame video of QoSenabled applications, but decreases the resolution and frame rate of best effort applications.",
                "During over utilization of system resources, resolution and frame rate of lower priority applications are reduced to adapt to fluctuations in application workload and to maintain the utilization of resources at the specified set point.",
                "It can be seen from Figure 6 and Figure 7 that HyARM reduces the latency and jitter of the received video significantly.",
                "These figures show that the QoS of QoS-enabled applications is greatly improved by HyARM.",
                "Although application parameters, such as frame rate and resolutions, which affect the soft QoS requirements of best-effort applications may be compromised, the hard QoS requirements, such as latency and jitter, of all applications are met.",
                "HyARM responds to fluctuation in resource availability and/or demand by constant monitoring of resource utilization.",
                "As shown in Figure 4, when resources utilization increases above the desired set point, HyARM lowers the utilization by reducing the QoS of best-effort applications.",
                "This adaptation ensures that enough resources are available for QoS-enabled applications to meet their QoS needs.",
                "Figures 6 and 7 show that the values of latency and jitter of the received video of the system with HyARM are nearly half of the corresponding value of the system without HyARM.",
                "With HyARM, values of these parameters are well below the specified bounds, whereas without HyARM, these value are significantly above the specified bounds due to overutilization of the network bandwidth, which leads to network congestion and results in packet loss.",
                "HyARM avoids this by reducing video parameters such as resolution, frame-rate, and/or modifying the compression scheme used to compress the video.",
                "Our conclusions from analyzing the results described above are that applying adaptive middleware via hybrid control to DRE system helps to (1) improve application QoS, (2) increase system resource utilization, and (3) provide better predictability (lower latency and inter-frame delay) to QoSenabled applications.",
                "These improvements are achieved largely due to monitoring of system resource utilization, efficient system workload management, and adaptive resource provisioning by means of HyARMs network/CPU resource monitors, application adapter, and central controller, respectively. 5.",
                "RELATED WORK A number of control theoretic approaches have been applied to DRE systems recently.",
                "These techniques aid in overcoming limitations with traditional scheduling approaches that handle dynamic changes in resource availability poorly and result in a rigidly scheduled system that adapts poorly to change.",
                "A survey of these techniques is presented in [1].",
                "One such approach is feedback control scheduling (FCS) [2, 11].",
                "FCS algorithms dynamically adjust resource allocation by means of software feedback control loops.",
                "FCS algorithms are modeled and designed using rigorous controltheoretic methodologies.",
                "These algorithms provide robust and analytical performance assurances despite uncertainties in resource availability and/or demand.",
                "Although existing FCS algorithms have shown promise, these algorithms often assume that the system has continuous control variable(s) that can continuously be adjusted.",
                "While this assumption holds for certain classes of systems, there are many classes of DRE systems, such as avionics and total-ship computing environments that only support a finite a priori set of discrete configurations.",
                "The control variables in such systems are therefore intrinsically discrete.",
                "HyARM handles both continuous control variables, such as picture resolution, and discrete control variable, such as discrete set of frame rates.",
                "HyARM can therefore be applied to system that support continuous and/or discrete set of control variables.",
                "The DRE multimedia system as described in Section 2 is an example DRE system that offers both continuous (picture resolution) and discrete set (frame-rate) of control variables.",
                "These variables are modified by HyARM to achieve efficient resource utilization and improved application QoS. 6.",
                "CONCLUDING REMARKS Article 7 Figure 6: Comparison of Video Latency Figure 7: Comparison of Video Jitter Source Picture Size / Frame Rate With HyARM Without HyARM UAV1 QoS Enabled Application 1122 X 1496 / 25 960 X 720 / 20 UAV1 Best-effort Application 288 X 384 / 15 640 X 480 / 20 UAV2 QoS Enabled Application 1126 X 1496 / 25 960 X 720 / 20 UAV2 Best-effort Application 288 X 384 / 15 640 X 480 / 20 Table 2: Comparison of Video Quality Many distributed real-time and embedded (DRE) systems demand end-to-end quality of service (QoS) enforcement from their underlying platforms to operate correctly.",
                "These systems increasingly run in open environments, where resource availability is subject to dynamic change.",
                "To meet end-to-end QoS in dynamic environments, DRE systems can benefit from an adaptive middleware that monitors system resources, performs efficient application workload management, and enables efficient resource provisioning for executing applications.",
                "This paper described HyARM, an adaptive middleware, that provides effective resource management to DRE systems.",
                "HyARM employs hybrid control techniques to provide the adaptive middleware capabilities, such as resource monitoring and application adaptation that are key to providing the dynamic resource management capabilities for open DRE systems.",
                "We employed HyARM to a representative DRE multimedia system that is implemented using Real-time CORBA and CORBA A/V Streaming Service.",
                "We evaluated the performance of HyARM in a system composed of three distributed resources and two classes of applications with two applications each.",
                "Our empirical results indicate that HyARM ensures (1) efficient resource utilization by maintaining the resource utilization of system resources within the specified utilization bounds, (2) QoS requirements of QoS-enabled applications are met at all times.",
                "Overall, HyARM ensures efficient, predictable, and adaptive resource management for DRE systems. 7.",
                "REFERENCES [1] T. F. Abdelzaher, J. Stankovic, C. Lu, R. Zhang, and Y. Lu.",
                "Feddback Performance Control in Software Services.",
                "IEEE: Control Systems, 23(3), June 2003. [2] L. Abeni, L. Palopoli, G. Lipari, and J. Walpole.",
                "Analysis of a reservation-based feedback scheduler.",
                "In IEEE Real-Time Systems Symposium, Dec. 2002. [3] S. Blake, D. Black, M. Carlson, E. Davies, Z. Wang, and W. Weiss.",
                "An architecture for differentiated services.",
                "Network Information Center RFC 2475, Dec. 1998. [4] H. Franke, S. Nagar, C. Seetharaman, and V. Kashyap.",
                "Enabling Autonomic Workload Management in Linux.",
                "In Proceedings of the International Conference on Autonomic Computing (ICAC), New York, New York, May 2004.",
                "IEEE. [5] E. Gamma, R. Helm, R. Johnson, and J. Vlissides.",
                "Design Patterns: Elements of Reusable Object-Oriented Software.",
                "Addison-Wesley, Reading, MA, 1995. [6] G. Ghinea and J. P. Thomas.",
                "Qos impact on user perception and understanding of multimedia video clips.",
                "In MULTIMEDIA 98: Proceedings of the sixth ACM international conference on Multimedia, pages 49-54, Bristol, United Kingdom, 1998.",
                "ACM Press. [7] Internet Engineering Task Force.",
                "Differentiated Services Working Group (diffserv) Charter. www.ietf.org/html.charters/diffserv-charter.html, 2000. [8] X. Koutsoukos, R. Tekumalla, B. Natarajan, and C. Lu.",
                "Hybrid Supervisory Control of Real-Time Systems.",
                "In 11th IEEE Real-Time and Embedded Technology and Applications Symposium, San Francisco, California, Mar. 2005. [9] J. Lehoczky, L. Sha, and Y. Ding.",
                "The Rate Monotonic Scheduling Algorithm: Exact Characterization and Average Case Behavior.",
                "In Proceedings of the 10th IEEE Real-Time Systems Symposium (RTSS 1989), pages 166-171.",
                "IEEE Computer Society Press, 1989. [10] J. Loyall, J. Gossett, C. Gill, R. Schantz, J. Zinky, P. Pal, R. Shapiro, C. Rodrigues, M. Atighetchi, and D. Karr.",
                "Comparing and Contrasting Adaptive Middleware Support in Wide-Area and Embedded Distributed Object Applications.",
                "In Proceedings of the 21st International Conference on Distributed Computing Systems (ICDCS-21), pages 625-634.",
                "IEEE, Apr. 2001. [11] C. Lu, J.",
                "A. Stankovic, G. Tao, and S. H. Son.",
                "Feedback Control Real-Time Scheduling: Framework, Modeling, and Algorithms.",
                "Real-Time Systems Journal, 23(1/2):85-126, July 2002. [12] Object Management Group.",
                "Real-time CORBA Specification, OMG Document formal/02-08-02 edition, Aug. 2002. [13] D. C. Schmidt, D. L. Levine, and S. Mungee.",
                "The Design and Performance of Real-Time Object Request Brokers.",
                "Computer Communications, 21(4):294-324, Apr. 1998. [14] Thomas Sikora.",
                "Trends and Perspectives in Image and Video Coding.",
                "In Proceedings of the IEEE, Jan. 2005. [15] X. Wang, H.-M. Huang, V. Subramonian, C. Lu, and C. Gill.",
                "CAMRIT: Control-based Adaptive Middleware for Real-time Image Transmission.",
                "In Proc. of the 10th IEEE Real-Time and Embedded Tech. and Applications Symp. (RTAS), Toronto, Canada, May 2004.",
                "Article 7"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [],
            "translated_text": "",
            "candidates": [],
            "error": [
                []
            ]
        },
        "quality of service": {
            "translated_key": "calidad de servicio",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Evaluating Adaptive Resource Management for Distributed Real-Time Embedded Systems Nishanth Shankaran, ∗ Xenofon Koutsoukos, Douglas C. Schmidt, and Aniruddha Gokhale Dept.",
                "of EECS, Vanderbilt University, Nashville ABSTRACT A challenging problem faced by researchers and developers of distributed real-time and embedded (DRE) systems is devising and implementing effective adaptive resource management strategies that can meet end-to-end <br>quality of service</br> (QoS) requirements in varying operational conditions.",
                "This paper presents two contributions to research in adaptive resource management for DRE systems.",
                "First, we describe the structure and functionality of the Hybrid Adaptive Resourcemanagement Middleware (HyARM), which provides adaptive resource management using hybrid control techniques for adapting to workload fluctuations and resource availability.",
                "Second, we evaluate the adaptive behavior of HyARM via experiments on a DRE multimedia system that distributes video in real-time.",
                "Our results indicate that HyARM yields predictable, stable, and high system performance, even in the face of fluctuating workload and resource availability.",
                "Categories and Subject Descriptors C.2.4 [Distributed Systems]: Distributed Applications; D.4.7 [Organization and Design]: Real-time Systems and Embedded Systems 1.",
                "INTRODUCTION Achieving end-to-end real-time <br>quality of service</br> (QoS) is particularly important for open distributed real-time and embedded (DRE) systems that face resource constraints, such as limited computing power and network bandwidth.",
                "Overutilization of these system resources can yield unpredictable and unstable behavior, whereas under-utilization can yield excessive system cost.",
                "A promising approach to meeting these end-to-end QoS requirements effectively, therefore, is to develop and apply adaptive middleware [10, 15], which is software whose functional and QoS-related properties can be modified either statically or dynamically.",
                "Static modifications are carried out to reduce footprint, leverage capabilities that exist in specific platforms, enable functional subsetting, and/or minimize hardware/software infrastructure dependencies.",
                "Objectives of dynamic modifications include optimizing system responses to changing environments or requirements, such as changing component interconnections, power-levels, CPU and network bandwidth availability, latency/jitter, and workload.",
                "In open DRE systems, adaptive middleware must make such modifications dependably, i.e., while meeting stringent end-to-end QoS requirements, which requires the specification and enforcement of upper and lower bounds on system resource utilization to ensure effective use of system resources.",
                "To meet these requirements, we have developed the Hybrid Adaptive Resource-management Middleware (HyARM), which is an open-source1 distributed resource management middleware.",
                "HyARM is based on hybrid control theoretic techniques [8], which provide a theoretical framework for designing control of complex system with both continuous and discrete dynamics.",
                "In our case study, which involves a distributed real-time video distribution system, the task of adaptive resource management is to control the utilization of the different resources, whose utilizations are described by continuous variables.",
                "We achieve this by adapting the resolution of the transmitted video, which is modeled as a continuous variable, and by changing the frame-rate and the compression, which are modeled by discrete actions.",
                "We have implemented HyARM atop The ACE ORB (TAO) [13], which is an implementation of the Real-time CORBA specification [12].",
                "Our results show that (1) HyARM ensures effective system resource utilization and (2) end-to-end QoS requirements of higher priority applications are met, even in the face of fluctuations in workload.",
                "The remainder of the paper is organized as follows: Section 2 describes the architecture, functionality, and resource utilization model of our DRE multimedia system case study; Section 3 explains the structure and functionality of HyARM; Section 4 evaluates the adaptive behavior of HyARM via experiments on our multimedia system case study; Section 5 compares our research on HyARM with related work; and Section 6 presents concluding remarks. 1 The code and examples for HyARM are available at www. dre.vanderbilt.edu/∼nshankar/HyARM/.",
                "Article 7 2.",
                "CASE STUDY: DRE MULTIMEDIA SYSTEM This section describes the architecture and QoS requirements of our DRE multimedia system. 2.1 Multimedia System Architecture Wireless Link Wireless Link Wireless Link ` ` ` Physical Link Physical Link Physical Link Base Station End Receiver End Receiver End Receiver` Physical Link End Receiver UAV Camera Video Encoder Camera Video Encoder Camera Video Encoder UAV Camera Video Encoder Camera Video Encoder Camera Video Encoder UAV Camera Video Encoder Camera Video Encoder Camera Video Encoder Figure 1: DRE Multimedia System Architecture The architecture for our DRE multimedia system is shown in Figure 1 and consists of the following entities: (1)Data source (video capture by UAV), where video is captured (related to subject of interest) by camera(s) on each UAV, followed by encoding of raw video using a specific encoding scheme and transmitting the video to the next stage in the pipeline. (2)Data distributor (base station), where the video is processed to remove noise, followed by retransmission of the processed video to the next stage in the pipeline. (3) Sinks (command and control center), where the received video is again processed to remove noise, then decoded and finally rendered to end user via graphical displays.",
                "Significant improvements in video encoding/decoding and (de)compression techniques have been made as a result of recent advances in video encoding and compression techniques [14].",
                "Common video compression schemes are MPEG1, MPEG-2, Real Video, and MPEG-4.",
                "Each compression scheme is characterized by its resource requirement, e.g., the computational power to (de)compress the video signal and the network bandwidth required to transmit the compressed video signal.",
                "Properties of the compressed video, such as resolution and frame-rate determine both the quality and the resource requirements of the video.",
                "Our multimedia system case study has the following endto-end real-time QoS requirements: (1) latency, (2) interframe delay (also know as jitter), (3) frame rate, and (4) picture resolution.",
                "These QoS requirements can be classified as being either hard or soft.",
                "Hard QoS requirements should be met by the underlying system at all times, whereas soft QoS requirements can be missed occasionally.2 For our case study, we treat QoS requirements such as latency and jitter as harder QoS requirements and strive to meet these requirements at all times.",
                "In contrast, we treat QoS requirements such as video frame rate and picture resolution as softer QoS requirements and modify these video properties adaptively to handle dynamic changes in resource availabil2 Although hard and soft are often portrayed as two discrete requirement sets, in practice they are usually two ends of a continuum ranging from softer to harder rather than two disjoint points. ity effectively. 2.2 DRE Multimedia System Rresources There are two primary types of resources in our DRE multimedia system: (1) processors that provide computational power available at the UAVs, base stations, and end receivers and (2) network links that provide communication bandwidth between UAVs, base stations, and end receivers.",
                "The computing power required by the video capture and encoding tasks depends on dynamic factors, such as speed of the UAV, speed of the subject (if the subject is mobile), and distance between UAV and the subject.",
                "The wireless network bandwidth available to transmit video captured by UAVs to base stations also depends on the wireless connectivity between the UAVs and the base station, which in-turn depend on dynamic factors such as the speed of the UAVs and the relative distance between UAVs and base stations.",
                "The bandwidth of the link between the base station and the end receiver is limited, but more stable than the bandwidth of the wireless network.",
                "Resource requirements and availability of resources are subjected to dynamic changes.",
                "Two classes of applications - QoS-enabled and best-effort - use the multimedia system infrastructure described above to transmit video to their respective receivers.",
                "QoS-enabled class of applications have higher priority over best-effort class of application.",
                "In our study, emergency response applications belong to QoS-enabled and surveillance applications belong to best-effort class.",
                "For example, since a stream from an emergency response application is of higher importance than a video stream from a surveillance application, it receives more resources end-to-end.",
                "Since resource availability significantly affects QoS, we use current resource utilization as the primary indicator of system performance.",
                "We refer to the current level of system resource utilization as the system condition.",
                "Based on this definition, we can classify system conditions as being either under, over, or effectively utilized.",
                "Under-utilization of system resources occurs when the current resource utilization is lower than the desired lower bound on resource utilization.",
                "In this system condition, residual system resources (i.e., network bandwidth and computational power) are available in large amounts after meeting end-to-end QoS requirements of applications.",
                "These residual resources can be used to increase the QoS of the applications.",
                "For example, residual CPU and network bandwidth can be used to deliver better quality video (e.g., with greater resolution and higher frame rate) to end receivers.",
                "Over-utilization of system resources occurs when the current resource utilization is higher than the desired upper bound on resource utilization.",
                "This condition can arise from loss of resources - network bandwidth and/or computing power at base station, end receiver or at UAV - or may be due to an increase in resource demands by applications.",
                "Over-utilization is generally undesirable since the quality of the received video (such as resolution and frame rate) and timeliness properties (such as latency and jitter) are degraded and may result in an unstable (and thus ineffective) system.",
                "Effective resource utilization is the desired system condition since it ensures that end-to-end QoS requirements of the UAV-based multimedia system are met and utilization of both system resources, i.e., network bandwidth and computational power, are within their desired utilization bounds.",
                "Article 7 Section 3 describes techniques we applied to achieve effective utilization, even in the face of fluctuating resource availability and/or demand. 3.",
                "OVERVIEW OF HYARM This section describes the architecture of the Hybrid Adaptive Resource-management Middleware (HyARM).",
                "HyARM ensures efficient and predictable system performance by providing adaptive resource management, including monitoring of system resources and enforcing bounds on application resource utilization. 3.1 HyARM Structure and Functionality Resource Utilization Legend Resource Allocation Application Parameters Figure 2: HyARM Architecture HyARM is composed of three types of entities shown in Figure 2 and described below: Resource monitors observe the overall resource utilization for each type of resource and resource utilization per application.",
                "In our multimedia system, there are resource monitors for CPU utilization and network bandwidth.",
                "CPU monitors observe the CPU resource utilization of UAVs, base station, and end receivers.",
                "Network bandwidth monitors observe the network resource utilization of (1) wireless network link between UAVs and the base station and (2) wired network link between the base station and end receivers.",
                "The central controller maintains the system resource utilization below a desired bound by (1) processing periodic updates it receives from resource monitors and (2) modifying the execution of applications accordingly, e.g., by using different execution algorithms or operating the application with increased/decreased QoS.",
                "This adaptation process ensures that system resources are utilized efficiently and end-to-end application QoS requirements are met.",
                "In our multimedia system, the HyARM controller determines the value of application parameters such as (1) video compression schemes, such as Real Video and MPEG-4, and/or (2) frame rate, and (3) picture resolution.",
                "From the perspective of hybrid control theoretic techniques [8], the different video compression schemes and frame rate form the discrete variables of application execution and picture resolution forms the continuous variables.",
                "Application adapters modify application execution according to parameters recommended by the controller and ensures that the operation of the application is in accordance with the recommended parameters.",
                "In the current mplementation of HyARM, the application adapter modifies the input parameters to the application that affect application QoS and resource utilization - compression scheme, frame rate, and picture resolution.",
                "In our future implementations, we plan to use resource reservation mechanisms such as Differentiated Service [7, 3] and Class-based Kernel Resource Management [4] to provision/reserve network and CPU resources.",
                "In our multimedia system, the application adapter ensures that the video is encoded at the recommended frame rate and resolution using the specified compression scheme. 3.2 Applying HyARM to the Multimedia System Case Study HyARM is built atop TAO [13], a widely used open-source implementation of Real-time CORBA [12].",
                "HyARM can be applied to ensure efficient, predictable and adaptive resource management of any DRE system where resource availability and requirements are subject to dynamic change.",
                "Figure 3 shows the interaction of various parts of the DRE multimedia system developed with HyARM, TAO, and TAOs A/V Streaming Service.",
                "TAOs A/V Streaming service is an implementation of the CORBA A/V Streaming Service specification.",
                "TAOs A/V Streaming Service is a QoS-enabled video distribution service that can transfer video in real-time to one or more receivers.",
                "We use the A/V Streaming Service to transmit the video from the UAVs to the end receivers via the base station.",
                "Three entities of Receiver UAV TAO Resource Utilization HyARM Central Controller A/V Streaming Service : Sender MPEG1 MPEG4 Real Video HyARM Resource Monitor A/V Streaming Service : Receiver Compressed Video Compressed Video Application HyARM Application Adapter Remote Object Call Control Inputs Resource Utilization Resource Utilization / Control Inputs Control Inputs Legend Figure 3: Developing the DRE Multimedia System with HyARM HyARM, namely the resource monitors, central controller, and application adapters are built as CORBA servants, so they can be distributed throughout a DRE system.",
                "Resource monitors are remote CORBA objects that update the central controller periodically with the current resource utilization.",
                "Application adapters are collocated with applications since the two interact closely.",
                "As shown in Figure 3, UAVs compress the data using various compression schemes, such as MPEG1, MPEG4, and Real Video, and uses TAOs A/V streaming service to transmit the video to end receivers.",
                "HyARMs resource monitors continuously observe the system resource utilization and notify the central controller with the current utilization. 3 The interaction between the controller and the resource monitors uses the Observer pattern [5].",
                "When the controller receives resource utilization updates from monitors, it computes the necessary modifications to application(s) parameters and notifies application adapter(s) via a remote operation call.",
                "Application adapter(s), that are collocated with the application, modify the input parameters to the application - in our case video encoder - to modify the application resource utilization and QoS. 3 The base station is not included in the figure since it only retransmits the video received from UAVs to end receivers.",
                "Article 7 4.",
                "PERFORMANCE RESULTS AND ANALYSIS This section first describes the testbed that provides the infrastructure for our DRE multimedia system, which was used to evaluate the performance of HyARM.",
                "We then describe our experiments and analyze the results obtained to empirically evaluate how HyARM behaves during underand over-utilization of system resources. 4.1 Overview of the Hardware and Software Testbed Our experiments were performed on the Emulab testbed at University of Utah.",
                "The hardware configuration consists of two nodes acting as UAVs, one acting as base station, and one as end receiver.",
                "Video from the two UAVs were transmitted to a base station via a LAN configured with the following properties: average packet loss ratio of 0.3 and bandwidth 1 Mbps.",
                "The network bandwidth was chosen to be 1 Mbps since each UAV in the DRE multimedia system is allocated 250 Kbps.",
                "These parameters were chosen to emulate an unreliable wireless network with limited bandwidth between the UAVs and the base station.",
                "From the base station, the video was retransmitted to the end receiver via a reliable wireline link of 10 Mbps bandwidth with no packet loss.",
                "The hardware configuration of all the nodes was chosen as follows: 600 MHz Intel Pentium III processor, 256 MB physical memory, 4 Intel EtherExpress Pro 10/100 Mbps Ethernet ports, and 13 GB hard drive.",
                "A real-time version of Linux - TimeSys Linux/NET 3.1.214 based on RedHat Linux 9was used as the operating system for all nodes.",
                "The following software packages were also used for our experiments: (1) Ffmpeg 0.4.9-pre1, which is an open-source library (http: //www.ffmpeg.sourceforge.net/download.php) that compresses video into MPEG-2, MPEG-4, Real Video, and many other video formats. (2) Iftop 0.16, which is an opensource library (http://www.ex-parrot.com/∼pdw/iftop/) we used for monitoring network activity and bandwidth utilization. (3) ACE 5.4.3 + TAO 1.4.3, which is an opensource (http://www.dre.vanderbilt.edu/TAO) implementation of the Real-time CORBA [12] specification upon which HyARM is built.",
                "TAO provides the CORBA Audio/Video (A/V) Streaming Service that we use to transmit the video from the UAVs to end receivers via the base station. 4.2 Experiment Configuration Our experiment consisted of two (emulated) UAVs that simultaneously send video to the base station using the experimentation setup described in Section 4.1.",
                "At the base station, video was retransmitted to the end receivers (without any modifications), where it was stored to a file.",
                "Each UAV hosted two applications, one QoS-enabled application (emergency response), and one best-effort application (surveillance).",
                "Within each UAV, computational power is shared between the applications, while the network bandwidth is shared among all applications.",
                "To evaluate the QoS provided by HyARM, we monitored CPU utilization at the two UAVs, and network bandwidth utilization between the UAV and the base station.",
                "CPU resource utilization was not monitored at the base station and the end receiver since they performed no computationallyintensive operations.",
                "The resource utilization of the 10 Mpbs physical link between the base station and the end receiver does not affect QoS of applications and is not monitored by HyARM since it is nearly 10 times the 1 MB bandwidth of the LAN between the UAVs and the base station.",
                "The experiment also monitors properties of the video that affect the QoS of the applications, such as latency, jitter, frame rate, and resolution.",
                "The set point on resource utilization for each resource was specified at 0.69, which is the upper bound typically recommended by scheduling techniques, such as rate monotonic algorithm [9].",
                "Since studies [6] have shown that human eyes can perceive delays more than 200ms, we use this as the upper bound on jitter of the received video.",
                "QoS requirements for each class of application is specified during system initialization and is shown in Table 1. 4.3 Empirical Results and Analysis This section presents the results obtained from running the experiment described in Section 4.2 on our DRE multimedia system testbed.",
                "We used system resource utilization as a metric to evaluate the adaptive resource management capabilities of HyARM under varying input work loads.",
                "We also used application QoS as a metric to evaluate HyARMs capabilities to support end-to-end QoS requirements of the various classes of applications in the DRE multimedia system.",
                "We analyze these results to explain the significant differences in system performance and application QoS.",
                "Comparison of system performance is decomposed into comparison of resource utilization and application QoS.",
                "For system resource utilization, we compare (1) network bandwidth utilization of the local area network and (2) CPU utilization at the two UAV nodes.",
                "For application QoS, we compare mean values of video parameters, including (1) picture resolution, (2) frame rate, (3) latency, and (4) jitter.",
                "Comparison of resource utilization.",
                "Over-utilization of system resources in DRE systems can yield an unstable system.",
                "In contrast, under-utilization of system resources increases system cost.",
                "Figure 4 and Figure 5 compare the system resource utilization with and without HyARM.",
                "Figure 4 shows that HyARM maintains system utilization close to the desired utilization set point during fluctuation in input work load by transmitting video of higher (or lower) QoS for QoS-enabled (or best-effort) class of applications during over (or under) utilization of system resources.",
                "Figure 5 shows that without HyARM, network utilization was as high as 0.9 during increase in workload conditions, which is greater than the utilization set point of 0.7 by 0.2.",
                "As a result of over-utilization of resources, QoS of the received video, such as average latency and jitter, was affected significantly.",
                "Without HyARM, system resources were either under-utilized or over-utilized, both of which are undesirable.",
                "In contrast, with HyARM, system resource utilization is always close to the desired set point, even during fluctuations in application workload.",
                "During sudden fluctuation in application workload, system conditions may be temporarily undesirable, but are restored to the desired condition within several sampling periods.",
                "Temporary over-utilization of resources is permissible in our multimedia system since the quality of the video may be degraded for a short period of time, though application QoS will be degraded significantly if poor quality video is transmitted for a longer period of time.",
                "Comparison of application QoS.",
                "Figures 6, Figure 7, and Table 2 compare latency, jitter, resolution, and frameArticle 7 Class Resolution Frame Rate Latency (msec ) Jitter (msec) QoS Enabled 1024 x 768 25 200 200 Best-effort 320 x 240 15 300 250 Table 1: Application QoS Requirements Figure 4: Resource utilization with HyARM Figure 5: Resource utilization without HyARM rate of the received video, respectively.",
                "Table 2 shows that HyARM increases the resolution and frame video of QoSenabled applications, but decreases the resolution and frame rate of best effort applications.",
                "During over utilization of system resources, resolution and frame rate of lower priority applications are reduced to adapt to fluctuations in application workload and to maintain the utilization of resources at the specified set point.",
                "It can be seen from Figure 6 and Figure 7 that HyARM reduces the latency and jitter of the received video significantly.",
                "These figures show that the QoS of QoS-enabled applications is greatly improved by HyARM.",
                "Although application parameters, such as frame rate and resolutions, which affect the soft QoS requirements of best-effort applications may be compromised, the hard QoS requirements, such as latency and jitter, of all applications are met.",
                "HyARM responds to fluctuation in resource availability and/or demand by constant monitoring of resource utilization.",
                "As shown in Figure 4, when resources utilization increases above the desired set point, HyARM lowers the utilization by reducing the QoS of best-effort applications.",
                "This adaptation ensures that enough resources are available for QoS-enabled applications to meet their QoS needs.",
                "Figures 6 and 7 show that the values of latency and jitter of the received video of the system with HyARM are nearly half of the corresponding value of the system without HyARM.",
                "With HyARM, values of these parameters are well below the specified bounds, whereas without HyARM, these value are significantly above the specified bounds due to overutilization of the network bandwidth, which leads to network congestion and results in packet loss.",
                "HyARM avoids this by reducing video parameters such as resolution, frame-rate, and/or modifying the compression scheme used to compress the video.",
                "Our conclusions from analyzing the results described above are that applying adaptive middleware via hybrid control to DRE system helps to (1) improve application QoS, (2) increase system resource utilization, and (3) provide better predictability (lower latency and inter-frame delay) to QoSenabled applications.",
                "These improvements are achieved largely due to monitoring of system resource utilization, efficient system workload management, and adaptive resource provisioning by means of HyARMs network/CPU resource monitors, application adapter, and central controller, respectively. 5.",
                "RELATED WORK A number of control theoretic approaches have been applied to DRE systems recently.",
                "These techniques aid in overcoming limitations with traditional scheduling approaches that handle dynamic changes in resource availability poorly and result in a rigidly scheduled system that adapts poorly to change.",
                "A survey of these techniques is presented in [1].",
                "One such approach is feedback control scheduling (FCS) [2, 11].",
                "FCS algorithms dynamically adjust resource allocation by means of software feedback control loops.",
                "FCS algorithms are modeled and designed using rigorous controltheoretic methodologies.",
                "These algorithms provide robust and analytical performance assurances despite uncertainties in resource availability and/or demand.",
                "Although existing FCS algorithms have shown promise, these algorithms often assume that the system has continuous control variable(s) that can continuously be adjusted.",
                "While this assumption holds for certain classes of systems, there are many classes of DRE systems, such as avionics and total-ship computing environments that only support a finite a priori set of discrete configurations.",
                "The control variables in such systems are therefore intrinsically discrete.",
                "HyARM handles both continuous control variables, such as picture resolution, and discrete control variable, such as discrete set of frame rates.",
                "HyARM can therefore be applied to system that support continuous and/or discrete set of control variables.",
                "The DRE multimedia system as described in Section 2 is an example DRE system that offers both continuous (picture resolution) and discrete set (frame-rate) of control variables.",
                "These variables are modified by HyARM to achieve efficient resource utilization and improved application QoS. 6.",
                "CONCLUDING REMARKS Article 7 Figure 6: Comparison of Video Latency Figure 7: Comparison of Video Jitter Source Picture Size / Frame Rate With HyARM Without HyARM UAV1 QoS Enabled Application 1122 X 1496 / 25 960 X 720 / 20 UAV1 Best-effort Application 288 X 384 / 15 640 X 480 / 20 UAV2 QoS Enabled Application 1126 X 1496 / 25 960 X 720 / 20 UAV2 Best-effort Application 288 X 384 / 15 640 X 480 / 20 Table 2: Comparison of Video Quality Many distributed real-time and embedded (DRE) systems demand end-to-end <br>quality of service</br> (QoS) enforcement from their underlying platforms to operate correctly.",
                "These systems increasingly run in open environments, where resource availability is subject to dynamic change.",
                "To meet end-to-end QoS in dynamic environments, DRE systems can benefit from an adaptive middleware that monitors system resources, performs efficient application workload management, and enables efficient resource provisioning for executing applications.",
                "This paper described HyARM, an adaptive middleware, that provides effective resource management to DRE systems.",
                "HyARM employs hybrid control techniques to provide the adaptive middleware capabilities, such as resource monitoring and application adaptation that are key to providing the dynamic resource management capabilities for open DRE systems.",
                "We employed HyARM to a representative DRE multimedia system that is implemented using Real-time CORBA and CORBA A/V Streaming Service.",
                "We evaluated the performance of HyARM in a system composed of three distributed resources and two classes of applications with two applications each.",
                "Our empirical results indicate that HyARM ensures (1) efficient resource utilization by maintaining the resource utilization of system resources within the specified utilization bounds, (2) QoS requirements of QoS-enabled applications are met at all times.",
                "Overall, HyARM ensures efficient, predictable, and adaptive resource management for DRE systems. 7.",
                "REFERENCES [1] T. F. Abdelzaher, J. Stankovic, C. Lu, R. Zhang, and Y. Lu.",
                "Feddback Performance Control in Software Services.",
                "IEEE: Control Systems, 23(3), June 2003. [2] L. Abeni, L. Palopoli, G. Lipari, and J. Walpole.",
                "Analysis of a reservation-based feedback scheduler.",
                "In IEEE Real-Time Systems Symposium, Dec. 2002. [3] S. Blake, D. Black, M. Carlson, E. Davies, Z. Wang, and W. Weiss.",
                "An architecture for differentiated services.",
                "Network Information Center RFC 2475, Dec. 1998. [4] H. Franke, S. Nagar, C. Seetharaman, and V. Kashyap.",
                "Enabling Autonomic Workload Management in Linux.",
                "In Proceedings of the International Conference on Autonomic Computing (ICAC), New York, New York, May 2004.",
                "IEEE. [5] E. Gamma, R. Helm, R. Johnson, and J. Vlissides.",
                "Design Patterns: Elements of Reusable Object-Oriented Software.",
                "Addison-Wesley, Reading, MA, 1995. [6] G. Ghinea and J. P. Thomas.",
                "Qos impact on user perception and understanding of multimedia video clips.",
                "In MULTIMEDIA 98: Proceedings of the sixth ACM international conference on Multimedia, pages 49-54, Bristol, United Kingdom, 1998.",
                "ACM Press. [7] Internet Engineering Task Force.",
                "Differentiated Services Working Group (diffserv) Charter. www.ietf.org/html.charters/diffserv-charter.html, 2000. [8] X. Koutsoukos, R. Tekumalla, B. Natarajan, and C. Lu.",
                "Hybrid Supervisory Control of Real-Time Systems.",
                "In 11th IEEE Real-Time and Embedded Technology and Applications Symposium, San Francisco, California, Mar. 2005. [9] J. Lehoczky, L. Sha, and Y. Ding.",
                "The Rate Monotonic Scheduling Algorithm: Exact Characterization and Average Case Behavior.",
                "In Proceedings of the 10th IEEE Real-Time Systems Symposium (RTSS 1989), pages 166-171.",
                "IEEE Computer Society Press, 1989. [10] J. Loyall, J. Gossett, C. Gill, R. Schantz, J. Zinky, P. Pal, R. Shapiro, C. Rodrigues, M. Atighetchi, and D. Karr.",
                "Comparing and Contrasting Adaptive Middleware Support in Wide-Area and Embedded Distributed Object Applications.",
                "In Proceedings of the 21st International Conference on Distributed Computing Systems (ICDCS-21), pages 625-634.",
                "IEEE, Apr. 2001. [11] C. Lu, J.",
                "A. Stankovic, G. Tao, and S. H. Son.",
                "Feedback Control Real-Time Scheduling: Framework, Modeling, and Algorithms.",
                "Real-Time Systems Journal, 23(1/2):85-126, July 2002. [12] Object Management Group.",
                "Real-time CORBA Specification, OMG Document formal/02-08-02 edition, Aug. 2002. [13] D. C. Schmidt, D. L. Levine, and S. Mungee.",
                "The Design and Performance of Real-Time Object Request Brokers.",
                "Computer Communications, 21(4):294-324, Apr. 1998. [14] Thomas Sikora.",
                "Trends and Perspectives in Image and Video Coding.",
                "In Proceedings of the IEEE, Jan. 2005. [15] X. Wang, H.-M. Huang, V. Subramonian, C. Lu, and C. Gill.",
                "CAMRIT: Control-based Adaptive Middleware for Real-time Image Transmission.",
                "In Proc. of the 10th IEEE Real-Time and Embedded Tech. and Applications Symp. (RTAS), Toronto, Canada, May 2004.",
                "Article 7"
            ],
            "original_annotated_samples": [
                "of EECS, Vanderbilt University, Nashville ABSTRACT A challenging problem faced by researchers and developers of distributed real-time and embedded (DRE) systems is devising and implementing effective adaptive resource management strategies that can meet end-to-end <br>quality of service</br> (QoS) requirements in varying operational conditions.",
                "INTRODUCTION Achieving end-to-end real-time <br>quality of service</br> (QoS) is particularly important for open distributed real-time and embedded (DRE) systems that face resource constraints, such as limited computing power and network bandwidth.",
                "CONCLUDING REMARKS Article 7 Figure 6: Comparison of Video Latency Figure 7: Comparison of Video Jitter Source Picture Size / Frame Rate With HyARM Without HyARM UAV1 QoS Enabled Application 1122 X 1496 / 25 960 X 720 / 20 UAV1 Best-effort Application 288 X 384 / 15 640 X 480 / 20 UAV2 QoS Enabled Application 1126 X 1496 / 25 960 X 720 / 20 UAV2 Best-effort Application 288 X 384 / 15 640 X 480 / 20 Table 2: Comparison of Video Quality Many distributed real-time and embedded (DRE) systems demand end-to-end <br>quality of service</br> (QoS) enforcement from their underlying platforms to operate correctly."
            ],
            "translated_annotated_samples": [
                "de EECS, Universidad de Vanderbilt, Nashville RESUMEN Un problema desafiante enfrentado por investigadores y desarrolladores de sistemas distribuidos en tiempo real y embebidos (DRE) es idear e implementar estrategias efectivas de gestión adaptativa de recursos que puedan cumplir con los requisitos de <br>calidad de servicio</br> (QoS) de extremo a extremo en condiciones operativas variables.",
                "INTRODUCCIÓN Lograr la <br>calidad de servicio</br> (QoS) en tiempo real de extremo a extremo es particularmente importante para sistemas distribuidos en tiempo real y embebidos (DRE) abiertos que enfrentan limitaciones de recursos, como potencia de cómputo limitada y ancho de banda de red.",
                "CONCLUSIONES Artículo 7 Figura 6: Comparación de la latencia del video Figura 7: Comparación de la fluctuación del video Fuente Tamaño de imagen / Velocidad de cuadro Con HyARM Sin HyARM UAV1 Aplicación habilitada para QoS 1122 X 1496 / 25 960 X 720 / 20 UAV1 Aplicación de mejor esfuerzo 288 X 384 / 15 640 X 480 / 20 UAV2 Aplicación habilitada para QoS 1126 X 1496 / 25 960 X 720 / 20 UAV2 Aplicación de mejor esfuerzo 288 X 384 / 15 640 X 480 / 20 Tabla 2: Comparación de la calidad del video Muchos sistemas distribuidos en tiempo real y embebidos (DRE) demandan la aplicación correcta de la <br>calidad de servicio</br> (QoS) de extremo a extremo desde sus plataformas subyacentes para operar correctamente."
            ],
            "translated_text": "Evaluando la Gestión de Recursos Adaptativa para Sistemas Empotrados Distribuidos en Tiempo Real de Nishanth Shankaran, Xenofon Koutsoukos, Douglas C. Schmidt y Aniruddha Gokhale, Dept. de EECS, Universidad de Vanderbilt, Nashville RESUMEN Un problema desafiante enfrentado por investigadores y desarrolladores de sistemas distribuidos en tiempo real y embebidos (DRE) es idear e implementar estrategias efectivas de gestión adaptativa de recursos que puedan cumplir con los requisitos de <br>calidad de servicio</br> (QoS) de extremo a extremo en condiciones operativas variables. Este artículo presenta dos contribuciones a la investigación en gestión de recursos adaptativa para sistemas DRE. Primero, describimos la estructura y funcionalidad del Middleware de Gestión de Recursos Adaptativos Híbridos (HyARM), que proporciona gestión de recursos adaptativa utilizando técnicas de control híbridas para adaptarse a las fluctuaciones de carga de trabajo y disponibilidad de recursos. Segundo, evaluamos el comportamiento adaptativo de HyARM a través de experimentos en un sistema multimedia DRE que distribuye video en tiempo real. Nuestros resultados indican que HyARM produce un rendimiento del sistema predecible, estable y alto, incluso ante cargas de trabajo y disponibilidad de recursos fluctuantes. Categorías y Descriptores de Asignaturas C.2.4 [Sistemas Distribuidos]: Aplicaciones Distribuidas; D.4.7 [Organización y Diseño]: Sistemas en Tiempo Real y Sistemas Embebidos 1. INTRODUCCIÓN Lograr la <br>calidad de servicio</br> (QoS) en tiempo real de extremo a extremo es particularmente importante para sistemas distribuidos en tiempo real y embebidos (DRE) abiertos que enfrentan limitaciones de recursos, como potencia de cómputo limitada y ancho de banda de red. La sobreutilización de estos recursos del sistema puede generar un comportamiento impredecible e inestable, mientras que la subutilización puede resultar en un costo excesivo del sistema. Un enfoque prometedor para cumplir de manera efectiva con estos requisitos de calidad de servicio de extremo a extremo, por lo tanto, es desarrollar y aplicar middleware adaptativo [10, 15], que es un software cuyas propiedades funcionales y relacionadas con la calidad de servicio pueden ser modificadas estática o dinámicamente. Las modificaciones estáticas se realizan para reducir la huella, aprovechar las capacidades existentes en plataformas específicas, habilitar la selección funcional y/o minimizar las dependencias de infraestructura de hardware/software. Los objetivos de las modificaciones dinámicas incluyen optimizar las respuestas del sistema a entornos o requisitos cambiantes, como la modificación de interconexiones de componentes, niveles de potencia, disponibilidad de ancho de banda de CPU y red, latencia/jitter y carga de trabajo. En los sistemas DRE abiertos, el middleware adaptativo debe realizar modificaciones de manera confiable, es decir, cumpliendo con los estrictos requisitos de calidad de servicio de extremo a extremo, lo que requiere la especificación y aplicación de límites superiores e inferiores en la utilización de recursos del sistema para garantizar un uso efectivo de los recursos del sistema. Para cumplir con estos requisitos, hemos desarrollado el Middleware de Gestión de Recursos Híbrido Adaptativo (HyARM), que es un middleware de gestión de recursos distribuido de código abierto. HyARM se basa en técnicas híbridas de control teórico, las cuales proporcionan un marco teórico para diseñar el control de sistemas complejos con dinámicas tanto continuas como discretas. En nuestro estudio de caso, que implica un sistema distribuido de distribución de video en tiempo real, la tarea de gestión de recursos adaptativa consiste en controlar la utilización de los diferentes recursos, cuyas utilizaciones están descritas por variables continuas. Logramos esto adaptando la resolución del video transmitido, que se modela como una variable continua, y cambiando la velocidad de cuadros y la compresión, que se modelan mediante acciones discretas. Hemos implementado HyARM sobre el ORB ACE (TAO) [13], que es una implementación de la especificación CORBA en tiempo real [12]. Nuestros resultados muestran que (1) HyARM garantiza una utilización efectiva de los recursos del sistema y (2) se cumplen los requisitos de calidad de servicio de extremo a extremo de las aplicaciones de mayor prioridad, incluso ante fluctuaciones en la carga de trabajo. El resto del documento está organizado de la siguiente manera: la Sección 2 describe la arquitectura, funcionalidad y modelo de utilización de recursos de nuestro estudio de caso del sistema multimedia DRE; la Sección 3 explica la estructura y funcionalidad de HyARM; la Sección 4 evalúa el comportamiento adaptativo de HyARM a través de experimentos en nuestro estudio de caso del sistema multimedia; la Sección 5 compara nuestra investigación sobre HyARM con trabajos relacionados; y la Sección 6 presenta observaciones finales. El código y ejemplos de HyARM están disponibles en www.dre.vanderbilt.edu/∼nshankar/HyARM/. Artículo 7 2. ESTUDIO DE CASO: SISTEMA MULTIMEDIA DRE Esta sección describe la arquitectura y los requisitos de QoS de nuestro sistema multimedia DRE. 2.1 Arquitectura del Sistema Multimedia Enlace Inalámbrico Enlace Inalámbrico Enlace Inalámbrico ` ` ` Enlace Físico Enlace Físico Enlace Físico Estación Base Extremo Receptor Extremo Receptor Extremo Receptor` Enlace Físico Extremo Receptor Cámara UAV Codificador de Video Cámara Codificador de Video Cámara Codificador de Video Cámara UAV Codificador de Video Cámara Codificador de Video Cámara Codificador de Video Cámara UAV Codificador de Video Cámara Codificador de Video Cámara Codificador de Video Figura 1: Arquitectura del Sistema Multimedia DRE La arquitectura de nuestro sistema multimedia DRE se muestra en la Figura 1 y consta de las siguientes entidades: (1) Fuente de datos (captura de video por UAV), donde el video es capturado (relacionado con el tema de interés) por la(s) cámara(s) en cada UAV, seguido por la codificación del video crudo utilizando un esquema de codificación específico y transmitiendo el video a la siguiente etapa en la cadena de procesamiento. (2) Distribuidor de datos (estación base), donde el video es procesado para eliminar ruido, seguido por la retransmisión del video procesado a la siguiente etapa en la cadena de procesamiento. (3) Destinos (centro de comando y control), donde el video recibido es nuevamente procesado para eliminar ruido, luego decodificado y finalmente renderizado al usuario final a través de pantallas gráficas. Se han logrado mejoras significativas en las técnicas de codificación/decodificación y compresión (des) de video como resultado de los avances recientes en las técnicas de codificación y compresión de video [14]. Los esquemas comunes de compresión de video son MPEG1, MPEG-2, Real Video y MPEG-4. Cada esquema de compresión se caracteriza por sus requisitos de recursos, por ejemplo, la potencia computacional para (des)comprimir la señal de video y el ancho de banda de red necesario para transmitir la señal de video comprimida. Las propiedades del video comprimido, como la resolución y la velocidad de fotogramas, determinan tanto la calidad como los requisitos de recursos del video. Nuestro estudio de caso del sistema multimedia tiene los siguientes requisitos de calidad de servicio (QoS) en tiempo real de extremo a extremo: (1) latencia, (2) retardo entre cuadros (también conocido como jitter), (3) frecuencia de cuadros y (4) resolución de imagen. Estos requisitos de calidad de servicio (QoS) pueden clasificarse como duros o blandos. Los requisitos de QoS estrictos deben ser cumplidos por el sistema subyacente en todo momento, mientras que los requisitos de QoS flexibles pueden ser ocasionalmente incumplidos. Para nuestro estudio de caso, tratamos los requisitos de QoS como la latencia y la variabilidad de retardo como requisitos de QoS más estrictos y nos esforzamos por cumplir con estos requisitos en todo momento. Por el contrario, tratamos los requisitos de QoS como la tasa de cuadros de video y la resolución de imagen como requisitos de QoS más flexibles y modificamos estas propiedades de video de manera adaptativa para manejar los cambios dinámicos en la disponibilidad de recursos de manera efectiva. Aunque a menudo se presentan como dos conjuntos de requisitos discretos, en la práctica suelen ser dos extremos de un continuo que va desde más suave a más duro en lugar de dos puntos disjuntos. La potencia informática requerida por las tareas de captura y codificación de video depende de factores dinámicos, como la velocidad del UAV, la velocidad del sujeto (si el sujeto es móvil) y la distancia entre el UAV y el sujeto. La cantidad de ancho de banda de la red inalámbrica disponible para transmitir video capturado por UAVs a estaciones base también depende de la conectividad inalámbrica entre los UAVs y la estación base, que a su vez depende de factores dinámicos como la velocidad de los UAVs y la distancia relativa entre los UAVs y las estaciones base. El ancho de banda del enlace entre la estación base y el receptor final está limitado, pero es más estable que el ancho de banda de la red inalámbrica. Los requisitos de recursos y la disponibilidad de recursos están sujetos a cambios dinámicos. Dos clases de aplicaciones - habilitadas para QoS y de mejor esfuerzo - utilizan la infraestructura del sistema multimedia descrita anteriormente para transmitir video a sus respectivos receptores. Las aplicaciones de clase habilitada para QoS tienen mayor prioridad sobre las aplicaciones de clase de mejor esfuerzo. En nuestro estudio, las aplicaciones de respuesta de emergencia pertenecen a la clase habilitada para la calidad de servicio (QoS), y las aplicaciones de vigilancia pertenecen a la clase de mejor esfuerzo. Por ejemplo, dado que un flujo de datos de una aplicación de respuesta de emergencia es de mayor importancia que un flujo de video de una aplicación de vigilancia, recibe más recursos de extremo a extremo. Dado que la disponibilidad de recursos afecta significativamente la calidad de servicio, utilizamos la utilización actual de recursos como indicador principal del rendimiento del sistema. Nos referimos al nivel actual de utilización de recursos del sistema como la condición del sistema. Basándonos en esta definición, podemos clasificar las condiciones del sistema como estando subutilizadas, sobreutilizadas o utilizadas de manera efectiva. La subutilización de los recursos del sistema ocurre cuando la utilización actual de los recursos es menor que el límite inferior deseado de utilización de recursos. En este sistema, los recursos residuales del sistema (es decir, ancho de banda de red y potencia computacional) están disponibles en grandes cantidades después de cumplir con los requisitos de calidad de servicio de extremo a extremo de las aplicaciones. Estos recursos residuales se pueden utilizar para aumentar la calidad de servicio de las aplicaciones. Por ejemplo, la CPU residual y el ancho de banda de red pueden ser utilizados para entregar videos de mejor calidad (por ejemplo, con mayor resolución y mayor velocidad de cuadros) a los receptores finales. La sobreutilización de los recursos del sistema ocurre cuando la utilización actual de recursos es mayor que el límite superior deseado de utilización de recursos. Esta condición puede surgir por la pérdida de recursos - ancho de banda de red y/o potencia de cómputo en la estación base, receptor final o en el UAV - o puede ser debido a un aumento en las demandas de recursos por parte de las aplicaciones. La sobreutilización es generalmente indeseable ya que la calidad del video recibido (como la resolución y la velocidad de cuadros) y las propiedades de puntualidad (como la latencia y la fluctuación) se degradan y pueden resultar en un sistema inestable (y por lo tanto ineficaz). La utilización efectiva de recursos es la condición deseada del sistema, ya que garantiza que se cumplan los requisitos de calidad de servicio de extremo a extremo del sistema multimedia basado en UAV y que la utilización de los recursos del sistema, es decir, el ancho de banda de la red y la potencia computacional, se encuentren dentro de sus límites de utilización deseados. El artículo 7, sección 3 describe las técnicas que aplicamos para lograr una utilización efectiva, incluso ante la disponibilidad y/o demanda fluctuante de recursos. DESCRIPCIÓN DE HYARM Esta sección describe la arquitectura del Middleware de Gestión de Recursos Adaptativos Híbrido (HyARM). HyARM garantiza un rendimiento eficiente y predecible del sistema al proporcionar gestión adaptativa de recursos, que incluye la monitorización de los recursos del sistema y la imposición de límites en la utilización de recursos de las aplicaciones. 3.1 Estructura y Funcionalidad de HyARM Leyenda de Utilización de Recursos Asignación de Recursos Parámetros de Aplicación Figura 2: Arquitectura de HyARM HyARM está compuesto por tres tipos de entidades mostradas en la Figura 2 y descritas a continuación: Los monitores de recursos observan la utilización general de recursos para cada tipo de recurso y la utilización de recursos por aplicación. En nuestro sistema multimedia, hay monitores de recursos para la utilización de la CPU y el ancho de banda de la red. Los monitores de la CPU observan la utilización de recursos de la CPU de los UAV, la estación base y los receptores finales. Los monitores de ancho de banda de red observan la utilización de recursos de red de (1) el enlace de red inalámbrica entre los UAV y la estación base y (2) el enlace de red cableada entre la estación base y los receptores finales. El controlador central mantiene la utilización de recursos del sistema por debajo de un límite deseado mediante (1) el procesamiento de actualizaciones periódicas que recibe de los monitores de recursos y (2) modificando la ejecución de las aplicaciones en consecuencia, por ejemplo, utilizando diferentes algoritmos de ejecución u operando la aplicación con mayor/menor calidad de servicio (QoS). Este proceso de adaptación garantiza que los recursos del sistema se utilicen de manera eficiente y se cumplan los requisitos de calidad de servicio de la aplicación de extremo a extremo. En nuestro sistema multimedia, el controlador HyARM determina el valor de parámetros de la aplicación como (1) esquemas de compresión de video, como Real Video y MPEG-4, y/o (2) velocidad de cuadros, y (3) resolución de imagen. Desde la perspectiva de las técnicas híbridas de control teórico [8], los diferentes esquemas de compresión de video y la velocidad de cuadros forman las variables discretas de la ejecución de la aplicación, mientras que la resolución de imagen forma las variables continuas. Los adaptadores de aplicación modifican la ejecución de la aplicación de acuerdo con los parámetros recomendados por el controlador y garantizan que el funcionamiento de la aplicación esté de acuerdo con los parámetros recomendados. En la implementación actual de HyARM, el adaptador de la aplicación modifica los parámetros de entrada a la aplicación que afectan la calidad de servicio (QoS) de la aplicación y la utilización de recursos, como el esquema de compresión, la velocidad de fotogramas y la resolución de la imagen. En nuestras futuras implementaciones, planeamos utilizar mecanismos de reserva de recursos como Differentiated Service [7, 3] y Class-based Kernel Resource Management [4] para aprovisionar/reservar recursos de red y CPU. En nuestro sistema multimedia, el adaptador de la aplicación se asegura de que el video se codifique a la velocidad de cuadros y resolución recomendadas utilizando el esquema de compresión especificado. 3.2 Aplicando HyARM al Estudio de Caso del Sistema Multimedia. HyARM se construye sobre TAO [13], una implementación de código abierto ampliamente utilizada de CORBA en tiempo real [12]. HyARM se puede aplicar para garantizar una gestión eficiente, predecible y adaptable de recursos en cualquier sistema DRE donde la disponibilidad y los requisitos de recursos están sujetos a cambios dinámicos. La Figura 3 muestra la interacción de varias partes del sistema multimedia DRE desarrollado con HyARM, TAO y el Servicio de Streaming de Audio y Video de TAOs. El servicio de transmisión de audio/vídeo de TAO es una implementación de la especificación del Servicio de Transmisión de Audio/Vídeo de CORBA. El servicio de transmisión de audio y video de TAOs es un servicio de distribución de video habilitado para QoS que puede transferir video en tiempo real a uno o más receptores. Utilizamos el Servicio de Transmisión de Audio y Video para enviar el video desde los VANTs a los receptores finales a través de la estación base. Tres entidades del sistema multimedia DRE con HyARM, a saber, los monitores de recursos, el controlador central y los adaptadores de aplicaciones, están construidos como servidores CORBA, por lo que pueden distribuirse en todo el sistema DRE. Los monitores de recursos son objetos CORBA remotos que actualizan periódicamente al controlador central con la utilización actual de recursos. Los adaptadores de aplicaciones se ubican junto a las aplicaciones ya que ambas interactúan estrechamente. Como se muestra en la Figura 3, los UAV comprimen los datos utilizando varios esquemas de compresión, como MPEG1, MPEG4 y Real Video, y utilizan el servicio de transmisión de audio/vídeo de TAOs para enviar el video a los receptores finales. Los monitores de recursos de HyARMs observan continuamente la utilización de recursos del sistema y notifican al controlador central con la utilización actual. La interacción entre el controlador y los monitores de recursos utiliza el patrón Observer. Cuando el controlador recibe actualizaciones de utilización de recursos de los monitores, calcula las modificaciones necesarias a los parámetros de la(s) aplicación(es) y notifica al adaptador de la aplicación mediante una llamada de operación remota. Los adaptadores de aplicación, que están ubicados junto a la aplicación, modifican los parámetros de entrada de la aplicación, en nuestro caso el codificador de video, para modificar la utilización de recursos de la aplicación y la calidad de servicio. La estación base no está incluida en la figura ya que solo retransmite el video recibido de los UAV a los receptores finales. Artículo 7 4. RESULTADOS DE RENDIMIENTO Y ANÁLISIS Esta sección describe primero el banco de pruebas que proporciona la infraestructura para nuestro sistema multimedia DRE, que se utilizó para evaluar el rendimiento de HyARM. Luego describimos nuestros experimentos y analizamos los resultados obtenidos para evaluar empíricamente cómo se comporta HyARM durante la subutilización y sobreutilización de los recursos del sistema. 4.1 Descripción general del banco de pruebas de hardware y software Nuestros experimentos se realizaron en el banco de pruebas Emulab en la Universidad de Utah. La configuración de hardware consiste en dos nodos actuando como UAVs, uno actuando como estación base y otro como receptor final. El video de los dos UAV fue transmitido a una estación base a través de una LAN configurada con las siguientes propiedades: una relación promedio de pérdida de paquetes de 0.3 y un ancho de banda de 1 Mbps. El ancho de banda de la red se eligió para ser de 1 Mbps ya que a cada UAV en el sistema multimedia DRE se le asignan 250 Kbps. Estos parámetros fueron elegidos para emular una red inalámbrica poco confiable con ancho de banda limitado entre los UAVs y la estación base. Desde la estación base, el video fue retransmitido al receptor final a través de un enlace por cable confiable de 10 Mbps de ancho de banda sin pérdida de paquetes. La configuración de hardware de todos los nodos fue elegida de la siguiente manera: procesador Intel Pentium III de 600 MHz, 256 MB de memoria física, 4 puertos Ethernet Intel EtherExpress Pro de 10/100 Mbps y disco duro de 13 GB. Se utilizó una versión en tiempo real de Linux - TimeSys Linux/NET 3.1.214 basada en RedHat Linux 9 como sistema operativo para todos los nodos. Los siguientes paquetes de software también fueron utilizados para nuestros experimentos: (1) Ffmpeg 0.4.9-pre1, que es una biblioteca de código abierto (http://www.ffmpeg.sourceforge.net/download.php) que comprime video en formatos MPEG-2, MPEG-4, Real Video, y muchos otros formatos de video. (2) Iftop 0.16, que es una biblioteca de código abierto (http://www.ex-parrot.com/∼pdw/iftop/) que utilizamos para monitorear la actividad de red y la utilización del ancho de banda. (3) ACE 5.4.3 + TAO 1.4.3, que es una implementación de código abierto (http://www.dre.vanderbilt.edu/TAO) de la especificación CORBA en tiempo real [12] sobre la cual se construye HyARM. TAO proporciona el Servicio de Transmisión de Audio/Video (A/V) CORBA que utilizamos para transmitir el video desde los UAVs a los receptores finales a través de la estación base. Configuración del experimento Nuestro experimento consistió en dos UAVs (emulados) que enviaron video simultáneamente a la estación base utilizando la configuración experimental descrita en la Sección 4.1. En la estación base, el video fue retransmitido a los receptores finales (sin ninguna modificación), donde fue almacenado en un archivo. Cada UAV alojaba dos aplicaciones, una aplicación habilitada para QoS (respuesta de emergencia) y una aplicación de mejor esfuerzo (vigilancia). Dentro de cada UAV, el poder computacional se comparte entre las aplicaciones, mientras que el ancho de banda de la red se comparte entre todas las aplicaciones. Para evaluar la calidad de servicio proporcionada por HyARM, monitoreamos la utilización de la CPU en los dos UAV y la utilización del ancho de banda de la red entre el UAV y la estación base. La utilización de recursos de la CPU no se monitoreó en la estación base y en el receptor final, ya que no realizaron operaciones computacionalmente intensivas. La utilización de recursos del enlace físico de 10 Mbps entre la estación base y el receptor final no afecta la calidad de servicio de las aplicaciones y no es monitoreada por HyARM, ya que es casi 10 veces el ancho de banda de 1 MB de la LAN entre los UAV y la estación base. El experimento también monitorea propiedades del video que afectan la calidad de servicio de las aplicaciones, como la latencia, la variabilidad de retardo, la tasa de cuadros y la resolución. El punto de ajuste en la utilización de recursos para cada recurso se especificó en 0.69, que es el límite superior típicamente recomendado por técnicas de programación, como el algoritmo monótono de tasa [9]. Dado que los estudios [6] han demostrado que los ojos humanos pueden percibir retrasos de más de 200 ms, utilizamos esto como límite superior de la variabilidad en el video recibido. Los requisitos de QoS para cada clase de aplicación se especifican durante la inicialización del sistema y se muestran en la Tabla 1. 4.3 Resultados empíricos y análisis Esta sección presenta los resultados obtenidos al ejecutar el experimento descrito en la Sección 4.2 en nuestro banco de pruebas del sistema multimedia DRE. Utilizamos la utilización de recursos del sistema como métrica para evaluar las capacidades de gestión de recursos adaptativos de HyARM bajo cargas de trabajo de entrada variables. También utilizamos la calidad de servicio de la aplicación como métrica para evaluar las capacidades de HyARMs para satisfacer los requisitos de calidad de servicio de extremo a extremo de las diferentes clases de aplicaciones en el sistema multimedia DRE. Analizamos estos resultados para explicar las diferencias significativas en el rendimiento del sistema y la calidad de servicio de la aplicación. La comparación del rendimiento del sistema se descompone en la comparación de la utilización de recursos y la calidad de servicio de la aplicación. Para la utilización de recursos del sistema, comparamos (1) la utilización del ancho de banda de la red de área local y (2) la utilización de la CPU en los dos nodos UAV. Para la aplicación de QoS, comparamos los valores medios de los parámetros de video, incluyendo (1) resolución de imagen, (2) velocidad de cuadros, (3) latencia y (4) jitter. Comparación de la utilización de recursos. La sobreutilización de recursos del sistema en sistemas DRE puede generar un sistema inestable. Por el contrario, la subutilización de los recursos del sistema aumenta el costo del sistema. La Figura 4 y la Figura 5 comparan la utilización de recursos del sistema con y sin HyARM. La Figura 4 muestra que HyARM mantiene la utilización del sistema cerca del punto de ajuste de utilización deseado durante la fluctuación en la carga de trabajo de entrada al transmitir video de mayor (o menor) calidad de servicio para la clase de aplicaciones con calidad de servicio habilitada (o de mejor esfuerzo) durante la sobre (o sub) utilización de los recursos del sistema. La Figura 5 muestra que sin HyARM, la utilización de la red alcanzó hasta 0.9 durante el aumento de las condiciones de carga de trabajo, lo cual es mayor que el punto de ajuste de utilización de 0.7 en 0.2. Como resultado de la sobreutilización de recursos, la calidad de servicio (QoS) del video recibido, como la latencia promedio y el jitter, se vio afectada significativamente. Sin HyARM, los recursos del sistema estaban subutilizados o sobreutilizados, ambos de los cuales son indeseables. En contraste, con HyARM, la utilización de recursos del sistema siempre está cerca del punto de ajuste deseado, incluso durante las fluctuaciones en la carga de trabajo de la aplicación. Durante fluctuaciones repentinas en la carga de trabajo de la aplicación, las condiciones del sistema pueden ser temporalmente indeseables, pero se restauran a la condición deseada dentro de varios períodos de muestreo. La sobreutilización temporal de recursos es permisible en nuestro sistema multimedia, ya que la calidad del video puede degradarse por un corto período de tiempo, aunque la calidad del servicio de la aplicación se verá significativamente degradada si se transmite un video de baja calidad durante un período de tiempo más largo. Comparación de la calidad de servicio de la aplicación. Las Figuras 6, 7 y la Tabla 2 comparan la latencia, la variabilidad, la resolución y la velocidad de cuadro del video recibido, respectivamente. La Tabla 2 muestra que HyARM aumenta la resolución y la velocidad de cuadro de video de las aplicaciones habilitadas para QoS, pero disminuye la resolución y la velocidad de cuadro de las aplicaciones de mejor esfuerzo. Durante la sobreutilización de los recursos del sistema, la resolución y la velocidad de cuadros de las aplicaciones de menor prioridad se reducen para adaptarse a las fluctuaciones en la carga de trabajo de la aplicación y mantener la utilización de los recursos en el punto establecido especificado. Se puede observar en la Figura 6 y la Figura 7 que HyARM reduce significativamente la latencia y la variabilidad del video recibido. Estas cifras muestran que la calidad de servicio de las aplicaciones habilitadas para QoS se mejora considerablemente con HyARM. Aunque los parámetros de la aplicación, como la velocidad de cuadros y las resoluciones, que afectan los requisitos de QoS suave de las aplicaciones de mejor esfuerzo pueden verse comprometidos, se cumplen los requisitos de QoS estrictos, como la latencia y la variabilidad, de todas las aplicaciones. HyARM responde a las fluctuaciones en la disponibilidad de recursos y/o la demanda mediante el monitoreo constante de la utilización de recursos. Como se muestra en la Figura 4, cuando la utilización de recursos aumenta por encima del punto de ajuste deseado, HyARM reduce la utilización disminuyendo la calidad de servicio de las aplicaciones de mejor esfuerzo. Esta adaptación garantiza que haya suficientes recursos disponibles para que las aplicaciones habilitadas para QoS cumplan con sus necesidades de QoS. Las figuras 6 y 7 muestran que los valores de latencia y jitter del video recibido del sistema con HyARM son casi la mitad de los valores correspondientes del sistema sin HyARM. Con HyARM, los valores de estos parámetros están muy por debajo de los límites especificados, mientras que sin HyARM, estos valores están significativamente por encima de los límites especificados debido a la sobreutilización del ancho de banda de la red, lo que conduce a la congestión de la red y resulta en la pérdida de paquetes. HyARM evita esto reduciendo parámetros de video como la resolución, la velocidad de cuadros y/o modificando el esquema de compresión utilizado para comprimir el video. Nuestras conclusiones al analizar los resultados descritos anteriormente son que la aplicación de middleware adaptativo a través de control híbrido en sistemas DRE ayuda a (1) mejorar la calidad de servicio de la aplicación, (2) aumentar la utilización de recursos del sistema y (3) proporcionar una mejor previsibilidad (menor latencia y retraso entre fotogramas) a las aplicaciones habilitadas para calidad de servicio. Estas mejoras se logran en gran medida gracias al monitoreo de la utilización de recursos del sistema, la gestión eficiente de la carga de trabajo del sistema y la provisión adaptativa de recursos mediante los monitores de recursos de red/CPU de HyARMs, el adaptador de aplicaciones y el controlador central, respectivamente. TRABAJO RELACIONADO Recientemente se han aplicado varios enfoques teóricos de control a los sistemas DRE. Estas técnicas ayudan a superar las limitaciones de los enfoques de programación tradicionales que manejan mal los cambios dinámicos en la disponibilidad de recursos y resultan en un sistema programado rígidamente que se adapta mal a los cambios. Se presenta una encuesta de estas técnicas en [1]. Un enfoque de este tipo es la programación de control de retroalimentación (FCS) [2, 11]. Los algoritmos de FCS ajustan dinámicamente la asignación de recursos mediante bucles de control de retroalimentación de software. Los algoritmos de FCS se modelan y diseñan utilizando metodologías rigurosas de teoría de control. Estos algoritmos ofrecen garantías de rendimiento robusto y analítico a pesar de las incertidumbres en la disponibilidad de recursos y/o demanda. Aunque los algoritmos de FCS existentes han mostrado promesa, a menudo estos algoritmos asumen que el sistema tiene variable(s) de control continuas que pueden ajustarse continuamente. Si bien esta suposición es válida para ciertas clases de sistemas, existen muchas clases de sistemas DRE, como la aviónica y los entornos informáticos de barcos completos, que solo admiten un conjunto finito a priori de configuraciones discretas. Por lo tanto, las variables de control en tales sistemas son intrínsecamente discretas. HyARM maneja tanto variables de control continuas, como la resolución de la imagen, como variables de control discretas, como un conjunto discreto de velocidades de cuadro. HyARM puede aplicarse a sistemas que admiten un conjunto continuo y/o discreto de variables de control. El sistema multimedia DRE descrito en la Sección 2 es un ejemplo de sistema DRE que ofrece tanto variables de control continuas (resolución de imagen) como un conjunto discreto (velocidad de cuadros). Estas variables son modificadas por HyARM para lograr una utilización eficiente de recursos y una mejora en la calidad de servicio de la aplicación. CONCLUSIONES Artículo 7 Figura 6: Comparación de la latencia del video Figura 7: Comparación de la fluctuación del video Fuente Tamaño de imagen / Velocidad de cuadro Con HyARM Sin HyARM UAV1 Aplicación habilitada para QoS 1122 X 1496 / 25 960 X 720 / 20 UAV1 Aplicación de mejor esfuerzo 288 X 384 / 15 640 X 480 / 20 UAV2 Aplicación habilitada para QoS 1126 X 1496 / 25 960 X 720 / 20 UAV2 Aplicación de mejor esfuerzo 288 X 384 / 15 640 X 480 / 20 Tabla 2: Comparación de la calidad del video Muchos sistemas distribuidos en tiempo real y embebidos (DRE) demandan la aplicación correcta de la <br>calidad de servicio</br> (QoS) de extremo a extremo desde sus plataformas subyacentes para operar correctamente. Estos sistemas cada vez se ejecutan en entornos abiertos, donde la disponibilidad de recursos está sujeta a cambios dinámicos. Para cumplir con la calidad de servicio de extremo a extremo en entornos dinámicos, los sistemas DRE pueden beneficiarse de un middleware adaptativo que monitorea los recursos del sistema, realiza una gestión eficiente de la carga de trabajo de la aplicación y permite una provisión eficiente de recursos para la ejecución de aplicaciones. Este artículo describe HyARM, un middleware adaptativo que proporciona una gestión efectiva de recursos a los sistemas DRE. HyARM emplea técnicas de control híbrido para proporcionar las capacidades de middleware adaptativo, como el monitoreo de recursos y la adaptación de aplicaciones, que son clave para ofrecer las capacidades de gestión de recursos dinámicos para sistemas DRE abiertos. Empleamos HyARM en un sistema multimedia DRE representativo que está implementado utilizando CORBA en tiempo real y el Servicio de Transmisión de Audio/Vídeo de CORBA. Evaluamos el rendimiento de HyARM en un sistema compuesto por tres recursos distribuidos y dos clases de aplicaciones con dos aplicaciones cada una. Nuestros resultados empíricos indican que HyARM garantiza (1) la utilización eficiente de recursos al mantener la utilización de recursos del sistema dentro de los límites de utilización especificados, (2) los requisitos de calidad de servicio de las aplicaciones habilitadas para QoS se cumplen en todo momento. En general, HyARM garantiza una gestión eficiente, predecible y adaptable de recursos para sistemas DRE. REFERENCIAS [1] T. F. Abdelzaher, J. Stankovic, C. Lu, R. Zhang y Y. Lu. Control de rendimiento de retroalimentación en servicios de software. IEEE: Sistemas de Control, 23(3), junio de 2003. [2] L. Abeni, L. Palopoli, G. Lipari y J. Walpole. Análisis de un planificador de retroalimentación basado en reservas. En el Simposio de Sistemas en Tiempo Real de IEEE, Diciembre de 2002. [3] S. Blake, D. Black, M. Carlson, E. Davies, Z. Wang y W. Weiss. Una arquitectura para servicios diferenciados. Centro de Información de la Red RFC 2475, Dic. 1998. [4] H. Franke, S. Nagar, C. Seetharaman y V. Kashyap. Habilitando la Gestión Autonómica de la Carga de Trabajo en Linux. En Actas de la Conferencia Internacional sobre Computación Autónoma (ICAC), Nueva York, Nueva York, mayo de 2004. IEEE. [5] E. Gamma, R. Helm, R. Johnson, y J. Vlissides. Patrones de diseño: Elementos de software orientado a objetos reutilizable. Addison-Wesley, Reading, MA, 1995. [6] G. Ghinea y J. P. Thomas. Impacto de QoS en la percepción y comprensión del usuario de videoclips multimedia. En MULTIMEDIA 98: Actas de la sexta conferencia internacional de ACM sobre Multimedia, páginas 49-54, Bristol, Reino Unido, 1998. ACM Press. [7] Grupo de Trabajo de Ingeniería de Internet. Grupo de Trabajo de Servicios Diferenciados (diffserv) Carta. www.ietf.org/html.charters/diffserv-charter.html, 2000. [8] X. Koutsoukos, R. Tekumalla, B. Natarajan y C. Lu. Control híbrido supervisado de sistemas en tiempo real. En el 11º Simposio de Tecnología y Aplicaciones en Tiempo Real y Sistemas Empotrados de IEEE, San Francisco, California, Mar. 2005. [9] J. Lehoczky, L. Sha y Y. Ding. El algoritmo de programación Rate Monotonic: Caracterización exacta y comportamiento en casos promedio. En Actas del 10º Simposio de Sistemas en Tiempo Real de IEEE (RTSS 1989), páginas 166-171. IEEE Computer Society Press, 1989. [10] J. Loyall, J. Gossett, C. Gill, R. Schantz, J. Zinky, P. Pal, R. Shapiro, C. Rodrigues, M. Atighetchi, and D. Karr.\n\nIEEE Computer Society Press, 1989. [10] J. Loyall, J. Gossett, C. Gill, R. Schantz, J. Zinky, P. Pal, R. Shapiro, C. Rodrigues, M. Atighetchi y D. Karr. Comparando y contrastando el soporte de middleware adaptativo en aplicaciones de objetos distribuidos de área amplia y embebidos. En Actas de la 21ª Conferencia Internacional sobre Sistemas de Computación Distribuida (ICDCS-21), páginas 625-634. IEEE, Abr. 2001. [11] C. Lu, J. A. Stankovic, G. Tao y S. H. Son. Programación en tiempo real con control de retroalimentación: Marco, modelado y algoritmos. Revista de Sistemas en Tiempo Real, 23(1/2):85-126, julio de 2002. [12] Object Management Group. Especificación CORBA en tiempo real, documento formal/02-08-02 de OMG, edición de agosto de 2002. [13] D. C. Schmidt, D. L. Levine y S. Mungee. El diseño y rendimiento de los corredores de solicitudes de objetos en tiempo real. Comunicaciones de Computadoras, 21(4):294-324, Abr. 1998. [14] Thomas Sikora. Tendencias y perspectivas en codificación de imágenes y videos. En Actas del IEEE, enero de 2005. [15] X. Wang, H.-M. Huang, V. Subramonian, C. Lu y C. Gill. CAMRIT: Middleware Adaptativo Basado en Control para la Transmisión de Imágenes en Tiempo Real. En Actas del 10º Simposio de Tecnología y Aplicaciones en Tiempo Real y Sistemas Empotrados del IEEE (RTAS), Toronto, Canadá, mayo de 2004. Artículo 7 ",
            "candidates": [],
            "error": [
                [
                    ""
                ]
            ]
        },
        "service quality": {
            "translated_key": "calidad del servicio",
            "is_in_text": false,
            "original_annotated_sentences": [
                "Evaluating Adaptive Resource Management for Distributed Real-Time Embedded Systems Nishanth Shankaran, ∗ Xenofon Koutsoukos, Douglas C. Schmidt, and Aniruddha Gokhale Dept.",
                "of EECS, Vanderbilt University, Nashville ABSTRACT A challenging problem faced by researchers and developers of distributed real-time and embedded (DRE) systems is devising and implementing effective adaptive resource management strategies that can meet end-to-end quality of service (QoS) requirements in varying operational conditions.",
                "This paper presents two contributions to research in adaptive resource management for DRE systems.",
                "First, we describe the structure and functionality of the Hybrid Adaptive Resourcemanagement Middleware (HyARM), which provides adaptive resource management using hybrid control techniques for adapting to workload fluctuations and resource availability.",
                "Second, we evaluate the adaptive behavior of HyARM via experiments on a DRE multimedia system that distributes video in real-time.",
                "Our results indicate that HyARM yields predictable, stable, and high system performance, even in the face of fluctuating workload and resource availability.",
                "Categories and Subject Descriptors C.2.4 [Distributed Systems]: Distributed Applications; D.4.7 [Organization and Design]: Real-time Systems and Embedded Systems 1.",
                "INTRODUCTION Achieving end-to-end real-time quality of service (QoS) is particularly important for open distributed real-time and embedded (DRE) systems that face resource constraints, such as limited computing power and network bandwidth.",
                "Overutilization of these system resources can yield unpredictable and unstable behavior, whereas under-utilization can yield excessive system cost.",
                "A promising approach to meeting these end-to-end QoS requirements effectively, therefore, is to develop and apply adaptive middleware [10, 15], which is software whose functional and QoS-related properties can be modified either statically or dynamically.",
                "Static modifications are carried out to reduce footprint, leverage capabilities that exist in specific platforms, enable functional subsetting, and/or minimize hardware/software infrastructure dependencies.",
                "Objectives of dynamic modifications include optimizing system responses to changing environments or requirements, such as changing component interconnections, power-levels, CPU and network bandwidth availability, latency/jitter, and workload.",
                "In open DRE systems, adaptive middleware must make such modifications dependably, i.e., while meeting stringent end-to-end QoS requirements, which requires the specification and enforcement of upper and lower bounds on system resource utilization to ensure effective use of system resources.",
                "To meet these requirements, we have developed the Hybrid Adaptive Resource-management Middleware (HyARM), which is an open-source1 distributed resource management middleware.",
                "HyARM is based on hybrid control theoretic techniques [8], which provide a theoretical framework for designing control of complex system with both continuous and discrete dynamics.",
                "In our case study, which involves a distributed real-time video distribution system, the task of adaptive resource management is to control the utilization of the different resources, whose utilizations are described by continuous variables.",
                "We achieve this by adapting the resolution of the transmitted video, which is modeled as a continuous variable, and by changing the frame-rate and the compression, which are modeled by discrete actions.",
                "We have implemented HyARM atop The ACE ORB (TAO) [13], which is an implementation of the Real-time CORBA specification [12].",
                "Our results show that (1) HyARM ensures effective system resource utilization and (2) end-to-end QoS requirements of higher priority applications are met, even in the face of fluctuations in workload.",
                "The remainder of the paper is organized as follows: Section 2 describes the architecture, functionality, and resource utilization model of our DRE multimedia system case study; Section 3 explains the structure and functionality of HyARM; Section 4 evaluates the adaptive behavior of HyARM via experiments on our multimedia system case study; Section 5 compares our research on HyARM with related work; and Section 6 presents concluding remarks. 1 The code and examples for HyARM are available at www. dre.vanderbilt.edu/∼nshankar/HyARM/.",
                "Article 7 2.",
                "CASE STUDY: DRE MULTIMEDIA SYSTEM This section describes the architecture and QoS requirements of our DRE multimedia system. 2.1 Multimedia System Architecture Wireless Link Wireless Link Wireless Link ` ` ` Physical Link Physical Link Physical Link Base Station End Receiver End Receiver End Receiver` Physical Link End Receiver UAV Camera Video Encoder Camera Video Encoder Camera Video Encoder UAV Camera Video Encoder Camera Video Encoder Camera Video Encoder UAV Camera Video Encoder Camera Video Encoder Camera Video Encoder Figure 1: DRE Multimedia System Architecture The architecture for our DRE multimedia system is shown in Figure 1 and consists of the following entities: (1)Data source (video capture by UAV), where video is captured (related to subject of interest) by camera(s) on each UAV, followed by encoding of raw video using a specific encoding scheme and transmitting the video to the next stage in the pipeline. (2)Data distributor (base station), where the video is processed to remove noise, followed by retransmission of the processed video to the next stage in the pipeline. (3) Sinks (command and control center), where the received video is again processed to remove noise, then decoded and finally rendered to end user via graphical displays.",
                "Significant improvements in video encoding/decoding and (de)compression techniques have been made as a result of recent advances in video encoding and compression techniques [14].",
                "Common video compression schemes are MPEG1, MPEG-2, Real Video, and MPEG-4.",
                "Each compression scheme is characterized by its resource requirement, e.g., the computational power to (de)compress the video signal and the network bandwidth required to transmit the compressed video signal.",
                "Properties of the compressed video, such as resolution and frame-rate determine both the quality and the resource requirements of the video.",
                "Our multimedia system case study has the following endto-end real-time QoS requirements: (1) latency, (2) interframe delay (also know as jitter), (3) frame rate, and (4) picture resolution.",
                "These QoS requirements can be classified as being either hard or soft.",
                "Hard QoS requirements should be met by the underlying system at all times, whereas soft QoS requirements can be missed occasionally.2 For our case study, we treat QoS requirements such as latency and jitter as harder QoS requirements and strive to meet these requirements at all times.",
                "In contrast, we treat QoS requirements such as video frame rate and picture resolution as softer QoS requirements and modify these video properties adaptively to handle dynamic changes in resource availabil2 Although hard and soft are often portrayed as two discrete requirement sets, in practice they are usually two ends of a continuum ranging from softer to harder rather than two disjoint points. ity effectively. 2.2 DRE Multimedia System Rresources There are two primary types of resources in our DRE multimedia system: (1) processors that provide computational power available at the UAVs, base stations, and end receivers and (2) network links that provide communication bandwidth between UAVs, base stations, and end receivers.",
                "The computing power required by the video capture and encoding tasks depends on dynamic factors, such as speed of the UAV, speed of the subject (if the subject is mobile), and distance between UAV and the subject.",
                "The wireless network bandwidth available to transmit video captured by UAVs to base stations also depends on the wireless connectivity between the UAVs and the base station, which in-turn depend on dynamic factors such as the speed of the UAVs and the relative distance between UAVs and base stations.",
                "The bandwidth of the link between the base station and the end receiver is limited, but more stable than the bandwidth of the wireless network.",
                "Resource requirements and availability of resources are subjected to dynamic changes.",
                "Two classes of applications - QoS-enabled and best-effort - use the multimedia system infrastructure described above to transmit video to their respective receivers.",
                "QoS-enabled class of applications have higher priority over best-effort class of application.",
                "In our study, emergency response applications belong to QoS-enabled and surveillance applications belong to best-effort class.",
                "For example, since a stream from an emergency response application is of higher importance than a video stream from a surveillance application, it receives more resources end-to-end.",
                "Since resource availability significantly affects QoS, we use current resource utilization as the primary indicator of system performance.",
                "We refer to the current level of system resource utilization as the system condition.",
                "Based on this definition, we can classify system conditions as being either under, over, or effectively utilized.",
                "Under-utilization of system resources occurs when the current resource utilization is lower than the desired lower bound on resource utilization.",
                "In this system condition, residual system resources (i.e., network bandwidth and computational power) are available in large amounts after meeting end-to-end QoS requirements of applications.",
                "These residual resources can be used to increase the QoS of the applications.",
                "For example, residual CPU and network bandwidth can be used to deliver better quality video (e.g., with greater resolution and higher frame rate) to end receivers.",
                "Over-utilization of system resources occurs when the current resource utilization is higher than the desired upper bound on resource utilization.",
                "This condition can arise from loss of resources - network bandwidth and/or computing power at base station, end receiver or at UAV - or may be due to an increase in resource demands by applications.",
                "Over-utilization is generally undesirable since the quality of the received video (such as resolution and frame rate) and timeliness properties (such as latency and jitter) are degraded and may result in an unstable (and thus ineffective) system.",
                "Effective resource utilization is the desired system condition since it ensures that end-to-end QoS requirements of the UAV-based multimedia system are met and utilization of both system resources, i.e., network bandwidth and computational power, are within their desired utilization bounds.",
                "Article 7 Section 3 describes techniques we applied to achieve effective utilization, even in the face of fluctuating resource availability and/or demand. 3.",
                "OVERVIEW OF HYARM This section describes the architecture of the Hybrid Adaptive Resource-management Middleware (HyARM).",
                "HyARM ensures efficient and predictable system performance by providing adaptive resource management, including monitoring of system resources and enforcing bounds on application resource utilization. 3.1 HyARM Structure and Functionality Resource Utilization Legend Resource Allocation Application Parameters Figure 2: HyARM Architecture HyARM is composed of three types of entities shown in Figure 2 and described below: Resource monitors observe the overall resource utilization for each type of resource and resource utilization per application.",
                "In our multimedia system, there are resource monitors for CPU utilization and network bandwidth.",
                "CPU monitors observe the CPU resource utilization of UAVs, base station, and end receivers.",
                "Network bandwidth monitors observe the network resource utilization of (1) wireless network link between UAVs and the base station and (2) wired network link between the base station and end receivers.",
                "The central controller maintains the system resource utilization below a desired bound by (1) processing periodic updates it receives from resource monitors and (2) modifying the execution of applications accordingly, e.g., by using different execution algorithms or operating the application with increased/decreased QoS.",
                "This adaptation process ensures that system resources are utilized efficiently and end-to-end application QoS requirements are met.",
                "In our multimedia system, the HyARM controller determines the value of application parameters such as (1) video compression schemes, such as Real Video and MPEG-4, and/or (2) frame rate, and (3) picture resolution.",
                "From the perspective of hybrid control theoretic techniques [8], the different video compression schemes and frame rate form the discrete variables of application execution and picture resolution forms the continuous variables.",
                "Application adapters modify application execution according to parameters recommended by the controller and ensures that the operation of the application is in accordance with the recommended parameters.",
                "In the current mplementation of HyARM, the application adapter modifies the input parameters to the application that affect application QoS and resource utilization - compression scheme, frame rate, and picture resolution.",
                "In our future implementations, we plan to use resource reservation mechanisms such as Differentiated Service [7, 3] and Class-based Kernel Resource Management [4] to provision/reserve network and CPU resources.",
                "In our multimedia system, the application adapter ensures that the video is encoded at the recommended frame rate and resolution using the specified compression scheme. 3.2 Applying HyARM to the Multimedia System Case Study HyARM is built atop TAO [13], a widely used open-source implementation of Real-time CORBA [12].",
                "HyARM can be applied to ensure efficient, predictable and adaptive resource management of any DRE system where resource availability and requirements are subject to dynamic change.",
                "Figure 3 shows the interaction of various parts of the DRE multimedia system developed with HyARM, TAO, and TAOs A/V Streaming Service.",
                "TAOs A/V Streaming service is an implementation of the CORBA A/V Streaming Service specification.",
                "TAOs A/V Streaming Service is a QoS-enabled video distribution service that can transfer video in real-time to one or more receivers.",
                "We use the A/V Streaming Service to transmit the video from the UAVs to the end receivers via the base station.",
                "Three entities of Receiver UAV TAO Resource Utilization HyARM Central Controller A/V Streaming Service : Sender MPEG1 MPEG4 Real Video HyARM Resource Monitor A/V Streaming Service : Receiver Compressed Video Compressed Video Application HyARM Application Adapter Remote Object Call Control Inputs Resource Utilization Resource Utilization / Control Inputs Control Inputs Legend Figure 3: Developing the DRE Multimedia System with HyARM HyARM, namely the resource monitors, central controller, and application adapters are built as CORBA servants, so they can be distributed throughout a DRE system.",
                "Resource monitors are remote CORBA objects that update the central controller periodically with the current resource utilization.",
                "Application adapters are collocated with applications since the two interact closely.",
                "As shown in Figure 3, UAVs compress the data using various compression schemes, such as MPEG1, MPEG4, and Real Video, and uses TAOs A/V streaming service to transmit the video to end receivers.",
                "HyARMs resource monitors continuously observe the system resource utilization and notify the central controller with the current utilization. 3 The interaction between the controller and the resource monitors uses the Observer pattern [5].",
                "When the controller receives resource utilization updates from monitors, it computes the necessary modifications to application(s) parameters and notifies application adapter(s) via a remote operation call.",
                "Application adapter(s), that are collocated with the application, modify the input parameters to the application - in our case video encoder - to modify the application resource utilization and QoS. 3 The base station is not included in the figure since it only retransmits the video received from UAVs to end receivers.",
                "Article 7 4.",
                "PERFORMANCE RESULTS AND ANALYSIS This section first describes the testbed that provides the infrastructure for our DRE multimedia system, which was used to evaluate the performance of HyARM.",
                "We then describe our experiments and analyze the results obtained to empirically evaluate how HyARM behaves during underand over-utilization of system resources. 4.1 Overview of the Hardware and Software Testbed Our experiments were performed on the Emulab testbed at University of Utah.",
                "The hardware configuration consists of two nodes acting as UAVs, one acting as base station, and one as end receiver.",
                "Video from the two UAVs were transmitted to a base station via a LAN configured with the following properties: average packet loss ratio of 0.3 and bandwidth 1 Mbps.",
                "The network bandwidth was chosen to be 1 Mbps since each UAV in the DRE multimedia system is allocated 250 Kbps.",
                "These parameters were chosen to emulate an unreliable wireless network with limited bandwidth between the UAVs and the base station.",
                "From the base station, the video was retransmitted to the end receiver via a reliable wireline link of 10 Mbps bandwidth with no packet loss.",
                "The hardware configuration of all the nodes was chosen as follows: 600 MHz Intel Pentium III processor, 256 MB physical memory, 4 Intel EtherExpress Pro 10/100 Mbps Ethernet ports, and 13 GB hard drive.",
                "A real-time version of Linux - TimeSys Linux/NET 3.1.214 based on RedHat Linux 9was used as the operating system for all nodes.",
                "The following software packages were also used for our experiments: (1) Ffmpeg 0.4.9-pre1, which is an open-source library (http: //www.ffmpeg.sourceforge.net/download.php) that compresses video into MPEG-2, MPEG-4, Real Video, and many other video formats. (2) Iftop 0.16, which is an opensource library (http://www.ex-parrot.com/∼pdw/iftop/) we used for monitoring network activity and bandwidth utilization. (3) ACE 5.4.3 + TAO 1.4.3, which is an opensource (http://www.dre.vanderbilt.edu/TAO) implementation of the Real-time CORBA [12] specification upon which HyARM is built.",
                "TAO provides the CORBA Audio/Video (A/V) Streaming Service that we use to transmit the video from the UAVs to end receivers via the base station. 4.2 Experiment Configuration Our experiment consisted of two (emulated) UAVs that simultaneously send video to the base station using the experimentation setup described in Section 4.1.",
                "At the base station, video was retransmitted to the end receivers (without any modifications), where it was stored to a file.",
                "Each UAV hosted two applications, one QoS-enabled application (emergency response), and one best-effort application (surveillance).",
                "Within each UAV, computational power is shared between the applications, while the network bandwidth is shared among all applications.",
                "To evaluate the QoS provided by HyARM, we monitored CPU utilization at the two UAVs, and network bandwidth utilization between the UAV and the base station.",
                "CPU resource utilization was not monitored at the base station and the end receiver since they performed no computationallyintensive operations.",
                "The resource utilization of the 10 Mpbs physical link between the base station and the end receiver does not affect QoS of applications and is not monitored by HyARM since it is nearly 10 times the 1 MB bandwidth of the LAN between the UAVs and the base station.",
                "The experiment also monitors properties of the video that affect the QoS of the applications, such as latency, jitter, frame rate, and resolution.",
                "The set point on resource utilization for each resource was specified at 0.69, which is the upper bound typically recommended by scheduling techniques, such as rate monotonic algorithm [9].",
                "Since studies [6] have shown that human eyes can perceive delays more than 200ms, we use this as the upper bound on jitter of the received video.",
                "QoS requirements for each class of application is specified during system initialization and is shown in Table 1. 4.3 Empirical Results and Analysis This section presents the results obtained from running the experiment described in Section 4.2 on our DRE multimedia system testbed.",
                "We used system resource utilization as a metric to evaluate the adaptive resource management capabilities of HyARM under varying input work loads.",
                "We also used application QoS as a metric to evaluate HyARMs capabilities to support end-to-end QoS requirements of the various classes of applications in the DRE multimedia system.",
                "We analyze these results to explain the significant differences in system performance and application QoS.",
                "Comparison of system performance is decomposed into comparison of resource utilization and application QoS.",
                "For system resource utilization, we compare (1) network bandwidth utilization of the local area network and (2) CPU utilization at the two UAV nodes.",
                "For application QoS, we compare mean values of video parameters, including (1) picture resolution, (2) frame rate, (3) latency, and (4) jitter.",
                "Comparison of resource utilization.",
                "Over-utilization of system resources in DRE systems can yield an unstable system.",
                "In contrast, under-utilization of system resources increases system cost.",
                "Figure 4 and Figure 5 compare the system resource utilization with and without HyARM.",
                "Figure 4 shows that HyARM maintains system utilization close to the desired utilization set point during fluctuation in input work load by transmitting video of higher (or lower) QoS for QoS-enabled (or best-effort) class of applications during over (or under) utilization of system resources.",
                "Figure 5 shows that without HyARM, network utilization was as high as 0.9 during increase in workload conditions, which is greater than the utilization set point of 0.7 by 0.2.",
                "As a result of over-utilization of resources, QoS of the received video, such as average latency and jitter, was affected significantly.",
                "Without HyARM, system resources were either under-utilized or over-utilized, both of which are undesirable.",
                "In contrast, with HyARM, system resource utilization is always close to the desired set point, even during fluctuations in application workload.",
                "During sudden fluctuation in application workload, system conditions may be temporarily undesirable, but are restored to the desired condition within several sampling periods.",
                "Temporary over-utilization of resources is permissible in our multimedia system since the quality of the video may be degraded for a short period of time, though application QoS will be degraded significantly if poor quality video is transmitted for a longer period of time.",
                "Comparison of application QoS.",
                "Figures 6, Figure 7, and Table 2 compare latency, jitter, resolution, and frameArticle 7 Class Resolution Frame Rate Latency (msec ) Jitter (msec) QoS Enabled 1024 x 768 25 200 200 Best-effort 320 x 240 15 300 250 Table 1: Application QoS Requirements Figure 4: Resource utilization with HyARM Figure 5: Resource utilization without HyARM rate of the received video, respectively.",
                "Table 2 shows that HyARM increases the resolution and frame video of QoSenabled applications, but decreases the resolution and frame rate of best effort applications.",
                "During over utilization of system resources, resolution and frame rate of lower priority applications are reduced to adapt to fluctuations in application workload and to maintain the utilization of resources at the specified set point.",
                "It can be seen from Figure 6 and Figure 7 that HyARM reduces the latency and jitter of the received video significantly.",
                "These figures show that the QoS of QoS-enabled applications is greatly improved by HyARM.",
                "Although application parameters, such as frame rate and resolutions, which affect the soft QoS requirements of best-effort applications may be compromised, the hard QoS requirements, such as latency and jitter, of all applications are met.",
                "HyARM responds to fluctuation in resource availability and/or demand by constant monitoring of resource utilization.",
                "As shown in Figure 4, when resources utilization increases above the desired set point, HyARM lowers the utilization by reducing the QoS of best-effort applications.",
                "This adaptation ensures that enough resources are available for QoS-enabled applications to meet their QoS needs.",
                "Figures 6 and 7 show that the values of latency and jitter of the received video of the system with HyARM are nearly half of the corresponding value of the system without HyARM.",
                "With HyARM, values of these parameters are well below the specified bounds, whereas without HyARM, these value are significantly above the specified bounds due to overutilization of the network bandwidth, which leads to network congestion and results in packet loss.",
                "HyARM avoids this by reducing video parameters such as resolution, frame-rate, and/or modifying the compression scheme used to compress the video.",
                "Our conclusions from analyzing the results described above are that applying adaptive middleware via hybrid control to DRE system helps to (1) improve application QoS, (2) increase system resource utilization, and (3) provide better predictability (lower latency and inter-frame delay) to QoSenabled applications.",
                "These improvements are achieved largely due to monitoring of system resource utilization, efficient system workload management, and adaptive resource provisioning by means of HyARMs network/CPU resource monitors, application adapter, and central controller, respectively. 5.",
                "RELATED WORK A number of control theoretic approaches have been applied to DRE systems recently.",
                "These techniques aid in overcoming limitations with traditional scheduling approaches that handle dynamic changes in resource availability poorly and result in a rigidly scheduled system that adapts poorly to change.",
                "A survey of these techniques is presented in [1].",
                "One such approach is feedback control scheduling (FCS) [2, 11].",
                "FCS algorithms dynamically adjust resource allocation by means of software feedback control loops.",
                "FCS algorithms are modeled and designed using rigorous controltheoretic methodologies.",
                "These algorithms provide robust and analytical performance assurances despite uncertainties in resource availability and/or demand.",
                "Although existing FCS algorithms have shown promise, these algorithms often assume that the system has continuous control variable(s) that can continuously be adjusted.",
                "While this assumption holds for certain classes of systems, there are many classes of DRE systems, such as avionics and total-ship computing environments that only support a finite a priori set of discrete configurations.",
                "The control variables in such systems are therefore intrinsically discrete.",
                "HyARM handles both continuous control variables, such as picture resolution, and discrete control variable, such as discrete set of frame rates.",
                "HyARM can therefore be applied to system that support continuous and/or discrete set of control variables.",
                "The DRE multimedia system as described in Section 2 is an example DRE system that offers both continuous (picture resolution) and discrete set (frame-rate) of control variables.",
                "These variables are modified by HyARM to achieve efficient resource utilization and improved application QoS. 6.",
                "CONCLUDING REMARKS Article 7 Figure 6: Comparison of Video Latency Figure 7: Comparison of Video Jitter Source Picture Size / Frame Rate With HyARM Without HyARM UAV1 QoS Enabled Application 1122 X 1496 / 25 960 X 720 / 20 UAV1 Best-effort Application 288 X 384 / 15 640 X 480 / 20 UAV2 QoS Enabled Application 1126 X 1496 / 25 960 X 720 / 20 UAV2 Best-effort Application 288 X 384 / 15 640 X 480 / 20 Table 2: Comparison of Video Quality Many distributed real-time and embedded (DRE) systems demand end-to-end quality of service (QoS) enforcement from their underlying platforms to operate correctly.",
                "These systems increasingly run in open environments, where resource availability is subject to dynamic change.",
                "To meet end-to-end QoS in dynamic environments, DRE systems can benefit from an adaptive middleware that monitors system resources, performs efficient application workload management, and enables efficient resource provisioning for executing applications.",
                "This paper described HyARM, an adaptive middleware, that provides effective resource management to DRE systems.",
                "HyARM employs hybrid control techniques to provide the adaptive middleware capabilities, such as resource monitoring and application adaptation that are key to providing the dynamic resource management capabilities for open DRE systems.",
                "We employed HyARM to a representative DRE multimedia system that is implemented using Real-time CORBA and CORBA A/V Streaming Service.",
                "We evaluated the performance of HyARM in a system composed of three distributed resources and two classes of applications with two applications each.",
                "Our empirical results indicate that HyARM ensures (1) efficient resource utilization by maintaining the resource utilization of system resources within the specified utilization bounds, (2) QoS requirements of QoS-enabled applications are met at all times.",
                "Overall, HyARM ensures efficient, predictable, and adaptive resource management for DRE systems. 7.",
                "REFERENCES [1] T. F. Abdelzaher, J. Stankovic, C. Lu, R. Zhang, and Y. Lu.",
                "Feddback Performance Control in Software Services.",
                "IEEE: Control Systems, 23(3), June 2003. [2] L. Abeni, L. Palopoli, G. Lipari, and J. Walpole.",
                "Analysis of a reservation-based feedback scheduler.",
                "In IEEE Real-Time Systems Symposium, Dec. 2002. [3] S. Blake, D. Black, M. Carlson, E. Davies, Z. Wang, and W. Weiss.",
                "An architecture for differentiated services.",
                "Network Information Center RFC 2475, Dec. 1998. [4] H. Franke, S. Nagar, C. Seetharaman, and V. Kashyap.",
                "Enabling Autonomic Workload Management in Linux.",
                "In Proceedings of the International Conference on Autonomic Computing (ICAC), New York, New York, May 2004.",
                "IEEE. [5] E. Gamma, R. Helm, R. Johnson, and J. Vlissides.",
                "Design Patterns: Elements of Reusable Object-Oriented Software.",
                "Addison-Wesley, Reading, MA, 1995. [6] G. Ghinea and J. P. Thomas.",
                "Qos impact on user perception and understanding of multimedia video clips.",
                "In MULTIMEDIA 98: Proceedings of the sixth ACM international conference on Multimedia, pages 49-54, Bristol, United Kingdom, 1998.",
                "ACM Press. [7] Internet Engineering Task Force.",
                "Differentiated Services Working Group (diffserv) Charter. www.ietf.org/html.charters/diffserv-charter.html, 2000. [8] X. Koutsoukos, R. Tekumalla, B. Natarajan, and C. Lu.",
                "Hybrid Supervisory Control of Real-Time Systems.",
                "In 11th IEEE Real-Time and Embedded Technology and Applications Symposium, San Francisco, California, Mar. 2005. [9] J. Lehoczky, L. Sha, and Y. Ding.",
                "The Rate Monotonic Scheduling Algorithm: Exact Characterization and Average Case Behavior.",
                "In Proceedings of the 10th IEEE Real-Time Systems Symposium (RTSS 1989), pages 166-171.",
                "IEEE Computer Society Press, 1989. [10] J. Loyall, J. Gossett, C. Gill, R. Schantz, J. Zinky, P. Pal, R. Shapiro, C. Rodrigues, M. Atighetchi, and D. Karr.",
                "Comparing and Contrasting Adaptive Middleware Support in Wide-Area and Embedded Distributed Object Applications.",
                "In Proceedings of the 21st International Conference on Distributed Computing Systems (ICDCS-21), pages 625-634.",
                "IEEE, Apr. 2001. [11] C. Lu, J.",
                "A. Stankovic, G. Tao, and S. H. Son.",
                "Feedback Control Real-Time Scheduling: Framework, Modeling, and Algorithms.",
                "Real-Time Systems Journal, 23(1/2):85-126, July 2002. [12] Object Management Group.",
                "Real-time CORBA Specification, OMG Document formal/02-08-02 edition, Aug. 2002. [13] D. C. Schmidt, D. L. Levine, and S. Mungee.",
                "The Design and Performance of Real-Time Object Request Brokers.",
                "Computer Communications, 21(4):294-324, Apr. 1998. [14] Thomas Sikora.",
                "Trends and Perspectives in Image and Video Coding.",
                "In Proceedings of the IEEE, Jan. 2005. [15] X. Wang, H.-M. Huang, V. Subramonian, C. Lu, and C. Gill.",
                "CAMRIT: Control-based Adaptive Middleware for Real-time Image Transmission.",
                "In Proc. of the 10th IEEE Real-Time and Embedded Tech. and Applications Symp. (RTAS), Toronto, Canada, May 2004.",
                "Article 7"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [],
            "translated_text": "",
            "candidates": [],
            "error": [
                []
            ]
        }
    }
}