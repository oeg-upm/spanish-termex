{
    "id": "J-50",
    "original_text": "Communication Complexity of Common Voting Rules∗ Vincent Conitzer Carnegie Mellon University 5000 Forbes Avenue Pittsburgh, PA 15213, USA conitzer@cs.cmu.edu Tuomas Sandholm Carnegie Mellon University 5000 Forbes Avenue Pittsburgh, PA 15213, USA sandholm@cs.cmu.edu ABSTRACT We determine the communication complexity of the common voting rules. The rules (sorted by their communication complexity from low to high) are plurality, plurality with runoff, single transferable vote (STV), Condorcet, approval, Bucklin, cup, maximin, Borda, Copeland, and ranked pairs. For each rule, we first give a deterministic communication protocol and an upper bound on the number of bits communicated in it; then, we give a lower bound on (even the nondeterministic) communication requirements of the voting rule. The bounds match for all voting rules except STV and maximin. Categories and Subject Descriptors F.2 [Theory of Computation]: Analysis of Algorithms and Problem Complexity; J.4 [Computer Applications]: Social and Behavioral Sciences-Economics General Terms Algorithms, Economics, Theory 1. INTRODUCTION One key factor in the practicality of any preference aggregation rule is its communication burden. To successfully aggregate the agents preferences, it is usually not necessary for all the agents to report all of their preference information. Clever protocols that elicit the agents preferences partially and sequentially have the potential to dramatically reduce the required communication. This has at least the following advantages: • It can make preference aggregation feasible in settings where the total amount of preference information is too large to communicate. • Even when communicating all the preference information is feasible, reducing the communication requirements lessens the burden placed on the agents. This is especially true when the agents, rather than knowing all their preferences in advance, need to invest effort (such as computation or information gathering) to determine their preferences [16]. • It preserves (some of) the agents privacy. Most of the work on reducing the communication burden in preference aggregation has focused on resource allocation settings such as combinatorial auctions, in which an auctioneer auctions off a number of (possibly distinct) items in a single event. Because in a combinatorial auction, bidders can have separate valuations for each of an exponential number of possible bundles of items, this is a setting in which reducing the communication burden is especially crucial. This can be accomplished by supplementing the auctioneer with an elicitor that incrementally elicits parts of the bidders preferences on an as-needed basis, based on what the bidders have revealed about their preferences so far, as suggested by Conen and Sandholm [5]. For example, the elicitor can ask for a bidders value for a specific bundle (value queries), which of two bundles the bidder prefers (order queries), which bundle he ranks kth or what the rank of a given bundle is (rank queries), which bundle he would purchase given a particular vector of prices (demand queries), etc.-until (at least) the final allocation can be determined. Experimentally, this yields drastic savings in preference revelation [11]. Furthermore, if the agents valuation functions are drawn from certain natural subclasses, the elicitation problem can be solved using only polynomially many queries even in the worst case [23, 4, 13, 18, 14]. For a review of preference elicitation in combinatorial auctions, see [17]. Ascending combinatorial auctions are a well-known special form of preference elicitation, where the elicitor asks demand queries with increasing prices [15, 21, 1, 9]. Finally, resource 78 allocation problems have also been studied from a communication complexity viewpoint, thereby deriving lower bounds on the required communication. For example, Nisan and Segal show that exponential communication is required even to obtain a surplus greater than that obtained by auctioning off all objects as a single bundle [14]. Segal also studies social choice rules in general, and shows that for a large class of social choice rules, supporting budget sets must be revealed such that if every agent prefers the same outcome in her budget set, this proves the optimality of that outcome. Segal then uses this characterization to prove bounds on the communication required in resource allocation as well as matching settings [20]. In this paper, we will focus on the communication requirements of a generally applicable subclass of social choice rules, commonly known as voting rules. In a voting setting, there is a set of candidate outcomes over which the voters express their preferences by submitting a vote (typically, a ranking of the candidates), and the winner (that is, the chosen outcome) is determined based on these votes. The communication required by voting rules can be large either because the number of voters is large (such as, for example, in national elections), or because the number of candidates is large (for example, the agents can vote over allocations of a number of resources), or both. Prior work [8] has studied elicitation in voting, studying how computationally hard it is to decide whether a winner can be determined with the information elicited so far, as well as how hard it is to find the optimal sequence of queries given perfect suspicions about the voters preferences. In addition, that paper discusses strategic (game-theoretic) issues introduced by elicitation. In contrast, in this paper, we are concerned with the worst-case number of bits that must be communicated to execute a given voting rule, when nothing is known in advance about the voters preferences. We determine the communication complexity of the common voting rules. For each rule, we first give an upper bound on the (deterministic) communication complexity by providing a communication protocol for it and analyzing how many bits need to be transmitted in this protocol. (Segals results [20] do not apply to most voting rules because most voting rules are not intersectionmonotonic (or even monotonic).1 ) For many of the voting rules under study, it turns out that one cannot do better than simply letting each voter immediately communicate all her (potentially relevant) information. However, for some rules (such as plurality with runoff, STV and cup) there is a straightforward multistage communication protocol that, with some analysis, can be shown to significantly outperform the immediate communication of all (potentially relevant) information. Finally, for some rules (such as the Condorcet and Bucklin rules), we need to introduce a more complex communication protocol to achieve the best possible upper 1 For two of the rules that we study that are intersectionmonotonic, namely the approval and Condorcet rules, Segals results can in fact be used to give alternative proofs of our lower bounds. We only give direct proofs for these rules here because 1) these direct proofs are among the easier ones in this paper, 2) the alternative proofs are nontrivial even given Segals results, and 3) a space constraint applies. However, we hope to also include the alternative proofs in a later version. bound. After obtaining the upper bounds, we show that they are tight by giving matching lower bounds on (even the nondeterministic) communication complexity of each voting rule. There are two exceptions: STV, for which our upper and lower bounds are apart by a factor log m; and maximin, for which our best deterministic upper bound is also a factor log m above the (nondeterministic) lower bound, although we give a nondeterministic upper bound that matches the lower bound. 2. REVIEW OF VOTING RULES In this section, we review the common voting rules that we study in this paper. A voting rule2 is a function mapping a vector of the n voters votes (i.e. preferences over candidates) to one of the m candidates (the winner) in the candidate set C. In some cases (such as the Condorcet rule), the rule may also declare that no winner exists. We do not concern ourselves with what happens in case of a tie between candidates (our lower bounds hold regardless of how ties are broken, and the communication protocols used for our upper bounds do not attempt to break the ties). All of the rules that we study are rank-based rules, which means that a vote is defined as an ordering of the candidates (with the exception of the plurality rule, for which a vote is a single candidate, and the approval rule, for which a vote is a subset of the candidates). We will consider the following voting rules. (For rules that define a score, the candidate with the highest score wins.) • scoring rules. Let α = α1, . . . , αm be a vector of integers such that α1 ≥ α2 . . . ≥ αm. For each voter, a candidate receives α1 points if it is ranked first by the voter, α2 if it is ranked second etc. The score sα of a candidate is the total number of points the candidate receives. The Borda rule is the scoring rule with α = m−1, m−2, . . . , 0 . The plurality rule is the scoring rule with α = 1, 0, . . . , 0 . • single transferable vote (STV). The rule proceeds through a series of m − 1 rounds. In each round, the candidate with the lowest plurality score (that is, the least number of voters ranking it first among the remaining candidates) is eliminated (and each of the votes for that candidate transfer to the next remaining candidate in the order given in that vote). The winner is the last remaining candidate. • plurality with run-off. In this rule, a first round eliminates all candidates except the two with the highest plurality scores. Votes are transferred to these as in the STV rule, and a second round determines the winner from these two. • approval. Each voter labels each candidate as either approved or disapproved. The candidate approved by the greatest number of voters wins. • Condorcet. For any two candidates i and j, let N(i, j) be the number of voters who prefer i to j. If there is a candidate i that is preferred to any other candidate by a majority of the voters (that is, N(i, j) > N(j, i) for all j = i-that is, i wins every pairwise election), then candidate i wins. 2 The term voting protocol is often used to describe the same concept, but we seek to draw a sharp distinction between the rule mapping preferences to outcomes, and the communication/elicitation protocol used to implement this rule. 79 • maximin (aka. Simpson). The maximin score of i is s(i) = minj=i N(i, j)-that is, is worst performance in a pairwise election. The candidate with the highest maximin score wins. • Copeland. For any two distinct candidates i and j, let C(i, j) = 1 if N(i, j) > N(j, i), C(i, j) = 1/2 if N(i, j) = N(j, i) and C(i, j) = 0 if N(i, j) < N(j, i). The Copeland score of candidate i is s(i) = j=i C(i, j). • cup (sequential binary comparisons). The cup rule is defined by a balanced3 binary tree T with one leaf per candidate, and an assignment of candidates to leaves (each leaf gets one candidate). Each non-leaf node is assigned the winner of the pairwise election of the nodes children; the candidate assigned to the root wins. • Bucklin. For any candidate i and integer l, let B(i, l) be the number of voters that rank candidate i among the top l candidates. The winner is arg mini(min{l : B(i, l) > n/2}). That is, if we say that a voter approves her top l candidates, then we repeatedly increase l by 1 until some candidate is approved by more than half the voters, and this candidate is the winner. • ranked pairs. This rule determines an order on all the candidates, and the winner is the candidate at the top of this order. Sort all ordered pairs of candidates (i, j) by N(i, j), the number of voters who prefer i to j. Starting with the pair (i, j) with the highest N(i, j), we lock in the result of their pairwise election (i j). Then, we move to the next pair, and we lock the result of their pairwise election. We continue to lock every pairwise result that does not contradict the ordering established so far. We emphasize that these definitions of voting rules do not concern themselves with how the votes are elicited from the voters; all the voting rules, including those that are suggestively defined in terms of rounds, are in actuality just functions mapping the vector of all the voters votes to a winner. Nevertheless, there are always many different ways of eliciting the votes (or the relevant parts thereof) from the voters. For example, in the plurality with runoff rule, one way of eliciting the votes is to ask every voter to declare her entire ordering of the candidates up front. Alternatively, we can first ask every voter to declare only her most preferred candidate; then, we will know the two candidates in the runoff, and we can ask every voter which of these two candidates she prefers. Thus, we distinguish between the voting rule (the mapping from vectors of votes to outcomes) and the communication protocol (which determines how the relevant parts of the votes are actually elicited from the voters). The goal of this paper is to give efficient communication protocols for the voting rules just defined, and to prove that there do not exist any more efficient communication protocols. It is interesting to note that the choice of the communication protocol may affect the strategic behavior of the voters. Multistage communication protocols may reveal to the voters some information about how the other voters are voting (for example, in the two-stage communication protocol just given for plurality with runoff, in the second stage voters 3 Balanced means that the difference in depth between two leaves can be at most one. will know which two candidates have the highest plurality scores). In general, when the voters receive such information, it may give them incentives to vote differently than they would have in a single-stage communication protocol in which all voters declare their entire votes simultaneously. Of course, even the single-stage communication protocol is not strategy-proof4 for any reasonable voting rule, by the Gibbard-Satterthwaite theorem [10, 19]. However, this does not mean that we should not be concerned about adding even more opportunities for strategic voting. In fact, many of the communication protocols introduced in this paper do introduce additional opportunities for strategic voting, but we do not have the space to discuss this here. (In prior work [8], we do give an example where an elicitation protocol for the approval voting rule introduces strategic voting, and give principles for designing elicitation protocols that do not introduce strategic problems.) Now that we have reviewed voting rules, we move on to a brief review of communication complexity theory. 3. REVIEW OF SOME COMMUNICATION COMPLEXITY THEORY In this section, we review the basic model of a communication problem and the lower-bounding technique of constructing a fooling set. (The basic model of a communication problem is due to Yao [22]; for an overview see Kushilevitz and Nisan [12].) Each player 1 ≤ i ≤ n knows (only) input xi. Together, they seek to compute f(x1, x2, . . . , xn). In a deterministic protocol for computing f, in each stage, one of the players announces (to all other players) a bit of information based on her own input and the bits announced so far. Eventually, the communication terminates and all players know f(x1, x2, . . . , xn). The goal is to minimize the worst-case (over all input vectors) number of bits sent. The deterministic communication complexity of a problem is the worstcase number of bits sent in the best (correct) deterministic protocol for it. In a nondeterministic protocol, the next bit to be sent can be chosen nondeterministically. For the purposes of this paper, we will consider a nondeterministic protocol correct if for every input vector, there is some sequence of nondeterministic choices the players can make so that the players know the value of f when the protocol terminates. The nondeterministic communication complexity of a problem is the worst-case number of bits sent in the best (correct) nondeterministic protocol for it. We are now ready to give the definition of a fooling set. Definition 1. A fooling set is a set of input vectors {(x1 1, x1 2, . . . , x1 n), (x2 1, x2 2, . . . , x2 n), . . . , (xk 1 , xk 2 , . . . , xk n) such that for any i, f(xi 1, xi 2, . . . , xi n) = f0 for some constant f0, but for any i = j, there exists some vector (r1, r2, . . . , rn) ∈ {i, j}n such that f(xr1 1 , xr2 2 , . . . , xrn n ) = f0. (That is, we can mix the inputs from the two input vectors to obtain a vector with a different function value.) It is known that if a fooling set of size k exists, then log k is a lower bound on the communication complexity (even the nondeterministic communication complexity) [12]. 4 A strategy-proof protocol is one in which it is in the players best interest to report their preferences truthfully. 80 For the purposes of this paper, f is the voting rule that maps the votes to the winning candidate, and xi is voter is vote (the information that the voting rule would require from the voter if there were no possibility of multistage communication-i.e. the most preferred candidate (plurality), the approved candidates (approval), or the ranking of all the candidates (all other protocols)). However, when we derive our lower bounds, f will only signify whether a distinguished candidate a wins. (That is, f is 1 if a wins, and 0 otherwise.) This will strengthen our lower bound results (because it implies that even finding out whether one given candidate wins is hard).5 Thus, a fooling set in our context is a set of vectors of votes so that a wins (does not win) with each of them; but for any two different vote vectors in the set, there is a way of taking some voters votes from the first vector and the others votes from the second vector, so that a does not win (wins). To simplify the proofs of our lower bounds, we make assumptions such as the number of voters n is odd in many of these proofs. Therefore, technically, we do not prove the lower bound for (number of candidates, number of voters) pairs (m, n) that do not satisfy these assumptions (for example, if we make the above assumption, then we technically do not prove the lower bound for any pair (m, n) in which n is even). Nevertheless, we always prove the lower bound for a representative set of (m, n) pairs. For example, for every one of our lower bounds it is the case that for infinitely many values of m, there are infinitely many values of n such that the lower bound is proved for the pair (m, n). 4. RESULTS We are now ready to present our results. For each voting rule, we first give a deterministic communication protocol for determining the winner to establish an upper bound. Then, we give a lower bound on the nondeterministic communication complexity (even on the complexity of deciding whether a given candidate wins, which is an easier question). The lower bounds match the upper bounds in all but two cases: the STV rule (upper bound O(n(log m)2 ); lower bound Ω(n log m)) and the maximin rule (upper bound O(nm log m), although we do give a nondeterministic protocol that is O(nm); lower bound Ω(nm)). When we discuss a voting rule in which the voters rank the candidates, we will represent a ranking in which candidate c1 is ranked first, c2 is ranked second, etc. as c1 c2 . . . cm. 5 One possible concern is that in the case where ties are possible, it may require much communication to verify whether a specific candidate a is among the winners, but little communication to produce one of the winners. However, all the fooling sets we use in the proofs have the property that if a wins, then a is the unique winner. Therefore, in these fooling sets, if one knows any one of the winners, then one knows whether a is a winner. Thus, computing one of the winners requires at least as much communication as verifying whether a is among the winners. In general, when a communication problem allows multiple correct answers for a given vector of inputs, this is known as computing a relation rather than a function [12]. However, as per the above, we can restrict our attention to a subset of the domain where the voting rule truly is a (single-valued) function, and hence lower bounding techniques for functions rather than relations will suffice. Sometimes for the purposes of a proof the internal ranking of a subset of the candidates does not matter, and in this case we will not specify it. For example, if S = {c2, c3}, then c1 S c4 indicates that either the ranking c1 c2 c3 c4 or the ranking c1 c3 c2 c4 can be used for the proof. We first give a universal upper bound. Theorem 1. The deterministic communication complexity of any rank-based voting rule is O(nm log m). Proof. This bound is achieved by simply having everyone communicate their entire ordering of the candidates (indicating the rank of an individual candidate requires only O(log m) bits, so each of the n voters can simply indicate the rank of each of the m candidates). The next lemma will be useful in a few of our proofs. Lemma 1. If m divides n, then log(n!)−m log((n/m)!) ≥ n(log m − 1)/2. Proof. If n/m = 1 (that is, n = m), then this expression simplifies to log(n!). We have log(n!) = n i=1 log i ≥ n x=1 log(i)dx, which, using integration by parts, is equal to n log n − (n − 1) > n(log n − 1) = n(log m − 1) > n(log m − 1)/2. So, we can assume that n/m ≥ 2. We observe that log(n!) = n i=1 log i = n/m−1 i=0 m j=1 log(im+j) ≥ n/m−1 i=1 m j=1 log(im) = m n/m−1 i=1 log(im), and that m log((n/m)!) = m n/m i=1 log(i). Therefore, log(n!) − m log((n/m)!) ≥ m n/m−1 i=1 log(im) − m n/m i=1 log(i) = m(( n/m−1 i=1 log(im/i))−log(n/m)) = m((n/m− 1) log m−log n+log m) = n log m−m log n. Now, using the fact that n/m ≥ 2, we have m log n = n(m/n) log m(n/m) = n(m/n)(log m + log(n/m)) ≤ n(1/2)(log m + log 2). Thus, log(n!) − m log((n/m)!) ≥ n log m − m log n ≥ n log m − n(1/2)(log m + log 2) = n(log m − 1)/2. Theorem 2. The deterministic communication complexity of the plurality rule is O(n log m). Proof. Indicating one of the candidates requires only O(log m) bits, so each voter can simply indicate her most preferred candidate. Theorem 3. The nondeterministic communication complexity of the plurality rule is Ω(n log m) (even to decide whether a given candidate a wins). Proof. We will exhibit a fooling set of size n ! (( n m )!)m where n = (n−1)/2. Taking the logarithm of this gives log(n !)− m log((n /m)!), so the result follows from Lemma 1. The fooling set will consist of all vectors of votes satisfying the following constraints: • For any 1 ≤ i ≤ n , voters 2i−1 and 2i vote the same. 81 • Every candidate receives equally many votes from the first 2n = n − 1 voters. • The last voter (voter n) votes for a. Candidate a wins with each one of these vote vectors because of the extra vote for a from the last voter. Given that m divides n , let us see how many vote vectors there are in the fooling set. We need to distribute n voter pairs evenly over m candidates, for a total of n /m voter pairs per candidate; and there are precisely n ! (( n m )!)m ways of doing this.6 All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses. Let i be a number such that the two vote vectors disagree on the candidate for which voters 2i − 1 and 2i vote. Without loss of generality, suppose that in the first vote vector, these voters do not vote for a (but for some other candidate, b, instead). Now, construct a new vote vector by taking votes 2i − 1 and 2i from the first vote vector, and the remaining votes from the second vote vector. Then, b receives 2n /m + 2 votes in this newly constructed vote vector, whereas a receives at most 2n /m+1 votes. So, a is not the winner in the newly constructed vote vector, and hence we have a correct fooling set. Theorem 4. The deterministic communication complexity of the plurality with runoff rule is O(n log m). Proof. First, let every voter indicate her most preferred candidate using log m bits. After this, the two candidates in the runoff are known, and each voter can indicate which one she prefers using a single additional bit. Theorem 5. The nondeterministic communication complexity of the plurality with runoff rule is Ω(n log m) (even to decide whether a given candidate a wins). Proof. We will exhibit a fooling set of size n ! (( n m )!)m where m = m/2 and n = (n − 2)/4. Taking the logarithm of this gives log(n !) − m log((n /m )!), so the result follows from Lemma 1. Divide the candidates into m pairs: (c1, d1), (c2, d2), . . . , (cm , dm ) where c1 = a and d1 = b. The fooling set will consist of all vectors of votes satisfying the following constraints: • For any 1 ≤ i ≤ n , voters 4i − 3 and 4i − 2 rank the candidates ck(i) a C − {a, ck(i)}, for some candidate ck(i). (If ck(i) = a then the vote is simply a C − {a}.) • For any 1 ≤ i ≤ n , voters 4i − 1 and 4i rank the candidates dk(i) a C − {a, dk(i)} (that is, their most preferred candidate is the candidate that is paired with the candidate that the previous two voters vote for). 6 An intuitive proof of this is the following. We can count the number of permutations of n elements as follows. First, divide the elements into m buckets of size n /m, so that if x is placed in a lower-indexed bucket than y, then x will be indexed lower in the eventual permutation. Then, decide on the permutation within each bucket (for which there are (n /m)! choices per bucket). It follows that n ! equals the number of ways to divide n elements into m buckets of size n /m, times ((n /m)!)m . • Every candidate is ranked at the top of equally many of the first 4n = n − 2 votes. • Voter 4n +1 = n−1 ranks the candidates a C−{a}. • Voter 4n + 2 = n ranks the candidates b C − {b}. Candidate a wins with each one of these vote vectors: because of the last two votes, candidates a and b are one vote ahead of all the other candidates and continue to the runoff, and at this point all the votes that had another candidate ranked at the top transfer to a, so that a wins the runoff. Given that m divides n , let us see how many vote vectors there are in the fooling set. We need to distribute n groups of four voters evenly over the m pairs of candidates, and (as in the proof of Theorem 3) there are n ! (( n m )!)m ways of doing this. All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses. Let i be a number such that ck(i) is not the same in both of these two vote vectors, that is, c1 k(i) (ck(i) in the first vote vector) is not equal to c2 k(i) (ck(i) in the second vote vector). Without loss of generality, suppose c1 k(i) = a. Now, construct a new vote vector by taking votes 4i − 3, 4i − 2, 4i − 1, 4i from the first vote vector, and the remaining votes from the second vote vector. In this newly constructed vote vector, c1 k(i) and d1 k(i) each receive 4n /m+2 votes in the first round, whereas a receives at most 4n /m+1 votes. So, a does not continue to the runoff in the newly constructed vote vector, and hence we have a correct fooling set. Theorem 6. The nondeterministic communication complexity of the Borda rule is Ω(nm log m) (even to decide whether a given candidate a wins). Proof. We will exhibit a fooling set of size (m !)n where m = m−2 and n = (n−2)/4. This will prove the theorem because m ! is Ω(m log m), so that log((m !)n ) = n log(m !) is Ω(nm log m). For every vector (π1, π2, . . . , πn ) consisting of n orderings of all candidates other than a and another fixed candidate b (technically, the orderings take the form of a one-to-one function πi : {1, 2, . . . , m } → C − {a, b} with πi(j) = c indicating that candidate c is the jth in the order represented by πi), let the following vector of votes be an element of the fooling set: • For 1 ≤ i ≤ n , let voters 4i − 3 and 4i − 2 rank the candidates a b πi(1) πi(2) . . . πi(m ). • For 1 ≤ i ≤ n , let voters 4i − 1 and 4i rank the candidates πi(m ) πi(m − 1) . . . πi(1) b a. • Let voter 4n + 1 = n − 1 rank the candidates a b π0(1) π0(2) . . . π0(m ) (where π0 is an arbitrary order of the candidates other than a and b which is the same for every element of the fooling set). • Let voter 4n + 2 = n rank the candidates π0(m ) π0(m − 1) . . . π0(1) a b. We observe that this fooling set has size (m !)n , and that candidate a wins in each vector of votes in the fooling set (to 82 see why, we observe that for any 1 ≤ i ≤ n , votes 4i−3 and 4i − 2 rank the candidates in the exact opposite way from votes 4i − 1 and 4i, which under the Borda rule means they cancel out; and the last two votes give one more point to a than to any other candidate-besides b who gets two fewer points than a). All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses. Let the first vote vector correspond to the vector (π1 1, π1 2, . . . , π1 n ), and let the second vote vector correspond to the vector (π2 1, π2 2, . . . , π2 n ). For some i, we must have π1 i = π2 i , so that for some candidate c /∈ {a, b}, (π1 i )−1 (c) < (π2 i )−1 (c) (that is, c is ranked higher in π1 i than in π2 i ). Now, construct a new vote vector by taking votes 4i−3 and 4i−2 from the first vote vector, and the remaining votes from the second vote vector. as Borda score remains unchanged. However, because c is ranked higher in π1 i than in π2 i , c receives at least 2 more points from votes 4i−3 and 4i − 2 in the newly constructed vote vector than it did in the second vote vector. It follows that c has a higher Borda score than a in the newly constructed vote vector. So, a is not the winner in the newly constructed vote vector, and hence we have a correct fooling set. Theorem 7. The nondeterministic communication complexity of the Copeland rule is Ω(nm log m) (even to decide whether a given candidate a wins). Proof. We will exhibit a fooling set of size (m !)n where m = (m − 2)/2 and n = (n − 2)/2. This will prove the theorem because m ! is Ω(m log m), so that log((m !)n ) = n log(m !) is Ω(nm log m). We write the set of candidates as the following disjoint union: C = {a, b} ∪ L ∪ R where L = {l1, l2, . . . , lm } and R = {r1, r2, . . . , rm }. For every vector (π1, π2, . . . , πn ) consisting of n permutations of the integers 1 through m (πi : {1, 2, . . . , m } → {1, 2, . . . , m }), let the following vector of votes be an element of the fooling set: • For 1 ≤ i ≤ n , let voter 2i − 1 rank the candidates a b lπi(1) rπi(1) lπi(2) rπi(2) . . . lπi(m ) rπi(m ). • For 1 ≤ i ≤ n , let voter 2i rank the candidates rπi(m ) lπi(m ) rπi(m −1) lπi(m −1) . . . rπi(1) lπi(1) b a. • Let voter n − 1 = 2n + 1 rank the candidates a b l1 r1 l2 r2 . . . lm rm . • Let voter n = 2n +2 rank the candidates rm lm rm −1 lm −1 . . . r1 l1 a b. We observe that this fooling set has size (m !)n , and that candidate a wins in each vector of votes in the fooling set (every pair of candidates is tied in their pairwise election, with the exception that a defeats b, so that a wins the election by half a point). All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses. Let the first vote vector correspond to the vector (π1 1, π1 2, . . . , π1 n ), and let the second vote vector correspond to the vector (π2 1, π2 2, . . . , π2 n ). For some i, we must have π1 i = π2 i , so that for some j ∈ {1, 2, . . . , m }, we have (π1 i )−1 (j) < (π2 i )−1 (j). Now, construct a new vote vector by taking vote 2i−1 from the first vote vector, and the remaining votes from the second vote vector. as Copeland score remains unchanged. Let us consider the score of lj. We first observe that the rank of lj in vote 2i − 1 in the newly constructed vote vector is at least 2 higher than it was in the second vote vector, because (π1 i )−1 (j) < (π2 i )−1 (j). Let D1 (lj) be the set of candidates in L ∪ R that voter 2i − 1 ranked lower than lj in the first vote vector (D1 (lj) = {c ∈ L ∪ R : lj 1 2i−1 c}), and let D2 (lj) be the set of candidates in L ∪ R that voter 2i − 1 ranked lower than lj in the second vote vector (D2 (lj) = {c ∈ L ∪ R : lj 2 2i−1 c}). Then, it follows that in the newly constructed vote vector, lj defeats all the candidates in D1 (lj) − D2 (lj) in their pairwise elections (because lj receives an extra vote in each one of these pairwise elections relative to the second vote vector), and loses to all the candidates in D2 (lj) − D1 (lj) (because lj loses a vote in each one of these pairwise elections relative to the second vote vector), and ties with everyone else. But |D1 (lj)|−|D2 (lj)| ≥ 2, and hence |D1 (lj) − D2 (lj)| − |D2 (lj) − D1 (lj)| ≥ 2. Hence, in the newly constructed vote vector, lj has at least two more pairwise wins than pairwise losses, and therefore has at least 1 more point than if lj had tied all its pairwise elections. Thus, lj has a higher Copeland score than a in the newly constructed vote vector. So, a is not the winner in the newly constructed vote vector, and hence we have a correct fooling set. Theorem 8. The nondeterministic communication complexity of the maximin rule is O(nm). Proof. The nondeterministic protocol will guess which candidate w is the winner, and, for each other candidate c, which candidate o(c) is the candidate against whom c receives its lowest score in a pairwise election. Then, let every voter communicate the following: • for each candidate c = w, whether she prefers c to w; • for each candidate c = w, whether she prefers c to o(c). We observe that this requires the communication of 2n(m− 1) bits. If the guesses were correct, then, letting N(d, e) be the number of voters preferring candidate d to candidate e, we should have N(c, o(c)) < N(w, c ) for any c = w, c = w, which will prove that w wins the election. Theorem 9. The nondeterministic communication complexity of the maximin rule is Ω(nm) (even to decide whether a given candidate a wins). Proof. We will exhibit a fooling set of size 2n m where m = m − 2 and n = (n − 1)/4. Let b be a candidate other than a. For every vector (S1, S2, . . . , Sn ) consisting of n subsets Si ⊆ C − {a, b}, let the following vector of votes be an element of the fooling set: • For 1 ≤ i ≤ n , let voters 4i − 3 and 4i − 2 rank the candidates Si a C − (Si ∪ {a, b}) b. • For 1 ≤ i ≤ n , let voters 4i − 1 and 4i rank the candidates b C − (Si ∪ {a, b}) a Si. 83 • Let voter 4n + 1 = n rank the candidates a b C − {a, b}. We observe that this fooling set has size (2m )n = 2n m , and that candidate a wins in each vector of votes in the fooling set (in every one of as pairwise elections, a is ranked higher than its opponent by 2n +1 = (n+1)/2 > n/2 votes). All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses. Let the first vote vector correspond to the vector (S1 1 , S1 2 , . . . , S1 n ), and let the second vote vector correspond to the vector (S2 1 , S2 2 , . . . , S2 n ). For some i, we must have S1 i = S2 i , so that either S1 i S2 i or S2 i S1 i . Without loss of generality, suppose S1 i S2 i , and let c be some candidate in S1 i − S2 i . Now, construct a new vote vector by taking votes 4i − 3 and 4i − 2 from the first vote vector, and the remaining votes from the second vote vector. In this newly constructed vote vector, a is ranked higher than c by only 2n −1 voters, for the following reason. Whereas voters 4i−3 and 4i − 2 do not rank c higher than a in the second vote vector (because c /∈ S2 i ), voters 4i − 3 and 4i − 2 do rank c higher than a in the first vote vector (because c ∈ S1 i ). Moreover, in every one of bs pairwise elections, b is ranked higher than its opponent by at least 2n voters. So, a has a lower maximin score than b, therefore a is not the winner in the newly constructed vote vector, and hence we have a correct fooling set. Theorem 10. The deterministic communication complexity of the STV rule is O(n(log m)2 ). Proof. Consider the following communication protocol. Let each voter first announce her most preferred candidate (O(n log m) communication). In the remaining rounds, we will keep track of each voters most preferred candidate among the remaining candidates, which will be enough to implement the rule. When candidate c is eliminated, let each of the voters whose most preferred candidate among the remaining candidates was c announce their most preferred candidate among the candidates remaining after cs elimination. If candidate c was the ith candidate to be eliminated (that is, there were m − i + 1 candidates remaining before cs elimination), it follows that at most n/(m − i + 1) voters had candidate c as their most preferred candidate among the remaining candidates, and thus the number of bits to be communicated after the elimination of the ith candidate is O((n/(m−i+1)) log m).7 Thus, the total communication in this communication protocol is O(n log m + m−1 i=1 (n/(m − i + 1)) log m). Of course, m−1 i=1 1/(m − i + 1) = m i=2 1/i, which is O(log m). Substituting into the previous expression, we find that the communication complexity is O(n(log m)2 ). Theorem 11. The nondeterministic communication complexity of the STV rule is Ω(n log m) (even to decide whether a given candidate a wins). Proof. We omit this proof because of space constraint. 7 Actually, O((n/(m − i + 1)) log(m − i + 1)) is also correct, but it will not improve the bound. Theorem 12. The deterministic communication complexity of the approval rule is O(nm). Proof. Approving or disapproving of a candidate requires only one bit of information, so every voter can simply approve or disapprove of every candidate for a total communication of nm bits. Theorem 13. The nondeterministic communication complexity of the approval rule is Ω(nm) (even to decide whether a given candidate a wins). Proof. We will exhibit a fooling set of size 2n m where m = m − 1 and n = (n − 1)/4. For every vector (S1, S2, . . . , Sn ) consisting of n subsets Si ⊆ C − {a}, let the following vector of votes be an element of the fooling set: • For 1 ≤ i ≤ n , let voters 4i − 3 and 4i − 2 approve Si ∪ {a}. • For 1 ≤ i ≤ n , let voters 4i − 1 and 4i approve C − (Si ∪ {a}). • Let voter 4n + 1 = n approve {a}. We observe that this fooling set has size (2m )n = 2n m , and that candidate a wins in each vector of votes in the fooling set (a is approved by 2n + 1 voters, whereas each other candidate is approved by only 2n voters). All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses. Let the first vote vector correspond to the vector (S1 1 , S1 2 , . . . , S1 n ), and let the second vote vector correspond to the vector (S2 1 , S2 2 , . . . , S2 n ). For some i, we must have S1 i = S2 i , so that either S1 i S2 i or S2 i S1 i . Without loss of generality, suppose S1 i S2 i , and let b be some candidate in S1 i − S2 i . Now, construct a new vote vector by taking votes 4i − 3 and 4i − 2 from the first vote vector, and the remaining votes from the second vote vector. In this newly constructed vote vector, a is still approved by 2n + 1 votes. However, b is approved by 2n + 2 votes, for the following reason. Whereas voters 4i−3 and 4i−2 do not approve b in the second vote vector (because b /∈ S2 i ), voters 4i − 3 and 4i − 2 do approve b in the first vote vector (because b ∈ S1 i ). It follows that bs score in the newly constructed vote vector is bs score in the second vote vector (2n ), plus two. So, a is not the winner in the newly constructed vote vector, and hence we have a correct fooling set. Interestingly, an Ω(m) lower bound can be obtained even for the problem of finding a candidate that is approved by more than one voter [20]. Theorem 14. The deterministic communication complexity of the Condorcet rule is O(nm). Proof. We maintain a set of active candidates S which is initialized to C. At each stage, we choose two of the active candidates (say, the two candidates with the lowest indices), and we let each voter communicate which of the two candidates she prefers. (Such a stage requires the communication of n bits, one per voter.) The candidate preferred by fewer 84 voters (the loser of the pairwise election) is removed from S. (If the pairwise election is tied, both candidates are removed.) After at most m − 1 iterations, only one candidate is left (or zero candidates are left, in which case there is no Condorcet winner). Let a be the remaining candidate. To find out whether candidate a is the Condorcet winner, let each voter communicate, for every candidate c = a, whether she prefers a to c. (This requires the communication of at most n(m − 1) bits.) This is enough to establish whether a won each of its pairwise elections (and thus, whether a is the Condorcet winner). Theorem 15. The nondeterministic communication complexity of the Condorcet rule is Ω(nm) (even to decide whether a given candidate a wins). Proof. We will exhibit a fooling set of size 2n m where m = m − 1 and n = (n − 1)/2. For every vector (S1, S2, . . . , Sn ) consisting of n subsets Si ⊆ C − {a}, let the following vector of votes be an element of the fooling set: • For 1 ≤ i ≤ n , let voter 2i − 1 rank the candidates Si a C − Si. • For 1 ≤ i ≤ n , let voter 2i rank the candidates C − Si a Si. • Let voter 2n +1 = n rank the candidates a C −{a}. We observe that this fooling set has size (2m )n = 2n m , and that candidate a wins in each vector of votes in the fooling set (a wins each of its pairwise elections by a single vote). All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses. Let the first vote vector correspond to the vector (S1 1 , S1 2 , . . . , S1 n ), and let the second vote vector correspond to the vector (S2 1 , S2 2 , . . . , S2 n ). For some i, we must have S1 i = S2 i , so that either S1 i S2 i or S2 i S1 i . Without loss of generality, suppose S1 i S2 i , and let b be some candidate in S1 i − S2 i . Now, construct a new vote vector by taking vote 2i − 1 from the first vote vector, and the remaining votes from the second vote vector. In this newly constructed vote vector, b wins its pairwise election against a by one vote (vote 2i − 1 ranks b above a in the newly constructed vote vector because b ∈ S1 i , whereas in the second vote vector vote 2i − 1 ranked a above b because b /∈ S2 i ). So, a is not the Condorcet winner in the newly constructed vote vector, and hence we have a correct fooling set. Theorem 16. The deterministic communication complexity of the cup rule is O(nm). Proof. Consider the following simple communication protocol. First, let all the voters communicate, for every one of the matchups in the first round, which of its two candidates they prefer. After this, the matchups for the second round are known, so let all the voters communicate which candidate they prefer in each matchup in the second round-etc. Because communicating which of two candidates is preferred requires only one bit per voter, and because there are only m − 1 matchups in total, this communication protocol requires O(nm) communication. Theorem 17. The nondeterministic communication complexity of the cup rule is Ω(nm) (even to decide whether a given candidate a wins). Proof. We will exhibit a fooling set of size 2n m where m = (m − 1)/2 and n = (n − 7)/2. Given that m + 1 is a power of 2, so that one candidate gets a bye (that is, does not face an opponent) in the first round, let a be the candidate with the bye. Of the m first-round matchups, let lj denote the one (left) candidate in the jth matchup, and let rj be the other (right) candidate. Let L = {lj : 1 ≤ j ≤ m } and R = {rj : 1 ≤ j ≤ m }, so that C = L ∪ R ∪ {a}. . . . . . . . . . l r l r l r a m1 1 2 2 m Figure 1: The schedule for the cup rule used in the proof of Theorem 17. For every vector (S1, S2, . . . , Sn ) consisting of n subsets Si ⊆ R, let the following vector of votes be an element of the fooling set: • For 1 ≤ i ≤ n , let voter 2i − 1 rank the candidates Si L a R − Si. • For 1 ≤ i ≤ n , let voter 2i rank the candidates R − Si L a Si. • Let voters 2n +1 = n−6, 2n +2 = n−5, 2n +3 = n−4 rank the candidates L a R. • Let voters 2n + 4 = n − 3, 2n + 5 = n − 2 rank the candidates a r1 l1 r2 l2 . . . rm lm . • Let voters 2n + 6 = n − 1, 2n + 7 = n rank the candidates rm lm rm −1 lm −1 . . . r1 l1 a. We observe that this fooling set has size (2m )n = 2n m . Also, candidate a wins in each vector of votes in the fooling set, for the following reasons. Each candidate rj defeats its opponent lj in the first round. (For any 1 ≤ i ≤ n , the net effect of votes 2i − 1 and 2i on the pairwise election between rj and lj is zero; votes n − 6, n − 5, n − 4 prefer lj to rj, but votes n − 3, n − 2, n − 1, n all prefer rj to lj.) Moreover, a defeats every rj in their pairwise election. (For any 1 ≤ i ≤ n , the net effect of votes 2i − 1 and 2i on the pairwise election between a and rj is zero; votes n − 1, n prefer rj to a, but votes n − 6, n − 5, n − 4, n − 3, n − 2 all prefer a to rj.) It follows that a will defeat all the candidates that it faces. All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses. Let the first vote vector correspond to the vector 85 (S1 1 , S1 2 , . . . , S1 n ), and let the second vote vector correspond to the vector (S2 1 , S2 2 , . . . , S2 n ). For some i, we must have S1 i = S2 i , so that either S1 i S2 i or S2 i S1 i . Without loss of generality, suppose S1 i S2 i , and let rj be some candidate in S1 i − S2 i . Now, construct a new vote vector by taking vote 2i from the first vote vector, and the remaining votes from the second vote vector. We note that, whereas in the second vote vector vote 2i preferred rj to lj (because rj ∈ R−S2 i ), in the newly constructed vote vector this is no longer the case (because rj ∈ S1 i ). It follows that, whereas in the second vote vector, rj defeated lj in the first round by one vote, in the newly constructed vote vector, lj defeats rj in the first round. Thus, at least one lj advances to the second round after defeating its opponent rj. Now, we observe that in the newly constructed vote vector, any lk wins its pairwise election against any rq with q = k. This is because among the first 2n votes, at least n − 1 prefer lk to rq; votes n − 6, n − 5, n − 4 prefer lk to rq; and, because q = k, either votes n − 3, n − 2 prefer lk to rq (if k < q), or votes n − 1, n prefer lk to rq (if k > q). Thus, at least n + 4 = (n + 1)/2 > n/2 votes prefer lk to rq. Moreover, any lk wins its pairwise election against a. This is because only votes n − 3 and n − 2 prefer a to lk. It follows that, after the first round, any surviving candidate lk can only lose a matchup against another surviving lk , so that one of the lk must win the election. So, a is not the winner in the newly constructed vote vector, and hence we have a correct fooling set. Theorem 18. The deterministic communication complexity of the Bucklin rule is O(nm). Proof. Let l be the minimum integer for which there is a candidate who is ranked among the top l candidates by more than half the votes. We will do a binary search for l. At each point, we will have a lower bound lL which is smaller than l (initialized to 0), and an upper bound lH which is at least l (initialized to m). While lH − lL > 1, we continue by finding out whether (lH − l)/2 is smaller than l, after which we can update the bounds. To find out whether a number k is smaller than l, we determine every voters k most preferred candidates. Every voter can communicate which candidates are among her k most preferred candidates using m bits (for each candidate, indicate whether the candidate is among the top k or not), but because the binary search requires log m iterations, this gives us an upper bound of O((log m)nm), which is not strong enough. However, if lL < k < lH , and we already know a voters lL most preferred candidates, as well as her lH most preferred candidates, then the voter no longer needs to communicate whether the lL most preferred candidates are among her k most preferred candidates (because they must be), and she no longer needs to communicate whether the m−lH least preferred candidates are among her k most preferred candidates (because they cannot be). Thus the voter needs to communicate only m−lL −(m−lH ) = lH −lL bits in any given stage. Because each stage, lH − lL is (roughly) halved, each voter in total communicates only (roughly) m + m/2 + m/4 + . . . ≤ 2m bits. Theorem 19. The nondeterministic communication complexity of the Bucklin rule is Ω(nm) (even to decide whether a given candidate a wins). Proof. We will exhibit a fooling set of size 2n m where m = (m−1)/2 and n = n/2. We write the set of candidates as the following disjoint union: C = {a} ∪ L ∪ R where L = {l1, l2, . . . , lm } and R = {r1, r2, . . . , rm }. For any subset S ⊆ {1, 2, . . . , m }, let L(S) = {li : i ∈ S} and let R(S) = {ri : i ∈ S}. For every vector (S1, S2, . . . , Sn ) consisting of n sets Si ⊆ {1, 2, . . . , m }, let the following vector of votes be an element of the fooling set: • For 1 ≤ i ≤ n , let voter 2i − 1 rank the candidates L(Si) R − R(Si) a L − L(Si) R(Si). • For 1 ≤ i ≤ n , let voter 2i rank the candidates L − L(Si) R(Si) a L(Si) R − R(Si). We observe that this fooling set has size (2m )n = 2n m , and that candidate a wins in each vector of votes in the fooling set, for the following reason. Each candidate in C − {a} is ranked among the top m candidates by exactly half the voters (which is not enough to win). Thus, we need to look at the voters top m +1 candidates, and a is ranked m +1th by all voters. All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses. Let the first vote vector correspond to the vector (S1 1 , S1 2 , . . . , S1 n ), and let the second vote vector correspond to the vector (S2 1 , S2 2 , . . . , S2 n ). For some i, we must have S1 i = S2 i , so that either S1 i S2 i or S2 i S1 i . Without loss of generality, suppose S1 i S2 i , and let j be some integer in S1 i − S2 i . Now, construct a new vote vector by taking vote 2i − 1 from the first vote vector, and the remaining votes from the second vote vector. In this newly constructed vote vector, a is still ranked m + 1th by all votes. However, lj is ranked among the top m candidates by n + 1 = n/2 + 1 votes. This is because whereas vote 2i − 1 does not rank lj among the top m candidates in the second vote vector (because j /∈ S2 i , we have lj /∈ L(S2 i )), vote 2i − 1 does rank lj among the top m candidates in the first vote vector (because j ∈ S1 i , we have lj ∈ L(S1 i )). So, a is not the winner in the newly constructed vote vector, and hence we have a correct fooling set. Theorem 20. The nondeterministic communication complexity of the ranked pairs rule is Ω(nm log m) (even to decide whether a given candidate a wins). Proof. We omit this proof because of space constraint. 5. DISCUSSION One key obstacle to using voting for preference aggregation is the communication burden that an election places on the voters. By lowering this burden, it may become feasible to conduct more elections over more issues. In the limit, this could lead to a shift from representational government to a system in which most issues are decided by referenda-a veritable e-democracy. In this paper, we analyzed the communication complexity of the common voting rules. Knowing which voting rules require little communication is especially important when the issue to be voted on is of low enough importance that the following is true: the parties involved are willing to accept a rule that tends 86 to produce outcomes that are slightly less representative of the voters preferences, if this rule reduces the communication burden on the voters significantly. The following table summarizes the results we obtained. Rule Lower bound Upper bound plurality Ω(n log m) O(n log m) plurality w/ runoff Ω(n log m) O(n log m) STV Ω(n log m) O(n(log m)2) Condorcet Ω(nm) O(nm) approval Ω(nm) O(nm) Bucklin Ω(nm) O(nm) cup Ω(nm) O(nm) maximin Ω(nm) O(nm) Borda Ω(nm log m) O(nm log m) Copeland Ω(nm log m) O(nm log m) ranked pairs Ω(nm log m) O(nm log m) Communication complexity of voting rules, sorted from low to high. All of the upper bounds are deterministic (with the exception of maximin, for which the best deterministic upper bound we proved is O(nm log m)). All of the lower bounds hold even for nondeterministic communication and even just for determining whether a given candidate a is the winner. One area of future research is to study what happens when we restrict our attention to communication protocols that do not reveal any strategically useful information. This restriction may invalidate some of the upper bounds that we derived using multistage communication protocols. Also, all of our bounds are worst-case bounds. It may be possible to outperform these bounds when the distribution of votes has additional structure. When deciding which voting rule to use for an election, there are many considerations to take into account. The voting rules that we studied in this paper are the most common ones that have survived the test of time. One way to select among these rules is to consider recent results on complexity. The table above shows that from a communication complexity perspective, plurality, plurality with runoff, and STV are preferable. However, plurality has the undesirable property that it is computationally easy to manipulate by voting strategically [3, 7]. Plurality with runoff is NP-hard to manipulate by a coalition of weighted voters, or by an individual that faces correlated uncertainty about the others votes [7, 6]. STV is NP-hard to manipulate in those settings as well [7], but also by an individual with perfect knowledge of the others votes (when the number of candidates is unbounded) [2]. Therefore, STV is more robust, although it may require slightly more worst-case communication as per the table above. Yet other selection criteria are the computational complexity of determining whether enough information has been elicited to declare a winner, and that of determining the optimal sequence of queries [8]. 6. REFERENCES [1] Lawrence Ausubel and Paul Milgrom. Ascending auctions with package bidding. Frontiers of Theoretical Economics, 1, 2002. No. 1, Article 1. [2] John Bartholdi, III and James Orlin. Single transferable vote resists strategic voting. Social Choice and Welfare, 8(4):341-354, 1991. [3] John Bartholdi, III, Craig Tovey, and Michael Trick. The computational difficulty of manipulating an election. Social Choice and Welfare, 6(3):227-241, 1989. [4] Avrim Blum, Jeffrey Jackson, Tuomas Sandholm, and Martin Zinkevich. Preference elicitation and query learning. Journal of Machine Learning Research, 5:649-667, 2004. [5] Wolfram Conen and Tuomas Sandholm. Preference elicitation in combinatorial auctions: Extended abstract. In Proceedings of the ACM Conference on Electronic Commerce (ACM-EC), pages 256-259, 2001. [6] Vincent Conitzer, Jerome Lang, and Tuomas Sandholm. How many candidates are needed to make elections hard to manipulate? In Theoretical Aspects of Rationality and Knowledge (TARK), pages 201-214, 2003. [7] Vincent Conitzer and Tuomas Sandholm. Complexity of manipulating elections with few candidates. In Proceedings of the National Conference on Artificial Intelligence (AAAI), pages 314-319, 2002. [8] Vincent Conitzer and Tuomas Sandholm. Vote elicitation: Complexity and strategy-proofness. In Proceedings of the National Conference on Artificial Intelligence (AAAI), pages 392-397, 2002. [9] Sven de Vries, James Schummer, and Rakesh V. Vohra. On ascending auctions for heterogeneous objects, 2003. Draft. [10] Allan Gibbard. Manipulation of voting schemes. Econometrica, 41:587-602, 1973. [11] Benoit Hudson and Tuomas Sandholm. Effectiveness of query types and policies for preference elicitation in combinatorial auctions. In International Conference on Autonomous Agents and Multi-Agent Systems (AAMAS), pages 386-393, 2004. [12] E Kushilevitz and N Nisan. Communication Complexity. Cambridge University Press, 1997. [13] Sebasti´en Lahaie and David Parkes. Applying learning algorithms to preference elicitation. In Proceedings of the ACM Conference on Electronic Commerce, 2004. [14] Noam Nisan and Ilya Segal. The communication requirements of efficient allocations and supporting prices. Journal of Economic Theory, 2005. Forthcoming. [15] David Parkes. iBundle: An efficient ascending price bundle auction. In Proceedings of the ACM Conference on Electronic Commerce (ACM-EC), pages 148-157, 1999. [16] Tuomas Sandholm. An implementation of the contract net protocol based on marginal cost calculations. In Proceedings of the National Conference on Artificial Intelligence (AAAI), pages 256-262, 1993. [17] Tuomas Sandholm and Craig Boutilier. Preference elicitation in combinatorial auctions. In Peter Cramton, Yoav Shoham, and Richard Steinberg, editors, Combinatorial Auctions, chapter 10. MIT Press, 2005. [18] Paolo Santi, Vincent Conitzer, and Tuomas Sandholm. Towards a characterization of polynomial preference elicitation with value queries in combinatorial auctions. In Conference on Learning Theory (COLT), pages 1-16, 2004. [19] Mark Satterthwaite. Strategy-proofness and Arrows conditions: existence and correspondence theorems for voting procedures and social welfare functions. Journal of Economic Theory, 10:187-217, 1975. [20] Ilya Segal. The communication requirements of social choice rules and supporting budget sets, 2004. Draft. Presented at the DIMACS Workshop on Computational Issues in Auction Design, Rutgers University, New Jersey, USA. [21] Peter Wurman and Michael Wellman. AkBA: A progressive, anonymous-price combinatorial auction. In Proceedings of the ACM Conference on Electronic Commerce (ACM-EC), pages 21-29, 2000. [22] A. C. Yao. Some complexity questions related to distributed computing. In Proceedings of the 11th ACM symposium on theory of computing (STOC), pages 209-213, 1979. [23] Martin Zinkevich, Avrim Blum, and Tuomas Sandholm. On polynomial-time preference elicitation with value queries. In Proceedings of the ACM Conference on Electronic Commerce (ACM-EC), pages 176-185, 2003. 87",
    "original_translation": "Determinamos la complejidad de comunicación de las reglas de votación comunes. Las reglas (ordenadas por su complejidad de comunicación de baja a alta) son pluralidad, pluralidad con segunda vuelta, voto único transferible (STV), Condorcet, aprobación, Bucklin, taza, maximin, Borda, Copeland y pares clasificados. Para cada regla, primero proporcionamos un protocolo de comunicación determinista y un límite superior en la cantidad de bits comunicados en él; luego, damos un límite inferior en los requisitos de comunicación (incluso los no deterministas) de la regla de votación. Los límites coinciden para todas las reglas de votación excepto STV y maximin. Categorías y Descriptores de Asignaturas F.2 [Teoría de la Computación]: Análisis de Algoritmos y Complejidad de Problemas; J.4 [Aplicaciones Informáticas]: Ciencias Sociales y del Comportamiento-Economía Términos Generales Algoritmos, Economía, Teoría 1. INTRODUCCIÓN Un factor clave en la viabilidad de cualquier regla de agregación de preferencias es su carga de comunicación. Para agregar con éxito las preferencias de los agentes, generalmente no es necesario que todos los agentes informen toda su información de preferencias. Los protocolos inteligentes que obtienen parcial y secuencialmente las preferencias de los agentes tienen el potencial de reducir drásticamente la comunicación requerida. Esto tiene al menos las siguientes ventajas: • Puede hacer factible la agregación de preferencias en entornos donde la cantidad total de información de preferencias es demasiado grande para comunicar. • Incluso cuando comunicar toda la información de preferencias es factible, reducir los requisitos de comunicación disminuye la carga impuesta a los agentes. Esto es especialmente cierto cuando los agentes, en lugar de conocer todas sus preferencias de antemano, necesitan invertir esfuerzo (como cálculos o recopilación de información) para determinar sus preferencias. • Preserva (parte de) la privacidad de los agentes. La mayor parte del trabajo sobre la reducción de la carga de comunicación en la agregación de preferencias se ha centrado en entornos de asignación de recursos como subastas combinatorias, en las que un subastador subasta un número de artículos (posiblemente distintos) en un solo evento. Debido a que en una subasta combinatoria, los postores pueden tener valoraciones separadas para cada uno de un número exponencial de posibles paquetes de artículos, este es un escenario en el que reducir la carga de comunicación es especialmente crucial. Esto se puede lograr complementando al subastador con un provocador que elicitara incrementalmente partes de las preferencias de los postores según sea necesario, basándose en lo que los postores han revelado sobre sus preferencias hasta el momento, como sugieren Conen y Sandholm [5]. Por ejemplo, el solicitante puede preguntar por el valor de un postor para un paquete específico (consultas de valor), cuál de dos paquetes prefiere el postor (consultas de orden), qué paquete clasifica en la posición k o cuál es la posición de un paquete dado (consultas de clasificación), qué paquete compraría dado un vector particular de precios (consultas de demanda), etc., hasta que se pueda determinar (al menos) la asignación final. Experimentalmente, esto produce a drástico ahorro en la revelación de preferencias [11]. Además, si las funciones de valoración de los agentes provienen de ciertas subclases naturales, el problema de la obtención de información puede resolverse utilizando solo un número polinomial de consultas incluso en el peor de los casos [23, 4, 13, 18, 14]. Para una revisión de la obtención de preferencias en subastas combinatorias, consulte [17]. Las subastas combinatorias ascendentes son una forma especial conocida de obtención de preferencias, donde el encuestador realiza consultas de demanda con precios crecientes [15, 21, 1, 9]. Finalmente, los problemas de asignación de recursos 78 también han sido estudiados desde el punto de vista de la complejidad de la comunicación, derivando así límites inferiores sobre la comunicación requerida. Por ejemplo, Nisan y Segal muestran que se requiere comunicación exponencial incluso para obtener un excedente mayor al obtenido al subastar todos los objetos como un único paquete [14]. Segal también estudia reglas de elección social en general, y muestra que para una gran clase de reglas de elección social, los conjuntos de presupuesto de apoyo deben ser revelados de tal manera que si cada agente prefiere el mismo resultado en su conjunto de presupuesto, esto demuestra la optimalidad de ese resultado. Segal luego utiliza esta caracterización para demostrar límites en la comunicación requerida en la asignación de recursos, así como en entornos de emparejamiento [20]. En este documento, nos enfocaremos en los requisitos de comunicación de una subclase generalmente aplicable de reglas de elección social, comúnmente conocidas como reglas de votación. En un entorno de votación, hay un conjunto de resultados de candidatos sobre los cuales los votantes expresan sus preferencias al enviar un voto (normalmente, una clasificación de los candidatos), y el ganador (es decir, el resultado elegido) se determina en función de estos votos. La comunicación requerida por las reglas de votación puede ser grande ya sea porque el número de votantes es grande (como, por ejemplo, en elecciones nacionales), o porque el número de candidatos es grande (por ejemplo, los agentes pueden votar sobre asignaciones de un número de recursos), o ambos. El trabajo previo [8] ha estudiado la obtención de información en votaciones, analizando qué tan difícil es computacionalmente decidir si se puede determinar un ganador con la información obtenida hasta el momento, así como qué tan difícil es encontrar la secuencia óptima de preguntas dadas sospechas perfectas sobre las preferencias de los votantes. Además, ese artículo discute cuestiones estratégicas (teóricas de juegos) introducidas por la obtención de información. Por el contrario, en este artículo nos preocupamos por el número máximo de bits que deben comunicarse para ejecutar una regla de votación dada, cuando no se conoce de antemano las preferencias de los votantes. Determinamos la complejidad de comunicación de las reglas de votación comunes. Para cada regla, primero damos una cota superior en la complejidad de comunicación (determinística) proporcionando un protocolo de comunicación para ella y analizando cuántos bits necesitan ser transmitidos en este protocolo. (Los resultados de Segal [20] no se aplican a la mayoría de las reglas de votación porque la mayoría de las reglas de votación no son intersección-monótonas (o incluso monótonas).) Para muchas de las reglas de votación bajo estudio, resulta que no se puede hacer mejor que simplemente permitir que cada votante comunique inmediatamente toda su información (potencialmente relevante). Sin embargo, para algunas reglas (como la pluralidad con segunda vuelta, STV y taza) existe un protocolo de comunicación multietapa directo que, con un análisis detallado, se puede demostrar que supera significativamente la comunicación inmediata de toda la información (potencialmente relevante). Finalmente, para algunas reglas (como las reglas de Condorcet y Bucklin), necesitamos introducir un protocolo de comunicación más complejo para lograr el mejor límite superior posible. Para dos de las reglas que estudiamos que son intersección-monótonas, a saber, las reglas de aprobación y Condorcet, los resultados de Segal de hecho pueden ser utilizados para dar pruebas alternativas de nuestros límites inferiores. Solo proporcionamos pruebas directas para estas reglas aquí porque 1) estas pruebas directas son de las más fáciles en este documento, 2) las pruebas alternativas son no triviales incluso dados los resultados de Segal, y 3) se aplica una restricción de espacio. Sin embargo, esperamos incluir también las pruebas alternativas en una versión posterior. Después de obtener los límites superiores, demostramos que son ajustados al proporcionar límites inferiores coincidentes en la complejidad de comunicación (incluso la no determinista) de cada regla de votación. Hay dos excepciones: STV, para el cual nuestros límites superiores e inferiores difieren en un factor log m; y maximin, para el cual nuestro mejor límite superior determinístico también es un factor log m por encima del límite inferior (no determinístico), aunque proporcionamos un límite superior no determinístico que coincide con el límite inferior. 2. REVISIÓN DE LAS REGLAS DE VOTACIÓN En esta sección, revisamos las reglas de votación comunes que estudiamos en este documento. Una regla de votación es una función que asigna un vector de votos de los n votantes (es decir, preferencias sobre candidatos) a uno de los m candidatos (el ganador) en el conjunto de candidatos C. En algunos casos (como la regla de Condorcet), la regla también puede declarar que no existe un ganador. No nos preocupamos por lo que sucede en caso de un empate entre candidatos (nuestros límites inferiores se mantienen independientemente de cómo se resuelvan los empates, y los protocolos de comunicación utilizados para nuestros límites superiores no intentan romper los empates). Todas las reglas que estudiamos son reglas basadas en el rango, lo que significa que un voto se define como un ordenamiento de los candidatos (con la excepción de la regla de la pluralidad, para la cual un voto es un único candidato, y la regla de aprobación, para la cual un voto es un subconjunto de los candidatos). Consideraremos las siguientes reglas de votación. (Para reglas que definen una puntuación, el candidato con la puntuación más alta gana.) • reglas de puntuación. Sea α = α1, . . . , αm un vector de enteros tal que α1 ≥ α2 . . . ≥ αm. Para cada votante, un candidato recibe α1 puntos si es clasificado en primer lugar por el votante, α2 si es clasificado en segundo lugar, etc. La puntuación sα de un candidato es el número total de puntos que recibe el candidato. La regla de Borda es la regla de puntuación con α = m−1, m−2, . . . , 0. La regla de la pluralidad es la regla de puntuación con α = 1, 0, . . . , 0. • voto único transferible (STV). La regla avanza a través de una serie de m - 1 rondas. En cada ronda, el candidato con la puntuación de pluralidad más baja (es decir, el menor número de votantes que lo clasifican en primer lugar entre los candidatos restantes) es eliminado (y cada uno de los votos para ese candidato se transfieren al siguiente candidato restante en el orden dado en ese voto). El ganador es el último candidato restante. • mayoría con segunda vuelta. En esta regla, una primera ronda elimina a todos los candidatos excepto a los dos con las puntuaciones de pluralidad más altas. Los votos se transfieren a estos como en la regla de VST, y una segunda ronda determina al ganador de estos dos. • aprobación. Cada votante etiqueta a cada candidato como aprobado o desaprobado. El candidato aprobado por el mayor número de votantes gana. • Condorcet. Para cualquier par de candidatos i y j, sea N(i, j) el número de votantes que prefieren a i sobre j. Si hay un candidato i que es preferido por la mayoría de los votantes a cualquier otro candidato (es decir, N(i, j) > N(j, i) para todo j = i, es decir, i gana en cada elección por pares), entonces el candidato i gana. El término protocolo de votación se usa a menudo para describir el mismo concepto, pero buscamos hacer una distinción clara entre la regla que mapea las preferencias a los resultados y el protocolo de comunicación/obtención utilizado para implementar esta regla. (Simpson). El puntaje maximin de i es s(i) = minj=i N(i, j), es decir, su peor desempeño en una elección por pares. El candidato con la puntuación maximin más alta gana. • Copeland. Para cualquier par de candidatos distintos i y j, sea C(i, j) = 1 si N(i, j) > N(j, i), C(i, j) = 1/2 si N(i, j) = N(j, i) y C(i, j) = 0 si N(i, j) < N(j, i). El puntaje de Copeland del candidato i es s(i) = j=i C(i, j). • taza (comparaciones binarias secuenciales). La regla de la copa se define por un árbol binario equilibrado T con un hoja por candidato, y una asignación de candidatos a hojas (cada hoja recibe un candidato). Cada nodo no hoja se le asigna el ganador de la elección por pares de los nodos hijos; el candidato asignado a la raíz gana. • Bucklin. Para cualquier candidato i y entero l, sea B(i, l) el número de votantes que clasifican al candidato i entre los l primeros candidatos. El ganador es arg mini(min{l : B(i, l) > n/2}). Es decir, si decimos que un votante aprueba a sus l candidatos principales, entonces aumentamos repetidamente l en 1 hasta que algún candidato sea aprobado por más de la mitad de los votantes, y este candidato es el ganador. • pares clasificados. Esta regla determina un orden en todos los candidatos, y el ganador es el candidato en la parte superior de este orden. Ordena todos los pares ordenados de candidatos (i, j) por N(i, j), el número de votantes que prefieren a i sobre j. Comenzando con el par (i, j) con el mayor N(i, j), aseguramos el resultado de su elección en pareja (i j). Luego, pasamos al siguiente par y bloqueamos el resultado de su elección por pares. Continuamos bloqueando cada resultado en pares que no contradiga el orden establecido hasta el momento. Enfatizamos que estas definiciones de reglas de votación no se preocupan por cómo se obtienen los votos de los votantes; todas las reglas de votación, incluidas aquellas que se definen sugestivamente en términos de rondas, son en realidad solo funciones que asignan el vector de todos los votos de los votantes a un ganador. Sin embargo, siempre hay muchas formas diferentes de obtener los votos (o las partes relevantes de estos) de los votantes. Por ejemplo, en la regla de la pluralidad con segunda vuelta, una forma de obtener los votos es pedir a cada votante que declare su orden completo de los candidatos de antemano. Alternativamente, podemos primero pedir a cada votante que declare solo su candidato más preferido; luego, sabremos los dos candidatos en la segunda vuelta, y podemos preguntar a cada votante cuál de estos dos candidatos prefiere. Por lo tanto, distinguimos entre la regla de votación (la asignación de vectores de votos a resultados) y el protocolo de comunicación (que determina cómo se obtienen realmente las partes relevantes de los votos de los votantes). El objetivo de este documento es proporcionar protocolos de comunicación eficientes para las reglas de votación recién definidas, y demostrar que no existen protocolos de comunicación más eficientes. Es interesante notar que la elección del protocolo de comunicación puede afectar el comportamiento estratégico de los votantes. Los protocolos de comunicación de múltiples etapas pueden revelar a los votantes cierta información sobre cómo están votando los demás votantes (por ejemplo, en el protocolo de comunicación de dos etapas recién dado para la pluralidad con segunda vuelta, en la segunda etapa los votantes sabrán qué dos candidatos tienen las puntuaciones de pluralidad más altas). En general, cuando los votantes reciben esa información, puede darles incentivos para votar de manera diferente a como lo harían en un protocolo de comunicación de una sola etapa en el que todos los votantes declaran sus votos completos simultáneamente. Por supuesto, incluso el protocolo de comunicación de una sola etapa no es a prueba de estrategias para ninguna regla de votación razonable, según el teorema de Gibbard-Satterthwaite [10, 19]. Sin embargo, esto no significa que no debamos preocuparnos por agregar aún más oportunidades para el voto estratégico. De hecho, muchos de los protocolos de comunicación introducidos en este documento sí presentan oportunidades adicionales para el voto estratégico, pero no tenemos espacio para discutirlo aquí. (En trabajos anteriores [8], sí proporcionamos un ejemplo donde un protocolo de obtención de información para la regla de votación por aprobación introduce el voto estratégico, y damos principios para diseñar protocolos de obtención de información que no introduzcan problemas estratégicos). Ahora que hemos revisado las reglas de votación, pasamos a una breve revisión de la teoría de la complejidad de la comunicación. 3. REVISIÓN DE ALGUNA TEORÍA DE LA COMPLEJIDAD DE LA COMUNICACIÓN En esta sección, revisamos el modelo básico de un problema de comunicación y la técnica de límite inferior de construcción de un conjunto engañoso. (El modelo básico de un problema de comunicación se debe a Yao [22]; para obtener una visión general, consulte Kushilevitz y Nisan [12].) Cada jugador 1 ≤ i ≤ n conoce (solo) la entrada xi. Juntos, buscan calcular f(x1, x2, . . . , xn). En un protocolo determinista para calcular f, en cada etapa, uno de los jugadores anuncia (a todos los demás jugadores) un bit de información basado en su propia entrada y los bits anunciados hasta el momento. Finalmente, la comunicación termina y todos los jugadores conocen f(x1, x2, . . . , xn). El objetivo es minimizar el número de bits enviados en el peor caso (sobre todos los vectores de entrada). La complejidad de comunicación determinística de un problema es el número máximo de bits enviados en el peor caso en el mejor protocolo determinístico (correcto) para resolverlo. En un protocolo no determinista, el siguiente bit a enviar puede ser elegido de manera no determinista. Para los propósitos de este documento, consideraremos un protocolo no determinista como correcto si para cada vector de entrada, existe alguna secuencia de elecciones no deterministas que los jugadores pueden hacer para que los jugadores conozcan el valor de f cuando el protocolo termina. La complejidad de comunicación no determinista de un problema es el número máximo de bits enviados en el peor caso en el mejor protocolo no determinista (correcto) para él. Ahora estamos listos para dar la definición de un conjunto engañoso. Definición 1. Un conjunto engañoso es un conjunto de vectores de entrada {(x1 1, x1 2, . . . , x1 n), (x2 1, x2 2, . . . , x2 n), . . . , (xk 1 , xk 2 , . . . , xk n) tal que para cualquier i, f(xi 1, xi 2, . . . , xi n) = f0 para alguna constante f0, pero para cualquier i = j, existe algún vector (r1, r2, . . . , rn) ∈ {i, j}n tal que f(xr1 1 , xr2 2 , . . . , xrn n ) = f0. (Es decir, podemos mezclar las entradas de los dos vectores de entrada para obtener un vector con un valor de función diferente). Se sabe que si existe un conjunto engañoso de tamaño k, entonces log k es una cota inferior en la complejidad de la comunicación (incluso en la complejidad de la comunicación no determinista) [12]. Un protocolo a prueba de estrategias es aquel en el que es del mejor interés de los jugadores reportar sus preferencias de manera veraz. Para los propósitos de este documento, f es la regla de votación que asigna los votos al candidato ganador, y xi es el voto del votante (la información que la regla de votación requeriría del votante si no hubiera posibilidad de comunicación en múltiples etapas, es decir, el candidato más preferido (mayoría), los candidatos aprobados (aprobación), o la clasificación de todos los candidatos (todos los demás protocolos)). Sin embargo, cuando obtenemos nuestros límites inferiores, f solo significará si un candidato distinguido a gana. (Es decir, f es 1 si a gana, y 0 en caso contrario). Esto fortalecerá nuestros resultados de límite inferior (porque implica que incluso averiguar si un candidato dado gana es difícil). Por lo tanto, un conjunto engañoso en nuestro contexto es un conjunto de vectores de votos de manera que a gane (no gane) con cada uno de ellos; pero para cualquier par de vectores de votos diferentes en el conjunto, hay una forma de tomar los votos de algunos votantes del primer vector y los votos de los otros del segundo vector, de manera que a no gane (gane). Para simplificar las demostraciones de nuestros límites inferiores, hacemos suposiciones como que el número de votantes n es impar en muchas de estas demostraciones. Por lo tanto, técnicamente, no demostramos el límite inferior para los pares (número de candidatos, número de votantes) (m, n) que no cumplen con estas suposiciones (por ejemplo, si hacemos la suposición anterior, entonces técnicamente no demostramos el límite inferior para ningún par (m, n) en el que n sea par). Sin embargo, siempre demostramos el límite inferior para un conjunto representativo de pares (m, n). Por ejemplo, para cada uno de nuestros límites inferiores, sucede que para infinitos valores de m, hay infinitos valores de n tales que el límite inferior se demuestra para el par (m, n). RESULTADOS Estamos listos para presentar nuestros resultados. Para cada regla de votación, primero proporcionamos un protocolo de comunicación determinista para determinar al ganador y establecer un límite superior. Luego, damos un límite inferior en la complejidad de comunicación no determinista (incluso en la complejidad de decidir si un candidato dado gana, que es una pregunta más fácil). Los límites inferiores coinciden con los límites superiores en todos los casos excepto en dos: la regla STV (límite superior O(n(log m)2); límite inferior Ω(n log m)) y la regla maximin (límite superior O(nm log m), aunque proporcionamos un protocolo no determinista que es O(nm); límite inferior Ω(nm)). Cuando discutimos una regla de votación en la que los votantes clasifican a los candidatos, representaremos una clasificación en la que el candidato c1 está en primer lugar, c2 en segundo lugar, etc., como c1 c2 . . . cm. Una preocupación posible es que en el caso de que sean posibles los empates, puede requerir mucha comunicación verificar si un candidato específico a está entre los ganadores, pero poca comunicación para producir a uno de los ganadores. Sin embargo, todos los conjuntos de engaños que utilizamos en las demostraciones tienen la propiedad de que si a gana, entonces a es el único ganador. Por lo tanto, en estos conjuntos engañosos, si se conoce a alguno de los ganadores, entonces se sabe si a es un ganador. Por lo tanto, calcular uno de los ganadores requiere al menos tanta comunicación como verificar si a está entre los ganadores. En general, cuando un problema de comunicación permite múltiples respuestas correctas para un vector de entradas dado, esto se conoce como calcular una relación en lugar de una función [12]. Sin embargo, según lo anterior, podemos restringir nuestra atención a un subconjunto del dominio donde la regla de votación realmente es una función (de un solo valor), por lo que las técnicas de cota inferior para funciones en lugar de relaciones serán suficientes. A veces, para los propósitos de una demostración, el orden interno de un subconjunto de los candidatos no importa, y en este caso no lo especificaremos. Por ejemplo, si S = {c2, c3}, entonces c1 S c4 indica que se puede utilizar tanto la clasificación c1 c2 c3 c4 como la clasificación c1 c3 c2 c4 para la prueba. Primero damos un límite superior universal. Teorema 1. La complejidad de comunicación determinística de cualquier regla de votación basada en rangos es O(nm log m). Prueba. Este límite se logra simplemente haciendo que todos comuniquen su orden completo de los candidatos (indicar el rango de un candidato individual solo requiere O(log m) bits, por lo que cada uno de los n votantes puede simplemente indicar el rango de cada uno de los m candidatos). El siguiente lema será útil en algunas de nuestras demostraciones. Lema 1. Si m divide a n, entonces log(n!) - m log((n/m)!) ≥ n(log m - 1)/2. Prueba. Si n/m = 1 (es decir, n = m), entonces esta expresión se simplifica a log(n!). Tenemos log(n!) = n i=1 log i ≥ n x=1 log(i)dx, lo cual, utilizando integración por partes, es igual a n log n − (n − 1) > n(log n − 1) = n(log m − 1) > n(log m − 1)/2. Por lo tanto, podemos asumir que n/m ≥ 2. Observamos que log(n!) = n i=1 log i = n/m−1 i=0 m j=1 log(im+j) ≥ n/m−1 i=1 m j=1 log(im) = m n/m−1 i=1 log(im), y que m log((n/m)!) = m n/m i=1 log(i). Por lo tanto, log(n!) − m log((n/m)!) ≥ m n/m−1 i=1 log(im) − m n/m i=1 log(i) = m(( n/m−1 i=1 log(im/i))−log(n/m)) = m((n/m− 1) log m−log n+log m) = n log m−m log n. Ahora, usando el hecho de que n/m ≥ 2, tenemos m log n = n(m/n) log m(n/m) = n(m/n)(log m + log(n/m)) ≤ n(1/2)(log m + log 2). Por lo tanto, log(n!) − m log((n/m)!) ≥ n log m − m log n ≥ n log m − n(1/2)(log m + log 2) = n(log m − 1)/2. Teorema 2. La complejidad de comunicación determinística de la regla de la pluralidad es O(n log m). Prueba. Indicar a uno de los candidatos solo requiere O(log m) bits, por lo que cada votante puede simplemente indicar a su candidato más preferido. Teorema 3. La complejidad de comunicación no determinista de la regla de la pluralidad es Ω(n log m) (incluso para decidir si un candidato dado a gana). Prueba. Exhibiremos un conjunto de engaño de tamaño n ! (( n m )! )m donde n = (n−1)/2. Tomar el logaritmo de esto da como resultado log(n ! )− m log((n /m)! ), por lo que el resultado se sigue del Lema 1. El conjunto de engaño estará formado por todos los vectores de votos que cumplan las siguientes restricciones: • Para cualquier 1 ≤ i ≤ n, los votantes 2i−1 y 2i votan lo mismo. • Cada candidato recibe la misma cantidad de votos de los primeros 2n = n − 1 votantes. • El último votante (votante n) vota por a. El candidato A gana con cada uno de estos vectores de votos debido al voto adicional por A del último votante. Dado que m divide a n, veamos cuántos vectores de voto hay en el conjunto engañoso. Necesitamos distribuir n pares de votantes de manera equitativa entre m candidatos, para un total de n /m pares de votantes por candidato; y hay precisamente n ! (( n m )! )m formas de hacer esto. Todo lo que queda por demostrar es que para cualquier par de vectores de votos distintos en el conjunto engañoso, podemos hacer que cada uno de los votantes vote de acuerdo con uno de estos dos vectores de manera que un candidato pierda. Sea i un número tal que los dos vectores de voto discrepan en el candidato por el cual votan los votantes 2i − 1 y 2i. Sin pérdida de generalidad, supongamos que en el primer vector de votos, estos votantes no votan por a (sino por algún otro candidato, b, en su lugar). Ahora, construye un nuevo vector de votos tomando los votos 2i − 1 y 2i del primer vector de votos, y los votos restantes del segundo vector de votos. Entonces, b recibe 2n /m + 2 votos en este vector de votación recién construido, mientras que a recibe como máximo 2n /m+1 votos. Por lo tanto, a no es el ganador en el vector de votación recién construido, y por lo tanto tenemos un conjunto de engaño correcto. Teorema 4. La complejidad de comunicación determinística de la regla de pluralidad con segunda vuelta es O(n log m). Prueba. Primero, permita que cada votante indique a su candidato más preferido usando log m bits. Después de esto, se conocen los dos candidatos en la segunda vuelta, y cada votante puede indicar cuál prefiere usando un solo bit adicional. Teorema 5. La complejidad de comunicación no determinista de la pluralidad con la regla de desempate es Ω(n log m) (incluso para decidir si un candidato dado a gana). Prueba. Exhibiremos un conjunto de engaño de tamaño n ! (( n m )! )m donde m = m/2 y n = (n − 2)/4. Tomar el logaritmo de esto da como resultado log(n !) − m log((n /m )! ), por lo que el resultado se sigue del Lema 1. Divide a los candidatos en m pares: (c1, d1), (c2, d2), . . . , (cm , dm ) donde c1 = a y d1 = b. El conjunto de engaño estará formado por todos los vectores de votos que satisfacen las siguientes restricciones: • Para cualquier 1 ≤ i ≤ n, los votantes 4i − 3 y 4i − 2 clasifican a los candidatos ck(i) a C − {a, ck(i)}, para algún candidato ck(i). (Si ck(i) = a, entonces el voto es simplemente a C − {a}.) • Para cualquier 1 ≤ i ≤ n, los votantes 4i − 1 y 4i clasifican a los candidatos dk(i) a C − {a, dk(i)} (es decir, su candidato más preferido es el candidato que está emparejado con el candidato por el que votaron los dos votantes anteriores). Una prueba intuitiva de esto es la siguiente. Podemos contar el número de permutaciones de n elementos de la siguiente manera. Primero, divide los elementos en m cubetas de tamaño n / m, de modo que si x se coloca en una cubeta de índice inferior a y, entonces x se indexará más bajo en la permutación final. Luego, decide la permutación dentro de cada cubeta (para la cual hay (n / m)! opciones por cubeta). Se deduce que n! es igual al número de formas de dividir n elementos en m contenedores de tamaño n/m, multiplicado por ((n/m)!)^m. • Cada candidato está clasificado en la parte superior de igual cantidad de los primeros 4n = n − 2 votos. • El votante 4n + 1 = n−1 clasifica a los candidatos a C−{a}. • El votante 4n + 2 = n clasifica a los candidatos b C − {b}. El candidato a gana con cada uno de estos vectores de voto: debido a los dos últimos votos, los candidatos a y b están un voto por delante de todos los demás candidatos y avanzan a la segunda vuelta, y en este punto todos los votos que tenían a otro candidato clasificado en primer lugar se transfieren a a, de modo que a gana la segunda vuelta. Dado que m divide a n, veamos cuántos vectores de voto hay en el conjunto engañoso. Necesitamos distribuir n grupos de cuatro votantes de manera equitativa entre los m pares de candidatos, y (como en la demostración del Teorema 3) hay n ! (( n m )! )m formas de hacerlo. Todo lo que queda por demostrar es que para cualquier par de vectores de votos distintos en el conjunto de engaño, podemos hacer que cada uno de los votantes vote de acuerdo con uno de estos dos vectores de tal manera que a pierda. Sea i un número tal que ck(i) no sea el mismo en ambos de estos dos vectores de votos, es decir, c1 k(i) (ck(i) en el primer vector de votos) no es igual a c2 k(i) (ck(i) en el segundo vector de votos). Sin pérdida de generalidad, supongamos que c1 k(i) = a. Ahora, construye un nuevo vector de votos tomando los votos 4i − 3, 4i − 2, 4i − 1, 4i del primer vector de votos, y los votos restantes del segundo vector de votos. En este nuevo vector de voto construido, c1 k(i) y d1 k(i) reciben cada uno 4n /m+2 votos en la primera ronda, mientras que a recibe como máximo 4n /m+1 votos. Por lo tanto, a no continúa hasta la segunda vuelta en el nuevo vector de votación construido, y por lo tanto tenemos un conjunto de engaño correcto. Teorema 6. La complejidad de comunicación no determinista de la regla de Borda es Ω(nm log m) (incluso para decidir si un candidato dado a gana). Prueba. Exhibiremos un conjunto de engaño de tamaño (m ! )n donde m = m−2 y n = (n−2)/4. Esto demostrará el teorema porque m ! es Ω(m log m), por lo que log((m ! )n ) = n log(m !) es Ω(nm log m). Para cada vector (π1, π2, . . . , πn) que consiste en n ordenamientos de todos los candidatos excepto a y otro candidato fijo b (técnicamente, los ordenamientos toman la forma de una función biunívoca πi: {1, 2, . . . , m} → C − {a, b} con πi(j) = c indicando que el candidato c es el j-ésimo en el orden representado por πi), deja que el siguiente vector de votos sea un elemento del conjunto engañoso: • Para 1 ≤ i ≤ n, deja que los votantes 4i − 3 y 4i − 2 clasifiquen a los candidatos a b πi(1) πi(2) . . . πi(m). • Para 1 ≤ i ≤ n, deja que los votantes 4i − 1 y 4i clasifiquen a los candidatos πi(m) πi(m − 1) . . . πi(1) b a. • Deja que el votante 4n + 1 = n − 1 clasifique a los candidatos a b π0(1) π0(2) . . . π0(m) (donde π0 es un orden arbitrario de los candidatos excepto a y b que es el mismo para cada elemento del conjunto engañoso). • Deja que el votante 4n + 2 = n clasifique a los candidatos π0(m) π0(m − 1) . . . π0(1) a b. Observamos que este conjunto engañoso tiene un tamaño de (m!)n, y que el candidato a gana en cada vector de votos en el conjunto engañoso (para ver por qué, observamos que para cualquier 1 ≤ i ≤ n, los votos 4i-3 y 4i-2 clasifican a los candidatos de manera exactamente opuesta a los votos 4i-1 y 4i, lo que bajo la regla de Borda significa que se cancelan entre sí; y los dos últimos votos dan un punto más a a que a cualquier otro candidato, además de b que recibe dos puntos menos que a). Todo lo que queda por demostrar es que para cualquier par de vectores de votos distintos en el conjunto de engaño, podemos hacer que cada uno de los votantes vote de acuerdo con uno de estos dos vectores de tal manera que a pierda. Que el primer vector de votos corresponda al vector (π1 1, π1 2, . . . , π1 n), y que el segundo vector de votos corresponda al vector (π2 1, π2 2, . . . , π2 n). Para algunos i, debemos tener π1 i = π2 i, de modo que para algún candidato c /∈ {a, b}, (π1 i )−1 (c) < (π2 i )−1 (c) (es decir, c está clasificado más alto en π1 i que en π2 i). Ahora, construye un nuevo vector de votos tomando los votos 4i−3 y 4i−2 del primer vector de votos, y los votos restantes del segundo vector de votos, ya que la puntuación de Borda permanece sin cambios. Sin embargo, debido a que c está clasificado más alto en π1 i que en π2 i , c recibe al menos 2 puntos más de los votos 4i−3 y 4i − 2 en el vector de votos recién construido que en el segundo vector de votos. Se deduce que c tiene una puntuación de Borda más alta que a en el vector de voto recién construido. Por lo tanto, a no es el ganador en el vector de votación recién construido, y por lo tanto tenemos un conjunto de engaño correcto. Teorema 7. La complejidad de comunicación no determinista de la regla de Copeland es Ω(nm log m) (incluso para decidir si un candidato dado a gana). Prueba. Exhibiremos un conjunto de engaño de tamaño (m ! )n donde m = (m − 2)/2 y n = (n − 2)/2. Esto demostrará el teorema porque m ! es Ω(m log m), por lo que log((m ! )n ) = n log(m !) es Ω(nm log m). Escribimos el conjunto de candidatos como la siguiente unión disjunta: C = {a, b} ∪ L ∪ R donde L = {l1, l2, . . . , lm } y R = {r1, r2, . . . , rm }. Para cada vector (π1, π2, . . . , πn) que consiste en n permutaciones de los enteros del 1 al m (πi: {1, 2, . . . , m} → {1, 2, . . . , m}), deja que el siguiente vector de votos sea un elemento del conjunto engañoso: • Para 1 ≤ i ≤ n, deja que el votante 2i − 1 clasifique a los candidatos a b lπi(1) rπi(1) lπi(2) rπi(2) . . . lπi(m) rπi(m). • Para 1 ≤ i ≤ n, deja que el votante 2i clasifique a los candidatos rπi(m) lπi(m) rπi(m −1) lπi(m −1) . . . rπi(1) lπi(1) b a. • Deja que el votante n − 1 = 2n + 1 clasifique a los candidatos a b l1 r1 l2 r2 . . . lm rm. • Deja que el votante n = 2n + 2 clasifique a los candidatos rm lm rm −1 lm −1 . . . r1 l1 a b. Observamos que este conjunto engañoso tiene tamaño (m ! )n, y que el candidato a gana en cada vector de votos en el conjunto engañoso (cada par de candidatos está empatado en su elección por pares, con la excepción de que a vence a b, de modo que a gana la elección por medio punto). Todo lo que queda por demostrar es que para cualquier par de vectores de votos distintos en el conjunto de engaño, podemos hacer que cada uno de los votantes vote de acuerdo con uno de estos dos vectores de tal manera que a pierda. Que el primer vector de votos corresponda al vector (π1 1, π1 2, . . . , π1 n), y que el segundo vector de votos corresponda al vector (π2 1, π2 2, . . . , π2 n). Para algunos i, debemos tener π1 i = π2 i, de modo que para algún j ∈ {1, 2, . . . , m}, tengamos (π1 i)−1 (j) < (π2 i)−1 (j). Ahora, construye un nuevo vector de votos tomando el voto 2i−1 del primer vector de votos, y los votos restantes del segundo vector de votos, ya que la puntuación de Copeland permanece sin cambios. Consideremos la puntuación de lj. Primero observamos que el rango de lj en el voto 2i − 1 en el vector de voto recién construido es al menos 2 más alto que en el segundo vector de voto, porque (π1 i )−1 (j) < (π2 i )−1 (j). Que D1 (lj) sea el conjunto de candidatos en L ∪ R que el votante 2i − 1 clasificó por debajo de lj en el primer vector de votos (D1 (lj) = {c ∈ L ∪ R : lj 1 2i−1 c}), y que D2 (lj) sea el conjunto de candidatos en L ∪ R que el votante 2i − 1 clasificó por debajo de lj en el segundo vector de votos (D2 (lj) = {c ∈ L ∪ R : lj 2 2i−1 c}). Entonces, se deduce que en el vector de voto recién construido, lj vence a todos los candidatos en D1 (lj) - D2 (lj) en sus elecciones de a pares (porque lj recibe un voto adicional en cada una de estas elecciones de a pares en comparación con el segundo vector de voto), y pierde contra todos los candidatos en D2 (lj) - D1 (lj) (porque lj pierde un voto en cada una de estas elecciones de a pares en comparación con el segundo vector de voto), y empata con todos los demás. Pero |D1 (lj)| − |D2 (lj)| ≥ 2, y por lo tanto |D1 (lj) − D2 (lj)| − |D2 (lj) − D1 (lj)| ≥ 2. Por lo tanto, en el vector de votos recién construido, lj tiene al menos dos victorias más en parejas que derrotas en parejas, y por lo tanto tiene al menos 1 punto más que si lj hubiera empatado todas sus elecciones en pareja. Por lo tanto, lj tiene una puntuación de Copeland más alta que a en el nuevo vector de voto construido. Por lo tanto, a no es el ganador en el vector de votación recién construido, y por lo tanto tenemos un conjunto de engaño correcto. Teorema 8. La complejidad de comunicación no determinística de la regla maximin es O(nm). Prueba. El protocolo no determinista adivinará cuál candidato w es el ganador, y, para cada otro candidato c, cuál es el candidato o(c) contra el cual c recibe su puntuación más baja en una elección por pares. Entonces, que cada votante comunique lo siguiente: • para cada candidato c = w, si prefiere a c sobre w; • para cada candidato c = w, si prefiere a c sobre o(c). Observamos que esto requiere la comunicación de 2n(m− 1) bits. Si las suposiciones fueran correctas, entonces, dejando que N(d, e) sea el número de votantes que prefieren al candidato d sobre el candidato e, deberíamos tener N(c, o(c)) < N(w, c) para cualquier c = w, c = w, lo cual demostrará que w gana la elección. Teorema 9. La complejidad de comunicación no determinista de la regla maximin es Ω(nm) (incluso para decidir si un candidato dado a gana). Prueba. Exhibiremos un conjunto de engaño de tamaño 2n m donde m = m − 2 y n = (n − 1)/4. Que b sea un candidato distinto de a. Para cada vector (S1, S2, . . . , Sn) que consiste en n subconjuntos Si ⊆ C − {a, b}, deja que el siguiente vector de votos sea un elemento del conjunto engañoso: • Para 1 ≤ i ≤ n, deja que los votantes 4i − 3 y 4i − 2 clasifiquen a los candidatos Si a C − (Si ∪ {a, b}) b. • Para 1 ≤ i ≤ n, deja que los votantes 4i − 1 y 4i clasifiquen a los candidatos b C − (Si ∪ {a, b}) a Si. • Deja que el votante 4n + 1 = n clasifique a los candidatos a b C − {a, b}. Observamos que este conjunto engañoso tiene un tamaño de (2m )n = 2n m, y que el candidato a gana en cada vector de votos en el conjunto engañoso (en cada una de las elecciones por pares, a es clasificado más alto que su oponente por 2n +1 = (n+1)/2 > n/2 votos). Todo lo que queda por demostrar es que para cualquier par de vectores de votos distintos en el conjunto de engaño, podemos hacer que cada uno de los votantes vote de acuerdo con uno de estos dos vectores de tal manera que a pierda. Que el primer vector de votos corresponda al vector (S1 1 , S1 2 , . . . , S1 n ), y que el segundo vector de votos corresponda al vector (S2 1 , S2 2 , . . . , S2 n ). Para algunos i, debemos tener S1 i = S2 i, de modo que ya sea S1 i S2 i o S2 i S1 i. Sin pérdida de generalidad, supongamos que S1 i S2 i , y sea c algún candidato en S1 i − S2 i. Ahora, construye un nuevo vector de votos tomando los votos 4i − 3 y 4i − 2 del primer vector de votos, y los votos restantes del segundo vector de votos. En este nuevo vector de votación construido, a es clasificado más alto que c por solo 2n - 1 votantes, por la siguiente razón. Mientras que los votantes 4i−3 y 4i − 2 no clasifican a c por encima de a en el segundo vector de votos (porque c /∈ S2 i ), los votantes 4i − 3 y 4i − 2 sí clasifican a c por encima de a en el primer vector de votos (porque c ∈ S1 i ). Además, en cada una de las elecciones por pares de b, b es clasificado más alto que su oponente por al menos 2n votantes. Entonces, a tiene una puntuación maximin más baja que b, por lo tanto a no es el ganador en el vector de voto recién construido, y por lo tanto tenemos un conjunto de engaño correcto. Teorema 10. La complejidad de comunicación determinística de la regla STV es O(n(log m)2). Prueba. Considera el siguiente protocolo de comunicación. Que cada votante primero anuncie a su candidato más preferido (comunicación O(n log m)). En las rondas restantes, haremos un seguimiento del candidato más preferido de cada votante entre los candidatos restantes, lo cual será suficiente para implementar la regla. Cuando se elimina al candidato c, permita que cada uno de los votantes cuyo candidato más preferido entre los candidatos restantes era c anuncie su candidato más preferido entre los candidatos restantes después de la eliminación de c. Si el candidato c fue el candidato i-ésimo en ser eliminado (es decir, quedaban m − i + 1 candidatos antes de la eliminación de c), se sigue que como máximo n/(m − i + 1) votantes tenían al candidato c como su candidato más preferido entre los candidatos restantes, y por lo tanto, el número de bits a comunicar después de la eliminación del candidato i es O((n/(m−i+1)) log m). Así, la comunicación total en este protocolo de comunicación es O(n log m + m−1 i=1 (n/(m − i + 1)) log m). Por supuesto, m−1 i=1 1/(m − i + 1) = m i=2 1/i, lo cual es O(log m). Sustituyendo en la expresión anterior, encontramos que la complejidad de comunicación es O(n(log m)2). Teorema 11. La complejidad de comunicación no determinística de la regla STV es Ω(n log m) (incluso para decidir si un candidato dado a gana). Prueba. Omitimos esta prueba debido a la restricción de espacio. De hecho, O((n/(m − i + 1)) log(m − i + 1)) también es correcto, pero no mejorará el límite. Teorema 12. La complejidad de comunicación determinística de la regla de aprobación es O(nm). Prueba. Aprobar o desaprobar a un candidato solo requiere un bit de información, por lo que cada votante puede simplemente aprobar o desaprobar a cada candidato para una comunicación total de nm bits. Teorema 13. La complejidad de comunicación no determinista de la regla de aprobación es Ω(nm) (incluso para decidir si un candidato dado a gana). Prueba. Exhibiremos un conjunto de engaño de tamaño 2n m donde m = m − 1 y n = (n − 1)/4. Para cada vector (S1, S2, . . . , Sn) que consiste en n subconjuntos Si ⊆ C - {a}, deja que el siguiente vector de votos sea un elemento del conjunto engañoso: • Para 1 ≤ i ≤ n, deja que los votantes 4i - 3 y 4i - 2 aprueben Si ∪ {a}. • Para 1 ≤ i ≤ n, deja que los votantes 4i - 1 y 4i aprueben C - (Si ∪ {a}). • Deja que el votante 4n + 1 = n apruebe {a}. Observamos que este conjunto engañoso tiene un tamaño de (2m )n = 2n m, y que el candidato a gana en cada vector de votos en el conjunto engañoso (a es aprobado por 2n + 1 votantes, mientras que cada otro candidato es aprobado solo por 2n votantes). Todo lo que queda por demostrar es que para cualquier par de vectores de votos distintos en el conjunto de engaño, podemos hacer que cada uno de los votantes vote de acuerdo con uno de estos dos vectores de tal manera que a pierda. Que el primer vector de votos corresponda al vector (S1 1 , S1 2 , . . . , S1 n ), y que el segundo vector de votos corresponda al vector (S2 1 , S2 2 , . . . , S2 n ). Para algunos i, debemos tener S1 i = S2 i, de modo que ya sea S1 i S2 i o S2 i S1 i. Sin pérdida de generalidad, supongamos que S1 i S2 i , y sea b algún candidato en S1 i − S2 i. Ahora, construye un nuevo vector de votos tomando los votos 4i − 3 y 4i − 2 del primer vector de votos, y los votos restantes del segundo vector de votos. En este nuevo vector de votación construido, a sigue siendo aprobado por 2n + 1 votos. Sin embargo, b es aprobado por 2n + 2 votos, por la siguiente razón. Mientras que los votantes 4i−3 y 4i−2 no aprueban b en el segundo vector de votación (porque b /∈ S2 i), los votantes 4i−3 y 4i−2 sí aprueban b en el primer vector de votación (porque b ∈ S1 i). Se deduce que la puntuación bs en el vector de voto recién construido es la puntuación bs en el segundo vector de voto (2n), más dos. Por lo tanto, a no es el ganador en el vector de votación recién construido, y por lo tanto tenemos un conjunto de engaño correcto. Curiosamente, se puede obtener un límite inferior de Ω(m) incluso para el problema de encontrar un candidato que sea aprobado por más de un votante [20]. Teorema 14. La complejidad de comunicación determinística de la regla de Condorcet es O(nm). Prueba. Mantenemos un conjunto de candidatos activos S que se inicializa en C. En cada etapa, elegimos dos de los candidatos activos (digamos, los dos candidatos con los índices más bajos), y permitimos que cada votante comunique cuál de los dos candidatos prefiere. (Tal etapa requiere la comunicación de n bits, uno por votante). El candidato preferido por menos de 84 votantes (el perdedor de la elección por pares) es eliminado de S. (Si la elección por pares está empatada, ambos candidatos son eliminados). Después de un máximo de m - 1 iteraciones, solo queda un candidato (o no queda ningún candidato, en cuyo caso no hay un ganador de Condorcet). Que a sea el candidato restante. Para averiguar si el candidato a es el ganador de Condorcet, permita que cada votante comunique, para cada candidato c = a, si prefiere a a c. (Esto requiere la comunicación de como máximo n(m − 1) bits). Esto es suficiente para determinar si a ganó cada una de sus elecciones por pares (y por lo tanto, si a es el ganador de Condorcet). Teorema 15. La complejidad de comunicación no determinística de la regla de Condorcet es Ω(nm) (incluso para decidir si un candidato dado a gana). Prueba. Exhibiremos un conjunto de engaño de tamaño 2n m donde m = m − 1 y n = (n − 1)/2. Para cada vector (S1, S2, . . . , Sn) que consiste en n subconjuntos Si ⊆ C − {a}, deja que el siguiente vector de votos sea un elemento del conjunto engañoso: • Para 1 ≤ i ≤ n, deja que el votante 2i − 1 clasifique a los candidatos Si a C − Si. • Para 1 ≤ i ≤ n, deja que el votante 2i clasifique a los candidatos C − Si a Si. • Deja que el votante 2n + 1 = n clasifique a los candidatos a C − {a}. Observamos que este conjunto engañoso tiene tamaño (2m )n = 2n m , y que el candidato a gana en cada vector de votos en el conjunto engañoso (a gana cada una de sus elecciones por parejas por un solo voto). Todo lo que queda por demostrar es que para cualquier par de vectores de votos distintos en el conjunto de engaño, podemos hacer que cada uno de los votantes vote de acuerdo con uno de estos dos vectores de tal manera que a pierda. Que el primer vector de votos corresponda al vector (S1 1 , S1 2 , . . . , S1 n ), y que el segundo vector de votos corresponda al vector (S2 1 , S2 2 , . . . , S2 n ). Para algunos i, debemos tener S1 i = S2 i, de modo que ya sea S1 i S2 i o S2 i S1 i. Sin pérdida de generalidad, supongamos que S1 i S2 i , y sea b algún candidato en S1 i − S2 i. Ahora, construye un nuevo vector de votos tomando el voto 2i − 1 del primer vector de votos y los votos restantes del segundo vector de votos. En este nuevo vector de votos construido, b gana su elección por pares contra a por un voto (el voto 2i − 1 coloca a b por encima de a en el nuevo vector de votos construido porque b ∈ S1 i, mientras que en el segundo vector de votos el voto 2i − 1 colocó a a por encima de b porque b /∈ S2 i). Por lo tanto, a no es el ganador de Condorcet en el vector de votación recién construido, y por lo tanto tenemos un conjunto de engaño correcto. Teorema 16. La complejidad de comunicación determinística de la regla de la taza es O(nm). Prueba. Considera el siguiente protocolo de comunicación simple. Primero, permitamos que todos los votantes se comuniquen, para cada uno de los enfrentamientos en la primera ronda, cuál de los dos candidatos prefieren. Después de esto, se conocen los emparejamientos para la segunda ronda, así que permitan que todos los votantes comuniquen qué candidato prefieren en cada emparejamiento en la segunda ronda, etc. Dado que comunicar cuál de los dos candidatos es preferido solo requiere un bit por votante, y dado que solo hay m − 1 enfrentamientos en total, este protocolo de comunicación requiere O(nm) comunicación. Teorema 17. La complejidad de comunicación no determinista de la regla de la copa es Ω(nm) (incluso para decidir si un candidato dado a gana). Prueba. Exhibiremos un conjunto engañoso de tamaño 2n m donde m = (m − 1)/2 y n = (n − 7)/2. Dado que m + 1 es una potencia de 2, de modo que un candidato recibe un pase (es decir, no se enfrenta a un oponente) en la primera ronda, sea a el candidato con el pase. De los emparejamientos de la primera ronda, dejemos que lj denote al candidato de la izquierda en el j-ésimo enfrentamiento, y dejemos que rj sea el otro candidato de la derecha. Sea L = {lj : 1 ≤ j ≤ m} y R = {rj : 1 ≤ j ≤ m}, de modo que C = L ∪ R ∪ {a}. . . . . . . . . . l r l r l r a m1 1 2 2 m Figura 1: El horario para la regla de la copa utilizada en la demostración del Teorema 17. Para cada vector (S1, S2, . . . , Sn) que consiste en n subconjuntos Si ⊆ R, dejemos que el siguiente vector de votos sea un elemento del conjunto engañoso: • Para 1 ≤ i ≤ n, dejemos que el votante 2i − 1 clasifique a los candidatos Si L a R − Si. • Para 1 ≤ i ≤ n, dejemos que el votante 2i clasifique a los candidatos R − Si L a Si. • Dejemos que los votantes 2n +1 = n−6, 2n +2 = n−5, 2n +3 = n−4 clasifiquen a los candidatos L a R. • Dejemos que los votantes 2n + 4 = n − 3, 2n + 5 = n − 2 clasifiquen a los candidatos a r1 l1 r2 l2 . . . rm lm. • Dejemos que los votantes 2n + 6 = n − 1, 2n + 7 = n clasifiquen a los candidatos rm lm rm −1 lm −1 . . . r1 l1 a. Observamos que este conjunto de engaño tiene tamaño (2m )n = 2n m. Además, el candidato a gana en cada vector de votos en el conjunto engañoso, por las siguientes razones. Cada candidato rj derrota a su oponente lj en la primera ronda. (Para cualquier 1 ≤ i ≤ n, el efecto neto de los votos 2i − 1 y 2i en la elección entre rj y lj es cero; los votos n − 6, n − 5, n − 4 prefieren a lj sobre rj, pero los votos n − 3, n − 2, n − 1, n prefieren a rj sobre lj). Además, a vence a cada rj en su elección por pares. (Para cualquier 1 ≤ i ≤ n, el efecto neto de los votos 2i − 1 y 2i en la elección por pares entre a y rj es cero; los votos n − 1, n prefieren a rj sobre a, pero los votos n − 6, n − 5, n − 4, n − 3, n − 2 todos prefieren a a rj.) Se deduce que una vencerá a todos los candidatos a los que se enfrente. Todo lo que queda por demostrar es que para cualquier par de vectores de votos distintos en el conjunto de engaño, podemos hacer que cada uno de los votantes vote de acuerdo con uno de estos dos vectores de tal manera que a pierda. Que el primer vector de votos corresponda al vector 85 (S1 1 , S1 2 , . . . , S1 n ), y que el segundo vector de votos corresponda al vector (S2 1 , S2 2 , . . . , S2 n ). Para algunos i, debemos tener S1 i = S2 i, de modo que sea S1 i S2 i o S2 i S1 i. Sin pérdida de generalidad, supongamos que S1 i S2 i , y dejemos que rj sea algún candidato en S1 i − S2 i. Ahora, construye un nuevo vector de votos tomando el voto 2i del primer vector de votos y los votos restantes del segundo vector de votos. Observamos que, mientras que en el segundo vector de votos el voto 2i prefirió a rj sobre lj (porque rj ∈ R−S2 i), en el nuevo vector de votos construido esto ya no es el caso (porque rj ∈ S1 i). Se deduce que, mientras que en el segundo vector de votos, rj venció a lj en la primera ronda por un voto, en el nuevo vector de votos construido, lj vence a rj en la primera ronda. Por lo tanto, al menos un lj avanza a la segunda ronda después de derrotar a su oponente rj. Ahora observamos que en el vector de votos recién construido, cualquier lk gana su elección de a pares contra cualquier rq con q = k. Esto se debe a que entre los primeros 2n votos, al menos n − 1 prefieren lk a rq; los votos n − 6, n − 5, n − 4 prefieren lk a rq; y, porque q = k, ya sea que los votos n − 3, n − 2 prefieran lk a rq (si k < q), o los votos n − 1, n prefieran lk a rq (si k > q). Por lo tanto, al menos n + 4 = (n + 1)/2 > n/2 votos prefieren lk a rq. Además, cualquier lk gana su elección de a uno a uno. Esto se debe a que solo los votos n − 3 y n − 2 prefieren a a lk. Se deduce que, después de la primera ronda, cualquier candidato superviviente lk solo puede perder un enfrentamiento contra otro candidato superviviente lk, por lo que uno de los lk debe ganar la elección. Por lo tanto, a no es el ganador en el vector de votación recién construido, y por lo tanto tenemos un conjunto de engaño correcto. Teorema 18. La complejidad de comunicación determinística de la regla de Bucklin es O(nm). Prueba. Sea l el entero mínimo para el cual hay un candidato que está clasificado entre los primeros l candidatos por más de la mitad de los votos. Realizaremos una búsqueda binaria para l. En cada punto, tendremos un límite inferior lL que es menor que l (inicializado en 0), y un límite superior lH que es al menos l (inicializado en m). Mientras que lH − lL > 1, continuamos averiguando si (lH − l)/2 es menor que l, después de lo cual podemos actualizar los límites. Para averiguar si un número k es menor que l, determinamos los candidatos más preferidos de cada votante k. Cada votante puede comunicar cuáles candidatos se encuentran entre sus k candidatos más preferidos usando m bits (para cada candidato, indicar si el candidato está entre los primeros k o no), pero debido a que la búsqueda binaria requiere log m iteraciones, esto nos da un límite superior de O((log m)nm), que no es lo suficientemente fuerte. Sin embargo, si lL < k < lH, y ya conocemos los candidatos más preferidos de un votante lL, así como sus candidatos más preferidos de lH, entonces el votante ya no necesita comunicar si los candidatos más preferidos de lL están entre sus k candidatos más preferidos (porque deben estarlo), y ya no necesita comunicar si los m−lH candidatos menos preferidos están entre sus k candidatos más preferidos (porque no pueden estarlo). Por lo tanto, el votante solo necesita comunicar lH −lL bits en cualquier etapa dada. Debido a que en cada etapa, lH − lL se reduce a la mitad (aproximadamente), cada votante en total comunica solo (aproximadamente) m + m/2 + m/4 + . . . ≤ 2m bits. Teorema 19. La complejidad de comunicación no determinista de la regla de Bucklin es Ω(nm) (incluso para decidir si un candidato dado a gana). Prueba. Exhibiremos un conjunto de engaño de tamaño 2n m donde m = (m−1)/2 y n = n/2. Escribimos el conjunto de candidatos como la siguiente unión disjunta: C = {a} ∪ L ∪ R donde L = {l1, l2, . . . , lm } y R = {r1, r2, . . . , rm }. Para cualquier subconjunto S ⊆ {1, 2, . . . , m}, sea L(S) = {li : i ∈ S} y sea R(S) = {ri : i ∈ S}. Para cada vector (S1, S2, . . . , Sn) que consiste en n conjuntos Si ⊆ {1, 2, . . . , m}, dejemos que el siguiente vector de votos sea un elemento del conjunto engañoso: • Para 1 ≤ i ≤ n, dejemos que el votante 2i − 1 clasifique a los candidatos L(Si) R − R(Si) a L − L(Si) R(Si). • Para 1 ≤ i ≤ n, dejemos que el votante 2i clasifique a los candidatos L − L(Si) R(Si) a L(Si) R − R(Si). Observamos que este conjunto engañoso tiene tamaño (2m )n = 2n m, y que el candidato a gana en cada vector de votos en el conjunto engañoso, por la siguiente razón. Cada candidato en C − {a} está clasificado entre los mejores m candidatos por exactamente la mitad de los votantes (lo cual no es suficiente para ganar). Por lo tanto, necesitamos analizar a los m +1 candidatos principales de los votantes, y a es clasificado en el puesto m +1 por todos los votantes. Todo lo que queda por demostrar es que para cualquier par de vectores de votos distintos en el conjunto de engaño, podemos hacer que cada uno de los votantes vote de acuerdo con uno de estos dos vectores de tal manera que a pierda. Que el primer vector de votos corresponda al vector (S1 1 , S1 2 , . . . , S1 n ), y que el segundo vector de votos corresponda al vector (S2 1 , S2 2 , . . . , S2 n ). Para algunos i, debemos tener S1 i = S2 i, de modo que sea S1 i S2 i o S2 i S1 i. Sin pérdida de generalidad, supongamos que S1 i S2 i , y sea j algún entero en S1 i − S2 i. Ahora, construye un nuevo vector de votos tomando el voto 2i − 1 del primer vector de votos, y los votos restantes del segundo vector de votos. En este nuevo vector de votos construido, a sigue siendo clasificado en el m + 1-ésimo lugar por todos los votos. Sin embargo, lj está clasificado entre los mejores m candidatos por n + 1 = n/2 + 1 votos. Esto se debe a que mientras que el voto 2i − 1 no clasifica a lj entre los m mejores candidatos en el segundo vector de votos (porque j /∈ S2 i , tenemos que lj /∈ L(S2 i )), el voto 2i − 1 sí clasifica a lj entre los m mejores candidatos en el primer vector de votos (porque j ∈ S1 i , tenemos que lj ∈ L(S1 i )). Por lo tanto, a no es el ganador en el vector de votación recién construido, y por lo tanto tenemos un conjunto de engaño correcto. Teorema 20. La complejidad de comunicación no determinista de la regla de pares clasificados es Ω(nm log m) (incluso para decidir si un candidato dado a gana). Prueba. Omitimos esta prueba debido a limitaciones de espacio. 5. DISCUSIÓN Un obstáculo clave para utilizar la votación como método de agregación de preferencias es la carga de comunicación que implica una elección para los votantes. Al reducir esta carga, puede ser factible llevar a cabo más elecciones sobre más temas. En última instancia, esto podría llevar a un cambio de un gobierno representativo a un sistema en el que la mayoría de los asuntos se decidan mediante referendos, una verdadera e-democracia. En este artículo, analizamos la complejidad de comunicación de las reglas de votación comunes. Conocer qué reglas de votación requieren poca comunicación es especialmente importante cuando el tema a votar es de tan poca importancia que se cumple lo siguiente: las partes involucradas están dispuestas a aceptar una regla que tiende a producir resultados ligeramente menos representativos de las preferencias de los votantes, si esta regla reduce significativamente la carga de comunicación para los votantes. La siguiente tabla resume los resultados que obtuvimos. Regla Límite inferior Límite superior pluralidad Ω(n log m) O(n log m) pluralidad con segunda vuelta Ω(n log m) O(n log m) Voto único transferible (STV) Ω(n log m) O(n(log m)2) Condorcet Ω(nm) O(nm) aprobación Ω(nm) O(nm) Bucklin Ω(nm) O(nm) taza Ω(nm) O(nm) maximin Ω(nm) O(nm) Borda Ω(nm log m) O(nm log m) Copeland Ω(nm log m) O(nm log m) pares clasificados Ω(nm log m) O(nm log m) Complejidad de comunicación de las reglas de votación, ordenadas de menor a mayor. Todos los límites superiores son deterministas (con la excepción de maximin, para el cual el mejor límite superior determinista que demostramos es O(nm log m)). Todos los límites inferiores se mantienen incluso para la comunicación no determinista y solo para determinar si un candidato dado a es el ganador. Una área de investigación futura es estudiar qué sucede cuando restringimos nuestra atención a protocolos de comunicación que no revelan información estratégicamente útil. Esta restricción puede invalidar algunos de los límites superiores que derivamos utilizando protocolos de comunicación multietapa. Además, todos nuestros límites son límites en el peor de los casos. Puede ser posible superar estos límites cuando la distribución de votos tiene una estructura adicional. Al decidir qué regla de votación utilizar para una elección, hay muchas consideraciones a tener en cuenta. Las reglas de votación que estudiamos en este documento son las más comunes que han resistido la prueba del tiempo. Una forma de seleccionar entre estas reglas es considerar los resultados recientes sobre complejidad. La tabla anterior muestra que desde una perspectiva de complejidad de comunicación, la pluralidad, la pluralidad con segunda vuelta y el voto único transferible son preferibles. Sin embargo, la pluralidad tiene la propiedad no deseada de que es fácil de manipular computacionalmente mediante votación estratégica [3, 7]. La pluralidad con segunda vuelta es NP-duro de manipular por una coalición de votantes ponderados, o por un individuo que enfrenta incertidumbre correlacionada sobre los votos de los demás [7, 6]. STV es NP-duro de manipular en esos escenarios también [7], pero también por un individuo con conocimiento perfecto de los votos de los demás (cuando el número de candidatos es ilimitado) [2]. Por lo tanto, STV es más robusto, aunque puede requerir ligeramente más comunicación en el peor de los casos según la tabla anterior. Sin embargo, otros criterios de selección son la complejidad computacional para determinar si se ha obtenido suficiente información para declarar un ganador, y la de determinar la secuencia óptima de consultas [8]. 6. REFERENCIAS [1] Lawrence Ausubel y Paul Milgrom. Subastas ascendentes con ofertas de paquetes. Fronteras de la Economía Teórica, 1, 2002. No. 1, Artículo 1. [2] John Bartholdi, III y James Orlin. El voto único transferible resiste el voto estratégico. Elección Social y Bienestar, 8(4):341-354, 1991. [3] John Bartholdi, III, Craig Tovey y Michael Trick. La dificultad computacional de manipular una elección. Elección Social y Bienestar, 6(3):227-241, 1989. [4] Avrim Blum, Jeffrey Jackson, Tuomas Sandholm y Martin Zinkevich. Elicitación de preferencias y aprendizaje de consultas. Revista de Investigación en Aprendizaje Automático, 5:649-667, 2004. [5] Wolfram Conen y Tuomas Sandholm. Elicitación de preferencias en subastas combinatorias: Resumen extendido. En Actas de la Conferencia ACM sobre Comercio Electrónico (ACM-EC), páginas 256-259, 2001. [6] Vincent Conitzer, Jerome Lang y Tuomas Sandholm. ¿Cuántos candidatos se necesitan para que las elecciones sean difíciles de manipular? En Aspectos Teóricos de la Racionalidad y el Conocimiento (TARK), páginas 201-214, 2003. [7] Vincent Conitzer y Tuomas Sandholm. Complejidad de manipular elecciones con pocos candidatos. En Actas de la Conferencia Nacional de Inteligencia Artificial (AAAI), páginas 314-319, 2002. [8] Vincent Conitzer y Tuomas Sandholm. Elicitación de votos: Complejidad y estrategia de prueba. En Actas de la Conferencia Nacional de Inteligencia Artificial (AAAI), páginas 392-397, 2002. [9] Sven de Vries, James Schummer y Rakesh V. Vohra. En subastas ascendentes de objetos heterogéneos, 2003. Borrador. [10] Allan Gibbard. Manipulación de esquemas de votación. Econometrica, 41:587-602, 1973. [11] Benoit Hudson y Tuomas Sandholm. Efectividad de tipos de consultas y políticas para la obtención de preferencias en subastas combinatorias. En la Conferencia Internacional sobre Agentes Autónomos y Sistemas Multiagente (AAMAS), páginas 386-393, 2004. [12] E Kushilevitz y N Nisan. Complejidad de la comunicación. Cambridge University Press, 1997. [13] Sebasti´en Lahaie y David Parkes. Aplicando algoritmos de aprendizaje a la obtención de preferencias. En Actas de la Conferencia de la ACM sobre Comercio Electrónico, 2004. [14] Noam Nisan e Ilya Segal. Los requisitos de comunicación de asignaciones eficientes y precios de apoyo. Revista de Teoría Económica, 2005. Próximamente. [15] David Parkes. iBundle: Una subasta de paquetes de precio ascendente eficiente. En Actas de la Conferencia de la ACM sobre Comercio Electrónico (ACM-EC), páginas 148-157, 1999. [16] Tuomas Sandholm. Una implementación del protocolo de red de contratos basada en cálculos de costos marginales. En Actas de la Conferencia Nacional de Inteligencia Artificial (AAAI), páginas 256-262, 1993. [17] Tuomas Sandholm y Craig Boutilier. Elicitación de preferencias en subastas combinatorias. En Peter Cramton, Yoav Shoham y Richard Steinberg, editores, Subastas Combinatorias, capítulo 10. MIT Press, 2005. [18] Paolo Santi, Vincent Conitzer y Tuomas Sandholm. Hacia una caracterización de la obtención de preferencias polinomiales con consultas de valor en subastas combinatorias. En la Conferencia sobre Teoría del Aprendizaje (COLT), páginas 1-16, 2004. [19] Mark Satterthwaite. In Spanish, the translation would be: \"Inmutabilidad estratégica y condiciones de Arrow: teoremas de existencia y correspondencia para procedimientos de votación y funciones de bienestar social.\" Revista de Teoría Económica, 10:187-217, 1975. [20] Ilya Segal. Los requisitos de comunicación de las reglas de elección social y los conjuntos de presupuesto de apoyo, 2004. Borrador. Presentado en el Taller DIMACS sobre Problemas Computacionales en el Diseño de Subastas, Universidad de Rutgers, Nueva Jersey, EE. UU. [21] Peter Wurman y Michael Wellman. AkBA: Una subasta combinatoria progresiva y de precio anónimo. En Actas de la Conferencia de la ACM sobre Comercio Electrónico (ACM-EC), páginas 21-29, 2000. [22] A. C. Yao. Algunas preguntas de complejidad relacionadas con la computación distribuida. En Actas del 11º simposio de ACM sobre teoría de la computación (STOC), páginas 209-213, 1979. [23] Martin Zinkevich, Avrim Blum y Tuomas Sandholm. En la obtención de preferencias en tiempo polinómico con consultas de valor. En Actas de la Conferencia de la ACM sobre Comercio Electrónico (ACM-EC), páginas 176-185, 2003. 87",
    "original_sentences": [
        "Communication Complexity of Common Voting Rules∗ Vincent Conitzer Carnegie Mellon University 5000 Forbes Avenue Pittsburgh, PA 15213, USA conitzer@cs.cmu.edu Tuomas Sandholm Carnegie Mellon University 5000 Forbes Avenue Pittsburgh, PA 15213, USA sandholm@cs.cmu.edu ABSTRACT We determine the communication complexity of the common voting rules.",
        "The rules (sorted by their communication complexity from low to high) are plurality, plurality with runoff, single transferable vote (STV), Condorcet, approval, Bucklin, cup, maximin, Borda, Copeland, and ranked pairs.",
        "For each rule, we first give a deterministic communication protocol and an upper bound on the number of bits communicated in it; then, we give a lower bound on (even the nondeterministic) communication requirements of the voting rule.",
        "The bounds match for all voting rules except STV and maximin.",
        "Categories and Subject Descriptors F.2 [Theory of Computation]: Analysis of Algorithms and Problem Complexity; J.4 [Computer Applications]: Social and Behavioral Sciences-Economics General Terms Algorithms, Economics, Theory 1.",
        "INTRODUCTION One key factor in the practicality of any preference aggregation rule is its communication burden.",
        "To successfully aggregate the agents preferences, it is usually not necessary for all the agents to report all of their preference information.",
        "Clever protocols that elicit the agents preferences partially and sequentially have the potential to dramatically reduce the required communication.",
        "This has at least the following advantages: • It can make preference aggregation feasible in settings where the total amount of preference information is too large to communicate. • Even when communicating all the preference information is feasible, reducing the communication requirements lessens the burden placed on the agents.",
        "This is especially true when the agents, rather than knowing all their preferences in advance, need to invest effort (such as computation or information gathering) to determine their preferences [16]. • It preserves (some of) the agents privacy.",
        "Most of the work on reducing the communication burden in preference aggregation has focused on resource allocation settings such as combinatorial auctions, in which an auctioneer auctions off a number of (possibly distinct) items in a single event.",
        "Because in a combinatorial auction, bidders can have separate valuations for each of an exponential number of possible bundles of items, this is a setting in which reducing the communication burden is especially crucial.",
        "This can be accomplished by supplementing the auctioneer with an elicitor that incrementally elicits parts of the bidders preferences on an as-needed basis, based on what the bidders have revealed about their preferences so far, as suggested by Conen and Sandholm [5].",
        "For example, the elicitor can ask for a bidders value for a specific bundle (value queries), which of two bundles the bidder prefers (order queries), which bundle he ranks kth or what the rank of a given bundle is (rank queries), which bundle he would purchase given a particular vector of prices (demand queries), etc.-until (at least) the final allocation can be determined.",
        "Experimentally, this yields drastic savings in preference revelation [11].",
        "Furthermore, if the agents valuation functions are drawn from certain natural subclasses, the elicitation problem can be solved using only polynomially many queries even in the worst case [23, 4, 13, 18, 14].",
        "For a review of preference elicitation in combinatorial auctions, see [17].",
        "Ascending combinatorial auctions are a well-known special form of preference elicitation, where the elicitor asks demand queries with increasing prices [15, 21, 1, 9].",
        "Finally, resource 78 allocation problems have also been studied from a communication complexity viewpoint, thereby deriving lower bounds on the required communication.",
        "For example, Nisan and Segal show that exponential communication is required even to obtain a surplus greater than that obtained by auctioning off all objects as a single bundle [14].",
        "Segal also studies social choice rules in general, and shows that for a large class of social choice rules, supporting budget sets must be revealed such that if every agent prefers the same outcome in her budget set, this proves the optimality of that outcome.",
        "Segal then uses this characterization to prove bounds on the communication required in resource allocation as well as matching settings [20].",
        "In this paper, we will focus on the communication requirements of a generally applicable subclass of social choice rules, commonly known as voting rules.",
        "In a voting setting, there is a set of candidate outcomes over which the voters express their preferences by submitting a vote (typically, a ranking of the candidates), and the winner (that is, the chosen outcome) is determined based on these votes.",
        "The communication required by voting rules can be large either because the number of voters is large (such as, for example, in national elections), or because the number of candidates is large (for example, the agents can vote over allocations of a number of resources), or both.",
        "Prior work [8] has studied elicitation in voting, studying how computationally hard it is to decide whether a winner can be determined with the information elicited so far, as well as how hard it is to find the optimal sequence of queries given perfect suspicions about the voters preferences.",
        "In addition, that paper discusses strategic (game-theoretic) issues introduced by elicitation.",
        "In contrast, in this paper, we are concerned with the worst-case number of bits that must be communicated to execute a given voting rule, when nothing is known in advance about the voters preferences.",
        "We determine the communication complexity of the common voting rules.",
        "For each rule, we first give an upper bound on the (deterministic) communication complexity by providing a communication protocol for it and analyzing how many bits need to be transmitted in this protocol. (Segals results [20] do not apply to most voting rules because most voting rules are not intersectionmonotonic (or even monotonic).1 ) For many of the voting rules under study, it turns out that one cannot do better than simply letting each voter immediately communicate all her (potentially relevant) information.",
        "However, for some rules (such as plurality with runoff, STV and cup) there is a straightforward multistage communication protocol that, with some analysis, can be shown to significantly outperform the immediate communication of all (potentially relevant) information.",
        "Finally, for some rules (such as the Condorcet and Bucklin rules), we need to introduce a more complex communication protocol to achieve the best possible upper 1 For two of the rules that we study that are intersectionmonotonic, namely the approval and Condorcet rules, Segals results can in fact be used to give alternative proofs of our lower bounds.",
        "We only give direct proofs for these rules here because 1) these direct proofs are among the easier ones in this paper, 2) the alternative proofs are nontrivial even given Segals results, and 3) a space constraint applies.",
        "However, we hope to also include the alternative proofs in a later version. bound.",
        "After obtaining the upper bounds, we show that they are tight by giving matching lower bounds on (even the nondeterministic) communication complexity of each voting rule.",
        "There are two exceptions: STV, for which our upper and lower bounds are apart by a factor log m; and maximin, for which our best deterministic upper bound is also a factor log m above the (nondeterministic) lower bound, although we give a nondeterministic upper bound that matches the lower bound. 2. REVIEW OF VOTING RULES In this section, we review the common voting rules that we study in this paper.",
        "A voting rule2 is a function mapping a vector of the n voters votes (i.e. preferences over candidates) to one of the m candidates (the winner) in the candidate set C. In some cases (such as the Condorcet rule), the rule may also declare that no winner exists.",
        "We do not concern ourselves with what happens in case of a tie between candidates (our lower bounds hold regardless of how ties are broken, and the communication protocols used for our upper bounds do not attempt to break the ties).",
        "All of the rules that we study are rank-based rules, which means that a vote is defined as an ordering of the candidates (with the exception of the plurality rule, for which a vote is a single candidate, and the approval rule, for which a vote is a subset of the candidates).",
        "We will consider the following voting rules. (For rules that define a score, the candidate with the highest score wins.) • scoring rules.",
        "Let α = α1, . . . , αm be a vector of integers such that α1 ≥ α2 . . . ≥ αm.",
        "For each voter, a candidate receives α1 points if it is ranked first by the voter, α2 if it is ranked second etc.",
        "The score sα of a candidate is the total number of points the candidate receives.",
        "The Borda rule is the scoring rule with α = m−1, m−2, . . . , 0 .",
        "The plurality rule is the scoring rule with α = 1, 0, . . . , 0 . • single transferable vote (STV).",
        "The rule proceeds through a series of m − 1 rounds.",
        "In each round, the candidate with the lowest plurality score (that is, the least number of voters ranking it first among the remaining candidates) is eliminated (and each of the votes for that candidate transfer to the next remaining candidate in the order given in that vote).",
        "The winner is the last remaining candidate. • plurality with run-off.",
        "In this rule, a first round eliminates all candidates except the two with the highest plurality scores.",
        "Votes are transferred to these as in the STV rule, and a second round determines the winner from these two. • approval.",
        "Each voter labels each candidate as either approved or disapproved.",
        "The candidate approved by the greatest number of voters wins. • Condorcet.",
        "For any two candidates i and j, let N(i, j) be the number of voters who prefer i to j.",
        "If there is a candidate i that is preferred to any other candidate by a majority of the voters (that is, N(i, j) > N(j, i) for all j = i-that is, i wins every pairwise election), then candidate i wins. 2 The term voting protocol is often used to describe the same concept, but we seek to draw a sharp distinction between the rule mapping preferences to outcomes, and the communication/elicitation protocol used to implement this rule. 79 • maximin (aka.",
        "Simpson).",
        "The maximin score of i is s(i) = minj=i N(i, j)-that is, is worst performance in a pairwise election.",
        "The candidate with the highest maximin score wins. • Copeland.",
        "For any two distinct candidates i and j, let C(i, j) = 1 if N(i, j) > N(j, i), C(i, j) = 1/2 if N(i, j) = N(j, i) and C(i, j) = 0 if N(i, j) < N(j, i).",
        "The Copeland score of candidate i is s(i) = j=i C(i, j). • cup (sequential binary comparisons).",
        "The cup rule is defined by a balanced3 binary tree T with one leaf per candidate, and an assignment of candidates to leaves (each leaf gets one candidate).",
        "Each non-leaf node is assigned the winner of the pairwise election of the nodes children; the candidate assigned to the root wins. • Bucklin.",
        "For any candidate i and integer l, let B(i, l) be the number of voters that rank candidate i among the top l candidates.",
        "The winner is arg mini(min{l : B(i, l) > n/2}).",
        "That is, if we say that a voter approves her top l candidates, then we repeatedly increase l by 1 until some candidate is approved by more than half the voters, and this candidate is the winner. • ranked pairs.",
        "This rule determines an order on all the candidates, and the winner is the candidate at the top of this order.",
        "Sort all ordered pairs of candidates (i, j) by N(i, j), the number of voters who prefer i to j.",
        "Starting with the pair (i, j) with the highest N(i, j), we lock in the result of their pairwise election (i j).",
        "Then, we move to the next pair, and we lock the result of their pairwise election.",
        "We continue to lock every pairwise result that does not contradict the ordering established so far.",
        "We emphasize that these definitions of voting rules do not concern themselves with how the votes are elicited from the voters; all the voting rules, including those that are suggestively defined in terms of rounds, are in actuality just functions mapping the vector of all the voters votes to a winner.",
        "Nevertheless, there are always many different ways of eliciting the votes (or the relevant parts thereof) from the voters.",
        "For example, in the plurality with runoff rule, one way of eliciting the votes is to ask every voter to declare her entire ordering of the candidates up front.",
        "Alternatively, we can first ask every voter to declare only her most preferred candidate; then, we will know the two candidates in the runoff, and we can ask every voter which of these two candidates she prefers.",
        "Thus, we distinguish between the voting rule (the mapping from vectors of votes to outcomes) and the communication protocol (which determines how the relevant parts of the votes are actually elicited from the voters).",
        "The goal of this paper is to give efficient communication protocols for the voting rules just defined, and to prove that there do not exist any more efficient communication protocols.",
        "It is interesting to note that the choice of the communication protocol may affect the strategic behavior of the voters.",
        "Multistage communication protocols may reveal to the voters some information about how the other voters are voting (for example, in the two-stage communication protocol just given for plurality with runoff, in the second stage voters 3 Balanced means that the difference in depth between two leaves can be at most one. will know which two candidates have the highest plurality scores).",
        "In general, when the voters receive such information, it may give them incentives to vote differently than they would have in a single-stage communication protocol in which all voters declare their entire votes simultaneously.",
        "Of course, even the single-stage communication protocol is not strategy-proof4 for any reasonable voting rule, by the Gibbard-Satterthwaite theorem [10, 19].",
        "However, this does not mean that we should not be concerned about adding even more opportunities for strategic voting.",
        "In fact, many of the communication protocols introduced in this paper do introduce additional opportunities for strategic voting, but we do not have the space to discuss this here. (In prior work [8], we do give an example where an elicitation protocol for the approval voting rule introduces strategic voting, and give principles for designing elicitation protocols that do not introduce strategic problems.)",
        "Now that we have reviewed voting rules, we move on to a brief review of communication complexity theory. 3. REVIEW OF SOME COMMUNICATION COMPLEXITY THEORY In this section, we review the basic model of a communication problem and the lower-bounding technique of constructing a fooling set. (The basic model of a communication problem is due to Yao [22]; for an overview see Kushilevitz and Nisan [12].)",
        "Each player 1 ≤ i ≤ n knows (only) input xi.",
        "Together, they seek to compute f(x1, x2, . . . , xn).",
        "In a deterministic protocol for computing f, in each stage, one of the players announces (to all other players) a bit of information based on her own input and the bits announced so far.",
        "Eventually, the communication terminates and all players know f(x1, x2, . . . , xn).",
        "The goal is to minimize the worst-case (over all input vectors) number of bits sent.",
        "The deterministic communication complexity of a problem is the worstcase number of bits sent in the best (correct) deterministic protocol for it.",
        "In a nondeterministic protocol, the next bit to be sent can be chosen nondeterministically.",
        "For the purposes of this paper, we will consider a nondeterministic protocol correct if for every input vector, there is some sequence of nondeterministic choices the players can make so that the players know the value of f when the protocol terminates.",
        "The nondeterministic communication complexity of a problem is the worst-case number of bits sent in the best (correct) nondeterministic protocol for it.",
        "We are now ready to give the definition of a fooling set.",
        "Definition 1.",
        "A fooling set is a set of input vectors {(x1 1, x1 2, . . . , x1 n), (x2 1, x2 2, . . . , x2 n), . . . , (xk 1 , xk 2 , . . . , xk n) such that for any i, f(xi 1, xi 2, . . . , xi n) = f0 for some constant f0, but for any i = j, there exists some vector (r1, r2, . . . , rn) ∈ {i, j}n such that f(xr1 1 , xr2 2 , . . . , xrn n ) = f0. (That is, we can mix the inputs from the two input vectors to obtain a vector with a different function value.)",
        "It is known that if a fooling set of size k exists, then log k is a lower bound on the communication complexity (even the nondeterministic communication complexity) [12]. 4 A strategy-proof protocol is one in which it is in the players best interest to report their preferences truthfully. 80 For the purposes of this paper, f is the voting rule that maps the votes to the winning candidate, and xi is voter is vote (the information that the voting rule would require from the voter if there were no possibility of multistage communication-i.e. the most preferred candidate (plurality), the approved candidates (approval), or the ranking of all the candidates (all other protocols)).",
        "However, when we derive our lower bounds, f will only signify whether a distinguished candidate a wins. (That is, f is 1 if a wins, and 0 otherwise.)",
        "This will strengthen our lower bound results (because it implies that even finding out whether one given candidate wins is hard).5 Thus, a fooling set in our context is a set of vectors of votes so that a wins (does not win) with each of them; but for any two different vote vectors in the set, there is a way of taking some voters votes from the first vector and the others votes from the second vector, so that a does not win (wins).",
        "To simplify the proofs of our lower bounds, we make assumptions such as the number of voters n is odd in many of these proofs.",
        "Therefore, technically, we do not prove the lower bound for (number of candidates, number of voters) pairs (m, n) that do not satisfy these assumptions (for example, if we make the above assumption, then we technically do not prove the lower bound for any pair (m, n) in which n is even).",
        "Nevertheless, we always prove the lower bound for a representative set of (m, n) pairs.",
        "For example, for every one of our lower bounds it is the case that for infinitely many values of m, there are infinitely many values of n such that the lower bound is proved for the pair (m, n). 4.",
        "RESULTS We are now ready to present our results.",
        "For each voting rule, we first give a deterministic communication protocol for determining the winner to establish an upper bound.",
        "Then, we give a lower bound on the nondeterministic communication complexity (even on the complexity of deciding whether a given candidate wins, which is an easier question).",
        "The lower bounds match the upper bounds in all but two cases: the STV rule (upper bound O(n(log m)2 ); lower bound Ω(n log m)) and the maximin rule (upper bound O(nm log m), although we do give a nondeterministic protocol that is O(nm); lower bound Ω(nm)).",
        "When we discuss a voting rule in which the voters rank the candidates, we will represent a ranking in which candidate c1 is ranked first, c2 is ranked second, etc. as c1 c2 . . . cm. 5 One possible concern is that in the case where ties are possible, it may require much communication to verify whether a specific candidate a is among the winners, but little communication to produce one of the winners.",
        "However, all the fooling sets we use in the proofs have the property that if a wins, then a is the unique winner.",
        "Therefore, in these fooling sets, if one knows any one of the winners, then one knows whether a is a winner.",
        "Thus, computing one of the winners requires at least as much communication as verifying whether a is among the winners.",
        "In general, when a communication problem allows multiple correct answers for a given vector of inputs, this is known as computing a relation rather than a function [12].",
        "However, as per the above, we can restrict our attention to a subset of the domain where the voting rule truly is a (single-valued) function, and hence lower bounding techniques for functions rather than relations will suffice.",
        "Sometimes for the purposes of a proof the internal ranking of a subset of the candidates does not matter, and in this case we will not specify it.",
        "For example, if S = {c2, c3}, then c1 S c4 indicates that either the ranking c1 c2 c3 c4 or the ranking c1 c3 c2 c4 can be used for the proof.",
        "We first give a universal upper bound.",
        "Theorem 1.",
        "The deterministic communication complexity of any rank-based voting rule is O(nm log m).",
        "Proof.",
        "This bound is achieved by simply having everyone communicate their entire ordering of the candidates (indicating the rank of an individual candidate requires only O(log m) bits, so each of the n voters can simply indicate the rank of each of the m candidates).",
        "The next lemma will be useful in a few of our proofs.",
        "Lemma 1.",
        "If m divides n, then log(n! )−m log((n/m)!) ≥ n(log m − 1)/2.",
        "Proof.",
        "If n/m = 1 (that is, n = m), then this expression simplifies to log(n!).",
        "We have log(n!) = n i=1 log i ≥ n x=1 log(i)dx, which, using integration by parts, is equal to n log n − (n − 1) > n(log n − 1) = n(log m − 1) > n(log m − 1)/2.",
        "So, we can assume that n/m ≥ 2.",
        "We observe that log(n!) = n i=1 log i = n/m−1 i=0 m j=1 log(im+j) ≥ n/m−1 i=1 m j=1 log(im) = m n/m−1 i=1 log(im), and that m log((n/m)!) = m n/m i=1 log(i).",
        "Therefore, log(n!) − m log((n/m)!) ≥ m n/m−1 i=1 log(im) − m n/m i=1 log(i) = m(( n/m−1 i=1 log(im/i))−log(n/m)) = m((n/m− 1) log m−log n+log m) = n log m−m log n. Now, using the fact that n/m ≥ 2, we have m log n = n(m/n) log m(n/m) = n(m/n)(log m + log(n/m)) ≤ n(1/2)(log m + log 2).",
        "Thus, log(n!) − m log((n/m)!) ≥ n log m − m log n ≥ n log m − n(1/2)(log m + log 2) = n(log m − 1)/2.",
        "Theorem 2.",
        "The deterministic communication complexity of the plurality rule is O(n log m).",
        "Proof.",
        "Indicating one of the candidates requires only O(log m) bits, so each voter can simply indicate her most preferred candidate.",
        "Theorem 3.",
        "The nondeterministic communication complexity of the plurality rule is Ω(n log m) (even to decide whether a given candidate a wins).",
        "Proof.",
        "We will exhibit a fooling set of size n ! (( n m )! )m where n = (n−1)/2.",
        "Taking the logarithm of this gives log(n ! )− m log((n /m)! ), so the result follows from Lemma 1.",
        "The fooling set will consist of all vectors of votes satisfying the following constraints: • For any 1 ≤ i ≤ n , voters 2i−1 and 2i vote the same. 81 • Every candidate receives equally many votes from the first 2n = n − 1 voters. • The last voter (voter n) votes for a.",
        "Candidate a wins with each one of these vote vectors because of the extra vote for a from the last voter.",
        "Given that m divides n , let us see how many vote vectors there are in the fooling set.",
        "We need to distribute n voter pairs evenly over m candidates, for a total of n /m voter pairs per candidate; and there are precisely n ! (( n m )! )m ways of doing this.6 All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses.",
        "Let i be a number such that the two vote vectors disagree on the candidate for which voters 2i − 1 and 2i vote.",
        "Without loss of generality, suppose that in the first vote vector, these voters do not vote for a (but for some other candidate, b, instead).",
        "Now, construct a new vote vector by taking votes 2i − 1 and 2i from the first vote vector, and the remaining votes from the second vote vector.",
        "Then, b receives 2n /m + 2 votes in this newly constructed vote vector, whereas a receives at most 2n /m+1 votes.",
        "So, a is not the winner in the newly constructed vote vector, and hence we have a correct fooling set.",
        "Theorem 4.",
        "The deterministic communication complexity of the plurality with runoff rule is O(n log m).",
        "Proof.",
        "First, let every voter indicate her most preferred candidate using log m bits.",
        "After this, the two candidates in the runoff are known, and each voter can indicate which one she prefers using a single additional bit.",
        "Theorem 5.",
        "The nondeterministic communication complexity of the plurality with runoff rule is Ω(n log m) (even to decide whether a given candidate a wins).",
        "Proof.",
        "We will exhibit a fooling set of size n ! (( n m )! )m where m = m/2 and n = (n − 2)/4.",
        "Taking the logarithm of this gives log(n !) − m log((n /m )! ), so the result follows from Lemma 1.",
        "Divide the candidates into m pairs: (c1, d1), (c2, d2), . . . , (cm , dm ) where c1 = a and d1 = b.",
        "The fooling set will consist of all vectors of votes satisfying the following constraints: • For any 1 ≤ i ≤ n , voters 4i − 3 and 4i − 2 rank the candidates ck(i) a C − {a, ck(i)}, for some candidate ck(i). (If ck(i) = a then the vote is simply a C − {a}.) • For any 1 ≤ i ≤ n , voters 4i − 1 and 4i rank the candidates dk(i) a C − {a, dk(i)} (that is, their most preferred candidate is the candidate that is paired with the candidate that the previous two voters vote for). 6 An intuitive proof of this is the following.",
        "We can count the number of permutations of n elements as follows.",
        "First, divide the elements into m buckets of size n /m, so that if x is placed in a lower-indexed bucket than y, then x will be indexed lower in the eventual permutation.",
        "Then, decide on the permutation within each bucket (for which there are (n /m)! choices per bucket).",
        "It follows that n ! equals the number of ways to divide n elements into m buckets of size n /m, times ((n /m)! )m . • Every candidate is ranked at the top of equally many of the first 4n = n − 2 votes. • Voter 4n +1 = n−1 ranks the candidates a C−{a}. • Voter 4n + 2 = n ranks the candidates b C − {b}.",
        "Candidate a wins with each one of these vote vectors: because of the last two votes, candidates a and b are one vote ahead of all the other candidates and continue to the runoff, and at this point all the votes that had another candidate ranked at the top transfer to a, so that a wins the runoff.",
        "Given that m divides n , let us see how many vote vectors there are in the fooling set.",
        "We need to distribute n groups of four voters evenly over the m pairs of candidates, and (as in the proof of Theorem 3) there are n ! (( n m )! )m ways of doing this.",
        "All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses.",
        "Let i be a number such that ck(i) is not the same in both of these two vote vectors, that is, c1 k(i) (ck(i) in the first vote vector) is not equal to c2 k(i) (ck(i) in the second vote vector).",
        "Without loss of generality, suppose c1 k(i) = a.",
        "Now, construct a new vote vector by taking votes 4i − 3, 4i − 2, 4i − 1, 4i from the first vote vector, and the remaining votes from the second vote vector.",
        "In this newly constructed vote vector, c1 k(i) and d1 k(i) each receive 4n /m+2 votes in the first round, whereas a receives at most 4n /m+1 votes.",
        "So, a does not continue to the runoff in the newly constructed vote vector, and hence we have a correct fooling set.",
        "Theorem 6.",
        "The nondeterministic communication complexity of the Borda rule is Ω(nm log m) (even to decide whether a given candidate a wins).",
        "Proof.",
        "We will exhibit a fooling set of size (m ! )n where m = m−2 and n = (n−2)/4.",
        "This will prove the theorem because m ! is Ω(m log m), so that log((m ! )n ) = n log(m !) is Ω(nm log m).",
        "For every vector (π1, π2, . . . , πn ) consisting of n orderings of all candidates other than a and another fixed candidate b (technically, the orderings take the form of a one-to-one function πi : {1, 2, . . . , m } → C − {a, b} with πi(j) = c indicating that candidate c is the jth in the order represented by πi), let the following vector of votes be an element of the fooling set: • For 1 ≤ i ≤ n , let voters 4i − 3 and 4i − 2 rank the candidates a b πi(1) πi(2) . . . πi(m ). • For 1 ≤ i ≤ n , let voters 4i − 1 and 4i rank the candidates πi(m ) πi(m − 1) . . . πi(1) b a. • Let voter 4n + 1 = n − 1 rank the candidates a b π0(1) π0(2) . . . π0(m ) (where π0 is an arbitrary order of the candidates other than a and b which is the same for every element of the fooling set). • Let voter 4n + 2 = n rank the candidates π0(m ) π0(m − 1) . . . π0(1) a b.",
        "We observe that this fooling set has size (m ! )n , and that candidate a wins in each vector of votes in the fooling set (to 82 see why, we observe that for any 1 ≤ i ≤ n , votes 4i−3 and 4i − 2 rank the candidates in the exact opposite way from votes 4i − 1 and 4i, which under the Borda rule means they cancel out; and the last two votes give one more point to a than to any other candidate-besides b who gets two fewer points than a).",
        "All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses.",
        "Let the first vote vector correspond to the vector (π1 1, π1 2, . . . , π1 n ), and let the second vote vector correspond to the vector (π2 1, π2 2, . . . , π2 n ).",
        "For some i, we must have π1 i = π2 i , so that for some candidate c /∈ {a, b}, (π1 i )−1 (c) < (π2 i )−1 (c) (that is, c is ranked higher in π1 i than in π2 i ).",
        "Now, construct a new vote vector by taking votes 4i−3 and 4i−2 from the first vote vector, and the remaining votes from the second vote vector. as Borda score remains unchanged.",
        "However, because c is ranked higher in π1 i than in π2 i , c receives at least 2 more points from votes 4i−3 and 4i − 2 in the newly constructed vote vector than it did in the second vote vector.",
        "It follows that c has a higher Borda score than a in the newly constructed vote vector.",
        "So, a is not the winner in the newly constructed vote vector, and hence we have a correct fooling set.",
        "Theorem 7.",
        "The nondeterministic communication complexity of the Copeland rule is Ω(nm log m) (even to decide whether a given candidate a wins).",
        "Proof.",
        "We will exhibit a fooling set of size (m ! )n where m = (m − 2)/2 and n = (n − 2)/2.",
        "This will prove the theorem because m ! is Ω(m log m), so that log((m ! )n ) = n log(m !) is Ω(nm log m).",
        "We write the set of candidates as the following disjoint union: C = {a, b} ∪ L ∪ R where L = {l1, l2, . . . , lm } and R = {r1, r2, . . . , rm }.",
        "For every vector (π1, π2, . . . , πn ) consisting of n permutations of the integers 1 through m (πi : {1, 2, . . . , m } → {1, 2, . . . , m }), let the following vector of votes be an element of the fooling set: • For 1 ≤ i ≤ n , let voter 2i − 1 rank the candidates a b lπi(1) rπi(1) lπi(2) rπi(2) . . . lπi(m ) rπi(m ). • For 1 ≤ i ≤ n , let voter 2i rank the candidates rπi(m ) lπi(m ) rπi(m −1) lπi(m −1) . . . rπi(1) lπi(1) b a. • Let voter n − 1 = 2n + 1 rank the candidates a b l1 r1 l2 r2 . . . lm rm . • Let voter n = 2n +2 rank the candidates rm lm rm −1 lm −1 . . . r1 l1 a b.",
        "We observe that this fooling set has size (m ! )n , and that candidate a wins in each vector of votes in the fooling set (every pair of candidates is tied in their pairwise election, with the exception that a defeats b, so that a wins the election by half a point).",
        "All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses.",
        "Let the first vote vector correspond to the vector (π1 1, π1 2, . . . , π1 n ), and let the second vote vector correspond to the vector (π2 1, π2 2, . . . , π2 n ).",
        "For some i, we must have π1 i = π2 i , so that for some j ∈ {1, 2, . . . , m }, we have (π1 i )−1 (j) < (π2 i )−1 (j).",
        "Now, construct a new vote vector by taking vote 2i−1 from the first vote vector, and the remaining votes from the second vote vector. as Copeland score remains unchanged.",
        "Let us consider the score of lj.",
        "We first observe that the rank of lj in vote 2i − 1 in the newly constructed vote vector is at least 2 higher than it was in the second vote vector, because (π1 i )−1 (j) < (π2 i )−1 (j).",
        "Let D1 (lj) be the set of candidates in L ∪ R that voter 2i − 1 ranked lower than lj in the first vote vector (D1 (lj) = {c ∈ L ∪ R : lj 1 2i−1 c}), and let D2 (lj) be the set of candidates in L ∪ R that voter 2i − 1 ranked lower than lj in the second vote vector (D2 (lj) = {c ∈ L ∪ R : lj 2 2i−1 c}).",
        "Then, it follows that in the newly constructed vote vector, lj defeats all the candidates in D1 (lj) − D2 (lj) in their pairwise elections (because lj receives an extra vote in each one of these pairwise elections relative to the second vote vector), and loses to all the candidates in D2 (lj) − D1 (lj) (because lj loses a vote in each one of these pairwise elections relative to the second vote vector), and ties with everyone else.",
        "But |D1 (lj)|−|D2 (lj)| ≥ 2, and hence |D1 (lj) − D2 (lj)| − |D2 (lj) − D1 (lj)| ≥ 2.",
        "Hence, in the newly constructed vote vector, lj has at least two more pairwise wins than pairwise losses, and therefore has at least 1 more point than if lj had tied all its pairwise elections.",
        "Thus, lj has a higher Copeland score than a in the newly constructed vote vector.",
        "So, a is not the winner in the newly constructed vote vector, and hence we have a correct fooling set.",
        "Theorem 8.",
        "The nondeterministic communication complexity of the maximin rule is O(nm).",
        "Proof.",
        "The nondeterministic protocol will guess which candidate w is the winner, and, for each other candidate c, which candidate o(c) is the candidate against whom c receives its lowest score in a pairwise election.",
        "Then, let every voter communicate the following: • for each candidate c = w, whether she prefers c to w; • for each candidate c = w, whether she prefers c to o(c).",
        "We observe that this requires the communication of 2n(m− 1) bits.",
        "If the guesses were correct, then, letting N(d, e) be the number of voters preferring candidate d to candidate e, we should have N(c, o(c)) < N(w, c ) for any c = w, c = w, which will prove that w wins the election.",
        "Theorem 9.",
        "The nondeterministic communication complexity of the maximin rule is Ω(nm) (even to decide whether a given candidate a wins).",
        "Proof.",
        "We will exhibit a fooling set of size 2n m where m = m − 2 and n = (n − 1)/4.",
        "Let b be a candidate other than a.",
        "For every vector (S1, S2, . . . , Sn ) consisting of n subsets Si ⊆ C − {a, b}, let the following vector of votes be an element of the fooling set: • For 1 ≤ i ≤ n , let voters 4i − 3 and 4i − 2 rank the candidates Si a C − (Si ∪ {a, b}) b. • For 1 ≤ i ≤ n , let voters 4i − 1 and 4i rank the candidates b C − (Si ∪ {a, b}) a Si. 83 • Let voter 4n + 1 = n rank the candidates a b C − {a, b}.",
        "We observe that this fooling set has size (2m )n = 2n m , and that candidate a wins in each vector of votes in the fooling set (in every one of as pairwise elections, a is ranked higher than its opponent by 2n +1 = (n+1)/2 > n/2 votes).",
        "All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses.",
        "Let the first vote vector correspond to the vector (S1 1 , S1 2 , . . . , S1 n ), and let the second vote vector correspond to the vector (S2 1 , S2 2 , . . . , S2 n ).",
        "For some i, we must have S1 i = S2 i , so that either S1 i S2 i or S2 i S1 i .",
        "Without loss of generality, suppose S1 i S2 i , and let c be some candidate in S1 i − S2 i .",
        "Now, construct a new vote vector by taking votes 4i − 3 and 4i − 2 from the first vote vector, and the remaining votes from the second vote vector.",
        "In this newly constructed vote vector, a is ranked higher than c by only 2n −1 voters, for the following reason.",
        "Whereas voters 4i−3 and 4i − 2 do not rank c higher than a in the second vote vector (because c /∈ S2 i ), voters 4i − 3 and 4i − 2 do rank c higher than a in the first vote vector (because c ∈ S1 i ).",
        "Moreover, in every one of bs pairwise elections, b is ranked higher than its opponent by at least 2n voters.",
        "So, a has a lower maximin score than b, therefore a is not the winner in the newly constructed vote vector, and hence we have a correct fooling set.",
        "Theorem 10.",
        "The deterministic communication complexity of the STV rule is O(n(log m)2 ).",
        "Proof.",
        "Consider the following communication protocol.",
        "Let each voter first announce her most preferred candidate (O(n log m) communication).",
        "In the remaining rounds, we will keep track of each voters most preferred candidate among the remaining candidates, which will be enough to implement the rule.",
        "When candidate c is eliminated, let each of the voters whose most preferred candidate among the remaining candidates was c announce their most preferred candidate among the candidates remaining after cs elimination.",
        "If candidate c was the ith candidate to be eliminated (that is, there were m − i + 1 candidates remaining before cs elimination), it follows that at most n/(m − i + 1) voters had candidate c as their most preferred candidate among the remaining candidates, and thus the number of bits to be communicated after the elimination of the ith candidate is O((n/(m−i+1)) log m).7 Thus, the total communication in this communication protocol is O(n log m + m−1 i=1 (n/(m − i + 1)) log m).",
        "Of course, m−1 i=1 1/(m − i + 1) = m i=2 1/i, which is O(log m).",
        "Substituting into the previous expression, we find that the communication complexity is O(n(log m)2 ).",
        "Theorem 11.",
        "The nondeterministic communication complexity of the STV rule is Ω(n log m) (even to decide whether a given candidate a wins).",
        "Proof.",
        "We omit this proof because of space constraint. 7 Actually, O((n/(m − i + 1)) log(m − i + 1)) is also correct, but it will not improve the bound.",
        "Theorem 12.",
        "The deterministic communication complexity of the approval rule is O(nm).",
        "Proof.",
        "Approving or disapproving of a candidate requires only one bit of information, so every voter can simply approve or disapprove of every candidate for a total communication of nm bits.",
        "Theorem 13.",
        "The nondeterministic communication complexity of the approval rule is Ω(nm) (even to decide whether a given candidate a wins).",
        "Proof.",
        "We will exhibit a fooling set of size 2n m where m = m − 1 and n = (n − 1)/4.",
        "For every vector (S1, S2, . . . , Sn ) consisting of n subsets Si ⊆ C − {a}, let the following vector of votes be an element of the fooling set: • For 1 ≤ i ≤ n , let voters 4i − 3 and 4i − 2 approve Si ∪ {a}. • For 1 ≤ i ≤ n , let voters 4i − 1 and 4i approve C − (Si ∪ {a}). • Let voter 4n + 1 = n approve {a}.",
        "We observe that this fooling set has size (2m )n = 2n m , and that candidate a wins in each vector of votes in the fooling set (a is approved by 2n + 1 voters, whereas each other candidate is approved by only 2n voters).",
        "All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses.",
        "Let the first vote vector correspond to the vector (S1 1 , S1 2 , . . . , S1 n ), and let the second vote vector correspond to the vector (S2 1 , S2 2 , . . . , S2 n ).",
        "For some i, we must have S1 i = S2 i , so that either S1 i S2 i or S2 i S1 i .",
        "Without loss of generality, suppose S1 i S2 i , and let b be some candidate in S1 i − S2 i .",
        "Now, construct a new vote vector by taking votes 4i − 3 and 4i − 2 from the first vote vector, and the remaining votes from the second vote vector.",
        "In this newly constructed vote vector, a is still approved by 2n + 1 votes.",
        "However, b is approved by 2n + 2 votes, for the following reason.",
        "Whereas voters 4i−3 and 4i−2 do not approve b in the second vote vector (because b /∈ S2 i ), voters 4i − 3 and 4i − 2 do approve b in the first vote vector (because b ∈ S1 i ).",
        "It follows that bs score in the newly constructed vote vector is bs score in the second vote vector (2n ), plus two.",
        "So, a is not the winner in the newly constructed vote vector, and hence we have a correct fooling set.",
        "Interestingly, an Ω(m) lower bound can be obtained even for the problem of finding a candidate that is approved by more than one voter [20].",
        "Theorem 14.",
        "The deterministic communication complexity of the Condorcet rule is O(nm).",
        "Proof.",
        "We maintain a set of active candidates S which is initialized to C. At each stage, we choose two of the active candidates (say, the two candidates with the lowest indices), and we let each voter communicate which of the two candidates she prefers. (Such a stage requires the communication of n bits, one per voter.)",
        "The candidate preferred by fewer 84 voters (the loser of the pairwise election) is removed from S. (If the pairwise election is tied, both candidates are removed.)",
        "After at most m − 1 iterations, only one candidate is left (or zero candidates are left, in which case there is no Condorcet winner).",
        "Let a be the remaining candidate.",
        "To find out whether candidate a is the Condorcet winner, let each voter communicate, for every candidate c = a, whether she prefers a to c. (This requires the communication of at most n(m − 1) bits.)",
        "This is enough to establish whether a won each of its pairwise elections (and thus, whether a is the Condorcet winner).",
        "Theorem 15.",
        "The nondeterministic communication complexity of the Condorcet rule is Ω(nm) (even to decide whether a given candidate a wins).",
        "Proof.",
        "We will exhibit a fooling set of size 2n m where m = m − 1 and n = (n − 1)/2.",
        "For every vector (S1, S2, . . . , Sn ) consisting of n subsets Si ⊆ C − {a}, let the following vector of votes be an element of the fooling set: • For 1 ≤ i ≤ n , let voter 2i − 1 rank the candidates Si a C − Si. • For 1 ≤ i ≤ n , let voter 2i rank the candidates C − Si a Si. • Let voter 2n +1 = n rank the candidates a C −{a}.",
        "We observe that this fooling set has size (2m )n = 2n m , and that candidate a wins in each vector of votes in the fooling set (a wins each of its pairwise elections by a single vote).",
        "All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses.",
        "Let the first vote vector correspond to the vector (S1 1 , S1 2 , . . . , S1 n ), and let the second vote vector correspond to the vector (S2 1 , S2 2 , . . . , S2 n ).",
        "For some i, we must have S1 i = S2 i , so that either S1 i S2 i or S2 i S1 i .",
        "Without loss of generality, suppose S1 i S2 i , and let b be some candidate in S1 i − S2 i .",
        "Now, construct a new vote vector by taking vote 2i − 1 from the first vote vector, and the remaining votes from the second vote vector.",
        "In this newly constructed vote vector, b wins its pairwise election against a by one vote (vote 2i − 1 ranks b above a in the newly constructed vote vector because b ∈ S1 i , whereas in the second vote vector vote 2i − 1 ranked a above b because b /∈ S2 i ).",
        "So, a is not the Condorcet winner in the newly constructed vote vector, and hence we have a correct fooling set.",
        "Theorem 16.",
        "The deterministic communication complexity of the cup rule is O(nm).",
        "Proof.",
        "Consider the following simple communication protocol.",
        "First, let all the voters communicate, for every one of the matchups in the first round, which of its two candidates they prefer.",
        "After this, the matchups for the second round are known, so let all the voters communicate which candidate they prefer in each matchup in the second round-etc.",
        "Because communicating which of two candidates is preferred requires only one bit per voter, and because there are only m − 1 matchups in total, this communication protocol requires O(nm) communication.",
        "Theorem 17.",
        "The nondeterministic communication complexity of the cup rule is Ω(nm) (even to decide whether a given candidate a wins).",
        "Proof.",
        "We will exhibit a fooling set of size 2n m where m = (m − 1)/2 and n = (n − 7)/2.",
        "Given that m + 1 is a power of 2, so that one candidate gets a bye (that is, does not face an opponent) in the first round, let a be the candidate with the bye.",
        "Of the m first-round matchups, let lj denote the one (left) candidate in the jth matchup, and let rj be the other (right) candidate.",
        "Let L = {lj : 1 ≤ j ≤ m } and R = {rj : 1 ≤ j ≤ m }, so that C = L ∪ R ∪ {a}. . . . . . . . . . l r l r l r a m1 1 2 2 m Figure 1: The schedule for the cup rule used in the proof of Theorem 17.",
        "For every vector (S1, S2, . . . , Sn ) consisting of n subsets Si ⊆ R, let the following vector of votes be an element of the fooling set: • For 1 ≤ i ≤ n , let voter 2i − 1 rank the candidates Si L a R − Si. • For 1 ≤ i ≤ n , let voter 2i rank the candidates R − Si L a Si. • Let voters 2n +1 = n−6, 2n +2 = n−5, 2n +3 = n−4 rank the candidates L a R. • Let voters 2n + 4 = n − 3, 2n + 5 = n − 2 rank the candidates a r1 l1 r2 l2 . . . rm lm . • Let voters 2n + 6 = n − 1, 2n + 7 = n rank the candidates rm lm rm −1 lm −1 . . . r1 l1 a.",
        "We observe that this fooling set has size (2m )n = 2n m .",
        "Also, candidate a wins in each vector of votes in the fooling set, for the following reasons.",
        "Each candidate rj defeats its opponent lj in the first round. (For any 1 ≤ i ≤ n , the net effect of votes 2i − 1 and 2i on the pairwise election between rj and lj is zero; votes n − 6, n − 5, n − 4 prefer lj to rj, but votes n − 3, n − 2, n − 1, n all prefer rj to lj.)",
        "Moreover, a defeats every rj in their pairwise election. (For any 1 ≤ i ≤ n , the net effect of votes 2i − 1 and 2i on the pairwise election between a and rj is zero; votes n − 1, n prefer rj to a, but votes n − 6, n − 5, n − 4, n − 3, n − 2 all prefer a to rj.)",
        "It follows that a will defeat all the candidates that it faces.",
        "All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses.",
        "Let the first vote vector correspond to the vector 85 (S1 1 , S1 2 , . . . , S1 n ), and let the second vote vector correspond to the vector (S2 1 , S2 2 , . . . , S2 n ).",
        "For some i, we must have S1 i = S2 i , so that either S1 i S2 i or S2 i S1 i .",
        "Without loss of generality, suppose S1 i S2 i , and let rj be some candidate in S1 i − S2 i .",
        "Now, construct a new vote vector by taking vote 2i from the first vote vector, and the remaining votes from the second vote vector.",
        "We note that, whereas in the second vote vector vote 2i preferred rj to lj (because rj ∈ R−S2 i ), in the newly constructed vote vector this is no longer the case (because rj ∈ S1 i ).",
        "It follows that, whereas in the second vote vector, rj defeated lj in the first round by one vote, in the newly constructed vote vector, lj defeats rj in the first round.",
        "Thus, at least one lj advances to the second round after defeating its opponent rj.",
        "Now, we observe that in the newly constructed vote vector, any lk wins its pairwise election against any rq with q = k. This is because among the first 2n votes, at least n − 1 prefer lk to rq; votes n − 6, n − 5, n − 4 prefer lk to rq; and, because q = k, either votes n − 3, n − 2 prefer lk to rq (if k < q), or votes n − 1, n prefer lk to rq (if k > q).",
        "Thus, at least n + 4 = (n + 1)/2 > n/2 votes prefer lk to rq.",
        "Moreover, any lk wins its pairwise election against a.",
        "This is because only votes n − 3 and n − 2 prefer a to lk.",
        "It follows that, after the first round, any surviving candidate lk can only lose a matchup against another surviving lk , so that one of the lk must win the election.",
        "So, a is not the winner in the newly constructed vote vector, and hence we have a correct fooling set.",
        "Theorem 18.",
        "The deterministic communication complexity of the Bucklin rule is O(nm).",
        "Proof.",
        "Let l be the minimum integer for which there is a candidate who is ranked among the top l candidates by more than half the votes.",
        "We will do a binary search for l. At each point, we will have a lower bound lL which is smaller than l (initialized to 0), and an upper bound lH which is at least l (initialized to m).",
        "While lH − lL > 1, we continue by finding out whether (lH − l)/2 is smaller than l, after which we can update the bounds.",
        "To find out whether a number k is smaller than l, we determine every voters k most preferred candidates.",
        "Every voter can communicate which candidates are among her k most preferred candidates using m bits (for each candidate, indicate whether the candidate is among the top k or not), but because the binary search requires log m iterations, this gives us an upper bound of O((log m)nm), which is not strong enough.",
        "However, if lL < k < lH , and we already know a voters lL most preferred candidates, as well as her lH most preferred candidates, then the voter no longer needs to communicate whether the lL most preferred candidates are among her k most preferred candidates (because they must be), and she no longer needs to communicate whether the m−lH least preferred candidates are among her k most preferred candidates (because they cannot be).",
        "Thus the voter needs to communicate only m−lL −(m−lH ) = lH −lL bits in any given stage.",
        "Because each stage, lH − lL is (roughly) halved, each voter in total communicates only (roughly) m + m/2 + m/4 + . . . ≤ 2m bits.",
        "Theorem 19.",
        "The nondeterministic communication complexity of the Bucklin rule is Ω(nm) (even to decide whether a given candidate a wins).",
        "Proof.",
        "We will exhibit a fooling set of size 2n m where m = (m−1)/2 and n = n/2.",
        "We write the set of candidates as the following disjoint union: C = {a} ∪ L ∪ R where L = {l1, l2, . . . , lm } and R = {r1, r2, . . . , rm }.",
        "For any subset S ⊆ {1, 2, . . . , m }, let L(S) = {li : i ∈ S} and let R(S) = {ri : i ∈ S}.",
        "For every vector (S1, S2, . . . , Sn ) consisting of n sets Si ⊆ {1, 2, . . . , m }, let the following vector of votes be an element of the fooling set: • For 1 ≤ i ≤ n , let voter 2i − 1 rank the candidates L(Si) R − R(Si) a L − L(Si) R(Si). • For 1 ≤ i ≤ n , let voter 2i rank the candidates L − L(Si) R(Si) a L(Si) R − R(Si).",
        "We observe that this fooling set has size (2m )n = 2n m , and that candidate a wins in each vector of votes in the fooling set, for the following reason.",
        "Each candidate in C − {a} is ranked among the top m candidates by exactly half the voters (which is not enough to win).",
        "Thus, we need to look at the voters top m +1 candidates, and a is ranked m +1th by all voters.",
        "All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses.",
        "Let the first vote vector correspond to the vector (S1 1 , S1 2 , . . . , S1 n ), and let the second vote vector correspond to the vector (S2 1 , S2 2 , . . . , S2 n ).",
        "For some i, we must have S1 i = S2 i , so that either S1 i S2 i or S2 i S1 i .",
        "Without loss of generality, suppose S1 i S2 i , and let j be some integer in S1 i − S2 i .",
        "Now, construct a new vote vector by taking vote 2i − 1 from the first vote vector, and the remaining votes from the second vote vector.",
        "In this newly constructed vote vector, a is still ranked m + 1th by all votes.",
        "However, lj is ranked among the top m candidates by n + 1 = n/2 + 1 votes.",
        "This is because whereas vote 2i − 1 does not rank lj among the top m candidates in the second vote vector (because j /∈ S2 i , we have lj /∈ L(S2 i )), vote 2i − 1 does rank lj among the top m candidates in the first vote vector (because j ∈ S1 i , we have lj ∈ L(S1 i )).",
        "So, a is not the winner in the newly constructed vote vector, and hence we have a correct fooling set.",
        "Theorem 20.",
        "The nondeterministic communication complexity of the ranked pairs rule is Ω(nm log m) (even to decide whether a given candidate a wins).",
        "Proof.",
        "We omit this proof because of space constraint. 5.",
        "DISCUSSION One key obstacle to using voting for preference aggregation is the communication burden that an election places on the voters.",
        "By lowering this burden, it may become feasible to conduct more elections over more issues.",
        "In the limit, this could lead to a shift from representational government to a system in which most issues are decided by referenda-a veritable e-democracy.",
        "In this paper, we analyzed the communication complexity of the common voting rules.",
        "Knowing which voting rules require little communication is especially important when the issue to be voted on is of low enough importance that the following is true: the parties involved are willing to accept a rule that tends 86 to produce outcomes that are slightly less representative of the voters preferences, if this rule reduces the communication burden on the voters significantly.",
        "The following table summarizes the results we obtained.",
        "Rule Lower bound Upper bound plurality Ω(n log m) O(n log m) plurality w/ runoff Ω(n log m) O(n log m) STV Ω(n log m) O(n(log m)2) Condorcet Ω(nm) O(nm) approval Ω(nm) O(nm) Bucklin Ω(nm) O(nm) cup Ω(nm) O(nm) maximin Ω(nm) O(nm) Borda Ω(nm log m) O(nm log m) Copeland Ω(nm log m) O(nm log m) ranked pairs Ω(nm log m) O(nm log m) Communication complexity of voting rules, sorted from low to high.",
        "All of the upper bounds are deterministic (with the exception of maximin, for which the best deterministic upper bound we proved is O(nm log m)).",
        "All of the lower bounds hold even for nondeterministic communication and even just for determining whether a given candidate a is the winner.",
        "One area of future research is to study what happens when we restrict our attention to communication protocols that do not reveal any strategically useful information.",
        "This restriction may invalidate some of the upper bounds that we derived using multistage communication protocols.",
        "Also, all of our bounds are worst-case bounds.",
        "It may be possible to outperform these bounds when the distribution of votes has additional structure.",
        "When deciding which voting rule to use for an election, there are many considerations to take into account.",
        "The voting rules that we studied in this paper are the most common ones that have survived the test of time.",
        "One way to select among these rules is to consider recent results on complexity.",
        "The table above shows that from a communication complexity perspective, plurality, plurality with runoff, and STV are preferable.",
        "However, plurality has the undesirable property that it is computationally easy to manipulate by voting strategically [3, 7].",
        "Plurality with runoff is NP-hard to manipulate by a coalition of weighted voters, or by an individual that faces correlated uncertainty about the others votes [7, 6].",
        "STV is NP-hard to manipulate in those settings as well [7], but also by an individual with perfect knowledge of the others votes (when the number of candidates is unbounded) [2].",
        "Therefore, STV is more robust, although it may require slightly more worst-case communication as per the table above.",
        "Yet other selection criteria are the computational complexity of determining whether enough information has been elicited to declare a winner, and that of determining the optimal sequence of queries [8]. 6.",
        "REFERENCES [1] Lawrence Ausubel and Paul Milgrom.",
        "Ascending auctions with package bidding.",
        "Frontiers of Theoretical Economics, 1, 2002.",
        "No. 1, Article 1. [2] John Bartholdi, III and James Orlin.",
        "Single transferable vote resists strategic voting.",
        "Social Choice and Welfare, 8(4):341-354, 1991. [3] John Bartholdi, III, Craig Tovey, and Michael Trick.",
        "The computational difficulty of manipulating an election.",
        "Social Choice and Welfare, 6(3):227-241, 1989. [4] Avrim Blum, Jeffrey Jackson, Tuomas Sandholm, and Martin Zinkevich.",
        "Preference elicitation and query learning.",
        "Journal of Machine Learning Research, 5:649-667, 2004. [5] Wolfram Conen and Tuomas Sandholm.",
        "Preference elicitation in combinatorial auctions: Extended abstract.",
        "In Proceedings of the ACM Conference on Electronic Commerce (ACM-EC), pages 256-259, 2001. [6] Vincent Conitzer, Jerome Lang, and Tuomas Sandholm.",
        "How many candidates are needed to make elections hard to manipulate?",
        "In Theoretical Aspects of Rationality and Knowledge (TARK), pages 201-214, 2003. [7] Vincent Conitzer and Tuomas Sandholm.",
        "Complexity of manipulating elections with few candidates.",
        "In Proceedings of the National Conference on Artificial Intelligence (AAAI), pages 314-319, 2002. [8] Vincent Conitzer and Tuomas Sandholm.",
        "Vote elicitation: Complexity and strategy-proofness.",
        "In Proceedings of the National Conference on Artificial Intelligence (AAAI), pages 392-397, 2002. [9] Sven de Vries, James Schummer, and Rakesh V. Vohra.",
        "On ascending auctions for heterogeneous objects, 2003.",
        "Draft. [10] Allan Gibbard.",
        "Manipulation of voting schemes.",
        "Econometrica, 41:587-602, 1973. [11] Benoit Hudson and Tuomas Sandholm.",
        "Effectiveness of query types and policies for preference elicitation in combinatorial auctions.",
        "In International Conference on Autonomous Agents and Multi-Agent Systems (AAMAS), pages 386-393, 2004. [12] E Kushilevitz and N Nisan.",
        "Communication Complexity.",
        "Cambridge University Press, 1997. [13] Sebasti´en Lahaie and David Parkes.",
        "Applying learning algorithms to preference elicitation.",
        "In Proceedings of the ACM Conference on Electronic Commerce, 2004. [14] Noam Nisan and Ilya Segal.",
        "The communication requirements of efficient allocations and supporting prices.",
        "Journal of Economic Theory, 2005.",
        "Forthcoming. [15] David Parkes. iBundle: An efficient ascending price bundle auction.",
        "In Proceedings of the ACM Conference on Electronic Commerce (ACM-EC), pages 148-157, 1999. [16] Tuomas Sandholm.",
        "An implementation of the contract net protocol based on marginal cost calculations.",
        "In Proceedings of the National Conference on Artificial Intelligence (AAAI), pages 256-262, 1993. [17] Tuomas Sandholm and Craig Boutilier.",
        "Preference elicitation in combinatorial auctions.",
        "In Peter Cramton, Yoav Shoham, and Richard Steinberg, editors, Combinatorial Auctions, chapter 10.",
        "MIT Press, 2005. [18] Paolo Santi, Vincent Conitzer, and Tuomas Sandholm.",
        "Towards a characterization of polynomial preference elicitation with value queries in combinatorial auctions.",
        "In Conference on Learning Theory (COLT), pages 1-16, 2004. [19] Mark Satterthwaite.",
        "Strategy-proofness and Arrows conditions: existence and correspondence theorems for voting procedures and social welfare functions.",
        "Journal of Economic Theory, 10:187-217, 1975. [20] Ilya Segal.",
        "The communication requirements of social choice rules and supporting budget sets, 2004.",
        "Draft.",
        "Presented at the DIMACS Workshop on Computational Issues in Auction Design, Rutgers University, New Jersey, USA. [21] Peter Wurman and Michael Wellman.",
        "AkBA: A progressive, anonymous-price combinatorial auction.",
        "In Proceedings of the ACM Conference on Electronic Commerce (ACM-EC), pages 21-29, 2000. [22] A. C. Yao.",
        "Some complexity questions related to distributed computing.",
        "In Proceedings of the 11th ACM symposium on theory of computing (STOC), pages 209-213, 1979. [23] Martin Zinkevich, Avrim Blum, and Tuomas Sandholm.",
        "On polynomial-time preference elicitation with value queries.",
        "In Proceedings of the ACM Conference on Electronic Commerce (ACM-EC), pages 176-185, 2003. 87"
    ],
    "translated_text_sentences": [
        "Determinamos la complejidad de comunicación de las reglas de votación comunes.",
        "Las reglas (ordenadas por su complejidad de comunicación de baja a alta) son pluralidad, pluralidad con segunda vuelta, voto único transferible (STV), Condorcet, aprobación, Bucklin, taza, maximin, Borda, Copeland y pares clasificados.",
        "Para cada regla, primero proporcionamos un protocolo de comunicación determinista y un límite superior en la cantidad de bits comunicados en él; luego, damos un límite inferior en los requisitos de comunicación (incluso los no deterministas) de la regla de votación.",
        "Los límites coinciden para todas las reglas de votación excepto STV y maximin.",
        "Categorías y Descriptores de Asignaturas F.2 [Teoría de la Computación]: Análisis de Algoritmos y Complejidad de Problemas; J.4 [Aplicaciones Informáticas]: Ciencias Sociales y del Comportamiento-Economía Términos Generales Algoritmos, Economía, Teoría 1.",
        "INTRODUCCIÓN Un factor clave en la viabilidad de cualquier regla de agregación de preferencias es su carga de comunicación.",
        "Para agregar con éxito las preferencias de los agentes, generalmente no es necesario que todos los agentes informen toda su información de preferencias.",
        "Los protocolos inteligentes que obtienen parcial y secuencialmente las preferencias de los agentes tienen el potencial de reducir drásticamente la comunicación requerida.",
        "Esto tiene al menos las siguientes ventajas: • Puede hacer factible la agregación de preferencias en entornos donde la cantidad total de información de preferencias es demasiado grande para comunicar. • Incluso cuando comunicar toda la información de preferencias es factible, reducir los requisitos de comunicación disminuye la carga impuesta a los agentes.",
        "Esto es especialmente cierto cuando los agentes, en lugar de conocer todas sus preferencias de antemano, necesitan invertir esfuerzo (como cálculos o recopilación de información) para determinar sus preferencias. • Preserva (parte de) la privacidad de los agentes.",
        "La mayor parte del trabajo sobre la reducción de la carga de comunicación en la agregación de preferencias se ha centrado en entornos de asignación de recursos como subastas combinatorias, en las que un subastador subasta un número de artículos (posiblemente distintos) en un solo evento.",
        "Debido a que en una subasta combinatoria, los postores pueden tener valoraciones separadas para cada uno de un número exponencial de posibles paquetes de artículos, este es un escenario en el que reducir la carga de comunicación es especialmente crucial.",
        "Esto se puede lograr complementando al subastador con un provocador que elicitara incrementalmente partes de las preferencias de los postores según sea necesario, basándose en lo que los postores han revelado sobre sus preferencias hasta el momento, como sugieren Conen y Sandholm [5].",
        "Por ejemplo, el solicitante puede preguntar por el valor de un postor para un paquete específico (consultas de valor), cuál de dos paquetes prefiere el postor (consultas de orden), qué paquete clasifica en la posición k o cuál es la posición de un paquete dado (consultas de clasificación), qué paquete compraría dado un vector particular de precios (consultas de demanda), etc., hasta que se pueda determinar (al menos) la asignación final.",
        "Experimentalmente, esto produce a drástico ahorro en la revelación de preferencias [11].",
        "Además, si las funciones de valoración de los agentes provienen de ciertas subclases naturales, el problema de la obtención de información puede resolverse utilizando solo un número polinomial de consultas incluso en el peor de los casos [23, 4, 13, 18, 14].",
        "Para una revisión de la obtención de preferencias en subastas combinatorias, consulte [17].",
        "Las subastas combinatorias ascendentes son una forma especial conocida de obtención de preferencias, donde el encuestador realiza consultas de demanda con precios crecientes [15, 21, 1, 9].",
        "Finalmente, los problemas de asignación de recursos 78 también han sido estudiados desde el punto de vista de la complejidad de la comunicación, derivando así límites inferiores sobre la comunicación requerida.",
        "Por ejemplo, Nisan y Segal muestran que se requiere comunicación exponencial incluso para obtener un excedente mayor al obtenido al subastar todos los objetos como un único paquete [14].",
        "Segal también estudia reglas de elección social en general, y muestra que para una gran clase de reglas de elección social, los conjuntos de presupuesto de apoyo deben ser revelados de tal manera que si cada agente prefiere el mismo resultado en su conjunto de presupuesto, esto demuestra la optimalidad de ese resultado.",
        "Segal luego utiliza esta caracterización para demostrar límites en la comunicación requerida en la asignación de recursos, así como en entornos de emparejamiento [20].",
        "En este documento, nos enfocaremos en los requisitos de comunicación de una subclase generalmente aplicable de reglas de elección social, comúnmente conocidas como reglas de votación.",
        "En un entorno de votación, hay un conjunto de resultados de candidatos sobre los cuales los votantes expresan sus preferencias al enviar un voto (normalmente, una clasificación de los candidatos), y el ganador (es decir, el resultado elegido) se determina en función de estos votos.",
        "La comunicación requerida por las reglas de votación puede ser grande ya sea porque el número de votantes es grande (como, por ejemplo, en elecciones nacionales), o porque el número de candidatos es grande (por ejemplo, los agentes pueden votar sobre asignaciones de un número de recursos), o ambos.",
        "El trabajo previo [8] ha estudiado la obtención de información en votaciones, analizando qué tan difícil es computacionalmente decidir si se puede determinar un ganador con la información obtenida hasta el momento, así como qué tan difícil es encontrar la secuencia óptima de preguntas dadas sospechas perfectas sobre las preferencias de los votantes.",
        "Además, ese artículo discute cuestiones estratégicas (teóricas de juegos) introducidas por la obtención de información.",
        "Por el contrario, en este artículo nos preocupamos por el número máximo de bits que deben comunicarse para ejecutar una regla de votación dada, cuando no se conoce de antemano las preferencias de los votantes.",
        "Determinamos la complejidad de comunicación de las reglas de votación comunes.",
        "Para cada regla, primero damos una cota superior en la complejidad de comunicación (determinística) proporcionando un protocolo de comunicación para ella y analizando cuántos bits necesitan ser transmitidos en este protocolo. (Los resultados de Segal [20] no se aplican a la mayoría de las reglas de votación porque la mayoría de las reglas de votación no son intersección-monótonas (o incluso monótonas).) Para muchas de las reglas de votación bajo estudio, resulta que no se puede hacer mejor que simplemente permitir que cada votante comunique inmediatamente toda su información (potencialmente relevante).",
        "Sin embargo, para algunas reglas (como la pluralidad con segunda vuelta, STV y taza) existe un protocolo de comunicación multietapa directo que, con un análisis detallado, se puede demostrar que supera significativamente la comunicación inmediata de toda la información (potencialmente relevante).",
        "Finalmente, para algunas reglas (como las reglas de Condorcet y Bucklin), necesitamos introducir un protocolo de comunicación más complejo para lograr el mejor límite superior posible. Para dos de las reglas que estudiamos que son intersección-monótonas, a saber, las reglas de aprobación y Condorcet, los resultados de Segal de hecho pueden ser utilizados para dar pruebas alternativas de nuestros límites inferiores.",
        "Solo proporcionamos pruebas directas para estas reglas aquí porque 1) estas pruebas directas son de las más fáciles en este documento, 2) las pruebas alternativas son no triviales incluso dados los resultados de Segal, y 3) se aplica una restricción de espacio.",
        "Sin embargo, esperamos incluir también las pruebas alternativas en una versión posterior.",
        "Después de obtener los límites superiores, demostramos que son ajustados al proporcionar límites inferiores coincidentes en la complejidad de comunicación (incluso la no determinista) de cada regla de votación.",
        "Hay dos excepciones: STV, para el cual nuestros límites superiores e inferiores difieren en un factor log m; y maximin, para el cual nuestro mejor límite superior determinístico también es un factor log m por encima del límite inferior (no determinístico), aunque proporcionamos un límite superior no determinístico que coincide con el límite inferior. 2. REVISIÓN DE LAS REGLAS DE VOTACIÓN En esta sección, revisamos las reglas de votación comunes que estudiamos en este documento.",
        "Una regla de votación es una función que asigna un vector de votos de los n votantes (es decir, preferencias sobre candidatos) a uno de los m candidatos (el ganador) en el conjunto de candidatos C. En algunos casos (como la regla de Condorcet), la regla también puede declarar que no existe un ganador.",
        "No nos preocupamos por lo que sucede en caso de un empate entre candidatos (nuestros límites inferiores se mantienen independientemente de cómo se resuelvan los empates, y los protocolos de comunicación utilizados para nuestros límites superiores no intentan romper los empates).",
        "Todas las reglas que estudiamos son reglas basadas en el rango, lo que significa que un voto se define como un ordenamiento de los candidatos (con la excepción de la regla de la pluralidad, para la cual un voto es un único candidato, y la regla de aprobación, para la cual un voto es un subconjunto de los candidatos).",
        "Consideraremos las siguientes reglas de votación. (Para reglas que definen una puntuación, el candidato con la puntuación más alta gana.) • reglas de puntuación.",
        "Sea α = α1, . . . , αm un vector de enteros tal que α1 ≥ α2 . . . ≥ αm.",
        "Para cada votante, un candidato recibe α1 puntos si es clasificado en primer lugar por el votante, α2 si es clasificado en segundo lugar, etc.",
        "La puntuación sα de un candidato es el número total de puntos que recibe el candidato.",
        "La regla de Borda es la regla de puntuación con α = m−1, m−2, . . . , 0.",
        "La regla de la pluralidad es la regla de puntuación con α = 1, 0, . . . , 0. • voto único transferible (STV).",
        "La regla avanza a través de una serie de m - 1 rondas.",
        "En cada ronda, el candidato con la puntuación de pluralidad más baja (es decir, el menor número de votantes que lo clasifican en primer lugar entre los candidatos restantes) es eliminado (y cada uno de los votos para ese candidato se transfieren al siguiente candidato restante en el orden dado en ese voto).",
        "El ganador es el último candidato restante. • mayoría con segunda vuelta.",
        "En esta regla, una primera ronda elimina a todos los candidatos excepto a los dos con las puntuaciones de pluralidad más altas.",
        "Los votos se transfieren a estos como en la regla de VST, y una segunda ronda determina al ganador de estos dos. • aprobación.",
        "Cada votante etiqueta a cada candidato como aprobado o desaprobado.",
        "El candidato aprobado por el mayor número de votantes gana. • Condorcet.",
        "Para cualquier par de candidatos i y j, sea N(i, j) el número de votantes que prefieren a i sobre j.",
        "Si hay un candidato i que es preferido por la mayoría de los votantes a cualquier otro candidato (es decir, N(i, j) > N(j, i) para todo j = i, es decir, i gana en cada elección por pares), entonces el candidato i gana. El término protocolo de votación se usa a menudo para describir el mismo concepto, pero buscamos hacer una distinción clara entre la regla que mapea las preferencias a los resultados y el protocolo de comunicación/obtención utilizado para implementar esta regla.",
        "(Simpson).",
        "El puntaje maximin de i es s(i) = minj=i N(i, j), es decir, su peor desempeño en una elección por pares.",
        "El candidato con la puntuación maximin más alta gana. • Copeland.",
        "Para cualquier par de candidatos distintos i y j, sea C(i, j) = 1 si N(i, j) > N(j, i), C(i, j) = 1/2 si N(i, j) = N(j, i) y C(i, j) = 0 si N(i, j) < N(j, i).",
        "El puntaje de Copeland del candidato i es s(i) = j=i C(i, j). • taza (comparaciones binarias secuenciales).",
        "La regla de la copa se define por un árbol binario equilibrado T con un hoja por candidato, y una asignación de candidatos a hojas (cada hoja recibe un candidato).",
        "Cada nodo no hoja se le asigna el ganador de la elección por pares de los nodos hijos; el candidato asignado a la raíz gana. • Bucklin.",
        "Para cualquier candidato i y entero l, sea B(i, l) el número de votantes que clasifican al candidato i entre los l primeros candidatos.",
        "El ganador es arg mini(min{l : B(i, l) > n/2}).",
        "Es decir, si decimos que un votante aprueba a sus l candidatos principales, entonces aumentamos repetidamente l en 1 hasta que algún candidato sea aprobado por más de la mitad de los votantes, y este candidato es el ganador. • pares clasificados.",
        "Esta regla determina un orden en todos los candidatos, y el ganador es el candidato en la parte superior de este orden.",
        "Ordena todos los pares ordenados de candidatos (i, j) por N(i, j), el número de votantes que prefieren a i sobre j.",
        "Comenzando con el par (i, j) con el mayor N(i, j), aseguramos el resultado de su elección en pareja (i j).",
        "Luego, pasamos al siguiente par y bloqueamos el resultado de su elección por pares.",
        "Continuamos bloqueando cada resultado en pares que no contradiga el orden establecido hasta el momento.",
        "Enfatizamos que estas definiciones de reglas de votación no se preocupan por cómo se obtienen los votos de los votantes; todas las reglas de votación, incluidas aquellas que se definen sugestivamente en términos de rondas, son en realidad solo funciones que asignan el vector de todos los votos de los votantes a un ganador.",
        "Sin embargo, siempre hay muchas formas diferentes de obtener los votos (o las partes relevantes de estos) de los votantes.",
        "Por ejemplo, en la regla de la pluralidad con segunda vuelta, una forma de obtener los votos es pedir a cada votante que declare su orden completo de los candidatos de antemano.",
        "Alternativamente, podemos primero pedir a cada votante que declare solo su candidato más preferido; luego, sabremos los dos candidatos en la segunda vuelta, y podemos preguntar a cada votante cuál de estos dos candidatos prefiere.",
        "Por lo tanto, distinguimos entre la regla de votación (la asignación de vectores de votos a resultados) y el protocolo de comunicación (que determina cómo se obtienen realmente las partes relevantes de los votos de los votantes).",
        "El objetivo de este documento es proporcionar protocolos de comunicación eficientes para las reglas de votación recién definidas, y demostrar que no existen protocolos de comunicación más eficientes.",
        "Es interesante notar que la elección del protocolo de comunicación puede afectar el comportamiento estratégico de los votantes.",
        "Los protocolos de comunicación de múltiples etapas pueden revelar a los votantes cierta información sobre cómo están votando los demás votantes (por ejemplo, en el protocolo de comunicación de dos etapas recién dado para la pluralidad con segunda vuelta, en la segunda etapa los votantes sabrán qué dos candidatos tienen las puntuaciones de pluralidad más altas).",
        "En general, cuando los votantes reciben esa información, puede darles incentivos para votar de manera diferente a como lo harían en un protocolo de comunicación de una sola etapa en el que todos los votantes declaran sus votos completos simultáneamente.",
        "Por supuesto, incluso el protocolo de comunicación de una sola etapa no es a prueba de estrategias para ninguna regla de votación razonable, según el teorema de Gibbard-Satterthwaite [10, 19].",
        "Sin embargo, esto no significa que no debamos preocuparnos por agregar aún más oportunidades para el voto estratégico.",
        "De hecho, muchos de los protocolos de comunicación introducidos en este documento sí presentan oportunidades adicionales para el voto estratégico, pero no tenemos espacio para discutirlo aquí. (En trabajos anteriores [8], sí proporcionamos un ejemplo donde un protocolo de obtención de información para la regla de votación por aprobación introduce el voto estratégico, y damos principios para diseñar protocolos de obtención de información que no introduzcan problemas estratégicos).",
        "Ahora que hemos revisado las reglas de votación, pasamos a una breve revisión de la teoría de la complejidad de la comunicación. 3. REVISIÓN DE ALGUNA TEORÍA DE LA COMPLEJIDAD DE LA COMUNICACIÓN En esta sección, revisamos el modelo básico de un problema de comunicación y la técnica de límite inferior de construcción de un conjunto engañoso. (El modelo básico de un problema de comunicación se debe a Yao [22]; para obtener una visión general, consulte Kushilevitz y Nisan [12].)",
        "Cada jugador 1 ≤ i ≤ n conoce (solo) la entrada xi.",
        "Juntos, buscan calcular f(x1, x2, . . . , xn).",
        "En un protocolo determinista para calcular f, en cada etapa, uno de los jugadores anuncia (a todos los demás jugadores) un bit de información basado en su propia entrada y los bits anunciados hasta el momento.",
        "Finalmente, la comunicación termina y todos los jugadores conocen f(x1, x2, . . . , xn).",
        "El objetivo es minimizar el número de bits enviados en el peor caso (sobre todos los vectores de entrada).",
        "La complejidad de comunicación determinística de un problema es el número máximo de bits enviados en el peor caso en el mejor protocolo determinístico (correcto) para resolverlo.",
        "En un protocolo no determinista, el siguiente bit a enviar puede ser elegido de manera no determinista.",
        "Para los propósitos de este documento, consideraremos un protocolo no determinista como correcto si para cada vector de entrada, existe alguna secuencia de elecciones no deterministas que los jugadores pueden hacer para que los jugadores conozcan el valor de f cuando el protocolo termina.",
        "La complejidad de comunicación no determinista de un problema es el número máximo de bits enviados en el peor caso en el mejor protocolo no determinista (correcto) para él.",
        "Ahora estamos listos para dar la definición de un conjunto engañoso.",
        "Definición 1.",
        "Un conjunto engañoso es un conjunto de vectores de entrada {(x1 1, x1 2, . . . , x1 n), (x2 1, x2 2, . . . , x2 n), . . . , (xk 1 , xk 2 , . . . , xk n) tal que para cualquier i, f(xi 1, xi 2, . . . , xi n) = f0 para alguna constante f0, pero para cualquier i = j, existe algún vector (r1, r2, . . . , rn) ∈ {i, j}n tal que f(xr1 1 , xr2 2 , . . . , xrn n ) = f0. (Es decir, podemos mezclar las entradas de los dos vectores de entrada para obtener un vector con un valor de función diferente).",
        "Se sabe que si existe un conjunto engañoso de tamaño k, entonces log k es una cota inferior en la complejidad de la comunicación (incluso en la complejidad de la comunicación no determinista) [12]. Un protocolo a prueba de estrategias es aquel en el que es del mejor interés de los jugadores reportar sus preferencias de manera veraz. Para los propósitos de este documento, f es la regla de votación que asigna los votos al candidato ganador, y xi es el voto del votante (la información que la regla de votación requeriría del votante si no hubiera posibilidad de comunicación en múltiples etapas, es decir, el candidato más preferido (mayoría), los candidatos aprobados (aprobación), o la clasificación de todos los candidatos (todos los demás protocolos)).",
        "Sin embargo, cuando obtenemos nuestros límites inferiores, f solo significará si un candidato distinguido a gana. (Es decir, f es 1 si a gana, y 0 en caso contrario).",
        "Esto fortalecerá nuestros resultados de límite inferior (porque implica que incluso averiguar si un candidato dado gana es difícil). Por lo tanto, un conjunto engañoso en nuestro contexto es un conjunto de vectores de votos de manera que a gane (no gane) con cada uno de ellos; pero para cualquier par de vectores de votos diferentes en el conjunto, hay una forma de tomar los votos de algunos votantes del primer vector y los votos de los otros del segundo vector, de manera que a no gane (gane).",
        "Para simplificar las demostraciones de nuestros límites inferiores, hacemos suposiciones como que el número de votantes n es impar en muchas de estas demostraciones.",
        "Por lo tanto, técnicamente, no demostramos el límite inferior para los pares (número de candidatos, número de votantes) (m, n) que no cumplen con estas suposiciones (por ejemplo, si hacemos la suposición anterior, entonces técnicamente no demostramos el límite inferior para ningún par (m, n) en el que n sea par).",
        "Sin embargo, siempre demostramos el límite inferior para un conjunto representativo de pares (m, n).",
        "Por ejemplo, para cada uno de nuestros límites inferiores, sucede que para infinitos valores de m, hay infinitos valores de n tales que el límite inferior se demuestra para el par (m, n).",
        "RESULTADOS Estamos listos para presentar nuestros resultados.",
        "Para cada regla de votación, primero proporcionamos un protocolo de comunicación determinista para determinar al ganador y establecer un límite superior.",
        "Luego, damos un límite inferior en la complejidad de comunicación no determinista (incluso en la complejidad de decidir si un candidato dado gana, que es una pregunta más fácil).",
        "Los límites inferiores coinciden con los límites superiores en todos los casos excepto en dos: la regla STV (límite superior O(n(log m)2); límite inferior Ω(n log m)) y la regla maximin (límite superior O(nm log m), aunque proporcionamos un protocolo no determinista que es O(nm); límite inferior Ω(nm)).",
        "Cuando discutimos una regla de votación en la que los votantes clasifican a los candidatos, representaremos una clasificación en la que el candidato c1 está en primer lugar, c2 en segundo lugar, etc., como c1 c2 . . . cm. Una preocupación posible es que en el caso de que sean posibles los empates, puede requerir mucha comunicación verificar si un candidato específico a está entre los ganadores, pero poca comunicación para producir a uno de los ganadores.",
        "Sin embargo, todos los conjuntos de engaños que utilizamos en las demostraciones tienen la propiedad de que si a gana, entonces a es el único ganador.",
        "Por lo tanto, en estos conjuntos engañosos, si se conoce a alguno de los ganadores, entonces se sabe si a es un ganador.",
        "Por lo tanto, calcular uno de los ganadores requiere al menos tanta comunicación como verificar si a está entre los ganadores.",
        "En general, cuando un problema de comunicación permite múltiples respuestas correctas para un vector de entradas dado, esto se conoce como calcular una relación en lugar de una función [12].",
        "Sin embargo, según lo anterior, podemos restringir nuestra atención a un subconjunto del dominio donde la regla de votación realmente es una función (de un solo valor), por lo que las técnicas de cota inferior para funciones en lugar de relaciones serán suficientes.",
        "A veces, para los propósitos de una demostración, el orden interno de un subconjunto de los candidatos no importa, y en este caso no lo especificaremos.",
        "Por ejemplo, si S = {c2, c3}, entonces c1 S c4 indica que se puede utilizar tanto la clasificación c1 c2 c3 c4 como la clasificación c1 c3 c2 c4 para la prueba.",
        "Primero damos un límite superior universal.",
        "Teorema 1.",
        "La complejidad de comunicación determinística de cualquier regla de votación basada en rangos es O(nm log m).",
        "Prueba.",
        "Este límite se logra simplemente haciendo que todos comuniquen su orden completo de los candidatos (indicar el rango de un candidato individual solo requiere O(log m) bits, por lo que cada uno de los n votantes puede simplemente indicar el rango de cada uno de los m candidatos).",
        "El siguiente lema será útil en algunas de nuestras demostraciones.",
        "Lema 1.",
        "Si m divide a n, entonces log(n!) - m log((n/m)!) ≥ n(log m - 1)/2.",
        "Prueba.",
        "Si n/m = 1 (es decir, n = m), entonces esta expresión se simplifica a log(n!).",
        "Tenemos log(n!) = n i=1 log i ≥ n x=1 log(i)dx, lo cual, utilizando integración por partes, es igual a n log n − (n − 1) > n(log n − 1) = n(log m − 1) > n(log m − 1)/2.",
        "Por lo tanto, podemos asumir que n/m ≥ 2.",
        "Observamos que log(n!) = n i=1 log i = n/m−1 i=0 m j=1 log(im+j) ≥ n/m−1 i=1 m j=1 log(im) = m n/m−1 i=1 log(im), y que m log((n/m)!) = m n/m i=1 log(i).",
        "Por lo tanto, log(n!) − m log((n/m)!) ≥ m n/m−1 i=1 log(im) − m n/m i=1 log(i) = m(( n/m−1 i=1 log(im/i))−log(n/m)) = m((n/m− 1) log m−log n+log m) = n log m−m log n. Ahora, usando el hecho de que n/m ≥ 2, tenemos m log n = n(m/n) log m(n/m) = n(m/n)(log m + log(n/m)) ≤ n(1/2)(log m + log 2).",
        "Por lo tanto, log(n!) − m log((n/m)!) ≥ n log m − m log n ≥ n log m − n(1/2)(log m + log 2) = n(log m − 1)/2.",
        "Teorema 2.",
        "La complejidad de comunicación determinística de la regla de la pluralidad es O(n log m).",
        "Prueba.",
        "Indicar a uno de los candidatos solo requiere O(log m) bits, por lo que cada votante puede simplemente indicar a su candidato más preferido.",
        "Teorema 3.",
        "La complejidad de comunicación no determinista de la regla de la pluralidad es Ω(n log m) (incluso para decidir si un candidato dado a gana).",
        "Prueba.",
        "Exhibiremos un conjunto de engaño de tamaño n ! (( n m )! )m donde n = (n−1)/2.",
        "Tomar el logaritmo de esto da como resultado log(n ! )− m log((n /m)! ), por lo que el resultado se sigue del Lema 1.",
        "El conjunto de engaño estará formado por todos los vectores de votos que cumplan las siguientes restricciones: • Para cualquier 1 ≤ i ≤ n, los votantes 2i−1 y 2i votan lo mismo. • Cada candidato recibe la misma cantidad de votos de los primeros 2n = n − 1 votantes. • El último votante (votante n) vota por a.",
        "El candidato A gana con cada uno de estos vectores de votos debido al voto adicional por A del último votante.",
        "Dado que m divide a n, veamos cuántos vectores de voto hay en el conjunto engañoso.",
        "Necesitamos distribuir n pares de votantes de manera equitativa entre m candidatos, para un total de n /m pares de votantes por candidato; y hay precisamente n ! (( n m )! )m formas de hacer esto. Todo lo que queda por demostrar es que para cualquier par de vectores de votos distintos en el conjunto engañoso, podemos hacer que cada uno de los votantes vote de acuerdo con uno de estos dos vectores de manera que un candidato pierda.",
        "Sea i un número tal que los dos vectores de voto discrepan en el candidato por el cual votan los votantes 2i − 1 y 2i.",
        "Sin pérdida de generalidad, supongamos que en el primer vector de votos, estos votantes no votan por a (sino por algún otro candidato, b, en su lugar).",
        "Ahora, construye un nuevo vector de votos tomando los votos 2i − 1 y 2i del primer vector de votos, y los votos restantes del segundo vector de votos.",
        "Entonces, b recibe 2n /m + 2 votos en este vector de votación recién construido, mientras que a recibe como máximo 2n /m+1 votos.",
        "Por lo tanto, a no es el ganador en el vector de votación recién construido, y por lo tanto tenemos un conjunto de engaño correcto.",
        "Teorema 4.",
        "La complejidad de comunicación determinística de la regla de pluralidad con segunda vuelta es O(n log m).",
        "Prueba.",
        "Primero, permita que cada votante indique a su candidato más preferido usando log m bits.",
        "Después de esto, se conocen los dos candidatos en la segunda vuelta, y cada votante puede indicar cuál prefiere usando un solo bit adicional.",
        "Teorema 5.",
        "La complejidad de comunicación no determinista de la pluralidad con la regla de desempate es Ω(n log m) (incluso para decidir si un candidato dado a gana).",
        "Prueba.",
        "Exhibiremos un conjunto de engaño de tamaño n ! (( n m )! )m donde m = m/2 y n = (n − 2)/4.",
        "Tomar el logaritmo de esto da como resultado log(n !) − m log((n /m )! ), por lo que el resultado se sigue del Lema 1.",
        "Divide a los candidatos en m pares: (c1, d1), (c2, d2), . . . , (cm , dm ) donde c1 = a y d1 = b.",
        "El conjunto de engaño estará formado por todos los vectores de votos que satisfacen las siguientes restricciones: • Para cualquier 1 ≤ i ≤ n, los votantes 4i − 3 y 4i − 2 clasifican a los candidatos ck(i) a C − {a, ck(i)}, para algún candidato ck(i). (Si ck(i) = a, entonces el voto es simplemente a C − {a}.) • Para cualquier 1 ≤ i ≤ n, los votantes 4i − 1 y 4i clasifican a los candidatos dk(i) a C − {a, dk(i)} (es decir, su candidato más preferido es el candidato que está emparejado con el candidato por el que votaron los dos votantes anteriores). Una prueba intuitiva de esto es la siguiente.",
        "Podemos contar el número de permutaciones de n elementos de la siguiente manera.",
        "Primero, divide los elementos en m cubetas de tamaño n / m, de modo que si x se coloca en una cubeta de índice inferior a y, entonces x se indexará más bajo en la permutación final.",
        "Luego, decide la permutación dentro de cada cubeta (para la cual hay (n / m)! opciones por cubeta).",
        "Se deduce que n! es igual al número de formas de dividir n elementos en m contenedores de tamaño n/m, multiplicado por ((n/m)!)^m. • Cada candidato está clasificado en la parte superior de igual cantidad de los primeros 4n = n − 2 votos. • El votante 4n + 1 = n−1 clasifica a los candidatos a C−{a}. • El votante 4n + 2 = n clasifica a los candidatos b C − {b}.",
        "El candidato a gana con cada uno de estos vectores de voto: debido a los dos últimos votos, los candidatos a y b están un voto por delante de todos los demás candidatos y avanzan a la segunda vuelta, y en este punto todos los votos que tenían a otro candidato clasificado en primer lugar se transfieren a a, de modo que a gana la segunda vuelta.",
        "Dado que m divide a n, veamos cuántos vectores de voto hay en el conjunto engañoso.",
        "Necesitamos distribuir n grupos de cuatro votantes de manera equitativa entre los m pares de candidatos, y (como en la demostración del Teorema 3) hay n ! (( n m )! )m formas de hacerlo.",
        "Todo lo que queda por demostrar es que para cualquier par de vectores de votos distintos en el conjunto de engaño, podemos hacer que cada uno de los votantes vote de acuerdo con uno de estos dos vectores de tal manera que a pierda.",
        "Sea i un número tal que ck(i) no sea el mismo en ambos de estos dos vectores de votos, es decir, c1 k(i) (ck(i) en el primer vector de votos) no es igual a c2 k(i) (ck(i) en el segundo vector de votos).",
        "Sin pérdida de generalidad, supongamos que c1 k(i) = a.",
        "Ahora, construye un nuevo vector de votos tomando los votos 4i − 3, 4i − 2, 4i − 1, 4i del primer vector de votos, y los votos restantes del segundo vector de votos.",
        "En este nuevo vector de voto construido, c1 k(i) y d1 k(i) reciben cada uno 4n /m+2 votos en la primera ronda, mientras que a recibe como máximo 4n /m+1 votos.",
        "Por lo tanto, a no continúa hasta la segunda vuelta en el nuevo vector de votación construido, y por lo tanto tenemos un conjunto de engaño correcto.",
        "Teorema 6.",
        "La complejidad de comunicación no determinista de la regla de Borda es Ω(nm log m) (incluso para decidir si un candidato dado a gana).",
        "Prueba.",
        "Exhibiremos un conjunto de engaño de tamaño (m ! )n donde m = m−2 y n = (n−2)/4.",
        "Esto demostrará el teorema porque m ! es Ω(m log m), por lo que log((m ! )n ) = n log(m !) es Ω(nm log m).",
        "Para cada vector (π1, π2, . . . , πn) que consiste en n ordenamientos de todos los candidatos excepto a y otro candidato fijo b (técnicamente, los ordenamientos toman la forma de una función biunívoca πi: {1, 2, . . . , m} → C − {a, b} con πi(j) = c indicando que el candidato c es el j-ésimo en el orden representado por πi), deja que el siguiente vector de votos sea un elemento del conjunto engañoso: • Para 1 ≤ i ≤ n, deja que los votantes 4i − 3 y 4i − 2 clasifiquen a los candidatos a b πi(1) πi(2) . . . πi(m). • Para 1 ≤ i ≤ n, deja que los votantes 4i − 1 y 4i clasifiquen a los candidatos πi(m) πi(m − 1) . . . πi(1) b a. • Deja que el votante 4n + 1 = n − 1 clasifique a los candidatos a b π0(1) π0(2) . . . π0(m) (donde π0 es un orden arbitrario de los candidatos excepto a y b que es el mismo para cada elemento del conjunto engañoso). • Deja que el votante 4n + 2 = n clasifique a los candidatos π0(m) π0(m − 1) . . . π0(1) a b.",
        "Observamos que este conjunto engañoso tiene un tamaño de (m!)n, y que el candidato a gana en cada vector de votos en el conjunto engañoso (para ver por qué, observamos que para cualquier 1 ≤ i ≤ n, los votos 4i-3 y 4i-2 clasifican a los candidatos de manera exactamente opuesta a los votos 4i-1 y 4i, lo que bajo la regla de Borda significa que se cancelan entre sí; y los dos últimos votos dan un punto más a a que a cualquier otro candidato, además de b que recibe dos puntos menos que a).",
        "Todo lo que queda por demostrar es que para cualquier par de vectores de votos distintos en el conjunto de engaño, podemos hacer que cada uno de los votantes vote de acuerdo con uno de estos dos vectores de tal manera que a pierda.",
        "Que el primer vector de votos corresponda al vector (π1 1, π1 2, . . . , π1 n), y que el segundo vector de votos corresponda al vector (π2 1, π2 2, . . . , π2 n).",
        "Para algunos i, debemos tener π1 i = π2 i, de modo que para algún candidato c /∈ {a, b}, (π1 i )−1 (c) < (π2 i )−1 (c) (es decir, c está clasificado más alto en π1 i que en π2 i).",
        "Ahora, construye un nuevo vector de votos tomando los votos 4i−3 y 4i−2 del primer vector de votos, y los votos restantes del segundo vector de votos, ya que la puntuación de Borda permanece sin cambios.",
        "Sin embargo, debido a que c está clasificado más alto en π1 i que en π2 i , c recibe al menos 2 puntos más de los votos 4i−3 y 4i − 2 en el vector de votos recién construido que en el segundo vector de votos.",
        "Se deduce que c tiene una puntuación de Borda más alta que a en el vector de voto recién construido.",
        "Por lo tanto, a no es el ganador en el vector de votación recién construido, y por lo tanto tenemos un conjunto de engaño correcto.",
        "Teorema 7.",
        "La complejidad de comunicación no determinista de la regla de Copeland es Ω(nm log m) (incluso para decidir si un candidato dado a gana).",
        "Prueba.",
        "Exhibiremos un conjunto de engaño de tamaño (m ! )n donde m = (m − 2)/2 y n = (n − 2)/2.",
        "Esto demostrará el teorema porque m ! es Ω(m log m), por lo que log((m ! )n ) = n log(m !) es Ω(nm log m).",
        "Escribimos el conjunto de candidatos como la siguiente unión disjunta: C = {a, b} ∪ L ∪ R donde L = {l1, l2, . . . , lm } y R = {r1, r2, . . . , rm }.",
        "Para cada vector (π1, π2, . . . , πn) que consiste en n permutaciones de los enteros del 1 al m (πi: {1, 2, . . . , m} → {1, 2, . . . , m}), deja que el siguiente vector de votos sea un elemento del conjunto engañoso: • Para 1 ≤ i ≤ n, deja que el votante 2i − 1 clasifique a los candidatos a b lπi(1) rπi(1) lπi(2) rπi(2) . . . lπi(m) rπi(m). • Para 1 ≤ i ≤ n, deja que el votante 2i clasifique a los candidatos rπi(m) lπi(m) rπi(m −1) lπi(m −1) . . . rπi(1) lπi(1) b a. • Deja que el votante n − 1 = 2n + 1 clasifique a los candidatos a b l1 r1 l2 r2 . . . lm rm. • Deja que el votante n = 2n + 2 clasifique a los candidatos rm lm rm −1 lm −1 . . . r1 l1 a b.",
        "Observamos que este conjunto engañoso tiene tamaño (m ! )n, y que el candidato a gana en cada vector de votos en el conjunto engañoso (cada par de candidatos está empatado en su elección por pares, con la excepción de que a vence a b, de modo que a gana la elección por medio punto).",
        "Todo lo que queda por demostrar es que para cualquier par de vectores de votos distintos en el conjunto de engaño, podemos hacer que cada uno de los votantes vote de acuerdo con uno de estos dos vectores de tal manera que a pierda.",
        "Que el primer vector de votos corresponda al vector (π1 1, π1 2, . . . , π1 n), y que el segundo vector de votos corresponda al vector (π2 1, π2 2, . . . , π2 n).",
        "Para algunos i, debemos tener π1 i = π2 i, de modo que para algún j ∈ {1, 2, . . . , m}, tengamos (π1 i)−1 (j) < (π2 i)−1 (j).",
        "Ahora, construye un nuevo vector de votos tomando el voto 2i−1 del primer vector de votos, y los votos restantes del segundo vector de votos, ya que la puntuación de Copeland permanece sin cambios.",
        "Consideremos la puntuación de lj.",
        "Primero observamos que el rango de lj en el voto 2i − 1 en el vector de voto recién construido es al menos 2 más alto que en el segundo vector de voto, porque (π1 i )−1 (j) < (π2 i )−1 (j).",
        "Que D1 (lj) sea el conjunto de candidatos en L ∪ R que el votante 2i − 1 clasificó por debajo de lj en el primer vector de votos (D1 (lj) = {c ∈ L ∪ R : lj 1 2i−1 c}), y que D2 (lj) sea el conjunto de candidatos en L ∪ R que el votante 2i − 1 clasificó por debajo de lj en el segundo vector de votos (D2 (lj) = {c ∈ L ∪ R : lj 2 2i−1 c}).",
        "Entonces, se deduce que en el vector de voto recién construido, lj vence a todos los candidatos en D1 (lj) - D2 (lj) en sus elecciones de a pares (porque lj recibe un voto adicional en cada una de estas elecciones de a pares en comparación con el segundo vector de voto), y pierde contra todos los candidatos en D2 (lj) - D1 (lj) (porque lj pierde un voto en cada una de estas elecciones de a pares en comparación con el segundo vector de voto), y empata con todos los demás.",
        "Pero |D1 (lj)| − |D2 (lj)| ≥ 2, y por lo tanto |D1 (lj) − D2 (lj)| − |D2 (lj) − D1 (lj)| ≥ 2.",
        "Por lo tanto, en el vector de votos recién construido, lj tiene al menos dos victorias más en parejas que derrotas en parejas, y por lo tanto tiene al menos 1 punto más que si lj hubiera empatado todas sus elecciones en pareja.",
        "Por lo tanto, lj tiene una puntuación de Copeland más alta que a en el nuevo vector de voto construido.",
        "Por lo tanto, a no es el ganador en el vector de votación recién construido, y por lo tanto tenemos un conjunto de engaño correcto.",
        "Teorema 8.",
        "La complejidad de comunicación no determinística de la regla maximin es O(nm).",
        "Prueba.",
        "El protocolo no determinista adivinará cuál candidato w es el ganador, y, para cada otro candidato c, cuál es el candidato o(c) contra el cual c recibe su puntuación más baja en una elección por pares.",
        "Entonces, que cada votante comunique lo siguiente: • para cada candidato c = w, si prefiere a c sobre w; • para cada candidato c = w, si prefiere a c sobre o(c).",
        "Observamos que esto requiere la comunicación de 2n(m− 1) bits.",
        "Si las suposiciones fueran correctas, entonces, dejando que N(d, e) sea el número de votantes que prefieren al candidato d sobre el candidato e, deberíamos tener N(c, o(c)) < N(w, c) para cualquier c = w, c = w, lo cual demostrará que w gana la elección.",
        "Teorema 9.",
        "La complejidad de comunicación no determinista de la regla maximin es Ω(nm) (incluso para decidir si un candidato dado a gana).",
        "Prueba.",
        "Exhibiremos un conjunto de engaño de tamaño 2n m donde m = m − 2 y n = (n − 1)/4.",
        "Que b sea un candidato distinto de a.",
        "Para cada vector (S1, S2, . . . , Sn) que consiste en n subconjuntos Si ⊆ C − {a, b}, deja que el siguiente vector de votos sea un elemento del conjunto engañoso: • Para 1 ≤ i ≤ n, deja que los votantes 4i − 3 y 4i − 2 clasifiquen a los candidatos Si a C − (Si ∪ {a, b}) b. • Para 1 ≤ i ≤ n, deja que los votantes 4i − 1 y 4i clasifiquen a los candidatos b C − (Si ∪ {a, b}) a Si. • Deja que el votante 4n + 1 = n clasifique a los candidatos a b C − {a, b}.",
        "Observamos que este conjunto engañoso tiene un tamaño de (2m )n = 2n m, y que el candidato a gana en cada vector de votos en el conjunto engañoso (en cada una de las elecciones por pares, a es clasificado más alto que su oponente por 2n +1 = (n+1)/2 > n/2 votos).",
        "Todo lo que queda por demostrar es que para cualquier par de vectores de votos distintos en el conjunto de engaño, podemos hacer que cada uno de los votantes vote de acuerdo con uno de estos dos vectores de tal manera que a pierda.",
        "Que el primer vector de votos corresponda al vector (S1 1 , S1 2 , . . . , S1 n ), y que el segundo vector de votos corresponda al vector (S2 1 , S2 2 , . . . , S2 n ).",
        "Para algunos i, debemos tener S1 i = S2 i, de modo que ya sea S1 i S2 i o S2 i S1 i.",
        "Sin pérdida de generalidad, supongamos que S1 i S2 i , y sea c algún candidato en S1 i − S2 i.",
        "Ahora, construye un nuevo vector de votos tomando los votos 4i − 3 y 4i − 2 del primer vector de votos, y los votos restantes del segundo vector de votos.",
        "En este nuevo vector de votación construido, a es clasificado más alto que c por solo 2n - 1 votantes, por la siguiente razón.",
        "Mientras que los votantes 4i−3 y 4i − 2 no clasifican a c por encima de a en el segundo vector de votos (porque c /∈ S2 i ), los votantes 4i − 3 y 4i − 2 sí clasifican a c por encima de a en el primer vector de votos (porque c ∈ S1 i ).",
        "Además, en cada una de las elecciones por pares de b, b es clasificado más alto que su oponente por al menos 2n votantes.",
        "Entonces, a tiene una puntuación maximin más baja que b, por lo tanto a no es el ganador en el vector de voto recién construido, y por lo tanto tenemos un conjunto de engaño correcto.",
        "Teorema 10.",
        "La complejidad de comunicación determinística de la regla STV es O(n(log m)2).",
        "Prueba.",
        "Considera el siguiente protocolo de comunicación.",
        "Que cada votante primero anuncie a su candidato más preferido (comunicación O(n log m)).",
        "En las rondas restantes, haremos un seguimiento del candidato más preferido de cada votante entre los candidatos restantes, lo cual será suficiente para implementar la regla.",
        "Cuando se elimina al candidato c, permita que cada uno de los votantes cuyo candidato más preferido entre los candidatos restantes era c anuncie su candidato más preferido entre los candidatos restantes después de la eliminación de c.",
        "Si el candidato c fue el candidato i-ésimo en ser eliminado (es decir, quedaban m − i + 1 candidatos antes de la eliminación de c), se sigue que como máximo n/(m − i + 1) votantes tenían al candidato c como su candidato más preferido entre los candidatos restantes, y por lo tanto, el número de bits a comunicar después de la eliminación del candidato i es O((n/(m−i+1)) log m). Así, la comunicación total en este protocolo de comunicación es O(n log m + m−1 i=1 (n/(m − i + 1)) log m).",
        "Por supuesto, m−1 i=1 1/(m − i + 1) = m i=2 1/i, lo cual es O(log m).",
        "Sustituyendo en la expresión anterior, encontramos que la complejidad de comunicación es O(n(log m)2).",
        "Teorema 11.",
        "La complejidad de comunicación no determinística de la regla STV es Ω(n log m) (incluso para decidir si un candidato dado a gana).",
        "Prueba.",
        "Omitimos esta prueba debido a la restricción de espacio. De hecho, O((n/(m − i + 1)) log(m − i + 1)) también es correcto, pero no mejorará el límite.",
        "Teorema 12.",
        "La complejidad de comunicación determinística de la regla de aprobación es O(nm).",
        "Prueba.",
        "Aprobar o desaprobar a un candidato solo requiere un bit de información, por lo que cada votante puede simplemente aprobar o desaprobar a cada candidato para una comunicación total de nm bits.",
        "Teorema 13.",
        "La complejidad de comunicación no determinista de la regla de aprobación es Ω(nm) (incluso para decidir si un candidato dado a gana).",
        "Prueba.",
        "Exhibiremos un conjunto de engaño de tamaño 2n m donde m = m − 1 y n = (n − 1)/4.",
        "Para cada vector (S1, S2, . . . , Sn) que consiste en n subconjuntos Si ⊆ C - {a}, deja que el siguiente vector de votos sea un elemento del conjunto engañoso: • Para 1 ≤ i ≤ n, deja que los votantes 4i - 3 y 4i - 2 aprueben Si ∪ {a}. • Para 1 ≤ i ≤ n, deja que los votantes 4i - 1 y 4i aprueben C - (Si ∪ {a}). • Deja que el votante 4n + 1 = n apruebe {a}.",
        "Observamos que este conjunto engañoso tiene un tamaño de (2m )n = 2n m, y que el candidato a gana en cada vector de votos en el conjunto engañoso (a es aprobado por 2n + 1 votantes, mientras que cada otro candidato es aprobado solo por 2n votantes).",
        "Todo lo que queda por demostrar es que para cualquier par de vectores de votos distintos en el conjunto de engaño, podemos hacer que cada uno de los votantes vote de acuerdo con uno de estos dos vectores de tal manera que a pierda.",
        "Que el primer vector de votos corresponda al vector (S1 1 , S1 2 , . . . , S1 n ), y que el segundo vector de votos corresponda al vector (S2 1 , S2 2 , . . . , S2 n ).",
        "Para algunos i, debemos tener S1 i = S2 i, de modo que ya sea S1 i S2 i o S2 i S1 i.",
        "Sin pérdida de generalidad, supongamos que S1 i S2 i , y sea b algún candidato en S1 i − S2 i.",
        "Ahora, construye un nuevo vector de votos tomando los votos 4i − 3 y 4i − 2 del primer vector de votos, y los votos restantes del segundo vector de votos.",
        "En este nuevo vector de votación construido, a sigue siendo aprobado por 2n + 1 votos.",
        "Sin embargo, b es aprobado por 2n + 2 votos, por la siguiente razón.",
        "Mientras que los votantes 4i−3 y 4i−2 no aprueban b en el segundo vector de votación (porque b /∈ S2 i), los votantes 4i−3 y 4i−2 sí aprueban b en el primer vector de votación (porque b ∈ S1 i).",
        "Se deduce que la puntuación bs en el vector de voto recién construido es la puntuación bs en el segundo vector de voto (2n), más dos.",
        "Por lo tanto, a no es el ganador en el vector de votación recién construido, y por lo tanto tenemos un conjunto de engaño correcto.",
        "Curiosamente, se puede obtener un límite inferior de Ω(m) incluso para el problema de encontrar un candidato que sea aprobado por más de un votante [20].",
        "Teorema 14.",
        "La complejidad de comunicación determinística de la regla de Condorcet es O(nm).",
        "Prueba.",
        "Mantenemos un conjunto de candidatos activos S que se inicializa en C. En cada etapa, elegimos dos de los candidatos activos (digamos, los dos candidatos con los índices más bajos), y permitimos que cada votante comunique cuál de los dos candidatos prefiere. (Tal etapa requiere la comunicación de n bits, uno por votante).",
        "El candidato preferido por menos de 84 votantes (el perdedor de la elección por pares) es eliminado de S. (Si la elección por pares está empatada, ambos candidatos son eliminados).",
        "Después de un máximo de m - 1 iteraciones, solo queda un candidato (o no queda ningún candidato, en cuyo caso no hay un ganador de Condorcet).",
        "Que a sea el candidato restante.",
        "Para averiguar si el candidato a es el ganador de Condorcet, permita que cada votante comunique, para cada candidato c = a, si prefiere a a c. (Esto requiere la comunicación de como máximo n(m − 1) bits).",
        "Esto es suficiente para determinar si a ganó cada una de sus elecciones por pares (y por lo tanto, si a es el ganador de Condorcet).",
        "Teorema 15.",
        "La complejidad de comunicación no determinística de la regla de Condorcet es Ω(nm) (incluso para decidir si un candidato dado a gana).",
        "Prueba.",
        "Exhibiremos un conjunto de engaño de tamaño 2n m donde m = m − 1 y n = (n − 1)/2.",
        "Para cada vector (S1, S2, . . . , Sn) que consiste en n subconjuntos Si ⊆ C − {a}, deja que el siguiente vector de votos sea un elemento del conjunto engañoso: • Para 1 ≤ i ≤ n, deja que el votante 2i − 1 clasifique a los candidatos Si a C − Si. • Para 1 ≤ i ≤ n, deja que el votante 2i clasifique a los candidatos C − Si a Si. • Deja que el votante 2n + 1 = n clasifique a los candidatos a C − {a}.",
        "Observamos que este conjunto engañoso tiene tamaño (2m )n = 2n m , y que el candidato a gana en cada vector de votos en el conjunto engañoso (a gana cada una de sus elecciones por parejas por un solo voto).",
        "Todo lo que queda por demostrar es que para cualquier par de vectores de votos distintos en el conjunto de engaño, podemos hacer que cada uno de los votantes vote de acuerdo con uno de estos dos vectores de tal manera que a pierda.",
        "Que el primer vector de votos corresponda al vector (S1 1 , S1 2 , . . . , S1 n ), y que el segundo vector de votos corresponda al vector (S2 1 , S2 2 , . . . , S2 n ).",
        "Para algunos i, debemos tener S1 i = S2 i, de modo que ya sea S1 i S2 i o S2 i S1 i.",
        "Sin pérdida de generalidad, supongamos que S1 i S2 i , y sea b algún candidato en S1 i − S2 i.",
        "Ahora, construye un nuevo vector de votos tomando el voto 2i − 1 del primer vector de votos y los votos restantes del segundo vector de votos.",
        "En este nuevo vector de votos construido, b gana su elección por pares contra a por un voto (el voto 2i − 1 coloca a b por encima de a en el nuevo vector de votos construido porque b ∈ S1 i, mientras que en el segundo vector de votos el voto 2i − 1 colocó a a por encima de b porque b /∈ S2 i).",
        "Por lo tanto, a no es el ganador de Condorcet en el vector de votación recién construido, y por lo tanto tenemos un conjunto de engaño correcto.",
        "Teorema 16.",
        "La complejidad de comunicación determinística de la regla de la taza es O(nm).",
        "Prueba.",
        "Considera el siguiente protocolo de comunicación simple.",
        "Primero, permitamos que todos los votantes se comuniquen, para cada uno de los enfrentamientos en la primera ronda, cuál de los dos candidatos prefieren.",
        "Después de esto, se conocen los emparejamientos para la segunda ronda, así que permitan que todos los votantes comuniquen qué candidato prefieren en cada emparejamiento en la segunda ronda, etc.",
        "Dado que comunicar cuál de los dos candidatos es preferido solo requiere un bit por votante, y dado que solo hay m − 1 enfrentamientos en total, este protocolo de comunicación requiere O(nm) comunicación.",
        "Teorema 17.",
        "La complejidad de comunicación no determinista de la regla de la copa es Ω(nm) (incluso para decidir si un candidato dado a gana).",
        "Prueba.",
        "Exhibiremos un conjunto engañoso de tamaño 2n m donde m = (m − 1)/2 y n = (n − 7)/2.",
        "Dado que m + 1 es una potencia de 2, de modo que un candidato recibe un pase (es decir, no se enfrenta a un oponente) en la primera ronda, sea a el candidato con el pase.",
        "De los emparejamientos de la primera ronda, dejemos que lj denote al candidato de la izquierda en el j-ésimo enfrentamiento, y dejemos que rj sea el otro candidato de la derecha.",
        "Sea L = {lj : 1 ≤ j ≤ m} y R = {rj : 1 ≤ j ≤ m}, de modo que C = L ∪ R ∪ {a}. . . . . . . . . . l r l r l r a m1 1 2 2 m Figura 1: El horario para la regla de la copa utilizada en la demostración del Teorema 17.",
        "Para cada vector (S1, S2, . . . , Sn) que consiste en n subconjuntos Si ⊆ R, dejemos que el siguiente vector de votos sea un elemento del conjunto engañoso: • Para 1 ≤ i ≤ n, dejemos que el votante 2i − 1 clasifique a los candidatos Si L a R − Si. • Para 1 ≤ i ≤ n, dejemos que el votante 2i clasifique a los candidatos R − Si L a Si. • Dejemos que los votantes 2n +1 = n−6, 2n +2 = n−5, 2n +3 = n−4 clasifiquen a los candidatos L a R. • Dejemos que los votantes 2n + 4 = n − 3, 2n + 5 = n − 2 clasifiquen a los candidatos a r1 l1 r2 l2 . . . rm lm. • Dejemos que los votantes 2n + 6 = n − 1, 2n + 7 = n clasifiquen a los candidatos rm lm rm −1 lm −1 . . . r1 l1 a.",
        "Observamos que este conjunto de engaño tiene tamaño (2m )n = 2n m.",
        "Además, el candidato a gana en cada vector de votos en el conjunto engañoso, por las siguientes razones.",
        "Cada candidato rj derrota a su oponente lj en la primera ronda. (Para cualquier 1 ≤ i ≤ n, el efecto neto de los votos 2i − 1 y 2i en la elección entre rj y lj es cero; los votos n − 6, n − 5, n − 4 prefieren a lj sobre rj, pero los votos n − 3, n − 2, n − 1, n prefieren a rj sobre lj).",
        "Además, a vence a cada rj en su elección por pares. (Para cualquier 1 ≤ i ≤ n, el efecto neto de los votos 2i − 1 y 2i en la elección por pares entre a y rj es cero; los votos n − 1, n prefieren a rj sobre a, pero los votos n − 6, n − 5, n − 4, n − 3, n − 2 todos prefieren a a rj.)",
        "Se deduce que una vencerá a todos los candidatos a los que se enfrente.",
        "Todo lo que queda por demostrar es que para cualquier par de vectores de votos distintos en el conjunto de engaño, podemos hacer que cada uno de los votantes vote de acuerdo con uno de estos dos vectores de tal manera que a pierda.",
        "Que el primer vector de votos corresponda al vector 85 (S1 1 , S1 2 , . . . , S1 n ), y que el segundo vector de votos corresponda al vector (S2 1 , S2 2 , . . . , S2 n ).",
        "Para algunos i, debemos tener S1 i = S2 i, de modo que sea S1 i S2 i o S2 i S1 i.",
        "Sin pérdida de generalidad, supongamos que S1 i S2 i , y dejemos que rj sea algún candidato en S1 i − S2 i.",
        "Ahora, construye un nuevo vector de votos tomando el voto 2i del primer vector de votos y los votos restantes del segundo vector de votos.",
        "Observamos que, mientras que en el segundo vector de votos el voto 2i prefirió a rj sobre lj (porque rj ∈ R−S2 i), en el nuevo vector de votos construido esto ya no es el caso (porque rj ∈ S1 i).",
        "Se deduce que, mientras que en el segundo vector de votos, rj venció a lj en la primera ronda por un voto, en el nuevo vector de votos construido, lj vence a rj en la primera ronda.",
        "Por lo tanto, al menos un lj avanza a la segunda ronda después de derrotar a su oponente rj.",
        "Ahora observamos que en el vector de votos recién construido, cualquier lk gana su elección de a pares contra cualquier rq con q = k. Esto se debe a que entre los primeros 2n votos, al menos n − 1 prefieren lk a rq; los votos n − 6, n − 5, n − 4 prefieren lk a rq; y, porque q = k, ya sea que los votos n − 3, n − 2 prefieran lk a rq (si k < q), o los votos n − 1, n prefieran lk a rq (si k > q).",
        "Por lo tanto, al menos n + 4 = (n + 1)/2 > n/2 votos prefieren lk a rq.",
        "Además, cualquier lk gana su elección de a uno a uno.",
        "Esto se debe a que solo los votos n − 3 y n − 2 prefieren a a lk.",
        "Se deduce que, después de la primera ronda, cualquier candidato superviviente lk solo puede perder un enfrentamiento contra otro candidato superviviente lk, por lo que uno de los lk debe ganar la elección.",
        "Por lo tanto, a no es el ganador en el vector de votación recién construido, y por lo tanto tenemos un conjunto de engaño correcto.",
        "Teorema 18.",
        "La complejidad de comunicación determinística de la regla de Bucklin es O(nm).",
        "Prueba.",
        "Sea l el entero mínimo para el cual hay un candidato que está clasificado entre los primeros l candidatos por más de la mitad de los votos.",
        "Realizaremos una búsqueda binaria para l. En cada punto, tendremos un límite inferior lL que es menor que l (inicializado en 0), y un límite superior lH que es al menos l (inicializado en m).",
        "Mientras que lH − lL > 1, continuamos averiguando si (lH − l)/2 es menor que l, después de lo cual podemos actualizar los límites.",
        "Para averiguar si un número k es menor que l, determinamos los candidatos más preferidos de cada votante k.",
        "Cada votante puede comunicar cuáles candidatos se encuentran entre sus k candidatos más preferidos usando m bits (para cada candidato, indicar si el candidato está entre los primeros k o no), pero debido a que la búsqueda binaria requiere log m iteraciones, esto nos da un límite superior de O((log m)nm), que no es lo suficientemente fuerte.",
        "Sin embargo, si lL < k < lH, y ya conocemos los candidatos más preferidos de un votante lL, así como sus candidatos más preferidos de lH, entonces el votante ya no necesita comunicar si los candidatos más preferidos de lL están entre sus k candidatos más preferidos (porque deben estarlo), y ya no necesita comunicar si los m−lH candidatos menos preferidos están entre sus k candidatos más preferidos (porque no pueden estarlo).",
        "Por lo tanto, el votante solo necesita comunicar lH −lL bits en cualquier etapa dada.",
        "Debido a que en cada etapa, lH − lL se reduce a la mitad (aproximadamente), cada votante en total comunica solo (aproximadamente) m + m/2 + m/4 + . . . ≤ 2m bits.",
        "Teorema 19.",
        "La complejidad de comunicación no determinista de la regla de Bucklin es Ω(nm) (incluso para decidir si un candidato dado a gana).",
        "Prueba.",
        "Exhibiremos un conjunto de engaño de tamaño 2n m donde m = (m−1)/2 y n = n/2.",
        "Escribimos el conjunto de candidatos como la siguiente unión disjunta: C = {a} ∪ L ∪ R donde L = {l1, l2, . . . , lm } y R = {r1, r2, . . . , rm }.",
        "Para cualquier subconjunto S ⊆ {1, 2, . . . , m}, sea L(S) = {li : i ∈ S} y sea R(S) = {ri : i ∈ S}.",
        "Para cada vector (S1, S2, . . . , Sn) que consiste en n conjuntos Si ⊆ {1, 2, . . . , m}, dejemos que el siguiente vector de votos sea un elemento del conjunto engañoso: • Para 1 ≤ i ≤ n, dejemos que el votante 2i − 1 clasifique a los candidatos L(Si) R − R(Si) a L − L(Si) R(Si). • Para 1 ≤ i ≤ n, dejemos que el votante 2i clasifique a los candidatos L − L(Si) R(Si) a L(Si) R − R(Si).",
        "Observamos que este conjunto engañoso tiene tamaño (2m )n = 2n m, y que el candidato a gana en cada vector de votos en el conjunto engañoso, por la siguiente razón.",
        "Cada candidato en C − {a} está clasificado entre los mejores m candidatos por exactamente la mitad de los votantes (lo cual no es suficiente para ganar).",
        "Por lo tanto, necesitamos analizar a los m +1 candidatos principales de los votantes, y a es clasificado en el puesto m +1 por todos los votantes.",
        "Todo lo que queda por demostrar es que para cualquier par de vectores de votos distintos en el conjunto de engaño, podemos hacer que cada uno de los votantes vote de acuerdo con uno de estos dos vectores de tal manera que a pierda.",
        "Que el primer vector de votos corresponda al vector (S1 1 , S1 2 , . . . , S1 n ), y que el segundo vector de votos corresponda al vector (S2 1 , S2 2 , . . . , S2 n ).",
        "Para algunos i, debemos tener S1 i = S2 i, de modo que sea S1 i S2 i o S2 i S1 i.",
        "Sin pérdida de generalidad, supongamos que S1 i S2 i , y sea j algún entero en S1 i − S2 i.",
        "Ahora, construye un nuevo vector de votos tomando el voto 2i − 1 del primer vector de votos, y los votos restantes del segundo vector de votos.",
        "En este nuevo vector de votos construido, a sigue siendo clasificado en el m + 1-ésimo lugar por todos los votos.",
        "Sin embargo, lj está clasificado entre los mejores m candidatos por n + 1 = n/2 + 1 votos.",
        "Esto se debe a que mientras que el voto 2i − 1 no clasifica a lj entre los m mejores candidatos en el segundo vector de votos (porque j /∈ S2 i , tenemos que lj /∈ L(S2 i )), el voto 2i − 1 sí clasifica a lj entre los m mejores candidatos en el primer vector de votos (porque j ∈ S1 i , tenemos que lj ∈ L(S1 i )).",
        "Por lo tanto, a no es el ganador en el vector de votación recién construido, y por lo tanto tenemos un conjunto de engaño correcto.",
        "Teorema 20.",
        "La complejidad de comunicación no determinista de la regla de pares clasificados es Ω(nm log m) (incluso para decidir si un candidato dado a gana).",
        "Prueba.",
        "Omitimos esta prueba debido a limitaciones de espacio. 5.",
        "DISCUSIÓN Un obstáculo clave para utilizar la votación como método de agregación de preferencias es la carga de comunicación que implica una elección para los votantes.",
        "Al reducir esta carga, puede ser factible llevar a cabo más elecciones sobre más temas.",
        "En última instancia, esto podría llevar a un cambio de un gobierno representativo a un sistema en el que la mayoría de los asuntos se decidan mediante referendos, una verdadera e-democracia.",
        "En este artículo, analizamos la complejidad de comunicación de las reglas de votación comunes.",
        "Conocer qué reglas de votación requieren poca comunicación es especialmente importante cuando el tema a votar es de tan poca importancia que se cumple lo siguiente: las partes involucradas están dispuestas a aceptar una regla que tiende a producir resultados ligeramente menos representativos de las preferencias de los votantes, si esta regla reduce significativamente la carga de comunicación para los votantes.",
        "La siguiente tabla resume los resultados que obtuvimos.",
        "Regla Límite inferior Límite superior pluralidad Ω(n log m) O(n log m) pluralidad con segunda vuelta Ω(n log m) O(n log m) Voto único transferible (STV) Ω(n log m) O(n(log m)2) Condorcet Ω(nm) O(nm) aprobación Ω(nm) O(nm) Bucklin Ω(nm) O(nm) taza Ω(nm) O(nm) maximin Ω(nm) O(nm) Borda Ω(nm log m) O(nm log m) Copeland Ω(nm log m) O(nm log m) pares clasificados Ω(nm log m) O(nm log m) Complejidad de comunicación de las reglas de votación, ordenadas de menor a mayor.",
        "Todos los límites superiores son deterministas (con la excepción de maximin, para el cual el mejor límite superior determinista que demostramos es O(nm log m)).",
        "Todos los límites inferiores se mantienen incluso para la comunicación no determinista y solo para determinar si un candidato dado a es el ganador.",
        "Una área de investigación futura es estudiar qué sucede cuando restringimos nuestra atención a protocolos de comunicación que no revelan información estratégicamente útil.",
        "Esta restricción puede invalidar algunos de los límites superiores que derivamos utilizando protocolos de comunicación multietapa.",
        "Además, todos nuestros límites son límites en el peor de los casos.",
        "Puede ser posible superar estos límites cuando la distribución de votos tiene una estructura adicional.",
        "Al decidir qué regla de votación utilizar para una elección, hay muchas consideraciones a tener en cuenta.",
        "Las reglas de votación que estudiamos en este documento son las más comunes que han resistido la prueba del tiempo.",
        "Una forma de seleccionar entre estas reglas es considerar los resultados recientes sobre complejidad.",
        "La tabla anterior muestra que desde una perspectiva de complejidad de comunicación, la pluralidad, la pluralidad con segunda vuelta y el voto único transferible son preferibles.",
        "Sin embargo, la pluralidad tiene la propiedad no deseada de que es fácil de manipular computacionalmente mediante votación estratégica [3, 7].",
        "La pluralidad con segunda vuelta es NP-duro de manipular por una coalición de votantes ponderados, o por un individuo que enfrenta incertidumbre correlacionada sobre los votos de los demás [7, 6].",
        "STV es NP-duro de manipular en esos escenarios también [7], pero también por un individuo con conocimiento perfecto de los votos de los demás (cuando el número de candidatos es ilimitado) [2].",
        "Por lo tanto, STV es más robusto, aunque puede requerir ligeramente más comunicación en el peor de los casos según la tabla anterior.",
        "Sin embargo, otros criterios de selección son la complejidad computacional para determinar si se ha obtenido suficiente información para declarar un ganador, y la de determinar la secuencia óptima de consultas [8]. 6.",
        "REFERENCIAS [1] Lawrence Ausubel y Paul Milgrom.",
        "Subastas ascendentes con ofertas de paquetes.",
        "Fronteras de la Economía Teórica, 1, 2002.",
        "No. 1, Artículo 1. [2] John Bartholdi, III y James Orlin.",
        "El voto único transferible resiste el voto estratégico.",
        "Elección Social y Bienestar, 8(4):341-354, 1991. [3] John Bartholdi, III, Craig Tovey y Michael Trick.",
        "La dificultad computacional de manipular una elección.",
        "Elección Social y Bienestar, 6(3):227-241, 1989. [4] Avrim Blum, Jeffrey Jackson, Tuomas Sandholm y Martin Zinkevich.",
        "Elicitación de preferencias y aprendizaje de consultas.",
        "Revista de Investigación en Aprendizaje Automático, 5:649-667, 2004. [5] Wolfram Conen y Tuomas Sandholm.",
        "Elicitación de preferencias en subastas combinatorias: Resumen extendido.",
        "En Actas de la Conferencia ACM sobre Comercio Electrónico (ACM-EC), páginas 256-259, 2001. [6] Vincent Conitzer, Jerome Lang y Tuomas Sandholm.",
        "¿Cuántos candidatos se necesitan para que las elecciones sean difíciles de manipular?",
        "En Aspectos Teóricos de la Racionalidad y el Conocimiento (TARK), páginas 201-214, 2003. [7] Vincent Conitzer y Tuomas Sandholm.",
        "Complejidad de manipular elecciones con pocos candidatos.",
        "En Actas de la Conferencia Nacional de Inteligencia Artificial (AAAI), páginas 314-319, 2002. [8] Vincent Conitzer y Tuomas Sandholm.",
        "Elicitación de votos: Complejidad y estrategia de prueba.",
        "En Actas de la Conferencia Nacional de Inteligencia Artificial (AAAI), páginas 392-397, 2002. [9] Sven de Vries, James Schummer y Rakesh V. Vohra.",
        "En subastas ascendentes de objetos heterogéneos, 2003.",
        "Borrador. [10] Allan Gibbard.",
        "Manipulación de esquemas de votación.",
        "Econometrica, 41:587-602, 1973. [11] Benoit Hudson y Tuomas Sandholm.",
        "Efectividad de tipos de consultas y políticas para la obtención de preferencias en subastas combinatorias.",
        "En la Conferencia Internacional sobre Agentes Autónomos y Sistemas Multiagente (AAMAS), páginas 386-393, 2004. [12] E Kushilevitz y N Nisan.",
        "Complejidad de la comunicación.",
        "Cambridge University Press, 1997. [13] Sebasti´en Lahaie y David Parkes.",
        "Aplicando algoritmos de aprendizaje a la obtención de preferencias.",
        "En Actas de la Conferencia de la ACM sobre Comercio Electrónico, 2004. [14] Noam Nisan e Ilya Segal.",
        "Los requisitos de comunicación de asignaciones eficientes y precios de apoyo.",
        "Revista de Teoría Económica, 2005.",
        "Próximamente. [15] David Parkes. iBundle: Una subasta de paquetes de precio ascendente eficiente.",
        "En Actas de la Conferencia de la ACM sobre Comercio Electrónico (ACM-EC), páginas 148-157, 1999. [16] Tuomas Sandholm.",
        "Una implementación del protocolo de red de contratos basada en cálculos de costos marginales.",
        "En Actas de la Conferencia Nacional de Inteligencia Artificial (AAAI), páginas 256-262, 1993. [17] Tuomas Sandholm y Craig Boutilier.",
        "Elicitación de preferencias en subastas combinatorias.",
        "En Peter Cramton, Yoav Shoham y Richard Steinberg, editores, Subastas Combinatorias, capítulo 10.",
        "MIT Press, 2005. [18] Paolo Santi, Vincent Conitzer y Tuomas Sandholm.",
        "Hacia una caracterización de la obtención de preferencias polinomiales con consultas de valor en subastas combinatorias.",
        "En la Conferencia sobre Teoría del Aprendizaje (COLT), páginas 1-16, 2004. [19] Mark Satterthwaite.",
        "In Spanish, the translation would be: \"Inmutabilidad estratégica y condiciones de Arrow: teoremas de existencia y correspondencia para procedimientos de votación y funciones de bienestar social.\"",
        "Revista de Teoría Económica, 10:187-217, 1975. [20] Ilya Segal.",
        "Los requisitos de comunicación de las reglas de elección social y los conjuntos de presupuesto de apoyo, 2004.",
        "Borrador.",
        "Presentado en el Taller DIMACS sobre Problemas Computacionales en el Diseño de Subastas, Universidad de Rutgers, Nueva Jersey, EE. UU. [21] Peter Wurman y Michael Wellman.",
        "AkBA: Una subasta combinatoria progresiva y de precio anónimo.",
        "En Actas de la Conferencia de la ACM sobre Comercio Electrónico (ACM-EC), páginas 21-29, 2000. [22] A. C. Yao.",
        "Algunas preguntas de complejidad relacionadas con la computación distribuida.",
        "En Actas del 11º simposio de ACM sobre teoría de la computación (STOC), páginas 209-213, 1979. [23] Martin Zinkevich, Avrim Blum y Tuomas Sandholm.",
        "En la obtención de preferencias en tiempo polinómico con consultas de valor.",
        "En Actas de la Conferencia de la ACM sobre Comercio Electrónico (ACM-EC), páginas 176-185, 2003. 87"
    ],
    "error_count": 0,
    "keys": {
        "preference": {
            "translated_key": "preferencia",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Communication Complexity of Common Voting Rules∗ Vincent Conitzer Carnegie Mellon University 5000 Forbes Avenue Pittsburgh, PA 15213, USA conitzer@cs.cmu.edu Tuomas Sandholm Carnegie Mellon University 5000 Forbes Avenue Pittsburgh, PA 15213, USA sandholm@cs.cmu.edu ABSTRACT We determine the communication complexity of the common voting rules.",
                "The rules (sorted by their communication complexity from low to high) are plurality, plurality with runoff, single transferable vote (STV), Condorcet, approval, Bucklin, cup, maximin, Borda, Copeland, and ranked pairs.",
                "For each rule, we first give a deterministic communication protocol and an upper bound on the number of bits communicated in it; then, we give a lower bound on (even the nondeterministic) communication requirements of the voting rule.",
                "The bounds match for all voting rules except STV and maximin.",
                "Categories and Subject Descriptors F.2 [Theory of Computation]: Analysis of Algorithms and Problem Complexity; J.4 [Computer Applications]: Social and Behavioral Sciences-Economics General Terms Algorithms, Economics, Theory 1.",
                "INTRODUCTION One key factor in the practicality of any <br>preference</br> aggregation rule is its communication burden.",
                "To successfully aggregate the agents preferences, it is usually not necessary for all the agents to report all of their <br>preference</br> information.",
                "Clever protocols that elicit the agents preferences partially and sequentially have the potential to dramatically reduce the required communication.",
                "This has at least the following advantages: • It can make <br>preference</br> aggregation feasible in settings where the total amount of <br>preference</br> information is too large to communicate. • Even when communicating all the preference information is feasible, reducing the communication requirements lessens the burden placed on the agents.",
                "This is especially true when the agents, rather than knowing all their preferences in advance, need to invest effort (such as computation or information gathering) to determine their preferences [16]. • It preserves (some of) the agents privacy.",
                "Most of the work on reducing the communication burden in <br>preference</br> aggregation has focused on resource allocation settings such as combinatorial auctions, in which an auctioneer auctions off a number of (possibly distinct) items in a single event.",
                "Because in a combinatorial auction, bidders can have separate valuations for each of an exponential number of possible bundles of items, this is a setting in which reducing the communication burden is especially crucial.",
                "This can be accomplished by supplementing the auctioneer with an elicitor that incrementally elicits parts of the bidders preferences on an as-needed basis, based on what the bidders have revealed about their preferences so far, as suggested by Conen and Sandholm [5].",
                "For example, the elicitor can ask for a bidders value for a specific bundle (value queries), which of two bundles the bidder prefers (order queries), which bundle he ranks kth or what the rank of a given bundle is (rank queries), which bundle he would purchase given a particular vector of prices (demand queries), etc.-until (at least) the final allocation can be determined.",
                "Experimentally, this yields drastic savings in <br>preference</br> revelation [11].",
                "Furthermore, if the agents valuation functions are drawn from certain natural subclasses, the elicitation problem can be solved using only polynomially many queries even in the worst case [23, 4, 13, 18, 14].",
                "For a review of <br>preference</br> elicitation in combinatorial auctions, see [17].",
                "Ascending combinatorial auctions are a well-known special form of <br>preference</br> elicitation, where the elicitor asks demand queries with increasing prices [15, 21, 1, 9].",
                "Finally, resource 78 allocation problems have also been studied from a communication complexity viewpoint, thereby deriving lower bounds on the required communication.",
                "For example, Nisan and Segal show that exponential communication is required even to obtain a surplus greater than that obtained by auctioning off all objects as a single bundle [14].",
                "Segal also studies social choice rules in general, and shows that for a large class of social choice rules, supporting budget sets must be revealed such that if every agent prefers the same outcome in her budget set, this proves the optimality of that outcome.",
                "Segal then uses this characterization to prove bounds on the communication required in resource allocation as well as matching settings [20].",
                "In this paper, we will focus on the communication requirements of a generally applicable subclass of social choice rules, commonly known as voting rules.",
                "In a voting setting, there is a set of candidate outcomes over which the voters express their preferences by submitting a vote (typically, a ranking of the candidates), and the winner (that is, the chosen outcome) is determined based on these votes.",
                "The communication required by voting rules can be large either because the number of voters is large (such as, for example, in national elections), or because the number of candidates is large (for example, the agents can vote over allocations of a number of resources), or both.",
                "Prior work [8] has studied elicitation in voting, studying how computationally hard it is to decide whether a winner can be determined with the information elicited so far, as well as how hard it is to find the optimal sequence of queries given perfect suspicions about the voters preferences.",
                "In addition, that paper discusses strategic (game-theoretic) issues introduced by elicitation.",
                "In contrast, in this paper, we are concerned with the worst-case number of bits that must be communicated to execute a given voting rule, when nothing is known in advance about the voters preferences.",
                "We determine the communication complexity of the common voting rules.",
                "For each rule, we first give an upper bound on the (deterministic) communication complexity by providing a communication protocol for it and analyzing how many bits need to be transmitted in this protocol. (Segals results [20] do not apply to most voting rules because most voting rules are not intersectionmonotonic (or even monotonic).1 ) For many of the voting rules under study, it turns out that one cannot do better than simply letting each voter immediately communicate all her (potentially relevant) information.",
                "However, for some rules (such as plurality with runoff, STV and cup) there is a straightforward multistage communication protocol that, with some analysis, can be shown to significantly outperform the immediate communication of all (potentially relevant) information.",
                "Finally, for some rules (such as the Condorcet and Bucklin rules), we need to introduce a more complex communication protocol to achieve the best possible upper 1 For two of the rules that we study that are intersectionmonotonic, namely the approval and Condorcet rules, Segals results can in fact be used to give alternative proofs of our lower bounds.",
                "We only give direct proofs for these rules here because 1) these direct proofs are among the easier ones in this paper, 2) the alternative proofs are nontrivial even given Segals results, and 3) a space constraint applies.",
                "However, we hope to also include the alternative proofs in a later version. bound.",
                "After obtaining the upper bounds, we show that they are tight by giving matching lower bounds on (even the nondeterministic) communication complexity of each voting rule.",
                "There are two exceptions: STV, for which our upper and lower bounds are apart by a factor log m; and maximin, for which our best deterministic upper bound is also a factor log m above the (nondeterministic) lower bound, although we give a nondeterministic upper bound that matches the lower bound. 2. REVIEW OF VOTING RULES In this section, we review the common voting rules that we study in this paper.",
                "A voting rule2 is a function mapping a vector of the n voters votes (i.e. preferences over candidates) to one of the m candidates (the winner) in the candidate set C. In some cases (such as the Condorcet rule), the rule may also declare that no winner exists.",
                "We do not concern ourselves with what happens in case of a tie between candidates (our lower bounds hold regardless of how ties are broken, and the communication protocols used for our upper bounds do not attempt to break the ties).",
                "All of the rules that we study are rank-based rules, which means that a vote is defined as an ordering of the candidates (with the exception of the plurality rule, for which a vote is a single candidate, and the approval rule, for which a vote is a subset of the candidates).",
                "We will consider the following voting rules. (For rules that define a score, the candidate with the highest score wins.) • scoring rules.",
                "Let α = α1, . . . , αm be a vector of integers such that α1 ≥ α2 . . . ≥ αm.",
                "For each voter, a candidate receives α1 points if it is ranked first by the voter, α2 if it is ranked second etc.",
                "The score sα of a candidate is the total number of points the candidate receives.",
                "The Borda rule is the scoring rule with α = m−1, m−2, . . . , 0 .",
                "The plurality rule is the scoring rule with α = 1, 0, . . . , 0 . • single transferable vote (STV).",
                "The rule proceeds through a series of m − 1 rounds.",
                "In each round, the candidate with the lowest plurality score (that is, the least number of voters ranking it first among the remaining candidates) is eliminated (and each of the votes for that candidate transfer to the next remaining candidate in the order given in that vote).",
                "The winner is the last remaining candidate. • plurality with run-off.",
                "In this rule, a first round eliminates all candidates except the two with the highest plurality scores.",
                "Votes are transferred to these as in the STV rule, and a second round determines the winner from these two. • approval.",
                "Each voter labels each candidate as either approved or disapproved.",
                "The candidate approved by the greatest number of voters wins. • Condorcet.",
                "For any two candidates i and j, let N(i, j) be the number of voters who prefer i to j.",
                "If there is a candidate i that is preferred to any other candidate by a majority of the voters (that is, N(i, j) > N(j, i) for all j = i-that is, i wins every pairwise election), then candidate i wins. 2 The term voting protocol is often used to describe the same concept, but we seek to draw a sharp distinction between the rule mapping preferences to outcomes, and the communication/elicitation protocol used to implement this rule. 79 • maximin (aka.",
                "Simpson).",
                "The maximin score of i is s(i) = minj=i N(i, j)-that is, is worst performance in a pairwise election.",
                "The candidate with the highest maximin score wins. • Copeland.",
                "For any two distinct candidates i and j, let C(i, j) = 1 if N(i, j) > N(j, i), C(i, j) = 1/2 if N(i, j) = N(j, i) and C(i, j) = 0 if N(i, j) < N(j, i).",
                "The Copeland score of candidate i is s(i) = j=i C(i, j). • cup (sequential binary comparisons).",
                "The cup rule is defined by a balanced3 binary tree T with one leaf per candidate, and an assignment of candidates to leaves (each leaf gets one candidate).",
                "Each non-leaf node is assigned the winner of the pairwise election of the nodes children; the candidate assigned to the root wins. • Bucklin.",
                "For any candidate i and integer l, let B(i, l) be the number of voters that rank candidate i among the top l candidates.",
                "The winner is arg mini(min{l : B(i, l) > n/2}).",
                "That is, if we say that a voter approves her top l candidates, then we repeatedly increase l by 1 until some candidate is approved by more than half the voters, and this candidate is the winner. • ranked pairs.",
                "This rule determines an order on all the candidates, and the winner is the candidate at the top of this order.",
                "Sort all ordered pairs of candidates (i, j) by N(i, j), the number of voters who prefer i to j.",
                "Starting with the pair (i, j) with the highest N(i, j), we lock in the result of their pairwise election (i j).",
                "Then, we move to the next pair, and we lock the result of their pairwise election.",
                "We continue to lock every pairwise result that does not contradict the ordering established so far.",
                "We emphasize that these definitions of voting rules do not concern themselves with how the votes are elicited from the voters; all the voting rules, including those that are suggestively defined in terms of rounds, are in actuality just functions mapping the vector of all the voters votes to a winner.",
                "Nevertheless, there are always many different ways of eliciting the votes (or the relevant parts thereof) from the voters.",
                "For example, in the plurality with runoff rule, one way of eliciting the votes is to ask every voter to declare her entire ordering of the candidates up front.",
                "Alternatively, we can first ask every voter to declare only her most preferred candidate; then, we will know the two candidates in the runoff, and we can ask every voter which of these two candidates she prefers.",
                "Thus, we distinguish between the voting rule (the mapping from vectors of votes to outcomes) and the communication protocol (which determines how the relevant parts of the votes are actually elicited from the voters).",
                "The goal of this paper is to give efficient communication protocols for the voting rules just defined, and to prove that there do not exist any more efficient communication protocols.",
                "It is interesting to note that the choice of the communication protocol may affect the strategic behavior of the voters.",
                "Multistage communication protocols may reveal to the voters some information about how the other voters are voting (for example, in the two-stage communication protocol just given for plurality with runoff, in the second stage voters 3 Balanced means that the difference in depth between two leaves can be at most one. will know which two candidates have the highest plurality scores).",
                "In general, when the voters receive such information, it may give them incentives to vote differently than they would have in a single-stage communication protocol in which all voters declare their entire votes simultaneously.",
                "Of course, even the single-stage communication protocol is not strategy-proof4 for any reasonable voting rule, by the Gibbard-Satterthwaite theorem [10, 19].",
                "However, this does not mean that we should not be concerned about adding even more opportunities for strategic voting.",
                "In fact, many of the communication protocols introduced in this paper do introduce additional opportunities for strategic voting, but we do not have the space to discuss this here. (In prior work [8], we do give an example where an elicitation protocol for the approval voting rule introduces strategic voting, and give principles for designing elicitation protocols that do not introduce strategic problems.)",
                "Now that we have reviewed voting rules, we move on to a brief review of communication complexity theory. 3. REVIEW OF SOME COMMUNICATION COMPLEXITY THEORY In this section, we review the basic model of a communication problem and the lower-bounding technique of constructing a fooling set. (The basic model of a communication problem is due to Yao [22]; for an overview see Kushilevitz and Nisan [12].)",
                "Each player 1 ≤ i ≤ n knows (only) input xi.",
                "Together, they seek to compute f(x1, x2, . . . , xn).",
                "In a deterministic protocol for computing f, in each stage, one of the players announces (to all other players) a bit of information based on her own input and the bits announced so far.",
                "Eventually, the communication terminates and all players know f(x1, x2, . . . , xn).",
                "The goal is to minimize the worst-case (over all input vectors) number of bits sent.",
                "The deterministic communication complexity of a problem is the worstcase number of bits sent in the best (correct) deterministic protocol for it.",
                "In a nondeterministic protocol, the next bit to be sent can be chosen nondeterministically.",
                "For the purposes of this paper, we will consider a nondeterministic protocol correct if for every input vector, there is some sequence of nondeterministic choices the players can make so that the players know the value of f when the protocol terminates.",
                "The nondeterministic communication complexity of a problem is the worst-case number of bits sent in the best (correct) nondeterministic protocol for it.",
                "We are now ready to give the definition of a fooling set.",
                "Definition 1.",
                "A fooling set is a set of input vectors {(x1 1, x1 2, . . . , x1 n), (x2 1, x2 2, . . . , x2 n), . . . , (xk 1 , xk 2 , . . . , xk n) such that for any i, f(xi 1, xi 2, . . . , xi n) = f0 for some constant f0, but for any i = j, there exists some vector (r1, r2, . . . , rn) ∈ {i, j}n such that f(xr1 1 , xr2 2 , . . . , xrn n ) = f0. (That is, we can mix the inputs from the two input vectors to obtain a vector with a different function value.)",
                "It is known that if a fooling set of size k exists, then log k is a lower bound on the communication complexity (even the nondeterministic communication complexity) [12]. 4 A strategy-proof protocol is one in which it is in the players best interest to report their preferences truthfully. 80 For the purposes of this paper, f is the voting rule that maps the votes to the winning candidate, and xi is voter is vote (the information that the voting rule would require from the voter if there were no possibility of multistage communication-i.e. the most preferred candidate (plurality), the approved candidates (approval), or the ranking of all the candidates (all other protocols)).",
                "However, when we derive our lower bounds, f will only signify whether a distinguished candidate a wins. (That is, f is 1 if a wins, and 0 otherwise.)",
                "This will strengthen our lower bound results (because it implies that even finding out whether one given candidate wins is hard).5 Thus, a fooling set in our context is a set of vectors of votes so that a wins (does not win) with each of them; but for any two different vote vectors in the set, there is a way of taking some voters votes from the first vector and the others votes from the second vector, so that a does not win (wins).",
                "To simplify the proofs of our lower bounds, we make assumptions such as the number of voters n is odd in many of these proofs.",
                "Therefore, technically, we do not prove the lower bound for (number of candidates, number of voters) pairs (m, n) that do not satisfy these assumptions (for example, if we make the above assumption, then we technically do not prove the lower bound for any pair (m, n) in which n is even).",
                "Nevertheless, we always prove the lower bound for a representative set of (m, n) pairs.",
                "For example, for every one of our lower bounds it is the case that for infinitely many values of m, there are infinitely many values of n such that the lower bound is proved for the pair (m, n). 4.",
                "RESULTS We are now ready to present our results.",
                "For each voting rule, we first give a deterministic communication protocol for determining the winner to establish an upper bound.",
                "Then, we give a lower bound on the nondeterministic communication complexity (even on the complexity of deciding whether a given candidate wins, which is an easier question).",
                "The lower bounds match the upper bounds in all but two cases: the STV rule (upper bound O(n(log m)2 ); lower bound Ω(n log m)) and the maximin rule (upper bound O(nm log m), although we do give a nondeterministic protocol that is O(nm); lower bound Ω(nm)).",
                "When we discuss a voting rule in which the voters rank the candidates, we will represent a ranking in which candidate c1 is ranked first, c2 is ranked second, etc. as c1 c2 . . . cm. 5 One possible concern is that in the case where ties are possible, it may require much communication to verify whether a specific candidate a is among the winners, but little communication to produce one of the winners.",
                "However, all the fooling sets we use in the proofs have the property that if a wins, then a is the unique winner.",
                "Therefore, in these fooling sets, if one knows any one of the winners, then one knows whether a is a winner.",
                "Thus, computing one of the winners requires at least as much communication as verifying whether a is among the winners.",
                "In general, when a communication problem allows multiple correct answers for a given vector of inputs, this is known as computing a relation rather than a function [12].",
                "However, as per the above, we can restrict our attention to a subset of the domain where the voting rule truly is a (single-valued) function, and hence lower bounding techniques for functions rather than relations will suffice.",
                "Sometimes for the purposes of a proof the internal ranking of a subset of the candidates does not matter, and in this case we will not specify it.",
                "For example, if S = {c2, c3}, then c1 S c4 indicates that either the ranking c1 c2 c3 c4 or the ranking c1 c3 c2 c4 can be used for the proof.",
                "We first give a universal upper bound.",
                "Theorem 1.",
                "The deterministic communication complexity of any rank-based voting rule is O(nm log m).",
                "Proof.",
                "This bound is achieved by simply having everyone communicate their entire ordering of the candidates (indicating the rank of an individual candidate requires only O(log m) bits, so each of the n voters can simply indicate the rank of each of the m candidates).",
                "The next lemma will be useful in a few of our proofs.",
                "Lemma 1.",
                "If m divides n, then log(n! )−m log((n/m)!) ≥ n(log m − 1)/2.",
                "Proof.",
                "If n/m = 1 (that is, n = m), then this expression simplifies to log(n!).",
                "We have log(n!) = n i=1 log i ≥ n x=1 log(i)dx, which, using integration by parts, is equal to n log n − (n − 1) > n(log n − 1) = n(log m − 1) > n(log m − 1)/2.",
                "So, we can assume that n/m ≥ 2.",
                "We observe that log(n!) = n i=1 log i = n/m−1 i=0 m j=1 log(im+j) ≥ n/m−1 i=1 m j=1 log(im) = m n/m−1 i=1 log(im), and that m log((n/m)!) = m n/m i=1 log(i).",
                "Therefore, log(n!) − m log((n/m)!) ≥ m n/m−1 i=1 log(im) − m n/m i=1 log(i) = m(( n/m−1 i=1 log(im/i))−log(n/m)) = m((n/m− 1) log m−log n+log m) = n log m−m log n. Now, using the fact that n/m ≥ 2, we have m log n = n(m/n) log m(n/m) = n(m/n)(log m + log(n/m)) ≤ n(1/2)(log m + log 2).",
                "Thus, log(n!) − m log((n/m)!) ≥ n log m − m log n ≥ n log m − n(1/2)(log m + log 2) = n(log m − 1)/2.",
                "Theorem 2.",
                "The deterministic communication complexity of the plurality rule is O(n log m).",
                "Proof.",
                "Indicating one of the candidates requires only O(log m) bits, so each voter can simply indicate her most preferred candidate.",
                "Theorem 3.",
                "The nondeterministic communication complexity of the plurality rule is Ω(n log m) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We will exhibit a fooling set of size n ! (( n m )! )m where n = (n−1)/2.",
                "Taking the logarithm of this gives log(n ! )− m log((n /m)! ), so the result follows from Lemma 1.",
                "The fooling set will consist of all vectors of votes satisfying the following constraints: • For any 1 ≤ i ≤ n , voters 2i−1 and 2i vote the same. 81 • Every candidate receives equally many votes from the first 2n = n − 1 voters. • The last voter (voter n) votes for a.",
                "Candidate a wins with each one of these vote vectors because of the extra vote for a from the last voter.",
                "Given that m divides n , let us see how many vote vectors there are in the fooling set.",
                "We need to distribute n voter pairs evenly over m candidates, for a total of n /m voter pairs per candidate; and there are precisely n ! (( n m )! )m ways of doing this.6 All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses.",
                "Let i be a number such that the two vote vectors disagree on the candidate for which voters 2i − 1 and 2i vote.",
                "Without loss of generality, suppose that in the first vote vector, these voters do not vote for a (but for some other candidate, b, instead).",
                "Now, construct a new vote vector by taking votes 2i − 1 and 2i from the first vote vector, and the remaining votes from the second vote vector.",
                "Then, b receives 2n /m + 2 votes in this newly constructed vote vector, whereas a receives at most 2n /m+1 votes.",
                "So, a is not the winner in the newly constructed vote vector, and hence we have a correct fooling set.",
                "Theorem 4.",
                "The deterministic communication complexity of the plurality with runoff rule is O(n log m).",
                "Proof.",
                "First, let every voter indicate her most preferred candidate using log m bits.",
                "After this, the two candidates in the runoff are known, and each voter can indicate which one she prefers using a single additional bit.",
                "Theorem 5.",
                "The nondeterministic communication complexity of the plurality with runoff rule is Ω(n log m) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We will exhibit a fooling set of size n ! (( n m )! )m where m = m/2 and n = (n − 2)/4.",
                "Taking the logarithm of this gives log(n !) − m log((n /m )! ), so the result follows from Lemma 1.",
                "Divide the candidates into m pairs: (c1, d1), (c2, d2), . . . , (cm , dm ) where c1 = a and d1 = b.",
                "The fooling set will consist of all vectors of votes satisfying the following constraints: • For any 1 ≤ i ≤ n , voters 4i − 3 and 4i − 2 rank the candidates ck(i) a C − {a, ck(i)}, for some candidate ck(i). (If ck(i) = a then the vote is simply a C − {a}.) • For any 1 ≤ i ≤ n , voters 4i − 1 and 4i rank the candidates dk(i) a C − {a, dk(i)} (that is, their most preferred candidate is the candidate that is paired with the candidate that the previous two voters vote for). 6 An intuitive proof of this is the following.",
                "We can count the number of permutations of n elements as follows.",
                "First, divide the elements into m buckets of size n /m, so that if x is placed in a lower-indexed bucket than y, then x will be indexed lower in the eventual permutation.",
                "Then, decide on the permutation within each bucket (for which there are (n /m)! choices per bucket).",
                "It follows that n ! equals the number of ways to divide n elements into m buckets of size n /m, times ((n /m)! )m . • Every candidate is ranked at the top of equally many of the first 4n = n − 2 votes. • Voter 4n +1 = n−1 ranks the candidates a C−{a}. • Voter 4n + 2 = n ranks the candidates b C − {b}.",
                "Candidate a wins with each one of these vote vectors: because of the last two votes, candidates a and b are one vote ahead of all the other candidates and continue to the runoff, and at this point all the votes that had another candidate ranked at the top transfer to a, so that a wins the runoff.",
                "Given that m divides n , let us see how many vote vectors there are in the fooling set.",
                "We need to distribute n groups of four voters evenly over the m pairs of candidates, and (as in the proof of Theorem 3) there are n ! (( n m )! )m ways of doing this.",
                "All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses.",
                "Let i be a number such that ck(i) is not the same in both of these two vote vectors, that is, c1 k(i) (ck(i) in the first vote vector) is not equal to c2 k(i) (ck(i) in the second vote vector).",
                "Without loss of generality, suppose c1 k(i) = a.",
                "Now, construct a new vote vector by taking votes 4i − 3, 4i − 2, 4i − 1, 4i from the first vote vector, and the remaining votes from the second vote vector.",
                "In this newly constructed vote vector, c1 k(i) and d1 k(i) each receive 4n /m+2 votes in the first round, whereas a receives at most 4n /m+1 votes.",
                "So, a does not continue to the runoff in the newly constructed vote vector, and hence we have a correct fooling set.",
                "Theorem 6.",
                "The nondeterministic communication complexity of the Borda rule is Ω(nm log m) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We will exhibit a fooling set of size (m ! )n where m = m−2 and n = (n−2)/4.",
                "This will prove the theorem because m ! is Ω(m log m), so that log((m ! )n ) = n log(m !) is Ω(nm log m).",
                "For every vector (π1, π2, . . . , πn ) consisting of n orderings of all candidates other than a and another fixed candidate b (technically, the orderings take the form of a one-to-one function πi : {1, 2, . . . , m } → C − {a, b} with πi(j) = c indicating that candidate c is the jth in the order represented by πi), let the following vector of votes be an element of the fooling set: • For 1 ≤ i ≤ n , let voters 4i − 3 and 4i − 2 rank the candidates a b πi(1) πi(2) . . . πi(m ). • For 1 ≤ i ≤ n , let voters 4i − 1 and 4i rank the candidates πi(m ) πi(m − 1) . . . πi(1) b a. • Let voter 4n + 1 = n − 1 rank the candidates a b π0(1) π0(2) . . . π0(m ) (where π0 is an arbitrary order of the candidates other than a and b which is the same for every element of the fooling set). • Let voter 4n + 2 = n rank the candidates π0(m ) π0(m − 1) . . . π0(1) a b.",
                "We observe that this fooling set has size (m ! )n , and that candidate a wins in each vector of votes in the fooling set (to 82 see why, we observe that for any 1 ≤ i ≤ n , votes 4i−3 and 4i − 2 rank the candidates in the exact opposite way from votes 4i − 1 and 4i, which under the Borda rule means they cancel out; and the last two votes give one more point to a than to any other candidate-besides b who gets two fewer points than a).",
                "All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses.",
                "Let the first vote vector correspond to the vector (π1 1, π1 2, . . . , π1 n ), and let the second vote vector correspond to the vector (π2 1, π2 2, . . . , π2 n ).",
                "For some i, we must have π1 i = π2 i , so that for some candidate c /∈ {a, b}, (π1 i )−1 (c) < (π2 i )−1 (c) (that is, c is ranked higher in π1 i than in π2 i ).",
                "Now, construct a new vote vector by taking votes 4i−3 and 4i−2 from the first vote vector, and the remaining votes from the second vote vector. as Borda score remains unchanged.",
                "However, because c is ranked higher in π1 i than in π2 i , c receives at least 2 more points from votes 4i−3 and 4i − 2 in the newly constructed vote vector than it did in the second vote vector.",
                "It follows that c has a higher Borda score than a in the newly constructed vote vector.",
                "So, a is not the winner in the newly constructed vote vector, and hence we have a correct fooling set.",
                "Theorem 7.",
                "The nondeterministic communication complexity of the Copeland rule is Ω(nm log m) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We will exhibit a fooling set of size (m ! )n where m = (m − 2)/2 and n = (n − 2)/2.",
                "This will prove the theorem because m ! is Ω(m log m), so that log((m ! )n ) = n log(m !) is Ω(nm log m).",
                "We write the set of candidates as the following disjoint union: C = {a, b} ∪ L ∪ R where L = {l1, l2, . . . , lm } and R = {r1, r2, . . . , rm }.",
                "For every vector (π1, π2, . . . , πn ) consisting of n permutations of the integers 1 through m (πi : {1, 2, . . . , m } → {1, 2, . . . , m }), let the following vector of votes be an element of the fooling set: • For 1 ≤ i ≤ n , let voter 2i − 1 rank the candidates a b lπi(1) rπi(1) lπi(2) rπi(2) . . . lπi(m ) rπi(m ). • For 1 ≤ i ≤ n , let voter 2i rank the candidates rπi(m ) lπi(m ) rπi(m −1) lπi(m −1) . . . rπi(1) lπi(1) b a. • Let voter n − 1 = 2n + 1 rank the candidates a b l1 r1 l2 r2 . . . lm rm . • Let voter n = 2n +2 rank the candidates rm lm rm −1 lm −1 . . . r1 l1 a b.",
                "We observe that this fooling set has size (m ! )n , and that candidate a wins in each vector of votes in the fooling set (every pair of candidates is tied in their pairwise election, with the exception that a defeats b, so that a wins the election by half a point).",
                "All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses.",
                "Let the first vote vector correspond to the vector (π1 1, π1 2, . . . , π1 n ), and let the second vote vector correspond to the vector (π2 1, π2 2, . . . , π2 n ).",
                "For some i, we must have π1 i = π2 i , so that for some j ∈ {1, 2, . . . , m }, we have (π1 i )−1 (j) < (π2 i )−1 (j).",
                "Now, construct a new vote vector by taking vote 2i−1 from the first vote vector, and the remaining votes from the second vote vector. as Copeland score remains unchanged.",
                "Let us consider the score of lj.",
                "We first observe that the rank of lj in vote 2i − 1 in the newly constructed vote vector is at least 2 higher than it was in the second vote vector, because (π1 i )−1 (j) < (π2 i )−1 (j).",
                "Let D1 (lj) be the set of candidates in L ∪ R that voter 2i − 1 ranked lower than lj in the first vote vector (D1 (lj) = {c ∈ L ∪ R : lj 1 2i−1 c}), and let D2 (lj) be the set of candidates in L ∪ R that voter 2i − 1 ranked lower than lj in the second vote vector (D2 (lj) = {c ∈ L ∪ R : lj 2 2i−1 c}).",
                "Then, it follows that in the newly constructed vote vector, lj defeats all the candidates in D1 (lj) − D2 (lj) in their pairwise elections (because lj receives an extra vote in each one of these pairwise elections relative to the second vote vector), and loses to all the candidates in D2 (lj) − D1 (lj) (because lj loses a vote in each one of these pairwise elections relative to the second vote vector), and ties with everyone else.",
                "But |D1 (lj)|−|D2 (lj)| ≥ 2, and hence |D1 (lj) − D2 (lj)| − |D2 (lj) − D1 (lj)| ≥ 2.",
                "Hence, in the newly constructed vote vector, lj has at least two more pairwise wins than pairwise losses, and therefore has at least 1 more point than if lj had tied all its pairwise elections.",
                "Thus, lj has a higher Copeland score than a in the newly constructed vote vector.",
                "So, a is not the winner in the newly constructed vote vector, and hence we have a correct fooling set.",
                "Theorem 8.",
                "The nondeterministic communication complexity of the maximin rule is O(nm).",
                "Proof.",
                "The nondeterministic protocol will guess which candidate w is the winner, and, for each other candidate c, which candidate o(c) is the candidate against whom c receives its lowest score in a pairwise election.",
                "Then, let every voter communicate the following: • for each candidate c = w, whether she prefers c to w; • for each candidate c = w, whether she prefers c to o(c).",
                "We observe that this requires the communication of 2n(m− 1) bits.",
                "If the guesses were correct, then, letting N(d, e) be the number of voters preferring candidate d to candidate e, we should have N(c, o(c)) < N(w, c ) for any c = w, c = w, which will prove that w wins the election.",
                "Theorem 9.",
                "The nondeterministic communication complexity of the maximin rule is Ω(nm) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We will exhibit a fooling set of size 2n m where m = m − 2 and n = (n − 1)/4.",
                "Let b be a candidate other than a.",
                "For every vector (S1, S2, . . . , Sn ) consisting of n subsets Si ⊆ C − {a, b}, let the following vector of votes be an element of the fooling set: • For 1 ≤ i ≤ n , let voters 4i − 3 and 4i − 2 rank the candidates Si a C − (Si ∪ {a, b}) b. • For 1 ≤ i ≤ n , let voters 4i − 1 and 4i rank the candidates b C − (Si ∪ {a, b}) a Si. 83 • Let voter 4n + 1 = n rank the candidates a b C − {a, b}.",
                "We observe that this fooling set has size (2m )n = 2n m , and that candidate a wins in each vector of votes in the fooling set (in every one of as pairwise elections, a is ranked higher than its opponent by 2n +1 = (n+1)/2 > n/2 votes).",
                "All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses.",
                "Let the first vote vector correspond to the vector (S1 1 , S1 2 , . . . , S1 n ), and let the second vote vector correspond to the vector (S2 1 , S2 2 , . . . , S2 n ).",
                "For some i, we must have S1 i = S2 i , so that either S1 i S2 i or S2 i S1 i .",
                "Without loss of generality, suppose S1 i S2 i , and let c be some candidate in S1 i − S2 i .",
                "Now, construct a new vote vector by taking votes 4i − 3 and 4i − 2 from the first vote vector, and the remaining votes from the second vote vector.",
                "In this newly constructed vote vector, a is ranked higher than c by only 2n −1 voters, for the following reason.",
                "Whereas voters 4i−3 and 4i − 2 do not rank c higher than a in the second vote vector (because c /∈ S2 i ), voters 4i − 3 and 4i − 2 do rank c higher than a in the first vote vector (because c ∈ S1 i ).",
                "Moreover, in every one of bs pairwise elections, b is ranked higher than its opponent by at least 2n voters.",
                "So, a has a lower maximin score than b, therefore a is not the winner in the newly constructed vote vector, and hence we have a correct fooling set.",
                "Theorem 10.",
                "The deterministic communication complexity of the STV rule is O(n(log m)2 ).",
                "Proof.",
                "Consider the following communication protocol.",
                "Let each voter first announce her most preferred candidate (O(n log m) communication).",
                "In the remaining rounds, we will keep track of each voters most preferred candidate among the remaining candidates, which will be enough to implement the rule.",
                "When candidate c is eliminated, let each of the voters whose most preferred candidate among the remaining candidates was c announce their most preferred candidate among the candidates remaining after cs elimination.",
                "If candidate c was the ith candidate to be eliminated (that is, there were m − i + 1 candidates remaining before cs elimination), it follows that at most n/(m − i + 1) voters had candidate c as their most preferred candidate among the remaining candidates, and thus the number of bits to be communicated after the elimination of the ith candidate is O((n/(m−i+1)) log m).7 Thus, the total communication in this communication protocol is O(n log m + m−1 i=1 (n/(m − i + 1)) log m).",
                "Of course, m−1 i=1 1/(m − i + 1) = m i=2 1/i, which is O(log m).",
                "Substituting into the previous expression, we find that the communication complexity is O(n(log m)2 ).",
                "Theorem 11.",
                "The nondeterministic communication complexity of the STV rule is Ω(n log m) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We omit this proof because of space constraint. 7 Actually, O((n/(m − i + 1)) log(m − i + 1)) is also correct, but it will not improve the bound.",
                "Theorem 12.",
                "The deterministic communication complexity of the approval rule is O(nm).",
                "Proof.",
                "Approving or disapproving of a candidate requires only one bit of information, so every voter can simply approve or disapprove of every candidate for a total communication of nm bits.",
                "Theorem 13.",
                "The nondeterministic communication complexity of the approval rule is Ω(nm) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We will exhibit a fooling set of size 2n m where m = m − 1 and n = (n − 1)/4.",
                "For every vector (S1, S2, . . . , Sn ) consisting of n subsets Si ⊆ C − {a}, let the following vector of votes be an element of the fooling set: • For 1 ≤ i ≤ n , let voters 4i − 3 and 4i − 2 approve Si ∪ {a}. • For 1 ≤ i ≤ n , let voters 4i − 1 and 4i approve C − (Si ∪ {a}). • Let voter 4n + 1 = n approve {a}.",
                "We observe that this fooling set has size (2m )n = 2n m , and that candidate a wins in each vector of votes in the fooling set (a is approved by 2n + 1 voters, whereas each other candidate is approved by only 2n voters).",
                "All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses.",
                "Let the first vote vector correspond to the vector (S1 1 , S1 2 , . . . , S1 n ), and let the second vote vector correspond to the vector (S2 1 , S2 2 , . . . , S2 n ).",
                "For some i, we must have S1 i = S2 i , so that either S1 i S2 i or S2 i S1 i .",
                "Without loss of generality, suppose S1 i S2 i , and let b be some candidate in S1 i − S2 i .",
                "Now, construct a new vote vector by taking votes 4i − 3 and 4i − 2 from the first vote vector, and the remaining votes from the second vote vector.",
                "In this newly constructed vote vector, a is still approved by 2n + 1 votes.",
                "However, b is approved by 2n + 2 votes, for the following reason.",
                "Whereas voters 4i−3 and 4i−2 do not approve b in the second vote vector (because b /∈ S2 i ), voters 4i − 3 and 4i − 2 do approve b in the first vote vector (because b ∈ S1 i ).",
                "It follows that bs score in the newly constructed vote vector is bs score in the second vote vector (2n ), plus two.",
                "So, a is not the winner in the newly constructed vote vector, and hence we have a correct fooling set.",
                "Interestingly, an Ω(m) lower bound can be obtained even for the problem of finding a candidate that is approved by more than one voter [20].",
                "Theorem 14.",
                "The deterministic communication complexity of the Condorcet rule is O(nm).",
                "Proof.",
                "We maintain a set of active candidates S which is initialized to C. At each stage, we choose two of the active candidates (say, the two candidates with the lowest indices), and we let each voter communicate which of the two candidates she prefers. (Such a stage requires the communication of n bits, one per voter.)",
                "The candidate preferred by fewer 84 voters (the loser of the pairwise election) is removed from S. (If the pairwise election is tied, both candidates are removed.)",
                "After at most m − 1 iterations, only one candidate is left (or zero candidates are left, in which case there is no Condorcet winner).",
                "Let a be the remaining candidate.",
                "To find out whether candidate a is the Condorcet winner, let each voter communicate, for every candidate c = a, whether she prefers a to c. (This requires the communication of at most n(m − 1) bits.)",
                "This is enough to establish whether a won each of its pairwise elections (and thus, whether a is the Condorcet winner).",
                "Theorem 15.",
                "The nondeterministic communication complexity of the Condorcet rule is Ω(nm) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We will exhibit a fooling set of size 2n m where m = m − 1 and n = (n − 1)/2.",
                "For every vector (S1, S2, . . . , Sn ) consisting of n subsets Si ⊆ C − {a}, let the following vector of votes be an element of the fooling set: • For 1 ≤ i ≤ n , let voter 2i − 1 rank the candidates Si a C − Si. • For 1 ≤ i ≤ n , let voter 2i rank the candidates C − Si a Si. • Let voter 2n +1 = n rank the candidates a C −{a}.",
                "We observe that this fooling set has size (2m )n = 2n m , and that candidate a wins in each vector of votes in the fooling set (a wins each of its pairwise elections by a single vote).",
                "All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses.",
                "Let the first vote vector correspond to the vector (S1 1 , S1 2 , . . . , S1 n ), and let the second vote vector correspond to the vector (S2 1 , S2 2 , . . . , S2 n ).",
                "For some i, we must have S1 i = S2 i , so that either S1 i S2 i or S2 i S1 i .",
                "Without loss of generality, suppose S1 i S2 i , and let b be some candidate in S1 i − S2 i .",
                "Now, construct a new vote vector by taking vote 2i − 1 from the first vote vector, and the remaining votes from the second vote vector.",
                "In this newly constructed vote vector, b wins its pairwise election against a by one vote (vote 2i − 1 ranks b above a in the newly constructed vote vector because b ∈ S1 i , whereas in the second vote vector vote 2i − 1 ranked a above b because b /∈ S2 i ).",
                "So, a is not the Condorcet winner in the newly constructed vote vector, and hence we have a correct fooling set.",
                "Theorem 16.",
                "The deterministic communication complexity of the cup rule is O(nm).",
                "Proof.",
                "Consider the following simple communication protocol.",
                "First, let all the voters communicate, for every one of the matchups in the first round, which of its two candidates they prefer.",
                "After this, the matchups for the second round are known, so let all the voters communicate which candidate they prefer in each matchup in the second round-etc.",
                "Because communicating which of two candidates is preferred requires only one bit per voter, and because there are only m − 1 matchups in total, this communication protocol requires O(nm) communication.",
                "Theorem 17.",
                "The nondeterministic communication complexity of the cup rule is Ω(nm) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We will exhibit a fooling set of size 2n m where m = (m − 1)/2 and n = (n − 7)/2.",
                "Given that m + 1 is a power of 2, so that one candidate gets a bye (that is, does not face an opponent) in the first round, let a be the candidate with the bye.",
                "Of the m first-round matchups, let lj denote the one (left) candidate in the jth matchup, and let rj be the other (right) candidate.",
                "Let L = {lj : 1 ≤ j ≤ m } and R = {rj : 1 ≤ j ≤ m }, so that C = L ∪ R ∪ {a}. . . . . . . . . . l r l r l r a m1 1 2 2 m Figure 1: The schedule for the cup rule used in the proof of Theorem 17.",
                "For every vector (S1, S2, . . . , Sn ) consisting of n subsets Si ⊆ R, let the following vector of votes be an element of the fooling set: • For 1 ≤ i ≤ n , let voter 2i − 1 rank the candidates Si L a R − Si. • For 1 ≤ i ≤ n , let voter 2i rank the candidates R − Si L a Si. • Let voters 2n +1 = n−6, 2n +2 = n−5, 2n +3 = n−4 rank the candidates L a R. • Let voters 2n + 4 = n − 3, 2n + 5 = n − 2 rank the candidates a r1 l1 r2 l2 . . . rm lm . • Let voters 2n + 6 = n − 1, 2n + 7 = n rank the candidates rm lm rm −1 lm −1 . . . r1 l1 a.",
                "We observe that this fooling set has size (2m )n = 2n m .",
                "Also, candidate a wins in each vector of votes in the fooling set, for the following reasons.",
                "Each candidate rj defeats its opponent lj in the first round. (For any 1 ≤ i ≤ n , the net effect of votes 2i − 1 and 2i on the pairwise election between rj and lj is zero; votes n − 6, n − 5, n − 4 prefer lj to rj, but votes n − 3, n − 2, n − 1, n all prefer rj to lj.)",
                "Moreover, a defeats every rj in their pairwise election. (For any 1 ≤ i ≤ n , the net effect of votes 2i − 1 and 2i on the pairwise election between a and rj is zero; votes n − 1, n prefer rj to a, but votes n − 6, n − 5, n − 4, n − 3, n − 2 all prefer a to rj.)",
                "It follows that a will defeat all the candidates that it faces.",
                "All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses.",
                "Let the first vote vector correspond to the vector 85 (S1 1 , S1 2 , . . . , S1 n ), and let the second vote vector correspond to the vector (S2 1 , S2 2 , . . . , S2 n ).",
                "For some i, we must have S1 i = S2 i , so that either S1 i S2 i or S2 i S1 i .",
                "Without loss of generality, suppose S1 i S2 i , and let rj be some candidate in S1 i − S2 i .",
                "Now, construct a new vote vector by taking vote 2i from the first vote vector, and the remaining votes from the second vote vector.",
                "We note that, whereas in the second vote vector vote 2i preferred rj to lj (because rj ∈ R−S2 i ), in the newly constructed vote vector this is no longer the case (because rj ∈ S1 i ).",
                "It follows that, whereas in the second vote vector, rj defeated lj in the first round by one vote, in the newly constructed vote vector, lj defeats rj in the first round.",
                "Thus, at least one lj advances to the second round after defeating its opponent rj.",
                "Now, we observe that in the newly constructed vote vector, any lk wins its pairwise election against any rq with q = k. This is because among the first 2n votes, at least n − 1 prefer lk to rq; votes n − 6, n − 5, n − 4 prefer lk to rq; and, because q = k, either votes n − 3, n − 2 prefer lk to rq (if k < q), or votes n − 1, n prefer lk to rq (if k > q).",
                "Thus, at least n + 4 = (n + 1)/2 > n/2 votes prefer lk to rq.",
                "Moreover, any lk wins its pairwise election against a.",
                "This is because only votes n − 3 and n − 2 prefer a to lk.",
                "It follows that, after the first round, any surviving candidate lk can only lose a matchup against another surviving lk , so that one of the lk must win the election.",
                "So, a is not the winner in the newly constructed vote vector, and hence we have a correct fooling set.",
                "Theorem 18.",
                "The deterministic communication complexity of the Bucklin rule is O(nm).",
                "Proof.",
                "Let l be the minimum integer for which there is a candidate who is ranked among the top l candidates by more than half the votes.",
                "We will do a binary search for l. At each point, we will have a lower bound lL which is smaller than l (initialized to 0), and an upper bound lH which is at least l (initialized to m).",
                "While lH − lL > 1, we continue by finding out whether (lH − l)/2 is smaller than l, after which we can update the bounds.",
                "To find out whether a number k is smaller than l, we determine every voters k most preferred candidates.",
                "Every voter can communicate which candidates are among her k most preferred candidates using m bits (for each candidate, indicate whether the candidate is among the top k or not), but because the binary search requires log m iterations, this gives us an upper bound of O((log m)nm), which is not strong enough.",
                "However, if lL < k < lH , and we already know a voters lL most preferred candidates, as well as her lH most preferred candidates, then the voter no longer needs to communicate whether the lL most preferred candidates are among her k most preferred candidates (because they must be), and she no longer needs to communicate whether the m−lH least preferred candidates are among her k most preferred candidates (because they cannot be).",
                "Thus the voter needs to communicate only m−lL −(m−lH ) = lH −lL bits in any given stage.",
                "Because each stage, lH − lL is (roughly) halved, each voter in total communicates only (roughly) m + m/2 + m/4 + . . . ≤ 2m bits.",
                "Theorem 19.",
                "The nondeterministic communication complexity of the Bucklin rule is Ω(nm) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We will exhibit a fooling set of size 2n m where m = (m−1)/2 and n = n/2.",
                "We write the set of candidates as the following disjoint union: C = {a} ∪ L ∪ R where L = {l1, l2, . . . , lm } and R = {r1, r2, . . . , rm }.",
                "For any subset S ⊆ {1, 2, . . . , m }, let L(S) = {li : i ∈ S} and let R(S) = {ri : i ∈ S}.",
                "For every vector (S1, S2, . . . , Sn ) consisting of n sets Si ⊆ {1, 2, . . . , m }, let the following vector of votes be an element of the fooling set: • For 1 ≤ i ≤ n , let voter 2i − 1 rank the candidates L(Si) R − R(Si) a L − L(Si) R(Si). • For 1 ≤ i ≤ n , let voter 2i rank the candidates L − L(Si) R(Si) a L(Si) R − R(Si).",
                "We observe that this fooling set has size (2m )n = 2n m , and that candidate a wins in each vector of votes in the fooling set, for the following reason.",
                "Each candidate in C − {a} is ranked among the top m candidates by exactly half the voters (which is not enough to win).",
                "Thus, we need to look at the voters top m +1 candidates, and a is ranked m +1th by all voters.",
                "All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses.",
                "Let the first vote vector correspond to the vector (S1 1 , S1 2 , . . . , S1 n ), and let the second vote vector correspond to the vector (S2 1 , S2 2 , . . . , S2 n ).",
                "For some i, we must have S1 i = S2 i , so that either S1 i S2 i or S2 i S1 i .",
                "Without loss of generality, suppose S1 i S2 i , and let j be some integer in S1 i − S2 i .",
                "Now, construct a new vote vector by taking vote 2i − 1 from the first vote vector, and the remaining votes from the second vote vector.",
                "In this newly constructed vote vector, a is still ranked m + 1th by all votes.",
                "However, lj is ranked among the top m candidates by n + 1 = n/2 + 1 votes.",
                "This is because whereas vote 2i − 1 does not rank lj among the top m candidates in the second vote vector (because j /∈ S2 i , we have lj /∈ L(S2 i )), vote 2i − 1 does rank lj among the top m candidates in the first vote vector (because j ∈ S1 i , we have lj ∈ L(S1 i )).",
                "So, a is not the winner in the newly constructed vote vector, and hence we have a correct fooling set.",
                "Theorem 20.",
                "The nondeterministic communication complexity of the ranked pairs rule is Ω(nm log m) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We omit this proof because of space constraint. 5.",
                "DISCUSSION One key obstacle to using voting for <br>preference</br> aggregation is the communication burden that an election places on the voters.",
                "By lowering this burden, it may become feasible to conduct more elections over more issues.",
                "In the limit, this could lead to a shift from representational government to a system in which most issues are decided by referenda-a veritable e-democracy.",
                "In this paper, we analyzed the communication complexity of the common voting rules.",
                "Knowing which voting rules require little communication is especially important when the issue to be voted on is of low enough importance that the following is true: the parties involved are willing to accept a rule that tends 86 to produce outcomes that are slightly less representative of the voters preferences, if this rule reduces the communication burden on the voters significantly.",
                "The following table summarizes the results we obtained.",
                "Rule Lower bound Upper bound plurality Ω(n log m) O(n log m) plurality w/ runoff Ω(n log m) O(n log m) STV Ω(n log m) O(n(log m)2) Condorcet Ω(nm) O(nm) approval Ω(nm) O(nm) Bucklin Ω(nm) O(nm) cup Ω(nm) O(nm) maximin Ω(nm) O(nm) Borda Ω(nm log m) O(nm log m) Copeland Ω(nm log m) O(nm log m) ranked pairs Ω(nm log m) O(nm log m) Communication complexity of voting rules, sorted from low to high.",
                "All of the upper bounds are deterministic (with the exception of maximin, for which the best deterministic upper bound we proved is O(nm log m)).",
                "All of the lower bounds hold even for nondeterministic communication and even just for determining whether a given candidate a is the winner.",
                "One area of future research is to study what happens when we restrict our attention to communication protocols that do not reveal any strategically useful information.",
                "This restriction may invalidate some of the upper bounds that we derived using multistage communication protocols.",
                "Also, all of our bounds are worst-case bounds.",
                "It may be possible to outperform these bounds when the distribution of votes has additional structure.",
                "When deciding which voting rule to use for an election, there are many considerations to take into account.",
                "The voting rules that we studied in this paper are the most common ones that have survived the test of time.",
                "One way to select among these rules is to consider recent results on complexity.",
                "The table above shows that from a communication complexity perspective, plurality, plurality with runoff, and STV are preferable.",
                "However, plurality has the undesirable property that it is computationally easy to manipulate by voting strategically [3, 7].",
                "Plurality with runoff is NP-hard to manipulate by a coalition of weighted voters, or by an individual that faces correlated uncertainty about the others votes [7, 6].",
                "STV is NP-hard to manipulate in those settings as well [7], but also by an individual with perfect knowledge of the others votes (when the number of candidates is unbounded) [2].",
                "Therefore, STV is more robust, although it may require slightly more worst-case communication as per the table above.",
                "Yet other selection criteria are the computational complexity of determining whether enough information has been elicited to declare a winner, and that of determining the optimal sequence of queries [8]. 6.",
                "REFERENCES [1] Lawrence Ausubel and Paul Milgrom.",
                "Ascending auctions with package bidding.",
                "Frontiers of Theoretical Economics, 1, 2002.",
                "No. 1, Article 1. [2] John Bartholdi, III and James Orlin.",
                "Single transferable vote resists strategic voting.",
                "Social Choice and Welfare, 8(4):341-354, 1991. [3] John Bartholdi, III, Craig Tovey, and Michael Trick.",
                "The computational difficulty of manipulating an election.",
                "Social Choice and Welfare, 6(3):227-241, 1989. [4] Avrim Blum, Jeffrey Jackson, Tuomas Sandholm, and Martin Zinkevich.",
                "<br>preference</br> elicitation and query learning.",
                "Journal of Machine Learning Research, 5:649-667, 2004. [5] Wolfram Conen and Tuomas Sandholm.",
                "<br>preference</br> elicitation in combinatorial auctions: Extended abstract.",
                "In Proceedings of the ACM Conference on Electronic Commerce (ACM-EC), pages 256-259, 2001. [6] Vincent Conitzer, Jerome Lang, and Tuomas Sandholm.",
                "How many candidates are needed to make elections hard to manipulate?",
                "In Theoretical Aspects of Rationality and Knowledge (TARK), pages 201-214, 2003. [7] Vincent Conitzer and Tuomas Sandholm.",
                "Complexity of manipulating elections with few candidates.",
                "In Proceedings of the National Conference on Artificial Intelligence (AAAI), pages 314-319, 2002. [8] Vincent Conitzer and Tuomas Sandholm.",
                "Vote elicitation: Complexity and strategy-proofness.",
                "In Proceedings of the National Conference on Artificial Intelligence (AAAI), pages 392-397, 2002. [9] Sven de Vries, James Schummer, and Rakesh V. Vohra.",
                "On ascending auctions for heterogeneous objects, 2003.",
                "Draft. [10] Allan Gibbard.",
                "Manipulation of voting schemes.",
                "Econometrica, 41:587-602, 1973. [11] Benoit Hudson and Tuomas Sandholm.",
                "Effectiveness of query types and policies for <br>preference</br> elicitation in combinatorial auctions.",
                "In International Conference on Autonomous Agents and Multi-Agent Systems (AAMAS), pages 386-393, 2004. [12] E Kushilevitz and N Nisan.",
                "Communication Complexity.",
                "Cambridge University Press, 1997. [13] Sebasti´en Lahaie and David Parkes.",
                "Applying learning algorithms to <br>preference</br> elicitation.",
                "In Proceedings of the ACM Conference on Electronic Commerce, 2004. [14] Noam Nisan and Ilya Segal.",
                "The communication requirements of efficient allocations and supporting prices.",
                "Journal of Economic Theory, 2005.",
                "Forthcoming. [15] David Parkes. iBundle: An efficient ascending price bundle auction.",
                "In Proceedings of the ACM Conference on Electronic Commerce (ACM-EC), pages 148-157, 1999. [16] Tuomas Sandholm.",
                "An implementation of the contract net protocol based on marginal cost calculations.",
                "In Proceedings of the National Conference on Artificial Intelligence (AAAI), pages 256-262, 1993. [17] Tuomas Sandholm and Craig Boutilier.",
                "<br>preference</br> elicitation in combinatorial auctions.",
                "In Peter Cramton, Yoav Shoham, and Richard Steinberg, editors, Combinatorial Auctions, chapter 10.",
                "MIT Press, 2005. [18] Paolo Santi, Vincent Conitzer, and Tuomas Sandholm.",
                "Towards a characterization of polynomial <br>preference</br> elicitation with value queries in combinatorial auctions.",
                "In Conference on Learning Theory (COLT), pages 1-16, 2004. [19] Mark Satterthwaite.",
                "Strategy-proofness and Arrows conditions: existence and correspondence theorems for voting procedures and social welfare functions.",
                "Journal of Economic Theory, 10:187-217, 1975. [20] Ilya Segal.",
                "The communication requirements of social choice rules and supporting budget sets, 2004.",
                "Draft.",
                "Presented at the DIMACS Workshop on Computational Issues in Auction Design, Rutgers University, New Jersey, USA. [21] Peter Wurman and Michael Wellman.",
                "AkBA: A progressive, anonymous-price combinatorial auction.",
                "In Proceedings of the ACM Conference on Electronic Commerce (ACM-EC), pages 21-29, 2000. [22] A. C. Yao.",
                "Some complexity questions related to distributed computing.",
                "In Proceedings of the 11th ACM symposium on theory of computing (STOC), pages 209-213, 1979. [23] Martin Zinkevich, Avrim Blum, and Tuomas Sandholm.",
                "On polynomial-time <br>preference</br> elicitation with value queries.",
                "In Proceedings of the ACM Conference on Electronic Commerce (ACM-EC), pages 176-185, 2003. 87"
            ],
            "original_annotated_samples": [
                "INTRODUCTION One key factor in the practicality of any <br>preference</br> aggregation rule is its communication burden.",
                "To successfully aggregate the agents preferences, it is usually not necessary for all the agents to report all of their <br>preference</br> information.",
                "This has at least the following advantages: • It can make <br>preference</br> aggregation feasible in settings where the total amount of <br>preference</br> information is too large to communicate. • Even when communicating all the preference information is feasible, reducing the communication requirements lessens the burden placed on the agents.",
                "Most of the work on reducing the communication burden in <br>preference</br> aggregation has focused on resource allocation settings such as combinatorial auctions, in which an auctioneer auctions off a number of (possibly distinct) items in a single event.",
                "Experimentally, this yields drastic savings in <br>preference</br> revelation [11]."
            ],
            "translated_annotated_samples": [
                "INTRODUCCIÓN Un factor clave en la viabilidad de cualquier regla de agregación de <br>preferencia</br>s es su carga de comunicación.",
                "Para agregar con éxito las <br>preferencia</br>s de los agentes, generalmente no es necesario que todos los agentes informen toda su información de <br>preferencia</br>s.",
                "Esto tiene al menos las siguientes ventajas: • Puede hacer factible la agregación de <br>preferencia</br>s en entornos donde la cantidad total de información de <br>preferencia</br>s es demasiado grande para comunicar. • Incluso cuando comunicar toda la información de preferencias es factible, reducir los requisitos de comunicación disminuye la carga impuesta a los agentes.",
                "La mayor parte del trabajo sobre la reducción de la carga de comunicación en la agregación de <br>preferencia</br>s se ha centrado en entornos de asignación de recursos como subastas combinatorias, en las que un subastador subasta un número de artículos (posiblemente distintos) en un solo evento.",
                "Experimentalmente, esto produce a drástico ahorro en la revelación de <br>preferencias</br> [11]."
            ],
            "translated_text": "Determinamos la complejidad de comunicación de las reglas de votación comunes. Las reglas (ordenadas por su complejidad de comunicación de baja a alta) son pluralidad, pluralidad con segunda vuelta, voto único transferible (STV), Condorcet, aprobación, Bucklin, taza, maximin, Borda, Copeland y pares clasificados. Para cada regla, primero proporcionamos un protocolo de comunicación determinista y un límite superior en la cantidad de bits comunicados en él; luego, damos un límite inferior en los requisitos de comunicación (incluso los no deterministas) de la regla de votación. Los límites coinciden para todas las reglas de votación excepto STV y maximin. Categorías y Descriptores de Asignaturas F.2 [Teoría de la Computación]: Análisis de Algoritmos y Complejidad de Problemas; J.4 [Aplicaciones Informáticas]: Ciencias Sociales y del Comportamiento-Economía Términos Generales Algoritmos, Economía, Teoría 1. INTRODUCCIÓN Un factor clave en la viabilidad de cualquier regla de agregación de <br>preferencia</br>s es su carga de comunicación. Para agregar con éxito las <br>preferencia</br>s de los agentes, generalmente no es necesario que todos los agentes informen toda su información de <br>preferencia</br>s. Los protocolos inteligentes que obtienen parcial y secuencialmente las preferencias de los agentes tienen el potencial de reducir drásticamente la comunicación requerida. Esto tiene al menos las siguientes ventajas: • Puede hacer factible la agregación de <br>preferencia</br>s en entornos donde la cantidad total de información de <br>preferencia</br>s es demasiado grande para comunicar. • Incluso cuando comunicar toda la información de preferencias es factible, reducir los requisitos de comunicación disminuye la carga impuesta a los agentes. Esto es especialmente cierto cuando los agentes, en lugar de conocer todas sus preferencias de antemano, necesitan invertir esfuerzo (como cálculos o recopilación de información) para determinar sus preferencias. • Preserva (parte de) la privacidad de los agentes. La mayor parte del trabajo sobre la reducción de la carga de comunicación en la agregación de <br>preferencia</br>s se ha centrado en entornos de asignación de recursos como subastas combinatorias, en las que un subastador subasta un número de artículos (posiblemente distintos) en un solo evento. Debido a que en una subasta combinatoria, los postores pueden tener valoraciones separadas para cada uno de un número exponencial de posibles paquetes de artículos, este es un escenario en el que reducir la carga de comunicación es especialmente crucial. Esto se puede lograr complementando al subastador con un provocador que elicitara incrementalmente partes de las preferencias de los postores según sea necesario, basándose en lo que los postores han revelado sobre sus preferencias hasta el momento, como sugieren Conen y Sandholm [5]. Por ejemplo, el solicitante puede preguntar por el valor de un postor para un paquete específico (consultas de valor), cuál de dos paquetes prefiere el postor (consultas de orden), qué paquete clasifica en la posición k o cuál es la posición de un paquete dado (consultas de clasificación), qué paquete compraría dado un vector particular de precios (consultas de demanda), etc., hasta que se pueda determinar (al menos) la asignación final. Experimentalmente, esto produce a drástico ahorro en la revelación de <br>preferencias</br> [11]. ",
            "candidates": [],
            "error": [
                [
                    "preferencia",
                    "preferencia",
                    "preferencia",
                    "preferencia",
                    "preferencia",
                    "preferencia",
                    "preferencias"
                ]
            ]
        },
        "preference aggregation": {
            "translated_key": "agregación de preferencias",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Communication Complexity of Common Voting Rules∗ Vincent Conitzer Carnegie Mellon University 5000 Forbes Avenue Pittsburgh, PA 15213, USA conitzer@cs.cmu.edu Tuomas Sandholm Carnegie Mellon University 5000 Forbes Avenue Pittsburgh, PA 15213, USA sandholm@cs.cmu.edu ABSTRACT We determine the communication complexity of the common voting rules.",
                "The rules (sorted by their communication complexity from low to high) are plurality, plurality with runoff, single transferable vote (STV), Condorcet, approval, Bucklin, cup, maximin, Borda, Copeland, and ranked pairs.",
                "For each rule, we first give a deterministic communication protocol and an upper bound on the number of bits communicated in it; then, we give a lower bound on (even the nondeterministic) communication requirements of the voting rule.",
                "The bounds match for all voting rules except STV and maximin.",
                "Categories and Subject Descriptors F.2 [Theory of Computation]: Analysis of Algorithms and Problem Complexity; J.4 [Computer Applications]: Social and Behavioral Sciences-Economics General Terms Algorithms, Economics, Theory 1.",
                "INTRODUCTION One key factor in the practicality of any <br>preference aggregation</br> rule is its communication burden.",
                "To successfully aggregate the agents preferences, it is usually not necessary for all the agents to report all of their preference information.",
                "Clever protocols that elicit the agents preferences partially and sequentially have the potential to dramatically reduce the required communication.",
                "This has at least the following advantages: • It can make <br>preference aggregation</br> feasible in settings where the total amount of preference information is too large to communicate. • Even when communicating all the preference information is feasible, reducing the communication requirements lessens the burden placed on the agents.",
                "This is especially true when the agents, rather than knowing all their preferences in advance, need to invest effort (such as computation or information gathering) to determine their preferences [16]. • It preserves (some of) the agents privacy.",
                "Most of the work on reducing the communication burden in <br>preference aggregation</br> has focused on resource allocation settings such as combinatorial auctions, in which an auctioneer auctions off a number of (possibly distinct) items in a single event.",
                "Because in a combinatorial auction, bidders can have separate valuations for each of an exponential number of possible bundles of items, this is a setting in which reducing the communication burden is especially crucial.",
                "This can be accomplished by supplementing the auctioneer with an elicitor that incrementally elicits parts of the bidders preferences on an as-needed basis, based on what the bidders have revealed about their preferences so far, as suggested by Conen and Sandholm [5].",
                "For example, the elicitor can ask for a bidders value for a specific bundle (value queries), which of two bundles the bidder prefers (order queries), which bundle he ranks kth or what the rank of a given bundle is (rank queries), which bundle he would purchase given a particular vector of prices (demand queries), etc.-until (at least) the final allocation can be determined.",
                "Experimentally, this yields drastic savings in preference revelation [11].",
                "Furthermore, if the agents valuation functions are drawn from certain natural subclasses, the elicitation problem can be solved using only polynomially many queries even in the worst case [23, 4, 13, 18, 14].",
                "For a review of preference elicitation in combinatorial auctions, see [17].",
                "Ascending combinatorial auctions are a well-known special form of preference elicitation, where the elicitor asks demand queries with increasing prices [15, 21, 1, 9].",
                "Finally, resource 78 allocation problems have also been studied from a communication complexity viewpoint, thereby deriving lower bounds on the required communication.",
                "For example, Nisan and Segal show that exponential communication is required even to obtain a surplus greater than that obtained by auctioning off all objects as a single bundle [14].",
                "Segal also studies social choice rules in general, and shows that for a large class of social choice rules, supporting budget sets must be revealed such that if every agent prefers the same outcome in her budget set, this proves the optimality of that outcome.",
                "Segal then uses this characterization to prove bounds on the communication required in resource allocation as well as matching settings [20].",
                "In this paper, we will focus on the communication requirements of a generally applicable subclass of social choice rules, commonly known as voting rules.",
                "In a voting setting, there is a set of candidate outcomes over which the voters express their preferences by submitting a vote (typically, a ranking of the candidates), and the winner (that is, the chosen outcome) is determined based on these votes.",
                "The communication required by voting rules can be large either because the number of voters is large (such as, for example, in national elections), or because the number of candidates is large (for example, the agents can vote over allocations of a number of resources), or both.",
                "Prior work [8] has studied elicitation in voting, studying how computationally hard it is to decide whether a winner can be determined with the information elicited so far, as well as how hard it is to find the optimal sequence of queries given perfect suspicions about the voters preferences.",
                "In addition, that paper discusses strategic (game-theoretic) issues introduced by elicitation.",
                "In contrast, in this paper, we are concerned with the worst-case number of bits that must be communicated to execute a given voting rule, when nothing is known in advance about the voters preferences.",
                "We determine the communication complexity of the common voting rules.",
                "For each rule, we first give an upper bound on the (deterministic) communication complexity by providing a communication protocol for it and analyzing how many bits need to be transmitted in this protocol. (Segals results [20] do not apply to most voting rules because most voting rules are not intersectionmonotonic (or even monotonic).1 ) For many of the voting rules under study, it turns out that one cannot do better than simply letting each voter immediately communicate all her (potentially relevant) information.",
                "However, for some rules (such as plurality with runoff, STV and cup) there is a straightforward multistage communication protocol that, with some analysis, can be shown to significantly outperform the immediate communication of all (potentially relevant) information.",
                "Finally, for some rules (such as the Condorcet and Bucklin rules), we need to introduce a more complex communication protocol to achieve the best possible upper 1 For two of the rules that we study that are intersectionmonotonic, namely the approval and Condorcet rules, Segals results can in fact be used to give alternative proofs of our lower bounds.",
                "We only give direct proofs for these rules here because 1) these direct proofs are among the easier ones in this paper, 2) the alternative proofs are nontrivial even given Segals results, and 3) a space constraint applies.",
                "However, we hope to also include the alternative proofs in a later version. bound.",
                "After obtaining the upper bounds, we show that they are tight by giving matching lower bounds on (even the nondeterministic) communication complexity of each voting rule.",
                "There are two exceptions: STV, for which our upper and lower bounds are apart by a factor log m; and maximin, for which our best deterministic upper bound is also a factor log m above the (nondeterministic) lower bound, although we give a nondeterministic upper bound that matches the lower bound. 2. REVIEW OF VOTING RULES In this section, we review the common voting rules that we study in this paper.",
                "A voting rule2 is a function mapping a vector of the n voters votes (i.e. preferences over candidates) to one of the m candidates (the winner) in the candidate set C. In some cases (such as the Condorcet rule), the rule may also declare that no winner exists.",
                "We do not concern ourselves with what happens in case of a tie between candidates (our lower bounds hold regardless of how ties are broken, and the communication protocols used for our upper bounds do not attempt to break the ties).",
                "All of the rules that we study are rank-based rules, which means that a vote is defined as an ordering of the candidates (with the exception of the plurality rule, for which a vote is a single candidate, and the approval rule, for which a vote is a subset of the candidates).",
                "We will consider the following voting rules. (For rules that define a score, the candidate with the highest score wins.) • scoring rules.",
                "Let α = α1, . . . , αm be a vector of integers such that α1 ≥ α2 . . . ≥ αm.",
                "For each voter, a candidate receives α1 points if it is ranked first by the voter, α2 if it is ranked second etc.",
                "The score sα of a candidate is the total number of points the candidate receives.",
                "The Borda rule is the scoring rule with α = m−1, m−2, . . . , 0 .",
                "The plurality rule is the scoring rule with α = 1, 0, . . . , 0 . • single transferable vote (STV).",
                "The rule proceeds through a series of m − 1 rounds.",
                "In each round, the candidate with the lowest plurality score (that is, the least number of voters ranking it first among the remaining candidates) is eliminated (and each of the votes for that candidate transfer to the next remaining candidate in the order given in that vote).",
                "The winner is the last remaining candidate. • plurality with run-off.",
                "In this rule, a first round eliminates all candidates except the two with the highest plurality scores.",
                "Votes are transferred to these as in the STV rule, and a second round determines the winner from these two. • approval.",
                "Each voter labels each candidate as either approved or disapproved.",
                "The candidate approved by the greatest number of voters wins. • Condorcet.",
                "For any two candidates i and j, let N(i, j) be the number of voters who prefer i to j.",
                "If there is a candidate i that is preferred to any other candidate by a majority of the voters (that is, N(i, j) > N(j, i) for all j = i-that is, i wins every pairwise election), then candidate i wins. 2 The term voting protocol is often used to describe the same concept, but we seek to draw a sharp distinction between the rule mapping preferences to outcomes, and the communication/elicitation protocol used to implement this rule. 79 • maximin (aka.",
                "Simpson).",
                "The maximin score of i is s(i) = minj=i N(i, j)-that is, is worst performance in a pairwise election.",
                "The candidate with the highest maximin score wins. • Copeland.",
                "For any two distinct candidates i and j, let C(i, j) = 1 if N(i, j) > N(j, i), C(i, j) = 1/2 if N(i, j) = N(j, i) and C(i, j) = 0 if N(i, j) < N(j, i).",
                "The Copeland score of candidate i is s(i) = j=i C(i, j). • cup (sequential binary comparisons).",
                "The cup rule is defined by a balanced3 binary tree T with one leaf per candidate, and an assignment of candidates to leaves (each leaf gets one candidate).",
                "Each non-leaf node is assigned the winner of the pairwise election of the nodes children; the candidate assigned to the root wins. • Bucklin.",
                "For any candidate i and integer l, let B(i, l) be the number of voters that rank candidate i among the top l candidates.",
                "The winner is arg mini(min{l : B(i, l) > n/2}).",
                "That is, if we say that a voter approves her top l candidates, then we repeatedly increase l by 1 until some candidate is approved by more than half the voters, and this candidate is the winner. • ranked pairs.",
                "This rule determines an order on all the candidates, and the winner is the candidate at the top of this order.",
                "Sort all ordered pairs of candidates (i, j) by N(i, j), the number of voters who prefer i to j.",
                "Starting with the pair (i, j) with the highest N(i, j), we lock in the result of their pairwise election (i j).",
                "Then, we move to the next pair, and we lock the result of their pairwise election.",
                "We continue to lock every pairwise result that does not contradict the ordering established so far.",
                "We emphasize that these definitions of voting rules do not concern themselves with how the votes are elicited from the voters; all the voting rules, including those that are suggestively defined in terms of rounds, are in actuality just functions mapping the vector of all the voters votes to a winner.",
                "Nevertheless, there are always many different ways of eliciting the votes (or the relevant parts thereof) from the voters.",
                "For example, in the plurality with runoff rule, one way of eliciting the votes is to ask every voter to declare her entire ordering of the candidates up front.",
                "Alternatively, we can first ask every voter to declare only her most preferred candidate; then, we will know the two candidates in the runoff, and we can ask every voter which of these two candidates she prefers.",
                "Thus, we distinguish between the voting rule (the mapping from vectors of votes to outcomes) and the communication protocol (which determines how the relevant parts of the votes are actually elicited from the voters).",
                "The goal of this paper is to give efficient communication protocols for the voting rules just defined, and to prove that there do not exist any more efficient communication protocols.",
                "It is interesting to note that the choice of the communication protocol may affect the strategic behavior of the voters.",
                "Multistage communication protocols may reveal to the voters some information about how the other voters are voting (for example, in the two-stage communication protocol just given for plurality with runoff, in the second stage voters 3 Balanced means that the difference in depth between two leaves can be at most one. will know which two candidates have the highest plurality scores).",
                "In general, when the voters receive such information, it may give them incentives to vote differently than they would have in a single-stage communication protocol in which all voters declare their entire votes simultaneously.",
                "Of course, even the single-stage communication protocol is not strategy-proof4 for any reasonable voting rule, by the Gibbard-Satterthwaite theorem [10, 19].",
                "However, this does not mean that we should not be concerned about adding even more opportunities for strategic voting.",
                "In fact, many of the communication protocols introduced in this paper do introduce additional opportunities for strategic voting, but we do not have the space to discuss this here. (In prior work [8], we do give an example where an elicitation protocol for the approval voting rule introduces strategic voting, and give principles for designing elicitation protocols that do not introduce strategic problems.)",
                "Now that we have reviewed voting rules, we move on to a brief review of communication complexity theory. 3. REVIEW OF SOME COMMUNICATION COMPLEXITY THEORY In this section, we review the basic model of a communication problem and the lower-bounding technique of constructing a fooling set. (The basic model of a communication problem is due to Yao [22]; for an overview see Kushilevitz and Nisan [12].)",
                "Each player 1 ≤ i ≤ n knows (only) input xi.",
                "Together, they seek to compute f(x1, x2, . . . , xn).",
                "In a deterministic protocol for computing f, in each stage, one of the players announces (to all other players) a bit of information based on her own input and the bits announced so far.",
                "Eventually, the communication terminates and all players know f(x1, x2, . . . , xn).",
                "The goal is to minimize the worst-case (over all input vectors) number of bits sent.",
                "The deterministic communication complexity of a problem is the worstcase number of bits sent in the best (correct) deterministic protocol for it.",
                "In a nondeterministic protocol, the next bit to be sent can be chosen nondeterministically.",
                "For the purposes of this paper, we will consider a nondeterministic protocol correct if for every input vector, there is some sequence of nondeterministic choices the players can make so that the players know the value of f when the protocol terminates.",
                "The nondeterministic communication complexity of a problem is the worst-case number of bits sent in the best (correct) nondeterministic protocol for it.",
                "We are now ready to give the definition of a fooling set.",
                "Definition 1.",
                "A fooling set is a set of input vectors {(x1 1, x1 2, . . . , x1 n), (x2 1, x2 2, . . . , x2 n), . . . , (xk 1 , xk 2 , . . . , xk n) such that for any i, f(xi 1, xi 2, . . . , xi n) = f0 for some constant f0, but for any i = j, there exists some vector (r1, r2, . . . , rn) ∈ {i, j}n such that f(xr1 1 , xr2 2 , . . . , xrn n ) = f0. (That is, we can mix the inputs from the two input vectors to obtain a vector with a different function value.)",
                "It is known that if a fooling set of size k exists, then log k is a lower bound on the communication complexity (even the nondeterministic communication complexity) [12]. 4 A strategy-proof protocol is one in which it is in the players best interest to report their preferences truthfully. 80 For the purposes of this paper, f is the voting rule that maps the votes to the winning candidate, and xi is voter is vote (the information that the voting rule would require from the voter if there were no possibility of multistage communication-i.e. the most preferred candidate (plurality), the approved candidates (approval), or the ranking of all the candidates (all other protocols)).",
                "However, when we derive our lower bounds, f will only signify whether a distinguished candidate a wins. (That is, f is 1 if a wins, and 0 otherwise.)",
                "This will strengthen our lower bound results (because it implies that even finding out whether one given candidate wins is hard).5 Thus, a fooling set in our context is a set of vectors of votes so that a wins (does not win) with each of them; but for any two different vote vectors in the set, there is a way of taking some voters votes from the first vector and the others votes from the second vector, so that a does not win (wins).",
                "To simplify the proofs of our lower bounds, we make assumptions such as the number of voters n is odd in many of these proofs.",
                "Therefore, technically, we do not prove the lower bound for (number of candidates, number of voters) pairs (m, n) that do not satisfy these assumptions (for example, if we make the above assumption, then we technically do not prove the lower bound for any pair (m, n) in which n is even).",
                "Nevertheless, we always prove the lower bound for a representative set of (m, n) pairs.",
                "For example, for every one of our lower bounds it is the case that for infinitely many values of m, there are infinitely many values of n such that the lower bound is proved for the pair (m, n). 4.",
                "RESULTS We are now ready to present our results.",
                "For each voting rule, we first give a deterministic communication protocol for determining the winner to establish an upper bound.",
                "Then, we give a lower bound on the nondeterministic communication complexity (even on the complexity of deciding whether a given candidate wins, which is an easier question).",
                "The lower bounds match the upper bounds in all but two cases: the STV rule (upper bound O(n(log m)2 ); lower bound Ω(n log m)) and the maximin rule (upper bound O(nm log m), although we do give a nondeterministic protocol that is O(nm); lower bound Ω(nm)).",
                "When we discuss a voting rule in which the voters rank the candidates, we will represent a ranking in which candidate c1 is ranked first, c2 is ranked second, etc. as c1 c2 . . . cm. 5 One possible concern is that in the case where ties are possible, it may require much communication to verify whether a specific candidate a is among the winners, but little communication to produce one of the winners.",
                "However, all the fooling sets we use in the proofs have the property that if a wins, then a is the unique winner.",
                "Therefore, in these fooling sets, if one knows any one of the winners, then one knows whether a is a winner.",
                "Thus, computing one of the winners requires at least as much communication as verifying whether a is among the winners.",
                "In general, when a communication problem allows multiple correct answers for a given vector of inputs, this is known as computing a relation rather than a function [12].",
                "However, as per the above, we can restrict our attention to a subset of the domain where the voting rule truly is a (single-valued) function, and hence lower bounding techniques for functions rather than relations will suffice.",
                "Sometimes for the purposes of a proof the internal ranking of a subset of the candidates does not matter, and in this case we will not specify it.",
                "For example, if S = {c2, c3}, then c1 S c4 indicates that either the ranking c1 c2 c3 c4 or the ranking c1 c3 c2 c4 can be used for the proof.",
                "We first give a universal upper bound.",
                "Theorem 1.",
                "The deterministic communication complexity of any rank-based voting rule is O(nm log m).",
                "Proof.",
                "This bound is achieved by simply having everyone communicate their entire ordering of the candidates (indicating the rank of an individual candidate requires only O(log m) bits, so each of the n voters can simply indicate the rank of each of the m candidates).",
                "The next lemma will be useful in a few of our proofs.",
                "Lemma 1.",
                "If m divides n, then log(n! )−m log((n/m)!) ≥ n(log m − 1)/2.",
                "Proof.",
                "If n/m = 1 (that is, n = m), then this expression simplifies to log(n!).",
                "We have log(n!) = n i=1 log i ≥ n x=1 log(i)dx, which, using integration by parts, is equal to n log n − (n − 1) > n(log n − 1) = n(log m − 1) > n(log m − 1)/2.",
                "So, we can assume that n/m ≥ 2.",
                "We observe that log(n!) = n i=1 log i = n/m−1 i=0 m j=1 log(im+j) ≥ n/m−1 i=1 m j=1 log(im) = m n/m−1 i=1 log(im), and that m log((n/m)!) = m n/m i=1 log(i).",
                "Therefore, log(n!) − m log((n/m)!) ≥ m n/m−1 i=1 log(im) − m n/m i=1 log(i) = m(( n/m−1 i=1 log(im/i))−log(n/m)) = m((n/m− 1) log m−log n+log m) = n log m−m log n. Now, using the fact that n/m ≥ 2, we have m log n = n(m/n) log m(n/m) = n(m/n)(log m + log(n/m)) ≤ n(1/2)(log m + log 2).",
                "Thus, log(n!) − m log((n/m)!) ≥ n log m − m log n ≥ n log m − n(1/2)(log m + log 2) = n(log m − 1)/2.",
                "Theorem 2.",
                "The deterministic communication complexity of the plurality rule is O(n log m).",
                "Proof.",
                "Indicating one of the candidates requires only O(log m) bits, so each voter can simply indicate her most preferred candidate.",
                "Theorem 3.",
                "The nondeterministic communication complexity of the plurality rule is Ω(n log m) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We will exhibit a fooling set of size n ! (( n m )! )m where n = (n−1)/2.",
                "Taking the logarithm of this gives log(n ! )− m log((n /m)! ), so the result follows from Lemma 1.",
                "The fooling set will consist of all vectors of votes satisfying the following constraints: • For any 1 ≤ i ≤ n , voters 2i−1 and 2i vote the same. 81 • Every candidate receives equally many votes from the first 2n = n − 1 voters. • The last voter (voter n) votes for a.",
                "Candidate a wins with each one of these vote vectors because of the extra vote for a from the last voter.",
                "Given that m divides n , let us see how many vote vectors there are in the fooling set.",
                "We need to distribute n voter pairs evenly over m candidates, for a total of n /m voter pairs per candidate; and there are precisely n ! (( n m )! )m ways of doing this.6 All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses.",
                "Let i be a number such that the two vote vectors disagree on the candidate for which voters 2i − 1 and 2i vote.",
                "Without loss of generality, suppose that in the first vote vector, these voters do not vote for a (but for some other candidate, b, instead).",
                "Now, construct a new vote vector by taking votes 2i − 1 and 2i from the first vote vector, and the remaining votes from the second vote vector.",
                "Then, b receives 2n /m + 2 votes in this newly constructed vote vector, whereas a receives at most 2n /m+1 votes.",
                "So, a is not the winner in the newly constructed vote vector, and hence we have a correct fooling set.",
                "Theorem 4.",
                "The deterministic communication complexity of the plurality with runoff rule is O(n log m).",
                "Proof.",
                "First, let every voter indicate her most preferred candidate using log m bits.",
                "After this, the two candidates in the runoff are known, and each voter can indicate which one she prefers using a single additional bit.",
                "Theorem 5.",
                "The nondeterministic communication complexity of the plurality with runoff rule is Ω(n log m) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We will exhibit a fooling set of size n ! (( n m )! )m where m = m/2 and n = (n − 2)/4.",
                "Taking the logarithm of this gives log(n !) − m log((n /m )! ), so the result follows from Lemma 1.",
                "Divide the candidates into m pairs: (c1, d1), (c2, d2), . . . , (cm , dm ) where c1 = a and d1 = b.",
                "The fooling set will consist of all vectors of votes satisfying the following constraints: • For any 1 ≤ i ≤ n , voters 4i − 3 and 4i − 2 rank the candidates ck(i) a C − {a, ck(i)}, for some candidate ck(i). (If ck(i) = a then the vote is simply a C − {a}.) • For any 1 ≤ i ≤ n , voters 4i − 1 and 4i rank the candidates dk(i) a C − {a, dk(i)} (that is, their most preferred candidate is the candidate that is paired with the candidate that the previous two voters vote for). 6 An intuitive proof of this is the following.",
                "We can count the number of permutations of n elements as follows.",
                "First, divide the elements into m buckets of size n /m, so that if x is placed in a lower-indexed bucket than y, then x will be indexed lower in the eventual permutation.",
                "Then, decide on the permutation within each bucket (for which there are (n /m)! choices per bucket).",
                "It follows that n ! equals the number of ways to divide n elements into m buckets of size n /m, times ((n /m)! )m . • Every candidate is ranked at the top of equally many of the first 4n = n − 2 votes. • Voter 4n +1 = n−1 ranks the candidates a C−{a}. • Voter 4n + 2 = n ranks the candidates b C − {b}.",
                "Candidate a wins with each one of these vote vectors: because of the last two votes, candidates a and b are one vote ahead of all the other candidates and continue to the runoff, and at this point all the votes that had another candidate ranked at the top transfer to a, so that a wins the runoff.",
                "Given that m divides n , let us see how many vote vectors there are in the fooling set.",
                "We need to distribute n groups of four voters evenly over the m pairs of candidates, and (as in the proof of Theorem 3) there are n ! (( n m )! )m ways of doing this.",
                "All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses.",
                "Let i be a number such that ck(i) is not the same in both of these two vote vectors, that is, c1 k(i) (ck(i) in the first vote vector) is not equal to c2 k(i) (ck(i) in the second vote vector).",
                "Without loss of generality, suppose c1 k(i) = a.",
                "Now, construct a new vote vector by taking votes 4i − 3, 4i − 2, 4i − 1, 4i from the first vote vector, and the remaining votes from the second vote vector.",
                "In this newly constructed vote vector, c1 k(i) and d1 k(i) each receive 4n /m+2 votes in the first round, whereas a receives at most 4n /m+1 votes.",
                "So, a does not continue to the runoff in the newly constructed vote vector, and hence we have a correct fooling set.",
                "Theorem 6.",
                "The nondeterministic communication complexity of the Borda rule is Ω(nm log m) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We will exhibit a fooling set of size (m ! )n where m = m−2 and n = (n−2)/4.",
                "This will prove the theorem because m ! is Ω(m log m), so that log((m ! )n ) = n log(m !) is Ω(nm log m).",
                "For every vector (π1, π2, . . . , πn ) consisting of n orderings of all candidates other than a and another fixed candidate b (technically, the orderings take the form of a one-to-one function πi : {1, 2, . . . , m } → C − {a, b} with πi(j) = c indicating that candidate c is the jth in the order represented by πi), let the following vector of votes be an element of the fooling set: • For 1 ≤ i ≤ n , let voters 4i − 3 and 4i − 2 rank the candidates a b πi(1) πi(2) . . . πi(m ). • For 1 ≤ i ≤ n , let voters 4i − 1 and 4i rank the candidates πi(m ) πi(m − 1) . . . πi(1) b a. • Let voter 4n + 1 = n − 1 rank the candidates a b π0(1) π0(2) . . . π0(m ) (where π0 is an arbitrary order of the candidates other than a and b which is the same for every element of the fooling set). • Let voter 4n + 2 = n rank the candidates π0(m ) π0(m − 1) . . . π0(1) a b.",
                "We observe that this fooling set has size (m ! )n , and that candidate a wins in each vector of votes in the fooling set (to 82 see why, we observe that for any 1 ≤ i ≤ n , votes 4i−3 and 4i − 2 rank the candidates in the exact opposite way from votes 4i − 1 and 4i, which under the Borda rule means they cancel out; and the last two votes give one more point to a than to any other candidate-besides b who gets two fewer points than a).",
                "All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses.",
                "Let the first vote vector correspond to the vector (π1 1, π1 2, . . . , π1 n ), and let the second vote vector correspond to the vector (π2 1, π2 2, . . . , π2 n ).",
                "For some i, we must have π1 i = π2 i , so that for some candidate c /∈ {a, b}, (π1 i )−1 (c) < (π2 i )−1 (c) (that is, c is ranked higher in π1 i than in π2 i ).",
                "Now, construct a new vote vector by taking votes 4i−3 and 4i−2 from the first vote vector, and the remaining votes from the second vote vector. as Borda score remains unchanged.",
                "However, because c is ranked higher in π1 i than in π2 i , c receives at least 2 more points from votes 4i−3 and 4i − 2 in the newly constructed vote vector than it did in the second vote vector.",
                "It follows that c has a higher Borda score than a in the newly constructed vote vector.",
                "So, a is not the winner in the newly constructed vote vector, and hence we have a correct fooling set.",
                "Theorem 7.",
                "The nondeterministic communication complexity of the Copeland rule is Ω(nm log m) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We will exhibit a fooling set of size (m ! )n where m = (m − 2)/2 and n = (n − 2)/2.",
                "This will prove the theorem because m ! is Ω(m log m), so that log((m ! )n ) = n log(m !) is Ω(nm log m).",
                "We write the set of candidates as the following disjoint union: C = {a, b} ∪ L ∪ R where L = {l1, l2, . . . , lm } and R = {r1, r2, . . . , rm }.",
                "For every vector (π1, π2, . . . , πn ) consisting of n permutations of the integers 1 through m (πi : {1, 2, . . . , m } → {1, 2, . . . , m }), let the following vector of votes be an element of the fooling set: • For 1 ≤ i ≤ n , let voter 2i − 1 rank the candidates a b lπi(1) rπi(1) lπi(2) rπi(2) . . . lπi(m ) rπi(m ). • For 1 ≤ i ≤ n , let voter 2i rank the candidates rπi(m ) lπi(m ) rπi(m −1) lπi(m −1) . . . rπi(1) lπi(1) b a. • Let voter n − 1 = 2n + 1 rank the candidates a b l1 r1 l2 r2 . . . lm rm . • Let voter n = 2n +2 rank the candidates rm lm rm −1 lm −1 . . . r1 l1 a b.",
                "We observe that this fooling set has size (m ! )n , and that candidate a wins in each vector of votes in the fooling set (every pair of candidates is tied in their pairwise election, with the exception that a defeats b, so that a wins the election by half a point).",
                "All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses.",
                "Let the first vote vector correspond to the vector (π1 1, π1 2, . . . , π1 n ), and let the second vote vector correspond to the vector (π2 1, π2 2, . . . , π2 n ).",
                "For some i, we must have π1 i = π2 i , so that for some j ∈ {1, 2, . . . , m }, we have (π1 i )−1 (j) < (π2 i )−1 (j).",
                "Now, construct a new vote vector by taking vote 2i−1 from the first vote vector, and the remaining votes from the second vote vector. as Copeland score remains unchanged.",
                "Let us consider the score of lj.",
                "We first observe that the rank of lj in vote 2i − 1 in the newly constructed vote vector is at least 2 higher than it was in the second vote vector, because (π1 i )−1 (j) < (π2 i )−1 (j).",
                "Let D1 (lj) be the set of candidates in L ∪ R that voter 2i − 1 ranked lower than lj in the first vote vector (D1 (lj) = {c ∈ L ∪ R : lj 1 2i−1 c}), and let D2 (lj) be the set of candidates in L ∪ R that voter 2i − 1 ranked lower than lj in the second vote vector (D2 (lj) = {c ∈ L ∪ R : lj 2 2i−1 c}).",
                "Then, it follows that in the newly constructed vote vector, lj defeats all the candidates in D1 (lj) − D2 (lj) in their pairwise elections (because lj receives an extra vote in each one of these pairwise elections relative to the second vote vector), and loses to all the candidates in D2 (lj) − D1 (lj) (because lj loses a vote in each one of these pairwise elections relative to the second vote vector), and ties with everyone else.",
                "But |D1 (lj)|−|D2 (lj)| ≥ 2, and hence |D1 (lj) − D2 (lj)| − |D2 (lj) − D1 (lj)| ≥ 2.",
                "Hence, in the newly constructed vote vector, lj has at least two more pairwise wins than pairwise losses, and therefore has at least 1 more point than if lj had tied all its pairwise elections.",
                "Thus, lj has a higher Copeland score than a in the newly constructed vote vector.",
                "So, a is not the winner in the newly constructed vote vector, and hence we have a correct fooling set.",
                "Theorem 8.",
                "The nondeterministic communication complexity of the maximin rule is O(nm).",
                "Proof.",
                "The nondeterministic protocol will guess which candidate w is the winner, and, for each other candidate c, which candidate o(c) is the candidate against whom c receives its lowest score in a pairwise election.",
                "Then, let every voter communicate the following: • for each candidate c = w, whether she prefers c to w; • for each candidate c = w, whether she prefers c to o(c).",
                "We observe that this requires the communication of 2n(m− 1) bits.",
                "If the guesses were correct, then, letting N(d, e) be the number of voters preferring candidate d to candidate e, we should have N(c, o(c)) < N(w, c ) for any c = w, c = w, which will prove that w wins the election.",
                "Theorem 9.",
                "The nondeterministic communication complexity of the maximin rule is Ω(nm) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We will exhibit a fooling set of size 2n m where m = m − 2 and n = (n − 1)/4.",
                "Let b be a candidate other than a.",
                "For every vector (S1, S2, . . . , Sn ) consisting of n subsets Si ⊆ C − {a, b}, let the following vector of votes be an element of the fooling set: • For 1 ≤ i ≤ n , let voters 4i − 3 and 4i − 2 rank the candidates Si a C − (Si ∪ {a, b}) b. • For 1 ≤ i ≤ n , let voters 4i − 1 and 4i rank the candidates b C − (Si ∪ {a, b}) a Si. 83 • Let voter 4n + 1 = n rank the candidates a b C − {a, b}.",
                "We observe that this fooling set has size (2m )n = 2n m , and that candidate a wins in each vector of votes in the fooling set (in every one of as pairwise elections, a is ranked higher than its opponent by 2n +1 = (n+1)/2 > n/2 votes).",
                "All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses.",
                "Let the first vote vector correspond to the vector (S1 1 , S1 2 , . . . , S1 n ), and let the second vote vector correspond to the vector (S2 1 , S2 2 , . . . , S2 n ).",
                "For some i, we must have S1 i = S2 i , so that either S1 i S2 i or S2 i S1 i .",
                "Without loss of generality, suppose S1 i S2 i , and let c be some candidate in S1 i − S2 i .",
                "Now, construct a new vote vector by taking votes 4i − 3 and 4i − 2 from the first vote vector, and the remaining votes from the second vote vector.",
                "In this newly constructed vote vector, a is ranked higher than c by only 2n −1 voters, for the following reason.",
                "Whereas voters 4i−3 and 4i − 2 do not rank c higher than a in the second vote vector (because c /∈ S2 i ), voters 4i − 3 and 4i − 2 do rank c higher than a in the first vote vector (because c ∈ S1 i ).",
                "Moreover, in every one of bs pairwise elections, b is ranked higher than its opponent by at least 2n voters.",
                "So, a has a lower maximin score than b, therefore a is not the winner in the newly constructed vote vector, and hence we have a correct fooling set.",
                "Theorem 10.",
                "The deterministic communication complexity of the STV rule is O(n(log m)2 ).",
                "Proof.",
                "Consider the following communication protocol.",
                "Let each voter first announce her most preferred candidate (O(n log m) communication).",
                "In the remaining rounds, we will keep track of each voters most preferred candidate among the remaining candidates, which will be enough to implement the rule.",
                "When candidate c is eliminated, let each of the voters whose most preferred candidate among the remaining candidates was c announce their most preferred candidate among the candidates remaining after cs elimination.",
                "If candidate c was the ith candidate to be eliminated (that is, there were m − i + 1 candidates remaining before cs elimination), it follows that at most n/(m − i + 1) voters had candidate c as their most preferred candidate among the remaining candidates, and thus the number of bits to be communicated after the elimination of the ith candidate is O((n/(m−i+1)) log m).7 Thus, the total communication in this communication protocol is O(n log m + m−1 i=1 (n/(m − i + 1)) log m).",
                "Of course, m−1 i=1 1/(m − i + 1) = m i=2 1/i, which is O(log m).",
                "Substituting into the previous expression, we find that the communication complexity is O(n(log m)2 ).",
                "Theorem 11.",
                "The nondeterministic communication complexity of the STV rule is Ω(n log m) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We omit this proof because of space constraint. 7 Actually, O((n/(m − i + 1)) log(m − i + 1)) is also correct, but it will not improve the bound.",
                "Theorem 12.",
                "The deterministic communication complexity of the approval rule is O(nm).",
                "Proof.",
                "Approving or disapproving of a candidate requires only one bit of information, so every voter can simply approve or disapprove of every candidate for a total communication of nm bits.",
                "Theorem 13.",
                "The nondeterministic communication complexity of the approval rule is Ω(nm) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We will exhibit a fooling set of size 2n m where m = m − 1 and n = (n − 1)/4.",
                "For every vector (S1, S2, . . . , Sn ) consisting of n subsets Si ⊆ C − {a}, let the following vector of votes be an element of the fooling set: • For 1 ≤ i ≤ n , let voters 4i − 3 and 4i − 2 approve Si ∪ {a}. • For 1 ≤ i ≤ n , let voters 4i − 1 and 4i approve C − (Si ∪ {a}). • Let voter 4n + 1 = n approve {a}.",
                "We observe that this fooling set has size (2m )n = 2n m , and that candidate a wins in each vector of votes in the fooling set (a is approved by 2n + 1 voters, whereas each other candidate is approved by only 2n voters).",
                "All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses.",
                "Let the first vote vector correspond to the vector (S1 1 , S1 2 , . . . , S1 n ), and let the second vote vector correspond to the vector (S2 1 , S2 2 , . . . , S2 n ).",
                "For some i, we must have S1 i = S2 i , so that either S1 i S2 i or S2 i S1 i .",
                "Without loss of generality, suppose S1 i S2 i , and let b be some candidate in S1 i − S2 i .",
                "Now, construct a new vote vector by taking votes 4i − 3 and 4i − 2 from the first vote vector, and the remaining votes from the second vote vector.",
                "In this newly constructed vote vector, a is still approved by 2n + 1 votes.",
                "However, b is approved by 2n + 2 votes, for the following reason.",
                "Whereas voters 4i−3 and 4i−2 do not approve b in the second vote vector (because b /∈ S2 i ), voters 4i − 3 and 4i − 2 do approve b in the first vote vector (because b ∈ S1 i ).",
                "It follows that bs score in the newly constructed vote vector is bs score in the second vote vector (2n ), plus two.",
                "So, a is not the winner in the newly constructed vote vector, and hence we have a correct fooling set.",
                "Interestingly, an Ω(m) lower bound can be obtained even for the problem of finding a candidate that is approved by more than one voter [20].",
                "Theorem 14.",
                "The deterministic communication complexity of the Condorcet rule is O(nm).",
                "Proof.",
                "We maintain a set of active candidates S which is initialized to C. At each stage, we choose two of the active candidates (say, the two candidates with the lowest indices), and we let each voter communicate which of the two candidates she prefers. (Such a stage requires the communication of n bits, one per voter.)",
                "The candidate preferred by fewer 84 voters (the loser of the pairwise election) is removed from S. (If the pairwise election is tied, both candidates are removed.)",
                "After at most m − 1 iterations, only one candidate is left (or zero candidates are left, in which case there is no Condorcet winner).",
                "Let a be the remaining candidate.",
                "To find out whether candidate a is the Condorcet winner, let each voter communicate, for every candidate c = a, whether she prefers a to c. (This requires the communication of at most n(m − 1) bits.)",
                "This is enough to establish whether a won each of its pairwise elections (and thus, whether a is the Condorcet winner).",
                "Theorem 15.",
                "The nondeterministic communication complexity of the Condorcet rule is Ω(nm) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We will exhibit a fooling set of size 2n m where m = m − 1 and n = (n − 1)/2.",
                "For every vector (S1, S2, . . . , Sn ) consisting of n subsets Si ⊆ C − {a}, let the following vector of votes be an element of the fooling set: • For 1 ≤ i ≤ n , let voter 2i − 1 rank the candidates Si a C − Si. • For 1 ≤ i ≤ n , let voter 2i rank the candidates C − Si a Si. • Let voter 2n +1 = n rank the candidates a C −{a}.",
                "We observe that this fooling set has size (2m )n = 2n m , and that candidate a wins in each vector of votes in the fooling set (a wins each of its pairwise elections by a single vote).",
                "All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses.",
                "Let the first vote vector correspond to the vector (S1 1 , S1 2 , . . . , S1 n ), and let the second vote vector correspond to the vector (S2 1 , S2 2 , . . . , S2 n ).",
                "For some i, we must have S1 i = S2 i , so that either S1 i S2 i or S2 i S1 i .",
                "Without loss of generality, suppose S1 i S2 i , and let b be some candidate in S1 i − S2 i .",
                "Now, construct a new vote vector by taking vote 2i − 1 from the first vote vector, and the remaining votes from the second vote vector.",
                "In this newly constructed vote vector, b wins its pairwise election against a by one vote (vote 2i − 1 ranks b above a in the newly constructed vote vector because b ∈ S1 i , whereas in the second vote vector vote 2i − 1 ranked a above b because b /∈ S2 i ).",
                "So, a is not the Condorcet winner in the newly constructed vote vector, and hence we have a correct fooling set.",
                "Theorem 16.",
                "The deterministic communication complexity of the cup rule is O(nm).",
                "Proof.",
                "Consider the following simple communication protocol.",
                "First, let all the voters communicate, for every one of the matchups in the first round, which of its two candidates they prefer.",
                "After this, the matchups for the second round are known, so let all the voters communicate which candidate they prefer in each matchup in the second round-etc.",
                "Because communicating which of two candidates is preferred requires only one bit per voter, and because there are only m − 1 matchups in total, this communication protocol requires O(nm) communication.",
                "Theorem 17.",
                "The nondeterministic communication complexity of the cup rule is Ω(nm) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We will exhibit a fooling set of size 2n m where m = (m − 1)/2 and n = (n − 7)/2.",
                "Given that m + 1 is a power of 2, so that one candidate gets a bye (that is, does not face an opponent) in the first round, let a be the candidate with the bye.",
                "Of the m first-round matchups, let lj denote the one (left) candidate in the jth matchup, and let rj be the other (right) candidate.",
                "Let L = {lj : 1 ≤ j ≤ m } and R = {rj : 1 ≤ j ≤ m }, so that C = L ∪ R ∪ {a}. . . . . . . . . . l r l r l r a m1 1 2 2 m Figure 1: The schedule for the cup rule used in the proof of Theorem 17.",
                "For every vector (S1, S2, . . . , Sn ) consisting of n subsets Si ⊆ R, let the following vector of votes be an element of the fooling set: • For 1 ≤ i ≤ n , let voter 2i − 1 rank the candidates Si L a R − Si. • For 1 ≤ i ≤ n , let voter 2i rank the candidates R − Si L a Si. • Let voters 2n +1 = n−6, 2n +2 = n−5, 2n +3 = n−4 rank the candidates L a R. • Let voters 2n + 4 = n − 3, 2n + 5 = n − 2 rank the candidates a r1 l1 r2 l2 . . . rm lm . • Let voters 2n + 6 = n − 1, 2n + 7 = n rank the candidates rm lm rm −1 lm −1 . . . r1 l1 a.",
                "We observe that this fooling set has size (2m )n = 2n m .",
                "Also, candidate a wins in each vector of votes in the fooling set, for the following reasons.",
                "Each candidate rj defeats its opponent lj in the first round. (For any 1 ≤ i ≤ n , the net effect of votes 2i − 1 and 2i on the pairwise election between rj and lj is zero; votes n − 6, n − 5, n − 4 prefer lj to rj, but votes n − 3, n − 2, n − 1, n all prefer rj to lj.)",
                "Moreover, a defeats every rj in their pairwise election. (For any 1 ≤ i ≤ n , the net effect of votes 2i − 1 and 2i on the pairwise election between a and rj is zero; votes n − 1, n prefer rj to a, but votes n − 6, n − 5, n − 4, n − 3, n − 2 all prefer a to rj.)",
                "It follows that a will defeat all the candidates that it faces.",
                "All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses.",
                "Let the first vote vector correspond to the vector 85 (S1 1 , S1 2 , . . . , S1 n ), and let the second vote vector correspond to the vector (S2 1 , S2 2 , . . . , S2 n ).",
                "For some i, we must have S1 i = S2 i , so that either S1 i S2 i or S2 i S1 i .",
                "Without loss of generality, suppose S1 i S2 i , and let rj be some candidate in S1 i − S2 i .",
                "Now, construct a new vote vector by taking vote 2i from the first vote vector, and the remaining votes from the second vote vector.",
                "We note that, whereas in the second vote vector vote 2i preferred rj to lj (because rj ∈ R−S2 i ), in the newly constructed vote vector this is no longer the case (because rj ∈ S1 i ).",
                "It follows that, whereas in the second vote vector, rj defeated lj in the first round by one vote, in the newly constructed vote vector, lj defeats rj in the first round.",
                "Thus, at least one lj advances to the second round after defeating its opponent rj.",
                "Now, we observe that in the newly constructed vote vector, any lk wins its pairwise election against any rq with q = k. This is because among the first 2n votes, at least n − 1 prefer lk to rq; votes n − 6, n − 5, n − 4 prefer lk to rq; and, because q = k, either votes n − 3, n − 2 prefer lk to rq (if k < q), or votes n − 1, n prefer lk to rq (if k > q).",
                "Thus, at least n + 4 = (n + 1)/2 > n/2 votes prefer lk to rq.",
                "Moreover, any lk wins its pairwise election against a.",
                "This is because only votes n − 3 and n − 2 prefer a to lk.",
                "It follows that, after the first round, any surviving candidate lk can only lose a matchup against another surviving lk , so that one of the lk must win the election.",
                "So, a is not the winner in the newly constructed vote vector, and hence we have a correct fooling set.",
                "Theorem 18.",
                "The deterministic communication complexity of the Bucklin rule is O(nm).",
                "Proof.",
                "Let l be the minimum integer for which there is a candidate who is ranked among the top l candidates by more than half the votes.",
                "We will do a binary search for l. At each point, we will have a lower bound lL which is smaller than l (initialized to 0), and an upper bound lH which is at least l (initialized to m).",
                "While lH − lL > 1, we continue by finding out whether (lH − l)/2 is smaller than l, after which we can update the bounds.",
                "To find out whether a number k is smaller than l, we determine every voters k most preferred candidates.",
                "Every voter can communicate which candidates are among her k most preferred candidates using m bits (for each candidate, indicate whether the candidate is among the top k or not), but because the binary search requires log m iterations, this gives us an upper bound of O((log m)nm), which is not strong enough.",
                "However, if lL < k < lH , and we already know a voters lL most preferred candidates, as well as her lH most preferred candidates, then the voter no longer needs to communicate whether the lL most preferred candidates are among her k most preferred candidates (because they must be), and she no longer needs to communicate whether the m−lH least preferred candidates are among her k most preferred candidates (because they cannot be).",
                "Thus the voter needs to communicate only m−lL −(m−lH ) = lH −lL bits in any given stage.",
                "Because each stage, lH − lL is (roughly) halved, each voter in total communicates only (roughly) m + m/2 + m/4 + . . . ≤ 2m bits.",
                "Theorem 19.",
                "The nondeterministic communication complexity of the Bucklin rule is Ω(nm) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We will exhibit a fooling set of size 2n m where m = (m−1)/2 and n = n/2.",
                "We write the set of candidates as the following disjoint union: C = {a} ∪ L ∪ R where L = {l1, l2, . . . , lm } and R = {r1, r2, . . . , rm }.",
                "For any subset S ⊆ {1, 2, . . . , m }, let L(S) = {li : i ∈ S} and let R(S) = {ri : i ∈ S}.",
                "For every vector (S1, S2, . . . , Sn ) consisting of n sets Si ⊆ {1, 2, . . . , m }, let the following vector of votes be an element of the fooling set: • For 1 ≤ i ≤ n , let voter 2i − 1 rank the candidates L(Si) R − R(Si) a L − L(Si) R(Si). • For 1 ≤ i ≤ n , let voter 2i rank the candidates L − L(Si) R(Si) a L(Si) R − R(Si).",
                "We observe that this fooling set has size (2m )n = 2n m , and that candidate a wins in each vector of votes in the fooling set, for the following reason.",
                "Each candidate in C − {a} is ranked among the top m candidates by exactly half the voters (which is not enough to win).",
                "Thus, we need to look at the voters top m +1 candidates, and a is ranked m +1th by all voters.",
                "All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses.",
                "Let the first vote vector correspond to the vector (S1 1 , S1 2 , . . . , S1 n ), and let the second vote vector correspond to the vector (S2 1 , S2 2 , . . . , S2 n ).",
                "For some i, we must have S1 i = S2 i , so that either S1 i S2 i or S2 i S1 i .",
                "Without loss of generality, suppose S1 i S2 i , and let j be some integer in S1 i − S2 i .",
                "Now, construct a new vote vector by taking vote 2i − 1 from the first vote vector, and the remaining votes from the second vote vector.",
                "In this newly constructed vote vector, a is still ranked m + 1th by all votes.",
                "However, lj is ranked among the top m candidates by n + 1 = n/2 + 1 votes.",
                "This is because whereas vote 2i − 1 does not rank lj among the top m candidates in the second vote vector (because j /∈ S2 i , we have lj /∈ L(S2 i )), vote 2i − 1 does rank lj among the top m candidates in the first vote vector (because j ∈ S1 i , we have lj ∈ L(S1 i )).",
                "So, a is not the winner in the newly constructed vote vector, and hence we have a correct fooling set.",
                "Theorem 20.",
                "The nondeterministic communication complexity of the ranked pairs rule is Ω(nm log m) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We omit this proof because of space constraint. 5.",
                "DISCUSSION One key obstacle to using voting for <br>preference aggregation</br> is the communication burden that an election places on the voters.",
                "By lowering this burden, it may become feasible to conduct more elections over more issues.",
                "In the limit, this could lead to a shift from representational government to a system in which most issues are decided by referenda-a veritable e-democracy.",
                "In this paper, we analyzed the communication complexity of the common voting rules.",
                "Knowing which voting rules require little communication is especially important when the issue to be voted on is of low enough importance that the following is true: the parties involved are willing to accept a rule that tends 86 to produce outcomes that are slightly less representative of the voters preferences, if this rule reduces the communication burden on the voters significantly.",
                "The following table summarizes the results we obtained.",
                "Rule Lower bound Upper bound plurality Ω(n log m) O(n log m) plurality w/ runoff Ω(n log m) O(n log m) STV Ω(n log m) O(n(log m)2) Condorcet Ω(nm) O(nm) approval Ω(nm) O(nm) Bucklin Ω(nm) O(nm) cup Ω(nm) O(nm) maximin Ω(nm) O(nm) Borda Ω(nm log m) O(nm log m) Copeland Ω(nm log m) O(nm log m) ranked pairs Ω(nm log m) O(nm log m) Communication complexity of voting rules, sorted from low to high.",
                "All of the upper bounds are deterministic (with the exception of maximin, for which the best deterministic upper bound we proved is O(nm log m)).",
                "All of the lower bounds hold even for nondeterministic communication and even just for determining whether a given candidate a is the winner.",
                "One area of future research is to study what happens when we restrict our attention to communication protocols that do not reveal any strategically useful information.",
                "This restriction may invalidate some of the upper bounds that we derived using multistage communication protocols.",
                "Also, all of our bounds are worst-case bounds.",
                "It may be possible to outperform these bounds when the distribution of votes has additional structure.",
                "When deciding which voting rule to use for an election, there are many considerations to take into account.",
                "The voting rules that we studied in this paper are the most common ones that have survived the test of time.",
                "One way to select among these rules is to consider recent results on complexity.",
                "The table above shows that from a communication complexity perspective, plurality, plurality with runoff, and STV are preferable.",
                "However, plurality has the undesirable property that it is computationally easy to manipulate by voting strategically [3, 7].",
                "Plurality with runoff is NP-hard to manipulate by a coalition of weighted voters, or by an individual that faces correlated uncertainty about the others votes [7, 6].",
                "STV is NP-hard to manipulate in those settings as well [7], but also by an individual with perfect knowledge of the others votes (when the number of candidates is unbounded) [2].",
                "Therefore, STV is more robust, although it may require slightly more worst-case communication as per the table above.",
                "Yet other selection criteria are the computational complexity of determining whether enough information has been elicited to declare a winner, and that of determining the optimal sequence of queries [8]. 6.",
                "REFERENCES [1] Lawrence Ausubel and Paul Milgrom.",
                "Ascending auctions with package bidding.",
                "Frontiers of Theoretical Economics, 1, 2002.",
                "No. 1, Article 1. [2] John Bartholdi, III and James Orlin.",
                "Single transferable vote resists strategic voting.",
                "Social Choice and Welfare, 8(4):341-354, 1991. [3] John Bartholdi, III, Craig Tovey, and Michael Trick.",
                "The computational difficulty of manipulating an election.",
                "Social Choice and Welfare, 6(3):227-241, 1989. [4] Avrim Blum, Jeffrey Jackson, Tuomas Sandholm, and Martin Zinkevich.",
                "Preference elicitation and query learning.",
                "Journal of Machine Learning Research, 5:649-667, 2004. [5] Wolfram Conen and Tuomas Sandholm.",
                "Preference elicitation in combinatorial auctions: Extended abstract.",
                "In Proceedings of the ACM Conference on Electronic Commerce (ACM-EC), pages 256-259, 2001. [6] Vincent Conitzer, Jerome Lang, and Tuomas Sandholm.",
                "How many candidates are needed to make elections hard to manipulate?",
                "In Theoretical Aspects of Rationality and Knowledge (TARK), pages 201-214, 2003. [7] Vincent Conitzer and Tuomas Sandholm.",
                "Complexity of manipulating elections with few candidates.",
                "In Proceedings of the National Conference on Artificial Intelligence (AAAI), pages 314-319, 2002. [8] Vincent Conitzer and Tuomas Sandholm.",
                "Vote elicitation: Complexity and strategy-proofness.",
                "In Proceedings of the National Conference on Artificial Intelligence (AAAI), pages 392-397, 2002. [9] Sven de Vries, James Schummer, and Rakesh V. Vohra.",
                "On ascending auctions for heterogeneous objects, 2003.",
                "Draft. [10] Allan Gibbard.",
                "Manipulation of voting schemes.",
                "Econometrica, 41:587-602, 1973. [11] Benoit Hudson and Tuomas Sandholm.",
                "Effectiveness of query types and policies for preference elicitation in combinatorial auctions.",
                "In International Conference on Autonomous Agents and Multi-Agent Systems (AAMAS), pages 386-393, 2004. [12] E Kushilevitz and N Nisan.",
                "Communication Complexity.",
                "Cambridge University Press, 1997. [13] Sebasti´en Lahaie and David Parkes.",
                "Applying learning algorithms to preference elicitation.",
                "In Proceedings of the ACM Conference on Electronic Commerce, 2004. [14] Noam Nisan and Ilya Segal.",
                "The communication requirements of efficient allocations and supporting prices.",
                "Journal of Economic Theory, 2005.",
                "Forthcoming. [15] David Parkes. iBundle: An efficient ascending price bundle auction.",
                "In Proceedings of the ACM Conference on Electronic Commerce (ACM-EC), pages 148-157, 1999. [16] Tuomas Sandholm.",
                "An implementation of the contract net protocol based on marginal cost calculations.",
                "In Proceedings of the National Conference on Artificial Intelligence (AAAI), pages 256-262, 1993. [17] Tuomas Sandholm and Craig Boutilier.",
                "Preference elicitation in combinatorial auctions.",
                "In Peter Cramton, Yoav Shoham, and Richard Steinberg, editors, Combinatorial Auctions, chapter 10.",
                "MIT Press, 2005. [18] Paolo Santi, Vincent Conitzer, and Tuomas Sandholm.",
                "Towards a characterization of polynomial preference elicitation with value queries in combinatorial auctions.",
                "In Conference on Learning Theory (COLT), pages 1-16, 2004. [19] Mark Satterthwaite.",
                "Strategy-proofness and Arrows conditions: existence and correspondence theorems for voting procedures and social welfare functions.",
                "Journal of Economic Theory, 10:187-217, 1975. [20] Ilya Segal.",
                "The communication requirements of social choice rules and supporting budget sets, 2004.",
                "Draft.",
                "Presented at the DIMACS Workshop on Computational Issues in Auction Design, Rutgers University, New Jersey, USA. [21] Peter Wurman and Michael Wellman.",
                "AkBA: A progressive, anonymous-price combinatorial auction.",
                "In Proceedings of the ACM Conference on Electronic Commerce (ACM-EC), pages 21-29, 2000. [22] A. C. Yao.",
                "Some complexity questions related to distributed computing.",
                "In Proceedings of the 11th ACM symposium on theory of computing (STOC), pages 209-213, 1979. [23] Martin Zinkevich, Avrim Blum, and Tuomas Sandholm.",
                "On polynomial-time preference elicitation with value queries.",
                "In Proceedings of the ACM Conference on Electronic Commerce (ACM-EC), pages 176-185, 2003. 87"
            ],
            "original_annotated_samples": [
                "INTRODUCTION One key factor in the practicality of any <br>preference aggregation</br> rule is its communication burden.",
                "This has at least the following advantages: • It can make <br>preference aggregation</br> feasible in settings where the total amount of preference information is too large to communicate. • Even when communicating all the preference information is feasible, reducing the communication requirements lessens the burden placed on the agents.",
                "Most of the work on reducing the communication burden in <br>preference aggregation</br> has focused on resource allocation settings such as combinatorial auctions, in which an auctioneer auctions off a number of (possibly distinct) items in a single event.",
                "DISCUSSION One key obstacle to using voting for <br>preference aggregation</br> is the communication burden that an election places on the voters."
            ],
            "translated_annotated_samples": [
                "INTRODUCCIÓN Un factor clave en la viabilidad de cualquier regla de <br>agregación de preferencias</br> es su carga de comunicación.",
                "Esto tiene al menos las siguientes ventajas: • Puede hacer factible la <br>agregación de preferencias</br> en entornos donde la cantidad total de información de preferencias es demasiado grande para comunicar. • Incluso cuando comunicar toda la información de preferencias es factible, reducir los requisitos de comunicación disminuye la carga impuesta a los agentes.",
                "La mayor parte del trabajo sobre la reducción de la carga de comunicación en la <br>agregación de preferencias</br> se ha centrado en entornos de asignación de recursos como subastas combinatorias, en las que un subastador subasta un número de artículos (posiblemente distintos) en un solo evento.",
                "DISCUSIÓN Un obstáculo clave para utilizar la votación como método de <br>agregación de preferencias</br> es la carga de comunicación que implica una elección para los votantes."
            ],
            "translated_text": "Determinamos la complejidad de comunicación de las reglas de votación comunes. Las reglas (ordenadas por su complejidad de comunicación de baja a alta) son pluralidad, pluralidad con segunda vuelta, voto único transferible (STV), Condorcet, aprobación, Bucklin, taza, maximin, Borda, Copeland y pares clasificados. Para cada regla, primero proporcionamos un protocolo de comunicación determinista y un límite superior en la cantidad de bits comunicados en él; luego, damos un límite inferior en los requisitos de comunicación (incluso los no deterministas) de la regla de votación. Los límites coinciden para todas las reglas de votación excepto STV y maximin. Categorías y Descriptores de Asignaturas F.2 [Teoría de la Computación]: Análisis de Algoritmos y Complejidad de Problemas; J.4 [Aplicaciones Informáticas]: Ciencias Sociales y del Comportamiento-Economía Términos Generales Algoritmos, Economía, Teoría 1. INTRODUCCIÓN Un factor clave en la viabilidad de cualquier regla de <br>agregación de preferencias</br> es su carga de comunicación. Para agregar con éxito las preferencias de los agentes, generalmente no es necesario que todos los agentes informen toda su información de preferencias. Los protocolos inteligentes que obtienen parcial y secuencialmente las preferencias de los agentes tienen el potencial de reducir drásticamente la comunicación requerida. Esto tiene al menos las siguientes ventajas: • Puede hacer factible la <br>agregación de preferencias</br> en entornos donde la cantidad total de información de preferencias es demasiado grande para comunicar. • Incluso cuando comunicar toda la información de preferencias es factible, reducir los requisitos de comunicación disminuye la carga impuesta a los agentes. Esto es especialmente cierto cuando los agentes, en lugar de conocer todas sus preferencias de antemano, necesitan invertir esfuerzo (como cálculos o recopilación de información) para determinar sus preferencias. • Preserva (parte de) la privacidad de los agentes. La mayor parte del trabajo sobre la reducción de la carga de comunicación en la <br>agregación de preferencias</br> se ha centrado en entornos de asignación de recursos como subastas combinatorias, en las que un subastador subasta un número de artículos (posiblemente distintos) en un solo evento. Debido a que en una subasta combinatoria, los postores pueden tener valoraciones separadas para cada uno de un número exponencial de posibles paquetes de artículos, este es un escenario en el que reducir la carga de comunicación es especialmente crucial. Esto se puede lograr complementando al subastador con un provocador que elicitara incrementalmente partes de las preferencias de los postores según sea necesario, basándose en lo que los postores han revelado sobre sus preferencias hasta el momento, como sugieren Conen y Sandholm [5]. Por ejemplo, el solicitante puede preguntar por el valor de un postor para un paquete específico (consultas de valor), cuál de dos paquetes prefiere el postor (consultas de orden), qué paquete clasifica en la posición k o cuál es la posición de un paquete dado (consultas de clasificación), qué paquete compraría dado un vector particular de precios (consultas de demanda), etc., hasta que se pueda determinar (al menos) la asignación final. Experimentalmente, esto produce a drástico ahorro en la revelación de preferencias [11]. Además, si las funciones de valoración de los agentes provienen de ciertas subclases naturales, el problema de la obtención de información puede resolverse utilizando solo un número polinomial de consultas incluso en el peor de los casos [23, 4, 13, 18, 14]. Para una revisión de la obtención de preferencias en subastas combinatorias, consulte [17]. Las subastas combinatorias ascendentes son una forma especial conocida de obtención de preferencias, donde el encuestador realiza consultas de demanda con precios crecientes [15, 21, 1, 9]. Finalmente, los problemas de asignación de recursos 78 también han sido estudiados desde el punto de vista de la complejidad de la comunicación, derivando así límites inferiores sobre la comunicación requerida. Por ejemplo, Nisan y Segal muestran que se requiere comunicación exponencial incluso para obtener un excedente mayor al obtenido al subastar todos los objetos como un único paquete [14]. Segal también estudia reglas de elección social en general, y muestra que para una gran clase de reglas de elección social, los conjuntos de presupuesto de apoyo deben ser revelados de tal manera que si cada agente prefiere el mismo resultado en su conjunto de presupuesto, esto demuestra la optimalidad de ese resultado. Segal luego utiliza esta caracterización para demostrar límites en la comunicación requerida en la asignación de recursos, así como en entornos de emparejamiento [20]. En este documento, nos enfocaremos en los requisitos de comunicación de una subclase generalmente aplicable de reglas de elección social, comúnmente conocidas como reglas de votación. En un entorno de votación, hay un conjunto de resultados de candidatos sobre los cuales los votantes expresan sus preferencias al enviar un voto (normalmente, una clasificación de los candidatos), y el ganador (es decir, el resultado elegido) se determina en función de estos votos. La comunicación requerida por las reglas de votación puede ser grande ya sea porque el número de votantes es grande (como, por ejemplo, en elecciones nacionales), o porque el número de candidatos es grande (por ejemplo, los agentes pueden votar sobre asignaciones de un número de recursos), o ambos. El trabajo previo [8] ha estudiado la obtención de información en votaciones, analizando qué tan difícil es computacionalmente decidir si se puede determinar un ganador con la información obtenida hasta el momento, así como qué tan difícil es encontrar la secuencia óptima de preguntas dadas sospechas perfectas sobre las preferencias de los votantes. Además, ese artículo discute cuestiones estratégicas (teóricas de juegos) introducidas por la obtención de información. Por el contrario, en este artículo nos preocupamos por el número máximo de bits que deben comunicarse para ejecutar una regla de votación dada, cuando no se conoce de antemano las preferencias de los votantes. Determinamos la complejidad de comunicación de las reglas de votación comunes. Para cada regla, primero damos una cota superior en la complejidad de comunicación (determinística) proporcionando un protocolo de comunicación para ella y analizando cuántos bits necesitan ser transmitidos en este protocolo. (Los resultados de Segal [20] no se aplican a la mayoría de las reglas de votación porque la mayoría de las reglas de votación no son intersección-monótonas (o incluso monótonas).) Para muchas de las reglas de votación bajo estudio, resulta que no se puede hacer mejor que simplemente permitir que cada votante comunique inmediatamente toda su información (potencialmente relevante). Sin embargo, para algunas reglas (como la pluralidad con segunda vuelta, STV y taza) existe un protocolo de comunicación multietapa directo que, con un análisis detallado, se puede demostrar que supera significativamente la comunicación inmediata de toda la información (potencialmente relevante). Finalmente, para algunas reglas (como las reglas de Condorcet y Bucklin), necesitamos introducir un protocolo de comunicación más complejo para lograr el mejor límite superior posible. Para dos de las reglas que estudiamos que son intersección-monótonas, a saber, las reglas de aprobación y Condorcet, los resultados de Segal de hecho pueden ser utilizados para dar pruebas alternativas de nuestros límites inferiores. Solo proporcionamos pruebas directas para estas reglas aquí porque 1) estas pruebas directas son de las más fáciles en este documento, 2) las pruebas alternativas son no triviales incluso dados los resultados de Segal, y 3) se aplica una restricción de espacio. Sin embargo, esperamos incluir también las pruebas alternativas en una versión posterior. Después de obtener los límites superiores, demostramos que son ajustados al proporcionar límites inferiores coincidentes en la complejidad de comunicación (incluso la no determinista) de cada regla de votación. Hay dos excepciones: STV, para el cual nuestros límites superiores e inferiores difieren en un factor log m; y maximin, para el cual nuestro mejor límite superior determinístico también es un factor log m por encima del límite inferior (no determinístico), aunque proporcionamos un límite superior no determinístico que coincide con el límite inferior. 2. REVISIÓN DE LAS REGLAS DE VOTACIÓN En esta sección, revisamos las reglas de votación comunes que estudiamos en este documento. Una regla de votación es una función que asigna un vector de votos de los n votantes (es decir, preferencias sobre candidatos) a uno de los m candidatos (el ganador) en el conjunto de candidatos C. En algunos casos (como la regla de Condorcet), la regla también puede declarar que no existe un ganador. No nos preocupamos por lo que sucede en caso de un empate entre candidatos (nuestros límites inferiores se mantienen independientemente de cómo se resuelvan los empates, y los protocolos de comunicación utilizados para nuestros límites superiores no intentan romper los empates). Todas las reglas que estudiamos son reglas basadas en el rango, lo que significa que un voto se define como un ordenamiento de los candidatos (con la excepción de la regla de la pluralidad, para la cual un voto es un único candidato, y la regla de aprobación, para la cual un voto es un subconjunto de los candidatos). Consideraremos las siguientes reglas de votación. (Para reglas que definen una puntuación, el candidato con la puntuación más alta gana.) • reglas de puntuación. Sea α = α1, . . . , αm un vector de enteros tal que α1 ≥ α2 . . . ≥ αm. Para cada votante, un candidato recibe α1 puntos si es clasificado en primer lugar por el votante, α2 si es clasificado en segundo lugar, etc. La puntuación sα de un candidato es el número total de puntos que recibe el candidato. La regla de Borda es la regla de puntuación con α = m−1, m−2, . . . , 0. La regla de la pluralidad es la regla de puntuación con α = 1, 0, . . . , 0. • voto único transferible (STV). La regla avanza a través de una serie de m - 1 rondas. En cada ronda, el candidato con la puntuación de pluralidad más baja (es decir, el menor número de votantes que lo clasifican en primer lugar entre los candidatos restantes) es eliminado (y cada uno de los votos para ese candidato se transfieren al siguiente candidato restante en el orden dado en ese voto). El ganador es el último candidato restante. • mayoría con segunda vuelta. En esta regla, una primera ronda elimina a todos los candidatos excepto a los dos con las puntuaciones de pluralidad más altas. Los votos se transfieren a estos como en la regla de VST, y una segunda ronda determina al ganador de estos dos. • aprobación. Cada votante etiqueta a cada candidato como aprobado o desaprobado. El candidato aprobado por el mayor número de votantes gana. • Condorcet. Para cualquier par de candidatos i y j, sea N(i, j) el número de votantes que prefieren a i sobre j. Si hay un candidato i que es preferido por la mayoría de los votantes a cualquier otro candidato (es decir, N(i, j) > N(j, i) para todo j = i, es decir, i gana en cada elección por pares), entonces el candidato i gana. El término protocolo de votación se usa a menudo para describir el mismo concepto, pero buscamos hacer una distinción clara entre la regla que mapea las preferencias a los resultados y el protocolo de comunicación/obtención utilizado para implementar esta regla. (Simpson). El puntaje maximin de i es s(i) = minj=i N(i, j), es decir, su peor desempeño en una elección por pares. El candidato con la puntuación maximin más alta gana. • Copeland. Para cualquier par de candidatos distintos i y j, sea C(i, j) = 1 si N(i, j) > N(j, i), C(i, j) = 1/2 si N(i, j) = N(j, i) y C(i, j) = 0 si N(i, j) < N(j, i). El puntaje de Copeland del candidato i es s(i) = j=i C(i, j). • taza (comparaciones binarias secuenciales). La regla de la copa se define por un árbol binario equilibrado T con un hoja por candidato, y una asignación de candidatos a hojas (cada hoja recibe un candidato). Cada nodo no hoja se le asigna el ganador de la elección por pares de los nodos hijos; el candidato asignado a la raíz gana. • Bucklin. Para cualquier candidato i y entero l, sea B(i, l) el número de votantes que clasifican al candidato i entre los l primeros candidatos. El ganador es arg mini(min{l : B(i, l) > n/2}). Es decir, si decimos que un votante aprueba a sus l candidatos principales, entonces aumentamos repetidamente l en 1 hasta que algún candidato sea aprobado por más de la mitad de los votantes, y este candidato es el ganador. • pares clasificados. Esta regla determina un orden en todos los candidatos, y el ganador es el candidato en la parte superior de este orden. Ordena todos los pares ordenados de candidatos (i, j) por N(i, j), el número de votantes que prefieren a i sobre j. Comenzando con el par (i, j) con el mayor N(i, j), aseguramos el resultado de su elección en pareja (i j). Luego, pasamos al siguiente par y bloqueamos el resultado de su elección por pares. Continuamos bloqueando cada resultado en pares que no contradiga el orden establecido hasta el momento. Enfatizamos que estas definiciones de reglas de votación no se preocupan por cómo se obtienen los votos de los votantes; todas las reglas de votación, incluidas aquellas que se definen sugestivamente en términos de rondas, son en realidad solo funciones que asignan el vector de todos los votos de los votantes a un ganador. Sin embargo, siempre hay muchas formas diferentes de obtener los votos (o las partes relevantes de estos) de los votantes. Por ejemplo, en la regla de la pluralidad con segunda vuelta, una forma de obtener los votos es pedir a cada votante que declare su orden completo de los candidatos de antemano. Alternativamente, podemos primero pedir a cada votante que declare solo su candidato más preferido; luego, sabremos los dos candidatos en la segunda vuelta, y podemos preguntar a cada votante cuál de estos dos candidatos prefiere. Por lo tanto, distinguimos entre la regla de votación (la asignación de vectores de votos a resultados) y el protocolo de comunicación (que determina cómo se obtienen realmente las partes relevantes de los votos de los votantes). El objetivo de este documento es proporcionar protocolos de comunicación eficientes para las reglas de votación recién definidas, y demostrar que no existen protocolos de comunicación más eficientes. Es interesante notar que la elección del protocolo de comunicación puede afectar el comportamiento estratégico de los votantes. Los protocolos de comunicación de múltiples etapas pueden revelar a los votantes cierta información sobre cómo están votando los demás votantes (por ejemplo, en el protocolo de comunicación de dos etapas recién dado para la pluralidad con segunda vuelta, en la segunda etapa los votantes sabrán qué dos candidatos tienen las puntuaciones de pluralidad más altas). En general, cuando los votantes reciben esa información, puede darles incentivos para votar de manera diferente a como lo harían en un protocolo de comunicación de una sola etapa en el que todos los votantes declaran sus votos completos simultáneamente. Por supuesto, incluso el protocolo de comunicación de una sola etapa no es a prueba de estrategias para ninguna regla de votación razonable, según el teorema de Gibbard-Satterthwaite [10, 19]. Sin embargo, esto no significa que no debamos preocuparnos por agregar aún más oportunidades para el voto estratégico. De hecho, muchos de los protocolos de comunicación introducidos en este documento sí presentan oportunidades adicionales para el voto estratégico, pero no tenemos espacio para discutirlo aquí. (En trabajos anteriores [8], sí proporcionamos un ejemplo donde un protocolo de obtención de información para la regla de votación por aprobación introduce el voto estratégico, y damos principios para diseñar protocolos de obtención de información que no introduzcan problemas estratégicos). Ahora que hemos revisado las reglas de votación, pasamos a una breve revisión de la teoría de la complejidad de la comunicación. 3. REVISIÓN DE ALGUNA TEORÍA DE LA COMPLEJIDAD DE LA COMUNICACIÓN En esta sección, revisamos el modelo básico de un problema de comunicación y la técnica de límite inferior de construcción de un conjunto engañoso. (El modelo básico de un problema de comunicación se debe a Yao [22]; para obtener una visión general, consulte Kushilevitz y Nisan [12].) Cada jugador 1 ≤ i ≤ n conoce (solo) la entrada xi. Juntos, buscan calcular f(x1, x2, . . . , xn). En un protocolo determinista para calcular f, en cada etapa, uno de los jugadores anuncia (a todos los demás jugadores) un bit de información basado en su propia entrada y los bits anunciados hasta el momento. Finalmente, la comunicación termina y todos los jugadores conocen f(x1, x2, . . . , xn). El objetivo es minimizar el número de bits enviados en el peor caso (sobre todos los vectores de entrada). La complejidad de comunicación determinística de un problema es el número máximo de bits enviados en el peor caso en el mejor protocolo determinístico (correcto) para resolverlo. En un protocolo no determinista, el siguiente bit a enviar puede ser elegido de manera no determinista. Para los propósitos de este documento, consideraremos un protocolo no determinista como correcto si para cada vector de entrada, existe alguna secuencia de elecciones no deterministas que los jugadores pueden hacer para que los jugadores conozcan el valor de f cuando el protocolo termina. La complejidad de comunicación no determinista de un problema es el número máximo de bits enviados en el peor caso en el mejor protocolo no determinista (correcto) para él. Ahora estamos listos para dar la definición de un conjunto engañoso. Definición 1. Un conjunto engañoso es un conjunto de vectores de entrada {(x1 1, x1 2, . . . , x1 n), (x2 1, x2 2, . . . , x2 n), . . . , (xk 1 , xk 2 , . . . , xk n) tal que para cualquier i, f(xi 1, xi 2, . . . , xi n) = f0 para alguna constante f0, pero para cualquier i = j, existe algún vector (r1, r2, . . . , rn) ∈ {i, j}n tal que f(xr1 1 , xr2 2 , . . . , xrn n ) = f0. (Es decir, podemos mezclar las entradas de los dos vectores de entrada para obtener un vector con un valor de función diferente). Se sabe que si existe un conjunto engañoso de tamaño k, entonces log k es una cota inferior en la complejidad de la comunicación (incluso en la complejidad de la comunicación no determinista) [12]. Un protocolo a prueba de estrategias es aquel en el que es del mejor interés de los jugadores reportar sus preferencias de manera veraz. Para los propósitos de este documento, f es la regla de votación que asigna los votos al candidato ganador, y xi es el voto del votante (la información que la regla de votación requeriría del votante si no hubiera posibilidad de comunicación en múltiples etapas, es decir, el candidato más preferido (mayoría), los candidatos aprobados (aprobación), o la clasificación de todos los candidatos (todos los demás protocolos)). Sin embargo, cuando obtenemos nuestros límites inferiores, f solo significará si un candidato distinguido a gana. (Es decir, f es 1 si a gana, y 0 en caso contrario). Esto fortalecerá nuestros resultados de límite inferior (porque implica que incluso averiguar si un candidato dado gana es difícil). Por lo tanto, un conjunto engañoso en nuestro contexto es un conjunto de vectores de votos de manera que a gane (no gane) con cada uno de ellos; pero para cualquier par de vectores de votos diferentes en el conjunto, hay una forma de tomar los votos de algunos votantes del primer vector y los votos de los otros del segundo vector, de manera que a no gane (gane). Para simplificar las demostraciones de nuestros límites inferiores, hacemos suposiciones como que el número de votantes n es impar en muchas de estas demostraciones. Por lo tanto, técnicamente, no demostramos el límite inferior para los pares (número de candidatos, número de votantes) (m, n) que no cumplen con estas suposiciones (por ejemplo, si hacemos la suposición anterior, entonces técnicamente no demostramos el límite inferior para ningún par (m, n) en el que n sea par). Sin embargo, siempre demostramos el límite inferior para un conjunto representativo de pares (m, n). Por ejemplo, para cada uno de nuestros límites inferiores, sucede que para infinitos valores de m, hay infinitos valores de n tales que el límite inferior se demuestra para el par (m, n). RESULTADOS Estamos listos para presentar nuestros resultados. Para cada regla de votación, primero proporcionamos un protocolo de comunicación determinista para determinar al ganador y establecer un límite superior. Luego, damos un límite inferior en la complejidad de comunicación no determinista (incluso en la complejidad de decidir si un candidato dado gana, que es una pregunta más fácil). Los límites inferiores coinciden con los límites superiores en todos los casos excepto en dos: la regla STV (límite superior O(n(log m)2); límite inferior Ω(n log m)) y la regla maximin (límite superior O(nm log m), aunque proporcionamos un protocolo no determinista que es O(nm); límite inferior Ω(nm)). Cuando discutimos una regla de votación en la que los votantes clasifican a los candidatos, representaremos una clasificación en la que el candidato c1 está en primer lugar, c2 en segundo lugar, etc., como c1 c2 . . . cm. Una preocupación posible es que en el caso de que sean posibles los empates, puede requerir mucha comunicación verificar si un candidato específico a está entre los ganadores, pero poca comunicación para producir a uno de los ganadores. Sin embargo, todos los conjuntos de engaños que utilizamos en las demostraciones tienen la propiedad de que si a gana, entonces a es el único ganador. Por lo tanto, en estos conjuntos engañosos, si se conoce a alguno de los ganadores, entonces se sabe si a es un ganador. Por lo tanto, calcular uno de los ganadores requiere al menos tanta comunicación como verificar si a está entre los ganadores. En general, cuando un problema de comunicación permite múltiples respuestas correctas para un vector de entradas dado, esto se conoce como calcular una relación en lugar de una función [12]. Sin embargo, según lo anterior, podemos restringir nuestra atención a un subconjunto del dominio donde la regla de votación realmente es una función (de un solo valor), por lo que las técnicas de cota inferior para funciones en lugar de relaciones serán suficientes. A veces, para los propósitos de una demostración, el orden interno de un subconjunto de los candidatos no importa, y en este caso no lo especificaremos. Por ejemplo, si S = {c2, c3}, entonces c1 S c4 indica que se puede utilizar tanto la clasificación c1 c2 c3 c4 como la clasificación c1 c3 c2 c4 para la prueba. Primero damos un límite superior universal. Teorema 1. La complejidad de comunicación determinística de cualquier regla de votación basada en rangos es O(nm log m). Prueba. Este límite se logra simplemente haciendo que todos comuniquen su orden completo de los candidatos (indicar el rango de un candidato individual solo requiere O(log m) bits, por lo que cada uno de los n votantes puede simplemente indicar el rango de cada uno de los m candidatos). El siguiente lema será útil en algunas de nuestras demostraciones. Lema 1. Si m divide a n, entonces log(n!) - m log((n/m)!) ≥ n(log m - 1)/2. Prueba. Si n/m = 1 (es decir, n = m), entonces esta expresión se simplifica a log(n!). Tenemos log(n!) = n i=1 log i ≥ n x=1 log(i)dx, lo cual, utilizando integración por partes, es igual a n log n − (n − 1) > n(log n − 1) = n(log m − 1) > n(log m − 1)/2. Por lo tanto, podemos asumir que n/m ≥ 2. Observamos que log(n!) = n i=1 log i = n/m−1 i=0 m j=1 log(im+j) ≥ n/m−1 i=1 m j=1 log(im) = m n/m−1 i=1 log(im), y que m log((n/m)!) = m n/m i=1 log(i). Por lo tanto, log(n!) − m log((n/m)!) ≥ m n/m−1 i=1 log(im) − m n/m i=1 log(i) = m(( n/m−1 i=1 log(im/i))−log(n/m)) = m((n/m− 1) log m−log n+log m) = n log m−m log n. Ahora, usando el hecho de que n/m ≥ 2, tenemos m log n = n(m/n) log m(n/m) = n(m/n)(log m + log(n/m)) ≤ n(1/2)(log m + log 2). Por lo tanto, log(n!) − m log((n/m)!) ≥ n log m − m log n ≥ n log m − n(1/2)(log m + log 2) = n(log m − 1)/2. Teorema 2. La complejidad de comunicación determinística de la regla de la pluralidad es O(n log m). Prueba. Indicar a uno de los candidatos solo requiere O(log m) bits, por lo que cada votante puede simplemente indicar a su candidato más preferido. Teorema 3. La complejidad de comunicación no determinista de la regla de la pluralidad es Ω(n log m) (incluso para decidir si un candidato dado a gana). Prueba. Exhibiremos un conjunto de engaño de tamaño n ! (( n m )! )m donde n = (n−1)/2. Tomar el logaritmo de esto da como resultado log(n ! )− m log((n /m)! ), por lo que el resultado se sigue del Lema 1. El conjunto de engaño estará formado por todos los vectores de votos que cumplan las siguientes restricciones: • Para cualquier 1 ≤ i ≤ n, los votantes 2i−1 y 2i votan lo mismo. • Cada candidato recibe la misma cantidad de votos de los primeros 2n = n − 1 votantes. • El último votante (votante n) vota por a. El candidato A gana con cada uno de estos vectores de votos debido al voto adicional por A del último votante. Dado que m divide a n, veamos cuántos vectores de voto hay en el conjunto engañoso. Necesitamos distribuir n pares de votantes de manera equitativa entre m candidatos, para un total de n /m pares de votantes por candidato; y hay precisamente n ! (( n m )! )m formas de hacer esto. Todo lo que queda por demostrar es que para cualquier par de vectores de votos distintos en el conjunto engañoso, podemos hacer que cada uno de los votantes vote de acuerdo con uno de estos dos vectores de manera que un candidato pierda. Sea i un número tal que los dos vectores de voto discrepan en el candidato por el cual votan los votantes 2i − 1 y 2i. Sin pérdida de generalidad, supongamos que en el primer vector de votos, estos votantes no votan por a (sino por algún otro candidato, b, en su lugar). Ahora, construye un nuevo vector de votos tomando los votos 2i − 1 y 2i del primer vector de votos, y los votos restantes del segundo vector de votos. Entonces, b recibe 2n /m + 2 votos en este vector de votación recién construido, mientras que a recibe como máximo 2n /m+1 votos. Por lo tanto, a no es el ganador en el vector de votación recién construido, y por lo tanto tenemos un conjunto de engaño correcto. Teorema 4. La complejidad de comunicación determinística de la regla de pluralidad con segunda vuelta es O(n log m). Prueba. Primero, permita que cada votante indique a su candidato más preferido usando log m bits. Después de esto, se conocen los dos candidatos en la segunda vuelta, y cada votante puede indicar cuál prefiere usando un solo bit adicional. Teorema 5. La complejidad de comunicación no determinista de la pluralidad con la regla de desempate es Ω(n log m) (incluso para decidir si un candidato dado a gana). Prueba. Exhibiremos un conjunto de engaño de tamaño n ! (( n m )! )m donde m = m/2 y n = (n − 2)/4. Tomar el logaritmo de esto da como resultado log(n !) − m log((n /m )! ), por lo que el resultado se sigue del Lema 1. Divide a los candidatos en m pares: (c1, d1), (c2, d2), . . . , (cm , dm ) donde c1 = a y d1 = b. El conjunto de engaño estará formado por todos los vectores de votos que satisfacen las siguientes restricciones: • Para cualquier 1 ≤ i ≤ n, los votantes 4i − 3 y 4i − 2 clasifican a los candidatos ck(i) a C − {a, ck(i)}, para algún candidato ck(i). (Si ck(i) = a, entonces el voto es simplemente a C − {a}.) • Para cualquier 1 ≤ i ≤ n, los votantes 4i − 1 y 4i clasifican a los candidatos dk(i) a C − {a, dk(i)} (es decir, su candidato más preferido es el candidato que está emparejado con el candidato por el que votaron los dos votantes anteriores). Una prueba intuitiva de esto es la siguiente. Podemos contar el número de permutaciones de n elementos de la siguiente manera. Primero, divide los elementos en m cubetas de tamaño n / m, de modo que si x se coloca en una cubeta de índice inferior a y, entonces x se indexará más bajo en la permutación final. Luego, decide la permutación dentro de cada cubeta (para la cual hay (n / m)! opciones por cubeta). Se deduce que n! es igual al número de formas de dividir n elementos en m contenedores de tamaño n/m, multiplicado por ((n/m)!)^m. • Cada candidato está clasificado en la parte superior de igual cantidad de los primeros 4n = n − 2 votos. • El votante 4n + 1 = n−1 clasifica a los candidatos a C−{a}. • El votante 4n + 2 = n clasifica a los candidatos b C − {b}. El candidato a gana con cada uno de estos vectores de voto: debido a los dos últimos votos, los candidatos a y b están un voto por delante de todos los demás candidatos y avanzan a la segunda vuelta, y en este punto todos los votos que tenían a otro candidato clasificado en primer lugar se transfieren a a, de modo que a gana la segunda vuelta. Dado que m divide a n, veamos cuántos vectores de voto hay en el conjunto engañoso. Necesitamos distribuir n grupos de cuatro votantes de manera equitativa entre los m pares de candidatos, y (como en la demostración del Teorema 3) hay n ! (( n m )! )m formas de hacerlo. Todo lo que queda por demostrar es que para cualquier par de vectores de votos distintos en el conjunto de engaño, podemos hacer que cada uno de los votantes vote de acuerdo con uno de estos dos vectores de tal manera que a pierda. Sea i un número tal que ck(i) no sea el mismo en ambos de estos dos vectores de votos, es decir, c1 k(i) (ck(i) en el primer vector de votos) no es igual a c2 k(i) (ck(i) en el segundo vector de votos). Sin pérdida de generalidad, supongamos que c1 k(i) = a. Ahora, construye un nuevo vector de votos tomando los votos 4i − 3, 4i − 2, 4i − 1, 4i del primer vector de votos, y los votos restantes del segundo vector de votos. En este nuevo vector de voto construido, c1 k(i) y d1 k(i) reciben cada uno 4n /m+2 votos en la primera ronda, mientras que a recibe como máximo 4n /m+1 votos. Por lo tanto, a no continúa hasta la segunda vuelta en el nuevo vector de votación construido, y por lo tanto tenemos un conjunto de engaño correcto. Teorema 6. La complejidad de comunicación no determinista de la regla de Borda es Ω(nm log m) (incluso para decidir si un candidato dado a gana). Prueba. Exhibiremos un conjunto de engaño de tamaño (m ! )n donde m = m−2 y n = (n−2)/4. Esto demostrará el teorema porque m ! es Ω(m log m), por lo que log((m ! )n ) = n log(m !) es Ω(nm log m). Para cada vector (π1, π2, . . . , πn) que consiste en n ordenamientos de todos los candidatos excepto a y otro candidato fijo b (técnicamente, los ordenamientos toman la forma de una función biunívoca πi: {1, 2, . . . , m} → C − {a, b} con πi(j) = c indicando que el candidato c es el j-ésimo en el orden representado por πi), deja que el siguiente vector de votos sea un elemento del conjunto engañoso: • Para 1 ≤ i ≤ n, deja que los votantes 4i − 3 y 4i − 2 clasifiquen a los candidatos a b πi(1) πi(2) . . . πi(m). • Para 1 ≤ i ≤ n, deja que los votantes 4i − 1 y 4i clasifiquen a los candidatos πi(m) πi(m − 1) . . . πi(1) b a. • Deja que el votante 4n + 1 = n − 1 clasifique a los candidatos a b π0(1) π0(2) . . . π0(m) (donde π0 es un orden arbitrario de los candidatos excepto a y b que es el mismo para cada elemento del conjunto engañoso). • Deja que el votante 4n + 2 = n clasifique a los candidatos π0(m) π0(m − 1) . . . π0(1) a b. Observamos que este conjunto engañoso tiene un tamaño de (m!)n, y que el candidato a gana en cada vector de votos en el conjunto engañoso (para ver por qué, observamos que para cualquier 1 ≤ i ≤ n, los votos 4i-3 y 4i-2 clasifican a los candidatos de manera exactamente opuesta a los votos 4i-1 y 4i, lo que bajo la regla de Borda significa que se cancelan entre sí; y los dos últimos votos dan un punto más a a que a cualquier otro candidato, además de b que recibe dos puntos menos que a). Todo lo que queda por demostrar es que para cualquier par de vectores de votos distintos en el conjunto de engaño, podemos hacer que cada uno de los votantes vote de acuerdo con uno de estos dos vectores de tal manera que a pierda. Que el primer vector de votos corresponda al vector (π1 1, π1 2, . . . , π1 n), y que el segundo vector de votos corresponda al vector (π2 1, π2 2, . . . , π2 n). Para algunos i, debemos tener π1 i = π2 i, de modo que para algún candidato c /∈ {a, b}, (π1 i )−1 (c) < (π2 i )−1 (c) (es decir, c está clasificado más alto en π1 i que en π2 i). Ahora, construye un nuevo vector de votos tomando los votos 4i−3 y 4i−2 del primer vector de votos, y los votos restantes del segundo vector de votos, ya que la puntuación de Borda permanece sin cambios. Sin embargo, debido a que c está clasificado más alto en π1 i que en π2 i , c recibe al menos 2 puntos más de los votos 4i−3 y 4i − 2 en el vector de votos recién construido que en el segundo vector de votos. Se deduce que c tiene una puntuación de Borda más alta que a en el vector de voto recién construido. Por lo tanto, a no es el ganador en el vector de votación recién construido, y por lo tanto tenemos un conjunto de engaño correcto. Teorema 7. La complejidad de comunicación no determinista de la regla de Copeland es Ω(nm log m) (incluso para decidir si un candidato dado a gana). Prueba. Exhibiremos un conjunto de engaño de tamaño (m ! )n donde m = (m − 2)/2 y n = (n − 2)/2. Esto demostrará el teorema porque m ! es Ω(m log m), por lo que log((m ! )n ) = n log(m !) es Ω(nm log m). Escribimos el conjunto de candidatos como la siguiente unión disjunta: C = {a, b} ∪ L ∪ R donde L = {l1, l2, . . . , lm } y R = {r1, r2, . . . , rm }. Para cada vector (π1, π2, . . . , πn) que consiste en n permutaciones de los enteros del 1 al m (πi: {1, 2, . . . , m} → {1, 2, . . . , m}), deja que el siguiente vector de votos sea un elemento del conjunto engañoso: • Para 1 ≤ i ≤ n, deja que el votante 2i − 1 clasifique a los candidatos a b lπi(1) rπi(1) lπi(2) rπi(2) . . . lπi(m) rπi(m). • Para 1 ≤ i ≤ n, deja que el votante 2i clasifique a los candidatos rπi(m) lπi(m) rπi(m −1) lπi(m −1) . . . rπi(1) lπi(1) b a. • Deja que el votante n − 1 = 2n + 1 clasifique a los candidatos a b l1 r1 l2 r2 . . . lm rm. • Deja que el votante n = 2n + 2 clasifique a los candidatos rm lm rm −1 lm −1 . . . r1 l1 a b. Observamos que este conjunto engañoso tiene tamaño (m ! )n, y que el candidato a gana en cada vector de votos en el conjunto engañoso (cada par de candidatos está empatado en su elección por pares, con la excepción de que a vence a b, de modo que a gana la elección por medio punto). Todo lo que queda por demostrar es que para cualquier par de vectores de votos distintos en el conjunto de engaño, podemos hacer que cada uno de los votantes vote de acuerdo con uno de estos dos vectores de tal manera que a pierda. Que el primer vector de votos corresponda al vector (π1 1, π1 2, . . . , π1 n), y que el segundo vector de votos corresponda al vector (π2 1, π2 2, . . . , π2 n). Para algunos i, debemos tener π1 i = π2 i, de modo que para algún j ∈ {1, 2, . . . , m}, tengamos (π1 i)−1 (j) < (π2 i)−1 (j). Ahora, construye un nuevo vector de votos tomando el voto 2i−1 del primer vector de votos, y los votos restantes del segundo vector de votos, ya que la puntuación de Copeland permanece sin cambios. Consideremos la puntuación de lj. Primero observamos que el rango de lj en el voto 2i − 1 en el vector de voto recién construido es al menos 2 más alto que en el segundo vector de voto, porque (π1 i )−1 (j) < (π2 i )−1 (j). Que D1 (lj) sea el conjunto de candidatos en L ∪ R que el votante 2i − 1 clasificó por debajo de lj en el primer vector de votos (D1 (lj) = {c ∈ L ∪ R : lj 1 2i−1 c}), y que D2 (lj) sea el conjunto de candidatos en L ∪ R que el votante 2i − 1 clasificó por debajo de lj en el segundo vector de votos (D2 (lj) = {c ∈ L ∪ R : lj 2 2i−1 c}). Entonces, se deduce que en el vector de voto recién construido, lj vence a todos los candidatos en D1 (lj) - D2 (lj) en sus elecciones de a pares (porque lj recibe un voto adicional en cada una de estas elecciones de a pares en comparación con el segundo vector de voto), y pierde contra todos los candidatos en D2 (lj) - D1 (lj) (porque lj pierde un voto en cada una de estas elecciones de a pares en comparación con el segundo vector de voto), y empata con todos los demás. Pero |D1 (lj)| − |D2 (lj)| ≥ 2, y por lo tanto |D1 (lj) − D2 (lj)| − |D2 (lj) − D1 (lj)| ≥ 2. Por lo tanto, en el vector de votos recién construido, lj tiene al menos dos victorias más en parejas que derrotas en parejas, y por lo tanto tiene al menos 1 punto más que si lj hubiera empatado todas sus elecciones en pareja. Por lo tanto, lj tiene una puntuación de Copeland más alta que a en el nuevo vector de voto construido. Por lo tanto, a no es el ganador en el vector de votación recién construido, y por lo tanto tenemos un conjunto de engaño correcto. Teorema 8. La complejidad de comunicación no determinística de la regla maximin es O(nm). Prueba. El protocolo no determinista adivinará cuál candidato w es el ganador, y, para cada otro candidato c, cuál es el candidato o(c) contra el cual c recibe su puntuación más baja en una elección por pares. Entonces, que cada votante comunique lo siguiente: • para cada candidato c = w, si prefiere a c sobre w; • para cada candidato c = w, si prefiere a c sobre o(c). Observamos que esto requiere la comunicación de 2n(m− 1) bits. Si las suposiciones fueran correctas, entonces, dejando que N(d, e) sea el número de votantes que prefieren al candidato d sobre el candidato e, deberíamos tener N(c, o(c)) < N(w, c) para cualquier c = w, c = w, lo cual demostrará que w gana la elección. Teorema 9. La complejidad de comunicación no determinista de la regla maximin es Ω(nm) (incluso para decidir si un candidato dado a gana). Prueba. Exhibiremos un conjunto de engaño de tamaño 2n m donde m = m − 2 y n = (n − 1)/4. Que b sea un candidato distinto de a. Para cada vector (S1, S2, . . . , Sn) que consiste en n subconjuntos Si ⊆ C − {a, b}, deja que el siguiente vector de votos sea un elemento del conjunto engañoso: • Para 1 ≤ i ≤ n, deja que los votantes 4i − 3 y 4i − 2 clasifiquen a los candidatos Si a C − (Si ∪ {a, b}) b. • Para 1 ≤ i ≤ n, deja que los votantes 4i − 1 y 4i clasifiquen a los candidatos b C − (Si ∪ {a, b}) a Si. • Deja que el votante 4n + 1 = n clasifique a los candidatos a b C − {a, b}. Observamos que este conjunto engañoso tiene un tamaño de (2m )n = 2n m, y que el candidato a gana en cada vector de votos en el conjunto engañoso (en cada una de las elecciones por pares, a es clasificado más alto que su oponente por 2n +1 = (n+1)/2 > n/2 votos). Todo lo que queda por demostrar es que para cualquier par de vectores de votos distintos en el conjunto de engaño, podemos hacer que cada uno de los votantes vote de acuerdo con uno de estos dos vectores de tal manera que a pierda. Que el primer vector de votos corresponda al vector (S1 1 , S1 2 , . . . , S1 n ), y que el segundo vector de votos corresponda al vector (S2 1 , S2 2 , . . . , S2 n ). Para algunos i, debemos tener S1 i = S2 i, de modo que ya sea S1 i S2 i o S2 i S1 i. Sin pérdida de generalidad, supongamos que S1 i S2 i , y sea c algún candidato en S1 i − S2 i. Ahora, construye un nuevo vector de votos tomando los votos 4i − 3 y 4i − 2 del primer vector de votos, y los votos restantes del segundo vector de votos. En este nuevo vector de votación construido, a es clasificado más alto que c por solo 2n - 1 votantes, por la siguiente razón. Mientras que los votantes 4i−3 y 4i − 2 no clasifican a c por encima de a en el segundo vector de votos (porque c /∈ S2 i ), los votantes 4i − 3 y 4i − 2 sí clasifican a c por encima de a en el primer vector de votos (porque c ∈ S1 i ). Además, en cada una de las elecciones por pares de b, b es clasificado más alto que su oponente por al menos 2n votantes. Entonces, a tiene una puntuación maximin más baja que b, por lo tanto a no es el ganador en el vector de voto recién construido, y por lo tanto tenemos un conjunto de engaño correcto. Teorema 10. La complejidad de comunicación determinística de la regla STV es O(n(log m)2). Prueba. Considera el siguiente protocolo de comunicación. Que cada votante primero anuncie a su candidato más preferido (comunicación O(n log m)). En las rondas restantes, haremos un seguimiento del candidato más preferido de cada votante entre los candidatos restantes, lo cual será suficiente para implementar la regla. Cuando se elimina al candidato c, permita que cada uno de los votantes cuyo candidato más preferido entre los candidatos restantes era c anuncie su candidato más preferido entre los candidatos restantes después de la eliminación de c. Si el candidato c fue el candidato i-ésimo en ser eliminado (es decir, quedaban m − i + 1 candidatos antes de la eliminación de c), se sigue que como máximo n/(m − i + 1) votantes tenían al candidato c como su candidato más preferido entre los candidatos restantes, y por lo tanto, el número de bits a comunicar después de la eliminación del candidato i es O((n/(m−i+1)) log m). Así, la comunicación total en este protocolo de comunicación es O(n log m + m−1 i=1 (n/(m − i + 1)) log m). Por supuesto, m−1 i=1 1/(m − i + 1) = m i=2 1/i, lo cual es O(log m). Sustituyendo en la expresión anterior, encontramos que la complejidad de comunicación es O(n(log m)2). Teorema 11. La complejidad de comunicación no determinística de la regla STV es Ω(n log m) (incluso para decidir si un candidato dado a gana). Prueba. Omitimos esta prueba debido a la restricción de espacio. De hecho, O((n/(m − i + 1)) log(m − i + 1)) también es correcto, pero no mejorará el límite. Teorema 12. La complejidad de comunicación determinística de la regla de aprobación es O(nm). Prueba. Aprobar o desaprobar a un candidato solo requiere un bit de información, por lo que cada votante puede simplemente aprobar o desaprobar a cada candidato para una comunicación total de nm bits. Teorema 13. La complejidad de comunicación no determinista de la regla de aprobación es Ω(nm) (incluso para decidir si un candidato dado a gana). Prueba. Exhibiremos un conjunto de engaño de tamaño 2n m donde m = m − 1 y n = (n − 1)/4. Para cada vector (S1, S2, . . . , Sn) que consiste en n subconjuntos Si ⊆ C - {a}, deja que el siguiente vector de votos sea un elemento del conjunto engañoso: • Para 1 ≤ i ≤ n, deja que los votantes 4i - 3 y 4i - 2 aprueben Si ∪ {a}. • Para 1 ≤ i ≤ n, deja que los votantes 4i - 1 y 4i aprueben C - (Si ∪ {a}). • Deja que el votante 4n + 1 = n apruebe {a}. Observamos que este conjunto engañoso tiene un tamaño de (2m )n = 2n m, y que el candidato a gana en cada vector de votos en el conjunto engañoso (a es aprobado por 2n + 1 votantes, mientras que cada otro candidato es aprobado solo por 2n votantes). Todo lo que queda por demostrar es que para cualquier par de vectores de votos distintos en el conjunto de engaño, podemos hacer que cada uno de los votantes vote de acuerdo con uno de estos dos vectores de tal manera que a pierda. Que el primer vector de votos corresponda al vector (S1 1 , S1 2 , . . . , S1 n ), y que el segundo vector de votos corresponda al vector (S2 1 , S2 2 , . . . , S2 n ). Para algunos i, debemos tener S1 i = S2 i, de modo que ya sea S1 i S2 i o S2 i S1 i. Sin pérdida de generalidad, supongamos que S1 i S2 i , y sea b algún candidato en S1 i − S2 i. Ahora, construye un nuevo vector de votos tomando los votos 4i − 3 y 4i − 2 del primer vector de votos, y los votos restantes del segundo vector de votos. En este nuevo vector de votación construido, a sigue siendo aprobado por 2n + 1 votos. Sin embargo, b es aprobado por 2n + 2 votos, por la siguiente razón. Mientras que los votantes 4i−3 y 4i−2 no aprueban b en el segundo vector de votación (porque b /∈ S2 i), los votantes 4i−3 y 4i−2 sí aprueban b en el primer vector de votación (porque b ∈ S1 i). Se deduce que la puntuación bs en el vector de voto recién construido es la puntuación bs en el segundo vector de voto (2n), más dos. Por lo tanto, a no es el ganador en el vector de votación recién construido, y por lo tanto tenemos un conjunto de engaño correcto. Curiosamente, se puede obtener un límite inferior de Ω(m) incluso para el problema de encontrar un candidato que sea aprobado por más de un votante [20]. Teorema 14. La complejidad de comunicación determinística de la regla de Condorcet es O(nm). Prueba. Mantenemos un conjunto de candidatos activos S que se inicializa en C. En cada etapa, elegimos dos de los candidatos activos (digamos, los dos candidatos con los índices más bajos), y permitimos que cada votante comunique cuál de los dos candidatos prefiere. (Tal etapa requiere la comunicación de n bits, uno por votante). El candidato preferido por menos de 84 votantes (el perdedor de la elección por pares) es eliminado de S. (Si la elección por pares está empatada, ambos candidatos son eliminados). Después de un máximo de m - 1 iteraciones, solo queda un candidato (o no queda ningún candidato, en cuyo caso no hay un ganador de Condorcet). Que a sea el candidato restante. Para averiguar si el candidato a es el ganador de Condorcet, permita que cada votante comunique, para cada candidato c = a, si prefiere a a c. (Esto requiere la comunicación de como máximo n(m − 1) bits). Esto es suficiente para determinar si a ganó cada una de sus elecciones por pares (y por lo tanto, si a es el ganador de Condorcet). Teorema 15. La complejidad de comunicación no determinística de la regla de Condorcet es Ω(nm) (incluso para decidir si un candidato dado a gana). Prueba. Exhibiremos un conjunto de engaño de tamaño 2n m donde m = m − 1 y n = (n − 1)/2. Para cada vector (S1, S2, . . . , Sn) que consiste en n subconjuntos Si ⊆ C − {a}, deja que el siguiente vector de votos sea un elemento del conjunto engañoso: • Para 1 ≤ i ≤ n, deja que el votante 2i − 1 clasifique a los candidatos Si a C − Si. • Para 1 ≤ i ≤ n, deja que el votante 2i clasifique a los candidatos C − Si a Si. • Deja que el votante 2n + 1 = n clasifique a los candidatos a C − {a}. Observamos que este conjunto engañoso tiene tamaño (2m )n = 2n m , y que el candidato a gana en cada vector de votos en el conjunto engañoso (a gana cada una de sus elecciones por parejas por un solo voto). Todo lo que queda por demostrar es que para cualquier par de vectores de votos distintos en el conjunto de engaño, podemos hacer que cada uno de los votantes vote de acuerdo con uno de estos dos vectores de tal manera que a pierda. Que el primer vector de votos corresponda al vector (S1 1 , S1 2 , . . . , S1 n ), y que el segundo vector de votos corresponda al vector (S2 1 , S2 2 , . . . , S2 n ). Para algunos i, debemos tener S1 i = S2 i, de modo que ya sea S1 i S2 i o S2 i S1 i. Sin pérdida de generalidad, supongamos que S1 i S2 i , y sea b algún candidato en S1 i − S2 i. Ahora, construye un nuevo vector de votos tomando el voto 2i − 1 del primer vector de votos y los votos restantes del segundo vector de votos. En este nuevo vector de votos construido, b gana su elección por pares contra a por un voto (el voto 2i − 1 coloca a b por encima de a en el nuevo vector de votos construido porque b ∈ S1 i, mientras que en el segundo vector de votos el voto 2i − 1 colocó a a por encima de b porque b /∈ S2 i). Por lo tanto, a no es el ganador de Condorcet en el vector de votación recién construido, y por lo tanto tenemos un conjunto de engaño correcto. Teorema 16. La complejidad de comunicación determinística de la regla de la taza es O(nm). Prueba. Considera el siguiente protocolo de comunicación simple. Primero, permitamos que todos los votantes se comuniquen, para cada uno de los enfrentamientos en la primera ronda, cuál de los dos candidatos prefieren. Después de esto, se conocen los emparejamientos para la segunda ronda, así que permitan que todos los votantes comuniquen qué candidato prefieren en cada emparejamiento en la segunda ronda, etc. Dado que comunicar cuál de los dos candidatos es preferido solo requiere un bit por votante, y dado que solo hay m − 1 enfrentamientos en total, este protocolo de comunicación requiere O(nm) comunicación. Teorema 17. La complejidad de comunicación no determinista de la regla de la copa es Ω(nm) (incluso para decidir si un candidato dado a gana). Prueba. Exhibiremos un conjunto engañoso de tamaño 2n m donde m = (m − 1)/2 y n = (n − 7)/2. Dado que m + 1 es una potencia de 2, de modo que un candidato recibe un pase (es decir, no se enfrenta a un oponente) en la primera ronda, sea a el candidato con el pase. De los emparejamientos de la primera ronda, dejemos que lj denote al candidato de la izquierda en el j-ésimo enfrentamiento, y dejemos que rj sea el otro candidato de la derecha. Sea L = {lj : 1 ≤ j ≤ m} y R = {rj : 1 ≤ j ≤ m}, de modo que C = L ∪ R ∪ {a}. . . . . . . . . . l r l r l r a m1 1 2 2 m Figura 1: El horario para la regla de la copa utilizada en la demostración del Teorema 17. Para cada vector (S1, S2, . . . , Sn) que consiste en n subconjuntos Si ⊆ R, dejemos que el siguiente vector de votos sea un elemento del conjunto engañoso: • Para 1 ≤ i ≤ n, dejemos que el votante 2i − 1 clasifique a los candidatos Si L a R − Si. • Para 1 ≤ i ≤ n, dejemos que el votante 2i clasifique a los candidatos R − Si L a Si. • Dejemos que los votantes 2n +1 = n−6, 2n +2 = n−5, 2n +3 = n−4 clasifiquen a los candidatos L a R. • Dejemos que los votantes 2n + 4 = n − 3, 2n + 5 = n − 2 clasifiquen a los candidatos a r1 l1 r2 l2 . . . rm lm. • Dejemos que los votantes 2n + 6 = n − 1, 2n + 7 = n clasifiquen a los candidatos rm lm rm −1 lm −1 . . . r1 l1 a. Observamos que este conjunto de engaño tiene tamaño (2m )n = 2n m. Además, el candidato a gana en cada vector de votos en el conjunto engañoso, por las siguientes razones. Cada candidato rj derrota a su oponente lj en la primera ronda. (Para cualquier 1 ≤ i ≤ n, el efecto neto de los votos 2i − 1 y 2i en la elección entre rj y lj es cero; los votos n − 6, n − 5, n − 4 prefieren a lj sobre rj, pero los votos n − 3, n − 2, n − 1, n prefieren a rj sobre lj). Además, a vence a cada rj en su elección por pares. (Para cualquier 1 ≤ i ≤ n, el efecto neto de los votos 2i − 1 y 2i en la elección por pares entre a y rj es cero; los votos n − 1, n prefieren a rj sobre a, pero los votos n − 6, n − 5, n − 4, n − 3, n − 2 todos prefieren a a rj.) Se deduce que una vencerá a todos los candidatos a los que se enfrente. Todo lo que queda por demostrar es que para cualquier par de vectores de votos distintos en el conjunto de engaño, podemos hacer que cada uno de los votantes vote de acuerdo con uno de estos dos vectores de tal manera que a pierda. Que el primer vector de votos corresponda al vector 85 (S1 1 , S1 2 , . . . , S1 n ), y que el segundo vector de votos corresponda al vector (S2 1 , S2 2 , . . . , S2 n ). Para algunos i, debemos tener S1 i = S2 i, de modo que sea S1 i S2 i o S2 i S1 i. Sin pérdida de generalidad, supongamos que S1 i S2 i , y dejemos que rj sea algún candidato en S1 i − S2 i. Ahora, construye un nuevo vector de votos tomando el voto 2i del primer vector de votos y los votos restantes del segundo vector de votos. Observamos que, mientras que en el segundo vector de votos el voto 2i prefirió a rj sobre lj (porque rj ∈ R−S2 i), en el nuevo vector de votos construido esto ya no es el caso (porque rj ∈ S1 i). Se deduce que, mientras que en el segundo vector de votos, rj venció a lj en la primera ronda por un voto, en el nuevo vector de votos construido, lj vence a rj en la primera ronda. Por lo tanto, al menos un lj avanza a la segunda ronda después de derrotar a su oponente rj. Ahora observamos que en el vector de votos recién construido, cualquier lk gana su elección de a pares contra cualquier rq con q = k. Esto se debe a que entre los primeros 2n votos, al menos n − 1 prefieren lk a rq; los votos n − 6, n − 5, n − 4 prefieren lk a rq; y, porque q = k, ya sea que los votos n − 3, n − 2 prefieran lk a rq (si k < q), o los votos n − 1, n prefieran lk a rq (si k > q). Por lo tanto, al menos n + 4 = (n + 1)/2 > n/2 votos prefieren lk a rq. Además, cualquier lk gana su elección de a uno a uno. Esto se debe a que solo los votos n − 3 y n − 2 prefieren a a lk. Se deduce que, después de la primera ronda, cualquier candidato superviviente lk solo puede perder un enfrentamiento contra otro candidato superviviente lk, por lo que uno de los lk debe ganar la elección. Por lo tanto, a no es el ganador en el vector de votación recién construido, y por lo tanto tenemos un conjunto de engaño correcto. Teorema 18. La complejidad de comunicación determinística de la regla de Bucklin es O(nm). Prueba. Sea l el entero mínimo para el cual hay un candidato que está clasificado entre los primeros l candidatos por más de la mitad de los votos. Realizaremos una búsqueda binaria para l. En cada punto, tendremos un límite inferior lL que es menor que l (inicializado en 0), y un límite superior lH que es al menos l (inicializado en m). Mientras que lH − lL > 1, continuamos averiguando si (lH − l)/2 es menor que l, después de lo cual podemos actualizar los límites. Para averiguar si un número k es menor que l, determinamos los candidatos más preferidos de cada votante k. Cada votante puede comunicar cuáles candidatos se encuentran entre sus k candidatos más preferidos usando m bits (para cada candidato, indicar si el candidato está entre los primeros k o no), pero debido a que la búsqueda binaria requiere log m iteraciones, esto nos da un límite superior de O((log m)nm), que no es lo suficientemente fuerte. Sin embargo, si lL < k < lH, y ya conocemos los candidatos más preferidos de un votante lL, así como sus candidatos más preferidos de lH, entonces el votante ya no necesita comunicar si los candidatos más preferidos de lL están entre sus k candidatos más preferidos (porque deben estarlo), y ya no necesita comunicar si los m−lH candidatos menos preferidos están entre sus k candidatos más preferidos (porque no pueden estarlo). Por lo tanto, el votante solo necesita comunicar lH −lL bits en cualquier etapa dada. Debido a que en cada etapa, lH − lL se reduce a la mitad (aproximadamente), cada votante en total comunica solo (aproximadamente) m + m/2 + m/4 + . . . ≤ 2m bits. Teorema 19. La complejidad de comunicación no determinista de la regla de Bucklin es Ω(nm) (incluso para decidir si un candidato dado a gana). Prueba. Exhibiremos un conjunto de engaño de tamaño 2n m donde m = (m−1)/2 y n = n/2. Escribimos el conjunto de candidatos como la siguiente unión disjunta: C = {a} ∪ L ∪ R donde L = {l1, l2, . . . , lm } y R = {r1, r2, . . . , rm }. Para cualquier subconjunto S ⊆ {1, 2, . . . , m}, sea L(S) = {li : i ∈ S} y sea R(S) = {ri : i ∈ S}. Para cada vector (S1, S2, . . . , Sn) que consiste en n conjuntos Si ⊆ {1, 2, . . . , m}, dejemos que el siguiente vector de votos sea un elemento del conjunto engañoso: • Para 1 ≤ i ≤ n, dejemos que el votante 2i − 1 clasifique a los candidatos L(Si) R − R(Si) a L − L(Si) R(Si). • Para 1 ≤ i ≤ n, dejemos que el votante 2i clasifique a los candidatos L − L(Si) R(Si) a L(Si) R − R(Si). Observamos que este conjunto engañoso tiene tamaño (2m )n = 2n m, y que el candidato a gana en cada vector de votos en el conjunto engañoso, por la siguiente razón. Cada candidato en C − {a} está clasificado entre los mejores m candidatos por exactamente la mitad de los votantes (lo cual no es suficiente para ganar). Por lo tanto, necesitamos analizar a los m +1 candidatos principales de los votantes, y a es clasificado en el puesto m +1 por todos los votantes. Todo lo que queda por demostrar es que para cualquier par de vectores de votos distintos en el conjunto de engaño, podemos hacer que cada uno de los votantes vote de acuerdo con uno de estos dos vectores de tal manera que a pierda. Que el primer vector de votos corresponda al vector (S1 1 , S1 2 , . . . , S1 n ), y que el segundo vector de votos corresponda al vector (S2 1 , S2 2 , . . . , S2 n ). Para algunos i, debemos tener S1 i = S2 i, de modo que sea S1 i S2 i o S2 i S1 i. Sin pérdida de generalidad, supongamos que S1 i S2 i , y sea j algún entero en S1 i − S2 i. Ahora, construye un nuevo vector de votos tomando el voto 2i − 1 del primer vector de votos, y los votos restantes del segundo vector de votos. En este nuevo vector de votos construido, a sigue siendo clasificado en el m + 1-ésimo lugar por todos los votos. Sin embargo, lj está clasificado entre los mejores m candidatos por n + 1 = n/2 + 1 votos. Esto se debe a que mientras que el voto 2i − 1 no clasifica a lj entre los m mejores candidatos en el segundo vector de votos (porque j /∈ S2 i , tenemos que lj /∈ L(S2 i )), el voto 2i − 1 sí clasifica a lj entre los m mejores candidatos en el primer vector de votos (porque j ∈ S1 i , tenemos que lj ∈ L(S1 i )). Por lo tanto, a no es el ganador en el vector de votación recién construido, y por lo tanto tenemos un conjunto de engaño correcto. Teorema 20. La complejidad de comunicación no determinista de la regla de pares clasificados es Ω(nm log m) (incluso para decidir si un candidato dado a gana). Prueba. Omitimos esta prueba debido a limitaciones de espacio. 5. DISCUSIÓN Un obstáculo clave para utilizar la votación como método de <br>agregación de preferencias</br> es la carga de comunicación que implica una elección para los votantes. Al reducir esta carga, puede ser factible llevar a cabo más elecciones sobre más temas. En última instancia, esto podría llevar a un cambio de un gobierno representativo a un sistema en el que la mayoría de los asuntos se decidan mediante referendos, una verdadera e-democracia. En este artículo, analizamos la complejidad de comunicación de las reglas de votación comunes. Conocer qué reglas de votación requieren poca comunicación es especialmente importante cuando el tema a votar es de tan poca importancia que se cumple lo siguiente: las partes involucradas están dispuestas a aceptar una regla que tiende a producir resultados ligeramente menos representativos de las preferencias de los votantes, si esta regla reduce significativamente la carga de comunicación para los votantes. La siguiente tabla resume los resultados que obtuvimos. Regla Límite inferior Límite superior pluralidad Ω(n log m) O(n log m) pluralidad con segunda vuelta Ω(n log m) O(n log m) Voto único transferible (STV) Ω(n log m) O(n(log m)2) Condorcet Ω(nm) O(nm) aprobación Ω(nm) O(nm) Bucklin Ω(nm) O(nm) taza Ω(nm) O(nm) maximin Ω(nm) O(nm) Borda Ω(nm log m) O(nm log m) Copeland Ω(nm log m) O(nm log m) pares clasificados Ω(nm log m) O(nm log m) Complejidad de comunicación de las reglas de votación, ordenadas de menor a mayor. Todos los límites superiores son deterministas (con la excepción de maximin, para el cual el mejor límite superior determinista que demostramos es O(nm log m)). Todos los límites inferiores se mantienen incluso para la comunicación no determinista y solo para determinar si un candidato dado a es el ganador. Una área de investigación futura es estudiar qué sucede cuando restringimos nuestra atención a protocolos de comunicación que no revelan información estratégicamente útil. Esta restricción puede invalidar algunos de los límites superiores que derivamos utilizando protocolos de comunicación multietapa. Además, todos nuestros límites son límites en el peor de los casos. Puede ser posible superar estos límites cuando la distribución de votos tiene una estructura adicional. Al decidir qué regla de votación utilizar para una elección, hay muchas consideraciones a tener en cuenta. Las reglas de votación que estudiamos en este documento son las más comunes que han resistido la prueba del tiempo. Una forma de seleccionar entre estas reglas es considerar los resultados recientes sobre complejidad. La tabla anterior muestra que desde una perspectiva de complejidad de comunicación, la pluralidad, la pluralidad con segunda vuelta y el voto único transferible son preferibles. Sin embargo, la pluralidad tiene la propiedad no deseada de que es fácil de manipular computacionalmente mediante votación estratégica [3, 7]. La pluralidad con segunda vuelta es NP-duro de manipular por una coalición de votantes ponderados, o por un individuo que enfrenta incertidumbre correlacionada sobre los votos de los demás [7, 6]. STV es NP-duro de manipular en esos escenarios también [7], pero también por un individuo con conocimiento perfecto de los votos de los demás (cuando el número de candidatos es ilimitado) [2]. Por lo tanto, STV es más robusto, aunque puede requerir ligeramente más comunicación en el peor de los casos según la tabla anterior. Sin embargo, otros criterios de selección son la complejidad computacional para determinar si se ha obtenido suficiente información para declarar un ganador, y la de determinar la secuencia óptima de consultas [8]. 6. REFERENCIAS [1] Lawrence Ausubel y Paul Milgrom. Subastas ascendentes con ofertas de paquetes. Fronteras de la Economía Teórica, 1, 2002. No. 1, Artículo 1. [2] John Bartholdi, III y James Orlin. El voto único transferible resiste el voto estratégico. Elección Social y Bienestar, 8(4):341-354, 1991. [3] John Bartholdi, III, Craig Tovey y Michael Trick. La dificultad computacional de manipular una elección. Elección Social y Bienestar, 6(3):227-241, 1989. [4] Avrim Blum, Jeffrey Jackson, Tuomas Sandholm y Martin Zinkevich. Elicitación de preferencias y aprendizaje de consultas. Revista de Investigación en Aprendizaje Automático, 5:649-667, 2004. [5] Wolfram Conen y Tuomas Sandholm. Elicitación de preferencias en subastas combinatorias: Resumen extendido. En Actas de la Conferencia ACM sobre Comercio Electrónico (ACM-EC), páginas 256-259, 2001. [6] Vincent Conitzer, Jerome Lang y Tuomas Sandholm. ¿Cuántos candidatos se necesitan para que las elecciones sean difíciles de manipular? En Aspectos Teóricos de la Racionalidad y el Conocimiento (TARK), páginas 201-214, 2003. [7] Vincent Conitzer y Tuomas Sandholm. Complejidad de manipular elecciones con pocos candidatos. En Actas de la Conferencia Nacional de Inteligencia Artificial (AAAI), páginas 314-319, 2002. [8] Vincent Conitzer y Tuomas Sandholm. Elicitación de votos: Complejidad y estrategia de prueba. En Actas de la Conferencia Nacional de Inteligencia Artificial (AAAI), páginas 392-397, 2002. [9] Sven de Vries, James Schummer y Rakesh V. Vohra. En subastas ascendentes de objetos heterogéneos, 2003. Borrador. [10] Allan Gibbard. Manipulación de esquemas de votación. Econometrica, 41:587-602, 1973. [11] Benoit Hudson y Tuomas Sandholm. Efectividad de tipos de consultas y políticas para la obtención de preferencias en subastas combinatorias. En la Conferencia Internacional sobre Agentes Autónomos y Sistemas Multiagente (AAMAS), páginas 386-393, 2004. [12] E Kushilevitz y N Nisan. Complejidad de la comunicación. Cambridge University Press, 1997. [13] Sebasti´en Lahaie y David Parkes. Aplicando algoritmos de aprendizaje a la obtención de preferencias. En Actas de la Conferencia de la ACM sobre Comercio Electrónico, 2004. [14] Noam Nisan e Ilya Segal. Los requisitos de comunicación de asignaciones eficientes y precios de apoyo. Revista de Teoría Económica, 2005. Próximamente. [15] David Parkes. iBundle: Una subasta de paquetes de precio ascendente eficiente. En Actas de la Conferencia de la ACM sobre Comercio Electrónico (ACM-EC), páginas 148-157, 1999. [16] Tuomas Sandholm. Una implementación del protocolo de red de contratos basada en cálculos de costos marginales. En Actas de la Conferencia Nacional de Inteligencia Artificial (AAAI), páginas 256-262, 1993. [17] Tuomas Sandholm y Craig Boutilier. Elicitación de preferencias en subastas combinatorias. En Peter Cramton, Yoav Shoham y Richard Steinberg, editores, Subastas Combinatorias, capítulo 10. MIT Press, 2005. [18] Paolo Santi, Vincent Conitzer y Tuomas Sandholm. Hacia una caracterización de la obtención de preferencias polinomiales con consultas de valor en subastas combinatorias. En la Conferencia sobre Teoría del Aprendizaje (COLT), páginas 1-16, 2004. [19] Mark Satterthwaite. In Spanish, the translation would be: \"Inmutabilidad estratégica y condiciones de Arrow: teoremas de existencia y correspondencia para procedimientos de votación y funciones de bienestar social.\" Revista de Teoría Económica, 10:187-217, 1975. [20] Ilya Segal. Los requisitos de comunicación de las reglas de elección social y los conjuntos de presupuesto de apoyo, 2004. Borrador. Presentado en el Taller DIMACS sobre Problemas Computacionales en el Diseño de Subastas, Universidad de Rutgers, Nueva Jersey, EE. UU. [21] Peter Wurman y Michael Wellman. AkBA: Una subasta combinatoria progresiva y de precio anónimo. En Actas de la Conferencia de la ACM sobre Comercio Electrónico (ACM-EC), páginas 21-29, 2000. [22] A. C. Yao. Algunas preguntas de complejidad relacionadas con la computación distribuida. En Actas del 11º simposio de ACM sobre teoría de la computación (STOC), páginas 209-213, 1979. [23] Martin Zinkevich, Avrim Blum y Tuomas Sandholm. En la obtención de preferencias en tiempo polinómico con consultas de valor. En Actas de la Conferencia de la ACM sobre Comercio Electrónico (ACM-EC), páginas 176-185, 2003. 87 ",
            "candidates": [],
            "error": [
                [
                    ""
                ]
            ]
        },
        "protocol": {
            "translated_key": "protocolo",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Communication Complexity of Common Voting Rules∗ Vincent Conitzer Carnegie Mellon University 5000 Forbes Avenue Pittsburgh, PA 15213, USA conitzer@cs.cmu.edu Tuomas Sandholm Carnegie Mellon University 5000 Forbes Avenue Pittsburgh, PA 15213, USA sandholm@cs.cmu.edu ABSTRACT We determine the communication complexity of the common voting rules.",
                "The rules (sorted by their communication complexity from low to high) are plurality, plurality with runoff, single transferable vote (STV), Condorcet, approval, Bucklin, cup, maximin, Borda, Copeland, and ranked pairs.",
                "For each rule, we first give a deterministic communication <br>protocol</br> and an upper bound on the number of bits communicated in it; then, we give a lower bound on (even the nondeterministic) communication requirements of the voting rule.",
                "The bounds match for all voting rules except STV and maximin.",
                "Categories and Subject Descriptors F.2 [Theory of Computation]: Analysis of Algorithms and Problem Complexity; J.4 [Computer Applications]: Social and Behavioral Sciences-Economics General Terms Algorithms, Economics, Theory 1.",
                "INTRODUCTION One key factor in the practicality of any preference aggregation rule is its communication burden.",
                "To successfully aggregate the agents preferences, it is usually not necessary for all the agents to report all of their preference information.",
                "Clever protocols that elicit the agents preferences partially and sequentially have the potential to dramatically reduce the required communication.",
                "This has at least the following advantages: • It can make preference aggregation feasible in settings where the total amount of preference information is too large to communicate. • Even when communicating all the preference information is feasible, reducing the communication requirements lessens the burden placed on the agents.",
                "This is especially true when the agents, rather than knowing all their preferences in advance, need to invest effort (such as computation or information gathering) to determine their preferences [16]. • It preserves (some of) the agents privacy.",
                "Most of the work on reducing the communication burden in preference aggregation has focused on resource allocation settings such as combinatorial auctions, in which an auctioneer auctions off a number of (possibly distinct) items in a single event.",
                "Because in a combinatorial auction, bidders can have separate valuations for each of an exponential number of possible bundles of items, this is a setting in which reducing the communication burden is especially crucial.",
                "This can be accomplished by supplementing the auctioneer with an elicitor that incrementally elicits parts of the bidders preferences on an as-needed basis, based on what the bidders have revealed about their preferences so far, as suggested by Conen and Sandholm [5].",
                "For example, the elicitor can ask for a bidders value for a specific bundle (value queries), which of two bundles the bidder prefers (order queries), which bundle he ranks kth or what the rank of a given bundle is (rank queries), which bundle he would purchase given a particular vector of prices (demand queries), etc.-until (at least) the final allocation can be determined.",
                "Experimentally, this yields drastic savings in preference revelation [11].",
                "Furthermore, if the agents valuation functions are drawn from certain natural subclasses, the elicitation problem can be solved using only polynomially many queries even in the worst case [23, 4, 13, 18, 14].",
                "For a review of preference elicitation in combinatorial auctions, see [17].",
                "Ascending combinatorial auctions are a well-known special form of preference elicitation, where the elicitor asks demand queries with increasing prices [15, 21, 1, 9].",
                "Finally, resource 78 allocation problems have also been studied from a communication complexity viewpoint, thereby deriving lower bounds on the required communication.",
                "For example, Nisan and Segal show that exponential communication is required even to obtain a surplus greater than that obtained by auctioning off all objects as a single bundle [14].",
                "Segal also studies social choice rules in general, and shows that for a large class of social choice rules, supporting budget sets must be revealed such that if every agent prefers the same outcome in her budget set, this proves the optimality of that outcome.",
                "Segal then uses this characterization to prove bounds on the communication required in resource allocation as well as matching settings [20].",
                "In this paper, we will focus on the communication requirements of a generally applicable subclass of social choice rules, commonly known as voting rules.",
                "In a voting setting, there is a set of candidate outcomes over which the voters express their preferences by submitting a vote (typically, a ranking of the candidates), and the winner (that is, the chosen outcome) is determined based on these votes.",
                "The communication required by voting rules can be large either because the number of voters is large (such as, for example, in national elections), or because the number of candidates is large (for example, the agents can vote over allocations of a number of resources), or both.",
                "Prior work [8] has studied elicitation in voting, studying how computationally hard it is to decide whether a winner can be determined with the information elicited so far, as well as how hard it is to find the optimal sequence of queries given perfect suspicions about the voters preferences.",
                "In addition, that paper discusses strategic (game-theoretic) issues introduced by elicitation.",
                "In contrast, in this paper, we are concerned with the worst-case number of bits that must be communicated to execute a given voting rule, when nothing is known in advance about the voters preferences.",
                "We determine the communication complexity of the common voting rules.",
                "For each rule, we first give an upper bound on the (deterministic) communication complexity by providing a communication <br>protocol</br> for it and analyzing how many bits need to be transmitted in this <br>protocol</br>. (Segals results [20] do not apply to most voting rules because most voting rules are not intersectionmonotonic (or even monotonic).1 ) For many of the voting rules under study, it turns out that one cannot do better than simply letting each voter immediately communicate all her (potentially relevant) information.",
                "However, for some rules (such as plurality with runoff, STV and cup) there is a straightforward multistage communication <br>protocol</br> that, with some analysis, can be shown to significantly outperform the immediate communication of all (potentially relevant) information.",
                "Finally, for some rules (such as the Condorcet and Bucklin rules), we need to introduce a more complex communication <br>protocol</br> to achieve the best possible upper 1 For two of the rules that we study that are intersectionmonotonic, namely the approval and Condorcet rules, Segals results can in fact be used to give alternative proofs of our lower bounds.",
                "We only give direct proofs for these rules here because 1) these direct proofs are among the easier ones in this paper, 2) the alternative proofs are nontrivial even given Segals results, and 3) a space constraint applies.",
                "However, we hope to also include the alternative proofs in a later version. bound.",
                "After obtaining the upper bounds, we show that they are tight by giving matching lower bounds on (even the nondeterministic) communication complexity of each voting rule.",
                "There are two exceptions: STV, for which our upper and lower bounds are apart by a factor log m; and maximin, for which our best deterministic upper bound is also a factor log m above the (nondeterministic) lower bound, although we give a nondeterministic upper bound that matches the lower bound. 2. REVIEW OF VOTING RULES In this section, we review the common voting rules that we study in this paper.",
                "A voting rule2 is a function mapping a vector of the n voters votes (i.e. preferences over candidates) to one of the m candidates (the winner) in the candidate set C. In some cases (such as the Condorcet rule), the rule may also declare that no winner exists.",
                "We do not concern ourselves with what happens in case of a tie between candidates (our lower bounds hold regardless of how ties are broken, and the communication protocols used for our upper bounds do not attempt to break the ties).",
                "All of the rules that we study are rank-based rules, which means that a vote is defined as an ordering of the candidates (with the exception of the plurality rule, for which a vote is a single candidate, and the approval rule, for which a vote is a subset of the candidates).",
                "We will consider the following voting rules. (For rules that define a score, the candidate with the highest score wins.) • scoring rules.",
                "Let α = α1, . . . , αm be a vector of integers such that α1 ≥ α2 . . . ≥ αm.",
                "For each voter, a candidate receives α1 points if it is ranked first by the voter, α2 if it is ranked second etc.",
                "The score sα of a candidate is the total number of points the candidate receives.",
                "The Borda rule is the scoring rule with α = m−1, m−2, . . . , 0 .",
                "The plurality rule is the scoring rule with α = 1, 0, . . . , 0 . • single transferable vote (STV).",
                "The rule proceeds through a series of m − 1 rounds.",
                "In each round, the candidate with the lowest plurality score (that is, the least number of voters ranking it first among the remaining candidates) is eliminated (and each of the votes for that candidate transfer to the next remaining candidate in the order given in that vote).",
                "The winner is the last remaining candidate. • plurality with run-off.",
                "In this rule, a first round eliminates all candidates except the two with the highest plurality scores.",
                "Votes are transferred to these as in the STV rule, and a second round determines the winner from these two. • approval.",
                "Each voter labels each candidate as either approved or disapproved.",
                "The candidate approved by the greatest number of voters wins. • Condorcet.",
                "For any two candidates i and j, let N(i, j) be the number of voters who prefer i to j.",
                "If there is a candidate i that is preferred to any other candidate by a majority of the voters (that is, N(i, j) > N(j, i) for all j = i-that is, i wins every pairwise election), then candidate i wins. 2 The term voting <br>protocol</br> is often used to describe the same concept, but we seek to draw a sharp distinction between the rule mapping preferences to outcomes, and the communication/elicitation <br>protocol</br> used to implement this rule. 79 • maximin (aka.",
                "Simpson).",
                "The maximin score of i is s(i) = minj=i N(i, j)-that is, is worst performance in a pairwise election.",
                "The candidate with the highest maximin score wins. • Copeland.",
                "For any two distinct candidates i and j, let C(i, j) = 1 if N(i, j) > N(j, i), C(i, j) = 1/2 if N(i, j) = N(j, i) and C(i, j) = 0 if N(i, j) < N(j, i).",
                "The Copeland score of candidate i is s(i) = j=i C(i, j). • cup (sequential binary comparisons).",
                "The cup rule is defined by a balanced3 binary tree T with one leaf per candidate, and an assignment of candidates to leaves (each leaf gets one candidate).",
                "Each non-leaf node is assigned the winner of the pairwise election of the nodes children; the candidate assigned to the root wins. • Bucklin.",
                "For any candidate i and integer l, let B(i, l) be the number of voters that rank candidate i among the top l candidates.",
                "The winner is arg mini(min{l : B(i, l) > n/2}).",
                "That is, if we say that a voter approves her top l candidates, then we repeatedly increase l by 1 until some candidate is approved by more than half the voters, and this candidate is the winner. • ranked pairs.",
                "This rule determines an order on all the candidates, and the winner is the candidate at the top of this order.",
                "Sort all ordered pairs of candidates (i, j) by N(i, j), the number of voters who prefer i to j.",
                "Starting with the pair (i, j) with the highest N(i, j), we lock in the result of their pairwise election (i j).",
                "Then, we move to the next pair, and we lock the result of their pairwise election.",
                "We continue to lock every pairwise result that does not contradict the ordering established so far.",
                "We emphasize that these definitions of voting rules do not concern themselves with how the votes are elicited from the voters; all the voting rules, including those that are suggestively defined in terms of rounds, are in actuality just functions mapping the vector of all the voters votes to a winner.",
                "Nevertheless, there are always many different ways of eliciting the votes (or the relevant parts thereof) from the voters.",
                "For example, in the plurality with runoff rule, one way of eliciting the votes is to ask every voter to declare her entire ordering of the candidates up front.",
                "Alternatively, we can first ask every voter to declare only her most preferred candidate; then, we will know the two candidates in the runoff, and we can ask every voter which of these two candidates she prefers.",
                "Thus, we distinguish between the voting rule (the mapping from vectors of votes to outcomes) and the communication <br>protocol</br> (which determines how the relevant parts of the votes are actually elicited from the voters).",
                "The goal of this paper is to give efficient communication protocols for the voting rules just defined, and to prove that there do not exist any more efficient communication protocols.",
                "It is interesting to note that the choice of the communication <br>protocol</br> may affect the strategic behavior of the voters.",
                "Multistage communication protocols may reveal to the voters some information about how the other voters are voting (for example, in the two-stage communication <br>protocol</br> just given for plurality with runoff, in the second stage voters 3 Balanced means that the difference in depth between two leaves can be at most one. will know which two candidates have the highest plurality scores).",
                "In general, when the voters receive such information, it may give them incentives to vote differently than they would have in a single-stage communication <br>protocol</br> in which all voters declare their entire votes simultaneously.",
                "Of course, even the single-stage communication <br>protocol</br> is not strategy-proof4 for any reasonable voting rule, by the Gibbard-Satterthwaite theorem [10, 19].",
                "However, this does not mean that we should not be concerned about adding even more opportunities for strategic voting.",
                "In fact, many of the communication protocols introduced in this paper do introduce additional opportunities for strategic voting, but we do not have the space to discuss this here. (In prior work [8], we do give an example where an elicitation <br>protocol</br> for the approval voting rule introduces strategic voting, and give principles for designing elicitation protocols that do not introduce strategic problems.)",
                "Now that we have reviewed voting rules, we move on to a brief review of communication complexity theory. 3. REVIEW OF SOME COMMUNICATION COMPLEXITY THEORY In this section, we review the basic model of a communication problem and the lower-bounding technique of constructing a fooling set. (The basic model of a communication problem is due to Yao [22]; for an overview see Kushilevitz and Nisan [12].)",
                "Each player 1 ≤ i ≤ n knows (only) input xi.",
                "Together, they seek to compute f(x1, x2, . . . , xn).",
                "In a deterministic <br>protocol</br> for computing f, in each stage, one of the players announces (to all other players) a bit of information based on her own input and the bits announced so far.",
                "Eventually, the communication terminates and all players know f(x1, x2, . . . , xn).",
                "The goal is to minimize the worst-case (over all input vectors) number of bits sent.",
                "The deterministic communication complexity of a problem is the worstcase number of bits sent in the best (correct) deterministic <br>protocol</br> for it.",
                "In a nondeterministic <br>protocol</br>, the next bit to be sent can be chosen nondeterministically.",
                "For the purposes of this paper, we will consider a nondeterministic <br>protocol</br> correct if for every input vector, there is some sequence of nondeterministic choices the players can make so that the players know the value of f when the <br>protocol</br> terminates.",
                "The nondeterministic communication complexity of a problem is the worst-case number of bits sent in the best (correct) nondeterministic <br>protocol</br> for it.",
                "We are now ready to give the definition of a fooling set.",
                "Definition 1.",
                "A fooling set is a set of input vectors {(x1 1, x1 2, . . . , x1 n), (x2 1, x2 2, . . . , x2 n), . . . , (xk 1 , xk 2 , . . . , xk n) such that for any i, f(xi 1, xi 2, . . . , xi n) = f0 for some constant f0, but for any i = j, there exists some vector (r1, r2, . . . , rn) ∈ {i, j}n such that f(xr1 1 , xr2 2 , . . . , xrn n ) = f0. (That is, we can mix the inputs from the two input vectors to obtain a vector with a different function value.)",
                "It is known that if a fooling set of size k exists, then log k is a lower bound on the communication complexity (even the nondeterministic communication complexity) [12]. 4 A strategy-proof <br>protocol</br> is one in which it is in the players best interest to report their preferences truthfully. 80 For the purposes of this paper, f is the voting rule that maps the votes to the winning candidate, and xi is voter is vote (the information that the voting rule would require from the voter if there were no possibility of multistage communication-i.e. the most preferred candidate (plurality), the approved candidates (approval), or the ranking of all the candidates (all other protocols)).",
                "However, when we derive our lower bounds, f will only signify whether a distinguished candidate a wins. (That is, f is 1 if a wins, and 0 otherwise.)",
                "This will strengthen our lower bound results (because it implies that even finding out whether one given candidate wins is hard).5 Thus, a fooling set in our context is a set of vectors of votes so that a wins (does not win) with each of them; but for any two different vote vectors in the set, there is a way of taking some voters votes from the first vector and the others votes from the second vector, so that a does not win (wins).",
                "To simplify the proofs of our lower bounds, we make assumptions such as the number of voters n is odd in many of these proofs.",
                "Therefore, technically, we do not prove the lower bound for (number of candidates, number of voters) pairs (m, n) that do not satisfy these assumptions (for example, if we make the above assumption, then we technically do not prove the lower bound for any pair (m, n) in which n is even).",
                "Nevertheless, we always prove the lower bound for a representative set of (m, n) pairs.",
                "For example, for every one of our lower bounds it is the case that for infinitely many values of m, there are infinitely many values of n such that the lower bound is proved for the pair (m, n). 4.",
                "RESULTS We are now ready to present our results.",
                "For each voting rule, we first give a deterministic communication <br>protocol</br> for determining the winner to establish an upper bound.",
                "Then, we give a lower bound on the nondeterministic communication complexity (even on the complexity of deciding whether a given candidate wins, which is an easier question).",
                "The lower bounds match the upper bounds in all but two cases: the STV rule (upper bound O(n(log m)2 ); lower bound Ω(n log m)) and the maximin rule (upper bound O(nm log m), although we do give a nondeterministic <br>protocol</br> that is O(nm); lower bound Ω(nm)).",
                "When we discuss a voting rule in which the voters rank the candidates, we will represent a ranking in which candidate c1 is ranked first, c2 is ranked second, etc. as c1 c2 . . . cm. 5 One possible concern is that in the case where ties are possible, it may require much communication to verify whether a specific candidate a is among the winners, but little communication to produce one of the winners.",
                "However, all the fooling sets we use in the proofs have the property that if a wins, then a is the unique winner.",
                "Therefore, in these fooling sets, if one knows any one of the winners, then one knows whether a is a winner.",
                "Thus, computing one of the winners requires at least as much communication as verifying whether a is among the winners.",
                "In general, when a communication problem allows multiple correct answers for a given vector of inputs, this is known as computing a relation rather than a function [12].",
                "However, as per the above, we can restrict our attention to a subset of the domain where the voting rule truly is a (single-valued) function, and hence lower bounding techniques for functions rather than relations will suffice.",
                "Sometimes for the purposes of a proof the internal ranking of a subset of the candidates does not matter, and in this case we will not specify it.",
                "For example, if S = {c2, c3}, then c1 S c4 indicates that either the ranking c1 c2 c3 c4 or the ranking c1 c3 c2 c4 can be used for the proof.",
                "We first give a universal upper bound.",
                "Theorem 1.",
                "The deterministic communication complexity of any rank-based voting rule is O(nm log m).",
                "Proof.",
                "This bound is achieved by simply having everyone communicate their entire ordering of the candidates (indicating the rank of an individual candidate requires only O(log m) bits, so each of the n voters can simply indicate the rank of each of the m candidates).",
                "The next lemma will be useful in a few of our proofs.",
                "Lemma 1.",
                "If m divides n, then log(n! )−m log((n/m)!) ≥ n(log m − 1)/2.",
                "Proof.",
                "If n/m = 1 (that is, n = m), then this expression simplifies to log(n!).",
                "We have log(n!) = n i=1 log i ≥ n x=1 log(i)dx, which, using integration by parts, is equal to n log n − (n − 1) > n(log n − 1) = n(log m − 1) > n(log m − 1)/2.",
                "So, we can assume that n/m ≥ 2.",
                "We observe that log(n!) = n i=1 log i = n/m−1 i=0 m j=1 log(im+j) ≥ n/m−1 i=1 m j=1 log(im) = m n/m−1 i=1 log(im), and that m log((n/m)!) = m n/m i=1 log(i).",
                "Therefore, log(n!) − m log((n/m)!) ≥ m n/m−1 i=1 log(im) − m n/m i=1 log(i) = m(( n/m−1 i=1 log(im/i))−log(n/m)) = m((n/m− 1) log m−log n+log m) = n log m−m log n. Now, using the fact that n/m ≥ 2, we have m log n = n(m/n) log m(n/m) = n(m/n)(log m + log(n/m)) ≤ n(1/2)(log m + log 2).",
                "Thus, log(n!) − m log((n/m)!) ≥ n log m − m log n ≥ n log m − n(1/2)(log m + log 2) = n(log m − 1)/2.",
                "Theorem 2.",
                "The deterministic communication complexity of the plurality rule is O(n log m).",
                "Proof.",
                "Indicating one of the candidates requires only O(log m) bits, so each voter can simply indicate her most preferred candidate.",
                "Theorem 3.",
                "The nondeterministic communication complexity of the plurality rule is Ω(n log m) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We will exhibit a fooling set of size n ! (( n m )! )m where n = (n−1)/2.",
                "Taking the logarithm of this gives log(n ! )− m log((n /m)! ), so the result follows from Lemma 1.",
                "The fooling set will consist of all vectors of votes satisfying the following constraints: • For any 1 ≤ i ≤ n , voters 2i−1 and 2i vote the same. 81 • Every candidate receives equally many votes from the first 2n = n − 1 voters. • The last voter (voter n) votes for a.",
                "Candidate a wins with each one of these vote vectors because of the extra vote for a from the last voter.",
                "Given that m divides n , let us see how many vote vectors there are in the fooling set.",
                "We need to distribute n voter pairs evenly over m candidates, for a total of n /m voter pairs per candidate; and there are precisely n ! (( n m )! )m ways of doing this.6 All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses.",
                "Let i be a number such that the two vote vectors disagree on the candidate for which voters 2i − 1 and 2i vote.",
                "Without loss of generality, suppose that in the first vote vector, these voters do not vote for a (but for some other candidate, b, instead).",
                "Now, construct a new vote vector by taking votes 2i − 1 and 2i from the first vote vector, and the remaining votes from the second vote vector.",
                "Then, b receives 2n /m + 2 votes in this newly constructed vote vector, whereas a receives at most 2n /m+1 votes.",
                "So, a is not the winner in the newly constructed vote vector, and hence we have a correct fooling set.",
                "Theorem 4.",
                "The deterministic communication complexity of the plurality with runoff rule is O(n log m).",
                "Proof.",
                "First, let every voter indicate her most preferred candidate using log m bits.",
                "After this, the two candidates in the runoff are known, and each voter can indicate which one she prefers using a single additional bit.",
                "Theorem 5.",
                "The nondeterministic communication complexity of the plurality with runoff rule is Ω(n log m) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We will exhibit a fooling set of size n ! (( n m )! )m where m = m/2 and n = (n − 2)/4.",
                "Taking the logarithm of this gives log(n !) − m log((n /m )! ), so the result follows from Lemma 1.",
                "Divide the candidates into m pairs: (c1, d1), (c2, d2), . . . , (cm , dm ) where c1 = a and d1 = b.",
                "The fooling set will consist of all vectors of votes satisfying the following constraints: • For any 1 ≤ i ≤ n , voters 4i − 3 and 4i − 2 rank the candidates ck(i) a C − {a, ck(i)}, for some candidate ck(i). (If ck(i) = a then the vote is simply a C − {a}.) • For any 1 ≤ i ≤ n , voters 4i − 1 and 4i rank the candidates dk(i) a C − {a, dk(i)} (that is, their most preferred candidate is the candidate that is paired with the candidate that the previous two voters vote for). 6 An intuitive proof of this is the following.",
                "We can count the number of permutations of n elements as follows.",
                "First, divide the elements into m buckets of size n /m, so that if x is placed in a lower-indexed bucket than y, then x will be indexed lower in the eventual permutation.",
                "Then, decide on the permutation within each bucket (for which there are (n /m)! choices per bucket).",
                "It follows that n ! equals the number of ways to divide n elements into m buckets of size n /m, times ((n /m)! )m . • Every candidate is ranked at the top of equally many of the first 4n = n − 2 votes. • Voter 4n +1 = n−1 ranks the candidates a C−{a}. • Voter 4n + 2 = n ranks the candidates b C − {b}.",
                "Candidate a wins with each one of these vote vectors: because of the last two votes, candidates a and b are one vote ahead of all the other candidates and continue to the runoff, and at this point all the votes that had another candidate ranked at the top transfer to a, so that a wins the runoff.",
                "Given that m divides n , let us see how many vote vectors there are in the fooling set.",
                "We need to distribute n groups of four voters evenly over the m pairs of candidates, and (as in the proof of Theorem 3) there are n ! (( n m )! )m ways of doing this.",
                "All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses.",
                "Let i be a number such that ck(i) is not the same in both of these two vote vectors, that is, c1 k(i) (ck(i) in the first vote vector) is not equal to c2 k(i) (ck(i) in the second vote vector).",
                "Without loss of generality, suppose c1 k(i) = a.",
                "Now, construct a new vote vector by taking votes 4i − 3, 4i − 2, 4i − 1, 4i from the first vote vector, and the remaining votes from the second vote vector.",
                "In this newly constructed vote vector, c1 k(i) and d1 k(i) each receive 4n /m+2 votes in the first round, whereas a receives at most 4n /m+1 votes.",
                "So, a does not continue to the runoff in the newly constructed vote vector, and hence we have a correct fooling set.",
                "Theorem 6.",
                "The nondeterministic communication complexity of the Borda rule is Ω(nm log m) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We will exhibit a fooling set of size (m ! )n where m = m−2 and n = (n−2)/4.",
                "This will prove the theorem because m ! is Ω(m log m), so that log((m ! )n ) = n log(m !) is Ω(nm log m).",
                "For every vector (π1, π2, . . . , πn ) consisting of n orderings of all candidates other than a and another fixed candidate b (technically, the orderings take the form of a one-to-one function πi : {1, 2, . . . , m } → C − {a, b} with πi(j) = c indicating that candidate c is the jth in the order represented by πi), let the following vector of votes be an element of the fooling set: • For 1 ≤ i ≤ n , let voters 4i − 3 and 4i − 2 rank the candidates a b πi(1) πi(2) . . . πi(m ). • For 1 ≤ i ≤ n , let voters 4i − 1 and 4i rank the candidates πi(m ) πi(m − 1) . . . πi(1) b a. • Let voter 4n + 1 = n − 1 rank the candidates a b π0(1) π0(2) . . . π0(m ) (where π0 is an arbitrary order of the candidates other than a and b which is the same for every element of the fooling set). • Let voter 4n + 2 = n rank the candidates π0(m ) π0(m − 1) . . . π0(1) a b.",
                "We observe that this fooling set has size (m ! )n , and that candidate a wins in each vector of votes in the fooling set (to 82 see why, we observe that for any 1 ≤ i ≤ n , votes 4i−3 and 4i − 2 rank the candidates in the exact opposite way from votes 4i − 1 and 4i, which under the Borda rule means they cancel out; and the last two votes give one more point to a than to any other candidate-besides b who gets two fewer points than a).",
                "All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses.",
                "Let the first vote vector correspond to the vector (π1 1, π1 2, . . . , π1 n ), and let the second vote vector correspond to the vector (π2 1, π2 2, . . . , π2 n ).",
                "For some i, we must have π1 i = π2 i , so that for some candidate c /∈ {a, b}, (π1 i )−1 (c) < (π2 i )−1 (c) (that is, c is ranked higher in π1 i than in π2 i ).",
                "Now, construct a new vote vector by taking votes 4i−3 and 4i−2 from the first vote vector, and the remaining votes from the second vote vector. as Borda score remains unchanged.",
                "However, because c is ranked higher in π1 i than in π2 i , c receives at least 2 more points from votes 4i−3 and 4i − 2 in the newly constructed vote vector than it did in the second vote vector.",
                "It follows that c has a higher Borda score than a in the newly constructed vote vector.",
                "So, a is not the winner in the newly constructed vote vector, and hence we have a correct fooling set.",
                "Theorem 7.",
                "The nondeterministic communication complexity of the Copeland rule is Ω(nm log m) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We will exhibit a fooling set of size (m ! )n where m = (m − 2)/2 and n = (n − 2)/2.",
                "This will prove the theorem because m ! is Ω(m log m), so that log((m ! )n ) = n log(m !) is Ω(nm log m).",
                "We write the set of candidates as the following disjoint union: C = {a, b} ∪ L ∪ R where L = {l1, l2, . . . , lm } and R = {r1, r2, . . . , rm }.",
                "For every vector (π1, π2, . . . , πn ) consisting of n permutations of the integers 1 through m (πi : {1, 2, . . . , m } → {1, 2, . . . , m }), let the following vector of votes be an element of the fooling set: • For 1 ≤ i ≤ n , let voter 2i − 1 rank the candidates a b lπi(1) rπi(1) lπi(2) rπi(2) . . . lπi(m ) rπi(m ). • For 1 ≤ i ≤ n , let voter 2i rank the candidates rπi(m ) lπi(m ) rπi(m −1) lπi(m −1) . . . rπi(1) lπi(1) b a. • Let voter n − 1 = 2n + 1 rank the candidates a b l1 r1 l2 r2 . . . lm rm . • Let voter n = 2n +2 rank the candidates rm lm rm −1 lm −1 . . . r1 l1 a b.",
                "We observe that this fooling set has size (m ! )n , and that candidate a wins in each vector of votes in the fooling set (every pair of candidates is tied in their pairwise election, with the exception that a defeats b, so that a wins the election by half a point).",
                "All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses.",
                "Let the first vote vector correspond to the vector (π1 1, π1 2, . . . , π1 n ), and let the second vote vector correspond to the vector (π2 1, π2 2, . . . , π2 n ).",
                "For some i, we must have π1 i = π2 i , so that for some j ∈ {1, 2, . . . , m }, we have (π1 i )−1 (j) < (π2 i )−1 (j).",
                "Now, construct a new vote vector by taking vote 2i−1 from the first vote vector, and the remaining votes from the second vote vector. as Copeland score remains unchanged.",
                "Let us consider the score of lj.",
                "We first observe that the rank of lj in vote 2i − 1 in the newly constructed vote vector is at least 2 higher than it was in the second vote vector, because (π1 i )−1 (j) < (π2 i )−1 (j).",
                "Let D1 (lj) be the set of candidates in L ∪ R that voter 2i − 1 ranked lower than lj in the first vote vector (D1 (lj) = {c ∈ L ∪ R : lj 1 2i−1 c}), and let D2 (lj) be the set of candidates in L ∪ R that voter 2i − 1 ranked lower than lj in the second vote vector (D2 (lj) = {c ∈ L ∪ R : lj 2 2i−1 c}).",
                "Then, it follows that in the newly constructed vote vector, lj defeats all the candidates in D1 (lj) − D2 (lj) in their pairwise elections (because lj receives an extra vote in each one of these pairwise elections relative to the second vote vector), and loses to all the candidates in D2 (lj) − D1 (lj) (because lj loses a vote in each one of these pairwise elections relative to the second vote vector), and ties with everyone else.",
                "But |D1 (lj)|−|D2 (lj)| ≥ 2, and hence |D1 (lj) − D2 (lj)| − |D2 (lj) − D1 (lj)| ≥ 2.",
                "Hence, in the newly constructed vote vector, lj has at least two more pairwise wins than pairwise losses, and therefore has at least 1 more point than if lj had tied all its pairwise elections.",
                "Thus, lj has a higher Copeland score than a in the newly constructed vote vector.",
                "So, a is not the winner in the newly constructed vote vector, and hence we have a correct fooling set.",
                "Theorem 8.",
                "The nondeterministic communication complexity of the maximin rule is O(nm).",
                "Proof.",
                "The nondeterministic <br>protocol</br> will guess which candidate w is the winner, and, for each other candidate c, which candidate o(c) is the candidate against whom c receives its lowest score in a pairwise election.",
                "Then, let every voter communicate the following: • for each candidate c = w, whether she prefers c to w; • for each candidate c = w, whether she prefers c to o(c).",
                "We observe that this requires the communication of 2n(m− 1) bits.",
                "If the guesses were correct, then, letting N(d, e) be the number of voters preferring candidate d to candidate e, we should have N(c, o(c)) < N(w, c ) for any c = w, c = w, which will prove that w wins the election.",
                "Theorem 9.",
                "The nondeterministic communication complexity of the maximin rule is Ω(nm) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We will exhibit a fooling set of size 2n m where m = m − 2 and n = (n − 1)/4.",
                "Let b be a candidate other than a.",
                "For every vector (S1, S2, . . . , Sn ) consisting of n subsets Si ⊆ C − {a, b}, let the following vector of votes be an element of the fooling set: • For 1 ≤ i ≤ n , let voters 4i − 3 and 4i − 2 rank the candidates Si a C − (Si ∪ {a, b}) b. • For 1 ≤ i ≤ n , let voters 4i − 1 and 4i rank the candidates b C − (Si ∪ {a, b}) a Si. 83 • Let voter 4n + 1 = n rank the candidates a b C − {a, b}.",
                "We observe that this fooling set has size (2m )n = 2n m , and that candidate a wins in each vector of votes in the fooling set (in every one of as pairwise elections, a is ranked higher than its opponent by 2n +1 = (n+1)/2 > n/2 votes).",
                "All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses.",
                "Let the first vote vector correspond to the vector (S1 1 , S1 2 , . . . , S1 n ), and let the second vote vector correspond to the vector (S2 1 , S2 2 , . . . , S2 n ).",
                "For some i, we must have S1 i = S2 i , so that either S1 i S2 i or S2 i S1 i .",
                "Without loss of generality, suppose S1 i S2 i , and let c be some candidate in S1 i − S2 i .",
                "Now, construct a new vote vector by taking votes 4i − 3 and 4i − 2 from the first vote vector, and the remaining votes from the second vote vector.",
                "In this newly constructed vote vector, a is ranked higher than c by only 2n −1 voters, for the following reason.",
                "Whereas voters 4i−3 and 4i − 2 do not rank c higher than a in the second vote vector (because c /∈ S2 i ), voters 4i − 3 and 4i − 2 do rank c higher than a in the first vote vector (because c ∈ S1 i ).",
                "Moreover, in every one of bs pairwise elections, b is ranked higher than its opponent by at least 2n voters.",
                "So, a has a lower maximin score than b, therefore a is not the winner in the newly constructed vote vector, and hence we have a correct fooling set.",
                "Theorem 10.",
                "The deterministic communication complexity of the STV rule is O(n(log m)2 ).",
                "Proof.",
                "Consider the following communication <br>protocol</br>.",
                "Let each voter first announce her most preferred candidate (O(n log m) communication).",
                "In the remaining rounds, we will keep track of each voters most preferred candidate among the remaining candidates, which will be enough to implement the rule.",
                "When candidate c is eliminated, let each of the voters whose most preferred candidate among the remaining candidates was c announce their most preferred candidate among the candidates remaining after cs elimination.",
                "If candidate c was the ith candidate to be eliminated (that is, there were m − i + 1 candidates remaining before cs elimination), it follows that at most n/(m − i + 1) voters had candidate c as their most preferred candidate among the remaining candidates, and thus the number of bits to be communicated after the elimination of the ith candidate is O((n/(m−i+1)) log m).7 Thus, the total communication in this communication <br>protocol</br> is O(n log m + m−1 i=1 (n/(m − i + 1)) log m).",
                "Of course, m−1 i=1 1/(m − i + 1) = m i=2 1/i, which is O(log m).",
                "Substituting into the previous expression, we find that the communication complexity is O(n(log m)2 ).",
                "Theorem 11.",
                "The nondeterministic communication complexity of the STV rule is Ω(n log m) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We omit this proof because of space constraint. 7 Actually, O((n/(m − i + 1)) log(m − i + 1)) is also correct, but it will not improve the bound.",
                "Theorem 12.",
                "The deterministic communication complexity of the approval rule is O(nm).",
                "Proof.",
                "Approving or disapproving of a candidate requires only one bit of information, so every voter can simply approve or disapprove of every candidate for a total communication of nm bits.",
                "Theorem 13.",
                "The nondeterministic communication complexity of the approval rule is Ω(nm) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We will exhibit a fooling set of size 2n m where m = m − 1 and n = (n − 1)/4.",
                "For every vector (S1, S2, . . . , Sn ) consisting of n subsets Si ⊆ C − {a}, let the following vector of votes be an element of the fooling set: • For 1 ≤ i ≤ n , let voters 4i − 3 and 4i − 2 approve Si ∪ {a}. • For 1 ≤ i ≤ n , let voters 4i − 1 and 4i approve C − (Si ∪ {a}). • Let voter 4n + 1 = n approve {a}.",
                "We observe that this fooling set has size (2m )n = 2n m , and that candidate a wins in each vector of votes in the fooling set (a is approved by 2n + 1 voters, whereas each other candidate is approved by only 2n voters).",
                "All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses.",
                "Let the first vote vector correspond to the vector (S1 1 , S1 2 , . . . , S1 n ), and let the second vote vector correspond to the vector (S2 1 , S2 2 , . . . , S2 n ).",
                "For some i, we must have S1 i = S2 i , so that either S1 i S2 i or S2 i S1 i .",
                "Without loss of generality, suppose S1 i S2 i , and let b be some candidate in S1 i − S2 i .",
                "Now, construct a new vote vector by taking votes 4i − 3 and 4i − 2 from the first vote vector, and the remaining votes from the second vote vector.",
                "In this newly constructed vote vector, a is still approved by 2n + 1 votes.",
                "However, b is approved by 2n + 2 votes, for the following reason.",
                "Whereas voters 4i−3 and 4i−2 do not approve b in the second vote vector (because b /∈ S2 i ), voters 4i − 3 and 4i − 2 do approve b in the first vote vector (because b ∈ S1 i ).",
                "It follows that bs score in the newly constructed vote vector is bs score in the second vote vector (2n ), plus two.",
                "So, a is not the winner in the newly constructed vote vector, and hence we have a correct fooling set.",
                "Interestingly, an Ω(m) lower bound can be obtained even for the problem of finding a candidate that is approved by more than one voter [20].",
                "Theorem 14.",
                "The deterministic communication complexity of the Condorcet rule is O(nm).",
                "Proof.",
                "We maintain a set of active candidates S which is initialized to C. At each stage, we choose two of the active candidates (say, the two candidates with the lowest indices), and we let each voter communicate which of the two candidates she prefers. (Such a stage requires the communication of n bits, one per voter.)",
                "The candidate preferred by fewer 84 voters (the loser of the pairwise election) is removed from S. (If the pairwise election is tied, both candidates are removed.)",
                "After at most m − 1 iterations, only one candidate is left (or zero candidates are left, in which case there is no Condorcet winner).",
                "Let a be the remaining candidate.",
                "To find out whether candidate a is the Condorcet winner, let each voter communicate, for every candidate c = a, whether she prefers a to c. (This requires the communication of at most n(m − 1) bits.)",
                "This is enough to establish whether a won each of its pairwise elections (and thus, whether a is the Condorcet winner).",
                "Theorem 15.",
                "The nondeterministic communication complexity of the Condorcet rule is Ω(nm) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We will exhibit a fooling set of size 2n m where m = m − 1 and n = (n − 1)/2.",
                "For every vector (S1, S2, . . . , Sn ) consisting of n subsets Si ⊆ C − {a}, let the following vector of votes be an element of the fooling set: • For 1 ≤ i ≤ n , let voter 2i − 1 rank the candidates Si a C − Si. • For 1 ≤ i ≤ n , let voter 2i rank the candidates C − Si a Si. • Let voter 2n +1 = n rank the candidates a C −{a}.",
                "We observe that this fooling set has size (2m )n = 2n m , and that candidate a wins in each vector of votes in the fooling set (a wins each of its pairwise elections by a single vote).",
                "All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses.",
                "Let the first vote vector correspond to the vector (S1 1 , S1 2 , . . . , S1 n ), and let the second vote vector correspond to the vector (S2 1 , S2 2 , . . . , S2 n ).",
                "For some i, we must have S1 i = S2 i , so that either S1 i S2 i or S2 i S1 i .",
                "Without loss of generality, suppose S1 i S2 i , and let b be some candidate in S1 i − S2 i .",
                "Now, construct a new vote vector by taking vote 2i − 1 from the first vote vector, and the remaining votes from the second vote vector.",
                "In this newly constructed vote vector, b wins its pairwise election against a by one vote (vote 2i − 1 ranks b above a in the newly constructed vote vector because b ∈ S1 i , whereas in the second vote vector vote 2i − 1 ranked a above b because b /∈ S2 i ).",
                "So, a is not the Condorcet winner in the newly constructed vote vector, and hence we have a correct fooling set.",
                "Theorem 16.",
                "The deterministic communication complexity of the cup rule is O(nm).",
                "Proof.",
                "Consider the following simple communication <br>protocol</br>.",
                "First, let all the voters communicate, for every one of the matchups in the first round, which of its two candidates they prefer.",
                "After this, the matchups for the second round are known, so let all the voters communicate which candidate they prefer in each matchup in the second round-etc.",
                "Because communicating which of two candidates is preferred requires only one bit per voter, and because there are only m − 1 matchups in total, this communication <br>protocol</br> requires O(nm) communication.",
                "Theorem 17.",
                "The nondeterministic communication complexity of the cup rule is Ω(nm) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We will exhibit a fooling set of size 2n m where m = (m − 1)/2 and n = (n − 7)/2.",
                "Given that m + 1 is a power of 2, so that one candidate gets a bye (that is, does not face an opponent) in the first round, let a be the candidate with the bye.",
                "Of the m first-round matchups, let lj denote the one (left) candidate in the jth matchup, and let rj be the other (right) candidate.",
                "Let L = {lj : 1 ≤ j ≤ m } and R = {rj : 1 ≤ j ≤ m }, so that C = L ∪ R ∪ {a}. . . . . . . . . . l r l r l r a m1 1 2 2 m Figure 1: The schedule for the cup rule used in the proof of Theorem 17.",
                "For every vector (S1, S2, . . . , Sn ) consisting of n subsets Si ⊆ R, let the following vector of votes be an element of the fooling set: • For 1 ≤ i ≤ n , let voter 2i − 1 rank the candidates Si L a R − Si. • For 1 ≤ i ≤ n , let voter 2i rank the candidates R − Si L a Si. • Let voters 2n +1 = n−6, 2n +2 = n−5, 2n +3 = n−4 rank the candidates L a R. • Let voters 2n + 4 = n − 3, 2n + 5 = n − 2 rank the candidates a r1 l1 r2 l2 . . . rm lm . • Let voters 2n + 6 = n − 1, 2n + 7 = n rank the candidates rm lm rm −1 lm −1 . . . r1 l1 a.",
                "We observe that this fooling set has size (2m )n = 2n m .",
                "Also, candidate a wins in each vector of votes in the fooling set, for the following reasons.",
                "Each candidate rj defeats its opponent lj in the first round. (For any 1 ≤ i ≤ n , the net effect of votes 2i − 1 and 2i on the pairwise election between rj and lj is zero; votes n − 6, n − 5, n − 4 prefer lj to rj, but votes n − 3, n − 2, n − 1, n all prefer rj to lj.)",
                "Moreover, a defeats every rj in their pairwise election. (For any 1 ≤ i ≤ n , the net effect of votes 2i − 1 and 2i on the pairwise election between a and rj is zero; votes n − 1, n prefer rj to a, but votes n − 6, n − 5, n − 4, n − 3, n − 2 all prefer a to rj.)",
                "It follows that a will defeat all the candidates that it faces.",
                "All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses.",
                "Let the first vote vector correspond to the vector 85 (S1 1 , S1 2 , . . . , S1 n ), and let the second vote vector correspond to the vector (S2 1 , S2 2 , . . . , S2 n ).",
                "For some i, we must have S1 i = S2 i , so that either S1 i S2 i or S2 i S1 i .",
                "Without loss of generality, suppose S1 i S2 i , and let rj be some candidate in S1 i − S2 i .",
                "Now, construct a new vote vector by taking vote 2i from the first vote vector, and the remaining votes from the second vote vector.",
                "We note that, whereas in the second vote vector vote 2i preferred rj to lj (because rj ∈ R−S2 i ), in the newly constructed vote vector this is no longer the case (because rj ∈ S1 i ).",
                "It follows that, whereas in the second vote vector, rj defeated lj in the first round by one vote, in the newly constructed vote vector, lj defeats rj in the first round.",
                "Thus, at least one lj advances to the second round after defeating its opponent rj.",
                "Now, we observe that in the newly constructed vote vector, any lk wins its pairwise election against any rq with q = k. This is because among the first 2n votes, at least n − 1 prefer lk to rq; votes n − 6, n − 5, n − 4 prefer lk to rq; and, because q = k, either votes n − 3, n − 2 prefer lk to rq (if k < q), or votes n − 1, n prefer lk to rq (if k > q).",
                "Thus, at least n + 4 = (n + 1)/2 > n/2 votes prefer lk to rq.",
                "Moreover, any lk wins its pairwise election against a.",
                "This is because only votes n − 3 and n − 2 prefer a to lk.",
                "It follows that, after the first round, any surviving candidate lk can only lose a matchup against another surviving lk , so that one of the lk must win the election.",
                "So, a is not the winner in the newly constructed vote vector, and hence we have a correct fooling set.",
                "Theorem 18.",
                "The deterministic communication complexity of the Bucklin rule is O(nm).",
                "Proof.",
                "Let l be the minimum integer for which there is a candidate who is ranked among the top l candidates by more than half the votes.",
                "We will do a binary search for l. At each point, we will have a lower bound lL which is smaller than l (initialized to 0), and an upper bound lH which is at least l (initialized to m).",
                "While lH − lL > 1, we continue by finding out whether (lH − l)/2 is smaller than l, after which we can update the bounds.",
                "To find out whether a number k is smaller than l, we determine every voters k most preferred candidates.",
                "Every voter can communicate which candidates are among her k most preferred candidates using m bits (for each candidate, indicate whether the candidate is among the top k or not), but because the binary search requires log m iterations, this gives us an upper bound of O((log m)nm), which is not strong enough.",
                "However, if lL < k < lH , and we already know a voters lL most preferred candidates, as well as her lH most preferred candidates, then the voter no longer needs to communicate whether the lL most preferred candidates are among her k most preferred candidates (because they must be), and she no longer needs to communicate whether the m−lH least preferred candidates are among her k most preferred candidates (because they cannot be).",
                "Thus the voter needs to communicate only m−lL −(m−lH ) = lH −lL bits in any given stage.",
                "Because each stage, lH − lL is (roughly) halved, each voter in total communicates only (roughly) m + m/2 + m/4 + . . . ≤ 2m bits.",
                "Theorem 19.",
                "The nondeterministic communication complexity of the Bucklin rule is Ω(nm) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We will exhibit a fooling set of size 2n m where m = (m−1)/2 and n = n/2.",
                "We write the set of candidates as the following disjoint union: C = {a} ∪ L ∪ R where L = {l1, l2, . . . , lm } and R = {r1, r2, . . . , rm }.",
                "For any subset S ⊆ {1, 2, . . . , m }, let L(S) = {li : i ∈ S} and let R(S) = {ri : i ∈ S}.",
                "For every vector (S1, S2, . . . , Sn ) consisting of n sets Si ⊆ {1, 2, . . . , m }, let the following vector of votes be an element of the fooling set: • For 1 ≤ i ≤ n , let voter 2i − 1 rank the candidates L(Si) R − R(Si) a L − L(Si) R(Si). • For 1 ≤ i ≤ n , let voter 2i rank the candidates L − L(Si) R(Si) a L(Si) R − R(Si).",
                "We observe that this fooling set has size (2m )n = 2n m , and that candidate a wins in each vector of votes in the fooling set, for the following reason.",
                "Each candidate in C − {a} is ranked among the top m candidates by exactly half the voters (which is not enough to win).",
                "Thus, we need to look at the voters top m +1 candidates, and a is ranked m +1th by all voters.",
                "All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses.",
                "Let the first vote vector correspond to the vector (S1 1 , S1 2 , . . . , S1 n ), and let the second vote vector correspond to the vector (S2 1 , S2 2 , . . . , S2 n ).",
                "For some i, we must have S1 i = S2 i , so that either S1 i S2 i or S2 i S1 i .",
                "Without loss of generality, suppose S1 i S2 i , and let j be some integer in S1 i − S2 i .",
                "Now, construct a new vote vector by taking vote 2i − 1 from the first vote vector, and the remaining votes from the second vote vector.",
                "In this newly constructed vote vector, a is still ranked m + 1th by all votes.",
                "However, lj is ranked among the top m candidates by n + 1 = n/2 + 1 votes.",
                "This is because whereas vote 2i − 1 does not rank lj among the top m candidates in the second vote vector (because j /∈ S2 i , we have lj /∈ L(S2 i )), vote 2i − 1 does rank lj among the top m candidates in the first vote vector (because j ∈ S1 i , we have lj ∈ L(S1 i )).",
                "So, a is not the winner in the newly constructed vote vector, and hence we have a correct fooling set.",
                "Theorem 20.",
                "The nondeterministic communication complexity of the ranked pairs rule is Ω(nm log m) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We omit this proof because of space constraint. 5.",
                "DISCUSSION One key obstacle to using voting for preference aggregation is the communication burden that an election places on the voters.",
                "By lowering this burden, it may become feasible to conduct more elections over more issues.",
                "In the limit, this could lead to a shift from representational government to a system in which most issues are decided by referenda-a veritable e-democracy.",
                "In this paper, we analyzed the communication complexity of the common voting rules.",
                "Knowing which voting rules require little communication is especially important when the issue to be voted on is of low enough importance that the following is true: the parties involved are willing to accept a rule that tends 86 to produce outcomes that are slightly less representative of the voters preferences, if this rule reduces the communication burden on the voters significantly.",
                "The following table summarizes the results we obtained.",
                "Rule Lower bound Upper bound plurality Ω(n log m) O(n log m) plurality w/ runoff Ω(n log m) O(n log m) STV Ω(n log m) O(n(log m)2) Condorcet Ω(nm) O(nm) approval Ω(nm) O(nm) Bucklin Ω(nm) O(nm) cup Ω(nm) O(nm) maximin Ω(nm) O(nm) Borda Ω(nm log m) O(nm log m) Copeland Ω(nm log m) O(nm log m) ranked pairs Ω(nm log m) O(nm log m) Communication complexity of voting rules, sorted from low to high.",
                "All of the upper bounds are deterministic (with the exception of maximin, for which the best deterministic upper bound we proved is O(nm log m)).",
                "All of the lower bounds hold even for nondeterministic communication and even just for determining whether a given candidate a is the winner.",
                "One area of future research is to study what happens when we restrict our attention to communication protocols that do not reveal any strategically useful information.",
                "This restriction may invalidate some of the upper bounds that we derived using multistage communication protocols.",
                "Also, all of our bounds are worst-case bounds.",
                "It may be possible to outperform these bounds when the distribution of votes has additional structure.",
                "When deciding which voting rule to use for an election, there are many considerations to take into account.",
                "The voting rules that we studied in this paper are the most common ones that have survived the test of time.",
                "One way to select among these rules is to consider recent results on complexity.",
                "The table above shows that from a communication complexity perspective, plurality, plurality with runoff, and STV are preferable.",
                "However, plurality has the undesirable property that it is computationally easy to manipulate by voting strategically [3, 7].",
                "Plurality with runoff is NP-hard to manipulate by a coalition of weighted voters, or by an individual that faces correlated uncertainty about the others votes [7, 6].",
                "STV is NP-hard to manipulate in those settings as well [7], but also by an individual with perfect knowledge of the others votes (when the number of candidates is unbounded) [2].",
                "Therefore, STV is more robust, although it may require slightly more worst-case communication as per the table above.",
                "Yet other selection criteria are the computational complexity of determining whether enough information has been elicited to declare a winner, and that of determining the optimal sequence of queries [8]. 6.",
                "REFERENCES [1] Lawrence Ausubel and Paul Milgrom.",
                "Ascending auctions with package bidding.",
                "Frontiers of Theoretical Economics, 1, 2002.",
                "No. 1, Article 1. [2] John Bartholdi, III and James Orlin.",
                "Single transferable vote resists strategic voting.",
                "Social Choice and Welfare, 8(4):341-354, 1991. [3] John Bartholdi, III, Craig Tovey, and Michael Trick.",
                "The computational difficulty of manipulating an election.",
                "Social Choice and Welfare, 6(3):227-241, 1989. [4] Avrim Blum, Jeffrey Jackson, Tuomas Sandholm, and Martin Zinkevich.",
                "Preference elicitation and query learning.",
                "Journal of Machine Learning Research, 5:649-667, 2004. [5] Wolfram Conen and Tuomas Sandholm.",
                "Preference elicitation in combinatorial auctions: Extended abstract.",
                "In Proceedings of the ACM Conference on Electronic Commerce (ACM-EC), pages 256-259, 2001. [6] Vincent Conitzer, Jerome Lang, and Tuomas Sandholm.",
                "How many candidates are needed to make elections hard to manipulate?",
                "In Theoretical Aspects of Rationality and Knowledge (TARK), pages 201-214, 2003. [7] Vincent Conitzer and Tuomas Sandholm.",
                "Complexity of manipulating elections with few candidates.",
                "In Proceedings of the National Conference on Artificial Intelligence (AAAI), pages 314-319, 2002. [8] Vincent Conitzer and Tuomas Sandholm.",
                "Vote elicitation: Complexity and strategy-proofness.",
                "In Proceedings of the National Conference on Artificial Intelligence (AAAI), pages 392-397, 2002. [9] Sven de Vries, James Schummer, and Rakesh V. Vohra.",
                "On ascending auctions for heterogeneous objects, 2003.",
                "Draft. [10] Allan Gibbard.",
                "Manipulation of voting schemes.",
                "Econometrica, 41:587-602, 1973. [11] Benoit Hudson and Tuomas Sandholm.",
                "Effectiveness of query types and policies for preference elicitation in combinatorial auctions.",
                "In International Conference on Autonomous Agents and Multi-Agent Systems (AAMAS), pages 386-393, 2004. [12] E Kushilevitz and N Nisan.",
                "Communication Complexity.",
                "Cambridge University Press, 1997. [13] Sebasti´en Lahaie and David Parkes.",
                "Applying learning algorithms to preference elicitation.",
                "In Proceedings of the ACM Conference on Electronic Commerce, 2004. [14] Noam Nisan and Ilya Segal.",
                "The communication requirements of efficient allocations and supporting prices.",
                "Journal of Economic Theory, 2005.",
                "Forthcoming. [15] David Parkes. iBundle: An efficient ascending price bundle auction.",
                "In Proceedings of the ACM Conference on Electronic Commerce (ACM-EC), pages 148-157, 1999. [16] Tuomas Sandholm.",
                "An implementation of the contract net <br>protocol</br> based on marginal cost calculations.",
                "In Proceedings of the National Conference on Artificial Intelligence (AAAI), pages 256-262, 1993. [17] Tuomas Sandholm and Craig Boutilier.",
                "Preference elicitation in combinatorial auctions.",
                "In Peter Cramton, Yoav Shoham, and Richard Steinberg, editors, Combinatorial Auctions, chapter 10.",
                "MIT Press, 2005. [18] Paolo Santi, Vincent Conitzer, and Tuomas Sandholm.",
                "Towards a characterization of polynomial preference elicitation with value queries in combinatorial auctions.",
                "In Conference on Learning Theory (COLT), pages 1-16, 2004. [19] Mark Satterthwaite.",
                "Strategy-proofness and Arrows conditions: existence and correspondence theorems for voting procedures and social welfare functions.",
                "Journal of Economic Theory, 10:187-217, 1975. [20] Ilya Segal.",
                "The communication requirements of social choice rules and supporting budget sets, 2004.",
                "Draft.",
                "Presented at the DIMACS Workshop on Computational Issues in Auction Design, Rutgers University, New Jersey, USA. [21] Peter Wurman and Michael Wellman.",
                "AkBA: A progressive, anonymous-price combinatorial auction.",
                "In Proceedings of the ACM Conference on Electronic Commerce (ACM-EC), pages 21-29, 2000. [22] A. C. Yao.",
                "Some complexity questions related to distributed computing.",
                "In Proceedings of the 11th ACM symposium on theory of computing (STOC), pages 209-213, 1979. [23] Martin Zinkevich, Avrim Blum, and Tuomas Sandholm.",
                "On polynomial-time preference elicitation with value queries.",
                "In Proceedings of the ACM Conference on Electronic Commerce (ACM-EC), pages 176-185, 2003. 87"
            ],
            "original_annotated_samples": [
                "For each rule, we first give a deterministic communication <br>protocol</br> and an upper bound on the number of bits communicated in it; then, we give a lower bound on (even the nondeterministic) communication requirements of the voting rule.",
                "For each rule, we first give an upper bound on the (deterministic) communication complexity by providing a communication <br>protocol</br> for it and analyzing how many bits need to be transmitted in this <br>protocol</br>. (Segals results [20] do not apply to most voting rules because most voting rules are not intersectionmonotonic (or even monotonic).1 ) For many of the voting rules under study, it turns out that one cannot do better than simply letting each voter immediately communicate all her (potentially relevant) information.",
                "However, for some rules (such as plurality with runoff, STV and cup) there is a straightforward multistage communication <br>protocol</br> that, with some analysis, can be shown to significantly outperform the immediate communication of all (potentially relevant) information.",
                "Finally, for some rules (such as the Condorcet and Bucklin rules), we need to introduce a more complex communication <br>protocol</br> to achieve the best possible upper 1 For two of the rules that we study that are intersectionmonotonic, namely the approval and Condorcet rules, Segals results can in fact be used to give alternative proofs of our lower bounds.",
                "If there is a candidate i that is preferred to any other candidate by a majority of the voters (that is, N(i, j) > N(j, i) for all j = i-that is, i wins every pairwise election), then candidate i wins. 2 The term voting <br>protocol</br> is often used to describe the same concept, but we seek to draw a sharp distinction between the rule mapping preferences to outcomes, and the communication/elicitation <br>protocol</br> used to implement this rule. 79 • maximin (aka."
            ],
            "translated_annotated_samples": [
                "Para cada regla, primero proporcionamos un <br>protocolo de comunicación</br> determinista y un límite superior en la cantidad de bits comunicados en él; luego, damos un límite inferior en los requisitos de comunicación (incluso los no deterministas) de la regla de votación.",
                "Para cada regla, primero damos una cota superior en la complejidad de comunicación (determinística) proporcionando un <br>protocolo</br> de comunicación para ella y analizando cuántos bits necesitan ser transmitidos en este <br>protocolo</br>. (Los resultados de Segal [20] no se aplican a la mayoría de las reglas de votación porque la mayoría de las reglas de votación no son intersección-monótonas (o incluso monótonas).) Para muchas de las reglas de votación bajo estudio, resulta que no se puede hacer mejor que simplemente permitir que cada votante comunique inmediatamente toda su información (potencialmente relevante).",
                "Sin embargo, para algunas reglas (como la pluralidad con segunda vuelta, STV y taza) existe un <br>protocolo</br> de comunicación multietapa directo que, con un análisis detallado, se puede demostrar que supera significativamente la comunicación inmediata de toda la información (potencialmente relevante).",
                "Finalmente, para algunas reglas (como las reglas de Condorcet y Bucklin), necesitamos introducir un <br>protocolo de comunicación</br> más complejo para lograr el mejor límite superior posible. Para dos de las reglas que estudiamos que son intersección-monótonas, a saber, las reglas de aprobación y Condorcet, los resultados de Segal de hecho pueden ser utilizados para dar pruebas alternativas de nuestros límites inferiores.",
                "Si hay un candidato i que es preferido por la mayoría de los votantes a cualquier otro candidato (es decir, N(i, j) > N(j, i) para todo j = i, es decir, i gana en cada elección por pares), entonces el candidato i gana. El término protocolo de votación se usa a menudo para describir el mismo concepto, pero buscamos hacer una distinción clara entre la regla que mapea las preferencias a los resultados y el protocolo de comunicación/obtención utilizado para implementar esta regla."
            ],
            "translated_text": "Determinamos la complejidad de comunicación de las reglas de votación comunes. Las reglas (ordenadas por su complejidad de comunicación de baja a alta) son pluralidad, pluralidad con segunda vuelta, voto único transferible (STV), Condorcet, aprobación, Bucklin, taza, maximin, Borda, Copeland y pares clasificados. Para cada regla, primero proporcionamos un <br>protocolo de comunicación</br> determinista y un límite superior en la cantidad de bits comunicados en él; luego, damos un límite inferior en los requisitos de comunicación (incluso los no deterministas) de la regla de votación. Los límites coinciden para todas las reglas de votación excepto STV y maximin. Categorías y Descriptores de Asignaturas F.2 [Teoría de la Computación]: Análisis de Algoritmos y Complejidad de Problemas; J.4 [Aplicaciones Informáticas]: Ciencias Sociales y del Comportamiento-Economía Términos Generales Algoritmos, Economía, Teoría 1. INTRODUCCIÓN Un factor clave en la viabilidad de cualquier regla de agregación de preferencias es su carga de comunicación. Para agregar con éxito las preferencias de los agentes, generalmente no es necesario que todos los agentes informen toda su información de preferencias. Los protocolos inteligentes que obtienen parcial y secuencialmente las preferencias de los agentes tienen el potencial de reducir drásticamente la comunicación requerida. Esto tiene al menos las siguientes ventajas: • Puede hacer factible la agregación de preferencias en entornos donde la cantidad total de información de preferencias es demasiado grande para comunicar. • Incluso cuando comunicar toda la información de preferencias es factible, reducir los requisitos de comunicación disminuye la carga impuesta a los agentes. Esto es especialmente cierto cuando los agentes, en lugar de conocer todas sus preferencias de antemano, necesitan invertir esfuerzo (como cálculos o recopilación de información) para determinar sus preferencias. • Preserva (parte de) la privacidad de los agentes. La mayor parte del trabajo sobre la reducción de la carga de comunicación en la agregación de preferencias se ha centrado en entornos de asignación de recursos como subastas combinatorias, en las que un subastador subasta un número de artículos (posiblemente distintos) en un solo evento. Debido a que en una subasta combinatoria, los postores pueden tener valoraciones separadas para cada uno de un número exponencial de posibles paquetes de artículos, este es un escenario en el que reducir la carga de comunicación es especialmente crucial. Esto se puede lograr complementando al subastador con un provocador que elicitara incrementalmente partes de las preferencias de los postores según sea necesario, basándose en lo que los postores han revelado sobre sus preferencias hasta el momento, como sugieren Conen y Sandholm [5]. Por ejemplo, el solicitante puede preguntar por el valor de un postor para un paquete específico (consultas de valor), cuál de dos paquetes prefiere el postor (consultas de orden), qué paquete clasifica en la posición k o cuál es la posición de un paquete dado (consultas de clasificación), qué paquete compraría dado un vector particular de precios (consultas de demanda), etc., hasta que se pueda determinar (al menos) la asignación final. Experimentalmente, esto produce a drástico ahorro en la revelación de preferencias [11]. Además, si las funciones de valoración de los agentes provienen de ciertas subclases naturales, el problema de la obtención de información puede resolverse utilizando solo un número polinomial de consultas incluso en el peor de los casos [23, 4, 13, 18, 14]. Para una revisión de la obtención de preferencias en subastas combinatorias, consulte [17]. Las subastas combinatorias ascendentes son una forma especial conocida de obtención de preferencias, donde el encuestador realiza consultas de demanda con precios crecientes [15, 21, 1, 9]. Finalmente, los problemas de asignación de recursos 78 también han sido estudiados desde el punto de vista de la complejidad de la comunicación, derivando así límites inferiores sobre la comunicación requerida. Por ejemplo, Nisan y Segal muestran que se requiere comunicación exponencial incluso para obtener un excedente mayor al obtenido al subastar todos los objetos como un único paquete [14]. Segal también estudia reglas de elección social en general, y muestra que para una gran clase de reglas de elección social, los conjuntos de presupuesto de apoyo deben ser revelados de tal manera que si cada agente prefiere el mismo resultado en su conjunto de presupuesto, esto demuestra la optimalidad de ese resultado. Segal luego utiliza esta caracterización para demostrar límites en la comunicación requerida en la asignación de recursos, así como en entornos de emparejamiento [20]. En este documento, nos enfocaremos en los requisitos de comunicación de una subclase generalmente aplicable de reglas de elección social, comúnmente conocidas como reglas de votación. En un entorno de votación, hay un conjunto de resultados de candidatos sobre los cuales los votantes expresan sus preferencias al enviar un voto (normalmente, una clasificación de los candidatos), y el ganador (es decir, el resultado elegido) se determina en función de estos votos. La comunicación requerida por las reglas de votación puede ser grande ya sea porque el número de votantes es grande (como, por ejemplo, en elecciones nacionales), o porque el número de candidatos es grande (por ejemplo, los agentes pueden votar sobre asignaciones de un número de recursos), o ambos. El trabajo previo [8] ha estudiado la obtención de información en votaciones, analizando qué tan difícil es computacionalmente decidir si se puede determinar un ganador con la información obtenida hasta el momento, así como qué tan difícil es encontrar la secuencia óptima de preguntas dadas sospechas perfectas sobre las preferencias de los votantes. Además, ese artículo discute cuestiones estratégicas (teóricas de juegos) introducidas por la obtención de información. Por el contrario, en este artículo nos preocupamos por el número máximo de bits que deben comunicarse para ejecutar una regla de votación dada, cuando no se conoce de antemano las preferencias de los votantes. Determinamos la complejidad de comunicación de las reglas de votación comunes. Para cada regla, primero damos una cota superior en la complejidad de comunicación (determinística) proporcionando un <br>protocolo</br> de comunicación para ella y analizando cuántos bits necesitan ser transmitidos en este <br>protocolo</br>. (Los resultados de Segal [20] no se aplican a la mayoría de las reglas de votación porque la mayoría de las reglas de votación no son intersección-monótonas (o incluso monótonas).) Para muchas de las reglas de votación bajo estudio, resulta que no se puede hacer mejor que simplemente permitir que cada votante comunique inmediatamente toda su información (potencialmente relevante). Sin embargo, para algunas reglas (como la pluralidad con segunda vuelta, STV y taza) existe un <br>protocolo</br> de comunicación multietapa directo que, con un análisis detallado, se puede demostrar que supera significativamente la comunicación inmediata de toda la información (potencialmente relevante). Finalmente, para algunas reglas (como las reglas de Condorcet y Bucklin), necesitamos introducir un <br>protocolo de comunicación</br> más complejo para lograr el mejor límite superior posible. Para dos de las reglas que estudiamos que son intersección-monótonas, a saber, las reglas de aprobación y Condorcet, los resultados de Segal de hecho pueden ser utilizados para dar pruebas alternativas de nuestros límites inferiores. Solo proporcionamos pruebas directas para estas reglas aquí porque 1) estas pruebas directas son de las más fáciles en este documento, 2) las pruebas alternativas son no triviales incluso dados los resultados de Segal, y 3) se aplica una restricción de espacio. Sin embargo, esperamos incluir también las pruebas alternativas en una versión posterior. Después de obtener los límites superiores, demostramos que son ajustados al proporcionar límites inferiores coincidentes en la complejidad de comunicación (incluso la no determinista) de cada regla de votación. Hay dos excepciones: STV, para el cual nuestros límites superiores e inferiores difieren en un factor log m; y maximin, para el cual nuestro mejor límite superior determinístico también es un factor log m por encima del límite inferior (no determinístico), aunque proporcionamos un límite superior no determinístico que coincide con el límite inferior. 2. REVISIÓN DE LAS REGLAS DE VOTACIÓN En esta sección, revisamos las reglas de votación comunes que estudiamos en este documento. Una regla de votación es una función que asigna un vector de votos de los n votantes (es decir, preferencias sobre candidatos) a uno de los m candidatos (el ganador) en el conjunto de candidatos C. En algunos casos (como la regla de Condorcet), la regla también puede declarar que no existe un ganador. No nos preocupamos por lo que sucede en caso de un empate entre candidatos (nuestros límites inferiores se mantienen independientemente de cómo se resuelvan los empates, y los protocolos de comunicación utilizados para nuestros límites superiores no intentan romper los empates). Todas las reglas que estudiamos son reglas basadas en el rango, lo que significa que un voto se define como un ordenamiento de los candidatos (con la excepción de la regla de la pluralidad, para la cual un voto es un único candidato, y la regla de aprobación, para la cual un voto es un subconjunto de los candidatos). Consideraremos las siguientes reglas de votación. (Para reglas que definen una puntuación, el candidato con la puntuación más alta gana.) • reglas de puntuación. Sea α = α1, . . . , αm un vector de enteros tal que α1 ≥ α2 . . . ≥ αm. Para cada votante, un candidato recibe α1 puntos si es clasificado en primer lugar por el votante, α2 si es clasificado en segundo lugar, etc. La puntuación sα de un candidato es el número total de puntos que recibe el candidato. La regla de Borda es la regla de puntuación con α = m−1, m−2, . . . , 0. La regla de la pluralidad es la regla de puntuación con α = 1, 0, . . . , 0. • voto único transferible (STV). La regla avanza a través de una serie de m - 1 rondas. En cada ronda, el candidato con la puntuación de pluralidad más baja (es decir, el menor número de votantes que lo clasifican en primer lugar entre los candidatos restantes) es eliminado (y cada uno de los votos para ese candidato se transfieren al siguiente candidato restante en el orden dado en ese voto). El ganador es el último candidato restante. • mayoría con segunda vuelta. En esta regla, una primera ronda elimina a todos los candidatos excepto a los dos con las puntuaciones de pluralidad más altas. Los votos se transfieren a estos como en la regla de VST, y una segunda ronda determina al ganador de estos dos. • aprobación. Cada votante etiqueta a cada candidato como aprobado o desaprobado. El candidato aprobado por el mayor número de votantes gana. • Condorcet. Para cualquier par de candidatos i y j, sea N(i, j) el número de votantes que prefieren a i sobre j. Si hay un candidato i que es preferido por la mayoría de los votantes a cualquier otro candidato (es decir, N(i, j) > N(j, i) para todo j = i, es decir, i gana en cada elección por pares), entonces el candidato i gana. El término protocolo de votación se usa a menudo para describir el mismo concepto, pero buscamos hacer una distinción clara entre la regla que mapea las preferencias a los resultados y el protocolo de comunicación/obtención utilizado para implementar esta regla. ",
            "candidates": [],
            "error": [
                [
                    "protocolo de comunicación",
                    "protocolo",
                    "protocolo",
                    "protocolo",
                    "protocolo de comunicación"
                ]
            ]
        },
        "resource allocation": {
            "translated_key": "asignación de recursos",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Communication Complexity of Common Voting Rules∗ Vincent Conitzer Carnegie Mellon University 5000 Forbes Avenue Pittsburgh, PA 15213, USA conitzer@cs.cmu.edu Tuomas Sandholm Carnegie Mellon University 5000 Forbes Avenue Pittsburgh, PA 15213, USA sandholm@cs.cmu.edu ABSTRACT We determine the communication complexity of the common voting rules.",
                "The rules (sorted by their communication complexity from low to high) are plurality, plurality with runoff, single transferable vote (STV), Condorcet, approval, Bucklin, cup, maximin, Borda, Copeland, and ranked pairs.",
                "For each rule, we first give a deterministic communication protocol and an upper bound on the number of bits communicated in it; then, we give a lower bound on (even the nondeterministic) communication requirements of the voting rule.",
                "The bounds match for all voting rules except STV and maximin.",
                "Categories and Subject Descriptors F.2 [Theory of Computation]: Analysis of Algorithms and Problem Complexity; J.4 [Computer Applications]: Social and Behavioral Sciences-Economics General Terms Algorithms, Economics, Theory 1.",
                "INTRODUCTION One key factor in the practicality of any preference aggregation rule is its communication burden.",
                "To successfully aggregate the agents preferences, it is usually not necessary for all the agents to report all of their preference information.",
                "Clever protocols that elicit the agents preferences partially and sequentially have the potential to dramatically reduce the required communication.",
                "This has at least the following advantages: • It can make preference aggregation feasible in settings where the total amount of preference information is too large to communicate. • Even when communicating all the preference information is feasible, reducing the communication requirements lessens the burden placed on the agents.",
                "This is especially true when the agents, rather than knowing all their preferences in advance, need to invest effort (such as computation or information gathering) to determine their preferences [16]. • It preserves (some of) the agents privacy.",
                "Most of the work on reducing the communication burden in preference aggregation has focused on <br>resource allocation</br> settings such as combinatorial auctions, in which an auctioneer auctions off a number of (possibly distinct) items in a single event.",
                "Because in a combinatorial auction, bidders can have separate valuations for each of an exponential number of possible bundles of items, this is a setting in which reducing the communication burden is especially crucial.",
                "This can be accomplished by supplementing the auctioneer with an elicitor that incrementally elicits parts of the bidders preferences on an as-needed basis, based on what the bidders have revealed about their preferences so far, as suggested by Conen and Sandholm [5].",
                "For example, the elicitor can ask for a bidders value for a specific bundle (value queries), which of two bundles the bidder prefers (order queries), which bundle he ranks kth or what the rank of a given bundle is (rank queries), which bundle he would purchase given a particular vector of prices (demand queries), etc.-until (at least) the final allocation can be determined.",
                "Experimentally, this yields drastic savings in preference revelation [11].",
                "Furthermore, if the agents valuation functions are drawn from certain natural subclasses, the elicitation problem can be solved using only polynomially many queries even in the worst case [23, 4, 13, 18, 14].",
                "For a review of preference elicitation in combinatorial auctions, see [17].",
                "Ascending combinatorial auctions are a well-known special form of preference elicitation, where the elicitor asks demand queries with increasing prices [15, 21, 1, 9].",
                "Finally, resource 78 allocation problems have also been studied from a communication complexity viewpoint, thereby deriving lower bounds on the required communication.",
                "For example, Nisan and Segal show that exponential communication is required even to obtain a surplus greater than that obtained by auctioning off all objects as a single bundle [14].",
                "Segal also studies social choice rules in general, and shows that for a large class of social choice rules, supporting budget sets must be revealed such that if every agent prefers the same outcome in her budget set, this proves the optimality of that outcome.",
                "Segal then uses this characterization to prove bounds on the communication required in <br>resource allocation</br> as well as matching settings [20].",
                "In this paper, we will focus on the communication requirements of a generally applicable subclass of social choice rules, commonly known as voting rules.",
                "In a voting setting, there is a set of candidate outcomes over which the voters express their preferences by submitting a vote (typically, a ranking of the candidates), and the winner (that is, the chosen outcome) is determined based on these votes.",
                "The communication required by voting rules can be large either because the number of voters is large (such as, for example, in national elections), or because the number of candidates is large (for example, the agents can vote over allocations of a number of resources), or both.",
                "Prior work [8] has studied elicitation in voting, studying how computationally hard it is to decide whether a winner can be determined with the information elicited so far, as well as how hard it is to find the optimal sequence of queries given perfect suspicions about the voters preferences.",
                "In addition, that paper discusses strategic (game-theoretic) issues introduced by elicitation.",
                "In contrast, in this paper, we are concerned with the worst-case number of bits that must be communicated to execute a given voting rule, when nothing is known in advance about the voters preferences.",
                "We determine the communication complexity of the common voting rules.",
                "For each rule, we first give an upper bound on the (deterministic) communication complexity by providing a communication protocol for it and analyzing how many bits need to be transmitted in this protocol. (Segals results [20] do not apply to most voting rules because most voting rules are not intersectionmonotonic (or even monotonic).1 ) For many of the voting rules under study, it turns out that one cannot do better than simply letting each voter immediately communicate all her (potentially relevant) information.",
                "However, for some rules (such as plurality with runoff, STV and cup) there is a straightforward multistage communication protocol that, with some analysis, can be shown to significantly outperform the immediate communication of all (potentially relevant) information.",
                "Finally, for some rules (such as the Condorcet and Bucklin rules), we need to introduce a more complex communication protocol to achieve the best possible upper 1 For two of the rules that we study that are intersectionmonotonic, namely the approval and Condorcet rules, Segals results can in fact be used to give alternative proofs of our lower bounds.",
                "We only give direct proofs for these rules here because 1) these direct proofs are among the easier ones in this paper, 2) the alternative proofs are nontrivial even given Segals results, and 3) a space constraint applies.",
                "However, we hope to also include the alternative proofs in a later version. bound.",
                "After obtaining the upper bounds, we show that they are tight by giving matching lower bounds on (even the nondeterministic) communication complexity of each voting rule.",
                "There are two exceptions: STV, for which our upper and lower bounds are apart by a factor log m; and maximin, for which our best deterministic upper bound is also a factor log m above the (nondeterministic) lower bound, although we give a nondeterministic upper bound that matches the lower bound. 2. REVIEW OF VOTING RULES In this section, we review the common voting rules that we study in this paper.",
                "A voting rule2 is a function mapping a vector of the n voters votes (i.e. preferences over candidates) to one of the m candidates (the winner) in the candidate set C. In some cases (such as the Condorcet rule), the rule may also declare that no winner exists.",
                "We do not concern ourselves with what happens in case of a tie between candidates (our lower bounds hold regardless of how ties are broken, and the communication protocols used for our upper bounds do not attempt to break the ties).",
                "All of the rules that we study are rank-based rules, which means that a vote is defined as an ordering of the candidates (with the exception of the plurality rule, for which a vote is a single candidate, and the approval rule, for which a vote is a subset of the candidates).",
                "We will consider the following voting rules. (For rules that define a score, the candidate with the highest score wins.) • scoring rules.",
                "Let α = α1, . . . , αm be a vector of integers such that α1 ≥ α2 . . . ≥ αm.",
                "For each voter, a candidate receives α1 points if it is ranked first by the voter, α2 if it is ranked second etc.",
                "The score sα of a candidate is the total number of points the candidate receives.",
                "The Borda rule is the scoring rule with α = m−1, m−2, . . . , 0 .",
                "The plurality rule is the scoring rule with α = 1, 0, . . . , 0 . • single transferable vote (STV).",
                "The rule proceeds through a series of m − 1 rounds.",
                "In each round, the candidate with the lowest plurality score (that is, the least number of voters ranking it first among the remaining candidates) is eliminated (and each of the votes for that candidate transfer to the next remaining candidate in the order given in that vote).",
                "The winner is the last remaining candidate. • plurality with run-off.",
                "In this rule, a first round eliminates all candidates except the two with the highest plurality scores.",
                "Votes are transferred to these as in the STV rule, and a second round determines the winner from these two. • approval.",
                "Each voter labels each candidate as either approved or disapproved.",
                "The candidate approved by the greatest number of voters wins. • Condorcet.",
                "For any two candidates i and j, let N(i, j) be the number of voters who prefer i to j.",
                "If there is a candidate i that is preferred to any other candidate by a majority of the voters (that is, N(i, j) > N(j, i) for all j = i-that is, i wins every pairwise election), then candidate i wins. 2 The term voting protocol is often used to describe the same concept, but we seek to draw a sharp distinction between the rule mapping preferences to outcomes, and the communication/elicitation protocol used to implement this rule. 79 • maximin (aka.",
                "Simpson).",
                "The maximin score of i is s(i) = minj=i N(i, j)-that is, is worst performance in a pairwise election.",
                "The candidate with the highest maximin score wins. • Copeland.",
                "For any two distinct candidates i and j, let C(i, j) = 1 if N(i, j) > N(j, i), C(i, j) = 1/2 if N(i, j) = N(j, i) and C(i, j) = 0 if N(i, j) < N(j, i).",
                "The Copeland score of candidate i is s(i) = j=i C(i, j). • cup (sequential binary comparisons).",
                "The cup rule is defined by a balanced3 binary tree T with one leaf per candidate, and an assignment of candidates to leaves (each leaf gets one candidate).",
                "Each non-leaf node is assigned the winner of the pairwise election of the nodes children; the candidate assigned to the root wins. • Bucklin.",
                "For any candidate i and integer l, let B(i, l) be the number of voters that rank candidate i among the top l candidates.",
                "The winner is arg mini(min{l : B(i, l) > n/2}).",
                "That is, if we say that a voter approves her top l candidates, then we repeatedly increase l by 1 until some candidate is approved by more than half the voters, and this candidate is the winner. • ranked pairs.",
                "This rule determines an order on all the candidates, and the winner is the candidate at the top of this order.",
                "Sort all ordered pairs of candidates (i, j) by N(i, j), the number of voters who prefer i to j.",
                "Starting with the pair (i, j) with the highest N(i, j), we lock in the result of their pairwise election (i j).",
                "Then, we move to the next pair, and we lock the result of their pairwise election.",
                "We continue to lock every pairwise result that does not contradict the ordering established so far.",
                "We emphasize that these definitions of voting rules do not concern themselves with how the votes are elicited from the voters; all the voting rules, including those that are suggestively defined in terms of rounds, are in actuality just functions mapping the vector of all the voters votes to a winner.",
                "Nevertheless, there are always many different ways of eliciting the votes (or the relevant parts thereof) from the voters.",
                "For example, in the plurality with runoff rule, one way of eliciting the votes is to ask every voter to declare her entire ordering of the candidates up front.",
                "Alternatively, we can first ask every voter to declare only her most preferred candidate; then, we will know the two candidates in the runoff, and we can ask every voter which of these two candidates she prefers.",
                "Thus, we distinguish between the voting rule (the mapping from vectors of votes to outcomes) and the communication protocol (which determines how the relevant parts of the votes are actually elicited from the voters).",
                "The goal of this paper is to give efficient communication protocols for the voting rules just defined, and to prove that there do not exist any more efficient communication protocols.",
                "It is interesting to note that the choice of the communication protocol may affect the strategic behavior of the voters.",
                "Multistage communication protocols may reveal to the voters some information about how the other voters are voting (for example, in the two-stage communication protocol just given for plurality with runoff, in the second stage voters 3 Balanced means that the difference in depth between two leaves can be at most one. will know which two candidates have the highest plurality scores).",
                "In general, when the voters receive such information, it may give them incentives to vote differently than they would have in a single-stage communication protocol in which all voters declare their entire votes simultaneously.",
                "Of course, even the single-stage communication protocol is not strategy-proof4 for any reasonable voting rule, by the Gibbard-Satterthwaite theorem [10, 19].",
                "However, this does not mean that we should not be concerned about adding even more opportunities for strategic voting.",
                "In fact, many of the communication protocols introduced in this paper do introduce additional opportunities for strategic voting, but we do not have the space to discuss this here. (In prior work [8], we do give an example where an elicitation protocol for the approval voting rule introduces strategic voting, and give principles for designing elicitation protocols that do not introduce strategic problems.)",
                "Now that we have reviewed voting rules, we move on to a brief review of communication complexity theory. 3. REVIEW OF SOME COMMUNICATION COMPLEXITY THEORY In this section, we review the basic model of a communication problem and the lower-bounding technique of constructing a fooling set. (The basic model of a communication problem is due to Yao [22]; for an overview see Kushilevitz and Nisan [12].)",
                "Each player 1 ≤ i ≤ n knows (only) input xi.",
                "Together, they seek to compute f(x1, x2, . . . , xn).",
                "In a deterministic protocol for computing f, in each stage, one of the players announces (to all other players) a bit of information based on her own input and the bits announced so far.",
                "Eventually, the communication terminates and all players know f(x1, x2, . . . , xn).",
                "The goal is to minimize the worst-case (over all input vectors) number of bits sent.",
                "The deterministic communication complexity of a problem is the worstcase number of bits sent in the best (correct) deterministic protocol for it.",
                "In a nondeterministic protocol, the next bit to be sent can be chosen nondeterministically.",
                "For the purposes of this paper, we will consider a nondeterministic protocol correct if for every input vector, there is some sequence of nondeterministic choices the players can make so that the players know the value of f when the protocol terminates.",
                "The nondeterministic communication complexity of a problem is the worst-case number of bits sent in the best (correct) nondeterministic protocol for it.",
                "We are now ready to give the definition of a fooling set.",
                "Definition 1.",
                "A fooling set is a set of input vectors {(x1 1, x1 2, . . . , x1 n), (x2 1, x2 2, . . . , x2 n), . . . , (xk 1 , xk 2 , . . . , xk n) such that for any i, f(xi 1, xi 2, . . . , xi n) = f0 for some constant f0, but for any i = j, there exists some vector (r1, r2, . . . , rn) ∈ {i, j}n such that f(xr1 1 , xr2 2 , . . . , xrn n ) = f0. (That is, we can mix the inputs from the two input vectors to obtain a vector with a different function value.)",
                "It is known that if a fooling set of size k exists, then log k is a lower bound on the communication complexity (even the nondeterministic communication complexity) [12]. 4 A strategy-proof protocol is one in which it is in the players best interest to report their preferences truthfully. 80 For the purposes of this paper, f is the voting rule that maps the votes to the winning candidate, and xi is voter is vote (the information that the voting rule would require from the voter if there were no possibility of multistage communication-i.e. the most preferred candidate (plurality), the approved candidates (approval), or the ranking of all the candidates (all other protocols)).",
                "However, when we derive our lower bounds, f will only signify whether a distinguished candidate a wins. (That is, f is 1 if a wins, and 0 otherwise.)",
                "This will strengthen our lower bound results (because it implies that even finding out whether one given candidate wins is hard).5 Thus, a fooling set in our context is a set of vectors of votes so that a wins (does not win) with each of them; but for any two different vote vectors in the set, there is a way of taking some voters votes from the first vector and the others votes from the second vector, so that a does not win (wins).",
                "To simplify the proofs of our lower bounds, we make assumptions such as the number of voters n is odd in many of these proofs.",
                "Therefore, technically, we do not prove the lower bound for (number of candidates, number of voters) pairs (m, n) that do not satisfy these assumptions (for example, if we make the above assumption, then we technically do not prove the lower bound for any pair (m, n) in which n is even).",
                "Nevertheless, we always prove the lower bound for a representative set of (m, n) pairs.",
                "For example, for every one of our lower bounds it is the case that for infinitely many values of m, there are infinitely many values of n such that the lower bound is proved for the pair (m, n). 4.",
                "RESULTS We are now ready to present our results.",
                "For each voting rule, we first give a deterministic communication protocol for determining the winner to establish an upper bound.",
                "Then, we give a lower bound on the nondeterministic communication complexity (even on the complexity of deciding whether a given candidate wins, which is an easier question).",
                "The lower bounds match the upper bounds in all but two cases: the STV rule (upper bound O(n(log m)2 ); lower bound Ω(n log m)) and the maximin rule (upper bound O(nm log m), although we do give a nondeterministic protocol that is O(nm); lower bound Ω(nm)).",
                "When we discuss a voting rule in which the voters rank the candidates, we will represent a ranking in which candidate c1 is ranked first, c2 is ranked second, etc. as c1 c2 . . . cm. 5 One possible concern is that in the case where ties are possible, it may require much communication to verify whether a specific candidate a is among the winners, but little communication to produce one of the winners.",
                "However, all the fooling sets we use in the proofs have the property that if a wins, then a is the unique winner.",
                "Therefore, in these fooling sets, if one knows any one of the winners, then one knows whether a is a winner.",
                "Thus, computing one of the winners requires at least as much communication as verifying whether a is among the winners.",
                "In general, when a communication problem allows multiple correct answers for a given vector of inputs, this is known as computing a relation rather than a function [12].",
                "However, as per the above, we can restrict our attention to a subset of the domain where the voting rule truly is a (single-valued) function, and hence lower bounding techniques for functions rather than relations will suffice.",
                "Sometimes for the purposes of a proof the internal ranking of a subset of the candidates does not matter, and in this case we will not specify it.",
                "For example, if S = {c2, c3}, then c1 S c4 indicates that either the ranking c1 c2 c3 c4 or the ranking c1 c3 c2 c4 can be used for the proof.",
                "We first give a universal upper bound.",
                "Theorem 1.",
                "The deterministic communication complexity of any rank-based voting rule is O(nm log m).",
                "Proof.",
                "This bound is achieved by simply having everyone communicate their entire ordering of the candidates (indicating the rank of an individual candidate requires only O(log m) bits, so each of the n voters can simply indicate the rank of each of the m candidates).",
                "The next lemma will be useful in a few of our proofs.",
                "Lemma 1.",
                "If m divides n, then log(n! )−m log((n/m)!) ≥ n(log m − 1)/2.",
                "Proof.",
                "If n/m = 1 (that is, n = m), then this expression simplifies to log(n!).",
                "We have log(n!) = n i=1 log i ≥ n x=1 log(i)dx, which, using integration by parts, is equal to n log n − (n − 1) > n(log n − 1) = n(log m − 1) > n(log m − 1)/2.",
                "So, we can assume that n/m ≥ 2.",
                "We observe that log(n!) = n i=1 log i = n/m−1 i=0 m j=1 log(im+j) ≥ n/m−1 i=1 m j=1 log(im) = m n/m−1 i=1 log(im), and that m log((n/m)!) = m n/m i=1 log(i).",
                "Therefore, log(n!) − m log((n/m)!) ≥ m n/m−1 i=1 log(im) − m n/m i=1 log(i) = m(( n/m−1 i=1 log(im/i))−log(n/m)) = m((n/m− 1) log m−log n+log m) = n log m−m log n. Now, using the fact that n/m ≥ 2, we have m log n = n(m/n) log m(n/m) = n(m/n)(log m + log(n/m)) ≤ n(1/2)(log m + log 2).",
                "Thus, log(n!) − m log((n/m)!) ≥ n log m − m log n ≥ n log m − n(1/2)(log m + log 2) = n(log m − 1)/2.",
                "Theorem 2.",
                "The deterministic communication complexity of the plurality rule is O(n log m).",
                "Proof.",
                "Indicating one of the candidates requires only O(log m) bits, so each voter can simply indicate her most preferred candidate.",
                "Theorem 3.",
                "The nondeterministic communication complexity of the plurality rule is Ω(n log m) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We will exhibit a fooling set of size n ! (( n m )! )m where n = (n−1)/2.",
                "Taking the logarithm of this gives log(n ! )− m log((n /m)! ), so the result follows from Lemma 1.",
                "The fooling set will consist of all vectors of votes satisfying the following constraints: • For any 1 ≤ i ≤ n , voters 2i−1 and 2i vote the same. 81 • Every candidate receives equally many votes from the first 2n = n − 1 voters. • The last voter (voter n) votes for a.",
                "Candidate a wins with each one of these vote vectors because of the extra vote for a from the last voter.",
                "Given that m divides n , let us see how many vote vectors there are in the fooling set.",
                "We need to distribute n voter pairs evenly over m candidates, for a total of n /m voter pairs per candidate; and there are precisely n ! (( n m )! )m ways of doing this.6 All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses.",
                "Let i be a number such that the two vote vectors disagree on the candidate for which voters 2i − 1 and 2i vote.",
                "Without loss of generality, suppose that in the first vote vector, these voters do not vote for a (but for some other candidate, b, instead).",
                "Now, construct a new vote vector by taking votes 2i − 1 and 2i from the first vote vector, and the remaining votes from the second vote vector.",
                "Then, b receives 2n /m + 2 votes in this newly constructed vote vector, whereas a receives at most 2n /m+1 votes.",
                "So, a is not the winner in the newly constructed vote vector, and hence we have a correct fooling set.",
                "Theorem 4.",
                "The deterministic communication complexity of the plurality with runoff rule is O(n log m).",
                "Proof.",
                "First, let every voter indicate her most preferred candidate using log m bits.",
                "After this, the two candidates in the runoff are known, and each voter can indicate which one she prefers using a single additional bit.",
                "Theorem 5.",
                "The nondeterministic communication complexity of the plurality with runoff rule is Ω(n log m) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We will exhibit a fooling set of size n ! (( n m )! )m where m = m/2 and n = (n − 2)/4.",
                "Taking the logarithm of this gives log(n !) − m log((n /m )! ), so the result follows from Lemma 1.",
                "Divide the candidates into m pairs: (c1, d1), (c2, d2), . . . , (cm , dm ) where c1 = a and d1 = b.",
                "The fooling set will consist of all vectors of votes satisfying the following constraints: • For any 1 ≤ i ≤ n , voters 4i − 3 and 4i − 2 rank the candidates ck(i) a C − {a, ck(i)}, for some candidate ck(i). (If ck(i) = a then the vote is simply a C − {a}.) • For any 1 ≤ i ≤ n , voters 4i − 1 and 4i rank the candidates dk(i) a C − {a, dk(i)} (that is, their most preferred candidate is the candidate that is paired with the candidate that the previous two voters vote for). 6 An intuitive proof of this is the following.",
                "We can count the number of permutations of n elements as follows.",
                "First, divide the elements into m buckets of size n /m, so that if x is placed in a lower-indexed bucket than y, then x will be indexed lower in the eventual permutation.",
                "Then, decide on the permutation within each bucket (for which there are (n /m)! choices per bucket).",
                "It follows that n ! equals the number of ways to divide n elements into m buckets of size n /m, times ((n /m)! )m . • Every candidate is ranked at the top of equally many of the first 4n = n − 2 votes. • Voter 4n +1 = n−1 ranks the candidates a C−{a}. • Voter 4n + 2 = n ranks the candidates b C − {b}.",
                "Candidate a wins with each one of these vote vectors: because of the last two votes, candidates a and b are one vote ahead of all the other candidates and continue to the runoff, and at this point all the votes that had another candidate ranked at the top transfer to a, so that a wins the runoff.",
                "Given that m divides n , let us see how many vote vectors there are in the fooling set.",
                "We need to distribute n groups of four voters evenly over the m pairs of candidates, and (as in the proof of Theorem 3) there are n ! (( n m )! )m ways of doing this.",
                "All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses.",
                "Let i be a number such that ck(i) is not the same in both of these two vote vectors, that is, c1 k(i) (ck(i) in the first vote vector) is not equal to c2 k(i) (ck(i) in the second vote vector).",
                "Without loss of generality, suppose c1 k(i) = a.",
                "Now, construct a new vote vector by taking votes 4i − 3, 4i − 2, 4i − 1, 4i from the first vote vector, and the remaining votes from the second vote vector.",
                "In this newly constructed vote vector, c1 k(i) and d1 k(i) each receive 4n /m+2 votes in the first round, whereas a receives at most 4n /m+1 votes.",
                "So, a does not continue to the runoff in the newly constructed vote vector, and hence we have a correct fooling set.",
                "Theorem 6.",
                "The nondeterministic communication complexity of the Borda rule is Ω(nm log m) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We will exhibit a fooling set of size (m ! )n where m = m−2 and n = (n−2)/4.",
                "This will prove the theorem because m ! is Ω(m log m), so that log((m ! )n ) = n log(m !) is Ω(nm log m).",
                "For every vector (π1, π2, . . . , πn ) consisting of n orderings of all candidates other than a and another fixed candidate b (technically, the orderings take the form of a one-to-one function πi : {1, 2, . . . , m } → C − {a, b} with πi(j) = c indicating that candidate c is the jth in the order represented by πi), let the following vector of votes be an element of the fooling set: • For 1 ≤ i ≤ n , let voters 4i − 3 and 4i − 2 rank the candidates a b πi(1) πi(2) . . . πi(m ). • For 1 ≤ i ≤ n , let voters 4i − 1 and 4i rank the candidates πi(m ) πi(m − 1) . . . πi(1) b a. • Let voter 4n + 1 = n − 1 rank the candidates a b π0(1) π0(2) . . . π0(m ) (where π0 is an arbitrary order of the candidates other than a and b which is the same for every element of the fooling set). • Let voter 4n + 2 = n rank the candidates π0(m ) π0(m − 1) . . . π0(1) a b.",
                "We observe that this fooling set has size (m ! )n , and that candidate a wins in each vector of votes in the fooling set (to 82 see why, we observe that for any 1 ≤ i ≤ n , votes 4i−3 and 4i − 2 rank the candidates in the exact opposite way from votes 4i − 1 and 4i, which under the Borda rule means they cancel out; and the last two votes give one more point to a than to any other candidate-besides b who gets two fewer points than a).",
                "All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses.",
                "Let the first vote vector correspond to the vector (π1 1, π1 2, . . . , π1 n ), and let the second vote vector correspond to the vector (π2 1, π2 2, . . . , π2 n ).",
                "For some i, we must have π1 i = π2 i , so that for some candidate c /∈ {a, b}, (π1 i )−1 (c) < (π2 i )−1 (c) (that is, c is ranked higher in π1 i than in π2 i ).",
                "Now, construct a new vote vector by taking votes 4i−3 and 4i−2 from the first vote vector, and the remaining votes from the second vote vector. as Borda score remains unchanged.",
                "However, because c is ranked higher in π1 i than in π2 i , c receives at least 2 more points from votes 4i−3 and 4i − 2 in the newly constructed vote vector than it did in the second vote vector.",
                "It follows that c has a higher Borda score than a in the newly constructed vote vector.",
                "So, a is not the winner in the newly constructed vote vector, and hence we have a correct fooling set.",
                "Theorem 7.",
                "The nondeterministic communication complexity of the Copeland rule is Ω(nm log m) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We will exhibit a fooling set of size (m ! )n where m = (m − 2)/2 and n = (n − 2)/2.",
                "This will prove the theorem because m ! is Ω(m log m), so that log((m ! )n ) = n log(m !) is Ω(nm log m).",
                "We write the set of candidates as the following disjoint union: C = {a, b} ∪ L ∪ R where L = {l1, l2, . . . , lm } and R = {r1, r2, . . . , rm }.",
                "For every vector (π1, π2, . . . , πn ) consisting of n permutations of the integers 1 through m (πi : {1, 2, . . . , m } → {1, 2, . . . , m }), let the following vector of votes be an element of the fooling set: • For 1 ≤ i ≤ n , let voter 2i − 1 rank the candidates a b lπi(1) rπi(1) lπi(2) rπi(2) . . . lπi(m ) rπi(m ). • For 1 ≤ i ≤ n , let voter 2i rank the candidates rπi(m ) lπi(m ) rπi(m −1) lπi(m −1) . . . rπi(1) lπi(1) b a. • Let voter n − 1 = 2n + 1 rank the candidates a b l1 r1 l2 r2 . . . lm rm . • Let voter n = 2n +2 rank the candidates rm lm rm −1 lm −1 . . . r1 l1 a b.",
                "We observe that this fooling set has size (m ! )n , and that candidate a wins in each vector of votes in the fooling set (every pair of candidates is tied in their pairwise election, with the exception that a defeats b, so that a wins the election by half a point).",
                "All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses.",
                "Let the first vote vector correspond to the vector (π1 1, π1 2, . . . , π1 n ), and let the second vote vector correspond to the vector (π2 1, π2 2, . . . , π2 n ).",
                "For some i, we must have π1 i = π2 i , so that for some j ∈ {1, 2, . . . , m }, we have (π1 i )−1 (j) < (π2 i )−1 (j).",
                "Now, construct a new vote vector by taking vote 2i−1 from the first vote vector, and the remaining votes from the second vote vector. as Copeland score remains unchanged.",
                "Let us consider the score of lj.",
                "We first observe that the rank of lj in vote 2i − 1 in the newly constructed vote vector is at least 2 higher than it was in the second vote vector, because (π1 i )−1 (j) < (π2 i )−1 (j).",
                "Let D1 (lj) be the set of candidates in L ∪ R that voter 2i − 1 ranked lower than lj in the first vote vector (D1 (lj) = {c ∈ L ∪ R : lj 1 2i−1 c}), and let D2 (lj) be the set of candidates in L ∪ R that voter 2i − 1 ranked lower than lj in the second vote vector (D2 (lj) = {c ∈ L ∪ R : lj 2 2i−1 c}).",
                "Then, it follows that in the newly constructed vote vector, lj defeats all the candidates in D1 (lj) − D2 (lj) in their pairwise elections (because lj receives an extra vote in each one of these pairwise elections relative to the second vote vector), and loses to all the candidates in D2 (lj) − D1 (lj) (because lj loses a vote in each one of these pairwise elections relative to the second vote vector), and ties with everyone else.",
                "But |D1 (lj)|−|D2 (lj)| ≥ 2, and hence |D1 (lj) − D2 (lj)| − |D2 (lj) − D1 (lj)| ≥ 2.",
                "Hence, in the newly constructed vote vector, lj has at least two more pairwise wins than pairwise losses, and therefore has at least 1 more point than if lj had tied all its pairwise elections.",
                "Thus, lj has a higher Copeland score than a in the newly constructed vote vector.",
                "So, a is not the winner in the newly constructed vote vector, and hence we have a correct fooling set.",
                "Theorem 8.",
                "The nondeterministic communication complexity of the maximin rule is O(nm).",
                "Proof.",
                "The nondeterministic protocol will guess which candidate w is the winner, and, for each other candidate c, which candidate o(c) is the candidate against whom c receives its lowest score in a pairwise election.",
                "Then, let every voter communicate the following: • for each candidate c = w, whether she prefers c to w; • for each candidate c = w, whether she prefers c to o(c).",
                "We observe that this requires the communication of 2n(m− 1) bits.",
                "If the guesses were correct, then, letting N(d, e) be the number of voters preferring candidate d to candidate e, we should have N(c, o(c)) < N(w, c ) for any c = w, c = w, which will prove that w wins the election.",
                "Theorem 9.",
                "The nondeterministic communication complexity of the maximin rule is Ω(nm) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We will exhibit a fooling set of size 2n m where m = m − 2 and n = (n − 1)/4.",
                "Let b be a candidate other than a.",
                "For every vector (S1, S2, . . . , Sn ) consisting of n subsets Si ⊆ C − {a, b}, let the following vector of votes be an element of the fooling set: • For 1 ≤ i ≤ n , let voters 4i − 3 and 4i − 2 rank the candidates Si a C − (Si ∪ {a, b}) b. • For 1 ≤ i ≤ n , let voters 4i − 1 and 4i rank the candidates b C − (Si ∪ {a, b}) a Si. 83 • Let voter 4n + 1 = n rank the candidates a b C − {a, b}.",
                "We observe that this fooling set has size (2m )n = 2n m , and that candidate a wins in each vector of votes in the fooling set (in every one of as pairwise elections, a is ranked higher than its opponent by 2n +1 = (n+1)/2 > n/2 votes).",
                "All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses.",
                "Let the first vote vector correspond to the vector (S1 1 , S1 2 , . . . , S1 n ), and let the second vote vector correspond to the vector (S2 1 , S2 2 , . . . , S2 n ).",
                "For some i, we must have S1 i = S2 i , so that either S1 i S2 i or S2 i S1 i .",
                "Without loss of generality, suppose S1 i S2 i , and let c be some candidate in S1 i − S2 i .",
                "Now, construct a new vote vector by taking votes 4i − 3 and 4i − 2 from the first vote vector, and the remaining votes from the second vote vector.",
                "In this newly constructed vote vector, a is ranked higher than c by only 2n −1 voters, for the following reason.",
                "Whereas voters 4i−3 and 4i − 2 do not rank c higher than a in the second vote vector (because c /∈ S2 i ), voters 4i − 3 and 4i − 2 do rank c higher than a in the first vote vector (because c ∈ S1 i ).",
                "Moreover, in every one of bs pairwise elections, b is ranked higher than its opponent by at least 2n voters.",
                "So, a has a lower maximin score than b, therefore a is not the winner in the newly constructed vote vector, and hence we have a correct fooling set.",
                "Theorem 10.",
                "The deterministic communication complexity of the STV rule is O(n(log m)2 ).",
                "Proof.",
                "Consider the following communication protocol.",
                "Let each voter first announce her most preferred candidate (O(n log m) communication).",
                "In the remaining rounds, we will keep track of each voters most preferred candidate among the remaining candidates, which will be enough to implement the rule.",
                "When candidate c is eliminated, let each of the voters whose most preferred candidate among the remaining candidates was c announce their most preferred candidate among the candidates remaining after cs elimination.",
                "If candidate c was the ith candidate to be eliminated (that is, there were m − i + 1 candidates remaining before cs elimination), it follows that at most n/(m − i + 1) voters had candidate c as their most preferred candidate among the remaining candidates, and thus the number of bits to be communicated after the elimination of the ith candidate is O((n/(m−i+1)) log m).7 Thus, the total communication in this communication protocol is O(n log m + m−1 i=1 (n/(m − i + 1)) log m).",
                "Of course, m−1 i=1 1/(m − i + 1) = m i=2 1/i, which is O(log m).",
                "Substituting into the previous expression, we find that the communication complexity is O(n(log m)2 ).",
                "Theorem 11.",
                "The nondeterministic communication complexity of the STV rule is Ω(n log m) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We omit this proof because of space constraint. 7 Actually, O((n/(m − i + 1)) log(m − i + 1)) is also correct, but it will not improve the bound.",
                "Theorem 12.",
                "The deterministic communication complexity of the approval rule is O(nm).",
                "Proof.",
                "Approving or disapproving of a candidate requires only one bit of information, so every voter can simply approve or disapprove of every candidate for a total communication of nm bits.",
                "Theorem 13.",
                "The nondeterministic communication complexity of the approval rule is Ω(nm) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We will exhibit a fooling set of size 2n m where m = m − 1 and n = (n − 1)/4.",
                "For every vector (S1, S2, . . . , Sn ) consisting of n subsets Si ⊆ C − {a}, let the following vector of votes be an element of the fooling set: • For 1 ≤ i ≤ n , let voters 4i − 3 and 4i − 2 approve Si ∪ {a}. • For 1 ≤ i ≤ n , let voters 4i − 1 and 4i approve C − (Si ∪ {a}). • Let voter 4n + 1 = n approve {a}.",
                "We observe that this fooling set has size (2m )n = 2n m , and that candidate a wins in each vector of votes in the fooling set (a is approved by 2n + 1 voters, whereas each other candidate is approved by only 2n voters).",
                "All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses.",
                "Let the first vote vector correspond to the vector (S1 1 , S1 2 , . . . , S1 n ), and let the second vote vector correspond to the vector (S2 1 , S2 2 , . . . , S2 n ).",
                "For some i, we must have S1 i = S2 i , so that either S1 i S2 i or S2 i S1 i .",
                "Without loss of generality, suppose S1 i S2 i , and let b be some candidate in S1 i − S2 i .",
                "Now, construct a new vote vector by taking votes 4i − 3 and 4i − 2 from the first vote vector, and the remaining votes from the second vote vector.",
                "In this newly constructed vote vector, a is still approved by 2n + 1 votes.",
                "However, b is approved by 2n + 2 votes, for the following reason.",
                "Whereas voters 4i−3 and 4i−2 do not approve b in the second vote vector (because b /∈ S2 i ), voters 4i − 3 and 4i − 2 do approve b in the first vote vector (because b ∈ S1 i ).",
                "It follows that bs score in the newly constructed vote vector is bs score in the second vote vector (2n ), plus two.",
                "So, a is not the winner in the newly constructed vote vector, and hence we have a correct fooling set.",
                "Interestingly, an Ω(m) lower bound can be obtained even for the problem of finding a candidate that is approved by more than one voter [20].",
                "Theorem 14.",
                "The deterministic communication complexity of the Condorcet rule is O(nm).",
                "Proof.",
                "We maintain a set of active candidates S which is initialized to C. At each stage, we choose two of the active candidates (say, the two candidates with the lowest indices), and we let each voter communicate which of the two candidates she prefers. (Such a stage requires the communication of n bits, one per voter.)",
                "The candidate preferred by fewer 84 voters (the loser of the pairwise election) is removed from S. (If the pairwise election is tied, both candidates are removed.)",
                "After at most m − 1 iterations, only one candidate is left (or zero candidates are left, in which case there is no Condorcet winner).",
                "Let a be the remaining candidate.",
                "To find out whether candidate a is the Condorcet winner, let each voter communicate, for every candidate c = a, whether she prefers a to c. (This requires the communication of at most n(m − 1) bits.)",
                "This is enough to establish whether a won each of its pairwise elections (and thus, whether a is the Condorcet winner).",
                "Theorem 15.",
                "The nondeterministic communication complexity of the Condorcet rule is Ω(nm) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We will exhibit a fooling set of size 2n m where m = m − 1 and n = (n − 1)/2.",
                "For every vector (S1, S2, . . . , Sn ) consisting of n subsets Si ⊆ C − {a}, let the following vector of votes be an element of the fooling set: • For 1 ≤ i ≤ n , let voter 2i − 1 rank the candidates Si a C − Si. • For 1 ≤ i ≤ n , let voter 2i rank the candidates C − Si a Si. • Let voter 2n +1 = n rank the candidates a C −{a}.",
                "We observe that this fooling set has size (2m )n = 2n m , and that candidate a wins in each vector of votes in the fooling set (a wins each of its pairwise elections by a single vote).",
                "All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses.",
                "Let the first vote vector correspond to the vector (S1 1 , S1 2 , . . . , S1 n ), and let the second vote vector correspond to the vector (S2 1 , S2 2 , . . . , S2 n ).",
                "For some i, we must have S1 i = S2 i , so that either S1 i S2 i or S2 i S1 i .",
                "Without loss of generality, suppose S1 i S2 i , and let b be some candidate in S1 i − S2 i .",
                "Now, construct a new vote vector by taking vote 2i − 1 from the first vote vector, and the remaining votes from the second vote vector.",
                "In this newly constructed vote vector, b wins its pairwise election against a by one vote (vote 2i − 1 ranks b above a in the newly constructed vote vector because b ∈ S1 i , whereas in the second vote vector vote 2i − 1 ranked a above b because b /∈ S2 i ).",
                "So, a is not the Condorcet winner in the newly constructed vote vector, and hence we have a correct fooling set.",
                "Theorem 16.",
                "The deterministic communication complexity of the cup rule is O(nm).",
                "Proof.",
                "Consider the following simple communication protocol.",
                "First, let all the voters communicate, for every one of the matchups in the first round, which of its two candidates they prefer.",
                "After this, the matchups for the second round are known, so let all the voters communicate which candidate they prefer in each matchup in the second round-etc.",
                "Because communicating which of two candidates is preferred requires only one bit per voter, and because there are only m − 1 matchups in total, this communication protocol requires O(nm) communication.",
                "Theorem 17.",
                "The nondeterministic communication complexity of the cup rule is Ω(nm) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We will exhibit a fooling set of size 2n m where m = (m − 1)/2 and n = (n − 7)/2.",
                "Given that m + 1 is a power of 2, so that one candidate gets a bye (that is, does not face an opponent) in the first round, let a be the candidate with the bye.",
                "Of the m first-round matchups, let lj denote the one (left) candidate in the jth matchup, and let rj be the other (right) candidate.",
                "Let L = {lj : 1 ≤ j ≤ m } and R = {rj : 1 ≤ j ≤ m }, so that C = L ∪ R ∪ {a}. . . . . . . . . . l r l r l r a m1 1 2 2 m Figure 1: The schedule for the cup rule used in the proof of Theorem 17.",
                "For every vector (S1, S2, . . . , Sn ) consisting of n subsets Si ⊆ R, let the following vector of votes be an element of the fooling set: • For 1 ≤ i ≤ n , let voter 2i − 1 rank the candidates Si L a R − Si. • For 1 ≤ i ≤ n , let voter 2i rank the candidates R − Si L a Si. • Let voters 2n +1 = n−6, 2n +2 = n−5, 2n +3 = n−4 rank the candidates L a R. • Let voters 2n + 4 = n − 3, 2n + 5 = n − 2 rank the candidates a r1 l1 r2 l2 . . . rm lm . • Let voters 2n + 6 = n − 1, 2n + 7 = n rank the candidates rm lm rm −1 lm −1 . . . r1 l1 a.",
                "We observe that this fooling set has size (2m )n = 2n m .",
                "Also, candidate a wins in each vector of votes in the fooling set, for the following reasons.",
                "Each candidate rj defeats its opponent lj in the first round. (For any 1 ≤ i ≤ n , the net effect of votes 2i − 1 and 2i on the pairwise election between rj and lj is zero; votes n − 6, n − 5, n − 4 prefer lj to rj, but votes n − 3, n − 2, n − 1, n all prefer rj to lj.)",
                "Moreover, a defeats every rj in their pairwise election. (For any 1 ≤ i ≤ n , the net effect of votes 2i − 1 and 2i on the pairwise election between a and rj is zero; votes n − 1, n prefer rj to a, but votes n − 6, n − 5, n − 4, n − 3, n − 2 all prefer a to rj.)",
                "It follows that a will defeat all the candidates that it faces.",
                "All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses.",
                "Let the first vote vector correspond to the vector 85 (S1 1 , S1 2 , . . . , S1 n ), and let the second vote vector correspond to the vector (S2 1 , S2 2 , . . . , S2 n ).",
                "For some i, we must have S1 i = S2 i , so that either S1 i S2 i or S2 i S1 i .",
                "Without loss of generality, suppose S1 i S2 i , and let rj be some candidate in S1 i − S2 i .",
                "Now, construct a new vote vector by taking vote 2i from the first vote vector, and the remaining votes from the second vote vector.",
                "We note that, whereas in the second vote vector vote 2i preferred rj to lj (because rj ∈ R−S2 i ), in the newly constructed vote vector this is no longer the case (because rj ∈ S1 i ).",
                "It follows that, whereas in the second vote vector, rj defeated lj in the first round by one vote, in the newly constructed vote vector, lj defeats rj in the first round.",
                "Thus, at least one lj advances to the second round after defeating its opponent rj.",
                "Now, we observe that in the newly constructed vote vector, any lk wins its pairwise election against any rq with q = k. This is because among the first 2n votes, at least n − 1 prefer lk to rq; votes n − 6, n − 5, n − 4 prefer lk to rq; and, because q = k, either votes n − 3, n − 2 prefer lk to rq (if k < q), or votes n − 1, n prefer lk to rq (if k > q).",
                "Thus, at least n + 4 = (n + 1)/2 > n/2 votes prefer lk to rq.",
                "Moreover, any lk wins its pairwise election against a.",
                "This is because only votes n − 3 and n − 2 prefer a to lk.",
                "It follows that, after the first round, any surviving candidate lk can only lose a matchup against another surviving lk , so that one of the lk must win the election.",
                "So, a is not the winner in the newly constructed vote vector, and hence we have a correct fooling set.",
                "Theorem 18.",
                "The deterministic communication complexity of the Bucklin rule is O(nm).",
                "Proof.",
                "Let l be the minimum integer for which there is a candidate who is ranked among the top l candidates by more than half the votes.",
                "We will do a binary search for l. At each point, we will have a lower bound lL which is smaller than l (initialized to 0), and an upper bound lH which is at least l (initialized to m).",
                "While lH − lL > 1, we continue by finding out whether (lH − l)/2 is smaller than l, after which we can update the bounds.",
                "To find out whether a number k is smaller than l, we determine every voters k most preferred candidates.",
                "Every voter can communicate which candidates are among her k most preferred candidates using m bits (for each candidate, indicate whether the candidate is among the top k or not), but because the binary search requires log m iterations, this gives us an upper bound of O((log m)nm), which is not strong enough.",
                "However, if lL < k < lH , and we already know a voters lL most preferred candidates, as well as her lH most preferred candidates, then the voter no longer needs to communicate whether the lL most preferred candidates are among her k most preferred candidates (because they must be), and she no longer needs to communicate whether the m−lH least preferred candidates are among her k most preferred candidates (because they cannot be).",
                "Thus the voter needs to communicate only m−lL −(m−lH ) = lH −lL bits in any given stage.",
                "Because each stage, lH − lL is (roughly) halved, each voter in total communicates only (roughly) m + m/2 + m/4 + . . . ≤ 2m bits.",
                "Theorem 19.",
                "The nondeterministic communication complexity of the Bucklin rule is Ω(nm) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We will exhibit a fooling set of size 2n m where m = (m−1)/2 and n = n/2.",
                "We write the set of candidates as the following disjoint union: C = {a} ∪ L ∪ R where L = {l1, l2, . . . , lm } and R = {r1, r2, . . . , rm }.",
                "For any subset S ⊆ {1, 2, . . . , m }, let L(S) = {li : i ∈ S} and let R(S) = {ri : i ∈ S}.",
                "For every vector (S1, S2, . . . , Sn ) consisting of n sets Si ⊆ {1, 2, . . . , m }, let the following vector of votes be an element of the fooling set: • For 1 ≤ i ≤ n , let voter 2i − 1 rank the candidates L(Si) R − R(Si) a L − L(Si) R(Si). • For 1 ≤ i ≤ n , let voter 2i rank the candidates L − L(Si) R(Si) a L(Si) R − R(Si).",
                "We observe that this fooling set has size (2m )n = 2n m , and that candidate a wins in each vector of votes in the fooling set, for the following reason.",
                "Each candidate in C − {a} is ranked among the top m candidates by exactly half the voters (which is not enough to win).",
                "Thus, we need to look at the voters top m +1 candidates, and a is ranked m +1th by all voters.",
                "All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses.",
                "Let the first vote vector correspond to the vector (S1 1 , S1 2 , . . . , S1 n ), and let the second vote vector correspond to the vector (S2 1 , S2 2 , . . . , S2 n ).",
                "For some i, we must have S1 i = S2 i , so that either S1 i S2 i or S2 i S1 i .",
                "Without loss of generality, suppose S1 i S2 i , and let j be some integer in S1 i − S2 i .",
                "Now, construct a new vote vector by taking vote 2i − 1 from the first vote vector, and the remaining votes from the second vote vector.",
                "In this newly constructed vote vector, a is still ranked m + 1th by all votes.",
                "However, lj is ranked among the top m candidates by n + 1 = n/2 + 1 votes.",
                "This is because whereas vote 2i − 1 does not rank lj among the top m candidates in the second vote vector (because j /∈ S2 i , we have lj /∈ L(S2 i )), vote 2i − 1 does rank lj among the top m candidates in the first vote vector (because j ∈ S1 i , we have lj ∈ L(S1 i )).",
                "So, a is not the winner in the newly constructed vote vector, and hence we have a correct fooling set.",
                "Theorem 20.",
                "The nondeterministic communication complexity of the ranked pairs rule is Ω(nm log m) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We omit this proof because of space constraint. 5.",
                "DISCUSSION One key obstacle to using voting for preference aggregation is the communication burden that an election places on the voters.",
                "By lowering this burden, it may become feasible to conduct more elections over more issues.",
                "In the limit, this could lead to a shift from representational government to a system in which most issues are decided by referenda-a veritable e-democracy.",
                "In this paper, we analyzed the communication complexity of the common voting rules.",
                "Knowing which voting rules require little communication is especially important when the issue to be voted on is of low enough importance that the following is true: the parties involved are willing to accept a rule that tends 86 to produce outcomes that are slightly less representative of the voters preferences, if this rule reduces the communication burden on the voters significantly.",
                "The following table summarizes the results we obtained.",
                "Rule Lower bound Upper bound plurality Ω(n log m) O(n log m) plurality w/ runoff Ω(n log m) O(n log m) STV Ω(n log m) O(n(log m)2) Condorcet Ω(nm) O(nm) approval Ω(nm) O(nm) Bucklin Ω(nm) O(nm) cup Ω(nm) O(nm) maximin Ω(nm) O(nm) Borda Ω(nm log m) O(nm log m) Copeland Ω(nm log m) O(nm log m) ranked pairs Ω(nm log m) O(nm log m) Communication complexity of voting rules, sorted from low to high.",
                "All of the upper bounds are deterministic (with the exception of maximin, for which the best deterministic upper bound we proved is O(nm log m)).",
                "All of the lower bounds hold even for nondeterministic communication and even just for determining whether a given candidate a is the winner.",
                "One area of future research is to study what happens when we restrict our attention to communication protocols that do not reveal any strategically useful information.",
                "This restriction may invalidate some of the upper bounds that we derived using multistage communication protocols.",
                "Also, all of our bounds are worst-case bounds.",
                "It may be possible to outperform these bounds when the distribution of votes has additional structure.",
                "When deciding which voting rule to use for an election, there are many considerations to take into account.",
                "The voting rules that we studied in this paper are the most common ones that have survived the test of time.",
                "One way to select among these rules is to consider recent results on complexity.",
                "The table above shows that from a communication complexity perspective, plurality, plurality with runoff, and STV are preferable.",
                "However, plurality has the undesirable property that it is computationally easy to manipulate by voting strategically [3, 7].",
                "Plurality with runoff is NP-hard to manipulate by a coalition of weighted voters, or by an individual that faces correlated uncertainty about the others votes [7, 6].",
                "STV is NP-hard to manipulate in those settings as well [7], but also by an individual with perfect knowledge of the others votes (when the number of candidates is unbounded) [2].",
                "Therefore, STV is more robust, although it may require slightly more worst-case communication as per the table above.",
                "Yet other selection criteria are the computational complexity of determining whether enough information has been elicited to declare a winner, and that of determining the optimal sequence of queries [8]. 6.",
                "REFERENCES [1] Lawrence Ausubel and Paul Milgrom.",
                "Ascending auctions with package bidding.",
                "Frontiers of Theoretical Economics, 1, 2002.",
                "No. 1, Article 1. [2] John Bartholdi, III and James Orlin.",
                "Single transferable vote resists strategic voting.",
                "Social Choice and Welfare, 8(4):341-354, 1991. [3] John Bartholdi, III, Craig Tovey, and Michael Trick.",
                "The computational difficulty of manipulating an election.",
                "Social Choice and Welfare, 6(3):227-241, 1989. [4] Avrim Blum, Jeffrey Jackson, Tuomas Sandholm, and Martin Zinkevich.",
                "Preference elicitation and query learning.",
                "Journal of Machine Learning Research, 5:649-667, 2004. [5] Wolfram Conen and Tuomas Sandholm.",
                "Preference elicitation in combinatorial auctions: Extended abstract.",
                "In Proceedings of the ACM Conference on Electronic Commerce (ACM-EC), pages 256-259, 2001. [6] Vincent Conitzer, Jerome Lang, and Tuomas Sandholm.",
                "How many candidates are needed to make elections hard to manipulate?",
                "In Theoretical Aspects of Rationality and Knowledge (TARK), pages 201-214, 2003. [7] Vincent Conitzer and Tuomas Sandholm.",
                "Complexity of manipulating elections with few candidates.",
                "In Proceedings of the National Conference on Artificial Intelligence (AAAI), pages 314-319, 2002. [8] Vincent Conitzer and Tuomas Sandholm.",
                "Vote elicitation: Complexity and strategy-proofness.",
                "In Proceedings of the National Conference on Artificial Intelligence (AAAI), pages 392-397, 2002. [9] Sven de Vries, James Schummer, and Rakesh V. Vohra.",
                "On ascending auctions for heterogeneous objects, 2003.",
                "Draft. [10] Allan Gibbard.",
                "Manipulation of voting schemes.",
                "Econometrica, 41:587-602, 1973. [11] Benoit Hudson and Tuomas Sandholm.",
                "Effectiveness of query types and policies for preference elicitation in combinatorial auctions.",
                "In International Conference on Autonomous Agents and Multi-Agent Systems (AAMAS), pages 386-393, 2004. [12] E Kushilevitz and N Nisan.",
                "Communication Complexity.",
                "Cambridge University Press, 1997. [13] Sebasti´en Lahaie and David Parkes.",
                "Applying learning algorithms to preference elicitation.",
                "In Proceedings of the ACM Conference on Electronic Commerce, 2004. [14] Noam Nisan and Ilya Segal.",
                "The communication requirements of efficient allocations and supporting prices.",
                "Journal of Economic Theory, 2005.",
                "Forthcoming. [15] David Parkes. iBundle: An efficient ascending price bundle auction.",
                "In Proceedings of the ACM Conference on Electronic Commerce (ACM-EC), pages 148-157, 1999. [16] Tuomas Sandholm.",
                "An implementation of the contract net protocol based on marginal cost calculations.",
                "In Proceedings of the National Conference on Artificial Intelligence (AAAI), pages 256-262, 1993. [17] Tuomas Sandholm and Craig Boutilier.",
                "Preference elicitation in combinatorial auctions.",
                "In Peter Cramton, Yoav Shoham, and Richard Steinberg, editors, Combinatorial Auctions, chapter 10.",
                "MIT Press, 2005. [18] Paolo Santi, Vincent Conitzer, and Tuomas Sandholm.",
                "Towards a characterization of polynomial preference elicitation with value queries in combinatorial auctions.",
                "In Conference on Learning Theory (COLT), pages 1-16, 2004. [19] Mark Satterthwaite.",
                "Strategy-proofness and Arrows conditions: existence and correspondence theorems for voting procedures and social welfare functions.",
                "Journal of Economic Theory, 10:187-217, 1975. [20] Ilya Segal.",
                "The communication requirements of social choice rules and supporting budget sets, 2004.",
                "Draft.",
                "Presented at the DIMACS Workshop on Computational Issues in Auction Design, Rutgers University, New Jersey, USA. [21] Peter Wurman and Michael Wellman.",
                "AkBA: A progressive, anonymous-price combinatorial auction.",
                "In Proceedings of the ACM Conference on Electronic Commerce (ACM-EC), pages 21-29, 2000. [22] A. C. Yao.",
                "Some complexity questions related to distributed computing.",
                "In Proceedings of the 11th ACM symposium on theory of computing (STOC), pages 209-213, 1979. [23] Martin Zinkevich, Avrim Blum, and Tuomas Sandholm.",
                "On polynomial-time preference elicitation with value queries.",
                "In Proceedings of the ACM Conference on Electronic Commerce (ACM-EC), pages 176-185, 2003. 87"
            ],
            "original_annotated_samples": [
                "Most of the work on reducing the communication burden in preference aggregation has focused on <br>resource allocation</br> settings such as combinatorial auctions, in which an auctioneer auctions off a number of (possibly distinct) items in a single event.",
                "Segal then uses this characterization to prove bounds on the communication required in <br>resource allocation</br> as well as matching settings [20]."
            ],
            "translated_annotated_samples": [
                "La mayor parte del trabajo sobre la reducción de la carga de comunicación en la agregación de preferencias se ha centrado en entornos de <br>asignación de recursos</br> como subastas combinatorias, en las que un subastador subasta un número de artículos (posiblemente distintos) en un solo evento.",
                "Segal luego utiliza esta caracterización para demostrar límites en la comunicación requerida en la <br>asignación de recursos</br>, así como en entornos de emparejamiento [20]."
            ],
            "translated_text": "Determinamos la complejidad de comunicación de las reglas de votación comunes. Las reglas (ordenadas por su complejidad de comunicación de baja a alta) son pluralidad, pluralidad con segunda vuelta, voto único transferible (STV), Condorcet, aprobación, Bucklin, taza, maximin, Borda, Copeland y pares clasificados. Para cada regla, primero proporcionamos un protocolo de comunicación determinista y un límite superior en la cantidad de bits comunicados en él; luego, damos un límite inferior en los requisitos de comunicación (incluso los no deterministas) de la regla de votación. Los límites coinciden para todas las reglas de votación excepto STV y maximin. Categorías y Descriptores de Asignaturas F.2 [Teoría de la Computación]: Análisis de Algoritmos y Complejidad de Problemas; J.4 [Aplicaciones Informáticas]: Ciencias Sociales y del Comportamiento-Economía Términos Generales Algoritmos, Economía, Teoría 1. INTRODUCCIÓN Un factor clave en la viabilidad de cualquier regla de agregación de preferencias es su carga de comunicación. Para agregar con éxito las preferencias de los agentes, generalmente no es necesario que todos los agentes informen toda su información de preferencias. Los protocolos inteligentes que obtienen parcial y secuencialmente las preferencias de los agentes tienen el potencial de reducir drásticamente la comunicación requerida. Esto tiene al menos las siguientes ventajas: • Puede hacer factible la agregación de preferencias en entornos donde la cantidad total de información de preferencias es demasiado grande para comunicar. • Incluso cuando comunicar toda la información de preferencias es factible, reducir los requisitos de comunicación disminuye la carga impuesta a los agentes. Esto es especialmente cierto cuando los agentes, en lugar de conocer todas sus preferencias de antemano, necesitan invertir esfuerzo (como cálculos o recopilación de información) para determinar sus preferencias. • Preserva (parte de) la privacidad de los agentes. La mayor parte del trabajo sobre la reducción de la carga de comunicación en la agregación de preferencias se ha centrado en entornos de <br>asignación de recursos</br> como subastas combinatorias, en las que un subastador subasta un número de artículos (posiblemente distintos) en un solo evento. Debido a que en una subasta combinatoria, los postores pueden tener valoraciones separadas para cada uno de un número exponencial de posibles paquetes de artículos, este es un escenario en el que reducir la carga de comunicación es especialmente crucial. Esto se puede lograr complementando al subastador con un provocador que elicitara incrementalmente partes de las preferencias de los postores según sea necesario, basándose en lo que los postores han revelado sobre sus preferencias hasta el momento, como sugieren Conen y Sandholm [5]. Por ejemplo, el solicitante puede preguntar por el valor de un postor para un paquete específico (consultas de valor), cuál de dos paquetes prefiere el postor (consultas de orden), qué paquete clasifica en la posición k o cuál es la posición de un paquete dado (consultas de clasificación), qué paquete compraría dado un vector particular de precios (consultas de demanda), etc., hasta que se pueda determinar (al menos) la asignación final. Experimentalmente, esto produce a drástico ahorro en la revelación de preferencias [11]. Además, si las funciones de valoración de los agentes provienen de ciertas subclases naturales, el problema de la obtención de información puede resolverse utilizando solo un número polinomial de consultas incluso en el peor de los casos [23, 4, 13, 18, 14]. Para una revisión de la obtención de preferencias en subastas combinatorias, consulte [17]. Las subastas combinatorias ascendentes son una forma especial conocida de obtención de preferencias, donde el encuestador realiza consultas de demanda con precios crecientes [15, 21, 1, 9]. Finalmente, los problemas de asignación de recursos 78 también han sido estudiados desde el punto de vista de la complejidad de la comunicación, derivando así límites inferiores sobre la comunicación requerida. Por ejemplo, Nisan y Segal muestran que se requiere comunicación exponencial incluso para obtener un excedente mayor al obtenido al subastar todos los objetos como un único paquete [14]. Segal también estudia reglas de elección social en general, y muestra que para una gran clase de reglas de elección social, los conjuntos de presupuesto de apoyo deben ser revelados de tal manera que si cada agente prefiere el mismo resultado en su conjunto de presupuesto, esto demuestra la optimalidad de ese resultado. Segal luego utiliza esta caracterización para demostrar límites en la comunicación requerida en la <br>asignación de recursos</br>, así como en entornos de emparejamiento [20]. En este documento, nos enfocaremos en los requisitos de comunicación de una subclase generalmente aplicable de reglas de elección social, comúnmente conocidas como reglas de votación. En un entorno de votación, hay un conjunto de resultados de candidatos sobre los cuales los votantes expresan sus preferencias al enviar un voto (normalmente, una clasificación de los candidatos), y el ganador (es decir, el resultado elegido) se determina en función de estos votos. La comunicación requerida por las reglas de votación puede ser grande ya sea porque el número de votantes es grande (como, por ejemplo, en elecciones nacionales), o porque el número de candidatos es grande (por ejemplo, los agentes pueden votar sobre asignaciones de un número de recursos), o ambos. El trabajo previo [8] ha estudiado la obtención de información en votaciones, analizando qué tan difícil es computacionalmente decidir si se puede determinar un ganador con la información obtenida hasta el momento, así como qué tan difícil es encontrar la secuencia óptima de preguntas dadas sospechas perfectas sobre las preferencias de los votantes. Además, ese artículo discute cuestiones estratégicas (teóricas de juegos) introducidas por la obtención de información. Por el contrario, en este artículo nos preocupamos por el número máximo de bits que deben comunicarse para ejecutar una regla de votación dada, cuando no se conoce de antemano las preferencias de los votantes. Determinamos la complejidad de comunicación de las reglas de votación comunes. Para cada regla, primero damos una cota superior en la complejidad de comunicación (determinística) proporcionando un protocolo de comunicación para ella y analizando cuántos bits necesitan ser transmitidos en este protocolo. (Los resultados de Segal [20] no se aplican a la mayoría de las reglas de votación porque la mayoría de las reglas de votación no son intersección-monótonas (o incluso monótonas).) Para muchas de las reglas de votación bajo estudio, resulta que no se puede hacer mejor que simplemente permitir que cada votante comunique inmediatamente toda su información (potencialmente relevante). Sin embargo, para algunas reglas (como la pluralidad con segunda vuelta, STV y taza) existe un protocolo de comunicación multietapa directo que, con un análisis detallado, se puede demostrar que supera significativamente la comunicación inmediata de toda la información (potencialmente relevante). Finalmente, para algunas reglas (como las reglas de Condorcet y Bucklin), necesitamos introducir un protocolo de comunicación más complejo para lograr el mejor límite superior posible. Para dos de las reglas que estudiamos que son intersección-monótonas, a saber, las reglas de aprobación y Condorcet, los resultados de Segal de hecho pueden ser utilizados para dar pruebas alternativas de nuestros límites inferiores. Solo proporcionamos pruebas directas para estas reglas aquí porque 1) estas pruebas directas son de las más fáciles en este documento, 2) las pruebas alternativas son no triviales incluso dados los resultados de Segal, y 3) se aplica una restricción de espacio. Sin embargo, esperamos incluir también las pruebas alternativas en una versión posterior. Después de obtener los límites superiores, demostramos que son ajustados al proporcionar límites inferiores coincidentes en la complejidad de comunicación (incluso la no determinista) de cada regla de votación. Hay dos excepciones: STV, para el cual nuestros límites superiores e inferiores difieren en un factor log m; y maximin, para el cual nuestro mejor límite superior determinístico también es un factor log m por encima del límite inferior (no determinístico), aunque proporcionamos un límite superior no determinístico que coincide con el límite inferior. 2. REVISIÓN DE LAS REGLAS DE VOTACIÓN En esta sección, revisamos las reglas de votación comunes que estudiamos en este documento. Una regla de votación es una función que asigna un vector de votos de los n votantes (es decir, preferencias sobre candidatos) a uno de los m candidatos (el ganador) en el conjunto de candidatos C. En algunos casos (como la regla de Condorcet), la regla también puede declarar que no existe un ganador. No nos preocupamos por lo que sucede en caso de un empate entre candidatos (nuestros límites inferiores se mantienen independientemente de cómo se resuelvan los empates, y los protocolos de comunicación utilizados para nuestros límites superiores no intentan romper los empates). Todas las reglas que estudiamos son reglas basadas en el rango, lo que significa que un voto se define como un ordenamiento de los candidatos (con la excepción de la regla de la pluralidad, para la cual un voto es un único candidato, y la regla de aprobación, para la cual un voto es un subconjunto de los candidatos). Consideraremos las siguientes reglas de votación. (Para reglas que definen una puntuación, el candidato con la puntuación más alta gana.) • reglas de puntuación. Sea α = α1, . . . , αm un vector de enteros tal que α1 ≥ α2 . . . ≥ αm. Para cada votante, un candidato recibe α1 puntos si es clasificado en primer lugar por el votante, α2 si es clasificado en segundo lugar, etc. La puntuación sα de un candidato es el número total de puntos que recibe el candidato. La regla de Borda es la regla de puntuación con α = m−1, m−2, . . . , 0. La regla de la pluralidad es la regla de puntuación con α = 1, 0, . . . , 0. • voto único transferible (STV). La regla avanza a través de una serie de m - 1 rondas. En cada ronda, el candidato con la puntuación de pluralidad más baja (es decir, el menor número de votantes que lo clasifican en primer lugar entre los candidatos restantes) es eliminado (y cada uno de los votos para ese candidato se transfieren al siguiente candidato restante en el orden dado en ese voto). El ganador es el último candidato restante. • mayoría con segunda vuelta. En esta regla, una primera ronda elimina a todos los candidatos excepto a los dos con las puntuaciones de pluralidad más altas. Los votos se transfieren a estos como en la regla de VST, y una segunda ronda determina al ganador de estos dos. • aprobación. Cada votante etiqueta a cada candidato como aprobado o desaprobado. El candidato aprobado por el mayor número de votantes gana. • Condorcet. Para cualquier par de candidatos i y j, sea N(i, j) el número de votantes que prefieren a i sobre j. Si hay un candidato i que es preferido por la mayoría de los votantes a cualquier otro candidato (es decir, N(i, j) > N(j, i) para todo j = i, es decir, i gana en cada elección por pares), entonces el candidato i gana. El término protocolo de votación se usa a menudo para describir el mismo concepto, pero buscamos hacer una distinción clara entre la regla que mapea las preferencias a los resultados y el protocolo de comunicación/obtención utilizado para implementar esta regla. (Simpson). El puntaje maximin de i es s(i) = minj=i N(i, j), es decir, su peor desempeño en una elección por pares. El candidato con la puntuación maximin más alta gana. • Copeland. Para cualquier par de candidatos distintos i y j, sea C(i, j) = 1 si N(i, j) > N(j, i), C(i, j) = 1/2 si N(i, j) = N(j, i) y C(i, j) = 0 si N(i, j) < N(j, i). El puntaje de Copeland del candidato i es s(i) = j=i C(i, j). • taza (comparaciones binarias secuenciales). La regla de la copa se define por un árbol binario equilibrado T con un hoja por candidato, y una asignación de candidatos a hojas (cada hoja recibe un candidato). Cada nodo no hoja se le asigna el ganador de la elección por pares de los nodos hijos; el candidato asignado a la raíz gana. • Bucklin. Para cualquier candidato i y entero l, sea B(i, l) el número de votantes que clasifican al candidato i entre los l primeros candidatos. El ganador es arg mini(min{l : B(i, l) > n/2}). Es decir, si decimos que un votante aprueba a sus l candidatos principales, entonces aumentamos repetidamente l en 1 hasta que algún candidato sea aprobado por más de la mitad de los votantes, y este candidato es el ganador. • pares clasificados. Esta regla determina un orden en todos los candidatos, y el ganador es el candidato en la parte superior de este orden. Ordena todos los pares ordenados de candidatos (i, j) por N(i, j), el número de votantes que prefieren a i sobre j. Comenzando con el par (i, j) con el mayor N(i, j), aseguramos el resultado de su elección en pareja (i j). Luego, pasamos al siguiente par y bloqueamos el resultado de su elección por pares. Continuamos bloqueando cada resultado en pares que no contradiga el orden establecido hasta el momento. Enfatizamos que estas definiciones de reglas de votación no se preocupan por cómo se obtienen los votos de los votantes; todas las reglas de votación, incluidas aquellas que se definen sugestivamente en términos de rondas, son en realidad solo funciones que asignan el vector de todos los votos de los votantes a un ganador. Sin embargo, siempre hay muchas formas diferentes de obtener los votos (o las partes relevantes de estos) de los votantes. Por ejemplo, en la regla de la pluralidad con segunda vuelta, una forma de obtener los votos es pedir a cada votante que declare su orden completo de los candidatos de antemano. Alternativamente, podemos primero pedir a cada votante que declare solo su candidato más preferido; luego, sabremos los dos candidatos en la segunda vuelta, y podemos preguntar a cada votante cuál de estos dos candidatos prefiere. Por lo tanto, distinguimos entre la regla de votación (la asignación de vectores de votos a resultados) y el protocolo de comunicación (que determina cómo se obtienen realmente las partes relevantes de los votos de los votantes). El objetivo de este documento es proporcionar protocolos de comunicación eficientes para las reglas de votación recién definidas, y demostrar que no existen protocolos de comunicación más eficientes. Es interesante notar que la elección del protocolo de comunicación puede afectar el comportamiento estratégico de los votantes. Los protocolos de comunicación de múltiples etapas pueden revelar a los votantes cierta información sobre cómo están votando los demás votantes (por ejemplo, en el protocolo de comunicación de dos etapas recién dado para la pluralidad con segunda vuelta, en la segunda etapa los votantes sabrán qué dos candidatos tienen las puntuaciones de pluralidad más altas). En general, cuando los votantes reciben esa información, puede darles incentivos para votar de manera diferente a como lo harían en un protocolo de comunicación de una sola etapa en el que todos los votantes declaran sus votos completos simultáneamente. Por supuesto, incluso el protocolo de comunicación de una sola etapa no es a prueba de estrategias para ninguna regla de votación razonable, según el teorema de Gibbard-Satterthwaite [10, 19]. Sin embargo, esto no significa que no debamos preocuparnos por agregar aún más oportunidades para el voto estratégico. De hecho, muchos de los protocolos de comunicación introducidos en este documento sí presentan oportunidades adicionales para el voto estratégico, pero no tenemos espacio para discutirlo aquí. (En trabajos anteriores [8], sí proporcionamos un ejemplo donde un protocolo de obtención de información para la regla de votación por aprobación introduce el voto estratégico, y damos principios para diseñar protocolos de obtención de información que no introduzcan problemas estratégicos). Ahora que hemos revisado las reglas de votación, pasamos a una breve revisión de la teoría de la complejidad de la comunicación. 3. REVISIÓN DE ALGUNA TEORÍA DE LA COMPLEJIDAD DE LA COMUNICACIÓN En esta sección, revisamos el modelo básico de un problema de comunicación y la técnica de límite inferior de construcción de un conjunto engañoso. (El modelo básico de un problema de comunicación se debe a Yao [22]; para obtener una visión general, consulte Kushilevitz y Nisan [12].) Cada jugador 1 ≤ i ≤ n conoce (solo) la entrada xi. Juntos, buscan calcular f(x1, x2, . . . , xn). En un protocolo determinista para calcular f, en cada etapa, uno de los jugadores anuncia (a todos los demás jugadores) un bit de información basado en su propia entrada y los bits anunciados hasta el momento. Finalmente, la comunicación termina y todos los jugadores conocen f(x1, x2, . . . , xn). El objetivo es minimizar el número de bits enviados en el peor caso (sobre todos los vectores de entrada). La complejidad de comunicación determinística de un problema es el número máximo de bits enviados en el peor caso en el mejor protocolo determinístico (correcto) para resolverlo. En un protocolo no determinista, el siguiente bit a enviar puede ser elegido de manera no determinista. Para los propósitos de este documento, consideraremos un protocolo no determinista como correcto si para cada vector de entrada, existe alguna secuencia de elecciones no deterministas que los jugadores pueden hacer para que los jugadores conozcan el valor de f cuando el protocolo termina. La complejidad de comunicación no determinista de un problema es el número máximo de bits enviados en el peor caso en el mejor protocolo no determinista (correcto) para él. Ahora estamos listos para dar la definición de un conjunto engañoso. Definición 1. Un conjunto engañoso es un conjunto de vectores de entrada {(x1 1, x1 2, . . . , x1 n), (x2 1, x2 2, . . . , x2 n), . . . , (xk 1 , xk 2 , . . . , xk n) tal que para cualquier i, f(xi 1, xi 2, . . . , xi n) = f0 para alguna constante f0, pero para cualquier i = j, existe algún vector (r1, r2, . . . , rn) ∈ {i, j}n tal que f(xr1 1 , xr2 2 , . . . , xrn n ) = f0. (Es decir, podemos mezclar las entradas de los dos vectores de entrada para obtener un vector con un valor de función diferente). Se sabe que si existe un conjunto engañoso de tamaño k, entonces log k es una cota inferior en la complejidad de la comunicación (incluso en la complejidad de la comunicación no determinista) [12]. Un protocolo a prueba de estrategias es aquel en el que es del mejor interés de los jugadores reportar sus preferencias de manera veraz. Para los propósitos de este documento, f es la regla de votación que asigna los votos al candidato ganador, y xi es el voto del votante (la información que la regla de votación requeriría del votante si no hubiera posibilidad de comunicación en múltiples etapas, es decir, el candidato más preferido (mayoría), los candidatos aprobados (aprobación), o la clasificación de todos los candidatos (todos los demás protocolos)). Sin embargo, cuando obtenemos nuestros límites inferiores, f solo significará si un candidato distinguido a gana. (Es decir, f es 1 si a gana, y 0 en caso contrario). Esto fortalecerá nuestros resultados de límite inferior (porque implica que incluso averiguar si un candidato dado gana es difícil). Por lo tanto, un conjunto engañoso en nuestro contexto es un conjunto de vectores de votos de manera que a gane (no gane) con cada uno de ellos; pero para cualquier par de vectores de votos diferentes en el conjunto, hay una forma de tomar los votos de algunos votantes del primer vector y los votos de los otros del segundo vector, de manera que a no gane (gane). Para simplificar las demostraciones de nuestros límites inferiores, hacemos suposiciones como que el número de votantes n es impar en muchas de estas demostraciones. Por lo tanto, técnicamente, no demostramos el límite inferior para los pares (número de candidatos, número de votantes) (m, n) que no cumplen con estas suposiciones (por ejemplo, si hacemos la suposición anterior, entonces técnicamente no demostramos el límite inferior para ningún par (m, n) en el que n sea par). Sin embargo, siempre demostramos el límite inferior para un conjunto representativo de pares (m, n). Por ejemplo, para cada uno de nuestros límites inferiores, sucede que para infinitos valores de m, hay infinitos valores de n tales que el límite inferior se demuestra para el par (m, n). RESULTADOS Estamos listos para presentar nuestros resultados. Para cada regla de votación, primero proporcionamos un protocolo de comunicación determinista para determinar al ganador y establecer un límite superior. Luego, damos un límite inferior en la complejidad de comunicación no determinista (incluso en la complejidad de decidir si un candidato dado gana, que es una pregunta más fácil). Los límites inferiores coinciden con los límites superiores en todos los casos excepto en dos: la regla STV (límite superior O(n(log m)2); límite inferior Ω(n log m)) y la regla maximin (límite superior O(nm log m), aunque proporcionamos un protocolo no determinista que es O(nm); límite inferior Ω(nm)). Cuando discutimos una regla de votación en la que los votantes clasifican a los candidatos, representaremos una clasificación en la que el candidato c1 está en primer lugar, c2 en segundo lugar, etc., como c1 c2 . . . cm. Una preocupación posible es que en el caso de que sean posibles los empates, puede requerir mucha comunicación verificar si un candidato específico a está entre los ganadores, pero poca comunicación para producir a uno de los ganadores. Sin embargo, todos los conjuntos de engaños que utilizamos en las demostraciones tienen la propiedad de que si a gana, entonces a es el único ganador. Por lo tanto, en estos conjuntos engañosos, si se conoce a alguno de los ganadores, entonces se sabe si a es un ganador. Por lo tanto, calcular uno de los ganadores requiere al menos tanta comunicación como verificar si a está entre los ganadores. En general, cuando un problema de comunicación permite múltiples respuestas correctas para un vector de entradas dado, esto se conoce como calcular una relación en lugar de una función [12]. Sin embargo, según lo anterior, podemos restringir nuestra atención a un subconjunto del dominio donde la regla de votación realmente es una función (de un solo valor), por lo que las técnicas de cota inferior para funciones en lugar de relaciones serán suficientes. A veces, para los propósitos de una demostración, el orden interno de un subconjunto de los candidatos no importa, y en este caso no lo especificaremos. Por ejemplo, si S = {c2, c3}, entonces c1 S c4 indica que se puede utilizar tanto la clasificación c1 c2 c3 c4 como la clasificación c1 c3 c2 c4 para la prueba. Primero damos un límite superior universal. Teorema 1. La complejidad de comunicación determinística de cualquier regla de votación basada en rangos es O(nm log m). Prueba. Este límite se logra simplemente haciendo que todos comuniquen su orden completo de los candidatos (indicar el rango de un candidato individual solo requiere O(log m) bits, por lo que cada uno de los n votantes puede simplemente indicar el rango de cada uno de los m candidatos). El siguiente lema será útil en algunas de nuestras demostraciones. Lema 1. Si m divide a n, entonces log(n!) - m log((n/m)!) ≥ n(log m - 1)/2. Prueba. Si n/m = 1 (es decir, n = m), entonces esta expresión se simplifica a log(n!). Tenemos log(n!) = n i=1 log i ≥ n x=1 log(i)dx, lo cual, utilizando integración por partes, es igual a n log n − (n − 1) > n(log n − 1) = n(log m − 1) > n(log m − 1)/2. Por lo tanto, podemos asumir que n/m ≥ 2. Observamos que log(n!) = n i=1 log i = n/m−1 i=0 m j=1 log(im+j) ≥ n/m−1 i=1 m j=1 log(im) = m n/m−1 i=1 log(im), y que m log((n/m)!) = m n/m i=1 log(i). Por lo tanto, log(n!) − m log((n/m)!) ≥ m n/m−1 i=1 log(im) − m n/m i=1 log(i) = m(( n/m−1 i=1 log(im/i))−log(n/m)) = m((n/m− 1) log m−log n+log m) = n log m−m log n. Ahora, usando el hecho de que n/m ≥ 2, tenemos m log n = n(m/n) log m(n/m) = n(m/n)(log m + log(n/m)) ≤ n(1/2)(log m + log 2). Por lo tanto, log(n!) − m log((n/m)!) ≥ n log m − m log n ≥ n log m − n(1/2)(log m + log 2) = n(log m − 1)/2. Teorema 2. La complejidad de comunicación determinística de la regla de la pluralidad es O(n log m). Prueba. Indicar a uno de los candidatos solo requiere O(log m) bits, por lo que cada votante puede simplemente indicar a su candidato más preferido. Teorema 3. La complejidad de comunicación no determinista de la regla de la pluralidad es Ω(n log m) (incluso para decidir si un candidato dado a gana). Prueba. Exhibiremos un conjunto de engaño de tamaño n ! (( n m )! )m donde n = (n−1)/2. Tomar el logaritmo de esto da como resultado log(n ! )− m log((n /m)! ), por lo que el resultado se sigue del Lema 1. El conjunto de engaño estará formado por todos los vectores de votos que cumplan las siguientes restricciones: • Para cualquier 1 ≤ i ≤ n, los votantes 2i−1 y 2i votan lo mismo. • Cada candidato recibe la misma cantidad de votos de los primeros 2n = n − 1 votantes. • El último votante (votante n) vota por a. El candidato A gana con cada uno de estos vectores de votos debido al voto adicional por A del último votante. Dado que m divide a n, veamos cuántos vectores de voto hay en el conjunto engañoso. Necesitamos distribuir n pares de votantes de manera equitativa entre m candidatos, para un total de n /m pares de votantes por candidato; y hay precisamente n ! (( n m )! )m formas de hacer esto. Todo lo que queda por demostrar es que para cualquier par de vectores de votos distintos en el conjunto engañoso, podemos hacer que cada uno de los votantes vote de acuerdo con uno de estos dos vectores de manera que un candidato pierda. Sea i un número tal que los dos vectores de voto discrepan en el candidato por el cual votan los votantes 2i − 1 y 2i. Sin pérdida de generalidad, supongamos que en el primer vector de votos, estos votantes no votan por a (sino por algún otro candidato, b, en su lugar). Ahora, construye un nuevo vector de votos tomando los votos 2i − 1 y 2i del primer vector de votos, y los votos restantes del segundo vector de votos. Entonces, b recibe 2n /m + 2 votos en este vector de votación recién construido, mientras que a recibe como máximo 2n /m+1 votos. Por lo tanto, a no es el ganador en el vector de votación recién construido, y por lo tanto tenemos un conjunto de engaño correcto. Teorema 4. La complejidad de comunicación determinística de la regla de pluralidad con segunda vuelta es O(n log m). Prueba. Primero, permita que cada votante indique a su candidato más preferido usando log m bits. Después de esto, se conocen los dos candidatos en la segunda vuelta, y cada votante puede indicar cuál prefiere usando un solo bit adicional. Teorema 5. La complejidad de comunicación no determinista de la pluralidad con la regla de desempate es Ω(n log m) (incluso para decidir si un candidato dado a gana). Prueba. Exhibiremos un conjunto de engaño de tamaño n ! (( n m )! )m donde m = m/2 y n = (n − 2)/4. Tomar el logaritmo de esto da como resultado log(n !) − m log((n /m )! ), por lo que el resultado se sigue del Lema 1. Divide a los candidatos en m pares: (c1, d1), (c2, d2), . . . , (cm , dm ) donde c1 = a y d1 = b. El conjunto de engaño estará formado por todos los vectores de votos que satisfacen las siguientes restricciones: • Para cualquier 1 ≤ i ≤ n, los votantes 4i − 3 y 4i − 2 clasifican a los candidatos ck(i) a C − {a, ck(i)}, para algún candidato ck(i). (Si ck(i) = a, entonces el voto es simplemente a C − {a}.) • Para cualquier 1 ≤ i ≤ n, los votantes 4i − 1 y 4i clasifican a los candidatos dk(i) a C − {a, dk(i)} (es decir, su candidato más preferido es el candidato que está emparejado con el candidato por el que votaron los dos votantes anteriores). Una prueba intuitiva de esto es la siguiente. Podemos contar el número de permutaciones de n elementos de la siguiente manera. Primero, divide los elementos en m cubetas de tamaño n / m, de modo que si x se coloca en una cubeta de índice inferior a y, entonces x se indexará más bajo en la permutación final. Luego, decide la permutación dentro de cada cubeta (para la cual hay (n / m)! opciones por cubeta). Se deduce que n! es igual al número de formas de dividir n elementos en m contenedores de tamaño n/m, multiplicado por ((n/m)!)^m. • Cada candidato está clasificado en la parte superior de igual cantidad de los primeros 4n = n − 2 votos. • El votante 4n + 1 = n−1 clasifica a los candidatos a C−{a}. • El votante 4n + 2 = n clasifica a los candidatos b C − {b}. El candidato a gana con cada uno de estos vectores de voto: debido a los dos últimos votos, los candidatos a y b están un voto por delante de todos los demás candidatos y avanzan a la segunda vuelta, y en este punto todos los votos que tenían a otro candidato clasificado en primer lugar se transfieren a a, de modo que a gana la segunda vuelta. Dado que m divide a n, veamos cuántos vectores de voto hay en el conjunto engañoso. Necesitamos distribuir n grupos de cuatro votantes de manera equitativa entre los m pares de candidatos, y (como en la demostración del Teorema 3) hay n ! (( n m )! )m formas de hacerlo. Todo lo que queda por demostrar es que para cualquier par de vectores de votos distintos en el conjunto de engaño, podemos hacer que cada uno de los votantes vote de acuerdo con uno de estos dos vectores de tal manera que a pierda. Sea i un número tal que ck(i) no sea el mismo en ambos de estos dos vectores de votos, es decir, c1 k(i) (ck(i) en el primer vector de votos) no es igual a c2 k(i) (ck(i) en el segundo vector de votos). Sin pérdida de generalidad, supongamos que c1 k(i) = a. Ahora, construye un nuevo vector de votos tomando los votos 4i − 3, 4i − 2, 4i − 1, 4i del primer vector de votos, y los votos restantes del segundo vector de votos. En este nuevo vector de voto construido, c1 k(i) y d1 k(i) reciben cada uno 4n /m+2 votos en la primera ronda, mientras que a recibe como máximo 4n /m+1 votos. Por lo tanto, a no continúa hasta la segunda vuelta en el nuevo vector de votación construido, y por lo tanto tenemos un conjunto de engaño correcto. Teorema 6. La complejidad de comunicación no determinista de la regla de Borda es Ω(nm log m) (incluso para decidir si un candidato dado a gana). Prueba. Exhibiremos un conjunto de engaño de tamaño (m ! )n donde m = m−2 y n = (n−2)/4. Esto demostrará el teorema porque m ! es Ω(m log m), por lo que log((m ! )n ) = n log(m !) es Ω(nm log m). Para cada vector (π1, π2, . . . , πn) que consiste en n ordenamientos de todos los candidatos excepto a y otro candidato fijo b (técnicamente, los ordenamientos toman la forma de una función biunívoca πi: {1, 2, . . . , m} → C − {a, b} con πi(j) = c indicando que el candidato c es el j-ésimo en el orden representado por πi), deja que el siguiente vector de votos sea un elemento del conjunto engañoso: • Para 1 ≤ i ≤ n, deja que los votantes 4i − 3 y 4i − 2 clasifiquen a los candidatos a b πi(1) πi(2) . . . πi(m). • Para 1 ≤ i ≤ n, deja que los votantes 4i − 1 y 4i clasifiquen a los candidatos πi(m) πi(m − 1) . . . πi(1) b a. • Deja que el votante 4n + 1 = n − 1 clasifique a los candidatos a b π0(1) π0(2) . . . π0(m) (donde π0 es un orden arbitrario de los candidatos excepto a y b que es el mismo para cada elemento del conjunto engañoso). • Deja que el votante 4n + 2 = n clasifique a los candidatos π0(m) π0(m − 1) . . . π0(1) a b. Observamos que este conjunto engañoso tiene un tamaño de (m!)n, y que el candidato a gana en cada vector de votos en el conjunto engañoso (para ver por qué, observamos que para cualquier 1 ≤ i ≤ n, los votos 4i-3 y 4i-2 clasifican a los candidatos de manera exactamente opuesta a los votos 4i-1 y 4i, lo que bajo la regla de Borda significa que se cancelan entre sí; y los dos últimos votos dan un punto más a a que a cualquier otro candidato, además de b que recibe dos puntos menos que a). Todo lo que queda por demostrar es que para cualquier par de vectores de votos distintos en el conjunto de engaño, podemos hacer que cada uno de los votantes vote de acuerdo con uno de estos dos vectores de tal manera que a pierda. Que el primer vector de votos corresponda al vector (π1 1, π1 2, . . . , π1 n), y que el segundo vector de votos corresponda al vector (π2 1, π2 2, . . . , π2 n). Para algunos i, debemos tener π1 i = π2 i, de modo que para algún candidato c /∈ {a, b}, (π1 i )−1 (c) < (π2 i )−1 (c) (es decir, c está clasificado más alto en π1 i que en π2 i). Ahora, construye un nuevo vector de votos tomando los votos 4i−3 y 4i−2 del primer vector de votos, y los votos restantes del segundo vector de votos, ya que la puntuación de Borda permanece sin cambios. Sin embargo, debido a que c está clasificado más alto en π1 i que en π2 i , c recibe al menos 2 puntos más de los votos 4i−3 y 4i − 2 en el vector de votos recién construido que en el segundo vector de votos. Se deduce que c tiene una puntuación de Borda más alta que a en el vector de voto recién construido. Por lo tanto, a no es el ganador en el vector de votación recién construido, y por lo tanto tenemos un conjunto de engaño correcto. Teorema 7. La complejidad de comunicación no determinista de la regla de Copeland es Ω(nm log m) (incluso para decidir si un candidato dado a gana). Prueba. Exhibiremos un conjunto de engaño de tamaño (m ! )n donde m = (m − 2)/2 y n = (n − 2)/2. Esto demostrará el teorema porque m ! es Ω(m log m), por lo que log((m ! )n ) = n log(m !) es Ω(nm log m). Escribimos el conjunto de candidatos como la siguiente unión disjunta: C = {a, b} ∪ L ∪ R donde L = {l1, l2, . . . , lm } y R = {r1, r2, . . . , rm }. Para cada vector (π1, π2, . . . , πn) que consiste en n permutaciones de los enteros del 1 al m (πi: {1, 2, . . . , m} → {1, 2, . . . , m}), deja que el siguiente vector de votos sea un elemento del conjunto engañoso: • Para 1 ≤ i ≤ n, deja que el votante 2i − 1 clasifique a los candidatos a b lπi(1) rπi(1) lπi(2) rπi(2) . . . lπi(m) rπi(m). • Para 1 ≤ i ≤ n, deja que el votante 2i clasifique a los candidatos rπi(m) lπi(m) rπi(m −1) lπi(m −1) . . . rπi(1) lπi(1) b a. • Deja que el votante n − 1 = 2n + 1 clasifique a los candidatos a b l1 r1 l2 r2 . . . lm rm. • Deja que el votante n = 2n + 2 clasifique a los candidatos rm lm rm −1 lm −1 . . . r1 l1 a b. Observamos que este conjunto engañoso tiene tamaño (m ! )n, y que el candidato a gana en cada vector de votos en el conjunto engañoso (cada par de candidatos está empatado en su elección por pares, con la excepción de que a vence a b, de modo que a gana la elección por medio punto). Todo lo que queda por demostrar es que para cualquier par de vectores de votos distintos en el conjunto de engaño, podemos hacer que cada uno de los votantes vote de acuerdo con uno de estos dos vectores de tal manera que a pierda. Que el primer vector de votos corresponda al vector (π1 1, π1 2, . . . , π1 n), y que el segundo vector de votos corresponda al vector (π2 1, π2 2, . . . , π2 n). Para algunos i, debemos tener π1 i = π2 i, de modo que para algún j ∈ {1, 2, . . . , m}, tengamos (π1 i)−1 (j) < (π2 i)−1 (j). Ahora, construye un nuevo vector de votos tomando el voto 2i−1 del primer vector de votos, y los votos restantes del segundo vector de votos, ya que la puntuación de Copeland permanece sin cambios. Consideremos la puntuación de lj. Primero observamos que el rango de lj en el voto 2i − 1 en el vector de voto recién construido es al menos 2 más alto que en el segundo vector de voto, porque (π1 i )−1 (j) < (π2 i )−1 (j). Que D1 (lj) sea el conjunto de candidatos en L ∪ R que el votante 2i − 1 clasificó por debajo de lj en el primer vector de votos (D1 (lj) = {c ∈ L ∪ R : lj 1 2i−1 c}), y que D2 (lj) sea el conjunto de candidatos en L ∪ R que el votante 2i − 1 clasificó por debajo de lj en el segundo vector de votos (D2 (lj) = {c ∈ L ∪ R : lj 2 2i−1 c}). Entonces, se deduce que en el vector de voto recién construido, lj vence a todos los candidatos en D1 (lj) - D2 (lj) en sus elecciones de a pares (porque lj recibe un voto adicional en cada una de estas elecciones de a pares en comparación con el segundo vector de voto), y pierde contra todos los candidatos en D2 (lj) - D1 (lj) (porque lj pierde un voto en cada una de estas elecciones de a pares en comparación con el segundo vector de voto), y empata con todos los demás. Pero |D1 (lj)| − |D2 (lj)| ≥ 2, y por lo tanto |D1 (lj) − D2 (lj)| − |D2 (lj) − D1 (lj)| ≥ 2. Por lo tanto, en el vector de votos recién construido, lj tiene al menos dos victorias más en parejas que derrotas en parejas, y por lo tanto tiene al menos 1 punto más que si lj hubiera empatado todas sus elecciones en pareja. Por lo tanto, lj tiene una puntuación de Copeland más alta que a en el nuevo vector de voto construido. Por lo tanto, a no es el ganador en el vector de votación recién construido, y por lo tanto tenemos un conjunto de engaño correcto. Teorema 8. La complejidad de comunicación no determinística de la regla maximin es O(nm). Prueba. El protocolo no determinista adivinará cuál candidato w es el ganador, y, para cada otro candidato c, cuál es el candidato o(c) contra el cual c recibe su puntuación más baja en una elección por pares. Entonces, que cada votante comunique lo siguiente: • para cada candidato c = w, si prefiere a c sobre w; • para cada candidato c = w, si prefiere a c sobre o(c). Observamos que esto requiere la comunicación de 2n(m− 1) bits. Si las suposiciones fueran correctas, entonces, dejando que N(d, e) sea el número de votantes que prefieren al candidato d sobre el candidato e, deberíamos tener N(c, o(c)) < N(w, c) para cualquier c = w, c = w, lo cual demostrará que w gana la elección. Teorema 9. La complejidad de comunicación no determinista de la regla maximin es Ω(nm) (incluso para decidir si un candidato dado a gana). Prueba. Exhibiremos un conjunto de engaño de tamaño 2n m donde m = m − 2 y n = (n − 1)/4. Que b sea un candidato distinto de a. Para cada vector (S1, S2, . . . , Sn) que consiste en n subconjuntos Si ⊆ C − {a, b}, deja que el siguiente vector de votos sea un elemento del conjunto engañoso: • Para 1 ≤ i ≤ n, deja que los votantes 4i − 3 y 4i − 2 clasifiquen a los candidatos Si a C − (Si ∪ {a, b}) b. • Para 1 ≤ i ≤ n, deja que los votantes 4i − 1 y 4i clasifiquen a los candidatos b C − (Si ∪ {a, b}) a Si. • Deja que el votante 4n + 1 = n clasifique a los candidatos a b C − {a, b}. Observamos que este conjunto engañoso tiene un tamaño de (2m )n = 2n m, y que el candidato a gana en cada vector de votos en el conjunto engañoso (en cada una de las elecciones por pares, a es clasificado más alto que su oponente por 2n +1 = (n+1)/2 > n/2 votos). Todo lo que queda por demostrar es que para cualquier par de vectores de votos distintos en el conjunto de engaño, podemos hacer que cada uno de los votantes vote de acuerdo con uno de estos dos vectores de tal manera que a pierda. Que el primer vector de votos corresponda al vector (S1 1 , S1 2 , . . . , S1 n ), y que el segundo vector de votos corresponda al vector (S2 1 , S2 2 , . . . , S2 n ). Para algunos i, debemos tener S1 i = S2 i, de modo que ya sea S1 i S2 i o S2 i S1 i. Sin pérdida de generalidad, supongamos que S1 i S2 i , y sea c algún candidato en S1 i − S2 i. Ahora, construye un nuevo vector de votos tomando los votos 4i − 3 y 4i − 2 del primer vector de votos, y los votos restantes del segundo vector de votos. En este nuevo vector de votación construido, a es clasificado más alto que c por solo 2n - 1 votantes, por la siguiente razón. Mientras que los votantes 4i−3 y 4i − 2 no clasifican a c por encima de a en el segundo vector de votos (porque c /∈ S2 i ), los votantes 4i − 3 y 4i − 2 sí clasifican a c por encima de a en el primer vector de votos (porque c ∈ S1 i ). Además, en cada una de las elecciones por pares de b, b es clasificado más alto que su oponente por al menos 2n votantes. Entonces, a tiene una puntuación maximin más baja que b, por lo tanto a no es el ganador en el vector de voto recién construido, y por lo tanto tenemos un conjunto de engaño correcto. Teorema 10. La complejidad de comunicación determinística de la regla STV es O(n(log m)2). Prueba. Considera el siguiente protocolo de comunicación. Que cada votante primero anuncie a su candidato más preferido (comunicación O(n log m)). En las rondas restantes, haremos un seguimiento del candidato más preferido de cada votante entre los candidatos restantes, lo cual será suficiente para implementar la regla. Cuando se elimina al candidato c, permita que cada uno de los votantes cuyo candidato más preferido entre los candidatos restantes era c anuncie su candidato más preferido entre los candidatos restantes después de la eliminación de c. Si el candidato c fue el candidato i-ésimo en ser eliminado (es decir, quedaban m − i + 1 candidatos antes de la eliminación de c), se sigue que como máximo n/(m − i + 1) votantes tenían al candidato c como su candidato más preferido entre los candidatos restantes, y por lo tanto, el número de bits a comunicar después de la eliminación del candidato i es O((n/(m−i+1)) log m). Así, la comunicación total en este protocolo de comunicación es O(n log m + m−1 i=1 (n/(m − i + 1)) log m). Por supuesto, m−1 i=1 1/(m − i + 1) = m i=2 1/i, lo cual es O(log m). Sustituyendo en la expresión anterior, encontramos que la complejidad de comunicación es O(n(log m)2). Teorema 11. La complejidad de comunicación no determinística de la regla STV es Ω(n log m) (incluso para decidir si un candidato dado a gana). Prueba. Omitimos esta prueba debido a la restricción de espacio. De hecho, O((n/(m − i + 1)) log(m − i + 1)) también es correcto, pero no mejorará el límite. Teorema 12. La complejidad de comunicación determinística de la regla de aprobación es O(nm). Prueba. Aprobar o desaprobar a un candidato solo requiere un bit de información, por lo que cada votante puede simplemente aprobar o desaprobar a cada candidato para una comunicación total de nm bits. Teorema 13. La complejidad de comunicación no determinista de la regla de aprobación es Ω(nm) (incluso para decidir si un candidato dado a gana). Prueba. Exhibiremos un conjunto de engaño de tamaño 2n m donde m = m − 1 y n = (n − 1)/4. Para cada vector (S1, S2, . . . , Sn) que consiste en n subconjuntos Si ⊆ C - {a}, deja que el siguiente vector de votos sea un elemento del conjunto engañoso: • Para 1 ≤ i ≤ n, deja que los votantes 4i - 3 y 4i - 2 aprueben Si ∪ {a}. • Para 1 ≤ i ≤ n, deja que los votantes 4i - 1 y 4i aprueben C - (Si ∪ {a}). • Deja que el votante 4n + 1 = n apruebe {a}. Observamos que este conjunto engañoso tiene un tamaño de (2m )n = 2n m, y que el candidato a gana en cada vector de votos en el conjunto engañoso (a es aprobado por 2n + 1 votantes, mientras que cada otro candidato es aprobado solo por 2n votantes). Todo lo que queda por demostrar es que para cualquier par de vectores de votos distintos en el conjunto de engaño, podemos hacer que cada uno de los votantes vote de acuerdo con uno de estos dos vectores de tal manera que a pierda. Que el primer vector de votos corresponda al vector (S1 1 , S1 2 , . . . , S1 n ), y que el segundo vector de votos corresponda al vector (S2 1 , S2 2 , . . . , S2 n ). Para algunos i, debemos tener S1 i = S2 i, de modo que ya sea S1 i S2 i o S2 i S1 i. Sin pérdida de generalidad, supongamos que S1 i S2 i , y sea b algún candidato en S1 i − S2 i. Ahora, construye un nuevo vector de votos tomando los votos 4i − 3 y 4i − 2 del primer vector de votos, y los votos restantes del segundo vector de votos. En este nuevo vector de votación construido, a sigue siendo aprobado por 2n + 1 votos. Sin embargo, b es aprobado por 2n + 2 votos, por la siguiente razón. Mientras que los votantes 4i−3 y 4i−2 no aprueban b en el segundo vector de votación (porque b /∈ S2 i), los votantes 4i−3 y 4i−2 sí aprueban b en el primer vector de votación (porque b ∈ S1 i). Se deduce que la puntuación bs en el vector de voto recién construido es la puntuación bs en el segundo vector de voto (2n), más dos. Por lo tanto, a no es el ganador en el vector de votación recién construido, y por lo tanto tenemos un conjunto de engaño correcto. Curiosamente, se puede obtener un límite inferior de Ω(m) incluso para el problema de encontrar un candidato que sea aprobado por más de un votante [20]. Teorema 14. La complejidad de comunicación determinística de la regla de Condorcet es O(nm). Prueba. Mantenemos un conjunto de candidatos activos S que se inicializa en C. En cada etapa, elegimos dos de los candidatos activos (digamos, los dos candidatos con los índices más bajos), y permitimos que cada votante comunique cuál de los dos candidatos prefiere. (Tal etapa requiere la comunicación de n bits, uno por votante). El candidato preferido por menos de 84 votantes (el perdedor de la elección por pares) es eliminado de S. (Si la elección por pares está empatada, ambos candidatos son eliminados). Después de un máximo de m - 1 iteraciones, solo queda un candidato (o no queda ningún candidato, en cuyo caso no hay un ganador de Condorcet). Que a sea el candidato restante. Para averiguar si el candidato a es el ganador de Condorcet, permita que cada votante comunique, para cada candidato c = a, si prefiere a a c. (Esto requiere la comunicación de como máximo n(m − 1) bits). Esto es suficiente para determinar si a ganó cada una de sus elecciones por pares (y por lo tanto, si a es el ganador de Condorcet). Teorema 15. La complejidad de comunicación no determinística de la regla de Condorcet es Ω(nm) (incluso para decidir si un candidato dado a gana). Prueba. Exhibiremos un conjunto de engaño de tamaño 2n m donde m = m − 1 y n = (n − 1)/2. Para cada vector (S1, S2, . . . , Sn) que consiste en n subconjuntos Si ⊆ C − {a}, deja que el siguiente vector de votos sea un elemento del conjunto engañoso: • Para 1 ≤ i ≤ n, deja que el votante 2i − 1 clasifique a los candidatos Si a C − Si. • Para 1 ≤ i ≤ n, deja que el votante 2i clasifique a los candidatos C − Si a Si. • Deja que el votante 2n + 1 = n clasifique a los candidatos a C − {a}. Observamos que este conjunto engañoso tiene tamaño (2m )n = 2n m , y que el candidato a gana en cada vector de votos en el conjunto engañoso (a gana cada una de sus elecciones por parejas por un solo voto). Todo lo que queda por demostrar es que para cualquier par de vectores de votos distintos en el conjunto de engaño, podemos hacer que cada uno de los votantes vote de acuerdo con uno de estos dos vectores de tal manera que a pierda. Que el primer vector de votos corresponda al vector (S1 1 , S1 2 , . . . , S1 n ), y que el segundo vector de votos corresponda al vector (S2 1 , S2 2 , . . . , S2 n ). Para algunos i, debemos tener S1 i = S2 i, de modo que ya sea S1 i S2 i o S2 i S1 i. Sin pérdida de generalidad, supongamos que S1 i S2 i , y sea b algún candidato en S1 i − S2 i. Ahora, construye un nuevo vector de votos tomando el voto 2i − 1 del primer vector de votos y los votos restantes del segundo vector de votos. En este nuevo vector de votos construido, b gana su elección por pares contra a por un voto (el voto 2i − 1 coloca a b por encima de a en el nuevo vector de votos construido porque b ∈ S1 i, mientras que en el segundo vector de votos el voto 2i − 1 colocó a a por encima de b porque b /∈ S2 i). Por lo tanto, a no es el ganador de Condorcet en el vector de votación recién construido, y por lo tanto tenemos un conjunto de engaño correcto. Teorema 16. La complejidad de comunicación determinística de la regla de la taza es O(nm). Prueba. Considera el siguiente protocolo de comunicación simple. Primero, permitamos que todos los votantes se comuniquen, para cada uno de los enfrentamientos en la primera ronda, cuál de los dos candidatos prefieren. Después de esto, se conocen los emparejamientos para la segunda ronda, así que permitan que todos los votantes comuniquen qué candidato prefieren en cada emparejamiento en la segunda ronda, etc. Dado que comunicar cuál de los dos candidatos es preferido solo requiere un bit por votante, y dado que solo hay m − 1 enfrentamientos en total, este protocolo de comunicación requiere O(nm) comunicación. Teorema 17. La complejidad de comunicación no determinista de la regla de la copa es Ω(nm) (incluso para decidir si un candidato dado a gana). Prueba. Exhibiremos un conjunto engañoso de tamaño 2n m donde m = (m − 1)/2 y n = (n − 7)/2. Dado que m + 1 es una potencia de 2, de modo que un candidato recibe un pase (es decir, no se enfrenta a un oponente) en la primera ronda, sea a el candidato con el pase. De los emparejamientos de la primera ronda, dejemos que lj denote al candidato de la izquierda en el j-ésimo enfrentamiento, y dejemos que rj sea el otro candidato de la derecha. Sea L = {lj : 1 ≤ j ≤ m} y R = {rj : 1 ≤ j ≤ m}, de modo que C = L ∪ R ∪ {a}. . . . . . . . . . l r l r l r a m1 1 2 2 m Figura 1: El horario para la regla de la copa utilizada en la demostración del Teorema 17. Para cada vector (S1, S2, . . . , Sn) que consiste en n subconjuntos Si ⊆ R, dejemos que el siguiente vector de votos sea un elemento del conjunto engañoso: • Para 1 ≤ i ≤ n, dejemos que el votante 2i − 1 clasifique a los candidatos Si L a R − Si. • Para 1 ≤ i ≤ n, dejemos que el votante 2i clasifique a los candidatos R − Si L a Si. • Dejemos que los votantes 2n +1 = n−6, 2n +2 = n−5, 2n +3 = n−4 clasifiquen a los candidatos L a R. • Dejemos que los votantes 2n + 4 = n − 3, 2n + 5 = n − 2 clasifiquen a los candidatos a r1 l1 r2 l2 . . . rm lm. • Dejemos que los votantes 2n + 6 = n − 1, 2n + 7 = n clasifiquen a los candidatos rm lm rm −1 lm −1 . . . r1 l1 a. Observamos que este conjunto de engaño tiene tamaño (2m )n = 2n m. Además, el candidato a gana en cada vector de votos en el conjunto engañoso, por las siguientes razones. Cada candidato rj derrota a su oponente lj en la primera ronda. (Para cualquier 1 ≤ i ≤ n, el efecto neto de los votos 2i − 1 y 2i en la elección entre rj y lj es cero; los votos n − 6, n − 5, n − 4 prefieren a lj sobre rj, pero los votos n − 3, n − 2, n − 1, n prefieren a rj sobre lj). Además, a vence a cada rj en su elección por pares. (Para cualquier 1 ≤ i ≤ n, el efecto neto de los votos 2i − 1 y 2i en la elección por pares entre a y rj es cero; los votos n − 1, n prefieren a rj sobre a, pero los votos n − 6, n − 5, n − 4, n − 3, n − 2 todos prefieren a a rj.) Se deduce que una vencerá a todos los candidatos a los que se enfrente. Todo lo que queda por demostrar es que para cualquier par de vectores de votos distintos en el conjunto de engaño, podemos hacer que cada uno de los votantes vote de acuerdo con uno de estos dos vectores de tal manera que a pierda. Que el primer vector de votos corresponda al vector 85 (S1 1 , S1 2 , . . . , S1 n ), y que el segundo vector de votos corresponda al vector (S2 1 , S2 2 , . . . , S2 n ). Para algunos i, debemos tener S1 i = S2 i, de modo que sea S1 i S2 i o S2 i S1 i. Sin pérdida de generalidad, supongamos que S1 i S2 i , y dejemos que rj sea algún candidato en S1 i − S2 i. Ahora, construye un nuevo vector de votos tomando el voto 2i del primer vector de votos y los votos restantes del segundo vector de votos. Observamos que, mientras que en el segundo vector de votos el voto 2i prefirió a rj sobre lj (porque rj ∈ R−S2 i), en el nuevo vector de votos construido esto ya no es el caso (porque rj ∈ S1 i). Se deduce que, mientras que en el segundo vector de votos, rj venció a lj en la primera ronda por un voto, en el nuevo vector de votos construido, lj vence a rj en la primera ronda. Por lo tanto, al menos un lj avanza a la segunda ronda después de derrotar a su oponente rj. Ahora observamos que en el vector de votos recién construido, cualquier lk gana su elección de a pares contra cualquier rq con q = k. Esto se debe a que entre los primeros 2n votos, al menos n − 1 prefieren lk a rq; los votos n − 6, n − 5, n − 4 prefieren lk a rq; y, porque q = k, ya sea que los votos n − 3, n − 2 prefieran lk a rq (si k < q), o los votos n − 1, n prefieran lk a rq (si k > q). Por lo tanto, al menos n + 4 = (n + 1)/2 > n/2 votos prefieren lk a rq. Además, cualquier lk gana su elección de a uno a uno. Esto se debe a que solo los votos n − 3 y n − 2 prefieren a a lk. Se deduce que, después de la primera ronda, cualquier candidato superviviente lk solo puede perder un enfrentamiento contra otro candidato superviviente lk, por lo que uno de los lk debe ganar la elección. Por lo tanto, a no es el ganador en el vector de votación recién construido, y por lo tanto tenemos un conjunto de engaño correcto. Teorema 18. La complejidad de comunicación determinística de la regla de Bucklin es O(nm). Prueba. Sea l el entero mínimo para el cual hay un candidato que está clasificado entre los primeros l candidatos por más de la mitad de los votos. Realizaremos una búsqueda binaria para l. En cada punto, tendremos un límite inferior lL que es menor que l (inicializado en 0), y un límite superior lH que es al menos l (inicializado en m). Mientras que lH − lL > 1, continuamos averiguando si (lH − l)/2 es menor que l, después de lo cual podemos actualizar los límites. Para averiguar si un número k es menor que l, determinamos los candidatos más preferidos de cada votante k. Cada votante puede comunicar cuáles candidatos se encuentran entre sus k candidatos más preferidos usando m bits (para cada candidato, indicar si el candidato está entre los primeros k o no), pero debido a que la búsqueda binaria requiere log m iteraciones, esto nos da un límite superior de O((log m)nm), que no es lo suficientemente fuerte. Sin embargo, si lL < k < lH, y ya conocemos los candidatos más preferidos de un votante lL, así como sus candidatos más preferidos de lH, entonces el votante ya no necesita comunicar si los candidatos más preferidos de lL están entre sus k candidatos más preferidos (porque deben estarlo), y ya no necesita comunicar si los m−lH candidatos menos preferidos están entre sus k candidatos más preferidos (porque no pueden estarlo). Por lo tanto, el votante solo necesita comunicar lH −lL bits en cualquier etapa dada. Debido a que en cada etapa, lH − lL se reduce a la mitad (aproximadamente), cada votante en total comunica solo (aproximadamente) m + m/2 + m/4 + . . . ≤ 2m bits. Teorema 19. La complejidad de comunicación no determinista de la regla de Bucklin es Ω(nm) (incluso para decidir si un candidato dado a gana). Prueba. Exhibiremos un conjunto de engaño de tamaño 2n m donde m = (m−1)/2 y n = n/2. Escribimos el conjunto de candidatos como la siguiente unión disjunta: C = {a} ∪ L ∪ R donde L = {l1, l2, . . . , lm } y R = {r1, r2, . . . , rm }. Para cualquier subconjunto S ⊆ {1, 2, . . . , m}, sea L(S) = {li : i ∈ S} y sea R(S) = {ri : i ∈ S}. Para cada vector (S1, S2, . . . , Sn) que consiste en n conjuntos Si ⊆ {1, 2, . . . , m}, dejemos que el siguiente vector de votos sea un elemento del conjunto engañoso: • Para 1 ≤ i ≤ n, dejemos que el votante 2i − 1 clasifique a los candidatos L(Si) R − R(Si) a L − L(Si) R(Si). • Para 1 ≤ i ≤ n, dejemos que el votante 2i clasifique a los candidatos L − L(Si) R(Si) a L(Si) R − R(Si). Observamos que este conjunto engañoso tiene tamaño (2m )n = 2n m, y que el candidato a gana en cada vector de votos en el conjunto engañoso, por la siguiente razón. Cada candidato en C − {a} está clasificado entre los mejores m candidatos por exactamente la mitad de los votantes (lo cual no es suficiente para ganar). Por lo tanto, necesitamos analizar a los m +1 candidatos principales de los votantes, y a es clasificado en el puesto m +1 por todos los votantes. Todo lo que queda por demostrar es que para cualquier par de vectores de votos distintos en el conjunto de engaño, podemos hacer que cada uno de los votantes vote de acuerdo con uno de estos dos vectores de tal manera que a pierda. Que el primer vector de votos corresponda al vector (S1 1 , S1 2 , . . . , S1 n ), y que el segundo vector de votos corresponda al vector (S2 1 , S2 2 , . . . , S2 n ). Para algunos i, debemos tener S1 i = S2 i, de modo que sea S1 i S2 i o S2 i S1 i. Sin pérdida de generalidad, supongamos que S1 i S2 i , y sea j algún entero en S1 i − S2 i. Ahora, construye un nuevo vector de votos tomando el voto 2i − 1 del primer vector de votos, y los votos restantes del segundo vector de votos. En este nuevo vector de votos construido, a sigue siendo clasificado en el m + 1-ésimo lugar por todos los votos. Sin embargo, lj está clasificado entre los mejores m candidatos por n + 1 = n/2 + 1 votos. Esto se debe a que mientras que el voto 2i − 1 no clasifica a lj entre los m mejores candidatos en el segundo vector de votos (porque j /∈ S2 i , tenemos que lj /∈ L(S2 i )), el voto 2i − 1 sí clasifica a lj entre los m mejores candidatos en el primer vector de votos (porque j ∈ S1 i , tenemos que lj ∈ L(S1 i )). Por lo tanto, a no es el ganador en el vector de votación recién construido, y por lo tanto tenemos un conjunto de engaño correcto. Teorema 20. La complejidad de comunicación no determinista de la regla de pares clasificados es Ω(nm log m) (incluso para decidir si un candidato dado a gana). Prueba. Omitimos esta prueba debido a limitaciones de espacio. 5. DISCUSIÓN Un obstáculo clave para utilizar la votación como método de agregación de preferencias es la carga de comunicación que implica una elección para los votantes. Al reducir esta carga, puede ser factible llevar a cabo más elecciones sobre más temas. En última instancia, esto podría llevar a un cambio de un gobierno representativo a un sistema en el que la mayoría de los asuntos se decidan mediante referendos, una verdadera e-democracia. En este artículo, analizamos la complejidad de comunicación de las reglas de votación comunes. Conocer qué reglas de votación requieren poca comunicación es especialmente importante cuando el tema a votar es de tan poca importancia que se cumple lo siguiente: las partes involucradas están dispuestas a aceptar una regla que tiende a producir resultados ligeramente menos representativos de las preferencias de los votantes, si esta regla reduce significativamente la carga de comunicación para los votantes. La siguiente tabla resume los resultados que obtuvimos. Regla Límite inferior Límite superior pluralidad Ω(n log m) O(n log m) pluralidad con segunda vuelta Ω(n log m) O(n log m) Voto único transferible (STV) Ω(n log m) O(n(log m)2) Condorcet Ω(nm) O(nm) aprobación Ω(nm) O(nm) Bucklin Ω(nm) O(nm) taza Ω(nm) O(nm) maximin Ω(nm) O(nm) Borda Ω(nm log m) O(nm log m) Copeland Ω(nm log m) O(nm log m) pares clasificados Ω(nm log m) O(nm log m) Complejidad de comunicación de las reglas de votación, ordenadas de menor a mayor. Todos los límites superiores son deterministas (con la excepción de maximin, para el cual el mejor límite superior determinista que demostramos es O(nm log m)). Todos los límites inferiores se mantienen incluso para la comunicación no determinista y solo para determinar si un candidato dado a es el ganador. Una área de investigación futura es estudiar qué sucede cuando restringimos nuestra atención a protocolos de comunicación que no revelan información estratégicamente útil. Esta restricción puede invalidar algunos de los límites superiores que derivamos utilizando protocolos de comunicación multietapa. Además, todos nuestros límites son límites en el peor de los casos. Puede ser posible superar estos límites cuando la distribución de votos tiene una estructura adicional. Al decidir qué regla de votación utilizar para una elección, hay muchas consideraciones a tener en cuenta. Las reglas de votación que estudiamos en este documento son las más comunes que han resistido la prueba del tiempo. Una forma de seleccionar entre estas reglas es considerar los resultados recientes sobre complejidad. La tabla anterior muestra que desde una perspectiva de complejidad de comunicación, la pluralidad, la pluralidad con segunda vuelta y el voto único transferible son preferibles. Sin embargo, la pluralidad tiene la propiedad no deseada de que es fácil de manipular computacionalmente mediante votación estratégica [3, 7]. La pluralidad con segunda vuelta es NP-duro de manipular por una coalición de votantes ponderados, o por un individuo que enfrenta incertidumbre correlacionada sobre los votos de los demás [7, 6]. STV es NP-duro de manipular en esos escenarios también [7], pero también por un individuo con conocimiento perfecto de los votos de los demás (cuando el número de candidatos es ilimitado) [2]. Por lo tanto, STV es más robusto, aunque puede requerir ligeramente más comunicación en el peor de los casos según la tabla anterior. Sin embargo, otros criterios de selección son la complejidad computacional para determinar si se ha obtenido suficiente información para declarar un ganador, y la de determinar la secuencia óptima de consultas [8]. 6. REFERENCIAS [1] Lawrence Ausubel y Paul Milgrom. Subastas ascendentes con ofertas de paquetes. Fronteras de la Economía Teórica, 1, 2002. No. 1, Artículo 1. [2] John Bartholdi, III y James Orlin. El voto único transferible resiste el voto estratégico. Elección Social y Bienestar, 8(4):341-354, 1991. [3] John Bartholdi, III, Craig Tovey y Michael Trick. La dificultad computacional de manipular una elección. Elección Social y Bienestar, 6(3):227-241, 1989. [4] Avrim Blum, Jeffrey Jackson, Tuomas Sandholm y Martin Zinkevich. Elicitación de preferencias y aprendizaje de consultas. Revista de Investigación en Aprendizaje Automático, 5:649-667, 2004. [5] Wolfram Conen y Tuomas Sandholm. Elicitación de preferencias en subastas combinatorias: Resumen extendido. En Actas de la Conferencia ACM sobre Comercio Electrónico (ACM-EC), páginas 256-259, 2001. [6] Vincent Conitzer, Jerome Lang y Tuomas Sandholm. ¿Cuántos candidatos se necesitan para que las elecciones sean difíciles de manipular? En Aspectos Teóricos de la Racionalidad y el Conocimiento (TARK), páginas 201-214, 2003. [7] Vincent Conitzer y Tuomas Sandholm. Complejidad de manipular elecciones con pocos candidatos. En Actas de la Conferencia Nacional de Inteligencia Artificial (AAAI), páginas 314-319, 2002. [8] Vincent Conitzer y Tuomas Sandholm. Elicitación de votos: Complejidad y estrategia de prueba. En Actas de la Conferencia Nacional de Inteligencia Artificial (AAAI), páginas 392-397, 2002. [9] Sven de Vries, James Schummer y Rakesh V. Vohra. En subastas ascendentes de objetos heterogéneos, 2003. Borrador. [10] Allan Gibbard. Manipulación de esquemas de votación. Econometrica, 41:587-602, 1973. [11] Benoit Hudson y Tuomas Sandholm. Efectividad de tipos de consultas y políticas para la obtención de preferencias en subastas combinatorias. En la Conferencia Internacional sobre Agentes Autónomos y Sistemas Multiagente (AAMAS), páginas 386-393, 2004. [12] E Kushilevitz y N Nisan. Complejidad de la comunicación. Cambridge University Press, 1997. [13] Sebasti´en Lahaie y David Parkes. Aplicando algoritmos de aprendizaje a la obtención de preferencias. En Actas de la Conferencia de la ACM sobre Comercio Electrónico, 2004. [14] Noam Nisan e Ilya Segal. Los requisitos de comunicación de asignaciones eficientes y precios de apoyo. Revista de Teoría Económica, 2005. Próximamente. [15] David Parkes. iBundle: Una subasta de paquetes de precio ascendente eficiente. En Actas de la Conferencia de la ACM sobre Comercio Electrónico (ACM-EC), páginas 148-157, 1999. [16] Tuomas Sandholm. Una implementación del protocolo de red de contratos basada en cálculos de costos marginales. En Actas de la Conferencia Nacional de Inteligencia Artificial (AAAI), páginas 256-262, 1993. [17] Tuomas Sandholm y Craig Boutilier. Elicitación de preferencias en subastas combinatorias. En Peter Cramton, Yoav Shoham y Richard Steinberg, editores, Subastas Combinatorias, capítulo 10. MIT Press, 2005. [18] Paolo Santi, Vincent Conitzer y Tuomas Sandholm. Hacia una caracterización de la obtención de preferencias polinomiales con consultas de valor en subastas combinatorias. En la Conferencia sobre Teoría del Aprendizaje (COLT), páginas 1-16, 2004. [19] Mark Satterthwaite. In Spanish, the translation would be: \"Inmutabilidad estratégica y condiciones de Arrow: teoremas de existencia y correspondencia para procedimientos de votación y funciones de bienestar social.\" Revista de Teoría Económica, 10:187-217, 1975. [20] Ilya Segal. Los requisitos de comunicación de las reglas de elección social y los conjuntos de presupuesto de apoyo, 2004. Borrador. Presentado en el Taller DIMACS sobre Problemas Computacionales en el Diseño de Subastas, Universidad de Rutgers, Nueva Jersey, EE. UU. [21] Peter Wurman y Michael Wellman. AkBA: Una subasta combinatoria progresiva y de precio anónimo. En Actas de la Conferencia de la ACM sobre Comercio Electrónico (ACM-EC), páginas 21-29, 2000. [22] A. C. Yao. Algunas preguntas de complejidad relacionadas con la computación distribuida. En Actas del 11º simposio de ACM sobre teoría de la computación (STOC), páginas 209-213, 1979. [23] Martin Zinkevich, Avrim Blum y Tuomas Sandholm. En la obtención de preferencias en tiempo polinómico con consultas de valor. En Actas de la Conferencia de la ACM sobre Comercio Electrónico (ACM-EC), páginas 176-185, 2003. 87 ",
            "candidates": [],
            "error": [
                [
                    ""
                ]
            ]
        },
        "elicitation problem": {
            "translated_key": "problema de la obtención de información",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Communication Complexity of Common Voting Rules∗ Vincent Conitzer Carnegie Mellon University 5000 Forbes Avenue Pittsburgh, PA 15213, USA conitzer@cs.cmu.edu Tuomas Sandholm Carnegie Mellon University 5000 Forbes Avenue Pittsburgh, PA 15213, USA sandholm@cs.cmu.edu ABSTRACT We determine the communication complexity of the common voting rules.",
                "The rules (sorted by their communication complexity from low to high) are plurality, plurality with runoff, single transferable vote (STV), Condorcet, approval, Bucklin, cup, maximin, Borda, Copeland, and ranked pairs.",
                "For each rule, we first give a deterministic communication protocol and an upper bound on the number of bits communicated in it; then, we give a lower bound on (even the nondeterministic) communication requirements of the voting rule.",
                "The bounds match for all voting rules except STV and maximin.",
                "Categories and Subject Descriptors F.2 [Theory of Computation]: Analysis of Algorithms and Problem Complexity; J.4 [Computer Applications]: Social and Behavioral Sciences-Economics General Terms Algorithms, Economics, Theory 1.",
                "INTRODUCTION One key factor in the practicality of any preference aggregation rule is its communication burden.",
                "To successfully aggregate the agents preferences, it is usually not necessary for all the agents to report all of their preference information.",
                "Clever protocols that elicit the agents preferences partially and sequentially have the potential to dramatically reduce the required communication.",
                "This has at least the following advantages: • It can make preference aggregation feasible in settings where the total amount of preference information is too large to communicate. • Even when communicating all the preference information is feasible, reducing the communication requirements lessens the burden placed on the agents.",
                "This is especially true when the agents, rather than knowing all their preferences in advance, need to invest effort (such as computation or information gathering) to determine their preferences [16]. • It preserves (some of) the agents privacy.",
                "Most of the work on reducing the communication burden in preference aggregation has focused on resource allocation settings such as combinatorial auctions, in which an auctioneer auctions off a number of (possibly distinct) items in a single event.",
                "Because in a combinatorial auction, bidders can have separate valuations for each of an exponential number of possible bundles of items, this is a setting in which reducing the communication burden is especially crucial.",
                "This can be accomplished by supplementing the auctioneer with an elicitor that incrementally elicits parts of the bidders preferences on an as-needed basis, based on what the bidders have revealed about their preferences so far, as suggested by Conen and Sandholm [5].",
                "For example, the elicitor can ask for a bidders value for a specific bundle (value queries), which of two bundles the bidder prefers (order queries), which bundle he ranks kth or what the rank of a given bundle is (rank queries), which bundle he would purchase given a particular vector of prices (demand queries), etc.-until (at least) the final allocation can be determined.",
                "Experimentally, this yields drastic savings in preference revelation [11].",
                "Furthermore, if the agents valuation functions are drawn from certain natural subclasses, the <br>elicitation problem</br> can be solved using only polynomially many queries even in the worst case [23, 4, 13, 18, 14].",
                "For a review of preference elicitation in combinatorial auctions, see [17].",
                "Ascending combinatorial auctions are a well-known special form of preference elicitation, where the elicitor asks demand queries with increasing prices [15, 21, 1, 9].",
                "Finally, resource 78 allocation problems have also been studied from a communication complexity viewpoint, thereby deriving lower bounds on the required communication.",
                "For example, Nisan and Segal show that exponential communication is required even to obtain a surplus greater than that obtained by auctioning off all objects as a single bundle [14].",
                "Segal also studies social choice rules in general, and shows that for a large class of social choice rules, supporting budget sets must be revealed such that if every agent prefers the same outcome in her budget set, this proves the optimality of that outcome.",
                "Segal then uses this characterization to prove bounds on the communication required in resource allocation as well as matching settings [20].",
                "In this paper, we will focus on the communication requirements of a generally applicable subclass of social choice rules, commonly known as voting rules.",
                "In a voting setting, there is a set of candidate outcomes over which the voters express their preferences by submitting a vote (typically, a ranking of the candidates), and the winner (that is, the chosen outcome) is determined based on these votes.",
                "The communication required by voting rules can be large either because the number of voters is large (such as, for example, in national elections), or because the number of candidates is large (for example, the agents can vote over allocations of a number of resources), or both.",
                "Prior work [8] has studied elicitation in voting, studying how computationally hard it is to decide whether a winner can be determined with the information elicited so far, as well as how hard it is to find the optimal sequence of queries given perfect suspicions about the voters preferences.",
                "In addition, that paper discusses strategic (game-theoretic) issues introduced by elicitation.",
                "In contrast, in this paper, we are concerned with the worst-case number of bits that must be communicated to execute a given voting rule, when nothing is known in advance about the voters preferences.",
                "We determine the communication complexity of the common voting rules.",
                "For each rule, we first give an upper bound on the (deterministic) communication complexity by providing a communication protocol for it and analyzing how many bits need to be transmitted in this protocol. (Segals results [20] do not apply to most voting rules because most voting rules are not intersectionmonotonic (or even monotonic).1 ) For many of the voting rules under study, it turns out that one cannot do better than simply letting each voter immediately communicate all her (potentially relevant) information.",
                "However, for some rules (such as plurality with runoff, STV and cup) there is a straightforward multistage communication protocol that, with some analysis, can be shown to significantly outperform the immediate communication of all (potentially relevant) information.",
                "Finally, for some rules (such as the Condorcet and Bucklin rules), we need to introduce a more complex communication protocol to achieve the best possible upper 1 For two of the rules that we study that are intersectionmonotonic, namely the approval and Condorcet rules, Segals results can in fact be used to give alternative proofs of our lower bounds.",
                "We only give direct proofs for these rules here because 1) these direct proofs are among the easier ones in this paper, 2) the alternative proofs are nontrivial even given Segals results, and 3) a space constraint applies.",
                "However, we hope to also include the alternative proofs in a later version. bound.",
                "After obtaining the upper bounds, we show that they are tight by giving matching lower bounds on (even the nondeterministic) communication complexity of each voting rule.",
                "There are two exceptions: STV, for which our upper and lower bounds are apart by a factor log m; and maximin, for which our best deterministic upper bound is also a factor log m above the (nondeterministic) lower bound, although we give a nondeterministic upper bound that matches the lower bound. 2. REVIEW OF VOTING RULES In this section, we review the common voting rules that we study in this paper.",
                "A voting rule2 is a function mapping a vector of the n voters votes (i.e. preferences over candidates) to one of the m candidates (the winner) in the candidate set C. In some cases (such as the Condorcet rule), the rule may also declare that no winner exists.",
                "We do not concern ourselves with what happens in case of a tie between candidates (our lower bounds hold regardless of how ties are broken, and the communication protocols used for our upper bounds do not attempt to break the ties).",
                "All of the rules that we study are rank-based rules, which means that a vote is defined as an ordering of the candidates (with the exception of the plurality rule, for which a vote is a single candidate, and the approval rule, for which a vote is a subset of the candidates).",
                "We will consider the following voting rules. (For rules that define a score, the candidate with the highest score wins.) • scoring rules.",
                "Let α = α1, . . . , αm be a vector of integers such that α1 ≥ α2 . . . ≥ αm.",
                "For each voter, a candidate receives α1 points if it is ranked first by the voter, α2 if it is ranked second etc.",
                "The score sα of a candidate is the total number of points the candidate receives.",
                "The Borda rule is the scoring rule with α = m−1, m−2, . . . , 0 .",
                "The plurality rule is the scoring rule with α = 1, 0, . . . , 0 . • single transferable vote (STV).",
                "The rule proceeds through a series of m − 1 rounds.",
                "In each round, the candidate with the lowest plurality score (that is, the least number of voters ranking it first among the remaining candidates) is eliminated (and each of the votes for that candidate transfer to the next remaining candidate in the order given in that vote).",
                "The winner is the last remaining candidate. • plurality with run-off.",
                "In this rule, a first round eliminates all candidates except the two with the highest plurality scores.",
                "Votes are transferred to these as in the STV rule, and a second round determines the winner from these two. • approval.",
                "Each voter labels each candidate as either approved or disapproved.",
                "The candidate approved by the greatest number of voters wins. • Condorcet.",
                "For any two candidates i and j, let N(i, j) be the number of voters who prefer i to j.",
                "If there is a candidate i that is preferred to any other candidate by a majority of the voters (that is, N(i, j) > N(j, i) for all j = i-that is, i wins every pairwise election), then candidate i wins. 2 The term voting protocol is often used to describe the same concept, but we seek to draw a sharp distinction between the rule mapping preferences to outcomes, and the communication/elicitation protocol used to implement this rule. 79 • maximin (aka.",
                "Simpson).",
                "The maximin score of i is s(i) = minj=i N(i, j)-that is, is worst performance in a pairwise election.",
                "The candidate with the highest maximin score wins. • Copeland.",
                "For any two distinct candidates i and j, let C(i, j) = 1 if N(i, j) > N(j, i), C(i, j) = 1/2 if N(i, j) = N(j, i) and C(i, j) = 0 if N(i, j) < N(j, i).",
                "The Copeland score of candidate i is s(i) = j=i C(i, j). • cup (sequential binary comparisons).",
                "The cup rule is defined by a balanced3 binary tree T with one leaf per candidate, and an assignment of candidates to leaves (each leaf gets one candidate).",
                "Each non-leaf node is assigned the winner of the pairwise election of the nodes children; the candidate assigned to the root wins. • Bucklin.",
                "For any candidate i and integer l, let B(i, l) be the number of voters that rank candidate i among the top l candidates.",
                "The winner is arg mini(min{l : B(i, l) > n/2}).",
                "That is, if we say that a voter approves her top l candidates, then we repeatedly increase l by 1 until some candidate is approved by more than half the voters, and this candidate is the winner. • ranked pairs.",
                "This rule determines an order on all the candidates, and the winner is the candidate at the top of this order.",
                "Sort all ordered pairs of candidates (i, j) by N(i, j), the number of voters who prefer i to j.",
                "Starting with the pair (i, j) with the highest N(i, j), we lock in the result of their pairwise election (i j).",
                "Then, we move to the next pair, and we lock the result of their pairwise election.",
                "We continue to lock every pairwise result that does not contradict the ordering established so far.",
                "We emphasize that these definitions of voting rules do not concern themselves with how the votes are elicited from the voters; all the voting rules, including those that are suggestively defined in terms of rounds, are in actuality just functions mapping the vector of all the voters votes to a winner.",
                "Nevertheless, there are always many different ways of eliciting the votes (or the relevant parts thereof) from the voters.",
                "For example, in the plurality with runoff rule, one way of eliciting the votes is to ask every voter to declare her entire ordering of the candidates up front.",
                "Alternatively, we can first ask every voter to declare only her most preferred candidate; then, we will know the two candidates in the runoff, and we can ask every voter which of these two candidates she prefers.",
                "Thus, we distinguish between the voting rule (the mapping from vectors of votes to outcomes) and the communication protocol (which determines how the relevant parts of the votes are actually elicited from the voters).",
                "The goal of this paper is to give efficient communication protocols for the voting rules just defined, and to prove that there do not exist any more efficient communication protocols.",
                "It is interesting to note that the choice of the communication protocol may affect the strategic behavior of the voters.",
                "Multistage communication protocols may reveal to the voters some information about how the other voters are voting (for example, in the two-stage communication protocol just given for plurality with runoff, in the second stage voters 3 Balanced means that the difference in depth between two leaves can be at most one. will know which two candidates have the highest plurality scores).",
                "In general, when the voters receive such information, it may give them incentives to vote differently than they would have in a single-stage communication protocol in which all voters declare their entire votes simultaneously.",
                "Of course, even the single-stage communication protocol is not strategy-proof4 for any reasonable voting rule, by the Gibbard-Satterthwaite theorem [10, 19].",
                "However, this does not mean that we should not be concerned about adding even more opportunities for strategic voting.",
                "In fact, many of the communication protocols introduced in this paper do introduce additional opportunities for strategic voting, but we do not have the space to discuss this here. (In prior work [8], we do give an example where an elicitation protocol for the approval voting rule introduces strategic voting, and give principles for designing elicitation protocols that do not introduce strategic problems.)",
                "Now that we have reviewed voting rules, we move on to a brief review of communication complexity theory. 3. REVIEW OF SOME COMMUNICATION COMPLEXITY THEORY In this section, we review the basic model of a communication problem and the lower-bounding technique of constructing a fooling set. (The basic model of a communication problem is due to Yao [22]; for an overview see Kushilevitz and Nisan [12].)",
                "Each player 1 ≤ i ≤ n knows (only) input xi.",
                "Together, they seek to compute f(x1, x2, . . . , xn).",
                "In a deterministic protocol for computing f, in each stage, one of the players announces (to all other players) a bit of information based on her own input and the bits announced so far.",
                "Eventually, the communication terminates and all players know f(x1, x2, . . . , xn).",
                "The goal is to minimize the worst-case (over all input vectors) number of bits sent.",
                "The deterministic communication complexity of a problem is the worstcase number of bits sent in the best (correct) deterministic protocol for it.",
                "In a nondeterministic protocol, the next bit to be sent can be chosen nondeterministically.",
                "For the purposes of this paper, we will consider a nondeterministic protocol correct if for every input vector, there is some sequence of nondeterministic choices the players can make so that the players know the value of f when the protocol terminates.",
                "The nondeterministic communication complexity of a problem is the worst-case number of bits sent in the best (correct) nondeterministic protocol for it.",
                "We are now ready to give the definition of a fooling set.",
                "Definition 1.",
                "A fooling set is a set of input vectors {(x1 1, x1 2, . . . , x1 n), (x2 1, x2 2, . . . , x2 n), . . . , (xk 1 , xk 2 , . . . , xk n) such that for any i, f(xi 1, xi 2, . . . , xi n) = f0 for some constant f0, but for any i = j, there exists some vector (r1, r2, . . . , rn) ∈ {i, j}n such that f(xr1 1 , xr2 2 , . . . , xrn n ) = f0. (That is, we can mix the inputs from the two input vectors to obtain a vector with a different function value.)",
                "It is known that if a fooling set of size k exists, then log k is a lower bound on the communication complexity (even the nondeterministic communication complexity) [12]. 4 A strategy-proof protocol is one in which it is in the players best interest to report their preferences truthfully. 80 For the purposes of this paper, f is the voting rule that maps the votes to the winning candidate, and xi is voter is vote (the information that the voting rule would require from the voter if there were no possibility of multistage communication-i.e. the most preferred candidate (plurality), the approved candidates (approval), or the ranking of all the candidates (all other protocols)).",
                "However, when we derive our lower bounds, f will only signify whether a distinguished candidate a wins. (That is, f is 1 if a wins, and 0 otherwise.)",
                "This will strengthen our lower bound results (because it implies that even finding out whether one given candidate wins is hard).5 Thus, a fooling set in our context is a set of vectors of votes so that a wins (does not win) with each of them; but for any two different vote vectors in the set, there is a way of taking some voters votes from the first vector and the others votes from the second vector, so that a does not win (wins).",
                "To simplify the proofs of our lower bounds, we make assumptions such as the number of voters n is odd in many of these proofs.",
                "Therefore, technically, we do not prove the lower bound for (number of candidates, number of voters) pairs (m, n) that do not satisfy these assumptions (for example, if we make the above assumption, then we technically do not prove the lower bound for any pair (m, n) in which n is even).",
                "Nevertheless, we always prove the lower bound for a representative set of (m, n) pairs.",
                "For example, for every one of our lower bounds it is the case that for infinitely many values of m, there are infinitely many values of n such that the lower bound is proved for the pair (m, n). 4.",
                "RESULTS We are now ready to present our results.",
                "For each voting rule, we first give a deterministic communication protocol for determining the winner to establish an upper bound.",
                "Then, we give a lower bound on the nondeterministic communication complexity (even on the complexity of deciding whether a given candidate wins, which is an easier question).",
                "The lower bounds match the upper bounds in all but two cases: the STV rule (upper bound O(n(log m)2 ); lower bound Ω(n log m)) and the maximin rule (upper bound O(nm log m), although we do give a nondeterministic protocol that is O(nm); lower bound Ω(nm)).",
                "When we discuss a voting rule in which the voters rank the candidates, we will represent a ranking in which candidate c1 is ranked first, c2 is ranked second, etc. as c1 c2 . . . cm. 5 One possible concern is that in the case where ties are possible, it may require much communication to verify whether a specific candidate a is among the winners, but little communication to produce one of the winners.",
                "However, all the fooling sets we use in the proofs have the property that if a wins, then a is the unique winner.",
                "Therefore, in these fooling sets, if one knows any one of the winners, then one knows whether a is a winner.",
                "Thus, computing one of the winners requires at least as much communication as verifying whether a is among the winners.",
                "In general, when a communication problem allows multiple correct answers for a given vector of inputs, this is known as computing a relation rather than a function [12].",
                "However, as per the above, we can restrict our attention to a subset of the domain where the voting rule truly is a (single-valued) function, and hence lower bounding techniques for functions rather than relations will suffice.",
                "Sometimes for the purposes of a proof the internal ranking of a subset of the candidates does not matter, and in this case we will not specify it.",
                "For example, if S = {c2, c3}, then c1 S c4 indicates that either the ranking c1 c2 c3 c4 or the ranking c1 c3 c2 c4 can be used for the proof.",
                "We first give a universal upper bound.",
                "Theorem 1.",
                "The deterministic communication complexity of any rank-based voting rule is O(nm log m).",
                "Proof.",
                "This bound is achieved by simply having everyone communicate their entire ordering of the candidates (indicating the rank of an individual candidate requires only O(log m) bits, so each of the n voters can simply indicate the rank of each of the m candidates).",
                "The next lemma will be useful in a few of our proofs.",
                "Lemma 1.",
                "If m divides n, then log(n! )−m log((n/m)!) ≥ n(log m − 1)/2.",
                "Proof.",
                "If n/m = 1 (that is, n = m), then this expression simplifies to log(n!).",
                "We have log(n!) = n i=1 log i ≥ n x=1 log(i)dx, which, using integration by parts, is equal to n log n − (n − 1) > n(log n − 1) = n(log m − 1) > n(log m − 1)/2.",
                "So, we can assume that n/m ≥ 2.",
                "We observe that log(n!) = n i=1 log i = n/m−1 i=0 m j=1 log(im+j) ≥ n/m−1 i=1 m j=1 log(im) = m n/m−1 i=1 log(im), and that m log((n/m)!) = m n/m i=1 log(i).",
                "Therefore, log(n!) − m log((n/m)!) ≥ m n/m−1 i=1 log(im) − m n/m i=1 log(i) = m(( n/m−1 i=1 log(im/i))−log(n/m)) = m((n/m− 1) log m−log n+log m) = n log m−m log n. Now, using the fact that n/m ≥ 2, we have m log n = n(m/n) log m(n/m) = n(m/n)(log m + log(n/m)) ≤ n(1/2)(log m + log 2).",
                "Thus, log(n!) − m log((n/m)!) ≥ n log m − m log n ≥ n log m − n(1/2)(log m + log 2) = n(log m − 1)/2.",
                "Theorem 2.",
                "The deterministic communication complexity of the plurality rule is O(n log m).",
                "Proof.",
                "Indicating one of the candidates requires only O(log m) bits, so each voter can simply indicate her most preferred candidate.",
                "Theorem 3.",
                "The nondeterministic communication complexity of the plurality rule is Ω(n log m) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We will exhibit a fooling set of size n ! (( n m )! )m where n = (n−1)/2.",
                "Taking the logarithm of this gives log(n ! )− m log((n /m)! ), so the result follows from Lemma 1.",
                "The fooling set will consist of all vectors of votes satisfying the following constraints: • For any 1 ≤ i ≤ n , voters 2i−1 and 2i vote the same. 81 • Every candidate receives equally many votes from the first 2n = n − 1 voters. • The last voter (voter n) votes for a.",
                "Candidate a wins with each one of these vote vectors because of the extra vote for a from the last voter.",
                "Given that m divides n , let us see how many vote vectors there are in the fooling set.",
                "We need to distribute n voter pairs evenly over m candidates, for a total of n /m voter pairs per candidate; and there are precisely n ! (( n m )! )m ways of doing this.6 All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses.",
                "Let i be a number such that the two vote vectors disagree on the candidate for which voters 2i − 1 and 2i vote.",
                "Without loss of generality, suppose that in the first vote vector, these voters do not vote for a (but for some other candidate, b, instead).",
                "Now, construct a new vote vector by taking votes 2i − 1 and 2i from the first vote vector, and the remaining votes from the second vote vector.",
                "Then, b receives 2n /m + 2 votes in this newly constructed vote vector, whereas a receives at most 2n /m+1 votes.",
                "So, a is not the winner in the newly constructed vote vector, and hence we have a correct fooling set.",
                "Theorem 4.",
                "The deterministic communication complexity of the plurality with runoff rule is O(n log m).",
                "Proof.",
                "First, let every voter indicate her most preferred candidate using log m bits.",
                "After this, the two candidates in the runoff are known, and each voter can indicate which one she prefers using a single additional bit.",
                "Theorem 5.",
                "The nondeterministic communication complexity of the plurality with runoff rule is Ω(n log m) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We will exhibit a fooling set of size n ! (( n m )! )m where m = m/2 and n = (n − 2)/4.",
                "Taking the logarithm of this gives log(n !) − m log((n /m )! ), so the result follows from Lemma 1.",
                "Divide the candidates into m pairs: (c1, d1), (c2, d2), . . . , (cm , dm ) where c1 = a and d1 = b.",
                "The fooling set will consist of all vectors of votes satisfying the following constraints: • For any 1 ≤ i ≤ n , voters 4i − 3 and 4i − 2 rank the candidates ck(i) a C − {a, ck(i)}, for some candidate ck(i). (If ck(i) = a then the vote is simply a C − {a}.) • For any 1 ≤ i ≤ n , voters 4i − 1 and 4i rank the candidates dk(i) a C − {a, dk(i)} (that is, their most preferred candidate is the candidate that is paired with the candidate that the previous two voters vote for). 6 An intuitive proof of this is the following.",
                "We can count the number of permutations of n elements as follows.",
                "First, divide the elements into m buckets of size n /m, so that if x is placed in a lower-indexed bucket than y, then x will be indexed lower in the eventual permutation.",
                "Then, decide on the permutation within each bucket (for which there are (n /m)! choices per bucket).",
                "It follows that n ! equals the number of ways to divide n elements into m buckets of size n /m, times ((n /m)! )m . • Every candidate is ranked at the top of equally many of the first 4n = n − 2 votes. • Voter 4n +1 = n−1 ranks the candidates a C−{a}. • Voter 4n + 2 = n ranks the candidates b C − {b}.",
                "Candidate a wins with each one of these vote vectors: because of the last two votes, candidates a and b are one vote ahead of all the other candidates and continue to the runoff, and at this point all the votes that had another candidate ranked at the top transfer to a, so that a wins the runoff.",
                "Given that m divides n , let us see how many vote vectors there are in the fooling set.",
                "We need to distribute n groups of four voters evenly over the m pairs of candidates, and (as in the proof of Theorem 3) there are n ! (( n m )! )m ways of doing this.",
                "All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses.",
                "Let i be a number such that ck(i) is not the same in both of these two vote vectors, that is, c1 k(i) (ck(i) in the first vote vector) is not equal to c2 k(i) (ck(i) in the second vote vector).",
                "Without loss of generality, suppose c1 k(i) = a.",
                "Now, construct a new vote vector by taking votes 4i − 3, 4i − 2, 4i − 1, 4i from the first vote vector, and the remaining votes from the second vote vector.",
                "In this newly constructed vote vector, c1 k(i) and d1 k(i) each receive 4n /m+2 votes in the first round, whereas a receives at most 4n /m+1 votes.",
                "So, a does not continue to the runoff in the newly constructed vote vector, and hence we have a correct fooling set.",
                "Theorem 6.",
                "The nondeterministic communication complexity of the Borda rule is Ω(nm log m) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We will exhibit a fooling set of size (m ! )n where m = m−2 and n = (n−2)/4.",
                "This will prove the theorem because m ! is Ω(m log m), so that log((m ! )n ) = n log(m !) is Ω(nm log m).",
                "For every vector (π1, π2, . . . , πn ) consisting of n orderings of all candidates other than a and another fixed candidate b (technically, the orderings take the form of a one-to-one function πi : {1, 2, . . . , m } → C − {a, b} with πi(j) = c indicating that candidate c is the jth in the order represented by πi), let the following vector of votes be an element of the fooling set: • For 1 ≤ i ≤ n , let voters 4i − 3 and 4i − 2 rank the candidates a b πi(1) πi(2) . . . πi(m ). • For 1 ≤ i ≤ n , let voters 4i − 1 and 4i rank the candidates πi(m ) πi(m − 1) . . . πi(1) b a. • Let voter 4n + 1 = n − 1 rank the candidates a b π0(1) π0(2) . . . π0(m ) (where π0 is an arbitrary order of the candidates other than a and b which is the same for every element of the fooling set). • Let voter 4n + 2 = n rank the candidates π0(m ) π0(m − 1) . . . π0(1) a b.",
                "We observe that this fooling set has size (m ! )n , and that candidate a wins in each vector of votes in the fooling set (to 82 see why, we observe that for any 1 ≤ i ≤ n , votes 4i−3 and 4i − 2 rank the candidates in the exact opposite way from votes 4i − 1 and 4i, which under the Borda rule means they cancel out; and the last two votes give one more point to a than to any other candidate-besides b who gets two fewer points than a).",
                "All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses.",
                "Let the first vote vector correspond to the vector (π1 1, π1 2, . . . , π1 n ), and let the second vote vector correspond to the vector (π2 1, π2 2, . . . , π2 n ).",
                "For some i, we must have π1 i = π2 i , so that for some candidate c /∈ {a, b}, (π1 i )−1 (c) < (π2 i )−1 (c) (that is, c is ranked higher in π1 i than in π2 i ).",
                "Now, construct a new vote vector by taking votes 4i−3 and 4i−2 from the first vote vector, and the remaining votes from the second vote vector. as Borda score remains unchanged.",
                "However, because c is ranked higher in π1 i than in π2 i , c receives at least 2 more points from votes 4i−3 and 4i − 2 in the newly constructed vote vector than it did in the second vote vector.",
                "It follows that c has a higher Borda score than a in the newly constructed vote vector.",
                "So, a is not the winner in the newly constructed vote vector, and hence we have a correct fooling set.",
                "Theorem 7.",
                "The nondeterministic communication complexity of the Copeland rule is Ω(nm log m) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We will exhibit a fooling set of size (m ! )n where m = (m − 2)/2 and n = (n − 2)/2.",
                "This will prove the theorem because m ! is Ω(m log m), so that log((m ! )n ) = n log(m !) is Ω(nm log m).",
                "We write the set of candidates as the following disjoint union: C = {a, b} ∪ L ∪ R where L = {l1, l2, . . . , lm } and R = {r1, r2, . . . , rm }.",
                "For every vector (π1, π2, . . . , πn ) consisting of n permutations of the integers 1 through m (πi : {1, 2, . . . , m } → {1, 2, . . . , m }), let the following vector of votes be an element of the fooling set: • For 1 ≤ i ≤ n , let voter 2i − 1 rank the candidates a b lπi(1) rπi(1) lπi(2) rπi(2) . . . lπi(m ) rπi(m ). • For 1 ≤ i ≤ n , let voter 2i rank the candidates rπi(m ) lπi(m ) rπi(m −1) lπi(m −1) . . . rπi(1) lπi(1) b a. • Let voter n − 1 = 2n + 1 rank the candidates a b l1 r1 l2 r2 . . . lm rm . • Let voter n = 2n +2 rank the candidates rm lm rm −1 lm −1 . . . r1 l1 a b.",
                "We observe that this fooling set has size (m ! )n , and that candidate a wins in each vector of votes in the fooling set (every pair of candidates is tied in their pairwise election, with the exception that a defeats b, so that a wins the election by half a point).",
                "All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses.",
                "Let the first vote vector correspond to the vector (π1 1, π1 2, . . . , π1 n ), and let the second vote vector correspond to the vector (π2 1, π2 2, . . . , π2 n ).",
                "For some i, we must have π1 i = π2 i , so that for some j ∈ {1, 2, . . . , m }, we have (π1 i )−1 (j) < (π2 i )−1 (j).",
                "Now, construct a new vote vector by taking vote 2i−1 from the first vote vector, and the remaining votes from the second vote vector. as Copeland score remains unchanged.",
                "Let us consider the score of lj.",
                "We first observe that the rank of lj in vote 2i − 1 in the newly constructed vote vector is at least 2 higher than it was in the second vote vector, because (π1 i )−1 (j) < (π2 i )−1 (j).",
                "Let D1 (lj) be the set of candidates in L ∪ R that voter 2i − 1 ranked lower than lj in the first vote vector (D1 (lj) = {c ∈ L ∪ R : lj 1 2i−1 c}), and let D2 (lj) be the set of candidates in L ∪ R that voter 2i − 1 ranked lower than lj in the second vote vector (D2 (lj) = {c ∈ L ∪ R : lj 2 2i−1 c}).",
                "Then, it follows that in the newly constructed vote vector, lj defeats all the candidates in D1 (lj) − D2 (lj) in their pairwise elections (because lj receives an extra vote in each one of these pairwise elections relative to the second vote vector), and loses to all the candidates in D2 (lj) − D1 (lj) (because lj loses a vote in each one of these pairwise elections relative to the second vote vector), and ties with everyone else.",
                "But |D1 (lj)|−|D2 (lj)| ≥ 2, and hence |D1 (lj) − D2 (lj)| − |D2 (lj) − D1 (lj)| ≥ 2.",
                "Hence, in the newly constructed vote vector, lj has at least two more pairwise wins than pairwise losses, and therefore has at least 1 more point than if lj had tied all its pairwise elections.",
                "Thus, lj has a higher Copeland score than a in the newly constructed vote vector.",
                "So, a is not the winner in the newly constructed vote vector, and hence we have a correct fooling set.",
                "Theorem 8.",
                "The nondeterministic communication complexity of the maximin rule is O(nm).",
                "Proof.",
                "The nondeterministic protocol will guess which candidate w is the winner, and, for each other candidate c, which candidate o(c) is the candidate against whom c receives its lowest score in a pairwise election.",
                "Then, let every voter communicate the following: • for each candidate c = w, whether she prefers c to w; • for each candidate c = w, whether she prefers c to o(c).",
                "We observe that this requires the communication of 2n(m− 1) bits.",
                "If the guesses were correct, then, letting N(d, e) be the number of voters preferring candidate d to candidate e, we should have N(c, o(c)) < N(w, c ) for any c = w, c = w, which will prove that w wins the election.",
                "Theorem 9.",
                "The nondeterministic communication complexity of the maximin rule is Ω(nm) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We will exhibit a fooling set of size 2n m where m = m − 2 and n = (n − 1)/4.",
                "Let b be a candidate other than a.",
                "For every vector (S1, S2, . . . , Sn ) consisting of n subsets Si ⊆ C − {a, b}, let the following vector of votes be an element of the fooling set: • For 1 ≤ i ≤ n , let voters 4i − 3 and 4i − 2 rank the candidates Si a C − (Si ∪ {a, b}) b. • For 1 ≤ i ≤ n , let voters 4i − 1 and 4i rank the candidates b C − (Si ∪ {a, b}) a Si. 83 • Let voter 4n + 1 = n rank the candidates a b C − {a, b}.",
                "We observe that this fooling set has size (2m )n = 2n m , and that candidate a wins in each vector of votes in the fooling set (in every one of as pairwise elections, a is ranked higher than its opponent by 2n +1 = (n+1)/2 > n/2 votes).",
                "All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses.",
                "Let the first vote vector correspond to the vector (S1 1 , S1 2 , . . . , S1 n ), and let the second vote vector correspond to the vector (S2 1 , S2 2 , . . . , S2 n ).",
                "For some i, we must have S1 i = S2 i , so that either S1 i S2 i or S2 i S1 i .",
                "Without loss of generality, suppose S1 i S2 i , and let c be some candidate in S1 i − S2 i .",
                "Now, construct a new vote vector by taking votes 4i − 3 and 4i − 2 from the first vote vector, and the remaining votes from the second vote vector.",
                "In this newly constructed vote vector, a is ranked higher than c by only 2n −1 voters, for the following reason.",
                "Whereas voters 4i−3 and 4i − 2 do not rank c higher than a in the second vote vector (because c /∈ S2 i ), voters 4i − 3 and 4i − 2 do rank c higher than a in the first vote vector (because c ∈ S1 i ).",
                "Moreover, in every one of bs pairwise elections, b is ranked higher than its opponent by at least 2n voters.",
                "So, a has a lower maximin score than b, therefore a is not the winner in the newly constructed vote vector, and hence we have a correct fooling set.",
                "Theorem 10.",
                "The deterministic communication complexity of the STV rule is O(n(log m)2 ).",
                "Proof.",
                "Consider the following communication protocol.",
                "Let each voter first announce her most preferred candidate (O(n log m) communication).",
                "In the remaining rounds, we will keep track of each voters most preferred candidate among the remaining candidates, which will be enough to implement the rule.",
                "When candidate c is eliminated, let each of the voters whose most preferred candidate among the remaining candidates was c announce their most preferred candidate among the candidates remaining after cs elimination.",
                "If candidate c was the ith candidate to be eliminated (that is, there were m − i + 1 candidates remaining before cs elimination), it follows that at most n/(m − i + 1) voters had candidate c as their most preferred candidate among the remaining candidates, and thus the number of bits to be communicated after the elimination of the ith candidate is O((n/(m−i+1)) log m).7 Thus, the total communication in this communication protocol is O(n log m + m−1 i=1 (n/(m − i + 1)) log m).",
                "Of course, m−1 i=1 1/(m − i + 1) = m i=2 1/i, which is O(log m).",
                "Substituting into the previous expression, we find that the communication complexity is O(n(log m)2 ).",
                "Theorem 11.",
                "The nondeterministic communication complexity of the STV rule is Ω(n log m) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We omit this proof because of space constraint. 7 Actually, O((n/(m − i + 1)) log(m − i + 1)) is also correct, but it will not improve the bound.",
                "Theorem 12.",
                "The deterministic communication complexity of the approval rule is O(nm).",
                "Proof.",
                "Approving or disapproving of a candidate requires only one bit of information, so every voter can simply approve or disapprove of every candidate for a total communication of nm bits.",
                "Theorem 13.",
                "The nondeterministic communication complexity of the approval rule is Ω(nm) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We will exhibit a fooling set of size 2n m where m = m − 1 and n = (n − 1)/4.",
                "For every vector (S1, S2, . . . , Sn ) consisting of n subsets Si ⊆ C − {a}, let the following vector of votes be an element of the fooling set: • For 1 ≤ i ≤ n , let voters 4i − 3 and 4i − 2 approve Si ∪ {a}. • For 1 ≤ i ≤ n , let voters 4i − 1 and 4i approve C − (Si ∪ {a}). • Let voter 4n + 1 = n approve {a}.",
                "We observe that this fooling set has size (2m )n = 2n m , and that candidate a wins in each vector of votes in the fooling set (a is approved by 2n + 1 voters, whereas each other candidate is approved by only 2n voters).",
                "All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses.",
                "Let the first vote vector correspond to the vector (S1 1 , S1 2 , . . . , S1 n ), and let the second vote vector correspond to the vector (S2 1 , S2 2 , . . . , S2 n ).",
                "For some i, we must have S1 i = S2 i , so that either S1 i S2 i or S2 i S1 i .",
                "Without loss of generality, suppose S1 i S2 i , and let b be some candidate in S1 i − S2 i .",
                "Now, construct a new vote vector by taking votes 4i − 3 and 4i − 2 from the first vote vector, and the remaining votes from the second vote vector.",
                "In this newly constructed vote vector, a is still approved by 2n + 1 votes.",
                "However, b is approved by 2n + 2 votes, for the following reason.",
                "Whereas voters 4i−3 and 4i−2 do not approve b in the second vote vector (because b /∈ S2 i ), voters 4i − 3 and 4i − 2 do approve b in the first vote vector (because b ∈ S1 i ).",
                "It follows that bs score in the newly constructed vote vector is bs score in the second vote vector (2n ), plus two.",
                "So, a is not the winner in the newly constructed vote vector, and hence we have a correct fooling set.",
                "Interestingly, an Ω(m) lower bound can be obtained even for the problem of finding a candidate that is approved by more than one voter [20].",
                "Theorem 14.",
                "The deterministic communication complexity of the Condorcet rule is O(nm).",
                "Proof.",
                "We maintain a set of active candidates S which is initialized to C. At each stage, we choose two of the active candidates (say, the two candidates with the lowest indices), and we let each voter communicate which of the two candidates she prefers. (Such a stage requires the communication of n bits, one per voter.)",
                "The candidate preferred by fewer 84 voters (the loser of the pairwise election) is removed from S. (If the pairwise election is tied, both candidates are removed.)",
                "After at most m − 1 iterations, only one candidate is left (or zero candidates are left, in which case there is no Condorcet winner).",
                "Let a be the remaining candidate.",
                "To find out whether candidate a is the Condorcet winner, let each voter communicate, for every candidate c = a, whether she prefers a to c. (This requires the communication of at most n(m − 1) bits.)",
                "This is enough to establish whether a won each of its pairwise elections (and thus, whether a is the Condorcet winner).",
                "Theorem 15.",
                "The nondeterministic communication complexity of the Condorcet rule is Ω(nm) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We will exhibit a fooling set of size 2n m where m = m − 1 and n = (n − 1)/2.",
                "For every vector (S1, S2, . . . , Sn ) consisting of n subsets Si ⊆ C − {a}, let the following vector of votes be an element of the fooling set: • For 1 ≤ i ≤ n , let voter 2i − 1 rank the candidates Si a C − Si. • For 1 ≤ i ≤ n , let voter 2i rank the candidates C − Si a Si. • Let voter 2n +1 = n rank the candidates a C −{a}.",
                "We observe that this fooling set has size (2m )n = 2n m , and that candidate a wins in each vector of votes in the fooling set (a wins each of its pairwise elections by a single vote).",
                "All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses.",
                "Let the first vote vector correspond to the vector (S1 1 , S1 2 , . . . , S1 n ), and let the second vote vector correspond to the vector (S2 1 , S2 2 , . . . , S2 n ).",
                "For some i, we must have S1 i = S2 i , so that either S1 i S2 i or S2 i S1 i .",
                "Without loss of generality, suppose S1 i S2 i , and let b be some candidate in S1 i − S2 i .",
                "Now, construct a new vote vector by taking vote 2i − 1 from the first vote vector, and the remaining votes from the second vote vector.",
                "In this newly constructed vote vector, b wins its pairwise election against a by one vote (vote 2i − 1 ranks b above a in the newly constructed vote vector because b ∈ S1 i , whereas in the second vote vector vote 2i − 1 ranked a above b because b /∈ S2 i ).",
                "So, a is not the Condorcet winner in the newly constructed vote vector, and hence we have a correct fooling set.",
                "Theorem 16.",
                "The deterministic communication complexity of the cup rule is O(nm).",
                "Proof.",
                "Consider the following simple communication protocol.",
                "First, let all the voters communicate, for every one of the matchups in the first round, which of its two candidates they prefer.",
                "After this, the matchups for the second round are known, so let all the voters communicate which candidate they prefer in each matchup in the second round-etc.",
                "Because communicating which of two candidates is preferred requires only one bit per voter, and because there are only m − 1 matchups in total, this communication protocol requires O(nm) communication.",
                "Theorem 17.",
                "The nondeterministic communication complexity of the cup rule is Ω(nm) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We will exhibit a fooling set of size 2n m where m = (m − 1)/2 and n = (n − 7)/2.",
                "Given that m + 1 is a power of 2, so that one candidate gets a bye (that is, does not face an opponent) in the first round, let a be the candidate with the bye.",
                "Of the m first-round matchups, let lj denote the one (left) candidate in the jth matchup, and let rj be the other (right) candidate.",
                "Let L = {lj : 1 ≤ j ≤ m } and R = {rj : 1 ≤ j ≤ m }, so that C = L ∪ R ∪ {a}. . . . . . . . . . l r l r l r a m1 1 2 2 m Figure 1: The schedule for the cup rule used in the proof of Theorem 17.",
                "For every vector (S1, S2, . . . , Sn ) consisting of n subsets Si ⊆ R, let the following vector of votes be an element of the fooling set: • For 1 ≤ i ≤ n , let voter 2i − 1 rank the candidates Si L a R − Si. • For 1 ≤ i ≤ n , let voter 2i rank the candidates R − Si L a Si. • Let voters 2n +1 = n−6, 2n +2 = n−5, 2n +3 = n−4 rank the candidates L a R. • Let voters 2n + 4 = n − 3, 2n + 5 = n − 2 rank the candidates a r1 l1 r2 l2 . . . rm lm . • Let voters 2n + 6 = n − 1, 2n + 7 = n rank the candidates rm lm rm −1 lm −1 . . . r1 l1 a.",
                "We observe that this fooling set has size (2m )n = 2n m .",
                "Also, candidate a wins in each vector of votes in the fooling set, for the following reasons.",
                "Each candidate rj defeats its opponent lj in the first round. (For any 1 ≤ i ≤ n , the net effect of votes 2i − 1 and 2i on the pairwise election between rj and lj is zero; votes n − 6, n − 5, n − 4 prefer lj to rj, but votes n − 3, n − 2, n − 1, n all prefer rj to lj.)",
                "Moreover, a defeats every rj in their pairwise election. (For any 1 ≤ i ≤ n , the net effect of votes 2i − 1 and 2i on the pairwise election between a and rj is zero; votes n − 1, n prefer rj to a, but votes n − 6, n − 5, n − 4, n − 3, n − 2 all prefer a to rj.)",
                "It follows that a will defeat all the candidates that it faces.",
                "All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses.",
                "Let the first vote vector correspond to the vector 85 (S1 1 , S1 2 , . . . , S1 n ), and let the second vote vector correspond to the vector (S2 1 , S2 2 , . . . , S2 n ).",
                "For some i, we must have S1 i = S2 i , so that either S1 i S2 i or S2 i S1 i .",
                "Without loss of generality, suppose S1 i S2 i , and let rj be some candidate in S1 i − S2 i .",
                "Now, construct a new vote vector by taking vote 2i from the first vote vector, and the remaining votes from the second vote vector.",
                "We note that, whereas in the second vote vector vote 2i preferred rj to lj (because rj ∈ R−S2 i ), in the newly constructed vote vector this is no longer the case (because rj ∈ S1 i ).",
                "It follows that, whereas in the second vote vector, rj defeated lj in the first round by one vote, in the newly constructed vote vector, lj defeats rj in the first round.",
                "Thus, at least one lj advances to the second round after defeating its opponent rj.",
                "Now, we observe that in the newly constructed vote vector, any lk wins its pairwise election against any rq with q = k. This is because among the first 2n votes, at least n − 1 prefer lk to rq; votes n − 6, n − 5, n − 4 prefer lk to rq; and, because q = k, either votes n − 3, n − 2 prefer lk to rq (if k < q), or votes n − 1, n prefer lk to rq (if k > q).",
                "Thus, at least n + 4 = (n + 1)/2 > n/2 votes prefer lk to rq.",
                "Moreover, any lk wins its pairwise election against a.",
                "This is because only votes n − 3 and n − 2 prefer a to lk.",
                "It follows that, after the first round, any surviving candidate lk can only lose a matchup against another surviving lk , so that one of the lk must win the election.",
                "So, a is not the winner in the newly constructed vote vector, and hence we have a correct fooling set.",
                "Theorem 18.",
                "The deterministic communication complexity of the Bucklin rule is O(nm).",
                "Proof.",
                "Let l be the minimum integer for which there is a candidate who is ranked among the top l candidates by more than half the votes.",
                "We will do a binary search for l. At each point, we will have a lower bound lL which is smaller than l (initialized to 0), and an upper bound lH which is at least l (initialized to m).",
                "While lH − lL > 1, we continue by finding out whether (lH − l)/2 is smaller than l, after which we can update the bounds.",
                "To find out whether a number k is smaller than l, we determine every voters k most preferred candidates.",
                "Every voter can communicate which candidates are among her k most preferred candidates using m bits (for each candidate, indicate whether the candidate is among the top k or not), but because the binary search requires log m iterations, this gives us an upper bound of O((log m)nm), which is not strong enough.",
                "However, if lL < k < lH , and we already know a voters lL most preferred candidates, as well as her lH most preferred candidates, then the voter no longer needs to communicate whether the lL most preferred candidates are among her k most preferred candidates (because they must be), and she no longer needs to communicate whether the m−lH least preferred candidates are among her k most preferred candidates (because they cannot be).",
                "Thus the voter needs to communicate only m−lL −(m−lH ) = lH −lL bits in any given stage.",
                "Because each stage, lH − lL is (roughly) halved, each voter in total communicates only (roughly) m + m/2 + m/4 + . . . ≤ 2m bits.",
                "Theorem 19.",
                "The nondeterministic communication complexity of the Bucklin rule is Ω(nm) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We will exhibit a fooling set of size 2n m where m = (m−1)/2 and n = n/2.",
                "We write the set of candidates as the following disjoint union: C = {a} ∪ L ∪ R where L = {l1, l2, . . . , lm } and R = {r1, r2, . . . , rm }.",
                "For any subset S ⊆ {1, 2, . . . , m }, let L(S) = {li : i ∈ S} and let R(S) = {ri : i ∈ S}.",
                "For every vector (S1, S2, . . . , Sn ) consisting of n sets Si ⊆ {1, 2, . . . , m }, let the following vector of votes be an element of the fooling set: • For 1 ≤ i ≤ n , let voter 2i − 1 rank the candidates L(Si) R − R(Si) a L − L(Si) R(Si). • For 1 ≤ i ≤ n , let voter 2i rank the candidates L − L(Si) R(Si) a L(Si) R − R(Si).",
                "We observe that this fooling set has size (2m )n = 2n m , and that candidate a wins in each vector of votes in the fooling set, for the following reason.",
                "Each candidate in C − {a} is ranked among the top m candidates by exactly half the voters (which is not enough to win).",
                "Thus, we need to look at the voters top m +1 candidates, and a is ranked m +1th by all voters.",
                "All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses.",
                "Let the first vote vector correspond to the vector (S1 1 , S1 2 , . . . , S1 n ), and let the second vote vector correspond to the vector (S2 1 , S2 2 , . . . , S2 n ).",
                "For some i, we must have S1 i = S2 i , so that either S1 i S2 i or S2 i S1 i .",
                "Without loss of generality, suppose S1 i S2 i , and let j be some integer in S1 i − S2 i .",
                "Now, construct a new vote vector by taking vote 2i − 1 from the first vote vector, and the remaining votes from the second vote vector.",
                "In this newly constructed vote vector, a is still ranked m + 1th by all votes.",
                "However, lj is ranked among the top m candidates by n + 1 = n/2 + 1 votes.",
                "This is because whereas vote 2i − 1 does not rank lj among the top m candidates in the second vote vector (because j /∈ S2 i , we have lj /∈ L(S2 i )), vote 2i − 1 does rank lj among the top m candidates in the first vote vector (because j ∈ S1 i , we have lj ∈ L(S1 i )).",
                "So, a is not the winner in the newly constructed vote vector, and hence we have a correct fooling set.",
                "Theorem 20.",
                "The nondeterministic communication complexity of the ranked pairs rule is Ω(nm log m) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We omit this proof because of space constraint. 5.",
                "DISCUSSION One key obstacle to using voting for preference aggregation is the communication burden that an election places on the voters.",
                "By lowering this burden, it may become feasible to conduct more elections over more issues.",
                "In the limit, this could lead to a shift from representational government to a system in which most issues are decided by referenda-a veritable e-democracy.",
                "In this paper, we analyzed the communication complexity of the common voting rules.",
                "Knowing which voting rules require little communication is especially important when the issue to be voted on is of low enough importance that the following is true: the parties involved are willing to accept a rule that tends 86 to produce outcomes that are slightly less representative of the voters preferences, if this rule reduces the communication burden on the voters significantly.",
                "The following table summarizes the results we obtained.",
                "Rule Lower bound Upper bound plurality Ω(n log m) O(n log m) plurality w/ runoff Ω(n log m) O(n log m) STV Ω(n log m) O(n(log m)2) Condorcet Ω(nm) O(nm) approval Ω(nm) O(nm) Bucklin Ω(nm) O(nm) cup Ω(nm) O(nm) maximin Ω(nm) O(nm) Borda Ω(nm log m) O(nm log m) Copeland Ω(nm log m) O(nm log m) ranked pairs Ω(nm log m) O(nm log m) Communication complexity of voting rules, sorted from low to high.",
                "All of the upper bounds are deterministic (with the exception of maximin, for which the best deterministic upper bound we proved is O(nm log m)).",
                "All of the lower bounds hold even for nondeterministic communication and even just for determining whether a given candidate a is the winner.",
                "One area of future research is to study what happens when we restrict our attention to communication protocols that do not reveal any strategically useful information.",
                "This restriction may invalidate some of the upper bounds that we derived using multistage communication protocols.",
                "Also, all of our bounds are worst-case bounds.",
                "It may be possible to outperform these bounds when the distribution of votes has additional structure.",
                "When deciding which voting rule to use for an election, there are many considerations to take into account.",
                "The voting rules that we studied in this paper are the most common ones that have survived the test of time.",
                "One way to select among these rules is to consider recent results on complexity.",
                "The table above shows that from a communication complexity perspective, plurality, plurality with runoff, and STV are preferable.",
                "However, plurality has the undesirable property that it is computationally easy to manipulate by voting strategically [3, 7].",
                "Plurality with runoff is NP-hard to manipulate by a coalition of weighted voters, or by an individual that faces correlated uncertainty about the others votes [7, 6].",
                "STV is NP-hard to manipulate in those settings as well [7], but also by an individual with perfect knowledge of the others votes (when the number of candidates is unbounded) [2].",
                "Therefore, STV is more robust, although it may require slightly more worst-case communication as per the table above.",
                "Yet other selection criteria are the computational complexity of determining whether enough information has been elicited to declare a winner, and that of determining the optimal sequence of queries [8]. 6.",
                "REFERENCES [1] Lawrence Ausubel and Paul Milgrom.",
                "Ascending auctions with package bidding.",
                "Frontiers of Theoretical Economics, 1, 2002.",
                "No. 1, Article 1. [2] John Bartholdi, III and James Orlin.",
                "Single transferable vote resists strategic voting.",
                "Social Choice and Welfare, 8(4):341-354, 1991. [3] John Bartholdi, III, Craig Tovey, and Michael Trick.",
                "The computational difficulty of manipulating an election.",
                "Social Choice and Welfare, 6(3):227-241, 1989. [4] Avrim Blum, Jeffrey Jackson, Tuomas Sandholm, and Martin Zinkevich.",
                "Preference elicitation and query learning.",
                "Journal of Machine Learning Research, 5:649-667, 2004. [5] Wolfram Conen and Tuomas Sandholm.",
                "Preference elicitation in combinatorial auctions: Extended abstract.",
                "In Proceedings of the ACM Conference on Electronic Commerce (ACM-EC), pages 256-259, 2001. [6] Vincent Conitzer, Jerome Lang, and Tuomas Sandholm.",
                "How many candidates are needed to make elections hard to manipulate?",
                "In Theoretical Aspects of Rationality and Knowledge (TARK), pages 201-214, 2003. [7] Vincent Conitzer and Tuomas Sandholm.",
                "Complexity of manipulating elections with few candidates.",
                "In Proceedings of the National Conference on Artificial Intelligence (AAAI), pages 314-319, 2002. [8] Vincent Conitzer and Tuomas Sandholm.",
                "Vote elicitation: Complexity and strategy-proofness.",
                "In Proceedings of the National Conference on Artificial Intelligence (AAAI), pages 392-397, 2002. [9] Sven de Vries, James Schummer, and Rakesh V. Vohra.",
                "On ascending auctions for heterogeneous objects, 2003.",
                "Draft. [10] Allan Gibbard.",
                "Manipulation of voting schemes.",
                "Econometrica, 41:587-602, 1973. [11] Benoit Hudson and Tuomas Sandholm.",
                "Effectiveness of query types and policies for preference elicitation in combinatorial auctions.",
                "In International Conference on Autonomous Agents and Multi-Agent Systems (AAMAS), pages 386-393, 2004. [12] E Kushilevitz and N Nisan.",
                "Communication Complexity.",
                "Cambridge University Press, 1997. [13] Sebasti´en Lahaie and David Parkes.",
                "Applying learning algorithms to preference elicitation.",
                "In Proceedings of the ACM Conference on Electronic Commerce, 2004. [14] Noam Nisan and Ilya Segal.",
                "The communication requirements of efficient allocations and supporting prices.",
                "Journal of Economic Theory, 2005.",
                "Forthcoming. [15] David Parkes. iBundle: An efficient ascending price bundle auction.",
                "In Proceedings of the ACM Conference on Electronic Commerce (ACM-EC), pages 148-157, 1999. [16] Tuomas Sandholm.",
                "An implementation of the contract net protocol based on marginal cost calculations.",
                "In Proceedings of the National Conference on Artificial Intelligence (AAAI), pages 256-262, 1993. [17] Tuomas Sandholm and Craig Boutilier.",
                "Preference elicitation in combinatorial auctions.",
                "In Peter Cramton, Yoav Shoham, and Richard Steinberg, editors, Combinatorial Auctions, chapter 10.",
                "MIT Press, 2005. [18] Paolo Santi, Vincent Conitzer, and Tuomas Sandholm.",
                "Towards a characterization of polynomial preference elicitation with value queries in combinatorial auctions.",
                "In Conference on Learning Theory (COLT), pages 1-16, 2004. [19] Mark Satterthwaite.",
                "Strategy-proofness and Arrows conditions: existence and correspondence theorems for voting procedures and social welfare functions.",
                "Journal of Economic Theory, 10:187-217, 1975. [20] Ilya Segal.",
                "The communication requirements of social choice rules and supporting budget sets, 2004.",
                "Draft.",
                "Presented at the DIMACS Workshop on Computational Issues in Auction Design, Rutgers University, New Jersey, USA. [21] Peter Wurman and Michael Wellman.",
                "AkBA: A progressive, anonymous-price combinatorial auction.",
                "In Proceedings of the ACM Conference on Electronic Commerce (ACM-EC), pages 21-29, 2000. [22] A. C. Yao.",
                "Some complexity questions related to distributed computing.",
                "In Proceedings of the 11th ACM symposium on theory of computing (STOC), pages 209-213, 1979. [23] Martin Zinkevich, Avrim Blum, and Tuomas Sandholm.",
                "On polynomial-time preference elicitation with value queries.",
                "In Proceedings of the ACM Conference on Electronic Commerce (ACM-EC), pages 176-185, 2003. 87"
            ],
            "original_annotated_samples": [
                "Furthermore, if the agents valuation functions are drawn from certain natural subclasses, the <br>elicitation problem</br> can be solved using only polynomially many queries even in the worst case [23, 4, 13, 18, 14]."
            ],
            "translated_annotated_samples": [
                "Además, si las funciones de valoración de los agentes provienen de ciertas subclases naturales, el <br>problema de la obtención de información</br> puede resolverse utilizando solo un número polinomial de consultas incluso en el peor de los casos [23, 4, 13, 18, 14]."
            ],
            "translated_text": "Determinamos la complejidad de comunicación de las reglas de votación comunes. Las reglas (ordenadas por su complejidad de comunicación de baja a alta) son pluralidad, pluralidad con segunda vuelta, voto único transferible (STV), Condorcet, aprobación, Bucklin, taza, maximin, Borda, Copeland y pares clasificados. Para cada regla, primero proporcionamos un protocolo de comunicación determinista y un límite superior en la cantidad de bits comunicados en él; luego, damos un límite inferior en los requisitos de comunicación (incluso los no deterministas) de la regla de votación. Los límites coinciden para todas las reglas de votación excepto STV y maximin. Categorías y Descriptores de Asignaturas F.2 [Teoría de la Computación]: Análisis de Algoritmos y Complejidad de Problemas; J.4 [Aplicaciones Informáticas]: Ciencias Sociales y del Comportamiento-Economía Términos Generales Algoritmos, Economía, Teoría 1. INTRODUCCIÓN Un factor clave en la viabilidad de cualquier regla de agregación de preferencias es su carga de comunicación. Para agregar con éxito las preferencias de los agentes, generalmente no es necesario que todos los agentes informen toda su información de preferencias. Los protocolos inteligentes que obtienen parcial y secuencialmente las preferencias de los agentes tienen el potencial de reducir drásticamente la comunicación requerida. Esto tiene al menos las siguientes ventajas: • Puede hacer factible la agregación de preferencias en entornos donde la cantidad total de información de preferencias es demasiado grande para comunicar. • Incluso cuando comunicar toda la información de preferencias es factible, reducir los requisitos de comunicación disminuye la carga impuesta a los agentes. Esto es especialmente cierto cuando los agentes, en lugar de conocer todas sus preferencias de antemano, necesitan invertir esfuerzo (como cálculos o recopilación de información) para determinar sus preferencias. • Preserva (parte de) la privacidad de los agentes. La mayor parte del trabajo sobre la reducción de la carga de comunicación en la agregación de preferencias se ha centrado en entornos de asignación de recursos como subastas combinatorias, en las que un subastador subasta un número de artículos (posiblemente distintos) en un solo evento. Debido a que en una subasta combinatoria, los postores pueden tener valoraciones separadas para cada uno de un número exponencial de posibles paquetes de artículos, este es un escenario en el que reducir la carga de comunicación es especialmente crucial. Esto se puede lograr complementando al subastador con un provocador que elicitara incrementalmente partes de las preferencias de los postores según sea necesario, basándose en lo que los postores han revelado sobre sus preferencias hasta el momento, como sugieren Conen y Sandholm [5]. Por ejemplo, el solicitante puede preguntar por el valor de un postor para un paquete específico (consultas de valor), cuál de dos paquetes prefiere el postor (consultas de orden), qué paquete clasifica en la posición k o cuál es la posición de un paquete dado (consultas de clasificación), qué paquete compraría dado un vector particular de precios (consultas de demanda), etc., hasta que se pueda determinar (al menos) la asignación final. Experimentalmente, esto produce a drástico ahorro en la revelación de preferencias [11]. Además, si las funciones de valoración de los agentes provienen de ciertas subclases naturales, el <br>problema de la obtención de información</br> puede resolverse utilizando solo un número polinomial de consultas incluso en el peor de los casos [23, 4, 13, 18, 14]. Para una revisión de la obtención de preferencias en subastas combinatorias, consulte [17]. Las subastas combinatorias ascendentes son una forma especial conocida de obtención de preferencias, donde el encuestador realiza consultas de demanda con precios crecientes [15, 21, 1, 9]. Finalmente, los problemas de asignación de recursos 78 también han sido estudiados desde el punto de vista de la complejidad de la comunicación, derivando así límites inferiores sobre la comunicación requerida. Por ejemplo, Nisan y Segal muestran que se requiere comunicación exponencial incluso para obtener un excedente mayor al obtenido al subastar todos los objetos como un único paquete [14]. Segal también estudia reglas de elección social en general, y muestra que para una gran clase de reglas de elección social, los conjuntos de presupuesto de apoyo deben ser revelados de tal manera que si cada agente prefiere el mismo resultado en su conjunto de presupuesto, esto demuestra la optimalidad de ese resultado. Segal luego utiliza esta caracterización para demostrar límites en la comunicación requerida en la asignación de recursos, así como en entornos de emparejamiento [20]. En este documento, nos enfocaremos en los requisitos de comunicación de una subclase generalmente aplicable de reglas de elección social, comúnmente conocidas como reglas de votación. En un entorno de votación, hay un conjunto de resultados de candidatos sobre los cuales los votantes expresan sus preferencias al enviar un voto (normalmente, una clasificación de los candidatos), y el ganador (es decir, el resultado elegido) se determina en función de estos votos. La comunicación requerida por las reglas de votación puede ser grande ya sea porque el número de votantes es grande (como, por ejemplo, en elecciones nacionales), o porque el número de candidatos es grande (por ejemplo, los agentes pueden votar sobre asignaciones de un número de recursos), o ambos. El trabajo previo [8] ha estudiado la obtención de información en votaciones, analizando qué tan difícil es computacionalmente decidir si se puede determinar un ganador con la información obtenida hasta el momento, así como qué tan difícil es encontrar la secuencia óptima de preguntas dadas sospechas perfectas sobre las preferencias de los votantes. Además, ese artículo discute cuestiones estratégicas (teóricas de juegos) introducidas por la obtención de información. Por el contrario, en este artículo nos preocupamos por el número máximo de bits que deben comunicarse para ejecutar una regla de votación dada, cuando no se conoce de antemano las preferencias de los votantes. Determinamos la complejidad de comunicación de las reglas de votación comunes. Para cada regla, primero damos una cota superior en la complejidad de comunicación (determinística) proporcionando un protocolo de comunicación para ella y analizando cuántos bits necesitan ser transmitidos en este protocolo. (Los resultados de Segal [20] no se aplican a la mayoría de las reglas de votación porque la mayoría de las reglas de votación no son intersección-monótonas (o incluso monótonas).) Para muchas de las reglas de votación bajo estudio, resulta que no se puede hacer mejor que simplemente permitir que cada votante comunique inmediatamente toda su información (potencialmente relevante). Sin embargo, para algunas reglas (como la pluralidad con segunda vuelta, STV y taza) existe un protocolo de comunicación multietapa directo que, con un análisis detallado, se puede demostrar que supera significativamente la comunicación inmediata de toda la información (potencialmente relevante). Finalmente, para algunas reglas (como las reglas de Condorcet y Bucklin), necesitamos introducir un protocolo de comunicación más complejo para lograr el mejor límite superior posible. Para dos de las reglas que estudiamos que son intersección-monótonas, a saber, las reglas de aprobación y Condorcet, los resultados de Segal de hecho pueden ser utilizados para dar pruebas alternativas de nuestros límites inferiores. Solo proporcionamos pruebas directas para estas reglas aquí porque 1) estas pruebas directas son de las más fáciles en este documento, 2) las pruebas alternativas son no triviales incluso dados los resultados de Segal, y 3) se aplica una restricción de espacio. Sin embargo, esperamos incluir también las pruebas alternativas en una versión posterior. Después de obtener los límites superiores, demostramos que son ajustados al proporcionar límites inferiores coincidentes en la complejidad de comunicación (incluso la no determinista) de cada regla de votación. Hay dos excepciones: STV, para el cual nuestros límites superiores e inferiores difieren en un factor log m; y maximin, para el cual nuestro mejor límite superior determinístico también es un factor log m por encima del límite inferior (no determinístico), aunque proporcionamos un límite superior no determinístico que coincide con el límite inferior. 2. REVISIÓN DE LAS REGLAS DE VOTACIÓN En esta sección, revisamos las reglas de votación comunes que estudiamos en este documento. Una regla de votación es una función que asigna un vector de votos de los n votantes (es decir, preferencias sobre candidatos) a uno de los m candidatos (el ganador) en el conjunto de candidatos C. En algunos casos (como la regla de Condorcet), la regla también puede declarar que no existe un ganador. No nos preocupamos por lo que sucede en caso de un empate entre candidatos (nuestros límites inferiores se mantienen independientemente de cómo se resuelvan los empates, y los protocolos de comunicación utilizados para nuestros límites superiores no intentan romper los empates). Todas las reglas que estudiamos son reglas basadas en el rango, lo que significa que un voto se define como un ordenamiento de los candidatos (con la excepción de la regla de la pluralidad, para la cual un voto es un único candidato, y la regla de aprobación, para la cual un voto es un subconjunto de los candidatos). Consideraremos las siguientes reglas de votación. (Para reglas que definen una puntuación, el candidato con la puntuación más alta gana.) • reglas de puntuación. Sea α = α1, . . . , αm un vector de enteros tal que α1 ≥ α2 . . . ≥ αm. Para cada votante, un candidato recibe α1 puntos si es clasificado en primer lugar por el votante, α2 si es clasificado en segundo lugar, etc. La puntuación sα de un candidato es el número total de puntos que recibe el candidato. La regla de Borda es la regla de puntuación con α = m−1, m−2, . . . , 0. La regla de la pluralidad es la regla de puntuación con α = 1, 0, . . . , 0. • voto único transferible (STV). La regla avanza a través de una serie de m - 1 rondas. En cada ronda, el candidato con la puntuación de pluralidad más baja (es decir, el menor número de votantes que lo clasifican en primer lugar entre los candidatos restantes) es eliminado (y cada uno de los votos para ese candidato se transfieren al siguiente candidato restante en el orden dado en ese voto). El ganador es el último candidato restante. • mayoría con segunda vuelta. En esta regla, una primera ronda elimina a todos los candidatos excepto a los dos con las puntuaciones de pluralidad más altas. Los votos se transfieren a estos como en la regla de VST, y una segunda ronda determina al ganador de estos dos. • aprobación. Cada votante etiqueta a cada candidato como aprobado o desaprobado. El candidato aprobado por el mayor número de votantes gana. • Condorcet. Para cualquier par de candidatos i y j, sea N(i, j) el número de votantes que prefieren a i sobre j. Si hay un candidato i que es preferido por la mayoría de los votantes a cualquier otro candidato (es decir, N(i, j) > N(j, i) para todo j = i, es decir, i gana en cada elección por pares), entonces el candidato i gana. El término protocolo de votación se usa a menudo para describir el mismo concepto, pero buscamos hacer una distinción clara entre la regla que mapea las preferencias a los resultados y el protocolo de comunicación/obtención utilizado para implementar esta regla. (Simpson). El puntaje maximin de i es s(i) = minj=i N(i, j), es decir, su peor desempeño en una elección por pares. El candidato con la puntuación maximin más alta gana. • Copeland. Para cualquier par de candidatos distintos i y j, sea C(i, j) = 1 si N(i, j) > N(j, i), C(i, j) = 1/2 si N(i, j) = N(j, i) y C(i, j) = 0 si N(i, j) < N(j, i). El puntaje de Copeland del candidato i es s(i) = j=i C(i, j). • taza (comparaciones binarias secuenciales). La regla de la copa se define por un árbol binario equilibrado T con un hoja por candidato, y una asignación de candidatos a hojas (cada hoja recibe un candidato). Cada nodo no hoja se le asigna el ganador de la elección por pares de los nodos hijos; el candidato asignado a la raíz gana. • Bucklin. Para cualquier candidato i y entero l, sea B(i, l) el número de votantes que clasifican al candidato i entre los l primeros candidatos. El ganador es arg mini(min{l : B(i, l) > n/2}). Es decir, si decimos que un votante aprueba a sus l candidatos principales, entonces aumentamos repetidamente l en 1 hasta que algún candidato sea aprobado por más de la mitad de los votantes, y este candidato es el ganador. • pares clasificados. Esta regla determina un orden en todos los candidatos, y el ganador es el candidato en la parte superior de este orden. Ordena todos los pares ordenados de candidatos (i, j) por N(i, j), el número de votantes que prefieren a i sobre j. Comenzando con el par (i, j) con el mayor N(i, j), aseguramos el resultado de su elección en pareja (i j). Luego, pasamos al siguiente par y bloqueamos el resultado de su elección por pares. Continuamos bloqueando cada resultado en pares que no contradiga el orden establecido hasta el momento. Enfatizamos que estas definiciones de reglas de votación no se preocupan por cómo se obtienen los votos de los votantes; todas las reglas de votación, incluidas aquellas que se definen sugestivamente en términos de rondas, son en realidad solo funciones que asignan el vector de todos los votos de los votantes a un ganador. Sin embargo, siempre hay muchas formas diferentes de obtener los votos (o las partes relevantes de estos) de los votantes. Por ejemplo, en la regla de la pluralidad con segunda vuelta, una forma de obtener los votos es pedir a cada votante que declare su orden completo de los candidatos de antemano. Alternativamente, podemos primero pedir a cada votante que declare solo su candidato más preferido; luego, sabremos los dos candidatos en la segunda vuelta, y podemos preguntar a cada votante cuál de estos dos candidatos prefiere. Por lo tanto, distinguimos entre la regla de votación (la asignación de vectores de votos a resultados) y el protocolo de comunicación (que determina cómo se obtienen realmente las partes relevantes de los votos de los votantes). El objetivo de este documento es proporcionar protocolos de comunicación eficientes para las reglas de votación recién definidas, y demostrar que no existen protocolos de comunicación más eficientes. Es interesante notar que la elección del protocolo de comunicación puede afectar el comportamiento estratégico de los votantes. Los protocolos de comunicación de múltiples etapas pueden revelar a los votantes cierta información sobre cómo están votando los demás votantes (por ejemplo, en el protocolo de comunicación de dos etapas recién dado para la pluralidad con segunda vuelta, en la segunda etapa los votantes sabrán qué dos candidatos tienen las puntuaciones de pluralidad más altas). En general, cuando los votantes reciben esa información, puede darles incentivos para votar de manera diferente a como lo harían en un protocolo de comunicación de una sola etapa en el que todos los votantes declaran sus votos completos simultáneamente. Por supuesto, incluso el protocolo de comunicación de una sola etapa no es a prueba de estrategias para ninguna regla de votación razonable, según el teorema de Gibbard-Satterthwaite [10, 19]. Sin embargo, esto no significa que no debamos preocuparnos por agregar aún más oportunidades para el voto estratégico. De hecho, muchos de los protocolos de comunicación introducidos en este documento sí presentan oportunidades adicionales para el voto estratégico, pero no tenemos espacio para discutirlo aquí. (En trabajos anteriores [8], sí proporcionamos un ejemplo donde un protocolo de obtención de información para la regla de votación por aprobación introduce el voto estratégico, y damos principios para diseñar protocolos de obtención de información que no introduzcan problemas estratégicos). Ahora que hemos revisado las reglas de votación, pasamos a una breve revisión de la teoría de la complejidad de la comunicación. 3. REVISIÓN DE ALGUNA TEORÍA DE LA COMPLEJIDAD DE LA COMUNICACIÓN En esta sección, revisamos el modelo básico de un problema de comunicación y la técnica de límite inferior de construcción de un conjunto engañoso. (El modelo básico de un problema de comunicación se debe a Yao [22]; para obtener una visión general, consulte Kushilevitz y Nisan [12].) Cada jugador 1 ≤ i ≤ n conoce (solo) la entrada xi. Juntos, buscan calcular f(x1, x2, . . . , xn). En un protocolo determinista para calcular f, en cada etapa, uno de los jugadores anuncia (a todos los demás jugadores) un bit de información basado en su propia entrada y los bits anunciados hasta el momento. Finalmente, la comunicación termina y todos los jugadores conocen f(x1, x2, . . . , xn). El objetivo es minimizar el número de bits enviados en el peor caso (sobre todos los vectores de entrada). La complejidad de comunicación determinística de un problema es el número máximo de bits enviados en el peor caso en el mejor protocolo determinístico (correcto) para resolverlo. En un protocolo no determinista, el siguiente bit a enviar puede ser elegido de manera no determinista. Para los propósitos de este documento, consideraremos un protocolo no determinista como correcto si para cada vector de entrada, existe alguna secuencia de elecciones no deterministas que los jugadores pueden hacer para que los jugadores conozcan el valor de f cuando el protocolo termina. La complejidad de comunicación no determinista de un problema es el número máximo de bits enviados en el peor caso en el mejor protocolo no determinista (correcto) para él. Ahora estamos listos para dar la definición de un conjunto engañoso. Definición 1. Un conjunto engañoso es un conjunto de vectores de entrada {(x1 1, x1 2, . . . , x1 n), (x2 1, x2 2, . . . , x2 n), . . . , (xk 1 , xk 2 , . . . , xk n) tal que para cualquier i, f(xi 1, xi 2, . . . , xi n) = f0 para alguna constante f0, pero para cualquier i = j, existe algún vector (r1, r2, . . . , rn) ∈ {i, j}n tal que f(xr1 1 , xr2 2 , . . . , xrn n ) = f0. (Es decir, podemos mezclar las entradas de los dos vectores de entrada para obtener un vector con un valor de función diferente). Se sabe que si existe un conjunto engañoso de tamaño k, entonces log k es una cota inferior en la complejidad de la comunicación (incluso en la complejidad de la comunicación no determinista) [12]. Un protocolo a prueba de estrategias es aquel en el que es del mejor interés de los jugadores reportar sus preferencias de manera veraz. Para los propósitos de este documento, f es la regla de votación que asigna los votos al candidato ganador, y xi es el voto del votante (la información que la regla de votación requeriría del votante si no hubiera posibilidad de comunicación en múltiples etapas, es decir, el candidato más preferido (mayoría), los candidatos aprobados (aprobación), o la clasificación de todos los candidatos (todos los demás protocolos)). Sin embargo, cuando obtenemos nuestros límites inferiores, f solo significará si un candidato distinguido a gana. (Es decir, f es 1 si a gana, y 0 en caso contrario). Esto fortalecerá nuestros resultados de límite inferior (porque implica que incluso averiguar si un candidato dado gana es difícil). Por lo tanto, un conjunto engañoso en nuestro contexto es un conjunto de vectores de votos de manera que a gane (no gane) con cada uno de ellos; pero para cualquier par de vectores de votos diferentes en el conjunto, hay una forma de tomar los votos de algunos votantes del primer vector y los votos de los otros del segundo vector, de manera que a no gane (gane). Para simplificar las demostraciones de nuestros límites inferiores, hacemos suposiciones como que el número de votantes n es impar en muchas de estas demostraciones. Por lo tanto, técnicamente, no demostramos el límite inferior para los pares (número de candidatos, número de votantes) (m, n) que no cumplen con estas suposiciones (por ejemplo, si hacemos la suposición anterior, entonces técnicamente no demostramos el límite inferior para ningún par (m, n) en el que n sea par). Sin embargo, siempre demostramos el límite inferior para un conjunto representativo de pares (m, n). Por ejemplo, para cada uno de nuestros límites inferiores, sucede que para infinitos valores de m, hay infinitos valores de n tales que el límite inferior se demuestra para el par (m, n). RESULTADOS Estamos listos para presentar nuestros resultados. Para cada regla de votación, primero proporcionamos un protocolo de comunicación determinista para determinar al ganador y establecer un límite superior. Luego, damos un límite inferior en la complejidad de comunicación no determinista (incluso en la complejidad de decidir si un candidato dado gana, que es una pregunta más fácil). Los límites inferiores coinciden con los límites superiores en todos los casos excepto en dos: la regla STV (límite superior O(n(log m)2); límite inferior Ω(n log m)) y la regla maximin (límite superior O(nm log m), aunque proporcionamos un protocolo no determinista que es O(nm); límite inferior Ω(nm)). Cuando discutimos una regla de votación en la que los votantes clasifican a los candidatos, representaremos una clasificación en la que el candidato c1 está en primer lugar, c2 en segundo lugar, etc., como c1 c2 . . . cm. Una preocupación posible es que en el caso de que sean posibles los empates, puede requerir mucha comunicación verificar si un candidato específico a está entre los ganadores, pero poca comunicación para producir a uno de los ganadores. Sin embargo, todos los conjuntos de engaños que utilizamos en las demostraciones tienen la propiedad de que si a gana, entonces a es el único ganador. Por lo tanto, en estos conjuntos engañosos, si se conoce a alguno de los ganadores, entonces se sabe si a es un ganador. Por lo tanto, calcular uno de los ganadores requiere al menos tanta comunicación como verificar si a está entre los ganadores. En general, cuando un problema de comunicación permite múltiples respuestas correctas para un vector de entradas dado, esto se conoce como calcular una relación en lugar de una función [12]. Sin embargo, según lo anterior, podemos restringir nuestra atención a un subconjunto del dominio donde la regla de votación realmente es una función (de un solo valor), por lo que las técnicas de cota inferior para funciones en lugar de relaciones serán suficientes. A veces, para los propósitos de una demostración, el orden interno de un subconjunto de los candidatos no importa, y en este caso no lo especificaremos. Por ejemplo, si S = {c2, c3}, entonces c1 S c4 indica que se puede utilizar tanto la clasificación c1 c2 c3 c4 como la clasificación c1 c3 c2 c4 para la prueba. Primero damos un límite superior universal. Teorema 1. La complejidad de comunicación determinística de cualquier regla de votación basada en rangos es O(nm log m). Prueba. Este límite se logra simplemente haciendo que todos comuniquen su orden completo de los candidatos (indicar el rango de un candidato individual solo requiere O(log m) bits, por lo que cada uno de los n votantes puede simplemente indicar el rango de cada uno de los m candidatos). El siguiente lema será útil en algunas de nuestras demostraciones. Lema 1. Si m divide a n, entonces log(n!) - m log((n/m)!) ≥ n(log m - 1)/2. Prueba. Si n/m = 1 (es decir, n = m), entonces esta expresión se simplifica a log(n!). Tenemos log(n!) = n i=1 log i ≥ n x=1 log(i)dx, lo cual, utilizando integración por partes, es igual a n log n − (n − 1) > n(log n − 1) = n(log m − 1) > n(log m − 1)/2. Por lo tanto, podemos asumir que n/m ≥ 2. Observamos que log(n!) = n i=1 log i = n/m−1 i=0 m j=1 log(im+j) ≥ n/m−1 i=1 m j=1 log(im) = m n/m−1 i=1 log(im), y que m log((n/m)!) = m n/m i=1 log(i). Por lo tanto, log(n!) − m log((n/m)!) ≥ m n/m−1 i=1 log(im) − m n/m i=1 log(i) = m(( n/m−1 i=1 log(im/i))−log(n/m)) = m((n/m− 1) log m−log n+log m) = n log m−m log n. Ahora, usando el hecho de que n/m ≥ 2, tenemos m log n = n(m/n) log m(n/m) = n(m/n)(log m + log(n/m)) ≤ n(1/2)(log m + log 2). Por lo tanto, log(n!) − m log((n/m)!) ≥ n log m − m log n ≥ n log m − n(1/2)(log m + log 2) = n(log m − 1)/2. Teorema 2. La complejidad de comunicación determinística de la regla de la pluralidad es O(n log m). Prueba. Indicar a uno de los candidatos solo requiere O(log m) bits, por lo que cada votante puede simplemente indicar a su candidato más preferido. Teorema 3. La complejidad de comunicación no determinista de la regla de la pluralidad es Ω(n log m) (incluso para decidir si un candidato dado a gana). Prueba. Exhibiremos un conjunto de engaño de tamaño n ! (( n m )! )m donde n = (n−1)/2. Tomar el logaritmo de esto da como resultado log(n ! )− m log((n /m)! ), por lo que el resultado se sigue del Lema 1. El conjunto de engaño estará formado por todos los vectores de votos que cumplan las siguientes restricciones: • Para cualquier 1 ≤ i ≤ n, los votantes 2i−1 y 2i votan lo mismo. • Cada candidato recibe la misma cantidad de votos de los primeros 2n = n − 1 votantes. • El último votante (votante n) vota por a. El candidato A gana con cada uno de estos vectores de votos debido al voto adicional por A del último votante. Dado que m divide a n, veamos cuántos vectores de voto hay en el conjunto engañoso. Necesitamos distribuir n pares de votantes de manera equitativa entre m candidatos, para un total de n /m pares de votantes por candidato; y hay precisamente n ! (( n m )! )m formas de hacer esto. Todo lo que queda por demostrar es que para cualquier par de vectores de votos distintos en el conjunto engañoso, podemos hacer que cada uno de los votantes vote de acuerdo con uno de estos dos vectores de manera que un candidato pierda. Sea i un número tal que los dos vectores de voto discrepan en el candidato por el cual votan los votantes 2i − 1 y 2i. Sin pérdida de generalidad, supongamos que en el primer vector de votos, estos votantes no votan por a (sino por algún otro candidato, b, en su lugar). Ahora, construye un nuevo vector de votos tomando los votos 2i − 1 y 2i del primer vector de votos, y los votos restantes del segundo vector de votos. Entonces, b recibe 2n /m + 2 votos en este vector de votación recién construido, mientras que a recibe como máximo 2n /m+1 votos. Por lo tanto, a no es el ganador en el vector de votación recién construido, y por lo tanto tenemos un conjunto de engaño correcto. Teorema 4. La complejidad de comunicación determinística de la regla de pluralidad con segunda vuelta es O(n log m). Prueba. Primero, permita que cada votante indique a su candidato más preferido usando log m bits. Después de esto, se conocen los dos candidatos en la segunda vuelta, y cada votante puede indicar cuál prefiere usando un solo bit adicional. Teorema 5. La complejidad de comunicación no determinista de la pluralidad con la regla de desempate es Ω(n log m) (incluso para decidir si un candidato dado a gana). Prueba. Exhibiremos un conjunto de engaño de tamaño n ! (( n m )! )m donde m = m/2 y n = (n − 2)/4. Tomar el logaritmo de esto da como resultado log(n !) − m log((n /m )! ), por lo que el resultado se sigue del Lema 1. Divide a los candidatos en m pares: (c1, d1), (c2, d2), . . . , (cm , dm ) donde c1 = a y d1 = b. El conjunto de engaño estará formado por todos los vectores de votos que satisfacen las siguientes restricciones: • Para cualquier 1 ≤ i ≤ n, los votantes 4i − 3 y 4i − 2 clasifican a los candidatos ck(i) a C − {a, ck(i)}, para algún candidato ck(i). (Si ck(i) = a, entonces el voto es simplemente a C − {a}.) • Para cualquier 1 ≤ i ≤ n, los votantes 4i − 1 y 4i clasifican a los candidatos dk(i) a C − {a, dk(i)} (es decir, su candidato más preferido es el candidato que está emparejado con el candidato por el que votaron los dos votantes anteriores). Una prueba intuitiva de esto es la siguiente. Podemos contar el número de permutaciones de n elementos de la siguiente manera. Primero, divide los elementos en m cubetas de tamaño n / m, de modo que si x se coloca en una cubeta de índice inferior a y, entonces x se indexará más bajo en la permutación final. Luego, decide la permutación dentro de cada cubeta (para la cual hay (n / m)! opciones por cubeta). Se deduce que n! es igual al número de formas de dividir n elementos en m contenedores de tamaño n/m, multiplicado por ((n/m)!)^m. • Cada candidato está clasificado en la parte superior de igual cantidad de los primeros 4n = n − 2 votos. • El votante 4n + 1 = n−1 clasifica a los candidatos a C−{a}. • El votante 4n + 2 = n clasifica a los candidatos b C − {b}. El candidato a gana con cada uno de estos vectores de voto: debido a los dos últimos votos, los candidatos a y b están un voto por delante de todos los demás candidatos y avanzan a la segunda vuelta, y en este punto todos los votos que tenían a otro candidato clasificado en primer lugar se transfieren a a, de modo que a gana la segunda vuelta. Dado que m divide a n, veamos cuántos vectores de voto hay en el conjunto engañoso. Necesitamos distribuir n grupos de cuatro votantes de manera equitativa entre los m pares de candidatos, y (como en la demostración del Teorema 3) hay n ! (( n m )! )m formas de hacerlo. Todo lo que queda por demostrar es que para cualquier par de vectores de votos distintos en el conjunto de engaño, podemos hacer que cada uno de los votantes vote de acuerdo con uno de estos dos vectores de tal manera que a pierda. Sea i un número tal que ck(i) no sea el mismo en ambos de estos dos vectores de votos, es decir, c1 k(i) (ck(i) en el primer vector de votos) no es igual a c2 k(i) (ck(i) en el segundo vector de votos). Sin pérdida de generalidad, supongamos que c1 k(i) = a. Ahora, construye un nuevo vector de votos tomando los votos 4i − 3, 4i − 2, 4i − 1, 4i del primer vector de votos, y los votos restantes del segundo vector de votos. En este nuevo vector de voto construido, c1 k(i) y d1 k(i) reciben cada uno 4n /m+2 votos en la primera ronda, mientras que a recibe como máximo 4n /m+1 votos. Por lo tanto, a no continúa hasta la segunda vuelta en el nuevo vector de votación construido, y por lo tanto tenemos un conjunto de engaño correcto. Teorema 6. La complejidad de comunicación no determinista de la regla de Borda es Ω(nm log m) (incluso para decidir si un candidato dado a gana). Prueba. Exhibiremos un conjunto de engaño de tamaño (m ! )n donde m = m−2 y n = (n−2)/4. Esto demostrará el teorema porque m ! es Ω(m log m), por lo que log((m ! )n ) = n log(m !) es Ω(nm log m). Para cada vector (π1, π2, . . . , πn) que consiste en n ordenamientos de todos los candidatos excepto a y otro candidato fijo b (técnicamente, los ordenamientos toman la forma de una función biunívoca πi: {1, 2, . . . , m} → C − {a, b} con πi(j) = c indicando que el candidato c es el j-ésimo en el orden representado por πi), deja que el siguiente vector de votos sea un elemento del conjunto engañoso: • Para 1 ≤ i ≤ n, deja que los votantes 4i − 3 y 4i − 2 clasifiquen a los candidatos a b πi(1) πi(2) . . . πi(m). • Para 1 ≤ i ≤ n, deja que los votantes 4i − 1 y 4i clasifiquen a los candidatos πi(m) πi(m − 1) . . . πi(1) b a. • Deja que el votante 4n + 1 = n − 1 clasifique a los candidatos a b π0(1) π0(2) . . . π0(m) (donde π0 es un orden arbitrario de los candidatos excepto a y b que es el mismo para cada elemento del conjunto engañoso). • Deja que el votante 4n + 2 = n clasifique a los candidatos π0(m) π0(m − 1) . . . π0(1) a b. Observamos que este conjunto engañoso tiene un tamaño de (m!)n, y que el candidato a gana en cada vector de votos en el conjunto engañoso (para ver por qué, observamos que para cualquier 1 ≤ i ≤ n, los votos 4i-3 y 4i-2 clasifican a los candidatos de manera exactamente opuesta a los votos 4i-1 y 4i, lo que bajo la regla de Borda significa que se cancelan entre sí; y los dos últimos votos dan un punto más a a que a cualquier otro candidato, además de b que recibe dos puntos menos que a). Todo lo que queda por demostrar es que para cualquier par de vectores de votos distintos en el conjunto de engaño, podemos hacer que cada uno de los votantes vote de acuerdo con uno de estos dos vectores de tal manera que a pierda. Que el primer vector de votos corresponda al vector (π1 1, π1 2, . . . , π1 n), y que el segundo vector de votos corresponda al vector (π2 1, π2 2, . . . , π2 n). Para algunos i, debemos tener π1 i = π2 i, de modo que para algún candidato c /∈ {a, b}, (π1 i )−1 (c) < (π2 i )−1 (c) (es decir, c está clasificado más alto en π1 i que en π2 i). Ahora, construye un nuevo vector de votos tomando los votos 4i−3 y 4i−2 del primer vector de votos, y los votos restantes del segundo vector de votos, ya que la puntuación de Borda permanece sin cambios. Sin embargo, debido a que c está clasificado más alto en π1 i que en π2 i , c recibe al menos 2 puntos más de los votos 4i−3 y 4i − 2 en el vector de votos recién construido que en el segundo vector de votos. Se deduce que c tiene una puntuación de Borda más alta que a en el vector de voto recién construido. Por lo tanto, a no es el ganador en el vector de votación recién construido, y por lo tanto tenemos un conjunto de engaño correcto. Teorema 7. La complejidad de comunicación no determinista de la regla de Copeland es Ω(nm log m) (incluso para decidir si un candidato dado a gana). Prueba. Exhibiremos un conjunto de engaño de tamaño (m ! )n donde m = (m − 2)/2 y n = (n − 2)/2. Esto demostrará el teorema porque m ! es Ω(m log m), por lo que log((m ! )n ) = n log(m !) es Ω(nm log m). Escribimos el conjunto de candidatos como la siguiente unión disjunta: C = {a, b} ∪ L ∪ R donde L = {l1, l2, . . . , lm } y R = {r1, r2, . . . , rm }. Para cada vector (π1, π2, . . . , πn) que consiste en n permutaciones de los enteros del 1 al m (πi: {1, 2, . . . , m} → {1, 2, . . . , m}), deja que el siguiente vector de votos sea un elemento del conjunto engañoso: • Para 1 ≤ i ≤ n, deja que el votante 2i − 1 clasifique a los candidatos a b lπi(1) rπi(1) lπi(2) rπi(2) . . . lπi(m) rπi(m). • Para 1 ≤ i ≤ n, deja que el votante 2i clasifique a los candidatos rπi(m) lπi(m) rπi(m −1) lπi(m −1) . . . rπi(1) lπi(1) b a. • Deja que el votante n − 1 = 2n + 1 clasifique a los candidatos a b l1 r1 l2 r2 . . . lm rm. • Deja que el votante n = 2n + 2 clasifique a los candidatos rm lm rm −1 lm −1 . . . r1 l1 a b. Observamos que este conjunto engañoso tiene tamaño (m ! )n, y que el candidato a gana en cada vector de votos en el conjunto engañoso (cada par de candidatos está empatado en su elección por pares, con la excepción de que a vence a b, de modo que a gana la elección por medio punto). Todo lo que queda por demostrar es que para cualquier par de vectores de votos distintos en el conjunto de engaño, podemos hacer que cada uno de los votantes vote de acuerdo con uno de estos dos vectores de tal manera que a pierda. Que el primer vector de votos corresponda al vector (π1 1, π1 2, . . . , π1 n), y que el segundo vector de votos corresponda al vector (π2 1, π2 2, . . . , π2 n). Para algunos i, debemos tener π1 i = π2 i, de modo que para algún j ∈ {1, 2, . . . , m}, tengamos (π1 i)−1 (j) < (π2 i)−1 (j). Ahora, construye un nuevo vector de votos tomando el voto 2i−1 del primer vector de votos, y los votos restantes del segundo vector de votos, ya que la puntuación de Copeland permanece sin cambios. Consideremos la puntuación de lj. Primero observamos que el rango de lj en el voto 2i − 1 en el vector de voto recién construido es al menos 2 más alto que en el segundo vector de voto, porque (π1 i )−1 (j) < (π2 i )−1 (j). Que D1 (lj) sea el conjunto de candidatos en L ∪ R que el votante 2i − 1 clasificó por debajo de lj en el primer vector de votos (D1 (lj) = {c ∈ L ∪ R : lj 1 2i−1 c}), y que D2 (lj) sea el conjunto de candidatos en L ∪ R que el votante 2i − 1 clasificó por debajo de lj en el segundo vector de votos (D2 (lj) = {c ∈ L ∪ R : lj 2 2i−1 c}). Entonces, se deduce que en el vector de voto recién construido, lj vence a todos los candidatos en D1 (lj) - D2 (lj) en sus elecciones de a pares (porque lj recibe un voto adicional en cada una de estas elecciones de a pares en comparación con el segundo vector de voto), y pierde contra todos los candidatos en D2 (lj) - D1 (lj) (porque lj pierde un voto en cada una de estas elecciones de a pares en comparación con el segundo vector de voto), y empata con todos los demás. Pero |D1 (lj)| − |D2 (lj)| ≥ 2, y por lo tanto |D1 (lj) − D2 (lj)| − |D2 (lj) − D1 (lj)| ≥ 2. Por lo tanto, en el vector de votos recién construido, lj tiene al menos dos victorias más en parejas que derrotas en parejas, y por lo tanto tiene al menos 1 punto más que si lj hubiera empatado todas sus elecciones en pareja. Por lo tanto, lj tiene una puntuación de Copeland más alta que a en el nuevo vector de voto construido. Por lo tanto, a no es el ganador en el vector de votación recién construido, y por lo tanto tenemos un conjunto de engaño correcto. Teorema 8. La complejidad de comunicación no determinística de la regla maximin es O(nm). Prueba. El protocolo no determinista adivinará cuál candidato w es el ganador, y, para cada otro candidato c, cuál es el candidato o(c) contra el cual c recibe su puntuación más baja en una elección por pares. Entonces, que cada votante comunique lo siguiente: • para cada candidato c = w, si prefiere a c sobre w; • para cada candidato c = w, si prefiere a c sobre o(c). Observamos que esto requiere la comunicación de 2n(m− 1) bits. Si las suposiciones fueran correctas, entonces, dejando que N(d, e) sea el número de votantes que prefieren al candidato d sobre el candidato e, deberíamos tener N(c, o(c)) < N(w, c) para cualquier c = w, c = w, lo cual demostrará que w gana la elección. Teorema 9. La complejidad de comunicación no determinista de la regla maximin es Ω(nm) (incluso para decidir si un candidato dado a gana). Prueba. Exhibiremos un conjunto de engaño de tamaño 2n m donde m = m − 2 y n = (n − 1)/4. Que b sea un candidato distinto de a. Para cada vector (S1, S2, . . . , Sn) que consiste en n subconjuntos Si ⊆ C − {a, b}, deja que el siguiente vector de votos sea un elemento del conjunto engañoso: • Para 1 ≤ i ≤ n, deja que los votantes 4i − 3 y 4i − 2 clasifiquen a los candidatos Si a C − (Si ∪ {a, b}) b. • Para 1 ≤ i ≤ n, deja que los votantes 4i − 1 y 4i clasifiquen a los candidatos b C − (Si ∪ {a, b}) a Si. • Deja que el votante 4n + 1 = n clasifique a los candidatos a b C − {a, b}. Observamos que este conjunto engañoso tiene un tamaño de (2m )n = 2n m, y que el candidato a gana en cada vector de votos en el conjunto engañoso (en cada una de las elecciones por pares, a es clasificado más alto que su oponente por 2n +1 = (n+1)/2 > n/2 votos). Todo lo que queda por demostrar es que para cualquier par de vectores de votos distintos en el conjunto de engaño, podemos hacer que cada uno de los votantes vote de acuerdo con uno de estos dos vectores de tal manera que a pierda. Que el primer vector de votos corresponda al vector (S1 1 , S1 2 , . . . , S1 n ), y que el segundo vector de votos corresponda al vector (S2 1 , S2 2 , . . . , S2 n ). Para algunos i, debemos tener S1 i = S2 i, de modo que ya sea S1 i S2 i o S2 i S1 i. Sin pérdida de generalidad, supongamos que S1 i S2 i , y sea c algún candidato en S1 i − S2 i. Ahora, construye un nuevo vector de votos tomando los votos 4i − 3 y 4i − 2 del primer vector de votos, y los votos restantes del segundo vector de votos. En este nuevo vector de votación construido, a es clasificado más alto que c por solo 2n - 1 votantes, por la siguiente razón. Mientras que los votantes 4i−3 y 4i − 2 no clasifican a c por encima de a en el segundo vector de votos (porque c /∈ S2 i ), los votantes 4i − 3 y 4i − 2 sí clasifican a c por encima de a en el primer vector de votos (porque c ∈ S1 i ). Además, en cada una de las elecciones por pares de b, b es clasificado más alto que su oponente por al menos 2n votantes. Entonces, a tiene una puntuación maximin más baja que b, por lo tanto a no es el ganador en el vector de voto recién construido, y por lo tanto tenemos un conjunto de engaño correcto. Teorema 10. La complejidad de comunicación determinística de la regla STV es O(n(log m)2). Prueba. Considera el siguiente protocolo de comunicación. Que cada votante primero anuncie a su candidato más preferido (comunicación O(n log m)). En las rondas restantes, haremos un seguimiento del candidato más preferido de cada votante entre los candidatos restantes, lo cual será suficiente para implementar la regla. Cuando se elimina al candidato c, permita que cada uno de los votantes cuyo candidato más preferido entre los candidatos restantes era c anuncie su candidato más preferido entre los candidatos restantes después de la eliminación de c. Si el candidato c fue el candidato i-ésimo en ser eliminado (es decir, quedaban m − i + 1 candidatos antes de la eliminación de c), se sigue que como máximo n/(m − i + 1) votantes tenían al candidato c como su candidato más preferido entre los candidatos restantes, y por lo tanto, el número de bits a comunicar después de la eliminación del candidato i es O((n/(m−i+1)) log m). Así, la comunicación total en este protocolo de comunicación es O(n log m + m−1 i=1 (n/(m − i + 1)) log m). Por supuesto, m−1 i=1 1/(m − i + 1) = m i=2 1/i, lo cual es O(log m). Sustituyendo en la expresión anterior, encontramos que la complejidad de comunicación es O(n(log m)2). Teorema 11. La complejidad de comunicación no determinística de la regla STV es Ω(n log m) (incluso para decidir si un candidato dado a gana). Prueba. Omitimos esta prueba debido a la restricción de espacio. De hecho, O((n/(m − i + 1)) log(m − i + 1)) también es correcto, pero no mejorará el límite. Teorema 12. La complejidad de comunicación determinística de la regla de aprobación es O(nm). Prueba. Aprobar o desaprobar a un candidato solo requiere un bit de información, por lo que cada votante puede simplemente aprobar o desaprobar a cada candidato para una comunicación total de nm bits. Teorema 13. La complejidad de comunicación no determinista de la regla de aprobación es Ω(nm) (incluso para decidir si un candidato dado a gana). Prueba. Exhibiremos un conjunto de engaño de tamaño 2n m donde m = m − 1 y n = (n − 1)/4. Para cada vector (S1, S2, . . . , Sn) que consiste en n subconjuntos Si ⊆ C - {a}, deja que el siguiente vector de votos sea un elemento del conjunto engañoso: • Para 1 ≤ i ≤ n, deja que los votantes 4i - 3 y 4i - 2 aprueben Si ∪ {a}. • Para 1 ≤ i ≤ n, deja que los votantes 4i - 1 y 4i aprueben C - (Si ∪ {a}). • Deja que el votante 4n + 1 = n apruebe {a}. Observamos que este conjunto engañoso tiene un tamaño de (2m )n = 2n m, y que el candidato a gana en cada vector de votos en el conjunto engañoso (a es aprobado por 2n + 1 votantes, mientras que cada otro candidato es aprobado solo por 2n votantes). Todo lo que queda por demostrar es que para cualquier par de vectores de votos distintos en el conjunto de engaño, podemos hacer que cada uno de los votantes vote de acuerdo con uno de estos dos vectores de tal manera que a pierda. Que el primer vector de votos corresponda al vector (S1 1 , S1 2 , . . . , S1 n ), y que el segundo vector de votos corresponda al vector (S2 1 , S2 2 , . . . , S2 n ). Para algunos i, debemos tener S1 i = S2 i, de modo que ya sea S1 i S2 i o S2 i S1 i. Sin pérdida de generalidad, supongamos que S1 i S2 i , y sea b algún candidato en S1 i − S2 i. Ahora, construye un nuevo vector de votos tomando los votos 4i − 3 y 4i − 2 del primer vector de votos, y los votos restantes del segundo vector de votos. En este nuevo vector de votación construido, a sigue siendo aprobado por 2n + 1 votos. Sin embargo, b es aprobado por 2n + 2 votos, por la siguiente razón. Mientras que los votantes 4i−3 y 4i−2 no aprueban b en el segundo vector de votación (porque b /∈ S2 i), los votantes 4i−3 y 4i−2 sí aprueban b en el primer vector de votación (porque b ∈ S1 i). Se deduce que la puntuación bs en el vector de voto recién construido es la puntuación bs en el segundo vector de voto (2n), más dos. Por lo tanto, a no es el ganador en el vector de votación recién construido, y por lo tanto tenemos un conjunto de engaño correcto. Curiosamente, se puede obtener un límite inferior de Ω(m) incluso para el problema de encontrar un candidato que sea aprobado por más de un votante [20]. Teorema 14. La complejidad de comunicación determinística de la regla de Condorcet es O(nm). Prueba. Mantenemos un conjunto de candidatos activos S que se inicializa en C. En cada etapa, elegimos dos de los candidatos activos (digamos, los dos candidatos con los índices más bajos), y permitimos que cada votante comunique cuál de los dos candidatos prefiere. (Tal etapa requiere la comunicación de n bits, uno por votante). El candidato preferido por menos de 84 votantes (el perdedor de la elección por pares) es eliminado de S. (Si la elección por pares está empatada, ambos candidatos son eliminados). Después de un máximo de m - 1 iteraciones, solo queda un candidato (o no queda ningún candidato, en cuyo caso no hay un ganador de Condorcet). Que a sea el candidato restante. Para averiguar si el candidato a es el ganador de Condorcet, permita que cada votante comunique, para cada candidato c = a, si prefiere a a c. (Esto requiere la comunicación de como máximo n(m − 1) bits). Esto es suficiente para determinar si a ganó cada una de sus elecciones por pares (y por lo tanto, si a es el ganador de Condorcet). Teorema 15. La complejidad de comunicación no determinística de la regla de Condorcet es Ω(nm) (incluso para decidir si un candidato dado a gana). Prueba. Exhibiremos un conjunto de engaño de tamaño 2n m donde m = m − 1 y n = (n − 1)/2. Para cada vector (S1, S2, . . . , Sn) que consiste en n subconjuntos Si ⊆ C − {a}, deja que el siguiente vector de votos sea un elemento del conjunto engañoso: • Para 1 ≤ i ≤ n, deja que el votante 2i − 1 clasifique a los candidatos Si a C − Si. • Para 1 ≤ i ≤ n, deja que el votante 2i clasifique a los candidatos C − Si a Si. • Deja que el votante 2n + 1 = n clasifique a los candidatos a C − {a}. Observamos que este conjunto engañoso tiene tamaño (2m )n = 2n m , y que el candidato a gana en cada vector de votos en el conjunto engañoso (a gana cada una de sus elecciones por parejas por un solo voto). Todo lo que queda por demostrar es que para cualquier par de vectores de votos distintos en el conjunto de engaño, podemos hacer que cada uno de los votantes vote de acuerdo con uno de estos dos vectores de tal manera que a pierda. Que el primer vector de votos corresponda al vector (S1 1 , S1 2 , . . . , S1 n ), y que el segundo vector de votos corresponda al vector (S2 1 , S2 2 , . . . , S2 n ). Para algunos i, debemos tener S1 i = S2 i, de modo que ya sea S1 i S2 i o S2 i S1 i. Sin pérdida de generalidad, supongamos que S1 i S2 i , y sea b algún candidato en S1 i − S2 i. Ahora, construye un nuevo vector de votos tomando el voto 2i − 1 del primer vector de votos y los votos restantes del segundo vector de votos. En este nuevo vector de votos construido, b gana su elección por pares contra a por un voto (el voto 2i − 1 coloca a b por encima de a en el nuevo vector de votos construido porque b ∈ S1 i, mientras que en el segundo vector de votos el voto 2i − 1 colocó a a por encima de b porque b /∈ S2 i). Por lo tanto, a no es el ganador de Condorcet en el vector de votación recién construido, y por lo tanto tenemos un conjunto de engaño correcto. Teorema 16. La complejidad de comunicación determinística de la regla de la taza es O(nm). Prueba. Considera el siguiente protocolo de comunicación simple. Primero, permitamos que todos los votantes se comuniquen, para cada uno de los enfrentamientos en la primera ronda, cuál de los dos candidatos prefieren. Después de esto, se conocen los emparejamientos para la segunda ronda, así que permitan que todos los votantes comuniquen qué candidato prefieren en cada emparejamiento en la segunda ronda, etc. Dado que comunicar cuál de los dos candidatos es preferido solo requiere un bit por votante, y dado que solo hay m − 1 enfrentamientos en total, este protocolo de comunicación requiere O(nm) comunicación. Teorema 17. La complejidad de comunicación no determinista de la regla de la copa es Ω(nm) (incluso para decidir si un candidato dado a gana). Prueba. Exhibiremos un conjunto engañoso de tamaño 2n m donde m = (m − 1)/2 y n = (n − 7)/2. Dado que m + 1 es una potencia de 2, de modo que un candidato recibe un pase (es decir, no se enfrenta a un oponente) en la primera ronda, sea a el candidato con el pase. De los emparejamientos de la primera ronda, dejemos que lj denote al candidato de la izquierda en el j-ésimo enfrentamiento, y dejemos que rj sea el otro candidato de la derecha. Sea L = {lj : 1 ≤ j ≤ m} y R = {rj : 1 ≤ j ≤ m}, de modo que C = L ∪ R ∪ {a}. . . . . . . . . . l r l r l r a m1 1 2 2 m Figura 1: El horario para la regla de la copa utilizada en la demostración del Teorema 17. Para cada vector (S1, S2, . . . , Sn) que consiste en n subconjuntos Si ⊆ R, dejemos que el siguiente vector de votos sea un elemento del conjunto engañoso: • Para 1 ≤ i ≤ n, dejemos que el votante 2i − 1 clasifique a los candidatos Si L a R − Si. • Para 1 ≤ i ≤ n, dejemos que el votante 2i clasifique a los candidatos R − Si L a Si. • Dejemos que los votantes 2n +1 = n−6, 2n +2 = n−5, 2n +3 = n−4 clasifiquen a los candidatos L a R. • Dejemos que los votantes 2n + 4 = n − 3, 2n + 5 = n − 2 clasifiquen a los candidatos a r1 l1 r2 l2 . . . rm lm. • Dejemos que los votantes 2n + 6 = n − 1, 2n + 7 = n clasifiquen a los candidatos rm lm rm −1 lm −1 . . . r1 l1 a. Observamos que este conjunto de engaño tiene tamaño (2m )n = 2n m. Además, el candidato a gana en cada vector de votos en el conjunto engañoso, por las siguientes razones. Cada candidato rj derrota a su oponente lj en la primera ronda. (Para cualquier 1 ≤ i ≤ n, el efecto neto de los votos 2i − 1 y 2i en la elección entre rj y lj es cero; los votos n − 6, n − 5, n − 4 prefieren a lj sobre rj, pero los votos n − 3, n − 2, n − 1, n prefieren a rj sobre lj). Además, a vence a cada rj en su elección por pares. (Para cualquier 1 ≤ i ≤ n, el efecto neto de los votos 2i − 1 y 2i en la elección por pares entre a y rj es cero; los votos n − 1, n prefieren a rj sobre a, pero los votos n − 6, n − 5, n − 4, n − 3, n − 2 todos prefieren a a rj.) Se deduce que una vencerá a todos los candidatos a los que se enfrente. Todo lo que queda por demostrar es que para cualquier par de vectores de votos distintos en el conjunto de engaño, podemos hacer que cada uno de los votantes vote de acuerdo con uno de estos dos vectores de tal manera que a pierda. Que el primer vector de votos corresponda al vector 85 (S1 1 , S1 2 , . . . , S1 n ), y que el segundo vector de votos corresponda al vector (S2 1 , S2 2 , . . . , S2 n ). Para algunos i, debemos tener S1 i = S2 i, de modo que sea S1 i S2 i o S2 i S1 i. Sin pérdida de generalidad, supongamos que S1 i S2 i , y dejemos que rj sea algún candidato en S1 i − S2 i. Ahora, construye un nuevo vector de votos tomando el voto 2i del primer vector de votos y los votos restantes del segundo vector de votos. Observamos que, mientras que en el segundo vector de votos el voto 2i prefirió a rj sobre lj (porque rj ∈ R−S2 i), en el nuevo vector de votos construido esto ya no es el caso (porque rj ∈ S1 i). Se deduce que, mientras que en el segundo vector de votos, rj venció a lj en la primera ronda por un voto, en el nuevo vector de votos construido, lj vence a rj en la primera ronda. Por lo tanto, al menos un lj avanza a la segunda ronda después de derrotar a su oponente rj. Ahora observamos que en el vector de votos recién construido, cualquier lk gana su elección de a pares contra cualquier rq con q = k. Esto se debe a que entre los primeros 2n votos, al menos n − 1 prefieren lk a rq; los votos n − 6, n − 5, n − 4 prefieren lk a rq; y, porque q = k, ya sea que los votos n − 3, n − 2 prefieran lk a rq (si k < q), o los votos n − 1, n prefieran lk a rq (si k > q). Por lo tanto, al menos n + 4 = (n + 1)/2 > n/2 votos prefieren lk a rq. Además, cualquier lk gana su elección de a uno a uno. Esto se debe a que solo los votos n − 3 y n − 2 prefieren a a lk. Se deduce que, después de la primera ronda, cualquier candidato superviviente lk solo puede perder un enfrentamiento contra otro candidato superviviente lk, por lo que uno de los lk debe ganar la elección. Por lo tanto, a no es el ganador en el vector de votación recién construido, y por lo tanto tenemos un conjunto de engaño correcto. Teorema 18. La complejidad de comunicación determinística de la regla de Bucklin es O(nm). Prueba. Sea l el entero mínimo para el cual hay un candidato que está clasificado entre los primeros l candidatos por más de la mitad de los votos. Realizaremos una búsqueda binaria para l. En cada punto, tendremos un límite inferior lL que es menor que l (inicializado en 0), y un límite superior lH que es al menos l (inicializado en m). Mientras que lH − lL > 1, continuamos averiguando si (lH − l)/2 es menor que l, después de lo cual podemos actualizar los límites. Para averiguar si un número k es menor que l, determinamos los candidatos más preferidos de cada votante k. Cada votante puede comunicar cuáles candidatos se encuentran entre sus k candidatos más preferidos usando m bits (para cada candidato, indicar si el candidato está entre los primeros k o no), pero debido a que la búsqueda binaria requiere log m iteraciones, esto nos da un límite superior de O((log m)nm), que no es lo suficientemente fuerte. Sin embargo, si lL < k < lH, y ya conocemos los candidatos más preferidos de un votante lL, así como sus candidatos más preferidos de lH, entonces el votante ya no necesita comunicar si los candidatos más preferidos de lL están entre sus k candidatos más preferidos (porque deben estarlo), y ya no necesita comunicar si los m−lH candidatos menos preferidos están entre sus k candidatos más preferidos (porque no pueden estarlo). Por lo tanto, el votante solo necesita comunicar lH −lL bits en cualquier etapa dada. Debido a que en cada etapa, lH − lL se reduce a la mitad (aproximadamente), cada votante en total comunica solo (aproximadamente) m + m/2 + m/4 + . . . ≤ 2m bits. Teorema 19. La complejidad de comunicación no determinista de la regla de Bucklin es Ω(nm) (incluso para decidir si un candidato dado a gana). Prueba. Exhibiremos un conjunto de engaño de tamaño 2n m donde m = (m−1)/2 y n = n/2. Escribimos el conjunto de candidatos como la siguiente unión disjunta: C = {a} ∪ L ∪ R donde L = {l1, l2, . . . , lm } y R = {r1, r2, . . . , rm }. Para cualquier subconjunto S ⊆ {1, 2, . . . , m}, sea L(S) = {li : i ∈ S} y sea R(S) = {ri : i ∈ S}. Para cada vector (S1, S2, . . . , Sn) que consiste en n conjuntos Si ⊆ {1, 2, . . . , m}, dejemos que el siguiente vector de votos sea un elemento del conjunto engañoso: • Para 1 ≤ i ≤ n, dejemos que el votante 2i − 1 clasifique a los candidatos L(Si) R − R(Si) a L − L(Si) R(Si). • Para 1 ≤ i ≤ n, dejemos que el votante 2i clasifique a los candidatos L − L(Si) R(Si) a L(Si) R − R(Si). Observamos que este conjunto engañoso tiene tamaño (2m )n = 2n m, y que el candidato a gana en cada vector de votos en el conjunto engañoso, por la siguiente razón. Cada candidato en C − {a} está clasificado entre los mejores m candidatos por exactamente la mitad de los votantes (lo cual no es suficiente para ganar). Por lo tanto, necesitamos analizar a los m +1 candidatos principales de los votantes, y a es clasificado en el puesto m +1 por todos los votantes. Todo lo que queda por demostrar es que para cualquier par de vectores de votos distintos en el conjunto de engaño, podemos hacer que cada uno de los votantes vote de acuerdo con uno de estos dos vectores de tal manera que a pierda. Que el primer vector de votos corresponda al vector (S1 1 , S1 2 , . . . , S1 n ), y que el segundo vector de votos corresponda al vector (S2 1 , S2 2 , . . . , S2 n ). Para algunos i, debemos tener S1 i = S2 i, de modo que sea S1 i S2 i o S2 i S1 i. Sin pérdida de generalidad, supongamos que S1 i S2 i , y sea j algún entero en S1 i − S2 i. Ahora, construye un nuevo vector de votos tomando el voto 2i − 1 del primer vector de votos, y los votos restantes del segundo vector de votos. En este nuevo vector de votos construido, a sigue siendo clasificado en el m + 1-ésimo lugar por todos los votos. Sin embargo, lj está clasificado entre los mejores m candidatos por n + 1 = n/2 + 1 votos. Esto se debe a que mientras que el voto 2i − 1 no clasifica a lj entre los m mejores candidatos en el segundo vector de votos (porque j /∈ S2 i , tenemos que lj /∈ L(S2 i )), el voto 2i − 1 sí clasifica a lj entre los m mejores candidatos en el primer vector de votos (porque j ∈ S1 i , tenemos que lj ∈ L(S1 i )). Por lo tanto, a no es el ganador en el vector de votación recién construido, y por lo tanto tenemos un conjunto de engaño correcto. Teorema 20. La complejidad de comunicación no determinista de la regla de pares clasificados es Ω(nm log m) (incluso para decidir si un candidato dado a gana). Prueba. Omitimos esta prueba debido a limitaciones de espacio. 5. DISCUSIÓN Un obstáculo clave para utilizar la votación como método de agregación de preferencias es la carga de comunicación que implica una elección para los votantes. Al reducir esta carga, puede ser factible llevar a cabo más elecciones sobre más temas. En última instancia, esto podría llevar a un cambio de un gobierno representativo a un sistema en el que la mayoría de los asuntos se decidan mediante referendos, una verdadera e-democracia. En este artículo, analizamos la complejidad de comunicación de las reglas de votación comunes. Conocer qué reglas de votación requieren poca comunicación es especialmente importante cuando el tema a votar es de tan poca importancia que se cumple lo siguiente: las partes involucradas están dispuestas a aceptar una regla que tiende a producir resultados ligeramente menos representativos de las preferencias de los votantes, si esta regla reduce significativamente la carga de comunicación para los votantes. La siguiente tabla resume los resultados que obtuvimos. Regla Límite inferior Límite superior pluralidad Ω(n log m) O(n log m) pluralidad con segunda vuelta Ω(n log m) O(n log m) Voto único transferible (STV) Ω(n log m) O(n(log m)2) Condorcet Ω(nm) O(nm) aprobación Ω(nm) O(nm) Bucklin Ω(nm) O(nm) taza Ω(nm) O(nm) maximin Ω(nm) O(nm) Borda Ω(nm log m) O(nm log m) Copeland Ω(nm log m) O(nm log m) pares clasificados Ω(nm log m) O(nm log m) Complejidad de comunicación de las reglas de votación, ordenadas de menor a mayor. Todos los límites superiores son deterministas (con la excepción de maximin, para el cual el mejor límite superior determinista que demostramos es O(nm log m)). Todos los límites inferiores se mantienen incluso para la comunicación no determinista y solo para determinar si un candidato dado a es el ganador. Una área de investigación futura es estudiar qué sucede cuando restringimos nuestra atención a protocolos de comunicación que no revelan información estratégicamente útil. Esta restricción puede invalidar algunos de los límites superiores que derivamos utilizando protocolos de comunicación multietapa. Además, todos nuestros límites son límites en el peor de los casos. Puede ser posible superar estos límites cuando la distribución de votos tiene una estructura adicional. Al decidir qué regla de votación utilizar para una elección, hay muchas consideraciones a tener en cuenta. Las reglas de votación que estudiamos en este documento son las más comunes que han resistido la prueba del tiempo. Una forma de seleccionar entre estas reglas es considerar los resultados recientes sobre complejidad. La tabla anterior muestra que desde una perspectiva de complejidad de comunicación, la pluralidad, la pluralidad con segunda vuelta y el voto único transferible son preferibles. Sin embargo, la pluralidad tiene la propiedad no deseada de que es fácil de manipular computacionalmente mediante votación estratégica [3, 7]. La pluralidad con segunda vuelta es NP-duro de manipular por una coalición de votantes ponderados, o por un individuo que enfrenta incertidumbre correlacionada sobre los votos de los demás [7, 6]. STV es NP-duro de manipular en esos escenarios también [7], pero también por un individuo con conocimiento perfecto de los votos de los demás (cuando el número de candidatos es ilimitado) [2]. Por lo tanto, STV es más robusto, aunque puede requerir ligeramente más comunicación en el peor de los casos según la tabla anterior. Sin embargo, otros criterios de selección son la complejidad computacional para determinar si se ha obtenido suficiente información para declarar un ganador, y la de determinar la secuencia óptima de consultas [8]. 6. REFERENCIAS [1] Lawrence Ausubel y Paul Milgrom. Subastas ascendentes con ofertas de paquetes. Fronteras de la Economía Teórica, 1, 2002. No. 1, Artículo 1. [2] John Bartholdi, III y James Orlin. El voto único transferible resiste el voto estratégico. Elección Social y Bienestar, 8(4):341-354, 1991. [3] John Bartholdi, III, Craig Tovey y Michael Trick. La dificultad computacional de manipular una elección. Elección Social y Bienestar, 6(3):227-241, 1989. [4] Avrim Blum, Jeffrey Jackson, Tuomas Sandholm y Martin Zinkevich. Elicitación de preferencias y aprendizaje de consultas. Revista de Investigación en Aprendizaje Automático, 5:649-667, 2004. [5] Wolfram Conen y Tuomas Sandholm. Elicitación de preferencias en subastas combinatorias: Resumen extendido. En Actas de la Conferencia ACM sobre Comercio Electrónico (ACM-EC), páginas 256-259, 2001. [6] Vincent Conitzer, Jerome Lang y Tuomas Sandholm. ¿Cuántos candidatos se necesitan para que las elecciones sean difíciles de manipular? En Aspectos Teóricos de la Racionalidad y el Conocimiento (TARK), páginas 201-214, 2003. [7] Vincent Conitzer y Tuomas Sandholm. Complejidad de manipular elecciones con pocos candidatos. En Actas de la Conferencia Nacional de Inteligencia Artificial (AAAI), páginas 314-319, 2002. [8] Vincent Conitzer y Tuomas Sandholm. Elicitación de votos: Complejidad y estrategia de prueba. En Actas de la Conferencia Nacional de Inteligencia Artificial (AAAI), páginas 392-397, 2002. [9] Sven de Vries, James Schummer y Rakesh V. Vohra. En subastas ascendentes de objetos heterogéneos, 2003. Borrador. [10] Allan Gibbard. Manipulación de esquemas de votación. Econometrica, 41:587-602, 1973. [11] Benoit Hudson y Tuomas Sandholm. Efectividad de tipos de consultas y políticas para la obtención de preferencias en subastas combinatorias. En la Conferencia Internacional sobre Agentes Autónomos y Sistemas Multiagente (AAMAS), páginas 386-393, 2004. [12] E Kushilevitz y N Nisan. Complejidad de la comunicación. Cambridge University Press, 1997. [13] Sebasti´en Lahaie y David Parkes. Aplicando algoritmos de aprendizaje a la obtención de preferencias. En Actas de la Conferencia de la ACM sobre Comercio Electrónico, 2004. [14] Noam Nisan e Ilya Segal. Los requisitos de comunicación de asignaciones eficientes y precios de apoyo. Revista de Teoría Económica, 2005. Próximamente. [15] David Parkes. iBundle: Una subasta de paquetes de precio ascendente eficiente. En Actas de la Conferencia de la ACM sobre Comercio Electrónico (ACM-EC), páginas 148-157, 1999. [16] Tuomas Sandholm. Una implementación del protocolo de red de contratos basada en cálculos de costos marginales. En Actas de la Conferencia Nacional de Inteligencia Artificial (AAAI), páginas 256-262, 1993. [17] Tuomas Sandholm y Craig Boutilier. Elicitación de preferencias en subastas combinatorias. En Peter Cramton, Yoav Shoham y Richard Steinberg, editores, Subastas Combinatorias, capítulo 10. MIT Press, 2005. [18] Paolo Santi, Vincent Conitzer y Tuomas Sandholm. Hacia una caracterización de la obtención de preferencias polinomiales con consultas de valor en subastas combinatorias. En la Conferencia sobre Teoría del Aprendizaje (COLT), páginas 1-16, 2004. [19] Mark Satterthwaite. In Spanish, the translation would be: \"Inmutabilidad estratégica y condiciones de Arrow: teoremas de existencia y correspondencia para procedimientos de votación y funciones de bienestar social.\" Revista de Teoría Económica, 10:187-217, 1975. [20] Ilya Segal. Los requisitos de comunicación de las reglas de elección social y los conjuntos de presupuesto de apoyo, 2004. Borrador. Presentado en el Taller DIMACS sobre Problemas Computacionales en el Diseño de Subastas, Universidad de Rutgers, Nueva Jersey, EE. UU. [21] Peter Wurman y Michael Wellman. AkBA: Una subasta combinatoria progresiva y de precio anónimo. En Actas de la Conferencia de la ACM sobre Comercio Electrónico (ACM-EC), páginas 21-29, 2000. [22] A. C. Yao. Algunas preguntas de complejidad relacionadas con la computación distribuida. En Actas del 11º simposio de ACM sobre teoría de la computación (STOC), páginas 209-213, 1979. [23] Martin Zinkevich, Avrim Blum y Tuomas Sandholm. En la obtención de preferencias en tiempo polinómico con consultas de valor. En Actas de la Conferencia de la ACM sobre Comercio Electrónico (ACM-EC), páginas 176-185, 2003. 87 ",
            "candidates": [],
            "error": [
                [
                    ""
                ]
            ]
        },
        "communication": {
            "translated_key": "comunicación",
            "is_in_text": true,
            "original_annotated_sentences": [
                "<br>communication</br> Complexity of Common Voting Rules∗ Vincent Conitzer Carnegie Mellon University 5000 Forbes Avenue Pittsburgh, PA 15213, USA conitzer@cs.cmu.edu Tuomas Sandholm Carnegie Mellon University 5000 Forbes Avenue Pittsburgh, PA 15213, USA sandholm@cs.cmu.edu ABSTRACT We determine the <br>communication</br> complexity of the common voting rules.",
                "The rules (sorted by their <br>communication</br> complexity from low to high) are plurality, plurality with runoff, single transferable vote (STV), Condorcet, approval, Bucklin, cup, maximin, Borda, Copeland, and ranked pairs.",
                "For each rule, we first give a deterministic <br>communication</br> protocol and an upper bound on the number of bits communicated in it; then, we give a lower bound on (even the nondeterministic) <br>communication</br> requirements of the voting rule.",
                "The bounds match for all voting rules except STV and maximin.",
                "Categories and Subject Descriptors F.2 [Theory of Computation]: Analysis of Algorithms and Problem Complexity; J.4 [Computer Applications]: Social and Behavioral Sciences-Economics General Terms Algorithms, Economics, Theory 1.",
                "INTRODUCTION One key factor in the practicality of any preference aggregation rule is its <br>communication</br> burden.",
                "To successfully aggregate the agents preferences, it is usually not necessary for all the agents to report all of their preference information.",
                "Clever protocols that elicit the agents preferences partially and sequentially have the potential to dramatically reduce the required <br>communication</br>.",
                "This has at least the following advantages: • It can make preference aggregation feasible in settings where the total amount of preference information is too large to communicate. • Even when communicating all the preference information is feasible, reducing the <br>communication</br> requirements lessens the burden placed on the agents.",
                "This is especially true when the agents, rather than knowing all their preferences in advance, need to invest effort (such as computation or information gathering) to determine their preferences [16]. • It preserves (some of) the agents privacy.",
                "Most of the work on reducing the <br>communication</br> burden in preference aggregation has focused on resource allocation settings such as combinatorial auctions, in which an auctioneer auctions off a number of (possibly distinct) items in a single event.",
                "Because in a combinatorial auction, bidders can have separate valuations for each of an exponential number of possible bundles of items, this is a setting in which reducing the <br>communication</br> burden is especially crucial.",
                "This can be accomplished by supplementing the auctioneer with an elicitor that incrementally elicits parts of the bidders preferences on an as-needed basis, based on what the bidders have revealed about their preferences so far, as suggested by Conen and Sandholm [5].",
                "For example, the elicitor can ask for a bidders value for a specific bundle (value queries), which of two bundles the bidder prefers (order queries), which bundle he ranks kth or what the rank of a given bundle is (rank queries), which bundle he would purchase given a particular vector of prices (demand queries), etc.-until (at least) the final allocation can be determined.",
                "Experimentally, this yields drastic savings in preference revelation [11].",
                "Furthermore, if the agents valuation functions are drawn from certain natural subclasses, the elicitation problem can be solved using only polynomially many queries even in the worst case [23, 4, 13, 18, 14].",
                "For a review of preference elicitation in combinatorial auctions, see [17].",
                "Ascending combinatorial auctions are a well-known special form of preference elicitation, where the elicitor asks demand queries with increasing prices [15, 21, 1, 9].",
                "Finally, resource 78 allocation problems have also been studied from a <br>communication</br> complexity viewpoint, thereby deriving lower bounds on the required <br>communication</br>.",
                "For example, Nisan and Segal show that exponential <br>communication</br> is required even to obtain a surplus greater than that obtained by auctioning off all objects as a single bundle [14].",
                "Segal also studies social choice rules in general, and shows that for a large class of social choice rules, supporting budget sets must be revealed such that if every agent prefers the same outcome in her budget set, this proves the optimality of that outcome.",
                "Segal then uses this characterization to prove bounds on the <br>communication</br> required in resource allocation as well as matching settings [20].",
                "In this paper, we will focus on the <br>communication</br> requirements of a generally applicable subclass of social choice rules, commonly known as voting rules.",
                "In a voting setting, there is a set of candidate outcomes over which the voters express their preferences by submitting a vote (typically, a ranking of the candidates), and the winner (that is, the chosen outcome) is determined based on these votes.",
                "The <br>communication</br> required by voting rules can be large either because the number of voters is large (such as, for example, in national elections), or because the number of candidates is large (for example, the agents can vote over allocations of a number of resources), or both.",
                "Prior work [8] has studied elicitation in voting, studying how computationally hard it is to decide whether a winner can be determined with the information elicited so far, as well as how hard it is to find the optimal sequence of queries given perfect suspicions about the voters preferences.",
                "In addition, that paper discusses strategic (game-theoretic) issues introduced by elicitation.",
                "In contrast, in this paper, we are concerned with the worst-case number of bits that must be communicated to execute a given voting rule, when nothing is known in advance about the voters preferences.",
                "We determine the <br>communication</br> complexity of the common voting rules.",
                "For each rule, we first give an upper bound on the (deterministic) <br>communication</br> complexity by providing a <br>communication</br> protocol for it and analyzing how many bits need to be transmitted in this protocol. (Segals results [20] do not apply to most voting rules because most voting rules are not intersectionmonotonic (or even monotonic).1 ) For many of the voting rules under study, it turns out that one cannot do better than simply letting each voter immediately communicate all her (potentially relevant) information.",
                "However, for some rules (such as plurality with runoff, STV and cup) there is a straightforward multistage <br>communication</br> protocol that, with some analysis, can be shown to significantly outperform the immediate <br>communication</br> of all (potentially relevant) information.",
                "Finally, for some rules (such as the Condorcet and Bucklin rules), we need to introduce a more complex <br>communication</br> protocol to achieve the best possible upper 1 For two of the rules that we study that are intersectionmonotonic, namely the approval and Condorcet rules, Segals results can in fact be used to give alternative proofs of our lower bounds.",
                "We only give direct proofs for these rules here because 1) these direct proofs are among the easier ones in this paper, 2) the alternative proofs are nontrivial even given Segals results, and 3) a space constraint applies.",
                "However, we hope to also include the alternative proofs in a later version. bound.",
                "After obtaining the upper bounds, we show that they are tight by giving matching lower bounds on (even the nondeterministic) <br>communication</br> complexity of each voting rule.",
                "There are two exceptions: STV, for which our upper and lower bounds are apart by a factor log m; and maximin, for which our best deterministic upper bound is also a factor log m above the (nondeterministic) lower bound, although we give a nondeterministic upper bound that matches the lower bound. 2. REVIEW OF VOTING RULES In this section, we review the common voting rules that we study in this paper.",
                "A voting rule2 is a function mapping a vector of the n voters votes (i.e. preferences over candidates) to one of the m candidates (the winner) in the candidate set C. In some cases (such as the Condorcet rule), the rule may also declare that no winner exists.",
                "We do not concern ourselves with what happens in case of a tie between candidates (our lower bounds hold regardless of how ties are broken, and the <br>communication</br> protocols used for our upper bounds do not attempt to break the ties).",
                "All of the rules that we study are rank-based rules, which means that a vote is defined as an ordering of the candidates (with the exception of the plurality rule, for which a vote is a single candidate, and the approval rule, for which a vote is a subset of the candidates).",
                "We will consider the following voting rules. (For rules that define a score, the candidate with the highest score wins.) • scoring rules.",
                "Let α = α1, . . . , αm be a vector of integers such that α1 ≥ α2 . . . ≥ αm.",
                "For each voter, a candidate receives α1 points if it is ranked first by the voter, α2 if it is ranked second etc.",
                "The score sα of a candidate is the total number of points the candidate receives.",
                "The Borda rule is the scoring rule with α = m−1, m−2, . . . , 0 .",
                "The plurality rule is the scoring rule with α = 1, 0, . . . , 0 . • single transferable vote (STV).",
                "The rule proceeds through a series of m − 1 rounds.",
                "In each round, the candidate with the lowest plurality score (that is, the least number of voters ranking it first among the remaining candidates) is eliminated (and each of the votes for that candidate transfer to the next remaining candidate in the order given in that vote).",
                "The winner is the last remaining candidate. • plurality with run-off.",
                "In this rule, a first round eliminates all candidates except the two with the highest plurality scores.",
                "Votes are transferred to these as in the STV rule, and a second round determines the winner from these two. • approval.",
                "Each voter labels each candidate as either approved or disapproved.",
                "The candidate approved by the greatest number of voters wins. • Condorcet.",
                "For any two candidates i and j, let N(i, j) be the number of voters who prefer i to j.",
                "If there is a candidate i that is preferred to any other candidate by a majority of the voters (that is, N(i, j) > N(j, i) for all j = i-that is, i wins every pairwise election), then candidate i wins. 2 The term voting protocol is often used to describe the same concept, but we seek to draw a sharp distinction between the rule mapping preferences to outcomes, and the <br>communication</br>/elicitation protocol used to implement this rule. 79 • maximin (aka.",
                "Simpson).",
                "The maximin score of i is s(i) = minj=i N(i, j)-that is, is worst performance in a pairwise election.",
                "The candidate with the highest maximin score wins. • Copeland.",
                "For any two distinct candidates i and j, let C(i, j) = 1 if N(i, j) > N(j, i), C(i, j) = 1/2 if N(i, j) = N(j, i) and C(i, j) = 0 if N(i, j) < N(j, i).",
                "The Copeland score of candidate i is s(i) = j=i C(i, j). • cup (sequential binary comparisons).",
                "The cup rule is defined by a balanced3 binary tree T with one leaf per candidate, and an assignment of candidates to leaves (each leaf gets one candidate).",
                "Each non-leaf node is assigned the winner of the pairwise election of the nodes children; the candidate assigned to the root wins. • Bucklin.",
                "For any candidate i and integer l, let B(i, l) be the number of voters that rank candidate i among the top l candidates.",
                "The winner is arg mini(min{l : B(i, l) > n/2}).",
                "That is, if we say that a voter approves her top l candidates, then we repeatedly increase l by 1 until some candidate is approved by more than half the voters, and this candidate is the winner. • ranked pairs.",
                "This rule determines an order on all the candidates, and the winner is the candidate at the top of this order.",
                "Sort all ordered pairs of candidates (i, j) by N(i, j), the number of voters who prefer i to j.",
                "Starting with the pair (i, j) with the highest N(i, j), we lock in the result of their pairwise election (i j).",
                "Then, we move to the next pair, and we lock the result of their pairwise election.",
                "We continue to lock every pairwise result that does not contradict the ordering established so far.",
                "We emphasize that these definitions of voting rules do not concern themselves with how the votes are elicited from the voters; all the voting rules, including those that are suggestively defined in terms of rounds, are in actuality just functions mapping the vector of all the voters votes to a winner.",
                "Nevertheless, there are always many different ways of eliciting the votes (or the relevant parts thereof) from the voters.",
                "For example, in the plurality with runoff rule, one way of eliciting the votes is to ask every voter to declare her entire ordering of the candidates up front.",
                "Alternatively, we can first ask every voter to declare only her most preferred candidate; then, we will know the two candidates in the runoff, and we can ask every voter which of these two candidates she prefers.",
                "Thus, we distinguish between the voting rule (the mapping from vectors of votes to outcomes) and the <br>communication</br> protocol (which determines how the relevant parts of the votes are actually elicited from the voters).",
                "The goal of this paper is to give efficient <br>communication</br> protocols for the voting rules just defined, and to prove that there do not exist any more efficient <br>communication</br> protocols.",
                "It is interesting to note that the choice of the <br>communication</br> protocol may affect the strategic behavior of the voters.",
                "Multistage <br>communication</br> protocols may reveal to the voters some information about how the other voters are voting (for example, in the two-stage <br>communication</br> protocol just given for plurality with runoff, in the second stage voters 3 Balanced means that the difference in depth between two leaves can be at most one. will know which two candidates have the highest plurality scores).",
                "In general, when the voters receive such information, it may give them incentives to vote differently than they would have in a single-stage <br>communication</br> protocol in which all voters declare their entire votes simultaneously.",
                "Of course, even the single-stage <br>communication</br> protocol is not strategy-proof4 for any reasonable voting rule, by the Gibbard-Satterthwaite theorem [10, 19].",
                "However, this does not mean that we should not be concerned about adding even more opportunities for strategic voting.",
                "In fact, many of the <br>communication</br> protocols introduced in this paper do introduce additional opportunities for strategic voting, but we do not have the space to discuss this here. (In prior work [8], we do give an example where an elicitation protocol for the approval voting rule introduces strategic voting, and give principles for designing elicitation protocols that do not introduce strategic problems.)",
                "Now that we have reviewed voting rules, we move on to a brief review of <br>communication</br> complexity theory. 3. REVIEW OF SOME <br>communication</br> COMPLEXITY THEORY In this section, we review the basic model of a communication problem and the lower-bounding technique of constructing a fooling set. (The basic model of a communication problem is due to Yao [22]; for an overview see Kushilevitz and Nisan [12].)",
                "Each player 1 ≤ i ≤ n knows (only) input xi.",
                "Together, they seek to compute f(x1, x2, . . . , xn).",
                "In a deterministic protocol for computing f, in each stage, one of the players announces (to all other players) a bit of information based on her own input and the bits announced so far.",
                "Eventually, the <br>communication</br> terminates and all players know f(x1, x2, . . . , xn).",
                "The goal is to minimize the worst-case (over all input vectors) number of bits sent.",
                "The deterministic <br>communication</br> complexity of a problem is the worstcase number of bits sent in the best (correct) deterministic protocol for it.",
                "In a nondeterministic protocol, the next bit to be sent can be chosen nondeterministically.",
                "For the purposes of this paper, we will consider a nondeterministic protocol correct if for every input vector, there is some sequence of nondeterministic choices the players can make so that the players know the value of f when the protocol terminates.",
                "The nondeterministic <br>communication</br> complexity of a problem is the worst-case number of bits sent in the best (correct) nondeterministic protocol for it.",
                "We are now ready to give the definition of a fooling set.",
                "Definition 1.",
                "A fooling set is a set of input vectors {(x1 1, x1 2, . . . , x1 n), (x2 1, x2 2, . . . , x2 n), . . . , (xk 1 , xk 2 , . . . , xk n) such that for any i, f(xi 1, xi 2, . . . , xi n) = f0 for some constant f0, but for any i = j, there exists some vector (r1, r2, . . . , rn) ∈ {i, j}n such that f(xr1 1 , xr2 2 , . . . , xrn n ) = f0. (That is, we can mix the inputs from the two input vectors to obtain a vector with a different function value.)",
                "It is known that if a fooling set of size k exists, then log k is a lower bound on the <br>communication</br> complexity (even the nondeterministic <br>communication</br> complexity) [12]. 4 A strategy-proof protocol is one in which it is in the players best interest to report their preferences truthfully. 80 For the purposes of this paper, f is the voting rule that maps the votes to the winning candidate, and xi is voter is vote (the information that the voting rule would require from the voter if there were no possibility of multistage communication-i.e. the most preferred candidate (plurality), the approved candidates (approval), or the ranking of all the candidates (all other protocols)).",
                "However, when we derive our lower bounds, f will only signify whether a distinguished candidate a wins. (That is, f is 1 if a wins, and 0 otherwise.)",
                "This will strengthen our lower bound results (because it implies that even finding out whether one given candidate wins is hard).5 Thus, a fooling set in our context is a set of vectors of votes so that a wins (does not win) with each of them; but for any two different vote vectors in the set, there is a way of taking some voters votes from the first vector and the others votes from the second vector, so that a does not win (wins).",
                "To simplify the proofs of our lower bounds, we make assumptions such as the number of voters n is odd in many of these proofs.",
                "Therefore, technically, we do not prove the lower bound for (number of candidates, number of voters) pairs (m, n) that do not satisfy these assumptions (for example, if we make the above assumption, then we technically do not prove the lower bound for any pair (m, n) in which n is even).",
                "Nevertheless, we always prove the lower bound for a representative set of (m, n) pairs.",
                "For example, for every one of our lower bounds it is the case that for infinitely many values of m, there are infinitely many values of n such that the lower bound is proved for the pair (m, n). 4.",
                "RESULTS We are now ready to present our results.",
                "For each voting rule, we first give a deterministic <br>communication</br> protocol for determining the winner to establish an upper bound.",
                "Then, we give a lower bound on the nondeterministic <br>communication</br> complexity (even on the complexity of deciding whether a given candidate wins, which is an easier question).",
                "The lower bounds match the upper bounds in all but two cases: the STV rule (upper bound O(n(log m)2 ); lower bound Ω(n log m)) and the maximin rule (upper bound O(nm log m), although we do give a nondeterministic protocol that is O(nm); lower bound Ω(nm)).",
                "When we discuss a voting rule in which the voters rank the candidates, we will represent a ranking in which candidate c1 is ranked first, c2 is ranked second, etc. as c1 c2 . . . cm. 5 One possible concern is that in the case where ties are possible, it may require much <br>communication</br> to verify whether a specific candidate a is among the winners, but little <br>communication</br> to produce one of the winners.",
                "However, all the fooling sets we use in the proofs have the property that if a wins, then a is the unique winner.",
                "Therefore, in these fooling sets, if one knows any one of the winners, then one knows whether a is a winner.",
                "Thus, computing one of the winners requires at least as much <br>communication</br> as verifying whether a is among the winners.",
                "In general, when a <br>communication</br> problem allows multiple correct answers for a given vector of inputs, this is known as computing a relation rather than a function [12].",
                "However, as per the above, we can restrict our attention to a subset of the domain where the voting rule truly is a (single-valued) function, and hence lower bounding techniques for functions rather than relations will suffice.",
                "Sometimes for the purposes of a proof the internal ranking of a subset of the candidates does not matter, and in this case we will not specify it.",
                "For example, if S = {c2, c3}, then c1 S c4 indicates that either the ranking c1 c2 c3 c4 or the ranking c1 c3 c2 c4 can be used for the proof.",
                "We first give a universal upper bound.",
                "Theorem 1.",
                "The deterministic <br>communication</br> complexity of any rank-based voting rule is O(nm log m).",
                "Proof.",
                "This bound is achieved by simply having everyone communicate their entire ordering of the candidates (indicating the rank of an individual candidate requires only O(log m) bits, so each of the n voters can simply indicate the rank of each of the m candidates).",
                "The next lemma will be useful in a few of our proofs.",
                "Lemma 1.",
                "If m divides n, then log(n! )−m log((n/m)!) ≥ n(log m − 1)/2.",
                "Proof.",
                "If n/m = 1 (that is, n = m), then this expression simplifies to log(n!).",
                "We have log(n!) = n i=1 log i ≥ n x=1 log(i)dx, which, using integration by parts, is equal to n log n − (n − 1) > n(log n − 1) = n(log m − 1) > n(log m − 1)/2.",
                "So, we can assume that n/m ≥ 2.",
                "We observe that log(n!) = n i=1 log i = n/m−1 i=0 m j=1 log(im+j) ≥ n/m−1 i=1 m j=1 log(im) = m n/m−1 i=1 log(im), and that m log((n/m)!) = m n/m i=1 log(i).",
                "Therefore, log(n!) − m log((n/m)!) ≥ m n/m−1 i=1 log(im) − m n/m i=1 log(i) = m(( n/m−1 i=1 log(im/i))−log(n/m)) = m((n/m− 1) log m−log n+log m) = n log m−m log n. Now, using the fact that n/m ≥ 2, we have m log n = n(m/n) log m(n/m) = n(m/n)(log m + log(n/m)) ≤ n(1/2)(log m + log 2).",
                "Thus, log(n!) − m log((n/m)!) ≥ n log m − m log n ≥ n log m − n(1/2)(log m + log 2) = n(log m − 1)/2.",
                "Theorem 2.",
                "The deterministic <br>communication</br> complexity of the plurality rule is O(n log m).",
                "Proof.",
                "Indicating one of the candidates requires only O(log m) bits, so each voter can simply indicate her most preferred candidate.",
                "Theorem 3.",
                "The nondeterministic <br>communication</br> complexity of the plurality rule is Ω(n log m) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We will exhibit a fooling set of size n ! (( n m )! )m where n = (n−1)/2.",
                "Taking the logarithm of this gives log(n ! )− m log((n /m)! ), so the result follows from Lemma 1.",
                "The fooling set will consist of all vectors of votes satisfying the following constraints: • For any 1 ≤ i ≤ n , voters 2i−1 and 2i vote the same. 81 • Every candidate receives equally many votes from the first 2n = n − 1 voters. • The last voter (voter n) votes for a.",
                "Candidate a wins with each one of these vote vectors because of the extra vote for a from the last voter.",
                "Given that m divides n , let us see how many vote vectors there are in the fooling set.",
                "We need to distribute n voter pairs evenly over m candidates, for a total of n /m voter pairs per candidate; and there are precisely n ! (( n m )! )m ways of doing this.6 All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses.",
                "Let i be a number such that the two vote vectors disagree on the candidate for which voters 2i − 1 and 2i vote.",
                "Without loss of generality, suppose that in the first vote vector, these voters do not vote for a (but for some other candidate, b, instead).",
                "Now, construct a new vote vector by taking votes 2i − 1 and 2i from the first vote vector, and the remaining votes from the second vote vector.",
                "Then, b receives 2n /m + 2 votes in this newly constructed vote vector, whereas a receives at most 2n /m+1 votes.",
                "So, a is not the winner in the newly constructed vote vector, and hence we have a correct fooling set.",
                "Theorem 4.",
                "The deterministic <br>communication</br> complexity of the plurality with runoff rule is O(n log m).",
                "Proof.",
                "First, let every voter indicate her most preferred candidate using log m bits.",
                "After this, the two candidates in the runoff are known, and each voter can indicate which one she prefers using a single additional bit.",
                "Theorem 5.",
                "The nondeterministic <br>communication</br> complexity of the plurality with runoff rule is Ω(n log m) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We will exhibit a fooling set of size n ! (( n m )! )m where m = m/2 and n = (n − 2)/4.",
                "Taking the logarithm of this gives log(n !) − m log((n /m )! ), so the result follows from Lemma 1.",
                "Divide the candidates into m pairs: (c1, d1), (c2, d2), . . . , (cm , dm ) where c1 = a and d1 = b.",
                "The fooling set will consist of all vectors of votes satisfying the following constraints: • For any 1 ≤ i ≤ n , voters 4i − 3 and 4i − 2 rank the candidates ck(i) a C − {a, ck(i)}, for some candidate ck(i). (If ck(i) = a then the vote is simply a C − {a}.) • For any 1 ≤ i ≤ n , voters 4i − 1 and 4i rank the candidates dk(i) a C − {a, dk(i)} (that is, their most preferred candidate is the candidate that is paired with the candidate that the previous two voters vote for). 6 An intuitive proof of this is the following.",
                "We can count the number of permutations of n elements as follows.",
                "First, divide the elements into m buckets of size n /m, so that if x is placed in a lower-indexed bucket than y, then x will be indexed lower in the eventual permutation.",
                "Then, decide on the permutation within each bucket (for which there are (n /m)! choices per bucket).",
                "It follows that n ! equals the number of ways to divide n elements into m buckets of size n /m, times ((n /m)! )m . • Every candidate is ranked at the top of equally many of the first 4n = n − 2 votes. • Voter 4n +1 = n−1 ranks the candidates a C−{a}. • Voter 4n + 2 = n ranks the candidates b C − {b}.",
                "Candidate a wins with each one of these vote vectors: because of the last two votes, candidates a and b are one vote ahead of all the other candidates and continue to the runoff, and at this point all the votes that had another candidate ranked at the top transfer to a, so that a wins the runoff.",
                "Given that m divides n , let us see how many vote vectors there are in the fooling set.",
                "We need to distribute n groups of four voters evenly over the m pairs of candidates, and (as in the proof of Theorem 3) there are n ! (( n m )! )m ways of doing this.",
                "All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses.",
                "Let i be a number such that ck(i) is not the same in both of these two vote vectors, that is, c1 k(i) (ck(i) in the first vote vector) is not equal to c2 k(i) (ck(i) in the second vote vector).",
                "Without loss of generality, suppose c1 k(i) = a.",
                "Now, construct a new vote vector by taking votes 4i − 3, 4i − 2, 4i − 1, 4i from the first vote vector, and the remaining votes from the second vote vector.",
                "In this newly constructed vote vector, c1 k(i) and d1 k(i) each receive 4n /m+2 votes in the first round, whereas a receives at most 4n /m+1 votes.",
                "So, a does not continue to the runoff in the newly constructed vote vector, and hence we have a correct fooling set.",
                "Theorem 6.",
                "The nondeterministic <br>communication</br> complexity of the Borda rule is Ω(nm log m) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We will exhibit a fooling set of size (m ! )n where m = m−2 and n = (n−2)/4.",
                "This will prove the theorem because m ! is Ω(m log m), so that log((m ! )n ) = n log(m !) is Ω(nm log m).",
                "For every vector (π1, π2, . . . , πn ) consisting of n orderings of all candidates other than a and another fixed candidate b (technically, the orderings take the form of a one-to-one function πi : {1, 2, . . . , m } → C − {a, b} with πi(j) = c indicating that candidate c is the jth in the order represented by πi), let the following vector of votes be an element of the fooling set: • For 1 ≤ i ≤ n , let voters 4i − 3 and 4i − 2 rank the candidates a b πi(1) πi(2) . . . πi(m ). • For 1 ≤ i ≤ n , let voters 4i − 1 and 4i rank the candidates πi(m ) πi(m − 1) . . . πi(1) b a. • Let voter 4n + 1 = n − 1 rank the candidates a b π0(1) π0(2) . . . π0(m ) (where π0 is an arbitrary order of the candidates other than a and b which is the same for every element of the fooling set). • Let voter 4n + 2 = n rank the candidates π0(m ) π0(m − 1) . . . π0(1) a b.",
                "We observe that this fooling set has size (m ! )n , and that candidate a wins in each vector of votes in the fooling set (to 82 see why, we observe that for any 1 ≤ i ≤ n , votes 4i−3 and 4i − 2 rank the candidates in the exact opposite way from votes 4i − 1 and 4i, which under the Borda rule means they cancel out; and the last two votes give one more point to a than to any other candidate-besides b who gets two fewer points than a).",
                "All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses.",
                "Let the first vote vector correspond to the vector (π1 1, π1 2, . . . , π1 n ), and let the second vote vector correspond to the vector (π2 1, π2 2, . . . , π2 n ).",
                "For some i, we must have π1 i = π2 i , so that for some candidate c /∈ {a, b}, (π1 i )−1 (c) < (π2 i )−1 (c) (that is, c is ranked higher in π1 i than in π2 i ).",
                "Now, construct a new vote vector by taking votes 4i−3 and 4i−2 from the first vote vector, and the remaining votes from the second vote vector. as Borda score remains unchanged.",
                "However, because c is ranked higher in π1 i than in π2 i , c receives at least 2 more points from votes 4i−3 and 4i − 2 in the newly constructed vote vector than it did in the second vote vector.",
                "It follows that c has a higher Borda score than a in the newly constructed vote vector.",
                "So, a is not the winner in the newly constructed vote vector, and hence we have a correct fooling set.",
                "Theorem 7.",
                "The nondeterministic <br>communication</br> complexity of the Copeland rule is Ω(nm log m) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We will exhibit a fooling set of size (m ! )n where m = (m − 2)/2 and n = (n − 2)/2.",
                "This will prove the theorem because m ! is Ω(m log m), so that log((m ! )n ) = n log(m !) is Ω(nm log m).",
                "We write the set of candidates as the following disjoint union: C = {a, b} ∪ L ∪ R where L = {l1, l2, . . . , lm } and R = {r1, r2, . . . , rm }.",
                "For every vector (π1, π2, . . . , πn ) consisting of n permutations of the integers 1 through m (πi : {1, 2, . . . , m } → {1, 2, . . . , m }), let the following vector of votes be an element of the fooling set: • For 1 ≤ i ≤ n , let voter 2i − 1 rank the candidates a b lπi(1) rπi(1) lπi(2) rπi(2) . . . lπi(m ) rπi(m ). • For 1 ≤ i ≤ n , let voter 2i rank the candidates rπi(m ) lπi(m ) rπi(m −1) lπi(m −1) . . . rπi(1) lπi(1) b a. • Let voter n − 1 = 2n + 1 rank the candidates a b l1 r1 l2 r2 . . . lm rm . • Let voter n = 2n +2 rank the candidates rm lm rm −1 lm −1 . . . r1 l1 a b.",
                "We observe that this fooling set has size (m ! )n , and that candidate a wins in each vector of votes in the fooling set (every pair of candidates is tied in their pairwise election, with the exception that a defeats b, so that a wins the election by half a point).",
                "All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses.",
                "Let the first vote vector correspond to the vector (π1 1, π1 2, . . . , π1 n ), and let the second vote vector correspond to the vector (π2 1, π2 2, . . . , π2 n ).",
                "For some i, we must have π1 i = π2 i , so that for some j ∈ {1, 2, . . . , m }, we have (π1 i )−1 (j) < (π2 i )−1 (j).",
                "Now, construct a new vote vector by taking vote 2i−1 from the first vote vector, and the remaining votes from the second vote vector. as Copeland score remains unchanged.",
                "Let us consider the score of lj.",
                "We first observe that the rank of lj in vote 2i − 1 in the newly constructed vote vector is at least 2 higher than it was in the second vote vector, because (π1 i )−1 (j) < (π2 i )−1 (j).",
                "Let D1 (lj) be the set of candidates in L ∪ R that voter 2i − 1 ranked lower than lj in the first vote vector (D1 (lj) = {c ∈ L ∪ R : lj 1 2i−1 c}), and let D2 (lj) be the set of candidates in L ∪ R that voter 2i − 1 ranked lower than lj in the second vote vector (D2 (lj) = {c ∈ L ∪ R : lj 2 2i−1 c}).",
                "Then, it follows that in the newly constructed vote vector, lj defeats all the candidates in D1 (lj) − D2 (lj) in their pairwise elections (because lj receives an extra vote in each one of these pairwise elections relative to the second vote vector), and loses to all the candidates in D2 (lj) − D1 (lj) (because lj loses a vote in each one of these pairwise elections relative to the second vote vector), and ties with everyone else.",
                "But |D1 (lj)|−|D2 (lj)| ≥ 2, and hence |D1 (lj) − D2 (lj)| − |D2 (lj) − D1 (lj)| ≥ 2.",
                "Hence, in the newly constructed vote vector, lj has at least two more pairwise wins than pairwise losses, and therefore has at least 1 more point than if lj had tied all its pairwise elections.",
                "Thus, lj has a higher Copeland score than a in the newly constructed vote vector.",
                "So, a is not the winner in the newly constructed vote vector, and hence we have a correct fooling set.",
                "Theorem 8.",
                "The nondeterministic <br>communication</br> complexity of the maximin rule is O(nm).",
                "Proof.",
                "The nondeterministic protocol will guess which candidate w is the winner, and, for each other candidate c, which candidate o(c) is the candidate against whom c receives its lowest score in a pairwise election.",
                "Then, let every voter communicate the following: • for each candidate c = w, whether she prefers c to w; • for each candidate c = w, whether she prefers c to o(c).",
                "We observe that this requires the <br>communication</br> of 2n(m− 1) bits.",
                "If the guesses were correct, then, letting N(d, e) be the number of voters preferring candidate d to candidate e, we should have N(c, o(c)) < N(w, c ) for any c = w, c = w, which will prove that w wins the election.",
                "Theorem 9.",
                "The nondeterministic <br>communication</br> complexity of the maximin rule is Ω(nm) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We will exhibit a fooling set of size 2n m where m = m − 2 and n = (n − 1)/4.",
                "Let b be a candidate other than a.",
                "For every vector (S1, S2, . . . , Sn ) consisting of n subsets Si ⊆ C − {a, b}, let the following vector of votes be an element of the fooling set: • For 1 ≤ i ≤ n , let voters 4i − 3 and 4i − 2 rank the candidates Si a C − (Si ∪ {a, b}) b. • For 1 ≤ i ≤ n , let voters 4i − 1 and 4i rank the candidates b C − (Si ∪ {a, b}) a Si. 83 • Let voter 4n + 1 = n rank the candidates a b C − {a, b}.",
                "We observe that this fooling set has size (2m )n = 2n m , and that candidate a wins in each vector of votes in the fooling set (in every one of as pairwise elections, a is ranked higher than its opponent by 2n +1 = (n+1)/2 > n/2 votes).",
                "All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses.",
                "Let the first vote vector correspond to the vector (S1 1 , S1 2 , . . . , S1 n ), and let the second vote vector correspond to the vector (S2 1 , S2 2 , . . . , S2 n ).",
                "For some i, we must have S1 i = S2 i , so that either S1 i S2 i or S2 i S1 i .",
                "Without loss of generality, suppose S1 i S2 i , and let c be some candidate in S1 i − S2 i .",
                "Now, construct a new vote vector by taking votes 4i − 3 and 4i − 2 from the first vote vector, and the remaining votes from the second vote vector.",
                "In this newly constructed vote vector, a is ranked higher than c by only 2n −1 voters, for the following reason.",
                "Whereas voters 4i−3 and 4i − 2 do not rank c higher than a in the second vote vector (because c /∈ S2 i ), voters 4i − 3 and 4i − 2 do rank c higher than a in the first vote vector (because c ∈ S1 i ).",
                "Moreover, in every one of bs pairwise elections, b is ranked higher than its opponent by at least 2n voters.",
                "So, a has a lower maximin score than b, therefore a is not the winner in the newly constructed vote vector, and hence we have a correct fooling set.",
                "Theorem 10.",
                "The deterministic <br>communication</br> complexity of the STV rule is O(n(log m)2 ).",
                "Proof.",
                "Consider the following <br>communication</br> protocol.",
                "Let each voter first announce her most preferred candidate (O(n log m) <br>communication</br>).",
                "In the remaining rounds, we will keep track of each voters most preferred candidate among the remaining candidates, which will be enough to implement the rule.",
                "When candidate c is eliminated, let each of the voters whose most preferred candidate among the remaining candidates was c announce their most preferred candidate among the candidates remaining after cs elimination.",
                "If candidate c was the ith candidate to be eliminated (that is, there were m − i + 1 candidates remaining before cs elimination), it follows that at most n/(m − i + 1) voters had candidate c as their most preferred candidate among the remaining candidates, and thus the number of bits to be communicated after the elimination of the ith candidate is O((n/(m−i+1)) log m).7 Thus, the total <br>communication</br> in this <br>communication</br> protocol is O(n log m + m−1 i=1 (n/(m − i + 1)) log m).",
                "Of course, m−1 i=1 1/(m − i + 1) = m i=2 1/i, which is O(log m).",
                "Substituting into the previous expression, we find that the <br>communication</br> complexity is O(n(log m)2 ).",
                "Theorem 11.",
                "The nondeterministic <br>communication</br> complexity of the STV rule is Ω(n log m) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We omit this proof because of space constraint. 7 Actually, O((n/(m − i + 1)) log(m − i + 1)) is also correct, but it will not improve the bound.",
                "Theorem 12.",
                "The deterministic <br>communication</br> complexity of the approval rule is O(nm).",
                "Proof.",
                "Approving or disapproving of a candidate requires only one bit of information, so every voter can simply approve or disapprove of every candidate for a total <br>communication</br> of nm bits.",
                "Theorem 13.",
                "The nondeterministic <br>communication</br> complexity of the approval rule is Ω(nm) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We will exhibit a fooling set of size 2n m where m = m − 1 and n = (n − 1)/4.",
                "For every vector (S1, S2, . . . , Sn ) consisting of n subsets Si ⊆ C − {a}, let the following vector of votes be an element of the fooling set: • For 1 ≤ i ≤ n , let voters 4i − 3 and 4i − 2 approve Si ∪ {a}. • For 1 ≤ i ≤ n , let voters 4i − 1 and 4i approve C − (Si ∪ {a}). • Let voter 4n + 1 = n approve {a}.",
                "We observe that this fooling set has size (2m )n = 2n m , and that candidate a wins in each vector of votes in the fooling set (a is approved by 2n + 1 voters, whereas each other candidate is approved by only 2n voters).",
                "All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses.",
                "Let the first vote vector correspond to the vector (S1 1 , S1 2 , . . . , S1 n ), and let the second vote vector correspond to the vector (S2 1 , S2 2 , . . . , S2 n ).",
                "For some i, we must have S1 i = S2 i , so that either S1 i S2 i or S2 i S1 i .",
                "Without loss of generality, suppose S1 i S2 i , and let b be some candidate in S1 i − S2 i .",
                "Now, construct a new vote vector by taking votes 4i − 3 and 4i − 2 from the first vote vector, and the remaining votes from the second vote vector.",
                "In this newly constructed vote vector, a is still approved by 2n + 1 votes.",
                "However, b is approved by 2n + 2 votes, for the following reason.",
                "Whereas voters 4i−3 and 4i−2 do not approve b in the second vote vector (because b /∈ S2 i ), voters 4i − 3 and 4i − 2 do approve b in the first vote vector (because b ∈ S1 i ).",
                "It follows that bs score in the newly constructed vote vector is bs score in the second vote vector (2n ), plus two.",
                "So, a is not the winner in the newly constructed vote vector, and hence we have a correct fooling set.",
                "Interestingly, an Ω(m) lower bound can be obtained even for the problem of finding a candidate that is approved by more than one voter [20].",
                "Theorem 14.",
                "The deterministic <br>communication</br> complexity of the Condorcet rule is O(nm).",
                "Proof.",
                "We maintain a set of active candidates S which is initialized to C. At each stage, we choose two of the active candidates (say, the two candidates with the lowest indices), and we let each voter communicate which of the two candidates she prefers. (Such a stage requires the <br>communication</br> of n bits, one per voter.)",
                "The candidate preferred by fewer 84 voters (the loser of the pairwise election) is removed from S. (If the pairwise election is tied, both candidates are removed.)",
                "After at most m − 1 iterations, only one candidate is left (or zero candidates are left, in which case there is no Condorcet winner).",
                "Let a be the remaining candidate.",
                "To find out whether candidate a is the Condorcet winner, let each voter communicate, for every candidate c = a, whether she prefers a to c. (This requires the <br>communication</br> of at most n(m − 1) bits.)",
                "This is enough to establish whether a won each of its pairwise elections (and thus, whether a is the Condorcet winner).",
                "Theorem 15.",
                "The nondeterministic <br>communication</br> complexity of the Condorcet rule is Ω(nm) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We will exhibit a fooling set of size 2n m where m = m − 1 and n = (n − 1)/2.",
                "For every vector (S1, S2, . . . , Sn ) consisting of n subsets Si ⊆ C − {a}, let the following vector of votes be an element of the fooling set: • For 1 ≤ i ≤ n , let voter 2i − 1 rank the candidates Si a C − Si. • For 1 ≤ i ≤ n , let voter 2i rank the candidates C − Si a Si. • Let voter 2n +1 = n rank the candidates a C −{a}.",
                "We observe that this fooling set has size (2m )n = 2n m , and that candidate a wins in each vector of votes in the fooling set (a wins each of its pairwise elections by a single vote).",
                "All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses.",
                "Let the first vote vector correspond to the vector (S1 1 , S1 2 , . . . , S1 n ), and let the second vote vector correspond to the vector (S2 1 , S2 2 , . . . , S2 n ).",
                "For some i, we must have S1 i = S2 i , so that either S1 i S2 i or S2 i S1 i .",
                "Without loss of generality, suppose S1 i S2 i , and let b be some candidate in S1 i − S2 i .",
                "Now, construct a new vote vector by taking vote 2i − 1 from the first vote vector, and the remaining votes from the second vote vector.",
                "In this newly constructed vote vector, b wins its pairwise election against a by one vote (vote 2i − 1 ranks b above a in the newly constructed vote vector because b ∈ S1 i , whereas in the second vote vector vote 2i − 1 ranked a above b because b /∈ S2 i ).",
                "So, a is not the Condorcet winner in the newly constructed vote vector, and hence we have a correct fooling set.",
                "Theorem 16.",
                "The deterministic <br>communication</br> complexity of the cup rule is O(nm).",
                "Proof.",
                "Consider the following simple <br>communication</br> protocol.",
                "First, let all the voters communicate, for every one of the matchups in the first round, which of its two candidates they prefer.",
                "After this, the matchups for the second round are known, so let all the voters communicate which candidate they prefer in each matchup in the second round-etc.",
                "Because communicating which of two candidates is preferred requires only one bit per voter, and because there are only m − 1 matchups in total, this <br>communication</br> protocol requires O(nm) <br>communication</br>.",
                "Theorem 17.",
                "The nondeterministic <br>communication</br> complexity of the cup rule is Ω(nm) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We will exhibit a fooling set of size 2n m where m = (m − 1)/2 and n = (n − 7)/2.",
                "Given that m + 1 is a power of 2, so that one candidate gets a bye (that is, does not face an opponent) in the first round, let a be the candidate with the bye.",
                "Of the m first-round matchups, let lj denote the one (left) candidate in the jth matchup, and let rj be the other (right) candidate.",
                "Let L = {lj : 1 ≤ j ≤ m } and R = {rj : 1 ≤ j ≤ m }, so that C = L ∪ R ∪ {a}. . . . . . . . . . l r l r l r a m1 1 2 2 m Figure 1: The schedule for the cup rule used in the proof of Theorem 17.",
                "For every vector (S1, S2, . . . , Sn ) consisting of n subsets Si ⊆ R, let the following vector of votes be an element of the fooling set: • For 1 ≤ i ≤ n , let voter 2i − 1 rank the candidates Si L a R − Si. • For 1 ≤ i ≤ n , let voter 2i rank the candidates R − Si L a Si. • Let voters 2n +1 = n−6, 2n +2 = n−5, 2n +3 = n−4 rank the candidates L a R. • Let voters 2n + 4 = n − 3, 2n + 5 = n − 2 rank the candidates a r1 l1 r2 l2 . . . rm lm . • Let voters 2n + 6 = n − 1, 2n + 7 = n rank the candidates rm lm rm −1 lm −1 . . . r1 l1 a.",
                "We observe that this fooling set has size (2m )n = 2n m .",
                "Also, candidate a wins in each vector of votes in the fooling set, for the following reasons.",
                "Each candidate rj defeats its opponent lj in the first round. (For any 1 ≤ i ≤ n , the net effect of votes 2i − 1 and 2i on the pairwise election between rj and lj is zero; votes n − 6, n − 5, n − 4 prefer lj to rj, but votes n − 3, n − 2, n − 1, n all prefer rj to lj.)",
                "Moreover, a defeats every rj in their pairwise election. (For any 1 ≤ i ≤ n , the net effect of votes 2i − 1 and 2i on the pairwise election between a and rj is zero; votes n − 1, n prefer rj to a, but votes n − 6, n − 5, n − 4, n − 3, n − 2 all prefer a to rj.)",
                "It follows that a will defeat all the candidates that it faces.",
                "All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses.",
                "Let the first vote vector correspond to the vector 85 (S1 1 , S1 2 , . . . , S1 n ), and let the second vote vector correspond to the vector (S2 1 , S2 2 , . . . , S2 n ).",
                "For some i, we must have S1 i = S2 i , so that either S1 i S2 i or S2 i S1 i .",
                "Without loss of generality, suppose S1 i S2 i , and let rj be some candidate in S1 i − S2 i .",
                "Now, construct a new vote vector by taking vote 2i from the first vote vector, and the remaining votes from the second vote vector.",
                "We note that, whereas in the second vote vector vote 2i preferred rj to lj (because rj ∈ R−S2 i ), in the newly constructed vote vector this is no longer the case (because rj ∈ S1 i ).",
                "It follows that, whereas in the second vote vector, rj defeated lj in the first round by one vote, in the newly constructed vote vector, lj defeats rj in the first round.",
                "Thus, at least one lj advances to the second round after defeating its opponent rj.",
                "Now, we observe that in the newly constructed vote vector, any lk wins its pairwise election against any rq with q = k. This is because among the first 2n votes, at least n − 1 prefer lk to rq; votes n − 6, n − 5, n − 4 prefer lk to rq; and, because q = k, either votes n − 3, n − 2 prefer lk to rq (if k < q), or votes n − 1, n prefer lk to rq (if k > q).",
                "Thus, at least n + 4 = (n + 1)/2 > n/2 votes prefer lk to rq.",
                "Moreover, any lk wins its pairwise election against a.",
                "This is because only votes n − 3 and n − 2 prefer a to lk.",
                "It follows that, after the first round, any surviving candidate lk can only lose a matchup against another surviving lk , so that one of the lk must win the election.",
                "So, a is not the winner in the newly constructed vote vector, and hence we have a correct fooling set.",
                "Theorem 18.",
                "The deterministic <br>communication</br> complexity of the Bucklin rule is O(nm).",
                "Proof.",
                "Let l be the minimum integer for which there is a candidate who is ranked among the top l candidates by more than half the votes.",
                "We will do a binary search for l. At each point, we will have a lower bound lL which is smaller than l (initialized to 0), and an upper bound lH which is at least l (initialized to m).",
                "While lH − lL > 1, we continue by finding out whether (lH − l)/2 is smaller than l, after which we can update the bounds.",
                "To find out whether a number k is smaller than l, we determine every voters k most preferred candidates.",
                "Every voter can communicate which candidates are among her k most preferred candidates using m bits (for each candidate, indicate whether the candidate is among the top k or not), but because the binary search requires log m iterations, this gives us an upper bound of O((log m)nm), which is not strong enough.",
                "However, if lL < k < lH , and we already know a voters lL most preferred candidates, as well as her lH most preferred candidates, then the voter no longer needs to communicate whether the lL most preferred candidates are among her k most preferred candidates (because they must be), and she no longer needs to communicate whether the m−lH least preferred candidates are among her k most preferred candidates (because they cannot be).",
                "Thus the voter needs to communicate only m−lL −(m−lH ) = lH −lL bits in any given stage.",
                "Because each stage, lH − lL is (roughly) halved, each voter in total communicates only (roughly) m + m/2 + m/4 + . . . ≤ 2m bits.",
                "Theorem 19.",
                "The nondeterministic <br>communication</br> complexity of the Bucklin rule is Ω(nm) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We will exhibit a fooling set of size 2n m where m = (m−1)/2 and n = n/2.",
                "We write the set of candidates as the following disjoint union: C = {a} ∪ L ∪ R where L = {l1, l2, . . . , lm } and R = {r1, r2, . . . , rm }.",
                "For any subset S ⊆ {1, 2, . . . , m }, let L(S) = {li : i ∈ S} and let R(S) = {ri : i ∈ S}.",
                "For every vector (S1, S2, . . . , Sn ) consisting of n sets Si ⊆ {1, 2, . . . , m }, let the following vector of votes be an element of the fooling set: • For 1 ≤ i ≤ n , let voter 2i − 1 rank the candidates L(Si) R − R(Si) a L − L(Si) R(Si). • For 1 ≤ i ≤ n , let voter 2i rank the candidates L − L(Si) R(Si) a L(Si) R − R(Si).",
                "We observe that this fooling set has size (2m )n = 2n m , and that candidate a wins in each vector of votes in the fooling set, for the following reason.",
                "Each candidate in C − {a} is ranked among the top m candidates by exactly half the voters (which is not enough to win).",
                "Thus, we need to look at the voters top m +1 candidates, and a is ranked m +1th by all voters.",
                "All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses.",
                "Let the first vote vector correspond to the vector (S1 1 , S1 2 , . . . , S1 n ), and let the second vote vector correspond to the vector (S2 1 , S2 2 , . . . , S2 n ).",
                "For some i, we must have S1 i = S2 i , so that either S1 i S2 i or S2 i S1 i .",
                "Without loss of generality, suppose S1 i S2 i , and let j be some integer in S1 i − S2 i .",
                "Now, construct a new vote vector by taking vote 2i − 1 from the first vote vector, and the remaining votes from the second vote vector.",
                "In this newly constructed vote vector, a is still ranked m + 1th by all votes.",
                "However, lj is ranked among the top m candidates by n + 1 = n/2 + 1 votes.",
                "This is because whereas vote 2i − 1 does not rank lj among the top m candidates in the second vote vector (because j /∈ S2 i , we have lj /∈ L(S2 i )), vote 2i − 1 does rank lj among the top m candidates in the first vote vector (because j ∈ S1 i , we have lj ∈ L(S1 i )).",
                "So, a is not the winner in the newly constructed vote vector, and hence we have a correct fooling set.",
                "Theorem 20.",
                "The nondeterministic <br>communication</br> complexity of the ranked pairs rule is Ω(nm log m) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We omit this proof because of space constraint. 5.",
                "DISCUSSION One key obstacle to using voting for preference aggregation is the <br>communication</br> burden that an election places on the voters.",
                "By lowering this burden, it may become feasible to conduct more elections over more issues.",
                "In the limit, this could lead to a shift from representational government to a system in which most issues are decided by referenda-a veritable e-democracy.",
                "In this paper, we analyzed the <br>communication</br> complexity of the common voting rules.",
                "Knowing which voting rules require little <br>communication</br> is especially important when the issue to be voted on is of low enough importance that the following is true: the parties involved are willing to accept a rule that tends 86 to produce outcomes that are slightly less representative of the voters preferences, if this rule reduces the <br>communication</br> burden on the voters significantly.",
                "The following table summarizes the results we obtained.",
                "Rule Lower bound Upper bound plurality Ω(n log m) O(n log m) plurality w/ runoff Ω(n log m) O(n log m) STV Ω(n log m) O(n(log m)2) Condorcet Ω(nm) O(nm) approval Ω(nm) O(nm) Bucklin Ω(nm) O(nm) cup Ω(nm) O(nm) maximin Ω(nm) O(nm) Borda Ω(nm log m) O(nm log m) Copeland Ω(nm log m) O(nm log m) ranked pairs Ω(nm log m) O(nm log m) <br>communication</br> complexity of voting rules, sorted from low to high.",
                "All of the upper bounds are deterministic (with the exception of maximin, for which the best deterministic upper bound we proved is O(nm log m)).",
                "All of the lower bounds hold even for nondeterministic <br>communication</br> and even just for determining whether a given candidate a is the winner.",
                "One area of future research is to study what happens when we restrict our attention to <br>communication</br> protocols that do not reveal any strategically useful information.",
                "This restriction may invalidate some of the upper bounds that we derived using multistage <br>communication</br> protocols.",
                "Also, all of our bounds are worst-case bounds.",
                "It may be possible to outperform these bounds when the distribution of votes has additional structure.",
                "When deciding which voting rule to use for an election, there are many considerations to take into account.",
                "The voting rules that we studied in this paper are the most common ones that have survived the test of time.",
                "One way to select among these rules is to consider recent results on complexity.",
                "The table above shows that from a <br>communication</br> complexity perspective, plurality, plurality with runoff, and STV are preferable.",
                "However, plurality has the undesirable property that it is computationally easy to manipulate by voting strategically [3, 7].",
                "Plurality with runoff is NP-hard to manipulate by a coalition of weighted voters, or by an individual that faces correlated uncertainty about the others votes [7, 6].",
                "STV is NP-hard to manipulate in those settings as well [7], but also by an individual with perfect knowledge of the others votes (when the number of candidates is unbounded) [2].",
                "Therefore, STV is more robust, although it may require slightly more worst-case <br>communication</br> as per the table above.",
                "Yet other selection criteria are the computational complexity of determining whether enough information has been elicited to declare a winner, and that of determining the optimal sequence of queries [8]. 6.",
                "REFERENCES [1] Lawrence Ausubel and Paul Milgrom.",
                "Ascending auctions with package bidding.",
                "Frontiers of Theoretical Economics, 1, 2002.",
                "No. 1, Article 1. [2] John Bartholdi, III and James Orlin.",
                "Single transferable vote resists strategic voting.",
                "Social Choice and Welfare, 8(4):341-354, 1991. [3] John Bartholdi, III, Craig Tovey, and Michael Trick.",
                "The computational difficulty of manipulating an election.",
                "Social Choice and Welfare, 6(3):227-241, 1989. [4] Avrim Blum, Jeffrey Jackson, Tuomas Sandholm, and Martin Zinkevich.",
                "Preference elicitation and query learning.",
                "Journal of Machine Learning Research, 5:649-667, 2004. [5] Wolfram Conen and Tuomas Sandholm.",
                "Preference elicitation in combinatorial auctions: Extended abstract.",
                "In Proceedings of the ACM Conference on Electronic Commerce (ACM-EC), pages 256-259, 2001. [6] Vincent Conitzer, Jerome Lang, and Tuomas Sandholm.",
                "How many candidates are needed to make elections hard to manipulate?",
                "In Theoretical Aspects of Rationality and Knowledge (TARK), pages 201-214, 2003. [7] Vincent Conitzer and Tuomas Sandholm.",
                "Complexity of manipulating elections with few candidates.",
                "In Proceedings of the National Conference on Artificial Intelligence (AAAI), pages 314-319, 2002. [8] Vincent Conitzer and Tuomas Sandholm.",
                "Vote elicitation: Complexity and strategy-proofness.",
                "In Proceedings of the National Conference on Artificial Intelligence (AAAI), pages 392-397, 2002. [9] Sven de Vries, James Schummer, and Rakesh V. Vohra.",
                "On ascending auctions for heterogeneous objects, 2003.",
                "Draft. [10] Allan Gibbard.",
                "Manipulation of voting schemes.",
                "Econometrica, 41:587-602, 1973. [11] Benoit Hudson and Tuomas Sandholm.",
                "Effectiveness of query types and policies for preference elicitation in combinatorial auctions.",
                "In International Conference on Autonomous Agents and Multi-Agent Systems (AAMAS), pages 386-393, 2004. [12] E Kushilevitz and N Nisan.",
                "<br>communication</br> Complexity.",
                "Cambridge University Press, 1997. [13] Sebasti´en Lahaie and David Parkes.",
                "Applying learning algorithms to preference elicitation.",
                "In Proceedings of the ACM Conference on Electronic Commerce, 2004. [14] Noam Nisan and Ilya Segal.",
                "The <br>communication</br> requirements of efficient allocations and supporting prices.",
                "Journal of Economic Theory, 2005.",
                "Forthcoming. [15] David Parkes. iBundle: An efficient ascending price bundle auction.",
                "In Proceedings of the ACM Conference on Electronic Commerce (ACM-EC), pages 148-157, 1999. [16] Tuomas Sandholm.",
                "An implementation of the contract net protocol based on marginal cost calculations.",
                "In Proceedings of the National Conference on Artificial Intelligence (AAAI), pages 256-262, 1993. [17] Tuomas Sandholm and Craig Boutilier.",
                "Preference elicitation in combinatorial auctions.",
                "In Peter Cramton, Yoav Shoham, and Richard Steinberg, editors, Combinatorial Auctions, chapter 10.",
                "MIT Press, 2005. [18] Paolo Santi, Vincent Conitzer, and Tuomas Sandholm.",
                "Towards a characterization of polynomial preference elicitation with value queries in combinatorial auctions.",
                "In Conference on Learning Theory (COLT), pages 1-16, 2004. [19] Mark Satterthwaite.",
                "Strategy-proofness and Arrows conditions: existence and correspondence theorems for voting procedures and social welfare functions.",
                "Journal of Economic Theory, 10:187-217, 1975. [20] Ilya Segal.",
                "The <br>communication</br> requirements of social choice rules and supporting budget sets, 2004.",
                "Draft.",
                "Presented at the DIMACS Workshop on Computational Issues in Auction Design, Rutgers University, New Jersey, USA. [21] Peter Wurman and Michael Wellman.",
                "AkBA: A progressive, anonymous-price combinatorial auction.",
                "In Proceedings of the ACM Conference on Electronic Commerce (ACM-EC), pages 21-29, 2000. [22] A. C. Yao.",
                "Some complexity questions related to distributed computing.",
                "In Proceedings of the 11th ACM symposium on theory of computing (STOC), pages 209-213, 1979. [23] Martin Zinkevich, Avrim Blum, and Tuomas Sandholm.",
                "On polynomial-time preference elicitation with value queries.",
                "In Proceedings of the ACM Conference on Electronic Commerce (ACM-EC), pages 176-185, 2003. 87"
            ],
            "original_annotated_samples": [
                "<br>communication</br> Complexity of Common Voting Rules∗ Vincent Conitzer Carnegie Mellon University 5000 Forbes Avenue Pittsburgh, PA 15213, USA conitzer@cs.cmu.edu Tuomas Sandholm Carnegie Mellon University 5000 Forbes Avenue Pittsburgh, PA 15213, USA sandholm@cs.cmu.edu ABSTRACT We determine the <br>communication</br> complexity of the common voting rules.",
                "The rules (sorted by their <br>communication</br> complexity from low to high) are plurality, plurality with runoff, single transferable vote (STV), Condorcet, approval, Bucklin, cup, maximin, Borda, Copeland, and ranked pairs.",
                "For each rule, we first give a deterministic <br>communication</br> protocol and an upper bound on the number of bits communicated in it; then, we give a lower bound on (even the nondeterministic) <br>communication</br> requirements of the voting rule.",
                "INTRODUCTION One key factor in the practicality of any preference aggregation rule is its <br>communication</br> burden.",
                "Clever protocols that elicit the agents preferences partially and sequentially have the potential to dramatically reduce the required <br>communication</br>."
            ],
            "translated_annotated_samples": [
                "Determinamos la complejidad de <br>comunicación</br> de las reglas de votación comunes.",
                "Las reglas (ordenadas por su complejidad de <br>comunicación</br> de baja a alta) son pluralidad, pluralidad con segunda vuelta, voto único transferible (STV), Condorcet, aprobación, Bucklin, taza, maximin, Borda, Copeland y pares clasificados.",
                "Para cada regla, primero proporcionamos un protocolo de <br>comunicación</br> determinista y un límite superior en la cantidad de bits comunicados en él; luego, damos un límite inferior en los requisitos de <br>comunicación</br> (incluso los no deterministas) de la regla de votación.",
                "INTRODUCCIÓN Un factor clave en la viabilidad de cualquier regla de agregación de preferencias es su carga de <br>comunicación</br>.",
                "Los protocolos inteligentes que obtienen parcial y secuencialmente las preferencias de los agentes tienen el potencial de reducir drásticamente la <br>comunicación</br> requerida."
            ],
            "translated_text": "Determinamos la complejidad de <br>comunicación</br> de las reglas de votación comunes. Las reglas (ordenadas por su complejidad de <br>comunicación</br> de baja a alta) son pluralidad, pluralidad con segunda vuelta, voto único transferible (STV), Condorcet, aprobación, Bucklin, taza, maximin, Borda, Copeland y pares clasificados. Para cada regla, primero proporcionamos un protocolo de <br>comunicación</br> determinista y un límite superior en la cantidad de bits comunicados en él; luego, damos un límite inferior en los requisitos de <br>comunicación</br> (incluso los no deterministas) de la regla de votación. Los límites coinciden para todas las reglas de votación excepto STV y maximin. Categorías y Descriptores de Asignaturas F.2 [Teoría de la Computación]: Análisis de Algoritmos y Complejidad de Problemas; J.4 [Aplicaciones Informáticas]: Ciencias Sociales y del Comportamiento-Economía Términos Generales Algoritmos, Economía, Teoría 1. INTRODUCCIÓN Un factor clave en la viabilidad de cualquier regla de agregación de preferencias es su carga de <br>comunicación</br>. Para agregar con éxito las preferencias de los agentes, generalmente no es necesario que todos los agentes informen toda su información de preferencias. Los protocolos inteligentes que obtienen parcial y secuencialmente las preferencias de los agentes tienen el potencial de reducir drásticamente la <br>comunicación</br> requerida. ",
            "candidates": [],
            "error": [
                [
                    ""
                ]
            ]
        },
        "complexity": {
            "translated_key": "complejidad",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Communication <br>complexity</br> of Common Voting Rules∗ Vincent Conitzer Carnegie Mellon University 5000 Forbes Avenue Pittsburgh, PA 15213, USA conitzer@cs.cmu.edu Tuomas Sandholm Carnegie Mellon University 5000 Forbes Avenue Pittsburgh, PA 15213, USA sandholm@cs.cmu.edu ABSTRACT We determine the communication <br>complexity</br> of the common voting rules.",
                "The rules (sorted by their communication <br>complexity</br> from low to high) are plurality, plurality with runoff, single transferable vote (STV), Condorcet, approval, Bucklin, cup, maximin, Borda, Copeland, and ranked pairs.",
                "For each rule, we first give a deterministic communication protocol and an upper bound on the number of bits communicated in it; then, we give a lower bound on (even the nondeterministic) communication requirements of the voting rule.",
                "The bounds match for all voting rules except STV and maximin.",
                "Categories and Subject Descriptors F.2 [Theory of Computation]: Analysis of Algorithms and Problem <br>complexity</br>; J.4 [Computer Applications]: Social and Behavioral Sciences-Economics General Terms Algorithms, Economics, Theory 1.",
                "INTRODUCTION One key factor in the practicality of any preference aggregation rule is its communication burden.",
                "To successfully aggregate the agents preferences, it is usually not necessary for all the agents to report all of their preference information.",
                "Clever protocols that elicit the agents preferences partially and sequentially have the potential to dramatically reduce the required communication.",
                "This has at least the following advantages: • It can make preference aggregation feasible in settings where the total amount of preference information is too large to communicate. • Even when communicating all the preference information is feasible, reducing the communication requirements lessens the burden placed on the agents.",
                "This is especially true when the agents, rather than knowing all their preferences in advance, need to invest effort (such as computation or information gathering) to determine their preferences [16]. • It preserves (some of) the agents privacy.",
                "Most of the work on reducing the communication burden in preference aggregation has focused on resource allocation settings such as combinatorial auctions, in which an auctioneer auctions off a number of (possibly distinct) items in a single event.",
                "Because in a combinatorial auction, bidders can have separate valuations for each of an exponential number of possible bundles of items, this is a setting in which reducing the communication burden is especially crucial.",
                "This can be accomplished by supplementing the auctioneer with an elicitor that incrementally elicits parts of the bidders preferences on an as-needed basis, based on what the bidders have revealed about their preferences so far, as suggested by Conen and Sandholm [5].",
                "For example, the elicitor can ask for a bidders value for a specific bundle (value queries), which of two bundles the bidder prefers (order queries), which bundle he ranks kth or what the rank of a given bundle is (rank queries), which bundle he would purchase given a particular vector of prices (demand queries), etc.-until (at least) the final allocation can be determined.",
                "Experimentally, this yields drastic savings in preference revelation [11].",
                "Furthermore, if the agents valuation functions are drawn from certain natural subclasses, the elicitation problem can be solved using only polynomially many queries even in the worst case [23, 4, 13, 18, 14].",
                "For a review of preference elicitation in combinatorial auctions, see [17].",
                "Ascending combinatorial auctions are a well-known special form of preference elicitation, where the elicitor asks demand queries with increasing prices [15, 21, 1, 9].",
                "Finally, resource 78 allocation problems have also been studied from a communication <br>complexity</br> viewpoint, thereby deriving lower bounds on the required communication.",
                "For example, Nisan and Segal show that exponential communication is required even to obtain a surplus greater than that obtained by auctioning off all objects as a single bundle [14].",
                "Segal also studies social choice rules in general, and shows that for a large class of social choice rules, supporting budget sets must be revealed such that if every agent prefers the same outcome in her budget set, this proves the optimality of that outcome.",
                "Segal then uses this characterization to prove bounds on the communication required in resource allocation as well as matching settings [20].",
                "In this paper, we will focus on the communication requirements of a generally applicable subclass of social choice rules, commonly known as voting rules.",
                "In a voting setting, there is a set of candidate outcomes over which the voters express their preferences by submitting a vote (typically, a ranking of the candidates), and the winner (that is, the chosen outcome) is determined based on these votes.",
                "The communication required by voting rules can be large either because the number of voters is large (such as, for example, in national elections), or because the number of candidates is large (for example, the agents can vote over allocations of a number of resources), or both.",
                "Prior work [8] has studied elicitation in voting, studying how computationally hard it is to decide whether a winner can be determined with the information elicited so far, as well as how hard it is to find the optimal sequence of queries given perfect suspicions about the voters preferences.",
                "In addition, that paper discusses strategic (game-theoretic) issues introduced by elicitation.",
                "In contrast, in this paper, we are concerned with the worst-case number of bits that must be communicated to execute a given voting rule, when nothing is known in advance about the voters preferences.",
                "We determine the communication <br>complexity</br> of the common voting rules.",
                "For each rule, we first give an upper bound on the (deterministic) communication <br>complexity</br> by providing a communication protocol for it and analyzing how many bits need to be transmitted in this protocol. (Segals results [20] do not apply to most voting rules because most voting rules are not intersectionmonotonic (or even monotonic).1 ) For many of the voting rules under study, it turns out that one cannot do better than simply letting each voter immediately communicate all her (potentially relevant) information.",
                "However, for some rules (such as plurality with runoff, STV and cup) there is a straightforward multistage communication protocol that, with some analysis, can be shown to significantly outperform the immediate communication of all (potentially relevant) information.",
                "Finally, for some rules (such as the Condorcet and Bucklin rules), we need to introduce a more complex communication protocol to achieve the best possible upper 1 For two of the rules that we study that are intersectionmonotonic, namely the approval and Condorcet rules, Segals results can in fact be used to give alternative proofs of our lower bounds.",
                "We only give direct proofs for these rules here because 1) these direct proofs are among the easier ones in this paper, 2) the alternative proofs are nontrivial even given Segals results, and 3) a space constraint applies.",
                "However, we hope to also include the alternative proofs in a later version. bound.",
                "After obtaining the upper bounds, we show that they are tight by giving matching lower bounds on (even the nondeterministic) communication <br>complexity</br> of each voting rule.",
                "There are two exceptions: STV, for which our upper and lower bounds are apart by a factor log m; and maximin, for which our best deterministic upper bound is also a factor log m above the (nondeterministic) lower bound, although we give a nondeterministic upper bound that matches the lower bound. 2. REVIEW OF VOTING RULES In this section, we review the common voting rules that we study in this paper.",
                "A voting rule2 is a function mapping a vector of the n voters votes (i.e. preferences over candidates) to one of the m candidates (the winner) in the candidate set C. In some cases (such as the Condorcet rule), the rule may also declare that no winner exists.",
                "We do not concern ourselves with what happens in case of a tie between candidates (our lower bounds hold regardless of how ties are broken, and the communication protocols used for our upper bounds do not attempt to break the ties).",
                "All of the rules that we study are rank-based rules, which means that a vote is defined as an ordering of the candidates (with the exception of the plurality rule, for which a vote is a single candidate, and the approval rule, for which a vote is a subset of the candidates).",
                "We will consider the following voting rules. (For rules that define a score, the candidate with the highest score wins.) • scoring rules.",
                "Let α = α1, . . . , αm be a vector of integers such that α1 ≥ α2 . . . ≥ αm.",
                "For each voter, a candidate receives α1 points if it is ranked first by the voter, α2 if it is ranked second etc.",
                "The score sα of a candidate is the total number of points the candidate receives.",
                "The Borda rule is the scoring rule with α = m−1, m−2, . . . , 0 .",
                "The plurality rule is the scoring rule with α = 1, 0, . . . , 0 . • single transferable vote (STV).",
                "The rule proceeds through a series of m − 1 rounds.",
                "In each round, the candidate with the lowest plurality score (that is, the least number of voters ranking it first among the remaining candidates) is eliminated (and each of the votes for that candidate transfer to the next remaining candidate in the order given in that vote).",
                "The winner is the last remaining candidate. • plurality with run-off.",
                "In this rule, a first round eliminates all candidates except the two with the highest plurality scores.",
                "Votes are transferred to these as in the STV rule, and a second round determines the winner from these two. • approval.",
                "Each voter labels each candidate as either approved or disapproved.",
                "The candidate approved by the greatest number of voters wins. • Condorcet.",
                "For any two candidates i and j, let N(i, j) be the number of voters who prefer i to j.",
                "If there is a candidate i that is preferred to any other candidate by a majority of the voters (that is, N(i, j) > N(j, i) for all j = i-that is, i wins every pairwise election), then candidate i wins. 2 The term voting protocol is often used to describe the same concept, but we seek to draw a sharp distinction between the rule mapping preferences to outcomes, and the communication/elicitation protocol used to implement this rule. 79 • maximin (aka.",
                "Simpson).",
                "The maximin score of i is s(i) = minj=i N(i, j)-that is, is worst performance in a pairwise election.",
                "The candidate with the highest maximin score wins. • Copeland.",
                "For any two distinct candidates i and j, let C(i, j) = 1 if N(i, j) > N(j, i), C(i, j) = 1/2 if N(i, j) = N(j, i) and C(i, j) = 0 if N(i, j) < N(j, i).",
                "The Copeland score of candidate i is s(i) = j=i C(i, j). • cup (sequential binary comparisons).",
                "The cup rule is defined by a balanced3 binary tree T with one leaf per candidate, and an assignment of candidates to leaves (each leaf gets one candidate).",
                "Each non-leaf node is assigned the winner of the pairwise election of the nodes children; the candidate assigned to the root wins. • Bucklin.",
                "For any candidate i and integer l, let B(i, l) be the number of voters that rank candidate i among the top l candidates.",
                "The winner is arg mini(min{l : B(i, l) > n/2}).",
                "That is, if we say that a voter approves her top l candidates, then we repeatedly increase l by 1 until some candidate is approved by more than half the voters, and this candidate is the winner. • ranked pairs.",
                "This rule determines an order on all the candidates, and the winner is the candidate at the top of this order.",
                "Sort all ordered pairs of candidates (i, j) by N(i, j), the number of voters who prefer i to j.",
                "Starting with the pair (i, j) with the highest N(i, j), we lock in the result of their pairwise election (i j).",
                "Then, we move to the next pair, and we lock the result of their pairwise election.",
                "We continue to lock every pairwise result that does not contradict the ordering established so far.",
                "We emphasize that these definitions of voting rules do not concern themselves with how the votes are elicited from the voters; all the voting rules, including those that are suggestively defined in terms of rounds, are in actuality just functions mapping the vector of all the voters votes to a winner.",
                "Nevertheless, there are always many different ways of eliciting the votes (or the relevant parts thereof) from the voters.",
                "For example, in the plurality with runoff rule, one way of eliciting the votes is to ask every voter to declare her entire ordering of the candidates up front.",
                "Alternatively, we can first ask every voter to declare only her most preferred candidate; then, we will know the two candidates in the runoff, and we can ask every voter which of these two candidates she prefers.",
                "Thus, we distinguish between the voting rule (the mapping from vectors of votes to outcomes) and the communication protocol (which determines how the relevant parts of the votes are actually elicited from the voters).",
                "The goal of this paper is to give efficient communication protocols for the voting rules just defined, and to prove that there do not exist any more efficient communication protocols.",
                "It is interesting to note that the choice of the communication protocol may affect the strategic behavior of the voters.",
                "Multistage communication protocols may reveal to the voters some information about how the other voters are voting (for example, in the two-stage communication protocol just given for plurality with runoff, in the second stage voters 3 Balanced means that the difference in depth between two leaves can be at most one. will know which two candidates have the highest plurality scores).",
                "In general, when the voters receive such information, it may give them incentives to vote differently than they would have in a single-stage communication protocol in which all voters declare their entire votes simultaneously.",
                "Of course, even the single-stage communication protocol is not strategy-proof4 for any reasonable voting rule, by the Gibbard-Satterthwaite theorem [10, 19].",
                "However, this does not mean that we should not be concerned about adding even more opportunities for strategic voting.",
                "In fact, many of the communication protocols introduced in this paper do introduce additional opportunities for strategic voting, but we do not have the space to discuss this here. (In prior work [8], we do give an example where an elicitation protocol for the approval voting rule introduces strategic voting, and give principles for designing elicitation protocols that do not introduce strategic problems.)",
                "Now that we have reviewed voting rules, we move on to a brief review of communication <br>complexity</br> theory. 3. REVIEW OF SOME COMMUNICATION <br>complexity</br> THEORY In this section, we review the basic model of a communication problem and the lower-bounding technique of constructing a fooling set. (The basic model of a communication problem is due to Yao [22]; for an overview see Kushilevitz and Nisan [12].)",
                "Each player 1 ≤ i ≤ n knows (only) input xi.",
                "Together, they seek to compute f(x1, x2, . . . , xn).",
                "In a deterministic protocol for computing f, in each stage, one of the players announces (to all other players) a bit of information based on her own input and the bits announced so far.",
                "Eventually, the communication terminates and all players know f(x1, x2, . . . , xn).",
                "The goal is to minimize the worst-case (over all input vectors) number of bits sent.",
                "The deterministic communication <br>complexity</br> of a problem is the worstcase number of bits sent in the best (correct) deterministic protocol for it.",
                "In a nondeterministic protocol, the next bit to be sent can be chosen nondeterministically.",
                "For the purposes of this paper, we will consider a nondeterministic protocol correct if for every input vector, there is some sequence of nondeterministic choices the players can make so that the players know the value of f when the protocol terminates.",
                "The nondeterministic communication <br>complexity</br> of a problem is the worst-case number of bits sent in the best (correct) nondeterministic protocol for it.",
                "We are now ready to give the definition of a fooling set.",
                "Definition 1.",
                "A fooling set is a set of input vectors {(x1 1, x1 2, . . . , x1 n), (x2 1, x2 2, . . . , x2 n), . . . , (xk 1 , xk 2 , . . . , xk n) such that for any i, f(xi 1, xi 2, . . . , xi n) = f0 for some constant f0, but for any i = j, there exists some vector (r1, r2, . . . , rn) ∈ {i, j}n such that f(xr1 1 , xr2 2 , . . . , xrn n ) = f0. (That is, we can mix the inputs from the two input vectors to obtain a vector with a different function value.)",
                "It is known that if a fooling set of size k exists, then log k is a lower bound on the communication <br>complexity</br> (even the nondeterministic communication <br>complexity</br>) [12]. 4 A strategy-proof protocol is one in which it is in the players best interest to report their preferences truthfully. 80 For the purposes of this paper, f is the voting rule that maps the votes to the winning candidate, and xi is voter is vote (the information that the voting rule would require from the voter if there were no possibility of multistage communication-i.e. the most preferred candidate (plurality), the approved candidates (approval), or the ranking of all the candidates (all other protocols)).",
                "However, when we derive our lower bounds, f will only signify whether a distinguished candidate a wins. (That is, f is 1 if a wins, and 0 otherwise.)",
                "This will strengthen our lower bound results (because it implies that even finding out whether one given candidate wins is hard).5 Thus, a fooling set in our context is a set of vectors of votes so that a wins (does not win) with each of them; but for any two different vote vectors in the set, there is a way of taking some voters votes from the first vector and the others votes from the second vector, so that a does not win (wins).",
                "To simplify the proofs of our lower bounds, we make assumptions such as the number of voters n is odd in many of these proofs.",
                "Therefore, technically, we do not prove the lower bound for (number of candidates, number of voters) pairs (m, n) that do not satisfy these assumptions (for example, if we make the above assumption, then we technically do not prove the lower bound for any pair (m, n) in which n is even).",
                "Nevertheless, we always prove the lower bound for a representative set of (m, n) pairs.",
                "For example, for every one of our lower bounds it is the case that for infinitely many values of m, there are infinitely many values of n such that the lower bound is proved for the pair (m, n). 4.",
                "RESULTS We are now ready to present our results.",
                "For each voting rule, we first give a deterministic communication protocol for determining the winner to establish an upper bound.",
                "Then, we give a lower bound on the nondeterministic communication <br>complexity</br> (even on the <br>complexity</br> of deciding whether a given candidate wins, which is an easier question).",
                "The lower bounds match the upper bounds in all but two cases: the STV rule (upper bound O(n(log m)2 ); lower bound Ω(n log m)) and the maximin rule (upper bound O(nm log m), although we do give a nondeterministic protocol that is O(nm); lower bound Ω(nm)).",
                "When we discuss a voting rule in which the voters rank the candidates, we will represent a ranking in which candidate c1 is ranked first, c2 is ranked second, etc. as c1 c2 . . . cm. 5 One possible concern is that in the case where ties are possible, it may require much communication to verify whether a specific candidate a is among the winners, but little communication to produce one of the winners.",
                "However, all the fooling sets we use in the proofs have the property that if a wins, then a is the unique winner.",
                "Therefore, in these fooling sets, if one knows any one of the winners, then one knows whether a is a winner.",
                "Thus, computing one of the winners requires at least as much communication as verifying whether a is among the winners.",
                "In general, when a communication problem allows multiple correct answers for a given vector of inputs, this is known as computing a relation rather than a function [12].",
                "However, as per the above, we can restrict our attention to a subset of the domain where the voting rule truly is a (single-valued) function, and hence lower bounding techniques for functions rather than relations will suffice.",
                "Sometimes for the purposes of a proof the internal ranking of a subset of the candidates does not matter, and in this case we will not specify it.",
                "For example, if S = {c2, c3}, then c1 S c4 indicates that either the ranking c1 c2 c3 c4 or the ranking c1 c3 c2 c4 can be used for the proof.",
                "We first give a universal upper bound.",
                "Theorem 1.",
                "The deterministic communication <br>complexity</br> of any rank-based voting rule is O(nm log m).",
                "Proof.",
                "This bound is achieved by simply having everyone communicate their entire ordering of the candidates (indicating the rank of an individual candidate requires only O(log m) bits, so each of the n voters can simply indicate the rank of each of the m candidates).",
                "The next lemma will be useful in a few of our proofs.",
                "Lemma 1.",
                "If m divides n, then log(n! )−m log((n/m)!) ≥ n(log m − 1)/2.",
                "Proof.",
                "If n/m = 1 (that is, n = m), then this expression simplifies to log(n!).",
                "We have log(n!) = n i=1 log i ≥ n x=1 log(i)dx, which, using integration by parts, is equal to n log n − (n − 1) > n(log n − 1) = n(log m − 1) > n(log m − 1)/2.",
                "So, we can assume that n/m ≥ 2.",
                "We observe that log(n!) = n i=1 log i = n/m−1 i=0 m j=1 log(im+j) ≥ n/m−1 i=1 m j=1 log(im) = m n/m−1 i=1 log(im), and that m log((n/m)!) = m n/m i=1 log(i).",
                "Therefore, log(n!) − m log((n/m)!) ≥ m n/m−1 i=1 log(im) − m n/m i=1 log(i) = m(( n/m−1 i=1 log(im/i))−log(n/m)) = m((n/m− 1) log m−log n+log m) = n log m−m log n. Now, using the fact that n/m ≥ 2, we have m log n = n(m/n) log m(n/m) = n(m/n)(log m + log(n/m)) ≤ n(1/2)(log m + log 2).",
                "Thus, log(n!) − m log((n/m)!) ≥ n log m − m log n ≥ n log m − n(1/2)(log m + log 2) = n(log m − 1)/2.",
                "Theorem 2.",
                "The deterministic communication <br>complexity</br> of the plurality rule is O(n log m).",
                "Proof.",
                "Indicating one of the candidates requires only O(log m) bits, so each voter can simply indicate her most preferred candidate.",
                "Theorem 3.",
                "The nondeterministic communication <br>complexity</br> of the plurality rule is Ω(n log m) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We will exhibit a fooling set of size n ! (( n m )! )m where n = (n−1)/2.",
                "Taking the logarithm of this gives log(n ! )− m log((n /m)! ), so the result follows from Lemma 1.",
                "The fooling set will consist of all vectors of votes satisfying the following constraints: • For any 1 ≤ i ≤ n , voters 2i−1 and 2i vote the same. 81 • Every candidate receives equally many votes from the first 2n = n − 1 voters. • The last voter (voter n) votes for a.",
                "Candidate a wins with each one of these vote vectors because of the extra vote for a from the last voter.",
                "Given that m divides n , let us see how many vote vectors there are in the fooling set.",
                "We need to distribute n voter pairs evenly over m candidates, for a total of n /m voter pairs per candidate; and there are precisely n ! (( n m )! )m ways of doing this.6 All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses.",
                "Let i be a number such that the two vote vectors disagree on the candidate for which voters 2i − 1 and 2i vote.",
                "Without loss of generality, suppose that in the first vote vector, these voters do not vote for a (but for some other candidate, b, instead).",
                "Now, construct a new vote vector by taking votes 2i − 1 and 2i from the first vote vector, and the remaining votes from the second vote vector.",
                "Then, b receives 2n /m + 2 votes in this newly constructed vote vector, whereas a receives at most 2n /m+1 votes.",
                "So, a is not the winner in the newly constructed vote vector, and hence we have a correct fooling set.",
                "Theorem 4.",
                "The deterministic communication <br>complexity</br> of the plurality with runoff rule is O(n log m).",
                "Proof.",
                "First, let every voter indicate her most preferred candidate using log m bits.",
                "After this, the two candidates in the runoff are known, and each voter can indicate which one she prefers using a single additional bit.",
                "Theorem 5.",
                "The nondeterministic communication <br>complexity</br> of the plurality with runoff rule is Ω(n log m) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We will exhibit a fooling set of size n ! (( n m )! )m where m = m/2 and n = (n − 2)/4.",
                "Taking the logarithm of this gives log(n !) − m log((n /m )! ), so the result follows from Lemma 1.",
                "Divide the candidates into m pairs: (c1, d1), (c2, d2), . . . , (cm , dm ) where c1 = a and d1 = b.",
                "The fooling set will consist of all vectors of votes satisfying the following constraints: • For any 1 ≤ i ≤ n , voters 4i − 3 and 4i − 2 rank the candidates ck(i) a C − {a, ck(i)}, for some candidate ck(i). (If ck(i) = a then the vote is simply a C − {a}.) • For any 1 ≤ i ≤ n , voters 4i − 1 and 4i rank the candidates dk(i) a C − {a, dk(i)} (that is, their most preferred candidate is the candidate that is paired with the candidate that the previous two voters vote for). 6 An intuitive proof of this is the following.",
                "We can count the number of permutations of n elements as follows.",
                "First, divide the elements into m buckets of size n /m, so that if x is placed in a lower-indexed bucket than y, then x will be indexed lower in the eventual permutation.",
                "Then, decide on the permutation within each bucket (for which there are (n /m)! choices per bucket).",
                "It follows that n ! equals the number of ways to divide n elements into m buckets of size n /m, times ((n /m)! )m . • Every candidate is ranked at the top of equally many of the first 4n = n − 2 votes. • Voter 4n +1 = n−1 ranks the candidates a C−{a}. • Voter 4n + 2 = n ranks the candidates b C − {b}.",
                "Candidate a wins with each one of these vote vectors: because of the last two votes, candidates a and b are one vote ahead of all the other candidates and continue to the runoff, and at this point all the votes that had another candidate ranked at the top transfer to a, so that a wins the runoff.",
                "Given that m divides n , let us see how many vote vectors there are in the fooling set.",
                "We need to distribute n groups of four voters evenly over the m pairs of candidates, and (as in the proof of Theorem 3) there are n ! (( n m )! )m ways of doing this.",
                "All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses.",
                "Let i be a number such that ck(i) is not the same in both of these two vote vectors, that is, c1 k(i) (ck(i) in the first vote vector) is not equal to c2 k(i) (ck(i) in the second vote vector).",
                "Without loss of generality, suppose c1 k(i) = a.",
                "Now, construct a new vote vector by taking votes 4i − 3, 4i − 2, 4i − 1, 4i from the first vote vector, and the remaining votes from the second vote vector.",
                "In this newly constructed vote vector, c1 k(i) and d1 k(i) each receive 4n /m+2 votes in the first round, whereas a receives at most 4n /m+1 votes.",
                "So, a does not continue to the runoff in the newly constructed vote vector, and hence we have a correct fooling set.",
                "Theorem 6.",
                "The nondeterministic communication <br>complexity</br> of the Borda rule is Ω(nm log m) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We will exhibit a fooling set of size (m ! )n where m = m−2 and n = (n−2)/4.",
                "This will prove the theorem because m ! is Ω(m log m), so that log((m ! )n ) = n log(m !) is Ω(nm log m).",
                "For every vector (π1, π2, . . . , πn ) consisting of n orderings of all candidates other than a and another fixed candidate b (technically, the orderings take the form of a one-to-one function πi : {1, 2, . . . , m } → C − {a, b} with πi(j) = c indicating that candidate c is the jth in the order represented by πi), let the following vector of votes be an element of the fooling set: • For 1 ≤ i ≤ n , let voters 4i − 3 and 4i − 2 rank the candidates a b πi(1) πi(2) . . . πi(m ). • For 1 ≤ i ≤ n , let voters 4i − 1 and 4i rank the candidates πi(m ) πi(m − 1) . . . πi(1) b a. • Let voter 4n + 1 = n − 1 rank the candidates a b π0(1) π0(2) . . . π0(m ) (where π0 is an arbitrary order of the candidates other than a and b which is the same for every element of the fooling set). • Let voter 4n + 2 = n rank the candidates π0(m ) π0(m − 1) . . . π0(1) a b.",
                "We observe that this fooling set has size (m ! )n , and that candidate a wins in each vector of votes in the fooling set (to 82 see why, we observe that for any 1 ≤ i ≤ n , votes 4i−3 and 4i − 2 rank the candidates in the exact opposite way from votes 4i − 1 and 4i, which under the Borda rule means they cancel out; and the last two votes give one more point to a than to any other candidate-besides b who gets two fewer points than a).",
                "All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses.",
                "Let the first vote vector correspond to the vector (π1 1, π1 2, . . . , π1 n ), and let the second vote vector correspond to the vector (π2 1, π2 2, . . . , π2 n ).",
                "For some i, we must have π1 i = π2 i , so that for some candidate c /∈ {a, b}, (π1 i )−1 (c) < (π2 i )−1 (c) (that is, c is ranked higher in π1 i than in π2 i ).",
                "Now, construct a new vote vector by taking votes 4i−3 and 4i−2 from the first vote vector, and the remaining votes from the second vote vector. as Borda score remains unchanged.",
                "However, because c is ranked higher in π1 i than in π2 i , c receives at least 2 more points from votes 4i−3 and 4i − 2 in the newly constructed vote vector than it did in the second vote vector.",
                "It follows that c has a higher Borda score than a in the newly constructed vote vector.",
                "So, a is not the winner in the newly constructed vote vector, and hence we have a correct fooling set.",
                "Theorem 7.",
                "The nondeterministic communication <br>complexity</br> of the Copeland rule is Ω(nm log m) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We will exhibit a fooling set of size (m ! )n where m = (m − 2)/2 and n = (n − 2)/2.",
                "This will prove the theorem because m ! is Ω(m log m), so that log((m ! )n ) = n log(m !) is Ω(nm log m).",
                "We write the set of candidates as the following disjoint union: C = {a, b} ∪ L ∪ R where L = {l1, l2, . . . , lm } and R = {r1, r2, . . . , rm }.",
                "For every vector (π1, π2, . . . , πn ) consisting of n permutations of the integers 1 through m (πi : {1, 2, . . . , m } → {1, 2, . . . , m }), let the following vector of votes be an element of the fooling set: • For 1 ≤ i ≤ n , let voter 2i − 1 rank the candidates a b lπi(1) rπi(1) lπi(2) rπi(2) . . . lπi(m ) rπi(m ). • For 1 ≤ i ≤ n , let voter 2i rank the candidates rπi(m ) lπi(m ) rπi(m −1) lπi(m −1) . . . rπi(1) lπi(1) b a. • Let voter n − 1 = 2n + 1 rank the candidates a b l1 r1 l2 r2 . . . lm rm . • Let voter n = 2n +2 rank the candidates rm lm rm −1 lm −1 . . . r1 l1 a b.",
                "We observe that this fooling set has size (m ! )n , and that candidate a wins in each vector of votes in the fooling set (every pair of candidates is tied in their pairwise election, with the exception that a defeats b, so that a wins the election by half a point).",
                "All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses.",
                "Let the first vote vector correspond to the vector (π1 1, π1 2, . . . , π1 n ), and let the second vote vector correspond to the vector (π2 1, π2 2, . . . , π2 n ).",
                "For some i, we must have π1 i = π2 i , so that for some j ∈ {1, 2, . . . , m }, we have (π1 i )−1 (j) < (π2 i )−1 (j).",
                "Now, construct a new vote vector by taking vote 2i−1 from the first vote vector, and the remaining votes from the second vote vector. as Copeland score remains unchanged.",
                "Let us consider the score of lj.",
                "We first observe that the rank of lj in vote 2i − 1 in the newly constructed vote vector is at least 2 higher than it was in the second vote vector, because (π1 i )−1 (j) < (π2 i )−1 (j).",
                "Let D1 (lj) be the set of candidates in L ∪ R that voter 2i − 1 ranked lower than lj in the first vote vector (D1 (lj) = {c ∈ L ∪ R : lj 1 2i−1 c}), and let D2 (lj) be the set of candidates in L ∪ R that voter 2i − 1 ranked lower than lj in the second vote vector (D2 (lj) = {c ∈ L ∪ R : lj 2 2i−1 c}).",
                "Then, it follows that in the newly constructed vote vector, lj defeats all the candidates in D1 (lj) − D2 (lj) in their pairwise elections (because lj receives an extra vote in each one of these pairwise elections relative to the second vote vector), and loses to all the candidates in D2 (lj) − D1 (lj) (because lj loses a vote in each one of these pairwise elections relative to the second vote vector), and ties with everyone else.",
                "But |D1 (lj)|−|D2 (lj)| ≥ 2, and hence |D1 (lj) − D2 (lj)| − |D2 (lj) − D1 (lj)| ≥ 2.",
                "Hence, in the newly constructed vote vector, lj has at least two more pairwise wins than pairwise losses, and therefore has at least 1 more point than if lj had tied all its pairwise elections.",
                "Thus, lj has a higher Copeland score than a in the newly constructed vote vector.",
                "So, a is not the winner in the newly constructed vote vector, and hence we have a correct fooling set.",
                "Theorem 8.",
                "The nondeterministic communication <br>complexity</br> of the maximin rule is O(nm).",
                "Proof.",
                "The nondeterministic protocol will guess which candidate w is the winner, and, for each other candidate c, which candidate o(c) is the candidate against whom c receives its lowest score in a pairwise election.",
                "Then, let every voter communicate the following: • for each candidate c = w, whether she prefers c to w; • for each candidate c = w, whether she prefers c to o(c).",
                "We observe that this requires the communication of 2n(m− 1) bits.",
                "If the guesses were correct, then, letting N(d, e) be the number of voters preferring candidate d to candidate e, we should have N(c, o(c)) < N(w, c ) for any c = w, c = w, which will prove that w wins the election.",
                "Theorem 9.",
                "The nondeterministic communication <br>complexity</br> of the maximin rule is Ω(nm) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We will exhibit a fooling set of size 2n m where m = m − 2 and n = (n − 1)/4.",
                "Let b be a candidate other than a.",
                "For every vector (S1, S2, . . . , Sn ) consisting of n subsets Si ⊆ C − {a, b}, let the following vector of votes be an element of the fooling set: • For 1 ≤ i ≤ n , let voters 4i − 3 and 4i − 2 rank the candidates Si a C − (Si ∪ {a, b}) b. • For 1 ≤ i ≤ n , let voters 4i − 1 and 4i rank the candidates b C − (Si ∪ {a, b}) a Si. 83 • Let voter 4n + 1 = n rank the candidates a b C − {a, b}.",
                "We observe that this fooling set has size (2m )n = 2n m , and that candidate a wins in each vector of votes in the fooling set (in every one of as pairwise elections, a is ranked higher than its opponent by 2n +1 = (n+1)/2 > n/2 votes).",
                "All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses.",
                "Let the first vote vector correspond to the vector (S1 1 , S1 2 , . . . , S1 n ), and let the second vote vector correspond to the vector (S2 1 , S2 2 , . . . , S2 n ).",
                "For some i, we must have S1 i = S2 i , so that either S1 i S2 i or S2 i S1 i .",
                "Without loss of generality, suppose S1 i S2 i , and let c be some candidate in S1 i − S2 i .",
                "Now, construct a new vote vector by taking votes 4i − 3 and 4i − 2 from the first vote vector, and the remaining votes from the second vote vector.",
                "In this newly constructed vote vector, a is ranked higher than c by only 2n −1 voters, for the following reason.",
                "Whereas voters 4i−3 and 4i − 2 do not rank c higher than a in the second vote vector (because c /∈ S2 i ), voters 4i − 3 and 4i − 2 do rank c higher than a in the first vote vector (because c ∈ S1 i ).",
                "Moreover, in every one of bs pairwise elections, b is ranked higher than its opponent by at least 2n voters.",
                "So, a has a lower maximin score than b, therefore a is not the winner in the newly constructed vote vector, and hence we have a correct fooling set.",
                "Theorem 10.",
                "The deterministic communication <br>complexity</br> of the STV rule is O(n(log m)2 ).",
                "Proof.",
                "Consider the following communication protocol.",
                "Let each voter first announce her most preferred candidate (O(n log m) communication).",
                "In the remaining rounds, we will keep track of each voters most preferred candidate among the remaining candidates, which will be enough to implement the rule.",
                "When candidate c is eliminated, let each of the voters whose most preferred candidate among the remaining candidates was c announce their most preferred candidate among the candidates remaining after cs elimination.",
                "If candidate c was the ith candidate to be eliminated (that is, there were m − i + 1 candidates remaining before cs elimination), it follows that at most n/(m − i + 1) voters had candidate c as their most preferred candidate among the remaining candidates, and thus the number of bits to be communicated after the elimination of the ith candidate is O((n/(m−i+1)) log m).7 Thus, the total communication in this communication protocol is O(n log m + m−1 i=1 (n/(m − i + 1)) log m).",
                "Of course, m−1 i=1 1/(m − i + 1) = m i=2 1/i, which is O(log m).",
                "Substituting into the previous expression, we find that the communication <br>complexity</br> is O(n(log m)2 ).",
                "Theorem 11.",
                "The nondeterministic communication <br>complexity</br> of the STV rule is Ω(n log m) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We omit this proof because of space constraint. 7 Actually, O((n/(m − i + 1)) log(m − i + 1)) is also correct, but it will not improve the bound.",
                "Theorem 12.",
                "The deterministic communication <br>complexity</br> of the approval rule is O(nm).",
                "Proof.",
                "Approving or disapproving of a candidate requires only one bit of information, so every voter can simply approve or disapprove of every candidate for a total communication of nm bits.",
                "Theorem 13.",
                "The nondeterministic communication <br>complexity</br> of the approval rule is Ω(nm) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We will exhibit a fooling set of size 2n m where m = m − 1 and n = (n − 1)/4.",
                "For every vector (S1, S2, . . . , Sn ) consisting of n subsets Si ⊆ C − {a}, let the following vector of votes be an element of the fooling set: • For 1 ≤ i ≤ n , let voters 4i − 3 and 4i − 2 approve Si ∪ {a}. • For 1 ≤ i ≤ n , let voters 4i − 1 and 4i approve C − (Si ∪ {a}). • Let voter 4n + 1 = n approve {a}.",
                "We observe that this fooling set has size (2m )n = 2n m , and that candidate a wins in each vector of votes in the fooling set (a is approved by 2n + 1 voters, whereas each other candidate is approved by only 2n voters).",
                "All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses.",
                "Let the first vote vector correspond to the vector (S1 1 , S1 2 , . . . , S1 n ), and let the second vote vector correspond to the vector (S2 1 , S2 2 , . . . , S2 n ).",
                "For some i, we must have S1 i = S2 i , so that either S1 i S2 i or S2 i S1 i .",
                "Without loss of generality, suppose S1 i S2 i , and let b be some candidate in S1 i − S2 i .",
                "Now, construct a new vote vector by taking votes 4i − 3 and 4i − 2 from the first vote vector, and the remaining votes from the second vote vector.",
                "In this newly constructed vote vector, a is still approved by 2n + 1 votes.",
                "However, b is approved by 2n + 2 votes, for the following reason.",
                "Whereas voters 4i−3 and 4i−2 do not approve b in the second vote vector (because b /∈ S2 i ), voters 4i − 3 and 4i − 2 do approve b in the first vote vector (because b ∈ S1 i ).",
                "It follows that bs score in the newly constructed vote vector is bs score in the second vote vector (2n ), plus two.",
                "So, a is not the winner in the newly constructed vote vector, and hence we have a correct fooling set.",
                "Interestingly, an Ω(m) lower bound can be obtained even for the problem of finding a candidate that is approved by more than one voter [20].",
                "Theorem 14.",
                "The deterministic communication <br>complexity</br> of the Condorcet rule is O(nm).",
                "Proof.",
                "We maintain a set of active candidates S which is initialized to C. At each stage, we choose two of the active candidates (say, the two candidates with the lowest indices), and we let each voter communicate which of the two candidates she prefers. (Such a stage requires the communication of n bits, one per voter.)",
                "The candidate preferred by fewer 84 voters (the loser of the pairwise election) is removed from S. (If the pairwise election is tied, both candidates are removed.)",
                "After at most m − 1 iterations, only one candidate is left (or zero candidates are left, in which case there is no Condorcet winner).",
                "Let a be the remaining candidate.",
                "To find out whether candidate a is the Condorcet winner, let each voter communicate, for every candidate c = a, whether she prefers a to c. (This requires the communication of at most n(m − 1) bits.)",
                "This is enough to establish whether a won each of its pairwise elections (and thus, whether a is the Condorcet winner).",
                "Theorem 15.",
                "The nondeterministic communication <br>complexity</br> of the Condorcet rule is Ω(nm) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We will exhibit a fooling set of size 2n m where m = m − 1 and n = (n − 1)/2.",
                "For every vector (S1, S2, . . . , Sn ) consisting of n subsets Si ⊆ C − {a}, let the following vector of votes be an element of the fooling set: • For 1 ≤ i ≤ n , let voter 2i − 1 rank the candidates Si a C − Si. • For 1 ≤ i ≤ n , let voter 2i rank the candidates C − Si a Si. • Let voter 2n +1 = n rank the candidates a C −{a}.",
                "We observe that this fooling set has size (2m )n = 2n m , and that candidate a wins in each vector of votes in the fooling set (a wins each of its pairwise elections by a single vote).",
                "All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses.",
                "Let the first vote vector correspond to the vector (S1 1 , S1 2 , . . . , S1 n ), and let the second vote vector correspond to the vector (S2 1 , S2 2 , . . . , S2 n ).",
                "For some i, we must have S1 i = S2 i , so that either S1 i S2 i or S2 i S1 i .",
                "Without loss of generality, suppose S1 i S2 i , and let b be some candidate in S1 i − S2 i .",
                "Now, construct a new vote vector by taking vote 2i − 1 from the first vote vector, and the remaining votes from the second vote vector.",
                "In this newly constructed vote vector, b wins its pairwise election against a by one vote (vote 2i − 1 ranks b above a in the newly constructed vote vector because b ∈ S1 i , whereas in the second vote vector vote 2i − 1 ranked a above b because b /∈ S2 i ).",
                "So, a is not the Condorcet winner in the newly constructed vote vector, and hence we have a correct fooling set.",
                "Theorem 16.",
                "The deterministic communication <br>complexity</br> of the cup rule is O(nm).",
                "Proof.",
                "Consider the following simple communication protocol.",
                "First, let all the voters communicate, for every one of the matchups in the first round, which of its two candidates they prefer.",
                "After this, the matchups for the second round are known, so let all the voters communicate which candidate they prefer in each matchup in the second round-etc.",
                "Because communicating which of two candidates is preferred requires only one bit per voter, and because there are only m − 1 matchups in total, this communication protocol requires O(nm) communication.",
                "Theorem 17.",
                "The nondeterministic communication <br>complexity</br> of the cup rule is Ω(nm) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We will exhibit a fooling set of size 2n m where m = (m − 1)/2 and n = (n − 7)/2.",
                "Given that m + 1 is a power of 2, so that one candidate gets a bye (that is, does not face an opponent) in the first round, let a be the candidate with the bye.",
                "Of the m first-round matchups, let lj denote the one (left) candidate in the jth matchup, and let rj be the other (right) candidate.",
                "Let L = {lj : 1 ≤ j ≤ m } and R = {rj : 1 ≤ j ≤ m }, so that C = L ∪ R ∪ {a}. . . . . . . . . . l r l r l r a m1 1 2 2 m Figure 1: The schedule for the cup rule used in the proof of Theorem 17.",
                "For every vector (S1, S2, . . . , Sn ) consisting of n subsets Si ⊆ R, let the following vector of votes be an element of the fooling set: • For 1 ≤ i ≤ n , let voter 2i − 1 rank the candidates Si L a R − Si. • For 1 ≤ i ≤ n , let voter 2i rank the candidates R − Si L a Si. • Let voters 2n +1 = n−6, 2n +2 = n−5, 2n +3 = n−4 rank the candidates L a R. • Let voters 2n + 4 = n − 3, 2n + 5 = n − 2 rank the candidates a r1 l1 r2 l2 . . . rm lm . • Let voters 2n + 6 = n − 1, 2n + 7 = n rank the candidates rm lm rm −1 lm −1 . . . r1 l1 a.",
                "We observe that this fooling set has size (2m )n = 2n m .",
                "Also, candidate a wins in each vector of votes in the fooling set, for the following reasons.",
                "Each candidate rj defeats its opponent lj in the first round. (For any 1 ≤ i ≤ n , the net effect of votes 2i − 1 and 2i on the pairwise election between rj and lj is zero; votes n − 6, n − 5, n − 4 prefer lj to rj, but votes n − 3, n − 2, n − 1, n all prefer rj to lj.)",
                "Moreover, a defeats every rj in their pairwise election. (For any 1 ≤ i ≤ n , the net effect of votes 2i − 1 and 2i on the pairwise election between a and rj is zero; votes n − 1, n prefer rj to a, but votes n − 6, n − 5, n − 4, n − 3, n − 2 all prefer a to rj.)",
                "It follows that a will defeat all the candidates that it faces.",
                "All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses.",
                "Let the first vote vector correspond to the vector 85 (S1 1 , S1 2 , . . . , S1 n ), and let the second vote vector correspond to the vector (S2 1 , S2 2 , . . . , S2 n ).",
                "For some i, we must have S1 i = S2 i , so that either S1 i S2 i or S2 i S1 i .",
                "Without loss of generality, suppose S1 i S2 i , and let rj be some candidate in S1 i − S2 i .",
                "Now, construct a new vote vector by taking vote 2i from the first vote vector, and the remaining votes from the second vote vector.",
                "We note that, whereas in the second vote vector vote 2i preferred rj to lj (because rj ∈ R−S2 i ), in the newly constructed vote vector this is no longer the case (because rj ∈ S1 i ).",
                "It follows that, whereas in the second vote vector, rj defeated lj in the first round by one vote, in the newly constructed vote vector, lj defeats rj in the first round.",
                "Thus, at least one lj advances to the second round after defeating its opponent rj.",
                "Now, we observe that in the newly constructed vote vector, any lk wins its pairwise election against any rq with q = k. This is because among the first 2n votes, at least n − 1 prefer lk to rq; votes n − 6, n − 5, n − 4 prefer lk to rq; and, because q = k, either votes n − 3, n − 2 prefer lk to rq (if k < q), or votes n − 1, n prefer lk to rq (if k > q).",
                "Thus, at least n + 4 = (n + 1)/2 > n/2 votes prefer lk to rq.",
                "Moreover, any lk wins its pairwise election against a.",
                "This is because only votes n − 3 and n − 2 prefer a to lk.",
                "It follows that, after the first round, any surviving candidate lk can only lose a matchup against another surviving lk , so that one of the lk must win the election.",
                "So, a is not the winner in the newly constructed vote vector, and hence we have a correct fooling set.",
                "Theorem 18.",
                "The deterministic communication <br>complexity</br> of the Bucklin rule is O(nm).",
                "Proof.",
                "Let l be the minimum integer for which there is a candidate who is ranked among the top l candidates by more than half the votes.",
                "We will do a binary search for l. At each point, we will have a lower bound lL which is smaller than l (initialized to 0), and an upper bound lH which is at least l (initialized to m).",
                "While lH − lL > 1, we continue by finding out whether (lH − l)/2 is smaller than l, after which we can update the bounds.",
                "To find out whether a number k is smaller than l, we determine every voters k most preferred candidates.",
                "Every voter can communicate which candidates are among her k most preferred candidates using m bits (for each candidate, indicate whether the candidate is among the top k or not), but because the binary search requires log m iterations, this gives us an upper bound of O((log m)nm), which is not strong enough.",
                "However, if lL < k < lH , and we already know a voters lL most preferred candidates, as well as her lH most preferred candidates, then the voter no longer needs to communicate whether the lL most preferred candidates are among her k most preferred candidates (because they must be), and she no longer needs to communicate whether the m−lH least preferred candidates are among her k most preferred candidates (because they cannot be).",
                "Thus the voter needs to communicate only m−lL −(m−lH ) = lH −lL bits in any given stage.",
                "Because each stage, lH − lL is (roughly) halved, each voter in total communicates only (roughly) m + m/2 + m/4 + . . . ≤ 2m bits.",
                "Theorem 19.",
                "The nondeterministic communication <br>complexity</br> of the Bucklin rule is Ω(nm) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We will exhibit a fooling set of size 2n m where m = (m−1)/2 and n = n/2.",
                "We write the set of candidates as the following disjoint union: C = {a} ∪ L ∪ R where L = {l1, l2, . . . , lm } and R = {r1, r2, . . . , rm }.",
                "For any subset S ⊆ {1, 2, . . . , m }, let L(S) = {li : i ∈ S} and let R(S) = {ri : i ∈ S}.",
                "For every vector (S1, S2, . . . , Sn ) consisting of n sets Si ⊆ {1, 2, . . . , m }, let the following vector of votes be an element of the fooling set: • For 1 ≤ i ≤ n , let voter 2i − 1 rank the candidates L(Si) R − R(Si) a L − L(Si) R(Si). • For 1 ≤ i ≤ n , let voter 2i rank the candidates L − L(Si) R(Si) a L(Si) R − R(Si).",
                "We observe that this fooling set has size (2m )n = 2n m , and that candidate a wins in each vector of votes in the fooling set, for the following reason.",
                "Each candidate in C − {a} is ranked among the top m candidates by exactly half the voters (which is not enough to win).",
                "Thus, we need to look at the voters top m +1 candidates, and a is ranked m +1th by all voters.",
                "All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses.",
                "Let the first vote vector correspond to the vector (S1 1 , S1 2 , . . . , S1 n ), and let the second vote vector correspond to the vector (S2 1 , S2 2 , . . . , S2 n ).",
                "For some i, we must have S1 i = S2 i , so that either S1 i S2 i or S2 i S1 i .",
                "Without loss of generality, suppose S1 i S2 i , and let j be some integer in S1 i − S2 i .",
                "Now, construct a new vote vector by taking vote 2i − 1 from the first vote vector, and the remaining votes from the second vote vector.",
                "In this newly constructed vote vector, a is still ranked m + 1th by all votes.",
                "However, lj is ranked among the top m candidates by n + 1 = n/2 + 1 votes.",
                "This is because whereas vote 2i − 1 does not rank lj among the top m candidates in the second vote vector (because j /∈ S2 i , we have lj /∈ L(S2 i )), vote 2i − 1 does rank lj among the top m candidates in the first vote vector (because j ∈ S1 i , we have lj ∈ L(S1 i )).",
                "So, a is not the winner in the newly constructed vote vector, and hence we have a correct fooling set.",
                "Theorem 20.",
                "The nondeterministic communication <br>complexity</br> of the ranked pairs rule is Ω(nm log m) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We omit this proof because of space constraint. 5.",
                "DISCUSSION One key obstacle to using voting for preference aggregation is the communication burden that an election places on the voters.",
                "By lowering this burden, it may become feasible to conduct more elections over more issues.",
                "In the limit, this could lead to a shift from representational government to a system in which most issues are decided by referenda-a veritable e-democracy.",
                "In this paper, we analyzed the communication <br>complexity</br> of the common voting rules.",
                "Knowing which voting rules require little communication is especially important when the issue to be voted on is of low enough importance that the following is true: the parties involved are willing to accept a rule that tends 86 to produce outcomes that are slightly less representative of the voters preferences, if this rule reduces the communication burden on the voters significantly.",
                "The following table summarizes the results we obtained.",
                "Rule Lower bound Upper bound plurality Ω(n log m) O(n log m) plurality w/ runoff Ω(n log m) O(n log m) STV Ω(n log m) O(n(log m)2) Condorcet Ω(nm) O(nm) approval Ω(nm) O(nm) Bucklin Ω(nm) O(nm) cup Ω(nm) O(nm) maximin Ω(nm) O(nm) Borda Ω(nm log m) O(nm log m) Copeland Ω(nm log m) O(nm log m) ranked pairs Ω(nm log m) O(nm log m) Communication <br>complexity</br> of voting rules, sorted from low to high.",
                "All of the upper bounds are deterministic (with the exception of maximin, for which the best deterministic upper bound we proved is O(nm log m)).",
                "All of the lower bounds hold even for nondeterministic communication and even just for determining whether a given candidate a is the winner.",
                "One area of future research is to study what happens when we restrict our attention to communication protocols that do not reveal any strategically useful information.",
                "This restriction may invalidate some of the upper bounds that we derived using multistage communication protocols.",
                "Also, all of our bounds are worst-case bounds.",
                "It may be possible to outperform these bounds when the distribution of votes has additional structure.",
                "When deciding which voting rule to use for an election, there are many considerations to take into account.",
                "The voting rules that we studied in this paper are the most common ones that have survived the test of time.",
                "One way to select among these rules is to consider recent results on <br>complexity</br>.",
                "The table above shows that from a communication <br>complexity</br> perspective, plurality, plurality with runoff, and STV are preferable.",
                "However, plurality has the undesirable property that it is computationally easy to manipulate by voting strategically [3, 7].",
                "Plurality with runoff is NP-hard to manipulate by a coalition of weighted voters, or by an individual that faces correlated uncertainty about the others votes [7, 6].",
                "STV is NP-hard to manipulate in those settings as well [7], but also by an individual with perfect knowledge of the others votes (when the number of candidates is unbounded) [2].",
                "Therefore, STV is more robust, although it may require slightly more worst-case communication as per the table above.",
                "Yet other selection criteria are the computational <br>complexity</br> of determining whether enough information has been elicited to declare a winner, and that of determining the optimal sequence of queries [8]. 6.",
                "REFERENCES [1] Lawrence Ausubel and Paul Milgrom.",
                "Ascending auctions with package bidding.",
                "Frontiers of Theoretical Economics, 1, 2002.",
                "No. 1, Article 1. [2] John Bartholdi, III and James Orlin.",
                "Single transferable vote resists strategic voting.",
                "Social Choice and Welfare, 8(4):341-354, 1991. [3] John Bartholdi, III, Craig Tovey, and Michael Trick.",
                "The computational difficulty of manipulating an election.",
                "Social Choice and Welfare, 6(3):227-241, 1989. [4] Avrim Blum, Jeffrey Jackson, Tuomas Sandholm, and Martin Zinkevich.",
                "Preference elicitation and query learning.",
                "Journal of Machine Learning Research, 5:649-667, 2004. [5] Wolfram Conen and Tuomas Sandholm.",
                "Preference elicitation in combinatorial auctions: Extended abstract.",
                "In Proceedings of the ACM Conference on Electronic Commerce (ACM-EC), pages 256-259, 2001. [6] Vincent Conitzer, Jerome Lang, and Tuomas Sandholm.",
                "How many candidates are needed to make elections hard to manipulate?",
                "In Theoretical Aspects of Rationality and Knowledge (TARK), pages 201-214, 2003. [7] Vincent Conitzer and Tuomas Sandholm.",
                "<br>complexity</br> of manipulating elections with few candidates.",
                "In Proceedings of the National Conference on Artificial Intelligence (AAAI), pages 314-319, 2002. [8] Vincent Conitzer and Tuomas Sandholm.",
                "Vote elicitation: <br>complexity</br> and strategy-proofness.",
                "In Proceedings of the National Conference on Artificial Intelligence (AAAI), pages 392-397, 2002. [9] Sven de Vries, James Schummer, and Rakesh V. Vohra.",
                "On ascending auctions for heterogeneous objects, 2003.",
                "Draft. [10] Allan Gibbard.",
                "Manipulation of voting schemes.",
                "Econometrica, 41:587-602, 1973. [11] Benoit Hudson and Tuomas Sandholm.",
                "Effectiveness of query types and policies for preference elicitation in combinatorial auctions.",
                "In International Conference on Autonomous Agents and Multi-Agent Systems (AAMAS), pages 386-393, 2004. [12] E Kushilevitz and N Nisan.",
                "Communication <br>complexity</br>.",
                "Cambridge University Press, 1997. [13] Sebasti´en Lahaie and David Parkes.",
                "Applying learning algorithms to preference elicitation.",
                "In Proceedings of the ACM Conference on Electronic Commerce, 2004. [14] Noam Nisan and Ilya Segal.",
                "The communication requirements of efficient allocations and supporting prices.",
                "Journal of Economic Theory, 2005.",
                "Forthcoming. [15] David Parkes. iBundle: An efficient ascending price bundle auction.",
                "In Proceedings of the ACM Conference on Electronic Commerce (ACM-EC), pages 148-157, 1999. [16] Tuomas Sandholm.",
                "An implementation of the contract net protocol based on marginal cost calculations.",
                "In Proceedings of the National Conference on Artificial Intelligence (AAAI), pages 256-262, 1993. [17] Tuomas Sandholm and Craig Boutilier.",
                "Preference elicitation in combinatorial auctions.",
                "In Peter Cramton, Yoav Shoham, and Richard Steinberg, editors, Combinatorial Auctions, chapter 10.",
                "MIT Press, 2005. [18] Paolo Santi, Vincent Conitzer, and Tuomas Sandholm.",
                "Towards a characterization of polynomial preference elicitation with value queries in combinatorial auctions.",
                "In Conference on Learning Theory (COLT), pages 1-16, 2004. [19] Mark Satterthwaite.",
                "Strategy-proofness and Arrows conditions: existence and correspondence theorems for voting procedures and social welfare functions.",
                "Journal of Economic Theory, 10:187-217, 1975. [20] Ilya Segal.",
                "The communication requirements of social choice rules and supporting budget sets, 2004.",
                "Draft.",
                "Presented at the DIMACS Workshop on Computational Issues in Auction Design, Rutgers University, New Jersey, USA. [21] Peter Wurman and Michael Wellman.",
                "AkBA: A progressive, anonymous-price combinatorial auction.",
                "In Proceedings of the ACM Conference on Electronic Commerce (ACM-EC), pages 21-29, 2000. [22] A. C. Yao.",
                "Some <br>complexity</br> questions related to distributed computing.",
                "In Proceedings of the 11th ACM symposium on theory of computing (STOC), pages 209-213, 1979. [23] Martin Zinkevich, Avrim Blum, and Tuomas Sandholm.",
                "On polynomial-time preference elicitation with value queries.",
                "In Proceedings of the ACM Conference on Electronic Commerce (ACM-EC), pages 176-185, 2003. 87"
            ],
            "original_annotated_samples": [
                "Communication <br>complexity</br> of Common Voting Rules∗ Vincent Conitzer Carnegie Mellon University 5000 Forbes Avenue Pittsburgh, PA 15213, USA conitzer@cs.cmu.edu Tuomas Sandholm Carnegie Mellon University 5000 Forbes Avenue Pittsburgh, PA 15213, USA sandholm@cs.cmu.edu ABSTRACT We determine the communication <br>complexity</br> of the common voting rules.",
                "The rules (sorted by their communication <br>complexity</br> from low to high) are plurality, plurality with runoff, single transferable vote (STV), Condorcet, approval, Bucklin, cup, maximin, Borda, Copeland, and ranked pairs.",
                "Categories and Subject Descriptors F.2 [Theory of Computation]: Analysis of Algorithms and Problem <br>complexity</br>; J.4 [Computer Applications]: Social and Behavioral Sciences-Economics General Terms Algorithms, Economics, Theory 1.",
                "Finally, resource 78 allocation problems have also been studied from a communication <br>complexity</br> viewpoint, thereby deriving lower bounds on the required communication.",
                "We determine the communication <br>complexity</br> of the common voting rules."
            ],
            "translated_annotated_samples": [
                "Determinamos la <br>complejidad</br> de comunicación de las reglas de votación comunes.",
                "Las reglas (ordenadas por su <br>complejidad</br> de comunicación de baja a alta) son pluralidad, pluralidad con segunda vuelta, voto único transferible (STV), Condorcet, aprobación, Bucklin, taza, maximin, Borda, Copeland y pares clasificados.",
                "Categorías y Descriptores de Asignaturas F.2 [Teoría de la Computación]: Análisis de Algoritmos y Complejidad de Problemas; J.4 [Aplicaciones Informáticas]: Ciencias Sociales y del Comportamiento-Economía Términos Generales Algoritmos, Economía, Teoría 1.",
                "Finalmente, los problemas de asignación de recursos 78 también han sido estudiados desde el punto de vista de la <br>complejidad</br> de la comunicación, derivando así límites inferiores sobre la comunicación requerida.",
                "Determinamos la <br>complejidad</br> de comunicación de las reglas de votación comunes."
            ],
            "translated_text": "Determinamos la <br>complejidad</br> de comunicación de las reglas de votación comunes. Las reglas (ordenadas por su <br>complejidad</br> de comunicación de baja a alta) son pluralidad, pluralidad con segunda vuelta, voto único transferible (STV), Condorcet, aprobación, Bucklin, taza, maximin, Borda, Copeland y pares clasificados. Para cada regla, primero proporcionamos un protocolo de comunicación determinista y un límite superior en la cantidad de bits comunicados en él; luego, damos un límite inferior en los requisitos de comunicación (incluso los no deterministas) de la regla de votación. Los límites coinciden para todas las reglas de votación excepto STV y maximin. Categorías y Descriptores de Asignaturas F.2 [Teoría de la Computación]: Análisis de Algoritmos y Complejidad de Problemas; J.4 [Aplicaciones Informáticas]: Ciencias Sociales y del Comportamiento-Economía Términos Generales Algoritmos, Economía, Teoría 1. INTRODUCCIÓN Un factor clave en la viabilidad de cualquier regla de agregación de preferencias es su carga de comunicación. Para agregar con éxito las preferencias de los agentes, generalmente no es necesario que todos los agentes informen toda su información de preferencias. Los protocolos inteligentes que obtienen parcial y secuencialmente las preferencias de los agentes tienen el potencial de reducir drásticamente la comunicación requerida. Esto tiene al menos las siguientes ventajas: • Puede hacer factible la agregación de preferencias en entornos donde la cantidad total de información de preferencias es demasiado grande para comunicar. • Incluso cuando comunicar toda la información de preferencias es factible, reducir los requisitos de comunicación disminuye la carga impuesta a los agentes. Esto es especialmente cierto cuando los agentes, en lugar de conocer todas sus preferencias de antemano, necesitan invertir esfuerzo (como cálculos o recopilación de información) para determinar sus preferencias. • Preserva (parte de) la privacidad de los agentes. La mayor parte del trabajo sobre la reducción de la carga de comunicación en la agregación de preferencias se ha centrado en entornos de asignación de recursos como subastas combinatorias, en las que un subastador subasta un número de artículos (posiblemente distintos) en un solo evento. Debido a que en una subasta combinatoria, los postores pueden tener valoraciones separadas para cada uno de un número exponencial de posibles paquetes de artículos, este es un escenario en el que reducir la carga de comunicación es especialmente crucial. Esto se puede lograr complementando al subastador con un provocador que elicitara incrementalmente partes de las preferencias de los postores según sea necesario, basándose en lo que los postores han revelado sobre sus preferencias hasta el momento, como sugieren Conen y Sandholm [5]. Por ejemplo, el solicitante puede preguntar por el valor de un postor para un paquete específico (consultas de valor), cuál de dos paquetes prefiere el postor (consultas de orden), qué paquete clasifica en la posición k o cuál es la posición de un paquete dado (consultas de clasificación), qué paquete compraría dado un vector particular de precios (consultas de demanda), etc., hasta que se pueda determinar (al menos) la asignación final. Experimentalmente, esto produce a drástico ahorro en la revelación de preferencias [11]. Además, si las funciones de valoración de los agentes provienen de ciertas subclases naturales, el problema de la obtención de información puede resolverse utilizando solo un número polinomial de consultas incluso en el peor de los casos [23, 4, 13, 18, 14]. Para una revisión de la obtención de preferencias en subastas combinatorias, consulte [17]. Las subastas combinatorias ascendentes son una forma especial conocida de obtención de preferencias, donde el encuestador realiza consultas de demanda con precios crecientes [15, 21, 1, 9]. Finalmente, los problemas de asignación de recursos 78 también han sido estudiados desde el punto de vista de la <br>complejidad</br> de la comunicación, derivando así límites inferiores sobre la comunicación requerida. Por ejemplo, Nisan y Segal muestran que se requiere comunicación exponencial incluso para obtener un excedente mayor al obtenido al subastar todos los objetos como un único paquete [14]. Segal también estudia reglas de elección social en general, y muestra que para una gran clase de reglas de elección social, los conjuntos de presupuesto de apoyo deben ser revelados de tal manera que si cada agente prefiere el mismo resultado en su conjunto de presupuesto, esto demuestra la optimalidad de ese resultado. Segal luego utiliza esta caracterización para demostrar límites en la comunicación requerida en la asignación de recursos, así como en entornos de emparejamiento [20]. En este documento, nos enfocaremos en los requisitos de comunicación de una subclase generalmente aplicable de reglas de elección social, comúnmente conocidas como reglas de votación. En un entorno de votación, hay un conjunto de resultados de candidatos sobre los cuales los votantes expresan sus preferencias al enviar un voto (normalmente, una clasificación de los candidatos), y el ganador (es decir, el resultado elegido) se determina en función de estos votos. La comunicación requerida por las reglas de votación puede ser grande ya sea porque el número de votantes es grande (como, por ejemplo, en elecciones nacionales), o porque el número de candidatos es grande (por ejemplo, los agentes pueden votar sobre asignaciones de un número de recursos), o ambos. El trabajo previo [8] ha estudiado la obtención de información en votaciones, analizando qué tan difícil es computacionalmente decidir si se puede determinar un ganador con la información obtenida hasta el momento, así como qué tan difícil es encontrar la secuencia óptima de preguntas dadas sospechas perfectas sobre las preferencias de los votantes. Además, ese artículo discute cuestiones estratégicas (teóricas de juegos) introducidas por la obtención de información. Por el contrario, en este artículo nos preocupamos por el número máximo de bits que deben comunicarse para ejecutar una regla de votación dada, cuando no se conoce de antemano las preferencias de los votantes. Determinamos la <br>complejidad</br> de comunicación de las reglas de votación comunes. ",
            "candidates": [],
            "error": [
                [
                    ""
                ]
            ]
        },
        "voting rule": {
            "translated_key": "regla de votación",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Communication Complexity of Common Voting Rules∗ Vincent Conitzer Carnegie Mellon University 5000 Forbes Avenue Pittsburgh, PA 15213, USA conitzer@cs.cmu.edu Tuomas Sandholm Carnegie Mellon University 5000 Forbes Avenue Pittsburgh, PA 15213, USA sandholm@cs.cmu.edu ABSTRACT We determine the communication complexity of the common voting rules.",
                "The rules (sorted by their communication complexity from low to high) are plurality, plurality with runoff, single transferable vote (STV), Condorcet, approval, Bucklin, cup, maximin, Borda, Copeland, and ranked pairs.",
                "For each rule, we first give a deterministic communication protocol and an upper bound on the number of bits communicated in it; then, we give a lower bound on (even the nondeterministic) communication requirements of the <br>voting rule</br>.",
                "The bounds match for all voting rules except STV and maximin.",
                "Categories and Subject Descriptors F.2 [Theory of Computation]: Analysis of Algorithms and Problem Complexity; J.4 [Computer Applications]: Social and Behavioral Sciences-Economics General Terms Algorithms, Economics, Theory 1.",
                "INTRODUCTION One key factor in the practicality of any preference aggregation rule is its communication burden.",
                "To successfully aggregate the agents preferences, it is usually not necessary for all the agents to report all of their preference information.",
                "Clever protocols that elicit the agents preferences partially and sequentially have the potential to dramatically reduce the required communication.",
                "This has at least the following advantages: • It can make preference aggregation feasible in settings where the total amount of preference information is too large to communicate. • Even when communicating all the preference information is feasible, reducing the communication requirements lessens the burden placed on the agents.",
                "This is especially true when the agents, rather than knowing all their preferences in advance, need to invest effort (such as computation or information gathering) to determine their preferences [16]. • It preserves (some of) the agents privacy.",
                "Most of the work on reducing the communication burden in preference aggregation has focused on resource allocation settings such as combinatorial auctions, in which an auctioneer auctions off a number of (possibly distinct) items in a single event.",
                "Because in a combinatorial auction, bidders can have separate valuations for each of an exponential number of possible bundles of items, this is a setting in which reducing the communication burden is especially crucial.",
                "This can be accomplished by supplementing the auctioneer with an elicitor that incrementally elicits parts of the bidders preferences on an as-needed basis, based on what the bidders have revealed about their preferences so far, as suggested by Conen and Sandholm [5].",
                "For example, the elicitor can ask for a bidders value for a specific bundle (value queries), which of two bundles the bidder prefers (order queries), which bundle he ranks kth or what the rank of a given bundle is (rank queries), which bundle he would purchase given a particular vector of prices (demand queries), etc.-until (at least) the final allocation can be determined.",
                "Experimentally, this yields drastic savings in preference revelation [11].",
                "Furthermore, if the agents valuation functions are drawn from certain natural subclasses, the elicitation problem can be solved using only polynomially many queries even in the worst case [23, 4, 13, 18, 14].",
                "For a review of preference elicitation in combinatorial auctions, see [17].",
                "Ascending combinatorial auctions are a well-known special form of preference elicitation, where the elicitor asks demand queries with increasing prices [15, 21, 1, 9].",
                "Finally, resource 78 allocation problems have also been studied from a communication complexity viewpoint, thereby deriving lower bounds on the required communication.",
                "For example, Nisan and Segal show that exponential communication is required even to obtain a surplus greater than that obtained by auctioning off all objects as a single bundle [14].",
                "Segal also studies social choice rules in general, and shows that for a large class of social choice rules, supporting budget sets must be revealed such that if every agent prefers the same outcome in her budget set, this proves the optimality of that outcome.",
                "Segal then uses this characterization to prove bounds on the communication required in resource allocation as well as matching settings [20].",
                "In this paper, we will focus on the communication requirements of a generally applicable subclass of social choice rules, commonly known as voting rules.",
                "In a voting setting, there is a set of candidate outcomes over which the voters express their preferences by submitting a vote (typically, a ranking of the candidates), and the winner (that is, the chosen outcome) is determined based on these votes.",
                "The communication required by voting rules can be large either because the number of voters is large (such as, for example, in national elections), or because the number of candidates is large (for example, the agents can vote over allocations of a number of resources), or both.",
                "Prior work [8] has studied elicitation in voting, studying how computationally hard it is to decide whether a winner can be determined with the information elicited so far, as well as how hard it is to find the optimal sequence of queries given perfect suspicions about the voters preferences.",
                "In addition, that paper discusses strategic (game-theoretic) issues introduced by elicitation.",
                "In contrast, in this paper, we are concerned with the worst-case number of bits that must be communicated to execute a given <br>voting rule</br>, when nothing is known in advance about the voters preferences.",
                "We determine the communication complexity of the common voting rules.",
                "For each rule, we first give an upper bound on the (deterministic) communication complexity by providing a communication protocol for it and analyzing how many bits need to be transmitted in this protocol. (Segals results [20] do not apply to most voting rules because most voting rules are not intersectionmonotonic (or even monotonic).1 ) For many of the voting rules under study, it turns out that one cannot do better than simply letting each voter immediately communicate all her (potentially relevant) information.",
                "However, for some rules (such as plurality with runoff, STV and cup) there is a straightforward multistage communication protocol that, with some analysis, can be shown to significantly outperform the immediate communication of all (potentially relevant) information.",
                "Finally, for some rules (such as the Condorcet and Bucklin rules), we need to introduce a more complex communication protocol to achieve the best possible upper 1 For two of the rules that we study that are intersectionmonotonic, namely the approval and Condorcet rules, Segals results can in fact be used to give alternative proofs of our lower bounds.",
                "We only give direct proofs for these rules here because 1) these direct proofs are among the easier ones in this paper, 2) the alternative proofs are nontrivial even given Segals results, and 3) a space constraint applies.",
                "However, we hope to also include the alternative proofs in a later version. bound.",
                "After obtaining the upper bounds, we show that they are tight by giving matching lower bounds on (even the nondeterministic) communication complexity of each <br>voting rule</br>.",
                "There are two exceptions: STV, for which our upper and lower bounds are apart by a factor log m; and maximin, for which our best deterministic upper bound is also a factor log m above the (nondeterministic) lower bound, although we give a nondeterministic upper bound that matches the lower bound. 2. REVIEW OF VOTING RULES In this section, we review the common voting rules that we study in this paper.",
                "A voting rule2 is a function mapping a vector of the n voters votes (i.e. preferences over candidates) to one of the m candidates (the winner) in the candidate set C. In some cases (such as the Condorcet rule), the rule may also declare that no winner exists.",
                "We do not concern ourselves with what happens in case of a tie between candidates (our lower bounds hold regardless of how ties are broken, and the communication protocols used for our upper bounds do not attempt to break the ties).",
                "All of the rules that we study are rank-based rules, which means that a vote is defined as an ordering of the candidates (with the exception of the plurality rule, for which a vote is a single candidate, and the approval rule, for which a vote is a subset of the candidates).",
                "We will consider the following voting rules. (For rules that define a score, the candidate with the highest score wins.) • scoring rules.",
                "Let α = α1, . . . , αm be a vector of integers such that α1 ≥ α2 . . . ≥ αm.",
                "For each voter, a candidate receives α1 points if it is ranked first by the voter, α2 if it is ranked second etc.",
                "The score sα of a candidate is the total number of points the candidate receives.",
                "The Borda rule is the scoring rule with α = m−1, m−2, . . . , 0 .",
                "The plurality rule is the scoring rule with α = 1, 0, . . . , 0 . • single transferable vote (STV).",
                "The rule proceeds through a series of m − 1 rounds.",
                "In each round, the candidate with the lowest plurality score (that is, the least number of voters ranking it first among the remaining candidates) is eliminated (and each of the votes for that candidate transfer to the next remaining candidate in the order given in that vote).",
                "The winner is the last remaining candidate. • plurality with run-off.",
                "In this rule, a first round eliminates all candidates except the two with the highest plurality scores.",
                "Votes are transferred to these as in the STV rule, and a second round determines the winner from these two. • approval.",
                "Each voter labels each candidate as either approved or disapproved.",
                "The candidate approved by the greatest number of voters wins. • Condorcet.",
                "For any two candidates i and j, let N(i, j) be the number of voters who prefer i to j.",
                "If there is a candidate i that is preferred to any other candidate by a majority of the voters (that is, N(i, j) > N(j, i) for all j = i-that is, i wins every pairwise election), then candidate i wins. 2 The term voting protocol is often used to describe the same concept, but we seek to draw a sharp distinction between the rule mapping preferences to outcomes, and the communication/elicitation protocol used to implement this rule. 79 • maximin (aka.",
                "Simpson).",
                "The maximin score of i is s(i) = minj=i N(i, j)-that is, is worst performance in a pairwise election.",
                "The candidate with the highest maximin score wins. • Copeland.",
                "For any two distinct candidates i and j, let C(i, j) = 1 if N(i, j) > N(j, i), C(i, j) = 1/2 if N(i, j) = N(j, i) and C(i, j) = 0 if N(i, j) < N(j, i).",
                "The Copeland score of candidate i is s(i) = j=i C(i, j). • cup (sequential binary comparisons).",
                "The cup rule is defined by a balanced3 binary tree T with one leaf per candidate, and an assignment of candidates to leaves (each leaf gets one candidate).",
                "Each non-leaf node is assigned the winner of the pairwise election of the nodes children; the candidate assigned to the root wins. • Bucklin.",
                "For any candidate i and integer l, let B(i, l) be the number of voters that rank candidate i among the top l candidates.",
                "The winner is arg mini(min{l : B(i, l) > n/2}).",
                "That is, if we say that a voter approves her top l candidates, then we repeatedly increase l by 1 until some candidate is approved by more than half the voters, and this candidate is the winner. • ranked pairs.",
                "This rule determines an order on all the candidates, and the winner is the candidate at the top of this order.",
                "Sort all ordered pairs of candidates (i, j) by N(i, j), the number of voters who prefer i to j.",
                "Starting with the pair (i, j) with the highest N(i, j), we lock in the result of their pairwise election (i j).",
                "Then, we move to the next pair, and we lock the result of their pairwise election.",
                "We continue to lock every pairwise result that does not contradict the ordering established so far.",
                "We emphasize that these definitions of voting rules do not concern themselves with how the votes are elicited from the voters; all the voting rules, including those that are suggestively defined in terms of rounds, are in actuality just functions mapping the vector of all the voters votes to a winner.",
                "Nevertheless, there are always many different ways of eliciting the votes (or the relevant parts thereof) from the voters.",
                "For example, in the plurality with runoff rule, one way of eliciting the votes is to ask every voter to declare her entire ordering of the candidates up front.",
                "Alternatively, we can first ask every voter to declare only her most preferred candidate; then, we will know the two candidates in the runoff, and we can ask every voter which of these two candidates she prefers.",
                "Thus, we distinguish between the <br>voting rule</br> (the mapping from vectors of votes to outcomes) and the communication protocol (which determines how the relevant parts of the votes are actually elicited from the voters).",
                "The goal of this paper is to give efficient communication protocols for the voting rules just defined, and to prove that there do not exist any more efficient communication protocols.",
                "It is interesting to note that the choice of the communication protocol may affect the strategic behavior of the voters.",
                "Multistage communication protocols may reveal to the voters some information about how the other voters are voting (for example, in the two-stage communication protocol just given for plurality with runoff, in the second stage voters 3 Balanced means that the difference in depth between two leaves can be at most one. will know which two candidates have the highest plurality scores).",
                "In general, when the voters receive such information, it may give them incentives to vote differently than they would have in a single-stage communication protocol in which all voters declare their entire votes simultaneously.",
                "Of course, even the single-stage communication protocol is not strategy-proof4 for any reasonable <br>voting rule</br>, by the Gibbard-Satterthwaite theorem [10, 19].",
                "However, this does not mean that we should not be concerned about adding even more opportunities for strategic voting.",
                "In fact, many of the communication protocols introduced in this paper do introduce additional opportunities for strategic voting, but we do not have the space to discuss this here. (In prior work [8], we do give an example where an elicitation protocol for the approval <br>voting rule</br> introduces strategic voting, and give principles for designing elicitation protocols that do not introduce strategic problems.)",
                "Now that we have reviewed voting rules, we move on to a brief review of communication complexity theory. 3. REVIEW OF SOME COMMUNICATION COMPLEXITY THEORY In this section, we review the basic model of a communication problem and the lower-bounding technique of constructing a fooling set. (The basic model of a communication problem is due to Yao [22]; for an overview see Kushilevitz and Nisan [12].)",
                "Each player 1 ≤ i ≤ n knows (only) input xi.",
                "Together, they seek to compute f(x1, x2, . . . , xn).",
                "In a deterministic protocol for computing f, in each stage, one of the players announces (to all other players) a bit of information based on her own input and the bits announced so far.",
                "Eventually, the communication terminates and all players know f(x1, x2, . . . , xn).",
                "The goal is to minimize the worst-case (over all input vectors) number of bits sent.",
                "The deterministic communication complexity of a problem is the worstcase number of bits sent in the best (correct) deterministic protocol for it.",
                "In a nondeterministic protocol, the next bit to be sent can be chosen nondeterministically.",
                "For the purposes of this paper, we will consider a nondeterministic protocol correct if for every input vector, there is some sequence of nondeterministic choices the players can make so that the players know the value of f when the protocol terminates.",
                "The nondeterministic communication complexity of a problem is the worst-case number of bits sent in the best (correct) nondeterministic protocol for it.",
                "We are now ready to give the definition of a fooling set.",
                "Definition 1.",
                "A fooling set is a set of input vectors {(x1 1, x1 2, . . . , x1 n), (x2 1, x2 2, . . . , x2 n), . . . , (xk 1 , xk 2 , . . . , xk n) such that for any i, f(xi 1, xi 2, . . . , xi n) = f0 for some constant f0, but for any i = j, there exists some vector (r1, r2, . . . , rn) ∈ {i, j}n such that f(xr1 1 , xr2 2 , . . . , xrn n ) = f0. (That is, we can mix the inputs from the two input vectors to obtain a vector with a different function value.)",
                "It is known that if a fooling set of size k exists, then log k is a lower bound on the communication complexity (even the nondeterministic communication complexity) [12]. 4 A strategy-proof protocol is one in which it is in the players best interest to report their preferences truthfully. 80 For the purposes of this paper, f is the <br>voting rule</br> that maps the votes to the winning candidate, and xi is voter is vote (the information that the <br>voting rule</br> would require from the voter if there were no possibility of multistage communication-i.e. the most preferred candidate (plurality), the approved candidates (approval), or the ranking of all the candidates (all other protocols)).",
                "However, when we derive our lower bounds, f will only signify whether a distinguished candidate a wins. (That is, f is 1 if a wins, and 0 otherwise.)",
                "This will strengthen our lower bound results (because it implies that even finding out whether one given candidate wins is hard).5 Thus, a fooling set in our context is a set of vectors of votes so that a wins (does not win) with each of them; but for any two different vote vectors in the set, there is a way of taking some voters votes from the first vector and the others votes from the second vector, so that a does not win (wins).",
                "To simplify the proofs of our lower bounds, we make assumptions such as the number of voters n is odd in many of these proofs.",
                "Therefore, technically, we do not prove the lower bound for (number of candidates, number of voters) pairs (m, n) that do not satisfy these assumptions (for example, if we make the above assumption, then we technically do not prove the lower bound for any pair (m, n) in which n is even).",
                "Nevertheless, we always prove the lower bound for a representative set of (m, n) pairs.",
                "For example, for every one of our lower bounds it is the case that for infinitely many values of m, there are infinitely many values of n such that the lower bound is proved for the pair (m, n). 4.",
                "RESULTS We are now ready to present our results.",
                "For each <br>voting rule</br>, we first give a deterministic communication protocol for determining the winner to establish an upper bound.",
                "Then, we give a lower bound on the nondeterministic communication complexity (even on the complexity of deciding whether a given candidate wins, which is an easier question).",
                "The lower bounds match the upper bounds in all but two cases: the STV rule (upper bound O(n(log m)2 ); lower bound Ω(n log m)) and the maximin rule (upper bound O(nm log m), although we do give a nondeterministic protocol that is O(nm); lower bound Ω(nm)).",
                "When we discuss a <br>voting rule</br> in which the voters rank the candidates, we will represent a ranking in which candidate c1 is ranked first, c2 is ranked second, etc. as c1 c2 . . . cm. 5 One possible concern is that in the case where ties are possible, it may require much communication to verify whether a specific candidate a is among the winners, but little communication to produce one of the winners.",
                "However, all the fooling sets we use in the proofs have the property that if a wins, then a is the unique winner.",
                "Therefore, in these fooling sets, if one knows any one of the winners, then one knows whether a is a winner.",
                "Thus, computing one of the winners requires at least as much communication as verifying whether a is among the winners.",
                "In general, when a communication problem allows multiple correct answers for a given vector of inputs, this is known as computing a relation rather than a function [12].",
                "However, as per the above, we can restrict our attention to a subset of the domain where the <br>voting rule</br> truly is a (single-valued) function, and hence lower bounding techniques for functions rather than relations will suffice.",
                "Sometimes for the purposes of a proof the internal ranking of a subset of the candidates does not matter, and in this case we will not specify it.",
                "For example, if S = {c2, c3}, then c1 S c4 indicates that either the ranking c1 c2 c3 c4 or the ranking c1 c3 c2 c4 can be used for the proof.",
                "We first give a universal upper bound.",
                "Theorem 1.",
                "The deterministic communication complexity of any rank-based <br>voting rule</br> is O(nm log m).",
                "Proof.",
                "This bound is achieved by simply having everyone communicate their entire ordering of the candidates (indicating the rank of an individual candidate requires only O(log m) bits, so each of the n voters can simply indicate the rank of each of the m candidates).",
                "The next lemma will be useful in a few of our proofs.",
                "Lemma 1.",
                "If m divides n, then log(n! )−m log((n/m)!) ≥ n(log m − 1)/2.",
                "Proof.",
                "If n/m = 1 (that is, n = m), then this expression simplifies to log(n!).",
                "We have log(n!) = n i=1 log i ≥ n x=1 log(i)dx, which, using integration by parts, is equal to n log n − (n − 1) > n(log n − 1) = n(log m − 1) > n(log m − 1)/2.",
                "So, we can assume that n/m ≥ 2.",
                "We observe that log(n!) = n i=1 log i = n/m−1 i=0 m j=1 log(im+j) ≥ n/m−1 i=1 m j=1 log(im) = m n/m−1 i=1 log(im), and that m log((n/m)!) = m n/m i=1 log(i).",
                "Therefore, log(n!) − m log((n/m)!) ≥ m n/m−1 i=1 log(im) − m n/m i=1 log(i) = m(( n/m−1 i=1 log(im/i))−log(n/m)) = m((n/m− 1) log m−log n+log m) = n log m−m log n. Now, using the fact that n/m ≥ 2, we have m log n = n(m/n) log m(n/m) = n(m/n)(log m + log(n/m)) ≤ n(1/2)(log m + log 2).",
                "Thus, log(n!) − m log((n/m)!) ≥ n log m − m log n ≥ n log m − n(1/2)(log m + log 2) = n(log m − 1)/2.",
                "Theorem 2.",
                "The deterministic communication complexity of the plurality rule is O(n log m).",
                "Proof.",
                "Indicating one of the candidates requires only O(log m) bits, so each voter can simply indicate her most preferred candidate.",
                "Theorem 3.",
                "The nondeterministic communication complexity of the plurality rule is Ω(n log m) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We will exhibit a fooling set of size n ! (( n m )! )m where n = (n−1)/2.",
                "Taking the logarithm of this gives log(n ! )− m log((n /m)! ), so the result follows from Lemma 1.",
                "The fooling set will consist of all vectors of votes satisfying the following constraints: • For any 1 ≤ i ≤ n , voters 2i−1 and 2i vote the same. 81 • Every candidate receives equally many votes from the first 2n = n − 1 voters. • The last voter (voter n) votes for a.",
                "Candidate a wins with each one of these vote vectors because of the extra vote for a from the last voter.",
                "Given that m divides n , let us see how many vote vectors there are in the fooling set.",
                "We need to distribute n voter pairs evenly over m candidates, for a total of n /m voter pairs per candidate; and there are precisely n ! (( n m )! )m ways of doing this.6 All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses.",
                "Let i be a number such that the two vote vectors disagree on the candidate for which voters 2i − 1 and 2i vote.",
                "Without loss of generality, suppose that in the first vote vector, these voters do not vote for a (but for some other candidate, b, instead).",
                "Now, construct a new vote vector by taking votes 2i − 1 and 2i from the first vote vector, and the remaining votes from the second vote vector.",
                "Then, b receives 2n /m + 2 votes in this newly constructed vote vector, whereas a receives at most 2n /m+1 votes.",
                "So, a is not the winner in the newly constructed vote vector, and hence we have a correct fooling set.",
                "Theorem 4.",
                "The deterministic communication complexity of the plurality with runoff rule is O(n log m).",
                "Proof.",
                "First, let every voter indicate her most preferred candidate using log m bits.",
                "After this, the two candidates in the runoff are known, and each voter can indicate which one she prefers using a single additional bit.",
                "Theorem 5.",
                "The nondeterministic communication complexity of the plurality with runoff rule is Ω(n log m) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We will exhibit a fooling set of size n ! (( n m )! )m where m = m/2 and n = (n − 2)/4.",
                "Taking the logarithm of this gives log(n !) − m log((n /m )! ), so the result follows from Lemma 1.",
                "Divide the candidates into m pairs: (c1, d1), (c2, d2), . . . , (cm , dm ) where c1 = a and d1 = b.",
                "The fooling set will consist of all vectors of votes satisfying the following constraints: • For any 1 ≤ i ≤ n , voters 4i − 3 and 4i − 2 rank the candidates ck(i) a C − {a, ck(i)}, for some candidate ck(i). (If ck(i) = a then the vote is simply a C − {a}.) • For any 1 ≤ i ≤ n , voters 4i − 1 and 4i rank the candidates dk(i) a C − {a, dk(i)} (that is, their most preferred candidate is the candidate that is paired with the candidate that the previous two voters vote for). 6 An intuitive proof of this is the following.",
                "We can count the number of permutations of n elements as follows.",
                "First, divide the elements into m buckets of size n /m, so that if x is placed in a lower-indexed bucket than y, then x will be indexed lower in the eventual permutation.",
                "Then, decide on the permutation within each bucket (for which there are (n /m)! choices per bucket).",
                "It follows that n ! equals the number of ways to divide n elements into m buckets of size n /m, times ((n /m)! )m . • Every candidate is ranked at the top of equally many of the first 4n = n − 2 votes. • Voter 4n +1 = n−1 ranks the candidates a C−{a}. • Voter 4n + 2 = n ranks the candidates b C − {b}.",
                "Candidate a wins with each one of these vote vectors: because of the last two votes, candidates a and b are one vote ahead of all the other candidates and continue to the runoff, and at this point all the votes that had another candidate ranked at the top transfer to a, so that a wins the runoff.",
                "Given that m divides n , let us see how many vote vectors there are in the fooling set.",
                "We need to distribute n groups of four voters evenly over the m pairs of candidates, and (as in the proof of Theorem 3) there are n ! (( n m )! )m ways of doing this.",
                "All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses.",
                "Let i be a number such that ck(i) is not the same in both of these two vote vectors, that is, c1 k(i) (ck(i) in the first vote vector) is not equal to c2 k(i) (ck(i) in the second vote vector).",
                "Without loss of generality, suppose c1 k(i) = a.",
                "Now, construct a new vote vector by taking votes 4i − 3, 4i − 2, 4i − 1, 4i from the first vote vector, and the remaining votes from the second vote vector.",
                "In this newly constructed vote vector, c1 k(i) and d1 k(i) each receive 4n /m+2 votes in the first round, whereas a receives at most 4n /m+1 votes.",
                "So, a does not continue to the runoff in the newly constructed vote vector, and hence we have a correct fooling set.",
                "Theorem 6.",
                "The nondeterministic communication complexity of the Borda rule is Ω(nm log m) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We will exhibit a fooling set of size (m ! )n where m = m−2 and n = (n−2)/4.",
                "This will prove the theorem because m ! is Ω(m log m), so that log((m ! )n ) = n log(m !) is Ω(nm log m).",
                "For every vector (π1, π2, . . . , πn ) consisting of n orderings of all candidates other than a and another fixed candidate b (technically, the orderings take the form of a one-to-one function πi : {1, 2, . . . , m } → C − {a, b} with πi(j) = c indicating that candidate c is the jth in the order represented by πi), let the following vector of votes be an element of the fooling set: • For 1 ≤ i ≤ n , let voters 4i − 3 and 4i − 2 rank the candidates a b πi(1) πi(2) . . . πi(m ). • For 1 ≤ i ≤ n , let voters 4i − 1 and 4i rank the candidates πi(m ) πi(m − 1) . . . πi(1) b a. • Let voter 4n + 1 = n − 1 rank the candidates a b π0(1) π0(2) . . . π0(m ) (where π0 is an arbitrary order of the candidates other than a and b which is the same for every element of the fooling set). • Let voter 4n + 2 = n rank the candidates π0(m ) π0(m − 1) . . . π0(1) a b.",
                "We observe that this fooling set has size (m ! )n , and that candidate a wins in each vector of votes in the fooling set (to 82 see why, we observe that for any 1 ≤ i ≤ n , votes 4i−3 and 4i − 2 rank the candidates in the exact opposite way from votes 4i − 1 and 4i, which under the Borda rule means they cancel out; and the last two votes give one more point to a than to any other candidate-besides b who gets two fewer points than a).",
                "All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses.",
                "Let the first vote vector correspond to the vector (π1 1, π1 2, . . . , π1 n ), and let the second vote vector correspond to the vector (π2 1, π2 2, . . . , π2 n ).",
                "For some i, we must have π1 i = π2 i , so that for some candidate c /∈ {a, b}, (π1 i )−1 (c) < (π2 i )−1 (c) (that is, c is ranked higher in π1 i than in π2 i ).",
                "Now, construct a new vote vector by taking votes 4i−3 and 4i−2 from the first vote vector, and the remaining votes from the second vote vector. as Borda score remains unchanged.",
                "However, because c is ranked higher in π1 i than in π2 i , c receives at least 2 more points from votes 4i−3 and 4i − 2 in the newly constructed vote vector than it did in the second vote vector.",
                "It follows that c has a higher Borda score than a in the newly constructed vote vector.",
                "So, a is not the winner in the newly constructed vote vector, and hence we have a correct fooling set.",
                "Theorem 7.",
                "The nondeterministic communication complexity of the Copeland rule is Ω(nm log m) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We will exhibit a fooling set of size (m ! )n where m = (m − 2)/2 and n = (n − 2)/2.",
                "This will prove the theorem because m ! is Ω(m log m), so that log((m ! )n ) = n log(m !) is Ω(nm log m).",
                "We write the set of candidates as the following disjoint union: C = {a, b} ∪ L ∪ R where L = {l1, l2, . . . , lm } and R = {r1, r2, . . . , rm }.",
                "For every vector (π1, π2, . . . , πn ) consisting of n permutations of the integers 1 through m (πi : {1, 2, . . . , m } → {1, 2, . . . , m }), let the following vector of votes be an element of the fooling set: • For 1 ≤ i ≤ n , let voter 2i − 1 rank the candidates a b lπi(1) rπi(1) lπi(2) rπi(2) . . . lπi(m ) rπi(m ). • For 1 ≤ i ≤ n , let voter 2i rank the candidates rπi(m ) lπi(m ) rπi(m −1) lπi(m −1) . . . rπi(1) lπi(1) b a. • Let voter n − 1 = 2n + 1 rank the candidates a b l1 r1 l2 r2 . . . lm rm . • Let voter n = 2n +2 rank the candidates rm lm rm −1 lm −1 . . . r1 l1 a b.",
                "We observe that this fooling set has size (m ! )n , and that candidate a wins in each vector of votes in the fooling set (every pair of candidates is tied in their pairwise election, with the exception that a defeats b, so that a wins the election by half a point).",
                "All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses.",
                "Let the first vote vector correspond to the vector (π1 1, π1 2, . . . , π1 n ), and let the second vote vector correspond to the vector (π2 1, π2 2, . . . , π2 n ).",
                "For some i, we must have π1 i = π2 i , so that for some j ∈ {1, 2, . . . , m }, we have (π1 i )−1 (j) < (π2 i )−1 (j).",
                "Now, construct a new vote vector by taking vote 2i−1 from the first vote vector, and the remaining votes from the second vote vector. as Copeland score remains unchanged.",
                "Let us consider the score of lj.",
                "We first observe that the rank of lj in vote 2i − 1 in the newly constructed vote vector is at least 2 higher than it was in the second vote vector, because (π1 i )−1 (j) < (π2 i )−1 (j).",
                "Let D1 (lj) be the set of candidates in L ∪ R that voter 2i − 1 ranked lower than lj in the first vote vector (D1 (lj) = {c ∈ L ∪ R : lj 1 2i−1 c}), and let D2 (lj) be the set of candidates in L ∪ R that voter 2i − 1 ranked lower than lj in the second vote vector (D2 (lj) = {c ∈ L ∪ R : lj 2 2i−1 c}).",
                "Then, it follows that in the newly constructed vote vector, lj defeats all the candidates in D1 (lj) − D2 (lj) in their pairwise elections (because lj receives an extra vote in each one of these pairwise elections relative to the second vote vector), and loses to all the candidates in D2 (lj) − D1 (lj) (because lj loses a vote in each one of these pairwise elections relative to the second vote vector), and ties with everyone else.",
                "But |D1 (lj)|−|D2 (lj)| ≥ 2, and hence |D1 (lj) − D2 (lj)| − |D2 (lj) − D1 (lj)| ≥ 2.",
                "Hence, in the newly constructed vote vector, lj has at least two more pairwise wins than pairwise losses, and therefore has at least 1 more point than if lj had tied all its pairwise elections.",
                "Thus, lj has a higher Copeland score than a in the newly constructed vote vector.",
                "So, a is not the winner in the newly constructed vote vector, and hence we have a correct fooling set.",
                "Theorem 8.",
                "The nondeterministic communication complexity of the maximin rule is O(nm).",
                "Proof.",
                "The nondeterministic protocol will guess which candidate w is the winner, and, for each other candidate c, which candidate o(c) is the candidate against whom c receives its lowest score in a pairwise election.",
                "Then, let every voter communicate the following: • for each candidate c = w, whether she prefers c to w; • for each candidate c = w, whether she prefers c to o(c).",
                "We observe that this requires the communication of 2n(m− 1) bits.",
                "If the guesses were correct, then, letting N(d, e) be the number of voters preferring candidate d to candidate e, we should have N(c, o(c)) < N(w, c ) for any c = w, c = w, which will prove that w wins the election.",
                "Theorem 9.",
                "The nondeterministic communication complexity of the maximin rule is Ω(nm) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We will exhibit a fooling set of size 2n m where m = m − 2 and n = (n − 1)/4.",
                "Let b be a candidate other than a.",
                "For every vector (S1, S2, . . . , Sn ) consisting of n subsets Si ⊆ C − {a, b}, let the following vector of votes be an element of the fooling set: • For 1 ≤ i ≤ n , let voters 4i − 3 and 4i − 2 rank the candidates Si a C − (Si ∪ {a, b}) b. • For 1 ≤ i ≤ n , let voters 4i − 1 and 4i rank the candidates b C − (Si ∪ {a, b}) a Si. 83 • Let voter 4n + 1 = n rank the candidates a b C − {a, b}.",
                "We observe that this fooling set has size (2m )n = 2n m , and that candidate a wins in each vector of votes in the fooling set (in every one of as pairwise elections, a is ranked higher than its opponent by 2n +1 = (n+1)/2 > n/2 votes).",
                "All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses.",
                "Let the first vote vector correspond to the vector (S1 1 , S1 2 , . . . , S1 n ), and let the second vote vector correspond to the vector (S2 1 , S2 2 , . . . , S2 n ).",
                "For some i, we must have S1 i = S2 i , so that either S1 i S2 i or S2 i S1 i .",
                "Without loss of generality, suppose S1 i S2 i , and let c be some candidate in S1 i − S2 i .",
                "Now, construct a new vote vector by taking votes 4i − 3 and 4i − 2 from the first vote vector, and the remaining votes from the second vote vector.",
                "In this newly constructed vote vector, a is ranked higher than c by only 2n −1 voters, for the following reason.",
                "Whereas voters 4i−3 and 4i − 2 do not rank c higher than a in the second vote vector (because c /∈ S2 i ), voters 4i − 3 and 4i − 2 do rank c higher than a in the first vote vector (because c ∈ S1 i ).",
                "Moreover, in every one of bs pairwise elections, b is ranked higher than its opponent by at least 2n voters.",
                "So, a has a lower maximin score than b, therefore a is not the winner in the newly constructed vote vector, and hence we have a correct fooling set.",
                "Theorem 10.",
                "The deterministic communication complexity of the STV rule is O(n(log m)2 ).",
                "Proof.",
                "Consider the following communication protocol.",
                "Let each voter first announce her most preferred candidate (O(n log m) communication).",
                "In the remaining rounds, we will keep track of each voters most preferred candidate among the remaining candidates, which will be enough to implement the rule.",
                "When candidate c is eliminated, let each of the voters whose most preferred candidate among the remaining candidates was c announce their most preferred candidate among the candidates remaining after cs elimination.",
                "If candidate c was the ith candidate to be eliminated (that is, there were m − i + 1 candidates remaining before cs elimination), it follows that at most n/(m − i + 1) voters had candidate c as their most preferred candidate among the remaining candidates, and thus the number of bits to be communicated after the elimination of the ith candidate is O((n/(m−i+1)) log m).7 Thus, the total communication in this communication protocol is O(n log m + m−1 i=1 (n/(m − i + 1)) log m).",
                "Of course, m−1 i=1 1/(m − i + 1) = m i=2 1/i, which is O(log m).",
                "Substituting into the previous expression, we find that the communication complexity is O(n(log m)2 ).",
                "Theorem 11.",
                "The nondeterministic communication complexity of the STV rule is Ω(n log m) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We omit this proof because of space constraint. 7 Actually, O((n/(m − i + 1)) log(m − i + 1)) is also correct, but it will not improve the bound.",
                "Theorem 12.",
                "The deterministic communication complexity of the approval rule is O(nm).",
                "Proof.",
                "Approving or disapproving of a candidate requires only one bit of information, so every voter can simply approve or disapprove of every candidate for a total communication of nm bits.",
                "Theorem 13.",
                "The nondeterministic communication complexity of the approval rule is Ω(nm) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We will exhibit a fooling set of size 2n m where m = m − 1 and n = (n − 1)/4.",
                "For every vector (S1, S2, . . . , Sn ) consisting of n subsets Si ⊆ C − {a}, let the following vector of votes be an element of the fooling set: • For 1 ≤ i ≤ n , let voters 4i − 3 and 4i − 2 approve Si ∪ {a}. • For 1 ≤ i ≤ n , let voters 4i − 1 and 4i approve C − (Si ∪ {a}). • Let voter 4n + 1 = n approve {a}.",
                "We observe that this fooling set has size (2m )n = 2n m , and that candidate a wins in each vector of votes in the fooling set (a is approved by 2n + 1 voters, whereas each other candidate is approved by only 2n voters).",
                "All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses.",
                "Let the first vote vector correspond to the vector (S1 1 , S1 2 , . . . , S1 n ), and let the second vote vector correspond to the vector (S2 1 , S2 2 , . . . , S2 n ).",
                "For some i, we must have S1 i = S2 i , so that either S1 i S2 i or S2 i S1 i .",
                "Without loss of generality, suppose S1 i S2 i , and let b be some candidate in S1 i − S2 i .",
                "Now, construct a new vote vector by taking votes 4i − 3 and 4i − 2 from the first vote vector, and the remaining votes from the second vote vector.",
                "In this newly constructed vote vector, a is still approved by 2n + 1 votes.",
                "However, b is approved by 2n + 2 votes, for the following reason.",
                "Whereas voters 4i−3 and 4i−2 do not approve b in the second vote vector (because b /∈ S2 i ), voters 4i − 3 and 4i − 2 do approve b in the first vote vector (because b ∈ S1 i ).",
                "It follows that bs score in the newly constructed vote vector is bs score in the second vote vector (2n ), plus two.",
                "So, a is not the winner in the newly constructed vote vector, and hence we have a correct fooling set.",
                "Interestingly, an Ω(m) lower bound can be obtained even for the problem of finding a candidate that is approved by more than one voter [20].",
                "Theorem 14.",
                "The deterministic communication complexity of the Condorcet rule is O(nm).",
                "Proof.",
                "We maintain a set of active candidates S which is initialized to C. At each stage, we choose two of the active candidates (say, the two candidates with the lowest indices), and we let each voter communicate which of the two candidates she prefers. (Such a stage requires the communication of n bits, one per voter.)",
                "The candidate preferred by fewer 84 voters (the loser of the pairwise election) is removed from S. (If the pairwise election is tied, both candidates are removed.)",
                "After at most m − 1 iterations, only one candidate is left (or zero candidates are left, in which case there is no Condorcet winner).",
                "Let a be the remaining candidate.",
                "To find out whether candidate a is the Condorcet winner, let each voter communicate, for every candidate c = a, whether she prefers a to c. (This requires the communication of at most n(m − 1) bits.)",
                "This is enough to establish whether a won each of its pairwise elections (and thus, whether a is the Condorcet winner).",
                "Theorem 15.",
                "The nondeterministic communication complexity of the Condorcet rule is Ω(nm) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We will exhibit a fooling set of size 2n m where m = m − 1 and n = (n − 1)/2.",
                "For every vector (S1, S2, . . . , Sn ) consisting of n subsets Si ⊆ C − {a}, let the following vector of votes be an element of the fooling set: • For 1 ≤ i ≤ n , let voter 2i − 1 rank the candidates Si a C − Si. • For 1 ≤ i ≤ n , let voter 2i rank the candidates C − Si a Si. • Let voter 2n +1 = n rank the candidates a C −{a}.",
                "We observe that this fooling set has size (2m )n = 2n m , and that candidate a wins in each vector of votes in the fooling set (a wins each of its pairwise elections by a single vote).",
                "All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses.",
                "Let the first vote vector correspond to the vector (S1 1 , S1 2 , . . . , S1 n ), and let the second vote vector correspond to the vector (S2 1 , S2 2 , . . . , S2 n ).",
                "For some i, we must have S1 i = S2 i , so that either S1 i S2 i or S2 i S1 i .",
                "Without loss of generality, suppose S1 i S2 i , and let b be some candidate in S1 i − S2 i .",
                "Now, construct a new vote vector by taking vote 2i − 1 from the first vote vector, and the remaining votes from the second vote vector.",
                "In this newly constructed vote vector, b wins its pairwise election against a by one vote (vote 2i − 1 ranks b above a in the newly constructed vote vector because b ∈ S1 i , whereas in the second vote vector vote 2i − 1 ranked a above b because b /∈ S2 i ).",
                "So, a is not the Condorcet winner in the newly constructed vote vector, and hence we have a correct fooling set.",
                "Theorem 16.",
                "The deterministic communication complexity of the cup rule is O(nm).",
                "Proof.",
                "Consider the following simple communication protocol.",
                "First, let all the voters communicate, for every one of the matchups in the first round, which of its two candidates they prefer.",
                "After this, the matchups for the second round are known, so let all the voters communicate which candidate they prefer in each matchup in the second round-etc.",
                "Because communicating which of two candidates is preferred requires only one bit per voter, and because there are only m − 1 matchups in total, this communication protocol requires O(nm) communication.",
                "Theorem 17.",
                "The nondeterministic communication complexity of the cup rule is Ω(nm) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We will exhibit a fooling set of size 2n m where m = (m − 1)/2 and n = (n − 7)/2.",
                "Given that m + 1 is a power of 2, so that one candidate gets a bye (that is, does not face an opponent) in the first round, let a be the candidate with the bye.",
                "Of the m first-round matchups, let lj denote the one (left) candidate in the jth matchup, and let rj be the other (right) candidate.",
                "Let L = {lj : 1 ≤ j ≤ m } and R = {rj : 1 ≤ j ≤ m }, so that C = L ∪ R ∪ {a}. . . . . . . . . . l r l r l r a m1 1 2 2 m Figure 1: The schedule for the cup rule used in the proof of Theorem 17.",
                "For every vector (S1, S2, . . . , Sn ) consisting of n subsets Si ⊆ R, let the following vector of votes be an element of the fooling set: • For 1 ≤ i ≤ n , let voter 2i − 1 rank the candidates Si L a R − Si. • For 1 ≤ i ≤ n , let voter 2i rank the candidates R − Si L a Si. • Let voters 2n +1 = n−6, 2n +2 = n−5, 2n +3 = n−4 rank the candidates L a R. • Let voters 2n + 4 = n − 3, 2n + 5 = n − 2 rank the candidates a r1 l1 r2 l2 . . . rm lm . • Let voters 2n + 6 = n − 1, 2n + 7 = n rank the candidates rm lm rm −1 lm −1 . . . r1 l1 a.",
                "We observe that this fooling set has size (2m )n = 2n m .",
                "Also, candidate a wins in each vector of votes in the fooling set, for the following reasons.",
                "Each candidate rj defeats its opponent lj in the first round. (For any 1 ≤ i ≤ n , the net effect of votes 2i − 1 and 2i on the pairwise election between rj and lj is zero; votes n − 6, n − 5, n − 4 prefer lj to rj, but votes n − 3, n − 2, n − 1, n all prefer rj to lj.)",
                "Moreover, a defeats every rj in their pairwise election. (For any 1 ≤ i ≤ n , the net effect of votes 2i − 1 and 2i on the pairwise election between a and rj is zero; votes n − 1, n prefer rj to a, but votes n − 6, n − 5, n − 4, n − 3, n − 2 all prefer a to rj.)",
                "It follows that a will defeat all the candidates that it faces.",
                "All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses.",
                "Let the first vote vector correspond to the vector 85 (S1 1 , S1 2 , . . . , S1 n ), and let the second vote vector correspond to the vector (S2 1 , S2 2 , . . . , S2 n ).",
                "For some i, we must have S1 i = S2 i , so that either S1 i S2 i or S2 i S1 i .",
                "Without loss of generality, suppose S1 i S2 i , and let rj be some candidate in S1 i − S2 i .",
                "Now, construct a new vote vector by taking vote 2i from the first vote vector, and the remaining votes from the second vote vector.",
                "We note that, whereas in the second vote vector vote 2i preferred rj to lj (because rj ∈ R−S2 i ), in the newly constructed vote vector this is no longer the case (because rj ∈ S1 i ).",
                "It follows that, whereas in the second vote vector, rj defeated lj in the first round by one vote, in the newly constructed vote vector, lj defeats rj in the first round.",
                "Thus, at least one lj advances to the second round after defeating its opponent rj.",
                "Now, we observe that in the newly constructed vote vector, any lk wins its pairwise election against any rq with q = k. This is because among the first 2n votes, at least n − 1 prefer lk to rq; votes n − 6, n − 5, n − 4 prefer lk to rq; and, because q = k, either votes n − 3, n − 2 prefer lk to rq (if k < q), or votes n − 1, n prefer lk to rq (if k > q).",
                "Thus, at least n + 4 = (n + 1)/2 > n/2 votes prefer lk to rq.",
                "Moreover, any lk wins its pairwise election against a.",
                "This is because only votes n − 3 and n − 2 prefer a to lk.",
                "It follows that, after the first round, any surviving candidate lk can only lose a matchup against another surviving lk , so that one of the lk must win the election.",
                "So, a is not the winner in the newly constructed vote vector, and hence we have a correct fooling set.",
                "Theorem 18.",
                "The deterministic communication complexity of the Bucklin rule is O(nm).",
                "Proof.",
                "Let l be the minimum integer for which there is a candidate who is ranked among the top l candidates by more than half the votes.",
                "We will do a binary search for l. At each point, we will have a lower bound lL which is smaller than l (initialized to 0), and an upper bound lH which is at least l (initialized to m).",
                "While lH − lL > 1, we continue by finding out whether (lH − l)/2 is smaller than l, after which we can update the bounds.",
                "To find out whether a number k is smaller than l, we determine every voters k most preferred candidates.",
                "Every voter can communicate which candidates are among her k most preferred candidates using m bits (for each candidate, indicate whether the candidate is among the top k or not), but because the binary search requires log m iterations, this gives us an upper bound of O((log m)nm), which is not strong enough.",
                "However, if lL < k < lH , and we already know a voters lL most preferred candidates, as well as her lH most preferred candidates, then the voter no longer needs to communicate whether the lL most preferred candidates are among her k most preferred candidates (because they must be), and she no longer needs to communicate whether the m−lH least preferred candidates are among her k most preferred candidates (because they cannot be).",
                "Thus the voter needs to communicate only m−lL −(m−lH ) = lH −lL bits in any given stage.",
                "Because each stage, lH − lL is (roughly) halved, each voter in total communicates only (roughly) m + m/2 + m/4 + . . . ≤ 2m bits.",
                "Theorem 19.",
                "The nondeterministic communication complexity of the Bucklin rule is Ω(nm) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We will exhibit a fooling set of size 2n m where m = (m−1)/2 and n = n/2.",
                "We write the set of candidates as the following disjoint union: C = {a} ∪ L ∪ R where L = {l1, l2, . . . , lm } and R = {r1, r2, . . . , rm }.",
                "For any subset S ⊆ {1, 2, . . . , m }, let L(S) = {li : i ∈ S} and let R(S) = {ri : i ∈ S}.",
                "For every vector (S1, S2, . . . , Sn ) consisting of n sets Si ⊆ {1, 2, . . . , m }, let the following vector of votes be an element of the fooling set: • For 1 ≤ i ≤ n , let voter 2i − 1 rank the candidates L(Si) R − R(Si) a L − L(Si) R(Si). • For 1 ≤ i ≤ n , let voter 2i rank the candidates L − L(Si) R(Si) a L(Si) R − R(Si).",
                "We observe that this fooling set has size (2m )n = 2n m , and that candidate a wins in each vector of votes in the fooling set, for the following reason.",
                "Each candidate in C − {a} is ranked among the top m candidates by exactly half the voters (which is not enough to win).",
                "Thus, we need to look at the voters top m +1 candidates, and a is ranked m +1th by all voters.",
                "All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses.",
                "Let the first vote vector correspond to the vector (S1 1 , S1 2 , . . . , S1 n ), and let the second vote vector correspond to the vector (S2 1 , S2 2 , . . . , S2 n ).",
                "For some i, we must have S1 i = S2 i , so that either S1 i S2 i or S2 i S1 i .",
                "Without loss of generality, suppose S1 i S2 i , and let j be some integer in S1 i − S2 i .",
                "Now, construct a new vote vector by taking vote 2i − 1 from the first vote vector, and the remaining votes from the second vote vector.",
                "In this newly constructed vote vector, a is still ranked m + 1th by all votes.",
                "However, lj is ranked among the top m candidates by n + 1 = n/2 + 1 votes.",
                "This is because whereas vote 2i − 1 does not rank lj among the top m candidates in the second vote vector (because j /∈ S2 i , we have lj /∈ L(S2 i )), vote 2i − 1 does rank lj among the top m candidates in the first vote vector (because j ∈ S1 i , we have lj ∈ L(S1 i )).",
                "So, a is not the winner in the newly constructed vote vector, and hence we have a correct fooling set.",
                "Theorem 20.",
                "The nondeterministic communication complexity of the ranked pairs rule is Ω(nm log m) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We omit this proof because of space constraint. 5.",
                "DISCUSSION One key obstacle to using voting for preference aggregation is the communication burden that an election places on the voters.",
                "By lowering this burden, it may become feasible to conduct more elections over more issues.",
                "In the limit, this could lead to a shift from representational government to a system in which most issues are decided by referenda-a veritable e-democracy.",
                "In this paper, we analyzed the communication complexity of the common voting rules.",
                "Knowing which voting rules require little communication is especially important when the issue to be voted on is of low enough importance that the following is true: the parties involved are willing to accept a rule that tends 86 to produce outcomes that are slightly less representative of the voters preferences, if this rule reduces the communication burden on the voters significantly.",
                "The following table summarizes the results we obtained.",
                "Rule Lower bound Upper bound plurality Ω(n log m) O(n log m) plurality w/ runoff Ω(n log m) O(n log m) STV Ω(n log m) O(n(log m)2) Condorcet Ω(nm) O(nm) approval Ω(nm) O(nm) Bucklin Ω(nm) O(nm) cup Ω(nm) O(nm) maximin Ω(nm) O(nm) Borda Ω(nm log m) O(nm log m) Copeland Ω(nm log m) O(nm log m) ranked pairs Ω(nm log m) O(nm log m) Communication complexity of voting rules, sorted from low to high.",
                "All of the upper bounds are deterministic (with the exception of maximin, for which the best deterministic upper bound we proved is O(nm log m)).",
                "All of the lower bounds hold even for nondeterministic communication and even just for determining whether a given candidate a is the winner.",
                "One area of future research is to study what happens when we restrict our attention to communication protocols that do not reveal any strategically useful information.",
                "This restriction may invalidate some of the upper bounds that we derived using multistage communication protocols.",
                "Also, all of our bounds are worst-case bounds.",
                "It may be possible to outperform these bounds when the distribution of votes has additional structure.",
                "When deciding which <br>voting rule</br> to use for an election, there are many considerations to take into account.",
                "The voting rules that we studied in this paper are the most common ones that have survived the test of time.",
                "One way to select among these rules is to consider recent results on complexity.",
                "The table above shows that from a communication complexity perspective, plurality, plurality with runoff, and STV are preferable.",
                "However, plurality has the undesirable property that it is computationally easy to manipulate by voting strategically [3, 7].",
                "Plurality with runoff is NP-hard to manipulate by a coalition of weighted voters, or by an individual that faces correlated uncertainty about the others votes [7, 6].",
                "STV is NP-hard to manipulate in those settings as well [7], but also by an individual with perfect knowledge of the others votes (when the number of candidates is unbounded) [2].",
                "Therefore, STV is more robust, although it may require slightly more worst-case communication as per the table above.",
                "Yet other selection criteria are the computational complexity of determining whether enough information has been elicited to declare a winner, and that of determining the optimal sequence of queries [8]. 6.",
                "REFERENCES [1] Lawrence Ausubel and Paul Milgrom.",
                "Ascending auctions with package bidding.",
                "Frontiers of Theoretical Economics, 1, 2002.",
                "No. 1, Article 1. [2] John Bartholdi, III and James Orlin.",
                "Single transferable vote resists strategic voting.",
                "Social Choice and Welfare, 8(4):341-354, 1991. [3] John Bartholdi, III, Craig Tovey, and Michael Trick.",
                "The computational difficulty of manipulating an election.",
                "Social Choice and Welfare, 6(3):227-241, 1989. [4] Avrim Blum, Jeffrey Jackson, Tuomas Sandholm, and Martin Zinkevich.",
                "Preference elicitation and query learning.",
                "Journal of Machine Learning Research, 5:649-667, 2004. [5] Wolfram Conen and Tuomas Sandholm.",
                "Preference elicitation in combinatorial auctions: Extended abstract.",
                "In Proceedings of the ACM Conference on Electronic Commerce (ACM-EC), pages 256-259, 2001. [6] Vincent Conitzer, Jerome Lang, and Tuomas Sandholm.",
                "How many candidates are needed to make elections hard to manipulate?",
                "In Theoretical Aspects of Rationality and Knowledge (TARK), pages 201-214, 2003. [7] Vincent Conitzer and Tuomas Sandholm.",
                "Complexity of manipulating elections with few candidates.",
                "In Proceedings of the National Conference on Artificial Intelligence (AAAI), pages 314-319, 2002. [8] Vincent Conitzer and Tuomas Sandholm.",
                "Vote elicitation: Complexity and strategy-proofness.",
                "In Proceedings of the National Conference on Artificial Intelligence (AAAI), pages 392-397, 2002. [9] Sven de Vries, James Schummer, and Rakesh V. Vohra.",
                "On ascending auctions for heterogeneous objects, 2003.",
                "Draft. [10] Allan Gibbard.",
                "Manipulation of voting schemes.",
                "Econometrica, 41:587-602, 1973. [11] Benoit Hudson and Tuomas Sandholm.",
                "Effectiveness of query types and policies for preference elicitation in combinatorial auctions.",
                "In International Conference on Autonomous Agents and Multi-Agent Systems (AAMAS), pages 386-393, 2004. [12] E Kushilevitz and N Nisan.",
                "Communication Complexity.",
                "Cambridge University Press, 1997. [13] Sebasti´en Lahaie and David Parkes.",
                "Applying learning algorithms to preference elicitation.",
                "In Proceedings of the ACM Conference on Electronic Commerce, 2004. [14] Noam Nisan and Ilya Segal.",
                "The communication requirements of efficient allocations and supporting prices.",
                "Journal of Economic Theory, 2005.",
                "Forthcoming. [15] David Parkes. iBundle: An efficient ascending price bundle auction.",
                "In Proceedings of the ACM Conference on Electronic Commerce (ACM-EC), pages 148-157, 1999. [16] Tuomas Sandholm.",
                "An implementation of the contract net protocol based on marginal cost calculations.",
                "In Proceedings of the National Conference on Artificial Intelligence (AAAI), pages 256-262, 1993. [17] Tuomas Sandholm and Craig Boutilier.",
                "Preference elicitation in combinatorial auctions.",
                "In Peter Cramton, Yoav Shoham, and Richard Steinberg, editors, Combinatorial Auctions, chapter 10.",
                "MIT Press, 2005. [18] Paolo Santi, Vincent Conitzer, and Tuomas Sandholm.",
                "Towards a characterization of polynomial preference elicitation with value queries in combinatorial auctions.",
                "In Conference on Learning Theory (COLT), pages 1-16, 2004. [19] Mark Satterthwaite.",
                "Strategy-proofness and Arrows conditions: existence and correspondence theorems for voting procedures and social welfare functions.",
                "Journal of Economic Theory, 10:187-217, 1975. [20] Ilya Segal.",
                "The communication requirements of social choice rules and supporting budget sets, 2004.",
                "Draft.",
                "Presented at the DIMACS Workshop on Computational Issues in Auction Design, Rutgers University, New Jersey, USA. [21] Peter Wurman and Michael Wellman.",
                "AkBA: A progressive, anonymous-price combinatorial auction.",
                "In Proceedings of the ACM Conference on Electronic Commerce (ACM-EC), pages 21-29, 2000. [22] A. C. Yao.",
                "Some complexity questions related to distributed computing.",
                "In Proceedings of the 11th ACM symposium on theory of computing (STOC), pages 209-213, 1979. [23] Martin Zinkevich, Avrim Blum, and Tuomas Sandholm.",
                "On polynomial-time preference elicitation with value queries.",
                "In Proceedings of the ACM Conference on Electronic Commerce (ACM-EC), pages 176-185, 2003. 87"
            ],
            "original_annotated_samples": [
                "For each rule, we first give a deterministic communication protocol and an upper bound on the number of bits communicated in it; then, we give a lower bound on (even the nondeterministic) communication requirements of the <br>voting rule</br>.",
                "In contrast, in this paper, we are concerned with the worst-case number of bits that must be communicated to execute a given <br>voting rule</br>, when nothing is known in advance about the voters preferences.",
                "After obtaining the upper bounds, we show that they are tight by giving matching lower bounds on (even the nondeterministic) communication complexity of each <br>voting rule</br>.",
                "Thus, we distinguish between the <br>voting rule</br> (the mapping from vectors of votes to outcomes) and the communication protocol (which determines how the relevant parts of the votes are actually elicited from the voters).",
                "Of course, even the single-stage communication protocol is not strategy-proof4 for any reasonable <br>voting rule</br>, by the Gibbard-Satterthwaite theorem [10, 19]."
            ],
            "translated_annotated_samples": [
                "Para cada regla, primero proporcionamos un protocolo de comunicación determinista y un límite superior en la cantidad de bits comunicados en él; luego, damos un límite inferior en los requisitos de comunicación (incluso los no deterministas) de la <br>regla de votación</br>.",
                "Por el contrario, en este artículo nos preocupamos por el número máximo de bits que deben comunicarse para ejecutar una <br>regla de votación</br> dada, cuando no se conoce de antemano las preferencias de los votantes.",
                "Después de obtener los límites superiores, demostramos que son ajustados al proporcionar límites inferiores coincidentes en la complejidad de comunicación (incluso la no determinista) de cada <br>regla de votación</br>.",
                "Por lo tanto, distinguimos entre la <br>regla de votación</br> (la asignación de vectores de votos a resultados) y el protocolo de comunicación (que determina cómo se obtienen realmente las partes relevantes de los votos de los votantes).",
                "Por supuesto, incluso el protocolo de comunicación de una sola etapa no es a prueba de estrategias para ninguna <br>regla de votación</br> razonable, según el teorema de Gibbard-Satterthwaite [10, 19]."
            ],
            "translated_text": "Determinamos la complejidad de comunicación de las reglas de votación comunes. Las reglas (ordenadas por su complejidad de comunicación de baja a alta) son pluralidad, pluralidad con segunda vuelta, voto único transferible (STV), Condorcet, aprobación, Bucklin, taza, maximin, Borda, Copeland y pares clasificados. Para cada regla, primero proporcionamos un protocolo de comunicación determinista y un límite superior en la cantidad de bits comunicados en él; luego, damos un límite inferior en los requisitos de comunicación (incluso los no deterministas) de la <br>regla de votación</br>. Los límites coinciden para todas las reglas de votación excepto STV y maximin. Categorías y Descriptores de Asignaturas F.2 [Teoría de la Computación]: Análisis de Algoritmos y Complejidad de Problemas; J.4 [Aplicaciones Informáticas]: Ciencias Sociales y del Comportamiento-Economía Términos Generales Algoritmos, Economía, Teoría 1. INTRODUCCIÓN Un factor clave en la viabilidad de cualquier regla de agregación de preferencias es su carga de comunicación. Para agregar con éxito las preferencias de los agentes, generalmente no es necesario que todos los agentes informen toda su información de preferencias. Los protocolos inteligentes que obtienen parcial y secuencialmente las preferencias de los agentes tienen el potencial de reducir drásticamente la comunicación requerida. Esto tiene al menos las siguientes ventajas: • Puede hacer factible la agregación de preferencias en entornos donde la cantidad total de información de preferencias es demasiado grande para comunicar. • Incluso cuando comunicar toda la información de preferencias es factible, reducir los requisitos de comunicación disminuye la carga impuesta a los agentes. Esto es especialmente cierto cuando los agentes, en lugar de conocer todas sus preferencias de antemano, necesitan invertir esfuerzo (como cálculos o recopilación de información) para determinar sus preferencias. • Preserva (parte de) la privacidad de los agentes. La mayor parte del trabajo sobre la reducción de la carga de comunicación en la agregación de preferencias se ha centrado en entornos de asignación de recursos como subastas combinatorias, en las que un subastador subasta un número de artículos (posiblemente distintos) en un solo evento. Debido a que en una subasta combinatoria, los postores pueden tener valoraciones separadas para cada uno de un número exponencial de posibles paquetes de artículos, este es un escenario en el que reducir la carga de comunicación es especialmente crucial. Esto se puede lograr complementando al subastador con un provocador que elicitara incrementalmente partes de las preferencias de los postores según sea necesario, basándose en lo que los postores han revelado sobre sus preferencias hasta el momento, como sugieren Conen y Sandholm [5]. Por ejemplo, el solicitante puede preguntar por el valor de un postor para un paquete específico (consultas de valor), cuál de dos paquetes prefiere el postor (consultas de orden), qué paquete clasifica en la posición k o cuál es la posición de un paquete dado (consultas de clasificación), qué paquete compraría dado un vector particular de precios (consultas de demanda), etc., hasta que se pueda determinar (al menos) la asignación final. Experimentalmente, esto produce a drástico ahorro en la revelación de preferencias [11]. Además, si las funciones de valoración de los agentes provienen de ciertas subclases naturales, el problema de la obtención de información puede resolverse utilizando solo un número polinomial de consultas incluso en el peor de los casos [23, 4, 13, 18, 14]. Para una revisión de la obtención de preferencias en subastas combinatorias, consulte [17]. Las subastas combinatorias ascendentes son una forma especial conocida de obtención de preferencias, donde el encuestador realiza consultas de demanda con precios crecientes [15, 21, 1, 9]. Finalmente, los problemas de asignación de recursos 78 también han sido estudiados desde el punto de vista de la complejidad de la comunicación, derivando así límites inferiores sobre la comunicación requerida. Por ejemplo, Nisan y Segal muestran que se requiere comunicación exponencial incluso para obtener un excedente mayor al obtenido al subastar todos los objetos como un único paquete [14]. Segal también estudia reglas de elección social en general, y muestra que para una gran clase de reglas de elección social, los conjuntos de presupuesto de apoyo deben ser revelados de tal manera que si cada agente prefiere el mismo resultado en su conjunto de presupuesto, esto demuestra la optimalidad de ese resultado. Segal luego utiliza esta caracterización para demostrar límites en la comunicación requerida en la asignación de recursos, así como en entornos de emparejamiento [20]. En este documento, nos enfocaremos en los requisitos de comunicación de una subclase generalmente aplicable de reglas de elección social, comúnmente conocidas como reglas de votación. En un entorno de votación, hay un conjunto de resultados de candidatos sobre los cuales los votantes expresan sus preferencias al enviar un voto (normalmente, una clasificación de los candidatos), y el ganador (es decir, el resultado elegido) se determina en función de estos votos. La comunicación requerida por las reglas de votación puede ser grande ya sea porque el número de votantes es grande (como, por ejemplo, en elecciones nacionales), o porque el número de candidatos es grande (por ejemplo, los agentes pueden votar sobre asignaciones de un número de recursos), o ambos. El trabajo previo [8] ha estudiado la obtención de información en votaciones, analizando qué tan difícil es computacionalmente decidir si se puede determinar un ganador con la información obtenida hasta el momento, así como qué tan difícil es encontrar la secuencia óptima de preguntas dadas sospechas perfectas sobre las preferencias de los votantes. Además, ese artículo discute cuestiones estratégicas (teóricas de juegos) introducidas por la obtención de información. Por el contrario, en este artículo nos preocupamos por el número máximo de bits que deben comunicarse para ejecutar una <br>regla de votación</br> dada, cuando no se conoce de antemano las preferencias de los votantes. Determinamos la complejidad de comunicación de las reglas de votación comunes. Para cada regla, primero damos una cota superior en la complejidad de comunicación (determinística) proporcionando un protocolo de comunicación para ella y analizando cuántos bits necesitan ser transmitidos en este protocolo. (Los resultados de Segal [20] no se aplican a la mayoría de las reglas de votación porque la mayoría de las reglas de votación no son intersección-monótonas (o incluso monótonas).) Para muchas de las reglas de votación bajo estudio, resulta que no se puede hacer mejor que simplemente permitir que cada votante comunique inmediatamente toda su información (potencialmente relevante). Sin embargo, para algunas reglas (como la pluralidad con segunda vuelta, STV y taza) existe un protocolo de comunicación multietapa directo que, con un análisis detallado, se puede demostrar que supera significativamente la comunicación inmediata de toda la información (potencialmente relevante). Finalmente, para algunas reglas (como las reglas de Condorcet y Bucklin), necesitamos introducir un protocolo de comunicación más complejo para lograr el mejor límite superior posible. Para dos de las reglas que estudiamos que son intersección-monótonas, a saber, las reglas de aprobación y Condorcet, los resultados de Segal de hecho pueden ser utilizados para dar pruebas alternativas de nuestros límites inferiores. Solo proporcionamos pruebas directas para estas reglas aquí porque 1) estas pruebas directas son de las más fáciles en este documento, 2) las pruebas alternativas son no triviales incluso dados los resultados de Segal, y 3) se aplica una restricción de espacio. Sin embargo, esperamos incluir también las pruebas alternativas en una versión posterior. Después de obtener los límites superiores, demostramos que son ajustados al proporcionar límites inferiores coincidentes en la complejidad de comunicación (incluso la no determinista) de cada <br>regla de votación</br>. Hay dos excepciones: STV, para el cual nuestros límites superiores e inferiores difieren en un factor log m; y maximin, para el cual nuestro mejor límite superior determinístico también es un factor log m por encima del límite inferior (no determinístico), aunque proporcionamos un límite superior no determinístico que coincide con el límite inferior. 2. REVISIÓN DE LAS REGLAS DE VOTACIÓN En esta sección, revisamos las reglas de votación comunes que estudiamos en este documento. Una regla de votación es una función que asigna un vector de votos de los n votantes (es decir, preferencias sobre candidatos) a uno de los m candidatos (el ganador) en el conjunto de candidatos C. En algunos casos (como la regla de Condorcet), la regla también puede declarar que no existe un ganador. No nos preocupamos por lo que sucede en caso de un empate entre candidatos (nuestros límites inferiores se mantienen independientemente de cómo se resuelvan los empates, y los protocolos de comunicación utilizados para nuestros límites superiores no intentan romper los empates). Todas las reglas que estudiamos son reglas basadas en el rango, lo que significa que un voto se define como un ordenamiento de los candidatos (con la excepción de la regla de la pluralidad, para la cual un voto es un único candidato, y la regla de aprobación, para la cual un voto es un subconjunto de los candidatos). Consideraremos las siguientes reglas de votación. (Para reglas que definen una puntuación, el candidato con la puntuación más alta gana.) • reglas de puntuación. Sea α = α1, . . . , αm un vector de enteros tal que α1 ≥ α2 . . . ≥ αm. Para cada votante, un candidato recibe α1 puntos si es clasificado en primer lugar por el votante, α2 si es clasificado en segundo lugar, etc. La puntuación sα de un candidato es el número total de puntos que recibe el candidato. La regla de Borda es la regla de puntuación con α = m−1, m−2, . . . , 0. La regla de la pluralidad es la regla de puntuación con α = 1, 0, . . . , 0. • voto único transferible (STV). La regla avanza a través de una serie de m - 1 rondas. En cada ronda, el candidato con la puntuación de pluralidad más baja (es decir, el menor número de votantes que lo clasifican en primer lugar entre los candidatos restantes) es eliminado (y cada uno de los votos para ese candidato se transfieren al siguiente candidato restante en el orden dado en ese voto). El ganador es el último candidato restante. • mayoría con segunda vuelta. En esta regla, una primera ronda elimina a todos los candidatos excepto a los dos con las puntuaciones de pluralidad más altas. Los votos se transfieren a estos como en la regla de VST, y una segunda ronda determina al ganador de estos dos. • aprobación. Cada votante etiqueta a cada candidato como aprobado o desaprobado. El candidato aprobado por el mayor número de votantes gana. • Condorcet. Para cualquier par de candidatos i y j, sea N(i, j) el número de votantes que prefieren a i sobre j. Si hay un candidato i que es preferido por la mayoría de los votantes a cualquier otro candidato (es decir, N(i, j) > N(j, i) para todo j = i, es decir, i gana en cada elección por pares), entonces el candidato i gana. El término protocolo de votación se usa a menudo para describir el mismo concepto, pero buscamos hacer una distinción clara entre la regla que mapea las preferencias a los resultados y el protocolo de comunicación/obtención utilizado para implementar esta regla. (Simpson). El puntaje maximin de i es s(i) = minj=i N(i, j), es decir, su peor desempeño en una elección por pares. El candidato con la puntuación maximin más alta gana. • Copeland. Para cualquier par de candidatos distintos i y j, sea C(i, j) = 1 si N(i, j) > N(j, i), C(i, j) = 1/2 si N(i, j) = N(j, i) y C(i, j) = 0 si N(i, j) < N(j, i). El puntaje de Copeland del candidato i es s(i) = j=i C(i, j). • taza (comparaciones binarias secuenciales). La regla de la copa se define por un árbol binario equilibrado T con un hoja por candidato, y una asignación de candidatos a hojas (cada hoja recibe un candidato). Cada nodo no hoja se le asigna el ganador de la elección por pares de los nodos hijos; el candidato asignado a la raíz gana. • Bucklin. Para cualquier candidato i y entero l, sea B(i, l) el número de votantes que clasifican al candidato i entre los l primeros candidatos. El ganador es arg mini(min{l : B(i, l) > n/2}). Es decir, si decimos que un votante aprueba a sus l candidatos principales, entonces aumentamos repetidamente l en 1 hasta que algún candidato sea aprobado por más de la mitad de los votantes, y este candidato es el ganador. • pares clasificados. Esta regla determina un orden en todos los candidatos, y el ganador es el candidato en la parte superior de este orden. Ordena todos los pares ordenados de candidatos (i, j) por N(i, j), el número de votantes que prefieren a i sobre j. Comenzando con el par (i, j) con el mayor N(i, j), aseguramos el resultado de su elección en pareja (i j). Luego, pasamos al siguiente par y bloqueamos el resultado de su elección por pares. Continuamos bloqueando cada resultado en pares que no contradiga el orden establecido hasta el momento. Enfatizamos que estas definiciones de reglas de votación no se preocupan por cómo se obtienen los votos de los votantes; todas las reglas de votación, incluidas aquellas que se definen sugestivamente en términos de rondas, son en realidad solo funciones que asignan el vector de todos los votos de los votantes a un ganador. Sin embargo, siempre hay muchas formas diferentes de obtener los votos (o las partes relevantes de estos) de los votantes. Por ejemplo, en la regla de la pluralidad con segunda vuelta, una forma de obtener los votos es pedir a cada votante que declare su orden completo de los candidatos de antemano. Alternativamente, podemos primero pedir a cada votante que declare solo su candidato más preferido; luego, sabremos los dos candidatos en la segunda vuelta, y podemos preguntar a cada votante cuál de estos dos candidatos prefiere. Por lo tanto, distinguimos entre la <br>regla de votación</br> (la asignación de vectores de votos a resultados) y el protocolo de comunicación (que determina cómo se obtienen realmente las partes relevantes de los votos de los votantes). El objetivo de este documento es proporcionar protocolos de comunicación eficientes para las reglas de votación recién definidas, y demostrar que no existen protocolos de comunicación más eficientes. Es interesante notar que la elección del protocolo de comunicación puede afectar el comportamiento estratégico de los votantes. Los protocolos de comunicación de múltiples etapas pueden revelar a los votantes cierta información sobre cómo están votando los demás votantes (por ejemplo, en el protocolo de comunicación de dos etapas recién dado para la pluralidad con segunda vuelta, en la segunda etapa los votantes sabrán qué dos candidatos tienen las puntuaciones de pluralidad más altas). En general, cuando los votantes reciben esa información, puede darles incentivos para votar de manera diferente a como lo harían en un protocolo de comunicación de una sola etapa en el que todos los votantes declaran sus votos completos simultáneamente. Por supuesto, incluso el protocolo de comunicación de una sola etapa no es a prueba de estrategias para ninguna <br>regla de votación</br> razonable, según el teorema de Gibbard-Satterthwaite [10, 19]. ",
            "candidates": [],
            "error": [
                [
                    ""
                ]
            ]
        },
        "stv": {
            "translated_key": "stv",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Communication Complexity of Common Voting Rules∗ Vincent Conitzer Carnegie Mellon University 5000 Forbes Avenue Pittsburgh, PA 15213, USA conitzer@cs.cmu.edu Tuomas Sandholm Carnegie Mellon University 5000 Forbes Avenue Pittsburgh, PA 15213, USA sandholm@cs.cmu.edu ABSTRACT We determine the communication complexity of the common voting rules.",
                "The rules (sorted by their communication complexity from low to high) are plurality, plurality with runoff, single transferable vote (<br>stv</br>), Condorcet, approval, Bucklin, cup, maximin, Borda, Copeland, and ranked pairs.",
                "For each rule, we first give a deterministic communication protocol and an upper bound on the number of bits communicated in it; then, we give a lower bound on (even the nondeterministic) communication requirements of the voting rule.",
                "The bounds match for all voting rules except <br>stv</br> and maximin.",
                "Categories and Subject Descriptors F.2 [Theory of Computation]: Analysis of Algorithms and Problem Complexity; J.4 [Computer Applications]: Social and Behavioral Sciences-Economics General Terms Algorithms, Economics, Theory 1.",
                "INTRODUCTION One key factor in the practicality of any preference aggregation rule is its communication burden.",
                "To successfully aggregate the agents preferences, it is usually not necessary for all the agents to report all of their preference information.",
                "Clever protocols that elicit the agents preferences partially and sequentially have the potential to dramatically reduce the required communication.",
                "This has at least the following advantages: • It can make preference aggregation feasible in settings where the total amount of preference information is too large to communicate. • Even when communicating all the preference information is feasible, reducing the communication requirements lessens the burden placed on the agents.",
                "This is especially true when the agents, rather than knowing all their preferences in advance, need to invest effort (such as computation or information gathering) to determine their preferences [16]. • It preserves (some of) the agents privacy.",
                "Most of the work on reducing the communication burden in preference aggregation has focused on resource allocation settings such as combinatorial auctions, in which an auctioneer auctions off a number of (possibly distinct) items in a single event.",
                "Because in a combinatorial auction, bidders can have separate valuations for each of an exponential number of possible bundles of items, this is a setting in which reducing the communication burden is especially crucial.",
                "This can be accomplished by supplementing the auctioneer with an elicitor that incrementally elicits parts of the bidders preferences on an as-needed basis, based on what the bidders have revealed about their preferences so far, as suggested by Conen and Sandholm [5].",
                "For example, the elicitor can ask for a bidders value for a specific bundle (value queries), which of two bundles the bidder prefers (order queries), which bundle he ranks kth or what the rank of a given bundle is (rank queries), which bundle he would purchase given a particular vector of prices (demand queries), etc.-until (at least) the final allocation can be determined.",
                "Experimentally, this yields drastic savings in preference revelation [11].",
                "Furthermore, if the agents valuation functions are drawn from certain natural subclasses, the elicitation problem can be solved using only polynomially many queries even in the worst case [23, 4, 13, 18, 14].",
                "For a review of preference elicitation in combinatorial auctions, see [17].",
                "Ascending combinatorial auctions are a well-known special form of preference elicitation, where the elicitor asks demand queries with increasing prices [15, 21, 1, 9].",
                "Finally, resource 78 allocation problems have also been studied from a communication complexity viewpoint, thereby deriving lower bounds on the required communication.",
                "For example, Nisan and Segal show that exponential communication is required even to obtain a surplus greater than that obtained by auctioning off all objects as a single bundle [14].",
                "Segal also studies social choice rules in general, and shows that for a large class of social choice rules, supporting budget sets must be revealed such that if every agent prefers the same outcome in her budget set, this proves the optimality of that outcome.",
                "Segal then uses this characterization to prove bounds on the communication required in resource allocation as well as matching settings [20].",
                "In this paper, we will focus on the communication requirements of a generally applicable subclass of social choice rules, commonly known as voting rules.",
                "In a voting setting, there is a set of candidate outcomes over which the voters express their preferences by submitting a vote (typically, a ranking of the candidates), and the winner (that is, the chosen outcome) is determined based on these votes.",
                "The communication required by voting rules can be large either because the number of voters is large (such as, for example, in national elections), or because the number of candidates is large (for example, the agents can vote over allocations of a number of resources), or both.",
                "Prior work [8] has studied elicitation in voting, studying how computationally hard it is to decide whether a winner can be determined with the information elicited so far, as well as how hard it is to find the optimal sequence of queries given perfect suspicions about the voters preferences.",
                "In addition, that paper discusses strategic (game-theoretic) issues introduced by elicitation.",
                "In contrast, in this paper, we are concerned with the worst-case number of bits that must be communicated to execute a given voting rule, when nothing is known in advance about the voters preferences.",
                "We determine the communication complexity of the common voting rules.",
                "For each rule, we first give an upper bound on the (deterministic) communication complexity by providing a communication protocol for it and analyzing how many bits need to be transmitted in this protocol. (Segals results [20] do not apply to most voting rules because most voting rules are not intersectionmonotonic (or even monotonic).1 ) For many of the voting rules under study, it turns out that one cannot do better than simply letting each voter immediately communicate all her (potentially relevant) information.",
                "However, for some rules (such as plurality with runoff, <br>stv</br> and cup) there is a straightforward multistage communication protocol that, with some analysis, can be shown to significantly outperform the immediate communication of all (potentially relevant) information.",
                "Finally, for some rules (such as the Condorcet and Bucklin rules), we need to introduce a more complex communication protocol to achieve the best possible upper 1 For two of the rules that we study that are intersectionmonotonic, namely the approval and Condorcet rules, Segals results can in fact be used to give alternative proofs of our lower bounds.",
                "We only give direct proofs for these rules here because 1) these direct proofs are among the easier ones in this paper, 2) the alternative proofs are nontrivial even given Segals results, and 3) a space constraint applies.",
                "However, we hope to also include the alternative proofs in a later version. bound.",
                "After obtaining the upper bounds, we show that they are tight by giving matching lower bounds on (even the nondeterministic) communication complexity of each voting rule.",
                "There are two exceptions: <br>stv</br>, for which our upper and lower bounds are apart by a factor log m; and maximin, for which our best deterministic upper bound is also a factor log m above the (nondeterministic) lower bound, although we give a nondeterministic upper bound that matches the lower bound. 2. REVIEW OF VOTING RULES In this section, we review the common voting rules that we study in this paper.",
                "A voting rule2 is a function mapping a vector of the n voters votes (i.e. preferences over candidates) to one of the m candidates (the winner) in the candidate set C. In some cases (such as the Condorcet rule), the rule may also declare that no winner exists.",
                "We do not concern ourselves with what happens in case of a tie between candidates (our lower bounds hold regardless of how ties are broken, and the communication protocols used for our upper bounds do not attempt to break the ties).",
                "All of the rules that we study are rank-based rules, which means that a vote is defined as an ordering of the candidates (with the exception of the plurality rule, for which a vote is a single candidate, and the approval rule, for which a vote is a subset of the candidates).",
                "We will consider the following voting rules. (For rules that define a score, the candidate with the highest score wins.) • scoring rules.",
                "Let α = α1, . . . , αm be a vector of integers such that α1 ≥ α2 . . . ≥ αm.",
                "For each voter, a candidate receives α1 points if it is ranked first by the voter, α2 if it is ranked second etc.",
                "The score sα of a candidate is the total number of points the candidate receives.",
                "The Borda rule is the scoring rule with α = m−1, m−2, . . . , 0 .",
                "The plurality rule is the scoring rule with α = 1, 0, . . . , 0 . • single transferable vote (<br>stv</br>).",
                "The rule proceeds through a series of m − 1 rounds.",
                "In each round, the candidate with the lowest plurality score (that is, the least number of voters ranking it first among the remaining candidates) is eliminated (and each of the votes for that candidate transfer to the next remaining candidate in the order given in that vote).",
                "The winner is the last remaining candidate. • plurality with run-off.",
                "In this rule, a first round eliminates all candidates except the two with the highest plurality scores.",
                "Votes are transferred to these as in the <br>stv</br> rule, and a second round determines the winner from these two. • approval.",
                "Each voter labels each candidate as either approved or disapproved.",
                "The candidate approved by the greatest number of voters wins. • Condorcet.",
                "For any two candidates i and j, let N(i, j) be the number of voters who prefer i to j.",
                "If there is a candidate i that is preferred to any other candidate by a majority of the voters (that is, N(i, j) > N(j, i) for all j = i-that is, i wins every pairwise election), then candidate i wins. 2 The term voting protocol is often used to describe the same concept, but we seek to draw a sharp distinction between the rule mapping preferences to outcomes, and the communication/elicitation protocol used to implement this rule. 79 • maximin (aka.",
                "Simpson).",
                "The maximin score of i is s(i) = minj=i N(i, j)-that is, is worst performance in a pairwise election.",
                "The candidate with the highest maximin score wins. • Copeland.",
                "For any two distinct candidates i and j, let C(i, j) = 1 if N(i, j) > N(j, i), C(i, j) = 1/2 if N(i, j) = N(j, i) and C(i, j) = 0 if N(i, j) < N(j, i).",
                "The Copeland score of candidate i is s(i) = j=i C(i, j). • cup (sequential binary comparisons).",
                "The cup rule is defined by a balanced3 binary tree T with one leaf per candidate, and an assignment of candidates to leaves (each leaf gets one candidate).",
                "Each non-leaf node is assigned the winner of the pairwise election of the nodes children; the candidate assigned to the root wins. • Bucklin.",
                "For any candidate i and integer l, let B(i, l) be the number of voters that rank candidate i among the top l candidates.",
                "The winner is arg mini(min{l : B(i, l) > n/2}).",
                "That is, if we say that a voter approves her top l candidates, then we repeatedly increase l by 1 until some candidate is approved by more than half the voters, and this candidate is the winner. • ranked pairs.",
                "This rule determines an order on all the candidates, and the winner is the candidate at the top of this order.",
                "Sort all ordered pairs of candidates (i, j) by N(i, j), the number of voters who prefer i to j.",
                "Starting with the pair (i, j) with the highest N(i, j), we lock in the result of their pairwise election (i j).",
                "Then, we move to the next pair, and we lock the result of their pairwise election.",
                "We continue to lock every pairwise result that does not contradict the ordering established so far.",
                "We emphasize that these definitions of voting rules do not concern themselves with how the votes are elicited from the voters; all the voting rules, including those that are suggestively defined in terms of rounds, are in actuality just functions mapping the vector of all the voters votes to a winner.",
                "Nevertheless, there are always many different ways of eliciting the votes (or the relevant parts thereof) from the voters.",
                "For example, in the plurality with runoff rule, one way of eliciting the votes is to ask every voter to declare her entire ordering of the candidates up front.",
                "Alternatively, we can first ask every voter to declare only her most preferred candidate; then, we will know the two candidates in the runoff, and we can ask every voter which of these two candidates she prefers.",
                "Thus, we distinguish between the voting rule (the mapping from vectors of votes to outcomes) and the communication protocol (which determines how the relevant parts of the votes are actually elicited from the voters).",
                "The goal of this paper is to give efficient communication protocols for the voting rules just defined, and to prove that there do not exist any more efficient communication protocols.",
                "It is interesting to note that the choice of the communication protocol may affect the strategic behavior of the voters.",
                "Multistage communication protocols may reveal to the voters some information about how the other voters are voting (for example, in the two-stage communication protocol just given for plurality with runoff, in the second stage voters 3 Balanced means that the difference in depth between two leaves can be at most one. will know which two candidates have the highest plurality scores).",
                "In general, when the voters receive such information, it may give them incentives to vote differently than they would have in a single-stage communication protocol in which all voters declare their entire votes simultaneously.",
                "Of course, even the single-stage communication protocol is not strategy-proof4 for any reasonable voting rule, by the Gibbard-Satterthwaite theorem [10, 19].",
                "However, this does not mean that we should not be concerned about adding even more opportunities for strategic voting.",
                "In fact, many of the communication protocols introduced in this paper do introduce additional opportunities for strategic voting, but we do not have the space to discuss this here. (In prior work [8], we do give an example where an elicitation protocol for the approval voting rule introduces strategic voting, and give principles for designing elicitation protocols that do not introduce strategic problems.)",
                "Now that we have reviewed voting rules, we move on to a brief review of communication complexity theory. 3. REVIEW OF SOME COMMUNICATION COMPLEXITY THEORY In this section, we review the basic model of a communication problem and the lower-bounding technique of constructing a fooling set. (The basic model of a communication problem is due to Yao [22]; for an overview see Kushilevitz and Nisan [12].)",
                "Each player 1 ≤ i ≤ n knows (only) input xi.",
                "Together, they seek to compute f(x1, x2, . . . , xn).",
                "In a deterministic protocol for computing f, in each stage, one of the players announces (to all other players) a bit of information based on her own input and the bits announced so far.",
                "Eventually, the communication terminates and all players know f(x1, x2, . . . , xn).",
                "The goal is to minimize the worst-case (over all input vectors) number of bits sent.",
                "The deterministic communication complexity of a problem is the worstcase number of bits sent in the best (correct) deterministic protocol for it.",
                "In a nondeterministic protocol, the next bit to be sent can be chosen nondeterministically.",
                "For the purposes of this paper, we will consider a nondeterministic protocol correct if for every input vector, there is some sequence of nondeterministic choices the players can make so that the players know the value of f when the protocol terminates.",
                "The nondeterministic communication complexity of a problem is the worst-case number of bits sent in the best (correct) nondeterministic protocol for it.",
                "We are now ready to give the definition of a fooling set.",
                "Definition 1.",
                "A fooling set is a set of input vectors {(x1 1, x1 2, . . . , x1 n), (x2 1, x2 2, . . . , x2 n), . . . , (xk 1 , xk 2 , . . . , xk n) such that for any i, f(xi 1, xi 2, . . . , xi n) = f0 for some constant f0, but for any i = j, there exists some vector (r1, r2, . . . , rn) ∈ {i, j}n such that f(xr1 1 , xr2 2 , . . . , xrn n ) = f0. (That is, we can mix the inputs from the two input vectors to obtain a vector with a different function value.)",
                "It is known that if a fooling set of size k exists, then log k is a lower bound on the communication complexity (even the nondeterministic communication complexity) [12]. 4 A strategy-proof protocol is one in which it is in the players best interest to report their preferences truthfully. 80 For the purposes of this paper, f is the voting rule that maps the votes to the winning candidate, and xi is voter is vote (the information that the voting rule would require from the voter if there were no possibility of multistage communication-i.e. the most preferred candidate (plurality), the approved candidates (approval), or the ranking of all the candidates (all other protocols)).",
                "However, when we derive our lower bounds, f will only signify whether a distinguished candidate a wins. (That is, f is 1 if a wins, and 0 otherwise.)",
                "This will strengthen our lower bound results (because it implies that even finding out whether one given candidate wins is hard).5 Thus, a fooling set in our context is a set of vectors of votes so that a wins (does not win) with each of them; but for any two different vote vectors in the set, there is a way of taking some voters votes from the first vector and the others votes from the second vector, so that a does not win (wins).",
                "To simplify the proofs of our lower bounds, we make assumptions such as the number of voters n is odd in many of these proofs.",
                "Therefore, technically, we do not prove the lower bound for (number of candidates, number of voters) pairs (m, n) that do not satisfy these assumptions (for example, if we make the above assumption, then we technically do not prove the lower bound for any pair (m, n) in which n is even).",
                "Nevertheless, we always prove the lower bound for a representative set of (m, n) pairs.",
                "For example, for every one of our lower bounds it is the case that for infinitely many values of m, there are infinitely many values of n such that the lower bound is proved for the pair (m, n). 4.",
                "RESULTS We are now ready to present our results.",
                "For each voting rule, we first give a deterministic communication protocol for determining the winner to establish an upper bound.",
                "Then, we give a lower bound on the nondeterministic communication complexity (even on the complexity of deciding whether a given candidate wins, which is an easier question).",
                "The lower bounds match the upper bounds in all but two cases: the <br>stv</br> rule (upper bound O(n(log m)2 ); lower bound Ω(n log m)) and the maximin rule (upper bound O(nm log m), although we do give a nondeterministic protocol that is O(nm); lower bound Ω(nm)).",
                "When we discuss a voting rule in which the voters rank the candidates, we will represent a ranking in which candidate c1 is ranked first, c2 is ranked second, etc. as c1 c2 . . . cm. 5 One possible concern is that in the case where ties are possible, it may require much communication to verify whether a specific candidate a is among the winners, but little communication to produce one of the winners.",
                "However, all the fooling sets we use in the proofs have the property that if a wins, then a is the unique winner.",
                "Therefore, in these fooling sets, if one knows any one of the winners, then one knows whether a is a winner.",
                "Thus, computing one of the winners requires at least as much communication as verifying whether a is among the winners.",
                "In general, when a communication problem allows multiple correct answers for a given vector of inputs, this is known as computing a relation rather than a function [12].",
                "However, as per the above, we can restrict our attention to a subset of the domain where the voting rule truly is a (single-valued) function, and hence lower bounding techniques for functions rather than relations will suffice.",
                "Sometimes for the purposes of a proof the internal ranking of a subset of the candidates does not matter, and in this case we will not specify it.",
                "For example, if S = {c2, c3}, then c1 S c4 indicates that either the ranking c1 c2 c3 c4 or the ranking c1 c3 c2 c4 can be used for the proof.",
                "We first give a universal upper bound.",
                "Theorem 1.",
                "The deterministic communication complexity of any rank-based voting rule is O(nm log m).",
                "Proof.",
                "This bound is achieved by simply having everyone communicate their entire ordering of the candidates (indicating the rank of an individual candidate requires only O(log m) bits, so each of the n voters can simply indicate the rank of each of the m candidates).",
                "The next lemma will be useful in a few of our proofs.",
                "Lemma 1.",
                "If m divides n, then log(n! )−m log((n/m)!) ≥ n(log m − 1)/2.",
                "Proof.",
                "If n/m = 1 (that is, n = m), then this expression simplifies to log(n!).",
                "We have log(n!) = n i=1 log i ≥ n x=1 log(i)dx, which, using integration by parts, is equal to n log n − (n − 1) > n(log n − 1) = n(log m − 1) > n(log m − 1)/2.",
                "So, we can assume that n/m ≥ 2.",
                "We observe that log(n!) = n i=1 log i = n/m−1 i=0 m j=1 log(im+j) ≥ n/m−1 i=1 m j=1 log(im) = m n/m−1 i=1 log(im), and that m log((n/m)!) = m n/m i=1 log(i).",
                "Therefore, log(n!) − m log((n/m)!) ≥ m n/m−1 i=1 log(im) − m n/m i=1 log(i) = m(( n/m−1 i=1 log(im/i))−log(n/m)) = m((n/m− 1) log m−log n+log m) = n log m−m log n. Now, using the fact that n/m ≥ 2, we have m log n = n(m/n) log m(n/m) = n(m/n)(log m + log(n/m)) ≤ n(1/2)(log m + log 2).",
                "Thus, log(n!) − m log((n/m)!) ≥ n log m − m log n ≥ n log m − n(1/2)(log m + log 2) = n(log m − 1)/2.",
                "Theorem 2.",
                "The deterministic communication complexity of the plurality rule is O(n log m).",
                "Proof.",
                "Indicating one of the candidates requires only O(log m) bits, so each voter can simply indicate her most preferred candidate.",
                "Theorem 3.",
                "The nondeterministic communication complexity of the plurality rule is Ω(n log m) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We will exhibit a fooling set of size n ! (( n m )! )m where n = (n−1)/2.",
                "Taking the logarithm of this gives log(n ! )− m log((n /m)! ), so the result follows from Lemma 1.",
                "The fooling set will consist of all vectors of votes satisfying the following constraints: • For any 1 ≤ i ≤ n , voters 2i−1 and 2i vote the same. 81 • Every candidate receives equally many votes from the first 2n = n − 1 voters. • The last voter (voter n) votes for a.",
                "Candidate a wins with each one of these vote vectors because of the extra vote for a from the last voter.",
                "Given that m divides n , let us see how many vote vectors there are in the fooling set.",
                "We need to distribute n voter pairs evenly over m candidates, for a total of n /m voter pairs per candidate; and there are precisely n ! (( n m )! )m ways of doing this.6 All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses.",
                "Let i be a number such that the two vote vectors disagree on the candidate for which voters 2i − 1 and 2i vote.",
                "Without loss of generality, suppose that in the first vote vector, these voters do not vote for a (but for some other candidate, b, instead).",
                "Now, construct a new vote vector by taking votes 2i − 1 and 2i from the first vote vector, and the remaining votes from the second vote vector.",
                "Then, b receives 2n /m + 2 votes in this newly constructed vote vector, whereas a receives at most 2n /m+1 votes.",
                "So, a is not the winner in the newly constructed vote vector, and hence we have a correct fooling set.",
                "Theorem 4.",
                "The deterministic communication complexity of the plurality with runoff rule is O(n log m).",
                "Proof.",
                "First, let every voter indicate her most preferred candidate using log m bits.",
                "After this, the two candidates in the runoff are known, and each voter can indicate which one she prefers using a single additional bit.",
                "Theorem 5.",
                "The nondeterministic communication complexity of the plurality with runoff rule is Ω(n log m) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We will exhibit a fooling set of size n ! (( n m )! )m where m = m/2 and n = (n − 2)/4.",
                "Taking the logarithm of this gives log(n !) − m log((n /m )! ), so the result follows from Lemma 1.",
                "Divide the candidates into m pairs: (c1, d1), (c2, d2), . . . , (cm , dm ) where c1 = a and d1 = b.",
                "The fooling set will consist of all vectors of votes satisfying the following constraints: • For any 1 ≤ i ≤ n , voters 4i − 3 and 4i − 2 rank the candidates ck(i) a C − {a, ck(i)}, for some candidate ck(i). (If ck(i) = a then the vote is simply a C − {a}.) • For any 1 ≤ i ≤ n , voters 4i − 1 and 4i rank the candidates dk(i) a C − {a, dk(i)} (that is, their most preferred candidate is the candidate that is paired with the candidate that the previous two voters vote for). 6 An intuitive proof of this is the following.",
                "We can count the number of permutations of n elements as follows.",
                "First, divide the elements into m buckets of size n /m, so that if x is placed in a lower-indexed bucket than y, then x will be indexed lower in the eventual permutation.",
                "Then, decide on the permutation within each bucket (for which there are (n /m)! choices per bucket).",
                "It follows that n ! equals the number of ways to divide n elements into m buckets of size n /m, times ((n /m)! )m . • Every candidate is ranked at the top of equally many of the first 4n = n − 2 votes. • Voter 4n +1 = n−1 ranks the candidates a C−{a}. • Voter 4n + 2 = n ranks the candidates b C − {b}.",
                "Candidate a wins with each one of these vote vectors: because of the last two votes, candidates a and b are one vote ahead of all the other candidates and continue to the runoff, and at this point all the votes that had another candidate ranked at the top transfer to a, so that a wins the runoff.",
                "Given that m divides n , let us see how many vote vectors there are in the fooling set.",
                "We need to distribute n groups of four voters evenly over the m pairs of candidates, and (as in the proof of Theorem 3) there are n ! (( n m )! )m ways of doing this.",
                "All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses.",
                "Let i be a number such that ck(i) is not the same in both of these two vote vectors, that is, c1 k(i) (ck(i) in the first vote vector) is not equal to c2 k(i) (ck(i) in the second vote vector).",
                "Without loss of generality, suppose c1 k(i) = a.",
                "Now, construct a new vote vector by taking votes 4i − 3, 4i − 2, 4i − 1, 4i from the first vote vector, and the remaining votes from the second vote vector.",
                "In this newly constructed vote vector, c1 k(i) and d1 k(i) each receive 4n /m+2 votes in the first round, whereas a receives at most 4n /m+1 votes.",
                "So, a does not continue to the runoff in the newly constructed vote vector, and hence we have a correct fooling set.",
                "Theorem 6.",
                "The nondeterministic communication complexity of the Borda rule is Ω(nm log m) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We will exhibit a fooling set of size (m ! )n where m = m−2 and n = (n−2)/4.",
                "This will prove the theorem because m ! is Ω(m log m), so that log((m ! )n ) = n log(m !) is Ω(nm log m).",
                "For every vector (π1, π2, . . . , πn ) consisting of n orderings of all candidates other than a and another fixed candidate b (technically, the orderings take the form of a one-to-one function πi : {1, 2, . . . , m } → C − {a, b} with πi(j) = c indicating that candidate c is the jth in the order represented by πi), let the following vector of votes be an element of the fooling set: • For 1 ≤ i ≤ n , let voters 4i − 3 and 4i − 2 rank the candidates a b πi(1) πi(2) . . . πi(m ). • For 1 ≤ i ≤ n , let voters 4i − 1 and 4i rank the candidates πi(m ) πi(m − 1) . . . πi(1) b a. • Let voter 4n + 1 = n − 1 rank the candidates a b π0(1) π0(2) . . . π0(m ) (where π0 is an arbitrary order of the candidates other than a and b which is the same for every element of the fooling set). • Let voter 4n + 2 = n rank the candidates π0(m ) π0(m − 1) . . . π0(1) a b.",
                "We observe that this fooling set has size (m ! )n , and that candidate a wins in each vector of votes in the fooling set (to 82 see why, we observe that for any 1 ≤ i ≤ n , votes 4i−3 and 4i − 2 rank the candidates in the exact opposite way from votes 4i − 1 and 4i, which under the Borda rule means they cancel out; and the last two votes give one more point to a than to any other candidate-besides b who gets two fewer points than a).",
                "All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses.",
                "Let the first vote vector correspond to the vector (π1 1, π1 2, . . . , π1 n ), and let the second vote vector correspond to the vector (π2 1, π2 2, . . . , π2 n ).",
                "For some i, we must have π1 i = π2 i , so that for some candidate c /∈ {a, b}, (π1 i )−1 (c) < (π2 i )−1 (c) (that is, c is ranked higher in π1 i than in π2 i ).",
                "Now, construct a new vote vector by taking votes 4i−3 and 4i−2 from the first vote vector, and the remaining votes from the second vote vector. as Borda score remains unchanged.",
                "However, because c is ranked higher in π1 i than in π2 i , c receives at least 2 more points from votes 4i−3 and 4i − 2 in the newly constructed vote vector than it did in the second vote vector.",
                "It follows that c has a higher Borda score than a in the newly constructed vote vector.",
                "So, a is not the winner in the newly constructed vote vector, and hence we have a correct fooling set.",
                "Theorem 7.",
                "The nondeterministic communication complexity of the Copeland rule is Ω(nm log m) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We will exhibit a fooling set of size (m ! )n where m = (m − 2)/2 and n = (n − 2)/2.",
                "This will prove the theorem because m ! is Ω(m log m), so that log((m ! )n ) = n log(m !) is Ω(nm log m).",
                "We write the set of candidates as the following disjoint union: C = {a, b} ∪ L ∪ R where L = {l1, l2, . . . , lm } and R = {r1, r2, . . . , rm }.",
                "For every vector (π1, π2, . . . , πn ) consisting of n permutations of the integers 1 through m (πi : {1, 2, . . . , m } → {1, 2, . . . , m }), let the following vector of votes be an element of the fooling set: • For 1 ≤ i ≤ n , let voter 2i − 1 rank the candidates a b lπi(1) rπi(1) lπi(2) rπi(2) . . . lπi(m ) rπi(m ). • For 1 ≤ i ≤ n , let voter 2i rank the candidates rπi(m ) lπi(m ) rπi(m −1) lπi(m −1) . . . rπi(1) lπi(1) b a. • Let voter n − 1 = 2n + 1 rank the candidates a b l1 r1 l2 r2 . . . lm rm . • Let voter n = 2n +2 rank the candidates rm lm rm −1 lm −1 . . . r1 l1 a b.",
                "We observe that this fooling set has size (m ! )n , and that candidate a wins in each vector of votes in the fooling set (every pair of candidates is tied in their pairwise election, with the exception that a defeats b, so that a wins the election by half a point).",
                "All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses.",
                "Let the first vote vector correspond to the vector (π1 1, π1 2, . . . , π1 n ), and let the second vote vector correspond to the vector (π2 1, π2 2, . . . , π2 n ).",
                "For some i, we must have π1 i = π2 i , so that for some j ∈ {1, 2, . . . , m }, we have (π1 i )−1 (j) < (π2 i )−1 (j).",
                "Now, construct a new vote vector by taking vote 2i−1 from the first vote vector, and the remaining votes from the second vote vector. as Copeland score remains unchanged.",
                "Let us consider the score of lj.",
                "We first observe that the rank of lj in vote 2i − 1 in the newly constructed vote vector is at least 2 higher than it was in the second vote vector, because (π1 i )−1 (j) < (π2 i )−1 (j).",
                "Let D1 (lj) be the set of candidates in L ∪ R that voter 2i − 1 ranked lower than lj in the first vote vector (D1 (lj) = {c ∈ L ∪ R : lj 1 2i−1 c}), and let D2 (lj) be the set of candidates in L ∪ R that voter 2i − 1 ranked lower than lj in the second vote vector (D2 (lj) = {c ∈ L ∪ R : lj 2 2i−1 c}).",
                "Then, it follows that in the newly constructed vote vector, lj defeats all the candidates in D1 (lj) − D2 (lj) in their pairwise elections (because lj receives an extra vote in each one of these pairwise elections relative to the second vote vector), and loses to all the candidates in D2 (lj) − D1 (lj) (because lj loses a vote in each one of these pairwise elections relative to the second vote vector), and ties with everyone else.",
                "But |D1 (lj)|−|D2 (lj)| ≥ 2, and hence |D1 (lj) − D2 (lj)| − |D2 (lj) − D1 (lj)| ≥ 2.",
                "Hence, in the newly constructed vote vector, lj has at least two more pairwise wins than pairwise losses, and therefore has at least 1 more point than if lj had tied all its pairwise elections.",
                "Thus, lj has a higher Copeland score than a in the newly constructed vote vector.",
                "So, a is not the winner in the newly constructed vote vector, and hence we have a correct fooling set.",
                "Theorem 8.",
                "The nondeterministic communication complexity of the maximin rule is O(nm).",
                "Proof.",
                "The nondeterministic protocol will guess which candidate w is the winner, and, for each other candidate c, which candidate o(c) is the candidate against whom c receives its lowest score in a pairwise election.",
                "Then, let every voter communicate the following: • for each candidate c = w, whether she prefers c to w; • for each candidate c = w, whether she prefers c to o(c).",
                "We observe that this requires the communication of 2n(m− 1) bits.",
                "If the guesses were correct, then, letting N(d, e) be the number of voters preferring candidate d to candidate e, we should have N(c, o(c)) < N(w, c ) for any c = w, c = w, which will prove that w wins the election.",
                "Theorem 9.",
                "The nondeterministic communication complexity of the maximin rule is Ω(nm) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We will exhibit a fooling set of size 2n m where m = m − 2 and n = (n − 1)/4.",
                "Let b be a candidate other than a.",
                "For every vector (S1, S2, . . . , Sn ) consisting of n subsets Si ⊆ C − {a, b}, let the following vector of votes be an element of the fooling set: • For 1 ≤ i ≤ n , let voters 4i − 3 and 4i − 2 rank the candidates Si a C − (Si ∪ {a, b}) b. • For 1 ≤ i ≤ n , let voters 4i − 1 and 4i rank the candidates b C − (Si ∪ {a, b}) a Si. 83 • Let voter 4n + 1 = n rank the candidates a b C − {a, b}.",
                "We observe that this fooling set has size (2m )n = 2n m , and that candidate a wins in each vector of votes in the fooling set (in every one of as pairwise elections, a is ranked higher than its opponent by 2n +1 = (n+1)/2 > n/2 votes).",
                "All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses.",
                "Let the first vote vector correspond to the vector (S1 1 , S1 2 , . . . , S1 n ), and let the second vote vector correspond to the vector (S2 1 , S2 2 , . . . , S2 n ).",
                "For some i, we must have S1 i = S2 i , so that either S1 i S2 i or S2 i S1 i .",
                "Without loss of generality, suppose S1 i S2 i , and let c be some candidate in S1 i − S2 i .",
                "Now, construct a new vote vector by taking votes 4i − 3 and 4i − 2 from the first vote vector, and the remaining votes from the second vote vector.",
                "In this newly constructed vote vector, a is ranked higher than c by only 2n −1 voters, for the following reason.",
                "Whereas voters 4i−3 and 4i − 2 do not rank c higher than a in the second vote vector (because c /∈ S2 i ), voters 4i − 3 and 4i − 2 do rank c higher than a in the first vote vector (because c ∈ S1 i ).",
                "Moreover, in every one of bs pairwise elections, b is ranked higher than its opponent by at least 2n voters.",
                "So, a has a lower maximin score than b, therefore a is not the winner in the newly constructed vote vector, and hence we have a correct fooling set.",
                "Theorem 10.",
                "The deterministic communication complexity of the <br>stv</br> rule is O(n(log m)2 ).",
                "Proof.",
                "Consider the following communication protocol.",
                "Let each voter first announce her most preferred candidate (O(n log m) communication).",
                "In the remaining rounds, we will keep track of each voters most preferred candidate among the remaining candidates, which will be enough to implement the rule.",
                "When candidate c is eliminated, let each of the voters whose most preferred candidate among the remaining candidates was c announce their most preferred candidate among the candidates remaining after cs elimination.",
                "If candidate c was the ith candidate to be eliminated (that is, there were m − i + 1 candidates remaining before cs elimination), it follows that at most n/(m − i + 1) voters had candidate c as their most preferred candidate among the remaining candidates, and thus the number of bits to be communicated after the elimination of the ith candidate is O((n/(m−i+1)) log m).7 Thus, the total communication in this communication protocol is O(n log m + m−1 i=1 (n/(m − i + 1)) log m).",
                "Of course, m−1 i=1 1/(m − i + 1) = m i=2 1/i, which is O(log m).",
                "Substituting into the previous expression, we find that the communication complexity is O(n(log m)2 ).",
                "Theorem 11.",
                "The nondeterministic communication complexity of the <br>stv</br> rule is Ω(n log m) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We omit this proof because of space constraint. 7 Actually, O((n/(m − i + 1)) log(m − i + 1)) is also correct, but it will not improve the bound.",
                "Theorem 12.",
                "The deterministic communication complexity of the approval rule is O(nm).",
                "Proof.",
                "Approving or disapproving of a candidate requires only one bit of information, so every voter can simply approve or disapprove of every candidate for a total communication of nm bits.",
                "Theorem 13.",
                "The nondeterministic communication complexity of the approval rule is Ω(nm) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We will exhibit a fooling set of size 2n m where m = m − 1 and n = (n − 1)/4.",
                "For every vector (S1, S2, . . . , Sn ) consisting of n subsets Si ⊆ C − {a}, let the following vector of votes be an element of the fooling set: • For 1 ≤ i ≤ n , let voters 4i − 3 and 4i − 2 approve Si ∪ {a}. • For 1 ≤ i ≤ n , let voters 4i − 1 and 4i approve C − (Si ∪ {a}). • Let voter 4n + 1 = n approve {a}.",
                "We observe that this fooling set has size (2m )n = 2n m , and that candidate a wins in each vector of votes in the fooling set (a is approved by 2n + 1 voters, whereas each other candidate is approved by only 2n voters).",
                "All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses.",
                "Let the first vote vector correspond to the vector (S1 1 , S1 2 , . . . , S1 n ), and let the second vote vector correspond to the vector (S2 1 , S2 2 , . . . , S2 n ).",
                "For some i, we must have S1 i = S2 i , so that either S1 i S2 i or S2 i S1 i .",
                "Without loss of generality, suppose S1 i S2 i , and let b be some candidate in S1 i − S2 i .",
                "Now, construct a new vote vector by taking votes 4i − 3 and 4i − 2 from the first vote vector, and the remaining votes from the second vote vector.",
                "In this newly constructed vote vector, a is still approved by 2n + 1 votes.",
                "However, b is approved by 2n + 2 votes, for the following reason.",
                "Whereas voters 4i−3 and 4i−2 do not approve b in the second vote vector (because b /∈ S2 i ), voters 4i − 3 and 4i − 2 do approve b in the first vote vector (because b ∈ S1 i ).",
                "It follows that bs score in the newly constructed vote vector is bs score in the second vote vector (2n ), plus two.",
                "So, a is not the winner in the newly constructed vote vector, and hence we have a correct fooling set.",
                "Interestingly, an Ω(m) lower bound can be obtained even for the problem of finding a candidate that is approved by more than one voter [20].",
                "Theorem 14.",
                "The deterministic communication complexity of the Condorcet rule is O(nm).",
                "Proof.",
                "We maintain a set of active candidates S which is initialized to C. At each stage, we choose two of the active candidates (say, the two candidates with the lowest indices), and we let each voter communicate which of the two candidates she prefers. (Such a stage requires the communication of n bits, one per voter.)",
                "The candidate preferred by fewer 84 voters (the loser of the pairwise election) is removed from S. (If the pairwise election is tied, both candidates are removed.)",
                "After at most m − 1 iterations, only one candidate is left (or zero candidates are left, in which case there is no Condorcet winner).",
                "Let a be the remaining candidate.",
                "To find out whether candidate a is the Condorcet winner, let each voter communicate, for every candidate c = a, whether she prefers a to c. (This requires the communication of at most n(m − 1) bits.)",
                "This is enough to establish whether a won each of its pairwise elections (and thus, whether a is the Condorcet winner).",
                "Theorem 15.",
                "The nondeterministic communication complexity of the Condorcet rule is Ω(nm) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We will exhibit a fooling set of size 2n m where m = m − 1 and n = (n − 1)/2.",
                "For every vector (S1, S2, . . . , Sn ) consisting of n subsets Si ⊆ C − {a}, let the following vector of votes be an element of the fooling set: • For 1 ≤ i ≤ n , let voter 2i − 1 rank the candidates Si a C − Si. • For 1 ≤ i ≤ n , let voter 2i rank the candidates C − Si a Si. • Let voter 2n +1 = n rank the candidates a C −{a}.",
                "We observe that this fooling set has size (2m )n = 2n m , and that candidate a wins in each vector of votes in the fooling set (a wins each of its pairwise elections by a single vote).",
                "All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses.",
                "Let the first vote vector correspond to the vector (S1 1 , S1 2 , . . . , S1 n ), and let the second vote vector correspond to the vector (S2 1 , S2 2 , . . . , S2 n ).",
                "For some i, we must have S1 i = S2 i , so that either S1 i S2 i or S2 i S1 i .",
                "Without loss of generality, suppose S1 i S2 i , and let b be some candidate in S1 i − S2 i .",
                "Now, construct a new vote vector by taking vote 2i − 1 from the first vote vector, and the remaining votes from the second vote vector.",
                "In this newly constructed vote vector, b wins its pairwise election against a by one vote (vote 2i − 1 ranks b above a in the newly constructed vote vector because b ∈ S1 i , whereas in the second vote vector vote 2i − 1 ranked a above b because b /∈ S2 i ).",
                "So, a is not the Condorcet winner in the newly constructed vote vector, and hence we have a correct fooling set.",
                "Theorem 16.",
                "The deterministic communication complexity of the cup rule is O(nm).",
                "Proof.",
                "Consider the following simple communication protocol.",
                "First, let all the voters communicate, for every one of the matchups in the first round, which of its two candidates they prefer.",
                "After this, the matchups for the second round are known, so let all the voters communicate which candidate they prefer in each matchup in the second round-etc.",
                "Because communicating which of two candidates is preferred requires only one bit per voter, and because there are only m − 1 matchups in total, this communication protocol requires O(nm) communication.",
                "Theorem 17.",
                "The nondeterministic communication complexity of the cup rule is Ω(nm) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We will exhibit a fooling set of size 2n m where m = (m − 1)/2 and n = (n − 7)/2.",
                "Given that m + 1 is a power of 2, so that one candidate gets a bye (that is, does not face an opponent) in the first round, let a be the candidate with the bye.",
                "Of the m first-round matchups, let lj denote the one (left) candidate in the jth matchup, and let rj be the other (right) candidate.",
                "Let L = {lj : 1 ≤ j ≤ m } and R = {rj : 1 ≤ j ≤ m }, so that C = L ∪ R ∪ {a}. . . . . . . . . . l r l r l r a m1 1 2 2 m Figure 1: The schedule for the cup rule used in the proof of Theorem 17.",
                "For every vector (S1, S2, . . . , Sn ) consisting of n subsets Si ⊆ R, let the following vector of votes be an element of the fooling set: • For 1 ≤ i ≤ n , let voter 2i − 1 rank the candidates Si L a R − Si. • For 1 ≤ i ≤ n , let voter 2i rank the candidates R − Si L a Si. • Let voters 2n +1 = n−6, 2n +2 = n−5, 2n +3 = n−4 rank the candidates L a R. • Let voters 2n + 4 = n − 3, 2n + 5 = n − 2 rank the candidates a r1 l1 r2 l2 . . . rm lm . • Let voters 2n + 6 = n − 1, 2n + 7 = n rank the candidates rm lm rm −1 lm −1 . . . r1 l1 a.",
                "We observe that this fooling set has size (2m )n = 2n m .",
                "Also, candidate a wins in each vector of votes in the fooling set, for the following reasons.",
                "Each candidate rj defeats its opponent lj in the first round. (For any 1 ≤ i ≤ n , the net effect of votes 2i − 1 and 2i on the pairwise election between rj and lj is zero; votes n − 6, n − 5, n − 4 prefer lj to rj, but votes n − 3, n − 2, n − 1, n all prefer rj to lj.)",
                "Moreover, a defeats every rj in their pairwise election. (For any 1 ≤ i ≤ n , the net effect of votes 2i − 1 and 2i on the pairwise election between a and rj is zero; votes n − 1, n prefer rj to a, but votes n − 6, n − 5, n − 4, n − 3, n − 2 all prefer a to rj.)",
                "It follows that a will defeat all the candidates that it faces.",
                "All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses.",
                "Let the first vote vector correspond to the vector 85 (S1 1 , S1 2 , . . . , S1 n ), and let the second vote vector correspond to the vector (S2 1 , S2 2 , . . . , S2 n ).",
                "For some i, we must have S1 i = S2 i , so that either S1 i S2 i or S2 i S1 i .",
                "Without loss of generality, suppose S1 i S2 i , and let rj be some candidate in S1 i − S2 i .",
                "Now, construct a new vote vector by taking vote 2i from the first vote vector, and the remaining votes from the second vote vector.",
                "We note that, whereas in the second vote vector vote 2i preferred rj to lj (because rj ∈ R−S2 i ), in the newly constructed vote vector this is no longer the case (because rj ∈ S1 i ).",
                "It follows that, whereas in the second vote vector, rj defeated lj in the first round by one vote, in the newly constructed vote vector, lj defeats rj in the first round.",
                "Thus, at least one lj advances to the second round after defeating its opponent rj.",
                "Now, we observe that in the newly constructed vote vector, any lk wins its pairwise election against any rq with q = k. This is because among the first 2n votes, at least n − 1 prefer lk to rq; votes n − 6, n − 5, n − 4 prefer lk to rq; and, because q = k, either votes n − 3, n − 2 prefer lk to rq (if k < q), or votes n − 1, n prefer lk to rq (if k > q).",
                "Thus, at least n + 4 = (n + 1)/2 > n/2 votes prefer lk to rq.",
                "Moreover, any lk wins its pairwise election against a.",
                "This is because only votes n − 3 and n − 2 prefer a to lk.",
                "It follows that, after the first round, any surviving candidate lk can only lose a matchup against another surviving lk , so that one of the lk must win the election.",
                "So, a is not the winner in the newly constructed vote vector, and hence we have a correct fooling set.",
                "Theorem 18.",
                "The deterministic communication complexity of the Bucklin rule is O(nm).",
                "Proof.",
                "Let l be the minimum integer for which there is a candidate who is ranked among the top l candidates by more than half the votes.",
                "We will do a binary search for l. At each point, we will have a lower bound lL which is smaller than l (initialized to 0), and an upper bound lH which is at least l (initialized to m).",
                "While lH − lL > 1, we continue by finding out whether (lH − l)/2 is smaller than l, after which we can update the bounds.",
                "To find out whether a number k is smaller than l, we determine every voters k most preferred candidates.",
                "Every voter can communicate which candidates are among her k most preferred candidates using m bits (for each candidate, indicate whether the candidate is among the top k or not), but because the binary search requires log m iterations, this gives us an upper bound of O((log m)nm), which is not strong enough.",
                "However, if lL < k < lH , and we already know a voters lL most preferred candidates, as well as her lH most preferred candidates, then the voter no longer needs to communicate whether the lL most preferred candidates are among her k most preferred candidates (because they must be), and she no longer needs to communicate whether the m−lH least preferred candidates are among her k most preferred candidates (because they cannot be).",
                "Thus the voter needs to communicate only m−lL −(m−lH ) = lH −lL bits in any given stage.",
                "Because each stage, lH − lL is (roughly) halved, each voter in total communicates only (roughly) m + m/2 + m/4 + . . . ≤ 2m bits.",
                "Theorem 19.",
                "The nondeterministic communication complexity of the Bucklin rule is Ω(nm) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We will exhibit a fooling set of size 2n m where m = (m−1)/2 and n = n/2.",
                "We write the set of candidates as the following disjoint union: C = {a} ∪ L ∪ R where L = {l1, l2, . . . , lm } and R = {r1, r2, . . . , rm }.",
                "For any subset S ⊆ {1, 2, . . . , m }, let L(S) = {li : i ∈ S} and let R(S) = {ri : i ∈ S}.",
                "For every vector (S1, S2, . . . , Sn ) consisting of n sets Si ⊆ {1, 2, . . . , m }, let the following vector of votes be an element of the fooling set: • For 1 ≤ i ≤ n , let voter 2i − 1 rank the candidates L(Si) R − R(Si) a L − L(Si) R(Si). • For 1 ≤ i ≤ n , let voter 2i rank the candidates L − L(Si) R(Si) a L(Si) R − R(Si).",
                "We observe that this fooling set has size (2m )n = 2n m , and that candidate a wins in each vector of votes in the fooling set, for the following reason.",
                "Each candidate in C − {a} is ranked among the top m candidates by exactly half the voters (which is not enough to win).",
                "Thus, we need to look at the voters top m +1 candidates, and a is ranked m +1th by all voters.",
                "All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses.",
                "Let the first vote vector correspond to the vector (S1 1 , S1 2 , . . . , S1 n ), and let the second vote vector correspond to the vector (S2 1 , S2 2 , . . . , S2 n ).",
                "For some i, we must have S1 i = S2 i , so that either S1 i S2 i or S2 i S1 i .",
                "Without loss of generality, suppose S1 i S2 i , and let j be some integer in S1 i − S2 i .",
                "Now, construct a new vote vector by taking vote 2i − 1 from the first vote vector, and the remaining votes from the second vote vector.",
                "In this newly constructed vote vector, a is still ranked m + 1th by all votes.",
                "However, lj is ranked among the top m candidates by n + 1 = n/2 + 1 votes.",
                "This is because whereas vote 2i − 1 does not rank lj among the top m candidates in the second vote vector (because j /∈ S2 i , we have lj /∈ L(S2 i )), vote 2i − 1 does rank lj among the top m candidates in the first vote vector (because j ∈ S1 i , we have lj ∈ L(S1 i )).",
                "So, a is not the winner in the newly constructed vote vector, and hence we have a correct fooling set.",
                "Theorem 20.",
                "The nondeterministic communication complexity of the ranked pairs rule is Ω(nm log m) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We omit this proof because of space constraint. 5.",
                "DISCUSSION One key obstacle to using voting for preference aggregation is the communication burden that an election places on the voters.",
                "By lowering this burden, it may become feasible to conduct more elections over more issues.",
                "In the limit, this could lead to a shift from representational government to a system in which most issues are decided by referenda-a veritable e-democracy.",
                "In this paper, we analyzed the communication complexity of the common voting rules.",
                "Knowing which voting rules require little communication is especially important when the issue to be voted on is of low enough importance that the following is true: the parties involved are willing to accept a rule that tends 86 to produce outcomes that are slightly less representative of the voters preferences, if this rule reduces the communication burden on the voters significantly.",
                "The following table summarizes the results we obtained.",
                "Rule Lower bound Upper bound plurality Ω(n log m) O(n log m) plurality w/ runoff Ω(n log m) O(n log m) <br>stv</br> Ω(n log m) O(n(log m)2) Condorcet Ω(nm) O(nm) approval Ω(nm) O(nm) Bucklin Ω(nm) O(nm) cup Ω(nm) O(nm) maximin Ω(nm) O(nm) Borda Ω(nm log m) O(nm log m) Copeland Ω(nm log m) O(nm log m) ranked pairs Ω(nm log m) O(nm log m) Communication complexity of voting rules, sorted from low to high.",
                "All of the upper bounds are deterministic (with the exception of maximin, for which the best deterministic upper bound we proved is O(nm log m)).",
                "All of the lower bounds hold even for nondeterministic communication and even just for determining whether a given candidate a is the winner.",
                "One area of future research is to study what happens when we restrict our attention to communication protocols that do not reveal any strategically useful information.",
                "This restriction may invalidate some of the upper bounds that we derived using multistage communication protocols.",
                "Also, all of our bounds are worst-case bounds.",
                "It may be possible to outperform these bounds when the distribution of votes has additional structure.",
                "When deciding which voting rule to use for an election, there are many considerations to take into account.",
                "The voting rules that we studied in this paper are the most common ones that have survived the test of time.",
                "One way to select among these rules is to consider recent results on complexity.",
                "The table above shows that from a communication complexity perspective, plurality, plurality with runoff, and <br>stv</br> are preferable.",
                "However, plurality has the undesirable property that it is computationally easy to manipulate by voting strategically [3, 7].",
                "Plurality with runoff is NP-hard to manipulate by a coalition of weighted voters, or by an individual that faces correlated uncertainty about the others votes [7, 6].",
                "<br>stv</br> is NP-hard to manipulate in those settings as well [7], but also by an individual with perfect knowledge of the others votes (when the number of candidates is unbounded) [2].",
                "Therefore, <br>stv</br> is more robust, although it may require slightly more worst-case communication as per the table above.",
                "Yet other selection criteria are the computational complexity of determining whether enough information has been elicited to declare a winner, and that of determining the optimal sequence of queries [8]. 6.",
                "REFERENCES [1] Lawrence Ausubel and Paul Milgrom.",
                "Ascending auctions with package bidding.",
                "Frontiers of Theoretical Economics, 1, 2002.",
                "No. 1, Article 1. [2] John Bartholdi, III and James Orlin.",
                "Single transferable vote resists strategic voting.",
                "Social Choice and Welfare, 8(4):341-354, 1991. [3] John Bartholdi, III, Craig Tovey, and Michael Trick.",
                "The computational difficulty of manipulating an election.",
                "Social Choice and Welfare, 6(3):227-241, 1989. [4] Avrim Blum, Jeffrey Jackson, Tuomas Sandholm, and Martin Zinkevich.",
                "Preference elicitation and query learning.",
                "Journal of Machine Learning Research, 5:649-667, 2004. [5] Wolfram Conen and Tuomas Sandholm.",
                "Preference elicitation in combinatorial auctions: Extended abstract.",
                "In Proceedings of the ACM Conference on Electronic Commerce (ACM-EC), pages 256-259, 2001. [6] Vincent Conitzer, Jerome Lang, and Tuomas Sandholm.",
                "How many candidates are needed to make elections hard to manipulate?",
                "In Theoretical Aspects of Rationality and Knowledge (TARK), pages 201-214, 2003. [7] Vincent Conitzer and Tuomas Sandholm.",
                "Complexity of manipulating elections with few candidates.",
                "In Proceedings of the National Conference on Artificial Intelligence (AAAI), pages 314-319, 2002. [8] Vincent Conitzer and Tuomas Sandholm.",
                "Vote elicitation: Complexity and strategy-proofness.",
                "In Proceedings of the National Conference on Artificial Intelligence (AAAI), pages 392-397, 2002. [9] Sven de Vries, James Schummer, and Rakesh V. Vohra.",
                "On ascending auctions for heterogeneous objects, 2003.",
                "Draft. [10] Allan Gibbard.",
                "Manipulation of voting schemes.",
                "Econometrica, 41:587-602, 1973. [11] Benoit Hudson and Tuomas Sandholm.",
                "Effectiveness of query types and policies for preference elicitation in combinatorial auctions.",
                "In International Conference on Autonomous Agents and Multi-Agent Systems (AAMAS), pages 386-393, 2004. [12] E Kushilevitz and N Nisan.",
                "Communication Complexity.",
                "Cambridge University Press, 1997. [13] Sebasti´en Lahaie and David Parkes.",
                "Applying learning algorithms to preference elicitation.",
                "In Proceedings of the ACM Conference on Electronic Commerce, 2004. [14] Noam Nisan and Ilya Segal.",
                "The communication requirements of efficient allocations and supporting prices.",
                "Journal of Economic Theory, 2005.",
                "Forthcoming. [15] David Parkes. iBundle: An efficient ascending price bundle auction.",
                "In Proceedings of the ACM Conference on Electronic Commerce (ACM-EC), pages 148-157, 1999. [16] Tuomas Sandholm.",
                "An implementation of the contract net protocol based on marginal cost calculations.",
                "In Proceedings of the National Conference on Artificial Intelligence (AAAI), pages 256-262, 1993. [17] Tuomas Sandholm and Craig Boutilier.",
                "Preference elicitation in combinatorial auctions.",
                "In Peter Cramton, Yoav Shoham, and Richard Steinberg, editors, Combinatorial Auctions, chapter 10.",
                "MIT Press, 2005. [18] Paolo Santi, Vincent Conitzer, and Tuomas Sandholm.",
                "Towards a characterization of polynomial preference elicitation with value queries in combinatorial auctions.",
                "In Conference on Learning Theory (COLT), pages 1-16, 2004. [19] Mark Satterthwaite.",
                "Strategy-proofness and Arrows conditions: existence and correspondence theorems for voting procedures and social welfare functions.",
                "Journal of Economic Theory, 10:187-217, 1975. [20] Ilya Segal.",
                "The communication requirements of social choice rules and supporting budget sets, 2004.",
                "Draft.",
                "Presented at the DIMACS Workshop on Computational Issues in Auction Design, Rutgers University, New Jersey, USA. [21] Peter Wurman and Michael Wellman.",
                "AkBA: A progressive, anonymous-price combinatorial auction.",
                "In Proceedings of the ACM Conference on Electronic Commerce (ACM-EC), pages 21-29, 2000. [22] A. C. Yao.",
                "Some complexity questions related to distributed computing.",
                "In Proceedings of the 11th ACM symposium on theory of computing (STOC), pages 209-213, 1979. [23] Martin Zinkevich, Avrim Blum, and Tuomas Sandholm.",
                "On polynomial-time preference elicitation with value queries.",
                "In Proceedings of the ACM Conference on Electronic Commerce (ACM-EC), pages 176-185, 2003. 87"
            ],
            "original_annotated_samples": [
                "The rules (sorted by their communication complexity from low to high) are plurality, plurality with runoff, single transferable vote (<br>stv</br>), Condorcet, approval, Bucklin, cup, maximin, Borda, Copeland, and ranked pairs.",
                "The bounds match for all voting rules except <br>stv</br> and maximin.",
                "However, for some rules (such as plurality with runoff, <br>stv</br> and cup) there is a straightforward multistage communication protocol that, with some analysis, can be shown to significantly outperform the immediate communication of all (potentially relevant) information.",
                "There are two exceptions: <br>stv</br>, for which our upper and lower bounds are apart by a factor log m; and maximin, for which our best deterministic upper bound is also a factor log m above the (nondeterministic) lower bound, although we give a nondeterministic upper bound that matches the lower bound. 2. REVIEW OF VOTING RULES In this section, we review the common voting rules that we study in this paper.",
                "The plurality rule is the scoring rule with α = 1, 0, . . . , 0 . • single transferable vote (<br>stv</br>)."
            ],
            "translated_annotated_samples": [
                "Las reglas (ordenadas por su complejidad de comunicación de baja a alta) son pluralidad, pluralidad con segunda vuelta, <br>voto único transferible</br> (STV), Condorcet, aprobación, Bucklin, taza, maximin, Borda, Copeland y pares clasificados.",
                "Los límites coinciden para todas las reglas de votación excepto <br>STV</br> y maximin.",
                "Sin embargo, para algunas reglas (como la pluralidad con segunda vuelta, <br>STV</br> y taza) existe un protocolo de comunicación multietapa directo que, con un análisis detallado, se puede demostrar que supera significativamente la comunicación inmediata de toda la información (potencialmente relevante).",
                "Hay dos excepciones: <br>STV</br>, para el cual nuestros límites superiores e inferiores difieren en un factor log m; y maximin, para el cual nuestro mejor límite superior determinístico también es un factor log m por encima del límite inferior (no determinístico), aunque proporcionamos un límite superior no determinístico que coincide con el límite inferior. 2. REVISIÓN DE LAS REGLAS DE VOTACIÓN En esta sección, revisamos las reglas de votación comunes que estudiamos en este documento.",
                "La regla de la pluralidad es la regla de puntuación con α = 1, 0, . . . , 0. • <br>voto único transferible</br> (STV)."
            ],
            "translated_text": "Determinamos la complejidad de comunicación de las reglas de votación comunes. Las reglas (ordenadas por su complejidad de comunicación de baja a alta) son pluralidad, pluralidad con segunda vuelta, <br>voto único transferible</br> (STV), Condorcet, aprobación, Bucklin, taza, maximin, Borda, Copeland y pares clasificados. Para cada regla, primero proporcionamos un protocolo de comunicación determinista y un límite superior en la cantidad de bits comunicados en él; luego, damos un límite inferior en los requisitos de comunicación (incluso los no deterministas) de la regla de votación. Los límites coinciden para todas las reglas de votación excepto <br>STV</br> y maximin. Categorías y Descriptores de Asignaturas F.2 [Teoría de la Computación]: Análisis de Algoritmos y Complejidad de Problemas; J.4 [Aplicaciones Informáticas]: Ciencias Sociales y del Comportamiento-Economía Términos Generales Algoritmos, Economía, Teoría 1. INTRODUCCIÓN Un factor clave en la viabilidad de cualquier regla de agregación de preferencias es su carga de comunicación. Para agregar con éxito las preferencias de los agentes, generalmente no es necesario que todos los agentes informen toda su información de preferencias. Los protocolos inteligentes que obtienen parcial y secuencialmente las preferencias de los agentes tienen el potencial de reducir drásticamente la comunicación requerida. Esto tiene al menos las siguientes ventajas: • Puede hacer factible la agregación de preferencias en entornos donde la cantidad total de información de preferencias es demasiado grande para comunicar. • Incluso cuando comunicar toda la información de preferencias es factible, reducir los requisitos de comunicación disminuye la carga impuesta a los agentes. Esto es especialmente cierto cuando los agentes, en lugar de conocer todas sus preferencias de antemano, necesitan invertir esfuerzo (como cálculos o recopilación de información) para determinar sus preferencias. • Preserva (parte de) la privacidad de los agentes. La mayor parte del trabajo sobre la reducción de la carga de comunicación en la agregación de preferencias se ha centrado en entornos de asignación de recursos como subastas combinatorias, en las que un subastador subasta un número de artículos (posiblemente distintos) en un solo evento. Debido a que en una subasta combinatoria, los postores pueden tener valoraciones separadas para cada uno de un número exponencial de posibles paquetes de artículos, este es un escenario en el que reducir la carga de comunicación es especialmente crucial. Esto se puede lograr complementando al subastador con un provocador que elicitara incrementalmente partes de las preferencias de los postores según sea necesario, basándose en lo que los postores han revelado sobre sus preferencias hasta el momento, como sugieren Conen y Sandholm [5]. Por ejemplo, el solicitante puede preguntar por el valor de un postor para un paquete específico (consultas de valor), cuál de dos paquetes prefiere el postor (consultas de orden), qué paquete clasifica en la posición k o cuál es la posición de un paquete dado (consultas de clasificación), qué paquete compraría dado un vector particular de precios (consultas de demanda), etc., hasta que se pueda determinar (al menos) la asignación final. Experimentalmente, esto produce a drástico ahorro en la revelación de preferencias [11]. Además, si las funciones de valoración de los agentes provienen de ciertas subclases naturales, el problema de la obtención de información puede resolverse utilizando solo un número polinomial de consultas incluso en el peor de los casos [23, 4, 13, 18, 14]. Para una revisión de la obtención de preferencias en subastas combinatorias, consulte [17]. Las subastas combinatorias ascendentes son una forma especial conocida de obtención de preferencias, donde el encuestador realiza consultas de demanda con precios crecientes [15, 21, 1, 9]. Finalmente, los problemas de asignación de recursos 78 también han sido estudiados desde el punto de vista de la complejidad de la comunicación, derivando así límites inferiores sobre la comunicación requerida. Por ejemplo, Nisan y Segal muestran que se requiere comunicación exponencial incluso para obtener un excedente mayor al obtenido al subastar todos los objetos como un único paquete [14]. Segal también estudia reglas de elección social en general, y muestra que para una gran clase de reglas de elección social, los conjuntos de presupuesto de apoyo deben ser revelados de tal manera que si cada agente prefiere el mismo resultado en su conjunto de presupuesto, esto demuestra la optimalidad de ese resultado. Segal luego utiliza esta caracterización para demostrar límites en la comunicación requerida en la asignación de recursos, así como en entornos de emparejamiento [20]. En este documento, nos enfocaremos en los requisitos de comunicación de una subclase generalmente aplicable de reglas de elección social, comúnmente conocidas como reglas de votación. En un entorno de votación, hay un conjunto de resultados de candidatos sobre los cuales los votantes expresan sus preferencias al enviar un voto (normalmente, una clasificación de los candidatos), y el ganador (es decir, el resultado elegido) se determina en función de estos votos. La comunicación requerida por las reglas de votación puede ser grande ya sea porque el número de votantes es grande (como, por ejemplo, en elecciones nacionales), o porque el número de candidatos es grande (por ejemplo, los agentes pueden votar sobre asignaciones de un número de recursos), o ambos. El trabajo previo [8] ha estudiado la obtención de información en votaciones, analizando qué tan difícil es computacionalmente decidir si se puede determinar un ganador con la información obtenida hasta el momento, así como qué tan difícil es encontrar la secuencia óptima de preguntas dadas sospechas perfectas sobre las preferencias de los votantes. Además, ese artículo discute cuestiones estratégicas (teóricas de juegos) introducidas por la obtención de información. Por el contrario, en este artículo nos preocupamos por el número máximo de bits que deben comunicarse para ejecutar una regla de votación dada, cuando no se conoce de antemano las preferencias de los votantes. Determinamos la complejidad de comunicación de las reglas de votación comunes. Para cada regla, primero damos una cota superior en la complejidad de comunicación (determinística) proporcionando un protocolo de comunicación para ella y analizando cuántos bits necesitan ser transmitidos en este protocolo. (Los resultados de Segal [20] no se aplican a la mayoría de las reglas de votación porque la mayoría de las reglas de votación no son intersección-monótonas (o incluso monótonas).) Para muchas de las reglas de votación bajo estudio, resulta que no se puede hacer mejor que simplemente permitir que cada votante comunique inmediatamente toda su información (potencialmente relevante). Sin embargo, para algunas reglas (como la pluralidad con segunda vuelta, <br>STV</br> y taza) existe un protocolo de comunicación multietapa directo que, con un análisis detallado, se puede demostrar que supera significativamente la comunicación inmediata de toda la información (potencialmente relevante). Finalmente, para algunas reglas (como las reglas de Condorcet y Bucklin), necesitamos introducir un protocolo de comunicación más complejo para lograr el mejor límite superior posible. Para dos de las reglas que estudiamos que son intersección-monótonas, a saber, las reglas de aprobación y Condorcet, los resultados de Segal de hecho pueden ser utilizados para dar pruebas alternativas de nuestros límites inferiores. Solo proporcionamos pruebas directas para estas reglas aquí porque 1) estas pruebas directas son de las más fáciles en este documento, 2) las pruebas alternativas son no triviales incluso dados los resultados de Segal, y 3) se aplica una restricción de espacio. Sin embargo, esperamos incluir también las pruebas alternativas en una versión posterior. Después de obtener los límites superiores, demostramos que son ajustados al proporcionar límites inferiores coincidentes en la complejidad de comunicación (incluso la no determinista) de cada regla de votación. Hay dos excepciones: <br>STV</br>, para el cual nuestros límites superiores e inferiores difieren en un factor log m; y maximin, para el cual nuestro mejor límite superior determinístico también es un factor log m por encima del límite inferior (no determinístico), aunque proporcionamos un límite superior no determinístico que coincide con el límite inferior. 2. REVISIÓN DE LAS REGLAS DE VOTACIÓN En esta sección, revisamos las reglas de votación comunes que estudiamos en este documento. Una regla de votación es una función que asigna un vector de votos de los n votantes (es decir, preferencias sobre candidatos) a uno de los m candidatos (el ganador) en el conjunto de candidatos C. En algunos casos (como la regla de Condorcet), la regla también puede declarar que no existe un ganador. No nos preocupamos por lo que sucede en caso de un empate entre candidatos (nuestros límites inferiores se mantienen independientemente de cómo se resuelvan los empates, y los protocolos de comunicación utilizados para nuestros límites superiores no intentan romper los empates). Todas las reglas que estudiamos son reglas basadas en el rango, lo que significa que un voto se define como un ordenamiento de los candidatos (con la excepción de la regla de la pluralidad, para la cual un voto es un único candidato, y la regla de aprobación, para la cual un voto es un subconjunto de los candidatos). Consideraremos las siguientes reglas de votación. (Para reglas que definen una puntuación, el candidato con la puntuación más alta gana.) • reglas de puntuación. Sea α = α1, . . . , αm un vector de enteros tal que α1 ≥ α2 . . . ≥ αm. Para cada votante, un candidato recibe α1 puntos si es clasificado en primer lugar por el votante, α2 si es clasificado en segundo lugar, etc. La puntuación sα de un candidato es el número total de puntos que recibe el candidato. La regla de Borda es la regla de puntuación con α = m−1, m−2, . . . , 0. La regla de la pluralidad es la regla de puntuación con α = 1, 0, . . . , 0. • <br>voto único transferible</br> (STV). ",
            "candidates": [],
            "error": [
                [
                    "voto único transferible",
                    "STV",
                    "STV",
                    "STV",
                    "voto único transferible"
                ]
            ]
        },
        "maximin": {
            "translated_key": "maximin",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Communication Complexity of Common Voting Rules∗ Vincent Conitzer Carnegie Mellon University 5000 Forbes Avenue Pittsburgh, PA 15213, USA conitzer@cs.cmu.edu Tuomas Sandholm Carnegie Mellon University 5000 Forbes Avenue Pittsburgh, PA 15213, USA sandholm@cs.cmu.edu ABSTRACT We determine the communication complexity of the common voting rules.",
                "The rules (sorted by their communication complexity from low to high) are plurality, plurality with runoff, single transferable vote (STV), Condorcet, approval, Bucklin, cup, <br>maximin</br>, Borda, Copeland, and ranked pairs.",
                "For each rule, we first give a deterministic communication protocol and an upper bound on the number of bits communicated in it; then, we give a lower bound on (even the nondeterministic) communication requirements of the voting rule.",
                "The bounds match for all voting rules except STV and <br>maximin</br>.",
                "Categories and Subject Descriptors F.2 [Theory of Computation]: Analysis of Algorithms and Problem Complexity; J.4 [Computer Applications]: Social and Behavioral Sciences-Economics General Terms Algorithms, Economics, Theory 1.",
                "INTRODUCTION One key factor in the practicality of any preference aggregation rule is its communication burden.",
                "To successfully aggregate the agents preferences, it is usually not necessary for all the agents to report all of their preference information.",
                "Clever protocols that elicit the agents preferences partially and sequentially have the potential to dramatically reduce the required communication.",
                "This has at least the following advantages: • It can make preference aggregation feasible in settings where the total amount of preference information is too large to communicate. • Even when communicating all the preference information is feasible, reducing the communication requirements lessens the burden placed on the agents.",
                "This is especially true when the agents, rather than knowing all their preferences in advance, need to invest effort (such as computation or information gathering) to determine their preferences [16]. • It preserves (some of) the agents privacy.",
                "Most of the work on reducing the communication burden in preference aggregation has focused on resource allocation settings such as combinatorial auctions, in which an auctioneer auctions off a number of (possibly distinct) items in a single event.",
                "Because in a combinatorial auction, bidders can have separate valuations for each of an exponential number of possible bundles of items, this is a setting in which reducing the communication burden is especially crucial.",
                "This can be accomplished by supplementing the auctioneer with an elicitor that incrementally elicits parts of the bidders preferences on an as-needed basis, based on what the bidders have revealed about their preferences so far, as suggested by Conen and Sandholm [5].",
                "For example, the elicitor can ask for a bidders value for a specific bundle (value queries), which of two bundles the bidder prefers (order queries), which bundle he ranks kth or what the rank of a given bundle is (rank queries), which bundle he would purchase given a particular vector of prices (demand queries), etc.-until (at least) the final allocation can be determined.",
                "Experimentally, this yields drastic savings in preference revelation [11].",
                "Furthermore, if the agents valuation functions are drawn from certain natural subclasses, the elicitation problem can be solved using only polynomially many queries even in the worst case [23, 4, 13, 18, 14].",
                "For a review of preference elicitation in combinatorial auctions, see [17].",
                "Ascending combinatorial auctions are a well-known special form of preference elicitation, where the elicitor asks demand queries with increasing prices [15, 21, 1, 9].",
                "Finally, resource 78 allocation problems have also been studied from a communication complexity viewpoint, thereby deriving lower bounds on the required communication.",
                "For example, Nisan and Segal show that exponential communication is required even to obtain a surplus greater than that obtained by auctioning off all objects as a single bundle [14].",
                "Segal also studies social choice rules in general, and shows that for a large class of social choice rules, supporting budget sets must be revealed such that if every agent prefers the same outcome in her budget set, this proves the optimality of that outcome.",
                "Segal then uses this characterization to prove bounds on the communication required in resource allocation as well as matching settings [20].",
                "In this paper, we will focus on the communication requirements of a generally applicable subclass of social choice rules, commonly known as voting rules.",
                "In a voting setting, there is a set of candidate outcomes over which the voters express their preferences by submitting a vote (typically, a ranking of the candidates), and the winner (that is, the chosen outcome) is determined based on these votes.",
                "The communication required by voting rules can be large either because the number of voters is large (such as, for example, in national elections), or because the number of candidates is large (for example, the agents can vote over allocations of a number of resources), or both.",
                "Prior work [8] has studied elicitation in voting, studying how computationally hard it is to decide whether a winner can be determined with the information elicited so far, as well as how hard it is to find the optimal sequence of queries given perfect suspicions about the voters preferences.",
                "In addition, that paper discusses strategic (game-theoretic) issues introduced by elicitation.",
                "In contrast, in this paper, we are concerned with the worst-case number of bits that must be communicated to execute a given voting rule, when nothing is known in advance about the voters preferences.",
                "We determine the communication complexity of the common voting rules.",
                "For each rule, we first give an upper bound on the (deterministic) communication complexity by providing a communication protocol for it and analyzing how many bits need to be transmitted in this protocol. (Segals results [20] do not apply to most voting rules because most voting rules are not intersectionmonotonic (or even monotonic).1 ) For many of the voting rules under study, it turns out that one cannot do better than simply letting each voter immediately communicate all her (potentially relevant) information.",
                "However, for some rules (such as plurality with runoff, STV and cup) there is a straightforward multistage communication protocol that, with some analysis, can be shown to significantly outperform the immediate communication of all (potentially relevant) information.",
                "Finally, for some rules (such as the Condorcet and Bucklin rules), we need to introduce a more complex communication protocol to achieve the best possible upper 1 For two of the rules that we study that are intersectionmonotonic, namely the approval and Condorcet rules, Segals results can in fact be used to give alternative proofs of our lower bounds.",
                "We only give direct proofs for these rules here because 1) these direct proofs are among the easier ones in this paper, 2) the alternative proofs are nontrivial even given Segals results, and 3) a space constraint applies.",
                "However, we hope to also include the alternative proofs in a later version. bound.",
                "After obtaining the upper bounds, we show that they are tight by giving matching lower bounds on (even the nondeterministic) communication complexity of each voting rule.",
                "There are two exceptions: STV, for which our upper and lower bounds are apart by a factor log m; and <br>maximin</br>, for which our best deterministic upper bound is also a factor log m above the (nondeterministic) lower bound, although we give a nondeterministic upper bound that matches the lower bound. 2. REVIEW OF VOTING RULES In this section, we review the common voting rules that we study in this paper.",
                "A voting rule2 is a function mapping a vector of the n voters votes (i.e. preferences over candidates) to one of the m candidates (the winner) in the candidate set C. In some cases (such as the Condorcet rule), the rule may also declare that no winner exists.",
                "We do not concern ourselves with what happens in case of a tie between candidates (our lower bounds hold regardless of how ties are broken, and the communication protocols used for our upper bounds do not attempt to break the ties).",
                "All of the rules that we study are rank-based rules, which means that a vote is defined as an ordering of the candidates (with the exception of the plurality rule, for which a vote is a single candidate, and the approval rule, for which a vote is a subset of the candidates).",
                "We will consider the following voting rules. (For rules that define a score, the candidate with the highest score wins.) • scoring rules.",
                "Let α = α1, . . . , αm be a vector of integers such that α1 ≥ α2 . . . ≥ αm.",
                "For each voter, a candidate receives α1 points if it is ranked first by the voter, α2 if it is ranked second etc.",
                "The score sα of a candidate is the total number of points the candidate receives.",
                "The Borda rule is the scoring rule with α = m−1, m−2, . . . , 0 .",
                "The plurality rule is the scoring rule with α = 1, 0, . . . , 0 . • single transferable vote (STV).",
                "The rule proceeds through a series of m − 1 rounds.",
                "In each round, the candidate with the lowest plurality score (that is, the least number of voters ranking it first among the remaining candidates) is eliminated (and each of the votes for that candidate transfer to the next remaining candidate in the order given in that vote).",
                "The winner is the last remaining candidate. • plurality with run-off.",
                "In this rule, a first round eliminates all candidates except the two with the highest plurality scores.",
                "Votes are transferred to these as in the STV rule, and a second round determines the winner from these two. • approval.",
                "Each voter labels each candidate as either approved or disapproved.",
                "The candidate approved by the greatest number of voters wins. • Condorcet.",
                "For any two candidates i and j, let N(i, j) be the number of voters who prefer i to j.",
                "If there is a candidate i that is preferred to any other candidate by a majority of the voters (that is, N(i, j) > N(j, i) for all j = i-that is, i wins every pairwise election), then candidate i wins. 2 The term voting protocol is often used to describe the same concept, but we seek to draw a sharp distinction between the rule mapping preferences to outcomes, and the communication/elicitation protocol used to implement this rule. 79 • <br>maximin</br> (aka.",
                "Simpson).",
                "The <br>maximin</br> score of i is s(i) = minj=i N(i, j)-that is, is worst performance in a pairwise election.",
                "The candidate with the highest <br>maximin</br> score wins. • Copeland.",
                "For any two distinct candidates i and j, let C(i, j) = 1 if N(i, j) > N(j, i), C(i, j) = 1/2 if N(i, j) = N(j, i) and C(i, j) = 0 if N(i, j) < N(j, i).",
                "The Copeland score of candidate i is s(i) = j=i C(i, j). • cup (sequential binary comparisons).",
                "The cup rule is defined by a balanced3 binary tree T with one leaf per candidate, and an assignment of candidates to leaves (each leaf gets one candidate).",
                "Each non-leaf node is assigned the winner of the pairwise election of the nodes children; the candidate assigned to the root wins. • Bucklin.",
                "For any candidate i and integer l, let B(i, l) be the number of voters that rank candidate i among the top l candidates.",
                "The winner is arg mini(min{l : B(i, l) > n/2}).",
                "That is, if we say that a voter approves her top l candidates, then we repeatedly increase l by 1 until some candidate is approved by more than half the voters, and this candidate is the winner. • ranked pairs.",
                "This rule determines an order on all the candidates, and the winner is the candidate at the top of this order.",
                "Sort all ordered pairs of candidates (i, j) by N(i, j), the number of voters who prefer i to j.",
                "Starting with the pair (i, j) with the highest N(i, j), we lock in the result of their pairwise election (i j).",
                "Then, we move to the next pair, and we lock the result of their pairwise election.",
                "We continue to lock every pairwise result that does not contradict the ordering established so far.",
                "We emphasize that these definitions of voting rules do not concern themselves with how the votes are elicited from the voters; all the voting rules, including those that are suggestively defined in terms of rounds, are in actuality just functions mapping the vector of all the voters votes to a winner.",
                "Nevertheless, there are always many different ways of eliciting the votes (or the relevant parts thereof) from the voters.",
                "For example, in the plurality with runoff rule, one way of eliciting the votes is to ask every voter to declare her entire ordering of the candidates up front.",
                "Alternatively, we can first ask every voter to declare only her most preferred candidate; then, we will know the two candidates in the runoff, and we can ask every voter which of these two candidates she prefers.",
                "Thus, we distinguish between the voting rule (the mapping from vectors of votes to outcomes) and the communication protocol (which determines how the relevant parts of the votes are actually elicited from the voters).",
                "The goal of this paper is to give efficient communication protocols for the voting rules just defined, and to prove that there do not exist any more efficient communication protocols.",
                "It is interesting to note that the choice of the communication protocol may affect the strategic behavior of the voters.",
                "Multistage communication protocols may reveal to the voters some information about how the other voters are voting (for example, in the two-stage communication protocol just given for plurality with runoff, in the second stage voters 3 Balanced means that the difference in depth between two leaves can be at most one. will know which two candidates have the highest plurality scores).",
                "In general, when the voters receive such information, it may give them incentives to vote differently than they would have in a single-stage communication protocol in which all voters declare their entire votes simultaneously.",
                "Of course, even the single-stage communication protocol is not strategy-proof4 for any reasonable voting rule, by the Gibbard-Satterthwaite theorem [10, 19].",
                "However, this does not mean that we should not be concerned about adding even more opportunities for strategic voting.",
                "In fact, many of the communication protocols introduced in this paper do introduce additional opportunities for strategic voting, but we do not have the space to discuss this here. (In prior work [8], we do give an example where an elicitation protocol for the approval voting rule introduces strategic voting, and give principles for designing elicitation protocols that do not introduce strategic problems.)",
                "Now that we have reviewed voting rules, we move on to a brief review of communication complexity theory. 3. REVIEW OF SOME COMMUNICATION COMPLEXITY THEORY In this section, we review the basic model of a communication problem and the lower-bounding technique of constructing a fooling set. (The basic model of a communication problem is due to Yao [22]; for an overview see Kushilevitz and Nisan [12].)",
                "Each player 1 ≤ i ≤ n knows (only) input xi.",
                "Together, they seek to compute f(x1, x2, . . . , xn).",
                "In a deterministic protocol for computing f, in each stage, one of the players announces (to all other players) a bit of information based on her own input and the bits announced so far.",
                "Eventually, the communication terminates and all players know f(x1, x2, . . . , xn).",
                "The goal is to minimize the worst-case (over all input vectors) number of bits sent.",
                "The deterministic communication complexity of a problem is the worstcase number of bits sent in the best (correct) deterministic protocol for it.",
                "In a nondeterministic protocol, the next bit to be sent can be chosen nondeterministically.",
                "For the purposes of this paper, we will consider a nondeterministic protocol correct if for every input vector, there is some sequence of nondeterministic choices the players can make so that the players know the value of f when the protocol terminates.",
                "The nondeterministic communication complexity of a problem is the worst-case number of bits sent in the best (correct) nondeterministic protocol for it.",
                "We are now ready to give the definition of a fooling set.",
                "Definition 1.",
                "A fooling set is a set of input vectors {(x1 1, x1 2, . . . , x1 n), (x2 1, x2 2, . . . , x2 n), . . . , (xk 1 , xk 2 , . . . , xk n) such that for any i, f(xi 1, xi 2, . . . , xi n) = f0 for some constant f0, but for any i = j, there exists some vector (r1, r2, . . . , rn) ∈ {i, j}n such that f(xr1 1 , xr2 2 , . . . , xrn n ) = f0. (That is, we can mix the inputs from the two input vectors to obtain a vector with a different function value.)",
                "It is known that if a fooling set of size k exists, then log k is a lower bound on the communication complexity (even the nondeterministic communication complexity) [12]. 4 A strategy-proof protocol is one in which it is in the players best interest to report their preferences truthfully. 80 For the purposes of this paper, f is the voting rule that maps the votes to the winning candidate, and xi is voter is vote (the information that the voting rule would require from the voter if there were no possibility of multistage communication-i.e. the most preferred candidate (plurality), the approved candidates (approval), or the ranking of all the candidates (all other protocols)).",
                "However, when we derive our lower bounds, f will only signify whether a distinguished candidate a wins. (That is, f is 1 if a wins, and 0 otherwise.)",
                "This will strengthen our lower bound results (because it implies that even finding out whether one given candidate wins is hard).5 Thus, a fooling set in our context is a set of vectors of votes so that a wins (does not win) with each of them; but for any two different vote vectors in the set, there is a way of taking some voters votes from the first vector and the others votes from the second vector, so that a does not win (wins).",
                "To simplify the proofs of our lower bounds, we make assumptions such as the number of voters n is odd in many of these proofs.",
                "Therefore, technically, we do not prove the lower bound for (number of candidates, number of voters) pairs (m, n) that do not satisfy these assumptions (for example, if we make the above assumption, then we technically do not prove the lower bound for any pair (m, n) in which n is even).",
                "Nevertheless, we always prove the lower bound for a representative set of (m, n) pairs.",
                "For example, for every one of our lower bounds it is the case that for infinitely many values of m, there are infinitely many values of n such that the lower bound is proved for the pair (m, n). 4.",
                "RESULTS We are now ready to present our results.",
                "For each voting rule, we first give a deterministic communication protocol for determining the winner to establish an upper bound.",
                "Then, we give a lower bound on the nondeterministic communication complexity (even on the complexity of deciding whether a given candidate wins, which is an easier question).",
                "The lower bounds match the upper bounds in all but two cases: the STV rule (upper bound O(n(log m)2 ); lower bound Ω(n log m)) and the <br>maximin</br> rule (upper bound O(nm log m), although we do give a nondeterministic protocol that is O(nm); lower bound Ω(nm)).",
                "When we discuss a voting rule in which the voters rank the candidates, we will represent a ranking in which candidate c1 is ranked first, c2 is ranked second, etc. as c1 c2 . . . cm. 5 One possible concern is that in the case where ties are possible, it may require much communication to verify whether a specific candidate a is among the winners, but little communication to produce one of the winners.",
                "However, all the fooling sets we use in the proofs have the property that if a wins, then a is the unique winner.",
                "Therefore, in these fooling sets, if one knows any one of the winners, then one knows whether a is a winner.",
                "Thus, computing one of the winners requires at least as much communication as verifying whether a is among the winners.",
                "In general, when a communication problem allows multiple correct answers for a given vector of inputs, this is known as computing a relation rather than a function [12].",
                "However, as per the above, we can restrict our attention to a subset of the domain where the voting rule truly is a (single-valued) function, and hence lower bounding techniques for functions rather than relations will suffice.",
                "Sometimes for the purposes of a proof the internal ranking of a subset of the candidates does not matter, and in this case we will not specify it.",
                "For example, if S = {c2, c3}, then c1 S c4 indicates that either the ranking c1 c2 c3 c4 or the ranking c1 c3 c2 c4 can be used for the proof.",
                "We first give a universal upper bound.",
                "Theorem 1.",
                "The deterministic communication complexity of any rank-based voting rule is O(nm log m).",
                "Proof.",
                "This bound is achieved by simply having everyone communicate their entire ordering of the candidates (indicating the rank of an individual candidate requires only O(log m) bits, so each of the n voters can simply indicate the rank of each of the m candidates).",
                "The next lemma will be useful in a few of our proofs.",
                "Lemma 1.",
                "If m divides n, then log(n! )−m log((n/m)!) ≥ n(log m − 1)/2.",
                "Proof.",
                "If n/m = 1 (that is, n = m), then this expression simplifies to log(n!).",
                "We have log(n!) = n i=1 log i ≥ n x=1 log(i)dx, which, using integration by parts, is equal to n log n − (n − 1) > n(log n − 1) = n(log m − 1) > n(log m − 1)/2.",
                "So, we can assume that n/m ≥ 2.",
                "We observe that log(n!) = n i=1 log i = n/m−1 i=0 m j=1 log(im+j) ≥ n/m−1 i=1 m j=1 log(im) = m n/m−1 i=1 log(im), and that m log((n/m)!) = m n/m i=1 log(i).",
                "Therefore, log(n!) − m log((n/m)!) ≥ m n/m−1 i=1 log(im) − m n/m i=1 log(i) = m(( n/m−1 i=1 log(im/i))−log(n/m)) = m((n/m− 1) log m−log n+log m) = n log m−m log n. Now, using the fact that n/m ≥ 2, we have m log n = n(m/n) log m(n/m) = n(m/n)(log m + log(n/m)) ≤ n(1/2)(log m + log 2).",
                "Thus, log(n!) − m log((n/m)!) ≥ n log m − m log n ≥ n log m − n(1/2)(log m + log 2) = n(log m − 1)/2.",
                "Theorem 2.",
                "The deterministic communication complexity of the plurality rule is O(n log m).",
                "Proof.",
                "Indicating one of the candidates requires only O(log m) bits, so each voter can simply indicate her most preferred candidate.",
                "Theorem 3.",
                "The nondeterministic communication complexity of the plurality rule is Ω(n log m) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We will exhibit a fooling set of size n ! (( n m )! )m where n = (n−1)/2.",
                "Taking the logarithm of this gives log(n ! )− m log((n /m)! ), so the result follows from Lemma 1.",
                "The fooling set will consist of all vectors of votes satisfying the following constraints: • For any 1 ≤ i ≤ n , voters 2i−1 and 2i vote the same. 81 • Every candidate receives equally many votes from the first 2n = n − 1 voters. • The last voter (voter n) votes for a.",
                "Candidate a wins with each one of these vote vectors because of the extra vote for a from the last voter.",
                "Given that m divides n , let us see how many vote vectors there are in the fooling set.",
                "We need to distribute n voter pairs evenly over m candidates, for a total of n /m voter pairs per candidate; and there are precisely n ! (( n m )! )m ways of doing this.6 All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses.",
                "Let i be a number such that the two vote vectors disagree on the candidate for which voters 2i − 1 and 2i vote.",
                "Without loss of generality, suppose that in the first vote vector, these voters do not vote for a (but for some other candidate, b, instead).",
                "Now, construct a new vote vector by taking votes 2i − 1 and 2i from the first vote vector, and the remaining votes from the second vote vector.",
                "Then, b receives 2n /m + 2 votes in this newly constructed vote vector, whereas a receives at most 2n /m+1 votes.",
                "So, a is not the winner in the newly constructed vote vector, and hence we have a correct fooling set.",
                "Theorem 4.",
                "The deterministic communication complexity of the plurality with runoff rule is O(n log m).",
                "Proof.",
                "First, let every voter indicate her most preferred candidate using log m bits.",
                "After this, the two candidates in the runoff are known, and each voter can indicate which one she prefers using a single additional bit.",
                "Theorem 5.",
                "The nondeterministic communication complexity of the plurality with runoff rule is Ω(n log m) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We will exhibit a fooling set of size n ! (( n m )! )m where m = m/2 and n = (n − 2)/4.",
                "Taking the logarithm of this gives log(n !) − m log((n /m )! ), so the result follows from Lemma 1.",
                "Divide the candidates into m pairs: (c1, d1), (c2, d2), . . . , (cm , dm ) where c1 = a and d1 = b.",
                "The fooling set will consist of all vectors of votes satisfying the following constraints: • For any 1 ≤ i ≤ n , voters 4i − 3 and 4i − 2 rank the candidates ck(i) a C − {a, ck(i)}, for some candidate ck(i). (If ck(i) = a then the vote is simply a C − {a}.) • For any 1 ≤ i ≤ n , voters 4i − 1 and 4i rank the candidates dk(i) a C − {a, dk(i)} (that is, their most preferred candidate is the candidate that is paired with the candidate that the previous two voters vote for). 6 An intuitive proof of this is the following.",
                "We can count the number of permutations of n elements as follows.",
                "First, divide the elements into m buckets of size n /m, so that if x is placed in a lower-indexed bucket than y, then x will be indexed lower in the eventual permutation.",
                "Then, decide on the permutation within each bucket (for which there are (n /m)! choices per bucket).",
                "It follows that n ! equals the number of ways to divide n elements into m buckets of size n /m, times ((n /m)! )m . • Every candidate is ranked at the top of equally many of the first 4n = n − 2 votes. • Voter 4n +1 = n−1 ranks the candidates a C−{a}. • Voter 4n + 2 = n ranks the candidates b C − {b}.",
                "Candidate a wins with each one of these vote vectors: because of the last two votes, candidates a and b are one vote ahead of all the other candidates and continue to the runoff, and at this point all the votes that had another candidate ranked at the top transfer to a, so that a wins the runoff.",
                "Given that m divides n , let us see how many vote vectors there are in the fooling set.",
                "We need to distribute n groups of four voters evenly over the m pairs of candidates, and (as in the proof of Theorem 3) there are n ! (( n m )! )m ways of doing this.",
                "All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses.",
                "Let i be a number such that ck(i) is not the same in both of these two vote vectors, that is, c1 k(i) (ck(i) in the first vote vector) is not equal to c2 k(i) (ck(i) in the second vote vector).",
                "Without loss of generality, suppose c1 k(i) = a.",
                "Now, construct a new vote vector by taking votes 4i − 3, 4i − 2, 4i − 1, 4i from the first vote vector, and the remaining votes from the second vote vector.",
                "In this newly constructed vote vector, c1 k(i) and d1 k(i) each receive 4n /m+2 votes in the first round, whereas a receives at most 4n /m+1 votes.",
                "So, a does not continue to the runoff in the newly constructed vote vector, and hence we have a correct fooling set.",
                "Theorem 6.",
                "The nondeterministic communication complexity of the Borda rule is Ω(nm log m) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We will exhibit a fooling set of size (m ! )n where m = m−2 and n = (n−2)/4.",
                "This will prove the theorem because m ! is Ω(m log m), so that log((m ! )n ) = n log(m !) is Ω(nm log m).",
                "For every vector (π1, π2, . . . , πn ) consisting of n orderings of all candidates other than a and another fixed candidate b (technically, the orderings take the form of a one-to-one function πi : {1, 2, . . . , m } → C − {a, b} with πi(j) = c indicating that candidate c is the jth in the order represented by πi), let the following vector of votes be an element of the fooling set: • For 1 ≤ i ≤ n , let voters 4i − 3 and 4i − 2 rank the candidates a b πi(1) πi(2) . . . πi(m ). • For 1 ≤ i ≤ n , let voters 4i − 1 and 4i rank the candidates πi(m ) πi(m − 1) . . . πi(1) b a. • Let voter 4n + 1 = n − 1 rank the candidates a b π0(1) π0(2) . . . π0(m ) (where π0 is an arbitrary order of the candidates other than a and b which is the same for every element of the fooling set). • Let voter 4n + 2 = n rank the candidates π0(m ) π0(m − 1) . . . π0(1) a b.",
                "We observe that this fooling set has size (m ! )n , and that candidate a wins in each vector of votes in the fooling set (to 82 see why, we observe that for any 1 ≤ i ≤ n , votes 4i−3 and 4i − 2 rank the candidates in the exact opposite way from votes 4i − 1 and 4i, which under the Borda rule means they cancel out; and the last two votes give one more point to a than to any other candidate-besides b who gets two fewer points than a).",
                "All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses.",
                "Let the first vote vector correspond to the vector (π1 1, π1 2, . . . , π1 n ), and let the second vote vector correspond to the vector (π2 1, π2 2, . . . , π2 n ).",
                "For some i, we must have π1 i = π2 i , so that for some candidate c /∈ {a, b}, (π1 i )−1 (c) < (π2 i )−1 (c) (that is, c is ranked higher in π1 i than in π2 i ).",
                "Now, construct a new vote vector by taking votes 4i−3 and 4i−2 from the first vote vector, and the remaining votes from the second vote vector. as Borda score remains unchanged.",
                "However, because c is ranked higher in π1 i than in π2 i , c receives at least 2 more points from votes 4i−3 and 4i − 2 in the newly constructed vote vector than it did in the second vote vector.",
                "It follows that c has a higher Borda score than a in the newly constructed vote vector.",
                "So, a is not the winner in the newly constructed vote vector, and hence we have a correct fooling set.",
                "Theorem 7.",
                "The nondeterministic communication complexity of the Copeland rule is Ω(nm log m) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We will exhibit a fooling set of size (m ! )n where m = (m − 2)/2 and n = (n − 2)/2.",
                "This will prove the theorem because m ! is Ω(m log m), so that log((m ! )n ) = n log(m !) is Ω(nm log m).",
                "We write the set of candidates as the following disjoint union: C = {a, b} ∪ L ∪ R where L = {l1, l2, . . . , lm } and R = {r1, r2, . . . , rm }.",
                "For every vector (π1, π2, . . . , πn ) consisting of n permutations of the integers 1 through m (πi : {1, 2, . . . , m } → {1, 2, . . . , m }), let the following vector of votes be an element of the fooling set: • For 1 ≤ i ≤ n , let voter 2i − 1 rank the candidates a b lπi(1) rπi(1) lπi(2) rπi(2) . . . lπi(m ) rπi(m ). • For 1 ≤ i ≤ n , let voter 2i rank the candidates rπi(m ) lπi(m ) rπi(m −1) lπi(m −1) . . . rπi(1) lπi(1) b a. • Let voter n − 1 = 2n + 1 rank the candidates a b l1 r1 l2 r2 . . . lm rm . • Let voter n = 2n +2 rank the candidates rm lm rm −1 lm −1 . . . r1 l1 a b.",
                "We observe that this fooling set has size (m ! )n , and that candidate a wins in each vector of votes in the fooling set (every pair of candidates is tied in their pairwise election, with the exception that a defeats b, so that a wins the election by half a point).",
                "All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses.",
                "Let the first vote vector correspond to the vector (π1 1, π1 2, . . . , π1 n ), and let the second vote vector correspond to the vector (π2 1, π2 2, . . . , π2 n ).",
                "For some i, we must have π1 i = π2 i , so that for some j ∈ {1, 2, . . . , m }, we have (π1 i )−1 (j) < (π2 i )−1 (j).",
                "Now, construct a new vote vector by taking vote 2i−1 from the first vote vector, and the remaining votes from the second vote vector. as Copeland score remains unchanged.",
                "Let us consider the score of lj.",
                "We first observe that the rank of lj in vote 2i − 1 in the newly constructed vote vector is at least 2 higher than it was in the second vote vector, because (π1 i )−1 (j) < (π2 i )−1 (j).",
                "Let D1 (lj) be the set of candidates in L ∪ R that voter 2i − 1 ranked lower than lj in the first vote vector (D1 (lj) = {c ∈ L ∪ R : lj 1 2i−1 c}), and let D2 (lj) be the set of candidates in L ∪ R that voter 2i − 1 ranked lower than lj in the second vote vector (D2 (lj) = {c ∈ L ∪ R : lj 2 2i−1 c}).",
                "Then, it follows that in the newly constructed vote vector, lj defeats all the candidates in D1 (lj) − D2 (lj) in their pairwise elections (because lj receives an extra vote in each one of these pairwise elections relative to the second vote vector), and loses to all the candidates in D2 (lj) − D1 (lj) (because lj loses a vote in each one of these pairwise elections relative to the second vote vector), and ties with everyone else.",
                "But |D1 (lj)|−|D2 (lj)| ≥ 2, and hence |D1 (lj) − D2 (lj)| − |D2 (lj) − D1 (lj)| ≥ 2.",
                "Hence, in the newly constructed vote vector, lj has at least two more pairwise wins than pairwise losses, and therefore has at least 1 more point than if lj had tied all its pairwise elections.",
                "Thus, lj has a higher Copeland score than a in the newly constructed vote vector.",
                "So, a is not the winner in the newly constructed vote vector, and hence we have a correct fooling set.",
                "Theorem 8.",
                "The nondeterministic communication complexity of the <br>maximin</br> rule is O(nm).",
                "Proof.",
                "The nondeterministic protocol will guess which candidate w is the winner, and, for each other candidate c, which candidate o(c) is the candidate against whom c receives its lowest score in a pairwise election.",
                "Then, let every voter communicate the following: • for each candidate c = w, whether she prefers c to w; • for each candidate c = w, whether she prefers c to o(c).",
                "We observe that this requires the communication of 2n(m− 1) bits.",
                "If the guesses were correct, then, letting N(d, e) be the number of voters preferring candidate d to candidate e, we should have N(c, o(c)) < N(w, c ) for any c = w, c = w, which will prove that w wins the election.",
                "Theorem 9.",
                "The nondeterministic communication complexity of the <br>maximin</br> rule is Ω(nm) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We will exhibit a fooling set of size 2n m where m = m − 2 and n = (n − 1)/4.",
                "Let b be a candidate other than a.",
                "For every vector (S1, S2, . . . , Sn ) consisting of n subsets Si ⊆ C − {a, b}, let the following vector of votes be an element of the fooling set: • For 1 ≤ i ≤ n , let voters 4i − 3 and 4i − 2 rank the candidates Si a C − (Si ∪ {a, b}) b. • For 1 ≤ i ≤ n , let voters 4i − 1 and 4i rank the candidates b C − (Si ∪ {a, b}) a Si. 83 • Let voter 4n + 1 = n rank the candidates a b C − {a, b}.",
                "We observe that this fooling set has size (2m )n = 2n m , and that candidate a wins in each vector of votes in the fooling set (in every one of as pairwise elections, a is ranked higher than its opponent by 2n +1 = (n+1)/2 > n/2 votes).",
                "All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses.",
                "Let the first vote vector correspond to the vector (S1 1 , S1 2 , . . . , S1 n ), and let the second vote vector correspond to the vector (S2 1 , S2 2 , . . . , S2 n ).",
                "For some i, we must have S1 i = S2 i , so that either S1 i S2 i or S2 i S1 i .",
                "Without loss of generality, suppose S1 i S2 i , and let c be some candidate in S1 i − S2 i .",
                "Now, construct a new vote vector by taking votes 4i − 3 and 4i − 2 from the first vote vector, and the remaining votes from the second vote vector.",
                "In this newly constructed vote vector, a is ranked higher than c by only 2n −1 voters, for the following reason.",
                "Whereas voters 4i−3 and 4i − 2 do not rank c higher than a in the second vote vector (because c /∈ S2 i ), voters 4i − 3 and 4i − 2 do rank c higher than a in the first vote vector (because c ∈ S1 i ).",
                "Moreover, in every one of bs pairwise elections, b is ranked higher than its opponent by at least 2n voters.",
                "So, a has a lower <br>maximin</br> score than b, therefore a is not the winner in the newly constructed vote vector, and hence we have a correct fooling set.",
                "Theorem 10.",
                "The deterministic communication complexity of the STV rule is O(n(log m)2 ).",
                "Proof.",
                "Consider the following communication protocol.",
                "Let each voter first announce her most preferred candidate (O(n log m) communication).",
                "In the remaining rounds, we will keep track of each voters most preferred candidate among the remaining candidates, which will be enough to implement the rule.",
                "When candidate c is eliminated, let each of the voters whose most preferred candidate among the remaining candidates was c announce their most preferred candidate among the candidates remaining after cs elimination.",
                "If candidate c was the ith candidate to be eliminated (that is, there were m − i + 1 candidates remaining before cs elimination), it follows that at most n/(m − i + 1) voters had candidate c as their most preferred candidate among the remaining candidates, and thus the number of bits to be communicated after the elimination of the ith candidate is O((n/(m−i+1)) log m).7 Thus, the total communication in this communication protocol is O(n log m + m−1 i=1 (n/(m − i + 1)) log m).",
                "Of course, m−1 i=1 1/(m − i + 1) = m i=2 1/i, which is O(log m).",
                "Substituting into the previous expression, we find that the communication complexity is O(n(log m)2 ).",
                "Theorem 11.",
                "The nondeterministic communication complexity of the STV rule is Ω(n log m) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We omit this proof because of space constraint. 7 Actually, O((n/(m − i + 1)) log(m − i + 1)) is also correct, but it will not improve the bound.",
                "Theorem 12.",
                "The deterministic communication complexity of the approval rule is O(nm).",
                "Proof.",
                "Approving or disapproving of a candidate requires only one bit of information, so every voter can simply approve or disapprove of every candidate for a total communication of nm bits.",
                "Theorem 13.",
                "The nondeterministic communication complexity of the approval rule is Ω(nm) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We will exhibit a fooling set of size 2n m where m = m − 1 and n = (n − 1)/4.",
                "For every vector (S1, S2, . . . , Sn ) consisting of n subsets Si ⊆ C − {a}, let the following vector of votes be an element of the fooling set: • For 1 ≤ i ≤ n , let voters 4i − 3 and 4i − 2 approve Si ∪ {a}. • For 1 ≤ i ≤ n , let voters 4i − 1 and 4i approve C − (Si ∪ {a}). • Let voter 4n + 1 = n approve {a}.",
                "We observe that this fooling set has size (2m )n = 2n m , and that candidate a wins in each vector of votes in the fooling set (a is approved by 2n + 1 voters, whereas each other candidate is approved by only 2n voters).",
                "All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses.",
                "Let the first vote vector correspond to the vector (S1 1 , S1 2 , . . . , S1 n ), and let the second vote vector correspond to the vector (S2 1 , S2 2 , . . . , S2 n ).",
                "For some i, we must have S1 i = S2 i , so that either S1 i S2 i or S2 i S1 i .",
                "Without loss of generality, suppose S1 i S2 i , and let b be some candidate in S1 i − S2 i .",
                "Now, construct a new vote vector by taking votes 4i − 3 and 4i − 2 from the first vote vector, and the remaining votes from the second vote vector.",
                "In this newly constructed vote vector, a is still approved by 2n + 1 votes.",
                "However, b is approved by 2n + 2 votes, for the following reason.",
                "Whereas voters 4i−3 and 4i−2 do not approve b in the second vote vector (because b /∈ S2 i ), voters 4i − 3 and 4i − 2 do approve b in the first vote vector (because b ∈ S1 i ).",
                "It follows that bs score in the newly constructed vote vector is bs score in the second vote vector (2n ), plus two.",
                "So, a is not the winner in the newly constructed vote vector, and hence we have a correct fooling set.",
                "Interestingly, an Ω(m) lower bound can be obtained even for the problem of finding a candidate that is approved by more than one voter [20].",
                "Theorem 14.",
                "The deterministic communication complexity of the Condorcet rule is O(nm).",
                "Proof.",
                "We maintain a set of active candidates S which is initialized to C. At each stage, we choose two of the active candidates (say, the two candidates with the lowest indices), and we let each voter communicate which of the two candidates she prefers. (Such a stage requires the communication of n bits, one per voter.)",
                "The candidate preferred by fewer 84 voters (the loser of the pairwise election) is removed from S. (If the pairwise election is tied, both candidates are removed.)",
                "After at most m − 1 iterations, only one candidate is left (or zero candidates are left, in which case there is no Condorcet winner).",
                "Let a be the remaining candidate.",
                "To find out whether candidate a is the Condorcet winner, let each voter communicate, for every candidate c = a, whether she prefers a to c. (This requires the communication of at most n(m − 1) bits.)",
                "This is enough to establish whether a won each of its pairwise elections (and thus, whether a is the Condorcet winner).",
                "Theorem 15.",
                "The nondeterministic communication complexity of the Condorcet rule is Ω(nm) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We will exhibit a fooling set of size 2n m where m = m − 1 and n = (n − 1)/2.",
                "For every vector (S1, S2, . . . , Sn ) consisting of n subsets Si ⊆ C − {a}, let the following vector of votes be an element of the fooling set: • For 1 ≤ i ≤ n , let voter 2i − 1 rank the candidates Si a C − Si. • For 1 ≤ i ≤ n , let voter 2i rank the candidates C − Si a Si. • Let voter 2n +1 = n rank the candidates a C −{a}.",
                "We observe that this fooling set has size (2m )n = 2n m , and that candidate a wins in each vector of votes in the fooling set (a wins each of its pairwise elections by a single vote).",
                "All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses.",
                "Let the first vote vector correspond to the vector (S1 1 , S1 2 , . . . , S1 n ), and let the second vote vector correspond to the vector (S2 1 , S2 2 , . . . , S2 n ).",
                "For some i, we must have S1 i = S2 i , so that either S1 i S2 i or S2 i S1 i .",
                "Without loss of generality, suppose S1 i S2 i , and let b be some candidate in S1 i − S2 i .",
                "Now, construct a new vote vector by taking vote 2i − 1 from the first vote vector, and the remaining votes from the second vote vector.",
                "In this newly constructed vote vector, b wins its pairwise election against a by one vote (vote 2i − 1 ranks b above a in the newly constructed vote vector because b ∈ S1 i , whereas in the second vote vector vote 2i − 1 ranked a above b because b /∈ S2 i ).",
                "So, a is not the Condorcet winner in the newly constructed vote vector, and hence we have a correct fooling set.",
                "Theorem 16.",
                "The deterministic communication complexity of the cup rule is O(nm).",
                "Proof.",
                "Consider the following simple communication protocol.",
                "First, let all the voters communicate, for every one of the matchups in the first round, which of its two candidates they prefer.",
                "After this, the matchups for the second round are known, so let all the voters communicate which candidate they prefer in each matchup in the second round-etc.",
                "Because communicating which of two candidates is preferred requires only one bit per voter, and because there are only m − 1 matchups in total, this communication protocol requires O(nm) communication.",
                "Theorem 17.",
                "The nondeterministic communication complexity of the cup rule is Ω(nm) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We will exhibit a fooling set of size 2n m where m = (m − 1)/2 and n = (n − 7)/2.",
                "Given that m + 1 is a power of 2, so that one candidate gets a bye (that is, does not face an opponent) in the first round, let a be the candidate with the bye.",
                "Of the m first-round matchups, let lj denote the one (left) candidate in the jth matchup, and let rj be the other (right) candidate.",
                "Let L = {lj : 1 ≤ j ≤ m } and R = {rj : 1 ≤ j ≤ m }, so that C = L ∪ R ∪ {a}. . . . . . . . . . l r l r l r a m1 1 2 2 m Figure 1: The schedule for the cup rule used in the proof of Theorem 17.",
                "For every vector (S1, S2, . . . , Sn ) consisting of n subsets Si ⊆ R, let the following vector of votes be an element of the fooling set: • For 1 ≤ i ≤ n , let voter 2i − 1 rank the candidates Si L a R − Si. • For 1 ≤ i ≤ n , let voter 2i rank the candidates R − Si L a Si. • Let voters 2n +1 = n−6, 2n +2 = n−5, 2n +3 = n−4 rank the candidates L a R. • Let voters 2n + 4 = n − 3, 2n + 5 = n − 2 rank the candidates a r1 l1 r2 l2 . . . rm lm . • Let voters 2n + 6 = n − 1, 2n + 7 = n rank the candidates rm lm rm −1 lm −1 . . . r1 l1 a.",
                "We observe that this fooling set has size (2m )n = 2n m .",
                "Also, candidate a wins in each vector of votes in the fooling set, for the following reasons.",
                "Each candidate rj defeats its opponent lj in the first round. (For any 1 ≤ i ≤ n , the net effect of votes 2i − 1 and 2i on the pairwise election between rj and lj is zero; votes n − 6, n − 5, n − 4 prefer lj to rj, but votes n − 3, n − 2, n − 1, n all prefer rj to lj.)",
                "Moreover, a defeats every rj in their pairwise election. (For any 1 ≤ i ≤ n , the net effect of votes 2i − 1 and 2i on the pairwise election between a and rj is zero; votes n − 1, n prefer rj to a, but votes n − 6, n − 5, n − 4, n − 3, n − 2 all prefer a to rj.)",
                "It follows that a will defeat all the candidates that it faces.",
                "All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses.",
                "Let the first vote vector correspond to the vector 85 (S1 1 , S1 2 , . . . , S1 n ), and let the second vote vector correspond to the vector (S2 1 , S2 2 , . . . , S2 n ).",
                "For some i, we must have S1 i = S2 i , so that either S1 i S2 i or S2 i S1 i .",
                "Without loss of generality, suppose S1 i S2 i , and let rj be some candidate in S1 i − S2 i .",
                "Now, construct a new vote vector by taking vote 2i from the first vote vector, and the remaining votes from the second vote vector.",
                "We note that, whereas in the second vote vector vote 2i preferred rj to lj (because rj ∈ R−S2 i ), in the newly constructed vote vector this is no longer the case (because rj ∈ S1 i ).",
                "It follows that, whereas in the second vote vector, rj defeated lj in the first round by one vote, in the newly constructed vote vector, lj defeats rj in the first round.",
                "Thus, at least one lj advances to the second round after defeating its opponent rj.",
                "Now, we observe that in the newly constructed vote vector, any lk wins its pairwise election against any rq with q = k. This is because among the first 2n votes, at least n − 1 prefer lk to rq; votes n − 6, n − 5, n − 4 prefer lk to rq; and, because q = k, either votes n − 3, n − 2 prefer lk to rq (if k < q), or votes n − 1, n prefer lk to rq (if k > q).",
                "Thus, at least n + 4 = (n + 1)/2 > n/2 votes prefer lk to rq.",
                "Moreover, any lk wins its pairwise election against a.",
                "This is because only votes n − 3 and n − 2 prefer a to lk.",
                "It follows that, after the first round, any surviving candidate lk can only lose a matchup against another surviving lk , so that one of the lk must win the election.",
                "So, a is not the winner in the newly constructed vote vector, and hence we have a correct fooling set.",
                "Theorem 18.",
                "The deterministic communication complexity of the Bucklin rule is O(nm).",
                "Proof.",
                "Let l be the minimum integer for which there is a candidate who is ranked among the top l candidates by more than half the votes.",
                "We will do a binary search for l. At each point, we will have a lower bound lL which is smaller than l (initialized to 0), and an upper bound lH which is at least l (initialized to m).",
                "While lH − lL > 1, we continue by finding out whether (lH − l)/2 is smaller than l, after which we can update the bounds.",
                "To find out whether a number k is smaller than l, we determine every voters k most preferred candidates.",
                "Every voter can communicate which candidates are among her k most preferred candidates using m bits (for each candidate, indicate whether the candidate is among the top k or not), but because the binary search requires log m iterations, this gives us an upper bound of O((log m)nm), which is not strong enough.",
                "However, if lL < k < lH , and we already know a voters lL most preferred candidates, as well as her lH most preferred candidates, then the voter no longer needs to communicate whether the lL most preferred candidates are among her k most preferred candidates (because they must be), and she no longer needs to communicate whether the m−lH least preferred candidates are among her k most preferred candidates (because they cannot be).",
                "Thus the voter needs to communicate only m−lL −(m−lH ) = lH −lL bits in any given stage.",
                "Because each stage, lH − lL is (roughly) halved, each voter in total communicates only (roughly) m + m/2 + m/4 + . . . ≤ 2m bits.",
                "Theorem 19.",
                "The nondeterministic communication complexity of the Bucklin rule is Ω(nm) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We will exhibit a fooling set of size 2n m where m = (m−1)/2 and n = n/2.",
                "We write the set of candidates as the following disjoint union: C = {a} ∪ L ∪ R where L = {l1, l2, . . . , lm } and R = {r1, r2, . . . , rm }.",
                "For any subset S ⊆ {1, 2, . . . , m }, let L(S) = {li : i ∈ S} and let R(S) = {ri : i ∈ S}.",
                "For every vector (S1, S2, . . . , Sn ) consisting of n sets Si ⊆ {1, 2, . . . , m }, let the following vector of votes be an element of the fooling set: • For 1 ≤ i ≤ n , let voter 2i − 1 rank the candidates L(Si) R − R(Si) a L − L(Si) R(Si). • For 1 ≤ i ≤ n , let voter 2i rank the candidates L − L(Si) R(Si) a L(Si) R − R(Si).",
                "We observe that this fooling set has size (2m )n = 2n m , and that candidate a wins in each vector of votes in the fooling set, for the following reason.",
                "Each candidate in C − {a} is ranked among the top m candidates by exactly half the voters (which is not enough to win).",
                "Thus, we need to look at the voters top m +1 candidates, and a is ranked m +1th by all voters.",
                "All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses.",
                "Let the first vote vector correspond to the vector (S1 1 , S1 2 , . . . , S1 n ), and let the second vote vector correspond to the vector (S2 1 , S2 2 , . . . , S2 n ).",
                "For some i, we must have S1 i = S2 i , so that either S1 i S2 i or S2 i S1 i .",
                "Without loss of generality, suppose S1 i S2 i , and let j be some integer in S1 i − S2 i .",
                "Now, construct a new vote vector by taking vote 2i − 1 from the first vote vector, and the remaining votes from the second vote vector.",
                "In this newly constructed vote vector, a is still ranked m + 1th by all votes.",
                "However, lj is ranked among the top m candidates by n + 1 = n/2 + 1 votes.",
                "This is because whereas vote 2i − 1 does not rank lj among the top m candidates in the second vote vector (because j /∈ S2 i , we have lj /∈ L(S2 i )), vote 2i − 1 does rank lj among the top m candidates in the first vote vector (because j ∈ S1 i , we have lj ∈ L(S1 i )).",
                "So, a is not the winner in the newly constructed vote vector, and hence we have a correct fooling set.",
                "Theorem 20.",
                "The nondeterministic communication complexity of the ranked pairs rule is Ω(nm log m) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We omit this proof because of space constraint. 5.",
                "DISCUSSION One key obstacle to using voting for preference aggregation is the communication burden that an election places on the voters.",
                "By lowering this burden, it may become feasible to conduct more elections over more issues.",
                "In the limit, this could lead to a shift from representational government to a system in which most issues are decided by referenda-a veritable e-democracy.",
                "In this paper, we analyzed the communication complexity of the common voting rules.",
                "Knowing which voting rules require little communication is especially important when the issue to be voted on is of low enough importance that the following is true: the parties involved are willing to accept a rule that tends 86 to produce outcomes that are slightly less representative of the voters preferences, if this rule reduces the communication burden on the voters significantly.",
                "The following table summarizes the results we obtained.",
                "Rule Lower bound Upper bound plurality Ω(n log m) O(n log m) plurality w/ runoff Ω(n log m) O(n log m) STV Ω(n log m) O(n(log m)2) Condorcet Ω(nm) O(nm) approval Ω(nm) O(nm) Bucklin Ω(nm) O(nm) cup Ω(nm) O(nm) <br>maximin</br> Ω(nm) O(nm) Borda Ω(nm log m) O(nm log m) Copeland Ω(nm log m) O(nm log m) ranked pairs Ω(nm log m) O(nm log m) Communication complexity of voting rules, sorted from low to high.",
                "All of the upper bounds are deterministic (with the exception of <br>maximin</br>, for which the best deterministic upper bound we proved is O(nm log m)).",
                "All of the lower bounds hold even for nondeterministic communication and even just for determining whether a given candidate a is the winner.",
                "One area of future research is to study what happens when we restrict our attention to communication protocols that do not reveal any strategically useful information.",
                "This restriction may invalidate some of the upper bounds that we derived using multistage communication protocols.",
                "Also, all of our bounds are worst-case bounds.",
                "It may be possible to outperform these bounds when the distribution of votes has additional structure.",
                "When deciding which voting rule to use for an election, there are many considerations to take into account.",
                "The voting rules that we studied in this paper are the most common ones that have survived the test of time.",
                "One way to select among these rules is to consider recent results on complexity.",
                "The table above shows that from a communication complexity perspective, plurality, plurality with runoff, and STV are preferable.",
                "However, plurality has the undesirable property that it is computationally easy to manipulate by voting strategically [3, 7].",
                "Plurality with runoff is NP-hard to manipulate by a coalition of weighted voters, or by an individual that faces correlated uncertainty about the others votes [7, 6].",
                "STV is NP-hard to manipulate in those settings as well [7], but also by an individual with perfect knowledge of the others votes (when the number of candidates is unbounded) [2].",
                "Therefore, STV is more robust, although it may require slightly more worst-case communication as per the table above.",
                "Yet other selection criteria are the computational complexity of determining whether enough information has been elicited to declare a winner, and that of determining the optimal sequence of queries [8]. 6.",
                "REFERENCES [1] Lawrence Ausubel and Paul Milgrom.",
                "Ascending auctions with package bidding.",
                "Frontiers of Theoretical Economics, 1, 2002.",
                "No. 1, Article 1. [2] John Bartholdi, III and James Orlin.",
                "Single transferable vote resists strategic voting.",
                "Social Choice and Welfare, 8(4):341-354, 1991. [3] John Bartholdi, III, Craig Tovey, and Michael Trick.",
                "The computational difficulty of manipulating an election.",
                "Social Choice and Welfare, 6(3):227-241, 1989. [4] Avrim Blum, Jeffrey Jackson, Tuomas Sandholm, and Martin Zinkevich.",
                "Preference elicitation and query learning.",
                "Journal of Machine Learning Research, 5:649-667, 2004. [5] Wolfram Conen and Tuomas Sandholm.",
                "Preference elicitation in combinatorial auctions: Extended abstract.",
                "In Proceedings of the ACM Conference on Electronic Commerce (ACM-EC), pages 256-259, 2001. [6] Vincent Conitzer, Jerome Lang, and Tuomas Sandholm.",
                "How many candidates are needed to make elections hard to manipulate?",
                "In Theoretical Aspects of Rationality and Knowledge (TARK), pages 201-214, 2003. [7] Vincent Conitzer and Tuomas Sandholm.",
                "Complexity of manipulating elections with few candidates.",
                "In Proceedings of the National Conference on Artificial Intelligence (AAAI), pages 314-319, 2002. [8] Vincent Conitzer and Tuomas Sandholm.",
                "Vote elicitation: Complexity and strategy-proofness.",
                "In Proceedings of the National Conference on Artificial Intelligence (AAAI), pages 392-397, 2002. [9] Sven de Vries, James Schummer, and Rakesh V. Vohra.",
                "On ascending auctions for heterogeneous objects, 2003.",
                "Draft. [10] Allan Gibbard.",
                "Manipulation of voting schemes.",
                "Econometrica, 41:587-602, 1973. [11] Benoit Hudson and Tuomas Sandholm.",
                "Effectiveness of query types and policies for preference elicitation in combinatorial auctions.",
                "In International Conference on Autonomous Agents and Multi-Agent Systems (AAMAS), pages 386-393, 2004. [12] E Kushilevitz and N Nisan.",
                "Communication Complexity.",
                "Cambridge University Press, 1997. [13] Sebasti´en Lahaie and David Parkes.",
                "Applying learning algorithms to preference elicitation.",
                "In Proceedings of the ACM Conference on Electronic Commerce, 2004. [14] Noam Nisan and Ilya Segal.",
                "The communication requirements of efficient allocations and supporting prices.",
                "Journal of Economic Theory, 2005.",
                "Forthcoming. [15] David Parkes. iBundle: An efficient ascending price bundle auction.",
                "In Proceedings of the ACM Conference on Electronic Commerce (ACM-EC), pages 148-157, 1999. [16] Tuomas Sandholm.",
                "An implementation of the contract net protocol based on marginal cost calculations.",
                "In Proceedings of the National Conference on Artificial Intelligence (AAAI), pages 256-262, 1993. [17] Tuomas Sandholm and Craig Boutilier.",
                "Preference elicitation in combinatorial auctions.",
                "In Peter Cramton, Yoav Shoham, and Richard Steinberg, editors, Combinatorial Auctions, chapter 10.",
                "MIT Press, 2005. [18] Paolo Santi, Vincent Conitzer, and Tuomas Sandholm.",
                "Towards a characterization of polynomial preference elicitation with value queries in combinatorial auctions.",
                "In Conference on Learning Theory (COLT), pages 1-16, 2004. [19] Mark Satterthwaite.",
                "Strategy-proofness and Arrows conditions: existence and correspondence theorems for voting procedures and social welfare functions.",
                "Journal of Economic Theory, 10:187-217, 1975. [20] Ilya Segal.",
                "The communication requirements of social choice rules and supporting budget sets, 2004.",
                "Draft.",
                "Presented at the DIMACS Workshop on Computational Issues in Auction Design, Rutgers University, New Jersey, USA. [21] Peter Wurman and Michael Wellman.",
                "AkBA: A progressive, anonymous-price combinatorial auction.",
                "In Proceedings of the ACM Conference on Electronic Commerce (ACM-EC), pages 21-29, 2000. [22] A. C. Yao.",
                "Some complexity questions related to distributed computing.",
                "In Proceedings of the 11th ACM symposium on theory of computing (STOC), pages 209-213, 1979. [23] Martin Zinkevich, Avrim Blum, and Tuomas Sandholm.",
                "On polynomial-time preference elicitation with value queries.",
                "In Proceedings of the ACM Conference on Electronic Commerce (ACM-EC), pages 176-185, 2003. 87"
            ],
            "original_annotated_samples": [
                "The rules (sorted by their communication complexity from low to high) are plurality, plurality with runoff, single transferable vote (STV), Condorcet, approval, Bucklin, cup, <br>maximin</br>, Borda, Copeland, and ranked pairs.",
                "The bounds match for all voting rules except STV and <br>maximin</br>.",
                "There are two exceptions: STV, for which our upper and lower bounds are apart by a factor log m; and <br>maximin</br>, for which our best deterministic upper bound is also a factor log m above the (nondeterministic) lower bound, although we give a nondeterministic upper bound that matches the lower bound. 2. REVIEW OF VOTING RULES In this section, we review the common voting rules that we study in this paper.",
                "If there is a candidate i that is preferred to any other candidate by a majority of the voters (that is, N(i, j) > N(j, i) for all j = i-that is, i wins every pairwise election), then candidate i wins. 2 The term voting protocol is often used to describe the same concept, but we seek to draw a sharp distinction between the rule mapping preferences to outcomes, and the communication/elicitation protocol used to implement this rule. 79 • <br>maximin</br> (aka.",
                "The <br>maximin</br> score of i is s(i) = minj=i N(i, j)-that is, is worst performance in a pairwise election."
            ],
            "translated_annotated_samples": [
                "Las reglas (ordenadas por su complejidad de comunicación de baja a alta) son pluralidad, pluralidad con segunda vuelta, voto único transferible (STV), Condorcet, aprobación, Bucklin, taza, <br>maximin</br>, Borda, Copeland y pares clasificados.",
                "Los límites coinciden para todas las reglas de votación excepto STV y <br>maximin</br>.",
                "Hay dos excepciones: STV, para el cual nuestros límites superiores e inferiores difieren en un factor log m; y maximin, para el cual nuestro mejor límite superior determinístico también es un factor log m por encima del límite inferior (no determinístico), aunque proporcionamos un límite superior no determinístico que coincide con el límite inferior. 2. REVISIÓN DE LAS REGLAS DE VOTACIÓN En esta sección, revisamos las reglas de votación comunes que estudiamos en este documento.",
                "Si hay un candidato i que es preferido por la mayoría de los votantes a cualquier otro candidato (es decir, N(i, j) > N(j, i) para todo j = i, es decir, i gana en cada elección por pares), entonces el candidato i gana. El término protocolo de votación se usa a menudo para describir el mismo concepto, pero buscamos hacer una distinción clara entre la regla que mapea las preferencias a los resultados y el protocolo de comunicación/obtención utilizado para implementar esta regla.",
                "El <br>puntaje maximin</br> de i es s(i) = minj=i N(i, j), es decir, su peor desempeño en una elección por pares."
            ],
            "translated_text": "Determinamos la complejidad de comunicación de las reglas de votación comunes. Las reglas (ordenadas por su complejidad de comunicación de baja a alta) son pluralidad, pluralidad con segunda vuelta, voto único transferible (STV), Condorcet, aprobación, Bucklin, taza, <br>maximin</br>, Borda, Copeland y pares clasificados. Para cada regla, primero proporcionamos un protocolo de comunicación determinista y un límite superior en la cantidad de bits comunicados en él; luego, damos un límite inferior en los requisitos de comunicación (incluso los no deterministas) de la regla de votación. Los límites coinciden para todas las reglas de votación excepto STV y <br>maximin</br>. Categorías y Descriptores de Asignaturas F.2 [Teoría de la Computación]: Análisis de Algoritmos y Complejidad de Problemas; J.4 [Aplicaciones Informáticas]: Ciencias Sociales y del Comportamiento-Economía Términos Generales Algoritmos, Economía, Teoría 1. INTRODUCCIÓN Un factor clave en la viabilidad de cualquier regla de agregación de preferencias es su carga de comunicación. Para agregar con éxito las preferencias de los agentes, generalmente no es necesario que todos los agentes informen toda su información de preferencias. Los protocolos inteligentes que obtienen parcial y secuencialmente las preferencias de los agentes tienen el potencial de reducir drásticamente la comunicación requerida. Esto tiene al menos las siguientes ventajas: • Puede hacer factible la agregación de preferencias en entornos donde la cantidad total de información de preferencias es demasiado grande para comunicar. • Incluso cuando comunicar toda la información de preferencias es factible, reducir los requisitos de comunicación disminuye la carga impuesta a los agentes. Esto es especialmente cierto cuando los agentes, en lugar de conocer todas sus preferencias de antemano, necesitan invertir esfuerzo (como cálculos o recopilación de información) para determinar sus preferencias. • Preserva (parte de) la privacidad de los agentes. La mayor parte del trabajo sobre la reducción de la carga de comunicación en la agregación de preferencias se ha centrado en entornos de asignación de recursos como subastas combinatorias, en las que un subastador subasta un número de artículos (posiblemente distintos) en un solo evento. Debido a que en una subasta combinatoria, los postores pueden tener valoraciones separadas para cada uno de un número exponencial de posibles paquetes de artículos, este es un escenario en el que reducir la carga de comunicación es especialmente crucial. Esto se puede lograr complementando al subastador con un provocador que elicitara incrementalmente partes de las preferencias de los postores según sea necesario, basándose en lo que los postores han revelado sobre sus preferencias hasta el momento, como sugieren Conen y Sandholm [5]. Por ejemplo, el solicitante puede preguntar por el valor de un postor para un paquete específico (consultas de valor), cuál de dos paquetes prefiere el postor (consultas de orden), qué paquete clasifica en la posición k o cuál es la posición de un paquete dado (consultas de clasificación), qué paquete compraría dado un vector particular de precios (consultas de demanda), etc., hasta que se pueda determinar (al menos) la asignación final. Experimentalmente, esto produce a drástico ahorro en la revelación de preferencias [11]. Además, si las funciones de valoración de los agentes provienen de ciertas subclases naturales, el problema de la obtención de información puede resolverse utilizando solo un número polinomial de consultas incluso en el peor de los casos [23, 4, 13, 18, 14]. Para una revisión de la obtención de preferencias en subastas combinatorias, consulte [17]. Las subastas combinatorias ascendentes son una forma especial conocida de obtención de preferencias, donde el encuestador realiza consultas de demanda con precios crecientes [15, 21, 1, 9]. Finalmente, los problemas de asignación de recursos 78 también han sido estudiados desde el punto de vista de la complejidad de la comunicación, derivando así límites inferiores sobre la comunicación requerida. Por ejemplo, Nisan y Segal muestran que se requiere comunicación exponencial incluso para obtener un excedente mayor al obtenido al subastar todos los objetos como un único paquete [14]. Segal también estudia reglas de elección social en general, y muestra que para una gran clase de reglas de elección social, los conjuntos de presupuesto de apoyo deben ser revelados de tal manera que si cada agente prefiere el mismo resultado en su conjunto de presupuesto, esto demuestra la optimalidad de ese resultado. Segal luego utiliza esta caracterización para demostrar límites en la comunicación requerida en la asignación de recursos, así como en entornos de emparejamiento [20]. En este documento, nos enfocaremos en los requisitos de comunicación de una subclase generalmente aplicable de reglas de elección social, comúnmente conocidas como reglas de votación. En un entorno de votación, hay un conjunto de resultados de candidatos sobre los cuales los votantes expresan sus preferencias al enviar un voto (normalmente, una clasificación de los candidatos), y el ganador (es decir, el resultado elegido) se determina en función de estos votos. La comunicación requerida por las reglas de votación puede ser grande ya sea porque el número de votantes es grande (como, por ejemplo, en elecciones nacionales), o porque el número de candidatos es grande (por ejemplo, los agentes pueden votar sobre asignaciones de un número de recursos), o ambos. El trabajo previo [8] ha estudiado la obtención de información en votaciones, analizando qué tan difícil es computacionalmente decidir si se puede determinar un ganador con la información obtenida hasta el momento, así como qué tan difícil es encontrar la secuencia óptima de preguntas dadas sospechas perfectas sobre las preferencias de los votantes. Además, ese artículo discute cuestiones estratégicas (teóricas de juegos) introducidas por la obtención de información. Por el contrario, en este artículo nos preocupamos por el número máximo de bits que deben comunicarse para ejecutar una regla de votación dada, cuando no se conoce de antemano las preferencias de los votantes. Determinamos la complejidad de comunicación de las reglas de votación comunes. Para cada regla, primero damos una cota superior en la complejidad de comunicación (determinística) proporcionando un protocolo de comunicación para ella y analizando cuántos bits necesitan ser transmitidos en este protocolo. (Los resultados de Segal [20] no se aplican a la mayoría de las reglas de votación porque la mayoría de las reglas de votación no son intersección-monótonas (o incluso monótonas).) Para muchas de las reglas de votación bajo estudio, resulta que no se puede hacer mejor que simplemente permitir que cada votante comunique inmediatamente toda su información (potencialmente relevante). Sin embargo, para algunas reglas (como la pluralidad con segunda vuelta, STV y taza) existe un protocolo de comunicación multietapa directo que, con un análisis detallado, se puede demostrar que supera significativamente la comunicación inmediata de toda la información (potencialmente relevante). Finalmente, para algunas reglas (como las reglas de Condorcet y Bucklin), necesitamos introducir un protocolo de comunicación más complejo para lograr el mejor límite superior posible. Para dos de las reglas que estudiamos que son intersección-monótonas, a saber, las reglas de aprobación y Condorcet, los resultados de Segal de hecho pueden ser utilizados para dar pruebas alternativas de nuestros límites inferiores. Solo proporcionamos pruebas directas para estas reglas aquí porque 1) estas pruebas directas son de las más fáciles en este documento, 2) las pruebas alternativas son no triviales incluso dados los resultados de Segal, y 3) se aplica una restricción de espacio. Sin embargo, esperamos incluir también las pruebas alternativas en una versión posterior. Después de obtener los límites superiores, demostramos que son ajustados al proporcionar límites inferiores coincidentes en la complejidad de comunicación (incluso la no determinista) de cada regla de votación. Hay dos excepciones: STV, para el cual nuestros límites superiores e inferiores difieren en un factor log m; y maximin, para el cual nuestro mejor límite superior determinístico también es un factor log m por encima del límite inferior (no determinístico), aunque proporcionamos un límite superior no determinístico que coincide con el límite inferior. 2. REVISIÓN DE LAS REGLAS DE VOTACIÓN En esta sección, revisamos las reglas de votación comunes que estudiamos en este documento. Una regla de votación es una función que asigna un vector de votos de los n votantes (es decir, preferencias sobre candidatos) a uno de los m candidatos (el ganador) en el conjunto de candidatos C. En algunos casos (como la regla de Condorcet), la regla también puede declarar que no existe un ganador. No nos preocupamos por lo que sucede en caso de un empate entre candidatos (nuestros límites inferiores se mantienen independientemente de cómo se resuelvan los empates, y los protocolos de comunicación utilizados para nuestros límites superiores no intentan romper los empates). Todas las reglas que estudiamos son reglas basadas en el rango, lo que significa que un voto se define como un ordenamiento de los candidatos (con la excepción de la regla de la pluralidad, para la cual un voto es un único candidato, y la regla de aprobación, para la cual un voto es un subconjunto de los candidatos). Consideraremos las siguientes reglas de votación. (Para reglas que definen una puntuación, el candidato con la puntuación más alta gana.) • reglas de puntuación. Sea α = α1, . . . , αm un vector de enteros tal que α1 ≥ α2 . . . ≥ αm. Para cada votante, un candidato recibe α1 puntos si es clasificado en primer lugar por el votante, α2 si es clasificado en segundo lugar, etc. La puntuación sα de un candidato es el número total de puntos que recibe el candidato. La regla de Borda es la regla de puntuación con α = m−1, m−2, . . . , 0. La regla de la pluralidad es la regla de puntuación con α = 1, 0, . . . , 0. • voto único transferible (STV). La regla avanza a través de una serie de m - 1 rondas. En cada ronda, el candidato con la puntuación de pluralidad más baja (es decir, el menor número de votantes que lo clasifican en primer lugar entre los candidatos restantes) es eliminado (y cada uno de los votos para ese candidato se transfieren al siguiente candidato restante en el orden dado en ese voto). El ganador es el último candidato restante. • mayoría con segunda vuelta. En esta regla, una primera ronda elimina a todos los candidatos excepto a los dos con las puntuaciones de pluralidad más altas. Los votos se transfieren a estos como en la regla de VST, y una segunda ronda determina al ganador de estos dos. • aprobación. Cada votante etiqueta a cada candidato como aprobado o desaprobado. El candidato aprobado por el mayor número de votantes gana. • Condorcet. Para cualquier par de candidatos i y j, sea N(i, j) el número de votantes que prefieren a i sobre j. Si hay un candidato i que es preferido por la mayoría de los votantes a cualquier otro candidato (es decir, N(i, j) > N(j, i) para todo j = i, es decir, i gana en cada elección por pares), entonces el candidato i gana. El término protocolo de votación se usa a menudo para describir el mismo concepto, pero buscamos hacer una distinción clara entre la regla que mapea las preferencias a los resultados y el protocolo de comunicación/obtención utilizado para implementar esta regla. (Simpson). El <br>puntaje maximin</br> de i es s(i) = minj=i N(i, j), es decir, su peor desempeño en una elección por pares. ",
            "candidates": [],
            "error": [
                [
                    "maximin",
                    "maximin",
                    "puntaje maximin"
                ]
            ]
        },
        "communication complexity": {
            "translated_key": "complejidad de comunicación",
            "is_in_text": true,
            "original_annotated_sentences": [
                "<br>communication complexity</br> of Common Voting Rules∗ Vincent Conitzer Carnegie Mellon University 5000 Forbes Avenue Pittsburgh, PA 15213, USA conitzer@cs.cmu.edu Tuomas Sandholm Carnegie Mellon University 5000 Forbes Avenue Pittsburgh, PA 15213, USA sandholm@cs.cmu.edu ABSTRACT We determine the <br>communication complexity</br> of the common voting rules.",
                "The rules (sorted by their <br>communication complexity</br> from low to high) are plurality, plurality with runoff, single transferable vote (STV), Condorcet, approval, Bucklin, cup, maximin, Borda, Copeland, and ranked pairs.",
                "For each rule, we first give a deterministic communication protocol and an upper bound on the number of bits communicated in it; then, we give a lower bound on (even the nondeterministic) communication requirements of the voting rule.",
                "The bounds match for all voting rules except STV and maximin.",
                "Categories and Subject Descriptors F.2 [Theory of Computation]: Analysis of Algorithms and Problem Complexity; J.4 [Computer Applications]: Social and Behavioral Sciences-Economics General Terms Algorithms, Economics, Theory 1.",
                "INTRODUCTION One key factor in the practicality of any preference aggregation rule is its communication burden.",
                "To successfully aggregate the agents preferences, it is usually not necessary for all the agents to report all of their preference information.",
                "Clever protocols that elicit the agents preferences partially and sequentially have the potential to dramatically reduce the required communication.",
                "This has at least the following advantages: • It can make preference aggregation feasible in settings where the total amount of preference information is too large to communicate. • Even when communicating all the preference information is feasible, reducing the communication requirements lessens the burden placed on the agents.",
                "This is especially true when the agents, rather than knowing all their preferences in advance, need to invest effort (such as computation or information gathering) to determine their preferences [16]. • It preserves (some of) the agents privacy.",
                "Most of the work on reducing the communication burden in preference aggregation has focused on resource allocation settings such as combinatorial auctions, in which an auctioneer auctions off a number of (possibly distinct) items in a single event.",
                "Because in a combinatorial auction, bidders can have separate valuations for each of an exponential number of possible bundles of items, this is a setting in which reducing the communication burden is especially crucial.",
                "This can be accomplished by supplementing the auctioneer with an elicitor that incrementally elicits parts of the bidders preferences on an as-needed basis, based on what the bidders have revealed about their preferences so far, as suggested by Conen and Sandholm [5].",
                "For example, the elicitor can ask for a bidders value for a specific bundle (value queries), which of two bundles the bidder prefers (order queries), which bundle he ranks kth or what the rank of a given bundle is (rank queries), which bundle he would purchase given a particular vector of prices (demand queries), etc.-until (at least) the final allocation can be determined.",
                "Experimentally, this yields drastic savings in preference revelation [11].",
                "Furthermore, if the agents valuation functions are drawn from certain natural subclasses, the elicitation problem can be solved using only polynomially many queries even in the worst case [23, 4, 13, 18, 14].",
                "For a review of preference elicitation in combinatorial auctions, see [17].",
                "Ascending combinatorial auctions are a well-known special form of preference elicitation, where the elicitor asks demand queries with increasing prices [15, 21, 1, 9].",
                "Finally, resource 78 allocation problems have also been studied from a <br>communication complexity</br> viewpoint, thereby deriving lower bounds on the required communication.",
                "For example, Nisan and Segal show that exponential communication is required even to obtain a surplus greater than that obtained by auctioning off all objects as a single bundle [14].",
                "Segal also studies social choice rules in general, and shows that for a large class of social choice rules, supporting budget sets must be revealed such that if every agent prefers the same outcome in her budget set, this proves the optimality of that outcome.",
                "Segal then uses this characterization to prove bounds on the communication required in resource allocation as well as matching settings [20].",
                "In this paper, we will focus on the communication requirements of a generally applicable subclass of social choice rules, commonly known as voting rules.",
                "In a voting setting, there is a set of candidate outcomes over which the voters express their preferences by submitting a vote (typically, a ranking of the candidates), and the winner (that is, the chosen outcome) is determined based on these votes.",
                "The communication required by voting rules can be large either because the number of voters is large (such as, for example, in national elections), or because the number of candidates is large (for example, the agents can vote over allocations of a number of resources), or both.",
                "Prior work [8] has studied elicitation in voting, studying how computationally hard it is to decide whether a winner can be determined with the information elicited so far, as well as how hard it is to find the optimal sequence of queries given perfect suspicions about the voters preferences.",
                "In addition, that paper discusses strategic (game-theoretic) issues introduced by elicitation.",
                "In contrast, in this paper, we are concerned with the worst-case number of bits that must be communicated to execute a given voting rule, when nothing is known in advance about the voters preferences.",
                "We determine the <br>communication complexity</br> of the common voting rules.",
                "For each rule, we first give an upper bound on the (deterministic) <br>communication complexity</br> by providing a communication protocol for it and analyzing how many bits need to be transmitted in this protocol. (Segals results [20] do not apply to most voting rules because most voting rules are not intersectionmonotonic (or even monotonic).1 ) For many of the voting rules under study, it turns out that one cannot do better than simply letting each voter immediately communicate all her (potentially relevant) information.",
                "However, for some rules (such as plurality with runoff, STV and cup) there is a straightforward multistage communication protocol that, with some analysis, can be shown to significantly outperform the immediate communication of all (potentially relevant) information.",
                "Finally, for some rules (such as the Condorcet and Bucklin rules), we need to introduce a more complex communication protocol to achieve the best possible upper 1 For two of the rules that we study that are intersectionmonotonic, namely the approval and Condorcet rules, Segals results can in fact be used to give alternative proofs of our lower bounds.",
                "We only give direct proofs for these rules here because 1) these direct proofs are among the easier ones in this paper, 2) the alternative proofs are nontrivial even given Segals results, and 3) a space constraint applies.",
                "However, we hope to also include the alternative proofs in a later version. bound.",
                "After obtaining the upper bounds, we show that they are tight by giving matching lower bounds on (even the nondeterministic) <br>communication complexity</br> of each voting rule.",
                "There are two exceptions: STV, for which our upper and lower bounds are apart by a factor log m; and maximin, for which our best deterministic upper bound is also a factor log m above the (nondeterministic) lower bound, although we give a nondeterministic upper bound that matches the lower bound. 2. REVIEW OF VOTING RULES In this section, we review the common voting rules that we study in this paper.",
                "A voting rule2 is a function mapping a vector of the n voters votes (i.e. preferences over candidates) to one of the m candidates (the winner) in the candidate set C. In some cases (such as the Condorcet rule), the rule may also declare that no winner exists.",
                "We do not concern ourselves with what happens in case of a tie between candidates (our lower bounds hold regardless of how ties are broken, and the communication protocols used for our upper bounds do not attempt to break the ties).",
                "All of the rules that we study are rank-based rules, which means that a vote is defined as an ordering of the candidates (with the exception of the plurality rule, for which a vote is a single candidate, and the approval rule, for which a vote is a subset of the candidates).",
                "We will consider the following voting rules. (For rules that define a score, the candidate with the highest score wins.) • scoring rules.",
                "Let α = α1, . . . , αm be a vector of integers such that α1 ≥ α2 . . . ≥ αm.",
                "For each voter, a candidate receives α1 points if it is ranked first by the voter, α2 if it is ranked second etc.",
                "The score sα of a candidate is the total number of points the candidate receives.",
                "The Borda rule is the scoring rule with α = m−1, m−2, . . . , 0 .",
                "The plurality rule is the scoring rule with α = 1, 0, . . . , 0 . • single transferable vote (STV).",
                "The rule proceeds through a series of m − 1 rounds.",
                "In each round, the candidate with the lowest plurality score (that is, the least number of voters ranking it first among the remaining candidates) is eliminated (and each of the votes for that candidate transfer to the next remaining candidate in the order given in that vote).",
                "The winner is the last remaining candidate. • plurality with run-off.",
                "In this rule, a first round eliminates all candidates except the two with the highest plurality scores.",
                "Votes are transferred to these as in the STV rule, and a second round determines the winner from these two. • approval.",
                "Each voter labels each candidate as either approved or disapproved.",
                "The candidate approved by the greatest number of voters wins. • Condorcet.",
                "For any two candidates i and j, let N(i, j) be the number of voters who prefer i to j.",
                "If there is a candidate i that is preferred to any other candidate by a majority of the voters (that is, N(i, j) > N(j, i) for all j = i-that is, i wins every pairwise election), then candidate i wins. 2 The term voting protocol is often used to describe the same concept, but we seek to draw a sharp distinction between the rule mapping preferences to outcomes, and the communication/elicitation protocol used to implement this rule. 79 • maximin (aka.",
                "Simpson).",
                "The maximin score of i is s(i) = minj=i N(i, j)-that is, is worst performance in a pairwise election.",
                "The candidate with the highest maximin score wins. • Copeland.",
                "For any two distinct candidates i and j, let C(i, j) = 1 if N(i, j) > N(j, i), C(i, j) = 1/2 if N(i, j) = N(j, i) and C(i, j) = 0 if N(i, j) < N(j, i).",
                "The Copeland score of candidate i is s(i) = j=i C(i, j). • cup (sequential binary comparisons).",
                "The cup rule is defined by a balanced3 binary tree T with one leaf per candidate, and an assignment of candidates to leaves (each leaf gets one candidate).",
                "Each non-leaf node is assigned the winner of the pairwise election of the nodes children; the candidate assigned to the root wins. • Bucklin.",
                "For any candidate i and integer l, let B(i, l) be the number of voters that rank candidate i among the top l candidates.",
                "The winner is arg mini(min{l : B(i, l) > n/2}).",
                "That is, if we say that a voter approves her top l candidates, then we repeatedly increase l by 1 until some candidate is approved by more than half the voters, and this candidate is the winner. • ranked pairs.",
                "This rule determines an order on all the candidates, and the winner is the candidate at the top of this order.",
                "Sort all ordered pairs of candidates (i, j) by N(i, j), the number of voters who prefer i to j.",
                "Starting with the pair (i, j) with the highest N(i, j), we lock in the result of their pairwise election (i j).",
                "Then, we move to the next pair, and we lock the result of their pairwise election.",
                "We continue to lock every pairwise result that does not contradict the ordering established so far.",
                "We emphasize that these definitions of voting rules do not concern themselves with how the votes are elicited from the voters; all the voting rules, including those that are suggestively defined in terms of rounds, are in actuality just functions mapping the vector of all the voters votes to a winner.",
                "Nevertheless, there are always many different ways of eliciting the votes (or the relevant parts thereof) from the voters.",
                "For example, in the plurality with runoff rule, one way of eliciting the votes is to ask every voter to declare her entire ordering of the candidates up front.",
                "Alternatively, we can first ask every voter to declare only her most preferred candidate; then, we will know the two candidates in the runoff, and we can ask every voter which of these two candidates she prefers.",
                "Thus, we distinguish between the voting rule (the mapping from vectors of votes to outcomes) and the communication protocol (which determines how the relevant parts of the votes are actually elicited from the voters).",
                "The goal of this paper is to give efficient communication protocols for the voting rules just defined, and to prove that there do not exist any more efficient communication protocols.",
                "It is interesting to note that the choice of the communication protocol may affect the strategic behavior of the voters.",
                "Multistage communication protocols may reveal to the voters some information about how the other voters are voting (for example, in the two-stage communication protocol just given for plurality with runoff, in the second stage voters 3 Balanced means that the difference in depth between two leaves can be at most one. will know which two candidates have the highest plurality scores).",
                "In general, when the voters receive such information, it may give them incentives to vote differently than they would have in a single-stage communication protocol in which all voters declare their entire votes simultaneously.",
                "Of course, even the single-stage communication protocol is not strategy-proof4 for any reasonable voting rule, by the Gibbard-Satterthwaite theorem [10, 19].",
                "However, this does not mean that we should not be concerned about adding even more opportunities for strategic voting.",
                "In fact, many of the communication protocols introduced in this paper do introduce additional opportunities for strategic voting, but we do not have the space to discuss this here. (In prior work [8], we do give an example where an elicitation protocol for the approval voting rule introduces strategic voting, and give principles for designing elicitation protocols that do not introduce strategic problems.)",
                "Now that we have reviewed voting rules, we move on to a brief review of <br>communication complexity</br> theory. 3. REVIEW OF SOME <br>communication complexity</br> THEORY In this section, we review the basic model of a communication problem and the lower-bounding technique of constructing a fooling set. (The basic model of a communication problem is due to Yao [22]; for an overview see Kushilevitz and Nisan [12].)",
                "Each player 1 ≤ i ≤ n knows (only) input xi.",
                "Together, they seek to compute f(x1, x2, . . . , xn).",
                "In a deterministic protocol for computing f, in each stage, one of the players announces (to all other players) a bit of information based on her own input and the bits announced so far.",
                "Eventually, the communication terminates and all players know f(x1, x2, . . . , xn).",
                "The goal is to minimize the worst-case (over all input vectors) number of bits sent.",
                "The deterministic <br>communication complexity</br> of a problem is the worstcase number of bits sent in the best (correct) deterministic protocol for it.",
                "In a nondeterministic protocol, the next bit to be sent can be chosen nondeterministically.",
                "For the purposes of this paper, we will consider a nondeterministic protocol correct if for every input vector, there is some sequence of nondeterministic choices the players can make so that the players know the value of f when the protocol terminates.",
                "The nondeterministic <br>communication complexity</br> of a problem is the worst-case number of bits sent in the best (correct) nondeterministic protocol for it.",
                "We are now ready to give the definition of a fooling set.",
                "Definition 1.",
                "A fooling set is a set of input vectors {(x1 1, x1 2, . . . , x1 n), (x2 1, x2 2, . . . , x2 n), . . . , (xk 1 , xk 2 , . . . , xk n) such that for any i, f(xi 1, xi 2, . . . , xi n) = f0 for some constant f0, but for any i = j, there exists some vector (r1, r2, . . . , rn) ∈ {i, j}n such that f(xr1 1 , xr2 2 , . . . , xrn n ) = f0. (That is, we can mix the inputs from the two input vectors to obtain a vector with a different function value.)",
                "It is known that if a fooling set of size k exists, then log k is a lower bound on the <br>communication complexity</br> (even the nondeterministic <br>communication complexity</br>) [12]. 4 A strategy-proof protocol is one in which it is in the players best interest to report their preferences truthfully. 80 For the purposes of this paper, f is the voting rule that maps the votes to the winning candidate, and xi is voter is vote (the information that the voting rule would require from the voter if there were no possibility of multistage communication-i.e. the most preferred candidate (plurality), the approved candidates (approval), or the ranking of all the candidates (all other protocols)).",
                "However, when we derive our lower bounds, f will only signify whether a distinguished candidate a wins. (That is, f is 1 if a wins, and 0 otherwise.)",
                "This will strengthen our lower bound results (because it implies that even finding out whether one given candidate wins is hard).5 Thus, a fooling set in our context is a set of vectors of votes so that a wins (does not win) with each of them; but for any two different vote vectors in the set, there is a way of taking some voters votes from the first vector and the others votes from the second vector, so that a does not win (wins).",
                "To simplify the proofs of our lower bounds, we make assumptions such as the number of voters n is odd in many of these proofs.",
                "Therefore, technically, we do not prove the lower bound for (number of candidates, number of voters) pairs (m, n) that do not satisfy these assumptions (for example, if we make the above assumption, then we technically do not prove the lower bound for any pair (m, n) in which n is even).",
                "Nevertheless, we always prove the lower bound for a representative set of (m, n) pairs.",
                "For example, for every one of our lower bounds it is the case that for infinitely many values of m, there are infinitely many values of n such that the lower bound is proved for the pair (m, n). 4.",
                "RESULTS We are now ready to present our results.",
                "For each voting rule, we first give a deterministic communication protocol for determining the winner to establish an upper bound.",
                "Then, we give a lower bound on the nondeterministic <br>communication complexity</br> (even on the complexity of deciding whether a given candidate wins, which is an easier question).",
                "The lower bounds match the upper bounds in all but two cases: the STV rule (upper bound O(n(log m)2 ); lower bound Ω(n log m)) and the maximin rule (upper bound O(nm log m), although we do give a nondeterministic protocol that is O(nm); lower bound Ω(nm)).",
                "When we discuss a voting rule in which the voters rank the candidates, we will represent a ranking in which candidate c1 is ranked first, c2 is ranked second, etc. as c1 c2 . . . cm. 5 One possible concern is that in the case where ties are possible, it may require much communication to verify whether a specific candidate a is among the winners, but little communication to produce one of the winners.",
                "However, all the fooling sets we use in the proofs have the property that if a wins, then a is the unique winner.",
                "Therefore, in these fooling sets, if one knows any one of the winners, then one knows whether a is a winner.",
                "Thus, computing one of the winners requires at least as much communication as verifying whether a is among the winners.",
                "In general, when a communication problem allows multiple correct answers for a given vector of inputs, this is known as computing a relation rather than a function [12].",
                "However, as per the above, we can restrict our attention to a subset of the domain where the voting rule truly is a (single-valued) function, and hence lower bounding techniques for functions rather than relations will suffice.",
                "Sometimes for the purposes of a proof the internal ranking of a subset of the candidates does not matter, and in this case we will not specify it.",
                "For example, if S = {c2, c3}, then c1 S c4 indicates that either the ranking c1 c2 c3 c4 or the ranking c1 c3 c2 c4 can be used for the proof.",
                "We first give a universal upper bound.",
                "Theorem 1.",
                "The deterministic <br>communication complexity</br> of any rank-based voting rule is O(nm log m).",
                "Proof.",
                "This bound is achieved by simply having everyone communicate their entire ordering of the candidates (indicating the rank of an individual candidate requires only O(log m) bits, so each of the n voters can simply indicate the rank of each of the m candidates).",
                "The next lemma will be useful in a few of our proofs.",
                "Lemma 1.",
                "If m divides n, then log(n! )−m log((n/m)!) ≥ n(log m − 1)/2.",
                "Proof.",
                "If n/m = 1 (that is, n = m), then this expression simplifies to log(n!).",
                "We have log(n!) = n i=1 log i ≥ n x=1 log(i)dx, which, using integration by parts, is equal to n log n − (n − 1) > n(log n − 1) = n(log m − 1) > n(log m − 1)/2.",
                "So, we can assume that n/m ≥ 2.",
                "We observe that log(n!) = n i=1 log i = n/m−1 i=0 m j=1 log(im+j) ≥ n/m−1 i=1 m j=1 log(im) = m n/m−1 i=1 log(im), and that m log((n/m)!) = m n/m i=1 log(i).",
                "Therefore, log(n!) − m log((n/m)!) ≥ m n/m−1 i=1 log(im) − m n/m i=1 log(i) = m(( n/m−1 i=1 log(im/i))−log(n/m)) = m((n/m− 1) log m−log n+log m) = n log m−m log n. Now, using the fact that n/m ≥ 2, we have m log n = n(m/n) log m(n/m) = n(m/n)(log m + log(n/m)) ≤ n(1/2)(log m + log 2).",
                "Thus, log(n!) − m log((n/m)!) ≥ n log m − m log n ≥ n log m − n(1/2)(log m + log 2) = n(log m − 1)/2.",
                "Theorem 2.",
                "The deterministic <br>communication complexity</br> of the plurality rule is O(n log m).",
                "Proof.",
                "Indicating one of the candidates requires only O(log m) bits, so each voter can simply indicate her most preferred candidate.",
                "Theorem 3.",
                "The nondeterministic <br>communication complexity</br> of the plurality rule is Ω(n log m) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We will exhibit a fooling set of size n ! (( n m )! )m where n = (n−1)/2.",
                "Taking the logarithm of this gives log(n ! )− m log((n /m)! ), so the result follows from Lemma 1.",
                "The fooling set will consist of all vectors of votes satisfying the following constraints: • For any 1 ≤ i ≤ n , voters 2i−1 and 2i vote the same. 81 • Every candidate receives equally many votes from the first 2n = n − 1 voters. • The last voter (voter n) votes for a.",
                "Candidate a wins with each one of these vote vectors because of the extra vote for a from the last voter.",
                "Given that m divides n , let us see how many vote vectors there are in the fooling set.",
                "We need to distribute n voter pairs evenly over m candidates, for a total of n /m voter pairs per candidate; and there are precisely n ! (( n m )! )m ways of doing this.6 All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses.",
                "Let i be a number such that the two vote vectors disagree on the candidate for which voters 2i − 1 and 2i vote.",
                "Without loss of generality, suppose that in the first vote vector, these voters do not vote for a (but for some other candidate, b, instead).",
                "Now, construct a new vote vector by taking votes 2i − 1 and 2i from the first vote vector, and the remaining votes from the second vote vector.",
                "Then, b receives 2n /m + 2 votes in this newly constructed vote vector, whereas a receives at most 2n /m+1 votes.",
                "So, a is not the winner in the newly constructed vote vector, and hence we have a correct fooling set.",
                "Theorem 4.",
                "The deterministic <br>communication complexity</br> of the plurality with runoff rule is O(n log m).",
                "Proof.",
                "First, let every voter indicate her most preferred candidate using log m bits.",
                "After this, the two candidates in the runoff are known, and each voter can indicate which one she prefers using a single additional bit.",
                "Theorem 5.",
                "The nondeterministic <br>communication complexity</br> of the plurality with runoff rule is Ω(n log m) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We will exhibit a fooling set of size n ! (( n m )! )m where m = m/2 and n = (n − 2)/4.",
                "Taking the logarithm of this gives log(n !) − m log((n /m )! ), so the result follows from Lemma 1.",
                "Divide the candidates into m pairs: (c1, d1), (c2, d2), . . . , (cm , dm ) where c1 = a and d1 = b.",
                "The fooling set will consist of all vectors of votes satisfying the following constraints: • For any 1 ≤ i ≤ n , voters 4i − 3 and 4i − 2 rank the candidates ck(i) a C − {a, ck(i)}, for some candidate ck(i). (If ck(i) = a then the vote is simply a C − {a}.) • For any 1 ≤ i ≤ n , voters 4i − 1 and 4i rank the candidates dk(i) a C − {a, dk(i)} (that is, their most preferred candidate is the candidate that is paired with the candidate that the previous two voters vote for). 6 An intuitive proof of this is the following.",
                "We can count the number of permutations of n elements as follows.",
                "First, divide the elements into m buckets of size n /m, so that if x is placed in a lower-indexed bucket than y, then x will be indexed lower in the eventual permutation.",
                "Then, decide on the permutation within each bucket (for which there are (n /m)! choices per bucket).",
                "It follows that n ! equals the number of ways to divide n elements into m buckets of size n /m, times ((n /m)! )m . • Every candidate is ranked at the top of equally many of the first 4n = n − 2 votes. • Voter 4n +1 = n−1 ranks the candidates a C−{a}. • Voter 4n + 2 = n ranks the candidates b C − {b}.",
                "Candidate a wins with each one of these vote vectors: because of the last two votes, candidates a and b are one vote ahead of all the other candidates and continue to the runoff, and at this point all the votes that had another candidate ranked at the top transfer to a, so that a wins the runoff.",
                "Given that m divides n , let us see how many vote vectors there are in the fooling set.",
                "We need to distribute n groups of four voters evenly over the m pairs of candidates, and (as in the proof of Theorem 3) there are n ! (( n m )! )m ways of doing this.",
                "All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses.",
                "Let i be a number such that ck(i) is not the same in both of these two vote vectors, that is, c1 k(i) (ck(i) in the first vote vector) is not equal to c2 k(i) (ck(i) in the second vote vector).",
                "Without loss of generality, suppose c1 k(i) = a.",
                "Now, construct a new vote vector by taking votes 4i − 3, 4i − 2, 4i − 1, 4i from the first vote vector, and the remaining votes from the second vote vector.",
                "In this newly constructed vote vector, c1 k(i) and d1 k(i) each receive 4n /m+2 votes in the first round, whereas a receives at most 4n /m+1 votes.",
                "So, a does not continue to the runoff in the newly constructed vote vector, and hence we have a correct fooling set.",
                "Theorem 6.",
                "The nondeterministic <br>communication complexity</br> of the Borda rule is Ω(nm log m) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We will exhibit a fooling set of size (m ! )n where m = m−2 and n = (n−2)/4.",
                "This will prove the theorem because m ! is Ω(m log m), so that log((m ! )n ) = n log(m !) is Ω(nm log m).",
                "For every vector (π1, π2, . . . , πn ) consisting of n orderings of all candidates other than a and another fixed candidate b (technically, the orderings take the form of a one-to-one function πi : {1, 2, . . . , m } → C − {a, b} with πi(j) = c indicating that candidate c is the jth in the order represented by πi), let the following vector of votes be an element of the fooling set: • For 1 ≤ i ≤ n , let voters 4i − 3 and 4i − 2 rank the candidates a b πi(1) πi(2) . . . πi(m ). • For 1 ≤ i ≤ n , let voters 4i − 1 and 4i rank the candidates πi(m ) πi(m − 1) . . . πi(1) b a. • Let voter 4n + 1 = n − 1 rank the candidates a b π0(1) π0(2) . . . π0(m ) (where π0 is an arbitrary order of the candidates other than a and b which is the same for every element of the fooling set). • Let voter 4n + 2 = n rank the candidates π0(m ) π0(m − 1) . . . π0(1) a b.",
                "We observe that this fooling set has size (m ! )n , and that candidate a wins in each vector of votes in the fooling set (to 82 see why, we observe that for any 1 ≤ i ≤ n , votes 4i−3 and 4i − 2 rank the candidates in the exact opposite way from votes 4i − 1 and 4i, which under the Borda rule means they cancel out; and the last two votes give one more point to a than to any other candidate-besides b who gets two fewer points than a).",
                "All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses.",
                "Let the first vote vector correspond to the vector (π1 1, π1 2, . . . , π1 n ), and let the second vote vector correspond to the vector (π2 1, π2 2, . . . , π2 n ).",
                "For some i, we must have π1 i = π2 i , so that for some candidate c /∈ {a, b}, (π1 i )−1 (c) < (π2 i )−1 (c) (that is, c is ranked higher in π1 i than in π2 i ).",
                "Now, construct a new vote vector by taking votes 4i−3 and 4i−2 from the first vote vector, and the remaining votes from the second vote vector. as Borda score remains unchanged.",
                "However, because c is ranked higher in π1 i than in π2 i , c receives at least 2 more points from votes 4i−3 and 4i − 2 in the newly constructed vote vector than it did in the second vote vector.",
                "It follows that c has a higher Borda score than a in the newly constructed vote vector.",
                "So, a is not the winner in the newly constructed vote vector, and hence we have a correct fooling set.",
                "Theorem 7.",
                "The nondeterministic <br>communication complexity</br> of the Copeland rule is Ω(nm log m) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We will exhibit a fooling set of size (m ! )n where m = (m − 2)/2 and n = (n − 2)/2.",
                "This will prove the theorem because m ! is Ω(m log m), so that log((m ! )n ) = n log(m !) is Ω(nm log m).",
                "We write the set of candidates as the following disjoint union: C = {a, b} ∪ L ∪ R where L = {l1, l2, . . . , lm } and R = {r1, r2, . . . , rm }.",
                "For every vector (π1, π2, . . . , πn ) consisting of n permutations of the integers 1 through m (πi : {1, 2, . . . , m } → {1, 2, . . . , m }), let the following vector of votes be an element of the fooling set: • For 1 ≤ i ≤ n , let voter 2i − 1 rank the candidates a b lπi(1) rπi(1) lπi(2) rπi(2) . . . lπi(m ) rπi(m ). • For 1 ≤ i ≤ n , let voter 2i rank the candidates rπi(m ) lπi(m ) rπi(m −1) lπi(m −1) . . . rπi(1) lπi(1) b a. • Let voter n − 1 = 2n + 1 rank the candidates a b l1 r1 l2 r2 . . . lm rm . • Let voter n = 2n +2 rank the candidates rm lm rm −1 lm −1 . . . r1 l1 a b.",
                "We observe that this fooling set has size (m ! )n , and that candidate a wins in each vector of votes in the fooling set (every pair of candidates is tied in their pairwise election, with the exception that a defeats b, so that a wins the election by half a point).",
                "All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses.",
                "Let the first vote vector correspond to the vector (π1 1, π1 2, . . . , π1 n ), and let the second vote vector correspond to the vector (π2 1, π2 2, . . . , π2 n ).",
                "For some i, we must have π1 i = π2 i , so that for some j ∈ {1, 2, . . . , m }, we have (π1 i )−1 (j) < (π2 i )−1 (j).",
                "Now, construct a new vote vector by taking vote 2i−1 from the first vote vector, and the remaining votes from the second vote vector. as Copeland score remains unchanged.",
                "Let us consider the score of lj.",
                "We first observe that the rank of lj in vote 2i − 1 in the newly constructed vote vector is at least 2 higher than it was in the second vote vector, because (π1 i )−1 (j) < (π2 i )−1 (j).",
                "Let D1 (lj) be the set of candidates in L ∪ R that voter 2i − 1 ranked lower than lj in the first vote vector (D1 (lj) = {c ∈ L ∪ R : lj 1 2i−1 c}), and let D2 (lj) be the set of candidates in L ∪ R that voter 2i − 1 ranked lower than lj in the second vote vector (D2 (lj) = {c ∈ L ∪ R : lj 2 2i−1 c}).",
                "Then, it follows that in the newly constructed vote vector, lj defeats all the candidates in D1 (lj) − D2 (lj) in their pairwise elections (because lj receives an extra vote in each one of these pairwise elections relative to the second vote vector), and loses to all the candidates in D2 (lj) − D1 (lj) (because lj loses a vote in each one of these pairwise elections relative to the second vote vector), and ties with everyone else.",
                "But |D1 (lj)|−|D2 (lj)| ≥ 2, and hence |D1 (lj) − D2 (lj)| − |D2 (lj) − D1 (lj)| ≥ 2.",
                "Hence, in the newly constructed vote vector, lj has at least two more pairwise wins than pairwise losses, and therefore has at least 1 more point than if lj had tied all its pairwise elections.",
                "Thus, lj has a higher Copeland score than a in the newly constructed vote vector.",
                "So, a is not the winner in the newly constructed vote vector, and hence we have a correct fooling set.",
                "Theorem 8.",
                "The nondeterministic <br>communication complexity</br> of the maximin rule is O(nm).",
                "Proof.",
                "The nondeterministic protocol will guess which candidate w is the winner, and, for each other candidate c, which candidate o(c) is the candidate against whom c receives its lowest score in a pairwise election.",
                "Then, let every voter communicate the following: • for each candidate c = w, whether she prefers c to w; • for each candidate c = w, whether she prefers c to o(c).",
                "We observe that this requires the communication of 2n(m− 1) bits.",
                "If the guesses were correct, then, letting N(d, e) be the number of voters preferring candidate d to candidate e, we should have N(c, o(c)) < N(w, c ) for any c = w, c = w, which will prove that w wins the election.",
                "Theorem 9.",
                "The nondeterministic <br>communication complexity</br> of the maximin rule is Ω(nm) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We will exhibit a fooling set of size 2n m where m = m − 2 and n = (n − 1)/4.",
                "Let b be a candidate other than a.",
                "For every vector (S1, S2, . . . , Sn ) consisting of n subsets Si ⊆ C − {a, b}, let the following vector of votes be an element of the fooling set: • For 1 ≤ i ≤ n , let voters 4i − 3 and 4i − 2 rank the candidates Si a C − (Si ∪ {a, b}) b. • For 1 ≤ i ≤ n , let voters 4i − 1 and 4i rank the candidates b C − (Si ∪ {a, b}) a Si. 83 • Let voter 4n + 1 = n rank the candidates a b C − {a, b}.",
                "We observe that this fooling set has size (2m )n = 2n m , and that candidate a wins in each vector of votes in the fooling set (in every one of as pairwise elections, a is ranked higher than its opponent by 2n +1 = (n+1)/2 > n/2 votes).",
                "All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses.",
                "Let the first vote vector correspond to the vector (S1 1 , S1 2 , . . . , S1 n ), and let the second vote vector correspond to the vector (S2 1 , S2 2 , . . . , S2 n ).",
                "For some i, we must have S1 i = S2 i , so that either S1 i S2 i or S2 i S1 i .",
                "Without loss of generality, suppose S1 i S2 i , and let c be some candidate in S1 i − S2 i .",
                "Now, construct a new vote vector by taking votes 4i − 3 and 4i − 2 from the first vote vector, and the remaining votes from the second vote vector.",
                "In this newly constructed vote vector, a is ranked higher than c by only 2n −1 voters, for the following reason.",
                "Whereas voters 4i−3 and 4i − 2 do not rank c higher than a in the second vote vector (because c /∈ S2 i ), voters 4i − 3 and 4i − 2 do rank c higher than a in the first vote vector (because c ∈ S1 i ).",
                "Moreover, in every one of bs pairwise elections, b is ranked higher than its opponent by at least 2n voters.",
                "So, a has a lower maximin score than b, therefore a is not the winner in the newly constructed vote vector, and hence we have a correct fooling set.",
                "Theorem 10.",
                "The deterministic <br>communication complexity</br> of the STV rule is O(n(log m)2 ).",
                "Proof.",
                "Consider the following communication protocol.",
                "Let each voter first announce her most preferred candidate (O(n log m) communication).",
                "In the remaining rounds, we will keep track of each voters most preferred candidate among the remaining candidates, which will be enough to implement the rule.",
                "When candidate c is eliminated, let each of the voters whose most preferred candidate among the remaining candidates was c announce their most preferred candidate among the candidates remaining after cs elimination.",
                "If candidate c was the ith candidate to be eliminated (that is, there were m − i + 1 candidates remaining before cs elimination), it follows that at most n/(m − i + 1) voters had candidate c as their most preferred candidate among the remaining candidates, and thus the number of bits to be communicated after the elimination of the ith candidate is O((n/(m−i+1)) log m).7 Thus, the total communication in this communication protocol is O(n log m + m−1 i=1 (n/(m − i + 1)) log m).",
                "Of course, m−1 i=1 1/(m − i + 1) = m i=2 1/i, which is O(log m).",
                "Substituting into the previous expression, we find that the <br>communication complexity</br> is O(n(log m)2 ).",
                "Theorem 11.",
                "The nondeterministic <br>communication complexity</br> of the STV rule is Ω(n log m) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We omit this proof because of space constraint. 7 Actually, O((n/(m − i + 1)) log(m − i + 1)) is also correct, but it will not improve the bound.",
                "Theorem 12.",
                "The deterministic <br>communication complexity</br> of the approval rule is O(nm).",
                "Proof.",
                "Approving or disapproving of a candidate requires only one bit of information, so every voter can simply approve or disapprove of every candidate for a total communication of nm bits.",
                "Theorem 13.",
                "The nondeterministic <br>communication complexity</br> of the approval rule is Ω(nm) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We will exhibit a fooling set of size 2n m where m = m − 1 and n = (n − 1)/4.",
                "For every vector (S1, S2, . . . , Sn ) consisting of n subsets Si ⊆ C − {a}, let the following vector of votes be an element of the fooling set: • For 1 ≤ i ≤ n , let voters 4i − 3 and 4i − 2 approve Si ∪ {a}. • For 1 ≤ i ≤ n , let voters 4i − 1 and 4i approve C − (Si ∪ {a}). • Let voter 4n + 1 = n approve {a}.",
                "We observe that this fooling set has size (2m )n = 2n m , and that candidate a wins in each vector of votes in the fooling set (a is approved by 2n + 1 voters, whereas each other candidate is approved by only 2n voters).",
                "All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses.",
                "Let the first vote vector correspond to the vector (S1 1 , S1 2 , . . . , S1 n ), and let the second vote vector correspond to the vector (S2 1 , S2 2 , . . . , S2 n ).",
                "For some i, we must have S1 i = S2 i , so that either S1 i S2 i or S2 i S1 i .",
                "Without loss of generality, suppose S1 i S2 i , and let b be some candidate in S1 i − S2 i .",
                "Now, construct a new vote vector by taking votes 4i − 3 and 4i − 2 from the first vote vector, and the remaining votes from the second vote vector.",
                "In this newly constructed vote vector, a is still approved by 2n + 1 votes.",
                "However, b is approved by 2n + 2 votes, for the following reason.",
                "Whereas voters 4i−3 and 4i−2 do not approve b in the second vote vector (because b /∈ S2 i ), voters 4i − 3 and 4i − 2 do approve b in the first vote vector (because b ∈ S1 i ).",
                "It follows that bs score in the newly constructed vote vector is bs score in the second vote vector (2n ), plus two.",
                "So, a is not the winner in the newly constructed vote vector, and hence we have a correct fooling set.",
                "Interestingly, an Ω(m) lower bound can be obtained even for the problem of finding a candidate that is approved by more than one voter [20].",
                "Theorem 14.",
                "The deterministic <br>communication complexity</br> of the Condorcet rule is O(nm).",
                "Proof.",
                "We maintain a set of active candidates S which is initialized to C. At each stage, we choose two of the active candidates (say, the two candidates with the lowest indices), and we let each voter communicate which of the two candidates she prefers. (Such a stage requires the communication of n bits, one per voter.)",
                "The candidate preferred by fewer 84 voters (the loser of the pairwise election) is removed from S. (If the pairwise election is tied, both candidates are removed.)",
                "After at most m − 1 iterations, only one candidate is left (or zero candidates are left, in which case there is no Condorcet winner).",
                "Let a be the remaining candidate.",
                "To find out whether candidate a is the Condorcet winner, let each voter communicate, for every candidate c = a, whether she prefers a to c. (This requires the communication of at most n(m − 1) bits.)",
                "This is enough to establish whether a won each of its pairwise elections (and thus, whether a is the Condorcet winner).",
                "Theorem 15.",
                "The nondeterministic <br>communication complexity</br> of the Condorcet rule is Ω(nm) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We will exhibit a fooling set of size 2n m where m = m − 1 and n = (n − 1)/2.",
                "For every vector (S1, S2, . . . , Sn ) consisting of n subsets Si ⊆ C − {a}, let the following vector of votes be an element of the fooling set: • For 1 ≤ i ≤ n , let voter 2i − 1 rank the candidates Si a C − Si. • For 1 ≤ i ≤ n , let voter 2i rank the candidates C − Si a Si. • Let voter 2n +1 = n rank the candidates a C −{a}.",
                "We observe that this fooling set has size (2m )n = 2n m , and that candidate a wins in each vector of votes in the fooling set (a wins each of its pairwise elections by a single vote).",
                "All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses.",
                "Let the first vote vector correspond to the vector (S1 1 , S1 2 , . . . , S1 n ), and let the second vote vector correspond to the vector (S2 1 , S2 2 , . . . , S2 n ).",
                "For some i, we must have S1 i = S2 i , so that either S1 i S2 i or S2 i S1 i .",
                "Without loss of generality, suppose S1 i S2 i , and let b be some candidate in S1 i − S2 i .",
                "Now, construct a new vote vector by taking vote 2i − 1 from the first vote vector, and the remaining votes from the second vote vector.",
                "In this newly constructed vote vector, b wins its pairwise election against a by one vote (vote 2i − 1 ranks b above a in the newly constructed vote vector because b ∈ S1 i , whereas in the second vote vector vote 2i − 1 ranked a above b because b /∈ S2 i ).",
                "So, a is not the Condorcet winner in the newly constructed vote vector, and hence we have a correct fooling set.",
                "Theorem 16.",
                "The deterministic <br>communication complexity</br> of the cup rule is O(nm).",
                "Proof.",
                "Consider the following simple communication protocol.",
                "First, let all the voters communicate, for every one of the matchups in the first round, which of its two candidates they prefer.",
                "After this, the matchups for the second round are known, so let all the voters communicate which candidate they prefer in each matchup in the second round-etc.",
                "Because communicating which of two candidates is preferred requires only one bit per voter, and because there are only m − 1 matchups in total, this communication protocol requires O(nm) communication.",
                "Theorem 17.",
                "The nondeterministic <br>communication complexity</br> of the cup rule is Ω(nm) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We will exhibit a fooling set of size 2n m where m = (m − 1)/2 and n = (n − 7)/2.",
                "Given that m + 1 is a power of 2, so that one candidate gets a bye (that is, does not face an opponent) in the first round, let a be the candidate with the bye.",
                "Of the m first-round matchups, let lj denote the one (left) candidate in the jth matchup, and let rj be the other (right) candidate.",
                "Let L = {lj : 1 ≤ j ≤ m } and R = {rj : 1 ≤ j ≤ m }, so that C = L ∪ R ∪ {a}. . . . . . . . . . l r l r l r a m1 1 2 2 m Figure 1: The schedule for the cup rule used in the proof of Theorem 17.",
                "For every vector (S1, S2, . . . , Sn ) consisting of n subsets Si ⊆ R, let the following vector of votes be an element of the fooling set: • For 1 ≤ i ≤ n , let voter 2i − 1 rank the candidates Si L a R − Si. • For 1 ≤ i ≤ n , let voter 2i rank the candidates R − Si L a Si. • Let voters 2n +1 = n−6, 2n +2 = n−5, 2n +3 = n−4 rank the candidates L a R. • Let voters 2n + 4 = n − 3, 2n + 5 = n − 2 rank the candidates a r1 l1 r2 l2 . . . rm lm . • Let voters 2n + 6 = n − 1, 2n + 7 = n rank the candidates rm lm rm −1 lm −1 . . . r1 l1 a.",
                "We observe that this fooling set has size (2m )n = 2n m .",
                "Also, candidate a wins in each vector of votes in the fooling set, for the following reasons.",
                "Each candidate rj defeats its opponent lj in the first round. (For any 1 ≤ i ≤ n , the net effect of votes 2i − 1 and 2i on the pairwise election between rj and lj is zero; votes n − 6, n − 5, n − 4 prefer lj to rj, but votes n − 3, n − 2, n − 1, n all prefer rj to lj.)",
                "Moreover, a defeats every rj in their pairwise election. (For any 1 ≤ i ≤ n , the net effect of votes 2i − 1 and 2i on the pairwise election between a and rj is zero; votes n − 1, n prefer rj to a, but votes n − 6, n − 5, n − 4, n − 3, n − 2 all prefer a to rj.)",
                "It follows that a will defeat all the candidates that it faces.",
                "All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses.",
                "Let the first vote vector correspond to the vector 85 (S1 1 , S1 2 , . . . , S1 n ), and let the second vote vector correspond to the vector (S2 1 , S2 2 , . . . , S2 n ).",
                "For some i, we must have S1 i = S2 i , so that either S1 i S2 i or S2 i S1 i .",
                "Without loss of generality, suppose S1 i S2 i , and let rj be some candidate in S1 i − S2 i .",
                "Now, construct a new vote vector by taking vote 2i from the first vote vector, and the remaining votes from the second vote vector.",
                "We note that, whereas in the second vote vector vote 2i preferred rj to lj (because rj ∈ R−S2 i ), in the newly constructed vote vector this is no longer the case (because rj ∈ S1 i ).",
                "It follows that, whereas in the second vote vector, rj defeated lj in the first round by one vote, in the newly constructed vote vector, lj defeats rj in the first round.",
                "Thus, at least one lj advances to the second round after defeating its opponent rj.",
                "Now, we observe that in the newly constructed vote vector, any lk wins its pairwise election against any rq with q = k. This is because among the first 2n votes, at least n − 1 prefer lk to rq; votes n − 6, n − 5, n − 4 prefer lk to rq; and, because q = k, either votes n − 3, n − 2 prefer lk to rq (if k < q), or votes n − 1, n prefer lk to rq (if k > q).",
                "Thus, at least n + 4 = (n + 1)/2 > n/2 votes prefer lk to rq.",
                "Moreover, any lk wins its pairwise election against a.",
                "This is because only votes n − 3 and n − 2 prefer a to lk.",
                "It follows that, after the first round, any surviving candidate lk can only lose a matchup against another surviving lk , so that one of the lk must win the election.",
                "So, a is not the winner in the newly constructed vote vector, and hence we have a correct fooling set.",
                "Theorem 18.",
                "The deterministic <br>communication complexity</br> of the Bucklin rule is O(nm).",
                "Proof.",
                "Let l be the minimum integer for which there is a candidate who is ranked among the top l candidates by more than half the votes.",
                "We will do a binary search for l. At each point, we will have a lower bound lL which is smaller than l (initialized to 0), and an upper bound lH which is at least l (initialized to m).",
                "While lH − lL > 1, we continue by finding out whether (lH − l)/2 is smaller than l, after which we can update the bounds.",
                "To find out whether a number k is smaller than l, we determine every voters k most preferred candidates.",
                "Every voter can communicate which candidates are among her k most preferred candidates using m bits (for each candidate, indicate whether the candidate is among the top k or not), but because the binary search requires log m iterations, this gives us an upper bound of O((log m)nm), which is not strong enough.",
                "However, if lL < k < lH , and we already know a voters lL most preferred candidates, as well as her lH most preferred candidates, then the voter no longer needs to communicate whether the lL most preferred candidates are among her k most preferred candidates (because they must be), and she no longer needs to communicate whether the m−lH least preferred candidates are among her k most preferred candidates (because they cannot be).",
                "Thus the voter needs to communicate only m−lL −(m−lH ) = lH −lL bits in any given stage.",
                "Because each stage, lH − lL is (roughly) halved, each voter in total communicates only (roughly) m + m/2 + m/4 + . . . ≤ 2m bits.",
                "Theorem 19.",
                "The nondeterministic <br>communication complexity</br> of the Bucklin rule is Ω(nm) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We will exhibit a fooling set of size 2n m where m = (m−1)/2 and n = n/2.",
                "We write the set of candidates as the following disjoint union: C = {a} ∪ L ∪ R where L = {l1, l2, . . . , lm } and R = {r1, r2, . . . , rm }.",
                "For any subset S ⊆ {1, 2, . . . , m }, let L(S) = {li : i ∈ S} and let R(S) = {ri : i ∈ S}.",
                "For every vector (S1, S2, . . . , Sn ) consisting of n sets Si ⊆ {1, 2, . . . , m }, let the following vector of votes be an element of the fooling set: • For 1 ≤ i ≤ n , let voter 2i − 1 rank the candidates L(Si) R − R(Si) a L − L(Si) R(Si). • For 1 ≤ i ≤ n , let voter 2i rank the candidates L − L(Si) R(Si) a L(Si) R − R(Si).",
                "We observe that this fooling set has size (2m )n = 2n m , and that candidate a wins in each vector of votes in the fooling set, for the following reason.",
                "Each candidate in C − {a} is ranked among the top m candidates by exactly half the voters (which is not enough to win).",
                "Thus, we need to look at the voters top m +1 candidates, and a is ranked m +1th by all voters.",
                "All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses.",
                "Let the first vote vector correspond to the vector (S1 1 , S1 2 , . . . , S1 n ), and let the second vote vector correspond to the vector (S2 1 , S2 2 , . . . , S2 n ).",
                "For some i, we must have S1 i = S2 i , so that either S1 i S2 i or S2 i S1 i .",
                "Without loss of generality, suppose S1 i S2 i , and let j be some integer in S1 i − S2 i .",
                "Now, construct a new vote vector by taking vote 2i − 1 from the first vote vector, and the remaining votes from the second vote vector.",
                "In this newly constructed vote vector, a is still ranked m + 1th by all votes.",
                "However, lj is ranked among the top m candidates by n + 1 = n/2 + 1 votes.",
                "This is because whereas vote 2i − 1 does not rank lj among the top m candidates in the second vote vector (because j /∈ S2 i , we have lj /∈ L(S2 i )), vote 2i − 1 does rank lj among the top m candidates in the first vote vector (because j ∈ S1 i , we have lj ∈ L(S1 i )).",
                "So, a is not the winner in the newly constructed vote vector, and hence we have a correct fooling set.",
                "Theorem 20.",
                "The nondeterministic <br>communication complexity</br> of the ranked pairs rule is Ω(nm log m) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We omit this proof because of space constraint. 5.",
                "DISCUSSION One key obstacle to using voting for preference aggregation is the communication burden that an election places on the voters.",
                "By lowering this burden, it may become feasible to conduct more elections over more issues.",
                "In the limit, this could lead to a shift from representational government to a system in which most issues are decided by referenda-a veritable e-democracy.",
                "In this paper, we analyzed the <br>communication complexity</br> of the common voting rules.",
                "Knowing which voting rules require little communication is especially important when the issue to be voted on is of low enough importance that the following is true: the parties involved are willing to accept a rule that tends 86 to produce outcomes that are slightly less representative of the voters preferences, if this rule reduces the communication burden on the voters significantly.",
                "The following table summarizes the results we obtained.",
                "Rule Lower bound Upper bound plurality Ω(n log m) O(n log m) plurality w/ runoff Ω(n log m) O(n log m) STV Ω(n log m) O(n(log m)2) Condorcet Ω(nm) O(nm) approval Ω(nm) O(nm) Bucklin Ω(nm) O(nm) cup Ω(nm) O(nm) maximin Ω(nm) O(nm) Borda Ω(nm log m) O(nm log m) Copeland Ω(nm log m) O(nm log m) ranked pairs Ω(nm log m) O(nm log m) <br>communication complexity</br> of voting rules, sorted from low to high.",
                "All of the upper bounds are deterministic (with the exception of maximin, for which the best deterministic upper bound we proved is O(nm log m)).",
                "All of the lower bounds hold even for nondeterministic communication and even just for determining whether a given candidate a is the winner.",
                "One area of future research is to study what happens when we restrict our attention to communication protocols that do not reveal any strategically useful information.",
                "This restriction may invalidate some of the upper bounds that we derived using multistage communication protocols.",
                "Also, all of our bounds are worst-case bounds.",
                "It may be possible to outperform these bounds when the distribution of votes has additional structure.",
                "When deciding which voting rule to use for an election, there are many considerations to take into account.",
                "The voting rules that we studied in this paper are the most common ones that have survived the test of time.",
                "One way to select among these rules is to consider recent results on complexity.",
                "The table above shows that from a <br>communication complexity</br> perspective, plurality, plurality with runoff, and STV are preferable.",
                "However, plurality has the undesirable property that it is computationally easy to manipulate by voting strategically [3, 7].",
                "Plurality with runoff is NP-hard to manipulate by a coalition of weighted voters, or by an individual that faces correlated uncertainty about the others votes [7, 6].",
                "STV is NP-hard to manipulate in those settings as well [7], but also by an individual with perfect knowledge of the others votes (when the number of candidates is unbounded) [2].",
                "Therefore, STV is more robust, although it may require slightly more worst-case communication as per the table above.",
                "Yet other selection criteria are the computational complexity of determining whether enough information has been elicited to declare a winner, and that of determining the optimal sequence of queries [8]. 6.",
                "REFERENCES [1] Lawrence Ausubel and Paul Milgrom.",
                "Ascending auctions with package bidding.",
                "Frontiers of Theoretical Economics, 1, 2002.",
                "No. 1, Article 1. [2] John Bartholdi, III and James Orlin.",
                "Single transferable vote resists strategic voting.",
                "Social Choice and Welfare, 8(4):341-354, 1991. [3] John Bartholdi, III, Craig Tovey, and Michael Trick.",
                "The computational difficulty of manipulating an election.",
                "Social Choice and Welfare, 6(3):227-241, 1989. [4] Avrim Blum, Jeffrey Jackson, Tuomas Sandholm, and Martin Zinkevich.",
                "Preference elicitation and query learning.",
                "Journal of Machine Learning Research, 5:649-667, 2004. [5] Wolfram Conen and Tuomas Sandholm.",
                "Preference elicitation in combinatorial auctions: Extended abstract.",
                "In Proceedings of the ACM Conference on Electronic Commerce (ACM-EC), pages 256-259, 2001. [6] Vincent Conitzer, Jerome Lang, and Tuomas Sandholm.",
                "How many candidates are needed to make elections hard to manipulate?",
                "In Theoretical Aspects of Rationality and Knowledge (TARK), pages 201-214, 2003. [7] Vincent Conitzer and Tuomas Sandholm.",
                "Complexity of manipulating elections with few candidates.",
                "In Proceedings of the National Conference on Artificial Intelligence (AAAI), pages 314-319, 2002. [8] Vincent Conitzer and Tuomas Sandholm.",
                "Vote elicitation: Complexity and strategy-proofness.",
                "In Proceedings of the National Conference on Artificial Intelligence (AAAI), pages 392-397, 2002. [9] Sven de Vries, James Schummer, and Rakesh V. Vohra.",
                "On ascending auctions for heterogeneous objects, 2003.",
                "Draft. [10] Allan Gibbard.",
                "Manipulation of voting schemes.",
                "Econometrica, 41:587-602, 1973. [11] Benoit Hudson and Tuomas Sandholm.",
                "Effectiveness of query types and policies for preference elicitation in combinatorial auctions.",
                "In International Conference on Autonomous Agents and Multi-Agent Systems (AAMAS), pages 386-393, 2004. [12] E Kushilevitz and N Nisan.",
                "<br>communication complexity</br>.",
                "Cambridge University Press, 1997. [13] Sebasti´en Lahaie and David Parkes.",
                "Applying learning algorithms to preference elicitation.",
                "In Proceedings of the ACM Conference on Electronic Commerce, 2004. [14] Noam Nisan and Ilya Segal.",
                "The communication requirements of efficient allocations and supporting prices.",
                "Journal of Economic Theory, 2005.",
                "Forthcoming. [15] David Parkes. iBundle: An efficient ascending price bundle auction.",
                "In Proceedings of the ACM Conference on Electronic Commerce (ACM-EC), pages 148-157, 1999. [16] Tuomas Sandholm.",
                "An implementation of the contract net protocol based on marginal cost calculations.",
                "In Proceedings of the National Conference on Artificial Intelligence (AAAI), pages 256-262, 1993. [17] Tuomas Sandholm and Craig Boutilier.",
                "Preference elicitation in combinatorial auctions.",
                "In Peter Cramton, Yoav Shoham, and Richard Steinberg, editors, Combinatorial Auctions, chapter 10.",
                "MIT Press, 2005. [18] Paolo Santi, Vincent Conitzer, and Tuomas Sandholm.",
                "Towards a characterization of polynomial preference elicitation with value queries in combinatorial auctions.",
                "In Conference on Learning Theory (COLT), pages 1-16, 2004. [19] Mark Satterthwaite.",
                "Strategy-proofness and Arrows conditions: existence and correspondence theorems for voting procedures and social welfare functions.",
                "Journal of Economic Theory, 10:187-217, 1975. [20] Ilya Segal.",
                "The communication requirements of social choice rules and supporting budget sets, 2004.",
                "Draft.",
                "Presented at the DIMACS Workshop on Computational Issues in Auction Design, Rutgers University, New Jersey, USA. [21] Peter Wurman and Michael Wellman.",
                "AkBA: A progressive, anonymous-price combinatorial auction.",
                "In Proceedings of the ACM Conference on Electronic Commerce (ACM-EC), pages 21-29, 2000. [22] A. C. Yao.",
                "Some complexity questions related to distributed computing.",
                "In Proceedings of the 11th ACM symposium on theory of computing (STOC), pages 209-213, 1979. [23] Martin Zinkevich, Avrim Blum, and Tuomas Sandholm.",
                "On polynomial-time preference elicitation with value queries.",
                "In Proceedings of the ACM Conference on Electronic Commerce (ACM-EC), pages 176-185, 2003. 87"
            ],
            "original_annotated_samples": [
                "<br>communication complexity</br> of Common Voting Rules∗ Vincent Conitzer Carnegie Mellon University 5000 Forbes Avenue Pittsburgh, PA 15213, USA conitzer@cs.cmu.edu Tuomas Sandholm Carnegie Mellon University 5000 Forbes Avenue Pittsburgh, PA 15213, USA sandholm@cs.cmu.edu ABSTRACT We determine the <br>communication complexity</br> of the common voting rules.",
                "The rules (sorted by their <br>communication complexity</br> from low to high) are plurality, plurality with runoff, single transferable vote (STV), Condorcet, approval, Bucklin, cup, maximin, Borda, Copeland, and ranked pairs.",
                "Finally, resource 78 allocation problems have also been studied from a <br>communication complexity</br> viewpoint, thereby deriving lower bounds on the required communication.",
                "We determine the <br>communication complexity</br> of the common voting rules.",
                "For each rule, we first give an upper bound on the (deterministic) <br>communication complexity</br> by providing a communication protocol for it and analyzing how many bits need to be transmitted in this protocol. (Segals results [20] do not apply to most voting rules because most voting rules are not intersectionmonotonic (or even monotonic).1 ) For many of the voting rules under study, it turns out that one cannot do better than simply letting each voter immediately communicate all her (potentially relevant) information."
            ],
            "translated_annotated_samples": [
                "Determinamos la <br>complejidad de comunicación</br> de las reglas de votación comunes.",
                "Las reglas (ordenadas por su <br>complejidad de comunicación</br> de baja a alta) son pluralidad, pluralidad con segunda vuelta, voto único transferible (STV), Condorcet, aprobación, Bucklin, taza, maximin, Borda, Copeland y pares clasificados.",
                "Finalmente, los problemas de asignación de recursos 78 también han sido estudiados desde el punto de vista de la <br>complejidad de la comunicación</br>, derivando así límites inferiores sobre la comunicación requerida.",
                "Determinamos la <br>complejidad de comunicación</br> de las reglas de votación comunes.",
                "Para cada regla, primero damos una cota superior en la <br>complejidad de comunicación</br> (determinística) proporcionando un protocolo de comunicación para ella y analizando cuántos bits necesitan ser transmitidos en este protocolo. (Los resultados de Segal [20] no se aplican a la mayoría de las reglas de votación porque la mayoría de las reglas de votación no son intersección-monótonas (o incluso monótonas).) Para muchas de las reglas de votación bajo estudio, resulta que no se puede hacer mejor que simplemente permitir que cada votante comunique inmediatamente toda su información (potencialmente relevante)."
            ],
            "translated_text": "Determinamos la <br>complejidad de comunicación</br> de las reglas de votación comunes. Las reglas (ordenadas por su <br>complejidad de comunicación</br> de baja a alta) son pluralidad, pluralidad con segunda vuelta, voto único transferible (STV), Condorcet, aprobación, Bucklin, taza, maximin, Borda, Copeland y pares clasificados. Para cada regla, primero proporcionamos un protocolo de comunicación determinista y un límite superior en la cantidad de bits comunicados en él; luego, damos un límite inferior en los requisitos de comunicación (incluso los no deterministas) de la regla de votación. Los límites coinciden para todas las reglas de votación excepto STV y maximin. Categorías y Descriptores de Asignaturas F.2 [Teoría de la Computación]: Análisis de Algoritmos y Complejidad de Problemas; J.4 [Aplicaciones Informáticas]: Ciencias Sociales y del Comportamiento-Economía Términos Generales Algoritmos, Economía, Teoría 1. INTRODUCCIÓN Un factor clave en la viabilidad de cualquier regla de agregación de preferencias es su carga de comunicación. Para agregar con éxito las preferencias de los agentes, generalmente no es necesario que todos los agentes informen toda su información de preferencias. Los protocolos inteligentes que obtienen parcial y secuencialmente las preferencias de los agentes tienen el potencial de reducir drásticamente la comunicación requerida. Esto tiene al menos las siguientes ventajas: • Puede hacer factible la agregación de preferencias en entornos donde la cantidad total de información de preferencias es demasiado grande para comunicar. • Incluso cuando comunicar toda la información de preferencias es factible, reducir los requisitos de comunicación disminuye la carga impuesta a los agentes. Esto es especialmente cierto cuando los agentes, en lugar de conocer todas sus preferencias de antemano, necesitan invertir esfuerzo (como cálculos o recopilación de información) para determinar sus preferencias. • Preserva (parte de) la privacidad de los agentes. La mayor parte del trabajo sobre la reducción de la carga de comunicación en la agregación de preferencias se ha centrado en entornos de asignación de recursos como subastas combinatorias, en las que un subastador subasta un número de artículos (posiblemente distintos) en un solo evento. Debido a que en una subasta combinatoria, los postores pueden tener valoraciones separadas para cada uno de un número exponencial de posibles paquetes de artículos, este es un escenario en el que reducir la carga de comunicación es especialmente crucial. Esto se puede lograr complementando al subastador con un provocador que elicitara incrementalmente partes de las preferencias de los postores según sea necesario, basándose en lo que los postores han revelado sobre sus preferencias hasta el momento, como sugieren Conen y Sandholm [5]. Por ejemplo, el solicitante puede preguntar por el valor de un postor para un paquete específico (consultas de valor), cuál de dos paquetes prefiere el postor (consultas de orden), qué paquete clasifica en la posición k o cuál es la posición de un paquete dado (consultas de clasificación), qué paquete compraría dado un vector particular de precios (consultas de demanda), etc., hasta que se pueda determinar (al menos) la asignación final. Experimentalmente, esto produce a drástico ahorro en la revelación de preferencias [11]. Además, si las funciones de valoración de los agentes provienen de ciertas subclases naturales, el problema de la obtención de información puede resolverse utilizando solo un número polinomial de consultas incluso en el peor de los casos [23, 4, 13, 18, 14]. Para una revisión de la obtención de preferencias en subastas combinatorias, consulte [17]. Las subastas combinatorias ascendentes son una forma especial conocida de obtención de preferencias, donde el encuestador realiza consultas de demanda con precios crecientes [15, 21, 1, 9]. Finalmente, los problemas de asignación de recursos 78 también han sido estudiados desde el punto de vista de la <br>complejidad de la comunicación</br>, derivando así límites inferiores sobre la comunicación requerida. Por ejemplo, Nisan y Segal muestran que se requiere comunicación exponencial incluso para obtener un excedente mayor al obtenido al subastar todos los objetos como un único paquete [14]. Segal también estudia reglas de elección social en general, y muestra que para una gran clase de reglas de elección social, los conjuntos de presupuesto de apoyo deben ser revelados de tal manera que si cada agente prefiere el mismo resultado en su conjunto de presupuesto, esto demuestra la optimalidad de ese resultado. Segal luego utiliza esta caracterización para demostrar límites en la comunicación requerida en la asignación de recursos, así como en entornos de emparejamiento [20]. En este documento, nos enfocaremos en los requisitos de comunicación de una subclase generalmente aplicable de reglas de elección social, comúnmente conocidas como reglas de votación. En un entorno de votación, hay un conjunto de resultados de candidatos sobre los cuales los votantes expresan sus preferencias al enviar un voto (normalmente, una clasificación de los candidatos), y el ganador (es decir, el resultado elegido) se determina en función de estos votos. La comunicación requerida por las reglas de votación puede ser grande ya sea porque el número de votantes es grande (como, por ejemplo, en elecciones nacionales), o porque el número de candidatos es grande (por ejemplo, los agentes pueden votar sobre asignaciones de un número de recursos), o ambos. El trabajo previo [8] ha estudiado la obtención de información en votaciones, analizando qué tan difícil es computacionalmente decidir si se puede determinar un ganador con la información obtenida hasta el momento, así como qué tan difícil es encontrar la secuencia óptima de preguntas dadas sospechas perfectas sobre las preferencias de los votantes. Además, ese artículo discute cuestiones estratégicas (teóricas de juegos) introducidas por la obtención de información. Por el contrario, en este artículo nos preocupamos por el número máximo de bits que deben comunicarse para ejecutar una regla de votación dada, cuando no se conoce de antemano las preferencias de los votantes. Determinamos la <br>complejidad de comunicación</br> de las reglas de votación comunes. Para cada regla, primero damos una cota superior en la <br>complejidad de comunicación</br> (determinística) proporcionando un protocolo de comunicación para ella y analizando cuántos bits necesitan ser transmitidos en este protocolo. (Los resultados de Segal [20] no se aplican a la mayoría de las reglas de votación porque la mayoría de las reglas de votación no son intersección-monótonas (o incluso monótonas).) Para muchas de las reglas de votación bajo estudio, resulta que no se puede hacer mejor que simplemente permitir que cada votante comunique inmediatamente toda su información (potencialmente relevante). ",
            "candidates": [],
            "error": [
                [
                    "complejidad de comunicación",
                    "complejidad de comunicación",
                    "complejidad de la comunicación",
                    "complejidad de comunicación",
                    "complejidad de comunicación"
                ]
            ]
        },
        "vote": {
            "translated_key": "voto",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Communication Complexity of Common Voting Rules∗ Vincent Conitzer Carnegie Mellon University 5000 Forbes Avenue Pittsburgh, PA 15213, USA conitzer@cs.cmu.edu Tuomas Sandholm Carnegie Mellon University 5000 Forbes Avenue Pittsburgh, PA 15213, USA sandholm@cs.cmu.edu ABSTRACT We determine the communication complexity of the common voting rules.",
                "The rules (sorted by their communication complexity from low to high) are plurality, plurality with runoff, single transferable <br>vote</br> (STV), Condorcet, approval, Bucklin, cup, maximin, Borda, Copeland, and ranked pairs.",
                "For each rule, we first give a deterministic communication protocol and an upper bound on the number of bits communicated in it; then, we give a lower bound on (even the nondeterministic) communication requirements of the voting rule.",
                "The bounds match for all voting rules except STV and maximin.",
                "Categories and Subject Descriptors F.2 [Theory of Computation]: Analysis of Algorithms and Problem Complexity; J.4 [Computer Applications]: Social and Behavioral Sciences-Economics General Terms Algorithms, Economics, Theory 1.",
                "INTRODUCTION One key factor in the practicality of any preference aggregation rule is its communication burden.",
                "To successfully aggregate the agents preferences, it is usually not necessary for all the agents to report all of their preference information.",
                "Clever protocols that elicit the agents preferences partially and sequentially have the potential to dramatically reduce the required communication.",
                "This has at least the following advantages: • It can make preference aggregation feasible in settings where the total amount of preference information is too large to communicate. • Even when communicating all the preference information is feasible, reducing the communication requirements lessens the burden placed on the agents.",
                "This is especially true when the agents, rather than knowing all their preferences in advance, need to invest effort (such as computation or information gathering) to determine their preferences [16]. • It preserves (some of) the agents privacy.",
                "Most of the work on reducing the communication burden in preference aggregation has focused on resource allocation settings such as combinatorial auctions, in which an auctioneer auctions off a number of (possibly distinct) items in a single event.",
                "Because in a combinatorial auction, bidders can have separate valuations for each of an exponential number of possible bundles of items, this is a setting in which reducing the communication burden is especially crucial.",
                "This can be accomplished by supplementing the auctioneer with an elicitor that incrementally elicits parts of the bidders preferences on an as-needed basis, based on what the bidders have revealed about their preferences so far, as suggested by Conen and Sandholm [5].",
                "For example, the elicitor can ask for a bidders value for a specific bundle (value queries), which of two bundles the bidder prefers (order queries), which bundle he ranks kth or what the rank of a given bundle is (rank queries), which bundle he would purchase given a particular vector of prices (demand queries), etc.-until (at least) the final allocation can be determined.",
                "Experimentally, this yields drastic savings in preference revelation [11].",
                "Furthermore, if the agents valuation functions are drawn from certain natural subclasses, the elicitation problem can be solved using only polynomially many queries even in the worst case [23, 4, 13, 18, 14].",
                "For a review of preference elicitation in combinatorial auctions, see [17].",
                "Ascending combinatorial auctions are a well-known special form of preference elicitation, where the elicitor asks demand queries with increasing prices [15, 21, 1, 9].",
                "Finally, resource 78 allocation problems have also been studied from a communication complexity viewpoint, thereby deriving lower bounds on the required communication.",
                "For example, Nisan and Segal show that exponential communication is required even to obtain a surplus greater than that obtained by auctioning off all objects as a single bundle [14].",
                "Segal also studies social choice rules in general, and shows that for a large class of social choice rules, supporting budget sets must be revealed such that if every agent prefers the same outcome in her budget set, this proves the optimality of that outcome.",
                "Segal then uses this characterization to prove bounds on the communication required in resource allocation as well as matching settings [20].",
                "In this paper, we will focus on the communication requirements of a generally applicable subclass of social choice rules, commonly known as voting rules.",
                "In a voting setting, there is a set of candidate outcomes over which the voters express their preferences by submitting a <br>vote</br> (typically, a ranking of the candidates), and the winner (that is, the chosen outcome) is determined based on these votes.",
                "The communication required by voting rules can be large either because the number of voters is large (such as, for example, in national elections), or because the number of candidates is large (for example, the agents can <br>vote</br> over allocations of a number of resources), or both.",
                "Prior work [8] has studied elicitation in voting, studying how computationally hard it is to decide whether a winner can be determined with the information elicited so far, as well as how hard it is to find the optimal sequence of queries given perfect suspicions about the voters preferences.",
                "In addition, that paper discusses strategic (game-theoretic) issues introduced by elicitation.",
                "In contrast, in this paper, we are concerned with the worst-case number of bits that must be communicated to execute a given voting rule, when nothing is known in advance about the voters preferences.",
                "We determine the communication complexity of the common voting rules.",
                "For each rule, we first give an upper bound on the (deterministic) communication complexity by providing a communication protocol for it and analyzing how many bits need to be transmitted in this protocol. (Segals results [20] do not apply to most voting rules because most voting rules are not intersectionmonotonic (or even monotonic).1 ) For many of the voting rules under study, it turns out that one cannot do better than simply letting each voter immediately communicate all her (potentially relevant) information.",
                "However, for some rules (such as plurality with runoff, STV and cup) there is a straightforward multistage communication protocol that, with some analysis, can be shown to significantly outperform the immediate communication of all (potentially relevant) information.",
                "Finally, for some rules (such as the Condorcet and Bucklin rules), we need to introduce a more complex communication protocol to achieve the best possible upper 1 For two of the rules that we study that are intersectionmonotonic, namely the approval and Condorcet rules, Segals results can in fact be used to give alternative proofs of our lower bounds.",
                "We only give direct proofs for these rules here because 1) these direct proofs are among the easier ones in this paper, 2) the alternative proofs are nontrivial even given Segals results, and 3) a space constraint applies.",
                "However, we hope to also include the alternative proofs in a later version. bound.",
                "After obtaining the upper bounds, we show that they are tight by giving matching lower bounds on (even the nondeterministic) communication complexity of each voting rule.",
                "There are two exceptions: STV, for which our upper and lower bounds are apart by a factor log m; and maximin, for which our best deterministic upper bound is also a factor log m above the (nondeterministic) lower bound, although we give a nondeterministic upper bound that matches the lower bound. 2. REVIEW OF VOTING RULES In this section, we review the common voting rules that we study in this paper.",
                "A voting rule2 is a function mapping a vector of the n voters votes (i.e. preferences over candidates) to one of the m candidates (the winner) in the candidate set C. In some cases (such as the Condorcet rule), the rule may also declare that no winner exists.",
                "We do not concern ourselves with what happens in case of a tie between candidates (our lower bounds hold regardless of how ties are broken, and the communication protocols used for our upper bounds do not attempt to break the ties).",
                "All of the rules that we study are rank-based rules, which means that a <br>vote</br> is defined as an ordering of the candidates (with the exception of the plurality rule, for which a <br>vote</br> is a single candidate, and the approval rule, for which a vote is a subset of the candidates).",
                "We will consider the following voting rules. (For rules that define a score, the candidate with the highest score wins.) • scoring rules.",
                "Let α = α1, . . . , αm be a vector of integers such that α1 ≥ α2 . . . ≥ αm.",
                "For each voter, a candidate receives α1 points if it is ranked first by the voter, α2 if it is ranked second etc.",
                "The score sα of a candidate is the total number of points the candidate receives.",
                "The Borda rule is the scoring rule with α = m−1, m−2, . . . , 0 .",
                "The plurality rule is the scoring rule with α = 1, 0, . . . , 0 . • single transferable <br>vote</br> (STV).",
                "The rule proceeds through a series of m − 1 rounds.",
                "In each round, the candidate with the lowest plurality score (that is, the least number of voters ranking it first among the remaining candidates) is eliminated (and each of the votes for that candidate transfer to the next remaining candidate in the order given in that <br>vote</br>).",
                "The winner is the last remaining candidate. • plurality with run-off.",
                "In this rule, a first round eliminates all candidates except the two with the highest plurality scores.",
                "Votes are transferred to these as in the STV rule, and a second round determines the winner from these two. • approval.",
                "Each voter labels each candidate as either approved or disapproved.",
                "The candidate approved by the greatest number of voters wins. • Condorcet.",
                "For any two candidates i and j, let N(i, j) be the number of voters who prefer i to j.",
                "If there is a candidate i that is preferred to any other candidate by a majority of the voters (that is, N(i, j) > N(j, i) for all j = i-that is, i wins every pairwise election), then candidate i wins. 2 The term voting protocol is often used to describe the same concept, but we seek to draw a sharp distinction between the rule mapping preferences to outcomes, and the communication/elicitation protocol used to implement this rule. 79 • maximin (aka.",
                "Simpson).",
                "The maximin score of i is s(i) = minj=i N(i, j)-that is, is worst performance in a pairwise election.",
                "The candidate with the highest maximin score wins. • Copeland.",
                "For any two distinct candidates i and j, let C(i, j) = 1 if N(i, j) > N(j, i), C(i, j) = 1/2 if N(i, j) = N(j, i) and C(i, j) = 0 if N(i, j) < N(j, i).",
                "The Copeland score of candidate i is s(i) = j=i C(i, j). • cup (sequential binary comparisons).",
                "The cup rule is defined by a balanced3 binary tree T with one leaf per candidate, and an assignment of candidates to leaves (each leaf gets one candidate).",
                "Each non-leaf node is assigned the winner of the pairwise election of the nodes children; the candidate assigned to the root wins. • Bucklin.",
                "For any candidate i and integer l, let B(i, l) be the number of voters that rank candidate i among the top l candidates.",
                "The winner is arg mini(min{l : B(i, l) > n/2}).",
                "That is, if we say that a voter approves her top l candidates, then we repeatedly increase l by 1 until some candidate is approved by more than half the voters, and this candidate is the winner. • ranked pairs.",
                "This rule determines an order on all the candidates, and the winner is the candidate at the top of this order.",
                "Sort all ordered pairs of candidates (i, j) by N(i, j), the number of voters who prefer i to j.",
                "Starting with the pair (i, j) with the highest N(i, j), we lock in the result of their pairwise election (i j).",
                "Then, we move to the next pair, and we lock the result of their pairwise election.",
                "We continue to lock every pairwise result that does not contradict the ordering established so far.",
                "We emphasize that these definitions of voting rules do not concern themselves with how the votes are elicited from the voters; all the voting rules, including those that are suggestively defined in terms of rounds, are in actuality just functions mapping the vector of all the voters votes to a winner.",
                "Nevertheless, there are always many different ways of eliciting the votes (or the relevant parts thereof) from the voters.",
                "For example, in the plurality with runoff rule, one way of eliciting the votes is to ask every voter to declare her entire ordering of the candidates up front.",
                "Alternatively, we can first ask every voter to declare only her most preferred candidate; then, we will know the two candidates in the runoff, and we can ask every voter which of these two candidates she prefers.",
                "Thus, we distinguish between the voting rule (the mapping from vectors of votes to outcomes) and the communication protocol (which determines how the relevant parts of the votes are actually elicited from the voters).",
                "The goal of this paper is to give efficient communication protocols for the voting rules just defined, and to prove that there do not exist any more efficient communication protocols.",
                "It is interesting to note that the choice of the communication protocol may affect the strategic behavior of the voters.",
                "Multistage communication protocols may reveal to the voters some information about how the other voters are voting (for example, in the two-stage communication protocol just given for plurality with runoff, in the second stage voters 3 Balanced means that the difference in depth between two leaves can be at most one. will know which two candidates have the highest plurality scores).",
                "In general, when the voters receive such information, it may give them incentives to <br>vote</br> differently than they would have in a single-stage communication protocol in which all voters declare their entire votes simultaneously.",
                "Of course, even the single-stage communication protocol is not strategy-proof4 for any reasonable voting rule, by the Gibbard-Satterthwaite theorem [10, 19].",
                "However, this does not mean that we should not be concerned about adding even more opportunities for strategic voting.",
                "In fact, many of the communication protocols introduced in this paper do introduce additional opportunities for strategic voting, but we do not have the space to discuss this here. (In prior work [8], we do give an example where an elicitation protocol for the approval voting rule introduces strategic voting, and give principles for designing elicitation protocols that do not introduce strategic problems.)",
                "Now that we have reviewed voting rules, we move on to a brief review of communication complexity theory. 3. REVIEW OF SOME COMMUNICATION COMPLEXITY THEORY In this section, we review the basic model of a communication problem and the lower-bounding technique of constructing a fooling set. (The basic model of a communication problem is due to Yao [22]; for an overview see Kushilevitz and Nisan [12].)",
                "Each player 1 ≤ i ≤ n knows (only) input xi.",
                "Together, they seek to compute f(x1, x2, . . . , xn).",
                "In a deterministic protocol for computing f, in each stage, one of the players announces (to all other players) a bit of information based on her own input and the bits announced so far.",
                "Eventually, the communication terminates and all players know f(x1, x2, . . . , xn).",
                "The goal is to minimize the worst-case (over all input vectors) number of bits sent.",
                "The deterministic communication complexity of a problem is the worstcase number of bits sent in the best (correct) deterministic protocol for it.",
                "In a nondeterministic protocol, the next bit to be sent can be chosen nondeterministically.",
                "For the purposes of this paper, we will consider a nondeterministic protocol correct if for every input vector, there is some sequence of nondeterministic choices the players can make so that the players know the value of f when the protocol terminates.",
                "The nondeterministic communication complexity of a problem is the worst-case number of bits sent in the best (correct) nondeterministic protocol for it.",
                "We are now ready to give the definition of a fooling set.",
                "Definition 1.",
                "A fooling set is a set of input vectors {(x1 1, x1 2, . . . , x1 n), (x2 1, x2 2, . . . , x2 n), . . . , (xk 1 , xk 2 , . . . , xk n) such that for any i, f(xi 1, xi 2, . . . , xi n) = f0 for some constant f0, but for any i = j, there exists some vector (r1, r2, . . . , rn) ∈ {i, j}n such that f(xr1 1 , xr2 2 , . . . , xrn n ) = f0. (That is, we can mix the inputs from the two input vectors to obtain a vector with a different function value.)",
                "It is known that if a fooling set of size k exists, then log k is a lower bound on the communication complexity (even the nondeterministic communication complexity) [12]. 4 A strategy-proof protocol is one in which it is in the players best interest to report their preferences truthfully. 80 For the purposes of this paper, f is the voting rule that maps the votes to the winning candidate, and xi is voter is <br>vote</br> (the information that the voting rule would require from the voter if there were no possibility of multistage communication-i.e. the most preferred candidate (plurality), the approved candidates (approval), or the ranking of all the candidates (all other protocols)).",
                "However, when we derive our lower bounds, f will only signify whether a distinguished candidate a wins. (That is, f is 1 if a wins, and 0 otherwise.)",
                "This will strengthen our lower bound results (because it implies that even finding out whether one given candidate wins is hard).5 Thus, a fooling set in our context is a set of vectors of votes so that a wins (does not win) with each of them; but for any two different <br>vote</br> vectors in the set, there is a way of taking some voters votes from the first vector and the others votes from the second vector, so that a does not win (wins).",
                "To simplify the proofs of our lower bounds, we make assumptions such as the number of voters n is odd in many of these proofs.",
                "Therefore, technically, we do not prove the lower bound for (number of candidates, number of voters) pairs (m, n) that do not satisfy these assumptions (for example, if we make the above assumption, then we technically do not prove the lower bound for any pair (m, n) in which n is even).",
                "Nevertheless, we always prove the lower bound for a representative set of (m, n) pairs.",
                "For example, for every one of our lower bounds it is the case that for infinitely many values of m, there are infinitely many values of n such that the lower bound is proved for the pair (m, n). 4.",
                "RESULTS We are now ready to present our results.",
                "For each voting rule, we first give a deterministic communication protocol for determining the winner to establish an upper bound.",
                "Then, we give a lower bound on the nondeterministic communication complexity (even on the complexity of deciding whether a given candidate wins, which is an easier question).",
                "The lower bounds match the upper bounds in all but two cases: the STV rule (upper bound O(n(log m)2 ); lower bound Ω(n log m)) and the maximin rule (upper bound O(nm log m), although we do give a nondeterministic protocol that is O(nm); lower bound Ω(nm)).",
                "When we discuss a voting rule in which the voters rank the candidates, we will represent a ranking in which candidate c1 is ranked first, c2 is ranked second, etc. as c1 c2 . . . cm. 5 One possible concern is that in the case where ties are possible, it may require much communication to verify whether a specific candidate a is among the winners, but little communication to produce one of the winners.",
                "However, all the fooling sets we use in the proofs have the property that if a wins, then a is the unique winner.",
                "Therefore, in these fooling sets, if one knows any one of the winners, then one knows whether a is a winner.",
                "Thus, computing one of the winners requires at least as much communication as verifying whether a is among the winners.",
                "In general, when a communication problem allows multiple correct answers for a given vector of inputs, this is known as computing a relation rather than a function [12].",
                "However, as per the above, we can restrict our attention to a subset of the domain where the voting rule truly is a (single-valued) function, and hence lower bounding techniques for functions rather than relations will suffice.",
                "Sometimes for the purposes of a proof the internal ranking of a subset of the candidates does not matter, and in this case we will not specify it.",
                "For example, if S = {c2, c3}, then c1 S c4 indicates that either the ranking c1 c2 c3 c4 or the ranking c1 c3 c2 c4 can be used for the proof.",
                "We first give a universal upper bound.",
                "Theorem 1.",
                "The deterministic communication complexity of any rank-based voting rule is O(nm log m).",
                "Proof.",
                "This bound is achieved by simply having everyone communicate their entire ordering of the candidates (indicating the rank of an individual candidate requires only O(log m) bits, so each of the n voters can simply indicate the rank of each of the m candidates).",
                "The next lemma will be useful in a few of our proofs.",
                "Lemma 1.",
                "If m divides n, then log(n! )−m log((n/m)!) ≥ n(log m − 1)/2.",
                "Proof.",
                "If n/m = 1 (that is, n = m), then this expression simplifies to log(n!).",
                "We have log(n!) = n i=1 log i ≥ n x=1 log(i)dx, which, using integration by parts, is equal to n log n − (n − 1) > n(log n − 1) = n(log m − 1) > n(log m − 1)/2.",
                "So, we can assume that n/m ≥ 2.",
                "We observe that log(n!) = n i=1 log i = n/m−1 i=0 m j=1 log(im+j) ≥ n/m−1 i=1 m j=1 log(im) = m n/m−1 i=1 log(im), and that m log((n/m)!) = m n/m i=1 log(i).",
                "Therefore, log(n!) − m log((n/m)!) ≥ m n/m−1 i=1 log(im) − m n/m i=1 log(i) = m(( n/m−1 i=1 log(im/i))−log(n/m)) = m((n/m− 1) log m−log n+log m) = n log m−m log n. Now, using the fact that n/m ≥ 2, we have m log n = n(m/n) log m(n/m) = n(m/n)(log m + log(n/m)) ≤ n(1/2)(log m + log 2).",
                "Thus, log(n!) − m log((n/m)!) ≥ n log m − m log n ≥ n log m − n(1/2)(log m + log 2) = n(log m − 1)/2.",
                "Theorem 2.",
                "The deterministic communication complexity of the plurality rule is O(n log m).",
                "Proof.",
                "Indicating one of the candidates requires only O(log m) bits, so each voter can simply indicate her most preferred candidate.",
                "Theorem 3.",
                "The nondeterministic communication complexity of the plurality rule is Ω(n log m) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We will exhibit a fooling set of size n ! (( n m )! )m where n = (n−1)/2.",
                "Taking the logarithm of this gives log(n ! )− m log((n /m)! ), so the result follows from Lemma 1.",
                "The fooling set will consist of all vectors of votes satisfying the following constraints: • For any 1 ≤ i ≤ n , voters 2i−1 and 2i <br>vote</br> the same. 81 • Every candidate receives equally many votes from the first 2n = n − 1 voters. • The last voter (voter n) votes for a.",
                "Candidate a wins with each one of these <br>vote</br> vectors because of the extra <br>vote</br> for a from the last voter.",
                "Given that m divides n , let us see how many <br>vote</br> vectors there are in the fooling set.",
                "We need to distribute n voter pairs evenly over m candidates, for a total of n /m voter pairs per candidate; and there are precisely n ! (( n m )! )m ways of doing this.6 All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters <br>vote</br> according to one of these two vectors in such a way that a loses.",
                "Let i be a number such that the two <br>vote</br> vectors disagree on the candidate for which voters 2i − 1 and 2i <br>vote</br>.",
                "Without loss of generality, suppose that in the first <br>vote</br> vector, these voters do not <br>vote</br> for a (but for some other candidate, b, instead).",
                "Now, construct a new <br>vote</br> vector by taking votes 2i − 1 and 2i from the first <br>vote</br> vector, and the remaining votes from the second vote vector.",
                "Then, b receives 2n /m + 2 votes in this newly constructed <br>vote</br> vector, whereas a receives at most 2n /m+1 votes.",
                "So, a is not the winner in the newly constructed <br>vote</br> vector, and hence we have a correct fooling set.",
                "Theorem 4.",
                "The deterministic communication complexity of the plurality with runoff rule is O(n log m).",
                "Proof.",
                "First, let every voter indicate her most preferred candidate using log m bits.",
                "After this, the two candidates in the runoff are known, and each voter can indicate which one she prefers using a single additional bit.",
                "Theorem 5.",
                "The nondeterministic communication complexity of the plurality with runoff rule is Ω(n log m) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We will exhibit a fooling set of size n ! (( n m )! )m where m = m/2 and n = (n − 2)/4.",
                "Taking the logarithm of this gives log(n !) − m log((n /m )! ), so the result follows from Lemma 1.",
                "Divide the candidates into m pairs: (c1, d1), (c2, d2), . . . , (cm , dm ) where c1 = a and d1 = b.",
                "The fooling set will consist of all vectors of votes satisfying the following constraints: • For any 1 ≤ i ≤ n , voters 4i − 3 and 4i − 2 rank the candidates ck(i) a C − {a, ck(i)}, for some candidate ck(i). (If ck(i) = a then the <br>vote</br> is simply a C − {a}.) • For any 1 ≤ i ≤ n , voters 4i − 1 and 4i rank the candidates dk(i) a C − {a, dk(i)} (that is, their most preferred candidate is the candidate that is paired with the candidate that the previous two voters <br>vote</br> for). 6 An intuitive proof of this is the following.",
                "We can count the number of permutations of n elements as follows.",
                "First, divide the elements into m buckets of size n /m, so that if x is placed in a lower-indexed bucket than y, then x will be indexed lower in the eventual permutation.",
                "Then, decide on the permutation within each bucket (for which there are (n /m)! choices per bucket).",
                "It follows that n ! equals the number of ways to divide n elements into m buckets of size n /m, times ((n /m)! )m . • Every candidate is ranked at the top of equally many of the first 4n = n − 2 votes. • Voter 4n +1 = n−1 ranks the candidates a C−{a}. • Voter 4n + 2 = n ranks the candidates b C − {b}.",
                "Candidate a wins with each one of these <br>vote</br> vectors: because of the last two votes, candidates a and b are one <br>vote</br> ahead of all the other candidates and continue to the runoff, and at this point all the votes that had another candidate ranked at the top transfer to a, so that a wins the runoff.",
                "Given that m divides n , let us see how many <br>vote</br> vectors there are in the fooling set.",
                "We need to distribute n groups of four voters evenly over the m pairs of candidates, and (as in the proof of Theorem 3) there are n ! (( n m )! )m ways of doing this.",
                "All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters <br>vote</br> according to one of these two vectors in such a way that a loses.",
                "Let i be a number such that ck(i) is not the same in both of these two <br>vote</br> vectors, that is, c1 k(i) (ck(i) in the first <br>vote</br> vector) is not equal to c2 k(i) (ck(i) in the second vote vector).",
                "Without loss of generality, suppose c1 k(i) = a.",
                "Now, construct a new <br>vote</br> vector by taking votes 4i − 3, 4i − 2, 4i − 1, 4i from the first <br>vote</br> vector, and the remaining votes from the second vote vector.",
                "In this newly constructed <br>vote</br> vector, c1 k(i) and d1 k(i) each receive 4n /m+2 votes in the first round, whereas a receives at most 4n /m+1 votes.",
                "So, a does not continue to the runoff in the newly constructed <br>vote</br> vector, and hence we have a correct fooling set.",
                "Theorem 6.",
                "The nondeterministic communication complexity of the Borda rule is Ω(nm log m) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We will exhibit a fooling set of size (m ! )n where m = m−2 and n = (n−2)/4.",
                "This will prove the theorem because m ! is Ω(m log m), so that log((m ! )n ) = n log(m !) is Ω(nm log m).",
                "For every vector (π1, π2, . . . , πn ) consisting of n orderings of all candidates other than a and another fixed candidate b (technically, the orderings take the form of a one-to-one function πi : {1, 2, . . . , m } → C − {a, b} with πi(j) = c indicating that candidate c is the jth in the order represented by πi), let the following vector of votes be an element of the fooling set: • For 1 ≤ i ≤ n , let voters 4i − 3 and 4i − 2 rank the candidates a b πi(1) πi(2) . . . πi(m ). • For 1 ≤ i ≤ n , let voters 4i − 1 and 4i rank the candidates πi(m ) πi(m − 1) . . . πi(1) b a. • Let voter 4n + 1 = n − 1 rank the candidates a b π0(1) π0(2) . . . π0(m ) (where π0 is an arbitrary order of the candidates other than a and b which is the same for every element of the fooling set). • Let voter 4n + 2 = n rank the candidates π0(m ) π0(m − 1) . . . π0(1) a b.",
                "We observe that this fooling set has size (m ! )n , and that candidate a wins in each vector of votes in the fooling set (to 82 see why, we observe that for any 1 ≤ i ≤ n , votes 4i−3 and 4i − 2 rank the candidates in the exact opposite way from votes 4i − 1 and 4i, which under the Borda rule means they cancel out; and the last two votes give one more point to a than to any other candidate-besides b who gets two fewer points than a).",
                "All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters <br>vote</br> according to one of these two vectors in such a way that a loses.",
                "Let the first <br>vote</br> vector correspond to the vector (π1 1, π1 2, . . . , π1 n ), and let the second <br>vote</br> vector correspond to the vector (π2 1, π2 2, . . . , π2 n ).",
                "For some i, we must have π1 i = π2 i , so that for some candidate c /∈ {a, b}, (π1 i )−1 (c) < (π2 i )−1 (c) (that is, c is ranked higher in π1 i than in π2 i ).",
                "Now, construct a new <br>vote</br> vector by taking votes 4i−3 and 4i−2 from the first <br>vote</br> vector, and the remaining votes from the second vote vector. as Borda score remains unchanged.",
                "However, because c is ranked higher in π1 i than in π2 i , c receives at least 2 more points from votes 4i−3 and 4i − 2 in the newly constructed <br>vote</br> vector than it did in the second <br>vote</br> vector.",
                "It follows that c has a higher Borda score than a in the newly constructed <br>vote</br> vector.",
                "So, a is not the winner in the newly constructed <br>vote</br> vector, and hence we have a correct fooling set.",
                "Theorem 7.",
                "The nondeterministic communication complexity of the Copeland rule is Ω(nm log m) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We will exhibit a fooling set of size (m ! )n where m = (m − 2)/2 and n = (n − 2)/2.",
                "This will prove the theorem because m ! is Ω(m log m), so that log((m ! )n ) = n log(m !) is Ω(nm log m).",
                "We write the set of candidates as the following disjoint union: C = {a, b} ∪ L ∪ R where L = {l1, l2, . . . , lm } and R = {r1, r2, . . . , rm }.",
                "For every vector (π1, π2, . . . , πn ) consisting of n permutations of the integers 1 through m (πi : {1, 2, . . . , m } → {1, 2, . . . , m }), let the following vector of votes be an element of the fooling set: • For 1 ≤ i ≤ n , let voter 2i − 1 rank the candidates a b lπi(1) rπi(1) lπi(2) rπi(2) . . . lπi(m ) rπi(m ). • For 1 ≤ i ≤ n , let voter 2i rank the candidates rπi(m ) lπi(m ) rπi(m −1) lπi(m −1) . . . rπi(1) lπi(1) b a. • Let voter n − 1 = 2n + 1 rank the candidates a b l1 r1 l2 r2 . . . lm rm . • Let voter n = 2n +2 rank the candidates rm lm rm −1 lm −1 . . . r1 l1 a b.",
                "We observe that this fooling set has size (m ! )n , and that candidate a wins in each vector of votes in the fooling set (every pair of candidates is tied in their pairwise election, with the exception that a defeats b, so that a wins the election by half a point).",
                "All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters <br>vote</br> according to one of these two vectors in such a way that a loses.",
                "Let the first <br>vote</br> vector correspond to the vector (π1 1, π1 2, . . . , π1 n ), and let the second <br>vote</br> vector correspond to the vector (π2 1, π2 2, . . . , π2 n ).",
                "For some i, we must have π1 i = π2 i , so that for some j ∈ {1, 2, . . . , m }, we have (π1 i )−1 (j) < (π2 i )−1 (j).",
                "Now, construct a new <br>vote</br> vector by taking <br>vote</br> 2i−1 from the first vote vector, and the remaining votes from the second vote vector. as Copeland score remains unchanged.",
                "Let us consider the score of lj.",
                "We first observe that the rank of lj in <br>vote</br> 2i − 1 in the newly constructed <br>vote</br> vector is at least 2 higher than it was in the second vote vector, because (π1 i )−1 (j) < (π2 i )−1 (j).",
                "Let D1 (lj) be the set of candidates in L ∪ R that voter 2i − 1 ranked lower than lj in the first <br>vote</br> vector (D1 (lj) = {c ∈ L ∪ R : lj 1 2i−1 c}), and let D2 (lj) be the set of candidates in L ∪ R that voter 2i − 1 ranked lower than lj in the second <br>vote</br> vector (D2 (lj) = {c ∈ L ∪ R : lj 2 2i−1 c}).",
                "Then, it follows that in the newly constructed <br>vote</br> vector, lj defeats all the candidates in D1 (lj) − D2 (lj) in their pairwise elections (because lj receives an extra <br>vote</br> in each one of these pairwise elections relative to the second vote vector), and loses to all the candidates in D2 (lj) − D1 (lj) (because lj loses a vote in each one of these pairwise elections relative to the second vote vector), and ties with everyone else.",
                "But |D1 (lj)|−|D2 (lj)| ≥ 2, and hence |D1 (lj) − D2 (lj)| − |D2 (lj) − D1 (lj)| ≥ 2.",
                "Hence, in the newly constructed <br>vote</br> vector, lj has at least two more pairwise wins than pairwise losses, and therefore has at least 1 more point than if lj had tied all its pairwise elections.",
                "Thus, lj has a higher Copeland score than a in the newly constructed <br>vote</br> vector.",
                "So, a is not the winner in the newly constructed <br>vote</br> vector, and hence we have a correct fooling set.",
                "Theorem 8.",
                "The nondeterministic communication complexity of the maximin rule is O(nm).",
                "Proof.",
                "The nondeterministic protocol will guess which candidate w is the winner, and, for each other candidate c, which candidate o(c) is the candidate against whom c receives its lowest score in a pairwise election.",
                "Then, let every voter communicate the following: • for each candidate c = w, whether she prefers c to w; • for each candidate c = w, whether she prefers c to o(c).",
                "We observe that this requires the communication of 2n(m− 1) bits.",
                "If the guesses were correct, then, letting N(d, e) be the number of voters preferring candidate d to candidate e, we should have N(c, o(c)) < N(w, c ) for any c = w, c = w, which will prove that w wins the election.",
                "Theorem 9.",
                "The nondeterministic communication complexity of the maximin rule is Ω(nm) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We will exhibit a fooling set of size 2n m where m = m − 2 and n = (n − 1)/4.",
                "Let b be a candidate other than a.",
                "For every vector (S1, S2, . . . , Sn ) consisting of n subsets Si ⊆ C − {a, b}, let the following vector of votes be an element of the fooling set: • For 1 ≤ i ≤ n , let voters 4i − 3 and 4i − 2 rank the candidates Si a C − (Si ∪ {a, b}) b. • For 1 ≤ i ≤ n , let voters 4i − 1 and 4i rank the candidates b C − (Si ∪ {a, b}) a Si. 83 • Let voter 4n + 1 = n rank the candidates a b C − {a, b}.",
                "We observe that this fooling set has size (2m )n = 2n m , and that candidate a wins in each vector of votes in the fooling set (in every one of as pairwise elections, a is ranked higher than its opponent by 2n +1 = (n+1)/2 > n/2 votes).",
                "All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters <br>vote</br> according to one of these two vectors in such a way that a loses.",
                "Let the first <br>vote</br> vector correspond to the vector (S1 1 , S1 2 , . . . , S1 n ), and let the second <br>vote</br> vector correspond to the vector (S2 1 , S2 2 , . . . , S2 n ).",
                "For some i, we must have S1 i = S2 i , so that either S1 i S2 i or S2 i S1 i .",
                "Without loss of generality, suppose S1 i S2 i , and let c be some candidate in S1 i − S2 i .",
                "Now, construct a new <br>vote</br> vector by taking votes 4i − 3 and 4i − 2 from the first <br>vote</br> vector, and the remaining votes from the second vote vector.",
                "In this newly constructed <br>vote</br> vector, a is ranked higher than c by only 2n −1 voters, for the following reason.",
                "Whereas voters 4i−3 and 4i − 2 do not rank c higher than a in the second <br>vote</br> vector (because c /∈ S2 i ), voters 4i − 3 and 4i − 2 do rank c higher than a in the first <br>vote</br> vector (because c ∈ S1 i ).",
                "Moreover, in every one of bs pairwise elections, b is ranked higher than its opponent by at least 2n voters.",
                "So, a has a lower maximin score than b, therefore a is not the winner in the newly constructed <br>vote</br> vector, and hence we have a correct fooling set.",
                "Theorem 10.",
                "The deterministic communication complexity of the STV rule is O(n(log m)2 ).",
                "Proof.",
                "Consider the following communication protocol.",
                "Let each voter first announce her most preferred candidate (O(n log m) communication).",
                "In the remaining rounds, we will keep track of each voters most preferred candidate among the remaining candidates, which will be enough to implement the rule.",
                "When candidate c is eliminated, let each of the voters whose most preferred candidate among the remaining candidates was c announce their most preferred candidate among the candidates remaining after cs elimination.",
                "If candidate c was the ith candidate to be eliminated (that is, there were m − i + 1 candidates remaining before cs elimination), it follows that at most n/(m − i + 1) voters had candidate c as their most preferred candidate among the remaining candidates, and thus the number of bits to be communicated after the elimination of the ith candidate is O((n/(m−i+1)) log m).7 Thus, the total communication in this communication protocol is O(n log m + m−1 i=1 (n/(m − i + 1)) log m).",
                "Of course, m−1 i=1 1/(m − i + 1) = m i=2 1/i, which is O(log m).",
                "Substituting into the previous expression, we find that the communication complexity is O(n(log m)2 ).",
                "Theorem 11.",
                "The nondeterministic communication complexity of the STV rule is Ω(n log m) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We omit this proof because of space constraint. 7 Actually, O((n/(m − i + 1)) log(m − i + 1)) is also correct, but it will not improve the bound.",
                "Theorem 12.",
                "The deterministic communication complexity of the approval rule is O(nm).",
                "Proof.",
                "Approving or disapproving of a candidate requires only one bit of information, so every voter can simply approve or disapprove of every candidate for a total communication of nm bits.",
                "Theorem 13.",
                "The nondeterministic communication complexity of the approval rule is Ω(nm) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We will exhibit a fooling set of size 2n m where m = m − 1 and n = (n − 1)/4.",
                "For every vector (S1, S2, . . . , Sn ) consisting of n subsets Si ⊆ C − {a}, let the following vector of votes be an element of the fooling set: • For 1 ≤ i ≤ n , let voters 4i − 3 and 4i − 2 approve Si ∪ {a}. • For 1 ≤ i ≤ n , let voters 4i − 1 and 4i approve C − (Si ∪ {a}). • Let voter 4n + 1 = n approve {a}.",
                "We observe that this fooling set has size (2m )n = 2n m , and that candidate a wins in each vector of votes in the fooling set (a is approved by 2n + 1 voters, whereas each other candidate is approved by only 2n voters).",
                "All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters <br>vote</br> according to one of these two vectors in such a way that a loses.",
                "Let the first <br>vote</br> vector correspond to the vector (S1 1 , S1 2 , . . . , S1 n ), and let the second <br>vote</br> vector correspond to the vector (S2 1 , S2 2 , . . . , S2 n ).",
                "For some i, we must have S1 i = S2 i , so that either S1 i S2 i or S2 i S1 i .",
                "Without loss of generality, suppose S1 i S2 i , and let b be some candidate in S1 i − S2 i .",
                "Now, construct a new <br>vote</br> vector by taking votes 4i − 3 and 4i − 2 from the first <br>vote</br> vector, and the remaining votes from the second vote vector.",
                "In this newly constructed <br>vote</br> vector, a is still approved by 2n + 1 votes.",
                "However, b is approved by 2n + 2 votes, for the following reason.",
                "Whereas voters 4i−3 and 4i−2 do not approve b in the second <br>vote</br> vector (because b /∈ S2 i ), voters 4i − 3 and 4i − 2 do approve b in the first <br>vote</br> vector (because b ∈ S1 i ).",
                "It follows that bs score in the newly constructed <br>vote</br> vector is bs score in the second <br>vote</br> vector (2n ), plus two.",
                "So, a is not the winner in the newly constructed <br>vote</br> vector, and hence we have a correct fooling set.",
                "Interestingly, an Ω(m) lower bound can be obtained even for the problem of finding a candidate that is approved by more than one voter [20].",
                "Theorem 14.",
                "The deterministic communication complexity of the Condorcet rule is O(nm).",
                "Proof.",
                "We maintain a set of active candidates S which is initialized to C. At each stage, we choose two of the active candidates (say, the two candidates with the lowest indices), and we let each voter communicate which of the two candidates she prefers. (Such a stage requires the communication of n bits, one per voter.)",
                "The candidate preferred by fewer 84 voters (the loser of the pairwise election) is removed from S. (If the pairwise election is tied, both candidates are removed.)",
                "After at most m − 1 iterations, only one candidate is left (or zero candidates are left, in which case there is no Condorcet winner).",
                "Let a be the remaining candidate.",
                "To find out whether candidate a is the Condorcet winner, let each voter communicate, for every candidate c = a, whether she prefers a to c. (This requires the communication of at most n(m − 1) bits.)",
                "This is enough to establish whether a won each of its pairwise elections (and thus, whether a is the Condorcet winner).",
                "Theorem 15.",
                "The nondeterministic communication complexity of the Condorcet rule is Ω(nm) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We will exhibit a fooling set of size 2n m where m = m − 1 and n = (n − 1)/2.",
                "For every vector (S1, S2, . . . , Sn ) consisting of n subsets Si ⊆ C − {a}, let the following vector of votes be an element of the fooling set: • For 1 ≤ i ≤ n , let voter 2i − 1 rank the candidates Si a C − Si. • For 1 ≤ i ≤ n , let voter 2i rank the candidates C − Si a Si. • Let voter 2n +1 = n rank the candidates a C −{a}.",
                "We observe that this fooling set has size (2m )n = 2n m , and that candidate a wins in each vector of votes in the fooling set (a wins each of its pairwise elections by a single <br>vote</br>).",
                "All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters <br>vote</br> according to one of these two vectors in such a way that a loses.",
                "Let the first <br>vote</br> vector correspond to the vector (S1 1 , S1 2 , . . . , S1 n ), and let the second <br>vote</br> vector correspond to the vector (S2 1 , S2 2 , . . . , S2 n ).",
                "For some i, we must have S1 i = S2 i , so that either S1 i S2 i or S2 i S1 i .",
                "Without loss of generality, suppose S1 i S2 i , and let b be some candidate in S1 i − S2 i .",
                "Now, construct a new <br>vote</br> vector by taking <br>vote</br> 2i − 1 from the first vote vector, and the remaining votes from the second vote vector.",
                "In this newly constructed <br>vote</br> vector, b wins its pairwise election against a by one <br>vote</br> (vote 2i − 1 ranks b above a in the newly constructed vote vector because b ∈ S1 i , whereas in the second vote vector vote 2i − 1 ranked a above b because b /∈ S2 i ).",
                "So, a is not the Condorcet winner in the newly constructed <br>vote</br> vector, and hence we have a correct fooling set.",
                "Theorem 16.",
                "The deterministic communication complexity of the cup rule is O(nm).",
                "Proof.",
                "Consider the following simple communication protocol.",
                "First, let all the voters communicate, for every one of the matchups in the first round, which of its two candidates they prefer.",
                "After this, the matchups for the second round are known, so let all the voters communicate which candidate they prefer in each matchup in the second round-etc.",
                "Because communicating which of two candidates is preferred requires only one bit per voter, and because there are only m − 1 matchups in total, this communication protocol requires O(nm) communication.",
                "Theorem 17.",
                "The nondeterministic communication complexity of the cup rule is Ω(nm) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We will exhibit a fooling set of size 2n m where m = (m − 1)/2 and n = (n − 7)/2.",
                "Given that m + 1 is a power of 2, so that one candidate gets a bye (that is, does not face an opponent) in the first round, let a be the candidate with the bye.",
                "Of the m first-round matchups, let lj denote the one (left) candidate in the jth matchup, and let rj be the other (right) candidate.",
                "Let L = {lj : 1 ≤ j ≤ m } and R = {rj : 1 ≤ j ≤ m }, so that C = L ∪ R ∪ {a}. . . . . . . . . . l r l r l r a m1 1 2 2 m Figure 1: The schedule for the cup rule used in the proof of Theorem 17.",
                "For every vector (S1, S2, . . . , Sn ) consisting of n subsets Si ⊆ R, let the following vector of votes be an element of the fooling set: • For 1 ≤ i ≤ n , let voter 2i − 1 rank the candidates Si L a R − Si. • For 1 ≤ i ≤ n , let voter 2i rank the candidates R − Si L a Si. • Let voters 2n +1 = n−6, 2n +2 = n−5, 2n +3 = n−4 rank the candidates L a R. • Let voters 2n + 4 = n − 3, 2n + 5 = n − 2 rank the candidates a r1 l1 r2 l2 . . . rm lm . • Let voters 2n + 6 = n − 1, 2n + 7 = n rank the candidates rm lm rm −1 lm −1 . . . r1 l1 a.",
                "We observe that this fooling set has size (2m )n = 2n m .",
                "Also, candidate a wins in each vector of votes in the fooling set, for the following reasons.",
                "Each candidate rj defeats its opponent lj in the first round. (For any 1 ≤ i ≤ n , the net effect of votes 2i − 1 and 2i on the pairwise election between rj and lj is zero; votes n − 6, n − 5, n − 4 prefer lj to rj, but votes n − 3, n − 2, n − 1, n all prefer rj to lj.)",
                "Moreover, a defeats every rj in their pairwise election. (For any 1 ≤ i ≤ n , the net effect of votes 2i − 1 and 2i on the pairwise election between a and rj is zero; votes n − 1, n prefer rj to a, but votes n − 6, n − 5, n − 4, n − 3, n − 2 all prefer a to rj.)",
                "It follows that a will defeat all the candidates that it faces.",
                "All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters <br>vote</br> according to one of these two vectors in such a way that a loses.",
                "Let the first <br>vote</br> vector correspond to the vector 85 (S1 1 , S1 2 , . . . , S1 n ), and let the second <br>vote</br> vector correspond to the vector (S2 1 , S2 2 , . . . , S2 n ).",
                "For some i, we must have S1 i = S2 i , so that either S1 i S2 i or S2 i S1 i .",
                "Without loss of generality, suppose S1 i S2 i , and let rj be some candidate in S1 i − S2 i .",
                "Now, construct a new <br>vote</br> vector by taking <br>vote</br> 2i from the first vote vector, and the remaining votes from the second vote vector.",
                "We note that, whereas in the second <br>vote</br> vector <br>vote</br> 2i preferred rj to lj (because rj ∈ R−S2 i ), in the newly constructed vote vector this is no longer the case (because rj ∈ S1 i ).",
                "It follows that, whereas in the second <br>vote</br> vector, rj defeated lj in the first round by one <br>vote</br>, in the newly constructed vote vector, lj defeats rj in the first round.",
                "Thus, at least one lj advances to the second round after defeating its opponent rj.",
                "Now, we observe that in the newly constructed <br>vote</br> vector, any lk wins its pairwise election against any rq with q = k. This is because among the first 2n votes, at least n − 1 prefer lk to rq; votes n − 6, n − 5, n − 4 prefer lk to rq; and, because q = k, either votes n − 3, n − 2 prefer lk to rq (if k < q), or votes n − 1, n prefer lk to rq (if k > q).",
                "Thus, at least n + 4 = (n + 1)/2 > n/2 votes prefer lk to rq.",
                "Moreover, any lk wins its pairwise election against a.",
                "This is because only votes n − 3 and n − 2 prefer a to lk.",
                "It follows that, after the first round, any surviving candidate lk can only lose a matchup against another surviving lk , so that one of the lk must win the election.",
                "So, a is not the winner in the newly constructed <br>vote</br> vector, and hence we have a correct fooling set.",
                "Theorem 18.",
                "The deterministic communication complexity of the Bucklin rule is O(nm).",
                "Proof.",
                "Let l be the minimum integer for which there is a candidate who is ranked among the top l candidates by more than half the votes.",
                "We will do a binary search for l. At each point, we will have a lower bound lL which is smaller than l (initialized to 0), and an upper bound lH which is at least l (initialized to m).",
                "While lH − lL > 1, we continue by finding out whether (lH − l)/2 is smaller than l, after which we can update the bounds.",
                "To find out whether a number k is smaller than l, we determine every voters k most preferred candidates.",
                "Every voter can communicate which candidates are among her k most preferred candidates using m bits (for each candidate, indicate whether the candidate is among the top k or not), but because the binary search requires log m iterations, this gives us an upper bound of O((log m)nm), which is not strong enough.",
                "However, if lL < k < lH , and we already know a voters lL most preferred candidates, as well as her lH most preferred candidates, then the voter no longer needs to communicate whether the lL most preferred candidates are among her k most preferred candidates (because they must be), and she no longer needs to communicate whether the m−lH least preferred candidates are among her k most preferred candidates (because they cannot be).",
                "Thus the voter needs to communicate only m−lL −(m−lH ) = lH −lL bits in any given stage.",
                "Because each stage, lH − lL is (roughly) halved, each voter in total communicates only (roughly) m + m/2 + m/4 + . . . ≤ 2m bits.",
                "Theorem 19.",
                "The nondeterministic communication complexity of the Bucklin rule is Ω(nm) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We will exhibit a fooling set of size 2n m where m = (m−1)/2 and n = n/2.",
                "We write the set of candidates as the following disjoint union: C = {a} ∪ L ∪ R where L = {l1, l2, . . . , lm } and R = {r1, r2, . . . , rm }.",
                "For any subset S ⊆ {1, 2, . . . , m }, let L(S) = {li : i ∈ S} and let R(S) = {ri : i ∈ S}.",
                "For every vector (S1, S2, . . . , Sn ) consisting of n sets Si ⊆ {1, 2, . . . , m }, let the following vector of votes be an element of the fooling set: • For 1 ≤ i ≤ n , let voter 2i − 1 rank the candidates L(Si) R − R(Si) a L − L(Si) R(Si). • For 1 ≤ i ≤ n , let voter 2i rank the candidates L − L(Si) R(Si) a L(Si) R − R(Si).",
                "We observe that this fooling set has size (2m )n = 2n m , and that candidate a wins in each vector of votes in the fooling set, for the following reason.",
                "Each candidate in C − {a} is ranked among the top m candidates by exactly half the voters (which is not enough to win).",
                "Thus, we need to look at the voters top m +1 candidates, and a is ranked m +1th by all voters.",
                "All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters <br>vote</br> according to one of these two vectors in such a way that a loses.",
                "Let the first <br>vote</br> vector correspond to the vector (S1 1 , S1 2 , . . . , S1 n ), and let the second <br>vote</br> vector correspond to the vector (S2 1 , S2 2 , . . . , S2 n ).",
                "For some i, we must have S1 i = S2 i , so that either S1 i S2 i or S2 i S1 i .",
                "Without loss of generality, suppose S1 i S2 i , and let j be some integer in S1 i − S2 i .",
                "Now, construct a new <br>vote</br> vector by taking <br>vote</br> 2i − 1 from the first vote vector, and the remaining votes from the second vote vector.",
                "In this newly constructed <br>vote</br> vector, a is still ranked m + 1th by all votes.",
                "However, lj is ranked among the top m candidates by n + 1 = n/2 + 1 votes.",
                "This is because whereas <br>vote</br> 2i − 1 does not rank lj among the top m candidates in the second <br>vote</br> vector (because j /∈ S2 i , we have lj /∈ L(S2 i )), vote 2i − 1 does rank lj among the top m candidates in the first vote vector (because j ∈ S1 i , we have lj ∈ L(S1 i )).",
                "So, a is not the winner in the newly constructed <br>vote</br> vector, and hence we have a correct fooling set.",
                "Theorem 20.",
                "The nondeterministic communication complexity of the ranked pairs rule is Ω(nm log m) (even to decide whether a given candidate a wins).",
                "Proof.",
                "We omit this proof because of space constraint. 5.",
                "DISCUSSION One key obstacle to using voting for preference aggregation is the communication burden that an election places on the voters.",
                "By lowering this burden, it may become feasible to conduct more elections over more issues.",
                "In the limit, this could lead to a shift from representational government to a system in which most issues are decided by referenda-a veritable e-democracy.",
                "In this paper, we analyzed the communication complexity of the common voting rules.",
                "Knowing which voting rules require little communication is especially important when the issue to be voted on is of low enough importance that the following is true: the parties involved are willing to accept a rule that tends 86 to produce outcomes that are slightly less representative of the voters preferences, if this rule reduces the communication burden on the voters significantly.",
                "The following table summarizes the results we obtained.",
                "Rule Lower bound Upper bound plurality Ω(n log m) O(n log m) plurality w/ runoff Ω(n log m) O(n log m) STV Ω(n log m) O(n(log m)2) Condorcet Ω(nm) O(nm) approval Ω(nm) O(nm) Bucklin Ω(nm) O(nm) cup Ω(nm) O(nm) maximin Ω(nm) O(nm) Borda Ω(nm log m) O(nm log m) Copeland Ω(nm log m) O(nm log m) ranked pairs Ω(nm log m) O(nm log m) Communication complexity of voting rules, sorted from low to high.",
                "All of the upper bounds are deterministic (with the exception of maximin, for which the best deterministic upper bound we proved is O(nm log m)).",
                "All of the lower bounds hold even for nondeterministic communication and even just for determining whether a given candidate a is the winner.",
                "One area of future research is to study what happens when we restrict our attention to communication protocols that do not reveal any strategically useful information.",
                "This restriction may invalidate some of the upper bounds that we derived using multistage communication protocols.",
                "Also, all of our bounds are worst-case bounds.",
                "It may be possible to outperform these bounds when the distribution of votes has additional structure.",
                "When deciding which voting rule to use for an election, there are many considerations to take into account.",
                "The voting rules that we studied in this paper are the most common ones that have survived the test of time.",
                "One way to select among these rules is to consider recent results on complexity.",
                "The table above shows that from a communication complexity perspective, plurality, plurality with runoff, and STV are preferable.",
                "However, plurality has the undesirable property that it is computationally easy to manipulate by voting strategically [3, 7].",
                "Plurality with runoff is NP-hard to manipulate by a coalition of weighted voters, or by an individual that faces correlated uncertainty about the others votes [7, 6].",
                "STV is NP-hard to manipulate in those settings as well [7], but also by an individual with perfect knowledge of the others votes (when the number of candidates is unbounded) [2].",
                "Therefore, STV is more robust, although it may require slightly more worst-case communication as per the table above.",
                "Yet other selection criteria are the computational complexity of determining whether enough information has been elicited to declare a winner, and that of determining the optimal sequence of queries [8]. 6.",
                "REFERENCES [1] Lawrence Ausubel and Paul Milgrom.",
                "Ascending auctions with package bidding.",
                "Frontiers of Theoretical Economics, 1, 2002.",
                "No. 1, Article 1. [2] John Bartholdi, III and James Orlin.",
                "Single transferable <br>vote</br> resists strategic voting.",
                "Social Choice and Welfare, 8(4):341-354, 1991. [3] John Bartholdi, III, Craig Tovey, and Michael Trick.",
                "The computational difficulty of manipulating an election.",
                "Social Choice and Welfare, 6(3):227-241, 1989. [4] Avrim Blum, Jeffrey Jackson, Tuomas Sandholm, and Martin Zinkevich.",
                "Preference elicitation and query learning.",
                "Journal of Machine Learning Research, 5:649-667, 2004. [5] Wolfram Conen and Tuomas Sandholm.",
                "Preference elicitation in combinatorial auctions: Extended abstract.",
                "In Proceedings of the ACM Conference on Electronic Commerce (ACM-EC), pages 256-259, 2001. [6] Vincent Conitzer, Jerome Lang, and Tuomas Sandholm.",
                "How many candidates are needed to make elections hard to manipulate?",
                "In Theoretical Aspects of Rationality and Knowledge (TARK), pages 201-214, 2003. [7] Vincent Conitzer and Tuomas Sandholm.",
                "Complexity of manipulating elections with few candidates.",
                "In Proceedings of the National Conference on Artificial Intelligence (AAAI), pages 314-319, 2002. [8] Vincent Conitzer and Tuomas Sandholm.",
                "<br>vote</br> elicitation: Complexity and strategy-proofness.",
                "In Proceedings of the National Conference on Artificial Intelligence (AAAI), pages 392-397, 2002. [9] Sven de Vries, James Schummer, and Rakesh V. Vohra.",
                "On ascending auctions for heterogeneous objects, 2003.",
                "Draft. [10] Allan Gibbard.",
                "Manipulation of voting schemes.",
                "Econometrica, 41:587-602, 1973. [11] Benoit Hudson and Tuomas Sandholm.",
                "Effectiveness of query types and policies for preference elicitation in combinatorial auctions.",
                "In International Conference on Autonomous Agents and Multi-Agent Systems (AAMAS), pages 386-393, 2004. [12] E Kushilevitz and N Nisan.",
                "Communication Complexity.",
                "Cambridge University Press, 1997. [13] Sebasti´en Lahaie and David Parkes.",
                "Applying learning algorithms to preference elicitation.",
                "In Proceedings of the ACM Conference on Electronic Commerce, 2004. [14] Noam Nisan and Ilya Segal.",
                "The communication requirements of efficient allocations and supporting prices.",
                "Journal of Economic Theory, 2005.",
                "Forthcoming. [15] David Parkes. iBundle: An efficient ascending price bundle auction.",
                "In Proceedings of the ACM Conference on Electronic Commerce (ACM-EC), pages 148-157, 1999. [16] Tuomas Sandholm.",
                "An implementation of the contract net protocol based on marginal cost calculations.",
                "In Proceedings of the National Conference on Artificial Intelligence (AAAI), pages 256-262, 1993. [17] Tuomas Sandholm and Craig Boutilier.",
                "Preference elicitation in combinatorial auctions.",
                "In Peter Cramton, Yoav Shoham, and Richard Steinberg, editors, Combinatorial Auctions, chapter 10.",
                "MIT Press, 2005. [18] Paolo Santi, Vincent Conitzer, and Tuomas Sandholm.",
                "Towards a characterization of polynomial preference elicitation with value queries in combinatorial auctions.",
                "In Conference on Learning Theory (COLT), pages 1-16, 2004. [19] Mark Satterthwaite.",
                "Strategy-proofness and Arrows conditions: existence and correspondence theorems for voting procedures and social welfare functions.",
                "Journal of Economic Theory, 10:187-217, 1975. [20] Ilya Segal.",
                "The communication requirements of social choice rules and supporting budget sets, 2004.",
                "Draft.",
                "Presented at the DIMACS Workshop on Computational Issues in Auction Design, Rutgers University, New Jersey, USA. [21] Peter Wurman and Michael Wellman.",
                "AkBA: A progressive, anonymous-price combinatorial auction.",
                "In Proceedings of the ACM Conference on Electronic Commerce (ACM-EC), pages 21-29, 2000. [22] A. C. Yao.",
                "Some complexity questions related to distributed computing.",
                "In Proceedings of the 11th ACM symposium on theory of computing (STOC), pages 209-213, 1979. [23] Martin Zinkevich, Avrim Blum, and Tuomas Sandholm.",
                "On polynomial-time preference elicitation with value queries.",
                "In Proceedings of the ACM Conference on Electronic Commerce (ACM-EC), pages 176-185, 2003. 87"
            ],
            "original_annotated_samples": [
                "The rules (sorted by their communication complexity from low to high) are plurality, plurality with runoff, single transferable <br>vote</br> (STV), Condorcet, approval, Bucklin, cup, maximin, Borda, Copeland, and ranked pairs.",
                "In a voting setting, there is a set of candidate outcomes over which the voters express their preferences by submitting a <br>vote</br> (typically, a ranking of the candidates), and the winner (that is, the chosen outcome) is determined based on these votes.",
                "The communication required by voting rules can be large either because the number of voters is large (such as, for example, in national elections), or because the number of candidates is large (for example, the agents can <br>vote</br> over allocations of a number of resources), or both.",
                "All of the rules that we study are rank-based rules, which means that a <br>vote</br> is defined as an ordering of the candidates (with the exception of the plurality rule, for which a <br>vote</br> is a single candidate, and the approval rule, for which a vote is a subset of the candidates).",
                "The plurality rule is the scoring rule with α = 1, 0, . . . , 0 . • single transferable <br>vote</br> (STV)."
            ],
            "translated_annotated_samples": [
                "Las reglas (ordenadas por su complejidad de comunicación de baja a alta) son pluralidad, pluralidad con segunda vuelta, <br>voto único transferible</br> (STV), Condorcet, aprobación, Bucklin, taza, maximin, Borda, Copeland y pares clasificados.",
                "En un entorno de votación, hay un conjunto de resultados de candidatos sobre los cuales los votantes expresan sus preferencias al enviar un <br>voto</br> (normalmente, una clasificación de los candidatos), y el ganador (es decir, el resultado elegido) se determina en función de estos <br>voto</br>s.",
                "La comunicación requerida por las reglas de votación puede ser grande ya sea porque el número de votantes es grande (como, por ejemplo, en elecciones nacionales), o porque el número de candidatos es grande (por ejemplo, los agentes pueden <br>votar</br> sobre asignaciones de un número de recursos), o ambos.",
                "Todas las reglas que estudiamos son reglas basadas en el rango, lo que significa que un <br>voto</br> se define como un ordenamiento de los candidatos (con la excepción de la regla de la pluralidad, para la cual un <br>voto</br> es un único candidato, y la regla de aprobación, para la cual un voto es un subconjunto de los candidatos).",
                "La regla de la pluralidad es la regla de puntuación con α = 1, 0, . . . , 0. • <br>voto</br> único transferible (STV)."
            ],
            "translated_text": "Determinamos la complejidad de comunicación de las reglas de votación comunes. Las reglas (ordenadas por su complejidad de comunicación de baja a alta) son pluralidad, pluralidad con segunda vuelta, <br>voto único transferible</br> (STV), Condorcet, aprobación, Bucklin, taza, maximin, Borda, Copeland y pares clasificados. Para cada regla, primero proporcionamos un protocolo de comunicación determinista y un límite superior en la cantidad de bits comunicados en él; luego, damos un límite inferior en los requisitos de comunicación (incluso los no deterministas) de la regla de votación. Los límites coinciden para todas las reglas de votación excepto STV y maximin. Categorías y Descriptores de Asignaturas F.2 [Teoría de la Computación]: Análisis de Algoritmos y Complejidad de Problemas; J.4 [Aplicaciones Informáticas]: Ciencias Sociales y del Comportamiento-Economía Términos Generales Algoritmos, Economía, Teoría 1. INTRODUCCIÓN Un factor clave en la viabilidad de cualquier regla de agregación de preferencias es su carga de comunicación. Para agregar con éxito las preferencias de los agentes, generalmente no es necesario que todos los agentes informen toda su información de preferencias. Los protocolos inteligentes que obtienen parcial y secuencialmente las preferencias de los agentes tienen el potencial de reducir drásticamente la comunicación requerida. Esto tiene al menos las siguientes ventajas: • Puede hacer factible la agregación de preferencias en entornos donde la cantidad total de información de preferencias es demasiado grande para comunicar. • Incluso cuando comunicar toda la información de preferencias es factible, reducir los requisitos de comunicación disminuye la carga impuesta a los agentes. Esto es especialmente cierto cuando los agentes, en lugar de conocer todas sus preferencias de antemano, necesitan invertir esfuerzo (como cálculos o recopilación de información) para determinar sus preferencias. • Preserva (parte de) la privacidad de los agentes. La mayor parte del trabajo sobre la reducción de la carga de comunicación en la agregación de preferencias se ha centrado en entornos de asignación de recursos como subastas combinatorias, en las que un subastador subasta un número de artículos (posiblemente distintos) en un solo evento. Debido a que en una subasta combinatoria, los postores pueden tener valoraciones separadas para cada uno de un número exponencial de posibles paquetes de artículos, este es un escenario en el que reducir la carga de comunicación es especialmente crucial. Esto se puede lograr complementando al subastador con un provocador que elicitara incrementalmente partes de las preferencias de los postores según sea necesario, basándose en lo que los postores han revelado sobre sus preferencias hasta el momento, como sugieren Conen y Sandholm [5]. Por ejemplo, el solicitante puede preguntar por el valor de un postor para un paquete específico (consultas de valor), cuál de dos paquetes prefiere el postor (consultas de orden), qué paquete clasifica en la posición k o cuál es la posición de un paquete dado (consultas de clasificación), qué paquete compraría dado un vector particular de precios (consultas de demanda), etc., hasta que se pueda determinar (al menos) la asignación final. Experimentalmente, esto produce a drástico ahorro en la revelación de preferencias [11]. Además, si las funciones de valoración de los agentes provienen de ciertas subclases naturales, el problema de la obtención de información puede resolverse utilizando solo un número polinomial de consultas incluso en el peor de los casos [23, 4, 13, 18, 14]. Para una revisión de la obtención de preferencias en subastas combinatorias, consulte [17]. Las subastas combinatorias ascendentes son una forma especial conocida de obtención de preferencias, donde el encuestador realiza consultas de demanda con precios crecientes [15, 21, 1, 9]. Finalmente, los problemas de asignación de recursos 78 también han sido estudiados desde el punto de vista de la complejidad de la comunicación, derivando así límites inferiores sobre la comunicación requerida. Por ejemplo, Nisan y Segal muestran que se requiere comunicación exponencial incluso para obtener un excedente mayor al obtenido al subastar todos los objetos como un único paquete [14]. Segal también estudia reglas de elección social en general, y muestra que para una gran clase de reglas de elección social, los conjuntos de presupuesto de apoyo deben ser revelados de tal manera que si cada agente prefiere el mismo resultado en su conjunto de presupuesto, esto demuestra la optimalidad de ese resultado. Segal luego utiliza esta caracterización para demostrar límites en la comunicación requerida en la asignación de recursos, así como en entornos de emparejamiento [20]. En este documento, nos enfocaremos en los requisitos de comunicación de una subclase generalmente aplicable de reglas de elección social, comúnmente conocidas como reglas de votación. En un entorno de votación, hay un conjunto de resultados de candidatos sobre los cuales los votantes expresan sus preferencias al enviar un <br>voto</br> (normalmente, una clasificación de los candidatos), y el ganador (es decir, el resultado elegido) se determina en función de estos <br>voto</br>s. La comunicación requerida por las reglas de votación puede ser grande ya sea porque el número de votantes es grande (como, por ejemplo, en elecciones nacionales), o porque el número de candidatos es grande (por ejemplo, los agentes pueden <br>votar</br> sobre asignaciones de un número de recursos), o ambos. El trabajo previo [8] ha estudiado la obtención de información en votaciones, analizando qué tan difícil es computacionalmente decidir si se puede determinar un ganador con la información obtenida hasta el momento, así como qué tan difícil es encontrar la secuencia óptima de preguntas dadas sospechas perfectas sobre las preferencias de los votantes. Además, ese artículo discute cuestiones estratégicas (teóricas de juegos) introducidas por la obtención de información. Por el contrario, en este artículo nos preocupamos por el número máximo de bits que deben comunicarse para ejecutar una regla de votación dada, cuando no se conoce de antemano las preferencias de los votantes. Determinamos la complejidad de comunicación de las reglas de votación comunes. Para cada regla, primero damos una cota superior en la complejidad de comunicación (determinística) proporcionando un protocolo de comunicación para ella y analizando cuántos bits necesitan ser transmitidos en este protocolo. (Los resultados de Segal [20] no se aplican a la mayoría de las reglas de votación porque la mayoría de las reglas de votación no son intersección-monótonas (o incluso monótonas).) Para muchas de las reglas de votación bajo estudio, resulta que no se puede hacer mejor que simplemente permitir que cada votante comunique inmediatamente toda su información (potencialmente relevante). Sin embargo, para algunas reglas (como la pluralidad con segunda vuelta, STV y taza) existe un protocolo de comunicación multietapa directo que, con un análisis detallado, se puede demostrar que supera significativamente la comunicación inmediata de toda la información (potencialmente relevante). Finalmente, para algunas reglas (como las reglas de Condorcet y Bucklin), necesitamos introducir un protocolo de comunicación más complejo para lograr el mejor límite superior posible. Para dos de las reglas que estudiamos que son intersección-monótonas, a saber, las reglas de aprobación y Condorcet, los resultados de Segal de hecho pueden ser utilizados para dar pruebas alternativas de nuestros límites inferiores. Solo proporcionamos pruebas directas para estas reglas aquí porque 1) estas pruebas directas son de las más fáciles en este documento, 2) las pruebas alternativas son no triviales incluso dados los resultados de Segal, y 3) se aplica una restricción de espacio. Sin embargo, esperamos incluir también las pruebas alternativas en una versión posterior. Después de obtener los límites superiores, demostramos que son ajustados al proporcionar límites inferiores coincidentes en la complejidad de comunicación (incluso la no determinista) de cada regla de votación. Hay dos excepciones: STV, para el cual nuestros límites superiores e inferiores difieren en un factor log m; y maximin, para el cual nuestro mejor límite superior determinístico también es un factor log m por encima del límite inferior (no determinístico), aunque proporcionamos un límite superior no determinístico que coincide con el límite inferior. 2. REVISIÓN DE LAS REGLAS DE VOTACIÓN En esta sección, revisamos las reglas de votación comunes que estudiamos en este documento. Una regla de votación es una función que asigna un vector de votos de los n votantes (es decir, preferencias sobre candidatos) a uno de los m candidatos (el ganador) en el conjunto de candidatos C. En algunos casos (como la regla de Condorcet), la regla también puede declarar que no existe un ganador. No nos preocupamos por lo que sucede en caso de un empate entre candidatos (nuestros límites inferiores se mantienen independientemente de cómo se resuelvan los empates, y los protocolos de comunicación utilizados para nuestros límites superiores no intentan romper los empates). Todas las reglas que estudiamos son reglas basadas en el rango, lo que significa que un <br>voto</br> se define como un ordenamiento de los candidatos (con la excepción de la regla de la pluralidad, para la cual un <br>voto</br> es un único candidato, y la regla de aprobación, para la cual un voto es un subconjunto de los candidatos). Consideraremos las siguientes reglas de votación. (Para reglas que definen una puntuación, el candidato con la puntuación más alta gana.) • reglas de puntuación. Sea α = α1, . . . , αm un vector de enteros tal que α1 ≥ α2 . . . ≥ αm. Para cada votante, un candidato recibe α1 puntos si es clasificado en primer lugar por el votante, α2 si es clasificado en segundo lugar, etc. La puntuación sα de un candidato es el número total de puntos que recibe el candidato. La regla de Borda es la regla de puntuación con α = m−1, m−2, . . . , 0. La regla de la pluralidad es la regla de puntuación con α = 1, 0, . . . , 0. • <br>voto</br> único transferible (STV). ",
            "candidates": [],
            "error": [
                [
                    "voto único transferible",
                    "voto",
                    "voto",
                    "votar",
                    "voto",
                    "voto",
                    "voto"
                ]
            ]
        }
    }
}